["def perfect_keyword(s):\n    r = 'abcdefghijklmnopqrstuvwxyz'\n    keyword = ''\n    i = 0\n    for a in s:\n        if a in keyword:\n            if i == 0:\n                if a == keyword[1]:\n                    i += 1\n                else:\n                    print('NO')\n                    return\n            elif i == len(keyword) - 1:\n                if a == keyword[i - 1]:\n                    i -= 1\n                else:\n                    print('NO')\n                    return\n            elif a == keyword[i - 1]:\n                i -= 1\n            elif a == keyword[i + 1]:\n                i += 1\n            elif a == keyword[i]:\n                i = i\n            else:\n                print('NO')\n                return\n        else:\n            if i != 0 and i != len(keyword) - 1:\n                print('NO')\n                return\n            if i == 0:\n                keyword = a + keyword\n                i = 0\n            else:\n                keyword += a\n                i += 1\n    print('YES')\n    for a in r:\n        if a not in keyword:\n            keyword += a\n    print(keyword)\nt = int(input())\nL = []\nfor i in range(t):\n    s = input()\n    L.append(s)\nfor a in L:\n    perfect_keyword(a)", "def solve(s):\n    res = [s[0]]\n    i = 0\n    for c in s[1:]:\n        if 0 <= i + 1 < len(res) and res[i + 1] == c:\n            i += 1\n        elif 0 <= i - 1 < len(res) and res[i - 1] == c:\n            i -= 1\n        elif i == 0 and c not in res:\n            res.insert(0, c)\n        elif i == len(res) - 1 and c not in res:\n            res.append(c)\n            i += 1\n        else:\n            return None\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in res:\n            res.append(c)\n    return ''.join(res)\nt = int(input())\nfor _ in range(t):\n    ans = solve(input())\n    if ans == None:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "def solve(s):\n    l = set(s[0])\n    res = [s[0]]\n    i = 0\n    for j in range(1, len(s)):\n        if i + 1 < len(res) and res[i + 1] == s[j]:\n            i = i + 1\n            continue\n        if i - 1 > -1 and res[i - 1] == s[j]:\n            i = i - 1\n            continue\n        if i + 1 < len(res) and i - 1 > -1:\n            return ''\n        if s[j] in l:\n            return ''\n        if i == 0:\n            res.insert(0, s[j])\n            l.add(s[j])\n            continue\n        if i == len(res) - 1:\n            res.append(s[j])\n            l.add(s[j])\n            i += 1\n    res = ''.join(res)\n    a = ord('a')\n    z = ord('z')\n    for i in range(a, z + 1):\n        if chr(i) not in l:\n            res += chr(i)\n    return res\nfor t in range(int(input())):\n    s = input()\n    res = solve(s)\n    if res:\n        print('YES')\n        print(res)\n    else:\n        print('NO')", "def solve(s):\n    res = [s[0]]\n    i = 0\n    for c in s[1:]:\n        if 0 <= i + 1 < len(res) and res[i + 1] == c:\n            i += 1\n        elif 0 <= i - 1 < len(res) and res[i - 1] == c:\n            i -= 1\n        elif i == 0 and c not in res:\n            res.insert(0, c)\n        elif i == len(res) - 1 and c not in res:\n            res.append(c)\n            i += 1\n        else:\n            return None\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in res:\n            res.append(c)\n    return ''.join(res)\nt = int(input())\nfor _ in range(t):\n    ans = solve(input())\n    if ans == None:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "def solve(s):\n    res = [s[0]]\n    i = 0\n    for c in s[1:]:\n        if 0 <= i + 1 < len(res) and res[i + 1] == c:\n            i += 1\n        elif 0 <= i - 1 < len(res) and res[i - 1] == c:\n            i -= 1\n        elif i == 0 and c not in res:\n            res.insert(0, c)\n        elif i == len(res) - 1 and c not in res:\n            res.append(c)\n            i += 1\n        else:\n            return None\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in res:\n            res.append(c)\n    return ''.join(res)\nt = int(input())\nfor _ in range(t):\n    ans = solve(input())\n    if ans == None:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "def solve():\n    password = input()\n    pos = [None] * 26\n    idx = 27\n    keyboard = [None] * (26 * 2 + 1)\n    sol = True\n    for p in password:\n        i = ord(p) - ord('a')\n        if pos[i] is None:\n            if keyboard[idx - 1] is None:\n                idx -= 1\n            elif keyboard[idx + 1] is None:\n                idx += 1\n            else:\n                sol = False\n                break\n            pos[i] = idx\n        elif abs(pos[i] - idx) <= 1:\n            idx = pos[i]\n        else:\n            sol = False\n        keyboard[idx] = p\n    keyboard_str = ''\n    for i in keyboard:\n        if i is not None:\n            keyboard_str += i\n    for (i, p) in enumerate(pos):\n        if p is None:\n            keyboard_str += chr(i + ord('a'))\n    if sol:\n        print('YES')\n        print(keyboard_str)\n    else:\n        print('NO')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def findAnswer(string):\n    (prevId, myList, visited) = (0, [], {})\n    myList.append(string[0])\n    visited[string[0]] = True\n    for curr in range(1, len(string)):\n        prevId = getIndex(string[curr], prevId, myList, visited)\n        if prevId == -1:\n            return 'NO'\n    return getfinalAns(''.join(myList), visited)\n\ndef getIndex(currChar, prevId, myList: list, visited: dict):\n    if prevId == 0:\n        if len(myList) > 1 and myList[1] == currChar:\n            return 1\n        elif visited.get(currChar, False):\n            return -1\n        else:\n            visited[currChar] = True\n            myList.insert(0, currChar)\n            return 0\n    elif prevId == len(myList) - 1:\n        if myList[len(myList) - 2] == currChar:\n            return len(myList) - 2\n        elif visited.get(currChar, False):\n            return -1\n        else:\n            visited[currChar] = True\n            myList.append(currChar)\n            return len(myList) - 1\n    elif myList[prevId + 1] == currChar:\n        return prevId + 1\n    elif myList[prevId - 1] == currChar:\n        return prevId - 1\n    else:\n        return -1\n\ndef getfinalAns(string, visited: dict):\n    myList = []\n    for i in range(ord('a'), ord('z') + 1):\n        if not visited.get(chr(i), False):\n            myList.append(chr(i))\n    return string + ''.join(myList)\nt = int(input())\nwhile t > 0:\n    string = input()\n    ans = findAnswer(string)\n    if ans == 'NO':\n        print('NO')\n    else:\n        print('YES')\n        print(ans)\n    t -= 1", "t = int(input())\nfor j in range(t):\n    d = {'a': set(), 'b': set(), 'c': set(), 'd': set(), 'e': set(), 'f': set(), 'g': set(), 'h': set(), 'i': set(), 'j': set(), 'k': set(), 'l': set(), 'm': set(), 'n': set(), 'o': set(), 'p': set(), 'q': set(), 'r': set(), 's': set(), 't': set(), 'u': set(), 'v': set(), 'w': set(), 'x': set(), 'y': set(), 'z': set()}\n    s = input()\n    if len(s) == 1:\n        print('YES')\n        print('abcdefghijklmnopqrstuvwxyz')\n    else:\n        for i in range(1, len(s)):\n            d[s[i]].add(s[i - 1])\n            d[s[i - 1]].add(s[i])\n        bul = True\n        ans = ''\n        str = ''\n        for (key, val) in d.items():\n            if len(val) > 2:\n                bul = False\n                break\n            elif len(val) == 1:\n                ans = key\n            elif len(val) == 0:\n                str += key\n        if not bul or ans == '':\n            print('NO')\n        else:\n            now_el = d[ans].pop()\n            while len(d[now_el]) == 2:\n                for el in d[now_el]:\n                    if el != ans[-1]:\n                        ans += now_el\n                        now_el = el\n                        break\n            ans += now_el\n            print('YES')\n            print(ans + str)", "def solve():\n    s = input()\n    dic = dict([(chr(i), 0) for i in range(97, 123)])\n    s1 = s[0]\n    pos = 0\n    dic[s[0]] = 1\n    for i in range(1, len(s)):\n        if dic[s[i]]:\n            if pos > 0 and s1[pos - 1] == s[i]:\n                pos -= 1\n            elif pos + 1 < len(s1) and s1[pos + 1] == s[i]:\n                pos += 1\n            else:\n                print('NO')\n                return\n        elif pos == 0:\n            s1 = s[i] + s1\n        elif pos == len(s1) - 1:\n            s1 += s[i]\n            pos += 1\n        else:\n            print('NO')\n            return\n        dic[s[i]] = 1\n    for i in range(26):\n        if dic[chr(97 + i)] == 0:\n            s1 += chr(97 + i)\n    print('YES')\n    print(s1)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    temp = s[0]\n    i = 1\n    j = 0\n    slen = len(s)\n    tlen = len(temp)\n    fl = 0\n    seen = set()\n    seen.add(s[0])\n    while i < slen:\n        if s[i] == temp[j]:\n            i += 1\n        elif j > 0 and temp[j - 1] == s[i]:\n            j -= 1\n            i += 1\n        elif j < tlen - 1 and temp[j + 1] == s[i]:\n            j += 1\n            i += 1\n        elif j == 0 and s[i] not in seen:\n            temp = s[i] + temp\n            tlen += 1\n            seen.add(s[i])\n            i += 1\n        elif j == tlen - 1 and s[i] not in seen:\n            temp += s[i]\n            tlen += 1\n            j += 1\n            seen.add(s[i])\n            i += 1\n        else:\n            fl = 1\n            break\n    if fl == 1:\n        print('NO')\n        continue\n    print('YES')\n    farr = [chr(i) for i in range(97, 97 + 26)]\n    for x in temp:\n        farr.remove(x)\n    print(temp + ''.join(farr))", "from collections import deque, Counter\nimport array\nfrom itertools import combinations, permutations\nfrom math import sqrt\n\ndef read_int():\n    return int(input().strip())\n\ndef read_int_array():\n    return [int(i) for i in input().strip().split(' ')]\n\nclass Node:\n\n    def __init__(self, c):\n        self.c = c\n        self.l = None\n        self.r = None\ntests = read_int()\nfor test in range(tests):\n    s = input().strip()\n    left = Node(s[0])\n    x = left\n    found = True\n    used = set([x.c])\n    for c in s[1:]:\n        if x.c == c:\n            continue\n        if x.l and x.l.c == c:\n            x = x.l\n        elif x.r and x.r.c == c:\n            x = x.r\n        elif not x.l and c not in used:\n            x.l = Node(c)\n            used.add(c)\n            x.l.r = x\n            x = x.l\n            left = x\n        elif not x.r and c not in used:\n            x.r = Node(c)\n            used.add(c)\n            x.r.l = x\n            x = x.r\n        else:\n            found = False\n            break\n    if not found:\n        print('NO')\n    else:\n        ans = []\n        x = left\n        while x:\n            ans.append(x.c)\n            x = x.r\n        for c in 'abcdefghijklmnopqrstuvwxyz':\n            if c not in used:\n                ans.append(c)\n        print('YES')\n        print(''.join(ans))", "import math\nfor _ in range(int(input())):\n    s = input()\n    key = []\n    point = -1\n    flag = 0\n    for i in s:\n        if len(key) < 2:\n            key.append(i)\n            point += 1\n        elif len(key) - 2 >= point and key[point + 1] == i:\n            point += 1\n        elif point > 0 and key[point - 1] == i:\n            point -= 1\n        elif point == 0 and i not in key:\n            key.insert(0, i)\n            point = 0\n        elif point == len(key) - 1 and i not in key:\n            key.append(i)\n            point += 1\n        else:\n            flag = 1\n            break\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    key.reverse()\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\n        for i in alphabet:\n            if i not in key:\n                key.append(i)\n        print(''.join(key))", "for _ in range(int(input())):\n    s = input()\n    finish = ''\n    x = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    y = [0] * 52\n    u = 26\n    d = len(s)\n    ok = True\n    s1 = list(s)\n    for i in range(d):\n        if s1[i] in x:\n            x.remove(s1[i])\n        if y[u - 1] == s1[i]:\n            u -= 1\n        elif y[u + 1] == s1[i]:\n            u += 1\n        elif y[u - 1] == 0:\n            u -= 1\n            if s1[i] in y:\n                finish += 'NO'\n                ok = False\n                break\n            else:\n                y[u] = s1[i]\n        elif y[u + 1] == 0:\n            u += 1\n            if s1[i] in y:\n                finish += 'NO'\n                ok = False\n                break\n            else:\n                y[u] = s1[i]\n        else:\n            finish += 'NO'\n            ok = False\n            break\n    if ok:\n        finish += 'YES\\n'\n        for i in range(52):\n            if y[i] != 0:\n                finish += y[i]\n        for i in range(len(x)):\n            finish += x[i]\n    print(finish)", "import sys\n\ndef goback(ins, idx, ss, cur, chk):\n    if idx == len(ins):\n        return ss\n    if chk[ord(ins[idx]) - ord('a')] == 1:\n        if cur + 1 < len(ss) and ss[cur + 1] == ins[idx]:\n            re = goback(ins, idx + 1, ss, cur + 1, chk)\n            if re is not None:\n                return re\n        elif cur - 1 >= 0 and ss[cur - 1] == ins[idx]:\n            re = goback(ins, idx + 1, ss, cur - 1, chk)\n            if re is not None:\n                return re\n    else:\n        chk[ord(ins[idx]) - ord('a')] = 1\n        if cur == 0:\n            re = goback(ins, idx + 1, ins[idx] + ss, cur, chk)\n            if re is not None:\n                return re\n        elif cur == len(ss) - 1:\n            re = goback(ins, idx + 1, ss + ins[idx], cur + 1, chk)\n            if re is not None:\n                return re\n        chk[ord(ins[idx]) - ord('a')] = 0\n    return None\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    s = sys.stdin.readline().rstrip()\n    check = [0] * 26\n    check[ord(s[0]) - ord('a')] = 1\n    result = goback(s, 1, s[0], 0, check)\n    if result is None:\n        print('NO')\n    else:\n        for (ix, i) in enumerate(check):\n            if i == 0:\n                result += chr(ix + ord('a'))\n        print(f'YES\\n{result}')", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    key = ' ' + s[0] + ' '\n    curr = 1\n    flag = False\n    for i in range(1, len(s)):\n        if key.find(s[i]) != -1:\n            if key[curr - 1] == s[i]:\n                curr -= 1\n            elif key[curr + 1] == s[i]:\n                curr += 1\n            else:\n                flag = True\n                break\n        elif key[curr - 1] == ' ':\n            key = ' ' + s[i] + key[1:]\n        elif key[curr + 1] == ' ':\n            key = key[:-1] + s[i] + ' '\n            curr += 1\n        else:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n        print(key[1:-1], end='')\n        x = 'abcdefghijklmnopqrstuvwxyz'\n        for i in x:\n            if key.find(i) != -1:\n                continue\n            else:\n                print(i, end='')\n        print()", "testCases = int(input())\nfor i1 in range(testCases):\n    used = [False] * 26\n    s = input()\n    t = s[0]\n    used[ord(s[0]) - ord('a')] = True\n    pos = 0\n    result = 'YES'\n    for i2 in range(1, len(s), 1):\n        if used[ord(s[i2]) - ord('a')]:\n            if pos > 0 and t[pos - 1] == s[i2]:\n                pos -= 1\n            elif pos < len(t) - 1 and t[pos + 1] == s[i2]:\n                pos += 1\n            else:\n                result = 'NO'\n                break\n        elif pos == 0:\n            t = s[i2] + t\n        elif pos == len(t) - 1:\n            t += s[i2]\n            pos += 1\n        else:\n            result = 'NO'\n            break\n        used[ord(s[i2]) - ord('a')] = True\n    for i2 in range(26):\n        if not used[i2]:\n            t += chr(i2 + ord('a'))\n    print(result)\n    if result == 'YES':\n        print(t)", "t = int(input())\nfor _ in range(t):\n    s = str(input())\n    n = len(s)\n    if n == 1:\n        ans = ''\n        for i in range(26):\n            ans += chr(i + ord('a'))\n        print('YES')\n        print(ans)\n        continue\n    g = [set() for _ in range(26)]\n    for i in range(n - 1):\n        j = i + 1\n        num_i = ord(s[i]) - ord('a')\n        num_j = ord(s[j]) - ord('a')\n        g[num_i].add(num_j)\n        g[num_j].add(num_i)\n    node = 0\n    edge = 0\n    flag = False\n    for i in range(26):\n        if len(g[i]) != 0:\n            node += 1\n            if len(g[i]) == 1:\n                edge += len(g[i])\n                i_ = i\n            elif len(g[i]) == 2:\n                edge += len(g[i])\n            else:\n                flag = True\n    edge = edge // 2\n    if node - 1 != edge:\n        flag = True\n    if flag:\n        print('NO')\n        continue\n    else:\n        print('YES')\n    from collections import deque\n    q = deque()\n    q.append(i_)\n    visit = [-1] * 26\n    visit[i_] = 1\n    ans = ''\n    while q:\n        x = q.popleft()\n        ans += chr(x + ord('a'))\n        for new_x in g[x]:\n            if visit[new_x] == -1:\n                q.append(new_x)\n                visit[new_x] = 1\n    for i in range(26):\n        if visit[i] == -1:\n            ans += chr(i + ord('a'))\n    print(ans)", "n = int(input())\nk = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(n):\n    s = list(input())\n    key = []\n    key.append(s[0])\n    c = 0\n    for i in range(1, len(s)):\n        if s[i] not in key:\n            if key[0] == s[i - 1]:\n                key.insert(0, s[i])\n            elif key[-1] == s[i - 1]:\n                key.append(s[i])\n            else:\n                c = 1\n                break\n        elif s[i] in key:\n            check = 0\n            ind = key.index(s[i])\n            for j in range(max(0, ind - 1), min(len(key), ind + 2), 1):\n                if key[j] == s[i - 1]:\n                    check = 1\n            if check == 0:\n                c = 1\n                break\n    if c == 0:\n        for i in range(26):\n            if k[i] not in key:\n                key.append(k[i])\n        print('YES')\n        print(*key, sep='')\n    else:\n        print('NO')", "t = int(input())\na = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(t):\n    alphcp = list(a)\n    s = input()\n    ret = [s[0]]\n    used = [s[0]]\n    alphcp.remove(s[0])\n    f = True\n    for i in range(1, len(s)):\n        if s[i] in used:\n            fl = True\n            for j in range(len(ret)):\n                if ret[j] == s[i]:\n                    if j == 0 and ret[j + 1] == s[i - 1]:\n                        pass\n                    elif j == len(ret) - 1 and ret[j - 1] == s[i - 1]:\n                        pass\n                    elif j == 0 or j == len(ret) - 1:\n                        print('NO')\n                        f = False\n                        fl = False\n                        break\n                    elif ret[j - 1] == s[i - 1] or ret[j + 1] == s[i - 1]:\n                        pass\n                    else:\n                        print('NO')\n                        f = False\n                        fl = False\n                        break\n            if not fl:\n                break\n        else:\n            used.append(s[i])\n            alphcp.remove(s[i])\n            if ret[0] == s[i - 1]:\n                ret.insert(0, s[i])\n            elif ret[-1] == s[i - 1]:\n                ret.append(s[i])\n            else:\n                print('NO')\n                f = False\n                break\n    if f:\n        ret += alphcp\n        xd = ''.join(ret)\n        print('YES')\n        print(xd)"]