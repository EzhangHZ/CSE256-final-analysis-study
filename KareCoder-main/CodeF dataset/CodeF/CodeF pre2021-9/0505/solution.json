["from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = int(fastinput())\n\ndef maxSubArraySum(a, size, start):\n    maxint = 10 ** 9 + 1\n    max_so_far = -maxint - 1\n    max_ending_here = 0\n    for i in range(start, size, 2):\n        if i + 1 >= size or i >= size:\n            break\n        if start == 0:\n            max_ending_here = max_ending_here + a[i + 1] - a[i]\n        else:\n            max_ending_here = max_ending_here + a[i] - a[i + 1]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\nwhile t:\n    t -= 1\n    n = int(fastinput())\n    b = list(map(int, fastinput().split()))\n    ans = max(0, maxSubArraySum(b, n, 0), maxSubArraySum(b, n, 1))\n    s = 0\n    for i in range(0, n, 2):\n        s += b[i]\n    print(ans + s)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = int(stdin.readline())\n\ndef maxSubArraySum(a, size):\n    max_so_far = -0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    e = []\n    o = []\n    su = 0\n    for i in range(0, n, 2):\n        su += a[i]\n    for i in range(0, n - 1, 2):\n        e.append(a[i + 1] - a[i])\n    for i in range(1, n - 1, 2):\n        o.append(a[i] - a[i + 1])\n    mx1 = maxSubArraySum(e, len(e))\n    mx2 = maxSubArraySum(o, len(o))\n    mx = max([mx1, mx2, 0])\n    print(mx + su)", "from sys import stdin, setrecursionlimit\nimport threading\ninput = lambda : stdin.readline().rstrip('\\r\\n')\nfrom collections import defaultdict as vector\nfrom collections import deque as que\ninin = lambda : int(input())\ninar = lambda : list(map(int, input().split()))\n\ndef maxSubArraySum(even, odd, size):\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += odd[i] - even[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n\ndef main():\n    Testcase = inin()\n    for _ in range(Testcase):\n        n = inin()\n        arr = inar()\n        ans = 0\n        if n % 2:\n            n += 1\n            arr.append(0)\n        even = []\n        odd = []\n        for i in range(n):\n            if i % 2:\n                odd.append(arr[i])\n            else:\n                even.append(arr[i])\n                ans += arr[i]\n        cpy = ans\n        ans += maxSubArraySum(even, odd, len(even))\n        odd = [0] + odd[:-1]\n        ans = max(ans, cpy + maxSubArraySum(even, odd, len(even)))\n        print(ans)\nsetrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "import sys\ninput = sys.stdin.readline\n\ndef testcase():\n    N = int(input())\n    A = [int(x) for x in input().strip().split()]\n    even = [a for (i, a) in enumerate(A) if i % 2 == 0]\n    odd = [a for (i, a) in enumerate(A) if i % 2]\n    ans = sum(even)\n    diff1 = [0] * (N // 2)\n    diff2 = [0] * (N // 2)\n    if N % 2:\n        for (i, o) in enumerate(odd):\n            diff1[i] = o - even[i]\n            diff2[i] = o - even[i + 1]\n    else:\n        for (i, o) in enumerate(odd[:-1]):\n            diff1[i] = o - even[i]\n            diff2[i] = o - even[i + 1]\n        diff1[-1] = odd[-1] - even[-1]\n    cumsum = 0\n    maxi = 0\n    for (i, d) in enumerate(diff1):\n        cumsum += d\n        if cumsum > 0:\n            maxi = max(maxi, cumsum)\n            continue\n        cumsum = 0\n    cumsum = 0\n    for (i, d) in enumerate(diff2):\n        cumsum += d\n        if cumsum > 0:\n            maxi = max(maxi, cumsum)\n            continue\n        cumsum = 0\n    print(ans + maxi)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        testcase()\nmain()", "def maiorLucro(arr):\n    maior = soma = 0\n    for x in arr:\n        soma += x\n        if soma < 0:\n            soma = 0\n        if soma > maior:\n            maior = soma\n    return maior\n\ndef solve():\n    input()\n    num = list(map(int, input().split()))\n    prefImp = [j - i for (i, j) in zip(num[0::2], num[1::2])]\n    prefPar = [i - j for (i, j) in zip(num[1::2], num[2::2])]\n    maxImp = maiorLucro(prefImp)\n    maxPar = maiorLucro(prefPar)\n    adicional = max(maxImp, maxPar)\n    print(sum(num[::2]) + (adicional if adicional > 0 else 0))\nfor _ in range(int(input())):\n    solve()", "def kadane(arr):\n    (mx, cur) = (0, 0)\n    for i in arr:\n        cur += i\n        if mx < cur:\n            mx = cur\n        if cur < 0:\n            cur = 0\n    return mx\nfor i in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    even = 0\n    for j in range(0, n, 2):\n        even += arr[j]\n    (diff1, diff2) = ([], [])\n    for k in range(1, n, 2):\n        diff1.append(arr[k] - arr[k - 1])\n        if k + 1 < n:\n            diff2.append(arr[k] - arr[k + 1])\n    ans = even + max(0, kadane(diff1), kadane(diff2))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    i = 0\n    j = 0\n    maxDif = 0\n    while j < n - 1:\n        even += arr[j]\n        odd += arr[j + 1]\n        if even > odd:\n            even = 0\n            odd = 0\n            i = j\n        maxDif = max(maxDif, odd - even)\n        j += 2\n    odd = 0\n    even = 0\n    i = 1\n    j = 1\n    while j < n - 1:\n        odd += arr[j]\n        even += arr[j + 1]\n        if even > odd:\n            even = 0\n            odd = 0\n            i = j\n        maxDif = max(maxDif, odd - even)\n        j += 2\n    print(sum([arr[i] for i in range(n) if i % 2 == 0]) + maxDif)", "def maxeve(arr):\n    sm = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, len(arr) - 1, 2):\n        cs = max(cs + arr[i + 1] - arr[i], 0)\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, len(arr) - 1, 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    return ms + sm\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(maxeve(lst))", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(0, n, 2):\n        cnt += a[i]\n    sum1 = 0\n    maxim1 = 0\n    for i in range(0, n - 1, 2):\n        sum1 = max(a[i + 1] - a[i] + sum1, a[i + 1] - a[i])\n        maxim1 = max(maxim1, sum1)\n    sum2 = 0\n    maxim2 = 0\n    for i in range(1, n - 1, 2):\n        sum2 = max(a[i] - a[i + 1] + sum2, a[i] - a[i + 1])\n        maxim2 = max(maxim2, sum2)\n    print(max(maxim1, maxim2) + cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    c = 0\n    for i in range(0, n - 1, 2):\n        c += a[i + 1] - a[i]\n        c = max(0, c)\n        m = max(c, m)\n    c = 0\n    for i in range(1, n - 1, 2):\n        c += a[i] - a[i + 1]\n        c = max(0, c)\n        m = max(c, m)\n    sum = 0\n    for i in range(0, n, 2):\n        sum += a[i]\n    print(sum + m)", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    b = []\n    ans = 0\n    for i in range(0, n - 1, 2):\n        b.append(a[i + 1] - a[i])\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n    d = []\n    for i in range(1, n - 1, 2):\n        d.append(a[i] - a[i + 1])\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, len(b)):\n        max_ending_here = max_ending_here + b[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far1 = 0\n    max_ending_here1 = 0\n    for i in range(0, len(d)):\n        max_ending_here1 = max_ending_here1 + d[i]\n        if max_ending_here1 < 0:\n            max_ending_here1 = 0\n        elif max_so_far1 < max_ending_here1:\n            max_so_far1 = max_ending_here1\n    tmp = max(0, max_so_far, max_so_far1)\n    print(ans + tmp)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    current_sum = 0\n    for i in range(0, n, 2):\n        current_sum += nums[i]\n    limite_par = n // 2 - 1\n    if n % 2 == 0:\n        limite_impar = limite_par - 1\n    else:\n        limite_impar = limite_par\n    ganancias_pares = []\n    ganancias_impares = []\n    max_eve_sum = max_odd_sum = 0\n    current_eve_sum = current_odd_sum = 0\n    for i in range(limite_par + 1):\n        voltear = nums[2 * i + 1] - nums[2 * i]\n        current_eve_sum += voltear\n        if current_eve_sum < voltear:\n            current_eve_sum = voltear\n        max_eve_sum = max(max_eve_sum, current_eve_sum)\n    for i in range(limite_impar + 1):\n        voltear = nums[2 * i + 1] - nums[2 * i + 2]\n        current_odd_sum += voltear\n        if current_odd_sum < voltear:\n            current_odd_sum = voltear\n        max_odd_sum = max(max_odd_sum, current_odd_sum)\n    print(current_sum + max(max_odd_sum, max_eve_sum))", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n    v = list()\n    for i in range(n - 1):\n        if i % 2 == 0:\n            v.append(a[i + 1] - a[i])\n    max_sum = 0\n    cur = 0\n    for i in v:\n        cur += i\n        max_sum = max(max_sum, cur)\n        cur = max(cur, 0)\n    tmp = max_sum\n    v.clear()\n    for i in range(n - 1):\n        if i % 2 == 1:\n            v.append(a[i] - a[i + 1])\n    max_sum = 0\n    cur = 0\n    for i in v:\n        cur += i\n        max_sum = max(max_sum, cur)\n        cur = max(cur, 0)\n    ans += max(max_sum, tmp)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += l[i]\n    mx = 0\n    s = 0\n    for i in range(1, n, 2):\n        s -= l[i - 1]\n        s += l[i]\n        if s < 0:\n            s = 0\n        mx = max(mx, s)\n    s = 0\n    for i in range(1, n - 1, 2):\n        s += l[i]\n        s -= l[i + 1]\n        if s < 0:\n            s = 0\n        mx = max(mx, s)\n    print(ans + mx)", "def ms(l):\n    m = 0\n    i = 0\n    s = 0\n    while i < len(l):\n        s += l[i]\n        m = max(s, m)\n        if s < 0:\n            s = 0\n        i += 1\n    return m\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    z = []\n    for i in range(0, n - 1, 2):\n        z.append(l[i + 1] - l[i])\n    o = []\n    for i in range(1, n - 1, 2):\n        o.append(l[i] - l[i + 1])\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(max(ms(o), ms(z)) + s)\nt = int(input())\nfor _ in range(t):\n    solve()", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    x = sum(l[::2])\n    n = len(l)\n    l = [(2 * (i & 1) - 1) * l[i] for i in range(n)]\n    min_e = min_o = 0\n    sm = 0\n    a = 0\n    for i in range(n):\n        sm += l[i]\n        if 1 & i:\n            a = max(a, sm - min_o)\n            min_o = min(sm, min_o)\n        else:\n            a = max(a, sm - min_e)\n            min_e = min(sm, min_e)\n    print(max(x, x + a))", "for j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "def f(L):\n    n = len(L)\n    if n == 1:\n        return L[0]\n    if n == 2:\n        return max(L[0], L[1])\n    S = []\n    P = []\n    bs = 0\n    for i in range(0, n, 2):\n        bs += L[i]\n    s = 0\n    for i in range(1, n, 2):\n        s += L[i] - L[i - 1]\n        S.append(s)\n    m = 0\n    for i in range(2, n, 2):\n        m += L[i - 1] - L[i]\n        P.append(m)\n    maxm1 = [S[0]]\n    maxm2 = [P[0]]\n    k = len(S)\n    m = len(P)\n    for i in range(1, k):\n        maxm1.append(max(S[i] - S[i - 1], S[i] - S[i - 1] + maxm1[-1]))\n    for i in range(1, m):\n        maxm2.append(max(P[i] - P[i - 1], P[i] - P[i - 1] + maxm2[-1]))\n    c = max(max(maxm1), max(maxm2))\n    if c >= 0:\n        return bs + c\n    return bs\nn = int(input())\nfor i in range(n):\n    x = input()\n    L = list(map(int, input().split()))\n    print(f(L))", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    best = [0, 0, 0]\n    st = 0\n    end = 0\n    res = 0\n    for i in range(n // 2):\n        res += -a[i * 2] + a[i * 2 + 1]\n        if res < 0:\n            st = -1\n            end = -1\n            res = 0\n        else:\n            if st != -1:\n                end = i * 2 + 1\n            else:\n                st = i * 2\n                end = i * 2 + 1\n            if res > best[0]:\n                best[0] = res\n                best[1] = st\n                best[2] = end\n    res = 0\n    end = 0\n    st = 0\n    for i in range(n // 2 - 1 + n % 2):\n        res += a[i * 2 + 1] - a[i * 2 + 2]\n        if res < 0:\n            st = -1\n            end = -1\n            res = 0\n        else:\n            if st != -1:\n                end = i * 2 + 1\n            else:\n                st = i * 2\n                end = i * 2 + 1\n            if res > best[0]:\n                best[0] = res\n                best[1] = st\n                best[2] = end\n    sm = 0\n    for i in range(0, n, 2):\n        sm += a[i]\n    print(sm + best[0])\nt = int(input())\nfor i in range(t):\n    main()", "t = int(input())\nbuf = []\nfor _ in range(t):\n    n = int(input())\n    aaa = list(map(int, input().split()))\n    dp = [0, 0, 0, 0]\n    for (i, a) in enumerate(aaa):\n        if i % 2 == 0:\n            dp[3] = max(dp[1], dp[3]) + a\n            dp[1] = max(dp[0], dp[1])\n            dp[0] += a\n        else:\n            dp[3] = max(dp[2], dp[3])\n            dp[2] = max(dp[0], dp[2]) + a\n            dp[1] += a\n    if n % 2 == 0:\n        dp[2] = 0\n    else:\n        dp[1] = 0\n    buf.append(max(dp))\nprint('\\n'.join(map(str, buf)))", "def solve(n, a):\n    n2 = n // 2\n    x = [None] * n2\n    x2 = [None] * n2\n    a.append(a[-1])\n    init = 0 if n % 2 == 0 else a[-1]\n    for i in range(n2):\n        init += a[i * 2]\n        x[i] = a[2 * i + 1] - a[2 * i]\n        x2[i] = a[2 * i + 1] - a[2 * i + 2]\n    return init + max(gs(x), gs(x2), 0)\n\ndef gs(a):\n    cur = 0\n    mm = 0\n    best = 0\n    for v in a:\n        cur += v\n        if best < cur - mm:\n            best = cur - mm\n        if cur < mm:\n            mm = cur\n    return best\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(solve(n, a))", "import math\nfrom sys import maxsize as maxint\n\ndef maxSubArraySum(a):\n    max_so_far = -maxint - 1\n    max_ending_here = 0\n    i = 0\n    while i < len(a) - 1:\n        dif = a[i] - a[i + 1]\n        if i % 2 == 0:\n            dif = a[i + 1] - a[i]\n        max_ending_here = max_ending_here + dif\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n        i += 2\n    i = 1\n    max_ending_here = 0\n    while i < len(a) - 1:\n        dif = a[i] - a[i + 1]\n        if i % 2 == 0:\n            dif = a[i + 1] - a[i]\n        max_ending_here = max_ending_here + dif\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n        i += 2\n    return max_so_far\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    s = sum(array[::2])\n    a = maxSubArraySum(array)\n    print(max(s, s + a))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = 0\n    s = a[0]\n    d = 0\n    m = 0\n    for i in range(1, n, 2):\n        b += a[i] - a[i - 1]\n        if b - m > d:\n            d = b - m\n        if b < m:\n            m = b\n    b = m = e = 0\n    for i in range(2, n, 2):\n        s += a[i]\n        b += a[i - 1] - a[i]\n        if b - m > e:\n            e = b - m\n        if b < m:\n            m = b\n    f = max(d, e)\n    print(s + max(f, 0))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    o = 0\n    e = 0\n    lp1 = 0\n    rp1 = 1\n    mlp = -1\n    mrp = -1\n    md = -1\n    d = 0\n    if n == 1:\n        print(a[0])\n        continue\n    while rp1 < n:\n        e += a[rp1 - 1]\n        o += a[rp1]\n        d = o - e\n        if d < 0:\n            lp1 = rp1 + 1\n            o = 0\n            e = 0\n            d = 0\n        if d > md:\n            mlp = lp1\n            mrp = rp1\n            md = d\n        rp1 += 2\n    lp1 = 1\n    rp1 = 2\n    d = 0\n    o = 0\n    e = 0\n    while rp1 < n:\n        o += a[rp1 - 1]\n        e += a[rp1]\n        d = o - e\n        if d < 0:\n            lp1 = rp1 + 1\n            o = 0\n            e = 0\n            d = 0\n        if d > md:\n            mlp = lp1\n            mrp = rp1\n            md = d\n        rp1 += 2\n    print(sum(a[::2]) + md)", "def maxSubArraySum(a, size):\n    max_so_far = -100000000\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    lilef = []\n    lirig = []\n    for i in range(1, len(li), 2):\n        lilef.append(li[i] - li[i - 1])\n        if i + 1 < len(li):\n            lirig.append(li[i] - li[i + 1])\n    sumi = 0\n    for i in range(0, len(li), 2):\n        sumi = sumi + li[i]\n    maxans = max(maxSubArraySum(lirig, len(lirig)), maxSubArraySum(lilef, len(lilef)))\n    if maxans > 0:\n        print(sumi + maxans)\n    else:\n        print(sumi)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n, 2):\n        ans += a[i]\n    s = 0\n    mx = 0\n    for i in range(0, n - 1, 2):\n        s += a[i + 1] - a[i]\n        mx = max(s, mx)\n        if s < 0:\n            s = 0\n    s = 0\n    for i in range(1, n - 1, 2):\n        s += a[i] - a[i + 1]\n        mx = max(mx, s)\n        if s < 0:\n            s = 0\n    print(ans + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (temp, mx, ans) = (0, 0, 0)\n    for i in range(0, n, 2):\n        ans += l[i]\n    for i in range(0, n - 1, 2):\n        temp += l[i + 1] - l[i]\n        mx = max(mx, temp)\n        if temp < 0:\n            temp = 0\n    temp = 0\n    for i in range(1, n - 1, 2):\n        temp += l[i] - l[i + 1]\n        mx = max(mx, temp)\n        if temp < 0:\n            temp = 0\n    print(ans + mx)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    c = 0\n    for i in range(0, n - 1, 2):\n        c += a[i + 1] - a[i]\n        c = max(0, c)\n        m = max(c, m)\n    c = 0\n    for i in range(1, n - 1, 2):\n        c += a[i] - a[i + 1]\n        c = max(0, c)\n        m = max(c, m)\n    sum = 0\n    for i in range(0, n, 2):\n        sum += a[i]\n    print(sum + m)", "for _ in range(int(input())):\n    n = int(input())\n    a = arr = list(map(int, input().split()))\n    ss = 0\n    odd = []\n    even = []\n    for i in range(0, n - 1, 2):\n        even.append(a[i + 1] - a[i])\n    for i in range(1, n - 1, 2):\n        odd.append(a[i] - a[i + 1])\n    ans = 0\n    total = 0\n    for i in range(len(even)):\n        total += even[i]\n        if total < 0:\n            total = 0\n        ans = max(ans, total)\n    total = 0\n    for i in range(len(odd)):\n        total += odd[i]\n        if total < 0:\n            total = 0\n        ans = max(ans, total)\n    for i in range(0, n, 2):\n        ss += arr[i]\n    print(ss + ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    maxm = 0\n    total = 0\n    for i in range(0, n - 1, 2):\n        total += a[i + 1] - a[i]\n        if total < 0:\n            total = 0\n        maxm = max(maxm, total)\n    total = 0\n    for i in range(1, n - 1, 2):\n        total += a[i] - a[i + 1]\n        if total < 0:\n            total = 0\n        maxm = max(maxm, total)\n    total = 0\n    for i in range(0, n, 2):\n        total += a[i]\n    print(total + maxm)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = sum(a[::2])\n    total = 0\n    maxn = 0\n    for i in range(0, n - 1, 2):\n        total += a[i + 1] - a[i]\n        maxn = max(total, maxn)\n        if total < 0:\n            total = 0\n    total2 = 0\n    for i in range(1, n - 1, 2):\n        total2 += a[i] - a[i + 1]\n        maxn = max(total2, maxn)\n        if total2 < 0:\n            total2 = 0\n    print(ans + maxn)", "def kadane(pref):\n    if pref:\n        mxg = mxl = pref[0]\n        pref.pop(0)\n        for p in pref:\n            mxl = max(p, p + mxl)\n            if mxl > mxg:\n                mxg = mxl\n        if mxg < 0:\n            mxg = 0\n        return mxg\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    evesum = 0\n    pref = []\n    suf = []\n    for i in range(0, n, 2):\n        evesum += arr[i]\n        if i + 1 < n:\n            pref.append(arr[i + 1] - arr[i])\n        if i > 1:\n            suf.append(arr[i - 1] - arr[i])\n    extra = max(kadane(pref), kadane(suf))\n    print(evesum + extra)", "for t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    r = s = rs = 0\n    x = n // 2\n    for i in range(x):\n        s = s + (lst[2 * i + 1] - lst[2 * i])\n        rs = rs + lst[2 * i]\n        s = max(s, 0)\n        if s > r:\n            r = s\n    if n % 2:\n        rs += lst[-1]\n    s = 0\n    y = (n + 1) // 2\n    for i in range(1, y):\n        s += lst[2 * i - 1] - lst[2 * i]\n        s = max(s, 0)\n        if s > r:\n            r = s\n    print(rs + r)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(v) for v in input().split()]\n    v1 = [0]\n    v2 = [0]\n    m = 0\n    s = sum(a[::2])\n    for j in range(0, n - n % 2, 2):\n        v1.append(max(v1[-1] + a[j + 1] - a[j], 0))\n    for j in range(1, n - (1 - n % 2), 2):\n        v2.append(max(a[j] - a[j + 1] + v2[-1], 0))\n    m = max(max(v1), max(v2))\n    print(s + m)", "import math\nfrom math import log2, sqrt\nfrom bisect import bisect_left, bisect_right\nimport bisect\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 6))\nimport collections\nfrom collections import defaultdict\nfrom statistics import median\ninf = float('inf')\n\ndef fun():\n    maxa = 0\n    count = 0\n    index = 0\n    while index + 1 < len(l):\n        count = max(0, count - l[index] + l[index + 1])\n        maxa = max(maxa, count)\n        index += 2\n    index = 2\n    count = 0\n    while index < len(l):\n        count = max(0, count - l[index] + l[index - 1])\n        maxa = max(maxa, count)\n        index += 2\n    return maxa\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = fun()\n    suma = sum(l[::2])\n    print(suma + ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    even_sum = sum(l[::2])\n    v1 = []\n    v2 = []\n    for i in range(1, n - 1, 2):\n        v1.append(l[i] - l[i + 1])\n    for i in range(0, n - 1, 2):\n        v2.append(l[i + 1] - l[i])\n    c = 0\n    m = 0\n    for i in range(len(v1)):\n        c += v1[i]\n        m = max(m, c)\n        if c < 0:\n            c = 0\n    c = 0\n    for i in range(len(v2)):\n        c += v2[i]\n        m = max(m, c)\n        if c < 0:\n            c = 0\n    print(even_sum + m)", "def ok(A):\n    g = 0\n    l = 0\n    for i in range(len(A)):\n        l = max(A[i], l + A[i])\n        g = max(g, l)\n    return g\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += a[i]\n    odd = []\n    even = []\n    for i in range(0, n - 1, 2):\n        even.append(a[i + 1] - a[i])\n    for i in range(1, n - 1, 2):\n        odd.append(a[i] - a[i + 1])\n    b = ok(odd)\n    c = ok(even)\n    print(s + max(b, c))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    real_max = 0\n    sum = 0\n    real_sum = 0\n    for i in range(n // 2):\n        sum += a[2 * i + 1] - a[2 * i]\n        real_sum += a[2 * i]\n        sum = max(sum, 0)\n        if sum > real_max:\n            real_max = sum\n    if n % 2:\n        real_sum += a[-1]\n    sum = 0\n    for i in range(1, (n + 1) // 2):\n        sum += a[2 * i - 1] - a[2 * i]\n        sum = max(sum, 0)\n        if sum > real_max:\n            real_max = sum\n    print(real_sum + real_max)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = a[0]\n    curodd = 0\n    cureven = 0\n    maxalt = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            curodd += a[i] - a[i - 1]\n            maxalt = max(maxalt, curodd)\n            if curodd < 0:\n                curodd = 0\n        else:\n            cureven -= a[i] - a[i - 1]\n            maxalt = max(maxalt, cureven)\n            cur += a[i]\n            if cureven < 0:\n                cureven = 0\n    print(cur + maxalt)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = tuple(map(int, input().split()))\n        m = 0\n        c = 0\n        start = None\n        curr_start = None\n        end = None\n        for i in range(0, n, 2):\n            if n - i < 2:\n                break\n            d = a[i] - a[i + 1]\n            if c + d <= 0:\n                if c >= 0:\n                    curr_start = i\n                c += d\n            else:\n                c = 0\n            if c < m:\n                m = c\n                start = curr_start\n                end = i + 1\n        cc = 0\n        curr_start = None\n        for i in range(1, n, 2):\n            if n - i < 2:\n                break\n            d = a[i + 1] - a[i]\n            if cc + d <= 0:\n                if cc >= 0:\n                    curr_start = i\n                cc += d\n            else:\n                cc = 0\n            if cc < m:\n                m = cc\n                start = curr_start\n                end = i + 1\n        result = 0\n        for i in range(n):\n            if start is None or end is None:\n                if i % 2 == 0:\n                    result += a[i]\n                continue\n            if (i < start or i > end) and i % 2 == 1:\n                continue\n            if start <= i <= end and i % 2 == 0:\n                continue\n            result += a[i]\n        print(result)\nmain()", "for _ in range(int(input())):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    (ev, od, sa, tmp) = (a[0:n:2], a[1:n:2], [0], 0)\n    for i in range(len(od)):\n        tmp = max(0, tmp + od[i] - ev[i])\n        sa.append(tmp)\n    if len(od) > len(ev):\n        tmp += od[i + 1]\n        sa.append(tmp)\n    tmp = 0\n    for i in range(len(ev) - 1):\n        tmp = max(0, tmp + od[i] - ev[i + 1])\n        sa.append(tmp)\n    print(sum(ev) + max(sa))", "def solution(arr):\n    even = 0\n    for i in range(0, len(arr), 2):\n        even = even + arr[i]\n    diff = 0\n    curr = 0\n    for i in range(1, len(arr), 2):\n        val = arr[i] - arr[i - 1]\n        curr = curr + val\n        diff = max(diff, curr)\n        curr = max(curr, 0)\n    curr = 0\n    for j in range(1, len(arr), 2):\n        if j + 1 == len(arr):\n            break\n        val = arr[j] - arr[j + 1]\n        curr = curr + val\n        diff = max(diff, curr)\n        curr = max(curr, 0)\n    return even + diff\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(solution(arr))", "def subsolve(a):\n    c = 0\n    m = 0\n    for i in a:\n        c += i\n        if c < 0:\n            c = 0\n        m = max(m, c)\n    return m\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(0, n, 2):\n        s += a[i]\n    u = subsolve([a[i] - a[i - 1] for i in range(1, n, 2)])\n    v = subsolve([a[i - 1] - a[i] for i in range(2, n, 2)])\n    print(max(u, v) + s)\nt = int(input())\nfor _ in range(t):\n    solve()", "for k in range(0, int(input())):\n    a = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    l3 = []\n    A = 0\n    B = 0\n    C = 0\n    D = 0\n    s1 = 0\n    for u in range(0, len(l1), 2):\n        s1 += l1[u]\n    for i in range(0, len(l1) - 1, 2):\n        l2.append(l1[i + 1] - l1[i])\n    for j in range(1, len(l1) - 1, 2):\n        l3.append(l1[j] - l1[j + 1])\n    for l in l2:\n        A += l\n        if A < 0:\n            A = 0\n        if A > B:\n            B = A\n    for g in l3:\n        C += g\n        if C < 0:\n            C = 0\n        if C > D:\n            D = C\n    if B > D:\n        print(s1 + B)\n    else:\n        print(s1 + D)", "for j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    m = 0\n    d = 0\n    p = A[0::2]\n    tot = sum(p)\n    for i in range(1, n, 2):\n        d += A[i] - A[i - 1]\n        if d < 0:\n            d = 0\n        m = max(m, d)\n    d = 0\n    for i in range(2, n, 2):\n        d += A[i - 1] - A[i]\n        if d < 0:\n            d = 0\n        m = max(m, d)\n    print(tot + m)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    m = 0\n    d = 0\n    p = A[0::2]\n    tot = sum(p)\n    for i in range(1, n, 2):\n        d += A[i] - A[i - 1]\n        if d < 0:\n            d = 0\n        m = max(m, d)\n    d = 0\n    for i in range(2, n, 2):\n        d += A[i - 1] - A[i]\n        if d < 0:\n            d = 0\n        m = max(m, d)\n    print(tot + m)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    num = 0\n    parr = 0\n    imparrr = 0\n    n = int(sys.stdin.readline())\n    a = list(map(int, input().split()))\n    suma = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            suma += a[i]\n    for i in range(0, n - 1, 2):\n        num += a[i + 1] - a[i]\n        parr = max(parr, num)\n        if num < 0:\n            num = 0\n    num = 0\n    for i in range(1, n - 1, 2):\n        num += a[i] - a[i + 1]\n        parr = max(parr, num)\n        if num < 0:\n            num = 0\n    print(parr + suma)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    se = 0\n    for i in range(n):\n        if i % 2 == 0:\n            se += l[i]\n    cs = 0\n    ans = se\n    for i in range(1, n, 2):\n        cs += l[i] - l[i - 1]\n        if cs < 0:\n            cs = 0\n        else:\n            ans = max(ans, se + cs)\n    cs = 0\n    for i in range(1, n, 2):\n        if i + 1 < n:\n            cs += l[i] - l[i + 1]\n            if cs < 0:\n                cs = 0\n            else:\n                ans = max(ans, se + cs)\n    print(ans)", "def solve(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    assert n & 1 == 0\n    B = []\n    for i in range(0, n, 2):\n        B.append(-A[i] + A[i + 1])\n    n = len(B)\n    S = [0]\n    for b in B:\n        S.append(S[-1] + b)\n    minn = 0\n    best = 0\n    for i in range(n):\n        minn = min(minn, S[i + 1])\n        best = max(best, S[i + 1] - minn)\n    return best\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    if n & 1:\n        print(sum(A[::2]) + max(solve(A[1:][::-1]), solve(A[:-1])))\n    else:\n        print(sum(A[::2]) + max(solve(A), solve(A[1:-1][::-1])))", "def lis(a, n):\n    i = 0\n    sum = 0\n    max = 0\n    k = -1\n    j = [0, 0]\n    while i < n:\n        sum += a[i]\n        if sum <= 0:\n            k = i\n            sum = 0\n        if sum > max:\n            j[0] = k + 2\n            j[1] = i + 1\n            max = sum\n        i += 1\n    return max\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a[::2])\n    if n & 1:\n        a.append(0)\n        n += 1\n    i = 0\n    b = []\n    while i < n:\n        b.append(a[i + 1] - a[i])\n        i += 2\n    m = lis(b, len(b))\n    i = 2\n    b = []\n    while i < n:\n        b.append(a[i - 1] - a[i])\n        i += 2\n    n = lis(b, len(b))\n    print(s + max(m, n))", "from collections import defaultdict\nQ = int(input())\nfor _ in range(Q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ev = a[0:n:2]\n    od = a[1:n:2]\n    sa = [0]\n    tmp = 0\n    for i in range(len(od)):\n        tmp = max(0, tmp + od[i] - ev[i])\n        sa.append(tmp)\n    if len(od) > len(ev):\n        tmp += od[i + 1]\n        sa.append(tmp)\n    tmp = 0\n    for i in range(len(ev) - 1):\n        tmp = max(0, tmp + od[i] - ev[i + 1])\n        sa.append(tmp)\n    print(sum(ev) + max(sa))", "def getMaxSubSum(arr):\n    maxSum = 0\n    partialSum = 0\n    for item in arr:\n        partialSum += item\n        maxSum = max(maxSum, partialSum)\n        if partialSum < 0:\n            partialSum = 0\n    return maxSum\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dif0 = list()\n    dif1 = list()\n    s = 0\n    for i in range(n // 2):\n        s += a[2 * i]\n        dif0.append(a[2 * i + 1] - a[2 * i])\n    if n % 2 == 1:\n        s += a[-1]\n    for i in range((n - 1) // 2):\n        dif1.append(a[2 * i + 1] - a[2 * i + 2])\n    print(s + max(getMaxSubSum(dif0), getMaxSubSum(dif1)))", "from math import ceil\n\ndef solve():\n    n = int(input())\n    L = list(map(int, input().split()))\n    E = [0] * n\n    O = [0] * n\n    E[0] = L[0]\n    O[0] = 0\n    res = L[0]\n    for i in range(1, n):\n        if i % 2 == 0:\n            E[i] = E[i - 1] + L[i]\n            O[i] = O[i - 1]\n            res += L[i]\n        else:\n            E[i] = E[i - 1]\n            O[i] = O[i - 1] + L[i]\n    md = 0\n    s = 0\n    for i in range(1, n, 2):\n        if s < 0:\n            s = 0\n        cr = L[i] - L[i - 1]\n        s += cr\n        md = max(md, s)\n    md = max(md, s)\n    s = 0\n    for i in range(2, n, 2):\n        if s < 0:\n            s = 0\n        cr = L[i - 1] - L[i]\n        s += cr\n        md = max(md, s)\n    md = max(md, s)\n    print(res + md)\nfor cnt in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ev = a[0:n:2]\n    od = a[1:n:2]\n    sa = [0]\n    tmp = 0\n    for i in range(len(od)):\n        tmp = max(0, tmp + od[i] - ev[i])\n        sa.append(tmp)\n    if len(od) > len(ev):\n        tmp += od[i + 1]\n        sa.append(tmp)\n    tmp = 0\n    for i in range(len(ev) - 1):\n        tmp = max(0, tmp + od[i] - ev[i + 1])\n        sa.append(tmp)\n    print(sum(ev) + max(sa))", "def kadane(arr):\n    globalsum = float('-inf')\n    currentsum = 0\n    for i in arr:\n        currentsum += i\n        currentsum = max(currentsum, i)\n        if currentsum > globalsum:\n            globalsum = currentsum\n    return globalsum\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    evensum = 0\n    for i in range(0, n, 2):\n        evensum += l[i]\n    evenlist = []\n    oddlist = []\n    for i in range(0, n - 1, 2):\n        evenlist.append(l[i + 1] - l[i])\n    for i in range(1, n - 1, 2):\n        oddlist.append(l[i] - l[i + 1])\n    print(max(evensum, evensum + kadane(evenlist), evensum + kadane(oddlist)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            s = s + l[i]\n    (o, e) = (0, 0)\n    r = 0\n    for i in range(1, n, 2):\n        o = o + l[i]\n        e = e + l[i - 1]\n        if o > e:\n            r = max(r, o - e)\n        else:\n            (o, e) = (0, 0)\n    (o, e) = (0, 0)\n    for i in range(2, n, 2):\n        e = e + l[i]\n        o = o + l[i - 1]\n        if o > e:\n            r = max(r, o - e)\n        else:\n            (e, o) = (0, 0)\n    print(s + r)", "z = int(input())\nfor h in range(z):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = []\n    if n == 1:\n        print(l[0])\n    else:\n        x = l[1] - l[0]\n        if n > 2:\n            y = l[1] - l[2]\n            if y < 0:\n                y = 0\n            a.append(y)\n        if x < 0:\n            x = 0\n        a.append(x)\n        i = 3\n        while i < n:\n            if x < 0:\n                x = 0\n            if y < 0:\n                y = 0\n            x += l[i] - l[i - 1]\n            if i < n - 1:\n                y += l[i] - l[i + 1]\n            a.append(x)\n            a.append(y)\n            i += 2\n        b = []\n        i = 0\n        while i < n:\n            b.append(l[i])\n            i += 2\n        print(sum(b) + max(a))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "def kadane(arr):\n    max_end = 0\n    max_far = -float('inf')\n    for i in arr:\n        max_end = max_end + i\n        max_far = max(max_far, max_end)\n        if max_end < 0:\n            max_end = 0\n    return max_far\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pre = []\n    suf = []\n    su = 0\n    for i in range(0, n, 2):\n        su += arr[i]\n        if i + 1 < n:\n            pre.append(arr[i + 1] - arr[i])\n        if i + 2 < n:\n            suf.append(arr[i + 1] - arr[i + 2])\n    print(su + max(kadane(pre), kadane(suf), 0))", "t = int(input())\n\ndef rec(mn, ind, l, b, dp):\n    if ind == 0:\n        return 0\n    else:\n        if dp[ind - 1] == 0:\n            if mn[ind - 1][0] < l and mn[ind - 1][1] < b:\n                dp[ind - 1] = max(rec(mn, ind - 1, l, b, dp), mn[ind - 1][2] + rec(mn, ind - 1, mn[ind - 1][0], mn[ind - 1][1], dp))\n            else:\n                dp[ind - 1] = rec(mn, ind - 1, l, b, dp)\n        return dp[ind - 1]\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sm = 0\n    mx = 0\n    for i in range(0, len(l) - 1, 2):\n        sm += l[i + 1] - l[i]\n        mx = max(sm, mx)\n        if sm < 0:\n            sm = 0\n    sm1 = 0\n    mx1 = 0\n    for i in range(1, len(l) - 1, 2):\n        sm1 += l[i] - l[i + 1]\n        mx1 = max(sm1, mx1)\n        if sm1 < 0:\n            sm1 = 0\n    print(sum(l[::2]) + max(mx, mx1))", "t = int(input())\nfor a in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    k = 0\n    for i in range(0, N, 2):\n        k += A[i]\n    S = 0\n    x = 0\n    for i in range(0, N - 1, 2):\n        S += A[i + 1] - A[i]\n        x = max(S, x)\n        if S < 0:\n            S = 0\n    S = 0\n    for i in range(1, N - 1, 2):\n        S += A[i] - A[i + 1]\n        x = max(x, S)\n        if S < 0:\n            S = 0\n    print(k + x)", "for _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    summ = sum(num[::2])\n    cs = 0\n    mx = 0\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + num[i + 1] - num[i])\n        mx = max(mx, cs)\n    cs = 0\n    for k in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + num[k] - num[k + 1])\n        mx = max(mx, cs)\n    print(summ + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    se = 0\n    for i in range(n):\n        if i % 2 == 0:\n            se += l[i]\n    cs = 0\n    ans = se\n    for i in range(1, n, 2):\n        cs += l[i] - l[i - 1]\n        if cs < 0:\n            cs = 0\n        else:\n            ans = max(ans, se + cs)\n    cs = 0\n    for i in range(1, n, 2):\n        if i + 1 < n:\n            cs += l[i] - l[i + 1]\n            if cs < 0:\n                cs = 0\n            else:\n                ans = max(ans, se + cs)\n    print(ans)", "def maxSubArraySum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\nfor ad in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = []\n    ans = 0\n    for i in range(0, n // 2 * 2, 2):\n        diff.append(a[i + 1] - a[i])\n    diff2 = []\n    for i in range(1, (n - 1) // 2 * 2, 2):\n        diff2.append(a[i] - a[i + 1])\n    for i in range(0, n, 2):\n        ans += a[i]\n    x = maxSubArraySum(diff, len(diff))\n    y = maxSubArraySum(diff2, len(diff2))\n    ans += max(0, x, y)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    maxi = 0\n    curr = 0\n    for i in range(0, n - 1, 2):\n        curr += arr[i + 1] - arr[i]\n        curr = max(0, curr)\n        maxi = max(curr, maxi)\n    curr = 0\n    for i in range(1, n - 1, 2):\n        curr += arr[i] - arr[i + 1]\n        curr = max(0, curr)\n        maxi = max(curr, maxi)\n    total = 0\n    for i in range(0, n, 2):\n        total += arr[i]\n    print(total + maxi)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sout = out = curq = 0\n    for i in range(1, n - 1, 2):\n        curq += a[i] - a[i + 1]\n        if curq < 0:\n            curq = 0\n        out = max(out, curq)\n    curq = 0\n    for i in range(0, n - 1, 2):\n        curq += a[i + 1] - a[i]\n        if curq < 0:\n            curq = 0\n        out = max(out, curq)\n    for i in range(0, n, 2):\n        sout += a[i]\n    print(sout + out)", "def maxSubArraySum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    sev = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sev += l[i]\n    i = 0\n    a = []\n    while i + 1 < len(l):\n        a.append(l[i + 1] - l[i])\n        i += 2\n    i = 1\n    b = []\n    while i + 1 < len(l):\n        b.append(l[i] - l[i + 1])\n        i += 2\n    y = max(maxSubArraySum(a, len(a)), maxSubArraySum(b, len(b)))\n    print(sev + y)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    if n == 1:\n        print(lst[0])\n        continue\n    se = so = mx = mn = 0\n    k = 1\n    while k < n:\n        if se >= 0:\n            se += lst[k] - lst[k - 1]\n        else:\n            se = lst[k] - lst[k - 1]\n        k += 2\n        mx = max(mx, se)\n    k = 2\n    while k < n:\n        if so <= 0:\n            so += lst[k] - lst[k - 1]\n        else:\n            so = lst[k] - lst[k - 1]\n        mn = min(mn, so)\n        k += 2\n    ret = 0\n    k = 0\n    mx = max(abs(mn), mx)\n    while k < n:\n        ret += lst[k]\n        k += 2\n    if mx > 0:\n        print(ret + mx)\n    else:\n        print(ret)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    mi = 0\n    for j in range(0, n, 2):\n        mi = mi + l[j]\n    jj = mi\n    p = 0\n    mi = 0\n    for j in range(0, n - 1, 2):\n        if j + 1 < n:\n            if l[j] <= l[j + 1]:\n                p = p + l[j + 1] - l[j]\n                if p > mi:\n                    mi = p\n            else:\n                p = p - l[j] + l[j + 1]\n                if p < 0:\n                    p = 0\n    p = 0\n    for j in range(1, n, 2):\n        if j + 1 < n:\n            if l[j] > l[j + 1]:\n                p = p - l[j + 1] + l[j]\n                if p > mi:\n                    mi = p\n                j = j + 1\n            else:\n                p = p + l[j] - l[j + 1]\n                if p < 0:\n                    p = 0\n                j = j + 1\n    print(jj + mi)", "def f(al):\n    ar1 = []\n    ar2 = []\n    i = 0\n    while i < len(al) - 1:\n        ar1.append(al[i + 1] - al[i])\n        i = i + 2\n    i = 0\n    while i < len(al) - 2:\n        ar2.append(al[i + 1] - al[i + 2])\n        i = i + 2\n    return (ar1, ar2)\n\ndef subarraymax(nums):\n    if len(nums) == 0:\n        return 0\n    sum = res = nums[0]\n    for i in range(1, len(nums)):\n        sum = max(nums[i], sum + nums[i])\n        res = max(res, sum)\n    return res\nfor tc in range(int(input())):\n    _ = input()\n    al = list(map(int, input().split()))\n    ini = 0\n    for i in range(0, len(al), 2):\n        ini = ini + al[i]\n    (s1, s2) = f(al)\n    delta = max(subarraymax(s1), subarraymax(s2))\n    if delta <= 0:\n        print(ini)\n    else:\n        print(ini + delta)", "def max_sum(A):\n    max_so_far = 0\n    max_ending = 0\n    for i in A:\n        max_ending += i\n        if max_ending < 0:\n            max_ending = 0\n        if max_ending > max_so_far:\n            max_so_far = max_ending\n    return max_so_far\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += arr[i]\n    arr1 = []\n    arr2 = []\n    for i in range(n):\n        if i % 2 == 0:\n            if i - 1 >= 0:\n                arr1.append(arr[i - 1] - arr[i])\n            if i + 1 < n:\n                arr2.append(arr[i + 1] - arr[i])\n    print(ans + max(max_sum(arr1), max_sum(arr2)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    diff1 = []\n    diff2 = []\n    evensum = 0\n    for i in range(1, n, 2):\n        diff1.append(arr[i] - arr[i - 1])\n    for i in range(1, n - 1, 2):\n        diff2.append(arr[i] - arr[i + 1])\n    for i in range(0, n, 2):\n        evensum += arr[i]\n    m1 = 0\n    m2 = 0\n    l = 0\n    r = 0\n    s = 0\n    for i in range(len(diff1)):\n        s += diff1[i]\n        if s < 0:\n            s = 0\n        if m1 < s:\n            m1 = s\n    s = 0\n    for i in range(len(diff2)):\n        s += diff2[i]\n        if s < 0:\n            s = 0\n        if m2 < s:\n            m2 = s\n    print(evensum + max(m1, m2))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += a[i + 1] - a[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += a[i] - a[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += a[i]\n    print(s + mx)", "t = int(input())\nwhile t > 0:\n    (n, a) = (int(input()), list(map(int, input().split())))\n    (mx_n, mx) = (0, 0)\n    for i in range(0, n - 1, 2):\n        mx_n += a[i + 1] - a[i]\n        mx = max(mx_n, mx)\n        mx_n = max(0, mx_n)\n    mx_n = 0\n    for i in range(1, n - 1, 2):\n        mx_n += a[i] - a[i + 1]\n        mx = max(mx_n, mx)\n        mx_n = max(0, mx_n)\n    even = sum((a[i] for i in range(n) if i % 2 == 0))\n    print(even + mx)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += lis[i + 1] - lis[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += lis[i] - lis[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += lis[i]\n    print(s + mx)", "def maxSubArraySum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()][:n]\n    evensum = 0\n    for i in range(0, len(l), 2):\n        evensum += l[i]\n    (x, y) = ([], [])\n    for i in range(1, len(l), 2):\n        x.append(l[i] - l[i - 1])\n        if i + 1 < len(l):\n            y.append(l[i] - l[i + 1])\n    p = maxSubArraySum(x, len(x))\n    q = maxSubArraySum(y, len(y))\n    add = max(p, q)\n    if add > 0:\n        evensum += add\n    print(evensum)", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += t[i + 1] - t[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += t[i] - t[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += t[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = 0\n    cur = 0\n    for i in range(0, n - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += l[i]\n    print(s + mx)", "n = int(input())\nfor _ in range(n):\n    n1 = int(input())\n    l = list(map(int, input().split()))\n    cur = 0\n    mx = 0\n    for i in range(0, n1 - 1, 2):\n        cur += l[i + 1] - l[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n1 - 1, 2):\n        cur += l[i] - l[i + 1]\n        cur = max(0, cur)\n        mx = max(mx, cur)\n    sm = 0\n    for i in range(0, n1, 2):\n        sm += l[i]\n    print(sm + mx)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    Sum = sum(arr[::2])\n    (ms, cs) = (0, 0)\n    for i in range(0, n - n % 2, 2):\n        cs = max(0, cs + arr[i + 1] - arr[i])\n        ms = max(cs, ms)\n    cs = 0\n    for i in range(1, n - int(n % 2 == 0), 2):\n        cs = max(0, cs + arr[i] - arr[i + 1])\n        ms = max(cs, ms)\n    print(ms + Sum)", "n = input()\nfor i in range(int(n)):\n    n_i = input()\n    numbers = list(map(int, input().split(' ')))\n    a = numbers[1::2]\n    b = numbers[:-1:2]\n    before = [i - j for (i, j) in zip(a, b)]\n    a = numbers[1:-1][::2]\n    b = numbers[2:][::2]\n    after = [i - j for (i, j) in zip(a, b)]\n    start = sum(numbers[::2])\n    max_ = 0\n    for diffs in [before, after]:\n        csum = 0\n        msum = 0\n        for i in range(len(diffs)):\n            csum = csum + diffs[i]\n            msum = min(msum, csum)\n            d = csum - msum\n            if d > max_:\n                max_ = d\n    print(start + max_)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cur = 0\n    mx = 0\n    for i in range(0, n - 1, 2):\n        cur += arr[i + 1] - arr[i]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    cur = 0\n    for i in range(1, n - 1, 2):\n        cur += arr[i] - arr[i + 1]\n        cur = max(0, cur)\n        mx = max(cur, mx)\n    s = 0\n    for i in range(0, n, 2):\n        s += arr[i]\n    print(mx + s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    o = 0\n    e = 0\n    c = 0\n    s = 0\n    m = 0\n    for i in range(n):\n        c += 1\n        if i % 2 == 0:\n            e += l[i]\n            s += l[i]\n        else:\n            o += l[i]\n        if c % 2 == 0:\n            if o - e > m:\n                m = o - e\n            if e > o:\n                e = 0\n                o = 0\n                c = 0\n    c = 0\n    e = 0\n    o = 0\n    for i in range(1, n):\n        c += 1\n        if i % 2 == 0:\n            e += l[i]\n        else:\n            o += l[i]\n        if c % 2 == 0:\n            if o - e > m:\n                m = o - e\n            if e > o:\n                e = 0\n                o = 0\n                c = 0\n    print(s + m)"]