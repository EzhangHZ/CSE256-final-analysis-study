["for _ in range(int(input())):\n    (n, k) = input().split()\n    k = int(k)\n    m = len(n)\n    d = {}\n    i = 0\n    for i in range(m):\n        if n[i] not in d:\n            if len(d) == k:\n                break\n            d[n[i]] = 0\n        d[n[i]] += 1\n    else:\n        print(n)\n        continue\n    n = list(n)\n    while True:\n        if n[i] == '9' or (len(d) == k and max(d) <= n[i]):\n            i -= 1\n            d[n[i]] -= 1\n            if d[n[i]] == 0:\n                del d[n[i]]\n        else:\n            if len(d) < k:\n                n[i] = str(int(n[i]) + 1)\n                if n[i] not in d:\n                    d[n[i]] = 0\n                d[n[i]] += 1\n                p = '0' if len(d) < k else min(d)\n                for i in range(i + 1, m):\n                    n[i] = p\n            else:\n                n[i] = min((j for j in d if j > n[i]))\n                for i in range(i + 1, m):\n                    n[i] = min(d)\n            break\n    print(''.join(n))", "def int_(l):\n    return int(''.join((str(kk) for kk in l)))\n\ndef f(n, k):\n    if k == 1:\n        fdig = n[0]\n        ff = int_([fdig] * len(n))\n        nn = int_(n)\n        if ff >= nn:\n            return ff\n        else:\n            return int_([fdig + 1] * len(n))\n    digs = set()\n    ii = -1\n    for i in range(len(n)):\n        if len(digs) == k and n[i] not in digs:\n            ii = i\n            break\n        digs.add(n[i])\n    if ii == -1:\n        return int_(n)\n    dg = n[ii]\n    for ddd in range(dg + 1, 10):\n        if ddd in digs:\n            ans = n[:ii] + [ddd] + [min(digs)] * (len(n) - ii - 1)\n            return int_(ans)\n    nw = n[:ii - 1] + [n[ii - 1] + 1] + [0] * (len(n) - ii)\n    return f(nw, k)\nfor _ in range(int(input())):\n    (n_, b) = input().split()\n    k = int(b)\n    n = [int(ii) for ii in n_]\n    print(f(n, k))", "import itertools\nimport bisect\na1 = []\nm = 1\nfor j in itertools.combinations(range(10), m):\n    for n in range(1, 10):\n        for i in itertools.product(*[j] * n):\n            if i[0] != 0 and len(set(i)) == m:\n                a1.append(int(''.join(map(str, i))))\na1.sort()\na2 = a1.copy()\nm = 2\nfor j in itertools.combinations(range(10), m):\n    for n in range(1, 10):\n        for i in itertools.product(*[j] * n):\n            if i[0] != 0 and len(set(i)) == m:\n                a2.append(int(''.join(map(str, i))))\na2.sort()\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n == 10 ** 9:\n        if k == 2:\n            print(n)\n            continue\n        else:\n            print('1111111111')\n            continue\n    if k == 1:\n        w = bisect.bisect_right(a1, n)\n        if w > 0 and a1[w - 1] == n:\n            print(n)\n        else:\n            print(a1[w])\n    else:\n        w = bisect.bisect_right(a2, n)\n        if w > 0 and a2[w - 1] == n:\n            print(n)\n        else:\n            print(a2[w])", "import sys\nt = int(input())\nfor i in range(t):\n    (n, k) = sys.stdin.readline().split()\n    n = n.lstrip('000000000')\n    k = int(k)\n    L = [n[0]]\n    for s in n:\n        if s not in L:\n            L.append(s)\n    if len(L) <= k:\n        print(n)\n    elif k == 1:\n        if L[1] < L[0]:\n            print(L[0] * len(n))\n        else:\n            print(str(int(L[0]) + 1) * len(n))\n    else:\n        (x, y) = (int(L[0]), int(L[1]))\n        Num = list(map(int, n))\n        ind = Num.index(y)\n        bada = False\n        i = 0\n        while i < len(n):\n            if bada:\n                Num[i] = min(x, y)\n            elif Num[i] > max(x, y):\n                bada = True\n                while Num[i] + 1 > max(x, y) and i > ind:\n                    i -= 1\n                Num[i] += 1\n                if i == ind:\n                    y += 1\n                    if x == y:\n                        y = 0\n            i += 1\n        bada = False\n        for i in range(len(Num)):\n            if bada == True:\n                Num[i] = min(x, y)\n            else:\n                if Num[i] != x and Num[i] != y:\n                    bada = True\n                if Num[i] > min(x, y):\n                    Num[i] = max(x, y)\n                else:\n                    Num[i] = min(x, y)\n        print(int(''.join(list(map(str, Num)))))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    sn = [int(i) for i in str(n)]\n    s = set()\n    ans = []\n    for i in sn:\n        if i in s:\n            ans.append(i)\n        elif len(s) < k:\n            s.add(i)\n            ans.append(i)\n        else:\n            flag = 0\n            for j in range(1, 10):\n                if i + j in s:\n                    ans.append(i + j)\n                    flag = 1\n                    break\n            if flag:\n                ans.extend([min(ans)] * (len(sn) - len(ans)))\n            else:\n                while len(ans):\n                    if ans.count(ans[-1]) == 1:\n                        s.remove(ans[-1])\n                        s.add(ans[-1] + 1)\n                        ans.append(ans.pop() + 1)\n                        break\n                    else:\n                        flag1 = 0\n                        for j in range(1, 10):\n                            if ans[-1] + j in s:\n                                flag1 = ans[-1] + j\n                                break\n                        if flag1:\n                            ans.pop()\n                            ans.append(flag1)\n                            break\n                        else:\n                            ans.pop()\n                if len(s) == k:\n                    ans.extend([min(ans)] * (len(sn) - len(ans)))\n                else:\n                    ans.extend([0] * (len(sn) - len(ans)))\n            break\n    for i in ans:\n        print(i, end='')\n    print()", "t = int(input())\nwhile t:\n    (num, k) = [int(tok) for tok in input().split()]\n    ans = 111111111111111\n    num = str(num)\n    n = len(num)\n    s = set()\n    for ch in num:\n        s.add(ch)\n    if len(s) <= k:\n        print(int(num))\n    else:\n        for ind in range(0, n):\n            if num[ind] == '9':\n                continue\n            done = set()\n            for i in range(0, ind):\n                done.add(num[i])\n            if len(done) > k:\n                continue\n            elif len(done) == k:\n                to_fill = None\n                mi = '9'\n                for el in done:\n                    mi = min(mi, el)\n                    if el > num[ind]:\n                        if to_fill is None:\n                            to_fill = el\n                        else:\n                            to_fill = min(to_fill, el)\n                if to_fill is not None:\n                    ans = min(ans, int(num[:ind] + to_fill + mi * (n - ind - 1)))\n            else:\n                mi = '9'\n                for i in range(0, 9):\n                    if str(i) > num[ind]:\n                        mi = str(i)\n                        break\n                done.add(mi)\n                if len(done) == k:\n                    ans = min(ans, int(num[:ind] + mi + min(done) * (n - ind - 1)))\n                else:\n                    ans = min(ans, int(num[:ind] + mi + '0' * (n - ind - 1)))\n        print(ans)\n    t -= 1", "from itertools import product\nfrom bisect import bisect_left\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\na = sorted(list(set([sum([10 ** ind * x[-ind - 1] for ind in range(l)]) for l in range(2, 11) for i in range(10) for j in range(i + 1, 10) for x in product([i, j], repeat=l)])))\nb = sorted([int(str(i) * l) for l in range(1, 11) for i in range(1, 10)])\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lprint(a[bisect_left(a, n)] if k == 2 else b[bisect_left(b, n)])\nprint(*output, sep='\\n')", "from itertools import product\nfrom bisect import bisect_left\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\na = sorted(list(set([sum([10 ** ind * x[-ind - 1] for ind in range(l)]) for l in range(2, 11) for i in range(10) for j in range(i + 1, 10) for x in product([i, j], repeat=l)])))\nb = sorted([int(str(i) * l) for l in range(1, 11) for i in range(1, 10)])\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lprint(a[bisect_left(a, n)] if k == 2 else b[bisect_left(b, n)])\nprint(*output, sep='\\n')", "def f(n, k):\n    dig_set = set()\n    pre = ''\n    for x in n:\n        dig_set.add(x)\n        if len(dig_set) > int(k):\n            post_head = x\n            dig_set.remove(x)\n            break\n        pre += x\n        post_head = ''\n    post = n[len(pre):]\n    if post_head:\n        min_dig = min(dig_set)\n        poss_digs = {i for i in dig_set if i > x}\n        if poss_digs:\n            min_poss_dig = min(poss_digs)\n            ans = pre + min_poss_dig + min_dig * (len(post) - 1)\n        else:\n            pre = str(int(pre) + 1)\n            if len(set(pre)) == int(k):\n                ans = pre + min(set(pre)) * len(post)\n            elif len(set(pre)) < int(k):\n                ans = pre + '0' * len(post)\n            else:\n                ans = f(pre + '0' * len(post), k)\n    else:\n        ans = pre\n    return ans\nfor i in range(int(input())):\n    (n, k) = input().split()\n    print(f(n, k))", "import bisect\n(l, c) = ([], '0123456789')\nfor i in c:\n    for j in c:\n        z = [i, j]\n        for k in z:\n            z += [k + i, k + j]\n            if len(k) > 10:\n                break\n        l += z\n(l, x, y) = ({*l}, [], [])\nfor i in l:\n    if len({*i}) == 1:\n        x += [i]\n    else:\n        y += [i]\n(x, y) = (sorted(map(int, x)), sorted(map(int, y)))\nfor _ in [*open(0)][1:]:\n    (n, k) = map(int, _.split())\n    print(n if len({*str(n)}) <= k else x[bisect.bisect(x, n)] if k == 1 else y[bisect.bisect(y, n)])", "from itertools import product\nfrom bisect import bisect_left\nlinput = lambda : [*map(int, input().split())]\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\ndef main():\n    (n, k) = linput()\n    if k == 2:\n        lprint(a[bisect_left(a, n)])\n    else:\n        lprint(b[bisect_left(b, n)])\na = set([sum([10 ** ind * x[-ind - 1] for ind in range(l)]) for l in range(2, 11) for i in range(10) for j in range(i + 1, 10) for x in product([i, j], repeat=l)])\nb = sorted([int(str(i) * l) for l in range(1, 11) for i in range(1, 10)])\na = sorted(list(a))\nfor _ in ' ' * int(input()):\n    main()\nprint(*output, sep='\\n')", "import bisect\n(l, c) = ([], '0123456789')\nfor i in c:\n    for j in c:\n        z = [i, j]\n        for k in z:\n            z += [k + i, k + j]\n            if len(k) > 10:\n                break\n        l += z\n(l, x, y) = ({*l}, [], [])\nfor i in l:\n    if len({*i}) == 1:\n        x += [i]\n    else:\n        y += [i]\n(x, y) = (sorted(map(int, x)), sorted(map(int, y)))\nfor _ in [*open(0)][1:]:\n    (n, k) = map(int, _.split())\n    print(n if len({*str(n)}) <= k else x[bisect.bisect(x, n)] if k == 1 else y[bisect.bisect(y, n)])", "from itertools import product\nfrom bisect import bisect_left\nfrom sys import stdin\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\ndef main():\n    (n, k) = linput()\n    if k == 2:\n        lprint(a[bisect_left(a, n)])\n    else:\n        lprint(b[bisect_left(b, n)])\na = []\nfor l in range(2, 11):\n    for i in range(10):\n        for j in range(i + 1, 10):\n            for x in product([i, j], repeat=l):\n                v = 0\n                for ind in range(l):\n                    v += 10 ** ind * x[-ind - 1]\n                a.append(v)\nb = []\nfor l in range(1, 11):\n    for i in range(1, 10):\n        b.append(int(str(i) * l))\na.sort()\nb.sort()\nfor _ in ' ' * int(input()):\n    main()\nprint(*output, sep='\\n')", "import bisect\n(l, c) = ([], '0123456789')\nfor i in c:\n    for j in c:\n        z = [i, j]\n        for k in z:\n            z += [k + i, k + j]\n            if len(k) > 10:\n                break\n        l += z\nl = list(set(l))\n(x, y) = ([], [])\nfor i in l:\n    if len(set(i)) == 1:\n        x += [i]\n    else:\n        y += [i]\n(x, y) = (sorted(map(int, x)), sorted(map(int, y)))\nfor _ in [*open(0)][1:]:\n    (n, k) = map(int, _.split())\n    q = set(str(n))\n    if len(q) > k:\n        if k == 1:\n            print(x[bisect.bisect(x, n)])\n        else:\n            print(y[bisect.bisect(y, n)])\n    else:\n        print(n)", "def getBeautiful(num, k):\n    if len(set(str(num))) <= k:\n        return num\n    unstableIdx = k\n    st = str(num)\n    set_ = set(st[:unstableIdx + 1])\n    while len(set_) <= k:\n        set_.add(st[unstableIdx + 1])\n        unstableIdx += 1\n    digits = set(map(int, set(st[:unstableIdx])))\n    n = int(st[unstableIdx])\n    while n not in digits:\n        n += 1\n        if n == 10:\n            break\n    if n in digits:\n        return int(st[:unstableIdx] + str(n) + str(min(digits)) * (len(st) - unstableIdx - 1))\n    else:\n        return getBeautiful((int(st[:unstableIdx]) + 1) * 10 ** (len(st) - unstableIdx), k)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(getBeautiful(n, k))", "def getBeautiful(num, k):\n    if len(set(str(num))) <= k:\n        return num\n    unstableIdx = k\n    st = str(num)\n    set_ = set(st[:unstableIdx + 1])\n    while len(set_) <= k:\n        set_.add(st[unstableIdx + 1])\n        unstableIdx += 1\n    digits = set(map(int, set(st[:unstableIdx])))\n    n = int(st[unstableIdx])\n    while n not in digits:\n        n += 1\n        if n == 10:\n            break\n    if n in digits:\n        return int(st[:unstableIdx] + str(n) + str(min(digits)) * (len(st) - unstableIdx - 1))\n    else:\n        return getBeautiful((int(st[:unstableIdx]) + 1) * 10 ** (len(st) - unstableIdx), k)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(getBeautiful(n, k))", "from itertools import product\nfrom bisect import bisect_left\nfrom sys import stdin\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\ndef main():\n    (n, k) = linput()\n    if k == 2:\n        lprint(a[bisect_left(a, n)])\n    else:\n        lprint(b[bisect_left(b, n)])\na = set()\nfor l in range(2, 11):\n    for i in range(10):\n        for j in range(i + 1, 10):\n            for x in product([i, j], repeat=l):\n                v = 0\n                for ind in range(l):\n                    v += 10 ** ind * x[-ind - 1]\n                a.add(v)\nb = []\nfor l in range(1, 11):\n    for i in range(1, 10):\n        b.append(int(str(i) * l))\na = list(a)\na.sort()\nb.sort()\nfor _ in ' ' * int(input()):\n    main()\nprint(*output, sep='\\n')", "import bisect\nl = []\nc = '0123456789'\nfor i in c:\n    for j in c:\n        z = [i, j]\n        for k in z:\n            z += [k + i, k + j]\n            if len(k) > 10:\n                break\n        l += z\nl = list(set(l))\n(x, y) = ([], [])\nfor i in l:\n    if len(set(i)) == 1:\n        x += [i]\n    else:\n        y += [i]\nx = sorted(map(int, x))\ny = sorted(map(int, y))\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = set(str(n))\n    if len(q) > k:\n        if k == 1:\n            print(x[bisect.bisect(x, n)])\n        else:\n            print(y[bisect.bisect(y, n)])\n    else:\n        print(n)", "for s in [*open(0)][1:]:\n    (prefix, k) = map(int, s.split())\n    n = str(prefix)\n    while len(set(str(prefix))) > k:\n        prefix = prefix // 10 if not prefix % 10 else prefix + 1\n    prefix = str(prefix)\n    suffix = str(min(prefix) * (len(n) - len(prefix)))\n    print(prefix + suffix)", "def find_nearest(s, k):\n    ln = len(s)\n    if max(s[:ln - 1]) > s[ln - 1]:\n        x = list(set(s[:ln - 1]))\n        x.sort()\n        for it in x:\n            if it > s[-1]:\n                s = s[:ln - 1] + it\n                return s\n    else:\n        for i in range(ln - 1, -1, -1):\n            x = s[:i]\n            while x[-1] < '9':\n                x = str(int(x) + 1)\n                if len(set(x)) <= k:\n                    if len(set(x)) == k:\n                        x = x + (ln - len(x)) * min(set(x))\n                        return x\n                    else:\n                        x = x + (ln - len(x)) * '0'\n                        return x\n\ndef solve(s, k):\n    if len(set(str(s))) <= k:\n        return s\n    s = str(s)\n    for i in range(len(s)):\n        if len(set(s[:i + 1])) > k:\n            break\n    i += 1\n    x = s[:i]\n    x = find_nearest(x, k)\n    ans = x + (len(s) - i) * min(set(x))\n    return ans\nn = int(input())\nfor _ in range(n):\n    (s, k) = [int(i) for i in input().split()]\n    print(solve(s, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = n\n    while len(set(str(n))) > k:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n += 1\n    end = str(min(str(n))) * (len(str(l)) - len(str(n)))\n    print(int(str(n) + end))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = n\n    while len(set(str(n))) > k:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n += 1\n    end = str(min(str(n))) * (len(str(l)) - len(str(n)))\n    print(int(str(n) + end))", "from math import floor, log\n\ndef upper_bound(s, n):\n    mn = ':'\n    for x in s:\n        if x > n and x < mn:\n            mn = x\n    return max(s) if mn == ':' else mn\nfor input_number in range(int(input())):\n    (n, k) = map(int, input().split())\n    while True:\n        s = str(n)\n        d = set(s[0])\n        for i in range(1, len(s)):\n            if s[i] not in d:\n                if len(d) == k:\n                    if s[i] >= upper_bound(d, s[i]):\n                        n += (10 - int(s[i])) * 10 ** (len(s) - i - 1)\n                    else:\n                        n += (int(upper_bound(d, s[i])) - int(s[i])) * 10 ** (len(s) - i - 1)\n                    n -= int('0' if s[i + 1:] == '' else s[i + 1:])\n                    break\n                else:\n                    d.add(s[i])\n        else:\n            break\n    print(n)", "from itertools import product\nfrom bisect import bisect_left\nfrom sys import stdin\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\ndef main():\n    (n, k) = linput()\n    if k == 2:\n        lprint(a[bisect_left(a, n)])\n    else:\n        lprint(b[bisect_left(b, n)])\na = set()\nfor l in range(2, 11):\n    for i in range(10):\n        for j in range(i + 1, 10):\n            for x in product([i, j], repeat=l):\n                a.add(sum([10 ** ind * x[-ind - 1] for ind in range(l)]))\nb = sorted([int(str(i) * l) for l in range(1, 11) for i in range(1, 10)])\na = sorted(list(a))\nfor _ in ' ' * int(input()):\n    main()\nprint(*output, sep='\\n')", "for nt in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = n\n    while len(set(str(n))) > k:\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n += 1\n    end = str(min(str(n))) * (len(str(m)) - len(str(n)))\n    print(int(str(n) + end))"]