["ans = []\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        (li, ri) = [int(x) - 1 for x in input().split()]\n        g1 = s.index(s[li]) != li\n        g2 = s.rindex(s[ri]) != ri\n        if g1 or g2:\n            ans += ['YES']\n        else:\n            ans += ['NO']\nprint('\\n'.join(ans))", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = str(input())\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        p = s[l - 1:r]\n        if s[l - 1] in s[:l - 1] or s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "ans = []\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        (li, ri) = map(int, input().split())\n        g1 = s.index(s[li - 1]) != li - 1\n        g2 = s.rindex(s[ri - 1]) != ri - 1\n        if g1 or g2:\n            ans += ['YES']\n        else:\n            ans += ['NO']\nprint('\\n'.join(ans))", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    pr = [s.find('1'), s.rfind('1'), s.find('0'), s.rfind('0')]\n    for __ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        k = 0\n        if s[l] == '1':\n            if pr[0] != -1 and pr[0] < l:\n                k = 1\n        elif s[l] == '0':\n            if pr[2] != -1 and pr[2] < l:\n                k = 1\n        if s[r] == '1':\n            if pr[1] != -1 and pr[1] > r:\n                k = 1\n        elif s[r] == '0':\n            if pr[3] != -1 and pr[3] > r:\n                k = 1\n        if k == 1:\n            ans.append('YES')\n        else:\n            ans.append('NO')\nfor i in ans:\n    print(i)", "t = int(input())\na = []\nfor _ in range(t):\n    (n, q) = [int(x) for x in input().split()]\n    s = input()\n    for _ in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        if l > 1 and s[l - 1] in s[:l - 1] or (r < n and s[r - 1] in s[r:]):\n            a.append('YES')\n        else:\n            a.append('NO')\nprint('\\n'.join(a))", "def word():\n    return input()\n\ndef words():\n    return [word for word in input().split()]\n\ndef number():\n    return int(input())\n\ndef numbers():\n    return [int(item) for item in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef f(a, i, j):\n    return 'YES' if a[i] in a[0:i] or a[j] in a[j + 1:] else 'NO'\nfor t in range(number()):\n    (n, q) = numbers()\n    a = word()\n    arr = [numbers() for i in range(q)]\n    for (i, j) in arr:\n        print(f(a, i - 1, j - 1))", "for t in range(int(input())):\n    (n, q) = [int(item) for item in input().split()]\n    a = input()\n    for (i, j) in [[int(item) for item in input().split()] for i in range(q)]:\n        print('YES' if a[i - 1] in a[0:i - 1] or a[j - 1] in a[j:] else 'NO')", "import sys\ninput = sys.stdin.readline\nfor test in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    s = input()\n    for _ in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        sub = s[l - 1:r]\n        x = sub[0] in s[:l - 1]\n        y = sub[-1] in s[r:]\n        ans = ''\n        if x and y:\n            ans = 'YES'\n        elif x and (not y):\n            if sub[0] in s[:l - 1]:\n                ans = 'YES'\n            else:\n                ans = 'NO'\n        elif not x and y:\n            if sub[-1] in s[r:]:\n                ans = 'YES'\n            else:\n                ans = 'NO'\n        else:\n            ans = 'NO'\n        print(ans)", "import sys\n\ndef get_single_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nfor i in range(get_single_int()):\n    (n, q) = get_ints()\n    s = get_string()\n    for j in range(q):\n        (l, r) = get_ints()\n        l = l - 1\n        ss = s[l:r]\n        if l == 0:\n            if ss[r - l - 1] in s[r:]:\n                print('YES')\n            else:\n                print('NO')\n        elif r - 1 == n - 1:\n            if ss[0] in s[:l]:\n                print('YES')\n            else:\n                print('NO')\n        elif ss[0] in s[:l] or ss[r - l - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(s, x, y):\n    if s[x - 1] in s[:x - 1] or s[y - 1] in s[y:]:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (n, q) = get_int()\n    s = str(input()[:-1])\n    for i in range(q):\n        (x, y) = get_int()\n        solve(s, x, y)", "from sys import *\nfrom queue import *\nfrom collections import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    (n, q) = get_int()\n    s = str(input())\n    l1 = len(s)\n    for _ in range(q):\n        (l, r) = get_int()\n        (l, r) = (l - 1, r - 1)\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "res = ''\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    for __ in range(q):\n        (l, r) = map(int, input().split())\n        first_char = s[l - 1]\n        last_char = s[r - 1]\n        success = False\n        for i in range(l - 1):\n            if s[i] == first_char:\n                success = True\n                break\n        if not success:\n            for i in range(r, n):\n                if s[i] == last_char:\n                    success = True\n                    break\n        if success:\n            res += 'YES\\n'\n        else:\n            res += 'NO\\n'\nprint(res)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    qli = []\n    for i in range(q):\n        w = list(map(int, input().split()))\n        qli.append(w)\n    fir0 = -1\n    fir1 = -1\n    las0 = -1\n    las1 = -0\n    for i in range(n):\n        if s[i] == '0':\n            fir0 = i + 1\n            break\n    for i in range(n):\n        if s[i] == '1':\n            fir1 = i + 1\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            las0 = i + 1\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            las1 = i + 1\n            break\n    for i in range(q):\n        flag = 0\n        f = qli[i][0]\n        l = qli[i][1]\n        if s[f - 1] == '0' and s[l - 1] == '1':\n            if f == fir0 and l == las1:\n                flag = 1\n        elif s[f - 1] == '1' and s[l - 1] == '0':\n            if f == fir1 and l == las0:\n                flag = 1\n        elif s[f - 1] == '1' and s[l - 1] == '1':\n            if f == fir1 and l == las1:\n                flag = 1\n        elif f == fir0 and l == las0:\n            flag = 1\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')", "import sys\nimport math\n\ndef scan(input_type='int'):\n    if input_type == 'int':\n        return list(map(int, sys.stdin.readline().strip().split()))\n    else:\n        return list(map(str, sys.stdin.readline().strip()))\n\ndef solution():\n    for _ in range(int(input())):\n        (n, q) = scan()\n        s = scan('str')\n        for __ in range(q):\n            (l, r) = scan()\n            a = n - 1\n            b = 0\n            d = s[l - 1:r]\n            for i in range(n):\n                if s[i] == d[0]:\n                    a = i\n                    break\n            for i in range(n - 1, -1, -1):\n                if s[i] == d[-1]:\n                    b = i\n                    break\n            if a < l - 1 or b > r - 1:\n                print('YES')\n            else:\n                print('NO')\nsolution()", "import itertools\nimport math\nimport sys\nimport os\nfrom collections import defaultdict\n\ndef is_debug():\n    return 'PYPY3_HOME' not in os.environ\n\ndef stdin_wrapper():\n    data = '2\\n6 3\\n001000\\n2 4\\n1 3\\n3 5\\n4 2\\n1111\\n1 4\\n2 3\\n'\n    for line in data.split('\\n'):\n        yield line\nif not is_debug():\n\n    def stdin_wrapper():\n        while True:\n            yield sys.stdin.readline()\ninputs = stdin_wrapper()\n\ndef input_wrapper():\n    return next(inputs)\n\ndef get_str():\n    if is_debug():\n        return input_wrapper()\n    return input()\n\ndef get(_type):\n    if _type == str:\n        return get_str()\n    return _type(input_wrapper())\n\ndef get_arr(_type):\n    return [_type(x) for x in input_wrapper().split()]\n\ndef tuplerize(method):\n\n    def wrap(*args, **kwargs):\n        res = method(*args, **kwargs)\n        if not isinstance(res, (tuple, list)):\n            res = (res,)\n        return res\n    return wrap\n\n@tuplerize\ndef solve(n, s, l, r):\n    l -= 1\n    sub = s[l:r]\n    left_side = s[:l]\n    right_side = s[r:]\n    if not left_side and (not right_side):\n        return 'NO'\n    if sub[0] in left_side or sub[-1] in right_side:\n        return 'YES'\n    return 'NO'\nt = get(int)\nfor _ in range(t):\n    (n, q) = get_arr(int)\n    s = get_str()\n    for _ in range(q):\n        (l, r) = get_arr(int)\n        print(*solve(n, s, l, r))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for __ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        print('YES' if s[l] in s[:l] or s[r - 1] in s[r:] else 'NO')", "for _ in range(0, int(input())):\n    (n, q) = map(int, input().split())\n    v = input()\n    f0 = v.find('0')\n    f1 = v.find('1')\n    l0 = n - v[::-1].find('0') - 1\n    l1 = n - v[::-1].find('1') - 1\n    for _ in range(0, q):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        print(['YES', 'NO'][(f0 == a or f1 == a) and (l0 == b or l1 == b)])", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    for z in range(q):\n        (l, r) = map(int, input().split())\n        if l - r >= n - 1:\n            print('NO')\n        elif l >= 1:\n            x = s[l - 1]\n            if x in s[:l - 1]:\n                print('YES')\n            else:\n                y = s[r - 1]\n                if y in s[r:]:\n                    print('YES')\n                else:\n                    print('NO')\n        else:\n            y = s[r - 1]\n            if y in s[r:]:\n                print('YES')\n            else:\n                print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for x in range(q):\n        ans = 'NO'\n        (l, r) = map(int, input().split())\n        (start, end) = (s[l - 1], s[r - 1])\n        if start in s[:l - 1]:\n            ans = 'YES'\n        elif end in s[r:]:\n            ans = 'YES'\n        print(ans)", "for t in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    s = input()\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        sprime = s[l - 1:r]\n        if sprime[0] in s[:l - 1] or sprime[-1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i + 1] = a[i] + (s[i] == '1')\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        yes = False\n        if l > 1:\n            if s[l - 1] == '0':\n                if a[l - 1] < l - 1:\n                    yes = True\n            elif a[l - 1] > 0:\n                yes = True\n        if not yes:\n            if r < n:\n                if s[r - 1] == '0':\n                    if a[n] - a[r] < n - r:\n                        yes = True\n                elif a[n] - a[r] > 0:\n                    yes = True\n        print('YES' if yes else 'NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for x in range(q):\n        (l, r) = map(int, input().split())\n        p = s[l - 1:r]\n        if p[-1] in s[r:] or p[0] in s[:l - 1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 'a' + input() + 'a'\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        if s[r] in s[r + 1:] or s[l] in s[:l]:\n            print('YES')\n        else:\n            print('NO')", "N = int(input())\nfor i in range(N):\n    (a, n) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        flag = False\n        (l, r) = map(int, input().split())\n        parte1 = s[0:l - 1]\n        parte2 = s[r:]\n        tmp = s[l - 1:r]\n        if parte1.find(tmp[0]) != -1 or parte2.find(tmp[-1]) != -1:\n            flag = True\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "for j in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    list1 = list(map(int, input().split()))\n    seq = input()\n    for _ in range(list1[1]):\n        (l, r) = map(int, input().split())\n        if seq[l - 1] in seq[:l - 1] or seq[r - 1] in seq[r:]:\n            print('YES')\n        else:\n            print('NO')", "a = int(input())\nfor i in range(a):\n    (n, q) = map(int, input().split())\n    s = input()\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        if s[l - 1] in s[:l - 1] or s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    (n, q) = map(int, readline().split())\n    s = list(readline().strip('\\n'))\n    for i in range(q):\n        (l, r) = map(int, readline().split())\n        l -= 1\n        r -= 1\n        if l > 0:\n            if s[l] in set(s[:l]):\n                print('YES')\n                continue\n        if r < n - 1:\n            if s[r] in set(s[r + 1:]):\n                print('YES')\n                continue\n        print('NO')", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef solve():\n    for _ in range(get_int()):\n        (n, q) = get_ints()\n        s = get_string()\n        while q:\n            (l, r) = get_ints()\n            if s[l - 1] in s[:l - 1] or s[r - 1] in s[r:]:\n                get_print('YES')\n            else:\n                get_print('NO')\n            q -= 1\nsolve()", "import sys\ninput = sys.stdin.readline\n\ndef good(string, left, right):\n    if left > 1 and string[left - 1] in string[0:left - 1]:\n        return True\n    elif right < len(string) and string[right - 1] in string[right:]:\n        return True\n    else:\n        return False\ntests = int(input())\nfor test in range(tests):\n    (stringLength, testcases) = map(int, input().split())\n    string = input()\n    for testcase in range(testcases):\n        (left, right) = map(int, input().split())\n        if good(string, left, right):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        temp = s[l - 1:r]\n        if temp[0] in s[0:l - 1] or temp[-1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, q) = list(map(int, input().split()))\n    s = input()\n    for j in range(q):\n        (l, r) = list(map(int, input().split()))\n        if l - r + 1 == n:\n            print('NO')\n        else:\n            x = s[l - 1:r]\n            i1 = s.find(x[0])\n            i2 = s.rfind(x[-1])\n            if i1 != l - 1 or i2 != r - 1:\n                print('YES')\n            else:\n                print('NO')", "for j in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, q) = R()\n    s = '_' + input()\n    for _ in [0] * q:\n        (l, r) = R()\n        print('NYOE S'[s[l] in s[:l] or s[r] in s[r + 1:]::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, q) = R()\n    s = '_' + input()\n    for _ in [0] * q:\n        (l, r) = R()\n        print('NYOE S'[s[l] in s[:l] or s[r] in s[r + 1:]::2])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = list(input())\n    res = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if l == 1 and r == n:\n            res.append('NO')\n        elif l == 1:\n            if s[r - 1] in s[r:]:\n                res.append('YES')\n            else:\n                res.append('NO')\n        elif r == n:\n            if s[l - 1] in s[0:l - 1]:\n                res.append('YES')\n            else:\n                res.append('NO')\n        elif s[r - 1] in s[r:] or s[l - 1] in s[0:l - 1]:\n            res.append('YES')\n        else:\n            res.append('NO')\n    for j in res:\n        print(j)", "def main():\n    for _ in range(int(input())):\n        (n, q) = list(map(int, input().split()))\n        s = input()\n        qu = [list(map(int, input().split())) for i in range(q)]\n        (f1, l1, f0, l0) = (s.find('1'), s.rfind('1'), s.find('0'), s.rfind('0'))\n        for (l, r) in qu:\n            if s[l - 1] == '0' and f0 < l - 1 or (s[l - 1] == '1' and f1 < l - 1) or (s[r - 1] == '0' and r - 1 < l0) or (s[r - 1] == '1' and r - 1 < l1):\n                print('YES')\n            else:\n                print('NO')\nmain()", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    s = [None] + list(s)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if s[l] in s[1:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "def solve(n, q, s, queries):\n    mn = [-1, -1]\n    mx = [-1, -1]\n    for i in range(n):\n        mx[int(s[i])] = i\n        if mn[int(s[i])] == -1:\n            mn[int(s[i])] = i\n    for (l, r) in queries:\n        if mn[int(s[l])] < l or mx[int(s[r])] > r:\n            print('YES')\n        else:\n            print('NO')\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    s = input()\n    queries = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        queries.append([l, r])\n    solve(n, q, s, queries)\n    t -= 1", "output_list = list()\n\ndef answer(req_string, req_list):\n    length = len(req_string)\n    for indices in req_list:\n        start = int(indices[0]) - 1\n        end = int(indices[1]) - 1\n        if end - start + 1 == length:\n            output_list.append('NO')\n            continue\n        if string[start] in string[:start] or string[end] in string[end + 1:]:\n            output_list.append('YES')\n            continue\n        output_list.append('NO')\nnum_test = int(input())\ni = 0\nwhile i < num_test:\n    (a, b) = input().split()\n    len_string = int(a)\n    num_queries = int(b)\n    j = 0\n    string = input()\n    substring_indices = list()\n    while j < num_queries:\n        substring_indices.append(input().split())\n        j = j + 1\n    answer(string, substring_indices)\n    i = i + 1\nfor item in output_list:\n    print(item)", "t = int(input())\n\ndef solve():\n    (n, q) = map(int, input().split())\n    s = input()\n    Q = []\n    for i in range(q):\n        Q.append(tuple(map(int, input().split())))\n    for i in Q:\n        l = i[0] - 1\n        r = i[1]\n        if s[l] in s[:l] or s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')\nfor i in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = [0] + list(input())\n    d = [list(map(int, input().split())) for _ in range(q)]\n    for i in range(q):\n        flag = False\n        (l, r) = d[i]\n        for j in range(1, l):\n            if s[l] == s[j]:\n                flag = True\n                break\n        for j in range(r + 1, n + 1):\n            if s[r] == s[j]:\n                flag = True\n                break\n        print('YES' if flag else 'NO')", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        finds = s[l:r]\n        flag = 0\n        if s.find(finds[0], 0, l) > -1 and flag == 0:\n            flag = 1\n        if s.find(finds[-1], r) > -1 and flag == 0:\n            flag = 1\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (l, n) = map(int, input().split())\n    a = input()\n    for _ in range(n):\n        (start, end) = map(int, input().split())\n        sub = a[start - 1:end]\n        if a[start - 1] in a[:start - 1] or a[end - 1] in a[end:]:\n            print('YES')\n        else:\n            print('NO')", "def solve(n, s, l, r, one, zro):\n    if r - l + 1 < 2:\n        return 'NO'\n    x = s[l]\n    y = s[r]\n    if x == '0':\n        if zro[0] < l:\n            return 'YES'\n    if x == '1':\n        if one[0] < l:\n            return 'YES'\n    if y == '0':\n        if zro[-1] > r:\n            return 'YES'\n    if y == '1':\n        if one[-1] > r:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split(' '))\n    s = input()\n    one = []\n    zro = []\n    for i in range(n):\n        if s[i] == '0':\n            zro.append(i)\n        else:\n            one.append(i)\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        print(solve(n, s, l - 1, r - 1, one, zro))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sub = s[x - 1:y]\n        found = False\n        j = 0\n        if sub[0] in s[:x - 1]:\n            found = True\n        elif sub[-1] in s[y:]:\n            found = True\n        if found:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if s[l - 1] in s[:l - 1]:\n            print('YES')\n        elif s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if s[l - 1] in s[:l - 1] or s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    ler = [(int(j) for j in input().split()) for i in range(q)]\n    for (l, r) in ler:\n        (l, r) = (l - 1, r - 1)\n        flag = False\n        d = s[l:r + 1]\n        (fc, lc) = (d[0], d[-1])\n        p = 0\n        for i in range(l):\n            if s[i] == fc:\n                flag = True\n        for i in range(r + 1, n):\n            if s[i] == lc:\n                flag = True\n        print('YES' if flag else 'NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        check = False\n        for j in range(l - 1):\n            if s[j] == s[l - 1]:\n                check = True\n                break\n        for j in range(r, n):\n            if s[j] == s[r - 1]:\n                check = True\n                break\n        if check:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    f = 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        x = s[l - 1]\n        y = s[r - 1]\n        if x in s[0:l - 1] or y in s[r:len(s)]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    s = input()\n    for _1 in range(p):\n        (l, r) = map(int, input().split())\n        if s[:l - 1].find(s[l - 1]) != -1 or s[r:].find(s[r - 1]) != -1:\n            print('YES')\n        else:\n            print('NO')", "def match(char, encode):\n    if encode == 3:\n        return True\n    elif char == '1' and encode == 1:\n        return True\n    elif char == '0' and encode == 2:\n        return True\n    else:\n        return False\nfor i in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    s = input()\n    reverse_s = s[::-1]\n    encode_left = [0] * n\n    encode_left[1] = 1 if s[0] == '1' else 2\n    for i in range(2, n):\n        if encode_left[i - 1] == 3:\n            encode_left[i] = 3\n        else:\n            encode_left[i] = 3 if s[i - 1] != s[i - 2] else encode_left[i - 1]\n    encode_right = [0] * n\n    encode_right[1] = 1 if reverse_s[0] == '1' else 2\n    for i in range(2, n):\n        if encode_right[i - 1] == 3:\n            encode_right[i] = 3\n        else:\n            encode_right[i] = 3 if reverse_s[i - 1] != reverse_s[i - 2] else encode_right[i - 1]\n    encode_right = encode_right[::-1]\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        left_char = s[l - 1]\n        right_char = s[r - 1]\n        print('YES') if match(left_char, encode_left[l - 1]) or match(right_char, encode_right[r - 1]) else print('NO')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    for j in range(k):\n        (l, r) = map(int, input().split())\n        s2 = s[l - 1:r]\n        if s2[0] in s[:l - 1] or s2[-1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "def is_good_subsequence(line, ini, fim):\n    i = 0\n    j = len(line) - 1\n    while i != ini or j != fim:\n        if i != ini and line[i] == line[ini]:\n            return True\n        if j != fim and line[j] == line[fim]:\n            return True\n        if i < ini:\n            i += 1\n        if j > fim:\n            j -= 1\n    return False\nt = int(input())\nfor i in range(t):\n    (n, q) = list((int(num) for num in input().split(' ')))\n    line = input()\n    for j in range(q):\n        (ini, fim) = list((int(num) for num in input().split(' ')))\n        if is_good_subsequence(line, ini - 1, fim - 1):\n            print('YES')\n        else:\n            print('NO')", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    (n, q) = read_ints()\n    s = input()\n    for i in range(q):\n        (l, r) = read_ints()\n        if l > 1 and s[l - 1] in s[:l - 1] or (r < n and s[r - 1] in s[r:]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (start, end) = map(int, input().split())\n        f = 0\n        for x in range(start - 1):\n            if s[x] == s[start - 1]:\n                f = 1\n                break\n        if f:\n            print('YES')\n            continue\n        for y in range(end, n):\n            if s[end - 1] == s[y]:\n                f = 1\n                break\n        if f:\n            print('YES')\n            continue\n        else:\n            print('NO')", "def isNewSubseq(l, r, s):\n    n = len(s)\n    i = 0\n    prev = -1\n    isNoGap = True\n    ans = False\n    while i < n:\n        if s[i] == s[l]:\n            if prev != -1 and isNoGap and (i - prev > 1):\n                isNoGap = False\n            prev = i\n            l += 1\n            if not l < r:\n                break\n        i += 1\n    if isNoGap:\n        i += 2\n    while i < n:\n        if s[i] == s[r]:\n            ans = True\n            break\n        i += 1\n    return ans\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split(' '))\n    s = input()\n    ans = -1\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        ans = False\n        l -= 1\n        r -= 1\n        for j in range(l):\n            if s[j] == s[l]:\n                ans = True\n                break\n        if not ans:\n            for j in range(r + 1, n):\n                if s[j] == s[r]:\n                    ans = True\n                    break\n        if ans:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    if len(set(s)) == 1:\n        for __ in range(q):\n            (l, r) = map(int, input().split())\n            if r - l < 1 or r - l + 1 == n:\n                print('NO')\n            else:\n                print('YES')\n    else:\n        a = [[s.index('0'), s.rindex('0')], [s.index('1'), s.rindex('1')]]\n        for __ in range(q):\n            (l, r) = map(int, input().split())\n            l -= 1\n            r -= 1\n            if r - l >= 1 and (a[int(s[l])][0] < l or a[int(s[r])][1] > r):\n                print('YES')\n            else:\n                print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, q) = R()\n    s = '_' + input()\n    for _ in [0] * q:\n        (l, r) = R()\n        print('NYOE S'[s[l] in s[:l] or s[r] in s[r + 1:]::2])", "N = int(input())\nfor i in range(N):\n    (a, n) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        flag = False\n        (l, r) = map(int, input().split())\n        parte1 = s[0:l - 1]\n        parte2 = s[r:]\n        tmp = s[l - 1:r]\n        if parte1.find(tmp[0]) != -1 or parte2.find(tmp[-1]) != -1:\n            flag = True\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, q) = R()\n    s = '_' + input()\n    for _ in [0] * q:\n        (l, r) = R()\n        print('NYOE S'[s[l] in s[:l] or s[r] in s[r + 1:]::2])", "test = int(input())\nfor _ in range(test):\n    (n, q) = map(int, input().split())\n    s = str(input())\n    (l_zero, l_one, r_zero, r_one) = (0, 0, 0, 0)\n    (l_freq, r_freq) = ([[] for _ in range(n)], [[] for _ in range(n)])\n    for i in range(n):\n        if s[i] == '1':\n            l_one += 1\n        else:\n            l_zero += 1\n        if s[n - i - 1] == '1':\n            r_one += 1\n        else:\n            r_zero += 1\n        l_freq[i] = [l_zero, l_one]\n        r_freq[n - i - 1] = [r_zero, r_one]\n    for _ in range(q):\n        (a, b) = map(int, input().split())\n        isTrue = False\n        if s[a - 1] == '0' and l_freq[a - 1][0] > 1:\n            isTrue = True\n        elif s[a - 1] == '1' and l_freq[a - 1][1] > 1:\n            isTrue = True\n        elif s[b - 1] == '0' and r_freq[b - 1][0] > 1:\n            isTrue = True\n        elif s[b - 1] == '1' and r_freq[b - 1][1] > 1:\n            isTrue = True\n        if isTrue:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = input()\n    for k in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        d = 0\n        y = r + 1\n        e = True\n        while d < l and e == True:\n            if a[d] == a[l]:\n                e = False\n            d += 1\n        while y < len(a) and e == True:\n            if a[y] == a[r]:\n                e = False\n            y += 1\n        print('NO' if e == True else 'YES')", "def f():\n    t = int(input())\n    for i in range(t):\n        temp = input()\n        temp = temp.split(' ')\n        n = int(temp[0])\n        q = int(temp[1])\n        s = input()\n        for i in range(q):\n            x = -1\n            y = -1\n            res = input()\n            res = res.split(' ')\n            res = map(int, res)\n            res = list(res)\n            l = res[0] - 1\n            r = res[1] - 1\n            if r - l + 1 < 2 or r - l + 1 == len(s):\n                print('NO')\n            elif l > 0 and r < len(s) - 1:\n                for k in range(l):\n                    if s[k] == s[l]:\n                        x = k\n                        print('YES')\n                        break\n                if x == -1:\n                    for k in range(r + 1, len(s)):\n                        if s[k] == s[r]:\n                            y = k\n                            print('YES')\n                            break\n                if x == -1 and y == -1:\n                    print('NO')\n            elif l == 0:\n                for k in range(r + 1, len(s)):\n                    if s[k] == s[r]:\n                        y = k\n                        print('YES')\n                        break\n                if y == -1:\n                    print('NO')\n            elif r == len(s) - 1:\n                for k in range(l):\n                    if s[k] == s[l]:\n                        x = k\n                        print('YES')\n                        break\n                if x == -1:\n                    print('NO')\nf()", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    for ii in range(k):\n        (a, b) = [int(i) for i in input().split()]\n        aa = min([a, b])\n        b = max([a, b])\n        a = aa - 1\n        ss = s[a:b]\n        f = ss[0]\n        l = ss[-1]\n        nd = 0\n        for i in range(0, a):\n            if s[i] == f:\n                nd = 1\n                break\n        if nd == 0:\n            for i in range(b, n):\n                if s[i] == l:\n                    nd = 1\n                    break\n        if nd:\n            print('YES')\n        else:\n            print('NO')", "tc = int(input())\nz = []\nfor i in range(tc):\n    (n, m) = map(int, input().split())\n    s = str(input())\n    for j in range(m):\n        (l, r) = map(int, input().split())\n        a = False\n        for k in range(l - 1):\n            if s[k] == s[l - 1]:\n                z.append('YES')\n                a = True\n                break\n        if a == False:\n            for k in range(n - r):\n                if s[k + r] == s[r - 1]:\n                    z.append('YES')\n                    a = True\n                    break\n        if a == False:\n            z.append('NO')\nfor i in z:\n    print(i)", "import sys\nimport math, bisect\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    (n, q) = neo()\n    s = input()\n    for i in range(q):\n        (l, r) = Neo()\n        t = s[l - 1:r]\n        if t[0] in s[:l - 1] or t[-1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "import sys\nimport bisect\nfast_reader = sys.stdin.readline\nfast_writer = sys.stdout.write\n\ndef input():\n    return fast_reader().strip()\n\ndef print(*argv):\n    fast_writer(' '.join((str(i) for i in argv)))\n    fast_writer('\\n')\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for Q in range(q):\n        (l, r) = map(int, input().split())\n        fir = s[l - 1]\n        sec = s[r - 1]\n        found = False\n        for i in range(0, l - 1):\n            if s[i] == fir:\n                found = True\n                break\n        if found == False:\n            for i in range(r, n):\n                if s[i] == sec:\n                    found = True\n                    break\n        if found:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor z in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    ok = 0\n    for y in range(q):\n        (l, r) = map(int, input().split())\n        if s[l - 1] in s[:l - 1] or s[r - 1] in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l = l - 1\n        r = r - 1\n        a = s[l:r + 1]\n        b = s[l:r]\n        i = r + 1\n        flag = 0\n        while i < n:\n            if a == b + s[i]:\n                flag = 1\n                break\n            i += 1\n        if flag == 0:\n            i = 0\n            b = s[l + 1:r + 1]\n            while i < l:\n                if a == s[i] + b:\n                    flag = 1\n                    break\n                i += 1\n            if flag == 1:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (l, n) = map(int, input().split())\n    a = input()\n    for _ in range(n):\n        (start, end) = map(int, input().split())\n        sub = a[start - 1:end]\n        if a[start - 1] in a[:start - 1] or a[end - 1] in a[end:]:\n            print('YES')\n        else:\n            print('NO')", "def isSubstringSubsequence(s, n, l, r):\n    first = s[l - 1]\n    second = s[r - 1]\n    if first in s[:l - 1]:\n        return True\n    if second in s[r:]:\n        return True\n    return False\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    s = input()\n    while q:\n        (l, r) = map(int, input().split())\n        if isSubstringSubsequence(s, n, l, r):\n            print('YES')\n        else:\n            print('NO')\n        q -= 1\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        if s[a - 1] in s[0:a - 1] or s[b - 1] in s[b:]:\n            print('YES')\n        else:\n            print('NO')", "import sys\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    ler = [(int(j) for j in input().split()) for i in range(q)]\n    for (l, r) in ler:\n        (l, r) = (l - 1, r - 1)\n        flag = False\n        d = s[l:r + 1]\n        (fc, lc) = (d[0], d[-1])\n        p = 0\n        for i in range(l):\n            if s[i] == fc:\n                flag = True\n        for i in range(r + 1, n):\n            if s[i] == lc:\n                flag = True\n        print('YES' if flag else 'NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for k in range(q):\n        (l, r) = map(int, input().split())\n        s1 = s[l - 1:r]\n        if s[:l - 1].find(s[l - 1]) != -1 or s[r:].find(s[r - 1]) != -1:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\n\ndef process(s, i, j):\n    a = 0\n    b = len(s) - 1\n    while a < i - 1:\n        if s[a] == s[i - 1]:\n            return True\n        a += 1\n    while b > j - 1:\n        if s[b] == s[j - 1]:\n            return True\n        b -= 1\n    return False\nfor i in range(t):\n    (n, q) = input().split(' ')\n    n = int(n)\n    q = int(q)\n    s = input()\n    for query in range(q):\n        (a, b) = input().split(' ')\n        if process(s, int(a), int(b)):\n            print('YES')\n        else:\n            print('NO')", "import random\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = list(map(int, input().split()))\n        s = input()\n        zo = []\n        z = 0\n        o = 0\n        for i in reversed(range(n)):\n            if s[i] == '0':\n                z += 1\n                zo.append((z, o))\n            else:\n                o += 1\n                zo.append((z, o))\n        zo = list(reversed(zo))\n        for _ in range(q):\n            (l, r) = list(map(int, input().split()))\n            flag = 0\n            if s[l - 1] == '0':\n                if zo[0][0] - zo[l - 1][0] > 0:\n                    print('YES')\n                    flag = 1\n            elif zo[0][1] - zo[l - 1][1] > 0:\n                print('YES')\n                flag = 1\n            if flag == 0:\n                if s[r - 1] == '0':\n                    if zo[r - 1][0] - 1 > 0:\n                        print('YES')\n                        flag = 1\n                elif zo[r - 1][1] - 1 > 0:\n                    print('YES')\n                    flag = 1\n            if flag == 0:\n                print('NO')\nmain()", "import random\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = list(map(int, input().split()))\n        s = input()\n        zs = 0\n        os = 0\n        ze = 0\n        oe = 0\n        for i in range(n):\n            if s[i] == '0':\n                zs = i + 1\n                break\n        for i in range(n):\n            if s[i] == '1':\n                os = i + 1\n                break\n        for i in reversed(range(n)):\n            if s[i] == '0':\n                ze = i + 1\n                break\n        for i in reversed(range(n)):\n            if s[i] == '1':\n                oe = i + 1\n                break\n        for _ in range(q):\n            (l, r) = list(map(int, input().split()))\n            if s[l - 1] == '0' and zs < l:\n                print('YES')\n            elif s[l - 1] == '1' and os < l:\n                print('YES')\n            elif s[r - 1] == '1' and oe > r:\n                print('YES')\n            elif s[r - 1] == '0' and ze > r:\n                print('YES')\n            else:\n                print('NO')\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    for tt in range(q):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    for _ in range(k):\n        (l, r) = map(int, input().split())\n        if s[:l - 1].find(s[l - 1]) != -1 or s[r:].find(s[r - 1]) != -1:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = list(input())\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        subs = s[l - 1:r]\n        ch1 = s[l - 1]\n        ch2 = s[r - 1]\n        if ch1 in s[:l - 1] or ch2 in s[r:]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = list(map(int, input().split(' ')))\n    s = input()\n    for __ in range(q):\n        (l, r) = list(map(int, input().split(' ')))\n        res = s[l - 1:r - 1]\n        t1 = s[0:l - 1]\n        t2 = ''\n        if n > r:\n            t2 = s[r:]\n        if s[l - 1] in t1 or s[r - 1] in t2:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = list(map(int, input().split(' ')))\n    s = input()\n    for __ in range(q):\n        (l, r) = list(map(int, input().split(' ')))\n        res = s[l - 1:r - 1]\n        t1 = s[0:l - 1]\n        t2 = ''\n        if n > r:\n            t2 = s[r:]\n        if s[l - 1] in t1 or s[r - 1] in t2:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, q) = list(map(int, input().split()))\n    s = input()\n    for j in range(q):\n        (l, r) = list(map(int, input().split()))\n        if l - r + 1 == n:\n            print('NO')\n        else:\n            x = s[l - 1:r]\n            i1 = s.find(x[0])\n            i2 = s.rfind(x[-1])\n            if i1 != l - 1 or i2 != r - 1:\n                print('YES')\n            else:\n                print('NO')", "n = int(input())\nfor j in range(0, n):\n    (n, q) = map(int, input().split())\n    a = input()\n    for i in range(0, q):\n        (l, r) = map(int, input().split())\n        l = l - 1\n        r = r - 1\n        if r - l >= n - 1:\n            print('NO')\n        else:\n            s = False\n            for k in range(0, l):\n                if a[k] == a[l]:\n                    s = True\n                    break\n            if not s:\n                for v in range(r + 1, n):\n                    if a[v] == a[r]:\n                        s = True\n                        break\n            if s:\n                print('YES')\n            else:\n                print('NO')", "n = int(input())\nfor j in range(0, n):\n    (n, q) = map(int, input().split())\n    a = input()\n    for i in range(0, q):\n        (l, r) = map(int, input().split())\n        l = l - 1\n        r = r - 1\n        if r - l >= n - 1:\n            print('NO')\n        else:\n            s = False\n            for k in range(0, l):\n                if a[k] == a[l]:\n                    s = True\n                    break\n            if not s:\n                for v in range(r + 1, n):\n                    if a[v] == a[r]:\n                        s = True\n                        break\n            if s:\n                print('YES')\n            else:\n                print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r == l:\n            print('NO')\n            continue\n        before = s.find(s[l - 1])\n        if before != -1 and before < l - 1:\n            print('YES')\n            continue\n        elif r == n or s.find(s[r - 1], r) == -1:\n            print('NO')\n        else:\n            print('YES')", "from sys import stdin\nfrom collections import deque\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = ' ' + input().rstrip() + '  '\n    for x in range(q):\n        (l, r) = map(int, input().split())\n        if s[l] in s[:l] or s[r] in s[r + 1:]:\n            print('YES')\n        else:\n            print('NO')", "import sys\nimport math\nimport collections\nimport bisect\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, q) = get_ints()\n    string = list(get_string())\n    for i in range(q):\n        (l, r) = get_ints()\n        sub_string = string[l - 1:r]\n        last = sub_string[-1]\n        search_string = string[r:]\n        poss = 0\n        if last in search_string:\n            poss += 1\n        first = sub_string[0]\n        search_string = string[:l - 1]\n        if first in search_string:\n            poss += 1\n        if poss > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = input().split()\n    (n, q) = (int(n), int(q))\n    s = input()\n    for kk in range(q):\n        (i, j) = input().split()\n        (i, j) = (int(i), int(j))\n        f1 = f2 = 0\n        sub = s[i - 1:j]\n        if sub[-1] in s[j:]:\n            f1 = 1\n        if sub[0] in s[:i - 1]:\n            f2 = 1\n        if f1 == 1 or f2 == 1:\n            print('YES')\n        else:\n            print('NO')"]