["(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(0, 2 ** 9 + 1):\n    ans = i\n    for j in range(len(a)):\n        elm = a[j]\n        for k in range(len(b)):\n            if elm & b[k] | ans == ans:\n                break\n        else:\n            break\n    else:\n        break\nprint(ans)", "from collections import defaultdict\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor k in range(2 ** 9 + 1):\n    ans = k\n    for i in range(n):\n        for j in range(m):\n            if a[i] & b[j] | ans == ans:\n                break\n        else:\n            break\n    else:\n        break\nprint(ans)", "def ss(a, b):\n    n = len(a)\n    m = len(b)\n\n    def check(x):\n        for i in a:\n            t = 0\n            for j in b:\n                if i & j | x == x:\n                    t = 1\n                    break\n            if t == 0:\n                return False\n        return True\n    for i in range(1025):\n        if check(i):\n            return i\n    return -1\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(ss(a, b))", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(512):\n    flag1 = 0\n    for ai in a:\n        flag2 = 0\n        for bi in b:\n            if ai & bi | i == i:\n                flag2 = 1\n                break\n        if flag2 == 0:\n            flag1 = 1\n            break\n    if flag1 == 0:\n        print(i)\n        break", "def check(x):\n    for i in a:\n        for j in b:\n            if i & j | x == x:\n                break\n        else:\n            return 0\n    return 1\nn = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nfor ans in range(0, 2 ** 9):\n    if check(ans):\n        print(ans)\n        break", "from math import log2\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ninf = float('inf')\nl = [i for i in range(pow(2, 9))]\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmina = inf\nfor A in l:\n    found = 1\n    for i in a:\n        found1 = 0\n        for j in b:\n            if i & j | A == A:\n                found1 = 1\n                break\n        found = min(found, found1)\n        if found == 0:\n            break\n    if found:\n        print(A)\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 0\nflag = 0\nwell = 0\ngood = 0\nwhile flag == 0:\n    for i in range(n):\n        well = 0\n        for j in range(m):\n            c = a[i] & b[j]\n            if c | ans == ans:\n                well = 1\n                good += 1\n                break\n        if well == 0:\n            ans += 1\n            good = 0\n            break\n    if good == n:\n        flag = 1\nprint(ans)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nbrr = list(map(int, input().split()))\nans = 0\ntemp = 0\nfor i in range(n):\n    p = float('inf')\n    for j in range(m):\n        p = min(p, arr[i] & brr[j])\n    if p > temp:\n        temp = p\n        ans = i\nres = temp\nfor i in range(n):\n    if i == ans:\n        continue\n    temp = float('inf')\n    for j in range(m):\n        temp = min(temp, arr[i] & brr[j] ^ res)\n    res |= temp\nprint(res)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\n\ndef isValid(x):\n    for i in range(n):\n        flag = False\n        for j in range(m):\n            res = arr[i] & brr[j]\n            if res | x == x:\n                flag = True\n                break\n        if flag == False:\n            return False\n    return True\nfor i in range(1 << 9):\n    if isValid(i):\n        print(i)\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = 0\nfor i in range(513):\n    c = 1\n    for j in a:\n        u = 0\n        for k in b:\n            if i | j & k == i:\n                u = 1\n                break\n        if u == 0:\n            c = 0\n            break\n    if c == 1:\n        print(i)\n        break", "def bitwise(n, a1, m, a2):\n    for i in range(0, 2 ** 9 + 1):\n        for j in range(n):\n            c = True\n            for k in range(m):\n                if a1[j] & a2[k] | i == i:\n                    break\n                elif k == m - 1:\n                    c = False\n            if c == False:\n                break\n        if c:\n            return i\n(n, m) = list(map(int, input().split(' ')))\na1 = list(map(int, input().split(' ')))\na2 = list(map(int, input().split(' ')))\nprint(bitwise(n, a1, m, a2))", "import sys\ninput = sys.stdin.readline\nfor _ in range(1):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for k in range(0, 2 ** 9):\n        ct = 0\n        for i in range(n):\n            fl = 0\n            for j in range(m):\n                if a[i] & b[j] | k == k:\n                    ct += 1\n                    fl = 1\n                    break\n            if fl == 0:\n                break\n        if ct == n:\n            print(k)\n            break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef is_possible(candidate, a, b):\n    for ai in a:\n        found = False\n        for bi in b:\n            ci = ai & bi\n            if ci | candidate == candidate:\n                found = True\n        if not found:\n            return False\n    return True\nanswer = 0\nfor candidate in range(0, 2 ** 10):\n    if is_possible(candidate, a, b):\n        answer = candidate\n        break\nprint(answer)", "def solve():\n    ans = 0\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    for a in range(1 << 9):\n        for i in range(N):\n            for j in range(M):\n                c = A[i] & B[j]\n                if c & a == c:\n                    break\n            else:\n                break\n        else:\n            return a\nprint(solve())", "(n, m) = map(int, input().split())\nalist = list(map(int, input().split()))\nblist = list(map(int, input().split()))\nma = max(alist)\nnum = 0\nwhile 1 << num < ma:\n    num += 1\nf = {}\nfor i in range(0, n):\n    f[i] = blist\nres = 0\nwhile num >= 0:\n    flag = True\n    tmp = 1 << num\n    for i in range(0, n):\n        if alist[i] & tmp == 0:\n            continue\n        if len([j for j in f[i] if j & tmp == 0]) == 0:\n            flag = False\n            break\n    if not flag:\n        res += 1 << num\n    else:\n        for i in range(0, n):\n            if alist[i] & tmp == 0:\n                continue\n            f[i] = [j for j in f[i] if j & tmp == 0]\n    num -= 1\nprint(res)", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncur = (1 << 10) - 1\nbit = []\nfor i in range(9, -1, -1):\n    for el1 in a:\n        isThere = False\n        for el2 in b:\n            el = el1 & el2\n            if el <= cur and el & 1 << i == 0 and (cur | el == cur):\n                isThere = True\n                break\n        if not isThere:\n            break\n    if isThere:\n        cur = cur - (1 << i)\nprint(cur)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = 0\nfor i in range(513):\n    c = 1\n    for j in a:\n        u = 0\n        for k in b:\n            if i | j & k == i:\n                u = 1\n                break\n        if u == 0:\n            c = 0\n            break\n    if c == 1:\n        print(i)\n        break", "def is_valid(mask):\n    for i in range(n):\n        flag = False\n        for j in range(m):\n            ans = a[i] & b[j]\n            if ans | mask == mask:\n                flag = True\n                break\n        if not flag:\n            return False\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(0, 1 << 9):\n    if is_valid(i):\n        print(i)\n        break", "(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nfor i in range(512):\n    m = 0\n    for j in l1:\n        f = 0\n        for k in l2:\n            if j & k | i == i:\n                f = 1\n                break\n        if f == 0:\n            m = 1\n            break\n    if m == 0:\n        print(i)\n        break", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(512):\n    fl1 = True\n    for ai in a:\n        fl = True\n        for bi in b:\n            if ai & bi | i == i:\n                fl = False\n                break\n        if fl:\n            fl1 = False\n            break\n    if fl1:\n        print(i)\n        break", "(n, m) = map(int, input().split())\n(*a,) = map(int, input().split())\n(*b,) = map(int, input().split())\nfor ans in range(2 ** 9):\n    for (i, aa) in enumerate(a):\n        for (j, bb) in enumerate(b):\n            if ans | aa & bb == ans:\n                break\n        else:\n            break\n    else:\n        print(ans)\n        break", "(n, x) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nfor i in range(513):\n    flag1 = 0\n    for j in A:\n        flag2 = 0\n        for k in B:\n            if j & k | i == i:\n                flag2 = 1\n        if flag2 != 1:\n            break\n    else:\n        break\nprint(i)", "input()\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nfor i in range(513):\n    for j in A:\n        f = 0\n        for k in B:\n            if j & k | i == i:\n                f = 1\n        if f != 1:\n            break\n    else:\n        break\nprint(i)", "(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nfor k in range(2 ** 9):\n    solved = False\n    for i in range(n):\n        found = False\n        for j in range(m):\n            if a[i] & b[j] | k == k:\n                found = True\n                break\n        if not found:\n            break\n        elif found and i == n - 1:\n            print(k)\n            solved = True\n            break\n    if solved:\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef solve(a, b, n, m):\n    for d in range(2 ** 9):\n        temp = 2 ** 9 - 1\n        tfound = True\n        for i in range(n):\n            found = False\n            for j in range(m):\n                if a[i] & b[j] | d == d:\n                    found = True\n                    break\n            if not found:\n                tfound = False\n                break\n        if tfound:\n            return d\n    return 2 ** 9 - 1\nprint(solve(a, b, n, m))", "import sys\n(n, m) = map(int, input().split(' '))\narrn = list(map(int, input().split(' ')))\narrm = list(map(int, input().split(' ')))\nfor k in range(512):\n    found = True\n    for i in range(n):\n        flag = False\n        for j in range(m):\n            if arrn[i] & arrm[j] | k == k:\n                flag = True\n                break\n        if not flag:\n            found = False\n            break\n    if found:\n        print(k)\n        break", "from math import *\n(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(513):\n    flag2 = 1\n    for j in range(n):\n        flag1 = 0\n        for k in range(m):\n            if i | a[j] & b[k] == i:\n                flag1 = 1\n                break\n        if flag1 == 1:\n            continue\n        else:\n            flag2 = 0\n            break\n    if flag2 == 1:\n        break\nprint(i)", "data = [*open(0)]\ndt = lambda x: map(int, data[x].split())\na = (*dt(1),)\nb = (*dt(2),)\nfor k in range(512):\n    for ai in a:\n        flag = False\n        for bi in b:\n            if k | ai & bi == k:\n                flag = True\n                break\n        if not flag:\n            break\n    else:\n        break\nprint(k)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor ans in range(2 ** 9):\n    for i in range(n):\n        ok = False\n        for g in range(m):\n            if ans == a[i] & b[g] | ans:\n                ok = True\n                break\n        if not ok:\n            break\n    if ok:\n        print(ans)\n        break", "def solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for x in range(0, 2 ** 9):\n        flag = True\n        for i in range(len(a)):\n            flag2 = False\n            for j in range(len(b)):\n                if a[i] & b[j] | x == x:\n                    flag2 = True\n                    break\n            if not flag2:\n                flag = False\n                break\n        if flag:\n            print(x)\n            return\nsolve()", "def solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for x in range(0, 2 ** 9):\n        flag = True\n        for i in range(len(a)):\n            flag2 = False\n            for j in range(len(b)):\n                if a[i] & b[j] | x == x:\n                    flag2 = True\n                    break\n            if not flag2:\n                flag = False\n                break\n        if flag:\n            print(x)\n            return\nsolve()", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef is_possible(candidate, a, b):\n    for ai in a:\n        found = False\n        for bi in b:\n            ci = ai & bi\n            if ci | candidate == candidate:\n                found = True\n        if not found:\n            return False\n    return True\nanswer = 0\nfor candidate in range(0, 2 ** 10):\n    if is_possible(candidate, a, b):\n        answer = candidate\n        break\nprint(answer)", "(n, m) = map(int, input().split())\na = [*map(int, input().split())]\nb = [*map(int, input().split())]\nt = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        t[i].append(a[i] & b[j])\nfor j in range(2 ** 9):\n    f = 1\n    for i in range(n):\n        flag = 0\n        for x in t[i]:\n            if j | x == j:\n                flag = 1\n                break\n        if flag == 0:\n            f = 0\n            break\n    if f == 1:\n        print(j)\n        break", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = 0\nfor i in range(0, 513):\n    c = 1\n    for j in a:\n        u = 0\n        for k in b:\n            if i | j & k == i:\n                u = 1\n                break\n        if u == 0:\n            c = 0\n            break\n    if c == 1:\n        print(i)\n        break", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor target in range(2 ** 9 + 1):\n    f = 0\n    for i in a:\n        fg = 0\n        for j in b:\n            if i & j | target == target:\n                fg = 1\n                continue\n        if fg == 0:\n            break\n        else:\n            f += 1\n    if f == n:\n        print(target)\n        break", "def check(mat, x):\n    n = len(mat)\n    m = len(mat[0])\n    for i in range(n):\n        t = 0\n        for j in range(m):\n            t |= mat[i][j] | x == x\n        if t == 0:\n            return 0\n    return 1\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 0\nmat = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        mat[i][j] = a[i] & b[j]\nfor i in range(512):\n    if check(mat, i):\n        print(i)\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor check in range(0, 2 ** 9 + 1):\n    kitneAye = 0\n    for i in range(n):\n        flag = 0\n        for j in range(m):\n            if check | a[i] & b[j] == check:\n                flag = 1\n                break\n        if flag == 0:\n            break\n        else:\n            kitneAye += 1\n    if kitneAye == n:\n        print(check)\n        break", "import sys\nread = lambda : sys.stdin.readline().rstrip('\\r\\n')\n(m, n) = map(int, read().split())\narr_a = list(map(int, read().split()))\narr_b = list(map(int, read().split()))\n\ndef solution(arr_a, arr_b):\n    mask = 0\n    while mask <= 2 ** 9:\n        for a in arr_a:\n            for b in arr_b:\n                if ~mask & (a & b) == 0:\n                    break\n            else:\n                break\n        else:\n            return mask\n        mask += 1\nprint(solution(arr_a, arr_b))", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\narr = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] = a[i] & b[j]\nk = pow(2, 9)\nfor i in range(k):\n    t = 0\n    for j in range(n):\n        f = 0\n        for jj in range(m):\n            if arr[j][jj] | i == i:\n                f = 1\n                break\n        if f == 0:\n            t = 1\n            break\n    if t == 0:\n        print(i)\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\narr = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] = a[i] & b[j]\nk = pow(2, 9)\nfor i in range(k):\n    t = 0\n    for j in range(n):\n        f = 0\n        for jj in range(m):\n            if arr[j][jj] | i == i:\n                f = 1\n                break\n        if f == 0:\n            t = 1\n            break\n    if t == 0:\n        print(i)\n        break", "from sys import stdin\n(n, m) = map(int, stdin.readline().rstrip().split(' '))\nl1 = list(map(int, stdin.readline().rstrip().split(' ')))\nl2 = sorted(list(map(int, stdin.readline().rstrip().split(' '))))\nfor x in range(0, 512):\n    r = True\n    for i in range(n):\n        inside = False\n        for j in range(m):\n            y = x | l1[i] & l2[j]\n            if y == x:\n                inside = True\n                break\n        if not inside:\n            r = False\n            break\n    if r:\n        print(x)\n        break", "import collections\n\ndef f(a, b):\n    for ans in range(0, 512):\n        for i in range(len(a)):\n            flag = False\n            for j in range(len(b)):\n                if a[i] & b[j] | ans == ans:\n                    flag = True\n                    break\n            if not flag:\n                break\n        if flag:\n            return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(f(a, b))", "(n, m) = map(int, input().split())\na = [int(v) for v in input().split()]\nb = [int(v) for v in input().split()]\nj = 0\nwhile j < 512:\n    k = 0\n    while k < n:\n        f = 0\n        for v in range(m):\n            if a[k] & b[v] | j == j:\n                f = 1\n        if f == 0:\n            j = j + 1\n            break\n        else:\n            k = k + 1\n    else:\n        print(j)\n        break", "import sys, math\nfrom collections import deque, defaultdict\nimport operator as op\nfrom functools import reduce\nsys.setrecursionlimit(10 ** 6)\nI = sys.stdin.readline\n\ndef ii():\n    return int(I().strip())\n\ndef li():\n    return list(map(int, I().strip().split()))\n\ndef mi():\n    return map(int, I().strip().split())\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef main():\n    (n, m) = mi()\n    a = sorted(li())\n    b = sorted(li())\n    ands = []\n    for i in range(513):\n        f = 1\n        for j in a:\n            for k in b:\n                tmp = j & k | i\n                if tmp == i:\n                    break\n            else:\n                f = 0\n                break\n        if f == 1:\n            print(i)\n            break\nmain()", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nflag1 = False\nfor i in range(513):\n    flag1 = True\n    for j in a:\n        flag2 = False\n        for k in b:\n            if i | j & k == i:\n                flag2 = True\n                break\n        if flag2 == False:\n            flag1 = False\n            break\n    if flag1:\n        print(i)\n        break", "(n, x) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nans = 0\nfor i in range(513):\n    flag1 = 0\n    for j in A:\n        flag2 = 0\n        for k in B:\n            if j & k | i == i:\n                flag2 = 1\n        if flag2 != 1:\n            break\n    else:\n        ans = i\n        break\nprint(i)", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor target in range(0, 2 ** 9 + 1):\n    f = 0\n    for i in a:\n        fg = 0\n        for j in b:\n            if i & j | target == target:\n                fg = 1\n                continue\n        if fg == 0:\n            break\n        else:\n            f += 1\n    if f == n:\n        print(target)\n        break", "input()\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nfor i in range(513):\n    for j in A:\n        f = 0\n        for k in B:\n            if j & k | i == i:\n                f = 1\n        if f != 1:\n            break\n    else:\n        break\nprint(i)", "s = input()\ns = input()\ns1 = s.split()\na = [int(i) for i in s1]\ns = input()\ns1 = s.split()\nb = [int(i) for i in s1]\nfor i in range(0, 2 ** 9 + 1):\n    for j in range(len(a)):\n        flag = 0\n        for k in range(len(b)):\n            if a[j] & b[k] | i == i:\n                flag = 1\n        if flag == 0:\n            break\n    if flag == 1:\n        print(i)\n        break", "import sys\nimport math\nfrom math import inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\nmod = 10 ** 9 + 7\n(n, m) = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nfor ans in range(0, 1 << 9):\n    flag = True\n    for i in a:\n        f = False\n        for j in b:\n            if i & j | ans == ans:\n                f = True\n                break\n        if not f:\n            flag = False\n            break\n    if flag:\n        print(ans)\n        break", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor check in range(0, 2 ** 9 + 1):\n    kitneAye = 0\n    for i in range(n):\n        flag = 0\n        for j in range(m):\n            if check | a[i] & b[j] == check:\n                flag = 1\n                break\n        if flag == 0:\n            break\n        else:\n            kitneAye += 1\n    if kitneAye == n:\n        print(check)\n        break", "(n, m) = map(int, input().split())\nl = [int(x) for x in input().split()]\nr = [int(x) for x in input().split()]\nfor ans in range(512):\n    flag = True\n    for i in range(n):\n        flag1 = False\n        for j in range(m):\n            if l[i] & r[j] | ans == ans:\n                flag1 = True\n                break\n        if flag1 == False:\n            flag = False\n            break\n    if flag == True:\n        print(ans)\n        break", "MIN = 2 ** 9 * 2\n[n, m] = list(map(int, input().split()))\narr = []\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\na.sort(reverse=True)\nb.sort(reverse=True)\nsumm = 0\nincarr = []\nfor i in a:\n    inc = i & b[0]\n    for j in b:\n        x = i & j\n        if summ | x < summ | inc:\n            inc = x\n    incarr.append(inc)\n    summ = summ | inc\nmx = max(incarr)\nsol = mx\nfor i in a:\n    mini = i & b[0]\n    for j in b:\n        x = i & j\n        if sol | x < sol | mini:\n            mini = x\n    sol = sol | mini\nprint(sol)", "(n, m) = input().split()\nn = int(n)\nm = int(m)\na1 = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(513):\n    for j in range(len(a1)):\n        a = 0\n        for k in range(len(b)):\n            ans1 = a1[j] & b[k]\n            ans = ans1 | i\n            if ans == i:\n                a = 1\n                break\n        if a == 1:\n            continue\n        else:\n            break\n    if a == 1:\n        print(i)\n        break", "(n, m) = [int(i) for i in input().split()]\nlst1 = [int(i) for i in input().split()]\nlst2 = [int(i) for i in input().split()]\nfor k in range(512):\n    check = True\n    for i in range(n):\n        flag = False\n        for j in range(m):\n            if lst1[i] & lst2[j] | k == k:\n                flag = True\n                break\n        if not flag:\n            check = False\n            break\n    if check:\n        print(k)\n        break", "(n, m) = input().split()\ns = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(0, 2 ** 9 + 1):\n    for j in range(len(s)):\n        c = True\n        for k in range(len(l)):\n            if s[j] & l[k] | i == i:\n                break\n            elif k == len(l) - 1:\n                c = False\n        if c == False:\n            break\n    if c:\n        print(i)\n        break", "import sys\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\nimport math\nfrom collections import defaultdict\n(n, m) = ria()\nx = ria()\ny = ria()\nfor ans in range(512):\n    flag = 1\n    for i in range(n):\n        z = 1\n        for j in range(m):\n            a = x[i] & y[j] | ans\n            if a <= ans:\n                z = 0\n                break\n        if z:\n            flag = 0\n            break\n    if flag:\n        break\nwi(ans)", "def check(x):\n    for i in range(n):\n        done = False\n        for j in range(m):\n            if p[i] & q[j] | x == x:\n                done = True\n                break\n        if not done:\n            return 0\n    return 1\n(n, m) = map(int, input().split())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\nfor i in range(1 << 9):\n    if check(i):\n        print(i)\n        break", "(n, m) = input().split()\ns = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i in range(0, 2 ** 9 + 1):\n    for j in range(len(s)):\n        c = True\n        for k in range(len(l)):\n            if s[j] & l[k] | i == i:\n                break\n            elif k == len(l) - 1:\n                c = False\n        if c == False:\n            break\n    if c:\n        print(i)\n        break", "from collections import Counter\nimport string\nimport math\nimport sys\n\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef vary(arrber_of_variables):\n    if arrber_of_variables == 1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables >= 2:\n        return map(int, sys.stdin.readline().split())\n\ndef makedict(var):\n    return dict(Counter(var))\nmod = 1000000007\n(n, m) = vary(2)\na = array_int()\nb = array_int()\nans = float('inf')\nfor k in range(0, 2 ** 9):\n    for i in range(n):\n        for j in range(m):\n            if a[i] & b[j] | k == k:\n                ans = k\n                break\n        else:\n            break\n    else:\n        print(k)\n        break", "import sys\n(n, m) = map(int, sys.stdin.readline().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [[x for x in b] for _ in range(n)]\nsum = 0\nfor nob in range(9, -1, -1):\n    count = 0\n    se = set()\n    for i in range(n):\n        bit = a[i] >> nob\n        if bit & 1 == 0:\n            count += 1\n            continue\n        else:\n            for j in c[i]:\n                bit1 = j >> nob\n                if bit1 & 1 == 0:\n                    se.add(i)\n                    count += 1\n                    break\n    if count != n:\n        sum = sum | 1 << nob\n    else:\n        for k in se:\n            c[k] = [x for x in c[k] if not x >> nob & 1 == 1]\nprint(sum)", "(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nbl = len(bin(max(a + b))) - 2\nans = 0\ngi = 0\nfor g in range(bl, -1, -1):\n    gi |= 1 << g\n    for i in [min([ai & bj & gi | ans for bj in b]) for ai in a]:\n        ans |= i\nprint(ans)", "from sys import stdin\ninput = stdin.readline\n(n, m) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nfor x in range(512):\n    flag = 0\n    r = '0' * 9 + bin(x)[2:]\n    for y in a:\n        flag = 0\n        for z in b:\n            s = '0' * 9 + bin(y & z)[2:]\n            flag = 0\n            for i in range(-9, 0, 1):\n                if s[i] == '1' and r[i] == '0':\n                    flag = 1\n                    break\n            if flag == 0:\n                break\n        if flag == 0:\n            continue\n        else:\n            break\n    if flag == 0:\n        print(x)\n        break", "def get_not_in(local_arr, bit):\n    wrongs = []\n    for i in range(len(local_arr)):\n        if local_arr[i][bit] == '1':\n            wrongs.append(i)\n    return wrongs\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\narr = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        x = bin(a[i] & b[j])[2:]\n        arr[i][j] = '0' * (10 - len(x)) + x\nans = [0] * 10\nfor i in range(10):\n    all_wrongs = []\n    for j in arr:\n        wrong_numbs = get_not_in(j, i)\n        all_wrongs.append(wrong_numbs)\n    flag = True\n    pos = 0\n    for j in all_wrongs:\n        if len(j) == len(arr[pos]):\n            ans[i] = 1\n            flag = False\n        pos += 1\n    if flag:\n        for j in range(len(all_wrongs)):\n            for k in range(len(all_wrongs[j])):\n                del arr[j][all_wrongs[j][k] - k]\nans_numb = 0\nfor i in range(len(ans)):\n    ans_numb += 2 ** (9 - i) * ans[i]\nprint(ans_numb)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n(n, m) = MI()\naa = LI()\nbb = LI()\natob = [bb[:] for _ in range(n)]\nans = 0\nfor k in range(8, -1, -1):\n    nb = [[] for _ in range(n)]\n    for (i, a) in enumerate(aa):\n        ok = True\n        for b in atob[i]:\n            if (a & b) >> k & 1 == 0:\n                nb[i].append(b)\n        if not nb[i]:\n            ans |= 1 << k\n            break\n    else:\n        atob = nb\nprint(ans)", "(n, m) = map(int, input().split())\narrA = list(map(int, input().split()))\narrB = list(map(int, input().split()))\nans = 511\nfor val in range(510, -1, -1):\n    temp = True\n    for a in arrA:\n        for b in arrB:\n            if a & b | val == val:\n                break\n        else:\n            temp = False\n            break\n    if temp:\n        ans = val\nprint(ans)", "def isPossible(ans):\n    for i in range(n):\n        done = 0\n        for j in range(m):\n            if a[i] & b[j] | ans == ans:\n                done = 1\n                break\n        if not done:\n            return 0\n    return 1\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nfin = 2 ** 9 - 1\nfor i in range(2 ** 9 - 1, -1, -1):\n    if isPossible(i):\n        fin = min(fin, i)\nprint(fin)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nusable_b = []\nfor i in range(n):\n    usable_b.append(range(m))\nans = 0\nfor d in range(9, -1, -1):\n    new_usable_b = []\n    can0 = True\n    for i in range(n):\n        usable = []\n        for j in usable_b[i]:\n            c = a[i] & b[j]\n            if c & 1 << d == 0:\n                usable.append(j)\n        new_usable_b.append(usable)\n        if len(usable) == 0:\n            can0 = False\n    if can0:\n        usable_b = new_usable_b\n    else:\n        ans |= 1 << d\nprint(ans)", "(n, m) = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nval = 2 ** 9\na_and_b = []\nfor i in a:\n    ai = []\n    for j in b:\n        ai.append(i & j)\n    a_and_b.append(ai)\nans = val\nfor i in range(val):\n    cnt = 0\n    for j in a_and_b:\n        for k in j:\n            if k | i == i:\n                cnt += 1\n                break\n        else:\n            break\n    if cnt == n:\n        ans = min(ans, i)\nprint(ans)", "from math import log2\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ninf = float('inf')\nl = [i for i in range(pow(2, 9))]\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmina = inf\nfor A in l:\n    found = 1\n    for i in a:\n        found1 = 0\n        for j in b:\n            if i & j | A == A:\n                found1 = 1\n                break\n        found = min(found, found1)\n        if found == 0:\n            break\n    if found:\n        mina = min(mina, A)\nprint(mina)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\nst = [set()] * 205\nfor i in range(n):\n    st[i] = set(brr)\nans = 0\nfor bit_pos in range(31, -1, -1):\n    ans = ans | 1 << bit_pos\n    flag2 = 1\n    for i in range(n):\n        flag = 0\n        for item in st[i]:\n            tmp = arr[i] & item\n            if tmp & 1 << bit_pos == 0:\n                flag = 1\n                break\n        if flag == 0:\n            flag2 = 0\n            break\n    if flag2 == 0:\n        continue\n    for i in range(n):\n        sttmp = set()\n        for item in st[i]:\n            tmp = arr[i] & item\n            if tmp & 1 << bit_pos == 0:\n                sttmp.add(item)\n        st[i] = sttmp\n    ans = ans & ~(1 << bit_pos)\nprint(ans)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().split())\ninl = lambda : list(map(int, input().split()))\n(n, m) = inm()\na = inl()\nb = inl()\nfor x in range(512):\n    outt = True\n    for i in a:\n        out = False\n        for j in set(b):\n            if i & j | x == x:\n                out = True\n                break\n        if out == False:\n            outt = False\n    if outt:\n        print(x)\n        break"]