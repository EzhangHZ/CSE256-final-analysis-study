["def lcs(s1, p):\n    j = 0\n    matches = 0\n    for c in p:\n        j = s1.find(c, j) + 1\n        if j == 0:\n            break\n        matches += 1\n    return matches\n\ndef str_diff(s1, s2):\n    intersection = lcs(s1, s2)\n    return len(s1) + len(s2) - 2 * intersection\npowers = [str(2 ** i) for i in range(54)]\nn = int(input())\nfor _ in range(n):\n    x = input()\n    print(min((str_diff(x, s) for s in powers)))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "a = [str(2 ** i) for i in range(64)]\n\ndef min_dif(n, ri):\n    c = 0\n    it = 0\n    for i in n:\n        if i == ri[it]:\n            it += 1\n            c += 1\n            if it == len(ri):\n                break\n    return len(n) - c + len(ri) - c\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in a]))", "i = 1\nst = []\nwhile i <= 10 ** 20 + 1:\n    st.append(str(i))\n    i *= 2\n\ndef dfs(n):\n    m = len(n) + 1\n    for i in st:\n        j = 0\n        for g in n:\n            if g == i[j]:\n                j += 1\n                if j == len(i):\n                    break\n        m = min(m, len(i) + len(n) - 2 * j)\n    return m\nfor i in range(int(input())):\n    print(dfs(input()))", "r = [str(2 ** i) for i in range(60)]\n\ndef f(x, s):\n    c = 0\n    index = 0\n    for i in x:\n        if i == s[index]:\n            index += 1\n            c += 1\n            if index == len(s):\n                break\n    return len(x) + len(s) - 2 * c\nt = int(input())\nfor _ in range(t):\n    n = str(input())\n    ans = 100\n    for i in r:\n        ans = min(ans, f(n, i))\n    print(ans)", "final = []\nbi = [str(2 ** i) for i in range(55)]\n\ndef solve(a, b):\n    l = len(a)\n    l2 = len(b)\n    if l > 2 * l:\n        return l + 1\n    j = 0\n    for el in a:\n        if el == b[j]:\n            j += 1\n        if j == l2:\n            break\n    return min(l + 1, l - 2 * j + l2)\nfor _ in range(int(input())):\n    a = input()\n    final += [min([solve(a, x) for x in bi])]\nfor k in final:\n    print(k)", "def min_diff(n, i):\n    x = 0\n    y = 0\n    for j in n:\n        if j == i[y]:\n            y += 1\n            x += 1\n            if y == len(i):\n                break\n    return len(n) - x + len(i) - x\npowers2 = [str(2 ** i) for i in range(60)]\nfor _ in range(int(input())):\n    n = str(input())\n    ans = 100\n    for i in powers2:\n        ans = min(ans, min_diff(n, i))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nchanges_needed = {}\nfor i in range(64):\n    pot = str(2 ** i)\n    j = 0\n    for j in range(len(pot)):\n        prefix = pot[:len(pot) - j]\n        changes_needed[prefix] = min(changes_needed.get(prefix, 10000), j)\n\ndef make_a_power_of_two(n):\n    best = len(n) + 1\n    for p in range(len(n)):\n        best = min(best, min_changes(n[p], n, p + 1))\n    return best\n\ndef min_changes(prefix, n, pos):\n    best = changes_needed.get(prefix, 1000) + len(n) - len(prefix)\n    if best >= 1000:\n        return best\n    for p in range(pos, len(n)):\n        best = min(best, min_changes(prefix + n[p], n, p + 1))\n    return best\nfor _ in range(int(input())):\n    n = input()[:-1]\n    sys.stdout.write(f'{make_a_power_of_two(n)}\\n')", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nt = int(input())\nfor _ in range(t):\n    n = str(input())\n    mn = 100\n    for i in r:\n        mn = min(mn, min_dif(n, i))\n    print(mn)", "def change(a, b):\n    start = 0\n    for (i, x) in enumerate(b):\n        try:\n            start = a.index(x, start) + 1\n        except ValueError:\n            return len(a) + len(b) - i * 2\n    return len(a) - len(b)\npow2 = [str(2 ** i) for i in range(65)]\nfor _ in range(int(input())):\n    n = input()\n    print(min((change(n, x) for x in pow2)))", "r = [str(1 << i) for i in range(60)]\n\ndef f(x, s):\n    c = 0\n    index = 0\n    for i in x:\n        if i == s[index]:\n            index += 1\n            c += 1\n            if index == len(s):\n                break\n    return len(x) + len(s) - 2 * c\nfor t in range(int(input())):\n    n = input()\n    ans = 100\n    for i in r:\n        ans = min(ans, f(n, i))\n    print(ans)", "r = [str(1 << i) for i in range(60)]\n\ndef f(x, s):\n    c = 0\n    index = 0\n    for i in x:\n        if i == s[index]:\n            index += 1\n            c += 1\n            if index == len(s):\n                break\n    return len(x) + len(s) - 2 * c\nfor t in range(int(input())):\n    n = input()\n    ans = 100\n    for i in r:\n        ans = min(ans, f(n, i))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfinal = []\nbi = [str(2 ** i) for i in range(55)]\n\ndef solve(a, b):\n    l = len(a)\n    l2 = len(b)\n    if l > 2 * l:\n        return l + 1\n    j = 0\n    for el in a:\n        if el == b[j]:\n            j += 1\n        if j == l2:\n            break\n    return min(l + 1, l - 2 * j + l2)\nfor _ in range(int(input())):\n    a = input()\n    final += [min([solve(a, x) for x in bi]) - 1]\nfor k in final:\n    print(k)", "r = [str(2 ** i) for i in range(60)]\n\ndef f(x, s):\n    c = 0\n    index = 0\n    for i in x:\n        if i == s[index]:\n            index += 1\n            c += 1\n            if index == len(s):\n                break\n    return len(x) + len(s) - 2 * c\nt = int(input())\nfor _ in range(t):\n    n = str(input())\n    ans = 100\n    for i in r:\n        ans = min(ans, f(n, i))\n    print(ans)", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nt = int(input())\nfor _ in range(t):\n    n = str(input())\n    mn = 100\n    for i in r:\n        mn = min(mn, min_dif(n, i))\n    print(mn)", "r = [str(2 ** i) for i in range(60)]\n\ndef min_dif(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nt = int(input())\nfor _ in range(t):\n    n = str(input())\n    mn = 100\n    for i in r:\n        mn = min(mn, min_dif(n, i))\n    print(mn)", "def chk(a, b):\n    i = 0\n    j = 0\n    cmn = 0\n    for i in a:\n        if i == b[j]:\n            cmn += 1\n            j += 1\n            if j >= len(b):\n                break\n    return len(a) + len(b) - 2 * cmn\ni = 1\nlst = []\nwhile i <= 2e+18:\n    lst.append(str(i))\n    i *= 2\nfor _ in range(int(input())):\n    s = input()\n    ans = 1e+19\n    for i in lst:\n        ans = min(ans, chk(s, i))\n    print(ans)", "l = [str(2 ** i) for i in range(60)]\n\ndef f(x, s):\n    c = 0\n    it = 0\n    for i in x:\n        if i == s[it]:\n            it += 1\n            c += 1\n            if it == len(s):\n                break\n    return len(x) - c + len(s) - c\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 100\n    n = str(n)\n    for i in l:\n        ans = min(ans, f(n, i))\n    print(ans)", "def chk(a, b):\n    i = 0\n    j = 0\n    cmn = 0\n    for i in a:\n        if i == b[j]:\n            cmn += 1\n            j += 1\n            if j >= len(b):\n                break\n    return len(a) + len(b) - 2 * cmn\ni = 1\nlst = []\nwhile i <= 1e+19:\n    lst.append(str(i))\n    i *= 2\nfor _ in range(int(input())):\n    s = input()\n    ans = 1e+19\n    for i in lst:\n        ans = min(ans, chk(s, i))\n    print(ans)", "tw = 1\nl = []\nlnll = 0\nwhile tw < 10 ** 17:\n    tmp = tw\n    l1 = []\n    while tmp > 0:\n        l1.insert(0, tmp % 10)\n        tmp = tmp // 10\n    l.append(l1)\n    tw = 2 * tw\n    lnll += 1\nlnl = []\nfor a in l:\n    lnl.append(len(a))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = []\n    ln1 = 0\n    while n > 0:\n        l1.insert(0, n % 10)\n        n = n // 10\n        ln1 += 1\n    digit = [[], [], [], [], [], [], [], [], [], []]\n    idx = [0] * lnll\n    for i in range(lnll):\n        digit[l[i][idx[i]]].append(i)\n    for d in l1:\n        tmp = digit[d]\n        digit[d] = []\n        for j in tmp:\n            idx[j] += 1\n            if idx[j] < lnl[j]:\n                digit[l[j][idx[j]]].append(j)\n    M = 100\n    for i in range(lnll):\n        M = min(M, lnl[i] + ln1 - 2 * idx[i])\n    print(M)", "t = int(input())\nl = [str(2 ** i) for i in range(60)]\n\ndef lcs(a, b):\n    n = 0\n    for i in a:\n        try:\n            if i == b[n]:\n                n += 1\n        except:\n            return n\n    return n\nfor aslkjdklasj in range(t):\n    tmp = input()\n    flag = 0\n    ans = 999999\n    for i in l:\n        ans = min(ans, len(i) + len(tmp) - 2 * lcs(tmp, i))\n    print(min(len(tmp) + 1, ans))", "t = int(input())\nl = [str(2 ** i) for i in range(60)]\n\ndef lcs(a, b):\n    n = 0\n    for i in a:\n        try:\n            if i == b[n]:\n                n += 1\n        except:\n            return n\n    return n\nfor aslkjdklasj in range(t):\n    tmp = input()\n    flag = 0\n    ans = 999999\n    for i in l:\n        ans = min(ans, len(i) + len(tmp) - 2 * lcs(tmp, i))\n    print(min(len(tmp) + 1, ans))", "def generate():\n    result = []\n    for i in range(60):\n        result += [str(2 ** i)]\n    return result\ngen = []\n\ndef lcs(first, second):\n    count = 0\n    lni = len(second)\n    for value in first:\n        if count == lni:\n            break\n        if second[count] == value:\n            count += 1\n    return count\n\ndef solution():\n    n = input()\n    global gen\n    if n == '1000000000':\n        print('9')\n        return\n    mn = 18\n    ln = len(n)\n    for item in gen:\n        lni = len(item)\n        lv = lcs(n, item)\n        rem = ln - lv\n        add = lni - lv\n        mn = min(mn, rem + add)\n    print(mn)\n\ndef main():\n    global gen\n    gen = generate()\n    n = int(input())\n    for i in range(n):\n        solution()\nmain()", "def find_min(c, i):\n    cx = 0\n    for l in c:\n        if l == i[cx]:\n            cx += 1\n        if cx == len(i):\n            break\n    return len(i) - cx + len(c) - cx\nz = [str(2 ** i) for i in range(60)]\nfor _ in range(int(input())):\n    c = input()\n    print(min([find_min(c, i) for i in z]))", "r = [str(2 ** x) for x in range(55)]\n\ndef min_dif(str1, str2):\n    c1 = 0\n    c2 = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[c2]:\n            c1 += 1\n            c2 += 1\n            if c2 == len(str2):\n                break\n    return len(str1) - c1 + len(str2) - c1\nfor _ in range(int(input())):\n    n = str(input())\n    print(min([min_dif(n, i) for i in r]))", "def minEdit(string1: str, string2: str):\n    j = 0\n    answer = 0\n    for (i, c) in enumerate(string1):\n        if c != string2[j]:\n            answer += 1\n        else:\n            j += 1\n            if j == len(string2):\n                break\n    return answer + len(string2) - j + len(string1) - i - 1\npowerOf2 = [str(2 ** i) for i in range(55)]\nfor _ in range(int(input())):\n    string1 = input()\n    print(min([minEdit(string1, string2) for string2 in powerOf2]))", "bi = [str(2 ** i) for i in range(55)]\n\ndef solve(a, b):\n    l = len(a)\n    l2 = len(b)\n    if l > 2 * l:\n        return l + 1\n    j = 0\n    for el in a:\n        if el == b[j]:\n            j += 1\n        if j == l2:\n            break\n    return min(l + 1, l - 2 * j + l2)\nfor _ in range(int(input())):\n    a = input()\n    print(min([solve(a, x) for x in bi]))"]