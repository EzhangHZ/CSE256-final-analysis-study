["for _ in range(int(input())):\n    n = int(input())\n    l = []\n    flag = False\n    lst = set()\n    list_i = []\n    for _ in range(n):\n        s = input()\n        lst.add(s.find('*'))\n        lst.add(s.rfind('*'))\n        if s.count('*') == 2:\n            list_i.append(s)\n            flag = True\n        l.append(s)\n    if -1 in lst:\n        lst.remove(-1)\n    lst = list(lst)\n    if len(lst) == 1:\n        if lst[0] == 0:\n            lst.append(1)\n        else:\n            lst.append(0)\n    m = 2\n    if flag:\n        if l[0].count('*') > 0:\n            m = 0\n        elif l[-1].count('*') > 0:\n            m = 1\n        if m == 0:\n            print(l[0])\n            print(l[0])\n            for i in l[2:]:\n                print(i)\n        elif m == 1:\n            for i in l[0:-2]:\n                print(i)\n            print(l[-1])\n            print(l[-1])\n        else:\n            print(list_i[0])\n            for i in l[1:]:\n                print(i)\n    else:\n        for i in l:\n            if i.count('*') > 0:\n                for j in range(len(i)):\n                    if j in lst:\n                        print('*', end='')\n                    else:\n                        print('.', end='')\n                print()\n            else:\n                print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    pos_r = []\n    pos_c = []\n    rows = []\n    for i in range(n):\n        rows.append(list(input()))\n        for (j, c) in enumerate(rows[-1]):\n            if c == '*':\n                pos_r.append(i)\n                pos_c.append(j)\n    if pos_r[0] == pos_r[1]:\n        r = (pos_r[0] + 1) % n\n        for c in pos_c:\n            rows[r][c] = '*'\n    elif pos_c[0] == pos_c[1]:\n        c = (pos_c[0] + 1) % n\n        for r in pos_r:\n            rows[r][c] = '*'\n    else:\n        for (r, c) in zip(pos_r[::-1], pos_c):\n            rows[r][c] = '*'\n    rows = '\\n'.join((''.join(row) for row in rows))\n    print(rows)", "for tc in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    t = [i.count('*') for i in a]\n    if 2 in t:\n        on = t.index(2)\n        dot = [i for i in range(len(a[on])) if a[on][i] == '*']\n        if on == 0:\n            for i in dot:\n                a[1][i] = '*'\n            for i in a:\n                print(''.join(i))\n        if on != 0:\n            for i in dot:\n                a[0][i] = '*'\n            for i in a:\n                print(''.join(i))\n    else:\n        k = [i for i in range(n) if t[i] == 1]\n        k1 = a[k[0]].index('*')\n        k2 = a[k[1]].index('*')\n        if k1 == k2:\n            if k1 == 0:\n                a[k[0]][1] = '*'\n                a[k[1]][1] = '*'\n            else:\n                a[k[0]][0] = '*'\n                a[k[1]][0] = '*'\n            for i in a:\n                print(''.join(i))\n        else:\n            a[k[0]][k2] = '*'\n            a[k[1]][k1] = '*'\n            for i in a:\n                print(''.join(i))", "for _ in range(int(input())):\n    n = int(input())\n    starts = []\n    arr = []\n    for i in range(n):\n        arr.append(input().strip())\n        if '*' in arr[-1]:\n            if arr[-1].count('*') == 1:\n                starts.append((i, arr[-1].index('*')))\n            elif arr[-1].count('*') == 2:\n                starts.append((i, arr[-1].index('*')))\n                starts.append((i, n - 1 - arr[-1][::-1].index('*')))\n    if starts[0][0] == starts[1][0]:\n        x = starts[0][0]\n        if x < n - 1:\n            arr[x + 1] = arr[x]\n        else:\n            arr[x - 1] = arr[x]\n    elif starts[0][1] == starts[1][1]:\n        x = starts[0][1]\n        if x != 0:\n            arr[starts[0][0]] = '*' + arr[starts[0][0]][1:]\n            arr[starts[1][0]] = '*' + arr[starts[1][0]][1:]\n        else:\n            arr[starts[0][0]] = '**' + arr[starts[0][0]][2:]\n            arr[starts[1][0]] = '**' + arr[starts[1][0]][2:]\n    else:\n        res = ''\n        for i in range(n):\n            if arr[starts[0][0]][i] == '*' or arr[starts[1][0]][i] == '*':\n                res = res + '*'\n            else:\n                res = res + '.'\n        arr[starts[0][0]] = res\n        arr[starts[1][0]] = res\n    print(*arr, sep='\\n')", "t = int(input())\nfor inh in range(0, t):\n    n = int(input())\n    (row, column, c) = ([], [], 0)\n    for inhg in range(0, n):\n        s = input()\n        if '*' in s and c < 2:\n            for i in range(0, n):\n                if s[i] == '*':\n                    row.append(inhg)\n                    column.append(i)\n                    c += 1\n    if row[0] == row[1]:\n        if row[0] == 0:\n            row.append(1)\n            row.append(1)\n        else:\n            row.append(0)\n            row.append(0)\n    elif column[0] == column[1]:\n        if column[0] == 0:\n            column.append(1)\n            column.append(1)\n        else:\n            column.append(0)\n            column.append(0)\n    else:\n        row.append(row[0])\n        row.append(row[1])\n        column.append(column[1])\n        column.append(column[0])\n    for i in range(0, n):\n        if i in row:\n            for j in range(0, n):\n                if j in column:\n                    print('*', end='')\n                else:\n                    print('.', end='')\n            print('')\n        else:\n            print('.' * n)", "from sys import stdin\ninput = stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    lst = [''] * n\n    store = []\n    for i in range(n):\n        lst[i] = input().strip()\n        if '*' in lst[i]:\n            store.append([i, lst[i].index('*')])\n    l = len(store)\n    if l == 2:\n        if store[0][1] == store[1][1]:\n            if store[0][1] == 0:\n                temp = lst[store[0][0]]\n                temp = '**' + temp[2:]\n                lst[store[0][0]] = temp\n                lst[store[1][0]] = temp\n            else:\n                temp = lst[store[0][0]]\n                temp = temp[:store[0][1] - 1] + '**' + temp[store[0][1] + 1:]\n                lst[store[0][0]] = temp\n                lst[store[1][0]] = temp\n        temp = lst[store[0][0]]\n        temp = temp[:store[1][1]] + '*' + temp[store[1][1] + 1:]\n        lst[store[0][0]] = temp\n        temp = lst[store[1][0]]\n        temp = temp[:store[0][1]] + '*' + temp[store[0][1] + 1:]\n        lst[store[1][0]] = temp\n    else:\n        try:\n            lst[store[0][0] + 1] = lst[store[0][0]]\n        except IndexError:\n            lst[store[0][0] - 1] = lst[store[0][0]]\n    print(*lst, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    coord = list()\n    for i in range(n):\n        s = input()\n        try:\n            idx1 = s.index('*')\n            coord.append([i, idx1])\n            try:\n                idx2 = s.index('*', idx1 + 1)\n                coord.append([i, idx2])\n            except ValueError:\n                continue\n        except ValueError:\n            continue\n    mn_row = min(coord[0][0], coord[1][0])\n    y = abs(coord[0][0] - coord[1][0])\n    if y == 0:\n        y = 1\n        if mn_row == n - 1:\n            mn_row = n - 2\n    mn_col = min(coord[0][1], coord[1][1])\n    x = abs(coord[0][1] - coord[1][1])\n    if x == 0:\n        x = 1\n        if mn_col == n - 1:\n            mn_col = n - 2\n    output = []\n    for i in range(n):\n        output.append(['.'] * n)\n    output[mn_row][mn_col] = '*'\n    output[mn_row + y][mn_col] = '*'\n    output[mn_row][mn_col + x] = '*'\n    output[mn_row + y][mn_col + x] = '*'\n    print('\\n'.join((''.join(output[r]) for r in range(n))))", "for _ in range(int(input())):\n    n = int(input())\n    matrix = [list(input()) for _ in range(n)]\n    (x1, y1, x2, y2) = (-1, 0, 0, 0)\n    for row in range(n):\n        s = matrix[row]\n        if s.count('*') == 1:\n            if x1 == -1:\n                x1 = s.index('*')\n                y1 = row\n            else:\n                x2 = s.index('*')\n                y2 = row\n                break\n        elif s.count('*') == 2:\n            x1 = s.index('*')\n            y1 = row\n            s[x1] = '.'\n            x2 = s.index('*')\n            y2 = row\n            s[x1] = '*'\n            break\n    if x1 != x2 and y1 != y2:\n        matrix[y1][x2] = '*'\n        matrix[y2][x1] = '*'\n    elif x1 != x2 and y1 == y2:\n        if y1 - 1 >= 0:\n            matrix[y1 - 1][x1] = '*'\n            matrix[y1 - 1][x2] = '*'\n        else:\n            matrix[y1 + 1][x1] = '*'\n            matrix[y1 + 1][x2] = '*'\n    elif x1 - 1 >= 0:\n        matrix[y1][x1 - 1] = '*'\n        matrix[y2][x1 - 1] = '*'\n    else:\n        matrix[y1][x1 + 1] = '*'\n        matrix[y2][x1 + 1] = '*'\n    for row in matrix:\n        print(''.join(row))", "test_cases = int(input())\nrectangles = []\nfor test_case in range(test_cases):\n    n = int(input())\n    rows = []\n    for _ in range(n):\n        rows.append(input())\n    rectangles.append(rows)\nfor rows in rectangles:\n    star1 = None\n    star2 = None\n    for (i, row) in enumerate(rows):\n        if row.count('*'):\n            if not star1:\n                star1 = (row.find('*'), i)\n            else:\n                star2 = (row.find('*'), i)\n        if row.count('*') == 2:\n            star2 = (row.rfind('*'), i)\n    if star1[0] == star2[0]:\n        x_coord = 0 if star1[0] != 0 else 1\n        new_star1 = (x_coord, star1[1])\n        new_star2 = (x_coord, star2[1])\n    elif star1[1] == star2[1]:\n        y_coord = 0 if star1[1] != 0 else 1\n        new_star1 = (star1[0], y_coord)\n        new_star2 = (star2[0], y_coord)\n    else:\n        new_star1 = (star2[0], star1[1])\n        new_star2 = (star1[0], star2[1])\n    for (i, row) in enumerate(rows):\n        if new_star1[1] == i:\n            x = new_star1[0]\n            row = row[:x] + '*' + row[x + 1:]\n        if new_star2[1] == i:\n            x = new_star2[0]\n            row = row[:x] + '*' + row[x + 1:]\n        print(row)", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    lads = []\n    for i in range(n):\n        lads.append(str(input()))\n    x1 = -1\n    x2 = -1\n    y1 = -1\n    y2 = -1\n    for i in range(n):\n        testst = lads[i]\n        if x1 == -1:\n            if '*' in testst:\n                x1 = testst.index('*')\n                y1 = i\n                newtest = testst[0:testst.index('*')] + testst[testst.index('*') + 1:]\n                if '*' in newtest:\n                    x2 = newtest.index('*') + 1\n                    y2 = i\n        elif x2 == -1:\n            if '*' in testst:\n                x2 = testst.index('*')\n                y2 = i\n    outbox = []\n    if x1 == x2:\n        if x1 >= 1:\n            x2 = 0\n        else:\n            x2 = x1 + 1\n    if y1 == y2:\n        if y1 >= 1:\n            y2 = 0\n        else:\n            y2 = y1 + 1\n    for i in range(n):\n        outstr = ''\n        if y1 == i or y2 == i:\n            if x1 > x2:\n                outstr = '.' * x2 + '*' + '.' * (x1 - x2 - 1) + '*' + '.' * (n - x1 - 1)\n            if x2 > x1:\n                outstr = '.' * x1 + '*' + '.' * (x2 - x1 - 1) + '*' + '.' * (n - x2 - 1)\n        else:\n            outstr = '.' * n\n        print(outstr)", "for _ in range(int(input())):\n    n = int(input())\n    lsx = []\n    ls = []\n    for i in range(n):\n        a = list(input())\n        ls.append(a)\n        for j in range(len(a)):\n            if a[j] == '*':\n                lsx.append([i, j])\n    x1 = lsx[0][0]\n    x2 = lsx[0][1]\n    y1 = lsx[1][0]\n    y2 = lsx[1][1]\n    if x1 != y1 and x2 != y2:\n        ls[x1][y2] = '*'\n        ls[y1][x2] = '*'\n    elif x1 == y1:\n        if x1 != n - 1:\n            ls[x1 + 1][x2] = '*'\n            ls[y1 + 1][y2] = '*'\n        else:\n            ls[x1 - 1][x2] = '*'\n            ls[y1 - 1][y2] = '*'\n    elif x2 == y2:\n        if x2 != n - 1:\n            ls[x1][x2 + 1] = '*'\n            ls[y1][y2 + 1] = '*'\n        else:\n            ls[x1][x2 - 1] = '*'\n            ls[y1][y2 - 1] = '*'\n    for j in range(n):\n        print(''.join(ls[j]))", "while True:\n    try:\n        t = eval(input())\n        for i in range(t):\n            n = eval(input())\n            list0 = []\n            list1 = []\n            for j in range(n):\n                list0.append(list(input()))\n                for k in range(n):\n                    if list0[j][k] == '*':\n                        list1.append(j)\n                        list1.append(k)\n            if list1[0] == list1[2]:\n                if list1[0] == 0:\n                    list1[0] = list1[2] = 1\n                else:\n                    list1[0] = list1[2] = 0\n            elif list1[1] == list1[3]:\n                if list1[1] == 0:\n                    list1[1] = list1[3] = 1\n                else:\n                    list1[1] = list1[3] = 0\n            list0[list1[0]][list1[3]] = '*'\n            list0[list1[2]][list1[1]] = '*'\n            for j in range(n):\n                print(''.join(list0[j]), end='\\n')\n    except:\n        break", "for x in range(int(input())):\n    n = int(input())\n    l = []\n    m = []\n    for i in range(n):\n        s = input()\n        sb = []\n        for e in s:\n            sb.append(e)\n        l.append(sb)\n        for j in range(n):\n            if s[j] == '*':\n                m.append([i, j])\n    (x1, x2, y1, y2) = (m[0][0], m[1][0], m[0][1], m[1][1])\n    if x1 != x2 and y1 != y2:\n        l[x1][y2] = '*'\n        l[x2][y1] = '*'\n    elif x1 == x2:\n        sp = (abs(y1 - y2) + x1) % n\n        l[sp][y1] = '*'\n        l[sp][y2] = '*'\n    else:\n        sp = (abs(x1 - x2) + y1) % n\n        l[x1][sp] = '*'\n        l[x2][sp] = '*'\n    for ll in l:\n        print(''.join(ll))", "def solve():\n    n = int(input())\n    w = []\n    for i in range(n):\n        q = input()\n        if '*' not in q:\n            continue\n        for j in range(n):\n            if q[j] == '*':\n                w.append(i)\n                w.append(j)\n    (ax, ay, bx, by) = w\n    (cx, cy, dx, dy) = w\n    if ax != bx and ay != by:\n        (cx, cy, dx, dy) = (max(ax, bx), max(ay, by), min(ax, bx), min(ay, by))\n        if cx == bx and dx == ax and (cy == by) and (dy == ay):\n            (cx, cy, dx, dy) = (max(ax, bx), min(ay, by), min(ax, bx), max(ay, by))\n    elif ax == bx:\n        if ax != 0:\n            (cx, cy, dx, dy) = (ax - 1, ay, bx - 1, by)\n        else:\n            (cx, cy, dx, dy) = (ax + 1, ay, bx + 1, by)\n    elif ay == by:\n        if ay != 0:\n            (cx, cy, dx, dy) = (ax, ay - 1, bx, dy - 1)\n        else:\n            (cx, cy, dx, dy) = (ax, ay + 1, bx, dy + 1)\n    ans = [list('.' * n) for _ in range(n)]\n    ans[ax][ay] = '*'\n    ans[bx][by] = '*'\n    ans[cx][cy] = '*'\n    ans[dx][dy] = '*'\n    t = []\n    for i in ans:\n        t.append(''.join(i))\n    return '\\n'.join(t)\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for i in range(int(input())):\n    ind = []\n    l = []\n    n = int(input())\n    for j in range(n):\n        l.append([*input()])\n    i1 = 0\n    i2 = 0\n    for a in range(len(l)):\n        for b in range(len(l)):\n            if l[a][b] == '*':\n                ind.append(a)\n                ind.append(b)\n    if ind[1] != ind[3] and ind[0] != ind[2]:\n        l[ind[0]][ind[3]] = '*'\n        l[ind[2]][ind[1]] = '*'\n    elif ind[1] == ind[3]:\n        if ind[1] != n - 1:\n            l[ind[0]][ind[3] + 1] = '*'\n            l[ind[2]][ind[1] + 1] = '*'\n        else:\n            l[ind[0]][ind[3] - 1] = '*'\n            l[ind[2]][ind[1] - 1] = '*'\n    elif ind[0] == ind[2]:\n        if ind[0] != n - 1:\n            l[ind[0] + 1][ind[3]] = '*'\n            l[ind[2] + 1][ind[1]] = '*'\n        else:\n            l[ind[0] - 1][ind[3]] = '*'\n            l[ind[2] - 1][ind[1]] = '*'\n    for _ in l:\n        print(''.join(_))", "from sys import stdin\nfrom collections import Counter\nT = int(stdin.readline())\nfor t in range(T):\n    n = int(stdin.readline())\n    C = set()\n    R = set()\n    for i in range(n):\n        L = stdin.readline()\n        if '*' not in L:\n            continue\n        C.add(L.index('*'))\n        C.add(L.rindex('*'))\n        R.add(i)\n    if len(R) == 1:\n        if next(iter(R)) == 0:\n            R.add(1)\n        else:\n            R.add(0)\n    if len(C) == 1:\n        if next(iter(C)) == 0:\n            C.add(1)\n        else:\n            C.add(0)\n    A = '.' * n\n    B = ['.'] * n\n    for c in C:\n        B[c] = '*'\n    B = ''.join(B)\n    for i in range(n):\n        if i in R:\n            print(B)\n        else:\n            print(A)", "for _ in range(int(input())):\n    n = int(input())\n    (x, y) = ([], [])\n    grid = []\n    for r in range(n):\n        grid.append(list(input().rstrip()))\n        for (c, ch) in enumerate(grid[-1]):\n            if ch == '*':\n                x.append(r)\n                y.append(c)\n    if x[0] == x[1]:\n        r = (x[0] + 1) % n\n        for c in y:\n            grid[r][c] = '*'\n    elif y[0] == y[1]:\n        c = (y[0] + 1) % n\n        for r in x:\n            grid[r][c] = '*'\n    else:\n        grid[x[0]][y[1]] = '*'\n        grid[x[1]][y[0]] = '*'\n    for i in range(n):\n        print(''.join(grid[i]))", "class Solve:\n\n    def _solve(self):\n        n = int(input())\n        mp = [input() for _ in range(n)]\n        (a, b) = (None, None)\n        for i in range(n):\n            for (j, symb) in enumerate(mp[i]):\n                if symb == '*':\n                    if not a:\n                        a = (i, j)\n                    else:\n                        b = (i, j)\n\n        def upd_ln(ln, col, s='*'):\n            return ln[:col] + s + ln[col + 1:]\n        if a[0] == b[0]:\n            stri = (a[0] + 1) % n\n            mp[stri] = upd_ln(mp[stri], a[1])\n            mp[stri] = upd_ln(mp[stri], b[1])\n        elif a[1] == b[1]:\n            coli = (a[1] + 1) % n\n            stri = a[0]\n            mp[stri] = upd_ln(mp[stri], coli)\n            stri = b[0]\n            mp[stri] = upd_ln(mp[stri], coli)\n        else:\n            stri = a[0]\n            coli = b[1]\n            mp[stri] = upd_ln(mp[stri], coli)\n            stri = b[0]\n            coli = a[1]\n            mp[stri] = upd_ln(mp[stri], coli)\n        print('\\n'.join(mp))\n\n    def solve(self):\n        t = int(input())\n        for i in range(t):\n            self._solve()\nSolve().solve()", "for i in range(int(input())):\n    a = int(input())\n    blanck = []\n    pos = []\n    for j in range(a):\n        lst = list(input())\n        for k in range(len(lst)):\n            if lst[k] == '*':\n                pos.append((j, k))\n        blanck.append(lst)\n    arr = blanck\n    (x, y) = ([], [])\n    if pos == []:\n        arr[0][0] = '*'\n        arr[0][1] = '*'\n        arr[1][1] = '*'\n        arr[1][0] = '*'\n    try:\n        if pos:\n            for i in pos:\n                x.append(i[0])\n                y.append(i[1])\n            if len(set(x)) == 1:\n                if x[0] + 1 < len(arr):\n                    x.append(x[0] + 1)\n                elif x[0] - 1 >= 0:\n                    x.append(x[0] - 1)\n            if len(set(y)) == 1:\n                if y[0] + 1 < len(arr):\n                    y.append(y[0] + 1)\n                elif y[0] - 1 >= 0:\n                    y.append(y[0] - 1)\n            for i in x:\n                for j in y:\n                    arr[i][j] = '*'\n    except:\n        pass\n    for i in arr:\n        print(''.join(i))", "def find(li):\n    indices = []\n    for i in range(0, len(li)):\n        for j in range(0, len(li)):\n            if li[i][j] == '*':\n                indices.append(i)\n                indices.append(j)\n    x1 = indices[0]\n    y1 = indices[1]\n    x2 = indices[2]\n    y2 = indices[3]\n    if x1 != x2 and y1 != y2:\n        li[x1][y2] = '*'\n        li[x2][y1] = '*'\n    elif x1 == x2:\n        if x1 == x2 == len(li) - 1:\n            li[x1 - 1][y1] = '*'\n            li[x2 - 1][y2] = '*'\n        else:\n            li[x1 + 1][y1] = '*'\n            li[x2 + 1][y2] = '*'\n    elif y1 == y2:\n        if y1 == y2 == len(li) - 1:\n            li[x1][y1 - 1] = '*'\n            li[x2][y2 - 1] = '*'\n        else:\n            li[x1][y1 + 1] = '*'\n            li[x2][y2 + 1] = '*'\n    for i in li:\n        print(''.join(i))\nn = int(input())\nfor i in range(0, n):\n    l = int(input())\n    li = []\n    for i in range(0, l):\n        x = list(str(input()))\n        li.append(x)\n    find(li)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    pos = []\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                pos.append([i, j])\n    if pos[0][0] != pos[1][0] and pos[0][1] != pos[1][1]:\n        a[pos[0][0]][pos[1][1]] = '*'\n        a[pos[1][0]][pos[0][1]] = '*'\n    elif pos[0][0] == pos[1][0]:\n        if pos[0][0] < n - 1:\n            a[pos[0][0] + 1][pos[0][1]] = '*'\n            a[pos[1][0] + 1][pos[1][1]] = '*'\n        else:\n            a[pos[0][0] - 1][pos[0][1]] = '*'\n            a[pos[1][0] - 1][pos[1][1]] = '*'\n    elif pos[0][1] == pos[1][1]:\n        if pos[0][1] < n - 1:\n            a[pos[0][0]][pos[0][1] + 1] = '*'\n            a[pos[1][0]][pos[1][1] + 1] = '*'\n        else:\n            a[pos[0][0]][pos[0][1] - 1] = '*'\n            a[pos[1][0]][pos[1][1] - 1] = '*'\n    for i in range(n):\n        print(''.join(a[i]))", "for _ in range(int(input())):\n    n = int(input())\n    g = []\n    cnt = 0\n    xy = []\n    for i in range(n):\n        a = list(input())\n        g.append(a)\n        if cnt == 0:\n            if '*' in a:\n                t = a.index('*')\n                xy.append(t)\n                xy.append(i)\n                k = t\n                if '*' in a[t + 1:]:\n                    t = a[t + 1:].index('*')\n                    xy.append(t + k + 1)\n                    xy.append(i)\n                    cnt = cnt + 1\n                cnt = cnt + 1\n        elif cnt == 1:\n            if '*' in a:\n                xy.append(a.index('*'))\n                xy.append(i)\n    if xy[0] == xy[2]:\n        try:\n            g[xy[1]][xy[0] + 1] = '*'\n            g[xy[3]][xy[2] + 1] = '*'\n        except IndexError:\n            g[xy[1]][xy[0] - 1] = '*'\n            g[xy[3]][xy[2] - 1] = '*'\n    elif xy[1] == xy[3]:\n        try:\n            g[xy[1] + 1][xy[0]] = '*'\n            g[xy[1] + 1][xy[2]] = '*'\n        except IndexError:\n            g[xy[1] - 1][xy[0]] = '*'\n            g[xy[1] - 1][xy[2]] = '*'\n    else:\n        g[xy[1]][xy[2]] = '*'\n        g[xy[3]][xy[0]] = '*'\n    for i in range(n):\n        print(''.join(g[i]))", "I = input\ne = enumerate\nfor _ in [0] * int(I()):\n    n = int(I())\n    r = [[*I()] for _ in [0] * n]\n    ((i, j), (k, l)) = [(i, j) for (i, s) in e(r) for (j, x) in e(s) if x < '.']\n    k = (k + (k == i)) % n\n    l = (l + (l == j)) % n\n    r[i][j] = r[k][l] = r[i][l] = r[k][j] = '*'\n    for s in r:\n        print(''.join(s))", "I = input\ne = enumerate\nfor _ in [0] * int(I()):\n    n = int(I())\n    r = [[*I()] for _ in [0] * n]\n    ((i, j), (k, l)) = [(i, j) for (i, s) in e(r) for (j, x) in e(s) if '.' > x]\n    k = (k + (k == i)) % n\n    l = (l + (l == j)) % n\n    r[i][j] = r[k][l] = r[i][l] = r[k][j] = '*'\n    for s in r:\n        print(''.join(s))", "t = int(input())\nout = []\nfor case in range(t):\n    n = int(input())\n    table = []\n    p1x = -1\n    p1y = -1\n    p2x = -1\n    p2y = -1\n    for i in range(n):\n        row = input()\n        table.append(list(row))\n        if '*' in row:\n            count = 0\n            for (j, point) in enumerate(row):\n                if point == '*':\n                    count += 1\n                    if p1x == -1:\n                        p1x = j\n                        p1y = i\n                    else:\n                        p2x = j\n                        p2y = i\n    p3x = -1\n    p3y = -1\n    p4x = -1\n    p4y = -1\n    if p1x == p2x:\n        p3y = p1y\n        p4y = p2y\n        dist = p2y - p1y\n        if p1x + dist < n:\n            p3x = p1x + dist\n            p4x = p2x + dist\n        else:\n            p3x = p1x - dist\n            p4x = p2x - dist\n    elif p1y == p2y:\n        p3x = p1x\n        p4x = p2x\n        dist = p2x - p1x\n        if p1y + dist < n:\n            p3y = p1y + dist\n            p4y = p2y + dist\n        else:\n            p3y = p1y - dist\n            p4y = p2y - dist\n    else:\n        p3x = p1x\n        p3y = p2y\n        p4x = p2x\n        p4y = p1y\n    table[p3y][p3x] = '*'\n    table[p4y][p4x] = '*'\n    out.append('\\n'.join([''.join(row) for row in table]))\nprint('\\n'.join(out))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list()\n    ind = []\n    for i in range(n):\n        row = list(input())\n        for j in range(n):\n            if row[j] == '*':\n                ind.append([i, j])\n        arr.append(row)\n    if ind[0][0] == ind[1][0]:\n        if ind[0][0] == n - 1:\n            x = -1\n        else:\n            x = 1\n        arr[ind[0][0] + x][ind[0][1]] = '*'\n        arr[ind[1][0] + x][ind[1][1]] = '*'\n    elif ind[0][1] == ind[1][1]:\n        if ind[0][1] == n - 1:\n            x = -1\n        else:\n            x = 1\n        arr[ind[0][0]][ind[0][1] + x] = '*'\n        arr[ind[1][0]][ind[1][1] + x] = '*'\n    elif ind[0][0] == 0 and ind[0][1] == 0 and (ind[1][0] == n - 1) and (ind[1][1] == n - 1):\n        arr[ind[0][0]][ind[1][0]] = '*'\n        arr[ind[1][0]][ind[0][0]] = '*'\n    else:\n        index1 = [ind[0][0], ind[1][1]]\n        index2 = [ind[1][0], ind[0][1]]\n        arr[index1[0]][index1[1]] = '*'\n        arr[index2[0]][index2[1]] = '*'\n    for i in arr:\n        print(''.join(i))", "def soln(matrix, n):\n    r = []\n    c = []\n    for i in range(n):\n        if len(r) == 2:\n            break\n        for j in range(n):\n            if matrix[i][j] == '*':\n                r.append(i)\n                c.append(j)\n    if r[0] == r[1]:\n        if r[0] == 0:\n            matrix[1] = matrix[0]\n        else:\n            matrix[r[0] - 1] = matrix[r[0]]\n    elif c[0] == c[1]:\n        string = ''\n        if c[0] == 0:\n            for i in range(n):\n                if i == c[0] or i == c[0] + 1:\n                    string += '*'\n                else:\n                    string += '.'\n        else:\n            for i in range(n):\n                if i == c[0] or i == c[0] - 1:\n                    string += '*'\n                else:\n                    string += '.'\n        matrix[r[0]] = string\n        matrix[r[1]] = string\n    else:\n        string = ''\n        for i in range(n):\n            if i == c[0] or i == c[1]:\n                string += '*'\n            else:\n                string += '.'\n        matrix[r[0]] = string\n        matrix[r[1]] = string\n    return matrix\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        arr = input()\n        matrix.append(arr)\n    matrix = soln(matrix, n)\n    for i in matrix:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    g = []\n    cnt = 0\n    xy = []\n    for i in range(n):\n        a = list(input())\n        g.append(a)\n        if cnt == 0:\n            if '*' in a:\n                t = a.index('*')\n                xy.append(t)\n                xy.append(i)\n                p = t\n                if '*' in a[t + 1:]:\n                    t = a[t + 1:].index('*')\n                    xy.append(t + p + 1)\n                    xy.append(i)\n                    cnt = cnt + 1\n                cnt = cnt + 1\n        elif cnt == 1:\n            if '*' in a:\n                xy.append(a.index('*'))\n                xy.append(i)\n    if xy[0] == xy[2]:\n        try:\n            g[xy[1]][xy[0] + 1] = '*'\n            g[xy[3]][xy[2] + 1] = '*'\n        except IndexError:\n            g[xy[1]][xy[0] - 1] = '*'\n            g[xy[3]][xy[2] - 1] = '*'\n    elif xy[1] == xy[3]:\n        try:\n            g[xy[1] + 1][xy[0]] = '*'\n            g[xy[1] + 1][xy[2]] = '*'\n        except IndexError:\n            g[xy[1] - 1][xy[0]] = '*'\n            g[xy[1] - 1][xy[2]] = '*'\n    else:\n        g[xy[1]][xy[2]] = '*'\n        g[xy[3]][xy[0]] = '*'\n    for i in range(n):\n        print(''.join(g[i]))", "def solve(n, grid):\n    stars = list()\n    for (i, row) in enumerate(grid):\n        for (j, cell) in enumerate(row):\n            if cell == '*':\n                stars.append((i, j))\n    assert len(stars) == 2\n    ((r1, c1), (r2, c2)) = stars\n    if r1 != r2 and c1 != c2:\n        grid[r1][c2] = '*'\n        grid[r2][c1] = '*'\n    elif r1 == r2 and c1 != c2:\n        new_row = 1 if r1 == 0 else 0\n        grid[new_row][c1] = '*'\n        grid[new_row][c2] = '*'\n    else:\n        new_col = 1 if c1 == 0 else 0\n        grid[r1][new_col] = '*'\n        grid[r2][new_col] = '*'\n    return grid\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        grid = [list(input()) for _ in range(n)]\n        ans = solve(n, grid)\n        for row in ans:\n            print(''.join(row))\nmain()", "n = int(input())\n\ndef solve(l):\n    coord = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][j] == '*':\n                coord.append((i, j))\n    return coord\nfor i in range(n):\n    a = int(input())\n    l = []\n    for i in range(a):\n        l.append(list(input()))\n    c = solve(l)\n    x = c[0][0]\n    y = c[0][1]\n    x2 = c[1][0]\n    y2 = c[1][1]\n    if x != x2 and y != y2:\n        l[x][y2] = '*'\n        l[x2][y] = '*'\n    elif x == x2:\n        if x == a - 1:\n            l[x - 1][y2] = '*'\n            l[x2 - 1][y] = '*'\n        else:\n            l[x + 1][y2] = '*'\n            l[x2 + 1][y] = '*'\n    elif y == y2:\n        if y == a - 1:\n            l[x][y2 - 1] = '*'\n            l[x2][y - 1] = '*'\n        else:\n            l[x][y2 + 1] = '*'\n            l[x2][y + 1] = '*'\n    for k in range(len(l)):\n        print(''.join(l[k]))", "def main():\n    N = int(input())\n    S = []\n    Coor = []\n    for i in range(N):\n        s = input()\n        S.append(list(s))\n        for j in range(N):\n            if s[j] == '*':\n                Coor.append((i, j))\n    (H1, W1) = Coor[0]\n    (H2, W2) = Coor[1]\n    if H1 == H2:\n        if H1 + 1 < N:\n            S[H1 + 1][W1] = '*'\n            S[H2 + 1][W2] = '*'\n        else:\n            S[H1 - 1][W1] = '*'\n            S[H2 - 1][W2] = '*'\n    elif W1 == W2:\n        if W1 + 1 < N:\n            S[H1][W1 + 1] = '*'\n            S[H2][W2 + 1] = '*'\n        else:\n            S[H1][W1 - 1] = '*'\n            S[H2][W2 - 1] = '*'\n    else:\n        S[H1][W2] = '*'\n        S[H2][W1] = '*'\n    for i in S:\n        print(''.join(i))\nT = int(input())\nfor _ in range(T):\n    main()", "p = int(input())\nfor i in range(p):\n    n = int(input())\n    main = []\n    row_col = []\n    for row in range(n):\n        temp = list(input())\n        main.append(temp)\n        if len(row_col) < 2:\n            indexes = [i for (i, x) in enumerate(temp) if x == '*']\n            if len(indexes) == 1:\n                row_col.append((row, indexes[0]))\n            elif len(indexes) == 2:\n                row_col = [(row, indexes[0]), (row, indexes[1])]\n    if row_col[0][0] == row_col[1][0]:\n        new_row = 0 if row_col[0][0] != 0 else 1\n        main[new_row][row_col[0][1]] = '*'\n        main[new_row][row_col[1][1]] = '*'\n    elif row_col[0][1] == row_col[1][1]:\n        new_column = 0 if row_col[0][1] != 0 else 1\n        main[row_col[0][0]][new_column] = '*'\n        main[row_col[1][0]][new_column] = '*'\n    else:\n        main[row_col[0][0]][row_col[0][1]] = '*'\n        main[row_col[0][0]][row_col[1][1]] = '*'\n        main[row_col[1][0]][row_col[0][1]] = '*'\n        main[row_col[1][0]][row_col[1][1]] = '*'\n    for i in main:\n        print(''.join(i))", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(s)\n        if '*' in s and s.count('*') == 1:\n            l.append([i, s.index('*'), s])\n        elif '*' in s and s.count('*') == 2:\n            l.append([i, s])\n    if len(l) == 2:\n        if l[0][1] != l[1][1]:\n            new = ''\n            for (x, y) in zip(l[0][2], l[1][2]):\n                if x != y:\n                    new = new + '*'\n                else:\n                    new = new + '.'\n        else:\n            new = ''\n            c = 1\n            for (x, y) in zip(l[0][2], l[1][2]):\n                if x == y == '.' and c:\n                    new = new + '*'\n                    c = 0\n                elif x == y == '*':\n                    new = new + '*'\n                else:\n                    new = new + '.'\n        arr[l[0][0]] = new\n        arr[l[1][0]] = new\n        for i in arr:\n            print(i)\n    else:\n        c = 1\n        for i in arr:\n            if i != l[0][1] and c:\n                print(l[0][1])\n                c = 0\n            else:\n                print(i)", "results = []\nfor i in range(int(input())):\n    n = int(input())\n    matrix = []\n    c = []\n    row = []\n    for j in range(n):\n        row = input()\n        matrix.append(list(row))\n    rect_length = 0\n    c = [[e, f] for e in range(n) for f in range(n) if matrix[e][f] == '*']\n    (x1, y1, x2, y2) = (c[0][0], c[0][1], c[1][0], c[1][1])\n    if c[0][::-1] == c[1] or (x1 == y1 and x2 == y2) or (x1 != x2 and y1 != y2):\n        matrix[x1][y2] = '*'\n        matrix[x2][y1] = '*'\n    elif x1 == x2:\n        x3 = x1 + 1 if x1 == 0 else x1 - 1\n        matrix[x3][y1] = '*'\n        matrix[x3][y2] = '*'\n    elif y1 == y2:\n        y3 = y1 + 1 if y1 == 0 else y1 - 1\n        matrix[x1][y3] = '*'\n        matrix[x2][y3] = '*'\n    results.append(matrix)\nfor m in results:\n    for ro in m:\n        print(''.join(ro))", "t = int(input())\nfor i in range(t):\n    l = int(input())\n    matrix = []\n    p = []\n    for i in range(l):\n        x = list(str(input()))\n        matrix.append(x)\n        for j in range(l):\n            if matrix[i][j] == '*':\n                p.append((i, j))\n    (r1, c1) = (p[0][0], p[0][1])\n    (r2, c2) = (p[1][0], p[1][1])\n    if c1 == c2:\n        if c1 == 0:\n            matrix[r1][1] = '*'\n            matrix[r2][1] = '*'\n        else:\n            matrix[r1][0] = '*'\n            matrix[r2][0] = '*'\n    elif r1 == r2:\n        if r1 == 0:\n            matrix[1][c1] = '*'\n            matrix[1][c2] = '*'\n        else:\n            matrix[0][c1] = '*'\n            matrix[0][c2] = '*'\n    else:\n        matrix[r1][c2] = '*'\n        matrix[r2][c1] = '*'\n    for i in range(l):\n        print(''.join(matrix[i]))", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        s = list(input())\n        arr.append(s)\n    temp = []\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == '*':\n                temp.append([i, j])\n    (x1, y1) = (temp[0][0], temp[0][1])\n    (x2, y2) = (temp[1][0], temp[1][1])\n    if x1 == x2:\n        if x1 + 1 < n:\n            arr[x1 + 1][y1] = '*'\n            arr[x2 + 1][y2] = '*'\n        elif x1 - 1 >= 0:\n            arr[x1 - 1][y1] = '*'\n            arr[x2 - 1][y2] = '*'\n    elif y1 == y2:\n        if y1 + 1 < n:\n            arr[x1][y1 + 1] = '*'\n            arr[x2][y2 + 1] = '*'\n        elif y1 - 1 >= 0:\n            arr[x1][y1 - 1] = '*'\n            arr[x2][y2 - 1] = '*'\n    else:\n        arr[x1][y2] = '*'\n        arr[x2][y1] = '*'\n    for i in range(n):\n        print(''.join(arr[i]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    field = [[0] for _ in range(n)]\n    dots = [[0, 0], [0, 0]]\n    di = 0\n    for i in range(n):\n        field[i] = list(input())\n        for j in range(n):\n            if '*' == field[i][j]:\n                dots[di] = (i, j)\n                di += 1\n    if dots[0][0] != dots[1][0] and dots[0][1] != dots[1][1]:\n        field[dots[0][0]][dots[1][1]] = '*'\n        field[dots[1][0]][dots[0][1]] = '*'\n    elif dots[0][0] == dots[1][0]:\n        if dots[0][0] != n - 1:\n            field[dots[0][0] + 1][dots[0][1]] = '*'\n            field[dots[1][0] + 1][dots[1][1]] = '*'\n        else:\n            field[dots[0][0] - 1][dots[0][1]] = '*'\n            field[dots[0][0] - 1][dots[1][1]] = '*'\n    elif dots[0][1] == dots[1][1]:\n        if dots[0][1] != n - 1:\n            field[dots[0][0]][dots[0][1] + 1] = '*'\n            field[dots[1][0]][dots[1][1] + 1] = '*'\n        else:\n            field[dots[0][0]][dots[0][1] - 1] = '*'\n            field[dots[1][0]][dots[1][1] - 1] = '*'\n    for i in range(n):\n        print(''.join(field[i]))", "mas = list(map(int, input().split()))\nt = mas[0]\nfor j in range(t):\n    mas = list(map(int, input().split()))\n    n = mas[0]\n    lst = []\n    res = []\n    for k in range(n):\n        mas = list(map(str, input().split()))\n        mas = mas[0]\n        lst = lst + [list(mas)]\n        ind = mas.find('*')\n        while ind > -1:\n            res = res + [[k, ind]]\n            ind = mas.find('*', ind + 1)\n    if res[0][0] != res[1][0] and res[0][1] != res[1][1]:\n        res = res + [[res[0][0], res[1][1]]] + [[res[1][0], res[0][1]]]\n    elif res[0][0] != res[1][0]:\n        if res[0][1] == n - 1:\n            res = res + [[res[0][0], res[0][1] - 1]] + [[res[1][0], res[0][1] - 1]]\n        else:\n            res = res + [[res[0][0], res[0][1] + 1]] + [[res[1][0], res[0][1] + 1]]\n    elif res[0][1] != res[1][1]:\n        if res[0][0] == n - 1:\n            res = res + [[res[0][0] - 1, res[0][1]]] + [[res[0][0] - 1, res[1][1]]]\n        else:\n            res = res + [[res[0][0] + 1, res[0][1]]] + [[res[0][0] + 1, res[1][1]]]\n    for k in range(4):\n        lst[res[k][0]][res[k][1]] = '*'\n    for k in range(n):\n        print(''.join(lst[k]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    matrix = []\n    cords = []\n    for i in range(n):\n        matrix.append(list(input()))\n        for j in range(len(matrix[-1])):\n            if matrix[i][j] == '*':\n                cords.append([i, j])\n    (x1, y1) = cords[0]\n    (x2, y2) = cords[1]\n    cords.append(cords[0])\n    cords.append(cords[1])\n    if x1 == x2:\n        cords[2][0] = (cords[2][0] + 1) % n\n        cords[3][0] = (cords[3][0] + 1) % n\n    elif y1 == y2:\n        cords[2][1] = (cords[2][1] + 1) % n\n        cords[3][1] = (cords[3][1] + 1) % n\n    else:\n        (cords[2][0], cords[3][0]) = (cords[3][0], cords[2][0])\n    matrix[cords[2][0]][cords[2][1]] = '*'\n    matrix[cords[3][0]][cords[3][1]] = '*'\n    for i in range(n):\n        print(''.join(matrix[i]))", "for _ in range(0, int(input())):\n    n = int(input())\n    c = []\n    for i in range(0, n):\n        s = input()\n        c += [[i, w] for (w, x) in enumerate(s) if x == '*']\n    ofr = 0\n    ofc = 0\n    if c[0][0] == c[1][0]:\n        ofr = -1 if c[0][0] > 0 else 1\n    if c[0][1] == c[1][1]:\n        ofc = -1 if c[0][1] > 0 else 1\n    c.append([c[0][0] + ofr, c[1][1] + ofc])\n    c.append([c[1][0] + ofr, c[0][1] + ofc])\n    d = []\n    for w in range(0, n):\n        v = ['.'] * n\n        for x in c:\n            if w == x[0]:\n                v[x[1]] = '*'\n        d.append(v)\n    for w in d:\n        print(''.join(w))", "m = int(input())\nu = []\nfor _ in range(m):\n    a = int(input())\n    l = []\n    for i in range(a):\n        l.append(list(input()))\n    s = 0\n    t = []\n    for i in range(a):\n        if l[i].count('*') > 0:\n            for j in range(a):\n                if l[i][j] == '*':\n                    t.append([i, j])\n                    s += 1\n                if s == 2:\n                    break\n            if s == 2:\n                break\n    if t[0][1] == t[1][1]:\n        if t[0][1] == a - 1:\n            l[t[0][0]][t[1][1] - 1] = '*'\n            l[t[1][0]][t[0][1] - 1] = '*'\n        else:\n            l[t[0][0]][t[1][1] + 1] = '*'\n            l[t[1][0]][t[0][1] + 1] = '*'\n    elif t[0][0] == t[1][0]:\n        if t[0][0] == a - 1:\n            l[t[0][0] - 1][t[0][1]] = '*'\n            l[t[1][0] - 1][t[1][1]] = '*'\n        else:\n            l[t[0][0] + 1][t[0][1]] = '*'\n            l[t[1][0] + 1][t[1][1]] = '*'\n    else:\n        l[t[0][0]][t[1][1]] = '*'\n        l[t[1][0]][t[0][1]] = '*'\n    s = ''\n    for i in l:\n        s += ''.join(i) + '\\n'\n    u.append(s[:-1])\nfor i in u:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    g = []\n    c = []\n    for i in range(n):\n        temp = list(input())\n        if '*' in temp:\n            c.append([i, temp.index('*')])\n            if temp.count('*') == 2:\n                c.append([i, temp.index('*', c[0][1] + 1)])\n        g.append(temp)\n    a = c[0]\n    b = c[1]\n    if a[0] == b[0]:\n        if a[0] < n - 1:\n            g[a[0] + 1][a[1]] = '*'\n            g[a[0] + 1][b[1]] = '*'\n        else:\n            g[a[0] - 1][a[1]] = '*'\n            g[a[0] - 1][b[1]] = '*'\n    elif a[1] == b[1]:\n        if a[1] < n - 1:\n            g[a[0]][a[1] + 1] = '*'\n            g[b[0]][b[1] + 1] = '*'\n        else:\n            g[a[0]][a[1] - 1] = '*'\n            g[b[0]][b[1] - 1] = '*'\n    else:\n        g[a[0]][b[1]] = '*'\n        g[b[0]][a[1]] = '*'\n    for i in range(n):\n        print(''.join(g[i]))", "q = int(input())\nfor i in range(q):\n    x = int(input())\n    a = []\n    for i in range(x):\n        a.append(list(input()))\n    b = []\n    for i in range(x):\n        for j in range(x):\n            if a[i][j] == '*':\n                b.append([i, j])\n    if b[0][0] == b[1][0]:\n        if b[0][0] + 1 < x:\n            a[b[0][0] + 1][b[0][1]] = '*'\n        else:\n            a[b[0][0] - 1][b[0][1]] = '*'\n        if b[1][0] + 1 < x:\n            a[b[1][0] + 1][b[1][1]] = '*'\n        else:\n            a[b[1][0] - 1][b[1][1]] = '*'\n    elif b[0][1] == b[1][1]:\n        if b[0][1] + 1 < x:\n            a[b[0][0]][b[0][1] + 1] = '*'\n        else:\n            a[b[0][0]][b[0][1] - 1] = '*'\n        if b[1][1] + 1 < x:\n            a[b[1][0]][b[1][1] + 1] = '*'\n        else:\n            a[b[1][0]][b[1][1] - 1] = '*'\n    else:\n        a[b[0][0]][b[1][1]] = '*'\n        a[b[1][0]][b[0][1]] = '*'\n    for i in range(x):\n        print(''.join(a[i]))", "for _ in range(int(input())):\n    n = int(input())\n    g = [list(input()) for _ in range(n)]\n    (r1, c1, r2, c2) = (-1, -1, -1, -1)\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == '*':\n                if r1 < 0:\n                    (r1, c1) = (i, j)\n                else:\n                    (r2, c2) = (i, j)\n    if r1 == r2:\n        r = (r1 + 1) % n\n        g[r][c1] = g[r][c2] = '*'\n    elif c1 == c2:\n        c = (c1 + 1) % n\n        g[r1][c] = g[r2][c] = '*'\n    else:\n        g[min(r1, r2)][min(c1, c2)] = g[min(r1, r2)][max(c1, c2)] = g[max(r1, r2)][min(c1, c2)] = g[max(r1, r2)][max(c1, c2)] = '*'\n    for v in g:\n        print(''.join(v))", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    arr = []\n    row = []\n    column = []\n    for j in range(n):\n        text = input()\n        text = list(text)\n        if '*' in text:\n            for z in range(n):\n                if text[z] == '*':\n                    row.append(j)\n                    column.append(z)\n        arr.append(text)\n    if row[0] == row[1]:\n        if row[0] > 0:\n            row[0] -= 1\n            row[1] -= 1\n        elif row[0] < n - 1:\n            row[0] += 1\n            row[1] += 1\n    elif column[0] == column[1]:\n        if column[0] > 0:\n            column[0] -= 1\n            column[1] -= 1\n        elif column[0] < n - 1:\n            column[0] += 1\n            column[1] += 1\n    else:\n        temp = row[0]\n        row[0] = row[1]\n        row[1] = temp\n    arr[row[0]][column[0]] = '*'\n    arr[row[1]][column[1]] = '*'\n    for k in range(n):\n        print(''.join(arr[k]))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [list(input().strip()) for i in range(n)]\n    mx = int(1000000000.0)\n    Mx = -1\n    my = int(1000000000.0)\n    My = -1\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                mx = min(mx, i)\n                Mx = max(Mx, i)\n                my = min(my, j)\n                My = max(My, j)\n    if mx == Mx:\n        if mx > 0:\n            mx -= 1\n        else:\n            Mx += 1\n    if my == My:\n        if my > 0:\n            my -= 1\n        else:\n            My += 1\n    a[mx][my] = '*'\n    a[mx][My] = '*'\n    a[Mx][my] = '*'\n    a[Mx][My] = '*'\n    for i in a:\n        print(''.join(i))\nfor i in range(int(input())):\n    solve()", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    G = []\n    for i in range(N):\n        G.append(list(input()))\n    can = []\n    (X, Y) = (set(), set())\n    for i in range(N):\n        for j in range(N):\n            if G[i][j] == '*':\n                can.append((i, j))\n                X.add(i)\n                Y.add(j)\n    if len(X) == 2 and len(Y) == 2:\n        G[min(X)][max(Y)] = '*'\n        G[max(X)][min(Y)] = '*'\n        G[min(X)][min(Y)] = '*'\n        G[max(X)][max(Y)] = '*'\n    elif len(X) == 1:\n        for next_x in range(N):\n            if next_x not in X:\n                G[next_x][max(Y)] = '*'\n                G[next_x][min(Y)] = '*'\n                break\n    else:\n        for next_y in range(N):\n            if next_y not in Y:\n                G[min(X)][next_y] = '*'\n                G[max(X)][next_y] = '*'\n                break\n    for i in range(N):\n        print(''.join(G[i]))", "from collections import *\nTT = int(input())\nfor y in range(TT):\n    n = int(input())\n    lst = []\n    arr = []\n    for i in range(n):\n        lst.append(list(input()))\n        for j in range(n):\n            if lst[i][j] == '*':\n                arr.append([i, j])\n    a = arr[0][0]\n    b = arr[0][1]\n    c = arr[1][0]\n    d = arr[1][1]\n    lst[a][b] = '*'\n    lst[a][d] = '*'\n    lst[c][b] = '*'\n    lst[c][d] = '*'\n    if a == c:\n        if a == 0:\n            c = 1\n            lst[a][b] = '*'\n            lst[a][d] = '*'\n            lst[c][b] = '*'\n            lst[c][d] = '*'\n        else:\n            c = 0\n            lst[a][b] = '*'\n            lst[a][d] = '*'\n            lst[c][b] = '*'\n            lst[c][d] = '*'\n    if b == d:\n        if b == 0:\n            d = 1\n            lst[a][b] = '*'\n            lst[a][d] = '*'\n            lst[c][b] = '*'\n            lst[c][d] = '*'\n        else:\n            d = 0\n            lst[a][b] = '*'\n            lst[a][d] = '*'\n            lst[c][b] = '*'\n            lst[c][d] = '*'\n    for i in lst:\n        print(''.join(i))", "def printField(field):\n    for line in field:\n        print(''.join(line))\nfor t in range(int(input())):\n    n = int(input())\n    field = []\n    for i in range(n):\n        field.append(list(input()))\n    asterixes = []\n    for y in range(len(field)):\n        for x in range(len(field[y])):\n            if field[y][x] == '*':\n                asterixes.append((y, x))\n    a = asterixes[0]\n    b = asterixes[1]\n    if a[0] != b[0] and a[1] != b[1]:\n        field[a[0]][b[1]] = '*'\n        field[b[0]][a[1]] = '*'\n        printField(field)\n        continue\n    else:\n        if a[0] == b[0]:\n            cy = a[0] - 1\n            if cy < 0:\n                cy += 2\n            field[cy][b[1]] = '*'\n            field[cy][a[1]] = '*'\n        else:\n            cx = a[1] - 1\n            if cx < 0:\n                cx += 2\n            field[a[0]][cx] = '*'\n            field[b[0]][cx] = '*'\n        printField(field)\n        continue", "import math\nfrom collections import defaultdict\nfrom sys import stdout\nDEBUG = True\n\ndef log(*args, **kwargs):\n    if DEBUG:\n        print(*args, **kwargs)\n\ndef ri():\n    return int(input())\n\ndef rl(f=int):\n    return list(map(f, input().split()))\n\ndef rs():\n    return input()\n\nclass Solution:\n\n    def __init__(self):\n        pass\n\n    def run(self):\n        points = []\n        n = ri()\n        grid = []\n        for i in range(n):\n            row = list(rs())\n            grid.append(row)\n            for j in range(len(row)):\n                if row[j] == '*':\n                    points.append([i, j])\n        if points[0][0] == points[1][0]:\n            x = points[0][0]\n            (a, b) = (points[0][1], points[1][1])\n            grid[(x + 1) % n][a] = '*'\n            grid[(x + 1) % n][b] = '*'\n        elif points[0][1] == points[1][1]:\n            y = points[0][1]\n            (a, b) = (points[0][0], points[1][0])\n            grid[a][(y + 1) % n] = '*'\n            grid[b][(y + 1) % n] = '*'\n        else:\n            (x, y) = points[0]\n            (a, b) = points[1]\n            grid[x][b] = '*'\n            grid[a][y] = '*'\n        for r in grid:\n            print(''.join(r))\nt = int(input())\ns = Solution()\nfor i in range(t):\n    s.run()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(list(s))\n    pts = []\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                pts.append((i, j))\n    (x1, y1) = pts.pop()\n    (x2, y2) = pts.pop()\n    if x1 == x2:\n        if x1 > 0:\n            a[x1 - 1][y1] = '*'\n            a[x2 - 1][y2] = '*'\n        else:\n            a[x1 + 1][y1] = '*'\n            a[x2 + 1][y2] = '*'\n    elif y1 == y2:\n        if y1 > 0:\n            a[x1][y1 - 1] = '*'\n            a[x2][y2 - 1] = '*'\n        else:\n            a[x1][y1 + 1] = '*'\n            a[x2][y2 + 1] = '*'\n    else:\n        a[x1][y2] = '*'\n        a[x2][y1] = '*'\n    for i in range(n):\n        print(''.join(a[i]))", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        e = input()\n        l.append(list(e))\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == '*':\n                ans.append([i, j])\n    (x1, y1) = (ans[0][0], ans[0][1])\n    (x2, y2) = (ans[1][0], ans[1][1])\n    if x1 == x2:\n        if x1 + 1 < n:\n            l[x1 + 1][y1] = '*'\n            l[x2 + 1][y2] = '*'\n        else:\n            l[x1 - 1][y1] = '*'\n            l[x2 - 1][y2] = '*'\n    elif y1 == y2:\n        if y1 + 1 < n:\n            l[x1][y1 + 1] = '*'\n            l[x2][y2 + 1] = '*'\n        else:\n            l[x1][y1 - 1] = '*'\n            l[x2][y2 - 1] = '*'\n    else:\n        l[x1][y2] = '*'\n        l[x2][y1] = '*'\n    for k in l:\n        print(''.join(k))", "for _ in range(int(input())):\n    n = int(input())\n    a = [[c for c in l] for l in [input() for __ in range(n)]]\n    r1 = c1 = r2 = c2 = -1\n    for (r, l) in enumerate(a):\n        for (c, e) in enumerate(l):\n            if e == '*':\n                if r1 == -1:\n                    r1 = r\n                    c1 = c\n                else:\n                    r2 = r\n                    c2 = c\n                    break\n    if r1 == r2:\n        if r1 > 0:\n            a[r1 - 1][c1] = '*'\n            a[r1 - 1][c2] = '*'\n        else:\n            a[r1 + 1][c1] = '*'\n            a[r1 + 1][c2] = '*'\n    elif c1 == c2:\n        if c1 > 0:\n            a[r1][c1 - 1] = '*'\n            a[r2][c1 - 1] = '*'\n        else:\n            a[r1][c1 + 1] = '*'\n            a[r2][c1 + 1] = '*'\n    else:\n        a[r1][c2] = '*'\n        a[r2][c1] = '*'\n    for l in a:\n        print(''.join(l))", "for _ in range(int(input())):\n    n = int(input())\n    graph = []\n    data = []\n    for i in range(n):\n        tmp = list(input())\n        graph.append(tmp)\n        if '*' in tmp:\n            for j in range(len(tmp)):\n                if tmp[j] == '*':\n                    data.append((i, j))\n    (x1, y1) = data[0]\n    (x2, y2) = data[1]\n    if x1 == x2:\n        if x1 + 1 < n - 1:\n            graph[x1 + 1][y1] = '*'\n            graph[x2 + 1][y2] = '*'\n        else:\n            graph[x1 - 1][y1] = '*'\n            graph[x2 - 1][y2] = '*'\n    elif y1 == y2:\n        if y1 + 1 < n - 1:\n            graph[x1][y1 + 1] = '*'\n            graph[x2][y2 + 1] = '*'\n        else:\n            graph[x1][y1 - 1] = '*'\n            graph[x2][y2 - 1] = '*'\n    else:\n        graph[min(x1, x2)][min(y1, y2)] = '*'\n        graph[max(x1, x2)][min(y1, y2)] = '*'\n        graph[min(x1, x2)][max(y1, y2)] = '*'\n        graph[max(x1, x2)][max(y1, y2)] = '*'\n    for line in graph:\n        print(''.join(line))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        x = list(input())\n        arr.append(x)\n    row1 = -1\n    row2 = -1\n    col1 = -1\n    col2 = -1\n    c = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i][j] == '*':\n                if row1 == -1 and col1 == -1:\n                    row1 = i\n                    col1 = j\n                else:\n                    row2 = i\n                    col2 = j\n                    c = 1\n                    break\n        if c == 1:\n            break\n    if col1 == col2:\n        if col1 == 0:\n            col1 += 1\n            col2 += 1\n        else:\n            col1 -= 1\n            col2 -= 1\n    if row1 == row2:\n        if row1 == 0:\n            row1 += 1\n            row2 += 1\n        else:\n            row2 -= 1\n            row1 -= 1\n    arr[row1][col2] = '*'\n    arr[row2][col1] = '*'\n    for i in arr:\n        print(''.join(i))", "from collections import Counter\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    a = [list(input()) for i in range(n)]\n    st = []\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                st.append((i, j))\n    if st[0][0] != st[1][0] and st[0][1] != st[1][1]:\n        a[st[0][0]][st[1][1]] = a[st[1][0]][st[0][1]] = '*'\n    elif st[0][0] == st[1][0]:\n        if st[0][0] == 0:\n            rrcc = 1\n        else:\n            rrcc = st[0][0] - 1\n        a[rrcc][st[0][1]] = a[rrcc][st[1][1]] = '*'\n    else:\n        if st[0][1] == 0:\n            rrcc = 1\n        else:\n            rrcc = st[0][1] - 1\n        a[st[0][0]][rrcc] = a[st[1][0]][rrcc] = '*'\n    a = [''.join(k) for k in a]\n    print(*a, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    s1 = []\n    s2 = []\n    for i in range(n):\n        x = input()\n        for (z, j) in enumerate(x):\n            if j == '*':\n                if not s1:\n                    s1 = [i, z]\n                else:\n                    s2 = [i, z]\n        a.append(list(x))\n    if s1[0] == s2[0]:\n        a[(s1[0] + 1) % n][s1[1]] = '*'\n        a[(s1[0] + 1) % n][s2[1]] = '*'\n    elif s1[1] == s2[1]:\n        a[s1[0]][(s1[1] + 1) % n] = '*'\n        a[s2[0]][(s2[1] + 1) % n] = '*'\n    else:\n        a[s1[0]][s2[1]] = '*'\n        a[s2[0]][s1[1]] = '*'\n    for i in a:\n        print(''.join(i))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(input())\n    x = []\n    y = []\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                x.append(i)\n                y.append(j)\n    if x[0] == x[1]:\n        i = 0\n        while i == x[0]:\n            i += 1\n        mi = min(y[0], y[1])\n        ma = max(y[0], y[1])\n        a[i] = a[i][0:mi] + '*' + a[i][mi + 1:ma] + '*' + a[i][ma + 1:]\n    elif y[0] == y[1]:\n        j = 0\n        while j == y[0]:\n            j += 1\n        a[x[0]] = a[x[0]][:j] + '*' + a[x[0]][j + 1:]\n        a[x[1]] = a[x[1]][:j] + '*' + a[x[1]][j + 1:]\n    else:\n        a[x[0]] = a[x[0]][:y[1]] + '*' + a[x[0]][y[1] + 1:]\n        a[x[1]] = a[x[1]][:y[0]] + '*' + a[x[1]][y[0] + 1:]\n    for i in range(n):\n        print(a[i])", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for x in range(n):\n        s = list(input())\n        arr.append(s)\n    req = []\n    for x in range(len(arr)):\n        for y in range(len(arr[0])):\n            if arr[x][y] == '*':\n                req.append((x, y))\n    if req[0][0] != req[1][0] and req[0][1] != req[1][1]:\n        arr[req[0][0]][req[1][1]] = '*'\n        arr[req[1][0]][req[0][1]] = '*'\n    elif req[0][0] == req[1][0]:\n        if req[0][0] < n - 1:\n            arr[req[0][0] + 1][req[0][1]] = '*'\n            arr[req[1][0] + 1][req[1][1]] = '*'\n        else:\n            arr[req[0][0] - 1][req[0][1]] = '*'\n            arr[req[1][0] - 1][req[1][1]] = '*'\n    elif req[0][1] == req[1][1]:\n        if req[0][1] < n - 1:\n            arr[req[0][0]][req[0][1] + 1] = '*'\n            arr[req[1][0]][req[1][1] + 1] = '*'\n        else:\n            arr[req[0][0]][req[0][1] - 1] = '*'\n            arr[req[1][0]][req[1][1] - 1] = '*'\n    for i in range(n):\n        print(''.join(arr[i]))", "import sys\nrd = sys.stdin.readline\nt = int(rd())\nfor _ in range(t):\n    n = int(rd())\n    a = [list(list(rd().strip())) for _ in range(n)]\n    x = set()\n    y = set()\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '*':\n                x.add(i)\n                y.add(j)\n    if len(x) != 2:\n        for i in range(n):\n            if i not in x:\n                x.add(i)\n                break\n    if len(y) != 2:\n        for j in range(n):\n            if j not in y:\n                y.add(j)\n                break\n    for i in x:\n        for j in y:\n            a[i][j] = '*'\n    for i in range(n):\n        print(''.join(a[i]))", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(list(input()))\n    x1 = -1\n    y1 = -1\n    x2 = -1\n    y2 = -1\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '*':\n                if x1 == -1:\n                    x1 = i\n                    y1 = j\n                else:\n                    x2 = i\n                    y2 = j\n    if x1 != x2 and y1 != y2:\n        s[x1][y2] = '*'\n        s[x2][y1] = '*'\n    elif x1 == x2:\n        x2 = (x1 + 1) % n\n        s[x2][y1] = '*'\n        s[x2][y2] = '*'\n    elif y1 == y2:\n        y2 = (y1 + 1) % n\n        s[x1][y2] = '*'\n        s[x2][y2] = '*'\n    for i in range(n):\n        print(''.join(s[i]))", "import sys\nn = int(input())\nfor i in range(n):\n    t = int(input())\n    minx = 1000000000.0\n    maxx = -1\n    miny = 1000000000.0\n    maxy = -1\n    lines = []\n    for j in range(t):\n        line = input()\n        lines.append(list(line))\n        for k in range(t):\n            if line[k] == '*':\n                if j >= maxx:\n                    maxx = j\n                if j <= minx:\n                    minx = j\n                if k >= maxy:\n                    maxy = k\n                if k <= miny:\n                    miny = k\n    if miny == maxy:\n        if miny < k - 1:\n            maxy = miny + 1\n        else:\n            miny = miny - 1\n    if minx == maxx:\n        if minx < k - 1:\n            maxx = minx + 1\n        else:\n            minx = minx - 1\n    lines[minx][miny] = '*'\n    lines[minx][maxy] = '*'\n    lines[maxx][miny] = '*'\n    lines[maxx][maxy] = '*'\n    for l in lines:\n        print(''.join(l))", "def mapa(A, N):\n    A = list(map(list, A))\n    (p1, p2) = (None, None)\n    for i in range(N):\n        for j in range(N):\n            if A[i][j] == '*':\n                if p1 == None:\n                    p1 = (i, j)\n                else:\n                    p2 = (i, j)\n    if p1[0] == p2[0]:\n        if p1[0] != N - 1:\n            A[p1[0] + 1][p1[1]] = '*'\n            A[p1[0] + 1][p2[1]] = '*'\n            return A\n        else:\n            A[p1[0] - 1][p1[1]] = '*'\n            A[p1[0] - 1][p2[1]] = '*'\n            return A\n    if p1[1] == p2[1]:\n        if p1[1] != N - 1:\n            A[p1[0]][p1[1] + 1] = '*'\n            A[p2[0]][p2[1] + 1] = '*'\n            return A\n        else:\n            A[p1[0]][p1[1] - 1] = '*'\n            A[p2[0]][p2[1] - 1] = '*'\n            return A\n    else:\n        A[p1[0]][p2[1]] = '*'\n        A[p2[0]][p1[1]] = '*'\n        return A\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = []\n        for i in range(n):\n            a.append(input())\n        for wyn in mapa(a, n):\n            print(''.join(wyn))\nmain()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    q = 0\n    (l, x, y) = ([], [], [])\n    for i in range(n):\n        s = input()\n        l.append(s)\n        if q < 2:\n            for j in range(n):\n                if s[j] == '*':\n                    x.append(i)\n                    y.append(j)\n                    q += 1\n    (x1, y1) = (x[0], y[0])\n    (x2, y2) = (x[1], y[1])\n    if y1 != y2 and x1 != x2:\n        l[x1] = l[x1][:y2] + '*' + l[x1][y2 + 1:]\n        l[x2] = l[x2][:y1] + '*' + l[x2][y1 + 1:]\n    elif x1 != x2:\n        if y1 != 0:\n            l[x1] = '*' + l[x1][1:]\n            l[x2] = '*' + l[x2][1:]\n        else:\n            l[x1] = '**' + l[x1][2:]\n            l[x2] = '**' + l[x2][2:]\n    elif x1 != 0:\n        l[0] = l[x1]\n    else:\n        l[1] = l[0]\n    for i in l:\n        print(i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    matrix = ['' for x in range(n)]\n    (x1, x2, y1, y2) = (1000000000.0, 0, 1000000000.0, 0)\n    (xx1, xx2, yy1, yy2) = (0, 0, 0, 0)\n    for r in range(n):\n        matrix[r] = input()\n        for c in range(n):\n            if matrix[r][c] == '*':\n                if r < x1:\n                    x1 = r\n                if r > x2:\n                    x2 = r\n                if c < y1:\n                    y1 = c\n                if c > y2:\n                    y2 = c\n    if x1 == x2:\n        if x1 < n - 1:\n            (xx1, xx2) = (x1 + 1, x1 + 1)\n        else:\n            (xx1, xx2) = (x1 - 1, x1 - 1)\n    else:\n        xx1 = min(x1, x2)\n        xx2 = max(x1, x2)\n    if y1 == y2:\n        if y1 < n - 1:\n            (yy1, yy2) = (y1 + 1, y2 + 1)\n        else:\n            (yy1, yy2) = (y1 - 1, y2 - 1)\n    else:\n        yy1 = min(y1, y2)\n        if matrix[xx1][yy1] == '*':\n            yy1 = max(y1, y2)\n            yy2 = min(y1, y2)\n        else:\n            yy2 = max(y1, y2)\n    matrix[xx1] = matrix[xx1][0:yy1] + '*' + matrix[xx1][yy1 + 1:]\n    matrix[xx2] = matrix[xx2][0:yy2] + '*' + matrix[xx2][yy2 + 1:]\n    for mx in matrix:\n        print(mx)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    p = []\n    for i in range(n):\n        for (j, char) in enumerate(l[i]):\n            if char == '*':\n                p.append([i, j])\n    if p[0][0] == p[1][0]:\n        if p[0][0] == 0:\n            l[1][p[0][1]] = '*'\n            l[1][p[1][1]] = '*'\n        else:\n            l[0][p[0][1]] = '*'\n            l[0][p[1][1]] = '*'\n    elif p[0][1] == p[1][1]:\n        if p[0][1] == 0:\n            l[p[0][0]][1] = '*'\n            l[p[1][0]][1] = '*'\n        else:\n            l[p[0][0]][0] = '*'\n            l[p[1][0]][0] = '*'\n    else:\n        l[p[0][0]][p[1][1]] = '*'\n        l[p[1][0]][p[0][1]] = '*'\n    for k in l:\n        print(''.join(k))", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    l = []\n    (a, b, c, d) = (-1, -1, -1, -1)\n    k = 0\n    for i in range(n):\n        s = input()\n        l.append(list(s))\n    for i in range(n):\n        for j in range(n):\n            if l[i][j] == '*':\n                if a == -1 and b == -1:\n                    a = i\n                    b = j\n                else:\n                    c = i\n                    d = j\n    if a == c:\n        if a + 1 < n:\n            l[a + 1][b] = '*'\n            l[c + 1][d] = '*'\n        else:\n            l[a - 1][b] = '*'\n            l[c - 1][d] = '*'\n    elif b == d:\n        if b + 1 < n:\n            l[a][b + 1] = '*'\n            l[c][d + 1] = '*'\n        else:\n            l[a][b - 1] = '*'\n            l[c][d - 1] = '*'\n    else:\n        l[c][b] = '*'\n        l[a][d] = '*'\n    for r in l:\n        print(''.join((k for k in r)))", "for _ in range(int(input())):\n    n = int(input())\n    s = [list(input().strip()) for i in range(n)]\n    cand = []\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '*':\n                cand.append([i, j])\n    if cand[0][0] != cand[1][0] and cand[0][1] != cand[1][1]:\n        s[cand[1][0]][cand[0][1]] = '*'\n        s[cand[0][0]][cand[1][1]] = '*'\n    elif cand[0][0] == cand[1][0]:\n        if 0 <= cand[0][0] + 1 < n:\n            s[cand[0][0] + 1][cand[0][1]] = '*'\n            s[cand[1][0] + 1][cand[1][1]] = '*'\n        else:\n            s[cand[0][0] - 1][cand[0][1]] = '*'\n            s[cand[1][0] - 1][cand[1][1]] = '*'\n    elif cand[0][1] == cand[1][1]:\n        if 0 <= cand[0][1] + 1 < n:\n            s[cand[0][0]][cand[0][1] + 1] = '*'\n            s[cand[1][0]][cand[0][1] + 1] = '*'\n        else:\n            s[cand[0][0]][cand[0][1] - 1] = '*'\n            s[cand[1][0]][cand[0][1] - 1] = '*'\n    for i in s:\n        print(''.join(i))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    pos = []\n    m = []\n    count = 0\n    for i in range(n):\n        a = input()\n        if count != 2:\n            for j in range(n):\n                if a[j] == '*':\n                    pos.append((i, j))\n                    count += 1\n        m.append(a)\n    r1 = pos[0][0]\n    c1 = pos[0][1]\n    r2 = pos[1][0]\n    c2 = pos[1][1]\n    if r1 == r2:\n        if r1 + 1 < n:\n            r = r1 + 1\n        else:\n            r = r1 - 1\n        if c1 < c2:\n            m[r] = m[r][0:c1] + '*' + m[r][c1 + 1:c2] + '*' + m[r][c2 + 1:]\n        else:\n            m[r] = m[r][0:c2] + '*' + m[r][c2 + 1:c1] + '*' + m[r][c1 + 1:]\n    elif c1 == c2:\n        if c1 + 1 < n:\n            c = c1 + 1\n        else:\n            c = c1 - 1\n        m[r1] = m[r1][0:c] + '*' + m[r1][c + 1:]\n        m[r2] = m[r2][0:c] + '*' + m[r2][c + 1:]\n    else:\n        m[r1] = m[r1][0:c2] + '*' + m[r1][c2 + 1:]\n        m[r2] = m[r2][0:c1] + '*' + m[r2][c1 + 1:]\n    for i in range(n):\n        print(m[i])", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        field = input()\n        arr.append(list(field))\n    posi = []\n    for y in range(n):\n        for x in range(n):\n            if arr[y][x] == '*':\n                posi.append([x, y])\n    if posi[0][0] != posi[1][0] and posi[0][1] != posi[1][1]:\n        arr[posi[1][1]][posi[0][0]] = '*'\n        arr[posi[0][1]][posi[1][0]] = '*'\n    elif posi[0][0] == posi[1][0] and posi[0][1] != posi[1][1]:\n        if posi[0][0] == n - 1:\n            arr[posi[0][1]][posi[0][0] - 1] = '*'\n            arr[posi[1][1]][posi[1][0] - 1] = '*'\n        else:\n            arr[posi[0][1]][posi[0][0] + 1] = '*'\n            arr[posi[1][1]][posi[1][0] + 1] = '*'\n    elif posi[0][1] == n - 1:\n        arr[posi[0][1] - 1][posi[0][0]] = '*'\n        arr[posi[1][1] - 1][posi[1][0]] = '*'\n    else:\n        arr[posi[0][1] + 1][posi[0][0]] = '*'\n        arr[posi[1][1] + 1][posi[1][0]] = '*'\n    for i in range(n):\n        print(''.join(arr[i]))", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    points = []\n    po = []\n    for i in range(n):\n        x = input()\n        y = []\n        for j in range(n):\n            if x[j] == '.':\n                y.append('.')\n            else:\n                y.append('*')\n                po.append(i)\n                po.append(j)\n        li.append(y)\n    if po[0] != po[2] and po[1] != po[3]:\n        li[po[0]][po[3]] = '*'\n        li[po[2]][po[1]] = '*'\n    else:\n        if po[1] == po[3]:\n            if po[1] + 1 != n:\n                li[po[0]][po[1] + 1] = '*'\n                li[po[2]][po[3] + 1] = '*'\n            else:\n                li[po[0]][po[1] - 1] = '*'\n                li[po[2]][po[3] - 1] = '*'\n        if po[0] == po[2]:\n            if po[0] + 1 != n:\n                li[po[0] + 1][po[1]] = '*'\n                li[po[2] + 1][po[3]] = '*'\n            else:\n                li[po[0] - 1][po[1]] = '*'\n                li[po[2] - 1][po[3]] = '*'\n    for i in li:\n        print(''.join(i))", "for _ in range(int(input())):\n    n = int(input())\n    t = []\n    mat = []\n    for k in range(n):\n        row = [i for i in input()]\n        mat.append(row)\n    for i in range(n):\n        for j in range(n):\n            if mat[i][j] == '*':\n                t.append((i, j))\n    x = t[0]\n    y = t[1]\n    new = []\n    if x[0] == y[0]:\n        if x[0] == n - 1:\n            new.append((x[0] - 1, x[1]))\n            new.append((y[0] - 1, y[1]))\n        else:\n            new.append((x[0] + 1, x[1]))\n            new.append((y[0] + 1, y[1]))\n    elif x[1] == y[1]:\n        if x[1] == n - 1:\n            new.append((x[0], x[1] - 1))\n            new.append((y[0], y[1] - 1))\n        else:\n            new.append((x[0], x[1] + 1))\n            new.append((y[0], y[1] + 1))\n    else:\n        new.append((x[0], y[1]))\n        new.append((y[0], x[1]))\n    mat[new[0][0]][new[0][1]] = '*'\n    mat[new[1][0]][new[1][1]] = '*'\n    for row in mat:\n        print(''.join(row))", "def solve(arr):\n    (x1, x2, y1, y2) = (None, None, None, None)\n    (x3, x4, y3, y4) = (None, None, None, None)\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == '*':\n                if x1 is not None:\n                    x2 = i\n                    y2 = j\n                else:\n                    x1 = i\n                    y1 = j\n    if x1 == x2:\n        x3 = x1 + (-1 if x1 > 0 else 1)\n        x4 = x2 + (-1 if x2 > 0 else 1)\n        y3 = y1\n        y4 = y2\n    elif y1 == y2:\n        y3 = y1 + (-1 if y1 > 0 else 1)\n        y4 = y2 + (-1 if y2 > 0 else 1)\n        x3 = x1\n        x4 = x2\n    else:\n        x3 = x1\n        y3 = y2\n        x4 = x2\n        y4 = y1\n    arr[x3][y3] = '*'\n    arr[x4][y4] = '*'\n    arr = [''.join(r) for r in arr]\n    arr = [arr[i] + ('\\n' if i + 1 != len(arr) else '') for i in range(len(arr))]\n    return ''.join(arr)\nfor i in range(int(input())):\n    arr = []\n    for _ in range(int(input())):\n        arr += [list(input())]\n    print(f'{solve(arr)}')", "for _ in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        row = input()\n        row = list(row)\n        mat.append(row)\n    p = []\n    for i in range(n):\n        for j in range(n):\n            if mat[i][j] == '*':\n                p.append((i, j))\n    if p[0][0] == p[1][0]:\n        row = p[0][0]\n        col1 = p[0][1]\n        col2 = p[1][1]\n        if row == n - 1:\n            row = row - 1\n            mat[row][col1] = '*'\n            mat[row][col2] = '*'\n        else:\n            row = row + 1\n            mat[row][col1] = '*'\n            mat[row][col2] = '*'\n    elif p[0][1] == p[1][1]:\n        col = p[0][1]\n        row1 = p[0][0]\n        row2 = p[1][0]\n        if col == n - 1:\n            col = col - 1\n            mat[row1][col] = '*'\n            mat[row2][col] = '*'\n        else:\n            col = col + 1\n            mat[row1][col] = '*'\n            mat[row2][col] = '*'\n    else:\n        row1 = p[0][0]\n        col1 = p[0][1]\n        row2 = p[1][0]\n        col2 = p[1][1]\n        mat[row2][col1] = '*'\n        mat[row1][col2] = '*'\n    for i in range(n):\n        v = ''.join(mat[i])\n        print(v)", "for _ in range(int(input())):\n    n = int(input())\n    grid = [[char for char in input()] for _ in range(n)]\n    marks = []\n    for (y, row) in enumerate(grid):\n        for (x, col) in enumerate(row):\n            if col == '*':\n                marks.append((x, y))\n    if marks[0][0] == marks[1][0]:\n        grid[marks[0][1]][(marks[0][0] + 1) % n] = '*'\n        grid[marks[1][1]][(marks[0][0] + 1) % n] = '*'\n    elif marks[0][1] == marks[1][1]:\n        grid[(marks[0][1] + 1) % n][marks[0][0]] = '*'\n        grid[(marks[1][1] + 1) % n][marks[1][0]] = '*'\n    else:\n        grid[marks[0][1]][marks[1][0]] = '*'\n        grid[marks[1][1]][marks[0][0]] = '*'\n    for row in grid:\n        print(''.join(row))", "a = eval(input())\nfor _ in range(a):\n    b = eval(input())\n    ls = []\n    for i in range(b):\n        c = input()\n        for j in range(len(c)):\n            if c[j] == '*':\n                ls.append([i, j])\n    y1 = ls[0][0]\n    x1 = ls[0][1]\n    y2 = ls[1][0]\n    x2 = ls[1][1]\n    x = []\n    y = []\n    if y1 == y2:\n        x.append(x1)\n        x.append(x2)\n        if y1 + 1 < b:\n            y.append(y1)\n            y.append(y1 + 1)\n        else:\n            y.append(y1)\n            y.append(y1 - 1)\n    elif x1 == x2:\n        y.append(y1)\n        y.append(y2)\n        if x1 + 1 < b:\n            x.append(x1 + 1)\n            x.append(x1)\n        else:\n            x.append(x1 - 1)\n            x.append(x1)\n    else:\n        x.append(x1)\n        x.append(x2)\n        y.append(y1)\n        y.append(y2)\n    for i in range(b):\n        l = ['.' for k in range(b)]\n        if i in y:\n            l[x[0]] = '*'\n            l[x[1]] = '*'\n        print(''.join(l))", "q = int(input())\nfor i in range(q):\n    w = int(input())\n    l = []\n    for j in range(w):\n        e = input()\n        for k in range(w):\n            if e[k] == '*':\n                l.append([j, k])\n    if l[0][0] != l[1][0] and l[0][1] != l[1][1]:\n        l.append([l[0][0], l[1][1]])\n        l.append([l[1][0], l[0][1]])\n    elif l[0][0] == l[1][0] and l[0][1] != l[1][1]:\n        if l[0][0] == 0:\n            l.append([1, l[0][1]])\n            l.append([1, l[1][1]])\n        else:\n            l.append([0, l[0][1]])\n            l.append([0, l[1][1]])\n    elif l[0][0] != l[1][0] and l[0][1] == l[1][1]:\n        if l[0][1] == 0:\n            l.append([l[0][0], 1])\n            l.append([l[1][0], 1])\n        else:\n            l.append([l[0][0], 0])\n            l.append([l[1][0], 0])\n    for j in range(w):\n        if j not in [l[0][0], l[1][0], l[2][0], l[3][0]]:\n            print('.' * w)\n        else:\n            s = '.' * w\n            for k in range(4):\n                if l[k][0] == j:\n                    s = s[:l[k][1]] + '*' + s[l[k][1] + 1:]\n            print(s)", "for t in range(int(input())):\n    n = int(input())\n    flag = 0\n    flag2 = 0\n    for i in range(n):\n        line = list(map(str, input()))\n        if '*' in line:\n            if line.count('*') == 1:\n                if not flag:\n                    flag = 1\n                    str1 = i\n                    pos1 = line.index('*')\n                else:\n                    str2 = i\n                    pos2 = line.index('*')\n            else:\n                str1 = i\n                pos1 = line.index('*')\n                pos2 = n - 1 - line[::-1].index('*')\n                flag2 = 1\n    if not flag2:\n        if pos1 != pos2:\n            line1 = ['.'] * n\n            line1[pos1] = '*'\n            line1[pos2] = '*'\n        elif pos1 == n - 1:\n            line1 = ['.'] * n\n            line1[pos1 - 1] = '*'\n            line1[pos1] = '*'\n        else:\n            line1 = ['.'] * n\n            line1[pos1 + 1] = '*'\n            line1[pos1] = '*'\n    elif str1 < n - 1:\n        str2 = n - 1\n        line1 = ['.'] * n\n        line1[pos1] = '*'\n        line1[pos2] = '*'\n    else:\n        str1 = n - 2\n        line1 = ['.'] * n\n        line1[pos1] = '*'\n        line1[pos2] = '*'\n    for j in range(n):\n        if j == str1 or j == str2:\n            print(*line1, sep='')\n        else:\n            print('.' * n)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef main(t):\n    n = int(input())\n    matrix = []\n    row = 0\n    track = []\n    for i in range(n):\n        col = 0\n        k = input()\n        for i in k:\n            if i == '*':\n                track.append(row)\n                track.append(col)\n            col += 1\n        row += 1\n        matrix.append(k)\n    (r1, c1, r2, c2) = track\n    if r1 == r2:\n        if r1 + 1 < n:\n            matrix[r1 + 1] = matrix[r1]\n        else:\n            matrix[r1 - 1] = matrix[r1]\n    elif c1 == c2:\n        if c1 + 1 < n:\n            k = matrix[r1][:c1 + 1] + '*' + matrix[r1][c1 + 2:]\n        else:\n            k = matrix[r1][:c1 - 1] + '*' + matrix[r1][c1:]\n        matrix[r1] = matrix[r2] = k\n    else:\n        matrix[r1] = matrix[r1][:c2] + '*' + matrix[r1][c2 + 1:]\n        matrix[r2] = matrix[r1][:c1] + '*' + matrix[r1][c1 + 1:]\n    print(*matrix, sep='\\n')\n    if t > 1:\n        main(t - 1)\nmain(int(input()))"]