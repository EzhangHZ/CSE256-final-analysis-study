["M = int(input())\nfor i in range(M):\n    N = int(input())\n    s = input()\n    tc = 0\n    ts = 0\n    prevc = {0: 1}\n    for ch in s:\n        ts += int(ch) - 1\n        if ts in prevc:\n            tc += prevc[ts]\n            prevc[ts] += 1\n        else:\n            prevc[ts] = 1\n    print(tc)", "def solution():\n    for t in range(int(input())):\n        n = int(input())\n        l = [int(e) for e in input()]\n        ans = 0\n        d = {0: 1}\n        idx = 0\n        for e in l:\n            idx += e - 1\n            if idx in d:\n                d[idx] += 1\n            else:\n                d[idx] = 1\n            ans += d[idx] - 1\n        print(ans)\n    return\nsolution()", "from sys import stdin\nfrom itertools import accumulate\nfrom collections import Counter\nfor i in range(int(stdin.readline())):\n    _ = int(stdin.readline())\n    a = [int(k) - 1 for k in stdin.readline().rstrip()]\n    print(sum((k * (k - 1) // 2 for k in Counter([0] + list(accumulate(a))).values())))", "def function(tests):\n    for _ in range(tests):\n        n = int(input())\n        a = input()\n        d = {0: 1}\n        (res, s) = (0, 0)\n        for i in range(n):\n            s += int(a[i])\n            x = s - i - 1\n            if x not in d:\n                d[x] = 0\n            d[x] += 1\n            res += d[x] - 1\n        print(res)\nt = int(input())\nfunction(t)", "from itertools import accumulate\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef solve():\n    n = int(input())\n    d = defaultdict(int)\n    arr = list(map(int, list(input().strip())))\n    cum = list(accumulate(arr, initial=0))\n    for i in range(0, len(cum)):\n        d[cum[i] - i] += 1\n    ans = 0\n    for v in d.values():\n        ans += v * (v - 1) // 2\n    print(ans)\nfor i in range(t):\n    solve()", "def solve():\n    pref = [0]\n    count = 0\n    m = {}\n    for i in range(1, n + 1):\n        pref.append(pref[-1] + nums[i - 1])\n        temp = pref[-1] - i\n        if temp == 0:\n            count += 1\n        if temp in m:\n            count += m[temp]\n            m[temp] += 1\n        else:\n            m[temp] = 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, list(str(input()))))\n    print(solve())", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nfrom collections import Counter\nfrom itertools import accumulate\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(input())\n    a = [int(i) for i in a]\n    b = [0] + list(accumulate(a))\n    c = [b[i] - i for i in range(n + 1)]\n    c = Counter(c)\n    ans = 0\n    for v in c.values():\n        ans += v * (v - 1) // 2\n    print(ans)", "def solve(n, a):\n    (ans, cur_sum) = (0, 0)\n    d = {0: 1}\n    for i in range(n):\n        cur_sum += int(a[i])\n        diff = cur_sum - (i + 1)\n        ans += d.get(diff, 0)\n        d[diff] = d.get(diff, 0) + 1\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    a = input()\n    print(solve(n, a))", "for i in range(int(input())):\n    n = int(input())\n    a = [int(num) for num in input()]\n    (ans, dic, temp) = (0, {0: 1}, 0)\n    for j in a:\n        temp += j - 1\n        if temp in dic:\n            ans += dic[temp]\n            dic[temp] += 1\n        else:\n            dic[temp] = 1\n    print(ans)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(i) for i in input()]\n    dict = {1: 1}\n    count = 0\n    sum = 0\n    i = 0\n    for item in arr:\n        sum += item\n        temp = sum - i\n        if temp in dict:\n            count += dict[temp]\n            dict[temp] += 1\n        else:\n            dict[temp] = 1\n        i += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    lis = input()\n    dp = {0: 1}\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        cnt += int(lis[i]) - 1\n        ans += dp.get(cnt, 0)\n        dp[cnt] = dp.get(cnt, 0) + 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    d = defaultdict(lambda : 0)\n    su = 0\n    d[0] = 1\n    for i in range(n):\n        su += int(s[i])\n        x = su - i - 1\n        d[x] += 1\n        ans += d[x] - 1\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    arr = []\n    for i in s:\n        arr.append(int(i) - 1)\n    h = dict()\n    ans = 0\n    sum1 = 0\n    h[0] = 1\n    for i in range(n):\n        sum1 += arr[i]\n        if sum1 in h:\n            ans += h[sum1]\n            h[sum1] += 1\n        else:\n            h[sum1] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input()))\n    c = {0: 1}\n    t = 0\n    v = 0\n    for (i, x) in enumerate(a):\n        t += x\n        s = i + 1 - t\n        v += c.get(s, 0)\n        c[s] = c.get(s, 0) + 1\n    print(v)", "def solve(n, a):\n    p = [0]\n    for num in a:\n        p.append(p[-1] + num)\n    ans = 0\n    ls = dict()\n    ls[0] = 1\n    for r in range(n):\n        if p[r + 1] - r - 1 in ls:\n            ans += ls[p[r + 1] - r - 1]\n            ls[p[r + 1] - r - 1] += 1\n        else:\n            ls[p[r + 1] - r - 1] = 1\n    return ans\n\ndef main():\n    t = int(input())\n    ns = []\n    arrs = []\n    for _ in range(t):\n        n = int(input())\n        r = input().strip()\n        a = [int(x) for x in r]\n        ns.append(n)\n        arrs.append(a)\n    for i in range(t):\n        print(solve(ns[i], arrs[i]))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    nums = input()\n    d = {0: 1}\n    (s, ans) = (0, 0)\n    for i in range(n):\n        s += int(nums[i]) - 1\n        ans += d.get(s, 0)\n        d[s] = d.get(s, 0) + 1\n    print(ans)", "from itertools import accumulate\nfor a in range(int(input())):\n    n = int(input())\n    num = [0] + list(accumulate([int(a) for a in input()]))\n    dic = {}\n    ans = 0\n    for b in range(n + 1):\n        val = num[b] - b\n        if val not in dic:\n            dic[val] = 0\n        dic[val] += 1\n    for key in dic:\n        ans += dic[key] * (dic[key] - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "from collections import *\nfor _ in range(int(input())):\n    (n, a) = (int(input()), input())\n    a = [int(x) - 1 for x in a]\n    mp = defaultdict(int)\n    mp[0] = 1\n    sm = 0\n    ans = 0\n    for x in a:\n        sm += x\n        ans += mp[sm]\n        mp[sm] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(input())\n    sumi = 0\n    dicti = {}\n    dicti[0] = 1\n    count = 0\n    for i in range(n):\n        sumi = sumi + int(l[i]) - 1\n        if dicti.get(sumi, 0) == 0:\n            dicti[sumi] = 1\n        else:\n            count += dicti[sumi]\n            dicti[sumi] += 1\n    print(count)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    d = defaultdict(int)\n    t = 0\n    for i in s:\n        d[t] += 1\n        t += int(i) - 1\n        ans += d[t]\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {0: 1}\n    r = t = 0\n    for x in s[:-1]:\n        t += int(x) - 1\n        x = d.get(t, 0)\n        r += x\n        d[t] = x + 1\n    print(r)", "from collections import defaultdict\n\ndef get_good_subs_num(line):\n    offset = 0\n    good_subs_num = 0\n    sub_count = defaultdict(int)\n    for c in line:\n        num = ord(c) - ord('0')\n        offset -= num - 1\n        sub_count[num - 1 + offset] += 1\n        good_subs_num += sub_count[offset]\n    return good_subs_num\nt = int(input())\nfor _ in range(t):\n    n = input()\n    line = input()\n    print(get_good_subs_num(line))", "for _ in range(int(input())):\n    n = int(input())\n    nums = input()\n    d = {0: 1}\n    (s, ans) = (0, 0)\n    for i in range(n):\n        s += int(nums[i]) - 1\n        ans += d.get(s, 0)\n        d[s] = d.get(s, 0) + 1\n    print(ans)", "T = int(input().strip())\nfor i in range(T):\n    N = int(input().strip())\n    a = [i for i in input().strip()]\n    d = {0: 1}\n    a.insert(0, 'f')\n    (answer, s) = (0, 0)\n    for j in range(1, N + 1):\n        s += int(a[j])\n        x = s - j\n        if x not in d:\n            d[x] = 0\n        answer += d[x]\n        d[x] += 1\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    m = {0: 1}\n    (sm, ans) = (0, 0)\n    for i in range(n):\n        sm += int(s[i])\n        diff = sm - (i + 1)\n        if diff not in m:\n            m[diff] = 0\n        m[diff] += 1\n        ans += m[diff] - 1\n    print(ans)", "for test_cases in range(int(input())):\n    length = int(input())\n    num = list(map(int, input()))\n    dic = {0: 1}\n    ans = 0\n    pref = 0\n    for a in range(length):\n        pref += num[a]\n        x = pref - (a + 1)\n        if x not in dic:\n            dic[x] = 0\n        dic[x] += 1\n    for b in dic:\n        ans += dic[b] * (dic[b] - 1) // 2\n    print(ans)", "from collections import defaultdict\nt = int(input())\nanswers = []\nwhile t:\n    t -= 1\n    n = int(input())\n    psum = 0\n    cnt = defaultdict(int)\n    cnt[1] += 1\n    ans = 0\n    a = [*map(int, input())]\n    for i in range(n):\n        psum += a[i]\n        val = psum - i\n        ans += cnt[val]\n        cnt[val] += 1\n    answers += (ans,)\nprint(*answers, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    nums = input()\n    d = {0: 1}\n    (s, ans) = (0, 0)\n    for i in range(n):\n        s += int(nums[i]) - 1\n        ans += d.get(s, 0)\n        d[s] = d.get(s, 0) + 1\n    print(ans)", "for _ in range(int(input())):\n    x = int(input())\n    a = input()\n    b = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(x):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in b:\n            b[x] = 0\n        b[x] += 1\n        res += b[x] - 1\n    print(res)", "cases = int(input())\nfor i in range(cases):\n    x = int(input())\n    a = input()\n    b = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(x):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in b:\n            b[x] = 0\n        b[x] += 1\n        res += b[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) - 1 for i in input()]\n    freq = {0: 1}\n    pre = 0\n    for i in range(n):\n        pre += arr[i]\n        freq[pre] = freq.get(pre, 0) + 1\n    ans = 0\n    for i in freq:\n        m = freq[i]\n        ans += m * (m - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dp = [0, int(s[0])]\n    for i in range(1, n):\n        dp.append(int(s[i]) + dp[-1])\n    d = {}\n    for i in range(len(dp)):\n        tmp = dp[i] - i\n        if tmp in d:\n            d[tmp] += 1\n        else:\n            d[tmp] = 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input()))\n    cnt = defaultdict(int)\n    pre = 0\n    res = 0\n    cnt[0] = 1\n    for (i, x) in enumerate(a):\n        pre += x\n        res += cnt[pre - (i + 1)]\n        cnt[pre - (i + 1)] += 1\n    print(res)", "T = int(input().strip())\nfor i in range(T):\n    N = int(input().strip())\n    a = [i for i in input().strip()]\n    d = {0: 1}\n    a.insert(0, 'f')\n    (answer, s) = (0, 0)\n    for j in range(1, N + 1):\n        s += int(a[j])\n        x = s - j\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        answer += d[x] - 1\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, list(input())))\n    pre = [0]\n    su = 0\n    for i in a:\n        su += i\n        pre.append(su)\n    ans1 = []\n    ans2 = []\n    for i in range(n + 1):\n        ans1.append(pre[i] - i)\n    d = dict()\n    for i in ans1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    fin_ans = 0\n    for i in d.values():\n        fin_ans += i * (i - 1) // 2\n    print(fin_ans)", "import collections\ntest_case_cnt = int(input())\n\ndef get_good_count(nums: list):\n    p_sum = [0]\n    for num in nums:\n        p_sum.append(p_sum[-1] + num)\n    counter = collections.Counter()\n    for i in range(len(p_sum)):\n        counter[p_sum[i] - i] += 1\n    res = 0\n    for value in counter.values():\n        res += value * (value - 1) // 2\n    return res\n    res = 0\n    for left in range(len(p_sum)):\n        for right in range(left + 1, len(p_sum)):\n            res += p_sum[right] - p_sum[left] == right - left\n    return res\nfor _ in range(test_case_cnt):\n    N = int(input())\n    _nums = map(int, input())\n    print(get_good_count(list(_nums)))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    l = list(s)\n    for i in range(n):\n        l[i] = int(l[i]) - 1\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    ans = 0\n    d = {0: 1}\n    for i in l:\n        if i in d:\n            ans += d[i]\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "from collections import Counter\nfrom itertools import accumulate\n\ndef cmb(n):\n    return n * (n - 1) // 2\n\ndef solve(arr):\n    length = len(arr)\n    arr = list(accumulate([x - 1 for x in arr]))\n    zero = arr.count(0)\n    c = Counter(arr)\n    c = list(c.values())\n    ans = sum([cmb(x) for x in c if x >= 2]) + zero\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        _ = int(input())\n        arr = list(input())\n        arr = [int(x) for x in arr]\n        print(solve(arr))\nmain()", "def process(n, c):\n    di = {0: 1}\n    ans = 0\n    temp = 0\n    for ele in c:\n        temp += ele\n        if temp not in di:\n            di[temp] = 1\n        else:\n            di[temp] += 1\n        ans += di[temp] - 1\n    print(ans)\nfor t in range(int(input())):\n    n = int(input())\n    c = [int(k) - 1 for k in input()]\n    process(n, c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    m = [1] + [0] * 9 * n\n    (cur, ans) = (0, 0)\n    for i in s:\n        cur += ord(i) - 49\n        ans += m[cur]\n        m[cur] += 1\n    print(ans)", "def solve():\n    n = int(input())\n    a = input()\n    s = 0\n    ans = 0\n    d = {0: 0}\n    for i in range(n):\n        s += int(a[i]) - 1\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 0\n        ans += d[s]\n    print(ans)\nfor t in range(int(input())):\n    solve()", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = input()\n    summ = dict()\n    cnt = 0\n    ans = 0\n    for i in range(n):\n        a = int(arr[i])\n        a -= 1\n        cnt += a\n        if cnt == 0:\n            ans += 1\n        if cnt in summ:\n            ans += summ[cnt]\n            summ[cnt] += 1\n        else:\n            summ.update({cnt: 1})\n    print(ans)", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nfrom collections import Counter\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = input()\n    l = [0]\n    t_sum = 0\n    for i in range(n):\n        t_sum += int(a[i])\n        num = t_sum - i - 1\n        l.append(num)\n    c = Counter(l)\n    ans = sum([i * (i - 1) // 2 for i in c.values()])\n    print(ans)", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nfrom collections import Counter\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = input()\n    l = [0]\n    t_sum = 0\n    for i in range(1, n + 1):\n        t_sum += int(a[i - 1])\n        num = t_sum - i\n        l.append(num)\n    c = Counter(l)\n    ans = sum([i * (i - 1) // 2 for i in c.values()])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        res += d[x]\n        d[x] += 1\n    print(res)", "import sys\nimport math\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    st = input()\n    prev = 0\n    ans = 0\n    dict = {}\n    for i in range(n):\n        prev += int(st[i]) - 1\n        if dict.get(prev, None) != None:\n            if prev == 0:\n                ans += 1\n            ans += dict[prev]\n            dict[prev] += 1\n        else:\n            if prev == 0:\n                ans += 1\n            dict[prev] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    st = input()\n    prev = 0\n    ans = 0\n    dict = {}\n    for i in range(n):\n        prev += int(st[i]) - 1\n        if dict.get(prev, None) != None:\n            if prev == 0:\n                ans += 1\n            ans += dict[prev]\n            dict[prev] += 1\n        else:\n            if prev == 0:\n                ans += 1\n            dict[prev] = 1\n    print(ans)", "N = int(input())\nfor i in range(N):\n    num = int(input())\n    lst = list(map(int, input().strip()))\n    (res, dic, temp) = (0, {0: 1}, 0)\n    for j in lst:\n        temp += j - 1\n        if temp in dic:\n            res += dic[temp]\n            dic[temp] += 1\n        else:\n            dic[temp] = 1\n    print(res)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\n\ndef mapinput():\n    return map(int, input().split())\n\ndef listinput():\n    return list(map(int, input().split()))\nfrom math import inf, ceil, sqrt\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, s) = (int(input()), str(input()))\n    d = defaultdict(lambda : 0)\n    (ans, cur) = (0, 0)\n    for i in range(1, n + 1):\n        cur += int(s[i - 1])\n        val = cur - i\n        if not val:\n            ans += 1\n        ans += d[val]\n        d[val] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfrom collections import Counter\nfor _ in range(I()):\n    n = I()\n    s = S()\n    l = [int(i) for i in s]\n    pre = [0] * (n + 1)\n    ans = 0\n    for i in range(n):\n        pre[i + 1] = pre[i] + l[i]\n    for i in range(n + 1):\n        pre[i] = pre[i] - i\n    cnt = Counter(pre)\n    for ele in cnt:\n        ans += (cnt[ele] - 1) * cnt[ele] // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    res = 0\n    pre = 0\n    A = []\n    for i in range(n):\n        A.append(int(a[i]))\n        A[i] -= 1\n        pre += A[i]\n        if pre not in d:\n            d[pre] = 0\n        d[pre] += 1\n    for value in d.values():\n        res += (value - 1) * value // 2\n    print(res)", "for q in range(int(input())):\n    input()\n    numList = []\n    for i in input():\n        numList.append(int(i) - 1)\n    sumDict = {0: 1}\n    tally = 0\n    subLists = 0\n    for i in numList:\n        tally += int(i)\n        if tally in sumDict:\n            subLists += sumDict[tally]\n            sumDict[tally] += 1\n        else:\n            sumDict[tally] = 1\n    print(str(subLists) + '\\n')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    memo = {0: 1}\n    res = 0\n    prefix_sum = 0\n    for i in range(len(a)):\n        prefix_sum += int(a[i])\n        res += memo.get(prefix_sum - i - 1, 0)\n        memo[prefix_sum - i - 1] = memo.get(prefix_sum - i - 1, 0) + 1\n    print(res)", "from collections import defaultdict\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    arr = input()\n    arr = [int(x) for x in arr]\n    prefix = [0]\n    memo = defaultdict(int)\n    for x in arr:\n        prefix.append(prefix[-1] + x)\n    ans = 0\n    for (index, value) in enumerate(prefix):\n        ans += memo[value - index]\n        memo[value - index] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    dict1 = {}\n    list1 = [0] + list((int(x) for x in input()))\n    for i in range(1, n + 1):\n        list1[i] = list1[i] + list1[i - 1]\n    for i in range(n + 1):\n        list1[i] -= i\n    for x in list1:\n        dict1[x] = dict1.get(x, 0) + 1\n    ans = 0\n    for s in dict1.values():\n        ans += s * (s - 1) // 2\n    list_ans.append(ans)\nprint(*list_ans, sep='\\n')", "t = int(input())\nfor c in range(t):\n    n = int(input())\n    seq = input()\n    p = [0]\n    for i in range(len(seq)):\n        if len(p) == 0:\n            p.append(int(seq[i]))\n        else:\n            p.append(int(seq[i]) + p[-1])\n    data = {}\n    for i in range(n + 1):\n        if p[i] - i not in data:\n            data[p[i] - i] = 1\n        else:\n            data[p[i] - i] += 1\n    count = 0\n    for key in data:\n        count += data[key] * (data[key] - 1) / 2\n    print(int(count))", "t = int(input())\nfor _ in range(t):\n    maps = {}\n    l = int(input())\n    s = input()\n    p = [0]\n    for (i, v) in enumerate(s):\n        p.append(p[i] + int(v))\n    for i in range(l + 1):\n        maps[p[i] - i] = maps.get(p[i] - i, 0) + 1\n    cnt = 0\n    for v in maps.values():\n        cnt += v * (v - 1) // 2\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0: 1}\n    (res, s) = (0, 0)\n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    f = {0: 1}\n    current = 0\n    res = 0\n    for i in a:\n        current += int(i) - 1\n        if current in f:\n            res += f[current]\n        else:\n            f[current] = 0\n        f[current] += 1\n    print(res)", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    A = list(map(int, list(input())))\n    ret = 0\n    sa = 0\n    d = defaultdict(int)\n    d[1] += 1\n    for i in range(n):\n        sa += A[i]\n        z = sa - i\n        ret += d[z]\n        d[z] += 1\n    return ret\n\ndef main():\n    t = int(input())\n    ANS = [solve() for _ in range(t)]\n    print('\\n'.join(map(str, ANS)))\nmain()", "t = int(input())\nfor test_case in range(t):\n    n = int(input())\n    a = input()\n    b = 0\n    d = {0: 1}\n    for e in a:\n        b += int(e) - 1\n        if d.get(b):\n            d[b] += 1\n        else:\n            d[b] = 1\n    v = list(d.values())\n    ans = 0\n    for f in v:\n        ans += f * (f - 1) // 2\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    c = [int(k) - 1 for k in input()]\n    di = {0: 1}\n    ans = 0\n    temp = 0\n    for ele in c:\n        temp += ele\n        if temp not in di:\n            di[temp] = 1\n        else:\n            di[temp] += 1\n        ans += di[temp] - 1\n    print(ans)", "res = ''\nfor _ in range(int(input())):\n    input()\n    a = [int(x) for x in input()]\n    r = 0\n    p = {0: 1}\n    w = 0\n    for i in a:\n        w += i - 1\n        if w in p:\n            r += p[w]\n        else:\n            p[w] = 0\n        p[w] += 1\n    res += f'{r}\\n'\nprint(res)", "for _ in range(int(input())):\n    lens = int(input())\n    nums = [int(x) for x in input()]\n    r = 0\n    p = {0: 1}\n    w = 0\n    for i in nums:\n        w += i - 1\n        if w in p:\n            r += p[w]\n        else:\n            p[w] = 0\n        p[w] += 1\n    print(r)", "def subarray_sum(s, k, n):\n    curr = 0\n    m = {}\n    ans = 0\n    for i in range(n):\n        curr += s[i]\n        if curr == k:\n            ans += 1\n        if curr - k in m:\n            ans += m[curr - k]\n        m[curr] = 1 + m.get(curr, 0)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    for i in range(n):\n        s[i] = int(s[i]) - 1\n    ans = subarray_sum(s, 0, n)\n    print(ans)", "for _ in range(int(input())):\n    lg = int(input())\n    n = [int(c) for c in input()]\n    a = 0\n    p = {0: 1}\n    q = 0\n    for k in n:\n        q += k - 1\n        if q in p:\n            a += p[q]\n        else:\n            p[q] = 0\n        p[q] += 1\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = [0] * (10 * n + 20)\n    a = ext = ans = 0\n    for i in s:\n        cnt[ext] += 1\n        ext += int(i) - 1\n        ans += cnt[ext]\n    print(ans)", "def main():\n    t = int(input())\n    for tt in range(t):\n        n = int(input())\n        a = list(map(int, input()))\n        s = 0\n        c = 0\n        d = {0: 1}\n        for i in range(0, len(a)):\n            s = s + (a[i] - 1)\n            ss = s - 0\n            if ss in d.keys():\n                c = c + d[ss]\n            d[s] = d.get(s, 0) + 1\n        print(c)\nmain()", "def solve():\n    n = int(input())\n    a = list(map(int, input()))\n    s = [0]\n    d = {}\n    for i in range(n):\n        s.append(s[-1] + a[i])\n    for i in range(n + 1):\n        val = s[i] - i\n        if val not in d:\n            d[val] = 0\n        d[val] += 1\n    ans = 0\n    for value in d.values():\n        ans += value * (value - 1) // 2\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = [int(num) for num in input()]\n    (ans, dic, temp) = (0, {0: 1}, 0)\n    for j in a:\n        temp += j - 1\n        if temp in dic:\n            ans += dic[temp]\n            dic[temp] += 1\n        else:\n            dic[temp] = 1\n    print(ans)", "def solve(l, n):\n    mp = {}\n    (s, ans) = (0, 0)\n    for i in range(n):\n        s += l[i]\n        if s == 0:\n            ans += 1\n        if s in mp:\n            ans += mp[s]\n            mp[s] += 1\n        else:\n            mp[s] = 1\n    print(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    l = list(s)\n    for i in range(n):\n        l[i] = int(l[i]) - 1\n    solve(l, n)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    p = 0\n    ans = 0\n    good = [1] + [0] * 9 * n\n    for i in a:\n        p += int(i) - 1\n        ans += good[p]\n        good[p] += 1\n    print('%d\\n' % ans)", "def ans(arr, n):\n    hashMap = {}\n    curr_sum = 0\n    ans = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        if curr_sum == 0:\n            ans += 1\n        if curr_sum in hashMap:\n            ans += len(hashMap[curr_sum])\n            hashMap[curr_sum].append(i)\n        else:\n            hashMap[curr_sum] = [i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(char) - 1 for char in input()]\n    print(ans(arr, n))", "def conv(c):\n    return ord(c) - ord('0')\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(conv, input().strip('')))\n    umap = {0: 1}\n    s = 0\n    ans = 0\n    for i in range(n):\n        index = i + 1\n        s += a[i]\n        diff = s - index\n        try:\n            ans += umap[diff]\n            umap[diff] += 1\n        except:\n            umap[diff] = 1\n    print(ans)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "for s in [*open(0)][2::2]:\n    a = [1] + len(s) * 8 * [0]\n    r = t = 0\n    for x in s[:-1]:\n        t += int(x) - 1\n        r += a[t]\n        a[t] += 1\n    print(r)", "import collections\n\ndef solve(A, n):\n    cnt = 0\n    psum = 0\n    d = collections.defaultdict(int)\n    d[0] += 1\n    for i in range(len(A)):\n        psum += A[i]\n        x = psum - i - 1\n        d[x] += 1\n        cnt += d[x] - 1\n    return cnt\ntests = int(input())\nres = []\nwhile tests > 0:\n    n = int(input())\n    line = input()\n    line = '-'.join(line).split('-')\n    A = [int(n) for n in line]\n    res.append(solve(A, n))\n    tests -= 1\nfor r in res:\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = [0] * (10 * n + 20)\n    a = ext = ans = 0\n    for i in s:\n        cnt[ext] += 1\n        ext += int(i) - 1\n        ans += cnt[ext]\n    print(ans)", "n_inputs = int(input())\nfor _ in range(n_inputs):\n    str_len = int(input())\n    str_input = input()\n    sums = 0\n    sum_dict = {0: 1}\n    current_sum = 0\n    for char in str_input:\n        current_sum += int(char) - 1\n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    ans = 0\n    for n_occur in sum_dict.values():\n        ans += n_occur * (n_occur - 1) // 2\n    print(ans)", "for s in [*open(0)][2::2]:\n    a = [1] + len(s) * 8 * [0]\n    r = t = 0\n    for x in s[:-1]:\n        t += int(x) - 1\n        r += a[t]\n        a[t] += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    s1 = 0\n    d = {0: 1}\n    for i in range(n):\n        s1 += int(s[i])\n        x = s1 - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "import math\nfrom math import gcd, sqrt, floor, factorial, ceil\nfrom bisect import bisect_left, bisect_right\nimport bisect\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 7))\nimport collections\nfrom collections import defaultdict, Counter\nfrom statistics import median\nfrom queue import Queue\ninf = float('inf')\nfrom operator import neg\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input()))\n    m = [0]\n    for i in range(len(l)):\n        m.append(m[-1] + l[i] - 1)\n    dict = Counter(m)\n    ansList = [i * (i - 1) // 2 for i in dict.values()]\n    print(sum(ansList))"]