["from collections import Counter\nnn = int(input())\n\ndef get_primes(up_to):\n    res = []\n    for p in range(2, up_to + 1):\n        flag = False\n        for q in res:\n            if q * q > p:\n                break\n            if p % q == 0:\n                flag = True\n                break\n        if not flag:\n            res.append(p)\n    return res\nprimes = get_primes(int(1000000000 ** 0.5))\nprimes_set = set(primes)\n\ndef get_prime_divisors(x):\n    res = Counter()\n    if x in primes_set:\n        res[x] += 1\n        return res\n    for prime in primes:\n        while x % prime == 0:\n            x = x // prime\n            res[prime] += 1\n        if x in primes_set:\n            res[x] += 1\n            return res\n    if x > 1:\n        res[x] += 1\n    return res\n\ndef get_fix_prime_divisors(x, fix_primes):\n    res = Counter()\n    for prime in fix_primes:\n        while x % prime == 0:\n            x = x // prime\n            res[prime] += 1\n    return res\n\ndef main(p, q):\n    q_primes = get_prime_divisors(q)\n    p_primes = get_fix_prime_divisors(p, q_primes)\n    minim = 1e+19\n    for prime in q_primes:\n        diff = p_primes[prime] - q_primes[prime]\n        if diff < 0:\n            return p\n        minim = min(minim, prime ** (diff + 1))\n    return p // minim\nfor _ in range(nn):\n    (p, q) = [int(s) for s in input().split()]\n    print(main(p, q))", "from collections import Counter\nimport math\nimport sys\n\ndef primeFactors(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            a.append(i)\n            n //= i\n    if n > 2:\n        a.append(n)\n    return Counter(a)\ncases = int(input())\nfor t in range(cases):\n    (p, q) = list(map(int, input().split()))\n    if p % q != 0:\n        print(p)\n    else:\n        qprime = primeFactors(q)\n        pprime = {}\n        for i in qprime:\n            x = p\n            c = 0\n            while x % i == 0:\n                c += 1\n                x //= i\n            pprime[i] = c\n        mv = pow(10, 20)\n        for i in qprime:\n            v = pprime[i] - (qprime[i] - 1)\n            mv = min(mv, pow(i, v))\n        output = p // mv\n        print(output)", "import math\n\ndef primeFactors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\nt = int(input())\nfor q in range(t):\n    (p, q) = map(int, input().split())\n    fact = primeFactors(q)\n    ans = p * 1\n    res = 0\n    for i in range(len(fact)):\n        ans = p * 1\n        while ans % q == 0 and ans >= q:\n            ans = ans // fact[i]\n        res = max(res, ans)\n    print(res)", "import math\nfor i in range(int(input())):\n    (p, q) = map(int, input().split())\n    l = p\n    if p % q != 0:\n        print(p)\n    else:\n        g = []\n        c = 1\n        if q % 2 == 0:\n            while q % 2 == 0:\n                q = q // 2\n                p = p // 2\n            while p % 2 == 0:\n                c = c * 2\n                p = p // 2\n            g.append(c * 2)\n        for j in range(3, int(math.sqrt(q)) + 2, 2):\n            if q % j == 0:\n                c = 1\n                while q % j == 0:\n                    q = q // j\n                    p = p // j\n                while p % j == 0:\n                    c = c * j\n                    p = p // j\n                g.append(c * j)\n        if q > 2:\n            c = 1\n            while p % q == 0:\n                c = c * q\n                p = p // q\n            g.append(c)\n        print(l // min(g))", "from sys import stdout, stdin\nfrom collections import defaultdict, deque\nimport math\n\ndef primeFactors(n):\n    l = []\n    if n % 2 == 0:\n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            l.append(i)\n            n = n // i\n    if n > 2:\n        l.append(n)\n    return l\nt = int(stdin.readline())\nfor _ in range(t):\n    (a, b) = map(int, stdin.readline().split())\n    if a % b == 0:\n        l = primeFactors(b)\n        ans = 0\n        for i in l:\n            z = a\n            while z % i == 0:\n                z = z // i\n                if z % b != 0:\n                    break\n            if z > ans:\n                ans = z\n        print(ans)\n    else:\n        print(a)", "import math\n\ndef primeFactors(n, d):\n    if n % 2 == 0:\n        d[2] = 0\n    while n % 2 == 0:\n        d[2] += 1\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            d[i] = 0\n        while n % i == 0:\n            d[i] += 1\n            n = n // i\n    if n > 2:\n        d[n] = 1\nt = int(input())\nfor i in range(t):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        d = {}\n        d1 = {}\n        primeFactors(q, d)\n        for key in d:\n            p1 = p + 0\n            if p1 % key == 0:\n                d1[key] = 0\n                while p1 % key == 0:\n                    d1[key] += 1\n                    p1 //= key\n        l = []\n        for key in d:\n            l.append(pow(key, d1[key] - (d[key] - 1)))\n        print(p // min(l))", "def primeFactors(n):\n    pn = n\n    l = {}\n    while n % 2 == 0:\n        if 2 not in l:\n            l[2] = 1\n        else:\n            l[2] += 1\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            if i not in l:\n                l[i] = 1\n            else:\n                l[i] += 1\n            n = n // i\n        i += 2\n    if n > 2:\n        l[n] = 1\n    return l\n\ndef solve(a, b):\n    if a % b != 0:\n        return a\n    bp = primeFactors(b)\n    ans = a\n    for x in bp:\n        powa = 0\n        oa = a\n        while oa % x == 0:\n            oa //= x\n            powa += 1\n        dif = powa - bp[x] + 1\n        div = 1\n        for i in range(dif):\n            div *= x\n        ans = min(ans, div)\n    return a // ans\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(solve(a, b))", "import math\n\ndef getFactors(num):\n    factors = {}\n    for i in range(2, int(math.sqrt(num)) + 1):\n        while num % i == 0:\n            if i not in factors:\n                factors[i] = 0\n            factors[i] += 1\n            num //= i\n    if num >= 2:\n        if num not in factors:\n            factors[num] = 0\n        factors[num] += 1\n    return factors\n\ndef getGCD(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef solve(p, q):\n    gcd = getGCD(p, q)\n    remain = p // gcd\n    if gcd != q:\n        return p\n    gcdFact = getFactors(gcd)\n    minDiv = math.inf\n    for factor in gcdFact:\n        r = remain\n        rFact = 0\n        while r % factor == 0:\n            r //= factor\n            rFact += 1\n        div = factor ** (rFact + 1)\n        minDiv = min(div, minDiv)\n    return p // minDiv\nT = int(input())\nfor _ in range(T):\n    (p, q) = [int(x) for x in input().split()]\n    print(solve(p, q))", "from math import floor, sqrt\nt = int(input())\nprimes = []\npowers = []\n\ndef factorization(n):\n    for i in range(2, floor(sqrt(n) + 1)):\n        if n % i == 0:\n            power = 0\n            while n % i == 0:\n                power = power + 1\n                n = n // i\n            primes.append(i)\n            powers.append(power)\n    if n != 1:\n        primes.append(n)\n        powers.append(1)\n\ndef vp(x, prime):\n    powers2 = []\n    for i in prime:\n        c = 1\n        while x != 1 and x % i == 0:\n            x = x // i\n            c = c + 1\n        powers2.append(i ** c)\n    return powers2\nfor i in range(t):\n    (p, q) = input().split()\n    p = int(p)\n    q = int(q)\n    if p < q:\n        print(p)\n    elif p % q != 0:\n        print(p)\n    else:\n        primes = []\n        powers = []\n        factorization(q)\n        s = p // q\n        powers2 = vp(s, primes)\n        print(p // min(powers2))", "import math\nn = int(input())\n\ndef pfact(q):\n    factors = {}\n    temp = q\n    for i in range(2, math.floor(math.sqrt(q)) + 1):\n        while temp % i == 0:\n            temp //= i\n            if i not in factors.keys():\n                factors[i] = 1\n            else:\n                factors[i] += 1\n    if temp not in factors.keys():\n        factors[temp] = 1\n    else:\n        factors[temp] += 1\n    return factors\nfor _ in range(n):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n        continue\n    prq = pfact(q)\n    maxs = 0\n    for pr in prq.keys():\n        if pr == 1:\n            continue\n        temp = p\n        while temp % pr == 0:\n            temp = temp // pr\n        temp = temp * pr ** (prq[pr] - 1)\n        maxs = max(temp, maxs)\n    print(maxs)", "def factors(x):\n    d = {}\n    temp = 0\n    while x % 2 == 0:\n        temp += 1\n        x = x // 2\n    if temp:\n        d[2] = temp\n    for i in range(3, int(x ** 0.5) + 1):\n        temp = 0\n        while x % i == 0:\n            temp += 1\n            x = x // i\n        if temp:\n            d[i] = d.get(i, 0) + temp\n    if x > 1:\n        d[x] = d.get(x, 0) + 1\n    return d\nfor u in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        x = factors(q)\n        ans = 10 ** 19\n        for i in x:\n            temp = 0\n            k = p\n            while k % i == 0:\n                temp += 1\n                k = k // i\n            ans = min(ans, i ** (temp - x[i] + 1))\n        print(p // ans)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q > 0:\n        print(p)\n    else:\n        n = q\n        ans = 1\n        k = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                k.append(i)\n                while n % i == 0:\n                    n = n // i\n        if n != 1:\n            k.append(n)\n        for i in k:\n            z = p\n            while z % i == 0:\n                z = z // i\n                if z % q > 0:\n                    ans = max(ans, z)\n        print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n        continue\n    lst = []\n    for i in range(1, math.ceil(math.sqrt(q)) + 1):\n        if q % i == 0:\n            lst.append(i)\n            lst.append(q // i)\n    lst = list(set(lst))\n    lst.sort()\n    ans = 0\n    for i in range(1, len(lst)):\n        x = p\n        while x % q == 0:\n            x = x // lst[i]\n        ans = max(ans, x)\n    print(ans)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (p, q) = int_arr()\n    if p % q != 0:\n        print(p)\n        continue\n    fact_q = set()\n    (temp_p, temp_q) = (p, q)\n    while temp_q > 1:\n        for i in range(2, int(temp_q ** 0.5) + 1):\n            if temp_q % i == 0:\n                temp_q //= i\n                fact_q.add(i)\n                break\n        else:\n            fact_q.add(temp_q)\n            break\n    ans = 1\n    for i in fact_q:\n        sq = i\n        while p % sq == 0:\n            if p // sq % q != 0:\n                ans = max(ans, p // sq)\n                break\n            sq *= i\n    print(ans)", "from math import pow\n\ndef pizda(n):\n    i = 2\n    primfac = []\n    while i * i <= n:\n        while n % i == 0:\n            primfac.append(i)\n            n = n // i\n        i = i + 1\n    if n > 1:\n        primfac.append(n)\n    return primfac\nt = int(input())\nfor j in range(t):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        a = pizda(q)\n        b = []\n        f = [a[0]]\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                f.append(a[i])\n            else:\n                b.append(f)\n                f = [a[i]]\n        b.append(f)\n        a = []\n        c = []\n        for i in range(len(b)):\n            a.append(b[i][0])\n            c.append(len(b[i]))\n        b = [0 for i in range(len(a))]\n        p1 = p\n        for i in range(len(a)):\n            while p % a[i] == 0:\n                p = p // a[i]\n                b[i] += 1\n        for i in range(len(a)):\n            b[i] = max(0, b[i] - c[i] + 1)\n        for i in range(len(a)):\n            b[i] = a[i] ** b[i]\n        b.sort()\n        print(p1 // b[0])", "def primeFactors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\nfor _ in range(int(input())):\n    (p, q) = list(map(int, input().split()))\n    qFactors = primeFactors(q)\n    possible = []\n    for num in qFactors:\n        temp = p\n        while temp % q == 0:\n            temp //= num\n        possible.append(temp)\n    print(max(possible))", "def prime(m):\n    a = set()\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            m //= i\n            a.add(i)\n        else:\n            i += 1\n    a.add(m)\n    return a\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    if m > n or n % m != 0:\n        print(n)\n    else:\n        ans = 1\n        for i in prime(m):\n            t = n\n            while t % i == 0:\n                t //= i\n                if t % m != 0:\n                    ans = max(t, ans)\n                    break\n        print(ans)", "t = int(input())\nfor tt in range(t):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        s = []\n        xx = q\n        for i in range(2, int(q ** 0.5) + 1):\n            if q % i == 0:\n                s.append(q // i)\n                s.append(i)\n        s.append(q)\n        ans = 0\n        for i in s:\n            val = 1\n            xx = p\n            while xx % q == 0:\n                xx //= i\n                val = xx\n            ans = max(ans, val)\n        print(ans)", "def primeFactors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\nfor _ in range(int(input())):\n    (p, q) = list(map(int, input().split()))\n    qFactors = primeFactors(q)\n    possible = []\n    for num in qFactors:\n        temp = p\n        while temp % q == 0:\n            temp //= num\n        possible.append(temp)\n    print(max(possible))", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\nprime = []\nvis = [0] * 100001\nfor i in range(2, 100000 + 1):\n    if not vis[i]:\n        vis[i] = 1\n        prime.append(i)\n    for j in prime:\n        if i * j >= 100000:\n            break\n        vis[i * j] = 1\n        if i % j == 0:\n            break\nt = int(input())\nfor cnt in range(t):\n    (p, q) = map(int, input().split())\n    (pc, qc) = (p, q)\n    if p % q:\n        print(p)\n    else:\n        d1 = collections.defaultdict(int)\n        d2 = collections.defaultdict(int)\n        for c in prime:\n            if c > q:\n                break\n            if q % c == 0:\n                while q % c == 0:\n                    d2[c] += 1\n                    q //= c\n                while p % c == 0:\n                    d1[c] += 1\n                    p //= c\n        if d2:\n            res = 1\n            for k in d2:\n                res = max(res, pc // k ** (d1[k] - d2[k] + 1))\n            print(res)\n        else:\n            while p % q == 0:\n                p //= q\n            print(p)", "import math\n\ndef prime_factors(a):\n    s = int(math.sqrt(a)) + 1\n    pfs = {}\n    for i in range(2, s + 1):\n        if i > a:\n            break\n        ic = 0\n        while a % i == 0:\n            a //= i\n            ic += 1\n        if ic > 0:\n            pfs[i] = ic\n    if a > 1:\n        pfs[a] = 1\n    return pfs\nt = int(input())\nresults = []\nfor i in range(t):\n    pq = input().split()\n    p = int(pq[0])\n    q = int(pq[1])\n    if p % q != 0:\n        results.append(p)\n    else:\n        result = 1\n        pfs = prime_factors(q)\n        r = p // q\n        pfs_2 = {}\n        for k in pfs.keys():\n            ic = 0\n            while r % k == 0:\n                r //= k\n                ic += 1\n            if ic > 0:\n                pfs_2[k] = ic\n        for (k, v1) in pfs.items():\n            if k in pfs_2:\n                v2 = pfs_2[k]\n                prod = p // k ** (v2 + 1)\n            else:\n                prod = p // k\n            if prod > result:\n                result = prod\n        results.append(result)\nfor result in results:\n    print(result)", "import math\n\ndef prime_factors(a):\n    pfs = {}\n    s = int(math.sqrt(a)) + 1\n    for i in range(2, s + 1):\n        if i > a:\n            break\n        ic = 0\n        while a % i == 0:\n            a //= i\n            ic += 1\n        if ic > 0:\n            pfs[i] = ic\n    if a > 1:\n        pfs[a] = 1\n    return pfs\nt = int(input())\nresults = []\nfor i in range(t):\n    pq = input().split()\n    p = int(pq[0])\n    q = int(pq[1])\n    if p % q != 0:\n        results.append(p)\n    else:\n        r = p // q\n        pfs_q = prime_factors(q)\n        pfs_r = {}\n        for k in pfs_q.keys():\n            ic = 0\n            while r % k == 0:\n                ic += 1\n                r //= k\n            if ic > 0:\n                pfs_r[k] = ic\n        result = 1\n        for k in pfs_q.keys():\n            if k in pfs_r:\n                w = pfs_r[k]\n                x = p // k ** (w + 1)\n            else:\n                x = p // k\n            if x > result:\n                result = x\n        results.append(result)\nfor result in results:\n    print(result)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n        continue\n    d = {}\n    for i in range(2, int(q ** 0.5) + 1):\n        count = 0\n        while q % i == 0:\n            count += 1\n            q //= i\n        if count != 0:\n            d[i] = count\n    if q >= 2:\n        d[q] = 1\n    ans = []\n    for i in d:\n        tmp = p\n        while tmp % i == 0:\n            tmp //= i\n        tmp *= i ** (d[i] - 1)\n        ans.append(tmp)\n    print(max(ans))", "t = int(input())\nfor i in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    p = l1[0]\n    q = l1[1]\n    v1 = []\n    v2 = []\n    for j in range(1, int(q ** 0.5) + 1):\n        if q % j == 0:\n            if q // j == j:\n                v1.append(j)\n            else:\n                v1.append(j)\n                v2.append(q // j)\n    for j in range(len(v2) - 1, -1, -1):\n        v1.append(v2[j])\n    if p % q != 0:\n        print(p)\n    else:\n        j = 0\n        max_val = 0\n        while True and j < len(v1):\n            out = False\n            if v1[j] == 1:\n                j += 1\n                continue\n            p_dash = p\n            while p_dash % v1[j] == 0:\n                p_dash //= v1[j]\n                if p_dash % q != 0:\n                    if p_dash > max_val:\n                        max_val = p_dash\n                    out = True\n            j += 1\n        print(max_val)", "import math\n\ndef f(n):\n    if n == 1:\n        return 1\n    semi_p = p\n    while semi_p % q == 0:\n        semi_p //= n\n    return semi_p\nt = int(input())\nfor i in range(t):\n    (p, q) = map(int, input().split(' '))\n    if p % q:\n        print(p)\n    else:\n        maxi = 1\n        for j in range(1, int(math.sqrt(q)) + 1):\n            if q % j == 0:\n                maxi = max(maxi, f(j), f(q // j))\n        print(maxi)", "t = int(input())\nfor i in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    p = l1[0]\n    q = l1[1]\n    v1 = []\n    v2 = []\n    for j in range(1, int(q ** 0.5) + 1):\n        if q % j == 0:\n            if q // j == j:\n                v1.append(j)\n            else:\n                v1.append(j)\n                v2.append(q // j)\n    for j in range(len(v2) - 1, -1, -1):\n        v1.append(v2[j])\n    if p % q != 0:\n        print(p)\n    else:\n        j = 0\n        x = []\n        while True and j < len(v1):\n            out = False\n            if v1[j] == 1:\n                j += 1\n                continue\n            p_dash = p\n            while p_dash % v1[j] == 0:\n                p_dash //= v1[j]\n                if p_dash % q != 0:\n                    x.append(p_dash)\n                    out = True\n            j += 1\n        print(max(x))", "import math\n\ndef prime_factors(a):\n    pfs = {}\n    s = int(math.sqrt(a)) + 1\n    for i in range(2, s + 1):\n        if i > a:\n            break\n        ic = 0\n        while a % i == 0:\n            a //= i\n            ic += 1\n        if ic > 0:\n            pfs[i] = ic\n    if a > 1:\n        pfs[a] = 1\n    return pfs\nt = int(input())\nresults = []\nfor i in range(t):\n    pq = input().split()\n    p = int(pq[0])\n    q = int(pq[1])\n    if p % q != 0:\n        results.append(p)\n    else:\n        r = p // q\n        pfs_q = prime_factors(q)\n        pfs_r = {}\n        for k in pfs_q.keys():\n            ic = 0\n            while r % k == 0:\n                ic += 1\n                r //= k\n            if ic > 0:\n                pfs_r[k] = ic\n        result = 1\n        for k in pfs_q.keys():\n            if k in pfs_r:\n                w = pfs_r[k]\n                x = p // k ** (w + 1)\n            else:\n                x = p // k\n            if x > result:\n                result = x\n        results.append(result)\nfor result in results:\n    print(result)", "def find_prime(n):\n    ans = []\n    i = 2\n    x = n\n    while i * i <= n:\n        if x % i == 0:\n            ans.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        ans.append(x)\n    return ans\nfor _ in range(int(input())):\n    (p, q) = map(int, input().strip().split())\n    if p % q != 0:\n        print(p)\n    else:\n        ans = 1\n        primes = find_prime(q)\n        for x in primes:\n            i = p\n            while i % q == 0:\n                i //= x\n            ans = max(ans, i)\n        print(ans)", "def prime_factorization(num):\n    dic = {}\n    i = 2\n    lim = num ** (1 / 2)\n    while num != 1 and i <= lim:\n        if num % i == 0:\n            dic[i] = 0\n            while num % i == 0:\n                num //= i\n                dic[i] += 1\n        i += 1\n    if num != 1:\n        dic[int(num)] = 1\n    return dic\nfor _ in range(int(input())):\n    (p, q) = list(map(int, input().split()))\n    if p % q != 0:\n        print(p)\n        continue\n    qPrimes = prime_factorization(q)\n    chkflag = True\n    mx = 0\n    for prime in qPrimes:\n        tem = p\n        while not tem % q:\n            tem //= prime\n        mx = max(mx, tem)\n    print(mx)", "def find_prime(n):\n    ans = []\n    i = 2\n    x = n\n    while i * i <= n:\n        if x % i == 0:\n            ans.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        ans.append(x)\n    return ans\nfor _ in range(int(input())):\n    (p, a) = map(int, input().split())\n    if p % a != 0:\n        print(p)\n    else:\n        mul = find_prime(a)\n        ans = 1\n        for i in mul:\n            t = p\n            while t % a == 0:\n                t //= i\n            ans = max(ans, t)\n        print(ans)", "def facts(n):\n    r = [n]\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            r.append(i)\n            if n // i != i:\n                r.append(n // i)\n        i += 1\n    return r\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a % b != 0:\n        print(a)\n    else:\n        c = 1\n        x = facts(b)\n        for i in x:\n            n = a\n            while n % i == 0:\n                n //= i\n                if n % b != 0:\n                    c = max(c, n)\n                    break\n        print(c)", "def prime(m, a):\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            m = m // i\n            a.append(i)\n        else:\n            i += 1\n    a.append(m)\n    pass\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m > n or n % m != 0:\n        print(n)\n    else:\n        ans = 1\n        a = []\n        prime(m, a)\n        for i in set(a):\n            t = n\n            while t % i == 0:\n                t = t // i\n                if t % m != 0:\n                    ans = max(t, ans)\n                    break\n        print(ans)", "import math\nfor x in range(int(input())):\n    (h, m) = list(map(int, input().split()))\n    x = m\n    if h < m:\n        print(h)\n    elif h % m != 0:\n        print(h)\n    else:\n        a = []\n        for i in range(2, int(math.sqrt(m)) + 1):\n            if m % i == 0:\n                a.append(i)\n                while x % i == 0:\n                    x = x // i\n        v = 1\n        if x > 1:\n            a.append(x)\n        for i in a:\n            t = h\n            while t % i == 0:\n                t //= i\n                if t % m != 0:\n                    v = max(v, t)\n        print(v)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        dic = {}\n        for i in range(2, int(q ** (1 / 2)) + 1):\n            count = 0\n            while q % i == 0:\n                count += 1\n                q //= i\n            if count != 0:\n                dic[i] = count\n        if q >= 2:\n            dic[q] = 1\n        ans = []\n        for i in dic:\n            co = p\n            while co % i == 0:\n                co //= i\n            co *= i ** (dic[i] - 1)\n            ans.append(co)\n        print(max(ans))", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        dic = {}\n        for i in range(2, int(q ** (1 / 2)) + 1):\n            count = 0\n            while q % i == 0:\n                count += 1\n                q //= i\n            if count != 0:\n                dic[i] = count\n        if q >= 2:\n            dic[q] = 1\n        ans = []\n        for i in dic:\n            co = p\n            while co % i == 0:\n                co //= i\n            co *= i ** (dic[i] - 1)\n            ans.append(co)\n        print(max(ans))", "from math import pow\n\ndef pizda(n):\n    i = 2\n    primfac = []\n    while i * i <= n:\n        while n % i == 0:\n            primfac.append(i)\n            n = n // i\n        i = i + 1\n    if n > 1:\n        primfac.append(n)\n    return primfac\nt = int(input())\nfor j in range(t):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        a = pizda(q)\n        b = []\n        f = [a[0]]\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                f.append(a[i])\n            else:\n                b.append(f)\n                f = [a[i]]\n        b.append(f)\n        a = []\n        c = []\n        for i in range(len(b)):\n            a.append(b[i][0])\n            c.append(len(b[i]))\n        b = [0 for i in range(len(a))]\n        p1 = p\n        for i in range(len(a)):\n            while p % a[i] == 0:\n                p = p // a[i]\n                b[i] += 1\n        for i in range(len(a)):\n            b[i] = max(0, b[i] - c[i] + 1)\n        for i in range(len(a)):\n            b[i] = a[i] ** b[i]\n        b.sort()\n        print(p1 // b[0])", "import math\nt = int(input())\nfor _ in range(t):\n    (p, q) = map(int, input().split())\n    y = q\n    if p > q and p % q != 0:\n        print(p)\n    elif p < q:\n        print(p)\n    else:\n        r = int(math.sqrt(q)) + 1\n        d = []\n        for i in range(2, r):\n            cnt = 0\n            if q % i == 0:\n                d.append(i)\n                while q % i == 0:\n                    q //= i\n        if q > 1:\n            d.append(q)\n        ans = 1\n        for i in d:\n            tmp = p\n            while tmp % y == 0:\n                tmp //= i\n            ans = max(tmp, ans)\n        print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (p, q) = map(int, input().split())\n    d = defaultdict(int)\n    dp = defaultdict(int)\n    tmp = q\n    f = True\n    z = 2\n    while tmp > 1 and f:\n        f = False\n        for i in range(z, int(tmp ** 0.5) + 1):\n            while tmp % i == 0:\n                tmp //= i\n                d[i] += 1\n                f = True\n            z = i + 1\n        if f == False:\n            d[tmp] += 1\n    if p % q != 0:\n        print(p)\n        continue\n    else:\n        for x in d:\n            kek = x\n            while p % kek == 0:\n                dp[x] += 1\n                kek *= x\n        mi = p + 1\n        for x in d:\n            mi = min(mi, x ** (dp[x] - d[x] + 1))\n        print(p // mi)", "from math import sqrt\n\ndef div(n):\n    l = []\n    for i in range(2, int(sqrt(n)) + 3):\n        if n % i == 0:\n            l.append(i)\n        while n % i == 0:\n            n = n // i\n    if n > 1:\n        l.append(n)\n    return l\nt = int(input())\nfor i in range(t):\n    a = input()\n    A = a.split()\n    for i in range(2):\n        A[i] = int(A[i])\n    if A[0] % A[1] != 0:\n        print(A[0])\n    else:\n        ss = div(A[1])\n        max = 1\n        for i in ss:\n            s = A[0]\n            while s % A[1] == 0:\n                if s % i == 0:\n                    s = s // i\n            if s > max:\n                max = s\n        print(max)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    d = {}\n    ans = []\n    if p % q != 0:\n        print(p)\n        continue\n    for i in range(2, int(q ** 0.5) + 1):\n        count = 0\n        while q % i == 0:\n            count += 1\n            q //= i\n        if count != 0:\n            d[i] = count\n    if q >= 2:\n        d[q] = 1\n    for i in d:\n        tmp = p\n        while tmp % i == 0:\n            tmp //= i\n        tmp *= i ** (d[i] - 1)\n        ans.append(tmp)\n    print(max(ans))", "import math\nimport sys, bisect\nfrom heapq import *\nfrom itertools import *\nfrom collections import *\nsys.setrecursionlimit(10 ** 6)\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\n\ndef factorize(n):\n    count = 0\n    d = defaultdict(int)\n    while (n % 2 > 0) == False:\n        n >>= 1\n        count += 1\n    if count > 0:\n        d[2] += count\n    for i in range(3, int(math.sqrt(n)) + 1):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n = n // i\n        if count > 0:\n            d[i] += count\n        i += 2\n    if n > 2:\n        d[n] += 1\n    return d\nfor _ in range(I()):\n    (p, q) = neo()\n    (d, Ans) = ({}, [])\n    if p % q != 0:\n        print(p)\n        continue\n    d = factorize(q)\n    Ans = 0\n    for (i, j) in d.items():\n        t = p\n        while t % i == 0:\n            t = t // i\n        Ans = max(Ans, t * i ** (j - 1))\n    print(Ans)", "n = input()\nfor i in range(int(n)):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= q:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for l in a:\n        k = p\n        while k % q == 0:\n            k //= l\n        x = max(k, x)\n    print(x)", "for s in [*open(0)][1:]:\n    (p, q) = map(int, s.split())\n    l = []\n    j = 2\n    a = q\n    while j * j <= a:\n        if a % j == 0:\n            l += [j]\n            while a % j == 0:\n                a //= j\n        j += 1\n    if a > 1:\n        l += [a]\n        a = 1\n    for j in l:\n        k = p\n        while k % q == 0:\n            k //= j\n        a = max(k, a)\n    print(a)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import math\nt = int(input())\nfor _ in range(t):\n    (p, q) = list(map(int, input().split()))\n    t = []\n    ans = 1\n    i = 2\n    n = q\n    while i * i <= n:\n        if n % i == 0:\n            t.append(i)\n            n //= i\n        else:\n            i += 1\n    t.append(n)\n    for i in t:\n        k = p\n        while k % q == 0:\n            k //= i\n        ans = max(ans, k)\n    print(ans)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= q:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for i in a:\n        k = p\n        while k % q == 0:\n            k //= i\n        x = max(x, k)\n    print(x)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    t = []\n    ans = 1\n    i = 2\n    n = b\n    while i * i <= n:\n        if n % i == 0:\n            t.append(i)\n            n //= i\n        else:\n            i = i + 1\n    t.append(n)\n    for i in t:\n        k = a\n        while k % b == 0:\n            k //= i\n        ans = max(ans, k)\n    print(ans)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if False:\n        print(p)\n    else:\n        a = []\n        i = 2\n        g = q\n        while i * i <= g:\n            if g % i == 0:\n                g //= i\n                a.append(i)\n            else:\n                i += 1\n        if g > 1:\n            a.append(g)\n        ans = 0\n        for i in range(len(a)):\n            f = p\n            while True:\n                if f % q == 0:\n                    f //= a[i]\n                else:\n                    ans = max(ans, f)\n                    break\n        print(ans)", "num = int(input())\nfor j in range(num):\n    (p, q) = map(int, input().split())\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "for _ in ' ' * int(input()):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        lst = []\n        i = 2\n        while i * i <= q:\n            if not q % i:\n                lst.append(i)\n                if i != q // i:\n                    lst.append(q // i)\n            i += 1\n        lst.append(q)\n        num = 1\n        for i in lst:\n            ele = p\n            while not ele % i:\n                ele //= i\n                if ele % q:\n                    num = max(num, ele)\n                    break\n        print(num)", "def f(n):\n    if n == 1:\n        return 1\n    x = p\n    while x % q == 0:\n        x //= n\n    return x\nT = int(input())\nfor t in range(T):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        res = 1\n        for i in range(1, 32000):\n            if i * i > q:\n                break\n            if q % i == 0:\n                res = max(res, f(i), f(q // i))\n        print(res)", "for _ in ' ' * int(input()):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        lst = []\n        i = 2\n        while i * i <= q:\n            if not q % i:\n                lst.append(i)\n                if i != q // i:\n                    lst.append(q // i)\n            i += 1\n        lst.append(q)\n        num = 1\n        for i in lst:\n            ele = p\n            while not ele % i:\n                ele //= i\n                if ele % q:\n                    num = max(num, ele)\n                    break\n        print(num)", "results = []\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    n = y\n    prms = []\n    if x % y:\n        results.append(x)\n        continue\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            prms.append(i)\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        prms.append(n)\n    biggest = 0\n    for fac in prms:\n        m = x\n        m //= fac\n        while m % y == 0:\n            m //= fac\n        biggest = max(m, biggest)\n    results.append(biggest)\nfor r in results:\n    print(r)", "for _ in ' ' * int(input()):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        lst = []\n        i = 2\n        while i * i <= q:\n            if not q % i:\n                lst.append(i)\n                if i != q // i:\n                    lst.append(q // i)\n            i += 1\n        lst.append(q)\n        num = 1\n        for i in lst:\n            ele = p\n            while not ele % i:\n                ele //= i\n                if ele % q:\n                    num = max(num, ele)\n                    break\n        print(num)", "for j in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n        continue\n    p //= q\n    x = p\n    i = 2\n    ans = 1\n    while i * i <= q:\n        if q % i:\n            i += 1\n            continue\n        x = p\n        k = q // i\n        while x % i == 0:\n            x //= i\n        ans = max(ans, x * k)\n        x = p\n        while x % k == 0:\n            x //= k\n        ans = max(ans, x * i)\n        i += 1\n    while p % q == 0:\n        p //= q\n    print(max(ans, p))", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        i = 2\n        candidates = []\n        while i * i <= q:\n            if not q % i:\n                candidates.append(i)\n                if i != q // i:\n                    candidates.append(q // i)\n            i += 1\n        candidates.append(q)\n        num = 1\n        for i in candidates:\n            ele = p\n            while not ele % i:\n                ele //= i\n                if ele % q:\n                    num = max(ele, num)\n        print(num)", "num = int(input())\nfor j in range(num):\n    (p, q) = map(int, input().split())\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= x:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for i in a:\n        k = p\n        while k % q == 0:\n            k //= i\n        x = max(k, x)\n    print(x)", "def f(n):\n    if n == 1:\n        return 1\n    x = p\n    while x % q == 0:\n        x //= n\n    return x\nT = int(input())\nfor t in range(T):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        res = 1\n        for i in range(1, 10 ** 5):\n            if i * i > q:\n                break\n            if q % i == 0:\n                res = max(res, f(i), f(q // i))\n        print(res)", "n = input()\nfor i in range(int(n)):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= q:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for l in a:\n        k = p\n        while k % q == 0:\n            k //= l\n        x = max(k, x)\n    print(x)", "for j in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n        continue\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "for _ in ' ' * int(input()):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        lst = []\n        i = 2\n        while i * i <= q:\n            if not q % i:\n                lst.append(i)\n                if i != q // i:\n                    lst.append(q // i)\n            i += 1\n        lst.append(q)\n        num = 1\n        for k in lst:\n            ele = p\n            while not ele % k:\n                ele //= k\n                if ele % q:\n                    num = max(num, ele)\n                    break\n        print(num)", "num = int(input())\nfor j in range(num):\n    (p, q) = map(int, input().split())\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "for _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= x:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for i in a:\n        k = p\n        while k % q == 0:\n            k //= i\n        x = max(k, x)\n    print(x)", "for s in [*open(0)][1:]:\n    (p, q) = map(int, s.split())\n    l = []\n    j = 2\n    a = q\n    while j * j <= a:\n        if a % j == 0:\n            l += [j]\n            while a % j == 0:\n                a //= j\n        j += 1\n    if a > 1:\n        l += [a]\n        a = 1\n    for j in l:\n        k = p\n        while k % q == 0:\n            k //= j\n        a = max(k, a)\n    print(a)", "def f(n):\n    if n == 1:\n        return 1\n    x = p\n    while x % q == 0:\n        x //= n\n    return x\nT = int(input())\nfor t in range(T):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        res = 1\n        for i in range(1, q):\n            if i * i > q:\n                break\n            if q % i == 0:\n                res = max(res, f(i), f(q // i))\n        print(res)", "n = input()\nfor i in range(int(n)):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    cnt = 0\n    a = []\n    while j * j <= q:\n        if x % j == 0:\n            a.append(j)\n            cnt += 1\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n        cnt += 1\n    for l in range(cnt):\n        k = p\n        while k % q == 0:\n            k //= int(a[l])\n        if k > x:\n            x = k\n    print(x)", "num = int(input())\nfor j in range(num):\n    (p, q) = map(int, input().split())\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "def solve(p, q):\n    array = []\n    init = q\n    i = 2\n    while i ** 2 <= init:\n        if init % i == 0:\n            array.append(i)\n            while init % i == 0:\n                init //= i\n        i += 1\n    if init > 1:\n        array.append(init)\n    ans = 0\n    for c in array:\n        init2 = p\n        while init2 % q == 0:\n            init2 //= c\n        ans = max(ans, init2)\n    return ans\nt = int(input())\nfor test in range(t):\n    (p, q) = map(int, input().split())\n    print(solve(p, q))", "for _ in ' ' * int(input()):\n    (n, m) = map(int, input().split())\n    if n % m:\n        print(n)\n    else:\n        lst = []\n        x = 2\n        while x * x <= m:\n            if not m % x:\n                lst.append(x)\n                if x != m // x:\n                    lst.append(m // x)\n            x += 1\n        lst.append(m)\n        ans = 1\n        for i in lst:\n            elm = n\n            while not elm % i:\n                elm = elm // i\n                if elm % m:\n                    ans = max(ans, elm)\n                    break\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n        continue\n    (i, x, prime) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            prime.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        prime.append(x)\n        x = 1\n    for i in prime:\n        y = p\n        while y % q == 0:\n            y //= i\n        x = max(x, y)\n    print(x)", "def solve(P, Q):\n    can = []\n    q = Q\n    i = 2\n    while i ** 2 <= q:\n        if q % i == 0:\n            can.append(i)\n            while q % i == 0:\n                q //= i\n        i += 1\n    if q > 1:\n        can.append(q)\n    ans = 0\n    for c in can:\n        p = P\n        while p % Q == 0:\n            p //= c\n        ans = max(ans, p)\n    return ans\nT = int(input())\nfor _ in range(T):\n    (P, Q) = map(int, input().split())\n    print(solve(P, Q))", "for _ in ' ' * int(input()):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n    else:\n        lst = []\n        i = 2\n        while i * i <= q:\n            if not q % i:\n                lst.append(i)\n                if i != q // i:\n                    lst.append(q // i)\n            i += 1\n        lst.append(q)\n        num = 1\n        for k in lst:\n            ele = p\n            while not ele % k:\n                ele //= k\n                if ele % q:\n                    num = max(num, ele)\n                    break\n        print(num)", "n = input()\nfor i in range(int(n)):\n    (p, q) = map(int, input().split())\n    j = 2\n    x = q\n    a = []\n    while j * j <= q:\n        if x % j == 0:\n            a.append(j)\n            while x % j == 0:\n                x //= j\n        j += 1\n    if x > 1:\n        a.append(x)\n        x = 1\n    for l in a:\n        k = p\n        while k % q == 0:\n            k //= l\n        x = max(k, x)\n    print(x)", "for j in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q:\n        print(p)\n        continue\n    (i, x, pr) = (2, q, [])\n    while i * i <= q:\n        if x % i == 0:\n            pr.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        pr.append(x)\n        x = 1\n    for h in pr:\n        y = p\n        while y % q == 0:\n            y //= h\n        if y > x:\n            x = y\n    print(x)", "for s in [*open(0)][1:]:\n    (p, q) = map(int, s.split())\n    l = []\n    j = 2\n    a = q\n    while j * j <= a:\n        if a % j == 0:\n            l += [j]\n            while a % j == 0:\n                a //= j\n        j += 1\n    if a > 1:\n        l += [a]\n        a = 1\n    for j in l:\n        k = p\n        while k % q == 0:\n            k //= j\n        a = max(k, a)\n    print(a)", "for s in [*open(0)][1:]:\n    (p, q) = map(int, s.split())\n    l = []\n    j = 2\n    a = q\n    while j * j <= a:\n        if a % j == 0:\n            l += [j]\n            while a % j == 0:\n                a //= j\n        j += 1\n    if a > 1:\n        l += [a]\n        a = 1\n    for j in l:\n        k = p\n        while k % q == 0:\n            k //= j\n        a = max(k, a)\n    print(a)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        ok = True\n        i = 2\n        factors = []\n        p_original = p\n        q_original = q\n        while i * i <= q:\n            c = 0\n            while q % i == 0:\n                q //= i\n                c += 1\n            if c > 0:\n                factors.append((i, c))\n            i += 1\n        if q > 1:\n            factors.append((q, 1))\n        extra = []\n        for (factor, c) in factors:\n            cnt = 0\n            while p % factor == 0:\n                p //= factor\n                cnt += 1\n            extra.append(factor ** (cnt - c + 1))\n        print(p_original // min(extra))", "import math\n\ndef solve(n):\n    l.append(n)\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n        i = i + 1\nt = int(input())\nfor er in range(t):\n    (p, q) = map(int, input().split())\n    if p % q != 0:\n        print(p)\n    else:\n        l = []\n        solve(q)\n        ans = 1\n        for val in l:\n            cur = p\n            while cur % val == 0:\n                cur = cur // val\n                if cur % q != 0:\n                    ans = max(ans, cur)\n                    break\n        print(ans)", "for _ in range(int(input())):\n    (p, q) = [int(z) for z in input().split()]\n    (i, x, lst) = (2, q, [])\n    while i ** 2 <= q:\n        if x % i == 0:\n            lst.append(i)\n            while x % i == 0:\n                x //= i\n        i += 1\n    if x > 1:\n        lst.append(x)\n        x = 1\n    for elem in lst:\n        y = p\n        while y % q == 0:\n            y //= elem\n        if y > x:\n            x = y\n    print(x)", "n = int(input())\nfor j in range(n):\n    (p, q) = map(int, input().split())\n    (i, x, lis) = (2, q, [])\n    while i ** 2 <= q:\n        if x % i == 0:\n            lis.append(i)\n            while x % i == 0:\n                x = x // i\n        i = i + 1\n    if x > 1:\n        lis.append(x)\n        x = 1\n    for o in lis:\n        y = p\n        while y % q == 0:\n            y = y // o\n        if y > x:\n            x = y\n    print(x)", "primes = [2, 3]\nfor j in range(3, 35000):\n    for k in primes:\n        if j % k == 0:\n            break\n    else:\n        primes.append(j)\nt = int(input())\nfor i in range(t):\n    (p, q) = [int(k) for k in input().split()]\n    v = 10 ** 20\n    l = q\n    zxc = p\n    res = []\n    d = {}\n    for j in primes:\n        d[j] = 0\n        while l % j == 0:\n            d[j] += 1\n            l //= j\n    if l != 1:\n        d[l] = 1\n        v = l\n    primes.append(v)\n    if p % q:\n        print(p)\n    else:\n        c = {}\n        for j in primes:\n            if q % j == 0:\n                c[j] = 0\n                while p % j == 0:\n                    c[j] += 1\n                    p //= j\n                if d[j] > 0:\n                    res.append(j ** (c[j] - d[j] + 1))\n        print(zxc // min(res))"]