["for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(min(int(input()), int(input())))\n        continue\n    kur = list(map(int, input().split()))\n    sam = list(map(int, input().split()))\n    worst = sorted(range(n), key=lambda i: kur[i], reverse=True)\n    s = 0\n    for w in worst:\n        if s + sam[w] < kur[w]:\n            s += sam[w]\n            kur[w] = 0\n        else:\n            break\n    print(max(s, *kur))", "def solve(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if sum(b) <= min(a):\n        print(sum(b))\n        return\n    nums = [[x, y] for (x, y) in zip(a, b)]\n    nums = sorted(nums, key=lambda x: -x[0])\n    ans = nums[-1][0]\n    su = 0\n    for (x, y) in nums:\n        if su + y < x:\n            su += y\n        else:\n            ans = max(x, su)\n            break\n    print(ans)\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        solve(t + 1)\nmain()", "def get_fastest_schedule_time(a, b):\n    sorted_dishes = sorted(zip(a, b), reverse=True)\n    take_time = 0\n    last_taken = -1\n    for (i, ab) in enumerate(sorted_dishes):\n        (aa, bb) = ab\n        if take_time + bb < aa:\n            take_time += bb\n            last_taken = i\n        else:\n            break\n    if last_taken == len(sorted_dishes) - 1:\n        return take_time\n    return max(take_time, sorted_dishes[last_taken + 1][0])\nn_samples = int(input())\nfor t in range(n_samples):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    print(get_fastest_schedule_time(a, b))", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append((x[i], y[i]))\n    a.sort(key=lambda x: x[0])\n    a.reverse()\n    delivered = 0\n    travelled = 0\n    for i in range(n):\n        if a[i][0] > travelled + a[i][1]:\n            travelled += a[i][1]\n        else:\n            delivered = a[i][0]\n            break\n    print(max(delivered, travelled))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    c = dict()\n    x = 0\n    for i in range(n):\n        if a[i] not in c:\n            c[a[i]] = b[i]\n        else:\n            c[a[i]] += b[i]\n    d = sorted(c, reverse=True)\n    for i in d:\n        if i > x + c[i]:\n            x = x + c[i]\n        elif x >= i:\n            x = x\n        else:\n            x = i\n            break\n    print(x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = (a[i], b[i])\n    a.sort(key=lambda x: x[0])\n    curr = 0\n    if a[n - 1][0] <= a[n - 1][1]:\n        print(a[n - 1][0])\n        continue\n    curr = a[n - 1][1]\n    i = n - 2\n    ans = -1\n    while i >= 0 and curr <= a[i][0]:\n        curr += a[i][1]\n        if curr > a[i][0]:\n            curr -= a[i][0]\n            ans = a[i][0]\n            break\n        i -= 1\n    if ans > 0:\n        print(ans)\n    else:\n        print(curr)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    left = []\n    amax = 0\n    for j in range(n):\n        if a[j] > b[j]:\n            left.append([a[j], b[j]])\n        elif a[j] > amax:\n            amax = a[j]\n    c = 0\n    for j in list(reversed(sorted(left))):\n        if c + j[1] <= j[0]:\n            c += j[1]\n        else:\n            if amax < j[0]:\n                amax = j[0]\n            break\n    if len(a) == 0:\n        print(c)\n    else:\n        print(max(amax, c))", "noOfTestCases = int(input())\nfor testCase in range(noOfTestCases):\n    noOfDeliveries = int(input())\n    As = [int(i) for i in input().split()]\n    Bs = [int(i) for i in input().split()]\n    tempIndex = list(range(len(As)))\n    tempIndex.sort(key=As.__getitem__, reverse=True)\n    As = list(map(As.__getitem__, tempIndex))\n    Bs = list(map(Bs.__getitem__, tempIndex))\n    Btime = Bs[0]\n    totalTime = As[0]\n    for i in range(1, noOfDeliveries):\n        totalTime = min(totalTime, max(As[i], Btime))\n        Btime += Bs[i]\n    totalTime = min(totalTime, Btime)\n    print(totalTime)", "t = int(input())\n\ndef solve(n, a, b):\n    aa = [(x, i) for (i, x) in enumerate(a)]\n    aa.sort()\n    aa.reverse()\n    pick = 0\n    start = 0\n    while start < n and pick < aa[start][0]:\n        pick += b[aa[start][1]]\n        start += 1\n    print(min(aa[start - 1][0], pick))\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    solve(n, a, b)", "def time():\n    pick = 0\n    for v in comb:\n        if v[0] >= v[1]:\n            pick += v[1]\n            if pick >= v[0]:\n                return max(pick - v[1], v[0])\n        else:\n            return max(pick, v[0])\n    return pick\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    comb = [[a[i], b[i]] for i in range(n)]\n    comb.sort(key=lambda x: x[0], reverse=True)\n    print(time())", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort(key=lambda x: -x[0])\n    a = [row[0] for row in c]\n    b = [row[1] for row in c]\n    l = 0\n    r = n\n    while r - l > 1:\n        k = (r + l) // 2\n        if a[k] > sum(b[:k]):\n            l = k\n        else:\n            r = k\n    print(min(a[l], sum(b[:l + 1])))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    a = []\n    b = [0]\n    s = 0\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        a += (x,)\n        s += y\n        b += (s,)\n    print(min(map(max, zip(a + [0], b))))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort(reverse=True)\n    z = 0\n    for i in range(n):\n        (x, y) = c[i]\n        if x > y and y + z < x:\n            z += y\n        else:\n            z = max(z, x)\n            break\n    print(z)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    a = []\n    b = [0]\n    s = 0\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        a += (x,)\n        s += y\n        b += (s,)\n    print(min(map(max, a + b, b)))", "t = int(input())\n(aa, bb) = ([], [])\nfor _ in range(t):\n    input()\n    ss = input().split()\n    aa.append([int(s) for s in ss])\n    ss = input().split()\n    bb.append([int(s) for s in ss])\n\ndef get_sum(b, ind):\n    res = 0\n    for i in ind:\n        res += b[i]\n    return res\nfor i in range(t):\n    indexes = sorted(range(len(aa[i])), key=lambda x: aa[i][x], reverse=True)\n    cur_time = aa[i][indexes[0]]\n    last_s = total_s = prev_j = 0\n    for j in range(1, len(indexes)):\n        if aa[i][indexes[j]] < cur_time:\n            s = get_sum(bb[i], indexes[prev_j:j])\n            total_s += s\n            if total_s >= cur_time:\n                print(max(last_s, cur_time))\n                break\n            cur_time = aa[i][indexes[j]]\n            last_s = total_s\n            prev_j = j\n    else:\n        total_s = last_s + get_sum(bb[i], indexes[prev_j:len(bb[i])])\n        if total_s > cur_time:\n            print(max(last_s, cur_time))\n        else:\n            print(total_s)", "import math\nimport sys, bisect\nfrom heapq import *\nfrom itertools import *\nfrom collections import *\nsys.setrecursionlimit(10 ** 6)\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    n = I()\n    A = Neo()\n    B = Neo()\n    Ans = []\n    for (i, j) in zip(A, B):\n        Ans += [(i, j)]\n    Ans.sort()\n    t = 0\n    for (i, j) in Ans[::-1]:\n        p = t + j\n        if p >= i:\n            t = max(t, i)\n            break\n        else:\n            t = p\n    print(t)", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k = sorted(zip(b, c))\n    ans = sum(c)\n    out = ans\n    for i in k:\n        ans -= i[1]\n        out = min(out, max(i[0], ans))\n    print(out)", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k = sorted(zip(b, c))\n    ans = sum(c)\n    out = ans\n    for i in k:\n        ans -= i[1]\n        out = min(out, max(i[0], ans))\n    print(out)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    max_wait = 0\n    driving_time = 0\n    nA = []\n    nB = []\n    both = []\n    for i in range(n):\n        if B[i] >= A[i]:\n            max_wait = max(max_wait, A[i])\n        else:\n            nA.append(A[i])\n            nB.append(B[i])\n            both.append((A[i], B[i]))\n    both.sort(key=lambda tup: tup[0], reverse=True)\n    for tup in both:\n        if tup[0] <= max_wait:\n            del tup\n            continue\n        if driving_time + tup[1] < max(max_wait, tup[0]):\n            driving_time += tup[1]\n        else:\n            max_wait = max(max_wait, tup[0])\n    print(max(max_wait, driving_time))", "for _ in range(int(input())):\n    n = int(input())\n    output = 0\n    first = list(map(int, input().split()))\n    second = list(map(int, input().split()))\n    temp = []\n    for i in range(n):\n        temp.append([first[i], second[i]])\n    temp.sort(key=lambda x: x[0])\n    temp.reverse()\n    for i in range(n):\n        if output <= temp[i][0]:\n            output += temp[i][1]\n        else:\n            break\n        if output >= temp[i][0]:\n            output = temp[i][0]\n            break\n    print(output)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k = sorted(zip(b, c))\n    ans = sum(c)\n    out = ans\n    for i in k:\n        ans -= i[1]\n        out = min(out, max(i[0], ans))\n    print(out)", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nM = lambda : map(int, stdin.readline().strip().split())\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    n = I()\n    a = L()\n    b = L()\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    x = sum(b)\n    ans = x\n    s = 0\n    for i in range(n):\n        s += c[i][1]\n        ans = min(ans, max(c[i][0], x - s))\n    print(ans)\nfor _ in range(I()):\n    solve()", "T = int(input())\nfor z in range(T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = list(zip(a, b))\n    c.sort(reverse=True)\n    small = 10 ** 9\n    rem = 0\n    for i in range(n + 1):\n        if i != n:\n            e = c[i][0]\n        else:\n            e = 0\n        if i != 0:\n            rem += c[i - 1][1]\n        e = max(e, rem)\n        if small > e:\n            small = e\n    print(small)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i]])\n    l.sort(reverse=True)\n    s = 0\n    for i in range(n):\n        if l[i][0] > s + l[i][1]:\n            s += l[i][1]\n        else:\n            break\n    if s != sum(b):\n        s = max(l[i][0], s)\n    print(s)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    (a, b) = zip(*sorted(zip(R(), R()))[::-1])\n    c = [0]\n    s = 0\n    for x in b:\n        s += x\n        c += (s,)\n    print(min(map(max, zip((*a, 0), c))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    a = []\n    b = [0]\n    s = 0\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        a += (x,)\n        s += y\n        b += (s,)\n    print(min(map(max, a + [0], b)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ord = []\n    for i in range(n):\n        ord.append([a[i], b[i]])\n    ord = sorted(ord, reverse=True)\n    ans = 0\n    time = 0\n    ans = 0\n    summ = ans\n    for i in range(n):\n        if ord[i][0] >= ans + ord[i][1]:\n            ans = ans + ord[i][1]\n        else:\n            ans = max(ord[i][0], ans)\n            break\n    print(ans)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    list3 = []\n    for i in range(n):\n        list3.append([list1[i], list2[i]])\n    list3.sort(key=lambda x: x[0])\n    ans = list3[-1][0]\n    i = n - 2\n    temp = 0\n    while i >= 0:\n        temp += list3[i + 1][1]\n        if max(list3[i][0], temp) < ans:\n            ans = max(list3[i][0], temp)\n        i -= 1\n    ans = min(ans, sum(list2))\n    print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = [None] * n\n    for i in range(n):\n        arr[i] = [a[i], b[i]]\n    arr.sort(key=lambda a: a[0], reverse=True)\n    res = arr[0][0]\n    arr.append([0, 0])\n    currSum = 0\n    for i in range(n):\n        currSum += arr[i][1]\n        res = min(res, max(arr[i + 1][0], currSum))\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    t = []\n    for i in range(n):\n        t.append([a[i], b[i]])\n    t.sort()\n    cnt = 0\n    ans = t[-1][0]\n    check = False\n    for i in range(n - 1, -1, -1):\n        if t[i][1] < t[i][0]:\n            cnt += t[i][1]\n            if cnt >= ans:\n                cnt -= t[i][1]\n                break\n            if i >= 0:\n                ans = t[i - 1][0]\n        else:\n            break\n    print(max(min(ans, sum(b)), cnt))", "def solve(n, a, b):\n    res = []\n    for i in range(n):\n        res.append([a[i], b[i]])\n    res.sort()\n    sumb = sum(b)\n    ans = sumb\n    for i in range(n):\n        ans = min(ans, max(res[i][0], sumb - res[i][1]))\n        sumb -= res[i][1]\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, a, b))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort(key=lambda x: x[0])\n    min = 0\n    for i in range(n):\n        min += c[i][1]\n    kek = min\n    k = 0\n    for i in range(n):\n        k += c[i][1]\n        if min >= max(c[i][0], kek - k):\n            min = max(c[i][0], kek - k)\n    print(min)", "for _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    K = sorted(zip(A, B))\n    result = sum(B)\n    ans = result\n    for i in K:\n        result -= i[1]\n        ans = min(ans, max(i[0], result))\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    comb = []\n    flag = 0\n    for (i, val) in enumerate(a):\n        comb.append([a[i], b[i]])\n    comb.sort()\n    for i in range(n - 2, -1, -1):\n        comb[i][1] = comb[i][1] + comb[i + 1][1]\n    if comb[0][0] >= comb[0][1]:\n        print(comb[0][1])\n        t -= 1\n        continue\n    for i in range(1, n):\n        if comb[i][0] >= comb[i][1]:\n            print(max(comb[i][1], comb[i - 1][0]))\n            flag = 1\n            break\n    if not flag:\n        print(comb[-1][0])\n    t -= 1", "for y in range(int(input())):\n    n = int(input())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    lst = [0] * n\n    for i in range(n):\n        lst[i] = [lst1[i], lst2[i]]\n    lst.sort()\n    ans = sum(lst2)\n    minn = ans\n    for i in range(n):\n        ans = ans - lst[i][1]\n        minn = min(max(lst[i][0], ans), minn)\n    print(minn)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ab = []\n    for (x, y) in zip(a, b):\n        ab.append([x, y])\n    ab.sort()\n    ab.reverse()\n    ps = [ab[0][1]]\n    for (x, y) in ab[1:]:\n        ps.append(ps[-1] + y)\n    res = ab[0][0]\n    for x in range(1, n):\n        t = max(ps[x - 1], ab[x][0])\n        if t < res:\n            res = t\n    print(min(res, ps[-1]))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    cs = 0\n    for i in range(n):\n        k = [a[i], b[i]]\n        l.append(k)\n        cs += b[i]\n    l.sort(reverse=True)\n    ans = min(l[0][0], cs)\n    cs = l[0][1]\n    for i in range(1, n):\n        ans = min(ans, max(l[i][0], cs))\n        cs += l[i][1]\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append((a[i], b[i]))\n    arr.sort()\n    s = []\n    x = 0\n    for i in range(n):\n        x = x + arr[i][1]\n        s.append(x)\n    ans = 100000000000000000\n    for i in range(n):\n        ans = min(ans, max(x - s[i], arr[i][0]))\n    ans = min(ans, x)\n    ans = min(ans, arr[-1][0])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    tup = [[0, 0]] + sorted([[a[i], b[i]] for i in range(n)], key=lambda x: x[0])\n    tup += [[0, 0]]\n    for i in range(n - 1, -1, -1):\n        tup[i][1] += tup[i + 1][1]\n    res = max(tup[0][0], tup[1][1])\n    for i in range(1, n + 1):\n        res = min(res, max(tup[i][0], tup[i + 1][1]))\n    print(res)", "for y in range(int(input())):\n    n = int(input())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    lst = [0] * n\n    for i in range(n):\n        lst[i] = [lst1[i], lst2[i]]\n    lst.sort()\n    ans = sum(lst2)\n    minn = ans\n    for i in range(n):\n        ans = ans - lst[i][1]\n        minn = min(max(lst[i][0], ans), minn)\n    print(minn)", "import sys\nt = int(sys.stdin.readline())\nans = []\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    if n == 1:\n        ans.append(min(a[0], b[0]))\n    else:\n        c = sorted(list(zip(a, b)), reverse=True)\n        b_time = 0\n        for i in range(n):\n            b_time += c[i][1]\n            if b_time >= c[i][0]:\n                b_time = max(c[i][0], b_time - c[i][1])\n                break\n        ans.append(b_time)\nsys.stdout.write('\\n'.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = []\n    an = 10000000001\n    s = 0\n    for i in range(n):\n        s += b[i]\n        p.append([a[i], b[i]])\n    s1 = s\n    p.sort()\n    for i in range(n):\n        s -= p[i][1]\n        an = min(an, max(p[i][0], s))\n    print(min(an, s1))", "import sys\nimport math\nimport collections\nimport bisect\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n = int(input())\n    a = get_list()\n    b = get_list()\n    case1 = sum(a)\n    case2 = sum(b)\n    case3 = case2\n    maxim = 0\n    ans = 10 ** 10\n    arr = []\n    for i in range(n):\n        val = [a[i], b[i]]\n        arr.append(val)\n    arr.sort()\n    for i in range(n):\n        val = max(case3 - arr[i][1], arr[i][0])\n        case3 -= arr[i][1]\n        ans = min(ans, val)\n    print(min(case2, case1, ans))", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    pair = []\n    for i in range(n):\n        pair.append([l1[i], l2[i]])\n    pair.sort()\n    su = 0\n    sums = []\n    for i in range(n - 1, -1, -1):\n        su += pair[i][1]\n        sums.append(su)\n    sums = sums[::-1]\n    ans = pair[-1][0]\n    maxi = 0\n    for i in range(n):\n        ans = min(ans, max(maxi, sums[i]))\n        maxi = pair[i][0]\n    print(ans)", "import sys\nans = []\nfor _ in range(int(sys.stdin.readline())):\n    sys.stdin.readline()\n    a = [*map(int, sys.stdin.readline().split())]\n    b = [*map(int, sys.stdin.readline().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    ss = 0\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i]])\n    l.sort()\n    kkk = sum([l[j][1] for j in range(n)])\n    kk = kkk\n    for i in range(n):\n        kkk -= l[i][1]\n        bb = max(l[i][0], kkk)\n        if kk > bb:\n            kk = bb\n    print(kk)", "def do():\n    import itertools\n    squery = lambda a, b: sdat[b + 1] - sdat[a]\n    n = int(input())\n    data = list(map(int, input().split()))\n    datb = list(map(int, input().split()))\n    dat = []\n    for i in range(n):\n        dat.append([data[i], datb[i]])\n    dat.sort()\n    dat.append([0, 0])\n    l = []\n    for i in range(n + 1):\n        l.append(dat[i][1])\n    sdat = list(itertools.accumulate(itertools.chain([0], l)))\n    res = 10 ** 18\n    for i in range(n):\n        res = min(res, max(dat[i][0], squery(i + 1, n)))\n    print(min(res, sum(datb)))\nq = int(input())\nfor _ in range(q):\n    do()", "import sys\nans = []\nfor _ in range(int(sys.stdin.readline())):\n    sys.stdin.readline()\n    a = [*map(int, sys.stdin.readline().split())]\n    b = [*map(int, sys.stdin.readline().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    pick = 0\n    delivery = 0\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i]])\n    l.sort(reverse=True)\n    a = []\n    b = []\n    for i in range(n):\n        a.append(l[i][0])\n        b.append(l[i][1])\n    for i in range(n):\n        if pick + b[i] < a[i]:\n            pick = pick + b[i]\n        else:\n            delivery = max(delivery, a[i])\n    print(max(pick, delivery))", "inp = [*open(0)]\nfor t in range(int(inp[0])):\n    t *= 3\n    N = int(inp[t + 1])\n    if N == 1:\n        print(min(int(inp[t + 2]), int(inp[t + 3])))\n        continue\n    a = list(map(int, inp[t + 2].split()))\n    b = list(map(int, inp[t + 3].split()))\n    c = sorted(list(zip(a, b)))\n    (P, M) = (0, 0)\n    for i in range(N - 1, -1, -1):\n        if P + c[i][1] < c[i][0]:\n            P += c[i][1]\n        else:\n            M = c[i][0]\n            break\n    print(max(P, M))", "import sys\nans = []\nfor _ in range(int(sys.stdin.readline())):\n    sys.stdin.readline()\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        que = deque(sorted([[a, b] for (a, b) in zip(A, B)], key=lambda x: [-x[0], x[1]]))\n        res = [[que[0][0], 0]]\n        tot = 0\n        for i in range(n):\n            (a, b) = que.popleft()\n            tot += b\n            ma = que[0][0] if que else 0\n            res.append([ma, tot])\n        ans = f_inf\n        for (a, b) in res:\n            ans = min(ans, max(a, b))\n        print(ans)\nresolve()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    zipp = list(zip(l, k))\n    zipp.sort()\n    s = sum(k)\n    x = 0\n    anss = float('inf')\n    for i in zipp:\n        v = i[0]\n        x += i[1]\n        left = s - x\n        anss = min(anss, v + max(left - v, 0))\n    p = sum(l)\n    hpp = list(zip(k, l))\n    x = 0\n    w = 0\n    for i in hpp:\n        x += i[0]\n        w += i[1]\n        left = p - w\n        anss = min(anss, x + max(left - x, 0))\n    print(anss)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    lst3 = []\n    for i in range(n):\n        lst3.append([lst1[i], lst2[i]])\n    lst3 = sorted(lst3)\n    for i in range(n):\n        lst1[i] = lst3[i][0]\n        lst2[i] = lst3[i][1]\n    sum1 = sum(lst2)\n    sumprev = 0\n    ans = sum1\n    for i in range(n):\n        sumprev += lst2[i]\n        ans = min(ans, max(lst1[i], sum1 - sumprev))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    zipp = list(zip(l, k))\n    zipp.sort()\n    s = sum(k)\n    x = 0\n    anss = float('inf')\n    for i in zipp:\n        v = i[0]\n        x += i[1]\n        left = s - x\n        anss = min(anss, v + max(left - v, 0))\n    p = sum(l)\n    hpp = list(zip(k, l))\n    x = 0\n    w = 0\n    for i in hpp:\n        x += i[0]\n        w += i[1]\n        left = p - w\n        anss = min(anss, x + max(left - x, 0))\n    print(anss)", "n = int(input())\ntoprint = []\nfor i in range(n):\n    m = int(input())\n    if m != 1:\n        t1 = [int(q) for q in input().split()]\n        t2 = [int(q) for q in input().split()]\n        z = sorted(zip(t1, t2), reverse=True)\n        (s, p) = (0, 0)\n        for k in range(m):\n            if z[k][0] > z[k][1] + s:\n                s += z[k][1]\n            else:\n                p = max(p, z[k][0])\n        toprint.append(max(p, s))\n    else:\n        toprint.append(min(int(input()), int(input())))\nprint('\\n'.join(map(str, toprint)))", "def func(a, b):\n    c = sorted(list(zip(a, b)), reverse=True)\n    d = 0\n    for j in range(n):\n        d += c[j][1]\n        if d >= c[j][0]:\n            d = max(c[j][0], d - c[j][1])\n            break\n    ans[i] = str(d)\nm = int(input())\nans = [0] * m\nfor i in range(m):\n    n = int(input())\n    if n == 1:\n        a = int(input())\n        b = int(input())\n        ans[i] = str(min(a, b))\n        continue\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    func(a, b)\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort(key=lambda x: (x[0], -x[1]))\n    maxa = [c[i][0] for i in range(n)]\n    for i in range(1, n):\n        maxa[i] = max(c[i][0], maxa[i - 1])\n    sumb = [c[i][1] for i in range(n)]\n    sumb.append(0)\n    for i in range(n - 1, -1, -1):\n        sumb[i] = sumb[i + 1] + c[i][1]\n    mincost = float('inf')\n    for i in range(n):\n        mincost = min(mincost, max(maxa[i], sumb[i + 1]))\n    mincost = min(mincost, sumb[0])\n    print(mincost)", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        pair = []\n        for i in range(len(a)):\n            pair.append([a[i], b[i]])\n        pair = sorted(pair)\n        stack = []\n        stack.append(pair[0])\n        for i in range(1, len(pair)):\n            if stack[-1][0] == pair[i][0]:\n                stack[-1][1] += pair[i][1]\n            else:\n                stack.append(pair[i])\n        prefix = [0] * len(stack)\n        prefix[-1] = stack[-1][1]\n        for i in range(len(stack) - 2, -1, -1):\n            prefix[i] = prefix[i + 1] + stack[i][1]\n        maxi = []\n        for i in range(len(stack) - 1):\n            maxi.append(max(stack[i][0], prefix[i + 1]))\n        maxi.append(stack[-1][0])\n        maxi.append(prefix[0])\n        res = min(maxi)\n        print(res)\nexcept:\n    pass", "t = int(input())\nans = []\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        ans.append(min(a[0], b[0]))\n        continue\n    c = list(zip(a, b))\n    c.sort(key=lambda x: (-x[0], x[1]))\n    for i in range(1, n):\n        c[i] = (c[i][0], c[i][1] + c[i - 1][1])\n    ans.append(max(map(min, c)))\nelse:\n    print('\\n'.join(map(str, ans)))", "time = []\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        time.append(min(a[0], b[0]))\n        continue\n    else:\n        c = sorted(list(zip(a, b)), reverse=True)\n        y = 0\n        ti = 0\n        for i in range(n):\n            if y + c[i][1] < c[i][0]:\n                y += c[i][1]\n                ti = max(ti, y)\n            else:\n                ti = max(ti, c[i][0])\n        time.append(ti)\nprint('\\n'.join(map(str, time)))", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        ans.append(min(a[0], b[0]))\n        continue\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort(key=lambda x: (x[0], x[1] * -1), reverse=True)\n    time = 0\n    for i in range(n - 1):\n        if time + c[i][1] >= c[i + 1][0]:\n            ans.append(min(c[i][0], time + c[i][1]))\n            break\n        time += c[i][1]\n    else:\n        ans.append(min(c[-1][0], time + c[-1][1]))\nprint('\\n'.join((str(x) for x in ans)))", "import sys, threading, os.path\nimport string, heapq\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(2 ** 27)\n\ndef main():\n    if os.path.exists('in.rtf'):\n        input = open('in.rtf', 'r')\n    else:\n        input = sys.stdin\n    t = int(input.readline())\n    results = []\n    for i in range(t):\n        n = int(input.readline())\n        ai = list(map(int, input.readline().split()))\n        bi = list(map(int, input.readline().split()))\n        (sum_a, sum_b) = (0, 0)\n        h = []\n        result = 0\n        for j in range(n):\n            heapq.heappush(h, (-ai[j], j))\n        result = min(ai[0], bi[0])\n        while len(h) > 0:\n            temp = heapq.heappop(h)\n            sum_a = -temp[0]\n            sum_b += bi[temp[1]]\n            result = max(result, min(sum_a, sum_b))\n        results.append(result)\n    output = '\\n'.join(map(str, results))\n    if os.path.exists('out.rtf'):\n        open('out.rtf', 'w').writelines(str(output))\n    else:\n        sys.stdout.write(str(output))\nmain()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    if n == 1:\n        sys.stdout.write('{}\\n'.format(min(a[0], b[0])))\n    else:\n        c = sorted(list(zip(a, b)), reverse=True)\n        b_time = 0\n        for i in range(n):\n            b_time += c[i][1]\n            if b_time >= c[i][0]:\n                b_time = max(c[i][0], b_time - c[i][1])\n                break\n        sys.stdout.write('{}\\n'.format(b_time))", "from sys import stdin\ninput = stdin.readline\n\ndef dish(deli, pick):\n    if len(deli) == 1:\n        return min(deli[0], pick[0])\n    blanck = list(zip(deli, pick))\n    temp = 0\n    deliv = 0\n    blanck = sorted(blanck, key=lambda s: s[0], reverse=True)\n    for i in blanck:\n        if i[0] <= temp + i[1]:\n            deliv = max(i[0], deliv)\n        else:\n            temp += i[1]\n    return max(temp, deliv)\nt = int(input())\nfor i in range(t):\n    a = input()\n    lst1 = list(map(int, input().strip().split()))\n    lst2 = list(map(int, input().strip().split()))\n    print(dish(lst1, lst2))", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    s = 0\n    ans = 0\n    for (x, y) in sorted(zip(R(), R()), reverse=True):\n        if ans > x:\n            break\n        if ans + y >= x:\n            ans = x\n            break\n        ans += y\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = input().split()\n    B = input().split()\n    C = [(int(A[i]), int(B[i])) for i in range(n)]\n    ans = 0\n    for (a, b) in sorted(C, reverse=True):\n        if ans > a:\n            break\n        if ans + b >= a:\n            ans = a\n            break\n        ans += b\n    print(ans)", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    s = 0\n    ans = 0\n    for (x, y) in sorted(zip(R(), R()), reverse=True):\n        if ans > x:\n            break\n        if ans + y >= x:\n            ans = x\n            break\n        ans += y\n    print(ans)", "ans = []\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        ans.append(min(a[0], b[0]))\n    else:\n        t = sorted(list(zip(a, b)), reverse=True)\n        d_t = 0\n        mi = t[0][0]\n        for i in range(n):\n            if t[i][0] <= t[i][1] + d_t:\n                mi = max(t[i][0], d_t)\n                break\n            else:\n                d_t += t[i][1]\n        ans.append(min(mi, sum(b)))\nprint('\\n'.join(map(str, ans)))", "T = int(input())\nto_print = []\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        to_print.append(min(a[0], b[0]))\n        continue\n    ab = list(zip(a, b))\n    ab.sort()\n    k = n - 1\n    suffix_sum = 0\n    while suffix_sum <= ab[k][0] and k >= 0:\n        suffix_sum += ab[k][1]\n        k -= 1\n    to_print.append(min(ab[k + 1][0], suffix_sum))\nelse:\n    print('\\n'.join(map(str, to_print)))", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    L = 0\n    R = max(a)\n    while L < R:\n        mid = (L + R) // 2\n        if sum((y if x > mid else 0 for (x, y) in zip(a, b))) <= mid:\n            R = mid\n        else:\n            L = mid + 1\n    print(L)", "T = int(input())\nto_print = []\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        to_print.append(min(a[0], b[0]))\n        continue\n    ab = list(zip(a, b))\n    ab.sort()\n    k = n - 1\n    suffix_sum = 0\n    while suffix_sum <= ab[k][0] and k >= 0:\n        suffix_sum += ab[k][1]\n        k -= 1\n    to_print.append(min(ab[k + 1][0], suffix_sum))\nelse:\n    print('\\n'.join(map(str, to_print)))", "T = int(input())\nto_print = []\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        to_print.append(min(a[0], b[0]))\n        continue\n    ab = list(zip(a, b))\n    ab.sort(key=lambda x: (-x[0], x[1]))\n    for i in range(1, n):\n        ab[i] = (ab[i][0], ab[i][1] + ab[i - 1][1])\n    to_print.append(max(map(min, ab)))\nelse:\n    print('\\n'.join(map(str, to_print)))", "t = int(input())\n_ans = []\nfor _ in range(t):\n    n = int(input())\n    if n > 1:\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        dish = []\n        for i in range(n):\n            dish.append((a[i], b[i]))\n        dish.sort(key=lambda x: x[0], reverse=1)\n        _b = [dish[0][1]]\n        for i in range(1, n):\n            _b.append(_b[i - 1] + dish[i][1])\n        ans = dish[0][0]\n        dish.append((0, 0))\n        for _ in range(n):\n            i = _ + 1\n            time = max(_b[i - 1], dish[i][0])\n            if time < ans:\n                ans = time\n        _ans.append(ans)\n    else:\n        a = int(input())\n        b = int(input())\n        _ans.append(min(a, b))\nstr_ans = str(_ans)\nprint(str_ans[1:len(str_ans) - 1].replace(' ', '').replace(',', '\\n'))", "an = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        a = int(input())\n        b = int(input())\n        if a == b:\n            an.append(a)\n        else:\n            an.append(min(a, b))\n    else:\n        a = [int(x) for x in input().split()]\n        b = [int(x) for x in input().split()]\n        dish = list(zip(a, b))\n        dish.sort(key=lambda x: x[0])\n        if min(b) > dish[-1][0]:\n            an.append(dish[-1][0])\n        else:\n            s = sum(b)\n            ans = min(dish[-1][0], s)\n            if dish[0][0] < s:\n                for d in dish:\n                    s -= d[1]\n                    time = max(d[0], s)\n                    ans = min(ans, time)\n            an.append(ans)\nfor i in range(t):\n    print(an[i])", "T = int(input())\nto_print = []\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        to_print.append(min(a[0], b[0]))\n        continue\n    ab = list(zip(a, b))\n    ab.sort(key=lambda x: (-x[0], x[1]))\n    for i in range(1, n):\n        ab[i] = (ab[i][0], ab[i][1] + ab[i - 1][1])\n    to_print.append(max(map(min, ab)))\nelse:\n    print('\\n'.join(map(str, to_print)))", "t = int(input())\n_ans = []\nfor _ in range(t):\n    n = int(input())\n    if n > 1:\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        dish = []\n        for i in range(n):\n            dish.append((a[i], b[i]))\n        dish.sort(key=lambda x: x[0], reverse=1)\n        _b = [dish[0][1]]\n        for i in range(1, n):\n            _b.append(_b[i - 1] + dish[i][1])\n        ans = dish[0][0]\n        dish.append((0, 0))\n        for _ in range(n):\n            i = _ + 1\n            time = max(_b[i - 1], dish[i][0])\n            if time < ans:\n                ans = time\n        _ans.append(ans)\n    else:\n        a = int(input())\n        b = int(input())\n        _ans.append(min(a, b))\nprint(str(_ans).replace(' ', '').replace('[', '').replace(']', '').replace(',', '\\n'))", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        a = int(input())\n        b = int(input())\n        ans.append(min(a, b))\n    else:\n        k = n\n        a = [int(x) for x in input().split()]\n        b = [int(x) for x in input().split()]\n        (a, b) = zip(*sorted(zip(a, b)))\n        c1 = a[k - 1]\n        c2 = 0\n        time = [a[k - 1]]\n        while c1 > c2 and k - 2 >= 0:\n            c1 = a[k - 2]\n            c2 += b[k - 1]\n            time.append(max(c1, c2))\n            k = k - 1\n        time.append(sum(b))\n        ans.append(min(time))\nfor g in ans:\n    print(g)", "T = int(input())\nto_print = []\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        to_print.append(min(a[0], b[0]))\n        continue\n    ab = list(zip(a, b))\n    ab.sort(key=lambda x: (-x[0], x[1]))\n    for i in range(1, n):\n        ab[i] = (ab[i][0], ab[i][1] + ab[i - 1][1])\n    to_print.append(max(map(min, ab)))\nelse:\n    print('\\n'.join(map(str, to_print)))", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        a = int(input())\n        b = int(input())\n        ans.append(min(a, b))\n    else:\n        a = [int(x) for x in input().split()]\n        b = [int(x) for x in input().split()]\n        (a, b) = zip(*sorted(zip(a, b)))\n        c1 = a[n - 1]\n        c2 = 0\n        time = [a[n - 1], sum(b)]\n        while c1 > c2 and n - 2 >= 0:\n            c1 = a[n - 2]\n            c2 += b[n - 1]\n            time.append(max(c1, c2))\n            n = n - 1\n        ans.append(min(time))\nfor g in ans:\n    print(g)", "t = int(input())\nlans = ''\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        lans += str(min(int(input()), int(input()))) + '\\n'\n        continue\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ls = []\n    for i in range(n):\n        ls.append([a[i], b[i]])\n    ls.sort(reverse=True)\n    ans = ls[0][0]\n    time = 0\n    for i in range(0, n):\n        time += ls[i][1]\n        if i == n - 1:\n            ans = min(ans, time)\n            break\n        q = max(time, ls[i + 1][0])\n        if ans >= q:\n            ans = q\n        else:\n            break\n    lans += str(ans) + '\\n'\nprint(lans)", "import sys\nt = int(sys.stdin.readline())\nfor k in range(t):\n    n = int(sys.stdin.readline())\n    a = map(int, sys.stdin.readline().split())\n    b = map(int, sys.stdin.readline().split())\n    zipped = list(zip(a, b))\n    zipped.sort()\n    i = zipped[-1][0]\n    j = 0\n    m = 0\n    while i > j:\n        c = zipped.pop()\n        j += c[1]\n        if len(zipped) == 0:\n            i = 0\n        else:\n            i = zipped[-1][0]\n    d = min(max(i, j), max(c[0], j - c[1]))\n    sys.stdout.write('{}\\n'.format(d))", "t = []\nfor _ in range(int(input())):\n    d = int(input())\n    cou = [*map(int, input().split())]\n    own = [*map(int, input().split())]\n    com = sorted(zip(cou, own), reverse=True)\n    time = 0\n    for k in com:\n        time += k[1]\n        if time >= k[0]:\n            time = max(k[0], time - k[1])\n            break\n    t.append(time)\nprint('\\n'.join(map(str, t)))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort(reverse=True)\n    t = 0\n    for x in c:\n        t += x[1]\n        if t >= x[0]:\n            t = max(t - x[1], x[0])\n            break\n    sys.stdout.write('{}\\n'.format(t))", "def check(a, b, n, m):\n    c = 0\n    for i in range(n):\n        if a[i] <= m:\n            continue\n        c += b[i]\n    return c <= m\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = 0\n    r = 10 ** 10\n    while l <= r:\n        m = (l + r) // 2\n        if check(a, b, n, m):\n            r = m - 1\n        else:\n            l = m + 1\n    return l\nt = int(input())\ni = 0\nwhile i < t:\n    print(solve())\n    i += 1", "ans = []\nfor _ in range(int(input())):\n    input()\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "ans = []\nfor _ in range(int(input())):\n    input()\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(time)\nprint('\\n'.join(map(str, ans)))", "ans = []\nfor _ in range(int(input())):\n    input()\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "import sys\nm = int(sys.stdin.readline())\nfor _ in range(m):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    c = []\n    for i in range(n):\n        c.append((a[i], b[i]))\n    c.sort(reverse=True)\n    t = 0\n    for x in c:\n        if t + x[1] >= x[0]:\n            t = max(t, x[0])\n            break\n        else:\n            t += x[1]\n    sys.stdout.write('{}\\n'.format(t))", "ans = []\nfor _ in range(int(input())):\n    input()\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "ans = []\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    dishes = sorted(list(zip(a, b)), reverse=True)\n    out = 0\n    for dish in dishes:\n        out += dish[1]\n        if out >= dish[0]:\n            out = max(dish[0], out - dish[1])\n            break\n    ans.append(out)\nprint('\\n'.join(map(str, ans)))", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    if n == 1:\n        ans.append(min(a[0], b[0]))\n    else:\n        w = []\n        for i in range(n):\n            w.append([a[i], b[i]])\n        w.sort()\n        w.reverse()\n        w.insert(0, [0, 0])\n        w.append([0, 0])\n        l = []\n        l1 = []\n        for i in range(1, len(w)):\n            if w[i][0] != w[i - 1][0]:\n                l.append(l1)\n                l1 = [w[i]]\n            else:\n                l1.append(w[i])\n        l.pop(0)\n        l.append([[0, 0]])\n        p = 0\n        for i in range(len(l)):\n            z = 0\n            for o in range(len(l[i])):\n                z += l[i][o][1]\n            if l[i][0][0] <= p + z:\n                ans.append(l[i][0][0])\n                break\n            elif l[i + 1][0][0] <= p + z:\n                ans.append(p + z)\n                break\n            else:\n                p += z\nfor i in ans:\n    print(i)", "t = int(input())\noutput = []\nfor i in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    b = [int(j) for j in input().split()]\n    c = sorted(list(zip(a, b)), reverse=True)\n    time = 0\n    for k in c:\n        time += k[1]\n        if time >= k[0]:\n            time = max(k[0], time - k[1])\n            break\n    output.append(time)\nprint('\\n'.join(map(str, output)))", "ans = []\nfor _ in range(int(input())):\n    input()\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    ab = sorted([*zip(a, b)], reverse=True)\n    time = 0\n    for z in ab:\n        deli = z[0]\n        pick = z[1]\n        time += pick\n        if time >= deli:\n            time = max(deli, time - pick)\n            break\n    ans.append(str(time))\nprint('\\n'.join(ans))", "import sys\nn = int(input())\nans = []\nfor i in range(n):\n    t = int(sys.stdin.readline())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = sorted(list(zip(a, b)), reverse=True)\n    d = 0\n    for i in range(t):\n        d += c[i][1]\n        if d >= c[i][0]:\n            d = max(c[i][0], d - c[i][1])\n            break\n    ans.append(d)\nprint('\\n'.join(map(str, ans)))", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    tmp = list(zip(a, b))\n    tmp.sort(reverse=True)\n    buy = 0\n    for (i, j) in tmp:\n        buy += j\n        if buy > i:\n            buy = max(buy - j, i)\n            break\n    print(buy)"]