["list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '0' not in s:\n        list_ans.append(s)\n    else:\n        s1 = s[:][::-1]\n        a = s1.index('0')\n        if '1' not in s1[a + 1:]:\n            list_ans.append(s)\n        else:\n            b = s[:-a - 1].index('1')\n            list_ans.append('0' * (b + 1) + '1' * a)\nfor item in list_ans:\n    print(item)", "def solve(n, s):\n    is10 = False\n    for i in range(1, n):\n        if s[i - 1] > s[i]:\n            is10 = True\n            break\n    if not is10:\n        return s\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    zero1 = i\n    i = n - 1\n    while i >= 0 and s[i] == '1':\n        i -= 1\n    ones = n - i - 1\n    return '0' * zero1 + '0' + '1' * ones\nt = int(input())\nresults = []\nfor _ in range(0, t):\n    n = int(input())\n    s = input()\n    results.append(solve(n, s))\nfor result in results:\n    print(result)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()[:-1]\n    (a, b) = ('', '')\n    for i in s:\n        if i == '0':\n            a += '0'\n        else:\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            b += '1'\n        else:\n            break\n    if len(a) + len(b) == n:\n        print(a + b)\n    else:\n        print(a + '0' + b)", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "def solve(n, s):\n    is_present_10 = False\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            is_present_10 = True\n            break\n    if not is_present_10:\n        return s\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    leading_zeroes = i\n    i = n - 1\n    while i >= 0 and s[i] == '1':\n        i -= 1\n    trailing_ones = n - i - 1\n    return '0' * leading_zeroes + '0' + '1' * trailing_ones\nt = int(input())\nresults = list()\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    results.append(solve(n, s))\nfor result in results:\n    print(result)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, s):\n    i = 0\n    j = n - 1\n    while i < n and s[i] == '0':\n        i += 1\n    while j > -1 and s[j] == '1':\n        j -= 1\n    if i <= j:\n        print(s[:i] + '0' + s[j + 1:])\n    else:\n        print(s)\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())[:-1]\n    solve(n, s)", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    j = n - 1\n    while i < n and s[i] == '0':\n        i += 1\n    while j > -1 and s[j] == '1':\n        j -= 1\n    if i - j == 1:\n        print(s)\n        continue\n    print(s[:i] + '0' + s[j + 1:])", "from collections import deque\n\ndef main():\n    t = int(input())\n    while t > 0:\n        t = t - 1\n        n = int(input())\n        s = str(input())\n        str_ans = ''\n        can_clean = False\n        for i in range(0, n - 1):\n            if s[i] == '1' and s[i + 1] == '0':\n                can_clean = True\n                break\n        if not can_clean:\n            print(s)\n            continue\n        for i in range(0, n):\n            if s[i] == '0':\n                str_ans = str_ans + '0'\n            else:\n                break\n        str_ans = str_ans + '0'\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                str_ans = str_ans + '1'\n            else:\n                break\n        print(str_ans)\nmain()", "num = int(input())\nfor i in range(num):\n    l = 0\n    r = 0\n    n = int(input())\n    bin = input()\n    if '10' in bin:\n        for i in range(n):\n            if bin[i] == '1':\n                l = i\n                break\n        for i in range(n - 1, 0, -1):\n            if bin[i] == '0':\n                r = i\n                break\n        bin = bin[:l] + '0' + bin[r + 1:]\n    print(bin)", "def solve(s):\n    nol = ''\n    i = 0\n    rightNolIdx = -1\n    if s[0] == '0':\n        while True:\n            i += 1\n            if i == len(s):\n                break\n            if s[i] != '0':\n                break\n        nol = '0' * i\n        rightNolIdx = i - 1\n    i = len(s) - 1\n    satu = ''\n    leftSatuIdx = -1\n    if s[i] == '1':\n        while True:\n            i -= 1\n            if i < 0:\n                break\n            if s[i] != '1':\n                break\n        i += 1\n        satu = '1' * (len(s) - 1 - i + 1)\n        leftSatuIdx = i\n    if rightNolIdx == -1:\n        if leftSatuIdx == 0:\n            return satu\n        if leftSatuIdx != -1:\n            return '0' + satu\n        return '0'\n    if leftSatuIdx == -1:\n        if rightNolIdx == len(s) - 1:\n            return nol\n        if rightNolIdx != -1:\n            return nol + '0'\n        return '0'\n    if rightNolIdx + 1 == leftSatuIdx:\n        return nol + satu\n    return nol + '0' + satu\nt = int(input())\nfor i in range(t):\n    input()\n    print(solve(input()))", "for s in [*open(0)][2::2]:\n    try:\n        i = s.index('1')\n        j = s.rindex('0')\n        r = s[:i] + '0' * (j > i) + s[j + 1:]\n    except:\n        r = s\n    print(r)", "import sys\nimport math\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef minput():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef listinput():\n    return list(map(int, sys.stdin.readline().strip().split()))\nfor _ in range(iinput()):\n    n = iinput()\n    s = input()\n    (first_one, first_zero_from_last) = (-1, -1)\n    if '1' in s:\n        first_one = s.index('1')\n    k = list(map(str, s))\n    k.reverse()\n    if '0' in s:\n        first_zero_from_last = k.index('0')\n    if first_one == -1 or first_zero_from_last == -1:\n        print(s)\n    elif first_one + first_zero_from_last == len(s):\n        print(s)\n    else:\n        print('0' * (first_one + 1) + '1' * first_zero_from_last)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = 0\n    r = n - 1\n    while l < n and s[l] == '0':\n        l += 1\n    while r >= 0 and s[r] == '1':\n        r -= 1\n    if l < r:\n        print(s[:l] + s[r:])\n    else:\n        print(s)", "for test in range(int(input())):\n    input()\n    x = input()\n    x1 = x.split('1')[0] + x.split('0')[-1]\n    if len(x1) < len(x):\n        print('0' + x1)\n    else:\n        print(x1)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    if '10' not in s or '1' not in s:\n        print(s)\n        continue\n    m = s.index('1')\n    s = s[::-1]\n    k = s.index('0')\n    if n > m + k:\n        print('0' * m + '0' + '1' * k)\n    else:\n        print('0' * m + '1' * k)", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        n = II()\n        s = SI()\n        c0 = s.find('1')\n        if c0 == -1:\n            c0 = n\n        i = s.rfind('0')\n        c1 = n if i == -1 else n - i - 1\n        if c0 + c1 == n:\n            print(s)\n        else:\n            print('0' * (c0 + 1) + '1' * c1)\nmain()", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = input().rstrip()\n    if '1' not in a or '0' not in a:\n        print(a)\n        continue\n    idx1 = a.find('1')\n    b = a[::-1]\n    idx2 = b.find('0')\n    idx3 = n - idx2\n    if idx1 == idx3:\n        print('0' * idx1 + '1' * idx2)\n    else:\n        print('0' * idx1 + '0' + '1' * idx2)", "for s in [*open(0)][2::2]:\n    try:\n        i = s.index('1')\n        j = s.rindex('0')\n        r = s[:i] + '0' * (j > i) + s[j + 1:-1]\n    except:\n        r = s\n    print(r)", "for s in [*open(0)][2::2]:\n    try:\n        i = s.index('1')\n        j = s.rindex('0')\n        print(s[:i] + '0' * (j > i) + s[j + 1:])\n    except:\n        print(s)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    li = stdin.readline()\n    c0 = 0\n    c1 = 0\n    for i in range(0, n):\n        if li[i] == '1':\n            break\n        c0 += 1\n    for j in reversed(range(0, n)):\n        if li[j] == '0':\n            break\n        c1 += 1\n    if c1 + c0 == n:\n        print('0' * c0 + '1' * c1)\n    else:\n        print('0' * (c0 + 1) + '1' * c1)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = s.find('1') % n\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "import sys\nI = sys.stdin.readline\nans = ''\nfor _ in range(int(I())):\n    n = int(I())\n    s = I().strip()\n    if '10' not in s:\n        ans += s + '\\n'\n    else:\n        i = 0\n        while s[i] == '0':\n            i += 1\n        y = 0\n        s = s[::-1]\n        while s[y] == '1':\n            y += 1\n        ans += '0' * (i + 1) + '1' * y + '\\n'\nprint(ans)", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "import math\nimport sys\ninput = sys.stdin.readline\nresult = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().strip()\n    (c, d, x, y) = (-1, -1, 0, 0)\n    for i in range(n):\n        if s[i] == '1' and x == 0:\n            (c, x) = (i, 1)\n        if s[i] == '0':\n            d = i\n    result.append(s[:c] + s[d:]) if d >= 0 and c >= 0 and (c < d) else result.append(s)\nprint('\\n'.join(result))", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (j > i) + s[j + 1:])", "for s in [*open(0)][2::2]:\n    i = s.find('1') % len(s)\n    j = s.rfind('0')\n    print(s[:i] + '0' * (i < j) + s[j + 1:])", "def solve(n, s):\n    k_10 = False\n    for i in range(1, n):\n        if s[i - 1] > s[i]:\n            k_10 = True\n            break\n    if not k_10:\n        return s\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    m = i\n    i = n - 1\n    while i >= 0 and s[i] == '1':\n        i -= 1\n    k = n - i - 1\n    return '0' * m + '0' + '1' * k\nt = int(input())\nresults = []\nfor _ in range(0, t):\n    n = int(input())\n    s = input()\n    results.append(solve(n, s))\nfor i in results:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    S = input().strip()\n    pre = ''\n    for s in S:\n        if s == '0':\n            pre += s\n        else:\n            break\n    suf = ''\n    for s in S[::-1]:\n        if s == '1':\n            suf += s\n        else:\n            break\n    if len(pre) + len(suf) == n:\n        print(pre + suf)\n    else:\n        print(pre + '0' + suf)\nfor _ in range(int(input())):\n    main()", "for _ in range(int(input())):\n    i = int(input())\n    s = input()\n    lo = lz = 0\n    o = s.find('1')\n    z = s.rfind('0')\n    if o > z:\n        print(s)\n    else:\n        t = s[:o] + s[z:]\n        print(t)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    zero = s.rfind('0')\n    one = s.find('1')\n    if one > zero:\n        print(s)\n    else:\n        print(s[0:one] + s[zero:])", "def remove(s, i):\n    return s[0:i] + s[i + 1:]\n\ndef solution():\n    for t in range(int(input())):\n        n = int(input())\n        s = input()\n        l1 = s.find('1')\n        r0 = s.rfind('0')\n        if l1 != -1 and r0 != -1 and (l1 < r0):\n            print(s[:l1] + s[r0:])\n        else:\n            print(s)\nsolution()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if ''.join(sorted(s)) == s:\n        print(s)\n    else:\n        print('0' * (s.find('1') + 1) + '1' * (n - 1 - s.rfind('0')))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    o = s.find('1')\n    z = s.rfind('0')\n    if o > z:\n        print(s)\n    else:\n        print(s[:o] + s[z:])", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    one = s.find('1')\n    zero = s.rfind('0')\n    if zero == -1 or one == -1 or zero < one:\n        print(s)\n    else:\n        print(s[:one] + '0' + s[zero + 1:])", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    left1 = -1\n    right0 = -1\n    for (idx, c) in enumerate(string):\n        if left1 < 0 and c == '1':\n            left1 = idx\n        elif c == '0':\n            right0 = idx\n    if left1 >= 0 and right0 >= 0 and (left1 < right0):\n        print(string[:left1] + string[right0:])\n    else:\n        print(string)", "count = int(input())\nfor i in range(count):\n    size = int(input())\n    s = input()\n    one = s.find('1')\n    zero = s.rfind('0')\n    if one < zero:\n        s = s[:one] + s[zero:]\n    print(s)", "num_cases = int(input())\nfor _ in range(num_cases):\n    l = int(input())\n    s = input()\n    catch: int = 0\n    o: int = 0\n    for i in range(l - 1, -1, -1):\n        if s[i] == '1':\n            o += 1\n        else:\n            break\n    for i in range(l):\n        if s[i] == '0':\n            catch += 1\n        else:\n            break\n    if catch < l - o:\n        catch += 1\n    print(''.join(['0' for i in range(catch)] + ['1' for j in range(o)]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if s.count('10') > 0:\n        zero = 0\n        one = 0\n        for i in range(len(s)):\n            if s[i] != '0':\n                break\n            zero += 1\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                one += 1\n            else:\n                break\n        if one + zero == len(s):\n            print(s)\n        ans = ''\n        ans = '0' * (zero + 1)\n        ans += '1' * one\n        print(ans)\n    else:\n        print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    t = ''\n    idx1 = idx2 = -1\n    for i in range(n):\n        if s[i] == '1':\n            idx1 = i\n            break\n        else:\n            t += s[i]\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            idx2 = i\n            break\n    if idx1 >= idx2:\n        print(s)\n    elif idx1 == -1:\n        print(s)\n    else:\n        for i in range(idx2, n):\n            t += s[i]\n        print(t)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '10' in s:\n        (i, j) = (0, n)\n        while s[i] == '0':\n            i += 1\n        while s[j - 1] == '1':\n            j -= 1\n        print(s[:i] + '0' + s[j:])\n    else:\n        print(s)", "for _ in [0] * int(input()):\n    n = int(input())\n    s = input()\n    cs = s\n    if '10' in s:\n        x = s.index('1')\n        cs = s[:x]\n        s = s[::-1]\n        y = s.index('0')\n        s = s[:y]\n        cs = cs + '0' + s[::-1]\n    print(cs)", "for p in range(int(input())):\n    n = int(input())\n    s = input()\n    l = s.find('1')\n    r = s.rfind('0')\n    if r > l:\n        a = s[:l] + '0' + s[r + 1:]\n        print(a)\n    else:\n        print(s)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    val1 = 0\n    val2 = n - 1\n    for i in range(n - 1, -1, -1):\n        val2 = i\n        if s[i] == '0':\n            break\n    for i in range(n):\n        val1 = i\n        if s[i] == '1':\n            break\n    if val1 > val2:\n        val1 -= 1\n    print(s[:val1] + s[val2:])\n    t -= 1", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    one = s.find('1')\n    zero = s.rfind('0')\n    if one >= 0 and zero >= 0 and (zero > one):\n        print(s[:one] + '0' + s[zero + 1:])\n    else:\n        print(s)", "def main():\n    import sys\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input().strip()\n        first1 = s.find('1')\n        last0 = s.rfind('0')\n        if first1 >= 0 and last0 >= 0:\n            if last0 < first1:\n                print(s)\n            else:\n                print(s[:first1] + s[last0:])\n        else:\n            print(s)\nmain()", "import math\nfrom sys import stdin\nfrom collections import Counter, defaultdict, deque\ninput = stdin.readline\nmod = pow(10, 9) + 7\n\ndef solve():\n    n = int(input())\n    s = list(input().strip('\\n'))\n    flag = 0\n    s1 = []\n    c1 = s.count('0')\n    c2 = s.count('1')\n    if c1 == 0 or c2 == 0:\n        z = ''.join(s)\n        print(z)\n        return\n    l1 = []\n    for i in range(n):\n        if s[i] == '0':\n            l1.append(i)\n    x = s.index('1')\n    s1 = s1 + s[0:x]\n    x1 = l1[-1]\n    if x > x1:\n        z = ''.join(s)\n        print(z)\n    else:\n        s1 = s1 + s[x1:]\n        z = ''.join(s1)\n        print(z)\nfor _ in range(int(input())):\n    solve()", "tc = int(input())\nresult = []\nfor i in range(tc):\n    size = int(input())\n    number = input()\n    i1 = ''\n    i1f = 0\n    i0 = ''\n    i0f = 0\n    for t in range(size):\n        if not i1f:\n            if number[t] == '1':\n                i1 = t\n                i1f = 1\n        if not i0f:\n            if number[-t - 1] == '0':\n                i0 = size - t - 1\n                i0f = 1\n    if not i0f or not i1f:\n        result.append(number)\n        continue\n    if i0 < i1:\n        i0 += 1\n    result.append(number[:i1] + number[i0:])\nfor z in result:\n    print(z)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().split())\ninl = lambda : list(map(int, input().split()))\nans = []\nt = ini()\nfor _ in range(t):\n    n = ini()\n    s = ins()\n    start = 0\n    end = 0\n    for i in range(n):\n        if s[i] == '0':\n            start += 1\n        else:\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            end += 1\n        else:\n            break\n    if start + end == n:\n        ans.append(s)\n    else:\n        ans.append('0' * start + '0' + '1' * end)\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    input()\n    s = input()\n    (i, j) = (s.find('1'), s.rfind('0'))\n    print([s[:i] + s[j:], s][i == -1 or j == -1 or i >= j])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            break\n    for j in range(len(s) - 1, -1, -1):\n        if s[j] == '0':\n            break\n    if j > i:\n        ans = ''\n        ans += s[:i]\n        ans += s[j:]\n    else:\n        ans = s\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    a = s.rfind('0')\n    b = s.find('1')\n    if b > a:\n        print(s)\n    else:\n        print(s[:b] + s[a:])", "def answer(n, s):\n    f1 = s.find('1')\n    if f1 == -1:\n        return s\n    l0 = s.rfind('0')\n    if l0 == -1:\n        return s\n    if f1 > l0:\n        return s\n    ans = s[:f1] + '0' + s[l0 + 1:]\n    return ans\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        s = input()\n        print(answer(n, s))\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    z = s.rfind('0')\n    o = s.find('1')\n    if o < z:\n        print(s[:o] + '0' + s[z + 1:])\n    else:\n        print(s)", "import math\n\ndef solve():\n    n = int(input())\n    s = input()\n    one_index = s.find('1')\n    zero_index = s.rfind('0')\n    if one_index == -1 or zero_index == -1:\n        return s\n    if one_index < zero_index:\n        return '0' * one_index + '0' + '1' * (n - zero_index - 1)\n    return s\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "t = int(input())\nfor i in range(t):\n    l = int(input())\n    s = input()\n    ans = ''\n    for c in s:\n        if c == '0':\n            ans += '0'\n        else:\n            break\n    l1 = len(ans)\n    mid = ''\n    for k in range(1, l + 1):\n        if s[-k] == '1':\n            mid += '1'\n        else:\n            break\n    l2 = len(mid)\n    if l == l1 + l2:\n        ans += mid\n    else:\n        ans = ans + '0' + mid\n    print(ans)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        if not len(set(list(s))) - 1:\n            print(s)\n            continue\n        i1 = s.index('1')\n        i2 = s[::-1].index('0')\n        if i1 + i2 != n:\n            print('0' * (i1 + 1) + '1' * i2)\n        else:\n            print(s)\nsolve()", "def split(s):\n    return [char for char in s]\ny = int(input())\nfor i in range(y):\n    length = int(input())\n    bin = split(input())\n    oz = False\n    for i in range(length - 1):\n        if bin[i] > bin[i + 1]:\n            oz = True\n            break\n    if oz == False:\n        print(''.join(bin))\n        continue\n    l = bin.index('1', 0, len(bin))\n    r = len(bin) - bin[::-1].index('0') - 1\n    print(f\"{''.join(bin[:l])}0{''.join(bin[r + 1:])}\")", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    s = input()\n    (lef, rig, sw) = (1, 1, 0)\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            sw = 1\n            break\n    if sw == 0:\n        print(s)\n        continue\n    for i in range(n):\n        if s[i] == '1':\n            lef = i\n            break\n    for i in range(n - 1, 0, -1):\n        if s[i] == '0':\n            rig = i\n            break\n    st = s[:lef] + '0' + s[rig + 1:]\n    print(st)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    i = -1\n    j = -1\n    if '1' in a:\n        i = a.index('1')\n    b = a[::-1]\n    if '0' in a:\n        j = n - b.index('0') - 1\n    if i == -1 or j == -1:\n        print(a)\n        continue\n    t = 0\n    c = ''\n    for x in range(n):\n        if x < i:\n            c += a[x]\n        elif x < j and t == 0:\n            t += 1\n            c += '0'\n        elif x > j:\n            c += a[x]\n    print(c)", "for _ in [0] * int(input()):\n    n = int(input())\n    s = input()\n    t = len([i for i in range(n - 1) if s[i] != s[i + 1]])\n    if t == 0 or (t == 1 and s[-1] == '1'):\n        print(s)\n        continue\n    if t == 1 and s[-1] == '0':\n        print('0')\n        continue\n    print('0' * (n - len(s.lstrip('0')) + 1) + '1' * (n - len(s.rstrip('1'))))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    s = input()\n    numb1 = n - 1\n    flag = False\n    while numb1 >= 0:\n        if s[numb1] == '0':\n            break\n        numb1 -= 1\n    numb2 = 0\n    flag = False\n    while numb2 < n:\n        if s[numb2] == '1':\n            break\n        numb2 += 1\n    if numb2 > numb1:\n        print(s)\n    else:\n        print(s[0:numb2] + s[numb1:n])", "t = int(input())\nanswer = []\nfor i in range(t):\n    n = int(input())\n    a = input().strip()\n    j = n - 1\n    ans = ''\n    f = 0\n    x = 0\n    while j >= 0:\n        if a[j] == '1':\n            j = j - 1\n        else:\n            x = j\n            j = j - 1\n            f = 1\n            break\n    if f == 1:\n        while j >= 0:\n            if a[j] == '1':\n                f = 0\n                break\n            else:\n                j = j - 1\n        if f == 0:\n            k = 0\n            while k < n:\n                if a[k] == '0':\n                    ans = ans + a[k]\n                    k = k + 1\n                else:\n                    break\n            ans = ans + a[x:]\n            answer.append(ans)\n        else:\n            answer.append(a)\n    else:\n        answer.append(a)\nfor i in range(t):\n    print(answer[i])", "for s in [*open(0)][2::2]:\n    i = (s[:-1] + '1').find('1')\n    j = ('0' + s).rfind('0')\n    print(s[:i] + '0' * (j - i > 1) + s[j:])", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    s = input()\n    not_in = False\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            not_in = True\n            break\n    if not not_in:\n        ans.append(s)\n        continue\n    zero_c = 1\n    one_c = 0\n    for i in range(n):\n        if s[i] == '0':\n            zero_c += 1\n        else:\n            break\n    for i in range(0, n + 1):\n        if s[n - i - 1] == '1':\n            one_c += 1\n        else:\n            break\n    ans.append('0' * zero_c + '1' * one_c)\nfor i in range(t):\n    print(ans[i])", "def lee(l, s):\n    if '0' not in s or '1' not in s:\n        return s\n    else:\n        last_zero = l - s[::-1].index('0') - 1\n        first_one = s.index('1')\n        if last_zero < first_one:\n            return s\n        else:\n            return s[:first_one] + s[last_zero:]\nt = int(input())\narray = []\nfor i in range(t):\n    a = int(input())\n    b = input()\n    array.append([a, b])\nfor x in array:\n    print(lee(*x))", "def lee(s):\n    if '0' not in s or '1' not in s:\n        print(s)\n    else:\n        l = len(s)\n        lz = l - s[::-1].index('0') - 1\n        fo = s.index('1')\n        if lz < fo:\n            print(s)\n        else:\n            print(s[:fo] + s[lz:])\nt = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    s = input()\n    l.append(s)\nfor j in l:\n    lee(j)", "def solve(n, s):\n    k_10 = False\n    for i in range(1, n):\n        if s[i - 1] > s[i]:\n            k_10 = True\n            break\n    if not k_10:\n        return s\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    m = i\n    i = n - 1\n    while i >= 0 and s[i] == '1':\n        i -= 1\n    k = n - i - 1\n    return '0' * m + '0' + '1' * k\nt = int(input())\nresults = []\nfor i in range(0, t):\n    n = int(input())\n    s = input()\n    results.append(solve(n, s))\nfor i in results:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    binary = input()\n    if n == 1:\n        print(binary)\n        continue\n    leading_zeroes = 0\n    trailing_ones = 0\n    sorted_ = True\n    for i in range(len(binary) - 1):\n        if binary[i] <= binary[i + 1]:\n            continue\n        else:\n            sorted_ = False\n            break\n    if sorted_:\n        print(binary)\n        continue\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            leading_zeroes += 1\n        else:\n            break\n    for j in range(len(binary) - 1, -1, -1):\n        if binary[j] == '1':\n            trailing_ones += 1\n        else:\n            break\n    print('0' * (leading_zeroes + 1) + '1' * trailing_ones)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = str(input())\n    c1 = 0\n    for k in a:\n        if k != '0':\n            break\n        c1 += 1\n    c2 = 0\n    for k in range(len(a) - 1, -1, -1):\n        if a[k] != '1':\n            break\n        c2 += 1\n    res = ''\n    if c1 + c2 < len(a):\n        res = '0'\n    if c1 > 0:\n        res = a[0:c1] + res\n    if c2 > 0:\n        res = res + a[len(a) - c2:len(a)]\n    print(res)", "test_cases = int(input())\n\ndef handle():\n    input()\n    s = input()\n    queue = []\n    for char in s[::-1]:\n        if char == '1':\n            total_zeros = 0\n            while queue and queue[-1] == '0':\n                total_zeros += 1\n                queue.pop()\n            if total_zeros > 0:\n                queue.append('0')\n            else:\n                queue.append('1')\n        else:\n            queue.append('0')\n    return ''.join(list(queue[::-1]))\nfor _ in range(test_cases):\n    print(handle())", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    s = input()\n    (lef, rig, sw) = (1, 1, 0)\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            sw = 1\n            break\n    if sw == 0:\n        print(s)\n        continue\n    for i in range(n):\n        if s[i] == '1':\n            lef = i\n            break\n    for i in range(n - 1, 0, -1):\n        if s[i] == '0':\n            rig = i\n            break\n    st = s[:lef] + '0' + s[rig + 1:]\n    print(st)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '1' not in s:\n        print(s)\n    elif '0' not in s:\n        print(s)\n    else:\n        (i, j) = (0, 0)\n        for k in range(n):\n            if s[k] == '1':\n                i = k\n                break\n        for k in range(n - 1, -1, -1):\n            if s[k] == '0':\n                j = k\n                break\n        a = s[:i]\n        b = s[j:]\n        if len(a) + len(b) > n:\n            print(s[:i] + s[j + 1:])\n        else:\n            print(a + b)", "from collections import deque\nimport sys\n\ndef inp():\n    return sys.stdin.readline().strip()\nfor _ in range(int(inp())):\n    n = int(inp())\n    s = inp()\n    l = 0\n    if n == 1:\n        print(s)\n        continue\n    while l < len(s) and s[l] == '0':\n        l += 1\n    r = len(s) - 1\n    ct = 0\n    while r >= 0 and s[r] == '1':\n        ct += 1\n        r -= 1\n    ans = ''\n    if l == r + 1:\n        print(s)\n        continue\n    else:\n        ans = '0' * (l + 1)\n        ans += '1' * ct\n        print(ans)", "import sys\nfast_reader = sys.stdin.readline\nfast_writer = sys.stdout.write\n\ndef input():\n    return fast_reader().strip()\n\ndef print(*argv):\n    fast_writer(' '.join((str(i) for i in argv)))\n    fast_writer('\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    f1 = 0\n    x = -1\n    y = -1\n    for i in range(n):\n        if s[i] == '1' and f1 != 1:\n            f1 = 1\n            x = i\n        elif s[i] == '0':\n            y = i\n    if x == -1 or y == -1:\n        print(s)\n    elif x > y:\n        print(s)\n    else:\n        print(s[:x] + s[y:])", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    s = input()\n    beg = 0\n    front = ''\n    while beg < len(s) and s[beg] == '0':\n        front += '0'\n        beg += 1\n    end = len(s) - 1\n    last = ''\n    while end >= 0 and s[end] == '1':\n        last += '1'\n        end -= 1\n    if beg < end:\n        print(front + '0' + last)\n    else:\n        print(front + last)", "n = int(input())\nresults = []\nfor i in range(n):\n    l = int(input())\n    s = input()\n    if '1' in s:\n        firstone = s.index('1')\n    else:\n        results.append(s)\n        continue\n    if '0' in s:\n        lastzero = l - s[::-1].index('0') - 1\n    else:\n        results.append(s)\n        continue\n    result = s[:firstone]\n    if firstone < lastzero:\n        result += '0'\n    result += s[lastzero + 1:]\n    results.append(result)\nprint(*results, sep='\\n')", "p = []\nfor i in range(int(input())):\n    n = int(input())\n    k = list(input())\n    r = 0\n    s = 1\n    o = []\n    if ('0' in k) == True and ('1' in k) == True:\n        while k[r] == '0':\n            r = r + 1\n        while k[-s] == '1':\n            s = s + 1\n        if s + r - 1 == len(k):\n            p.append(k)\n        else:\n            for i in range(r + 1):\n                o.append('0')\n            for i in range(s - 1):\n                o.append('1')\n            p.append(o)\n    else:\n        p.append(k)\nfor i in p:\n    print(''.join(i))", "outputs = []\nfor __ in range(int(input())):\n    n = int(input())\n    A = input()\n    first_1 = -1\n    last_0 = -1\n    for (j, i) in enumerate(A):\n        if i == '1':\n            first_1 = j\n            break\n    for (j, i) in enumerate(A):\n        if i == '0':\n            last_0 = j\n    if first_1 > last_0 or first_1 == -1 or last_0 == -1:\n        outputs.append(A)\n    else:\n        outputs.append(A[0:first_1] + '0' + A[last_0 + 1:])\nfor o in outputs:\n    print(o)", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    s1 = input()\n    s = list(s1)\n    zeros = 0\n    ones = 0\n    for j in range(n):\n        if s[j] == '1':\n            zeros = j\n            break\n        if j == n - 1:\n            zeros = j + 1\n    kk = 0\n    for k in range(-1, -1 * (n + 1), -1):\n        if s[k] == '0':\n            kk = k\n            ones = abs(k) - 1\n            break\n        if k == -n:\n            kk = k\n            ones = abs(k)\n    if zeros + ones == n:\n        ans.append(s1)\n    else:\n        ann = s1[:zeros] + str(0) + s1[-1:kk:-1]\n        ans.append(ann)\nfor an in ans:\n    print(an)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    s = input()\n    r = 1\n    flag = 0\n    ans = ''\n    for j in s:\n        if j == '0':\n            ans = ans + '0'\n        else:\n            break\n    while r <= len(s):\n        if s[-r] == '1':\n            r = r + 1\n        else:\n            break\n    t = r - 1\n    while r <= len(s):\n        if s[-r] == '0':\n            r = r + 1\n        else:\n            flag = 1\n            break\n    if flag == 1:\n        print(ans + '0' + t * '1')\n    else:\n        print((r - t - 1) * '0' + t * '1')", "y = int(input())\nans = []\nfor j in range(y):\n    l = int(input())\n    s = list(input())\n    a = b = 0\n    f1 = f0 = 0\n    d = ''\n    for i in range(l):\n        if s[i] == '1' and f1 == 0:\n            f1 = 1\n            a = i\n        elif s[i] == '0':\n            f0 = 1\n            b = i\n    if f0 == 1 and f1 == 1 and (a < b):\n        if a == 0 and b != l - 1:\n            ans.append('0' + d.join(s[b + 1:]))\n        elif b == l - 1 and a != 0:\n            ans.append(d.join(s[:a]) + '0')\n        elif a == 0 and b == l - 1:\n            ans.append('0')\n        else:\n            ans.append(d.join(s[:a]) + '0' + d.join(s[b + 1:]))\n    else:\n        ans.append(d.join(s))\nfor i in ans:\n    print(i)", "t = int(input())\nresposta = []\nfor k in range(t):\n    n = int(input())\n    s = input()\n    n0 = 0\n    n1 = 0\n    i = 0\n    trobat0 = False\n    ind0 = -1\n    ind1 = -10\n    while i < n and trobat0 is False:\n        if s[i] == '0':\n            n0 += 1\n        else:\n            trobat0 = True\n            ind0 = i\n        i += 1\n    i = n - 1\n    trobat1 = False\n    while i > 0 and trobat1 is False:\n        if s[i] == '1':\n            n1 += 1\n        else:\n            trobat1 = True\n            ind1 = i\n        i -= 1\n    if ind0 == ind1 + 1 or trobat1 is False or trobat0 is False:\n        cadena = s\n    else:\n        cadena = s[0:n0] + '0' + s[n - n1:n]\n    resposta.append(cadena)\nfor i in range(t):\n    print(resposta[i])", "for _ in range(int(input())):\n    n = int(input())\n    import sys\n    se = input()\n    s = list(se)\n    ans = []\n    if s[0] == '0':\n        i = 0\n        while i < len(s) and s[i] != '1':\n            i += 1\n        ans = s[:i]\n        if '10' in se:\n            ans.append('0')\n        j = len(s) - 1\n        while j >= 0 and s[j] != '0':\n            ans.append('1')\n            j -= 1\n        print(''.join(ans))\n    else:\n        if '10' in se:\n            ans.append('0')\n        j = len(s) - 1\n        while j >= 0 and s[j] != '0':\n            ans.append('1')\n            j -= 1\n        print(''.join(ans))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = s.find('1')\n    r = s.rfind('0')\n    res = ''\n    if l < r:\n        res = s[:l] + '0' + s[r + 1:]\n    else:\n        res = s[:l] + '' + s[r + 1:]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s_i = s[::-1]\n    flag = 0\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            flag = 1\n            break\n    if flag == 0:\n        print(s)\n    else:\n        ans = ''\n        for i in range(n):\n            if s[i] == '1':\n                break\n            else:\n                ans += s[i]\n        ans += '0'\n        for i in range(n):\n            if s_i[i] == '0':\n                break\n            else:\n                ans += s_i[i]\n        print(ans)", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    s = input()\n    (lef, rig, sw) = (1, 1, 0)\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            sw = 1\n            break\n    if sw == 0:\n        print(s)\n        continue\n    for i in range(n):\n        if s[i] == '1':\n            lef = i\n            break\n    for i in range(n - 1, 0, -1):\n        if s[i] == '0':\n            rig = i\n            break\n    st = s[:lef] + '0' + s[rig + 1:]\n    print(st)", "from math import ceil, inf\n\ndef pro(s):\n    n = len(s)\n    if n == 1:\n        print(s[0])\n        return\n    f = 0\n    for i in range(n - 1):\n        if int(s[i]) > int(s[i + 1]):\n            f = 1\n            break\n    if f == 0:\n        print(s)\n        return\n    for i in range(n):\n        if s[i] == '1':\n            lef = i\n            break\n    for i in range(n - 1, 0, -1):\n        if s[i] == '0':\n            rig = i\n            break\n    print(s[:lef] + '0' + s[rig + 1:])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    pro(a)", "def solve():\n    (n, s) = (int(input()), input())\n    t = True\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            t = False\n            break\n    if t:\n        print(s)\n        return\n    p1 = 0\n    for i in range(n):\n        if s[i] == '1':\n            break\n        p1 += 1\n    p2 = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            break\n        p2 += 1\n    print(s[:p1] + '0' + s[n - p2:])\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    changed = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            changed += 1\n            break\n    if not changed:\n        print(s)\n    else:\n        left = 0\n        right = 0\n        for i in range(n):\n            if s[i] == '1':\n                left = i\n                break\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                right += 1\n            else:\n                break\n        print((left + 1) * '0' + '1' * right)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (l, r, b) = (1, 1, False)\n    for j in range(n - 1):\n        if s[j] > s[j + 1]:\n            b = True\n            break\n    if not b:\n        print(s)\n        continue\n    if '1' in s:\n        l = s.find('1')\n    if '0' in s:\n        r = s.rfind('0')\n    s = s[:l] + '0' + s[r + 1:]\n    print(s)", "def accurateLee(n, array):\n    array = list(array)\n    for x in range(n):\n        if array[x] == '1':\n            break\n    for y in reversed(range(n)):\n        if array[y] == '0':\n            break\n    if y > x:\n        ans = array[:x] + ['0'] + array[y + 1:]\n    else:\n        return array\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = input()\n    ans = accurateLee(n, l)\n    for x in ans:\n        print(x, end='')\n    print()"]