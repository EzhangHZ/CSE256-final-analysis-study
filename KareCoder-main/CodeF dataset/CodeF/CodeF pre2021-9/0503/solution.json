["import sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\n\ndef calc(mani, arr):\n    (n, k, z) = mani\n    scores = []\n    pairs = []\n    for i in range(k):\n        pairs.append(arr[i] + arr[i + 1])\n    for i in range(0, z + 1):\n        if k - 2 * i + 1 <= 0:\n            continue\n        max_pair = max(pairs[:k - 2 * i + 1])\n        scores.append(sum(arr[:k - 2 * i + 1]) + max_pair * i)\n    return max(scores)\n\ndef main():\n    n = int(input())\n    mani = []\n    arr = []\n    for _ in range(n):\n        mani.append(list(map(int, input().split(' '))))\n        arr.append(list(map(int, input().split(' '))))\n    for i in range(n):\n        print(calc(mani[i], arr[i]))\nmain()", "for i in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))[:k + 1]\n    length = k + 1\n    sums = [a[i] + a[i + 1] for i in range(len(a) - 1)]\n    maxs = [sum(a)]\n    try:\n        for i in range(1, 1 + z):\n            a.pop()\n            a.pop()\n            maxs.append(sum(a) + i * max(sums))\n            sums.pop()\n            sums.pop()\n    except:\n        pass\n    print(max(maxs))", "r = lambda : map(int, input().split())\n(t,) = r()\nfor l in [0] * t:\n    (n, k, z) = r()\n    a = (*r(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, k, z) = nm()\n    a = nl()\n    b = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    for i in range(1, n):\n        c[i] = max(c[i - 1], a[i - 1] + a[i])\n    ans = 0\n    for i in range(z + 1):\n        if k - 2 * i < 0:\n            break\n        cur = b[1 + k - 2 * i] + i * c[k - 2 * i + 1]\n        ans = max(ans, cur)\n    print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (ans, s, mx) = (0, 0, 0)\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "N = int(input().strip())\nfor i in range(N):\n    (n, k, Z) = map(int, input().strip().split())\n    score_list = list(map(int, input().strip().split()))\n    compare = [score_list[i] + score_list[i + 1] for i in range(k)]\n    result = [0, 0, 0, 0, 0, 0]\n    if k % 2 == 1:\n        for z in range(min(6, int((k + 1) / 2))):\n            if z == 0:\n                result[z] = sum(score_list[:k + 1])\n            else:\n                result[z] = sum(score_list[:k + 1 - 2 * z]) + z * max(compare[:k + 1 - 2 * z])\n    else:\n        for z in range(min(6, int(k / 2) + 1)):\n            if z == 0:\n                result[z] = sum(score_list[:k + 1])\n            elif z == int(k / 2):\n                result[z] = z * sum(score_list[:2]) + score_list[0]\n            else:\n                result[z] = sum(score_list[:k + 1 - 2 * z]) + z * max(compare[:k + 1 - 2 * z])\n    print(max(result[:Z + 1]))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    f = list(map(int, input().split()))\n    g = []\n    for i in range(k):\n        g.append(f[i] + f[i + 1])\n    res = sum(f[:k + 1])\n    for i in range(1, z + 1):\n        index = k + 1 - 2 * i\n        if index < 0:\n            break\n        tmp = sum(f[:index])\n        lm = max(g[:index]) if index > 0 else 0\n        res = max(res, tmp + lm * i)\n    print(res)", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr_sum = [arr[a] + arr[a + 1] for a in range(n - 1)]\n    maximum = 0\n    for j in range(min(z + 1, k // 2 + 1)):\n        maximum = max(sum(arr[:k - 2 * j + 1]) + max(arr_sum[:k - 2 * j + 1]) * j, maximum)\n    print(maximum)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = a[:k + 1]\n    score = sum(b)\n    y = len(b)\n    c = []\n    for i in range(0, k):\n        c.append(a[i] + a[i + 1])\n    for i in range(1, z + 1):\n        x = y - 2 * i\n        if x < 0:\n            break\n        sum1 = sum(a[:x])\n        if x > 0:\n            sum2 = max(c[:x])\n        else:\n            sum2 = 0\n        score = max(score, sum1 + sum2 * i)\n    print(score)", "num = int(input())\nresult = []\nfor i in range(num):\n    (n, k, z) = map(int, input().split())\n    l = list(map(int, input().split()))\n    psum = []\n    s = 0\n    for i in range(n):\n        s += l[i]\n        psum.append(s)\n    if z == 0:\n        result.append(psum[k])\n    else:\n        asum = []\n        for i in range(n - 1):\n            x = l[i] + l[i + 1]\n            asum.append(x)\n        optimal = []\n        for i in range(z + 1):\n            zval = i\n            if k - 2 * zval >= 0:\n                ans = psum[k - 2 * zval] + zval * max(asum[:k - 2 * zval + 1])\n                optimal.append(ans)\n        result.append(max(optimal))\nfor i in result:\n    print(i)", "q = int(input())\nfor i in range(q):\n    (n, k, z) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    sp = [arr[i] + arr[i + 1] for i in range(len(arr) - 1)]\n    res = sum(arr[:k + 1])\n    for j in range(z, 0, -1):\n        if k + 1 - 2 * j > 0 and k + 1 - 2 * j > 0:\n            res = max(res, j * max(sp[:k - 2 * j + 1]) + sum(arr[:k + 1 - 2 * j]))\n    print(res)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (n, k, z) = MI()\n    aa = LI()\n    r = max(0, k - 2 * z)\n    s = sum(aa[:r + 1])\n    ans = -1\n    for i in range(min(n - 1, k)):\n        if i + 1 <= r:\n            cur = s + (aa[i] + aa[i + 1]) * z\n        else:\n            s += aa[i + 1]\n            left = k - i - 1\n            cur = s + aa[i + 1] * (left // 2) + aa[i] * (left - left // 2)\n        ans = max(ans, cur)\n    print(ans)", "def solve(a, k, z):\n    r = sum(a[:k])\n    if z > 0:\n        r += max((a[i] + a[i + 1] for i in range(k))) * z\n    return r\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(max((solve(a, k - z * 2 + 1, z) for z in range(z + 1) if z * 2 <= k)))", "import collections\n\ndef sort(key):\n    return len(key[1])\n\ndef solve(lst, p, l):\n    stck = []\n    mx = 0\n    sm = 0\n    ans = 0\n    for i in range(p + 1):\n        if i < len(lst) - 1:\n            mx = max(mx, lst[i] + lst[i + 1])\n        sm += lst[i]\n        if i % 2 == p % 2:\n            m = (p - i) // 2\n            if m <= l:\n                ans = max(ans, mx * m + sm)\n    return ans\nans = []\nn = int(input())\nfor i in range(n):\n    (n, p, l) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    print(solve(lst, p, l))\nfor i in ans:\n    print(i)", "n = int(input())\nfor i in range(n):\n    (n, k, z) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sum(l[:k + 1])\n    m = [l[i] + l[i - 1] for i in range(1, k + 1)]\n    ans = s\n    for i in range(1, z + 1):\n        c = s\n        if 1 + k - 2 * (i - 1) >= 1 and (i - 1) * 2 + 1 <= len(m):\n            c = c - sum(l[1 + k - 2 * (i - 1):1 + k]) - m[-(i - 1) * 2 - 1]\n            if len(m[:-(i - 1) * 2 - 1]) > 1:\n                c += max(m[:-(i - 1) * 2 - 1]) * i\n            else:\n                c += m[0] * i\n            ans = max(ans, c)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, z) = map(int, input().split())\n    f = list(map(int, input().split()))\n    g = []\n    for i in range(0, min(k, n)):\n        g.append(f[i] + f[i + 1])\n    res = sum(f[:k + 1])\n    for i in range(1, z + 1):\n        index = k + 1 - 2 * i\n        if index < 0:\n            break\n        tmp = sum(f[:index])\n        lm = max(g[:index]) if index > 0 else 0\n        res = max(res, tmp + lm * i)\n    print(res)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nMOD = 998244353\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, k, Z) = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    pre = [a[0]]\n    mx = [0]\n    for i in range(n - 1):\n        pre.append(pre[i] + a[i + 1])\n        mx.append(max(a[i] + a[i + 1], mx[i]))\n    ans = [-1] * 6\n    ans[0] = pre[k]\n    for z in range(1, Z + 1, 1):\n        if k - 2 * z < 0:\n            break\n        tmp = pre[k - 2 * z]\n        tmp += z * mx[k - 2 * z + 1]\n        ans[z] = tmp\n    print(max(ans))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(a[0] + max((sum(a[1:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "m = lambda : map(int, input().split())\n(t,) = m()\nfor _ in [0] * t:\n    (n, k, z) = m()\n    a = (*m(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    ans = 0\n    pre = [ar[0]]\n    mx = [ar[0] + ar[1]]\n    for i in range(1, len(ar)):\n        pre.append(pre[i - 1] + ar[i])\n    for i in range(1, len(ar) - 1):\n        mx.append(max(mx[i - 1], ar[i] + ar[i + 1]))\n    mx.append(0)\n    for i in range(z + 1):\n        index = k - 2 * i\n        if index < 0:\n            break\n        ans = max(ans, i * mx[index] + pre[index])\n    print(ans)", "m = lambda : map(int, input().split())\n(t,) = m()\nfor _ in [0] * t:\n    (n, k, z) = m()\n    a = (*m(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = 0\n    s = a[0]\n    v = 0\n    for i in range(1, k + 1):\n        s += a[i]\n        d = max(d, a[i - 1] + a[i])\n        if i % 2 == k % 2:\n            x = (k - i) // 2\n            if x <= z:\n                v = max(v, s + x * d)\n        else:\n            x = (k - i + 1) // 2\n            if x <= z:\n                v = max(v, s - a[i] + x * d)\n    print(v)", "OK = lambda : map(int, input().split())\n(t,) = OK()\nfor _ in [0] * t:\n    (n, m, z) = OK()\n    a = (*OK(),)\n    print(max((sum(a[:m + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:m + 2 - (2 * i or m)]))) for i in range(min(z, m // 2) + 1))))", "t = int(input())\nfor _ in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split())) + [0]\n    s = list(a)\n    for i in range(n - 1):\n        s[i + 1] += s[i]\n    mx = 0\n    v = [0] * n\n    for i in range(n):\n        mx = max(mx, a[i] + a[i + 1])\n        v[i] = mx\n    ans = 0\n    for i in range(0, min(z * 2, k) + 1, 2):\n        j = k - i\n        x = s[j] + i // 2 * v[j]\n        ans = max(ans, x)\n    print(ans)", "t = int(input())\nfor j in range(t):\n    (n, k, z) = map(int, input().split())\n    L = map(int, input().split())\n    L = list(L)\n    z = min(k // 2, z)\n    A = L[:k + 1]\n    if z == 0:\n        print(sum(A))\n    else:\n        D = []\n        D = D + [sum(A)]\n        F = A[:k + 2 - z * 2]\n        e = f = 0\n        for i in range(k + 1 - z * 2):\n            e = F[i] + F[i + 1]\n            if e > f:\n                f = e\n        for y in range(1, z + 1):\n            l = len(A)\n            A = A[:l - 2]\n            h = g = 0\n            for i in range(len(F) - 1, len(A) - 1):\n                g = A[i] + A[i + 1]\n                if g > h:\n                    h = g\n            if h > f:\n                D = D + [sum(A) + h * y]\n            else:\n                D = D + [sum(A) + f * y]\n        Z = L[:k]\n        for i in range(1, z + 1):\n            r = len(Z)\n            D = D + [sum(Z[:r - 1]) + (Z[r - 1] + Z[r - 2]) * i]\n            Z = Z[:r - 2]\n        print(max(D))", "for t in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = [a[0]]\n    b = [0]\n    c = a[0]\n    for i in range(1, k + 1):\n        c += a[i]\n        s.append(c)\n        b.append(max(b[i - 1], a[i] + a[i - 1]))\n    m = 1\n    k -= 2\n    while m <= z and k >= 0:\n        d = s[k] + m * b[k + 1]\n        if d > c:\n            c = d\n        m += 1\n        k -= 2\n    print(c)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "from sys import stdin, setrecursionlimit as srl\nfrom threading import stack_size, Thread\nsrl(int(1000000000.0) + 7)\nstack_size(int(100000000.0))\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        a = [0]\n        (n, k, z) = map(int, input().split())\n        x = input().split()\n        for i in x:\n            a.append(int(i))\n        Ma = float('-inf')\n        M = [Ma, Ma]\n        for i in range(2, k + 2):\n            Ma = max(Ma, a[i] + a[i - 1])\n            M.append(Ma)\n        pre = [0, a[1]]\n        for i in range(2, k + 2):\n            pre.append(pre[-1] + a[i])\n        Ma = float('-inf')\n        for i in range(max(1, k + 1 - 2 * z), k + 2):\n            if (k + 1 - i) % 2:\n                poss = pre[i] + a[i - 1] + (k - i) * M[i] // 2\n                Ma = max(Ma, poss)\n            else:\n                poss = pre[i] + (k - i + 1) * M[i] // 2\n                Ma = max(Ma, poss)\n        print(Ma)\nThread(target=solve).start()", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(0, T):\n    (n, k, z) = list(map(int, sys.stdin.readline().strip().split()))\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = [0] * n\n    c = [0] * n\n    c[0] = a[0]\n    d = [0] * n\n    d[0] = a[0] + a[1]\n    for i in range(1, n):\n        b[i - 1] = a[i] + a[i - 1]\n        c[i] = c[i - 1] + a[i]\n    for i in range(1, n):\n        d[i] = max(d[i - 1], b[i])\n    s = a[0]\n    m = b[0]\n    ans = 0\n    i = z\n    while i >= 0:\n        if 2 * i <= k:\n            ans = max(ans, c[k - 2 * i] + i * d[k - 2 * i])\n        i = i - 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "import math\n\ndef solve(a, k, z):\n    r = -math.inf\n    if k > 1:\n        r = sum(a[:k]) + max((a[i] + a[i + 1] for i in range(k - 1))) * z\n    if k > 0 and z > 0:\n        r = max(r, sum(a[:k]) + (a[k - 1] + a[k]) * z)\n    return r\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(max((solve(a, k - z * 2 + 1, z) for z in range(z + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    total = 0\n    sum = 0\n    r = k\n    res = []\n    rem = k - z * 2\n    if rem <= 0:\n        l = 0\n    else:\n        l = rem + 1\n    for i in range(l):\n        total += arr[i]\n    for i in range(k):\n        sum += arr[i]\n        if r - z * 2 <= 0:\n            r -= 1\n            if r % 2 == 0:\n                res.append(arr[i + 1] + sum + r // 2 * (arr[i] + arr[i + 1]))\n            else:\n                a = (r - 1) // 2\n                res.append(arr[i + 1] + sum + a * (arr[i] + arr[i + 1]) + arr[i])\n        else:\n            res.append(sum + z * (arr[i] + arr[i + 1]) + (total - sum))\n            r -= 1\n    print(max(res))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(max((sum(a[:k + 1 - 2 * i]) + i * max(map(sum, zip(a, a[1:k + 2 - (2 * i or k)]))) for i in range(min(z, k // 2) + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = []\n    for i in range(1, k + 1):\n        m.append(a[i] + a[i - 1])\n    m.append(-1)\n    ma = -1\n    sm = 0\n    max_ans = 0\n    for i in range(k + 1):\n        ma = max(ma, m[i])\n        sm += a[i]\n        j = (k - i) // 2\n        if i + 2 * j == k and j >= 0 and (j <= z):\n            max_ans = max(max_ans, sm + j * ma)\n    print(max_ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(a[0] + max((sum(a[1:k + 1 - 2 * i]) + i * max((a[j] + a[j + 1] for j in range(k + 1 - (2 * i or k)))) for i in range(min(z, k // 2) + 1))))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for i in range(k + 1):\n        if i < n - 1:\n            mx = max(mx, a[i] + a[i + 1])\n        s += a[i]\n        if i % 2 == k % 2:\n            tmp = (k - i) // 2\n            if tmp <= z:\n                ans = max(ans, s + mx * tmp)\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(a[0] + max((sum(a[1:k + 1 - 2 * i]) + i * max((a[j] + a[j + 1] for j in range(k + 1 - (2 * i or 1)))) for i in range(min(z, k // 2) + 1))))", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = []\n    for i in range(1, k + 1):\n        m.append(a[i] + a[i - 1])\n    m.append(-1)\n    ma = -1\n    sm = 0\n    max_ans = 0\n    for i in range(k + 1):\n        ma = max(ma, m[i])\n        sm += a[i]\n        j = (k - i) // 2\n        if i + 2 * j == k and j >= 0 and (j <= z):\n            max_ans = max(max_ans, sm + j * ma)\n    print(max_ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = [a[0]] * n\n    for i in range(1, n):\n        s[i] = s[i - 1] + a[i]\n    val = []\n    for i in range(1, k + 1):\n        if k - i == 2 * z:\n            val.append(s[i] + z * (a[i - 1] + a[i]))\n        elif k - i < 2 * z:\n            x = k - i\n            val.append(s[i] + ceil(x / 2) * a[i - 1] + x // 2 * a[i])\n        else:\n            x = k - i - 2 * z\n            val.append(s[i + x] + z * (a[i - 1] + a[i]))\n    print(max(val))", "def solve(arr, k, z):\n    pre = [0]\n    for i in arr:\n        pre.append(pre[-1] + i)\n    ans = 0\n    for i in range(1, len(arr)):\n        moves = k - i\n        s = pre[i]\n        left = min(z * 2, moves)\n        s += (arr[i] + arr[i - 1]) * (left // 2) + left % 2 * arr[i - 1]\n        movesleft = moves - left\n        s += pre[i + movesleft + 1] - pre[i]\n        ans = max(ans, s)\n    return ans\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    arr = list(map(int, input().split()))[:k + 1]\n    print(solve(arr, k, z))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = [l[0]]\n    for i in range(1, n):\n        p.append(l[i] + p[i - 1])\n    r = [0]\n    for i in range(1, n):\n        r.append(l[i] + l[i - 1])\n    ans = 0\n    y = min(n, k + 1)\n    k -= 1\n    for i in range(1, y):\n        t = k\n        temp = 0\n        if t >= 2 * z:\n            temp = r[i] * z\n            t -= 2 * z\n            temp += p[i + t]\n        elif t % 2 == 0:\n            temp = r[i] * (t // 2) + p[i]\n        else:\n            temp = r[i] * (t // 2) + l[i - 1] + p[i]\n        if temp > ans:\n            ans = temp\n        k -= 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    array = list(map(int, input().split()))\n    m = []\n    ans = 0\n    prefix = array[:]\n    for i in range(1, len(array)):\n        prefix[i] += prefix[i - 1]\n    for i in range(1, min(k + 1, len(array))):\n        if m == [] or array[i] + array[i - 1] > sum(m) or (array[i] + array[i - 1] == sum(m) and array[i - 1] > m[0]):\n            m = [array[i - 1], array[i]]\n            steps = k\n            temp = 0\n            steps -= i\n            temp += prefix[i]\n            if steps < 0:\n                break\n            if math.ceil(steps / 2) <= z:\n                temp += m[0] * math.ceil(steps / 2)\n                temp += m[1] * (steps // 2)\n            else:\n                temp += sum(m) * z\n                steps -= 2 * z\n                temp -= prefix[i]\n                temp += prefix[min(len(array) - 1, i + steps)]\n            ans = max(ans, temp)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [0] * n\n    pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = a[i] + pre[i - 1]\n    mx = -1\n    for i in range(1, k + 1):\n        mv = min(z, (k - i + 1) // 2)\n        su = mv * (a[i] + a[i - 1]) + pre[k - 2 * mv]\n        mx = max(mx, su)\n    print(mx)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k, z) = R()\n    a = (*R(),)\n    print(a[0] + max((sum(a[1:k + 1 - 2 * i]) + i * max((a[j] + a[j + 1] for j in range(k + min(0, 1 - 2 * i)))) for i in range(min(z, k // 2) + 1))))", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\n\ndef solve(arr, k, z):\n    pre = [0]\n    for i in arr:\n        pre.append(pre[-1] + i)\n    ans = 0\n    for i in range(1, len(arr)):\n        moves = k - i\n        s = pre[i]\n        left = min(z * 2, moves)\n        s += (arr[i] + arr[i - 1]) * (left // 2) + left % 2 * arr[i - 1]\n        movesleft = moves - left\n        s += pre[i + movesleft + 1] - pre[i]\n        ans = max(ans, s)\n    return ans\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    arr = list(map(int, input().split()))[:k + 1]\n    print(solve(arr, k, z))", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    res = [0] * n\n    res[0] = A[0]\n    for i in range(1, n):\n        res[i] = res[i - 1] + A[i]\n    mx = -1\n    for i in range(1, k + 1):\n        mv = min(z, (k - i + 1) // 2)\n        su = (A[i] + A[i - 1]) * mv + res[k - 2 * mv]\n        mx = max(mx, su)\n    print(mx)", "t = int(input())\nfor _ in range(t):\n    a = [0]\n    (n, k, z) = map(int, input().split())\n    x = input().split()\n    for i in x:\n        a.append(int(i))\n    Ma = float('-inf')\n    M = [Ma, Ma]\n    for i in range(2, k + 2):\n        Ma = max(Ma, a[i] + a[i - 1])\n        M.append(Ma)\n    pre = [0, a[1]]\n    for i in range(2, k + 2):\n        pre.append(pre[-1] + a[i])\n    Ma = float('-inf')\n    for i in range(max(1, k + 1 - 2 * z), k + 2):\n        if (k + 1 - i) % 2:\n            poss = pre[i] + a[i - 1] + (k - i) * M[i] // 2\n            Ma = max(Ma, poss)\n        else:\n            poss = pre[i] + (k - i + 1) * M[i] // 2\n            Ma = max(Ma, poss)\n    print(Ma)", "rw = int(input())\nfor qwe in range(rw):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = []\n    pref = []\n    q = 0\n    for i in range(n):\n        q += a[i]\n        pref.append(q)\n    for i in range(1, n):\n        if k < i:\n            break\n        if k == i:\n            p.append(pref[i])\n            break\n        if k - i - z * 2 > 0:\n            p.append(pref[i] + (a[i - 1] + a[i]) * z)\n            p[i - 1] += pref[k - z * 2] - pref[i]\n        else:\n            p.append(pref[i] + (a[i - 1] + a[i]) * ((k - i) // 2))\n            if (k - i) % 2 == 1:\n                p[i - 1] += max(a[i - 1], a[i + 1])\n    print(max(p))", "import heapq\nimport collections\nfrom math import log2\nimport itertools\nfrom functools import lru_cache\nfrom sys import setrecursionlimit as srl\nsrl(2 * 10 ** 6)\nN = 200001\n\ndef solve(n, k, z, a):\n    ps = [0]\n    ans = 0\n    sco = 0\n    for i in range(1, n + 1):\n        ps.append(ps[-1] + a[i])\n    for i in range(2, n + 1):\n        req = i - 1\n        if req > k:\n            break\n        rem = k - req\n        tot = min(rem, 2 * z)\n        x = a[i] + a[i - 1]\n        sco = tot // 2 * x + tot % 2 * a[i - 1]\n        sco += ps[i]\n        rem -= tot\n        sco += ps[i + rem] - ps[i]\n        ans = max(ans, sco)\n    return ans\nt = int(input())\nfor _ in range(1, t + 1):\n    (n, k, z) = map(int, input().split())\n    a = [0]\n    in_ = map(int, input().split())\n    for x in in_:\n        a.append(x)\n    print(solve(n, k, z, a))", "import math\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    su = [lst[0]]\n    count = 0\n    for i in range(1, k + 1):\n        su.append(lst[i] + su[i - 1])\n    if z == 0:\n        print(su[k])\n    else:\n        ma = lst[k]\n        for i in range(1, k + 1):\n            a = min(k - i, z)\n            if k - i > 2 * z:\n                b = (lst[i] + lst[i - 1]) * a + su[k - 2 * a]\n            else:\n                c = int(math.floor((k - i) / 2))\n                d = int(math.ceil((k - i) / 2))\n                b = su[i] + lst[i] * c + lst[i - 1] * d\n            if b > ma:\n                ma = b\n        print(ma)", "t = int(input())\nwhile t > 0:\n    (n, k, z) = [int(x) for x in input().split()]\n    l_s = list(map(int, input().split()))\n    p_sum = []\n    s = 0\n    d = z\n    ans = 0\n    for i in l_s[:k + 1]:\n        s += i\n        p_sum.append(s)\n    for i in range(1, k + 1):\n        l = k - i\n        score = p_sum[i]\n        z = d\n        if z <= l // 2:\n            score += (l_s[i] + l_s[i - 1]) * z\n            l -= z * 2\n            if l > 0:\n                score += p_sum[i + l] - p_sum[i]\n        else:\n            score += (l_s[i] + l_s[i - 1]) * (l // 2)\n            z -= l // 2\n            l -= l // 2 * 2\n            if l > 0 and z > 0:\n                score += max(l_s[i - 1], l_s[i + 1])\n            elif l > 0:\n                score += l_s[i + 1]\n        ans = max(ans, score)\n    print(ans)\n    t -= 1", "import sys\nfrom itertools import accumulate\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        (n, k, z) = [int(x) for x in sys.stdin.readline().split(' ')]\n        a = [int(x) for x in sys.stdin.readline().split(' ')]\n        prefix = list(accumulate(a))\n        best = 0\n        for t in range(z + 1):\n            rightMoves = k - 2 * t\n            if rightMoves < 0:\n                break\n            bestPairSum = a[0] + a[1]\n            s = 0\n            for i in range(0, min(rightMoves + 1, n - 1)):\n                bestPairSum = max(bestPairSum, a[i] + a[i + 1])\n            best = max(best, prefix[rightMoves] + t * bestPairSum)\n        print(best)\nmain()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom decimal import Decimal\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, s, r) = int_arr()\n    arr = int_arr()\n    prev = 0\n    pref = []\n    for i in range(n):\n        prev += arr[i]\n        pref.append(prev)\n    ans = arr[0]\n    for i in range(1, n):\n        if i > s:\n            break\n        ch = pref[i]\n        rem_steps = s - i\n        rev = min(r * 2, rem_steps) // 2\n        rem_back = 1 if r - rev > 0 else 0\n        ch += (arr[i] + arr[i - 1]) * rev\n        rest = rem_steps - rev * 2\n        if rest > 0:\n            if rem_back == 1:\n                ch += arr[i - 1]\n                rest -= 1\n                ch += pref[i - 1 + rest] - pref[i - 1]\n            else:\n                ch += pref[i + rest] - pref[i]\n        ans = max(ans, ch)\n    print(ans)", "t = int(input())\nwhile t:\n    (n, k, z) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    k_sum = sum(a[0:k + 1])\n    pre = [a[0]]\n    for i in range(1, k + 1):\n        pre.append(pre[-1] + a[i])\n    maxi = a[0]\n    curr = a[0]\n    for i in range(1, k + 1):\n        left = k - i\n        curr += a[i]\n        if left >= 2 * z:\n            temp = curr + a[i - 1] * z + a[i] * z\n            left = left - 2 * z\n            temp += pre[left + i] - pre[i]\n            maxi = max(temp, maxi)\n        else:\n            temp = curr + a[i - 1] * (left // 2 + left % 2) + a[i] * (left // 2)\n            maxi = max(temp, maxi)\n        maxi = max(curr, maxi)\n    print(maxi)\n    t -= 1", "from math import ceil, floor\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    (a, s, su) = (list(map(int, input().split())), [], 0)\n    for i in range(k + 1):\n        s.append(su + a[i])\n        su += a[i]\n    l = s[k]\n    for i in range(1, k + 1):\n        f = min(k - i, 2 * x)\n        safe = s[i] + ceil(f / 2) * a[i - 1] + floor(f / 2) * a[i]\n        if k - i != f:\n            safe += s[k - 2 * x] - s[i]\n        if safe > l:\n            l = safe\n    print(l)", "from math import ceil, floor\nt = int(input())\nwhile t > 0:\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = []\n    su = 0\n    for i in range(k + 1):\n        s.append(su + a[i])\n        su += a[i]\n    l = s[k]\n    for i in range(1, k + 1):\n        f = min(k - i, 2 * x)\n        safe = s[i] + ceil(f / 2) * a[i - 1] + floor(f / 2) * a[i]\n        if k - i != f:\n            safe += s[k - 2 * x] - s[i]\n        if safe > l:\n            l = safe\n    print(l)\n    t = t - 1", "from math import ceil, floor\nfor _ in range(int(input())):\n    (n, k, x) = [int(i) for i in input().split()]\n    lst = [int(i) for i in input().split()]\n    (s, su) = (list(), 0)\n    for i in range(k + 1):\n        s.append(su + lst[i])\n        su += lst[i]\n    result = s[k]\n    for i in range(1, k + 1):\n        f = min(k - i, 2 * x)\n        safe = s[i] + ceil(f / 2) * lst[i - 1] + floor(f / 2) * lst[i]\n        if k - i != f:\n            safe += s[k - 2 * x] - s[i]\n        if safe > result:\n            result = safe\n    print(result)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = [0]\n    for x in a:\n        s += (x + s[-1],)\n    ans = 0\n    i = 0\n    ans = 0\n    while i < k:\n        sum = s[i + 1] - s[0]\n        mv = k - i\n        hf = mv // 2\n        l = min(z, hf)\n        sum += l * (a[i] + a[i + 1])\n        mv -= 2 * l\n        if mv:\n            sum += s[i + 1 + mv] - s[i + 1]\n        ans = max(sum, ans)\n        i += 1\n    print(ans)", "import sys, math as mt\nimport heapq as hp\nimport math as mt\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n, k, x) = I()\n    l = I()\n    if x == 0:\n        print(sum(l[:k + 1]))\n    else:\n        temp = l[:k + 1]\n        ans = sum(temp)\n        d = max(temp)\n        su = 0\n        used = 0\n        pre = temp.copy()\n        for i in range(1, k):\n            pre[i] += pre[i - 1]\n        for i in range(k):\n            if i - 1 >= 0:\n                su = pre[i]\n                if x + (x - 1) + i <= k:\n                    le = x\n                else:\n                    still = k - i\n                    le = min(x, mt.ceil(still / 2))\n                su += le * temp[i - 1]\n                su += (le - 1) * temp[i]\n                used = i + le + (le - 1)\n                touse = k - used\n                su += pre[i - 1 + touse] - pre[i - 1]\n                ans = max(ans, su)\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, z) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    z1 = []\n    z2 = 0\n    max1 = 0\n    for i in range(n):\n        z2 += a[i]\n        z1 += [z2]\n    if z == 0 or k == 1:\n        print(z1[k])\n    else:\n        i = 1\n        t1 = z1[i]\n        k1 = 1\n        k2 = k1\n        while i < n and k1 <= k:\n            t1 = z1[i]\n            k2 = k1\n            t2 = t1\n            if 2 * z < k - k2:\n                t2 += a[i] * z\n                t2 += a[i - 1] * z\n                k2 += 2 * z\n                if k2 < k:\n                    t2 += z1[i + (k - k2)] - z1[i]\n            else:\n                t2 += a[i] * ((k - k2) // 2)\n                t2 += a[i - 1] * ((k - k2) // 2)\n                if (k - k2) % 2 == 1:\n                    t2 += a[i - 1]\n            max1 = max(max1, t2)\n            i += 1\n            k1 += 1\n        print(max1)", "def task1(arr, k, z):\n    maxsum = 0\n    for lmoves in range(z + 1):\n        rmoves = k - 2 * lmoves\n        sum_rmoves = sum(arr[:rmoves + 1])\n        for lrpos in range(rmoves + 1):\n            if lrpos < len(arr) - 1:\n                tempsum = lmoves * (arr[lrpos] + arr[lrpos + 1]) + sum_rmoves\n                maxsum = tempsum if tempsum > maxsum else maxsum\n    return maxsum\nt = int(input())\nresults = []\nfor i in range(t):\n    [n, k, z] = input().split()\n    arr = input().split()\n    arr = [int(arr[i]) for i in range(len(arr))]\n    results.append(task1(arr, int(k), int(z)))\nfor i in range(t):\n    print(results[i])", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    m = 0\n    for left in range(z + 1):\n        if k - 2 * left + 1 >= 0:\n            temp = 0\n            for j in range(k - 2 * left + 1):\n                if j + 1 < n and a[j] + a[j + 1] > temp:\n                    temp = a[j] + a[j + 1]\n            m = max(m, sum(a[:k - 2 * left + 1]) + left * temp)\n    print(m)", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split())\n    l = list(map(int, input().split()))\n    sumarray = [l[0]]\n    sum = l[0]\n    for j in range(1, n):\n        sum += l[j]\n        sumarray.append(sum)\n    maxx = 0\n    for j in range(1, n):\n        req = j\n        if req > k:\n            break\n        rem = k - req\n        x = l[j - 1] + l[j]\n        total = min(rem, 2 * z)\n        score = x * (total // 2) + total % 2 * l[j - 1]\n        score += sumarray[j]\n        rem -= total\n        if rem > 0:\n            score += sumarray[j + rem] - sumarray[j]\n        maxx = max(maxx, score)\n    print(maxx)", "def solve(n, k, z, a):\n    answ = sum(a[:k + 1])\n    for t in range(z + 1):\n        max_sum = 0\n        s = 0\n        for i in range(k - 2 * t + 1):\n            s1 = 0 if i + 1 >= len(a) else a[i + 1] + a[i]\n            if s1 > max_sum:\n                max_sum = s1\n            s += a[i]\n        if max_sum * t + s > answ:\n            answ = max_sum * t + s\n    print(answ)\nt = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    solve(n, k, z, a)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pref = [0] * n\n    pref[0] = a[0]\n    ans = a[0]\n    for i in range(1, n):\n        pref[i] = pref[i - 1] + a[i]\n    for i in range(1, n):\n        if k - i < 0:\n            continue\n        r = k - i\n        l = min(k - i, 2 * z)\n        t = l // 2\n        temp = pref[i] + (a[i] + a[i - 1]) * t\n        r -= t * 2\n        if r > 0 and l & 1:\n            if a[i + 1] > a[i - 1]:\n                temp += a[i + 1]\n                i += 1\n            else:\n                temp += a[i - 1]\n                i -= 1\n            r -= 1\n        if r > 0:\n            temp += pref[i + r] - pref[i]\n        ans = max(ans, temp)\n    print(ans)", "def solution():\n    (n, k, z) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a1 = sorted([(a[i], i) for i in range(k + 1)], reverse=True)\n    sums = [a[0]]\n    for i in range(1, n):\n        sums.append(sums[i - 1] + a[i])\n    answer = 0\n    for (ai, pos) in a1:\n        rest_k = k - pos\n        cur_sum = sums[pos]\n        tmp = -1\n        if 0 < pos < n - 1:\n            tmp = a[pos - 1]\n            if a[pos - 1] < a[pos + 1]:\n                tmp = a[pos + 1]\n        elif pos > 0:\n            tmp = a[pos - 1]\n        elif pos < n - 1:\n            tmp = a[pos + 1]\n        if tmp == -1:\n            continue\n        steps = min(z * 2, rest_k) // 2\n        cur_sum += steps * (tmp + a[pos])\n        rest_k -= steps * 2\n        cur_sum += sums[pos + rest_k] - sums[pos]\n        answer = max(answer, cur_sum)\n    print(answer)\nt = int(input())\nfor _ in range(t):\n    solution()", "for test in range(int(input())):\n    (n, k, z) = map(int, input('').split())\n    A = list(map(int, input('').split()))\n    ans = 0\n    prefix = [A[0]]\n    for i in range(1, n):\n        prefix.append(prefix[-1] + A[i])\n    if z == 0:\n        print(prefix[k])\n        continue\n    best = 0\n    ans = 0\n    i = 0\n    temp = k\n    while i < n - 1 and k >= 0:\n        ans = prefix[i]\n        ans += min(z, k // 2) * (A[i] + A[i + 1])\n        k -= min(2 * z, 2 * (k // 2))\n        if k >= 0:\n            ans += prefix[k + i] - prefix[i]\n            k = temp\n        best = max(ans, best)\n        i += 1\n        k -= 1\n        temp = k\n    print(best)", "t = int(input())\nfor i in range(t):\n    (n, k, z) = map(int, list(input().split()))\n    a = list(map(int, list(input().split())))\n    l = 0\n    for j in range(min(z + 1, k // 2 + 1)):\n        x = sum(a[:k - 2 * j + 1])\n        d = 0\n        for m in range(k - 2 * j + 1):\n            c = sum(a[m:m + 2])\n            if c > d:\n                d = c\n        y = x + j * d\n        if y > l:\n            l = y\n    print(l)", "t = int(input())\nfor ii in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    rightStop = []\n    leftStop = [0]\n    s = sum(a[:k + 1])\n    rightStop.append(s)\n    init = 1\n    while init <= z:\n        tempMoves = k - 2 * init + 2\n        if k - 2 * init >= 0:\n            leftStop.append(sum(a[:tempMoves]) + a[tempMoves - 2] * init + a[tempMoves - 1] * (init - 1))\n        else:\n            break\n        init += 1\n    init = 1\n    while init <= z:\n        if k - 2 * init >= 0:\n            maxIndex = k - 2 * init\n            best = 0\n            for i in range(maxIndex):\n                best = max(best, a[i] + a[i + 1])\n            rightStop.append(sum(a[:maxIndex + 1]) + best * init)\n            init += 1\n        else:\n            break\n    print(max(max(leftStop), max(rightStop)))", "def mi():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\nt = ii()\nfor _ in range(t):\n    (n, k, z) = mi()\n    a = li()\n    psum = [a[0]]\n    for i in range(1, k + 1):\n        psum.append(psum[-1] + a[i])\n    if z == 0:\n        print(psum[-1])\n        continue\n    ans = a[0]\n    for i in range(1, k + 1):\n        s = psum[i]\n        total = k - i\n        left = min(total // 2 + total % 2, z)\n        right = total - left\n        s += a[i - 1] * left + a[i] * (left - 1)\n        right -= left - 1\n        s += psum[i - 1 + right] - psum[i - 1]\n        ans = max(ans, s)\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        (n, k, z) = map(int, input().split())\n        a = list(map(int, input().split()))\n        ans = 0\n        mx = 0\n        s = 0\n        for t in range(z + 1):\n            pos = k - 2 * t\n            if pos < 0:\n                continue\n            mx = 0\n            s = 0\n            for i in range(pos + 1):\n                if i < n - 1:\n                    mx = max(mx, a[i] + a[i + 1])\n                s += a[i]\n            ans = max(ans, s + mx * t)\n        print(ans)\nmain()", "def solve(nums, n, k, z):\n    ans = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            break\n        cur_sum = 0\n        max_trip = 0\n        for i in range(pos + 1):\n            cur_sum += nums[i]\n            if i + 1 < n:\n                max_trip = max(max_trip, nums[i] + nums[i + 1])\n        ans = max(ans, cur_sum + max_trip * t)\n    return ans\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    nums = [int(x) for x in input().split()]\n    print(solve(nums, n, k, z))", "import math\nimport string\nimport random\nfrom random import randrange\nfrom collections import deque\nfrom collections import defaultdict\n\ndef solve(n, arr, x, y, st):\n    ans = 0\n    return\n\ndef main():\n    t = int(input())\n    while t > 0:\n        t -= 1\n        (n, k, z) = map(int, input().strip().split(' '))\n        a = list(map(int, input().strip().split(' ')))\n        ans = 0\n        for x in range(z + 1):\n            pos = k - 2 * x\n            sm = 0\n            mx = 0\n            if pos < 0:\n                continue\n            for i in range(pos + 1):\n                if i != n - 1:\n                    mx = max(mx, a[i] + a[i + 1])\n                sm += a[i]\n            ans = max(ans, sm + x * mx)\n        print(ans)\n    return\n\ndef test():\n    arr_size = 25\n    test_cases = 100\n    min_range = -100\n    max_range = 100\n    str_size = 30\n    step = 1\n    print('<-------- DEBUG ----------->')\n    for i in range(test_cases):\n        k = []\n        for j in range(arr_size):\n            num = randrange(min_range, max_range, step)\n            k.append(num)\n        solve(n, arr)\n    print('<-------- DEBUG ----------->')\n    return\nmain()", "def main():\n    for _ in range(int(input())):\n        (n, k, z) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        ans = 0\n        s = 0\n        mx = 0\n        for i in range(z + 1):\n            pos = k - 2 * i\n            if pos < 0:\n                continue\n            s = 0\n            mx = 0\n            for t in range(pos + 1):\n                if t < n - 1:\n                    mx = max(mx, arr[t] + arr[t + 1])\n                s = s + arr[t]\n            ans = max(ans, i * mx + s)\n        print(ans)\nmain()", "T = int(input())\nfor _ in range(T):\n    (n, k, z) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(z + 1):\n        ans1 = 0\n        _max = 0\n        pos = k - 2 * i\n        if pos < 0:\n            continue\n        for j in range(pos + 1):\n            if j < n - 1:\n                _max = max(arr[j] + arr[j + 1], _max)\n        ans1 += sum(arr[0:pos + 1])\n        ans1 += _max * i\n        ans = max(ans1, ans)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for t in range(z + 1):\n        cnt = k - 2 * t\n        mp = 0\n        s = 0\n        for i in range(cnt + 1):\n            s += a[i]\n            if i + 1 < n:\n                mp = max(mp, a[i] + a[i + 1])\n        ans = max(ans, s + mp * t)\n    print(ans)", "from cmath import sqrt\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom functools import reduce\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    mx = 0\n    ans = 0\n    s = 0\n    for t in range(z + 1):\n        id = k - 2 * t\n        if id < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(id + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s = s + a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, K, Z) = map(int, input().split())\n        A = [0] + list(map(int, input().split()))\n        dp = [[0] * (N + 1) for i in range(Z + 1)]\n        for j in range(1, N + 1):\n            dp[0][j] = dp[0][j - 1] + A[j]\n        for z in range(1, Z + 1):\n            for j in range(1, N + 1):\n                if j == N:\n                    dp[z][j] = dp[z][j - 1] + A[j]\n                else:\n                    dp[z][j] = max(dp[z][j - 1] + A[j], dp[z - 1][j + 1] + A[j])\n        ans = 0\n        for i in range(Z + 1):\n            if K + 1 - i * 2 < 0:\n                break\n            ans = max(ans, dp[i][K + 1 - i * 2])\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            break\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, z) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    s = 0\n    mx = 0\n    for t in range(z + 1):\n        pos = k - 2 * t\n        if pos < 0:\n            continue\n        mx = 0\n        s = 0\n        for i in range(pos + 1):\n            if i < n - 1:\n                mx = max(mx, a[i] + a[i + 1])\n            s += a[i]\n        ans = max(ans, s + mx * t)\n    print(ans)"]