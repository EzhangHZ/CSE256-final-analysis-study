["list1 = []\nfor i in range(int(input())):\n    n = int(input())\n    s = list(map(lambda x: int(x), input().split()))\n    k = sum(s) - 2 * max(s)\n    if k in s:\n        s.remove(k)\n        if 2 * max(s) == sum(s):\n            s.remove(max(s))\n            list1.append(' '.join(list(map(lambda x: str(x), s))))\n        else:\n            list1.append(-1)\n    else:\n        s.remove(max(s))\n        if 2 * max(s) == sum(s):\n            s.remove(max(s))\n            list1.append(' '.join(list(map(lambda x: str(x), s))))\n        else:\n            list1.append(-1)\nprint(*list1, sep='\\n')", "t = int(input())\nfor x in range(t):\n    new_lst = []\n    length = int(input())\n    lst = [int(a) for a in input().split()]\n    a = max(lst)\n    lst.remove(a)\n    total = sum(lst)\n    z = total - a\n    if z in lst:\n        lst.remove(z)\n        for j in lst:\n            new_lst.append(str(j))\n        print(' '.join(new_lst))\n    else:\n        a = max(lst)\n        lst.remove(a)\n        if sum(lst) == a:\n            for j in lst:\n                new_lst.append(str(j))\n            print(' '.join(new_lst))\n        else:\n            print(-1)", "def sanitize(arr, n):\n    max_val = max(arr)\n    arr.remove(max_val)\n    adversary = sum(arr) - max_val\n    try:\n        adv_idx = arr.index(adversary)\n        arr.pop(adv_idx)\n        return arr\n    except:\n        next_max = max(arr)\n        arr.remove(next_max)\n        if sum(arr) == next_max:\n            return arr\n        return [-1]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    line = input()\n    a = [int(x) for x in line.split(' ')]\n    result = [str(x) for x in sanitize(a, n)]\n    print(' '.join(result))", "def corruptedArray(l):\n    lm = max(l)\n    lmi = l.index(lm)\n    d = l[:lmi] + l[lmi + 1:]\n    ls = sum(d)\n    x = ls - lm\n    try:\n        z = d.index(x)\n    except:\n        dm = max(d)\n        dmi = d.index(dm)\n        g = d[:dmi] + d[dmi + 1:]\n        ds = sum(g)\n        if ds == dm:\n            list_string = list(map(str, g))\n            return ' '.join(list_string)\n        else:\n            return '-1'\n    h = d[:z] + d[z + 1:]\n    list_string = list(map(str, h))\n    return ' '.join(list_string)\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    km = list(map(int, r2))\n    s += corruptedArray(km) + '\\n'\nprint(s)", "def find_corrupt(arr):\n    x = max(arr)\n    s = sum(arr)\n    arr.remove(x)\n    for j in range(len(arr)):\n        if 2 * x == s - arr[j]:\n            arr.pop(j)\n            return arr\n    y = max(arr)\n    if sum(arr) == 2 * y:\n        arr.remove(y)\n        return arr\n    else:\n        arr = [-1]\n        return arr\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    print(' '.join(map(str, find_corrupt(ls))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split(' ')]\n    a.sort()\n    lst = a.pop()\n    tot = sum(a)\n    if tot > lst:\n        diff = tot - lst\n        if diff in a:\n            a.remove(diff)\n            print(' '.join(map(str, a)))\n        else:\n            lst = a.pop()\n            tot -= lst\n            if lst == tot:\n                print(' '.join(map(str, a)))\n            else:\n                print(-1)\n    else:\n        lst = a.pop()\n        tot -= lst\n        if lst == tot:\n            print(' '.join(map(str, a)))\n        else:\n            print(-1)", "def spr(A):\n    s = sum(A)\n    czek = {}\n    for l in A:\n        czek[l] = czek.get(l, 0) + 1\n    for liczba in A:\n        druga = (s - liczba) / 2\n        if liczba == druga:\n            if liczba in czek and czek[liczba] > 1:\n                A.remove(liczba)\n                A.remove(druga)\n                A = list(map(str, A))\n                return ' '.join(A)\n        elif druga in czek and czek[druga] > 0:\n            A.remove(liczba)\n            A.remove(druga)\n            A = list(map(str, A))\n            return ' '.join(A)\n    return -1\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        print(spr(list(map(int, input().split()))))\nmain()", "def fxn(data):\n    has = {}\n    su = 0\n    flag = False\n    for i in data:\n        su += i\n        if i in has:\n            has[i] += 1\n        else:\n            has[i] = 1\n    for i in has:\n        temp = su - i\n        if temp % 2 != 0:\n            continue\n        temp = temp // 2\n        if has[i] > 1:\n            if i == temp:\n                has[i] -= 2\n                flag = True\n                break\n        if temp in has and i != temp:\n            has[i] -= 1\n            has[temp] -= 1\n            flag = True\n            break\n    if not flag:\n        return '-1'\n    ans = ''\n    for i in has:\n        ans += (str(i) + ' ') * has[i]\n    return ans[:-1]\n\ndef main():\n    tests = int(input())\n    for test in range(tests):\n        n = int(input())\n        arr = [int(i) for i in input().split(' ')]\n        print(fxn(arr))\nimport math\nmain()", "def helper(pool):\n    pool.sort()\n    s = sum(pool)\n    if s - pool[-1] * 2 in pool[:-1]:\n        pool.remove(s - pool[-1] * 2)\n        return pool[:-1]\n    elif s - pool[-1] == pool[-2] * 2:\n        return pool[:-2]\n    return []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    pool = list(map(int, input().split(' ')))\n    res = helper(pool)\n    if not res:\n        print('-1')\n    else:\n        print(' '.join(list(map(str, res))))", "def solve():\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = []\n    t = 0\n    d = {}\n    for x in b:\n        t += x\n        d[x] = d.get(x, 0) + 1\n    for x in b:\n        z = t - x\n        if z % 2 == 0 and d.get(z // 2, 0) > 0:\n            if z // 2 == x:\n                if d[x] > 1:\n                    ans = b.copy()\n                    ans.remove(x)\n                    ans.remove(z // 2)\n                    break\n            else:\n                ans = b.copy()\n                ans.remove(x)\n                ans.remove(z // 2)\n                break\n    if ans:\n        print(' '.join([str(x) for x in ans]))\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split(' ')]\n    m = max(nums)\n    m_i = nums.index(m)\n    nums[m_i] = 0\n    flag = False\n    s = sum(nums)\n    for i in range(len(nums)):\n        if nums[i] and s - nums[i] == m:\n            nums[i] = 0\n            print(' '.join((str(x) for x in nums if x > 0)))\n            flag = True\n            break\n    if flag:\n        continue\n    m = max(nums)\n    m_i = nums.index(m)\n    nums[m_i] = 0\n    if s - m == m:\n        print(' '.join((str(x) for x in nums if x > 0)))\n    else:\n        print(-1)", "from collections import Counter, defaultdict\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(target_N, nums):\n    total = 0\n    vis = Counter(nums)\n    (max_val, sec_max) = (-1, -1)\n    nums.sort()\n    (max_val, sec_max) = (nums[-1], nums[-2])\n    total = sum(nums)\n    vis[max_val] -= 1\n    temp_total = total - max_val\n    target = temp_total - max_val\n    if target in vis and vis[target] > 0:\n        ans = []\n        vis[target] -= 1\n        for v in vis:\n            if vis[v] > 0:\n                ans += [str(v)] * vis[v]\n        return ' '.join(ans)\n    vis[max_val] += 1\n    vis[sec_max] -= 1\n    temp_total = total - sec_max\n    target = temp_total - sec_max\n    if target in vis and vis[target] > 0:\n        ans = []\n        vis[target] -= 1\n        for v in vis:\n            if vis[v] > 0:\n                ans += [str(v)] * vis[v]\n        return ' '.join(ans)\n    return -1\nT = int(input())\nfor _ in range(T):\n    target_N = int(input())\n    nums = get_ints()\n    print(solve(target_N, nums))", "for tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    if s - 2 * a[-1] in a[:-1]:\n        a.remove(s - 2 * a[-1])\n        print(' '.join((str(i) for i in a[:-1])))\n    elif sum(a[:-2]) == a[-2]:\n        print(' '.join([str(i) for i in a[:-2]]))\n    else:\n        print(-1)", "def check_n_plus_1_candidate(candidate, b_tuple):\n    b_list_without_cand = list(b_tuple)\n    b_list_without_cand.remove(candidate)\n    b_sum = sum(b_list_without_cand)\n    for b in b_list_without_cand:\n        if b_sum - b == candidate:\n            b_list_without_cand.remove(b)\n            return b_list_without_cand\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b_tuple = tuple((int(b) for b in input().split()))\n    n_plus_1_candidates = sorted(b_tuple, reverse=True)[:2]\n    res = []\n    a_collection_is_possible = False\n    for cand in n_plus_1_candidates:\n        potential_res = check_n_plus_1_candidate(cand, b_tuple)\n        if potential_res:\n            print(' '.join(map(str, potential_res)))\n            a_collection_is_possible = True\n            break\n    if not a_collection_is_possible:\n        print(-1)", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef spr(A):\n    s = sum(A)\n    czek = Counter(A)\n    for liczba in A:\n        druga = (s - liczba) / 2\n        if liczba == druga:\n            if czek[liczba] > 1:\n                A.remove(liczba)\n                A.remove(druga)\n                A = list(map(str, A))\n                return ' '.join(A)\n        elif czek[druga] > 0:\n            A.remove(liczba)\n            A.remove(druga)\n            A = list(map(str, A))\n            return ' '.join(A)\n    return -1\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        print(spr(get_ints()))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(sorted([int(x) for x in input().split()]))\n    arr = list(reversed(arr))\n    ans = False\n    res = []\n    m = arr.pop(0)\n    s = sum(arr)\n    for i in range(n + 1):\n        x = s - arr[i]\n        if x > m:\n            break\n        elif x == m:\n            ans = True\n            res = list(map(str, arr))\n            res.pop(i)\n            break\n    if not ans:\n        res = []\n        m = arr.pop(0)\n        if sum(arr) == m:\n            ans = True\n            res = list(map(str, arr))\n    if ans:\n        print(' '.join(res))\n    else:\n        print(-1)", "I = lambda : [*map(int, input().split())]\n\ndef out(x):\n    print(str(x))\n\ndef solve():\n    n = I()\n    b = I()\n    ss = {}\n    for i in b:\n        xx = ss.setdefault(i, 0)\n        ss[i] = xx + 1\n    sm = sum(b)\n    for i in b:\n        ss[i] -= 1\n        smx = sm - i\n        if smx % 2 == 0:\n            smx = smx // 2\n            if ss.get(smx, -1) > 0:\n                ss[smx] -= 1\n                out(''.join([f'{k} ' * v for (k, v) in ss.items()]))\n                return\n        ss[i] += 1\n    out(-1)\n(t,) = I()\nfor i in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    nums = list(map(int, input().split()))\n    nums = sorted(nums)\n    (n1, n2) = (nums[-1], nums[-2])\n    total = sum(nums)\n    found = False\n    for n in nums[:-1]:\n        if total - n == 2 * n1:\n            nums.remove(n)\n            t = total - n\n            nums.remove(t // 2)\n            print(' '.join((str(i) for i in nums)))\n            found = True\n            break\n    else:\n        for n in nums[::-2] + [nums[-1]]:\n            if total - n == 2 * n2:\n                nums.remove(n)\n                t = total - n\n                nums.remove(t // 2)\n                print(' '.join((str(i) for i in nums)))\n                found = True\n                break\n    if found == False:\n        print(-1)", "def get_a(b, n):\n    b = sorted(b)\n    largest = b[-1]\n    sec_largest = b[-2]\n    corrupt_plus_sum_a = sum(b[:-1])\n    corrupt = -1\n    for i in range(n + 1):\n        if corrupt_plus_sum_a - b[i] == largest:\n            corrupt = i\n            return ' '.join([str(b[i]) for i in range(len(b) - 1) if i != corrupt])\n    if sum(b[:-2]) == sec_largest:\n        corrupt = len(b) - 1\n        return ' '.join([str(b[i]) for i in range(len(b) - 2)])\n    else:\n        return -1\nt = int(input())\nwhile t:\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = get_a(b, n)\n    print(a)\n    t -= 1", "def count_numbers(original_array):\n    count = {}\n    for i in original_array:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\ndef find_original_array(input_array):\n    sorted_arr = sorted(input_array)\n    counted_dict = count_numbers(sorted_arr)\n    max_value = sorted_arr[-1]\n    pre_max_value = sorted_arr[-2]\n    sum_with_remainder = sum(sorted_arr[0:-1])\n    remainder = sum_with_remainder - max_value\n    if remainder in counted_dict and remainder != max_value:\n        sorted_arr.remove(sum_with_remainder - max_value)\n        sorted_arr.remove(max_value)\n        return ' '.join(map(str, sorted_arr))\n    elif sum(sorted_arr[0:-2]) == sorted_arr[-2]:\n        sorted_arr.remove(max_value)\n        sorted_arr.remove(pre_max_value)\n        return ' '.join(map(str, sorted_arr))\n    else:\n        return '-1'\n\ndef solve():\n    number_of_tests = int(input())\n    for test in range(number_of_tests):\n        size = int(input())\n        input_array = list(map(int, input().split(' ')))\n        print(find_original_array(input_array))\nsolve()", "from itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    data = list(map(int, input().split()))\n    plus = sum(data)\n    data.sort()\n    m = data.pop()\n    haveAns = False\n    for i in data:\n        if plus - i == 2 * m:\n            haveAns = True\n            data.pop(data.index(i))\n            break\n    if haveAns == False:\n        data.insert(0, m)\n        m = data.pop()\n        for i in data:\n            if plus - i == 2 * m:\n                haveAns = True\n                data.pop(data.index(i))\n                break\n    if haveAns:\n        data.sort()\n        print(' '.join(map(str, data)))\n    else:\n        print(-1)", "def process(B):\n    B2 = {}\n    S = 0\n    for x in B:\n        if x not in B2:\n            B2[x] = 0\n        B2[x] += 1\n        S += x\n    works = False\n    for x in B2:\n        if (S - x) % 2 == 0 and (S - x) // 2 in B2:\n            if (S - x) // 2 != x:\n                works = True\n                break\n            elif (S - x) % 2 == 0 and (S - x) // 2 in B2 and (B2[(S - x) // 2] > 1):\n                works = True\n                break\n    if works:\n        B2[x] -= 1\n        B2[(S - x) // 2] -= 1\n        answer = []\n        for x in B2:\n            for y in range(B2[x]):\n                answer.append(x)\n        return answer\n    else:\n        return -1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    B = [int(x) for x in input().split()]\n    answer = process(B)\n    if answer == -1:\n        print(-1)\n    else:\n        print(' '.join(map(str, answer)))", "class Solution:\n\n    def solve(self, n, b):\n        m = n + 2\n        b.sort()\n        summ = sum(b[:m - 1])\n        largest = b[m - 1]\n        largest2 = b[m - 2]\n        for i in range(m - 1):\n            if summ - b[i] == largest:\n                return self.return_arr(i, b, 1, m)\n        if summ - largest2 == largest2:\n            return ' '.join([str(b[i]) for i in range(m - 2)])\n        return -1\n\n    def return_arr(self, i, b, k, m):\n        return ' '.join([str(b[j]) for j in range(m - k) if j != i])\nsol = Solution()\ntests = int(input())\nresults = []\nfor _ in range(tests):\n    n = int(input())\n    b = list(map(int, input().split()))\n    result = sol.solve(n, b)\n    results.append(result)\nfor result in results:\n    print(result)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    max_1 = max(m)\n    i_m = m.index(max_1)\n    s = sum(m)\n    if 2 * max_1 >= s:\n        m.pop(i_m)\n        max_2 = max(m)\n        i_m = m.index(max_2)\n        if 2 * max_2 + max_1 == s:\n            m.pop(i_m)\n            print(*m)\n        else:\n            print(-1)\n    else:\n        m.pop(i_m)\n        if s - 2 * max_1 in m:\n            m.remove(s - 2 * max_1)\n            print(*m)\n        else:\n            max_2 = max(m)\n            i_m = m.index(max_2)\n            if 2 * max_2 + max_1 == s:\n                m.pop(i_m)\n                print(*m)\n            else:\n                print(-1)", "for i in range(int(input())):\n    int(input())\n    b = [int(x) for x in input().split()]\n    x1 = max(b)\n    b.remove(max(b))\n    test = sum(b) - x1\n    if test in b:\n        b.remove(test)\n        print(*b)\n    else:\n        x2 = max(b)\n        b.remove(max(b))\n        b.append(x1)\n        test = sum(b) - x2\n        if test in b:\n            b.remove(test)\n            print(*b)\n        else:\n            print(-1)", "for i in range(int(input())):\n    int(input())\n    b = [int(x) for x in input().split()]\n    x1 = max(b)\n    b.remove(max(b))\n    test = sum(b) - x1\n    if test in b:\n        b.remove(test)\n        print(*b)\n    else:\n        x2 = max(b)\n        b.remove(max(b))\n        b.append(x1)\n        test = sum(b) - x2\n        if test in b:\n            b.remove(test)\n            print(*b)\n        else:\n            print(-1)", "def solve(s):\n    n = len(s) - 2\n    s = list(sorted(s))\n    total = sum(s[:n + 1])\n    res = []\n    for i in range(n + 1):\n        if total - s[i] == s[n + 1]:\n            for j in range(n + 1):\n                if j == i:\n                    continue\n                res.append(s[j])\n            return res\n    total = sum(s[:n])\n    if total == s[n]:\n        return s[:n]\n    return '-1'\ntt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    res = solve(s)\n    if res == '-1':\n        print(res)\n    else:\n        print(' '.join(map(str, res)))", "def corruptedArray(n, array):\n    a = array.copy()\n    m = max(a)\n    s = sum(a)\n    sef = s - m\n    el = sef - m\n    a.remove(m)\n    if el in a:\n        a.remove(el)\n        return a\n    else:\n        b = array.copy()\n        el = max(b)\n        b.remove(el)\n        s = sum(b)\n        if s // 2 != s / 2:\n            return [-1]\n        m = s // 2\n        if m in b:\n            b.remove(m)\n            return b\n        else:\n            return [-1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = corruptedArray(n, l)\n    for i in ans:\n        print(i, end=' ')\n    print()", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = get_ints()\n    s = sum(b)\n    b.sort()\n    (m1, m2) = (b[-1], b[-2])\n    s = s - m1\n    f = -1\n    for i in range(n + 1):\n        if s - b[i] == m1:\n            f = i\n            break\n    a = []\n    if f != -1:\n        a = []\n        for i in range(n + 1):\n            if i != f:\n                a.append(b[i])\n    else:\n        s = s - m2\n        if s == m2:\n            a = b[:n]\n    if len(a):\n        sys.stdout.write(' '.join(map(str, a)) + '\\n')\n    else:\n        print(-1)", "def main():\n    for _ in range(int(input())):\n        a = input()\n        b = list(map(int, input().split(' ')))\n        print(get(b))\n\ndef get(mas):\n    a = sum(mas)\n    res = []\n    for i in sorted(mas, reverse=True)[0:2]:\n        c = 0\n        for b in mas:\n            if i == b:\n                c += 1\n            if (i != b or c > 1) and i == a - b - i:\n                f = i\n                x = b\n                mas.remove(i)\n                mas.remove(b)\n                return ' '.join(list(map(str, sorted(mas))))\n    return -1\nmain()", "for i in range(int(input())):\n    a = int(input())\n    b = [int(x) for x in input().split()]\n    x = max(b)\n    b.remove(max(b))\n    test = sum(b) - x\n    if test in b:\n        b.remove(test)\n        print(*b)\n    else:\n        y = max(b)\n        b.remove(max(b))\n        b.append(x)\n        test = sum(b) - y\n        if test in b:\n            b.remove(test)\n            print(*b)\n        else:\n            print(-1)", "for i in range(int(input())):\n    int(input())\n    b = [int(x) for x in input().split()]\n    x1 = b.pop(b.index(max(b)))\n    test = sum(b) - x1\n    if test in b:\n        b.remove(test)\n        print(*b)\n    else:\n        x2 = b.pop(b.index(max(b)))\n        b.append(x1)\n        test = sum(b) - x2\n        if test in b:\n            b.remove(test)\n            print(*b)\n        else:\n            print(-1)", "import math\n\ndef solve():\n    n = int(input())\n    b = list(map(int, input().split()))\n    m = n + 2\n    a_sum = max(b)\n    prefix_sum = [0] * m\n    b.sort()\n    for i in range(1, m):\n        prefix_sum[i] = prefix_sum[i - 1] + b[i - 1]\n    for i in range(m - 1):\n        left_sum = prefix_sum[i] - prefix_sum[0]\n        right_sum = prefix_sum[-1] - prefix_sum[i + 1]\n        if left_sum + right_sum == a_sum:\n            return ' '.join(map(str, b[:i] + b[i + 1:m - 1]))\n    if b[-2] == prefix_sum[-2] - prefix_sum[0]:\n        return ' '.join(map(str, b[:-2]))\n    return -1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    b = sum(a) - 2 * a[-1]\n    if b in a[:-1]:\n        x = a[:-1]\n        x.remove(b)\n        print(*x)\n    elif sum(a[:n]) == a[n]:\n        print(*a[:n])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    t = max(b)\n    i = b.index(t)\n    s = sum(b) - t\n    for j in range(n + 2):\n        if j != i and s - b[j] == t:\n            print(*(b[k] for k in range(n + 2) if k != i and k != j))\n            break\n    else:\n        b = b[:i] + b[i + 1:]\n        t = max(b)\n        if sum(b) == t * 2:\n            i = b.index(t)\n            print(*b[:i], *b[i + 1:])\n        else:\n            print(-1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    a.reverse()\n    sumA = sum(a[1:])\n    sumA2 = sum(a[2:])\n    checker = False\n    checker2 = False\n    for k in range(1, len(a)):\n        if sumA - a[k] == a[0]:\n            res = a[1:k] + a[k + 1:]\n            res.sort()\n            checker = True\n            break\n    if checker:\n        ausgabe = ''\n        for k in res:\n            ausgabe += str(k) + ' '\n        print(ausgabe)\n    elif sumA2 == a[1]:\n        res = a[2:]\n        res.sort()\n        ausgabe = ''\n        for k in res:\n            ausgabe += str(k) + ' '\n        print(ausgabe)\n    else:\n        print(-1)", "t = int(input())\nfor inh in range(0, t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    mAx = max(b)\n    s = sum(b) - mAx\n    c = False\n    b.remove(mAx)\n    for i in range(0, len(b)):\n        if s - b[i] == mAx:\n            c = True\n            x = mAx\n            y = b[i]\n            break\n    if c:\n        b.remove(y)\n        print(*b)\n    else:\n        mAx = max(b)\n        s = sum(b) - mAx\n        if s == mAx:\n            b.remove(mAx)\n            print(*b)\n        else:\n            print(-1)", "import math\nfrom collections import defaultdict\nfrom sys import stdout\nDEBUG = True\n\ndef log(*args, **kwargs):\n    if DEBUG:\n        print(*args, **kwargs)\n\ndef ri():\n    return int(input())\n\ndef rl(f=int):\n    return list(map(f, input().split()))\n\ndef rs():\n    return input()\n\nclass Solution:\n\n    def __init__(self):\n        pass\n\n    def run(self):\n        n = ri()\n        b = rl()\n        d = defaultdict(int)\n        for x in b:\n            d[x] += 1\n        total = sum(b)\n        for x in b:\n            s = (total - x) / 2\n            if d[s] > 0 and (s != x or d[s] > 1):\n                d[s] -= 1\n                d[x] -= 1\n                result = []\n                for (k, v) in d.items():\n                    if v > 0:\n                        result.extend([str(k) for i in range(v)])\n                return ' '.join(result)\n        return -1\nt = int(input())\ns = Solution()\nfor i in range(t):\n    print(s.run())", "for _ in range(int(input())):\n    x = int(input())\n    lis = list(map(int, input().split()))\n    lis.sort()\n    if sum(lis[:x]) > lis[-1]:\n        print(-1)\n        continue\n    done = False\n    new = lis.copy()\n    sum1 = sum(lis[:len(lis) - 1])\n    if sum1 - lis[-1] in lis:\n        new.remove(sum1 - lis[-1])\n        new.pop()\n        done = True\n    elif sum(lis[:-2]) == lis[-1] or sum(lis[:-2]) == lis[-2]:\n        new = new[:len(lis) - 2]\n        done = True\n    if not done:\n        print(-1)\n    else:\n        string = ''\n        for i in new:\n            string += str(i) + ' '\n        print(string)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    alist = []\n    alist = list(map(int, input().split()))\n    alist.sort()\n    listsum = sum(alist)\n    total = listsum - alist[n + 1]\n    carry = alist[n + 1]\n    del alist[n + 1]\n    if total - carry in alist:\n        alist.remove(total - carry)\n        print(*alist)\n    else:\n        alist.insert(n + 1, carry)\n        if listsum - alist[n] - alist[n + 1] == alist[n]:\n            del alist[n + 1]\n            del alist[n]\n            print(*alist)\n        else:\n            print(-1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    b = sorted(list(map(int, input().split())))\n    s = sum(b)\n    if s - 2 * b[-1] in b[:-1]:\n        b.remove(s - 2 * b[-1])\n        print(*b[:-1])\n    elif sum(b[:-2]) == b[-2]:\n        print(*b[:-2])\n    else:\n        print(-1)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = sum(s) - s[-1] * 2\n    if s1 in s[:-1]:\n        s.remove(s1)\n        print(*s[:n])\n    else:\n        print(*s[:n]) if sum(s[:n]) == s[n] else print('-1')", "t = int(input())\nfrom collections import defaultdict\nresult = []\nfor i in range(t):\n    n = int(input())\n    b = [int(x) for x in input().strip().split(' ')]\n    d = defaultdict(int)\n    for num in b:\n        d[num] += 1\n    total = sum(b)\n    solutions = None\n    for key1 in d.keys():\n        tmp = total - key1\n        if tmp % 2 == 1:\n            continue\n        else:\n            mid = tmp // 2\n            if mid in d:\n                if mid == key1 and d[key1] <= 1:\n                    continue\n                else:\n                    solutions = (mid, key1)\n        if solutions is not None:\n            break\n    if solutions is None:\n        result.append(-1)\n    else:\n        tmp = ''\n        for key in d.keys():\n            if key == solutions[0] and key == solutions[1]:\n                tmp += (str(key) + ' ') * (d[key] - 2)\n            elif key in solutions:\n                tmp += (str(key) + ' ') * (d[key] - 1)\n            else:\n                tmp += (str(key) + ' ') * d[key]\n        result.append(tmp)\nfor line in result:\n    print(line)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    a = input()\n    l1 = a.split(' ')\n    l = []\n    for i in l1:\n        l.append(int(i))\n    l = l[0:n + 2]\n    l = sorted(l)\n    l1 = l[0:n - 1 + 2]\n    s = sum(l1)\n    f = 0\n    for i in range(len(l1)):\n        if s - l1[i] == l[n - 1 + 2]:\n            f = 1\n            break\n    s = sum(l) - l[n - 1 + 2] - l[n]\n    if s == l[n]:\n        f = 1\n    if f == 0:\n        print(-1)\n    else:\n        if i == 0:\n            l4 = l[1:n + 1]\n        else:\n            l4 = l[0:i] + l[i + 1:n + 1]\n        l5 = []\n        for i in l4:\n            l5.append(str(i))\n        print(' '.join(l5))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    maxa = max(arr)\n    arr.remove(maxa)\n    suma = sum(arr)\n    for i in range(n + 1):\n        if suma - arr[i] == maxa:\n            arr.remove(arr[i])\n            print(*arr)\n            break\n    else:\n        maxa = max(arr)\n        arr.remove(maxa)\n        suma = sum(arr)\n        if suma == maxa:\n            print(*arr)\n        else:\n            print('-1')", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    data.sort()\n    x = sum(data) - data[-1] * 2\n    if x in data[:len(data) - 1]:\n        data.remove(x)\n        print(*data[:n])\n    elif sum(data[:n]) == data[n]:\n        print(*data[:n])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = sum(s) - s[-1] * 2\n    if s1 in s[:-1]:\n        s.remove(s1)\n        print(*s[:n])\n    elif sum(s[:n]) == s[n]:\n        print(*s[:n])\n    else:\n        print('-1')", "t = int(input())\n\ndef deleteonetime(b, x):\n    r = b[:]\n    for i in range(len(r)):\n        if r[i] == x:\n            return r[:i] + r[i + 1:]\n    return r\n\ndef rep(b, n):\n    S = sum(b)\n    dico = {}\n    for y in b:\n        if not 2 * y in dico:\n            dico[2 * y] = 1\n        else:\n            dico[2 * y] += 1\n    for x in b:\n        if S - x in dico and (dico[S - x] > 1 or x != (S - x) // 2):\n            a = b[:]\n            y = (S - x) // 2\n            a = deleteonetime(a, y)\n            return deleteonetime(a, x)\n    return [-1]\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(' '.join(map(str, rep(sorted(a), n))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    r = sum(A) - 2 * A[-1]\n    if r in A[:-1]:\n        A.remove(r)\n        A.pop()\n        print(*A)\n    else:\n        A.pop()\n        if sum(A[:-1]) == A[-1]:\n            A.pop()\n            print(*A)\n        else:\n            print(-1)", "import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport itertools\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n = int(input())\n    arr = get_list()\n    counter = collections.Counter(arr)\n    val = sum(arr)\n    pos = []\n    for i in range(n + 2):\n        x = arr[i]\n        temp_sum = val - x\n        half_sum = temp_sum / 2\n        if half_sum in counter:\n            if half_sum == x and counter[x] >= 2:\n                pos = [x, x]\n                break\n            elif half_sum != x:\n                pos = [half_sum, x]\n                break\n    if len(pos) == 0:\n        print(-1)\n        continue\n    else:\n        for i in pos:\n            arr.remove(i)\n        print(*arr)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = sum(s) - s[-1] * 2\n    if s1 in s[:-1]:\n        s.remove(s1)\n        print(*s[:n])\n    else:\n        print(*s[:n]) if sum(s[:n]) == s[n] else print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = sum(s) - s[-1] * 2\n    if s1 in s[:-1]:\n        s.remove(s1)\n        print(*s[:n])\n    else:\n        print(*s[:n]) if sum(s[:n]) == s[n] else print('-1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    dummyList = []\n    dummyList = list(map(int, input().split()))\n    dummyList.sort()\n    listsum = sum(dummyList)\n    total = listsum - dummyList[n + 1]\n    carry = dummyList[n + 1]\n    del dummyList[n + 1]\n    if total - carry in dummyList:\n        dummyList.remove(total - carry)\n        print(*dummyList)\n    else:\n        dummyList.insert(n + 1, carry)\n        if listsum - dummyList[n] - dummyList[n + 1] == dummyList[n]:\n            del dummyList[n + 1]\n            del dummyList[n]\n            print(*dummyList)\n        else:\n            print(-1)", "import sys\ninput = sys.stdin.readline\nI = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input()) + 2\n    b = list(I())\n    b = sorted(b)\n    ss = sum(b)\n    x = ss - 2 * b[n - 1]\n    a = b[:n - 1]\n    if x in a:\n        a.remove(x)\n        print(*a)\n    else:\n        x = ss - 2 * b[n - 2]\n        a = b[:n - 2] + [b[n - 1]]\n        if x in a:\n            a.remove(x)\n            print(*a)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = sum(s) - s[-1] * 2\n    if s1 in s[:-1]:\n        s.remove(s1)\n        print(*s[:n])\n    else:\n        print(*s[:n]) if sum(s[:n]) == s[n] else print('-1')"]