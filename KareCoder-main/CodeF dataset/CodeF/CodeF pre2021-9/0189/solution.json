["t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cur = n - 1\n    for i in reversed(range(n)):\n        if a[i]:\n            m = i - a[i]\n            if m < cur:\n                cur = m\n        if cur < i:\n            a[i] = '1 '\n        else:\n            a[i] = '0 '\n    ans.append(''.join(a))\nprint('\\n'.join(ans))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cur = n - 1\n    for i in reversed(range(n)):\n        if a[i]:\n            m = i - a[i]\n            if m < cur:\n                cur = m\n        if cur < i:\n            a[i] = '1'\n        else:\n            a[i] = '0'\n    ans.append(' '.join(a))\nprint('\\n'.join(ans))", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    curr_amount = 0\n    ans = ''\n    for i in arr[::-1]:\n        if curr_amount == i == 0:\n            ans += ' 0'\n        elif curr_amount != 0 and i == 0:\n            ans += ' 1'\n            curr_amount -= 1\n        else:\n            ans += ' 1'\n            curr_amount = max(i - 1, curr_amount - 1)\n    res += ans[::-1] + '\\n'\nprint(res)", "x = int(input())\nodg = []\nfor i in range(0, x):\n    n = int(input())\n    l = input().split(' ')\n    l = list(map(lambda a: int(a), l))\n    l.reverse()\n    cream = 0\n    layers = ['0'] * n\n    for j in range(0, n):\n        if l[j] > cream:\n            cream = l[j]\n        if cream > 0:\n            layers[j] = '1'\n            cream -= 1\n    layers.reverse()\n    odg.append(layers)\nfor e in odg:\n    print(' '.join(e))", "import math\nimport operator as op\nfrom functools import reduce\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    a.reverse()\n    ans = []\n    x = 0\n    for i in a:\n        x = max(x, i)\n        ans.append('1' if x > 0 else '0')\n        x -= 1\n    ans.reverse()\n    pr(' '.join(ans))\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "def main():\n    from sys import stdin, stdout\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        n = int(rl())\n        a = [int(x) for x in rl().split()]\n        drenched = [0] * n\n        layers = 0\n        for i in range(n - 1, -1, -1):\n            layers = max(a[i], layers - 1)\n            if layers:\n                drenched[i] = 1\n        wl(' '.join((str(x) for x in drenched)) + '\\n')\nmain()", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nans = []\ntests = inp()\nfor _ in range(tests):\n    n = inp()\n    a = inlt()\n    cur = 0\n    res = []\n    for s in reversed(a):\n        cur = max(cur, s)\n        if cur > 0:\n            res.append('1')\n        else:\n            res.append('0')\n        cur -= 1\n    ans.append(reversed(res))\nfor a in ans:\n    print(' '.join(a))", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    n = inp()\n    c = inlt()\n    cake = ''\n    cream = 0\n    result = ['0' for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        if c[i]:\n            cream = max(cream, c[i])\n        if cream > 0:\n            result[i] = '1'\n            cream -= 1\n    print(' '.join(result))", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cream = 0\n    dp = ['0'] * n\n    for (i, ai) in enumerate(a[::-1]):\n        cream = max(cream, ai)\n        if cream > 0:\n            dp[i] = '1'\n        cream -= 1\n    print(' '.join(dp[::-1]))\n    t -= 1", "def main():\n    t = int(input())\n    for _ in range(t):\n        l = int(input())\n        layers = [int(i) for i in input().split()]\n        layers = layers[::-1]\n        results = [0] * l\n        k = 0\n        for i in range(l):\n            if layers[i] > k:\n                k = layers[i]\n            if k > 0:\n                results[i] = '1'\n                k -= 1\n            else:\n                results[i] = '0'\n        print(' '.join(results[::-1]))\nmain()", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cur = n - 1\n    for i in reversed(range(n)):\n        if a[i]:\n            m = i - a[i]\n            if m < cur:\n                cur = m\n        if cur < i:\n            a[i] = 1\n    ans.append(' '.join(map(str, a)))\nprint('\\n'.join(ans))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 2\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    n = int(t[0])\n    A = list(map(int, t[1].split()))\n    B = [0] * n\n    P = 0\n    i = n - 1\n    while i >= 0:\n        if P < A[i]:\n            P = A[i]\n        if P > 0:\n            B[i] = 1\n            P -= 1\n        i -= 1\n    print(' '.join(map(str, B)))", "import sys\n\ndef pripitka(massivl, lowers):\n    pr = []\n    pr = ['0' for i in range(0, lowers)]\n    edgel = lowers + 1\n    for i in range(lowers, 0, -1):\n        koll = massivl[i - 1]\n        end = i - koll + 1\n        if end <= 0:\n            end = 1\n        for j in range(edgel - 1, end - 1, -1):\n            pr[j - 1] = '1'\n            edgel = j\n        if i < edgel:\n            edgel = i\n    stdout_fileno = sys.stdout\n    if num > 1:\n        stdout_fileno.write('\\n')\n    stdout_fileno.write(' '.join(pr))\nf = sys.stdin\ncontfishka = int(f.readline())\nnum = 0\nwhile num < contfishka:\n    lowers = int(f.readline())\n    massivl = f.readline().split()\n    massivl = [int(i) for i in massivl]\n    num += 1\n    pripitka(massivl, lowers)\nf.close()", "def answer(n, a):\n    ans = [0] * n\n    for j in range(n - 1, -1, -1):\n        for i in range(a[j]):\n            if j - i >= 0:\n                ans[j - i] = 1\n    return ' '.join(map(str, ans))\n\ndef answer2(n, a):\n    ans = [0] * n\n    aptr = n - 1\n    ansptr = n - 1\n    while aptr >= 0 and ansptr >= 0:\n        d = aptr - ansptr\n        if a[aptr] > d:\n            for i in range(min(a[aptr] - d, ansptr + 1)):\n                ans[ansptr] = 1\n                ansptr -= 1\n        aptr -= 1\n        if aptr < ansptr:\n            ansptr = aptr\n    return ' '.join(map(str, ans))\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    a = [0] * t\n    for j in range(t):\n        n[j] = int(input())\n        a[j] = [int(i) for i in input().split()]\n    for j in range(t):\n        print(answer2(n[j], a[j]))\nmain()", "import random\n\ndef a(b):\n    fuel = 0\n    res = []\n    for item in b:\n        if item > fuel:\n            fuel = item\n        if not fuel and item == 1:\n            fuel = 1\n        if fuel:\n            res.append('1')\n            fuel -= 1\n        else:\n            res.append('0')\n    return ' '.join(res[::-1])\nfor _ in range(int(input())):\n    n = int(input())\n    res = a(map(int, input().split()[::-1]))\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = reversed(list(map(int, input().split())))\n    f = []\n    c = 0\n    for x in a:\n        if x > c:\n            c = x\n        if c > 0:\n            f.append('1')\n        else:\n            f.append('0')\n        c -= 1\n    print(' '.join(reversed(f)))", "t = int(input())\nl = []\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n - 1, -1, -1):\n        x = max(x, a[i])\n        if x > 0:\n            a[i] = 1\n        x -= 1\n    a = map(str, a)\n    a = ' '.join(a)\n    l.append(a)\nfor i in l:\n    print(i)", "def solve(n, arr):\n    arr.reverse()\n    power = 0\n    s = []\n    for i in arr:\n        if i > power:\n            power = i\n        if power > 0:\n            s.append('1')\n            power -= 1\n        else:\n            s.append('0')\n    s.reverse()\n    return ' '.join(s)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))[:n]\n    print(solve(n, arr))", "import sys\nfrom math import ceil\n\ndef read_to_int():\n    return int(sys.stdin.readline().rstrip())\n\ndef read_to_ints():\n    return tuple(map(int, sys.stdin.readline().rstrip().split(' ')))\nfor t in range(read_to_int()):\n    layer_count = read_to_int()\n    dosage = read_to_ints()\n    d_prev = 0\n    cream = []\n    for d in reversed(dosage):\n        d = max(d, d_prev)\n        c = int(d > 0)\n        d_prev = d - 1\n        cream.append(str(c))\n    print(' '.join(cream[::-1]))", "t = int(input())\nr = 0\nA = []\nwhile 0 <= r < t:\n    r += 1\n    n = int(input())\n    m = [int(n) for n in input().split()]\n    k = n\n    d = 0\n    B = []\n    e = ''\n    while 0 < k <= n:\n        k = k - 1\n        if m[k] == 0:\n            if d > 0:\n                d = d - 1\n                B.append('1')\n            else:\n                B.append('0')\n        elif m[k] != 0:\n            if m[k] > d:\n                d = m[k]\n                B.append('1')\n                d = d - 1\n            else:\n                B.append('1')\n                d = d - 1\n    B.reverse()\n    p = -1\n    while -1 <= p < n - 1:\n        p = p + 1\n        e += B[p] + ' '\n    A.append(e)\nf = -1\nwhile -1 <= f < t - 1:\n    f = f + 1\n    print(A[f].rstrip())", "import math\n\ndef solve():\n    n = int(input())\n    dr = list(map(int, input().split()))\n    i = n - 1\n    av = dr[i]\n    res = []\n    while i >= 0:\n        if dr[i] > av:\n            av = dr[i]\n        if av > 0:\n            res.append('1')\n            av -= 1\n        else:\n            res.append('0')\n        i -= 1\n    return ' '.join(list(reversed(res)))\ntc = int(input())\nfor _ in range(tc):\n    print(solve())", "n = int(input())\nanss = []\nfor i in range(n):\n    m = int(input())\n    inp = list(map(int, input().split()))\n    t = m - 1\n    cu = inp[t]\n    ans = []\n    for r in range(t, -1, -1):\n        cu = max(cu, inp[r])\n        if cu >= 1:\n            cu -= 1\n            ans.append(1)\n        else:\n            ans.append(0)\n    anss.append(ans)\nfor i in anss:\n    i.reverse()\n    an = ' '.join(list(map(str, i)))\n    print(an)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 2, -1, -1):\n        a[i] = max(a[i], a[i + 1] - 1)\n    print(' '.join(['1' if x > 0 else '0' for x in a]))\nt = int(input())\nfor i in range(t):\n    solve()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        r = reversed(range(n))\n        d = a[n - 1]\n        ans = ''\n        for i in r:\n            d = max(d, a[i])\n            if d > 0:\n                ans += ' 1'\n            else:\n                ans += ' 0'\n            d -= 1\n        print(ans[::-1])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        p = reversed(a)\n        d = a[n - 1]\n        ans = ''\n        for i in p:\n            d = max(d, i)\n            if d > 0:\n                ans += ' 1'\n            else:\n                ans += ' 0'\n            d -= 1\n        print(ans[::-1])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = a[n - 1]\n        ans = ''\n        for i in range(n):\n            d = max(d, a[n - i - 1])\n            if d > 0:\n                ans += ' 1'\n            else:\n                ans += ' 0'\n            d -= 1\n        print(ans[::-1])\nmain()", "def layers(n, a):\n    cake = []\n    c = a[n - 1]\n    for i in range(n - 1, -1, -1):\n        if a[i] >= c:\n            c = a[i]\n        if c > 0 and c >= a[i]:\n            cake.append('1')\n            c -= 1\n        else:\n            cake.append('0')\n    return reversed(cake)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = layers(n, a)\n    print(' '.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    for i in range(n - 2, -1, -1):\n        w[i] = max(w[i], w[i + 1] - 1)\n    print(' '.join(['1' if x > 0 else '0' for x in w]))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "def f(gp, x):\n    k = 0\n    for i in range(gp - 1, -1, -1):\n        k = max(x[i], k)\n        if k > 0:\n            k -= 1\n            arr2[i] = '1'\nn = int(input())\nfor i in range(n):\n    gp = int(input())\n    arr2 = ['0'] * gp\n    arr = list(map(int, input().split()))\n    f(gp, arr)\n    print(' '.join(arr2))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    a = arr[::-1]\n    for i in range(n):\n        if a[i] > 0:\n            x = a[i]\n            a[i] = 1\n            if i < n - 1:\n                a[i + 1] = max(x - 1, a[i + 1])\n    sys.stdout.write(' '.join(map(str, a[::-1])) + '\\n')", "t = int(input())\ni = 0\nA = []\nwhile 0 <= i < t:\n    i = i + 1\n    n = int(input())\n    m = [int(n) for n in input().split()]\n    k = n\n    d = 0\n    B = []\n    e = ''\n    while 0 < k <= n:\n        k = k - 1\n        if m[k] == 0:\n            if d > 0:\n                d = d - 1\n                B.append('1')\n            else:\n                B.append('0')\n        elif m[k] != 0:\n            if m[k] > d:\n                d = m[k]\n                B.append('1')\n                d = d - 1\n            else:\n                B.append('1')\n                d = d - 1\n    B.reverse()\n    p = -1\n    while -1 <= p < n - 1:\n        p = p + 1\n        e += B[p] + ' '\n    A.append(e)\nf = -1\nwhile -1 <= f < t - 1:\n    f = f + 1\n    print(A[f].rstrip())", "for i in range(int(input())):\n    l = int(input())\n    data = [int(num) for num in input().split(' ')]\n    result = []\n    count = data[-1]\n    for i in range(l - 1, -1, -1):\n        count = max(count, data[i])\n        if count > 0:\n            result.append('1')\n            count -= 1\n        else:\n            result.append('0')\n    result.reverse()\n    print(' '.join(result))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "def napoleon_cake(num_tests):\n    for _ in range(0, num_tests):\n        num_layers = int(input())\n        layers = list(map(int, input().split()))\n        current_drizzle = layers[-1]\n        for i in range(num_layers - 1, -1, -1):\n            if layers[i] > current_drizzle:\n                current_drizzle = layers[i]\n            if current_drizzle > 0:\n                layers[i] = 1\n            current_drizzle -= 1\n        print(' '.join([str(x) for x in layers]).strip())\nnapoleon_cake(int(input()))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    curr = n - 1\n    ans = ['0'] * n\n    while curr >= 0:\n        units = arr[curr]\n        if units == 0:\n            curr -= 1\n        while units and curr >= 0:\n            ans[curr] = '1'\n            curr -= 1\n            units = max(units - 1, arr[curr])\n    print(' '.join(ans))", "from sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split(' ')))\n        b = []\n        i = n - 1\n        x = 0\n        while i >= 0:\n            if a[i] > x:\n                x = a[i]\n            if x > 0:\n                b.append(1)\n                x -= 1\n            else:\n                b.append(0)\n            i -= 1\n        b.reverse()\n        print(*b, sep=' ')\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        r = reversed(range(n))\n        d = a[n - 1]\n        ans = ''\n        for i in r:\n            d = max(d, a[i])\n            if d > 0:\n                ans += ' 1'\n            else:\n                ans += ' 0'\n            if d > 0:\n                d -= 1\n        print(ans[::-1])\nmain()", "t = int(input())\nfor _t in range(t):\n    n = int(input())\n    a = [int(e) for e in input().strip().split()]\n    mn = n - 1 - a[n - 1]\n    ans = ['0' if a[-1] == 0 else '1']\n    for i in range(n - 2, -1, -1):\n        mn = min(mn, i - a[i])\n        if mn < i:\n            ans.append('1')\n        else:\n            ans.append('0')\n    print(' '.join(ans[::-1]))", "def sol():\n    n = int(input())\n    d = list(map(int, input().split()))\n    st = n * [10 ** 6]\n    m = 10 ** 6\n    for j in range(len(d) - 1, -1, -1):\n        m = min(m, j - d[j] + 1)\n        st[j] = m\n    wynik = []\n    for i in range(n):\n        if i < st[i]:\n            wynik.append('0')\n        else:\n            wynik.append('1')\n    return ' '.join(wynik)\n\ndef main():\n    for i in range(int(input())):\n        print(sol())\nmain()", "import sys\n\ndef inpu():\n    return sys.stdin.readline()\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    done = False\n    d = [0] * n\n    k = 1\n    for i in range(n - 1, -1, -1):\n        k = max(a[i], k - 1)\n        if k > 0:\n            d[i] = '1'\n        else:\n            d[i] = '0'\n    print(' '.join(d))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = 0\n    for j in range(n - 1, -1, -1):\n        b = max(b, a[j])\n        if b > 0:\n            a[j] = 1\n            b -= 1\n    print(' '.join(map(str, a)))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "def napolean(arr, n):\n    res = [0] * n\n    p = 0\n    for i in range(n):\n        v = n - i - 1\n        k = arr[v]\n        p = max(p, k)\n        if p >= 1:\n            res[v] = 1\n            p = p - 1\n    return res\nt = int(input())\nans = []\nfor i in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    ans.append(napolean(a, p))\nfor l in ans:\n    print(*l)", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    for i in range(n - 1):\n        if a[i] > 1:\n            p = a[i] - 1\n            if p > a[i + 1]:\n                a[i + 1] = p\n            a[i] = 1\n    if a[-1] > 1:\n        a[-1] = 1\n    print(*a[::-1])", "from sys import stdin\ninput = stdin.readline\n\ndef ceil(c):\n    if int(c) == c:\n        return int(c)\n    return int(c) + 1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef floor(f):\n    return int(f)\n\ndef sqrt(s):\n    return s ** 0.5\n\ndef max(a, b):\n    return a if a > b else b\n\ndef abs(a):\n    return a if a >= 0 else -1 * a\n\ndef min(a, b):\n    return a if a < b else b\n\ndef primeInRange(n):\n    l = [True] * n\n    for i in range(2, int(sqrt(n)) + 1):\n        if l[i - 1]:\n            for j in range(i + i, n + 1, i):\n                l[j - 1] = False\n    return l\n\ndef solve(n):\n    cream = list(map(int, input().split()))\n    a = [0] * n\n    temp = 0\n    for i in range(n - 1, -1, -1):\n        temp = max(temp, cream[i])\n        if temp > 0:\n            a[i] = 1\n            temp -= 1\n    return a\nfor u in range(int(input())):\n    print(*solve(int(input())))", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.reverse()\n    mx = 0\n    arr = []\n    for i in nums:\n        mx = max(mx - 1, i)\n        if mx != 0:\n            arr.append('1')\n        else:\n            arr.append('0')\n    arr.reverse()\n    print(' '.join(arr))", "import time\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for j in range(n - 1, -1, -1):\n        k = max(k, a[j])\n        if k > 0:\n            a[j] = 1\n            k -= 1\n    print(' '.join(map(str, a)))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for j in range(n - 1, -1, -1):\n        k = max(k, a[j])\n        if k > 0:\n            a[j] = 1\n            k -= 1\n    print(' '.join(map(str, a)))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = [0] * n\n    sumo = n - 1\n    for j in range(n - 1, -1, -1):\n        if j - a[j] < sumo:\n            sumo = j - a[j]\n        if j > sumo:\n            g[j] = 1\n    print(' '.join(map(str, g)))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    b[n - 1] = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        b[i] = max(b[i + 1] - 1, a[i])\n    print(' '.join([('0', '1')[e > 0] for e in b]))", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = getint()\n    ans = ''\n    l = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            if l <= n - 1 - i:\n                ans += '0'\n                l += 1\n        else:\n            leng = min(a[i] - l + n - 1 - i, n - l)\n            if leng < 0:\n                leng = 0\n            l += leng\n            ans += '1' * leng\n    print(' '.join(ans[::-1]))\nfor _ in range(int(input())):\n    solve()", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    answers = []\n    drenched = 0\n    cur_max = 0\n    for value in reversed(a):\n        cur_max = max(cur_max - 1, value)\n        answers.append('1' if cur_max > 0 else '0')\n    print(' '.join(reversed(answers)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = 0\n    result = ''\n    for g in range(n - 1, -1, -1):\n        temp = max(a[g], temp)\n        if temp > 0:\n            result += ' 1'\n            temp -= 1\n        else:\n            result += ' 0'\n    print(result[::-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = [int(j) for j in input().split()]\n    res = []\n    c = 0\n    q = m[::-1]\n    for i in q:\n        c = max(i, c)\n        if c > 0:\n            res.append('1')\n            c -= 1\n        else:\n            res.append('0')\n    print(' '.join(res)[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "count = int(input())\nfor x in range(count):\n    count_layers = int(input())\n    array_cream = [int(x) for x in input().split(' ')]\n    result_array = []\n    count_cream = 0\n    x = 1\n    while x != len(array_cream) + 1:\n        if array_cream[-x] > count_cream:\n            count_cream = array_cream[-x] - 1\n            result_array.append('1')\n        elif count_cream > 0:\n            result_array.append('1')\n            count_cream -= 1\n        elif count_cream == 0 and array_cream[-x] == 0:\n            result_array.append('0')\n        else:\n            count_cream = array_cream[-x] - 1\n            result_array.append('1')\n        x += 1\n    print(' '.join(result_array[::-1]))", "def napoleon_cake_2(arr, layers):\n    min_level = arr[layers - 1]\n    for a in range(layers - 1, -1, -1):\n        min_level = max(arr[a], min_level)\n        if min_level != 0:\n            arr[a] = 1\n            min_level -= 1\n    arr = [str(i) for i in arr]\n    return ' '.join(arr)\nn = int(input())\nfor i in range(0, n):\n    layers = int(input())\n    lst = input().split(' ')\n    lst = [int(i) for i in lst]\n    print(napoleon_cake_2(lst, layers))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "def solve(arr):\n    arr.reverse()\n    res = []\n    n = 0\n    for i in arr:\n        if i:\n            n = max(n, i)\n        if n > 0:\n            res.append(1)\n            n -= 1\n        else:\n            res.append(0)\n    return res[::-1]\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    ans.append(solve(arr))\nfor i in ans:\n    print(*i)", "from sys import stdin\n\ndef main():\n    MAX_N = 200000\n    a = [0] * MAX_N\n    drenched = [0] * MAX_N\n\n    def solve():\n        N = int(next(tokens))\n        for i in range(N):\n            a[i] = int(next(tokens))\n        current_cream = 0\n        for i in range(N - 1, -1, -1):\n            current_cream = max(current_cream, a[i])\n            if current_cream > 0:\n                current_cream -= 1\n                drenched[i] = 1\n            else:\n                drenched[i] = 0\n        print(*drenched[:N])\n    tokens = iter(stdin.read().split())\n    T = int(next(tokens))\n    for t in range(T):\n        solve()\nmain()", "test_cases = int(input())\nfor i in range(test_cases):\n    layers = int(input())\n    cream = list(map(int, input().split()))\n    covered = [0] * layers\n    last = cream[layers - 1]\n    covered = ''\n    for j in range(layers - 1, -1, -1):\n        if cream[j] >= last:\n            last = cream[j]\n        if last > 0 and last >= cream[j]:\n            covered += '1 '\n            last -= 1\n        else:\n            covered += '0 '\n    print(covered[::-1].strip())", "t = int(input())\n\ndef solution():\n    n = int(input())\n    cream = list(map(int, input().split(' ')))\n    pie = [0 for _ in range(n)]\n    i = n - 1\n    mn = n + 1\n    while i >= 0:\n        mn = min(mn, i + 1 - cream[i])\n        if mn <= i:\n            pie[i] = 1\n        i -= 1\n    print(' '.join(map(str, pie)))\nfor _ in range(t):\n    solution()", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 0\n    for x in s.split()[::-1]:\n        m = max(m, int(x)) - 1\n        r += (+(m > -1),)\n    print(*r[::-1])", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        cream = list(map(int, input().split(' ')))\n        cream.reverse()\n        mx = 0\n        for i in range(len(cream)):\n            mx = max(mx, i + cream[i])\n            cream[i] = i < mx\n        cream.reverse()\n        print(' '.join(map(lambda x: str(int(x)), cream)))\nmain()", "def napolean(n, arr):\n    l = []\n    k = 0\n    for i in range(n):\n        v = arr[n - i - 1]\n        k = max(v, k)\n        if k >= 1:\n            l.append(1)\n            k = k - 1\n        else:\n            l.append(0)\n    l = reversed(l)\n    return l\nt = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = napolean(n, arr)\n    res.append(l)\nfor i in res:\n    print(*i, sep=' ')", "for _ in range(int(input())):\n    drenched_cake_layer = [0] * int(input())\n    flowing_cream = 0\n    for (cake_layer_index, cream_units) in enumerate(map(int, reversed(input().split())), 1):\n        flowing_cream = max(flowing_cream, cream_units) - 1\n        if flowing_cream >= 0:\n            drenched_cake_layer[-cake_layer_index] = 1\n    print(' '.join(map(str, drenched_cake_layer)))", "t = int(input())\nfor _ in range(t):\n    layers = int(input())\n    amount = list(map(int, input().split()))\n    res = layers * [0]\n    current = 0\n    for i in range(layers - 1, -1, -1):\n        current = max(current, amount[i])\n        if current > 0:\n            res[i] = 1\n            current -= 1\n    print(' '.join([str(x) for x in res]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cream = a[-1]\n    ans = []\n    for i in range(0, len(a)):\n        j = len(a) - i - 1\n        cream = max(cream, a[j])\n        if cream > 0:\n            cream -= 1\n            ans.append('1')\n        else:\n            ans.append('0')\n    ans.reverse()\n    ans = ' '.join(ans)\n    print(ans)", "for s in [*open(0)][2::2]:\n    r = []\n    m = 0\n    for x in s.split()[::-1]:\n        m = max(m, int(x)) - 1\n        r += (+(m > -1),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    cnt = 0\n    for i in range(len(li) - 1, -1, -1):\n        if li[i] > cnt:\n            cnt = li[i]\n        if cnt > 0:\n            li[i] = 1\n            cnt -= 1\n    print(' '.join(map(str, li)))", "for s in [*open(0)][2::2]:\n    m = 1\n    a = s.split()\n    i = len(a)\n    while i:\n        i -= 1\n        m = max(m - 1, int(a[i]))\n        a[i] = +(m > 0)\n    print(*a)", "import sys\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    b = [0] * n\n    cur = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] > 0:\n            b[i] = 1\n            cur = max(cur - 1, a[i] - 1)\n        elif cur > 0:\n            b[i] = 1\n            cur -= 1\n        else:\n            b[i] = 0\n    print(' '.join((str(x) for x in b)))\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    n = ini()\n    a = inl()\n    ans = [0] * n\n    count = 0\n    for i in range(n - 1, -1, -1):\n        count = max(count, a[i])\n        if count > 0:\n            ans[i] = 1\n            count -= 1\n    print(*ans)", "for s in [*open(0)][2::2]:\n    r = []\n    m = 0\n    for x in s.split()[::-1]:\n        m = max(m, int(x))\n        r += (+(m > 0),)\n        m -= 1\n    print(*r[::-1])", "a = eval(input())\nfor _ in range(a):\n    b = int(input())\n    c = input().split()\n    c = [int(x) for x in c]\n    i = len(c) - 1\n    j = i + 1\n    ls = [0] * b\n    while i >= 0:\n        t = i - c[i]\n        if t < j:\n            j = t\n        if j < i:\n            ls[i] = 1\n        elif j == len(c) and c[i] != 0:\n            ls[i] = 1\n        i -= 1\n    ls = [str(x) for x in ls]\n    print(' '.join(ls))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    b[n - 1] = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        b[i] = max(b[i + 1] - 1, a[i])\n    print(' '.join([('0', '1')[e > 0] for e in b]))", "t = int(input())\nitog = []\nfor l in range(t):\n    n = int(input())\n    mass = list(map(int, input().split()))\n    mass1 = []\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if mass[i] > count:\n            count = mass[i]\n        if count > 0:\n            count -= 1\n            mass1.append(1)\n        else:\n            mass1.append(0)\n    itog.append(reversed(mass1))\nfor i in itog:\n    print(*i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    j = n - 1\n    while j >= 0:\n        while j >= 0 and a[j] == 0:\n            b[j] = 0\n            j -= 1\n        if j < 0:\n            break\n        m = a[j]\n        while j > 0 and a[j - 1] < m:\n            b[j] = 1\n            j -= 1\n            m -= 1\n        if m > 0:\n            b[j] = 1\n            j -= 1\n    ans = ''\n    j = n - 1\n    print(' '.join(map(str, b)))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    otv = [0] * n\n    uk = 0\n    for i in range(n - 1, -1, -1):\n        uk = max(uk, a[i])\n        if uk > 0:\n            otv[i] = 1\n        uk -= 1\n    ans.append(otv)\nfor i in ans:\n    print(*i)", "n = int(input())\nz = []\nfor _ in range(n):\n    a = int(input())\n    l = list(map(int, input().split()))\n    c = l[len(l) - 1]\n    r = [0] * a\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] >= c:\n            c = l[i]\n        if c > 0 and l[i] <= c:\n            r[i] = 1\n            c -= 1\n        else:\n            r[i] = 0\n    z.append(r)\nfor i in z:\n    for j in i:\n        print(j, end=' ')\n    print()", "import math\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0 for i in range(n)]\n    t = 0\n    for i in range(n - 1, -1, -1):\n        if l[i] != 0:\n            if t < l[i]:\n                t = l[i]\n        if t > 0:\n            ans[i] = 1\n        t -= 1\n    print(*ans)", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    souce = list(map(int, input().split()))\n    souce = souce[::-1]\n    souce_left = 0\n    current_layer = m\n    ans = []\n    for a in souce:\n        souce_left = max(souce_left, a)\n        if souce_left > 0:\n            ans.append(1)\n            souce_left -= 1\n        else:\n            ans.append(0)\n    print(' '.join(map(str, ans[::-1])))", "for s in [*open(0)][2::2]:\n    r = []\n    m = 1\n    for x in s.split()[::-1]:\n        m = max(m - 1, int(x))\n        r += (+(m > 0),)\n    print(*r[::-1])", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    sol = [0 for i in range(n)]\n    x = 0\n    for i in range(n - 1, -1, -1):\n        x = max(x, l[i])\n        if x > 0:\n            x -= 1\n            sol[i] = 1\n    print(*sol)", "for s1 in [*open(0)][2::2]:\n    r1 = []\n    m = 1\n    for x1 in s1.split()[::-1]:\n        m = max(m - 1, int(x1))\n        r1 += (+(m > 0),)\n    print(*r1[::-1])"]