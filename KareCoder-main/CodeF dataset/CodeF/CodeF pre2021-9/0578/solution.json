["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] + [int(i) for i in input().split()]\n    dp = [0] * (n + 5)\n    res = 0\n    cnt = 0\n    s = 0\n    for i in range(1, n + 1):\n        s += dp[i]\n        cnt += s\n        if cnt >= a[i] - 1:\n            cnt -= a[i]\n            cnt += 1\n        else:\n            res += a[i]\n            res -= cnt\n            res -= 1\n            cnt = 0\n        dp[i + 2] += 1\n        mi = min(i + a[i] + 1, n + 1)\n        dp[mi] -= 1\n    print(res)", "def main():\n    t = int(input())\n    for i in range(t):\n        print(solve())\n\ndef add_range(pos, _range, array, diff):\n    n = len(array)\n    (start, end) = _range\n    if pos + start < n:\n        array[pos + start] += diff\n        if pos + end < n:\n            array[pos + end] -= diff\n    return array\n\ndef solve():\n    n = int(input())\n    strength = list(map(int, input().split()))\n    diff = [0 for _ in range(n)]\n    ans = 0\n    deq = 0\n    for i in range(n):\n        deq += diff[i]\n        s = strength[i]\n        ans += max(s - 1 - deq, 0)\n        diff = add_range(i, [2, s + 1], diff, 1)\n        if s - 1 < deq:\n            diff = add_range(i, [1, 2], diff, deq - s + 1)\n    return ans\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    d = 0\n    debt = 0\n    k = 0\n    kmap = dict()\n    for i in range(n):\n        k -= kmap.get(i, 0)\n        d += max(s[i] - (debt + k), 0)\n        debt = max(debt + k - s[i], 0)\n        k += 1\n        kmap[i + s[i] + 1] = kmap.get(i + s[i] + 1, 0) + 1\n    print(d - 1)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    s = 0\n    B = [0] * (N + 2)\n    ans = 0\n    for i in range(N):\n        s += B[i]\n        a = A[i]\n        ans += max(a - 1 - s, 0)\n        B[i + 2] += 1\n        B[min(i + a + 1, N)] -= 1\n        t = max(s - (a - 1), 0)\n        B[i + 1] += t\n        B[i + 2] -= t\n    print(ans)", "def read_list() -> list:\n    return [int(i) for i in input().strip().split()]\n\ndef read_num() -> int:\n    return int(input().strip())\nt = read_num()\nfor _ in range(t):\n    n = read_num()\n    arr = read_list()\n    ans = 0\n    cnt_change = [0] * (n + 5)\n    cnt = 0\n    for i in range(n):\n        cnt += cnt_change[i]\n        ans += max(arr[i] - 1 - cnt, 0)\n        cnt_change[i + 2] += 1\n        cnt_change[min(n - 1, i + arr[i]) + 1] -= 1\n        tmp = max(cnt - arr[i] + 1, 0)\n        cnt_change[i + 1] += tmp\n        cnt_change[i + 2] -= tmp\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    d = 0\n    debt = 0\n    k = 0\n    kmap = dict()\n    for i in range(n):\n        k -= kmap.get(i, 0)\n        d += max(s[i] - (debt + k), 0)\n        debt = max(debt + k - s[i], 0)\n        k += 1\n        kmap[i + s[i] + 1] = kmap.get(i + s[i] + 1, 0) + 1\n    print(d - 1)", "def solution(n):\n    pref = [0 for _ in range(n + 1)]\n    s = [int(i) for i in input().split()]\n    for i in range(n):\n        if s[i] > 1:\n            pref[min(i + 2, n)] += 1\n            pref[min(s[i] + 1 + i, n)] -= 1\n    for i in range(n):\n        pref[i + 1] += pref[i]\n    for i in range(n):\n        if pref[i] - s[i] + 1 > 0:\n            pref[i + 1] += pref[i] - s[i] + 1\n    ans = 0\n    for i in range(n):\n        ans += max(s[i] - pref[i] - 1, 0)\n    print(ans)\nfor t in range(int(input())):\n    n = int(input())\n    solution(n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    g = [0] * (n + 5)\n    las = 0\n    for i in range(n):\n        tmp = g[i] + las\n        las = tmp\n        if tmp > a[i] - 1:\n            g[i + 1] += tmp - a[i] + 1\n            g[i + 2] -= tmp - a[i] + 1\n        else:\n            ans += a[i] - 1 - tmp\n        if i + 2 <= min(n, i + 1 + a[i]):\n            g[i + 2] += 1\n            g[min(n, i + a[i] + 1)] -= 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = [0 for i in range(n)]\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            c[i] += c[i - 1]\n        if c[i] <= arr[i] - 1:\n            ans += arr[i] - 1 - c[i]\n        if arr[i] > 1:\n            if i + 2 < n:\n                c[i + 2] += 1\n            if i + arr[i] + 1 < n:\n                c[i + arr[i] + 1] += -1\n        if c[i] > arr[i] - 1:\n            extra = c[i] - arr[i] + 1\n            if i + 1 < n:\n                c[i + 1] += extra\n            if i + 2 < n:\n                c[i + 2] += -extra\n    print(ans)", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = getint()\n    ans = 0\n    debt = 0\n    k = 0\n    kmap = dict()\n    for i in range(n):\n        k -= kmap.get(i, 0)\n        ans += max(a[i] - (debt + k), 0)\n        debt = max(debt + k - a[i], 0)\n        k += 1\n        kmap[i + a[i] + 1] = kmap.get(i + a[i] + 1, 0) + 1\n    print(ans - 1)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    g = [0] * (n + 5)\n    las = 0\n    for i in range(n):\n        tmp = g[i] + las\n        las = tmp\n        if tmp > a[i] - 1:\n            g[i + 1] += tmp - a[i] + 1\n            g[i + 2] -= tmp - a[i] + 1\n        else:\n            ans += a[i] - 1 - tmp\n        g[i + 2] += 1\n        g[min(n, i + a[i] + 1)] -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    g = [0] * (n + 5)\n    las = 0\n    for i in range(n):\n        tmp = g[i] + las\n        las = tmp\n        if tmp > a[i] - 1:\n            g[i + 1] += tmp - a[i] + 1\n            g[i + 2] -= tmp - a[i] + 1\n        else:\n            ans += a[i] - 1 - tmp\n        if i + 2 <= min(n - 1, i + a[i]):\n            g[i + 2] += 1\n            g[min(n - 1, i + a[i]) + 1] -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    dp = [0] * (n + 1)\n    l = list(map(int, input().split()))\n    for i in range(0, n):\n        if l[i] > 1:\n            r = min(2 + i, n)\n            dp[r] += 1\n            r = min(l[i] + 1 + i, n)\n            dp[r] -= 1\n    for i in range(0, n):\n        dp[i + 1] = dp[i + 1] + dp[i]\n    for i in range(0, n):\n        if dp[i] - (l[i] - 1) >= 1:\n            dp[i + 1] += dp[i] - (l[i] - 1)\n    ans = 0\n    for i in range(0, n):\n        ans += max(0, l[i] - dp[i] - 1)\n    print(ans)", "import sys\npin = sys.stdin.readline\n\ndef aupdate(n, v):\n    while n < len(tree):\n        tree[n] += v\n        n += n & -n\n\ndef update(l, d, v):\n    aupdate(l, v)\n    aupdate(l + d, -v)\n\ndef query(n):\n    ans = 0\n    while n:\n        ans += tree[n]\n        n -= n & -n\n    return ans\nfor T in range(int(pin())):\n    N = int(pin())\n    A = [*map(int, pin().split())]\n    tree = [0 for _ in range(N + 2)]\n    S = 0\n    for n in range(1, N + 1):\n        C = A[n - 1] - query(n)\n        S += max(C - 1, 0)\n        if C < 1:\n            update(n + 1, 1, 1 - C)\n        if A[n - 1] == 1:\n            continue\n        else:\n            update(n + 2, A[n - 1] - 1, 1)\n    print(S)", "def main():\n    t = int(input())\n    result = []\n    for _ in range(t):\n        n = int(input())\n        s = list(map(int, input().split()))\n        ans = 0\n        jumps_cnt = [0] * (n + 1)\n        for i in range(n):\n            curr_jumps = jumps_cnt[i]\n            if curr_jumps < s[i] - 1:\n                ans += s[i] - 1 - curr_jumps\n                curr_jumps += s[i] - 1 - curr_jumps\n            jumps_cnt[i + 1] += curr_jumps - (s[i] - 1)\n            for j in range(i + 2, min(n, i + s[i] + 1)):\n                jumps_cnt[j] += 1\n        result.append(str(ans))\n    print('\\n'.join(result))\nmain()", "def func(A):\n    n = len(A)\n    C = [0 for x in range(n)]\n    res = 0\n    for i in range(n):\n        if A[i] - C[i] > 1:\n            res += A[i] - 1 - C[i]\n            C[i] = A[i] - 1\n        try:\n            C[i + 1] += C[i] - A[i] + 1\n        except:\n            pass\n        for j in range(i + 2, min(n - 1, i + A[i]) + 1):\n            C[j] += 1\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(func(A))", "import sys\nimport math\n\nclass DictList(dict):\n\n    def __setitem__(self, key, value):\n        try:\n            self[key].append(value)\n        except KeyError:\n            super(DictList, self).__setitem__(key, value)\n        except AttributeError:\n            super(DictList, self).__setitem__(key, [self[key], value])\n\ndef fn(n, s):\n    count = [0] * n\n    c = 0\n    i = 0\n    for i in range(n):\n        if s[i] > 1:\n            m = min(i + s[i], n - 1)\n            for j in range(i + 2, m + 1):\n                count[j] = count[j] + 1\n    for i in range(n - 1):\n        if s[i] - 1 - count[i] < 0:\n            count[i + 1] = count[i + 1] + abs(s[i] - 1 - count[i])\n    for i in range(n):\n        if s[i] > 0:\n            c = c + max(0, s[i] - 1 - count[i])\n    return c\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    s = data[l + 2:l + 2 + n]\n    l = l + 1 + n\n    print(fn(n, s))", "import sys\nimport math\nfrom collections import Counter, defaultdict\nLI = lambda : list(map(int, input().split()))\nMAP = lambda : map(int, input().split())\nIN = lambda : int(input())\nS = lambda : input()\n\ndef case():\n    n = IN()\n    a = LI()\n    b = [0] * n\n    ans = 0\n    for i in range(n):\n        x = a[i] - 1 - b[i]\n        ans += max(0, x)\n        if x < 0 and i != n - 1:\n            b[i + 1] -= x\n        for j in range(i + 2, min(a[i] + i + 1, n)):\n            b[j] += 1\n    print(ans)\nfor _ in range(IN()):\n    case()", "TC = int(input())\nfor tc in range(TC):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    curr = [0] * (n + 5)\n    ans = 0\n    for x in range(n):\n        temp = curr[x]\n        if temp < arr[x] - 1:\n            ans += arr[x] - 1 - temp\n            temp += arr[x] - 1 - temp\n        curr[x + 1] += temp - arr[x] + 1\n        for y in range(x + 2, min(n, x + arr[x] + 1)):\n            curr[y] += 1\n    print(ans)", "I = input\nfor _ in range(int(I())):\n    n = int(I())\n    a = [*map(int, I().split())]\n    b = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        t = b[i]\n        if a[i] - 1 > t:\n            r += a[i] - 1 - t\n            t = a[i] - 1\n        b[i + 1] += t - a[i] + 1\n        for j in range(i + 2, min(n, i + a[i] + 1)):\n            b[j] += 1\n    print(r)", "TC = int(input())\nfor tc in range(TC):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    curr = [0] * (n + 5)\n    ans = 0\n    for x in range(n):\n        temp = curr[x]\n        if temp < arr[x] - 1:\n            ans += arr[x] - 1 - temp\n            temp += arr[x] - 1 - temp\n        curr[x + 1] += temp - arr[x] + 1\n        for y in range(x + 2, min(n, x + arr[x] + 1)):\n            curr[y] += 1\n    print(ans)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = []\n    dp = [0] * n\n    extra = [0] * n + [0]\n    for i in range(n):\n        res = max(0, a[i] - 1 - extra[i])\n        if extra[i] > a[i] - 1:\n            extra[i + 1] += extra[i] - (a[i] - 1)\n        dp[i] = dp[i - 1] + res\n        for j in range(i + 2, min(n, i + a[i] + 1)):\n            extra[j] += 1\n    print(dp[-1])"]