["from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\na = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nb = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = b[j]\n    r = b[j + 1]\n    if a[r] < a[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in a[l + 1:r]:\n        if a[l] <= ai <= a[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\na = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nb = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nr = 0\nfor j in range(k + 1):\n    l = b[j]\n    m = b[j + 1]\n    if a[m] < a[l]:\n        print('-1')\n        exit()\n    li = list()\n    for ai in a[l + 1:m]:\n        if a[l] <= ai <= a[m]:\n            pos = bisect_right(li, ai)\n            if pos == len(li):\n                li.append(ai)\n            else:\n                li[pos] = ai\n    r += m - l - 1 - len(li)\nprint(r)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\na = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nb = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = b[j]\n    r = b[j + 1]\n    if a[r] < a[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in a[l + 1:r]:\n        if a[l] <= ai <= a[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, m) = map(int, input().split())\na = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nb = [0] + (list(map(int, input().split())) if m else list()) + [n + 1]\nans = 0\nfor j in range(m + 1):\n    l = b[j]\n    r = b[j + 1]\n    if a[r] < a[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in a[l + 1:r]:\n        if a[l] <= ai <= a[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\na = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nb = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = b[j]\n    r = b[j + 1]\n    if a[r] < a[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in a[l + 1:r]:\n        if a[l] <= ai <= a[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\nm = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nt = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = t[j]\n    r = t[j + 1]\n    if m[r] < m[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in m[l + 1:r]:\n        if m[l] <= ai <= m[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\ninf = 4557430888798830399\n(n, k) = map(int, input().split())\na = [-inf] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [inf]\nb = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = b[j]\n    r = b[j + 1]\n    if a[r] < a[l]:\n        print('-1')\n        exit()\n    li = list()\n    for ai in a[l + 1:r]:\n        if a[l] <= ai <= a[r]:\n            pos = bisect_right(li, ai)\n            if pos == len(li):\n                li.append(ai)\n            else:\n                li[pos] = ai\n    ans += r - l - 1 - len(li)\nprint(ans)", "from bisect import bisect_right\nINF = 4557430888798830399\n(n, k) = map(int, input().split())\nm = [-INF] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [INF]\nt = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nans = 0\nfor j in range(k + 1):\n    l = t[j]\n    r = t[j + 1]\n    if m[r] < m[l]:\n        print('-1')\n        exit()\n    lis = list()\n    for ai in m[l + 1:r]:\n        if m[l] <= ai <= m[r]:\n            pos = bisect_right(lis, ai)\n            if pos == len(lis):\n                lis.append(ai)\n            else:\n                lis[pos] = ai\n    ans += r - l - 1 - len(lis)\nprint(ans)", "from bisect import bisect_right\nf = 4557430888798830399\n(n, k) = map(int, input().split())\narray = [-f] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [f]\nline = [0] + (list(map(int, input().split())) if k else list()) + [n + 1]\nresult = 0\nfor j in range(k + 1):\n    mark = line[j]\n    r = line[j + 1]\n    if array[r] < array[mark]:\n        print('-1')\n        exit()\n    li = list()\n    for ai in array[mark + 1:r]:\n        if array[mark] <= ai <= array[r]:\n            pos = bisect_right(li, ai)\n            if pos == len(li):\n                li.append(ai)\n            else:\n                li[pos] = ai\n    result += r - mark - 1 - len(li)\nprint(result)", "from math import inf\nfrom bisect import bisect_right\n(n, k) = map(int, input().split())\ndata = list(map(int, input().split()))\na = [-inf]\nb = [0]\nfor elem in data:\n    a.append(elem)\na.append(inf)\nfor i in range(n + 2):\n    a[i] -= i\nif k != 0:\n    data2 = list(map(int, input().split()))\nelse:\n    data2 = []\nfor elem in data2:\n    b.append(elem)\nb.append(n + 1)\nans = 0\nc = True\nfor i in range(k + 1):\n    left = b[i]\n    right = b[i + 1]\n    if a[left] > a[right]:\n        print('-1')\n        c = False\n        break\n    used = []\n    for j in range(left + 1, right):\n        if a[left] <= a[j] <= a[right]:\n            position = bisect_right(used, a[j])\n            if position == len(used):\n                used.append(a[j])\n            else:\n                used[position] = a[j]\n    ans += right - left - 1 - len(used)\nif c:\n    print(ans)", "from math import inf\nfrom bisect import bisect_right\n(n, k) = map(int, input().split())\ndata = list(map(int, input().split()))\na = [-inf]\nb = [0]\nfor elem in data:\n    a.append(elem)\na.append(inf)\nfor i in range(n + 2):\n    a[i] -= i\nif k != 0:\n    data2 = list(map(int, input().split()))\nelse:\n    data2 = []\nfor elem in data2:\n    b.append(elem)\nb.append(n + 1)\nans = 0\nc = True\nfor i in range(k + 1):\n    left = b[i]\n    right = b[i + 1]\n    if a[left] > a[right]:\n        print('-1')\n        c = False\n        break\n    used = []\n    for j in range(left + 1, right):\n        if a[left] <= a[j] <= a[right]:\n            position = bisect_right(used, a[j])\n            if position == len(used):\n                used.append(a[j])\n            else:\n                used[position] = a[j]\n    ans += right - left - 1 - len(used)\nif c:\n    print(ans)", "from bisect import bisect_right\n(n, m) = map(int, input().split())\ntp = 4557430888798830399\nt = 0\na = [-tp] + [ai - i for (i, ai) in enumerate(map(int, input().split()))] + [tp]\nb = [0] + (list(map(int, input().split())) if m else list()) + [n + 1]\nfor j in range(m + 1):\n    s = b[j]\n    r = b[j + 1]\n    lst = list()\n    for ai in a[s + 1:r]:\n        if a[s] <= ai <= a[r]:\n            tm = bisect_right(lst, ai)\n            if tm == len(lst):\n                lst.append(ai)\n            else:\n                lst[tm] = ai\n    if a[r] < a[s]:\n        print('-1')\n        exit()\n    t += r - s - 1 - len(lst)\nprint(t)", "import bisect\n\ndef solve(m1, m2, arr):\n    st = []\n    for c in arr:\n        if m1 <= c and c <= m2:\n            j = bisect.bisect_right(st, c)\n            if j == len(st):\n                st.append(c)\n            else:\n                st[j] = c\n    return len(st)\n(n, k) = map(int, input().split())\narrA = list(map(int, input().split()))\nfor (i, c) in enumerate(arrA):\n    arrA[i] -= i\narrB = []\nif k:\n    arrB = list(map(int, input().split()))\narrA = [float('-inf')] + arrA + [float('inf')]\narrB = [0] + arrB + [n + 1]\nans = 0\nfor i in range(1, len(arrB)):\n    if arrA[arrB[i]] < arrA[arrB[i - 1]]:\n        print('-1')\n        break\n    ans += arrB[i] - arrB[i - 1] - 1 - solve(arrA[arrB[i - 1]], arrA[arrB[i]], arrA[arrB[i - 1] + 1:arrB[i]])\nelse:\n    print(ans)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nsys.setrecursionlimit(99999)\n(n, k) = map(int, input().split())\narrA = list(map(int, input().split()))\nfor (i, c) in enumerate(arrA):\n    arrA[i] -= i\narrB = []\nif k:\n    arrB = list(map(int, input().split()))\narrA = [float('-inf')] + arrA + [float('inf')]\narrB = [0] + arrB + [n + 1]\nans = 0\n\ndef solve(m1, m2, arr):\n    st = []\n    for c in arr:\n        if m1 <= c <= m2:\n            j = bisect.bisect_right(st, c)\n            if j == len(st):\n                st.append(c)\n            else:\n                st[j] = c\n    return len(st)\nfor i in range(1, len(arrB)):\n    if arrA[arrB[i]] < arrA[arrB[i - 1]]:\n        print('-1')\n        break\n    ans += arrB[i] - arrB[i - 1] - 1 - solve(arrA[arrB[i - 1]], arrA[arrB[i]], arrA[arrB[i - 1] + 1:arrB[i]])\nelse:\n    print(ans)", "import bisect\n\ndef find(x, y, a):\n    s = []\n    for i in a:\n        if x <= i and i <= y:\n            j = bisect.bisect_right(s, i)\n            if j == len(s):\n                s.append(i)\n            else:\n                s[j] = i\n    return len(s)\nline = input().split()\nn = int(line[0])\nm = int(line[1])\nline1 = list(map(int, input().split()))\nfor i in range(len(line1)):\n    line1[i] -= i\nline2 = []\nif m != 0:\n    line2 = list(map(int, input().split()))\nline1 = [float('-inf')] + line1 + [float('inf')]\nline2 = [0] + line2 + [n + 1]\nans = 0\nfor i in range(1, len(line2)):\n    if line1[line2[i]] < line1[line2[i - 1]]:\n        print('-1')\n        break\n    s = find(line1[line2[i - 1]], line1[line2[i]], line1[line2[i - 1] + 1:line2[i]])\n    ans += line2[i] - line2[i - 1] - 1 - s\nelse:\n    print(ans)", "import bisect\n\ndef solve(m1, m2, arr):\n    st = []\n    for c in arr:\n        if m1 <= c <= m2:\n            j = bisect.bisect_right(st, c)\n            if j == len(st):\n                st.append(c)\n            else:\n                st[j] = c\n    return len(st)\n(n, k) = map(int, input().split())\narrA = list(map(int, input().split()))\nfor (i, c) in enumerate(arrA):\n    arrA[i] -= i\narrB = []\nif k:\n    arrB = list(map(int, input().split()))\narrA = [float('-inf')] + arrA + [float('inf')]\narrB = [0] + arrB + [n + 1]\nans = 0\nfor i in range(1, len(arrB)):\n    if arrA[arrB[i]] < arrA[arrB[i - 1]]:\n        print('-1')\n        break\n    ans += arrB[i] - arrB[i - 1] - 1 - solve(arrA[arrB[i - 1]], arrA[arrB[i]], arrA[arrB[i - 1] + 1:arrB[i]])\nelse:\n    print(ans)", "import sys\nimport bisect\n\ndef LIS(s, ed):\n    lis = []\n    for c in s:\n        ind = bisect.bisect_right(lis, c)\n        if ind == len(lis):\n            lis.append(c)\n        elif ind != 0:\n            lis[ind] = c\n    return bisect.bisect_right(lis, ed)\nt = 1\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = []\n    if k:\n        b = list(map(int, input().split(' ')))\n    a = [float('-inf')] + a + [float('inf')]\n    b = [0] + b + [n + 1]\n    for i in range(n + 2):\n        a[i] -= i\n    lb = len(b)\n    for i in range(lb - 1):\n        if a[b[i]] > a[b[i + 1]]:\n            print(-1)\n            sys.exit()\n    ans = n + 1\n    for i in range(lb - 1):\n        ans -= LIS(a[b[i]:b[i + 1]], a[b[i + 1]])\n    print(ans)", "import bisect\n\ndef solve(m1, m2, arr):\n    st = []\n    for c in arr:\n        if m1 <= c and c <= m2:\n            j = bisect.bisect_right(st, c)\n            if j == len(st):\n                st.append(c)\n            else:\n                st[j] = c\n    return len(st)\n(n, k) = map(int, input().split())\narrA = list(map(int, input().split()))\nfor (i, c) in enumerate(arrA):\n    arrA[i] -= i\narrB = []\nif k:\n    arrB = list(map(int, input().split()))\narrA = [float('-inf')] + arrA + [float('inf')]\narrB = [0] + arrB + [n + 1]\nans = 0\nfor i in range(1, len(arrB)):\n    if arrA[arrB[i]] < arrA[arrB[i - 1]]:\n        print('-1')\n        break\n    ans += arrB[i] - arrB[i - 1] - 1 - solve(arrA[arrB[i - 1]], arrA[arrB[i]], arrA[arrB[i - 1] + 1:arrB[i]])\nelse:\n    print(ans)", "import bisect\n\ndef solve(nums):\n    n = len(nums)\n    a = []\n    nums = [nums[i] - i for i in range(n)]\n    for i in range(n):\n        if nums[i] < nums[0] or nums[i] > nums[n - 1]:\n            continue\n        k = bisect.bisect_right(a, nums[i])\n        if k == len(a):\n            a.append(nums[i])\n        else:\n            a[k] = nums[i]\n    res = n - len(a)\n    return res\n\ndef main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 0:\n        b = []\n    else:\n        b = list(map(int, input().split()))\n    a = [-10 ** 10] + a + [10 ** 10]\n    b = [0] + b + [n + 1]\n    res = 0\n    ok = True\n    (t, temp) = (b[0], a[0])\n    for i in b[1:]:\n        if i - t > a[i] - temp:\n            ok = False\n            break\n        res += solve(a[t:i + 1])\n        (t, temp) = (i, a[i])\n    if ok:\n        print(res)\n    else:\n        print(-1)\nmain()", "import bisect\n\ndef solve(nums):\n    n = len(nums)\n    a = []\n    nums = [nums[i] - i for i in range(n)]\n    for i in range(n):\n        if nums[i] < nums[0] or nums[i] > nums[n - 1]:\n            continue\n        k = bisect.bisect_right(a, nums[i])\n        if k == len(a):\n            a.append(nums[i])\n        else:\n            a[k] = nums[i]\n    res = n - len(a)\n    return res\n\ndef main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 0:\n        b = []\n    else:\n        b = list(map(int, input().split()))\n    a = [-10 ** 10] + a + [10 ** 10]\n    b = [0] + b + [n + 1]\n    res = 0\n    ok = True\n    (t, temp) = (b[0], a[0])\n    for i in b[1:]:\n        if i - t > a[i] - temp:\n            ok = False\n            break\n        res += solve(a[t:i + 1])\n        (t, temp) = (i, a[i])\n    if ok:\n        print(res)\n    else:\n        print(-1)\nmain()"]