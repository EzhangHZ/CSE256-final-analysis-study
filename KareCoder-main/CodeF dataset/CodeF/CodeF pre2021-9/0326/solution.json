["def room(s):\n    hascw = s.count('>') > 0\n    hascl = s.count('<') > 0\n    if hascl and hascw:\n        s += s[0]\n        ans = 0\n        for i in range(len(s) - 1):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        return ans\n    return len(s)\nfor i in range(int(input())):\n    a = input()\n    s = input()\n    print(room(s))", "for _ in range(int(input())):\n    n = int(input())\n    d = input()\n    if '<' not in d or '>' not in d:\n        print(n)\n    else:\n        a = [0] * n\n        for i in range(n):\n            if d[i] == '-':\n                a[i] = a[(i + 1) % n] = 1\n        print(sum(a))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    dr = input().strip()\n    if '>' not in dr or '<' not in dr:\n        return n\n    cnt = 0\n    for i in range(n):\n        if dr[i] == '-' or dr[(i - 1) % n] == '-':\n            cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    print(solve())", "import queue\n\ndef solve():\n    n = int(input())\n    s = str(input())\n    lol_s = set(s)\n    if len(lol_s) == 1 and lol_s == {'-'}:\n        print(n)\n        return\n    if '>' in lol_s and '<' in lol_s:\n        ans = 0\n        s += s[0]\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(n)\nt = int(input())\nfor q in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '<' not in s or '>' not in s:\n        print(n)\n    else:\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[(i + 1) % n] == '-':\n                ans += 1\n        print(ans)", "for w in range(int(input())):\n    n = int(input())\n    s = str(input())\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n    else:\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i - 1] == '-':\n                ans += 1\n        print(ans)", "def main():\n    n = int(input())\n    s = input()\n    n_return = 0\n    if '<' not in s or '>' not in s:\n        print(n)\n        return\n    for i in range(n):\n        if i == 0:\n            if s[0] == '-' or s[-1] == '-':\n                n_return += 1\n        elif i == n - 1:\n            if s[-2] == '-' or s[-1] == '-':\n                n_return += 1\n        elif s[i] == '-' or s[i - 1] == '-':\n            n_return += 1\n    print(n_return)\nt = int(input())\nfor i in range(t):\n    main()", "def connected_rooms(n: int, dirs: str):\n    amount_right = 0\n    amount_left = 0\n    res = 0\n    for i in range(n):\n        if dirs[i] == '-' or dirs[i - 1] == '-':\n            res += 1\n        if dirs[i] == '>':\n            amount_right += 1\n        elif dirs[i] == '<':\n            amount_left += 1\n    if amount_left == 0 or amount_right == 0:\n        return n\n    else:\n        return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    dirs = input()\n    print(connected_rooms(n, dirs))", "for t in range(int(input())):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    b = 0\n    if s[0] == s[-1] == '-':\n        b = 1\n    if '>' not in s or '<' not in s:\n        print(n)\n    elif '-' not in s:\n        print(0)\n    else:\n        s = ' '.join(' '.join(s.split('<')).split('>')).split()\n        a = 0\n        for i in s:\n            a += len(i) + 1\n        print(a - b)", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    c = input()\n    t = c + c[0]\n    d = c.count('>')\n    e = c.count('<')\n    h = c.count('-')\n    if d + h == b or e + h == b:\n        print(b)\n    else:\n        l = 0\n        c = c + c[0]\n        for y in range(1, b + 1):\n            if c[y] == '-' or c[y - 1] == '-':\n                l += 1\n        print(l)", "t = int(input())\nfor _ in range(t):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "def solve():\n    n = int(input())\n    s = input().strip()\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n        return\n    islands = 0\n    flag = 0\n    if s[0] == '-' and s[n - 1] == '-':\n        islands = -1\n    i = 0\n    while i < n:\n        if s[i] == '-':\n            islands += 1\n            while i < n and s[i] == '-':\n                i += 1\n        else:\n            i += 1\n    print(s.count('-') + islands)\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        solve()\n    return 0\nmain()", "from itertools import groupby\n\ndef main():\n    num_testcases = int(input())\n    results = []\n    for _ in range(num_testcases):\n        num_rooms = int(input())\n        strip = input().strip()\n        if not ('>' in strip and '<' in strip):\n            results.append(num_rooms)\n        else:\n            minus_groups = [''.join(g) for (k, g) in groupby(strip) if k == '-']\n            result = sum(map(len, minus_groups)) + len(minus_groups)\n            if strip[0] == strip[-1] == '-':\n                result -= 1\n            results.append(result)\n    for res in results:\n        print(res)\nmain()", "t = int(input())\nwhile t:\n    a = int(input())\n    s = input()\n    c = 0\n    aq = 0\n    q = s.replace('-', '')\n    c = len(s) - len(q)\n    if len(list(set(s))) == 2 and '-' in set(s):\n        print(len(s))\n        t -= 1\n        continue\n    if s[0] == '-' and s[-1] == '-' and (len(list(set(s))) != 1):\n        aq = 1\n    s = s.replace('<', '.')\n    s = s.replace('>', '.')\n    s = s.split('.')\n    s = [x for x in s if x]\n    if s:\n        c += len(s) - 1 - aq\n    k = True\n    a = list(q)\n    a = set(a)\n    if len(a) == 2:\n        k = False\n    if len(a) == 1:\n        k = True\n    if k:\n        c += len(q)\n    if not k and c != 0:\n        c += 1\n    print(c)\n    t -= 1", "import math\nn = 'deep'\nimport heapq\nx = 'abcdefgh'\nfor asdasdasd in range(int(input())):\n    n = int(input())\n    s = input()\n    ss = list(set(s))\n    l = len(ss)\n    if l == 1:\n        print(n)\n    elif l == 2:\n        if ss[0] == '-' or ss[1] == '-':\n            print(n)\n        else:\n            print(0)\n    else:\n        x = set()\n        for i in range(n):\n            if s[i] == '-':\n                x.add((i + 1) % n)\n                x.add(i)\n        print(len(x))", "def solve():\n    n = int(input())\n    s = input()\n    if '<' not in s or '>' not in s:\n        print(n)\n        return\n    res = 0\n    for i in range(n - 1):\n        if s[i] == '-' or s[i + 1] == '-':\n            res += 1\n    if s[0] == '-' or s[-1] == '-':\n        res += 1\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = str(input())\n    l = [0] * n\n    sub1 = '><'\n    sub2 = '<>'\n    if not ('<' in s and '>' in s):\n        print(n)\n    else:\n        for i in range(1, n - 1):\n            if s[i - 1] == '-' or s[i] == '-':\n                l[i] += 1\n        if s[0] == '-' or s[n - 1] == '-':\n            l[0] += 1\n        if s[n - 1] == '-' or s[n - 2] == '-':\n            l[n - 1] += 1\n        print(sum(l))", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = str(input())\n    l = [0] * n\n    if not ('<' in s and '>' in s):\n        print(n)\n    else:\n        for i in range(1, n - 1):\n            if s[i - 1] == '-' or s[i] == '-':\n                l[i] += 1\n        if s[0] == '-' or s[n - 1] == '-':\n            l[0] += 1\n        if s[n - 1] == '-' or s[n - 2] == '-':\n            l[n - 1] += 1\n        print(sum(l))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    s1 = '<' * n\n    s2 = '>' * n\n    ans = 0\n    if s == s1 or s == s2:\n        print(n)\n        t = t - 1\n        continue\n    if '<' not in s or '>' not in s:\n        print(n)\n        t = t - 1\n        continue\n    else:\n        s = s + s[0]\n        for j in range(0, n):\n            if s[j] == '-' or s[j + 1] == '-':\n                ans = ans + 1\n    print(ans)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = str(input())\n    flag1 = 1\n    for i in range(len(s)):\n        if s[i] == '<':\n            flag1 = 0\n            break\n    flag2 = 1\n    for i in range(len(s)):\n        if s[i] == '>':\n            flag2 = 0\n            break\n    if flag1 == 1 or flag2 == 1:\n        ans = n\n    else:\n        ans = 0\n        s = s + s[0]\n        for i in range(0, n, +1):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans = ans + 1\n    print(ans)\n    t = t - 1", "n = int(input())\nfor _ in range(n):\n    k = int(input())\n    line = input()\n    returnable_set = set()\n    if '<' not in line or '>' not in line:\n        print(k)\n    else:\n        for i in range(k):\n            if line[i] == '-':\n                returnable_set.add(i)\n                returnable_set.add((i + 1) % k)\n        print(len(returnable_set))", "from sys import stdin\nfrom collections import Counter\nfrom random import choice\ninput = stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    x = '><-'\n    lst = list(input().strip())\n    cnt = Counter(lst)\n    (a, b, c) = (cnt.get('>', 0), cnt.get('<', 0), cnt.get('-', 0))\n    if a and b:\n        if c:\n            ss = set()\n            if lst[-1] == '-':\n                ss.update((0, n - 1))\n            for i in range(n - 1):\n                if lst[i] == '-':\n                    ss.update((i, i + 1))\n            print(len(ss))\n        else:\n            print(0)\n    else:\n        print(n)", "TC = int(input())\nfor tc in range(TC):\n    n = int(input())\n    s = input()\n    hasCW = False\n    hasCCW = False\n    for c in s:\n        if c == '>':\n            hasCW = True\n        if c == '<':\n            hasCCW = True\n    if hasCW and hasCCW:\n        s += s[0]\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(n)", "for t in range(int(input())):\n    (n, s, r) = (int(input()), input(), 0)\n    if 0 in (s.count('>'), s.count('<')):\n        print(n)\n        continue\n    for i in range(n):\n        if '-' in (s[i], s[(i + 1) % n]):\n            r += 1\n    print(r)", "def count_returnable_rooms(transporters):\n    transporter_types = set(transporters)\n    if '>' in transporter_types and '<' in transporter_types:\n        counter = 0\n        for i in range(len(transporters)):\n            if transporters[i] == '-' or transporters[i - 1] == '-':\n                counter += 1\n        return counter\n    else:\n        return len(transporters)\nfor i in range(int(input())):\n    n = input()\n    print(count_returnable_rooms(input()))", "def beltedRooms(n, array):\n    array = list(array)\n    ans = [0] * n\n    flag_left = 0\n    flag_right = 0\n    for x in range(n):\n        if array[x] == '>':\n            flag_left = 1\n        elif array[x] == '<':\n            flag_right = 1\n    if flag_left != flag_right:\n        return n\n    else:\n        if array[-1] == '-' or array[0] == '-':\n            ans[0] = 1\n        else:\n            ans[0] = 0\n        for x in range(n - 1):\n            if array[x] == '-' or array[x + 1] == '-':\n                ans[x + 1] = 1\n            else:\n                ans[x + 1] = 0\n    c = 0\n    for x in ans:\n        if x == 1:\n            c += 1\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(beltedRooms(n, s))", "import sys\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = sys.stdin.readline().strip()\n    p = set(s)\n    if len(p) == 1:\n        print(n)\n        continue\n    if len(p) == 2 and '-' in p:\n        print(n)\n        continue\n    if len(p) == 2 and '-' not in p:\n        print(0)\n        continue\n    v = [0] * n\n    for j in range(n - 1):\n        if s[j] == '-':\n            v[j] = 1\n            v[j + 1] = 1\n    if s[n - 1] == '-':\n        v[n - 1] = 1\n        v[0] = 1\n    print(v.count(1))", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = str(input())\n    l = [0] * n\n    sub1 = '><'\n    sub2 = '<>'\n    if not (sub1 in s or sub2 in s) and (not (s[0] == '<' and s[n - 1] == '>' or (s[0] == '>' and s[n - 1] == '<') or ('<' in s and '>' in s))):\n        print(n)\n    else:\n        for i in range(1, n - 1):\n            if s[i - 1] == '-' or s[i] == '-':\n                l[i] += 1\n        if s[0] == '-' or s[n - 1] == '-':\n            l[0] += 1\n        if s[n - 1] == '-' or s[n - 2] == '-':\n            l[n - 1] += 1\n        print(sum(l))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    f = [0] * n\n    t1 = s.count('<')\n    t2 = s.count('>')\n    if t1 == 0 or t1 == n:\n        print(n)\n    elif t2 == 0 or t2 == n:\n        print(n)\n    else:\n        for i in range(n):\n            if s[i] == '-':\n                f[i] = 1\n                f[(i + 1) % n] = 1\n        print(f.count(1))", "t = int(input())\nbuf = []\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if '<' not in s or '>' not in s:\n        buf.append(n)\n        continue\n    s += s[0]\n    ans = 0\n    for i in range(n):\n        if s[i] == '-' or s[i + 1] == '-':\n            ans += 1\n    buf.append(ans)\nprint('\\n'.join(map(str, buf)))", "def solve():\n    n = int(input())\n    rooms = input()\n    edge_types = set(rooms)\n    if not ('>' in edge_types and '<' in edge_types):\n        print(n)\n        return\n    ans = 0\n    for i in range(n):\n        if rooms[i] == '-' or rooms[i - 1] == '-':\n            ans += 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def belt1():\n    print(n)\n\ndef belt2(summation):\n    for i in range(n - 1):\n        if sss[i] == '-' or sss[i + 1] == '-':\n            summation += 1\n    return summation\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    sss = input()\n    (summation, f) = (0, 0)\n    if '>' not in sss or '<' not in sss:\n        f = 1\n        if f == 1:\n            belt1()\n    else:\n        if sss[-1] == '-' or sss[0] == '-':\n            summation += 1\n        belt_final = belt2(summation)\n        print(belt_final)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        S = list(input().rstrip())\n        if '<' in set(S) and '>' in set(S):\n            res = [False] * n\n            for i in range(n):\n                if S[i] == '-':\n                    res[i] = True\n                    res[(i + 1) % n] = True\n            print(res.count(True))\n        else:\n            print(n)\nresolve()", "def solve():\n    n = int(input().strip())\n    conveyors = list(input().strip())\n\n    def run(start, lookup):\n        target = start\n        while conveyors[start] in lookup:\n            start = (start + 1) % n\n            if start == target:\n                return True\n        return False\n    if run(0, '->'):\n        return n\n    if run(0, '-<'):\n        return n\n    direct_reachable = set()\n    for c in range(n):\n        if conveyors[c] == '-':\n            direct_reachable.add(c)\n            direct_reachable.add((c + 1) % n)\n    return len(direct_reachable)\nfor _ in range(int(input().strip())):\n    print(solve())", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = input()\n    res = 0\n    if '>' not in arr:\n        res = n\n    elif '<' not in arr:\n        res = n\n    elif '-' not in arr:\n        res = 0\n    else:\n        prev = None\n        for i in range(len(arr)):\n            if arr[i] == '-':\n                if prev == '-':\n                    res += 1\n                else:\n                    res += 2\n            prev = arr[i]\n        if arr[0] == arr[-1] == '-' and n > 1:\n            res -= 1\n    print(res)\n    t -= 1", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    s = input('')\n    cnt = 0\n    if s.count('>') == 0:\n        print(n)\n    elif s.count('<') == 0:\n        print(n)\n    else:\n        dp = [0] * n\n        for i in range(n):\n            if s[i] == '-':\n                if i == n - 1:\n                    dp[i] = 1\n                    dp[0] = 1\n                else:\n                    dp[i] = 1\n                    dp[i + 1] = 1\n        print(sum(dp))", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = input()\n    if a.count('>') == n or a.count('<') == n or a.count('-') == n:\n        print(n)\n    elif '-' not in a:\n        print(0)\n    else:\n        s = a\n        if '>' not in a or '<' not in a:\n            print(n)\n        else:\n            cnt = 0\n            for i in range(1, n):\n                if a[i] == '-':\n                    if a[i - 1] == '-':\n                        cnt += 1\n                    else:\n                        cnt += 2\n            if a[0] == '-':\n                if a[-1] == '-':\n                    cnt += 1\n                else:\n                    cnt += 2\n            print(cnt)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    rooms = inp()\n    belts = input()\n    if '<' in belts and '>' in belts:\n        result = 0\n        f = 0\n        if belts[0] == '-' and belts[-2] == '-':\n            f = 1\n        a = False\n        for i in belts:\n            if i == '-':\n                if a == False:\n                    result += 2\n                    a = True\n                else:\n                    result += 1\n            else:\n                a = False\n        print(result - f)\n    else:\n        print(rooms)", "for _ in range(int(input())):\n    n = int(input())\n    s = [x for x in input()]\n    k = []\n    if '>' in s and '<' in s:\n        for (i, j) in enumerate(s):\n            if j == '-':\n                k.append(i)\n                k.append((i + 1) % n)\n        print(len(set(k)))\n    else:\n        print(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    if '>' in s and '<' not in s or ('<' in s and '>' not in s):\n        count = n\n    elif '-' in s:\n        if s[0] == '-' or s[-1] == '-':\n            count += 1\n        for j in range(1, n):\n            if s[j - 1] == '-' or s[j] == '-':\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '<' not in s or '>' not in s:\n        print(n)\n        continue\n    if n == 2:\n        if '>' in s and '<' in s:\n            print(0)\n        else:\n            print(2)\n        continue\n    c = f = 0\n    for i in s:\n        if i == '-':\n            if c > 0:\n                f += 1\n            else:\n                f += 2\n                c += 1\n        else:\n            c = 0\n    if s[0] == '-' and s[-1] == '-':\n        f -= 1\n    print(f)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    s1 = set(s)\n    if len(s1) == 1:\n        print(n)\n    elif '>' in s and '<' in s and ('-' not in s):\n        print(0)\n    elif '<' not in s or '>' not in s:\n        print(n)\n    else:\n        c = 0\n        for i in range(len(s) - 1):\n            if s[i] == '-' or s[i + 1] == '-':\n                c += 1\n        if s[len(s) - 1] == '-' or s[0] == '-':\n            c += 1\n        print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    belt = input()\n    if belt.count('>') == 0 or belt.count('<') == 0:\n        print(n)\n    else:\n        s = set()\n        for i in range(n):\n            if belt[i] == '-':\n                s.add(i)\n                s.add((i + 1) % n)\n        print(len(s))", "for y in range(int(input())):\n    n = int(input())\n    st = input()\n    if '<' not in st or '>' not in st:\n        print(n)\n    else:\n        ans = 0\n        if st[0] == '-' or st[-1] == '-':\n            ans += 1\n        for i in range(n - 1):\n            if st[i] == '-' or st[i + 1] == '-':\n                ans += 1\n        print(ans)", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    s = str(input())\n    sum = 0\n    if '>' in s and '<' in s:\n        for i in range(a):\n            if s[i] == '-' or s[i - 1] == '-':\n                sum = sum + 1\n    else:\n        sum = a\n    print(sum)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    n_off = [x for x in s if x != '-']\n    if len(set(n_off)) < 2:\n        print(n)\n        continue\n    ans = 0\n    for (index, x) in enumerate(s):\n        if x != '-':\n            continue\n        if s[(index + 1) % n] == '-':\n            ans += 1\n        else:\n            ans += 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    if '<' in a and '>' in a:\n        a += a[0]\n        c = 0\n        for i in range(n):\n            if a[i] == '-' or a[i + 1] == '-':\n                c += 1\n        print(c)\n    else:\n        print(n)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = str(input())\n    l = [0] * n\n    sub1 = '><'\n    sub2 = '<>'\n    if (s.count(sub1) == 0 and s.count(sub2) == 0) and (not (s[0] == '<' and s[n - 1] == '>' or (s[0] == '>' and s[n - 1] == '<') or ('<' in s and '>' in s))):\n        print(n)\n    else:\n        for i in range(1, n - 1):\n            if s[i - 1] == '-' or s[i] == '-':\n                l[i] += 1\n        if s[0] == '-' or s[n - 1] == '-':\n            l[0] += 1\n        if s[n - 1] == '-' or s[n - 2] == '-':\n            l[n - 1] += 1\n        print(sum(l))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    if not ('<' in s and '>' in s):\n        print(n)\n        continue\n    ans = 0\n    for i in range(1, n + 1):\n        if s[i - 1] == '-' or s[i % n] == '-':\n            ans += 1\n    print(ans)", "for _ in ' ' * int(input()):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == '-':\n            if s[i - 1] != '-':\n                ans += 1\n            ans += 1\n    if all((x == '-' or x == '>' for x in s)) or all((x == '-' or x == '<' for x in s)):\n        ans = n\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    seq = input()\n    if seq == '<' * n or seq == '>' * n or seq == '-' * n:\n        print(n)\n    else:\n        R = [0] * n\n        left = False\n        right = False\n        both = False\n        for i in range(n):\n            if seq[i] == '>':\n                right = True\n            if seq[i] == '<':\n                left = True\n            if seq[i] == '-':\n                both = True\n                R[i] = 1\n                R[(i + 1) % n] = 1\n        if not right or not left:\n            print(n)\n        else:\n            print(sum(R))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = set()\n    if len(set(s)) == 1 or (len(set(s)) == 2 and '-' in s):\n        print(n)\n    else:\n        for i in range(n):\n            if s[i] == '-':\n                l.add(i)\n                l.add((i + 1) % n)\n        print(len(l))", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        l = []\n        if '<' not in s:\n            print(n)\n        elif '>' not in s:\n            print(n)\n        else:\n            for i in range(n):\n                if s[i] == '-':\n                    l.append(i % n)\n                    l.append((i + 1) % n)\n            s1 = set(l)\n            print(len(s1))\nexcept:\n    pass", "def findNum(s):\n    rooms = [0] * len(s)\n    if '<' not in s or '>' not in s:\n        return len(s)\n    for i in range(len(s)):\n        if i == 0 and (s[i] == '-' or s[len(s) - 1] == '-'):\n            rooms[i] = 1\n        elif s[i] == '-' or s[i - 1] == '-':\n            rooms[i] = 1\n    return sum(rooms)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(findNum(s))", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    k = s.count('-')\n    a = s.count('<')\n    b = s.count('>')\n    if a == 0 or b == 0:\n        print(n)\n    elif k == 0:\n        print(0)\n    else:\n        s += s[0]\n        c = 0\n        for j in range(n):\n            if s[j] == '-' or s[j + 1] == '-':\n                c += 1\n        print(c)", "from functools import reduce\nimport collections\nimport math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(delimiter=' '):\n        return input().split(delimiter)\n\n    @staticmethod\n    def list_int(delimiter=' '):\n        return list(map(int, input().split(delimiter)))\n\ndef main():\n    t = Read.int()\n    for _ in range(t):\n        n = Read.int()\n        a = list(Read.string())\n        c = collections.Counter(a)\n        if len(c) == 3:\n            res = 0\n            a.append(a[0])\n            for i in range(n):\n                if a[i + 1] == '-' or a[i] == '-':\n                    res += 1\n            print(res)\n        elif len(c) == 2 and (c['<'] == 0 or c['>'] == 0) or len(c) == 1:\n            print(n)\n        else:\n            print(0)\nmain()", "t = int(input())\nanswers = []\nfor _ in range(t):\n    x = 0\n    n = int(input())\n    s = input()\n    if '>' not in s or '<' not in s:\n        x = n\n    else:\n        for j in range(n):\n            if s[j] == '-':\n                x += 1\n            elif s[j - 1] == '-':\n                x += 1\n    answers.append(x)\nfor i in range(t):\n    print(answers[i])", "n = int(input())\nfor i in range(n):\n    length = int(input())\n    s = input()[0:length]\n    st = set(s)\n    if len(st) == 1 or (len(st) == 2 and '-' in st):\n        print(length)\n        continue\n    result = [0] * length\n    for j in range(length):\n        if s[j] == '-':\n            result[j % length] = 1\n            result[(j + 1) % length] = 1\n    print(sum(result))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ss = list(set(s))\n    l = len(ss)\n    if l == 1:\n        print(n)\n    elif l == 2:\n        if ss[0] == '-' or ss[1] == '-':\n            print(n)\n        else:\n            print(0)\n    else:\n        x = set()\n        for i in range(n):\n            if s[i] == '-':\n                x.add((i + 1) % n)\n                x.add(i)\n        print(len(x))", "def snake():\n    n = int(input())\n    s = input()\n    hasCW = 0\n    hasCCW = 0\n    for c in s:\n        if c == '>':\n            hasCW = 1\n        if c == '<':\n            hasCCW = 1\n    if hasCW == 1 and hasCCW == 1:\n        s += s[0]\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(n)\nt = int(input())\nfor i in range(t):\n    snake()", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    if '>' in s and '<' in s:\n        count = 0\n        for i in range(n):\n            if s[i] == '-' or s[(i + 1) % n] == '-':\n                count += 1\n        print(count)\n    else:\n        print(n)", "for _ in range(int(input())):\n    (n, s, c) = (int(input()), list(input()), int(0))\n    s.append(s[0])\n    if '<' in s and '>' in s:\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                c = c + 1\n        print(c)\n    else:\n        print(n)", "def check_other(s):\n    if s.count('>') >= 1 and s.count('<') >= 1:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for k in range(t):\n        _ = int(input())\n        s = input()\n        if check_other(s):\n            total = 2 * s.count('-')\n            for i in range(len(s)):\n                if s[i] == s[(i + 1) % len(s)] and s[i] == '-':\n                    total -= 1\n            print(total)\n        else:\n            print(len(s))\nmain()", "t = int(input())\nwhile t > 0:\n    j = 0\n    n = int(input())\n    ls = input()\n    ls = ls + ls[0]\n    if '>' in ls and '<' in ls:\n        for i in range(n):\n            if ls[i] == '-' or ls[i + 1] == '-':\n                j = j + 1\n        print(j)\n    else:\n        print(n)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (sr, r) = (0, 0)\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n    else:\n        for j in range(1, n):\n            if s[j] == '-' or s[j - 1] == '-':\n                sr += 1\n        if s[-1] == '-' or s[0] == '-':\n            sr += 1\n        print(sr)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (sr, r) = (0, 0)\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n    else:\n        for j in range(1, n):\n            if s[j] == '-' or s[j - 1] == '-':\n                sr += 1\n        if s[-1] == '-' or s[0] == '-':\n            sr += 1\n        print(sr)", "def solve():\n    n = int(input())\n    s = input()\n    k = '-'\n    tr = True\n    for i in s:\n        if k == '-' and i != '-':\n            k = i\n        if i != '-' and k != i:\n            tr = False\n    if tr:\n        print(n)\n        return 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '-' or s[i - 1] == '-':\n            ans += 1\n    print(ans)\nfor i in range(int(input())):\n    solve()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    s = minp()\n    c = 0\n    r = True\n    l = True\n    for i in range(n):\n        r = r and (s[i] == '<' or s[i] == '-')\n        l = l and (s[i] == '>' or s[i] == '-')\n        if s[i] == '-' or s[i - 1] == '-':\n            c += 1\n    if r or l:\n        print(n)\n    else:\n        print(c)\nfor i in range(mint()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    if '>' not in s or '<' not in s:\n        print(n)\n    else:\n        if s[-1] == '-' or s[0] == '-':\n            ans += 1\n        for i in range(n - 1):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    a = '>' in s\n    b = '<' in s\n    if not (a and b):\n        print(n)\n    else:\n        line = False\n        ans = 0\n        j = 0\n        for i in s:\n            j += 1\n            if i != '-' and line:\n                ans += 1\n                line = False\n            if i == '-':\n                ans += 1\n                line = True\n                if j == n and s[0] != '-':\n                    ans += 1\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(input())\n    f = 1\n    if l.count('>') == 0 or l.count('<') == 0:\n        f = 0\n    if f == 1:\n        c = 0\n        cl = []\n        s = 0\n        e = 0\n        for i in range(n):\n            if l[i] == '-':\n                if i == 0:\n                    s = 1\n                c += 1\n            elif c != 0:\n                e = 1\n                cl.append(c)\n                c = 0\n        if c != 0:\n            if s == 1:\n                if e == 1:\n                    cl.append(c + cl[0])\n                    cl.pop(0)\n                    c = 0\n                else:\n                    cl.append(c + 1)\n            else:\n                cl.append(c)\n                c = 0\n        t = 0\n        for i in cl:\n            t += i + 1\n        if t > 0:\n            print(t)\n        else:\n            print(0)\n    else:\n        print(n)", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    s = str(input())\n    sum = 0\n    if '>' in s and '<' in s:\n        for i in range(a):\n            if s[i] == '-' or s[i - 1] == '-':\n                sum = sum + 1\n    else:\n        sum = a\n    print(sum)", "t = int(input())\nwhile t:\n    t -= 1\n    leng = int(input())\n    stri = input()\n    sum = 0\n    clock = '>' in stri\n    antiClock = '<' in stri\n    if clock and antiClock:\n        for (i, char) in enumerate(stri):\n            if '-' == char or '-' == stri[i - 1]:\n                sum += 1\n    else:\n        sum = leng\n    print(sum)", "t = int(input())\nq = []\nfor i in range(t):\n    n = int(input())\n    string = list(input())\n    string_set = set(string)\n    if len(string_set) == 1:\n        q.append(n)\n    elif string.count('<') + string.count('>') == n:\n        q.append(0)\n    elif len(string_set) == 2:\n        q.append(n)\n    else:\n        r = []\n        for (j, k) in enumerate(string):\n            if k == '-':\n                r.append(j)\n                r.append((j + 1) % n)\n        q.append(len(set(r)))\nfor i in q:\n    print(i)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = []\n    if len(list(set(s))) == 1:\n        print(n)\n    elif len(list(set(s))) == 2 and '-' in s:\n        print(n)\n    else:\n        for i in range(n):\n            if s[i] == '-':\n                c.append(i)\n                c.append((i + 1) % n)\n        print(len(list(set(c))))", "def main():\n    n = int(input())\n    s = input().strip()\n    left = False\n    right = False\n    for i in range(n):\n        if s[i] == '<':\n            left = True\n        elif s[i] == '>':\n            right = True\n    if left and right:\n        cnt = 0\n        for i in range(n):\n            if s[i - 1] == '-' or s[i] == '-':\n                cnt += 1\n        print(cnt)\n    else:\n        print(n)\nfor _ in range(int(input())):\n    main()", "for _ in range(int(input())):\n    lens = int(input())\n    inps = input()\n    if '>' in inps and '<' in inps:\n        ans = 0\n        inps += inps[0]\n        for i in range(lens):\n            if inps[i] == '-' or inps[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(lens)", "for w in range(int(input())):\n    n = int(input())\n    s = str(input())\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n    else:\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i - 1] == '-':\n                ans += 1\n        print(ans)", "for w in range(int(input())):\n    n = int(input())\n    s = str(input())\n    if s.count('<') == 0 or s.count('>') == 0:\n        print(n)\n    else:\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i - 1] == '-':\n                ans += 1\n        print(ans)", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nM = lambda : map(int, stdin.readline().strip().split())\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    return ' '.join(list(map(str, a)))\n\ndef solve():\n    n = I()\n    ans = 0\n    s = S()\n    if s.count('>') == 0 or s.count('<') == 0:\n        print(n)\n    else:\n        for i in range(n):\n            if s[i] == '-' or s[(i + 1) % n] == '-':\n                ans += 1\n        print(ans)\nfor _ in range(I()):\n    solve()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    k = list(set(s))\n    if len(k) == 1:\n        print(n)\n    elif len(k) == 2:\n        if '>' in k and '<' in k:\n            print(0)\n        else:\n            print(n)\n    else:\n        s += s[0]\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)", "n = int(input())\nfor i in range(n):\n    returns = 0\n    rooms = int(input())\n    desc = input()\n    hasCW = True if '>' in desc else False\n    hasCCW = True if '<' in desc else False\n    hasOFF = True if '-' in desc else False\n    if hasCW and (not hasCCW):\n        returns = rooms\n    elif hasCCW and (not hasCW):\n        returns = rooms\n    elif hasOFF:\n        for (rm, dsc) in enumerate(desc):\n            if rm == 0:\n                if desc[-1] == '-' or dsc == '-':\n                    returns += 1\n            elif dsc == '-' or desc[rm - 1] == '-':\n                returns += 1\n    print(returns)", "def solve():\n    n = int(input())\n    s = input()\n    l = m = r = 0\n    for i in s:\n        if i == '-':\n            m = 1\n        elif i == '>':\n            r = 1\n        else:\n            l = 1\n    if not l or not r:\n        print(n)\n        return\n    res = 0\n    for i in range(n - 1):\n        if s[i] == '-' or s[i + 1] == '-':\n            res += 1\n    if s[0] == '-' or s[-1] == '-':\n        res += 1\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "def Snakes(l, s):\n    hasCW = False\n    hasCCW = False\n    for i in range(l):\n        if s[i] == '>':\n            hasCW = True\n        elif s[i] == '<':\n            hasCCW = True\n    if hasCW and hasCCW:\n        s = s + s[0]\n        ans = 0\n        for i in range(l):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        return ans\n    else:\n        return l\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(Snakes(n, s))", "from collections import Counter\nfrom random import choice\nfor test in range(int(input())):\n    n = int(input())\n    x = '><-'\n    lst = list(input().strip())\n    cnt = Counter(lst)\n    (a, b, c) = (cnt.get('>', 0), cnt.get('<', 0), cnt.get('-', 0))\n    if a and b:\n        if c:\n            ss = set()\n            if lst[-1] == '-':\n                ss.update((0, n - 1))\n            for i in range(n - 1):\n                if lst[i] == '-':\n                    ss.update((i, i + 1))\n            print(len(ss))\n        else:\n            print(0)\n    else:\n        print(n)", "t = int(input())\nfor w in range(t):\n    n = int(input())\n    s = input()\n    from collections import Counter\n    count = Counter(s)\n    if count['>'] == 0:\n        print(n)\n    elif count['<'] == 0:\n        print(n)\n    else:\n        count1 = 0\n        for i in range(n):\n            if s[i] == '-' or s[(i + 1) % n] == '-':\n                count1 += 1\n        print(count1)", "TC = int(input())\nfor tc in range(TC):\n    n = int(input())\n    s = input()\n    hasCW = False\n    hasCCW = False\n    for c in s:\n        if c == '>':\n            hasCW = True\n        if c == '<':\n            hasCCW = True\n    if hasCW and hasCCW:\n        s += s[0]\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(n)", "def func():\n    count_clock = sum((1 for x in range(n) if st[x] == '>'))\n    count_anti = sum((1 for x in range(n) if st[x] == '<'))\n    if count_anti == 0 or count_clock == 0:\n        print(n)\n        return\n    new_st = list(st)\n    count_off = 0\n    for i in range(n):\n        if new_st[i] == '-' or new_st[(i + 1) % n] == '-':\n            count_off += 1\n    print(count_off)\nfor _ in range(int(input())):\n    n = int(input())\n    st = input()\n    func()", "import math\nfrom collections import *\nfrom functools import lru_cache\nimport bisect\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ipl():\n    return list(map(int, input().split()))\n\ndef ipn():\n    return int(input())\n\ndef ipf():\n    return float(input())\n\ndef solve():\n    n = ipn()\n    s = ip()\n    i = 0\n    cw = acw = False\n    while i < n:\n        if s[i] == '>':\n            cw = True\n        if s[i] == '<':\n            acw = True\n        i += 1\n    if cw and acw:\n        s += s[0]\n        i = c = 0\n        while i < n:\n            if s[i] == '-' or s[i + 1] == '-':\n                c += 1\n            i += 1\n        print(c)\n    else:\n        print(n)\nfor _ in range(int(input())):\n    solve()", "from collections import deque\nABC = int(input())\nfor j in range(ABC):\n    n = int(input())\n    s = input()\n    value_b = False\n    value_a = False\n    for c in s:\n        if c == '>':\n            value_b = True\n        if c == '<':\n            value_a = True\n    if value_b and value_a:\n        s += s[0]\n        ans = 0\n        for i in range(n):\n            if s[i] == '-' or s[i + 1] == '-':\n                ans += 1\n        print(ans)\n    else:\n        print(n)", "import io, os\nimport sys\nfrom sys import stdin\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, namedtuple\nfrom math import gcd, ceil, floor, factorial\nfrom itertools import combinations, permutations\ninput = sys.stdin.readline\n\ndef work():\n    ans = 0\n    return\n\ndef main():\n    test = int(input())\n    for idt in range(test):\n        n = int(input())\n        s = input().strip('\\r\\n')\n        bid = set()\n        a = s.count('<')\n        b = s.count('>')\n        ans = 0\n        for (i, ch) in enumerate(s):\n            if ch == '-':\n                ans += 1\n            elif ch == '<':\n                if b == 0 or s[(i - 1 + n) % n] == '-':\n                    ans += 1\n            elif a == 0 or s[(i - 1 + n) % n] == '-':\n                ans += 1\n        print(ans)\n    return\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    c = d = e = 0\n    for i in range(n):\n        if s[i] == '<':\n            c += 1\n        elif s[i] == '>':\n            d += 1\n        else:\n            e += 1\n    if c == 0 or d == 0:\n        print(n)\n    elif e == 0:\n        print(0)\n    else:\n        e = 0\n        s += s[0]\n        for i in range(n):\n            if s[i] == '-':\n                if s[i + 1] == '-':\n                    e += 1\n                else:\n                    e += 2\n        print(e)", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nyn = lambda x: print('Yes') if x else print('No')\nYN = lambda x: print('YES') if x else print('NO')\npl = lambda l: print(' '.join(list(map(str, l))))\nfor _ in range(rn()):\n    n = rn()\n    s = rs()\n    ans = 0\n    modes = set(s)\n    circle = False\n    if len(modes) == 1 or (len(modes) == 2 and '-' in modes):\n        circle = True\n    if circle:\n        ans = n\n    else:\n        for i in range(n):\n            if s[i] == '-' or s[(i + 1) % n] == '-':\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    d = {'<': -1, '-': 0, '>': 1}\n    n = int(input())\n    s = input()\n    cnt = 0\n    if '>' in s and '<' in s:\n        for i in range(n):\n            if s[(i - 1) % n] == '-' or s[i] == '-':\n                cnt += 1\n    else:\n        cnt = n\n    print(cnt)", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = input()\n    t = s.count('-')\n    if s.count('<') + t == n or s.count('>') + t == n:\n        print(n)\n    else:\n        c = 0\n        for i in range(n):\n            if s[i - 1] == '-' or s[i] == '-':\n                c += 1\n        print(c)"]