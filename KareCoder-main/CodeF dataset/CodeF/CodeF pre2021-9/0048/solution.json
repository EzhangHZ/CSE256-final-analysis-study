["from sys import stdin\nimport math\nfor i in range(int(stdin.readline())):\n    table = list(map(int, stdin.readline().split()))\n    X = math.ceil(table[2] / table[0])\n    Y = table[2] - (X - 1) * table[0]\n    print(table[1] * (Y - 1) + X)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(n, m, x):\n    b = x // n\n    if x % n:\n        b += 1\n    a = (x - 1) % n\n    return a * m + b\nt = int(input())\nfor i in range(t):\n    (m, n, x) = get_ints()\n    print(solve(m, n, x))", "for _ in [*open(0)][1:]:\n    (n, m, x) = map(int, _.split())\n    print((x - 1) % n * m + (x - 1) // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "def main():\n    from sys import stdin, stdout\n    for _ in range(int(stdin.readline())):\n        (n, m, x) = map(int, stdin.readline().split())\n        x -= 1\n        col = x // n\n        row = x % n\n        stdout.write(str(row * m + col + 1) + '\\n')\nmain()", "import sys\n\ndef solve(n, m, x):\n    x -= 1\n    col = x // n\n    row = x % n\n    return str(row * m + col + 1)\n\ndef main():\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    res = ''\n    t = int(input())\n    for _ in range(t):\n        (n, m, x) = map(int, input().split())\n        sub_res = solve(n, m, x)\n        res += sub_res + '\\n'\n    print(res)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    c = (x - 1) // n\n    r = (x - 1) % n\n    ans = r * m + c\n    print(ans + 1)", "import sys, math, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    (n, m, x) = map(int, t.split())\n    (i, j) = divmod(x - 1, n)\n    print(j * m + i + 1)", "ans = []\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    r = (x - 1) % n + 1\n    c = -(-x // n)\n    ans.append(str((r - 1) * m + c))\nprint('\\n'.join(ans))", "t = int(input())\nnatija = []\nfor i in range(t):\n    (n, m, x) = input().split(' ')\n    (n, m, x) = (int(n), int(m), int(x))\n    if x % n == 0:\n        satr = n\n        ustun = x // n\n    else:\n        satr = x - x // n * n\n        ustun = x // n + 1\n    natija.append((satr - 1) * m + ustun)\nfor i in range(t):\n    print(natija[i])", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "t = int(input())\nanswers = []\n\ndef ceildiv(a, b):\n    return -(a // -b)\nfor i in range(t):\n    (n, m, x) = input().split()\n    n = int(n)\n    m = int(m)\n    x = int(x)\n    if x == 1 or x == m * n:\n        answers.append(x)\n    else:\n        col = ceildiv(x, n)\n        row = x % n\n        if row == 0:\n            row = n\n        new_index = m * (row - 1) + col\n        answers.append(new_index)\nfor a in answers:\n    print(a)", "import math\nt = int(input())\nA = []\nfor i in range(t):\n    a = [int(p) for p in input().split()]\n    A.append(a)\nfor i in range(t):\n    (n, m, x) = A[i]\n    lmao = math.ceil(x / n)\n    sisa = x % n\n    if sisa == 0:\n        print(m * (n - 1) + lmao)\n    else:\n        print((sisa - 1) * m + lmao)", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef main():\n    tests = int(input().rstrip())\n    for i in range(tests):\n        (row, column, x) = map(int, input().rstrip().split())\n        col_ = ceil(x / row)\n        ro_ = x - row * col_ + row\n        ans = column * (ro_ - 1) + col_\n        output(str(ans))\n        output('\\n')\nmain()", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    c = (x - 1) // n + 1\n    r = (x - 1) % n\n    print(m * r + c)", "from os import path\nfrom io import BytesIO, IOBase\nimport sys\nfrom heapq import heappush, heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, Counter, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input().rstrip()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\n\ndef bo(i):\n    return ord(i) - ord('0')\nfile = 1\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\ndef solve():\n    for _ in range(ii()):\n        (n, m, x) = mi()\n        x1 = ceil(x, n)\n        x %= n\n        if x == 0:\n            x = n\n        print((x - 1) * m + x1)\nif file:\n    if path.exists('tmp/input.txt'):\n        sys.stdin = open('tmp/input.txt', 'r')\n        sys.stdout = open('tmp/output.txt', 'w')\n    else:\n        input = sys.stdin.readline\nsolve()", "from sys import stdin\nimport math\ntestcase = int(stdin.readline())\nfor i in range(testcase):\n    table = list(map(int, stdin.readline().split()))\n    X = math.ceil(table[2] / table[0])\n    Y = table[2] - (X - 1) * table[0]\n    print(table[1] * (Y - 1) + X)", "for g in [*open(0)][1:]:\n    (n, m, x) = map(int, g.split())\n    x = x - 1\n    print(x // n + 1 + x % n * m)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "from math import ceil\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        (n, m, x) = map(int, input().split())\n        c = ceil(x / n)\n        r = (x - 1) % n + 1\n        print(m * (r - 1) + c)\nmain()", "import math\n\ndef main():\n    t = int(input())\n    cases = []\n    for i in range(t):\n        cases.append(list(map(int, input().split())))\n    for case in cases:\n        if case[2] % case[0] == 0:\n            row = case[0]\n        else:\n            row = case[2] % case[0]\n        col = math.ceil(case[2] / case[0])\n        x = row * case[1] - (case[1] - col)\n        print(x)\nmain()", "from sys import stdin\n\ndef A():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        a = [int(x) for x in stdin.readline().split()]\n        (n, m, x) = (a[0], a[1], a[2])\n        l = 1\n        cnt = x // n\n        if cnt * n < x:\n            l = cnt * n + 1\n            cnt += 1\n        else:\n            l = cnt * n - n + 1\n        cnt1 = x - l + 1\n        res = cnt + (cnt1 - 1) * m\n        print(res)\nA()", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "import sys\n\ndef ceil(a, b):\n    return -(-a // b)\n\ndef answer(n, m, x):\n    r = x % n\n    if x % n == 0:\n        r = n\n    c = ceil(x, n)\n    ans = (r - 1) * m + c\n    return ans\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    m = [0] * t\n    x = [0] * t\n    for j in range(t):\n        (n[j], m[j], x[j]) = [int(i) for i in sys.stdin.readline().split()]\n    for j in range(t):\n        print(answer(n[j], m[j], x[j]))\n    return\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    x -= 1\n    i = x % n\n    j = x // n\n    ans = i * m + j\n    print(ans + 1)", "from math import ceil\nfrom sys import stdin\ninput = lambda : stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, m, x) = [int(i) for i in input().split()]\n    c = ceil(x / n)\n    r = x - (c - 1) * n\n    print(m * (r - 1) + c)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    col = x // n if x % n == 0 else x // n + 1\n    row = x % n\n    if row == 0:\n        row = n\n    print((row - 1) * m + col)", "from sys import stdin, stdout\nimport math\n\ndef ii():\n    return int(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return stdin.readline()\nfor _ in range(ii()):\n    (n, m, x) = mi()\n    a = x % n\n    if a == 0:\n        a = n - 1\n    else:\n        a = a - 1\n    b = math.ceil(x / n)\n    print(m * a + b)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m, x) = map(int, input().split())\n        (i, j) = ((x - 1) // n, (x - 1) % n)\n        ans = i + j * m + 1\n        print(ans)\nmain()", "T = int(input())\ninps = []\nfor i in range(T):\n    s = input()\n    inps.append(s)\nfor vals in inps:\n    v = vals.split()\n    n = int(v[0])\n    m = int(v[1])\n    x = int(v[2])\n    x = x - 1\n    j = x // n\n    i = x - n * j\n    y = m * i + j + 1\n    print(y)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    d = x % n if x % n else n\n    if x % n != 0:\n        print(m * (d - 1) + x // n + 1)\n    else:\n        print(m * (d - 1) + x // n)", "import sys\nfor _ in range(int(input())):\n    (n, m, x) = map(int, sys.stdin.readline().split())\n    (c, r) = divmod(x - 1, n)\n    print(m * r + c + 1)", "import sys\nimport math\n\ndef fn(n, m, x):\n    if x // n == x / n:\n        j = x // n\n        i = n\n    else:\n        j = x // n + 1\n        i = x % n\n    x1 = (i - 1) * m + j\n    return x1\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    m = data[l + 2]\n    x = data[l + 3]\n    l = l + 3\n    print(fn(n, m, x))", "import sys\nimport math\ninput = sys.stdin.readline\n\nclass Problem:\n\n    def __init__(self):\n        pass\n\n    def solve(self):\n        t = int(input())\n        for _ in range(t):\n            ans = 0\n            (n, m, x) = map(int, input().split())\n            ans = m * ((x - 1) % n) + math.ceil(x / n)\n            print(ans)\n\ndef main():\n    p = Problem()\n    p.solve()\nmain()", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nN = 20005\nprime = [1] * N\nfor i in range(2, N):\n    if prime[i]:\n        j = i * i\n        while j < N:\n            prime[j] = 0\n            j += i\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, m, x) = list(map(int, stdin.readline().rstrip().split()))\n    (r, c) = (x % n, x // n + 1)\n    if x % n == 0:\n        r = n\n    else:\n        r = x % n\n    if x % n == 0:\n        c = x // n\n    else:\n        c = x // n + 1\n    print((r - 1) * m + c)", "t = int(input())\nsolutions = []\nfor i in range(t):\n    [n, m, x] = map(int, input().split())\n    c = int((x - 1) / n)\n    r = int((x - 1) % n)\n    solutions.append(m * r + c + 1)\nfor i in solutions:\n    print(i)", "def main():\n    from sys import stdin, stdout\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        (n, m, x) = map(int, rl().split())\n        a = (x - 1) % n\n        b = (x - 1) // n\n        r = 1 + m * a + b\n        wl(str(r) + '\\n')\nmain()", "import math\n\ndef find_ans(n, m, x):\n    row = (x - 1) % n\n    col = math.ceil(x / n)\n    return row * m + col\ntest_cases = int(input())\nans = []\nfor i in range(test_cases):\n    (n, m, x) = list(map(int, input().split()))\n    ans.append(find_ans(n, m, x))\nfor i in ans:\n    print(i)", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    (n, m, x) = map(int, stdin.readline().split())\n    a = x // n\n    if x % n != 0:\n        a += 1\n    b = x % n\n    if b == 0:\n        b = n\n    (a, b) = (b - 1, a - 1)\n    c = a * m + b\n    print(c + 1)", "import math\nT = int(input())\n\ndef main(obj):\n    n = obj.n\n    m = obj.m\n    x = obj.x\n    col = int(math.ceil(x / n))\n    if n == 1 or m == 1:\n        return x\n    row = (x - 1) % n + 1\n    return (row - 1) * m + col\n\nclass case:\n\n    def __init__(self, line):\n        self.line = [int(i) for i in line.split()]\n        self.n = self.line[0]\n        self.m = self.line[1]\n        self.x = self.line[2]\ncases = []\nfor i in range(T):\n    line = input()\n    cases.append(case(line))\nfor i in range(T):\n    print(main(cases[i]))", "t = int(input())\nimport math\nans = []\nwhile t:\n    l = list(map(int, input().split()))\n    n = l[0]\n    m = l[1]\n    k = l[2]\n    y = math.ceil(k / n)\n    if k % n == 0:\n        x = n\n    else:\n        x = k % n\n    mm = (x - 1) * m + y\n    ans.append(mm)\n    t = t - 1\nfor i in ans:\n    print(i)", "import math\nimport operator as op\nfrom functools import reduce\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 15\n    return z\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef solve():\n    (n, m, x) = input_list_int()\n    t2 = x % n\n    if t2 == 0:\n        t2 = n\n    t1 = math.ceil(x / n)\n    pr(t2 * m - (m - t1))\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "t = int(input())\nrez = []\nfor i in range(t):\n    (n, m, x) = map(int, input().split())\n    if x % n == 0:\n        stroka = n\n        stolbec = x // n\n    else:\n        stroka = x % n\n        stolbec = x // n + 1\n    rez += [(stroka - 1) * m + stolbec]\nfor i in rez:\n    print(i)", "t = int(input())\nliste = []\nfor _ in range(t):\n    (n, m, x) = [int(i) for i in input().split()]\n    if n * m == x:\n        liste.append(x)\n    else:\n        if x % n == 0:\n            d = n - 1\n            c = x // n\n        else:\n            d = x % n - 1\n            c = x // n + 1\n        a = c + d * m\n        liste.append(a)\nfor x in liste:\n    print(x)", "def solve(n, m, x):\n    row = x % n\n    if row == 0:\n        row = n\n    if n * m == x:\n        return n * m\n    return (x - row) // n + 1 + (row - 1) * m\n(ans, t) = ([], int(input()))\nfor i in range(t):\n    inps = input().split()\n    (n, m, x) = (int(inps[0]), int(inps[1]), int(inps[2]))\n    ans.append(solve(n, m, x))\nfor i in range(t):\n    print(ans[i])", "from math import ceil\n\ndef number(n, m, x):\n    r = (x - 1) % n + 1\n    c = ceil(x / n)\n    num = (r - 1) * m + c\n    return num\nt = int(input())\nanswer = []\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    answer.append(number(n, m, x))\nfor i in answer:\n    print(i)", "import sys\nlines = sys.stdin.readlines()\nnumber_of_testcases = int(lines[0])\nfor i in range(number_of_testcases):\n    (n, m, x) = list(map(int, lines[i + 1].strip().split(' ')))\n    divisor = (x - 1) // n + 1\n    remainder = (x - 1) % n + 1\n    output_now = (remainder - 1) * m + divisor\n    print(output_now)", "def find_cell(queries):\n    pass\n    n = queries[0]\n    m = queries[1]\n    val = queries[2]\n    rem = val % n\n    div = val // n\n    i = -1\n    j = -1\n    if rem == 0 and div != 0:\n        pass\n        i = n - 1\n        j = div - 1\n    elif rem != 0 and div != 0:\n        pass\n        i = rem - 1\n        j = div\n    else:\n        pass\n        i = rem - 1\n        j = 0\n    return i * m + j + 1\ns = int(input().strip())\nqueries = []\nfor i in range(s):\n    k = [int(l) for l in input().strip().split()]\n    queries.append(k)\nfor i in range(s):\n    print(find_cell(queries[i]))", "import math\n\ndef compute(rows, columns, x):\n    j = math.ceil(x / rows)\n    i = x % rows\n    if i == 0:\n        i = rows\n    return (i - 1) * columns + j\n\ndef main():\n    T = int(input())\n    result = []\n    for i in range(T):\n        instr = input().split()\n        r = int(instr[0])\n        c = int(instr[1])\n        x = int(instr[2])\n        result.append(compute(r, c, x))\n    for i in range(0, T):\n        print(result[i])\nmain()", "from math import ceil\nresults = []\ntest = int(input())\nfor case in range(test):\n    crx = input()\n    (row, col, x) = crx.split(' ')\n    col = int(col)\n    row = int(row)\n    x = int(x)\n    row_no = x % row\n    if row_no == 0:\n        row_no = row\n    col_no = ceil(x / row)\n    row_way = col * (row_no - 1) + col_no\n    results.append(row_way)\nfor result in results:\n    print(result)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "T = int(input())\nNMX = [list(map(int, input().split())) for _ in range(T)]\nfor nmx in NMX:\n    (n, m, x) = nmx\n    H = (x - 1) // n\n    W = (x - 1) % n\n    print(W * m + H + 1)", "b = [list(map(int, input().split())) for i in range(int(input()))]\nprint(*[(a[2] - 1) % a[0] * a[1] + (a[2] + a[0] - 1) // a[0] for a in b], sep='\\n')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    c = (x - 1) // n\n    r = (x - 1) % n\n    ans = r * m + c\n    print(ans + 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    c = (x - 1) // n\n    r = (x - 1) % n\n    ans = r * m + c\n    print(ans + 1)", "t = int(input())\nanswer = []\nfor i in range(t):\n    numbers = list(map(int, input().split(' ')))\n    if numbers[2] % numbers[0] == 0:\n        answer.append((numbers[0] - 1) * numbers[1] + numbers[2] // numbers[0])\n    else:\n        answer.append((numbers[2] % numbers[0] - 1) * numbers[1] + numbers[2] // numbers[0] + 1)\nfor i in answer:\n    print(i)", "t = int(input())\nfrom sys import stdin, stdout\nfor i in range(t):\n    (n, m, x) = map(int, stdin.readline().rstrip().split())\n    column = (x - 1) // n\n    row = (x - 1) % n\n    print(row * m + column + 1)", "import math\nimport sys\nfrom functools import reduce\nimport decimal\nsys.setrecursionlimit(10 ** 9)\ndecimal.getcontext().rounding = decimal.ROUND_HALF_UP\n\ndef rounding(n):\n    return int(decimal.Decimal(f'{n}').to_integral_value())\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef map_inp(v_type):\n    return map(v_type, inp().split())\n\ndef list_inp(v_type):\n    return list(map_inp(v_type))\nfor _ in range(int(inp())):\n    (n, m, x) = map_inp(int)\n    temp = (x - 1) // n\n    rem = x % n\n    if rem == 0:\n        print(m * (n - 1) + temp + 1)\n    else:\n        print(m * (rem - 1) + temp + 1)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    print((x - 1) // n + (x - 1) % n * m + 1)", "import math\nanswers = []\n\ndef solve(n, m, x):\n    col = math.ceil(x / n)\n    row = None\n    if x % n == 0:\n        row = n\n    else:\n        row = x % n\n    count = 0\n    count += (row - 1) * m\n    count += col\n    answers.append(count)\nT = int(input())\nwhile T:\n    (n, m, x) = [int(x) for x in input().split()]\n    solve(n, m, x)\n    T -= 1\nfor ans in answers:\n    print(ans)", "import math\nimport sys\nimport collections\nimport bisect\nimport time\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, m, x) = get_ints()\n    col_no = x // n\n    row_no = x - n * (x // n)\n    if row_no == 0:\n        row_no = n\n        col_no -= 1\n    ans = (row_no - 1) * m + col_no + 1\n    print(ans)", "import sys\nimport math\nimport bisect\nimport collections\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inplist():\n    return list(map(int, input().split()))\n\ndef inpstrlist():\n    s = input()\n    return list(s[:len(s)])\n\ndef invr():\n    return map(int, input().split())\n\ndef printlist(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\nfor _ in range(inp()):\n    (n, m, k) = invr()\n    (y, x) = ((k - 1) // n, (k - 1) % n)\n    ans = m * x + y + 1\n    print(ans)", "for s in [*open(0)][1::1]:\n    tem = s.split()\n    for (po, i) in enumerate(tem):\n        tem[po] = int(i)\n    a = tem[2]\n    b = a // tem[0]\n    c = a % tem[0]\n    if c == 0:\n        c = tem[0]\n        b -= 1\n    print((c - 1) * tem[1] + b + 1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i1 in range(t):\n    (n, m, x) = map(int, input().split())\n    cnt = x % n\n    cnt1 = x // n\n    if cnt == 0:\n        print(m * n - m + cnt1)\n        continue\n    k = (cnt - 1) * m + cnt1 + 1\n    print(k)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\ntestcases = int(input())\nfor testcase in range(testcases):\n    arr = get_ints()\n    n = arr[0]\n    m = arr[1]\n    k = arr[2]\n    if n * m == k:\n        print(k)\n        continue\n    remainder = k % n\n    col = k // n\n    if remainder > 0:\n        col += 1\n    row = remainder\n    if remainder == 0:\n        row = n\n    ans = (row - 1) * m + col\n    print(ans)", "num = int(input())\nlsn = []\nlsm = []\nlsx = []\nfor i in range(num):\n    (n, m, x) = map(int, input().split())\n    lsn.append(n)\n    lsm.append(m)\n    lsx.append(x)\nfor i in range(num):\n    a = lsx[i] % lsn[i]\n    if a == 0:\n        a += lsn[i]\n    b = lsx[i] // lsn[i] + 1\n    if lsx[i] % lsn[i] == 0:\n        b -= 1\n    c = (a - 1) * lsm[i] + b\n    print(c)", "c = int(input())\nls = []\nls1 = []\nfor i in range(c):\n    k = input().split()\n    for z in k:\n        ls.append(int(z))\n\ndef main(n, m, x):\n    c = x % n\n    d = x // n + 1\n    if c == 0:\n        q = d + (n - 1) * m - 1\n    else:\n        q = d + (c - 1) * m\n    print(q)\no = len(ls)\nfor i in range(o):\n    if i % 3 == 0:\n        ls1.append(i)\nfor i in ls1:\n    main(ls[i], ls[i + 1], ls[i + 2])", "t = int(input())\ninpl = []\nfor i in range(t):\n    s = tuple(input().split())\n    (n, m, x) = (int(s[0]), int(s[1]), int(s[2]))\n    inpl.append([n, m, x])\nfor i in range(t):\n    n = inpl[i][0]\n    m = inpl[i][1]\n    x = inpl[i][2]\n    if x % n == 0:\n        b = x // n\n    else:\n        b = x // n + 1\n    c = x % n\n    if c == 0:\n        c = n\n    pos = (c - 1) * m + b\n    print(pos)", "import sys\nfrom collections import defaultdict, Counter as CC\nfrom math import sqrt, ceil, floor, log2\nINF = float('inf')\nMOD = 10 ** 9 + 7\nread = lambda : [int(s) for s in sys.stdin.readline().split()]\n\ndef solve():\n    (n, m, x) = read()\n    i = x % n\n    if i == 0:\n        i += n\n    j = (x - i) // n + 1\n    newx = (i - 1) * m + j\n    print(newx)\n_ = 1\n_ = int(input())\nwhile _:\n    solve()\n    _ -= 1", "from sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for t in range(t):\n        nmx = [int(x) for x in stdin.readline().split()]\n        idash = nmx[-1] % nmx[0]\n        if idash == 0:\n            idash = nmx[0]\n        jdash = (nmx[-1] - idash) / nmx[0] + 1\n        y = nmx[1] * (idash - 1) + jdash\n        print(int(y))\nmain()", "n = int(input())\nans = list()\nfor i in range(n):\n    inp = input().split(' ')\n    modulus = int(inp[2]) % int(inp[0])\n    division = int(int(inp[2]) / int(inp[0]))\n    if modulus == 0:\n        modulus = int(inp[0])\n        division -= 1\n    ans.append(int(inp[1]) * (modulus - 1) + (division + 1))\nfor i in ans:\n    print(i, end='\\n')", "n = int(input())\nans = list()\nfor i in range(n):\n    inp = input().split(' ')\n    modulus = int(inp[2]) % int(inp[0])\n    division = int(int(inp[2]) / int(inp[0]))\n    if modulus == 0:\n        modulus = int(inp[0])\n        division -= 1\n    ans.append(int(inp[1]) * (modulus - 1) + (division + 1))\nfor i in ans:\n    print(i, end='\\n')", "n1 = int(input())\narr1 = []\nfor i in range(n1):\n    arr = list(map(int, input().strip().split()))\n    arr1.append(arr)\nfor i in range(n1):\n    n = arr1[i][0]\n    k = arr1[i][1]\n    l = arr1[i][2]\n    x = l // n\n    y = l % n - 1\n    if l > x and y != -1:\n        z = x + 1 + k * y\n        print(z)\n    elif l < x or l == n:\n        z = 1 + k * (l - 1)\n        print(z)\n    elif y == -1 and n * k != l and (n != l):\n        z = x + (n - 1) * k\n        print(z)\n    elif n * k == l:\n        print(l)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "e = int(input())\nt = []\nfor i in range(e):\n    (n, m, x) = map(int, input().split())\n    t.append([n, m, x])\nfor j in range(e):\n    N = t[j][0]\n    M = t[j][1]\n    X = t[j][2]\n    X -= 1\n    d_c = X // N\n    d_r = X % N\n    print(d_r * M + d_c + 1)", "import sys\nimport math\ntc = int(sys.stdin.readline())\nfor _ in range(tc):\n    (n, m, x) = map(int, sys.stdin.readline().rstrip().split())\n    k = math.ceil(x / n)\n    (row, col) = (x - n * (k - 1), k)\n    print((row - 1) * m + col)", "import math, random, time\nfrom collections import *\nfrom itertools import *\n\ndef ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef nr():\n    return int(input())\n\ndef nrs():\n    return [int(i) for i in input().split()]\n\ndef nrss(n):\n    return [nrs() for _ in range(n)]\n\ndef word():\n    return input()\n\ndef words():\n    return [w for w in input().split()]\n\ndef rx():\n    return [s.rstrip() for s in open(0)]\n\ndef nrx(s):\n    return int(s)\n\ndef nrxs(s):\n    return [int(i) for i in s.split()]\n\ndef wrx(s):\n    return s\n\ndef wrxs(s):\n    return [w for w in s.split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef sign(a):\n    return 0 if a == 0 else int(a / abs(a))\n\ndef f(n, m, x):\n    x = x - 1\n    (i, j) = (x % n, x // n)\n    return 1 + j + i * m\nfor s in rx()[1::1]:\n    (n, m, x) = nrxs(s)\n    print(f(n, m, x))", "n_data = int(input())\ndatas = []\nfor i in range(n_data):\n    tab = input().split(' ')\n    datas.append(tab)\n\ndef convert_(data):\n    (n, m, cell) = (int(data[0]), int(data[1]), int(data[2]))\n    cell = cell - 1\n    (x, y) = (cell % n, cell // n)\n    new_pos = x * m + y\n    return new_pos + 1\nfor d in datas:\n    print(convert_(d))", "t = int(input())\nlst = []\nfor i in range(0, t):\n    dim = input()\n    bob = dim.split()\n    n = int(bob[0])\n    m = int(bob[1])\n    x = int(bob[2])\n    column = (x - 1) // n\n    row = (x - 1) % n\n    lst.append(row * m + column + 1)\nfor i in lst:\n    print(i)", "a = input()\ncounter = 0\ntestcases = []\nans = []\nwhile counter < int(a):\n    counter += 1\n    testcases.append(input())\nfor i in testcases:\n    n = int(i.split()[0])\n    m = int(i.split()[1])\n    x = int(i.split()[2])\n    if x % n == 0:\n        a = n\n    else:\n        a = x % n\n    b = (x - a) / n\n    y = int((a - 1) * m + b + 1)\n    ans.append(y)\nfor j in ans:\n    print(j)", "for s in [*open(0)][1:]:\n    (n, m, x) = map(int, s.split())\n    x -= 1\n    print(x % n * m + x // n + 1)", "def solve(n, m, val):\n    x = val // n + 1\n    y = val % n\n    if y == 0:\n        return (n - 1) * m + x - 1\n    return (y - 1) * m + x\nres = []\ncount = int(input())\nfor i in range(count):\n    (n, m, val) = map(int, input().split())\n    res.append(solve(n, m, val))\nfor i in res:\n    print(i)", "t = int(input())\nlis = []\nout = []\nfor i in range(t):\n    lis.append([int(j) for j in input().split()])\n    count = 0\n    if lis[i][2] % lis[i][0] == 0:\n        a = lis[i][0]\n    else:\n        a = lis[i][2] % lis[i][0]\n    if lis[i][2] % lis[i][0] == 0:\n        b = lis[i][2] // lis[i][0]\n    else:\n        b = lis[i][2] // lis[i][0] + 1\n    count = (a - 1) * lis[i][1] + b\n    out.append(count)\nfor i in out:\n    print(i)", "def num_row(n, m, x):\n    r = x % n\n    if r == 0:\n        return n\n    else:\n        return r\n\ndef num_col(n, m, x):\n    r = x % n\n    if r == 0:\n        return x // n\n    else:\n        return x // n + 1\n\ndef check(n, m, x):\n    v = 0\n    row = num_row(n, m, x)\n    col = num_col(n, m, x)\n    v += (row - 1) * m\n    v += col\n    return v\nlistf = []\nt = int(input())\nfor y in range(t):\n    i = input().split()\n    n = int(i[0])\n    m = int(i[1])\n    x = int(i[2])\n    listf.append(check(n, m, x))\nfor g in listf:\n    print(g)", "inputList = []\noutputList = []\nt = int(input())\nfor i in range(t):\n    inputList.append(input())\nfor i in range(len(inputList)):\n    inputList[i] = inputList[i].split()\nfor i in range(len(inputList)):\n    for j in range(3):\n        inputList[i][j] = int(inputList[i][j])\nfor i in range(len(inputList)):\n    if inputList[i][2] % inputList[i][0] != 0:\n        outputList.append(int(inputList[i][2] / inputList[i][0]) + 1 + (inputList[i][2] % inputList[i][0] - 1) * inputList[i][1])\n    else:\n        outputList.append(inputList[i][2] / inputList[i][0] + (inputList[i][0] - 1) * inputList[i][1])\nfor i in outputList:\n    print(int(i))", "from math import ceil\nfor t in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    r = k % n\n    if r == 0:\n        r = n\n    c = ceil(k / n)\n    r -= 1\n    print(r * m + c)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    x = x - 1\n    i = x % n\n    j = x // n\n    a = m * i\n    b = j + 1\n    print(a + b)", "t = int(input())\nfor i in range(0, t):\n    (n, m, x) = [int(x) for x in input().split()]\n    a = (x - 1) % n\n    b = int((x - 1) / n)\n    c = a * m\n    ans = c + b + 1\n    print(ans)"]