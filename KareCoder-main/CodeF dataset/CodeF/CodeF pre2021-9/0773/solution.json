["for s in [*open(0)][2::2]:\n    c = 0\n    D = {0: 1}\n    S = 1\n    for n in map(int, s.split()):\n        c += n\n        (D[c], S) = (S, (2 * S - D.get(c, 0)) % (10 ** 9 + 7))\n    print(D[c])", "for s in [*open(0)][2::2]:\n    C = [0]\n    D = {0: 1}\n    S = 1\n    for n in map(int, s.split()):\n        C += (C[-1] + n,)\n    for n in C[1:-1]:\n        (D[n], S) = (S, (2 * S - D.get(n, 0)) % (10 ** 9 + 7))\n    print(S)", "for s in [*open(0)][2::2]:\n    C = [0]\n    N = 0\n    D = {0: 1}\n    S = 1\n    for n in map(int, s.split()):\n        C += (C[-1] + n,)\n        N += 1\n    for i in range(1, N):\n        (D[C[i]], S) = (S, (2 * S - D.get(C[i], 0)) % (10 ** 9 + 7))\n    print(S)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    B = list(map(int, input().split()))\n    dp = defaultdict(int)\n    (cur, ans) = (0, 0)\n    for (i, b) in enumerate(B):\n        v = 1 if not i else (ans - dp[cur]) % mod\n        ans = (ans + v) % mod\n        dp[cur] = (dp[cur] + v) % mod\n        cur += b\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    bb = [int(x) for x in input().split()]\n    sums_bef_offset = {bb[0]: 1}\n    offset = 0\n    all_sums = 1\n    base = 1000000007\n    result = 0\n    for i in range(1, n):\n        b = bb[i]\n        sums_0 = sums_bef_offset.get(-offset, 0)\n        offset += b\n        prev_all_sums = all_sums\n        sums_bef_offset[b - offset] = prev_all_sums\n        all_sums = (2 * prev_all_sums - sums_0) % base\n    print(all_sums)", "from collections import defaultdict\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    B = list(map(int, input().split()))\n    dp = defaultdict(int)\n    (cur, ans) = (0, 0)\n    for (i, b) in enumerate(B):\n        v = 1 if not i else (ans - dp[cur]) % mod\n        ans = (ans + v) % mod\n        dp[cur] = (dp[cur] + v) % mod\n        cur += b\n    print(ans)", "from collections import defaultdict\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    B = list(map(int, input().split()))\n    dp = defaultdict(int)\n    (cur, ans) = (0, 0)\n    for (i, b) in enumerate(B):\n        v = 1 if not i else (ans - dp[cur]) % mod\n        ans = (ans + v) % mod\n        dp[cur] = (dp[cur] + v) % mod\n        cur += b\n    print(ans)"]