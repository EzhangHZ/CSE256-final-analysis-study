["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    T = list(map(int, input().split()))\n    T.sort()\n    dp = [float('inf')] * (n + 1)\n    dp[n] = abs(T[n - 1] - 2 * n)\n    for i in range(2 * n - 1, 0, -1):\n        for j in range(max(i - n, 1), n):\n            dp[j] = min(dp[j], dp[j + 1] + abs(i - T[j - 1]))\n        dp[-1] = abs(T[n - 1] - i) if i >= n else float('inf')\n    return dp[1]\nfor _ in range(int(input())):\n    print(solve())", "T = int(input())\nfor case in range(T):\n    n = int(input())\n    t = list(map(int, input().split()))\n    t.sort()\n    for k in range(n):\n        t[k] -= k + 1\n    for k in range(n):\n        while t[k] > 0:\n            sum_orig = 0\n            sum_after = 0\n            brkcnt = False\n            for l in range(k, n):\n                sum_orig += abs(t[l])\n                sum_after += abs(t[l] - 1)\n                if sum_orig < sum_after:\n                    brkcnt = True\n                    break\n            if brkcnt == True:\n                break\n            if sum_orig > sum_after:\n                for l in range(k, n):\n                    t[l] -= 1\n            else:\n                break\n    print(sum(map(abs, t)))", "MAXT = 400\n\ndef f(l):\n    n = len(l)\n    l.sort()\n    dp = [0] * (MAXT + 1)\n    for i in range(1, n + 1):\n        t = l[i - 1]\n        dpold = [i for i in dp]\n        dp[i] = dpold[i - 1] + abs(i - t)\n        for j in range(i + 1, MAXT + 1):\n            dp[j] = min(dp[j - 1], dpold[j - 1] + abs(t - j))\n    return min(dp[n:])\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(f(l))", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    lst.sort()\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(n, 0, -1):\n            dp[j] = min(dp[j], dp[j - 1] + abs(lst[j - 1] - i))\n    print(dp[n])", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = [0] + sorted(list(map(int, input().split())))\n    d = [[1000000000.0 for _ in range(n + 1)] for _ in range(2 * n + 1)]\n    d[0][0] = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(0, n + 1):\n            d[i][j] = min(d[i - 1][j], d[i - 1][j - 1] + abs(i - a[j]))\n    ans = 1000000000.0\n    for i in range(1, 2 * n + 1):\n        ans = min(ans, d[i][n])\n    print(ans)", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\ninf = int(1000000000.0)\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    a.sort()\n    dp = [0 for _ in range(n * 2 + 1)]\n    for t in a:\n        ndp = [inf for _ in range(n * 2 + 1)]\n        lo = inf\n        for i in range(n * 2):\n            lo = min(lo, dp[i])\n            ndp[i + 1] = min(ndp[i + 1], lo + abs(i + 1 - t))\n        dp = ndp\n    print(min(dp))", "def main():\n    nums = int(input())\n    a = [int(x) for x in input().split(' ')]\n    tb = [[float('inf')] * (nums + 1) for _ in range(2 * nums + 1)]\n    a.sort()\n    tb[0][0] = 0\n    for t in range(1, 2 * nums + 1):\n        tb[t][0] = 0\n        for n in range(1, nums + 1):\n            if n > t:\n                break\n            get = tb[t - 1][n - 1] + abs(a[n - 1] - t)\n            notget = tb[t - 1][n]\n            tb[t][n] = min(get, notget)\n    rt = [tb[t][nums] for _ in range(len(tb))]\n    print(min(rt))\ncases = int(input())\nfor _ in range(cases):\n    main()", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\ninf = int(1000000000.0)\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    a.sort()\n    dp = [0 for _ in range(n * 2 + 1)]\n    for t in a:\n        ndp = [inf for _ in range(n * 2 + 1)]\n        lo = inf\n        for i in range(n * 2):\n            lo = min(lo, dp[i])\n            ndp[i + 1] = min(ndp[i + 1], lo + abs(i + 1 - t))\n        dp = ndp\n    print(min(dp))", "t_p = int(input())\nfor _ in range(t_p):\n    n = int(input())\n    t = list(map(int, input().split()))\n    t.sort()\n    dp = [[100000 for j in range(2 * n + 2)] for i in range(n + 1)]\n    for i in range(2 * n + 2):\n        dp[0][i] = 0\n    for i in range(1, n + 1):\n        for j in range(i, 2 * n + 2):\n            dp[i][j] = min(dp[i][j], dp[i][j - 1], dp[i - 1][j - 1] + abs(j - t[i - 1]))\n    print(dp[-1][-1])", "n = int(input())\n\ndef badmood(L, j, i):\n    return abs(L[j - 1] - i)\n\ndef main():\n    l = int(input())\n    L = sorted([int(x) for x in input().split(' ')])\n    dp = []\n    for i in range(2 * l + 1):\n        dp.append([0] * (l + 1))\n    for i in range(1, 2 * l + 1):\n        for j in range(1, l + 1):\n            if i == j:\n                dp[i][j] = dp[i - 1][j - 1] + badmood(L, j, i)\n            elif i > j:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1] + badmood(L, j, i))\n    return dp[2 * l][l]\nfor i in range(n):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    lst.sort()\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(n, 0, -1):\n            dp[j] = min(dp[j], dp[j - 1] + abs(lst[j - 1] - i))\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    lst.sort()\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(n, 0, -1):\n            dp[j] = min(dp[j], dp[j - 1] + abs(lst[j - 1] - i))\n    print(dp[n])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = [float('inf')] * (n + 1)\n    d[0] = 0\n    for j in range(1, 2 * n + 1):\n        for k in range(n, 0, -1):\n            d[k] = min(d[k], d[k - 1] + abs(l[k - 1] - j))\n    print(d[n])", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    lst.sort()\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, 2 * n + 1):\n        for j in range(n, 0, -1):\n            dp[j] = min(dp[j], dp[j - 1] + abs(lst[j - 1] - i))\n    print(dp[n])", "def main():\n    nums = int(input())\n    a = [int(x) for x in input().split(' ')]\n    tb = [[float('inf')] * (nums + 1) for _ in range(2 * nums + 1)]\n    a.sort()\n    tb[0][0] = 0\n    for t in range(1, 2 * nums + 1):\n        tb[t][0] = 0\n        for n in range(1, nums + 1):\n            get = tb[t - 1][n - 1] + abs(a[n - 1] - t)\n            notget = tb[t - 1][n]\n            tb[t][n] = min(get, notget)\n    rt = [tb[t][nums] for _ in range(len(tb))]\n    print(min(rt))\ncases = int(input())\nfor _ in range(cases):\n    main()", "test_cases = int(input())\nfor _ in range(test_cases):\n    num_dishes = int(input())\n    tempos = [int(x) for x in input().split()]\n    tempos.sort()\n    min_unp = [99999] * (num_dishes + 1)\n    min_unp[0] = 0\n    aux = 2 * num_dishes + 1\n    for x in range(1, aux):\n        for y in range(num_dishes, 0, -1):\n            a = min_unp[y]\n            b = min_unp[y - 1]\n            c = abs(tempos[y - 1] - x)\n            resp = min(a, b + c)\n            min_unp[y] = resp\n    print(min_unp[num_dishes])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = [float('inf')] * (n + 1)\n    d[0] = 0\n    for j in range(1, 2 * n + 1):\n        for k in range(n, 0, -1):\n            d[k] = min(d[k], d[k - 1] + abs(l[k - 1] - j))\n    print(d[n])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [[100000 for j in range(2 * n + 2)] for k in range(n + 1)]\n    for j in range(2 * n + 2):\n        dp[0][j] = 0\n    for j in range(1, n + 1):\n        for k in range(j, 2 * n + 2):\n            dp[j][k] = min(dp[j][k], dp[j][k - 1], dp[j - 1][k - 1] + abs(k - a[j - 1]))\n    print(dp[-1][-1])", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    inf = 10 ** 6\n    t = sorted(list(map(int, input().split())))\n    d = [[0] * (2 * n + 1) for i in range(n)]\n    d[0][0] = abs(t[0] - 1)\n    for i in range(n):\n        for j in range(1, 2 * n + 1):\n            if i == 0 and j > 0:\n                d[i][j] = min(abs(t[0] - j), d[i][j - 1])\n            elif i >= j:\n                d[i][j] = inf\n            else:\n                d[i][j] = min(d[i - 1][j - 1] + abs(t[i] - j), d[i][j - 1])\n    print(d[n - 1][2 * n])", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    t = list(map(int, input().split()))\n    t = sorted(t)\n    dp = [[0 for i in range(2 * n + 1)] for j in range(n + 1)]\n    for i in range(n):\n        dp[i][2 * n] = 100000\n    for j in reversed(range(2 * n)):\n        for i in reversed(range(n)):\n            opt1 = dp[i][j + 1]\n            opt2 = dp[i + 1][j + 1] + abs(j - t[i])\n            dp[i][j] = min(opt1, opt2)\n    print(dp[0][1])", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 5)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    d = {}\n\n    def helper(curr, t):\n        if curr == n:\n            return 0\n        if t > 2 * n:\n            return 1000000000\n        if (curr, t) in d:\n            return d[curr, t]\n        ans = min(abs(t - arr[curr]) + helper(curr + 1, t + 1), helper(curr, t + 1))\n        d[curr, t] = ans\n        return ans\n    print(helper(0, 1))", "for df in range(int(input())):\n    n = int(input())\n    s = sorted(list(map(int, input().split())))\n    dp = [[0 for j in range(2 * n + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, 2 * n + 1):\n            dp[i][j] = dp[i - 1][j - 1] + abs(s[i - 1] - j)\n            if j > i and dp[i][j] > dp[i][j - 1]:\n                dp[i][j] = dp[i][j - 1]\n    print(dp[n][2 * n])", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    p.sort()\n    d = [[200 * 200 + 1 for i in range(n + 1)] for j in range(2 * (n + 1))]\n    d[0][0] = 0\n    for i in range(0, n):\n        d[i][0] = 0\n    for j in range(1, n + 1):\n        for i in range(1, 2 * n + 2):\n            d[i][j] = min(d[i - 1][j], d[i - 1][j - 1] + abs(p[j - 1] - i))\n    print(d[2 * n + 1][n])", "a = int(input())\nb = 0\narr = []\nsumm = 0\ndpp = []\n\ndef dp(i, t):\n    if i == len(arr):\n        return summ\n    if t >= 2 * b:\n        return float('inf')\n    if dpp[i][t] == -1:\n        dpp[i][t] = min(dp(i + 1, t + 1) + abs(arr[i] - t), dp(i, t + 1))\n    return dpp[i][t]\nfor i in range(a):\n    b = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    dpp = [[-1 for i in range(400)] for j in range(len(arr) + 1)]\n    print(dp(0, 1))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    dp = [[1e+20 for j in range(n + 1)] for i in range(2 * n + 1)]\n    a.sort()\n    dp[1][1] = a[1] - 1\n    for i in range(2, 2 * n + 1):\n        dp[i][1] = min(abs(a[1] - i), dp[i - 1][1])\n    for i in range(2, 2 * n + 1):\n        for j in range(2, min(i + 1, n + 1)):\n            dp[i][j] = min(dp[i - 1][j], abs(i - a[j]) + dp[i - 1][j - 1])\n    print(dp[2 * n][n])\n    t -= 1", "q = int(input().strip())\nfor _ in range(q):\n    n = int(input().strip())\n    t = [int(_) for _ in input().strip().split()]\n    t.sort()\n    N = t[-1] + n\n    d0 = [max(t[0] - x, 0) for x in range(N)]\n    d0[0] = [-1]\n    d = [d0]\n    for i in range(1, n):\n        d += [[-1] * len(d0)]\n        for j in range(i + 1, N):\n            d[i][j] = d[i - 1][j - 1] + abs(t[i] - j)\n            if d[i][j - 1] >= 0:\n                d[i][j] = min(d[i][j], d[i][j - 1])\n    ans = d[n - 1][N - 1]\n    print(ans)", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    cooking_times = list(map(int, input().split()))\n    ct_sorted = sorted(cooking_times)\n    min_total_dp = [100000 for _ in range(n + 1)]\n    min_total_dp[0] = 0\n    for i in range(1, 2 * (n + 1)):\n        for j in range(n, 0, -1):\n            diff = abs(ct_sorted[j - 1] - i)\n            min_total_dp[j] = min(min_total_dp[j], min_total_dp[j - 1] + diff)\n    print(min_total_dp[n])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = [float('inf')] * (n + 1)\n    d[0] = 0\n    for j in range(1, 2 * n + 1):\n        for k in range(n, 0, -1):\n            d[k] = min(d[k], d[k - 1] + abs(l[k - 1] - j))\n    print(d[n])", "def f(arr):\n    arr = list(map(lambda s: s - 1, arr))\n    arr = sorted(arr)\n    dp = [[float('inf')] * (2 * len(arr) + 1) for i in range(0, len(arr) + 1)]\n    dp[0][0] = 0\n    for i in range(0, len(arr) + 1):\n        for j in range(2 * len(arr) - 1):\n            if dp[i][j] != float('inf'):\n                if i < len(arr):\n                    dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + abs(arr[i] - j))\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j])\n    return dp[len(arr)][2 * len(arr) - 1]\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(f(lst))", "for case in range(int(input())):\n    n = int(input())\n    t = sorted(list(map(int, input().split())))\n    dp = [[0 for i in range(2 * n + 1)] for j in range(n + 1)]\n    for i in range(n):\n        dp[i][2 * n] = 100000\n    for j in reversed(range(2 * n)):\n        for i in reversed(range(n)):\n            opt1 = dp[i][j + 1]\n            opt2 = dp[i + 1][j + 1] + abs(j - t[i])\n            dp[i][j] = min(opt1, opt2)\n    print(dp[0][1])", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\ninf = int(1000000000.0)\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    a.sort()\n    dp = [0 for _ in range(n * 2 + 1)]\n    for t in a:\n        ndp = [inf for _ in range(n * 2 + 1)]\n        lo = inf\n        for i in range(n * 2):\n            lo = min(lo, dp[i])\n            ndp[i + 1] = min(ndp[i + 1], lo + abs(i + 1 - t))\n        dp = ndp\n    print(min(dp))", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    dp = [[0 for j in range(2 * n + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, 2 * n + 1):\n            dp[i][j] = dp[i - 1][j - 1] + abs(a[i - 1] - j)\n            if j > i and dp[i][j] > dp[i][j - 1]:\n                dp[i][j] = dp[i][j - 1]\n    print(dp[n][2 * n])", "def main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        t = [int(word) for word in input().rstrip().split()]\n        t.sort()\n        dp = [[float('inf') for j in range(n + 1)] for i in range(0, t[-1] + n)]\n        dp[0][0] = 0\n        for i in range(1, t[-1] + n):\n            dp[i][0] = 0\n            for j in range(1, n + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1] + abs(i - t[j - 1]))\n        print(dp[-1][n])\nmain()", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\ninf = int(1000000000.0)\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    a.sort()\n    dp = [0 for _ in range(n * 2 + 1)]\n    for t in a:\n        ndp = [inf for _ in range(n * 2 + 1)]\n        lo = inf\n        for i in range(n * 2):\n            lo = min(lo, dp[i])\n            ndp[i + 1] = min(ndp[i + 1], lo + abs(i + 1 - t))\n        dp = ndp\n    print(min(dp))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom collections import Counter\n\ndef go(a, pos, val, n, memo):\n    if pos == n:\n        return 0\n    if val > 2 * n:\n        return 10 ** 7\n    if memo[pos][val] != -1:\n        return memo[pos][val]\n    ans = sys.maxsize\n    ans = min(ans, abs(a[pos] - val) + go(a, pos + 1, val + 1, n, memo))\n    ans = min(ans, go(a, pos, val + 1, n, memo))\n    memo[pos][val] = ans\n    return memo[pos][val]\n\ndef solve():\n    n = int(input())\n    memo = [[-1 for i in range(2 * n + 3)] for j in range(n + 5)]\n    a = list(map(int, input().split()))\n    a.sort()\n    print(go(a, 0, 1, n, memo))\nfor _ in range(int(input())):\n    solve()", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\ninf = int(1000000000.0)\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    a.sort()\n    dp = [0 for _ in range(n * 2 + 1)]\n    for t in a:\n        ndp = [inf for _ in range(n * 2 + 1)]\n        lo = inf\n        for i in range(n * 2):\n            lo = min(lo, dp[i])\n            ndp[i + 1] = min(ndp[i + 1], lo + abs(i + 1 - t))\n        dp = ndp\n    print(min(dp))", "def helper(idx, T, n, a, dp):\n    if idx == n:\n        return 0\n    if T == 2 * n + 1:\n        return 100000000.0\n    if dp[idx][T] != -1:\n        return dp[idx][T]\n    ans = float('inf')\n    ans = min(ans, helper(idx, T + 1, n, a, dp))\n    ans = min(ans, abs(a[idx] - T) + helper(idx + 1, T + 1, n, a, dp))\n    dp[idx][T] = ans\n    return ans\n\ndef solve(n, a, dp):\n    return helper(0, 1, n, a, dp)\nt = int(input())\nn = 0\na = None\nwhile t:\n    dp = [[-1] * 402 for _ in range(402)]\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(solve(n, a, dp))\n    t -= 1", "test_num = int(input())\nwhile test_num:\n    test_num -= 1\n    n = int(input())\n    t = [int(time) for time in input().split()]\n    t.sort()\n    dp = [[float('inf') for i in range(2 * n + 1)] for j in range(n + 1)]\n    for i in range(2 * n + 1):\n        dp[0][i] = 0\n    for j in range(1, 2 * n + 1):\n        for i in range(n, 0, -1):\n            op1 = dp[i][j - 1]\n            op2 = dp[i - 1][j - 1] + abs(t[i - 1] - j)\n            dp[i][j] = min(op1, op2)\n    print(dp[n][2 * n])", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    l.sort()\n    k = 400\n    inf = k ** 2\n    tb = [[-1 for j in range(n)] for i in range(k)]\n    for i in range(n - 1, k):\n        tb[i][n - 1] = abs(i + 1 - l[n - 1])\n    for j in range(n - 1):\n        tb[k - 1][j] = inf\n    for j in range(1, n):\n        for i in range(j):\n            tb[i][j] = -2\n    for i in range(k - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            if tb[i][j] == -1:\n                tb[i][j] = min(tb[i + 1][j], abs(i + 1 - l[j]) + tb[i + 1][j + 1])\n    print(tb[0][0])", "N = 402\n\ndef solve(n, a):\n    a.sort()\n    dp = [[float('inf')] * N for _ in range(N)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for x in range(2 * n):\n            dp[i][x + 1] = min(dp[i][x + 1], dp[i][x])\n            if i < n:\n                dp[i + 1][x + 1] = min(dp[i + 1][x + 1], dp[i][x] + abs(a[i] - (x + 1)))\n    return dp[n][2 * n]\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n    t -= 1", "N = 402\n\ndef solve(n, a):\n    a.sort()\n    dp = [[float('inf')] * N for _ in range(N)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for x in range(2 * n):\n            dp[i][x + 1] = min(dp[i][x + 1], dp[i][x])\n            if i < n:\n                dp[i + 1][x + 1] = min(dp[i + 1][x + 1], dp[i][x] + abs(a[i] - (x + 1)))\n    return dp[n][2 * n]\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))\n    t -= 1", "def time(n, t):\n    if n == N:\n        return 0\n    if n < N and t == 2 * N:\n        return 10 ** 7\n    elif dp[n][t] != -1:\n        return dp[n][t]\n    else:\n        dp[n][t] = min(time(n, t + 1), abs(A[n] - t) + time(n + 1, t + 1))\n        return min(time(n, t + 1), abs(A[n] - t) + time(n + 1, t + 1))\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(i) for i in input().split(' ')]\n    A.sort()\n    dp = []\n    for i in range(N + 1):\n        dp += [[-1] * (2 * N + 1)]\n    print(time(0, 1))", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    dp = [[float('inf')] * (2 * n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for j in range(2 * n):\n            if i < n:\n                dp[i + 1][j + 1] = min(dp[i][j] + abs(nums[i] - (j + 1)), dp[i + 1][j + 1])\n            dp[i][j + 1] = min(dp[i][j + 1], dp[i][j])\n    print(dp[n][2 * n])", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ml = 400\n    arr = list(map(int, input().split()))\n    arr.sort()\n    dp = [abs(arr[0] - i) for i in range(ml)]\n    dp[0] = float('inf')\n    for i in range(1, n):\n        for j in range(i + 1, ml):\n            dp[j] = min(dp[j], dp[j - 1])\n        ndp = dp[:]\n        for j in range(i + 1, ml):\n            ndp[j] = dp[j - 1] + abs(arr[i] - j)\n        dp = ndp[:]\n    ans = float('inf')\n    for j in range(n, ml):\n        ans = min(ans, dp[j])\n    print(ans)", "import math\nIP = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(IP())\n    dp = [[float('inf')] * 401 for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(1, 401):\n            if i == 0:\n                dp[i][j] = abs(a[i] - j)\n            else:\n                dp[i][j] = min(dp[i - 1][:j]) + abs(a[i] - j)\n    print(min(dp[n - 1]))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    dp = [[float('inf')] * 401 for _ in range(n + 5)]\n    for i in range(n):\n        for j in range(1, 401):\n            if i == 0:\n                dp[i][j] = abs(l[i] - j)\n            else:\n                dp[i][j] = min(dp[i - 1][:j]) + abs(l[i] - j)\n    print(min(dp[n - 1]))", "def solve(n, t):\n    t = sorted(t)\n    m = max(t) + n\n    dp = [[float('inf') for _ in range(m + 1)] for _ in range(n)]\n    for j in range(1, m + 1):\n        dp[0][j] = abs(j - t[0])\n    for i in range(1, n):\n        for j in range(i + 1, m + 1):\n            dp[i][j] = min(dp[i - 1][:j]) + abs(t[i] - j)\n    return min(dp[-1])\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    t = list(map(int, input().split()))\n    print(solve(n, t))", "import sys\nimport math\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline\n\ndef inar():\n    return [int(el) for el in input().split()]\n\ndef solve(index, time, arr, n, dp):\n    if index == n:\n        return 0\n    if dp[index][time] != -1:\n        return dp[index][time]\n    ans = 10 ** 18\n    for i in range(time, max(time, arr[index]) + 1):\n        ans = min(ans, abs(arr[index] - i) + solve(index + 1, i + 1, arr, n, dp))\n    dp[index][time] = ans\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        dp = [[-1 for j in range(405)] for i in range(200)]\n        n = int(input())\n        arr = inar()\n        arr.sort()\n        print(solve(0, 1, arr, n, dp))\nmain()"]