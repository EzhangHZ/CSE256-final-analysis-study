["import itertools as it\nimport collections as cc\nimport heapq as hp\nimport sys\nI = lambda : list(map(int, input().split()))\nimport operator as op\nfrom functools import reduce\n(n, m) = I()\nw = I()\nde = [0] * n\nfor i in range(n):\n    de[i] = [0]\npre = [0] * m\nvisi = [0] * m\nfor i in range(m):\n    (x, y) = I()\n    x -= 1\n    y -= 1\n    pre[i] = [x, y]\n    de[x][0] += 1\n    de[y][0] += 1\n    de[x].append(i)\n    de[y].append(i)\nan = []\nte = []\nans = []\nfor i in range(n):\n    if de[i][0] <= w[i]:\n        te.append(i)\nwhile len(te) > 0:\n    tem = te.pop()\n    for i in range(1, len(de[tem])):\n        fr = de[tem][i]\n        if not visi[fr]:\n            visi[fr] = 1\n            ans.append(fr + 1)\n            fo = pre[fr][0] + pre[fr][1] - tem\n            de[fo][0] -= 1\n            if de[fo][0] == w[fo]:\n                te.append(fo)\nif len(ans) == m:\n    print('ALIVE')\n    print(*ans[::-1])\nelse:\n    print('DEAD')", "from collections import defaultdict\n(n, m) = list(map(int, input().split()))\nW = list(map(int, input().split()))\nfavorites = []\nfor i in range(m):\n    (x, y) = list(map(int, input().split()))\n    favorites.append([x - 1, y - 1])\nfriends = defaultdict(list)\nfor (i, (x, y)) in enumerate(favorites):\n    friends[x].append(i)\n    friends[y].append(i)\nS = [len(friends[i]) for i in range(n)]\nfood_items = set()\nfor i in range(len(S)):\n    if S[i] <= W[i]:\n        food_items.add(i)\nresolved_food_items = set()\nresolved_friends = set()\norder = []\nwhile food_items:\n    food = food_items.pop()\n    resolved_food_items.add(food)\n    for friend in friends[food]:\n        if friend not in resolved_friends:\n            order.append(friend)\n            resolved_friends.add(friend)\n        for i in favorites[friend]:\n            S[i] -= 1\n            if i not in resolved_food_items and S[i] <= W[i]:\n                food_items.add(i)\nif len(order) == m:\n    print('ALIVE')\n    print(' '.join([str(i + 1) for i in order[::-1]]))\nelse:\n    print('DEAD')", "import itertools as it\nimport collections as cc\nimport heapq as hp\nimport sys\nI = lambda : list(map(int, input().split()))\nimport operator as op\nfrom functools import reduce\n(n, m) = I()\nw = I()\nde = [0] * n\nfor i in range(n):\n    de[i] = [0]\npre = [0] * m\nvisi = [0] * m\nfor i in range(m):\n    (x, y) = I()\n    x -= 1\n    y -= 1\n    pre[i] = [x, y]\n    de[x][0] += 1\n    de[y][0] += 1\n    de[x].append(i)\n    de[y].append(i)\nan = []\nte = []\nans = []\nfor i in range(n):\n    if de[i][0] <= w[i]:\n        te.append(i)\nwhile len(te) > 0:\n    tem = te.pop()\n    for i in range(1, len(de[tem])):\n        fr = de[tem][i]\n        if not visi[fr]:\n            visi[fr] = 1\n            ans.append(fr + 1)\n            fo = pre[fr][0] + pre[fr][1] - tem\n            de[fo][0] -= 1\n            if de[fo][0] == w[fo]:\n                te.append(fo)\nif len(ans) == m:\n    print('ALIVE')\n    print(*ans[::-1])\nelse:\n    print('DEAD')"]