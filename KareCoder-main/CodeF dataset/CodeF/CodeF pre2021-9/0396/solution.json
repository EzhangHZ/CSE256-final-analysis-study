["from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from collections import *\nfor s in [*open(0)][2::2]:\n    l = s.split()\n    n = len(l)\n    print(max(max(Counter(l).values()) * 2 - n, n % 2))", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nM = lambda : map(int, stdin.readline().strip().split())\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    return ''.join(list(map(str, a)))\n\ndef solve():\n    n = I()\n    a = L()\n    d = Counter(a)\n    m = max(d.values())\n    if 2 * m > n:\n        print(2 * m - n)\n    else:\n        print(n % 2)\nfor _ in range(I()):\n    solve()", "def main():\n    from sys import stdin, stdout\n    from collections import Counter\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        n = int(rl().strip())\n        c = Counter(rl().strip().split())\n        a = c.most_common(1)[0][1]\n        if a * 2 <= n:\n            wl(str(n % 2) + '\\n')\n        else:\n            wl(str(2 * a - n) + '\\n')\nmain()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque, Counter\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    mx = max(Counter(arr).values())\n    if mx >= n // 2 + n % 2:\n        print(2 * mx - n)\n    else:\n        print(n % 2)", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        C = Counter(a)\n        max_num = max(C, key=C.get)\n        if C[max_num] * 2 > n:\n            ans = C[max_num] * 2 - n\n        elif n % 2 == 1:\n            ans = 1\n        else:\n            ans = 0\n        print(ans)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for num in a:\n        if num in dic:\n            dic[num] += 1\n        else:\n            dic[num] = 1\n    k = max(dic.values())\n    if k <= (n + 1) // 2:\n        print(1 if n & 1 else 0)\n    else:\n        print(2 * k - n)", "import math\nfrom sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    m = max(d.values())\n    if m * 2 <= n:\n        if n % 2 == 1:\n            print(1)\n        else:\n            print(0)\n    else:\n        print(m * 2 - n)", "import sys\nimport math\nimport itertools\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    dat = list(map(int, input().split()))\n    dat.sort()\n    v = dat[0]\n    count = 1\n    res = []\n    for i in range(1, n):\n        if dat[i] == v:\n            count += 1\n        else:\n            res.append(count)\n            v = dat[i]\n            count = 1\n    res.append(count)\n    res.sort()\n    if len(res) == 1:\n        print(res[0])\n    else:\n        sm = sum(res[:-1])\n        if sm < res[-1]:\n            print(res[-1] - sm)\n        elif sm == res[-1]:\n            print(0)\n        else:\n            print(sum(res) % 2)\nfor _ in range(int(input())):\n    solve()", "import sys\nfrom os import path\n\ndef open_inputs():\n    if path.exists('input.txt'):\n        sys.stdin = open('input.txt', 'r')\n        sys.stdout = open('output.txt', 'w')\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef printf(_s):\n    sys.stdout.write(str(_s))\n\ndef main():\n    open_inputs()\n    cases = get_int()\n    for case in range(cases):\n        get_int()\n        numbers = get_ints()\n        numbers.sort()\n        n = int(len(numbers) / 2)\n        numbers_one = numbers[n:]\n        numbers_two = numbers[:n]\n        matches = 0\n        while len(numbers_one) and len(numbers_two):\n            one = numbers_one.pop()\n            two = numbers_two.pop()\n            if one == two:\n                matches += 2\n        matches += len(numbers_one) + len(numbers_two)\n        printf(str(matches) + '\\n')\nmain()", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    count = Counter(input().split())\n    print(max(2 * count.most_common(1)[0][1] - n, n & 1))", "from collections import deque\nfrom heapq import heappop, heappush\nimport sys\nlines = list(map(str.strip, sys.stdin.readlines()))\nfor line in lines[2::2]:\n    nums = list(map(int, line.split(' ')))\n    counts = {}\n    for x in nums:\n        counts[x] = 1 if x not in counts else counts[x] + 1\n    biggest = max([counts[key] for key in counts])\n    totalwob = sum([counts[key] for key in counts]) - biggest\n    bmt = biggest - totalwob\n    print(bmt if bmt > 0 else 1 if len(nums) % 2 == 1 else 0)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    if max(freq.values()) <= (n + 1) // 2:\n        if n % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(2 * max(freq.values()) - n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a.count(a[n // 2]) <= n // 2:\n        if n % 2 == 1:\n            print(1)\n        else:\n            print(0)\n    else:\n        print(2 * a.count(a[n // 2]) - n)", "from collections import Counter\nfor s in [*open(0)][2::2]:\n    l = [*Counter(map(int, s.split())).values()]\n    m = max(l)\n    n = sum(l)\n    print(max(2 * m - n, n & 1))", "from collections import defaultdict\n\ndef func():\n    n = int(input())\n    a_dict = defaultdict(int)\n    a_list = input().split()\n    for i in a_list:\n        a_dict[i] += 1\n    if len(a_dict) < 2:\n        return n\n    freq = list(a_dict.values())\n    freq.sort(reverse=True)\n    y = n\n    x = freq[0]\n    if x > y - x:\n        ans = 2 * x - y\n    elif y & 1:\n        ans = 1\n    else:\n        ans = 0\n    return ans\nt = int(input())\nans = []\nfor i in range(t):\n    ans.append(func())\nfor i in range(len(ans)):\n    print(ans[i])", "from collections import Counter, defaultdict, deque\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(_) for _ in input().split()]\n    c = Counter(arr)\n    m = max(c.items(), key=lambda x: x[1])\n    if n % 2:\n        n -= 1\n        print(max(1, 1 + n - 2 * (n - m[1] + 1)))\n    else:\n        print(max(0, n - 2 * (n - m[1])))\ntt = int(input())\nfor test in range(tt):\n    solve()", "import sys\nfrom collections import Counter\n\ndef solve(nums):\n    c = Counter(nums)\n    max_ = max(c.values())\n    s = sum(c.values())\n    if 2 * max_ - s >= 0:\n        return 2 * max_ - s\n    if s % 2 == 1:\n        return 1\n    return 0\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    line = sys.stdin.readline().strip()\n    n = list(map(int, line.split()))[0]\n    line = sys.stdin.readline().strip()\n    nums = list(map(int, line.split()))\n    print(solve(nums))", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef solve():\n    n = II()\n    a = LI()\n    cnt_dict = collections.Counter(a)\n    cnt_max = max(cnt_dict.values())\n    if cnt_max > n // 2:\n        return cnt_max - (n - cnt_max)\n    else:\n        return n % 2\n\ndef main():\n    t = II()\n    res = list()\n    for _ in range(t):\n        res.append(solve())\n    for ans in res:\n        print(ans)\n    return 0\nmain()", "def solve():\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    c = 0\n    i = 0\n    h = n // 2 + n % 2\n    while i < n // 2:\n        if a[i] != a[h + i]:\n            c += 2\n        i += 1\n    return n - c\nt = int(input())\nwhile t > 0:\n    print(solve())\n    t -= 1", "for i in [*open(0)][2::2]:\n    a = i.split()\n    a.sort()\n    tem = a[0]\n    ma = 0\n    b = 0\n    for j in a:\n        if j == tem:\n            b += 1\n        else:\n            if ma < b:\n                ma = b\n            b = 1\n            tem = j\n    if ma < b:\n        ma = b\n    if ma > len(a) / 2:\n        print(2 * ma - len(a))\n    elif len(a) % 2:\n        print(1)\n    else:\n        print(0)", "import sys\ninputlines = sys.stdin.readlines()\nnumber_of_testcases = int(inputlines[0].strip())\n\ndef make_freq_dict(input_list):\n    freq_dict = {}\n    for i in input_list:\n        if i not in freq_dict:\n            freq_dict[i] = 0\n        freq_dict[i] += 1\n    return freq_dict\nfor i in range(number_of_testcases):\n    n = int(inputlines[2 * i + 1].strip())\n    integers = list(map(int, inputlines[2 * i + 2].strip().split(' ')))\n    freq_dict = make_freq_dict(integers)\n    values_list = list(freq_dict.values())\n    values_list.sort(reverse=True)\n    length_values_list = len(values_list)\n    if length_values_list == 1:\n        print(n)\n        continue\n    sum_other_than_maximum = 0\n    for j in range(1, length_values_list):\n        sum_other_than_maximum += values_list[j]\n    if values_list[0] <= sum_other_than_maximum:\n        if n % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(values_list[0] - sum_other_than_maximum)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(set(a))\n    if len(s) == 1:\n        print(n)\n        continue\n    elif len(s) == n:\n        print(n % 2)\n        continue\n    else:\n        d = {}\n        for i in a:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        maxx = max(d.values())\n        if n < 2 * maxx:\n            print(2 * maxx - n)\n        elif n % 2 == 1:\n            print(1)\n        else:\n            print(0)", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    d = {}\n    for i in input().split():\n        d[i] = d.get(i, 0) + 1\n    M = max(d.values())\n    S = sum(d.values())\n    if 2 * M > S:\n        print(2 * M - S)\n    else:\n        print(n % 2)", "import sys\nimport math\nimport random\nfrom queue import PriorityQueue as PQ\nfrom bisect import bisect_left as BSL\nfrom bisect import bisect_right as BSR\nfrom collections import OrderedDict as OD\nfrom collections import Counter\nfrom itertools import permutations\nmod = 1000000007\nsys.setrecursionlimit(1000000)\ntry:\n    sys.stdin = open('actext.txt', 'r')\n    OPENFILE = 1\nexcept:\n    pass\n\ndef get_ints():\n    return map(int, input().split())\n\ndef palindrome(s):\n    mid = len(s) // 2\n    for i in range(mid):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef check(i, n):\n    if 0 <= i < n:\n        return True\n    else:\n        return False\n\ndef solve(arr, n):\n    mp = {}\n    for i in arr:\n        if i not in mp:\n            mp[i] = 0\n        mp[i] += 1\n    maxmp = max(mp.values())\n    ans = 0\n    if n % 2 != 0:\n        maxmp -= 1\n        n -= 1\n        ans += 1\n    ans += max(0, 2 * (maxmp - n // 2))\n    print(ans)\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(get_ints())\n    solve(arr, n)", "def solve():\n    n = int(input())\n    t = list(map(int, input().split()))\n    numbers = {}\n    for e in t:\n        if e in numbers:\n            numbers[e] += 1\n        else:\n            numbers[e] = 1\n    mx = max(numbers.values())\n    if mx >= (n + 1) // 2:\n        print(mx - (n - mx))\n    else:\n        print(n % 2)\ntests = int(input())\nfor _ in range(tests):\n    solve()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = sorted(list(map(int, input().split())))\n        if n % 2 == 0:\n            cnt = n\n            for i in range(n // 2):\n                if a[i] != a[i + n // 2]:\n                    cnt -= 2\n            print(cnt)\n        else:\n            cnt = n\n            for i in range(n // 2):\n                if a[i] != a[i + n // 2 + 1]:\n                    cnt -= 2\n            print(cnt)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    (i, c) = (0, 0)\n    for j in range((n + 1) // 2, n):\n        if a[i] != a[j]:\n            c += 1\n        i += 1\n    print(n - c * 2)", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    a = Counter(list(map(int, input().split())))\n    mx = max(a.values())\n    if mx * 2 >= n:\n        print(2 * mx - n)\n    elif n % 2 == 1:\n        print(1)\n    else:\n        print(0)", "import math, random, time\nfrom collections import *\nfrom itertools import *\n\ndef ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef nr():\n    return int(input())\n\ndef nrs():\n    return [int(i) for i in input().split()]\n\ndef nrss(n):\n    return [nrs() for _ in range(n)]\n\ndef word():\n    return input()\n\ndef words():\n    return [w for w in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef sign(a):\n    return 0 if a == 0 else int(a / abs(a))\n\ndef f(arr):\n    arr.sort()\n    antal = 0\n    n = len(arr)\n    orig = n\n    if n % 2 == 1:\n        arr.pop(n // 2)\n        n -= 1\n    n2 = n // 2\n    for i in range(n2):\n        if arr[i] != arr[i + n2]:\n            antal += 2\n    return orig - antal\nfor i in range(nr()):\n    n = nrs()\n    print(f(nrs()))", "import collections\nimport math\nimport sys\nfrom functools import reduce\nimport decimal\nsys.setrecursionlimit(10 ** 9)\ndecimal.getcontext().rounding = decimal.ROUND_HALF_UP\n\ndef rounding(n):\n    return int(decimal.Decimal(f'{n}').to_integral_value())\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef map_inp(v_type):\n    return map(v_type, inp().split())\n\ndef list_inp(v_type):\n    return list(map_inp(v_type))\nfor _ in range(int(inp())):\n    n = int(inp())\n    arr = list_inp(int)\n    dic = {}\n    for item in arr:\n        if item not in dic:\n            dic[item] = 1\n        else:\n            dic[item] += 1\n    counter_arr = []\n    for item in dic.keys():\n        counter_arr.append(dic[item])\n    counter_arr.sort(reverse=True)\n    if len(counter_arr) == 1:\n        print(n)\n    elif counter_arr[0] > n - counter_arr[0]:\n        print(n - 2 * (n - counter_arr[0]))\n    else:\n        print(n % 2)", "def helper(a, n):\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    m = max(d.values())\n    if m <= (n + 1) // 2:\n        return n % 2\n    else:\n        return m - (n - m)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(input().split(' '))\n    print(helper(a, n))", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    d = dict()\n    max_count = 1\n    for i in map(int, input().split()):\n        if i in d:\n            d[i] += 1\n            if max_count < d[i]:\n                max_count = d[i]\n        else:\n            d[i] = 1\n    if n - max_count >= max_count:\n        print(n % 2)\n    else:\n        print(max_count - (n - max_count))", "def solve(arr):\n    freqs = dict()\n    for num in arr:\n        if num not in freqs:\n            freqs[num] = 1\n        else:\n            freqs[num] += 1\n    max_freq = max(freqs.values())\n    return max(len(arr) % 2, max_freq - (len(arr) - max_freq))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = [int(s) for s in input().split()]\n        print(solve(arr))\nmain()", "import sys\nimport math\n\ndef fn(n, a):\n    s = dict()\n    s1 = list(set(a))\n    for i in range(len(s1)):\n        s[s1[i]] = 0\n    for i in range(n):\n        s[a[i]] = s[a[i]] + 1\n    cnt = s.values()\n    m = max(cnt)\n    if n % 2 == 0 and m <= n / 2:\n        return 0\n    elif n % 2 == 0 and m > n / 2:\n        return 2 * m - n\n    elif n % 2 != 0 and m <= n // 2:\n        return 1\n    else:\n        return 2 * m - n\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = int(data[0])\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    a = data[l + 2:l + 2 + n]\n    l = l + 1 + n\n    print(fn(n, a))", "for _ in range(int(input())):\n    (n, d) = (int(input()), {})\n    for i in input().split():\n        d[i] = d[i] + 1 if i in d.keys() else 1\n    m = max(d.values())\n    print(2 * m - n if m > n // 2 else n & 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mx = max(list(d.values()))\n    if 2 * mx - n <= 0:\n        if n % 2 == 0:\n            ans = 0\n        else:\n            ans = 1\n    else:\n        ans = 2 * mx - n\n    print(ans)", "t = int(input())\nl1 = []\nfor i in range(t):\n    n = int(input())\n    x = input()\n    l1.append(list(map(int, x.split())))\nfor i in l1:\n    dic = {}\n    for j in i:\n        if j not in dic:\n            dic[j] = 1\n        else:\n            dic[j] += 1\n    d = dic.values()\n    e = max(d)\n    if e <= len(i) / 2:\n        if len(i) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    elif e > len(i) / 2:\n        u = e - (len(i) - e)\n        print(u)", "t = int(input())\nl1 = []\nfor i in range(t):\n    n = int(input())\n    x = input()\n    l1.append(list(map(int, x.split())))\nfor i in l1:\n    dic = {}\n    for j in i:\n        if j not in dic:\n            dic[j] = 1\n        else:\n            dic[j] += 1\n    d = dic.values()\n    e = max(d)\n    if e <= len(i) / 2:\n        if len(i) % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    elif e > len(i) / 2:\n        u = e - (len(i) - e)\n        print(u)", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    d = {}\n    for i in input().split():\n        d[i] = d.get(i, 0) + 1\n    print(max(2 * max(d.values()) - n, n % 2))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for x in a:\n        freq[x] = freq.get(x, 0) + 1\n    mx = max(freq.values())\n    if mx > n // 2:\n        print(mx - (n - mx))\n    elif n % 2 == 1:\n        print(1)\n    else:\n        print(0)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\n\ndef func():\n    n = int(input())\n    for _ in range(n):\n        m = int(input())\n        nums = map(int, input().split())\n        d = defaultdict(int)\n        for c in nums:\n            d[c] += 1\n        l = sorted(d.values())\n        if m % 2 == 0:\n            if l[-1] > m - l[-1]:\n                print(l[-1] - m + l[-1])\n            else:\n                print(0)\n        elif l[-1] > m - l[-1]:\n            print(l[-1] - m + l[-1])\n        else:\n            print(1)\nfunc()", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = max(Counter(l).values())\n    print(n % 2 if m <= n - m + 1 else m - (n - m))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    if n % 2 == 0:\n        j = int(n / 2)\n    else:\n        j = int(n / 2) + 1\n    count = 0\n    while j < n:\n        if a[i] != a[j]:\n            count += 2\n            j += 1\n            i += 1\n        else:\n            j += 1\n    print(n - count)", "for t in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    c = {}\n    for x in a:\n        if x in c:\n            c[x] += 1\n        else:\n            c[x] = 1\n    m = max(c.values())\n    print(2 * m - n if m > n // 2 else n % 2)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    count = Counter(a)\n    max_occr = max(count.values())\n    if max_occr > n // 2:\n        print(abs(2 * max_occr - n))\n    elif n % 2 == 1:\n        print(1)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    d = dict()\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    mx = 0\n    for i in d:\n        if d[i] > mx:\n            mx = d[i]\n    if mx >= n - mx:\n        print(n - 2 * (n - mx))\n    elif n % 2 != 0:\n        print(1)\n    else:\n        print(0)", "import sys\ninput = sys.stdin.readline\n\nclass Problem:\n\n    def __init__(self):\n        pass\n\n    def solve(self):\n        ans = 0\n        n = int(input())\n        A = list(map(int, input().split()))\n        count = {}\n        maxcount = 0\n        for a in A:\n            if a not in count:\n                count[a] = 0\n            count[a] += 1\n            maxcount = max(maxcount, count[a])\n        ans = max(n % 2, 2 * maxcount - n)\n        print(ans)\n\ndef main():\n    p = Problem()\n    t = int(input())\n    while t:\n        p.solve()\n        t -= 1\nmain()", "for k in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    max_count = max(d.values())\n    if max_count > n // 2:\n        ans = max_count - (n - max_count)\n        print(ans)\n    elif n % 2 == 0:\n        print(0)\n    else:\n        print(1)", "for u in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for num in a:\n        if num in dic:\n            dic[num] += 1\n        else:\n            dic[num] = 1\n    k = max(dic.values())\n    if k <= (n + 1) // 2:\n        print(1 if n & 1 else 0)\n    else:\n        print(2 * k - n)", "from collections import Counter\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = Counter(a).values()\n        Max = max(count)\n        print(n - 2 * (n - Max)) if Max > n // 2 else print(n % 2)\nmain()", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    dict = {}\n    n = int(input())\n    L = input().split()\n    Max = 0\n    for x in L:\n        if x not in dict.keys():\n            dict[x] = 1\n        else:\n            dict[x] = dict[x] + 1\n        if dict[x] > Max:\n            Max = dict[x]\n    if 2 * Max > n:\n        print(2 * Max - n)\n    elif n % 2 == 0:\n        print(0)\n    else:\n        print(1)", "import sys\nimport math\n\ndef ans(x):\n    dito = {}\n    for i in x:\n        if i not in dito:\n            dito[i] = 1\n        else:\n            dito[i] += 1\n    arr = list(dito.values())\n    if len(x) % 2 == 0:\n        sol = 0\n    else:\n        sol = 1\n    maxi = max(arr)\n    return max(sol, maxi - (len(x) - maxi))\nfor _ in range(int(input())):\n    n = int(input())\n    x = [int(n) for n in input().split()]\n    print(ans(x))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    h = n // 2 + n % 2\n    cnt = n\n    for i in range(n // 2):\n        if a[i] != a[i + h]:\n            cnt -= 2\n    print(cnt)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(Counter(a).values())\n    mx = b.pop()\n    sum_rest = sum(b)\n    ans = mx - sum_rest\n    if ans < 0:\n        ans %= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    my_key = {}\n    for c in a:\n        if c in my_key.keys():\n            my_key[c] += 1\n        else:\n            my_key[c] = 0\n    z = max(my_key.values()) + 1\n    if z > n - z:\n        print(2 * z - n)\n    else:\n        print(n % 2)", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        bloki = []\n        a = sorted(list(map(int, input().split())))\n        por = a[0]\n        lic = 0\n        for liczba in a:\n            if liczba == por:\n                lic += 1\n            else:\n                bloki.append(lic)\n                lic = 1\n                por = liczba\n            bloki.append(lic)\n        maks = max(bloki)\n        resz = n - maks\n        if n % 2 != 0:\n            if maks > 0:\n                print(1 + max(0, maks - 1 - resz))\n            else:\n                print(1 + maks(0, maks + 1 - resz))\n        else:\n            print(max(0, maks - resz))\nmain()", "for t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n\n    def solve():\n        cnt = 0\n        i = 0\n        h = n // 2 + n % 2\n        while i < n // 2:\n            if a[i] != a[h + i]:\n                cnt += 2\n            i += 1\n        return n - cnt\n    print(solve())", "for t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n\n    def solve():\n        cnt = 0\n        i = 0\n        h = n // 2 + n % 2\n        for i in range(n // 2):\n            if a[i] != a[h + i]:\n                cnt += 2\n        return n - cnt\n    print(solve())", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    boro = max(Counter(ar).values())\n    print(n % 2 if boro <= n - boro + 1 else boro - (n - boro))", "import sys\nfrom collections import Counter\nfrom heapq import *\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nMOD = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    D = Counter(A)\n    B = [-v for v in D.values()]\n    heapify(B)\n    while len(B) >= 2:\n        a = heappop(B)\n        b = heappop(B)\n        if a + 1 != 0:\n            heappush(B, a + 1)\n        if b + 1 != 0:\n            heappush(B, b + 1)\n    res = sum(B) * -1\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in a:\n        if d.get(i) != None:\n            d[i] += 1\n        else:\n            d[i] = 1\n    m = max(list(d.values()))\n    if m > (n + 1) // 2:\n        ans = m - (n - m)\n    else:\n        ans = n % 2\n    print(ans)\n    t -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    h = max(Counter(l).values())\n    print(n % 2 if h <= n - h + 1 else h - (n - h))", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    mx = 0\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n        mx = max(mx, d[i])\n    if mx <= n - mx:\n        print(n & 1)\n        return\n    else:\n        print(mx - n + mx)\nfor t in range(int(input())):\n    charming()", "from collections import Counter\nfor iii in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(set(arr)) == 1:\n        print(len(arr))\n        continue\n    if len(set(arr)) == len(arr):\n        if n % 2:\n            print(1)\n        else:\n            print(0)\n        continue\n    ss = dict(Counter(arr))\n    rr = list(ss.values())\n    maxi = max(rr)\n    print(max(n % 2, 2 * maxi - n))", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    dic = {}\n    for i in lis:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    m = max(list(dic.values()))\n    if n % 2 == 1 and m <= n // 2 + 1:\n        ans = 1\n    elif n % 2 == 0 and m <= n // 2:\n        ans = 0\n    else:\n        ans = m - (n - m)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    maxi = max(Counter(list(map(int, input().strip().split()))).values())\n    maxi -= n - maxi\n    print(max(n % 2, maxi))", "n = int(input())\nX = []\nfor i in range(n):\n    m = int(input())\n    X.append(list(map(int, input().split(' '))))\nfor x in X:\n    counter = {}\n    counter[0] = 0\n    has_max_count = 0\n    result = 0\n    for (i, y) in enumerate(x):\n        if y in counter:\n            counter[y] += 1\n        else:\n            counter[y] = 1\n        if counter[y] > counter[has_max_count]:\n            has_max_count = y\n            result = 0\n        if y == has_max_count and counter[y] > (i + 1) // 2:\n            result += 1\n        elif result > 0:\n            result -= 1\n    if result == 0 and i % 2 == 0:\n        result = 1\n    print(result)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    d = Counter(numbers)\n    maxx = max(d.values())\n    if 2 * maxx <= n:\n        print(0 if n % 2 == 0 else 1)\n    else:\n        print(2 * maxx - n)", "for _ in range(int(input())):\n    n = int(input())\n    l3 = sorted(list(map(int, input().split())))\n    a = 1\n    l = []\n    for i in range(n - 1):\n        if l3[i] == l3[i + 1]:\n            a += 1\n        else:\n            l.append(a)\n            a = 1\n    else:\n        l.append(a)\n    print(max(max(l) * 2 - n, n % 2))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {}\n    for i in a:\n        if i in s:\n            s[i] += 1\n        else:\n            s[i] = 1\n    f = 0\n    for i in s.values():\n        if i > n // 2:\n            f = 1\n            break\n    if f == 0:\n        print(n % 2)\n    else:\n        print(i * 2 - n)", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        l = list(input().split())\n        d = {}\n        for i in l:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        mx = 0\n        for i in d:\n            if d[i] > mx:\n                mx = d[i]\n        print(max(n % 2, 2 * mx - n))\nexcept:\n    pass", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split(' ')]\n    d = Counter(a)\n    count = list(d.values())\n    count.sort()\n    l = len(count)\n    lst = count.pop()\n    if sum(count) < lst:\n        ans = n - 2 * sum(count)\n    else:\n        ans = n % 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    d = Counter(ar)\n    e = max(d.values())\n    if e == n:\n        print(n)\n    elif e > n // 2:\n        print(e - (n - e))\n    elif n % 2 == 0:\n        print(0)\n    else:\n        print(1)", "def transform(list_num):\n    mem = {}\n    for el in list_num:\n        if el in mem.keys():\n            mem[el] += 1\n        else:\n            mem[el] = 1\n    min_val = len(list_num) % 2\n    max_val = max(mem.values())\n    diff = max_val - (len(list_num) - max_val)\n    if diff > 0:\n        return diff\n    else:\n        return min_val\nnum = int(input())\nfor i in range(num):\n    s = input()\n    list_num = [int(el) for el in input().split()]\n    print(transform(list_num))", "import collections\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = collections.Counter([int(i) for i in input().split()])\n    mx = max(a.values())\n    if mx > n // 2:\n        print(n - 2 * (n - mx))\n    else:\n        print(n % 2)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    m = dict(Counter(l))\n    c = 0\n    for (i, j) in m.items():\n        c = max(c, j)\n    if c <= n - c:\n        if n & 1:\n            print(1)\n        else:\n            print(0)\n    else:\n        print(c - (n - c))", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    d = {}\n    for i in input().split():\n        d[i] = d.get(i, 0) + 1\n    print(max(2 * max(d.values()) - n, n % 2))", "from heapq import heapify, heappush, heappop\n\ndef transformation(numbers):\n    counter = {}\n    for n in numbers:\n        counter[n] = counter.get(n, 0) + 1\n    items = [v * -1 for v in counter.values()]\n    heapify(items)\n    while len(items) > 1:\n        (peek1, peek2) = (heappop(items), heappop(items))\n        peek1 += 1\n        peek2 += 1\n        if peek1 != 0:\n            heappush(items, peek1)\n        if peek2 != 0:\n            heappush(items, peek2)\n    if len(items) > 0:\n        return -1 * items[0]\n    return 0\nresults = []\nfor _ in range(int(input())):\n    _ = input()\n    arr = [int(e) for e in input().split(' ')]\n    results.append(str(transformation(arr)))\nprint('\\n'.join(results))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    count = Counter(input().split())\n    k = count.most_common(1)[0][1]\n    print(max(2 * k - n, n & 1))", "from collections import defaultdict\n\ndef func():\n    n = int(input())\n    for _ in range(n):\n        m = int(input())\n        nums = map(int, input().split())\n        d = defaultdict(int)\n        max_value = 0\n        for c in nums:\n            d[c] += 1\n            max_value = max(max_value, d[c])\n        if m % 2 == 0:\n            if max_value > m - max_value:\n                print(max_value - m + max_value)\n            else:\n                print(0)\n        elif max_value > m - max_value:\n            print(max_value - m + max_value)\n        else:\n            print(1)\nfunc()", "import math\nimport operator as op\nfrom functools import reduce\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 15\n    return z\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    tmp = defaultdict(int)\n    for i in a:\n        tmp[i] += 1\n    b = list(tmp.values())\n    b.sort(reverse=True)\n    mx = b[0]\n    for i in range(1, len(b)):\n        mx -= b[i]\n    pr(max(mx, n % 2))\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(Counter(a).values())\n    last = b.pop()\n    sumb = sum(b)\n    ans = last - sumb\n    if sumb > last:\n        ans %= 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    count = Counter(s)\n    maxc = 0\n    for i in count:\n        if maxc < count[i]:\n            maxc = count[i]\n    print((1 if len(s) % 2 == 1 else 0) if maxc * 2 <= len(s) else maxc * 2 - len(s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mp = {}\n    for x in a:\n        if x in mp:\n            mp[x] += 1\n        else:\n            mp[x] = 1\n    b = list(mp.values())\n    b.sort(reverse=True)\n    res = n % 2\n    if b[0] * 2 > n:\n        d = n - b[0]\n        res = n - 2 * d\n    print(res)", "kk = int(input())\nfor i in range(kk):\n    l = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    ans = len(lst)\n    if len(lst) % 2 == 0:\n        ans1 = lst[:len(lst) // 2]\n        ans2 = lst[len(lst) // 2:]\n        for i in range(len(lst) // 2):\n            if ans1[i] != ans2[i]:\n                ans -= 2\n    else:\n        ans1 = lst[:len(lst) // 2]\n        ans2 = lst[len(lst) // 2 + 1:]\n        for i in range(len(lst) // 2):\n            if ans1[i] != ans2[i]:\n                ans -= 2\n    print(ans)", "test_n = int(input())\n\nclass node:\n\n    def __init__(self, v):\n        self.v = v\n        self.amount = 0\nfor _ in range(test_n):\n    n = int(input())\n    a = map(int, input().split(' '))\n    m = {}\n    l = []\n    for i in a:\n        if m.get(i):\n            m[i] += 1\n        else:\n            m[i] = 1\n    max_val = max(m.values())\n    if max_val >= n - max_val:\n        print(2 * max_val - n)\n        continue\n    if n % 2 == 1:\n        print(1)\n    else:\n        print(0)", "from collections import Counter\ncases = int(input())\nwhile cases:\n    cases -= 1\n    num = int(input())\n    arr = list(map(int, input().split()))\n    count = Counter(arr)\n    mx = max(count.values())\n    dif = num - mx\n    if dif >= mx:\n        if num % 2 == 0:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(mx - dif)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dic = {}\n    for j in l:\n        if j in dic:\n            dic[j] += 1\n        else:\n            dic[j] = 1\n    k = list(dic.values())\n    k.sort()\n    z = k[-1]\n    if 2 * z - n <= 0:\n        if n % 2 == 0:\n            c = 0\n        else:\n            c = 1\n    else:\n        c = 2 * z - n\n    print(c)", "import math as mt\n\ndef mostFrequent(arr, n):\n    Hash = dict()\n    for i in range(n):\n        if arr[i] in Hash.keys():\n            Hash[arr[i]] += 1\n        else:\n            Hash[arr[i]] = 1\n    max_count = 0\n    res = -1\n    for i in Hash:\n        if max_count < Hash[i]:\n            res = i\n            max_count = Hash[i]\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    t = mostFrequent(arr, n)\n    d = arr.count(t)\n    if d > n // 2:\n        print(n - 2 * (n - d))\n    elif n % 2 != 0:\n        print(1)\n    else:\n        print(0)"]