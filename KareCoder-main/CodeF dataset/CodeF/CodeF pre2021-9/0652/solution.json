["def ceil(x, y):\n    if x <= 0:\n        return 0\n    return (x + y - 1) // y\n\ndef solve():\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    rem = 0\n    su = 0\n    ans = ceil(c, a[0])\n    for (i, v) in enumerate(a[:n - 1]):\n        d = ceil(b[i] - rem, v)\n        su += d + 1\n        rem += d * v - b[i]\n        ans = min(ans, su + ceil(c - rem, a[i + 1]))\n    print(ans)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, c) = (int(x) for x in input().split())\n        L1 = [int(x) for x in input().split()]\n        L2 = [int(x) for x in input().split()]\n        print(solver(n, c, L1, L2))\n\ndef solver(n, c, L1, L2):\n    minDays = math.ceil(c / L1[0])\n    days = 0\n    money = 0\n    for i in range(n - 1):\n        if days >= minDays:\n            return minDays\n        daysToBuy = math.ceil((c - money) / L1[i])\n        if days + daysToBuy < minDays:\n            minDays = days + daysToBuy\n        daysToNextJob = math.ceil((L2[i] - money) / L1[i])\n        if daysToNextJob > 0:\n            days += daysToNextJob + 1\n            money += daysToNextJob * L1[i] - L2[i]\n        else:\n            days += 1\n            money -= L2[i]\n    daysToBuy = math.ceil((c - money) / L1[n - 1])\n    if days + daysToBuy < minDays:\n        minDays = days + daysToBuy\n    return minDays\nmain()", "def helper(a, b, c):\n    pool = [0] * len(a)\n    pool[0] = (c - 1) // a[0] + 1\n    d = 0\n    m = 0\n    for i in range(1, len(a)):\n        d += (b[i - 1] - m - 1) // a[i - 1] + 1 + 1\n        m = (m - b[i - 1]) % a[i - 1]\n        tc = c - m\n        pool[i] = d + (tc - 1) // a[i] + 1\n    return min(pool)\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    print(helper(a, b, c))", "def helper(a, b, c):\n    pool = [0] * len(a)\n    pool[0] = (c - 1) // a[0] + 1\n    d = 0\n    m = 0\n    for i in range(1, len(a)):\n        d += (b[i - 1] - m - 1) // a[i - 1] + 1 + 1\n        m = (m - b[i - 1]) % a[i - 1]\n        tc = c - m\n        pool[i] = d + (tc - 1) // a[i] + 1\n    return min(pool)\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    print(helper(a, b, c))", "import bisect\nimport collections\nimport functools\nimport itertools\nimport math\nimport heapq\nimport random\nimport string\n\ndef repeat(_func=None, *, times=1):\n\n    def decorator(func):\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                func(*args, **kwargs)\n        return wrapper\n    if _func is None:\n        return decorator\n    else:\n        return decorator(_func)\n\ndef unpack(func=int):\n    return map(func, input().split())\n\ndef l_unpack(func=int):\n    return list(map(func, input().split()))\n\ndef getint():\n    return int(input())\n\ndef getmatrix(rows):\n    return [list(map(int, input().split())) for _ in range(rows)]\n\ndef display_matrix(mat):\n    for i in range(len(mat)):\n        print(mat[i])\n\n@repeat(times=int(input()))\ndef main():\n    (n, c) = unpack()\n    salary = l_unpack()\n    course = l_unpack()\n    money = days_spent = 0\n    mdays = float('inf')\n    for i in range(n):\n        days_spent += 1\n        d = mceil((c - money) / salary[i])\n        mdays = min(mdays, d + days_spent)\n        if i == n - 1:\n            break\n        if money >= course[i]:\n            money -= course[i]\n            continue\n        d = mceil((course[i] - money) / salary[i])\n        days_spent += d\n        money = money + d * salary[i] - course[i]\n    print(mdays - 1)\nmceil = math.ceil\nMOD = 10 ** 9 + 7\nmain()", "def solve():\n    lst = input().split()\n    n = int(lst[0])\n    c = int(lst[1])\n    a = list(map(lambda x: int(x), input().split()))\n    b = list(map(lambda x: int(x), input().split()))\n    mint = [0] * n\n    extr = [0] * n\n    for i in range(0, n - 1):\n        delned = b[i] - extr[i]\n        tiempo = (delned + a[i] - 1) // a[i]\n        delned -= tiempo * a[i]\n        mint[i + 1] = mint[i] + tiempo + 1\n        extr[i + 1] = -delned\n    minn = -1\n    for i in range(n):\n        aans = (c - extr[i] + a[i] - 1) // a[i]\n        if minn == -1:\n            minn = aans\n        minn = min(minn, aans + mint[i])\n    print(minn)\ncaso = int(input())\nwhile caso > 0:\n    caso -= 1\n    solve()", "def solve(A, B, n, c):\n    days = 0\n    wallet = 0\n    ans = float('inf')\n    for job in range(n):\n        wage = A[job]\n        left = max(c - wallet, 0)\n        tim = (left + wage - 1) // wage\n        ans = min(ans, days + tim)\n        if job == n - 1:\n            break\n        course_fee = B[job]\n        left = max(course_fee - wallet, 0)\n        tim = (left + wage - 1) // wage\n        days += tim + 1\n        wallet += wage * tim - course_fee\n    return ans\nfor case in range(int(input())):\n    (n, c) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = solve(A, B, n, c)\n    print(ans)", "import math\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(N, C, A, B):\n    ans = float('inf')\n    (curr_day, money) = (0, 0)\n    for i in range(len(B)):\n        ans = min(ans, max(0, math.ceil((C - money) / A[i])) + curr_day)\n        m = max(0, math.ceil((B[i] - money) / A[i]))\n        money += m * A[i] - B[i]\n        curr_day += 1 + m\n    ans = min(ans, max(0, math.ceil((C - money) / A[-1])) + curr_day)\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, C) = map(int, input().split())\n    A = get_ints()\n    B = get_ints()\n    print(solve(N, C, A, B))", "from math import ceil\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    wages = [*map(int, input().split())]\n    promos = [*map(int, input().split())]\n    ans = 1000000000\n    days = 0\n    cash = 0\n    for i in range(n):\n        ans = min(ans, days + ceil((c - cash) / wages[i]))\n        if i < n - 1:\n            days_to_promo = ceil((promos[i] - cash) / wages[i])\n            days += days_to_promo + 1\n            cash = cash + days_to_promo * wages[i] - promos[i]\n    print(ans)", "I = lambda : [*map(int, input().split())]\n\ndef out(x):\n    print(str(x))\n\ndef solve():\n    (n, c) = I()\n    a = I()\n    b = I()\n    best_d = 1000000009\n    current_m = 0\n    current_d = 0\n    for i in range(n):\n        wait = int((c - current_m + a[i] - 1) / a[i])\n        best_d = min(best_d, wait + current_d)\n        if i == n - 1:\n            continue\n        new_days = int(max(0, b[i] - current_m + a[i] - 1) / a[i])\n        current_m += new_days * a[i]\n        current_m -= b[i]\n        current_d += new_days + 1\n    out(best_d)\n(t,) = I()\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    money = 0\n    ans = 0\n    arr = []\n    arr.append((c + a[0] - 1) // a[0])\n    for i in range(1, n):\n        cnt = (b[i - 1] + a[i - 1] - 1 - money) // a[i - 1] + 1\n        ans += cnt\n        money += (cnt - 1) * a[i - 1] - b[i - 1]\n        arr.append(ans + (c - money + a[i] - 1) // a[i])\n    print(min(arr))", "from math import ceil\nimport sys\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    money = 0\n    days = 0\n    ans = sys.maxsize\n    for i in range(n):\n        ans = min(days + ceil((c - money) / a[i]), ans)\n        if i == len(b):\n            break\n        r = ceil((b[i] - money) / a[i])\n        money += r * a[i] - b[i]\n        days += r + 1\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    b.append(0)\n    ans = 1e+18\n    cur_money = 0\n    spend_days = 0\n    for i in range(n):\n        ans = min(ans, spend_days + ceil(max(0, c - cur_money) / a[i]))\n        days_for_upgrade = ceil(max(0, b[i] - cur_money) / a[i])\n        spend_days += days_for_upgrade + 1\n        cur_money = cur_money + days_for_upgrade * a[i] - b[i]\n    print(ans)", "import math\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(N, C, A, B):\n    money = 0\n    ans = float('inf')\n    last = 0\n    for i in range(len(B)):\n        ans = min(ans, math.ceil((C - money) / A[i]) + last)\n        m = math.ceil((B[i] - money) / A[i])\n        money += m * A[i] - B[i]\n        last += 1 + m\n    ans = min(ans, math.ceil((C - money) / A[-1]) + last)\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, C) = map(int, input().split())\n    A = get_ints()\n    B = get_ints()\n    print(solve(N, C, A, B))", "import sys\nimport math\nimport bisect\nimport functools\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom heapq import heappush, heappop, heapify\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport collections\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nnum_cases = intinp()\nfor _ in range(num_cases):\n    (n, c) = intarr()\n    A = intarr()\n    B = intarr()\n    mn = 1e309\n    has = 0\n    days = 0\n    for i in range(n - 1):\n        finish = math.ceil((c - has) / A[i])\n        mn = min(finish + days, mn)\n        upgrade = math.ceil((B[i] - has) / A[i])\n        if upgrade > 0:\n            days += upgrade\n            has += upgrade * A[i]\n        days += 1\n        has -= B[i]\n    finish = math.ceil((c - has) / A[-1])\n    mn = min(finish + days, mn)\n    print(mn)", "import math\n\ndef saving_duration(x, y):\n    return 0 if x <= 0 else math.ceil(x / y)\nt = int(input())\nfor _ in range(t):\n    (n, c) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    time = 0\n    earn = 0\n    ans = float('inf')\n    for i in range(n - 1):\n        ans = min(ans, time + saving_duration(c - earn, a[i]))\n        tt = saving_duration(b[i] - earn, a[i])\n        time += tt\n        time += 1\n        earn += tt * a[i]\n        earn -= b[i]\n    ans = min(ans, time + saving_duration(c - earn, a[-1]))\n    print(ans)", "times = int(input())\nwhile times > 0:\n    times -= 1\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    cnt = 0\n    now = 0\n    ans = (c + a[0] - 1) // a[0]\n    for i in range(1, n):\n        if now >= c:\n            break\n        t = (b[i - 1] - now + a[i - 1] - 1) // a[i - 1]\n        now += t * a[i - 1] - b[i - 1]\n        cnt += t + 1\n        tmp = (c - now + a[i] - 1) // a[i] + cnt\n        ans = min(ans, tmp)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    c = int(c)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = list()\n    temp = math.ceil(b[0] / a[0])\n    remain = a[0] * math.ceil(b[0] / a[0]) - b[0]\n    ans.append(math.ceil(c / a[0]))\n    for i in range(1, n - 1):\n        ans.append(math.ceil((c - remain) / a[i]) + temp + 1)\n        temp += math.ceil((b[i] - remain) / a[i]) + 1\n        remain = a[i] * math.ceil((b[i] - remain) / a[i]) - b[i] + remain\n    temp += math.ceil((c - remain) / a[-1]) + 1\n    print(min(min(ans), temp))", "from math import ceil\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    b.append(0)\n    ans = 1e+18\n    cur_money = 0\n    spend_days = 0\n    for i in range(n):\n        ans = min(ans, spend_days + ceil(max(0, c - cur_money) / a[i]))\n        days_for_upgrade = ceil(max(0, b[i] - cur_money) / a[i])\n        spend_days += days_for_upgrade + 1\n        cur_money = cur_money + days_for_upgrade * a[i] - b[i]\n    print(ans)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    mn = 1e309\n    has = 0\n    days = 0\n    for i in range(n - 1):\n        finish = (c - has + A[i] - 1) // A[i]\n        mn = min(finish + days, mn)\n        upgrade = (B[i] - has + A[i] - 1) // A[i]\n        if upgrade > 0:\n            days += upgrade\n            has += upgrade * A[i]\n        days += 1\n        has -= B[i]\n    finish = (c - has + A[-1] - 1) // A[-1]\n    mn = min(finish + days, mn)\n    print(mn)", "def ceil(a, b):\n    if a % b:\n        return a // b + 1\n    else:\n        return a // b\nfor testis in range(int(input())):\n    (n, c) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ans = 10 ** 20\n    curr = 0\n    time = 0\n    for i in range(n):\n        cans = ceil(c - curr, a[i])\n        ans = min(ans, time + cans)\n        if i != n - 1:\n            time_for_next_pos = ceil(b[i] - curr, a[i])\n            curr = curr + (a[i] * time_for_next_pos - b[i])\n            time += time_for_next_pos + 1\n    print(ans)", "for i in range(int(input())):\n    (m, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(m):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != m - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "import math\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().strip().split(' '))\n    a1 = list(map(int, input().strip().split(' ')))\n    b1 = list(map(int, input().strip().split(' ')))\n    l = []\n    k1 = 0\n    reserve = 0\n    for j in range(n):\n        if j == 0:\n            l.append(math.ceil(c / a1[j]))\n        else:\n            k1 += math.ceil((b1[j - 1] - reserve) / a1[j - 1]) + 1\n            reserve += math.ceil((b1[j - 1] - reserve) / a1[j - 1]) * a1[j - 1] - b1[j - 1]\n            l.append(k1 + math.ceil((c - reserve) / a1[j]))\n    print(min(l))", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = [None] * n\n    dp[0] = (0, 0)\n    ans = max((c + a[0] - 1) // a[0], 0)\n    for i in range(1, n):\n        (d, h) = dp[i - 1]\n        s = a[i - 1]\n        dn = max((b[i - 1] - h + s - 1) // s, 0)\n        h += s * dn - b[i - 1]\n        d += dn + 1\n        dp[i] = (d, h)\n        dn = max((c - h + a[i] - 1) // a[i], 0)\n        ans = min(ans, d + dn)\n    print(ans)\nfor i in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "import math\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().strip().split(' '))\n    a1 = list(map(int, input().strip().split(' ')))\n    b1 = list(map(int, input().strip().split(' ')))\n    l = []\n    k1 = 0\n    reserve = 0\n    for j in range(n):\n        if j == 0:\n            l.append(math.ceil(c / a1[j]))\n        else:\n            k1 += math.ceil((b1[j - 1] - reserve) / a1[j - 1]) + 1\n            reserve += math.ceil((b1[j - 1] - reserve) / a1[j - 1]) * a1[j - 1] - b1[j - 1]\n            l.append(k1 + math.ceil((c - reserve) / a1[j]))\n    print(min(l))", "from math import *\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    d = 0\n    b = 0\n    out = 10 ** 9\n    for i in range(n - 1):\n        out = min(out, ceil(max(0, c - b) / arr[i]) + d)\n        if brr[i] - b > 0:\n            d += ceil((brr[i] - b) / arr[i])\n            b += ceil((brr[i] - b) / arr[i]) * arr[i]\n        d += 1\n        b -= brr[i]\n    out = min(out, ceil(max(0, c - b) / arr[-1]) + d)\n    print(out)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport sys\nimport copy\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, c) = get_ints()\n    a = get_array()\n    b = get_array()\n    mini = inf\n    cnt = 0\n    tot = 0\n    mini = min(mini, ceil(c / a[0]))\n    for i in range(1, len(a)):\n        days = max(0, ceil((b[i - 1] - tot) / a[i - 1]))\n        tot += days * a[i - 1]\n        cnt += days + 1\n        tot -= b[i - 1]\n        mini = min(mini, cnt + ceil((c - tot) / a[i]))\n    print(mini)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "import sys\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef ceil(n, d):\n    if n % d == 0:\n        return n // d\n    else:\n        return 1 + n // d\n\ndef main():\n    t = inp()\n    for i in range(0, t):\n        [n, c] = inlt()\n        solve(n, c, inlt(), inlt())\n\ndef req_days(arv_asset, earn, cost):\n    rem = max(0, cost - arv_asset)\n    return ceil(rem, earn)\n\ndef solve(n, c, a, b):\n    arv_day = [0 for i in range(0, n)]\n    arv_asset = [0 for i in range(0, n)]\n    for i in range(0, n - 1):\n        clct_days = ceil(max(0, b[i] - arv_asset[i]), a[i])\n        arv_day[i + 1] = arv_day[i] + clct_days + 1\n        arv_asset[i + 1] = arv_asset[i] + clct_days * a[i] - b[i]\n    min_days = req_days(0, a[0], c)\n    for i in range(1, n):\n        min_days = min(min_days, arv_day[i] + req_days(arv_asset[i], a[i], c))\n    output('{}\\n'.format(min_days))\nmain()", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arrA = list(map(int, input().split()))\n    arrB = list(map(int, input().split()))\n    daysToPos = 0\n    curBal = 0\n    ans = float('inf')\n    for pos in range(n):\n        if curBal >= c:\n            ans = min(ans, daysToPos)\n            break\n        else:\n            ans = min(ans, daysToPos + (c - curBal) // arrA[pos] + (1 if (c - curBal) % arrA[pos] else 0))\n        if pos < n - 1:\n            if arrB[pos] >= c:\n                break\n            if curBal >= arrB[pos]:\n                daysToPos += 1\n                curBal -= arrB[pos]\n            else:\n                daysToNext = (arrB[pos] - curBal) // arrA[pos] + (1 if (arrB[pos] - curBal) % arrA[pos] else 0)\n                daysToPos += daysToNext + 1\n                curBal += daysToNext * arrA[pos] - arrB[pos]\n    print(ans)", "for i in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    x = 0\n    d1 = -1\n    for i in range(n):\n        d2 = d + max(0, -((x - c) // a[i]))\n        if d1 == -1 or d2 < d1:\n            d1 = d2\n        if i != n - 1:\n            d += max(0, -((x - b[i]) // a[i])) + 1\n            x = x + max(0, -((x - b[i]) // a[i])) * a[i] - b[i]\n    print(d1)", "import math\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    days = 0\n    dp = [(0, 0)]\n    cost = 0\n    i = 0\n    while True:\n        if i < n - 1 and b[i] <= c:\n            x = math.ceil((b[i] - cost) / a[i])\n            days += x\n            dp.append((cost + x * a[i], days))\n        else:\n            x = math.ceil((c - cost) / a[i])\n            days += x\n            break\n        if dp[-1][0] >= c:\n            break\n        else:\n            cost = dp[-1][0] - b[i]\n            days += 1\n            i += 1\n    min_days = days\n    for i in range(1, len(dp)):\n        min_days = min(min_days, dp[i][1] + math.ceil((c - dp[i][0]) / a[i - 1]))\n    print(min_days)", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom math import ceil\nfor _ in range(rn()):\n    (n, c) = rns()\n    a = rl()\n    b = rl()\n    b.insert(0, 0)\n    dp = n * [0]\n    time = n * [0]\n    rem = n * [0]\n    dp[0] = ceil(c / a[0])\n    for i in range(1, n):\n        time[i] = time[i - 1] + ceil((b[i] - rem[i - 1]) / a[i - 1]) + 1\n        rem[i] = a[i - 1] - (b[i] - rem[i - 1]) % a[i - 1]\n        if rem[i] == a[i - 1]:\n            rem[i] = 0\n        poss = ceil((c - rem[i]) / a[i]) + time[i]\n        dp[i] = min(dp[i - 1], poss)\n    print(dp[-1])", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom math import ceil\nfor _ in range(rn()):\n    (n, c) = rns()\n    a = rl()\n    b = rl()\n    b.insert(0, 0)\n    dp = n * [0]\n    time = n * [0]\n    rem = n * [0]\n    dp[0] = ceil(c / a[0])\n    for i in range(1, n):\n        time[i] = time[i - 1] + ceil((b[i] - rem[i - 1]) / a[i - 1]) + 1\n        rem[i] = a[i - 1] - (b[i] - rem[i - 1]) % a[i - 1]\n        if rem[i] == a[i - 1]:\n            rem[i] = 0\n        poss = ceil((c - rem[i]) / a[i]) + time[i]\n        dp[i] = min(dp[i - 1], poss)\n    print(min(dp))", "import sys\ninput = sys.stdin.readline\ncas = int(input())\nwhile cas:\n    cas -= 1\n    (n, c) = map(int, input().split())\n    d = [[0, 0] for i in range(n)]\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    tmp = 0\n    for i in range(1, n):\n        tt = (b[i - 1] - tmp + a[i - 1] - 1) // a[i - 1]\n        d[i][0] = d[i - 1][0] + tt + 1\n        d[i][1] = tmp + a[i - 1] * tt - b[i - 1]\n        tmp = d[i][1]\n    ans = 20 ** 9\n    for i in range(n):\n        ans = min(ans, d[i][0] + (c - d[i][1] + a[i] - 1) // a[i])\n    print(ans)", "def cl(a, b):\n    return a // b + int(bool(a % b))\nfor _ in range(int(input())):\n    (n, c) = [int(x) for x in input().split(' ')]\n    a = [int(x) for x in input().split(' ')]\n    b = [int(x) for x in input().split(' ')]\n    assert len(a) == n and len(b) == n - 1\n    dp = [None] * n\n    res = [None] * n\n    dp[0] = 0\n    res[0] = 0\n    for i in range(1, n):\n        x = cl(max(0, b[i - 1] - res[i - 1]), a[i - 1])\n        dp[i] = dp[i - 1] + x + 1\n        res[i] = res[i - 1] - b[i - 1] + x * a[i - 1]\n        assert res[i] >= 0\n    ans = dp[0] + cl(max(0, c - res[0]), a[0])\n    for i in range(n):\n        ans = min(ans, dp[i] + cl(max(0, c - res[i]), a[i]))\n    print(ans)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\n\ndef rarray():\n    return [int(i) for i in input().split()]\n\ndef up(n, m):\n    return (n + m - 1) // m\nti = 1\nti = int(input())\nfor ii in range(ti):\n    (n, c) = rarray()\n    a = rarray()\n    b = rarray()\n    day = [[inf, inf] for i in range(n)]\n    day[0] = [0, 0]\n    m = a[0]\n    ans = up(c, a[0])\n    for i in range(1, n):\n        d = up(max(0, b[i - 1] - day[i - 1][1]), m)\n        day[i][0] = day[i - 1][0] + d + 1\n        day[i][1] = day[i - 1][1] + d * a[i - 1] - b[i - 1]\n        m = max(m, a[i])\n        ans = min(ans, day[i][0] + up(c - day[i][1], a[i]))\n    print(ans)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\n\ndef rarray():\n    return [int(i) for i in input().split()]\n\ndef up(n, m):\n    return (n + m - 1) // m\nti = 1\nti = int(input())\nfor ii in range(ti):\n    (n, c) = rarray()\n    a = rarray()\n    b = rarray()\n    day = [[inf, inf] for i in range(n)]\n    day[0] = [0, 0]\n    m = a[0]\n    ans = up(c, a[0])\n    for i in range(1, n):\n        d = up(max(0, b[i - 1] - day[i - 1][1]), m)\n        day[i][0] = day[i - 1][0] + d + 1\n        day[i][1] = day[i - 1][1] + d * a[i - 1] - b[i - 1]\n        m = max(m, a[i])\n        ans = min(ans, day[i][0] + up(c - day[i][1], a[i]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, c) = [int(num) for num in input().strip().split(' ')]\n    pos = [int(num) for num in input().strip().split(' ')]\n    move = [int(num) for num in input().strip().split(' ')]\n    res = int(1000000000000.0)\n    x = 0\n    d = 0\n    for i in range(n - 1):\n        a = pos[i]\n        res = min(d + max(c - x, 0) // a + int(max(c - x, 0) % a != 0), res)\n        d += max(move[i] - x, 0) // a + int(max(move[i] - x, 0) % a != 0) + 1\n        x = x + a * (max(move[i] - x, 0) // a + int(max(move[i] - x, 0) % a != 0)) - move[i]\n    res = min(d + max(c - x, 0) // pos[n - 1] + int(max(c - x, 0) % pos[n - 1] != 0), res)\n    print(res)"]