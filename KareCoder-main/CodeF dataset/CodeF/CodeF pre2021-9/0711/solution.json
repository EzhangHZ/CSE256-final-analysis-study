["def compact(array):\n    result = []\n    array.append(-1)\n    for i in range(len(array) - 1):\n        if array[i] != array[i + 1]:\n            result.append(array[i])\n    return result\nn = int(input())\na = list(map(int, input().split()))\ndata = compact(a)\nresult = 0\nlast_group = -1\nbetween = []\nlast = {}\nfor (i, el) in enumerate(data):\n    if el not in last:\n        result += 1\n    else:\n        piece = data[last[el] + 1:i]\n        if len(set(piece)) != len(piece):\n            result += 1\n        else:\n            prev = last[data[i - 1]]\n            last = {data[i - 1]: prev}\n    last[el] = i\nprint(result)", "n = int(input())\naa = [int(x) for x in input().split()]\nchoices = set()\ni = 0\nsegcount = 0\n(c1, c0) = (-1, -1)\nstate = None\nwhile i < n:\n    a = aa[i]\n    if len(choices) < 2:\n        if a in choices:\n            pass\n        else:\n            choices.add(a)\n            segcount += 1\n    elif a in choices:\n        if state == a:\n            pass\n        elif i >= 1 and aa[i] == aa[i - 1]:\n            pass\n        else:\n            choices.clear()\n            choices.add(a)\n            choices.add(aa[i - 1])\n            state = a\n    else:\n        choices.add(a)\n        segcount += 1\n        state = None\n    i += 1\nprint(segcount)", "import sys\nfrom collections import defaultdict\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = sys.stdin.readline().split()\n    data = []\n    prev = {}\n    result = 0\n    current = [{'val': -1, 'prev': -1}, {'val': -1, 'prev': -1}]\n    for (key, val) in enumerate(a):\n        data.append({'val': val, 'prev': prev[val] if val in prev else -1})\n        prev[val] = key\n    for el in reversed(data):\n        if el['val'] == current[0]['val']:\n            current[0] = el\n            continue\n        if el['val'] == current[1]['val']:\n            current[1] = el\n            continue\n        result += 1\n        if current[0]['prev'] < current[1]['prev']:\n            current[0] = el\n        else:\n            current[1] = el\n    print(result)\n    return\nmain()", "n = int(input())\na1 = list(map(int, input().split()))\nsto1 = [[int(100000.0 + 5)] for i in range(n + 1)]\nfor i in range(n - 1, -1, -1):\n    sto1[a1[i]].append(i)\n(tmp1, tmp2, ans1) = (0, 0, 0)\nfor i in range(n):\n    if a1[i] == tmp1:\n        sto1[a1[i]].pop()\n    elif a1[i] == tmp2:\n        sto1[a1[i]].pop()\n    elif sto1[tmp1][-1] < sto1[tmp2][-1]:\n        tmp2 = a1[i]\n        ans1 += 1\n        sto1[a1[i]].pop()\n    else:\n        tmp1 = a1[i]\n        ans1 += 1\n        sto1[a1[i]].pop()\nprint(ans1)", "from collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\nd = defaultdict(list)\nfor i in range(n + 1):\n    d[i].append(10 ** 5 + 1)\nfor i in range(n - 1, -1, -1):\n    d[l[i]].append(i)\na = 0\nb = 0\ncnt = 0\nfor i in range(n):\n    d[l[i]].pop()\n    if l[i] != a and l[i] != b:\n        if d[a][-1] > d[b][-1]:\n            a = l[i]\n        else:\n            b = l[i]\n        cnt += 1\nprint(cnt)", "from collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\nd = defaultdict(list)\na = 0\nb = 0\ncnt = 0\nfor i in range(n + 1):\n    d[i].append(10 ** 5 + 1)\nfor i in range(n - 1, -1, -1):\n    d[l[i]].append(i)\nfor i in range(n):\n    d[l[i]].pop()\n    if l[i] != a and l[i] != b:\n        if d[a][-1] > d[b][-1]:\n            a = l[i]\n        else:\n            b = l[i]\n        cnt += 1\nprint(cnt)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    n = int(input())\n    ara = [int(x) for x in input().split()]\n    positions = [[] for i in range(n + 1)]\n    for idx in range(n):\n        positions[ara[idx]].append(idx)\n    next_ara = [n] * (n + 1)\n    for idx in range(n + 1):\n        size = len(positions[idx])\n        for jdx in range(size):\n            if jdx < size - 1:\n                next_ara[positions[idx][jdx]] = positions[idx][jdx + 1]\n            else:\n                next_ara[positions[idx][jdx]] = n\n    ara.append(n + n)\n    ones = [n]\n    zeros = [n]\n    ans = 0\n    for idx in range(n):\n        if ara[idx] == ara[ones[-1]] and ara[idx] == ara[zeros[-1]]:\n            ones.append(idx)\n        elif ara[idx] == ara[ones[-1]]:\n            ones.append(idx)\n        elif ara[idx] == ara[zeros[-1]]:\n            zeros.append(idx)\n        elif next_ara[ones[-1]] > next_ara[zeros[-1]]:\n            ones.append(idx)\n            ans += 1\n        else:\n            zeros.append(idx)\n            ans += 1\n    print(ans)\nmain()", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nnx_pos = [float('inf')] * n\ndic = defaultdict(lambda : float('inf'))\nfor i in range(n - 1, -1, -1):\n    nx_pos[i] = dic[a[i]]\n    dic[a[i]] = i\n(b, w) = ([(-1, -1)], [(-1, -1)])\nans = 0\nfor i in range(n):\n    x = a[i]\n    if b[-1][0] == x and w[-1][0] != x:\n        b.append((x, i))\n    elif w[-1][0] == x and b[-1][0] != x:\n        w.append((x, i))\n    elif w[-1][0] != x and b[-1][0] != x:\n        na = nx_pos[b[-1][1]]\n        nb = nx_pos[w[-1][1]]\n        if na < nb:\n            w.append((x, i))\n        else:\n            b.append((x, i))\n        ans += 1\n    else:\n        w.append((x, i))\nprint(ans)", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nnx_pos = [float('inf')] * n\ndic = defaultdict(lambda : float('inf'))\nfor i in range(n - 1, -1, -1):\n    nx_pos[i] = dic[a[i]]\n    dic[a[i]] = i\n(b, w) = ([(-1, -1)], [(-1, -1)])\nans = 0\nfor i in range(n):\n    x = a[i]\n    if b[-1][0] == x and w[-1][0] != x:\n        b.append((x, i))\n    elif w[-1][0] == x and b[-1][0] != x:\n        w.append((x, i))\n    elif w[-1][0] != x and b[-1][0] != x:\n        na = nx_pos[b[-1][1]]\n        nb = nx_pos[w[-1][1]]\n        if na < nb:\n            w.append((x, i))\n        else:\n            b.append((x, i))\n        ans += 1\n    else:\n        w.append((x, i))\nprint(ans)", "from array import array\nfrom collections import defaultdict\n\ndef solve(n, D):\n    dict_idx = defaultdict(list)\n    for (i, d) in enumerate(D):\n        dict_idx[d].append(i)\n    dict_count = {}\n    for d in dict_idx.keys():\n        dict_idx[d].pop(0)\n        dict_count[d] = len(dict_idx[d])\n    a = None\n    b = None\n    a_cnt = 0\n    b_cnt = 0\n    a_next_idx = 10 ** 6\n    b_next_idx = 10 ** 6\n    for (i, d) in enumerate(D):\n        if dict_count[d] > 0:\n            next_idx = dict_idx[d].pop(0)\n            dict_count[d] -= 1\n        else:\n            next_idx = 10 ** 6\n        if a == d:\n            a_next_idx = next_idx\n            continue\n        if b == d:\n            b_next_idx = next_idx\n            continue\n        if a is None:\n            a = d\n            a_cnt += 1\n            a_next_idx = next_idx\n            continue\n        if b is None:\n            b = d\n            b_cnt += 1\n            b_next_idx = next_idx\n            continue\n        if a_next_idx > b_next_idx:\n            a = d\n            a_cnt += 1\n            a_next_idx = next_idx\n            continue\n        else:\n            b = d\n            b_cnt += 1\n            b_next_idx = next_idx\n            continue\n    return a_cnt + b_cnt\n\ndef main():\n    ans = []\n    n = int(input())\n    D = array('i', list(map(int, input().split(' '))))\n    ans.append(solve(n, D))\n    for a in ans:\n        print(a)\nmain()"]