["(z, s, m) = (lambda : list(map(int, input().split())), sum, min)\n(_, a, b, c) = (z(), z(), z(), z())\n(u, v, w, x, y, z) = (s(a), s(b), s(c), m(a), m(b), m(c))\nprint(u + v + w - 2 * m(u, v, w, x + y, y + z, x + z))", "input()\nf = []\ng = []\nfor i in range(3):\n    arr = list(map(int, input().split()))\n    f.append(sum(arr))\n    g.append(min(arr))\nf.sort()\ng.sort()\nprint(sum(f) - 2 * min(g[0] + g[1], f[0]))", "(n1, n2, n3) = map(int, input().split())\nf = []\ng = []\nfor _ in range(3):\n    arr = list(map(int, input().split()))\n    f.append(sum(arr))\n    g.append(min(arr))\nf.sort()\ng.sort()\nprint(sum(f) - 2 * min(g[0] + g[1], f[0]))", "(aa, bb, cc) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nss = [sum(a), sum(b), sum(c)]\nss.sort()\ns = ss[1] + ss[2] - ss[0]\ndd = [min(a), min(b), min(c)]\ndd.sort()\nprint(max(s, sum(ss) - 2 * (dd[0] + dd[1])))", "(a, b, c) = map(int, input().strip().split())\n(x, y, z) = (list(map(int, input().strip().split())), list(map(int, input().strip().split())), list(map(int, input().strip().split())))\nH = sorted([min(x), min(y), min(z)])\n(X, Y, Z) = (sum(x), sum(y), sum(z))\nprint(max(X + Y + Z - sum(H[:2]) * 2, X + Y + Z - 2 * min(X, Y, Z)))", "inp_arr = lambda : list(map(int, input().split()))\n(_, a, b, c) = (inp_arr(), inp_arr(), inp_arr(), inp_arr())\n(s1, s2, s3, m1, m2, m3) = (sum(a), sum(b), sum(c), min(a), min(b), min(c))\nprint(s1 + s2 + s3 - 2 * min(m1 + m2, m1 + m3, m2 + m3, s1, s2, s3))", "import sys\ninput = sys.stdin.readline\n(n1, n2, n3) = map(int, input().split())\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nmins = [min(a1), min(a2), min(a3)]\nsums = [sum(a1), sum(a2), sum(a3)]\nmins.sort()\nans = sum(sums) - 2 * min(sum(mins[:2]), min(sums))\nprint(ans)", "def solve():\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    (m1, m2, m3) = (min(l1), min(l2), min(l3))\n    (s1, s2, s3) = (sum(l1), sum(l2), sum(l3))\n    ans = s1 + s2 + s3 - 2 * min(min(s1, s2, s3), m1 + m2 + m3 - max(m2, m1, m3))\n    print(ans)\ninput().split()\nsolve()", "(n1, n2, n3) = map(int, input().split())\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nprint(sum(a1 + a2 + a3) - 2 * min(min(sum(a1), sum(a2), sum(a3)), sum(sorted([min(a) for a in [a1, a2, a3]])[0:2])))", "(n1, n2, n3) = map(int, input().split())\n(a, b, c) = (list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())))\n(i, j, k, d, e, f) = (sum(a), sum(b), sum(c), min(a), min(b), min(c))\nprint(i + j + k - 2 * min(d + e, d + f, e + f, i, j, k))", "(a, b, c) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nl3 = list(map(int, input().split()))\nsum1 = sum(l1 + l2 + l3)\nmn1 = min(l1)\nmn2 = min(l2)\nmn3 = min(l3)\nmn = min(mn1 + mn2, min(mn1 + mn3, mn2 + mn3))\nsum_min = min(sum(l1), min(sum(l2), sum(l3)))\nans = min(mn, sum_min)\nprint(sum1 - ans * 2)", "(aa, bb, cc) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nss = [sum(a), sum(b), sum(c)]\nss.sort()\ns = ss[1] + ss[2] - ss[0]\ndd = [min(a), min(b), min(c)]\ndd.sort()\nprint(max(s, sum(ss) - 2 * (dd[0] + dd[1])))", "input()\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nma = min(a)\nmb = min(b)\nmc = min(c)\nprint(sum(a) + sum(b) + sum(c) - min(ma + mb, ma + mc, mb + mc, sum(a), sum(b), sum(c)) * 2)", "ns = []\nns += [int(x) for x in input().split(' ')]\nA = [None] * 3\nfor i in range(3):\n    A[i] = [int(x) for x in input().split(' ')]\ns = list(map(sum, A))\nopt = [None] * 3\nfor i in range(3):\n    rest = [j for j in range(3) if j != i]\n    B = [A[j] for j in range(3) if j != i]\n    i0 = min(B[0])\n    i1 = min(B[1])\n    cand1 = abs(s[rest[0]] - s[rest[1]])\n    cand2 = s[rest[0]] + s[rest[1]] - 2 * i0 - 2 * i1\n    opt[i] = s[i] + max(cand1, cand2)\nprint(max(opt))", "def sol(first, second, third):\n    first = [int(i) for i in first]\n    second = [int(i) for i in second]\n    third = [int(i) for i in third]\n    f_sum = sum(first)\n    s_sum = sum(second)\n    t_sum = sum(third)\n    arr_min = min(f_sum, s_sum, t_sum)\n    f_min = min(first)\n    s_min = min(second)\n    t_min = min(third)\n    gen_min = min(f_min + s_min, s_min + t_min, f_min + t_min, arr_min)\n    return f_sum + s_sum + t_sum - 2 * gen_min\ngeneral = input()\nfirst = input().split()\nsecond = input().split()\nthird = input().split()\nprint(sol(first, second, third))", "(n1, n2, n3) = map(int, input().split())\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nprint(sum(a1 + a2 + a3) - 2 * min(min(sum(a1), sum(a2), sum(a3)), sum(sorted([min(a) for a in [a1, a2, a3]])[0:2])))", "(n1, n2, n3) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nsuma = sum(a)\nsumb = sum(b)\nsumc = sum(c)\nma = min(a)\nmb = min(b)\nmc = min(c)\nans = suma + sumb + sumc - 2 * min(ma + mb + mc - max(ma, mb, mc), min(suma, sumb, sumc))\nprint(ans)", "from sys import stdin, stdout\nimport math, bisect, heapq\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(''.join(list(map(str, a))))\n\ndef solve():\n    (x, y, z) = L()\n    a = L()\n    b = L()\n    c = L()\n    l = [min(a), min(b), min(c)]\n    print(sum(a) + sum(b) + sum(c) - 2 * min(sum(a), sum(b), sum(c), l[0] + l[1], l[1] + l[2], l[0] + l[2]))\nfor _ in range(1):\n    solve()", "import sys\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\nmod = 10 ** 9 + 7\nmod1 = 998244353\n(n1, n2, n3) = il()\na = il()\nb = il()\nc = il()\nprint(sum(a) + sum(b) + sum(c) - 2 * min(sum(a), sum(b), sum(c), min(a) + min(b), min(b) + min(c), min(c) + min(a)))", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n(n, m, k) = int_arr()\na = int_arr()\nb = int_arr()\nc = int_arr()\nma = min(a)\nmb = min(b)\nmc = min(c)\nprint(sum(a) + sum(b) + sum(c) - min(ma + mb, ma + mc, mb + mc, sum(a), sum(b), sum(c)) * 2)", "try:\n    (a, b, c) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    arr3 = list(map(int, input().split()))\n    mn = [min(arr1), min(arr2), min(arr3)]\n    sm = [sum(arr1), sum(arr2), sum(arr3)]\n    tot = sum(sm)\n    x = min(min(mn[0] + mn[1], mn[1] + mn[2]), mn[0] + mn[2])\n    ans = tot - 2 * x\n    x = min(sm[0], min(sm[1], sm[2]))\n    ans = max(ans, tot - 2 * x)\n    print(ans)\nexcept:\n    pass", "(a, b, c) = map(int, input().strip().split())\n(x, y, z) = (list(map(int, input().strip().split())), list(map(int, input().strip().split())), list(map(int, input().strip().split())))\nH = sorted([min(x), min(y), min(z)])\n(X, Y, Z) = (sum(x), sum(y), sum(z))\nprint(max(X + Y + Z - sum(H[:2]) * 2, X + Y + Z - 2 * min(X, Y, Z)))", "(n1, n2, n3) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nl3 = list(map(int, input().split()))\ns = []\ns1 = sum(l1)\ns2 = sum(l2)\ns3 = sum(l3)\ns.append(s1)\ns.append(s2)\ns.append(s3)\nmi = []\nm1 = min(l1)\nm2 = min(l2)\nm3 = min(l3)\nmi.append(m1)\nmi.append(m2)\nmi.append(m3)\nsu = s1 + s2 + s3\nx = min(min(mi[0] + mi[1], mi[1] + mi[2]), mi[0] + mi[2])\nans = su - 2 * x\nx = min(s[0], min(s[1], s[2]))\nans = max(ans, su - 2 * x)\nprint(ans)", "def most_left(bags: [list, list, list]) -> int:\n    sums = [sum(bag) for bag in bags]\n    result = sum(sums)\n    minimals = sorted([min(bag) for bag in bags])\n    minimal = sum(minimals[:2])\n    to_remove = min(min(sums), minimal)\n    result -= 2 * to_remove\n    return result\n(n1, n2, n3) = [int(x) for x in input().split()]\nbags = [[int(x) for x in input().split()] for i in range(3)]\nprint(most_left(bags))", "from sys import stdin, stdout\nimport math, bisect, heapq\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(''.join(list(map(str, a))))\n\ndef solve():\n    (x, y, z) = L()\n    a = L()\n    b = L()\n    c = L()\n    l = [min(a), min(b), min(c)]\n    l.sort()\n    print(sum(a) + sum(b) + sum(c) - 2 * min(sum(a), sum(b), sum(c), l[0] + l[1]))\nfor _ in range(1):\n    solve()", "(n1, n2, n3) = map(int, input().split())\n(l1, l2, l3) = (list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())))\ns = sum(l1) + sum(l2) + sum(l3)\n(m1, m2, m3) = (max(l1), max(l2), max(l3))\n(q1, q2, q3) = (min(l1), min(l2), min(l3))\nprint(max(s - 2 * min(sum(l1), sum(l2), sum(l3)), s - q1 - q2 - q3 + 2 * max(q1, q2, q3) - sum([q1, q2, q3])))", "import sys\ninput = sys.stdin.readline\nimport heapq\n\ndef solve():\n    (n1, n2, n3) = map(int, input().split())\n    arr = [sorted(list(map(int, input().split()))) for _ in range(3)]\n    S = [sum(nums) for nums in arr]\n    q = []\n    heapq.heappush(q, (arr[0][0], 0, 0))\n    heapq.heappush(q, (arr[1][0], 0, 1))\n    heapq.heappush(q, (arr[2][0], 0, 2))\n    mv = []\n    cnt = s = 0\n    while q and cnt < 2:\n        (v, i, j) = heapq.heappop(q)\n        if not mv:\n            cnt += 1\n            mv.append((v, i, j))\n        elif mv[0][2] == j:\n            continue\n        elif S[mv[0][2]] >= v + mv[0][0]:\n            s = mv[0][0] + v\n            cnt += 1\n        else:\n            s = S[mv[0][2]]\n            cnt += 1\n        if i == len(arr[j]) - 1:\n            continue\n        heapq.heappush(q, (arr[j][i + 1], i + 1, j))\n    return sum(S) - 2 * min(s, min(S))\nprint(solve())", "def brate1(niz1, niz2, niz3):\n    niz1.sort()\n    niz2.sort()\n    niz3.sort()\n    kao = [niz1[0], niz2[0], niz3[0]]\n    kao2 = [sum(niz1), sum(niz2), sum(niz3)]\n    suma = sum(kao2)\n    kao2.sort()\n    kao.sort()\n    suma -= 2 * min(kao[0] + kao[1], kao2[0])\n    print(suma)\nn = input()\nniz1 = input().split(' ')\nniz2 = input().split(' ')\nniz3 = input().split(' ')\nniz1 = [int(i) for i in niz1]\nniz2 = [int(i) for i in niz2]\nniz3 = [int(i) for i in niz3]\nbrate1(niz1, niz2, niz3)", "(n1, n2, n3) = tuple([int(x) for x in input().split()])\nnums = []\nfor i in range(3):\n    nums.append([int(x) for x in input().split()])\nsums = [0, 0, 0]\nmins = [0, 0, 0]\nfor i in range(3):\n    nums[i] = sorted(nums[i])\n    sums[i] = sum(nums[i])\n    mins[i] = min(nums[i])\nglobal_min = min([(mins[i], sums[i], i) for i in range(3)])\nsecond_global_min = min([(mins[i], sums[i], i) for i in range(3) if i != global_min[2]])\nchoices = [(0, 1), (1, 2), (0, 2), (0,), (1,), (2,)]\nmax_result = 0\nall_sum = sum(sums)\nfor choice in choices:\n    if len(choice) == 2:\n        cur_result = all_sum - 2 * (mins[choice[0]] + mins[choice[1]])\n        if cur_result > max_result:\n            max_result = cur_result\n    elif len(choice) == 1:\n        cur_result = all_sum - 2 * sums[choice[0]]\n        if cur_result > max_result:\n            max_result = cur_result\nprint(max_result)", "(n, m, k) = map(int, input().split())\na = sorted(list(map(int, input().split())))\nb = sorted(list(map(int, input().split())))\nc = sorted(list(map(int, input().split())))\nif max(a[-1], b[-1], c[-1]) == a[-1]:\n    tar = 1\nelif max(a[-1], b[-1], c[-1]) == b[-1]:\n    tar = 2\nelif max(a[-1], b[-1], c[-1]) == c[-1]:\n    tar = 3\nholi = 0\nmoli = 0\ns1 = sum(a)\ns2 = sum(b)\ns3 = sum(c)\nprint(max(s1 + s2 + s3 - 2 * min(s1, s2, s3), s1 + s2 + s3 - 2 * (min(a) + min(b) + min(c) - max(min(a), min(b), min(c)))))", "def three(a1, a2, a3):\n    temp = [a1, a2, a3]\n    ans = 0\n    temp = sorted(temp, key=lambda s: s[0])\n    c1 = sum(temp[1][1:]) + sum(temp[2]) - temp[0][0]\n    c2 = temp[1][0] - sum(temp[0][1:])\n    ans = max(ans, abs(c1) + abs(c2))\n    s = sum(a1) + sum(a2) + sum(a3)\n    for i in range(0, 3):\n        ans = max(ans, s - 2 * sum(temp[i]))\n    return ans\na = input()\nl1 = sorted(list(map(int, input().strip().split())))\nl2 = sorted(list(map(int, input().strip().split())))\nl3 = sorted(list(map(int, input().strip().split())))\nprint(three(l1, l2, l3))", "from sys import stdin\ninput = stdin.readline\n\ndef three(a1, a2, a3):\n    temp = [a1, a2, a3]\n    ans = 0\n    temp = sorted(temp, key=lambda s: s[0])\n    c1 = sum(temp[1][1:]) + sum(temp[2]) - temp[0][0]\n    c2 = temp[1][0] - sum(temp[0][1:])\n    ans = max(ans, abs(c1) + abs(c2))\n    s = sum(a1) + sum(a2) + sum(a3)\n    for i in range(0, 3):\n        ans = max(ans, s - 2 * sum(temp[i]))\n    return ans\na = input()\nl1 = sorted(list(map(int, input().strip().split())))\nl2 = sorted(list(map(int, input().strip().split())))\nl3 = sorted(list(map(int, input().strip().split())))\nprint(three(l1, l2, l3))", "ch = input()\nL = [int(i) for i in ch.split()]\n(n1, n2, n3) = (L[0], L[1], L[2])\nch = input()\nL1 = [int(i) for i in ch.split()]\nL1.sort()\nch = input()\nL2 = [int(i) for i in ch.split()]\nL2.sort()\nch = input()\nL3 = [int(i) for i in ch.split()]\nL3.sort()\nL = L1 + L2 + L3\nd = min(L1[0] + L2[0], L2[0] + L3[0])\nd = min(d, L1[0] + L3[0])\nd = min(d, sum(L1))\nd = min(d, sum(L2))\nd = min(d, sum(L3))\nprint(sum(L) - 2 * d)", "(n1, n2, n3) = tuple([int(x) for x in input().split()])\nnums = []\nfor i in range(3):\n    nums.append([int(x) for x in input().split()])\nsums = [0, 0, 0]\nmins = [0, 0, 0]\nfor i in range(3):\n    nums[i] = sorted(nums[i])\n    sums[i] = sum(nums[i])\n    mins[i] = min(nums[i])\nglobal_min = min([(mins[i], sums[i], i) for i in range(3)])\nsecond_global_min = min([(mins[i], sums[i], i) for i in range(3) if i != global_min[2]])\nchoices = [(0, 1), (1, 2), (0, 2), (0,), (1,), (2,)]\nmax_result = 0\nall_sum = sum(sums)\nfor choice in choices:\n    if len(choice) == 2:\n        cur_result = all_sum - 2 * (mins[choice[0]] + mins[choice[1]])\n        if cur_result > max_result:\n            max_result = cur_result\n    elif len(choice) == 1:\n        cur_result = all_sum - 2 * sums[choice[0]]\n        if cur_result > max_result:\n            max_result = cur_result\nprint(max_result)", "row = input()\nrow = row.split(' ')\nfor i in range(0, 3):\n    row[i] = int(row[i])\ns = 0\nsumRow = 10 ** 18\nmin1 = 10 ** 18\nmin2 = 10 ** 18\nfor i in range(0, 3):\n    ss = 0\n    minR = 10 ** 18\n    t = input()\n    t = t.split(' ')\n    for j in range(0, row[i]):\n        d = int(t[j])\n        ss += d\n        s += d\n        minR = min(minR, d)\n    sumRow = min(ss, sumRow)\n    if minR <= min1:\n        min2 = min1\n        min1 = minR\n    else:\n        min2 = min(min2, minR)\nprint(s - 2 * min(sumRow, min1 + min2))"]