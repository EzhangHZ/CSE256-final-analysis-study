["def years():\n    n = int(input())\n    birth = []\n    death = []\n    for _ in range(n):\n        line = input().split()\n        birth.append(int(line[0]))\n        death.append(int(line[1]))\n    birth.sort()\n    death.sort()\n    cont = 0\n    max = 0\n    ano_max = 0\n    i_death = 0\n    for i in range(len(birth)):\n        cont += 1\n        while death[i_death] <= birth[i]:\n            cont -= 1\n            i_death += 1\n        if cont > max:\n            max = cont\n            ano_max = birth[i]\n    print(ano_max, max)\nyears()", "nun = int(input())\nbirth = []\ndeath = []\nfor i in range(nun):\n    (birth_year, death_year) = map(int, input().split(' '))\n    birth.append(birth_year)\n    death.append(death_year)\nbirth.sort()\ndeath.sort()\ncurrent_population = 0\nmax_population = 0\nindex_death = 0\nmax_year = 0\nfor i in range(nun):\n    current_population += 1\n    while death[index_death] <= birth[i]:\n        current_population -= 1\n        index_death += 1\n    if current_population > max_population:\n        max_population = current_population\n        max_year = birth[i]\nprint(max_year, max_population)", "import math\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append(x)\n        b.append(y)\n    a.sort()\n    b.sort()\n    (i, j, maxi, y, c) = (0, 0, float('-inf'), -1, 0)\n    while i < n and j < n:\n        if a[i] < b[j]:\n            c += 1\n            if c > maxi:\n                y = a[i]\n                maxi = c\n            i += 1\n        else:\n            c -= 1\n            j += 1\n    print(y, maxi)\nsolve()", "def findMaxGuests(arrl, exit, n):\n    arrl.sort()\n    exit.sort()\n    guests_in = 1\n    max_guests = 1\n    time = arrl[0]\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arrl[i] < exit[j]:\n            guests_in = guests_in + 1\n            if guests_in > max_guests:\n                max_guests = guests_in\n                time = arrl[i]\n            i = i + 1\n        else:\n            guests_in = guests_in - 1\n            j = j + 1\n    print(time, max_guests)\nn = int(input())\narrl = []\nexit = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    arrl.append(a)\n    exit.append(b)\nfindMaxGuests(arrl, exit, n)", "def main():\n    iloL = int(input())\n    ur = [0] * iloL\n    zm = [0] * iloL\n    wsu = 0\n    wsz = 0\n    wyn = [0, 0]\n    akt = 0\n    for i in range(iloL):\n        (ur[i], zm[i]) = list(map(int, input().split()))\n    ur.sort()\n    zm.sort()\n    while wsu != iloL:\n        if ur[wsu] < zm[wsz]:\n            akt += 1\n            if wyn[1] < akt:\n                wyn[1] = akt\n                wyn[0] = ur[wsu]\n            wsu += 1\n        else:\n            akt -= 1\n            wsz += 1\n    print(*wyn)\nmain()", "n = int(input())\nbirth = []\ndeath = []\nfor i in range(n):\n    (birth_year, death_year) = map(int, input().split(' '))\n    birth.append(birth_year)\n    death.append(death_year)\nbirth.sort()\ndeath.sort()\ncurrent_population = 0\nmax_population = 0\nindex_death = 0\nmax_year = 0\nfor i in range(n):\n    current_population += 1\n    while death[index_death] <= birth[i]:\n        current_population -= 1\n        index_death += 1\n    if current_population > max_population:\n        max_population = current_population\n        max_year = birth[i]\nprint(max_year, max_population)", "def findMaxGuests(arrl, exit, n):\n    arrl.sort()\n    exit.sort()\n    guests_in = 1\n    max_guests = 1\n    time = arrl[0]\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arrl[i] < exit[j]:\n            guests_in = guests_in + 1\n            if guests_in > max_guests:\n                max_guests = guests_in\n                time = arrl[i]\n            i = i + 1\n        else:\n            guests_in = guests_in - 1\n            j = j + 1\n    print(time, max_guests)\nn = int(input())\narrl = []\nexit = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    arrl.append(a)\n    exit.append(b)\nfindMaxGuests(arrl, exit, n)", "n = int(input())\na = n * [0]\nb = n * [0]\nfor i in range(n):\n    (a[i], b[i]) = map(int, input().split())\na = sorted(a)\nb = sorted(b)\nj = 0\nans = 0\ni_ans = 0\nfor i in range(n):\n    while b[j] <= a[i]:\n        j += 1\n    if i - j + 1 > ans:\n        ans = i - j + 1\n        i_ans = i\nprint(a[i_ans], ans)", "import sys\nl = sys.stdin.readlines()\ni = 0\nn = int(l[i].replace('\\n', ''))\nb = []\nd = []\nfor i in range(n):\n    a = [int(x) for x in l[i + 1].replace('\\n', '').split()]\n    b.append(a[0])\n    d.append(a[1])\nanoMax = -1\nnumP = 0\nvivos = 0\nb.sort()\nd.sort()\ni = 0\nj = 0\nwhile i < n and j < n:\n    nasceu = b[i]\n    if b[i] < d[j]:\n        vivos += 1\n        i += 1\n    elif b[i] == d[j]:\n        i += 1\n        j += 1\n    else:\n        vivos -= 1\n        j += 1\n    if vivos > numP:\n        numP = vivos\n        anoMax = nasceu\nprint(str(anoMax) + ' ' + str(numP))", "numPeople = int(input())\nmapR = {}\nfor _ in range(numPeople):\n    temp = [int(x) for x in input().split()]\n    birth = temp[0]\n    death = temp[1]\n    if birth not in mapR:\n        mapR[birth] = 1\n    else:\n        mapR[birth] += 1\n    if death not in mapR:\n        mapR[death] = -1\n    else:\n        mapR[death] -= 1\nyears = sorted(mapR.keys())\ncurrPeople = 0\nmaxPeople = 0\nmaxYear = 0\nfor year in years:\n    currPeople += mapR[year]\n    if currPeople > maxPeople:\n        maxPeople = currPeople\n        maxYear = year\nprint(str(maxYear) + ' ' + str(maxPeople))", "num = int(input())\na = dict()\nfor i in range(num):\n    (b, d) = map(int, input().split())\n    if b in a:\n        a[b] += 1\n    else:\n        a[b] = 1\n    if d in a:\n        a[d] -= 1\n    else:\n        a[d] = -1\ny = sorted(a.keys())\nal = 0\nn = 0\nc = 0\nfor i in y:\n    al += a[i]\n    if al > n:\n        c = i\n        n = al\nprint(c, n)", "import sys\n\ndef maxOverlapInterval(intervals):\n    heads = sorted([x[0] for x in intervals], reverse=True)\n    tails = sorted([x[1] for x in intervals], reverse=True)\n    (pos, cnt) = (0, 0)\n    res = [0, 0]\n    while heads and tails:\n        if heads[-1] < tails[-1]:\n            pos = heads.pop()\n            cnt += 1\n            if cnt > res[1]:\n                res = [pos, cnt]\n        else:\n            pos = tails.pop()\n            cnt -= 1\n    print(f'{res[0]} {res[1]}')\nn_people = int(sys.stdin.readline().strip())\nintervals = []\nfor i in range(n_people):\n    interval = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    intervals.append(interval)\nmaxOverlapInterval(intervals)", "num = int(input())\na = dict()\nfor i in range(num):\n    (b, d) = map(int, input().split())\n    if b in a:\n        a[b] += 1\n    else:\n        a[b] = 1\n    if d in a:\n        a[d] -= 1\n    else:\n        a[d] = -1\ny = sorted(a.keys())\nal = 0\nn = 0\nc = 0\nfor i in y:\n    al += a[i]\n    if al > n:\n        c = i\n        n = al\nprint(c, n)", "def year():\n    dct = {}\n    t = int(input())\n    for i in range(t):\n        (a, b) = map(int, input().strip().split())\n        if a in dct:\n            dct[a] += 1\n        else:\n            dct[a] = 1\n        if b in dct:\n            dct[b] -= 1\n        else:\n            dct[b] = -1\n    count = 0\n    curr = 0\n    y = 0\n    for i in sorted(dct.keys()):\n        curr += dct[i]\n        if curr > count:\n            count = curr\n            y = i\n    print(y, count)\nyear()", "dct = {}\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    dct[a] = dct.get(a, 0) + 1\n    dct[b] = dct.get(b, 0) - 1\ncnt = curr = y = 0\nfor i in sorted(dct.keys()):\n    curr += dct[i]\n    if curr > cnt:\n        cnt = curr\n        y = i\nprint(y, cnt)", "n = int(input())\nb = []\nd = []\nfor i in range(n):\n    line = [int(j) for j in input().split()]\n    b.append(line[0])\n    d.append(line[1])\nb.sort()\nd.sort()\nmax = [0, 0]\n(j, i, bTotal) = (0, 0, 0)\nwhile i < n and j < n:\n    if b[i] == d[j]:\n        (bCount, dCount) = (0, 0)\n        while i + 1 < n and b[i] == b[i + 1]:\n            i += 1\n            bCount += 1\n        while j + 1 < n and d[j] == d[j + 1]:\n            j += 1\n            dCount += 1\n        i += 1\n        j += 1\n        bTotal += bCount - dCount\n    elif b[i] > d[j]:\n        dCount = 0\n        while j < n and b[i] > d[j]:\n            j += 1\n            dCount += 1\n        bTotal -= dCount\n    elif b[i] < d[j]:\n        bCount = 0\n        while i < n and b[i] < d[j]:\n            i += 1\n            bCount += 1\n        bTotal += bCount\n    if max[0] < bTotal:\n        max[0] = bTotal\n        max[1] = b[i - 1]\nprint(f'{max[1]} {max[0]}')", "years = {}\nfor k in range(int(input())):\n    (b, d) = map(int, input().split())\n    if b in years:\n        years[b] += 1\n    else:\n        years[b] = 1\n    if d in years:\n        years[d] -= 1\n    else:\n        years[d] = -1\nkeys = sorted(years.keys())\ny = 0\nc = 0\ncur = 0\nfor year in keys:\n    cur += years[year]\n    if cur > c:\n        y = year\n        c = cur\nprint(y, c)", "n = int(input())\nbirths = []\ndeaths = []\nfor _ in range(n):\n    (b, d) = list(map(int, input().split(' ')))\n    births.append(b)\n    deaths.append(d)\nbirths.sort()\ndeaths.sort()\ni = 0\nj = 0\ncount = 0\nind = 0\nmaximum = -1\nchecker = 0\nindexer = 0\nwhile i < n and j < n:\n    if births[i] < deaths[j]:\n        count += 1\n        indexer = i\n        i += 1\n    else:\n        j += 1\n        count -= 1\n        indexer = i\n    if count > maximum:\n        ind = births[indexer]\n        maximum = count\nprint(ind, maximum)", "n = int(input())\ni = 0\nb = list()\na = list()\nwhile i < n:\n    c = input().split()\n    a.append(int(c[0]))\n    b.append(int(c[1]))\n    i += 1\na.sort()\nb.sort()\ni = 0\nj = 0\ncount = 0\nans = 0\nwhile i < n:\n    count += 1\n    while j < n:\n        if a[i] >= b[j]:\n            count -= 1\n            j += 1\n        else:\n            break\n    if ans < count:\n        ans = count\n        k = a[i]\n    i += 1\nprint(k, end=' ')\nprint(ans)", "num_of_people = int(input())\nevents = []\ndiff_in_year = dict()\nfor person in range(num_of_people):\n    (birth_year, death_year) = map(int, input().split(' '))\n    diff_in_year.setdefault(birth_year, 0)\n    diff_in_year.setdefault(death_year, 0)\n    diff_in_year[birth_year] += 1\n    diff_in_year[death_year] -= 1\nyears = sorted(diff_in_year.keys())\ncurrent_population = 0\nmax_population = 0\nbest_year = 0\nfor year in years:\n    current_population += diff_in_year[year]\n    if current_population > max_population:\n        max_population = current_population\n        best_year = year\nprint(best_year, max_population)", "l = []\ny = a = c = 0\nfor i in range(int(input())):\n    (b, d) = map(int, input().split())\n    l.append((b, 1))\n    l.append((d, -1))\nl.sort()\nfor i in l:\n    c += i[1]\n    if c > a:\n        (a, y) = (c, i[0])\nprint(y, a)", "l = []\nc = 0\ny = 0\na = 0\nfor _ in range(int(input())):\n    (b, d) = map(int, input().split())\n    l.append((b, 1))\n    l.append((d, -1))\nl.sort()\nfor i in l:\n    c += i[1]\n    if c > a:\n        y = i[0]\n        a = c\nprint(y, a)", "n = int(input())\npop = []\nfor _ in range(n):\n    (b, d) = map(int, input().split())\n    pop.append((b, 1))\n    pop.append((d, -1))\npop.sort()\nmaxpop = 0\ncounter = 0\nyear = 0\nfor i in pop:\n    counter += i[1]\n    if counter > maxpop:\n        (maxpop, year) = (counter, i[0])\nprint(year, maxpop)", "n = int(input())\ndates = []\nfor i in range(n):\n    data = input().split(' ')\n    dates.append((int(data[0]), 1))\n    dates.append((int(data[1]), -1))\ndates.sort()\nresult = [0, 0]\nliving_people = 0\nfor i in range(len(dates)):\n    living_people += dates[i][1]\n    if result[0] < living_people:\n        result[0] = living_people\n        result[1] = dates[i][0]\nprint(f'{result[1]} {result[0]}')", "from collections import defaultdict\nn = int(input())\nanos = defaultdict(int)\nfor i in range(n):\n    (b, d) = map(int, input().split())\n    anos[b] += 1\n    anos[d] -= 1\nmax_vivos = 0\nmax_ano = 0\nvivos = 0\nfor ano in sorted(anos.keys()):\n    vivos += anos[ano]\n    if vivos > max_vivos:\n        max_vivos = vivos\n        max_ano = ano\nprint(max_ano, max_vivos)", "N = int(input())\nstarts = []\nends = []\nfor i in range(N):\n    year = input().split(' ')\n    starts.append(int(year[0]))\n    ends.append(int(year[1]))\nstarts.sort()\nends.sort()\nans = (0, 0)\nres = i = j = 0\nwhile i < N:\n    if starts[i] < ends[j]:\n        res += 1\n        if res > ans[0]:\n            ans = (res, starts[i])\n        i += 1\n    elif starts[i] == ends[j]:\n        i += 1\n        j += 1\n    else:\n        res -= 1\n        j += 1\nprint('{} {}'.format(ans[1], ans[0]))", "def year():\n    dct = {}\n    t = int(input())\n    for i in range(t):\n        (a, b) = map(int, input().strip().split())\n        dct[a] = dct.get(a, 0) + 1\n        dct[b] = dct.get(b, 0) - 1\n    count = 0\n    curr = 0\n    y = 0\n    for i in sorted(dct.keys()):\n        curr += dct[i]\n        if curr > count:\n            count = curr\n            y = i\n    print(y, count)\nyear()", "n = int(input())\na = dict()\nfor i in range(n):\n    (b, d) = map(int, input().split())\n    if b in a:\n        a[b] += 1\n    else:\n        a[b] = 1\n    if d in a:\n        a[d] -= 1\n    else:\n        a[d] = -1\nyear = sorted(a.keys())\ncur = 0\nm = 0\nx = 0\nfor y in year:\n    cur += a[y]\n    if cur > m:\n        x = y\n        m = cur\nprint(x, m)", "l = []\nc = 0\ny = 0\na = 0\nfor _ in range(int(input())):\n    (b, d) = map(int, input().split())\n    l.append((b, 1))\n    l.append((d, -1))\nl.sort()\nfor i in l:\n    c += i[1]\n    if c > a:\n        y = i[0]\n        a = c\nprint(y, a)", "n = int(input())\n(x, y) = ([], [])\nfor i in range(n):\n    c = [int(k) for k in input().split()]\n    x.append(c[0])\n    y.append(c[1])\nres = 0\nzxc = 0\nz = 0\nx.sort()\ny.sort()\n(x, y) = (x[::-1], y[::-1])\nwhile x:\n    if x[-1] == y[-1]:\n        eta = x[-1]\n        while y and x[-1] == y[-1]:\n            y.pop()\n            z -= 1\n        while x and x[-1] == eta:\n            x.pop()\n            z += 1\n        if z > res:\n            res = z\n            zxc = eta\n    elif x[-1] > y[-1]:\n        eta = y[-1]\n        while y and y[-1] == eta:\n            y.pop()\n            z -= 1\n    else:\n        eta = x[-1]\n        while x and x[-1] == eta:\n            x.pop()\n            z += 1\n        if z > res:\n            res = z\n            zxc = eta\nprint(zxc, res)", "n = int(input())\ny = 0\nk = 0\nlst = []\nfor i in range(n):\n    (b, d) = [int(x) for x in input().split()]\n    lst.append((b, 1))\n    lst.append((d, -1))\nlst.sort()\ncont = 0\nfor i in range(2 * n):\n    cont += lst[i][1]\n    if cont > k:\n        k = cont\n        y = lst[i][0]\nprint(y, k)", "d = {}\nfor _ in range(int(input())):\n    (birth, death) = map(int, input().split())\n    d[birth] = d.get(birth, 0) + 1\n    d[death] = d.get(death, 0) - 1\nmax_alive_year = 0\nmax_alive = 0\nalive = 0\nfor year in sorted(d):\n    alive += d[year]\n    if alive > max_alive:\n        max_alive = alive\n        max_alive_year = year\nprint(max_alive_year, max_alive)", "n = int(input())\nevents = []\nfor _ in range(n):\n    (b, d) = tuple(input().split(' '))\n    b = int(b)\n    d = int(d)\n    events.append((b, 1))\n    events.append((d, -1))\nevents.sort(key=lambda x: x[0])\npop_per_year = dict()\ncurrent_pop = 0\nmax_pop = 0\nmax_year = -1\nfor event in events:\n    current_pop += event[1]\n    year = event[0]\n    pop_per_year[year] = current_pop\nmax_pop = 0\nmax_year = -1\nfor year in pop_per_year.keys():\n    if pop_per_year[year] > max_pop:\n        max_pop = pop_per_year[year]\n        max_year = year\nprint(max_year, max_pop)", "import sys\ninput = sys.stdin.readline\nsegs = []\nn = int(input())\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    segs += [(a, 1)]\n    segs += [(b, 0)]\nsegs.sort()\n(y, k) = (-1, 0)\nres = 0\nfor seg in segs:\n    if seg[1] == 1:\n        res += 1\n        if res > k:\n            y = seg[0]\n            k = res\n    else:\n        res -= 1\nprint(y, k)", "n = int(input())\na = dict()\nfor i in range(n):\n    (b, d) = map(int, input().split())\n    if b in a:\n        a[b] += 1\n    else:\n        a[b] = 1\n    if d in a:\n        a[d] -= 1\n    else:\n        a[d] = -1\nyear = sorted(a.keys())\ncur = 0\nm = 0\nx = 0\nfor y in year:\n    cur += a[y]\n    if cur > m:\n        x = y\n        m = cur\nprint(x, m)", "n = int(input())\nyears = []\nfor i in range(n):\n    vals = input().split()\n    years.append((int(vals[0]), 1))\n    years.append((int(vals[1]), -1))\nyears.sort()\nmax_population = 0\npopulation = 0\nfor year in years:\n    if year[1] == -1:\n        population -= 1\n    else:\n        population += 1\n        if population > max_population:\n            max_population = population\n            max_year = year[0]\nprint(max_year, max_population)", "numPeople = int(input())\nlistYears = []\nmaxIndividuals = 0\nmaxYear = 0\nindividualAlive = 0\nfor i in range(numPeople):\n    (yearBorn, yearDead) = map(int, input().split())\n    listYears.append((yearBorn, 'B'))\n    listYears.append((yearDead, 'A'))\nlistYears.sort()\nfor (j, year) in enumerate(listYears):\n    if year[1] == 'B':\n        individualAlive = individualAlive + 1\n    else:\n        individualAlive = individualAlive - 1\n    if individualAlive > maxIndividuals:\n        maxIndividuals = individualAlive\n        maxYear = year[0]\nprint(maxYear, end=' ')\nprint(maxIndividuals)", "n = int(input())\na = []\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    a.append((l, +1))\n    a.append((r, -1))\na.sort()\ny = -1\nm = 0\nc = 0\nfor u in a:\n    c = c + u[1]\n    if c > m:\n        y = u[0]\n        m = c\nprint(y, m)", "n = int(input())\nyears = []\nfor i in range(n):\n    vals = input().split()\n    years.append((int(vals[0]), 1))\n    years.append((int(vals[1]), -1))\nyears.sort()\nmax_population = 0\npopulation = 0\nfor year in years:\n    if year[1] == -1:\n        population -= 1\n    else:\n        population += 1\n        if population > max_population:\n            max_population = population\n            max_year = year[0]\nprint(max_year, max_population)", "n = int(input())\nl = []\nl1 = []\nfor i in range(n):\n    (b, d) = map(int, input().split())\n    l.append(b)\n    l1.append(d)\nl.sort()\nl1.sort()\ncount = 0\nval = 0\nmax = 1\nb = l[0]\ni = 1\nj = 0\nwhile i < n and j < n:\n    if l[i] < l1[j]:\n        count = i - j + 1\n        if max < count:\n            max = count\n            b = l[i]\n        i += 1\n    elif l[i] == l1[j]:\n        i += 1\n        j += 1\n    else:\n        j += 1\nprint(b, max)", "n = int(input())\nv = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    v.append((a, 1))\n    v.append((b, -1))\nv.sort()\nans = ct = 0\nfor i in v:\n    ct += i[1]\n    if ans < ct:\n        (ans, year) = (ct, i[0])\nprint(year, ans)", "a = []\ny = mx = c = 0\nfor i in range(int(input())):\n    (b, d) = map(int, input().split())\n    a.append((b, 1))\n    a.append((d, -1))\na.sort()\nfor i in a:\n    c += i[1]\n    if c > mx:\n        (mx, y) = (c, i[0])\nprint(y, mx)", "N = int(input())\nli = []\nfor i in range(N):\n    (birth, death) = [int(x) for x in input().split(' ')]\n    li.append((death, 0))\n    li.append((birth, 1))\nli.sort()\ncurr = 0\nmaxx = 0\nyear = 0\nfor e in li:\n    if e[1] == 0:\n        curr -= 1\n    else:\n        curr += 1\n        if curr > maxx:\n            maxx = curr\n            year = e[0]\nprint(str(year) + ' ' + str(maxx))", "a = []\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    a.append((x, 1))\n    a.append((y, 0))\na.sort()\nk = ans = curr = 0\nfor i in a:\n    if i[1] == 1:\n        curr += 1\n    else:\n        curr -= 1\n    if k < curr:\n        k = curr\n        ans = i[0]\nprint(ans, k)", "anos = {}\nfor _ in range(int(input())):\n    (ini, fim) = [int(x) for x in input().split()]\n    if ini in anos:\n        anos[ini] += 1\n    else:\n        anos[ini] = 1\n    if fim in anos:\n        anos[fim] -= 1\n    else:\n        anos[fim] = -1\nvivos = 0\nmaior = 0\nanoMaior = 0\nfor (ano, saldo) in sorted(anos.items()):\n    vivos += saldo\n    if maior < vivos:\n        maior = vivos\n        anoMaior = ano\nprint(anoMaior, maior)", "A = []\n(year_most_alive, max_quant, c) = (0, 0, 0)\nfor i in range(int(input())):\n    (b, d) = map(int, input().split())\n    A.append((b, 1))\n    A.append((d, -1))\nA.sort()\nfor i in A:\n    c += i[1]\n    if c > max_quant:\n        (max_quant, year_most_alive) = (c, i[0])\nprint(year_most_alive, max_quant)", "interv = []\nfor i in range(int(input())):\n    (deb, fin) = map(int, input().split())\n    interv.append((deb, +1))\n    interv.append((fin, -1))\ninterv.sort()\n(m, y, c) = (0, 0, 0)\nfor (t, dx) in interv:\n    c += dx\n    if c > m:\n        m = c\n        y = t\nprint(y, m)", "book = []\nfor _ in range(int(input())):\n    (b, d) = [int(i) for i in input().split()]\n    book.append((b, 1))\n    book.append((d, -1))\nbook.sort()\n(y, k, p) = (-10 ** 11, 0, 0)\nfor elem in book:\n    p += elem[1]\n    if p > k:\n        (k, y) = (p, elem[0])\nprint(y, k)", "import sys\nimport collections\ncin = sys.stdin\ncout = sys.stdout\nn = int(cin.readline().strip())\nincrements = collections.OrderedDict()\nfor p in range(0, n):\n    line = cin.readline().strip().split(' ')\n    by = int(line[0])\n    dy = int(line[1])\n    increments[by] = increments.get(by, 0) + 1\n    increments[dy] = increments.get(dy, 0) - 1\nincrements = {k: v for (k, v) in sorted(increments.items(), key=lambda pair: pair[0])}\npopulation_point = collections.OrderedDict()\nmax_year = 0\nmax_population = 0\nrunning_sum = 0\nfor (cur_year, cur_inc) in increments.items():\n    running_sum += cur_inc\n    if running_sum > max_population:\n        max_year = cur_year\n        max_population = running_sum\nresult = f'{max_year} {max_population}\\n'\ncout.write(result)", "v = []\nfor _ in range(int(input())):\n    t = list(map(int, input().split()))\n    v.append((t[0], 1))\n    v.append((t[1], -1))\nv.sort()\nans = ct = 0\nfor i in v:\n    ct += i[1]\n    if ans < ct:\n        (ans, year) = (ct, i[0])\nprint(year, ans)", "v = []\nfor _ in range(int(input())):\n    t = list(map(int, input().split()))\n    v.append((t[0], 1))\n    v.append((t[1], -1))\nv.sort()\nans = ct = 0\nfor i in v:\n    ct += i[1]\n    if ans < ct:\n        (ans, year) = (ct, i[0])\nprint(year, ans)", "l = []\ny = a = c = 0\nfor i in range(int(input())):\n    (b, d) = map(int, input().split())\n    l.append((b, 1))\n    l.append((d, -1))\nl.sort()\nfor i in l:\n    c += i[1]\n    if c > a:\n        (a, y) = (c, i[0])\nprint(y, a)", "n = int(input())\ninterv = []\nfor i in range(n):\n    (deb, fin) = map(int, input().split())\n    interv.append((deb, +1))\n    interv.append((fin, -1))\ninterv.sort()\nm = 0\ny = 0\nc = 0\nfor (t, dx) in interv:\n    c += dx\n    if c > m:\n        m = c\n        y = t\nprint(y, m)", "n = int(input())\narr = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    arr.append((a, +1))\n    arr.append((b, -1))\narr.sort()\nsum = 0\nmax = 0\nyear = 0\nfor (a, b) in arr:\n    sum += b\n    if sum > max:\n        max = sum\n        year = a\nprint(year, max)", "n = int(input())\nfreq = dict()\nfor idx in range(n):\n    interval = list(map(int, input().split()))\n    freq[interval[0]] = freq.get(interval[0], 0) + 1\n    freq[interval[1]] = freq.get(interval[1], 0) - 1\nlast = 0\nans = (1000000000.0 + 1, 0)\nfor x in sorted(freq.keys()):\n    last = freq[x] = last + freq[x]\n    ans = (x, last) if last > ans[1] else ans\nprint(*ans)", "import sys\nt = int(input())\nd = dict()\nlst = []\nfor tc in range(t):\n    lst = list(map(int, input().split()))\n    d[lst[0]] = d.get(lst[0], 0) + 1\n    d[lst[1]] = d.get(lst[1], 0) - 1\nkey_set = set(d.keys())\nans = (0, 0)\nalive = 0\nkey_set = sorted(key_set)\nfor i in key_set:\n    alive += d[i]\n    ans = (i, alive) if alive > ans[1] else ans\nprint(*ans)", "from collections import deque\nn = int(input())\nyears = []\nfor i in range(n):\n    vals = input().split()\n    years.append((int(vals[0]), 1))\n    years.append((int(vals[1]), -1))\nyears.sort(key=lambda x: (x[0], x[1]))\nmax_population = 0\npopulation = 0\nfor year in years:\n    if year[1] == 1:\n        population += 1\n        if population > max_population:\n            max_population = population\n            max_year = year[0]\n    else:\n        population -= 1\nprint(max_year, max_population)", "n = int(input())\nv = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    v.append((a, 1))\n    v.append((b, -1))\nv.sort()\nans = ct = 0\nfor i in v:\n    ct += i[1]\n    if ans < ct:\n        (ans, year) = (ct, i[0])\nprint(year, ans)", "def main():\n    timeline = []\n    n = int(input())\n    for _ in range(n):\n        (birth, death) = [int(ele) for ele in input().split()]\n        timeline.append([birth, True])\n        timeline.append([death, False])\n    timeline.sort()\n    year = 0\n    population = 0\n    max_population = 0\n    for element in timeline:\n        if element[1]:\n            population += 1\n            if population > max_population:\n                year = element[0]\n                max_population = population\n        else:\n            population -= 1\n    print(year, max_population)\nmain()", "def main():\n    people = int(input())\n    births_and_deaths = []\n    for _ in range(people):\n        (birth, death) = [int(i) for i in input().split()]\n        births_and_deaths.append([birth, 1])\n        births_and_deaths.append([death, -1])\n    births_and_deaths.sort()\n    info = [0, 0]\n    count = 0\n    for i in range(len(births_and_deaths)):\n        count += births_and_deaths[i][1]\n        if info[0] < count:\n            info[0] = count\n            info[1] = births_and_deaths[i][0]\n    print(f'{info[1]} {info[0]}')\nmain()", "def readInt():\n    return int(input())\n\ndef readLine():\n    return [int(s) for s in input().split(' ')]\n\ndef readString():\n    return input()\n\ndef ask(od):\n    allData = []\n    for (a, b) in od:\n        allData.append((a, True))\n        allData.append((b, False))\n    allData = sorted(allData)\n    maxL = 0\n    maxYear = 0\n    current = 0\n    for (num, b) in allData:\n        if b:\n            current += 1\n        else:\n            current -= 1\n        if current > maxL:\n            maxL = current\n            maxYear = num\n    return (maxYear, maxL)\nn = readInt()\nret = []\nfor _ in range(n):\n    params = readLine()\n    ret.append((params[0], params[1]))\n(a, b) = ask(ret)\nprint(a, b)", "import sys\n\ndef fi():\n    return sys.stdin.readline()\ncounter = 0\nmax1 = 0\nyears = 0\nl = []\nfor _ in range(int(fi())):\n    (a, b) = map(int, fi().split())\n    l.append([a, 1])\n    l.append([b, -1])\nl.sort()\nfor i in l:\n    counter += i[1]\n    if counter > max1:\n        max1 = counter\n        year = i[0]\nprint(year, max1)", "import math\ncases = int(input())\nlst = []\nfor case in range(cases):\n    (x, y) = input().split()\n    lst.append([int(x), 1])\n    lst.append([int(y), 0])\nlst.sort()\ncount = 0\ncount_max = 0\nyear_max = lst[-1][0]\nstart = 0\nfor temp in lst:\n    if temp[1] == 1:\n        count += 1\n    else:\n        count -= 1\n    if count_max < count:\n        count_max = count\n        year_max = temp[0]\ncount = 0\nprint(year_max, count_max)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    a.append([x, 1])\n    a.append([y, -1])\na.sort()\ntotal = 0\ny = 0\nans = 0\nfor i in range(2 * n):\n    total += a[i][1]\n    if ans < total:\n        ans = total\n        y = a[i][0]\nprint(y, ans)", "x = []\nfor __ in range(int(input())):\n    (a, b) = map(int, input().split())\n    x.append([a, 1])\n    x.append([b, -1])\nx.sort()\ny = []\nmaxx = -1\ncurr = 0\nfor i in range(len(x)):\n    curr += x[i][1]\n    if curr > maxx:\n        maxx = curr\n        y = x[i][0]\nprint(y, maxx)", "n = int(input())\nV = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    V.append([a, 1])\n    V.append([b, -1])\nV.sort()\nmx = [0, 0]\npos = 0\nfor i in range(2 * n):\n    pos += V[i][1]\n    if mx[0] < pos:\n        mx[0] = pos\n        mx[1] = V[i][0]\nprint(mx[1], mx[0])", "n = int(input())\nvidas = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    vidas.append([a, 1])\n    vidas.append([b, -1])\nvidas.sort()\nmaximo = [0, 0]\npos = 0\nfor i in range(2 * n):\n    pos += vidas[i][1]\n    if maximo[0] < pos:\n        maximo[0] = pos\n        maximo[1] = vidas[i][0]\nprint(maximo[1], maximo[0])", "cases = int(input())\nlst = []\nfor case in range(cases):\n    (x, y) = input().split()\n    lst.append([int(x), 1])\n    lst.append([int(y), 0])\nlst.sort()\ncount = 0\ncount_max = 0\nyear_max = lst[-1][0]\nstart = 0\nfor temp in lst:\n    if temp[1] == 1:\n        count += 1\n    else:\n        count -= 1\n    if count_max < count:\n        count_max = count\n        year_max = temp[0]\ncount = 0\nprint(year_max, count_max)", "import sys\nfrom collections import defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef years(arr):\n    events = [[x[0], 'b'] for x in arr] + [[x[1], 'd'] for x in arr]\n    events.sort(key=lambda x: x[0])\n    population = ans = 0\n    mx = float('-inf')\n    for i in range(len(events)):\n        (y, event) = events[i]\n        if event == 'b':\n            population += 1\n        else:\n            population -= 1\n        if (i == len(events) - 1 or events[i + 1][0] != y) and population > mx:\n            mx = population\n            ans = y\n    return str(ans) + ' ' + str(mx)\ninput = load_sys()\nN = int(input[0])\narr = []\nfor i in range(1, len(input)):\n    person = input[i].split()\n    person = [int(x) for x in person]\n    arr.append(person)\nprint(years(arr))", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    a.append([x, 1])\n    a.append([y, -1])\ncount = 0\nmax_peoplealive = 0\nmax_index = 0\na.sort()\nfor i in range(2 * n):\n    count = count + a[i][1]\n    if count > max_peoplealive:\n        max_index = a[i][0]\n        max_peoplealive = count\nprint(str(max_index) + ' ' + str(max_peoplealive))", "x = []\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    x.append([a, 1])\n    x.append([b, -1])\nx.sort()\ny = []\nmax = -1\ncur = 0\nfor i in range(len(x)):\n    cur += x[i][1]\n    if cur > max:\n        max = cur\n        y = x[i][0]\nprint(y, max)", "n = int(input())\narr = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    arr.append([a, 1])\n    arr.append([b, -1])\narr = sorted(arr)\nans = 0\nyear = 0\nc = 0\nfor i in range(2 * n):\n    c += arr[i][1]\n    if c > ans:\n        ans = c\n        year = arr[i][0]\nprint(year, ans)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = list(map(int, input().split()))\n    a.append([x, 1])\n    a.append([y, 0])\na.sort()\nc = 0\nm = 0\ny = 0\nfor i in range(len(a)):\n    if a[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = a[i][0]\nprint(y, m)", "from sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\ninput = stdin.readline\n\ndef solve():\n    pass\nt = 1\nfor i in range(t):\n    n = int(input())\n    ages = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        ages.append([a, 1])\n        ages.append([b, 0])\n    ages.sort()\n    c = 0\n    m = 0\n    output = 0\n    for i in range(2 * n):\n        if ages[i][1] == 1:\n            c += 1\n        else:\n            c -= 1\n        if m < c:\n            m = c\n            output = ages[i][0]\n    print(output, m)", "numeroDePessoas = int(input())\nvetor = []\nmaximoVIVOS = 0\nmaximoANO = 0\nvivos = 0\nfor i in range(numeroDePessoas):\n    (a, b) = map(int, input().split())\n    vetor.append([a, 1])\n    vetor.append([b, -1])\nvetor = sorted(vetor)\nfor i in range(2 * numeroDePessoas):\n    vivos += vetor[i][1]\n    if vivos > maximoVIVOS:\n        maximoVIVOS = vivos\n        maximoANO = vetor[i][0]\nprint(maximoANO, maximoVIVOS)", "numeroDePessoas = int(input())\nvetor = []\nmaximoVIVOS = 0\nmaximoANO = 0\nvivos = 0\nfor i in range(numeroDePessoas):\n    (nasce, morre) = map(int, input().split())\n    vetor.append([nasce, 1])\n    vetor.append([morre, -1])\nvetor = sorted(vetor)\nfor i in range(2 * numeroDePessoas):\n    vivos += vetor[i][1]\n    if vivos > maximoVIVOS:\n        maximoVIVOS = vivos\n        maximoANO = vetor[i][0]\nprint(maximoANO, maximoVIVOS)", "n = int(input())\nl = []\ns = set()\nfor _ in range(n):\n    (b, d) = map(int, input().split())\n    l.append([b, d])\n    s.add(b)\n    s.add(d)\ntemp = list(s)\ntemp.sort()\nmp = {i: 0 for i in temp}\nfor i in l:\n    mp[i[0]] += 1\n    mp[i[1]] -= 1\nma = [mp[temp[0]], temp[0]]\nfor i in range(len(temp) - 1):\n    mp[temp[i + 1]] += mp[temp[i]]\n    if mp[temp[i + 1]] > ma[0]:\n        ma = [mp[temp[i + 1]], temp[i + 1]]\nprint(ma[1], ma[0])", "numeroDePessoas = int(input())\nvetor = []\nmaximoVIVOS = 0\nmaximoANO = 0\nvivos = 0\nfor i in range(numeroDePessoas):\n    (nasce, morre) = map(int, input().split())\n    vetor.append([nasce, 1])\n    vetor.append([morre, -1])\nvetor = sorted(vetor)\nfor i in range(2 * numeroDePessoas):\n    vivos += vetor[i][1]\n    if vivos > maximoVIVOS:\n        maximoVIVOS = vivos\n        maximoANO = vetor[i][0]\nprint(maximoANO, maximoVIVOS)", "def years(a, b):\n    c = []\n    for x in a:\n        c.append([x, 's'])\n    for x in b:\n        c.append([x, 'e'])\n    c.sort()\n    max_el = 0\n    el = 0\n    ind = 0\n    x = 0\n    while x < len(c):\n        y = x\n        while y < len(c) and c[y] == c[x]:\n            if c[y][1] == 's':\n                el += 1\n            else:\n                el -= 1\n            y += 1\n        x = y\n        if el > max_el:\n            max_el = el\n            ind = c[x - 1][0]\n    return (ind, max_el)\nn = int(input())\n(p, q) = ([], [])\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    p.append(a)\n    q.append(b)\nans = years(p, q)\nprint(ans[0], ans[1])", "import sys\nfrom collections import defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef years(arr):\n    events = [[x[0], 'b'] for x in arr] + [[x[1], 'd'] for x in arr]\n    events.sort(key=lambda x: x[0])\n    ctr = defaultdict(int)\n    for (y, event) in events:\n        if event == 'b':\n            ctr[y] += 1\n        else:\n            ctr[y] -= 1\n    prev = 0\n    mx = float('-inf')\n    ans = 0\n    for y in ctr:\n        prev += ctr[y]\n        ctr[y] = prev\n        if ctr[y] > mx:\n            ans = y\n            mx = ctr[y]\n    return str(ans) + ' ' + str(mx)\ninput = load_sys()\nN = int(input[0])\narr = []\nfor i in range(1, len(input)):\n    person = input[i].split()\n    person = [int(x) for x in person]\n    arr.append(person)\nprint(years(arr))", "n = int(input())\nli = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    li.append([a, 1])\n    li.append([b, 0])\nli.sort()\nc = 0\nm = 0\ny = 0\nl = len(li)\nfor i in range(l):\n    if li[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = li[i][0]\nprint(y, m)", "n = int(input())\nli = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    li.append([a, 1])\n    li.append([b, 0])\nli.sort()\nc = 0\nm = 0\ny = 0\nl = len(li)\nfor i in range(l):\n    if li[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = li[i][0]\nprint(y, m)", "n = int(input())\na = []\nleft = dict()\nright = dict()\nvisited = set()\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    if l not in left.keys():\n        left[l] = 0\n    if r not in right.keys():\n        right[r] = 0\n    left[l] += 1\n    right[r] += 1\n    if l not in visited:\n        a.append(l)\n        visited.add(l)\n    if r not in visited:\n        a.append(r)\n        visited.add(r)\na.sort()\ncurr = 0\nans = 0\nans_i = 0\nfor i in range(len(a)):\n    if a[i] in left.keys():\n        curr += left[a[i]]\n    if a[i] in right.keys():\n        curr -= right[a[i]]\n    if curr > ans:\n        ans = curr\n        ans_i = a[i]\nprint(ans_i, ans)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = list(map(int, input().split()))\n    a.append([x, 1])\n    a.append([y, 0])\na.sort()\nc = 0\nm = 0\ny = 0\nlength = len(a)\nfor i in range(length):\n    if a[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = a[i][0]\nprint(y, m)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = list(map(int, input().split()))\n    a.append([x, 1])\n    a.append([y, 0])\na.sort()\nc = 0\nm = 0\ny = 0\nfor i in range(len(a)):\n    if a[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = a[i][0]\nprint(y, m)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = list(map(int, input().split()))\n    a.append([x, 1])\n    a.append([y, 0])\na.sort()\nc = 0\nm = 0\ny = 0\nfor i in range(len(a)):\n    if a[i][1] == 1:\n        c += 1\n    else:\n        c -= 1\n    if m < c:\n        m = c\n        y = a[i][0]\nprint(y, m)", "import sys\nimport string\nfrom heapq import *\nfrom bisect import *\nfrom collections import Counter, defaultdict\nfrom math import fsum, sqrt, gcd, ceil, factorial\nfrom operator import *\nfrom itertools import accumulate\ninf = float('inf')\nflush = lambda : sys.stdout.flush\ncomb = lambda x, y: factorial(x) // factorial(y) // factorial(x - y)\nen = lambda x: list(enumerate(x))\nip = lambda : input()\nii = lambda : int(input())\nr = lambda : map(int, input().split())\nrr = lambda : list(r())\nn = ii()\narr = []\nfor i in range(n):\n    (a, b) = r()\n    arr += ([a, 1],)\n    arr += ([b, -1],)\narr.sort()\nc = 0\nx = 0\nd = 0\nfor (i, j) in arr:\n    c += j\n    if c > d:\n        d = c\n        x = i\nprint(x, d)", "n = int(input())\na = []\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    a.append([x, 1])\n    a.append([y, -1])\na.sort()\nk = 0\ny = 0\nm = 0\nfor i in range(len(a)):\n    k += a[i][1]\n    if m < k:\n        m = k\n        y = a[i][0]\nprint(y, m)", "l1 = []\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    l1.append((a, 1))\n    l1.append((b, -1))\nl1.sort()\nans = year = temp = 0\nfor i in l1:\n    temp += i[1]\n    if temp > ans:\n        (ans, year) = (temp, i[0])\nprint(year, ans)"]