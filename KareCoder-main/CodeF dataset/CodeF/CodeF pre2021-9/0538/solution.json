["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    w = [False] * (n + 1)\n    b = [None] * n\n    for i in range(n):\n        j = a[i]\n        if not w[j]:\n            w[j] = True\n            b[i] = j\n    c = []\n    for i in range(1, n + 1):\n        if not w[i]:\n            c.append(i)\n    for i in range(n):\n        j = b[i]\n        if j is None:\n            if c[-1] != i + 1:\n                b[i] = c.pop()\n            elif len(c) != 1:\n                c.pop()\n                b[i] = c.pop()\n                c.append(i + 1)\n            else:\n                v = a[i]\n                for j in range(n):\n                    if b[j] == v:\n                        b[j] = i + 1\n                        b[i] = a[i]\n                        break\n    r = 0\n    for i in range(n):\n        r += a[i] == b[i]\n    print(r)\n    print(' '.join(map(str, b)))\nfor i in range(int(input())):\n    solve()", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 10 ** 16\nmd = 10 ** 9 + 7\nfrom collections import Counter\n\ndef solve():\n    n = II()\n    aa = LI1()\n    frm = [[] for _ in range(n)]\n    for (i, a) in enumerate(aa):\n        frm[a].append(i)\n    ans = [-1] * n\n    vac = []\n    over = []\n    k = 0\n    for i in range(n):\n        if len(frm[i]) == 0:\n            vac.append(i)\n        elif len(frm[i]) == 1:\n            ans[frm[i][0]] = i + 1\n            k += 1\n        else:\n            over.append(i)\n    for a in vac:\n        j = over[-1]\n        if frm[j][-1] == a:\n            i = frm[j].pop(-2)\n        else:\n            i = frm[j].pop()\n        ans[i] = a + 1\n        if len(frm[j]) == 1:\n            i = frm[j].pop()\n            ans[i] = j + 1\n            over.pop()\n            k += 1\n    print(k)\n    print(*ans)\nfor testcase in range(II()):\n    solve()", "import sys\nfrom collections import defaultdict\ninput = lambda : sys.stdin.readline().strip()\nintput = lambda : map(int, input().split())\n\ndef solve():\n    (N,) = intput()\n    A = [0] + list(intput())\n    ans = [-1] * (N + 1)\n    spare = []\n    cnt = defaultdict(int)\n    for x in A:\n        cnt[x] += 1\n    for i in range(1, N + 1):\n        if i not in cnt:\n            spare += [i]\n    K = N - len(spare)\n    for i in range(1, N + 1):\n        if cnt[A[i]] > 1:\n            x = spare.pop()\n            if x == i:\n                spare += [x]\n                ans[i] = A[i]\n            else:\n                ans[i] = x\n                cnt[A[i]] -= 1\n        else:\n            ans[i] = A[i]\n    return (K, ans[1:])\n(T,) = intput()\nfor _ in range(T):\n    (k, s) = solve()\n    print(k)\n    print(*s)", "from collections import Counter\nfrom collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(a):\n    st = set([i for i in range(1, len(a) + 1)])\n    g = {}\n    for i in range(len(a)):\n        if a[i] in st:\n            st.remove(a[i])\n        if a[i] not in g:\n            g[a[i]] = [i]\n        else:\n            g[a[i]].append(i)\n    ans = [0] * len(a)\n    lt = list(st)\n    j = 0\n    for i in g:\n        ans[g[i][0]] = i\n        for ind in range(1, len(g[i])):\n            id = g[i][ind]\n            ans[id] = lt[j]\n            j += 1\n            if ans[id] == id + 1:\n                (ans[id], ans[g[i][ind - 1]]) = (ans[g[i][ind - 1]], ans[id])\n    cnt = 0\n    for i in range(len(ans)):\n        if a[i] == ans[i]:\n            cnt += 1\n    print(cnt)\n    return ans\nfor i in range(int(input())):\n    n = input()\n    a = list(map(int, input().strip().split()))\n    print(*f(a))", "from collections import Counter\nfrom collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(a):\n    st = set([i for i in range(1, len(a) + 1)])\n    g = {}\n    for i in range(len(a)):\n        if a[i] in st:\n            st.remove(a[i])\n        if a[i] not in g:\n            g[a[i]] = [i]\n        else:\n            g[a[i]].append(i)\n    ans = [0] * len(a)\n    lt = list(st)\n    j = 0\n    for i in g:\n        ans[g[i][0]] = i\n        for ind in range(1, len(g[i])):\n            id = g[i][ind]\n            ans[id] = lt[j]\n            j += 1\n            if ans[id] == id + 1:\n                (ans[id], ans[g[i][ind - 1]]) = (ans[g[i][ind - 1]], ans[id])\n    cnt = 0\n    for i in range(len(ans)):\n        if a[i] == ans[i]:\n            cnt += 1\n    print(cnt)\n    return ans\nfor i in range(int(input())):\n    n = input()\n    a = list(map(int, input().strip().split()))\n    print(*f(a))", "from collections import Counter\nfrom collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(a):\n    st = set([i for i in range(1, len(a) + 1)])\n    g = {}\n    for i in range(len(a)):\n        if a[i] in st:\n            st.remove(a[i])\n        if a[i] not in g:\n            g[a[i]] = [i]\n        else:\n            g[a[i]].append(i)\n    ans = [0] * len(a)\n    lt = list(st)\n    j = 0\n    for i in g:\n        ans[g[i][0]] = i\n        for ind in range(1, len(g[i])):\n            id = g[i][ind]\n            ans[id] = lt[j]\n            j += 1\n            if ans[id] == id + 1:\n                (ans[id], ans[g[i][ind - 1]]) = (ans[g[i][ind - 1]], ans[id])\n    cnt = 0\n    for i in range(len(ans)):\n        if a[i] == ans[i]:\n            cnt += 1\n    print(cnt)\n    return ans\nfor i in range(int(input())):\n    n = input()\n    a = list(map(int, input().strip().split()))\n    print(*f(a))", "from collections import Counter\nfrom collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(a):\n    st = set([i for i in range(1, len(a) + 1)])\n    g = {}\n    for i in range(len(a)):\n        if a[i] in st:\n            st.remove(a[i])\n        if a[i] not in g:\n            g[a[i]] = [i]\n        else:\n            g[a[i]].append(i)\n    ans = [0] * len(a)\n    lt = list(st)\n    j = 0\n    for i in g:\n        ans[g[i][0]] = i\n        for ind in range(1, len(g[i])):\n            id = g[i][ind]\n            ans[id] = lt[j]\n            j += 1\n            if ans[id] == id + 1:\n                (ans[id], ans[g[i][ind - 1]]) = (ans[g[i][ind - 1]], ans[id])\n    cnt = 0\n    for i in range(len(ans)):\n        if a[i] == ans[i]:\n            cnt += 1\n    print(cnt)\n    return ans\nfor i in range(int(input())):\n    n = input()\n    a = list(map(int, input().strip().split()))\n    print(*f(a))", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfor _ in range(rn()):\n    n = rn()\n    a = rl()\n    ans = len(set(a))\n    pans = [-1 for i in range(n)]\n    s = set(range(1, n + 1))\n    ms = s.copy()\n    gives = s.copy()\n    for i in range(n):\n        if a[i] in s:\n            s.remove(a[i])\n    for num in s:\n        if a[num - 1] in ms:\n            gives.remove(num)\n            ms.remove(a[num - 1])\n            pans[num - 1] = a[num - 1]\n    for i in range(n):\n        if a[i] in ms:\n            gives.remove(i + 1)\n            pans[i] = a[i]\n            ms.remove(a[i])\n    gives = list(gives)\n    ms = list(ms)\n    if len(gives) > 0:\n        if gives[0] == ms[0]:\n            (gives[0], gives[1]) = (gives[1], gives[0])\n        for i in range(len(gives)):\n            if gives[i] != ms[i]:\n                pans[gives[i] - 1] = ms[i]\n            else:\n                pans[gives[i - 1] - 1] = ms[i]\n                pans[gives[i] - 1] = ms[i - 1]\n                (ms[i], ms[i - 1]) = (ms[i - 1], ms[i])\n    print(ans)\n    print(*pans)", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    c = [0] * n\n    check = [False] * n\n    check[a[0] - 1] = True\n    b[0] = a[0]\n    for i in range(1, n):\n        if not check[a[i] - 1]:\n            check[a[i] - 1] = True\n            b[i] = a[i]\n    for i in range(n):\n        if b[i] != 0:\n            c[b[i] - 1] = i\n    cnt = n - b.count(0)\n    p = []\n    for i in range(n):\n        if not check[i]:\n            p.append(i + 1)\n    j = 0\n    for i in range(n - 1, -1, -1):\n        if b[i] == 0:\n            b[i] = p[j]\n            if b[i] == i + 1:\n                b[i] = a[i]\n                b[c[a[i] - 1]] = p[j]\n            j += 1\n    print(cnt)\n    for i in b:\n        print(i, end=' ')\n    print()", "import math\nimport heapq\nimport string\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nS = lambda : input()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    l = L()\n    (g, r, di) = ([0] * n, [0] * n, {})\n    for i in range(n):\n        if r[l[i] - 1] == 0:\n            g[i] = 1\n            di[i] = l[i] - 1\n            r[l[i] - 1] = 1\n    print(len(di))\n    (l1, l2) = ([], [])\n    for i in range(n):\n        if g[i] == 0:\n            l1.append(i)\n        if r[i] == 0:\n            l2.append(i)\n    p = len(l1) - 1\n    for i in range(p + 1):\n        if l1[i] == l2[i]:\n            if i != p:\n                (l1[i], l1[p]) = (l1[p], l1[i])\n            else:\n                (l1[0], l1[p]) = (l1[p], l1[0])\n    for i in range(p + 1):\n        di[l1[i]] = l2[i]\n    if len(l1) == 1 and l1[0] == l2[0]:\n        di[l1[0]] = l[l1[0]] - 1\n        for i in range(n):\n            if l[i] == l[l1[0]] and i != l1[0]:\n                di[i] = l1[0]\n                break\n    for i in range(n):\n        print(di[i] + 1, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    b = [0 for i in range(n + 1)]\n    c = []\n    d = []\n    for i in range(1, n + 1):\n        if b[a[i]] == 0:\n            b[a[i]] = i\n        else:\n            c.append(i)\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            d.append(i)\n    for i in range(len(c)):\n        if c[i] == d[i]:\n            y = c[i]\n            x = b[a[y]]\n            b[a[y]] = y\n            c[i] = x\n        b[d[i]] = c[i]\n    an = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        an[b[i]] = i\n    o = 0\n    for i in range(1, n + 1):\n        if a[i] == an[i]:\n            o += 1\n    print(o)\n    print(*an[1:])", "from collections import *\nfrom math import *\nfrom sys import stdin\ninput = stdin.readline\nT = int(input())\nfor case in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [-1] * n\n    l1 = list(Counter(a).keys())\n    l2 = list(range(1, n + 1))\n    l = list(set(l2) - set(l1))\n    d = {}\n    count = 0\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = i\n            ans[i] = a[i]\n            count += 1\n        else:\n            ans[i] = l.pop()\n    for i in range(n):\n        if ans[i] == i + 1:\n            (ans[d[a[i]]], ans[i]) = (ans[i], a[i])\n            d[a[i]] = i\n    print(count)\n    print(*ans)", "from collections import *\nfrom math import *\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = Counter(a)\n    ans = [0] * n\n    l1 = list(d.keys())\n    l2 = list(range(1, n + 1))\n    l = list(set(l2) - set(l1))\n    for i in range(n):\n        if d[a[i]] > 0:\n            ans[i] = a[i]\n            d[a[i]] = 0\n        else:\n            ans[i] = l.pop()\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = i\n    for i in range(n):\n        if ans[i] == i + 1:\n            (ans[d[a[i]]], ans[i]) = (ans[i], ans[d[a[i]]])\n    print(len(l1))\n    print(*ans)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    mapping = {j: 0 for j in range(1, n + 1)}\n    rem = []\n    b = []\n    cnt = 0\n    for j in a:\n        mapping[j] += 1\n    for j in mapping.keys():\n        if mapping[j] == 0:\n            rem.append(j)\n    for j in range(len(a)):\n        if len(rem) == 0:\n            break\n        elif mapping[a[j]] > 1 and rem[-1] != j + 1:\n            mapping[a[j]] -= 1\n            a[j] = rem[-1]\n            rem.pop()\n            cnt += 1\n    print(n - cnt)\n    print(*a)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    mapping = [0] * (n + 1)\n    rem = []\n    b = []\n    cnt = 0\n    for j in a:\n        mapping[j] += 1\n    for j in range(1, n + 1):\n        if mapping[j] == 0:\n            rem.append(j)\n    for j in range(len(a)):\n        if mapping[a[j]] > 1 and len(rem) and (rem[-1] != j + 1):\n            b.append(rem[-1])\n            rem.pop()\n            mapping[a[j]] -= 1\n        else:\n            b.append(a[j])\n            cnt += 1\n    print(cnt)\n    print(*b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    rem = []\n    for k in a:\n        cnt[k] += 1\n    for i in range(1, n + 1):\n        if cnt[i] == 0:\n            rem.append(i)\n    b = []\n    tmp = 0\n    for i in range(n):\n        if cnt[a[i]] > 1 and rem and (rem[-1] != i + 1):\n            b.append(rem[-1])\n            rem.pop()\n            cnt[a[i]] -= 1\n        else:\n            b.append(a[i])\n            tmp += 1\n    print(tmp)\n    print(*b)", "def solve(n, a):\n    ans = [0] * (n + 1)\n    taken = [0] * (n + 1)\n    stack = []\n    count = 0\n    for i in range(1, n + 1):\n        ans[i] = a[i]\n        taken[a[i]] += 1\n    for i in range(1, n + 1):\n        if taken[i] == 0:\n            stack.append(i)\n            count += 1\n    print(n - count)\n    for i in range(1, n + 1):\n        if taken[a[i]] == 1:\n            continue\n        if len(stack) == 0:\n            break\n        top = stack[-1]\n        if i != top:\n            taken[a[i]] -= 1\n            ans[i] = top\n            stack.pop()\n    ans.pop(0)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    print(*solve(n, a))", "for i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    mapping = {j: 0 for j in range(1, n + 1)}\n    rem = []\n    b = []\n    cnt = 0\n    for j in a:\n        mapping[j] += 1\n    for j in mapping.keys():\n        if mapping[j] == 0:\n            rem.append(j)\n    for j in range(len(a)):\n        if mapping[a[j]] > 1 and len(rem) and (rem[-1] != j + 1):\n            b.append(rem[-1])\n            rem.pop()\n            mapping[a[j]] -= 1\n        else:\n            b.append(a[j])\n            cnt += 1\n    print(cnt)\n    print(*b)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    ungifted = []\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in range(1, n + 1):\n        if i not in d:\n            ungifted.append(i)\n    z = len(ungifted)\n    for i in range(n):\n        if d[a[i]] > 1:\n            x = ungifted.pop()\n            if x == i + 1:\n                ungifted.append(x)\n                ans[i] = a[i]\n            else:\n                ans[i] = x\n                d[a[i]] -= 1\n        else:\n            ans[i] = a[i]\n    print(n - z)\n    print(*ans)", "def solve(n, a):\n    unsat = set(range(1, n + 1))\n    fixed = 0\n    voulait = 0\n    nb = 0\n    for i in range(n):\n        if a[i] in unsat:\n            nb += 1\n            unsat.remove(a[i])\n        else:\n            a[i] = -a[i]\n    for i in range(n):\n        retire = 0\n        if a[i] < 0:\n            if i + 1 in unsat:\n                if len(unsat) > 1:\n                    retire = 1\n                    unsat.remove(i + 1)\n                else:\n                    fixed = i + 1\n                    voulait = -a[i]\n            a[i] = unsat.pop()\n            if retire:\n                unsat.add(i + 1)\n    if not fixed:\n        print(nb)\n        print(*a)\n        return\n    iv = a.index(voulait)\n    (a[iv], a[fixed - 1]) = (a[fixed - 1], a[iv])\n    print(nb)\n    print(*a)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(n, a)", "from collections import defaultdict\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    dic = defaultdict(list)\n    for (idx, item) in enumerate(ls, 1):\n        dic[item].append(idx)\n    to_fill = []\n    for idx in range(1, n + 1):\n        if idx not in dic:\n            to_fill.append(idx)\n    if not to_fill:\n        print(n)\n        print(' '.join(map(str, ls)))\n    else:\n        dups = []\n        for key in dic:\n            if len(dic[key]) > 1:\n                dups.append(key)\n        dups_idx = 0\n        for item in to_fill:\n            popped = dic[dups[dups_idx]].pop()\n            if item == popped:\n                temp = dic[dups[dups_idx]][-1]\n                dic[dups[dups_idx]][-1] = popped\n                popped = temp\n            ls[popped - 1] = item\n            if len(dic[dups[dups_idx]]) == 1:\n                dups_idx += 1\n        print(n - len(to_fill))\n        print(' '.join(map(str, ls)))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0 for _ in range(n + 1)]\n    rem = []\n    for i in a:\n        cnt[i] += 1\n    for i in range(1, n + 1):\n        if cnt[i] == 0:\n            rem.append(i)\n    ans = []\n    for i in range(n):\n        if cnt[a[i]] > 1 and rem and (rem[-1] != i + 1):\n            ans.append(rem.pop())\n            cnt[a[i]] -= 1\n        else:\n            ans.append(a[i])\n    print(len(set(a)))\n    print(*ans)\n    t = t - 1", "for i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    mapping = {j: 0 for j in range(1, n + 1)}\n    b = []\n    cnt = 0\n    for j in a:\n        mapping[j] += 1\n    rem = [j for j in mapping.keys() if mapping[j] == 0]\n    for j in range(len(a)):\n        if mapping[a[j]] > 1 and len(rem) and (rem[-1] != j + 1):\n            b.append(rem[-1])\n            rem.pop()\n            mapping[a[j]] -= 1\n        else:\n            b.append(a[j])\n            cnt += 1\n    print(cnt)\n    print(*b)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    rem = []\n    for k in a:\n        cnt[k] += 1\n    for i in range(1, n + 1):\n        if cnt[i] == 0:\n            rem.append(i)\n    b = []\n    tmp = 0\n    for i in range(n):\n        if cnt[a[i]] > 1 and rem and (rem[-1] != i + 1):\n            b.append(rem[-1])\n            rem.pop()\n            cnt[a[i]] -= 1\n        else:\n            b.append(a[i])\n            tmp += 1\n    print(tmp)\n    print(*b)", "from collections import deque\nI = lambda : map(int, input().split())\n\ndef solve(a):\n    n = len(a)\n    ans = [0] * n\n    ungifted = []\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in range(1, n + 1):\n        if i not in d:\n            ungifted.append(i)\n    z = len(ungifted)\n    for i in range(n):\n        if d[a[i]] > 1:\n            x = ungifted.pop()\n            if x == i + 1:\n                ungifted.append(x)\n                ans[i] = a[i]\n            else:\n                ans[i] = x\n                d[a[i]] -= 1\n        else:\n            ans[i] = a[i]\n    print(n - z)\n    print(*ans)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    A = list(I())\n    solve(A)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = a.copy()\n    k = 0\n    employee = set(range(1, n + 1))\n    for i in range(n):\n        if b[i] in employee:\n            employee.remove(b[i])\n            k += 1\n        else:\n            b[i] = -1\n    for i in range(n):\n        if b[i] == -1:\n            e1 = employee.pop()\n            if e1 != i + 1:\n                b[i] = e1\n            elif len(employee) != 0:\n                e2 = employee.pop()\n                employee.add(e1)\n                b[i] = e2\n            else:\n                b[i] = a[i]\n                aux = a[i]\n                for j in range(n):\n                    if i != j and b[j] == aux:\n                        b[j] = e1\n                        break\n    print(k)\n    print(*b, sep=' ')\n    print()", "def readline():\n    return map(int, input().split())\n\ndef rot1(seq):\n    it = iter(seq)\n    first = next(seq)\n    yield from it\n    yield first\n\ndef reorder(part, whole):\n    yield from part\n    yield from (whole - part)\n\ndef solve():\n    n = int(input())\n    receives = dict()\n    for (i, ai) in enumerate(readline()):\n        ai -= 1\n        if ai not in receives:\n            receives[ai] = i\n        else:\n            wish = ai\n    no_gift = set(range(n)) - set(receives.keys())\n    sad = set(range(n)) - set(receives.values())\n    k = len(receives)\n    if k == n - 1 and sad == no_gift:\n        x = sad.pop()\n        sad.add(receives.pop(wish))\n        receives[wish] = x\n    b = [None] * n\n    for (j, i) in receives.items():\n        b[i] = j + 1\n    loop = no_gift & sad\n    if k < n:\n        for (j, i) in zip(rot1(reorder(loop, no_gift)), reorder(loop, sad)):\n            b[i] = j + 1\n    assert all((v is not None for v in b))\n    print(k)\n    print(*b)\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        solve()\nmain()", "qtd_caso_teste = int(input())\nwhile qtd_caso_teste:\n    qtd_participantes_evento = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0 for _ in range(qtd_participantes_evento + 1)]\n    rem = []\n    for i in a:\n        cnt[i] += 1\n    for i in range(1, qtd_participantes_evento + 1):\n        if cnt[i] == 0:\n            rem.append(i)\n    ans = []\n    for i in range(qtd_participantes_evento):\n        if cnt[a[i]] > 1 and rem and (rem[-1] != i + 1):\n            ans.append(rem.pop())\n            cnt[a[i]] -= 1\n        else:\n            ans.append(a[i])\n    print(len(set(a)))\n    print(*ans)\n    qtd_caso_teste = qtd_caso_teste - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = set(a)\n    c = set(a)\n    ans = []\n    numb = []\n    for j in range(1, n + 1):\n        if j in b:\n            b.remove(j)\n        else:\n            numb.append(j)\n    print(len(set(a)))\n    pntr = 0\n    cnt = 0\n    d = {}\n    for elem in a:\n        if elem in c:\n            ans.append(elem)\n            d[elem] = cnt\n            c.remove(elem)\n        else:\n            ans.append(numb[pntr])\n            d[numb[pntr]] = cnt\n            pntr += 1\n        cnt += 1\n    for j in range(len(ans)):\n        if ans[j] == j + 1:\n            v1 = d[a[j]]\n            (ans[j], ans[v1]) = (ans[v1], ans[j])\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = [0] * n\n    temp = [0] * (n + 1)\n    b = [False] * (n + 1)\n    count = 0\n    for i in range(n):\n        if a[i] != i + 1:\n            if not b[a[i]]:\n                count += 1\n                res[i] = a[i]\n                temp[a[i]] = i\n                b[a[i]] = True\n    ind = 1\n    i = n - 1\n    while i >= 0:\n        if res[i] == 0:\n            while b[ind]:\n                ind += 1\n            if ind == i + 1:\n                b[ind] = True\n                res[i] = a[i]\n                res[temp[a[i]]] = ind\n                continue\n            res[i] = ind\n            b[ind] = True\n        i -= 1\n    print(count)\n    for i in res:\n        print(i, end=' ')\n    print('')", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    ans = [0] * n\n    remain = set([i for i in range(1, n + 1)])\n    dic = {}\n    idx = 0\n    for i in arr:\n        if i in dic:\n            dic[i].append(idx)\n        else:\n            dic[i] = [idx]\n        idx += 1\n    count = 0\n    for i in range(n):\n        if arr[i] in remain:\n            ans[i] = str(arr[i])\n            remain.remove(arr[i])\n            count += 1\n    remain = list(remain)\n    for i in range(n):\n        if ans[i] == 0:\n            temp = remain.pop()\n            if i + 1 == temp:\n                ans[i] = str(arr[i])\n                for idx in dic[arr[i]]:\n                    if idx != i:\n                        ans[idx] = str(temp)\n                        break\n            else:\n                ans[i] = str(temp)\n    print(count)\n    print(' '.join(ans))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr = [0] + arr\n    pt = [0] * (n + 1)\n    graph = [[] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        pt[i] = arr[i]\n        graph[arr[i]].append(i)\n    a = []\n    b = []\n    for i in range(1, n + 1):\n        if len(graph[i]) < 1:\n            a.append(i)\n        if len(graph[i]) > 1:\n            b.append(i)\n    while len(a):\n        x = a.pop()\n        l = graph[b[-1]]\n        y = l.pop()\n        if y == x:\n            yy = l.pop()\n            l.append(y)\n            y = yy\n        graph[x].append(y)\n        pt[y] = x\n        if len(graph[b[-1]]) == 1:\n            b.pop()\n    ans = 0\n    for i in range(1, n + 1):\n        if arr[i] != pt[i]:\n            ans = ans + 1\n    print(n - ans)\n    print(*pt[1:])", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) - 1 for x in input().split()]\n    d = dict()\n    mapp = [-1] * n\n    s = set([i for i in range(n)])\n    happy = 0\n    for a in range(n):\n        if arr[a] in s:\n            d[arr[a] + 1] = a\n            mapp[a] = arr[a] + 1\n            happy += 1\n            s.remove(arr[a])\n    left = deque(s)\n    for a in range(n):\n        if mapp[a] == -1:\n            tmp = left.pop()\n            if a == tmp and len(left) == 0:\n                sw = d[arr[a] + 1]\n                (mapp[sw], mapp[a]) = (mapp[a], mapp[sw])\n                mapp[sw] = tmp + 1\n            elif a == tmp:\n                tmp2 = left.pop()\n                mapp[a] = tmp2 + 1\n                left.append(tmp)\n            else:\n                mapp[a] = tmp + 1\n    print(happy)\n    print(*mapp)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [0] * (n + 1)\n    ans = [0] * (n + 1)\n    anss = 0\n    t = 1\n    for i in range(n):\n        if l1[l[i]] == 0:\n            ans[i + 1] = l[i]\n            l1[l[i]] = 1\n            anss += 1\n    ex = []\n    for i in range(1, n + 1):\n        if l1[i] == 0:\n            ex.append(i)\n    for i in range(1, n + 1):\n        if ans[i] == 0:\n            if ex[-1] == i:\n                if len(ex) == 1:\n                    t = 0\n                    cc = i\n                    xx = ex[-1]\n                    break\n                z = ex.pop()\n                ans[i] = ex[-1]\n                ex.pop()\n                ex.append(z)\n            else:\n                ans[i] = ex[-1]\n                ex.pop()\n    if t == 0:\n        kk = 0\n        xxx = l[cc - 1]\n        for i in range(1, n + 1):\n            if l[i - 1] == xxx:\n                ans[cc] = xxx\n                ans[i] = cc\n                kk = 1\n                break\n        if kk == 0:\n            for i in range(1, n + 1):\n                if ans[i] != l[i - 1] and i != cc:\n                    ans[cc] = ans[i]\n                    ans[i] = cc\n                    break\n    print(anss)\n    for i in range(1, n + 1):\n        print(ans[i], end=' ')\n    print()", "t = int(input())\nfor task in range(t):\n    n = int(input())\n    wishes = list(map(int, input().split()))\n    resSanta = [0] * n\n    targets = []\n    for i in range(n):\n        targets.append([])\n    res = n\n    for i in range(n):\n        targets[wishes[i] - 1].append(i)\n    curLost = 0\n    curTarget = 0\n    while curLost < n and curTarget < n:\n        while curLost < n and len(targets[curLost]) != 0:\n            curLost += 1\n        while curTarget < n and len(targets[curTarget]) < 2:\n            curTarget += 1\n        if curLost >= n or curTarget >= n:\n            break\n        res -= 1\n        if curLost == targets[curTarget][-1]:\n            targets[curLost].append(targets[curTarget].pop(0))\n        else:\n            targets[curLost].append(targets[curTarget].pop())\n    for i in range(n):\n        resSanta[targets[i][0]] = i + 1\n    print(res)\n    for i in range(n):\n        print(resSanta[i], end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[arr[i] - 1] = 1\n    b = [0] * n\n    k = 0\n    for i in range(n):\n        if a[i] == 0:\n            b[k] = i + 1\n            k += 1\n    c = [0] * n\n    result = [0] * n\n    tt = 0\n    j = 0\n    kk = 0\n    for i in range(n):\n        if c[arr[i] - 1] == 0:\n            result[i] = arr[i]\n            c[arr[i] - 1] = i + 1\n            j += 1\n        elif b[tt] == i + 1:\n            result[i] = arr[i]\n            result[c[arr[i] - 1] - 1] = b[tt]\n            c[arr[i] - 1] = i + 1\n            tt += 1\n        else:\n            result[i] = b[tt]\n            tt += 1\n    print(j)\n    for i in range(n):\n        print(result[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = [-1] * (n + 1)\n    v = {i: 0 for i in range(n + 1)}\n    k = 0\n    temp = {}\n    for i in l:\n        if i in temp:\n            continue\n        else:\n            temp[i] = 1\n            k += 1\n    t = {}\n    for i in range(n):\n        if v[l[i]] == 0:\n            v[l[i]] = 1\n            d[i + 1] = l[i]\n            t[l[i]] = i + 1\n    s = []\n    for i in v:\n        if v[i] == 0 and i != 0:\n            s.append(i)\n    s.sort()\n    idx = 0\n    for i in range(1, n + 1):\n        if d[i] == -1:\n            can = s[idx]\n            if i != can:\n                d[i] = s[idx]\n                idx += 1\n            else:\n                p = t[l[i - 1]]\n                (d[i], d[p]) = (l[i - 1], s[idx])\n                (t[l[i - 1]], t[i]) = (i, p)\n                idx += 1\n    print(k)\n    for i in range(1, n + 1):\n        print(d[i], end=' ')\n    print()", "from collections import defaultdict as dd\n\ndef solve(A, n):\n    ans = [0] * (n + 1)\n    up = set(range(1, n + 1))\n    down = set(range(1, n + 1))\n    inc = dd(list)\n    k = 0\n    for i in range(1, n + 1):\n        ai = A[i - 1]\n        inc[ai].append(i)\n        if ai in down:\n            down.remove(ai)\n            up.remove(i)\n            ans[i] = ai\n            k += 1\n    In = up.intersection(down)\n    U = list(In) + list(up.difference(In))\n    D = list(In) + list(down.difference(In))\n    ln = len(U)\n    if ln == 1 and U[0] == D[0]:\n        comm = A[U[0] - 1]\n        i = inc[comm][0]\n        ans[i] = D[0]\n        ans[U[0]] = comm\n    else:\n        for (i, it) in enumerate(U):\n            ans[it] = D[(i + 1) % ln]\n    print(k)\n    print(*ans[1:])\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = solve(A, n)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = [-1] * (n + 1)\n    v = {i: 0 for i in range(n + 1)}\n    k = len(set(l))\n    t = {}\n    for i in range(n):\n        if v[l[i]] == 0:\n            v[l[i]] = 1\n            d[i + 1] = l[i]\n            t[l[i]] = i + 1\n    s = []\n    for i in v:\n        if v[i] == 0 and i != 0:\n            s.append(i)\n    s.sort()\n    idx = 0\n    for i in range(1, n + 1):\n        if d[i] == -1:\n            can = s[idx]\n            if i != can:\n                d[i] = s[idx]\n                idx += 1\n            else:\n                p = t[l[i - 1]]\n                (d[i], d[p]) = (l[i - 1], s[idx])\n                (t[l[i - 1]], t[i]) = (i, p)\n                idx += 1\n    print(k)\n    for i in range(1, n + 1):\n        print(d[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = [-1] * (n + 1)\n    v = {i: 0 for i in range(n + 1)}\n    k = 0\n    temp = {}\n    for i in l:\n        if i in temp:\n            continue\n        else:\n            temp[i] = 1\n            k += 1\n    t = {}\n    for i in range(n):\n        if v[l[i]] == 0:\n            v[l[i]] = 1\n            d[i + 1] = l[i]\n            t[l[i]] = i + 1\n    s = []\n    for i in v:\n        if v[i] == 0 and i != 0:\n            s.append(i)\n    idx = 0\n    for i in range(1, n + 1):\n        if d[i] == -1:\n            can = s[idx]\n            if i != can:\n                d[i] = s[idx]\n                idx += 1\n            else:\n                p = t[l[i - 1]]\n                (d[i], d[p]) = (l[i - 1], s[idx])\n                (t[l[i - 1]], t[i]) = (i, p)\n                idx += 1\n    print(k)\n    for i in range(1, n + 1):\n        print(d[i], end=' ')\n    print()"]