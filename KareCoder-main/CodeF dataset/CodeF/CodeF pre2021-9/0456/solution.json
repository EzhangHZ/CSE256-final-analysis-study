["def linp():\n    return list(map(int, input().split()))\n\ndef minp():\n    return map(int, input().split())\n\ndef iinp():\n    return int(input())\n\ndef test():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef solve():\n    n = int(input())\n    s = input()\n    v = {(0, 0): 0}\n    curr = (0, 0)\n    ans = 1000000000\n    (a, b) = (-1, -1)\n    for i in range(n):\n        if s[i] == 'L':\n            curr = (curr[0] - 1, curr[1])\n        elif s[i] == 'R':\n            curr = (curr[0] + 1, curr[1])\n        elif s[i] == 'U':\n            curr = (curr[0], curr[1] + 1)\n        else:\n            curr = (curr[0], curr[1] - 1)\n        if curr in v:\n            d = i + 1 - v[curr]\n            if d < ans:\n                ans = d\n                a = v[curr] + 1\n                b = i + 1\n            v[curr] = i + 1\n        else:\n            v[curr] = i + 1\n    if ans == 1000000000:\n        print(-1)\n    else:\n        print(a, b)\n\ndef main():\n    for _ in range(test()):\n        solve()\nmain()", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    s = insr()\n    coord = {(0, 0): 0}\n    left = 0\n    up = 0\n    maxer = 999999999999999\n    coords = None\n    for i in range(n):\n        if s[i] == 'L':\n            left -= 1\n        elif s[i] == 'R':\n            left += 1\n        elif s[i] == 'U':\n            up += 1\n        else:\n            up -= 1\n        if (left, up) in coord:\n            if i + 1 - coord[left, up] < maxer:\n                maxer = i + 1 - coord[left, up]\n                coords = (coord[left, up], i + 1)\n        coord[left, up] = i + 1\n    if maxer == 999999999999999:\n        print(-1)\n    else:\n        print(coords[0] + 1, coords[1])", "def inp():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    s = input()\n    d = {(0, 0): -1}\n    ll = -1\n    (x, y) = (0, 0)\n    res = (-1, -1)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        if s[i] == 'R':\n            x += 1\n        if s[i] == 'U':\n            y += 1\n        if s[i] == 'D':\n            y -= 1\n        if (x, y) not in d:\n            d[x, y] = i\n        else:\n            dist = i - d[x, y]\n            if dist < ll or ll == -1:\n                ll = dist\n                res = (d[x, y] + 2, i + 1)\n            if dist == 2:\n                break\n            d[x, y] = i\n    if ll != -1:\n        print(*res)\n    else:\n        print(ll)\n\ndef main():\n    t = int(input())\n    while t:\n        solve()\n        t -= 1\nmain()", "def check(n, s):\n    d = dict()\n    (x, y) = (0, 0)\n    d[x, y] = 0\n    (l, r) = (-1, n)\n    for i in range(n):\n        c = s[i]\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        if (x, y) in d and i - d[x, y] < r - l:\n            (l, r) = (d[x, y], i)\n        d[x, y] = i + 1\n    if l != -1:\n        return (l + 1, r + 1)\n    return (-1,)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(*check(n, s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = (0, 0)\n    dic = {(0, 0): 0}\n    (l, r) = (-1, n)\n    for (i, a) in enumerate(s):\n        (f, s) = cur\n        if a == 'L':\n            cur = (f - 1, s)\n        if a == 'R':\n            cur = (f + 1, s)\n        if a == 'U':\n            cur = (f, s + 1)\n        if a == 'D':\n            cur = (f, s - 1)\n        if cur in dic:\n            if i - dic[cur] + 1 < r - l + 1:\n                (l, r) = (dic[cur], i)\n        dic[cur] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = (0, 0)\n    dic = {(0, 0): 0}\n    (l, r) = (-1, n)\n    for (i, a) in enumerate(s):\n        (f, s) = cur\n        if a == 'L':\n            cur = (f - 1, s)\n        if a == 'R':\n            cur = (f + 1, s)\n        if a == 'U':\n            cur = (f, s + 1)\n        if a == 'D':\n            cur = (f, s - 1)\n        if cur in dic:\n            if i - dic[cur] + 1 < r - l + 1:\n                (l, r) = (dic[cur], i)\n        dic[cur] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "def cal(x, y):\n    return x * 47196412 + y\n\ndef rua():\n    mp = {}\n    n = int(input())\n    s = input()\n    ans = n + 1\n    x = 0\n    y = 0\n    s1 = -1\n    s2 = -1\n    l = cal(x, y)\n    mp[l] = 1\n    i = 0\n    for j in s:\n        i = i + 1\n        if j == 'U':\n            y = y + 1\n        elif j == 'D':\n            y = y - 1\n        elif j == 'L':\n            x = x - 1\n        elif j == 'R':\n            x = x + 1\n        l = cal(x, y)\n        if l in mp:\n            tmp = i + 1 - mp[l]\n            if tmp < ans:\n                ans = tmp\n                s1 = mp[l]\n                s2 = i\n        mp[l] = i + 1\n    if ans == n + 1:\n        print(-1)\n    else:\n        print(s1, s2)\nt = int(input())\nwhile t:\n    rua()\n    t = t - 1", "def remover(n, journey):\n    result_left = 1\n    result_right = 10 ** 7\n    history = dict()\n    history[0, 0] = 0\n    x = 0\n    y = 0\n    for (i, step) in enumerate(journey):\n        if step == 'U':\n            y += 1\n        elif step == 'D':\n            y -= 1\n        elif step == 'R':\n            x += 1\n        elif step == 'L':\n            x -= 1\n        if (x, y) in history:\n            if result_right - result_left + 1 > i + 1 - history[x, y]:\n                result_left = history[x, y] + 1\n                result_right = i + 1\n        history[x, y] = i + 1\n    return (result_left, result_right)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        journey = list(input())\n        (border_left, border_right) = remover(n, journey)\n        if border_right == 10 ** 7:\n            print(-1)\n            continue\n        else:\n            print(border_left, border_right)\n    return 0\nmain()", "def calc(n, s):\n    (kv, res_min, res) = ({(0, 0): 0}, len(s) + 1, None)\n    move = {'R': (1, 0), 'L': (-1, 0), 'D': (0, -1), 'U': (0, 1)}\n    pos = (0, 0)\n    for (i, m) in enumerate(s):\n        pos = (pos[0] + move[m][0], pos[1] + move[m][1])\n        if pos in kv:\n            cur_min = i - kv[pos] + 1\n            if res_min > cur_min:\n                res_min = cur_min\n                res = (kv[pos] + 1, i + 1)\n        kv[pos] = i + 1\n    if res:\n        return (res[0], res[1])\n    return (None, -1)\nN = int(input())\ncases = []\nfor _ in range(N):\n    n = input()\n    c = input()\n    cases.append((n, c))\nfor (n, c) in cases:\n    (i, j) = calc(n, c)\n    if j == -1:\n        print(-1)\n    else:\n        print(i, j)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    path = {}\n    path[0, 0] = 0\n    (x, y) = (0, 0)\n    r = n + 1\n    sstring = 0\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        if (x, y) in path:\n            l = i - path[x, y]\n            if l < r:\n                r = l\n                sstring = (path[x, y] + 1, i + 1)\n        path[x, y] = i + 1\n    if sstring:\n        print(*sstring)\n    else:\n        print(-1)", "import sys\nfor _ in range(int(input())):\n    m = 3000000\n    n = int(input())\n    s = input()\n    Map = {0: -1}\n    ans = 0\n    f = 0\n    minans = sys.maxsize\n    prev = -1\n    curr = -1\n    for i in range(len(s)):\n        if s[i] == 'L':\n            ans += 1\n        elif s[i] == 'R':\n            ans -= 1\n        elif s[i] == 'U':\n            ans += m\n        elif s[i] == 'D':\n            ans -= m\n        if ans not in Map:\n            Map[ans] = i\n        else:\n            if i - Map[ans] < minans:\n                minans = i - Map[ans]\n                prev = Map[ans] + 2\n                curr = i + 1\n            Map[ans] = i\n    if minans == sys.maxsize:\n        print('-1')\n    else:\n        print(prev, curr)", "def solve(path_length, path):\n\n    def step(cur_x, cur_y, direction):\n        if direction == 'L':\n            return (cur_x - 1, cur_y)\n        elif direction == 'U':\n            return (cur_x, cur_y + 1)\n        elif direction == 'R':\n            return (cur_x + 1, cur_y)\n        else:\n            return (cur_x, cur_y - 1)\n    passed_points = {(0, 0): 0}\n    cycles = []\n    temp_x = 0\n    temp_y = 0\n    cur_min_len = path_length\n    cur_start = -1\n    for i in range(path_length):\n        (temp_x, temp_y) = step(temp_x, temp_y, path[i])\n        if passed_points.get((temp_x, temp_y)) is not None:\n            t_start = passed_points[temp_x, temp_y]\n            t_length = i - t_start\n            if t_length < cur_min_len:\n                cur_min_len = t_length\n                cur_start = t_start\n        passed_points[temp_x, temp_y] = i + 1\n    return cur_start if cur_start == -1 else f'{cur_start + 1} {cur_start + cur_min_len + 1}'\nt = int(input())\nfor m_i in range(0, t):\n    temp_length = int(input())\n    temp_path = input()\n    result = solve(temp_length, temp_path)\n    print(result)", "directions = {'L': (-1, 0), 'R': (1, 0), 'D': (0, -1), 'U': (0, 1)}\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [directions[i] for i in input()]\n    point_x = 0\n    point_y = 0\n    history = {(0, 0): 0}\n    best_substring_start = 0\n    best_substring_end = n\n    solution_found = False\n    for j in range(n):\n        point_x += s[j][0]\n        point_y += s[j][1]\n        if (point_x, point_y) in history:\n            solution_found = True\n            if best_substring_end - best_substring_start > j + 1 - history[point_x, point_y]:\n                best_substring_end = j + 1\n                best_substring_start = history[point_x, point_y]\n        history[point_x, point_y] = j + 1\n    if solution_found:\n        print(best_substring_start + 1, best_substring_end)\n    else:\n        print(-1)", "def result(s, k):\n    left = -1\n    r = k\n    d = {}\n    l = (0, 0)\n    d[l] = 0\n    for i in range(0, len(s)):\n        x = l[0]\n        y = l[1]\n        if s[i] == 'L':\n            x = x - 1\n        elif s[i] == 'R':\n            x = x + 1\n        elif s[i] == 'U':\n            y = y + 1\n        else:\n            y = y - 1\n        l = (x, y)\n        if l in d:\n            if i - d[l] + 1 < r - left + 1:\n                r = i\n                left = d[l]\n        d[l] = i + 1\n    if left == -1:\n        print(-1)\n    else:\n        print(left + 1, r + 1)\nt = int(input())\nwhile t > 0:\n    k = int(input())\n    s = input()\n    result(s, k)\n    t = t - 1", "def robotwalk(n, s):\n    x = y = 0\n    d = {(x, y): 0}\n    flag = 0\n    mini = 2147483647\n    ans = [0, 0]\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        if s[i] == 'R':\n            x += 1\n        if s[i] == 'U':\n            y += 1\n        if s[i] == 'D':\n            y -= 1\n        if (x, y) in d:\n            l = d[x, y] + 1\n            r = i + 1\n            if r - l < mini:\n                mini = r - l\n                ans = [l, r]\n        d[x, y] = i + 1\n    if sum(ans) == 0:\n        print(-1)\n    else:\n        print(*ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    robotwalk(n, s)", "def main():\n    n = int(input())\n    string = str(input())\n    d = {}\n    x = 0\n    y = 0\n    l = -1\n    r = n + 1\n    d[x, y] = 0\n    for i in range(len(string)):\n        if string[i] == 'L':\n            x -= 1\n        if string[i] == 'R':\n            x += 1\n        if string[i] == 'U':\n            y += 1\n        if string[i] == 'D':\n            y -= 1\n        if d.get((x, y)) != None:\n            if i - d[x, y] + 1 < r - l + 1:\n                l = d[x, y]\n                r = i\n        d[x, y] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)\n    return\n\ndef test():\n    t = int(input())\n    while t:\n        main()\n        t -= 1\ntest()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    d = {(0, 0): 0}\n    (x, y) = (0, 0)\n    time = 0\n    ans = [-1]\n    for i in s:\n        time += 1\n        if i == 'D':\n            y -= 1\n        elif i == 'U':\n            y += 1\n        elif i == 'L':\n            x -= 1\n        else:\n            x += 1\n        if (x, y) not in d:\n            pass\n        elif len(ans) == 1 or ans[1] - ans[0] > time - d[x, y]:\n            ans = [d[x, y] + 1, time]\n        d[x, y] = time\n    print(*ans)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    s = input()\n    m = {}\n    x = 0\n    y = 0\n    c = False\n    r = -1\n    l = -1\n    lnn = 1000000\n    m[x, y] = 0\n    for i in range(n):\n        if s[i] == 'R':\n            x += 1\n        if s[i] == 'L':\n            x -= 1\n        if s[i] == 'U':\n            y += 1\n        if s[i] == 'D':\n            y -= 1\n        if (x, y) in m:\n            ln = i - m[x, y] + 1\n            if ln < lnn:\n                lnn = ln\n                l = m[x, y] + 1\n                r = i + 1\n            c = True\n        m[x, y] = i + 1\n    if not c:\n        print(-1)\n    else:\n        print(l, r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    d = dict()\n    d[0, 0] = 0\n    (x, y) = (0, 0)\n    (l, r) = (-1, n)\n    for (i, c) in enumerate(s):\n        x += (1 if c == 'R' else 0) - (1 if c == 'L' else 0)\n        y += (1 if c == 'U' else 0) - (1 if c == 'D' else 0)\n        if (x, y) in d:\n            if i - d[x, y] + 1 < r - l + 1:\n                (l, r) = (d[x, y], i)\n        d[x, y] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "def solve(n, s):\n    x = 0\n    y = 0\n    l = -n\n    r = n\n    N = 1000000000\n    dp = {}\n    dp[0] = 0\n    for (i, d) in enumerate(s, start=1):\n        if d == 'L':\n            x += 1\n        if d == 'R':\n            x -= 1\n        if d == 'U':\n            y += 1\n        if d == 'D':\n            y -= 1\n        try:\n            j = dp[x * N + y] + 1\n            if i - j < r - l:\n                (l, r) = (j, i)\n        except:\n            pass\n        dp[x * N + y] = i\n    if l == -n and r == n:\n        print('-1')\n    else:\n        print(l, r)\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        solve(n, s)\nmain()", "num_t = int(input())\nfor _ in range(num_t):\n    input()\n    path = input()\n    diff = float('inf')\n    l = r = None\n    last = {(0, 0): -1}\n    (x, y) = (0, 0)\n    for (i, m) in enumerate(path):\n        if m == 'L':\n            x -= 1\n        elif m == 'R':\n            x += 1\n        elif m == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in last:\n            last_i = last[x, y]\n            if i - last_i < diff:\n                l = last_i\n                r = i\n                diff = i - last_i\n        last[x, y] = i\n    if l == None:\n        print(-1)\n    else:\n        l += 1\n        r += 1\n        print(l + 1, r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (l, r) = (0, n)\n    p = (0, 0)\n    d = {p: 1}\n    index = 1\n    for v in s:\n        if v == 'L':\n            p = (p[0] - 1, p[1])\n        elif v == 'R':\n            p = (p[0] + 1, p[1])\n        elif v == 'U':\n            p = (p[0], p[1] + 1)\n        else:\n            p = (p[0], p[1] - 1)\n        if p in d and index - d[p] < r - l:\n            (l, r) = (d[p], index)\n        index += 1\n        d[p] = index\n    if l:\n        print(l, r)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    input()\n    (x, y) = (0, 0)\n    minlen = 10 ** 7\n    path = {(0, 0): -1}\n    for (pos, step) in enumerate(input()):\n        if step == 'U':\n            y += 1\n        elif step == 'D':\n            y -= 1\n        elif step == 'L':\n            x -= 1\n        elif step == 'R':\n            x += 1\n        if (x, y) in path:\n            if minlen > pos - path[x, y]:\n                minlen = pos - path[x, y]\n                mark = path[x, y] + 2\n        path[x, y] = pos\n    if minlen < 10 ** 6:\n        print(mark, mark + minlen - 1)\n    else:\n        print(-1)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    k = (0, 0)\n    d = {}\n    d[k] = -1\n    s1 = (0, 0)\n    min1 = 1000000000000000\n    for i in range(n):\n        if s[i] == 'L':\n            k = (k[0] - 1, k[1])\n        elif s[i] == 'R':\n            k = (k[0] + 1, k[1])\n        elif s[i] == 'D':\n            k = (k[0], k[1] - 1)\n        else:\n            k = (k[0], k[1] + 1)\n        if d.get(k) != None:\n            if i - d[k] < min1:\n                min1 = i - d[k]\n                s1 = (d[k] + 1, i)\n        d[k] = i\n    if min1 == 1000000000000000:\n        print(-1)\n    else:\n        print(s1[0] + 1, s1[1] + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dic = {(0, 0): -1}\n    x = 0\n    y = 0\n    least_dist = -1\n    least = (-1, -1)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        if s[i] == 'R':\n            x += 1\n        if s[i] == 'U':\n            y += 1\n        if s[i] == 'D':\n            y -= 1\n        if (x, y) not in dic:\n            dic[x, y] = i\n        else:\n            dist = i - dic[x, y]\n            if least_dist > dist or least_dist == -1:\n                least_dist = dist\n                least = (dic[x, y] + 2, i + 1)\n            if dist == 2:\n                break\n            dic[x, y] = i\n    if least_dist == -1 or least[0] == least[1]:\n        print(-1)\n    else:\n        print(least[0], least[1], sep=' ')", "t = int(input())\nfor tests in range(t):\n    size = input()\n    data = input()\n    updateX = {'L': -1, 'R': 1, 'U': 0, 'D': 0}\n    updateY = {'L': 0, 'R': 0, 'U': 1, 'D': -1}\n    minreq = len(data) + 2\n    points = {(0, 0): 0}\n    (x, y, l, r) = (0, 0, 0, 0)\n    for (i, s) in enumerate(data):\n        x += updateX[s]\n        y += updateY[s]\n        if (x, y) in points:\n            j = points[x, y]\n            if i + 1 - j < minreq:\n                minreq = i + 1 - j\n                l = j + 1\n                r = i + 1\n        points[x, y] = i + 1\n    if minreq == len(data) + 2:\n        print(-1)\n    else:\n        print(l, r)", "test = int(input())\nfor ___ in range(test):\n    n = int(input())\n    s = input()\n    x = 0\n    y = 0\n    coordinates = {(x, y): -1}\n    min = 2 ** 31\n    start = -1\n    stop = -1\n    j = 0\n    for i in s:\n        if i == 'R':\n            x += 1\n        elif i == 'L':\n            x -= 1\n        elif i == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in coordinates:\n            ind = coordinates[x, y] + 1\n            if j - ind < min:\n                start = ind\n                stop = j\n                min = stop - start\n            coordinates[x, y] = j\n        else:\n            coordinates[x, y] = j\n        j += 1\n    if start != -1:\n        print(start + 1, stop + 1)\n    else:\n        print(-1)", "def solve():\n    lenth = int(input())\n    command = input()\n    l = -1\n    r = lenth\n    dic = {}\n    curx = 0\n    cury = 0\n    dic[curx, cury] = 0\n    for i in range(lenth):\n        if command[i] == 'L':\n            curx -= 1\n        if command[i] == 'R':\n            curx += 1\n        if command[i] == 'U':\n            cury += 1\n        if command[i] == 'D':\n            cury -= 1\n        if (curx, cury) in dic.keys():\n            if i - dic[curx, cury] + 1 < r - l + 1:\n                l = dic[curx, cury]\n                r = i\n        dic[curx, cury] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)\nT = int(input())\nfor _ in range(T):\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    d = dict()\n    x = 0\n    y = 0\n    move = 0\n    d[x, y] = move\n    n = int(input())\n    bestmove = math.inf\n    (bl, br) = (-1, -1)\n    for c in input():\n        move += 1\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        if (x, y) in d and move - d[x, y] < bestmove:\n            bestmove = move - d[x, y]\n            bl = d[x, y]\n            br = move\n        d[x, y] = move\n    if bl != -1:\n        print(bl + 1, br)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    d = dict()\n    (x, y) = (0, 0)\n    move = 0\n    d[x, y] = move\n    n = int(input())\n    bestmove = math.inf\n    (bl, br) = (-1, -1)\n    for c in input():\n        move += 1\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        if (x, y) in d and move - d[x, y] < bestmove:\n            bestmove = move - d[x, y]\n            bl = d[x, y]\n            br = move\n        d[x, y] = move\n    if bl != -1:\n        print(bl + 1, br)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    arr = list(input())\n    x = y = 0\n    d = {}\n    d[x, y] = 0\n    start = -1\n    end = n\n    for i in range(n):\n        if arr[i] == 'R':\n            y += 1\n        elif arr[i] == 'L':\n            y -= 1\n        elif arr[i] == 'U':\n            x += 1\n        elif arr[i] == 'D':\n            x -= 1\n        if (x, y) in d:\n            if i - d[x, y] < end - start:\n                end = i\n                start = d[x, y]\n        d[x, y] = i + 1\n    if start == -1:\n        print(-1)\n    else:\n        print(start + 1, end + 1)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom sys import stdin, stdout\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache\nfrom bisect import bisect, bisect_left\nfrom heapq import heapify, heappush, heappop, heappushpop\nfrom itertools import permutations, combinations\nmod = 10 ** 9 + 7\ninf = math.inf\n\ndef solve(s):\n    moves = {'L': [-1, 0], 'R': [1, 0], 'U': [0, 1], 'D': [0, -1]}\n    mn_dis = inf\n    (l, r) = (None, None)\n    (x, y) = (0, 0)\n    seen = {(0, 0): 0}\n    for i in range(n):\n        (dx, dy) = moves[s[i]]\n        (x, y) = (x + dx, y + dy)\n        if (x, y) in seen:\n            j = seen[x, y]\n            if i - j < mn_dis:\n                mn_dis = i - j\n                (l, r) = (j, i)\n        seen[x, y] = i + 1\n    if mn_dis == inf:\n        print(-1)\n        return\n    print(l + 1, r + 1)\n    return\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    solve(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    res = [0, 0]\n    c = {tuple(res): -1}\n    mn = 10 ** 100\n    z = []\n    for j in range(n):\n        if s[j] == 'U':\n            res[1] -= 1\n        elif s[j] == 'D':\n            res[1] += 1\n        elif s[j] == 'L':\n            res[0] -= 1\n        else:\n            res[0] += 1\n        if tuple(res) in c:\n            if mn > j - c[tuple(res)]:\n                mn = j - c[tuple(res)]\n                z = [c[tuple(res)], j]\n        c[tuple(res)] = j\n    if mn != 10 ** 100:\n        print(str(z[0] + 2) + ' ' + str(z[1] + 1))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input()).upper()\n    a = [0, 0]\n    d = {}\n    d[tuple(a)] = -1\n    l = -1\n    r = n\n    for i in range(n):\n        if s[i] == 'L':\n            a[0] -= 1\n        elif s[i] == 'R':\n            a[0] += 1\n        elif s[i] == 'D':\n            a[1] -= 1\n        elif s[i] == 'U':\n            a[1] += 1\n        if tuple(a) in d and r - l + 1 > i - d[tuple(a)]:\n            l = d[tuple(a)] + 1\n            r = i\n        d[tuple(a)] = i\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "import math\nt = int(input())\nfor i in range(t):\n    d = dict()\n    (x, y) = (0, 0)\n    move = 0\n    d[x, y] = move\n    n = int(input())\n    bestmove = math.inf\n    (bl, br) = (-1, -1)\n    for c in input():\n        move += 1\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        if (x, y) in d and move - d[x, y] < bestmove:\n            bestmove = move - d[x, y]\n            bl = d[x, y]\n            br = move\n        d[x, y] = move\n    if bl != -1:\n        print(bl + 1, br)\n    else:\n        print(-1)", "for i in range(int(input())):\n    input()\n    e = [i for i in input()]\n    vm = 0\n    hm = 0\n    sp = {(0, 0): 0}\n    s = 0\n    ret = []\n    m = 1000000\n    for i in e:\n        s += 1\n        if i == 'L':\n            hm -= 1\n        elif i == 'R':\n            hm += 1\n        elif i == 'U':\n            vm += 1\n        else:\n            vm -= 1\n        if (vm, hm) in sp:\n            sc = s - sp[vm, hm]\n            if sc < m:\n                m = sc\n                ret = [sp[vm, hm], s]\n        sp[vm, hm] = s\n    if len(ret):\n        print(ret[0] + 1, ret[1])\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    hor = 0\n    ver = 0\n    minim = 1000000\n    sml = 0\n    lar = 0\n    prev = {}\n    prev[0, 0] = 0\n    for ind in range(len(s)):\n        i = s[ind]\n        if i == 'L':\n            hor -= 1\n            x = (hor, ver)\n        elif i == 'R':\n            hor += 1\n            x = (hor, ver)\n        elif i == 'U':\n            ver += 1\n            x = (hor, ver)\n        else:\n            ver -= 1\n            x = (hor, ver)\n        if x not in prev:\n            prev[x] = ind + 1\n        else:\n            if ind + 1 - prev[x] < minim:\n                minim = ind + 1 - prev[x]\n                sml = prev[x]\n                lar = ind + 1\n            prev[x] = ind + 1\n    if minim < 1000000:\n        print(str(sml + 1) + ' ' + str(lar))\n    else:\n        print(-1)", "t = int(input())\nfor you in range(t):\n    n = int(input())\n    s = input()\n    ans = 5\n    left = 0\n    right = 0\n    l = []\n    z = 10 ** 9\n    left = 0\n    right = 0\n    for i in s:\n        if i == 'L':\n            l.append(1)\n        elif i == 'R':\n            l.append(-1)\n        elif i == 'U':\n            l.append(z)\n        else:\n            l.append(-z)\n    hashi = dict()\n    hashi[0] = -1\n    ans = z\n    pref = 0\n    for i in range(n):\n        pref += l[i]\n        if pref in hashi:\n            if i - hashi[pref] < ans:\n                ans = i - hashi[pref]\n                left = hashi[pref] + 2\n                right = i + 1\n        hashi[pref] = i\n    if ans == z:\n        print(-1)\n        continue\n    print(left, right)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    arr = list(input())\n    x = y = 0\n    d = {}\n    d[x, y] = 0\n    l = -1\n    r = n\n    for i in range(n):\n        if arr[i] == 'R':\n            y += 1\n        elif arr[i] == 'L':\n            y -= 1\n        elif arr[i] == 'U':\n            x += 1\n        elif arr[i] == 'D':\n            x -= 1\n        if (x, y) in d:\n            if i - d[x, y] < r - l:\n                r = i\n                l = d[x, y]\n        d[x, y] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (x, y) = (0, 0)\n    d = {(0, 0): 0}\n    m = 10000000000\n    (c1, c2) = (0, 0)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        if (x, y) in d:\n            a = d[x, y]\n            b = i + 1\n            if b - a < m:\n                m = b - a\n                (c1, c2) = (a + 1, b)\n            d[x, y] = i + 1\n        else:\n            d[x, y] = i + 1\n    if m == 10000000000:\n        print(-1)\n    else:\n        print(c1, c2)", "t = int(input())\nfor l in range(t):\n    H = 0\n    V = 0\n    n = int(input())\n    s = input()\n    j = 0\n    ans = 3 * 10 ** 5\n    d = dict()\n    ind1 = 0\n    ind2 = 0\n    d[0, 0] = 0\n    for i in s:\n        j += 1\n        if i == 'L':\n            H -= 1\n        elif i == 'R':\n            H += 1\n        elif i == 'U':\n            V += 1\n        elif i == 'D':\n            V -= 1\n        if (H, V) in d.keys():\n            if ans > j - d[H, V]:\n                ans = j - d[H, V]\n                ind1 = d[H, V]\n                ind2 = j\n            d[H, V] = j\n        else:\n            d[H, V] = j\n    if ind1 == 0 and ind2 == 0:\n        print(-1)\n    else:\n        print(ind1 + 1, ind2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    m = {}\n    cp = (0, 0)\n    m[cp] = -1\n    (l, r) = (-1, n)\n    for i in range(len(s)):\n        if s[i] == 'L':\n            cp = (cp[0] - 1, cp[1])\n        elif s[i] == 'R':\n            cp = (cp[0] + 1, cp[1])\n        elif s[i] == 'U':\n            cp = (cp[0], cp[1] + 1)\n        else:\n            cp = (cp[0], cp[1] - 1)\n        if cp in m and r - l + 1 > i - m[cp]:\n            (l, r) = (m[cp] + 1, i)\n        m[cp] = i\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "test_cases = int(input())\nfor test_case in range(test_cases):\n    moves_len = int(input())\n    moves = list(input())\n    visited_points = dict()\n    x = 0\n    y = 0\n    visited_points[x, y] = -1\n    minimum_substring = None\n    minimum_substring_len = moves_len + 10\n    for index in range(moves_len):\n        if moves[index] == 'L':\n            x -= 1\n        elif moves[index] == 'R':\n            x += 1\n        elif moves[index] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in visited_points:\n            starting_point = visited_points[x, y]\n            if index - starting_point < minimum_substring_len:\n                minimum_substring = (starting_point, index)\n                minimum_substring_len = index - starting_point\n        visited_points[x, y] = index\n    if not minimum_substring:\n        print('-1')\n    else:\n        print(minimum_substring[0] + 2, minimum_substring[1] + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (x, y) = (0, 0)\n    d = dict()\n    d[0, 0] = 0\n    Min = 10 ** 9\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d and Min > i + 1 - d[x, y]:\n            Min = i + 1 - d[x, y]\n            k1 = i + 1\n            k2 = d[x, y] + 1\n        d[x, y] = i + 1\n    if Min == 10 ** 9:\n        print(-1)\n    else:\n        print(k2, k1)", "import sys\n\ndef query():\n    n = int(input())\n    s = input()\n    point = {}\n    point[0, 0] = -1\n    cur = [0, 0]\n    min = 1000000000.0\n    l = r = -2\n    for (i, x) in enumerate(s):\n        if x == 'L':\n            cur[0] -= 1\n        if x == 'R':\n            cur[0] += 1\n        if x == 'U':\n            cur[1] += 1\n        if x == 'D':\n            cur[1] -= 1\n        now = tuple(cur)\n        if now in point:\n            if i - point[now] < min:\n                min = i - point[now]\n                l = point[now]\n                r = i\n        point[now] = i\n    if l == -2:\n        print(-1)\n    else:\n        print(l + 2, r + 1)\nq = int(input())\nfor i in range(0, q):\n    query()", "def main():\n    map = {}\n    n = int(input())\n    s = input()\n    curX = 0\n    curY = 0\n    index = 0\n    map[curX, curY] = [index]\n    for c in s:\n        index += 1\n        if c == 'L':\n            curX -= 1\n        elif c == 'R':\n            curX += 1\n        elif c == 'U':\n            curY += 1\n        elif c == 'D':\n            curY -= 1\n        if (curX, curY) in map:\n            map[curX, curY].append(index)\n        else:\n            map[curX, curY] = [index]\n    minDif = 1000000\n    a = -1\n    b = -1\n    for node in map:\n        if len(map[node]) > 1:\n            prev = None\n            for x in map[node]:\n                if prev is not None:\n                    if x - prev < minDif:\n                        minDif = x - prev\n                        a = prev\n                        b = x\n                prev = x\n    if a >= 0 and b >= 0:\n        print(a + 1, ' ', b)\n    else:\n        print(-1)\nt = int(input())\nfor i in range(t):\n    main()", "m = int(input())\nfor xx in range(m):\n    n = int(input())\n    s = str(input())\n    x = 0\n    y = 0\n    d = {(x, y): 0}\n    wyn = [0, 0]\n    curr_min = 999999999999\n    for z in range(n):\n        if s[z] == 'L':\n            x += 1\n        elif s[z] == 'R':\n            x -= 1\n        elif s[z] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d:\n            if z - d[x, y] < curr_min:\n                wyn = [d[x, y], z]\n                curr_min = z - d[x, y]\n        d[x, y] = z + 1\n    if wyn == [0, 0]:\n        print(-1)\n    else:\n        print(wyn[0] + 1, wyn[1] + 1)", "n = int(input())\nfor i in range(n):\n    m = float('inf')\n    i1 = i2 = -1\n    l = int(input())\n    path = input()\n    pos = (0, 0)\n    hash = dict()\n    hash[pos] = 0\n    for (i, ch) in enumerate(path):\n        i += 1\n        if ch == 'R':\n            pos = (pos[0] + 1, pos[1])\n        elif ch == 'L':\n            pos = (pos[0] - 1, pos[1])\n        elif ch == 'U':\n            pos = (pos[0], pos[1] + 1)\n        else:\n            pos = (pos[0], pos[1] - 1)\n        if pos in hash:\n            iprev = hash[pos]\n            if i - iprev < m:\n                m = i - iprev\n                (i1, i2) = (iprev, i)\n        hash[pos] = i\n    print('{} {}'.format(i1 + 1, i2) if i1 != -1 else -1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    d = dict()\n    (x, y) = (0, 0)\n    d[x, y] = 0\n    c = n + 1\n    ans = (-1,)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d:\n            b = i - d[x, y]\n            if b < c:\n                c = b\n                ans = (d[x, y] + 1, i + 1)\n        d[x, y] = i + 1\n    print(*ans)", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    s = input()\n    A = {}\n    k = n + 1\n    (x, y) = (0, 0)\n    A[0] = {}\n    A[0][0] = -1\n    for j in range(n):\n        if s[j] == 'L':\n            x -= 1\n        elif s[j] == 'R':\n            x += 1\n        elif s[j] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if x not in A:\n            A[x] = {}\n            A[x][y] = j\n        elif y not in A[x]:\n            A[x][y] = j\n        else:\n            l = A[x][y]\n            if j - l < k:\n                k = j - l\n                (a, b) = (l, j)\n            A[x][y] = j\n    if k == n + 1:\n        print(-1)\n    else:\n        print(a + 2, b + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dic = {(0, 0): 0}\n    (x, y, min_l) = (0, 0, [-1, -1, float('inf')])\n    for (i, el) in enumerate(s):\n        if el == 'L':\n            x -= 1\n        elif el == 'R':\n            x += 1\n        elif el == 'U':\n            y += 1\n        else:\n            y -= 1\n        try:\n            t = dic[x, y]\n            if min_l[2] > i + 1 - t:\n                (min_l[0], min_l[1], min_l[2]) = (t + 1, i + 1, i - t)\n            dic[x, y] = i + 1\n        except:\n            dic[x, y] = i + 1\n    if min_l[0] != -1:\n        print(*min_l[:2])\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    coord = {(0, 0): 0}\n    x = 0\n    y = 0\n    length = 10 ** 7\n    substr = (-1, -1)\n    i = 1\n    for letter in s:\n        if letter == 'L':\n            x -= 1\n        elif letter == 'R':\n            x += 1\n        elif letter == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in coord:\n            if i - coord[x, y] < length:\n                length = i - coord[x, y]\n                substr = (coord[x, y] + 1, i)\n        coord[x, y] = i\n        i += 1\n    if substr == (-1, -1):\n        print(-1)\n    else:\n        print(*substr)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    A = input()\n    (X, Y) = (0, 0)\n    c = -2\n    l = []\n    dic = dict()\n    dic[X, Y] = 0\n    m = n\n    j = 1\n    (xx, yy) = (0, 0)\n    for i in range(n):\n        if A[i] == 'R':\n            X += 1\n        elif A[i] == 'L':\n            X -= 1\n        elif A[i] == 'D':\n            Y -= 1\n        else:\n            Y += 1\n        if (X, Y) in dic:\n            c = dic[X, Y]\n            dic[X, Y] = i + 1\n            if m > abs(i - c):\n                xx = c + 1\n                yy = i + 1\n                m = abs(i - c)\n        else:\n            dic[X, Y] = i + 1\n    if c == -2:\n        print(-1)\n    else:\n        print(xx, yy)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (cntx, cnty) = (0, 0)\n    d = dict()\n    d[0, 0] = 0\n    ans = 10 ** 9\n    for i in range(n):\n        if s[i] == 'L':\n            cntx -= 1\n        elif s[i] == 'R':\n            cntx += 1\n        elif s[i] == 'U':\n            cnty += 1\n        else:\n            cnty -= 1\n        if (cntx, cnty) not in d:\n            d[cntx, cnty] = i + 1\n        else:\n            if ans > i + 1 - d[cntx, cnty]:\n                ans = i + 1 - d[cntx, cnty]\n                k1 = i + 1\n                k2 = d[cntx, cnty] + 1\n            d[cntx, cnty] = i + 1\n    if ans == 10 ** 9:\n        print(-1)\n    else:\n        print(k2, k1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    m = {}\n    cp = (0, 0)\n    m[cp] = -1\n    (l, r) = (-1, n)\n    for i in range(len(s)):\n        if s[i] == 'L':\n            cp = (cp[0] - 1, cp[1])\n        elif s[i] == 'R':\n            cp = (cp[0] + 1, cp[1])\n        elif s[i] == 'U':\n            cp = (cp[0], cp[1] + 1)\n        else:\n            cp = (cp[0], cp[1] - 1)\n        if cp in m and r - l + 1 > i - m[cp]:\n            (l, r) = (m[cp] + 1, i)\n        m[cp] = i\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "for _ in range(int(input())):\n    minim = 2000000\n    pair = []\n    mydict = {(0, 0): 1}\n    length = int(input())\n    arr = list(input())\n    (currentx, currenty) = (0, 0)\n    for (step, direction) in enumerate(arr):\n        if direction == 'U':\n            (currentx, currenty) = (currentx, currenty + 1)\n        elif direction == 'D':\n            (currentx, currenty) = (currentx, currenty - 1)\n        elif direction == 'R':\n            (currentx, currenty) = (currentx + 1, currenty)\n        elif direction == 'L':\n            (currentx, currenty) = (currentx - 1, currenty)\n        if (currentx, currenty) in mydict:\n            dist = step + 1 - mydict[currentx, currenty]\n            if dist < minim:\n                minim = dist\n                pair = [mydict[currentx, currenty], step + 1]\n        mydict[currentx, currenty] = step + 2\n    if pair:\n        print(*pair)\n    else:\n        print(-1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    seq = input()\n    dict = {}\n    h = v = 0\n    L = R = -1\n    dis = 300000\n    dict[0, 0] = 0\n    possible = False\n    for i in range(n):\n        if seq[i] == 'L':\n            h -= 1\n        elif seq[i] == 'R':\n            h += 1\n        elif seq[i] == 'U':\n            v += 1\n        else:\n            v -= 1\n        tup = (h, v)\n        if tup in dict:\n            l = dict[tup] + 1\n            r = i + 1\n            if r - l + 1 < dis:\n                L = l\n                R = r\n                dis = r - l + 1\n            dict[tup] = i + 1\n            possible = True\n        else:\n            dict[tup] = i + 1\n    if possible:\n        print(L, R)\n    else:\n        print('-1')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    m = {}\n    cp = (0, 0)\n    m[cp] = -1\n    (l, r) = (-1, n)\n    for i in range(len(s)):\n        if s[i] == 'L':\n            cp = (cp[0] - 1, cp[1])\n        elif s[i] == 'R':\n            cp = (cp[0] + 1, cp[1])\n        elif s[i] == 'U':\n            cp = (cp[0], cp[1] + 1)\n        else:\n            cp = (cp[0], cp[1] - 1)\n        if cp in m and r - l + 1 > i - m[cp]:\n            (l, r) = (m[cp] + 1, i)\n        m[cp] = i\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = str(input())\n    d = {}\n    d[0, 0] = 0\n    x = 0\n    y = 0\n    ind1 = 0\n    ind2 = 0\n    ans = float('inf')\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) not in d:\n            d[x, y] = i + 1\n        else:\n            if i + 1 - d[x, y] + 1 < ans:\n                ind1 = d[x, y]\n                ind2 = i + 1\n                ans = i + 1 - d[x, y] + 1\n            d[x, y] = i + 1\n    if ans != float('inf'):\n        print(ind1 + 1, ind2)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    d = dict()\n    (x, y) = (0, 0)\n    d[x, y] = 0\n    (l, r) = (-1, n)\n    for i in range(n):\n        c = s[i]\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        if (x, y) in d and i - d[x, y] < r - l:\n            l = d[x, y]\n            r = i\n        d[x, y] = i + 1\n    if l != -1:\n        print(l + 1, r + 1)\n    else:\n        print(-1)", "def solve():\n    n = int(input())\n    path = input()\n    (x, y) = (0, 0)\n    (start, end) = (0, 0)\n    mem = {'0 0': 0}\n    sol = False\n    (final_count, final_start, final_end) = (0, 0, 0)\n    for (i, p) in enumerate(path):\n        if p == 'U':\n            y += 1\n        elif p == 'D':\n            y -= 1\n        elif p == 'L':\n            x -= 1\n        elif p == 'R':\n            x += 1\n        key = f'{x} {y}'\n        start = mem.get(key, -1)\n        if start >= 0:\n            end = i + 1\n            start += 1\n            count = end - start + 1\n            if not sol or final_count > count:\n                final_count = count\n                (final_start, final_end) = (start, end)\n            sol = True\n        mem[key] = i + 1\n    if not sol:\n        print(-1)\n    else:\n        print(final_start, final_end)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import math\ntestCases = int(input())\nfor test in range(testCases):\n    n = int(input())\n    path = input()\n    dictionary = {(0, 0): -1}\n    x = 0\n    y = 0\n    ans = 10 ** 9\n    for index in range(n):\n        if path[index] == 'R':\n            x += 1\n        elif path[index] == 'L':\n            x -= 1\n        elif path[index] == 'U':\n            y += 1\n        elif path[index] == 'D':\n            y -= 1\n        if (x, y) in dictionary and ans > index - dictionary[x, y]:\n            ans = index - dictionary[x, y]\n            p = dictionary[x, y] + 1\n            q = index\n        dictionary[x, y] = index\n    if ans != 10 ** 9:\n        print(p + 1, q + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    x = 0\n    y = 0\n    rec1 = 0\n    rec2 = 0\n    board = {(0, 0): -1}\n    minn = 10000000\n    rec = -1\n    for i in range(len(s)):\n        if s[i] == 'L':\n            x -= 1\n        if s[i] == 'R':\n            x += 1\n        if s[i] == 'U':\n            y += 1\n        if s[i] == 'D':\n            y -= 1\n        if (x, y) in board:\n            if minn > i - board[x, y]:\n                minn = i - board[x, y]\n                rec1 = i\n                rec2 = board[x, y]\n            board[x, y] = i\n        else:\n            board[x, y] = i\n    if minn != 10000000:\n        print(rec2 + 2, rec1 + 1)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    x = y = 0\n    visited = {(x, y): 0}\n    i = 1\n    min_len = n + 1\n    l = -1\n    r = n\n    for j in range(n):\n        if s[j] == 'L':\n            x -= 1\n        elif s[j] == 'R':\n            x += 1\n        elif s[j] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in visited:\n            if i - visited[x, y] < min_len:\n                l = visited[x, y]\n                r = i\n                min_len = i - visited[x, y]\n        visited[x, y] = i\n        i += 1\n    if min_len > n:\n        print(-1)\n    else:\n        print(l + 1, r)", "testCase = int(input())\nfor _ in range(testCase):\n    length = int(input())\n    path = input()\n    cordDic = {(0, 0): -1}\n    x = 0\n    y = 0\n    idx = 0\n    start = -1\n    end = -1\n    min = 2 ** 31\n    for i in path:\n        if i == 'L':\n            x -= 1\n        if i == 'R':\n            x += 1\n        if i == 'U':\n            y -= 1\n        if i == 'D':\n            y += 1\n        if (x, y) in cordDic:\n            s = cordDic[x, y] + 1\n            if idx - s < min:\n                start = s\n                end = idx\n                min = end - start\n        cordDic[x, y] = idx\n        idx += 1\n    if start != -1:\n        print(start + 1, end + 1)\n    else:\n        print(-1)", "inf = float('inf')\ntests = int(input())\nfor x in range(tests):\n    dlzka = int(input())\n    string = input()\n    (count, x, y, najmenej, ans_1, ans_2) = [1, 0, 0, inf, -1, -1]\n    dic = {}\n    dic[0, 0] = 0\n    for i in range(dlzka):\n        if string[i] == 'L':\n            x -= 1\n        elif string[i] == 'R':\n            x += 1\n        elif string[i] == 'U':\n            y -= 1\n        elif string[i] == 'D':\n            y += 1\n        if (x, y) not in dic:\n            dic[x, y] = count\n        else:\n            if count - dic[x, y] < najmenej:\n                ans_1 = dic[x, y]\n                ans_2 = count\n                najmenej = count - dic[x, y]\n            dic[x, y] = count\n        count += 1\n    if ans_1 == -1:\n        print(-1)\n    else:\n        print(ans_1 + 1, ans_2)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfrom collections import defaultdict\n\ndef main():\n    inf = 10 ** 6\n    t = II()\n    for _ in range(t):\n        n = II()\n        s = SI()\n        xytoi = defaultdict(list)\n        x = y = 0\n        for (i, c) in enumerate(s):\n            xytoi[x, y].append(i)\n            if c == 'L':\n                x -= 1\n            if c == 'R':\n                x += 1\n            if c == 'D':\n                y -= 1\n            if c == 'U':\n                y += 1\n        xytoi[x, y].append(n)\n        l = r = -1\n        mn = inf\n        for ii in xytoi.values():\n            if len(ii) < 2:\n                continue\n            for (i1, i2) in zip(ii, ii[1:]):\n                d = i2 - i1\n                if d < mn:\n                    mn = d\n                    l = i1 + 1\n                    r = i2\n        if l == -1:\n            print(-1)\n        else:\n            print(l, r)\nmain()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    lis = list(input())\n    x = 0\n    y = 0\n    d = {}\n    d[x, y] = 0\n    l = -1\n    r = n\n    for i in range(n):\n        if lis[i] == 'R':\n            y += 1\n        elif lis[i] == 'L':\n            y -= 1\n        elif lis[i] == 'U':\n            x += 1\n        elif lis[i] == 'D':\n            x -= 1\n        if (x, y) in d:\n            if i - d[x, y] < r - l:\n                r = i\n                l = d[x, y]\n        d[x, y] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mov = input()\n    dc = {}\n    last = (0, 0)\n    dc[last] = 1\n    bst = 2 * n\n    bstx = -1\n    bsty = -1\n    for i in range(len(mov)):\n        if mov[i] == 'U':\n            (x, y) = last\n            last = (x + 1, y)\n        elif mov[i] == 'D':\n            (x, y) = last\n            last = (x - 1, y)\n        elif mov[i] == 'R':\n            (x, y) = last\n            last = (x, y + 1)\n        elif mov[i] == 'L':\n            (x, y) = last\n            last = (x, y - 1)\n        if last in dc.keys():\n            now = i - dc[last] + 2\n            if now < bst:\n                bst = now\n                bstx = dc[last]\n                bsty = i + 1\n        dc[last] = i + 2\n    if bstx == -1:\n        print(-1)\n    else:\n        print(bstx, bsty)", "def get(i, curr):\n    if i == 'L':\n        (x, y) = (curr[0] - 1, curr[1])\n    elif i == 'R':\n        (x, y) = (curr[0] + 1, curr[1])\n    elif i == 'U':\n        (x, y) = (curr[0], curr[1] + 1)\n    else:\n        (x, y) = (curr[0], curr[1] - 1)\n    return (x, y)\nfor _ in range(int(input())):\n    n = int(input())\n    l = 's' + input()\n    vstd = {(0, 0): 0}\n    mini = 10000000\n    index = (1, n + 1)\n    curr = (0, 0)\n    for i in range(1, n + 1):\n        curr = get(l[i], curr)\n        if curr in vstd:\n            d = i - vstd[curr] - 1\n            if mini > d:\n                mini = d\n                index = (vstd[curr] + 1, i)\n        vstd[curr] = i\n    if mini == 10000000:\n        print(-1)\n    else:\n        print(*index)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    x = 0\n    y = 0\n    d = {}\n    d[0, 0] = -1\n    ans = float('INF')\n    for (idx, i) in enumerate(s):\n        if i == 'L':\n            x += 1\n        elif i == 'R':\n            x -= 1\n        elif i == 'U':\n            y += 1\n        elif i == 'D':\n            y -= 1\n        if (x, y) in d:\n            prev = d[x, y] + 1\n            dt = idx - prev + 1\n            if dt < ans:\n                ans = dt\n                left = prev + 1\n                right = idx + 1\n        d[x, y] = idx\n    if ans > n:\n        print(-1)\n    else:\n        print(left, right)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (x, y) = (0, 0)\n    d = dict()\n    d[0, 0] = 0\n    Min = 10 ** 9\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d and Min > i + 1 - d[x, y]:\n            Min = i + 1 - d[x, y]\n            k1 = i + 1\n            k2 = d[x, y] + 1\n        d[x, y] = i + 1\n    if Min == 10 ** 9:\n        print(-1)\n    else:\n        print(k2, k1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (x, y) = (0, 0)\n    di = {}\n    di[x, y] = 0\n    sol = []\n    c = n\n    for i in range(0, n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in di:\n            b = i - di[x, y]\n            if b < c:\n                c = b\n                sol = [di[x, y] + 1, i + 1]\n        di[x, y] = i + 1\n    if sol:\n        print(*sol)\n    else:\n        print(-1)", "def f2(arr1, n):\n    got = False\n    arr = []\n    for i in range(n):\n        arr.append(arr1[i])\n    x = y = 0\n    D = {(0, 0): 0}\n    a = [0, n + 2]\n    for i in range(0, n):\n        if arr[i] == 'L':\n            x -= 1\n        elif arr[i] == 'R':\n            x += 1\n        elif arr[i] == 'U':\n            y += 1\n        elif arr[i] == 'D':\n            y -= 1\n        if (x, y) in D.keys():\n            got = True\n            if a[1] - a[0] + 1 > i - D[x, y] + 1:\n                a = [D[x, y] + 1, i + 1]\n        D[x, y] = i + 1\n    if got:\n        return a\n    else:\n        return [-1]\nt = int(input())\nfor w in range(t):\n    n = int(input())\n    arr1 = list(input().strip().split())\n    arr1 = str(arr1[0])\n    f = f2(arr1, n)\n    print(*f)", "from sys import maxsize\nfor _ in range(int(input())):\n    n = int(input())\n    path = str(input())\n    (x, y) = (0, 0)\n    dic = dict()\n    dic[0, 0] = 0\n    (a_i, a_j) = (-1, -1)\n    minn = maxsize\n    for i in range(n):\n        if path[i] == 'L':\n            x -= 1\n        elif path[i] == 'R':\n            x += 1\n        elif path[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in dic:\n            t = i - dic[x, y] + 1\n            if t < minn:\n                minn = t\n                a_i = dic[x, y] + 1\n                a_j = i + 1\n        dic[x, y] = i + 1\n    if a_i == -1:\n        print(-1)\n    else:\n        print(a_i, a_j)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = input()\n    (i, j) = (0, 0)\n    dic = {(0, 0): 0}\n    (mn, ans) = (float('inf'), -1)\n    for ind in range(n):\n        if arr[ind] == 'L':\n            j += 1\n        if arr[ind] == 'R':\n            j -= 1\n        if arr[ind] == 'U':\n            i += 1\n        if arr[ind] == 'D':\n            i -= 1\n        if (i, j) in dic and ind - dic[i, j] < mn:\n            mn = ind - dic[i, j]\n            ans = (dic[i, j] + 1, ind + 1)\n        dic[i, j] = ind + 1\n    if ans == -1:\n        print(-1)\n    else:\n        print(str(ans[0]), str(ans[1]))", "import math\nt = int(input())\nns = []\narrs = []\nfor _ in range(t):\n    ns.append(int(input()))\n    nums = list(input())\n    arrs.append(nums)\nfor i in range(t):\n    n = ns[i]\n    arr = arrs[i].copy()\n    pos = [0, 0]\n    m = {(0, 0): -1}\n    smallest = math.inf\n    coords = [-1, -1]\n    for j in range(n):\n        move = arr[j]\n        if move == 'L':\n            pos[0] -= 1\n        elif move == 'R':\n            pos[0] += 1\n        elif move == 'U':\n            pos[1] += 1\n        else:\n            pos[1] -= 1\n        if tuple(pos) not in m.keys():\n            m[tuple(pos)] = j\n        else:\n            distance = j - m[tuple(pos)]\n            if distance < smallest:\n                smallest = distance\n                coords = [m[tuple(pos)], j]\n            m[tuple(pos)] = j\n    if smallest == math.inf:\n        print(-1)\n    else:\n        print(coords[0] + 2, coords[1] + 1)", "I = input\nfor _ in [0] * int(I()):\n    I()\n    a = {1: 1}\n    i = s = 1\n    r = (-1,)\n    m = 300000.0\n    for c in I():\n        s += ((c == 'R') - (c == 'L') << 16) + (c > 'R') - (c < 'L')\n        j = a.get(s, -m)\n        if i - j < m:\n            m = i - j\n            r = (j, i)\n        i += 1\n        a[s] = i\n    print(*r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (dx, dy) = ({'L': -1, 'R': 1, 'U': 0, 'D': 0}, {'L': 0, 'R': 0, 'U': 1, 'D': -1})\n    (x, y, ax, ay) = (0, 0, 0, 0)\n    mx = 10 ** 9\n    d = {(0, 0): 0}\n    for i in range(n):\n        x += dx[s[i]]\n        y += dy[s[i]]\n        if (x, y) in d:\n            j = d[x, y]\n            if i + 1 - j < mx:\n                mx = i + 1 - j\n                (ax, ay) = (j + 1, i + 1)\n        d[x, y] = i + 1\n    if mx == 10 ** 9:\n        print(-1)\n    else:\n        print(ax, ay)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    (x, y) = (0, 0)\n    (l, r) = (-1, n)\n    d[x, y] = -1\n    for (i, ch) in enumerate(s):\n        if ch == 'L':\n            x += 1\n        elif ch == 'R':\n            x -= 1\n        elif ch == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d.keys():\n            if i - d[x, y] < r - l:\n                l = d[x, y] + 1\n                r = i\n        d[x, y] = i\n    if l == -1:\n        print(l)\n    else:\n        print(l + 1, r + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    d = dict()\n    (x, y) = (0, 0)\n    d[x, y] = 0\n    c = n + 1\n    ans = (-1,)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        else:\n            y -= 1\n        if (x, y) in d:\n            b = i - d[x, y]\n            if b < c:\n                c = b\n                ans = (d[x, y] + 1, i + 1)\n        d[x, y] = i + 1\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    z = int(input())\n    s = input()\n    x = 0\n    y = 0\n    W = {}\n    W[0, 0] = 0\n    m = 10 ** 10\n    c = -1\n    d = -1\n    for i in range(z):\n        if s[i] == 'L':\n            x -= 1\n            if (x, y) in W:\n                if m > i - W[x, y]:\n                    m = i - W[x, y]\n                    c = W[x, y] + 1\n                    d = i + 1\n            W[x, y] = i + 1\n        elif s[i] == 'R':\n            x += 1\n            if (x, y) in W:\n                if m > i - W[x, y]:\n                    m = i - W[x, y]\n                    c = W[x, y] + 1\n                    d = i + 1\n            W[x, y] = i + 1\n        elif s[i] == 'D':\n            y -= 1\n            if (x, y) in W:\n                if m > i - W[x, y]:\n                    m = i - W[x, y]\n                    c = W[x, y] + 1\n                    d = i + 1\n            W[x, y] = i + 1\n        else:\n            y += 1\n            if (x, y) in W:\n                if m > i - W[x, y]:\n                    m = i - W[x, y]\n                    c = W[x, y] + 1\n                    d = i + 1\n            W[x, y] = i + 1\n    if c > -1 and d > -1:\n        print(c, d)\n    else:\n        print(-1)", "T = int(input())\nt = 0\nwhile t < T:\n    N = int(input())\n    s = input()\n    x = 0\n    y = 0\n    risultato = float('INF')\n    trovato = False\n    P = {(x, y): 0}\n    n = 0\n    a = N\n    b = N\n    while n < N:\n        c = s[n]\n        if c == 'U':\n            y += 1\n        if c == 'D':\n            y -= 1\n        if c == 'L':\n            x -= 1\n        if c == 'R':\n            x += 1\n        if (x, y) in P:\n            if n + 1 - P[x, y] < risultato:\n                a = P[x, y] + 1\n                b = n + 1\n                risultato = n + 1 - P[x, y]\n                trovato = True\n        P[x, y] = n + 1\n        n += 1\n    if trovato:\n        print(a, b)\n    else:\n        print(-1)\n    t += 1", "T = int(input())\nt = 0\nwhile t < T:\n    N = int(input())\n    s = input()\n    x = 0\n    y = 0\n    risultato = float('INF')\n    trovato = False\n    P = {(x, y): 0}\n    n = 0\n    a = N\n    b = N\n    while n < N:\n        c = s[n]\n        if c == 'U':\n            y += 1\n        if c == 'D':\n            y -= 1\n        if c == 'L':\n            x -= 1\n        if c == 'R':\n            x += 1\n        if (x, y) in P:\n            if n + 1 - P[x, y] < risultato:\n                a = P[x, y] + 1\n                b = n + 1\n                risultato = n + 1 - P[x, y]\n                trovato = True\n        P[x, y] = n + 1\n        n += 1\n    if trovato:\n        print(a, b)\n    else:\n        print(-1)\n    t += 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    curr = (0, 0)\n    last_seen = {}\n    best_l = -10000000\n    best_r = 10000000\n    last_seen[curr] = 0\n    for (i, c) in enumerate(s):\n        if c == 'L':\n            curr = (curr[0] - 1, curr[1])\n        elif c == 'R':\n            curr = (curr[0] + 1, curr[1])\n        elif c == 'U':\n            curr = (curr[0], curr[1] + 1)\n        elif c == 'D':\n            curr = (curr[0], curr[1] - 1)\n        l = last_seen.get(curr, -10000000000)\n        r = i + 1\n        last_seen[curr] = r\n        if r - l < best_r - best_l:\n            best_l = l\n            best_r = r\n    if best_l == -10000000 and best_r == 10000000:\n        print('-1')\n    else:\n        print(best_l + 1, best_r)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    s = input()\n    x = 0\n    y = 0\n    d = dict()\n    d[x, y] = -1\n    m = 1000000\n    a = 0\n    b = 0\n    for i in range(N):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y -= 1\n        else:\n            y += 1\n        if (x, y) in d.keys():\n            if m > i - d[x, y]:\n                m = i - d[x, y]\n                a = d[x, y]\n                b = i\n        d[x, y] = i\n    if m == 1000000:\n        m = -1\n        print(m)\n    else:\n        print(a + 2, b + 1)", "for i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = (0, 0)\n    c = {}\n    c[b] = 0\n    q = -1\n    w = -1\n    for item in range(len(a)):\n        if a[item] == 'L':\n            b = (b[0] - 1, b[1])\n        elif a[item] == 'R':\n            b = (b[0] + 1, b[1])\n        elif a[item] == 'U':\n            b = (b[0], b[1] + 1)\n        else:\n            b = (b[0], b[1] - 1)\n        try:\n            d = c[b]\n            c[b] = item + 1\n            if q > -1:\n                if item - d < w - q:\n                    q = d + 1\n                    w = item + 1\n            else:\n                q = d + 1\n                w = item + 1\n            if w - q == 1:\n                break\n        except KeyError:\n            c[b] = item + 1\n    if q > -1:\n        print(q, w)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    j = 1\n    (x, y) = (0, 0)\n    c = -2\n    l = []\n    d = dict()\n    d[x, y] = 0\n    m = n\n    (xx, yy) = (0, 0)\n    for i in range(n):\n        if s[i] == 'R':\n            x = x + 1\n        elif s[i] == 'L':\n            x = x - 1\n        elif s[i] == 'D':\n            y = y - 1\n        else:\n            y = y + 1\n        if (x, y) in d:\n            c = d[x, y]\n            d[x, y] = i + 1\n            if m > abs(i + 1 - (c + 1)):\n                xx = c + 1\n                yy = i + 1\n                m = abs(i + 1 - (c + 1))\n        else:\n            d[x, y] = i + 1\n    if c == -2:\n        print(-1)\n    else:\n        print(xx, yy)", "I = input\nd = dict(zip('LRDU', ((-1, 0), (1, 0), (0, -1), (0, 1))))\nfor _ in [0] * int(I()):\n    I()\n    a = {(0, 0): 0}\n    i = s = t = 0\n    r = (-1,)\n    m = 7 << 15\n    for c in I():\n        i += 1\n        (x, y) = d[c]\n        s += x\n        t += y\n        j = a.get((s, t), -m)\n        if i - j < m:\n            m = i - j\n            r = (j + 1, i)\n        a[s, t] = i\n    print(*r)", "I = input\nd = dict(zip('LRDU', ((-1, 0), (1, 0), (0, -1), (0, 1))))\nfor _ in [0] * int(I()):\n    I()\n    a = {(0, 0): 0}\n    i = s = t = 0\n    r = (-1,)\n    m = 300000.0\n    for c in I():\n        i += 1\n        (x, y) = d[c]\n        s += x\n        t += y\n        j = a.get((s, t), -m)\n        if i - j < m:\n            m = i - j\n            r = (j + 1, i)\n        a[s, t] = i\n    print(*r)", "I = input\nd = dict(zip('LRDU', ((-1, 0), (1, 0), (0, -1), (0, 1))))\nfor _ in [0] * int(I()):\n    I()\n    a = {(1, 1): 1}\n    i = s = t = 1\n    r = (-1,)\n    m = 300000.0\n    for c in I():\n        (x, y) = d[c]\n        s += x\n        t += y\n        j = a.get((s, t), -m)\n        if i - j < m:\n            m = i - j\n            r = (j, i)\n        i += 1\n        a[s, t] = i\n    print(*r)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    pts = {(0, 0): 1}\n    (x, y) = (0, 0)\n    (l, r) = (0, 10 ** 9)\n    for i in range(n):\n        if s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        elif s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        if (x, y) in pts.keys():\n            if r - l > i + 1 - pts[x, y]:\n                (l, r) = (pts[x, y], i + 1)\n            pts[x, y] = i + 2\n        else:\n            pts[x, y] = i + 2\n    if l == 0 and r == 10 ** 9:\n        print(-1)\n    else:\n        print(l, r)", "T = int(input())\nfor _ in range(T):\n    len = int(input())\n    stt = str(input())\n    da = {}\n    da[0, 0] = 0\n    a = 0\n    b = 0\n    indice1 = 0\n    indice2 = 0\n    res = float('inf')\n    for j in range(len):\n        if stt[j] == 'L':\n            a -= 1\n        elif stt[j] == 'R':\n            a += 1\n        elif stt[j] == 'U':\n            b += 1\n        else:\n            b -= 1\n        if (a, b) not in da:\n            da[a, b] = j + 1\n        else:\n            if j + 1 - da[a, b] + 1 < res:\n                indice1 = da[a, b]\n                indice2 = j + 1\n                res = j + 1 - da[a, b] + 1\n            da[a, b] = j + 1\n    if res != float('inf'):\n        print(indice1 + 1, indice2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    q = input()\n    locations = {(0, 0): 1}\n    x = 0\n    y = 0\n    first_index = -1\n    last_index = 1\n    min_sub_len = 200000\n    min_sub = []\n    path = input()\n    for each in path:\n        if each == 'L':\n            x -= 1\n        elif each == 'R':\n            x += 1\n        elif each == 'U':\n            y += 1\n        elif each == 'D':\n            y -= 1\n        if locations.get((x, y)) is None:\n            locations[x, y] = last_index + 1\n        else:\n            first_index = locations.get((x, y))\n            if last_index - first_index < min_sub_len:\n                min_sub_len = last_index - first_index\n                min_sub = [first_index, last_index]\n            locations[x, y] = last_index + 1\n        if last_index - first_index == 1:\n            break\n        last_index += 1\n    if not min_sub:\n        print('-1')\n    else:\n        print(min_sub[0], min_sub[1])", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    lis = list(input())\n    x = 0\n    y = 0\n    d = {}\n    d[x, y] = 0\n    l = -1\n    r = n\n    for i in range(n):\n        if lis[i] == 'R':\n            y += 1\n        elif lis[i] == 'L':\n            y -= 1\n        elif lis[i] == 'U':\n            x += 1\n        elif lis[i] == 'D':\n            x -= 1\n        if (x, y) in d:\n            if i - d[x, y] < r - l:\n                r = i\n                l = d[x, y]\n        d[x, y] = i + 1\n    if l == -1:\n        print(-1)\n    else:\n        print(l + 1, r + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = ''\n    minStr = {'id': -1, 'length': len(s)}\n    cords = {(0, 0): 0}\n    actCords = {'x': 0, 'y': 0}\n    for i in range(len(s)):\n        symb = s[i]\n        if symb == 'L':\n            actCords['x'] -= 1\n        elif symb == 'R':\n            actCords['x'] += 1\n        elif symb == 'U':\n            actCords['y'] += 1\n        else:\n            actCords['y'] -= 1\n        arCords = (actCords['x'], actCords['y'])\n        if cords.get(arCords) != None and i - cords[arCords] < minStr['length']:\n            minStr['id'] = cords[arCords]\n            minStr['length'] = i - cords[arCords]\n        cords[arCords] = i + 1\n    if minStr['id'] == -1:\n        print(-1)\n    else:\n        print(minStr['id'] + 1, minStr['id'] + minStr['length'] + 1)", "N_tests = int(input())\nfor test in range(N_tests):\n    N_moves = int(input())\n    moves = input()\n    Position = {(0, 0): 0}\n    (x, y, l, r, lr) = (0, 0, 0, 0, 0)\n    for i in range(0, N_moves):\n        move = moves[i]\n        if move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n        elif move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        if Position.__contains__((x, y)):\n            length = i - Position[x, y]\n            if lr == 0:\n                l = Position[x, y] + 1\n                r = i + 1\n                lr = length\n            elif length < lr:\n                l = Position[x, y] + 1\n                r = i + 1\n                lr = length\n        Position[x, y] = i + 1\n    if lr == 0:\n        print('-1')\n    else:\n        print('%d %d' % (l, r))", "t = int(input())\nD = {'L': (-1, 0), 'R': (1, 0), 'D': (0, -1), 'U': (0, 1)}\nfor _ in range(t):\n    n = int(input())\n    s = 0\n    pos = (0, 0)\n    (best, best_i) = (-1, -1)\n    B = {}\n    B[pos] = 0\n    for p in input():\n        s += 1\n        pos = (pos[0] + D[p][0], pos[1] + D[p][1])\n        if pos in B:\n            if best == -1 or best > s - B[pos]:\n                best = s - B[pos]\n                best_i = B[pos] + 1\n        B[pos] = s\n    if best == -1:\n        print(-1)\n    else:\n        print(str(best_i) + ' ' + str(best_i + best - 1))", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    s = input()\n    cx = 0\n    cy = 0\n    l = -1\n    r = n\n    point = dict()\n    point[0, 0] = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            cx = cx - 1\n        elif s[i] == 'R':\n            cx = cx + 1\n        elif s[i] == 'U':\n            cy = cy + 1\n        elif s[i] == 'D':\n            cy = cy - 1\n        if (cx, cy) not in point:\n            point[cx, cy] = 0\n        elif i - point[cx, cy] + 1 < r - l + 1:\n            l = point[cx, cy]\n            r = i\n        point[cx, cy] = i + 1\n    if l == -1 and r == n:\n        print(-1)\n    else:\n        print(l + 1, r + 1)"]