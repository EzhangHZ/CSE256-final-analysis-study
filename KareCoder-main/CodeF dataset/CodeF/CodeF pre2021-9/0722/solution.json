["from collections import deque\n\ndef cyc(n, path):\n    (visi, poi) = ([2] + [0] * (n - 1), [0] * n)\n    inf = []\n    multi = []\n    st = [0]\n    while len(st):\n        (x, y) = (st[-1], poi[st[-1]])\n        if y == len(path[x]):\n            visi[st.pop()] = 1\n        else:\n            z = path[x][y]\n            if visi[z] == 2:\n                inf.append(z)\n                poi[x] += 1\n                continue\n            if visi[z] == 1:\n                multi.append(z)\n                poi[x] += 1\n                continue\n            st.append(z)\n            poi[x] += 1\n            visi[z] = 2\n    ans = [1] * n\n    for i in range(n):\n        if not visi[i]:\n            ans[i] = 0\n    curr = deque(multi)\n    vv = [0] * n\n    for i in multi:\n        vv[i] = 1\n    while len(curr):\n        x = curr.popleft()\n        ans[x] = 2\n        for y in path[x]:\n            if not vv[y]:\n                vv[y] = 1\n                curr.append(y)\n    curr = deque(inf)\n    vv = [0] * n\n    for i in inf:\n        vv[i] = 1\n    while len(curr):\n        x = curr.popleft()\n        ans[x] = -1\n        for y in path[x]:\n            if not vv[y]:\n                vv[y] = 1\n                curr.append(y)\n    return ans\nfor _ in range(int(input())):\n    input()\n    (n, m) = map(int, input().split())\n    path = [[] for _ in range(n)]\n    for _ in range(m):\n        (aa, bb) = map(int, input().split())\n        path[aa - 1].append(bb - 1)\n    print(*cyc(n, path))"]