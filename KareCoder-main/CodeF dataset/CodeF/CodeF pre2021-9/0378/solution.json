["validDigits = set([0, 1, 2, 5, 8])\nreflections = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\ndef isValid(n):\n    while n > 0:\n        if n % 10 not in validDigits:\n            return False\n        n //= 10\n    return True\n\ndef getPaddedTime(n):\n    if n > 9:\n        return str(n)\n    else:\n        return '0' + str(n)\n\ndef getReflectionTime(s):\n    return reflections[s[1]] + reflections[s[0]]\n\ndef getNextValidTime(n, a, b):\n    n -= 1\n    for i in range(a):\n        n = (n + 1) % a\n        if not isValid(n):\n            continue\n        ns = getPaddedTime(n)\n        nsReflection = getReflectionTime(ns)\n        if int(nsReflection) < b:\n            return ns\n\ndef solve(h, m, s):\n    sArr = s.split(':')\n    sh = sArr[0]\n    sm = sArr[1]\n    nh = getNextValidTime(int(sh), h, m)\n    nm = '00'\n    if nh == sh and sm != '00':\n        nm = getNextValidTime(int(sm), m, h)\n        if nm == '00':\n            nh = getNextValidTime((int(nh) + 1) % h, h, m)\n    return nh + ':' + nm\nt = int(input())\nfor tc in range(t):\n    (h, m) = map(int, input().split())\n    s = input()\n    result = solve(h, m, s)\n    print(result)", "image = {'1': '1', '2': '5', '5': '2', '8': '8', '0': '0'}\nhas_reflection = {0: True, 1: True, 2: True, 3: False, 4: False, 5: True, 6: False, 7: False, 8: True, 9: False}\n\ndef valid_time(time, a, b):\n    for t in range(int(time), a):\n        t = str(t).zfill(2)\n        flag = True\n        for i in t:\n            if has_reflection[int(i)] == False:\n                flag = False\n        if flag:\n            reflected = ''\n            for i in t[::-1]:\n                reflected += image[i]\n            if int(reflected) < b:\n                return t.zfill(2)\n    return '00'\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hrs, min) = input().split(':')\n    new_hrs = valid_time(hrs, h, m)\n    if new_hrs == hrs:\n        new_min = valid_time(min, m, h)\n        if int(new_min) < int(min):\n            new_hrs = valid_time(str((int(new_hrs) + 1) % h), h, m)\n    else:\n        new_min = '00'\n    print(new_hrs.zfill(2) + ':' + new_min.zfill(2))", "for _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    s = input()\n    hr = 0\n    minute = 0\n    valid = [0, 1, 5, 0, 0, 2, 0, 0, 8, 0]\n    flag = 0\n    for i in range(int(s[0] + s[1]), h):\n        if i % 10 in valid and int(i / 10) in valid and (int(str(valid[i % 10]) + str(valid[int(i / 10)])) < m):\n            if i == int(s[0] + s[1]):\n                for j in range(int(s[3] + s[4]), m):\n                    if j % 10 in valid and int(j / 10) in valid and (int(str(valid[j % 10]) + str(valid[int(j / 10)])) < h):\n                        minute = j\n                        hr = i\n                        flag = 1\n                        break\n            else:\n                for j in range(0, m):\n                    if j % 10 in valid and int(j / 10) in valid and (int(str(valid[j % 10]) + str(valid[int(j / 10)])) < h):\n                        minute = j\n                        hr = i\n                        flag = 1\n                        break\n        if flag:\n            break\n    if hr < 10:\n        print('0', end='')\n        print(hr, end='')\n    else:\n        print(hr, end='')\n    print(':', end='')\n    if minute < 10:\n        print('0', end='')\n        print(minute, end='')\n    else:\n        print(minute, end='')\n    print('')", "import sys, os, io\nfor _ in range(int(input())):\n    (h, m) = [int(i) for i in input().split()]\n    (a, b) = [int(i) for i in input().split(':')]\n    x = '00'\n    valid = [0, 1, 2, 5, 8]\n    s = set()\n    dic = {}\n    for i in range(10):\n        dic[str(i)] = str(i)\n    dic['2'] = '5'\n    dic['5'] = '2'\n    for i in valid:\n        for j in valid:\n            s.add(str(i) + str(j))\n    if a < 10:\n        sa = '0' + str(a)\n    else:\n        sa = str(a)\n    if sa in s:\n        for j in range(b, 10 ** 5):\n            i = j % m\n            if b != 0 and i == 0:\n                a += 1\n            si = str(i)\n            if i < 10:\n                si = '0' + si\n            ni = si[::-1]\n            nni = ''\n            for i in ni:\n                nni += dic[i]\n            ii = int(nni)\n            if ii >= h:\n                continue\n            if si in s:\n                x = si\n                break\n    y = a\n    for j in range(a, 10 ** 5):\n        i = j % h\n        si = str(i)\n        if i < 10:\n            si = '0' + si\n        ni = si[::-1]\n        nni = ''\n        for i in ni:\n            nni += dic[i]\n        ii = int(nni)\n        if ii >= m:\n            continue\n        if si in s:\n            y = si\n            break\n    if y != sa:\n        x = '00'\n    print(y + ':' + x)", "reflections = [0, 10, 50, 100, 100, 20, 100, 100, 80, 100, 1, 11, 51, 100, 100, 21, 100, 100, 81, 100, 5, 15, 55, 100, 100, 25, 100, 100, 85, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 2, 12, 52, 100, 100, 22, 100, 100, 82, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 8, 18, 58, 100, 100, 28, 100, 100, 88, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\ndef pad(hh):\n    if hh < 10:\n        return f'0{hh}'\n    return str(hh)\nfor _ in range(int(input())):\n    flag = False\n    (h, m) = map(int, input().split())\n    (hh, mm) = map(int, input().split(':'))\n    if reflections[hh] < m:\n        for mm_ in range(mm, m):\n            if reflections[mm_] < h:\n                print(f'{pad(hh)}:{pad(mm_)}')\n                flag = True\n                break\n    if flag:\n        continue\n    for hh_ in range(hh + 1, h):\n        for mm_ in range(m):\n            if reflections[mm_] < h and reflections[hh_] < m:\n                print(f'{pad(hh_)}:{pad(mm_)}')\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        continue\n    print('00:00')", "ref = {0: '0', 1: '1', 2: '5', 5: '2', 8: '8'}\n\ndef turn(x):\n    (d_1, d_10) = map(lambda x: ref.get(x, ''), [x // 10, x % 10])\n    if d_1 and d_10:\n        ret = d_10 + d_1\n    else:\n        ret = None\n    return ret\nN = int(input())\nfor case in range(N):\n    (H, M) = map(int, input().split())\n    (h, m) = map(int, input().split(':'))\n    ret = [0] * 2\n    ChangeHour = False\n    if turn(h) and int(turn(h)) < M:\n        ret[0] = str(h // 10) + str(h % 10)\n        for minute in range(m, M):\n            new_h = turn(minute)\n            if new_h and int(new_h) < H:\n                ret[1] = str(minute // 10) + str(minute % 10)\n                break\n        else:\n            ChangeHour = True\n            ret[1] = '00'\n    else:\n        ChangeHour = True\n        ret[1] = '00'\n    if ChangeHour:\n        for hour in range(h + 1, H):\n            new_m = turn(hour)\n            if new_m and int(new_m) < M:\n                ret[0] = str(hour // 10) + str(hour % 10)\n                break\n        else:\n            ret[0] = '00'\n    print(ret[0] + ':' + ret[1])", "from itertools import product\nfrom bisect import bisect_left as bl\n\ndef espelhaletra(string):\n    return string.replace('5', '-').replace('2', '5').replace('-', '2')\n\ndef valida(prox, maxhora):\n    normal = prox[:2] <= maxhora[:2] and prox[2:] <= maxhora[2:]\n    revers = espelhaletra(prox[:1:-1]) <= maxhora[:2] and espelhaletra(prox[1::-1]) <= maxhora[2:]\n    return normal and revers\ncombin = [''.join(c) for c in product('01258', '01258', '01258', '01258')]\nlenCombin = len(combin)\nfor _ in range(int(input())):\n    maxhora = [int(x) for x in input().split()]\n    maxhora[0] -= 1\n    maxhora[1] -= 1\n    maxhora = ''.join((str(x).zfill(2) for x in maxhora))\n    momento = input().replace(':', '')\n    iMax = bl(combin, maxhora)\n    iProx = bl(combin, momento)\n    if iMax >= lenCombin:\n        iMax = lenCombin - 1\n    if iProx >= lenCombin:\n        iProx = 0\n    while not valida(combin[iProx], maxhora):\n        iProx += 1\n        if iProx > iMax:\n            break\n    print(combin[0][:2] + ':' + combin[0][2:] if iProx > iMax else combin[iProx][:2] + ':' + combin[iProx][2:])", "from itertools import product\nfrom bisect import bisect_left as bl\n\ndef espelhaletra(string):\n    return string.replace('5', '-').replace('2', '5').replace('-', '2')\n\ndef valida(prox, maxhora):\n    normal = prox[:2] <= maxhora[:2] and prox[2:] <= maxhora[2:]\n    revers = espelhaletra(prox[:1:-1]) <= maxhora[:2] and espelhaletra(prox[1::-1]) <= maxhora[2:]\n    return normal and revers\ncombin = [''.join(c) for c in product('01258', '01258', '01258', '01258')]\nlenCombin = len(combin)\nfor _ in range(int(input())):\n    maxhora = [int(x) for x in input().split()]\n    maxhora[0] -= 1\n    maxhora[1] -= 1\n    maxhora = ''.join((str(x).zfill(2) for x in maxhora))\n    momento = input().replace(':', '')\n    iMax = bl(combin, maxhora)\n    iProx = bl(combin, momento)\n    if iMax >= lenCombin:\n        iMax = lenCombin - 1\n    if iProx >= lenCombin:\n        iProx = 0\n    while not valida(combin[iProx], maxhora):\n        iProx += 1\n        if iProx > iMax:\n            break\n    print(combin[0][:2] + ':' + combin[0][2:] if iProx > iMax else combin[iProx][:2] + ':' + combin[iProx][2:])", "d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n\ndef check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\n\ndef solve():\n    for _ in range(int(input())):\n        (h, m) = [int(x) for x in input().split()]\n        (x, y) = map(int, input().split(':'))\n        while True:\n            if check(x) < m and check(y) < h:\n                break\n            y += 1\n            if y == m:\n                y = 0\n                x = (x + 1) % h\n        print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))\nsolve()", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\nt = 1\nt = int(input())\np = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\nn = 5\n\ndef f(k, t):\n    (a, b) = (k // 10, k % 10)\n    return a in p and b in p and (p[b] * 10 + p[a] < t)\nfor ii in range(t):\n    (h, m) = (int(i) for i in input().split())\n    (a, b) = (int(i) for i in input().split(':'))\n    (ca, cb) = (a, b)\n    flag = False\n    if f(ca, m):\n        for i in range(b, m):\n            cb = i\n            if f(cb, h):\n                flag = True\n                break\n    if not flag:\n        a = (a + 1) % h\n        for i in range(h):\n            ca = (a + i) % h\n            if f(ca, m):\n                break\n        for i in range(m):\n            cb = i\n            if f(cb, h):\n                break\n    print(f'{ca:02d}:{cb:02d}')", "T = int(input())\nc1 = [0, 1, 2, 5, 8]\n\ndef f(x):\n    return 5 if x == 2 else 2 if x == 5 else x\nfor i in range(T):\n    (h, m) = map(int, input().split())\n    (HH, MM) = map(int, input().split(':'))\n    while True:\n        if HH // 10 in c1 and HH % 10 in c1 and (MM // 10 in c1) and (MM % 10 in c1) and (f(HH % 10) * 10 + f(HH // 10) < m) and (f(MM % 10) * 10 + f(MM // 10) < h):\n            break\n        MM += 1\n        if MM >= m:\n            MM = 0\n            HH += 1\n        if HH >= h:\n            HH = 0\n    print('0' * (1 if HH // 10 == 0 else 0) + str(HH) + ':' + '0' * (1 if MM // 10 == 0 else 0) + str(MM))", "change = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\nbad = (3, 4, 6, 7, 9)\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    s = input()\n    ch = int(s[:2])\n    cm = int(s[3:])\n    while True:\n        if not (ch % 10 in bad or cm % 10 in bad or ch // 10 in bad or (cm // 10 in bad)):\n            chm = change[ch % 10] * 10 + change[ch // 10]\n            chh = change[cm % 10] * 10 + change[cm // 10]\n            if chh < h and chm < m:\n                if ch < 10:\n                    print('0', end='')\n                print(ch, end=':')\n                if cm < 10:\n                    print('0', end='')\n                print(cm)\n                break\n        cm += 1\n        if cm == m:\n            cm = 0\n            ch += 1\n            if ch == h:\n                print('00:00')\n                break", "use_digits = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n\ndef is_useful(num, less_than):\n    x = num % 10\n    y = num // 10\n    if x in use_digits and y in use_digits:\n        x = use_digits[x]\n        y = use_digits[y]\n        new_num = x * 10 + y\n        return new_num < less_than\n    else:\n        return False\n    return x in use_digits and y in use_digits\n\ndef find_next_time(case):\n    (h, m, ih, im) = case\n    total_in_min = h * m\n    curr_in_min = ih * m + im\n    while curr_in_min < total_in_min:\n        curr_h = curr_in_min // m\n        curr_m = curr_in_min % m\n        if is_useful(curr_h, m) and is_useful(curr_m, h):\n            return (curr_h, curr_m)\n        curr_in_min += 1\n    return (0, 0)\ntest_cases = int(input())\ncases = []\nfor _ in range(test_cases):\n    (h, m) = map(int, input().split())\n    (ih, im) = map(int, input().split(':'))\n    cases.append([h, m, ih, im])\nfor case in cases:\n    (h, m) = find_next_time(case)\n    print('{:02d}:{:02d}'.format(h, m))", "def gg(x):\n    if x == '0':\n        return '0'\n    elif x == '1':\n        return '1'\n    elif x == '2':\n        return '5'\n    elif x == '5':\n        return '2'\n    elif x == '8':\n        return '8'\n    else:\n        return '-'\n\ndef solve():\n    (h, m) = map(int, input().split())\n    (s, f) = map(int, input().split(':'))\n    for i in range(s, h):\n        for j in range(f, m):\n            if i != s:\n                j = 0\n            ss = ''\n            ff = ''\n            ii = str(i)\n            jj = str(j)\n            if len(ii) == 1:\n                ii = '0' + ii\n            if len(jj) == 1:\n                jj = '0' + jj\n            for c in ii:\n                ss += gg(c)\n            for c in jj:\n                ff += gg(c)\n            if ss.count('-') == 0 and ff.count('-') == 0 and (int(ss[::-1]) <= m - 1) and (int(ff[::-1]) <= h - 1):\n                print(f'{ii}:{jj}')\n                return\n    print('00:00')\nimport math\nfor _ in range(int(input())):\n    solve()", "mirror = {0: 0, 1: 1, 2: 5, 3: False, 4: False, 5: 2, 6: False, 7: False, 8: 8, 9: False}\ntable = [[None for j in range(100)] for i in range(100)]\nfor i in range(100):\n    for j in range(100):\n        if mirror[j % 10] is False or mirror[i // 10] is False or mirror[i % 10] is False or (mirror[j // 10] is False):\n            table[i][j] = [False]\n        else:\n            table[i][j] = [mirror[j % 10] * 10 + mirror[j // 10], mirror[i % 10] * 10 + mirror[i // 10]]\nt = int(input())\nfor k in range(t):\n    (h, m) = list(map(int, input().split()))\n    (hour, minute) = list(map(int, input().split(':')))\n    found = False\n    i = hour\n    j = minute\n    while not found:\n        if table[i][j][0] is not False and table[i][j][1] is not False:\n            if table[i][j][0] < h and table[i][j][1] < m:\n                found = True\n                print(i if i > 9 else '0' + str(i), end='')\n                print(':', end='')\n                print(j if j > 9 else '0' + str(j))\n        j += 1\n        if j >= m:\n            j = 0\n            i += 1\n        if i >= h:\n            i = 0\n            j = 0", "def he(n):\n    x = n % 10\n    y = n // 10\n    a = 0\n    b = 0\n    if x == 0:\n        a = 0\n    elif x == 1:\n        a = 1\n    elif x == 5:\n        a = 2\n    elif x == 2:\n        a = 5\n    elif x == 8:\n        a = 8\n    else:\n        return -1\n    if y == 0:\n        b = 0\n    elif y == 1:\n        b = 1\n    elif y == 5:\n        b = 2\n    elif y == 2:\n        b = 5\n    elif y == 8:\n        b = 8\n    else:\n        return -1\n    return 10 * a + b\n\ndef hel(x, y, h, m):\n    a = x\n    b = y\n    while True:\n        if he(a) != -1 and he(b) != -1 and (he(a) < m) and (he(b) < h):\n            return (a, b)\n        else:\n            b += 1\n        if b == m:\n            b = 0\n            a += 1\n        if a == h:\n            a = 0\nt = int(input())\nfor i in range(t):\n    arr = [int(i) for i in input().split()]\n    h = arr[0]\n    m = arr[1]\n    s = input()\n    x = s[0:2]\n    y = s[3:]\n    x = int(x)\n    y = int(y)\n    p = hel(x, y, h, m)\n    ah = p[0]\n    am = p[1]\n    ah = str(ah)\n    am = str(am)\n    if len(ah) == 1:\n        ah = '0' + ah\n    if len(am) == 1:\n        am = '0' + am\n    s = ah + ':' + am\n    print(s)", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor t in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "valid_numbers = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nt = int(input())\nfor _ in range(0, t):\n    (H, M) = map(int, input().split())\n    (h, m) = map(int, input().split(':'))\n    time = min(H, M)\n    hour_plus = False\n    hour_change = False\n    while 1:\n        m_reverse = valid_numbers[m % 10] * 10 if m % 10 in valid_numbers else m % 10 * 10\n        m_reverse = m_reverse + valid_numbers[m // 10] if m // 10 in valid_numbers else m // 10\n        if m >= M and m_reverse >= H:\n            m = 0\n            hour_plus = True\n            break\n        elif m // 10 in valid_numbers and m % 10 in valid_numbers and (m < M) and (m_reverse < H):\n            break\n        else:\n            m += 1\n    if hour_plus:\n        h += 1\n    while 1:\n        h_reverse = valid_numbers[h % 10] * 10 if h % 10 in valid_numbers else h % 10 * 10\n        h_reverse = h_reverse + valid_numbers[h // 10] if h // 10 in valid_numbers else h // 10\n        if h >= H and h_reverse >= M:\n            h = 0\n            break\n        elif h // 10 in valid_numbers and h % 10 in valid_numbers and (h < H) and (h_reverse < M):\n            break\n        else:\n            h += 1\n            hour_change = True\n    if hour_change:\n        m = 0\n    print(str(h).zfill(2) + ':' + str(m).zfill(2))", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n\ndef miror(a, b):\n    xa = a // 10\n    ya = a % 10\n    xb = b // 10\n    yb = b % 10\n    if xa not in d:\n        return (100, 100)\n    if ya not in d:\n        return (100, 100)\n    if xb not in d:\n        return (100, 100)\n    if yb not in d:\n        return (100, 100)\n    return (d[yb] * 10 + d[xb], d[ya] * 10 + d[xa])\nt = int(input())\nfor q in range(t):\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    (h, m) = (L[0], L[1])\n    ch = input()\n    L = [int(i) for i in ch.split(':')]\n    (a, b) = (L[0], L[1])\n    while True:\n        if miror(a, b)[0] < h and miror(a, b)[1] < m:\n            break\n        b += 1\n        if b >= m:\n            b = 0\n            a += 1\n        if a >= h:\n            a = 0\n    if a < 10:\n        ch1 = '0' + str(a)\n    else:\n        ch1 = str(a)\n    if b < 10:\n        ch2 = '0' + str(b)\n    else:\n        ch2 = str(b)\n    print(ch1 + ':' + ch2)", "def func(s, n):\n    l = {1: 1, 2: 5, 5: 2, 0: 0, 8: 8}\n    s1 = s % 10\n    s2 = s // 10\n    if s1 in l:\n        s1 = l[s1]\n    else:\n        return 0\n    if s2 in l:\n        s2 = l[s2]\n    else:\n        return 0\n    rs = s1 * 10 + s2\n    if rs < n:\n        return 1\n    else:\n        return 0\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    h = int(s[0:2])\n    m = int(s[3:5])\n    while 1:\n        if func(h, k) and func(m, n):\n            break\n        m += 1\n        if m == k:\n            m = 0\n            h += 1\n            if h == n:\n                h = 0\n    print('{:02d}:{:02d}'.format(h, m))", "m = [0, 1, 2, 5, 8]\n\ndef f(k):\n    return 5 if k == 2 else 2 if k == 5 else k\nfor _ in range(int(input())):\n    (h1, m1) = map(int, input().split())\n    (h2, m2) = map(int, input().split(':'))\n    while 1:\n        if m2 // 10 in m and m2 % 10 in m and (f(m2 % 10) * 10 + f(m2 // 10) < h1) and (h2 // 10 in m) and (h2 % 10 in m) and (f(h2 % 10) * 10 + f(h2 // 10) < m1):\n            break\n        m2 += 1\n        if m2 >= m1:\n            m2 = 0\n            h2 += 1\n        if h2 >= h1:\n            h2 = 0\n    print('0' * (1 if h2 // 10 == 0 else 0) + str(h2) + ':' + '0' * (1 if m2 // 10 == 0 else 0) + str(m2))", "try:\n    first = [0, 1, 2, 5, 8]\n    second = [0, 1, 5, 2, 8]\n    vis = []\n\n    def init():\n        for i in range(110):\n            vis.append(-1)\n        for i in range(5):\n            for j in range(5):\n                a = first[i]\n                b = first[j]\n                vis[a * 10 + b] = second[j] * 10 + second[i]\n\n    def check(sh, sm, h, m):\n        (e, f) = (vis[sm], vis[sh])\n        if e < 0 or f < 0:\n            return False\n        if e >= h or f >= m:\n            return False\n        return True\n    init()\n    test = int(input())\n    while test != 0:\n        (h, m) = map(int, input().split())\n        inp = input().split(':')\n        (sh, sm) = (int(inp[0]), int(inp[1]))\n        while True:\n            if check(sh, sm, h, m):\n                if len(str(sh)) == 1:\n                    sh = '0' + str(sh)\n                if len(str(sm)) == 1:\n                    sm = '0' + str(sm)\n                print(sh, end=':')\n                print(sm)\n                break\n            sm += 1\n            if sm >= m:\n                sm = 0\n                sh += 1\n            if sh >= h:\n                sh = 0\n        test -= 1\nexcept EOFError:\n    print(' ')", "number_to_mirror = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n\ndef is_correct(l, r, h, m):\n    (a, b) = (l // 10, l % 10)\n    (c, d) = (r // 10, r % 10)\n    mirror = []\n    for v in [a, b, c, d]:\n        if number_to_mirror.get(v) is None:\n            return False\n        mirror.append(number_to_mirror[v])\n    (d, c, b, a) = mirror\n    l = a * 10 + b\n    r = c * 10 + d\n    return l < h and r < m\n\ndef main():\n    t = int(input())\n    result = []\n    for _ in range(t):\n        (h, m) = map(int, input().split())\n        s = input()\n        (l, r) = map(int, s.split(':'))\n        while not is_correct(l, r, h, m):\n            r += 1\n            if r >= m:\n                r = 0\n                l += 1\n            if l >= h:\n                l = 0\n        (a, b) = (l // 10, l % 10)\n        (c, d) = (r // 10, r % 10)\n        result.append(f'{a}{b}:{c}{d}')\n    print('\\n'.join(result))\nmain()", "m = [0, 1, 2, 5, 8]\n\ndef f(k):\n    return 5 if k == 2 else 2 if k == 5 else k\nfor _ in range(int(input())):\n    (h1, m1) = map(int, input().split())\n    (h2, m2) = map(int, input().split(':'))\n    while 1:\n        if m2 // 10 in m and m2 % 10 in m and (f(m2 % 10) * 10 + f(m2 // 10) < h1) and (h2 // 10 in m) and (h2 % 10 in m) and (f(h2 % 10) * 10 + f(h2 // 10) < m1):\n            break\n        m2 += 1\n        if m2 >= m1:\n            m2 = 0\n            h2 += 1\n        if h2 >= h1:\n            h2 = 0\n    print('0' * (1 if h2 // 10 == 0 else 0) + str(h2) + ':' + '0' * (1 if m2 // 10 == 0 else 0) + str(m2))", "mirrored = [-1] * 10\nmirrored[0] = 0\nmirrored[1] = 1\nmirrored[2] = 5\nmirrored[5] = 2\nmirrored[8] = 8\n\ndef isValid(hour, minute, h, m):\n    h2 = hour % 10\n    h1 = (hour - h2) // 10\n    m2 = minute % 10\n    m1 = (minute - m2) // 10\n    if mirrored[h2] != -1 and mirrored[h1] != -1 and (mirrored[m2] != -1) and (mirrored[m1] != -1):\n        current_h = mirrored[m2] * 10 + mirrored[m1]\n        current_m = mirrored[h2] * 10 + mirrored[h1]\n        if current_h < h and current_m < m:\n            return True\n    else:\n        return False\nT = int(input())\nfor _ in range(T):\n    (h, m) = map(int, input().strip().split())\n    time = input()\n    current_h = int(time[:2])\n    current_m = int(time[3:])\n    while True:\n        if isValid(current_h, current_m, h, m):\n            ans = ''\n            if current_h < 10:\n                ans += '0'\n            ans += str(current_h)\n            ans += ':'\n            if current_m < 10:\n                ans += '0'\n            ans += str(current_m)\n            print(ans)\n            break\n        if current_m < m - 1:\n            current_m += 1\n        elif current_h < h - 1:\n            current_h += 1\n            current_m = 0\n        else:\n            current_h = 0\n            current_m = 0", "m = [0, 1, 2, 5, 8]\n\ndef f(k):\n    return 5 if k == 2 else 2 if k == 5 else k\nfor _ in range(int(input())):\n    (h1, m1) = map(int, input().split())\n    (h2, m2) = map(int, input().split(':'))\n    while 1:\n        if m2 // 10 in m and m2 % 10 in m and (f(m2 % 10) * 10 + f(m2 // 10) < h1) and (h2 // 10 in m) and (h2 % 10 in m) and (f(h2 % 10) * 10 + f(h2 // 10) < m1):\n            break\n        m2 += 1\n        if m2 >= m1:\n            m2 = 0\n            h2 += 1\n        if h2 >= h1:\n            h2 = 0\n    print('0' * (1 if h2 // 10 == 0 else 0) + str(h2) + ':' + '0' * (1 if m2 // 10 == 0 else 0) + str(m2))", "m = [0, 1, 2, 5, 8]\n\ndef f(k):\n    return 5 if k == 2 else 2 if k == 5 else k\nfor i in range(int(input())):\n    (h1, m1) = map(int, input().split())\n    (h2, m2) = map(int, input().split(':'))\n    while 1:\n        if m2 % 10 in m and m2 // 10 in m and (f(m2 % 10) * 10 + f(m2 // 10) < h1) and (h2 % 10 in m) and (h2 // 10 in m) and (f(h2 % 10) * 10 + f(h2 // 10) < m1):\n            break\n        m2 += 1\n        if m2 >= m1:\n            m2 = 0\n            h2 += 1\n        if h2 >= h1:\n            h2 = 0\n    print('0' * (1 if h2 // 10 == 0 else 0) + str(h2) + ':' + '0' * (1 if m2 // 10 == 0 else 0) + str(m2))", "def abc(a, b):\n    (aa, bb) = (a, b)\n    x = 0\n    y = 0\n    while a:\n        z = a % 10\n        if d[z] == -1:\n            return 0\n        else:\n            x = x * 10 + d[z]\n        a = a // 10\n    while b:\n        z = b % 10\n        if d[z] == -1:\n            return 0\n        else:\n            y = y * 10 + d[z]\n        b = b // 10\n    if len(str(aa)) == 1:\n        x = x * 10\n    if len(str(bb)) == 1:\n        y = y * 10\n    return y < h and x < m\nd = {}\nd[0] = 0\nd[1] = 1\nd[2] = 5\nd[3] = -1\nd[4] = -1\nd[5] = 2\nd[6] = -1\nd[7] = -1\nd[8] = 8\nd[9] = -1\n(h, m) = (0, 0)\nt = int(input())\nfor _ in range(t):\n    (h, m) = map(int, input().split())\n    (a, b) = map(int, input().split(':'))\n    while True:\n        if abc(a, b):\n            if len(str(a)) == 1:\n                a = '0' + str(a)\n            else:\n                a = str(a)\n            if len(str(b)) == 1:\n                b = '0' + str(b)\n            else:\n                b = str(b)\n            print(a, b, sep=':')\n            break\n        b = (b + 1) % m\n        if b == 0:\n            a = (a + 1) % h", "mirror = [0, 1, 5, 0, 0, 2, 0, 0, 8, 0]\narr = [1, 1, 1, 0, 0, 1, 0, 0, 1, 0]\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    s = input().split(':')\n    (x, y) = map(int, s)\n    while True:\n        (a, b, c, d) = (*divmod(x, 10), *divmod(y, 10))\n        if arr[a] and arr[b] and arr[c] and arr[d]:\n            (a1, b1, c1, d1) = [mirror[i] for i in (a, b, c, d)]\n            xr = d1 * 10 + c1\n            yr = b1 * 10 + a1\n            if xr < h and yr < m:\n                print(str(x).zfill(2) + ':' + str(y).zfill(2))\n                break\n        y += 1\n        if y == m:\n            (x, y) = ((x + 1) % h, 0)", "def check(curr):\n    (ones, tens) = (curr % 10, curr // 10)\n    if ones in d and tens in d:\n        return d[ones] * 10 + d[tens]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    mir = [-1] * 10\n    mir[0] = 0\n    mir[1] = 1\n    mir[2] = 5\n    mir[5] = 2\n    mir[8] = 8\n    for i in range(int(input())):\n        (h, m) = map(int, input().split())\n        (hh, mm) = map(int, input().split(':'))\n        while True:\n            hs = (hh // 10, hh % 10)\n            ms = (mm // 10, mm % 10)\n            m_ = (mir[hs[1]], mir[hs[0]])\n            h_ = (mir[ms[1]], mir[ms[0]])\n            if -1 not in m_ and -1 not in h_ and (h_[0] * 10 + h_[1] < h) and (m_[0] * 10 + m_[1] < m):\n                print(*hs, ':', *ms, sep='')\n                break\n            mm += 1\n            if mm == m:\n                mm = 0\n                hh += 1\n                if hh == h:\n                    hh = 0\nsolve()", "def check(a, B):\n    d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n    temp2 = 0\n    if a // 10 in d and a % 10 in d:\n        temp2 = d[a // 10] + d[a % 10] * 10\n        if temp2 >= B:\n            return 0\n    else:\n        return 0\n    return 1\nt = int(input())\nfor i in range(t):\n    (H, M) = [int(i) for i in input().split()]\n    (h, m) = [int(i) for i in input().split(':')]\n    while check(h, M) == 0 or check(m, H) == 0:\n        if m == M - 1:\n            m = 0\n            if h == H - 1:\n                h = 0\n            else:\n                h += 1\n        else:\n            m += 1\n    ans = ''\n    if h < 10:\n        ans += '0' + str(h)\n    else:\n        ans += str(h)\n    ans += ':'\n    if m < 10:\n        ans += '0' + str(m)\n    else:\n        ans += str(m)\n    print(ans)", "d = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\n\ndef check(x):\n    (one, ten) = (x % 10, x // 10)\n    if one in d and ten in d:\n        return d[one] * 10 + d[ten]\n    return float('inf')\nfor i in range(int(input())):\n    (h, m) = list(map(int, input().split()))\n    (x, y) = list(map(int, input().split(':')))\n    while True:\n        if check(x) < m and check(y) < h:\n            break\n        y += 1\n        if y >= m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "def chk(cur):\n    (one, ten) = (cur % 10, cur // 10)\n    if one in d and ten in d:\n        return d[one] * 10 + d[ten]\n    return 10 ** 5\nd = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    while True:\n        if chk(x) < m and chk(y) < h:\n            break\n        y += 1\n        if y == m:\n            y = 0\n            x = (x + 1) % h\n    print(str(x).rjust(2, '0') + ':' + str(y).rjust(2, '0'))", "clock = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nmirror = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n\ndef check(h1, h2, m1, m2, m, H, M):\n    if m[h1] == -1 or m[h2] == -1 or m[m1] == -1 or (m[m2] == -1):\n        return False\n    if m[m2] * 10 + m[m1] < H and m[h2] * 10 + m[h1] < M:\n        return True\n    return False\nq = int(input())\nwhile q:\n    (h, m) = input().split()\n    (h, m) = (int(h), int(m))\n    s = input()\n    (h1, h2, m1, m2) = (int(s[0]), int(s[1]), int(s[3]), int(s[4]))\n    while True:\n        if check(h1, h2, m1, m2, mirror, h, m):\n            print(str(h1) + str(h2) + ':' + str(m1) + str(m2))\n            break\n        else:\n            m2 += 1\n            if m2 == 10:\n                m2 = 0\n                m1 += 1\n            if m1 * 10 + m2 >= m:\n                m1 = 0\n                m2 = 0\n                h2 += 1\n            if h2 == 10:\n                h2 = 0\n                h1 += 1\n            if h1 * 10 + h2 >= h:\n                h1 = 0\n                h2 = 0\n    q -= 1", "data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nreversed_data = [0, 1, 5, 'No', 'No', 2, 'No', 'No', 8, 'No']\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hour, minute) = map(int, input().split(':'))\n    while True:\n        hour0 = hour // 10\n        hour1 = hour % 10\n        minute0 = minute // 10\n        minute1 = minute % 10\n        if 'No' not in [reversed_data[hour0], reversed_data[hour1], reversed_data[minute0], reversed_data[minute1]]:\n            reversed_hour = reversed_data[minute1] * 10 + reversed_data[minute0]\n            reversed_minute = reversed_data[hour1] * 10 + reversed_data[hour0]\n            if reversed_hour < h and reversed_minute < m:\n                break\n            else:\n                minute += 1\n                if minute == m:\n                    minute = 0\n                    hour += 1\n                    if hour == h:\n                        hour = 0\n        else:\n            minute += 1\n            if minute == m:\n                minute = 0\n                hour += 1\n                if hour == h:\n                    hour = 0\n    print(str('%02d' % hour) + ':' + str('%02d' % minute))", "mirror = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n\ndef digits(v):\n    return (v // 10, v % 10)\nfor _ in range(int(input())):\n    (h, m) = list(map(int, input().split()))\n    (sh, sm) = list(map(int, input().split(':')))\n    while True:\n        (sm2, sm1) = digits(sm)\n        (sh2, sh1) = digits(sh)\n        if sm1 in mirror and sm2 in mirror and (sh1 in mirror) and (sh2 in mirror):\n            mh = mirror[sm1] * 10 + mirror[sm2]\n            mm = mirror[sh1] * 10 + mirror[sh2]\n            if mh < h and mm < m:\n                print(str(sh2) + str(sh1) + ':' + str(sm2) + str(sm1))\n                break\n        sm += 1\n        if sm == m:\n            sm = 0\n            sh += 1\n            if sh == h:\n                sh = 0", "refl = {0: 0, 1: 10, 2: 50, 5: 20, 8: 80, 10: 1, 11: 11, 12: 51, 15: 21, 18: 81, 20: 5, 21: 15, 22: 55, 25: 25, 28: 85, 50: 2, 51: 12, 52: 52, 55: 22, 58: 82, 80: 8, 81: 18, 82: 58, 85: 28, 88: 88}\n\ndef batao(m, n, a, b):\n    return not (m in refl and n in refl and (refl[n] < a) and (refl[m] < b))\nfor _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split(' ')]\n    (i, j) = [int(x) for x in input().split(':')]\n    if batao(i, j, a, b):\n        v = (i * b + j) % (a * b)\n        (i, j) = (v // b % a, v % b)\n        while batao(i, j, a, b):\n            v = (v + 1) % (a * b)\n            (i, j) = (v // b % a, v % b)\n    print(str(i).zfill(2) + ':' + str(j).zfill(2))", "from math import *\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import *\nm = pow(10, 9) + 7\nreverse = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n\ndef rev(sec):\n    (a, b) = (sec // 10, sec % 10)\n    if reverse[a] == -1 or reverse[b] == -1:\n        return sys.maxsize\n    return reverse[b] * 10 + reverse[a]\n\ndef digit(sec):\n    d = 1\n    while True:\n        sec //= 10\n        if sec == 0:\n            break\n        d += 1\n    return d\n\ndef correct(sec):\n    if digit(sec) == 1:\n        return '0' + str(sec)\n    return sec\nfor t in range(int(input())):\n    (h, m) = map(int, input().split())\n    (th, tm) = map(int, input().split(':'))\n    while True:\n        if tm == m:\n            th += 1\n            tm = 0\n        if th == h:\n            th = 0\n        if rev(th) < m and rev(tm) < h:\n            print(f'{correct(th)}:{correct(tm)}')\n            break\n        tm += 1", "mirror = [0, 1, 5, 100, 100, 2, 100, 100, 8, 100]\n\ndef print_ans(hours, minutes):\n    ans = str(hours).zfill(2) + ':' + str(minutes).zfill(2)\n    print(ans)\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (sh, sm) = map(int, input().split(':'))\n    while True:\n        mirror_h = mirror[sm % 10] * 10 + mirror[sm // 10]\n        mirror_m = mirror[sh % 10] * 10 + mirror[sh // 10]\n        if mirror_h < h and mirror_m < m:\n            print_ans(sh, sm)\n            break\n        sm += 1\n        if sm == m:\n            sm = 0\n            sh = (sh + 1) % h", "clock = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nmirror = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n\ndef check(h1, h2, m1, m2, m, H, M):\n    if m[h1] == -1 or m[h2] == -1 or m[m1] == -1 or (m[m2] == -1):\n        return False\n    if m[m2] * 10 + m[m1] < H and m[h2] * 10 + m[h1] < M:\n        return True\n    return False\nq = int(input())\nwhile q:\n    (h, m) = input().split()\n    (h, m) = (int(h), int(m))\n    s = input()\n    (h1, h2, m1, m2) = (int(s[0]), int(s[1]), int(s[3]), int(s[4]))\n    while True:\n        if check(h1, h2, m1, m2, mirror, h, m):\n            print(str(h1) + str(h2) + ':' + str(m1) + str(m2))\n            break\n        else:\n            m2 += 1\n            if m2 == 10:\n                m2 = 0\n                m1 += 1\n            if m1 * 10 + m2 >= m:\n                m1 = 0\n                m2 = 0\n                h2 += 1\n            if h2 == 10:\n                h2 = 0\n                h1 += 1\n            if h1 * 10 + h2 >= h:\n                h1 = 0\n                h2 = 0\n    q -= 1", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom bisect import bisect_left\n\ndef isvalid(i, j, k, l, h, m):\n    ans = 10 * int(i) + int(j) < h and 10 * int(k) + int(l) < m\n\n    def reverse(char):\n        if char in [1, 0, 8]:\n            return char\n        if char == 2:\n            return 5\n        return 2\n    rev = [reverse(c) for c in [l, k, j, i]]\n    ans = ans and 10 * int(rev[0]) + int(rev[1]) < h and (10 * int(rev[2]) + int(rev[3]) < m)\n    return ans\nfor _ in range(rn()):\n    (h, m) = rns()\n    s = rs()\n    good = [0, 1, 2, 5, 8]\n    times = []\n    for i in good:\n        for j in good:\n            for k in good:\n                for l in good:\n                    if isvalid(i, j, k, l, h, m):\n                        time = str(i) + str(j) + ':' + str(k) + str(l)\n                        ttime = (10 * int(i) + int(j)) * m + (10 * int(k) + int(l))\n                        times.append([ttime, time])\n    times.sort()\n    atimes = [i[0] for i in times]\n    find = (10 * int(s[0]) + int(s[1])) * m + (10 * int(s[3]) + int(s[4]))\n    i = bisect_left(atimes, find) % len(atimes)\n    ans = times[i][1]\n    print(ans)", "I = lambda x: [*map(int, input().split(x))]\nfor _ in ' ' * I(' ')[0]:\n    (hh, mm) = I(' ')\n    (h, m) = I(':')\n    convert = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n    while 1:\n        ah = convert[h // 10]\n        bh = convert[h % 10]\n        am = convert[m // 10]\n        bm = convert[m % 10]\n        H = 10 * bm + am\n        M = 10 * bh + ah\n        if -1 in [ah, bh, am, bm] or H >= hh or M >= mm:\n            m = (m + 1) % mm\n            if m == 0:\n                h = (h + 1) % hh\n            continue\n        else:\n            print('0' * (h < 10) + str(h) + ':' + '0' * (m < 10) + str(m))\n            break", "for _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (x, y) = map(int, input().split(':'))\n    s = '01258'\n\n    def fff(x, y, h, m):\n        (x, y) = (str(x), str(y))\n        if len(x) < 2:\n            x = '0' + x\n        if len(y) < 2:\n            y = '0' + y\n        if x[0] not in s or y[0] not in s or x[1] not in s or (y[1] not in s):\n            return False\n        x = x.replace('5', '-1')\n        x = x.replace('2', '5')\n        x = x.replace('-1', '2')\n        y = y.replace('5', '-1')\n        y = y.replace('2', '5')\n        y = y.replace('-1', '2')\n        return int(x[::-1]) < m and int(y[::-1]) < h\n    while not fff(x, y, h, m):\n        y += 1\n        if y == m:\n            y = 0\n            x += 1\n            if x == h:\n                x = 0\n    if x < 10:\n        print('0%d' % x, end=':')\n    else:\n        print(x, end=':')\n    if y < 10:\n        print('0%d' % y)\n    else:\n        print(y)", "mir = [-1] * 10\nmir[0] = 0\nmir[1] = 1\nmir[2] = 5\nmir[5] = 2\nmir[8] = 8\nfor i in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hh, mm) = map(int, input().split(':'))\n    while True:\n        hs = (hh // 10, hh % 10)\n        ms = (mm // 10, mm % 10)\n        m_ = (mir[hs[1]], mir[hs[0]])\n        h_ = (mir[ms[1]], mir[ms[0]])\n        if -1 not in m_ and -1 not in h_ and (h_[0] * 10 + h_[1] < h) and (m_[0] * 10 + m_[1] < m):\n            print(*hs, ':', *ms, sep='')\n            break\n        mm += 1\n        if mm == m:\n            mm = 0\n            hh += 1\n            if hh == h:\n                hh = 0", "def can_mirror(x):\n    Q = set([0, 1, 2, 5, 8])\n    if x in Q:\n        return True\n    else:\n        return False\n\ndef mirror(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 5\n    if x == 5:\n        return 2\n    if x == 8:\n        return 8\n    return 0\n\ndef solve():\n    (h, m) = map(int, input().split())\n    s = input()\n    for hh in range(int(s[:2]), h):\n        start = int(s[3:]) * (hh == int(s[:2]))\n        for mm in range(start, m):\n            now_h = hh\n            now_m = mm\n            can = True\n            cnt = 2\n            while cnt > 0:\n                if can_mirror(now_h % 10) and can_mirror(now_m % 10):\n                    cnt -= 1\n                else:\n                    can = False\n                    break\n                now_h //= 10\n                now_m //= 10\n            if not can:\n                continue\n            new_h = 10 * mirror(mm % 10) + mirror(mm // 10)\n            new_m = 10 * mirror(hh % 10) + mirror(hh // 10)\n            if new_h < h and new_m < m:\n                ans = '0' * (hh < 10) + str(hh) + ':' + '0' * (mm < 10) + str(mm)\n                print(ans)\n                return\n    print('00:00')\nfor _ in range(int(input())):\n    solve()", "mir = [-1] * 10\nmir[0] = 0\nmir[1] = 1\nmir[2] = 5\nmir[5] = 2\nmir[8] = 8\nfor i in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hh, mm) = map(int, input().split(':'))\n    while True:\n        hs = (hh // 10, hh % 10)\n        ms = (mm // 10, mm % 10)\n        m_ = (mir[hs[1]], mir[hs[0]])\n        h_ = (mir[ms[1]], mir[ms[0]])\n        if -1 not in m_ and -1 not in h_ and (h_[0] * 10 + h_[1] < h) and (m_[0] * 10 + m_[1] < m):\n            print(*hs, ':', *ms, sep='')\n            break\n        mm += 1\n        if mm == m:\n            mm = 0\n            hh += 1\n            if hh == h:\n                hh = 0", "import math\nfor _ in range(int(input())):\n    (h, m) = list(map(int, input().split()))\n    (h1, m1) = list(map(int, input().split(':')))\n    dic = {1: 1, 2: 5, 5: 2, 8: 8, 0: 0}\n    dd = list(dic.keys())\n    i = h1\n    j = m1\n    while True:\n        a1 = i % 10\n        a2 = math.floor(i / 10)\n        a3 = j % 10\n        a4 = math.floor(j / 10)\n        if a1 in dic.keys() and a2 in dic.keys() and (a3 in dic.keys()) and (a4 in dic.keys()):\n            mm1 = dic[a1] * 10 + dic[a2]\n            hh1 = dic[a3] * 10 + dic[a4]\n            if mm1 < m and hh1 < h:\n                mm1 = j\n                hh1 = i\n                if mm1 <= 9:\n                    mm1 = '0' + str(mm1)\n                if hh1 < 10:\n                    hh1 = '0' + str(hh1)\n                print(str(hh1) + ':' + str(mm1))\n                break\n            else:\n                j += 1\n                j = j % m\n                if j == 0:\n                    i += 1\n                    i = i % h\n                    if i == h1 and j == m1:\n                        break\n        else:\n            j += 1\n            j = j % m\n            if j == 0:\n                i += 1\n                i = i % h\n                if i == h1 and j == m1:\n                    break", "def next_min(h, m, time):\n    hh = time[0]\n    mm = time[1] + 1\n    if mm == m:\n        mm = 0\n        hh += 1\n        if hh == h:\n            hh = 0\n    return [hh, mm]\n\ndef mirror(time):\n    hh = time[0]\n    mm = time[1]\n    h1 = hh // 10\n    h2 = hh % 10\n    m1 = mm // 10\n    m2 = mm % 10\n    s = {0, 1, 2, 5, 8}\n    if not (h1 in s and h2 in s and (m1 in s) and (m2 in s)):\n        return [-1, -1]\n    nh1 = reverse(m2)\n    nh2 = reverse(m1)\n    nm1 = reverse(h2)\n    nm2 = reverse(h1)\n    return [nh1 * 10 + nh2, nm1 * 10 + nm2]\n\ndef reverse(d):\n    if d == 1:\n        return 1\n    if d == 2:\n        return 5\n    if d == 5:\n        return 2\n    if d == 8:\n        return 8\n    return 0\nfor i in range(int(input())):\n    (h, m) = map(int, input().split())\n    time = list(map(int, input().split(':')))\n    mtime = mirror(time)\n    while mtime[0] < 0 or mtime[0] >= h or mtime[1] >= m:\n        time = next_min(h, m, time)\n        mtime = mirror(time)\n    hh = time[0]\n    mm = time[1]\n    h1 = hh // 10\n    h2 = hh % 10\n    m1 = mm // 10\n    m2 = mm % 10\n    print('{}{}:{}{}'.format(h1, h2, m1, m2))", "_VALID_SET = set(list('01258'))\n_REP = {'2': '5', '5': '2'}\n\ndef solve(h, m, H, M):\n    while h < H:\n        while m < M:\n            (sh, sm) = (str(h).zfill(2), str(m).zfill(2))\n            st = sh + sm\n            if set(st) <= _VALID_SET:\n                rt = st[::-1]\n                if set(rt) <= _VALID_SET:\n                    rt = ''.join(map(lambda c: _REP[c] if c in _REP else c, rt))\n                    (rh, rm) = (rt[:2], rt[2:])\n                    if int(rh) < H and int(rm) < M:\n                        print(f'{sh}:{sm}')\n                        return\n            m += 1\n            if m == M:\n                m = 0\n                break\n        h += 1\n        if h == H:\n            h = 0\nt = int(input())\nfor _ in range(t):\n    (H, M) = list(map(int, input().split()))\n    (h, m) = list(map(int, input().split(':')))\n    solve(h, m, H, M)", "def rever(num):\n    lis = list(str(num))\n    if len(lis) == 1:\n        lis = ['0'] + lis\n    for i in range(len(lis)):\n        if lis[i] == '2':\n            lis[i] = '5'\n        elif lis[i] == '5':\n            lis[i] = '2'\n    return int(''.join(lis[::-1]))\n\ndef is_beauty(hour, minu, maxh, maxm):\n    valid = ['0', '1', '2', '5', '8']\n    for i in list(str(hour)):\n        if i not in valid:\n            return False\n    for i in list(str(minu)):\n        if i not in valid:\n            return False\n    (revm, revh) = (rever(hour), rever(minu))\n    for i in list(str(revh)):\n        if i not in valid:\n            return False\n    for i in list(str(revm)):\n        if i not in valid:\n            return False\n    if revh >= maxh:\n        return False\n    if revm >= maxm:\n        return False\n    return True\n\ndef pprint(hr, mi):\n    (hr, mi) = (str(hr), str(mi))\n    if len(hr) == 1:\n        hr = '0' + hr\n    if len(mi) == 1:\n        mi = '0' + mi\n    print(hr + ':' + mi)\nfor _ in ' ' * int(input()):\n    (h, m) = map(int, input().split())\n    (ch, cm) = map(int, input().split(':'))\n    while True:\n        if is_beauty(ch, cm, h, m):\n            pprint(ch, cm)\n            break\n        cm += 1\n        if cm >= m:\n            cm = 0\n            ch += 1\n            if ch >= h:\n                ch = 0", "t = int(input())\nreflection = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\ndef reflect(s):\n    res = ''\n    for c in s:\n        if c in reflection:\n            res += reflection[c]\n        else:\n            return None\n    return res[::-1]\n\ndef isCorrect(h, m, Th, Tm):\n    h = '%02d' % h\n    nh = reflect(h)\n    m = '%02d' % m\n    nm = reflect(m)\n    if nh is None or nm is None:\n        return False\n    (nh, nm) = (int(nm), int(nh))\n    return nh < Th and nm < Tm\nfor _ in range(t):\n    (Th, Tm) = map(int, input().split())\n    s = input().split(':')\n    (h, m) = (int(s[0]), int(s[1]))\n    while True:\n        if isCorrect(h, m, Th, Tm):\n            break\n        m += 1\n        if m == Tm:\n            h += 1\n            m = 0\n            if h == Th:\n                h = 0\n    print('%02d:%02d' % (h, m))", "def is_correct(h, m, h2, m2):\n    mirror = {0: 0, 1: 10, 2: 50, 5: 20, 8: 80, 10: 1, 11: 11, 12: 51, 15: 21, 18: 81, 20: 5, 21: 15, 22: 55, 25: 25, 28: 85, 50: 2, 51: 12, 52: 52, 55: 22, 58: 82, 80: 8, 81: 18, 82: 58, 85: 28, 88: 88}\n    if mirror.get(h2) != None and mirror.get(m2) != None:\n        if mirror.get(h2) < m and mirror.get(m2) < h:\n            return True\n    return False\nfor i in range(int(input())):\n    (h, m) = map(int, input().split())\n    (h2, m2) = map(int, input().split(':'))\n    while True:\n        if is_correct(h, m, h2, m2):\n            break\n        m2 += 1\n        if m2 >= m:\n            m2 = 0\n            h2 += 1\n            if h2 >= h:\n                h2 = 0\n    print(':'.join([str(h2) if h2 > 9 else '0' + str(h2), str(m2) if m2 > 9 else '0' + str(m2)]))", "t = int(input())\nmirror = {0: 0, 1: 1, 2: 5, 3: -1, 4: -1, 5: 2, 6: -1, 7: -1, 8: 8, 9: -1}\n\ndef valid(m1, m2, h1, h2, m, h):\n    (nh1, nh2) = (mirror[h1], mirror[h2])\n    (nm1, nm2) = (mirror[m1], mirror[m2])\n    if -1 in [nm1, nm2, nh1, nh2]:\n        return False\n    else:\n        if 10 * nm2 + nm1 >= h:\n            return False\n        if 10 * nh2 + nh1 >= m:\n            return False\n        return True\n\ndef next(m1, m2, h1, h2, m, h):\n    minute = 10 * m1 + m2\n    heure = 10 * h1 + h2\n    minute += 1\n    heure += minute // m\n    minute = minute % m\n    heure = heure % h\n    return (minute // 10, minute % 10, heure // 10, heure % 10)\nfor case in range(t):\n    (h, m) = map(int, input().split())\n    s = input()\n    (h1, h2) = map(int, s[:2])\n    (m1, m2) = map(int, s[3:])\n    while not valid(m1, m2, h1, h2, m, h):\n        (m1, m2, h1, h2) = next(m1, m2, h1, h2, m, h)\n    print(h1, h2, ':', m1, m2, sep='')", "import sys, math\nref = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\ndef is_valid(H, M, h, m):\n    return h < H and m < M\n\ndef str_to_num(hs, ms, H, M):\n    return int(hs) * M + int(ms)\n\ndef num_to_str(n, H, M):\n    h = n // M % H\n    m = n % M\n    hs = '0' + str(h) if h < 10 else str(h)\n    ms = '0' + str(m) if m < 10 else str(m)\n    return (hs, ms)\n\ndef reflect(hs, ms):\n    try:\n        rms = ref[hs[1]] + ref[hs[0]]\n        rhs = ref[ms[1]] + ref[ms[0]]\n        return (rhs, rms)\n    except KeyError:\n        return (None, None)\n\ndef main(pname):\n    t = int(input())\n    for j in range(t):\n        (H, M) = [int(i) for i in input().split()]\n        (hs, ms) = input().split(':')\n        n0 = str_to_num(hs, ms, H, M)\n        for i in range(n0, n0 + H * M):\n            (nhs, nms) = num_to_str(i, H, M)\n            (rhs, rms) = reflect(nhs, nms)\n            if rhs is not None and is_valid(H, M, int(rhs), int(rms)):\n                print(nhs + ':' + nms)\n                break\nmain('prob2')", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\ndc = {'1': '1', '2': '5', '5': '2', '8': '8', '0': '0', ':': ':'}\n\ndef solve():\n    (h, m) = map(int, input().split())\n    tt = input()\n    hs = int(tt[:2])\n    ms = int(tt[3:5])\n    for d in range(h * m):\n        kms = (ms + d) % m\n        khs = (hs + (ms + d) // m) % h\n        shs = str(khs).zfill(2) + ':' + str(kms).zfill(2)\n        if '3' in shs or '7' in shs or '4' in shs or ('6' in shs) or ('9' in shs):\n            continue\n        rhm = ''\n        for c in shs[::-1]:\n            rhm += dc[c]\n        rhs = int(rhm[:2])\n        rms = int(rhm[3:5])\n        if rhs < h and rms < m:\n            return shs\nfor _ in range(int(input())):\n    print(solve())", "correct = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\nfor i in range(int(input())):\n    (h, m) = map(int, input().split())\n    (oclock, minute) = map(int, input().split(':'))\n    while True:\n        (a, b) = (oclock // 10, oclock % 10)\n        (c, d) = (minute // 10, minute % 10)\n        try:\n            new_oclock = int(str(correct[d]) + str(correct[c]))\n            new_minute = int(str(correct[b]) + str(correct[a]))\n            if new_oclock < h and new_minute < m:\n                break\n        except KeyError:\n            pass\n        minute += 1\n        if minute == m:\n            minute = 0\n            oclock += 1\n            oclock %= h\n    (oclock, minute) = (str(oclock), str(minute))\n    if len(oclock) == 1:\n        oclock = '0' + oclock\n    if len(minute) == 1:\n        minute = '0' + minute\n    print(oclock, ':', minute, sep='')", "rev = {}\nrev['0'] = '0'\nrev['1'] = '1'\nrev['2'] = '5'\nrev['5'] = '2'\nrev['8'] = '8'\n\ndef ref(a1, a2, h, m):\n    s1 = str(a1)\n    if len(s1) == 1:\n        s1 = '0' + s1\n    s2 = str(a2)\n    if len(s2) == 1:\n        s2 = '0' + s2\n    for i in s1:\n        if i not in rev.keys():\n            return False\n    for i in s2:\n        if i not in rev.keys():\n            return False\n    hh = ''\n    mm = ''\n    for i in s1:\n        mm = rev[i] + mm\n    for i in s2:\n        hh = rev[i] + hh\n    if int(mm) < m and int(hh) < h:\n        return True\n    return False\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (h, m) = map(int, input().split())\n    s = input()\n    lst = list(map(str, s.split(':')))\n    curH = int(lst[0])\n    curM = int(lst[1])\n    while ref(curH, curM, h, m) == False:\n        curM += 1\n        if curM == m:\n            curH += 1\n            curM = 0\n        if curH == h:\n            curH = 0\n    hStr = str(curH)\n    mStr = str(curM)\n    if len(hStr) == 1:\n        hStr = '0' + hStr\n    if len(mStr) == 1:\n        mStr = '0' + mStr\n    print(hStr, end=':')\n    print(mStr)", "import string\nt = int(input())\nwhile t > 0:\n    (H, M) = list(map(int, input().split(' ')))\n    (h, m) = list(map(int, input().split(':')))\n    for i in range(h * M + m, (h + H) * M + m):\n        h_ = str(i // M % H).zfill(2)\n        m_ = str(i % M).zfill(2)\n        ok = True\n        for j in ['3', '4', '6', '7', '9']:\n            if j in h_ or j in m_:\n                ok = False\n                break\n        if ok:\n            H_ = int(h_.translate(str.maketrans('25', '52'))[::-1])\n            M_ = int(m_.translate(str.maketrans('25', '52'))[::-1])\n            if M_ < H and H_ < M:\n                print(h_ + ':' + m_)\n                break\n    t -= 1", "def check(time: list, h: int, m: int) -> bool:\n    time_glass = [glass[time[3]], glass[time[2]], glass[time[1]], glass[time[0]]]\n    if None in time_glass:\n        return False\n    if time_glass[0] * 10 + time_glass[1] >= h or time_glass[2] * 10 + time_glass[3] >= m:\n        return False\n    return True\n\ndef time_next(time: list, h: int, m: int) -> list:\n    time_h = time[0] * 10 + time[1]\n    time_m = time[2] * 10 + time[3] + 1\n    if time_m >= m:\n        time_m = time_m % m\n        time_h = (time_h + 1) % h\n    return [time_h // 10, time_h % 10, time_m // 10, time_m % 10]\nglass = [0, 1, 5, None, None, 2, None, None, 8, None]\nT = int(input())\nfor i in range(T):\n    (h, m) = map(int, input().split())\n    s = input()\n    time = [int(s[0]), int(s[1]), int(s[3]), int(s[4])]\n    while not check(time, h, m):\n        time = time_next(time, h, m)\n    print(str(time[0]) + str(time[1]) + ':' + str(time[2]) + str(time[3]))", "def isvalid(s1, s2):\n    s1 = str(s1)\n    s2 = str(s2)\n    if len(s1) != 2:\n        s1 = '0' + s1\n    if len(s2) != 2:\n        s2 = '0' + s2\n    a = 0\n    for i in range(2):\n        if s1[1 - i] not in d.keys():\n            return 0\n        a = a * 10 + d[s1[1 - i]]\n    b = 0\n    for i in range(2):\n        if s2[1 - i] not in d.keys():\n            return 0\n        b = b * 10 + d[s2[1 - i]]\n    if b < h and a < m:\n        return 1\n    return 0\nd = {'0': 0, '1': 1, '2': 5, '5': 2, '8': 8}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    s = input()\n    (a, b) = s.split(':')\n    a = int(a)\n    b = int(b)\n    f = 0\n    for i in range(a, h):\n        if i != a:\n            b = 0\n        for j in range(b, m):\n            if isvalid(i, j):\n                f = 1\n                s1 = str(i)\n                s2 = str(j)\n                if len(s1) != 2:\n                    s1 = '0' + s1\n                if len(s2) != 2:\n                    s2 = '0' + s2\n                print(s1 + ':' + s2)\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print('00:00')", "T = int(input())\n\ndef work():\n    (hmax, mmax) = [int(x) for x in input().strip().split()]\n    t = input().strip()\n    (h, m) = [int(x) for x in t.split(':')]\n    swp = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8', ':': ':'}\n\n    def good(h, m):\n        cur = f'{h:02d}:{m:02d}'\n        if any((c in cur for c in '34679')):\n            return False\n        ref = ''.join((swp[c] for c in cur))\n        (hh, mm) = [int(x) for x in ref[::-1].split(':')]\n        return 0 <= hh < hmax and 0 <= mm < mmax\n    while not good(h, m):\n        m += 1\n        if m == mmax:\n            h += 1\n            m = 0\n            if h == hmax:\n                h = 0\n    print(f'{h:02d}:{m:02d}')\nfor _ in range(T):\n    work()", "sigma = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\ndef w(q, vba):\n    res = ''\n    for j in q[::-1]:\n        if j in vba.keys():\n            res += vba[j]\n        else:\n            return False\n    return res\n\ndef y(l):\n    if l[0] == '0':\n        return int(l[1:])\n    else:\n        return int(l)\n\ndef new(z, c, d):\n    if z and y(z[:2]) < c:\n        if y(z[2:]) < d:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    (h, m) = [int(j) for j in input().split()]\n    x = ''.join(input().split(':'))\n    cde = w(x, sigma)\n    (a, b) = (y(x[:2]), y(x[2:]))\n    if cde:\n        (abc, qwe) = (y(cde[:2]), y(cde[2:]))\n    while not cde or not new(str(abc).zfill(2) + str(qwe).zfill(2), h, m):\n        b += 1\n        if b == m:\n            a += 1\n            b = 0\n            if a == h:\n                a = 0\n        cde = w(str(a).zfill(2) + str(b).zfill(2), sigma)\n        if cde:\n            (abc, qwe) = (y(cde[:2]), y(cde[2:]))\n    print(str(a).zfill(2) + ':' + str(b).zfill(2))", "reflected = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\nT = int(input())\nfor tt in range(T):\n    (hour_cap, minute_cap) = [int(k) for k in input().split()]\n    cur_time = input()\n    (cur_hour, cur_minute) = [int(k) for k in cur_time.split(':')]\n\n    def check_valid(cur_hour, cur_minute):\n        _hour = cur_minute[::-1]\n        _minute = cur_hour[::-1]\n        hour = ''\n        minute = ''\n        for d in _hour:\n            if d not in reflected:\n                return None\n            hour += reflected[d]\n        for d in _minute:\n            if d not in reflected:\n                return None\n            minute += reflected[d]\n        if int(hour) < hour_cap and int(minute) < minute_cap:\n            return hour + ':' + minute\n        return None\n    cur_m = cur_minute + cur_hour * minute_cap\n\n    def fill(a):\n        if a < 10:\n            return '0' + str(a)\n        else:\n            return str(a)\n    for m in range(cur_m, cur_m + 100000):\n        next_m = m % minute_cap\n        next_h = m // minute_cap % hour_cap\n        is_valid = check_valid(fill(next_h), fill(next_m))\n        if is_valid != None:\n            print(fill(next_h) + ':' + fill(next_m))\n            break", "t = int(input())\nr_map = {'1': '1', '0': '0', '2': '5', '5': '2', '8': '8'}\n\ndef is_correct(hh, mm, h, m):\n    hh = str(hh).zfill(2)\n    mm = str(mm).zfill(2)\n    if not all((x in r_map for x in hh + mm)):\n        return False\n    hh2 = mm[::-1]\n    mm2 = hh[::-1]\n    hh3 = [None] * 2\n    mm3 = [None] * 2\n    for i in range(2):\n        hh3[i] = r_map[hh2[i]]\n    for i in range(2):\n        mm3[i] = r_map[mm2[i]]\n    hh2 = ''.join(hh3)\n    mm2 = ''.join(mm3)\n    if int(mm2) >= m or int(hh2) >= h:\n        return False\n    return True\nfor _ in range(t):\n    (h, m) = map(int, input().split())\n    (hh, mm) = input().split(':')\n    hours = int(hh)\n    minutes = int(mm)\n    for i in range(hours, 3 * h):\n        flag = True\n        if i == hours:\n            jrange = [x for x in range(minutes, m)]\n        else:\n            jrange = [x for x in range(0, m)]\n        for j in jrange:\n            i = i % h\n            j = j % m\n            if is_correct(i, j, h, m):\n                i = str(i).zfill(2)\n                j = str(j).zfill(2)\n                print(f'{i}:{j}')\n                flag = False\n                break\n        if not flag:\n            break", "T = int(input())\nP = {0, 1, 2, 5, 8}\nD = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\nfor i in range(T):\n    (h, m) = map(int, input().split())\n    (H, M) = map(int, input().split(':'))\n    flag = False\n    for i in range(H, H + h):\n        if flag:\n            break\n        H2 = i % h % 10\n        H1 = i % h // 10\n        for j in range(M * (i == H), M + m):\n            M2 = j % m % 10\n            M1 = j % m // 10\n            H2 = (i + j // m) % h % 10\n            H1 = (i + j // m) % h // 10\n            S = {H1, H2, M2, M1}\n            if S <= P and D[M2] * 10 + D[M1] < h and (D[H2] * 10 + D[H1] < m):\n                HH = str(H1) + str(H2)\n                MM = str(M1) + str(M2)\n                flag = True\n                break\n    print(HH, MM, sep=':')", "t = int(input())\nwhile t:\n    t -= 1\n    (HR, MIN) = map(int, input().split())\n    (h, m) = map(str, input().split(':'))\n    static = ['0', '1', '5', '-1', '-1', '2', '-1', '-1', '8', '-1']\n    while True:\n        if int(m) >= MIN:\n            h = str(int(h) + 1)\n            if len(h) == 1:\n                h = '0' + h\n            m = '00'\n        if int(h) >= HR:\n            h = '00'\n            m = '00'\n        if static[int(m[1])] == '-1' or static[int(m[0])] == '-1' or static[int(h[1])] == '-1' or (static[int(h[0])] == '-1'):\n            g = 1\n        else:\n            ih = static[int(m[1])] + static[int(m[0])]\n            im = static[int(h[1])] + static[int(h[0])]\n            if int(ih) < HR and int(im) < MIN:\n                print(h, ':', m, sep='')\n                break\n        m = str(int(m) + 1)\n        if len(m) == 1:\n            m = '0' + m", "n1 = int(input())\n\ndef reflect(s):\n    (s1, s2) = (int(s[0]), int(s[1]))\n    if s1 in [3, 4, 6, 7, 9] or s2 in [3, 4, 6, 7, 9]:\n        return -1\n    else:\n        d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\n        temp = s1\n        s1 = d[s2]\n        s2 = d[temp]\n        s = str(10 * s1 + s2)\n        return s\n\ndef check(a, amax):\n    if int(reflect(a)) == -1:\n        return False\n    elif int(reflect(a)) >= int(amax):\n        return False\n    else:\n        return True\nfor _ in range(n1):\n    t1 = [int(item) for item in input().split()]\n    (hmax, mmax) = (t1[0], t1[1])\n    t2 = [item for item in input().split(':')]\n    (h, m) = (t2[0], t2[1])\n    hinp = h\n    while True:\n        if check(h, mmax) is True and check(m, hmax) is True:\n            break\n        m = (int(m) + 1) % mmax\n        if m == 0:\n            h = (int(h) + 1) % hmax\n            if h == 0:\n                h = '00'\n            elif h < 10:\n                h = '0' + str(h)\n            else:\n                h = str(h)\n            m = '00'\n        elif m < 10:\n            m = '0' + str(m)\n        else:\n            m = str(m)\n    print(h + ':' + m)", "valid = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hour, min) = input().split(':')\n    while 1:\n        if int(min) >= m:\n            min = '0'\n            hour = str(int(hour) + 1)\n            if int(hour) >= h:\n                hour = '0'\n        min = '0' * (len(min) == 1) + min\n        hour = '0' * (len(hour) == 1) + hour\n        for i in range(2):\n            if int(hour[i]) not in valid or int(min[i]) not in valid:\n                min = str(int(min) + 1)\n                break\n        else:\n            if int(str(valid[int(min[1])]) + str(valid[int(min[0])])) >= h:\n                min = str(int(min) + 1)\n                continue\n            if int(str(valid[int(hour[1])]) + str(valid[int(hour[0])])) >= m:\n                min = str(int(min) + 1)\n                continue\n            print(hour + ':' + min)\n            break", "p = {'5': '2', '2': '5', '1': '1', '0': '0', '8': '8'}\nfor _ in range(int(input())):\n    (h, m) = [int(i) for i in input().split()]\n    (a, b) = input().split(':')\n    for _ in range(50000):\n        if any((e not in p for e in a + b)):\n            if int(b) == m - 1:\n                if int(a) != h - 1:\n                    a = '0' * (a[0] == '0') * (a[1] < '9') + str(int(a) + 1)\n                    b = '00'\n                    continue\n                else:\n                    a = '00'\n                    b = '00'\n                    continue\n            else:\n                b = '0' * (b[0] == '0') * (b[1] < '9') + str(int(b) + 1)\n                continue\n        elif int(p[b[1]] + p[b[0]]) < h and int(p[a[1]] + p[a[0]]) < m:\n            print(a + ':' + b)\n            break\n        else:\n            if int(b) == m - 1:\n                if int(a) != h - 1:\n                    a = '0' * (a[0] == '0') * (a[1] < '9') + str(int(a) + 1)\n                    b = '00'\n                    continue\n                else:\n                    a = '00'\n                    b = '00'\n                    continue\n            else:\n                b = '0' * (b[0] == '0') * (b[1] < '9') + str(int(b) + 1)\n            continue", "import math\nT = int(input())\nref_d = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n\ndef getTime(x):\n    s = str(x)\n    if len(s) == 1:\n        s = '0' + s\n    ans = ''\n    for i in range(1, -1, -1):\n        if ref_d[int(s[i])] == -1:\n            return math.inf\n        ans += str(ref_d[int(s[i])])\n    return int(ans)\n\ndef convert(x):\n    ans = str(x)\n    if x < 10:\n        ans = '0' + str(x)\n    return ans\nfor _ in range(T):\n    (H, M) = [int(e) for e in input().split(' ')]\n    (h, m) = [int(e) for e in input().split(':')]\n    while True:\n        if M == m:\n            h += 1\n            m = 0\n        if H == h:\n            h = 0\n        if getTime(h) < M and getTime(m) < H:\n            print(convert(h) + ':' + convert(m))\n            break\n        m += 1", "T = int(input())\nfor _ in range(T):\n    (H, M) = map(int, input().split())\n    S = input()\n    start = int(S[0:2]) * M\n    start += int(S[3:5])\n    goal = H * M\n    cond = []\n    for now in range(start, goal):\n        now_hour = now // M\n        now_min = now % M\n        clock = str(now_hour).zfill(2) + str(now_min).zfill(2)\n        isOK = True\n        T = ''\n        for i in range(3, -1, -1):\n            st = clock[i]\n            if st in ['0', '1', '8']:\n                T += st\n            elif st == '2':\n                T += '5'\n            elif st == '5':\n                T += '2'\n            else:\n                isOK = False\n                break\n        ans = '00:00'\n        if isOK:\n            mirror = int(T[0:2]) * M\n            mirror += int(T[2:4])\n            if mirror >= goal:\n                continue\n            elif int(T[0:2]) >= H or int(T[2:4]) >= M:\n                continue\n            else:\n                ans = clock[0:2] + ':' + clock[2:4]\n                break\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (h, m) = map(int, input().split())\n    s = input()\n    hrs = s[:2]\n    mi = s[3:]\n    while 1:\n        arr = []\n        if int(mi) == m:\n            mi = 0\n            if int(hrs) < h - 1:\n                hrs = int(hrs) + 1\n            else:\n                hrs = 0\n        if len(str(hrs)) == 1:\n            hrs = '0' + str(hrs)\n        if len(str(mi)) == 1:\n            mi = '0' + str(mi)\n        if '3' not in str(hrs) + str(mi) and '4' not in str(hrs) + str(mi) and ('6' not in str(hrs) + str(mi)) and ('7' not in str(hrs) + str(mi)) and ('9' not in str(hrs) + str(mi)):\n            moo = list(str(hrs) + str(mi))\n            for i in range(3, -1, -1):\n                if moo[i] == '2':\n                    arr.append('5')\n                elif moo[i] == '5':\n                    arr.append('2')\n                else:\n                    arr.append(moo[i])\n            if int(''.join(arr[:2])) < h and int(''.join(arr[2:])) < m:\n                break\n        mi = int(mi) + 1\n    print(''.join(moo[:2]) + ':' + ''.join(moo[2:]))", "l = ['0', '1', '2', '5', '8']\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    h = s[:2]\n    m = s[3:]\n    h = int(h)\n    m = int(m)\n    f = 0\n    ans = ''\n    while h < a:\n        s1 = str(h)\n        s2 = str(m)\n        if len(s1) == 1:\n            s1 = '0' + s1\n        if len(s2) == 1:\n            s2 = '0' + s2\n        t1 = s1\n        t2 = s2\n        if s1[0] == '5':\n            s1 = '2' + s1[1]\n        elif s1[0] == '2':\n            s1 = '5' + s1[1]\n        if s1[1] == '5':\n            s1 = s1[0] + '2'\n        elif s1[1] == '2':\n            s1 = s1[0] + '5'\n        if s2[0] == '5':\n            s2 = '2' + s2[1]\n        elif s2[0] == '2':\n            s2 = '5' + s2[1]\n        if s2[1] == '2':\n            s2 = s2[0] + '5'\n        elif s2[1] == '5':\n            s2 = s2[0] + '2'\n        if s1[0] in l and s1[1] in l and (s2[0] in l) and (s2[1] in l):\n            if int(s2[::-1]) < a and int(s1[::-1]) < b:\n                f = 1\n                ans = t1 + ':' + t2\n                break\n        m += 1\n        if m >= b:\n            m = 0\n            h += 1\n    if f == 0:\n        print('00:00')\n    else:\n        print(ans)", "def valid(h, m, t):\n    for i in t:\n        for k in i:\n            if d[int(j)] != None:\n                temp += str(d[int(j)])\n            else:\n                return False\n\ndef isvalid(h, m, t):\n    temp = ''\n    for i in t:\n        for j in i:\n            if dict[int(j)] != None:\n                temp += str(dict[int(j)])\n            else:\n                return False\n    if int(temp[2:][::-1]) < h and int(temp[:2][::-1]) < m:\n        return temp[:2] + ':' + temp[2:]\n    return False\ndict = {0: 0, 1: 1, 2: 5, 3: None, 4: None, 5: 2, 6: None, 7: None, 8: 8, 9: None}\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    t = input().split(':')\n    while True:\n        check = isvalid(h, m, t)\n        if check:\n            print(t[0] + ':' + t[1])\n            break\n        b = int(t[1]) + 1\n        if b == m:\n            d = int(t[0]) + 1\n            if d == h:\n                d = '00'\n            b = '00'\n        else:\n            d = t[0]\n        if int(b) <= 9:\n            b = '0' + str(int(b))\n        if int(d) <= 9:\n            d = '0' + str(int(d))\n        t = [str(d), str(b)]", "a = ['0', '1', '2', '5', '8']\n\ndef fun(sh, sm):\n    c = 0\n    sh = str(sh).rjust(2, '0')[::-1]\n    sm = str(sm).rjust(2, '0')[::-1]\n    for ele in set(sh + sm):\n        if ele not in a:\n            c += 1\n    if c > 0:\n        return False\n    else:\n        shn = ''\n        smn = ''\n        for (i, j) in zip(sh, sm):\n            if i == '5':\n                shn = shn + '2'\n            elif i == '2':\n                shn = shn + '5'\n            else:\n                shn = shn + str(i)\n            if j == '5':\n                smn = smn + '2'\n            elif j == '2':\n                smn = smn + '5'\n            else:\n                smn = smn + str(j)\n        if int(shn) < mmax and int(smn) < hmax:\n            return True\n        else:\n            return False\nfor test in range(int(input())):\n    (hmax, mmax) = map(int, input().split())\n    (sh, sm) = map(int, input().split(':'))\n    flag = 0\n    while sh % hmax != 0 or sm % mmax != 0:\n        if fun(sh, sm):\n            print(str(sh).rjust(2, '0') + ':' + str(sm).rjust(2, '0'))\n            flag = -1\n            break\n        sm += 1\n        if sm == mmax:\n            sm = 0\n            sh = sh + 1\n    if flag == 0:\n        print('00:00')", "import math\nref = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\ndef isValid(hr, minu, h, m):\n    invalid = {'3', '4', '6', '7', '9'}\n    for ch in hr:\n        if ch in invalid:\n            return False\n    for ch in minu:\n        if ch in invalid:\n            return False\n    (refH, refM) = ('', '')\n    for ch in hr:\n        refH = ref[ch] + refH\n    for ch in minu:\n        refM = ref[ch] + refM\n    if int(refM) >= h or int(hr) >= h or int(refH) >= m or (int(minu) >= m):\n        return False\n    if int(refM) * m + int(refH) > h * m + m:\n        return False\n    return True\nfor test in range(int(input())):\n    (h, m) = map(int, input().split())\n    (hrs, minu) = map(str, input().split(':'))\n    while not isValid(hrs, minu, h, m):\n        temp = int(minu) + 1\n        minu = str(temp)\n        if int(minu) >= m:\n            t1 = int(hrs) + 1\n            hrs = str(t1)\n            minu = '00'\n        if int(hrs) >= h:\n            hrs = '00'\n            minu = '00'\n        if len(hrs) == 1:\n            hrs = '0' + hrs\n        if len(minu) == 1:\n            minu = '0' + minu\n    print(hrs + ':' + minu)", "N = 100\na = (5, N, N, 2, N, N, 8, N, 0, 1) * 6\nR = lambda x=' ': map(int, input().split(x))\n(t,) = R()\nwhile t:\n    t -= 1\n    (h, m) = R()\n    (x, y) = R(':')\n    y += x * m\n    u = v = w = q = N\n    while h <= w + q * 10 or v * 10 + u >= m:\n        r = f'{y // m % h:02}:{y % m:02}'\n        y += 1\n        (u, v, _, w, q) = (a[ord(x)] for x in r)\n    print(r)", "numbers = [0, 1, 5, -1, -1, 2, -1, -1, 8, -1]\n\ndef remake(x):\n    x = str(x)\n    if len(x) == 1:\n        x = '0' + x\n    return x\n\ndef back(x):\n    x = remake(x)\n    a = ''\n    for i in range(1, -1, -1):\n        if numbers[int(x[i])] == -1:\n            return 300000000000000000000\n        else:\n            a = a + str(numbers[int(x[i])])\n    return int(a)\nt = int(input())\nfor i in range(t):\n    s = input()\n    (h, m) = (s.split()[0], s.split()[1])\n    s = input()\n    (H, M) = (s.split(':')[0], s.split(':')[1])\n    H = int(H)\n    M = int(M)\n    m = int(m)\n    h = int(h)\n    while 1:\n        if M == m:\n            M = 0\n            H = H + 1\n        if H == h:\n            H = 0\n        if back(M) < h and back(H) < m:\n            print(remake(H), remake(M), sep=':')\n            break\n        M = M + 1", "N = 100\na = [5, N, N, 2, N, N, 8, N, 0, 1] * 6\nR = lambda x=' ': map(int, input().split(x))\n(t,) = R()\nwhile t:\n    t -= 1\n    (h, m) = R()\n    (x, y) = R(':')\n    y += x * m\n    u = v = w = q = N\n    while h <= w + q * 10 or v * 10 + u >= m:\n        r = f'{y // m % h:02}:{y % m:02}'\n        y += 1\n        (u, v, _, w, q) = (a[ord(x)] for x in r)\n    print(r)", "N = 100\na = (0, 1, 5, N, N, 2, N, N, 8, N, N)\nR = lambda x=' ': map(int, input().split(x))\n(t,) = R()\nwhile t:\n    t -= 1\n    (h, m) = R()\n    (x, y) = R(':')\n    y += x * m\n    u = v = w = q = N\n    while h <= w + q * 10 or v * 10 + u >= m:\n        r = f'{y // m % h:02}:{y % m:02}'\n        y += 1\n        (u, v, _, w, q) = (a[ord(x) - 48] for x in r)\n    print(r)", "import sys\ninput = sys.stdin.readline\n\ndef calc(n):\n    d = ''\n    for i in str(n):\n        if i == '2':\n            d += '5'\n        elif i == '5':\n            d += '2'\n        else:\n            d += i\n    return d.rjust(2, '0')[::-1]\nfor _ in range(int(input())):\n    (h, m) = map(int, input().split())\n    s = input()[:-1]\n    a = int(s[:2])\n    b = int(s[3:])\n    while 1:\n        x = calc(a)\n        y = calc(b)\n        if all((1 if i in ['0', '1', '2', '5', '8'] else 0 for i in x)) and all((1 if i in ['0', '1', '2', '5', '8'] else 0 for i in y)) and (int(x) < m) and (int(y) < h):\n            break\n        b += 1\n        if b == m:\n            a += 1\n            b = 0\n            a %= h\n    print(str(a).rjust(2, '0') + ':' + str(b).rjust(2, '0'))", "N = 100\na = (5, N, N, 2, N, N, 8, N, 0, 1)\nR = lambda x=' ': map(int, input().split(x))\n(t,) = R()\nwhile t:\n    t -= 1\n    (h, m) = R()\n    (x, y) = R(':')\n    y += x * m\n    u = v = w = q = N\n    while h <= w + q * 10 or v * 10 + u >= m:\n        r = f'{y // m % h:02}:{y % m:02}'\n        y += 1\n        (u, v, _, w, q) = (a[ord(x) % 10] for x in r)\n    print(r)", "def is_correct(hourMax, minuteMax, time):\n    (h, m) = time.split(':')\n    mirrored = {'0': '0', '1': '1', '2': '5', '3': '', '4': '', '5': '2', '6': '', '7': '', '8': '8', '9': ''}\n    mirrored_h = mirrored[h[1]] + mirrored[h[0]]\n    mirrored_m = mirrored[m[1]] + mirrored[m[0]]\n    if len(mirrored_h) == 2 and int(mirrored_h) < minuteMax and (len(mirrored_m) == 2) and (int(mirrored_m) < hourMax):\n        return mirrored_m + ':' + mirrored_h\n    return False\nN = int(input())\nfor _ in range(N):\n    (hourMax, minuteMax) = map(int, input().split())\n    (hourNow, minuteNow) = map(int, input().split(':'))\n    result = '00:00'\n    flag = False\n    for hour in range(hourNow, hourMax):\n        start = minuteNow if hour == hourNow else 0\n        for minute in range(start, minuteMax):\n            time = '0' * (2 - len(str(hour))) + str(hour) + ':' + '0' * (2 - len(str(minute))) + str(minute)\n            mirrored = is_correct(hourMax, minuteMax, time)\n            if mirrored:\n                result = time\n                flag = True\n                break\n        if flag:\n            break\n    print(result)", "T = int(input())\nfor t in range(T):\n    (H, M) = map(int, input().split())\n    (h, m) = map(int, input().split(':'))\n\n    def increment(h, m):\n        m = (m + 1) % M\n        if m == 0:\n            h = (h + 1) % H\n        return (h, m)\n    rmap = {'0': '0', '1': '1', '2': '5', '5': '2', '8': '8'}\n\n    def check(h, m):\n\n        def flip(tstr):\n            t = ''\n            for digit in reversed(tstr):\n                if digit not in rmap:\n                    return None\n                t += rmap[digit]\n            return int(t)\n        (hs, ms) = ('{:02}'.format(h), '{:02}'.format(m))\n        (fm, fh) = (flip(hs), flip(ms))\n        return fh is not None and fm is not None and (fh < H) and (fm < M)\n    while True:\n        if check(h, m):\n            print('{:02}:{:02}'.format(h, m))\n            break\n        (h, m) = increment(h, m)", "reflected = {'0': '0', '1': '1', '2': '5', '3': '-', '4': '-', '5': '2', '6': '-', '7': '-', '8': '8', '9': '-', ':': ':'}\n\ndef getReflectedTime(originTime):\n    reflectedTime = ''.join(map(lambda digit: reflected[digit], originTime))[::-1]\n    if '-' in reflectedTime:\n        return None\n    return reflectedTime\n\ndef getNextMinute(hh, mm, h, m):\n    mm += 1\n    if mm == m:\n        mm = 0\n        hh += 1\n    if hh == h:\n        hh = 0\n    return (hh, mm)\n\ndef solve():\n    (h, m) = map(int, input().split())\n    currentTime = input()\n    (hh, mm) = map(int, currentTime.split(':'))\n    for _ in range(h * m):\n        displayedTime = '{:0>2d}:{:0>2d}'.format(hh, mm)\n        reflectedTime = getReflectedTime(displayedTime)\n        if reflectedTime is not None:\n            (rhh, rmm) = map(int, reflectedTime.split(':'))\n            if rhh < h and rmm < m:\n                print(displayedTime)\n                break\n        (hh, mm) = getNextMinute(hh, mm, h, m)\nt = int(input())\nfor _ in range(t):\n    solve()", "for i in range(int(input())):\n    (h, m) = map(int, input().split())\n    time = str(input())\n    (hour, minute) = (int(time[0:2]), int(time[3:]))\n    stting = False\n    per = [0, 1, 2, 5, 8]\n    dic = {'0': 0, '1': 1, '2': 5, '5': 2, '8': 8}\n    while stting == False:\n        if int(time[0:2]) % 10 in per and int(int(time[0:2]) / 10) % 10 in per and (int(time[3:]) % 10 in per) and (int(int(time[3:]) / 10) % 10 in per) and (dic[str(int(time[3:]) % 10)] * 10 + dic[str(int(int(time[3:]) / 10) % 10)] < h) and (dic[str(int(time[0:2]) % 10)] * 10 + dic[str(int(int(time[0:2]) / 10) % 10)] < m):\n            print(time)\n            stting = True\n        elif int(time[3:]) < m - 1 and int(time[3:]) > 8:\n            time = time[0:2] + ':' + str(int(time[3:]) + 1)\n        elif int(time[3:]) < m - 1 and int(time[3:]) < 9:\n            time = time[0:2] + ':0' + str(int(time[3:]) + 1)\n        elif int(time[3:]) == m - 1 and int(time[0:2]) < h - 1 and (int(time[0:2]) > 8):\n            time = str(int(time[0:2]) + 1) + ':00'\n        elif int(time[3:]) == m - 1 and int(time[0:2]) < h - 1 and (int(time[0:2]) < 9):\n            time = '0' + str(int(time[0:2]) + 1) + ':00'\n        else:\n            time = '00:00'", "N = 100\na = (0, 1, 5, N, N, 2, N, N, 8, N)\n\ndef g(s):\n    (u, v, x, y) = (a[int(x)] for x in s if ':' > x)\n    return h > x + y * 10 and v * 10 + u < m\nR = lambda x=' ': map(int, input().split(x))\n(t,) = R()\nwhile t:\n    t -= 1\n    (h, m) = R()\n    (x, y) = R(':')\n    y += x * m\n    print(next(filter(g, (f'{i // m % h:02}:{i % m:02}' for i in range(y, y + h * m)))))", "def is_correct(hourMax, minuteMax, time):\n    (h, m) = time.split(':')\n    mirrored = {'0': '0', '1': '1', '2': '5', '3': '', '4': '', '5': '2', '6': '', '7': '', '8': '8', '9': ''}\n    mirrored_h = mirrored[h[1]] + mirrored[h[0]]\n    mirrored_m = mirrored[m[1]] + mirrored[m[0]]\n    if len(mirrored_h) == 2 and int(mirrored_h) < minuteMax and (len(mirrored_m) == 2) and (int(mirrored_m) < hourMax):\n        return mirrored_m + ':' + mirrored_h\n    return False\nN = int(input())\nfor _ in range(N):\n    (hourMax, minuteMax) = map(int, input().split())\n    (hourNow, minuteNow) = map(int, input().split(':'))\n    result = '00:00'\n    flag = False\n    for hour in range(hourNow, hourMax):\n        start = minuteNow if hour == hourNow else 0\n        for minute in range(start, minuteMax):\n            time = '0' * (2 - len(str(hour))) + str(hour) + ':' + '0' * (2 - len(str(minute))) + str(minute)\n            mirrored = is_correct(hourMax, minuteMax, time)\n            if mirrored:\n                result = time\n                flag = True\n                break\n        if flag:\n            break\n    print(result)", "d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\na = {*d}\nR = lambda x: map(int, input().split(x))\n(t,) = R(' ')\nwhile t:\n    t -= 1\n    (h, m) = R(' ')\n    (x, y) = R(':')\n    for i in range(h * m):\n        r = x * m + y + i\n        p = f'{r // m % h:02}'\n        s = f'{r % m:02}'\n        b = (u, v, w, q) = (*map(int, p + s),)\n        if {*b} < a and h > d[q] * 10 + d[w] and (d[v] * 10 + d[u] < m):\n            break\n    print(p, s, sep=':')", "d = {0: 0, 1: 1, 2: 5, 5: 2, 8: 8}\na = {*d}\nR = lambda x: map(int, input().split(x))\n(t,) = R(' ')\nwhile t:\n    t -= 1\n    (h, m) = R(' ')\n    (x, y) = R(':')\n    for i in range(h * m):\n        r = x * m + y + i\n        p = f'{r // m % h:02}'\n        s = f'{r % m:02}'\n        b = (u, v, w, q) = (*map(int, p + s),)\n        if {*b} < a and h > d[q] * 10 + d[w] and (d[v] * 10 + d[u] < m):\n            break\n    print(p + ':' + s)"]