["def solve():\n    n = int(input())\n    w = {}\n    a = [int(i) for i in input().split()]\n    for i in range(n):\n        if a[i] in w:\n            w[a[i]] += 1\n        else:\n            w[a[i]] = 1\n    q = set()\n    for i in w:\n        if w[i] == 1:\n            q.add(i)\n    q = sorted(list(q))\n    if len(q) >= 1:\n        return a.index(q[0]) + 1\n    return -1\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for (n, arr) in [[int(input()), [int(x) for x in input().split()]] for _ in ' ' * int(input())]:\n    z = [0] * (n + 1)\n    for elem in arr:\n        z[elem] += 1\n    print(arr.index(z.index(1)) + 1) if 1 in z else print(-1)", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 10 ** 16\nmd = 10 ** 9 + 7\nfrom collections import Counter\n\ndef solve(l):\n    m = Counter(l)\n    for i in sorted(m.keys()):\n        if m[i] == 1:\n            print(l.index(i) + 1)\n            return\n    print(-1)\nfor _ in range(II()):\n    n = II()\n    l = LI()\n    solve(l)", "import math, sys, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in [wtf[i:i + 2] for i in range(1, len(wtf), 2)]:\n    n = int(t[0])\n    A = list(map(int, t[1].split()))\n    ans = dict()\n    for (j, v) in enumerate(A):\n        ans[v] = 1 if v not in ans else ans[v] + 1\n    k = min([j for (j, v) in ans.items() if v == 1], default=-1)\n    print(A.index(k) + 1 if k >= 0 and k <= n else -1)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    a = [None] * (n + 1)\n    i = 1\n    for v in mints():\n        if a[v] is None:\n            a[v] = i\n        else:\n            a[v] = -1\n        i += 1\n    for i in a:\n        if i is not None and i != -1:\n            print(i)\n            return\n    print(-1)\nfor i in range(mint()):\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = [0] * (n + 1)\n    for i in a:\n        arr[i] += 1\n    for i in range(n + 1):\n        if arr[i] == 1:\n            print(a.index(i) + 1)\n            break\n    if arr.count(1) == 0:\n        print(-1)", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    counts = [0] * (n + 1)\n    for bid in arr:\n        counts[bid] += 1\n    ans = -1\n    curr_min = n + 1\n    for (i, bid) in enumerate(arr):\n        if counts[bid] == 1:\n            if bid < curr_min:\n                curr_min = bid\n                ans = i + 1\n    res += str(ans) + '\\n'\nprint(res)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "n = int(input())\nnum = list()\narray = list()\nfor j in range(n):\n    num.append(int(input()))\n    array.append(list(map(int, input().split())))\nfor j in range(n):\n    ans = list()\n    new = array[j]\n    c = [0] * len(new)\n    for x in new:\n        c[x - 1] += 1\n    if 1 in c:\n        print(new.index(c.index(1) + 1) + 1)\n    else:\n        print(-1)", "from collections import Counter, deque\nfor s in [*open(0)][2::2]:\n    s = list(map(int, s.split()))\n    x = min(s)\n    arr = Counter(s)\n    lst = deque()\n    for (key, value) in arr.items():\n        if value == 1:\n            lst.append(key)\n    lst = sorted(lst)\n    if lst:\n        x = lst[0]\n        print(s.index(x) + 1)\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "import sys\ninput = sys.stdin.readline\ninputLines = sys.stdin.readlines\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef readStrList():\n    return list(map(lambda x: x.strip(), inputLines()))\n\ndef indexOf(l: list, elem: int):\n    return l.index(elem) if elem in l else -1\n\ndef lastIndexOf(l: list, elem: int):\n    indexes = [idx for (idx, val) in enumerate(l) if val == elem]\n    return max(indexes) if len(indexes) > 0 else -1\n\ndef solution():\n    for _ in range(int(input())):\n        n = int(input())\n        l = readIntList()\n        freq = {}\n        winner = -1\n        for i in range(n):\n            freq[l[i]] = freq[l[i]] + 1 if l[i] in freq else 1\n        for i in range(n):\n            if freq[l[i]] == 1 and (winner < 0 or l[i] < l[winner]):\n                winner = i\n        print(winner + 1 if winner >= 0 else winner)\nsolution()", "import sys\ninput = sys.stdin.readline\n\ndef find_unique_bid(bids):\n    sorted_bids = bids.copy()\n    sorted_bids.sort()\n    i = 0\n    sorted_bids += [-1, -2]\n    while True:\n        if sorted_bids[i] != sorted_bids[i + 1]:\n            return sorted_bids[i]\n        j = i + 1\n        while sorted_bids[j] == sorted_bids[j + 1]:\n            j += 1\n        i = j + 1\n    return -1\nt = int(input())\nfor item in range(t):\n    n = int(input())\n    bids = [int(bid) for bid in input().split()]\n    unique_bid = find_unique_bid(bids)\n    if unique_bid == -1:\n        print(-1)\n    else:\n        print(bids.index(unique_bid) + 1)", "t = int(input())\nanswers = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    if n == 1:\n        min = 1\n    elif b[0] != b[1]:\n        min = a.index(b[0]) + 1\n    else:\n        min = -1\n        if n > 2:\n            for i in range(2, n - 1):\n                if b[i - 1] != b[i] != b[i + 1]:\n                    min = a.index(b[i]) + 1\n                    break\n            else:\n                if b[n - 1] != b[n - 2]:\n                    min = a.index(b[n - 1]) + 1\n    answers.append(min)\nfor answer in answers:\n    print(answer)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "from collections import Counter, deque\nfor s in [*open(0)][2::2]:\n    s = list(map(int, s.split()))\n    x = min(s)\n    arr = Counter(s)\n    lst = deque()\n    for (key, value) in arr.items():\n        if value == 1:\n            lst.append(key)\n    lst = sorted(lst)\n    if lst:\n        x = lst[0]\n        print(s.index(x) + 1)\n    else:\n        print(-1)", "from sys import stdin\n\ndef get_winner(lista, contador):\n    for p in lista:\n        if contador[p] == 1:\n            return p\n    return -1\nt = int(stdin.readline())\nfor _ in range(t):\n    _ = stdin.readline()\n    lista = list(map(int, stdin.readline().split()))\n    contador = {}\n    i = 0\n    for el in lista:\n        if el not in contador:\n            contador[el] = 0\n        contador[el] += 1\n    participantes = sorted(contador.keys())\n    winner = get_winner(participantes, contador)\n    if winner > -1:\n        winner = lista.index(winner) + 1\n    print(winner)", "def read_data():\n    t = int(input())\n    data = []\n    for _ in range(t):\n        n = int(input().strip())\n        d = input().split()\n        d = list(map(int, d))\n        data.append(d)\n    return data\n\ndef answer(data):\n    for row in data:\n        dictionary = {}\n        for answer in row:\n            if answer in dictionary:\n                dictionary[answer] += 1\n            else:\n                dictionary[answer] = 1\n        min_number = 10000000\n        for key in dictionary:\n            if dictionary[key] == 1:\n                if key < min_number:\n                    min_number = key\n        if min_number != 10000000:\n            print(row.index(min_number) + 1)\n        else:\n            print(-1)\n\ndef main():\n    data = read_data()\n    answer(data)\nmain()", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "def bid(arr):\n    if len(arr) == 0:\n        return\n    dic = {}\n    for i in range(0, len(arr)):\n        if arr[i] not in dic:\n            dic[arr[i]] = [1, i + 1]\n        elif arr[i] in dic:\n            dic[arr[i]][0] = dic[arr[i]][0] + 1\n    var = -1\n    for i in dic:\n        if var == -1 and dic[i][0] < 2:\n            var = i\n        elif var != -1 and var > i and (dic[i][0] < 2):\n            var = i\n    if var == -1:\n        return var\n    else:\n        return dic[var][1]\ntest = int(input())\narr1 = []\nfor i in range(0, test):\n    k = int(input())\n    arr2 = [int(x) for x in input().split()]\n    arr1.append(arr2)\nfor i in range(0, test):\n    print(bid(arr1[i]))", "import sys\nt = int(input())\nfor num in range(t):\n    n = int(sys.stdin.readline())\n    numbers = list(map(int, sys.stdin.readline().split()))\n    dic = {}\n    for number in numbers:\n        if number not in dic:\n            dic[number] = 1\n        else:\n            dic[number] += 1\n    if 1 not in dic.values():\n        print(-1)\n    else:\n        keys = list(dic.keys())\n        keys.sort()\n        for key in keys:\n            if dic[key] == 1:\n                print(numbers.index(key) + 1)\n                break", "ans = []\n\ndef solve(arr):\n    bids = {}\n    first = arr[0]\n    for i in arr:\n        if i not in bids:\n            bids[i] = 1\n        else:\n            bids[i] += 1\n    res = []\n    for j in bids:\n        if bids[j] == 1:\n            res.append(j)\n    if not res:\n        return -1\n    value = min(res)\n    return arr.index(value) + 1\nk = int(input())\narr = []\nfor i in range(k):\n    n = input()\n    arr.append([int(x) for x in input().split()])\nfor i in range(len(arr)):\n    print(solve(arr[i]))", "t = int(input())\nLST = []\nfor case in range(t):\n    n = int(input())\n    wanted = 10000000000.0\n    strlst = input().split()\n    numlst = [int(d) for d in strlst]\n    numdic = {}\n    for num in numlst:\n        if numdic.get(num) is None:\n            numdic[num] = 1\n        else:\n            numdic[num] += 1\n    for key in numdic.keys():\n        if numdic[key] == 1 and key < wanted:\n            wanted = key\n    if wanted == 10000000000.0:\n        LST.append(-1)\n    else:\n        LST.append(numlst.index(wanted) + 1)\nfor i in LST:\n    print(i)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        dic = dict()\n        for i in range(n):\n            if arr[i] not in dic:\n                dic[arr[i]] = [1, i]\n            else:\n                dic[arr[i]][0] += 1\n        minn = maxsize\n        ind = -1\n        for (i, j) in dic.items():\n            if j[0] == 1:\n                if i < minn:\n                    minn = i\n                    ind = j[1] + 1\n        get_print_int(ind)\nsolve()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    check = 0\n    for i in sorted(freq):\n        if freq[i] == 1:\n            ans = i\n            check = 1\n            break\n    if check == 0:\n        print(-1)\n    else:\n        for i in range(len(arr)):\n            if arr[i] == ans:\n                print(i + 1)\n                break", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in map(int, s.split()):\n        i += 1\n        d[x] = (i, -1)[x in d]\n    a = [(x, d[x]) for x in d if d[x] > 0]\n    print(min(a or [(0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in s.split():\n        i += 1\n        d[x] = i - i * (x in d)\n    print(min([(int(x), d[x]) for x in d if d[x]] + [(300000.0, -1)])[1])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    answer = [0] * (n + 1)\n    for i in a:\n        answer[i] += 1\n    if answer.count(1) == 0:\n        print(-1)\n    else:\n        print(a.index(answer.index(1)) + 1)", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [*map(int, input().split())]\n    cnt = [float('inf')] * (n + 1)\n    if n > 1 and len(set(arr)) == 1:\n        ans.append(-1)\n        continue\n    for i in range(n):\n        if cnt[arr[i]] == float('inf'):\n            cnt[arr[i]] = 1\n        else:\n            cnt[arr[i]] += 1\n    key = min(cnt)\n    if key > 1:\n        ans.append(-1)\n        continue\n    ans.append(arr.index(cnt.index(key)) + 1)\nprint('\\n'.join(map(str, ans)))", "loopcount = int(input())\ndic = {}\nfor loop in range(loopcount):\n    a = int(input())\n    b = input()\n    x = b.split(' ')\n    x = list(map(int, x))\n    y = x.copy()\n    y.sort()\n    if b in dic.keys():\n        print(dic[b])\n    else:\n        answer = -1\n        i = 0\n        while i < a:\n            if i + 1 < a and y[i] == y[i + 1]:\n                duplicate = y[i]\n                j = i + 1\n                while j < a:\n                    if y[j] == duplicate:\n                        j += 1\n                        i = j\n                    else:\n                        i = j\n                        break\n            else:\n                answer = x.index(y[i]) + 1\n                break\n        dic[b] = answer\n        print(answer)", "lines = int(input())\nanswer = [0] * lines\nfor line in range(lines):\n    participates = int(input())\n    num = [0] * (participates + 1)\n    per = [0] * (participates + 1)\n    find = False\n    k = input()\n    temp = list(map(int, k.split(' ')))\n    for (idx, value) in enumerate(temp):\n        num[value] += 1\n        per[idx + 1] = value\n    for i in range(participates + 1):\n        if num[i] == 1:\n            for (j, v) in enumerate(per):\n                if v == i:\n                    answer[line] = j\n                    find = True\n                    break\n        if find:\n            break\n    if not find:\n        answer[line] = -1\nfor a in answer:\n    print(int(a))", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in map(int, s.split()):\n        i += 1\n        d[x] = (i, -1)[x in d]\n    print(min([(x, d[x]) for x in d if d[x] > 0] + [(300000.0, -1)])[1])", "import bisect\nimport collections as col\nimport functools as ft\nimport heapq\nimport itertools as it\nimport math\nimport os\nimport sys\nsys.setrecursionlimit(10 ** 9)\nreadline = sys.stdin.readline\n\ndef I():\n    return int(readline().strip())\n\ndef S():\n    return [x for x in readline().strip()]\n\ndef IL():\n    return list(map(int, readline().split()))\n\ndef SL():\n    return list(map(str, readline().split()))\n\ndef ILs(n):\n    return list((int(readline()) for _ in range(n)))\n\ndef SLs(n):\n    return list((readline().strip() for _ in range(n)))\n\ndef ILL(n):\n    return [list(map(int, readline().split())) for _ in range(n)]\n\ndef SLL(n):\n    return [list(map(str, readline().split())) for _ in range(n)]\nMOD = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(I()):\n        n = I()\n        a = IL()\n        ans = []\n        counts = col.Counter(a)\n        unique = [k for (k, v) in counts.items() if v == 1]\n        if unique:\n            idx = a.index(min(unique)) + 1\n            print(idx)\n        else:\n            print(-1)\nmain()", "t = input()\nt = int(t)\nans = []\nfor i in range(t):\n    n = input()\n    n = int(n)\n    a = input().split()\n    a = list(map(int, a))\n    b = list(a)\n    b.sort()\n    x = b[0]\n    j = 1\n    while j < n:\n        if x > 0:\n            if x == b[j]:\n                x = -x\n                j += 1\n            elif x < b[j]:\n                j = n\n        elif -x < b[j]:\n            x = b[j]\n            j += 1\n        elif -x == b[j]:\n            j += 1\n    if x < 0:\n        ans.append(-1)\n    else:\n        ans.append(a.index(x) + 1)\nfor i in ans:\n    print(i)", "x = input()\nx = int(x)\nnum = 0\nall_data = []\nfor i in range(x):\n    num = input()\n    num = int(num)\n    _t = input()\n    a = [int(i) for i in _t.split()]\n    all_data.append(a)\nfor s in all_data:\n    x = sorted(s)\n    m = x[0]\n    index = 0\n    dup = False\n    for i in range(1, len(x)):\n        if m == x[i]:\n            dup = True\n        if m != x[i] and dup:\n            index = i\n            m = x[i]\n            dup = False\n    if dup:\n        print(-1)\n    else:\n        print(s.index(m) + 1)", "import sys\ninfile = sys.stdin\nnext(infile)\nfor l in infile:\n    n = int(l)\n    a = list(map(int, infile.readline().split()))\n    b = a[:]\n    a.sort()\n    i = 1\n    c = 0\n    if n == 1:\n        print(1)\n    elif n == 2:\n        if a[0] != a[1]:\n            print(1)\n        else:\n            print(-1)\n    else:\n        if a[0] != a[1]:\n            k = a[0]\n        else:\n            while i < n - 1:\n                if a[i] != a[i - 1] and a[i] != a[i + 1]:\n                    c = 1\n                    k = a[i]\n                    break\n                else:\n                    i += 1\n            if c == 0:\n                if a[n - 2] != a[n - 1]:\n                    k = a[n - 1]\n                else:\n                    k = -1\n        if k != -1:\n            for i in range(n):\n                if b[i] == k:\n                    print(i + 1)\n        else:\n            print(k)", "n = int(input())\narray = []\nfor line in range(n):\n    input()\n    x = [*map(int, input().split())]\n    m = {}\n    for i in x:\n        m[i] = m.get(i, 0) + 1\n    m = sorted([[i, j + 1] for (j, i) in enumerate(x) if m[i] == 1])[:1] + [[-1, -1]]\n    array += [m[0][1]]\nfor i in array:\n    print(i)", "cases = int(input())\nresult = []\nfor i in range(cases):\n    a = int(input())\n    bids = list(map(int, input().split()))\n    val = sorted(bids)\n    done = 0\n    if len(bids) == 1:\n        result.append(0)\n        done = 1\n        continue\n    if val[0] != val[1]:\n        result.append(bids.index(val[0]))\n        done = 1\n    else:\n        for j in range(1, a):\n            if j == a - 1:\n                if val[j] != val[j - 1]:\n                    result.append(bids.index(val[a - 1]))\n                    done = 1\n                    break\n            elif val[j - 1] != val[j] and val[j] != val[j + 1]:\n                result.append(bids.index(val[j]))\n                done = 1\n                break\n    if done == 0:\n        result.append(-2)\nfor i in result:\n    print(i + 1)", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split(' '))\nt = read_int()\nans = []\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    cnt = [[] for _ in range(n + 1)]\n    for (i, ai) in enumerate(a):\n        cnt[ai].append(i + 1)\n    found = False\n    for i in range(1, n + 1):\n        if len(cnt[i]) == 1:\n            found = True\n            ans.append(str(cnt[i][0]))\n            break\n    if not found:\n        ans.append('-1')\nprint('\\n'.join(ans))", "t = int(input())\nb = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = max(a) + 1\n    c = [0] * d\n    for i1 in a:\n        c[i1] += 1\n    del c[0]\n    b1 = []\n    for i1 in range(len(c)):\n        if c[i1] == 1:\n            b1 += [i1 + 1]\n    if b1 == []:\n        b.append(-1)\n    else:\n        b11 = min(b1)\n        b.append(a.index(b11) + 1)\nfor i in b:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for elem in l:\n        b[elem] += 1\n    print(l.index(b.index(1)) + 1) if 1 in b else print(-1)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    counter = [0] * n\n    for j in l:\n        counter[j - 1] += 1\n    if 1 in counter:\n        print(l.index(counter.index(1) + 1) + 1)\n    else:\n        print(-1)", "for x in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = [0] * n\n    for i in l:\n        s[i - 1] += 1\n    if 1 in s:\n        print(l.index(s.index(1) + 1) + 1)\n    else:\n        print(-1)", "for i in range(int(input())):\n    n = int(input())\n    data = list(map(int, input().split()))\n    process = data.copy()\n    process.sort()\n    if n == 1:\n        print(data.index(process[0]) + 1)\n        continue\n    elif process[0] != process[1]:\n        print(data.index(process[0]) + 1)\n        continue\n    elif n == 2 and process[0] == process[1]:\n        print('-1')\n    else:\n        flag = True\n        for j in range(n)[1:-1]:\n            if process[j - 1] != process[j] and process[j] != process[j + 1]:\n                print(data.index(process[j]) + 1)\n                flag = False\n                break\n        if flag and process[n - 1] != process[n - 2]:\n            print(data.index(process[n - 1]) + 1)\n        elif flag:\n            print('-1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    data = list(map(int, input().split()))\n    base = [0] * n\n    for x in data:\n        base[x - 1] = base[x - 1] + 1\n    if 1 in base:\n        print(data.index(base.index(1) + 1) + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    num = [0] * (n + 1)\n    for i in a:\n        num[i] += 1\n    if num.count(1) == 0:\n        print(-1)\n    else:\n        print(a.index(num.index(1)) + 1)", "for i in range(int(input())):\n    n = int(input())\n    drr = [0] * (n + 1)\n    arr = list(map(int, input().split()))\n    for i in arr:\n        drr[i] += 1\n    for i in range(1, n + 1):\n        if drr[i] == 1:\n            print(arr.index(i) + 1)\n            break\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    q = list(map(int, input().split()))\n    nq = [0] * (n + 1)\n    for i in q:\n        nq[i] += 1\n    for c in range(1, n + 1):\n        if nq[c] == 1:\n            print(q.index(c) + 1)\n            break\n    else:\n        print(-1)", "def solve():\n    n = int(input())\n    try:\n        arr = list(map(int, input().split()))\n        temp = dict()\n        for i in arr:\n            if i not in temp:\n                temp[i] = 1\n            else:\n                temp[i] += 1\n        unique = []\n        for i in temp:\n            if temp[i] == 1:\n                unique.append(i)\n        if len(unique) == 0:\n            print(-1)\n        else:\n            print(arr.index(min(unique)) + 1)\n    except EOFError as e:\n        print(e)\nfor case in range(int(input())):\n    solve()", "x = int(input())\nfor i in range(x):\n    y = int(input())\n    l = list(map(int, input().split()))\n    m = sorted(l)\n    s = 0\n    if y == 1:\n        print('1')\n    elif m[0] != m[1]:\n        print(l.index(m[0]) + 1)\n    else:\n        for j in range(1, y - 1):\n            if m[j] != m[j - 1] and m[j] != m[j + 1]:\n                print(l.index(m[j]) + 1)\n                s += 1\n                break\n        if s == 0 and m[-1] != m[-2]:\n            print(l.index(m[-1]) + 1)\n        elif s == 0:\n            print('-1')", "def solve(n, nums):\n    hash = {}\n    for num in nums:\n        if num not in hash:\n            hash[num] = 0\n        hash[num] += 1\n    ans = -1\n    for i in range(n):\n        if hash[nums[i]] == 1:\n            if ans == -1:\n                ans = i\n            elif nums[i] < nums[ans]:\n                ans = i\n    return ans + 1 if ans != -1 else ans\nt = int(input())\nwhile t:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    print(solve(n, nums))\n    t -= 1", "for i in range(int(input())):\n    lenn = int(input())\n    list1 = list(map(int, input().split()))\n    s = sorted(list1)\n    if lenn == 1:\n        print(1)\n    elif s[0] != s[1]:\n        print(list1.index(s[0]) + 1)\n    elif lenn == 2:\n        print(-1)\n    else:\n        output = 'ok'\n        for i in range(1, lenn - 1):\n            if s[i - 1] != s[i] != s[i + 1]:\n                output = list1.index(s[i]) + 1\n                break\n        if output == 'ok':\n            if s[-1] != s[-2]:\n                print(list1.index(s[-1]) + 1)\n            else:\n                print(-1)\n        else:\n            print(output)", "tc = int(input())\nfor j in range(tc):\n    x = int(input())\n    y = list(map(int, input().split()))\n    z = y.copy()\n    z.sort()\n    if x == 1:\n        print(1)\n        continue\n    if z[0] != z[1]:\n        print(y.index(z[0]) + 1)\n        continue\n    a = 0\n    for i in range(1, x - 1):\n        if z[i - 1] != z[i] != z[i + 1]:\n            print(y.index(z[i]) + 1)\n            a = 1\n            break\n    if a == 1:\n        continue\n    if z[x - 1] != z[x - 2]:\n        print(y.index(z[x - 1]) + 1)\n        continue\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, s) = (int(input()), -1)\n    a = list(map(int, input().split(' ')))\n    b = sorted(a)\n    if n == 1 or b[0] != b[1]:\n        s = a.index(b[0]) + 1\n    if s == -1:\n        for i in range(1, len(b) - 1):\n            if b[i - 1] != b[i] and b[i] != b[i + 1]:\n                s = a.index(b[i]) + 1\n                break\n    if s == -1 and b[-1] != b[-2]:\n        s = a.index(b[-1]) + 1\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    num = [0 for i in range(n + 3)]\n    a = [int(val) for val in input().split()]\n    for val in a:\n        num[val] += 1\n    ok = False\n    for i in range(n + 1):\n        if num[i] == 1:\n            print(a.index(i) + 1)\n            ok = True\n            break\n    if not ok:\n        print('-1')", "for _ in range(0, int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    br = sorted(ar)\n    dic = {}\n    for i in br:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] == 1:\n            print(ar.index(i) + 1)\n            break\n    else:\n        print(-1)", "def solve():\n    n = int(input())\n    chosen_numbers = list(map(int, input().split()))\n    d = dict()\n    for (index, c) in enumerate(chosen_numbers):\n        if c in d:\n            d[c].append(1 + index)\n        else:\n            d[c] = [1 + index]\n    keys = list(d.keys())\n    keys.sort()\n    for k in keys:\n        if len(d[k]) == 1:\n            return d[k][0]\n    return -1\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0 for i in range(n)]\n    for i in a:\n        ans[i - 1] += 1\n    if 1 in ans:\n        print(a.index(ans.index(1) + 1) + 1)\n    else:\n        print(-1)", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l.copy()\n    l.sort()\n    d = {}\n    for j in l:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    for j in d:\n        if d[j] == 1:\n            print(g.index(j) + 1)\n            break\n    else:\n        print(-1)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = sorted(enumerate(list(map(int, stdin.readline().split()))), key=lambda x: x[1])\n    res = -1\n    if n == 1:\n        res = a[0][0] + 1\n    else:\n        for i in range(1, n - 1):\n            if a[i][1] != a[i + 1][1] and a[i][1] != a[i - 1][1]:\n                res = a[i][0] + 1\n                break\n        if a[0][1] != a[1][1]:\n            res = a[0][0] + 1\n        if res == -1 and a[-2][1] != a[-1][1]:\n            res = a[-1][0] + 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    m = b[0]\n    flag = True\n    for i in range(1, n):\n        if m == b[i]:\n            flag = False\n        elif not flag:\n            m = b[i]\n            flag = True\n    if not flag:\n        print(-1)\n    else:\n        print(a.index(m) + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    m = b[0]\n    flag = True\n    for i in range(1, n):\n        if flag:\n            if m == b[i]:\n                flag = False\n        elif m != b[i]:\n            m = b[i]\n            flag = True\n    if flag:\n        print(a.index(m) + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0] * n\n    for i in a:\n        c[i - 1] = c[i - 1] + 1\n    print(a.index(c.index(1) + 1) + 1) if 1 in c else print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = [0] * n\n    for i in l:\n        s[i - 1] += 1\n    if 1 in s:\n        print(l.index(s.index(1) + 1) + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [0] * n\n    a = [int(i) for i in input().split()]\n    for i in a:\n        lst[i - 1] += 1\n    print(a.index(lst.index(1) + 1) + 1) if 1 in lst else print(-1)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    counts = [0] * n\n    for ai in a:\n        counts[ai - 1] += 1\n    found = False\n    for i in range(n):\n        if counts[i] == 1:\n            print(a.index(i + 1) + 1)\n            found = True\n            break\n    if found == False:\n        print(-1)", "def func():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in a:\n        b[i - 1] += 1\n    if 1 in b:\n        print(a.index(b.index(1) + 1) + 1)\n    else:\n        print(-1)\n\ndef main():\n    for i in range(int(input())):\n        func()\n        print()\nmain()", "t = int(input())\nlan = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = []\n    indx = [0]\n    flag = False\n    counter = 0\n    for i in range(max(arr) + 1):\n        cnt.append(0)\n        indx.append(0)\n    for i in arr:\n        cnt[i] += 1\n        indx[i] = counter\n        counter += 1\n    for i in range(max(arr) + 1):\n        if cnt[i] == 1:\n            lan.append(indx[i] + 1)\n            flag = True\n            break\n        else:\n            continue\n    if flag == False:\n        lan.append(-1)\nprint(*lan, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = {}\n    for x in a:\n        c[x] = c.get(x, 0) + 1\n    b = [x for x in c if c[x] == 1]\n    if b:\n        x = min(b)\n        print(a.index(x) + 1)\n    else:\n        print(-1)", "def f(n):\n    l = list(map(int, input().split()))\n    d = {}\n    for i in sorted(l):\n        d[i] = d.get(i, 0) + 1\n    for (i, j) in sorted(d.items()):\n        if j == 1:\n            return l.index(i) + 1\n    return -1\nfor _ in range(int(input())):\n    print(f(int(input())))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    n += 5\n    ark = [0] * n\n    s = -1\n    for j in arr:\n        ark[j] += 1\n    for i in range(1, n):\n        if ark[i] == 1:\n            s = arr.index(i) + 1\n            break\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = set()\n    b = set()\n    for j in l:\n        if j not in a:\n            a.add(j)\n            b.add(j)\n        elif j in b:\n            b.remove(j)\n    if len(b) == 0:\n        print(-1)\n    else:\n        print(l.index(min(b)) + 1)", "for i in range(int(input())):\n    a = int(input())\n    arr = [int(i) for i in input().split()]\n    re = [0 for i in range(a)]\n    for i in arr:\n        re[i - 1] = re[i - 1] + 1\n    if 1 in re:\n        print(arr.index(re.index(1) + 1) + 1)\n    else:\n        print(-1)", "from sys import stdin, exit, setrecursionlimit\nsetrecursionlimit(100000000)\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nfor _ in range(int(input())):\n    n = int(input())\n    a = lmi()\n    bad = set()\n    s = set()\n    for i in a:\n        if i in s:\n            bad.add(i)\n        s.add(i)\n    ans = float('inf')\n    fin = 0\n    for (idx, i) in enumerate(a):\n        if i not in bad:\n            if ans > i:\n                fin = idx + 1\n            ans = min(ans, i)\n    print(fin if ans != float('inf') else -1)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = get_array()\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    flag = 0\n    for i in dic.keys():\n        if dic[i] == 1:\n            flag = 1\n            break\n    if flag == 0:\n        print(-1)\n    else:\n        p = []\n        for i in dic.keys():\n            if dic[i] == 1:\n                p.append(i)\n        p.sort()\n        k = p[0]\n        for i in range(0, n):\n            if k == arr[i]:\n                print(i + 1)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    for x in map(int, s.split()):\n        i += 1\n        v = d.get(x, 0)\n        d[x] = (i, -1)[d.get(x, 0) != 0]\n    a = [(x, d[x]) for x in d if d[x] > 0]\n    print(a and min(a)[1] or -1)", "t = int(input())\nb = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = max(a) + 1\n    c = [0] * d\n    for i1 in a:\n        c[i1] += 1\n    del c[0]\n    b1 = []\n    for i1 in range(len(c)):\n        if c[i1] == 1:\n            b1 += [i1 + 1]\n    if b1 == []:\n        b.append(-1)\n    else:\n        b11 = min(b1)\n        b.append(a.index(b11) + 1)\nfor i in b:\n    print(i)", "def FindDuplicates(arr):\n    HashMap = {}\n    Duplicates = set()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] not in HashMap.keys():\n            HashMap[arr[i]] = 1\n        else:\n            Duplicates.add(arr[i])\n    return Duplicates\nt = int(input())\nN = []\nA = []\nfor _ in range(t):\n    N.append(int(input()))\n    A.append(list(map(int, input().rstrip().split())))\nSol = []\nfor i in range(t):\n    n = N[i]\n    a = A[i]\n    S = FindDuplicates(a)\n    if len(S) == 0:\n        Sol.append(a.index(min(a)) + 1)\n    else:\n        minSet = min(S)\n        minArr = min(a)\n        if minArr == minSet:\n            aa = set(a)\n            diff = aa - S\n            if len(diff) == 0:\n                Sol.append(-1)\n            else:\n                Sol.append(a.index(min(diff)) + 1)\n        else:\n            Sol.append(a.index(minArr) + 1)\nfor ele in Sol:\n    print(ele)", "t = int(input())\nans = [0] * t\nfor i in range(t):\n    min = -1\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = sorted(b)\n    if n != 1:\n        if a[0] != a[1]:\n            min = a[0]\n        else:\n            for j in range(1, n - 1):\n                if a[j - 1] != a[j] and a[j + 1] != a[j]:\n                    min = a[j]\n                    break\n            if a[n - 1] != a[n - 2] and min == -1:\n                min = a[n - 1]\n    else:\n        min = b[0]\n    if min != -1:\n        for j in range(n):\n            if b[j] == min:\n                ans[i] = j + 1\n    else:\n        ans[i] = -1\nfor i in range(t):\n    print(ans[i])", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor q in range(t):\n    k = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split(' ')]\n    freq = dict()\n    for i in nums:\n        freq[i] = 0\n    for i in nums:\n        freq[i] += 1\n    freqList = [(x, y) for (x, y) in freq.items()]\n    freqList.sort(key=lambda x: x[0])\n    for (idx, i) in enumerate(freqList):\n        if i[1] == 1:\n            print(nums.index(i[0]) + 1)\n            break\n        if idx == len(freqList) - 1:\n            print(-1)", "tests = []\nfor _ in range(int(input())):\n    n = int(input())\n    tests.append(list(map(int, input().split())))\nfor test in tests:\n    d = dict()\n    ans = []\n    for i in test:\n        d[i] = d.get(i, 0) + 1\n    for (i, j) in d.items():\n        if j == 1:\n            ans.append(i)\n    print(test.index(min(ans)) + 1 if ans else -1)", "def process():\n    n = int(input())\n    le = list(map(int, input().split()))\n    if n == 1:\n        return 1\n    l = sorted(le)\n    repeated = False\n    last = l[0]\n    num = -1\n    for i in l[1:]:\n        if i == last:\n            repeated = True\n        elif not repeated:\n            num = last\n            break\n        else:\n            repeated = False\n            last = i\n    if not repeated:\n        num = last\n    if num == -1:\n        return -1\n    for i in range(n):\n        if le[i] == num:\n            return i + 1\n\ndef main():\n    for i in range(int(input())):\n        print(process())\nmain()", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    n = ini()\n    a = inl()\n    count = dict()\n    for i in a:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    b = sorted(filter(lambda x: x[1] == 1, count.items()), key=lambda x: x[0])\n    if b:\n        print(a.index(b[0][0]) + 1)\n    else:\n        print(-1)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    count = {}\n    for n in nums:\n        count[n] = count.get(n, 0) + 1\n    uniques = []\n    for i in range(len(nums)):\n        if count[nums[i]] == 1:\n            uniques.append((i + 1, nums[i]))\n    if uniques:\n        uniques.sort(key=lambda tup: tup[1])\n        res.append(uniques[0][0])\n    else:\n        res.append(-1)\nfor e in res:\n    print(e)", "t = int(input())\n\ndef uniq_bid_auction(n, a):\n    min = 100000000000000000000\n    similar = [0] * (n + 1)\n    for i in a:\n        similar[i] += 1\n    for i in a:\n        if i < min and similar[i] == 1:\n            min = i\n    if min == 100000000000000000000:\n        return -1\n    else:\n        return a.index(min) + 1\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(uniq_bid_auction(n, a))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = [0] * n\n    for i in l:\n        s[i - 1] += 1\n    if 1 in s:\n        print(l.index(s.index(1) + 1) + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    num = [0] * (n + 1)\n    for i in a:\n        num[i] += 1\n    if num.count(1) == 0:\n        print(-1)\n    else:\n        print(a.index(num.index(1)) + 1)", "def game(arr):\n    tmp = arr[:]\n    tmp.sort()\n    curr_score = tmp[0]\n    change = False\n    for i in range(1, len(tmp)):\n        if tmp[i] == curr_score:\n            change = True\n            continue\n        if change and tmp[i] != curr_score:\n            curr_score = tmp[i]\n            change = False\n    if change:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == curr_score:\n                return i + 1\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().strip().split()))\n        ind = game(arr)\n        print(ind)\nmain()"]