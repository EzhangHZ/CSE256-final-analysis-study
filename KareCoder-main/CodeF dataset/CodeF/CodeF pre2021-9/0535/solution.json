["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    days = []\n    ans = []\n    for i in range(m):\n        days.append(list(map(int, input().split())))\n        ans.append(days[i][1])\n    freq = {}\n    for num in ans:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    f = max(freq.keys(), key=lambda k: freq[k])\n    z = freq[f]\n    if z <= (m + 1) // 2:\n        print('YES')\n        print(*ans)\n    else:\n        for i in range(m):\n            if ans[i] == f:\n                if days[i][0] > 1:\n                    z -= 1\n                    ans[i] = days[i][2]\n            if z <= (m + 1) // 2:\n                break\n        else:\n            print('NO')\n            continue\n        print('YES')\n        print(*ans)", "import sys\nfrom math import ceil\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    date = []\n    friends = [0] * (n + 1)\n    ans = [0] * m\n    limit = ceil(m / 2)\n    for i in range(m):\n        temp = list(map(int, sys.stdin.readline().split()))\n        date.append(temp[1:])\n        if temp[0] == 1:\n            friends[temp[1]] += 1\n            ans[i] = temp[1]\n            continue\n    if max(friends) > limit:\n        print('NO')\n        continue\n    for i in range(m):\n        if ans[i] != 0:\n            continue\n        for j in range(len(date[i])):\n            if friends[date[i][j]] < limit:\n                friends[date[i][j]] += 1\n                ans[i] = date[i][j]\n                break\n    print('YES')\n    print(*ans)", "import math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    maxi = math.ceil(m / 2)\n    A = [[] for _ in range(m)]\n    for i in range(m):\n        (k, *A[i]) = map(int, input().split())\n    ans = list()\n    cnt = dict()\n    f = -1\n    for i in range(m):\n        ff = A[i][0]\n        ans.append(ff)\n        cnt[ff] = cnt.get(ff, 0) + 1\n        if cnt[ff] > maxi:\n            f = ff\n    for i in range(m):\n        if f != -1 and cnt[f] > maxi and (len(A[i]) > 1) and (f == A[i][0]):\n            cnt[f] = cnt[f] - 1\n            ans[i] = A[i][1]\n    if cnt.get(f, 0) <= maxi:\n        print('YES\\n', *ans)\n    else:\n        print('NO')\nT = int(input())\nfor _ in range(T):\n    solve()", "from collections import Counter\nt = int(input())\n\ndef main():\n    (n, m) = [int(s) for s in input().split()]\n    c = Counter()\n    res = [0] * m\n    arr = []\n    for i in range(m):\n        l = [int(s) for (i, s) in enumerate(input().split()) if i > 0]\n        arr.append(l)\n        if len(l) == 1:\n            c[l[0]] += 1\n            res[i] = l[0]\n    for value in c.values():\n        if value > (m + 1) // 2:\n            print('NO')\n            return\n    for i in range(m):\n        if res[i] == 0:\n            if c[arr[i][0]] < c[arr[i][1]]:\n                res[i] = arr[i][0]\n                c[arr[i][0]] += 1\n            else:\n                res[i] = arr[i][1]\n                c[arr[i][1]] += 1\n    print('YES')\n    print(' '.join([str(e) for e in res]))\nfor _ in range(t):\n    main()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = (m + 1) // 2\n    k = defaultdict(int)\n    ans = [0] * m\n    gh = [(i, list(map(int, input().split(' ')))[1:]) for i in range(0, m)]\n    flag = 0\n    gh.sort(key=lambda day: len(day[1]))\n    for (i, day) in gh:\n        for v in day:\n            if k[v] + 1 <= p:\n                ans[i] = v\n                k[v] += 1\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        print(*ans)", "import math\n\ndef f(lst, n, m):\n    selection = [0 for _ in range(m)]\n    d = dict()\n    for i in range(1, n + 1):\n        d[i] = 0\n    for i in range(m):\n        friend = lst[i][1]\n        d[friend] += 1\n        selection[i] = friend\n    overflow = -1\n    for (x, y) in d.items():\n        if y > math.ceil(m / 2):\n            overflow = x\n    if overflow == -1:\n        print('YES')\n        for i in range(m):\n            print(selection[i], end=' ')\n        print()\n    else:\n        for i in range(m):\n            if d[overflow] <= math.ceil(m / 2):\n                break\n            if lst[i][1] == overflow and lst[i][0] > 1:\n                d[overflow] -= 1\n                d[lst[i][2]] += 1\n                selection[i] = lst[i][2]\n        if d[overflow] <= math.ceil(m / 2):\n            print('YES')\n            for i in range(m):\n                print(selection[i], end=' ')\n            print()\n        else:\n            print('NO')\n    return\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    lst = []\n    for _ in range(m):\n        lst.append(list(map(int, input().split())))\n    f(lst, n, m)", "import math\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    ks = []\n    fs = []\n    res = [-1 for j in range(m)]\n    counts = [0 for j in range(n)]\n    impossible = False\n    for j in range(m):\n        kf = [int(x) for x in input().split()]\n        ks.append(kf[0])\n        fs.append(kf[1:])\n        if kf[0] == 1:\n            res[j] = kf[1]\n            counts[kf[1] - 1] += 1\n            if counts[kf[1] - 1] > math.ceil(m / 2):\n                impossible = True\n    if not impossible:\n        for j in range(m):\n            if res[j] == -1:\n                stopped = False\n                for f in fs[j]:\n                    if counts[f - 1] < math.ceil(m / 2):\n                        res[j] = f\n                        counts[f - 1] += 1\n                        stopped = True\n                        break\n                if not stopped:\n                    impossible = True\n                    break\n    if impossible:\n        print('NO')\n    else:\n        print('YES')\n        print(' '.join([str(x) for x in res]))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    allNums = []\n    solution = [-1 for _ in range(m)]\n    counts = [0 for _ in range(n + 10)]\n    boundary = int(math.ceil(m / 2))\n    works = True\n    for i in range(m):\n        nums = list(map(int, input().split()))\n        nums = nums[1:]\n        allNums.append(nums)\n        if len(nums) == 1:\n            solution[i] = nums[0]\n            counts[nums[0]] += 1\n            if counts[nums[0]] > boundary:\n                works = False\n    if not works:\n        print('NO')\n        continue\n    for i in range(len(solution)):\n        x = solution[i]\n        if x == -1:\n            cur = allNums[i]\n            for y in cur:\n                if counts[y] < boundary:\n                    counts[y] += 1\n                    solution[i] = y\n                    break\n    print('YES')\n    print(*solution)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = defaultdict(int)\n    days = [(i, list(map(int, input().split()))[1:]) for i in range(m)]\n    days.sort(key=lambda day: len(day[1]))\n    ans = [0] * m\n    for (i, day) in days:\n        for values in day:\n            if d[values] + 1 <= (m + 1) // 2:\n                ans[i] = values\n                d[values] += 1\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        print(*ans)", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom collections import Counter\nfrom math import ceil\nfor _ in range(rn()):\n    (n, m) = rns()\n    days = []\n    ans = []\n    for i in range(m):\n        days.append(rl()[1:])\n        ans.append(days[-1][0])\n    c = Counter(ans)\n    flag = True\n    for num in c:\n        if c[num] > ceil(m / 2):\n            for i in range(m):\n                if ans[i] == num and len(days[i]) > 1:\n                    ans[i] = days[i][1]\n                    c[num] -= 1\n                    if c[num] == ceil(m / 2):\n                        break\n            if c[num] > ceil(m / 2):\n                flag = False\n            break\n    if flag:\n        print('YES')\n        print(*ans)\n    else:\n        print('NO')", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    f = [list(map(int, input().split()))[1:] for _ in range(m)]\n    cnts = collections.Counter()\n    df = [0 for _ in range(m)]\n    relax = None\n    mid = (m + 1) // 2\n    for i in range(m):\n        df[i] = f[i][0] - 1\n        cnts[df[i]] += 1\n        if cnts[df[i]] > mid:\n            relax = df[i]\n    if relax is not None:\n        for i in range(m):\n            if cnts[relax] <= mid:\n                break\n            if df[i] == relax:\n                if len(f[i]) > 1:\n                    cnts[df[i]] -= 1\n                    df[i] = f[i][1] - 1\n                    cnts[df[i]] += 1\n    if relax is not None and cnts[relax] > mid:\n        print('NO')\n    else:\n        print('YES')\n        print(*[x + 1 for x in df], sep=' ')", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    can = (m + 1) // 2\n    ans = [0] * m\n    d = defaultdict(int)\n    holidays = [(i, list(map(int, input().split()))[1:]) for i in range(m)]\n    holidays.sort(key=lambda day: len(day[1]))\n    for (i, day) in holidays:\n        for v in day:\n            if d[v] + 1 <= can:\n                ans[i] = v\n                d[v] += 1\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for __ in range(m):\n        l = list(map(int, input().split()))\n        mat.append(l)\n    d = [0] * m\n    flag = 0\n    f = [0] * (n + 1)\n    mx = (m + 1) // 2\n    for i in range(m):\n        if mat[i][0] == 1:\n            d[i] = mat[i][1]\n            f[mat[i][1]] += 1\n            if f[mat[i][1]] > mx:\n                flag = 1\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(m):\n            if d[i] != 0:\n                print(d[i], end=' ')\n            else:\n                g = 0\n                for j in range(1, mat[i][0] + 1):\n                    if g == 1:\n                        break\n                    if f[mat[i][j]] < mx:\n                        f[mat[i][j]] += 1\n                        print(mat[i][j], end=' ')\n                        g = 1\n        print()", "from collections import defaultdict\nfrom math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    (lst, ans, Counter) = ([], [0] * m, defaultdict(int))\n    pointer = []\n    for xx in range(m):\n        temp = list(map(int, input().split(' ')))\n        lst.append(temp[1:])\n        pointer.append(xx)\n    pointer.sort(key=lambda x: len(lst[x]))\n    lst.sort(key=lambda x: len(x))\n    for i in range(m):\n        for val in lst[i]:\n            if Counter[val] < ceil(m / 2):\n                Counter[val] += 1\n                ans[pointer[i]] = val\n                break\n    if min(ans) == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(*ans)", "from collections import defaultdict\nfrom math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    (lst, ans, Counter) = ([], [0] * m, defaultdict(int))\n    pointer = []\n    for xx in range(m):\n        temp = list(map(int, input().split(' ')))\n        lst.append(temp[1:])\n        pointer.append(xx)\n    pointer.sort(key=lambda x: len(lst[x]))\n    for i in range(m):\n        for val in lst[pointer[i]]:\n            if Counter[val] < ceil(m / 2):\n                Counter[val] += 1\n                ans[pointer[i]] = val\n                break\n    if min(ans) == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(*ans)", "def solve(M, n, m):\n    I = {}\n    S = {}\n    result = [0] * m\n    for i in range(m):\n        k = M[i][0]\n        for j in range(1, k + 1):\n            I[M[i][j]] = I.get(M[i][j], 0) + 1\n        if k == 1:\n            S[M[i][1]] = S.get(M[i][1], 0) + 1\n            result[i] = M[i][1]\n    maxFreq = (m + 1) // 2\n    for (k, f) in S.items():\n        if f > maxFreq:\n            return ['NO']\n    A = {}\n    for (k, f) in I.items():\n        A[k] = min(f, maxFreq) - S.get(k, 0)\n    for i in range(m):\n        if result[i] > 0:\n            continue\n        for j in range(1, M[i][0] + 1):\n            if A[M[i][j]] > 0:\n                result[i] = M[i][j]\n                A[M[i][j]] -= 1\n                break\n    return ['YES', result]\nt = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    M = []\n    for i in range(m):\n        M.append(list(map(int, input().split())))\n    result = solve(M, n, m)\n    print(result[0])\n    if len(result) > 1:\n        print(*result[1])", "import collections\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = collections.defaultdict(int)\n    (day, v) = ({}, True)\n    k = (m + 1) // 2\n    for i in range(m):\n        l = list(map(int, input().split()))\n        day[i] = l[1:]\n    day = sorted(day.items(), key=lambda x: len(x[1]))\n    ans = [0] * m\n    for items in day:\n        c = 0\n        for j in items[1]:\n            if d[j] + 1 <= k:\n                ans[items[0]] = j\n                d[j] += 1\n                c = 1\n                break\n        if c == 0:\n            v = False\n            break\n    if v == False:\n        print('NO')\n    else:\n        print('YES')\n        print(*ans)", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nlx = lambda x: map(int, input().split(x))\nfrom math import log10, log2, ceil, factorial as f, gcd\n\ndef f(k1, k2):\n    return min(k1, k2) + (max(k1, k2) - min(k1, k2)) // 2\nfor _ in range(t()):\n    (n, m) = ll()\n    d = {}\n    count = [0] * (n + 1)\n    arr = [0] * m\n    days = {}\n    for i in range(m):\n        l = list(ll())\n        k = l[0]\n        l = l[1:]\n        if k == 1 and count[l[0]] + 1 <= ceil(m / 2):\n            arr[i] = l[0]\n            count[l[0]] += 1\n        for j in l:\n            if j not in d:\n                d[j] = []\n            d[j].append(i)\n    for j in d.keys():\n        for x in d[j]:\n            if count[j] + 1 <= ceil(m / 2):\n                if arr[x] == 0:\n                    arr[x] = j\n                    count[j] += 1\n            else:\n                break\n    if 0 in arr:\n        print('NO')\n    else:\n        print('YES')\n        print(*arr)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    f = []\n    tot = [0] * n\n    uni = [0] * n\n    pop = 0\n    popind = -1\n    threshold = (m + 1) // 2\n    for j in range(m):\n        f.append(input().split())\n        for k in range(len(f[j])):\n            cur = int(f[j][k])\n            f[j][k] = cur\n            if k > 0:\n                tot[cur - 1] += 1\n                if tot[cur - 1] > pop:\n                    pop = tot[cur - 1]\n                    popind = cur\n                if len(f[j]) == 2:\n                    uni[cur - 1] += 1\n    if uni[popind - 1] > threshold:\n        print('NO')\n    else:\n        print('YES')\n        already = 0\n        answer = ''\n        for j in range(m):\n            f[j][0] = -1\n            if len(f[j]) == 2:\n                answer += str(f[j][1])\n            elif popind in f[j]:\n                if already == threshold - uni[popind - 1]:\n                    if f[j][1] == popind:\n                        answer += str(f[j][2])\n                    else:\n                        answer += str(f[j][1])\n                else:\n                    answer += str(popind)\n                    already += 1\n            else:\n                answer += str(f[j][1])\n            if j != m:\n                answer += ' '\n        print(answer)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    f = [m // 2 + m % 2 for i in range(n)]\n    ans = 'YES'\n    a = []\n    fl = [None] * m\n    for i in range(m):\n        a.append(([int(i) for i in input().split()], i))\n    a.sort()\n    for i in range(m):\n        for j in a[i][0][1:]:\n            if f[j - 1]:\n                fl[a[i][1]] = j\n                f[j - 1] -= 1\n                break\n        else:\n            ans = 'NO'\n    print(ans)\n    if ans == 'YES':\n        print(*fl)", "from operator import itemgetter\nt = int(input())\nfor _ in range(t):\n    (n, m) = (int(el) for el in input().split())\n    all_k_2d_list = list()\n    for ki in range(m):\n        (k_size, *k_list) = [int(k) for k in input().split()]\n        all_k_2d_list.append(k_list + [ki])\n    counter = dict.fromkeys(range(1, n + 1), 0)\n    all_k_2d_list.sort(key=len)\n    not_available_k_set = set()\n    results_list = []\n    YES_res = True\n    for k_list in all_k_2d_list:\n        res = None\n        (*k_list, day_i) = k_list\n        k_list = tuple(set(k_list) - not_available_k_set)\n        for k in k_list:\n            counter[k] += 1\n            if counter[k] > (m + 1) // 2:\n                not_available_k_set.add(k)\n            else:\n                res = (k, day_i)\n                break\n        if res is None:\n            YES_res = False\n            break\n        results_list.append(res)\n    if YES_res:\n        print('YES')\n        results_list.sort(key=itemgetter(-1))\n        print(*map(itemgetter(0), results_list))\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    f = [m // 2 + m % 2 for i in range(n)]\n    ans = 'YES'\n    a = []\n    available = [None] * m\n    for i in range(m):\n        a.append(([int(i) for i in input().split()], i))\n    a.sort()\n    for i in range(m):\n        for j in a[i][0][1:]:\n            if f[j - 1]:\n                available[a[i][1]] = j\n                f[j - 1] -= 1\n                break\n        else:\n            ans = 'NO'\n    print(ans)\n    if ans == 'YES':\n        print(*available)", "for i in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    b = [m // 2 + m % 2 for i in range(n)]\n    ans = 'YES'\n    res = [0 for i in range(m)]\n    a = sorted([([int(i) for i in input().split()], i) for i in range(m)])\n    for i in range(m):\n        for j in a[i][0][1:]:\n            if b[j - 1]:\n                res[a[i][1]] = j\n                b[j - 1] -= 1\n                break\n        else:\n            ans = 'NO'\n    print(ans)\n    if ans == 'YES':\n        print(*res)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    f = [m // 2 + m % 2 for i in range(n)]\n    answer = 'YES'\n    a = []\n    available = [None] * m\n    for i in range(m):\n        a.append(([int(i) for i in input().split()], i))\n    a.sort()\n    for i in range(m):\n        for j in a[i][0][1:]:\n            if f[j - 1]:\n                available[a[i][1]] = j\n                f[j - 1] -= 1\n                break\n        else:\n            answer = 'NO'\n    print(answer)\n    if answer == 'YES':\n        print(*available)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    b = [m // 2 + m % 2 for i in range(n)]\n    ans = 'YES'\n    res = [0 for i in range(m)]\n    a = []\n    for i in range(m):\n        a.append(([int(i) for i in input().split()], i))\n    a.sort()\n    for i in range(m):\n        for j in a[i][0][1:]:\n            if b[j - 1]:\n                res[a[i][1]] = j\n                b[j - 1] -= 1\n                break\n        else:\n            ans = 'NO'\n    print(ans)\n    if ans == 'YES':\n        print(*res)", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    MAX = ceil(m / 2)\n    dd = {i: [] for i in range(1, n + 1)}\n    p = []\n    for i in range(m):\n        t = list(map(int, input().split()))\n        uz = t[0]\n        p.append(set())\n        for a in range(1, uz + 1):\n            el = t[a]\n            dd[el].append(i)\n            p[-1].add(el)\n    for i in dd:\n        el = dd[i]\n        c = []\n        for a in el:\n            le = len(p[a])\n            c.append((le, a))\n        c.sort(reverse=True)\n        for a in range(len(c) - MAX):\n            (tek, ind) = c[a]\n            p[ind].remove(i)\n    ans = []\n    f = True\n    for i in p:\n        if len(i) == 0:\n            f = False\n            print('NO')\n            break\n        else:\n            ans.append(next(iter(i)))\n    if f:\n        print('YES')\n        print(*ans)", "tc = int(input())\nwhile tc > 0:\n    (n, m) = map(int, input().strip().split())\n    (vv, ans, tmp) = ([], [], [])\n    for i in range(n + 9):\n        empt = []\n        ans.append(empt)\n    for i in range(m):\n        aa = list(map(int, input().strip().split()))\n        x = aa[0]\n        tmp.append((x, i))\n        a = []\n        for j in range(1, x + 1):\n            v = aa[j]\n            a.append(v - 1)\n        vv.append(a)\n    tmp.sort()\n    k = (m + 1) // 2\n    for i in range(m):\n        d = tmp[i][1]\n        sz = tmp[i][0]\n        for j in range(sz):\n            u = vv[d][j]\n            if len(ans[u]) < k:\n                ans[u].append(d)\n                break\n    day = [-1 for i in range(m + 9)]\n    for i in range(n):\n        for j in range(len(ans[i])):\n            d = ans[i][j]\n            day[d] = i\n    flag = True\n    for i in range(m):\n        if day[i] == -1:\n            flag = False\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(m):\n            print(day[i] + 1, end=' ')\n        print()\n    tc -= 1"]