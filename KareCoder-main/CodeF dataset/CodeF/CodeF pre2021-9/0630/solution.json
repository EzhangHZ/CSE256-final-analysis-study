["from itertools import accumulate as acm, compress as cp\nfor __ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    ans = 0\n    count = [0] * 3001\n    for i in range(n):\n        ans += sum(cp(acm(map(count.__getitem__, arr[i + 1:])), map(lambda x: arr[i] == x, arr[i + 2:])))\n        count[arr[i]] += 1\n    print(ans)", "from itertools import accumulate as acm, compress as cp\nfor __ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    ans = 0\n    count = [0] * 3001\n    for i in range(n):\n        ans += sum(cp(acm(map(count.__getitem__, arr[i + 1:])), map(lambda x: arr[i] == x, arr[i + 2:])))\n        count[arr[i]] += 1\n    print(ans)", "def solve():\n    n = int(input())\n    v = [0] * (n + 2)\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        cur = 0\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                ans += cur\n            cur += v[a[j]]\n        v[a[i]] += 1\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    solve()", "def Zigzag(Numbers, n):\n    Ocurrences = dict()\n    Ocurrences[Numbers[0]] = 1\n    ZigzagsCounter = 0\n    for i in range(1, n):\n        InternalCounter = 0\n        for j in range(i + 1, n):\n            if Numbers[i] == Numbers[j]:\n                ZigzagsCounter += InternalCounter\n            InternalCounter += Ocurrences.get(Numbers[j], 0)\n        Ocurrences[Numbers[i]] = Ocurrences.get(Numbers[i], 0) + 1\n    return ZigzagsCounter\nNTesters = int(input())\nwhile NTesters > 0:\n    n = int(input())\n    Numbers = list(map(int, input().split()))\n    print(Zigzag(Numbers, n))\n    NTesters -= 1", "def Zigzag(Numbers, n):\n    Ocurrences = dict()\n    Ocurrences[Numbers[0]] = 1\n    ZigzagsCounter = 0\n    for j in range(1, n - 2):\n        InternalCounter = 0\n        for l in range(j + 1, n):\n            if Numbers[j] == Numbers[l]:\n                ZigzagsCounter += InternalCounter\n            InternalCounter += Ocurrences.get(Numbers[l], 0)\n        Ocurrences[Numbers[j]] = Ocurrences.get(Numbers[j], 0) + 1\n    return ZigzagsCounter\nNTesters = int(input())\nwhile NTesters > 0:\n    n = int(input())\n    Numbers = list(map(int, input().split()))\n    print(Zigzag(Numbers, n))\n    NTesters -= 1", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    n = II()\n    aa = LI1()\n    cnt = [0] * n\n    ans = 0\n    for (i, a) in enumerate(aa):\n        cur = 0\n        for a2 in aa[i + 1:]:\n            if a2 == a:\n                ans += cur\n            cur += cnt[a2]\n        cnt[a] += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = [0] * n\n    ans = 0\n    for (i, a) in enumerate(l):\n        cur = 0\n        for j in l[i + 1:]:\n            if j == a:\n                ans += cur\n            cur += count[j - 1]\n        count[a - 1] += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = [0] * n\n    ans = 0\n    for (i, a) in enumerate(l):\n        cur = 0\n        for j in l[i + 1:]:\n            if j == a:\n                ans += cur\n            cur += count[j - 1]\n        count[a - 1] += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = [0] * n\n    ans = 0\n    for (i, a) in enumerate(l):\n        cur = 0\n        for j in l[i + 1:]:\n            if j == a:\n                ans += cur\n            cur += count[j - 1]\n        count[a - 1] += 1\n    print(ans)", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    c = {}\n    r = 0\n    for (i, row) in enumerate(a):\n        m = 0\n        for row2 in a[i + 1:]:\n            if row == row2:\n                r += m\n            m += c.get(row2, 0)\n        c[row] = c.get(row, 0) + 1\n    res += f'{r}\\n'\nprint(res)", "import math\nimport random\nfrom collections import Counter, deque\nfrom sys import stdout\nimport time\nfrom math import factorial, log, gcd\nimport sys\nfrom decimal import Decimal\nimport heapq\nfrom copy import deepcopy\n\ndef S():\n    return sys.stdin.readline().split()\n\ndef I():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef IS():\n    return sys.stdin.readline().replace('\\n', '')\n\ndef main():\n    n = II()\n    a = I()\n    m = [0] * (n + 1)\n    d_left = [tuple(m)]\n    for i in range(n):\n        m[a[i]] += 1\n        d_left.append(tuple(m))\n    m = [0] * (n + 1)\n    d_right = [tuple(m)]\n    for i in range(n - 1, -1, -1):\n        m[a[i]] += 1\n        d_right.append(tuple(m))\n    d_right = d_right[::-1]\n    ans = 0\n    for k in range(n - 1, -1, -1):\n        for j in range(k):\n            ans += d_left[j][a[k]] * d_right[k + 1][a[j]]\n    print(ans)\nfor _ in range(II()):\n    main()", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    col = [0] * (n + 1)\n    ans = 0\n    col[arr[0]] += 1\n    for j in range(1, n - 2):\n        c = col[arr[j + 1]]\n        val = arr[j]\n        for l in range(j + 2, n):\n            if arr[l] == val:\n                ans += c\n            c += col[arr[l]]\n        col[arr[j]] += 1\n    print(ans)", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    c = {}\n    r = 0\n    for (i, row) in enumerate(a):\n        m = 0\n        for row2 in a[i + 1:]:\n            if row == row2:\n                r += m\n            m += c.get(row2, 0)\n        c[row] = c.get(row, 0) + 1\n    res += f'{r}\\n'\nprint(res)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = [0] * n\n    ans = 0\n    for (i, a) in enumerate(l):\n        cur = 0\n        for j in l[i + 1:]:\n            if j == a:\n                ans += cur\n            cur += count[j - 1]\n        count[a - 1] += 1\n    print(ans)"]