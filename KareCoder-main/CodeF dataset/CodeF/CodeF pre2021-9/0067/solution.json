["for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "k = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k.append(s.count('1') + s.count('3'))\nfor i in k:\n    print(i)", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for g in [*open(0)][2::2]:\n    print(g.count('3') + g.count('1'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count('2'))", "m = int(input())\nl = []\nfor i in range(m):\n    b = input()\n    a = input()\n    l.append(a.count('1') + a.count('3'))\nfor i in l:\n    print(i)", "for s in [*open(0)][2::2]:\n    s = s.split()\n    cnt = 0\n    for i in s:\n        if i in ['1', '3']:\n            cnt += 1\n    print(cnt)", "k = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k.append(s.count('1') + s.count('3'))\nfor i in k:\n    print(i)", "list1 = []\nfor i in range(int(input())):\n    n = int(input())\n    s = input().split()\n    list1.append(s.count('1') + s.count('3'))\nprint(*list1, sep='\\n')", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    print(l.count(1) + l.count(3))", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    c = input()\n    like = c.count('1')\n    dislike = c.count('2')\n    pofig = c.count('3')\n    print(like + pofig)", "t = int(input())\ntmp = []\nfor i in range(t):\n    k = int(input())\n    a = input().split(' ')\n    tmp.append(len(a) - a.count('2'))\nfor j in tmp:\n    print(j)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('1') + s.count('3'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = input()\n    print(x.count('1') + x.count('3'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "for i in range(int(input())):\n    n = int(input())\n    r = input()\n    print(n - r.count('2'))", "txt = int(input())\nfor i in range(txt):\n    n = int(input())\n    a = input()\n    print(n - a.count('2'))", "for _ in range(0, int(input())):\n    input()\n    v = input()\n    print(v.count('1') + v.count('3'))", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    viewers = input().split()\n    ans = 0\n    for viewer in viewers:\n        ans += viewer == '1' or viewer == '3'\n    res += '%d\\n' % ans\nprint(res)", "for _ in range(int(input())):\n    input()\n    ans = 0\n    a = input()\n    ans += a.count('1')\n    ans += a.count('3')\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    print(a.count('1') + a.count('3'))", "t = int(input())\nfor i in range(t):\n    l = int(input())\n    a = input()\n    print(a.count('1') + a.count('3'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(map(str, input().split()))\n    a = len(r) - r.count('2')\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(map(str, input().split()))\n    a = len(r) - r.count('2')\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(map(str, input().split()))\n    a = len(r) - r.count('2')\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(map(str, input().split()))\n    a = len(r) - r.count('2')\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(map(str, input().split()))\n    a = len(r) - r.count('2')\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    types = list(map(int, input().split()))\n    upvotes = types.count(1) + types.count(3)\n    print(upvotes)", "b = int(input())\nlistB = []\nfor k in range(b):\n    a = int(input())\n    c = list(map(int, input().strip().split()))[:a]\n    xx = c.count(2)\n    yy = c.count(3) + c.count(1)\n    listB.append(yy)\nfor i in listB:\n    print(i)", "t = int(input())\nfor i in range(t):\n    b = int(input())\n    c = list(map(int, input().split()))\n    print(c.count(1) + c.count(3))", "for _ in range(int(input())):\n    n = int(input())\n    uv = 0\n    for x in input().split():\n        if x in '13':\n            uv += 1\n    print(uv)", "t = int(input())\nfor _ in range(t):\n    (n, r) = (int(input()), input().split())\n    res = n - sum((i == '2' for i in r))\n    print(res)", "import sys\ninput = sys.stdin.readline\ninputLines = sys.stdin.readlines\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef readStrList():\n    return list(map(lambda x: x.strip(), inputLines()))\n\ndef indexOf(l: list, elem):\n    return l.index(elem) if elem in l else -1\n\ndef lastIndexOf(l: list, elem):\n    indexes = [idx for (idx, val) in enumerate(l) if val == elem]\n    return max(indexes) if len(indexes) > 0 else -1\n\ndef distinct(l: list):\n    used = set()\n    return [x for x in l if x not in used and (used.add(x) or True)]\n\ndef solution():\n    for _ in range(int(input())):\n        n = int(input())\n        reviewers = readIntList()\n        print(len([x for x in reviewers if x == 1 or x == 3]))\nsolution()", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        one = 0\n        two = 0\n        three = 0\n        for i in l:\n            if i == 1:\n                one += 1\n            if i == 2:\n                two += 1\n            if i == 3:\n                three += 1\n        print(one + three)\nmain()", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        one = 0\n        two = 0\n        three = 0\n        for i in l:\n            if i == 1:\n                one += 1\n            if i == 2:\n                two += 1\n            if i == 3:\n                three += 1\n        print(one + three)\nmain()", "from io import BytesIO, IOBase\nimport sys, os\ninpl = lambda : list(map(int, input().split()))\ninpm = lambda : map(int, input().split())\ninpi = lambda : int(input())\ninp = lambda : input()\n(rev, ra, l) = (reversed, range, len)\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            (self.buffer.truncate(0), self.buffer.seek(0))\n\nclass IOWrapper(IOBase):\n\n    def init(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda : self.buffer.read().decode('ascii')\n        self.readline = lambda : self.buffer.readline().decode('ascii')\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport sys, operator, math, operator\nfrom collections import Counter\nimport random\ntest_Cases = inpi()\nwhile test_Cases:\n    test_Cases -= 1\n    intn_num = inpi()\n    li = list(input())\n    answer = li.count('1') + li.count('3')\n    print(answer)", "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport sys\nimport copy\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nar = [2, 11, 101, 1009, 10009, 100019, 1000033, 10000019, 100000037]\nfor _ in range(int(input())):\n    n = int(input())\n    a = get_array()\n    print(a.count(1) + a.count(3))", "def solve():\n    k = int(input())\n    ans = 0\n    inp = list(map(int, input().split()))\n    n = len(inp)\n    for i in inp:\n        if i == 2:\n            ans += 1\n    ans = k - ans\n    return ans\nr = []\nn = int(input())\nfor i in range(n):\n    re = solve()\n    r.append(re)\nfor i in r:\n    print(i)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    line = input().split(' ')\n    print(sum([1 for i in line if i != '2']))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input().split()\n    ans = 0\n    for i in a:\n        if i != '2':\n            ans += 1\n    print(ans)", "for i in range(int(input())):\n    _ = input()\n    k = sum((1 for i in input().split() if i == '1' or i == '3'))\n    print(k)", "for _ in range(int(input())):\n    n = input()\n    s = input()\n    print(s.count('1') + s.count('3'))", "for _ in range(int(input())):\n    n = int(input())\n    down = input().split().count('2')\n    print(n - down)", "import sys\nfrom math import *\nimport builtins\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high\n\ndef main():\n    p = get_int()\n    for q in range(p):\n        n = get_int()\n        ls = get_list_ints()\n        total = 0\n        for i in range(n):\n            if ls[i] == 1 or ls[i] == 3:\n                total += 1\n        print(total)\n    pass\nmain()", "t = int(input())\nfor i in range(t):\n    upvotes = 0\n    reviewers = int(input())\n    data = list(map(int, input().split()))\n    upvotes = data.count(1) + data.count(3)\n    print(upvotes)", "t = int(input())\nfor i in range(t):\n    upvotes = 0\n    reviewers = int(input())\n    data = list(map(int, input().split()))\n    upvotes = data.count(1) + data.count(3)\n    print(upvotes)", "for t in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    print(n - r.count(2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    print(s.count(1) + s.count(3))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l.count(1)\n    y = l.count(3)\n    print(x + y)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    a = list(map(int, input().split()))\n    r = a.count(1) + a.count(3)\n    print(r)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    l = list(map(int, input().split()))\n    c = l.count(1) + l.count(3)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(n - l.count(2))", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    i = list(map(int, input().split()))\n    print(a - i.count(2))", "n = int(input())\nfor i in range(n):\n    p = int(input())\n    a = list(map(int, input().split()))\n    print(a.count(1) + a.count(3))", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    y = list(map(int, input().split()))\n    j = y.count(1) + y.count(3)\n    print(j)", "t = int(input(''))\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(l.count(1) + l.count(3))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(arr.count(1) + arr.count(3))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    count = l.count(1) + l.count(3)\n    print(count)", "from time import sleep as sle\nfrom math import *\nfrom random import randint as ri\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        r = [int(q) for q in input().split()]\n        print(r.count(1) + r.count(3))\nsolve()", "for _ in range(int(input())):\n    print(int(input()) - list(map(int, input().split())).count(2))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(l.count(1) + l.count(3))", "test_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    r = list(map(int, input().split(' ')))\n    print(r.count(1) + r.count(3))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = arr.count(1)\n    b = arr.count(3)\n    c = a + b\n    print(c)\n    t = t - 1", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    r = list(map(int, input().split()))\n    print(n - r.count(2))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = list(map(int, input().split()))\n    print(r.count(1) + r.count(3))", "t = int(input())\nlike = 0\ndis = 0\nfor i in range(t):\n    n = int(input())\n    a = input().split()\n    for j in a:\n        if j == '1':\n            like += 1\n        elif j == '2':\n            dis += 1\n        else:\n            like += 1\n    print(like)\n    (dis, like) = (0, 0)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\n\ndef solve(n, arr):\n    c = 0\n    for i in arr:\n        if i != 2:\n            c += 1\n    print(c)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "import sys\nfrom math import *\nimport builtins\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high\n\ndef main():\n    p = get_int()\n    for q in range(p):\n        n = get_int()\n        ls = get_list_ints()\n        total = 0\n        for i in range(n):\n            if ls[i] == 1 or ls[i] == 3:\n                total += 1\n        print(total)\n    pass\nmain()", "import sys\nfrom math import *\nimport builtins\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high\n\ndef main():\n    p = get_int()\n    for q in range(p):\n        n = get_int()\n        ls = get_list_ints()\n        total = 0\n        for i in range(n):\n            if ls[i] == 1 or ls[i] == 3:\n                total += 1\n        print(total)\n    pass\nmain()", "import sys\nfrom math import *\nimport builtins\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high\n\ndef main():\n    p = get_int()\n    for q in range(p):\n        n = get_int()\n        ls = get_list_ints()\n        total = 0\n        for i in range(n):\n            if ls[i] == 1 or ls[i] == 3:\n                total += 1\n        print(total)\n    pass\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    print(n - r.count(2))"]