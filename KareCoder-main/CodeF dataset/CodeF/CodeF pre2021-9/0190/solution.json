["import operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef check_seq(A, B, n, m_power, m_health):\n    res_map = []\n    for i in range(n):\n        fights = m_health[i] // A\n        if m_health[i] % A:\n            fights += 1\n        res_map.append((i, m_power[i], fights))\n    res_map.sort(key=operator.itemgetter(1, 2))\n    for i in range(n):\n        (ind, _, _) = res_map[i]\n        fights = m_health[ind] // A\n        if m_health[ind] % A:\n            fights += 1\n        B -= m_power[ind] * fights\n        if B <= 0 and i == n - 1 and (B + m_power[ind] > 0):\n            return 'YES'\n        elif B <= 0:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    samples = read_one_int()\n    res = []\n    for _ in range(samples):\n        (A, B, n) = read_list_of_ints()\n        m_power = read_list_of_ints()\n        m_health = read_list_of_ints()\n        cur_res = check_seq(A, B, n, m_power, m_health)\n        res.append(cur_res)\n    print('\\n'.join(res))\nmain()", "import sys\ninput = sys.stdin.readline\nfrom math import ceil\nfor _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    p = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        c = ceil(h[i] / a) * p[i]\n        s += c\n    if b - s + max(p) > 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (A, B, n) = [int(i) for i in sys.stdin.readline().split()]\n    a = [int(i) for i in sys.stdin.readline().split()]\n    b = [int(i) for i in sys.stdin.readline().split()]\n    damage = 0\n    for i in range(n):\n        num_times = (b[i] + A - 1) // A\n        damage += num_times * a[i]\n    if damage - max(a) < B:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef solve(health, attack, a, b, n, ans):\n    for i in range(n):\n        k = health[i] // a\n        health[i] %= a\n        if health[i]:\n            if b < k * attack[i]:\n                ans.append('NO')\n                return\n            b -= k * attack[i]\n        elif b >= (k - 1) * attack[i]:\n            b -= (k - 1) * attack[i]\n            health[i] = a\n        else:\n            ans.append('NO')\n            return\n    attack.sort()\n    for i in attack:\n        if b <= 0:\n            ans.append('NO')\n            return\n        b -= i\n    ans.append('YES')\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (a, b, n) = map(int, input().split())\n        attack = list(map(int, input().split()))\n        health = list(map(int, input().split()))\n        solve(health, attack, a, b, n, ans)\n    print('\\n'.join(ans))\nmain()", "t = int(input())\nans = []\nfor j in range(t):\n    (A, B, n) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    i = 0\n    bn = n - 1\n    while i < bn:\n        B -= c[i][0] * ((c[i][1] + A - 1) // A)\n        if B <= 0:\n            break\n        i += 1\n    if B <= 0:\n        ans.append('NO')\n    else:\n        qh = (c[-1][1] + A - 1) // A\n        ma = c[-1][0]\n        qm = (B + ma - 1) // ma\n        if qh <= qm:\n            ans.append('YES')\n        else:\n            ans.append('NO')\nprint('\\n'.join(ans))", "import math\n\ndef main():\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        (hero_dmg, hero_hp, n) = map(int, input().split())\n        dmg = list(map(int, input().split()))\n        hp = list(map(int, input().split()))\n        total_dmg = 0\n        for i in range(len(dmg)):\n            total_dmg += dmg[i] * math.ceil(hp[i] / hero_dmg)\n        max_hp = -1 * 10 ** 9\n        for i in range(len(dmg)):\n            max_hp = max(hero_hp - total_dmg + dmg[i], max_hp)\n        if max_hp <= 0:\n            ans.append('NO')\n        else:\n            ans.append('YES')\n    print('\\n'.join(ans))\nmain()", "from sys import stdin\nfrom math import ceil\nt = int(stdin.readline())\nfor _ in range(t):\n    (A, B, n) = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    idx = a.index(max(a))\n    for i in range(n):\n        B -= ceil(b[i] / A) * a[i]\n    if B + a[idx] > 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nans = []\nfor j in range(t):\n    (A, B, n) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    s = sum((a[i] * ((b[i] + A - 1) // A) for i in range(n)))\n    look = True\n    for i in range(n):\n        h = B - s + a[i]\n        if h > 0:\n            look = False\n            break\n    ans.append('NO' if look else 'YES')\nprint('\\n'.join(ans))", "import sys\n\ndef main():\n    (hero_attack, hero_hp, n) = map(int, sys.stdin.readline().strip().split())\n    data = sorted(zip(list(map(int, sys.stdin.readline().strip().split())), list(map(int, sys.stdin.readline().strip().split()))), key=lambda x: x[0])\n    current_max = (0, 0)\n    for (mob_attack, mob_hp) in data:\n        fight_count = int((mob_hp + hero_attack - 1) / hero_attack)\n        hero_hp -= fight_count * mob_attack\n        if hero_hp + mob_attack <= 0:\n            print('NO')\n            return\n    print('YES')\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    main()", "import sys\nimport math\n\ndef scan(input_type='int'):\n    if input_type == 'int':\n        return list(map(int, sys.stdin.readline().strip().split()))\n    else:\n        return list(map(str, sys.stdin.readline().strip()))\n\ndef solution():\n    for _ in range(int(input())):\n        (x, y, n) = scan()\n        a = scan()\n        b = scan()\n        for i in range(n):\n            y -= a[i] * math.ceil(b[i] / x)\n        if y + max(a) > 0:\n            print('YES')\n        else:\n            print('NO')\nsolution()", "import sys\npin = sys.stdin.readline\nfor T in range(int(pin())):\n    (A, B, N) = map(int, pin().split())\n    Am = [*map(int, pin().split())]\n    Bm = [*map(int, pin().split())]\n    M = [(Am[i], Bm[i]) for i in range(N)]\n    M.sort()\n    for i in range(N - 1):\n        B -= M[i][0] * (M[i][1] // A + bool(M[i][1] % A))\n    C = M[N - 1][1] // A + bool(M[N - 1][1] % A)\n    if B <= 0:\n        print('NO')\n    elif B <= M[N - 1][0] * (C - 1):\n        print('NO')\n    else:\n        print('YES')", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (A, B, n) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(zip(a, b))\n        c = sorted(c, key=lambda x: x[0], reverse=False)\n        ans = True\n        for i in range(n):\n            p = math.ceil(c[i][1] / A)\n            B -= c[i][0] * p\n            if B <= 0:\n                if i == n - 1 and abs(B) < c[i][0]:\n                    break\n                else:\n                    ans = False\n                    break\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import math\nimport sys\ninf = float('inf')\nmod = 10 ** 9 + 7\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    monsters = []\n    for i in range(n):\n        monsters.append([a[i], b[i]])\n    monsters.sort(key=lambda arr: arr[0])\n    for i in range(n - 1):\n        x = math.ceil(monsters[i][1] / A)\n        B -= monsters[i][0] * x\n    if B <= 0:\n        print('NO')\n    else:\n        x = math.ceil(monsters[-1][1] / A)\n        y = math.ceil(B / monsters[-1][0])\n        if x > y:\n            print('NO')\n        else:\n            print('YES')", "import math\nimport sys\ninf = float('inf')\nmod = 10 ** 9 + 7\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    monsters = []\n    for i in range(n):\n        monsters.append([a[i], b[i]])\n    monsters.sort(key=lambda arr: arr[0])\n    for i in range(n - 1):\n        x = math.ceil(monsters[i][1] / A)\n        B -= monsters[i][0] * x\n    if B <= 0:\n        print('NO')\n    else:\n        x = math.ceil(monsters[-1][1] / A)\n        y = math.ceil(B / monsters[-1][0])\n        if x > y:\n            print('NO')\n        else:\n            print('YES')", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (a, b, n) = map(int, input().split())\n    monster_power = list(map(int, input().split()))\n    monster_health = list(map(int, input().split()))\n    monster = []\n    for i in range(n):\n        monster.append([monster_power[i], monster_health[i]])\n    monster.sort()\n    for i in range(n - 1):\n        b = b - math.ceil(monster[i][1] / a) * monster[i][0]\n    if b < 0:\n        print('NO')\n        continue\n    monster[-1][1] = monster[-1][1] - math.ceil(b / monster[-1][0]) * a\n    b = b - math.ceil(b / monster[-1][0]) * monster[-1][0]\n    if monster[-1][1] <= 0:\n        print('YES')\n    else:\n        print('NO')", "from sys import *\nfrom math import *\nfrom bisect import bisect_left\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    (A, B, N) = get_int()\n    power = int_arr()\n    health = int_arr()\n    val = 0\n    for i in range(N):\n        val += ceil(health[i] / A) * power[i]\n    if val - max(power) < B:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\n\ndef fn(A, B, n, a, b):\n    asum = sum(a)\n    bsum = sum(b)\n    z = [0] * n\n    for i in range(n):\n        z[i] = [a[i], b[i]]\n    z.sort(key=lambda x: x[0])\n    if A >= max(b) and B >= asum:\n        print('YES')\n        return 0\n    c = 0\n    for i in range(n):\n        k = math.ceil(z[i][1] / A)\n        j = math.ceil(B / z[i][0])\n        if k <= j:\n            c = c + 1\n            B = B - k * z[i][0]\n        else:\n            print('NO')\n            return 0\n    if c == n:\n        print('YES')\n        return 0\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    A = data[l + 1]\n    B = data[l + 2]\n    n = data[l + 3]\n    a = data[l + 4:l + 4 + n]\n    b = data[l + 4 + n:l + 4 + 2 * n]\n    l = l + 3 + 2 * n\n    fn(A, B, n, a, b)", "import math\nimport operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\noutput = []\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (h_at, h_hp, m_n) = list(map(int, input().split()))\n        ms_at = list(map(int, input().split()))\n        ms_hp = list(map(int, input().split()))\n        ms = sorted(sorted(list(map(list, zip(ms_at, ms_hp))), key=lambda a: a[1] / a[0]), key=lambda a: a[0])\n        for (i, (m_at, m_hp)) in enumerate(ms):\n            f_h = math.ceil(m_hp / h_at)\n            f_a = math.ceil(h_hp / m_at)\n            if 0 < f_h <= f_a:\n                h_hp -= f_h * m_at\n                ms[i][1] -= f_h * h_at\n            else:\n                break\n        if any((m_hp > 0 for m_hp in list(zip(*ms))[1])):\n            output.append('NO')\n        else:\n            output.append('YES')\n    print(*output, sep='\\n')\nmain()", "import math\nt = int(input())\nf = []\nfor _ in range(t):\n    (A, B, n) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    term = 0\n    for j in range(0, n):\n        q = math.ceil(b[j] / A)\n        t = q * a[j]\n        term += t\n    counter = 0\n    while counter < n:\n        if counter != n - 1:\n            if B - term + a[counter] > 0:\n                f.append('YES')\n                break\n            else:\n                pass\n        elif B - term + a[counter] > 0:\n            f.append('YES')\n            break\n        else:\n            f.append('NO')\n            break\n        counter += 1\nfor k in f:\n    print(k)", "import math\nimport sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (A, B, n) = map(int, sys.stdin.readline().split())\n    an = list(map(int, sys.stdin.readline().split()))\n    bn = list(map(int, sys.stdin.readline().split()))\n    monster = []\n    for i in range(n):\n        monster.append((an[i], bn[i]))\n    monster.sort()\n    answer = 'YES'\n    for i in range(len(monster)):\n        (attack, life) = monster[i]\n        count = math.ceil(life / A)\n        B -= attack * count\n        if B <= 0:\n            if i != len(monster) - 1:\n                answer = 'NO'\n                break\n            elif B + attack <= 0:\n                answer = 'NO'\n                break\n    print(answer)", "import math\n\ndef solve(A, B, n, As, Bs):\n    monsters = [[a, b] for (a, b) in zip(As, Bs)]\n    monsters = sorted(monsters, key=lambda p: p[0])\n    for monster in monsters:\n        if B <= 0:\n            return 'NO'\n        (a, b) = (monster[0], monster[1])\n        cnt = math.ceil(b / A)\n        if B - (cnt - 1) * a <= 0:\n            return 'NO'\n        B -= cnt * a\n    return 'YES'\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        (A, B, n) = map(int, input().split(' '))\n        As = list(map(int, input().split(' ')))\n        Bs = list(map(int, input().split(' ')))\n        ans.append(solve(A, B, n, As, Bs))\n    for a in ans:\n        print(a)\nmain()", "import math\nt = int(input())\nf = []\nfor _ in range(t):\n    (A, B, n) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    term = 0\n    for j in range(0, n):\n        q = math.ceil(b[j] / A)\n        t = q * a[j]\n        term += t\n    counter = 0\n    while counter < n:\n        if counter != n - 1:\n            if B - term + a[counter] > 0:\n                f.append('YES')\n                break\n            else:\n                pass\n        elif B - term + a[counter] > 0:\n            f.append('YES')\n            break\n        else:\n            f.append('NO')\n            break\n        counter += 1\nfor k in f:\n    print(k)", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (a, b, n) = map(int, input().split())\n    monster_power = list(map(int, input().split()))\n    monster_health = list(map(int, input().split()))\n    monster = []\n    for i in range(n):\n        monster.append([monster_power[i], monster_health[i]])\n    monster.sort()\n    for i in range(n - 1):\n        b = b - math.ceil(monster[i][1] / a) * monster[i][0]\n    if b < 0:\n        print('NO')\n        continue\n    monster[-1][1] = monster[-1][1] - math.ceil(b / monster[-1][0]) * a\n    b = b - math.ceil(b / monster[-1][0]) * monster[-1][0]\n    if monster[-1][1] <= 0:\n        print('YES')\n    else:\n        print('NO')", "test_cases = int(input())\nres = []\nfor test in range(test_cases):\n    st = input()\n    ls = st.split()\n    a = int(ls[0])\n    h = int(ls[1])\n    n = int(ls[2])\n    st = input()\n    ls = st.split()\n    val_lst = []\n    for value in ls:\n        val_lst.append([int(value)])\n    st = input()\n    ls = st.split()\n    for i in range(n):\n        value = int(ls[i])\n        val_lst[i].append(value)\n    val_lst.sort()\n    f = 0\n    for value in val_lst:\n        if h <= 0:\n            f = 1\n            break\n        if value[1] % a == 0:\n            h -= value[0] * value[1] // a\n        else:\n            h -= value[0] * (value[1] // a + 1)\n        if h + value[0] <= 0:\n            f = 1\n            break\n    if f == 1:\n        res.append('NO')\n    else:\n        res.append('YES')\nfor value in res:\n    print(value)", "import math\nimport operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (h_at, h_hp, m_n) = list(map(int, input().split()))\n        ms_at = list(map(int, input().split()))\n        ms_hp = list(map(int, input().split()))\n        ms = sorted(sorted(list(map(list, zip(ms_at, ms_hp))), key=lambda a: a[1] / a[0]), key=lambda a: a[0])\n        for (i, (m_at, m_hp)) in enumerate(ms):\n            f_h = math.ceil(m_hp / h_at)\n            f_a = math.ceil(h_hp / m_at)\n            if 0 < f_h <= f_a:\n                h_hp -= f_h * m_at\n                ms[i][1] -= f_h * h_at\n            else:\n                break\n        if any((m_hp > 0 for m_hp in list(zip(*ms))[1])):\n            print('NO')\n        else:\n            print('YES')\nmain()", "from math import ceil\nt = int(input())\nresult = []\nfor ex in range(t):\n    first = input().split()\n    A = int(first[0])\n    B = int(first[1])\n    n = int(first[2])\n    a = input().split()\n    b = input().split()\n    monsters = []\n    for i in range(n):\n        monsters.append([int(a[i]), int(b[i])])\n    monsters = sorted(monsters, key=lambda l: l[0])\n    for i in range(n - 1):\n        monster = monsters.pop(0)\n        round = ceil(monster[1] / A)\n        B = B - round * monster[0]\n    monster = monsters.pop(0)\n    if monster[1] % A == 0:\n        round = monster[1] // A - 1\n        B = B - round * monster[0]\n        if B > 0:\n            result.append('YES')\n        else:\n            result.append('NO')\n    else:\n        round = monster[1] // A\n        B = B - round * monster[0]\n        if B > 0:\n            result.append('YES')\n        else:\n            result.append('NO')\nfor ans in result:\n    print(ans)", "import sys\nimport math\nimport bisect\nfast_reader = sys.stdin.readline\nfast_writer = sys.stdout.write\n\ndef input():\n    return fast_reader().strip()\n\ndef print(*argv):\n    fast_writer(' '.join((str(i) for i in argv)))\n    fast_writer('\\n')\nfor T in range(int(input())):\n    (A, H, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    h = [x for (_, x) in sorted(zip(a, h))]\n    a.sort()\n    pos = True\n    for i in range(n):\n        m = math.ceil(h[i] / A)\n        if H - a[i] * (m - 1) <= 0:\n            pos = False\n            break\n        H -= a[i] * m\n        h[i] -= A * m\n    if pos and h[-1] <= 0:\n        print('YES')\n    else:\n        print('NO')", "numTests = int(input())\nimport math\noutput = []\n\ndef calculate(ehp, eac, hac):\n    return math.ceil(ehp / hac) * eac\nfor i in range(numTests):\n    info = input().split()\n    heroAttack = int(info[0])\n    heroHealth = int(info[1])\n    enemyDamages = input().split()\n    enemyHealths = input().split()\n    enemyDamages = [int(i) for i in enemyDamages]\n    enemyHealths = [int(i) for i in enemyHealths]\n    index = enemyDamages.index(max(enemyDamages))\n    enemyDamages.append(enemyDamages[index])\n    enemyDamages.pop(index)\n    enemyHealths.append(enemyHealths[index])\n    enemyHealths.pop(index)\n    for x in range(len(enemyDamages)):\n        if heroHealth > calculate(enemyHealths[x], enemyDamages[x], heroAttack):\n            heroHealth -= calculate(enemyHealths[x], enemyDamages[x], heroAttack)\n        elif heroHealth + enemyDamages[x] > calculate(enemyHealths[x], enemyDamages[x], heroAttack) and x == len(enemyDamages) - 1:\n            heroHealth = 1\n        else:\n            heroHealth = 0\n            break\n    if heroHealth > 0:\n        output.append('YES')\n    else:\n        output.append('NO')\nfor i in output:\n    print(i)", "import math\n\ndef all_less_than_zeros(b):\n    for i in b:\n        if i[1] > 0:\n            return False\n    return True\n\ndef main_function():\n    output_list = []\n    for i in range(int(input())):\n        (A, B, n) = [int(i) for i in input().split(' ')]\n        monsters_a = [int(i) for i in input().split(' ')]\n        monsters_b = [int(i) for i in input().split(' ')]\n        monsters = []\n        for i in range(len(monsters_a)):\n            monsters.append([monsters_a[i], monsters_b[i]])\n        monsters = sorted(monsters, key=lambda x: x[0])\n        while True:\n            if B <= 0 and all_less_than_zeros(monsters):\n                output_list.append('YES')\n                break\n            elif B <= 0 and (not all_less_than_zeros(monsters)):\n                output_list.append('NO')\n                break\n            elif B > 0 and all_less_than_zeros(monsters):\n                output_list.append('YES')\n                break\n            for i in range(len(monsters)):\n                if B < 0:\n                    break\n                if monsters[i][1] > 0:\n                    k = min(int(math.ceil(monsters[i][1] / A)), int(math.ceil(B / monsters[i][0])))\n                    monsters[i][1] -= A * k\n                    B -= monsters[i][0] * k\n    return '\\n'.join(output_list)\nprint(main_function())", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    p = list(map(int, list(sys.stdin.readline().split())))\n    (h_p, h_h, num) = (p[0], p[1], p[2])\n    e_p = list(map(int, list(sys.stdin.readline().split())))\n    e_h = list(map(int, list(sys.stdin.readline().split())))\n    enemy = [[0] * 2 for _ in range(num)]\n    for i in range(p[2]):\n        (enemy[i][0], enemy[i][1]) = (e_p[i], e_h[i])\n    enemy.sort(key=lambda x: x[0])\n    i = 0\n    while i < num and h_h > 0:\n        (e_p, e_h) = (enemy[i][0], enemy[i][1])\n        if e_h % h_p == 0:\n            nu = e_h // h_p\n        else:\n            nu = e_h // h_p + 1\n        h_h -= nu * e_p\n        if h_h > -e_p:\n            i += 1\n    if i == num:\n        print('YES')\n    else:\n        print('NO')", "a = int(input())\nfin = []\nfor i in range(a):\n    (a, b, c) = map(int, input().split())\n    dam = list(map(int, input().split()))\n    hel = list(map(int, input().split()))\n    if sum(dam) < b and sum(hel) < a:\n        fin.append('YES')\n    else:\n        mas = [0] * len(dam)\n        for i in range(len(dam)):\n            mas[i] = [0] * 2\n        for i in range(len(dam)):\n            mas[i][0] = dam[i]\n            mas[i][1] = hel[i]\n        mas.sort()\n        for i in range(len(dam)):\n            z = mas[i][1] // a\n            if mas[i][1] % a != 0:\n                z += 1\n            b -= z * mas[i][0]\n            if b <= 0:\n                if i == len(dam) - 1 and abs(b) < mas[i][0]:\n                    fin.append('YES')\n                    break\n                else:\n                    fin.append('NO')\n                    break\n            if i == len(dam) - 1:\n                fin.append('YES')\nfor i in range(len(fin)):\n    print(fin[i])", "n = int(input())\nans = []\nfor i in range(n):\n    (at, hp, num) = (int(num) for num in input().split())\n    mat = [int(num) for num in input().split()]\n    mhp = [int(num) for num in input().split()]\n    gank = []\n    min = 10 * 10\n    for j in range(num):\n        num1 = mat[j] * (mhp[j] // at)\n        if mhp[j] % at != 0:\n            num1 += mat[j]\n        gank.append(num1)\n        hp -= num1\n        hplist = []\n    for j in gank:\n        hplist.append(hp + j)\n    jg = 0\n    for j in range(num):\n        if hplist[j] <= 0:\n            continue\n        mtime = gank[j] // mat[j]\n        time = hplist[j] // mat[j]\n        if hplist[j] % mat[j] != 0:\n            time += 1\n        if time >= mtime:\n            ans.append('YES')\n            jg = 1\n            break\n    if jg == 0:\n        ans.append('NO')\nfor i in ans:\n    print(i)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "for _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    for (x, y) in sorted(zip(map(int, input().split()), map(int, input().split()))):\n        if b > 0:\n            d = (y + a - 1) // a\n            if x * (d - 1) >= b:\n                break\n            b -= x * d\n            n -= 1\n        else:\n            break\n    print('YES' if n <= 0 else 'NO')", "for _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    ea = list(map(int, input().split()))\n    eh = list(map(int, input().split()))\n    for (x, y) in sorted(zip(ea, eh)):\n        b = b + -y // a * x\n    if b <= -x:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "from math import ceil\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (A, B, n) = map(int, input().split())\n        a = [int(x) for x in input().split()]\n        b = [int(x) for x in input().split()]\n        max_a = max(a)\n        truth = True\n        for i in range(n):\n            fights = ceil(b[i] / A)\n            B -= fights * a[i]\n            if B <= -max_a:\n                print('NO')\n                truth = False\n                break\n        if truth:\n            print('YES')\nmain()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (x, y) in sorted(zip(a, b)):\n        B = B + -y // A * x\n    if B <= -x:\n        print('NO')\n    else:\n        print('YES')", "x = int(input())\nfor i in range(x):\n    (A, B, n) = input().split()\n    A = int(A)\n    B = int(B)\n    a = [int(a) for a in input().split()]\n    b = [int(b) for b in input().split()]\n    dmg = 0\n    for j in range(len(b)):\n        num = (b[j] + A - 1) // A\n        dmg += num * a[j]\n    if B - dmg + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "x = int(input())\nfor i in range(x):\n    (A, B, n) = input().split()\n    A = int(A)\n    B = int(B)\n    a = [int(a) for a in input().split()]\n    b = [int(b) for b in input().split()]\n    dmg = 0\n    for j in range(len(b)):\n        num = (b[j] + A - 1) // A\n        dmg += num * a[j]\n    if B - dmg + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (x, y) in sorted(zip(a, b)):\n        B += -y // A * x\n    print('YNEOS'[B <= -x::2])", "for _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    s = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    for i in range(n):\n        if z[i] % a > 0:\n            b = b - (z[i] // a + 1) * s[i]\n        else:\n            b = b - z[i] // a * s[i]\n    if b + max(s) > 0:\n        print('YES')\n    else:\n        print('NO')", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (a, b, n) = map(int, input().split())\n    at = list(map(int, input().split()))\n    he = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(at[i] * ceil(he[i] / a))\n    s = sum(arr)\n    if s <= b:\n        print('YES')\n    else:\n        at.sort()\n        if s - at[-1] < b:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        c = b[i] // A + (b[i] % A > 0)\n        s += c * a[i]\n    if s - max(a) < B:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor pratyush in range(int(input())):\n    (c, d, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        d -= math.ceil(b[i] / c) * a[i]\n    if d + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "def doit():\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        B -= ((b[i] - 1) // A + 1) * a[i]\n    B += max(a)\n    print('YES' if B > 0 else 'NO')\nT = int(input())\nfor _ in range(T):\n    doit()", "from math import *\n\ndef solve():\n    (attack, health, n) = map(int, input().split())\n    bd_att = list(map(int, input().split()))\n    bd_hlt = list(map(int, input().split()))\n    for i in range(n):\n        mine = ceil(bd_hlt[i] / attack)\n        health -= mine * bd_att[i]\n    if health + max(bd_att) > 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nwhile t != 0:\n    res = solve()\n    print(res)\n    t -= 1", "for _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    m_a = list(map(int, input().split()))\n    m_b = list(map(int, input().split()))\n    d = 0\n    for y in range(n):\n        d += (m_b[y] + a - 1) // a * m_a[y]\n    if b - (d - max(m_a)) >= 1:\n        print('YES')\n    else:\n        print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (x, y) in sorted(zip(a, b)):\n        B = B + -y // A * x\n    if B <= -x:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mx = max(a)\n    s = 0\n    for i in range(n):\n        c = (b[i] + A - 1) // A\n        s += a[i] * c\n    if s - mx < B:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "t = int(input())\nfor l in range(t):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        c = (b[0] + A - 1) // A - 1\n        B -= a[0] * c\n        if B <= 0:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        x = max(a)\n        y = a.index(x)\n        for i in range(n):\n            if i != y:\n                c = (b[i] + A - 1) // A\n                B -= a[i] * c\n        c = (b[y] + A - 1) // A - 1\n        B -= a[y] * c\n        if B <= 0:\n            print('NO')\n        else:\n            print('YES')", "def solve():\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dame = 0\n    for i in range(n):\n        dame += (b[i] + A - 1) // A * a[i]\n    for i in range(n):\n        if B - (dame - a[i]) > 0:\n            print('YES')\n            return\n    print('NO')\n    return\nt = int(input())\nfor i in range(t):\n    solve()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    s = 0\n    for i in range(n):\n        s += (b[i] + A - 1) // A * a[i]\n    print('YES' if s - B < max(a) else 'NO')", "import math\nt = int(input())\nfor _ in range(t):\n    h = [int(x) for x in input().split()]\n    m_a = [int(x) for x in input().split()]\n    m_h = [int(x) for x in input().split()]\n    for i in range(h[2]):\n        atks = math.ceil(m_h[i] / h[0])\n        h[1] -= m_a[i] * atks\n    if h[1] + max(m_a) > 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        B -= math.ceil(b[i] / A) * a[i]\n    if B + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    h = 0\n    c = 0\n    for i in range(n):\n        h += (l2[i] + a - 1) // a * l[i]\n    for i in range(n):\n        if b - (h - l[i]) > 0:\n            c = 1\n    if c == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    j = 0\n    d = 0\n    while j < c:\n        s = y[j] // a\n        if y[j] % a != 0:\n            s += 1\n        d += x[j] * s\n        j += 1\n    if d - max(x) < b:\n        print('YES')\n    else:\n        print('NO')", "for i in ' ' * int(input()):\n    (p, h, n) = map(int, input().split())\n    p1 = list(map(int, input().split()))\n    h1 = list(map(int, input().split()))\n    req = 0\n    for j in range(n):\n        z = (h1[j] + p - 1) // p\n        req += p1[j] * z\n    if max(p1) + h - req > 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (hero_atk, hero_hp, monsters_num) = map(int, input().split())\n    mosters_atk = list(map(int, input().split()))\n    mosters_hp = list(map(int, input().split()))\n    max_atk = max(mosters_atk)\n    dmg = 0\n    for j in range(monsters_num):\n        atk_count = (mosters_hp[j] + hero_atk - 1) // hero_atk\n        dmg += atk_count * mosters_atk[j]\n    if dmg - max_atk < hero_hp:\n        print('YES')\n    else:\n        print('NO')", "from math import ceil\nfor _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    p = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        c = ceil(h[i] / a) * p[i]\n        s += c\n    if b - s + max(p) > 0:\n        print('YES')\n    else:\n        print('NO')", "N = int(input())\nfor n in range(N):\n    (attack, health, mNum) = [int(x) for x in input().split()]\n    monster = [[int(x)] for x in input().split()]\n    a = [int(x) for x in input().split()]\n    for i in range(mNum):\n        monster[i].append(a[i])\n    monster.sort()\n    for x in monster:\n        if x[1] % attack == 0:\n            health -= x[0] * (x[1] // attack)\n        else:\n            health -= x[0] * (x[1] // attack + 1)\n    if health > -monster[-1][0]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    ea = list(map(int, input().split()))\n    eh = list(map(int, input().split()))\n    for (x, y) in sorted(zip(ea, eh)):\n        b = b + -y // a * x\n    if b <= -x:\n        print('NO')\n    else:\n        print('YES')", "for x in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    m_a = list(map(int, input().split()))\n    m_b = list(map(int, input().split()))\n    d = 0\n    for y in range(n):\n        d += (m_b[y] + a - 1) // a * m_a[y]\n    if b - (d - max(m_a)) >= 1:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        B -= math.ceil(b[i] / A) * a[i]\n    if B + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (x, y) in sorted(zip(a, b)):\n        B = B + -y // A * x\n    if B <= -x:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (a, b, n) = R()\n    for (x, y) in sorted(zip(R(), R())):\n        b += -y // a * x\n    print('YNEOS'[b <= -x::2])", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    totalDamage = 0\n    flag = True\n    for i in range(n):\n        totalDamage += (b[i] + A - 1) // A * a[i]\n    for i in range(n):\n        if B - (totalDamage - a[i]) > 0:\n            print('YES')\n            flag = False\n            break\n    if flag:\n        print('NO')", "from collections import Counter, deque, defaultdict\nfrom math import *\nfrom bisect import bisect_right\nMOD = 1000000007\n\ndef solve():\n    (a, b, n) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = list(zip(l1, l2))\n    l.sort()\n    cur = 0\n    while b > 0 and cur < n - 1:\n        x = ceil(l[cur][1] / a)\n        b -= l[cur][0] * x\n        if b <= 0:\n            print('NO')\n            return\n        cur += 1\n    attack = l[n - 1][0]\n    health = l[n - 1][1]\n    x = ceil(health / a)\n    b -= attack * x\n    if b > 0:\n        print('YES')\n        return\n    b += attack\n    if b > 0:\n        print('YES')\n        return\n    print('NO')\nt = int(input())\nfor num in range(t):\n    solve()", "import math\nfor i in range(int(input())):\n    (c, d, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        d -= math.ceil(b[i] / c) * a[i]\n    if d + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\n\ndef solve():\n    (A, B, n) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    sm_b = sum(brr)\n    count = 0\n    for i in range(0, n):\n        count += ceil(brr[i] / A) * arr[i]\n    for i in range(0, n):\n        if B - count + arr[i] > 0:\n            print('YES')\n            return\n    print('NO')\n    return\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (x, y) in sorted(zip(a, b)):\n        B = B + -y // A * x\n    if B <= -x:\n        print('NO')\n    else:\n        print('YES')", "import math\nfor _t in range(int(input())):\n    (atk, hp, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = 0\n    y = 0\n    for i in range(n):\n        if y < a[i]:\n            y = a[i]\n        x += a[i] * math.ceil(b[i] / atk)\n    if x - y < hp:\n        print('YES')\n    else:\n        print('NO')", "for tt in range(int(input())):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    for i in range(n):\n        d += (b[i] + A - 1) // A * a[i]\n    for i in range(n):\n        if B - d + a[i] > 0:\n            print('YES')\n            break\n    else:\n        print('NO')", "def main():\n    t = int(input())\n    for i in range(t):\n        (A, B, n) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        for i in range(n):\n            B -= a[i] * ((b[i] + A - 1) // A)\n        for i in range(n):\n            h = B + a[i]\n            if h > 0:\n                print('YES')\n                break\n        if h <= 0:\n            print('NO')\nmain()", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (A, B, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        B = B - a[i] * ceil(b[i] / A)\n    if B + max(a) > 0:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b, n) = input().split()\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    plist = input().split()\n    hlist = input().split()\n    mainlist = list()\n    for i in range(0, int(n), 1):\n        templist = [int(plist[i]), int(hlist[i]), int(plist[i])]\n        mainlist.append(templist)\n    mainlist.sort(reverse=False)\n    for i in mainlist:\n        if b <= 0:\n            print('NO')\n            return\n        temp = int(i[1] / a)\n        if i[1] % a == 0:\n            temp = temp - 1\n        b = b - temp * i[2]\n        if b <= 0:\n            print('NO')\n            return\n        b = b - i[2]\n    print('YES')\n\ndef main():\n    t = int(input())\n    while t != 0:\n        solve()\n        t = t - 1\nmain()", "for t in range(int(input())):\n\n    def doit():\n        (A, B, n) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        for i in range(n):\n            B -= ((b[i] - 1) // A + 1) * a[i]\n        B += max(a)\n        print('YES' if B > 0 else 'NO')\n    doit()"]