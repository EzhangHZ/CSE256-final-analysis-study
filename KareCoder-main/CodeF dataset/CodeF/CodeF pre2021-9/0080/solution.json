["def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nx = int(input())\nfor j in range(x):\n    y = int(input())\n    print(int(100 / gcd(100, y)))", "import math\nfor i in range(int(input())):\n    k = int(input())\n    print(100 // math.gcd(k, 100))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    gcd = math.gcd(n, 100)\n    print(int(100 / gcd))", "from math import gcd as g\nfor i in range(int(input())):\n    print(100 // g(100, int(input())))", "def coprime(a, b):\n    if b == 0:\n        return (1, b)\n    if a % b == 0:\n        (a, b) = (a // b, 1)\n        return (a, b)\n    for i in range(b // 2 + 1, 1, -1):\n        if a % i == 0 and b % i == 0:\n            (a, b) = (a // i, b // i)\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    e = int(input())\n    w = 100 - e\n    print(sum(coprime(max(e, w), min(e, w))))", "import math\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    w = 100 - k\n    d = math.gcd(k, w)\n    w //= d\n    k //= d\n    print(k + w)", "import math\ng = math.gcd\nfor _ in range(int(input())):\n    n = int(input())\n    print(100 // g(n, 100))", "from collections import Counter, deque\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    k = int(input())\n    gcd = math.gcd(k, 100)\n    if gcd == 1:\n        return 100\n    else:\n        return 100 // gcd\nfor _ in range(int(input())):\n    print(solve())", "import math\nt = int(input())\nstep = 0\ne = 0\nw = 0\nfor i in range(t):\n    k = int(input())\n    x = math.gcd(k, 100 - k)\n    print(k // x + (100 - k) // x)", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    print(100 // gcd(x, 100))", "for t in range(int(input())):\n    k = int(input())\n    r = 1\n    while k * r % 100 != 0:\n        r += 1\n    print(r)", "import math\nt = int(input())\nfor i in range(t):\n    print(100 // math.gcd(int(input()), 100))", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(100 // gcd(100, n))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = eval(input())\nwhile t:\n    t -= 1\n    k = eval(input())\n    g = gcd(100, k)\n    c = 100 / g\n    print('%d' % c)", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    c = 100\n    for j in range(100, 1, -1):\n        if b % j == 0 and c % j == 0:\n            b = b // j\n            c = c // j\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(100 // math.gcd(100, n))", "for i in range(int(input())):\n    k = int(input())\n    if 100 % k == 0:\n        print(100 // k)\n    else:\n        for j in range(k - 1, 0, -1):\n            if 100 % j == 0 and k % j == 0:\n                print(100 // j)\n                break", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    k = int(input())\n    for i in range(1, k + 1):\n        if 100 * i % k == 0:\n            return 100 * i // k\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    f = [100, 50, 25, 20, 10, 5, 4, 2, 1]\n    for i in range(9):\n        if k % f[i] == 0:\n            break\n    print(int(100 / f[i]))", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    r = int(input())\n    print(100 // gcd(100, r))", "import math\nfor i in range(int(input())):\n    k = int(input())\n    print(100 // math.gcd(100, k))", "def com_div(m, n):\n    if m >= n:\n        (large, small) = (m, n)\n    else:\n        (large, small) = (n, m)\n    large_divs = []\n    for i in range(1, 101):\n        if large % i == 0:\n            large_divs.append(i)\n    for i in range(len(large_divs)):\n        a = large_divs[-i - 1]\n        if small % a == 0:\n            return a\n    return 1\n\ndef potion(k):\n    s = 100 // com_div(k, 100)\n    return s\n\ndef test_case(t):\n    input_list = []\n    for i in range(t):\n        input_list.append(int(input()))\n    for i in range(t):\n        print(potion(input_list[i]))\nt = int(input())\ntest_case(t)", "def gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    k = int(input())\n    x = 100 - k\n    ans = k / gcd(k, x) + x / gcd(k, x)\n    print(int(ans))\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    if k == 100:\n        print(1)\n        continue\n    res = 2\n    while k % (100 / res) != 0:\n        res += 1\n    print(res)", "import math\nt = int(input())\nfor i in range(0, t, 1):\n    n = int(input())\n    if n == 100:\n        print(1)\n    else:\n        l = math.gcd(n, 100 - n)\n        c1 = n // l\n        c2 = (100 - n) // l\n        print(c1 + c2)", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    if a == 100:\n        print('1')\n    else:\n        b = 100 - a\n        for i in range(min(b, a), 0, -1):\n            if b % i == 0 and a % i == 0:\n                print(int(b / i + a / i))\n                break", "for _ in range(int(input())):\n    k = int(input())\n    ans = 100\n    while ans % k != 0:\n        ans += 100\n    print(ans // k)", "def NOD(x, y):\n    for i in range(min(x, y), 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n            break\ngigka = int(input())\nfor kumar in range(gigka):\n    k = int(input())\n    print(100 // NOD(100, k))", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\nfrom math import gcd\n\ndef main():\n    t = get_int()\n    for i in range(t):\n        k = get_int()\n        if gcd(100, k) > 1:\n            print(100 // gcd(100, k))\n        elif k == 0:\n            print(0)\n        else:\n            print(100)\nmain()", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    import math\n    d = math.gcd(x, 100)\n    m = 100 / d\n    print(int(m))", "import math\nt = int(input())\nx = 0\nfor x in range(t):\n    k = int(input())\n    w = 100 - k\n    d = math.gcd(k, w)\n    while d > 1:\n        k = k // d\n        w = w // d\n        d = math.gcd(k, w)\n    print(k + w)", "for s in [*open(0)][1:]:\n    r = 1\n    while int(s) * r % 100:\n        r += 1\n    print(r)", "def GCF(x, y):\n    while x % y != 0:\n        z = x % y\n        x = y\n        y = z\n    return y\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    print(int(100 / int(GCF(n, 100))))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    m = 100 - n\n    g = math.gcd(m, n)\n    print(int(n / g + m / g))", "from math import gcd\n\ndef func():\n    t = int(input())\n    for _ in range(t):\n        k = int(input())\n        print(100 // gcd(k, 100))\nfunc()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    gcd = math.gcd(n, 100)\n    print(int(100 / gcd))", "my_value = []\nfor i in range(int(input())):\n    n = int(input())\n    b = 100\n    while n != b:\n        if b > n:\n            b = b - n\n        else:\n            n = n - b\n    my_value.append(100 // b)\nfor i in my_value:\n    print(i)", "import math\nt = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    d = 100 - n\n    d = d // math.gcd(100, d)\n    n = n // math.gcd(100, n)\n    print(d + n)", "w = int(input())\nfor i in range(w):\n    k = int(input())\n    i = 1\n    while i * 100 % k != 0:\n        i += 1\n    print(i * 100 // k)", "from math import gcd\nfor _ in range(int(input())):\n    k = int(input())\n    g = gcd(k, 100 - k)\n    print(k // g + (100 - k) // g)", "from math import gcd\nfor kdj in range(int(input())):\n    k = int(input())\n    g = gcd(k, 100 - k)\n    print(int(k / g + (100 - k) / g))", "import math\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = int(k / math.gcd(k, 100 - k))\n    b = int((100 - k) / math.gcd(k, 100 - k))\n    print(a + b)", "from math import gcd\nfor _ in range(int(input())):\n    print(100 // gcd(100, int(input())))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(100 // math.gcd(n, 100))", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    n = 100\n    a = 2\n    while a < 50:\n        while k % a == 0 and n % a == 0:\n            k //= a\n            n //= a\n        a += 1\n    print(n)", "for _ in range(int(input())):\n    n = int(input())\n    m = 100\n    while m:\n        (n, m) = (m, n % m)\n    print(100 // n)", "def gcd(a, b):\n    if a < b:\n        smaller = a\n    elif b < a:\n        smaller = b\n    for i in range(1, smaller + 1):\n        if a % i == 0 and b % i == 0:\n            hcf = i\n    return hcf\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    if x == 100:\n        print(1)\n    else:\n        y = gcd(x, 100)\n        print(100 // y)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    sad = 100\n    for j in range(100, 1, -1):\n        if x % j == 0 and sad % j == 0:\n            x //= j\n            sad //= j\n    print(sad)", "t = int(input())\nprinting = []\nfor i in range(t):\n    percentage = int(input())\n    base = 100\n    for number in range(100, 1, -1):\n        if percentage % number == 0 and base % number == 0:\n            percentage //= number\n            base //= number\n    printing.append(base)\nfor number in printing:\n    print(number)", "for case in range(int(input())):\n    k = int(input())\n    for i in range(max(k, 100 - k), 0, -1):\n        if k % i == 0 and (100 - k) % i == 0:\n            print(100 // i)\n            break", "try:\n    import math\n    for _ in range(int(input())):\n        k = int(input())\n        p = math.gcd(100, k)\n        print(100 // p)\nexcept EOFError:\n    print(' ')", "t = int(input())\nfor case in range(1, t + 1):\n    k = int(input())\n    gcd = 1\n    denom = [2, 5]\n    (tmp1, tmp2) = (k, 100 - k)\n    while denom:\n        if tmp1 % denom[0] == tmp2 % denom[0] == 0:\n            gcd *= denom[0]\n            tmp1 /= denom[0]\n            tmp2 /= denom[0]\n        else:\n            denom.pop(0)\n    ans = tmp1 + tmp2\n    print(int(ans))", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    m = 100 - k\n    a = math.gcd(k, m)\n    print(k // a + m // a)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solve():\n    k = int(input())\n    g = gcd(100 - k, k)\n    return int(100 / g)\nfor _ in range(int(input().strip())):\n    print(solve())", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    rem = gcd(n, 100)\n    print(100 // rem)", "def gcd(x, y):\n    if x % y == 0:\n        return y\n    else:\n        return gcd(y, x % y)\nfor _ in range(int(input())):\n    n = int(input())\n    print(100 // gcd(n, 100))", "def solveq1():\n\n    def euclidean(a, b):\n        if a == 0:\n            return b\n        return euclidean(b % a, a)\n    k = int(input())\n    gcd = euclidean(k, 100 - k)\n    print(int(100 / gcd))\nfor tc in range(int(input())):\n    solveq1()", "from math import gcd\n\ndef answer(x, y):\n    d = gcd(x, y)\n    x = x // d\n    y = y // d\n    print(x + y)\nt = int(input())\nfor w in range(t):\n    p = int(input())\n    q = 100 - p\n    answer(p, q)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    m = 100 - k\n    res = 0\n    if m == 0 or k == 0:\n        res += 1\n    else:\n        g = gcd(k, m)\n        res += m // g\n        res += k // g\n    print(res)", "import math\na = int(input())\ni = 0\nwhile i < a:\n    b = int(input())\n    c = 100 - b\n    r = math.gcd(b, c)\n    b = b // r\n    c = c // r\n    print(c + b)\n    i = i + 1", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    x = math.gcd(k, 100)\n    print(100 // x)", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    hcf = math.gcd(k, 100)\n    num2 = 100 // hcf\n    print(num2)", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nN = 20005\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    (x, y) = (min(n, 100 - n), max(n, 100 - n))\n    if y == 100:\n        print(1)\n        continue\n    g = gcd(x, y)\n    ans = (x + y) // g\n    print(ans)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    if n == 100:\n        print(1)\n    else:\n        (x, y) = (n, 100 - n)\n        d = gcd(x, y)\n        x = x // d\n        y = y // d\n        print(x + y)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    if n == 100:\n        print(1)\n    else:\n        (x, y) = (n, 100 - n)\n        d = gcd(x, y)\n        x = x // d\n        y = y // d\n        print(x + y)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = 100 - n\n    if n == 100:\n        print(1)\n    else:\n        k = math.gcd(n, 100 - n)\n        if k != 1:\n            a = a // k\n            n = n // k\n        print(a + n)", "import math\nt = int(input())\nfor _ in range(t):\n    i = int(input())\n    if 100 % i == 0:\n        print(100 // i)\n    else:\n        d = math.gcd(i, 100 - i)\n        print(i // d + (100 - i) // d)", "def get_gcd(a, b):\n    while b:\n        a = a % b\n        (a, b) = (b, a)\n    return a\n\ndef func():\n    p = int(input())\n    w = 100 - p\n    g = get_gcd(p, w)\n    r = p // g + w // g\n    print(r)\nt = int(input())\nfor _ in range(t):\n    func()", "number = int(input())\n\ndef gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(number):\n    x = int(input())\n    print(int(100 / gcd(x, 100)))", "import math\nfor _ in range(int(input())):\n    print(100 // math.gcd(int(input()), 100))", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    l = 100 - k\n    a = math.gcd(k, l)\n    c1 = k // a\n    c2 = l // a\n    print(c1 + c2)", "from sys import stdin\ninput = stdin.readline\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\nfor _ in range(int(input())):\n    k = int(input())\n    if gcd(k, 100 - k) == 1:\n        print(100)\n    else:\n        g = gcd(k, 100 - k)\n        h = (100 - k) // g\n        k = k // g\n        print(k + h)", "def MaxCommDivisor(p, q):\n    temp = p % q\n    while temp != 0:\n        p = q\n        q = temp\n        temp = p % q\n    return q\nt = int(input())\nfor i in range(0, t):\n    x = int(input())\n    y = MaxCommDivisor(x, 100)\n    s = 100 // y\n    print(s)", "import math\n\ndef solve():\n    n = int(input())\n    a = n\n    b = 100 - n\n    while 1:\n        g = math.gcd(a, b)\n        if g == 1:\n            print(a + b)\n            return\n        else:\n            a = a // g\n            b = b // g\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    if 100 / n == int(100 / n):\n        print(100 // n)\n    else:\n        print(100 // gcd(100, n))", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    a = int(input())\n    b = 100 - a\n    k = gcd(a, b)\n    print(int(100 / k))", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    for j in range(1, 100):\n        e = j\n        w = e * 100 / a - e\n        if w.is_integer():\n            break\n    print(int(e + w))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    s = 100\n    if 100 % n == 0:\n        print(100 // n)\n    else:\n        while n % 2 == 0 and s % 2 == 0:\n            n = n // 2\n            s = s // 2\n        while n % 5 == 0 and s % 5 == 0:\n            n = n // 5\n            s = s // 5\n        print(s)", "t = int(input())\nfor i in range(0, t):\n    es = int(input())\n    if es in [100]:\n        print(1)\n        continue\n    water = 100 - es\n    if es > water and es % water == 0:\n        print(1 + es // water)\n        continue\n    if es <= water and water % es == 0:\n        print(1 + water // es)\n        continue\n    num = min(water, es)\n    for i in range(2, num):\n        while es % i == 0 and water % i == 0:\n            es = es // i\n            water = water // i\n    print(es + water)", "def hcfnaive(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcfnaive(b, a % b)\nfor i in range(int(input())):\n    n = int(input())\n    a = hcfnaive(100, n)\n    if 100 % a == 0:\n        print(100 // a)\n    else:\n        print(100)", "for i in range(int(input())):\n    n = int(input())\n    (a, b, ans) = (1, 0, 1)\n    while a * 100 / (a + b) != n:\n        if a * 100 / (a + b) < n:\n            a += 1\n        else:\n            b += 1\n        ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    a = k\n    b = 100\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    r = a + b\n    print(100 // r)", "import math\ns = []\nfor i in range(int(input())):\n    k = int(input())\n    if math.gcd(k, 100) == 1:\n        s.append(100)\n    else:\n        s.append(100 // math.gcd(100, k))\nfor i in range(len(s)):\n    print(s[i])", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = 1\n    for _ in range(2):\n        if k % 2 == 0:\n            k /= 2\n            a *= 2\n    for _ in range(2):\n        if k % 5 == 0:\n            k /= 5\n            a *= 5\n    if a == 1:\n        print(100)\n    elif a % 100 == 0:\n        print(1)\n    elif a % 50 == 0:\n        print(2)\n    elif a % 25 == 0:\n        print(4)\n    elif a % 20 == 0:\n        print(5)\n    elif a % 10 == 0:\n        print(10)\n    elif a % 5 == 0:\n        print(20)\n    elif a % 4 == 0:\n        print(25)\n    elif a % 2 == 0:\n        print(50)\n    elif a % 1 == 0:\n        print(100)", "import sys\nimport math\n\ndef scan(input_type='int'):\n    if input_type == 'int':\n        return list(map(int, sys.stdin.readline().strip().split()))\n    else:\n        return list(map(str, sys.stdin.readline().strip()))\n\ndef solution():\n    for _ in range(int(input())):\n        k = int(input())\n        if k == 1:\n            print(100)\n        else:\n            b = 100\n            for i in range(2, 101):\n                while b % i == 0 and k % i == 0:\n                    b = b // i\n                    k = k // i\n            print(b)\nsolution()", "from math import gcd\nn = int(input())\n\ndef steps(k):\n    return int(100 / gcd(k, 100 - k))\nfor i in range(n):\n    print(steps(int(input())))", "t = int(input())\nk = []\nfor i in range(t):\n    k.append(int(input()))\nans = []\nfor i in range(t):\n    p = k[i]\n    w = 100 - k[i]\n    if p == 0 or p == 100:\n        ans.append(1)\n        continue\n    while True:\n        divFound = False\n        for d in range(min(p, w), 1, -1):\n            rp = p % d\n            rw = w % d\n            if rp == 0 and rw == 0:\n                p = p // d\n                w = w // d\n                divFound = True\n                break\n        if not divFound:\n            break\n    ans.append(p + w)\nfor a in ans:\n    print(a)", "import math\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    if math.gcd(k, 100 - k) == 1:\n        print(100)\n    elif k == 1:\n        print(100)\n    elif k == 100:\n        print(1)\n    else:\n        print(100 // math.gcd(k, 100))", "import math\nfor _ in range(int(input())):\n    p = int(input())\n    mk = 101\n    for w in range(1, 100):\n        ew = 100 * w / p\n        if ew.is_integer():\n            mk = min(mk, ew)\n    print(int(mk))", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 100:\n        print(1)\n        continue\n    m = 100 - n\n    g = int(gcd(m, n))\n    n = n // g\n    m = m // g\n    print(m + n)", "from math import gcd\nfor _ in range(int(input())):\n    k = int(input())\n    w = (100 - k) // gcd(100 - k, k)\n    e = k // gcd(100 - k, k)\n    print(w + e)", "t = int(input())\nfor task in range(t):\n    k = int(input())\n    i = 2\n    res = 100\n    while i <= k:\n        if k % i == 0:\n            k //= i\n            if res % i == 0:\n                res //= i\n        else:\n            i += 1\n    print(res)", "import math\ntest = int(input())\nfor t in range(test):\n    k = int(input())\n    if 100 % k == 0:\n        print(100 // k)\n    else:\n        (e, w) = (k, 100 - k)\n        gcd = math.gcd(e, w)\n        res = e // gcd + w // gcd\n        print(res)", "T = int(input())\nfor t in range(T):\n    k = int(input())\n    (count, e, w, ep) = (0, 0, 0, 0)\n    while ep != k:\n        count += 1\n        if ep < k:\n            e += 1\n        else:\n            w += 1\n        ep = e * 100 / (e + w)\n    print(count)", "t = int(input())\nk = []\nfor i in range(t):\n    m = int(input())\n    k.append(m)\nsteps = []\nfor i in range(t):\n    magic = k[i]\n    water = 100 - k[i]\n    if magic == 0:\n        water = 1\n    elif water == 0:\n        magic = 1\n    elif magic < water:\n        for j in range(magic, 1, -1):\n            if magic % j == 0 and water % j == 0:\n                magic = magic // j\n                water = water // j\n    else:\n        for j in range(water, 1, -1):\n            if magic % j == 0 and water % j == 0:\n                magic = magic // j\n                water = water // j\n    s = magic + water\n    steps.append(s)\n    print(steps[i])", "GLOBALZ = []\n\ndef divisors(n):\n    i = 2\n    li = []\n    while i <= n:\n        if n % i == 0:\n            li.append(i)\n        i += 1\n    return li\n\ndef check(k, w):\n    if (k == 0 or w == 0) and len(GLOBALZ) == 0:\n        print(1)\n        GLOBALZ.append(1)\n        return\n    small = min([k, w])\n    big = max([k, w])\n    res = []\n    res = divisors(small)\n    res[::-1]\n    if len(res) == 0:\n        if len(GLOBALZ) == 0:\n            print(small + big)\n            GLOBALZ.append(1)\n            return\n    for ele in res:\n        if big % ele == 0:\n            big = big // ele\n            small = small // ele\n            check(big, small)\n            return\n    if len(GLOBALZ) == 0:\n        print(small + big)\n    return\nt = int(input())\nfor _ in range(t):\n    GLOBALZ = []\n    k = int(input())\n    w = 100 - k\n    check(k, w)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    e = 0\n    w = 0\n    p = 0\n    cnt = 0\n    while p != k:\n        if p < k:\n            e += 1\n        else:\n            w += 1\n        p = e * 100 / (e + w)\n        cnt += 1\n    print(cnt)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    print(100 // gcd(n, 100 - n))", "i = int(input())\nfor i in range(0, i):\n    e = int(input())\n    w = 100 - e\n    if e == 100 or e == 0:\n        print(1)\n    elif e == 50:\n        print(2)\n    elif e == 25 or e == 75:\n        print(4)\n    elif e > w:\n        if e % w == 0:\n            e //= w\n            w //= w\n            print(e + w)\n        else:\n            for b in range(e, 1, -1):\n                if e % b == 0 and w % b == 0:\n                    e //= b\n                    w //= b\n            print(e + w)\n    elif e < w:\n        if w % e == 0:\n            w //= e\n            e //= e\n            print(e + w)\n        else:\n            for b in range(e, 1, -1):\n                if e % b == 0 and w % b == 0:\n                    e //= b\n                    w //= b\n            print(e + w)\n    w = 0", "def hcf(num1, num2):\n    a = num1\n    b = num2\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    h = hcf(100, n)\n    print(100 // h)"]