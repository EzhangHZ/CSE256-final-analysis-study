["def resolve():\n\n    def search(a, k):\n        if a == [k]:\n            print('yes')\n            return\n        if not k in a:\n            print('no')\n            return\n        n = len(a)\n        for (index, i) in enumerate(a):\n            if i >= k:\n                if index > 1:\n                    if a[index - 2] >= k:\n                        print('yes')\n                        return\n                if index > 0:\n                    if a[index - 1] >= k:\n                        print('yes')\n                        return\n                if index < n - 2:\n                    if a[index + 2] >= k:\n                        print('yes')\n                        return\n                if index < n - 1:\n                    if a[index + 1] >= k:\n                        print('yes')\n                        return\n        print('no')\n        return\n    import sys\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        search(a, k)\nresolve()", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        if a[0] == k:\n            print('yes')\n        else:\n            print('no')\n        return\n    if k not in a:\n        print('no')\n        return\n    flag = 0\n    for i in range(n):\n        if a[i] > k:\n            a[i] = k\n    for i in range(n - 1):\n        if min(a[i], a[i + 1]) == k:\n            flag = 1\n    for i in range(n - 2):\n        x = [a[i], a[i + 1], a[i + 2]]\n        x.sort()\n        if x[1] == k:\n            flag = 1\n    if flag:\n        print('yes')\n    else:\n        print('no')\nfor _ in range(int(input())):\n    solve()", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        if a[0] == k:\n            print('yes')\n        else:\n            print('no')\n        return\n    if k not in a:\n        print('no')\n        return\n    flag = 0\n    for i in range(n):\n        if a[i] > k:\n            a[i] = k\n    for i in range(n - 1):\n        if min(a[i], a[i + 1]) == k:\n            flag = 1\n    for i in range(n - 2):\n        x = [a[i], a[i + 1], a[i + 2]]\n        x.sort()\n        if x[1] == k:\n            flag = 1\n    if flag:\n        print('yes')\n    else:\n        print('no')\nfor _ in range(int(input())):\n    solve()", "import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n    f = iter(open('D.txt').readlines())\n\n    def input():\n        return next(f)\nelse:\n    input = sys.stdin.readline\n\ndef go(n, k, A):\n    if k not in A:\n        return 'no'\n    if all([i == k for i in A]):\n        return 'yes'\n    minf = -2000000000.0\n    positions = [n for (n, a) in enumerate(A) if a >= k]\n    m = min(list(map(lambda x: x[0] - x[1], zip(positions[1:], positions))) + [3])\n    if m <= 2:\n        return 'yes'\n    else:\n        return 'no'\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(go(n, k, A))", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        (n, k) = map(int, input().split())\n        ara = [int(x) for x in input().split()]\n        ara.append(-1)\n        isK = False\n        for num in ara:\n            if num == k:\n                isK = True\n                break\n        if n == 1:\n            interval = True\n        else:\n            interval = False\n        for idx in range(0, n - 1):\n            if ara[idx] >= k:\n                if ara[idx + 1] >= k or ara[idx + 2] >= k:\n                    interval = True\n                    break\n        if isK and interval:\n            print('yes')\n        else:\n            print('no')\nmain()", "import sys\nfrom collections import deque\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, k) = nm()\n    l = nl()\n    if min(l) == max(l) == k:\n        print('yes')\n        return\n    if k not in l:\n        print('no')\n        return\n    l = [x >= k for x in l] + [0, 0]\n    print('yes' if max((sum(l[i:i + 3]) for i in range(n))) > 1 else 'no')\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nfrom collections import deque\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, k) = nm()\n    l = nl()\n    if min(l) == max(l) == k:\n        print('yes')\n        return\n    if k not in l:\n        print('no')\n        return\n    l = [x >= k for x in l] + [0, 0]\n    print('yes' if max((sum(l[i:i + 3]) for i in range(n))) > 1 else 'no')\nT = ni()\nfor _ in range(T):\n    solve()", "t = int(input())\nout = []\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    sign = False\n    if k not in arr:\n        out.append('no')\n    elif n == 1 and arr[0] == k:\n        out.append('yes')\n    elif n == 1 and arr[0] != k:\n        out.append('no')\n    else:\n        for j in range(n):\n            if arr[j] >= k and j > 0:\n                if arr[j - 1] >= k:\n                    sign = True\n                if arr[j - 2] >= k and j > 1:\n                    sign = True\n        if sign:\n            out.append('yes')\n        else:\n            out.append('no')\nfor m in out:\n    print(m)", "tt = int(input())\nfor ts in range(tt):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ok = n == 1 and a[0] == k\n    if k in a:\n        for i in range(n - 1):\n            ok |= a[i] >= k and (a[i + 1] >= k or (i < n - 2 and a[i + 2] >= k))\n    print('yes' if ok else 'no')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    has = False\n    prop = n == 1\n    for i in range(n):\n        if a[i] == k:\n            has = True\n        if a[i] >= k and i > 0:\n            if a[i - 1] >= k:\n                prop = True\n            if i > 1 and a[i - 2] >= k:\n                prop = True\n    print('yes' if has and prop else 'no')", "tt = int(input())\nfor ts in range(tt):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ok = n == 1 and a[0] == k\n    if k in a:\n        for i in range(n - 1):\n            ok |= a[i] >= k and (a[i + 1] >= k or (i < n - 2 and a[i + 2] >= k))\n    print('yes' if ok else 'no')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if k not in l:\n        print('no')\n    elif n == 1:\n        print('yes')\n    elif any((u >= k <= v for (u, v) in zip(l, l[1:]))):\n        print('yes')\n    elif any((u >= k <= v for (u, v) in zip(l, l[2:]))):\n        print('yes')\n    else:\n        print('no')", "import sys\nimport math\nt = int(input())\nfor i in range(t):\n    tt = input().split(' ')\n    n = int(tt[0])\n    k = int(tt[1])\n    a = input().split(' ')\n    a = [int(aa) for aa in a]\n    if k not in a:\n        print('no')\n        continue\n    flag = 0\n    count = 0\n    if n == 1 and a[0] == k:\n        print('yes')\n        continue\n    for j in a:\n        if j >= k:\n            if count > 0:\n                flag = 1\n                break\n            count = 2\n        else:\n            count -= 1\n    if flag == 1:\n        print('yes')\n    else:\n        print('no')", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        if k not in a:\n            print('no')\n            continue\n        if n == 1:\n            print('yes')\n            continue\n        bl = False\n        for i in range(n):\n            if a[i] < k:\n                continue\n            for j in range(i + 1, min(i + 3, n)):\n                if a[j] >= k:\n                    bl = True\n        print('yes' if bl else 'no')\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k not in a:\n        print('no')\n        continue\n    if n < 3:\n        if n == 1:\n            print('yes')\n        elif a[0] >= k and a[1] >= k:\n            print('yes')\n        else:\n            print('no')\n        continue\n    f = 0\n    for i in range(n - 2):\n        if a[i] >= k and (a[i + 1] >= k or a[i + 2] >= k):\n            f = 1\n    if not f:\n        if a[-1] >= k and a[-2] >= k:\n            f = 1\n    print('nyoe s'[f::2])", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        if k in a:\n            flag = 1\n            for (idx, i) in enumerate(a):\n                if idx < n - 1:\n                    if i >= k and a[idx + 1] >= k:\n                        print('yes')\n                        flag = 0\n                        break\n                if idx < n - 2:\n                    if i >= k and a[idx + 2] >= k:\n                        print('yes')\n                        flag = 0\n                        break\n            if flag:\n                print('no' if n > 1 else 'yes')\n        else:\n            print('no')\n    return\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k not in arr:\n        print('no')\n        continue\n    else:\n        flag = False\n        if n == 1:\n            print('yes')\n            continue\n        sum_cnt = 0\n        segment_l = 0\n        for j in arr:\n            if j < k:\n                sum_cnt -= 1\n            else:\n                sum_cnt += 1\n            segment_l += 1\n            if sum_cnt > 0 and segment_l > 1:\n                print('yes')\n                flag = True\n                break\n            if j >= k:\n                sum_cnt = 1\n                segment_l = 1\n        if not flag:\n            print('no')", "def solve():\n    (n, k) = [int(x) for x in input().split()]\n    li = [int(x) for x in input().split()]\n    if n == 1 and li[0] == k:\n        print('yes')\n        return\n    elif n == 1 and li[0] != k:\n        print('no')\n        return\n    for i in range(n):\n        if li[i] == k:\n            break\n    else:\n        print('no')\n        return\n    for i in range(n - 1):\n        if li[i] >= k:\n            if li[i + 1] >= k:\n                print('yes')\n                return\n            if i < n - 2 and li[i + 2] >= k:\n                print('yes')\n                return\n    else:\n        print('no')\n        return\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\n\ndef go(a, k):\n    if k not in a:\n        return 'no'\n    if len(a) == 1:\n        return 'yes'\n    if len(a) == 2 and sum(a) >= 2 * k:\n        return 'yes'\n    for (a1, a2, a3) in zip(a, a[1:], a[2:]):\n        if (a1 >= k) + (a2 >= k) + (a3 >= k) > 1:\n            return 'yes'\n    return 'no'\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(a) == 1 and a[0] == k:\n        print('yes')\n    else:\n        print(go(a, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == 1 and k == l[0]:\n        print('yes')\n        continue\n    elif n == 1:\n        print('no')\n        continue\n    v = []\n    f = 0\n    for t in range(n):\n        if l[t] == k:\n            f = 1\n        if l[t] >= k:\n            v.append(t + 1)\n    if not f:\n        print('no')\n    else:\n        f = 0\n        for t in range(1, len(v)):\n            if v[t] - v[t - 1] <= 2:\n                f = 1\n        print('yes' if f else 'no')", "def orac(n, arr, k):\n    if n == 1 and arr[0] == k:\n        return 'yes'\n    if n == 1 and arr[0] != k:\n        return 'no'\n    c = 0\n    d = 0\n    for i in arr:\n        if i == k:\n            c = 1\n            break\n    if c == 1:\n        for i in range(n - 1):\n            if min(arr[i], arr[i + 1]) >= k:\n                d = 1\n                break\n        for i in range(n - 2):\n            l = [arr[i], arr[i + 1], arr[i + 2]]\n            l.sort()\n            if min(l[1], l[2]) >= k:\n                d = 1\n                break\n    else:\n        return 'no'\n    if d == 1:\n        return 'yes'\n    return 'no'\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(orac(n, arr, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k not in a:\n        print('no')\n        continue\n    if len(a) == 1:\n        print('yes')\n        continue\n    f = 0\n    for i in range(n - 2):\n        if a[i] >= k and (a[i + 1] >= k or a[i + 2] >= k):\n            print('yes')\n            f = 1\n            break\n    if f:\n        continue\n    if a[-1] >= k and a[-2] >= k:\n        print('yes')\n        continue\n    print('no')", "def check_gk(A, k):\n    N = len(A)\n    for i in range(N - 1):\n        if A[i] >= k and A[i + 1] >= k:\n            return True\n    for i in range(N - 2):\n        if A[i] >= k and A[i + 2] >= k:\n            return True\n    return False\n\ndef answer(b):\n    if b:\n        print('yes')\n    else:\n        print('no')\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split(' ')\n    (n, k) = (int(n), int(k))\n    A = list(map(int, input().split(' ')))\n    if n <= 1:\n        answer(k in A)\n    else:\n        answer(k in A and check_gk(A, k))", "t = int(input())\nfor u in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k not in a:\n        print('no')\n        continue\n    if n == 1:\n        print('yes')\n        continue\n    if n == 2:\n        if (a[0] + a[1]) / 2 >= k:\n            print('yes')\n            continue\n    x = y = z = 0\n    ok = 0\n    for i in range(n):\n        if a[i] > k:\n            x += 1\n        elif a[i] < k:\n            y += 1\n        else:\n            z += 1\n        if i >= 3:\n            if a[i - 3] > k:\n                x -= 1\n            elif a[i - 3] < k:\n                y -= 1\n            else:\n                z -= 1\n        if i >= 2:\n            if y >= 2:\n                continue\n            ok = 1\n            print('yes')\n            break\n    if not ok:\n        print('no')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if a == [k]:\n        print('yes')\n    elif k not in a:\n        print('no')\n    elif any((u >= k <= v for (u, v) in zip(a, a[1:]))):\n        print('yes')\n    elif any((u >= k <= v for (u, v) in zip(a, a[2:]))):\n        print('yes')\n    else:\n        print('no')", "import bisect\nimport os\nfrom collections import Counter\nimport bisect\nfrom collections import defaultdict\nimport math\nimport random\nimport heapq as hq\nfrom math import sqrt\nimport sys\nfrom functools import reduce, cmp_to_key\nfrom collections import deque\nimport threading\nfrom itertools import combinations\nfrom io import BytesIO, IOBase\nfrom itertools import accumulate\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef sort_dict(key_value):\n    return sorted(key_value.items(), key=lambda kv: (kv[1], kv[0]))\n\ndef list_input():\n    return list(map(int, input().split()))\n\ndef num_input():\n    return map(int, input().split())\n\ndef string_list():\n    return list(input())\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef binaryToDecimal(n):\n    return int(n, 2)\n\ndef solve():\n    (n, k) = num_input()\n    arr = list_input()\n    temp = []\n    if not k in arr:\n        print('no')\n        return\n    if n == 1:\n        print('yes')\n        return\n    for i in range(n - 2):\n        if arr[i] >= k and (arr[i + 1] >= k or arr[i + 2] >= k):\n            print('yes')\n            return\n    if arr[-2] >= k and arr[-1] >= k:\n        print('yes')\n        return\n    print('no')\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.append(0)\n    l.append(0)\n    flag = 0\n    if k not in l:\n        print('no')\n    elif n == 1:\n        if l[0] != k:\n            print('no')\n        else:\n            print('yes')\n    else:\n        for i in range(n):\n            if l[i] >= k:\n                if l[i + 1] >= k or l[i + 2] >= k:\n                    flag = 1\n        if flag == 1:\n            print('yes')\n        else:\n            print('no')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if a.count(k) == n:\n        print('yes')\n        continue\n    if k not in a:\n        print('no')\n        continue\n    l = []\n    for t in a:\n        if t >= k:\n            l.append(1)\n        else:\n            l.append(0)\n    q = False\n    for i in range(n):\n        if l[i]:\n            if l[i - 1] and i:\n                q = True\n            if l[i - 2] and i > 1:\n                q = True\n    print('yes' if q else 'no')", "def go(a, k):\n    if k not in a:\n        return 'no'\n    if len(a) == 1:\n        return 'yes'\n    if len(a) == 2 and sum(a) >= 2 * k:\n        return 'yes'\n    for (a1, a2, a3) in zip(a, a[1:], a[2:]):\n        if (a1 >= k) + (a2 >= k) + (a3 >= k) > 1:\n            return 'yes'\n    return 'no'\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('yes') if len(a) == 1 and a[0] == k else print(go(a, k))", "import math\nfrom math import gcd\n\ndef r():\n    return map(int, input().split())\n\ndef l():\n    return list(map(int, input().split()))\n\ndef i():\n    return int(input())\n\ndef si():\n    return input()\n\ndef pYes():\n    print('YES')\n\ndef pNo():\n    print('NO')\n\ndef plist(l):\n    print(''.join(l))\nt = int(input())\nfor i in range(t):\n    (n, k) = r()\n    a = l()\n    f = False\n    for i in range(1, n):\n        if a[i] >= k and a[i - 1] >= k:\n            f = True\n            break\n        if a[i] >= k and a[i - 2] >= k and (i >= 2):\n            f = True\n            break\n    if k not in a:\n        f = False\n    if n == 1 and a[0] == k:\n        f = True\n    if f:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    flag = False\n    for i in range(1, n):\n        if ar[i] >= k and ar[i - 1] >= k:\n            flag = True\n            break\n        if ar[i] >= k and ar[i - 2] >= k and (i >= 2):\n            flag = True\n            break\n    if k not in ar:\n        flag = False\n    if n == 1 and ar[0] == k:\n        flag = True\n    if flag:\n        print('yes')\n    else:\n        print('no')", "def orac(n, arr, k):\n    if n == 1 and arr[0] == k:\n        return 'yes'\n    c = 0\n    d = 0\n    if arr[n - 1] == k:\n        c = 1\n    for i in range(n - 1):\n        if arr[i] == k:\n            c = 1\n        if min(arr[i], arr[i + 1]) >= k:\n            d = 1\n        if c == 1 and d == 1:\n            break\n    if d == 0:\n        for i in range(n - 2):\n            l = [arr[i], arr[i + 1], arr[i + 2]]\n            l.sort()\n            if min(l[1], l[2]) >= k:\n                d = 1\n                break\n    if d == 1 and c == 1:\n        return 'yes'\n    return 'no'\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(orac(n, arr, k))", "def orac(n, arr, k):\n    if n == 1 and arr[0] == k:\n        return 'yes'\n    c = 0\n    d = 0\n    if arr[n - 1] == k:\n        c = 1\n    for i in range(n - 1):\n        if arr[i] == k:\n            c = 1\n        if min(arr[i], arr[i + 1]) >= k:\n            d = 1\n        if c == 1 and d == 1:\n            break\n        if i <= n - 3:\n            l = [arr[i], arr[i + 1], arr[i + 2]]\n            l.sort()\n            if min(l[1], l[2]) >= k:\n                d = 1\n    if d == 1 and c == 1:\n        return 'yes'\n    return 'no'\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(orac(n, arr, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    has = False\n    prop = n == 1\n    for i in range(n):\n        if a[i] == k:\n            has = True\n        if a[i] >= k and i > 0:\n            if a[i - 1] >= k:\n                prop = True\n            if i > 1 and a[i - 2] >= k:\n                prop = True\n    print('yes' if has and prop else 'no')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    has = False\n    prop = n == 1\n    for i in range(n):\n        if a[i] == k:\n            has = True\n        if a[i] >= k and i > 0:\n            if a[i - 1] >= k:\n                prop = True\n            if i > 1 and a[i - 2] >= k:\n                prop = True\n    print('yes' if has and prop else 'no')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    flag = 0\n    for i in range(n):\n        if a[i] == k:\n            flag = 1\n    if flag == 0:\n        print('no')\n    else:\n        flag = 0\n        count = 10000000\n        for i in range(n):\n            if a[i] >= k:\n                if count <= 1:\n                    flag = 1\n                count = 0\n            else:\n                count += 1\n        if flag == 1 or n == 1:\n            print('yes')\n        else:\n            print('no')", "def ri():\n    return int(input())\n\ndef ria():\n    return list(map(int, input().split()))\n\ndef solve(n, k, a):\n    flag = False\n    for i in range(n):\n        if a[i] < k:\n            a[i] = 0\n        elif a[i] > k:\n            a[i] = 2\n        else:\n            a[i] = 1\n        if a[i] == 1:\n            flag = True\n    if not flag:\n        return False\n    if n == 1:\n        return True\n    for i in range(n):\n        for j in range(i + 1, i + 3):\n            if j < n and a[i] and a[j]:\n                return True\n    return False\n\ndef main():\n    for _ in range(ri()):\n        (n, k) = ria()\n        a = ria()\n        print('yes' if solve(n, k, a) else 'no')\nmain()", "import sys\nimport os\nimport heapq\nimport math\ntry:\n    path = './file/input.txt'\n    if os.path.exists(path):\n        sys.stdin = open(path, 'r')\nexcept:\n    pass\nt = int(input())\n\ndef printd(value):\n    pass\n\ndef run(n, k, s):\n    i = 0\n    have = False\n    isSuccess = True if len(s) == 1 and s[0] == k else False\n    while i < n:\n        if s[i] == k:\n            have = True\n        if i < n - 1 and s[i] >= k and (s[i + 1] >= k):\n            isSuccess = True\n        if i < n - 2 and s[i] >= k and (s[i + 2] >= k):\n            isSuccess = True\n        i += 1\n    return isSuccess and have\n\ndef case():\n    arr = list(map(int, input().split(' ')))\n    (n, k) = (arr[0], arr[1])\n    s = list(map(int, input().split(' ')))\n    print('yes' if run(n, k, s) else 'no')\nfor _ in range(t):\n    case()", "def solve():\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    flag = False\n    for i in range(n):\n        val = 0\n        if a[i] == k:\n            val = 1\n            flag = True\n        elif a[i] > k:\n            val = 2\n        a[i] = val\n    if not flag:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        j = i + 1\n        while j < n and j - i <= 2:\n            if a[i] and a[j]:\n                return 1\n            j += 1\n    return 0\nT = int(input())\nfor t in range(T):\n    res = solve()\n    if res:\n        print('yes')\n    else:\n        print('no')", "import math\ninf = 10 ** 9 + 100\nt = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fl = 0\n    for i in range(n):\n        if a[i] == k:\n            fl = 1\n        if a[i] >= k:\n            a[i] = 1\n        else:\n            a[i] = 0\n    if fl == 0:\n        print('no')\n        continue\n    if n == 1:\n        if fl:\n            print('yes')\n        else:\n            print('no')\n        continue\n    bl = [0] * (n + 2)\n    sm = [0] * (n + 2)\n    minn = inf\n    fl = 0\n    for i in range(n):\n        bl[i + 1] = bl[i]\n        sm[i + 1] = sm[i]\n        if a[i] == 0:\n            sm[i + 1] += 1\n        else:\n            bl[i + 1] += 1\n        if minn < bl[i + 1] - sm[i + 1]:\n            fl = 1\n        minn = min(minn, bl[i] - sm[i])\n    if fl:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    flag = 0\n    for i in range(n):\n        if a[i] > k:\n            a[i] = 2\n        elif a[i] == k:\n            a[i] = 1\n        else:\n            a[i] = 0\n        if a[i] == 1:\n            flag = 1\n    if flag == 0:\n        print('no')\n        continue\n    if n == 1:\n        print('yes')\n        continue\n    flag = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and j - i <= 2:\n            if a[i] and a[j]:\n                flag = 1\n                break\n            j += 1\n        if flag == 1:\n            break\n    if flag == 1:\n        print('yes')\n    else:\n        print('no')", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(test):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a += [0, 0]\n    if n == 1 and a[0] == k:\n        print('yes')\n        return\n    (flag1, flag2) = (0, 0)\n    for i in range(n):\n        if a[i] == k:\n            flag1 = 1\n        if a[i] >= k:\n            if a[i + 1] >= k or a[i + 2] >= k:\n                flag2 = 1\n    print('yes' if flag1 and flag2 else 'no')\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    has = False\n    prop = n == 1\n    for i in range(n):\n        if a[i] == k:\n            has = True\n        if a[i] >= k and i > 0:\n            if a[i - 1] >= k:\n                prop = True\n            if i > 1 and a[i - 2] >= k:\n                prop = True\n    print('yes' if has and prop else 'no')", "from array import array\nimport math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    fnd = False\n    bgr = False\n    for i in range(0, n):\n        if arr[i] == k:\n            fnd = True\n    for i in range(1, n - 1):\n        cnt = 0\n        if arr[i] >= k:\n            cnt += 1\n        if arr[i - 1] >= k:\n            cnt += 1\n        if arr[i + 1] >= k:\n            cnt += 1\n        if cnt >= 2:\n            bgr = True\n    if n == 1 and arr[0] == k:\n        print('yes')\n    elif n == 2 and min(arr[0], arr[1]) == k:\n        print('yes')\n    elif bgr and fnd:\n        print('yes')\n    else:\n        print('no')"]