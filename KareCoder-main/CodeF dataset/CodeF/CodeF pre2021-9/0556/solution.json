["for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [(a[i] < a[i + 1]) - (a[i] > a[i + 1]) for i in range(n - 1)]\n    vh = [d[i] * d[i + 1] for i in range(n - 2)]\n    D = vh.count(-1)\n    if D < 2:\n        print(0)\n        continue\n    if any((vh[i:i + 3] == [-1, -1, -1] for i in range(n - 4))):\n        print(D - 3)\n    else:\n        x = [i for i in range(n - 3) if vh[i:i + 2] == [-1, -1]]\n        for i in x:\n            if i == 0 or i == n - 4 or (i > 0 and a[i] == a[i - 1]) or (i < n - 4 and a[i + 3] == a[i + 4]) or (a[i] < a[i + 1] > a[i + 2] >= a[i]) or (a[i] > a[i + 1] < a[i + 2] <= a[i]) or (a[i + 1] < a[i + 2] > a[i + 3] <= a[i + 1]) or (a[i + 1] > a[i + 2] < a[i + 3] >= a[i + 1]):\n                print(D - 2)\n                break\n        else:\n            print(D - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [(a[i] < a[i + 1]) - (a[i] > a[i + 1]) for i in range(n - 1)]\n    vh = [d[i] * d[i + 1] for i in range(n - 2)]\n    D = vh.count(-1)\n    if D < 2:\n        print(0)\n        continue\n    if any((vh[i:i + 3] == [-1, -1, -1] for i in range(n - 4))):\n        print(D - 3)\n    else:\n        x = [i for i in range(n - 3) if vh[i:i + 2] == [-1, -1]]\n        for i in x:\n            if i == 0 or i == n - 4 or (i > 0 and a[i] == a[i - 1]) or (i < n - 4 and a[i + 3] == a[i + 4]) or (a[i] < a[i + 1] > a[i + 2] >= a[i]) or (a[i] > a[i + 1] < a[i + 2] <= a[i]) or (a[i + 1] < a[i + 2] > a[i + 3] <= a[i + 1]) or (a[i + 1] > a[i + 2] < a[i + 3] >= a[i + 1]):\n                print(D - 2)\n                break\n        else:\n            print(D - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [(a[i] < a[i + 1]) - (a[i] > a[i + 1]) for i in range(n - 1)]\n    z = [d[i] * d[i + 1] for i in range(n - 2)]\n    D = z.count(-1)\n    if D < 2:\n        print(0)\n        continue\n    if any((z[i:i + 3] == [-1, -1, -1] for i in range(n - 4))):\n        print(D - 3)\n    else:\n        x = [i for i in range(n - 3) if z[i:i + 2] == [-1, -1]]\n        for i in x:\n            if i == 0 or i == n - 4 or (i > 0 and a[i] == a[i - 1]) or (i < n - 4 and a[i + 3] == a[i + 4]) or (a[i] < a[i + 1] > a[i + 2] >= a[i]) or (a[i] > a[i + 1] < a[i + 2] <= a[i]) or (a[i + 1] < a[i + 2] > a[i + 3] <= a[i + 1]) or (a[i + 1] > a[i + 2] < a[i + 3] >= a[i + 1]):\n                print(D - 2)\n                break\n        else:\n            print(D - 1)", "def is_hill(left, middle, right):\n    if middle > max(left, right):\n        return True\n    if middle < min(left, right):\n        return True\n\ndef is_triplet_in_border(middle, length):\n    if middle - 1 < 0:\n        return False\n    if middle + 1 >= length:\n        return False\n    return True\n\ndef solve(arr):\n    hill = [False for _ in range(len(arr))]\n    for i in range(1, len(arr) - 1):\n        hill[i] = is_hill(arr[i - 1], arr[i], arr[i + 1])\n    if hill.count(True) <= 1:\n        return 0\n    for i in range(len(arr) - 2):\n        if hill[i] and hill[i + 1] and hill[i + 2]:\n            return hill.count(True) - 3\n    for i in range(1, len(arr) - 1):\n        if hill[i] and hill[i - 1]:\n            if i + 2 == len(arr) or not is_hill(arr[i - 1], arr[i + 1], arr[i + 2]):\n                return hill.count(True) - 2\n        elif hill[i] and hill[i + 1]:\n            if i == 1 or not is_hill(arr[i - 2], arr[i - 1], arr[i + 1]):\n                return hill.count(True) - 2\n    return hill.count(True) - 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr))", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    d = [(a[i] < a[i + 1]) - (a[i] > a[i + 1]) for i in range(n - 1)]\n    vh = [d[i] * d[i + 1] for i in range(n - 2)]\n    D = vh.count(-1)\n    if D < 2:\n        print(0)\n        continue\n    if any((vh[i:i + 3] == [-1, -1, -1] for i in range(n - 4))):\n        print(D - 3)\n    else:\n        x = [i for i in range(n - 3) if vh[i:i + 2] == [-1, -1]]\n        for i in x:\n            if i == 0 or i == n - 4 or (i > 0 and a[i] == a[i - 1]) or (i < n - 4 and a[i + 3] == a[i + 4]) or (a[i] < a[i + 1] > a[i + 2] >= a[i]) or (a[i] > a[i + 1] < a[i + 2] <= a[i]) or (a[i + 1] < a[i + 2] > a[i + 3] <= a[i + 1]) or (a[i + 1] > a[i + 2] < a[i + 3] >= a[i + 1]):\n                print(D - 2)\n                break\n        else:\n            print(D - 1)", "def sgn(x):\n    return (x > 0) - (x < 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [a[0]] * 2 + a + [a[-1]] * 2\n    it = []\n    ita = it.append\n    chg = 0\n    for i in range(2, n + 2):\n        ita(a[i - 1] < a[i] > a[i + 1] or a[i - 1] > a[i] < a[i + 1])\n        if chg == 0 and it[-1]:\n            chg = 1\n        if chg < 3 and i > 2 and it[-1] and it[-2] and it[-3]:\n            chg = 3\n        if chg < 2 and i > 4 and (not it[-1]) and it[-2] and it[-3] and (not it[-4]):\n            chg = 1 + (a[i - 2] <= a[i] <= a[i + 1] or a[i - 4] <= a[i - 3] <= a[i - 1] or a[i - 2] >= a[i] >= a[i + 1] or (a[i - 4] >= a[i - 3] >= a[i - 1]))\n    ans = sum(it) - chg\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    m = [0] * n\n    a3 = 0\n    a2 = 0\n    a1 = 0\n    for i in range(1, n - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            m[i] = 2\n            a1 = 1\n            if i > 1 and m[i - 1] == 1 and (m[i - 2] == 2):\n                a3 = 1\n            elif m[i - 1] == 1:\n                if i < n - 2 and l[i - 1] < l[i + 1] and (l[i + 1] != l[i + 2]) and (i > 2) and (l[i - 2] < l[i]) and (l[i - 2] != l[i - 3]):\n                    a2 = a2\n                else:\n                    a2 = 1\n        elif l[i] < l[i - 1] and l[i] < l[i + 1]:\n            m[i] = 1\n            a1 = 1\n            if i > 1 and m[i - 1] == 2 and (m[i - 2] == 1):\n                a3 = 1\n            elif m[i - 1] == 2:\n                if i < n - 2 and l[i - 1] > l[i + 1] and (l[i + 1] != l[i + 2]) and (i > 2) and (l[i - 2] > l[i]) and (l[i - 2] != l[i - 3]):\n                    a2 = a2\n                else:\n                    a2 = 1\n    summ = n - m.count(0)\n    if a3 == 1:\n        print(summ - 3)\n    elif a2 == 1:\n        print(summ - 2)\n    elif summ == 0:\n        print(summ)\n    else:\n        print(summ - 1)", "(lambda r, c: [(lambda p, n: (lambda m: print(sum((c(p, q) for (p, q) in zip(m, m[1:]))) - max((c(p, q) + c(q, r) + c(r, s) - min(c(r + q, s), c(p, q + r)) for (p, q, r, s) in zip(m, m[1:], m[2:], m[3:])), default=0)))([0, *(n[i - 1] - k for (i, k) in enumerate(n) if 0 < i), 0]))(int(r()), list(map(int, r().split()))) for t in range(int(r()))])(__import__('sys').stdin.readline, lambda a, b: a * b < 0)", "import sys\nfrom math import copysign\nlines = [l.strip() for l in sys.stdin.readlines()]\n\ndef isbump(seq, i):\n    if i <= 0 or i >= len(seq) - 1:\n        return 0\n    (a, b, c) = seq[i - 1:i + 2]\n    if a == b or b == c:\n        return 0\n    if a > b > c or a < b < c:\n        return 0\n    return 1\n\ndef maximprove(seq, i, oldmax=0):\n    ilocal = isbump(seq, i - 1) + isbump(seq, i) + isbump(seq, i + 1)\n    if ilocal <= oldmax:\n        return 0\n    remember = seq[i]\n    seq[i] = seq[i - 1]\n    ichanged1 = isbump(seq, i + 1)\n    seq[i] = seq[i + 1]\n    ichanged2 = isbump(seq, i - 1)\n    seq[i] = remember\n    return max(ilocal - ichanged1, ilocal - ichanged2)\n\ndef ivalue(line):\n    seq = [int(n) for n in line.split()]\n    n = 0\n    maximp = 0\n    for i in range(1, len(seq) - 1):\n        if isbump(seq, i):\n            n += 1\n        if maximp < 3:\n            maximp = max(maximp, maximprove(seq, i, maximp))\n    print(n - maximp)\nfor line in lines[2::2]:\n    ivalue(line)"]