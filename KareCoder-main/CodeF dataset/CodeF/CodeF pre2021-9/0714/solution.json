["import math\n\ndef dfs(a):\n    if len(a) == 1:\n        return 1\n    k = 1 << int(math.log2(a[0] ^ a[-1]))\n    for (i, p) in enumerate(a):\n        if p & k:\n            break\n    return 1 + max(dfs(a[:i]), dfs(a[i:]))\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(n - dfs(a))", "import math\n\ndef dfs(a):\n    if len(a) == 1:\n        return 1\n    k = 1 << int(math.log2(a[0] ^ a[-1]))\n    for (i, p) in enumerate(a):\n        if p & k:\n            break\n    return 1 + max(dfs(a[:i]), dfs(a[i:]))\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(n - dfs(a))", "import math\n\ndef dfs(a):\n    if len(a) == 1:\n        return 1\n    k = 1 << int(math.log2(a[0] ^ a[-1]))\n    for (i, p) in enumerate(a):\n        if p & k:\n            break\n    return 1 + max(dfs(a[:i]), dfs(a[i:]))\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(n - dfs(a))", "n = int(input())\nl = list(map(int, input().split()))\n\ndef fun(a):\n    if len(a) <= 3:\n        return len(a)\n    maxE = max(a)\n    if maxE == 0:\n        return len(a)\n    msb = 1\n    while 2 * msb <= maxE:\n        msb *= 2\n    l1 = []\n    l2 = []\n    for x in a:\n        if x >= msb:\n            l1.append(x - msb)\n        else:\n            l2.append(x)\n    max1 = fun(l1)\n    max2 = fun(l2)\n    if max1 == 0:\n        return max2\n    if max2 == 0:\n        return max1\n    return max(1 + max1, 1 + max2)\nprint(n - fun(l))", "def main():\n    n = int(input())\n    a = [int(word) for word in input().rstrip().split()]\n    x = max(a)\n    arr = {}\n    for num in a:\n        arr[num] = 1\n    ans = 0\n    while True:\n        x >>= 1\n        dp = {}\n        for i in arr:\n            p = i >> 1\n            if p not in dp:\n                dp[p] = arr[i]\n            else:\n                dp[p] = max(dp[p] + 1, arr[i] + 1)\n                ans = max(ans, dp[p])\n        arr = dp\n        if x == 0:\n            break\n    print(n - ans)\nmain()"]