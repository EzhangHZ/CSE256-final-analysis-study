["import sys, io, os, math\nfrom math import ceil, log, gcd, sqrt\nfrom itertools import permutations\nimport operator\nmod = 1000000007\nmod1 = 998244353\n\ndef intinp():\n    return int(sys.stdin.readline())\n\ndef strinp():\n    return sys.stdin.readline()\n\ndef arrinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef mulinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef flush():\n    return stdout.flush()\n\ndef power_two(x):\n    return 1 << x\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    (n, k) = mulinp()\n    t = arrinp()\n    res = 0\n    t.sort()\n    for i in range(1, n):\n        res = gcd(res, t[i] - t[0])\n    if (k - t[0]) % res:\n        print('NO')\n        return\n    print('YES')\n\ndef main():\n    tc = intinp()\n    while tc:\n        solve()\n        tc -= 1\nmain()", "import sys\ninput = sys.stdin.readline\ngetint = lambda : int(input())\ngetints = lambda : [int(a) for a in input().split()]\n\ndef calc_gcd(big, small):\n    if small == 0:\n        return big\n    return calc_gcd(small, big % small)\n\ndef solve():\n    (n, k) = getints()\n    x = getints()\n    a = min(x)\n    gcd = x[0] - a\n    if gcd == 0:\n        gcd = x[1] - a\n    for xvalue in x:\n        if xvalue == a:\n            continue\n        comparer = (gcd, xvalue - a)\n        gcd = calc_gcd(max(comparer), min(comparer))\n    k -= a\n    if k % gcd == 0:\n        print('YES')\n    else:\n        print('NO')\nt = getint()\nfor i in range(t):\n    solve()", "from math import gcd\n\ndef process():\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    GCD = 0\n    for i in range(1, n):\n        GCD = gcd(GCD, a[i] - a[i - 1])\n    for i in range(n):\n        if (k - a[i]) % GCD == 0:\n            print('YES')\n            return\n    print('NO')\n\ndef main():\n    t = int(input())\n    while t > 0:\n        process()\n        t -= 1\nmain()", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef poss(n, k, L):\n    d = 0\n    for x in L:\n        d = gcd(x - L[0], d)\n    if (k - L[0]) % d == 0:\n        return 'YES'\n    else:\n        return 'NO'\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    L = [int(x) for x in input().split()]\n    print(poss(n, k, L))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    x = a[1] - a[0]\n    for i in range(1, n):\n        x = math.gcd(a[i] - a[0], x)\n    k -= a[0]\n    if k % x == 0:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    g = 0\n    for i in range(1, n):\n        g = gcd(g, x[i] - x[0])\n    if not (k - x[0]) % g:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = a[1] - a[0]\n    for i in range(2, n):\n        g = gcd(a[i] - a[i - 1], g)\n    if not abs(k - a[0]) % g:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    g = 0\n    for i in range(1, n):\n        g = gcd(g, x[i] - x[0])\n    if not (k - x[0]) % g:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\n\ndef board(a, k):\n    a = sorted(a)\n    g = 0\n    for i in a:\n        g = gcd(i - a[0], g)\n    if (k - a[0]) % g == 0:\n        return 'YES'\n    return 'NO'\nfor i in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    print(board(lst, k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    x = a[1] - a[0]\n    for i in range(1, n):\n        x = math.gcd(a[i] - a[0], x)\n    k -= a[0]\n    if k % x == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    x = a[1] - a[0]\n    for i in range(1, n):\n        x = math.gcd(a[i] - a[0], x)\n    k -= a[0]\n    if k % x == 0:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    while b:\n        a %= b\n        (a, b) = (b, a)\n    return a\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = 0\n    l.sort()\n    for i in range(1, n):\n        g = gcd(g, l[i] - l[0])\n    if (k - l[0]) % g == 0:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = gcd(ans, a[i] - a[(i - 1 + n) % n])\n    if ans == 0:\n        print('NO')\n    if k % ans == a[0] % ans:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcd(a, b):\n    return math.gcd(a, b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = 0\n    l.sort()\n    for i in range(1, n):\n        g = gcd(g, l[i] - l[0])\n    if (k - l[0]) % g == 0:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    even = 0\n    odd = 0\n    g = a[1] - a[0]\n    for j in range(1, n):\n        g = gcd(g, a[j] - a[j - 1])\n    print('YES') if (k - a[0]) % g == 0 else print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    x = a[1] - a[0]\n    for i in range(1, n):\n        x = math.gcd(a[i] - a[0], x)\n    k -= a[0]\n    if k % x == 0:\n        print('YES')\n    else:\n        print('NO')", "from functools import reduce\nfrom math import gcd\n\ndef solve():\n    (n, k) = [int(s) for s in input().split()]\n    x = [int(s) for s in input().split()]\n    a = [x[i] - x[i - 1] for i in range(1, n)]\n    total_gcd = reduce(lambda x1, x2: gcd(x1, x2), a)\n    if (k - x[0]) % total_gcd == 0:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor test in range(t):\n    solve()", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = []\n    for i in range(1, n):\n        l2.append(abs(l[i] - l[i - 1]))\n    gcd = l2[0]\n    for i in range(1, n - 1):\n        gcd = math.gcd(gcd, l2[i])\n    t = 0\n    if abs(l[i] - k) % gcd == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom math import gcd\nt = int(input())\nfor _ in range(t):\n    v = []\n    (n, k) = map(int, input().split())\n    v = list(map(int, input().split()))\n    v.sort()\n    g = 0\n    F = False\n    for i in range(1, n):\n        g = gcd(g, v[i] - v[0])\n    if (k - v[0]) % g == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef find_gcd(x, y):\n    d = math.gcd(abs(x), abs(y))\n    if x * y < 0:\n        return -1 * d\n    else:\n        return d\nfor _ in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l.sort()\n    gcd = 0\n    for i in range(len(l)):\n        gcd = find_gcd(gcd, l[i] - l[0])\n    if (y - l[0]) % gcd == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n):\n        ans = math.gcd(ans, a[i] - a[i - 1])\n    if (k - a[0]) % ans == 0:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a1, b):\n    while b != 0:\n        (a1, b) = (b, a1 % b)\n    return a1\nt = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = gcd(ans, a[i] - a[(i - 1 + n) % n])\n    if ans == 0:\n        print('NO')\n    if k % ans == a[0] % ans:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (g, chk) = (arr[1] - arr[0], True)\n    for i in range(2, n):\n        g = math.gcd(g, arr[i] - arr[i - 1])\n    for i in range(n):\n        if (k - arr[i]) % g == 0:\n            print('YES')\n            chk = False\n            break\n    if chk:\n        print('NO')", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n):\n        ans = math.gcd(ans, a[i] - a[0])\n    if (k - a[0]) % ans == 0:\n        print('YES')\n    else:\n        print('NO')", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef find(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef solve():\n    diff = []\n    if k in arr:\n        return 'YES'\n    for i in range(n - 1):\n        diff.append(arr[i + 1] - arr[i])\n    if len(diff) == 1:\n        x = diff[0]\n    else:\n        x = find(diff)\n    if abs(k - arr[0]) % x == 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = solve()\n    print(s)", "def arrIn():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor ii in range(int(input())):\n    (n, k) = mapIn()\n    a = arrIn()\n    g = 0\n    a.sort()\n    k -= a[0]\n    for i in range(1, n):\n        a[i] -= a[0]\n        g = gcd(g, a[i])\n    if k % g == 0:\n        print('YES')\n    else:\n        print('NO')", "def gcd(x, y):\n    if y != 0:\n        return gcd(y, x % y)\n    else:\n        return x\nfor _ in range(int(input())):\n    (n, goal) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    base = arr[0]\n    g = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        g = gcd(g, arr[i] - arr[0])\n    if (goal - base) % g == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    x = a[0]\n    if k in a:\n        print('YES')\n        continue\n    store = set()\n    for i in range(1, n):\n        store.add(a[i] - a[i - 1])\n    ans = 0\n    for i in store:\n        ans = math.gcd(ans, i)\n    if abs(k - a[0]) % ans == 0:\n        print('YES')\n    else:\n        print('NO')", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef find(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef solve():\n    diff = []\n    if k in arr:\n        return 'YES'\n    for i in range(n - 1):\n        diff.append(arr[i + 1] - arr[i])\n    diff.sort()\n    count = 0\n    for i in range(1, n - 1):\n        if diff[i] % diff[0] == 0:\n            count = count + 1\n    if count == n - 2:\n        if abs(k - arr[0]) % diff[0] == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    x = find(diff)\n    if abs(k - arr[0]) % x == 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = solve()\n    print(s)", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    xlist = list(map(int, input().split()))\n    lm = 0\n    for i in xlist:\n        lm = gcd(lm, i - xlist[0])\n    flag = False\n    for x in xlist:\n        if abs(x - k) % lm == 0:\n            print('YES')\n            flag = True\n            break\n    if not flag:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef answer():\n    g = 0\n    for i in range(n - 1):\n        g = gcd(g, abs(a[i] - a[i + 1]))\n    for i in a:\n        if (k - i) % g == 0:\n            return 'YES'\n    return 'NO'\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    g = 0\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        g = gcd(g, diff)\n    off = arr[0] % g\n    if k % g == off:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    g = 0\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        g = gcd(g, diff)\n    off = arr[0] % g\n    if k % g == off:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = []\n    for i in range(1, n):\n        l2.append(l[i] - l[i - 1])\n    gcd = l2[0]\n    for i in range(1, n - 1):\n        gcd = math.gcd(gcd, l2[i])\n    t = 0\n    for i in range(n):\n        if abs(l[i] - k) % gcd == 0:\n            t = 1\n            break\n    if t == 1:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    even = 0\n    odd = 0\n    a.sort()\n    g = a[1] - a[0]\n    for j in range(1, n):\n        g = gcd(g, a[j] - a[j - 1])\n    if (k - a[0]) % g == 0:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    elif a <= 0:\n        return b\n    elif a == b:\n        return b\n    return gcd(b % a, a)\nT = int(input())\nfor t in range(T):\n    (n, k) = tuple([int(x) for x in input().split()])\n    xx = [int(x) for x in input().split()]\n    xx = sorted(xx)\n    cur_gcd = xx[1] - xx[0]\n    for i in range(2, len(xx)):\n        cur_gcd = gcd(cur_gcd, xx[i] - xx[0])\n    if abs(k - xx[0]) % cur_gcd == 0:\n        print('YES')\n    else:\n        print('NO')", "def __gcd(a, b):\n    if a == 0:\n        return b\n    return __gcd(b % a, a)\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = list(map(int, input().split()))\n    gcd = 0\n    flag = 0\n    for i in range(len(a) - 1):\n        gcd = __gcd(gcd, a[i + 1] - a[i])\n    for i in range(len(a)):\n        if ((k - a[i]) % gcd + gcd) % gcd == 0:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nfor i in range(int(input().strip())):\n    (n, k) = map(int, input().strip().split())\n    l = list(map(int, input().strip().split()))\n    m = l[0]\n    o = 0\n    y = True\n    for j in range(1, n):\n        s = l[j] - l[j - 1]\n        o = hcf(o, s)\n        if (k - m) % o == 0:\n            y = False\n            break\n    if y:\n        print('NO')\n    else:\n        print('YES')"]