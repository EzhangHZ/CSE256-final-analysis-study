["import sys\ninput = sys.stdin.readline\n(n, k) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\na.sort()\nfor i in range(n - k + 1):\n    if a[i] == a[i + k - 1]:\n        print(0)\n        sys.exit(0)\nl = r = m = 0\nfor i in range(k - 1):\n    l += a[k - 1] - a[i]\nfor i in range(k - 1, n - 1):\n    if a[i] == a[i + 1]:\n        l -= 1\n    else:\n        break\na_reverse = a[::-1]\nfor i in range(k - 1):\n    r += -(a_reverse[k - 1] - a_reverse[i])\nfor i in range(k - 1, n - 1):\n    if a_reverse[i] == a_reverse[i + 1]:\n        r -= 1\n    else:\n        break\nfor i in range(n // 2):\n    m += a[n - i - 1] - a[i]\nm -= n - k\nprint(min(l, r, m))", "(n, k) = map(int, input().split())\nt = list(map(int, input().split()))\nt = sorted(t)\nif n == k and k == 2:\n    print(abs(t[0] - t[1]))\n    exit(0)\nif t[0] == t[-1]:\n    print(0)\n    exit(0)\nt_sum_r = [t[-1]]\nfor x in range(0, n - k + 1):\n    if t[x] == t[x + k - 1]:\n        print(0)\n        exit(0)\nfor x in range(2, n + 1):\n    t_sum_r.append(t[-x] + t_sum_r[x - 2])\nt_sum_l = 0\nsum_l = t[0]\nwyn = 10 ** 16\ncurr_wyn_l = 10 ** 16\ncurr_wyn_r = 10 ** 16\ncurr_wyn_lr = 10 ** 16\ncurr_min = 10 ** 16\nfor x in range(1, n - 1):\n    cost_l = x * (t[x] - 1) - sum_l + 1\n    cost_r = t_sum_r[-x - 2] - (n - x - 1) * (t[x] + 1) + 1\n    el_l = x\n    el_r = n - x - 1\n    sum_l += t[x]\n    if el_l + 1 >= k:\n        curr_wyn_l = cost_l + (k - 2)\n    if el_r + 1 >= k:\n        curr_wyn_r = cost_r + (k - 2)\n    curr_wyn_lr = cost_l + cost_r + (k - 3)\n    curr_min = min(curr_wyn_lr, curr_wyn_l, curr_wyn_r)\n    if curr_min <= wyn:\n        wyn = curr_min\nprint(wyn)", "from collections import Counter\n(n, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nmp = Counter(arr)\nsum_arr = sum(arr)\nans = 10 ** 18\nkeys = sorted(mp.keys())\ncur_sum = 0\nl_count = 0\nfor key in keys:\n    value = mp[key]\n    if value >= k:\n        ans = 0\n        break\n    tmp_k = k - value\n    if l_count < tmp_k:\n        ans1 = ans\n    else:\n        ans1 = (key - 1) * l_count - cur_sum + tmp_k\n    if n - l_count >= k:\n        ans2 = sum_arr - cur_sum - key * value - (key + 1) * (n - l_count - value) + tmp_k\n    else:\n        ans2 = ans\n    ans3 = (key - 1) * l_count - cur_sum + sum_arr - cur_sum - key * value - (key + 1) * (n - l_count - value) + tmp_k\n    ans = min(ans, ans1, ans2, ans3)\n    cur_sum += key * value\n    l_count += value\nprint(ans)", "from collections import Counter\n(n, k) = map(int, input().split())\nxs = sorted(map(int, input().split()))\nc = Counter(xs)\ncsuml = 0\nlcnt = 0\ncsumr = sum(xs)\nrcnt = len(xs)\nans = csumr\nfor (x, cnt) in sorted(c.items()):\n    r = max(0, k - cnt)\n    if not r:\n        ans = 0\n        break\n    csumr -= x * cnt\n    rcnt -= cnt\n    ansl = lcnt * (x - 1) - csuml + min(lcnt, r)\n    if lcnt < r:\n        ansl += csumr - rcnt * (x + 1) + r - lcnt\n    ansr = csumr - rcnt * (x + 1) + min(rcnt, r)\n    if rcnt < r:\n        ansr += lcnt * (x - 1) - csuml + r - rcnt\n    ans = min(ans, ansl, ansr)\n    csuml += x * cnt\n    lcnt += cnt\nprint(ans)", "from collections import Counter\n(n, k) = map(int, input().split())\nxs = sorted(map(int, input().split()))\nc = Counter(xs)\ncsuml = 0\nlcnt = 0\ncsumr = sum(xs)\nrcnt = len(xs)\nans = csumr\nfor (x, cnt) in sorted(c.items()):\n    r = max(0, k - cnt)\n    if not r:\n        ans = 0\n        break\n    csumr -= x * cnt\n    rcnt -= cnt\n    ansl = lcnt * (x - 1) - csuml + min(lcnt, r)\n    if lcnt < r:\n        ansl += csumr - rcnt * (x + 1) + r - lcnt\n    ansr = csumr - rcnt * (x + 1) + min(rcnt, r)\n    if rcnt < r:\n        ansr += lcnt * (x - 1) - csuml + r - rcnt\n    ans = min(ans, ansl, ansr)\n    csuml += x * cnt\n    lcnt += cnt\nprint(ans)", "from collections import Counter as Cn\n(n, k) = map(int, input().split())\na = sorted(map(int, input().split()))\narr = Cn(a)\nlsum = 0\nlcnt = 0\nrsum = sum(a)\nrcnt = len(a)\nans = 10 ** 18\nfor (val, cnt) in sorted(arr.items()):\n    req = max(0, k - cnt)\n    if req == 0:\n        ans = 0\n        break\n    rcnt = rcnt - cnt\n    rsum = rsum - val * cnt\n    lr = min(req, lcnt)\n    rr = max(0, req - lr)\n    ta = (val - 1) * lcnt - lsum + lr\n    if lr < req:\n        ta += rsum - (val + 1) * rcnt + rr\n    ans = min(ans, ta)\n    rr = min(rcnt, req)\n    lr = max(0, req - rr)\n    ta = rsum - (val + 1) * rcnt + rr\n    if rr < req:\n        ta += (val - 1) * lcnt - lsum + lr\n    ans = min(ans, ta)\n    lcnt += cnt\n    lsum += cnt * val\nprint(ans)", "(n, k) = map(int, input().split())\na = sorted(list(map(int, input().split())))\n(sums, suf, q1) = ([0] * n, [n] * n, n)\nfor q in range(n - 2, -1, -1):\n    sums[q] = sums[q + 1]\n    if a[q] != a[q1 - 1]:\n        sums[q] += (n - q1) * (a[q1 - 1] - a[q]) + (q1 - q - 1) * (a[q1 - 1] - a[q] - 1)\n        q1 = q + 1\n    suf[q] = q1\n(ans, sum1, q1) = (sums[0] + k - suf[0] if suf[0] < k else 0, 0, -1)\nfor q in range(1, n):\n    if a[q] != a[q1 + 1]:\n        sum1 += (q1 + 1) * (a[q] - a[q1 + 1]) + (q - q1 - 1) * (a[q] - a[q1 + 1] - 1)\n        q1 = q - 1\n    if suf[q] - q1 - 1 >= k:\n        ans = 0\n        break\n    if k <= suf[q]:\n        ans = min(ans, sum1 + k - suf[q] + q1 + 1)\n    if k < n - q1:\n        ans = min(ans, sums[q] + k - suf[q] + q1 + 1)\n    ans = min(ans, sum1 + sums[q] + k - suf[q] + q1 + 1)\nprint(ans)"]