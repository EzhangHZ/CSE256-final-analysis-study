["def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    s = {*zip(I(), I())}\n    V = [1] * 20\n    g = [[] for _ in V]\n    f = 1\n    for (x, y) in s:\n        if x > y:\n            f = 0\n        if x < y:\n            x = ord(x) - 97\n            y = ord(y) - 97\n            g[x] += (y,)\n            g[y] += (x,)\n    print((-1, sum((dfs(i) - 1 for i in range(20) if V[i])))[f])", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    s = {*zip(I(), I())}\n    V = [1] * 20\n    g = [[] for _ in V]\n    f = 1\n    for (x, y) in s:\n        if x > y:\n            f = 0\n        if x < y:\n            x = ord(x) - 97\n            y = ord(y) - 97\n            g[x] += (y,)\n            g[y] += (x,)\n    print(sum((dfs(i) - 1 for i in range(20) if V[i])) if f else -1)", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 20\n    g = [[] for _ in V]\n    f = 1\n    for (x, y) in {*zip(I(), I())}:\n        if x > y:\n            f = 0\n        if x < y:\n            x = ord(x) - 97\n            y = ord(y) - 97\n            g[x] += (y,)\n            g[y] += (x,)\n    print((-1, sum((dfs(i) - 1 for i in range(20) if V[i])))[f])", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 117\n    g = [[] for _ in V]\n    f = 1\n    for (x, y) in {*zip(map(ord, I()), map(ord, I()))}:\n        if x > y:\n            f = 0\n        if x < y:\n            g[x] += (y,)\n            g[y] += (x,)\n    print((-1, sum((dfs(i) - 1 for i in range(117) if V[i])))[f])", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 117\n    g = [[] for _ in V]\n    f = 0\n    for (x, y) in {*zip(map(ord, I()), map(ord, I()))}:\n        f |= x > y\n        if x < y:\n            g[x] += (y,)\n            g[y] += (x,)\n    print((sum((dfs(i) - 1 for i in range(117) if V[i])), -1)[f])", "line_init = int(input())\n\ndef recur(dic, key):\n    if not mark[key]:\n        mark[key] = True\n        if key in dic.keys() and dic[key]:\n            for h in dic[key]:\n                recur(dic, h)\n    return 0\nfor i in range(line_init):\n    line_1 = int(input())\n    line_2 = input()\n    line_3 = input()\n    world = set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't'])\n    dic = {x: set() for x in world}\n    count = 0\n    for i in range(line_1):\n        if line_2[i] > line_3[i]:\n            count = -1\n            break\n        if line_2[i] != line_3[i]:\n            dic[line_2[i]].add(line_3[i])\n            dic[line_3[i]].add(line_2[i])\n    if count != -1:\n        alf = list(world)\n        alf.sort()\n        mark = dict.fromkeys(alf, False)\n        count = 20\n        for i in range(len(alf)):\n            if not mark[alf[i]]:\n                count -= 1\n                recur(dic, alf[i])\n    print(count)", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 117\n    g = [[] for _ in V]\n    f = 0\n    for (x, y) in {*zip(map(ord, I()), map(ord, I()))}:\n        f |= x > y\n        g[x] += (y,)\n        g[y] += (x,)\n    print((sum((dfs(i) - 1 for i in range(117) if V[i])), -1)[f])", "def ss(n, a, b):\n    for i in range(n):\n        if a[i] > b[i]:\n            return -1\n    ans = n\n    p = {chr(i + ord('a')): chr(i + ord('a')) for i in range(20)}\n    count = {chr(i + ord('a')): 1 for i in range(20)}\n    rank = {chr(i + ord('a')): 0 for i in range(20)}\n\n    def find(x):\n        if p[x] == x:\n            return x\n        p[x] = find(p[x])\n        return p[x]\n\n    def union(x, y):\n        px = find(x)\n        py = find(y)\n        rx = rank[px]\n        ry = rank[py]\n        if rx < ry:\n            count[py] += count[px]\n            count[px] = 0\n            p[px] = py\n        elif rx > ry:\n            count[px] += count[py]\n            count[py] = 0\n            p[py] = px\n        else:\n            p[py] = px\n            rank[x] += 1\n            count[py] += count[px]\n            count[px] = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            if find(a[i]) != find(b[i]):\n                union(a[i], b[i])\n    for i in count:\n        if p[i] != i:\n            count[p[i]] += count[i]\n            count[i] = 1\n    ans = 0\n    for i in count:\n        ans += max(count[i] - 1, 0)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = str(input())\n    b = str(input())\n    print(ss(n, a, b))", "def solve():\n    n = int(input())\n    a = input()\n    b = input()\n    l = [[0 for i in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] > b[i]:\n            print(-1)\n            return\n        elif a[i] < b[i]:\n            l[ord(b[i]) - 97][ord(a[i]) - 97] += 1\n    ans = 0\n    for i in range(20):\n        j = 0\n        while j < 20:\n            if l[j][i] != 0:\n                x = j\n                j += 1\n                ans += 1\n                while j < 20:\n                    if l[j][i] != 0:\n                        l[j][x] += l[j][i]\n                    j += 1\n            j += 1\n    c = 0\n    for i in range(20):\n        if l[i][19] != 0:\n            c += 1\n    if c <= 1:\n        print(ans + c)\n    else:\n        print(-1)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    t = int(input())\n    a = input()\n    b = input()\n    re = True\n    ans = 0\n    d = {}\n    for j in range(97, 97 + 20):\n        d[chr(j)] = set()\n    for i in range(t):\n        if b[i] < a[i]:\n            re = False\n            break\n        if b[i] == a[i]:\n            continue\n        else:\n            d[a[i]].add(b[i])\n    if re:\n        while True:\n            bq = True\n            for j in d:\n                if len(d[j]) != 0:\n                    r = list(d[j])\n                    r.sort()\n                    for k in range(1, len(r)):\n                        d[r[0]].add(r[k])\n                    d[j] = set()\n                    ans += 1\n                    bq = False\n                    break\n            if bq:\n                break\n        print(ans)\n    else:\n        print(-1)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    T = input()\n    if any((a > b for (a, b) in zip(S, T))):\n        print(-1)\n        continue\n    s = set()\n    for (a, b) in zip(S, T):\n        if a == b:\n            continue\n        s.add(a + b)\n    ans = 0\n    while s:\n        m = min(s)\n        ans += 1\n        t = set()\n        for (a, b) in s:\n            if a != m[0]:\n                t.add(a + b)\n                continue\n            if m[1] == b:\n                continue\n            t.add(m[1] + b)\n        s = t\n    print(ans)", "from sys import stdin\nfrom collections import defaultdict\ninput = stdin.readline\nimport threading\n\ndef dfs(u, mark, g):\n    mark[u] = True\n    for i in g[u]:\n        if mark[i] == False:\n            dfs(i, mark, g)\n\ndef stringt(a, b, mark, g):\n    cnt = 0\n    for i in range(0, len(a)):\n        if a[i] > b[i]:\n            return -1\n        g[ord(a[i]) - 97].append(ord(b[i]) - 97)\n        g[ord(b[i]) - 97].append(ord(a[i]) - 97)\n    ans = 20\n    for i in range(20):\n        if mark[i] == False:\n            dfs(i, mark, g)\n            ans -= 1\n    return ans\n\ndef main():\n    for i in range(int(input())):\n        n = input().strip()\n        a = input().strip()\n        b = input().strip()\n        mark = [False] * 20\n        g = defaultdict(list)\n        print(stringt(a, b, mark, g))\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "from collections import defaultdict\n\ndef change(u, j):\n    while j in u:\n        j = u[j]\n    return j\nfor _ in range(int(input())):\n    n = int(input())\n    a = input().strip()\n    b = input().strip()\n    c = defaultdict(dict)\n    for i in range(n):\n        if a[i] > b[i]:\n            print(-1)\n            break\n        if a[i] != b[i]:\n            c[b[i]][a[i]] = 1\n    else:\n        u = defaultdict(str)\n        ans = 0\n        for i in sorted(c):\n            for j in list(c[i]):\n                cj = change(u, j)\n                c[i][cj] = 1\n                if cj != j:\n                    c[i][j] = 0\n            for j in c[i]:\n                ans += 1 if c[i][j] else 0\n                u[j] = i\n        print(ans)", "def ans(a, b, n):\n    for i in range(n):\n        if ord(a[i]) > ord(b[i]):\n            return -1\n    d = {'a': [], 'b': [], 'c': [], 'd': [], 'e': [], 'f': [], 'g': [], 'h': [], 'i': [], 'j': [], 'k': [], 'l': [], 'm': [], 'n': [], 'o': [], 'p': [], 'q': [], 'r': [], 's': [], 't': []}\n    for i in range(n):\n        d[b[i]].append(i)\n    count = 0\n    val = []\n    for i in d:\n        temp = 0\n        if d[i] != []:\n            for j in d[i]:\n                if a[j] not in val and a[j] != b[j]:\n                    val.append(a[j])\n                    a = a.replace(a[j], b[j])\n                    temp += 1\n        count += temp\n    return count\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    a = input()\n    b = input()\n    print(ans(a, b, n))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    flag = False\n    dic = {}\n    N_L = []\n    pos = 'abcdefghijklmnopqrst'\n    for i in range(n):\n        if a[i] > b[i]:\n            flag = True\n            break\n        if a[i] == b[i]:\n            continue\n        if a[i] not in dic:\n            dic[a[i]] = {}\n        dic[a[i]][b[i]] = True\n        N_L.append((a[i], b[i]))\n    if flag:\n        print(-1)\n    else:\n        ans = 0\n        l1 = list(dic.keys())\n        l1.sort()\n        for i in pos:\n            if i in dic:\n                if len(dic[i]) > 0:\n                    ans += 1\n                mi = 'u'\n                for j in dic[i]:\n                    if mi > j:\n                        mi = j\n                if mi not in dic:\n                    dic[mi] = {}\n                for k in dic[i]:\n                    if k != mi:\n                        dic[mi][k] = True\n        print(ans)", "import sys\nimport math\nimport itertools\nimport random\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    match = [[False for i in range(20)] for j in range(20)]\n    a = input()\n    b = input()\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        if a[i] > b[i]:\n            print(-1)\n            return\n        match[ord(a[i]) - ord('a')][ord(b[i]) - ord('a')] = True\n    ans = 0\n    for i in range(20):\n        for j in range(i + 1, 20):\n            if match[i][j]:\n                ans += 1\n                for k in range(j + 1, 20):\n                    if match[i][k]:\n                        match[j][k] = True\n                break\n    print(ans)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 117\n    g = [[] for _ in V]\n    f = 0\n    for (x, y) in zip(map(ord, I()), map(ord, I())):\n        f |= x > y\n        g[x] += (y,)\n        g[y] += (x,)\n    print((sum((dfs(i) - 1 for i in range(117) if V[i])), -1)[f])", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    A = list(map(ord, input()))\n    B = list(map(ord, input()))\n    extra = defaultdict(list)\n    c = [B[i] - A[i] for i in range(n)]\n    if min(c) < 0:\n        print(-1)\n    else:\n        for i in range(n):\n            if c[i] != 0:\n                extra[A[i]].append(c[i])\n        ops = 0\n        for a in range(ord('a'), ord('t') + 1):\n            if a not in extra:\n                continue\n            diff = extra[a]\n            if len(diff) == 1:\n                ops += 1\n            else:\n                min_dif = min(diff)\n                ops += 1\n                new = [d - min_dif for d in diff if d != min_dif]\n                if len(new) > 0:\n                    extra[a + min_dif].extend(new)\n        print(ops)\nt = int(input())\nfor test in range(t):\n    solve()", "ALP = 'abcdefghijklmnopqrst'\nn_tests = int(input())\n\ndef dfs(adj, reachable, node):\n    reachable[node] = 1\n    for i in adj[node]:\n        if not reachable[i]:\n            reachable = dfs(adj, reachable, i)\n    return reachable\nfor i in range(n_tests):\n    string_length = int(input())\n    flag_solution = True\n    connections = dict()\n    sol = 20\n    A = input()\n    B = input()\n    adj = [[] for x in range(20)]\n    for j in range(string_length):\n        if A[j] > B[j]:\n            flag_solution = False\n        elif A[j] < B[j]:\n            adj[ALP.find(A[j])].append(ALP.find(B[j]))\n            adj[ALP.find(B[j])].append(ALP.find(A[j]))\n    if flag_solution:\n        reachable = [0] * 20\n        for j in range(20):\n            if not reachable[j]:\n                dfs(adj, reachable, j)\n                sol -= 1\n        print(sol)\n    else:\n        print(-1)", "def dfs(u):\n    V[u] = 0\n    return sum((dfs(v) for v in g[u] if V[v])) + 1\nI = input\nfor _ in [0] * int(I()):\n    I()\n    V = [1] * 20\n    g = [set() for _ in V]\n    f = 1\n    for (x, y) in zip(I(), I()):\n        if x > y:\n            f = 0\n        if x < y:\n            x = ord(x) - 97\n            y = ord(y) - 97\n            g[x] |= {y}\n            g[y] |= {x}\n    print((-1, sum((dfs(i) - 1 for i in range(20) if V[i])))[f])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    ls = defaultdict(list)\n    flag = 0\n    for i in range(n):\n        if A[i] != B[i]:\n            ls[B[i]].append(i)\n        if A[i] > B[i]:\n            flag = 1\n    if flag == 1:\n        print(-1)\n        continue\n    else:\n        for i in ls:\n            ls[i] = sorted(ls[i], key=lambda x: A[x])\n        lst = sorted(ls.keys())\n        res = 0\n        for i in lst:\n            for j in ls[i]:\n                if A[j] != B[j]:\n                    res += 1\n                    A = A.replace(A[j], B[j])\n        print(res)", "def solve(n, a, b):\n    visited = [0] * 20\n    graph = {}\n    bad = False\n\n    def dfs(u):\n        visited[u] = 1\n        for to in graph[u]:\n            if not visited[to]:\n                dfs(to)\n    unique_letters = set()\n    for i in range(n):\n        if a[i] > b[i]:\n            bad = True\n            break\n        if a[i] != b[i]:\n            int_a = ord(a[i]) - ord('a')\n            int_b = ord(b[i]) - ord('a')\n            if int_a not in unique_letters:\n                unique_letters.add(int_a)\n            if int_b not in unique_letters:\n                unique_letters.add(int_b)\n            if graph.get(int_a, -1) == -1:\n                graph[int_a] = []\n            if graph.get(int_b, -1) == -1:\n                graph[int_b] = []\n            graph[int_a].append(int_b)\n            graph[int_b].append(int_a)\n    if not bad:\n        answ = len(unique_letters)\n        for i in unique_letters:\n            if not visited[i]:\n                dfs(i)\n                answ -= 1\n        print(answ)\n    else:\n        print(-1)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    solve(n, a, b)", "from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    (a, b) = (rstr(), rstr())\n    for i in range(n):\n        if a[i] > b[i]:\n            print(-1)\n            return\n    p = [i for i in range(20)]\n    res = n\n\n    def find(x):\n        if p[x] != x:\n            p[x] = find(p[x])\n        return p[x]\n    for i in range(n):\n        u = ord(a[i]) - ord('a')\n        v = ord(b[i]) - ord('a')\n        pu = find(u)\n        pv = find(v)\n        if pu == pv:\n            res -= 1\n        else:\n            p[pu] = pv\n    print(res)\nfor _ in range(rint()):\n    main()", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(str, input()))\n    b = list(map(str, input()))\n    c = 0\n    d = set([])\n    for i in range(0, len(a)):\n        if ord(a[i]) > ord(b[i]):\n            c = 1\n            break\n        elif ord(a[i]) == ord(b[i]):\n            continue\n        else:\n            d.add((ord(a[i]), ord(b[i])))\n    if c == 1:\n        print(-1)\n    else:\n        k = list(d)\n        k = sorted(k)\n        i = 0\n        while len(k) > 0:\n            for j in range(0, len(k)):\n                if j == 0:\n                    (x, y) = k[j]\n                    k[j] = (y, y)\n                else:\n                    (ap, pp) = k[j]\n                    if x == ap:\n                        k[j] = (y, pp)\n                    else:\n                        break\n            while True:\n                if len(k) == 0:\n                    break\n                (l, r) = k[0]\n                if l == r:\n                    k.remove(k[0])\n                else:\n                    break\n            k = sorted(k)\n            i = i + 1\n        print(i)", "abc = [chr(i) for i in range(97, 97 + 20)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    s = set([])\n    flg = 0\n    for i in range(n):\n        tempa = abc.index(a[i])\n        tempb = abc.index(b[i])\n        if tempa > tempb:\n            flg = 1\n            break\n        elif tempa < tempb:\n            s.add((tempa, tempb))\n    if flg:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(len(s)):\n            if len(s) == 0:\n                break\n            s = list(s)\n            s.sort()\n            (x, y) = s.pop(0)\n            for i in range(len(s)):\n                temp = list(s[i])\n                if temp[0] == x:\n                    temp[0] = y\n                s[i] = tuple(temp)\n            s = set(s)\n            ans += 1\n        print(ans)", "import math\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    d = [[0] * 26 for i in range(26)]\n    f = 0\n    for i in range(n):\n        if ord(a[i]) > ord(b[i]):\n            print(-1)\n            f = 1\n            break\n        elif ord(a[i]) < ord(b[i]):\n            d[ord(a[i]) - 97][ord(b[i]) - 97] += 1\n    if f == 1:\n        continue\n    c = 0\n    for i in range(26):\n        for j in range(26):\n            if d[i][j] != 0:\n                d[i][j] = 0\n                for k in range(26):\n                    d[j][k] += d[i][k]\n                c += 1\n                break\n    print(c)", "def tits(a, b, n):\n    for i in range(n):\n        if a[i] > b[i]:\n            return -1\n    gh = [[] for i in range(20)]\n    for i in range(n):\n        gh[ord(a[i]) - ord('a')].append(ord(b[i]) - ord('a'))\n        gh[ord(b[i]) - ord('a')].append(ord(a[i]) - ord('a'))\n    visit = [False for i in range(20)]\n\n    def dfs(adj, visit, u):\n        visit[u] = True\n        for i in adj[u]:\n            if not visit[i]:\n                dfs(adj, visit, i)\n    ans = 20\n    for i in range(20):\n        if not visit[i]:\n            dfs(gh, visit, i)\n            ans -= 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    print(tits(a, b, n))", "def checker(a, b, n):\n    for i in range(n):\n        if a[i] > b[i]:\n            return -1\n    lst = [[] for _ in range(20)]\n    for i in range(n):\n        lst[ord(a[i]) - ord('a')].append(ord(b[i]) - ord('a'))\n        lst[ord(b[i]) - ord('a')].append(ord(a[i]) - ord('a'))\n    visited = [False for _ in range(20)]\n\n    def dfs(adjacent, visited, u):\n        visited[u] = True\n        for i in adjacent[u]:\n            if not visited[i]:\n                dfs(adjacent, visited, i)\n    result = 20\n    for i in range(20):\n        if not visited[i]:\n            dfs(lst, visited, i)\n            result -= 1\n    return result\nfor _ in range(int(input())):\n    m = int(input())\n    s = input()\n    t = input()\n    print(checker(s, t, m))", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    f = True\n    for i in range(n):\n        if s[i] > t[i]:\n            f = False\n            break\n    if not f:\n        print(-1)\n        continue\n    tree = {}\n\n    def find(st):\n        tree.setdefault(st, st)\n        if tree[st] != st:\n            tree[st] = find(tree[st])\n        return tree[st]\n    d = [[0] * 26 for _ in range(26)]\n    for i in range(n):\n        if s[i] < t[i]:\n            tree[find(s[i])] = find(t[i])\n    cnt = [0] * 26\n    for (i, c) in enumerate(string.ascii_lowercase):\n        cnt[ord(find(c)) - ord('a')] += 1\n    ans = 0\n    for i in range(26):\n        if cnt[i]:\n            ans += cnt[i] - 1\n    print(ans)", "pre = [i for i in range(55)]\ncnt = [0] * 55\n\ndef Find(x):\n    if x == pre[x]:\n        return x\n    else:\n        pre[x] = Find(pre[x])\n        return pre[x]\n\ndef Join(u, v):\n    fu = Find(u)\n    fv = Find(v)\n    pre[min(fu, fv)] = max(fu, fv)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = input()\n    b = input()\n    f = False\n    for i in range(1, 55):\n        pre[i] = i\n        cnt[i] = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        if a[i] > b[i]:\n            f = True\n            break\n        Join(int(ord(a[i]) - 96), int(ord(b[i]) - 96))\n    if f:\n        print('-1')\n        continue\n    for i in range(1, 21):\n        cnt[Find(i)] += 1\n    ans = 0\n    for i in range(1, 21):\n        if cnt[i] >= 2:\n            ans += cnt[i] - 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    input()\n    a = input()\n    b = input()\n    (posa, ans) = (defaultdict(list), 0)\n    if any((x > y for (x, y) in zip(a, b))):\n        print(-1)\n        continue\n    for (i, x) in enumerate(a):\n        posa[x].append(i)\n    for c in sorted(set(a) | set(b)):\n        (m, n) = ('t', [])\n        for i in posa[c]:\n            if b[i] == c:\n                continue\n            m = min(m, b[i])\n            n.append(i)\n        if n:\n            posa[m].extend(n)\n            ans += 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    input()\n    a = input()\n    b = input()\n    if any((x > y for (x, y) in zip(a, b))):\n        print(-1)\n        continue\n    posa = defaultdict(list)\n    for (i, x) in enumerate(a):\n        posa[x].append(i)\n    ans = 0\n    for c in sorted(set(a) | set(b)):\n        m = 't'\n        n = []\n        for i in posa[c]:\n            if b[i] == c:\n                continue\n            m = min(m, b[i])\n            n.append(i)\n        if n:\n            posa[m].extend(n)\n            ans += 1\n    print(ans)", "def solve(n, a, b):\n    for i in range(n):\n        if a[i] > b[i]:\n            return -1\n    ans = 0\n    for j in range(20):\n        ch = chr(97 + j)\n        arr = []\n        x = 'u'\n        for i in range(n):\n            if a[i] == ch and b[i] > ch:\n                arr.append(i)\n                x = min(b[i], x)\n        if len(arr) != 0:\n            ans += 1\n            for k in arr:\n                a[k] = x\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    print(solve(n, a, b))", "import sys\ninput = sys.stdin.readline\n\ndef stringTrans(n, s1, s2):\n    s1 = list(s1)\n    checkList = {}\n    for char in s1:\n        if char not in checkList and char <= 't':\n            checkList[char] = 1\n    start = 'a'\n    end = 't'\n    count = 0\n    while start <= end:\n        store = []\n        current = None\n        replace = ''\n        minimum = None\n        for i in range(n):\n            current = start\n            if s1[i] == current:\n                if s1[i] < s2[i]:\n                    store.append(i)\n                    if minimum == None:\n                        minimum = s2[i]\n                    elif s2[i] < minimum:\n                        minimum = s2[i]\n                elif s1[i] > s2[i]:\n                    return -1\n        for i in store:\n            if minimum <= s2[i]:\n                s1[i] = minimum\n            else:\n                return -1\n        if len(store) > 0:\n            count += 1\n        start = chr(ord(start) + 1)\n    return count\n\ndef solution():\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    print(stringTrans(n, s1, s2))\nt = int(input())\nfor i in range(0, t):\n    solution()", "def ans(a, b):\n    t1 = t2 = ''\n    for i in range(n):\n        if a[i] > b[i]:\n            return -1\n        elif a[i] != b[i]:\n            t1 += a[i]\n            t2 += b[i]\n    a = list(t1)\n    b = list(t2)\n    ans = 0\n    x = 'abcdefghijklmnopqrst'\n    for i in x:\n        y = 'z'\n        pos = []\n        for j in range(len(a)):\n            if a[j] == i and i != b[j]:\n                y = min(y, b[j])\n                pos.append(j)\n        if len(pos) > 0:\n            ans += 1\n            for j in pos:\n                a[j] = y\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    print(ans(a, b))", "from collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef getlist():\n    return list(map(int, input().split()))\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(input())\n        B = list(input())\n        for i in range(N):\n            A[i] = ord(A[i]) - 97\n            B[i] = ord(B[i]) - 97\n        jud = 'Yes'\n        for i in range(N):\n            if A[i] > B[i]:\n                jud = 'No'\n        if jud == 'No':\n            print(-1)\n        else:\n            ans = 0\n            for i in range(20):\n                L = [0] * 20\n                for j in range(N):\n                    if B[j] == i:\n                        L[A[j]] = 1\n                L[i] = 0\n                ans += sum(L)\n                for j in range(N):\n                    if L[A[j]] == 1:\n                        A[j] = i\n            print(ans)\nmain()", "def main():\n    for i in range(int(input())):\n        n = int(input())\n        str1 = input()\n        str2 = input()\n        ch = list(map(lambda i, j: ord(j) - ord(i), str1, str2))\n        idx = [[] for _ in range(20)]\n        for (i, j) in enumerate(str1):\n            idx[ord(j) - 97].append(i)\n        if min(ch) < 0:\n            print('-1')\n        else:\n            counter = 0\n            for i in range(20):\n                k = 20\n                for j in idx[i]:\n                    if ch[j] > 0:\n                        k = min(k, ch[j])\n                if k != 20:\n                    for j in idx[i]:\n                        ch[j] -= k\n                        idx[i + k].append(j)\n                    counter += 1\n            print(counter)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    cur = chr(ord('a') - 1)\n    flag = 0\n    for i in range(n):\n        if s1[i] > s2[i]:\n            flag = 1\n            break\n    if flag == 0:\n        tot = 0\n        temp = list(s1)\n        for i in range(20):\n            cur = chr(ord(cur) + 1)\n            l = []\n            mini = 'u'\n            for j in range(n):\n                if temp[j] == cur and temp[j] != s2[j]:\n                    l.append(j)\n                    mini = min(mini, s2[j])\n            if len(l) > 0:\n                tot += 1\n                for val in l:\n                    temp[val] = mini\n        print(tot)\n    else:\n        print(-1)", "def count(a, b, length, result):\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            return -1\n        if a[i] == b[i]:\n            a[i] = b[i] = 1000\n    if a == b:\n        return result\n    k = min(b)\n    j = b.index(k)\n    save = a[j]\n    for i in range(len(a)):\n        if a[i] == save:\n            a[i] = k\n    return count(a, b, length, result + 1)\nfor _ in range(int(input())):\n    k = input()\n    a = input()\n    b = input()\n    a = list(map(ord, a))\n    b = list(map(ord, b))\n    print(count(a, b, k, 0))", "cases = int(input())\nalphabet = [chr(i) for i in range(ord('a'), ord('t') + 1)]\nfor case in range(cases):\n    length = int(input())\n    a = input()\n    b = input()\n    a = [a[i] for i in range(length)]\n    b = [b[i] for i in range(length)]\n    greater = False\n    count = 0\n    for char in range(length):\n        if a[char] > b[char]:\n            greater = True\n            break\n    if greater:\n        print(-1)\n        continue\n    for alphabet_char in alphabet:\n        equals = []\n        minimum = 20\n        for char in range(length):\n            if a[char] != b[char] and a[char] == alphabet_char:\n                equals.append(char)\n                minimum = min(ord(b[char]) - 97, minimum)\n        if equals:\n            count += 1\n            for pos in equals:\n                a[pos] = chr(97 + minimum)\n    print(count)\n    3", "from collections import defaultdict\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = str(input())\n    arr = list(a)\n    b = str(input())\n    charray = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't']\n    flag = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            print('-1')\n            flag = 1\n            break\n    if flag == 0:\n        ans = 0\n        for i in charray:\n            f = defaultdict(int)\n            for j in range(n):\n                if i == b[j] and i != a[j]:\n                    f[arr[j]] += 1\n            ans += len(f)\n            for j in range(n):\n                if f[arr[j]] > 0:\n                    arr[j] = i\n        print(ans)", "import string\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    a = list(map(str, a))\n    b = list(map(str, b))\n    flag = True\n    for i in range(n):\n        if a[i] > b[i]:\n            print(-1)\n            flag = False\n            break\n    if flag:\n        alpha = string.ascii_lowercase\n        ans = 0\n        m = alpha[0:20]\n        for i in alpha[0:20]:\n            y = 'z'\n            flag = False\n            position = []\n            for j in range(n):\n                if a[j] == i and b[j] > i:\n                    y = min(y, b[j])\n                    position.append(j)\n            if position:\n                ans += 1\n                for pos in position:\n                    a[pos] = y\n        print(ans)", "def count(a, b, length, result):\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            return -1\n        if a[i] == b[i]:\n            a[i] = b[i] = 1000\n    if a == b:\n        return result\n    k = min(b)\n    j = b.index(k)\n    save = a[j]\n    for i in range(len(a)):\n        if a[i] == save:\n            a[i] = k\n    return count(a, b, length, result + 1)\ntest_number = int(input())\nfor _ in range(test_number):\n    k = input()\n    a = input()\n    b = input()\n    a = list(map(ord, a))\n    b = list(map(ord, b))\n    print(count(a, b, k, 0))", "cases = int(input())\nalphabet = [chr(i) for i in range(ord('a'), ord('t') + 1)]\nfor case in range(cases):\n    length = int(input())\n    a = input()\n    b = input()\n    a = [a[i] for i in range(length)]\n    b = [b[i] for i in range(length)]\n    greater = False\n    count = 0\n    for char in range(length):\n        if a[char] > b[char]:\n            greater = True\n            break\n    if greater:\n        print(-1)\n        continue\n    for alphabet_char in alphabet:\n        equals = []\n        minimum = 20\n        for char in range(length):\n            if a[char] != b[char] and a[char] == alphabet_char:\n                equals.append(char)\n                minimum = min(ord(b[char]) - 97, minimum)\n        if equals:\n            count += 1\n            for pos in equals:\n                a[pos] = chr(97 + minimum)\n    print(count)", "test = int(input())\nmoves = []\nfor i in range(test):\n    size = int(input())\n    current = list(input())\n    desired = list(input())\n    sum = 0\n    if current == desired:\n        moves.append(sum)\n    else:\n        unique = current + desired\n        unique = list(set(unique))\n        unique.sort()\n        for p in range(len(unique)):\n            dupIndex = []\n            convertCur = []\n            convertDes = []\n            for j in range(size):\n                if current[j] == unique[p]:\n                    dupIndex.append(j)\n                    convertCur.append(current[j])\n                    convertDes.append(desired[j])\n            if dupIndex == []:\n                continue\n            convertCur = list(set(convertCur))\n            convertDes = list(set(convertDes))\n            small = min(convertDes)\n            if small in convertDes and small in convertCur and (len(convertDes) > 1):\n                convertDes.remove(small)\n                small = min(convertDes)\n            change = 0\n            for j in dupIndex:\n                if ord(desired[j]) > ord(current[j]):\n                    current[j] = small\n                    change += 1\n                elif ord(desired[j]) == ord(current[j]):\n                    continue\n                else:\n                    sum = -1\n                    break\n            if change > 0 and sum != -1:\n                sum += 1\n        moves.append(sum)\n        del unique\n        del current\nfor i in moves:\n    print(i)", "def process(check, mn):\n    for ele in check:\n        a[ele] = mn\nfor t in range(int(input())):\n    n = int(input())\n    a = [str(k) for k in input()]\n    b = [str(k) for k in input()]\n    flag = 0\n    count = 0\n    alp = 'abcdefghijklmnopqrst'\n    for i in range(n):\n        if ord(a[i]) > ord(b[i]):\n            flag = 1\n            break\n    if flag == 1:\n        print(-1)\n        continue\n    for ele in alp:\n        check = []\n        mn = 't'\n        for i in range(n):\n            if a[i] != b[i] and a[i] == ele:\n                check.append(i)\n                mn = min(mn, b[i])\n        if check != []:\n            count += 1\n            process(check, mn)\n    print(count)"]