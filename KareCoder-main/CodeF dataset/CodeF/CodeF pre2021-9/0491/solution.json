["from functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef dict_adder(d, key):\n    if key not in d:\n        d[key] = 0\n    d[key] += 1\n    return d\n(n, m, k) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\ng = factors(k)\nd1 = {}\nd2 = {}\na_streak = b_streak = 0\nfor i in range(n):\n    if a[i] == 1:\n        a_streak += 1\n    else:\n        d1 = dict_adder(d1, a_streak)\n        a_streak = 0\nfor i in range(m):\n    if b[i] == 1:\n        b_streak += 1\n    else:\n        d2 = dict_adder(d2, b_streak)\n        b_streak = 0\nd1 = dict_adder(d1, a_streak)\nd2 = dict_adder(d2, b_streak)\nans = 0\nfor i in g:\n    (x, y) = (i, k // i)\n    cx = cy = 0\n    for (key, val) in d1.items():\n        if key >= x:\n            cx += val * (key - x + 1)\n    for (key, val) in d2.items():\n        if key >= y:\n            cy += val * (key - y + 1)\n    ans += cx * cy\nprint(ans)", "(n, m, k) = map(int, input().split())\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nd = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\nd += [(j, i) for (i, j) in d if i != j]\nc = 0\nfor (x, y) in d:\n    c += sum((i - x + 1 for i in a if x <= i)) * sum((j - y + 1 for j in b if y <= j))\nprint(c)", "[a, a, area] = list(map(int, input().split(' ')))\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nans = 0\nfac = []\nk = 1\nwhile k * k <= area:\n    if area % k == 0:\n        fac.append((k, area // k))\n    k += 1\nfac += [(j, i) for (i, j) in fac if i != j]\nfor (x, y) in fac:\n    ans += sum((i - x + 1 for i in a if x <= i)) * sum((j - y + 1 for j in b if y <= j))\nprint(ans)", "from math import sqrt\n\ndef func():\n    (n, m, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    print(sub_matrix(a, b, n, m, k))\n\ndef sub_matrix(nums_a, nums_b, n, m, target):\n\n    def get_len_freq(nums):\n        nums_size = len(nums)\n        len_freq = [0 for _ in range(nums_size + 2)]\n        cur_len = 0\n        for i in range(nums_size):\n            if nums[i] == 1:\n                cur_len += 1\n                len_freq[1] += 1\n                len_freq[cur_len + 1] -= 1\n            else:\n                cur_len = 0\n        for i in range(1, nums_size + 1):\n            len_freq[i] += len_freq[i - 1]\n        return len_freq\n    len_freq_a = get_len_freq(nums_a)\n    len_freq_b = get_len_freq(nums_b)\n    res = 0\n    for x in range(1, n + 1):\n        if target % x != 0:\n            continue\n        y = target // x\n        if y > m:\n            continue\n        res += len_freq_a[x] * len_freq_b[y]\n    return res\nfunc()", "(n, m, k) = map(int, input().split())\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nd = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\nd += [(j, i) for (i, j) in d if i != j]\nc = 0\nfor (x, y) in d:\n    c += sum((i - x + 1 for i in a if x <= i)) * sum((j - y + 1 for j in b if y <= j))\nprint(c)", "from math import sqrt\n(n, m, k) = map(int, input().split())\na = map(int, input().split())\nb = map(int, input().split())\n\ndef make(a):\n    d = dict()\n    s = 0\n    for v in a:\n        s += v\n        if v == 0 and s != 0:\n            if s not in d:\n                d[s] = 0\n            d[s] += 1\n            s = 0\n    if s != 0:\n        if s not in d:\n            d[s] = 0\n        d[s] += 1\n    return d\n\ndef count(i, j, r, c):\n    cnt = 0\n    for (_r, x) in r:\n        if i > _r:\n            break\n        for (_c, y) in c:\n            if j > _c:\n                break\n            cnt += (_r - i + 1) * (_c - j + 1) * x * y\n    return cnt\nr = make(a)\nc = make(b)\nr = sorted(r.items(), key=lambda x: -x[0])\nc = sorted(c.items(), key=lambda x: -x[0])\nans = 0\nl = int(sqrt(k) + 0.0001) + 1\nfor i in range(1, l):\n    if k % i == 0:\n        j = k // i\n        ans += count(i, j, r, c)\n        if i != j:\n            ans += count(j, i, r, c)\nprint(ans)", "def add_to_dict(d, k):\n    if k == 0:\n        return\n    if k in d:\n        d[k] += 1\n    else:\n        d[k] = 1\n\ndef process(A):\n    k = 0\n    N1 = {}\n    for a in A:\n        if a == 0:\n            add_to_dict(N1, k)\n            k = 0\n        else:\n            k += 1\n    add_to_dict(N1, k)\n    return list(N1.items())\n\ndef find_n(N1, d):\n    res = 0\n    for (l, n) in N1:\n        res += max(0, l - d + 1) * n\n    return res\n\ndef solve(A, B, k):\n    AN1 = process(A)\n    BN1 = process(B)\n    res = 0\n    to = min(len(A), k)\n    for i in range(1, to + 1):\n        if k % i != 0 or k // i > len(B):\n            continue\n        res += find_n(AN1, i) * find_n(BN1, k // i)\n    return res\n(_, _, k) = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nprint(solve(A, B, k))", "(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(One) for One in input().replace(' ', '').split('0') if len(One) != 0]\nb = [len(One) for One in input().replace(' ', '').split('0') if len(One) != 0]\nprint(sum((sum((y - div2 + 1 for y in b if div2 <= y)) * sum((x - div1 + 1 for x in a if div1 <= x)) for (div1, div2) in div)))", "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n\n    def ser(aa):\n        pa = aa[0]\n        w = 1\n        res = defaultdict(int)\n        for a in aa[1:]:\n            if pa == a:\n                w += 1\n            else:\n                if pa == 1:\n                    res[w] += 1\n                w = 1\n            pa = a\n        if pa == 1:\n            res[w] += 1\n        return res\n\n    def divs(k):\n        res = []\n        for i in range(1, k + 1):\n            if i ** 2 > k:\n                break\n            if k % i == 0:\n                res.append(i)\n                res.append(k // i)\n        if res[-1] ** 2 == k:\n            res.pop()\n        return res\n\n    def cntl(cnta, la):\n        res = 0\n        for (w, c) in cnta.items():\n            if w - la + 1 > 0:\n                res += (w - la + 1) * c\n        return res\n    (n, m, k) = MI()\n    dd = divs(k)\n    aa = LI()\n    bb = LI()\n    cnta = ser(aa)\n    cntb = ser(bb)\n    ans = 0\n    for la in dd:\n        lb = k // la\n        ans += cntl(cnta, la) * cntl(cntb, lb)\n    print(ans)\nmain()", "from math import sqrt\n(n, m, k) = map(int, input().split())\na = map(int, input().split())\nb = map(int, input().split())\n\ndef make(a):\n    d = dict()\n    s = 0\n    for v in a:\n        s += v\n        if v == 0 and s != 0:\n            if s not in d:\n                d[s] = 0\n            d[s] += 1\n            s = 0\n    if s != 0:\n        if s not in d:\n            d[s] = 0\n        d[s] += 1\n    return d\n\ndef count(i, j, r, c):\n    cnt = 0\n    for (_r, x) in r:\n        if i > _r:\n            break\n        for (_c, y) in c:\n            if j > _c:\n                break\n            cnt += (_r - i + 1) * (_c - j + 1) * x * y\n    return cnt\nr = sorted(make(a).items(), key=lambda x: -x[0])\nc = sorted(make(b).items(), key=lambda x: -x[0])\nans = 0\nfor i in range(1, int(sqrt(k) + 0.0001) + 1):\n    if k % i == 0:\n        j = k // i\n        ans += count(i, j, r, c)\n        if i != j:\n            ans += count(j, i, r, c)\nprint(ans)", "(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nprint(sum((sum((x - div1 + 1 for x in a if div1 <= x)) * sum((y - div2 + 1 for y in b if div2 <= y)) for (div1, div2) in div)))", "import math\n(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nprint(sum((sum((x - div1 + 1 for x in a if div1 <= x)) * sum((y - div2 + 1 for y in b if div2 <= y)) for (div1, div2) in div)))", "import math\n(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) > 0]\nprint(sum((sum((x - div1 + 1 for x in a if div1 <= x)) * sum((y - div2 + 1 for y in b if div2 <= y)) for (div1, div2) in div)))", "from math import *\n(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncna = []\ncn = 0\nfor i in a:\n    if i == 1:\n        cn += 1\n    else:\n        cna.append(cn)\n        cn = 0\ncna.append(cn)\ncnb = []\ncn = 0\nfor i in b:\n    if i == 1:\n        cn += 1\n    else:\n        cnb.append(cn)\n        cn = 0\ncnb.append(cn)\nda = [0] * (n + 1)\ndb = [0] * (m + 1)\nfor i in cna:\n    for j in range(1, i + 1):\n        da[j] += i - j + 1\nfor i in cnb:\n    for j in range(1, i + 1):\n        db[j] += i - j + 1\nans = 0\nh = int(sqrt(k))\nfor i in range(1, h + 1):\n    if k % i == 0:\n        f = k // i\n        if i != f:\n            if i <= n and f <= m:\n                ans += da[i] * db[f]\n            if i <= m and f <= n:\n                ans += da[f] * db[i]\n        elif i > n or i > m:\n            continue\n        else:\n            ans += da[i] * db[f]\nprint(ans)", "import sys\ninput = sys.stdin.readline\nimport collections\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n\ndef main():\n    (N, M, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    divs = make_divisors(K)\n    ac = collections.Counter()\n    acont = 0\n    for a in A:\n        if a == 0:\n            for d in divs:\n                if acont >= d:\n                    ac[d] += acont - d + 1\n                else:\n                    break\n            acont = 0\n        else:\n            acont += 1\n    else:\n        for d in divs:\n            if acont >= d:\n                ac[d] += acont - d + 1\n            else:\n                break\n    bcont = 0\n    bc = collections.Counter()\n    for b in B:\n        if b == 0:\n            for d in divs:\n                if bcont >= d:\n                    bc[d] += bcont - d + 1\n                else:\n                    break\n            bcont = 0\n        else:\n            bcont += 1\n    else:\n        for d in divs:\n            if bcont >= d:\n                bc[d] += bcont - d + 1\n            else:\n                break\n    ans = 0\n    for d in divs:\n        ad = K // d\n        ans += ac[d] * bc[ad]\n    print(ans)\nmain()", "import sys\nimport math\nfrom collections import Counter\nfrom functools import lru_cache\n(n, m, k) = map(int, next(sys.stdin).split())\na1 = list(map(int, next(sys.stdin).split()))\na2 = list(map(int, next(sys.stdin).split()))\n\ndef get_ones_list(a):\n    result = []\n    current_length = 0\n    for x in a:\n        if x == 1:\n            current_length += 1\n        elif x == 0 and current_length > 0:\n            result.append(current_length)\n            current_length = 0\n    if current_length > 0:\n        result.append(current_length)\n    return result\n\n@lru_cache(maxsize=10)\ndef get_sizes(kk):\n    result = set()\n    for x in range(1, int(math.sqrt(kk) + 1)):\n        if kk % x == 0:\n            result.add((x, int(kk / x)))\n            result.add((int(kk / x), x))\n    return list(result)\n\n@lru_cache(maxsize=None)\ndef get_n_inners(a, b, k):\n    s = 0\n    if k > a * b:\n        return 0\n    elif k == a * b:\n        return 1\n    for (size_x, size_y) in get_sizes(k):\n        if size_x > a:\n            continue\n        if size_y > b:\n            continue\n        s += (a - size_x + 1) * (b - size_y + 1)\n    return s\nr = 0\ncounter_a1 = Counter(get_ones_list(a1))\ncounter_a2 = Counter(get_ones_list(a2))\nfor (aa, n1) in counter_a1.items():\n    for (bb, n2) in counter_a2.items():\n        r += get_n_inners(aa, bb, k) * n1 * n2\nprint(r)", "from math import sqrt\nfrom collections import Counter\n\ndef get_parts(x):\n    start = None\n    parts = []\n    for (i, s) in enumerate(x):\n        if s == 0 and start is not None:\n            size = i - start\n            if size > 0:\n                parts.append(size)\n                start = None\n        if s == 1 and start is None:\n            start = i\n    if start is not None:\n        parts.append(len(x) - start)\n    return parts\n\ndef get_divisors(k):\n    div = {1}\n    for i in range(2, int(sqrt(k)) + 1):\n        if k % i == 0:\n            div.add(i)\n            div.add(k // i)\n    div.add(k)\n    return sorted(div)\n\ndef count_n(n, m):\n    return n - m + 1\n\ndef solve(n, m, k, a, b):\n    a_parts = Counter(get_parts(a))\n    b_parts = Counter(get_parts(b))\n    res = 0\n    div = get_divisors(k)\n    for (a_part, a_count) in a_parts.items():\n        for (b_part, b_count) in b_parts.items():\n            if a_part * b_part >= k:\n                for i in div:\n                    if i <= a_part and k // i <= b_part:\n                        res += count_n(a_part, i) * count_n(b_part, k // i) * a_count * b_count\n    return res\n(n, m, k) = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]\nb = [int(x) for x in input().split(' ')]\nprint(solve(n, m, k, a, b))", "(n, m, k) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nD = []\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        D.append(i)\n        if i != k // i:\n            D.append(k // i)\nD.sort()\nD1 = [0 for i in range(len(D))]\nD2 = [0 for i in range(len(D))]\ncnt = 0\nA.append(0)\nB.append(0)\nfor a in A:\n    if a == 0:\n        if cnt > 0:\n            for i in range(len(D)):\n                if cnt < D[i]:\n                    break\n                D1[i] += cnt - D[i] + 1\n        cnt = 0\n    else:\n        cnt += 1\nfor b in B:\n    if b == 0:\n        if cnt > 0:\n            for i in range(len(D)):\n                if cnt < D[i]:\n                    break\n                D2[i] += cnt - D[i] + 1\n        cnt = 0\n    else:\n        cnt += 1\nans = 0\nfor i in range(len(D)):\n    ans += D1[i] * D2[-(i + 1)]\nprint(ans)", "n = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nk_div = []\ncount = 1\nfor i in range(int(n[2] ** (1 / 2))):\n    if n[2] % count == 0:\n        k_div.append(count)\n    count += 1\nfor i in range(len(k_div)):\n    if k_div[i] ** 2 != n[2]:\n        k_div.append(int(n[2] / k_div[i]))\ngra = {}\ngrb = {}\nc = 0\nd = 0\nfor i in range(n[0]):\n    if a[i] == 1:\n        c += 1\n    elif c != 0:\n        gra[c] = gra.get(c, 0) + 1\n        c = 0\nif c > 0:\n    gra[c] = gra.get(c, 0) + 1\nfor i in range(n[1]):\n    if b[i] == 1:\n        d += 1\n    elif d != 0:\n        grb[d] = grb.get(d, 0) + 1\n        d = 0\nif d > 0:\n    grb[d] = grb.get(d, 0) + 1\nrect = 0\nfor i in range(len(k_div)):\n    row = 0\n    column = 0\n    for key in gra.keys():\n        if key >= k_div[i]:\n            row += (key - k_div[i] + 1) * gra[key]\n    for key in grb.keys():\n        if key >= n[2] / k_div[i]:\n            column += (key - n[2] / k_div[i] + 1) * grb[key]\n    rect += int(row * column)\nprint(rect)", "from math import sqrt\n(n, m, k) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nlength_a = [0] * (len(a) + 1)\nlength_b = [0] * (len(b) + 1)\nnow_length = 0\nfor i in range(len(a)):\n    if a[i] == 1:\n        now_length += 1\n    else:\n        for j in range(now_length + 1):\n            length_a[j] += now_length - j + 1\n        now_length = 0\nfor j in range(now_length + 1):\n    length_a[j] += now_length - j + 1\nnow_length = 0\nfor i in range(len(b)):\n    if b[i] == 1:\n        now_length += 1\n    else:\n        for j in range(now_length + 1):\n            length_b[j] += now_length - j + 1\n        now_length = 0\nfor j in range(now_length + 1):\n    length_b[j] += now_length - j + 1\nres = 0\nfor i in range(1, int(sqrt(k)) + 1):\n    if k % i == 0:\n        if i <= n and k // i <= m:\n            res += length_a[i] * length_b[k // i]\n        if i * i != k:\n            if i <= m and k // i <= n:\n                res += length_a[k // i] * length_b[i]\nprint(res)", "(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nprint(sum((sum((x - div1 + 1 for x in a if div1 <= x)) * sum((y - div2 + 1 for y in b if div2 <= y)) for (div1, div2) in div)))", "(n, m, k) = map(int, input().split())\ndiv = [(i, k // i) for i in range(1, int(k ** 0.5) + 1) if k % i == 0]\ndiv += [(j, i) for (i, j) in div if i != j]\na = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nb = [len(i) for i in input().replace(' ', '').split('0') if len(i) != 0]\nprint(sum((sum((x - div1 + 1 for x in a if div1 <= x)) * sum((y - div2 + 1 for y in b if div2 <= y)) for (div1, div2) in div)))", "(n, m, k) = map(int, input().split())\nlist1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\nconce_1 = []\nconce_2 = []\ni = 0\nwhile i < n:\n    if list1[i] == 1:\n        count = 0\n        while i < len(list1) and list1[i] == 1:\n            i += 1\n            count += 1\n        conce_1.append(count)\n    else:\n        i += 1\ni = 0\nwhile i < m:\n    if list2[i] == 1:\n        count = 0\n        while i < len(list2) and list2[i] == 1:\n            i += 1\n            count += 1\n        conce_2.append(count)\n    else:\n        i += 1\nif len(conce_1) == 0:\n    print(0)\nelse:\n    p = max(conce_1)\n    ans = 0\n    for i in range(1, p + 1):\n        t = k / i\n        if t == int(t):\n            s1 = 0\n            for j in range(len(conce_1)):\n                if conce_1[j] - (i - 1) > 0:\n                    s1 += conce_1[j] - (i - 1)\n            s2 = 0\n            for j in range(len(conce_2)):\n                if conce_2[j] - (t - 1) > 0:\n                    s2 += conce_2[j] - (t - 1)\n            ans += s1 * s2\n    print(int(ans))", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt\nfrom collections import defaultdict as dd\n(n, m, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\ncou = 0\nd1 = dd(int)\nfor i in range(n):\n    if l1[i]:\n        cou += 1\n    else:\n        cc = cou\n        for j in range(1, cou + 1):\n            d1[j] += cc\n            cc -= 1\n        cou = 0\ncc = cou\nfor j in range(1, cou + 1):\n    d1[j] += cc\n    cc -= 1\ncou = 0\nd2 = dd(int)\ncou = 0\nfor i in range(m):\n    if l2[i]:\n        cou += 1\n    else:\n        cc = cou\n        for j in range(1, cou + 1):\n            d2[j] += cc\n            cc -= 1\n        cou = 0\ncc = cou\nfor j in range(1, cou + 1):\n    d2[j] += cc\n    cc -= 1\ncou = 0\nsk = int(sqrt(k))\nsu = 0\nfor i in range(1, sk + 1):\n    if k % i == 0:\n        su += d1[i] * d2[k // i]\n        if i != k // i:\n            su += d1[k // i] * d2[i]\nprint(su)", "def getdivs(n):\n    i = 1\n    a = []\n    while i <= int(n ** 0.5):\n        if n % i == 0:\n            if n // i == i:\n                a.append(i)\n            else:\n                a += [i, n // i]\n        i += 1\n    return sorted(a)\n\ndef getConsecutive(arr):\n    arr = [0] + arr + [0]\n    sz = 1\n    maps = {}\n    maps[1] = arr.count(1)\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1] and arr[i] == 1:\n            sz += 1\n        else:\n            cnt = 1\n            while sz > 1 and sz > 1:\n                if sz in maps:\n                    maps[sz] += cnt\n                else:\n                    maps[sz] = cnt\n                cnt += 1\n                sz -= 1\n            sz = 1\n    return maps\n(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ndivis = getdivs(k)\nmap1 = getConsecutive(a)\nmap2 = getConsecutive(b)\nsu = 0\nfor i in divis:\n    cur = i\n    second = k // cur\n    if cur in map1 and second in map2:\n        su += map1[cur] * map2[second]\nprint(su)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nda = dict()\ndb = dict()\ncount = 0\nfor i in range(n):\n    if a[i] == 0:\n        for j in range(1, count + 1):\n            if j in da.keys():\n                da[j] += count - j + 1\n            else:\n                da[j] = count - j + 1\n        count = 0\n    else:\n        count += 1\nif count > 0:\n    for j in range(1, count + 1):\n        if j in da.keys():\n            da[j] += count - j + 1\n        else:\n            da[j] = count - j + 1\ncount = 0\nfor i in range(m):\n    if b[i] == 0:\n        for j in range(1, count + 1):\n            if j in db.keys():\n                db[j] += count - j + 1\n            else:\n                db[j] = count - j + 1\n        count = 0\n    else:\n        count += 1\nif count > 0:\n    for j in range(1, count + 1):\n        if j in db.keys():\n            db[j] += count - j + 1\n        else:\n            db[j] = count - j + 1\nans = 0\nfor ka in da.keys():\n    if ka > k:\n        continue\n    if k % ka == 0:\n        kb = k // ka\n        if kb in db.keys():\n            ans += da[ka] * db[kb]\nprint(ans)", "import sys\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\n(n, m, k) = read()\na = read()\nb = read()\nca = [0] * (n + 1)\ncb = [0] * (m + 1)\ncountb = 0\nfor num in b:\n    if num == 1:\n        countb += 1\n    elif countb != 0:\n        cb[countb] += 1\n        countb = 0\ncb[countb] += 1\ncounta = 0\nfor num in a:\n    if num == 1:\n        counta += 1\n    else:\n        ca[counta] += 1\n        counta = 0\nca[counta] += 1\ncounta = 0\nif n - 1 >= 1:\n    ca[n - 1] = 2 * ca[n]\nfor i in range(n - 2, 0, -1):\n    counta = ca[i + 2]\n    ca[i] += 2 * ca[i + 1]\n    ca[i] -= counta\ncountb = 0\nif m - 1 >= 1:\n    cb[m - 1] = 2 * cb[m]\nfor i in range(m - 2, 0, -1):\n    countb = cb[i + 2]\n    cb[i] += 2 * cb[i + 1]\n    cb[i] -= countb\nans = 0\nfor i in range(1, n + 1):\n    if ca[i] > 0 and k % i == 0 and (k // i <= m):\n        ans += ca[i] * cb[k // i]\nprint(ans)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nda = {}\ndb = {}\ni = 0\nj = 0\nwhile i < n and j < n:\n    while i < n and a[i] == 0:\n        i += 1\n    j = i\n    while j < n and a[j] == 1:\n        j += 1\n    length = j - i\n    for l in range(1, length + 1):\n        try:\n            da[l] += length - l + 1\n        except:\n            da[l] = length - l + 1\n    i = j + 1\n    j = i\ni = 0\nj = 0\nwhile i < m and j < m:\n    while i < m and b[i] == 0:\n        i += 1\n    j = i\n    while j < m and b[j] == 1:\n        j += 1\n    length = j - i\n    for l in range(1, length + 1):\n        try:\n            db[l] += length - l + 1\n        except:\n            db[l] = length - l + 1\n    i = j + 1\n    j = i\nans = 0\nfor i in da.keys():\n    if k % i == 0:\n        try:\n            ans += da[i] * db[k // i]\n        except:\n            pass\nprint(ans)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ntempA = [0] * (n + 1)\ni = 0\nwhile i < n:\n    if a[i] != 1:\n        i += 1\n        continue\n    j = i\n    while j < n and a[j] == 1:\n        j += 1\n    for l in range(1, j - i + 1):\n        tempA[l] += j - i + 1 - l\n    i = j\ntempB = [0] * (m + 1)\ni = 0\nwhile i < m:\n    if b[i] != 1:\n        i += 1\n        continue\n    j = i\n    while j < m and b[j] == 1:\n        j += 1\n    for l in range(1, j - i + 1):\n        tempB[l] += j - i + 1 - l\n    i = j\nans = 0\nfor i in range(1, n + 1):\n    if k % i == 0:\n        (x, y) = (i, k // i)\n        if y <= m:\n            ans += tempA[x] * tempB[y]\nprint(ans)", "(n, m, K) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nk = [0] * (n + 1)\nl = [0] * (m + 1)\ncur = 0\nfor i in range(n):\n    if a[i]:\n        cur += 1\n    else:\n        k[cur] += 1\n        cur = 0\nk[cur] += 1\ncur = 0\nfor i in range(m):\n    if b[i]:\n        cur += 1\n    else:\n        l[cur] += 1\n        cur = 0\nl[cur] += 1\ncur = k[-1]\nfor i in range(n - 1, -1, -1):\n    t = k[i]\n    k[i] = k[i] + k[i + 1] + cur\n    cur += t\ncur = l[-1]\nfor i in range(m - 1, -1, -1):\n    t = l[i]\n    l[i] = l[i] + l[i + 1] + cur\n    cur += t\nans = 0\ni = 1\nwhile i * i <= K:\n    if K % i == 0:\n        if i <= n and K / i <= m:\n            ans += k[i] * l[K // i]\n        if K / i <= n and i <= m and (i != K // i):\n            ans += k[K // i] * l[i]\n    i += 1\nprint(ans)", "R = lambda : map(int, input().split())\n(n, m, k) = R()\na = list(R())\nb = list(R())\na_counts = [0] * (n + 1)\nb_counts = [0] * (m + 1)\ncount = 0\nfor i in range(n):\n    if a[i] == 1:\n        count += 1\n    if a[i] == 0 or i == n - 1:\n        for j in range(1, count + 1):\n            a_counts[j] = a_counts[j] + count - j + 1\n        count = 0\ncount = 0\nfor i in range(m):\n    if b[i] == 1:\n        count += 1\n    if b[i] == 0 or i == m - 1:\n        for j in range(1, count + 1):\n            b_counts[j] = b_counts[j] + count - j + 1\n        count = 0\nans = 0\nfor i in range(1, n + 1):\n    if k % i == 0 and k // i < m + 1:\n        ans += a_counts[i] * b_counts[k // i]\nprint(ans)", "def getInput():\n    return [sum([int(ele) for ele in rang]) for rang in input().replace(' ', '').split('0')]\n(n, m, k) = list(map(int, input().split()))\nrecs = [(i + 1, int(k / (i + 1))) for i in range(int(k ** 0.5)) if k % (i + 1) == 0]\nrecs += [(p[1], p[0]) for p in recs if p[1] != p[0]]\na = getInput()\nb = getInput()\nprint(sum([sum([mp - x + 1 for mp in b if mp - x > -1]) * sum([np - y + 1 for np in a if np - y > -1]) for (x, y) in recs]))", "def Ones(array: list):\n    res = []\n    count = 0\n    for a in array:\n        if a == 1:\n            count += 1\n        else:\n            res.append(count)\n            count = 0\n    if count != 0:\n        res.append(count)\n    return res\n(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na_ones = Ones(a)\nb_ones = Ones(b)\nrectangle = []\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        rectangle.append((i, k // i))\n        if k // i != i:\n            rectangle.append((k // i, i))\nres = 0\nfor (wide, lenth) in rectangle:\n    widecount = 0\n    lenthcount = 0\n    for x in a_ones:\n        if x >= wide:\n            widecount += x - wide + 1\n    for x in b_ones:\n        if x >= lenth:\n            lenthcount += x - lenth + 1\n    res += widecount * lenthcount\nprint(res)", "(n, m, k) = list(map(int, input().split(' ')))\na = ''.join(input().split(' '))\nb = ''.join(input().split(' '))\na = a.split('0')\nb = b.split('0')\nresult = 0\ndivs = []\ni = 1\nwhile i * i <= k:\n    if k % i == 0:\n        divs.append(i)\n    i += 1\na_count = dict()\nb_count = dict()\nfor div in divs:\n    a_count[div] = 0\n    b_count[div] = 0\n    a_count[k // div] = 0\n    b_count[k // div] = 0\nfor subset in a:\n    l = len(subset)\n    for div in divs:\n        if div <= l:\n            a_count[div] += l - div + 1\n        if k // div <= l and div * div != k:\n            a_count[k // div] += l - k // div + 1\nfor subset in b:\n    l = len(subset)\n    for div in divs:\n        if div <= l:\n            b_count[div] += l - div + 1\n        if k // div <= l and div * div != k:\n            b_count[k // div] += l - k // div + 1\nfor div in divs:\n    result += a_count[div] * b_count[k // div]\n    if div * div != k:\n        result += b_count[div] * a_count[k // div]\nprint(result)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\naa = []\nbb = []\nc = 0\nf = 0\nfor i in range(n):\n    if a[i] == 1:\n        if f == 0:\n            c = 1\n            f = 1\n        else:\n            c += 1\n    elif f == 1:\n        f = 0\n        aa.append(c)\n        c = 0\n    else:\n        continue\nif f == 1:\n    aa.append(c)\n    c = 0\nf = 0\nc = 0\nfor i in range(m):\n    if b[i] == 1:\n        if f == 0:\n            c = 1\n            f = 1\n        else:\n            c += 1\n    elif f == 1:\n        f = 0\n        bb.append(c)\n        c = 0\n    else:\n        continue\nif f == 1:\n    bb.append(c)\n    c = 0\nx = []\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        if i != k // i:\n            x.append(i)\n            x.append(k // i)\n        else:\n            x.append(i)\nans = 0\nfor p in x:\n    q = k // p\n    y = 0\n    z = 0\n    for i in aa:\n        if i >= p:\n            y += i - p + 1\n    for i in bb:\n        if i >= q:\n            z += i - q + 1\n    ans += y * z\nprint(int(ans))", "(n, m, k) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = 0\naa = []\nfor e in a:\n    if e == 1:\n        c += 1\n    elif c > 0:\n        aa.append(c)\n        c = 0\nif c > 0:\n    aa.append(c)\nbb = []\nc = 0\nfor e in b:\n    if e == 1:\n        c += 1\n    elif c > 0:\n        bb.append(c)\n        c = 0\nif c > 0:\n    bb.append(c)\ns = 0\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i != 0:\n        continue\n    (k1, k2, l1, l2) = (0, 0, 0, 0)\n    for e in aa:\n        if e >= i:\n            k1 += e - i + 1\n        if e >= k // i:\n            k2 += e - k // i + 1\n    for e in bb:\n        if e >= i:\n            l2 += e - i + 1\n        if e >= k // i:\n            l1 += e - k // i + 1\n    s += k1 * l1\n    if i != k // i:\n        s += k2 * l2\nprint(s)", "from itertools import groupby\n\ndef getSection():\n    return list(map(lambda p: len(list(p[1])), filter(lambda p: p[0] is '1', groupby(input().replace(' ', '')))))\n\ndef side(arr, x):\n    return sum(map(lambda p: p - x + 1, filter(lambda p: p >= x, arr)))\n(n, m, k) = map(int, input().split())\n(ass, bss) = (getSection(), getSection())\nans = sum([side(ass, x) * side(bss, k // x) + (side(bss, x) * side(ass, k // x) if x * x != k else 0) for x in range(1, int(k ** 0.5 + 0.5) + 1) if k % x == 0])\nprint(ans)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na1 = []\nb1 = []\nx = []\nc = 0\nout = 0\nf = 0\nfor i in range(n):\n    if a[i] == 1:\n        if f == 0:\n            c = 1\n            f = 1\n        else:\n            c += 1\n    elif f == 1:\n        f = 0\n        a1.append(c)\n        c = 0\n    else:\n        continue\nif f == 1:\n    a1.append(c)\n    c = 0\nf = 0\nc = 0\nfor i in range(m):\n    if b[i] == 1:\n        if f == 0:\n            c = 1\n            f = 1\n        else:\n            c += 1\n    elif f == 1:\n        f = 0\n        b1.append(c)\n        c = 0\n    else:\n        continue\nif f == 1:\n    b1.append(c)\n    c = 0\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        if i != k // i:\n            x.append(i)\n            x.append(k // i)\n        else:\n            x.append(i)\nfor p in x:\n    q = k // p\n    y = 0\n    z = 0\n    for i in a1:\n        if i >= p:\n            y += i - p + 1\n    for i in b1:\n        if i >= q:\n            z += i - q + 1\n    out += y * z\nprint(int(out))", "import math\nimport collections\n(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ndiv_a = collections.defaultdict(int)\ndiv_b = collections.defaultdict(int)\ndiv = 1\ndiv_k = {}\nwhile div <= int(math.sqrt(k)):\n    if k % div == 0:\n        div_k[div] = 0\n        div_k[int(k / div)] = 0\n    div += 1\nkk = div_k.keys()\na.append(0)\nb.append(0)\ncount = 0\nfor (pos, i) in enumerate(a):\n    if i == 0:\n        for j in kk:\n            if j <= count:\n                div_a[j] += count - j + 1\n        count = 0\n    else:\n        count += 1\ncount = 0\nfor (pos, i) in enumerate(b):\n    if i == 0:\n        for j in kk:\n            if j <= count:\n                div_b[j] += count - j + 1\n        count = 0\n    else:\n        count += 1\nans = 0\nfor (key, value) in div_a.items():\n    ans += value * div_b[k / key]\nprint(ans)", "(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nh = []\nq = []\nnot_b = [-1]\nAns = 0\nw_i = 0\ni = 0\nwhile i < n:\n    while i < n and a[i] == 1:\n        w_i += 1\n        i += 1\n    if w_i in h:\n        q[h.index(w_i)] += 1\n    elif w_i:\n        h.append(w_i)\n        q.append(1)\n    while i < n and a[i] == 0:\n        i += 1\n    w_i = 0\nans = 0\nw_j = 0\nj = 0\nwhile j < m:\n    while j < m and b[j] == 1:\n        w_j += 1\n        j += 1\n    if w_j:\n        for x in h:\n            if w_j * x >= k:\n                for p in range(1, x + 1):\n                    if k % p == 0 and k // p <= w_j:\n                        w = k // p\n                        ans += (w_j - w + 1) * (x - p + 1)\n            Ans += ans * q[h.index(x)]\n            ans = 0\n    while j < m and b[j] == 0:\n        j += 1\n    w_j = 0\nprint(Ans)", "def func(arr, length, source):\n    count = 0\n    for temp_i in range(length):\n        if source[temp_i] == 1:\n            count += 1\n        else:\n            arr.append(count)\n            count = 0\n    else:\n        arr.append(count)\n(n, m, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nheight = []\nweight = []\nrem = []\nresult = 0\nfunc(height, n, a)\nfunc(weight, m, b)\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        rem.append((i, k // i))\n        if i != k // i:\n            rem.append((k // i, i))\nfor i in range(len(rem)):\n    l_h = 0\n    l_w = 0\n    for j in range(len(height)):\n        if height[j] >= rem[i][0]:\n            l_h += height[j] - rem[i][0] + 1\n    for g in range(len(weight)):\n        if weight[g] >= rem[i][1]:\n            l_w += weight[g] - rem[i][1] + 1\n    result += l_h * l_w\nprint(result)", "(x, y, size) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ntest1 = {}\ntest2 = {}\ni = 1\nwhile i * i <= size:\n    if size % i == 0:\n        test1[i] = 0\n        test2[i] = 0\n        test1[size // i] = 0\n        test2[size // i] = 0\n    i += 1\nc = 0\nfor i in range(x):\n    if a[i] == 1:\n        c += 1\n    else:\n        for j in test1:\n            if j <= c:\n                test1[j] += c - j + 1\n        c = 0\nfor j in test1:\n    if j <= c:\n        test1[j] += c - j + 1\nc = 0\nfor i in range(y):\n    if b[i] == 1:\n        c += 1\n    else:\n        for j in test2:\n            if j <= c:\n                test2[j] += c - j + 1\n        c = 0\nfor j in test2:\n    if j <= c:\n        test2[j] += c - j + 1\ncount = 0\nfor i in test1:\n    for j in test2:\n        if i * j == size:\n            count += test1[i] * test2[j]\nprint(count)", "import sys\ninput = sys.stdin.readline\nfrom functools import reduce\nimport math\n(n, m, k) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nmax_hor = [0] * 40005\nmax_vert = [0] * 40005\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nl1 = list(factors(k))\n\ndef subrect_finder(l, l2, nm):\n    if l[0] == 1:\n        count = 1\n        l2[count] += 1\n    else:\n        count = 0\n    for i in range(1, nm):\n        if l[i - 1] == l[i] and l[i] == 1:\n            count += 1\n            l2[count] += 1\n        elif l[i] == 1:\n            count += 1\n            l2[count] += 1\n        else:\n            count = 0\n    return l2\nhor = subrect_finder(a, max_hor, n)\nvert = subrect_finder(b, max_vert, m)\nans = 0\nfor j in l1:\n    jk = int(k / j)\n    (j, jk) = (min(40001, j), min(40001, jk))\n    if vert[j] != 0:\n        ans += sum(vert[j:]) * sum(hor[jk:])\n    if hor[j] != 0 and j != jk:\n        ans += sum(hor[j:]) * sum(vert[jk:])\nprint(ans)", "from collections import defaultdict\nR = lambda : list(map(int, input().split()))\n(n, m, k) = R()\n(ar, br) = (R(), R())\n\ndef split_ar(aa, sz):\n    (cc, res) = (0, defaultdict(int))\n    for i in range(sz):\n        if aa[i] == 0:\n            continue\n        cc += 1\n        if i == sz - 1 or aa[i + 1] == 0:\n            res[cc] += 1\n            cc = 0\n    return res\n\ndef count_rect(u, v):\n    cc = 0\n    for i in range(1, u + 1):\n        if k % i or k // i > v:\n            continue\n        cc += (u - i + 1) * (v - k // i + 1)\n    return cc\n(sa, sb) = (split_ar(ar, n), split_ar(br, m))\ncc = 0\nfor (av, ac) in sa.items():\n    for (bv, bc) in sb.items():\n        cc += count_rect(av, bv) * ac * bc\nprint(cc)", "import math\n\ndef stat_matrix(nums):\n    length = 0\n    arr = []\n    for i in range(len(nums)):\n        if nums[i] == 0 and length == 0:\n            continue\n        elif nums[i] == 0:\n            arr.append(length)\n            length = 0\n        else:\n            length += 1\n    if length != 0:\n        arr.append(length)\n    return arr\n\ndef calc(arr_a, arr_b, k):\n    sq = [i for i in range(1, int(math.sqrt(k)) + 1) if k % i == 0]\n    cache = {}\n    ans = 0\n    for i in arr_b:\n        w = i\n        if w in cache:\n            ans += cache[w]\n            continue\n        cnt = 0\n        for j in arr_a:\n            h = j\n            for z in sq:\n                tw = z\n                th = k // z\n                if tw <= w and th <= h:\n                    totw = 1 + w - tw\n                    toth = 1 + h - th\n                    cnt += totw * toth\n                if tw <= h and th <= w and (tw != th):\n                    revw = 1 + w - th\n                    revh = 1 + h - tw\n                    cnt += revw * revh\n        ans += cnt\n        cache[w] = cnt\n    return ans\n[n, m, k] = [int(n) for n in input().split(' ')]\na = [int(n) for n in input().split(' ')]\nb = [int(n) for n in input().split(' ')]\narr_a = stat_matrix(a)\narr_b = stat_matrix(b)\nans = calc(arr_a, arr_b, k)\nprint(ans)", "import math\n(n, m, k) = [int(x) for x in input().split()]\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na_one = []\nb_one = []\ni = t = 0\nwhile i < n:\n    if a[i] == 1:\n        t += 1\n    else:\n        a_one.append(t)\n        t = 0\n    i += 1\na_one.append(t)\ni = t = 0\nwhile i < m:\n    if b[i] == 1:\n        t += 1\n    else:\n        b_one.append(t)\n        t = 0\n    i += 1\nb_one.append(t)\n\ndef solve(r, c, a_one, b_one):\n    p = q = i = 0\n    while i < len(a_one):\n        p += max(a_one[i] - (r - 1), 0)\n        i += 1\n    i = 0\n    while i < len(b_one):\n        q += max(b_one[i] - (c - 1), 0)\n        i += 1\n    return p * q\nans = 0\nfor i in range(1, int(math.sqrt(k)) + 1):\n    if k % i == 0:\n        c = k // i\n        ans += solve(i, c, a_one, b_one)\n        if i != c:\n            ans += solve(c, i, a_one, b_one)\nprint(ans)"]