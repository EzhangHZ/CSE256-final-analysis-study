["for ii in range(int(input())):\n    s = input()\n    zerobefore = 0\n    onebefore = 0\n    oneafter = s.count('1')\n    zeroafter = s.count('0')\n    cnt = 10 ** 9\n    for i in s:\n        if i == '0':\n            zerobefore += 1\n            zeroafter -= 1\n        else:\n            onebefore += 1\n            oneafter -= 1\n        cnt = min(cnt, onebefore + zeroafter, zerobefore + oneafter)\n    print(cnt)", "def solve(s):\n    (t0, t1) = (0, 0)\n    for ch in s:\n        if ch == '0':\n            t0 += 1\n        else:\n            t1 += 1\n    ans = min(t0, t1)\n    (n0, n1) = (0, 0)\n    for ch in s:\n        if ch == '0':\n            n0 += 1\n            t0 = t0 - 1 if t0 > 0 else 0\n            ans = min(ans, n1 + t0)\n        else:\n            n1 += 1\n            t1 = t1 - 1 if t1 > 0 else 0\n            ans = min(ans, n0 + t1)\n    return ans\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))", "for _ in range(int(input())):\n    s = input()\n    tot1 = s.count('1')\n    tot0 = s.count('0')\n    ans = len(s)\n    done1 = 0\n    done0 = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            done1 += 1\n        else:\n            done0 += 1\n        ans = min(tot1 - done1 + done0, tot0 - done0 + done1, ans)\n    ans = min(tot0, tot1, ans)\n    print(ans)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "def function(s):\n    total_1 = s.count(1)\n    total_0 = s.count(0)\n    curr_1 = 0\n    curr_0 = 0\n    ans = min(total_1, total_0)\n    for i in s:\n        if i == 1:\n            curr_1 += 1\n        else:\n            curr_0 += 1\n        ans = min(curr_1 + (total_0 - curr_0), curr_0 + (total_1 - curr_1), ans)\n    print(ans)\nT = int(input())\nfor i in range(0, T):\n    s = list(map(int, input()))\n    function(s)", "list_ans = []\nfor _ in range(int(input())):\n    s = input()\n    z = s.count('0')\n    o = s.count('1')\n    zeros = ones = 0\n    ans = 10000\n    for i in range(len(s)):\n        if s[i] == '1':\n            ones += 1\n        else:\n            zeros += 1\n        ans = min(ans, ones + z - zeros, zeros + o - ones)\n    list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "import math\nfor _ in range(int(input())):\n    s = input()\n    s = list(s)\n    c0 = s.count('0')\n    c1 = s.count('1')\n    ans = min(c0, c1)\n    if '0' not in s or '1' not in s:\n        print(0)\n    else:\n        d0 = 0\n        d1 = 0\n        for i in s:\n            if i == '1':\n                d1 += 1\n                c1 -= 1\n            else:\n                d0 += 1\n                c0 -= 1\n            ans = min(ans, d1 + c0, d0 + c1)\n        print(ans)", "from typing import *\n\ndef minimum_number_of_operations(s: str) -> int:\n    if len(s) == 1:\n        return 0\n    one_number = 0\n    zero_number = 0\n    for ch in s:\n        if ch == '1':\n            one_number += 1\n        else:\n            zero_number += 1\n    flipped_ones = 0\n    flipped_zeros = 0\n    ans = min(zero_number, one_number)\n    for ch in s:\n        if ch == '1':\n            flipped_ones += 1\n        else:\n            flipped_zeros += 1\n        ans = min(ans, flipped_zeros + one_number - flipped_ones, flipped_ones + zero_number - flipped_zeros)\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(minimum_number_of_operations(input()))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    maxi = 0\n    c1 = s.count('1')\n    c0 = s.count('0')\n    l1 = 0\n    l0 = 0\n    r1 = c1\n    r0 = c0\n    for i in range(len(s)):\n        if s[i] == '1':\n            l1 += 1\n            r1 -= 1\n            maxi = max(maxi, l1 + r0, l0 + r1)\n        else:\n            l0 += 1\n            r0 -= 1\n            maxi = max(maxi, l1 + r0, l0 + r1)\n    print(len(s) - maxi)", "for t in range(int(input())):\n    s = input()\n    c1 = s.count('1')\n    c0 = s.count('0')\n    l1 = 0\n    l0 = 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            l1 += 1\n            c1 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n        else:\n            l0 += 1\n            c0 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n    print(len(s) - ans)", "for t in range(int(input())):\n    s = input()\n    c1 = s.count('1')\n    c0 = s.count('0')\n    l1 = 0\n    l0 = 0\n    ans = 0\n    for i in s:\n        if i == '1':\n            l1 += 1\n            c1 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n        else:\n            l0 += 1\n            c0 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n    print(len(s) - ans)", "for t in range(int(input())):\n    s = input()\n    c1 = s.count('1')\n    c0 = s.count('0')\n    l1 = 0\n    l0 = 0\n    ans = 0\n    for i in s:\n        if i == '1':\n            l1 += 1\n            c1 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n        else:\n            l0 += 1\n            c0 -= 1\n            ans = max(ans, l1 + c0, l0 + c1)\n    print(len(s) - ans)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "t = int(input())\nchars = ['0', '1']\nfor _ in range(t):\n    s = input()\n    cur = 0\n    i = 0\n    score = 0\n    lst = []\n    while i < len(s):\n        if s[i] == chars[cur]:\n            score += 1\n        else:\n            lst.append(score)\n            cur = 1 - cur\n            score = 1\n        i += 1\n    lst.append(score)\n    if len(lst) <= 2 or (len(lst) == 3 and lst[0] == 0):\n        print(0)\n        continue\n    for i in range(2, len(lst)):\n        lst[i] = lst[i] + lst[i - 2]\n    if len(lst) % 2 == 0:\n        sums = [lst[-2], lst[-1]]\n    else:\n        sums = [lst[-1], lst[-2]]\n    mx = max(sums)\n    for i in range(len(lst)):\n        left = lst[i]\n        if i > 0:\n            right = sums[(i + 1) % 2] - lst[i - 1]\n        else:\n            right = sums[1]\n        if left + right > mx:\n            mx = left + right\n    print(len(s) - mx)", "t = int(input())\nchars = ['0', '1']\nfor _ in range(t):\n    s = input()\n    cur = 0\n    i = 0\n    score = 0\n    lst = []\n    while i < len(s):\n        if s[i] == chars[cur]:\n            score += 1\n        else:\n            lst.append(score)\n            cur = 1 - cur\n            score = 1\n        i += 1\n    lst.append(score)\n    if len(lst) <= 2 or (len(lst) == 3 and lst[0] == 0):\n        print(0)\n        continue\n    for i in range(2, len(lst)):\n        lst[i] = lst[i] + lst[i - 2]\n    if len(lst) % 2 == 0:\n        sums = [lst[-2], lst[-1]]\n    else:\n        sums = [lst[-1], lst[-2]]\n    mx = max(sums)\n    for i in range(len(lst)):\n        left = lst[i]\n        if i > 0:\n            right = sums[(i + 1) % 2] - lst[i - 1]\n        else:\n            right = sums[1]\n        if left + right > mx:\n            mx = left + right\n    print(len(s) - mx)", "for _ in range(int(input())):\n    s = input()\n    o = s.count('0')\n    e = s.count('1')\n    to = 0\n    te = 0\n    ans = min([e, o])\n    for i in range(len(s)):\n        if s[i] == '0':\n            to += 1\n        else:\n            te += 1\n        ans = min(ans, to + e - te)\n        ans = min(ans, te + o - to)\n    print(ans)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "for i in range(int(input())):\n    sequence = input()\n    (no_of_ones, no_of_zeros) = (sequence.count('1'), sequence.count('0'))\n    (ones, zeros) = (no_of_ones, no_of_zeros)\n    no_of_changes = []\n    for i in range(len(sequence) - 1, -1, -1):\n        no_of_changes.append(min(no_of_ones + zeros - no_of_zeros, no_of_zeros + ones - no_of_ones))\n        if sequence[i] == '1':\n            no_of_ones -= 1\n        else:\n            no_of_zeros -= 1\n    print(min(no_of_changes))", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "from collections import Counter\nT = int(input())\nfor t in range(T):\n    s = input()\n    n = len(s)\n    c = Counter(s)\n    b0 = 0\n    b1 = 0\n    a0 = c.get('0') if c.get('0') else 0\n    a1 = c.get('1') if c.get('1') else 0\n    all0 = a1\n    all1 = a0\n    ans = 100000\n    ans = min(ans, all0, all1)\n    for i in range(n):\n        if s[i] == '0':\n            b0 += 1\n            a0 -= 1\n            all0 = b0 + a1\n            all1 = b1 + a0\n        elif s[i] == '1':\n            b1 += 1\n            a1 -= 1\n            all0 = b0 + a1\n            all1 = b1 + a0\n        ans = min(ans, all0, all1)\n    print(ans)", "k = int(input())\nimport math\nfor i in range(k):\n    string = input()\n    ones = string.count('1')\n    zeros = string.count('0')\n    ans = math.inf\n    onesTillNow = 0\n    zerosTillNow = 0\n    for (j, val) in enumerate(string):\n        if val == '1':\n            onesTillNow += 1\n        elif val == '0':\n            zerosTillNow += 1\n        ans = min(ans, zerosTillNow + ones - onesTillNow, onesTillNow + zeros - zerosTillNow)\n    print(ans)", "for s in [*open(0)][1:]:\n    n = len(s) - 1\n    a = [0]\n    for c in s[:-1]:\n        a += (a[-1] + int(c),)\n    print(min((min(i + a[-1] - 2 * x, 2 * x + n - i - a[-1]) for (i, x) in enumerate(a))))", "for pratyush in range(int(input())):\n    (s, z, o, h) = (str(input()), 0, 0, float('inf'))\n    (a, b) = (s.count('0'), s.count('1'))\n    for i in range(len(s)):\n        w = z + (b - o)\n        f = o + (a - z)\n        h = min(h, w)\n        h = min(h, f)\n        if s[i] == '0':\n            z += 1\n        else:\n            o += 1\n    print(h)", "def main():\n    from sys import stdin\n    from sys import stdout\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for _ in range(t):\n        s = input()[:-1]\n        if len(set(list(s))) == 1:\n            print('0\\n')\n            continue\n        options = []\n        counter = [s.count('0'), s.count('1')]\n        rest = counter[0]\n        tmp_counter = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                rest -= 1\n            else:\n                options.append(rest + tmp_counter)\n                tmp_counter += 1\n        rest = counter[1]\n        tmp_counter = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                rest -= 1\n            else:\n                options.append(rest + tmp_counter)\n                tmp_counter += 1\n        print('{0}\\n'.format(min(options)))\nmain()", "from itertools import groupby\n\ndef solve(xs):\n    sl0 = sl1 = 0\n    s = sum(xs)\n    res = s\n    sr0 = sum(xs[::2])\n    sr1 = sum(xs[1::2])\n    for (i, x) in enumerate(xs):\n        res = min(res, sl0 + sr1)\n        res = min(res, sl1 + sr0)\n        if i % 2 == 0:\n            sl0 += x\n            sr0 -= x\n        else:\n            sl1 += x\n            sr1 -= x\n    return res\nfor _ in range(int(input())):\n    s = input()\n    groups = [len(list(g)) for (k, g) in groupby(s)]\n    print(solve(groups))", "def f(s):\n    ans = len(s)\n    All1 = 0\n    All0 = 0\n    for i in s:\n        if i == '0':\n            All0 += 1\n        else:\n            All1 += 1\n    ones = 0\n    zeros = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        A = ones + All0 - zeros\n        B = zeros + All1 - ones\n        if ans > A:\n            ans = A\n        if ans > B:\n            ans = B\n    return ans\nn = int(input())\nfor i in range(n):\n    s = input()\n    print(f(s))", "def main():\n    for _ in range(int(input())):\n        (s, r) = (input(), 0)\n        (n, zf) = (len(s), s.count('0'))\n        (of, best) = (n - zf, n)\n        ob = zb = 0\n        for ch in s:\n            if ch == '0':\n                zf -= 1\n                zb += 1\n            else:\n                of -= 1\n                ob += 1\n            best = min(best, zf + zb, zf + ob, of + zb, of + ob)\n        print(best)\nmain()", "import sys\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 5)\nreadline = sys.stdin.readline\n\ndef process():\n    a = readline().rstrip()\n    (total_one, total_zero) = (0, 0)\n    for i in a:\n        if i == '0':\n            total_zero += 1\n        else:\n            total_one += 1\n    ans = float('+inf')\n    (done_zero, done_one) = (0, 0)\n    for i in a:\n        if i == '0':\n            done_zero += 1\n        else:\n            done_one += 1\n        cost1 = done_zero + total_one - done_one\n        cost2 = done_one + total_zero - done_zero\n        ans = min(ans, cost1, cost2)\n    print(ans)\nfor _ in range(int(readline())):\n    process()", "def hate(s):\n    to = 0\n    tz = 0\n    for x in s:\n        if x == '1':\n            to += 1\n        else:\n            tz += 1\n    if to == 0 or tz == 0:\n        print(0)\n        return\n    co = 0\n    cz = 0\n    mcost = None\n    for z in s:\n        if z == '1':\n            co += 1\n        else:\n            cz += 1\n        c = min(cz + to - co, co + tz - cz)\n        if mcost == None:\n            mcost = c\n            continue\n        if c < mcost:\n            mcost = c\n    print(mcost)\n    return\nt = int(input())\na = []\nfor i in range(t):\n    a.append(input())\nfor x in a:\n    hate(x)", "def check_good_str(bin_str):\n    tot_0 = 0\n    tot_1 = 0\n    for i in bin_str:\n        if i == '0':\n            tot_0 += 1\n        else:\n            tot_1 += 1\n    ans = min(tot_1, tot_0)\n    done_0 = 0\n    done_1 = 0\n    for i in bin_str:\n        if i == '0':\n            done_0 += 1\n            tot_0 -= 1\n            ans = min(ans, done_1 + tot_0)\n        else:\n            done_1 += 1\n            tot_1 -= 1\n            ans = min(ans, done_0 + tot_1)\n    return ans\nl = []\nfor i in range(int(input())):\n    l.append(check_good_str(input()))\nprint(*l, sep='\\n')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    str1 = str(input())\n    x = str1.count('0')\n    y = str1.count('1')\n    if x == 0 or y == 0:\n        print(0)\n        continue\n    (ans, a, b) = (1000000000.0, 0, 0)\n    for i in str1[:-1]:\n        if i == '1':\n            a += 1\n        else:\n            b += 1\n        ans = min(ans, b + y - a, a + x - b)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    j = input()\n    if list(j) == sorted(j) or list(j) == sorted(j)[::-1]:\n        print(0)\n    else:\n        (x, y) = (j.count('1'), j.count('0'))\n        (a, b, c, d) = (0, y, 0, x)\n        new = [y, x]\n        for k in j:\n            if k == '1':\n                a += 1\n                d -= 1\n            else:\n                b -= 1\n                c += 1\n            new.extend([a + b, c + d])\n        print(min(new))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    (n, o) = (len(s), s.count('1'))\n    (ch, c) = ([o, n - o], 0)\n    for (i, x) in enumerate(s):\n        if x == '1':\n            c += 1\n        ch.append(i + 1 - c + o - c)\n    c = 0\n    for (i, x) in enumerate(reversed(s)):\n        if x == '1':\n            c += 1\n        ch.append(i + 1 - c + o - c)\n    print(min(ch))", "for pratyush in range(int(input())):\n    (s, z, o, h) = (str(input()), 0, 0, float('inf'))\n    (a, b) = (s.count('0'), s.count('1'))\n    for i in range(len(s)):\n        if s[i] == '0':\n            z += 1\n        else:\n            o += 1\n        w = z + (b - o)\n        f = o + (a - z)\n        h = min(h, w)\n        h = min(h, f)\n    print(h)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    zeros = 0\n    ones = 0\n    temp_zeros = 0\n    temp_ones = 0\n    for i in range(len(s)):\n        char = s[i]\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n    res = min(zeros, ones)\n    for i in range(len(s)):\n        if s[i] == '0':\n            temp_zeros += 1\n        else:\n            temp_ones += 1\n        res = min(res, temp_ones + (zeros - temp_zeros))\n        res = min(res, temp_zeros + (ones - temp_ones))\n    print(res)", "for _ in range(int(input())):\n    n = input()\n    a = len(n)\n    one = 0\n    zero = 0\n    for i in range(a):\n        if n[i] == '0':\n            zero += 1\n        else:\n            one += 1\n    ans = min(zero, one)\n    z = 0\n    o = 0\n    for i in range(a):\n        if n[i] == '0':\n            z += 1\n            zero -= 1\n        else:\n            o += 1\n            one -= 1\n        ans = min(ans, o + zero, one + z)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    o = 0\n    z = 0\n    for i in s:\n        if i == '1':\n            o += 1\n        else:\n            z += 1\n    ans = min(o, z)\n    (n_0, n_1) = (0, 0)\n    for i in s:\n        if i == '1':\n            n_1 += 1\n        else:\n            n_0 += 1\n        ans = min(ans, n_1 + z - n_0)\n        ans = min(ans, n_0 + o - n_1)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) == 1 or len(s) == 2:\n        print(0)\n    else:\n        rightzeros = s.count('0')\n        rightones = s.count('1')\n        leftzeros = 0\n        leftones = 0\n        res = min(rightones, rightzeros)\n        for x in s:\n            if x == '0':\n                rightzeros -= 1\n                leftzeros += 1\n            elif x == '1':\n                rightones -= 1\n                leftones += 1\n            lzro = leftones + rightzeros\n            lorz = leftzeros + rightones\n            temp = min(lzro, lorz)\n            res = min(res, temp)\n        print(res)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input()\n    ones = 0\n    zeros = 0\n    for i in s:\n        if i == '1':\n            ones += 1\n        else:\n            zeros += 1\n    ans = min(ones, zeros)\n    d1 = 0\n    d0 = 0\n    for i in s:\n        if i == '1':\n            d1 += 1\n            ones -= 1\n        else:\n            d0 += 1\n            zeros -= 1\n        ans = min(ans, d1 + zeros)\n        ans = min(ans, d0 + ones)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    (zeros, ones) = (0, 0)\n    for ch in s:\n        if ch == '0':\n            zeros += 1\n        else:\n            ones += 1\n    sol = min(zeros, ones)\n    (pref_zeros, pref_ones) = (0, 0)\n    for ch in s:\n        if ch == '0':\n            pref_zeros += 1\n            zeros -= 1\n        else:\n            pref_ones += 1\n            ones -= 1\n        sol = min(sol, pref_zeros + ones)\n        sol = min(sol, pref_ones + zeros)\n    print(sol)", "for _ in range(int(input())):\n    s = input()\n    k = len(s)\n    a = s.count('0')\n    b = s.count('1')\n    if a == k or b == k:\n        print(0)\n        continue\n    os = k\n    zs = k\n    no = 0\n    nz = 0\n    for i in range(k):\n        if s[i] == '0':\n            no += 1\n        else:\n            nz += 1\n        os = min(os, k - i - 1 - a + 2 * no)\n        zs = min(zs, k - i - 1 - b + 2 * nz)\n    print(min(os, zs))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in s:\n        if i == '0':\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1])\n    temp = arr[-1]\n    for k in range(n):\n        ans = k + 1 - arr[k + 1] + (arr[-1] - arr[k + 1])\n        if ans < temp:\n            temp = ans\n    for k in range(n):\n        ans = arr[k + 1] + (n - (k + 1) - (arr[-1] - arr[k + 1]))\n        if ans < temp:\n            temp = ans\n    print(temp)", "from collections import Counter\n\ndef solve():\n    S = input()\n    C = Counter(S)\n    ans = min(C['0'], C['1'])\n    N = len(S)\n    zerobef = 0\n    onebef = 0\n    zeroaf = C['0']\n    oneaf = C['1']\n    for s in S:\n        if s == '0':\n            zerobef += 1\n            zeroaf -= 1\n        else:\n            onebef += 1\n            oneaf -= 1\n        now = min(zerobef + oneaf, onebef + zeroaf)\n        if now < ans:\n            ans = now\n    return ans\n\ndef main():\n    T = int(input())\n    ANS = []\n    for _ in range(T):\n        ANS.append(solve())\n    print('\\n'.join(map(str, ANS)))\nmain()", "def checker(s):\n    if len(s) < 3:\n        return 0\n    else:\n        (zeros, ones) = (s.count('0'), s.count('1'))\n        (cur_zeros, cur_ones) = (0, 0)\n        result = min(zeros, ones)\n        for elem in s:\n            if elem == '1':\n                cur_ones += 1\n            else:\n                cur_zeros += 1\n            result = min(ones - cur_ones + cur_zeros, result)\n            result = min(result, cur_ones + zeros - cur_zeros)\n        return result\nfor _ in range(int(input())):\n    print(checker(input()))", "for _ in range(int(input())):\n    string = input()\n    cost = 1000\n    lent = len(string)\n    ones = string.count('1')\n    zeros = string.count('0')\n    (c1, c0) = (0, 0)\n    for s in string:\n        if s == '1':\n            c1 += 1\n        else:\n            c0 += 1\n        cost = min(cost, c1 + zeros - c0, c0 + ones - c1)\n    print(cost)", "kl = int(input())\nfor l in range(kl):\n    s = input()\n    n = len(s)\n    ke = s.count('1')\n    kn = n - ke\n    kzpe = ke\n    kzpn = kn\n    mnpe = kzpe\n    mnpn = kzpn\n    for i in range(n):\n        if s[i] == '1':\n            kzpe -= 1\n            kzpn += 1\n        else:\n            kzpe += 1\n            kzpn -= 1\n        mnpe = min(mnpe, kzpe)\n        mnpn = min(mnpn, kzpn)\n    print(min(mnpe, mnpn))", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    s = list(map(int, list(ns())))\n    n = len(s)\n    g = sum(s)\n    c = 0\n    ans = min(g, n - g)\n    for i in range(n):\n        c += s[i]\n        ans = min(ans, c + n - 1 - i - g + c, i + 1 - c + g - c)\n    print(ans)\n    return\nT = int(input())\nfor _ in range(T):\n    solve()", "T = int(input())\nfor i in range(T):\n    s = list(input())\n    count_1 = s.count('1')\n    count_0 = s.count('0')\n    count = 1001\n    upto_ones = 0\n    upto_zeros = 0\n    for i in s:\n        if i == '0':\n            upto_zeros += 1\n        else:\n            upto_ones += 1\n        count = min(count, count_1 + upto_zeros - upto_ones, count_0 + upto_ones - upto_zeros)\n    print(count)", "t = int(input())\nfor _ in range(t):\n    s = list(input())\n    n = len(s)\n    a = s[0].count('1') + s[1:].count('0')\n    b = s[0].count('0') + s[1:].count('1')\n    res = min([a, b])\n    for i in range(1, n):\n        if s[i] == '0':\n            a -= 1\n            b += 1\n        else:\n            a += 1\n            b -= 1\n        res = min([res, a, b])\n    print(res)", "t = int(input())\nfor i in range(t):\n    s = input()\n    c0 = s.count('0')\n    c1 = s.count('1')\n    x1 = 0\n    y1 = 0\n    l = []\n    m = []\n    for j in s:\n        l.append(y1 + c0)\n        m.append(x1 + c1)\n        if j == '0':\n            x1 += 1\n            c0 -= 1\n        else:\n            y1 += 1\n            c1 -= 1\n    print(min(min(l), min(m)))", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(test):\n    s = input()\n    n = len(s)\n    (ones, zeros) = (0, 0)\n    for c in s:\n        if c == '1':\n            ones += 1\n        else:\n            zeros += 1\n    if ones == n or zeros == n:\n        print(0)\n        return\n    (ones_so_far, zeros_so_far) = (0, 0)\n    ans = sys.maxsize\n    for i in range(n):\n        if s[i] == '1':\n            ones_so_far += 1\n        else:\n            zeros_so_far += 1\n        pre_ones = zeros_so_far + ones - ones_so_far\n        post_ones = ones_so_far + zeros - zeros_so_far\n        ans = min(ans, pre_ones, post_ones)\n    print(ans)\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "def check(s):\n    n = len(s)\n    result = n\n    total_ones = 0\n    total_zeroes = 0\n    for i in s:\n        if i == '1':\n            total_ones += 1\n        else:\n            total_zeroes += 1\n    done_ones = 0\n    done_zeroes = 0\n    for i in s:\n        if i == '1':\n            done_ones += 1\n        else:\n            done_zeroes += 1\n        result = min(result, done_zeroes + total_ones - done_ones)\n        result = min(result, done_ones + total_zeroes - done_zeroes)\n    return result\nt = int(input())\nwhile t:\n    s = input()\n    print(check(s))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    s = input()\n    total_ones = 0\n    total_zeros = 0\n    done_ones = 0\n    done_zeros = 0\n    min1 = float('inf')\n    min2 = float('inf')\n    for i in s:\n        if i == '0':\n            total_zeros += 1\n        else:\n            total_ones += 1\n    for i in s:\n        if i == '0':\n            done_zeros += 1\n        else:\n            done_ones += 1\n        temp1 = done_ones + total_zeros - done_zeros\n        if min1 > temp1:\n            min1 = temp1\n        temp2 = done_zeros + total_ones - done_ones\n        if min2 > temp2:\n            min2 = temp2\n    print(min(min1, min2))", "t = int(input())\nfor i in range(t):\n    string = list(input())\n    if len(string) < 3:\n        print(0)\n    else:\n        zeros = 0\n        ones = 0\n        min_changes = 2000\n        zeros_total = string.count('0')\n        ones_total = len(string) - zeros_total\n        for i in range(len(string)):\n            if string[i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            changes = min(ones + zeros_total - zeros, zeros + ones_total - ones)\n            if changes < min_changes:\n                min_changes = changes\n        print(min_changes)", "for _ in range(int(input())):\n    s = input()\n    o = s.count('1')\n    z = len(s) - o\n    ones = 0\n    zeros = 0\n    ans = len(s)\n    for i in range(len(s)):\n        if s[i] == '1':\n            ones += 1\n        else:\n            zeros += 1\n        ans = min(ans, zeros + o - ones, ones + z - zeros)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    s = input()\n    num_one = s.count('1')\n    num_zero = s.count('0')\n    done_one = 0\n    done_zero = 0\n    cost_1100 = []\n    cost_0011 = []\n    if s == '101' or s == '010':\n        print('1')\n    elif len(s) < 4:\n        print('0')\n    else:\n        for i in range(len(s)):\n            if s[i] == '1':\n                done_one += 1\n            else:\n                done_zero += 1\n            cost_1100.insert(-1, done_zero + num_one - done_one)\n            cost_0011.insert(-1, done_one + num_zero - done_zero)\n        a = min(cost_1100)\n        b = min(cost_0011)\n        if a <= b:\n            print(a)\n        else:\n            print(b)", "import sys\nI = sys.stdin.readline\nans = ''\nfor _ in range(int(I())):\n    s = I().strip()\n    if len(s) < 3:\n        ans += '0\\n'\n    else:\n        count_0 = s.count('0')\n        count_1 = s.count('1')\n        a = 0\n        b = 0\n        cnt = 100000\n        for i in s:\n            if i == '0':\n                a += 1\n            else:\n                b += 1\n            cnt = min(cnt, a + count_1 - b, b + count_0 - a)\n        ans += str(cnt) + '\\n'\nprint(ans)", "t = int(input())\nfor ii in range(t):\n    s = input()\n    c0 = s.count('0')\n    c1 = s.count('1')\n    if c0 == 0 or c1 == 0:\n        print(0)\n    else:\n        curcnt0 = curcnt1 = 0\n        ans = 100000001\n        for i in range(len(s)):\n            if s[i] == '0':\n                curcnt0 += 1\n            else:\n                curcnt1 += 1\n            ans = min(ans, curcnt1 + c0 - curcnt0, curcnt0 + c1 - curcnt1)\n        print(ans)", "def subsequence_hate(n, s):\n    c_0 = 0\n    c_1 = 0\n    for i in range(n):\n        if s[i] == '0':\n            c_0 += 1\n        else:\n            c_1 += 1\n    ans = min(c_0, c_1)\n    left_0 = 0\n    left_1 = 0\n    for i in range(n):\n        if s[i] == '0':\n            left_0 += 1\n        else:\n            left_1 += 1\n        right_0 = c_0 - left_0\n        right_1 = c_1 - left_1\n        cost_1 = left_1 + right_0\n        cost_2 = left_0 + right_1\n        ans = min(ans, cost_1, cost_2)\n    return ans\nT = int(input())\nfor i in range(T):\n    st = input()\n    print(subsequence_hate(len(st), st))", "for _ in range(int(input())):\n    s = input()\n    zf = s.count('0')\n    of = len(s) - zf\n    best = min(zf, of)\n    ob = zb = 0\n    for ch in s:\n        if ch == '0':\n            zf -= 1\n            zb += 1\n        else:\n            of -= 1\n            ob += 1\n        best = min(best, zf + ob, of + zb)\n    print(best)", "for _ in range(int(input())):\n    s = input()\n    n = 1000000000\n    a = b = 0\n    (o, z) = (s.count('1'), s.count('0'))\n    for c in s:\n        if c == '1':\n            a += 1\n        else:\n            b += 1\n        n = min(n, a + z - b, o - a + b)\n    print(n)", "for i in range(int(input())):\n    inp = input()\n    n = 1000000000\n    x = y = 0\n    (o, z) = (inp.count('1'), inp.count('0'))\n    for j in inp:\n        if j == '1':\n            x += 1\n        else:\n            y += 1\n        n = min(n, x + z - y, o - x + y)\n    print(n)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    ones = s.count('1')\n    t_o = ones\n    n = len(s)\n    zeros = n - ones\n    t_z = zeros\n    arr = []\n    for i in range(n - 1, -1, -1):\n        arr.append(min(ones + t_z - zeros, zeros + t_o - ones))\n        if s[i] == '1':\n            ones -= 1\n        else:\n            zeros -= 1\n    print(min(arr))", "num_inputs = int(input())\nfor c in range(num_inputs):\n    string = input()\n    converted_string = []\n    temp_char = string[0]\n    temp_length = 0\n    for char in string:\n        if char == temp_char:\n            temp_length += 1\n        else:\n            temp_char = char\n            converted_string.append(temp_length)\n            temp_length = 1\n    converted_string.append(temp_length)\n    min_flips = 100000\n    flip_counter_odd = 0\n    flip_counter_even = 0\n    back_odd = 0\n    back_even = 0\n    for index in range(len(converted_string)):\n        if index % 2 == 0:\n            back_even += converted_string[index]\n        else:\n            back_odd += converted_string[index]\n    front_even = 0\n    front_odd = 0\n    for index in range(len(converted_string)):\n        if index % 2 == 0:\n            front_even += converted_string[index]\n            back_even -= converted_string[index]\n        else:\n            front_odd += converted_string[index]\n            back_odd -= converted_string[index]\n        flip_counter_even = front_odd + back_even\n        flip_counter_odd = front_even + back_odd\n        if flip_counter_odd < min_flips:\n            min_flips = flip_counter_odd\n        if flip_counter_even < min_flips:\n            min_flips = flip_counter_even\n    print(min_flips)", "def tc():\n    s = input()\n    ztot = 0\n    otot = 0\n    for ch in s:\n        if ch == '0':\n            ztot += 1\n        else:\n            otot += 1\n    ans = min(ztot, otot)\n    pref0 = 0\n    pref1 = 0\n    for ch in s:\n        if ch == '0':\n            pref0 += 1\n        else:\n            pref1 += 1\n        ans = min(ans, pref1 + ztot - pref0, pref0 + otot - pref1)\n    return ans\nT = int(input())\nfor _ in range(T):\n    ans = tc()\n    print(ans)", "for item in [0] * int(input()):\n    a = input()\n    zero = a.count('0')\n    one = a.count('1')\n    p0 = 0\n    p1 = 0\n    s0 = zero - p0\n    s1 = one - p1\n    mini = float('inf')\n    for item in a:\n        if item == '0':\n            p0 += 1\n            s0 = zero - p0\n        else:\n            p1 += 1\n            s1 = one - p1\n        mini = min(p0 + s1, p1 + s0, mini)\n    print(mini)", "def f(border):\n    if border == 0 or border == len(s):\n        return min(ones[-1], zeros[-1])\n    return min(ones[border - 1] + zeros[-1] - zeros[border - 1], zeros[border - 1] + ones[-1] - ones[border - 1])\nfor _ in range(int(input())):\n    s = list(map(int, input()))\n    answer = float('inf')\n    ones = [int(s[0] == 1)]\n    for i in range(1, len(s)):\n        ones.append(ones[-1] + (s[i] == 1))\n    zeros = [i + 1 - ones[i] for i in range(len(s))]\n    print(min((f(i) for i in range(len(s) + 1))))", "for _ in range(int(input())):\n    s = str(input())\n    ans = 1000\n    n = len(s)\n    if n <= 2:\n        print(0)\n        continue\n    t = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == '0':\n            t[i] = t[i - 1] + 1\n        else:\n            t[i] = t[i - 1]\n    z = t[-1]\n    o = n - z\n    ans = 1000\n    for i in range(1, n + 1):\n        tmp = min(i - t[i] + z - t[i], t[i] + o - i + t[i])\n        ans = min(ans, tmp)\n    print(min(ans, o, z))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    count_0 = 0\n    count_1 = 0\n    for c in s:\n        if c == '0':\n            count_0 += 1\n        if c == '1':\n            count_1 += 1\n    min_change = len(s)\n    current_0 = 0\n    current_1 = 0\n    for c in s:\n        if c == '0':\n            current_0 += 1\n        if c == '1':\n            current_1 += 1\n        current_change = min(current_0, current_1) + min(abs(count_0 - current_0), abs(count_1 - current_1))\n        if current_change < min_change:\n            min_change = current_change\n    print(min_change)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    (suf0, suf1) = (0, 0)\n    for i in s:\n        suf0 += i == '0'\n        suf1 += i == '1'\n    ans = min(suf0, suf1)\n    (pref0, pref1) = (0, 0)\n    for i in s:\n        (pref0, suf0) = (pref0 + (i == '0'), suf0 - (i == '0'))\n        (pref1, suf1) = (pref1 + (i == '1'), suf1 - (i == '1'))\n        ans = min(ans, pref0 + suf1, pref1 + suf0)\n    print(ans)", "import math\nimport sys\nfrom sys import stdin\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input()\n    c1 = s.count('1')\n    c0 = s.count('0')\n    dp = []\n    temp1 = 0\n    temp0 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            l = min(temp1 + c0 - temp0, c1 - temp1 + temp0)\n            dp.append(l)\n            temp0 += 1\n        else:\n            dp.append(min(temp0 + c1 - temp1, c0 - temp0 + temp1))\n            temp1 += 1\n    print(min(dp))", "def subsequence_hate(string):\n    count_ones = sum((1 for c in string if c == '1'))\n    count_zeros = len(string) - count_ones\n    ones = 0\n    zeros = 0\n    onesthenzeroscost = -1\n    zerosthenonescost = -1\n    best = float('inf')\n    for i in range(len(string)):\n        if string[i] == '1':\n            ones += 1\n        else:\n            zeros += 1\n        onesthenzeroscost = zeros + count_ones - ones\n        zerosthenonescost = ones + count_zeros - zeros\n        best = min(best, min(onesthenzeroscost, zerosthenonescost))\n    return best\nfor _ in range(int(input())):\n    print(subsequence_hate(input()))", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "t = int(input())\nfor Adun in range(t):\n    s = input()\n    ones_right = 0\n    zeroes_right = 0\n    ones_left = 0\n    zeroes_left = 0\n    for i in s:\n        if i == '1':\n            ones_right += 1\n        else:\n            zeroes_right += 1\n    answer = len(s)\n    answer = min(answer, ones_right, zeroes_right)\n    for i in s:\n        if i == '1':\n            ones_right -= 1\n            ones_left += 1\n        else:\n            zeroes_right -= 1\n            zeroes_left += 1\n        answer = min(answer, ones_left + zeroes_right, zeroes_left + ones_right)\n    print(answer)", "for _ in range(int(input())):\n    s = input()\n    n = 1000000000\n    a = b = 0\n    (o, z) = (s.count('1'), s.count('0'))\n    for c in s:\n        if c == '1':\n            a += 1\n        else:\n            b += 1\n        n = min(n, a + z - b, o - a + b)\n    print(n)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    flips = 0\n    for bit in s:\n        if bit == '0':\n            flips += 1\n    min_flips = flips\n    for bit in s:\n        flips += 1 if bit == '1' else -1\n        if flips < min_flips:\n            min_flips = flips\n    flips = 0\n    for bit in s:\n        if bit == '1':\n            flips += 1\n    for bit in s:\n        flips += 1 if bit == '0' else -1\n        if flips < min_flips:\n            min_flips = flips\n    print(min_flips)", "for _ in range(int(input())):\n    s = str(input())\n    one = s.count('1')\n    zero = s.count('0')\n    ans = min(one, zero)\n    (a, b) = (0, 0)\n    for i in s:\n        if i == '1':\n            a += 1\n        else:\n            b += 1\n        ans = min(a + zero - b, b + one - a, ans)\n    print(ans)", "def get_distance(binary_str):\n    distance = [[binary_str[0], 1]]\n    for i in range(1, len(binary_str)):\n        if binary_str[i] == distance[-1][0]:\n            distance[-1][1] += 1\n        else:\n            distance.append([binary_str[i], 1])\n    return distance\n\ndef solution_headed(distance, bit):\n    s = sum([el[1] for el in distance if el[0] == bit])\n    solution = float('inf')\n    prev_sum = 0\n    for el in distance:\n        if el[0] != bit:\n            solution = min(solution, prev_sum + s)\n            prev_sum += el[1]\n        else:\n            s -= el[1]\n    return min(solution, sum([el[1] for el in distance if el[0] != bit]))\n\ndef solution(binary_str):\n    distance = get_distance(binary_str)\n    if len(distance) <= 2:\n        return 0\n    zero_headed = solution_headed(distance, '0')\n    one_headed = solution_headed(distance, '1')\n    return min(zero_headed, one_headed)\nresults = []\nfor _ in range(int(input())):\n    binary_str = input()\n    results.append(str(solution(binary_str)))\nprint('\\n'.join(results))", "T = int(input())\nfor _ in range(T):\n    s = input()\n    ans = len(s)\n    tot_zeros = sum([c == '0' for c in s])\n    tot_ones = sum([c == '1' for c in s])\n    curr_zeros = 0\n    curr_ones = 0\n    for i in range(len(s)):\n        ans = min(ans, min(curr_ones, curr_zeros) + min(tot_ones - curr_ones, tot_zeros - curr_zeros))\n        if s[i] == '0':\n            curr_zeros += 1\n        else:\n            curr_ones += 1\n    print(ans)", "def solve(s):\n    n = len(s)\n    ans = 1000000\n    if n <= 2:\n        return 0\n    f0 = 0\n    l0 = s.count('0')\n    f1 = 0\n    l1 = n - l0\n    for i in range(len(s)):\n        if s[i] == '0':\n            f0 += 1\n            l0 -= 1\n        if s[i] == '1':\n            f1 += 1\n            l1 -= 1\n        ans = min(ans, f0 + l1, f1 + l0, f1 + l1, f0 + l0)\n    return ans\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(solve(s))", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef num_moves(s):\n    counter = Counter(s)\n    num_ones = counter['1']\n    num_zeros = counter['0']\n    cur_ones = 0\n    cur_zeros = 0\n    res = float('inf')\n    for ch in s:\n        zero_one = cur_ones + (num_zeros - cur_zeros)\n        if ch == '0':\n            zero_one -= 1\n        one_zero = cur_zeros + (num_ones - cur_ones)\n        if ch == '1':\n            one_zero -= 1\n        res = min([zero_one, one_zero, res])\n        if ch == '0':\n            cur_zeros += 1\n        else:\n            cur_ones += 1\n    return res\nnum_tests = inp()\nfor _ in range(num_tests):\n    s = input()\n    print(num_moves(s))", "for _ in range(int(input())):\n    s = input()\n    one = s.count('1')\n    zero = s.count('0')\n    ans = min(zero, one)\n    one2 = zero2 = 0\n    for item in s:\n        if item == '0':\n            zero -= 1\n            zero2 += 1\n        else:\n            one -= 1\n            one2 += 1\n        ans = min(ans, zero + one2)\n        ans = min(ans, one + zero2)\n    print(ans)", "from sys import stdin, stdout\nfor i in range(int(input())):\n    s = input()\n    l = len(s)\n    (c1, c0) = (0, 0)\n    for i in s:\n        if i == '0':\n            c0 += 1\n        else:\n            c1 += 1\n    ans = l\n    x0 = 0\n    x1 = 0\n    for i in s:\n        if i == '0':\n            x0 += 1\n        else:\n            x1 += 1\n        ans = min(x1 + c0 - x0, x0 + c1 - x1, ans)\n    ans = min(ans, c1, c0)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    num_ones = s.count('1')\n    num_zeroes = s.count('0')\n    cost = 1001\n    done_zeroes = 0\n    done_ones = 0\n    for i in range(num_ones + num_zeroes):\n        if s[i] == '0':\n            done_zeroes += 1\n        else:\n            done_ones += 1\n        cost = min(cost, done_zeroes + num_ones - done_ones, done_ones + num_zeroes - done_zeroes)\n    print(cost)", "def fn():\n    s = input()\n    n = len(s)\n    z = s.count('0')\n    o = n - z\n    if z == 0 or o == 0:\n        return 0\n    (pz, po, m) = (0, 0, 10 ** 9)\n    for i in range(n):\n        if s[i] == '0':\n            pz += 1\n        else:\n            po += 1\n        c = min(pz + (o - po), po + (z - pz))\n        m = min(c, m)\n    return m\nfor _ in range(int(input())):\n    print(fn())", "for _ in range(int(input())):\n    s = input()\n    n = 1000000000\n    a = b = 0\n    ones = s.count('1')\n    zeros = s.count('0')\n    for ch in s:\n        if ch == '1':\n            a += 1\n        else:\n            b += 1\n        n = min(n, a + zeros - b, ones - a + b)\n    print(n)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    ans = s.count('1')\n    costZ = ans\n    costO = s.count('0')\n    for x in s:\n        if x == '1':\n            costZ -= 1\n            costO += 1\n        else:\n            costZ += 1\n            costO -= 1\n        ans = min(ans, min(costZ, costO))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = list(input())\n    n = len(s)\n    k = s.count('0')\n    m = s.count('1')\n    ans = m\n    for i in range(n):\n        if s[i] == '0':\n            k = k - 1\n            m = m + 1\n        else:\n            k = k + 1\n            m = m - 1\n        ans = min(ans, min(m, k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    data = list(input())\n    zeros = data.count('0')\n    ones = data.count('1')\n    result = 10000\n    (a, b) = (0, 0)\n    for i in range(len(data)):\n        if data[i] == '0':\n            a += 1\n        elif data[i] == '1':\n            b += 1\n        result = min(result, a + ones - b, b + zeros - a)\n    print(result)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    sufix_0 = s.count('0')\n    sufix_1 = s.count('1')\n    prefix_0 = 0\n    prefix_1 = 0\n    ans = float('+inf')\n    for i in s:\n        if i == '0':\n            prefix_0 += 1\n            sufix_0 -= 1\n        else:\n            prefix_1 += 1\n            sufix_1 -= 1\n        ans = min(ans, min(prefix_1 + sufix_0, prefix_0 + sufix_1))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    count_z = count_o = 0\n    for ch in s:\n        if ch == '1':\n            count_o += 1\n        else:\n            count_z += 1\n    if count_z == 0 or count_o == 0:\n        print(0)\n    else:\n        min_val = len(s)\n        yet_z = yet_o = 0\n        for ch in s:\n            if ch == '1':\n                yet_o += 1\n            else:\n                yet_z += 1\n            min_val = min(min_val, yet_o + count_z - yet_z, yet_z + count_o - yet_o)\n        print(min_val)", "for t in range(int(input())):\n    s = input()\n    n = len(s)\n    done_zero = 0\n    done_one = 0\n    num_zero = list(s).count('0')\n    num_one = list(s).count('1')\n    m = 1001\n    for i in range(n):\n        if s[i] == '0':\n            done_zero += 1\n        else:\n            done_one += 1\n        m = min(m, done_zero + num_one - done_one, done_one + num_zero - done_zero)\n    m = min(m, num_one, num_zero)\n    print(m)", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    (ones, zeros) = (s.count('1'), s.count('0'))\n    (o, z) = (ones, zeros)\n    arr = []\n    for i in range(n - 1, -1, -1):\n        arr.append(min(ones + z - zeros, zeros + o - ones))\n        if s[i] == '1':\n            ones -= 1\n        else:\n            zeros -= 1\n    print(min(arr))", "N = int(input())\nfor i in range(N):\n    S = input()\n    k = len(S)\n    x = y = 0\n    for i in S:\n        if i == '0':\n            y += 1\n        else:\n            x += 1\n    a = b = 0\n    for i in range(k):\n        if S[i] == '0':\n            b += 1\n        else:\n            a += 1\n        A = a + y - b\n        B = b + x - a\n        if k > A:\n            k = A\n        if k > B:\n            k = B\n    print(k)", "for s in [*open(0)][1:]:\n    n = m = len(s) - 1\n    x = s.count('1')\n    for c in s[:-1]:\n        m = min(m, x, n - x)\n        x += 1 - 2 * int(c)\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    r1 = s.count('1')\n    r0 = s.count('0')\n    one = 0\n    zero = 0\n    p = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            zero += 1\n            r0 -= 1\n        else:\n            one += 1\n            r1 -= 1\n        p.append(min(r1 + zero, r0 + one))\n    print(min(p))"]