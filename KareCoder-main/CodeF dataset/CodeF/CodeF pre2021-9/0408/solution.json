["def JourneyPlanning(n, b):\n    dp = [0] * 10 ** 6\n    for i in range(n):\n        a = b[i] - i\n        dp[a] = dp[a] + b[i]\n    return max(dp)\n    if n == 1:\n        return b[0]\n    if n == 200000:\n        return 60000100000\n    dp = [[[]]]\n    globalmax = b[0]\n    dp[0][0] = b[0]\n    for i in range(1, n):\n        dp.append([])\n        for j in range(i + 1):\n            dp[i].append([])\n            if i == j:\n                dp[i][j] = dp[i][j - 1]\n            elif i - j == b[i] - b[j]:\n                dp[i][j] = dp[j][j] + b[i]\n            elif j == 0:\n                dp[i][j] = b[i]\n            else:\n                dp[i][j] = dp[i][j - 1]\n            if globalmax < dp[i][j]:\n                globalmax = dp[i][j]\n    return globalmax\nn = int(input())\na = list(map(int, input().rstrip().split()))\nans = JourneyPlanning(n, a)\nprint(ans)", "def solve(n, a):\n    d = {}\n    for i in range(n):\n        diffs = a[i] - i\n        d[diffs] = d.get(diffs, 0) + a[i]\n    return max(d.values())\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "n = int(input())\nc = {}\nfor (i, x) in enumerate(map(int, input().split())):\n    d = x - i\n    c[d] = c.get(d, 0) + x\nprint(max(c.values()))", "n = int(input())\nbeauty_values = list(map(int, input().split()))\ncombinations = {}\nif len(beauty_values) == 1:\n    print(beauty_values[0])\n    exit()\nfor i in range(len(beauty_values)):\n    difference = beauty_values[i] - i\n    if difference not in combinations:\n        combinations[difference] = beauty_values[i]\n    else:\n        combinations[difference] += beauty_values[i]\nprint(max(combinations.values()))", "n = int(input())\narr = list(map(int, input().split()))\nm = {}\nfor i in range(n):\n    z = arr[i] - i\n    if z in m:\n        m[z] += arr[i]\n    else:\n        m[z] = arr[i]\nprint(max(m.values()))", "from collections import Counter\n\ndef solve(n, a):\n    diffs = [0] * n\n    for i in range(n):\n        diffs[i] = a[i] - i\n    d = {}\n    for i in range(n):\n        d[diffs[i]] = d.get(diffs[i], 0) + a[i]\n    return max(d.values())\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "from collections import defaultdict\nn = int(input())\nb = map(int, input().split())\nd = defaultdict(lambda : 0)\nfor (i, el) in enumerate(b):\n    d[el - i] += el\nprint(max(d.values()))", "n = int(input())\nbeauty = list(map(int, input().split()))\ndic = {}\nfor i in range(n):\n    dic[i - beauty[i]] = dic.get(i - beauty[i], 0) + beauty[i]\nprint(max(dic.values()))", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in range(len(l)):\n    x = l[i] - i\n    if x in d:\n        d[x] += l[i]\n    else:\n        d[x] = l[i]\nprint(max(d.values()))", "from collections import defaultdict\nn = int(input())\nb = list(map(int, input().split()))\ni = 0\ncandidates = defaultdict(int)\nfor x in b:\n    candidates[x - i] = candidates[x - i] + x\n    i += 1\nprint(max(candidates.values()))", "n = int(input())\nbeauty_values = list(map(int, input().split()))\ncombinations = {}\nif len(beauty_values) == 1:\n    print(beauty_values[0])\n    exit()\nfor i in range(len(beauty_values)):\n    difference = beauty_values[i] - i\n    if difference not in combinations:\n        combinations[difference] = beauty_values[i]\n    else:\n        combinations[difference] += beauty_values[i]\nprint(max(combinations.values()))", "from collections import Counter\nn = int(input())\nb = list(map(int, input().split()))\nb1 = b.copy()\ndct = {}\nfor i in range(n):\n    b1[i] -= i + 1\nfor (i, item) in enumerate(b1):\n    if item in dct:\n        dct[item] += b[i]\n    else:\n        dct[item] = b[i]\nl = list(dct.values())\nl.sort(reverse=True)\nprint(l[0])", "def solve(n, cities):\n    ans = {}\n    for index in range(n):\n        if ans.get(index - cities[index]) != None:\n            ans[index - cities[index]] += cities[index]\n        else:\n            ans[index - cities[index]] = cities[index]\n    maximum = 0\n    for v in ans.values():\n        if v > maximum:\n            maximum = v\n    return maximum\nn = int(input())\ncities = list(map(int, input().split()))\nprint(solve(n, cities))", "n = int(input())\nq = [*map(int, input().split())]\nw = [i + 1 - q[i] for i in range(n)]\ne = {}\nfor i in range(n):\n    if w[i] in e:\n        e[w[i]] += q[i]\n    else:\n        e[w[i]] = q[i]\nprint(max(e.values()))", "class Solution:\n\n    def getMaxBeauty(self, n: int, b) -> int:\n        Hash = {}\n        for i in range(n):\n            Hash[b[i] - i] = Hash.get(b[i] - i, 0) + b[i]\n        return max(Hash.values())\nn = int(input())\nb = list(map(int, input().split()))\nobj = Solution()\nprint(obj.getMaxBeauty(n, b))", "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    input()\n    bb = LI()\n    score = defaultdict(int)\n    for (i, b) in enumerate(bb):\n        d = b - i\n        score[d] += b\n    print(max(score.values()))\nmain()", "size = int(input())\nmyList = list(map(int, input().split()))\ncapture = [0] * 800001\nfor k in range(size):\n    capture[myList[k] - k] += myList[k]\nprint(max(capture))", "n = int(input())\narr = map(int, input().split())\nval = {}\ni = 1\nfor b in arr:\n    diff = i - b\n    if diff in val:\n        val[diff] += b\n    else:\n        val[diff] = b\n    i += 1\nmax = -1\nfor sum in val:\n    if val[sum] > max:\n        max = val[sum]\nprint(max)", "n = int(input())\ndic = {}\ni = 0\nfor x in list(map(int, input().split())):\n    dic[x - i] = dic.get(x - i, 0) + x\n    i += 1\nprint(max(dic.values()))", "from collections import defaultdict\n\ndef max_beauty(values):\n    diff = [x - i for (i, x) in enumerate(values)]\n    vals = defaultdict(int)\n    for (i, x) in enumerate(diff):\n        vals[x] += x + i\n    return max(vals.values())\nn = input()\nlst = map(int, list(input().split()))\nprint(max_beauty(lst))", "n = int(input())\np = [*map(int, input().split())]\nd = {}\ni = 0\nfor x in p:\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "n = int(input())\np = [*map(int, input().split())]\nd = {}\ni = 0\nfor x in p:\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "input()\nb = list(map(int, input().split()))\ng = {}\nj = 0\nfor i in b:\n    g[i - j] = g.get(i - j, 0) + i\n    j += 1\nprint(max(g.values()))", "input()\nEssi = {}\nind = 1\nfor a in map(int, input().split()):\n    Essi[a - ind] = Essi.get(a - ind, 0) + a\n    ind += 1\nprint(max(Essi.values()))", "input()\nans = {}\ni = 0\nfor x in input().strip().split():\n    x = int(x)\n    ans[i - x] = ans.get(i - x, 0) + x\n    i += 1\nprint(max(ans.values()))", "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    d[a[i] - i] = d.get(a[i] - i, 0) + a[i]\nprint(max(list(d.values())))", "input()\nz = dict()\ni = 0\nfor k in map(int, input().split()):\n    z[k - i] = z.get(k - i, 0) + k\n    i += 1\nprint(max(z.values()))", "n = int(input())\nd = list(map(int, input().split()))[:n]\ndi = dict()\nans = 0\nfor (i, n) in enumerate(d):\n    h = n - i\n    if h not in di:\n        di[h] = n\n    else:\n        di[h] += n\nprint(max(di.values()))", "n = int(input())\nd = {}\ni = 1\nfor x in list(map(int, input().split())):\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "n = int(input())\nl = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    v = l[i] - i\n    if v in d:\n        d[v] += l[i]\n    else:\n        d[v] = l[i]\nprint(max(d.values()))", "import sys\nI = lambda : int(input())\nreadline = lambda : sys.stdin.readline().strip('\\n')\nRM = readmap = lambda x=int: map(x, readline().split(' '))\nd = {}\nfor (i, x) in zip(range(I()), RM()):\n    d[x - i] = d.get(x - i, 0) + x\nprint(max(d.values()))\nquit()\n(n, a, b) = (I(), [*RM()], [*RM()])\n(count1, count2) = (0, 0)\nfor (i, j) in zip(a, b):\n    count1 += i & ~j\n    count2 += j & ~i\nprint(divmod(count2, count1)[0] + 1 if count1 else -1)", "def f(a):\n    dc = {}\n    ans = 0\n    for i in range(len(a)):\n        dc[a[i] - i] = dc.get(a[i] - i, 0) + a[i]\n        ans = max(ans, dc[a[i] - i])\n    return ans\na = input()\nl = list(map(int, input().strip().split()))\nprint(f(l))", "def a():\n    n = int(input())\n    b = list(map(int, input().strip().split()))\n    d = {}\n    for i in range(n):\n        if b[i] - i - 1 not in d:\n            d[b[i] - i - 1] = 0\n        d[b[i] - i - 1] += b[i]\n    ans = -1\n    for k in d:\n        ans = max(ans, d[k])\n    print(ans)\na()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    a = [0] * int(800000.0 + 100)\n    b = list(mints())\n    for i in range(n):\n        a[b[i] - i] += b[i]\n    print(max(a))\nsolve()", "from collections import defaultdict\nn = int(input())\nbs = list(map(int, input().split()))\nadjusted = [bci - ci for (ci, bci) in enumerate(bs)]\ngroups = defaultdict(int)\nfor (adj, b) in zip(adjusted, bs):\n    groups[adj] += b\nprint(max(groups.values()))", "MAXVAL = 4 * 10 ** 5\nn = int(input())\nbeau = list(map(int, input().split()))\ndp = [0] * (2 * MAXVAL + 2)\nfor i in range(n):\n    dp[beau[i] - i - MAXVAL] += beau[i]\nprint(max(dp))", "input()\nd = {}\ni = 0\nfor x in map(int, input().split()):\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "from collections import defaultdict\nN = int(input())\nB = list(map(int, input().split()))\nroute = defaultdict(int)\nfor (i, beauty) in enumerate(B):\n    route[beauty - i] += beauty\nprint(max(route.values()))", "def solution():\n    from sys import stdout, stdin\n    (_input, _print) = (stdin.readline, stdout.write)\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    from collections import defaultdict\n    ans = defaultdict(int)\n    for i in range(n):\n        ans[arr[i] - i] += arr[i]\n    print(max(ans.values()))\nsolution()", "import collections as cc\nf = cc.defaultdict(lambda : [])\nd = cc.defaultdict(int)\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    d[l[i] - i] += l[i]\nprint(max(d.values()))", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in range(len(l)):\n    x = i + 1 - l[i]\n    if x in d:\n        d[x] += l[i]\n    else:\n        d[x] = l[i]\na = list(d.values())\nprint(max(a))", "n = int(input())\nbs = list(map(int, input().split(' ')))\nmp = {}\nfor i in range(n):\n    k = bs[i] - i\n    if k not in mp.keys():\n        mp[k] = bs[i]\n    else:\n        mp[k] += bs[i]\nans = max(mp.values())\nprint(ans)", "n = int(input())\nb = list(map(int, input().split()))\ng = {}\nfor j in range(n):\n    g[b[j] - j] = g.get(b[j] - j, 0) + b[j]\nprint(max(g.values()))", "n = int(input())\nb = list(map(int, input().split()))\ng = {}\nfor j in range(n):\n    g[b[j] - j] = g.get(b[j] - j, 0) + b[j]\nprint(max(g.values()))", "from collections import defaultdict\ninput()\ng = defaultdict(int)\nj = 0\nfor i in map(int, input().split()):\n    g[i - j] += i\n    j += 1\nprint(max(g.values()))", "from collections import defaultdict\ninput()\nb = list(map(int, input().split()))\ng = defaultdict(int)\nj = 0\nfor i in b:\n    g[i - j] += i\n    j += 1\nprint(max(g.values()))", "from collections import defaultdict\ninput()\nbest = defaultdict(int)\na = [int(x) for x in input().split()]\nfor (i, ai) in enumerate(a):\n    best[ai - i] += ai\nprint(best[max(best, key=best.get)])", "input()\nd = {}\ni = 1\nfor x in map(int, input().split()):\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "n = int(input())\nb = list(map(int, input().split()))\na = [b[i] - i for i in range(n)]\nd = {}\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = b[i]\n    else:\n        d[a[i]] += b[i]\nprint(max(list(d.values())))", "n = int(input())\nb = list(map(int, input().split()))\nlist1 = {}\nval = []\nfor i in range(n):\n    if i - b[i] in list1:\n        list1[i - b[i]] += b[i]\n    else:\n        list1[i - b[i]] = b[i]\nprint(max(list1.values()))", "pathScores = dict()\nnumCities = int(input())\nbeauties = [int(i) for i in input().split()]\nfor cNum in range(numCities):\n    key = beauties[cNum] - cNum\n    if key in pathScores:\n        pathScores[key] += beauties[cNum]\n    else:\n        pathScores[key] = beauties[cNum]\nprint(pathScores[max(pathScores, key=pathScores.get)])", "from collections import defaultdict\nt = input()\nb = list(map(int, input().split()))\ng = defaultdict(int)\nj = 0\nfor i in b:\n    g[i - j] += i\n    j += 1\nprint(max(g.values()))", "n = int(input())\nb = list(map(int, input().split()))\ns = dict()\nfor i in range(n):\n    x = b[i] - i\n    y = b[i]\n    if x in s:\n        s[x] += y\n    else:\n        s[x] = y\nprint(max(s.values()))", "import sys\nlines = sys.stdin.readlines()\nN = int(lines[0])\nBV = list(map(int, lines[1].strip().split(' ')))\nc = 0\nd = 0\nvalue = {}\nfor i in range(N):\n    temp = BV[i] - i\n    if temp not in value:\n        value[temp] = BV[i]\n    else:\n        value[temp] += BV[i]\nprint(max(list(value.values())))", "n = int(input())\narr = [int(x) for x in input().split()]\nmap = {}\nfor (i, x) in enumerate(arr):\n    idx = x - (i + 1)\n    if idx in map:\n        map[idx] += x\n    else:\n        map[idx] = x\nprint(max(map.values()))", "n = int(input())\ncollect = {}\ni = 0\nfor x in map(int, input().split()):\n    collect[x - i] = collect.get(x - i, 0) + x\n    i += 1\nprint(max(collect.values()))", "t = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(t):\n    f = a[i] - i\n    if f not in d.keys():\n        d[f] = a[i]\n    else:\n        d[f] += a[i]\nprint(max(d.values()))", "t = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(t):\n    f = a[i] - i\n    if f not in d.keys():\n        d[f] = a[i]\n    else:\n        d[f] += a[i]\nprint(max(d.values()))", "import sys\nn = int(input())\nif 1 <= n <= 2 * 10 ** 5:\n    lst = list(map(int, input().split()))\n    if len(lst) < n:\n        print('Enter all the input correctly.')\n        sys.exit(1)\n    g = {}\n    for j in range(n):\n        g[lst[j] - j] = g.get(lst[j] - j, 0) + lst[j]\n    print(max(g.values()))\nelse:\n    print('Invalid Input')", "n = int(input())\nb = list(map(int, input().split()))\na = [b[i] - i for i in range(n)]\nd = {}\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = b[i]\n    else:\n        d[a[i]] += b[i]\nprint(max(list(d.values())))", "from collections import defaultdict\nn = int(input())\nb = list(map(int, input().split()))\ndic = defaultdict(int)\nfor i in range(n):\n    dic[b[i] - i] += b[i]\nl = list(dic.values())\nprint(max(l))", "n = int(input())\nb = list(map(int, input().split()))\nfinal = {}\nfor i in range(n):\n    if i - b[i] not in final:\n        final[i - b[i]] = b[i]\n    else:\n        final[i - b[i]] += b[i]\nans = 0\nfor i in final:\n    if final[i] > ans:\n        ans = final[i]\nprint(ans)", "input()\nl = list(map(int, input().split()))\nd = {}\ni = 1\nfor x in l:\n    d[x - i] = d.get(x - i, 0) + x\n    i += 1\nprint(max(d.values()))", "input()\nnums = list(map(int, input().split()))\nres = {}\nfor (i, n) in enumerate(nums):\n    if n - i not in res:\n        res[n - i] = 0\n    res[n - i] += n\nprint(max(res.values()))", "n = int(input())\nl = list(map(int, input().split()))\ndic = dict()\nfor i in range(n):\n    a = l[i] - i\n    b = l[i]\n    if a in dic:\n        dic[a] += b\n    else:\n        dic[a] = b\nprint(max(dic.values()))", "n = int(input())\narr = list(map(int, input().split()))\nmp = {}\nfor i in range(n):\n    x = arr[i] - (i + 1)\n    if x in mp:\n        mp[x] += arr[i]\n    else:\n        mp[x] = arr[i]\nmaxi = -1\nfor i in mp:\n    maxi = max(maxi, mp[i])\nprint(maxi)", "n = int(input())\narr = list(map(int, input().split()))\ntemp = []\ndict = {}\nfor i in range(n):\n    val = arr[i] - i\n    if val not in dict.keys():\n        dict[val] = arr[i]\n    else:\n        dict[val] += arr[i]\nprint(max(dict.values()))", "n = int(input())\nb = list(map(int, input().split(' ')))\nans = -1000\nATshayu = {}\nfor i in range(n):\n    v = b[i] - i\n    try:\n        ATshayu[v] += b[i]\n    except:\n        ATshayu[v] = b[i]\n    finally:\n        ans = max(ans, ATshayu[v])\nprint(ans)", "n = int(input())\nc = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    tmp = c[i] - i\n    if not tmp in d:\n        d[tmp] = 0\n    d[tmp] += c[i]\nprint(max(d.values()))", "n = int(input())\na = list(map(int, input().split()))\ndct = {}\nfor i in range(n):\n    if a[i] - i in dct:\n        dct[a[i] - i] += a[i]\n    else:\n        dct[a[i] - i] = a[i]\nprint(max(dct.values()))", "n = int(input())\nb = [int(i) for i in input().split()]\npp = dict()\nfor i in range(n):\n    key = b[i] - i\n    if key not in pp:\n        pp[key] = b[i]\n    else:\n        pp[key] = pp[key] + b[i]\nprint(pp[max(pp, key=pp.get)])", "n = int(input())\nb = [int(i) for i in input().split()]\npp = dict()\nfor i in range(n):\n    key = b[i] - i\n    if key not in pp:\n        pp[key] = b[i]\n    else:\n        pp[key] = pp[key] + b[i]\nprint(pp[max(pp, key=pp.get)])", "t = int(input())\na = list(map(int, input().split()))\ndic = {}\nfor i in range(t):\n    b = a[i] - (i + 1)\n    if b in dic.keys():\n        dic[b] += a[i]\n    else:\n        dic[b] = a[i]\nprint(max(dic.values()))", "n = int(input())\na = [int(i) for i in input().split()]\ndiff = [a[i] - (i + 1) for i in range(n)]\nmem = {i: 0 for i in diff}\nfor i in range(n):\n    mem[diff[i]] += a[i]\nprint(max(mem.values()))", "n = int(input())\nl = list(map(int, input().split()))\ndic = dict()\nfor i in range(n):\n    a = l[i] - i\n    b = l[i]\n    if a in dic:\n        dic[a] += b\n    else:\n        dic[a] = b\nprint(max(dic.values()))", "n = int(input())\nlst = list(map(int, input().split()))\ndic = {}\nfor j in range(n):\n    dic[lst[j] - j] = 0\nfor j in range(n):\n    dic[lst[j] - j] += lst[j]\nma = -1000000000.0\nfor j in dic.keys():\n    ma = max(ma, dic[j])\nprint(ma)", "from collections import defaultdict\n\ndef solve(b):\n    deltas = defaultdict(lambda : 0)\n    for (i, k) in enumerate(b, 1):\n        deltas[k - i] += k\n    return max(deltas.values())\nn = int(input())\nb = [int(s) for s in input().split(' ')]\nprint(solve(b))", "R = lambda : [int(x) for x in input().split()]\n[n] = R()\na = R()\ndic = {}\nfor i in range(n):\n    if i - a[i] in dic:\n        dic[i - a[i]] += a[i]\n    else:\n        dic[i - a[i]] = a[i]\nprint(max(dic.values()))", "t = int(input())\na = list(map(int, input().split()))\ndic = {}\nfor i in range(t):\n    b = a[i] - (i + 1)\n    if b in dic.keys():\n        dic[b] += a[i]\n    else:\n        dic[b] = a[i]\nprint(max(dic.values()))", "from collections import defaultdict\nn = int(input())\narr = [int(i) for i in input().split()]\nDict = defaultdict(int)\nfor i in range(n):\n    t = arr[i] - i\n    Dict[t] += arr[i]\nlis = list(Dict.values())\nprint(max(lis))", "n = int(input())\nl = list(map(int, input().split()))\nc = {}\nfor i in range(n):\n    j = l[i] - i\n    if j not in c.keys():\n        c[j] = l[i]\n    else:\n        c[j] += l[i]\nprint(max(c.values()))", "n = int(input())\narr = list(map(int, input().split()))\nB = [-1] * n\ndct = dict()\nfor i in range(n):\n    B[i] = arr[i] - i\nfor i in range(n):\n    if B[i] in dct:\n        dct[B[i]] += arr[i]\n    else:\n        dct[B[i]] = arr[i]\nprint(max(dct.values()))", "import string\n\ndef main():\n    n = int(input())\n    b = list(map(int, input().split()))\n    dct = dict()\n    for i in range(n):\n        if b[i] - i in dct:\n            dct[b[i] - i] += b[i]\n        else:\n            dct[b[i] - i] = b[i]\n    print(dct[max(dct, key=lambda x: dct[x])])\nt = 1\nfor i in range(t):\n    main()", "n = int(input())\nb = list(map(int, input().split()))\nd = {}\nj = 0\nfor i in range(n):\n    d[b[i] - j] = d.get(b[i] - j, 0) + b[i]\n    j += 1\nprint(max(d.values()))", "n = int(input())\nlis = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    v = lis[i] - i\n    if d.get(v):\n        d[v] += lis[i]\n    else:\n        d[v] = lis[i]\nm = 0\nfor k in d.values():\n    m = max(m, k)\nprint(m)", "n = int(input())\nli = list(map(int, input().split()))\nd = {}\nfor i in range(len(li)):\n    try:\n        d[li[i] - i] += li[i]\n    except:\n        d[li[i] - i] = li[i]\nmx = -1\nfor (k, v) in d.items():\n    if mx < v:\n        mx = v\nprint(mx)", "n = int(input())\na = []\ndic = {}\nx = list(map(int, input().split()))\nfor i in range(n):\n    temp = x[i]\n    a.append(temp)\n    if temp - i in dic.keys():\n        dic[temp - i] += temp\n    else:\n        dic[temp - i] = temp\nans = -1\nfor i in dic.keys():\n    ans = dic[i] if ans < dic[i] else ans\nprint(ans)", "n = int(input())\na = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    key = a[i] - i\n    if key not in d.keys():\n        d[key] = a[i]\n    else:\n        d[key] += a[i]\nprint(max(d.values()))", "input()\nb = list(map(int, input().split()))\nd = {}\nfor i in range(1, len(b) + 1):\n    diff = b[i - 1] - i\n    d[diff] = d.get(diff, 0) + b[i - 1]\nprint(max(d.values()))", "from collections import defaultdict\ninput()\nvals = list(map(int, input().split()))\nuwu = defaultdict(list)\n[uwu[val - i].append(val) for (i, val) in enumerate(vals)]\nprint(max([sum(god) for god in uwu.values()]))", "n = int(input())\nls = [int(a) for a in input().split()]\nls1 = []\nkvp = dict()\nfor i in range(n):\n    k = ls[i] - i\n    ls1.append(k)\n    if ls1[i] not in kvp:\n        kvp[ls1[i]] = ls[i]\n    else:\n        kvp[ls1[i]] += ls[i]\nprint(max(kvp.values()))", "n = int(input())\nlst = [int(i) for i in input().split()]\nmax1 = 0\nlst2 = []\ndict1 = {}\nfor i in range(0, n):\n    a = lst[i] - i\n    if a not in dict1.keys():\n        dict1[a] = lst[i]\n    else:\n        dict1[a] = dict1[a] + lst[i]\nmax1 = 0\nfor i in dict1.keys():\n    if max1 < dict1[i]:\n        max1 = dict1[i]\nprint(max1)", "n = int(input())\nb = list(map(int, input().split()))\ndic = {}\nfor (i, a) in enumerate(b, 1):\n    x = a - i\n    if dic.get(x, 0) == 0:\n        dic[x] = a\n    else:\n        dic[x] += a\nans = -1\nfor i in dic.values():\n    ans = max(ans, i)\nprint(ans)", "import sys\nimport math\nfrom math import *\nfrom collections import defaultdict\nimport os\nfrom io import BytesIO, IOBase\nfrom collections import deque\n\ndef main():\n    d = defaultdict(lambda : 0)\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        arr[i] = arr[i] - i\n    for i in range(n):\n        d[arr[i]] += arr[i] + i\n    mx = 0\n    for (i, j) in d.items():\n        mx = max(mx, j)\n    print(mx)\nmain()", "n = int(input())\nl = [int(x) for x in input().split()]\nd = {}\nfor i in range(n):\n    if i - l[i] in d:\n        d[i - l[i]] += l[i]\n    else:\n        d[i - l[i]] = l[i]\nprint(max(d.values()))"]