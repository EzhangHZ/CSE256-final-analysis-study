["import sys\nlines = sys.stdin.read().strip().split('\\n')\n\ndef process(commands):\n    state = dict()\n    for command in commands:\n        execute(command, state)\n    target = commands[-1].strip().split()[0]\n    return state[target][0]\n\ndef execute(command, state):\n    tokens = command.strip().split()\n    if len(tokens) == 3:\n        val = tokens[2]\n        state[tokens[0]] = (1 if 'haha' in val else 0, val[:3], val[-3:])\n    else:\n        (target, op1, op2) = (tokens[0], tokens[2], tokens[4])\n        (count1, head1, tail1) = state[op1]\n        (count2, head2, tail2) = state[op2]\n        total = count1 + count2\n        if tail1 == 'hah' and head2 == 'aha':\n            total += 2\n        elif 'haha' in tail1 + head2:\n            total += 1\n        if len(head1) < 3:\n            head1 = (head1 + head2)[:3]\n        if len(tail2) < 3:\n            tail2 = (tail1 + tail2)[-3:]\n        state[target] = (total, head1, tail2)\nt = int(lines[0])\ncurrent = 1\nfor _ in range(t):\n    n = int(lines[current])\n    current += 1\n    print(process(lines[current:current + n]))\n    current += n", "import sys\nreadline = sys.stdin.readline\n\ndef count(s):\n    cnt = 0\n    start = -1\n    for start in iter(lambda : s.find('haha', start + 1), -1):\n        cnt += 1\n    return cnt\n\ndef solve():\n    n = int(readline().strip())\n    t = dict()\n    ans = 0\n    for _ in range(n):\n        s = readline().strip()\n        if ':=' in s:\n            (x, s) = s.split(' := ')\n            ans = count(s)\n            t[x] = [ans, s[:3], s[-3:]]\n        else:\n            (x, y) = s.split(' = ')\n            (a, b) = y.split(' + ')\n            ans = t[a][0] + t[b][0] + count(t[a][-1] + t[b][1])\n            (aa, bb) = (t[a][1], t[b][-1])\n            if len(t[a][1]) != 3:\n                aa = (t[a][1] + t[b][1])[:3]\n            if len(t[b][1]) != 3:\n                bb = (t[a][-1] + t[b][1])[-3:]\n            t[x] = [ans, aa, bb]\n    print(ans)\nn = int(readline().strip())\nfor _ in range(n):\n    solve()", "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef find(x):\n    cnt = 0\n    for i in range(len(x) - 3):\n        if x[i] == 'h' and x[i + 1] == 'a' and (x[i + 2] == 'h') and (x[i + 3] == 'a'):\n            cnt += 1\n    return cnt\n\ndef merge(x, y):\n    c = find(x[1] + y[0])\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\n\ndef f(q):\n    dct = defaultdict(str)\n    mp = {}\n    for l in q:\n        if l[1] == ':=':\n            v = l[2]\n            mp[l[0]] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            mp[l[0]] = merge(mp[l[2]], mp[l[4]])\n    return mp[q[-1][0]][2]\nfor _ in range(int(input())):\n    q = []\n    for i in range(int(input())):\n        lst = list(map(str, input().strip().split()))\n        q.append(lst)\n    print(f(q))", "import sys\nt = int(sys.stdin.readline())\n\ndef count_haha(a, b):\n    last_a = 'ha' if a[-4:] == 'haha' else a[-4:]\n    beg_b = 'ha' if b[:4] == 'haha' else b[:4]\n    s = last_a + beg_b\n    n = len(s)\n    c = 0\n    for i in range(0, n - 3):\n        if s[i:i + 4] == 'haha':\n            c += 1\n    return c\n\ndef count(s):\n    n = len(s)\n    c = 0\n    for i in range(0, n - 3):\n        if s[i:i + 4] == 'haha':\n            c += 1\n    return c\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    track_var = {}\n    for i in range(n):\n        ess = sys.stdin.readline()\n        if ':=' in ess:\n            (var, __, val) = ess.split()\n            c = count(val)\n            track_var[var] = [val, c]\n            if i == n - 1:\n                print(track_var[var][1])\n        if ' = ' in ess:\n            (var, __, a, ___, b) = ess.split()\n            c = count_haha(track_var[a][0], track_var[b][0])\n            old = track_var[a][1] + track_var[b][1]\n            if var not in track_var:\n                track_var[var] = ['', 0]\n            track_var[var][0] = track_var[a][0][:4] + track_var[b][0][-4:]\n            track_var[var][1] = old + c\n            if i == n - 1:\n                print(track_var[var][1])", "class Word:\n\n    def __init__(self, s=None):\n        if s is None:\n            return\n        self.value = (s[:4] == 'haha') + (s[1:] == 'haha')\n        self.prefix = s[:3]\n        self.suffix = s[-3:]\n\n    def __add__(self, other):\n        w = Word()\n        w.value = self.value + other.value\n        t = self.suffix + other.prefix\n        w.value += (t[:4] == 'haha') + (t[1:5] == 'haha') + (t[2:] == 'haha')\n        w.prefix = (self.prefix + other.prefix)[:3]\n        w.suffix = (self.suffix + other.suffix)[-3:]\n        return w\nvar = {}\nfor _ in range(int(input())):\n    for _ in range(int(input())):\n        s = input().split()\n        if len(s) == 3:\n            var[s[0]] = Word(s[2])\n        else:\n            var[s[0]] = var[s[2]] + var[s[4]]\n    print(var[s[0]].value)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef gg(s):\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'h' and i + 3 < len(s):\n            if s[i + 1] == 'a' and s[i + 2] == 'h' and (s[i + 3] == 'a'):\n                ans += 1\n    return ans\n\ndef get(s):\n    if len(s) < 4:\n        return [s]\n    return [s[:3], s[-3:], gg(s)]\n\ndef merge(x, y):\n    if len(x) == 1 and len(y) == 1:\n        return get(x[0] + y[0])\n    if len(x) == 1 and len(y) == 3:\n        ss = x[0] + y[0]\n        s = ss[:3]\n        return [s, y[1], y[2] + gg(ss)]\n    if len(x) == 3 and len(y) == 1:\n        ss = x[1] + y[0]\n        s = ss[-3:]\n        return [x[0], s, x[2] + gg(ss)]\n    return [x[0], y[1], x[2] + y[2] + gg(x[1] + y[0])]\nfor _ in range(int(input())):\n    n = int(input())\n    d = dict()\n    last = ''\n    for ii in range(n):\n        a = input().split()\n        if a[1] == ':=':\n            d[a[0]] = get(a[2])\n            last = a[0]\n        else:\n            d[a[0]] = merge(d[a[2]], d[a[4]])\n            last = a[0]\n    if len(d[last]) == 1:\n        print(0)\n    else:\n        print(d[last][2])", "def haha(s):\n    return len([i for i in range(len(s) - 3) if s[i:i + 4] == 'haha'])\n\ndef solve():\n    vars = dict()\n    for _ in range(int(input())):\n        s = input().split()\n        if s[1] == ':=':\n            vars[s[0]] = (haha(s[2]), s[2][:3], s[2][-3:])\n        else:\n            (a, b) = (vars[s[2]], vars[s[4]])\n            vars[s[0]] = (a[0] + b[0] + haha(a[2] + b[1]), (a[1] + b[1])[:3], (a[2] + b[2])[-3:])\n    print(vars[s[0]][0])\nfor _ in range(int(input())):\n    solve()", "def haha(s):\n    cnt = 0\n    for i in range(len(s) - 3):\n        if s[i:i + 4] == 'haha':\n            cnt += 1\n    return cnt\n\ndef solve():\n    vars = dict()\n    for _ in range(int(input())):\n        s = input().split()\n        if s[1] == ':=':\n            vars[s[0]] = (haha(s[2]), s[2][:3], s[2][-3:])\n        else:\n            vars[s[0]] = (vars[s[2]][0] + vars[s[4]][0] + haha(vars[s[2]][2] + vars[s[4]][1]), (vars[s[2]][1] + vars[s[4]][1])[:3], (vars[s[2]][2] + vars[s[4]][2])[-3:])\n    print(vars[s[0]][0])\nfor _ in range(int(input())):\n    solve()", "import re\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('ha' * 2))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "def count_haha(s):\n    c = 0\n    for i in range(len(s) - 3):\n        if s[i] == 'h' and s[i + 1] == 'a' and (s[i + 2] == 'h') and (s[i + 3] == 'a'):\n            c += 1\n    return c\nfor T in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in range(n):\n        s = input().split()\n        if s[1] == ':=':\n            dic[s[0]] = (s[2][:3], s[2][-3:], count_haha(s[2]))\n        else:\n            dic[s[0]] = ((dic[s[2]][0] + dic[s[4]][0])[:3], (dic[s[2]][1] + dic[s[4]][1])[-3:], dic[s[2]][2] + dic[s[4]][2] + count_haha(dic[s[2]][1] + dic[s[4]][0]))\n    print(dic[s[0]][2])", "import re\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('ha' * 2))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    v = {}\n    last = ''\n    for _ in range(n):\n        c = input()\n        if ':=' in c:\n            (w, s) = c.split(' := ')\n            (f, e) = (s[:4], s[-4:])\n            q = (s[:4] == 'haha') + (s[1:] == 'haha')\n            v[w] = (f, e, q)\n            last = w\n        else:\n            (w, w1, w2) = c.replace('+', '=').split(' = ')\n            q = v[w1][2] + v[w2][2] + ((v[w1][1][-3:] + v[w2][0][:1] == 'haha') + (v[w1][1][-2:] + v[w2][0][:2] == 'haha') + (v[w1][1][-1:] + v[w2][0][:3] == 'haha'))\n            (f, e) = ((v[w1][0] + v[w2][0])[:4], (v[w1][1] + v[w2][1])[-4:])\n            v[w] = (f, e, q)\n            last = w\n    print(v[last][2])", "import re\n\ndef merge(x, y):\n    c = len(re.findall('(?=haha)', x[1] + y[0]))\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\ni = input\nfor _ in [1] * int(i()):\n    mp = {}\n    for _ in [1] * int(i()):\n        s = i()\n        if ':=' in s:\n            (k, _, v) = s.split()\n            mp[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, _, x, _, y) = s.split()\n            mp[k] = merge(mp[x], mp[y])\n    print(mp[k][2])", "import re\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\nimport re\n\ndef merge(x, y):\n    c = len(re.findall('(?=haha)', x[1] + y[0]))\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\n\ndef f(q):\n    dct = defaultdict(str)\n    mp = {}\n    for l in q:\n        if l[1] == ':=':\n            v = l[2]\n            mp[l[0]] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            mp[l[0]] = merge(mp[l[2]], mp[l[4]])\n    return mp[q[-1][0]][2]\nfor _ in range(int(input())):\n    q = []\n    for i in range(int(input())):\n        lst = list(map(str, input().strip().split()))\n        q.append(lst)\n    print(f(q))", "import re\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('ha' * 2))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "def solve():\n    t = int(input())\n    values = dict()\n    name = ''\n    for _ in range(t):\n        cur_string = input()\n        if ':=' in cur_string:\n            (name, value) = cur_string.split(' := ')\n            end = value[-3:]\n            begin = value[:3]\n            haha_counter = int('haha' in value)\n            values[name] = dict(end=end, begin=begin, haha=haha_counter)\n        else:\n            (name, second_part) = cur_string.split(' = ')\n            (first, second) = second_part.split(' + ')\n            common_part = values[first]['end'] + values[second]['begin']\n            haha_dop = 0\n            for item in range(len(common_part) - 3):\n                haha_dop += int(common_part[item:item + 4] == 'haha')\n            if values[first]['begin'].__len__() < 3:\n                values[first]['begin'] += values[second]['begin']\n            if values[second]['end'].__len__() < 3:\n                values[second]['end'] += values[first]['end']\n            values[first]['begin'] = values[first]['begin'][:3]\n            values[second]['end'] = values[second]['end'][-3:]\n            values[name] = dict(end=values[second]['end'], begin=values[first]['begin'], haha=values[first]['haha'] + values[second]['haha'] + haha_dop)\n    print(values[name]['haha'])\nfor _ in range(int(input())):\n    solve()", "t = int(input())\n\ndef add(a, b):\n    ans1 = a[0] + b[0]\n    p = a[1][1]\n    q = b[1][0]\n    t = p + q\n    total = 0\n    for i in range(len(t)):\n        if t[i:i + 4] == 'haha':\n            ans1 += 1\n    ans2 = ((a[1][0] + b[1][0])[:3], (a[1][1] + b[1][1])[-3:])\n    return (ans1, ans2)\nfor _ in range(t):\n    n = int(input())\n    d = dict()\n    ans = 0\n    for i in range(n):\n        line = input()\n        if ':=' in line:\n            s = line.split(' := ')\n            a = int('haha' in s[1])\n            d[s[0]] = (a, (s[1][:3], s[1][-3:]))\n            ans = d[s[0]][0]\n        else:\n            (x, p0, y, p1, z) = line.split()\n            d[x] = add(d[y], d[z])\n            ans = d[x][0]\n    print(ans)", "def occ(temp_string):\n    count = 0\n    start = 0\n    while True:\n        start = temp_string.find('haha', start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    var = {}\n    val = {}\n    li = []\n    s = 'lol'\n    for i in range(n):\n        s = list(input().split())\n        if len(s) == 3:\n            var[s[0]] = s[2]\n            val[s[0]] = occ(s[2])\n        else:\n            temp = val[s[2]] + val[s[4]]\n            string = var[s[2]][-1:-4:-1][::-1] + var[s[4]][0:3:1]\n            temp += occ(string)\n            val[s[0]] = temp\n            string = var[s[2]] + var[s[4]]\n            if len(string) > 6:\n                string = string[0:3:1] + string[-1:-4:-1][::-1]\n            var[s[0]] = string\n    print(val[s[0]])", "import re\n\ndef m(x, y):\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + len(re.findall('(?=haha)', x[1] + y[0])))\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "import math\nimport re\nimport sys\nfrom itertools import permutations\nfrom collections import Counter\nimport itertools\nMOD = 1000000007\n\ndef inp():\n    return map(int, input().split(' '))\n\ndef ninp():\n    return int(input())\n\ndef haha(s):\n    cnt = 0\n    fir = -1\n    for fir in iter(lambda : s.find('haha', fir + 1), -1):\n        cnt += 1\n    return cnt\nfor _ in range(ninp()):\n    n = ninp()\n    ans = dict()\n    res = 0\n    for _ in range(n):\n        s = input().strip()\n        if ':=' in s:\n            (x, s) = s.split(' := ')\n            res = haha(s)\n            ans[x] = [res, s[:3], s[-3:]]\n        else:\n            (x, y) = s.split(' = ')\n            (a, b) = y.split(' + ')\n            res = ans[a][0] + ans[b][0] + haha(ans[a][-1] + ans[b][1])\n            (aa, bb) = (ans[a][1], ans[b][-1])\n            if len(ans[a][1]) != 3:\n                aa = (ans[a][1] + ans[b][1])[:3]\n            if len(ans[b][1]) != 3:\n                bb = (ans[a][-1] + ans[b][1])[-3:]\n            ans[x] = [res, aa, bb]\n    print(res)", "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\nimport re\n\ndef merge(x, y):\n    c = len(re.findall('(?=haha)', x[1] + y[0]))\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\n\ndef f(q):\n    dct = defaultdict(str)\n    mp = {}\n    for l in q:\n        if l[1] == ':=':\n            v = l[2]\n            mp[l[0]] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            mp[l[0]] = merge(mp[l[2]], mp[l[4]])\n    return mp[q[-1][0]][2]\nfor _ in range(int(input())):\n    q = []\n    for i in range(int(input())):\n        lst = list(map(str, input().strip().split()))\n        q.append(lst)\n    print(f(q))", "import re\ni = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('ha' * 2))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + len(re.findall('(?=haha)', b + d)))\n    print(p[k][2])", "import re\n\ndef merge(x, y):\n    c = len(re.findall('(?=haha)', x[1] + y[0]))\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\nfor _ in range(int(input())):\n    mp = {}\n    for _ in range(int(input())):\n        s = input()\n        if ':=' in s:\n            (k, _, v) = s.split()\n            mp[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, _, x, _, y) = s.split()\n            mp[k] = merge(mp[x], mp[y])\n    print(mp[k][2])", "import re\n\ndef merge(x, y):\n    c = len(re.findall('(?=haha)', x[1] + y[0]))\n    return ((x[0] + y[0])[:3], (x[1] + y[1])[-3:], x[2] + y[2] + c)\ni = input\nfor _ in [1] * int(i()):\n    mp = {}\n    for _ in [1] * int(i()):\n        s = i()\n        if ':=' in s:\n            (k, _, v) = s.split()\n            mp[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, _, x, _, y) = s.split()\n            mp[k] = merge(mp[x], mp[y])\n    print(mp[k][2])", "def count(s):\n    val = 0\n    for i in range(len(s) - 3):\n        if s[i:i + 4] == 'haha':\n            val += 1\n    return val\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    dic = {}\n    ans = {}\n    for j in range(n):\n        cmd = input()\n        if ':=' in cmd:\n            (var, inp) = cmd.split(' := ')\n            var = var.strip()\n            inp = inp.strip()\n            dic[var] = inp\n            ans[var] = 0\n        else:\n            (var, inp) = cmd.split(' = ')\n            var = var.strip()\n            (var1, var2) = inp.split(' + ')\n            var1 = var1.strip()\n            var2 = var2.strip()\n            fs = dic[var1] + dic[var2]\n            if len(fs) > 6:\n                ans[var] = ans.get(var1, 0) + ans.get(var2, 0) + count(fs)\n                fs = fs[0:3] + '-' + fs[-3:]\n            dic[var] = fs\n        if j == n - 1:\n            if '-' in dic[var]:\n                print(ans.get(var, 0))\n            else:\n                print(count(dic[var]))", "t = int(input())\ncurvars = {}\n\ndef concat(a, b):\n    (pa, sa, na) = a\n    (pb, sb, nb) = b\n    x = 0\n    for i in range(0, 10):\n        if (sa + pb)[i:i + 4] == 'haha':\n            x += 1\n    return ((pa + pb)[:3], (sa + sb)[-3:], na + nb + x)\nfor _ in range(t):\n    n = int(input())\n    for _ in range(n):\n        s = input()\n        if ':=' in s:\n            (name, _, val) = s.split()\n            curvars[name] = (val[:3], val[-3:], val.count('haha'))\n        else:\n            (name, _, a, _, b) = s.split()\n            curvars[name] = concat(curvars[a], curvars[b])\n    print(curvars[name][2])", "i = input\nt = int(i())\nwhile t:\n    t -= 1\n    p = {}\n    n = int(i())\n    while n:\n        n -= 1\n        s = i()\n        a = s.split()[::2]\n        if ':' in s:\n            (k, v) = a\n            p[k] = (v[:3], v[-3:], v.count('haha'))\n        else:\n            (k, x, y) = a\n            (a, b, c) = p[x]\n            (d, e, f) = p[y]\n            g = b + d\n            p[k] = ((a + d)[:3], (b + e)[-3:], c + f + sum((g[i:i + 4] == 'ha' * 2 for i in range(len(g)))))\n    print(p[k][2])", "import math\nimport re\n\ndef concat(a, b):\n    (pa, sa, na) = a\n    (pb, sb, nb) = b\n    x = 0\n    for i in range(0, 10):\n        if (sa + pb)[i:i + 4] == 'haha':\n            x += 1\n    return ((pa + pb)[:3], (sa + sb)[-3:], na + nb + x)\ntest = int(input())\nwhile test != 0:\n    test = test - 1\n    n = int(input())\n    curvars = {}\n    for i in range(0, n):\n        s = input()\n        if ':=' in s:\n            (name, _, val) = s.split()\n            curvars[name] = (val[:3], val[-3:], val.count('haha'))\n        else:\n            (name, _, a, _, b) = s.split()\n            curvars[name] = concat(curvars[a], curvars[b])\n    print(curvars[name][2])", "def count_hahas(s):\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i:i + 4] == 'haha':\n            count += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    vars = dict()\n    for _ in range(int(input())):\n        line = input()\n        if ':' in line:\n            line = line.split()\n            (v, s) = (line[0], line[2])\n            vars[v] = [count_hahas(s), s[0:min(len(s), 3)], s[max(len(s) - 3, 0):]]\n        else:\n            line = line.split()\n            (v, a, b) = (line[0], vars[line[2]], vars[line[4]])\n            count = a[0] + b[0]\n            con = a[2] + b[1]\n            count += count_hahas(con)\n            start = a[1] + b[1]\n            end = a[2] + b[2]\n            vars[v] = [count, start[0:min(len(start), 3)], end[max(len(end) - 3, 0):]]\n    print(vars[v][0])", "class word:\n\n    def __init__(self, len=None, cnt=None, s=None):\n        self.len = len\n        self.cnt = cnt\n        self.s = s\n\ndef count(s: str):\n    cnt = 0\n    for i in range(len(s) - 3):\n        if s[i:i + 4] == 'haha':\n            cnt += 1\n    return cnt\n\ndef merge(a: word, b: word):\n    c = word()\n    c.len = a.len + b.len\n    c.s = a.s + b.s\n    c.cnt = a.cnt + b.cnt + count(a.s[-3:] + b.s[:3])\n    if len(c.s) >= 7:\n        c.s = c.s[:3] + '@' + c.s[-3:]\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    vrs = {}\n    ans = 0\n    for i in range(n):\n        tmp = input().split()\n        if len(tmp) == 3:\n            w = word(len(tmp[2]), count(tmp[2]), tmp[2])\n            vrs[tmp[0]] = w\n        else:\n            vrs[tmp[0]] = merge(vrs[tmp[2]], vrs[tmp[4]])\n        ans = vrs[tmp[0]].cnt\n    print(ans)", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    num_haha = {}\n    variable = {}\n    last_var = ''\n    for i in range(n):\n        command = input()\n        parsed = command.split()\n        var = parsed[0]\n        last_var = var\n        op = parsed[1]\n        if op == ':=':\n            val = parsed[2]\n            variable[var] = val\n            x = 0\n            for j in range(max(len(val) - 3, 0)):\n                if val[j:j + 4] == 'haha':\n                    x = x + 1\n            num_haha[var] = x\n        else:\n            a = parsed[2]\n            b = parsed[4]\n            A = variable[a]\n            B = variable[b]\n            variable[var] = A + B\n            if len(variable[var]) > 8:\n                variable[var] = variable[var][:4] + variable[var][-4:]\n            num_haha[var] = num_haha[a] + num_haha[b]\n            j = 4\n            for j in range(max(1, 4 - len(B)), min(3, len(A)) + 1):\n                if A[-j:] + B[:4 - j] == 'haha':\n                    num_haha[var] += 1\n    print(num_haha[last_var])", "import re\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    variable = {}\n    for statement in range(n):\n        cmd = input().replace(' ', '')\n        if ':=' in cmd:\n            name = cmd.split(':=')[0]\n            value = cmd.split(':=')[1]\n            count = len(re.findall('(?=(haha))', value))\n            variable[name] = (value, count)\n        else:\n            name = cmd.split('=')[0]\n            R = cmd.split('=')[1]\n            data1 = variable[R.split('+')[0]]\n            data2 = variable[R.split('+')[1]]\n            obj = data1[0] + data2[0]\n            if len(obj) > 6:\n                obj = obj[:3] + obj[-3:]\n            variable[name] = (obj, data1[1] + data2[1] + len(re.findall('(?=(haha))', data1[0][-3:] + data2[0][:3])))\n    print(variable[name][1])", "import sys\ninput = sys.stdin.readline\na = [(0, 0), (2, 0), (0, 0), (2, 1)]\nh = [(1, 0), (1, 0), (3, 0), (1, 0)]\nz = [(0, 0), (0, 0), (0, 0), (0, 0)]\n\ndef solve():\n    n = int(input())\n    vars = dict()\n    last = None\n    for i in range(n):\n        tmp = input().split()\n        if tmp[1] == ':=':\n            v1 = None\n            if tmp[2][0] == 'a':\n                v1 = a\n            elif tmp[2][0] == 'h':\n                v1 = h\n            else:\n                v1 = z\n            for j in tmp[2][1:]:\n                if j == 'a':\n                    v2 = a\n                elif j == 'h':\n                    v2 = h\n                else:\n                    v2 = z\n                v = [(v2[v1[i][0]][0], v2[v1[i][0]][1] + v1[i][1]) for i in range(4)]\n                v1 = v\n            vars[tmp[0]] = v1\n            last = v1\n        else:\n            v1 = vars[tmp[2]]\n            v2 = vars[tmp[4]]\n            last = [(v2[v1[i][0]][0], v2[v1[i][0]][1] + v1[i][1]) for i in range(4)]\n            vars[tmp[0]] = last\n    print(last[0][1])\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    tupleDict = dict()\n    for _ in range(n):\n        statement = input().split()\n        if ':=' in statement:\n            variableName = statement[0]\n            variable = statement[2]\n            numLaughs = 0\n            for i in range(len(variable)):\n                if variable[i:i + 4] == 'haha':\n                    numLaughs += 1\n            tuple = (variable[:3], variable[-3:], numLaughs)\n            tupleDict[variableName] = tuple\n            lastVariableName = variableName\n        else:\n            variableName = statement[0]\n            a = statement[2]\n            b = statement[4]\n            (aStart, aEnd, aLaughs) = tupleDict[a]\n            (bStart, bEnd, bLaughs) = tupleDict[b]\n            if len(aStart) == 1:\n                start = aStart + bStart[:2]\n            elif len(aStart) == 2:\n                start = aStart + bStart[:1]\n            else:\n                start = aStart\n            if len(bEnd) == 1:\n                end = aEnd[-2:] + bEnd\n            elif len(bEnd) == 2:\n                end = aEnd[-1:] + bEnd\n            else:\n                end = bEnd\n            check = aEnd + bStart\n            numLaughs = 0\n            for i in range(len(check)):\n                if check[i:i + 4] == 'haha':\n                    numLaughs += 1\n            numLaughs += aLaughs\n            numLaughs += bLaughs\n            newTuple = (start, end, numLaughs)\n            tupleDict[variableName] = newTuple\n            lastVariableName = variableName\n    print(tupleDict[lastVariableName][2])", "curvars = {}\n\ndef concat(a, b):\n    (pa, sa, na) = a\n    (pb, sb, nb) = b\n    x = len([i for i in range(10) if (sa + pb)[i:i + 4] == 'haha'])\n    return ((pa + pb)[:3], (sa + sb)[-3:], na + nb + x)\nfor _ in range(int(input())):\n    for _ in range(int(input())):\n        s = input()\n        if ':=' in s:\n            (name, _, val) = s.split()\n            curvars[name] = (val[:3], val[-3:], val.count('haha'))\n        else:\n            (name, _, a, _, b) = s.split()\n            curvars[name] = concat(curvars[a], curvars[b])\n    print(curvars[name][2])", "def cnt(a):\n    n = len(a)\n    ret = 0\n    for i in range(0, n - 3):\n        if str(a[i:i + 4]) == 'haha':\n            ret += 1\n    return ret\n\ndef extEND(a):\n    mn = min(3, len(a))\n    n = len(a)\n    return str(a[n - mn:n])\n\ndef extBEG(a):\n    mn = min(3, len(a))\n    return str(a[0:mn])\nt = int(input())\nwhile t > 0:\n    t -= 1\n    c = int(input())\n    mp = {}\n    last = ''\n    for i in range(1, c + 1):\n        p = input().split(' ')\n        if p[1] == ':=':\n            mp[p[0]] = (cnt(p[2]), extBEG(p[2]), extEND(p[2]))\n        else:\n            mp[p[0]] = (mp[p[2]][0] + mp[p[4]][0] + cnt(mp[p[2]][2] + mp[p[4]][1]), extBEG(mp[p[2]][1] + mp[p[4]][1]), extEND(mp[p[2]][2] + mp[p[4]][2]))\n    last = p[0]\n    print(mp[last][0])", "def first(a):\n    s = ''\n    for i in range(0, 3):\n        if i >= len(a):\n            return s\n        else:\n            s += a[i]\n    return s\n\ndef last(a):\n    s = ''\n    n = len(a)\n    for i in range(0, 3):\n        if n + i - 3 < 0:\n            continue\n        else:\n            s += a[n + i - 3]\n    return s\n\ndef count(a):\n    b = 0\n    if len(a) < 4:\n        return 0\n    for i in range(0, len(a) - 3):\n        if a[i] == 'h' and a[i + 1] == 'a' and (a[i + 2] == 'h') and (a[i + 3] == 'a'):\n            b += 1\n    return b\nt = int(input())\nfor _ in range(0, t):\n    d = {}\n    ans = 0\n    n = int(input())\n    for __ in range(0, n):\n        s = input().split()\n        if s[1] == ':=':\n            d[s[0]] = [count(s[2]), first(s[2]), last(s[2])]\n        else:\n            d[s[0]] = [d[s[2]][0] + d[s[4]][0] + count(d[s[2]][2] + d[s[4]][1]), first(d[s[2]][1] + d[s[4]][1]), last(d[s[2]][2] + d[s[4]][2])]\n        ans = d[s[0]][0]\n    print(ans)", "def count(s1, s2):\n    return sum((s1[i:i + len(s2)] == s2 for i in range(len(s1))))\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    variables = {}\n    command = None\n    for c in range(n):\n        command = input().strip().split()\n        if len(command) == 3:\n            (x, a) = (command[0], command[-1])\n            variables[x] = [a, count(a, 'haha')]\n        elif len(command) == 5:\n            (x, a, b) = (command[0], command[2], command[4])\n            (v1, v2) = (variables[a], variables[b])\n            variables[x] = [v1[0] + v2[0], v1[-1] + v2[-1] + count(v1[0][-3:] + v2[0][:3], 'haha')]\n            if len(variables[x][0]) > 6:\n                variables[x][0] = variables[x][0][:3] + variables[x][0][-3:]\n        else:\n            raise ValueError('')\n    print(variables[command[0]][-1])", "def first(a):\n    s = ''\n    for i in range(0, 3):\n        if i >= len(a):\n            return s\n        else:\n            s += a[i]\n    return s\n\ndef last(a):\n    s = ''\n    n = len(a)\n    for i in range(0, 3):\n        if n + i - 3 < 0:\n            continue\n        else:\n            s += a[n + i - 3]\n    return s\n\ndef count(a):\n    b = 0\n    if len(a) < 4:\n        return 0\n    for i in range(0, len(a) - 3):\n        if a[i] == 'h' and a[i + 1] == 'a' and (a[i + 2] == 'h') and (a[i + 3] == 'a'):\n            b += 1\n    return b\nt = int(input())\nfor _ in range(0, t):\n    d = {}\n    ans = 0\n    n = int(input())\n    for __ in range(0, n):\n        s = input().split()\n        if s[1] == ':=':\n            d[s[0]] = [count(s[2]), first(s[2]), last(s[2])]\n        else:\n            d[s[0]] = [d[s[2]][0] + d[s[4]][0] + count(d[s[2]][2] + d[s[4]][1]), first(d[s[2]][1] + d[s[4]][1]), last(d[s[2]][2] + d[s[4]][2])]\n        ans = d[s[0]][0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    haha = {}\n    st = {}\n    end = {}\n    for rr in range(n):\n        s = input()\n        z = 1\n        for i in s:\n            if i == '+':\n                z = 2\n                break\n        s = s.split()\n        if z == 1:\n            cnt = 0\n            for i in range(len(s[2])):\n                tmp = s[2][i:i + 4]\n                if tmp == 'haha':\n                    cnt += 1\n            haha[s[0]] = cnt\n            st[s[0]] = s[2][0:3]\n            end[s[0]] = s[2][-3:-1] + s[2][-1]\n            if rr == n - 1:\n                print(cnt)\n        else:\n            c = s[0]\n            a = s[2]\n            b = s[4]\n            cnt = haha[a] + haha[b]\n            s1 = end[a] + st[b]\n            for i in range(len(s1)):\n                tmp = ''\n                tmp += s1[i:i + 4]\n                if tmp == 'haha':\n                    cnt += 1\n            haha[s[0]] = cnt\n            st1 = st[a] + st[b]\n            st[c] = st1[0:3]\n            end1 = end[a] + end[b]\n            end[c] = end1[-3:-1] + end1[-1]\n            if rr == n - 1:\n                print(cnt)"]