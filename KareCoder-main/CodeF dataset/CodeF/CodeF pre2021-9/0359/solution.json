["import math\nI = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(I())\n    x = curgcd = max(a)\n    a.remove(x)\n    b = [x] + [0] * (n - 1)\n    for i in range(1, n):\n        k = ind = uear = 0\n        for y in a:\n            u = math.gcd(y, curgcd)\n            if u > uear:\n                uear = u\n                num = y\n                ind = k\n            k = k + 1\n        b[i] = num\n        del a[ind]\n        curgcd = uear\n        if uear == 1:\n            b = b[:i + 1] + a\n            break\n    print(*b)", "import math\nfrom collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    maa = max(l)\n    c = Counter(l)\n    l = list(set(l))\n    a = l.index(maa)\n    l[a] = 0\n    gc = maa\n    for i in range(c[gc]):\n        print(gc, end=' ')\n    m = 0\n    e = 0\n    ind = -1\n    f = 0\n    cn = 0\n    while 1:\n        for i in range(len(l)):\n            if l[i] != 0:\n                k = math.gcd(l[i], gc)\n                if k > m:\n                    m = k\n                    e = l[i]\n                    ind = i\n        if m == 1:\n            f = 1\n            break\n        else:\n            for i in range(c[e]):\n                print(e, end=' ')\n            cn += 1\n            if cn == len(l):\n                break\n            gc = m\n            l[ind] = 0\n            ind = -1\n            m = 0\n            e = 0\n    if f == 1:\n        for i in range(len(l)):\n            if l[i] != 0:\n                for j in range(c[l[i]]):\n                    print(l[i], end=' ')\n        print()\n    else:\n        print()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    ans = []\n    gc = mx\n    j = 0\n    while j < len(arr):\n        m_gc = 0\n        m_ind = 0\n        i = 0\n        while i < len(arr):\n            temp_gcd = math.gcd(gc, arr[i])\n            if temp_gcd > m_gc:\n                m_gc = temp_gcd\n                m_ind = i\n            i += 1\n        gc = m_gc\n        ans.append(arr[m_ind])\n        arr.pop(m_ind)\n        if gc == 1:\n            ans += arr\n            break\n    print(*ans)", "import math\nc = int(input())\nfor _ in range(c):\n    length = int(input())\n    arr = [int(item) for item in input().split()]\n    new_arr = []\n    for (index, val) in enumerate(arr):\n        new_arr.append((val, index))\n\n    def reArrange(arr):\n        n = len(arr)\n        if n == 0:\n            return []\n        g_list = sorted(arr, reverse=True)\n        top = g_list[0][0]\n        stop_index = 0\n        result_list = []\n        while len(g_list) != 0:\n            while stop_index + 1 <= len(g_list) - 1 and g_list[stop_index][0] == g_list[stop_index + 1][0]:\n                stop_index += 1\n            result_list += sorted([arr[i[1]][0] for i in g_list[:stop_index + 1]], reverse=True)\n            g_list = g_list[stop_index + 1:]\n            if len(g_list) == 0:\n                break\n            t_list = []\n            for count in range(len(g_list)):\n                p = math.gcd(top, g_list[count][0])\n                t_list.append((p, g_list[count][1]))\n            g_list = sorted(t_list, reverse=True)\n            top = g_list[0][0]\n            stop_index = 0\n        return result_list\n    print(*reArrange(new_arr))", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    answer = []\n    answer.append(a.pop(0))\n    n -= 1\n    gc = answer[0]\n    for _ in range(n):\n        index = 0\n        m = 0\n        for (i, val) in enumerate(a):\n            num = gcd(gc, val)\n            if num >= m:\n                m = num\n                index = i\n        gc = min(gc, m)\n        if gc == 1:\n            answer.extend(a)\n            break\n        else:\n            answer.append(a.pop(index))\n    print(' '.join((str(num) for num in answer)))", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    a = dict()\n    for i in map(int, input().split()):\n        if i in a:\n            a[i] += 1\n        else:\n            a[i] = 1\n    gcd_prev = max(a)\n    b = [gcd_prev] * a[gcd_prev]\n    del a[gcd_prev]\n    while gcd_prev != 1:\n        max_gcd = max([gcd(i, gcd_prev) for i in a] + [1])\n        for i in list(a):\n            if not i % max_gcd:\n                b += [i] * a[i]\n                del a[i]\n        gcd_prev = max_gcd\n    for i in list(a):\n        b += [i] * a[i]\n        del a[i]\n    print(*b)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    while False:\n        break\n    maxel = max(a)\n    ans = list()\n    for j in range(n):\n        if maxel == 1:\n            break\n        maxgcd = math.gcd(maxel, a[0])\n        ind = 0\n        for k in range(n):\n            if math.gcd(maxel, a[k]) > maxgcd:\n                maxgcd = math.gcd(maxel, a[k])\n                ind = k\n        ans.append(a[ind])\n        a[ind] = -1\n        maxel = maxgcd\n    for j in a:\n        if j != -1:\n            ans.append(j)\n    for j in ans:\n        if j == -1:\n            continue\n        print(j, end=' ')\n    print('')", "from math import gcd\nfor _ in range(int(input())):\n    lens = int(input())\n    arrs = [int(x) for x in input().split()]\n    B = []\n    g = 0\n    while arrs:\n        a = max(arrs, key=lambda a: gcd(a, g))\n        B.append(a)\n        g = gcd(a, g)\n        arrs.remove(a)\n    print(*B)", "t = int(input())\nimport math\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    ans = []\n    ans.append(a[n - 1])\n    del a[n - 1]\n    curg = ans[0]\n    while len(a):\n        ma = 0\n        inl = 0\n        flag = 0\n        mi = 1\n        for i in range(len(a)):\n            if math.gcd(curg, a[i]) > mi:\n                ma = a[i]\n                inl = i\n                mi = math.gcd(curg, a[i])\n                flag += 1\n        if flag == 0:\n            break\n        else:\n            ans.append(ma)\n            del a[inl]\n            curg = math.gcd(curg, ans[-1])\n    ans += a\n    print(*ans, sep=' ')", "import math\nt = int(input(''))\narr = []\nfor i in range(t):\n    n = int(input(''))\n    arr.append(list(map(int, input().split())))\nfor i in range(t):\n    a = arr[i]\n    n = len(a)\n    a.sort(reverse=True)\n    dp = []\n    dp.append(a[0])\n    c = []\n    c.append(a[0])\n    a[0] = 0\n    for k in range(1, n):\n        sol = 0\n        for j in range(n):\n            if a[j] == 0:\n                continue\n            d = math.gcd(c[k - 1], a[j])\n            if d >= sol:\n                sol = d\n                pos = j\n        dp.append(a[pos])\n        c.append(math.gcd(c[k - 1], dp[k]))\n        a[pos] = 0\n        if sol == 1:\n            break\n    for j in range(n):\n        if a[j] != 0:\n            dp.append(a[j])\n    print(*dp)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = max(arr)\n    g1 = x\n    my_list = [max(arr)]\n    arr.remove(max(arr))\n    g = 1\n    c = 1\n    while True:\n        p = arr.copy()\n        for i in arr:\n            if math.gcd(i, g1) > g:\n                g = math.gcd(i, g1)\n        if g == 1:\n            for i in arr:\n                my_list.append(i)\n                c += 1\n        else:\n            for i in arr:\n                if i % g == 0:\n                    p.remove(i)\n                    my_list.append(i)\n                    c += 1\n        if c == n:\n            break\n        else:\n            g1 = g\n            g = 1\n            arr = p\n    print(*my_list)", "from sys import stdin\n\nclass Input:\n\n    def readline(self):\n        return stdin.readline().strip()\n\n    def read_list(self):\n        return self.readline().split()\n\n    def read_ints(self):\n        return list(map(int, self.read_list()))\n\n    def known_tests(self):\n        (cases,) = self.read_ints()\n        for case in range(cases):\n            yield self\n\n    def single_test(self):\n        yield self\n\nclass Problem:\n\n    def __init__(self, input):\n        (n,) = input.read_ints()\n        a = input.read_ints()\n        g = [0 for i in range(n)]\n        a.sort(reverse=True)\n        g[0] = a[0]\n        le = 1\n        while le < n:\n            for ri in range(le, n):\n                g[ri] = self.gcd(g[le - 1], a[ri])\n            mx = max(g[le:])\n            l = le\n            ri = le\n            while ri < n:\n                if mx == g[ri]:\n                    (a[le], a[ri]) = (a[ri], a[le])\n                    (g[le], g[ri]) = (g[ri], g[le])\n                    le += 1\n                ri += 1\n            a[l:le] = sorted(a[l:le])\n        print(*tuple(a))\n\n    def gcd(self, a, b):\n        return a if b == 0 else self.gcd(b, a % b)\nfor test_input in Input().known_tests():\n    Problem(test_input)", "from math import gcd\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    li.sort(reverse=True)\n    b = li[0:1]\n    g = li[0]\n    li = li[1:]\n    while len(li):\n        k = max(li, key=lambda x: gcd(x, g))\n        g = gcd(k, g)\n        li.remove(k)\n        b.append(k)\n    print(*b)\nt = int(input())\nfor _ in range(t):\n    solve()", "def nod(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor sdfhyujkl in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = max(l)\n    l.pop(l.index(m))\n    answer = [m]\n    fifa = m\n    for i in range(1, n):\n        r = 0\n        ind = 0\n        for j in range(len(l)):\n            e = nod(l[j], fifa)\n            if e > r:\n                r = e\n                ind = j\n        if r == 1:\n            break\n        fifa = r\n        answer.append(l.pop(ind))\n    answer += l\n    print(*answer)", "from math import gcd\ntest = int(input())\nfor q in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 1000000000\n    a.sort(reverse=True)\n    x = []\n    g = a[0]\n    x.append(a[0])\n    a[0] = 0\n    N = n - 1\n    flag = True\n    while N > 0 and flag:\n        cg = 0\n        num = -1\n        for i in range(n):\n            if a[i] != 0 and gcd(a[i], g) > cg:\n                cg = gcd(a[i], g)\n                num = i\n        x.append(a[num])\n        g = cg\n        a[num] = 0\n        if g == 1:\n            for i in range(n):\n                if a[i] != 0:\n                    x.append(a[i])\n                flag = False\n        N -= 1\n    for i in range(len(x)):\n        if i < len(x) - 1:\n            print(x[i], end=' ')\n        else:\n            print(x[i])", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max111 = max(a)\n    ans = list()\n    for j in range(n):\n        if max111 == 1:\n            break\n        besg = math.gcd(max111, a[0])\n        mark = 0\n        while False:\n            break\n        for k in range(n):\n            if math.gcd(max111, a[k]) > besg:\n                besg = math.gcd(max111, a[k])\n                mark = k\n        ans.append(a[mark])\n        a[mark] = -1\n        max111 = besg\n    for j in a:\n        if j != -1:\n            ans.append(j)\n    xx = 0\n    for cc in ans:\n        if cc == -1:\n            continue\n        print(cc, end=' ')\n    print('')", "for i in range(int(input())):\n    from math import gcd\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    li = []\n    li.append(arr.pop())\n    hcf = li[-1]\n    while len(arr) > 0:\n        (m, q) = (0, 0)\n        for x in arr:\n            if m < gcd(hcf, x):\n                m = gcd(hcf, x)\n                q = x\n        li += [q]\n        arr.remove(q)\n        hcf = m\n    print(*li)", "import math, sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, a, b, gcd_prefix) = (int(input()), [int(i) for i in input().split()], [], 0)\n    while a:\n        cache = max(a, key=lambda x: math.gcd(x, gcd_prefix))\n        gcd_prefix = math.gcd(cache, gcd_prefix)\n        b.append(cache)\n        a.remove(cache)\n    print(*b)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    lsta = [lst[-1]]\n    lst.pop()\n    g = lsta[0]\n    while lst != []:\n        ma = -1000000000.0\n        val = -1000000000.0\n        for d in lst:\n            if math.gcd(g, d) > ma:\n                ma = math.gcd(g, d)\n                val = d\n        g = ma\n        lsta.append(val)\n        lst.remove(val)\n    print(*lsta)", "t = int(input())\ni = 0\nwhile i < t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    krat = []\n    MAX = max(a)\n    z = MAX\n    while z > 0:\n        if MAX % z == 0:\n            krat.append(z)\n        z -= 1\n    indexK = 0\n    while indexK < len(krat):\n        K = krat[indexK]\n        index = 0\n        while index < n and krat[indexK] != -1:\n            if a[index] % K == 0 and a[index] != 0:\n                b.append(a[index])\n                indK = indexK\n                while indK < len(krat):\n                    if a[index] % krat[indK] != 0:\n                        del krat[indK]\n                        krat.insert(indK, -1)\n                    indK += 1\n                del a[index]\n                a.insert(index, 0)\n            index += 1\n        indexK += 1\n    B = ''\n    for j in b:\n        B += str(j) + ' '\n    print(B)\n    i += 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    output = list()\n    max_gcd = 0\n    while a:\n        v = list(((gcd(max_gcd, x), x) for x in a))\n        m = max(v)\n        max_gcd = m[0]\n        output.append(str(m[1]))\n        a.remove(m[1])\n    print(' '.join(output))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    i = 1\n    temp = a[0]\n    add = -1\n    while i < n:\n        maxi = 0\n        for j in range(i, n):\n            if math.gcd(temp, a[j]) > maxi:\n                maxi = math.gcd(temp, a[j])\n                add = j\n        (a[i], a[add]) = (a[add], a[i])\n        temp = maxi\n        i += 1\n    print(*a)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = [max(a)]\n    gcd = max(a)\n    a.remove(max(a))\n    while len(a) > 0:\n        t = 0\n        var = 0\n        for i in a:\n            if math.gcd(gcd, i) > t:\n                var = i\n                t = math.gcd(gcd, i)\n        ans.append(var)\n        a.remove(var)\n        gcd = t\n    print(*ans)", "import math\nans = []\ntests = int(input())\nfor i in range(tests):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    max_num = max(a)\n    b = [max_num]\n    a.remove(max_num)\n    while a:\n        deno_list = [math.gcd(a[x], max_num) for x in range(len(a))]\n        max_deno = max(deno_list)\n        index = deno_list.index(max_deno)\n        max_num = max_deno\n        b.append(a[index])\n        a.remove(a[index])\n    b = [str(x) for x in b]\n    ans.append(b)\nfor i in ans:\n    print(' '.join(i))", "def gcd(a, b):\n    if a >= b:\n        if a % b == 0:\n            return b\n        else:\n            return gcd(a % b, b)\n    elif b % a == 0:\n        return a\n    else:\n        return gcd(a, b % a)\n\ndef fun(c, l):\n    t = 1\n    p = 0\n    for i in l:\n        v = gcd(i, c)\n        if v > t:\n            t = v\n            p = i\n    return [p, t]\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(sorted(list(map(int, input().split()))))\n    c = l[-1]\n    l.pop()\n    m = [c]\n    for i in range(n - 1):\n        u = fun(c, l)\n        k = u[0]\n        c = u[1]\n        if k:\n            m.append(k)\n            l.remove(k)\n        else:\n            m += l\n            break\n    print(*m, sep=' ')", "import math\nimport collections\n\ndef solution(n, a):\n    max_ = max(a)\n    max_i = a.index(max_)\n    x = [max_]\n    del a[max_i]\n    gcd = max_\n    while a != []:\n        out = collections.defaultdict(list)\n        for e in a:\n            out[math.gcd(gcd, e)].append(e)\n        temp = out.pop(max(list(out.keys())))\n        x.extend(temp)\n        for e in temp:\n            a.remove(e)\n        gcd = math.gcd(gcd, temp[0])\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(*solution(n, a))", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    prev_gcd = a[0]\n    for i in range(1, n):\n        max_gcd = 0\n        m = i\n        for j in range(i, n):\n            if gcd(prev_gcd, a[j]) > max_gcd:\n                m = j\n                max_gcd = gcd(prev_gcd, a[j])\n        (a[i], a[m]) = (a[m], a[i])\n        prev_gcd = gcd(prev_gcd, a[i])\n    print(' '.join(map(str, a)))", "for _ in range(int(input())):\n    from math import gcd\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = max(l)\n    lm = m\n    seen = (m + 1) * [0]\n    ans = []\n    while len(ans) < n:\n        a = []\n        for i in range(n):\n            if seen[l[i]] == 0 and gcd(lm, l[i]) > m:\n                a.clear()\n                a.append(l[i])\n                m = gcd(lm, l[i])\n            elif seen[l[i]] == 0 and gcd(lm, l[i]) == m:\n                a.append(l[i])\n        ans += a\n        for i in a:\n            seen[i] = 1\n        lm = m\n        m = 0\n    print(' '.join(list(map(str, ans))))", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    xo = 0\n    ans = []\n    while l:\n        t = max(l, key=lambda x: gcd(x, xo))\n        xo = gcd(t, xo)\n        ans.append(t)\n        l.remove(t)\n    print(*ans)", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    (*li,) = map(int, input().split())\n    a = max(li)\n    li.remove(a)\n    hcf = a\n    li1 = [a]\n    for i in range(x - 1):\n        (m, q) = (0, 0)\n        for j in li:\n            if m < gcd(hcf, j):\n                m = gcd(hcf, j)\n                q = j\n        li1 += [q]\n        li.remove(q)\n        hcf = m\n    print(*li1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())), reverse=1)\n    ans = [arr.pop(0)]\n    from math import gcd\n    g = gcd(ans[0], ans[0])\n    while arr:\n        p = 0\n        for i in range(len(arr)):\n            if gcd(g, arr[i]) > gcd(g, arr[p]):\n                p = i\n        g = gcd(arr[p], g)\n        ans.append(arr.pop(p))\n    print(*ans)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    xo = 0\n    ans = []\n    while l:\n        t = max(l, key=lambda x: gcd(x, xo))\n        xo = gcd(t, xo)\n        ans.append(t)\n        l.remove(t)\n    print(*ans)", "import math\n\ndef main(A, n):\n    res = []\n    val = max(A)\n    res.append(val)\n    A.remove(val)\n    pre_gcd = val\n    flag = 'Notfound'\n    while A != []:\n        max_gcd = 0\n        for i in A:\n            cur_gcd = math.gcd(pre_gcd, i)\n            if cur_gcd > max_gcd:\n                max_gcd = cur_gcd\n                val = i\n                flag = 'found'\n        if flag == 'Notfound':\n            A.remove(i)\n            res.append(i)\n        else:\n            A.remove(val)\n            res.append(val)\n            pre_gcd = max_gcd\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    val = main(A, n)\n    print(*val)", "from math import gcd\nfor _ in range(int(input())):\n    lens = int(input())\n    arrs = [int(x) for x in input().split()]\n    B = []\n    g = 0\n    while arrs:\n        a = max(arrs, key=lambda a: gcd(a, g))\n        B.append(a)\n        g = gcd(a, g)\n        arrs.remove(a)\n    print(*B)", "import math\n\ndef ans():\n    N = int(input())\n    for i in range(N):\n        A = int(input())\n        arr = sorted(list(map(int, input().split())))\n        c = []\n        arr = arr[::-1]\n        c += [int(arr[0])]\n        while len(arr) > 0:\n            a = 0\n            e = 0\n            for j in range(len(arr)):\n                if math.gcd(arr[j], c[-1]) > a:\n                    a = math.gcd(arr[j], c[-1])\n                    e = j\n            c += [a]\n            if len(arr) != 1:\n                print(arr[e], end=' ')\n            else:\n                print(arr[e])\n            arr.remove(arr[e])\nans()", "t = int(input())\nfor _ in range(t):\n    from math import gcd\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    b.append(max(a))\n    a.pop(a.index(max(a)))\n    c = b[0]\n    for i in range(n - 1):\n        m = 1\n        k = 0\n        for j in range(n - 1 - i):\n            if gcd(a[j], c) > m:\n                k = j\n                m = gcd(a[j], c)\n        c = m\n        b.append(a[k])\n        a.pop(k)\n    print(*b)", "from math import gcd\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    g = [max(a)]\n    ans = [max(a)]\n    a.remove(max(a))\n    for i in range(n - 1):\n        high = 0\n        for j in a:\n            if gcd(g[-1], j) > high:\n                high = gcd(g[-1], j)\n                k = j\n        a.remove(k)\n        ans.append(k)\n        g.append(high)\n    print(*ans)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    xo = 0\n    ans = []\n    while l:\n        t = max(l, key=lambda x: gcd(x, xo))\n        xo = gcd(t, xo)\n        ans.append(t)\n        l.remove(t)\n    print(*ans)", "from math import gcd\nfor q in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ind = -1\n    g = a[0]\n    j = 1\n    while j < n:\n        tmp = 0\n        for i in range(j, n):\n            y = gcd(g, a[i])\n            if y > tmp:\n                tmp = y\n                ind = i\n        (a[j], a[ind]) = (a[ind], a[j])\n        g = tmp\n        j += 1\n    print(*a)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    g = a[0]\n    i = 1\n    while i < n:\n        jj = 0\n        for j in range(i, n):\n            if gcd(g, a[j]) > jj:\n                jj = gcd(g, a[j])\n                ind = j\n        (a[i], a[ind]) = (a[ind], a[i])\n        g = jj\n        i += 1\n    print(*a)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    b = max(A)\n    c = max(A)\n    ans = [b]\n    A.pop(A.index(b))\n    for _ in range(N - 1):\n        g = 0\n        for a in A:\n            if gcd(c, a) > g:\n                g = gcd(c, a)\n                b = a\n        c = g\n        ans.append(b)\n        A.pop(A.index(b))\n    print(*ans)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    temp = max(a)\n    while len(a) > 0:\n        maxi = -1\n        add = -1\n        for i in range(len(a)):\n            if math.gcd(temp, a[i]) > maxi:\n                maxi = math.gcd(temp, a[i])\n                add = i\n        b.append(a.pop(add))\n        temp = maxi\n    print(*b)", "import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    n = Read.int()\n    a = Read.list_int()\n    l = 0\n    for i in range(n):\n        if a[i] > a[l]:\n            l = i\n    res = [str(a[l])]\n    tmp = {}\n    tmp[l] = 1\n    t = a[l]\n    for i in range(n - 1):\n        m = 0\n        idx = 0\n        for j in range(n):\n            if j in tmp:\n                continue\n            c = math.gcd(t, a[j])\n            if c > m:\n                m = c\n                idx = j\n        t = m\n        tmp[idx] = 1\n        res.append(str(a[idx]))\n    print(' '.join(res))\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    if n == 1:\n        print(*a)\n    else:\n        b = []\n        k = max(a)\n        b.append(k)\n        a.remove(k)\n        while a:\n            f = -10 ** 9\n            m = 0\n            for z in a:\n                temp = math.gcd(k, z)\n                if temp > f:\n                    f = temp\n                    m = z\n            k = f\n            b.append(m)\n            a.remove(m)\n        print(*b)", "try:\n    from math import gcd\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) for i in input().split(' ')]\n        m = max(a)\n        final = []\n        while a:\n            sets = max(((gcd(m, val), val) for val in a))\n            a.remove(sets[1])\n            final.append(sets[1])\n            m = sets[0]\n        print(*final)\nexcept:\n    pass", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [max(a)]\n    curr_gcd = ans[0]\n    while len(ans) < n:\n        prev = ans[-1]\n        next = -1\n        temp_gcd = -float('inf')\n        a.remove(prev)\n        for item in a:\n            if math.gcd(item, curr_gcd) > temp_gcd:\n                temp_gcd = math.gcd(item, curr_gcd)\n                next = item\n        curr_gcd = temp_gcd\n        ans.append(next)\n    print(*ans)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    (*li,) = map(int, input().split())\n    a = max(li)\n    li.remove(a)\n    hcf = a\n    li1 = [a]\n    for i in range(x - 1):\n        (m, q) = (0, 0)\n        for j in li:\n            if m < gcd(hcf, j):\n                m = gcd(hcf, j)\n                q = j\n        li1 += [q]\n        li.remove(q)\n        hcf = m\n    print(*li1)", "from math import gcd\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    dp = defaultdict(int)\n    for a in arr:\n        dp[a] += 1\n    gc = max(arr)\n    b = [gc]\n    dp[gc] -= 1\n    if dp[gc] == 0:\n        del dp[gc]\n    while dp:\n        mgc = -1\n        nex = None\n        for key in list(dp.keys()):\n            tgc = gcd(gc, key)\n            if tgc > mgc:\n                mgc = tgc\n                nex = key\n        gc = mgc\n        dp[nex] -= 1\n        b.append(nex)\n        if dp[nex] == 0:\n            del dp[nex]\n    print(*b)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    b = []\n    for _ in range(n):\n        x = max((gcd(y, g) for y in a if y > 0))\n        i = next((i for i in range(n) if a[i] > 0 and gcd(g, a[i]) == x))\n        b.append(a[i])\n        a[i] = 0\n        g = x\n    print(*b)", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    g = a[0]\n    for i in range(1, n):\n        m = 0\n        s = i\n        for j in range(i, n):\n            gc = gcd(g, a[j])\n            if gc > m:\n                s = j\n                m = gc\n        (a[i], a[s]) = (a[s], a[i])\n        g = m\n    print(*a, sep=' ')", "from math import gcd\nfor T in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    g = a[0]\n    for i in range(n):\n        Max = 0\n        ind = i\n        for j in range(i, n):\n            if gcd(g, a[j]) > Max:\n                Max = gcd(g, a[j])\n                ind = j\n        g = Max\n        (a[i], a[ind]) = (a[ind], a[i])\n    print(*a)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    b = list()\n    b.append(max(lst))\n    lst.remove(max(lst))\n    num = b[0]\n    for j in range(n - 1):\n        g = 0\n        for k in range(n - j - 1):\n            a = gcd(num, lst[k])\n            if a > g:\n                (x, g) = (lst[k], a)\n        num = g\n        lst.remove(x)\n        b.append(x)\n        if x == 1:\n            b += lst\n            break\n    print(*b)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    ls = [int(a) for a in input().split()]\n    ls1 = []\n    ls1.append(max(ls))\n    ls.remove(max(ls))\n    an = 0\n    for j in range(n - 1):\n        if math.gcd(ls1[0], ls[j]) > an:\n            an = math.gcd(ls1[0], ls[j])\n            an1 = ls[j]\n    if n > 1:\n        ls1.append(an1)\n        ls.remove(an1)\n        cgcd = an\n    for j in range(n - 2):\n        an = 0\n        for k in range(len(ls)):\n            if math.gcd(cgcd, ls[k]) > an:\n                an = math.gcd(cgcd, ls[k])\n                an1 = ls[k]\n        ls.remove(an1)\n        ls1.append(an1)\n        cgcd = an\n    print(''.join((str(a) + ' ' for a in ls1)))", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lexo(alist):\n    gcd = max(alist)\n    flist = []\n    flist.append(gcd)\n    alist.remove(gcd)\n    while len(alist):\n        oval = 0\n        val = 0\n        for a in alist:\n            g = computeGCD(a, gcd)\n            if g > val:\n                val = g\n                oval = a\n        gcd = val\n        flist.append(oval)\n        alist.remove(oval)\n    print(*flist)\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    x = input()\n    alist = [int(i) for i in x.split()]\n    lexo(alist)", "from math import gcd\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    g = [max(a)]\n    ans = [max(a)]\n    a.remove(max(a))\n    for i in range(n - 1):\n        high = 0\n        for j in a:\n            if gcd(g[-1], j) > high:\n                high = gcd(g[-1], j)\n                k = j\n        a.remove(k)\n        ans.append(k)\n        g.append(high)\n    print(*ans)\n    t -= 1", "import math\n\ndef lex_Arr(a_list, n):\n    temp_i = 0\n    answer_arr = [0] * n\n    for i in range(n):\n        if a_list[i] > a_list[temp_i]:\n            temp_i = i\n    answer_arr[0] = a_list[temp_i]\n    a_list[temp_i] = 0\n    val = answer_arr[0]\n    for i in range(1, n):\n        a = 0\n        b = 0\n        for j in range(n):\n            if a_list[j] and math.gcd(a_list[j], val) > b:\n                b = math.gcd(a_list[j], val)\n                a = j\n        answer_arr[i] = a_list[a]\n        val = b\n        a_list[a] = 0\n    return answer_arr\nt = int(input())\nfinal_arr = [[]]\nfor i in range(t):\n    n = int(input())\n    a_list = list(map(int, input().split()))\n    temp_arr = lex_Arr(a_list, n)\n    final_arr.append(temp_arr)\ndel final_arr[0]\nfor j in final_arr:\n    print(*j)", "import math\nfor y in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    j = 1\n    index = -1\n    g = l[0]\n    while j < n:\n        temp = 0\n        for i in range(j, n):\n            y = math.gcd(g, l[i])\n            if y > temp:\n                temp = y\n                index = i\n        (l[j], l[index]) = (l[index], l[j])\n        g = temp\n        j += 1\n    print(*l)", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = max(a)\n    l = defaultdict(int)\n    for i in a:\n        l[i] += 1\n    l[d] -= 1\n    ans = [d]\n    for i in range(n):\n        maxi = 0\n        t = 0\n        for i in range(n):\n            if math.gcd(d, a[i]) > maxi and l[a[i]] != 0:\n                maxi = math.gcd(d, a[i])\n                t = a[i]\n        ans.append(t)\n        d = math.gcd(d, t)\n        l[t] -= 1\n    print(*ans[:-1])\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nfor v in [*open(0)][2::2]:\n    l = list(map(int, v.split()))\n    g = max(l)\n    out = []\n    while l:\n        nex = max(((gcd(g, l[i]), i) for i in range(len(l))))\n        out += [l.pop(nex[1])]\n        g = nex[0]\n    print(' '.join(map(str, out)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    m = max(L)\n    ans = []\n    ans.append(m)\n    L.remove(m)\n    while len(L) > 0:\n        (g, e) = (-1, 0)\n        for i in range(len(L)):\n            if math.gcd(m, L[i]) > g:\n                g = math.gcd(m, L[i])\n                e = L[i]\n        m = g\n        L.remove(e)\n        ans.append(e)\n    print(*ans)", "import math\n\ndef main():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    cur = max(lst)\n    res = [lst.index(cur)]\n    st = set()\n    st.add(lst.index(cur))\n    for i in range(n - 1):\n        el = -1\n        mx = 0\n        for k in range(n):\n            if k in st:\n                pass\n            elif math.gcd(cur, lst[k]) > mx:\n                mx = math.gcd(cur, lst[k])\n                el = k\n        st.add(el)\n        res.append(el)\n        cur = mx\n    for i in res:\n        print(lst[i], end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    main()", "import math\nfor ad in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    x = [l[0]]\n    gc = l.pop(0)\n    high = 0\n    ind = -1\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            g = math.gcd(gc, l[j])\n            if g > high:\n                ind = j\n                high = g\n        if ind != -1:\n            y = l.pop(ind)\n            x.append(y)\n            gc = high\n            ind = -1\n            high = 0\n    x += l\n    for i in x:\n        print(i, end=' ')\n    print()", "from math import gcd\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    maxx = max(A)\n    curr_gcd = maxx\n    res = [maxx]\n    A.remove(maxx)\n    for j in range(n - 1):\n        temp = 1\n        elem = 0\n        for i in range(len(A)):\n            temp2 = gcd(curr_gcd, A[i])\n            if temp2 > temp:\n                temp = temp2\n                elem = i\n        res.append(A[elem])\n        curr_gcd = temp\n        A = A[:elem] + A[elem + 1:]\n    for x in res:\n        print(x, end=' ')\n    print()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    m = max(arr)\n    arr.remove(m)\n    gcd = m\n    res = [m]\n    num = 0\n    while len(arr) > 0:\n        tem = 0\n        for i in range(len(arr)):\n            if math.gcd(gcd, arr[i]) > tem:\n                tem = math.gcd(gcd, arr[i])\n                num = i\n        res.append(arr[num])\n        gcd = tem\n        del arr[num]\n    print(*res)", "from math import gcd\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    ans = [max(a)]\n    g = [max(a)]\n    a.remove(max(a))\n    for i in range(n - 1):\n        high = 0\n        maxi = 0\n        for j in a:\n            high = gcd(g[-1], j)\n            if high > maxi:\n                maxi = high\n                k = j\n        ans.append(k)\n        g.append(maxi)\n        a.remove(k)\n    print(*ans)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mgcd = max(l)\n    l.remove(max(l))\n    k = []\n    k.append(mgcd)\n    while len(l) > 0:\n        ans = 0\n        ind = 0\n        for i in range(len(l)):\n            kk = math.gcd(mgcd, l[i])\n            if kk > ans:\n                ans = kk\n                ind = i\n        k.append(l[ind])\n        mgcd = math.gcd(mgcd, ans)\n        l.remove(l[ind])\n    print(*k)", "from math import gcd\nfor q in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ind = -1\n    g = a[0]\n    j = 1\n    while j < n:\n        tmp = 0\n        for i in range(j, n):\n            y = gcd(g, a[i])\n            if y > tmp:\n                tmp = y\n                ind = i\n        (a[j], a[ind]) = (a[ind], a[j])\n        g = tmp\n        j += 1\n    print(*a)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l.sort(reverse=True)\n    a = max(l)\n    l.remove(a)\n    p = []\n    q = []\n    q.append(a)\n    p.append(a)\n    for k in range(n):\n        b = []\n        for j in l:\n            b.append(math.gcd(q[k], j))\n        if len(l) > 0:\n            t = max(b)\n            q.append(t)\n            w = b.index(t)\n            p.append(l[w])\n            l.remove(l[w])\n    print(*p)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import Counter, defaultdict as dft\n\ndef mp():\n    return map(int, input().split())\n\ndef ml():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(input())\n    arr = ml()\n    vis = [0] * (n + 5)\n    arr.sort(reverse=True)\n    res = []\n    for p in range(10 ** 3 + 1, 0, -1):\n        case = 0\n        for i in range(len(res)):\n            if res[i] % p != 0:\n                case = 1\n                break\n        if case:\n            continue\n        for i in range(n):\n            if vis[i] == 0 and arr[i] % p == 0:\n                res.append(arr[i])\n                vis[i] = 1\n    print(*res)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nfor q in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ind = -1\n    g = a[0]\n    j = 1\n    while j < n:\n        tmp = 0\n        for i in range(j, n):\n            y = gcd(g, a[i])\n            if y > tmp:\n                tmp = y\n                ind = i\n        (a[j], a[ind]) = (a[ind], a[j])\n        g = tmp\n        j += 1\n    print(*a)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    m = arr[0]\n    res = [arr[0]]\n    del arr[0]\n    currgcd = m\n    while arr:\n        m = -1\n        ind = -1\n        el = -1\n        for i in range(len(arr)):\n            gc = gcd(currgcd, arr[i])\n            if gc > m:\n                m = gc\n                ind = i\n                el = arr[i]\n        currgcd = gcd(el, currgcd)\n        res.append(el)\n        del arr[ind]\n    print(*res)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    out = [mx]\n    arr.remove(mx)\n    while arr:\n        f = [math.gcd(arr[i], mx) for i in range(len(arr))]\n        w = max(f)\n        index = f.index(w)\n        mx = w\n        out.append(arr[index])\n        arr.remove(arr[index])\n    print(*out)", "from math import gcd\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    new = []\n    g = [max(a)]\n    for i in range(n):\n        high = 0\n        maxi = 0\n        for j in a:\n            high = gcd(g[-1], j)\n            if high > maxi:\n                maxi = high\n                k = j\n        g.append(maxi)\n        new.append(k)\n        a.remove(k)\n    print(*new)\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef run_test():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [(x, x) for x in a]\n    res = []\n    while a:\n        (next_gcd, next_val) = max(a)\n        a.remove((next_gcd, next_val))\n        res.append(next_val)\n        a = [(gcd(next_gcd, v), x) for (v, x) in a]\n    print(*res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        run_test()\nmain()", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))[:n]\n    maxi_index = None\n    maxi = -float('inf')\n    for i in range(n):\n        if arr[i] > maxi:\n            maxi = arr[i]\n            maxi_index = i\n    (arr[0], arr[maxi_index]) = (arr[maxi_index], arr[0])\n    curr_gcd = arr[0]\n    for i in range(n - 1):\n        max_gcd = 0\n        max_index = None\n        for j in range(i + 1, n):\n            index_gcd = gcd(curr_gcd, arr[j])\n            if index_gcd > max_gcd:\n                max_index = j\n                max_gcd = index_gcd\n        curr_gcd = max_gcd\n        (arr[i + 1], arr[max_index]) = (arr[max_index], arr[i + 1])\n    for i in arr:\n        print(i, end=' ')\n    print()", "import math as mt\nt = int(input())\nfor i in range(0, t):\n    m = int(input())\n    arr = list(map(int, input().strip().split()))[:m]\n    l2 = []\n    l3 = []\n    y = max(arr)\n    l2.append(y)\n    l3.append(y)\n    arr.remove(y)\n    max1 = 0\n    for jk in range(0, m - 1):\n        max1 = 0\n        for j in arr:\n            gc = mt.gcd(l3[-1], j)\n            if gc > max1:\n                max1 = gc\n                k = j\n        l3.append(max1)\n        l2.append(k)\n        arr.remove(k)\n    print(*l2, sep=' ')", "from math import gcd\nfor v in [*open(0)][2::2]:\n    l = list(map(int, v.split()))\n    g = max(l)\n    out = []\n    while l:\n        nex = max(((gcd(g, l[i]), i) for i in range(len(l))))\n        out += [l.pop(nex[1])]\n        g = nex[0]\n    print(' '.join(map(str, out)))", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdarr = lambda : map(int, stdstr().split())\nmod = 1000000007\nfor _ in range(stdint()):\n    n = stdint()\n    arr = list(stdarr())\n    arr = sorted(arr, reverse=True)\n    m = max(arr)\n    res = [arr[0]]\n    del arr[0]\n    currgcd = m\n    while arr:\n        m = -1\n        ind = -1\n        el = -1\n        for i in range(len(arr)):\n            gc = gcd(currgcd, arr[i])\n            if gc > m:\n                m = gc\n                ind = i\n                el = arr[i]\n        currgcd = gcd(el, currgcd)\n        res.append(el)\n        del arr[ind]\n    print(*res)", "from math import gcd\n\ndef run():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    nums.reverse()\n    visited = [1] + [0] * (n - 1)\n    stack = [max(nums)]\n    flag = nums[0]\n    for i in range(1, n):\n        (p, m) = (-1, -1)\n        for j in range(1, n):\n            if visited[j]:\n                continue\n            t = gcd(flag, nums[j])\n            if m == -1 or t > m:\n                p = j\n                m = t\n        stack.append(nums[p])\n        flag = m\n        visited[p] = 1\n    print(' '.join((str(i) for i in stack)))\nT = 1\nif T:\n    for i in range(int(input())):\n        run()\nelse:\n    run()", "from math import gcd\nfor q in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ind = -1\n    g = a[0]\n    j = 1\n    while j < n:\n        tmp = 0\n        for i in range(j, n):\n            y = gcd(g, a[i])\n            if y > tmp:\n                tmp = y\n                ind = i\n        (a[j], a[ind]) = (a[ind], a[j])\n        g = tmp\n        j += 1\n    print(*a)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    p = -1\n    g = a[0]\n    j = 1\n    while j < n:\n        q = 0\n        for i in range(j, n):\n            y = math.gcd(g, a[i])\n            if y > q:\n                q = y\n                p = i\n        (a[j], a[p]) = (a[p], a[j])\n        g = q\n        j += 1\n    print(*a)", "import sys\nimport math\n\ndef f(a, n):\n    a.sort(reverse=True)\n    (b, vst) = ([a[0]], {0})\n    d = a[0]\n    while len(vst) < n:\n        (gcd, next) = (1, -1)\n        for i in range(len(a)):\n            if i not in vst:\n                if a[i] == d:\n                    (gcd, next) = (d, i)\n                    break\n                tmp = math.gcd(d, a[i])\n                if tmp >= gcd:\n                    (gcd, next) = (tmp, i)\n        b.append(a[next])\n        vst.add(next)\n        d = gcd\n    return b\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    out = f(a, n)\n    for i in range(n - 1):\n        sys.stdout.write('%d ' % out[i])\n    sys.stdout.write('%d\\n' % out[-1])", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nfrom math import log10, log2, ceil, factorial as f, gcd\nfor _ in range(t()):\n    n = t()\n    a = list(ll())\n    d = [0] * n\n    temp = max(a)\n    d[a.index(temp)] = 1\n    l = []\n    l.append(temp)\n    for i in range(n):\n        temp1 = 0\n        fx = -1\n        for j in range(n):\n            if d[j] == 0 and gcd(temp, a[j]) > temp1:\n                temp1 = gcd(temp, a[j])\n                fx = j\n        if fx != -1:\n            d[fx] = 1\n            l.append(a[fx])\n            temp = temp1\n    print(*l)"]