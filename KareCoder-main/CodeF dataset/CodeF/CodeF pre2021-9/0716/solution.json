["import io, os\nfrom enum import unique\nfrom heapq import *\n\ndef ri():\n    return int(input().strip())\n\ndef rl():\n    return list(map(int, input().strip().split()))\n\ndef Solve():\n    n = ri()\n    a = rl()\n    b = sorted(a)\n    mp = dict()\n    cnt = 0\n    for x in b:\n        if x not in mp:\n            mp[x] = cnt\n            cnt += 1\n    for i in range(n):\n        a[i] = mp[a[i]]\n    dp = [1] * n\n    pos = [0] * n\n    for i in range(n):\n        pos[a[i]] = i\n    for i in range(1, n):\n        if a[i] - 1 >= 0 and pos[a[i] - 1] < i:\n            dp[i] = dp[pos[a[i] - 1]] + 1\n    print(n - max(dp))\nT = ri()\nwhile T:\n    T -= 1\n    Solve()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    a = list(mints())\n    b = list(enumerate(a))\n    b.sort(key=lambda a: a[1])\n    c1 = [0] * n\n    c = 0\n    h = 0\n    p = -1\n    for (i, v) in b:\n        if i > p:\n            c += 1\n        else:\n            c = 1\n        h += 1\n        c1[i] = h - c\n        p = i\n    c = 0\n    h = 0\n    p = -1\n    ans = n + n\n    for z in range(len(b) - 1, -1, -1):\n        (i, v) = b[z]\n        if i < p:\n            c += 1\n        else:\n            c = 1\n        h += 1\n        ans = min(ans, h - c + c1[i])\n        p = i\n    print(ans)\nfor i in range(mint()):\n    solve()", "for _ in ' ' * int(input()):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = sorted(range(a), key=lambda x: b[x])\n    cnt = ans = 1\n    for i in range(1, a):\n        if c[i] > c[i - 1]:\n            cnt += 1\n        else:\n            ans = max(ans, cnt)\n            cnt = 1\n    print(a - max(ans, cnt))", "def search(lis, idx, val):\n    low = 0\n    high = idx\n    while low <= high:\n        mid = (low + high) // 2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef ans(arr):\n    lis_f = list(sorted(arr))\n    ans_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f, len(arr) - 1, arr[i])] = i\n    c = 1\n    p = 0\n    for j in range(1, len(arr)):\n        if ans_arr[j] > ans_arr[j - 1]:\n            c += 1\n        elif c > p:\n            p = c\n            c = 1\n        else:\n            c = 1\n    if c > p:\n        p = c\n    print(len(arr) - p)\nk = int(input())\nfor i in range(k):\n    input()\n    ans(list(map(int, input().split())))", "from sys import stdin\n\ndef bsearch(lis, idx, val):\n    l = 0\n    h = idx\n    while l <= h:\n        mid = (l + h) // 2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            h = mid - 1\n        else:\n            l = mid + 1\n\ndef res(arr):\n    lis_f = sorted(arr)\n    _arr = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        _arr[bsearch(lis_f, len(arr) - 1, arr[i])] = i\n    c = 1\n    p = 0\n    for j in range(1, len(arr)):\n        if _arr[j] > _arr[j - 1]:\n            c += 1\n        elif c > p:\n            p = c\n            c = 1\n        else:\n            c = 1\n    if c > p:\n        p = c\n    print(len(arr) - p)\nk = int(stdin.readline())\nwhile k:\n    stdin.readline()\n    res(list(map(int, stdin.readline().split())))\n    k -= 1", "from sys import stdin, stdout\n\ndef findops(l):\n    ans = 0\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            count += 1\n        else:\n            ans = max(ans, count)\n            count = 1\n    return len(l) - max(ans, count)\nfor _ in range(int(stdin.readline())):\n    stdin.readline()\n    l = list(map(int, stdin.readline().split()))\n    print(findops(sorted(range(len(l)), key=lambda x: l[x])))", "def search(lis, idx, val):\n    low = 0\n    high = idx\n    while low <= high:\n        mid = (low + high) // 2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef ans(arr):\n    hj = 9\n    ghkd = 898291\n    lis_f = sorted(arr)\n    ans_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f, len(arr) - 1, arr[i])] = i\n    c = 1\n    p = 0\n    for j in range(1, len(arr)):\n        if ans_arr[j] > ans_arr[j - 1]:\n            c += 1\n        elif c > p:\n            p = c\n            ghkd = 898291\n            c = 1\n        else:\n            c = 1\n    if c > p:\n        p = c\n    print(len(arr) - p)\nk = int(input())\nfor i in range(k):\n    input()\n    l = list(map(int, input().split()))\n    ans(l)", "from sys import stdin\n\ndef search(lis, idx, val):\n    low = 0\n    high = idx\n    while low <= high:\n        mid = (low + high) // 2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef ans(arr):\n    lis_f = sorted(arr)\n    ans_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f, len(arr) - 1, arr[i])] = i\n    c = 1\n    p = 0\n    for j in range(1, len(arr)):\n        if ans_arr[j] > ans_arr[j - 1]:\n            c += 1\n        elif c > p:\n            p = c\n            c = 1\n        else:\n            c = 1\n    if c > p:\n        p = c\n    print(len(arr) - p)\nfor i in range(1000):\n    continue\nfor i in range(int(stdin.readline())):\n    stdin.readline()\n    ans(list(map(int, stdin.readline().split())))", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = dict()\n    f = dict()\n    for i in range(n - 1, -1, -1):\n        d[b[i]] = i\n    for i in range(n):\n        where = d[a[i]]\n        if where == 0 or b[where - 1] not in f:\n            f[a[i]] = 1\n        else:\n            f[a[i]] = 1 + f[b[where - 1]]\n    print(n - max(f.values()))\ntn = int(input())\nfor _ in range(tn):\n    main()", "from sys import stdin\n\ndef search(lis, idx, val):\n    low = 0\n    high = idx\n    while low <= high:\n        mid = (low + high) // 2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef ans(arr):\n    lis_f = sorted(arr)\n    ans_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f, len(arr) - 1, arr[i])] = i\n    c = 1\n    p = 0\n    for j in range(1, len(arr)):\n        if ans_arr[j] > ans_arr[j - 1]:\n            c += 1\n        elif c > p:\n            p = c\n            c = 1\n        else:\n            c = 1\n    if c > p:\n        p = c\n    print(len(arr) - p)\nfor i in range(int(stdin.readline())):\n    stdin.readline()\n    ans(list(map(int, stdin.readline().split())))", "from sys import stdin, stdout\n\ndef findops(l):\n    ans = 0\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            count += 1\n        else:\n            ans = max(ans, count)\n            count = 1\n    return len(l) - max(ans, count)\n\ndef main():\n    for _ in range(int(stdin.readline())):\n        stdin.readline()\n        l = list(map(int, stdin.readline().split()))\n        print(findops(sorted(range(len(l)), key=lambda x: l[x])))\nmain()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lis = list(set(arr))\n    lis.sort()\n    lis = list(zip(lis, range(0, len(lis))))\n    dic = dict(lis)\n    inc_sub = defaultdict(int)\n    for i in arr:\n        ele = dic[i]\n        inc_sub[ele] = 1 + max(inc_sub[ele], inc_sub[ele - 1])\n    print(n - max(inc_sub.values()))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lis = list(set(arr))\n    lis.sort()\n    lis = list(zip(lis, range(0, len(lis))))\n    dic = dict(lis)\n    inc_sub = defaultdict(int)\n    for i in arr:\n        ele = dic[i]\n        inc_sub[ele] = 1 + max(inc_sub[ele], inc_sub[ele - 1])\n    print(n - max(inc_sub.values()))", "def read_list():\n    return list(map(int, input().strip().split(' ')))\n\ndef print_list(l):\n    print(' '.join(map(str, l)))\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    nums = read_list()\n    dic = {}\n    for i in range(n):\n        dic[nums[i]] = i\n    nums.sort()\n    res = 0\n    tmp = 1\n    for i in range(1, n):\n        if dic[nums[i]] < dic[nums[i - 1]]:\n            res = max(res, tmp)\n            tmp = 1\n        else:\n            tmp += 1\n    res = max(res, tmp)\n    print(n - res)", "import collections\nimport string\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = collections.defaultdict(list)\n    f = collections.defaultdict(list)\n    for i in range(n - 1, -1, -1):\n        d[b[i]].append(i)\n    tmp = []\n    for i in range(n):\n        whereInB = d[a[i]][-1]\n        if a[i] in f:\n            z = 1 + f[a[i]][-1]\n            if whereInB != 0 and b[whereInB - 1] in f:\n                prevNumberList = f[b[whereInB - 1]]\n                p = prevNumberList\n                z = max(z, p[0] + len(p))\n            f[a[i]].append(z)\n            tmp.append(f[a[i]][-1])\n            continue\n        if whereInB == 0 or b[whereInB - 1] not in f:\n            f[a[i]].append(1)\n        elif len(d[b[whereInB - 1]]) == len(f[b[whereInB - 1]]):\n            prevNumberList = f[b[whereInB - 1]]\n            p = prevNumberList\n            f[a[i]].append(p[0] + len(p))\n        else:\n            f[a[i]].append(1 + len(f[b[whereInB - 1]]))\n        tmp.append(f[a[i]][-1])\n    print(n - max(map(max, f.values())))\ntn = int(input())\nfor _ in range(tn):\n    main()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    d = [0] * (n + 1)\n    for i in a:\n        d[b.index(i)] = 1 + d[b.index(i) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    (b, d) = (sorted(lst), [0] * (n + 1))\n    for elem in lst:\n        d[b.index(elem)] = 1 + d[b.index(elem) - 1]\n    print(n - max(d))", "for j in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    d = [0] * (n + 1)\n    for i in a:\n        d[b.index(i)] = 1 + d[b.index(i) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    (b, d) = (sorted(lst), [0] * (n + 1))\n    for elem in lst:\n        d[b.index(elem)] = 1 + d[b.index(elem) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    (b, d) = (sorted(lst), [0] * (n + 1))\n    for elem in lst:\n        d[b.index(elem)] = 1 + d[b.index(elem) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    d = [0] * (n + 1)\n    for i in a:\n        d[b.index(i)] = 1 + d[b.index(i) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    (b, d) = (sorted(lst), [0] * (n + 1))\n    for elem in lst:\n        d[b.index(elem)] = 1 + d[b.index(elem) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    d = [0] * (n + 1)\n    for i in a:\n        d[b.index(i)] = 1 + d[b.index(i) - 1]\n    print(n - max(d))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    d = [0] * (n + 1)\n    for i in a:\n        d[b.index(i)] = 1 + d[b.index(i) - 1]\n    print(n - max(d))", "I = lambda : list(map(int, input().split()))\n\ndef lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] == arr[j] + 1 and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, lis[i])\n    return maximum\nfor tc in range(int(input())):\n    (n,) = I()\n    l = I()\n    ar = l.copy()\n    ar.sort()\n    f = {}\n    for i in range(n):\n        f[ar[i]] = i + 1\n    for i in range(n):\n        l[i] = f[l[i]]\n    print(n - lis(l))", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n\ndef lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] == arr[j] + 1 and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    ma = 0\n    for i in range(n):\n        ma = max(ma, lis[i])\n    return ma\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    l = I()\n    p = list(l)\n    k = sorted(l)\n    d = {}\n    for i in range(n):\n        d[k[i]] = i + 1\n    for i in range(n):\n        l[i] = d[l[i]]\n    if k == p:\n        print(0)\n        continue\n    x = lis(l)\n    print(n - x)", "I = lambda : list(map(int, input().split()))\n\ndef lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] == arr[j] + 1 and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    maximum = 0\n    mm = min(lis)\n    for i in range(n):\n        maximum = max(maximum, lis[i])\n    return (maximum, mm)\nfor tc in range(int(input())):\n    (n,) = I()\n    l = I()\n    ar = l.copy()\n    ar.sort()\n    f = {}\n    for i in range(n):\n        f[ar[i]] = i + 1\n    for i in range(n):\n        l[i] = f[l[i]]\n    te = lis(l)\n    print(min(n - te[0], n - te[1]))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(list(set(a)))\n    max_r = 0\n    for i in range(n):\n        a[i] = b.index(a[i])\n    while a != []:\n        r = 0\n        last = a[-1]\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == last or a[i] + 1 == last:\n                r += 1\n                last = a[i]\n                a.pop(i)\n        if r > max_r:\n            max_r = r\n    print(n - max_r)"]