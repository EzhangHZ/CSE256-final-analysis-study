["from collections import Counter\n\ndef solve(s):\n    alpha = Counter(s)\n    if len(alpha) <= 1:\n        return s\n    keys = sorted(alpha.keys())\n    for key in keys:\n        if alpha[key] == 1:\n            arr = [key]\n            for k in keys:\n                if k == key:\n                    continue\n                for _ in range(alpha[k]):\n                    arr.append(k)\n            return ''.join(arr)\n    a = keys[0]\n    if alpha[a] - 2 <= len(s) - alpha[a]:\n        arr = [a, a]\n        alpha[a] -= 2\n        for key in keys[1:]:\n            for _ in range(alpha[key]):\n                arr.append(key)\n                if alpha[a] > 0:\n                    alpha[a] -= 1\n                    arr.append(a)\n        return ''.join(arr)\n    b = keys[1]\n    arr = [a, b]\n    alpha[a] -= 1\n    alpha[b] -= 1\n    if len(alpha) >= 3:\n        c = keys[2]\n        for _ in range(alpha[a]):\n            arr.append(a)\n        arr.append(c)\n        alpha[c] -= 1\n        for key in keys[1:]:\n            for _ in range(alpha[key]):\n                arr.append(key)\n    else:\n        for _ in range(alpha[b]):\n            arr.append(b)\n        for _ in range(alpha[a]):\n            arr.append(a)\n    return ''.join(arr)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        ans = solve(s)\n        print(ans)\nmain()", "from collections import Counter\n\ndef solve(s):\n    alpha = Counter(s)\n    if len(alpha) <= 1:\n        return s\n    keys = sorted(alpha.keys())\n    for key in keys:\n        if alpha[key] == 1:\n            arr = [key]\n            for k in keys:\n                if k != key:\n                    arr += [k for _ in range(alpha[k])]\n            return ''.join(arr)\n    a = keys[0]\n    if alpha[a] - 2 <= len(s) - alpha[a]:\n        arr = [a, a]\n        alpha[a] -= 2\n        for key in keys[1:]:\n            for _ in range(alpha[key]):\n                arr.append(key)\n                if alpha[a] > 0:\n                    alpha[a] -= 1\n                    arr.append(a)\n        return ''.join(arr)\n    b = keys[1]\n    arr = [a, b]\n    alpha[a] -= 1\n    alpha[b] -= 1\n    if len(alpha) >= 3:\n        c = keys[2]\n        arr += [a for _ in range(alpha[a])]\n        arr.append(c)\n        alpha[c] -= 1\n        arr += [key for key in keys[1:] for _ in range(alpha[key])]\n    else:\n        arr += [b for _ in range(alpha[b])] + [a for _ in range(alpha[a])]\n    return ''.join(arr)\nfor _ in range(int(input())):\n    print(solve(input()))", "from collections import Counter\n\ndef solve(s):\n    alpha = Counter(s)\n    if len(alpha) <= 1:\n        return s\n    keys = sorted(alpha.keys())\n    for key in keys:\n        if alpha[key] == 1:\n            arr = [key]\n            for k in keys:\n                if k == key:\n                    continue\n                for _ in range(alpha[k]):\n                    arr.append(k)\n            return ''.join(arr)\n    a = keys[0]\n    if alpha[a] - 2 <= len(s) - alpha[a]:\n        arr = [a, a]\n        alpha[a] -= 2\n        for key in keys[1:]:\n            for _ in range(alpha[key]):\n                arr.append(key)\n                if alpha[a] > 0:\n                    alpha[a] -= 1\n                    arr.append(a)\n        return ''.join(arr)\n    b = keys[1]\n    arr = [a, b]\n    alpha[a] -= 1\n    alpha[b] -= 1\n    if len(alpha) >= 3:\n        c = keys[2]\n        arr += [a for _ in range(alpha[a])]\n        arr.append(c)\n        alpha[c] -= 1\n        arr += [key for key in keys[1:] for _ in range(alpha[key])]\n    else:\n        arr += [b for _ in range(alpha[b])] + [a for _ in range(alpha[a])]\n    return ''.join(arr)\nfor _ in range(int(input())):\n    print(solve(input()))"]