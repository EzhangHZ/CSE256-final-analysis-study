["import math\n\ndef simplePolygonEmbedding(n):\n    ans = math.tan((n - 1) * math.pi / (2 * n))\n    return ans\nfor x in range(int(input())):\n    print(simplePolygonEmbedding(int(input())))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    n = 2 * n\n    p = math.pi\n    t = math.tan(p / n)\n    ans = 1 / t\n    print(ans)", "from math import *\nfor s in [*open(0)][1:]:\n    print(1 / tan(pi / 2 / int(s)))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    print(round(1 / math.tan(math.pi / 2 / n), 9))", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    ans = round(1 / math.tan(math.pi / (2 * n)), 9)\n    print(ans)", "from math import tan, radians\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    theta1 = 180 / n\n    theta2 = (180 - theta1) / 2\n    print(tan(radians(theta2)))", "from math import tan, radians\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    theta1 = 180 / n\n    theta2 = (180 - theta1) / 2\n    print(tan(radians(theta2)))", "from math import *\nfor s in [*open(0)][1:]:\n    print(1 / tan(pi / 2 / int(s)))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input()) * 2\n    print(1 / math.tan(math.pi / n))", "import math\nt = int(input())\nwhile t > 0:\n    n = 2 * float(input())\n    print(2 * 0.5 * math.tan((90 - 180 / n) * (math.pi / 180)), '\\n')\n    t -= 1", "import math\ncases = int(input())\nfor z in range(cases):\n    num = int(input())\n    val = math.tan(math.pi / (2 * num))\n    print(1 / val)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "import math\nt = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "from math import *\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ans = tan(pi / (2 * n))\n    ans = 1 / ans\n    print(ans)\n    t -= 1", "from math import radians, tan\nT = int(input())\nfor t in range(T):\n    n = 2 * int(input())\n    print(1 / tan(radians(180 / n)))", "import math\npi = 3.14159265359\nt = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    print(1 / math.tan(pi / (2 * n)))", "from math import *\nfor s in [*open(0)][1:]:\n    print(1 / tan(pi / 2 / int(s)))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input()) * 2\n    if n / 4 == n // 4:\n        print(1 / math.tan(math.pi / n))\n    else:\n        print(1 / math.sin(math.pi / n) / 2 ** 0.5)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 1 / tan(pi / 2 / n)\n    print(f'{ans:.9f}')", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    print(1 / math.tan(math.pi / (2 * a)))", "from math import tan, pi, radians\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    pie = pi\n    angle = radians(90 / y)\n    ans = 1 / tan(angle)\n    print('{:.9f}'.format(ans))", "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(3001)\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    angel = math.pi / (2 * n)\n    d3 = 1 / math.tan(angel)\n    print(d3)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "from math import *\nfor i in range(int(input())):\n    print(1 / tan(pi / (2 * int(input()))))", "import math\nt = int(input())\nans_arr = []\nvalue = math.acos(-1)\nfor i in range(t):\n    n = int(input())\n    n = 2 * n\n    ans = (n - 2) * 180\n    ans = ans / (n * 2)\n    ans = value / 180 * (ans * 1)\n    ans_arr.append(math.tan(ans))\nfor j in ans_arr:\n    print(format(j, '.9f'))", "import math\ninp = int(input())\narr = []\nfor i in range(inp, 0, -1):\n    n = int(input())\n    n = n * 2\n    res = (n - 2) * 180.0\n    res = res / (n * 2.0)\n    res = math.acos(-1.0) / 180.0 * (res * 1.0)\n    print('{:.9f}'.format(round(math.tan(res), 9)))\n    arr.append(res)", "def solution():\n    import math\n\n    def anwser(n: int):\n        share = math.pi / n\n        sum = 0\n        for i in range(1, n + 1):\n            sum += math.sin(share * i)\n        print(sum)\n        return 0\n    count = int(input())\n    for i in range(0, count):\n        n = int(input())\n        anwser(n)\n    return 0\nsolution()", "import math\n\ndef x(i):\n    su = 0\n    s = math.pi / i\n    for x in range(1, i + 1):\n        su += math.sin(s * x)\n    print(su)\nn = int(input())\nwhile n:\n    n -= 1\n    x(int(input()))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 2:\n        print(1)\n        continue\n    r = (n - 1) / (2 * n)\n    h = math.tan(r * math.pi)\n    print(h)", "import math\n\ndef x(i):\n    su = 0\n    s = math.pi / i\n    for x in range(1, i + 1):\n        su += math.sin(s * x)\n    print(su)\nn = int(input())\nwhile n:\n    n -= 1\n    x(int(input()))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "from math import tan, pi\n\ndef main():\n    return '\\n'.join(map(str, (squareLengthMin(int(input()) * 2) for x in range(int(input())))))\n\ndef squareLengthMin(nSides):\n    return 1 / tan(pi / nSides)\nprint(main())", "from math import cos, pi\nfor nt in range(int(input())):\n    n = int(input())\n    ans = ((1 - cos((n - 1) * pi / n)) / (1 - cos(pi / n))) ** 0.5\n    print(ans)", "import math\n\ndef main():\n    n = int(input())\n    p = math.pi\n    tht = p / n\n    ans = 1 / math.tan(tht / 2)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    main()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "import math\ntest = int(input())\nfor k in range(test):\n    n = int(input())\n    if n % 2 == 0:\n        sum = 0\n        for x in range(1, n):\n            sum += math.sin(x * math.pi / n)\n        print(sum)\n    else:\n        a = n // 4\n        horizontal_sum = 1\n        for i in range(1, a + 1):\n            horizontal_sum += 2 * math.cos(i * math.pi / n)\n        j = a + 1\n        vertical_sum = 0\n        while 2 * j < n:\n            vertical_sum += math.sin(j * math.pi / n)\n            j += 1\n        vertical_sum *= 2\n        print(round((vertical_sum + horizontal_sum) / math.sqrt(2), 9))", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    ans = 1 / math.tan(math.pi / (2 * n))\n    print(ans)\n    t -= 1", "import math\nn = int(input())\nfor i in range(n):\n    t = int(input())\n    t = t * 2\n    print(1 / math.tan(3.141592653589793 / t))", "import math\nn = int(input())\nwhile n != 0:\n    n -= 1\n    x = int(input())\n    print(1 / math.tan(math.pi / (2 * x)))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "from math import tan, radians\nfor _ in range(int(input())):\n    n = 2 * int(input())\n    apot = 0.5 * tan(radians((90 * n - 180) / n))\n    diag = (0.25 + apot ** 2) ** 0.5\n    if n % 4:\n        print(diag * 2)\n    else:\n        print(apot * 2)", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    N = int(input())\n    n = 2 * N\n    piee = math.pi\n    result = math.cos(piee / n) / math.sin(piee / n)\n    print(result)", "import math\nt = int(input())\nfor i in range(0, t):\n    a = int(input())\n    pi = math.pi\n    print(round(1 / math.tan(pi / (2 * a)), 9))", "import math\nt = int(input())\nfor ti in range(t):\n    n = int(input())\n    a = math.pi / (2 * n)\n    side = 1 / math.tan(a)\n    print(side)", "from math import sin, pi\n\ndef solve():\n    n = int(input())\n    return sin((n - 1) * pi / (2 * n)) / sin(pi / (2 * n))\n\ndef main():\n    t = int(input())\n    print('\\n'.join(map(str, [solve() for _ in range(t)])))\nmain()", "from math import sin, pi, radians\n\ndef solve():\n    n = int(input()) * 2\n    a = 180 * (n - 2) / n\n    bc = (180 - a) / 2\n    d = 0.5 / sin(radians(bc))\n    return round(2 * (d ** 2 - 0.25) ** 0.5, 8)\nfor _ in range(int(input())):\n    print(solve())", "import math\nPI = math.pi\n\ndef cot(x):\n    return math.cos(x) / math.sin(x)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(cot(PI / (2 * n)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    r = 1 / (2 * math.tan(360 / (2 * 2 * n) * (math.pi / 180)))\n    R = 1 / (2 * math.sin(360 / (2 * 2 * n) * (math.pi / 180)))\n    print(r * 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    rad = math.radians(90 * (1 - 1 / n))\n    print(math.tan(rad) + 1e-10)", "def ip():\n    return int(input())\n\ndef Ip():\n    return map(int, input().split())\nfrom math import tan, pi\nfor _ in range(0, ip()):\n    n = ip()\n    a = tan(pi / (2 * n))\n    x = 1 / a\n    print('%.9f' % x)", "from math import pi, sin, cos\nT = int(input().strip())\nfor t in range(T):\n    n = int(input().strip())\n    alpha = pi / n\n    R = 1 / (2 * sin(alpha / 2))\n    if n % 2 == 0:\n        gamma = alpha / 2\n    else:\n        k = n // 2\n        gamma = pi / 2 - alpha * k\n    res = R * 2 * cos(gamma)\n    print(res)", "import math\nTT = int(input())\nfor _ in range(TT):\n    n = int(input())\n    cc = 1 / math.tan(math.pi / (2 * n))\n    r = cc / 2\n    d = 2 * r\n    ans = d\n    print(ans)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    th = math.pi / (2 * n)\n    res = 1.0 / math.tan(th)\n    print(res)", "import math\nfor ad in range(int(input())):\n    n = int(input())\n    n *= 2\n    t = math.pi / n\n    x = math.cos(t) / (2 * math.sin(t))\n    print(2 * x)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "import sys\nimport math\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    v = math.cos(math.pi / n)\n    v = 1 - v\n    v = 1 / v\n    v /= 2\n    v = pow(v, 0.5)\n    cc = math.cos((n - 1) * math.pi / n)\n    xx = (1 - cc) * (2 * v * v)\n    xx = pow(xx, 0.5)\n    print(xx)\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "from math import sin, tan, pi\nfor t in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(1 / tan(pi / (2 * n)))\n    else:\n        print((1 / 2 + 1 / tan(pi / (2 * n))) / 2 ** 0.5)", "import math\n\ndef square(n):\n    n *= 2\n    return n * pow(1, 2) / 4 * 1 / math.tan(math.pi / n)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = square(n) / (n / 2)\n    print(res)", "import math\nfor num in range(int(input())):\n    n = int(input())\n    m = 2 * n\n    print(m / (4 * math.tan(math.radians(180 / m))) / (n / 2))", "import math\n\ndef f(n):\n    x = n // 2 + 1\n    t = 90 / (x - 1)\n    d = math.radians(t)\n    r = math.sin(x * d / 2) / math.sin(d / 2)\n    return r * math.cos((x - 1) * d / 2) - 1\nfor _ in range(int(input())):\n    print(1 + 2 * f(int(input())))", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nimport math\nfor _ in range(int(input())):\n    (n,) = I()\n    print(1 / math.tan(math.radians(90 / n)))", "import math\n\ndef solve():\n    n = float(input())\n    ans = 1.0\n    for i in range(1, int(n / 2)):\n        ans += 2 * abs(math.sin(math.radians(90 / (n / 2) * i)))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = math.pi / (2 * n)\n    print(1 / math.tan(x))", "import math\n\ndef solution():\n    n = int(input())\n    theta = 2 * math.pi / (2 * n)\n    height = 0.0\n    for i in range(1, n // 2):\n        height += math.sin(theta * i)\n    height = height * 2 + 1\n    print(height)\nT = int(input())\nfor t in range(T):\n    solution()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = math.pi / n\n    y = math.tan(x / 2)\n    b = float(0.5 / y)\n    print(float(2) * b)", "from math import pi, tan\nfor _ in range(int(input())):\n    n = int(input())\n    print('%.7f' % tan((n - 1) * pi / (2 * n)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    n = 2 * n\n    ans = 1 / math.tan(math.pi / n)\n    print('%0.9f' % ans)", "import math\n\ndef solve(n):\n    r = 0.5 / math.sin(math.pi / n)\n    l = math.sqrt(r * r - 0.25)\n    return 2.0 * l\ntests = int(input())\nfor test in range(tests):\n    n = 2 * int(input())\n    print(solve(n))", "import math\nel = int(input())\nfor i in range(el):\n    num = int(input())\n    num = 2 * num\n    r = 1 / 2 * 1 / math.tan(math.radians(180 / num))\n    print(r * 2)", "import math\n\ndef sol(n):\n    n = n // 2\n    a = 360 / (4 * n)\n    s = 1\n    for x in range(1, n):\n        s += 2 * math.cos(math.radians(a * x))\n    return s\nt = int(input())\nfor _ in range(t):\n    s = int(input())\n    v = sol(s)\n    print(v)", "from math import tan, pi\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / tan(pi / (2 * n)))", "import math\nt = int(input(''))\nwhile t > 0:\n    n = int(input(''))\n    r = 1 / math.tan(math.radians(90 / n))\n    print(r)\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    if n == 2:\n        print(1)\n        t -= 1\n        continue\n    sides = 2 * n\n    y = 360.0 / sides\n    x = float((180 - y) / 2)\n    z = 90 - x\n    rad = math.radians(z)\n    halfSide = float(1 / (2 * math.tan(rad)))\n    ans = 2 * halfSide\n    print('%.9f' % ans)\n    t -= 1", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    A1 = pi / (2 * n)\n    print(1 / tan(A1))", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    angleinDegrees = 90 - 90 / n\n    angleInRad = math.radians(angleinDegrees)\n    print('%.8f' % math.tan(angleInRad))", "import math\nxm = int(input())\nfor rt in range(xm):\n    n = int(input())\n    n *= 2\n    p = math.pi\n    t = math.tan(p / n)\n    print(1 / t)", "from math import cos, pi, acos\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    if n == 2:\n        print(1)\n        continue\n    b = pi / n\n    r2 = 1 / (1 - cos(b))\n    a = pi / 2 - b\n    d = r2 - r2 * cos(a)\n    c = (d / 2) ** 0.5\n    print(c * 2 + 1)", "from math import pi, tan\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(f'{1 / tan(pi / 2 / n):.9f}')", "from math import tan, pi\n\ndef polyapothem(n, a):\n    return 2.0 * (a / (2 * tan(180.0 / n * pi / 180.0)))\nfor __ in range(int(input())):\n    nn = int(input())\n    print(polyapothem(nn * 2, 1))", "import math\nfor e in range(int(input())):\n    n = int(input())\n    n = 2 * n\n    pi = math.pi\n    ans = math.tan(pi / n)\n    print(round(1 / ans, 7))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.cos(math.radians(90 / n)) / math.sin(math.radians(90 / n)))", "from math import cos, radians, sin\nt = int(input())\nfor i in range(t):\n    inp_n = int(input())\n    p = 2 * inp_n\n    d = 90 / (p / 4)\n    a = 0\n    n = p // 4 + 1\n    pro1 = cos((n - 1) * radians(d) / 2) * sin(n * radians(d) / 2)\n    pro2 = sin(radians(d) / 2)\n    div = pro1 / pro2\n    result = 2 * div - 1\n    print(round(result, 9))", "import math\nt = int(input())\nfor i in range(t):\n    n = float(input())\n    n = 2.0 * n\n    a = (n - 2) * 180.0 / (2 * n)\n    r = math.radians(a)\n    print(round(1.0 * math.tan(r), 7))", "from math import pi, sin, sqrt\n\ndef ans(n):\n    r = pi / (2 * n)\n    m = 1 / sin(r)\n    q = sqrt((m / 2) ** 2 - 0.5 ** 2) * 2\n    return round(q, 9)\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans(n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 / math.tan(math.pi / (2 * n)))", "import math\nt = eval(input())\nfor i in range(t):\n    n = eval(input())\n    len = 2 * n\n    ans = 1 / math.sin(math.radians(180.0 / len)) * math.cos(math.radians(180.0 / len))\n    print(ans)", "from math import tan, pi\nfor _ in range(int(input())):\n    n = int(input())\n    u = 2 * n\n    r = pi / u\n    y = 1 / tan(r)\n    print(y)", "import math\nt = int(input())\nfor i1 in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        theta = 1 / n * math.pi\n        print(1 / math.tan(theta / 2))", "from math import tan, pi\n\ndef getApothem(n):\n    return 1 / (2 * tan(pi / n))\nfor _ in range(int(input())):\n    n = int(input())\n    print('{0:.6f}'.format(2 * getApothem(2 * n)))", "import math\nfor t in range(int(input())):\n    sides = int(input())\n    N = 2 * sides\n    angle = 90 - 180 / N\n    rad = math.radians(angle)\n    ans = math.tan(rad)\n    print(ans)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    if n == 2:\n        print(1)\n    else:\n        re = math.tan(float(3.141592653 / (n * 2)))\n        a = 1 / re\n        print(a)", "import math\n\ndef solve():\n    n = int(input())\n    n = 2 * n\n    a1 = 360 / n\n    a = a1 / 2\n    a = math.radians(a)\n    a = math.tan(a)\n    x = 1 / a\n    print('%.9f' % x)\nfor _ in range(int(input())):\n    solve()", "import math\ntests = int(input())\nwhile tests > 0:\n    n = 2 * int(input())\n    interior = 360 / n\n    degree = (180 - interior) / 2\n    angle = math.radians(degree)\n    h = math.tan(angle)\n    h = round(math.tan(angle), 7)\n    print(h)\n    tests -= 1", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        print(1 / math.sin(math.pi / 2 / n))\n    else:\n        print(1 / math.tan(math.pi / 2 / n))", "import math\nfor q in range(int(input())):\n    n = int(input())\n    n = 2 * n\n    angle = (n - 2) * 180 / n / 2\n    ans = math.tan(math.radians(angle))\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    n = 2 * n\n    a = math.pi / n\n    radius = 1 / (2 * math.sin(a))\n    ans = 2 * radius * math.cos(a)\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1 / math.tan(math.radians(90 / n)))", "from math import tan, radians\nfor _ in range(int(input())):\n    n = int(input()) * 2\n    angle = (n - 2) * 90 / n\n    print(tan(radians(angle)))"]