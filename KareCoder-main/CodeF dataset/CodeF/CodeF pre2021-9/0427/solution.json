["import sys\ninput = sys.stdin.readline\n\ndef solution(n, k, s):\n    seq_lengths_L = []\n    count_L_seq = 0\n    first = 0\n    last = 0\n    score = 0\n    for pos in range(n):\n        if s[pos] == 'W':\n            if pos > 0 and s[pos - 1] == 'W':\n                score += 2\n            else:\n                score += 1\n    if k == 0:\n        print(score)\n        return\n    for char in s:\n        if char == 'L':\n            count_L_seq += 1\n        else:\n            seq_lengths_L.append(count_L_seq)\n            count_L_seq = 0\n    seq_lengths_L.append(count_L_seq)\n    if len(seq_lengths_L) == 1:\n        print(min(2 * n - 1, 2 * k - 1))\n        return\n    first = seq_lengths_L[0]\n    last = seq_lengths_L[-1]\n    seq_lengths_L = seq_lengths_L[1:-1]\n    seq_lengths_L.sort()\n    for diff in seq_lengths_L:\n        if diff > 0:\n            if diff <= k:\n                score += 2 * diff + 1\n                k -= diff\n            else:\n                score += 2 * k\n                print(score)\n                return\n    if first <= k:\n        score += 2 * first\n        k -= first\n    else:\n        score += 2 * k\n        print(score)\n        return\n    score += 2 * min(last, k)\n    print(score)\n    return\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    solution(n, k, s)", "t = int(input())\nfinal = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    st = 0\n    end = n - 1\n    sumw = s.count('W')\n    if sumw == 0:\n        if k >= n:\n            final.append(str(n * 2 - 1))\n        elif k:\n            final.append(str(k * 2 - 1))\n        else:\n            final.append('0')\n        continue\n    for i in range(n):\n        if s[i] == 'W':\n            st = i\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'W':\n            end = i\n            break\n    temp = 0\n    sums = []\n    ans = 0\n    flag = 0\n    for i in range(st, end + 1):\n        if s[i] == 'L':\n            temp += 1\n            flag = 0\n        else:\n            ans += 1 + flag\n            flag = 1\n            if temp:\n                sums.append(temp)\n                temp = 0\n    sums.sort()\n    for i in sums:\n        if k >= i:\n            ans += i * 2 + 1\n            k -= i\n        else:\n            ans += k * 2\n            k = 0\n    left = st + n - 1 - end\n    if k >= left:\n        ans += left * 2\n    else:\n        ans += k * 2\n    final.append(str(ans))\nprint('\\n'.join(final))", "import sys\n\ndef sol(n, k, s):\n    a = sorted(map(len, s.strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    return (2 * min(n, m - 1) - len(a) or 1) - 1\n\ndef main():\n    f = sys.stdin\n    t = int(f.readline())\n    for _ in range(t):\n        (n, k) = map(int, f.readline().split())\n        s = f.readline().strip()\n        print(sol(n, k, s))\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    S = input()\n    wins = S.count('W')\n    if k >= n - wins:\n        print(2 * n - 1)\n        continue\n    elif wins == 0 and k:\n        print(2 * k - 1)\n        continue\n    score = 0\n    good = []\n    i = S.find('W')\n    extra = i\n    cnt = 0\n    while i < n:\n        if S[i] == 'L':\n            cnt += 1\n        else:\n            score += 1\n            if i > 0 and S[i - 1] == 'W':\n                score += 1\n            if cnt:\n                good.append(cnt)\n            cnt = 0\n        i += 1\n    extra += cnt\n    good.sort()\n    for j in good:\n        if k >= j:\n            score += 1 + 2 * j\n            k -= j\n        else:\n            score += 2 * k\n            k = 0\n    if k:\n        score += 2 * min(k, extra)\n    print(score)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(map(len, input().strip('L').split('W')))\n    m = len(l) - 1 + k\n    while l and l[0] <= k:\n        k -= l.pop(0)\n    if m >= n:\n        print(2 * n - 1)\n    else:\n        print((2 * m - len(l) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "import io\nimport os\nimport sys\nimport math\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (x, y) = list(map(int, input().split()))\n    arr = list(input().rstrip())\n    c = 0\n    w = 0\n    seg = []\n    score = 0\n    left = 0\n    for i in range(len(arr)):\n        if arr[i] == 'W':\n            if i > 0 and arr[i - 1] == 'W':\n                score += 2\n            else:\n                score += 1\n            if c != 0 and w != 0:\n                seg.append(c)\n            c = 0\n            w += 1\n        else:\n            c += 1\n            left += 1\n    seg.sort()\n    ans = 0\n    for el in seg:\n        if y >= el and left >= el:\n            score += el * 2 + 1\n            y -= el\n            left -= el\n    kg = min(y, left)\n    if arr.count('W') == 0:\n        print(max(0, kg * 2 - 1))\n    else:\n        print(max(0, score + 2 * kg))", "s = input\nfor _ in [0] * int(s()):\n    (n, k) = map(int, s().split())\n    a = sorted(map(len, s().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "import sys\nimport math as m\n\ndef fi():\n    return sys.stdin.readline()\nfor _ in range(int(fi())):\n    (n, k) = map(int, fi().split())\n    s = list(fi())\n    s.pop()\n    p = 0\n    q = 0\n    flag = 0\n    ans = 0\n    prev = 'L'\n    l = []\n    c = 0\n    for i in range(n):\n        if s[i] == 'W' and prev == 'L':\n            ans += 1\n            l.append(c)\n            c = 0\n        elif s[i] == 'W' and prev == 'W':\n            ans += 2\n        if s[i] == 'L':\n            c += 1\n        prev = s[i]\n    if s[n - 1] != 'W':\n        l.append(c)\n    p = l.pop(0)\n    if len(l) > 0 and s[n - 1] != 'W':\n        q = l.pop()\n    l.sort()\n    for i in range(len(l)):\n        if l[i] <= k:\n            ans += l[i] * 2 + 1\n            k -= l[i]\n        else:\n            ans += k * 2\n            k = 0\n            break\n    if p == n and k >= n:\n        ans = 2 * p - 1\n    elif p == n and k < n:\n        ans = max(k * 2 - 1, 0)\n    else:\n        ans += min(k, p + q) * 2\n    print(ans)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k) = mints()\n    i = 0\n    p = None\n    pos = []\n    a = list(minp())\n    for i in range(n):\n        if a[i] == 'W':\n            if p is not None:\n                pos.append((i - p - 1, p + 1))\n            else:\n                first = i\n            p = i\n    pos.sort()\n    for (l, f) in pos:\n        if k == 0:\n            break\n        for i in range(f, f + l):\n            if k > 0:\n                k -= 1\n                a[i] = 'W'\n            else:\n                break\n    if p is not None:\n        for i in range(p - 1, -1, -1):\n            if a[i] != 'W':\n                if k > 0:\n                    a[i] = 'W'\n                    k -= 1\n                else:\n                    break\n    for i in range(n):\n        if a[i] != 'W':\n            if k > 0:\n                a[i] = 'W'\n                k -= 1\n            else:\n                break\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if a[i] == 'W':\n            cnt = min(cnt + 1, 2)\n            ans += cnt\n        else:\n            cnt = 0\n    print(ans)\nfor i in range(mint()):\n    solve()", "t = input\nfor i in range(int(t())):\n    (n, k) = map(int, t().split())\n    a = sorted(map(len, t().strip('L').split('W')))\n    m = len(a) + k\n    while a and k >= a[0]:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "def chess(string, n):\n    temp = sorted(map(len, string.strip('L').split('W')))\n    m = len(temp) + n\n    while temp and temp[0] <= n:\n        n -= temp.pop(0)\n    return (2 * min(len(string), m - 1) - len(temp) or 1) - 1\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().strip().split())\n    print(chess(input(), b))", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "def cheat(n, k, origames):\n    kk = k\n    (Llis, Wlis) = (origames.split('W'), origames.split('L'))\n    Wlis = sorted(Wlis, key=lambda x: len(x))\n    if Wlis[-1] == '':\n        if 2 * k - 1 >= 0:\n            return 2 * k - 1\n        else:\n            return 0\n    if k >= origames.count('L'):\n        return 2 * len(origames) - 1\n    else:\n        Llis.pop(0)\n        Llis.pop(-1)\n        Llis = sorted(Llis, key=lambda x: len(x))\n        link = 0\n        for i in range(len(Llis)):\n            if Llis[i] != '':\n                if len(Llis[i]) <= k:\n                    k -= len(Llis[i])\n                    link += 1\n                else:\n                    break\n        score = 0\n        for j in range(len(Wlis)):\n            if len(Wlis[j]) >= 1:\n                score += 2 * len(Wlis[j]) - 1\n        score += 2 * kk + link\n        return score\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    origames = input()\n    print(cheat(n, k, origames))", "ins = input\nfor _ in [0] * int(ins()):\n    (n, k) = map(int, ins().split())\n    s = ins()\n    c = s.count('W')\n    n = min(n, c + k)\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))\n    while a and c + a[0] <= n:\n        c += a.pop(0)\n    print((2 * n - len(a) or 1) - 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    lnth = sorted(map(len, s.strip('L').split('W')), reverse=True)\n    m = len(lnth) + k - 1\n    while lnth and lnth[-1] <= k:\n        k -= lnth.pop()\n    print((2 * min(n, m) - len(lnth) or 1) - 1)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        (cnt, sm, ind) = (list(), s.count('W'), s.index('W'))\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n            else:\n                break\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        cnt = []\n        sm = 0\n        for i in range(n):\n            if s[i] == 'W':\n                sm += 1\n        ind = s.index('W')\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    c = s.count('W')\n    n = min(n, c + k)\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))\n    while a and c + a[0] <= n:\n        c += a.pop(0)\n    print((2 * n - len(a) or 1) - 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(map(len, input().strip('L').split('W')))\n    m = len(l) - 1 + k\n    while l and l[0] <= k:\n        k -= l.pop(0)\n    print((2 * min(n, m) - len(l) or 1) - 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(map(len, input().strip('L').split('W')))\n    m = len(l) - 1 + k\n    while l and l[0] <= k:\n        k -= l.pop(0)\n    print((2 * min(n, m) - len(l) or 1) - 1)", "def solve():\n    (n, k) = map(int, input().split())\n    l = sorted(map(len, input().strip('L').split('W')))\n    z = len(l) + k\n    while l and l[0] <= k:\n        k -= l.pop(0)\n    ans = 2 * min(n, z - 1) - len(l)\n    if ans <= 0:\n        ans = 1\n    print(ans - 1)\nt = int(input())\nfor _ in range(0, t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    lst = sorted(map(len, input().strip('L').split('W')))\n    m = len(lst) - 1 + k\n    while lst and lst[0] <= k:\n        k -= lst.pop(0)\n    print((2 * min(n, m) - len(lst) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "t = int(input())\nfor _ in range(0, t):\n    (n, k) = [int(x) for x in input().split()]\n    a = sorted(map(len, input().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "def chess(string, n):\n    temp = sorted(map(len, string.strip('L').split('W')))\n    m = len(temp) + n\n    while temp and temp[0] <= n:\n        n -= temp.pop(0)\n    return (2 * min(len(string), m - 1) - len(temp) or 1) - 1\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().strip().split())\n    print(chess(input(), b))", "def chess(string, n):\n    temp = sorted(map(len, string.strip('L').split('W')))\n    m = len(temp) + n\n    while temp and temp[0] <= n:\n        n -= temp.pop(0)\n    ans = 2 * min(len(string), m - 1) - len(temp)\n    if ans == 0:\n        return 0\n    return ans - 1\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().strip().split())\n    print(chess(input(), b))", "t = int(input())\nfor _ in range(t):\n    gaps = []\n    winseq = 0\n    (n, k) = map(int, input().split())\n    wins = k\n    s = input()\n    l = 1\n    flag1 = 0\n    for i in range(n):\n        if s[i] == 'W':\n            wins += 1\n            if i < len(s) - 1:\n                if s[i + 1] == 'L':\n                    winseq += 1\n            else:\n                winseq += 1\n        else:\n            if i == n - 1:\n                continue\n            if i == 0:\n                if s[1] == 'L':\n                    flag1 = 1\n                else:\n                    continue\n            elif s[i + 1] == 'L':\n                l += 1\n            elif flag1 == 0:\n                gaps.append(l)\n                l = 1\n            else:\n                flag1 = 0\n                l = 1\n    if wins >= n:\n        print(2 * n - 1)\n    else:\n        if winseq == 0 and k != 0:\n            winseq = 1\n        gaps.sort()\n        for length in gaps:\n            if length <= k:\n                k -= length\n                winseq -= 1\n            else:\n                break\n        print(2 * wins - winseq)", "t = int(input())\narr = [0]\nfor i in range(t):\n    (n, sm) = map(int, input().split())\n    count = 0\n    count1 = 0\n    count2 = -2\n    a = input()\n    arr.clear()\n    for j in range(n):\n        if a[j] == 'W':\n            count += 1\n            count1 += 1\n            if count2 + 1 == j:\n                count1 += 1\n            if count != 1 and count2 + 1 != j:\n                arr.append(j - count2 - 1)\n            count2 = j\n    sm = min(sm, n - count)\n    arr = sorted(arr)\n    if count == 0:\n        print(max(0, 2 * sm - 1))\n    else:\n        sz = len(arr)\n        for k in range(sz):\n            if sm >= arr[k]:\n                count1 += 2 * arr[k] + 1\n                sm -= arr[k]\n            else:\n                count1 += 2 * sm\n                sm = 0\n        print(count1 + 2 * sm)\n        arr.clear()", "def recal(l, n, k):\n    result = 0\n    cur = []\n    last_lose = 0\n    dex = 0\n    have_win = False\n    for i in l:\n        if i == 'W':\n            if last_lose == 0:\n                if have_win:\n                    result += 2\n                else:\n                    result += 1\n                    have_win = True\n            else:\n                result += 1\n                cur += [last_lose]\n                last_lose = 0\n        elif have_win:\n            last_lose += 1\n        else:\n            dex += 1\n    if last_lose:\n        dex += last_lose\n    cur.sort(reverse=True)\n    while cur and k >= cur[-1]:\n        result += cur[-1] * 2 + 1\n        k -= cur[-1]\n        cur.pop()\n    if cur:\n        dex += sum(cur)\n    if k != 0:\n        if have_win:\n            result += min(dex, k) * 2\n        else:\n            result += min(dex, k) * 2 - 1\n    print(result)\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    l = input()\n    recal(l, n, k)\n    t -= 1", "for inx in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    b = sc = 0\n    g = []\n    p = 'L'\n    for c in l:\n        if c == 'W':\n            sc = sc + 2 if p == 'W' else sc + 1\n            p = 'W'\n            if b:\n                g.append(b)\n            b = 0\n        else:\n            p = 'L'\n            b += 1\n    if b:\n        g.append(b)\n    cbg = cen = 0\n    if l[0] == 'L':\n        cbg = g.pop(0)\n    if l[-1] == 'L':\n        if sc:\n            cen = g.pop()\n    g.sort()\n    while k and g:\n        b = g.pop(0)\n        if k >= b:\n            k -= b\n            sc += 2 * b + 1\n        else:\n            sc += 2 * k\n            k = 0\n    if k:\n        sc = sc + 2 * min(k, cbg + cen) if sc else sc + 2 * min(k, cbg) - 1\n    print(sc)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "def main():\n    (n, k) = map(int, input().split())\n    line = input()\n    was = False\n    prev = False\n    res = 0\n    before = 0\n    spare_sizes = []\n    sz = 0\n    for i in line:\n        if not was:\n            if i == 'L':\n                before += 1\n            else:\n                was = True\n        if was:\n            if i == 'L':\n                sz += 1\n            elif sz > 0:\n                spare_sizes.append(sz)\n                sz = 0\n        if i == 'W':\n            if prev:\n                res += 2\n            else:\n                res += 1\n            prev = True\n        else:\n            prev = False\n    if was:\n        before += sz\n    if res == 0 and k > 0:\n        res -= 1\n    spare_sizes = sorted(spare_sizes)\n    for i in range(len(spare_sizes)):\n        if spare_sizes[i] > k:\n            res += 2 * k\n            k = 0\n            break\n        else:\n            res += 2 * spare_sizes[i]\n            k -= spare_sizes[i]\n            res += 1\n        if k == 0:\n            break\n    res += 2 * min(k, before)\n    print(res)\nt = int(input())\nfor i in range(t):\n    main()", "def print_arr(arr):\n    for (i, ch) in enumerate(arr):\n        if i == len(arr) - 1:\n            print(ch)\n        else:\n            print(ch, end=' ')\n    if not arr:\n        print()\n\ndef run(arr):\n    s = sum(arr)\n    if s == 0:\n        print('NO')\n    elif s < 0:\n        arr.sort()\n        print('YES')\n        print_arr(arr)\n    else:\n        arr.sort(reverse=True)\n        print('YES')\n        print_arr(arr)\n\ndef chess(s, k):\n    l_count = s.count('L')\n    if l_count <= k:\n        return len(s) * 2 - 1\n    interval_count = 1\n    intervals = []\n    start = 0\n    wins = s.count('W') + k\n    for i in range(len(s)):\n        if s[i] == 'W':\n            start = i\n            break\n    is_winning = True\n    curr_lose_size = 0\n    for i in range(start, len(s)):\n        if is_winning and s[i] == 'L':\n            is_winning = False\n            curr_lose_size += 1\n        elif not is_winning and s[i] == 'L':\n            curr_lose_size += 1\n        elif not is_winning and s[i] == 'W':\n            is_winning = True\n            interval_count += 1\n            intervals.append(curr_lose_size)\n            curr_lose_size = 0\n    intervals.sort()\n    for i in intervals:\n        k -= i\n        if k >= 0:\n            interval_count -= 1\n        else:\n            break\n    return wins * 2 - interval_count if wins > 0 else 0\nn = int(input())\nfor _ in range(n):\n    k = int(input().split()[1])\n    s = input()\n    s = list(s)\n    print(chess(s, k))", "naborov = int(input())\nks = []\nsets = []\nfor _ in range(naborov):\n    ks.append(int(input().split()[1]))\n    sets.append(input())\nimport collections as clc\n\ndef count(ss):\n    col = clc.Counter()\n    if s[0] == 'W':\n        res = 1\n        prev = 0\n        first = 0\n    else:\n        res = 0\n        prev = None\n    for i in range(1, len(ss)):\n        if ss[i] == 'W':\n            if ss[i - 1] == 'W':\n                res += 2\n            else:\n                res += 1\n            if prev == None:\n                first = i\n            elif prev < i - 1:\n                col[i - 1 - prev] += 1\n            prev = i\n    last = i - prev\n    return (res, col, first, last)\n\ndef treat(ss, k):\n    col = clc.Counter(ss)\n    if col['L'] <= k:\n        return len(ss) * 2 - 1\n    elif col['W'] == 0:\n        return max(0, 2 * k - 1)\n    (res, col, first, last) = count(s)\n    for d in sorted(col.keys()):\n        if d * col[d] <= k:\n            k -= d * col[d]\n            res += (d * 2 + 1) * col[d]\n        else:\n            (t, k) = divmod(k, d)\n            res += (d * 2 + 1) * t\n            break\n    res += k * 2\n    return res\nfor (s, k) in zip(sets, ks):\n    print(treat(s, k))", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    c = s.count('W')\n    n = min(n, c + k)\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))[::-1]\n    while a and c + a[-1] <= n:\n        c += a.pop()\n    print((2 * n - len(a) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    c = s.count('W')\n    n = min(n, c + k)\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))\n    while a and c + a[0] <= n:\n        c += a.pop(0)\n    print((2 * n - len(a) or 1) - 1)", "def solve(n, k, s):\n    gaps = []\n    first_w_index = -1\n    last_w_index = -1\n    score = 0\n    win_streak = 0\n    for i in range(n):\n        if s[i] == 'W':\n            win_streak += 1\n            if first_w_index == -1:\n                first_w_index = i\n            elif i - last_w_index - 1 > 0:\n                gaps.append(i - last_w_index - 1)\n            last_w_index = i\n        elif win_streak > 0:\n            score += 2 * win_streak - 1\n            win_streak = 0\n    if win_streak > 0:\n        score += 2 * win_streak - 1\n    gaps.sort()\n    rem = []\n    for g in gaps:\n        if g <= k:\n            score += 2 * g + 1\n            k -= g\n        else:\n            rem.append(g)\n    if k > 0:\n        if len(rem) > 0:\n            score += 2 * k\n        elif first_w_index == -1:\n            score += 2 * k - 1\n        else:\n            score += 2 * min(k, first_w_index + n - last_w_index - 1)\n    return score\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        (cnt, sm, ind) = (list(), s.count('W'), s.index('W'))\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "def solve(n, k, s):\n    gaps = []\n    first_w_index = -1\n    last_w_index = -1\n    score = 0\n    win_streak = 0\n    for i in range(n):\n        if s[i] == 'W':\n            win_streak += 1\n            if first_w_index == -1:\n                first_w_index = i\n            elif i - last_w_index - 1 > 0:\n                gaps.append(i - last_w_index - 1)\n            last_w_index = i\n        elif win_streak > 0:\n            score += 2 * win_streak - 1\n            win_streak = 0\n    if win_streak > 0:\n        score += 2 * win_streak - 1\n    gaps.sort()\n    for (i, g) in enumerate(gaps):\n        if g <= k:\n            score += 2 * g + 1\n            k -= g\n        elif k > 0:\n            score += 2 * k\n            k = 0\n            break\n    if k > 0:\n        if first_w_index == -1:\n            score += 2 * k - 1\n        else:\n            score += 2 * min(k, first_w_index + n - last_w_index - 1)\n    return score\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))\n    r = 0\n    while a and r + a[0] <= k:\n        r += a.pop(0)\n    print((2 * min(n, s.count('W') + k) - len(a) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    a = sorted(map(len, filter(None, s.strip('L').split('W'))))\n    r = k\n    while a and a[0] <= r:\n        r -= a.pop(0)\n    print((2 * min(n, s.count('W') + k) - len(a) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    s = I()\n    a = sorted(map(len, s.strip('L').split('W')))\n    r = k\n    while a and a[0] <= r:\n        r -= a.pop(0)\n    print((2 * min(n, s.count('W') + k) - len(a) or 1) - 1)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = sorted(map(len, s.strip('L').split('W')))\n    a = len(l) + k\n    while l and l[0] <= k:\n        k -= l.pop(0)\n    print((2 * min(n, a - 1) - len(l) or 1) - 1)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    winning_steaks_cnt = wins = losses = 0\n    losing_steaks = []\n    for i in range(N):\n        if S[i] == 'W':\n            wins += 1\n            if i == 0 or S[i - 1] == 'L':\n                winning_steaks_cnt += 1\n        if S[i] == 'L':\n            losses += 1\n            if i == 0 or S[i - 1] == 'W':\n                losing_steaks.append(0)\n            losing_steaks[-1] = losing_steaks[-1] + 1\n    if K >= losses:\n        print(2 * N - 1)\n        continue\n    if wins == 0:\n        if K == 0:\n            print(0)\n        else:\n            print(2 * K - 1)\n        continue\n    if S[0] == 'L':\n        losing_steaks[0] = 100000000.0\n    if S[-1] == 'L':\n        losing_steaks[-1] = 100000000.0\n    losing_steaks.sort()\n    wins += K\n    for ls in losing_steaks:\n        if ls > K:\n            break\n        K -= ls\n        winning_steaks_cnt -= 1\n    print(2 * wins - winning_steaks_cnt)", "import heapq\nimport collections\nfrom math import log2\nimport itertools\nfrom functools import lru_cache\nfrom sys import setrecursionlimit as srl\nsrl(2 * 10 ** 6)\nN = 200001\n\ndef amin(a, b):\n    if b < a:\n        a = b\n    return a\n\ndef solve(n, k, a):\n    w = 0\n    W = 0\n    ans = 0\n    v = []\n    cur = 0\n    for i in range(n):\n        if a[i] == 'W':\n            if cur:\n                v.append(cur)\n                cur = 0\n            w += 1\n            ans += 1\n            if W:\n                ans += 1\n            W = 1\n        else:\n            W = 0\n            if w:\n                cur += 1\n    if not w:\n        return max(2 * k - 1, 0)\n    if k > n - w:\n        k = n - w\n    ans += 2 * k\n    v.sort()\n    for x in v:\n        if x <= k:\n            ans += 1\n            k -= x\n    return ans\nt = int(input())\nfor i in range(1, t + 1):\n    (n, k) = map(int, input().split())\n    a = input()\n    print(solve(n, k, a))", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef maxpts(str1, k):\n    w = 0\n    losses = []\n    ans = 0\n    W = False\n    cur = 0\n    for c in str1:\n        if c == 'W':\n            if cur:\n                losses.append(cur)\n                cur = 0\n            w += 1\n            ans += 1\n            if W:\n                ans += 1\n            W = True\n        else:\n            W = False\n            if w:\n                cur += 1\n    if w == 0:\n        print(max(2 * k - 1, 0))\n        return\n    n = len(str1)\n    if k >= n - w:\n        print(n * 2 - 1)\n        return\n    ans += 2 * k\n    losses.sort()\n    for l1 in losses:\n        if k >= l1:\n            ans += 1\n            k = k - l1\n        else:\n            break\n    print(ans)\nn = int(input())\nfor i in range(n):\n    (n1, k) = map(int, input().rstrip().split())\n    str1 = input()\n    maxpts(str1, k)", "t = input\nfor i in range(int(t())):\n    (n, k) = map(int, t().split())\n    a = sorted(map(len, t().strip('L').split('W')))\n    m = len(a) + k\n    while a and k >= a[0]:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = [len(i) for i in list(map(str, s.split('W'))) if len(i) > 0]\n    d = [len(i) for i in list(map(str, s.split('L'))) if len(i) > 0]\n    t = sum(c)\n    if t <= k:\n        print(2 * n - 1)\n    elif not d:\n        print(max(2 * k - 1, 0))\n    else:\n        g = h = 0\n        if s[0] == 'L':\n            g = c[0]\n            c.pop(0)\n        if s[-1] == 'L':\n            h = c[-1]\n            c.pop()\n        if t - g - h <= k:\n            print(2 * (n - t + k) - 1)\n        else:\n            c.sort()\n            ans = sum(d) * 2 - len(d)\n            while k > 0:\n                p = c[0]\n                if k - p < 0:\n                    break\n                else:\n                    ans += 2 * p + 1\n                c.pop(0)\n                k -= p\n            if k > 0:\n                ans += 2 * k\n            print(ans)", "t = int(input())\nfor inx in range(t):\n    (n, k) = map(int, input().split())\n    l = input()\n    b = sc = 0\n    g = []\n    p = 'L'\n    for c in l:\n        if c == 'W':\n            if p == 'W':\n                sc += 2\n            else:\n                sc += 1\n            p = 'W'\n            if b:\n                g.append(b)\n            b = 0\n        else:\n            p = 'L'\n            b += 1\n    if b:\n        g.append(b)\n    cbg = cen = 0\n    if l[0] == 'L':\n        cbg = g.pop(0)\n    if l[-1] == 'L':\n        if sc:\n            cen = g.pop()\n    g.sort()\n    while k and g:\n        b = g.pop(0)\n        if k >= b:\n            k -= b\n            sc += 2 * b + 1\n        else:\n            sc += 2 * k\n            k = 0\n    if k:\n        if sc:\n            sc += 2 * min(k, cbg + cen)\n        else:\n            sc += 2 * min(k, cbg) - 1\n    print(sc)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    res = 0\n    gaps = []\n    gap0 = 0\n    gap = 0\n    prev = False\n    f = True\n    for x in s:\n        if f:\n            if x == 'L':\n                gap0 += 1\n            else:\n                f = False\n                res = 1\n                prev = True\n        elif x == 'L':\n            gap += 1\n            prev = False\n        else:\n            res += 1\n            if prev:\n                res += 1\n            else:\n                gaps.append(gap)\n                gap = 0\n            prev = True\n    if prev:\n        gapN = 0\n    else:\n        gapN = gap\n    gaps.sort()\n    nn = len(gaps)\n    i = 0\n    while i < nn and k >= gaps[i]:\n        res += 2 * gaps[i] + 1\n        k -= gaps[i]\n        i += 1\n    if i < nn or k <= gap0 + gap:\n        res += 2 * k\n    else:\n        res += (gap0 + gap) * 2\n    if gap0 == n and k > 0:\n        res -= 1\n    print(res)", "I = input\nfor _ in [0] * int(I()):\n    (n, k) = map(int, I().split())\n    a = sorted(map(len, I().strip('L').split('W')))\n    m = len(a) + k\n    while a and a[0] <= k:\n        k -= a.pop(0)\n    print((2 * min(n, m - 1) - len(a) or 1) - 1)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    l = []\n    el = 0\n    while i < n and s[i] == 'L':\n        i += 1\n        el += 1\n    j = n - 1\n    while j > i and s[j] == 'L':\n        j -= 1\n        el += 1\n    if i > j:\n        print(max(0, 2 * k - 1))\n        continue\n    ans = 0\n    while i <= j:\n        c = 0\n        while i <= j and s[i] == 'W':\n            i += 1\n            c += 1\n        ans += 2 * c - 1\n        c = 0\n        while i <= j and s[i] == 'L':\n            i += 1\n            c += 1\n        if c != 0:\n            l.append(c)\n    l.sort()\n    (i, le) = (0, len(l))\n    while i < le and k > 0:\n        if k >= l[i]:\n            ans += 2 * l[i] + 1\n        else:\n            ans += 2 * k\n        k -= l[i]\n        i += 1\n    print(ans + 2 * max(0, min(k, el)))", "t = int(input())\n\ndef answer(n, k, s):\n    win = []\n    for i in range(n):\n        if s[i] == 'W':\n            win.append(i)\n    l = len(win)\n    if l <= 1:\n        print(min(max(2 * (k + l) - 1, 0), 2 * n - 1))\n    elif win[-1] - l + 1 <= k:\n        ans = min(2 * (k + l) - 1, 2 * n - 1)\n        print(ans)\n    else:\n        ans = 1\n        for i in range(l - 1):\n            if win[i + 1] - win[i] == 1:\n                ans += 2\n            else:\n                ans += 1\n        delta = [win[i + 1] - win[i] - 1 for i in range(l - 1)]\n        delta.sort()\n        flag = k\n        j = 0\n        while flag > 0 and j < l - 1:\n            d = delta[j]\n            if d != 0:\n                if flag >= d:\n                    flag -= d\n                    ans += 2 * d + 1\n                else:\n                    ans += 2 * flag\n                    flag = -1\n            j += 1\n        if flag > 0:\n            ans += 2 * flag\n        print(ans)\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = list(str(input()))\n    answer(n, k, s)", "t = int(input())\nfor x in range(t):\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    s = input()\n    count_ = s.count('W')\n    calculate = 0\n    prev = 0\n    li = []\n    pre = -1\n    for x in range(n):\n        if s[x] == 'W':\n            if pre == -1:\n                pre = x\n                calculate = 1\n            else:\n                li.append(x - pre - 1)\n                if x - pre == 1:\n                    calculate += 2\n                else:\n                    calculate += 1\n                pre = x\n    li.sort()\n    for x in li:\n        if x != 0:\n            if k >= x:\n                calculate += 2 * x + 1\n                k = k - x\n                count_ += x\n            elif k < x:\n                calculate += 2 * k\n                count_ += k\n                k = 0\n                break\n    if calculate == 0 and k > 0:\n        calculate = -1\n    if k != 0:\n        if n - count_ >= k:\n            calculate += 2 * k\n            count_ += k\n        elif n - count_ < k:\n            calculate += 2 * (n - count_)\n            count_ += n - count_\n    print(calculate)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        cnt = []\n        sm = 0\n        for i in range(n):\n            if s[i] == 'W':\n                sm += 1\n        ind = s.index('W')\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        cnt = []\n        sm = s.count('W')\n        ind = s.index('W')\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(n, k) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(2 * n - 1)\n    else:\n        (cnt, sm, ind) = (list(), s.count('W'), s.index('W'))\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if 'W' not in s:\n        print(max(min(k, n) * 2 - 1, 0))\n    elif k >= s.count('L'):\n        print(n * 2 - 1)\n    else:\n        cnt = []\n        sm = s.count('W')\n        ind = s.index('W')\n        for i in range(ind + 1, n):\n            if s[i] == 'W':\n                cnt.append(i - ind - 1)\n                ind = i\n        cnt.sort()\n        for i in cnt:\n            if k >= i:\n                sm += 2 * i + 1\n                k -= i\n        if k > 0:\n            sm += 2 * k\n        print(sm)", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef maxpts(str1, k):\n    w = 0\n    losses = []\n    ans = 0\n    W = False\n    cur = 0\n    for c in str1:\n        if c == 'W':\n            if cur:\n                losses.append(cur)\n                cur = 0\n            w += 1\n            ans += 1\n            if W:\n                ans += 1\n            W = True\n        else:\n            W = False\n            if w:\n                cur += 1\n    if w == 0:\n        print(max(2 * k - 1, 0))\n        return\n    n = len(str1)\n    if k >= n - w:\n        print(n * 2 - 1)\n        return\n    ans += 2 * k\n    losses.sort()\n    for l1 in losses:\n        if k >= l1:\n            ans += 1\n            k = k - l1\n        else:\n            break\n    print(ans)\nn = int(input())\nfor i in range(n):\n    (n1, k) = map(int, input().rstrip().split())\n    str1 = input()\n    maxpts(str1, k)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = input()\n    if k >= h.count('L'):\n        print(2 * n - 1)\n    elif n == 0:\n        print(0)\n    elif 'W' not in h:\n        print(max(2 * k - 1, 0))\n    else:\n        h = h.strip('L')\n        n = len(h)\n        score = 0\n        prev = 'L'\n        i = 0\n        l = []\n        while i < n:\n            if h[i] == 'W':\n                if prev == 'L':\n                    prev = 'W'\n                    score += 1\n                else:\n                    score += 2\n            elif prev == 'W':\n                l.append(1)\n                prev = 'L'\n            else:\n                l[-1] += 1\n            i += 1\n        l.sort()\n        while l and k >= l[0]:\n            temp = l.pop(0)\n            score += 2 * temp + 1\n            k -= temp\n        score += 2 * k\n        print(score)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = input()\n    count = 0\n    last = -1\n    ans = []\n    for i in range(len(lst)):\n        if lst[i] == 'L':\n            continue\n        count += 1\n        if last != -1 and last != i - 1:\n            ans += [i - last - 1]\n        last = i\n    ans.sort()\n    mx = len(ans) + 1\n    for i in range(len(ans)):\n        if k >= ans[i]:\n            count += ans[i]\n            k -= ans[i]\n            mx -= 1\n    print(max(0, min(2 * n - 1, (count + k) * 2 - mx)))", "def calculate(game):\n    if not game:\n        return 0\n    su = 1 if game[0] == 'W' else 0\n    prev = game[0]\n    for g in game[1:]:\n        if g == 'W':\n            su += 2 if prev == 'W' else 1\n            prev = 'W'\n        else:\n            prev = 'L'\n    return su\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    games = input()\n    gaps = list(map(len, games.split('W')))\n    front_end = []\n    bonus = 0\n    if len(gaps):\n        front_end.append(gaps.pop(0))\n    if len(gaps):\n        front_end.append(gaps.pop())\n    else:\n        bonus = -1 if k else 0\n    front_end = [f for f in front_end if f]\n    front_end.sort()\n    gaps = [g for g in gaps if g]\n    gaps.sort()\n    while k:\n        midgap = 0\n        if gaps:\n            top = gaps.pop(0)\n            midgap = 1\n        elif front_end:\n            top = front_end.pop(0)\n        else:\n            break\n        if top > k:\n            bonus += k * 2\n            k = 0\n        else:\n            bonus += top * 2 + midgap\n            k -= top\n    print(calculate(games) + bonus)", "for _ in range(int(input())):\n    (n, k) = [*map(int, input().split())]\n    s = input()\n    c = s.count('W')\n    z = [0] * (c + 1)\n    x = 0\n    kk = k\n    ans = 0\n    if c == 0 and k > 0:\n        ans -= 1\n    for i in range(n):\n        if i == 0:\n            if s[i] == 'W':\n                ans += 1\n        if i != 0:\n            if s[i] == 'W':\n                if s[i - 1] == 'W':\n                    ans += 2\n                else:\n                    ans += 1\n        if s[i] == 'W':\n            x += 1\n        if s[i] == 'L':\n            z[x] += 1\n    a = z[0] + z[-1]\n    z = z[1:c]\n    z.sort()\n    for i in z:\n        if i == 0:\n            continue\n        elif k - i >= 0:\n            ans += 1\n            k -= i\n        else:\n            k = 0\n            break\n    if k > 0:\n        if k >= a:\n            k -= a\n            ans += (kk - k) * 2\n        else:\n            ans += kk * 2\n    else:\n        ans += kk * 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    S = input()\n    consL0 = []\n    consL1 = []\n    consL2 = []\n    startW = S[0] == 'W'\n    c = 1 if S[0] == 'L' else 0\n    ans = 1 if S[0] == 'W' else 0\n    for i in range(1, n):\n        if S[i] == 'L':\n            c += 1\n        else:\n            if c > 0:\n                if startW:\n                    consL0.append(c)\n                else:\n                    consL1.append(c)\n                c = 0\n            startW = True\n            ans += 1 if S[i - 1] == 'L' else 2\n    if c > 0:\n        if startW:\n            consL1.append(c)\n        else:\n            consL2.append(c)\n    if k > 0:\n        consL0.sort()\n        while len(consL0) > 0 and k > 0:\n            l = consL0.pop(0)\n            if k >= l:\n                ans += 2 * l + 1\n                k -= l\n            else:\n                ans += 2 * k\n                k = 0\n                break\n    if k > 0:\n        consL1.sort()\n        while len(consL1) > 0 and k > 0:\n            l = consL1.pop(0)\n            ans += 2 * min(k, l)\n            k -= min(k, l)\n    if k > 0 and len(consL2) > 0:\n        l = consL2[0]\n        ans += 2 * min(k, l) - 1\n    print(ans)", "def calculate(game):\n    if not game:\n        return 0\n    su = 1 if game[0] == 'W' else 0\n    prev = game[0]\n    for g in game[1:]:\n        if g == 'W':\n            su += 2 if prev == 'W' else 1\n            prev = 'W'\n        else:\n            prev = 'L'\n    return su\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    games = input()\n    gaps = list(map(len, games.split('W')))\n    front_end = []\n    bonus = 0\n    if len(gaps):\n        front_end.append(gaps.pop(0))\n    if len(gaps):\n        front_end.append(gaps.pop())\n    else:\n        bonus = -1 if k else 0\n    front_end = [f for f in front_end if f]\n    front_end.sort()\n    gaps = [g for g in gaps if g]\n    gaps.sort()\n    while k:\n        if not gaps:\n            if not front_end:\n                break\n            top = front_end.pop(0)\n            if top > k:\n                bonus += k * 2\n                k = 0\n            else:\n                bonus += top * 2\n                k -= top\n        else:\n            top = gaps.pop(0)\n            if top > k:\n                bonus += k * 2\n                k = 0\n            else:\n                bonus += top * 2 + 1\n                k -= top\n    print(calculate(games) + bonus)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    if 'W' not in s:\n        print(max(min(n, k) * 2 - 1, 0))\n        continue\n    l = s.split('W')[1:-1]\n    l = list(filter(None, l))\n    l = [len(block) for block in l]\n    l.sort()\n    ncut = len(l) + 1\n    x = s.count('W')\n    for i in range(len(l)):\n        if k >= l[i]:\n            x += l[i]\n            k -= l[i]\n            ncut -= 1\n    print(max(0, min(2 * n - 1, (x + k) * 2 - ncut)))", "for inx in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    b = sc = 0\n    g = []\n    p = 'L'\n    for c in l:\n        if c == 'W':\n            sc = sc + 2 if p == 'W' else sc + 1\n            p = 'W'\n            if b:\n                g.append(b)\n            b = 0\n        else:\n            p = 'L'\n            b += 1\n    if b:\n        g.append(b)\n    cbg = cen = 0\n    if l[0] == 'L':\n        cbg = g.pop(0)\n    if l[-1] == 'L':\n        if sc:\n            cen = g.pop()\n    g.sort()\n    while k and g:\n        b = g.pop(0)\n        if k >= b:\n            k -= b\n            sc += 2 * b + 1\n        else:\n            sc += 2 * k\n            k = 0\n    if k:\n        sc = sc + 2 * min(k, cbg + cen) if sc else sc + 2 * min(k, cbg) - 1\n    print(sc)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (ans, t, b, f) = (0, 0, 0, 0)\n    l = []\n    for i in range(n):\n        if s[i] == 'W':\n            ans += f + 1\n            f = 1\n            if b:\n                l.append(b)\n            b = 0\n        else:\n            f = 0\n            b += 1\n    if b:\n        l.append(b)\n    (m, v) = (0, 0)\n    if s[0] == 'L':\n        m = l.pop(0)\n    if s[-1] == 'L':\n        if ans:\n            v = l.pop()\n    l.sort()\n    while k and l:\n        t = l.pop(0)\n        if k >= t:\n            ans += t * 2 + 1\n            k -= t\n        else:\n            ans += 2 * k\n            k = 0\n    if k:\n        ans = ans + 2 * min(k, m + v) if ans else ans + 2 * min(k, m) - 1\n    print(ans)", "t = int(input())\ntag = []\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (cur, ans) = (k + 5, 0)\n    tag.clear()\n    for j in range(n):\n        if s[j] == 'L':\n            cur += 1\n        else:\n            ans += 1 if cur > 0 else 2\n            if cur > 0:\n                tag.append(cur)\n            cur = 0\n    if cur == k + n + 5:\n        print(max(0, 2 * min(k, n) - 1))\n        continue\n    tag.sort()\n    for j in range(len(tag)):\n        if k >= tag[j]:\n            ans = ans + 2 * tag[j]\n            ans += 1\n            k -= tag[j]\n    ans += 2 * k\n    ans = min(ans, 2 * n - 1)\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = [x for x in input()]\n    l = []\n    cnt = 0\n    check = -1\n    for i in range(N):\n        if S[i] == 'L':\n            cnt += 1\n            if check == -1:\n                check = i\n        elif cnt >= 1:\n            if check != 0:\n                l.append([cnt, check])\n            cnt = 0\n            check = -1\n    l.sort()\n    for (a, s) in l:\n        for x in range(s, s + a):\n            if K == 0:\n                break\n            S[x] = 'W'\n            K -= 1\n    if K >= 1:\n        if 'W' not in S:\n            for i in range(K):\n                S[i] = 'W'\n        else:\n            for i in range(S.index('W') - 1, -1, -1):\n                S[i] = 'W'\n                K -= 1\n                if K == 0:\n                    break\n            if K >= 1:\n                for p in range(N - 1, -1, -1):\n                    if S[p] == 'W':\n                        for i in range(p + 1, N):\n                            S[i] = 'W'\n                            K -= 1\n                            if K == 0:\n                                break\n                        break\n    ans = 0\n    for i in range(N):\n        if S[i] == 'W':\n            if i == 0 or S[i - 1] == 'L':\n                ans += 1\n            else:\n                ans += 2\n    print(ans)", "for t in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    wd = input()\n    sc = 0\n    if wd[0] == 'W':\n        sc += 1\n    ls = []\n    l_cnt = 0\n    for i in range(1, n):\n        if wd[i] == 'W':\n            if wd[i - 1] == 'W':\n                sc += 2\n            else:\n                sc += 1\n    for i in range(n):\n        if wd[i] == 'W':\n            if len(ls) == 0 or ls[-1] != 0:\n                ls.append(0)\n        else:\n            l_cnt += 1\n            if ls:\n                ls[-1] += 1\n    if l_cnt <= k:\n        print(2 * n - 1)\n        continue\n    if ls:\n        ls.pop()\n    else:\n        print(max(0, 2 * k - 1))\n        continue\n    sm = 0\n    ls.sort()\n    ext = 0\n    for ll in ls:\n        if sm + ll <= k:\n            sm += ll\n            ext += 1\n        else:\n            break\n    assert sc + 2 * k + ext <= 2 * n - 1\n    print(sc + 2 * k + ext)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    b = [0] * n\n    s = 0\n    c = 0\n    w = a.count('W')\n    if k >= n - w:\n        print(2 * n - 1)\n    elif w == 0:\n        print(max(0, 2 * k - 1))\n    else:\n        f = a.find('W')\n        for i in range(f, n):\n            if a[i] == 'W':\n                s += 1\n                if i > 0 and a[i - 1] == 'W':\n                    s += 1\n                b[c] += 1\n                c = 0\n            else:\n                c += 1\n        for j in range(1, n):\n            if k >= j * b[j]:\n                s += b[j] * (2 * j + 1)\n                k -= j * b[j]\n            else:\n                m = k // j\n                r = k % j\n                s += m * (2 * j + 1) + 2 * r\n                k = 0\n                break\n        s += 2 * k\n        print(s)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    scoreinitial = 0\n    if s[0] == 'W':\n        scoreinitial += 1\n    for i in range(1, len(s)):\n        if s[i] == 'W' and s[i - 1] == 'W':\n            scoreinitial += 2\n        elif s[i] == 'W':\n            scoreinitial += 1\n    paq = []\n    cuts = s.split('W')\n    extr = [len(x) for x in cuts]\n    nbL = sum(extr)\n    stock = min(m, nbL)\n    if stock == 0:\n        print(scoreinitial)\n    elif nbL < n:\n        paq = sorted(extr[1:-1])\n        rep = 0\n        for i in paq:\n            if i <= stock and i > 0:\n                rep += i * 2 + 1\n                stock -= i\n        rep += 2 * stock\n        print(rep + scoreinitial)\n    else:\n        print(stock * 2 - 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    w = s.count('W')\n    if s.count('L') <= k:\n        ans = 2 * n - 1\n        print(ans)\n    elif k == 0 and w == 0:\n        print(0)\n    else:\n        i = 0\n        c1 = s.find('W')\n        c2 = s.rfind('W')\n        if c1 == -1:\n            ans = 2 * k - 1\n        else:\n            l = []\n            s = s[c1 + 1:c2]\n            i = 0\n            c = 0\n            while i < len(s):\n                if s[i] == 'L':\n                    c = 1\n                    j = i + 1\n                    while j < len(s) and s[j] == 'L':\n                        c += 1\n                        j += 1\n                    l.append(c)\n                    i = j\n                else:\n                    i += 1\n            l.sort()\n            i = 0\n            streak = len(l) + 1\n            k0 = k\n            while i < len(l) and k > 0:\n                if l[i] <= k:\n                    k -= l[i]\n                    streak -= 1\n                i += 1\n            if streak == 0:\n                ans = 2 * (w + k0) - 1\n            else:\n                ans = 2 * (w + k0) - streak\n        print(ans)", "nums = int(input().strip())\nfor _ in range(nums):\n    (n, k) = map(int, input().strip().split())\n    s = input().strip()\n    (lw, rw) = (s.find('W'), s.rfind('W'))\n    res = cur_num = 0\n    if lw == rw:\n        if lw == -1:\n            res = 2 * k - 1\n        else:\n            res = 2 * k + 1\n        res = min(2 * len(s) - 1, res)\n    else:\n        part = []\n        for i in range(lw, rw + 1):\n            if s[i] == 'W':\n                if i > lw and s[i - 1] == 'L':\n                    part.append(cur_num)\n                    cur_num = 0\n                if i > lw and s[i - 1] == 'W':\n                    res += 2\n                else:\n                    res += 1\n            else:\n                cur_num += 1\n        if k >= sum(part) + lw + len(s) - rw - 1:\n            res = 2 * len(s) - 1\n        else:\n            part.sort()\n            for i in range(len(part)):\n                if k >= part[i]:\n                    res += 2 * part[i] + 1\n                    k -= part[i]\n                else:\n                    break\n            res += 2 * k\n    print(max(res, 0))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (N, k) = map(int, sys.stdin.readline().split())\n    arr = list(map(str, input().strip()))\n    dic = []\n    temp = k\n    lose = 0\n    streak = 0\n    if 'W' not in arr:\n        print(max(0, 2 * k - 1))\n    elif 'L' not in arr:\n        print(2 * N - 1)\n    else:\n        for i in range(N):\n            if arr[i] == 'L':\n                lose += 1\n                if arr[i - 1] == 'W' or i == 0:\n                    dic.append(1)\n                else:\n                    dic[len(dic) - 1] += 1\n            else:\n                if i > 0:\n                    if arr[i - 1] == 'W':\n                        continue\n                streak += 1\n        (first, last) = (0, 0)\n        if arr[0] == 'L':\n            first = dic[0]\n        if arr[N - 1] == 'L':\n            last = dic[len(dic) - 1]\n        dic.sort()\n        for item in dic:\n            if k - item >= 0:\n                if item == first:\n                    first = 0\n                    continue\n                elif item == last:\n                    last = 0\n                    continue\n                k -= item\n                streak -= 1\n            else:\n                break\n        wins = min(N, N - lose + temp)\n        print(max(2 * wins - streak, 0))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    prev = -1\n    for i in range(n):\n        if s[i] == 'W':\n            if prev != -1 and i != prev + 1:\n                a.append((prev, i - 1))\n            prev = i\n    a.sort(key=lambda x: x[1] - x[0])\n    ans = 0 if s[0] == 'L' else 1\n    for i in range(1, n):\n        if s[i] == 'W':\n            if s[i - 1] == 'W':\n                ans += 2\n            else:\n                ans += 1\n    for i in range(len(a)):\n        ln = a[i][1] - a[i][0]\n        if k >= ln:\n            ans += ln * 2 + 1\n            k -= ln\n        else:\n            ans += k * 2\n            k = 0\n    lf = s.find('W')\n    if lf == -1:\n        ans = k * 2 - 1\n    else:\n        ans += min(k, lf) * 2\n        k -= min(k, lf)\n        rf = s.rfind('W')\n        ans += min(k, n - rf - 1) * 2\n    print(max(0, ans))", "for bleh in range(int(input())):\n    a = list(map(int, input().strip().split(' ')))[1]\n    b = input()\n    w = b.count('W')\n    if w == 0:\n        if a > 0:\n            print(2 * a - 1)\n        else:\n            print(0)\n    else:\n        w = 0\n        wt = False\n        lcout = 0\n        if b[0] == 'L':\n            lcout = -1\n        c = []\n        d = []\n        for i in b:\n            if i == 'W':\n                if wt:\n                    w += 2\n                else:\n                    if lcout > 0:\n                        if lcout % 2 == 1:\n                            d.append(lcout)\n                        else:\n                            c.append(lcout)\n                        lcout = 0\n                    wt = True\n                    w += 1\n            else:\n                if wt:\n                    wt = False\n                lcout += 2\n        if lcout > 0:\n            d.append(lcout - 1)\n        c.sort()\n        d.sort()\n        for j in c:\n            if j // 2 > a:\n                w += 2 * a\n                a = 0\n                break\n            else:\n                w += j + 1\n                a -= j // 2\n        for j in d:\n            if j // 2 + j % 2 > a:\n                w += 2 * a\n                break\n            else:\n                w += j + 1\n                a -= j // 2 + j % 2\n        print(w)", "import heapq\n\ndef solve(st, n, k):\n    prev = 'L'\n    (c, bug) = (0, k)\n    li = []\n    score = 0\n    count_l = st.count('L')\n    if count_l == n:\n        return max(2 * min(k, n) - 1, 0)\n    for it in st:\n        if it == prev:\n            if it == 'W':\n                score += 2\n            c += 1\n        else:\n            if it == 'W':\n                score += 1\n            li.append(c)\n            c = 1\n        prev = it\n    if c:\n        li.append(c)\n    hl = []\n    heapq.heapify(hl)\n    ln = len(li)\n    i = 2\n    while i + 1 < ln:\n        it = li[i]\n        heapq.heappush(hl, it)\n        i += 2\n    while hl:\n        tp = heapq.heappop(hl)\n        if tp <= bug:\n            bug -= tp\n            count_l -= tp\n            score += 2 * tp + 1\n    cngo = min(bug, count_l)\n    score += 2 * cngo\n    return score\nfor case in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    ans = solve(st, n, k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = list(s)\n    cw = 0\n    w = []\n    idx = -1\n    cl = 0\n    fw = -1\n    lw = -1\n    ans = 0\n    for i in range(n):\n        if s[i] == 'W':\n            if i > 0 and s[i - 1] == 'W':\n                ans += 2\n            else:\n                ans += 1\n            if fw == -1:\n                fw = i\n            lw = i\n            cw += 1\n            if idx != -1:\n                if i - idx - 1:\n                    w.append(i - idx - 1)\n            idx = i\n        else:\n            cl += 1\n    w.sort()\n    for i in w:\n        if k == 0:\n            break\n        if i <= k:\n            k -= i\n            ans += 2 * (i - 1) + 3\n        else:\n            ans += 2 * k\n            k -= k\n    if k > 0:\n        if k >= cl:\n            ans = 1 + (n - 1) * 2\n        elif cw == 0:\n            if k >= n:\n                ans = 1 + (n - 1) * 2\n                k = 0\n            else:\n                ans = 1 + (k - 1) * 2\n                k = 0\n        else:\n            for i in range(lw + 1, n):\n                if k == 0:\n                    break\n                ans += 2\n                k -= 1\n            if k > 0:\n                for i in range(fw - 1, -1, -1):\n                    if k == 0:\n                        break\n                    ans += 2\n                    k -= 1\n    print(ans)", "nums = int(input().strip())\nfor _ in range(nums):\n    (n, k) = map(int, input().strip().split())\n    s = input().strip()\n    cur_score = 0\n    l_part = []\n    cur_num = 0\n    l_count = w_count = 0\n    for (i, v) in enumerate(s):\n        if v == 'W':\n            w_count += 1\n            if i > 0 and s[i - 1] == 'W':\n                cur_score += 2\n                continue\n            elif i > 0 and s[i - 1] == 'L':\n                l_part.append(cur_num)\n                cur_num = 0\n            cur_score += 1\n        else:\n            cur_num += 1\n            l_count += 1\n    if cur_num:\n        l_part.append(cur_num)\n    if k >= l_count:\n        print(2 * len(s) - 1)\n    elif l_part:\n        (start, end) = (0, len(l_part))\n        if s[0] == 'L':\n            start += 1\n        if s[-1] == 'L':\n            end -= 1\n        arr = sorted(l_part[start:end])\n        for i in range(len(arr)):\n            if k >= arr[i]:\n                cur_score += 2 * arr[i] + 1\n                k -= arr[i]\n            else:\n                break\n        res = cur_score + k * 2\n        if w_count == 0:\n            res -= 1\n        print(max(res, 0))\n    else:\n        print(cur_score)", "nums = int(input().strip())\nfor _ in range(nums):\n    (n, k) = map(int, input().strip().split())\n    s = input().strip()\n    (lw, rw) = (s.find('W'), s.rfind('W'))\n    res = cur_num = 0\n    if lw == rw:\n        if lw == -1:\n            res = 2 * k - 1\n        else:\n            res = 2 * k + 1\n        res = min(2 * len(s) - 1, res)\n    else:\n        part = []\n        for i in range(lw, rw + 1):\n            if s[i] == 'W':\n                if i > lw and s[i - 1] == 'L':\n                    part.append(cur_num)\n                    cur_num = 0\n                if i > lw and s[i - 1] == 'W':\n                    res += 2\n                else:\n                    res += 1\n            else:\n                cur_num += 1\n        if k >= sum(part) + lw + len(s) - rw - 1:\n            res = 2 * len(s) - 1\n        else:\n            part.sort()\n            for i in range(len(part)):\n                if k >= part[i]:\n                    res += 2 * part[i] + 1\n                    k -= part[i]\n                else:\n                    break\n            res += 2 * k\n    print(max(res, 0))", "t = int(input())\nfor _ in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    s = input()\n    ind = []\n    if 'W' not in s:\n        print(max(0, min(2 * n - 1, 2 * k - 1)))\n        continue\n    score = 0\n    prev = 'L'\n    ind = []\n    for i in range(len(s)):\n        if s[i] == 'W' and prev == 'W':\n            score += 2\n            ind.append(i)\n        elif s[i] == 'W':\n            score += 1\n            ind.append(i)\n        prev = s[i]\n    gaps = []\n    for i in range(len(ind) - 1):\n        if ind[i + 1] - ind[i] > 1:\n            gaps.append(ind[i + 1] - ind[i])\n    gaps = sorted(gaps)\n    j = 0\n    while j < len(gaps) and k >= gaps[j] - 1:\n        k -= gaps[j] - 1\n        score += 2 * gaps[j] - 1\n        j += 1\n    print(min(2 * n - 1, score + 2 * k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cntW = s.count('W')\n    cntL = s.count('L')\n    cnt = 0\n    point = 0\n    gap = []\n    prevIndex = -1\n    firstIndex = -1\n    for i in range(n):\n        if s[i] == 'W':\n            cnt += 1\n            if prevIndex == -1:\n                prevIndex = i\n                firstIndex = i\n            elif i - prevIndex > 1:\n                gap.append(i - prevIndex - 1)\n            prevIndex = i\n        elif cnt > 0:\n            point += cnt * 2 - 1\n            cnt = 0\n    if s[-1] == 'W':\n        point += cnt * 2 - 1\n    gap.sort()\n    j = 0\n    while j < len(gap) and k > 0:\n        if gap[j] <= k:\n            point += 2 * gap[j] + 1\n            k -= gap[j]\n            cntL -= gap[j]\n            j += 1\n        else:\n            point += 2 * k\n            k = 0\n    if j == len(gap) and k > 0:\n        point += min(cntL, k) * 2\n    if cntW == 0:\n        point = min(cntL, k) * 2 - 1\n    print(max(point, 0))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s1 = list(s)\n    l = [len(i) for i in s.split('W')]\n    w = 0\n    if sum(l) <= k:\n        print(2 * n - 1)\n    else:\n        prev = s[0]\n        if prev == 'W':\n            w += 1\n        for i in s[1:]:\n            if prev == i and i == 'W':\n                w += 2\n            elif i == 'W':\n                w += 1\n            prev = i\n        m = sorted(l[1:-1], reverse=True)\n        cm = len(m)\n        while k != 0 and cm != 0:\n            t = m[cm - 1]\n            if t != 0:\n                if k >= t:\n                    w += t * 2 + 1\n                    k -= t\n                else:\n                    w += k * 2\n                    k = 0\n            cm -= 1\n        if len(l) == 1:\n            g = l[0]\n            if k != 0:\n                w += k * 2 - 1\n        elif len(l) == 2:\n            g = l[0] + l[-1]\n            if k != 0:\n                if g == n:\n                    w += k * 2 - 1\n                else:\n                    w += k * 2\n        else:\n            g = l[0] + l[-1]\n            if k != 0:\n                w += k * 2\n        print(w)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    scoreinitial = 0\n    if s[0] == 'W':\n        scoreinitial += 1\n    for i in range(1, len(s)):\n        if s[i] == 'W' and s[i - 1] == 'W':\n            scoreinitial += 2\n        elif s[i] == 'W':\n            scoreinitial += 1\n    paq = []\n    cuts = s.split('W')\n    extr = [len(x) for x in cuts]\n    nbL = sum(extr)\n    stock = min(m, nbL)\n    if stock == 0:\n        print(scoreinitial)\n    elif nbL < n:\n        paq = sorted(extr[1:-1])\n        rep = 0\n        for i in paq:\n            if i <= stock and i > 0:\n                rep += i * 2 + 1\n                stock -= i\n        rep += 2 * stock\n        print(rep + scoreinitial)\n    else:\n        print(stock * 2 - 1)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    winning_steaks_cnt = wins = losses = 0\n    losing_steaks = []\n    for i in range(N):\n        if S[i] == 'W':\n            wins += 1\n            if i == 0 or S[i - 1] == 'L':\n                winning_steaks_cnt += 1\n        if S[i] == 'L':\n            losses += 1\n            if i == 0 or S[i - 1] == 'W':\n                losing_steaks.append(0)\n            losing_steaks[-1] = losing_steaks[-1] + 1\n    if K >= losses:\n        print(2 * N - 1)\n        continue\n    if wins == 0:\n        if K == 0:\n            print(0)\n        else:\n            print(2 * K - 1)\n        continue\n    if S[0] == 'L':\n        losing_steaks[0] = 100000000.0\n    if S[-1] == 'L':\n        losing_steaks[-1] = 100000000.0\n    losing_steaks.sort()\n    wins += K\n    for ls in losing_steaks:\n        if ls > K:\n            break\n        K -= ls\n        winning_steaks_cnt -= 1\n    print(2 * wins - winning_steaks_cnt)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    Wstreak = wins = loss = 0\n    Lstreak = []\n    for i in range(n):\n        if s[i] == 'W':\n            wins += 1\n            if i == 0 or s[i - 1] == 'L':\n                Wstreak += 1\n        elif s[i] == 'L':\n            loss += 1\n            if i == 0 or s[i - 1] == 'W':\n                Lstreak.append(0)\n            Lstreak[-1] += 1\n    if k >= loss:\n        print(2 * n - 1)\n    elif wins == 0:\n        if k == 0:\n            print(0)\n        else:\n            print(2 * k - 1)\n    else:\n        if s[0] == 'L':\n            Lstreak[0] = 100000000.0\n        if s[-1] == 'L':\n            Lstreak[-1] = 100000000.0\n        Lstreak.sort()\n        wins += k\n        for i in Lstreak:\n            if i > k:\n                break\n            k -= i\n            Wstreak -= 1\n        print(2 * wins - Wstreak)", "nums = int(input().strip())\nfor _ in range(nums):\n    (n, k) = map(int, input().strip().split())\n    s = input().strip()\n    (lw, rw) = (s.find('W'), s.rfind('W'))\n    res = cur_num = 0\n    if lw == rw:\n        if lw == -1:\n            res = 2 * k - 1\n        else:\n            res = 2 * k + 1\n        res = min(2 * len(s) - 1, res)\n    else:\n        part = []\n        for i in range(lw, rw + 1):\n            if s[i] == 'W':\n                if i > lw and s[i - 1] == 'L':\n                    part.append(cur_num)\n                    cur_num = 0\n                if i > lw and s[i - 1] == 'W':\n                    res += 2\n                else:\n                    res += 1\n            else:\n                cur_num += 1\n        if k >= sum(part) + lw + len(s) - rw - 1:\n            res = 2 * len(s) - 1\n        else:\n            part.sort()\n            for i in range(len(part)):\n                if k >= part[i]:\n                    res += 2 * part[i] + 1\n                    k -= part[i]\n                else:\n                    break\n            res += 2 * k\n    print(max(res, 0))", "from collections import defaultdict\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    ko = k\n    curr = 0\n    if s[0] == 'W':\n        curr += 1\n    gaps = defaultdict(int)\n    gap = 0\n    for i in range(1, n):\n        if s[i] == 'W':\n            gaps[gap] += 1\n            gap = 0\n            curr += 1\n            if s[i - 1] == 'W':\n                curr += 1\n        else:\n            gap += 1\n    if curr == 0:\n        if k != 0:\n            curr -= 1\n    else:\n        fg = s.index('W')\n        if fg > 1:\n            gaps[fg - 1] -= 1\n    gaps_filled = 0\n    for (x, y) in sorted(gaps.items()):\n        if x == 0:\n            continue\n        if k // x >= y:\n            gaps_filled += y\n            k -= y * x\n        else:\n            gaps_filled += k // x\n            break\n    ko = min(ko, s.count('L'))\n    ans = curr + ko * 2 + gaps_filled\n    print(ans)", "tests = int(input())\nfor test in range(tests):\n    (n, k) = map(int, input().split())\n    s = 'L' + input().strip() + 'L'\n    res = 0\n    pr = 'L'\n    for c in s[1:-1]:\n        if c == 'W':\n            if pr == 'L':\n                res += 1\n            else:\n                res += 2\n        pr = c\n    r = 0\n    if res == 0:\n        r = 1\n    a = [len(c) for c in s.split('W')]\n    a = list(filter(lambda x: x != 0, a))\n    t = len(a)\n    for i in range(t):\n        if i == 0 or i == t - 1:\n            a[i] = 2 * a[i] - 2\n        else:\n            a[i] = 2 * a[i] + 1\n    b = sorted(a[1:-1])\n    for i in b:\n        if k * 2 + 1 < i:\n            res += k * 2\n        else:\n            res += i\n        k -= i // 2\n        if k <= 0:\n            break\n    if k > 0:\n        res += min(k * 2, a[0])\n        k -= a[0] // 2\n    if k > 0:\n        res += min(k * 2, a[t - 1])\n        k -= a[t - 1] // 2\n    if res > 0:\n        res -= r\n    res = min(res, n * 2 - 1)\n    print(res)", "import sys\nt = int(input())\nfor _ in range(t):\n    [n, k] = list(map(int, input().split()))\n    temp = 0\n    for line in sys.stdin:\n        s = line\n        break\n    prev = 'L'\n    current = 'L'\n    lsum = 0\n    tempsum = 0\n    losses = []\n    startind = 0\n    endind = n - 1\n    while startind != n and s[startind] == 'L':\n        startind += 1\n    while endind != -1 and s[endind] == 'L':\n        endind -= 1\n    for i in range(startind, endind + 1):\n        current = s[i]\n        if current == 'L' and prev == 'L':\n            lsum += 1\n            tempsum += 1\n        elif current == 'L' and prev == 'W':\n            tempsum = 1\n            lsum += 1\n        elif current == 'W' and prev == 'L':\n            if i != startind:\n                losses.append(tempsum)\n        prev = current\n    losses.sort()\n    startloss = startind\n    endloss = n - 1 - endind\n    lsum += startloss + endloss\n    starts = len(losses) + 1\n    losses.append(startloss)\n    losses.append(endloss)\n    if startind == n:\n        print(max(2 * k - 1, k))\n    else:\n        ind = 0\n        remk = k\n        while ind < len(losses) and remk > 0:\n            if remk >= losses[ind]:\n                remk -= losses[ind]\n                lsum -= losses[ind]\n                if ind < len(losses) - 2:\n                    starts -= 1\n            else:\n                lsum -= remk\n                break\n            ind += 1\n        print((n - lsum) * 2 - starts)", "t = int(input())\n\ndef cheatScore(s, n, k):\n    lose = 0\n    score = 0\n    start = 0\n    tmp = []\n    flag = 0\n    Alllose = 1\n    for c in s:\n        if c != 'W':\n            continue\n        else:\n            Alllose = 0\n            break\n    if Alllose:\n        return max(0, 2 * min(n, k) - 1)\n    for i in range(len(s)):\n        if i == 0:\n            if s[i] == 'L':\n                count = 1\n                flag = 1\n            else:\n                continue\n        if s[i] == 'L':\n            if s[i - 1] == 'W':\n                count = 1\n            elif s[i - 1] == 'L':\n                count += 1\n        elif s[i - 1] == 'L':\n            tmp.append(count)\n        else:\n            continue\n    stEnd = 0\n    if flag:\n        stEnd += tmp.pop(0)\n    if s[-1] == 'L':\n        stEnd += count\n    tmp = sorted(tmp)\n    for i in range(len(s)):\n        if i == 0:\n            if s[i] == 'W':\n                score += 1\n            else:\n                lose += 1\n            continue\n        if s[i] == 'W':\n            if s[i - 1] == 'W':\n                score += 2\n            else:\n                score += 1\n        else:\n            lose += 1\n    score += 2 * min(lose, k)\n    bridge = 0\n    leave = 0\n    for gap in tmp:\n        if k >= gap:\n            bridge += 1\n            k -= gap\n        else:\n            leave += gap\n    score += bridge\n    return score\nwhile t:\n    t -= 1\n    (n, k) = list(map(int, input().strip().split()))\n    s = input()\n    maxScore = cheatScore(s, n, k)\n    print(maxScore)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nsys.setrecursionlimit(99999)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip('L')\n    cw = s.count('W') + k\n    t = []\n    for (key, value) in itertools.groupby(s):\n        if key == 'L':\n            t.append(len(list(value)))\n    t.sort()\n    while t and t[0] <= k:\n        k -= t.pop(0)\n    print(max(0, 2 * min(n, cw) - len(t) - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    b = []\n    b1 = []\n    c = []\n    t = 0\n    count = 0\n    ans = 0\n    m = n - 1\n    if a[0] == 'L':\n        while t < n and a[t] == 'L':\n            count += 1\n            t += 1\n        b1.append(count)\n        count = 0\n    if a[-1] == 'L':\n        while m >= 0 and a[m] == 'L':\n            count += 1\n            m -= 1\n        b1.append(count)\n        count = 0\n    while t <= m:\n        if a[t] == 'W':\n            while t <= m and a[t] == 'W':\n                count += 1\n                t += 1\n            c.append(count)\n            count = 0\n        else:\n            while t <= m and a[t] == 'L':\n                count += 1\n                t += 1\n            b.append(count)\n            count = 0\n    for i in c:\n        ans += 2 * i - 1\n    b.sort()\n    if b1 and b1[-1] == n:\n        ans += max(min(n, k) * 2 - 1, 0)\n    else:\n        for i in b:\n            if i <= k:\n                ans += 2 * i + 1\n                k -= i\n            else:\n                ans += k * 2\n                k = 0\n            if not k:\n                break\n        if k and b1:\n            ans += min(sum(b1), k) * 2\n    print(ans)"]