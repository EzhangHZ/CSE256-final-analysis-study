["import sys\nfrom collections import Counter\ninput = sys.stdin.readline\nins = lambda : input().rstrip().split()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().split())\ninl = lambda : list(map(int, input().split()))\nans = []\nn = ini()\na = inl()\nq = ini()\ncount = dict(Counter(a))\nr2 = 0\nr4 = 0\nfor i in count.values():\n    r2 += i // 2\n    r4 += i // 4\nfor _ in range(q):\n    (p, s) = ins()\n    if p == '+':\n        if int(s) in count:\n            count[int(s)] += 1\n        else:\n            count[int(s)] = 1\n        if count[int(s)] % 2 == 0:\n            r2 += 1\n        if count[int(s)] % 4 == 0:\n            r4 += 1\n    else:\n        if count[int(s)] % 2 == 0:\n            r2 -= 1\n        if count[int(s)] % 4 == 0:\n            r4 -= 1\n        count[int(s)] -= 1\n    ans.append('YES' if r2 >= 4 and r4 >= 1 else 'NO')\nprint('\\n'.join(ans))", "from collections import Counter\ninput()\na = Counter(list(input().split()))\ncount1 = 0\ncount2 = 0\nc = []\nfor i in a.values():\n    count1 += i // 4\n    count2 += i // 2\nfor i in range(int(input())):\n    b = input().split()\n    if b[0] == '+':\n        try:\n            if a[b[1]] % 2 == 1:\n                count2 += 1\n            if a[b[1]] % 4 == 3:\n                count1 += 1\n            a[b[1]] += 1\n        except KeyError:\n            a[b[1]] = 1\n    else:\n        if a[b[1]] % 4 == 0:\n            count1 -= 1\n        if a[b[1]] % 2 == 0:\n            count2 -= 1\n        a[b[1]] -= 1\n    if count1 > 0 and count2 > 3:\n        c.append('YES')\n    else:\n        c.append('NO')\nprint('\\n'.join(c))", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(str, input().split())\ninl = lambda : list(map(int, input().split()))\nans = []\nn = ini()\na = inl()\nq = ini()\ncount = dict(Counter(a))\nr2 = 0\nr4 = 0\nfor i in count.values():\n    r2 += i // 2\n    r4 += i // 4\nfor _ in range(q):\n    (p, s) = inm()\n    if p == '+':\n        if int(s) in count:\n            count[int(s)] += 1\n        else:\n            count[int(s)] = 1\n        if count[int(s)] % 2 == 0:\n            r2 += 1\n        if count[int(s)] % 4 == 0:\n            r4 += 1\n    else:\n        if count[int(s)] % 2 == 0:\n            r2 -= 1\n        if count[int(s)] % 4 == 0:\n            r4 -= 1\n        count[int(s)] -= 1\n    ans.append('YES' if r2 >= 4 and r4 >= 1 else 'NO')\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nd = defaultdict(int)\nfor i in a:\n    d[i] += 1\nfour_s = 0\ntwo_s = 0\nfor i in d:\n    if d[i] >= 4:\n        four_s += d[i] // 4\n        two_s += d[i] % 4 // 2\n    else:\n        two_s += d[i] // 2\nq = int(input())\nfor _ in range(q):\n    (t, l) = input().split()\n    l = int(l)\n    if t == '+':\n        d[l] += 1\n        if d[l] % 4 == 0:\n            two_s -= 1\n            four_s += 1\n        elif d[l] % 2 == 0:\n            two_s += 1\n    else:\n        d[l] -= 1\n        if (d[l] + 1) % 4 == 0:\n            four_s -= 1\n            two_s += 1\n        elif (d[l] + 1) % 2 == 0:\n            two_s -= 1\n    if four_s >= 2 or (four_s >= 1 and two_s >= 2):\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nd = defaultdict(int)\nfor i in a:\n    d[i] += 1\nfour_s = 0\ntwo_s = 0\nfor i in d:\n    if d[i] >= 4:\n        four_s += d[i] // 4\n        two_s += d[i] % 4 // 2\n    else:\n        two_s += d[i] // 2\nq = int(input())\nfor _ in range(q):\n    (t, l) = input().split()\n    l = int(l)\n    if t == '+':\n        d[l] += 1\n        if d[l] % 4 == 0:\n            two_s -= 1\n            four_s += 1\n        elif d[l] % 2 == 0:\n            two_s += 1\n    else:\n        d[l] -= 1\n        if (d[l] + 1) % 4 == 0:\n            four_s -= 1\n            two_s += 1\n        elif (d[l] + 1) % 2 == 0:\n            two_s -= 1\n    if four_s >= 2 or (four_s >= 1 and two_s >= 2):\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom collections import Counter\n\ndef main():\n    _ = int(sys.stdin.readline())\n    C = Counter((int(x) for x in sys.stdin.readline().split()))\n    Q = int(sys.stdin.readline())\n    (A, B) = (set(), set())\n    for (k, v) in C.items():\n        if v > 1:\n            A.add(k)\n        if v > 3:\n            B.add(k)\n    for q in range(Q):\n        (a, b) = sys.stdin.readline().split()\n        b = int(b)\n        if a == '+':\n            C[b] += 1\n            if C[b] > 1:\n                A.add(b)\n            if C[b] > 3:\n                B.add(b)\n        else:\n            C[b] -= 1\n            if C[b] < 2 and b in A:\n                A.remove(b)\n            if C[b] < 4 and b in B:\n                B.remove(b)\n        if len(B) == 0:\n            print('NO')\n            continue\n        if len(B) > 1 or len(A) > 2:\n            print('YES')\n            continue\n        b = next(iter(B))\n        t = 0\n        for a in A:\n            s = C[a]\n            if a == b:\n                s -= 4\n            t += s // 2\n        print('YES' if t > 1 else 'NO')\nmain()", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\nn = int(input())\nlis = [0] * (10 ** 5 + 1)\narry = list(map(int, input().split()))\nm = int(input())\ntwo = 0\nfour = 0\nfor i in range(n):\n    lis[arry[i]] += 1\n    if lis[arry[i]] % 2 == 0:\n        two += 1\n    if lis[arry[i]] % 4 == 0:\n        four += 1\nfor i in range(m):\n    (sign, numstr) = input().split()\n    if sign == '+':\n        lis[int(numstr)] += 1\n        if lis[int(numstr)] % 2 == 0:\n            two += 1\n        if lis[int(numstr)] % 4 == 0:\n            four += 1\n    else:\n        if lis[int(numstr)] % 2 == 0:\n            two -= 1\n        if lis[int(numstr)] % 4 == 0:\n            four -= 1\n        lis[int(numstr)] -= 1\n    if four >= 1 and two >= 4:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nn = int(input())\naa = map(int, input().split())\nc = Counter(aa)\nc.update([0, -1])\nq = int(input())\nans = []\ns8 = set()\ns6 = set()\ns4 = set()\ns2 = set()\nfor (i, j) in c.items():\n    if j >= 8:\n        s8.add(i)\n    elif j >= 6:\n        s6.add(i)\n    elif j >= 4:\n        s4.add(i)\n    elif j >= 2:\n        s2.add(i)\nfor _ in range(q):\n    (x, y) = input().split()\n    y = int(y)\n    if x == '+':\n        c[y] += 1\n        if c[y] == 8:\n            s8.add(y)\n            s6.remove(y)\n        elif c[y] == 6:\n            s6.add(y)\n            s4.remove(y)\n        elif c[y] == 4:\n            s4.add(y)\n            s2.remove(y)\n        elif c[y] == 2:\n            s2.add(y)\n    else:\n        c[y] -= 1\n        if c[y] == 7:\n            s8.remove(y)\n            s6.add(y)\n        elif c[y] == 5:\n            s6.remove(y)\n            s4.add(y)\n        elif c[y] == 3:\n            s4.remove(y)\n            s2.add(y)\n        elif c[y] == 1:\n            s2.remove(y)\n    if s8 or sum((len(x) for x in [s4, s6])) >= 2 or (s6 and s2) or (s4 and len(s2) >= 2):\n        ans.append('YES')\n    else:\n        ans.append('NO')\nprint('\\n'.join(ans))", "from sys import stdin\nfrom collections import defaultdict\nimport math\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().rstrip().split(' ')))\nq = int(input())\nd = defaultdict(lambda : 0)\nfor ele in a:\n    d[ele] += 1\ncount4 = 0\ncount2 = 0\nfor (key, value) in d.items():\n    count4 += value // 4\n    value = value % 4\n    count2 += value // 2\nfor _ in range(q):\n    (sign, num) = input().rstrip().split(' ')\n    num = int(num)\n    val = d[num]\n    if sign == '+':\n        if (val + 1) % 4 == 0:\n            count4 += 1\n            count2 -= 1\n        elif (val + 1) % 2 == 0:\n            count2 += 1\n        d[num] += 1\n    else:\n        if val % 4 == 0:\n            count4 -= 1\n            count2 += 1\n        elif val % 2 == 0:\n            count2 -= 1\n        d[num] -= 1\n    if count4 >= 2 or (count4 == 1 and count2 >= 2):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    cnt4 = 0\n    cnt2 = 0\n    for i in d:\n        cnt4 += d[i] // 4\n        rem = d[i] - 4 * (d[i] // 4)\n        cnt2 += rem // 2\n    l = []\n    q = int(stdin.readline())\n    for i in range(q):\n        tmp = stdin.readline().strip('\\n')\n        t1 = tmp[0]\n        t2 = int(tmp[2:])\n        if t1 == '+':\n            if t2 not in d:\n                d[t2] = 0\n            d[t2] += 1\n            if d[t2] % 4 == 0:\n                cnt2 -= 1\n                cnt4 += 1\n            elif d[t2] % 2 == 0:\n                cnt2 += 1\n        else:\n            if d[t2] % 4 == 0:\n                cnt2 += 1\n                cnt4 -= 1\n            elif d[t2] % 2 == 0:\n                cnt2 -= 1\n            d[t2] -= 1\n        if cnt4 >= 2 or (cnt2 >= 2 and cnt4 >= 1):\n            print('YES')\n        else:\n            print('NO')", "from sys import stdin, stdout\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nimport math\nI = lambda : map(int, stdin.readline().split())\nI1 = lambda : stdin.readline()\nn = int(I1())\na = list(I())\nk = int(I1())\nd = {}\nfor x in a:\n    d[x] = d.get(x, 0) + 1\n(sum2, sum4) = (0, 0)\nfor x in d.values():\n    if x >= 4:\n        sum4 += x // 4\n        sum2 += x % 4 // 2\n    elif x >= 2:\n        sum2 += x // 2\nfor i in range(k):\n    s = I1().split()\n    x = int(s[1])\n    if x in d:\n        if d[x] >= 4:\n            sum4 -= d[x] // 4\n            sum2 -= d[x] % 4 // 2\n        elif d[x] >= 2:\n            sum2 -= d[x] // 2\n    if s[0] == '+':\n        d[x] = d.get(x, 0) + 1\n    else:\n        d[x] -= 1\n    if d[x] >= 4:\n        sum4 += d[x] // 4\n        sum2 += d[x] % 4 // 2\n    elif d[x] >= 2:\n        sum2 += d[x] // 2\n    if sum2 >= 2 and sum4 >= 1 or sum4 >= 2:\n        print('YES')\n    else:\n        print('NO')", "I = input\nn = int(I())\nd = {}\na = b = 0\nfor s in I().split() + [I() for _ in [0] * int(I())]:\n    e = 1\n    n -= 1\n    if n < 0:\n        e = s[0] < '-'\n        s = s[2:]\n    k = 2 * e - 1\n    m = d.get(s, 0)\n    d[s] = m + k\n    m += e\n    a += (m % 2 < 1) * k\n    b += (m % 4 < 1) * k\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "I = input\nn = int(I())\nd = {}\na = b = 0\nfor s in I().split() + [I() for _ in [0] * int(I())]:\n    e = 1\n    n -= 1\n    if n < 0:\n        e = s[0] < '-'\n        s = s[2:]\n    k = 2 * e - 1\n    m = d.get(s, 0)\n    d[s] = m + k\n    m += e\n    a += (m % 2 < 1) * k\n    b += (m % 4 < 1) * k\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = 1\nwhile t:\n    t -= 1\n    v = int(fastinput())\n    d = dict()\n    cnt = [0] * 9\n    for i in fastinput().split():\n        if i in d:\n            d[i] += 1\n            if d[i] <= 8:\n                cnt[d[i] - 1] -= 1\n                cnt[d[i]] += 1\n        else:\n            d[i] = 1\n            cnt[1] += 1\n    q = int(fastinput())\n    while q:\n        q -= 1\n        x = list((i for i in fastinput().split()))\n        n = x[1]\n        if x[0] == '-':\n            d[n] -= 1\n            if d[n] < 8:\n                cnt[d[n]] += 1\n                cnt[d[n] + 1] -= 1\n        elif n in d:\n            d[n] += 1\n            if d[n] <= 8:\n                cnt[d[n] - 1] -= 1\n                cnt[d[n]] += 1\n        else:\n            d[n] = 1\n            cnt[1] += 1\n        if cnt[8] >= 1:\n            print('YES')\n        elif cnt[4] + cnt[5] + cnt[6] + cnt[7] >= 2:\n            print('YES')\n        elif cnt[6] + cnt[7] == 1 and cnt[2] + cnt[3] + cnt[4] + cnt[5] >= 1:\n            print('YES')\n        elif cnt[4] + cnt[5] >= 1 and cnt[2] + cnt[3] >= 2:\n            print('YES')\n        else:\n            print('NO')", "I = input\nn = int(I())\nd = {}\na = b = 0\nfor s in I().split() + [I() for _ in [0] * int(I())]:\n    n -= 1\n    e = n < 0\n    t = s[2 * e:]\n    e &= s[0] > '+'\n    k = 1 - 2 * e\n    m = d.get(t, 0)\n    d[t] = m + k\n    m -= e\n    a += m % 2 * k\n    b += (m % 4 > 2) * k\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "(n, s, _, *l) = open(0)\nn = int(n)\nd = [0] * 7 ** 6\na = b = 0\nfor s in s.split() + l:\n    n -= 1\n    e = n < 0\n    t = int(s[2 * e:])\n    e &= s[0] > '+'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += (m % 4 > 2) * k\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "(n, s, _, *l) = open(0)\nn = int(n)\nd = [0] * 7 ** 6\na = b = 0\nfor s in s.split() + l:\n    n -= 1\n    e = n < 0\n    t = int(s[2 * e:])\n    e &= s[0] > '+'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += m % 4 // 3 * k\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "def check(count):\n    cond = count[7] >= 1\n    cond1 = count[3] + count[4] + count[5] + count[6] > 1\n    cond_sq = count[3] + count[4] + count[5] + count[6] == 1\n    cond_rect = count[5] + count[1] + count[2] + count[6] > 1\n    if cond or cond1 or (cond_sq and cond_rect):\n        return 1\n    return 0\nn = int(input())\nplanks = list(map(int, input().split()))\ndct = {}\nfor size in planks:\n    val = dct.get(size, 0)\n    val += 1\n    dct[size] = val\ncount = [0 for _ in range(8)]\nfor size in dct:\n    val = dct[size]\n    idx = [val - 1, 7][int(val >= 8)]\n    count[idx] += 1\nq = int(input())\nans = []\nfor _ in range(q):\n    s = input()\n    size = int(s[2:])\n    val = dct.get(size, 0)\n    if s[0] == '+':\n        if val:\n            if val < 8:\n                count[val - 1] -= 1\n                count[val] += 1\n        else:\n            count[0] += 1\n        dct[size] = val + 1\n    else:\n        if 1 < val <= 8:\n            count[val - 1] -= 1\n            count[val - 2] += 1\n        elif val == 1:\n            count[0] -= 1\n        dct[size] = val - 1\n    ans.append(['NO', 'YES'][check(count)])\nfor x in ans:\n    print(x)", "I = input\nn = int(I())\nd = {}\na = b = 0\nfor s in I().split() + [I() for _ in [0] * int(I())]:\n    e = 1\n    n -= 1\n    if n < 0:\n        e = 44 - ord(s[0])\n        s = s[2:]\n    m = d.get(s, 0)\n    k = m % 2\n    l = m % 4\n    d[s] = m + e\n    if e > 0:\n        a += k > 0\n        b += l > 2\n    else:\n        a -= k < 1\n        b -= l < 1\n    if n < 0:\n        print('NYOE S'[a - 3 > 0 < b::2])", "def check(count):\n    cond = count[7] >= 1\n    cond1 = count[3] + count[4] + count[5] + count[6] > 1\n    cond_sq = count[3] + count[4] + count[5] + count[6] == 1\n    cond_rect = count[5] + count[1] + count[2] + count[6] > 1\n    if cond or cond1 or (cond_sq and cond_rect):\n        return 1\n    return 0\nn = int(input())\nplanks = list(map(int, input().split()))\ndct = {}\nfor size in planks:\n    val = dct.get(size, 0)\n    val += 1\n    dct[size] = val\ncount = [0 for _ in range(8)]\nfor size in dct:\n    if dct[size] >= 8:\n        count[7] += 1\n    else:\n        count[dct[size] - 1] += 1\nq = int(input())\nans = []\nfor _ in range(q):\n    s = input()\n    sign = s[0]\n    size = int(s[2:])\n    val = dct.get(size, 0)\n    if sign == '+':\n        if val:\n            if val < 8:\n                count[val - 1] -= 1\n                count[val] += 1\n        else:\n            count[0] += 1\n        dct[size] = val + 1\n    else:\n        if 1 < val <= 8:\n            count[val - 1] -= 1\n            count[val - 2] += 1\n        elif val == 1:\n            count[0] -= 1\n        dct[size] = val - 1\n    ans.append(['NO', 'YES'][check(count)])\nfor x in ans:\n    print(x)", "(_, s, _, *l) = open(0)\n(a, b, *d) = [0] * 7 ** 6\nfor s in s.split() + l:\n    f = s[0] < '0'\n    t = int(s[f:])\n    e = s[0] == '-'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += m % 4 // 3 * k\n    print('NYOE S'[a - 3 > 0 < b:f * 6:2])", "(_, s, _, *l) = open(0)\n(a, b, *d) = [0] * 7 ** 6\nfor s in s.split() + l:\n    f = s[0] < '0'\n    t = int(s[f:])\n    e = s[0] == '-'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += m % 4 // 3 * k\n    print('NYOE S'[a - 3 > 0 < b:f * 6:2])", "(_, s, _, *l) = open(0)\n(a, b, *d) = [0] * 7 ** 6\nfor s in s.split() + l:\n    f = s[0] < '0'\n    t = int(s[f:])\n    e = s[0] == '-'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += m % 4 // 3 * k\n    print('NYOE S'[a - 3 > 0 < b:f * 6:2])", "(_, s, _, *l) = open(0)\n(a, b, *d) = [0] * 7 ** 6\nfor s in s.split() + l:\n    f = s[0] < '0'\n    t = int(s[f:])\n    e = s[0] == '-'\n    k = 1 - 2 * e\n    m = d[t] - e\n    d[t] += k\n    a += m % 2 * k\n    b += m % 4 // 3 * k\n    print('NYOE S'[a - 3 > 0 < b:f * 6:2])", "from collections import Counter\nn = int(input())\narr = list(map(int, input().split()))\ncount = dict(Counter(arr))\ntwo = 0\nfour = 0\nfor i in count.values():\n    two += i // 2\n    four += i // 4\nt = int(input())\nwhile t:\n    t -= 1\n    (operation, stick) = input().split()\n    stick = int(stick)\n    if operation == '+':\n        if stick in count:\n            count[stick] += 1\n        else:\n            count[stick] = 1\n        if count[stick] % 2 == 0:\n            two += 1\n        if count[stick] % 4 == 0:\n            four += 1\n    else:\n        if count[stick] % 2 == 0:\n            two -= 1\n        if count[stick] % 4 == 0:\n            four -= 1\n        count[stick] -= 1\n    if two >= 4 and four >= 1:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nscore = list(map(int, input().split(' ')))\nres = []\ncoun = [0] * 100001\nfor i in score:\n    coun[i] += 1\ndiv2 = 0\ndiv4 = 0\nfor i in coun:\n    div2 += i // 2\n    div4 += i // 4\nfor i in range(int(input())):\n    s = input()\n    new = int(s[2:])\n    div2 -= coun[new] // 2\n    div4 -= coun[new] // 4\n    if s[0] == '+':\n        coun[new] += 1\n    else:\n        coun[new] -= 1\n    div2 += coun[new] // 2\n    div4 += coun[new] // 4\n    print('YES' if div4 >= 1 and div2 >= 4 else 'NO')", "n = int(input())\nscore = list(map(int, input().split(' ')))\nres = []\ncoun = [0] * 100001\ndiv2 = 0\ndiv4 = 0\nfor i in score:\n    div2 -= coun[i] // 2\n    div4 -= coun[i] // 4\n    coun[i] += 1\n    div2 += coun[i] // 2\n    div4 += coun[i] // 4\nfor i in range(int(input())):\n    s = input()\n    new = int(s[2:])\n    div2 -= coun[new] // 2\n    div4 -= coun[new] // 4\n    if s[0] == '+':\n        coun[new] += 1\n    else:\n        coun[new] -= 1\n    div2 += coun[new] // 2\n    div4 += coun[new] // 4\n    print('YES' if div4 >= 1 and div2 >= 4 else 'NO')", "from collections import defaultdict\nn = int(input())\np = list(map(int, input().split()))\ndd = defaultdict(lambda : 0)\nco = defaultdict(lambda : 0)\nfor i in p:\n    co[i] += 1\n    x = co[i]\n    dd[x] += 1\nfor _ in range(int(input())):\n    (inp, nt) = input().split()\n    pa = int(nt)\n    if inp == '+':\n        co[pa] += 1\n        x = co[pa]\n        dd[x] += 1\n    else:\n        x = co[pa]\n        co[pa] -= 1\n        dd[x] -= 1\n    if dd[4] >= 2:\n        print('YES')\n    elif dd[8] > 0:\n        print('YES')\n    elif dd[6] > 0 and dd[2] > 1:\n        print('YES')\n    elif dd[4] >= 1 and dd[2] >= 3:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = map(int, input().split())\ncnt = [0] * (10 ** 5 + 1)\nc2 = 0\nc4 = 0\nfor i in a:\n    cnt[i] += 1\nfor i in cnt:\n    c2 += i // 2\n    c4 += i // 4\nq = int(input())\nfor _ in range(q):\n    (x, y) = input().split()\n    y = int(y)\n    if x == '+':\n        cnt[y] += 1\n        if cnt[y] % 4 == 0:\n            c4 += 1\n        if cnt[y] % 2 == 0:\n            c2 += 1\n    else:\n        if cnt[y] % 4 == 0:\n            c4 -= 1\n        if cnt[y] % 2 == 0:\n            c2 -= 1\n        cnt[y] -= 1\n    if c4 >= 2 or (c4 == 1 and c2 >= 4):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nsquares = 0\nrectangles = 0\nshapes = [0 for i in range(100001)]\nfor i in input().split():\n    i = int(i)\n    shapes[i] += 1\n    if shapes[i] % 2 == 0:\n        rectangles += 1\n    if shapes[i] % 4 == 0:\n        squares += 1\nfor i in range(int(input())):\n    action = input()\n    i = int(action[1:])\n    if action[0] == '+':\n        shapes[i] += 1\n        if shapes[i] % 2 == 0:\n            rectangles += 1\n        if shapes[i] % 4 == 0:\n            squares += 1\n    else:\n        shapes[i] -= 1\n        if shapes[i] % 2:\n            rectangles -= 1\n        if shapes[i] % 4 == 3:\n            squares -= 1\n    if rectangles >= 4 and squares >= 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\na = input().split(' ')\na = list(map(int, a))\nn = 2 * pow(10, 5)\nlis = n * [0]\ncnt = n * [0]\nfor ele in a:\n    lis[ele] += 1\n    cnt[lis[ele]] += 1\nt2 = int(input())\nfor i in range(t2):\n    c = input().split(' ')\n    if c[0] == '+':\n        v = int(c[1])\n        lis[v] += 1\n        cnt[lis[v]] += 1\n    else:\n        v = int(c[1])\n        cnt[lis[v]] -= 1\n        lis[v] -= 1\n    if cnt[8] >= 1 or cnt[4] >= 2 or (cnt[6] >= 1 and cnt[2] >= 2) or (cnt[4] >= 1 and cnt[2] >= 3):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nx = list(map(int, input().split()))\nl = [0] * (10 ** 5 + 1)\ncts = [0] * (10 ** 5 + 1)\nfor each in x:\n    l[each] += 1\nfor each in l:\n    cts[each] += 1\ntwos = cts[2] + cts[3]\nfours = cts[4] + cts[5]\nsixes = cts[6] + cts[7]\neights = sum(cts[8:])\nfor _ in range(int(input())):\n    (s, n) = input().split()\n    r = int(n)\n    if s == '+':\n        l[r] += 1\n        if l[r] == 2:\n            twos += 1\n        elif l[r] == 4:\n            fours += 1\n            twos -= 1\n        elif l[r] == 6:\n            sixes += 1\n            fours -= 1\n        elif l[r] == 8:\n            eights += 1\n            sixes -= 1\n    else:\n        if l[r] == 2:\n            twos -= 1\n        elif l[r] == 4:\n            fours -= 1\n            twos += 1\n        elif l[r] == 6:\n            sixes -= 1\n            fours += 1\n        elif l[r] == 8:\n            sixes += 1\n            eights -= 1\n        l[r] -= 1\n    if (eights >= 1 or fours >= 2 or sixes >= 2) or (fours >= 1 and twos >= 2) or (sixes >= 1 and twos >= 1) or (sixes >= 1 and fours >= 1):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef getlist():\n    return list(map(int, input().split()))\n\ndef main():\n    N = int(input())\n    A = getlist()\n    D = defaultdict(int)\n    squaremat = 0\n    recmat = 0\n    for i in range(N):\n        val = A[i]\n        D[val] += 1\n        if D[val] % 4 == 2:\n            recmat += 1\n        elif D[val] % 4 == 0:\n            recmat -= 1\n            squaremat += 1\n    Q = int(input())\n    for i in range(Q):\n        (sig, x) = list(input().split())\n        x = int(x)\n        if sig == '+':\n            D[x] += 1\n            if D[x] % 4 == 2:\n                recmat += 1\n            elif D[x] % 4 == 0:\n                recmat -= 1\n                squaremat += 1\n            if squaremat >= 2 or (squaremat == 1 and recmat >= 2):\n                print('YES')\n            else:\n                print('NO')\n        else:\n            if D[x] % 4 == 0:\n                recmat += 1\n                squaremat -= 1\n            elif D[x] % 4 == 2:\n                recmat -= 1\n            D[x] -= 1\n            if squaremat >= 2 or (squaremat == 1 and recmat >= 2):\n                print('YES')\n            else:\n                print('NO')\nmain()", "def solve():\n    _ = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for x in a:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    k = {2: 0, 4: 0}\n    for (key, val) in d.items():\n        if val >= 4:\n            k[4] += 1\n            k[2] += (val - 4) // 2\n        else:\n            k[2] += val // 2\n    for _ in range(int(input())):\n        (char, key) = input().split()\n        key = int(key)\n        if char == '+':\n            if key not in d:\n                d[key] = 1\n            else:\n                val = d[key]\n                if val >= 4:\n                    k[4] -= 1\n                    k[2] -= (val - 4) // 2\n                else:\n                    k[2] -= val // 2\n                d[key] += 1\n                val = d[key]\n                if val >= 4:\n                    k[4] += 1\n                    k[2] += (val - 4) // 2\n                else:\n                    k[2] += val // 2\n        else:\n            val = d[key]\n            if val >= 4:\n                k[4] -= 1\n                k[2] -= (val - 4) // 2\n            else:\n                k[2] -= val // 2\n            d[key] -= 1\n            val = d[key]\n            if val >= 4:\n                k[4] += 1\n                k[2] += (val - 4) // 2\n            else:\n                k[2] += val // 2\n        if k[4] > 1 or (k[4] == 1 and k[2] > 1):\n            print('YES')\n        else:\n            print('NO')\nsolve()", "n = int(input())\narr = [int(i) for i in input().split()]\nmd = dict([])\nsq = 0\nrect = 0\nfor i in arr:\n    if i in md:\n        md[i] += 1\n        if md[i] % 4 == 0:\n            sq += 1\n            rect += 1\n        elif md[i] % 2 == 0:\n            rect += 1\n    else:\n        md[i] = 1\nq = int(input())\ni = 0\nfor j in range(q):\n    qu = input().split()\n    if qu[0] == '+':\n        i = int(qu[1])\n        if i in md:\n            md[i] += 1\n            if md[i] % 4 == 0:\n                sq += 1\n                rect += 1\n            elif md[i] % 2 == 0:\n                rect += 1\n        else:\n            md[i] = 1\n    else:\n        i = int(qu[1])\n        if md[i] % 4 == 0:\n            sq -= 1\n            rect -= 1\n        elif md[i] % 2 == 0:\n            rect -= 1\n        md[i] -= 1\n    if sq >= 2:\n        print('YES')\n    elif sq == 1 and rect - 2 >= 2:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\narr = list(map(int, input().split()))\nq = int(input())\nhave = [0] * 100010\nfor i in range(n):\n    have[arr[i]] += 1\nhaveFour = 0\nhaveTwo = 0\nfor i in range(len(have)):\n    haveFour += have[i] // 4\n    haveTwo += have[i] % 4 // 2\nfor i in range(q):\n    (a, b) = list(input().split())\n    b = int(b)\n    if a == '+':\n        have[b] += 1\n        if have[b] % 4 == 0:\n            haveFour += 1\n            haveTwo -= 1\n        elif have[b] % 2 == 0:\n            haveTwo += 1\n    else:\n        have[b] -= 1\n        if have[b] % 4 == 3:\n            haveFour -= 1\n            haveTwo += 1\n        elif have[b] % 2 == 1:\n            haveTwo -= 1\n    if haveFour >= 1 and haveTwo >= 2 or haveFour >= 2:\n        print('YES')\n    else:\n        print('NO')", "import sys\nn = int(sys.stdin.readline())\narr = list(map(int, input().split()))\ndi = {}\ncount2 = 0\ncount4 = 0\nfor i in arr:\n    if i in di:\n        di[i] += 1\n        if di[i] % 4 != 0 and di[i] % 2 == 0:\n            count2 += 1\n        if di[i] % 4 == 0:\n            count4 += 1\n            count2 -= 1\n    else:\n        di[i] = 1\narr.clear()\nno = int(sys.stdin.readline())\nfor i in range(no):\n    (s, o) = input().split()\n    o = int(o)\n    if s == '-':\n        if di[o] % 4 == 0:\n            count4 -= 1\n            count2 += 1\n        elif di[o] % 2 == 0 and di[o] % 4 != 0:\n            count2 -= 1\n        di[o] -= 1\n    else:\n        if o not in di:\n            di[o] = 0\n        di[o] += 1\n        if di[o] % 4 != 0 and di[o] % 2 == 0:\n            count2 += 1\n        if di[o] % 4 == 0:\n            count4 += 1\n            count2 -= 1\n    if count4 >= 2 or (count4 >= 1 and count2 >= 2):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\narr = list(map(int, input().split()))\nware = {}\npairs = 0\npair = {}\nsq = 0\nre = 0\nfor i in range(n):\n    ware[arr[i]] = ware.get(arr[i], 0) + 1\n    if ware[arr[i]] == 2:\n        ware[arr[i]] = 0\n        pair[arr[i]] = pair.get(arr[i], 0) + 1\n        pairs += 1\nq = int(input())\nfor _ in range(q):\n    (s, a) = input().split()\n    a = int(a)\n    if s == '+':\n        ware[a] = ware.get(a, 0) + 1\n        if ware[a] == 2:\n            ware[a] = 0\n            pair[a] = pair.get(a, 0) + 1\n            pairs += 1\n    elif ware[a] == 0:\n        ware[a] = 1\n        pair[a] -= 1\n        pairs -= 1\n        if pair[a] == 0:\n            del pair[a]\n    else:\n        ware[a] -= 1\n    if pairs >= 4 and len(pair) < pairs:\n        print('YES')\n    else:\n        print('NO')", "from collections import *\nI = input\nI()\nc = Counter(I().split())\n(a, b) = (sum((c[x] // i for x in c)) for i in (2, 4))\nfor _ in [0] * int(I()):\n    s = I()\n    t = s[2:]\n    d = 44 - ord(s[0])\n    k = c[t] % 2\n    l = c[t] % 4\n    c[t] += d\n    if d > 0:\n        a += k > 0\n        b += l > 2\n    else:\n        a -= k < 1\n        b -= l < 1\n    print('NYOE S'[a - 3 > 0 < b::2])", "def check(tem2, tem4):\n    if tem4 < 1:\n        return False\n    if tem4 >= 2:\n        return True\n    if tem2 >= 4:\n        return True\n    return False\nnum = int(input())\ninit = input().split()\ndic = {}\ntem4 = 0\ntem2 = 0\nfor i in init:\n    if i in dic:\n        tem4 -= int(dic[i] / 4)\n        tem2 -= int(dic[i] / 2)\n        dic[i] += 1\n        tem4 += int(dic[i] / 4)\n        tem2 += int(dic[i] / 2)\n    else:\n        dic[i] = 1\nnum = int(input())\nfor i in range(num):\n    (a, b) = input().split()\n    if a == '+':\n        if b in dic:\n            tem4 -= int(dic[b] / 4)\n            tem2 -= int(dic[b] / 2)\n            dic[b] += 1\n            tem4 += int(dic[b] / 4)\n            tem2 += int(dic[b] / 2)\n        else:\n            dic[b] = 1\n    else:\n        tem4 -= int(dic[b] / 4)\n        tem2 -= int(dic[b] / 2)\n        dic[b] -= 1\n        tem4 += int(dic[b] / 4)\n        tem2 += int(dic[b] / 2)\n    if check(tem2, tem4):\n        print('YES')\n    else:\n        print('NO')", "def check1(dpp):\n    if dpp[8] >= 1 or dpp[4] >= 2:\n        return 'YES'\n    elif dpp[6] >= 1 and dpp[2] >= 2:\n        return 'YES'\n    elif dpp[4] >= 1 and dpp[2] >= 3:\n        return 'YES'\n    else:\n        return 'NO'\nn = int(input())\ndp = [0] * 131072\ndpp = [0] * 131072\narr = list(map(int, input().split()))\nfor i in arr:\n    dp[i] += 1\n    dpp[dp[i]] += 1\nfor _ in range(int(input())):\n    (a, b) = input().split()\n    if a == '+':\n        i = int(b)\n        dp[i] += 1\n        dpp[dp[i]] += 1\n        print(check1(dpp))\n    if a == '-':\n        i = int(b)\n        dpp[dp[i]] -= 1\n        dp[i] -= 1\n        print(check1(dpp))", "def increase(num_counter, seconds, fourths):\n    if num_counter and num_counter % 4 == 0:\n        fourths += 1\n        seconds -= 1\n    elif num_counter and num_counter % 2 == 0:\n        seconds += 1\n    return (seconds, fourths)\n\ndef decrease(num_counter, seconds, fourths):\n    if num_counter and num_counter % 4 == 3:\n        fourths -= 1\n        seconds += 1\n    elif num_counter and num_counter % 2 == 1:\n        seconds -= 1\n    return (seconds, fourths)\ninput()\narr = input().split()\nq = int(input())\ncounter = dict()\nfourths = 0\nseconds = 0\nfor val in arr:\n    counter[val] = counter.get(val, 0) + 1\n    (seconds, fourths) = increase(counter[val], seconds, fourths)\nwhile q > 0:\n    q -= 1\n    (op, val) = input().split()\n    if op == '+':\n        num_counter = counter[val] = counter.get(val, 0) + 1\n        (seconds, fourths) = increase(num_counter, seconds, fourths)\n    else:\n        num_counter = counter[val] = counter[val] - 1\n        (seconds, fourths) = decrease(num_counter, seconds, fourths)\n    if fourths > 1 or (fourths == 1 and seconds > 1):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in a:\n    d[i] = d.get(i, 0) + 1\nfour_s = 0\ntwo_s = 0\nfor i in d:\n    if d[i] >= 4:\n        four_s += d[i] // 4\n        two_s += d[i] % 4 // 2\n    else:\n        two_s += d[i] // 2\nq = int(input())\nfor _ in range(q):\n    (t, l) = input().split()\n    l = int(l)\n    if t == '+':\n        d[l] = d.get(l, 0) + 1\n        if d[l] % 4 == 0:\n            two_s -= 1\n            four_s += 1\n        elif d[l] % 2 == 0:\n            two_s += 1\n    else:\n        d[l] -= 1\n        if (d[l] + 1) % 4 == 0:\n            four_s -= 1\n            two_s += 1\n        elif (d[l] + 1) % 2 == 0:\n            two_s -= 1\n    if four_s >= 2 or (four_s >= 1 and two_s >= 2):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in a:\n    d[i] = d.get(i, 0) + 1\nfour_s = 0\ntwo_s = 0\nfor i in d:\n    if d[i] >= 4:\n        four_s += d[i] // 4\n        two_s += d[i] % 4 // 2\n    else:\n        two_s += d[i] // 2\nq = int(input())\nfor _ in range(q):\n    (t, l) = input().split()\n    l = int(l)\n    if t == '+':\n        d[l] = d.get(l, 0) + 1\n        if d[l] % 4 == 0:\n            two_s -= 1\n            four_s += 1\n        elif d[l] % 2 == 0:\n            two_s += 1\n    else:\n        d[l] -= 1\n        if (d[l] + 1) % 4 == 0:\n            four_s -= 1\n            two_s += 1\n        elif (d[l] + 1) % 2 == 0:\n            two_s -= 1\n    if four_s >= 2 or (four_s >= 1 and two_s >= 2):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\narr = [0] * (10 ** 5 + 1)\nfor i in a:\n    arr[i] += 1\nsum2 = 0\nsum4 = 0\nfor i in arr:\n    sum2 += i // 2\n    sum4 += i // 4\nfor _ in range(q):\n    (op, num) = input().split()\n    num = int(num)\n    sum2 -= arr[num] // 2\n    sum4 -= arr[num] // 4\n    if op == '-':\n        arr[num] -= 1\n    else:\n        arr[num] += 1\n    sum2 += arr[num] // 2\n    sum4 += arr[num] // 4\n    if sum4 >= 1 and sum2 >= 4:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in l:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\nfours = 0\ntwos = 0\nfor i in d.values():\n    if i >= 4:\n        fours += i // 4\n        twos += i % 4 // 2\n    elif i >= 2:\n        twos += 1\ne = int(input())\nfor i in range(e):\n    [m, p] = input().split()\n    p = int(p)\n    if m == '+':\n        if p in d:\n            if d[p] == 1:\n                twos += 1\n            elif d[p] == 3:\n                fours += 1\n                twos -= 1\n            elif d[p] > 4 and d[p] % 4 == 3:\n                fours += 1\n                twos -= 1\n            elif d[p] > 4 and d[p] % 2 == 1:\n                twos += 1\n            d[p] += 1\n        else:\n            d[p] = 1\n    else:\n        if d[p] > 5 and d[p] % 4 == 0:\n            fours -= 1\n            twos += 1\n        elif d[p] > 5 and d[p] % 2 == 0:\n            twos -= 1\n        elif d[p] == 4:\n            fours -= 1\n            twos += 1\n        elif d[p] == 2:\n            twos -= 1\n        d[p] -= 1\n    if fours > 0 and 2 * (fours - 1) + twos >= 2:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\ns = [int(x) for x in input().split()]\npos = [0] * 100005\n(c4, c2) = (0, 0)\nfor i in range(len(s)):\n    pos[s[i]] += 1\n    if pos[s[i]] % 4 == 0:\n        c4 += 1\n        c2 -= 1\n    elif pos[s[i]] % 2 == 0:\n        c2 += 1\nfor _ in range(int(input())):\n    L = input().split()\n    (h1, h2) = (str(L[0]), int(L[1]))\n    if h1 == '+':\n        pos[h2] += 1\n        tt = pos[h2]\n        if tt % 4 == 0:\n            c4 += 1\n            c2 -= 1\n        elif tt % 2 == 0:\n            c2 += 1\n    else:\n        tt = pos[h2]\n        if tt % 4 == 0:\n            c4 -= 1\n            c2 += 1\n        elif tt % 2 == 0:\n            c2 -= 1\n        pos[h2] -= 1\n    print('YES' if c4 > 1 or (c4 == 1 and c2 > 1) else 'NO')", "n = int(input())\nl = [int(x) for x in input().split()]\nm = int(input())\ndici = {}\nsq = 0\nrect = 0\nfor i in range(n):\n    if l[i] not in dici:\n        dici[l[i]] = 1\n    else:\n        dici[l[i]] += 1\n        t = dici[l[i]]\n        if t == 2:\n            rect += 1\n        elif t == 4:\n            sq += 1\n            rect -= 1\n        elif t == 6:\n            rect += 1\n        elif t == 8:\n            rect += 1\nfor i in range(m):\n    st = input()\n    if st[0] == '+':\n        if int(st[2:]) not in dici:\n            dici[int(st[2:])] = 1\n        else:\n            dici[int(st[2:])] += 1\n            j = dici[int(st[2:])]\n            if j == 2:\n                rect += 1\n            elif j == 4:\n                rect -= 1\n                sq += 1\n            elif j == 6:\n                rect += 1\n            elif j == 8:\n                rect += 1\n    else:\n        dici[int(st[2:])] -= 1\n        j = dici[int(st[2:])]\n        if j == 1:\n            rect -= 1\n        elif j == 3:\n            sq -= 1\n            rect += 1\n        elif j == 5:\n            rect -= 1\n        elif j == 7:\n            rect -= 1\n    if sq > 1:\n        print('YES')\n    elif sq == 1 and rect >= 2:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = [int(x) for x in input().split()]\nq = int(input())\nd = {}\nn2 = n4 = 0\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n    if d[i] % 2 == 0:\n        n2 += 1\n    if d[i] == 4:\n        n4 += 1\nwhile q:\n    b1 = input().split()\n    ch = b1[0]\n    x = int(b1[1])\n    if ch == '+':\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n        if d[x] % 2 == 0:\n            n2 += 1\n        if d[x] == 4:\n            n4 += 1\n    else:\n        d[x] -= 1\n        if d[x] % 2 != 0:\n            n2 -= 1\n        if d[x] == 3:\n            n4 -= 1\n    if n4 > 0 and n2 >= 4:\n        print('YES')\n    else:\n        print('NO')\n    q -= 1", "from collections import defaultdict\nt = int(input())\na = [int(x) for x in input().split()]\nsqr = 0\nrec = 0\nsqrec = 0\nd = defaultdict(lambda : 0)\nfor i in a:\n    d[i] += 1\n    if d[i] % 2 == 0:\n        rec += 1\n    if d[i] % 4 == 0:\n        sqr += 1\nfor _ in range(int(input())):\n    (exp, l) = input().split()\n    l = int(l)\n    if exp == '+':\n        d[l] += 1\n        if d[l] % 2 == 0:\n            rec += 1\n        if d[l] % 4 == 0:\n            sqr += 1\n    else:\n        d[l] -= 1\n        if d[l] % 2 != 0:\n            rec -= 1\n        if d[l] % 4 == 3:\n            sqr -= 1\n    if sqr >= 1 and rec >= 4:\n        print('YES')\n    else:\n        print('NO')", "def check1(dpp):\n    if dpp[8] >= 1 or dpp[4] >= 2:\n        return 'YES'\n    elif dpp[6] >= 1 and dpp[2] >= 2:\n        return 'YES'\n    elif dpp[4] >= 1 and dpp[2] >= 3:\n        return 'YES'\n    else:\n        return 'NO'\nn = int(input())\ndp = [0] * 1000000\ndpp = [0] * (2 * 1000000)\narr = list(map(int, input().split()))\nfor i in arr:\n    dp[i] += 1\n    dpp[dp[i]] += 1\nfor _ in range(int(input())):\n    (a, b) = input().split()\n    if a == '+':\n        i = int(b)\n        dp[i] += 1\n        dpp[dp[i]] += 1\n        print(check1(dpp))\n    if a == '-':\n        i = int(b)\n        dpp[dp[i]] -= 1\n        dp[i] -= 1\n        print(check1(dpp))", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\nl = [0 for i in range(10 ** 5 + 1)]\ncnt = [0 for i in range(10 ** 5 + 1)]\nfor i in a:\n    i = int(i)\n    l[i] += 1\n    cnt[l[i]] += 1\nfor _ in range(q):\n    (sign, num) = input().split()\n    num = int(num)\n    f = 0\n    if sign == '+':\n        l[num] += 1\n        cnt[l[num]] += 1\n    else:\n        cnt[l[num]] -= 1\n        l[num] -= 1\n    if cnt[8] > 0:\n        f = 1\n    elif cnt[4] >= 2:\n        f = 1\n    elif cnt[4] > 0 and cnt[2] >= 3:\n        f = 1\n    elif cnt[6] > 0 and cnt[2] >= 2:\n        f = 1\n    if f:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nar = list(map(int, input().split()))\ndic = [0] * (10 ** 5 + 5)\ncnt = [0] * (10 ** 5 + 5)\nfor i in ar:\n    dic[i] += 1\n    cnt[dic[i] - 1] += 1\nq = int(input())\nwhile q > 0:\n    s = input().split(' ')\n    x = int(s[1])\n    if s[0] == '+':\n        dic[x] += 1\n        cnt[dic[x] - 1] += 1\n    else:\n        cnt[dic[x] - 1] -= 1\n        dic[x] -= 1\n    if cnt[7] > 0 or cnt[3] >= 2 or (cnt[5] > 0 and cnt[1] >= 2) or (cnt[3] > 0 and cnt[1] >= 3):\n        print('YES')\n    else:\n        print('NO')\n    q -= 1", "from collections import Counter\nn = int(input())\nw = [int(k) for k in input().split()]\nq = int(input())\n(x, y) = (0, 0)\nc = Counter(w)\nfor j in c.keys():\n    if c[j] >= 4:\n        x += 1\n        y += (c[j] - 4) // 2\n    if 2 <= c[j] < 4:\n        y += 1\nfor i in range(q):\n    (a, b) = input().split()\n    b = int(b)\n    if a == '+':\n        c[b] += 1\n        if c[b] == 4:\n            x += 1\n            y -= 1\n        if c[b] == 2:\n            y += 1\n        if c[b] % 2 == 0 and c[b] > 4:\n            y += 1\n    else:\n        c[b] -= 1\n        if c[b] == 1:\n            y -= 1\n        if c[b] == 3:\n            x -= 1\n            y += 1\n        if c[b] % 2 == 1 and c[b] > 4:\n            y -= 1\n    if x >= 2 or (x == 1 and y >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nii = int(input())\na = list(map(int, input().split()))\nco = dict(Counter(a))\nl = co.values()\n(ei, fo, tw, si) = (0, 0, 0, 0)\nfor kk in l:\n    if kk > 7:\n        ei += 1\n        si += 1\n        fo += 1\n        tw += 1\n    elif kk > 5:\n        si += 1\n        fo += 1\n        tw += 1\n    elif kk > 3:\n        fo += 1\n        tw += 1\n    elif kk > 1:\n        tw += 1\nfor jj in range(int(input())):\n    q = input()\n    s = q[0]\n    n = int(q[1:])\n    if s == '+':\n        try:\n            co[n] += 1\n            if co[n] == 8:\n                ei += 1\n            elif co[n] == 6:\n                si += 1\n            elif co[n] == 4:\n                fo += 1\n            elif co[n] == 2:\n                tw += 1\n        except:\n            co[n] = 1\n    else:\n        co[n] -= 1\n        if co[n] == 7:\n            ei -= 1\n        elif co[n] == 5:\n            si -= 1\n        elif co[n] == 3:\n            fo -= 1\n        elif co[n] == 1:\n            tw -= 1\n    if ei == 1 or fo >= 2 or (si >= 1 and tw >= 2) or (fo >= 1 and tw >= 3):\n        print('YES')\n    else:\n        print('NO')", "def count(arr, aaa, bbb, ccc, ddd):\n    for kk in arr:\n        if kk >= 8:\n            aaa += 1\n            ddd += 1\n            bbb += 1\n            ccc += 1\n        elif kk >= 6:\n            ddd += 1\n            bbb += 1\n            ccc += 1\n        elif kk >= 4:\n            bbb += 1\n            ccc += 1\n        elif kk >= 2:\n            ccc += 1\n    return (aaa, bbb, ccc, ddd)\nfrom collections import Counter\nn = int(input())\na = list(map(int, input().split()))\ndic = dict(Counter(a))\n(aa, bb, cc, dd) = count(dic.values(), 0, 0, 0, 0)\nt = int(input())\nwhile t:\n    t -= 1\n    y = input()\n    (ads, x) = (y[0], int(y[1:]))\n    if ads == '-':\n        dic[x] -= 1\n        if dic[x] == 7:\n            aa -= 1\n        elif dic[x] == 5:\n            dd -= 1\n        elif dic[x] == 3:\n            bb -= 1\n        elif dic[x] == 1:\n            cc -= 1\n    elif x in dic.keys():\n        dic[x] += 1\n        if dic[x] == 8:\n            aa += 1\n        elif dic[x] == 6:\n            dd += 1\n        elif dic[x] == 4:\n            bb += 1\n        elif dic[x] == 2:\n            cc += 1\n    else:\n        dic[x] = 1\n    if aa == 1 or (dd >= 1 and cc >= 2) or (bb >= 1 and cc >= 3) or (bb >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\ninput()\ndict = defaultdict(int)\nrect = 0\nsqr = 0\nfor item in input().split():\n    dict[item] += 1\n    if dict[item] % 4 == 0:\n        sqr += 1\n        rect -= 1\n    elif dict[item] % 4 == 2:\n        rect += 1\nfor _ in range(int(input())):\n    (a, b) = input().split()\n    sqr -= dict[b] // 4\n    if dict[b] % 4 > 1:\n        rect -= 1\n    if a == '+':\n        dict[b] += 1\n    else:\n        dict[b] -= 1\n    sqr += dict[b] // 4\n    if dict[b] % 4 > 1:\n        rect += 1\n    if sqr > 1:\n        print('YES')\n    elif sqr > 0 and rect > 1:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nlis = list(map(int, input().split()))\nf = {}\nff = {}\nfor i in range(100000 + 5):\n    f[i] = 0\n    ff[i] = 0\nfor i in lis:\n    if i not in f:\n        f[i] = 1\n        if f[i] not in ff:\n            ff[f[i]] = 1\n        else:\n            ff[f[i]] += 1\n    else:\n        f[i] += 1\n        if f[i] not in ff:\n            ff[f[i]] = 1\n        else:\n            ff[f[i]] += 1\nq = int(input())\nflag = 0\nfor gamesense in range(q):\n    (c, j) = input().split()\n    j = int(j)\n    if c == '+':\n        f[j] += 1\n        ff[f[j]] += 1\n    else:\n        ff[f[j]] -= 1\n        f[j] -= 1\n    if ff[4] > 1 or (ff[4] > 0 and ff[2] > 2) or (ff[6] > 0 and ff[2] > 1) or (ff[8] > 0):\n        print('YES')\n        flag = 1\n        continue\n    print('NO')", "n = int(input())\na = [0] * 1000001\nc = [0] * 1000001\nfor i in input().split():\n    i = int(i)\n    a[i] += 1\n    c[a[i]] += 1\nfor _ in range(int(input())):\n    j = input().split()\n    if j[0] == '+':\n        a[int(j[1])] += 1\n        c[a[int(j[1])]] += 1\n    elif j[0] == '-':\n        c[a[int(j[1])]] -= 1\n        a[int(j[1])] -= 1\n    if (c[4] > 1 or c[8] >= 1) or (c[2] > 1 and c[6] >= 1) or (c[4] >= 1 and c[2] >= 3):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nhashmap = {}\ncount = {}\nfor i in range(1, 100000):\n    count[i] = 0\nfor i in range(n):\n    if a[i] in hashmap:\n        hashmap[a[i]] += 1\n        count[hashmap[a[i]]] += 1\n    if a[i] not in hashmap:\n        hashmap[a[i]] = 1\n        count[hashmap[a[i]]] += 1\nfor item in [0] * int(input()):\n    (b, c) = input().split()\n    c = int(c)\n    if b == '+':\n        if c in hashmap:\n            hashmap[c] += 1\n            count[hashmap[c]] += 1\n        if c not in hashmap:\n            hashmap[c] = 1\n            count[hashmap[c]] += 1\n    if b == '-':\n        count[hashmap[c]] -= 1\n        hashmap[c] -= 1\n    if count[8] > 0 or count[4] >= 2 or (count[6] > 0 and count[2] >= 2) or (count[4] > 0 and count[2] >= 3):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nA = list(map(int, input().split()))\nk = []\ncnt = [0] * 10 ** 6\n(c2, c4) = (0, 0)\nfor i in range(n):\n    x = A[i]\n    c2 -= cnt[x] // 2\n    c4 -= cnt[x] // 4\n    cnt[x] += 1\n    c2 += cnt[x] // 2\n    c4 += cnt[x] // 4\nfor i in range(int(input())):\n    (typ, x) = map(str, input().split())\n    x = int(x)\n    c2 -= cnt[x] // 2\n    c4 -= cnt[x] // 4\n    if typ == '+':\n        cnt[x] += 1\n    else:\n        cnt[x] -= 1\n    c2 += cnt[x] // 2\n    c4 += cnt[x] // 4\n    if c4 >= 1 and c2 >= 4:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nt = int(input())\nl = list(map(int, input().split()))\nq = int(input())\ncnt = defaultdict()\n(two, four, six, eight) = (0, 0, 0, 0)\nfor i in l:\n    if i not in cnt:\n        cnt[i] = 0\n    cnt[i] += 1\nfor i in cnt.keys():\n    four += cnt[i] // 4\n    two += cnt[i] // 2\nfor _ in range(q):\n    (c, i) = input().split()\n    i = int(i)\n    if c == '+':\n        if i not in cnt:\n            cnt[i] = 0\n        cnt[i] += 1\n        if cnt[i] % 4 == 0:\n            four += 1\n        if cnt[i] % 2 == 0:\n            two += 1\n    else:\n        if cnt[i] % 4 == 0:\n            four -= 1\n        if cnt[i] % 2 == 0:\n            two -= 1\n        cnt[i] -= 1\n    if four >= 1 and two >= 4:\n        print('YES')\n    else:\n        print('NO')", "import io, os\nfrom collections import deque\nimport bisect\nRL = lambda : list(map(int, input().split(' ')))\nn = int(input())\nl = RL()\ndic = [0] * (10 ** 5 + 1)\nfor i in range(n):\n    dic[l[i]] += 1\ntwos = 0\nfours = 0\nfor i in range(10 ** 5 + 1):\n    twos += dic[i] // 2\n    fours += dic[i] // 4\nq = int(input())\nfor i in range(q):\n    s = input()\n    t = s[0]\n    num = int(s[1:])\n    if t == '+':\n        if dic[num] // 4 != (dic[num] + 1) // 4:\n            fours += 1\n        if dic[num] % 2:\n            twos += 1\n        dic[num] += 1\n    else:\n        if dic[num] // 4 != (dic[num] - 1) // 4:\n            fours -= 1\n        if dic[num] % 2 == 0:\n            twos -= 1\n        dic[num] -= 1\n    if fours > 0 and twos - 2 >= 2:\n        print('YES')\n    else:\n        print('NO')", "am = int(input())\narr = list(map(int, input().split()))\nn = int(input())\nhave = [0] * 100010\nfor i in range(am):\n    have[arr[i]] += 1\nhaveFour = 0\nhaveTwo = 0\nfor i in range(len(have)):\n    haveFour += have[i] // 4\n    haveTwo += have[i] % 4 // 2\nfor i in range(n):\n    (a, b) = list(input().split())\n    b = int(b)\n    if a == '+':\n        have[b] += 1\n        if have[b] % 4 == 0:\n            haveFour += 1\n            haveTwo -= 1\n        elif have[b] % 2 == 0:\n            haveTwo += 1\n    else:\n        have[b] -= 1\n        if have[b] % 4 == 3:\n            haveFour -= 1\n            haveTwo += 1\n        elif have[b] % 2 == 1:\n            haveTwo -= 1\n    if haveFour >= 1 and haveTwo >= 2 or haveFour >= 2:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nn = int(input())\nlst = list(map(int, input().split()))\ndic = defaultdict(int)\ncounter2 = 0\ncounter4 = 0\nfor i in lst:\n    dic[i] += 1\nfor i in dic.values():\n    if i >= 8:\n        counter2 += 2\n        counter4 += 1\n    elif i >= 6:\n        counter2 += 1\n        counter4 += 1\n    elif i >= 4:\n        counter4 += 1\n    elif i >= 2:\n        counter2 += 1\nq = int(input())\nfor i in range(q):\n    s = input()\n    sign = s[0]\n    dig = int(s[1:])\n    if dic[dig] >= 8:\n        counter2 -= 2\n        counter4 -= 1\n    elif dic[dig] >= 6:\n        counter2 -= 1\n        counter4 -= 1\n    elif dic[dig] >= 4:\n        counter4 -= 1\n    elif dic[dig] >= 2:\n        counter2 -= 1\n    if sign == '-':\n        dic[dig] -= 1\n    else:\n        dic[dig] += 1\n    if dic[dig] >= 8:\n        counter2 += 2\n        counter4 += 1\n    elif dic[dig] >= 6:\n        counter2 += 1\n        counter4 += 1\n    elif dic[dig] >= 4:\n        counter4 += 1\n    elif dic[dig] >= 2:\n        counter2 += 1\n    if counter4 >= 1 and counter2 >= 2 or counter4 >= 2:\n        print('YES')\n    else:\n        print('NO')", "import collections\nn = int(input())\nnum = list(map(int, input().split()))\nk = collections.defaultdict(int)\nfor i in num:\n    k[i] += 1\ncount = 0\ntwo = 0\nfor i in k:\n    count += k[i] // 4\n    mod = k[i] % 4\n    two += mod // 2\nfor i in range(int(input())):\n    (o, v) = input().split()\n    v = int(v)\n    if o == '-':\n        k[v] -= 1\n        if k[v] % 4 == 3:\n            count -= 1\n            two += 1\n        elif k[v] % 4 == 1:\n            two -= 1\n    else:\n        k[v] += 1\n        if k[v] % 4 == 0:\n            two -= 1\n            count += 1\n        elif k[v] % 2 == 0:\n            two += 1\n    if count >= 2 or (count >= 1 and two >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport math\nn = int(input())\na = list(map(int, input().rstrip().split(' ')))\nq = int(input())\nd = defaultdict(lambda : 0)\nfor ele in a:\n    d[ele] += 1\ncount4 = 0\ncount2 = 0\nfor (key, value) in d.items():\n    count4 += value // 4\n    value = value % 4\n    count2 += value // 2\nfor _ in range(q):\n    (sign, num) = input().rstrip().split(' ')\n    num = int(num)\n    val = d[num]\n    if sign == '+':\n        if (val + 1) % 4 == 0:\n            count4 += 1\n            count2 -= 1\n        elif (val + 1) % 2 == 0:\n            count2 += 1\n        d[num] += 1\n    else:\n        if val % 4 == 0:\n            count4 -= 1\n            count2 += 1\n        elif val % 2 == 0:\n            count2 -= 1\n        d[num] -= 1\n    if count4 >= 2 or (count4 == 1 and count2 >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())\narr1 = [0] * (10 ** 5 + 1)\narr2 = [0] * (10 ** 5 + 1)\nd = defaultdict(set)\nfor i in a:\n    arr1[i] += 1\n    if arr1[i] >= 4:\n        d[4].add(i)\n        d[2].discard(i)\n    elif arr1[i] >= 2:\n        d[2].add(i)\nfor _ in range(q):\n    (s, l) = input().split()\n    l = int(l)\n    if s == '+':\n        if arr1[l] == 3:\n            d[2].discard(l)\n            d[4].add(l)\n        elif arr1[l] == 1:\n            d[2].add(l)\n        arr1[l] += 1\n    else:\n        if arr1[l] == 2:\n            d[2].discard(l)\n        elif arr1[l] == 4:\n            d[2].add(l)\n            d[4].discard(l)\n        arr1[l] -= 1\n    if len(d[4]) >= 2 or (len(d[4]) == 1 and len(d[2]) >= 2):\n        print('YES')\n    elif len(d[4]) == 1:\n        x = d[4].pop()\n        if arr1[x] >= 6 and len(d[2]) >= 1 or arr1[x] >= 8:\n            print('YES')\n        else:\n            print('NO')\n        d[4].add(x)\n    else:\n        print('NO')", "from collections import Counter\nn = int(input())\na = [int(s) for s in input().split(' ')]\nq = int(input())\nsides = 0\ncounter = Counter(a)\nsquare = 0\nfor count in counter:\n    sides += counter[count] - counter[count] % 2\n    square += counter[count] // 4\nfor _ in range(q):\n    event = input().split(' ')\n    count = int(event[1])\n    if event[0] == '+':\n        counter[count] += 1\n        if counter[count] % 2 == 0:\n            sides += 2\n        if counter[count] % 4 == 0:\n            square += 1\n    else:\n        counter[count] -= 1\n        if counter[count] % 2 == 1:\n            sides -= 2\n        if counter[count] % 4 == 3:\n            square -= 1\n    if sides >= 8 and square > 0:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nl = list(map(int, input().split()))\nfour = 0\ntwo = 0\ncnt = {}\nfor x in l:\n    if x not in cnt:\n        cnt[x] = 1\n    else:\n        cnt[x] += 1\nfor (k, v) in cnt.items():\n    four += v // 4\n    two += v % 4 // 2\nq = int(input())\nd = cnt.copy()\nfor i in range(q):\n    (s, p) = input().split()\n    p = int(p)\n    if s == '+':\n        if p not in d:\n            cnt[p] = d[p] = 1\n        else:\n            cnt[p] = d[p]\n            d[p] += 1\n    else:\n        cnt[p] = d[p]\n        d[p] -= 1\n    four += d[p] // 4 - cnt[p] // 4\n    two += d[p] % 4 // 2 - cnt[p] % 4 // 2\n    if four >= 2 or (four == 1 and two >= 2):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n(sq, rc) = (0, 0)\nfor i in d:\n    sq += d[i] // 4\n    if d[i] % 4 >= 2:\n        rc += 1\nfor i in range(q):\n    (x, y) = input().split()\n    y = int(y)\n    if x == '+' and y not in d:\n        d[y] = 1\n    else:\n        sq -= d[y] // 4\n        if d[y] % 4 >= 2:\n            rc -= 1\n        if x == '+':\n            d[y] += 1\n        else:\n            d[y] -= 1\n        sq += d[y] // 4\n        if d[y] % 4 >= 2:\n            rc += 1\n    if sq >= 2:\n        print('YES')\n    elif sq == 1 and rc >= 2:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\ndd = defaultdict(int)\nn = int(input())\nls = list(map(int, input().split()))\nfor item in ls:\n    dd[item] += 1\nn = int(input())\ns2 = 0\ns4 = 0\nfor item in dd:\n    s2 += dd[item] // 2\n    s4 += dd[item] // 4\nfor _ in range(n):\n    (op, var) = input().split()\n    var = int(var)\n    if op == '+':\n        s4 -= dd[var] // 4\n        s2 -= dd[var] // 2\n        dd[var] += 1\n        s2 += dd[var] // 2\n        s4 += dd[var] // 4\n    else:\n        s4 -= dd[var] // 4\n        s2 -= dd[var] // 2\n        dd[var] -= 1\n        s2 += dd[var] // 2\n        s4 += dd[var] // 4\n    if s2 >= 4 and s4 >= 1:\n        print('YES')\n    else:\n        print('NO')", "for t in range(1):\n    n = int(input())\n    planks = list(map(int, input().split()))\n    freq = [0] * 10 ** 5\n    for i in range(n):\n        val = planks[i]\n        freq[val - 1] += 1\n    count2 = 0\n    count4 = 0\n    for i in range(len(freq)):\n        val = freq[i]\n        count4 += val // 4\n        count2 += val // 2\n    for i in range(int(input())):\n        (x, y) = input().split()\n        y = int(y)\n        prev_value_c2 = freq[y - 1] // 2\n        prev_value_c4 = freq[y - 1] // 4\n        if x == '+':\n            freq[y - 1] += 1\n        else:\n            freq[y - 1] -= 1\n        curr_va_c2 = freq[y - 1] // 2\n        curr_va_c4 = freq[y - 1] // 4\n        count2 += curr_va_c2 - prev_value_c2\n        count4 += curr_va_c4 - prev_value_c4\n        if count2 >= 4 and count4 >= 1:\n            print('YES')\n        else:\n            print('NO')", "import sys, math, heapq, collections, itertools, bisect\nsys.setrecursionlimit(101000)\nn = int(input())\na = list(map(int, input().split()))\nf = [0] * (10 ** 5 + 5)\nf2 = [0]\nf4 = [0]\nf6 = [0]\nf8 = [0]\n\ndef _set(s, x):\n    if s == '+':\n        f[x] += 1\n        if f[x] == 2:\n            f2[0] += 1\n        elif f[x] == 4:\n            f4[0] += 1\n        elif f[x] == 6:\n            f6[0] += 1\n        elif f[x] == 8:\n            f8[0] += 1\n    else:\n        f[x] -= 1\n        if f[x] == 7:\n            f8[0] -= 1\n        elif f[x] == 5:\n            f6[0] -= 1\n        elif f[x] == 3:\n            f4[0] -= 1\n        elif f[x] == 1:\n            f2[0] -= 1\n\ndef _can():\n    if f8[0] > 0:\n        return True\n    if f6[0] > 1 or f4[0] > 1:\n        return True\n    if f6[0] == 1 and f2[0] > 1:\n        return True\n    if f4[0] == 1 and f2[0] > 2:\n        return True\n    return False\nfor x in a:\n    _set('+', x)\nq = int(input())\nfor _ in range(q):\n    (s, x) = input().split()\n    _set(s, int(x))\n    print('YES' if _can() else 'NO')", "t = 1\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().rstrip().split()))\n    freq = {}\n    for i in a:\n        if i not in freq.keys():\n            freq[i] = 0\n        freq[i] += 1\n    (sdg4, sdg2) = (0, 0)\n    check = False\n    for val in freq.values():\n        sdg4 += val // 4\n        sdg2 += val // 2\n    Q = int(input())\n    for q in range(Q):\n        s = list(input().rstrip().split())\n        num = int(s[1])\n        if s[0] == '+':\n            if num not in freq:\n                freq[num] = 1\n            else:\n                if freq[num] % 4 == 3:\n                    sdg4 += 1\n                if freq[num] % 2 == 1:\n                    sdg2 += 1\n                freq[num] += 1\n            n += 1\n        else:\n            if freq[num] % 2 == 0:\n                sdg2 -= 1\n            if freq[num] % 4 == 0:\n                sdg4 -= 1\n            freq[num] -= 1\n            n -= 1\n        if n < 8:\n            print('NO')\n            continue\n        if sdg2 >= 4:\n            chk = True\n        else:\n            chk = False\n        if chk and sdg4 > 0:\n            print('YES')\n        else:\n            print('NO')", "from collections import defaultdict\nn = int(input())\nlst = list(map(int, input().split()))\ndic = defaultdict(int)\ncounter2 = 0\ncounter4 = 0\nfor i in lst:\n    dic[i] += 1\nfor i in dic.values():\n    if i >= 8:\n        counter2 += 2\n        counter4 += 1\n    elif i >= 6:\n        counter2 += 1\n        counter4 += 1\n    elif i >= 4:\n        counter4 += 1\n    elif i >= 2:\n        counter2 += 1\nq = int(input())\nfor i in range(q):\n    s = input()\n    sign = s[0]\n    dig = int(s[1:])\n    if dic[dig] >= 8:\n        counter2 -= 2\n        counter4 -= 1\n    elif dic[dig] >= 6:\n        counter2 -= 1\n        counter4 -= 1\n    elif dic[dig] >= 4:\n        counter4 -= 1\n    elif dic[dig] >= 2:\n        counter2 -= 1\n    if sign == '-':\n        dic[dig] -= 1\n    else:\n        dic[dig] += 1\n    if dic[dig] >= 8:\n        counter2 += 2\n        counter4 += 1\n    elif dic[dig] >= 6:\n        counter2 += 1\n        counter4 += 1\n    elif dic[dig] >= 4:\n        counter4 += 1\n    elif dic[dig] >= 2:\n        counter2 += 1\n    if counter4 >= 1 and counter2 >= 2 or counter4 >= 2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in l:\n    if d.get(i) == None:\n        d[i] = [1, 0, False]\n    else:\n        d[i][0] += 1\n        d[i][1] = d[i][0] // 2\n        if d[i][0] >= 4:\n            d[i][2] = True\nans = 0\nisans = 0\nfor i in d:\n    ans += d[i][1]\n    if d[i][2]:\n        isans += 1\nx = int(input())\ncount = t\nfor i in range(x):\n    (s, a) = input().split()\n    a = int(a)\n    if s == '+':\n        if d.get(a) == None:\n            d[a] = [1, 0, False]\n        else:\n            d[a][0] += 1\n            if d[a][0] % 2 == 0:\n                d[a][1] += 1\n                ans += 1\n            if d[a][0] >= 4 and (not d[a][2]):\n                d[a][2] = True\n                isans += 1\n        count += 1\n    else:\n        count -= 1\n        d[a][0] -= 1\n        if d[a][0] % 2 != 0:\n            d[a][1] -= 1\n            ans -= 1\n        if d[a][0] < 4 and d[a][2]:\n            d[a][2] = False\n            isans -= 1\n    if count < 8:\n        print('NO')\n        continue\n    if ans >= 4 and isans > 0:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nn = int(input())\narr = [int(x) for x in input().split()]\nsq = 0\nrec = 0\nd = defaultdict(lambda : 0)\nfor i in arr:\n    d[i] += 1\n    if d[i] % 2 == 0:\n        rec += 1\n    if d[i] % 4 == 0:\n        sq += 1\nfor _ in range(int(input())):\n    l = [x for x in input().split()]\n    p = int(l[1])\n    if l[0] == '+':\n        d[p] += 1\n        if d[p] % 2 == 0:\n            rec += 1\n        if d[p] % 4 == 0:\n            sq += 1\n    else:\n        d[p] -= 1\n        if d[p] % 2 != 0:\n            rec -= 1\n        if d[p] % 4 == 3:\n            sq -= 1\n    if sq >= 1 and rec >= 4:\n        print('YES')\n    else:\n        print('NO')", "a = [0] * (10 ** 5 + 1)\nn = int(input())\nnum2 = 0\nnum4 = 0\nm = list(map(int, input().split()))\nfor i in range(n):\n    a[m[i]] += 1\n    if a[m[i]] % 4 == 0:\n        num4 += 1\n    if a[m[i]] % 2 == 0:\n        num2 += 1\nq = int(input())\nfor i in range(q):\n    (op, x) = map(str, input().split())\n    x = int(x)\n    if op == '+':\n        a[x] += 1\n        if a[x] % 4 == 0:\n            num4 += 1\n        if a[x] % 2 == 0:\n            num2 += 1\n    if op == '-':\n        a[x] -= 1\n        if a[x] % 4 == 3:\n            num4 -= 1\n        if a[x] % 2 == 1:\n            num2 -= 1\n    if num4 >= 1 and num2 >= 4:\n        print('YES')\n    else:\n        print('NO')", "mxn = 10 ** 5 + 5\nn = int(input())\narr = [0] * mxn\nnums = list(map(int, input().split()))\nsm2 = 0\nsm4 = 0\nfor num in nums:\n    sm2 -= arr[num] // 2\n    sm4 -= arr[num] // 4\n    arr[num] += 1\n    sm2 += arr[num] // 2\n    sm4 += arr[num] // 4\nfor q in range(int(input())):\n    s = input().split()\n    num = int(s[1])\n    sm2 -= arr[num] // 2\n    sm4 -= arr[num] // 4\n    if s[0] == '+':\n        arr[num] += 1\n    else:\n        arr[num] -= 1\n    sm2 += arr[num] // 2\n    sm4 += arr[num] // 4\n    if sm2 >= 4 and sm4 >= 1:\n        print('YES')\n    else:\n        print('NO')", "import collections\n(a, b, c, d) = (0, 0, 0, 0)\nn = int(input())\nmaps = collections.defaultdict(int)\nnums = list(map(int, input().split()))\nfor i in nums:\n    maps[i] += 1\nq = int(input())\nfor v in maps.values():\n    if v == 2 or v == 3:\n        a += 1\n    if v == 4 or v == 5:\n        b += 1\n    if v == 6 or v == 7:\n        c += 1\n    if v >= 8:\n        d += 1\nfor i in range(q):\n    info = input().split()\n    (flag, num) = (info[0], int(info[1]))\n    if flag == '+':\n        maps[num] += 1\n        if maps[num] == 2:\n            a += 1\n        if maps[num] == 4:\n            a -= 1\n            b += 1\n        if maps[num] == 6:\n            b -= 1\n            c += 1\n        if maps[num] == 8:\n            c -= 1\n            d += 1\n    else:\n        if maps[num] == 2:\n            a -= 1\n        if maps[num] == 4:\n            a += 1\n            b -= 1\n        if maps[num] == 6:\n            b += 1\n            c -= 1\n        if maps[num] == 8:\n            c += 1\n            d -= 1\n        maps[num] -= 1\n    if d > 0:\n        print('YES')\n        continue\n    if a >= 2 and b >= 1 or (a >= 1 and c >= 1) or (b >= 1 and c >= 1) or (b >= 2) or (c >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nn = int(input())\nav = list(map(int, input().split()))\nd = defaultdict(int)\n(sq, pair) = (0, 0)\nfor i in av:\n    d[i] += 1\nfor i in d:\n    sq += d[i] // 4\n    pair += d[i] // 2\ncases = int(input())\nfor i in range(cases):\n    (c, r) = map(str, input().split())\n    r = int(r)\n    if c == '+':\n        d[r] += 1\n        if d[r] % 4 == 0:\n            sq += 1\n        if d[r] % 2 == 0:\n            pair += 1\n    else:\n        temp = d[r]\n        d[r] -= 1\n        if temp % 4 == 0:\n            sq -= 1\n        if temp % 2 == 0:\n            pair -= 1\n    if sq >= 1 and pair - 2 >= 2:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n(sq, rc) = (0, 0)\nfor i in d:\n    sq += d[i] // 4\n    if d[i] % 4 >= 2:\n        rc += 1\nfor i in range(q):\n    (x, y) = input().split()\n    y = int(y)\n    if x == '+' and y not in d:\n        d[y] = 1\n    else:\n        sq -= d[y] // 4\n        if d[y] % 4 >= 2:\n            rc -= 1\n        if x == '+':\n            d[y] += 1\n        else:\n            d[y] -= 1\n        sq += d[y] // 4\n        if d[y] % 4 >= 2:\n            rc += 1\n    if sq >= 2:\n        print('YES')\n    elif sq == 1 and rc >= 2:\n        print('YES')\n    else:\n        print('NO')", "def add(e):\n    if e in dic:\n        dic[e] += 1\n    else:\n        dic[e] = 1\n    if dic[e] % 4 == 0:\n        return (1, -1)\n    elif dic[e] % 2 == 0:\n        return (0, 1)\n    else:\n        return (0, 0)\n\ndef remove(e):\n    dic[e] -= 1\n    if (dic[e] + 1) % 4 == 0:\n        return (-1, +1)\n    elif (dic[e] + 1) % 2 == 0:\n        return (0, -1)\n    else:\n        return (0, 0)\nn = int(input())\nl = map(int, input().split(' '))\ndic = {}\nfor e in l:\n    add(e)\nsquare = 0\nrec = 0\nfor e in dic:\n    square += dic[e] // 4\n    rec += dic[e] % 4 // 2\nn = int(input())\nfor i in range(n):\n    line = input().split(' ')\n    if line[0] == '+':\n        (a, b) = add(int(line[1]))\n        square += a\n        rec += b\n    else:\n        (a, b) = remove(int(line[1]))\n        square += a\n        rec += b\n    if square >= 2 or (square >= 1 and rec >= 2):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nn = int(input())\na = [int(j) for j in input().split()]\nd = defaultdict(lambda : 0)\nfor i in a:\n    d[i] += 1\nc = 0\nr = 0\nfor i in d:\n    if d[i] >= 4:\n        temp = d[i] // 4\n        r += temp\n        left = d[i] - 4 * (d[i] // 4)\n        if left >= 2:\n            c += 1\n    if d[i] >= 2 and d[i] < 4:\n        c += 1\nq = int(input())\nwhile q > 0:\n    q -= 1\n    s = input()\n    if s[0] == '+':\n        d[int(s[2:])] += 1\n        if d[int(s[2:])] == 2:\n            c += 1\n        elif d[int(s[2:])] % 4 == 0:\n            r += 1\n            c -= 1\n        elif d[int(s[2:])] > 4 and d[int(s[2:])] % 4 == 2:\n            c += 1\n    else:\n        d[int(s[2:])] -= 1\n        if d[int(s[2:])] % 4 == 1:\n            c -= 1\n        elif d[int(s[2:])] % 4 == 3:\n            r -= 1\n            c += 1\n    if r:\n        if r >= 2:\n            print('YES')\n        elif c >= 2:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from collections import Counter\nn = int(input())\nplanks = Counter((int(x) for x in input().split()))\ntengo = [0] * 10\nfor (a, b) in planks.items():\n    if b < 10:\n        tengo[b] += 1\n    else:\n        tengo[9] += 1\nfor i in range(1, 10):\n    tengo[i] += tengo[i - 1]\nfor q in range(int(input())):\n    (a, b) = input().split()\n    b = int(b)\n    if a == '-':\n        planks[b] -= 1\n        if planks[b] < 10:\n            tengo[planks[b]] += 1\n    else:\n        if planks[b] < 10:\n            tengo[planks[b]] -= 1\n        planks[b] += 1\n    if tengo[9] - tengo[7] > 0:\n        print('YES')\n    elif tengo[9] - tengo[5] > 0 and tengo[9] - tengo[1] > 1:\n        print('YES')\n    elif tengo[9] - tengo[3] > 0 and (tengo[9] - tengo[3] > 1 or tengo[9] - tengo[1] > 2):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nb = [0] * 100001\nk = 0\nt = 0\nfor i in a:\n    b[i] += 1\nfor e in b:\n    k = k + e // 2\n    t = t + e // 4\nfor j in range(x):\n    (c, d) = map(str, input().split())\n    d = int(d)\n    k = k - b[d] // 2\n    t = t - b[d] // 4\n    if c == '+':\n        b[d] = b[d] + 1\n    else:\n        b[d] = b[d] - 1\n    k += b[d] // 2\n    t += b[d] // 4\n    if t > 0 and k > 3:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\nc = [0] * 100001\nm2 = set()\nm4 = set()\nm6 = set()\nm8 = set()\nfor i in range(n):\n    k = a[i]\n    c[k] += 1\n    if c[k] == 2:\n        m2.add(k)\n    elif c[k] == 4:\n        m4.add(k)\n    elif c[k] == 6:\n        m6.add(k)\n    elif c[k] == 8:\n        m8.add(k)\nfor i in range(q):\n    (s, b) = input().split()\n    k = int(b)\n    if s == '+':\n        c[k] += 1\n        if c[k] == 2:\n            m2.add(k)\n        elif c[k] == 4:\n            m4.add(k)\n        elif c[k] == 6:\n            m6.add(k)\n        elif c[k] == 8:\n            m8.add(k)\n        n += 1\n    else:\n        n -= 1\n        c[k] -= 1\n        if c[k] == 1:\n            m2.remove(k)\n        elif c[k] == 3:\n            m4.remove(k)\n        elif c[k] == 5:\n            m6.remove(k)\n        elif c[k] == 7:\n            m8.remove(k)\n    if n < 8 or len(m4) == 0:\n        print('NO')\n    elif len(m8) > 0 or (len(m6) > 0 and len(m2) > 1) or len(m4) > 1 or (len(m2) > 2):\n        print('YES')\n    else:\n        print('NO')"]