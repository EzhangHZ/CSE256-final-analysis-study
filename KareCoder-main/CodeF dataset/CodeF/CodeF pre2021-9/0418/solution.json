["def ans(d):\n    n = len(d)\n    d.sort()\n    a = d[n - 1]\n    for j in range(1, n + 1):\n        a += d[j - 1] * (n - 2 * j + 1)\n    return a\nt = int(input())\nfor i in range(t):\n    input()\n    print(ans(list(map(int, input().split()))))", "def main():\n    for i in range(int(input())):\n        (nPastures, times) = (int(input()), sorted(map(int, input().split())))\n        if nPastures < 3:\n            print(0)\n        else:\n            print(minimumCost(nPastures - 1, times))\n\ndef minimumCost(firstFactor, times):\n    return times[-1] - sum(((2 * j - firstFactor) * (times[j] - times[i]) for (i, j) in enumerate(range(firstFactor, firstFactor // 2, -1))))\nmain()", "def solve(A, n):\n    A.sort()\n    sm = 0\n    ans = 0\n    for (i, it) in enumerate(A):\n        ans += sm - i * it\n        sm += it\n    ans += A[-1]\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = solve(A, n)\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, arr):\n    (pos_sum, neg_sum) = (0, 0)\n    for i in range(2, n):\n        pos_sum += arr[i - 2]\n        neg_sum -= (i - 1) * arr[i]\n        neg_sum += pos_sum\n    print(neg_sum)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sorted(int_arr())\n    solve(n, arr)", "def main():\n    for i in range(int(input())):\n        (nPastures, times) = (int(input()), sorted(map(int, input().split())))\n        if nPastures < 3:\n            print(0)\n        else:\n            print(minimumCost(nPastures - 1, times))\n\ndef minimumCost(firstFactor, times):\n    costMin = times[-1]\n    prevFactor = 0\n    if firstFactor % 2:\n        finalFactor = -(-firstFactor // 2)\n        for (i, j) in enumerate(range(firstFactor, finalFactor, -1)):\n            costMin -= (2 * j - firstFactor) * (times[j] - times[i])\n        return costMin - (prevFactor + 2 * finalFactor - firstFactor) * (times[finalFactor] - times[finalFactor - 1])\n    for (i, j) in enumerate(range(firstFactor, firstFactor // 2, -1)):\n        costMin -= (2 * j - firstFactor) * (times[j] - times[i])\n    return costMin\nmain()", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        n = nin()\n        arr = read()\n        arr.sort()\n        ans = arr[-1]\n        x = 0\n        last = 0\n        for i in range(1, n):\n            last -= i * (arr[i] - arr[i - 1])\n            ans += last\n        ans_.append(ans)\nsolve()\nfor i in ans_:\n    print(i)", "def greatGraphs(n, array):\n    cost = 0\n    for x in range(1, n):\n        cost += array[x] - array[x - 1]\n    array.sort()\n    ans = 0\n    l = array[n - 1]\n    res = 0\n    for x in range(1, n):\n        ans = -1 * (array[x] - array[x - 1]) * x + ans\n        res += ans\n    return res + l\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(greatGraphs(n, l))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n == 1:\n        print(0)\n        continue\n    ans = 0\n    s = 0\n    for i in range(1, n):\n        s += (a[i - 1] - a[i]) * i\n        ans += s\n    print(ans + a[-1])", "for g in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    f = 0\n    k = 0\n    for i in range(2, n):\n        k += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += k\n    print(f)", "from itertools import accumulate\n\ndef solve():\n    n = int(input())\n    (*d,) = map(int, input().split())\n    d.sort()\n    ans = 0\n    (*prefix,) = accumulate(d)\n    for i in range(2, n):\n        ans -= d[i] * (i - 1) - prefix[i - 2]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    x = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = [0] * x\n    for i in range(1, x):\n        s[i] = (a[i] - a[i - 1]) * i + s[i - 1]\n    print(-sum(s) + a[-1])", "t = int(input())\n\ndef cost(li: list) -> int:\n    z = 0\n    min_cost = 0\n    for f in range(2, len(li)):\n        z += li[f - 2]\n        min_cost -= li[f] * (f - 1)\n        min_cost += z\n    return min_cost\nfor _ in range(t):\n    n_ = int(input())\n    li = []\n    t = input()\n    li = t.split(' ')\n    li = list(map(int, li))\n    li.sort()\n    print(cost(li))", "import sys\ninput = sys.stdin.readline\n\ndef stup(a):\n    r = 0\n    for i in range(len(a)):\n        for j in range(i + 2, len(a)):\n            r -= a[j] - a[i]\n    return r\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    r = 0\n    for i in range(len(a) - 2):\n        s -= a[i + 1]\n        r -= s - a[i] * (n - i - 2)\n    print(r)\nfor i in range(int(input())):\n    solve()", "def readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    (prev, *d) = sorted(readline())\n    s = 0\n    for (i, curr) in enumerate(d, start=1):\n        (prev, x) = (curr, curr - prev)\n        s -= x * (i * (n - i) - 1)\n    print(s)\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        solve()\nmain()", "def farm(a):\n    ans = 0\n    a.sort()\n    dec = 0\n    for (i, n) in enumerate(a):\n        if i == 0:\n            continue\n        diff = n - a[i - 1]\n        dec += i * diff\n        ans += diff\n        ans -= dec\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    a = [int(a) for a in s.split(' ')]\n    print(farm(a))", "for iters in range(int(input())):\n    n = int(input())\n    num = [int(i) for i in input().split(' ')]\n    num.sort()\n    negative = 0\n    for i in range(0, n):\n        negative += (n - 2 * i - 1) * num[i]\n    negative += num[n - 1]\n    print(negative)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(word) for word in input().split()]\n        a.sort()\n        ans = 0\n        cur = 0\n        for i in range(1, n):\n            cur += (a[i] - a[i - 1]) * i\n            ans -= cur\n        print(ans + a[-1])\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    (val, sm) = (0, 0)\n    for i in range(2, n):\n        sm += d[i - 2]\n        val -= d[i] * (i - 1)\n        val += sm\n    print(val)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    (v, s) = (0, 0)\n    for i in range(2, n):\n        s += a[i - 2]\n        v -= a[i] * (i - 1)\n        v += s\n    print(v)", "def fun(n, l):\n    l.sort()\n    v = 0\n    sum = 0\n    for i in range(2, n):\n        sum = sum + l[i - 2]\n        v = v - l[i] * (i - 1) + sum\n    print(v)\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    fun(n, l)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        d = sorted(list(map(int, input().split())))\n        if n == 1:\n            print(0)\n            continue\n        s = sum(d)\n        m = d[1]\n        f = n - 4\n        k = f + 1\n        r = 0\n        for i in range(2, n):\n            r += k * (d[i] - d[i - 1])\n            k += f\n            f -= 2\n        print(-(s - m) - r)\nmain()", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cost = 0\n    for i in range(1, n):\n        cost += i * (n - i) * (a[i] - a[i - 1])\n    cost *= -1\n    cost += a[n - 1]\n    print(cost)", "def enjoy(n, lst):\n    lst.sort()\n    ans = 0\n    a = 0\n    return yes(n, lst, ans, a)\n\ndef yes(n, lst, ans, a):\n    for i in range(2, n):\n        a += lst[i - 2]\n        ans -= lst[i] * (i - 1)\n        ans += a\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(enjoy(n, lst))", "def readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    (prev, *d) = sorted(readline())\n    s = 0\n    for (i, curr) in enumerate(d, start=1):\n        (prev, x) = (curr, curr - prev)\n        s -= x * (i * (n - i) - 1)\n    print(s)\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    (c, f) = (0, 0)\n    for i in range(2, n):\n        c += a[i - 2]\n        f -= a[i] * (i - 1)\n        f = f + c\n    print(f)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    (v, s) = (0, 0)\n    for i in range(2, n):\n        s += l[i - 2]\n        v -= l[i] * (i - 1)\n        v += s\n    print(v)", "def solve():\n    D.sort()\n    ans = 0\n    for i in range(1, N):\n        left = i\n        right = N - i\n        weight = D[i - 1] - D[i]\n        ans += left * right * weight - weight\n    return ans\ntest_cases = int(input())\nfor test_case in range(test_cases):\n    N = int(input())\n    D = list(map(int, input().split()))\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    ans = d[-1] - d[0]\n    for i in range(n):\n        ans += (n - i - i - 1) * d[i]\n    print(ans)", "def main():\n    n = int(input())\n    for _ in range(n):\n        t = int(input())\n        l = list(map(int, input().split()))\n        l.sort()\n        s = max(l)\n        a = 0\n        for i in range(1, t):\n            s -= i * l[i] - a\n            a += l[i]\n        print(s)\nmain()", "def solve(lt):\n    lt.sort()\n    c = 0\n    for i in range(len(lt)):\n        c += -1 * (lt[i] * i) + (len(lt) - 1 - i) * lt[i]\n    c += lt[-1] - lt[0]\n    return c\nt = int(input())\nfor i in range(t):\n    input()\n    lt = list(map(int, input().split()))\n    print(solve(lt))", "def func1(n, d):\n    d_max = max(d)\n    result = d_max\n    sor = sorted(d)\n    for i in range(1, n):\n        result += (-1 * i + (n - i - 1)) * sor[i]\n    print(result)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        d = list(map(int, input().split()))\n        if n == 1 or n == 2:\n            print(0)\n        else:\n            func1(n, d)\nmain()", "def solve(values):\n    if len(values) == 1:\n        return 0\n    values = sorted(values)\n    result = values[-1]\n    for i in range(len(values) - 1):\n        result -= (values[i + 1] - values[i]) * (i + 1) * (len(values) - i - 1)\n    return result\nt = int(input())\nfor _ in range(t):\n    input()\n    values = list(map(int, input().split()))\n    print(solve(values))", "def solve_pastures(n, arr):\n    arr = sorted(arr)\n    result = 0\n    prev = n - 2\n    for x in range(n - 1):\n        result += (arr[x] - arr[x + 1]) * prev\n        prev += n - (x + 2) - (x + 1)\n    print(result)\nfor _ in range(int(input())):\n    n = int(input())\n    solve_pastures(n, list(map(int, input().split())))", "def main():\n    for i in range(int(input())):\n        (nPastures, times) = (int(input()), sorted(map(int, input().split())))\n        if nPastures < 3:\n            print(0)\n        else:\n            print(minimumCost(nPastures - 1, times))\n\ndef minimumCost(firstFactor, times):\n    costMin = times[-1]\n    prevFactor = 0\n    if firstFactor % 2:\n        finalFactor = -(-firstFactor // 2)\n        for (i, j) in enumerate(range(firstFactor, finalFactor, -1)):\n            prevFactor += 2 * j - firstFactor\n            costMin -= prevFactor * (times[i + 1] - times[i] + times[j] - times[j - 1])\n        return costMin - (prevFactor + 2 * finalFactor - firstFactor) * (times[finalFactor] - times[finalFactor - 1])\n    for (i, j) in enumerate(range(firstFactor, firstFactor // 2, -1)):\n        prevFactor += 2 * j - firstFactor\n        costMin -= prevFactor * (times[i + 1] - times[i] + times[j] - times[j - 1])\n    return costMin\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    f = 0\n    count = 0\n    for i in range(2, n):\n        count += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += count\n    print(f)", "for u in range(int(input())):\n    n = int(input())\n    d = sorted(list(map(int, input().split())))\n    result = d[n - 1]\n    for i in range(1, n):\n        result -= d[i] * i - d[i - 1]\n        d[i] += d[i - 1]\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    f = 0\n    count = 0\n    for i in range(2, n):\n        count += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += count\n    print(f)", "def great_graphs(D):\n    D.sort()\n    sum_ = D[len(D) - 1]\n    neg = [0]\n    for i in range(1, len(D)):\n        neg.append(neg[i - 1] + i * (D[i] - D[i - 1]))\n        sum_ -= neg[i]\n    print(sum_)\nt = int(input())\nD = []\nfor i in range(t):\n    n = int(input())\n    D = [int(i) for i in input().split()][:n]\n    great_graphs(D)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    S = 0\n    v = 0\n    for i in range(2, n):\n        S += a[i - 2]\n        v -= a[i] * (i - 1)\n        v += S\n    print(v)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    k = 0\n    for i in range(n - 1):\n        k += (l[i] - l[i + 1]) * (i + 1) * (n - i - 1)\n    print(l[-1] - abs(k))", "for g in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    f = 0\n    k = 0\n    for i in range(2, n):\n        k += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += k\n    print(f)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    b = []\n    for i in range(1, n):\n        b += [a[i] - a[i - 1]]\n    ans = 0\n    n = len(b)\n    for i in range(n):\n        ans -= (n - i) * (i + 1) * b[i]\n    print(ans + sum(b))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    total = 0\n    for i in range(2, n):\n        total = total + a[i - 2]\n        ans = ans - a[i] * (i - 1)\n        ans = ans + total\n    print(ans)\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    cnt = 0\n    result = 0\n    for i in range(2, n):\n        cnt += l[i - 2]\n        result -= l[i] * (i - 1)\n        result += cnt\n    print(result)", "import sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef solve(N, D):\n    D.sort()\n    B = [D[i + 1] - D[i] for i in range(N - 1)]\n    v = 0\n    for i in range(N - 1):\n        v += (i + 1) * (N - 1 - i) * B[i]\n    return sum(B) - v\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    D = list(map(int, input().split()))\n    ans = solve(N, D)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    tem1 = 0\n    tem2 = 0\n    for i in range(2, n):\n        tem2 += arr[i - 2]\n        tem1 -= arr[i] * (i - 1)\n        tem1 += tem2\n    print(tem1)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (res, s) = (0, 0)\n    for i in range(2, n):\n        s += arr[i - 2]\n        res -= arr[i] * (i - 1)\n        res += s\n    print(res)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    temp = 0\n    for i in range(n - 2):\n        temp += arr[i]\n        ans = ans + temp\n        ans = ans - arr[i + 2] * (i + 1)\n    print(ans)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cost = 0\n    time_diff = 0\n    arr.sort()\n    for i in range(2, n):\n        time_diff += arr[i - 2]\n        cost -= arr[i] * (i - 1)\n        cost += time_diff\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    f = 0\n    count = 0\n    for i in range(2, n):\n        count += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += count\n    print(f)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nd = list(map(int, input().split()))\n    nd.sort()\n    total = 0\n    data = 0\n    for j in range(2, n):\n        total += nd[j - 2]\n        data -= nd[j] * (j - 1)\n        data += total\n    print(data)", "t = int(input())\nwhile t:\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    res = 0\n    x = 0\n    for i in range(2, n):\n        x += d[i - 2]\n        res -= d[i] * (i - 1)\n        res += x\n    print(res)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    (cost, sum) = (0, 0)\n    for i in range(2, n):\n        sum += a[i - 2]\n        cost -= a[i] * (i - 1)\n        cost += sum\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    val = 0\n    summ = 0\n    for i in range(2, n):\n        summ += arr[i - 2]\n        val -= arr[i] * (i - 1)\n        val += summ\n    print(val)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(0)\n    elif n == 3:\n        print(-arr[-1])\n    else:\n        sum1 = sum(arr[1:])\n        final = sum1\n        temp = n - 1\n        for i in range(0, n - 1):\n            sum1 = sum1 + temp * (arr[i] - arr[i + 1])\n            temp = temp - 1\n            final = final + sum1\n        print(-final + arr[-1])", "for _ in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    m.sort()\n    v = 0\n    l = 0\n    for i in range(2, n):\n        l += m[i - 2]\n        v -= m[i] * (i - 1)\n        v += l\n    print(v)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = sorted(a)\n    q = 0\n    s = 0\n    for i in range(2, n):\n        s = s + p[i - 2]\n        q = q - p[i] * (i - 1)\n        q = q + s\n    print(q)", "def main():\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        arr = sorted(list(map(int, input().split())))\n        (sm, rs) = (0, 0)\n        for i in range(2, n):\n            sm += arr[i - 2]\n            rs -= arr[i] * (i - 1)\n            rs += sm\n        print(rs)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    d = [int(i) for i in input().split()]\n    d.sort()\n    total_cost = d[-1]\n    for ind in range(n - 1):\n        total_cost -= (ind + 1) * (n - (ind + 1)) * (d[ind + 1] - d[ind])\n    print(total_cost)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pos = arr[-1]\n    neg = [0] * n\n    for i in range(1, n):\n        neg[i] = neg[i - 1] + i * (arr[i] - arr[i - 1])\n    print(pos - sum(neg))", "for _ in range(int(input())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] + arr[i]\n    ans = 0\n    for i in range(1, n):\n        ans += prefix[i - 1] - i * arr[i]\n    print(ans + arr[n - 1])", "for _ in range(int(input())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] + arr[i]\n    ans = 0\n    for i in range(1, n):\n        ans += prefix[i - 1] - i * arr[i]\n    print(ans + arr[n - 1])", "def solve(arr, n):\n    if n <= 2:\n        return 0\n    arr.sort(reverse=True)\n    ans = 0\n    total = sum(arr)\n    for i in range(n - 1):\n        total -= arr[i]\n        ans += total\n        ans = ans - (n - i - 1) * arr[i]\n    ans += max(arr)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    print(solve(d, n))", "def solve_pastures(n, arr):\n    arr = sorted(arr)\n    result = 0\n    prev = n - 2\n    for x in range(n - 1):\n        result += (arr[x] - arr[x + 1]) * prev\n        prev += n - (x + 2) - (x + 1)\n    print(result)\nfor _ in range(int(input())):\n    n = int(input())\n    solve_pastures(n, list(map(int, input().split())))", "def solve():\n    n = int(input())\n    dist = [int(x) for x in input().split()]\n    dist.sort()\n    cost = 0\n    for i in range(1, n):\n        diff = dist[i] - dist[i - 1]\n        cost += diff\n        cost -= diff * i * (n - i)\n    return cost\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    d = sorted(list(map(int, input().split())))\n    result = d[n - 1]\n    for i in range(1, n):\n        result -= d[i] * i - d[i - 1]\n        d[i] += d[i - 1]\n    print(result)", "for s in [*open(0)][2::2]:\n    r = i = 0\n    for (x, y) in zip((a := sorted(map(int, s.split()))), a[1:]):\n        i += 1\n        r -= (y - x) * (i * (len(a) - i) - 1)\n    print(r)", "from math import gcd as GCD\nimport bisect\nimport copy\nimport decimal\nimport fractions\nimport heapq\nimport itertools\nimport math\nimport random\nimport sys\nfrom collections import Counter, deque, defaultdict\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop, heapify, heappushpop, _heappop_max, _heapify_max\n\ndef _heappush_max(heap, item):\n    heap.append(item)\n    heapq._siftdown_max(heap, 0, len(heap) - 1)\n\ndef _heappushpop_max(heap, item):\n    if heap and item < heap[0]:\n        (item, heap[0]) = (heap[0], item)\n        heapq._siftup_max(heap, 0)\n    return item\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nt = int(readline())\nfor _ in range(t):\n    N = int(readline())\n    D = list(map(int, readline().split()))\n    D.sort()\n    D_ = []\n    for i in range(N - 1):\n        D_.append(D[i + 1] - D[i])\n    ans = D[-1]\n    for i in range(N - 1):\n        ans -= (i + 1) * (N - i - 1) * D_[i]\n    print(ans)", "import sys\nimport math\nfrom collections import deque, Counter\nsys.setrecursionlimit(10 ** 7)\nint1 = lambda x: int(x) - 1\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nmi1 = lambda : map(int1, input().split())\nli1 = lambda : list(mi1())\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = 10 ** 18\nans = 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    a = li()\n    a.sort()\n    ans += a[-1]\n    cnt = 0\n    for i in range(1, n):\n        ans -= a[i] * i - cnt\n        cnt += a[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    mas = sorted(list(map(int, input().split())))\n    sm = 0\n    otv = 0\n    for i in range(1, n):\n        to = mas[i] - mas[i - 1]\n        otv += to\n        sm += to * i\n        otv -= sm\n    print(otv)", "import bisect\nfrom collections import *\nfrom itertools import *\nimport math\nimport heapq\nimport sys\nfrom pprint import pprint\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlist():\n    return list(map(int, input().split()))\n\ndef instring():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invariable():\n    return map(int, input().split())\n\ndef main(a):\n    n = len(a)\n    if n == 1:\n        return 0\n    a = sorted(a)\n    b = []\n    for (x1, x2) in zip(a[:-1], a[1:]):\n        b.append(x2 - x1)\n    res = 0\n    m = len(b)\n    for i in range(len(b)):\n        bi = b[i]\n        mul = (m - i) * (i + 1)\n        res += bi * mul\n    return -res + max(a)\nt = inp()\noutputs = []\nfor _ in range(t):\n    n = inp()\n    a = inlist()\n    output = main(a)\n    outputs.append(output)\nfor o in outputs:\n    if type(o) is list:\n        print(' '.join(map(str, o)))\n    else:\n        print(o)", "from itertools import accumulate\n\ndef solve(ar):\n    n = len(ar)\n    cnt = []\n    for i in range(n):\n        cnt.append(ar[i] * (i + 1))\n    return sum(accumulate(cnt))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ar.sort()\n    dif = []\n    for i in range(n - 1):\n        dif.append(ar[i + 1] - ar[i])\n    dif = dif[::-1]\n    print(sum(dif) - solve(dif))", "t = int(input())\nfor z in range(t):\n    x = int(input())\n    li = list(map(int, input().split()))\n    c1 = 0\n    diff = 0\n    li.sort()\n    for i in range(2, x):\n        c1 += li[i - 2]\n        diff -= li[i] * (i - 1)\n        diff += c1\n    print(diff)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    md = max(d)\n    for j in range(n):\n        d[j] = d[j] * (2 * j - n + 1)\n    print(md - sum(d))", "t = int(input())\nfor hh in range(0, t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    if n <= 2:\n        print(0)\n    else:\n        pre = 0\n        finalans = 0\n        for i in range(1, n):\n            val1 = i * a[i]\n            val1 -= pre\n            finalans += -1 * val1\n            pre += a[i]\n        finalans += a[-1]\n        print(finalans)", "import sys\nfrom math import sqrt\n\ndef sort_abs_diff(n):\n    return abs(n - 50)\n\ndef main():\n    pass\n\ndef binary(n):\n    return bin(n).replace('0b', '')\n\ndef decimal(s):\n    return int(s, 2)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    else:\n        root = int(n ** 0.5)\n        root += 1\n        for i in range(2, root):\n            if n % i == 0:\n                return False\n        return True\n\ndef lts(l):\n    s = ''.join(map(str, l))\n    return s\nmod = int(1000000000.0) + 7\n\ndef sinp():\n    return sys.stdin.readline().strip()\n\ndef zinp():\n    return int(input())\n\ndef zzinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef llinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef p(xyz):\n    print(xyz)\n\ndef p2(a, b):\n    print(a, b)\nfor _ in range(zinp()):\n    n = zinp()\n    l1 = llinp()\n    l1.sort()\n    curr = 0\n    ans = 0\n    for i in range(2, n):\n        ans += l1[i - 2]\n        curr -= l1[i] * (i - 1)\n        curr += ans\n    print(curr)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n <= 2:\n        print(0)\n        continue\n    i = 0\n    ans = 0\n    while i + i < n:\n        s = a[n - i - 1] - a[i]\n        ans += s * (n - 2 * i - 1)\n        i += 1\n    print(-ans + a[-1])", "for t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (val, total) = (0, 0)\n    for i in range(2, n):\n        total += a[i - 2]\n        val -= a[i] * (i - 1)\n        val += total\n    print(val)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    min_sum = 0\n    for i in range(1, n):\n        va = l[i] - l[i - 1]\n        min_sum = min_sum + va * (i * (n - i))\n    min_sum = -(min_sum - l[n - 1])\n    print(min_sum)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = 0\n    ans = 0\n    for i in range(n):\n        if i - 2 >= 0:\n            s += a[i - 2]\n            ans += (i - 1) * a[i] - s\n    print(-ans)", "def solve(n, a):\n    c = 0\n    r = 0\n    for i in range(n):\n        if i > 0:\n            c += i * a[i] - r\n        r += a[i]\n    c -= a[-1]\n    return -c\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    print(solve(n, a))", "for _ in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    f = 0\n    count = 0\n    for i in range(2, n):\n        count += l[i - 2]\n        f -= l[i] * (i - 1)\n        f += count\n    print(f)", "def greatGraphs(n, d):\n    if n == 1:\n        return d[0]\n    d = sorted(d)\n    k = []\n    for i in range(n - 1):\n        k.append(d[i + 1] - d[i])\n    cost = sum(k)\n    for i in range(n - 2, -1, -1):\n        cost -= k[i] * (n - 1 - i) * (i + 1)\n    return cost\nfor _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    print(greatGraphs(n, d))", "for s in [*open(0)][2::2]:\n    n = len((a := sorted(map(int, s.split()))))\n    r = i = 0\n    for (x, y) in zip(a, a[1:]):\n        i += 1\n        r -= (y - x) * (i * (n - i) - 1)\n    print(r)", "for s in [*open(0)][2::2]:\n    r = i = 0\n    for (x, y) in zip((a := sorted(map(int, s.split()))), a[1:]):\n        i += 1\n        r -= (y - x) * (i * (len(a) - i) - 1)\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    an = max(a)\n    a.sort()\n    for i in range(1, n):\n        an -= a[i] * i\n        an += a[i] * (n - 1 - i)\n    print(an)", "T = int(input())\nfor k in range(T):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    S = d[:]\n    for i in range(1, n):\n        S[i] += S[i - 1]\n    ans = d[-1]\n    for i in range(1, n):\n        ans += S[i - 1] - i * d[i]\n    print(ans)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    data = [0] + list(map(int, sys.stdin.readline().split()))\n    temp = [0] * (n + 1)\n    data.sort()\n    for i in range(1, n + 1):\n        temp[i] = temp[i - 1] + data[i]\n    ans = data[-1]\n    for i in range(2, n + 1):\n        ans -= data[i] * (i - 1) - temp[i - 1]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    req = 0\n    s = 0\n    j = 2\n    while j < n:\n        req -= l[j] * (j - 1)\n        s += l[j - 2]\n        req += s\n        j += 1\n    print(req)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    bn = list(map(int, sys.stdin.readline().split()))\n    bn.sort()\n    if len(bn) > 2:\n        answer = -(bn[2] - bn[0])\n        dp = answer\n        for i in range(3, n):\n            dp = dp - (bn[i] - bn[i - 1]) * (i - 2) - (bn[i] - bn[i - 2])\n            answer += dp\n    else:\n        answer = 0\n    print(answer)", "T = int(input())\nfor q in range(T):\n    TT = 0\n    tt = 2\n    n = int(input())\n    arr = input().split()\n    arr = list(map(int, arr))\n    fin = 0\n    arr.sort()\n    for i in range(tt, n):\n        fin = -((i - 1) * arr[i]) + fin\n        TT = arr[i - 2] + TT\n        fin = TT + fin\n    print(fin)", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sorted(int_arr())\n    (su1, su2) = (0, 0)\n    for i in range(2, n):\n        su1 += arr[i - 2]\n        su2 -= (i - 1) * arr[i]\n        su2 += su1\n    print(su2)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n < 3:\n        print(0)\n        continue\n    l.sort()\n    pre = []\n    s = 0\n    for i in l:\n        pre.append(i + s)\n        s += i\n    a = 0\n    for i in range(2, n):\n        a += l[i] * (i - 1) - pre[i - 2]\n    print(-a)", "for _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list1.sort()\n    ans = 0\n    sums = 0\n    p = 2\n    while p < n:\n        sums = sums + list1[p - 2]\n        ans = ans - list1[p] * (p - 1)\n        ans = ans + sums\n        p = p + 1\n    print(ans)", "for samples in range(int(input())):\n    size = int(input())\n    arr = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    for i in range(1, size):\n        ans -= abs(arr[i - 1] - arr[i]) * (i * (size - i))\n    lowest = min(arr)\n    highest = max(arr)\n    ans += highest - lowest\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    v = 0\n    s = 0\n    for i in range(2, n):\n        s = s + l[i - 2]\n        v = v - l[i] * (i - 1)\n        v = v + s\n    print(v)", "import math\n\ndef I():\n    return input()\n\ndef II():\n    return int(I())\n\ndef M():\n    return map(int, I().split())\n\ndef L():\n    return list(M())\n\ndef P(a):\n    print(a)\nfor _ in range(II()):\n    n = II()\n    d = L()\n    d.sort()\n    if n > 2:\n        k = 1\n        s = 0\n        for i in range(2, n):\n            s += k * d[i] - d[i - 2] * (n - i)\n            k += 1\n        print(-1 * s)\n    else:\n        print(0)", "def sq(a):\n    return a * a\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    val = 0\n    for i in range(2, n):\n        val += a[i - 2]\n        count -= a[i] * (i - 1)\n        count += val\n    print(count)"]