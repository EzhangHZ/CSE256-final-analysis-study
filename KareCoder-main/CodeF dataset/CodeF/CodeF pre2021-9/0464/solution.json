["n = int(input())\nprint(1 + 3 * (n + 1))\na = 0\nb = 0\nprint(a, b)\na += 1\nb += 1\nfor i in range(n + 1):\n    print(a, b)\n    print(a - 1, b)\n    print(a, b - 1)\n    a += 1\n    b += 1", "a = int(input())\nprint(3 * a + 4)\nfor i in range(a + 1):\n    print(i, i)\n    print(i, i + 1)\n    print(i + 1, i)\nprint(a + 1, a + 1)", "a = int(input())\nprint(3 * a + 4)\nfor i in range(a + 1):\n    print(i, i)\n    print(i, i + 1)\n    print(i + 1, i)\nprint(a + 1, a + 1)", "n = int(input())\nans = []\nans.append([0, 0])\nans.append([0, 1])\nj = 0\nfor i in range(1, n + 1):\n    ans.append([i, j])\n    ans.append([i, j + 1])\n    ans.append([i, j + 2])\n    j += 1\nans.append([n + 1, j])\nans.append([n + 1, j + 1])\nprint(len(ans))\nfor i in ans:\n    print(i[0], i[1])", "n = int(input())\nans = []\nans += (0, 0)\nans += (0, 1)\nj = 0\nfor i in range(1, n + 1):\n    ans += (i, j)\n    ans += (i, j + 1)\n    ans += (i, j + 2)\n    j += 1\nans += (n + 1, j)\nans += (n + 1, j + 1)\nprint(len(ans) // 2)\ni = 0\nwhile i < len(ans):\n    print(ans[i], ans[i + 1])\n    i += 2", "n = int(input())\nprint((n + 1) * 3 + 1)\nfor i in range(0, n + 1):\n    print(i, i)\n    print(i, i + 1)\n    print(i + 1, i)\nprint(n + 1, n + 1)", "a = int(input())\nprint(4 + a * 3)\nprint(0, 0)\nfor i in range(a + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i + 1, i + 1)", "a = int(input())\nprint(4 + a * 3)\nprint(0, 0)\nfor i in range(a + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i + 1, i + 1)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nprint(0, 1)\nprint(1, 0)\nprint(1, 1)\nfromm = 2\nto = n + 2\nfor coord in range(fromm, to):\n    print(coord, coord)\n    print(coord, coord - 1)\n    print(coord - 1, coord)", "n = int(input())\nprint(3 * n + 4)\nprint(n + 1, n + 1)\nfor i in range(n + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i, i)", "n = int(input())\nprint(3 * n + 4)\nprint(n + 1, n + 1)\nfor i in range(n + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i, i)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i - 1, i)\n    print(i, i - 1)\n    print(i, i)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import sys\n\ndef recur_draw(n):\n    if n == 1:\n        print(0, 0)\n        print(1, 0)\n        print(0, 1)\n        print(1, 1)\n        print(2, 1)\n        print(1, 2)\n        print(2, 2)\n    else:\n        recur_draw(n - 1)\n        print(n + 1, n)\n        print(n, n + 1)\n        print(n + 1, n + 1)\nn = int(sys.stdin.readline())\nprint(7 + (n - 1) * 3)\nrecur_draw(n)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nfor i in range(n + 1):\n    print(i, i + 1)\n    print(i + 1, i)\n    print(i + 1, i + 1)", "n = int(input())\nprint(3 * n + 4)\npoints = [[0, 0], [0, 1], [1, 0], [1, 1]]\nfor i in points:\n    print(i[0], i[1])\ncentre = [1, 1]\nfor i in range(n):\n    (x, y) = centre\n    points = [[x, y + 1], [x + 1, y], [x + 1, y + 1]]\n    for i in points:\n        print(i[0], i[1])\n    x += 1\n    y += 1\n    centre = [x, y]", "import sys\nimport math\nfrom bisect import bisect_right as br\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 1000000007\n\ndef recr(x, y, n):\n    if n == 0:\n        return\n    print(x + 1, y)\n    print(x, y + 1)\n    print(x + 1, y + 1)\n    recr(x + 1, y + 1, n - 1)\nn = int(input())\nans = 7\nif n == 1:\n    print(ans)\nelse:\n    print(ans + (n - 1) * 3)\nprint(0, 0)\nprint(0, 1)\nprint(1, 0)\nprint(1, 1)\nx = y = 1\nrecr(x, y, n)", "n = int(input())\narr = [[1, 1], [0, 1], [2, 1], [1, 0], [1, 2], [0, 0], [n + 1, n + 1]]\nif n == 1:\n    print(len(arr))\n    for i in arr:\n        print(*i)\nelse:\n    for i in range(2, n + 1):\n        arr.append([i, i])\n        arr.append([i + 1, i])\n        arr.append([i, i + 1])\n    print(len(arr))\n    for i in arr:\n        print(*i)", "import math\nn = int(input())\nprint(n * 3 + 4)\nfor i in range(n + 2):\n    print(i, i)\nfor i in range(n + 1):\n    print(i, i + 1)\n    print(i + 1, i)", "n = int(input())\nk = 1 + (n + 1) * 3\nprint(k)\nprint(0, 0)\nfor i in range(n + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i + 1, i + 1)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nprint(1, 0)\nprint(0, 1)\nprint(1, 1)\nfor i in range(n):\n    print(i + 1, i + 2)\n    print(i + 2, i + 1)\n    print(i + 2, i + 2)", "n = int(input())\nprint(4 + n * 3)\nfor x in range(2):\n    for y in range(2):\n        print(x, y)\nfor i in range(2, n + 2):\n    print(i, i)\n    print(i - 1, i)\n    print(i, i - 1)", "n = int(input())\nlocation = {(0, 0)}\ncnt = 0\ni = 1\nj = 1\nwhile n != cnt:\n    if (i, j) not in location:\n        location.add((i, j))\n        cnt += 1\n    i += 1\n    if (i, j) not in location:\n        location.add((i, j))\n    i -= 1\n    j += 1\n    if (i, j) not in location:\n        location.add((i, j))\n    i -= 1\n    j -= 1\n    if (i, j) not in location:\n        location.add((i, j))\n    i += 1\n    j -= 1\n    if (i, j) not in location:\n        location.add((i, j))\n    i += 1\n    j += 2\nlocation.add((i, j))\nprint(len(location))\nfor elem in location:\n    print(*elem)", "n = int(input())\nxy = []\nfor i in range(n + 2):\n    if i - 1 >= 0:\n        xy.append([i, i - 1])\n    xy.append([i, i])\n    if i + 1 <= n + 1:\n        xy.append([i, i + 1])\nprint(len(xy))\nfor (x, y) in xy:\n    print(x, y)", "t = int(input())\nprint(t * 3 + 4)\nprint(0, 0)\nprint(0, 1)\nprint(1, 0)\nprint(1, 1)\nfor i in range(t):\n    print(2 + i, 2 + i)\n    print(2 + i, 1 + i)\n    print(1 + i, 2 + i)", "from sys import *\nsetrecursionlimit(100000000)\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nn = int(input())\nprint(n + 2 * n + 4)\nfor i in range(0, n + 2):\n    print(i, i)\nfor i in range(1, n + 2):\n    print(i, i - 1)\nfor i in range(0, n + 1):\n    print(i, i + 1)", "n = int(input())\n\ndef put(a, b):\n    if a >= 0 and b >= 0:\n        print(a, b)\n\ndef printer(i):\n    put(i + 1, i)\n    put(i + 1, i + 1)\n    put(i, i + 1)\ni = -1\nprint(4 + 3 * n)\nwhile i <= n:\n    printer(i)\n    i += 1", "n = int(input())\nx = 0\ny = 0\nc = n + 2 + 2 * (n + 1)\nprint(c)\nfor i in range(n + 1):\n    print(x, end=' ')\n    print(y)\n    print(x + 1, end=' ')\n    print(y)\n    print(x, end=' ')\n    print(y + 1)\n    x = x + 1\n    y = y + 1\n    c = c + 1\nprint(x, end=' ')\nprint(y)", "n = int(input())\narr = []\narr.append((0, 0))\narr.append((0, 1))\narr.append((1, 0))\narr.append((1, 1))\nfor i in range(n):\n    a = arr[-1][0]\n    b = arr[-1][1]\n    arr.append((a + 1, b))\n    arr.append((a, b + 1))\n    arr.append((a + 1, b + 1))\nprint(len(arr))\nfor i in arr:\n    print(i[0], i[1])", "n = int(input())\nprint(n * 3 + 4)\nprint('0 0')\nprint('1 0')\nprint('0 1')\nfor i in range(1, n + 1):\n    print(str(i) + ' ' + str(i))\n    print(str(i) + ' ' + str(i + 1))\n    print(str(i + 1) + ' ' + str(i))\nprint(str(i + 1) + ' ' + str(i + 1))", "n = int(input())\nprint(1 + 3 * (n + 1))\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i, i - 1)\n    print(i - 1, i)\n    print(i, i)", "def painting(n):\n    print(3 * n + 4)\n    x = y = 0\n    while x < n + 2 and y < n + 2:\n        print(x, y)\n        if (x, y) != (n + 1, n + 1):\n            print(x + 1, y)\n            print(x, y + 1)\n        x += 1\n        y += 1\n    return\nn = int(input())\npainting(n)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i, i)\n    print(i - 1, i)\n    print(i, i - 1)", "n = int(input())\nx = 1\ny = 1\nans = []\nans.append((0, 0))\nans.append((0, 1))\nans.append((1, 0))\nans.append((1, 1))\nfor i in range(n):\n    ans.append((x + 1, y))\n    ans.append((x, y + 1))\n    x += 1\n    y += 1\n    ans.append((x, y))\nprint(len(ans))\nfor i in ans:\n    print(i[0], i[1])", "k = int(input())\nprint(k + 6 + (k - 1) * 2)\nfor i in range(k + 2):\n    if i == 0:\n        print(i, i)\n        print(i + 1, i)\n    elif i != k + 1:\n        print(i - 1, i)\n        print(i, i)\n        print(i + 1, i)\n    else:\n        print(i - 1, i)\n        print(i, i)", "n = int(input())\nprint(3 * n + 4)\nfor i in range(n + 2):\n    if i - 1 >= 0:\n        print(i, i - 1)\n    print(i, i)\n    if i + 1 <= n + 1:\n        print(i, i + 1)", "for _ in range(1):\n    k = int(input())\n    arr = [(0, 0), (0, 1)]\n    c = [0, 0]\n    for i in range(k):\n        c[0] += 1\n        c[1] += 1\n        arr.append([c[0], c[1] - 1])\n        arr.append([c[0], c[1]])\n        arr.append([c[0], c[1] + 1])\n    arr.append([c[0] + 1, c[1]])\n    arr.append([c[0] + 1, c[1] + 1])\n    print(len(arr))\n    for el in arr:\n        print(*el)", "n = int(input())\nprint(3 * n + 4)\nprint('0 0')\nprint('0 1')\nprint('1 0')\nprint('1 1')\nfor i in range(2, n + 2):\n    print(i, i)\n    print(i, i - 1)\n    print(i - 1, i)", "def main():\n    n = int(input())\n    pos = [(0, 0), (0, 1), (n + 1, n), (n + 1, n + 1)]\n    for i in range(1, n + 1):\n        pos.append((i, i - 1))\n        pos.append((i, i))\n        pos.append((i, i + 1))\n    print(len(pos))\n    for i in pos:\n        print(i[0], i[1])\nt = 1\nfor i in range(t):\n    main()", "n = int(input())\nprint(4 + 3 * n)\nprint(0, 0)\nprint(1, 0)\ncount = 1\nwhile n > 0:\n    print(count - 1, count)\n    print(count, count)\n    print(count + 1, count)\n    n = n - 1\n    count = count + 1\nprint(count - 1, count)\nprint(count, count)", "n = int(input())\nk = 7 + (n - 1) * 3\nprint(k)\nfor i in range(n + 1):\n    print(i, i)\n    print(i + 1, i)\n    print(i, i + 1)\nprint(n + 1, n + 1)", "n = int(input())\nprint(3 * (n + 1) + 1)\nprint('0 0')\nfor i in range(1, n + 2):\n    print(i, end=' ')\n    print(i)\n    print(i - 1, end=' ')\n    print(i)\n    print(i, end=' ')\n    print(i - 1)", "n = int(input())\nstart = 7\nlis = [[0, 0], [0, 1], [1, 1], [1, 0], [1, 2], [2, 2], [2, 1]]\nfor i in range(2, n + 1):\n    start += 3\n    lis.append([i, i + 1])\n    lis.append([i + 1, i + 1])\n    lis.append([i + 1, i])\nprint(start)\nfor i in range(len(lis)):\n    print(lis[i][0], end=' ')\n    print(lis[i][1])", "n = int(input())\nx = 0\ny = 0\nprint(4 + 3 * n)\nprint(x, y)\nprint(x + 1, y)\nprint(x, y + 1)\nprint(x + 1, y + 1)\nx = 1\ny = 1\nfor i in range(n):\n    print(x + 1, y)\n    print(x, y + 1)\n    print(x + 1, y + 1)\n    x += 1\n    y += 1", "n = int(input())\nprint(3 * n + 4)\nval = 0\npos = 0\nprint(str(val) + ' 0')\nprint(str(val) + ' 1')\nval += 1\nfor i in range(n):\n    print(str(val) + ' ' + str(pos))\n    print(str(val) + ' ' + str(pos + 1))\n    print(str(val) + ' ' + str(pos + 2))\n    val += 1\n    pos += 1\nprint(str(val) + ' ' + str(pos))\nprint(str(val) + ' ' + str(pos + 1))", "n = int(input())\nprint(3 * n + 4)\nval = 0\npos = 0\nprint(str(val) + ' 0')\nprint(str(val) + ' 1')\nval += 1\nfor i in range(n):\n    print(str(val) + ' ' + str(pos))\n    print(str(val) + ' ' + str(pos + 1))\n    print(str(val) + ' ' + str(pos + 2))\n    val += 1\n    pos += 1\nprint(str(val) + ' ' + str(pos))\nprint(str(val) + ' ' + str(pos + 1))", "n = int(input())\nans = 7 + 3 * (n - 1)\nprint(ans)\nprint(0, 0)\nprint(0, 1)\nfor i in range(1, n + 1):\n    for j in range(3):\n        print(i, i - 1 + j)\nprint(n + 1, n)\nprint(n + 1, n + 1)", "n = int(input().strip())\nx = 0\ny = 0\nq = []\nn += 1\nq.append((0, 0))\nwhile n > 0:\n    q.append((x + 1, y))\n    q.append((x, y + 1))\n    q.append((x + 1, y + 1))\n    x += 1\n    y += 1\n    n -= 1\nprint(len(q))\nfor (x, y) in q:\n    print(x, y)", "n = int(input())\nl = [(0, 0), (1, 0), (0, 1), (1, 1), (2, 1), (1, 2), (2, 2)]\nx = 2\ny = 2\nfor i in range(1, n):\n    l += [(x + 1, y), (x, y + 1), (x + 1, y + 1)]\n    x += 1\n    y += 1\nprint(len(l))\nfor i in l:\n    print(i[0], i[1])", "n = int(input())\nprint(4 + n * 3)\nfor i in range(n + 1):\n    print(i, i)\n    print(i + 1, i)\n    print(i, i + 1)\nprint(n + 1, n + 1)", "asass = int(input())\nzxzc = 0\ny = 0\ncvccc = asass + 2 + 2 * (asass + 1)\nprint(cvccc)\nfor i in range(asass + 1):\n    print(zxzc, end=' ')\n    print(y)\n    print(zxzc + 1, end=' ')\n    print(y)\n    print(zxzc, end=' ')\n    print(y + 1)\n    zxzc = zxzc + 1\n    y = y + 1\n    cvccc = cvccc + 1\nprint(zxzc, end=' ')\nprint(y)", "n = int(input())\ns = 2 + n\nans = []\ncount = 0\nfor i in range(s):\n    ans.append(str(i) + ' ' + str(i))\n    count += 1\n    if i + 1 < s:\n        ans.append(str(i) + ' ' + str(i + 1))\n        count += 1\n    if i - 1 >= 0:\n        ans.append(str(i) + ' ' + str(i - 1))\n        count += 1\nprint(count)\nfor an in ans:\n    print(an)", "n = int(input())\nprint(4 + 3 * n)\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i, i)\n    print(i - 1, i)\n    print(i, i - 1)", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef bs(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return arr[mid]\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\ndef swap(list, pos1, pos2):\n    (list[pos1], list[pos2]) = (list[pos2], list[pos1])\n    return list\nn = int(input())\nx = []\nx.append((1, 1))\nx.append((0, 1))\nx.append((1, 0))\nx.append((1, 2))\nx.append((2, 1))\nx.append((0, 0))\nx.append((2, 2))\nfor i in range(n - 1):\n    x.append((i + 2, i + 3))\n    x.append((i + 3, i + 2))\n    x.append((i + 3, i + 3))\nprint(len(x))\nfor i in range(len(x)):\n    print(x[i][0], x[i][1])", "n = int(input())\narr = [[0, 0], [0, 1], [1, 0]]\ni = 1\nwhile i <= n:\n    arr.append([i, i])\n    arr.append([i, i + 1])\n    arr.append([i + 1, i])\n    i += 1\narr.append([i, i])\nprint(len(arr))\nfor i in arr:\n    print(i[0], i[1])", "n = int(input(''))\nprint(4 + 3 * n)\ninitial = [0, 0]\nprint(0, 0)\nfor i in range(n + 1):\n    (a, b) = initial\n    print(a + 1, b)\n    print(a, b + 1)\n    print(a + 1, b + 1)\n    initial[0] += 1\n    initial[1] += 1", "n = int(input())\nl = [(0, 0), (1, 0), (0, 1), (1, 1)]\nprint(4 + n * 3)\nt = (1, 1)\nfor i in range(4):\n    print(l[i][0], l[i][1])\nfor i in range(n):\n    print(t[0], t[1] + 1)\n    print(t[0] + 1, t[1])\n    print(t[0] + 1, t[1] + 1)\n    t = (t[0] + 1, t[1] + 1)", "def solve(n):\n    n += 2\n    cells = set()\n    for i in range(n):\n        cells.add((i, i))\n        if i != n - 1:\n            cells.add((i + 1, i))\n            cells.add((i, i + 1))\n    print(len(cells))\n    for (c, r) in cells:\n        print(c, r)\nN = int(input())\nsolve(N)", "k = int(input())\n(n, l) = (k + 1, [])\nfor i in range(n + 1):\n    for j in range(i - 1, i + 2):\n        if j < 0 or j > n:\n            continue\n        else:\n            l.append([i, j])\nprint(len(l))\nfor i in l:\n    print(str(i[0]) + ' ' + str(i[1]))", "n = int(input())\nans = []\nans.append([0, 0])\nans.append([0, 1])\nfor i in range(1, n + 1):\n    for j in range(i - 1, i + 2):\n        ans.append([i, j])\nans.append([n + 1, n])\nans.append([n + 1, n + 1])\nprint(len(ans))\nfor i in range(len(ans)):\n    print(ans[i][0], ans[i][1])", "n = int(input())\nprint(1 + 3 * (n + 1))\na = 0\nb = 0\nprint(a, b)\na += 1\nb += 1\nfor i in range(n + 1):\n    print(a, b)\n    print(a - 1, b)\n    print(a, b - 1)\n    a += 1\n    b += 1", "n = int(input())\nprint(3 * n + 4)\nfor i in range(n + 1):\n    print(i, i)\n    print(i, i + 1)\n    print(i + 1, i)\nprint(n + 1, n + 1)", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nchar = [chr(i) for i in range(97, 123)]\nCHAR = [chr(i) for i in range(65, 91)]\nmp = lambda : list(map(int, input().split()))\nINT = lambda : int(input())\nrn = lambda : range(INT())\nfrom math import ceil, sqrt, factorial, gcd\nn = INT()\nl = []\nfor i in range(n + 1):\n    l.append((i, i))\n    l.append((i, i + 1))\n    l.append((i + 1, i))\nl.append((n + 1, n + 1))\nprint(len(l))\nfor j in l:\n    print(*j)", "t = int(input())\nans = []\nans.append((0, 0))\nans.append((0, 1))\nk = 0\nl = 1\nr = 0\nwhile k < t:\n    for j in range(l, l + 3):\n        ans.append((l, j - 1))\n    k = k + 1\n    l = l + 1\nans.append((l, l - 1))\nans.append((l, l))\nprint(len(ans))\nfor i in ans:\n    print(i[0], i[1])", "n = int(input())\nprint((n + 1) * 3 + 1)\nfor i in range(0, n + 1):\n    print(i, i)\n    print(i + 1, i)\n    print(i, i + 1)\nprint(n + 1, n + 1)", "class Node:\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nk = int(input())\nl = []\nfor i in range(1, k + 2):\n    l.append(Node(i, i))\nli = []\nfor i in l:\n    li.append([i.x, i.y])\n    li.append([i.x - 1, i.y])\n    li.append([i.x, i.y - 1])\nli.append([0, 0])\nprint(len(li))\nfor (i, j) in li:\n    print(i, j)", "n = int(input()) + 1\n\ndef print_coord(x, y):\n    print(str(x) + ' ' + str(y))\n\ndef print_trio(x, y):\n    print_coord(x, y)\n    print_coord(x + 1, y)\n    print_coord(x, y + 1)\nprint(n * 3 + 1)\nfor o in range(n):\n    print_trio(o, o)\nprint_coord(n, n)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i, i)\n    print(i - 1, i)\n    print(i, i - 1)", "n = int(input())\n\ndef print_cells(n):\n    print(0, 0)\n    print(0, 1)\n    print(1, 0)\n    print(1, 1)\n    for i in range(1, n + 1):\n        print(i, i + 1)\n        print(i + 1, i)\n        print(i + 1, i + 1)\nprint(4 + n * 3)\nprint_cells(n)", "n = int(input())\nprint(3 * n + 4)\nfor k in range(n + 2):\n    print(f'{k} {k}')\nt = n + 1\n(i, j) = (1, 0)\nwhile t > 0:\n    print(f'{i} {j}')\n    i += 1\n    j += 1\n    t -= 1\nt = n + 1\n(i, j) = (0, 1)\nwhile t > 0:\n    print(f'{i} {j}')\n    i += 1\n    j += 1\n    t -= 1", "def solution(n):\n    ans = [[0, 0]]\n    for i in range(1, n + 2):\n        ans.append([i, i])\n        ans.append([i - 1, i])\n        ans.append([i, i - 1])\n    return ans\nn = int(input())\nans = solution(n)\nprint(len(ans))\nfor i in ans:\n    print(*i)", "def solve():\n    squares = [[0, 0]]\n    for i in range(1, n + 2):\n        squares.append([i, i])\n        squares.append([i - 1, i])\n        squares.append([i, i - 1])\n    return squares\nn = int(input())\nresult = solve()\nprint(3 * (n + 1) + 1)\nfor i in result:\n    print(*i)", "def solve():\n    n = int(input())\n    i = 1\n    print(n * 3 + 4)\n    print('0 0')\n    print('0 1')\n    j = 0\n    c = 1\n    while c <= n:\n        for x in range(j, j + 3):\n            print(i, x)\n        i += 1\n        j += 1\n        c += 1\n    print(i, j)\n    print(i, j + 1)\nsolve()", "n = int(input())\nk = 7 + (n - 1) * 3\nprint(k)\nprint('0 0')\nprint('1 0')\nfor i in range(1, 1 + n):\n    for j in range(i - 1, i + 2):\n        print(j, end=' ')\n        print(i)\nprint(j - 1, end=' ')\nprint(i + 1)\nprint(j, end=' ')\nprint(i + 1)", "n = int(input())\nnum = 4 + 3 * n\nprint(num)\nprint(0, 0)\nprint(1, 0)\nprint(0, 1)\nprint(1, 1)\nx = 1\ny = 1\nfor i in range(n):\n    print(x + 1, y)\n    print(x, y + 1)\n    print(x + 1, y + 1)\n    x += 1\n    y += 1", "n = int(input())\nprint(3 * (n + 1) + 1)\nfor i in range(n + 1):\n    print(i, i)\n    print(i, i + 1)\n    print(i + 1, i)\nprint(n + 1, n + 1)", "n = int(input())\nprint(3 * n + 4)\nprint(0, 0)\nfor i in range(1, n + 2):\n    print(i - 1, i)\n    print(i, i - 1)\n    print(i, i)", "def func():\n    n = int(input())\n    m = 0\n    res = []\n    print(n * 3 + 4)\n    print(0, 0)\n    print(1, 0)\n    print(0, 1)\n    for i in range(n):\n        block = [(1 + m, 1 + m), (2 + m, 1 + m), (1 + m, 2 + m)]\n        for j in range(len(block)):\n            print(block[j][0], block[j][-1])\n        m += 1\n    print(m + 1, m + 1)\nfunc()", "n = int(input())\nprint(3 * n + 4)\nprint(n + 1, n + 1)\nfor i in range(n + 1):\n    print(i + 1, i)\n    print(i, i + 1)\n    print(i, i)"]