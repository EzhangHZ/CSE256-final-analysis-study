["t = int(input())\nfor k in range(t):\n    n = int(input())\n    aString = input()\n    aStringRev = aString[::-1]\n    a = []\n    for i in range(n):\n        if (n - i) % 2 == 0:\n            a.append(aString[i:n] + aString[0:i])\n        else:\n            a.append(aString[i:n] + aStringRev[n - i:n])\n    minStrID = 0\n    for i in range(n):\n        if a[i] < a[minStrID]:\n            minStrID = i\n    print(a[minStrID] + '\\n' + str(minStrID + 1))", "def stringModification(n, string):\n    lexSmallest = string\n    ks = 1\n    for k in range(1, n + 1):\n        if (n - k) % 2 == 0:\n            stri = string[k - 1:] + string[k - 2::-1]\n        else:\n            stri = string[k - 1:] + string[:k - 1]\n        if stri < lexSmallest:\n            lexSmallest = stri\n            ks = k\n    return (ks, lexSmallest)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    (a, ans) = stringModification(n, s)\n    print(ans)\n    print(a)", "def modified(s, n, k):\n    result_prefix = s[k - 1:]\n    result_suffix = s[:k - 1]\n    if n % 2 == k % 2:\n        result_suffix = result_suffix[::-1]\n    return result_prefix + result_suffix\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    best_s = modified(s, n, 1)\n    best_k = 1\n    for i in range(2, n + 1):\n        temp = modified(s, n, i)\n        if temp < best_s:\n            best_s = temp\n            best_k = i\n    print(best_s)\n    print(best_k)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k = 1\n    z = ''\n    a = [s]\n    b = []\n    while k < n:\n        z = s[k:n]\n        if n % 2 == k % 2:\n            z += s[0:k]\n        else:\n            z += s[0:k][::-1]\n        a.append(z)\n        b.append(k)\n        k += 1\n    print(min(a))\n    try:\n        print(b[a.index(min(a))])\n    except IndexError:\n        print(n)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k = 1\n    res = s\n    for j in range(1, n + 1):\n        mov = n - j + 1\n        t = s[:j - 1]\n        final = s[j - 1:]\n        if mov % 2 == 0:\n            final += t\n        else:\n            final = final + t[::-1]\n        if res > final:\n            k = j\n            res = final\n    print(res)\n    print(k)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    mi = min(s)\n    l = []\n    for i in range(n):\n        if s[i] == mi:\n            l.append(i)\n    ans = []\n    for i in l:\n        if (n - i) % 2 == 1:\n            st = ''\n            st += s[i:] + s[0:i][::-1]\n            ans.append([st, i])\n        else:\n            st = ''\n            st += s[i:] + s[0:i]\n            ans.append([st, i])\n    ans.sort()\n    print(ans[0][0])\n    print(ans[0][1] + 1)", "import sys, os, io\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = s[:]\n    k = 1\n    for i in range(1, n):\n        ns = s[i:]\n        if (n - i) % 2:\n            ns += s[:i][::-1]\n        else:\n            ns += s[:i]\n        if ns < ans:\n            ans = ns[:]\n            k = i + 1\n    print(ans)\n    print(k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    mn = 'z'\n    for i in s:\n        if mn > i:\n            mn = i\n    d = []\n    for i in range(n):\n        if s[i] == mn:\n            if (i + 1) % 2 == 0 and len(s) % 2 == 0 or ((i + 1) % 2 != 0 and len(s) % 2 != 0):\n                d.append((s[i:] + s[:i][::-1], i + 1))\n            else:\n                d.append((s[i:] + s[:i], i + 1))\n    ans = list(min(d))\n    print(ans[0])\n    print(ans[1])", "def strmod(s, n, k):\n    pref = s[k - 1:]\n    suff = s[:k - 1]\n    if n % 2 == k % 2:\n        suff = suff[::-1]\n    return pref + suff\nfor _ in range(int(input())):\n    n = int(input())\n    inpstr = input()\n    res = strmod(inpstr, n, 1)\n    res_k = 1\n    for i in range(1, n):\n        tmp = strmod(inpstr, n, i + 1)\n        if tmp < res:\n            res = tmp\n            res_k = i + 1\n    print(res)\n    print(res_k)", "import string\nfrom sys import stdin\ninput = stdin.readline\nread = lambda : map(lambda s: int(s), input().strip().split())\nreadi = lambda : int(input())\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom random import randint\nfrom math import gcd, ceil\nRANDOM = randint(1, 10 ** 9)\n\nclass Wrapper(int):\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\n\ndef gen(s, k):\n    i = 0\n    if (len(s) - k) % 2 == 0:\n        return s[k:] + s[:k]\n    else:\n        return s[k:] + s[:k][::-1]\n    return s\nfor _ in range(readi()):\n    n = readi()\n    s = input().strip()\n    if n == 1:\n        print(s, 1, sep='\\n')\n        continue\n    ind = []\n    mn = min(s)\n    for (id, i) in enumerate(s):\n        if i == mn:\n            ind.append(id)\n    ans = 'z' * n\n    k = None\n    for i in ind:\n        t = gen(s, i)\n        if t < ans:\n            ans = t\n            k = i\n    print(ans, k + 1, sep='\\n')", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nt = iinput()\nfor _ in range(t):\n    n = iinput()\n    s = input()\n    l = []\n    for k in range(0, n + 1):\n        l.append((s[k:] + (s[:k] if (n - k) % 2 == 0 else s[:k][::-1]), k))\n    l.sort()\n    print(l[0][0])\n    print(l[0][1] + 1)", "import sys\n\ndef gs(s, k):\n    n = len(s)\n    return s[k - 1:] + (s[:k - 1] if (n - k) % 2 == 1 else s[:k - 1][::-1])\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    km = min(range(1, n + 1), key=lambda k: gs(s, k))\n    print(gs(s, km))\n    print(km)", "import sys\nnum_inputs = int(sys.stdin.readline())\nk_min = 1\n\ndef modify(input, k):\n    mid = input[0:k - 1]\n    if (len(input) - k + 1) % 2 == 1:\n        mid = mid[::-1]\n    result = input[k - 1:] + mid\n    return result\n\ndef LG_smaller(first, second):\n    assert len(first) == len(second), 'length of two strings must be equal'\n    if len(first) == 0:\n        return True\n    for position in range(len(first)):\n        if first[position] != second[position]:\n            if first[position] < second[position]:\n                return True\n            else:\n                return False\nfor i in range(num_inputs):\n    length = int(sys.stdin.readline())\n    orig_string = sys.stdin.readline().split('\\n')[0]\n    min_char = min(orig_string)\n    min_positions = []\n    for i in range(length):\n        if orig_string[i] == min_char:\n            min_positions.append(i)\n    for k in range(len(min_positions)):\n        if k == 0:\n            k_min = k\n            smallest = modify(orig_string, min_positions[k_min] + 1)\n        else:\n            modified = modify(orig_string, min_positions[k] + 1)\n            if modified < smallest:\n                k_min = k\n                smallest = modified\n    print(smallest)\n    print(min_positions[k_min] + 1)", "inf = int(10000000000.0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = input()\n    if n == 1:\n        print(lis)\n        print(1)\n    else:\n        m = min(lis)\n        index = []\n        for i in range(n):\n            if lis[i] == m:\n                index.append(i)\n        z = 'z' * n\n        maxx = inf\n        for i in range(n + 1):\n            if (n + i) % 2 == 0:\n                s1 = lis[i:] + lis[:i]\n            else:\n                s1 = lis[i:] + lis[:i][::-1]\n            if s1 < z:\n                maxx = i\n                z = s1\n        print(z)\n        print(maxx + 1)", "for i in range(int(input())):\n    n = int(input())\n    s = str(input())\n    t = s\n    a = 1\n    b = min(s)\n    c = s.find(b)\n    m = 1\n    while c != -1:\n        if c == 0:\n            c = s.find(b, c + 1)\n            continue\n        if (n - c) % 2 != 0:\n            s2 = s[c:] + s[0:c][::-1]\n        else:\n            s2 = s[c:] + s[0:c]\n        if s2 < t:\n            t = s2\n            m = c + 1\n        c = s.find(b, c + 1)\n    print(t)\n    print(m)", "def calc(s, x, y):\n    ps = s[x:y:1]\n    ss = s[0:x:1]\n    if (y - x) % 2 != 0:\n        ss = ss[::-1]\n    sf = ps + ss\n    return sf\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    s1 = s\n    k = 1\n    for i in range(1, n + 1):\n        ts = calc(s, i, n)\n        if ts < s1:\n            s1 = ts\n            k = i + 1\n    print(s1)\n    print(k)", "import sys\nnum_inputs = int(sys.stdin.readline())\nk_min = 1\n\ndef modify(input, k):\n    mid = input[0:k - 1]\n    if (len(input) - k + 1) % 2 == 1:\n        mid = mid[::-1]\n    result = input[k - 1:] + mid\n    return result\n\ndef LG_smaller(first, second):\n    assert len(first) == len(second), 'length of two strings must be equal'\n    if len(first) == 0:\n        return True\n    for position in range(len(first)):\n        if first[position] != second[position]:\n            if first[position] < second[position]:\n                return True\n            else:\n                return False\nfor i in range(num_inputs):\n    length = int(sys.stdin.readline())\n    orig_string = sys.stdin.readline().split('\\n')[0]\n    for k in range(1, length + 1):\n        if k == 1:\n            k_min = 1\n            smallest = modify(orig_string, k_min)\n        else:\n            modified = modify(orig_string, k)\n            if modified < smallest:\n                k_min = k\n                smallest = modified\n    print(smallest)\n    print(k_min)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    ans = 1\n    k = a\n    for i in range(1, n):\n        s = a[:i]\n        if (n - i + 1) % 2 == 0:\n            result = a[i:] + s[::-1]\n        else:\n            result = a[i:] + s\n        if result < k:\n            k = result\n            ans = i + 1\n    print(k)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = [1, s]\n    for k in range(1, n):\n        new_s = s[k:]\n        if n % 2 == k % 2:\n            new_s += s[:k]\n        else:\n            new_s += s[k - 1::-1]\n        if new_s < ans[1]:\n            ans = [k + 1, new_s]\n    print(ans[1])\n    print(ans[0])", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nfor T in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = s\n    k = 1\n    for i in range(n):\n        s2 = s[i:]\n        if n % 2 == i % 2:\n            s2 += s[:i]\n        else:\n            s2 += s[:i][::-1]\n        if s2 < ans:\n            ans = s2\n            k = i + 1\n    print(ans)\n    print(k)", "def operat(s, k):\n    res = list(s)\n    for i in range(len(res) - k + 1):\n        res[i:i + k] = reversed(res[i:i + k])\n    print(''.join(res))\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    current = s\n    original = s\n    k = 1\n    for i in range(1, n):\n        if (n - i) % 2 == 0 and s[i:] + s[:i] < current:\n            k = i + 1\n            current = s[i:] + s[:i]\n        if (n - i) % 2 == 1 and s[i:] + s[i - 1::-1] < current:\n            k = i + 1\n            current = s[i:] + s[i - 1::-1]\n    print(current)\n    print(k)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(*min([(s[i:n] + (s[i - 1::-1] if i != 0 and (n - i) % 2 else s[:i]), i + 1) for i in range(n)]), sep='\\n')", "def checker(n, s):\n    (ans1, ans2) = (1, s)\n    for i in range(2, n + 1):\n        k = s[i - 1:] + s[0:i - 1][::-1] if (n - i) % 2 == 0 else s[i - 1:] + s[0:i - 1]\n        if k < ans2:\n            (ans2, ans1) = (k, i)\n    return (ans2, ans1)\nfor _ in range(int(input())):\n    m = int(input())\n    t = input()\n    lst = checker(m, t)\n    print(lst[0])\n    print(lst[1])", "t = int(input())\n\ndef replace_k(s, k):\n    coef = len(s) - k + 1\n    if k == len(s):\n        return s[::-1]\n    return s[k - 1:] + (s[:k - 1] if coef % 2 == 0 else s[:k - 1][::-1])\n\ndef solve(s):\n    (min_s, res) = (s, 1)\n    for k in range(1, len(s) + 1):\n        replaced = replace_k(s, k)\n        if min_s > replaced:\n            min_s = replaced\n            res = k\n    return (res, min_s)\nfor i in range(t):\n    _ = input()\n    s = input()\n    (res, min_s) = solve(s)\n    print(min_s)\n    print(res)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    stri = input()\n    stri = stri[0:n]\n    z = 'z' * 50002\n    if n == 1:\n        print(stri)\n        print(1)\n    else:\n        count = 0\n        if n % 2 == 1:\n            for i in range(1, n + 1):\n                if i % 2 == 0:\n                    s = stri[i - 1:] + stri[:i - 1]\n                    if s < z:\n                        z = s\n                        count = i\n                else:\n                    s = stri[i - 1:n] + stri[0:i - 1][::-1]\n                    if s < z:\n                        z = s\n                        count = i\n        else:\n            for i in range(1, n + 1):\n                if i % 2 == 1:\n                    s = stri[i - 1:] + stri[:i - 1]\n                    if s < z:\n                        z = s\n                        count = i\n                else:\n                    s = stri[i - 1:n] + stri[0:i - 1][::-1]\n                    if s < z:\n                        z = s\n                        count = i\n        print(''.join(z))\n        print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k = 1\n    res = s[:]\n    for i in range(1, n):\n        n_res = s[i:]\n        if n % 2 == i % 2:\n            n_res += s[:i]\n        else:\n            n_res += s[i - 1::-1]\n        if n_res < res:\n            res = n_res[:]\n            k = i + 1\n    print(res)\n    print(k)", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = input()\n    a = 1\n    t = s\n    for i in range(1, n):\n        x = s[i:]\n        if n - i & 1:\n            x += s[i - 1::-1]\n        else:\n            x += s[:i]\n        if x < t:\n            t = x\n            a = i + 1\n    print(t)\n    print(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    x = min(s)\n    c = []\n    for i in range(n):\n        if s[i] == x:\n            c.append(i)\n    q = 'zzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    m = 0\n    for i in c:\n        z = s[i:] + s[:i]\n        y = s[i:] + s[:i][::-1]\n        if (n - i) % 2 == 0:\n            a = z\n        else:\n            a = y\n        if q > a:\n            q = a\n            m = i\n    print(q)\n    print(m + 1)", "t = int(input())\nfor i in range(0, t, 1):\n    n = int(input())\n    s = input()\n    best = s[0:n]\n    bestk = 1\n    for i in range(2, n + 1, 1):\n        result = ''\n        if n % 2 != i % 2:\n            result = result + s[i - 1:n] + s[0:i - 1]\n        else:\n            result = result + s[i - 1:n] + s[0:i - 1][::-1]\n        if result < best:\n            best = result\n            bestk = i\n    print(best)\n    print(bestk)", "def all_rotates(s, k):\n    return s[k - 1:] + (s[:k - 1] if (len(s) + k) % 2 == 1 else s[:k - 1][::-1])\n\ndef solution(s):\n    min_idx = 0\n    (ans_k, ans_ex) = (1, s)\n    for i in range(1, len(s)):\n        try_ex = all_rotates(s, i + 1)\n        if s[i] < s[min_idx] or (s[i] == s[min_idx] and try_ex < ans_ex):\n            min_idx = i\n            ans_ex = try_ex\n    return (min_idx + 1, ans_ex)\nT = int(input())\nfor _ in range(T):\n    sz = int(input())\n    s = input()\n    (k, ex) = solution(s)\n    print(ex)\n    print(k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dic = {}\n    ans = []\n    for j in range(1, n + 1):\n        if n % 2 == 0:\n            if j % 2 != 0:\n                a = s[j - 1:]\n                b = s[:j - 1]\n                s1 = a + b\n                ans.append((s1, j))\n            else:\n                a = s[j - 1:]\n                b = s[:j - 1][::-1]\n                s1 = a + b\n                ans.append((s1, j))\n        elif j % 2 == 0:\n            a = s[j - 1:]\n            b = s[:j - 1]\n            s1 = a + b\n            ans.append((s1, j))\n        else:\n            a = s[j - 1:]\n            b = s[:j - 1][::-1]\n            s1 = a + b\n            ans.append((s1, j))\n    for j in ans:\n        dic[j[0]] = []\n    for j in ans:\n        dic[j[0]].append(j[1])\n    ans1 = []\n    for j in ans:\n        ans1.append(j[0])\n    ans1.sort()\n    ele = ans1[0]\n    mi = min(dic[ele])\n    print(ele)\n    print(mi)", "t = int(input())\nfor nt in range(t):\n    n = int(input())\n    s = input()\n    mr = s\n    bk = 1\n    for k in range(2, n + 1):\n        p = s[k - 1:] + (s[:k - 1] if (n - k) % 2 else s[:k - 1][::-1])\n        if p < mr:\n            mr = min(s, p)\n            bk = k\n    print(mr)\n    print(bk)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().rstrip()\n    if n == 1:\n        print(s)\n        print(n)\n        continue\n    lst = [s]\n    for i in range(1, n):\n        if (i + n) % 2 == 0:\n            lst.append(s[i:] + s[:i])\n        else:\n            lst.append(s[i:] + s[i - 1::-1])\n    idx = lst.index(min(lst))\n    print(lst[idx])\n    print(idx + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = [[s, 1]]\n    for k in range(1, n):\n        (a, b) = (s[:k], s[k:])\n        if (n + k) % 2 == 1:\n            l.append([b + a[::-1], k + 1])\n        else:\n            l.append([b + a, k + 1])\n    l.sort()\n    print(l[0][0])\n    print(l[0][1])", "n = int(input())\nfor j in range(n):\n    m = int(input())\n    s = input()\n    minS = s\n    now1 = s[0]\n    now2 = s[1:]\n    minK = 1\n    for k in range(1, m):\n        now = now2\n        if (m - k) % 2 == 0:\n            now += now1\n        else:\n            now += now1[::-1]\n        if now < minS:\n            minS = now\n            minK = k + 1\n        now1 += s[k]\n        now2 = now2[1:]\n    print(minS)\n    print(minK)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    ans = 0\n    b = a\n    for i in range(1, n):\n        if (n - i + 1) % 2 == 1:\n            s = a[i:] + a[:i]\n            if s < b:\n                b = s\n                ans = i\n        else:\n            s = a[i:] + a[:i][::-1]\n            if s < b:\n                b = s\n                ans = i\n    print(b)\n    print(ans + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (ans, pos) = (s, 1)\n    for k in range(2, n + 1):\n        t = n - k + 1\n        t2 = s[:k - 1]\n        if t % 2 != 0:\n            t2 = t2[::-1]\n        temp = s[-t:] + t2\n        if temp < ans:\n            ans = temp\n            pos = k\n    print(ans)\n    print(pos)", "for _ in range(int(input())):\n    l = int(input())\n    s = input()\n    cmp = s\n    res = s\n    count = 1\n    for i in range(2, l + 1):\n        if l % 2 == i % 2:\n            new = s[i - 1:] + s[:i - 1][::-1]\n            if cmp > new:\n                count = i\n                res = new\n                cmp = new\n        else:\n            new = s[i - 1:] + s[:i - 1]\n            if cmp > new:\n                count = i\n                res = new\n                cmp = new\n    print(res)\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    min_str = s\n    k = s\n    ans = 1\n    for j in range(2, n + 1):\n        if (n - j) % 2 != 0:\n            k = s[j - 1:] + s[:j - 1]\n        else:\n            x = s[:j - 1]\n            k = s[j - 1:] + x[j - 2::-1]\n        if k < min_str:\n            min_str = k\n            ans = j\n    print(min_str)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    b = [s[i:] + s[:i][::-1] if (n - i - 1) % 2 == 0 else s[i:] + s[:i] for i in range(n)]\n    a = min(b)\n    print(a)\n    print(b.index(a) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    copy = s\n    for i in range(1, n):\n        if (n - i + 1) % 2 == 1:\n            p = s[i:] + s[:i]\n            if p < copy:\n                copy = p\n                ans = i\n        else:\n            p = s[i:] + s[:i][::-1]\n            if p < copy:\n                copy = p\n                ans = i\n    print(copy)\n    print(ans + 1)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    m = s\n    mk = 1\n    for k in range(2, n + 1):\n        tmp = s[k - n - 1:] + (s[k - 2::-1] if (n - k + 1) % 2 == 1 else s[:k - 1])\n        if tmp < m:\n            m = tmp\n            mk = k\n    print(m)\n    print(mk)\n    t -= 1", "def check(k, st):\n    n = len(st)\n    if (n - k + 1) % 2 == 0:\n        return st[k - 1:n:1] + st[0:k - 1:1]\n    else:\n        return st[k - 1:n:1] + st[k - 2::-1]\n\ndef process(n, st):\n    s = st\n    result = 1\n    for k in range(1, n + 1):\n        kq = check(k, st)\n        if kq < s:\n            s = kq\n            result = k\n    print(s)\n    print(result)\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    st = input()\n    process(n, st)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    string = input()\n    ind = 1\n    ans = string\n    if string[-1::-1] < string:\n        ans = min(string, string[-1::-1])\n        ind = n\n    if n % 2 == 0:\n        for i in range(1, n - 1):\n            if i % 2 == 0:\n                if string[i:] + string[0:i] < ans or (string[i:] + string[0:i] == ans and i + 1 < ind):\n                    ans = string[i:] + string[0:i]\n                    ind = i + 1\n            elif string[i:] + string[i - 1::-1] < ans or (string[i:] + string[i - 1::-1] == ans and i + 1 < ind):\n                ans = string[i:] + string[i - 1::-1]\n                ind = i + 1\n    else:\n        for i in range(1, n - 1):\n            if i % 2 == 1:\n                if string[i:] + string[0:i] < ans or (string[i:] + string[0:i] == ans and i + 1 < ind):\n                    ans = string[i:] + string[0:i]\n                    ind = i + 1\n            elif string[i:] + string[i - 1::-1] < ans or (string[i:] + string[i - 1::-1] == ans and i + 1 < ind):\n                ans = string[i:] + string[i - 1::-1]\n                ind = i + 1\n    print(ans)\n    print(ind)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    mx = s\n    ind = 0\n    for i in range(1, n):\n        suff = ''\n        if i > 0:\n            suff = s[:i]\n        if (n % 2 == 0 and i % 2 == 1 or (n % 2 == 1 and i % 2 == 0)) and i > 0:\n            suff = suff[::-1]\n        if s[i:] + suff < mx or (i == 0 and s[i:] + suff == mx):\n            mx = s[i:] + suff\n            ind = i\n    print(mx)\n    print(ind + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = sorted(s)\n    l = []\n    for i in range(len(s)):\n        if s[i] == r[0]:\n            l.append(i)\n    q = []\n    for i in range(len(l)):\n        if l[i] == 0:\n            q.append([s, 1])\n        elif l[i] == n - 1:\n            q.append([s[::-1], n])\n        else:\n            temp = []\n            ans = ''\n            ans += s[l[i]:]\n            e = s[0:l[i]]\n            if (l[i] + 1) % 2 and (n - l[i] - 1) % 2 == 0 or ((l[i] + 1) % 2 == 0 and (n - l[i] - 1) % 2 == 0):\n                e = e[::-1]\n            ans += e\n            q.append([ans, l[i] + 1])\n    q.sort()\n    print(q[0][0])\n    print(q[0][1])", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    s = input()\n    if len(set(s[:])) == 1:\n        print(s)\n        print(1)\n    else:\n        key = sorted(s)[0]\n        tempAns = s[:]\n        ans = 0\n        for i in range(n):\n            if s[i] == key:\n                temp = s[:]\n                if (n - i) % 2 == 1:\n                    temp = temp[i:] + temp[:i][::-1]\n                else:\n                    temp = temp[i:] + temp[:i]\n                if temp < tempAns:\n                    tempAns = temp[:]\n                    ans = i\n        ans += 1\n        print(tempAns)\n        print(ans)", "for tc in range(int(input())):\n    n = int(input())\n    s = input()\n    ar = [0] * (n + 1)\n    v = list(s)\n    for i in range(n):\n        v[i] = ord(s[i]) - 97\n    d = min(v)\n    g = v.index(d)\n    ans = []\n    for i in range(n):\n        if v[i] == d:\n            ans.append(i)\n    an = []\n    for i in ans:\n        if (n - i) % 2 != 0:\n            an.append(([s[i:] + s[:i][::-1]], i + 1))\n        else:\n            an.append(([s[i:] + s[:i]], i + 1))\n    an.sort()\n    print(*an[0][0])\n    print(an[0][1])", "t = input()\nfor i in range(int(t)):\n    length = int(input())\n    line = input()\n    temp = ''.join(line)\n    minn = ''.join(line)\n    m = 1\n    for k in range(2, length):\n        if (length - k) % 2 == 0 and k != 2:\n            tem1 = line[k - 1:]\n            tem2 = line[0:k - 1]\n            tem3 = tem2[::-1]\n            temp = tem1 + tem3\n            if temp < minn:\n                minn = ''.join(temp)\n                m = k\n            continue\n        tem1 = line[k - 1:]\n        tem2 = line[0:k - 1]\n        temp = tem1 + tem2\n        if temp < minn:\n            minn = ''.join(temp)\n            m = k\n    temp = line[::-1]\n    if temp < minn:\n        minn = ''.join(temp)\n        m = length\n    print(minn)\n    print(m)", "def ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nfor i in range(ii()):\n    n = ii()\n    s = si()\n    d = s\n    ans = 1\n    a = ''\n    for i in range(n):\n        a += s[i:n]\n        b = s[0:i]\n        if (n - i) % 2:\n            b = b[::-1]\n        a += b\n        if a < d:\n            d = a\n            ans = i + 1\n        a = ''\n    print(d)\n    print(ans)", "def main():\n    from sys import stdin, stdout\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        inp = stdin.readline().strip()\n        temp = list(inp)\n        temp.sort()\n        alpha = temp[0]\n        indices = []\n        for i in range(n):\n            if inp[i] == alpha:\n                indices.append(i)\n        ans = []\n        for i in indices:\n            temp = ''\n            if n & 1:\n                if i + 1 & 1:\n                    temp = inp[i - n - 1::-1]\n                else:\n                    temp = inp[:i]\n            elif i + 1 & 1:\n                temp = inp[:i]\n            else:\n                temp = inp[i - n - 1::-1]\n            ans.append([inp[i:] + temp, i + 1])\n        ans.sort()\n        stdout.write(ans[0][0] + '\\n' + str(ans[0][1]) + '\\n')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = []\n    for i in range(1, n + 1):\n        if i == n:\n            temp = s[-1::-1]\n        elif (n - i + 1) % 2 == 0:\n            temp = s[i - 1:] + s[:i - 1]\n        else:\n            temp = s[i - 1:] + s[:i - 1][::-1]\n        ans.append([temp, i])\n    m = ans[0][0]\n    el = 1\n    for i in range(1, len(ans)):\n        if ans[i][0] < m:\n            (m, el) = ans[i]\n    print('{}\\n{}'.format(m, el))", "t = int(input())\nfor s in range(t):\n    n = int(input())\n    s = input()\n    cnt = 1\n    rs = s\n    for i in range(2, n + 1):\n        if (n - i) % 2 == 1:\n            r = s[i - 1:] + s[:i - 1]\n        else:\n            r = s[i - 1:] + s[:i - 1][::-1]\n        if rs > r:\n            rs = r\n            cnt = i\n    print(rs)\n    print(cnt)", "def calc(s, x, y):\n    ps = s[x:y:1]\n    ss = s[0:x:1]\n    if (y - x) % 2 != 0:\n        ss = ss[::-1]\n    sf = ps + ss\n    return sf\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    s1 = s\n    k = 1\n    for i in range(1, n + 1):\n        ts = calc(s, i, n)\n        if ts < s1:\n            s1 = ts\n            k = i + 1\n    print(s1)\n    print(k)", "test = int(input())\nfor i in range(test):\n    strLen = int(input())\n    s = input()\n    best = s\n    k = 0\n    temp = ''\n    for i in range(1, strLen + 1):\n        p = s[i:strLen]\n        ss = ''\n        if (i + strLen) % 2:\n            ss = s[0:i][::-1]\n        else:\n            ss = s[0:i]\n        temp = p + ss\n        if temp < best:\n            best = temp\n            k = i\n    print(best)\n    print(k + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = input()\n    a = []\n    for i in range(n):\n        if (n - i) % 2 != 0:\n            a.append(x[i:] + x[:i][::-1])\n        else:\n            a.append(x[i:] + x[:i])\n    m = min(a)\n    print(m)\n    print(a.index(m) + 1)", "def solve():\n    n = int(input())\n    s = input()\n    best = None\n    best_k = None\n    for k in range(1, n + 1):\n        pre = s[k - 1:]\n        after = s[:k - 1]\n        if (len(after) + n) % 2 == 1:\n            after = after[::-1]\n        current = pre + after\n        if best is None or current < best:\n            best = current\n            best_k = k\n    print(best)\n    print(best_k)\nn = int(input())\nfor _ in range(n):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    curmin = s\n    mini = 1\n    for c in range(1, n):\n        if n % 2 ^ (c + 1) % 2:\n            q = s[c:] + s[:c]\n        else:\n            q = s[c:] + s[:c][::-1]\n        if q < curmin:\n            curmin = q\n            mini = c + 1\n    print(curmin)\n    print(mini)", "T = int(input())\nfor i in range(T):\n    t = int(input())\n    s = input()\n    if t == 1:\n        print(s)\n        print(1)\n        continue\n    mins = s[:]\n    winner = 1\n    for k in range(2, t):\n        if (t - k) % 2 == 0:\n            new = s[k - 1:] + s[k - 2::-1]\n        else:\n            new = s[k - 1:] + s[:k - 1]\n        if new < mins:\n            mins = new\n            winner = k\n    if s[::-1] < mins:\n        print(s[::-1])\n        print(t)\n    else:\n        print(mins)\n        print(winner)", "s = int(input())\nfor i in range(s):\n    n = int(input())\n    s1 = input()\n    ans = 1\n    s2 = s1\n    for j in range(2, n + 1):\n        s3 = s1[0:j - 1]\n        s4 = s1[j - 1:n]\n        if (n - j) % 2 == 0:\n            s3 = s3[::-1]\n        s5 = s4 + s3\n        if s5 < s2:\n            s2 = s5\n            ans = j\n        j += j\n    print(s2)\n    print(ans)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    s = I()\n    print(*min(((s[k:] + s[:k][::~n - k & 1 or -1], k + 1) for k in range(n))), sep='\\n')", "def reverseString(s, begin, end):\n    return s[0:begin] + s[begin:end][::-1] + s[end:]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    m = s\n    index = 0\n    for i in range(n):\n        if (n - i) % 2 == 0:\n            c = s[i:] + s[:i]\n        else:\n            c = s[i:] + s[:i][::-1]\n        if m > c:\n            m = c\n            index = i\n    print(m)\n    print(index + 1)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    s = I()\n    print(*min(((k and s[k:] + (n - k & 1 and s[k - 1::-1] or s[:k]) or s, k + 1) for k in range(n))), sep='\\n')", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        k_min = 0\n        s_min = s\n        for k in range(1, n):\n            ss = s[k:n] + (s[:k] if (n - k) % 2 == 0 else s[k - n - 1::-1])\n            if ss < s_min:\n                k_min = k\n                s_min = ss\n        print(s_min)\n        print(k_min + 1)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = min([s[i:] + s[:i][::-1] + '{:04d}'.format(i) if n - i & 1 else s[i:] + s[:i] + '{:04d}'.format(i) for i in range(n)])\n    print(l[:-4], int(l[-4:]) + 1, sep='\\n')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if len(s) == 1:\n        print(s)\n        print(1)\n        continue\n    res = []\n    for k in range(0, n):\n        ss = s\n        if (n - k) % 2 == 1:\n            ss = ss[k:] + ss[:k][::-1]\n        else:\n            ss = ss[k:] + ss[:k]\n        res.append((ss, k + 1))\n    res.sort()\n    print(res[0][0])\n    print(res[0][1])", "numTests = int(input())\nminLexIx = 0\nanswers = []\nfor i in range(numTests):\n    strLen = int(input())\n    word = input()\n    results = []\n    for ix in range(0, strLen):\n        res = word[ix:strLen]\n        rhs = word[0:ix]\n        if ix % 2 == 0 and strLen % 2 == 1 or (ix % 2 == 1 and strLen % 2 == 0):\n            rhs = rhs[::-1]\n        res += rhs\n        results.append(res)\n    minIx = 0\n    minAns = results[0]\n    for (ix, ans) in enumerate(results):\n        if ans < minAns:\n            minAns = ans\n            minIx = ix\n    answers.append((minAns, minIx))\nfor a in answers:\n    print(a[0])\n    print(str(a[1] + 1))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = []\n    for i in range(n):\n        if (n - i) % 2:\n            ans.append([s[i:] + s[:i][::-1], i])\n        else:\n            ans.append([s[i:] + s[:i], i])\n    ans.sort()\n    print(ans[0][0])\n    print(ans[0][1] + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    z = []\n    for i in range(n):\n        if (n - i) % 2:\n            z.append([s[i:] + s[:i][::-1], i])\n        else:\n            z.append([s[i:] + s[:i], i])\n    z.sort()\n    print(z[0][0])\n    print(z[0][1] + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    z = []\n    for i in range(n):\n        if (n - i) % 2:\n            z.append([s[i:] + s[:i][::-1], i])\n        else:\n            z.append([s[i:] + s[:i], i])\n    z.sort()\n    print(z[0][0])\n    print(z[0][1] + 1)", "f = input\nt = int(f())\nfor _ in [0] * t:\n    (n, s) = (int(f()), f())\n    print(*min(((s[k:] + s[:k][::1 - 2 * ((n - k) % 2)], k + 1) for k in range(n))), sep='\\n')", "t = int(input())\nfor k1 in range(t):\n    n = int(input())\n    s = input()\n    mins = 'z' * (n + 1)\n    min_val = 0\n    for i in range(1, n + 1):\n        if (n - i) % 2 == 0:\n            t = s[i - 1:] + s[:i - 1][::-1]\n        else:\n            t = s[i - 1:] + s[:i - 1]\n        if mins > t:\n            min_val = i\n            mins = t\n    print(mins)\n    print(min_val)", "testCases = int(input())\nfor i1 in range(testCases):\n    length = int(input())\n    sequence = input()\n    ans = 1\n    result = sequence\n    for k in range(length):\n        if k % 2 == length % 2:\n            new = sequence[k:] + sequence[0:k]\n        else:\n            new = sequence[k:] + sequence[0:k][::-1]\n        if new < result:\n            result = new\n            ans = k + 1\n    print(result)\n    print(ans)", "t = int(input())\nfor mo in range(1, t + 1):\n    l = []\n    n = int(input())\n    s = input()\n    for i in range(1, n + 1):\n        if (n - i + 1) % 2 and i >= 2:\n            l.append((s[i - 1:] + s[i - 2::-1], i))\n        elif (n - i + 1) % 2:\n            l.append((s, i))\n        else:\n            l.append((s[i - 1:] + s[:i - 1], i))\n    print(min(l)[0])\n    print(min(l)[1])", "for i in range(int(input())):\n    n = int(input())\n    string = input()\n    k = 1\n    ans = string\n    for it in range(2, n + 1):\n        prefix = string[it - 1:]\n        suffix = string[:it - 1]\n        if n % 2 == it % 2:\n            suffix = suffix[::-1]\n        word = prefix + suffix\n        if ans > word:\n            ans = word\n            k = it\n    print(ans)\n    print(k)", "for _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    sl = []\n    for i in range(n):\n        ns = s[i:]\n        ns += s[0:i] if (n - i) % 2 == 0 else s[0:i][::-1]\n        sl.append((ns, i + 1))\n    sl.sort()\n    print(sl[0][0])\n    print(sl[0][1])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = [(s, 1)]\n    for i in range(2, n + 1):\n        if (n + i) % 2 == 1:\n            l.append((s[i - 1:] + s[:i - 1], i))\n        else:\n            l.append((s[i - 1:] + s[i - 2::-1], i))\n    k = min(l)\n    print(k[0])\n    print(k[1])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = [(s, 1)]\n    for i in range(2, n + 1):\n        if (n + i) % 2 == 1:\n            l.append((s[i - 1:] + s[:i - 1], i))\n        else:\n            l.append((s[i - 1:] + s[i - 2::-1], i))\n    k = min(l)\n    print(k[0])\n    print(k[1])", "import math\ntestCases = int(input())\nfor _ in range(testCases):\n    n = int(input())\n    s = input()\n    allPosibilities = []\n    for index in range(n):\n        if (n - index - 1) % 2 == 0:\n            allPosibilities.append(s[index:] + s[:index][::-1])\n        else:\n            allPosibilities.append(s[index:] + s[:index])\n    answer = min(allPosibilities)\n    print(answer)\n    print(allPosibilities.index(answer) + 1)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    s = I()\n    print(*min(((s[k:] + s[:k][::~n - k & 1 or -1], k + 1) for k in range(n))), sep='\\n')", "t = input()\nfor _ in range(int(t)):\n    n = int(input())\n    s = input()\n    mn = 2000\n    ind = []\n    for i in range(n):\n        if ord(s[i]) < mn:\n            mn = ord(s[i])\n            k = i + 1\n    for i in range(n):\n        if ord(s[i]) == mn:\n            ind.append(i)\n    ans = 'z' * n\n    for i in range(len(ind)):\n        j = ind[i] + 1\n        if j == n:\n            temp = s[::-1]\n        elif n % 2 == 0 and j % 2 == 1 or (n % 2 == 1 and j % 2 == 0):\n            temp = s[j - 1:] + s[0:j - 1]\n        else:\n            temp = s[j - 1:] + s[0:j - 1][::-1]\n        if temp < ans:\n            ans = temp\n            k = j\n    print(ans)\n    print(k)", "def solution(s, n, k):\n    result_prefix = s[k - 1:n]\n    result_suffix = s[0:k - 1]\n    if n % 2 == k % 2:\n        result_suffix = result_suffix[::-1]\n    return result_prefix + result_suffix\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    result = solution(a, n, 1)\n    resulti = 1\n    for l in range(1, n):\n        temp = solution(a, n, l + 1)\n        if temp < result:\n            result = temp\n            resulti = l + 1\n    print(result)\n    print(resulti)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    x = min(s)\n    minm = 'zzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    pos = 0\n    res = ''\n    for i in range(n):\n        if s[i] == x:\n            temp = s[i:n]\n            if len(temp) % 2 == 0:\n                res = temp + s[0:i]\n            else:\n                res = temp + s[0:i][::-1]\n        if res != '' and res < minm:\n            minm = res\n            pos = i\n    print(minm)\n    print(pos + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = sorted(a)\n    indices = [i for (i, x) in enumerate(a) if x == b[0]]\n    ans = a\n    set1 = {}\n    for j in indices:\n        if (n - j) % 2 == 0:\n            s1 = a[j:n] + a[0:j]\n        else:\n            s1 = a[j:n] + a[0:j][::-1]\n        if set1.get(s1, 0) == 0:\n            set1[s1] = j + 1\n        ans = min(ans, s1)\n    print(ans)\n    print(set1[ans])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    x = min(list(s))\n    t = s\n    m = 1\n    for i in range(n):\n        if s[i] == x:\n            if i != n - 1:\n                y = s[i:]\n                if len(y) % 2 == 0:\n                    y += s[:i]\n                else:\n                    y += s[:i][::-1]\n            else:\n                y = s[::-1]\n            if t > y:\n                t = y\n                m = i + 1\n            elif t == y:\n                m = min(m, i + 1)\n    print(t)\n    print(m)", "t = input()\nfor _ in range(int(t)):\n    n = int(input())\n    s = input()\n    mn = min(s)\n    ind = []\n    for i in range(n):\n        if s[i] == mn:\n            ind.append(i)\n    ans = 'z' * (n + 1)\n    k = -1\n    parity_len = n % 2\n    for i in ind:\n        parity_curr = i % 2\n        front = s[i:i + n]\n        rest = s[0:i]\n        if parity_len != parity_curr:\n            rest = rest[::-1]\n        front = front + rest\n        if front < ans:\n            ans = front\n            k = i\n    print(ans)\n    print(k + 1)", "for _ in range(int(input())):\n    n = int(input())\n    min_string = 'z' * n\n    s = input()\n    for k in range(1, n + 1):\n        if (n - k) % 2 == 0:\n            candidate = s[k - 1:n] + s[:k - 1][::-1]\n        else:\n            candidate = s[k - 1:n] + s[:k - 1]\n        if candidate < min_string:\n            min_string = candidate\n            accepted_k = k\n    print(min_string)\n    print(accepted_k)", "t = int(input())\nfor r in range(t):\n    n = int(input())\n    y = input()\n    a = []\n    for i in range(n):\n        if (n - i) % 2 == 1:\n            a.append(y[i:] + y[:i][::-1])\n        else:\n            a.append(y[i:] + y[:i])\n    ans = 0\n    for i in range(n - 1):\n        if a[ans] > a[i + 1]:\n            ans = i + 1\n    print(a[ans])\n    print(ans + 1)", "t = int(input())\nfor _ in range(t):\n    l = int(input())\n    s = input()\n    ans = s\n    ansl = 1\n    for i in range(l):\n        ns = s[i:] + s[:i][::-1 if l - i & 1 else 1]\n        if ns < ans:\n            ans = ns\n            ansl = i + 1\n    print(ans)\n    print(ansl)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = ''\n    ansk = -1\n    for k in range(1, n + 1):\n        hilu = s[:k - 1]\n        if n % 2 == 0 and k % 2 == 0:\n            hilu = hilu[::-1]\n        if n % 2 != 0 and k % 2 != 0:\n            hilu = hilu[::-1]\n        yo = s[k - 1:] + hilu\n        if ans == '':\n            ans = yo\n            ansk = k\n        elif yo < ans:\n            ans = yo\n            ansk = k\n    print(ans)\n    print(ansk)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        N = int(input())\n        S = input().strip()\n        ans = []\n        for k in range(1, N + 1):\n            tmp = S[:]\n            if k == 1:\n                pass\n            elif (N + k) % 2 == 1:\n                tmp = tmp[k - 1:] + tmp[:k - 1]\n            else:\n                tmp = tmp[k - 1:] + tmp[:k - 1][::-1]\n            ans.append([tmp[:], k])\n        ans.sort()\n        print(ans[0][0])\n        print(ans[0][1])\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    arr = []\n    for k in range(0, n):\n        if n % 2 == 0:\n            if k % 2 == 1:\n                ns = s[k:] + s[:k][::-1]\n            else:\n                ns = s[k:] + s[:k]\n        elif k % 2 == 0:\n            ns = s[k:] + s[:k][::-1]\n        else:\n            ns = s[k:] + s[:k]\n        arr.append((ns, k + 1))\n    arr.sort(key=lambda x: x[0])\n    print(arr[0][0])\n    print(arr[0][1])", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = input()\n    g = a\n    b = 0\n    for i in range(n):\n        d = a[:i]\n        if (n - i) % 2 == 0:\n            c = a[i:] + d\n        else:\n            c = a[i:] + d[::-1]\n        if c < g:\n            g = c\n            b = i + 1\n    print(g)\n    if b == 0:\n        print(1)\n    else:\n        print(b)", "e = int(input())\np = []\nf = []\nfor ee in range(e):\n    n = int(input())\n    s = str(input())\n    sr = s\n    words = []\n    er = []\n    er.append(s)\n    words.append(s)\n    for k in range(2, n + 1):\n        j = ''\n        j = s[k - 1:]\n        if (len(s) - k + 1) % 2 == 0:\n            j = j + s[:k - 1]\n        else:\n            g = s[:k - 1]\n            g = g[::-1]\n            j = j + g\n        words.append(j)\n        er.append(j)\n    words.sort()\n    for i in range(len(er)):\n        if words[0] == er[i]:\n            f.append(i + 1)\n            break\n    p.append(words[0])\nfor i in range(len(p)):\n    print(p[i])\n    print(f[i])", "def f():\n    n = int(input())\n    a = input()\n    mini = 'z' * 5001\n    kp = 0\n    for k in range(1, len(a) + 1):\n        if (len(a) - k + 1) % 2 == 0:\n            s = a[k - 1:len(a)] + a[0:k - 1]\n            if s < mini:\n                mini = s\n                kp = k\n        else:\n            s = a[k - 1:len(a)] + a[0:k - 1][::-1]\n            if s < mini:\n                mini = s\n                kp = k\n    print(mini)\n    print(kp)\nfor i in range(int(input())):\n    f()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    st = input()\n    l = []\n    l.append(st)\n    for k in range(2, n + 1):\n        if (n + 1 - k) % 2 != 0:\n            s = st[k - 1:n] + st[0:k - 1][::-1]\n            l.append(s)\n        else:\n            s = st[k - 1:n] + st[0:k - 1]\n            l.append(s)\n    p = l.copy()\n    l.sort()\n    print(l[0])\n    print(p.index(l[0]) + 1)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    r = list(s)\n    a = min(r)\n    mink = 1\n    wow = s\n    for i in range(n):\n        if r[i] == a:\n            temp = s[i:] + (s[:i] if (n - i) % 2 == 0 else s[:i][::-1])\n            if temp < wow:\n                wow = temp\n                mink = i + 1\n    print(wow)\n    print(mink)", "def swap(s, k):\n    if (len(s) + k) % 2 == 0:\n        s = s[k - 1:] + s[0:k - 1][::-1]\n    else:\n        s = s[k - 1:] + s[0:k - 1]\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = [(s, 1)]\n    for i in range(2, n + 1):\n        ans.append((swap(s, i), i))\n    ans = min(ans)\n    print(ans[0])\n    print(ans[1])", "def getModifyStrig(s, k, n):\n    pre = s[k - 1:]\n    suff = s[0:k - 1]\n    if (n - (k - 1)) % 2 == 1:\n        suff = suff[::-1]\n    return pre + suff\ntest = int(input().strip())\nwhile test != 0:\n    n = int(input().strip())\n    s = input().strip()\n    ans = getModifyStrig(s, 1, n)\n    k = 1\n    for i in range(2, n + 1):\n        temp = getModifyStrig(s, i, n)\n        if temp < ans:\n            ans = temp\n            k = i\n    print(ans)\n    print(k)\n    test -= 1", "t = 0\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    str = ''\n    str = input()\n    ans_str = ''\n    ans_ind = 0\n    for i in range(n):\n        if (n - i + 1) % 2 == 0:\n            new_str = str[i:n] + str[0:i][::-1]\n        else:\n            new_str = str[i:n] + str[0:i]\n        if i == 0:\n            ans_str = new_str\n            ans_ind = 0\n        elif new_str < ans_str:\n            ans_str = new_str\n            ans_ind = i\n    print(ans_str)\n    print(ans_ind + 1)"]