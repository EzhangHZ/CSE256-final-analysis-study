["from sys import stdin\nfrom collections import defaultdict\nfrom bisect import insort, bisect_left\nfrom math import ceil\n\ndef solve(n, arr, start):\n    ans = 0\n    for i in range(n):\n        if arr[i]:\n            ans += abs(start - i)\n            start += 2\n    return ans\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(lambda x: int(x) % 2, stdin.readline().split()))\n    if n == 1:\n        print(0)\n    else:\n        odd = sum(arr)\n        even = n - odd\n        if abs(odd - even) > 1:\n            print(-1)\n        else:\n            oddidx = 0\n            if even == odd:\n                print(min(solve(n, arr, 0), solve(n, arr, 1)))\n            elif even > odd:\n                print(solve(n, arr, 1))\n            else:\n                print(solve(n, arr, 0))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    (a, b, c, d) = (0, 0, 0, 0)\n    for i in range(n):\n        if w[i] % 2:\n            c += 1\n            a += abs(c - d)\n        else:\n            d += 1\n            b += abs(c - d)\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(b)\n    elif d > c:\n        print(a)\n    else:\n        print(min(a, b))", "def main():\n    t = int(input())\n    n = [None for _ in range(t)]\n    a = [[] for _ in range(t)]\n    for i in range(t):\n        n[i] = int(input())\n        a[i] = list(map(int, input().split()))\n    ans = [10 ** 18 for _ in range(t)]\n    for i in range(t):\n        odd = 0\n        even = 0\n        for j in range(n[i]):\n            if a[i][j] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if abs(even - odd) >= 2:\n            ans[i] = -1\n            continue\n        if odd >= even:\n            odd_count = 0\n            move_count = 0\n            for j in range(n[i]):\n                if a[i][j] % 2 != 0:\n                    if odd_count < 0:\n                        move_count += -odd_count\n                    odd_count += 1\n                else:\n                    if odd_count > 1:\n                        move_count += odd_count - 1\n                    odd_count -= 1\n            ans[i] = min(ans[i], move_count)\n        if even >= odd:\n            even_count = 0\n            move_count = 0\n            for j in range(n[i]):\n                if a[i][j] % 2 == 0:\n                    if even_count < 0:\n                        move_count += -even_count\n                    even_count += 1\n                else:\n                    if even_count > 1:\n                        move_count += even_count - 1\n                    even_count -= 1\n            ans[i] = min(ans[i], move_count)\n    for x in ans:\n        print(x)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    odd = even = codd = ceven = 0\n    for i in s:\n        if i % 2:\n            odd += abs(ceven - codd)\n            codd += 1\n        else:\n            even += abs(ceven - codd)\n            ceven += 1\n    if abs(codd - ceven) > 1:\n        print(-1)\n    elif ceven > codd:\n        print(even)\n    elif codd > ceven:\n        print(odd)\n    else:\n        print(min(odd, even))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in arr:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    evs = []\n    ods = []\n    for (i, a) in enumerate(A):\n        if a % 2:\n            ods.append(i)\n        else:\n            evs.append(i)\n    if abs(len(ods) - len(evs)) > 1:\n        print(-1)\n        continue\n    if len(ods) > len(evs):\n        arr = [i * 2 for i in range(N // 2 + 1)]\n        ans = 0\n        for (a, b) in zip(arr, ods):\n            ans += abs(a - b)\n        print(ans)\n    elif len(ods) < len(evs):\n        arr = [i * 2 for i in range(N // 2 + 1)]\n        ans = 0\n        for (a, b) in zip(arr, evs):\n            ans += abs(a - b)\n        print(ans)\n    else:\n        arr = [i * 2 for i in range(N)]\n        ans1 = 0\n        for (a, b) in zip(arr, ods):\n            ans1 += abs(a - b)\n        ans2 = 0\n        for (a, b) in zip(arr, evs):\n            ans2 += abs(a - b)\n        print(min(ans1, ans2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "from re import A\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef func():\n    n = inp()\n    l = seq()\n    even = 0\n    even_first = 0\n    odd = 0\n    odd_first = 0\n    for i in range(n):\n        if l[i] % 2:\n            odd_first += abs(even - odd)\n            odd += 1\n        else:\n            even_first += abs(even - odd)\n            even += 1\n    if abs(odd - even) > 1:\n        return -1\n    elif even > odd:\n        return even_first\n    elif odd > even:\n        return odd_first\n    else:\n        return min(even_first, odd_first)\nt = inp()\nfor i in range(t):\n    print(func())", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ce = 0\n    co = 0\n    c1 = 0\n    d1 = 0\n    for x in a:\n        if x % 2 == 0:\n            c1 += abs(co - ce)\n            ce += 1\n        else:\n            d1 += abs(co - ce)\n            co += 1\n    if abs(co - ce) > 1:\n        print(-1)\n    elif ce > co:\n        print(c1)\n    elif ce < co:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for __ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = 0\n    a0 = 0\n    b = 0\n    b0 = 0\n    for i in range(n):\n        if s[i] % 2 == 0:\n            a0 += abs(a - b)\n            a += 1\n        else:\n            b0 += abs(a - b)\n            b += 1\n    if abs(a - b) > 1:\n        print(-1)\n    elif a > b:\n        print(a0)\n    elif b > a:\n        print(b0)\n    else:\n        print(min(a0, b0))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    c = [0] + list(map(int, sys.stdin.readline().split()))\n    a = []\n    b = []\n    ans = 0\n    for i in range(1, n + 1):\n        if c[i] & 1:\n            a.append(i)\n        else:\n            b.append(i)\n    if abs(len(a) - len(b)) > 1:\n        ans = -1\n    elif len(a) > len(b):\n        for j in range(len(a)):\n            ans += abs(a[j] - 2 * j - 1)\n    elif len(a) < len(b):\n        for x in range(len(b)):\n            ans += abs(b[x] - 2 * x - 1)\n    else:\n        c1 = 0\n        c2 = 0\n        for y in range(len(a)):\n            c1 += abs(a[y] - 2 * y - 1)\n            c2 += abs(b[y] - 2 * y - 1)\n        ans = min(c1, c2)\n    print(ans)\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "iteration = int(input())\nwhile iteration != 0:\n    iteration -= 1\n    n = int(input())\n    inp = list(map(int, input().split()))\n    even = 0\n    e = 0\n    odd = 0\n    o = 0\n    for i in inp:\n        if int(i) % 2 == 0:\n            e += abs(even - odd)\n            even += 1\n        else:\n            o += abs(even - odd)\n            odd += 1\n    if abs(even - odd) > 1:\n        print(-1)\n    elif even > odd:\n        print(e)\n    elif odd > even:\n        print(o)\n    else:\n        print(min(e, o))", "t = int(input())\n\ndef odds_at_odd_pos(n, odds_pos):\n    tot = 0\n    j = 0\n    for i in range(1, n, 2):\n        tot += abs(i - odds_pos[j])\n        j += 1\n    return tot\n\ndef odds_at_even_pos(n, odds_pos):\n    tot = 0\n    j = 0\n    for i in range(0, n, 2):\n        tot += abs(i - odds_pos[j])\n        j += 1\n    return tot\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odds_pos = []\n    for i in range(n):\n        if arr[i] % 2:\n            odds_pos.append(i)\n    odds = len(odds_pos)\n    if n % 2 == 0:\n        if odds == n // 2:\n            print(min(odds_at_even_pos(n, odds_pos), odds_at_odd_pos(n, odds_pos)))\n        else:\n            print(-1)\n    elif odds == n // 2:\n        print(odds_at_odd_pos(n, odds_pos))\n    elif odds == n // 2 + 1:\n        print(odds_at_even_pos(n, odds_pos))\n    else:\n        print(-1)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    o = []\n    e = []\n    for i in range(n):\n        if a[i] % 2 == 1:\n            o.append(i)\n        else:\n            e.append(i)\n    if abs(len(o) - len(e)) > 1:\n        print(-1)\n    elif len(o) == len(e):\n        ans1 = ans2 = 0\n        for i in range(0, n, 2):\n            ans1 += abs(i - o[i // 2])\n        for i in range(0, n, 2):\n            ans2 += abs(i - e[i // 2])\n        print(min(ans1, ans2))\n    else:\n        ans = 0\n        if len(o) > len(e):\n            for i in range(0, n, 2):\n                ans += abs(i - o[i // 2])\n        else:\n            for i in range(0, n, 2):\n                ans += abs(i - e[i // 2])\n        print(ans)", "iteration = int(input())\nwhile iteration != 0:\n    iteration -= 1\n    n = int(input())\n    inp = list(map(int, input().split()))\n    even = 0\n    e = 0\n    odd = 0\n    o = 0\n    for i in inp:\n        if int(i) % 2 == 0:\n            e += abs(even - odd)\n            even += 1\n        else:\n            o += abs(even - odd)\n            odd += 1\n    if abs(even - odd) > 1:\n        print(-1)\n    elif even > odd:\n        print(e)\n    elif odd > even:\n        print(o)\n    else:\n        print(min(e, o))", "def readline():\n    return map(int, input().split())\n\ndef first(a, parity):\n    idx = 0\n    for (i, x) in enumerate(a):\n        if x == parity:\n            yield abs(i - idx)\n            idx += 2\n\ndef solve():\n    n = int(input())\n    a = [x % 2 for x in readline()]\n    even = a.count(0)\n    odd = a.count(1)\n    if abs(even - odd) > 1:\n        return -1\n    if even > odd:\n        return sum(first(a, 0))\n    elif even < odd:\n        return sum(first(a, 1))\n    else:\n        return min(sum(first(a, 0)), sum(first(a, 1)))\nT = int(input())\nfor _ in range(T):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (e, o, l, i) = (0, 0, [], 0)\n    for el in a:\n        if el % 2:\n            o += 1\n        else:\n            e += 1\n            l += [i]\n        i += 1\n    if abs(e - o) > 1:\n        print(-1)\n        continue\n    (first_possibility, second_possibility, only_possibility) = (0, 0, 0)\n    if e == o:\n        for i in range(e):\n            first_possibility += abs(i * 2 - l[i])\n            second_possibility += abs(i * 2 + 1 - l[i])\n        print(min(first_possibility, second_possibility))\n        continue\n    if e > o:\n        for i in range(e):\n            only_possibility += abs(2 * i - l[i])\n        print(only_possibility)\n    else:\n        for i in range(e):\n            only_possibility += abs(2 * i + 1 - l[i])\n        print(only_possibility)", "def readline():\n    return map(int, input().split())\n\ndef first(a, parity):\n    cursor = 0\n    for (i, x) in enumerate(a):\n        if x == parity:\n            yield abs(i - cursor)\n            cursor += 2\n\ndef solve():\n    n = int(input())\n    a = [x & 1 for x in readline()]\n    even = a.count(0)\n    odd = a.count(1)\n    assert even + odd == n\n    if abs(even - odd) > 1:\n        return -1\n    if even > odd:\n        return sum(first(a, 0))\n    elif odd > even:\n        return sum(first(a, 1))\n    else:\n        return min((sum(first(a, parity)) for parity in (0, 1)))\nt = int(input())\nfor __ in range(t):\n    print(solve())", "def doWork():\n    n = int(input())\n    a = map(int, input().split())\n    a = [x % 2 for x in a]\n    pos1 = [i for (i, x) in enumerate(a) if x == 0]\n    pos2 = [i for (i, x) in enumerate(a) if x == 1]\n    if abs(len(pos1) - len(pos2)) > 1:\n        print(-1)\n        return\n    if len(pos1) > len(pos2):\n        res = sum([abs(pos - i * 2) for (i, pos) in enumerate(pos1)])\n    elif len(pos1) < len(pos2):\n        res = sum([abs(pos - i * 2) for (i, pos) in enumerate(pos2)])\n    else:\n        res = min(sum([abs(pos - i * 2) for (i, pos) in enumerate(pos1)]), sum([abs(pos - i * 2) for (i, pos) in enumerate(pos2)]))\n    print(res)\nt = int(input())\nfor _ in range(t):\n    doWork()", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        t = [x % 2 for x in a]\n        (odd, even) = (t.count(1), t.count(0))\n        if abs(odd - even) > 1:\n            print(-1)\n            continue\n        ans1 = 0\n        ans2 = 0\n        if odd > even:\n            curr = 0\n            for i in range(n):\n                if t[i] == 1:\n                    ans1 += abs(curr - i)\n                    curr += 2\n            print(ans1)\n        elif even > odd:\n            curr = 0\n            for i in range(n):\n                if t[i] == 0:\n                    ans1 += abs(curr - i)\n                    curr += 2\n            print(ans1)\n        else:\n            curr1 = 0\n            curr2 = 1\n            for i in range(n):\n                if t[i] == 1:\n                    ans1 += abs(curr1 - i)\n                    ans2 += abs(curr2 - i)\n                    curr1 += 2\n                    curr2 += 2\n            print(min(ans1, ans2))\nmain()", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (o, e, oo, ee, co, x) = ([], [], [], [], 0, 0)\n    for jj in range(n):\n        if a[jj] % 2:\n            o.append(jj)\n        else:\n            e.append(jj)\n    if n % 2 == 0:\n        if len(o) == len(e):\n            for jj in range(len(o)):\n                co += abs(o[jj] - x)\n                x += 2\n            (co1, x) = (0, 0)\n            for jj in range(len(o)):\n                co1 += abs(e[jj] - x)\n                x += 2\n            co = min(co, co1)\n        else:\n            co = -1\n    elif abs(len(o) - len(e)) == 1:\n        if len(o) > len(e):\n            for jj in range(len(o)):\n                co += abs(o[jj] - x)\n                x += 2\n        else:\n            for jj in range(len(e)):\n                co += abs(e[jj] - x)\n                x += 2\n    else:\n        co = -1\n    print(co)", "def func(arr, x):\n    d = 0\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != x:\n            d += x - arr[i]\n        ans += abs(d)\n        x = 1 - x\n    return ans\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] % 2\n    s0 = a.count(0)\n    s1 = a.count(1)\n    if n % 2 == 0:\n        if s0 != s1:\n            print(-1)\n        else:\n            print(min(func(a, 0), func(a, 1)))\n    elif s0 == s1 + 1:\n        print(func(a, 0))\n    elif s1 == s0 + 1:\n        print(func(a, 1))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for _ in range(int(input())):\n    n = int(input())\n    take = list(map(int, input().split()))\n    even_t = even_c = odd_t = odd_c = 0\n    for i in take:\n        if i % 2 == 0:\n            even_t += abs(even_c - odd_c)\n            even_c += 1\n        else:\n            odd_t += abs(even_c - odd_c)\n            odd_c += 1\n    if abs(odd_c - even_c) > 1:\n        print(-1)\n    elif even_c > odd_c:\n        print(even_t)\n    elif even_c < odd_c:\n        print(odd_t)\n    else:\n        print(min(even_t, odd_t))", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    prev = A[0] % 2\n    r = 1\n    m = 0\n    for a in A[1:]:\n        if a % 2 != prev:\n            if r == 1:\n                prev = a % 2\n            else:\n                r -= 1\n                m += r\n        else:\n            r += 1\n    m = m if r == 1 else -1\n    prev = A[0] % 2\n    r = 1\n    m2 = 0\n    for a in A[1:]:\n        if a % 2 != prev:\n            if m2:\n                if r == 1:\n                    prev = a % 2\n                else:\n                    r -= 1\n                    m2 += r\n            else:\n                m2 += r\n        else:\n            r += 1\n    m2 = m2 if r == 1 else -1\n    print(m if m2 == -1 else m2 if m == -1 else min(m, m2))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n\n    def fun(arr, n):\n        e = 0\n        o = 0\n        for i in range(n):\n            if arr[i] % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if abs(e - o) > 1:\n            return -1\n        elif e == o:\n            ex = 0\n            ox = 0\n            c = 0\n            for i in range(n):\n                if arr[i] % 2 == 0:\n                    ex += abs(i - c)\n                    c += 2\n            c = 0\n            for i in range(n):\n                if arr[i] % 2 == 1:\n                    ox += abs(i - c)\n                    c += 2\n            return min(ex, ox)\n        elif e > o:\n            ex = 0\n            c = 0\n            for i in range(n):\n                if arr[i] % 2 == 0:\n                    ex += abs(i - c)\n                    c += 2\n            return ex\n        else:\n            ox = 0\n            c = 0\n            for i in range(n):\n                if arr[i] % 2 == 1:\n                    ox += abs(i - c)\n                    c += 2\n            return ox\n    print(fun(arr, n))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "for __ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = 0\n    a0 = 0\n    b = 0\n    b0 = 0\n    for i in range(n):\n        if s[i] % 2 == 0:\n            a0 += abs(a - b)\n            a += 1\n        else:\n            b0 += abs(a - b)\n            b += 1\n    if abs(a - b) > 1:\n        print(-1)\n    elif a > b:\n        print(a0)\n    elif b > a:\n        print(b0)\n    else:\n        print(min(a0, b0))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = []\n    for i in range(n):\n        if a[i] % 2 == 1:\n            odd.append(i)\n    cur1 = 0\n    cur2 = 1\n    ans1 = 0\n    ans2 = 0\n    for i in odd:\n        ans1 += abs(i - cur1)\n        ans2 += abs(i - cur2)\n        cur1 += 2\n        cur2 += 2\n    if abs(len(a) - len(odd) - len(odd)) <= 1:\n        if len(a) - len(odd) - len(odd) == 1:\n            print(ans2)\n        elif len(a) - len(odd) - len(odd) == -1:\n            print(ans1)\n        else:\n            print(min(ans1, ans2))\n    else:\n        print(-1)", "def case_odd(even, odd):\n    if len(even) > len(odd):\n        a = even.copy()\n    else:\n        a = odd.copy()\n    b = 0\n    for (i, el) in enumerate(a):\n        b += abs(el - 2 * i)\n    return b\n\ndef case_even(even, odd):\n    a = 0\n    b = 0\n    for (i, el) in enumerate(odd):\n        a += abs(el - 2 * i)\n    for (i, el) in enumerate(even):\n        b += abs(el - 2 * i)\n    return min(a, b)\n\ndef check_n_run(x, y, z, p, q):\n    if x % 2 == 0:\n        if y == z:\n            return case_even(p, q)\n        else:\n            return -1\n    elif abs(y - z) == 1:\n        return case_odd(p, q)\n    else:\n        return -1\n\ndef solve():\n    even = []\n    odd = []\n    for (i, el) in enumerate(eins):\n        if el % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return check_n_run(n, len(even), len(odd), even, odd)\nt = int(input())\nfor cases in range(t):\n    n = int(input())\n    eins = input().split()\n    eins = list(map(int, eins))\n    print(solve())", "import math\ndebug = True\n\ndef pprint(*args, delimiter='#', amount=10):\n    if debug:\n        print('{0} DEBUG {0}'.format(delimiter * amount))\n        print(*args)\n        print('{0} ----- {0}'.format('-' * amount))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = [i for i in range(n) if a[i] % 2 == 0]\n    odd = [i for i in range(n) if a[i] % 2 != 0]\n    if n % 2 == 0 and len(even) != len(odd):\n        return -1\n    if n % 2 != 0 and abs(len(even) - len(odd)) != 1:\n        return -1\n    if n % 2 == 0:\n        (ans_even, ans_odd) = (0, 0)\n        index = 0\n        for elem in even:\n            ans_even += abs(elem - index)\n            index += 2\n        index = 0\n        for elem in odd:\n            ans_odd += abs(elem - index)\n            index += 2\n        return min(ans_even, ans_odd)\n    ans = 0\n    index = 0\n    if len(odd) > len(even):\n        for elem in odd:\n            ans += abs(index - elem)\n            index += 2\n    else:\n        for elem in even:\n            ans += abs(index - elem)\n            index += 2\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = [*map(lambda x: int(x) % 2, input().split())]\n    c1 = a.count(1)\n    if abs(n - 2 * c1) > 1:\n        print(-1)\n        continue\n    c = 0\n    r1 = 0\n    for i in range(n):\n        if a[i]:\n            r1 += abs(c - i)\n            c += 2\n    if c1 < n - c1:\n        r1 = float('inf')\n    c = 0\n    r0 = 0\n    for i in range(n):\n        if a[i] < 1:\n            r0 += abs(c - i)\n            c += 2\n    if c1 > n - c1:\n        r0 = float('inf')\n    print(min(r0, r1))", "for _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    o = 0\n    e = 0\n    for i in range(n):\n        ai[i] = ai[i] % 2\n        if ai[i] % 2 == 0:\n            e = e + 1\n        else:\n            o = o + 1\n    if abs(e - o) > 1:\n        print(-1)\n    else:\n        a = ans = 0\n        if e == o + 1:\n            a = 1\n            for i in range(n):\n                if ai[i] == 1:\n                    ans = ans + abs(i - a)\n                    a = a + 2\n        elif o == e + 1:\n            for i in range(n):\n                if ai[i] == 1:\n                    ans = ans + abs(i - a)\n                    a = a + 2\n        else:\n            ans1 = ans2 = 0\n            for i in range(n):\n                if ai[i] == 1:\n                    ans1 = ans1 + abs(i - a)\n                    a = a + 2\n            a = 1\n            for i in range(n):\n                if ai[i] == 1:\n                    ans2 = ans2 + abs(i - a)\n                    a = a + 2\n            ans = min(ans1, ans2)\n        print(ans)", "def f(l):\n    odd = []\n    even = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if abs(len(odd) - len(even)) > 1:\n        return -1\n    ans = 0\n    if len(odd) > len(even):\n        for i in range(len(odd)):\n            ans += abs(odd[i] - 2 * i)\n        return ans\n    if len(odd) < len(even):\n        for i in range(len(even)):\n            ans += abs(even[i] - 2 * i)\n        return ans\n    ans2 = 0\n    for i in range(len(odd)):\n        ans += abs(odd[i] - 2 * i)\n    for i in range(len(odd)):\n        ans2 += abs(odd[i] - (2 * i + 1))\n    return min(ans, ans2)\nn = int(input())\nfor i in range(n):\n    a = input()\n    lis = input()\n    lis = lis.split()\n    for i in range(len(lis)):\n        lis[i] = int(lis[i])\n    print(f(lis))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    for x in a:\n        if x % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    if abs(odd - even) > 1:\n        print(-1)\n    elif odd == even:\n        ans1 = 0\n        lse1 = 1\n        for i in range(n):\n            if a[i] % 2 == 0:\n                ans1 += abs(i - lse1)\n                lse1 += 2\n        ans2 = 0\n        lso2 = 1\n        for i in range(n):\n            if a[i] % 2 == 1:\n                ans2 += abs(i - lso2)\n                lso2 += 2\n        print(min(ans1, ans2))\n    elif odd < even:\n        ans3 = 0\n        lso3 = 1\n        for i in range(n):\n            if a[i] % 2 == 1:\n                ans3 += abs(i - lso3)\n                lso3 += 2\n        print(ans3)\n    elif odd > even:\n        ans4 = 0\n        lse4 = 1\n        for i in range(n):\n            if a[i] % 2 == 0:\n                ans4 += abs(i - lse4)\n                lse4 += 2\n        print(ans4)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    (l, r, temp) = ([], [], 0)\n    for i in range(n):\n        if a[i] % 2 == 0:\n            r.append(i)\n        else:\n            l.append(i)\n    if n % 2:\n        if abs(len(l) - len(r)) == 1:\n            if len(l) > len(r):\n                ans1 = 0\n                for i in range(len(l)):\n                    ans1 += abs(l[i] - temp)\n                    temp += 2\n                print(ans1)\n            else:\n                ans1 = 0\n                for i in range(len(r)):\n                    ans1 += abs(r[i] - temp)\n                    temp += 2\n                print(ans1)\n        else:\n            print(-1)\n    elif len(l) == len(r):\n        ans1 = 0\n        for i in range(len(l)):\n            ans1 += abs(l[i] - temp)\n            temp += 2\n        (res, temp) = (0, 0)\n        for i in range(len(l)):\n            res += abs(r[i] - temp)\n            temp += 2\n        print(min(ans1, res))\n    else:\n        print(-1)", "def f(l):\n    odd = []\n    even = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if abs(len(odd) - len(even)) > 1:\n        return -1\n    ans = 0\n    if len(odd) > len(even):\n        for i in range(len(odd)):\n            ans += abs(odd[i] - 2 * i)\n        return ans\n    if len(odd) < len(even):\n        for i in range(len(even)):\n            ans += abs(even[i] - 2 * i)\n        return ans\n    ans2 = 0\n    for i in range(len(odd)):\n        ans += abs(odd[i] - 2 * i)\n    for i in range(len(odd)):\n        ans2 += abs(odd[i] - (2 * i + 1))\n    return min(ans, ans2)\nn = int(input())\nfor i in range(n):\n    a = input()\n    lis = input()\n    lis = lis.split()\n    for i in range(len(lis)):\n        lis[i] = int(lis[i])\n    print(f(lis))", "def check(odd, even):\n    if abs(len(even) - len(odd)) > 1:\n        return -1\n    elif len(even) == 0 or len(odd) == 0:\n        return 0\n    elif len(even) == len(odd):\n        countEven = 0\n        index = 0\n        for i in range(len(even)):\n            countEven += abs(even[i] - index)\n            index += 2\n        countOdd = 0\n        index = 0\n        for i in range(len(odd)):\n            countOdd += abs(odd[i] - index)\n            index += 2\n        return min(countEven, countOdd)\n    else:\n        index = 1\n        if len(even) > len(odd):\n            index = 0\n        countEven = 0\n        for i in range(len(even)):\n            countEven += abs(even[i] - index)\n            index += 2\n        return countEven\nfor t in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    even = []\n    odd = []\n    for i in range(n):\n        if int(arr[i]) % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(check(odd, even))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    (pos, idx) = ([[], []], data[0] % 2)\n    for i in range(n):\n        pos[data[i] % 2].append(i)\n    if len(pos[0]) not in [n // 2, n // 2 + 1] or len(pos[1]) not in [n // 2, n // 2 + 1]:\n        print(-1)\n        continue\n    (spot1, ans) = ([i for i in range(0, n, 2)], float('inf'))\n    for i in range(len(pos)):\n        if len(pos[i]) != len(spot1):\n            continue\n        temp_ans = 0\n        for j in range(len(pos[i])):\n            temp_ans += abs(spot1[j] - pos[i][j])\n        ans = min(temp_ans, ans)\n    print(ans)", "G = int(input())\nfor g in range(G):\n    n = int(input())\n    val = list(map(int, input().split()))\n    (a, b) = ([], [])\n    for i in range(n):\n        if val[i] & 1:\n            a.append(i + 1)\n        else:\n            b.append(i + 1)\n    A = len(a)\n    B = len(b)\n    if abs(A - B) > 1:\n        print(-1)\n        continue\n    ans = 0\n    if A > B:\n        for i in range(A):\n            ans += abs(a[i] - i * 2 - 1)\n    elif A < B:\n        for i in range(B):\n            ans += abs(b[i] - i * 2 - 1)\n    else:\n        (ans1, ans2) = (0, 0)\n        for i in range(A):\n            ans1 += abs(a[i] - i * 2 - 1)\n            ans2 += abs(b[i] - i * 2 - 1)\n        ans = min(ans1, ans2)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    (o, e) = ([], [])\n    arr = [int(w) for w in input().split(' ')]\n    (a, b) = (0, 0)\n    (ans1, ans2) = (-1, -1)\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            e.append(i)\n            a = a + 1\n        else:\n            o.append(i)\n            b = b + 1\n    if n % 2 == 0 and a == b:\n        ans1 = 0\n        ans2 = 0\n        j = 0\n        for i in range(n):\n            if i % 2 == 0:\n                ans1 = ans1 + abs(i - e[j])\n                j = j + 1\n        j = 0\n        for i in range(n):\n            if i % 2 != 0:\n                ans2 = ans2 + abs(i - e[j])\n                j = j + 1\n    elif n % 2 != 0 and a - b == 1:\n        ans = 0\n        j = 0\n        for i in range(n):\n            if i % 2 == 0:\n                ans = ans + abs(i - e[j])\n                j = j + 1\n    elif n % 2 != 0 and b - a == 1:\n        ans = 0\n        j = 0\n        for i in range(n):\n            if i % 2 != 0:\n                ans = ans + abs(i - e[j])\n                j = j + 1\n    else:\n        ans = -1\n    if ans1 != -1 and ans2 != -1:\n        ans = min(ans1, ans2)\n    print(ans)", "def getMinimal(f, r):\n    n = 0\n    a = 0\n    b = 0\n    for i in range(len(f) + len(r)):\n        if i % 2 == 0:\n            n = n + abs(i - f[a])\n            a = a + 1\n        else:\n            n = n + abs(i - r[b])\n            b = b + 1\n    return int(n / 2)\ntn = int(input())\nfor t in range(tn):\n    n = int(input())\n    arr = input().split(' ')\n    s1 = []\n    s2 = []\n    for i in range(len(arr)):\n        arr[i] = int(arr[i]) % 2\n        if arr[i] > 0:\n            s1.append(i)\n        else:\n            s2.append(i)\n    if abs(len(s1) - len(s2)) > 1:\n        print(-1)\n        continue\n    if n % 2 > 0:\n        if len(s1) > len(s2):\n            print(getMinimal(s1, s2))\n        else:\n            print(getMinimal(s2, s1))\n    else:\n        print(min(getMinimal(s1, s2), getMinimal(s2, s1)))", "def fun(y):\n    d = 0\n    ans = 0\n    for i in range(len(nums)):\n        if nums[i] != y:\n            d += y - nums[i]\n        ans += abs(d)\n        y ^= 1\n    return ans\n\ndef count_operations(n, nums):\n    f0 = 0\n    f1 = 0\n    for x in range(len(nums)):\n        nums[x] = nums[x] % 2\n        if nums[x] == 0:\n            f0 += 1\n        else:\n            f1 += 1\n    if n % 2 == 0:\n        if f0 == f1:\n            ans = min(fun(0), fun(1))\n            return ans\n        else:\n            return -1\n    elif f0 == f1 + 1:\n        return fun(0)\n    elif f1 == f0 + 1:\n        return fun(1)\n    else:\n        return -1\nt = int(input())\nfor y in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    print(count_operations(n, nums))", "def get_min_swaps(arr, start_pos):\n    ans = 0\n    odd_idx = 0\n    if start_pos == 0:\n        odd_idx = 1\n    for i in range(start_pos, len(arr), 2):\n        if arr[i] % 2 != 0:\n            for j in range(odd_idx, len(arr), 2):\n                if arr[j] % 2 != 1:\n                    odd_idx = j\n                    break\n            ans += abs(odd_idx - i)\n            odd_idx += 2\n    return ans\nT = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    num_odd = 0\n    for i in arr:\n        if i % 2 == 1:\n            num_odd += 1\n    num_even = len(arr) - num_odd\n    if abs(num_odd - num_even) > 1:\n        print(-1)\n    else:\n        if n % 2 == 0:\n            ans1 = get_min_swaps(arr, 0)\n            ans2 = get_min_swaps(arr, 1)\n            ans = min(ans1, ans2)\n        elif num_odd > num_even:\n            ans = get_min_swaps(arr, 1)\n        else:\n            ans = get_min_swaps(arr, 0)\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    best = float('inf')\n    for startLookingforEvens in range(0, 2):\n        (nOdds, nEvens) = (0, 0)\n        lookingForEven = startLookingforEvens == 0\n        moves = 0\n        for i in a:\n            if lookingForEven:\n                if i % 2 == 0:\n                    moves += nOdds\n                    if nOdds == 0:\n                        lookingForEven = False\n                    else:\n                        nOdds -= 1\n                else:\n                    nOdds += 1\n            elif i % 2 == 1:\n                moves += nEvens\n                if nEvens == 0:\n                    lookingForEven = True\n                else:\n                    nEvens -= 1\n            else:\n                nEvens += 1\n        if nOdds + nEvens == 0:\n            best = min(best, moves)\n    print(-1 if best == float('inf') else best)", "def solve(n, A):\n    (c, c1, d, d1) = (0, 0, 0, 0)\n    for a in A:\n        if a % 2 == 0:\n            c1 += abs(c - d)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        return -1\n    if c > d:\n        return c1\n    if d > c:\n        return d1\n    return min(c1, d1)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(solve(n, A))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    d = 0\n    d1 = 0\n    for j in l:\n        if j % 2 == 0:\n            c1 += abs(d - c)\n            c += 1\n        else:\n            d1 += abs(c - d)\n            d += 1\n    if abs(c - d) > 1:\n        print(-1)\n    elif c > d:\n        print(c1)\n    elif d > c:\n        print(d1)\n    else:\n        print(min(c1, d1))", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = [x % 2 for x in map(int, input().split())]\n        ones = sum(a)\n        if abs(ones * 2 - n) >= 2:\n            print(-1)\n            continue\n        if ones * 2 < n:\n            a = [1 - x for x in a]\n        if ones * 2 == n:\n            ans1 = sum((abs(x - y) for (x, y) in zip([i for (i, x) in enumerate(a) if x == 1], range(0, n, 2))))\n            ans2 = sum((abs(x - y) for (x, y) in zip([i for (i, x) in enumerate(a) if x == 1], range(1, n, 2))))\n            print(min(ans1, ans2))\n        else:\n            print(sum((abs(x - y) for (x, y) in zip([i for (i, x) in enumerate(a) if x == 1], range(0, n, 2)))))\nmain()", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (odd, even) = ([], [])\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    (a, b) = (0, 0)\n    if len(odd) != n // 2 + n % 2:\n        a = sys.maxsize\n    else:\n        for i in range(0, len(even)):\n            a += abs(2 * i + 1 - even[i])\n    if len(even) != n // 2 + n % 2:\n        b = sys.maxsize\n    else:\n        for i in range(0, len(odd)):\n            b += abs(2 * i + 1 - odd[i])\n    if min(a, b) == sys.maxsize:\n        print(-1)\n    else:\n        print(min(a, b))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    e = 0\n    o = 0\n    odd = []\n    for i in range(n):\n        if a[i] & 1:\n            o += 1\n            a[i] = 1\n            odd.append(i)\n        else:\n            e += 1\n            a[i] = 0\n    if abs(e - o) > 1:\n        print(-1)\n        continue\n    ans = 99999999999999\n    for i in [0, 1]:\n        if o != (n + 1 - i) // 2:\n            continue\n        val = 0\n        for j in range(o):\n            val += abs(i + 2 * j - odd[j])\n        ans = min(val, ans)\n    print(ans)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (c1, c2) = (0, 0)\n    c_even = 0\n    c_odd = 0\n    if n == 1:\n        print(0)\n        continue\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            c_even += 1\n        else:\n            c_odd += 1\n    if abs(c_even - c_odd) > 1:\n        print(-1)\n        continue\n    (ptr1, ptr2) = (0, 0)\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            c1 += abs(ptr1 - i)\n            ptr1 += 2\n        if arr[i] % 2 != 0:\n            c2 += abs(ptr2 - i)\n            ptr2 += 2\n    if c_even > c_odd:\n        print(c1)\n    elif c_odd > c_even:\n        print(c2)\n    else:\n        print(min(c1, c2))", "for _ in range(int(input())):\n    N = int(input())\n    A = [[], []]\n    for (i, j) in enumerate(map(int, input().split())):\n        A[j & 1].append(i)\n    if len(A[0]) + 1 < len(A[1]) or len(A[1]) + 1 < len(A[0]):\n        print(-1)\n        continue\n    ans = 2e+18\n    for i in [0, 1]:\n        if max(len(A[0]), len(A[1])) != len(A[i]):\n            continue\n        cur = 0\n        for j in range(0, N, 2):\n            cur += abs(j - A[i][j // 2])\n        ans = min(ans, cur)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    odd = 0\n    for i in arr:\n        if i & 1:\n            odd += 1\n    even = n - odd\n    if abs(odd - even) > 1:\n        print(-1)\n    else:\n        ans = 0\n        if n & 1:\n            if odd < even:\n                pos = 0\n                for i in range(n):\n                    if arr[i] % 2 == 0:\n                        ans += abs(i - pos)\n                        pos += 2\n            else:\n                pos = 0\n                for i in range(n):\n                    if arr[i] & 1:\n                        ans += abs(i - pos)\n                        pos += 2\n        else:\n            res1 = 0\n            res2 = 0\n            pos = 0\n            for i in range(n):\n                if arr[i] & 1:\n                    res1 += abs(i - pos)\n                    pos += 2\n            pos = 0\n            for i in range(n):\n                if arr[i] % 2 == 0:\n                    res2 += abs(i - pos)\n                    pos += 2\n            ans = min(res1, res2)\n        print(ans)", "import sys\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, sys.stdin.readline().split()))\n    S = 0\n    res = sys.maxsize\n    x = 0\n    for i in range(n):\n        a[i] = a[i] % 2\n    one = a.count(1)\n    zero = a.count(0)\n    if abs(one - zero) > 1:\n        print(-1)\n    elif one == zero:\n        for j in range(2):\n            S = 0\n            x = 0\n            for i in range(n):\n                if a[i] == j:\n                    S += abs(i - x)\n                    x += 2\n            res = min(S, res)\n        print(res)\n    else:\n        if one > zero:\n            j = 1\n        else:\n            j = 0\n        for i in range(n):\n            if a[i] == j:\n                S += abs(i - x)\n                x += 2\n        res = min(S, res)\n        print(res)", "def diff(a, b):\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(a[i] - b[i])\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = [[], []]\n    even = [[], []]\n    for i in range(n):\n        if a[i] & 1:\n            if i & 1:\n                odd[1].append(i)\n            else:\n                odd[0].append(i)\n        elif i & 1:\n            even[1].append(i)\n        else:\n            even[0].append(i)\n    if abs(len(odd[0]) + len(odd[1]) - len(even[0]) - len(even[1])) <= 1:\n        ans = float('inf')\n        if len(odd[0]) == len(even[1]):\n            ans = min(ans, diff(odd[0], even[1]))\n        if len(odd[1]) == len(even[0]):\n            ans = min(ans, diff(odd[1], even[0]))\n        print(ans)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    a = int(input())\n    b = [int(x) % 2 for x in input().split()]\n    g = [[], []]\n    for i in range(a):\n        g[b[i]].append(i)\n    (o, e) = (len(g[1]), len(g[0]))\n    if abs(o - e) > 1:\n        print(-1)\n        continue\n    ans1 = ans2 = 0\n    for i in range(0, a, 2):\n        ans1 += abs(g[o > e][i // 2] - i)\n    for i in range(0, a - 1, 2):\n        ans2 += abs(g[o < e][i // 2] - (i + 1))\n    print(min(ans1, ans2))", "loop = int(input())\nwhile loop > 0:\n    loop -= 1\n    evenCount = 0\n    evenIndex = [0]\n    oddIndex = [0]\n    n = int(input())\n    arr = [0]\n    rawInput = list(input().split())\n    for i in range(1, n + 1):\n        if int(rawInput[i - 1]) % 2 == 0:\n            arr.append(True)\n            evenCount += 1\n            evenIndex.append(i)\n        else:\n            arr.append(False)\n            oddIndex.append(i)\n    swapsEven = 0\n    swapsOdd = 0\n    t = n // 2\n    if n % 2 == 0 and evenCount != t:\n        print(-1)\n    elif n % 2 != 0 and (evenCount != t and evenCount != t + 1):\n        print(-1)\n    elif n % 2 == 0:\n        j = 1\n        for i in range(1, len(evenIndex)):\n            swapsEven += abs(evenIndex[i] - j)\n            j += 2\n        j = 1\n        for i in range(1, len(oddIndex)):\n            swapsOdd += abs(oddIndex[i] - j)\n            j += 2\n        print(min(swapsOdd, swapsEven))\n    elif len(evenIndex) > len(oddIndex):\n        j = 1\n        for i in range(1, len(evenIndex)):\n            swapsEven += abs(evenIndex[i] - j)\n            j += 2\n        print(swapsEven)\n    else:\n        j = 1\n        for i in range(1, len(oddIndex)):\n            swapsOdd += abs(oddIndex[i] - j)\n            j += 2\n        print(swapsOdd)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print('0')\n        continue\n    even_idx_pos = []\n    odd_idx_pos = []\n    even_pos = []\n    for (idx, ele) in enumerate(arr):\n        if ele % 2 == 0:\n            even_pos.append(idx)\n        if idx % 2 == 0:\n            even_idx_pos.append(idx)\n        else:\n            odd_idx_pos.append(idx)\n    res1 = 0\n    res2 = 0\n    if abs(len(even_pos) - (n - len(even_pos))) > 1:\n        print('-1')\n    elif len(even_pos) >= len(even_idx_pos) and len(even_pos) - (n - len(even_pos)) != 0:\n        for i in range(len(even_pos)):\n            res1 += abs(even_pos[i] - even_idx_pos[i])\n        print(res1)\n    elif len(even_pos) - (n - len(even_pos)) == 0:\n        for i in range(len(even_pos)):\n            res1 += abs(even_pos[i] - even_idx_pos[i])\n        for i in range(len(even_pos)):\n            res2 += abs(even_pos[i] - odd_idx_pos[i])\n        print(min(res1, res2))\n    else:\n        for i in range(len(odd_idx_pos)):\n            res2 += abs(even_pos[i] - odd_idx_pos[i])\n        print(res2)", "import sys\ntestcases = int(input())\nwhile testcases > 0:\n    n = int(input())\n    c = [0] + list(map(int, sys.stdin.readline().split()))\n    a = []\n    b = []\n    countr = 0\n    for i in range(1, n + 1):\n        if c[i] % 2 == 0:\n            a.append(i)\n        else:\n            b.append(i)\n    if abs(len(a) - len(b)) > 1:\n        countr = -1\n    elif len(a) > len(b):\n        for j in range(len(a)):\n            countr += abs(a[j] - 2 * j - 1)\n    elif len(a) < len(b):\n        for x in range(len(b)):\n            countr += abs(b[x] - 2 * x - 1)\n    else:\n        c1 = 0\n        c2 = 0\n        for y in range(len(a)):\n            c1 += abs(a[y] - 2 * y - 1)\n            c2 += abs(b[y] - 2 * y - 1)\n        countr = min(c1, c2)\n    print(countr)\n    testcases -= 1", "def solve(a, n):\n    if n <= 1:\n        return 0\n    e = 0\n    o = 0\n    for i in a:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    if abs(e - o) > 1:\n        return -1\n    ans1 = 0\n    ans2 = 0\n    even = []\n    odd = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(odd) != n // 2 + n % 2:\n        ans1 = float('inf')\n    else:\n        for i in range(len(even)):\n            ans1 += abs(2 * i + 1 - even[i])\n    if len(even) != n // 2 + n % 2:\n        ans2 = float('inf')\n    else:\n        for i in range(len(odd)):\n            ans2 += abs(2 * i + 1 - odd[i])\n    if ans1 == ans2 == float('inf'):\n        return -1\n    else:\n        return min(ans1, ans2)\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "import math\nimport heapq\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\n\ndef ans(l, a, f):\n    n = len(l)\n    (p1, p2) = ([], [])\n    for i in range(n):\n        if l[i] == f:\n            p1.append(i)\n        if a[i] == f:\n            p2.append(i)\n    s = 0\n    for i in range(len(p1)):\n        s += abs(p1[i] - p2[i])\n    return s\nfor _ in range(I()):\n    n = I()\n    l = L()\n    for i in range(n):\n        l[i] = l[i] % 2\n    o = l.count(1)\n    z = l.count(0)\n    if abs(o - z) > 1:\n        print(-1)\n        continue\n    if o > z:\n        a = [0] * n\n        for i in range(0, n, 2):\n            a[i] = 1\n        print(ans(l, a, 1))\n    elif z > o:\n        a = [1] * n\n        for i in range(0, n, 2):\n            a[i] = 0\n        print(ans(l, a, 0))\n    else:\n        a1 = [0] * n\n        a2 = [1] * n\n        for i in range(0, n, 2):\n            a1[i] = 1\n            a2[i] = 0\n        print(min(ans(l, a1, 0), ans(l, a2, 0)))", "for _ in range(int(input())):\n    n = map(int, input().split())\n    l = list(map(int, input().split()))\n    even = 0\n    odd = 0\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if max(even, odd) - min(even, odd) > 1:\n        print(-1)\n    elif max(even, odd) - min(even, odd) == 0:\n        ex = 0\n        en = 0\n        c = 0\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                ex = abs(i - c) + ex\n                c += 2\n        c = 0\n        for i in range(len(l)):\n            if l[i] % 2 != 0:\n                en = abs(i - c) + en\n                c += 2\n        print(min(ex, en))\n    elif even > odd:\n        ex = 0\n        c = 0\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                ex = abs(i - c) + ex\n                c += 2\n        print(ex)\n    else:\n        en = 0\n        c = 0\n        for i in range(len(l)):\n            if l[i] % 2 != 0:\n                en = abs(i - c) + en\n                c += 2\n        print(en)", "import math\nimport heapq\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\n\ndef ans(l, a, f):\n    n = len(l)\n    (p1, p2) = ([], [])\n    for i in range(n):\n        if l[i] == f:\n            p1.append(i)\n        if a[i] == f:\n            p2.append(i)\n    s = 0\n    for i in range(len(p1)):\n        s += abs(p1[i] - p2[i])\n    return s\nfor _ in range(I()):\n    n = I()\n    l = L()\n    for i in range(n):\n        l[i] = l[i] % 2\n    o = l.count(1)\n    z = l.count(0)\n    if abs(o - z) > 1:\n        print(-1)\n        continue\n    if o > z:\n        a = [0] * n\n        for i in range(0, n, 2):\n            a[i] = 1\n        print(ans(l, a, 1))\n    elif z > o:\n        a = [1] * n\n        for i in range(0, n, 2):\n            a[i] = 0\n        print(ans(l, a, 0))\n    else:\n        a1 = [0] * n\n        a2 = [1] * n\n        for i in range(0, n, 2):\n            a1[i] = 1\n            a2[i] = 0\n        print(min(ans(l, a1, 0), ans(l, a2, 0)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for j in range(n):\n        if a[j] % 2:\n            c += 1\n        else:\n            c -= 1\n    if abs(c) > 1:\n        print(-1)\n    elif c == 0:\n        ec = 0\n        s1 = 0\n        for j in range(n):\n            if a[j] % 2 != 0:\n                s1 += abs(j - ec * 2)\n                ec += 1\n        ec = 0\n        s = 0\n        for j in range(n):\n            if a[j] % 2 == 0:\n                s += abs(j - ec * 2)\n                ec += 1\n        print(min(s, s1))\n    elif c == 1:\n        ec = 0\n        s = 0\n        for j in range(n):\n            if a[j] % 2 != 0:\n                s += abs(j - ec * 2)\n                ec += 1\n        print(s)\n    elif c == -1:\n        ec = 0\n        s = 0\n        for j in range(n):\n            if a[j] % 2 == 0:\n                s += abs(j - ec * 2)\n                ec += 1\n        print(s)\n    else:\n        print('error')", "for test in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ji = 0\n    ou = 0\n    ans1 = float('inf')\n    ans2 = float('inf')\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ji += 1\n        else:\n            ou += 1\n    if abs(ji - ou) > 1:\n        print(-1)\n    else:\n        if ji - ou <= 0:\n            ans1 = 0\n            ouou = 0\n            for i in range(0, n):\n                if a[i] % 2 == 0:\n                    d = i - 2 * ouou\n                    if d < 0:\n                        d *= -1\n                    ans1 += d\n                    ouou += 1\n        if ji - ou >= 0:\n            ans2 = 0\n            jiji = 0\n            for i in range(0, n):\n                if a[i] % 2 == 1:\n                    d = i - 2 * jiji\n                    if d < 0:\n                        d *= -1\n                    ans2 += d\n                    jiji += 1\n        print(min(ans1, ans2))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 10 ** 12\n    for i in range(0, 2):\n        x = []\n        y = []\n        for j in range(i, n, 2):\n            x.append(j)\n        for j in range(0, n, 1):\n            if arr[j] % 2 == 0:\n                y.append(j)\n        if len(x) == len(y):\n            cur = 0\n            for j in range(len(x)):\n                cur += abs(x[j] - y[j])\n            ans = min(ans, cur)\n    if ans == 10 ** 12:\n        print(-1)\n    else:\n        print(ans)", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ipn()\n    a = ipl()\n    o = [i for i in range(n) if a[i] % 2 != 0]\n    e = [i for i in range(n) if a[i] % 2 == 0]\n    i = j = s1 = 0\n    for k in range(n):\n        if k % 2 == 0 and i < len(o):\n            s1 += abs(k - o[i])\n            i += 1\n        elif k % 2 == 1 and j < len(e):\n            s1 += abs(k - e[j])\n            j += 1\n        else:\n            s1 = inf\n    i = j = s2 = 0\n    for k in range(n):\n        if k % 2 == 1 and i < len(o):\n            s2 += abs(k - o[i])\n            i += 1\n        elif k % 2 == 0 and j < len(e):\n            s2 += abs(k - e[j])\n            j += 1\n        else:\n            s2 = inf\n    r = min(s1, s2)\n    print(-1 if r == inf else r // 2)\nt = ipn()\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    for a in arr:\n        if a & 1:\n            odd += 1\n        else:\n            even += 1\n    if abs(odd - even) > 1:\n        print(-1)\n    else:\n        l1 = []\n        l2 = []\n        l3 = []\n        l4 = []\n        for idx in range(n):\n            if idx % 2 == 0 and arr[idx] % 2 == 1:\n                l1.append(idx)\n            elif idx % 2 == 1 and arr[idx] % 2 == 0:\n                l2.append(idx)\n            if idx % 2 == 0 and arr[idx] % 2 == 0:\n                l3.append(idx)\n            elif idx % 2 == 1 and arr[idx] % 2 == 1:\n                l4.append(idx)\n        if len(l1) + len(l2) == 0 or len(l3) + len(l4) == 0:\n            print(0)\n            continue\n        ans1 = 0\n        ans2 = 0\n        if len(l1) == len(l2):\n            i = 0\n            while i < len(l1):\n                ans1 += abs(l1[i] - l2[i])\n                i += 1\n        else:\n            ans1 = 10000000000.0\n        if len(l3) == len(l4):\n            i = 0\n            while i < len(l3):\n                ans2 += abs(l3[i] - l4[i])\n                i += 1\n        else:\n            ans2 = 10000000000.0\n        ans = min(ans1, ans2)\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0, 0]\n    c = [[], []]\n    d = [[], []]\n    for i in range(n):\n        p[a[i] % 2] += 1\n        c[i % 2] += [i]\n        d[a[i] % 2] += [i]\n    if abs(p[0] - p[1]) >= 2:\n        print(-1)\n        continue\n    ans = 0\n    if p[0] == p[1]:\n        for i in range(len(d[0])):\n            ans += abs(c[0][i] - d[0][i])\n        for i in range(len(d[1])):\n            ans += abs(c[1][i] - d[1][i])\n        v = ans * 1\n        ans = 0\n        for i in range(len(d[0])):\n            ans += abs(c[1][i] - d[0][i])\n        for i in range(len(d[1])):\n            ans += abs(c[0][i] - d[1][i])\n        ans = min(ans, v)\n    else:\n        if len(d[0]) != len(c[0]):\n            (c[0], c[1]) = (c[1], c[0])\n        for i in range(len(d[0])):\n            ans += abs(c[0][i] - d[0][i])\n        for i in range(len(d[1])):\n            ans += abs(c[1][i] - d[1][i])\n    print(ans // 2)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport sys\nimport string\nimport random\nfrom typing import List\nsys.setrecursionlimit(99999)\n\ndef f(s):\n    return int(s) % 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(f, input().split()))\n    (a, b) = ([], [])\n    for (i, c) in enumerate(arr):\n        if c == 0:\n            a.append(i)\n        else:\n            b.append(i)\n    s = sum(arr)\n    if s > (n + 1) // 2 or n - s > (n + 1) // 2:\n        print(-1)\n        continue\n    tar = 1\n    ans = float('inf')\n    if n - s > s:\n        pass\n    else:\n        ai = 0\n        bi = 0\n        ta = 0\n        for i in range(n):\n            cur = (i + tar) % 2\n            if cur == 0:\n                pos = a[ai]\n                ai += 1\n            else:\n                pos = b[bi]\n                bi += 1\n            if pos > i:\n                ta += pos - i\n        ans = min(ans, ta)\n    tar = 0\n    if s > n - s:\n        pass\n    else:\n        ai = 0\n        bi = 0\n        ta = 0\n        for i in range(n):\n            cur = (i + tar) % 2\n            if cur == 0:\n                pos = a[ai]\n                ai += 1\n            else:\n                pos = b[bi]\n                bi += 1\n            if pos > i:\n                ta += pos - i\n        ans = min(ans, ta)\n    print(ans)", "import sys\nimport math\nstrInp = lambda : input().strip().split()\nintInp = lambda : list(map(int, strInp()))\n\ndef compareDistance(copybin, possible, n):\n    diff = 0\n    next_0 = 0\n    next_1 = 0\n    for i in range(n):\n        if copybin[i] != possible[i]:\n            if possible[i] == 0:\n                for j in range(max(i, next_0), n):\n                    if copybin[j] == possible[i]:\n                        next_0 = j\n                        diff += j - i\n                        tmp = copybin[i]\n                        copybin[i] = copybin[j]\n                        copybin[j] = tmp\n                        break\n            else:\n                for j in range(max(i, next_1), n):\n                    if copybin[j] == possible[i]:\n                        next_1 = j\n                        diff += j - i\n                        tmp = copybin[i]\n                        copybin[i] = copybin[j]\n                        copybin[j] = tmp\n                        break\n    return diff\nfor t in range(int(input())):\n    n = int(input())\n    arr = intInp()\n    bin = []\n    possible1 = []\n    possible2 = []\n    j = 0\n    for i in arr:\n        if i % 2 == 0:\n            bin.append(0)\n        else:\n            bin.append(1)\n        possible1.append(j % 2)\n        possible2.append((j + 1) % 2)\n        j += 1\n    if abs(bin.count(0) - bin.count(1)) > 1:\n        print(-1)\n    else:\n        diff1 = compareDistance(bin.copy(), possible1, n)\n        diff2 = compareDistance(bin.copy(), possible2, n)\n        if n % 2 == 0:\n            print(min(diff2, diff1))\n        elif bin.count(0) == n // 2:\n            print(diff2)\n        else:\n            print(diff1)", "T = int(input())\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    (ch, nch) = (0, 0)\n    for a in arr:\n        if a % 2 == 0:\n            ch += 1\n        else:\n            nch += 1\n    if ch == nch:\n        finalAns = float('inf')\n        for (target, empty) in [(1, 0), (0, 0), (0, 1), (1, 1)]:\n            ans = 0\n            for (i, v) in enumerate(arr):\n                if v % 2 == target:\n                    ans += abs(empty - i)\n                    empty += 2\n            finalAns = min(finalAns, ans)\n        print(finalAns)\n        return\n    elif abs(ch - nch) == 1:\n        target = 1 if nch > ch else 0\n        empty = 0\n        ans = 0\n        for (i, v) in enumerate(arr):\n            if v % 2 == target:\n                ans += abs(empty - i)\n                empty += 2\n        print(ans)\n        return\n    print(-1)\nfor _ in range(T):\n    solve()", "t = int(input())\n\ndef get_posone(first, l):\n    odd = l % 2\n    if first:\n        if odd:\n            return [2 * i for i in range(int(l / 2 + 0.5))]\n        else:\n            return [2 * i for i in range(int(l / 2))]\n    elif odd:\n        return [2 * i + 1 for i in range(int(l / 2 - 0.5))]\n    else:\n        return [2 * i + 1 for i in range(int(l / 2))]\nfor i in range(t):\n    ll = int(input())\n    arr = [int(c) % 2 for c in input().split(' ')]\n    if len(arr) % 2:\n        total_par = True\n        if sum(arr) == len(arr) / 2 + 0.5:\n            first_set = [1]\n        elif sum(arr) == len(arr) / 2 - 0.5:\n            first_set = [0]\n        else:\n            first_set = []\n    else:\n        total_par = False\n        if sum(arr) == len(arr) / 2:\n            first_set = [0, 1]\n        else:\n            first_set = []\n    if len(first_set) == 0:\n        print(-1)\n        continue\n    hops = []\n    for first in first_set:\n        posone = get_posone(first, len(arr))\n        poscurrent = [i for i in range(len(arr)) if arr[i]]\n        sm = 0\n        for i in range(len(posone)):\n            sm += abs(posone[i] - poscurrent[i])\n        hops.append(sm)\n    print(min(hops))"]