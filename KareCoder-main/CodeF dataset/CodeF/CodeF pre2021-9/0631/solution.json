["import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    curr = 1\n    summ = 0\n    x = 0\n    while summ < n:\n        if summ + curr <= n:\n            arr.append(curr)\n            x += curr\n        summ += curr\n        curr *= 2\n    if x < n:\n        arr.append(n - x)\n    arr.sort()\n    print(len(arr) - 1)\n    for i in range(1, len(arr)):\n        print(arr[i] - arr[i - 1], end=' ')\n    print()", "def solve():\n    a = []\n    n = int(input())\n    sum = 0\n    i = 1\n    while sum <= n:\n        sum += i\n        if sum > n:\n            break\n        a.append(i)\n        i *= 2\n    sum -= i\n    if sum != n:\n        a.append(n - sum)\n    a.sort()\n    print(len(a) - 1)\n    for i in range(1, len(a)):\n        print(a[i] - a[i - 1], end=' ')\n    print()\nt = int(input())\nfor test in range(t):\n    solve()", "import math\nimport array as arr\n\ndef iread():\n    return int(input())\nfor t in range(iread()):\n    n = iread()\n    accum = 1\n    cells = 1\n    d = 0\n    l = [1]\n    while accum + cells * 2 <= n:\n        cells *= 2\n        accum += cells\n        l.append(cells)\n    if accum != n:\n        l.append(n - accum)\n    l.sort()\n    print(len(l) - 1)\n    for i in range(len(l) - 1):\n        print(l[i + 1] - l[i], end=' ')\n    print()", "def solve(n):\n    weights = []\n    count = 1\n    total = last_total = 0\n    while total <= n:\n        weights.append(count)\n        last_total = total\n        total += count\n        count *= 2\n    weights.pop()\n    if last_total != n:\n        weights.append(n - last_total)\n        weights.sort()\n    res = []\n    for i in range(1, len(weights)):\n        res.append(weights[i] - weights[i - 1])\n    return res\nm = int(input())\nfor _ in range(m):\n    n = int(input())\n    res = solve(n)\n    print(len(res))\n    print(' '.join([str(x) for x in res]))", "t = int(input())\nans = []\nm = [int(input()) for x in range(t)]\nfor x in range(t):\n    targetM = m[x]\n    mass = 1\n    n = 1\n    night = 0\n    prevMass = 0\n    prevN = 0\n    splits = []\n    while mass < targetM:\n        prevMass = mass\n        prevN = n\n        splits.append(n)\n        mass = 2 * mass + 1\n        n = 2 * n\n        night += 1\n    if mass == targetM:\n        ans.append(night)\n        ans.append(' '.join((str(elem) for elem in splits)))\n    else:\n        s = targetM - prevMass - prevN\n        if s >= 0:\n            splits[-1] = s\n        else:\n            s = int(targetM - (prevMass - 0.5 * prevN) - 0.5 * prevN)\n            prevN = prevN / 2\n            if s > prevN:\n                splits[-2] = int(s % prevN)\n                splits[-1] = s - 2 * splits[-2]\n            else:\n                splits[-2] = 0\n                splits[-1] = s\n        ans.append(night)\n        ans.append(' '.join((str(elem) for elem in splits)))\nfor elem in ans:\n    print(elem)", "for _ in range(int(input())):\n    n = int(input())\n    ar = []\n    i = 1\n    while i <= n:\n        ar.append(i)\n        n -= i\n        i *= 2\n    if n != 0:\n        ar.append(n)\n    ar.sort()\n    print(len(ar) - 1)\n    for i in range(1, len(ar)):\n        print(ar[i] - ar[i - 1], end=' ')\n    print()", "from math import log2\n\ndef insertInArr(arr, x):\n    for i in range(len(arr)):\n        if arr[i] >= x:\n            arr.insert(i, x)\n            return\n    arr.append(x)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    x = 1\n    for i in range(int(log2(n + 1))):\n        arr.append(x)\n        x *= 2\n    if 2 * arr[-1] - 1 != n:\n        insertInArr(arr, n - 2 * arr[-1] + 1)\n    print(len(arr) - 1)\n    for i in range(1, len(arr)):\n        print(arr[i] - arr[i - 1], end=' ')\n    print()", "t = int(input())\n\ndef solve(k):\n    res = []\n    cur = 1\n    while k >= 4 * cur:\n        res.append(cur)\n        cur *= 2\n        k -= cur\n    if k <= 2 * cur:\n        res.append(k - cur)\n        return res\n    if k <= 3 * cur:\n        res.append(0)\n        res.append(k - 2 * cur)\n        return res\n    inc = k // 3 - cur + 1\n    res.append(inc)\n    cur += inc\n    k = k - cur\n    res.append(k - cur)\n    return res\nfor i in range(1, t + 1):\n    n = int(input())\n    res = solve(n - 1)\n    print(len(res))\n    print(' '.join((str(e) for e in res)))", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    res = []\n    two = 1\n    while two * 2 <= n:\n        res.append(two)\n        two *= 2\n    res.append(two)\n    s = sum(res) - n\n    two //= 2\n    result = []\n    for i in reversed(res):\n        if s >= two:\n            s -= two\n            result.append(i - two)\n        else:\n            result.append(i - s)\n            s = 0\n        two //= 2\n    print(len(result) - 1)\n    result = list(reversed(result))\n    print(' '.join([str(j - i) for (i, j) in zip(result, result[1:])]))", "from math import log2\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    lg = int(log2(n))\n    base = 2 ** lg - 1\n    dif = n - base\n    ans = []\n    cur = 1\n    nodes = 1\n    flag = True\n    toGet = 1\n    while cur < n:\n        if nodes <= dif and dif < nodes * 2 and flag:\n            ans.append(dif - nodes)\n            nodes = dif\n            cur += dif\n            flag = False\n            continue\n        toGet *= 2\n        ans.append(toGet - nodes)\n        nodes = toGet\n        cur += nodes\n    print(len(ans))\n    print(' '.join(list(map(str, ans))))", "from collections import deque\nt = int(input())\nrez = []\nfor i in range(t):\n    d = []\n    n = int(input())\n    j = 1\n    summ = 0\n    d1 = ''\n    while j <= n:\n        summ += j\n        n -= j\n        d.append(j)\n        j *= 2\n    if n > 0:\n        d.append(n)\n        d.sort()\n    for j in range(1, len(d)):\n        d1 += str(d[j] - d[j - 1]) + ' '\n    rez.append(len(d) - 1)\n    rez.append(d1)\nfor i in range(len(rez)):\n    print(rez[i])", "for t in range(int(input())):\n    n = s = int(input())\n    l = []\n    cur = 1\n    while n >= cur:\n        n -= cur\n        l += [cur]\n        cur *= 2\n    if n:\n        l += [n]\n    print(len(l) - 1)\n    l.sort()\n    st = ''\n    for i in range(len(l) - 1):\n        st += ' ' + str(l[i + 1] - l[i])\n    print(st[1:])", "for i in range(int(input())):\n    n = int(input())\n    ans = [1]\n    now = 2\n    s = 1\n    while s + now <= n:\n        s += now\n        ans.append(now)\n        now <<= 1\n    if s != n:\n        ans.append(n - s)\n    ans.sort()\n    print(len(ans) - 1)\n    for i in range(1, len(ans)):\n        print(ans[i] - ans[i - 1], end=' ')\n    print()", "from math import log2 as log\nfor _ in range(int(input())):\n    n = int(input())\n    k = int(log(n + 1))\n    s = 2 ** k - 1\n    d = n - s\n    f = 0\n    if d == 0:\n        f = 1\n    b = []\n    for i in range(k):\n        if 2 ** i < d:\n            b.append(1 << i)\n        elif 2 ** i >= d:\n            if f == 0:\n                b.append(d)\n                b.append(1 << i)\n                f = 1\n            else:\n                b.append(1 << i)\n    if d > 2 ** (k - 1):\n        b.append(d)\n    e = b\n    e = [b[i] - b[i - 1] for i in range(1, len(b))]\n    print(len(e))\n    print(*e)", "import math\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = []\n    ss = n\n    cc = 1\n    while ss > 0:\n        if ss < cc:\n            break\n        arr.append(cc)\n        ss -= cc\n        cc *= 2\n    if ss > 0:\n        arr.append(ss)\n        arr.sort()\n    print(len(arr) - 1)\n    for i in range(1, len(arr)):\n        print(arr[i] - arr[i - 1], end=' ')\n    print()", "def solve():\n    N = int(input())\n    needed_days = N.bit_length() - 1\n    print(needed_days)\n    ans = [2 ** i for i in range(needed_days)]\n    if N - sum(ans) != 0:\n        ans.append(N - sum(ans))\n    ans = sorted(ans)\n    print(' '.join(map(str, [a - b for (a, b) in zip(ans[1:], ans)])))\nT = int(input())\nfor _ in range(T):\n    solve()", "import sys\nsys.setrecursionlimit(10000)\n\nclass Memoize:\n\n    def __init__(self, f):\n        self.f = f\n        self.memo = {}\n\n    def __call__(self, *args):\n        if not args in self.memo:\n            self.memo[args] = self.f(*args)\n        return self.memo[args]\n\nclass Recurse(Exception):\n\n    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\ndef recurse(*args, **kwargs):\n    raise Recurse(*args, **kwargs)\n\ndef tail_recursive(f):\n\n    def decorated(*args, **kwargs):\n        while True:\n            try:\n                return f(*args, **kwargs)\n            except Recurse as r:\n                args = r.args\n                kwargs = r.kwargs\n                continue\n    return decorated\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    weights = []\n    total = 0\n    for i in range(0, 32):\n        p = 1 << i\n        if total + p > n:\n            break\n        weights.append(p)\n        total += p\n    if total < n:\n        weights.append(n - total)\n    weights = sorted(weights)\n    splits = list(map(lambda x: x[1] - x[0], zip(weights, weights[1:])))\n    print(len(splits))\n    print(' '.join(map(str, splits)))", "for t in range(int(input())):\n    n = s = int(input())\n    l = []\n    cur = 1\n    while n >= cur:\n        n -= cur\n        l += [cur]\n        cur *= 2\n    if n:\n        l += [n]\n    print(len(l) - 1)\n    l.sort()\n    st = ''\n    for i in range(len(l) - 1):\n        st += ' ' + str(l[i + 1] - l[i])\n    print(st[1:])", "import sys\nsys.setrecursionlimit(100000)\n\ndef main():\n    n = int(input())\n    to_take = dict()\n    st = 2\n    n -= 1\n    to_take[1] = 0\n    to_take[2] = 0\n    while n > 0:\n        if st > n:\n            if n == 0:\n                break\n            elif n in to_take:\n                to_take[n] += 1\n            else:\n                to_take[n] = 1\n            break\n        if not st in to_take:\n            to_take[st] = 0\n        to_take[st] += 1\n        n -= st\n        if st > n:\n            if n == 0:\n                break\n            elif n in to_take:\n                to_take[n] += 1\n            else:\n                to_take[n] = 1\n            break\n        elif st < n:\n            st *= 2\n    to_del = []\n    days = 0\n    for i in to_take:\n        if to_take[i] == 0:\n            to_del.append(i)\n        days += to_take[i]\n    for i in to_del:\n        del to_take[i]\n    in_to_take = sorted(list(to_take))\n    line = ''\n    line += str(in_to_take[0] // 2) + ' '\n    line += '0 ' * (to_take[in_to_take[0]] - 1)\n    for i in range(1, len(in_to_take)):\n        line += str(in_to_take[i] - in_to_take[i - 1]) + ' '\n        line += '0 ' * (to_take[in_to_take[i]] - 1)\n    print(days)\n    print(line)\nt = int(input())\nfor i in range(t):\n    main()\n1 + 2 + 3 + 4 + 8 + 8", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\n\ndef solve():\n    n = read_int()\n    inc = []\n    i = 1\n    while i <= n:\n        inc.append(i)\n        n -= i\n        i *= 2\n    if n > 0:\n        inc.append(n)\n        inc.sort()\n    print(len(inc) - 1)\n    for i in range(1, len(inc)):\n        print(inc[i] - inc[i - 1], end=' ')\n    print()\nt = read_int()\nfor case_num in range(t):\n    solve()", "def solve(n):\n    s = 1\n    x = 1\n    days = [1]\n    while s + 2 ** x < n:\n        days.append(2 ** x)\n        s += 2 ** x\n        x += 1\n    if s == n:\n        print(x - 1)\n    else:\n        print(x)\n        days.append(n - s)\n        days.sort()\n    ans = []\n    for j in range(len(days) - 1):\n        ans.append(days[j + 1] - days[j])\n    print(' '.join(list(map(str, ans))))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    solve(n)", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    i = 1\n    while i < n + 1:\n        l.append(i)\n        n = n - i\n        i = i * 2\n    if n > 0:\n        l.append(n)\n        l.sort()\n    print(len(l) - 1)\n    for i in range(1, len(l)):\n        print(l[i] - l[i - 1], end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    i = 1\n    n = int(input())\n    ans = []\n    while i <= n:\n        ans.append(i)\n        n -= i\n        i *= 2\n    if n > 0:\n        ans.append(n)\n        ans.sort()\n    print(len(ans) - 1)\n    for i in range(1, len(ans)):\n        print(ans[i] - ans[i - 1], end=' ')\n    print()", "for _ in range(int(input())):\n    arr = []\n    n = int(input())\n    x = 1\n    while x < n:\n        arr.append(x)\n        n -= x\n        x *= 2\n    if n > 0:\n        arr.append(n)\n    arr.sort()\n    s = []\n    print(len(arr) - 1)\n    for i in range(len(arr) - 1):\n        s.append(arr[i + 1] - arr[i])\n    print(*s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    i = 1\n    x = 0\n    while x + i <= n:\n        a.append(i)\n        x += i\n        i *= 2\n    if x != n:\n        a.append(n - x)\n    a = sorted(a)\n    days = len(a) - 1\n    print(days)\n    for i in range(1, len(a)):\n        the_end = ' '\n        if i == days:\n            the_end = '\\n'\n        print(a[i] - a[i - 1], end=the_end)", "numcases = int(input())\nfor i in range(numcases):\n    k = int(input())\n    count = 0\n    ans = []\n    while sum(ans) < k:\n        ans.append(2 ** count)\n        count = count + 1\n    if sum(ans) > k:\n        ans.pop()\n        ans.append(k - sum(ans))\n        ans = sorted(ans)\n    print(len(ans) - 1)\n    for i in range(len(ans) - 1):\n        print(ans[i + 1] - ans[i], end=' ')\n    print()", "for _ in range(int(input())):\n    N = int(input())\n    inc = []\n    i = 1\n    while i <= N:\n        inc.append(i)\n        N -= i\n        i *= 2\n    if N > 0:\n        inc.append(N)\n        inc = sorted(inc)\n    print(len(inc) - 1)\n    for i in range(1, len(inc)):\n        print(inc[i] - inc[i - 1], end=' ')\n    print()", "import math\nfor ii in range(int(input())):\n    p = int(input())\n    ans = [1]\n    sum = 1\n    while sum <= p:\n        sum += 2 * ans[-1]\n        ans.append(2 * ans[-1])\n    sum -= ans[-1]\n    ans.pop()\n    diff = p - sum\n    x = 0\n    for i in range(len(ans) - 1):\n        if ans[i] <= diff and ans[i + 1] > diff:\n            x = i\n            break\n    if diff >= ans[-1]:\n        ans.append(diff)\n    elif diff == 0:\n        pass\n    else:\n        ans = ans[0:x + 1] + [diff] + ans[x + 1:]\n    result = []\n    for i in range(len(ans) - 1):\n        result.append(ans[i + 1] - ans[i])\n    print(len(result))\n    print(*result)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    i = 1\n    s = 0\n    j = 1\n    while s + i <= n:\n        s += i\n        l.append(i)\n        i = 2 ** j\n        j += 1\n    if s < n:\n        l.append(n - s)\n        l.sort()\n    print(len(l) - 1)\n    for i in range(len(l) - 1):\n        print(l[i + 1] - l[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    i = 1\n    prd = 1\n    sm = 0\n    while True:\n        if sm + prd > n:\n            break\n        sm += prd\n        a.append(prd)\n        prd = 2 * prd\n    if sm != n:\n        a.append(n - sm)\n    a.sort()\n    print(len(a) - 1)\n    for i in range(1, len(a)):\n        print(a[i] - a[i - 1], end=' ')\n    print()", "n = int(input())\nwhile n > 0:\n    n = n - 1\n    l = []\n    s = 0\n    m = int(input())\n    i = 1\n    while i <= m:\n        if s + i <= m:\n            s += i\n            l.append(i)\n        i *= 2\n    if s < m:\n        l.append(m - s)\n    l1 = sorted(l)\n    print(len(l1) - 1)\n    for j in range(1, len(l1)):\n        print(l1[j] - l1[j - 1], end=' ')\n    print()", "import math\n\ndef solve(n):\n    k = int(math.log2(n))\n    t = n - (2 ** k - 1)\n    l = int(math.log2(t))\n    ans = []\n    for i in range(k):\n        if i == l:\n            cur = t - 2 ** i\n        elif i == l + 1:\n            cur = 2 ** i - t\n        elif i < l:\n            cur = 2 ** i\n        else:\n            cur = 2 ** (i - 1)\n        ans.append(cur)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = solve(n)\n    print(len(ans))\n    print(*ans, sep=' ')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [1]\n    sum = 1\n    while sum < n:\n        a.append(a[-1] * 2)\n        sum += a[-1]\n    if sum > n:\n        a[-1] = a[-1] - (sum - n)\n        a = list(sorted(a))\n    print(len(a) - 1)\n    print(*[a[i] - a[i - 1] for i in range(1, len(a))])", "from collections import defaultdict as dc\nfrom heapq import *\nimport math\nimport bisect\nimport sys\nfrom collections import deque as dq\nfrom heapq import heapify, heappush, heappop\nmod = 10 ** 9 + 7\n\ndef inp():\n    p = int(input())\n    return p\n\ndef line():\n    p = list(map(int, input().split()))\n    return p\n\ndef read_mat():\n    n = inp()\n    a = []\n    for i in range(n):\n        a.append(line())\n    return a\n\ndef digit(n):\n    s = str(n)\n    p = 0\n    for i in s:\n        p += int(i) ** 2\n    return p\n\ndef solve(a):\n    i = 1\n    p = []\n    while i <= a:\n        p.append(i)\n        a = a - i\n        i = i * 2\n    if a > 0:\n        p.append(a)\n    p.sort()\n    ans = []\n    for i in range(1, len(p)):\n        ans.append(p[i] - p[i - 1])\n    return ans\nfor test in range(inp()):\n    a = inp()\n    l = solve(a)\n    print(len(l))\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    (i, l) = (1, [])\n    while i <= n:\n        n -= i\n        l.append(i)\n        i *= 2\n    if n:\n        l.append(n)\n    l.sort()\n    print(len(l) - 1)\n    for i in range(1, len(l)):\n        print(l[i] - l[i - 1], end=' ')\n    print()", "for t in range(int(input())):\n    n = int(input())\n    day = len(bin(n)[2:]) - 1\n    ans = []\n    k = 1\n    count = day\n    while k <= n:\n        ans.append(k)\n        n -= k\n        k *= 2\n    if n > 0:\n        ans.append(n)\n        ans.sort()\n    ans1 = []\n    for i in range(1, len(ans)):\n        ans1.append(ans[i] - ans[i - 1])\n    print(len(ans) - 1)\n    print(*ans1)", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    arr = []\n    N = n\n    i = 1\n    s = 0\n    while s <= n:\n        s += i\n        if s > n:\n            break\n        arr.append(i)\n        N -= i\n        i *= 2\n    if N > 0:\n        arr.append(N)\n        arr.sort()\n    print(len(arr) - 1)\n    sol = []\n    for i in range(1, len(arr)):\n        sol.append(arr[i] - arr[i - 1])\n    print(*sol)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [1]\n    sum = 1\n    while sum < n:\n        a.append(a[-1] * 2)\n        sum += a[-1]\n    if sum > n:\n        a[-1] = a[-1] - (sum - n)\n        a = list(sorted(a))\n    print(len(a) - 1)\n    print(*[a[i] - a[i - 1] for i in range(1, len(a))])", "t = int(input())\nfor _ in range(t):\n    s = int(input())\n    r = bin(s)[2:]\n    p = []\n    for i in range(len(r)):\n        if s - 2 ** i >= 0:\n            p.append(2 ** i)\n            s -= 2 ** i\n        else:\n            break\n    if s > 0:\n        p.append(s)\n    p.sort()\n    print(len(p) - 1)\n    res = []\n    for i in range(1, len(p)):\n        res.append(p[i] - p[i - 1])\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = 0\n    sums = 0\n    arr = []\n    while sums < n:\n        sums += 2 ** days\n        arr += [2 ** days]\n        days += 1\n    days -= 1\n    if sums != n:\n        sums -= 2 ** days\n        arr.pop()\n        arr += [n - sums]\n        arr.sort()\n    print(days)\n    for i in range(len(arr) - 1):\n        print(arr[i + 1] - arr[i], end=' ')\n    print()", "from collections import deque\n\ndef solve():\n    n = int(input())\n    (mass, d) = (0, 1)\n    summ = deque()\n    while mass < n:\n        mass += 2 ** (d - 1)\n        summ.append(2 ** (d - 1))\n        d += 1\n    if mass == n:\n        print(d - 2)\n        for i in range(d - 2):\n            print(summ[i], end=' ')\n    elif mass > n:\n        diff = mass - n\n        j = d - 3\n        while diff > summ[j]:\n            summ[j + 1] = summ[j]\n            diff = diff - summ[j]\n            j -= 1\n        if diff <= summ[j]:\n            maxx = 2 * summ[j]\n            minn = summ[j]\n            if maxx - diff >= minn:\n                summ[j + 1] = maxx - diff\n            else:\n                print(-1)\n                return\n        print(d - 2)\n        for i in range(1, d - 1):\n            print(summ[i] - summ[i - 1], end=' ')\n        print()\nt = int(input())\nfor i in range(t):\n    solve()", "from math import pow\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    su = 0\n    i = 0\n    k = 0\n    arr = []\n    while su <= n:\n        k = int(pow(2, i))\n        su += k\n        arr.append(k)\n        i += 1\n    arr.pop()\n    su -= k\n    i -= 1\n    if su == n:\n        print(len(arr) - 1)\n    else:\n        print(len(arr))\n        diff = n - su\n        arr.append(diff)\n        arr.sort()\n    for i in range(1, len(arr)):\n        print(arr[i] - arr[i - 1], end=' ')\n    print()\n    t -= 1", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    i = 1\n    an = 0\n    x = []\n    while an + i < n:\n        x.append(i)\n        an += i\n        i *= 2\n    if n - an:\n        x.append(n - an)\n    x.sort()\n    print(len(x) - 1)\n    for i in range(1, len(x)):\n        print(x[i] - x[i - 1], end=' ')\n    print('')", "def solve():\n    n = int(input())\n    k = 1\n    a = []\n    while n >= k:\n        a.append(k)\n        n -= k\n        k *= 2\n    if n > 0:\n        a.append(n)\n    a.sort()\n    print(len(a) - 1)\n    for i in range(len(a) - 1):\n        print(a[i + 1] - a[i], end=' ')\n    print()\nfor t in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    x = 1\n    r = 1\n    val = [1]\n    if n == 2:\n        print(1)\n        print(0)\n    else:\n        while x <= n:\n            z = x\n            z += 2 ** r\n            if z > n:\n                break\n            x += 2 ** r\n            val.append(2 ** r)\n            r += 1\n        if x == n:\n            print(len(val) - 1)\n            for i in range(1, len(val)):\n                print(val[i] - val[i - 1], end=' ')\n            print()\n        else:\n            val.append(n - x)\n            val.sort()\n            print(len(val) - 1)\n            for i in range(1, len(val)):\n                print(val[i] - val[i - 1], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = []\n    i = 0\n    x = 0\n    while x + 2 ** i <= n:\n        x = x + 2 ** i\n        s.append(2 ** i)\n        i += 1\n    if n - x > 0:\n        s.append(n - x)\n        s.sort()\n    print(len(s) - 1)\n    for i in range(0, len(s) - 1):\n        print(s[i + 1] - s[i], end=' ')\n    print()", "import bisect\nimport os\nfrom collections import Counter\nimport bisect\nfrom collections import defaultdict\nimport math\nimport random\nimport heapq as hq\nfrom math import sqrt\nimport sys\nfrom functools import reduce, cmp_to_key\nfrom collections import deque\nimport threading\nfrom itertools import combinations\nfrom io import BytesIO, IOBase\nfrom itertools import accumulate\n\ndef list_input():\n    return list(map(int, input().split()))\n\ndef num_input():\n    return map(int, input().split())\n\ndef string_list():\n    return list(input())\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    i = 1\n    while n >= i:\n        arr.append(i)\n        n -= i\n        i *= 2\n    if n != 0:\n        arr.append(n)\n    arr.sort()\n    print(len(arr) - 1)\n    for i in range(len(arr) - 1):\n        print(arr[i + 1] - arr[i], end=' ')\n    print()", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [1]\n    s = 1\n    i = 1\n    while s + 2 ** i <= n:\n        s += 2 ** i\n        a.append(2 ** i)\n        i += 1\n    if s < n:\n        x = n - s\n        a.append(x)\n    a.sort()\n    b = []\n    for i in range(1, len(a)):\n        b.append(a[i] - a[i - 1])\n    print(len(b))\n    for i in range(len(b)):\n        if i == len(b) - 1:\n            print(b[i])\n        else:\n            print(b[i], end=' ')\n    t -= 1", "from collections import deque\n\ndef solve():\n    n = int(input())\n    (mass, d) = (0, 1)\n    summ = deque()\n    while mass < n:\n        mass += 2 ** (d - 1)\n        summ.append(2 ** (d - 1))\n        d += 1\n    if mass == n:\n        print(d - 2)\n        for i in range(d - 2):\n            print(summ[i], end=' ')\n    elif mass > n:\n        diff = mass - n\n        j = d - 3\n        while diff > summ[j]:\n            summ[j + 1] = summ[j]\n            diff = diff - summ[j]\n            j -= 1\n        if diff <= summ[j]:\n            maxx = 2 * summ[j]\n            minn = summ[j]\n            if maxx - diff >= minn:\n                summ[j + 1] = maxx - diff\n        print(d - 2)\n        for i in range(1, d - 1):\n            print(summ[i] - summ[i - 1], end=' ')\n        print()\nt = int(input())\nfor i in range(t):\n    solve()", "import sys, re, math\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom math import floor, ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd, log\nfrom heapq import heappush, heappop, heapify, nlargest, nsmallest\n\ndef STR():\n    return list(input())\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\ndef sortListWithIndex(listOfTuples, idx):\n    return sorted(listOfTuples, key=lambda x: x[idx])\n\ndef sortDictWithVal(passedDic):\n    temp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))\n    toret = {}\n    for tup in temp:\n        toret[tup[0]] = tup[1]\n    return toret\n\ndef sortDictWithKey(passedDic):\n    return dict(OrderedDict(sorted(passedDic.items())))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nt = INT()\nwhile t != 0:\n    n = INT()\n    k = floor(log(n, 2))\n    temp = []\n    for i in range(k + 1):\n        temp.append(2 ** i - 1)\n    diff = []\n    for i in range(1, k + 1):\n        diff.append(temp[i] - temp[i - 1])\n    diff.append(n - temp[-1])\n    diff.sort()\n    diff1 = []\n    for i in range(1, len(diff)):\n        diff1.append(diff[i] - diff[i - 1])\n    print(len(diff1))\n    print(*diff1)\n    t -= 1"]