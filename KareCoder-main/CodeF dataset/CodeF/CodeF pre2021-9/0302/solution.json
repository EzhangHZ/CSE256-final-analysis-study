["def isPairGood(a, b):\n    return a & b >= a ^ b\n\ndef main():\n    try:\n        for _ in range(int(input())):\n            n = int(input())\n            l = [int(i) for i in input().split()][:n]\n            arr = [0] * 40\n            for i in l:\n                arr[i.bit_length()] += 1\n            output = 0\n            for i in arr:\n                output = output + i * (i - 1) // 2\n            print(output)\n    except:\n        pass\nmain()", "def main():\n    try:\n        for _ in range(int(input())):\n            n = int(input())\n            l = [int(i) for i in input().split()][:n]\n            arr = [0] * 40\n            for i in l:\n                arr[i.bit_length()] += 1\n            output = 0\n            for i in arr:\n                output = output + i * (i - 1) // 2\n            print(output)\n    except:\n        pass\nmain()", "from collections import Counter\n\ndef solve(arr):\n    ans = 0\n    c = Counter((i.bit_length() for i in arr))\n    for (k, v) in c.items():\n        if v > 1:\n            ans += v * (v - 1) // 2\n    return ans\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr))", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    c = Counter((i.bit_length() for i in arr))\n    for (k, v) in c.items():\n        if v > 1:\n            ans += v * (v - 1) // 2\n    print(ans)", "from math import log\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    pairs = 0\n    counts = [0] * 30\n    for num in nums:\n        counts[int(log(num, 2))] += 1\n    for count in counts:\n        if count:\n            pairs += int(count * (count - 1) / 2)\n    print(pairs)", "from math import *\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    s = 0\n    for i in a:\n        k = len(bin(i))\n        if k in h:\n            h[k] += 1\n        else:\n            h[k] = 1\n    for i in h:\n        s += h[i] * (h[i] - 1) // 2\n    print(s)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    w = [len(bin(int(k))[2:]) for k in input().split()]\n    q = Counter(w)\n    res = 0\n    for j in q.keys():\n        res += q[j] * (q[j] - 1) // 2\n    print(res)", "i = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp += [input()]\nfor s in inp:\n    arr = [int(n) for n in s.split()]\n    d = {}\n    for x in arr:\n        l = len(bin(x)) - 2\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    c = 0\n    for n in d:\n        x = d[n]\n        c += x * (x - 1) // 2\n    print(c)", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [int(log(i, 2)) for i in a]\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    cnt = 0\n    for i in d:\n        cnt += d[i] * (d[i] - 1) // 2\n    print(cnt)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lis = [0] * 32\n    rj = 0\n    for i in a:\n        x = len(bin(i)) - 2\n        rj += lis[x]\n        lis[x] += 1\n    print(rj)", "import math\nfor _ in range(int(input())):\n    n = input()\n    a = [int(i) for i in input().split()]\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0, 25: 0, 26: 0, 27: 0, 28: 0, 29: 0, 30: 0}\n    for k in a:\n        d[int(math.log2(k))] += 1\n        res = 0\n    for k in d:\n        res += math.comb(d[k], 2)\n    print(res)", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dd = defaultdict(lambda : 0)\n    for i in range(n):\n        s = bin(a[i])\n        c = len(s) - 2\n        dd[c] += 1\n    ans = 0\n    for j in dd.values():\n        ans += j * (j - 1) // 2\n    print(ans)", "from math import log2, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hash = {}\n    for i in arr:\n        seg = int(log2(i)) + 1\n        hash[seg] = hash.get(seg, 0) + 1\n    ans = 0\n    for i in hash:\n        ans += hash[i] * (hash[i] - 1) >> 1\n    print(ans)", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        s = bin(a[i])\n        c = len(s) - 2\n        d[c] += 1\n    ans = 0\n    for j in d.values():\n        ans += j * (j - 1) // 2\n    print(ans)", "import math\n\ndef answer(n, a):\n    cnt = [0] * 31\n    for e in a:\n        cnt[int(math.log2(e))] += 1\n    pairs = 0\n    for i in range(31):\n        pairs += math.comb(cnt[i], 2)\n    return pairs\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        print(answer(n, a))\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = [0] * 35\n    ans = 0\n    for num in a:\n        bin_num = bin(num)\n        l = len(bin_num)\n        b[l - 2] += 1\n    for num in b:\n        ans += num * (num - 1) // 2\n    print(ans)", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    aklst = [0 for i in range(33)]\n    a = list(map(int, input().split()))\n    for ele in a:\n        aklst[int(log2(ele))] += 1\n    print(sum([ele * (ele - 1) // 2 for ele in aklst]))", "from math import log2\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = [0 for _ in range(32)]\n    ans = 0\n    for x in a:\n        bit = int(log2(x))\n        cnt[bit] += 1\n    for bit in cnt:\n        ans += int(bit * (bit - 1) / 2)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for a in [*open(0)][2::2]:\n    (s, c) = (0, [0] * 50)\n    for x in map(int, a.split()):\n        l = len(bin(x)) - 2\n        s += c[l]\n        c[l] += 1\n    print(s)", "from collections import defaultdict\n\ndef getarray():\n    return list(map(int, input().split()))\n\ndef getints():\n    return map(int, input().split())\n\ndef getint():\n    return int(input())\n\ndef solve():\n    n = getint()\n    arr = getints()\n    endbits = defaultdict(lambda : 0)\n    ans = 0\n    for i in arr:\n        l = len(bin(i))\n        ans += endbits[l]\n        endbits[l] += 1\n    print(ans)\nfor t in range(getint()):\n    solve()", "def pos_lsd(num):\n    x = bin(num)[2:]\n    return len(str(x))\n\ndef solution(arr):\n    my_dict = {}\n    result = 0\n    for i in arr:\n        idx = pos_lsd(i)\n        if idx not in my_dict:\n            my_dict[idx] = [i]\n        else:\n            my_dict[idx] += [i]\n    for x in my_dict.values():\n        if len(x) > 1:\n            result += len(x) * (len(x) - 1) // 2\n    return result\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    x = list(map(int, input().split()))\n    print(solution(x))", "def pos_lsd(num):\n    x = bin(num)[2:]\n    return len(str(x))\n\ndef solution(arr):\n    my_dict = {}\n    result = 0\n    for i in arr:\n        idx = pos_lsd(i)\n        if idx not in my_dict:\n            my_dict[idx] = [i]\n        else:\n            my_dict[idx] += [i]\n    for x in my_dict.values():\n        if len(x) > 1:\n            result += len(x) * (len(x) - 1) // 2\n    return result\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    x = list(map(int, input().split()))\n    print(solution(x))", "def rockAndLever(n, array):\n    binArray = []\n    for x in range(n):\n        binArray.append(bin(array[x])[2:])\n    count = 0\n    d = {}\n    for x in range(n):\n        if len(binArray[x]) in d:\n            d[len(binArray[x])] += 1\n        else:\n            d[len(binArray[x])] = 1\n    for x in d:\n        count += d[x] * (d[x] - 1) // 2\n    return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(rockAndLever(n, l))", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(I())\n    d = {}\n    op = 0\n    for i in range(n):\n        yi = len(bin(a[i])) - 2\n        if yi not in d:\n            d[yi] = 0\n        else:\n            d[yi] = d[yi] + 1\n            op = op + d[yi]\n    print(op)", "import math\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    arr = [0] * 32\n    for i in range(n):\n        x = math.floor(math.log2(A[i]))\n        arr[x] += 1\n    ans = 0\n    for i in range(32):\n        ans += arr[i] * (arr[i] - 1) // 2\n    print(ans)", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        s = bin(a[i])\n        c = len(s) - 2\n        d[c] += 1\n    ans = 0\n    for j in d.values():\n        ans += j * (j - 1) // 2\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    cnt = [0] * 35\n    n = II()\n    aa = LI()\n    for a in aa:\n        cnt[a.bit_length()] += 1\n    ans = 0\n    for c in cnt:\n        ans += c * (c - 1) // 2\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * 35\n    for aa in a:\n        cnt[aa.bit_length()] += 1\n    ans = 0\n    for c in cnt:\n        ans += c * (c - 1) // 2\n    print(ans)", "try:\n    for t in range(int(input())):\n        n = int(input())\n        l = [int(x) for x in input().split()][:n]\n        lis = [0] * 40\n        for i in l:\n            lis[i.bit_length()] += 1\n        ans = 0\n        for i in lis:\n            ans = ans + i * (i - 1) // 2\n        print(ans)\nexcept:\n    pass", "from math import log2\nfor u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        d = {}\n        for i in x:\n            y = int(log2(i))\n            d[y] = d.get(y, 0) + 1\n        ans = 0\n        for i in d:\n            if d[i] > 1:\n                ans += d[i] * (d[i] - 1) // 2\n        print(ans)", "def msb(n):\n    return len(bin(n)) - 2\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        m = msb(j)\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\n    ans = 0\n    for jj in d:\n        ans += d[jj] * (d[jj] - 1) // 2\n    print(ans)", "for a in [*open(0)][2::2]:\n    (s, c) = (0, [0] * 99)\n    for x in map(int, a.split()):\n        l = len(bin(x))\n        s += c[l]\n        c[l] += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(val) for val in input().split()]\n    total = 0\n    repo = {}\n    for num in nums:\n        b = len(bin(num)[2:])\n        if b in repo:\n            repo[b] += 1\n        else:\n            repo[b] = 1\n    for val in repo.values():\n        total += val * (val - 1) // 2\n    print(total)", "from collections import Counter as C\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    bt = C([len(bin(i)[2:]) - bin(i)[2:].index('1') for i in arr]).values()\n    ans = sum([i * (i - 1) // 2 for i in bt])\n    print(ans)", "from math import log2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    b = [0] * 32\n    for i in range(n):\n        tmp = int(log2(l[i]))\n        ans += b[tmp]\n        b[tmp] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cnt = 0\n    cnt1 = 0\n    for i in range(1, n):\n        if a[i] & a[i - 1] >= a[i] ^ a[i - 1]:\n            cnt += 1\n            cnt1 += cnt\n        else:\n            cnt = 0\n    print(cnt1)", "for t in range(int(input())):\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    a.sort()\n    ans = 0\n    i = 0\n    st = 1\n    while st <= a[n - 1]:\n        st = st * 2\n        cnt = 0\n        while i < n and a[i] < st:\n            cnt = cnt + 1\n            i = i + 1\n        ans = ans + cnt * (cnt - 1) // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    c = 0\n    n = int(input())\n    a = [bin(int(vals)) for vals in input().split()]\n    d = {}\n    for x in a:\n        if len(x) in d:\n            d[len(x)] += 1\n        else:\n            d[len(x)] = 1\n    for m in d:\n        if d[m] != 1:\n            c += d[m] * (d[m] - 1) / 2\n    print(int(c))", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve(__=1):\n    for _ in range(__):\n        n = inp()\n        a = li()\n        t = [0] * 31\n        for i in range(n):\n            j = int(log(a[i], 2))\n            t[j] += 1\n        ans = 0\n        for i in t:\n            ans += i * (i - 1)\n        print(ans // 2)\nsolve(inp())", "import math\nfor case in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    bits = {}\n    count = 0\n    new = []\n    for num in nums:\n        cur = int(math.log(num, 2))\n        new.append(cur)\n        if cur in bits:\n            count += bits[cur]\n            bits[cur] += 1\n        else:\n            bits[cur] = 1\n    print(count)", "ans_list = []\nfor i in range(int(input())):\n    n = int(input())\n    ans = 0\n    list1 = list(map(int, input().split()))\n    list2 = []\n    a = 0\n    list1.sort()\n    for x in list1:\n        while x >= 2 ** a:\n            a += 1\n        else:\n            list2.append(a)\n    m = list2[0]\n    b = 0\n    for x in list2:\n        if x == m:\n            b += 1\n        else:\n            m = x\n            ans += (b - 1) * b // 2\n            b = 1\n    ans += (b - 1) * b // 2\n    ans_list.append(ans)\nprint(*ans_list, sep='\\n')", "from collections import Counter as cnt\nimport math\n\ndef bi(n):\n    return len(bin(n).replace('0b', ''))\nfor p in range(int(input())):\n    (n, l, d) = (int(input()), [], {})\n    a = list(map(int, input().split()))\n    for i in a:\n        l.append(bi(i))\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    (s, f) = (list(set(l)), 0)\n    for i in s:\n        j = d[i]\n        f += j * (j - 1) // 2\n    print(f)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 70 * [0]\n    for i in l:\n        s = len(bin(i).replace('0b', ''))\n        x[s] += 1\n    sum = 0\n    for i in x:\n        sum += i * (i - 1) // 2\n    print(sum)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 34 * [0]\n    for i in l:\n        s = len(bin(i).replace('0b', ''))\n        x[s] += 1\n    sum = 0\n    for i in x:\n        sum += i * (i - 1) // 2\n    print(sum)", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = [0 for _ in range(32)]\n    ans = 0\n    for x in a:\n        bit = '{:0>32b}'.format(x).find('1')\n        cnt[bit] += 1\n    for bit in cnt:\n        ans += int(bit * (bit - 1) / 2)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    list1 = list(map(int, input().split()))\n    list2 = []\n    a = 0\n    list1.sort()\n    for x in list1:\n        while x >= 2 ** a:\n            a += 1\n        else:\n            list2.append(a)\n    m = list2[0]\n    b = 0\n    for x in list2:\n        if x == m:\n            b += 1\n        else:\n            m = x\n            ans += (b - 1) * b // 2\n            b = 1\n    ans += (b - 1) * b // 2\n    list_ans.append(ans)\nprint(*list_ans, sep='\\n')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    bits = dict()\n    for i in range(n):\n        k = A[i].bit_length()\n        if k not in bits:\n            bits[k] = 0\n        bits[k] += 1\n    ans = 0\n    for x in bits.values():\n        ans += x * (x - 1) / 2\n    print(int(ans))", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nfrom math import ceil, log2\nfor _ in range(ni()):\n    n = ni()\n    a = nl()\n    if n == 1:\n        print(0)\n        continue\n    ans = 0\n    po = [[] for uu in range(32)]\n    for i in a:\n        ind = int(log2(i))\n        po[ind].append(i)\n    (i, j) = (0, 1)\n    for ii in po:\n        n = len(ii)\n        if n < 1:\n            continue\n        ans += n * (n - 1) // 2\n    print(ans)", "for tt in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    vals = [0 for i in range(32)]\n    ans = 0\n    for i in l:\n        vals[len(bin(i)[2:])] += 1\n    for i in vals:\n        ans += i * (i - 1) // 2\n    print(ans)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    m = [[] for i in range(30)]\n    for i in p:\n        m[int(log2(i))].append(i)\n    ans = 0\n    for i in m:\n        ans += len(i) * (len(i) - 1) // 2\n    print(ans)", "def process():\n    n = int(input())\n    l = list(map(int, input().split()))\n    counts = [0 for i in range(32)]\n    for i in l:\n        if i == 0:\n            count[0] += 1\n        else:\n            counts[len(bin(i)) - 1] += 1\n    count = 0\n    for i in counts:\n        if i != 0:\n            count += i * (i - 1) // 2\n    print(count)\n\ndef main():\n    for i in range(int(input())):\n        process()\nmain()", "def solve_case():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    for i in a:\n        l = len(bin(i))\n        c = m.get(l, 0)\n        m[l] = c + 1\n        ans += c\n    return ans\n\ndef main():\n    tests = int(input())\n    for t in range(tests):\n        print(solve_case())\nmain()", "testcase = int(input())\nfor i in range(testcase):\n    n = int(input())\n    li = list(map(int, input().split()))[:n]\n    d = {}\n    for j in li:\n        l = len(bin(j))\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    res = 0\n    for k in d:\n        res += d[k] * (d[k] - 1) // 2\n    print(res)", "result = []\nfor a in range(int(input())):\n    input()\n    checkList = [bin(int(val)) for val in input().split()]\n    list_count = [0] * 32\n    correctCases = 0\n    for a in checkList:\n        list_count[len(a) - 3] += 1\n    for c in list_count:\n        correctCases += (c - 1) / 2 * c\n    result.append(int(correctCases))\nfor p in result:\n    print(p)", "t = int(input())\nresults = []\nfor k in range(t):\n    n = int(input())\n    vals = input().split()\n    A = [int(val) for val in vals]\n    l = [0] * 32\n    for a in A:\n        highest = len(bin(a)) - 2\n        l[highest] += 1\n    total = 0\n    for count in l:\n        total += count * (count - 1) // 2\n    results.append(total)\nfor result in results:\n    print(result)", "def and_or(l):\n    m = [0] * 32\n    k = 0\n    for i in l:\n        k += m[i.bit_length()]\n        m[i.bit_length()] += 1\n    return k\nfor _ in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    print(and_or(l))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (d, ans) = ({}, 0)\n    for i in range(n):\n        r = int(math.log(a[i], 2)) + 1\n        if r not in d:\n            d[r] = 1\n        else:\n            d[r] += 1\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (bi, ans) = ([0] * 32, 0)\n    for e in a:\n        v = len(bin(e)[2:])\n        ans += bi[v]\n        bi[v] += 1\n    print(ans)", "import math\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counter = [0] * 30\n    for i in range(n):\n        counter[int(math.log(arr[i], 2))] += 1\n    ans = 0\n    for num in counter:\n        if num >= 2:\n            ans = ans + num * (num - 1) // 2\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = [int(math.log2(l[i])) for i in range(n)]\n    x.sort()\n    count = 0\n    c = 1\n    for i in range(1, n):\n        if x[i] == x[i - 1]:\n            c += 1\n        else:\n            count += c * (c - 1) // 2\n            c = 1\n    count += c * (c - 1) // 2\n    print(count)", "for a in [*open(0)][2::2]:\n    (s, c) = (0, [0] * 50)\n    for x in map(int, a.split()):\n        l = len(bin(x)) - 2\n        s += c[l]\n        c[l] += 1\n    print(s)", "from math import log\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    dic = {}\n    for temp in map(int, input().split()):\n        key = int(log(temp) / log(2))\n        a = dic.get(key, 0)\n        dic[key] = a + 1\n    res = 0\n    for elm in dic:\n        temp = dic[elm]\n        res += temp * (temp - 1) // 2\n    print(res)", "from math import log2, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    ans = 0\n    for x in a:\n        msb = int(log2(x) + 1)\n        c = d.get(msb, 0)\n        ans += c\n        d[msb] = c + 1\n    print(ans)", "from collections import defaultdict\nfrom math import log2, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = 0\n    for x in a:\n        msb = int(log2(x) + 1)\n        ans += d[msb]\n        d[msb] += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 33 * [0]\n    for i in l:\n        s = len(bin(i).replace('0b', ''))\n        x[s] += 1\n    sum = 0\n    for i in x:\n        sum += i * (i - 1) // 2\n    print(sum)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr2 = [0] * 32\n    for j in arr:\n        s = len(bin(j).replace('0b', ''))\n        arr2[s] += 1\n    sum = 0\n    for k in arr2:\n        sum += k * (k - 1) // 2\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    a.sort()\n    cnt = 0\n    for i in range(n - 1):\n        if a[i] & a[i + 1] >= a[i] ^ a[i + 1]:\n            cnt += 1\n            ans += cnt\n        else:\n            cnt = 0\n    print(ans)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    nums = list(map(int, input().strip().split()))[:N]\n    nums = sorted(nums)\n    true = 0\n    ch = 0\n    for k in range(1, N):\n        if nums[k] & nums[k - 1] >= nums[k] ^ nums[k - 1]:\n            true += 1\n            ch += true\n        else:\n            true = 0\n    print(ch)", "import math as m\nt = int(input())\nfor i in range(t):\n    cnt = 0\n    n = int(input())\n    s = input()\n    s = s.split()\n    o = []\n    for j in s:\n        o.append(m.log2(int(j)) // 1)\n    k = set(o)\n    for j in k:\n        x = o.count(j)\n        if x > 1:\n            cnt += x * (x - 1) // 2\n    print(cnt)", "from collections import defaultdict\n\ndef func(n, arr):\n    d = defaultdict(int)\n    for i in arr:\n        temp = len(bin(i)) - 2\n        d[temp] += 1\n    res = 0\n    for (i, j) in d.items():\n        res += j * (j - 1) // 2\n    print(res)\n    return\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    func(n, arr)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [x.bit_length() for x in a]\n    if n == 1:\n        print(0)\n    else:\n        ans = 0\n        a.sort()\n        h = 1\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                h += 1\n            else:\n                ans += h * (h - 1) // 2\n                h = 1\n        ans += h * (h - 1) // 2\n        print(ans)", "for __ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in l:\n        b = bin(i)\n        b = b[2:]\n        l1.append(len(b))\n    d = {}\n    for i in l1:\n        d[i] = 0\n    for i in l1:\n        d[i] += 1\n    ans = 0\n    for i in d:\n        if d[i] > 1:\n            ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "from collections import defaultdict\nfrom math import log2, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    ans = 0\n    for x in input().split():\n        msb = int(log2(int(x)) + 1)\n        ans += d[msb]\n        d[msb] += 1\n    print(ans)", "for _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    c = {}\n    for x in a:\n        h = x.bit_length()\n        c[h] = c.get(h, 0) + 1\n    print(sum((v * (v - 1) // 2 for v in c.values())))", "import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    n = Read.int()\n    a = Read.list_int()\n    tmp = {}\n    for i in a:\n        b = bin(i)\n        l = len(b) - 2\n        if l in tmp:\n            tmp[l] = tmp[l] + 1\n        else:\n            tmp[l] = 1\n    res = 0\n    for v in tmp.values():\n        for i in range(v):\n            res = res + i\n    print(res)\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "from math import *\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    val = []\n    for i in range(32):\n        val.append(0)\n    for i in a:\n        x = int(log2(i))\n        val[x] += 1\n    ans = 0\n    for i in val:\n        ans = ans + i * (i - 1) // 2\n    print(ans)\n    t -= 1", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mylist = [0 for i in range(50)]\n    for i in a:\n        if i != 0:\n            value = int(log2(i)) + 1\n        else:\n            value = 0\n        mylist[value] += 1\n    ans = 0\n    for i in mylist:\n        ans += i * (i - 1) // 2\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(len(arr)):\n        q = len(bin(arr[i]))\n        if q in d:\n            d[q] += 1\n        else:\n            d[q] = 1\n    ct = 0\n    for item in d:\n        if d[item] > 1:\n            c = d[item]\n            ct += c * (c - 1) // 2\n    print(ct)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    freq = [0] * 31\n    for x in lst:\n        freq[len(bin(x)[2:])] += 1\n    ans = 0\n    for x in freq:\n        if x > 1:\n            ans += x * (x - 1) // 2\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnts = [0] * 100\n    count = 0\n    for val in a:\n        count += cnts[val.bit_length()]\n        cnts[val.bit_length()] += 1\n    print(count)\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    li = list(map(int, input().split()))\n    dic = dict()\n    for i in range(1, 35):\n        dic[i] = 0\n    for i in range(len(li)):\n        a = len(bin(li[i])[2:])\n        dic[a] += 1\n    ans = 0\n    for i in range(1, 35):\n        if dic[i] > 1:\n            ans += dic[i] * (dic[i] - 1) / 2\n    print(math.floor(ans))\n    t -= 1", "import math\n\ndef li():\n    return list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = li()\n    ans = [0] * 30\n    for i in arr:\n        x = int(math.log(i, 2))\n        ans[x] += 1\n    fans = 0\n    for i in ans:\n        if i == 1:\n            continue\n        elif i == 2:\n            fans += 1\n        else:\n            fans += i * (i - 1) // 2\n    print(fans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = {}\n    for i in l:\n        k = len(bin(i)[2:])\n        if k in c:\n            c[k] += 1\n        else:\n            c[k] = 1\n    ans = 0\n    for i in c:\n        ans += c[i] * (c[i] - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    d = {}\n    for ele in lst:\n        msbl = len(bin(ele)) - 2\n        if msbl in d:\n            d[msbl] += 1\n        else:\n            d[msbl] = 1\n    res = 0\n    for k in d:\n        e = d[k]\n        res += e * (e - 1) / 2\n    print(int(res))", "from math import log, factorial\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    highestBitIndex = [0 for i in range(32)]\n    for i in arr:\n        index = int(log(i, 2))\n        highestBitIndex[index] += 1\n    c = 0\n    for i in highestBitIndex:\n        if i >= 2:\n            f = i * (i - 1)\n            c += f // 2\n    print(int(c))", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    b = [0] * 32\n    for i in range(n):\n        b[int(log(lst[i], 2))] += 1\n    res = 0\n    for i in b:\n        res += i * (i - 1) // 2\n    print(res)", "import sys\nimport math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    ans = 0\n    dictionary = dict()\n    lst = list(map(int, input().split()))\n    for item in lst:\n        idx = int(math.log2(item))\n        dictionary[idx] = dictionary.get(idx, 0) + 1\n    for i in dictionary.keys():\n        ans += dictionary[i] * (dictionary[i] - 1) / 2\n    print(int(ans))", "results = []\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    vals = input().split()\n    A = [int(val) for val in vals]\n    list_count = [0] * 32\n    total = 0\n    for a in A:\n        highest = len(bin(a)) - 3\n        list_count[highest] += 1\n    for count in list_count:\n        total += count * (count - 1) // 2\n    results.append(total)\nfor result in results:\n    print(result)", "t = int(input())\nresults = []\nfor k in range(t):\n    n = int(input())\n    vals = input().split()\n    A = [int(val) for val in vals]\n    d = {}\n    for a in A:\n        highest = len(bin(a))\n        if highest in d:\n            d[highest] += 1\n        else:\n            d[highest] = 1\n    total = 0\n    for count in d.values():\n        total += count * (count - 1) // 2\n    results.append(total)\nfor result in results:\n    print(result)", "t = int(input())\nresults = []\nfor k in range(t):\n    n = int(input())\n    vals = input().split()\n    A = [int(val) for val in vals]\n    d = {}\n    for a in A:\n        highest = len(bin(a))\n        if highest in d:\n            d[highest] += 1\n        else:\n            d[highest] = 1\n    total = 0\n    for count in d.values():\n        total += count * (count - 1) // 2\n    results.append(total)\nfor result in results:\n    print(result)", "t = int(input())\nresults = []\nfor k in range(t):\n    n = int(input())\n    vals = input().split()\n    A = [int(val) for val in vals]\n    l = [0] * 32\n    for a in A:\n        highest = len(bin(a)) - 2\n        l[highest] += 1\n    total = 0\n    for count in l:\n        total += count * (count - 1) // 2\n    results.append(total)\nfor result in results:\n    print(result)", "from collections import Counter\nfor _ in range(int(input())):\n    input()\n    a = [int(x) for x in input().split()]\n    (bi, ans) = (Counter(), 0)\n    for e in a:\n        v = len(bin(e)[2:])\n        ans += bi[v]\n        bi[v] += 1\n    print(ans)", "import sys\nimport math\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef SI():\n    return sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n    n = II()\n    a = LI()\n    d = [0] * 32\n    for i in range(n):\n        d[len(bin(a[i])[2:]) - 1] += 1\n    ans = 0\n    for i in range(32):\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = [len(bin(int(i))[2:]) for i in input().split()]\n    cnt = [0] * (max(a) + 1)\n    for i in a:\n        cnt[i] += 1\n    ans = 0\n    for i in cnt:\n        ans += i * (i - 1) // 2\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [0] * 40\n    res = 0\n    for x in a:\n        b[len(bin(x)) - 2] += 1\n    for x in b:\n        if x < 2:\n            continue\n        res += x * (x - 1) // 2\n    print(res)", "import math\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    groups = [0 for i in range(100)]\n    ans = 0\n    for i in a:\n        msb_pos = int(math.log2(i))\n        ans += groups[msb_pos]\n        groups[msb_pos] += 1\n    print(ans)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "for tt in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    vals = [0 for i in range(32)]\n    for i in l:\n        vals[len(bin(i)[2:])] += 1\n    ans = 0\n    for i in vals:\n        ans += i * (i - 1) // 2\n    print(ans)"]