["def solve():\n    (n, p, k) = map(int, input().split())\n    blocks = input()\n    (x, y) = map(int, input().split())\n    costs = [0] * n\n    for i in range(n - 1, p - 2, -1):\n        if i + k < n:\n            costs[i] = costs[i + k]\n        if blocks[i] == '0':\n            costs[i] += x\n    for i in range(p - 1, n):\n        costs[i] += y * (i - p + 1)\n    print(min(costs[p - 1:]))\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().strip().split())\n    s = input()\n    (x, y) = map(int, input().strip().split())\n    l = [0] * n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            l[i] += x\n        if i < n - k:\n            l[i] += l[i + k]\n    for i in range(0, n - p + 1):\n        l[i + p - 1] += i * y\n    print(min(l[p - 1:]))", "def fill(A, k, dp, x):\n    for i in range(1, k + 1):\n        j = len(A) - i\n        addcost = 0\n        while j >= 0:\n            addcost += (A[j] == '0') * x\n            dp[j] = addcost\n            j = j - k\n\ndef fun(A, x, y, k, p, dp):\n    rcost = 0\n    s = 0\n    mini = dp[p - 1]\n    i = p - 1 + s\n    while rcost < mini and p + s <= len(A):\n        i = p - 1 + s\n        addcost = dp[i]\n        totalcost = addcost + rcost\n        mini = min(mini, totalcost)\n        rcost += y\n        s += 1\n    return mini\nfor _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    A = input()\n    (x, y) = map(int, input().split())\n    dp = [0 for i in range(len(A) + 1)]\n    fill(A, k, dp, x)\n    print(fun(A, x, y, k, p, dp))", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    blocks = input()\n    (x, y) = map(int, input().split())\n    costs = [0] * n\n    for i in range(n - 1, p - 2, -1):\n        if i + k < n:\n            costs[i] = costs[i + k]\n        if blocks[i] == '0':\n            costs[i] += x\n    for i in range(p - 1, n):\n        costs[i] += y * (i - p + 1)\n    print(min(costs[p - 1:]))", "t = int(input())\nfor i in range(t):\n    (n, p, k) = map(int, input().split())\n    l = list(input())\n    (x, y) = map(int, input().split())\n    val = [0] * n\n    ans = x * n + y * n\n    for j in range(n - 1, -1, -1):\n        if l[j] == '0':\n            val[j] = x + val[j + k] if j + k < n else x\n        else:\n            val[j] = val[j + k] if j + k < n else 0\n    for j in range(p - 1, n, 1):\n        ans = min(ans, (j + 1 - p) * y + val[j])\n    print(ans)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().strip().split())\n    s = input()\n    (x, y) = map(int, input().strip().split())\n    l = [0 for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            l[i] += x\n        if i < n - k:\n            l[i] += l[i + k]\n    for i in range(0, n - p + 1):\n        l[i + p - 1] += i * y\n    print(min(l[p - 1:]))", "def solve():\n    (n, p, k) = map(int, input().split())\n    blocks = input()\n    (x, y) = map(int, input().split())\n    costs = [0] * n\n    for i in range(n - 1, p - 2, -1):\n        if i + k < n:\n            costs[i] = costs[i + k]\n        if blocks[i] == '0':\n            costs[i] += x\n    for i in range(p - 1, n):\n        costs[i] += y * (i - p + 1)\n    print(min(costs[p - 1:]))\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "for i in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    l = [*input()]\n    (x, y) = map(int, input().split())\n    q = [0 for i in range(n)]\n    r = []\n    for i in range(n - 1, n - k - 1, -1):\n        w = 0\n        for j in range(i, -1, -k):\n            if l[j] == '0':\n                w += x\n            q[j] += w\n    for i in range(p - 1, n):\n        r += [y * (i - p + 1) + q[i]]\n    print(min(r))", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\nT = int(input())\nfor _ in range(T):\n    (n, p, k) = get_ints()\n    A = list(map(int, sys.stdin.readline().strip()))\n    (x, y) = get_ints()\n    C = [0] * n\n    for i in range(n):\n        if i < k:\n            C[n - 1 - i] = 1 - A[n - 1 - i]\n        else:\n            C[n - 1 - i] = C[n - 1 - i + k] + (1 - A[n - 1 - i])\n    min_time = float('inf')\n    for i in range(p - 1, n):\n        current_time = C[i] * x + (i - (p - 1)) * y\n        if current_time < min_time:\n            min_time = current_time\n    print(min_time)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    p -= 1\n    n -= p\n    a = a[p:]\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        ans[i] = ans[i + k] - y * k if i + k < n else i * y\n        if a[i] == '0':\n            ans[i] += x\n    print(min(ans))", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "def solve():\n    (cells, first_cell, period) = map(int, input().split())\n    first_cell -= 1\n    pattern = list(map(int, input()))\n    (add_platform, reduce_cell) = map(int, input().split())\n    dp = [0] * cells\n    for i in range(cells - 1, -1, -1):\n        dp[i] = 1 - pattern[i]\n        if i + period < cells:\n            dp[i] += dp[i + period]\n    lambdafun = lambda t: reduce_cell * (t - first_cell) + add_platform * dp[t]\n    return min(map(lambdafun, range(first_cell, cells)))\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    mem = [0] * (n + 1)\n    for i in range(n - 1, p - 2, -1):\n        if s[i] == '0':\n            if i + k < n:\n                mem[i] = mem[i + k]\n            mem[i] += 1\n        elif i + k < n:\n            mem[i] = mem[i + k]\n    ans = n * (x + y)\n    for i in range(p - 1, n):\n        ans = min(ans, x * mem[i] + y * (i - (p - 1)))\n    print(ans)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, p, k) = mints()\n    a = list(map(int, minp()))\n    (x, y) = mints()\n    dp = [0] * n\n    for i in range(n - 1, max(n - k - 1, -1), -1):\n        dp[i] = int(a[i] == 0)\n    for i in range(n - k - 1, -1, -1):\n        dp[i] = int(a[i] == 0) + dp[i + k]\n    ans = int(9e+18)\n    for i in range(p - 1, n):\n        ans = min(ans, dp[i] * x + (i - (p - 1)) * y)\n    print(ans)\nfor i in range(mint()):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        (n, p, k) = map(int, input().split())\n        p -= 1\n        A = input().rstrip()\n        (x, y) = map(int, input().split())\n        dp = [f_inf] * n\n        if A[p] == '0':\n            dp[p] = x\n        else:\n            dp[p] = 0\n        j = 1\n        for i in range(p + 1, n):\n            dp[i] = j * y\n            if A[i] == '0':\n                dp[i] += x\n            j += 1\n        res = f_inf\n        for i in range(p, n):\n            if i + k >= n:\n                res = min(res, dp[i])\n                continue\n            if A[i + k] == '0':\n                dp[i + k] = min(dp[i + k], dp[i] + x)\n            else:\n                dp[i + k] = min(dp[i + k], dp[i])\n        print(res)\nresolve()", "import math\n\ndef solve(n, p, k, A, x, y):\n    creates = [0 for _ in range(n + 1)]\n    cases = min(k, n - p + 1)\n    for i in range(cases):\n        start = n - i\n        while start >= p:\n            if A[start - 1] == '0':\n                creates[start] += 1\n            if start + k <= n:\n                creates[start] += creates[start + k]\n            start -= k\n    cost = [0 for _ in range(n + 1)]\n    for i in range(p, n + 1):\n        cost[i] = x * creates[i] + (i - p) * y\n    return min(cost[p:])\nt = int(input())\nfor i in range(t):\n    (n, p, k) = map(int, input().split())\n    A = input()\n    (x, y) = map(int, input().split())\n    print(str(solve(n, p, k, A, x, y)))", "for tt in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = 'x' + input()\n    (x, y) = map(int, input().split())\n    ma = 10 ** 9\n    dp = [ma for i in range(n + 1)]\n    cnt = 0\n    for i in range(p, p + k):\n        if i > n:\n            break\n        dp[i] = cnt * y\n        if s[i] == '0':\n            dp[i] += x\n        cnt += 1\n    for i in range(p + k, n + 1):\n        dp[i] = min((i - p) * y, dp[i - k])\n        if s[i] == '0':\n            dp[i] += x\n    ans = 10 ** 9\n    for i in range(n - k + 1, n + 1):\n        ans = min(ans, dp[i])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    plat = '0' + input()\n    (x, y) = map(int, input().split())\n    cost = [0] * (n + 1)\n    for i in range(n, p - 1, -1):\n        if i + k <= n:\n            cost[i] = cost[i + k]\n        if plat[i] == '0':\n            cost[i] += x\n    for i in range(p, n + 1):\n        cost[i] += y * (i - p)\n    print(min(cost[p:]))", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "cases = int(input())\nwhile cases > 0:\n    (n, p, k) = map(int, input().split())\n    a = [int(d) for d in str(input())]\n    (x, y) = map(int, input().split())\n    time = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        count = 0\n        for j in range(n - l, p - 2, k * -1):\n            if a[j] == 0:\n                count += 1\n            time = min(abs(j + 1 - p) * y + count * x, time)\n        l += 1\n    cases -= 1\n    print(time)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + k < n:\n            dp[i] += dp[i + k] + (s[i] == '0')\n        else:\n            dp[i] += s[i] == '0'\n    ans = 2e+18\n    for i in range(n):\n        if i >= p - 1:\n            ans = min((i - p + 1) * y + dp[i] * x, ans)\n    print(ans)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = list(input())\n    (x, y) = map(int, input().split())\n    minn = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if a[j] == '0':\n                cnt += 1\n            minn = min(minn, abs(j + 1 - p) * y + cnt * x)\n        l += 1\n    print(minn)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + k >= n and s[i] == '0':\n            dp[i] = x\n        elif i + k < n:\n            if s[i] == '0':\n                dp[i] = x + dp[i + k]\n            else:\n                dp[i] = dp[i + k]\n    mini = dp[p - 1]\n    for r in range(n - p + 1):\n        cost = r * y\n        i = r + p - 1\n        if i >= n:\n            mini = min(cost, mini)\n            break\n        else:\n            mini = min(cost + dp[i], mini)\n    print(mini)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, p, k) = [int(i) for i in input().split()]\n    a = str(input())\n    (x, y) = [int(i) for i in input().split()]\n    c = [0] * n\n    res = 1000000000000\n    for j in range(n - 1, -1, -1):\n        if n - j - 1 < k:\n            c[j] = 1 - int(a[j])\n        else:\n            c[j] = c[j + k] + 1 - int(a[j])\n    for j in range(p - 1, n, 1):\n        c[j] = x * c[j] + y * (j - p + 1)\n        res = min(res, c[j])\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    a = a[p - 1:]\n    ans = [0 for i in range(len(a))]\n    for i in range(len(ans) - 1, -1, -1):\n        if i >= len(ans) - k:\n            temp = i * y\n            if int(a[i]) == 0:\n                temp += x\n            ans[i] = temp\n        else:\n            temp = ans[i + k] - k * y\n            if int(a[i]) == 0:\n                temp += x\n            ans[i] = temp\n    print(min(ans))", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    l = list(s)\n    (x, y) = map(int, input().split())\n    dpk = [0] * n\n    for i in range(n - k, n):\n        if l[i] == '0':\n            dpk[i] = x\n    for i in range(n - k - 1, -1, -1):\n        if l[i] == '1':\n            dpk[i] += dpk[i + k]\n        else:\n            dpk[i] += x + dpk[i + k]\n    ans = float('inf')\n    for i in range(p - 1, n):\n        dpk[i] += y * (i - p + 1)\n        ans = min(ans, dpk[i])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    ans1 = 0\n    c = [0] * n\n    for l in range(k):\n        c[n - l - 1] = 1 - int(s[n - l - 1])\n    for l in range(n - k - 1, p - 2, -1):\n        c[l] = c[l + k] + 1 - int(s[l])\n    min1 = 10000000000000\n    sum = 0\n    for q in range(p - 1, n):\n        sum = c[q] * x + (q - p + 1) * y\n        if sum < min1:\n            min1 = sum\n    print(min1)", "t = int(input())\nfor i in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    summ = 0\n    arr = [0] * n\n    for j in range(k):\n        arr[n - j - 1] = 1 - int(s[n - j - 1])\n    for j in range(n - k - 1, p - 2, -1):\n        arr[j] = arr[j + k] + 1 - int(s[j])\n    mini = 1000000000\n    for j in range(p - 1, n):\n        val = x * arr[j] + y * (j - p + 1)\n        if val < mini:\n            mini = val\n    print(mini)", "t = int(input())\nfor i in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    n = l1[0]\n    p = l1[1]\n    k = l1[2]\n    inp_str = input()\n    l2 = [int(x) for x in input().split()]\n    add = l2[0]\n    rem = l2[1]\n    c = [0 for x in range(0, n)]\n    for j in range(n - 1, -1, -1):\n        if j + k < n:\n            if inp_str[j] == '0':\n                c[j] = c[j + k] + 1\n            else:\n                c[j] = c[j + k]\n        elif inp_str[j] == '0':\n            c[j] = 1\n        else:\n            c[j] = 0\n    p -= 1\n    mini = 10 ** 9\n    for j in range(p, n):\n        val = (j - p) * rem + add * c[j]\n        if mini > val:\n            mini = val\n    print(mini)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    s = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        s[q] = count\n    for i in range(p - 1, n):\n        r = min(x * s[i % k] + y * (i - p + 1), r)\n        s[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    l = list(s)\n    (x, y) = map(int, input().split())\n    dpk = [0] * n\n    for i in range(n - k, n):\n        if l[i] == '0':\n            dpk[i] = x\n    for i in range(n - k - 1, -1, -1):\n        if l[i] == '1':\n            dpk[i] += dpk[i + k]\n        else:\n            dpk[i] += x + dpk[i + k]\n    ans = float('inf')\n    for i in range(p - 1, n):\n        dpk[i] += y * (i - p + 1)\n        ans = min(ans, dpk[i])\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    result = 10 ** 18\n    dp = [10 ** 18] * n\n    for i in range(n):\n        if i + 1 < p:\n            continue\n        if i + 1 < k:\n            if a[i] == '0':\n                dp[i] = y * (i - p + 1) + x\n            else:\n                dp[i] = y * (i - p + 1)\n        elif a[i] == '0':\n            dp[i] = min(dp[i - k], y * (i - p + 1)) + x\n        else:\n            dp[i] = min(dp[i - k], y * (i - p + 1))\n        if n - i - 1 < k:\n            result = min(result, dp[i])\n    print(result)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    a = list(str(input()))\n    (x, y) = map(int, input().split())\n    cost = [0 for i in range(k)]\n    for i in range(p - 1, n):\n        a[i] = int(a[i])\n        if a[i] == 0:\n            cost[i % k] += x\n            a[i] = 2\n    mn = 10 ** 12\n    for i in range(p - 1, n):\n        mn = min(mn, cost[i % k] + y * (i - p + 1))\n        if a[i] == 2:\n            cost[i % k] -= x\n    print(mn)", "for z in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    p -= 1\n    a = input()\n    b = [0] * n\n    (x, y) = map(int, input().split())\n    ss = n - p\n    for i in range(p, n):\n        b[i] = (i - p) * y + (x if a[i] == '0' else 0)\n    for i in range(p + k, n):\n        if a[i] == '0':\n            b[i] = min(b[i], b[i - k] + x)\n        else:\n            b[i] = min(b[i], b[i - k])\n    c = 99999999999999\n    for i in range(-1, -min(k, ss) - 1, -1):\n        if b[i] < c:\n            c = b[i]\n    print(c)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    l = list(s)\n    (x, y) = map(int, input().split())\n    dpk = [0] * n\n    ans = float('inf')\n    for i in range(n - k, n):\n        if l[i] == '0':\n            dpk[i] = x\n    for i in range(n - k - 1, -1, -1):\n        dpk[i] += dpk[i + k] if l[i] == '1' else x + dpk[i + k]\n    for i in range(p - 1, n):\n        dpk[i] += y * (i - p + 1)\n        ans = min(ans, dpk[i])\n    print(ans)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    s = ' ' + input()\n    (x, y) = map(int, input().split())\n    f = [0] * (n + 3)\n    kq = 10 ** 12\n    for i in range(1, n + 1):\n        if i < p:\n            f[i] = 10 ** 12\n            continue\n        f[i] = y * (i - p)\n        if i - k > 0:\n            f[i] = min(f[i], f[i - k])\n        if s[i] == '0':\n            f[i] += x\n        if i + k > n:\n            kq = min(f[i], kq)\n    print(kq)", "from sys import stdin\nfrom collections import deque\nT = int(stdin.readline().strip())\nfor casos in range(T):\n    (n, p, k) = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n    (x, y) = map(int, stdin.readline().strip().split())\n    cnt = deque([0 for i in range(k)])\n    x1 = 0\n    ans = 10 ** 50\n    c = 0\n    for i in range(n - 1, p - 2, -1):\n        if s[i] == '1':\n            ans = min(ans, (i - p + 1) * y + (x1 // k - cnt[0]) * x)\n            cnt[0] += 1\n        else:\n            ans = min(ans, x + (i - p + 1) * y + (x1 // k - cnt[0]) * x)\n        x1 += 1\n        cnt.appendleft(cnt[-1])\n        cnt.pop()\n    print(ans)", "t = int(input())\nfor q in range(t):\n    (n, p, k) = map(int, input().split())\n    a = list(map(int, input()))\n    (x, y) = map(int, input().split())\n    dp = [-1] * (n + 1)\n    for i in range(p, n + 1):\n        dp[i] = y * (i - p) + (a[i - 1] + 1) % 2 * x\n    for i in range(p + k, n + 1):\n        dp[i] = min(dp[i], dp[i - k] + (a[i - 1] + 1) % 2 * x)\n    md = 10000000000000000\n    for i in range(1, k + 1):\n        if dp[-i] != -1 and dp[-i] < md:\n            md = dp[-i]\n    print(md)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    step = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        step[q] = count\n    for i in range(p - 1, n):\n        r = min(x * step[i % k] + y * (i - p + 1), r)\n        step[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input()]\n    (x, y) = [int(i) for i in input().split()]\n    b = [0 for i in range(n)]\n    for i in range(n - k, n):\n        b[i] = 1 - a[i]\n    for i in range(n - k - 1, -1, -1):\n        b[i] = b[i + k] + 1 - a[i]\n    tmin = x * n\n    for i in range(p - 1, n):\n        t = (i - p + 1) * y + b[i] * x\n        tmin = min(tmin, t)\n    print(tmin)", "t = int(input())\nfor t in range(0, t):\n    q = list(map(int, input().rstrip().split()))\n    n = q[0]\n    p = q[1]\n    k = q[2]\n    st = input()\n    r = list(map(int, input().rstrip().split()))\n    x = r[0]\n    y = r[1]\n    count = []\n    j = p\n    while j <= n and j < p + k:\n        co = 0\n        for d in range(j, n + 1, k):\n            if st[d - 1] == '0':\n                co = co + 1\n        count.append(co)\n        j = j + 1\n    v = 0\n    ca = []\n    for i in range(p + k, n + 1):\n        if st[i - k - 1] == '0':\n            count.append(count[v] - 1)\n        else:\n            count.append(count[v])\n        v = v + 1\n    i = 0\n    for e in count:\n        cost = i * y + e * x\n        ca.append(cost)\n        i = i + 1\n    ca.sort()\n    print(ca[0])", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    s = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        s[q] = count\n    for i in range(p - 1, n):\n        r = min(x * s[i % k] + y * (i - p + 1), r)\n        s[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    s = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        s[q] = count\n    for i in range(p - 1, n):\n        r = min(x * s[i % k] + y * (i - p + 1), r)\n        s[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "for _ in range(int(input())):\n    (n, p, k) = [*map(int, input().split())]\n    l = [1 - int(i) for i in input()]\n    (x, y) = [*map(int, input().split())]\n    dp = [float('inf') for i in range(n)]\n    for i in range(n):\n        if i < p - 1:\n            continue\n        dp[i] = min((i - p + 1) * y + l[i] * x, dp[i - k] + l[i] * x if i - k >= 0 else float('inf'))\n    print(min(dp[n - k:]))", "from collections import Counter\nfrom collections import OrderedDict\nfrom collections import defaultdict\nimport bisect\nimport math\nfrom sys import setrecursionlimit\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef fre_count(mylist):\n    return Counter(mylist)\nt = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    arr = [int(x) for x in input()]\n    (x, y) = map(int, input().split())\n    ans = float('inf')\n    l = 1\n    for i in range(p - 1, p + k - 1):\n        cnt = 0\n        for j in range(n - l, p - 2, k * -1):\n            if arr[j] == 0:\n                cnt += 1\n            ans = min(abs(j + 1 - p) * y + cnt * x, ans)\n        l += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    add_cost = [0 for i in range(n - p + 1)]\n    for i in range(n - p, -1, -1):\n        add_cost[i] = 1 - int(s[i + p - 1])\n        if i + k <= n - p:\n            add_cost[i] += add_cost[i + k]\n    ans = add_cost[0] * x\n    for i in range(1, n - p + 1):\n        curr_cost = add_cost[i] * x + i * y\n        ans = min(ans, curr_cost)\n    print(ans)", "for y in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    ans = [0] * c\n    t = 0\n    for i in range(b - 1, a):\n        if t >= c:\n            t = 0\n        if s[i] == '0':\n            ans[t] += 1\n        t += 1\n    t = 0\n    by = 0\n    minn = 1000000001\n    for i in range(b - 1, a):\n        if t >= c:\n            t = 0\n        cnt = ans[t] * x\n        if ans[t] > 0 and s[i] == '0':\n            ans[t] -= 1\n        minn = min(minn, cnt + by)\n        by += y\n        t += 1\n    print(minn)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    s = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        s[q] = count\n    for i in range(p - 1, n):\n        r = min(x * s[i % k] + y * (i - p + 1), r)\n        s[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "for _ in range(int(input())):\n    (n, p, k) = map(int, input().split())\n    a = input()\n    (x, y) = map(int, input().split())\n    r = 999999999\n    s = [0] * k\n    for q in range(k):\n        count = 0\n        for i in range(q, n, k):\n            if i >= p - 1 and a[i] == '0':\n                count += 1\n        s[q] = count\n    for i in range(p - 1, n):\n        r = min(x * s[i % k] + y * (i - p + 1), r)\n        s[i % k] -= 0 if a[i] == '1' else 1\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, p, k) = [*map(int, input().split())]\n    l = [1 - int(i) for i in input().strip()]\n    (x, y) = [*map(int, input().split())]\n    dp = [float('inf') for i in range(n)]\n    for i in range(n):\n        if i < p - 1:\n            continue\n        dp[i] = min((i - p + 1) * y + l[i] * x, dp[i - k] + l[i] * x if i - k >= 0 else float('inf'))\n    print(min(dp[n - k:]))", "t = int(input())\nfor _ in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    (x, y) = map(int, input().split())\n    dp = [0] * n\n    for i in range(k):\n        if s[n - i - 1] == '1':\n            dp[i] = 0\n        else:\n            dp[i] = x\n    for i in range(k, n - p + 1):\n        if s[n - i - 1] == '1':\n            dp[i] = 0\n        else:\n            dp[i] = x\n        dp[i] += dp[i - k]\n    dp = dp[::-1]\n    ans = 99999999999999999\n    i = 0\n    dop = 0\n    while n - i + 1 > p:\n        ans = min(ans, dp[i + p - 1] + dop)\n        i += 1\n        dop += y\n    print(ans)", "tc = int(input())\nwhile tc:\n    (n, p, k) = map(int, input().split())\n    st = '#' + input()\n    (x, y) = map(int, input().split())\n    ans = -1\n    dp = [0] * (n + 1)\n    for i in reversed(range(1, n + 1)):\n        if i + k > n:\n            if st[i] == '0':\n                dp[i] = 1\n        else:\n            if st[i] == '0':\n                dp[i] = 1\n            dp[i] += dp[i + k]\n    for j in range(p, n + 1):\n        a = (j - p) * y + dp[j] * x\n        if ans == -1 or a < ans:\n            ans = a\n    print(ans)\n    tc -= 1", "t = int(input())\nfor j in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    s = '~' + s\n    (x, y) = map(int, input().split())\n    a = [0] * n\n    b = [0] * n\n    ans = 9999999999\n    for i in range(p, n + 1):\n        a[(i - p) % k] += s[i] == '0'\n    for i in range(p, n + 1):\n        ans = min(ans, (i - p) * y + (a[(i - p) % k] - b[(i - p) % k]) * x)\n        b[(i - p) % k] += s[i] == '0'\n    print(ans)", "try:\n    inp = open('file.txt').readline\nexcept:\n    inp = input\nt = int(inp().strip())\nfor _ in range(t):\n    (n, p, k) = map(int, inp().strip().split(' '))\n    arr = list(inp().strip())\n    (y, x) = map(int, inp().strip().split(' '))\n    kcou = [0 for i in range(n)]\n    i = 0\n    for i in range(n - 1, n - k - 1, -1):\n        j = i\n        while j >= 0:\n            if arr[j] != '1':\n                kcou[j] += 1\n            if j + k < n:\n                kcou[j] += kcou[j + k]\n            j -= k\n    ans = int(1000000000.0)\n    rem = 0\n    for i in range(p - 1, n):\n        if arr[i] == '1':\n            cur = rem * x\n            if i + k < n:\n                cur += kcou[i + k] * y\n            ans = min(ans, cur)\n        else:\n            cur = rem * x + y\n            if i + k < n:\n                cur += kcou[i + k] * y\n            ans = min(ans, cur)\n        rem += 1\n    print(ans)", "t = int(input())\nfor j in range(t):\n    (n, p, k) = map(int, input().split())\n    s = input()\n    s = '~' + s\n    (x, y) = map(int, input().split())\n    a = [0]\n    b = [0]\n    ans = 9999999999\n    for i in range(n + 1):\n        a.append(0)\n        b.append(0)\n    for i in range(p, n + 1):\n        a[(i - p) % k] += s[i] == '0'\n    for i in range(p, n + 1):\n        ans = min(ans, (i - p) * y + (a[(i - p) % k] - b[(i - p) % k]) * x)\n        b[(i - p) % k] += s[i] == '0'\n    print(ans)", "a = int(input())\nfor i in range(0, a):\n    (n, p, k) = map(int, input().split())\n    p = p - 1\n    s = input()\n    (x, y) = map(int, input().split())\n    arr = [int(i) for i in s]\n    d = dict()\n    for i in range(p, len(arr)):\n        if (i - p) % k in d:\n            d[(i - p) % k].append(arr[i])\n        else:\n            d[(i - p) % k] = [arr[i]]\n    mic = dict()\n    for i in d:\n        incost = d[i].count(0)\n        mic[i] = i * y + incost * x\n        for j in range(1, len(d[i])):\n            if d[i][j - 1] == 0:\n                incost = incost - 1\n            thiscost = incost * x + j * y * k + i * y\n            mic[i] = min(mic[i], thiscost)\n    minn = float('inf')\n    for i in mic:\n        minn = min(mic[i], minn)\n    print(minn)", "t = int(input())\nfor l in range(t):\n    (n, p, k) = map(int, input().split())\n    a = list(map(int, list(input())))\n    a = [1 - a[i] for i in range(n)]\n    (x, y) = map(int, input().split())\n    p -= 1\n    mn = n * x\n    sumadds = [0] * k\n    start = [i for i in range(k)]\n    for i in range(n):\n        sumadds[i % k] += a[i]\n    for i in range(p, n):\n        while start[i % k] != i:\n            sumadds[i % k] -= a[start[i % k]]\n            start[i % k] += k\n        mn = min(mn, sumadds[i % k] * x + (i - p) * y)\n    print(mn)"]