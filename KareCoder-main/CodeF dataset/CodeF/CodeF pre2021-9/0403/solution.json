["def fn(v, target):\n    sx = 0\n    for x in v:\n        sx += x\n        if sx == target:\n            sx = 0\n        elif sx > target:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    sm = sum(v)\n    ans = 0\n    for i in range(1, n + 1):\n        if sm % i:\n            continue\n        if fn(v, sm // i):\n            ans = i\n    print(n - ans)", "for l in [*open(0)][2::2]:\n    n = s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n        n = k = n + 1\n    while s % k or {*range(0, s, s // k)} - t:\n        k -= 1\n    print(n - k)", "for hello in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            need_sum = s / i\n            cur_sum = 0\n            for j in range(0, n):\n                cur_sum += a[j]\n                ok = True\n                if cur_sum > need_sum:\n                    ok = False\n                    break\n                if cur_sum == need_sum:\n                    cur_sum = 0\n            if ok:\n                print(n - i)\n                break", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, arr):\n    partial_sums = [arr[0]]\n    s_p_s = set()\n    total = 0\n    for elem in arr[1:]:\n        partial_sums.append(partial_sums[-1] + elem)\n    total = partial_sums[-1]\n    s_p_s = set(partial_sums)\n    for ps in partial_sums[0:-1]:\n        if total % ps == 0:\n            correct = True\n            for mult in range(2 * ps, total, ps):\n                if mult not in s_p_s:\n                    correct = False\n                    break\n            if correct:\n                nb_groups = total // ps\n                print(n - nb_groups)\n                return\n    print(n - 1)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solution(n, arr)", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    part = 0\n    s = sum(a)\n    found = False\n    for i in range(n - 1):\n        part += a[i]\n        if s % part != 0:\n            continue\n        valid = True\n        curr = 0\n        for j in range(i + 1, n):\n            if curr + a[j] > part:\n                valid = False\n                break\n            elif curr + a[j] == part:\n                curr = 0\n            else:\n                curr += a[j]\n        if valid:\n            print(n - s // part)\n            found = True\n            break\n    if not found:\n        print(n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    for i in range(n):\n        k = n - i\n        flag = True\n        if total % k == 0:\n            val = total // k\n            ans = 0\n            for j in range(n):\n                ans += a[j]\n                if ans == val:\n                    ans = 0\n                elif ans > val:\n                    flag = False\n                    break\n            if flag:\n                print(i)\n                break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = sum(lst)\n    for k in range(n):\n        if s % (n - k) == 0:\n            x = s // (n - k)\n            c = 0\n            ind = 0\n            su = 0\n            while True:\n                if ind > n - 1:\n                    break\n                elif su + lst[ind] > x:\n                    c += 1\n                    ind = n\n                    su = 1000000000.0\n                elif su + lst[ind] == x:\n                    su = 0\n                    ind += 1\n                else:\n                    su += lst[ind]\n                    ind += 1\n            if su == 0:\n                print(k)\n                break", "from sys import stdin\ninp = stdin.read()\nlst = list(map(int, inp.split()))\nt = lst[0]\ns = 1\nfor _ in range(t):\n    n = lst[s]\n    s += 1\n    seq = lst[s:s + n]\n    totsum = 0\n    totop = n\n\n    def ver(x, l):\n        actsum = 0\n        op = 0\n        for i in l:\n            if actsum < x:\n                actsum += i\n            if actsum == x:\n                actsum = 0\n            else:\n                op += 1\n            if actsum > x:\n                return n\n        return op if actsum == 0 else n\n    ss = sum(seq)\n    for i in seq:\n        totsum += i\n        if ss % totsum == 0:\n            totop = min(totop, ver(totsum, seq))\n    print(totop)\n    s += n", "from math import ceil, sqrt\n\ndef main():\n    return '\\n'.join(map(str, (nOperationsMinToMerge(*case1462d()) for _ in range(int(input())))))\n\ndef case1462d():\n    arrayLength = int(input())\n    array = tuple(map(int, input().split()))\n    return (array, arrayLength)\n\ndef nOperationsMinToMerge(array, arrayLength):\n    total = sum(array)\n    for factor in factorsOf(total):\n        (value, success) = (array[0], True)\n        for i in range(1, arrayLength):\n            if value > factor:\n                success = False\n                break\n            elif value == factor:\n                value = array[i]\n            else:\n                value += array[i]\n        if success and value == factor:\n            return arrayLength - total // factor\n\ndef factorsOf(n):\n    yield 1\n    if n == 1:\n        return\n    (factorsStorage, squareRoot_n) = ([n], sqrt(n))\n    limit = ceil(squareRoot_n)\n    for value in range(2, limit):\n        if not n % value:\n            yield value\n            factorsStorage.append(n // value)\n    if squareRoot_n == limit:\n        yield limit\n    factorsStorage.reverse()\n    for factor in factorsStorage:\n        yield factor\nprint(main())", "from math import ceil, sqrt\n\ndef main():\n    return '\\n'.join(map(str, (nOperationsMinToMerge(*case1462d()) for _ in range(int(input())))))\n\ndef case1462d():\n    arrayLength = int(input())\n    array = tuple(map(int, input().split()))\n    return (array, arrayLength)\n\ndef nOperationsMinToMerge(array, arrayLength):\n    (total, firstValue) = (sum(array), array[0])\n    for factor in factorsOf(total):\n        (number, success) = (firstValue, True)\n        for value in array[1:]:\n            if number > factor:\n                success = False\n                break\n            elif number == factor:\n                number = value\n            else:\n                number += value\n        if success and number == factor:\n            return arrayLength - total // factor\n\ndef factorsOf(n):\n    yield 1\n    if n == 1:\n        return\n    (factorsStorage, squareRoot_n) = ([n], sqrt(n))\n    limit = ceil(squareRoot_n)\n    for value in range(2, limit):\n        if not n % value:\n            yield value\n            factorsStorage.append(n // value)\n    if squareRoot_n == limit:\n        yield limit\n    factorsStorage.reverse()\n    for factor in factorsStorage:\n        yield factor\nprint(main())", "def solve():\n    n = int(input())\n    ll = list(map(int, input().split()))\n    sm = sum(ll)\n    for i in range(n):\n        if sm % (n - i) == 0:\n            val = sm // (n - i)\n            temp_sm = 0\n            flag = 0\n            for j in range(n):\n                temp_sm += ll[j]\n                if temp_sm == val:\n                    temp_sm = 0\n                elif temp_sm > val:\n                    flag = 1\n                    break\n            if not flag:\n                return i\n    return n\nt = int(input())\nwhile t != 0:\n    res = solve()\n    print(res)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    for i in range(n - 1, -1, -1):\n        if s % (i + 1) == 0:\n            need = s // (i + 1)\n            cursum = 0\n            ok = True\n            for j in range(n):\n                cursum += A[j]\n                if cursum > need:\n                    ok = False\n                    break\n                elif cursum == need:\n                    cursum = 0\n            if ok:\n                print(n - i - 1)\n                break", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = n - 1\n    s = sum(arr)\n    for k in range(n):\n        if s % (n - k):\n            continue\n        temp = s // (n - k)\n        (st, count) = (0, 0)\n        for i in range(n):\n            st += arr[i]\n            if st == temp:\n                count += 1\n                st = 0\n            if st > temp:\n                st = 0\n                break\n        if count == n - k:\n            ans = min(ans, k)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    sm = sum(v)\n    ans = 0\n\n    def fn(target):\n        sx = 0\n        for x in v:\n            sx += x\n            if sx == target:\n                sx = 0\n            elif sx > target:\n                return False\n        return True\n    for i in range(1, n + 1):\n        if sm % i:\n            continue\n        if fn(sm // i):\n            ans = i\n    print(n - ans)", "def tong(arr, number):\n    if len(arr) == 0:\n        return True\n    ans = 0\n    for i in arr:\n        ans += i\n        if ans == number:\n            ans = 0\n        elif ans > number:\n            return False\n        else:\n            continue\n    if ans == 0:\n        return True\n    else:\n        return False\nn = int(input())\nfor _ in range(n):\n    m = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    lmao = 0\n    for i in arr:\n        lmao += i\n        if total % lmao == 0:\n            if tong(arr, lmao):\n                break\n            else:\n                continue\n        else:\n            continue\n    print(m - total // lmao)", "import bisect\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    arr = [int(k) for k in input().split()]\n\n    def valid(limit):\n        tmp = 0\n        for i in range(0, N):\n            tmp += arr[i]\n            if tmp == limit:\n                tmp = 0\n            elif tmp > limit:\n                return False\n        if tmp == 0:\n            return True\n        return False\n    tot = sum(arr)\n    max_seg = 0\n    for seg in range(1, N + 1):\n        if tot % seg == 0:\n            if valid(tot // seg):\n                max_seg = max(max_seg, seg)\n    print(N - max_seg)", "from sys import stdin\n\ndef main():\n    inp = stdin.read()\n    lst = list(map(int, inp.split()))\n    t = lst[0]\n    s = 1\n    for _ in range(t):\n        n = lst[s]\n        s += 1\n        seq = lst[s:s + n]\n        totsum = 0\n        totop = n\n\n        def ver(x, l):\n            actsum = 0\n            op = 0\n            for i in l:\n                if actsum < x:\n                    actsum += i\n                if actsum == x:\n                    actsum = 0\n                else:\n                    op += 1\n                if actsum > x:\n                    return n\n            return op if actsum == 0 else n\n        ss = sum(seq)\n        for i in seq:\n            totsum += i\n            if ss % totsum == 0:\n                totop = min(totop, ver(totsum, seq))\n        print(totop)\n        s += n\nmain()", "from sys import stdin\ninp = stdin.read()\nlst = list(map(int, inp.split()))\nt = lst[0]\ns = 1\nfor _ in range(t):\n    n = lst[s]\n    s += 1\n    seq = lst[s:s + n]\n    totsum = 0\n    totop = n\n\n    def ver(x, l):\n        actsum = 0\n        op = 0\n        for i in l:\n            if actsum < x:\n                actsum += i\n            if actsum == x:\n                actsum = 0\n            else:\n                op += 1\n            if actsum > x:\n                return n\n        return op if actsum == 0 else n\n    ss = sum(seq)\n    for i in seq:\n        totsum += i\n        if ss % totsum == 0:\n            totop = min(totop, ver(totsum, seq))\n    print(totop)\n    s += n", "for i in range(int(input())):\n    length = int(input())\n    ls = list(map(int, input().split()))\n    if len(ls) == 1 or ls.count(ls[0]) == len(ls):\n        print(0)\n    else:\n        res = len(ls) - 1\n        s = sum(ls)\n        for i in range(length - 1, 1, -1):\n            if s % i == 0:\n                cur = 0\n                need = s // i\n                ans = 0\n                flag = 1\n                for j in range(len(ls)):\n                    cur += ls[j]\n                    if cur > need:\n                        flag = 0\n                        break\n                    elif cur == need:\n                        cur = 0\n                if flag == 1:\n                    res = length - i\n                    break\n        print(res)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    mn = max(arr)\n    if len(set(arr)) == 1:\n        print(0)\n    else:\n        for i in range(n - 1, 0, -1):\n            if s % i == 0 and s // i >= mn:\n                j = 0\n                while j < n:\n                    if arr[j] == s // i:\n                        j = j + 1\n                    elif arr[j] < s // i:\n                        count = arr[j]\n                        while count < s // i and j < n:\n                            j = j + 1\n                            if arr[j] == s // i:\n                                break\n                            else:\n                                count = count + arr[j]\n                        if count == s // i:\n                            j = j + 1\n                        else:\n                            break\n                if j == n:\n                    break\n        print(n - i)", "import math\n\ndef answer_check(x, lst):\n    x1 = 0\n    for j in lst:\n        x1 += j\n        if x1 == x:\n            x1 = 0\n            continue\n        elif x1 < x:\n            continue\n        else:\n            return False\n    return True\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ma = max(lst)\n    su = sum(lst)\n    ma_cnt = len(lst) - 1\n    for i in range(1, int(math.sqrt(su)) + 2):\n        if su % i == 0:\n            b = answer_check(i, lst)\n            if b is True:\n                if ma_cnt > n - su // i:\n                    ma_cnt = n - su // i\n            b = answer_check(su // i, lst)\n            if b is True:\n                if ma_cnt > n - i:\n                    ma_cnt = n - i\n    print(ma_cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    s = sum(a)\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            (q, p, ok) = (0, s // i, True)\n            for j in range(n):\n                q += a[j]\n                if q > p:\n                    ok = False\n                    break\n                elif q == p:\n                    q = 0\n            if ok:\n                print(n - i)\n                break", "for u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    s = sum(x)\n    ans = 0\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            r = s // i\n            c = 0\n            f = True\n            for j in range(n):\n                c += x[j]\n                if c == r:\n                    c = 0\n                elif c > r:\n                    f = False\n                    break\n            if f:\n                ans = n - i\n                break\n    print(ans)", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max(a)\n    sum = 0\n    check1 = 0\n    cnt = 0\n    for i in range(n):\n        sum += a[i]\n    for i in range(n):\n        x = n - i\n        if sum % x == 0:\n            check = 0\n            cnt = sum / x\n            sum1 = 0\n            for j in range(n):\n                sum1 += a[j]\n                if sum1 == cnt:\n                    sum1 = 0\n                if sum1 > cnt:\n                    check = 1\n                    break\n            if check == 0:\n                check1 = 1\n                print(i)\n                break\n        if check1 == 1:\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum = 0\n    c = 0\n    b = 1\n    for i in range(n):\n        sum += a[i]\n    for i in range(n, 0, -1):\n        c = 0\n        b = 1\n        if sum % i == 0:\n            n1 = sum // i\n            for j in range(n):\n                c += a[j]\n                if c > n1:\n                    b = 0\n                    break\n                if c == n1:\n                    c = 0\n            if b == 1:\n                print(n - i)\n                break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = sum(l)\n    for j in range(n, 0, -1):\n        val = x / j\n        if int(val) != val:\n            continue\n        else:\n            val = x // j\n            total = 0\n            for k in range(n):\n                total += l[k]\n                if total > val:\n                    break\n                elif total == val:\n                    total = 0\n                else:\n                    continue\n            if total == 0:\n                print(n - j)\n                break", "def is_valid(arr, k, n, S):\n    x = n - k\n    if S % x != 0:\n        return False\n    curr = 0\n    val = S / x\n    for i in range(n):\n        curr += arr[i]\n        if curr == val:\n            curr = 0\n        elif curr > val:\n            return False\n    return curr == 0\n\ndef add_to_neighbour(arr, n):\n    S = sum(arr)\n    for k in range(n):\n        if is_valid(arr, k, n, S):\n            print(k)\n            return\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    add_to_neighbour(arr, n)\n    t -= 1", "from math import ceil, sqrt\n\ndef main():\n    return '\\n'.join(map(str, (nOperationsMinToMerge(*case1462d()) for _ in range(int(input())))))\n\ndef case1462d():\n    arrayLength = int(input())\n    array = tuple(map(int, input().split()))\n    return (array, arrayLength)\n\ndef nOperationsMinToMerge(array, arrayLength):\n    (total, firstValue) = (sum(array), array[0])\n    array = array[1:]\n    for factor in factorsOf(total):\n        (number, success) = (firstValue, True)\n        for value in array:\n            if number > factor:\n                success = False\n                break\n            elif number == factor:\n                number = value\n            else:\n                number += value\n        if success and number == factor:\n            return arrayLength - total // factor\n\ndef factorsOf(n):\n    yield 1\n    if n == 1:\n        return\n    (factorsStorage, squareRoot_n) = ([n], sqrt(n))\n    limit = ceil(squareRoot_n)\n    for value in range(2, limit):\n        if not n % value:\n            yield value\n            factorsStorage.append(n // value)\n    if squareRoot_n == limit:\n        yield limit\n    factorsStorage.reverse()\n    for factor in factorsStorage:\n        yield factor\nprint(main())", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\n\ndef func(a, len, x):\n    ok = True\n    for i in range(n):\n        if a[i] != -1:\n            j = i + 1\n            while j < n and a[i] < x:\n                a[i] += a[j]\n                a[j] = -1\n                j += 1\n            if a[i] != x:\n                ok = False\n                break\n        if not ok:\n            break\n    return (ok, a)\nfor i in range(*maps()):\n    (n,) = maps()\n    a = [*maps()]\n    s = sum(a)\n    if len(set(a)) == 1:\n        print(0)\n        continue\n    se = set()\n    for i in range(1, int(s ** 0.5) + 1):\n        if s % i == 0:\n            se.add(s // i)\n            se.add(i)\n    ans = 1 << 60\n    for N in se:\n        (x, y) = func(a[:], N, s // N)\n        if x:\n            ans = min(ans, sum((1 if i == -1 else 0 for i in y)))\n    print(ans)", "def get_ints():\n    return [int(x) for x in input().split()]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = get_ints()\n    As = sum(A)\n    for c in range(n, 0, -1):\n        if As % c == 0:\n            ds = As // c\n            good = True\n            s = 0\n            for j in range(n):\n                s += A[j]\n                if s == ds:\n                    s = 0\n                elif s > ds:\n                    good = False\n                    break\n            if good:\n                print(n - c)\n                break", "for i in range(int(input())):\n    length = int(input())\n    ls = list(map(int, input().split()))\n    if len(ls) == 1 or ls.count(ls[0]) == len(ls):\n        print(0)\n    else:\n        res = len(ls) - 1\n        s = sum(ls)\n        for i in range(length - 1, 1, -1):\n            if s % i == 0:\n                cur = 0\n                need = s // i\n                ans = 0\n                flag = 1\n                for j in range(len(ls)):\n                    cur += ls[j]\n                    if cur > need:\n                        flag = 0\n                        break\n                    elif cur == need:\n                        cur = 0\n                if flag == 1:\n                    res = length - i\n                    break\n        print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sm = sum(a)\n    check = False\n    for i in range(n, 0, -1):\n        if sm % i == 0:\n            cnt = 0\n            b = []\n            for j in a:\n                b.append(j)\n            check = False\n            for j in range(n - 1):\n                if cnt == n - i:\n                    for k in range(j + 1, n):\n                        if b[k] != sm // i:\n                            check = True\n                            break\n                    break\n                if b[j] > sm // i:\n                    check = True\n                    break\n                if b[j] < sm // i:\n                    b[j + 1] += b[j]\n                    cnt += 1\n            if not check and b[-1] == sm // i:\n                print(n - i)\n                break", "def solve(a, pos):\n    if pos == len(a) - 1:\n        return len(a)\n    if a[pos] == a[pos + 1]:\n        return solve(a, pos + 1)\n    if len(a) - pos == 2 or a[pos] < a[pos + 1] + a[pos + 2]:\n        return solve([a[0] + a[1]] + a[2:], 0)\n    elif pos == 0:\n        return max(solve([a[0] + a[1]] + a[2:], 0), solve([a[pos], a[pos + 1] + a[pos + 2]] + a[3:], 0))\n    else:\n        return max(solve([a[0] + a[1]] + a[2:], 0), solve(a[:pos + 1] + [a[pos + 1] + a[pos + 2]] + a[pos + 3:], pos - 1))\nfor test in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    summ = sum(ar)\n    for k in range(n):\n        if not summ % (n - k) == 0:\n            continue\n        target = summ // (n - k)\n        acc = 0\n        ok = True\n        for el in ar:\n            acc += el\n            if acc > target:\n                ok = False\n                break\n            if acc == target:\n                acc = 0\n        if ok:\n            print(k)\n            break", "def R():\n    return map(int, input().split())\n\ndef L():\n    return list(map(int, input().split()))\n\ndef I():\n    return int(input())\n\ndef S():\n    return str(input())\nfor _ in range(I()):\n    n = I()\n    a = L()\n    s = sum(a)\n    for i in range(n, 0, -1):\n        if s % i != 0:\n            continue\n        num = s // i\n        sum2 = 0\n        fl = True\n        for j in range(n):\n            sum2 += a[j]\n            if sum2 == num:\n                sum2 = 0\n            elif sum2 > num:\n                fl = False\n                break\n        if fl:\n            break\n    print(n - i)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    flag = 0\n    min_sample = 0\n    for i in list(reversed(range(1, n + 1))):\n        v = s / i\n        if v % 1 != 0:\n            continue\n        val = 0\n        for (c, j) in enumerate(a):\n            val += j\n            if c == n - 1 and val == v:\n                flag = 1\n            if val == v:\n                val = 0\n            if val > v:\n                flag = 0\n                break\n        if flag == 1:\n            min_sample = i\n            break\n    print(n - min_sample)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        total = sum(arr)\n        ans = 0\n        for i in range(n, 0, -1):\n            if total % i == 0:\n                need_sum = total // i\n                curr_sum = 0\n                validator = True\n                for j in range(n):\n                    curr_sum += arr[j]\n                    if curr_sum > need_sum:\n                        validator = False\n                        break\n                    elif curr_sum == need_sum:\n                        curr_sum = 0\n                if validator:\n                    ans = n - i\n                    break\n        print(ans)\nexcept e:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            needs = s / i\n            curs = 0\n            ok = True\n            for j in range(n):\n                curs += a[j]\n                if curs > needs:\n                    ok = False\n                    break\n                elif curs == needs:\n                    curs = 0\n            if ok:\n                print(n - i)\n                break", "from math import sqrt\n\ndef check(a, x):\n    sum = 0\n    for item in a:\n        if item > x:\n            return False\n        sum += item\n        if sum > x:\n            return False\n        elif sum == x:\n            sum = 0\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    m = len(a)\n    for i in range(1, int(sqrt(s)) + 2):\n        if s % i != 0:\n            continue\n        if check(a, i):\n            m = min(m, len(a) - s // i)\n        if check(a, s // i):\n            m = min(m, len(a) - i)\n    print(m)", "from math import ceil, sqrt\n\ndef main():\n    return '\\n'.join(map(str, (nOperationsMinToMerge(*case1462d()) for _ in range(int(input())))))\n\ndef case1462d():\n    arrayLength = int(input())\n    array = list(map(int, input().split()))\n    return (array, arrayLength)\n\ndef nOperationsMinToMerge(array, arrayLength):\n    total = sum(array)\n    for factor in factorsOf(total):\n        (value, success) = (array[0], True)\n        for i in range(1, arrayLength):\n            if value > factor:\n                success = False\n                break\n            elif value == factor:\n                value = array[i]\n            else:\n                value += array[i]\n        if success and value == factor:\n            return round(arrayLength - total / factor)\n\ndef factorsOf(n):\n    yield 1\n    if n == 1:\n        return\n    (factorsStorage, squareRoot_n) = ([n], sqrt(n))\n    limit = ceil(squareRoot_n)\n    for value in range(2, limit):\n        if not n % value:\n            yield value\n            factorsStorage.append(n / value)\n    if squareRoot_n == limit:\n        yield limit\n    factorsStorage.reverse()\n    for factor in factorsStorage:\n        yield factor\nprint(main())", "from math import ceil, sqrt\n\ndef main():\n    return '\\n'.join(map(str, (nOperationsMinToMerge(*case1462d()) for _ in range(int(input())))))\n\ndef case1462d():\n    arrayLength = int(input())\n    array = list(map(int, input().split()))\n    return (array, arrayLength)\n\ndef nOperationsMinToMerge(array, arrayLength):\n    total = sum(array)\n    for factor in factorsOf(total):\n        (value, success) = (array[0], True)\n        for i in range(1, arrayLength):\n            if value > factor:\n                success = False\n                break\n            elif value == factor:\n                value = array[i]\n            else:\n                value += array[i]\n        if success and value == factor:\n            return arrayLength - total // factor\n\ndef factorsOf(n):\n    yield 1\n    if n == 1:\n        return\n    (factorsStorage, squareRoot_n) = ([n], sqrt(n))\n    limit = ceil(squareRoot_n)\n    for value in range(2, limit):\n        if not n % value:\n            yield value\n            factorsStorage.append(n // value)\n    if squareRoot_n == limit:\n        yield limit\n    factorsStorage.reverse()\n    for factor in factorsStorage:\n        yield factor\nprint(main())", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\n\ndef func(a, len, x):\n    ok = True\n    for i in range(n):\n        if a[i] != -1:\n            j = i + 1\n            while j < n and a[i] < x:\n                a[i] += a[j]\n                a[j] = -1\n                j += 1\n            if a[i] != x:\n                ok = False\n                break\n        if not ok:\n            break\n    return (ok, a)\nfor i in range(*maps()):\n    (n,) = maps()\n    a = [*maps()]\n    s = sum(a)\n    if len(set(a)) == 1:\n        print(0)\n        continue\n    se = set()\n    for i in range(1, int(s ** 0.5) + 1):\n        if s % i == 0:\n            se.add(s // i)\n            se.add(i)\n    ans = 1 << 60\n    for N in se:\n        (x, y) = func(a[:], N, s // N)\n        if x:\n            f = s // N\n            cnt1 = 0\n            cnt2 = 0\n            cnt3 = 0\n            for i in y:\n                if i == f:\n                    cnt1 += 1\n                elif i == -1:\n                    cnt2 += 1\n                else:\n                    cnt3 += 1\n            if cnt1 == n - cnt2 and cnt3 == 0:\n                ans = min(ans, cnt2)\n    print(ans)", "def neighbour(arr, n):\n    total = sum(arr)\n    for i in range(n, 0, -1):\n        if total % i == 0:\n            needed = total // i\n            curr = 0\n            check = True\n            for j in range(n):\n                curr += arr[j]\n                if curr > needed:\n                    check = False\n                    break\n                elif curr == needed:\n                    curr = 0\n            if check:\n                return n - i\n    return n - 1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(neighbour(arr, n))", "for _ in range(int(input())):\n    n = int(input())\n    nums = tuple(map(int, input().split()))\n    sum_nums = sum(nums)\n    for i in range(n, 0, -1):\n        nums_2 = list(nums)\n        if sum_nums % i == 0:\n            cnt = 0\n            ave = sum_nums // i\n            j = 0\n            while j <= len(nums_2) - 2:\n                while nums_2[j] < ave:\n                    nums_2[j] += nums_2[j + 1]\n                    del nums_2[j + 1]\n                    cnt += 1\n                if nums_2[j] > ave:\n                    break\n                elif nums_2[j] == ave:\n                    j += 1\n            if nums_2 == [ave] * i:\n                print(cnt)\n                break", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(5 * 10 ** 5)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\nfrom math import gcd\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef cut_l(a_list, p_sum):\n    cnt = 0\n    i = 0\n    tmp_sum = 0\n    while i < len(a_list):\n        tmp_sum += a_list[i]\n        if tmp_sum == p_sum:\n            cnt += 1\n            tmp_sum = 0\n        elif tmp_sum > p_sum:\n            return -1\n        i += 1\n    return cnt\n\ndef solve():\n    n = II()\n    a_list = LI()\n    ans = n - 1\n    p_sum = 0\n    a_sum = sum(a_list)\n    for i in range(n - 1):\n        p_sum += a_list[i]\n        if a_sum % p_sum:\n            continue\n        cut_cnt = cut_l(a_list, p_sum)\n        if cut_cnt == -1:\n            continue\n        else:\n            ans = min(ans, n - cut_cnt)\n    return ans\n\ndef main():\n    t = II()\n    res = list()\n    for _ in range(t):\n        res.append(solve())\n    for ans in res:\n        print(ans)\n    return 0\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    s = sum(array)\n    if array.count(array[0]) == len(array):\n        print(0)\n    else:\n        for k in range(1, n):\n            m = []\n            m.extend(array)\n            t = s // (n - k)\n            if s % (n - k) != 0:\n                continue\n            else:\n                z = 0\n                j = 0\n                while j < len(array) - 1 and z != k:\n                    if m[j] == t:\n                        j += 1\n                    else:\n                        m[j + 1] += m[j]\n                        m.pop(j)\n                        z += 1\n                if m.count(m[0]) == n - k:\n                    print(k)\n                    break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    s = sum(nums)\n    ans = 0\n    for no_of_elements in range(n, 0, -1):\n        if s % no_of_elements == 0:\n            sum_target = s // no_of_elements\n            count = 0\n            possible = True\n            i = 0\n            while i < n:\n                cur_sum = 0\n                while i < n and cur_sum < sum_target:\n                    cur_sum += nums[i]\n                    i += 1\n                count += 1\n                if cur_sum != sum_target:\n                    possible = False\n                    break\n            if possible and count == no_of_elements:\n                ans = count\n                break\n    print(n - count)\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(0)\n        continue\n    else:\n        s = sum(a)\n        for j in range(n - 1, 0, -1):\n            if s % j == 0:\n                t = 0\n                c = n - j\n                y = s // j\n                for i in range(n):\n                    if c <= 0:\n                        break\n                    if t == y:\n                        t = 0\n                        continue\n                    if t < y:\n                        if t == 0:\n                            t += a[i]\n                        else:\n                            t += a[i]\n                            c -= 1\n                        if t > y:\n                            break\n                        if t == y:\n                            c += 1\n                            t = 0\n                if t == 0:\n                    print(n - j)\n                    break", "for s in [*open(0)][2::2]:\n    a = [0]\n    for x in s.split():\n        a += (a[-1] + int(x),)\n    s = a[-1]\n    t = {*a}\n    n = k = len(a) - 1\n    while s % k or not {*range(0, s, s // k)} <= t:\n        k -= 1\n    print(n - k)", "for l in [*open(0)][2::2]:\n    s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n    n = k = len(t) - 1\n    while s % k or not {*range(0, s, s // k)} <= t:\n        k -= 1\n    print(n - k)", "for l in [*open(0)][2::2]:\n    s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n    n = k = len(t) - 1\n    while s % k or {*range(0, s, s // k)} - t:\n        k -= 1\n    print(n - k)", "for l in [*open(0)][2::2]:\n    n = s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n        n = k = n + 1\n    while s % k or {*range(0, s, s // k)} - t:\n        k -= 1\n    print(n - k)", "for y in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = 0\n    summ = sum(lst)\n    for i in range(n, 0, -1):\n        if summ % i == 0:\n            cnt = 0\n            s = 0\n            temp = summ // i\n            for j in range(0, n):\n                s += lst[j]\n                if temp == s:\n                    cnt += 1\n                    s = 0\n            if cnt == i:\n                ans = n - i\n                break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            ns = s // i\n            s1 = 0\n            f = 1\n            for j in range(n):\n                s1 += l[j]\n                if s1 > ns:\n                    f = 0\n                    break\n                elif s1 == ns:\n                    f = 1\n                    s1 = 0\n            if f == 1:\n                print(n - i)\n                break", "def check(sm):\n    cur = 0\n    for i in range(n):\n        cur += lis[i]\n        if cur == sm:\n            cur = 0\n        elif cur > sm:\n            return False\n    return cur == 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lis = [*map(int, input().split())]\n    sm = sum(lis)\n    ans = -1\n    for j in range(n, 0, -1):\n        if sm % j == 0 and check(sm // j):\n            ans = n - j\n            break\n    print(ans)", "def check(sm):\n    cur = 0\n    for i in range(n):\n        cur += lis[i]\n        if cur == sm:\n            cur = 0\n        elif cur > sm:\n            return False\n    return cur == 0\nt = int(input())\ns = ''\nfor i in range(t):\n    n = int(input())\n    lis = [*map(int, input().split())]\n    sm = sum(lis)\n    ans = -1\n    for j in range(n, 0, -1):\n        if sm % j == 0 and check(sm // j):\n            ans = n - j\n            break\n    s += f'{ans}\\n'\nprint(s)", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    sum_n = sum(nums)\n    sumtill = [0] * n\n    sumtill[0] = nums[0]\n    for it in range(1, n):\n        sumtill[it] = sumtill[it - 1] + nums[it]\n    finalCount = n - 1\n    for it in range(n - 1):\n        count = 0\n        if sum_n % sumtill[it] == 0:\n            count += it\n            sum_temp = 0\n            taken = 0\n            last = it + 1\n            for it2 in range(it + 1, n):\n                sum_temp += nums[it2]\n                if sum_temp > sumtill[it]:\n                    break\n                if sum_temp == sumtill[it]:\n                    taken += 1\n                    sum_temp = 0\n                    count += it2 - last\n                    last = it2 + 1\n            if taken == sum_n / sumtill[it] - 1:\n                finalCount = min(finalCount, count)\n    return finalCount\nfor i in range(t):\n    output = solve()\n    print(output)", "for _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    sum_num = sum(num)\n    for k in range(n, 0, -1):\n        if sum_num % k != 0:\n            continue\n        flag = True\n        each_sum = sum_num // k\n        curr_sum = 0\n        for number in num:\n            curr_sum += number\n            if curr_sum > each_sum:\n                flag = False\n                break\n            elif curr_sum == each_sum:\n                curr_sum = 0\n        if flag:\n            print(n - k)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    asum = sum(a)\n    ans = -1\n    for i in range(n, 0, -1):\n        if asum % i == 0:\n            temp = asum // i\n            curr = 0\n            flag = True\n            for j in range(n):\n                curr += a[j]\n                if curr > temp:\n                    flag = False\n                    break\n                elif curr == temp:\n                    curr = 0\n            if flag:\n                ans = n - i\n                break\n    print(ans)", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sums = []\n    sums.append(a[0])\n    for i in range(1, n):\n        sums.append(sums[i - 1] + a[i])\n    ans = n - 1\n    for i in range(n):\n        qu = 0\n        divisor = sums[i]\n        last_qu = sums[n - 1] / divisor\n        if sums[n - 1] % divisor != 0:\n            continue\n        for idx in range(i, n):\n            if sums[idx] / divisor == qu + 1:\n                qu += 1\n        if qu > 1 and last_qu == qu:\n            ans = n - qu\n            break\n    print(ans)\nt = int(input())\nwhile t != 0:\n    t -= 1\n    solve()", "def tong(arr, number):\n    if len(arr) == 0:\n        return True\n    ans = 0\n    for i in arr:\n        ans += i\n        if ans == number:\n            ans = 0\n        elif ans > number:\n            return False\n        else:\n            continue\n    if ans == 0:\n        return True\n    else:\n        return False\nn = int(input())\nfor _ in range(n):\n    m = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    lmao = 0\n    for i in arr:\n        lmao += i\n        if total % lmao == 0:\n            if tong(arr, lmao):\n                break\n            else:\n                continue\n        else:\n            continue\n    print(m - total // lmao)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = sum(arr)\n    ans = n\n    while ans >= 1:\n        if s % ans != 0:\n            ans = ans - 1\n            continue\n        x = s // ans\n        i = 0\n        flag = False\n        while i < n:\n            pre = 0\n            j = i\n            while j < n:\n                if pre + arr[j] > x:\n                    flag = True\n                    break\n                elif pre + arr[j] < x:\n                    pre = pre + arr[j]\n                    j = j + 1\n                elif pre + arr[j] == x:\n                    i = j + 1\n                    break\n            if flag == True:\n                break\n        if flag == False:\n            print(n - ans)\n            break\n        else:\n            ans = ans - 1", "import sys\ninput = sys.stdin.readline\n\ndef check(o):\n    m = s / o\n    lc = l.copy()\n    for el in range(n):\n        if lc[0] == m:\n            lc.pop(0)\n        elif lc[0] < m:\n            lc[1] = lc[1] + lc[0]\n            lc.pop(0)\n        else:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input().strip())\n    l = [*map(int, input().strip().split())]\n    s = sum(l)\n    i = n\n    while i >= 1:\n        if s % i == 0:\n            if check(i):\n                print(n - i)\n                break\n        i -= 1", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    sumy = sum(l)\n    maxy = max(l)\n    if maxy > sumy // 2:\n        print(n - 1)\n    else:\n        count = n - 1\n        for i in range(n, 0, -1):\n            if sumy % i == 0:\n                shan = sumy // i\n                siri = 0\n                i = 0\n                ele = 0\n                mps = 0\n                while i < n:\n                    ele += l[i]\n                    if ele > shan:\n                        siri = 1\n                        break\n                    if ele < shan:\n                        mps += 1\n                    if ele == shan:\n                        ele = 0\n                    i += 1\n                if siri == 0:\n                    count = min(mps, count)\n        print(count)", "def possible(r, pa, n):\n    s = pa[-1]\n    if s % (n - r) != 0:\n        return False\n    step = s // (n - r)\n    nbi = n - r\n    marque = [False] * (1 + nbi)\n    lum = 0\n    for x in pa:\n        if x % step == 0:\n            if not marque[x // step]:\n                marque[x // step] = True\n                lum += 1\n    if lum == 1 + nbi:\n        return True\n    else:\n        return False\n\ndef rep(n, pa):\n    for r in range(n):\n        if possible(r, pa, n):\n            return r\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pa = [0]\n    s = 0\n    for x in a:\n        s += x\n        pa.append(s)\n    print(rep(n, pa))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    m = max(a)\n    i = n\n    while i > 1:\n        if s % i != 0 or s // i < m:\n            i -= 1\n            continue\n        aim = s // i\n        curr = 0\n        cnt = 0\n        for j in range(n):\n            curr += a[j]\n            if curr > aim:\n                break\n            elif curr == aim:\n                curr = 0\n                cnt += 1\n        else:\n            print(n - i)\n            break\n        i -= 1\n    else:\n        print(n - 1)", "def check(arr, n, K, prefix_sum):\n    total_sum = prefix_sum[n - 1]\n    if total_sum % K != 0:\n        return False\n    temp = 0\n    pos = -1\n    for i in range(0, n, 1):\n        if pos == -1:\n            sub = 0\n        else:\n            sub = prefix_sum[pos]\n        if prefix_sum[i] - sub == total_sum / K:\n            pos = i\n            temp += 1\n        elif prefix_sum[i] - prefix_sum[pos] > total_sum / K:\n            break\n    return temp == K\nfor tt in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    prefix_sum = [0 for i in range(n)]\n    prefix_sum[0] = l[0]\n    for i in range(1, n, 1):\n        prefix_sum[i] = prefix_sum[i - 1] + l[i]\n    for j in range(n, 0, -1):\n        if check(l, n, j, prefix_sum):\n            print(n - j)\n            break", "l = input\n\ndef answer():\n    s = sum(a)\n    for opp in range(n, 0, -1):\n        if s % opp == 0:\n            check = s // opp\n        else:\n            continue\n        b = False\n        value = 0\n        for val in a:\n            value += val\n            if value > check:\n                b = True\n                break\n            if value == check:\n                value = 0\n        if not b:\n            return n - opp\nfor i in range(int(l())):\n    n = int(l())\n    a = list(map(int, l().split()))\n    print(answer())", "t = int(input())\n\ndef is_possible(target_subarray_sum, prefix_sums, n):\n    ptr = 0\n    curr_accum = 0\n    num_arrays = 0\n    while ptr < n:\n        if prefix_sums[ptr] - curr_accum < target_subarray_sum:\n            pass\n        elif prefix_sums[ptr] - curr_accum > target_subarray_sum:\n            return (False, -1)\n        elif prefix_sums[ptr] - curr_accum == target_subarray_sum:\n            curr_accum += target_subarray_sum\n            num_arrays += 1\n        ptr += 1\n    return (True, num_arrays)\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total_sum = sum(arr)\n    subarray_sum = total_sum\n    num_subarrays = n\n    prefix_sums = {}\n    curr_prefix = 0\n    for i in range(n):\n        curr_prefix += arr[i]\n        prefix_sums[i] = curr_prefix\n    while num_subarrays >= 0:\n        if subarray_sum % num_subarrays == 0:\n            t = is_possible(subarray_sum // num_subarrays, prefix_sums, n)\n            if t[0]:\n                print(f'{n - num_subarrays}')\n                break\n        num_subarrays -= 1", "import sys\nimport math, bisect, operator\n(inf, m) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    n = I()\n    a = Neo()\n    t = sum(a)\n    for i in range(n):\n        if t % (n - i) != 0:\n            continue\n        else:\n            z = t / (n - i)\n            x = 0\n            for j in range(n):\n                if x + a[j] < z:\n                    x = x + a[j]\n                elif x + a[j] == z:\n                    x = x + a[j]\n                    x = 0\n                elif x + a[j] > z:\n                    x += a[j]\n                    break\n            if x == 0:\n                print(i)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    come = 0\n    counti = 0\n    a = max(l)\n    summm = sum(l)\n    j = 0\n    sumi = 0\n    for i in range(len(l)):\n        sumi += l[i]\n        if sumi >= a:\n            a = sumi\n            j = i + 1\n            break\n    while come == 0:\n        if summm % a == 0:\n            counti = 0\n            come = 0\n            sumi = 0\n            for i in range(n):\n                sumi += l[i]\n                if sumi > a:\n                    come = 1\n                    break\n                elif sumi == a:\n                    counti += 1\n                    sumi = 0\n            if come == 1 or sumi != 0:\n                come = 0\n                if j != n - 1:\n                    a += l[j]\n                    j += 1\n                else:\n                    counti = 1\n                    break\n            else:\n                come = 1\n        elif j != n - 1:\n            a += l[j]\n            j += 1\n        else:\n            counti = 1\n            break\n    print(n - counti)", "t = int(input())\nwhile t:\n    n = int(input().rstrip())\n    a = list(map(int, input().split()))\n    Sum = sum(a)\n    ans = float('inf')\n    for i in range(1, n + 1):\n        if Sum % i == 0:\n            block = Sum // i\n            j = 0\n            blocks = 0\n            T = True\n            while i > blocks:\n                s = 0\n                while block > s:\n                    s += a[j]\n                    j += 1\n                if block == s:\n                    blocks += 1\n                else:\n                    T = False\n                    break\n            if T:\n                ans = n - i\n    print(ans)\n    t -= 1", "for l in [*open(0)][2::2]:\n    s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n    n = k = len(t) - 1\n    while s % k or {*range(0, s, s // k)} - t:\n        k -= 1\n    print(n - k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    tot = sum(l)\n    for i in range(n, 0, -1):\n        flagg = 1\n        if tot % i == 0:\n            flag = 1\n            add = 0\n            for j in l:\n                if add + j == tot // i:\n                    add = 0\n                elif add + j < tot // i:\n                    add += j\n                else:\n                    flag = 0\n                    break\n            if add == 0 and flag == 1:\n                print(n - i)\n                falgg = 0\n                break\n        if flagg == 0:\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    b = True\n    ans = 0\n    sum1 = sum(s)\n    for i1 in range(n, 0, -1):\n        b = True\n        m1 = 0\n        if sum1 % i1 == 0:\n            for i in range(n):\n                m1 += s[i]\n                if m1 == sum1 // i1:\n                    m1 = 0\n                elif m1 > sum1 // i1:\n                    b = False\n                    break\n        if b and sum1 % i1 == 0:\n            break\n    ans = n - i1\n    print(ans)", "from collections import Counter\n\ndef solve(a):\n    n = len(a)\n    Sum = sum(a)\n    for i in range(n):\n        if check(Sum, len(a), i):\n            return i\n\ndef check(Sum, n, x):\n    x = n - x\n    if Sum % x != 0:\n        return False\n    cur = 0\n    for i in range(len(a)):\n        cur += a[i]\n        if cur == Sum / x:\n            cur = 0\n        elif cur > Sum / x:\n            return False\n    if cur == 0:\n        return True\n    else:\n        return False\nt = int(input(''))\nans = []\nwhile t > 0:\n    n = int(input(''))\n    a = list(map(int, input('').split(' ')))\n    ans.append(solve(a))\n    t -= 1\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    m = sum(a)\n    for i in range(n, 0, -1):\n        if m % i == 0:\n            b.append(m // i)\n    for i in b:\n        x = 0\n        f = 0\n        for j in range(n):\n            x += a[j]\n            if x == i:\n                x = 0\n            elif x > i:\n                x = 0\n                f = 1\n                break\n        if x:\n            if x > i:\n                f = 1\n        if f == 0:\n            break\n    print(n - m // i)", "import math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    divs = set([s])\n    for i in range(1, int(math.sqrt(s)) + 2):\n        if s % i == 0:\n            divs.add(i)\n            divs.add(int(s / i))\n    divs = sorted(list(divs))\n    mmin = n - 1\n    for i in divs:\n        cur_s = i\n        good = True\n        step = 0\n        for j in a:\n            cur_s -= j\n            if cur_s < 0:\n                good = False\n                break\n            elif cur_s == 0:\n                cur_s = i\n            else:\n                step += 1\n        if good and mmin > step and (cur_s == i):\n            mmin = step\n    print(mmin)\n[solve() for _ in range(int(input()))]", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    for k in range(n):\n        if s % (n - k) == 0:\n            s1 = s // (n - k)\n            (i, s11, flag) = (0, 0, 0)\n            while i < n:\n                if s11 == s1:\n                    s11 = 0\n                if s11 + arr[i] <= s1:\n                    s11 += arr[i]\n                else:\n                    flag = 1\n                    break\n                i += 1\n            if s11 == s1 and flag == 0:\n                break\n    print(k)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (sum1, ans, f2) = (sum(l), n - 1, 0)\n    for k in range(0, n):\n        if sum1 % (n - k) == 0:\n            x = sum1 / (n - k)\n            (cur, f1) = (0, 0)\n            for j in range(len(l)):\n                cur += l[j]\n                if cur == x:\n                    cur = 0\n                elif cur > x:\n                    f1 = 1\n                    break\n            if f1 == 0:\n                ans = k\n                f2 = 1\n                break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = sum(a)\n    for i in range(n, 0, -1):\n        if m % i != 0:\n            continue\n        k = m // i\n        c = 0\n        for j in range(n):\n            c += a[j]\n            if c == k:\n                c = 0\n            if c > k:\n                break\n        if c == 0:\n            ans = n - i\n            break\n    print(ans)", "for _ in range(int(input())):\n    size = int(input())\n    gl = list(map(int, input().split()))\n    gsum = sum(gl)\n    for i in range(size, 0, -1):\n        if gsum % i == 0:\n            needsum = gsum / i\n            cursum = 0\n            flag = True\n            for j in range(size):\n                cursum += gl[j]\n                if cursum > needsum:\n                    flag = False\n                    break\n                elif cursum == needsum:\n                    cursum = 0\n            if flag:\n                print(size - i)\n                break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    s = sum(A)\n    i = n\n    while i >= 1:\n        if s % i == 0:\n            needsum = s / i\n            cursum = 0\n            ok = True\n            for j in range(n):\n                cursum += A[j]\n                if cursum > needsum:\n                    ok = False\n                    break\n                elif cursum == needsum:\n                    cursum = 0\n            if ok:\n                print(n - i)\n                break\n        i -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    for i in range(n, 0, -1):\n        if s % i == 0:\n            f = True\n            needSum = s // i\n            cur = 0\n            for e in l:\n                cur += e\n                if cur > needSum:\n                    f = False\n                    break\n                elif cur == needSum:\n                    cur = 0\n            if f:\n                print(n - i)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(set(arr)) == 1:\n        print(0)\n        continue\n    s = sum(arr)\n    answer = -1\n    for k in range(1, n):\n        if s % (n - k) == 0:\n            summ = 0\n            for i in range(n):\n                summ += arr[i]\n                if i == n - 1:\n                    if summ != s / (n - k):\n                        continue\n                    else:\n                        answer = k\n                        break\n                if summ == s / (n - k):\n                    summ = 0\n                elif summ > s / (n - k):\n                    break\n        if answer > -1:\n            break\n    print(answer)", "def solution():\n    for tc in range(int(input())):\n        n = int(input())\n        ls = list(map(int, input().split()))\n        tot_sum = sum(ls)\n        for k in range(n):\n            if tot_sum % (n - k) != 0:\n                continue\n            cur_tgt = tot_sum // (n - k)\n            cur_sum = 0\n            for idx in range(len(ls)):\n                cur_sum += ls[idx]\n                if cur_sum > cur_tgt:\n                    break\n                elif cur_sum == cur_tgt:\n                    cur_sum = 0\n            if cur_sum == 0:\n                break\n        print(k)\nsolution()", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    for i in range(n, 0, -1):\n        if total % i == 0:\n            sumBalance = total // i\n            sumCurr = 0\n            flag = True\n            for j in range(n):\n                sumCurr += arr[j]\n                if sumCurr > sumBalance:\n                    flag = False\n                    break\n                elif sumCurr == sumBalance:\n                    sumCurr = 0\n            if flag == True:\n                print(n - i)\n                return\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sm = sum(arr)\n    for j in range(n):\n        if sm % (n - j) == 0:\n            t = sm // (n - j)\n            x = 0\n            for i in range(n - 1, -1, -1):\n                x += arr[i]\n                if x == t:\n                    x = 0\n                    if i == 0:\n                        print(j)\n                        x = -2\n                        break\n                if x > t:\n                    break\n            if x == -2:\n                break", "def main():\n    for _ in range(int(input())):\n        (n, a, l) = (int(input()), 0, [])\n        for b in map(int, input().split()):\n            a += b\n            l.append(a)\n        s = set(l)\n        for b in l:\n            if not a % b and all((x in s for x in range(b * 2, a + 1, b))):\n                print(n - a // b)\n                break\nmain()", "for l in [*open(0)][2::2]:\n    n = s = 0\n    t = {0}\n    for x in l.split():\n        s += int(x)\n        t |= {s}\n        n = k = n + 1\n    while s % k or {*range(0, s, s // k)} - t:\n        k -= 1\n    print(n - k)", "from math import ceil, sqrt, gcd, factorial, comb\nfrom sys import stdin\nstdin.readline\n\ndef mp():\n    return map(int, input().split())\n\ndef it():\n    return int(input())\n\ndef check(a, x):\n    total = 0\n    n = len(a)\n    s = 0\n    j = 0\n    for i in range(n):\n        s += a[i]\n        if s == x:\n            total += i - j\n            j = i + 1\n            s = 0\n        elif s > x:\n            return -1\n    return total\n\ndef solve(a, n):\n    s = sum(a)\n    ans = n - 1\n    for i in range(1, int(sqrt(s)) + 1):\n        if s % i == 0:\n            f1 = i\n            f2 = s // i\n            a1 = check(a, f1)\n            a2 = check(a, f2)\n            if a1 != -1:\n                ans = min(ans, a1)\n            if a2 != -1:\n                ans = min(ans, a2)\n    return ans\nfor _ in range(it()):\n    n = it()\n    l = list(mp())\n    print(solve(l, n))", "import math\nfrom sys import stdin\n\ndef get_divisors(n, m):\n    res = []\n    for k in range(1, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            if k >= m:\n                res.append(k)\n            if n // k >= m:\n                res.append(n // k)\n    return res\nfor z in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    m = max(a)\n    divisors = sorted(get_divisors(s, m))\n    res = -1\n    for divisor in divisors:\n        cur = 0\n        group = 0\n        for (idx, val) in enumerate(a):\n            cur += val\n            if cur == divisor:\n                if idx < n - 1:\n                    cur = 0\n                group += 1\n            elif cur > divisor:\n                break\n        if cur == divisor:\n            res = n - group\n            break\n    print(res)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = input().split()\n    sumArray = 0\n    ops = []\n    for i in range(n):\n        a[i] = int(a[i])\n        sumArray += a[i]\n    for i in range(1, n + 1):\n        if sumArray % i == 0:\n            eachValue = sumArray // i\n            start = 0\n            valid = True\n            while start < n and valid:\n                sumgroup = 0\n                for end in range(start, n):\n                    sumgroup += a[end]\n                    if sumgroup == eachValue:\n                        start = end + 1\n                        break\n                    elif sumgroup > eachValue:\n                        valid = False\n                        break\n            if valid:\n                ops.append(n - i)\n    print(min(ops))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    same = all((item == a[0] for item in a))\n    if same == True:\n        print(0)\n    else:\n        s = sum(a)\n        mx = max(a)\n        flag = 1\n        ind = 0\n        for i in range(n - 1, 0, -1):\n            if s % i == 0:\n                div = s / i\n                if div == s:\n                    flag = 1\n                    ind = 1\n                elif div >= mx:\n                    s1 = 0\n                    for j in range(n):\n                        if s1 < div:\n                            s1 += a[j]\n                        elif s1 == div:\n                            s1 = a[j]\n                            flag = 1\n                            ind = i\n                        else:\n                            flag = 0\n                            s1 = 0\n                            break\n                    if s1 == div:\n                        break\n                else:\n                    pass\n            else:\n                pass\n        if flag:\n            print(n - ind)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = sum(a)\n    for k in range(n, 0, -1):\n        if summ % k != 0:\n            continue\n        each = summ // k\n        curr = 0\n        flag = True\n        for i in a:\n            curr += i\n            if curr > each:\n                flag = False\n                break\n            if curr == each:\n                curr = 0\n        if flag == True:\n            print(n - k)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (s, k) = (sum(a), n)\n    while k > 0:\n        if s % k == 0:\n            (cur, need, flag) = (0, s // k, True)\n            for i in range(n):\n                cur += a[i]\n                if cur > need:\n                    flag = False\n                    break\n                elif cur == need:\n                    cur = 0\n            if flag:\n                print(n - k)\n                break\n        k -= 1", "def solution(n, a):\n    opercnt = 0\n    s = sum(a)\n    mincnt = -1\n    while opercnt < n:\n        if s % (n - opercnt) != 0:\n            opercnt += 1\n            continue\n        cursum = 0\n        avg = s / (n - opercnt)\n        issuccess = True\n        for i in a:\n            cursum += i\n            if cursum > avg:\n                issuccess = False\n                break\n            if cursum == avg:\n                cursum = 0\n        if issuccess:\n            mincnt = opercnt\n            break\n        opercnt += 1\n    return mincnt\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solution(n, a))", "t = int(input())\nfor i in range(0, t):\n    n = input()\n    li = [int(x) for x in input().split(' ')]\n    total_sum = sum(li)\n    possibi = []\n    cru = 0\n    for i in range(0, len(li)):\n        cru += li[i]\n        if total_sum % cru == 0:\n            possibi.append(cru)\n    for su in possibi:\n        poi = 0\n        csu = 0\n        while poi < len(li):\n            csu += li[poi]\n            if csu > su:\n                break\n            elif csu == su:\n                csu = 0\n                poi += 1\n            elif csu < su:\n                poi += 1\n        if poi == len(li):\n            cou = int(total_sum / su)\n            print(len(li) - cou)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    s = sum(a)\n    ans = 0\n    while ans < n - 1:\n        if not s % (n - ans):\n            ss = s // (n - ans)\n            k = 0\n            for i in a:\n                k += i\n                if k > ss:\n                    break\n                elif k == ss:\n                    k = 0\n            else:\n                if not k:\n                    print(ans)\n                    break\n        ans += 1\n    else:\n        print(n - 1)"]