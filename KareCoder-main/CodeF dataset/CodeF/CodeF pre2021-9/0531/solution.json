["from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    c = rlint()\n    a = rlint()\n    b = rlint()\n    cur = 0\n    res = 0\n    for i in range(1, n):\n        x = abs(b[i] - a[i])\n        if x == 0:\n            cur = c[i] + 1\n        else:\n            cur = max(x, cur - x) + c[i] + 1\n        res = max(res, cur)\n    print(res)\nfor _ in range(rint()):\n    main()", "from sys import stdin\nfrom collections import Counter\nfrom math import pow, sqrt, factorial, log10, log\nfrom itertools import permutations, combinations, combinations_with_replacement\ninput = stdin.readline\n\ndef solve(n, a, b, c):\n    re = 0\n    first = 0\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        if x == 0:\n            first = c[i] + 1\n        else:\n            first = max(x, first - x) + c[i] + 1\n        re = max(re, first)\n    print(re)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    solve(n, a, b, c)", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef list_in():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef main():\n    t = get_int()\n    for i in range(t):\n        n = get_int()\n        c = list_in()\n        a = list_in()\n        b = list_in()\n        len = [0 for i in range(n)]\n        for i in range(1, n):\n            d = abs(b[i] - a[i])\n            len[i] = c[i] + 1 + int(d != 0) * max(d, len[i - 1] - d)\n        print(max(len))\n    pass\nmain()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = [0] * n\n    for i in range(1, n):\n        if b[i] - a[i] == 0:\n            dp[i] = 1 + c[i]\n        else:\n            d = abs(b[i] - a[i])\n            dp[i] = 1 + c[i] + max(d, dp[i - 1] - d)\n    print(max(dp))", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        c = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        if n == 1:\n            print(0)\n            continue\n        out = 0\n        l = r = 0\n        len_l = abs(a[1] - b[1])\n        side = 0\n        while r < n - 1:\n            r += 1\n            if r < n - 1:\n                len_r = abs(a[r + 1] - b[r + 1])\n                side += c[r] - len_r + 1\n                now = side + len_r + len_l\n                out = max(out, now)\n                if len_r == 0 or len_r > side + len_l:\n                    len_l = len_r\n                    side = 0\n            else:\n                len_r = c[r] - 1\n                now = side + 2 + len_r + len_l\n                out = max(out, now)\n        print(out)\nmain()", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        c = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        (ans, t) = (0, 0)\n        for i in range(1, n):\n            x = abs(a[i] - b[i])\n            t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n            ans = max(ans, t)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        if x == 0:\n            t = c[i] + 1\n        else:\n            t = max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "def simple_cycle(n, a, b, c):\n    maxi = 0\n    if a[1] == b[1]:\n        s = 1 + c[1]\n        maxi = s\n    else:\n        s = abs(b[1] - a[1]) + 1 + c[1]\n        maxi = s\n    for i in range(2, n):\n        if b[i] == a[i]:\n            s = 1 + c[i]\n        else:\n            s = max(s - abs(b[i] - a[i]) + 1 + c[i], abs(b[i] - a[i]) + 1 + c[i])\n        if maxi < s:\n            maxi = s\n    return maxi\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(simple_cycle(n, a, b, c))", "def solve():\n    n = int(input())\n    c = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    b = [int(s) for s in input().split()]\n    current = 0\n    best = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            current = 1 + c[i]\n        else:\n            diff = abs(a[i] - b[i])\n            current = max(diff, current - diff) + 1 + c[i]\n        best = max(current, best)\n    print(best)\nt = int(input())\nfor test in range(t):\n    solve()", "from math import ceil\n\ndef solve(n, a, b, c):\n    ans = 0\n    cur = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            cur = c[i] + 1\n        else:\n            temp = abs(a[i] - b[i]) + 1 + c[i]\n            cur -= abs(a[i] - b[i]) - 1\n            cur += c[i]\n            cur = max(cur, temp)\n        ans = max(ans, cur)\n    return ans\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = solve(n, a, b, c)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "from math import ceil\n\ndef solve(n, c, a, b):\n    t = 0\n    r = c[-1]\n    for i in range(n - 1, 0, -1):\n        if c[i] > r:\n            r = c[i]\n        if a[i] == b[i]:\n            r += 1\n            if r > t:\n                t = r\n            r = c[i - 1]\n        else:\n            if r + abs(a[i] - b[i]) + 1 > t:\n                t = r + abs(a[i] - b[i]) + 1\n            r += c[i - 1] - abs(a[i] - b[i]) + 1\n    print(t)\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    solve(n, c, a, b)", "k = int(input())\nwhile k:\n    k -= 1\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        if x == 0:\n            t = c[i] + 1\n        else:\n            t = max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    (c, a, b) = (list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    len = [0 for i in range(n)]\n    for i in range(1, n):\n        d = abs(b[i] - a[i])\n        len[i] = c[i] + 1 + int(d != 0) * max(d, len[i - 1] - d)\n    print(max(len))", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "import math\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    c = input_list_int()\n    a = input_list_int()\n    b = input_list_int()\n    ans = 0\n    last = 0\n    for i in range(1, n):\n        cur = c[i] + 1 + abs(a[i] - b[i])\n        if a[i] != b[i]:\n            cur = max(cur, c[i] + 1 + last - abs(a[i] - b[i]))\n        ans = max(ans, cur)\n        last = cur\n    print(ans)\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    (c, a, b) = (list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ans, t) = (0, 0)\n    for i in range(1, n):\n        x = abs(a[i] - b[i])\n        t = c[i] + 1 if x == 0 else max(x, t - x) + c[i] + 1\n        ans = max(ans, t)\n    print(ans)", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    n = int(input())\n    chains = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = []\n    for i in range(1, len(chains)):\n        cycle = abs(b[i] - a[i]) + chains[i] + 1\n        if i != 1 and b[i] != a[i]:\n            dp.append(max(dp[i - 2] + cycle - abs(b[i] - a[i]) * 2, cycle))\n        else:\n            dp.append(cycle)\n    print(max(dp))\nmain()", "t = int(input())\nwhile t:\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (res, tmp) = (0, 0)\n    for i in range(1, n):\n        abs_v = abs(a[i] - b[i])\n        if abs_v == 0:\n            tmp = c[i] + 1\n        else:\n            tmp = max(abs_v, tmp - abs_v)\n            tmp += c[i] + 1\n        res = max(res, tmp)\n    print(res)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] != b[i]:\n            dp = max(dp - abs(a[i] - b[i]) + 2 + l[i] - 1, abs(a[i] - b[i]) + 2 + l[i] - 1)\n        else:\n            dp = 2 + l[i] - 1\n        ans = max(ans, dp)\n    print(ans)", "def longest(size, up, low):\n    ans = abs(low[1] - up[1]) + 1 + size[1]\n    curr = abs(up[1] - low[1])\n    for i in range(1, len(size) - 1):\n        ans = max(ans, curr + size[i] + 1)\n        curr += size[i] + 1 - abs(up[i + 1] - low[i + 1])\n        if up[i + 1] == low[i + 1]:\n            ans = max(ans, curr)\n            curr = 0\n        elif abs(up[i + 1] - low[i + 1]) > curr:\n            curr = abs(up[i + 1] - low[i + 1])\n    curr += 1 + size[-1]\n    return max(ans, curr)\nfor i in range(int(input())):\n    a = input()\n    lst1 = list(map(int, input().strip().split()))\n    lst2 = list(map(int, input().strip().split()))\n    lst3 = list(map(int, input().strip().split()))\n    print(longest(lst1, lst2, lst3))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    lst = [0]\n    for i in range(1, n):\n        if a[i] == b[i]:\n            lst += [c[i] + 1]\n        else:\n            lst += [c[i] + 1 + max(abs(a[i] - b[i]), lst[-1] - abs(a[i] - b[i]))]\n    print(max(lst))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    lst_ans = [0]\n    for i in range(1, n):\n        x = c[i] + 1\n        if a[i] == b[i]:\n            lst_ans.append(x)\n            continue\n        x += max(abs(b[i] - a[i]), lst_ans[i - 1] - abs(a[i] - b[i]))\n        lst_ans.append(x)\n    print(max(lst_ans))", "def main():\n    T = eval(input())\n    for _ in range(T):\n        N = eval(input())\n        L = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        dp = [0] * N\n        for i in range(1, N):\n            if a[i] > b[i]:\n                (a[i], b[i]) = (b[i], a[i])\n            if b[i] == a[i]:\n                dp[i] = L[i] + b[i] - a[i] + 1\n            else:\n                dp[i] = L[i] + b[i] - a[i] + 1\n                dp[i] = max(dp[i], dp[i - 1] + L[i] - (b[i] - a[i] - 1))\n        ans = max(dp)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = [0 for _ in range(n)]\n    for i in range(1, n):\n        if a[i] != b[i]:\n            dp[i] = max(dp[i - 1] - abs(a[i] - b[i]) + 2 + l[i] - 1, abs(a[i] - b[i]) + 2 + l[i] - 1)\n        else:\n            dp[i] = 2 + l[i] - 1\n    print(max(dp))", "for t in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = []\n    for i in range(1, len(b)):\n        if i == 1:\n            ans.append(2 + abs(b[i] - a[i]) + (c[i] - 1))\n        elif b[i] == a[i]:\n            ans.append(2 + c[i] - 1)\n        else:\n            ans.append(max(2 + c[i] - 1 + ans[-1] - abs(b[i] - a[i]), 2 + abs(b[i] - a[i]) + (c[i] - 1)))\n    print(max(ans))", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    initialSpan = 0\n    maxSpan = 0\n    for i in range(1, n):\n        if b[i] != a[i]:\n            initialSpan += c[i] + 1\n            initialSpan -= abs(b[i] - a[i])\n            secSpan = c[i] + abs(b[i] - a[i]) + 1\n            if secSpan > initialSpan:\n                maxSpan = max(maxSpan, initialSpan)\n                maxSpan = max(maxSpan, secSpan)\n                initialSpan = secSpan\n        else:\n            initialSpan = c[i] + 1\n        maxSpan = max(maxSpan, initialSpan)\n    print(maxSpan)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    b1 = 0\n    for i in range(len(c) - 1):\n        if i == 0:\n            b1 = max(b1, abs(b[i + 1] - a[i + 1]))\n        else:\n            b1 += c[i] + 1\n            ans = max(b1, ans)\n            a1 = abs(b[i + 1] - a[i + 1])\n            b1 -= a1\n            b1 = max(b1, a1)\n            if a1 == 0:\n                b1 = 0\n    b1 += c[-1] + 1\n    ans = max(ans, b1)\n    print(ans)", "def sol(c, a, b):\n    ans = abs(a[1] - b[1])\n    ans_ = []\n    ans_1 = [abs(a[1] - b[1])]\n    for i in range(1, len(c)):\n        if i < n - 1 and a[i + 1] != b[i + 1]:\n            ans_1.append(ans + 2 + c[i] - 1)\n            ans = max(ans + 2 + c[i] - 1 - abs(a[i + 1] - b[i + 1]), abs(a[i + 1] - b[i + 1]))\n        elif i < n - 1:\n            ans_.append(ans + 2 + c[i] - 1)\n            ans_1.append(ans + 2 + c[i] - 1)\n            ans = 0\n        else:\n            ans += c[n - 1] + 1\n    m = 0\n    if len(ans_) > 0:\n        m = max(ans_)\n    return max(ans, m, max(ans_1))\nfor _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    k = sol(c, a, b)\n    print(k)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2\nfrom collections import defaultdict\ndd = lambda x: defaultdict(lambda : x)\nfor _ in range(int(input())):\n    n = int(input())\n    (c, a, b) = (linp(), linp(), linp())\n    (ans, curr) = (0, abs(a[1] - b[1]))\n    for i in range(1, n - 1):\n        end_here = curr + c[i] + 1\n        curr = end_here - abs(a[i + 1] - b[i + 1])\n        if a[i + 1] == b[i + 1]:\n            curr = 0\n        else:\n            curr = max(curr, abs(a[i + 1] - b[i + 1]))\n        ans = max(ans, end_here)\n    end_here = curr + c[n - 1] + 1\n    ans = max(ans, end_here)\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    cc = [int(x) for x in input().split()]\n    aa = [int(x) for x in input().split()]\n    bb = [int(x) for x in input().split()]\n    state = 'OPEN'\n    cur_size = 0\n    max_size = 0\n    for i in range(n - 1):\n        c = cc[i]\n        a = aa[i + 1]\n        b = bb[i + 1]\n        if state == 'OPEN':\n            cur_size += abs(a - b) + 2\n            state = 'CONTINUE'\n        elif state == 'CONTINUE':\n            force_end_size = cur_size + c - 1\n            if force_end_size > max_size:\n                max_size = force_end_size\n            cur_size += c - abs(a - b) - 1\n            if a == b:\n                if max_size < cur_size:\n                    max_size = cur_size\n                cur_size = 2\n            else:\n                if cur_size < abs(a - b):\n                    cur_size = abs(a - b)\n                cur_size += 2\n    cur_size += cc[-1] - 1\n    if max_size < cur_size:\n        max_size = cur_size\n    print(max_size)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    C = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    longestChainLength = 0\n    currentChainLength = 0\n    for j in range(1, n):\n        if j == 1 or A[j] == B[j]:\n            currentChainLength = abs(A[j] - B[j]) + 1\n        else:\n            currentChainLength = max(abs(A[j] - B[j]) + 1, currentChainLength + C[j - 1] - abs(A[j] - B[j]) + 1)\n        longestChainLength = max(C[j] + currentChainLength, longestChainLength)\n    print(longestChainLength)", "for i in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max_support = c[n - 1] + 1\n    max_length = []\n    for i in range(1, n)[::-1]:\n        (small, big) = [a[i], b[i]] if a[i] < b[i] else [b[i], a[i]]\n        if small == big:\n            max_length.append(max_support)\n            max_support = c[i - 1] + 1\n        else:\n            max_length.append(max_support + big - small)\n            max_support = max(c[i - 1] + 1 - big + small + max_support, c[i - 1] + 1)\n    print(max(max_length))", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    initialSpan = c[1] + abs(b[1] - a[1]) + 1\n    maxSpan = initialSpan\n    for i in range(2, n):\n        if b[i] != a[i]:\n            initialSpan += c[i]\n            initialSpan -= abs(b[i] - a[i]) - 1\n            secSpan = c[i] + abs(b[i] - a[i]) + 1\n            if secSpan > initialSpan:\n                maxSpan = max(maxSpan, initialSpan)\n                maxSpan = max(maxSpan, secSpan)\n                initialSpan = secSpan\n        else:\n            initialSpan = c[i] + 1\n        maxSpan = max(maxSpan, initialSpan)\n    maxSpan = max(maxSpan, initialSpan)\n    print(maxSpan)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    c = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    dp = [0 for i in range(n)]\n    for i in range(1, n):\n        if a[i] == b[i]:\n            dp[i] = c[i] + 1 + abs(a[i] - b[i])\n        else:\n            dp[i] = max(dp[i - 1] + c[i] + 1 - abs(a[i] - b[i]), c[i] + 1 + abs(a[i] - b[i]))\n    print(max(dp))", "def length_cycle(n, a, b, c):\n    longest_len = 0\n    portion_of_prev_cycle_len = 0\n    for i in range(1, n):\n        curr_chain_length = c[i] - 1\n        upper_node = min(a[i], b[i])\n        lower_node = max(a[i], b[i])\n        portion_of_prev_chain_len = lower_node - upper_node\n        cycle_formed = curr_chain_length + portion_of_prev_chain_len + 2\n        if a[i] != b[i]:\n            cycle_formed_with_prev_part = portion_of_prev_cycle_len - portion_of_prev_chain_len + curr_chain_length + 2\n            cycle_formed = max(cycle_formed, cycle_formed_with_prev_part)\n        portion_of_prev_cycle_len = cycle_formed\n        longest_len = max(longest_len, cycle_formed)\n    return longest_len\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(length_cycle(n, a, b, c))", "number_of_testcases = int(input())\nfor _ in range(number_of_testcases):\n    chain_length = int(input())\n    q = [0] * chain_length\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(chain_length):\n        if i > 0:\n            q[i] = max(c[i] + 1 + abs(a[i] - b[i]), c[i] + 1 + q[i - 1] - abs(a[i] - b[i]) if a[i] != b[i] else 0)\n    print(max(q))", "from sys import stdin, stdout\nstdin.readline\n\ndef mp():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef it():\n    return int(stdin.readline().strip())\nfrom collections import defaultdict as dd\nfor _ in range(it()):\n    n = it()\n    c = mp()\n    a = mp()\n    b = mp()\n    ans = 0\n    v = [0] * n\n    v[0] = abs(b[1] - a[1])\n    v[1] = v[0] + c[1] + 1\n    for i in range(2, n):\n        if a[i] == b[i]:\n            v[i] = c[i] + 1\n        else:\n            v[i] = max(c[i] + 1 + v[i - 1] - abs(b[i] - a[i]), c[i] + 1 + abs(b[i] - a[i]))\n    print(max(v))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    C = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    dp = [0] * n\n    dp[-1] = C[-1]\n    dp = C[-1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        ans = max(ans, abs(A[i + 1] - B[i + 1]) + 1 + dp)\n        (a, b) = (min(A[i + 1], B[i + 1]), max(A[i + 1], B[i + 1]))\n        dp = max((a + C[i] - b + 1 + dp) * ((a != b) * 1), C[i])\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    x = 0\n    for i in range(1, n):\n        s = c[i] + abs(b[i] - a[i]) + 1\n        if i == 1:\n            ans = c[i] + abs(b[i] - a[i]) + 1\n            x = c[i] + abs(b[i] - a[i]) + 1\n        elif a[i] != b[i]:\n            x = x + c[i] + 1 - abs(b[i] - a[i])\n        else:\n            x = c[i] + abs(b[i] - a[i]) + 1\n        x = max(x, s)\n        ans = max(ans, x)\n    print(ans)", "import sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef check_seq(cnt, lengths, edges1, edges2):\n    f_i = []\n    res = 0\n    for i in range(1, cnt):\n        v1 = min(edges1[i], edges2[i])\n        v2 = max(edges1[i], edges2[i])\n        if not f_i:\n            f_i.append(v2 - v1 + 1)\n            continue\n        if v1 == v2:\n            f_i.append(1)\n            continue\n        f_i.append(max(v2 - v1 + 1, v1 + lengths[i - 1] + -v2 + 1 + f_i[-1]))\n    for j in range(cnt - 1):\n        res = max(res, lengths[j + 1] + f_i[j])\n    return res\n\ndef main():\n    samples = read_one_int()\n    res = ''\n    for _ in range(samples):\n        chains_cnt = read_one_int()\n        chains_l = read_list_of_ints()\n        edges1 = read_list_of_ints()\n        edges2 = read_list_of_ints()\n        res = check_seq(chains_cnt, chains_l, edges1, edges2)\n        print(res)\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    x = 0\n    for i in range(1, n):\n        if a[i] != b[i]:\n            y = c[i] + 1\n            if x == 0:\n                x += y + abs(a[i] - b[i])\n            else:\n                x += y - abs(a[i] - b[i])\n                z = c[i] + 1 + abs(a[i] - b[i])\n                x = max(x, z)\n        else:\n            x = c[i] + 1\n        if x > ans:\n            ans = x\n    print(ans)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    ans = c[1] + abs(a[1] - b[1]) + 1\n    cur = ans\n    for i in range(2, n):\n        if a[i] == b[i]:\n            cur = c[i] + 1\n        else:\n            cur += c[i] - abs(a[i] - b[i]) + 1\n            cur = max(cur, c[i] + abs(a[i] - b[i]) + 1)\n        ans = max(ans, cur)\n    print(ans)", "import sys\nimport math\nimport bisect\nimport functools\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom heapq import heappush, heappop, heapify\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nnum_cases = intinp()\nfor _ in range(num_cases):\n    n = intinp()\n    carr = intarr()\n    aarr = intarr()\n    barr = intarr()\n    ans = 0\n    curr = 0\n    for i in range(1, n):\n        if i == 1:\n            curr = carr[i] + abs(aarr[i] - barr[i]) + 1\n        elif aarr[i] == barr[i]:\n            curr = carr[i] + 1\n        else:\n            curr = max(curr + carr[i] - (abs(aarr[i] - barr[i]) - 1), carr[i] + abs(aarr[i] - barr[i]) + 1)\n        ans = max(ans, curr)\n    print(ans)", "try:\n    import sys\n    t = int(input())\n    while t != 0:\n        n = int(input())\n        lstc = list(map(int, input().split()))\n        lsta = list(map(int, input().split()))\n        lstb = list(map(int, input().split()))\n        ans = sum_ = 0\n        for i in range(1, n):\n            x = lstc[i] + abs(lstb[i] - lsta[i]) + 1\n            if lsta[i] != lstb[i] and i != 1:\n                sum_ += lstc[i] - abs(lstb[i] - lsta[i]) + 1\n            if lsta[i] == lstb[i]:\n                sum_ = 1\n            sum_ = max(sum_, x)\n            if sum_ > ans:\n                ans = sum_\n        print(ans)\n        t -= 1\nexcept EOFError:\n    print(' ')", "for t in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    prev = [0 for i in range(n)]\n    best2 = 0\n    i = 1\n    x = b[i] - a[i]\n    if x > 0:\n        temp = x + 1\n        prev[i] = temp\n    elif x == 0:\n        prev[i] = 1\n    else:\n        temp = -x + 1\n        prev[i] = temp\n    best2 = max(prev[i] + c[i], best2)\n    for i in range(2, n):\n        x = b[i] - a[i]\n        if x > 0:\n            temp = max(x + 1, prev[i - 1] + c[i - 1] - x + 1)\n            prev[i] = temp\n        elif x == 0:\n            prev[i] = 1\n        else:\n            temp = max(-x + 1, prev[i - 1] + c[i - 1] + x + 1)\n            prev[i] = temp\n        best2 = max(prev[i] + c[i], best2)\n    print(best2)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    ans = c[1] + abs(a[1] - b[1]) + 1\n    cur = ans\n    for i in range(2, n):\n        if a[i] == b[i]:\n            cur = c[i] + 1\n        else:\n            cur += c[i] - abs(a[i] - b[i]) + 1\n            cur = max(cur, c[i] + abs(a[i] - b[i]) + 1)\n        ans = max(ans, cur)\n    print(ans)", "import collections, sys, functools, heapq, bisect, collections, math\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    ans = 0\n    curr = abs(b[1] - a[1])\n    for i in range(1, n - 1):\n        curr += 1 + c[i]\n        ans = max(ans, curr)\n        if b[i + 1] != a[i + 1]:\n            curr -= abs(b[i + 1] - a[i + 1])\n            curr = max(curr, abs(b[i + 1] - a[i + 1]))\n        else:\n            curr = 0\n    curr += 1 + c[n - 1]\n    ans = max(ans, curr)\n    print(ans)", "from math import ceil\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    c = [int(x) for x in input().split(' ')]\n    a = [int(x) for x in input().split(' ')]\n    b = [int(x) for x in input().split(' ')]\n    ma = 0\n    sum = abs(a[1] - b[1]) + 2\n    for i in range(1, n):\n        ma = max(ma, sum + c[i] - 1)\n        if i == n - 1:\n            break\n        abd = abs(a[i + 1] - b[i + 1])\n        toabd = c[i] - abd - 1\n        if abd == 0:\n            sum = 2\n            continue\n        sum = max(sum + toabd + 2, abd + 2)\n    print(ma)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    C = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    dp = [0] * n\n    dp[-1] = C[-1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        ans = max(ans, abs(A[i + 1] - B[i + 1]) + 1 + dp[i + 1])\n        (a, b) = (min(A[i + 1], B[i + 1]), max(A[i + 1], B[i + 1]))\n        dp[i] = max(C[i], dp[i])\n        if a != b:\n            dp[i] = max(dp[i], a + C[i] - b + 1 + dp[i + 1])\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    curr = abs(a[1] - b[1])\n    ans = curr\n    for i in range(1, n - 1):\n        ans = max(ans, curr + 1 + c[i])\n        curr += c[i] + 1 - abs(a[i + 1] - b[i + 1])\n        if a[i + 1] == b[i + 1]:\n            ans = max(ans, curr)\n            curr = 0\n        elif abs(a[i + 1] - b[i + 1]) > curr:\n            curr = abs(a[i + 1] - b[i + 1])\n    curr += 1 + c[-1]\n    ans = max(curr, ans)\n    print(ans)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    l = []\n    s = 0\n    m = 0\n    for k in range(1, n):\n        if b[k] < a[k]:\n            (a[k], b[k]) = (b[k], a[k])\n    for k in range(1, n):\n        if k == 1:\n            if a[k] == b[k]:\n                l.append(s)\n                s = 1 + c[k]\n                m = 1\n                l.append(s)\n                continue\n            else:\n                m = b[k] - a[k] + 1\n                s = c[k] + m\n                l.append(s)\n                continue\n        if a[k] != b[k]:\n            m = max(m + a[k] + c[k - 1] + 1 - b[k], b[k] - a[k] + 1)\n            s = c[k] + m\n            l.append(s)\n        else:\n            l.append(s)\n            s = 1 + c[k]\n            m = 1\n            l.append(s)\n            continue\n    print(max(l))", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    s = 0\n    m = 0\n    z = 0\n    for k in range(1, n):\n        if b[k] < a[k]:\n            (a[k], b[k]) = (b[k], a[k])\n    for k in range(1, n):\n        if k == 1:\n            if a[k] == b[k]:\n                s = 1 + c[k]\n                m = 1\n                continue\n            else:\n                m = b[k] - a[k] + 1\n                s = c[k] + m\n                continue\n        if a[k] != b[k]:\n            m = max(m + a[k] + c[k - 1] + 1 - b[k], b[k] - a[k] + 1)\n            s = max(c[k] + m, s)\n        else:\n            z = max(z, s)\n            s = 1 + c[k]\n            m = 1\n    print(max(z, s))", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    c = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    c[0] = 0\n    s = 0\n    m = 0\n    z = 0\n    for k in range(1, n):\n        if b[k] < a[k]:\n            (a[k], b[k]) = (b[k], a[k])\n    for k in range(1, n):\n        if a[k] != b[k]:\n            m = max(m + a[k] + c[k - 1] + 1 - b[k], b[k] - a[k] + 1)\n            s = max(c[k] + m, s)\n        else:\n            z = max(z, s)\n            s = 1 + c[k]\n            m = 1\n    print(max(z, s))", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    dp = [c[1] + 1 + abs(d[1] - e[1])]\n    for y in range(1, b - 1):\n        if abs(d[y + 1] - e[y + 1]) == 0:\n            dp.append(c[y + 1] + 1)\n        else:\n            dp.append(max(c[y + 1] + 1 + dp[y - 1] - abs(d[y + 1] - e[y + 1]), c[y + 1] + 1 + abs(d[y + 1] - e[y + 1])))\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    temp = 0\n    maxa = 0\n    for i in range(1, n):\n        if i == 1:\n            temp += abs(b[i] - a[i]) + 2\n        elif a[i] == b[i]:\n            temp += c[i - 1] - 1\n            if temp > maxa:\n                maxa = temp\n            temp = 2\n        else:\n            if temp + c[i - 1] - 1 > maxa:\n                maxa = temp + c[i - 1] - 1\n            if b[i] > a[i]:\n                temp += a[i] - 1 + c[i - 1] - b[i] + 2\n            else:\n                temp += b[i] - 1 + c[i - 1] - a[i] + 2\n            if temp < abs(b[i] - a[i]) + 2:\n                temp = abs(b[i] - a[i]) + 2\n        if i == n - 1:\n            temp += c[i] - 1\n            if temp > maxa:\n                maxa = temp\n    print(maxa)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    cur = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            cur = 0\n        cur = max(c[i] + abs(a[i] - b[i]) + 1, cur + c[i] - abs(a[i] - b[i]) + 1)\n        ans = max(ans, cur)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    c = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ans = 0\n    s = 0\n    for i in range(1, n):\n        x = c[i] + abs(b[i] - a[i]) + 1\n        if a[i] != b[i] and i != 1:\n            s += c[i] - abs(b[i] - a[i]) + 1\n        if a[i] == b[i]:\n            s = 1\n        s = max(x, s)\n        if s > ans:\n            ans = s\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxi = 0\n    cnt = c[n - 1]\n    for i in range(n - 1, 0, -1):\n        if a[i] > b[i]:\n            (a[i], b[i]) = (b[i], a[i])\n        if a[i] == b[i]:\n            cnt += 1\n            maxi = max(maxi, cnt)\n            cnt = c[i - 1]\n        elif i == 1:\n            cnt += b[i] - a[i] + 1\n            maxi = max(maxi, cnt)\n        else:\n            cnt1 = cnt\n            cnt1 += b[i] - a[i] + 1\n            cnt += a[i] + (c[i - 1] - b[i] + 1)\n            maxi = max(maxi, cnt)\n            maxi = max(maxi, cnt1)\n            if cnt < c[i - 1]:\n                cnt = c[i - 1]\n    print(maxi)", "import math\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    c = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    current_cycle = abs(a[1] - b[1]) + 1\n    best_cycle_till_now = 0\n    for i in range(1, n - 1):\n        best_cycle_till_now = max(best_cycle_till_now, current_cycle + c[i])\n        if a[i + 1] == b[i + 1]:\n            current_cycle = 1\n        else:\n            current_cycle = max(abs(a[i + 1] - b[i + 1]) + 1, current_cycle + (c[i] - abs(a[i + 1] - b[i + 1])) + 1)\n    best_cycle_till_now = max(best_cycle_till_now, current_cycle + c[n - 1])\n    print(best_cycle_till_now)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mx = max(a[1], b[1])\n    mn = min(a[1], b[1])\n    op = c[1] + mx - mn + 1\n    cnt = mx - mn + 1\n    for i in range(2, n):\n        mx = max(a[i], b[i])\n        mn = min(a[i], b[i])\n        if b[i] != a[i]:\n            cnt += mn + (c[i - 1] - mx + 1)\n        else:\n            cnt = 1\n        if cnt < mx - mn + 1:\n            cnt = mx - mn + 1\n        op = max(op, c[i] + cnt)\n    print(op)", "for y in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxx = lst[-1]\n    cur = lst[-1]\n    for i in range(n):\n        if b[i] < a[i]:\n            (a[i], b[i]) = (b[i], a[i])\n    for i in range(n - 1, 0, -1):\n        if a[i] == b[i]:\n            maxx = max(cur + 1, maxx)\n            cur = lst[i - 1]\n        else:\n            maxx = max(maxx, cur + b[i] - a[i] + 1)\n            cur = max(cur + a[i] + lst[i - 1] - b[i] + 1, lst[i - 1])\n    print(maxx)", "def read_input():\n    n = int(input())\n    chains = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    return (chains, a, b)\n\ndef solve(chains, a, b):\n    best_dp = [-1]\n    if a[1] == b[1]:\n        best_dp.append(chains[1] - 1 + 2)\n    else:\n        best_dp.append(chains[1] - 1 + 2 + abs(a[1] - b[1]))\n    best = best_dp[-1]\n    for i in range(2, len(chains)):\n        if a[i] == b[i]:\n            best_dp.append(chains[i] - 1 + 2)\n        else:\n            diff = abs(a[i] - b[i])\n            best_dp.append(chains[i] - 1 + 2 + max(diff, best_dp[i - 1] - diff))\n        if best_dp[-1] > best:\n            best = best_dp[-1]\n    return best\nans = []\nt = int(input())\nfor _ in range(t):\n    (chains, a, b) = read_input()\n    ans.append(solve(chains, a, b))\n    print(solve(chains, a, b))", "for t in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    curlen = 0\n    lstcur = 0\n    ans = 0\n    for i in range(1, n):\n        curlen = abs(a[i] - b[i]) + 1 + c[i]\n        if a[i] != b[i]:\n            curlen = max(curlen, c[i] + 1 + lstcur - abs(a[i] - b[i]))\n            lstcur = curlen\n        ans = max(ans, curlen)\n        lstcur = curlen\n    print(ans)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    summ = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] != b[i] and i != 1:\n            summ += c[i - 1] - max(a[i], b[i]) + min(a[i], b[i]) + 1\n        else:\n            summ = 0\n        summ = max(summ, abs(a[i] - b[i]) + 2)\n        ans = max(ans, c[i] + summ - 1)\n    print(ans)", "for tt in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    cnt = 0\n    cnt = c[n - 1] - 1\n    for i in range(n - 2, -1, -1):\n        if a[i + 1] != b[i + 1]:\n            cnt += 2\n            ans = max(ans, cnt + abs(a[i + 1] - b[i + 1]))\n            if a[i + 1] < b[i + 1]:\n                cnt += a[i + 1] - 1 + c[i] - b[i + 1]\n            else:\n                cnt += c[i] - a[i + 1] + b[i + 1] - 1\n            cnt = max(cnt, c[i] - 1)\n        else:\n            ans = max(cnt + 2, ans)\n            cnt = c[i] - 1\n    print(ans)", "def cycle(n, vert, a, b):\n    idx = len(a) - 1\n    max_so_far = 0\n    chain_len = int(vert[idx]) - 1\n    while idx > 1:\n        chain_len += 2\n        max_so_far = max(max_so_far, chain_len + abs(int(a[idx]) - int(b[idx])))\n        if int(a[idx]) == int(b[idx]):\n            max_so_far = max(max_so_far, chain_len)\n            chain_len = int(vert[idx - 1]) - 1\n        else:\n            chain_len += int(vert[idx - 1]) - 1 - abs(int(a[idx]) - int(b[idx]))\n            if int(vert[idx - 1]) - 1 > chain_len:\n                chain_len = int(vert[idx - 1]) - 1\n        idx -= 1\n    chain_len += 2\n    chain_len += abs(int(a[idx]) - int(b[idx]))\n    max_so_far = max(max_so_far, chain_len)\n    return max_so_far\nnum_test_cases = int(input())\nfor i in range(num_test_cases):\n    n = int(input())\n    vert = input().split()\n    a = input().split()\n    b = input().split()\n    print(cycle(n, vert, a, b))", "t = int(input())\nimport math\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    ci = [int(op) for op in input().split()]\n    ai = [int(op) for op in input().split()]\n    bi = [int(op) for op in input().split()]\n    ans = 0\n    m = 0\n    lc = 0\n    for i in range(n - 1):\n        if ai[i + 1] == bi[i + 1]:\n            ans = max(m + lc, ans)\n            m = 2\n        else:\n            m = max(abs(ai[i + 1] - bi[i + 1]), m + lc - abs(ai[i + 1] - bi[i + 1])) + 2\n        ans = max(m + ci[i + 1] - 1, ans)\n        lc = ci[i + 1] - 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    maxi = 0\n    prev = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            prev = abs(b[i] - a[i]) + 2 + arr[i] - 1\n        elif i == 1:\n            prev = 2 + abs(b[i] - a[i]) + arr[i] - 1\n        else:\n            a1 = prev + 2 - abs(b[i] - a[i]) + arr[i] - 1\n            a2 = abs(b[i] - a[i]) + 2 + arr[i] - 1\n            prev = max(a1, a2)\n        maxi = max(maxi, prev)\n    print(maxi)", "for _ in range(int(input())):\n    n = int(input())\n    vert = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (dp, ans) = (-10 ** 10, 0)\n    for i in range(1, n):\n        if a[i] == b[i]:\n            dp = 0\n        else:\n            dp = max(dp + min(a[i], b[i]) - 1 + vert[i - 1] - max(b[i], a[i]) + 2, abs(b[i] - a[i]))\n        ans = max(ans, dp + 1 + vert[i])\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, c, a, b):\n    intervals = [[min(ai, bi), max(ai, bi)] for (ai, bi) in zip(a, b)]\n    branches = [0 for _ in range(n)]\n    sol = 0\n    for i in range(1, n):\n        if intervals[i][1] == intervals[i][0]:\n            branches[i] = 1\n        elif i == 1:\n            branches[i] = intervals[i][1] - intervals[i][0] + 1\n        else:\n            val1 = intervals[i][1] - intervals[i][0] + 1\n            val2 = intervals[i][0] + c[i - 1] - intervals[i][1] + 1 + branches[i - 1]\n            branches[i] = max(val1, val2)\n    sol = max((branches[i] + c[i] for i in range(1, n)))\n    print(sol)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    solution(n, c, a, b)", "test = int(input())\nfor testcase in range(test):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    area = arr[n - 1] - 1 + 2 + abs(a[n - 1] - b[n - 1])\n    ans = [area]\n    for i in range(n - 2, 0, -1):\n        if a[i + 1] == b[i + 1]:\n            ans.append(arr[i] - 1 + 2 + abs(a[i] - b[i]))\n        else:\n            ans.append(max(ans[-1] + arr[i] - 1 + 2 + abs(a[i] - b[i]) - 2 * abs(a[i + 1] - b[i + 1]), arr[i] - 1 + 2 + abs(a[i] - b[i])))\n    print(max(ans))", "import threading\nimport sys\nthreading.stack_size(16 * 2048 * 2048)\nsys.setrecursionlimit(100010)\n\ndef getnext(index, diff, chain, dp, ans):\n    if dp[index] >= 0:\n        return dp[index]\n    if diff[index] > 0:\n        num1 = chain[index] - diff[index] + 1 + getnext(index + 1, diff, chain, dp, ans)\n        num2 = chain[index]\n        dp[index] = max(num1, num2)\n    else:\n        dp[index] = chain[index]\n    newnum = diff[index] + 1 + getnext(index + 1, diff, chain, dp, ans)\n    ans[0] = max(ans[0], newnum)\n    return dp[index]\n\ndef main():\n    T = int(input())\n    r = 1\n    while r <= T:\n        n = int(input())\n        chain = list(map(int, input().split()))\n        front = list(map(int, input().split()))\n        rear = list(map(int, input().split()))\n        diff = []\n        for i in range(1, n):\n            diff.append(abs(front[i] - rear[i]))\n        dp = [-1] * n\n        dp[-1] = chain[-1]\n        ans = [0]\n        num = diff[0] + 1 + getnext(1, diff, chain, dp, ans)\n        ans[0] = max(ans[0], num)\n        print(ans[0])\n        r += 1\nthreading.Thread(target=main).start()", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ans = 0\n    cnt = [0] * n\n    curr = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            curr = 2\n            ans = max(ans, curr + c[i] - 1)\n        elif curr == 0:\n            curr += abs(a[i] - b[i]) + 2\n            ans = max(ans, curr + c[i] - 1)\n        else:\n            curr += min(a[i], b[i]) - 1 + c[i - 1] - max(a[i], b[i]) + 2\n            curr = max(curr, abs(a[i] - b[i]) + 2)\n            ans = max(ans, curr + c[i] - 1)\n    ans = max(ans, curr + c[-1] - 1)\n    print(ans)", "def solution():\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    currentLen = 0\n    maxLen = 0\n    for i in range(n):\n        if i == 0:\n            currentLen += abs(max(a[i + 1], b[i + 1]) - min(a[i + 1], b[i + 1]))\n        if i > 0 and i < n - 1:\n            currentLen += 2\n            if a[i + 1] == b[i + 1]:\n                currentLen += c[i] - 1\n                maxLen = max(currentLen, maxLen)\n                currentLen = 0\n            else:\n                currentLen1 = currentLen + (c[i] - 1)\n                currentLen2 = max(a[i + 1], b[i + 1]) - min(a[i + 1], b[i + 1])\n                currentLen = currentLen + min(a[i + 1], b[i + 1]) - 1 + c[i] - max(a[i + 1], b[i + 1])\n                currentLen = max(currentLen, currentLen2)\n                maxLen = max(currentLen1, maxLen)\n        if i == n - 1:\n            currentLen += 2\n            currentLen += c[i] - 1\n            maxLen = max(currentLen, maxLen)\n    print(maxLen)\nT = int(input())\nwhile T:\n    solution()\n    T -= 1", "from collections import *\nfrom math import *\nM = 10 ** 9 + 7\nmaxx = 10 ** 20\n\ndef abss(n):\n    if n > 0:\n        return n\n    return -n\nfor i in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = 0\n    tmp = c[0] - 1\n    for i in range(1, n):\n        if a[i] == b[i]:\n            tmp = 2 + c[i] - 1\n        elif i - 1 != 0:\n            tmp = max(tmp - (c[i - 1] - 1) + 2 + c[i] - 1 + (c[i - 1] - 1 - abss(b[i] - a[i])), abss(b[i] - a[i]) + 2 + c[i] - 1)\n        else:\n            tmp = abss(b[i] - a[i]) + 2 + c[i] - 1\n        res = max(res, tmp)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    c = l[n - 1]\n    for i in range(n - 1, 0, -1):\n        if a[i] > b[i]:\n            (a[i], b[i]) = (b[i], a[i])\n        if i == 1:\n            c += b[i] - a[i] + 1\n            ans = max(ans, c, c - b[i] + a[i] - 1 + b[i] - a[i] + 1)\n        elif a[i] == b[i]:\n            c += 1\n            ans = max(ans, c)\n        else:\n            c += a[i] + l[i - 1] - b[i] + 1\n            ans = max(ans, c, c - a[i] - l[i - 1] + b[i] - 1 + b[i] - a[i] + 1)\n        if a[i] == b[i]:\n            c = l[i - 1]\n        else:\n            c = max(l[i - 1], c)\n    print(ans)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    l = input().split(' ')\n    c = []\n    for val in l:\n        c.append(int(val))\n    l = input().split(' ')\n    a = []\n    for val in l:\n        a.append(int(val))\n    l = input().split(' ')\n    b = []\n    for val in l:\n        b.append(int(val))\n    for i in range(n):\n        if a[i] > b[i]:\n            x = a[i]\n            a[i] = b[i]\n            b[i] = x\n    dp = []\n    for i in range(n):\n        dp.append(0)\n    dp[n - 1] = c[n - 1]\n    best = 0\n    l = []\n    for i in range(n - 1):\n        l.append(i)\n    l.reverse()\n    for i in l:\n        dp[i] = c[i]\n        if a[i + 1] != b[i + 1]:\n            dp[i] = max(dp[i], dp[i + 1] + a[i + 1] + c[i] - b[i + 1] + 1)\n        best = max(best, dp[i + 1] + b[i + 1] - a[i + 1] + 1)\n    print(best)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > b[i]:\n            (a[i], b[i]) = (b[i], a[i])\n    ans = 0\n    cur = 0\n    for i in range(1, n):\n        if a[i] == b[i]:\n            cur = 0\n        cur = max(c[i] + abs(a[i] - b[i]) + 1, cur + c[i] - abs(a[i] - b[i]) + 1)\n        ans = max(ans, cur)\n    print(ans)"]