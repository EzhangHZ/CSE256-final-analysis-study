["import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    s = set()\n    for i in range(n):\n        val = (i + arr[i % n]) % n\n        if val in s:\n            print('NO')\n            break\n        else:\n            s.add(val)\n    else:\n        print('YES')", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    print('YNEOS'[len({(k + int(a[k])) % n for k in range(n)}) < n::2])", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        n = II()\n        aa = LI()\n\n        def ok():\n            check = [False] * n\n            for (i, a) in enumerate(aa):\n                r = (i + a) % n\n                if check[r]:\n                    return False\n                check[r] = True\n            return True\n        if ok():\n            print('YES')\n        else:\n            print('NO')\nmain()", "def hilberts_hotel(n, array):\n    s = set()\n    for k in range(n):\n        new_room = (k + array[k]) % n\n        if new_room in s:\n            return 'NO'\n        s.add(new_room)\n    return 'YES'\ndata_size = int(input())\nfor _ in range(data_size):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(hilberts_hotel(n, a))", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, a):\n    filled = set()\n    for k in range(n):\n        newk = (k + a[k % n]) % n\n        if newk not in filled:\n            filled.add(newk)\n        else:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "from sys import stdin\na = int(stdin.readline())\nfor b in range(0, a):\n    c = int(stdin.readline())\n    d = stdin.readline().split()\n    A = set()\n    l = 0\n    K = 0\n    for e in range(0, c):\n        test = (e + int(d[e])) % c\n        A.add(test)\n        if len(A) == l:\n            print('NO')\n            K = 1\n            break\n        else:\n            l += 1\n    if K == 0:\n        print('YES')", "import sys\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef hh(n, A):\n    seen = set()\n    for i in range(n):\n        m = (i + A[i]) % n\n        while m < 0:\n            m += n\n        if m in seen:\n            return 'NO'\n        seen.add(m)\n    return 'YES'\ninput = load_sys()\nidx = 1\nN = len(input)\nwhile idx < len(input):\n    n = int(input[idx].split()[0])\n    A = [int(x) for x in input[idx + 1].split()]\n    idx += 2\n    print(hh(n, A))", "for _ in range(int(input())):\n    n = int(input())\n    l = [0] * n\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    for i in range(n):\n        o = (i + a[i]) % n\n        if l[o] == 1:\n            ans = 'NO'\n            break\n        else:\n            l[o] = 1\n    print(ans)", "import math\nimport collections\nfrom sys import stdin, stdout\nM = 10 ** 9 + 7\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = True\n    if n == 1:\n        print('YES')\n        continue\n    d = {}\n    for i in range(0, n, 1):\n        if (a[i] + i) % n in d:\n            res = False\n            break\n        else:\n            d[(a[i] + i) % n] = 0\n    if res:\n        print('YES')\n        continue\n    print('NO')", "from sys import stdin\n\ndef main():\n    readline = stdin.readline\n    t = int(readline())\n    for i in range(t):\n        n = int(readline())\n        a = list(map(int, readline().split()))\n        d = dict()\n        for m in range(n):\n            m += a[m % n]\n            m %= n\n            if m not in d:\n                d[m] = 1\n            else:\n                print('NO')\n                break\n        else:\n            print('YES')\nmain()", "import sys\nreadline = sys.stdin.readline\n\ndef solve():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    s = set()\n    for (i, a) in enumerate(a):\n        s.add((a + i) % n)\n    print('YES' if len(s) == n else 'NO')\nfor _ in range(int(readline())):\n    solve()", "inputs = int(input())\ni = 0\nj = 0\nwhile j < inputs:\n    size = int(input())\n    a = input().split()\n    add = 0\n    mask = [False for i in range(size)]\n    i = 0\n    while i < size:\n        number = int(a[i])\n        if number < 0:\n            number = -number\n            if i < number % size:\n                if not mask[i + (size - number % size)]:\n                    mask[i + (size - number % size)] = True\n                else:\n                    break\n            elif not mask[i - number % size]:\n                mask[i - number % size] = True\n            else:\n                break\n        elif size - (i + 1) < number % size:\n            if not mask[i + (number % size - size)]:\n                mask[i + (number % size - size)] = True\n            else:\n                break\n        elif not mask[i + number % size]:\n            mask[i + number % size] = True\n        else:\n            break\n        i += 1\n    if i == size:\n        print('YES')\n    else:\n        print('NO')\n    j += 1", "inputs = int(input())\nfor j in range(inputs):\n    size = int(input())\n    displacements = input().split()\n    mask = [False for i in range(size)]\n    for i in range(size):\n        number = int(displacements[i])\n        if not mask[(i + number % size) % size]:\n            mask[(i + number % size) % size] = True\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        yes = True", "inputs = int(input())\nfor j in range(inputs):\n    size = int(input())\n    displacements = input().split()\n    mask = [False for i in range(size)]\n    for i in range(size):\n        number = int(displacements[i])\n        if not mask[(i + number % size) % size]:\n            mask[(i + number % size) % size] = True\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "inputs = int(input())\nfor j in range(inputs):\n    size = int(input())\n    displacements = input().split()\n    mask = [False for i in range(size)]\n    for i in range(size):\n        number = int(displacements[i])\n        if not mask[(i + number % size) % size]:\n            mask[(i + number % size) % size] = True\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    f = 0\n    for i in range(n):\n        x = (i + l[i]) % n\n        if x in d:\n            f = 1\n            break\n        else:\n            d[x] = 1\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    print('YNEOS'[len({(k + int(a[k])) % n for k in range(n)}) < n::2])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = set()\n    for i in range(n):\n        if (a[i] + i) % n in m:\n            print('NO')\n            break\n        m.add((a[i] + i) % n)\n    else:\n        print('YES')", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    n = ni()\n    print('YES' if len(set([(x + i) % n for (i, x) in enumerate(nl())])) == n else 'NO')\nT = ni()\nfor _ in range(T):\n    solve()", "import os\n\ndef g(xs, n):\n    seen = [False] * n\n    for (i, x) in enumerate(xs):\n        j = (i + x) % n\n        if seen[j]:\n            return False\n        else:\n            seen[j] = True\n    return True\n\ndef pp(input):\n    n_test = int(input())\n    for t in range(n_test):\n        n = int(input())\n        xs = map(int, input().split())\n        if g(xs, n):\n            print('YES')\n        else:\n            print('NO')\nif 'paalto' in os.getcwd():\n    from string_source import string_source\n    s1 = string_source('6\\n1\\n14\\n2\\n1 -1\\n4\\n5 5 5 1\\n3\\n3 2 1\\n2\\n0 1\\n5\\n-239 -2 -100 -3 -11\\n')\n    pp(s1)\nelse:\n    pp(input)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    s = {*range(n)}\n    print('YNEOS'[s > {(k + int(a[k])) % n for k in s}::2])", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    n = ni()\n    print('YES' if len(set([(x + i) % n for (i, x) in enumerate(nl())])) == n else 'NO')\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nreadline = sys.stdin.readline\n\ndef solve():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    s = set()\n    for (i, a) in enumerate(A):\n        s.add((a + i) % N)\n    if len(s) == N:\n        print('YES')\n    else:\n        print('NO')\nT = int(readline())\nfor i in range(T):\n    solve()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    print('YNEOS'[len({(k + int(a[k])) % n for k in range(n)}) < n::2])", "import sys\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input()\n\ndef listStr():\n    return list(input())\n\ndef solve():\n    N = getInt()\n    A = getInts()\n    rooms = set()\n    for n in range(N):\n        rooms.add((n + A[n]) % N)\n    if len(rooms) == N:\n        return 'YES'\n    return 'NO'\nT = getInt()\nfor t in range(T):\n    print(solve())", "inputs = int(input())\nfor j in range(inputs):\n    size = int(input())\n    displacements = input().split()\n    mask = [False for i in range(size)]\n    yes = False\n    for i in range(size):\n        number = int(displacements[i])\n        if not mask[(i + number % size) % size]:\n            mask[(i + number % size) % size] = True\n        else:\n            break\n    else:\n        print('YES')\n        yes = True\n    if not yes:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    f = 0\n    for i in range(n):\n        idx = (i + l[i]) % n\n        if idx in d:\n            f = 1\n            break\n        d[idx] = i\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "def problem(n):\n    print('YES' if len(set([(int(a) + i) % n for (i, a) in enumerate(input().split())])) == n else 'NO')\nfor _ in range(int(input())):\n    n = int(input())\n    problem(n)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] % n\n    l = [0] * (2 * n)\n    for k in range(n):\n        l[k + a[k]] += 1\n        if l[k] == 2:\n            print('NO')\n            return\n    for j in range(n):\n        if l[j] + l[n + j] != 1:\n            print('NO')\n            return\n    print('YES')\nfor _ in range(int(input())):\n    main()", "count = int(input())\nfor i in range(count):\n    n = int(input())\n    a = input().split(' ')\n    res = [0] * n\n    result = 'YES'\n    for j in range(n):\n        pos = (j + int(a[j])) % n\n        res[pos] += 1\n        if res[pos] > 1:\n            result = 'NO'\n            break\n    print(result)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    l1 = []\n    for i in range(n):\n        p = (i + l[i]) % n\n        if p in d:\n            print('NO')\n            break\n        else:\n            d[p] = 1\n    if len(d) == n:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mp = {}\n    flag = True\n    for i in range(n):\n        x = (i + arr[i]) % n\n        if x in mp:\n            flag = False\n            break\n        else:\n            mp[x] = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "cases = int(input())\nresulsts = []\n\ndef solv(n, arr, m):\n    d = set()\n    for k in range(n):\n        if arr[k] < 0:\n            arr[k] += m\n        new_room = (k + arr[k]) % n\n        if new_room in d:\n            return 'NO'\n        d.add(new_room)\n    return 'YES'\nfor i in range(cases):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    m = 10 ** 9 * n\n    print(solv(n, arr, m))", "import sys\nimport heapq\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, input().split())\n\ndef rlinput():\n    return list(map(int, input().split()))\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef main():\n    n = iinput()\n    q = rlinput()\n    for i in range(n):\n        q[i] = (q[i] + i) % n\n    if len(set(q)) != n:\n        print('NO')\n    else:\n        print('YES')\nfor sdfghjkl in range(iinput()):\n    main()", "import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n    f = iter(open('C.txt').readlines())\n\n    def input():\n        return next(f)\nelse:\n    input = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if len(set([(a + i) % n for (i, a) in enumerate(A)])) == n:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nan = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sa = set(a)\n    ans = 'YES'\n    s = set()\n    for i in range(n):\n        v = (i + a[i]) % n\n        if v in s:\n            ans = 'NO'\n            break\n        else:\n            s.add(v)\n    an.append(ans)\nfor i in an:\n    print(i)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    b = [0] * n\n    j = 0\n    for i in mints():\n        b[(i + j) % n] += 1\n        j += 1\n    print(['NO', 'YES'][b.count(1) == n])\nfor i in range(mint()):\n    solve()", "import sys\n\ndef solve():\n    n = int(input())\n    s = set()\n    arr = list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        position = (i + arr[i % n]) % n\n        if position in s:\n            print('NO')\n            return\n        else:\n            s.add(position)\n    print('YES')\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\nmain()", "def is_good_shift(n, shift):\n    s = set()\n    for (num, i) in enumerate(shift):\n        s.add((num + i) % n)\n    if len(s) == n:\n        return 'YES'\n    else:\n        return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    shift = [int(_) for _ in input().split()]\n    print(is_good_shift(n, shift))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    st = set()\n    lst = list(map(int, input().split()))\n    for i in range(n):\n        st.add((i + lst[i]) % n)\n    if len(st) == n:\n        print('YES')\n    else:\n        print('NO')", "def resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = {}\n        for (index, i) in enumerate(a):\n            j = (index + i) % n\n            if j in d:\n                print('NO')\n                break\n            else:\n                d[j] = 1\n        else:\n            print('YES')\nresolve()", "from sys import *\nfrom math import *\nfrom bisect import *\nfrom heapq import heappush, heappop\nfrom itertools import combinations\nfrom collections import deque\nsetrecursionlimit(100000000)\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nfor _ in range(int(input())):\n    n = int(input())\n    a = lmi()\n    s = set()\n    for i in range(n):\n        s.add((i + a[i]) % n)\n    if len(s) != n:\n        print('NO')\n    else:\n        print('YES')", "T = int(input())\nn = [0] * T\nns = [0] * T\nfor t in range(T):\n    n[t] = int(input())\n    ns[t] = [int(i) for i in input().split(' ')]\n\ndef check(ns):\n    st = set([])\n    n = len(ns)\n    for i in range(n):\n        st.add((i + ns[i]) % n)\n    if len(st) == len(ns):\n        return 'YES'\n    else:\n        return 'NO'\nfor t in range(T):\n    print(check(ns[t]))", "def go(arr, n):\n    rooms = [False for i in range(n)]\n    for (i, a) in enumerate(arr):\n        idx = (i + a) % n\n        if rooms[idx]:\n            return 'NO'\n        else:\n            rooms[idx] = True\n    return 'YES'\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    arr = map(int, input().split(' '))\n    print(go(arr, n))", "def main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        arr = [int(num) for num in input().split()]\n        new_arrangements = [None] * n\n        k = 0\n        flag = True\n        while k < n and flag:\n            guest = arr[k]\n            new_room = (k + arr[k]) % n\n            if new_arrangements[new_room] is not None:\n                flag = False\n                print('NO')\n            else:\n                new_arrangements[new_room] = guest\n            k += 1\n        if flag:\n            print('YES')\nmain()", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    s = set()\n    cond = True\n    for i in range(n):\n        x = (i + arr[i]) % n\n        if x in s:\n            cond = False\n            break\n        else:\n            s.add(x)\n    if cond == True:\n        print('YES')\n    else:\n        print('NO')", "a = int(input())\nfor i in range(0, a):\n    c = int(input())\n    b = list(map(int, input().split()))\n    d = []\n    k = 0\n    switch = 1\n    for j in range(0, len(b)):\n        k = (b[j] + j) % c\n        if k not in d:\n            d.append(k)\n        else:\n            print('NO')\n            switch = 0\n            break\n    if switch == 1:\n        print('YES')", "from sys import stdin, stdout\ntest = int(stdin.readline())\nfor _ in range(test):\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    st = set()\n    for i in range(N):\n        st.add((i + A[i]) % N)\n    if len(st) == N:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = set()\n    for i in range(n):\n        val = (i + li[i]) % n\n        if val in s:\n            print('NO')\n            break\n        else:\n            s.add(val)\n    if n == len(s):\n        print('YES')", "n = int(input())\nfor i in range(0, n):\n    o = int(input())\n    L = []\n    K = 1\n    G = 0\n    p = input().rstrip().split(' ')\n    for j in range(0, len(p)):\n        T = (j + int(p[j])) % o\n        if T in L:\n            G = 1\n            break\n        K += 1\n        L.append(T)\n    if G == 1:\n        print('NO')\n    else:\n        print('YES')", "n = int(input())\nfor i in range(0, n):\n    o = int(input())\n    L = []\n    K = 1\n    G = 0\n    p = input().rstrip().split(' ')\n    for j in range(0, len(p)):\n        T = (j + int(p[j])) % o % o\n        if T in L:\n            G = 1\n            break\n        K += 1\n        L.append(T)\n    if G == 1:\n        print('NO')\n    else:\n        print('YES')", "n = int(input())\nfor i in range(0, n):\n    o = int(input())\n    L = []\n    K = 1\n    G = 0\n    p = input().rstrip().split(' ')\n    for j in range(0, len(p)):\n        T = ((j + int(p[j])) % o + o) % o\n        if T in L:\n            G = 1\n            break\n        K += 1\n        L.append(T)\n    if G == 1:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nfrom math import ceil, sqrt, factorial, gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l[i] = (i + l[i]) % n\n    if len(set(l)) == n:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(0, n):\n    o = int(input())\n    L = []\n    K = 1\n    G = 0\n    p = input().rstrip().split(' ')\n    for j in range(0, len(p)):\n        T = (K + int(p[K % o])) % o\n        if T in L:\n            G = 1\n            break\n        K += 1\n        L.append(T)\n    if G == 1:\n        print('NO')\n    else:\n        print('YES')", "n = int(input())\nfor i in range(0, n):\n    o = int(input())\n    L = []\n    K = 1\n    G = 0\n    p = input().rstrip().split(' ')\n    for j in range(0, len(p)):\n        T = (K + int(p[K % o])) % o\n        if T in L:\n            G = 1\n            break\n        K += 1\n        L.append(T)\n    if G == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    visited = set()\n    flag = 1\n    for r in range(n):\n        new = (r + a[r]) % n\n        if new in visited:\n            print('NO')\n            flag = 0\n            break\n        else:\n            visited.add(new)\n    if flag:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    rooms = set()\n    for j in range(n):\n        k = (arr[j] + j) % n\n        if k in rooms:\n            print('NO')\n            break\n        rooms.add(k)\n    else:\n        print('YES')", "def solve(n, a):\n    h = {}\n    for (k, b) in enumerate(a):\n        x = (k + b) % n\n        if x in h:\n            return False\n        h[x] = 1\n    return True\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    print('YES' if solve(n, a) else 'NO')", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        p = (i + l[i]) % n\n        if p in d:\n            print('NO')\n            break\n        else:\n            d[p] = 1\n    if len(d) == n:\n        print('YES')", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a1 = list(map(int, input().split()))\n    a = a1.copy()\n    freq = set()\n    f = True\n    stay = set()\n    for i in range(n):\n        a[i] += i\n        if a[i] % n in freq:\n            f = False\n            break\n        else:\n            freq.add(a[i] % n)\n        if a[i] % n in stay:\n            f = False\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    st = set()\n    lst = list(map(int, input().split()))\n    for i in range(n):\n        st.add((i + lst[i]) % n)\n    if len(st) == n:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    dic = {}\n    n = int(input())\n    arr = list(map(int, input().split()))\n    same_room = False\n    for k in range(len(arr)):\n        new_k = (k + arr[k % n]) % n\n        if new_k in dic:\n            same_room = True\n            break\n        else:\n            dic[new_k] = 0\n    if same_room:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    isVisited = False\n    d = {}\n    if n == 1:\n        print('YES')\n        continue\n    for k in range(n):\n        m = (k + a[k]) % n\n        if m not in d:\n            d[m] = True\n        else:\n            isVisited = True\n            break\n    if isVisited:\n        print('NO')\n    else:\n        print('YES')", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\nt = read_int()\nfor j in range(t):\n    n = read_int()\n    a = read_ints()\n    steps = []\n    for i in range(n):\n        step = (i + a[i] % n) % n\n        steps.append(step)\n    if len(set(steps)) == n:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\nfrom bisect import bisect_left as bl\nT = int(stdin.readline().strip())\nfor caso in range(T):\n    n = int(stdin.readline().strip())\n    s = list(map(int, stdin.readline().strip().split()))\n    a = []\n    for i in range(n):\n        a.append((i + s[i] % n) % n)\n    if len(set(a)) == n:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num = {}\n    f = 1\n    for i in range(n):\n        k = (l[i] + i) % n\n        if not num.get(k):\n            num[k] = 1\n        else:\n            f = 0\n            break\n    print('YES' if f else 'NO')", "tests = int(input())\nfor test in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * n\n    res = 'YES'\n    for (i, t) in enumerate(a):\n        cnt[(t + i) % n] += 1\n        if cnt[(t + i) % n] > 1:\n            res = 'NO'\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    visited = set()\n    for k in range(n):\n        next = (k + a[k % n]) % n\n        if next in visited:\n            break\n        visited.add(next)\n    else:\n        print('YES')\n        continue\n    print('NO')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    values = set()\n    res = True\n    for i in range(n):\n        new_room = (i + a[i]) % n\n        if new_room not in values:\n            values.add(new_room)\n        else:\n            res = False\n            break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    se = set({})\n    flag = True\n    for i in range(n):\n        new = i + ar[i % n]\n        xx = new % n\n        if xx in se:\n            flag = False\n            break\n        else:\n            se.add(xx)\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    img = set()\n    for (i, x) in enumerate(a):\n        i0 = (x + i) % n\n        if i0 in img:\n            ans = 'NO'\n            break\n        img.add(i0)\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = set()\n    res = 'YES'\n    for (i, ai) in enumerate(A):\n        new_room = ai + i\n        new_room = new_room % n\n        if new_room in s:\n            res = 'NO'\n            break\n        s.add(new_room)\n    print(res)", "def solve():\n    n = int(input())\n    s = set()\n    a = [int(x) for x in input().split(' ')]\n    for i in range(len(a)):\n        this = (i + a[i]) % n\n        if this in s:\n            print('NO')\n            break\n        else:\n            s.add(this)\n    else:\n        print('YES')\nnums = int(input())\nfor _ in range(1, nums + 1):\n    solve()", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num = {}\n    f = 1\n    for i in range(n):\n        k = ((l[i] + i) % n + n) % n\n        if not num.get(k):\n            num[k] = 1\n        else:\n            f = 0\n            break\n    print('YES' if f else 'NO')", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num = {}\n    f = 1\n    for i in range(n):\n        k = ((l[i] + i) % n + n) % n\n        if not num.get(k):\n            num[k] = 1\n        else:\n            f = 0\n            break\n    print('YES' if f else 'NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num = {}\n    f = 1\n    for i in range(n):\n        k = (l[i] + i) % n\n        if not num.get(k):\n            num[k] = 1\n        else:\n            f = 0\n            break\n    print('YES' if f else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    rooms = [0] * n\n    same_room = False\n    for k in range(len(arr)):\n        new_k = (k + arr[k % n]) % n\n        if rooms[new_k] == 1:\n            same_room = True\n            break\n        rooms[new_k] += 1\n    if same_room:\n        print('NO')\n    else:\n        print('YES')", "def answer(n, A):\n    d = {}\n    for i in range(0, n):\n        if (i + A[i]) % n in d:\n            return 'NO'\n        else:\n            d[(i + A[i]) % n] = 1\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(answer(n, arr))", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    dic = {}\n    for (k, a) in enumerate(arr, 1):\n        x = (k + a) % n\n        if dic.get(x, False) == False:\n            dic[x] = True\n        else:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    d = dict()\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = True\n    for i in range(n):\n        t = (n + (i + l[i]) % n) % n\n        if t not in d:\n            d[t] = 1\n        else:\n            print('NO')\n            flag = False\n            break\n    if flag == True:\n        print('YES')", "def solve():\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    visited = [False] * n\n    for i in range(n):\n        shift_room = i + li[i]\n        changed_room = shift_room % n\n        if visited[changed_room] == True:\n            print('NO')\n            return\n        else:\n            visited[changed_room] = True\n    else:\n        print('YES')\n        return\nt = int(input())\nfor i in range(t):\n    solve()", "def solve(n, rem):\n    remainder = []\n    set1 = set(())\n    for i in range(n):\n        remainder.append(rem[i] % n)\n        set1.add((i + remainder[i]) % n)\n    if len(set1) < n:\n        return 'NO'\n    else:\n        return 'YES'\nt = int(input())\noutput = []\nfor i in range(t):\n    n = int(input())\n    rem = [int(x) for x in input().split()]\n    output.append(solve(n, rem))\nfor v in output:\n    print(v)", "import math\nfrom collections import defaultdict, Counter\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    rooms = []\n    m = defaultdict(bool)\n    for i in range(n):\n        new_room = (i + arr[i]) % n\n        if m[new_room]:\n            print('NO')\n            return\n        else:\n            m[new_room] = True\n    print('YES')\n    return\nt = int(input())\nfor _ in range(t):\n    main()", "from sys import stdin, stdout\nfrom collections import Counter\nall_tenants = map(lambda x: [int(i) for i in x.split()], stdin.readlines()[2::2])\nfor tenants in all_tenants:\n    n = len(tenants)\n    new_rooms = {(index + rm) % n: '' for (index, rm) in enumerate(tenants)}\n    for i in range(n):\n        if new_rooms.get(i) is None:\n            print('NO')\n            break\n    else:\n        print('YES')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    dicto = {}\n    f = 0\n    for i in range(n):\n        q = (i + list1[i % n]) % n\n        if q in dicto.keys():\n            f = 1\n            break\n        else:\n            dicto[q] = 1\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for k in range(n):\n        x = (k + a[k]) % n\n        if b[x]:\n            print('NO')\n            break\n        b[x] = 1\n    else:\n        print('YES')", "def md(a, m):\n    return a % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    suc = True\n    for i in range(n):\n        if md(a[i] + i, n) in s:\n            print('NO')\n            suc = False\n            break\n        s.add(md(a[i] + i, n))\n    if not suc:\n        continue\n    print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    final = [0] * n\n    possible = True\n    for i in range(n):\n        x = (i + arr[i]) % n\n        final[x] += 1\n        if final[x] != 1:\n            possible = False\n            break\n    if not possible:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = set()\n    flag = True\n    for i in range(n):\n        if (arr[i] + i) % n in d:\n            flag = False\n            break\n        d.add((arr[i] + i) % n)\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = [0] * n\n    for (i, k) in enumerate(a):\n        v[(i + k) % n] += 1\n    print('NO' if max(v) > 1 else 'YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [False] * n\n    good = True\n    for i in range(n):\n        k = (i + a[i]) % n\n        if b[k]:\n            good = False\n            break\n        b[k] = True\n    print('YES' if good else 'NO')", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(t,) = rl()\nfor _ in range(t):\n    (n,) = rl()\n    a = rl()\n    r = set(((x + i) % n for (i, x) in enumerate(a)))\n    print('YES' if len(r) == n else 'NO')", "import sys\n\ndef I():\n    return sys.stdin.readline().rstrip()\nfor _ in range(int(I())):\n    n = int(I())\n    a = list(map(int, I().split()))\n    for i in range(n):\n        a[i] = (a[i] + i) % n\n    a.sort()\n    print('YES' if all((i == a[i] for i in range(n))) else 'NO')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = list(map(lambda x: int(x) % N, input().split()))\n    occupied = [False] * N\n    ans = 'YES'\n    for (i, elt) in enumerate(data):\n        if occupied[(i + elt) % N]:\n            ans = 'NO'\n            break\n        else:\n            occupied[(i + elt) % N] = True\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    index = []\n    for i in range(n):\n        index.append(0)\n    flag = 0\n    for i in range(n):\n        temp = l[i] + i\n        if index[temp % n] == 1:\n            flag = 1\n            print('NO')\n            break\n        else:\n            index[temp % n] = 1\n    if flag == 0:\n        print('YES')"]