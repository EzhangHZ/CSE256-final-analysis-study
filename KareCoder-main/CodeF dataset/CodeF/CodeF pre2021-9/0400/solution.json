["import math\nimport sys\n\nclass IO:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n    @staticmethod\n    def implode(sep, array):\n        return sep.join((str(x) for x in array))\nans = {}\n\ndef solve():\n    n = IO.int()\n    a = IO.list_int()\n    b = a[:]\n    res = {}\n    a.sort()\n    maxN = 0\n    for i in range(n - 1):\n        if a[i] + maxN < a[i + 1]:\n            res = {}\n        else:\n            res[a[i]] = 1\n        maxN += a[i]\n    res[a[n - 1]] = 1\n    res1 = []\n    for i in range(n):\n        if b[i] in res:\n            res1.append(str(i + 1))\n    print(len(res1))\n    print(' '.join(res1))\nquery_count = IO.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "def codeforces(arr):\n    dist = {}\n    ind = 1\n    for i in arr:\n        try:\n            dist[i].append(ind)\n        except:\n            dist[i] = [ind]\n        ind += 1\n    arr.sort()\n    ind = -1\n    res = 0\n    start = 0\n    for i in arr:\n        if res < i:\n            start = ind + 1\n        res += i\n        ind += 1\n    ans = []\n    for i in range(start, len(arr)):\n        ans.append(dist[arr[i]].pop())\n    ans.sort()\n    print(len(ans))\n    s = ' '.join(map(str, ans))\n    print(s)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    codeforces(arr)", "get_line = lambda type_: list(map(type_, input().strip().split()))\n\ndef solve():\n    n = int(input())\n    ori_a = get_line(int)\n    a = ori_a.copy()\n    a.sort()\n    lower_bound = 0\n    min_ = a[0]\n    min_cnt = 1\n    carry = 0\n    for i in range(1, n):\n        if a[i] == min_:\n            min_cnt += 1\n        else:\n            if min_cnt * min_ + carry < a[i]:\n                lower_bound = a[i]\n            carry += min_cnt * min_\n            min_ = a[i]\n            min_cnt = 1\n    ans = []\n    for i in range(n):\n        if ori_a[i] >= lower_bound:\n            ans.append(str(i + 1))\n    print(len(ans))\n    print(' '.join(ans))\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = 0\n    ans = 0\n    arr1 = sorted(arr)\n    for i in range(n):\n        if arr1[i] > s:\n            ans = i\n        s += arr1[i]\n    pos = arr1[i:]\n    ns = []\n    for j in range(n):\n        if arr[j] >= arr1[ans]:\n            ns.append(str(j + 1))\n    print(n - ans)\n    print(' '.join(ns))", "for t in range(int(input())):\n    input()\n    s = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, input().split())))):\n        if s < x:\n            z = []\n        s += x\n        z.append(i)\n    print(len(z))\n    print(' '.join(map(str, sorted(z))))", "import itertools\n\ndef main():\n    t = int(input())\n    result = []\n    for _ in range(t):\n        n = int(input())\n        a = map(int, input().split())\n\n        def enumerate_a(arr):\n            i = 0\n            for val in arr:\n                yield (val, i)\n                i += 1\n        a = sorted(enumerate_a(a))\n        s = 0\n        sums = [0] * n\n        for i in range(n):\n            s += a[i][0]\n            sums[i] = s\n        ans_n = 1\n        fits = [False] * n\n        fits[a[n - 1][1]] = True\n        for i in range(n - 1 - 1, -1, -1):\n            if sums[i] < a[i + 1][0]:\n                break\n            ans_n += 1\n            fits[a[i][1]] = True\n        ans = f'{ans_n}\\n'\n        for (i, v) in enumerate(fits):\n            if v:\n                ans += f'{i + 1} '\n        result.append(ans)\n    print('\\n'.join(result))\nmain()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [(a[i], i + 1) for i in range(n)]\n    p.sort()\n    (k, m) = (0, p[0][0])\n    for i in range(1, n):\n        if p[i][0] > m:\n            k = i\n        m += p[i][0]\n    s = [p[i][1] for i in range(k, n)]\n    s.sort()\n    print(len(s))\n    print(' '.join(map(str, s)))\ntests = int(input())\nfor test in range(tests):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    s = 0\n    ans = 0\n    for i in range(n):\n        if b[i] > s:\n            ans = i\n        s += b[i]\n    pos = b[i:]\n    ns = []\n    for j in range(n):\n        if a[j] >= b[ans]:\n            ns.append(str(j + 1))\n    print(n - ans)\n    print(' '.join(ns))", "for t in range(int(input())):\n    input()\n    s = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, input().split())))):\n        if s < x:\n            z = []\n        s += x\n        z.append(i)\n    print(len(z))\n    print(' '.join(map(str, sorted(z))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a2 = sorted(zip(a, range(n)))\n    start = -1\n    base = 0\n    for (i, xx) in enumerate(a2):\n        d = xx[0]\n        if base < d:\n            start = i\n        base = base + d\n    print(n - start)\n    print(' '.join(map(str, sorted((x[1] + 1 for x in a2[start:])))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    c = [b[0]]\n    for i in range(1, n):\n        c.append(c[-1] + b[i])\n    border = b[0]\n    for i in range(n - 1):\n        if c[i] < b[i + 1]:\n            border = b[i + 1]\n    ans = []\n    for i in range(n):\n        if a[i] >= border:\n            ans.append(i + 1)\n    print(len(ans))\n    print(' '.join((str(n) for n in ans)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a2 = sorted(zip(a, range(n)))\n    start = -1\n    base = 0\n    for (i, xx) in enumerate(a2):\n        d = xx[0]\n        if base < d:\n            start = i\n        base = base + d\n    print(n - start)\n    print(' '.join(map(str, sorted((x[1] + 1 for x in a2[start:])))))", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    array = sorted(arr, reverse=True)\n    sm = sum(arr)\n    k = 0\n    for element in array:\n        sm -= element\n        k += 1\n        if sm < element:\n            break\n    print(k)\n    j = 1\n    myarray = []\n    for ele in arr:\n        if ele >= element:\n            myarray.append(str(j))\n        j += 1\n    print(' '.join(myarray))", "T = int(input())\n\ndef do_case(numbers):\n    rank = sorted(list(enumerate(numbers)), key=lambda ix: ix[1])\n    (poss, vals) = zip(*rank)\n    tot = 0\n    min_good = 0\n    for (i, x) in enumerate(vals):\n        if x > tot:\n            min_good = i\n        tot += x\n    winners = sorted(poss[min_good:])\n    print(len(winners))\n    print(' '.join((str(x + 1) for x in winners)))\nfor _ in range(T):\n    input()\n    numbers = list(map(int, input().split()))\n    do_case(numbers)", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, tokens))\n\ndef case1490e():\n    (nPlayers, tempTokens) = (input(), map(int, input().split()))\n    (allTokens, playersWithSameTokens) = (0, {})\n    for (iPlayer, token) in enumerate(tempTokens):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, tokens):\n    prevToken = tokens.pop(0)\n    (nWinners, winners) = (playersWithSameTokens[prevToken][0], playersWithSameTokens[prevToken][1:])\n    allTokens -= nWinners * prevToken\n    for token in tokens:\n        if allTokens < prevToken:\n            break\n        nWinners += playersWithSameTokens[token][0]\n        winners.extend(playersWithSameTokens[token][1:])\n        allTokens -= playersWithSameTokens[token][0] * token\n        prevToken = token\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, tokens))\n\ndef case1490e():\n    (nPlayers, tempTokens) = (input(), map(int, input().split()))\n    (allTokens, playersWithSameTokens) = (0, {})\n    for (iPlayer, token) in enumerate(tempTokens):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, [iPlayer + 1]]\n        else:\n            playersWithSameTokens[token][1].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, tokens):\n    prevToken = tokens.pop(0)\n    (nWinners, winners) = (playersWithSameTokens[prevToken][0], playersWithSameTokens[prevToken][1])\n    allTokens -= nWinners * prevToken\n    for token in tokens:\n        if allTokens < prevToken:\n            break\n        nWinners += playersWithSameTokens[token][0]\n        winners.extend(playersWithSameTokens[token][1])\n        allTokens -= playersWithSameTokens[token][0] * token\n        prevToken = token\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "__version__ = '1.0'\n__date__ = '2021-03-13'\nimport sys\n\ndef solve(n, a):\n    ordered = sorted([(a[i], i) for i in range(n)])\n    sums = [each[0] for each in ordered]\n    for i in range(1, n):\n        sums[i] += sums[i - 1]\n    answers = [ordered[-1][1] + 1]\n    for i in reversed(range(1, n)):\n        if ordered[i][0] > sums[i - 1]:\n            break\n        else:\n            answers.append(ordered[i - 1][1] + 1)\n    return sorted(answers)\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = solve(n, a)\n        print(len(ans))\n        print(' '.join(map(str, ans)))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "test_cases = int(input())\nfor test in range(test_cases):\n    num_of_players = int(input())\n    power_level = list(map(int, input().split(' ')))\n    players = [i for i in range(num_of_players)]\n    players_ascending_power = sorted(players, key=lambda player_id: power_level[player_id])\n    strongest_player = players_ascending_power[-1]\n    highest_power = power_level[strongest_player]\n    accumulated_power = power_level[players_ascending_power[0]]\n    streak_start = 0\n    streak_size = 1\n    for i in range(1, num_of_players):\n        next_opponent = players_ascending_power[i]\n        difficulty = power_level[next_opponent]\n        if accumulated_power >= difficulty:\n            streak_size += 1\n        else:\n            streak_start = i\n            streak_size = 1\n        accumulated_power += difficulty\n    possible_winners = sorted([players_ascending_power[i] + 1 for i in range(streak_start, streak_start + streak_size)])\n    print(len(possible_winners))\n    print(' '.join(list(map(str, possible_winners))))", "def solve(arr):\n    arr.sort()\n    s = 0\n    sum_arr = []\n    for i in range(len(arr)):\n        s += arr[i]\n        sum_arr.append(s)\n    ans = 0\n    for i in range(len(arr) - 2, -1, -1):\n        if sum_arr[i] >= arr[i + 1]:\n            ans = arr[i]\n        else:\n            break\n    if ans:\n        return ans\n    else:\n        return arr[-1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    ans_temp = solve(arr.copy())\n    for i in range(len(arr)):\n        if arr[i] >= ans_temp:\n            ans.append(i + 1)\n    print(len(ans))\n    print(' '.join([str(num) for num in sorted(ans)]))", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, tokens))\n\ndef case1490e():\n    (nPlayers, tempTokens) = (input(), input().split())\n    (allTokens, playersWithSameTokens) = (0, {})\n    for (iPlayer, token) in enumerate(tempTokens):\n        token = int(token)\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, tokens):\n    prevToken = tokens.pop(0)\n    (nWinners, winners) = (playersWithSameTokens[prevToken][0], playersWithSameTokens[prevToken][1:])\n    allTokens -= nWinners * prevToken\n    for token in tokens:\n        if allTokens < prevToken:\n            break\n        nWinners += playersWithSameTokens[token][0]\n        winners.extend(playersWithSameTokens[token][1:])\n        allTokens -= playersWithSameTokens[token][0] * token\n        prevToken = token\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    c = [b[0]]\n    for i in range(1, n):\n        c.append(c[-1] + b[i])\n    border = b[0]\n    for i in range(n - 1):\n        if c[i] < b[i + 1]:\n            border = b[i + 1]\n    ans = []\n    for i in range(n):\n        if a[i] >= border:\n            ans.append(i + 1)\n    print(len(ans))\n    print(' '.join((str(n) for n in ans)))", "def solve():\n    n = int(input())\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    T = L.copy()\n    L.sort()\n    I = L.copy()\n    test = [0] * n\n    if n == 1:\n        print(1)\n        print(1)\n        return 0\n    for i in range(1, n):\n        if I[i - 1] >= I[i]:\n            test[i - 1] = 1\n        I[i] += I[i - 1]\n    x = L[-1]\n    nb = 1\n    i = n - 2\n    while i >= 0 and test[i] == 1:\n        x = L[i]\n        nb += 1\n        i -= 1\n    X = []\n    for i in range(n):\n        if T[i] >= x:\n            X.append(i + 1)\n    ch = ''\n    X.sort()\n    print(len(X))\n    for i in X:\n        ch += str(i) + ' '\n    print(ch)\nt = int(input())\nfor q in range(t):\n    solve()", "from itertools import accumulate\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted([(l[i], i) for i in range(n)])\n    a = [l[i][0] for i in range(n)]\n    idx = [l[i][1] + 1 for i in range(n)]\n    ps = list(accumulate(a))\n    sol = [idx[-1]]\n    i = n - 2\n    while i >= 0 and ps[i] >= a[i + 1]:\n        sol.append(idx[i])\n        i -= 1\n    sol.sort()\n    print(len(sol))\n    print(' '.join(map(str, sol)))\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve(a):\n    prefix_sum = 0\n    a_enumerated = list(enumerate(a))\n    a_sorted = list(sorted(a_enumerated, key=lambda x: x[1]))\n    li = []\n    for i in range(0, len(a) - 1):\n        prefix_sum += a_sorted[i][1]\n        if prefix_sum >= a_sorted[i + 1][1]:\n            li.append(a_sorted[i][0])\n        else:\n            li = []\n    li.append(a_sorted[len(a_sorted) - 1][0])\n    print(len(li))\n    print(' '.join(map(lambda x: str(x + 1), sorted(li))))\n\ndef main():\n    x = input()\n    for _ in range(int(x)):\n        input()\n        a = input()\n        solve(list(map(int, a.split())))\nmain()", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, nTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens))\n\ndef case1490e():\n    (nPlayers, tempTokens) = (input(), map(int, input().split()))\n    (allTokens, playersWithSameTokens, nTokens) = (0, {}, 0)\n    for (iPlayer, token) in enumerate(tempTokens):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n            nTokens += 1\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, nTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens):\n    (nWinners, winners) = (playersWithSameTokens[tokens[0]][0], playersWithSameTokens[tokens[0]][1:])\n    allTokens -= nWinners * tokens[0]\n    for i in range(1, nTokens):\n        if allTokens < tokens[i - 1]:\n            break\n        nWinners += playersWithSameTokens[tokens[i]][0]\n        winners.extend(playersWithSameTokens[tokens[i]][1:])\n        allTokens -= playersWithSameTokens[tokens[i]][0] * tokens[i]\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, tokens))\n\ndef case1490e():\n    (nPlayers, tempTokens) = (int(input()), input().split())\n    (allTokens, playersWithSameTokens) = (0, {})\n    for iPlayer in range(nPlayers):\n        token = int(tempTokens[iPlayer])\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, tokens):\n    prevToken = tokens.pop(0)\n    (nWinners, winners) = (playersWithSameTokens[prevToken][0], playersWithSameTokens[prevToken][1:])\n    allTokens -= nWinners * prevToken\n    for token in tokens:\n        if allTokens < prevToken:\n            break\n        nWinners += playersWithSameTokens[token][0]\n        winners.extend(playersWithSameTokens[token][1:])\n        allTokens -= playersWithSameTokens[token][0] * token\n        prevToken = token\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "t = int(input())\n\ndef get_answer(n, a):\n    b = [(a[i], i + 1) for i in range(n)]\n    b.sort(key=lambda x: x[0])\n    s = 0\n    i = 0\n    t = 0\n    while i < n - 1:\n        s += b[i][0]\n        if s < b[i + 1][0]:\n            t = i + 1\n        i += 1\n    w = b[t:]\n    w.sort(key=lambda x: x[1])\n    r = ''\n    for i in range(len(w)):\n        r += str(w[i][1]) + ' '\n    print(len(w))\n    print(r.strip())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    get_answer(n, a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [(int(i), index) for (index, i) in enumerate(input().split(), 1)]\n    arr.sort(reverse=True)\n    ans_list = [arr[0][1]]\n    s = sum([i[0] for i in arr]) - arr[0][0]\n    for i in range(1, n):\n        if s < arr[i - 1][0]:\n            break\n        s -= arr[i][0]\n        ans_list.append(arr[i][1])\n    ans_list.sort()\n    print(len(ans_list))\n    print(' '.join((str(i) for i in ans_list)))", "for t in range(int(input())):\n    input()\n    s = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, input().split())))):\n        if s < x:\n            z = []\n        s += x\n        z.append(i)\n    print(len(z))\n    print(' '.join(map(str, sorted(z))))", "def solve(arr, n, ans):\n    total = sum(arr)\n    indices = []\n    for i in range(n):\n        indices.append((arr[i], i))\n    indices.sort()\n    dp = [False] * n\n    dp[-1] = True\n    total -= indices[-1][0]\n    ans_arr = [indices[-1][1] + 1]\n    for i in range(n - 2, -1, -1):\n        if total >= indices[i + 1][0] and dp[i + 1]:\n            dp[i] = True\n            ans_arr.append(indices[i][1] + 1)\n        total -= indices[i][0]\n    ans_arr.sort()\n    for i in range(len(ans_arr)):\n        ans_arr[i] = str(ans_arr[i])\n    ans.append(str(len(ans_arr)))\n    ans.append(' '.join(ans_arr))\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        solve(arr, n, ans)\n    print('\\n'.join(ans))\nmain()", "def works(m, a):\n    s = sum(a[0:m + 1])\n    for f in a[m + 1:]:\n        if s < f:\n            return False\n        else:\n            s += f\n    return True\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    new_a = [(int(x), i) for (i, x) in enumerate(input().split())]\n    new_a.sort()\n    a = [y[0] for y in new_a]\n    (lo, hi) = (0, n)\n    while lo + 1 < hi:\n        mid = (hi + lo) // 2\n        if works(mid, a):\n            hi = mid + 1\n        else:\n            lo = mid + 1\n        if lo + 2 == hi:\n            if works(lo, a):\n                hi = lo + 1\n            else:\n                lo = lo + 1\n    print(len(a) - lo)\n    token_list = sorted(list(set((y[1] + 1 for y in new_a[lo:]))))\n    print(' '.join(map(str, token_list)))", "def main():\n    for i in range(int(input())):\n        print(playersWithWinningChance(*case1492b()))\n\ndef case1492b():\n    (nPlayers, tempTokens) = (int(input()), map(int, input().split()))\n    (allTokens, playersWithSameTokens, nTokens) = (0, {}, 0)\n    for (iPlayer, token) in enumerate(tempTokens):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n            nTokens += 1\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, nTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens):\n    (nWinners, winners) = (playersWithSameTokens[tokens[0]][0], playersWithSameTokens[tokens[0]][1:])\n    allTokens -= nWinners * tokens[0]\n    for i in range(1, nTokens):\n        if allTokens < tokens[i - 1]:\n            break\n        nWinners += playersWithSameTokens[tokens[i]][0]\n        winners.extend(playersWithSameTokens[tokens[i]][1:])\n        allTokens -= playersWithSameTokens[tokens[i]][0] * tokens[i]\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "def main():\n    for i in range(int(input())):\n        (allTokens, playersWithSameTokens, nTokens, tokens) = case1490e()\n        print(playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens))\n\ndef case1490e():\n    input()\n    (allTokens, playersWithSameTokens, nTokens) = (0, {}, 0)\n    for (iPlayer, token) in enumerate(map(int, input().split())):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n            nTokens += 1\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, nTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens):\n    (nWinners, winners) = (playersWithSameTokens[tokens[0]][0], playersWithSameTokens[tokens[0]][1:])\n    allTokens -= nWinners * tokens[0]\n    for i in range(1, nTokens):\n        if allTokens < tokens[i - 1]:\n            break\n        nWinners += playersWithSameTokens[tokens[i]][0]\n        winners.extend(playersWithSameTokens[tokens[i]][1:])\n        allTokens -= playersWithSameTokens[tokens[i]][0] * tokens[i]\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "for s in [*open(0)][2::2]:\n    S = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, s.split())))):\n        if S < x:\n            z = []\n        S += x\n        z += [i]\n    print(len(z), '\\n', *sorted(z))", "def main():\n    for i in range(int(input())):\n        print(playersWithWinningChance(*case1490e()))\n\ndef case1490e():\n    input()\n    (allTokens, playersWithSameTokens, nTokens) = (0, {}, 0)\n    for (iPlayer, token) in enumerate(map(int, input().split())):\n        allTokens += token\n        if token not in playersWithSameTokens:\n            playersWithSameTokens[token] = [1, iPlayer + 1]\n            nTokens += 1\n        else:\n            playersWithSameTokens[token].append(iPlayer + 1)\n            playersWithSameTokens[token][0] += 1\n    tokens = sorted(playersWithSameTokens, reverse=True)\n    return (allTokens, playersWithSameTokens, nTokens, tokens)\n\ndef playersWithWinningChance(allTokens, playersWithSameTokens, nTokens, tokens):\n    (nWinners, winners) = (playersWithSameTokens[tokens[0]][0], playersWithSameTokens[tokens[0]][1:])\n    allTokens -= nWinners * tokens[0]\n    for i in range(1, nTokens):\n        if allTokens < tokens[i - 1]:\n            break\n        nWinners += playersWithSameTokens[tokens[i]][0]\n        winners.extend(playersWithSameTokens[tokens[i]][1:])\n        allTokens -= playersWithSameTokens[tokens[i]][0] * tokens[i]\n    winners.sort()\n    return f\"{nWinners}\\n{' '.join(map(str, winners))}\"\nmain()", "def find():\n    n = int(input())\n    mas = tuple(map(int, input().split()))\n    sort_mas = sorted(mas)\n    dif = 0\n    res = sort_mas[0]\n    for j in range(n - 1):\n        if sort_mas[j] + dif < sort_mas[j + 1]:\n            res = sort_mas[j + 1]\n        dif += sort_mas[j]\n    ans = []\n    for j in range(n):\n        if mas[j] >= res:\n            ans.append(j + 1)\n    print(len(ans))\n    print(*ans)\nfor i in range(int(input())):\n    find()", "import math\nfrom collections import defaultdict\n\ndef printans(s, n):\n    scopy = s[:]\n    s.sort()\n    prefixsum = 0\n    prefix = [0]\n    for i in s:\n        prefixsum += i\n        prefix.append(prefixsum)\n    ans = 0\n    for i in range(n - 1):\n        if prefix[i + 1] < s[i + 1]:\n            ans = s[i + 1]\n    ansA = []\n    for i in range(n):\n        if scopy[i] >= ans:\n            ansA.append(i + 1)\n    print(len(ansA))\n    print(*ansA)\nfor i in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    printans(s, n)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, arr_orig):\n    right_ = -1\n    partials_sums = []\n    arr = arr_orig[:]\n    arr.sort()\n    partials_sums = [arr[0]]\n    for elem in arr[1:]:\n        partials_sums.append(partials_sums[-1] + elem)\n    for pos in range(n - 2, -1, -1):\n        if partials_sums[pos] * 2 < partials_sums[pos + 1]:\n            right = pos + 1\n            print(n - right)\n            low_bound = arr[right]\n            print(*[i + 1 for i in range(n) if arr_orig[i] >= low_bound])\n            return\n    print(n)\n    print(*[i for i in range(1, n + 1)])\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr_orig = list(map(int, input().split()))\n    solution(n, arr_orig)", "def solve(A, n):\n    if n == 1:\n        return [1]\n    B = sorted(A)\n    winningValsStartIndex = 0\n    runningSum = B[0]\n    for i in range(1, n):\n        if runningSum < B[i]:\n            winningValsStartIndex = i\n        runningSum += B[i]\n    minWinValue = B[winningValsStartIndex]\n    result = []\n    for i in range(n):\n        if A[i] >= minWinValue:\n            result.append(i + 1)\n    return result\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    result = solve(A, n)\n    print(len(result))\n    print(*result)", "def solve(A, n):\n    if n == 1:\n        return [1]\n    l_aux = sorted(A)\n    index = 0\n    s = l_aux[0]\n    for i in range(1, n):\n        if s < l_aux[i]:\n            index = i\n        s += l_aux[i]\n    m_value = l_aux[index]\n    result = []\n    for i in range(n):\n        if l[i] >= m_value:\n            result.append(i + 1)\n    return result\nfor test in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    result = solve(l, n)\n    print(len(result))\n    print(*result)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    nums = list(map(int, sys.stdin.readline().split()))\n    per = []\n    for i in range(n):\n        per.append((i, nums[i]))\n    per.sort(key=lambda x: x[1])\n    answer = [n]\n    i = 0\n    su = 0\n    k = 0\n    while i < n - 1:\n        su += per[i][1]\n        if su >= per[i + 1][1]:\n            k += 1\n        else:\n            k = 0\n        i += 1\n    k += 1\n    answer = per[n - k:]\n    ks = []\n    for i in answer:\n        ks.append(i[0] + 1)\n    ks.sort()\n    ks = list(map(str, ks))\n    print(k)\n    print(' '.join(ks))", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = A.copy()\n    A.sort()\n    temp = A[0]\n    idx = 0\n    for i in range(1, n):\n        if temp < A[i]:\n            idx = i\n        temp += A[i]\n    ans = []\n    for i in range(n):\n        if B[i] >= A[idx]:\n            ans.append(i + 1)\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A_Copy = A[:]\n    A.sort()\n    (sum1, max1) = (0, 0)\n    for i in range(n):\n        if sum1 < A[i]:\n            max1 = A[i]\n        sum1 += A[i]\n    ans1 = []\n    for i in range(n):\n        if A_Copy[i] >= max1:\n            ans1.append(i + 1)\n    print(len(ans1))\n    print(*ans1)", "for _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    sorted_num = sorted(numbers)\n    summ = sum(numbers)\n    for i in range(n - 1, -1, -1):\n        summ -= sorted_num[i]\n        if summ < sorted_num[i]:\n            predel = sorted_num[i]\n            break\n    answer = []\n    for i in range(n):\n        if numbers[i] >= predel:\n            answer.append(i + 1)\n    print(len(answer))\n    print(*sorted(answer))", "for s in [*open(0)][2::2]:\n    S = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, s.split())))):\n        if S < x:\n            z = []\n        S += x\n        z += [i]\n    print(len(z), '\\n', *sorted(z))", "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return (N, A)\n\ndef argsort(seq):\n    return sorted(range(len(seq)), key=seq.__getitem__)\n\ndef solve(N, A):\n    players = argsort(A)\n    B = [a for a in sorted(A)]\n    S = list(accumulate(B))\n    ans = [players[-1] + 1]\n    lose = False\n    for i in range(N - 2, -1, -1):\n        if not lose and S[i] >= B[i + 1]:\n            ans.append(players[i] + 1)\n        else:\n            lose = True\n    ans.sort()\n    print(len(ans))\n    print(*ans)\nT = int(input().strip())\nfor t in range(T):\n    inputs = read()\n    solve(*inputs)", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    sorted_a = sorted(a)\n    sums = [sorted_a[0]]\n    for i in range(1, n):\n        sums.append(sums[i - 1] + sorted_a[i])\n    last = sorted_a[0]\n    for i in range(n - 1):\n        if sums[i] < sorted_a[i + 1]:\n            last = sorted_a[i + 1]\n    ans = []\n    for i in range(n):\n        if a[i] >= last:\n            ans.append(i + 1)\n    print(len(ans))\n    print(*ans)\nfor t in range(int(input())):\n    solution()", "import sys\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = read_int_list()\n        arr1 = [(x, i) for (i, x) in enumerate(a, start=1)]\n        arr1.sort()\n        idx = 0\n        total = 0\n        for i in range(n - 1):\n            total += arr1[i][0]\n            if total < arr1[i + 1][0]:\n                idx = i + 1\n        ans = [y for (x, y) in arr1[idx:]]\n        ans.sort()\n        print(len(ans))\n        print(*ans)\nMain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = l1[:]\n    l2.sort()\n    mx = l2[n - 1]\n    k = l2[0]\n    sum1 = k\n    for j in range(1, n):\n        if sum1 >= l2[j]:\n            sum1 = sum1 + l2[j]\n        else:\n            k = l2[j]\n            sum1 = sum1 + l2[j]\n        if sum1 >= mx:\n            break\n    l3 = []\n    for j in range(0, n):\n        if l1[j] >= k:\n            l3.append(j + 1)\n    l = len(l3)\n    print(l)\n    for j in range(0, l):\n        print(l3[j], end=' ')\n    print()", "for s in [*open(0)][2::2]:\n    S = 0\n    z = []\n    for (x, i) in sorted(((x, i + 1) for (i, x) in enumerate(map(int, s.split())))):\n        if S < x:\n            z = []\n        S += x\n        z += [i]\n    print(len(z), '\\n', *sorted(z))", "import math\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    l = input().split(' ')\n    a = [int(i) for i in l]\n    temp = sorted(enumerate(a), key=lambda x: x[1])\n    a = [i[1] for i in temp]\n    index = [i[0] for i in temp]\n    s = [0] * n\n    weakestwinner = 0\n    s[0] = a[0]\n    for i in range(n - 1):\n        if s[i] < a[i + 1]:\n            weakestwinner = i + 1\n        s[i + 1] = s[i] + a[i + 1]\n    print(n - weakestwinner)\n    wwstrengh = a[weakestwinner]\n    res = []\n    for i in range(n):\n        if a[i] >= wwstrengh:\n            res.append(index[i] + 1)\n    res.sort()\n    string = ''\n    for i in res:\n        string += str(i) + ' '\n    print(string)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    ar = [int(x) for x in input().split()]\n    a = ar.copy()\n    a.sort()\n    s = []\n    p = a[0]\n    k = 0\n    for i in range(1, n):\n        if p < a[i]:\n            k = i\n        p = p + a[i]\n    for i in range(0, n):\n        if a[k] <= ar[i]:\n            s.append(i + 1)\n    print(len(s))\n    print(*s)", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    sorted_a = sorted(a)\n    sums = [sorted_a[0]]\n    last = sorted_a[0]\n    for i in range(1, n):\n        sums.append(sums[i - 1] + sorted_a[i])\n        if sums[i - 1] < sorted_a[i]:\n            last = sorted_a[i]\n    ans = []\n    for i in range(n):\n        if a[i] >= last:\n            ans.append(i + 1)\n    print(len(ans))\n    print(*ans)\nfor t in range(int(input())):\n    solution()", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    s = sum(a)\n    temp = 0\n    a = sorted(zip(a, range(1, n + 1)))\n    possible_ind = []\n    ans = 0\n    for (num, ind) in a[::-1]:\n        if s >= temp:\n            ans += 1\n            possible_ind.append(ind)\n            s -= num\n            temp = num\n        else:\n            break\n    print(ans)\n    print(*sorted(possible_ind))", "from sys import stdin\ninput = stdin.readline\nfrom heapq import heapify, heappush, heappop, heappushpop\nfrom collections import defaultdict as dd, deque as dq, Counter as C\nfrom math import factorial as f, ceil, gcd, sqrt, log\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom itertools import combinations as c, permutations as p\nfrom math import factorial as f, ceil, gcd, sqrt, log\nmi = lambda : map(int, input().split())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nmati = lambda r: [li() for _ in range(r)]\nlcm = lambda a, b: a * b // gcd(a, b)\n\ndef solve():\n    n = ii()\n    arr = li()\n    p = []\n    for (a, b) in enumerate(arr):\n        p.append((b, a))\n    p.sort(reverse=True)\n    ans = []\n    s = sum(arr)\n    for x in range(n):\n        if x == n - 1:\n            if s == p[x][0]:\n                ans.append(p[x][1] + 1)\n        else:\n            s -= p[x][0]\n            if s < p[x][0]:\n                ans.append(p[x][1] + 1)\n                break\n            else:\n                ans.append(p[x][1] + 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans)\nfor _ in range(ii()):\n    solve()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    enum = list(enumerate(arr))\n    enum.sort(key=lambda inner: inner[1])\n    lis = [enum[0][1]]\n    for i in range(1, n):\n        lis.append(lis[i - 1] + enum[i][1])\n    ind = None\n    for i in range(1, n):\n        if enum[i][1] > lis[i - 1]:\n            ind = i - 1\n    if ind == None:\n        res = [i for i in range(1, n + 1)]\n        print(n)\n        print(*res)\n        continue\n    ans = []\n    for i in range(ind + 1, n):\n        ans.append(enum[i][0] + 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[:]\n    b.sort()\n    re = -1\n    p = 0\n    for j in range(n - 1):\n        p = p + b[j]\n        if p < b[j + 1]:\n            re = j\n    res = [1] * n\n    if re != -1:\n        d = defaultdict(list)\n        q = dict()\n        for j in range(n):\n            d[a[j]].append(j)\n            if a[j] in q:\n                q[a[j]] + 1\n            else:\n                q[a[j]] = 1\n        for j in range(re + 1):\n            p = d[b[j]][q[b[j]] - 1]\n            q[b[j]] -= 1\n            res[p] = 0\n    ans = []\n    m = 0\n    for j in range(n):\n        if res[j] == 1:\n            m += 1\n            ans.append(j + 1)\n    print(m)\n    print(' '.join(map(str, ans)))", "for i in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    a = ar.copy()\n    a.sort()\n    s = []\n    p = a[0]\n    k = 0\n    for i in range(1, n):\n        if p < a[i]:\n            k = i\n        p = p + a[i]\n    for i in range(0, n):\n        if a[k] <= ar[i]:\n            s.append(i + 1)\n    print(len(s))\n    print(*s)", "I = input\nfor _ in ' ' * int(I()):\n    n = int(I())\n    l = sorted(zip(map(int, I().split()), range(1, n + 1)))\n    s = l[0][0]\n    a = 0\n    for i in range(1, n):\n        if s < l[i][0]:\n            a = i\n        s += l[i][0]\n    print(len(l[a:]))\n    print(*[x[1] for x in sorted(l[a:], key=lambda x: x[1])])", "def sol(n, l):\n    ll = []\n    for (k, v) in enumerate(l):\n        ll.append((v, k))\n    ll.sort(key=lambda x: x[0])\n    ts = sum(l) - ll[-1][0]\n    ans = [ll[-1][1] + 1]\n    for i in range(n - 2, -1, -1):\n        if ts >= ll[i + 1][0]:\n            ts -= ll[i][0]\n            ans.append(ll[i][1] + 1)\n        else:\n            break\n    return sorted(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    fa = sol(n, l)\n    print(len(fa))\n    print(*fa)", "def convertToDic(arr):\n    thing = {}\n    for x in arr:\n        try:\n            thing[x] += 1\n        except:\n            thing[x] = 1\n    return thing\n\ndef convertDicToProduct(thing):\n    dic = {}\n    for x in thing:\n        dic[x] = thing[x] * x\n    return dic\n\ndef getResult(dic):\n    result = {}\n    indicies = getIndicies(dic)\n    allFalse = {}\n    for x in indicies:\n        allFalse[x] = False\n    sum = 0\n    for x in range(len(dic) - 1):\n        sum += dic[indicies[x]]\n        if sum < indicies[x + 1]:\n            result = allFalse.copy()\n        else:\n            result[indicies[x]] = True\n    result[indicies[len(indicies) - 1]] = True\n    return result\n\ndef getIndicies(dic):\n    indicies = []\n    for x in dic:\n        indicies.append(x)\n    return indicies\nfor _ in range(int(input())):\n    bruh = int(input())\n    original = list(map(int, list(input().split(' '))))\n    arr = original.copy()\n    arr.sort()\n    thing = convertToDic(arr)\n    dic = convertDicToProduct(thing)\n    result = getResult(dic)\n    players = 0\n    for x in result:\n        if result[x]:\n            players += thing[x]\n    print(players)\n    finals = ''\n    for x in range(len(original)):\n        if result[original[x]]:\n            finals += str(x + 1) + ' '\n    print(finals)", "for _ in range(int(input())):\n    n = int(input())\n    a = [(k + 1, i) for (k, i) in enumerate(map(int, input().split()))]\n    a.sort(key=lambda x: x[1])\n    (aft, cnt, lelem) = (-1, 0, a[-1][1])\n    for (k, (__, v)) in enumerate(a):\n        cnt += v\n        if cnt >= lelem or cnt >= a[k + 1][1]:\n            continue\n        aft = k\n    print(n - (aft + 1))\n    b = sorted([k for (k, v) in a[aft + 1:]])\n    for i in b:\n        print(i, end=' ')\n    print()", "import math\nimport heapq\n\ndef S():\n    return input()\n\ndef M():\n    return map(int, input().split())\n\ndef I():\n    return int(S())\n\ndef L():\n    return list(M())\nfor _ in range(I()):\n    n = I()\n    ar = L()\n    a = ar.copy()\n    a.sort()\n    s = []\n    p = a[0]\n    k = 0\n    for i in range(1, n):\n        if p < a[i]:\n            k = i\n        p = p + a[i]\n    for i in range(0, n):\n        if a[k] <= ar[i]:\n            s.append(i + 1)\n    print(len(s))\n    print(*s)", "for _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    for (i, v) in enumerate(ai):\n        ai[i] = (v, i)\n    ai.sort()\n    pref = []\n    out = []\n    cur = 0\n    for i in range(n):\n        cur += ai[i][0]\n        pref.append(cur)\n    out = [ai[-1][1] + 1]\n    for i in range(n - 2, -1, -1):\n        if pref[i] >= ai[i + 1][0]:\n            out.append(ai[i][1] + 1)\n        else:\n            break\n    print(len(out))\n    out.sort()\n    print(*out)", "for _ in range(int(input())):\n    n = int(input())\n    a = [[int(el), i + 1] for (i, el) in enumerate(input().split())]\n    a.sort(key=lambda x: x[0])\n    suma = 0\n    for i in range(n - 1):\n        suma += a[i][0]\n    ans = [a[-1][1]]\n    ansl = 1\n    for i in range(n - 2, -1, -1):\n        if suma >= a[i + 1][0]:\n            ans.append(a[i][1])\n            ansl += 1\n            suma -= a[i][0]\n        else:\n            break\n    ans.sort()\n    print(ansl)\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = a[:]\n    ar = []\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    a.sort()\n    ans = 2\n    if a[0] == a[1]:\n        ans = 1\n    sum = a[0]\n    for i in range(1, n):\n        if sum < a[i]:\n            ans = i + 1\n        sum += a[i]\n    for i in range(n):\n        if temp[i] >= a[ans - 1]:\n            ar.append(i + 1)\n    print(len(ar))\n    for i in ar:\n        print(i, end=' ')\n    print('')", "answers = []\n\ndef solve(n, arr):\n    if n == 1:\n        answers.append([1])\n        return\n    newArr = []\n    for (i, ele) in enumerate(arr):\n        newArr.append([ele, i])\n    newArr.sort()\n    cum = [newArr[0][0]]\n    for i in range(1, n):\n        curr = newArr[i][0] + cum[-1]\n        cum.append(curr)\n    final = [newArr[-1][1] + 1]\n    for i in range(n - 2, -1, -1):\n        if cum[i] >= newArr[i + 1][0]:\n            final.append(newArr[i][1] + 1)\n        else:\n            final.sort()\n            answers.append(final)\n            return\n    final.sort()\n    answers.append(final)\nT = int(input())\nwhile T:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    solve(n, arr)\n    T -= 1\nfor ans in answers:\n    print(len(ans))\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    q = list(map(int, input().split()))\n    f = list(sorted(q))\n    f.reverse()\n    sumi = sum(f)\n    number = 1\n    listo = []\n    for j in range(len(f)):\n        if f[j] >= sumi // 2 + 1:\n            number = f[j]\n            break\n        sumi = sumi - f[j]\n    k = 0\n    for c in range(n):\n        if q[c] >= number:\n            listo.append(c + 1)\n            k = k + 1\n    print(k)\n    print(*listo, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    a.sort()\n    l = a.copy()\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    ans = 1\n    i = n - 2\n    for i in range(n - 2, -1, -1):\n        if l[i] >= a[i + 1]:\n            ans += 1\n        else:\n            break\n    mn = a[i + 1]\n    print(ans)\n    for i in range(n):\n        if b[i] >= mn:\n            print(i + 1, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = arr.copy()\n    brr.sort()\n    ans = []\n    p = brr[0]\n    k = 0\n    for i in range(1, n):\n        if p < brr[i]:\n            k = i\n        p = p + brr[i]\n    for i in range(0, n):\n        if brr[k] <= arr[i]:\n            ans.append(i + 1)\n    print(len(ans))\n    print(*ans)", "def f(arr):\n    lst = [[arr[i], i] for i in range(len(arr))]\n    arr = sorted(arr)\n    c = 0\n    i = 0\n    mx = max(arr)\n    lst = sorted(lst, key=lambda s: s[0])\n    while i < len(arr):\n        c += arr[i]\n        flag = True\n        for j in range(i + 1, len(arr)):\n            if c >= arr[j]:\n                c += arr[j]\n            else:\n                flag = False\n                i = j\n                break\n        if flag:\n            break\n    print(len(arr) - i)\n    ans = []\n    for k in range(i, len(arr)):\n        ans.append(lst[k][1] + 1)\n    return sorted(ans)\nfor i in range(int(input())):\n    a = int(input())\n    lst = list(map(int, input().strip().split()))\n    print(*f(lst))", "T = int(input())\nfor case in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append((a[i], i + 1))\n    arr.sort()\n    presum = []\n    presum.append(arr[0][0])\n    for i in range(1, n):\n        presum.append(presum[-1] + arr[i][0])\n    ans = [arr[n - 1][1]]\n    for i in range(n - 2, -1, -1):\n        if presum[i] >= arr[i + 1][0]:\n            ans.append(arr[i][1])\n        else:\n            break\n    print(len(ans))\n    ans.sort()\n    print(*ans)", "I = input\nfor _ in ' ' * int(I()):\n    n = int(I())\n    l = sorted(zip(map(int, I().split()), range(1, n + 1)))\n    s = l[0][0]\n    a = 0\n    for i in range(1, n):\n        if s < l[i][0]:\n            a = i\n        s += l[i][0]\n    print(len(l[a:]))\n    print(*[x[1] for x in sorted(l[a:], key=lambda x: x[1])])", "test = int(input())\n\ndef func(x):\n    return x[0]\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(len(a)):\n        b.append([a[i], i + 1])\n    b.sort(key=func)\n    a = []\n    _sum = 0\n    a.append(0)\n    for i in b:\n        _sum += i[0]\n        a.append(_sum)\n    for i in range(n - 1, -1, -1):\n        if b[i][0] > a[i]:\n            ans = []\n            for j in range(i, n):\n                ans.append(b[j][1])\n            ans.sort()\n            print(len(ans))\n            for j in ans:\n                print(j, end=' ')\n            print()\n            return\nfor i in range(test):\n    solve()", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = []\n    for i in range(n):\n        b.append((a[i], i + 1))\n    b.sort(reverse=True)\n    c = []\n    s = sum(a)\n    c.append(b[0][1])\n    s -= b[0][0]\n    for i in range(1, n):\n        if s < b[i - 1][0]:\n            ans.append(sorted(c))\n            break\n        c.append(b[i][1])\n        s -= b[i][0]\n    else:\n        ans.append(sorted(c))\nfor i in ans:\n    print(len(i))\n    print(*i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(enumerate(list(map(int, input().split())), 1))\n    arr.sort(key=lambda x: x[1])\n    pre = []\n    sum = 0\n    start = 0\n    for i in range(len(arr)):\n        sum += arr[i][1]\n        pre.append(sum)\n    for i in range(0, len(pre) - 1):\n        if pre[i] < arr[i + 1][1]:\n            start = i + 1\n    ans = []\n    for j in range(start, len(arr)):\n        ans.append(arr[j][0])\n    ans.sort()\n    print(len(ans))\n    print(*ans)", "for u in range(int(input())):\n    n = int(input())\n    l = [int(w) for w in input().split()]\n    l = [[l[i], i + 1] for i in range(n)]\n    l.sort(key=lambda x: x[0])\n    s = l[0][0]\n    x = l[-1][0]\n    p = 0\n    for i in range(1, n):\n        if l[i][0] > s:\n            p = i\n            s = s + l[i][0]\n            continue\n        s += l[i][0]\n    ans = []\n    t = 0\n    for i in range(p, n):\n        ans.append(l[i][1])\n        t += 1\n    print(t)\n    print(*sorted(ans))", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = list(([a[i], i + 1] for i in range(n)))\n    d.sort(key=lambda x: x[0])\n    v = [d[i][0] for i in range(n)]\n    for i in range(1, n):\n        v[i] += v[i - 1]\n    res = [d[-1][1]]\n    i = n - 1\n    while d[i][0] <= v[i - 1] and i > 0:\n        res.append(d[i - 1][1])\n        i -= 1\n    siz = len(res)\n    res = sorted(res)\n    print(siz)\n    print(*res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    lis = []\n    for i in range(n):\n        lis.append((l[i], i + 1))\n    lis.sort()\n    lk = []\n    for i in range(n):\n        lk.append(lis[i][1])\n    li = sorted(l)\n    s = 0\n    b = -1\n    for i in range(n):\n        if i >= 1:\n            if li[i] > s:\n                b = i\n        s += li[i]\n    print(min(n - b, n))\n    if b == -1:\n        print(*sorted(lk))\n    else:\n        print(*sorted(lk[b:]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    args = list(map(int, input().split()))\n    players = [(i + 1, args[i]) for i in range(n)]\n    players.sort(key=lambda x: x[1])\n    s = 0\n    cur = 0\n    for i in range(n - 1):\n        s += players[i][1]\n        if s < players[i + 1][1]:\n            cur = i + 1\n    ans = []\n    for i in range(cur, n):\n        ans.append(players[i][0])\n    ans.sort()\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = [0 for i in range(n)]\n    su = []\n    s = 0\n    a = [[a[i], i] for i in range(n)]\n    a.sort()\n    for i in range(n):\n        s += a[i][0]\n        su.append(s)\n    p = -2\n    for i in range(n - 1):\n        if su[i] < a[i + 1][0]:\n            p = i\n    for i in range(p + 1):\n        res[a[i][1]] = 0\n    for i in range(p + 1, n):\n        res[a[i][1]] = 1\n    k = [i + 1 for i in range(n) if res[i] != 0]\n    print(len(k))\n    print(*k)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [[arr[i], i] for i in range(len(arr))]\n    arr.sort()\n    prefixSum = 0\n    for i in range(n):\n        prefixSum += arr[i][0]\n    s = set()\n    s.add(arr[-1][1] + 1)\n    for j in range(n - 2, -1, -1):\n        prefixSum -= arr[j + 1][0]\n        if prefixSum < arr[j + 1][0]:\n            break\n        else:\n            s.add(arr[j][1] + 1)\n    s = list(s)\n    s.sort()\n    print(len(s))\n    for k in s:\n        print(k, end=' ')\n    print('\\r')", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = a.copy()\n    b.sort()\n    fits = 0\n    previous_tokens = 0\n    for ind in range(n - 1):\n        if b[ind] + previous_tokens < b[ind + 1]:\n            fits = ind + 1\n        previous_tokens += b[ind]\n    suitable_tokens = set()\n    for ind in range(fits, n):\n        suitable_tokens.add(b[ind])\n    num_of_players = 0\n    indices_of_players = []\n    for (ind, a_i) in enumerate(a):\n        if a_i in suitable_tokens:\n            num_of_players += 1\n            indices_of_players.append(ind + 1)\n    print(num_of_players)\n    print(*indices_of_players)", "import sys\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    ad = {}\n    for i in range(0, n):\n        ad[i] = a[i]\n    ad = sorted(ad.items(), key=lambda x: x[1])\n    s = [0] * n\n    s[0] = ad[0][1]\n    for i in range(1, n):\n        s[i] = s[i - 1] + ad[i][1]\n    res = []\n    for i in range(n - 2, -1, -1):\n        if s[i] >= ad[i + 1][1]:\n            res.append(ad[i][0] + 1)\n        else:\n            break\n    res.append(ad[n - 1][0] + 1)\n    res.sort()\n    print(len(res))\n    for i in res:\n        print(i, end=' ')\n    print()\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(enumerate(list(map(int, input().split())), 1))\n    nums.sort(key=lambda x: x[1])\n    sum = 0\n    pre = []\n    start = 0\n    for i in range(len(nums)):\n        sum += nums[i][1]\n        pre.append(sum)\n    for i in range(0, len(pre) - 1):\n        if pre[i] < nums[i + 1][1]:\n            start = i + 1\n    lst = []\n    for j in range(start, len(nums)):\n        lst.append(nums[j][0])\n    lst.sort()\n    print(len(lst))\n    print(*lst)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a_set = sorted(list(set(a)))\n    win_dict = {}.fromkeys(a_set, 0)\n    count_dict = {}.fromkeys(a_set, 0)\n    for num in a:\n        count_dict[num] += 1\n    prefix_sum_dict = {}.fromkeys(a_set, 0)\n    if len(a_set) == 1:\n        print(n)\n        ans_str = ''\n        for i in range(1, n + 1):\n            ans_str += str(i) + ' '\n        print(ans_str[:-1])\n    else:\n        prefix_sum = 0\n        for i in range(len(a_set)):\n            prefix_sum += count_dict[a_set[i]] * a_set[i]\n            prefix_sum_dict[a_set[i]] = prefix_sum\n        for i in reversed(range(len(a_set) - 1)):\n            if prefix_sum_dict[a_set[i]] >= a_set[i + 1]:\n                win_dict[a_set[i]] = 1\n            else:\n                break\n        win_dict[a_set[-1]] = 1\n        ans = 0\n        ans_str = ''\n        for index in range(len(a)):\n            if win_dict[a[index]] == 1:\n                ans += 1\n                ans_str += str(index + 1) + ' '\n        print(ans)\n        print(ans_str[:-1])", "from bisect import bisect_left, bisect_right\nfor test in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    arr = sorted(lst)\n    sum_lst = [0] * n\n    s = 0\n    for i in range(n):\n        s += arr[i]\n        sum_lst[i] = s\n    winner = set({})\n    for i in range(n - 1):\n        if sum_lst[i] >= arr[i + 1]:\n            winner.add(arr[i])\n        else:\n            winner.clear()\n    winner.add(arr[-1])\n    ans = set({})\n    for i in range(n):\n        if lst[i] in winner:\n            ans.add(i + 1)\n    print(len(ans))\n    print(*ans)", "def ans(a, n):\n    d = {}\n    for i in range(len(a)):\n        if a[i] not in d:\n            d[a[i]] = [i]\n        else:\n            d[a[i]].append(i)\n    a.sort()\n    s = [0 for i in range(n)]\n    ans = 0\n    arr = []\n    s[0] = a[0]\n    for i in range(1, n):\n        s[i] = s[i - 1] + a[i]\n    for i in range(n - 1):\n        if s[i] >= a[i + 1]:\n            ans += 1\n            arr.append(a[i])\n        else:\n            ans = 0\n            arr = []\n    ans += 1\n    arr.append(a[-1])\n    print(ans)\n    l = []\n    for i in arr:\n        l.append(d[i].pop() + 1)\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print('')\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    b = input().split()\n    a = []\n    for i in b:\n        a.append(int(i))\n    ans(a, m)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    aa = [[a[i], i] for i in range(n)]\n    aa = sorted(aa, key=lambda aa: [aa[0]], reverse=True)\n    s = sum(a)\n    ind = 0\n    for i in range(n):\n        s -= aa[i][0]\n        if s < aa[i][0]:\n            ind = i\n            break\n    print(ind + 1)\n    aa = sorted(aa[:ind + 1], key=lambda aa: [aa[1]])\n    for ai in aa:\n        print(ai[1] + 1, end=' ')\n    print('')"]