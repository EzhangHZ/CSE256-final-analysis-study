["import math\n\ndef factorize(n):\n    result = []\n    for i in [2, 3, 5]:\n        t = 1\n        while n % i == 0:\n            t *= i\n            n //= i\n        if t > 1:\n            result.append(t)\n    increments = [4, 2, 4, 2, 4, 6, 2, 6]\n    d = 7\n    inc = 0\n    while d * d <= n:\n        t = 1\n        while n % d == 0:\n            t *= d\n            n //= d\n        if t > 1:\n            result.append(t)\n        d += increments[inc]\n        inc += 1\n        if inc == 8:\n            inc = 0\n    if n > 1:\n        result.append(n)\n    return result\n\ndef recurse(i, a, b, divisors):\n    if i == len(divisors):\n        return max(a, b)\n    return min(recurse(i + 1, a * divisors[i], b, divisors), recurse(i + 1, a, b * divisors[i], divisors))\nn = int(input())\ndiv = factorize(n)\nres = recurse(0, 1, 1, div)\nprint(res, n // res)", "from math import gcd, sqrt\nb = int(input())\nsrt = sqrt(b)\nfor i in range(int(srt) + 1, 0, -1):\n    if b % i == 0 and gcd(i, b // i) == 1:\n        print(i, b // i)\n        break", "import math\n\ndef gcd(a, b):\n    while a % b != 0:\n        r = a % b\n        a = b\n        b = r\n    return b\nx = int(input())\nfor i in range(math.floor(math.sqrt(x)), 0, -1):\n    if x % i == 0 and gcd(x // i, i) == 1:\n        print(i, x // i)\n        break", "import math\nlcm = int(input())\nfor i in range(int(lcm ** 0.5), 0, -1):\n    if lcm % i == 0 and math.gcd(lcm // i, i) == 1:\n        print(i, lcm // i)\n        break", "import math\nn = int(input())\nfor i in range(int(math.sqrt(n)), 0, -1):\n    if n % i == 0 and math.gcd(n // i, i) == 1:\n        print('{} {}'.format(i, n // i))\n        break", "from math import gcd, sqrt\nn = int(input())\nfor i in range(int(sqrt(n)), 0, -1):\n    if n % i == 0 and gcd(i, int(n / i)) == 1:\n        print(i, int(n / i))\n        exit()", "import math\nn = int(input())\nfor i in range(int(math.sqrt(n)), 0, -1):\n    if n % i == 0 and math.gcd(n // i, i) == 1:\n        print('{} {}'.format(i, n // i))\n        break", "import itertools\nimport math\nfrom functools import reduce\n\ndef multiply(values):\n    prod = 1\n    for a in values:\n        prod *= a\n    return prod\nvalue = int(input())\nn = value\nmaxFactors = []\ntwos = 1\nwhile n % 2 == 0:\n    twos *= 2\n    n /= 2\nif twos != 1:\n    maxFactors.append(twos)\nfor a in range(3, int(math.sqrt(n)) + 1, 2):\n    total = 0\n    while n % a == 0:\n        total += 1\n        n /= a\n    if total != 0:\n        maxFactors.append(a ** total)\nif n > 2:\n    maxFactors.append(n)\nmaxFactors = list(map(int, maxFactors))\nmaxFactors.sort()\nallFactors = []\nfor a in range(len(maxFactors) + 1):\n    allFactors += list(map(multiply, itertools.combinations(maxFactors, a)))\nclosest = allFactors[0]\ndifference = abs(closest - math.sqrt(value))\nfor a in allFactors:\n    dif = abs(a - math.sqrt(value))\n    if dif < difference:\n        closest = a\n        difference = dif\nprint(closest, int(value / closest))", "import sys\nfrom math import sqrt, gcd\nfrom bisect import bisect\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().strip().split()))\n\ndef solve():\n    n = int(inp())\n    for i in range(int(sqrt(n) + 1), 0, -1):\n        if n % i == 0 and gcd(i, n // i) == 1:\n            print(i, n // i)\n            break\nsolve()", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\ndef fadi(n):\n    for i in range(int(n ** (1 / 2)), 1, -1):\n        if n % i == 0:\n            if gcd(n // i, i) == 1:\n                print(n // i, i)\n                return\n    else:\n        print(1, n)\n        return\nt = int(input())\nfadi(t)", "import math\n\ndef function(n):\n    if n == 1:\n        return f'{1} {1}'\n    for i in range(math.floor(math.sqrt(n)), 1, -1):\n        if n % i == 0:\n            if math.gcd(i, int(n / i)) == 1:\n                return f'{i} {int(n / i)}'\n    return f'{1} {n}'\nn = int(input())\nprint(function(n))", "x = int(input())\nimport math\nans1 = 1\nans2 = x\nfor i in range(int(math.sqrt(x) + 1), 0, -1):\n    if x % i == 0 and math.gcd(i, x // i) == 1:\n        ans1 = i\n        ans2 = x // i\n        break\nprint(min(ans2, ans1), max(ans1, ans2))", "import sys\ninput = sys.stdin.readline\n\ndef hcf(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return True if a == 1 else False\nx = int(input())\nfor i in range(int(x ** 0.5) + 1, 0, -1):\n    if x % i == 0 and hcf(max(x // i, i), min(x // i, i)):\n        break\nprint(x // i, i)", "import math\nn = int(input())\nm = int(n ** 0.5)\nfor i in range(m, 0, -1):\n    if n % i == 0:\n        if math.gcd(i, n // i) == 1:\n            print(i, n // i)\n            break", "import math\nn = int(input())\nfor j in range(int(n ** 0.5), 0, -1):\n    if n % j == 0:\n        if math.gcd(j, n // j) == 1:\n            break\nprint(j, n // j)", "from math import sqrt, gcd\nj = int(input())\nl = int(sqrt(j))\nfor i in range(l, -1, -1):\n    if j % i == 0:\n        h = i\n        if gcd(i, j // i) == 1:\n            break\nprint(h, j // i)", "from math import *\nn = int(input())\nif n == 1:\n    print(1, 1)\n    exit()\nfor i in range(int(n ** 0.5), 0, -1):\n    if n % i == 0:\n        (a, b) = (i, n // i)\n        if a * b / gcd(a, b) == n:\n            print(a, b)\n            break", "from math import gcd\nx = int(input())\nfor n in range(int(x ** 0.5), 0, -1):\n    if x % n == 0 and gcd(n, x // n) == 1:\n        print(n, x // n)\n        break", "from math import sqrt\n\ndef HCF(a, b):\n    a1 = max(a, b)\n    b1 = min(a, b)\n    while b1:\n        (a1, b1) = (b1, a1 % b1)\n    return a1\nn = int(input())\nfor i in range(int(sqrt(n)) + 1, -1, -1):\n    if not n % i and HCF(n // i, i) == 1:\n        print(n // i, i)\n        break", "from math import *\nn = int(input())\nroot = int(sqrt(n))\nfor i in range(root, 0, -1):\n    if n % i == 0 and gcd(i, n // i) == 1:\n        print(i, n // i)\n        break", "import math\n\ndef hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nX = int(input())\narr = [0] * 2\nif X == 1 or X == 2 or X == 3:\n    print('1 ' + str(X))\nelse:\n    signal = False\n    for i in range(int(math.sqrt(X)), 1, -1):\n        if X % i == 0:\n            arr = [i, X // i]\n            if hcf(arr[0], arr[1]) == 1:\n                print(str(arr[0]) + ' ' + str(arr[1]))\n                signal = True\n                break\n    if signal == False:\n        print('1 ' + str(X))"]