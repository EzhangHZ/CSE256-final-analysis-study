["(m, n) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfrom functools import reduce\nfrom math import gcd\nif len(a) == 1:\n    main = a[0]\n    print(' '.join((str(a[0] + i) for i in b)))\nelse:\n    m = [a[i] - a[0] for i in range(1, len(a))]\n    main = reduce(lambda a, b: gcd(a, b), m)\n    print(' '.join((str(i) for i in [gcd(main, i + a[0]) for i in b])))", "(m, n) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfrom functools import reduce\nfrom math import gcd\nif len(a) == 1:\n    main = a[0]\n    print(' '.join((str(a[0] + i) for i in b)))\nelse:\n    m = [a[i] - a[0] for i in range(1, len(a))]\n    main = reduce(lambda a, b: gcd(a, b), m)\n    print(' '.join((str(i) for i in [gcd(main, i + a[0]) for i in b])))", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n_gcd = 0\nfor i in range(1, n):\n    _gcd = gcd(a[i] - a[0], _gcd)\nans = []\nfor j in range(m):\n    ans.append(str(gcd(a[0] + b[j], _gcd)))\nprint(' '.join(ans))", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n_gcd = 0\nfor i in range(1, n):\n    _gcd = gcd(a[i] - a[0], _gcd)\nans = []\nfor j in range(m):\n    ans.append(str(gcd(a[0] + b[j], _gcd)))\nprint(' '.join(ans))", "from math import gcd\nfrom functools import reduce\n(n, m) = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nmina = min(a)\na.remove(mina)\ngcda_ = reduce(gcd, [ai - mina for ai in a], 0)\nanswer = [gcd(gcda_, bi + mina) for bi in b]\nprint(*answer)", "import math\n(t, a, g) = (input(), list(map(int, input().split())), 0)\nfor v in a[1:]:\n    g = math.gcd(g, v - a[0])\nprint(*[math.gcd(g, v + a[0]) for v in map(int, input().split())])", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ngc = 0\nfor i in range(n - 1):\n    gc = gcd(gc, a[i] - a[i - 1])\nprint(*[gcd(gc, i + a[-1]) for i in b])", "import math\n(l, m) = [int(n) for n in input().split()]\nseries1 = [int(n) for n in input().split()]\nseries2 = [int(n) for n in input().split()]\nresult = []\nif len(series1) == 1:\n    for n in series2:\n        result.append(str(n + series1[0]))\nelse:\n    series1.sort()\n    small = series1[0]\n    series1 = [n - small for n in series1]\n    gcd = series1[1]\n    for i in range(2, len(series1)):\n        gcd = math.gcd(gcd, series1[i])\n    result = []\n    for n in series2:\n        result.append(str(math.gcd(gcd, small + n)))\nprint(' '.join(result))", "import sys, math\ninput = sys.stdin.readline\n(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nANS = []\nGCD = 0\nfor i in range(1, N):\n    GCD = math.gcd(A[i] - A[0], GCD)\nfor i in B:\n    ANS.append(math.gcd(A[0] + i, GCD))\nprint(*ANS)", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\nMOD = 998244353\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    g = 0\n    for i in range(n - 1):\n        g = math.gcd(g, abs(a[i + 1] - a[i]))\n    ans = 0\n    for i in range(m):\n        print(math.gcd(g, a[0] + b[i]), end=' ')\n    print()\nt = 1\nfor i in range(1, t + 1):\n    solve()", "from math import gcd\nfrom functools import reduce\n\ndef gcdOfList(L):\n    x = reduce(gcd, L)\n    return x\n[n, m] = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\na = sorted(a)\nout = []\nif len(a) == 1:\n    out = map(lambda x: x + a[0], b)\nelse:\n    for j in range(1, n):\n        a[j] = a[j] - a[0]\n    first = a[0]\n    rest = gcdOfList(a[1:])\n    for j in range(m):\n        out.append(gcd(first + b[j], rest))\nprint(' '.join(map(str, out)))", "import math\n(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\na1 = a[0]\ncommon_gcd = 0\nfor a_i in a[1:]:\n    common_gcd = math.gcd(common_gcd, a_i - a[0])\nprint(*[math.gcd(common_gcd, b_i + a1) for b_i in b], sep=' ')", "import sys\nimport math\nimport collections\nfrom copy import copy\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef algo(a, b):\n    x = min(a)\n    k = 0\n    for i in a:\n        k = gcd(k, i - x)\n    ans = []\n    for i in b:\n        ans.append(gcd(k, x + i))\n    print(*ans)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nalgo(a, b)", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif n > 2:\n    g = math.gcd(a[2] - a[0], a[1] - a[0])\n    for i in range(3, n):\n        g = math.gcd(g, a[i] - a[0])\n    ans = []\n    for i in range(m):\n        s = math.gcd(g, a[0] + b[i])\n        ans.append(s)\n    print(*ans)\nelif n == 1:\n    g = a[0] + b[0]\n    ans = []\n    for i in range(m):\n        s = a[0] + b[i]\n        ans.append(s)\n    print(*ans)\nelse:\n    g = a[-1] - a[0]\n    ans = []\n    for i in range(m):\n        s = math.gcd(g, a[0] + b[i])\n        ans.append(s)\n    print(*ans)", "import math\n(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\na1 = a[0]\nwithout_a1 = [a_i - a[0] for a_i in a[1:]]\ncommon_gcd = without_a1[0] if without_a1 else 0\nfor a_i in without_a1[1:]:\n    common_gcd = math.gcd(common_gcd, a_i)\nprint(*[math.gcd(common_gcd, b_i + a1) for b_i in b], sep=' ')", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ngc = 0\nfor i in range(n - 1):\n    gc = gcd(gc, a[i] - a[i - 1])\nprint(*[gcd(gc, i + a[-1]) for i in b])", "import sys, math, heapq, queue\nfast_input = sys.stdin.readline\n(n, m) = map(int, fast_input().split())\na = list(map(int, fast_input().split()))\nb = list(map(int, fast_input().split()))\nif n == 1:\n    for i in range(m):\n        print(a[0] + b[i], end=' ')\nelse:\n    g = a[1] - a[0]\n    for i in range(1, n):\n        g = math.gcd(g, a[i] - a[0])\n    for i in range(m):\n        print(math.gcd(a[0] + b[i], g), end=' ')", "import math\n\ndef main():\n    (n, m) = (int(x) for x in input().split())\n    l1 = list(set([int(x) for x in input().split()]))\n    l2 = [int(x) for x in input().split()]\n    if len(l1) == 1:\n        xx = [str(l1[0] + x) for x in l2]\n        print(*xx)\n        exit()\n    common_gcd = l1[1] - l1[0]\n    for i in range(1, len(l1)):\n        common_gcd = math.gcd(common_gcd, l1[i] - l1[0])\n    print(*[math.gcd(common_gcd, l1[0] + i) for i in l2])\nmain()", "import math\n\ndef main():\n    (n, m) = (int(x) for x in input().split())\n    l1 = [int(x) for x in input().split()]\n    l2 = [int(x) for x in input().split()]\n    if len(l1) == 1:\n        xx = [str(l1[0] + x) for x in l2]\n        print(*xx)\n        exit()\n    common_gcd = l1[1] - l1[0]\n    for i in range(1, len(l1)):\n        common_gcd = math.gcd(common_gcd, l1[i] - l1[0])\n    print(*[math.gcd(common_gcd, l1[0] + i) for i in l2])\nmain()", "import math\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\ngcd = 0\nfor i in range(1, n):\n    gcd = math.gcd(gcd, abs(l1[i] - l1[0]))\nfor i in range(m):\n    l2[i] = math.gcd(l1[0] + l2[i], gcd)\nprint(*l2)", "from math import gcd\n(n, m) = map(int, input().split())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nans = [0] * m\nif n == 1:\n    for i in range(m):\n        ans[i] = A[0] + B[i]\nelse:\n    GCD = A[1] - A[0]\n    for i in range(1, n):\n        GCD = gcd(GCD, A[i] - A[0])\n    for i in range(m):\n        ans[i] = gcd(GCD, B[i] + A[0])\nprint(*ans)", "from sys import stdin\nfrom math import gcd\ninput = stdin.readline\n(n, m) = map(int, input().split())\nlst_n = list(map(int, input().split()))\nlst_m = list(map(int, input().split()))\nx = lst_n[0]\nlst_n = [i - x for i in lst_n]\nlst_n[0] = x\n(g, k, arr) = (0, 0, [0] * m)\nfor i in range(1, n):\n    g = gcd(g, lst_n[i])\nwhile k < m:\n    arr[k] = gcd(g, x + lst_m[k])\n    k += 1\nprint(*arr)", "from sys import stdin\nfrom math import gcd\ninput = stdin.readline\n(n, m) = map(int, input().split())\nlst_n = list(map(int, input().split()))\nlst_m = list(map(int, input().split()))\nx = lst_n[0]\nlst_n = [i - x for i in lst_n]\nlst_n[0] = x\n(g, k, arr) = (0, 0, [0] * m)\nfor i in range(1, n):\n    g = gcd(g, lst_n[i])\nwhile k < m:\n    arr[k] = gcd(g, x + lst_m[k])\n    k += 1\nprint(*arr)", "from math import *\nans = 0\ns = []\nt = []\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(1, n):\n    ans = gcd(ans, abs(a[0] - a[i]))\nfor j in range(m):\n    print(gcd(ans, a[0] + b[j]), end=' ')\nprint()", "import math\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\nif n == 1:\n    for j in range(m):\n        print(arr[0] + brr[j], end=' ')\n        print()\nelse:\n    ans = arr[1] - arr[0]\n    for i in range(2, n):\n        ans = math.gcd(ans, arr[i] - arr[i - 1])\n    for j in range(m):\n        print(math.gcd(arr[0] + brr[j], ans), end=' ')\n    print()", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na1 = a.copy()\na1.sort()\nif n == 1:\n    ans = []\n    for i in range(m):\n        ans.append(a[0] + b[i])\n    print(*ans)\nelse:\n    x = a[1] - a[0]\n    for i in range(1, n):\n        x = math.gcd(x, a[i] - a[0])\n    ans = []\n    for i in range(m):\n        ans.append(math.gcd(a[0] + b[i], x))\n    print(*ans)", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = gcd(out, abs(a[0] - a[i]))\nprint(*[gcd(out, a[0] + b[j]) for j in range(m)])", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = gcd(out, abs(a[0] - a[i]))\nprint(*[gcd(out, a[0] + b[j]) for j in range(m)])", "import math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n):\n        ans = math.gcd(ans, abs(l[i] - l[0]))\n    for j in range(m):\n        print(math.gcd(ans, l[0] + l1[j]), end=' ')\n    print()\nt = 1\nfor i in range(t):\n    solve()", "from math import *\n(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nans = []\nmn = min(l1)\ngd = 0\nfor i in range(n):\n    gd = gcd(gd, abs(l1[i] - mn))\nfor i in range(m):\n    ans.append(gcd(gd, l2[i] + mn))\nprint(*ans)", "import math\n(n, m) = (int(x) for x in input().split())\nl1 = list(set([int(x) for x in input().split()]))\nl2 = [int(x) for x in input().split()]\nif len(l1) == 1:\n    print(*[x + l1[0] for x in l2])\n    exit(0)\ngcd = l1[1] - l1[0]\nfor i in range(1, len(l1)):\n    gcd = math.gcd(gcd, l1[i] - l1[i - 1])\nprint(*[math.gcd(l1[0] + x, gcd) for x in l2])", "from functools import reduce\nfrom math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(1, n):\n    a[i] -= a[0]\ng = reduce(gcd, a[1:], 0)\nb = list(map(int, input().split()))\nfor each in b:\n    print(gcd(g, a[0] + each), end=' ')", "import math\nimport sys\nimport functools\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef map_inp(v_type):\n    return map(v_type, inp().split())\n\ndef list_inp(v_type):\n    return list(map_inp(v_type))\n(n, m) = map_inp(int)\na1 = list_inp(int)\nb1 = list_inp(int)\nfor i in range(1, n):\n    a1[i] = a1[i] - a1[0]\nif n > 1:\n    gcd = functools.reduce(math.gcd, a1[1:])\n    ans_arr = []\n    for item in b1:\n        ans_arr.append(math.gcd(a1[0] + item, gcd))\n    print(*ans_arr)\nelse:\n    for item in b1:\n        print(a1[0] + item, end=' ')", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\ng = 0\nfor i in range(n):\n    g = math.gcd(g, a[i] - a[0])\nfor i in range(m):\n    print(math.gcd(a[0] + b[i], g), end=' ')\nprint()", "import sys, os\nfrom math import sqrt, gcd, ceil, log, floor\nfrom math import factorial as fact\nfrom bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations\ninput = sys.stdin.readline\nread = lambda : list(map(int, input().strip().split()))\nMOD = 10 ** 9 + 7\n\ndef main():\n    (n, m) = read()\n    a = read()\n    b = read()\n    a.sort()\n    gc = 0\n    for i in range(n - 1):\n        gc = gcd(gc, a[i + 1] - a[i])\n    ans = []\n    for i in b:\n        ans.append(gcd(gc, a[0] + i))\n    print(*ans)\nmain()", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = gcd(out, abs(a[0] - a[i]))\nprint(*[gcd(out, a[0] + b[j]) for j in range(m)])", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ng = 0\nfor i in range(1, n):\n    g = gcd(a[i] - a[i - 1], g)\nans = []\nfor j in range(m):\n    ans.append(gcd(g, a[0] + b[j]))\nprint(*ans)", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = math.gcd(out, abs(a[0] - a[i]))\nprint(*[math.gcd(out, a[0] + b[j]) for j in range(m)])", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = gcd(out, abs(a[0] - a[i]))\nprint(*[gcd(out, a[0] + b[j]) for j in range(m)])", "import sys\nimport math\nimport collections\nimport bisect\nimport string\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(1):\n    (n, m) = get_ints()\n    arr1 = get_list()\n    arr2 = get_list()\n    a = arr1[0]\n    temp = []\n    for i in range(1, n):\n        temp.append(arr1[i] - a)\n    if len(temp) == 0:\n        g = 0\n    elif len(temp) == 1:\n        g = temp[0]\n    else:\n        g = math.gcd(temp[0], temp[1])\n        for i in range(2, len(temp)):\n            g = math.gcd(g, temp[i])\n    ans = []\n    for i in arr2:\n        val = math.gcd(a + i, g)\n        ans.append(val)\n    print(*ans)", "import math\n\ndef row_gcd(n_arr, m_arr, n, m):\n    ans = 0\n    for i in range(1, n):\n        ans = math.gcd(ans, n_arr[i] - n_arr[i - 1])\n    for i in range(0, m):\n        print(math.gcd(ans, n_arr[0] + m_arr[i]), end=' ')\n(n, m) = map(int, input().split())\nn_arr = list(map(int, input().split()))\nm_arr = list(map(int, input().split()))\nrow_gcd(n_arr, m_arr, n, m)", "from math import gcd\n(n, m) = map(int, input().split())\na = sorted(list(map(int, input().split())))\nb = list(map(int, input().split()))\ngc = 0\nfor i in range(n - 1):\n    gc = gcd(gc, a[i] - a[i - 1])\nprint(*[gcd(gc, i + a[-1]) for i in b])", "from math import gcd as g\nI = lambda : list(map(int, input().split()))\n(n, m) = I()\n(x, a) = (0, I())\nb = I()\nfor i in range(1, n):\n    x = g(x, abs(a[0] - a[i]))\nprint(*[g(x, a[0] + b[j]) for j in range(m)])", "import math\n\ndef main():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n >= 2:\n        for i in range(n - 1, 0, -1):\n            a[i] -= a[i - 1]\n        base_ans = abs(a[1])\n        for i in range(2, n):\n            base_ans = math.gcd(base_ans, abs(a[i]))\n        print(*[math.gcd(a[0] + x, base_ans) for x in b])\n    else:\n        print(*[a[0] + x for x in b])\nmain()", "import math\n(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\no = 0\nfor i in range(1, n):\n    o = math.gcd(o, a[i] - a[0])\nfor i in b:\n    t = math.gcd(i + a[0], o)\n    print(t, end=' ')\nprint('')", "from math import *\n(n, m) = [int(i) for i in input().split()]\na1 = [int(i) for i in input().split()]\na2 = [int(i) for i in input().split()]\ng = 0\nfor i in range(1, n):\n    g = gcd(g, a1[i] - a1[0])\nfor i in range(m):\n    print(gcd(g, a2[i] + a1[0]), end=' ')\nprint()", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = math.gcd(out, abs(a[0] - a[i]))\nfor j in range(m):\n    print(math.gcd(out, a[0] + b[j]), end=' ')\nprint()", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = gcd(out, abs(a[0] - a[i]))\nfor j in range(m):\n    print(gcd(out, a[0] + b[j]), end=' ')", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 0\nfrom math import gcd\nfor i in range(1, len(a)):\n    ans = gcd(ans, abs(a[0] - a[i]))\nfor i in range(m):\n    print(gcd(ans, a[0] + b[i]), end=' ')", "import math\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nout = 0\nfor i in range(1, n):\n    out = math.gcd(out, abs(a[0] - a[i]))\nfor j in range(m):\n    print(math.gcd(out, a[0] + b[j]), end=' ')\nprint()", "import sys\ninput = sys.stdin.readline\nfrom itertools import groupby\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\nimport math\n\ndef HalfDead():\n    (n, m) = R()\n    a = L()\n    b = L()\n    if n == 1:\n        ans = [a[0] + x for x in b]\n        print(*ans)\n    else:\n        a.sort()\n        g = 0\n        for i in range(1, n):\n            g = math.gcd(g, a[i] - a[0])\n        ans = [math.gcd(a[0] + b[i], g) for i in range(m)]\n        print(*ans)\nHalfDead()", "import math\nfrom functools import reduce\ninput()\nn = list(map(int, list(input().split())))\nm = list(map(int, list(input().split())))\nans = []\nalllists = []\nfor i in range(1, len(n)):\n    alllists.append(n[i] - n[0])\nggcd = reduce(math.gcd, alllists, 0)\nfor b in m:\n    ans.append(math.gcd(n[0] + b, ggcd))\nprint(*ans)", "import math\n(n, m) = map(int, input().split())\n(a, b, g) = (sorted(map(int, input().split())), list(map(int, input().split())), 0)\nfor i in range(n):\n    g = math.gcd(g, a[i] - a[0])\nfor i in range(m):\n    print(math.gcd(a[0] + b[i], g), end=' ')\nprint()", "import sys\nfrom math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nb = list(map(int, input().split()))\nresult = [0] * m\nif n == 1:\n    for i in range(m):\n        result[i] = a[0] + b[i]\n    print(*result, sep=' ')\n    sys.exit(0)\ng = a[1] - a[0]\nfor i in range(2, n):\n    g = gcd(g, a[i] - a[0])\nresult = [0] * m\nfor i in range(m):\n    result[i] = gcd(g, a[0] + b[i])\nprint(*result, sep=' ')", "import math\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\n    ans = math.gcd(ans, abs(l1[0] - l1[i]))\nfor i in range(m):\n    print(math.gcd(l1[0] + l2[i], ans), end=' ')", "from math import gcd\n\ndef gcd_list(a, n):\n    while n != 1:\n        c = gcd(a[-1], a[-2])\n        a.pop()\n        a.pop()\n        a.append(c)\n        n -= 1\n    return a[0]\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = gcd_list([max(a[0] - a[j], a[j] - a[0]) for j in range(n)], n)\nfor i in range(m):\n    print(gcd(d, a[0] + b[i]), end=' ')", "import math as ma\n(n, m) = map(int, input().split())\na = input().split()\nb = input().split()\nif n == 1:\n    for B in b:\n        print(int(B) + int(a[0]), end=' ')\n    print()\nelse:\n    x = n - 1\n    y = int(a[1]) - int(a[0])\n    for i in range(x):\n        y = ma.gcd(int(a[i + 1]) - int(a[i]), y)\n    for i in range(m):\n        print(ma.gcd(y, int(a[0]) + int(b[i])), end=' ')", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = []\nif n == 1:\n    for j in range(m):\n        ans.append(a[0] + b[j])\nelse:\n    for i in range(n - 1):\n        if i == 0:\n            max_gcd = abs(a[i + 1] - a[i])\n        else:\n            max_gcd = gcd(max_gcd, abs(a[i + 1] - a[i]))\n    for j in range(m):\n        ans.append(gcd(max_gcd, a[0] + b[j]))\nprint(*ans)", "from collections import defaultdict, Counter\nimport sys\nimport bisect\nimport math\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\n(n, m) = get_ints()\na = get_array()\nb = get_array()\nG = 0\nfor i in range(1, n):\n    G = math.gcd(G, a[i] - a[0])\nfor i in range(m):\n    print(math.gcd(a[0] + b[i], G), end=' ')", "from math import gcd\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\narr.sort()\ng = 0\nif n > 1:\n    g = arr[1] - arr[0]\nfor i in range(2, n):\n    g = gcd(arr[i] - arr[0], g)\nfor i in range(m):\n    print(gcd(brr[i] + arr[0], g), end=' ')", "import math\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\nif n == 1:\n    for i in range(m):\n        print(arr[0] + brr[i])\n    exit()\nl = arr[1] - arr[0]\nfor i in range(2, n):\n    l = math.gcd(l, arr[i] - arr[i - 1])\nfor i in range(m):\n    print(math.gcd(arr[0] + brr[i], l), end=' ')", "from collections import Counter\nimport string\nimport bisect\nimport math\nimport sys\nfrom fractions import Fraction\n\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef vary(arrber_of_variables):\n    if arrber_of_variables == 1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables >= 2:\n        return map(int, sys.stdin.readline().split())\n\ndef makedict(var):\n    return dict(Counter(var))\ntestcases = 1\nfor _ in range(testcases):\n    (n, m) = vary(2)\n    num = array_int()\n    b = array_int()\n    if n == 1:\n        for i in range(m):\n            print(num[0] + b[i], end=' ')\n        continue\n    gt = abs(num[0] - num[1])\n    for i in range(1, n - 1):\n        gt = math.gcd(abs(num[i] - num[i + 1]), gt)\n    for i in range(m):\n        print(math.gcd(b[i] + num[-1], gt), end=' ')", "import math\n(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nif n >= 2:\n    C = sorted(A)\n    mi_gcd = C[1] - C[0]\n    for a in range(1, n - 1):\n        mi_gcd = math.gcd(mi_gcd, C[a + 1] - C[a])\n    for a in range(m):\n        f = C[0] + B[a]\n        print(math.gcd(f, mi_gcd), end=' ')\n    print()\nelse:\n    ans = []\n    for i in range(m):\n        ans.append(A[0] + B[i])\n    print(*ans)", "import math as mt\n(m, n) = map(int, input().split())\narr = list(map(int, input().strip().split()))[:m]\nbrr = list(map(int, input().strip().split()))[:n]\nl = []\narr.sort()\ncrr = []\nif m > 1:\n    for i in range(1, m):\n        crr.append(arr[i] - arr[i - 1])\n    y = crr[0]\n    for i in range(1, m - 1):\n        y = mt.gcd(y, crr[i])\n    for i in range(0, n):\n        x = mt.gcd(arr[0] + brr[i], y)\n        l.append(x)\nelse:\n    for i in range(0, n):\n        x = arr[0] + brr[i]\n        l.append(x)\nprint(*l, sep=' ')", "import math\n(a, b) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\ny = 0\nl1.sort()\nfor i in range(1, a - 1):\n    y = math.gcd(y, l1[i] - l1[i - 1])\nfor i in range(b):\n    x = math.gcd(l1[0] + l2[i], y)\n    print(x, end=' ')", "import sys\nimport math, bisect, operator\n(inf, m) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\n(n, m) = neo()\nA = Neo()\nB = Neo()\nA.sort()\nC = []\nA = A[::-1]\nif n == 1:\n    for i in B:\n        print(A[0] + i, end=' ')\n    exit()\nfor (i, j) in zip(A, A[1:]):\n    C += [i - j]\ngcd = C[0]\nfor i in C[1:]:\n    gcd = math.gcd(gcd, i)\nfor i in B:\n    t = math.gcd(gcd, i + A[-1])\n    print(t, end=' ')", "from math import gcd\n(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nnod = 0\nfor i in range(n):\n    nod = gcd(nod, abs(a[0] - a[i]))\nfor j in range(m):\n    print(gcd(nod, a[0] + b[j]), end=' ')", "from math import gcd as __gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\ngcd = 0\nfor i in range(1, n):\n    gcd = __gcd(gcd, a[i] - a[0])\nfor i in range(m):\n    print(__gcd(gcd, a[0] + b[i]), end=' ')", "import math\n(n, m) = map(int, input().split())\n(a, b, g) = (sorted(map(int, input().split())), list(map(int, input().split())), 0)\nfor i in range(n):\n    g = math.gcd(g, a[i] - a[0])\nfor i in range(m):\n    print(math.gcd(a[0] + b[i], g), end=' ')\nprint()", "import math\n(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\na.sort()\nif len(a) == 1:\n    for i in range(m):\n        print(a[0] + b[i], end=' ')\nelse:\n    gcd1 = a[1] - a[0]\n    for i in range(2, len(a)):\n        gcd1 = math.gcd(gcd1, a[i] - a[i - 1])\n    for i in range(m):\n        print(math.gcd(gcd1, a[0] + b[i]), end=' ')", "import math\n(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\n    ans = math.gcd(ans, abs(l1[0] - l1[i]))\nfor i in range(m):\n    print(math.gcd(l1[0] + l2[i], ans), end=' ')", "def gcd_lst(lst):\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    if not lst:\n        return None\n    curr = lst[0]\n    for i in range(1, len(lst)):\n        curr = gcd(curr, lst[i])\n    return curr\n\ndef main():\n    nm = input()\n    (n, m) = nm.split(' ')\n    (n, m) = (int(n), int(m))\n    as_str = input()\n    a_arr = as_str.split(' ')\n    a_arr = list(map(lambda x: int(x), a_arr))\n    a_min = min(a_arr)\n    a_arr_cpy = list(a_arr)\n    a_arr_cpy.remove(a_min)\n    a_gcd = gcd_lst(list(map(lambda x: x - a_min, a_arr_cpy)))\n    bs_str = input()\n    b_arr = bs_str.split(' ')\n    b_arr = list(map(lambda x: int(x), b_arr))\n    ans = []\n    for b in b_arr:\n        if a_gcd:\n            ans.append(gcd_lst([a_min + b, a_gcd]))\n        else:\n            ans.append(a_min + b)\n    ans = list(map(lambda x: str(x), ans))\n    print(' '.join(ans))\nmain()", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef solution():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    if len(a) == 1:\n        for j in range(m):\n            print(a[0] + b[j], end=' ')\n        print()\n    else:\n        if len(a) == 2:\n            ans = a[1] - a[0]\n        else:\n            ans = gcd(a[1] - a[0], a[2] - a[0])\n            for i in range(3, n):\n                ans = gcd(ans, a[i] - a[0])\n        for j in range(m):\n            print(gcd(a[0] + b[j], ans), end=' ')\n        print()\nsolution()", "def read_ints():\n    return [int(x) for x in input().split()]\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef calc():\n    (n, m) = read_ints()\n    a = read_ints()\n    b = read_ints()\n    a.sort()\n    if n == 1:\n        gcd_a = 0\n    else:\n        gcd_a = a[1] - a[0]\n        for a_i in a[2:]:\n            gcd_a = gcd(gcd_a, a_i - a[0])\n    for b_i in b:\n        print(gcd(a[0] + b_i, gcd_a), end=' ')\n\ndef main():\n    calc()\nmain()", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\narr2 = list(map(int, input().split()))\nl = []\nif n == 1:\n    result = arr[0]\n    for j in range(m):\n        l.append(result + arr2[j])\n    print(*l)\nelse:\n    result = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        result = gcd(result, abs(arr[i] - arr[0]))\n    for j in range(m):\n        l.append(gcd(arr[0] + arr2[j], result))\n    print(*l)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nif n == 1:\n    for i in range(m - 1):\n        print(b[i] + a[0], end=' ')\n    print(b[-1] + a[0])\nelse:\n    a.sort()\n    g = a[1] - a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i] - a[i - 1])\n    for i in range(m):\n        print(gcd(g, a[0] + b[i]), end=' ')", "R = lambda : map(int, input().split())\n(n, m) = R()\na = list(R())\n\ndef find(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd(arr):\n    r = find(abs(arr[1] - arr[0]), abs(arr[2] - arr[0]))\n    for i in range(2, len(arr)):\n        r = find(r, abs(arr[i] - arr[0]))\n    return r\nb = list(R())\nif n > 2:\n    g = gcd(a)\nelse:\n    g = 0\nfor i in b:\n    if n > 2:\n        print(find(g, a[0] + i), end=' ')\n    elif n == 2:\n        print(find(a[0] + i, a[1] - a[0]), end=' ')\n    else:\n        print(a[0] + i, end=' ')\nprint()", "(n, m) = tuple(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\ntemp = 0\nfor i in range(1, len(a)):\n    temp = gcd(temp, abs(a[i] - a[i - 1]))\nfor i in range(len(b)):\n    print(gcd(b[i] + a[0], temp), end=' ')", "def op():\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    g = 0\n    ans = []\n    for i in range(1, n):\n        a[i] = a[i] - a[0]\n    for i in range(1, n):\n        if a[i] != 0:\n            g = gcd(a[i], g)\n    for i in range(m):\n        gg = gcd(a[0] + b[i], g)\n        ans.append(abs(gg))\n    print(*ans)\n\ndef gcd(a, b):\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\nop()", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(1):\n    ll = [int(x) for x in input().split()]\n    la = ll[0]\n    lb = ll[1]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    final = []\n    a.sort()\n    g = 0\n    for i in range(1, la):\n        g = gcd(g, a[i] - a[i - 1])\n    for i in range(lb):\n        print(gcd(g, a[0] + b[i]), end=' ')", "from fractions import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = list(set(a))\nn = len(a)\nma = min(a)\ns = 0\nfor i in range(n):\n    if a[i] != ma:\n        a[i] -= ma\n        s = gcd(s, a[i])\nfor i in range(m):\n    print(gcd(s, ma + b[i]), end=' ')", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef arraygcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\na.sort()\nfor i in range(1, n):\n    c.append(a[i] - a[0])\ng = 0\nif len(c) > 0:\n    g = arraygcd(c)\nans = []\nfor i in range(m):\n    ans.append(find_gcd(a[0] + b[i], g))\nfor i in ans:\n    print(i, end=' ')", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nSizk = [int(x) for x in input().split()]\nFirst = [int(x) for x in input().split()]\nSecond = [int(x) for x in input().split()]\nFirst.sort()\nbase = 0\nfor j in range(1, Sizk[0]):\n    base = computeGCD(base, First[j] - First[0])\nfor i in range(Sizk[1]):\n    temp = computeGCD(First[0] + Second[i], base)\n    print(temp, end=' ')", "import math\nimport sys\nimport bisect\nfrom heapq import heapify, heappop, heappush\nfrom itertools import *\nfrom collections import deque, OrderedDict\nfrom pprint import pprint\nsys.setrecursionlimit(10 ** 6)\nII = lambda : sys.stdin.readline()\ninp = lambda : int(II())\ninpm = lambda : map(int, II().split())\ninpl = lambda : list(inpm())\n(WHITE, GREY, BLACK, RED) = (0, 1, 2, 3)\nEPS = 1e-09\nINF = int(1e+18)\nMOD = int(1000000000.0) + 7\nN = 2000009\n\ndef nod(a, b):\n    while a > 0:\n        (a, b) = (b % a, a)\n    return b\n\ndef solve():\n    (n, m) = inpm()\n    a = inpl()\n    b = inpl()\n    a.sort()\n    if n == 1:\n        for i in range(m):\n            print(a[0] + b[i], end=' ')\n    else:\n        NOD = a[1] - a[0]\n        for i in range(1, n):\n            NOD = nod(NOD, a[i] - a[i - 1])\n        for i in range(m):\n            res = nod(a[0] + b[i], NOD)\n            print(res, end=' ')\n    print()\n\ndef main():\n    t = 1\n    for i in range(t):\n        solve()\nmain()", "def gcd(a, b):\n    while b:\n        a %= b\n        if not a:\n            return b\n        b %= a\n    return a\n\ndef abs(a):\n    if a >= 0:\n        return a\n    else:\n        return -a\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * m\ng = 0\nfor i in range(1, n):\n    g = gcd(abs(a[i] - a[0]), g)\nfor i in range(m):\n    c[i] = gcd(a[0] + b[i], g)\nfor i in c:\n    print(i, sep=' ', end=' ')", "from math import gcd\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in b:\n    ans = a[0] + i\n    if len(a) >= 2:\n        ans = gcd(a[0] + i, a[1] + i)\n    if len(a) > 2:\n        ans = gcd(ans, a[(len(a) - 1) // 4] + i)\n        ans = gcd(ans, a[(len(a) - 1) // 2] + i)\n        ans = gcd(ans, a[(len(a) - 1) * 3 // 4] + i)\n        ans = gcd(ans, a[len(a) - 1] + i)\n    print(ans, end=' ')", "(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = 0\nfor i in range(N):\n    t = gcd(t, A[i] - A[0])\nans = []\nfor i in range(M):\n    ans.append(gcd(t, A[0] + B[i]))\nprint(' '.join((str(i) for i in ans)))", "import sys\ninput = sys.stdin.readline\nl = input().split()\nn = int(l[0])\nm = int(l[1])\narr1 = [0] * n\narr2 = [0] * m\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nl = input().split()\nfor i in range(n):\n    arr1[i] = int(l[i])\narr1.sort()\nl = input().split()\nfor i in range(m):\n    arr2[i] = int(l[i])\ng = 0\nfor i in range(n):\n    g = gcd(arr1[i] - arr1[0], g)\nfor i in range(m):\n    ans = gcd(arr1[0] + arr2[i], g)\n    print(str(ans) + ' ', end='')", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nif n == 1:\n    g = []\n    for j in range(m):\n        g.append(a[0] + b[j])\n    print(' '.join(map(str, g)))\nelse:\n    c = a[1] - a[0]\n    for j in range(2, n):\n        c = gcd(c, a[j] - a[0])\n    g = []\n    for j in range(m):\n        g.append(gcd(c, b[j] + a[0]))\n    print(' '.join(map(str, g)))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n(n, m) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nbrr = [int(x) for x in input().split()]\nfirst = arr[0]\ngc = 0\nfor i in range(1, n):\n    gc = gcd(gc, abs(arr[i] - first))\nfor i in brr:\n    print(gcd(gc, first + i), end=' ')", "(n, m) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\noutput = []\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nres = 0\nfor index in range(1, n):\n    res = gcd(abs(a[index] - a[0]), res)\nfor index in range(0, m):\n    output += [gcd(res, a[0] + b[index])]\nprint(' '.join(map(str, output)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lgcd(a):\n    res = a[0]\n    for i in range(1, len(a)):\n        res = gcd(res, a[i])\n    return res\n(n, m) = map(int, input().split())\na = sorted(list(map(int, input().split())))\nb = list(map(int, input().split()))\nif n == 1:\n    ans = [b[j] + a[0] for j in range(m)]\nelse:\n    A = lgcd([a[i + 1] - a[i] for i in range(n - 1)])\n    ans = [gcd(b[j] + a[0], A) for j in range(m)]\nprint(*ans)", "(n, m) = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nresult = []\nd = {}\n\ndef gcd(s, t):\n    if t == 0:\n        return s\n    return gcd(t, s % t)\nif n == 1:\n    val = 0\nelse:\n    val = a[1] - a[0]\n    for i in range(2, n):\n        val = gcd(max(val, a[i] - a[0]), min(val, a[i] - a[0]))\nfor j in range(m):\n    result.append(gcd(val, a[0] + b[j]))\nprint(' '.join((str(x) for x in result)))"]