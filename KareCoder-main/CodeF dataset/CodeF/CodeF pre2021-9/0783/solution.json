["n = int(input())\na = [int(i) for i in input().split()]\nans = 0\ndc = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(i):\n        if a[i] < a[j]:\n            dc[i].append((a[j], j))\n            ans += 1\nprint(ans)\nfor i in range(n - 1, -1, -1):\n    dc[i].sort()\n    for j in dc[i]:\n        print(j[1] + 1, i + 1)", "n = int(input())\narr = list(map(int, input().split()))\nbrr = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        if arr[i] > arr[j]:\n            brr.append((arr[i], i + 1, j + 1))\nbrr.sort()\nbrr.sort(reverse=True, key=lambda x: x[2])\nprint(len(brr))\nfor (a, b, c) in brr:\n    print(b, c)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef issorted(a):\n    for i in range(1, len(a)):\n        if a[i - 1] > a[i]:\n            return False\n    return True\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "n = int(input())\narr = list(map(int, input().split()))\nbrr = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        if arr[i] > arr[j]:\n            brr.append((arr[i], i + 1, j + 1))\nbrr.sort()\nbrr.sort(reverse=True, key=lambda x: x[2])\nprint(len(brr))\nfor (a, b, c) in brr:\n    print(b, c)", "(n, a, inv) = (int(input()), list(map(int, input().split())), [])\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "n = int(input())\nlst = [int(j) for j in input().split()]\ninversions = list()\nfor i in range(1, n):\n    for j in range(i):\n        if lst[i] < lst[j]:\n            inversions.append((i, -lst[j], -j))\ninversions.sort(reverse=True)\nres = list(range(len(inversions)))\nif res:\n    print(len(res))\n    for elem in res:\n        (v, _, u) = inversions[elem]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print(0)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef issorted(a):\n    for i in range(1, len(a)):\n        if a[i - 1] > a[i]:\n            return False\n    return True\n\ndef stupid(a, inv, was, order):\n    if len(order) == len(inv) and issorted(a):\n        return order\n    for i in range(len(inv)):\n        if was[i] == 0:\n            was[i] = 1\n            order.append(i)\n            (x, _, y) = inv[i]\n            y = -y\n            (a[x], a[y]) = (a[y], a[x])\n            r = stupid(a, inv, was, order)\n            (a[x], a[y]) = (a[y], a[x])\n            was[i] = 0\n            if r is not None:\n                return r\n            order.pop()\n    return None\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "n = int(input())\na = list(map(int, input().split()))\ninv = []\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "n = int(input())\nlst = [int(j) for j in input().split()]\ninversions = list()\nfor i in range(1, n):\n    for j in range(i):\n        if lst[i] < lst[j]:\n            inversions.append((i, -lst[j], -j))\ninversions.sort(reverse=True)\nres = list(range(len(inversions)))\nif res:\n    print(len(res))\n    for elem in res:\n        (v, _, u) = inversions[elem]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print(0)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\nn = int(input())\na = list(map(int, input().split()))\ninv = []\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] < a[j]:\n            inv.append((i, -a[j], -j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n    print(len(r))\n    for z in r:\n        (v, _, u) = inv[z]\n        u = -u\n        print(u + 1, v + 1)\nelse:\n    print('wut')", "n = int(input())\nA = list(map(int, input().split()))\nres = []\nfor i in range(n):\n    curr = []\n    for j in range(i, n):\n        if A[i] > A[j]:\n            curr.append([A[j], j])\n    curr.sort()\n    curr.reverse()\n    for inw in curr:\n        res.append([i, inw[1]])\nprint(len(res))\nfor inw in res:\n    print(inw[0] + 1, inw[1] + 1)", "from heapq import *\nimport sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    ai = [(a, i) for (i, a) in enumerate(aa)]\n    ai.sort()\n    for (na, (a, i)) in enumerate(ai):\n        aa[i] = na\n    ans = []\n    for i in range(n - 1, 0, -1):\n        hp = []\n        for j in range(i - 1, -1, -1):\n            if aa[j] > aa[i]:\n                heappush(hp, (aa[j], j))\n        while hp:\n            (a, j) = heappop(hp)\n            aa[j] = aa[i]\n            aa[i] = a\n            ans.append((j, i))\n    print(len(ans))\n    for (i, j) in ans:\n        print(i + 1, j + 1)\nn = II()\naa = LI()\nsolve()"]