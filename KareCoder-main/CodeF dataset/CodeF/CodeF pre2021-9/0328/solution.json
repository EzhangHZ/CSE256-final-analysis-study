["import sys\npin = sys.stdin.readline\nfor T in range(int(pin())):\n    (N, U, V) = map(int, pin().split())\n    A = [*map(int, pin().split())]\n    mx = 0\n    for n in range(1, N):\n        mx = max(abs(A[n] - A[n - 1]), mx)\n    if mx > 1:\n        print(0)\n    elif mx == 1:\n        print(min(U, V))\n    elif mx == 0:\n        print([2 * V, U + V][U < V])", "import sys\n\ndef solve():\n    (n, u, v) = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n    a = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n    res = min(u + v, v * 2)\n    for (x, y) in zip(a, a[1:]):\n        if x > y:\n            (x, y) = (y, x)\n        if x + 2 <= y:\n            res = 0\n            break\n        elif x + 1 == y:\n            res = min(u, v)\n    print(res)\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    solve()", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nT = 1\nN = 10000\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, u, v) = list(map(int, stdin.readline().rstrip().split()))\n    a = list(map(int, stdin.readline().rstrip().split()))\n    ans = 0\n    isOk = False\n    if a.count(a[0]) == n:\n        ans += min(u + v, 2 * v)\n    else:\n        ans += min(u, v)\n    for i in range(n - 1):\n        if abs(a[i + 1] - a[i]) >= 2:\n            isOk = True\n            break\n    if isOk:\n        print(0)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, u, v) = input().split()\n    n = int(n)\n    u = int(u)\n    v = int(v)\n    a = list(map(int, input().split()))\n    val = a[0]\n    c = 0\n    for i in range(1, n):\n        if a[i] != val:\n            c = 1\n    if c == 0:\n        print(v + min(v, u))\n    else:\n        b = 0\n        for i in range(n - 1):\n            if abs(a[i + 1] - a[i]) > 1:\n                b = 1\n                print(0)\n                break\n        if b == 0:\n            if u > v:\n                print(v)\n            else:\n                print(u)", "from math import sqrt\nimport operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(n, v, h, a_seq):\n    cur_a = a_seq[0]\n    have_shift = False\n    for i in range(1, len(a_seq)):\n        val = abs(a_seq[i - 1] - a_seq[i])\n        if val > 1:\n            return 0\n        if val == 1:\n            have_shift = True\n    if have_shift:\n        return min(h, v)\n    else:\n        return min(h + h, h + v)\n\ndef main():\n    cnt = read_one_int()\n    for _ in range(cnt):\n        (n, u, v) = read_list_of_ints()\n        a_seq = read_list_of_ints()\n        res = check_seq(n, u, v, a_seq)\n        print(res)\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor tests in range(t):\n    (n, u, v) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if len(set(A)) == 1:\n        print(min(u + v, 2 * v))\n        continue\n    for i in range(1, n):\n        if abs(A[i] - A[i - 1]) >= 2:\n            print(0)\n            break\n    else:\n        print(min(u, v))", "import sys\nimport math\nMOD = 1000000007\n\ndef solve():\n    (n, u, v) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = math.inf\n    for i in range(1, n):\n        if abs(a[i] - a[i - 1]) >= 2:\n            ans = 0\n        if abs(a[i] - a[i - 1]) == 1:\n            ans = min(ans, min(u, v))\n        if a[i] == a[i - 1]:\n            ans = min(ans, v + min(u, v))\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def main():\n    num_cases = int(input())\n    for case_num in range(1, num_cases + 1):\n        solve(case_num)\n\ndef solve(case_num):\n    (n, u, v) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    if len(set(A)) == 1:\n        print(min(v + v, v + u))\n    elif any((abs(x - y) > 1 for (x, y) in zip(A[1:], A[:-1]))):\n        print(0)\n    else:\n        print(min(v, u))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, u, v) = map(int, input().split())\n        a = list(map(int, input().split()))\n        th = 0\n        for i in range(1, n):\n            if abs(a[i] - a[i - 1]) > 1:\n                th = 2\n                break\n            elif abs(a[i] - a[i - 1]) == 1:\n                th = 1\n        if th == 2:\n            print(0)\n        elif th == 1:\n            print(min(u, v))\n        else:\n            print(min(v + v, u + v))\nmain()", "def solve(arr, u, v, ans):\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, abs(arr[i] - arr[i + 1]))\n    n = len(arr)\n    if max_diff == 0:\n        if v <= u:\n            total = 2 * v\n        else:\n            total = u + v\n    elif max_diff == 1:\n        total = min(u, v)\n    else:\n        total = 0\n    ans.append(str(total))\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (n, u, v) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        solve(arr, u, v, ans)\n    print('\\n'.join(ans))\nmain()", "for tc in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(len(a) - 1):\n        if abs(a[i + 1] - a[i]) > 1:\n            print(0)\n            break\n    else:\n        if len(set(a)) == 1:\n            print(v + min(u, v))\n        else:\n            print(min(u, v))", "def main():\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if min(arr) == max(arr):\n        print(v + min(v, u))\n        return\n    res = 0\n    b = True\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) > 1:\n            b = False\n            break\n    if b:\n        print(min(v, u))\n        return\n    print(res)\nfor i in range(int(input())):\n    main()", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, u, v, a):\n    if len(set(a)) == 1:\n        print(min(u + v, 2 * v))\n        return\n    for r in range(n - 1):\n        if abs(a[r] - a[r + 1]) >= 2:\n            print(0)\n            return\n    print(min(u, v))\nT = int(input())\nfor t in range(T):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    solution(n, u, v, a)", "def main():\n    t = int(input())\n    for i in range(t):\n        print(solve())\n\ndef solve():\n    (n, u, v) = map(int, input().split())\n    a_array = list(map(int, input().split()))\n    ans = min(u + v, 2 * v)\n    for i in range(1, n):\n        diff = abs(a_array[i] - a_array[i - 1])\n        if diff == 1:\n            ans = min(u, v, ans)\n        elif diff > 1:\n            ans = 0\n    return ans\nmain()", "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    (n, u, v) = map(int, sys.stdin.readline().split())\n    obstacles = list(map(int, sys.stdin.readline().split()))\n    sub = -1\n    for i in range(n - 1):\n        k = abs(obstacles[i + 1] - obstacles[i])\n        if k > 1:\n            sub = 2\n            break\n        sub = max(sub, k)\n    if sub == 1:\n        print(min(v, u))\n    elif sub == 0:\n        print(min(2 * v, v + u))\n    else:\n        print(0)", "import sys\n\ndef calculate(seq, u, v):\n    prev = None\n    num = []\n    counter = 0\n    for i in seq:\n        if prev:\n            if abs(prev - i) >= 2:\n                return 0\n            elif abs(prev - i) == 1:\n                counter = 1\n        prev = i\n    if counter == 0:\n        return min(u + v, 2 * v)\n    else:\n        return min(u, v)\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, u, v) = list(map(int, sys.stdin.readline().split()))\n    obstacles = [int(i.strip()) for i in sys.stdin.readline().split()]\n    print(calculate(obstacles, u, v))", "def answer(n, u, v, ary):\n    min_price = max(2 * v, u + v)\n    for i in range(len(ary) - 1):\n        if abs(ary[i + 1] - ary[i]) >= 2:\n            min_price = 0\n            return min_price\n        elif abs(ary[i + 1] - ary[i]) == 1:\n            price = min(u, v)\n            if price < min_price:\n                min_price = price\n        else:\n            price = min(2 * v, u + v)\n            if price < min_price:\n                min_price = price\n    return min_price\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    u = [0] * t\n    v = [0] * t\n    ary = [0] * t\n    for j in range(t):\n        (n[j], u[j], v[j]) = [int(i) for i in input().split()]\n        ary[j] = [int(i) for i in input().split()]\n    for j in range(t):\n        print(answer(n[j], u[j], v[j], ary[j]))\nmain()", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    obstacle = list(map(int, input().split()))\n    cost = 0\n    diff = 0\n    for i in range(n - 1):\n        if abs(obstacle[i + 1] - obstacle[i]) > diff:\n            diff = abs(obstacle[i + 1] - obstacle[i])\n    if diff == 0:\n        print(min(2 * v, u + v))\n    elif diff == 1:\n        print(min(u, v))\n    else:\n        print(0)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, u, v) = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    if min(a) == max(a):\n        res = min(v + u, v + v)\n    else:\n        res = min(u, v)\n        for (ai, ai_plus_1) in zip(a[:-1], a[1:]):\n            if abs(ai - ai_plus_1) > 1:\n                res = 0\n    print(res)", "for _ in range(int(input())):\n    (n, u, v) = (int(x) for x in input().split())\n    a = [int(x) for x in input().split()]\n    count = v + min(u, v)\n    for i in range(1, n):\n        if abs(a[i - 1] - a[i]) > 1:\n            count = 0\n            break\n        elif abs(a[i - 1] - a[i]) == 1:\n            count = min(v, u)\n    print(count)", "def find_case(a):\n    p = a[0]\n    f = 2\n    for x in a[1:]:\n        if x > p + 1 or x < p - 1:\n            return 0\n        if not x == p:\n            f = 1\n        p = x\n    return f\nt = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    case = 0\n    case = find_case(a)\n    if case == 0:\n        print(0)\n    elif case == 1:\n        print(min(u, v))\n    else:\n        print(min(u + v, v + v))", "p = lambda : map(int, input().split())\nT = int(input())\nfor _ in range(T):\n    (N, U, V) = p()\n    a = list(p())\n    d = [abs(a[i] - a[i - 1]) for i in range(1, N)]\n    if max(d) > 1:\n        print(0)\n    elif max(d) == 1:\n        print(min(U, V))\n    else:\n        print(min(U, V) + V)", "list1 = []\nfor i in range(int(input())):\n    (n, u, v) = input().split()\n    p = []\n    for x in input().split():\n        p.append(int(x))\n    t = 0\n    for j in range(0, int(n) - 1):\n        k = abs(p[j] - p[j + 1])\n        if k > 1:\n            t = 2\n            break\n        elif k == 1 and t < 1:\n            t = 1\n    if t == 2:\n        list1.append(0)\n    elif t == 1:\n        list1.append(min(int(v), int(u)))\n    else:\n        list1.append(min(int(v), int(u)) + int(v))\nprint(*list1, sep='\\n')", "import sys\ninput = sys.stdin.readline\n\ndef read_number():\n    return int(input())\n\ndef read_list():\n    return list(map(int, input().split()))\n\ndef read_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_separated_numbers():\n    return map(int, input().split())\nt = read_number()\ncol = 10 ** 6 + 1\nfor i in range(t):\n    input_line = read_list()\n    (n, u, v) = (input_line[0], input_line[1], input_line[2])\n    a = read_list()\n    cost = 0\n    new_a = [abs(a[j + 1] - a[j]) for j in range(len(a) - 1)]\n    max_diff = max(new_a)\n    if max_diff > 1:\n        print(cost)\n        continue\n    if max_diff == 1:\n        cost = min(u, v)\n        print(cost)\n        continue\n    if max_diff == 0:\n        cost = min(u + v, 2 * v)\n        print(cost)\n        continue", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, u, v) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        cost = -1\n        prev = a[0]\n        for a_i in a:\n            if a_i != prev:\n                if a_i - prev > 1 or a_i - prev < -1:\n                    cost = 0\n                    break\n                else:\n                    cost = min(u, v)\n            prev = a_i\n        if cost == -1:\n            cost = min(u + v, 2 * v)\n        print(cost)\nmain()", "for _ in range(int(input())):\n    (n, u, v) = input().split()\n    (n, u, v) = (int(n), int(u), int(v))\n    obs = list(map(int, input().split()))\n    res = -1\n    for i in range(n - 1):\n        if abs(obs[i + 1] - obs[i]) >= 2:\n            res = 0\n            break\n    if min(obs) == max(obs):\n        print(min(u + v, 2 * v))\n    elif res == 0:\n        print(0)\n    else:\n        print(min(u, v))", "t = int(input())\nfor i in range(t):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    new = []\n    for i in range(n - 1):\n        new.append(abs(l[i] - l[i + 1]))\n    ans = max(new)\n    ind = new.index(ans)\n    sol = max(l[ind], l[ind + 1])\n    if ans > 1:\n        print(0)\n    elif ans == 1 and sol != 10 ** 6 + 1:\n        print(min(u, v))\n    else:\n        print(min(u + v, v + v))", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ceil(num, denom):\n    return (num + denom - 1) // denom\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if len(set(arr)) == 1:\n        print(v + min(u, v))\n    else:\n        flag = True\n        for i in range(n - 1):\n            if abs(arr[i] - arr[i + 1]) > 1:\n                flag = False\n        if flag:\n            print(min(u, v))\n        else:\n            print(0)", "t = int(input())\nfor i in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    l2 = [int(x) for x in input().split()]\n    n = l1[0]\n    u = l1[1]\n    v = l1[2]\n    last = l2[0]\n    m = True\n    for j in range(1, n):\n        if l2[j] != last:\n            m = False\n            break\n    if m == True:\n        print(min(u + v, 2 * v))\n    else:\n        last = l2[0]\n        m = False\n        for j in range(1, n):\n            if abs(l2[j] - last) > 1:\n                m = True\n            last = l2[j]\n        if m == True:\n            print(0)\n        else:\n            print(min(u, v))", "test = int(input())\nfor t in range(test):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 1\n    e = 0\n    c = a[0]\n    for i in a:\n        if i != c:\n            l = 0\n        if i < c - 1 or i > c + 1:\n            e = 1\n        c = i\n    if e == 1:\n        print(0)\n    elif l == 0:\n        print(min(u, v))\n    else:\n        print(v + min(u, v))", "import sys\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    t = read_int()\n    for _ in range(t):\n        (n, u, v) = read_ints()\n        a = read_int_list()\n        flag = False\n        for i in range(n - 1):\n            if abs(a[i + 1] - a[i]) > 1:\n                flag = True\n        if min(a) == max(a):\n            print(min(v + u, v * 2))\n        elif flag:\n            print(0)\n        else:\n            print(min(u, v))\nMain()", "def min_cost():\n    (n, u, v) = [int(i) for i in input().split()]\n    obstacles = input().split()\n    obstacles = [int(i) for i in obstacles]\n    if len(obstacles) == obstacles.count(obstacles[0]):\n        if u < v:\n            return v + u\n        else:\n            return 2 * v\n    disp1 = False\n    for i in range(len(obstacles)):\n        if i == 0:\n            if abs(obstacles[i] - obstacles[i + 1]) == 1:\n                disp1 = True\n            elif abs(obstacles[i] - obstacles[i + 1]) > 1:\n                return 0\n        elif i == n - 1:\n            if abs(obstacles[i] - obstacles[i - 1]) == 1:\n                disp1 = True\n            elif abs(obstacles[i] - obstacles[i - 1]) > 1:\n                return 0\n        else:\n            if abs(obstacles[i] - obstacles[i - 1]) == 1 or abs(obstacles[i] - obstacles[i + 1]) == 1:\n                disp1 = True\n            if abs(obstacles[i] - obstacles[i - 1]) > 1 or abs(obstacles[i] - obstacles[i + 1]) > 1:\n                return 0\n    return min(u, v)\nnum = int(input())\nfor _ in range(num):\n    print(min_cost())", "itype = int\n\ndef inp():\n    return int(input())\n\ndef tinput():\n    return list(map(itype, input().split(' ')))\nfor tc in range(int(input())):\n    (n, u, v) = tinput()\n    a = tinput()\n    m = min(u, v)\n    ans = v + m\n    for i in range(len(a) - 1):\n        if a[i] != a[i + 1]:\n            if abs(a[i] - a[i + 1]) > 1:\n                ans = 0\n                break\n            else:\n                ans = m\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    c = 0\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) >= 2:\n            c = 2\n            break\n        if a[i] != a[i + 1]:\n            c = 1\n    if c == 0:\n        print(v + min(u, v))\n    elif c == 1:\n        print(min(u, v))\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(n - 1):\n        if abs(l[i] - l[i + 1]) > max_diff:\n            max_diff = abs(l[i] - l[i + 1])\n    if max_diff >= 2:\n        print(0)\n    elif max_diff == 1:\n        print(min(u, v))\n    else:\n        print(v + min(u, v))", "def ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef nr():\n    return nrs()[0]\n\ndef nrs():\n    return [int(item) for item in input().split()]\n\ndef f(n, u, v, a):\n    ds = [abs(a[i] - a[i + 1]) for i in range(n - 1)]\n    m = max(ds)\n    if m >= 2:\n        return 0\n    return min(u, v) + [v, 0][m]\nfor i in range(nr()):\n    (n, u, v) = nrs()\n    a = nrs()\n    print(f(n, u, v, a))", "import sys\nfor test in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = sys.maxsize\n    if n == 2:\n        if abs(arr[0] - arr[1]) == 0:\n            ans = min(u + v, 2 * v)\n        elif abs(arr[0] - arr[1]) == 1:\n            ans = min(u, v)\n        else:\n            ans = 0\n    else:\n        f = False\n        isOne = False\n        for i in range(1, n):\n            if abs(arr[i] - arr[i - 1]) > 1:\n                f = True\n                break\n            if abs(arr[i] - arr[i - 1]) == 1:\n                isOne = True\n        if f:\n            ans = 0\n        elif isOne:\n            ans = min(u, v)\n        else:\n            ans = min(u + v, 2 * v)\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ok = 1\n    for i in range(n - 1):\n        if abs(arr[i + 1] - arr[i]) >= 2:\n            ok = 0\n            break\n    if ok == 0:\n        print('0')\n    elif len(set(arr)) == 1:\n        print(min(u + v, v * 2))\n    else:\n        print(min(u, v))", "t = int(input())\nfor i in range(0, t):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = []\n    for i in range(1, len(l)):\n        p.append(abs(l[i] - l[i - 1]))\n    m = max(p)\n    p = []\n    if m == 0:\n        print(v + min([u, v]))\n    elif m == 1:\n        print(min([u, v]))\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    if min(a) == max(a):\n        print(min(2 * v, u + v))\n    else:\n        for j in range(n - 1):\n            if abs(a[j + 1] - a[j]) > 1:\n                c = c + 1\n                break\n        if c > 0:\n            print(0)\n        else:\n            print(min(u, v))", "def minimalCost(n, u, v, a):\n    f = 0\n    for x in range(n - 1):\n        if abs(a[x] - a[x + 1]) >= 2:\n            return 0\n        elif abs(a[x] - a[x + 1]) == 0:\n            f += 1\n        else:\n            continue\n    if f == n - 1:\n        return v + min(u, v)\n    else:\n        return min(u, v)\nt = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(minimalCost(n, u, v, a))", "t = int(input())\nfor i in range(t):\n    (n, u, v) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    c = 0\n    for j in range(1, n):\n        if lst[j] - lst[j - 1] != 0:\n            c += 1\n            break\n    if c == 0:\n        print(min(u, v) + v)\n    else:\n        c = 0\n        for j in range(1, n):\n            if abs(lst[j] - lst[j - 1]) > 1:\n                c += 1\n                break\n        if c > 0:\n            print(0)\n        else:\n            print(min(u, v))", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    (n, u, v) = I()\n    bb = list(I())\n    co = min(u, v)\n    for i in range(1, n):\n        if abs(bb[i] - bb[i - 1]) > 1:\n            co = 0\n            break\n    if co != 0 and len(set(bb)) == 1:\n        co = min(u + v, 2 * v)\n    print(co)", "t = int(input())\nfor j in range(t):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 10 ** 18\n    for k in range(n - 1):\n        if abs(a[k + 1] - a[k]) > 1:\n            ans = 0\n        elif abs(a[k + 1] - a[k]) == 0:\n            ans = min(ans, v + min(u, v))\n        else:\n            ans = min(ans, min(u, v))\n    print(ans)", "test_case = int(input())\nfor _ in range(test_case):\n    (n, y, x) = map(int, input().split())\n    obstacles = list(map(int, input().split()))\n    diagonal_vertical = False\n    vertical = False\n    go_ahead = True\n    for i in range(1, n):\n        if abs(obstacles[i] - obstacles[i - 1]) > 1:\n            print(0)\n            go_ahead = False\n            break\n        elif diagonal_vertical == False:\n            if abs(obstacles[i] - obstacles[i - 1]) == 1:\n                diagonal_vertical = True\n        elif vertical == False:\n            if abs(obstacles[i] - obstacles[i - 1]) == 0:\n                vertical = True\n    if go_ahead:\n        if diagonal_vertical:\n            print(min(x, y))\n        else:\n            print(x + min(x, y))", "import math\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        (n, u, v) = map(int, input().split())\n        a = list(map(int, input().split()))\n        answer = math.inf\n        for i in range(0, n - 1):\n            difference = abs(a[i] - a[i + 1])\n            if difference >= 2:\n                answer = min(answer, 0)\n            elif difference >= 1:\n                answer = min(answer, min(u, v))\n            else:\n                answer = min(answer, v + min(u, v))\n        print(answer)\nsolve()", "import sys\ninput = sys.stdin.readline\nmv = 10 ** 6 + 1\nT = int(input())\nfor _ in range(T):\n    (n, u, v) = map(int, input().split())\n    A = list(map(int, input().split()))\n    flag = float('inf')\n    for i in range(1, n):\n        if A[i] == A[i - 1]:\n            flag = min(flag, u + v, 2 * v)\n        elif A[i] == A[i - 1] + 1:\n            flag = min(flag, u, v)\n        elif A[i] == A[i - 1] - 1:\n            flag = min(flag, u, v)\n        else:\n            flag = 0\n    print(flag)", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = range(n)\n    a = list(map(int, input().split()))\n    d = max((abs(a[i] - a[i - 1]) for i in range(1, n)))\n    if d == 0:\n        print(min(2 * v, u + v))\n    elif d == 1:\n        print(min(u, v))\n    else:\n        print('0')", "for _ in range(int(input())):\n    nuv = list(map(int, input().split()))\n    n = nuv[0]\n    u = nuv[1]\n    v = nuv[2]\n    ai = list(map(int, input().split()))\n    arr = [abs(ai[i + 1] - ai[i]) for i in range(n - 1)]\n    fltr_arr = list(filter(lambda x: x < 2, arr))\n    fltr_arr1 = list(filter(lambda x: x < 1, arr))\n    if len(arr) == len(fltr_arr):\n        if v <= u and len(fltr_arr1) == len(arr):\n            print(2 * v)\n        if v > u and len(fltr_arr1) == len(arr):\n            print(u + v)\n        if len(fltr_arr1) != len(arr):\n            print(min(u, v))\n    else:\n        print(0)", "def solve(A, n, u, v):\n    maxDiff = 0\n    for i in range(n - 1):\n        maxDiff = max(abs(A[i + 1] - A[i]), maxDiff)\n    if maxDiff >= 2:\n        return 0\n    if maxDiff == 1:\n        return min(u, v)\n    return min(u + v, 2 * v)\nt = int(input())\nfor tc in range(t):\n    (n, u, v) = map(int, input().split())\n    A = list(map(int, input().split()))\n    result = solve(A, n, u, v)\n    print(result)", "import math\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\nglobal_ans = []\n\ndef p(a):\n    global_ans.append(a)\n\ndef solve():\n    (n, u, v) = input_list_int()\n    a = input_list_int()\n    ans = u + v\n    for i in range(n - 1):\n        t = abs(a[i] - a[i + 1])\n        if t > 1:\n            p(0)\n            return\n        elif t == 0:\n            ans = min(ans, v + v, v + u)\n        else:\n            ans = min(ans, v, u)\n    p(ans)\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "t = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    arr = [int(j) for j in input().split()]\n    if arr.count(arr[0]) == n:\n        ans = min(2 * v, u + v)\n    else:\n        ans = min(u, v)\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) >= 2:\n            ans = 0\n    print(ans)", "q = int(input())\nwhile q:\n    (n, u, v) = input().split()\n    n = int(n)\n    u = int(u)\n    v = int(v)\n    a = input().split()\n    a = [int(x) for x in a]\n    check = False\n    for i in range(1, n):\n        if abs(a[i] - a[i - 1]) > 1:\n            check = True\n            break\n    if check:\n        print(0)\n    else:\n        check2 = False\n        for i in range(1, n):\n            if a[i] != a[i - 1]:\n                check2 = True\n                break\n        if not check2:\n            print(min(u + v, 2 * v))\n        elif u < v:\n            print(u)\n        else:\n            print(v)\n    q -= 1", "tcs = int(input())\nfor tc in range(tcs):\n    (n, u, v) = [int(x) for x in input().split()]\n    obstacles = [int(x) for x in input().split()]\n    prevObs = obstacles[0]\n    bestDiff = -1\n    for (i, obs) in enumerate(obstacles[1:]):\n        diff = abs(prevObs - obs)\n        bestDiff = max(diff, bestDiff)\n        if diff > 1:\n            ans = 0\n            break\n        prevObs = obs\n    if bestDiff == 1:\n        ans = min(v, u)\n    if bestDiff == 0:\n        ans = min(v + u, v * 2)\n    print(ans)", "for _ in range(int(input())):\n    (n, v, u) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if len(set(a)) == 1:\n        print(min(2 * u, u + v))\n    else:\n        flag = False\n        for i in range(1, n):\n            if abs(a[i] - a[i - 1]) > 1:\n                flag = True\n                break\n        if flag:\n            print(0)\n        else:\n            print(min(u, v))", "for _ in range(int(input())):\n    a = [int(x) for x in input().split()]\n    n = a[0]\n    u = a[1]\n    v = a[2]\n    coords = [int(x) for x in input().split()]\n    answer = 0\n    solved = False\n    triangle = False\n    for i in range(0, len(coords) - 1):\n        if abs(coords[i] - coords[i + 1]) > 1:\n            solved = True\n            answer = 0\n        elif abs(coords[i] - coords[i + 1]) == 1:\n            triangle = True\n    if solved:\n        print(0)\n    else:\n        if triangle:\n            answer = min(u, v)\n        else:\n            answer = min(u + v, 2 * v)\n        print(answer)", "def help(n, j):\n    count = 0\n    for a in range(n):\n        if A[a] == j:\n            count += 1\n        else:\n            break\n    return count\n\ndef solve(A, n, v, h):\n    for i in range(n - 1):\n        if A[i + 1] == A[i] or A[i + 1] == A[i] + 1 or A[i + 1] == A[i] - 1:\n            continue\n        else:\n            return 0\n    if help(n, A[0]) == n:\n        return min(v + h, h + h)\n    else:\n        return min(v, h)\nx = int(input())\nfor _ in range(x):\n    X = list(map(int, input().split()))\n    (n, v, h) = (X[0], X[1], X[2])\n    A = list(map(int, input().split()))\n    print(solve(A, n, v, h))", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    r = list(map(int, input().split()))\n    ans = 0\n    val = -1\n    for i in range(1, n):\n        d = abs(r[i] - r[i - 1])\n        val = max(val, d)\n    if val == 0:\n        print(min(u + v, v + v))\n    elif val == 1:\n        print(min(u, v))\n    else:\n        print(0)", "def fun(ls, u, v):\n    if len(set(ls)) == 1:\n        print(v + min(v, u))\n        return\n    prv = ls[0]\n    ans = 0\n    for i in ls[1:]:\n        ans = max(ans, abs(i - prv))\n        prv = i\n    if ans >= 2:\n        print(0)\n    else:\n        print(min(v, u))\nT = int(input())\nfor i in range(T):\n    (n, u, v) = list(map(int, input().split()))\n    ls = list(map(int, input().split()))\n    fun(ls, u, v)", "t = int(input())\nfor _ in range(t):\n    ans = 0\n    ok = False\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(len(a) - 1):\n        if abs(a[i] - a[i + 1]) > 1:\n            ok = True\n            break\n    if ok:\n        print(0)\n    else:\n        ok1 = True\n        for i in range(len(a) - 1):\n            ok1 &= a[i] == a[i + 1]\n        if ok1:\n            print(min(u + v, 2 * v))\n        else:\n            print(min(u, v))", "t = int(input())\nwhile t > 0:\n    ans = 0\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(0, len(l) - 1):\n        diff = abs(l[j + 1] - l[j])\n        if diff > ans:\n            ans = diff\n    if ans > 1:\n        print(0)\n    if ans == 1:\n        print(min(u, v))\n    if ans == 0:\n        print(min(v + v, u + v))\n    t = t - 1", "for _ in range(int(input())):\n    (n, v, u) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    cost = min(u + v, u + u)\n    prev = a[0]\n    for i in range(1, n):\n        if abs(a[i] - prev) > 1:\n            cost = 0\n            break\n        if abs(a[i] - prev) == 1:\n            cost = min(u, v)\n        prev = a[i]\n    print(cost)", "x = int(input())\nwhile x > 0:\n    x -= 1\n    final_cost = 0\n    (n, u, v) = map(int, input().split())\n    if u < v:\n        minimum = u\n    else:\n        minimum = v\n    obstacles = list(map(int, input().split()))\n    countExactly0 = 0\n    countMore1 = 0\n    for q in range(1, n):\n        dist = abs(obstacles[q] - obstacles[q - 1])\n        if dist > 1:\n            countMore1 += 1\n        elif dist == 0:\n            countExactly0 += 1\n    if countExactly0 == n - 1:\n        final_cost = v + minimum\n    elif countMore1 > 0:\n        final_cost = 0\n    else:\n        final_cost = minimum\n    print(final_cost)", "import os, sys, time, collections, math, pprint, itertools as it, operator as op, bisect as bs, functools as fn\n(maxx, localsys, mod) = (float('inf'), 0, int(1000000000.0 + 7))\nnCr = lambda n, r: reduce(mul, range(n - r + 1, n + 1), 1) // factorial(r)\nceil = lambda n, x: (n + x - 1) // x\n(osi, oso) = ('/home/priyanshu/Documents/cp/input.txt', '/home/priyanshu/Documents/cp/output.txt')\nif os.path.exists(osi):\n    sys.stdin = open(osi, 'r')\n    sys.stdout = open(oso, 'w')\ninput = sys.stdin.readline\n\ndef maps():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, u, v) = maps()\n    a = list(maps())\n    b = sorted([abs(a[i] - a[i - 1]) for i in range(1, n)])\n    print(0 if b[-1] > 1 else min(u, v) if 1 in b else v + min(u, v))", "t = int(input())\nfor test in range(t):\n    y = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    allZero = True\n    allOne = True\n    for i in range(y[0] - 1):\n        if r[i] - r[i + 1] != 0:\n            allZero = False\n            if r[i] - r[i + 1] != 1 and r[i] - r[i + 1] != -1:\n                allOne = False\n                break\n    if allOne == False:\n        print(0)\n    elif allZero == False:\n        print(min(y[1], y[2]))\n    else:\n        print(y[2] + min(y[1], y[2]))", "def solve(a, u, v):\n    if all((x == a[0] for x in a)):\n        return v + min(u, v)\n    p = a[0]\n    for i in a:\n        if abs(i - p) > 1:\n            return 0\n        p = i\n    return min(u, v)\nt = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, u, v))", "t = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = min(v + u, 2 * v)\n    for i in range(1, n):\n        if abs(a[i] - a[i - 1]) >= 2:\n            res = 0\n        elif abs(a[i] - a[i - 1]) == 1:\n            res = min(res, min(u, v))\n    print(res)", "for _ in range(int(input())):\n    (n, u, v) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(1, n):\n        max_diff = max(max_diff, abs(a[i] - a[i - 1]))\n    if max_diff == 0:\n        print(min(v + u, v + v))\n    elif max_diff == 1:\n        print(min(u, v))\n    else:\n        print(0)", "for _ in range(int(input())):\n    (n, u, v) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    delta = 0\n    for i in range(1, len(a)):\n        delta = max(delta, abs(a[i] - a[i - 1]))\n    if delta > 1:\n        print(0)\n    elif delta == 0:\n        print(v + min(u, v))\n    else:\n        print(min(u, v))", "for i in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    if min(a) == max(a):\n        print(min(2 * v, v + u))\n    else:\n        c = 0\n        for j in range(n - 1):\n            if abs(a[j + 1] - a[j]) > 1:\n                c = c + 1\n                break\n        if c > 0:\n            print('0')\n        else:\n            print(min(u, v))", "T = int(input())\nfor _ in range(T):\n    (n, u, v) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    can_pass_through = False\n    all_in_one_col = True\n    last = a[0]\n    for i in range(1, n):\n        cur = a[i]\n        if last != cur:\n            all_in_one_col = False\n        if abs(last - cur) > 1:\n            can_pass_through = True\n        last = cur\n    if can_pass_through:\n        print(0)\n    elif all_in_one_col:\n        print(min(2 * v, u + v))\n    else:\n        print(min(u, v))", "t = int(input())\nfor test in range(t):\n    (n, u, v) = list(map(int, input().split()))\n    op = list(map(int, input().split()))\n    distance = [0] * n\n    price = 0\n    can_reach_row = True\n    max_distance = 0\n    found = False\n    for i in range(1, n):\n        if op[i] == 0:\n            can_reach_row = False\n        distance[i] = abs(op[i] - op[i - 1])\n        if distance[i] >= max_distance:\n            max_distance = distance[i]\n        if distance[i] >= 2:\n            if can_reach_row:\n                print(price)\n                found = True\n                break\n    if found:\n        continue\n    if max_distance == 1:\n        print(min(u, v))\n    else:\n        print(min(2 * v, u + v))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 4000000000.0\n    for i in range(1, len(a)):\n        if a[i] + 1 < a[i - 1] or a[i - 1] + 1 < a[i]:\n            return 0\n        if a[i - 1] < a[i] or a[i] < a[i - 1]:\n            res = min(res, min(v, u))\n        if a[i] == a[i - 1]:\n            res = min(res, v + min(v, u))\n    return res\nt = int(input())\nr = [0] * t\nfor z in range(t):\n    r[z] = str(solve())\nprint('\\n'.join(r))", "kk = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(int(input())):\n    (n, u, w) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if A.count(A[0]) == n:\n        print(min(u + w, 2 * w))\n    else:\n        fl = 0\n        for i in range(n - 1):\n            if abs(A[i] - A[i + 1]) > 1:\n                fl = 1\n                break\n        if fl == 1:\n            print(0)\n        else:\n            print(min(u, w))", "def diff(a, b):\n    if a > b:\n        return a - b\n    else:\n        return b - a\nfor _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = []\n    for i in range(0, n - 1):\n        if diff(a[i], a[i + 1]) > 1:\n            ans.append(0)\n        elif diff(a[i], a[i + 1]) == 1:\n            ans.append(min(u, v))\n        elif diff(a[i], a[i + 1]) == 0:\n            ans.append(min(v + v, u + v))\n    ans.sort()\n    print(ans[0])", "t = int(input())\nfor i in range(t):\n    (n, u, v) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    difs = {abs(arr[i + 1] - arr[i]) for i in range(n - 1)}\n    if difs == {0}:\n        print(min(u, v) + v)\n    elif difs == {1} or difs == {0, 1}:\n        print(min(u, v))\n    else:\n        print(0)", "import math\nimport sys\nfrom sys import stdout\n\nclass IO:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n    @staticmethod\n    def implode(sep, array):\n        return sep.join((str(x) for x in array))\n\ndef solve():\n    (n, u, v) = IO.list_int()\n    a = IO.list_int()\n    prev = a[0]\n    m = 0\n    for i in a:\n        m = max(m, abs(i - prev))\n        prev = i\n        if m >= 2:\n            break\n    if m == 0:\n        res = min(u + v, v + v)\n    elif m == 1:\n        res = min(u, v)\n    else:\n        res = 0\n    print(res)\nquery_count = IO.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    flag = 0\n    for i in range(n - 1):\n        if abs(l[i] - l[i + 1]) > 1:\n            flag = 2\n            break\n        if l[i] != l[n - 1]:\n            flag = 1\n    if flag == 2:\n        print(0)\n    elif flag == 1:\n        print(min(u, v))\n    else:\n        print(min(u + v, 2 * v))", "t = int(input())\nfor i in range(t):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = float('inf')\n    c = 1\n    for i in range(1, n):\n        if abs(l[i] - l[i - 1]) >= 2:\n            ans = min(0, ans)\n        if l[i] == l[0]:\n            c = c + 1\n    if c == n:\n        ans = min(ans, min(2 * v, u + v))\n    else:\n        ans = min(ans, min(u, v))\n    print(ans)", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    diff = 0\n    for i in range(n - 1):\n        if abs(arr[i + 1] - arr[i]) > diff:\n            diff = abs(arr[i + 1] - arr[i])\n        if diff >= 2:\n            break\n    if diff >= 2:\n        print(0)\n    elif diff == 1:\n        print(min(u, v))\n    else:\n        print(min(u + v, 2 * v))", "for i in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = True\n    f2 = True\n    for j in range(1, n):\n        if abs(a[j] - a[j - 1]) < 2:\n            if abs(a[j] - a[j - 1]) == 1:\n                f2 = False\n        else:\n            f = False\n    if f:\n        if f2:\n            print(v + min(u, v))\n        else:\n            print(min(u, v))\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    (n, u, v) = map(int, input().split())\n    a = []\n    a = input().split()\n    mx = 0\n    a[0] = int(a[0])\n    for i in range(1, n):\n        a[i] = int(a[i])\n        if abs(a[i] - a[i - 1]) > mx:\n            mx = abs(a[i] - a[i - 1])\n    if mx < 2:\n        if mx == 0:\n            print(v + min(u, v))\n        else:\n            print(min(u, v))\n    else:\n        print('0')", "import sys\nimport math\nimport bisect\nimport functools\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom heapq import heappush, heappop, heapify\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nnum_cases = intinp()\nfor _ in range(num_cases):\n    (n, u, v) = intarr()\n    arr = intarr()\n    c = set(arr)\n    flag = False\n    p = -1\n    for i in arr:\n        if p == -1:\n            p = i\n        else:\n            if abs(i - p) > 1:\n                flag = True\n                break\n            p = i\n    if len(c) > 1 and (not flag):\n        print(min(u, v))\n    elif flag:\n        print(0)\n    else:\n        print(min(u + v, v + v))", "for _ in range(int(input())):\n    (n, u, v) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    type1 = False\n    type2 = False\n    for i in range(n - 1):\n        dis = abs(a[i] - a[i + 1])\n        if dis == 1:\n            type1 = True\n        elif dis > 1:\n            type2 = True\n    if type2:\n        print(0)\n    elif type1:\n        print(v if v < u else u)\n    else:\n        print(2 * v if v < u else v + u)", "for t in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    m = 0\n    for i in range(n - 1):\n        x = abs(a[i] - a[i + 1])\n        if x > m:\n            m = x\n    if m == 0:\n        ans = min(2 * v, u + v)\n    elif m == 1:\n        ans = min(u, v)\n    else:\n        ans = 0\n    print(ans)", "import sys\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = sys.maxsize\n    if n == 2:\n        if abs(arr[0] - arr[1]) == 0:\n            ans = min(u + v, 2 * v)\n        elif abs(arr[0] - arr[1]) == 1:\n            ans = min(u, v)\n        else:\n            ans = 0\n    else:\n        isPossible = False\n        isOne = False\n        for i in range(1, n):\n            if abs(arr[i] - arr[i - 1]) > 1:\n                isPossible = True\n                break\n            if abs(arr[i] - arr[i - 1]) == 1:\n                isOne = True\n        if isPossible:\n            ans = 0\n        elif isOne:\n            ans = min(u, v)\n        else:\n            ans = min(u + v, 2 * v)\n    print(ans)", "import bisect\nimport math\n\ndef solve(arr, u, v):\n    all_same = all((a == arr[0] for a in arr))\n    if all_same:\n        return min(u + v, 2 * v)\n    for i in range(1, len(arr)):\n        if abs(arr[i - 1] - arr[i]) >= 2:\n            return 0\n    return min(u, v)\nq = int(input())\nfor _ in range(q):\n    (n, u, v) = (int(i) for i in input().split(' '))\n    arr = [int(i) for i in input().split(' ')]\n    print(solve(arr, u, v))", "def func(n, u, v, obstacles):\n    for i in range(n - 1):\n        if abs(obstacles[i + 1] - obstacles[i]) >= 2:\n            return 0\n    if obstacles.count(obstacles[0]) == n:\n        return min([2 * v, u + v])\n    return min([u, v])\nt = int(input())\nfor _ in range(t):\n    (n, u, v) = list(map(int, input().split()))\n    obstacles = list(map(int, input().split()))\n    res = func(n, u, v, obstacles)\n    print(res)", "for t in range(int(input())):\n    (n, u, v) = [int(k) for k in input().split()]\n    a = [int(k) for k in input().split()]\n    if max(a) == min(a):\n        print(min(u + v, 2 * v))\n        continue\n    re = a[0] - 1\n    for i in range(1, n):\n        if a[i] - re > 2:\n            re = 10 ** 6 + 1\n        if a[i] - re < 0:\n            re = 10 ** 6 + 1\n        if a[i] == re:\n            re -= 1\n        if a[i] - re == 2:\n            re += 1\n    if re == 10 ** 6 + 1:\n        print(0)\n    else:\n        print(min(u, v))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = False\n    e = True\n    for i in range(1, n):\n        if abs(l[i] - l[i - 1]) >= 2:\n            f = True\n        if l[i] != l[i - 1]:\n            e = False\n    if e == False and f == False:\n        print(min(u, v))\n    elif e == True and f == False:\n        print(min(v + v, u + v))\n    elif f:\n        print(0)", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(min(u + v, v + v))\n    else:\n        for i in range(n - 1):\n            if abs(a[i] - a[i + 1]) > 1:\n                print(0)\n                break\n        else:\n            print(min(u, v))", "for _ in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    diag = 0\n    flag = 0\n    for i in range(n - 1):\n        if a[i] <= a[i + 1] - 2 or a[i] >= a[i + 1] + 2:\n            flag = 1\n            break\n        elif a[i] == a[i + 1] + 1 or a[i] == a[i + 1] - 1:\n            diag += 1\n    if flag == 0:\n        if u <= v:\n            if diag > 0:\n                ans += u\n            else:\n                ans += v + u\n        elif u > v:\n            if diag > 0:\n                ans += v\n            else:\n                ans += v * 2\n    print(ans)", "for t in range(int(input())):\n    (n, u, v) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = 0\n    q = 1\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            q = 0\n        if abs(arr[i] - arr[i - 1]) >= 2:\n            p = 1\n    if q == 0 and p == 0:\n        print(min(u, v))\n    elif q == 1 and p == 0:\n        print(min(v + v, u + v))\n    else:\n        print(0)", "for _ in range(int(input())):\n    (N, u, v) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    Hai = False\n    mex = 0\n    for i in range(1, N):\n        if abs(A[i] - A[i - 1]) >= 2:\n            Hai = True\n            break\n        else:\n            mex = max(mex, abs(A[i] - A[i - 1]))\n    if Hai:\n        print(0)\n    elif mex == 0:\n        print(min(2 * v, u + v))\n    else:\n        print(min(u, v))", "import sys\nimport math\n\nclass DictList(dict):\n\n    def __setitem__(self, key, value):\n        try:\n            self[key].append(value)\n        except KeyError:\n            super(DictList, self).__setitem__(key, value)\n        except AttributeError:\n            super(DictList, self).__setitem__(key, [self[key], value])\n\ndef fn(n, u, v, a):\n    d = 0\n    for i in range(n - 1):\n        diff = abs(a[i + 1] - a[i])\n        if diff > d:\n            d = diff\n    if d >= 2:\n        return 0\n    if d == 1:\n        return min(u, v)\n    if d == 0:\n        return min(u + v, 2 * v)\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    u = data[l + 2]\n    v = data[l + 3]\n    a = data[l + 4:l + 4 + n]\n    l = l + 3 + n\n    print(fn(n, u, v, a))"]