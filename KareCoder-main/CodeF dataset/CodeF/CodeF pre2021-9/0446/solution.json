["for s in [*open(0)][1:]:\n    print(int((2 * int(s) - 1) ** 0.5 - 1) >> 1)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef solution(n):\n    print((int(math.sqrt(n - 1 + n)) - 1) // 2)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    solution(n)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        c = n\n        a = math.sqrt(c * 2 - 1)\n        a = math.floor(a)\n        ans = (a - 3) // 2 + 1\n        print(ans)\nmain()", "import sys\nimport math\n\ndef solve():\n    n = int(sys.stdin.readline().rstrip())\n    m = int(math.sqrt(n * 2 - 1))\n    if m % 2 == 0:\n        m -= 1\n    res = (m - 3) // 2 + 1\n    print(res)\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    solve()", "import math\nanswers = []\n\ndef solve(n):\n    req = math.floor((math.sqrt(2 * n - 1) - 1) // 2)\n    answers.append(req)\nT = int(input())\nwhile T:\n    n = int(input())\n    solve(n)\n    T -= 1\nfor ans in answers:\n    print(ans)", "import sys\nfrom math import sqrt\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = int(sqrt(2 * n - 1))\n        print((a - 1) // 2)\nMain()", "import sys\nimport math\n\ndef fn(n):\n    if n < 5:\n        return 0\n    k = int(math.sqrt(2 * n - 1))\n    a = 3\n    c = 0\n    ans = math.ceil(k / 2) - 1\n    return ans\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + i]\n    print(fn(n))", "import sys\nimport math\n\ndef fn(n, k):\n    if n % 2 == 0:\n        ans = k % n\n        if ans == 0:\n            ans = n\n        return ans\n    if k == n:\n        return 2\n    if k < (n + 1) / 2:\n        return 0\n    return -1\n    return (b + 1, t)\n\ndef f2(n):\n    t = 0\n    c = int(math.sqrt(n + n - 1))\n    a = 3\n    t = math.ceil(c / 2) - 1\n    return t\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + l]\n    l = l + 1\n    print(f2(n))", "import math as m\nt = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    a = int(m.sqrt((n - 1) / 2))\n    if a * (a + 1) <= (n - 1) / 2:\n        res.append(a)\n    else:\n        res.append(a - 1)\nfor i in res:\n    print(i)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    c = 0\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            c += 1\n    return c\nimport math\n\ndef CountSquares(a, b):\n    return math.floor(math.sqrt(b)) - math.ceil(math.sqrt(a)) + 1\nfor _ in range(int(input())):\n    x = int(input())\n    d = math.sqrt(2 * x - 1)\n    e = (d + 1) // 2\n    print(int(e) - 1)", "import math\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        k = math.floor(math.sqrt(2 * n - 1))\n        ans = (k - 1) // 2\n        print(ans)\nmain()", "import sys\nfrom collections import Counter, defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef f(n):\n    n = int((2 * n - 1) ** 0.5)\n    if n % 2 == 0:\n        n -= 1\n    return max(1 + (n - 3) // 2, 0)\ninput = load_sys()\nfor i in range(1, len(input)):\n    n = int(input[i])\n    print(f(n))", "n = int(input())\nlst = [int(input()) for i in range(n)]\nfor el in lst:\n    if el >= 13:\n        D = 36 + 8 * (el - 5)\n        trio_amount = int((-6 + D ** 0.5) / 4) + 1\n    elif el >= 5:\n        trio_amount = 1\n    else:\n        trio_amount = 0\n    print(trio_amount)", "import math\nnum = int(input())\nquestions = []\nfor i in range(num):\n    questions.append(int(input()))\nfor n in questions:\n    top = math.floor(math.sqrt(2 * n - 1))\n    ans = (top - 3) // 2 + 1\n    print(ans)", "k = int(input())\ns = str()\nfor i in range(k):\n    n = int(input())\n    if n < 5:\n        s = s + '0' + '\\n'\n    else:\n        a = int((2 * n - 1) ** (1 / 2))\n        if a % 2 == 0:\n            a = a - 1\n            a = int(a / 2)\n        elif a % 2 != 0:\n            a = int(a / 2)\n        s = s + str(a) + '\\n'\nprint(s)", "import sys\nimport math\nimport bisect\nfast_reader = sys.stdin.readline\nfast_writer = sys.stdout.write\n\ndef input():\n    return fast_reader().strip()\n\ndef print(*argv):\n    fast_writer(' '.join((str(i) for i in argv)))\n    fast_writer('\\n')\nimport math\nfor T in range(int(input())):\n    N = int(input())\n    a = math.sqrt(2 * N - 1)\n    print(int((a - 1) // 2))", "dep = []\nfrom math import ceil, trunc, sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    res = 0\n    res = ceil(trunc(sqrt(2 * (n - 1) + 1)) / 2 - 1)\n    dep.append(res)\nfor i in dep:\n    print(i)", "import math\n\ndef maths(n):\n    t = math.ceil((-3 + (9 - 4 * (2 - n / 2)) ** 0.5) / 2)\n    return t\n\ndef main():\n    arr = []\n    length = int(input())\n    for i in range(0, length):\n        x = int(input())\n        arr.append(x)\n    for (pos, n) in enumerate(arr):\n        t = maths(n)\n        print(t)\nmain()", "import sys\nimport math\n\ndef read_ints():\n    return [int(i) for i in sys.stdin.readline().strip().split()]\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef pyth(n):\n    r = int(math.sqrt(n / 2))\n    while 2 * (r + 1) * (r + 1) - 2 * (r + 1) + 1 <= n:\n        r += 1\n    return r - 1\nt = read_int()\nfor i in range(t):\n    n = read_int()\n    print(pyth(n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(int(math.sqrt(2 * n - 1) + 1) / 2) - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.floor(math.sqrt(2 * n - 1))\n    if a % 2 == 0:\n        a = a - 1\n    print(a >> 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(math.sqrt(2 * n - 1)) - 1 >> 1)", "import math\nLO = 'abcdefghijklmnopqrstuvwxyz'\nMod = 1000000007\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    print((int(math.sqrt(n * 2 - 1)) + 1) // 2 - 1)", "from bisect import bisect_left as bl\nimport sys\npin = sys.stdin.readline\nL = [0] * 22362\nL[0] = 1\nd = 3\ni = 1\nfor a in range(3, 44725, 2):\n    L[i] = L[i - 1] + 2 * d + 2\n    d += 4\n    i += 1\nfor T in range(int(pin())):\n    N = int(pin())\n    M = N * 2\n    print(bl(L, M) - 1)", "k = int(input())\ns = str()\nfor i in range(k):\n    n = int(input())\n    if n < 5:\n        s = s + '0' + '\\n'\n    else:\n        a = int((2 * n - 1) ** (1 / 2))\n        if a % 2 == 0:\n            a = a - 1\n        a = int(a / 2)\n        s = s + str(a) + '\\n'\nprint(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sq = int(math.sqrt(2 * n))\n    print((sq - 1) // 2)", "for _ in range(int(input())):\n    print((int((2 * int(input()) - 1) ** 0.5) - 1) // 2)", "try:\n    import math\n    test_case = int(input())\n    for i in range(test_case):\n        n = int(input())\n        ans = (int(math.sqrt(2 * n - 1)) - 1) // 2\n        print(ans)\nexcept:\n    pass", "import sys\n\ndef run_case():\n    n = int(input())\n    print(int((2 * n - 1) ** 0.5 - 1) >> 1)\nt = int(input())\nfor _ in range(t):\n    run_case()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.sqrt(2 * n - 1)\n    a = int(a)\n    if a % 2 == 1:\n        print(int(a) >> 1)\n    else:\n        if a % 2 == 0:\n            a = a - 1\n        print(a >> 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.floor(math.sqrt(2 * n - 1))\n    if a % 2 == 1:\n        print(int(a) >> 1)\n    else:\n        if a % 2 == 0:\n            a = a - 1\n        print(a >> 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.floor(math.sqrt(2 * n - 1)) - 1 >> 1)", "from math import floor\nfor _ in range(int(input())):\n    n = int(input())\n    print(floor(((2 * n - 1) ** 0.5 - 1) / 2))", "import math\nnum_cases = int(input())\nfor _ in range(num_cases):\n    limit = int(input()) - 1\n    largest_a = math.floor((limit * 2 + 1) ** 0.5)\n    if largest_a % 2 == 0:\n        largest_a -= 1\n    print((largest_a - 1) // 2)", "import math\nfor i in range(int(input())):\n    print((int(math.sqrt(2 * int(input()) - 1)) - 1) // 2)", "for i in range(int(input())):\n    print((int((2 * int(input()) - 1) ** 0.5) - 1) // 2)", "for i in range(int(input())):\n    print((int((2 * int(input()) - 1) ** 0.5) - 1) // 2)", "import sys\ninput = sys.stdin.readline\n\ndef solve(arr):\n    n = int(input())\n    if arr[0][2] > n:\n        return 0\n    (lo, hi) = (0, len(arr) - 1)\n    while lo < hi:\n        mid = (lo + hi + 1) // 2\n        if arr[mid][2] <= n:\n            lo = mid\n        else:\n            hi = mid - 1\n    return lo + 1\narr = []\nfor a in range(3, 10 ** 5, 2):\n    v = pow(a, 2)\n    b = (v - 1) // 2\n    c = v - b\n    if c > 10 ** 9:\n        break\n    if a + b >= c:\n        arr.append((a, b, c))\nfor _ in range(int(input())):\n    print(solve(arr))", "for i in range(int(input())):\n    print((int((2 * int(input()) - 1) ** 0.5) - 1) // 2)", "from math import isqrt\n\ndef solve(n):\n    print((isqrt(2 * n - 1) - 1) // 2)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    solve(n)", "t = int(input())\nwhile t:\n    t -= 1\n    b = int(input())\n    if b < 4:\n        print(0)\n        continue\n    b -= 1\n    res = int((2 * b + 1) ** 0.5)\n    if res % 2 == 0:\n        res -= 1\n    res = (res - 3) // 2 + 1\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.sqrt(2 * n - 1)\n    if a % 2 == 1:\n        print(int(a) // 2)\n    else:\n        a = int(a)\n        if a % 2 == 0:\n            a = a - 1\n        print(a // 2)", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    print(math.floor((math.sqrt(2 * n - 1) - 1) / 2))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = int(math.sqrt(2 * n - 1))\n    print((k - 1) // 2)", "import math\nfor tt in range(int(input())):\n    n = int(input())\n    ans = 0\n    x = (-1 + int(math.sqrt(-1 + 2 * n))) // 2\n    print(x)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    x = int(math.sqrt(2 * n - 1))\n    result = (x + 1) // 2 - 1\n    print(result)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print((int(math.sqrt(2 * n - 1)) - 1) // 2)", "N = int(input())\nfor t in range(N):\n    n = int(input())\n    if n < 5:\n        print(0)\n    else:\n        print((int((2 * n - 1) ** 0.5) - 1) // 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n < 5:\n        print(0)\n        continue\n    print(int((math.floor(math.sqrt(2 * n - 1)) - 1) // 2))", "import math\n\ndef mult_inp():\n    return map(int, input().split(' '))\n\ndef inp():\n    return list(map(int, input().split(' ')))\n\ndef binn(dp, it):\n    left = 0\n    right = len(dp)\n    if it < 5:\n        return 0\n    while 1:\n        mid = (left + right) // 2\n        if dp[mid] < it and mid + 1 < len(dp) and (dp[mid + 1] < it):\n            left = mid\n        else:\n            return mid\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0.5 * (2 * n - 1) ** 0.5 - 0.5\n    print(int(ans))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(int(int(math.sqrt(2 * n - 1) + 1) / 2) - 1)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    res = (-2 + (4 + 8 * (n - 1)) ** 0.5) / 4\n    print(int(res))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = int(math.sqrt(2 * n - 1))\n    i = (a - 1) // 2\n    print(i)", "for t in range(int(input())):\n    n = int(input())\n    print(int(((2 * n - 1) ** (1 / 2) - 1) // 2))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = int((2 * n - 1) ** 0.5)\n    if k % 2 == 1:\n        print(k // 2)\n    else:\n        print(k // 2 - 1)", "n = int(input().strip())\nfor i in range(n):\n    k = int(input().strip())\n    print(int((2 * k - 1) ** (1 / 2) - 1) // 2)", "import math\nt = int(input())\nwhile t > 0:\n    a = int(input())\n    print((int(math.sqrt(a + a - 1)) - 1) // 2)\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        c = 0\n        a = int(math.sqrt(2 * n - 1))\n        print((a - 1) // 2)", "import math\nfor i in range(int(input())):\n    a = int(input())\n    print((int(math.sqrt(a + a - 1)) - 1) // 2)", "def solve():\n    x = int(input())\n    t = int((2.0 * x - 1) ** 0.5)\n    if t & 1:\n        t += 1\n    ans = t // 2 - 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(int((-1 + math.sqrt(2 * n - 1)) / 2))", "from math import sqrt\n\ndef main():\n    for _ in range(int(input())):\n        n = int(sqrt(2.0 * float(input()) - 1.0))\n        n -= 1 - n % 2\n        print(n // 2)\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sqrt_root = math.floor(math.sqrt(2 * n))\n    ans = math.ceil(sqrt_root / 2) - 1\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    print((int(math.sqrt(2 * n - 1)) + 1) // 2 - 1)", "import math\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    if n <= 4:\n        print(0)\n    else:\n        d = math.isqrt(2 * n - 1)\n        print((d - 1) // 2)", "from math import sqrt, isclose, ceil\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    if n < 5:\n        print(0)\n    else:\n        s = sqrt(2 * n - 1)\n        c = int(s)\n        print((c - 3) // 2 + 1)", "import math\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input()) - 1\n    n = (n << 1) + 1\n    m = int(math.sqrt(n))\n    ans = (m >> 1) - 1\n    if m & 1:\n        ans += 1\n    print(ans)", "from collections import defaultdict\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = (2 * n - 1) ** 0.5\n    a = int(a)\n    if a < 2:\n        print(0)\n    else:\n        a -= 2\n        ans = (a + 1) // 2\n        print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(math.sqrt(2 * n - 1) + 1) // 2 - 1)", "from math import *\nfor t in range(int(input())):\n    n = int(input())\n    a = floor(sqrt(2 * n - 1))\n    print(ceil(a / 2) - 1)", "import math\niter = int(input())\nfor _ in range(iter):\n    n = int(input())\n    print((math.floor(math.sqrt(2 * n - 1)) + 1) // 2 - 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = math.floor(math.sqrt(2 * n - 1))\n    print((a + 1) // 2 - 1)", "from bisect import bisect_left, bisect_right\na = 3\nb = 4\nc = 5\narr = [5]\nwhile c < 1000000002:\n    a += 2\n    b = (a ** 2 - 1) // 2\n    c = b + 1\n    arr.append(c)\nt = int(input())\nwhile t:\n    n = int(input())\n    val = bisect_right(arr, n)\n    print(val)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = int(pow(2 * n - 1, 0.5))\n    if temp % 2 == 0:\n        ans = temp // 2 - 1\n    else:\n        ans = temp // 2\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 3:\n        ans = 0\n    else:\n        x = math.floor(math.sqrt(2 * n - 1))\n        if x % 2 == 0:\n            ans = x // 2 - 1\n        else:\n            ans = x // 2\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = int(math.sqrt(2 * n - 1))\n    if ans % 2 == 0:\n        ans = int(ans / 2) - 1\n    else:\n        ans = int(ans / 2)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    limit = pow(2 * n - 1, 1 / 2)\n    ans = (limit - 1) // 2\n    print(int(ans))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = (2 * n + 1) ** 0.5\n    if a.is_integer():\n        a = a // 2 - 1\n    else:\n        a = int(a)\n        a = a // 2 if a % 2 else a // 2 - 1\n    print(int(a))\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    x = math.sqrt(n * n)\n    y = math.sqrt(2 * x - 1)\n    print(int((y + 1) // 2 - 1))", "import sys\nimport math\nimport bisect\nimport functools\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom heapq import heappush, heappop, heapify\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nnum_cases = intinp()\nfor _ in range(num_cases):\n    n = intinp()\n    print(math.ceil(int((2 * n - 1) ** 0.5) / 2) - 1)", "import math\nfor p in range(int(input())):\n    n = int(input())\n    print(int((math.sqrt(2 * n - 1) - 1) // 2))", "import math\n\ndef f(n):\n    return 2 * n * (n + 1) + 1\n\ndef rev(x):\n    return math.sqrt(x / 2)\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    x = rev(n)\n    x = int(x)\n    if f(x) > n:\n        x -= 1\n    print(x)", "import math\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    a = math.sqrt(2 * N - 1)\n    print(int((a - 1) // 2))", "try:\n    t = int(input())\n    while t != 0:\n        n = int(input())\n        maxi = int((2 * n - 1) ** 0.5)\n        print((maxi + 1) // 2 - 1)\n        t -= 1\nexcept EOFError as e:\n    print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = ((2 * n - 1) ** 0.5 - 3) // 2\n    print(0 if x < 0 else int(x) + 1)", "t = int(input())\nimport math\nfor z in range(t):\n    n = int(input())\n    m = 2 * n - 1\n    s = math.sqrt(m)\n    s = math.floor(s) - 1\n    print(int(s / 2))", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    if n <= 3:\n        print(0)\n    else:\n        hh = math.floor(math.sqrt(2 * n - 1))\n        if hh % 2 == 0:\n            print(hh // 2 - 1)\n        else:\n            print(hh // 2)", "for t in range(int(input())):\n    n = int((int(input()) * 2) ** 0.5)\n    print(n // 2 if n % 2 else (n - 1) // 2)", "read = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((int((2 * n - 1) ** 0.5) - 1) // 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = int(2 * n - 1) ** 0.5\n    print(int(l - 1) // 2)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    z = int(2 ** 0.5 * (n - 0.5) ** 0.5)\n    if z % 2 == 0:\n        print(int(z / 2 - 1))\n    else:\n        print(int((z - 1) / 2))", "import math\nfor i in range(int(input())):\n    print((int(math.sqrt(int(input()) * 2 - 1)) - 1) // 2)", "import math\nfor _ in range(int(input())):\n    print(int(int(math.sqrt(2 * int(input()) - 1) - 1) // 2))", "for _ in range(int(input())):\n    n = int(input())\n    print((int((n - 1 + n) ** 0.5) - 1) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    k = int((int((2 * n - 1) ** (1 / 2)) - 1) / 2)\n    print(k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = int((2 * n - 1) ** (1 / 2))\n    k = int((m - 1) / 2)\n    print(k)", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    m = int((2 * n - 1) ** 0.5)\n    if m % 2 == 0:\n        print(int(m / 2 - 1))\n    else:\n        print(int(m / 2))", "def arrIn():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\nfor ii in range(int(input())):\n    n = int(input())\n    c = n\n    a = c + c - 1\n    a = int(a ** 0.5)\n    if a % 2 == 0:\n        a -= 1\n    c = (a - 3) // 2 + 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(int(((n * 2 - 1) ** 0.5 - 1) / 2))"]