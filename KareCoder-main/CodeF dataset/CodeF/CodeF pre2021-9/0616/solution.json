["import sys\npin = sys.stdin.readline\nQ = int(pin())\nfor q in range(Q):\n    (u, v) = map(int, pin().split())\n    if u > v:\n        print('NO')\n    else:\n        (u, v) = (bin(u)[2:][::-1], bin(v)[2:][::-1])\n        if u.count('1') < v.count('1'):\n            print('NO')\n        else:\n            F = 1\n            S = 0\n            for i in range(len(u)):\n                if u[i] == v[i]:\n                    continue\n                elif u[i] == '1':\n                    S += 1\n                else:\n                    S -= 1\n                    if S < 0:\n                        F = 0\n                        break\n            print(['NO', 'YES'][F])", "import gc\nimport heapq\nimport itertools\nimport math\nfrom collections import Counter, deque, defaultdict\nfrom sys import stdout\nimport time\nfrom math import factorial, log, gcd\nimport sys\nfrom decimal import Decimal\nimport threading\nfrom heapq import *\nfrom fractions import Fraction\nimport bisect\n\ndef S():\n    return sys.stdin.readline().split()\n\ndef I():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef IS():\n    return sys.stdin.readline().replace('\\n', '')\n\ndef main():\n    (u, v) = I()\n    if u > v:\n        print('NO')\n        return\n    (u, v) = map(lambda x: bin(x)[2:][::-1], [u, v])\n    idx_u = []\n    for i in range(len(u)):\n        if u[i] == '1':\n            idx_u.append(i)\n    c = v.count('1')\n    if c > len(idx_u):\n        print('NO')\n        return\n    idx = 0\n    for i in range(len(v)):\n        if v[i] == '1':\n            if i < idx_u[idx]:\n                print('NO')\n                return\n            idx += 1\n            if idx == c:\n                break\n    print('YES')\nfor _ in range(II()):\n    main()", "T = int(input())\nfor _ in range(T):\n    (U, V) = map(int, input().split())\n    if U == V:\n        print('YES')\n    elif U > V:\n        print('NO')\n    else:\n        uc = bin(U).count('1')\n        vc = bin(V).count('1')\n        if uc < vc:\n            print('NO')\n        else:\n            (u, v) = (0, 0)\n            for i in range(32):\n                if U >> i & 1:\n                    u += 1\n                if V >> i & 1:\n                    v += 1\n                if u < v:\n                    print('NO')\n                    break\n            else:\n                print('YES')", "def solve(u, v):\n    if u == v:\n        return True\n    if v % u == 0 and v // u & v // u - 1 == 0:\n        return True\n    if u > v:\n        return False\n    if u % 2 == 0 and v % 2 == 1:\n        return False\n    binU = format(u, 'b')\n    binV = format(v, 'b')\n    binULength = len(binU)\n    binVLength = len(binV)\n    uOnesCount = 0\n    vOnesCount = 0\n    for i in range(1, binVLength + 1):\n        if i <= binULength:\n            if binU[binULength - i] == '1':\n                uOnesCount += 1\n        if binV[binVLength - i] == '1':\n            vOnesCount += 1\n        if uOnesCount < vOnesCount:\n            return False\n    return True\nq = int(input())\nfor i in range(q):\n    (u, v) = map(int, input().split())\n    result = solve(u, v)\n    print('YES' if result else 'NO')", "for _ in range(int(input())):\n    (u, v) = list(map(int, input().split()))\n    if u > v:\n        print('NO')\n    elif u == v:\n        print('YES')\n    else:\n        fl = True\n        u = bin(u)\n        v = bin(v)\n        u_o = 0\n        v_o = 0\n        diff = len(v) - len(u)\n        for i in range(len(u) - 1, 1, -1):\n            if u[i] == '1':\n                u_o += 1\n            if v[i + diff] == '1':\n                v_o += 1\n            if v_o > u_o:\n                print('NO')\n                fl = False\n                break\n        if fl:\n            for i in range(2, 2 + diff):\n                if v[i] == '1':\n                    v_o += 1\n            if v_o > u_o:\n                print('NO')\n            else:\n                print('YES')", "q = int(input().strip())\nout = ''\nAAA = 2 ** 30\nfor _ in range(q):\n    (u, v) = map(int, input().strip().split())\n    if u > v:\n        out += 'NO\\n'\n    else:\n        (U, V) = (bin(u + AAA), bin(v + AAA))\n        (u_1, v_1) = (0, 0)\n        for x in range(32, 2, -1):\n            u_1 += U[x] == '1'\n            v_1 += V[x] == '1'\n            if u_1 < v_1:\n                out += 'NO\\n'\n                break\n        else:\n            out += 'YES\\n'\nprint(out)", "q = int(input().strip())\nout = ''\nAAA = 2 ** 30\nfor _ in range(q):\n    (u, v) = map(int, input().strip().split())\n    if u > v:\n        out += 'NO\\n'\n    else:\n        (U, V) = (bin(u + AAA), bin(v + AAA))\n        (u_1, v_1) = (0, 0)\n        for x in range(32, 2, -1):\n            u_1 += U[x] == '1'\n            v_1 += V[x] == '1'\n            if u_1 < v_1:\n                out += 'NO\\n'\n                break\n        else:\n            out += 'YES\\n'\nprint(out)", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ceil(num, denom):\n    return (num + denom - 1) // denom\ninput = sys.stdin.readline\n\ndef is_connec(a, b):\n    if b < a:\n        return False\n    if bin(b)[2:].count('1') > bin(a)[2:].count('1'):\n        return False\n    count = 0\n    for i in range(30):\n        if a & 1 << i:\n            count += 1\n        if b & 1 << i:\n            count -= 1\n        if count < 0:\n            return False\n    return True\nq = int(input())\nfor i in range(q):\n    (u, v) = map(int, input().split())\n    if is_connec(u, v):\n        print('YES')\n    else:\n        print('NO')", "def f(n):\n    for i in range(1, n):\n        if i & n - i == n - i:\n            print(i, n)\nfor tc in range(int(input())):\n    (u, v) = map(int, input().split())\n    if u > v:\n        print('NO')\n        continue\n    elif u == v:\n        print('YES')\n        continue\n    binu = bin(u)[2:]\n    binv = bin(v)[2:]\n    binu = '0' * (len(binv) - len(binu)) + binu\n    binu = binu[::-1]\n    binv = binv[::-1]\n    (cntu, cntv) = (0, 0)\n    for i in range(len(binu)):\n        cntv += binv[i] == '1'\n        cntu += binu[i] == '1'\n        if cntv > cntu:\n            print('NO')\n            break\n    else:\n        print('YES')", "from math import *\nmod = 10 ** 9 + 7\n\ndef numBits(n):\n    ans = 0\n    while n:\n        ans = ans + 1\n        n = n & n - 1\n    return ans\n\ndef main():\n    (x, y) = [int(x) for x in input().split(' ')]\n    if x > y:\n        print('NO')\n    elif x == y:\n        print('YES')\n    else:\n        prev = 0\n        while y:\n            prev = prev + 1\n            lb = y & -y\n            mask = 2 * lb - 1\n            cnt = numBits(x & mask)\n            if cnt < prev:\n                print('NO')\n                return\n            y = y & y - 1\n        print('YES')\ntt = int(input())\nfor _ in range(tt):\n    main()", "for s in [*open(0)][1:]:\n    (u, v) = map(int, s.split())\n    n = 0\n    while u < v and n >= 0:\n        n += u % 2 - v % 2\n        v >>= 1\n        u >>= 1\n    print('YNEOS'[u != v or n < 0::2])", "import sys\n\ndef isT(u1, u2):\n    if u1 > u2:\n        return False\n    else:\n        while u2 > 1:\n            if u2 & -u2 < u1 & -u1 or u1 == 0:\n                return False\n            u1 -= u1 & -u1\n            u2 -= u2 & -u2\n        return True\nq = int(sys.stdin.readline())\nfor i in range(q):\n    (u1, u2) = list(map(int, sys.stdin.readline().split()))\n    if isT(u1, u2):\n        print('YES')\n    else:\n        print('NO')", "for s in [*open(0)][1:]:\n    (u, v) = map(int, s.split())\n    n = 0\n    while u < v and n >= 0:\n        n += u % 2 - v % 2\n        v >>= 1\n        u >>= 1\n    print('NYOE S'[u == v and n >= 0::2])", "def read_list() -> list:\n    return [int(i) for i in input().strip().split()]\n\ndef read_num() -> int:\n    return int(input().strip())\n\ndef check(u, v):\n    (cnt_u, cnt_v) = (0, 0)\n    for i in range(31):\n        if u >> i & 1:\n            cnt_u += 1\n        if v >> i & 1:\n            cnt_v += 1\n        if cnt_v != 0:\n            if cnt_u == 0:\n                return False\n            cnt_u -= 1\n            cnt_v -= 1\n    return True\nq = read_num()\nfor _ in range(q):\n    (u, v) = read_list()\n    print('YES' if u <= v and check(u, v) else 'NO')", "def check(u, v):\n    a = 0\n    b = 0\n    for i in range(31):\n        if u >> i & 1:\n            a += 1\n        if v >> i & 1:\n            b += 1\n        if b > 0:\n            if a <= 0:\n                return 0\n            a -= 1\n            b -= 1\n    return 1\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (u, v) = map(int, input().split())\n    if u <= v and check(u, v) == 1:\n        print('YES')\n    else:\n        print('NO')", "def next(x):\n    get_bin = lambda x: format(x, 'b')\n    b = get_bin(x)\n    mult = 1\n    l = set({0})\n    newlist = set()\n    i = len(b) - 1\n    while i >= 0:\n        if b[i] == '1':\n            for j in l:\n                newlist.add(j + mult)\n            l = l.union(newlist)\n        mult *= 2\n        i -= 1\n    return l\nfor q in range(int(input())):\n    (u, v) = list(map(int, input().split()))\n    if u > v:\n        print('NO')\n    else:\n        possible = True\n        bu = format(u, 'b')\n        bv = format(v, 'b')\n        ones = 0\n        i = -1\n        while i >= -len(bu):\n            if bu[i] == '0':\n                if bv[i] == '1':\n                    ones -= 1\n                    if ones < 0:\n                        print('NO')\n                        possible = False\n                        break\n            elif bv[i] == '0':\n                ones += 1\n            i -= 1\n        if possible:\n            for i in range(len(bv) - len(bu)):\n                if bv[i] == '1':\n                    ones -= 1\n            if ones >= 0:\n                print('YES')\n            else:\n                print('NO')", "queries = int(input())\nfor _ in range(queries):\n    (u, v) = map(int, input().split(' '))\n    if u > v:\n        print('NO')\n        continue\n    elif u == v:\n        print('YES')\n        continue\n    u_bin = bin(u).replace('0b', '')\n    v_bin = bin(v).replace('0b', '')\n    if len(u_bin) < len(v_bin):\n        u_bin = '0' * (len(v_bin) - len(u_bin)) + u_bin\n    u_bin = u_bin[::-1]\n    v_bin = v_bin[::-1]\n    (count_u, count_v) = (0, 0)\n    stop = False\n    for i in range(len(u_bin)):\n        if u_bin[i] == '1':\n            count_u += 1\n        if v_bin[i] == '1':\n            count_v += 1\n        if count_v > count_u:\n            print('NO')\n            stop = True\n            break\n    if not stop:\n        print('YES')", "test = int(input())\nfor t in range(test):\n    (u, v) = map(int, input().split())\n    if u > v:\n        print('NO')\n        continue\n    k = 0\n    l = 0\n    while v > 0:\n        k += u % 2\n        l += v % 2\n        if l > k:\n            break\n        u //= 2\n        v //= 2\n    if v > 0:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    (x, y) = map(int, input().split())\n    k1 = k2 = 0\n    flg = 0\n    if x > y:\n        print('NO')\n    else:\n        for j in range(2 ** 5):\n            k1 += (x >> j) % 2\n            k2 += (y >> j) % 2\n            if k2 > k1:\n                print('NO')\n                flg = 1\n                break\n        if flg == 0:\n            print('YES')", "import math\nq = int(input())\nfor i in range(q):\n    (u, v) = [int(x) for x in input().split()]\n    if u > v:\n        print('NO')\n        continue\n    u_bits = 0\n    v_bits = 0\n    impossible = False\n    for j in range(math.floor(math.log2(v)) + 1):\n        if u & 1 << j:\n            u_bits += 1\n        if v & 1 << j:\n            v_bits += 1\n        if u_bits < v_bits:\n            impossible = True\n            break\n    res = 'NO' if impossible else 'YES'\n    print(res)", "d = int(input())\nfor d in range(d):\n    (u, v) = [int(x) for x in input().split()]\n    if u > v:\n        print('NO')\n    else:\n        ucount = bin(u).count('1')\n        vcount = bin(v).count('1')\n        if ucount < vcount:\n            print('NO')\n        else:\n            (uu, vv) = (0, 0)\n            for i in range(32):\n                if u >> i & 1:\n                    uu += 1\n                if v >> i & 1:\n                    vv += 1\n                if uu < vv:\n                    print('NO')\n                    break\n            else:\n                print('YES')", "for i in range(int(input())):\n    (x, y) = map(int, input().split())\n    k1 = k2 = 0\n    flg = 0\n    if x > y:\n        print('NO')\n    else:\n        for j in range(2 ** 5):\n            k1 += (x >> j) % 2\n            k2 += (y >> j) % 2\n            if k2 > k1:\n                print('NO')\n                flg = 1\n                break\n        if flg == 0:\n            print('YES')", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l > r:\n        print('NO')\n    else:\n        L = 0\n        R = 0\n        ok = True\n        while l or r:\n            if l & 1:\n                L += 1\n            l >>= 1\n            if r & 1:\n                R += 1\n            r >>= 1\n            if R > L:\n                ok = False\n        if ok:\n            print('YES')\n        else:\n            print('NO')", "import sys\nimport math\n\ndef is_true(a, b):\n    if a > b:\n        return False\n    else:\n        while b > 0:\n            if lsb(b) < lsb(a) or a == 0:\n                return False\n            a -= lsb(a)\n            b -= lsb(b)\n        return True\n\ndef lsb(num):\n    return num & -num\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    (u, v) = list(map(int, sys.stdin.readline().split()))\n    if is_true(u, v):\n        print('YES')\n    else:\n        print('NO')"]