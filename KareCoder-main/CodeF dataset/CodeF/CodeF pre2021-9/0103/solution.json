["for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = set(a) & set(b)\n    print(len(ans))", "tests = int(input())\nfor test in range(tests):\n    (trains_bottom_count, trains_left_count) = map(int, input().split())\n    trains_bottom = set([int(x) for x in input().split()])\n    trains_left = set([int(x) for x in input().split()])\n    print(len(trains_bottom & trains_left))", "t = int(input())\nfor k in range(t):\n    input()\n    x = set(input().split(' '))\n    y = set(input().split(' '))\n    print(len(x.intersection(y)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    x = set(map(int, input().split(' ')))\n    y = set(map(int, input().split(' ')))\n    z = x.intersection(y)\n    print(len(z))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = set(map(int, input().split()))\n    s1 = set(map(int, input().split()))\n    print(len(s & s1))", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li1 = list(map(int, input().split()))\n    res = list(set(li).intersection(set(li1)))\n    print(len(res))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    st1.intersection_update(st2)\n    print(len(st1))", "a = int(input())\nfor i in range(a):\n    (num_bott, num_left) = map(int, input().split())\n    bott = set(map(int, input().split()))\n    left = set(map(int, input().split()))\n    cra = bott.intersection(left)\n    print(len(cra))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    st = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st.intersection(st2)\n    print(len(ans))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arrN = list(map(int, input().split()))\n    arrM = list(map(int, input().split()))\n    print(len(list(set(arrN).intersection(arrM))))", "t = int(input())\nfor i in range(t):\n    nm = input().split()\n    n = int(nm[0])\n    m = int(nm[1])\n    be = input().split()\n    le = input().split()\n    b = set(be)\n    l = set(le)\n    a = list(b.intersection(l))\n    print(len(a))", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        x = [int(i) for i in input().split()]\n        y = [int(i) for i in input().split()]\n        print(len(x + y) - len(set(x + y)))\nmain()", "t = int(input())\ns = []\nfor i in range(t):\n    s1 = input().split(' ')\n    s2 = input().split(' ')\n    s3 = input().split(' ')\n    (n, m) = (int(s1[0]), int(s1[1]))\n    x = n + m\n    s2.extend(s3)\n    y = len(set(s2))\n    z = x - y\n    s.append(z)\nfor j in range(t):\n    print(s[j])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    flag = 0\n    if n <= m:\n        for i in a:\n            if i in b:\n                flag += 1\n    else:\n        for j in b:\n            if j in a:\n                flag += 1\n    print(flag)", "def get_primeFactor(n):\n    res = [1]\n    x = 2\n    while x * x <= n:\n        while n % x == 0:\n            res.append(x)\n            n //= x\n        x += 1\n    if n > 1:\n        res.append(n)\n    return res\n\ndef getFactor(n):\n    res = {1}\n    x = 2\n    while x * x <= n:\n        if n % x == 0:\n            res.add(x)\n            res.add(n // x)\n        x += 1\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    count = 0\n    for i in a:\n        if i in b:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l1 = set(map(int, input().split()))\n    l2 = set(map(int, input().split()))\n    count = 0\n    for i in l1:\n        if i in l2:\n            count += 1\n    print(count)", "import math\npi = math.acos(-1)\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    cnt = [0] * 101\n    ans = 0\n    for x in a:\n        cnt[x] = cnt[x] + 1\n    for x in b:\n        if cnt[x]:\n            ans = ans + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = list(set().union(a, b))\n    print(n + m - len(c))", "k = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = 0\n    for i in a:\n        if i in b:\n            c += 1\n    k.append(c)\nfor i in k:\n    print(i)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\n\ndef solve():\n    for _ in range(int(input())):\n        (n, m) = li()\n        b = set(li())\n        l = set(li())\n        print(len(b.intersection(l)))\nsolve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:m]\n    c = 0\n    for i in a:\n        if i in b:\n            c += 1\n    print(c)", "tests = int(input())\nfor test in range(tests):\n    (trains_bottom_count, trains_left_count) = map(int, input().split())\n    trains_bottom = set([int(x) for x in input().split()])\n    trains_left = set([int(x) for x in input().split()])\n    print(len(trains_bottom & trains_left))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = 0\n    for i in y:\n        z += x.count(i)\n    print(z)", "t = int(input())\nfor i in range(t):\n    count = 0\n    (la, db) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in a:\n        if i in b:\n            count += 1\n    print(count)", "def Cancel_the_Trains():\n    for _ in range(int(input())):\n        a = input()\n        b = input().split()\n        c = input().split()\n        n = 0\n        for i in b:\n            if i in c:\n                n += 1\n        print(n)\nCancel_the_Trains()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a_count = [b.count(a[i]) for i in range(n)]\n    print(sum(a_count))", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    n_arr = list(map(int, input().strip().split()))\n    m_arr = list(map(int, input().strip().split()))\n    size = len(n_arr)\n    c = 0\n    for i in range(size):\n        if n_arr[i] in m_arr:\n            c += 1\n    print(c)", "t = int(input(''))\nfor i in range(t):\n    (n, m) = map(int, input('').split())\n    a = list(map(int, input('').split()))\n    b = list(map(int, input('').split()))\n    dem = 0\n    for i in range(len(a)):\n        if b.count(a[i]) == 1:\n            dem += 1\n    print(dem)", "for _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    print(len(a.intersection(b)))", "for _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    w = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    count = 0\n    for i in range(n):\n        if w[i] in s:\n            count += 1\n    print(count)", "r = lambda : map(int, input().split())\n(t,) = r()\nexec(t * 'r();print(len({*r()}&{*r()}));')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "t = int(input())\nfor i in range(t):\n    x = input()\n    n = int(x.split()[0])\n    m = int(x.split()[1])\n    a = input()\n    b = input()\n    a1 = a.split()\n    b1 = b.split()\n    for j in range(n):\n        a1[j] = int(a1[j])\n    for j in range(m):\n        b1[j] = int(b1[j])\n    k = 0\n    for j in a1:\n        if j in b1:\n            k = k + 1\n    print(k)", "n = int(input())\nres = []\nfor i in range(n):\n    t = list(map(int, input().split()))\n    left = list(map(int, input().split()))\n    bottom = list(map(int, input().split()))\n    res.extend(left)\n    res.extend(bottom)\n    res = set(res)\n    print(sum(t) - len(res))\n    res.clear()\n    res = []", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "for _ in range(int(input())):\n    x = input()\n    a = input().split()\n    b = input().split()\n    print(len(set(a).intersection(b)))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(i) for i in input().split()]\n    count = 0\n    for i in l2:\n        if i in l1:\n            count += 1\n    print(count)", "for _ in range(int(input(''))):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    s = []\n    for i in l:\n        if i in k:\n            s.append(i)\n    print(len(s))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    nl = [int(i) for i in input().split()]\n    ml = [int(i) for i in input().split()]\n    count = 0\n    for i in nl:\n        if i in ml:\n            count += 1\n    print(count)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "ask = int(input())\nfor i in range(ask):\n    list = []\n    canceled = 0\n    (a, b) = input().split()\n    c = input().split()\n    d = input().split()\n    for k in c:\n        list.append(k)\n    for u in d:\n        if u in list:\n            canceled += 1\n        else:\n            list.append(u)\n    print(canceled)", "for _ in range(int(input())):\n    input()\n    print(len(set(list(input().split())).intersection(set(list(input().split())))))", "for i in range(int(input())):\n    count = 0\n    bla1 = input()\n    arr1 = [int(arr1) for arr1 in input().split()]\n    arr2 = [int(arr2) for arr2 in input().split()]\n    for i in arr1:\n        if i in arr2:\n            count = count + 1\n    print(count)", "for i in range(int(input())):\n    count = 0\n    bla1 = input()\n    arr1 = [int(arr1) for arr1 in input().split()]\n    arr2 = [int(arr2) for arr2 in input().split()]\n    for i in arr1:\n        if i in arr2:\n            count = count + 1\n    print(count)", "t = int(input())\ncount = 0\nfor i in range(t):\n    count = 0\n    d = dict()\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    lstN = list(map(int, input().rstrip().split()))\n    lstM = list(map(int, input().rstrip().split()))\n    d = dict.fromkeys(lstN, 1)\n    for j in lstM:\n        if j in d:\n            d[j] = d[j] + 1\n    for x in d:\n        if d[x] > 1:\n            count = count + 1\n    print(count)", "def get_intersections(l1, l2):\n    return len(set(l1).intersection(l2))\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        bottom_train_numbers = [int(x) for x in input().split()]\n        left_train_numbers = [int(x) for x in input().split()]\n        print(get_intersections(left_train_numbers, bottom_train_numbers))\nsolve()", "for _ in range(int(input())):\n    input()\n    s1 = [int(i) for i in input().split()]\n    s2 = [int(i) for i in input().split()]\n    s = 0\n    for i in s1:\n        if i in s2:\n            s += 1\n    print(s)", "testCase = int(input())\nfor i in range(testCase):\n    info = input()\n    arr1 = input()\n    arr1 = arr1.split(' ')\n    arr2 = input()\n    arr2 = arr2.split(' ')\n    count = 0\n    for j in range(len(arr1)):\n        if arr1[j] in arr2:\n            count += 1\n    print(count)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "tests = int(input())\ni = 0\nwhile i < tests:\n    (bottom_train_count, left_train_count) = (int(x) for x in input().split())\n    bottom_trains = [int(x) for x in input().split()]\n    left_trains = [int(x) for x in input().split()]\n    del_trains = 0\n    if bottom_train_count < left_train_count:\n        for_train = bottom_trains\n        where_train = left_trains\n    else:\n        for_train = left_trains\n        where_train = bottom_trains\n    j = 0\n    while j < len(for_train):\n        if for_train[j] in where_train:\n            del_trains += 1\n        j += 1\n    print(del_trains)\n    i += 1", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();print(len({*R()}&{*R()}));')", "t = int(input())\nfor i in range(t):\n    ans = 0\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = set(list(map(int, input().split())))\n    for i in a:\n        if i in b:\n            ans += 1\n    print(ans)", "T = int(input())\nfor t in range(T):\n    _ = input()\n    nset = set(input().split())\n    mset = set(input().split())\n    print(len(nset & mset))", "def solve():\n    input()\n    a = set((int(x) for x in input().split()))\n    print(len(a.intersection(set((int(x) for x in input().split())))))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    list_n = [int(x) for x in input().split()][:n]\n    list_m = [int(x) for x in input().split()][:m]\n    track = {}\n    cancelTheTrains = 0\n    for i in range(n):\n        track[list_n[i]] = True\n    for j in range(m):\n        if list_m[j] in track:\n            cancelTheTrains += 1\n    print(cancelTheTrains)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    b = [int(x) for x in input().split()][:n]\n    l = [int(x) for x in input().split()][:m]\n    cnt = 0\n    for i in range(n):\n        if b[i] in l:\n            cnt += 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(i) for i in input().split())\n    a = (int(i) for i in input().split())\n    b = set((int(i) for i in input().split()))\n    res = sum((i in b for i in a))\n    print(res)", "def solve():\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    ans = a.intersection(b)\n    print(len(ans))\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    ans = a.intersection(b)\n    print(len(ans))\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    ans = a.intersection(b)\n    print(len(ans))", "z = int(input())\nfor i in range(z):\n    (x, y) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "def solve():\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    ans = a.intersection(b)\n    print(len(ans))\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = set(map(int, input().split()))\n    ans = 0\n    for x in map(int, input().split()):\n        if x in s:\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    st1.intersection_update(st2)\n    print(len(st1))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    x = set(arr)\n    y = set(arr1)\n    ans = list(x.intersection(y))\n    print(len(ans))", "a = int(input())\nfor i in range(a):\n    (num_bott, num_left) = map(int, input().split())\n    bott = set(map(int, input().split()))\n    left = set(map(int, input().split()))\n    cra = bott.intersection(left)\n    print(len(cra))", "z = int(input())\nfor i in range(z):\n    (x, y) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "x = int(input())\nfor i in range(x):\n    (back, left) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    ans = a.intersection(b)\n    print(len(ans))", "tests = int(input())\nfor test in range(tests):\n    (trains_bottom_count, trains_left_count) = map(int, input().split())\n    trains_bottom = set([int(x) for x in input().split()])\n    trains_left = set([int(x) for x in input().split()])\n    print(len(trains_bottom & trains_left))", "a = int(input())\nfor i in range(a):\n    (b, c) = map(int, input().split())\n    st1 = set(map(int, input().split()))\n    st2 = set(map(int, input().split()))\n    ans = st1.intersection(st2)\n    print(len(ans))", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        print(len(set([int(i) for i in input().split()]).intersection([int(i) for i in input().split()])))\nmain()", "for _ in range(int(input())):\n    print(sum(map(int, input().split())) - len(set(input().split() + input().split())))", "t = int(input())\nfor i in range(t):\n    _ = input()\n    nt = set(map(int, input().split()))\n    mt = set(map(int, input().split()))\n    print(len(nt.intersection(mt)))", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [value for value in a if value in b]\n    print(len(c))", "t = int(input())\nresult = []\nfor i in range(0, t):\n    (n, m) = [int(s) for s in input().split()]\n    n_trains = [int(s) for s in input().split()]\n    m_trains = [int(s) for s in input().split()]\n    cancel = 0\n    for j in n_trains:\n        if j in m_trains:\n            cancel += 1\n    result.append(str(cancel))\nprint('\\n'.join(result))", "t = int(input())\nfor _ in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    bottom = set(map(int, input().split()))\n    left = set(map(int, input().split()))\n    z = bottom.intersection(left)\n    print(len(z))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    lst = list(map(int, input().split(' ')))\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if arr[i] == lst[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[i] > lst[j]:\n            j += 1\n        else:\n            i += 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    lst = list(map(int, input().split(' ')))\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if arr[i] == lst[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[i] > lst[j]:\n            j += 1\n        else:\n            i += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li1 = list(map(int, input().split()))\n    res = list(set(li).intersection(set(li1)))\n    print(len(res))", "a = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    j = [0 for y in range(100)]\n    h = [0 for y in range(100)]\n    for y in d:\n        j[y - 1] = 1\n    for y in e:\n        h[y - 1] = 1\n    count = 0\n    for y in range(100):\n        if abs(j[y] - h[y]) == 0 and j[y] > 0 and (h[y] > 0):\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    cancel = 0\n    for i in l1:\n        if i in l2:\n            cancel = cancel + 1\n    print(cancel)", "inn = lambda : int(input())\ninm = lambda : map(int, input().split())\nins = lambda : str(input())\nina = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, m) = inm()\n    a = ina()\n    b = ina()\n    b = set(b)\n    cnt = 0\n    for i in a:\n        if i in b:\n            cnt += 1\n    print(cnt)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    input()\n    c = 0\n    a1 = tuple(map(int, input().split()))\n    a2 = tuple(map(int, input().split()))\n    for x in a1:\n        if x in a2:\n            c += 1\n    print(c)", "for i in range(int(input())):\n    a = input().split()\n    (*x,) = map(int, input().split())\n    (*y,) = map(int, input().split())\n    ans = 0\n    for i in x:\n        ans += i in y\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    nl = list(map(int, input().split()))\n    ml = list(map(int, input().split()))\n    if len(nl) < len(ml):\n        for i in range(len(nl)):\n            if nl[i] in ml:\n                c += 1\n    else:\n        for i in range(len(ml)):\n            if ml[i] in nl:\n                c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    nli = list(map(int, input().split()))\n    mli = list(map(int, input().split()))\n    oli = set(nli)\n    tli = set(mli)\n    q = oli & tli\n    print(len(q))", "import sys\nT = int(sys.stdin.readline())\nfor i in range(T):\n    (n, m) = map(int, sys.stdin.readline().split())\n    bottom_nums = list(map(int, sys.stdin.readline().split()))\n    left_nums = list(map(int, sys.stdin.readline().split()))\n    answer = 0\n    for j in bottom_nums:\n        answer += j in left_nums\n    print(answer)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:m]\n    uniques = list(set(a).intersection(b))\n    print(len(uniques))", "t = int(input())\nwhile t:\n    (n, m) = [int(i) for i in input().split()]\n    listn = [int(i) for i in input().split()]\n    listm = [int(i) for i in input().split()]\n    intersect = set(listn).intersection(set(listm))\n    print(len(intersect))\n    t -= 1", "I = lambda : set(map(int, input().split()))\nfor i in '*' * int(input()):\n    input()\n    (a, b) = (I(), I())\n    print(len(a & b))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = set([int(i) for i in input().split()])\n    brr = set([int(i) for i in input().split()])\n    print(len(arr.intersection(brr)))", "import math\nfor i in range(0, int(input())):\n    p = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n.extend(m)\n    print(len(n) - len(set(n)))", "n = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    d = dict(zip(l1 + l2, l1 + l2))\n    print(len(l1 + l2) - len(d.keys()))", "def solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for x in a:\n        ans += x in b\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()"]