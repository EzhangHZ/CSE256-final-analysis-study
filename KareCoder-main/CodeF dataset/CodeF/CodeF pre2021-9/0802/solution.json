["DIGITS = 55\nMAX_CNT = 6\nCUTOFF_RATIO = 0.618\nNUMBERS = [0] * (DIGITS + 1)\nCUTOFFS = [0] * (DIGITS + 1)\nfor d in range(1, DIGITS + 1):\n    NUMBERS[d] = 10 * NUMBERS[d - 1] + 1\n    CUTOFFS[d] = CUTOFF_RATIO * 10 ** (d - 1) + 15\nX = int(input())\nN = int(len(str(X)))\ncandidates = {X: 0}\nfor d in range(N + 1, 0, -1):\n    ncandidates = {}\n\n    def insert(value, cost):\n        if value not in ncandidates or cost < ncandidates[value]:\n            ncandidates[value] = cost\n    for value in candidates:\n        cost = candidates[value]\n        for cnt in range(MAX_CNT + 1):\n            nvalue = abs(value - cnt * NUMBERS[d])\n            if nvalue <= CUTOFFS[d]:\n                insert(nvalue, cost + cnt * d)\n    candidates = ncandidates\nprint(candidates[0])", "DIGITS = 55\nMAX_CNT = 6\nNUMBERS = [0] * (DIGITS + 1)\nCUTOFFS = [0] * (DIGITS + 1)\nfor d in range(1, DIGITS + 1):\n    NUMBERS[d] = 10 * NUMBERS[d - 1] + 1\n    CUTOFFS[d] = 10 ** (d - 1) * 50 // 81 + 15\nINF = 10 ** 9\nsave = [{} for d in range(DIGITS)]\n\ndef recurse(value, d):\n    if d == 0:\n        return 0 if value == 0 else INF\n    if value in save[d]:\n        return save[d][value]\n    ans = INF\n    for cnt in range(0, MAX_CNT + 1):\n        nvalue = abs(value - cnt * NUMBERS[d])\n        if nvalue <= CUTOFFS[d]:\n            ans = min(ans, cnt * d + recurse(nvalue, d - 1))\n    save[d][value] = ans\n    return ans\nX = int(input())\nprint(recurse(X, len(str(X)) + 1))", "MAX_CNT = 6\nX = int(input())\nN = len(str(X))\nNUMBERS = [0] * (N + 2)\nCUTOFFS = [0] * (N + 2)\nfor d in range(1, N + 2):\n    NUMBERS[d] = 10 * NUMBERS[d - 1] + 1\n    CUTOFFS[d] = 10 ** (d - 1) * 50 // 81 + 15\nINF = 10 ** 9\nsave = [{} for d in range(N + 2)]\n\ndef recurse(value, d):\n    if d == 0:\n        return 0 if value == 0 else INF\n    if value in save[d]:\n        return save[d][value]\n    ans = INF\n    for cnt in range(0, MAX_CNT + 1):\n        nvalue = abs(value - cnt * NUMBERS[d])\n        if nvalue <= CUTOFFS[d]:\n            ans = min(ans, cnt * d + recurse(nvalue, d - 1))\n    save[d][value] = ans\n    return ans\nprint(recurse(X, N + 1))", "n = int(input())\ndp = {}\n\ndef calc(x):\n    if 0 == x:\n        return 0\n    if x in dp.keys():\n        return dp[x]\n    l = len(str(x))\n    u = 10 ** l // 9\n    if x < u:\n        u = u // 10\n        l -= 1\n    v = u * 10 + 1\n    u1 = calc(x % u) + x // u * l\n    u2 = calc((v - x) % u) + (l + 1) + (v - x) // u * l\n    res = min(u1, u2)\n    dp[x] = res\n    return res\nprint(calc(n))", "def ones(a):\n    return (10 ** a - 1) // 9\n\ndef add_in_dict(dct, key, val):\n    if key in dct:\n        dct[key] = min(dct[key], val)\n    else:\n        dct[key] = val\n_s = input()\n_n = len(_s)\n_x = int(_s)\ncur_dict = {}\ncur_dict[_x] = 0\nfor i in range(_n + 1, 0, -1):\n    ns = ones(i)\n    new_dict = {}\n    for x in cur_dict:\n        v = cur_dict[x]\n        while ns <= x:\n            x -= ns\n            v += i\n        add_in_dict(new_dict, x, v)\n        add_in_dict(new_dict, ns - x, v + i)\n    cur_dict = new_dict\nprint(cur_dict[0])", "n = int(input())\nres = {}\n\ndef cal(x):\n    if x == 0:\n        return 0\n    if x in res.keys():\n        return res[x]\n    larger = 1\n    while x >= larger:\n        larger = larger * 10 + 1\n    smaller = larger // 10\n    l = len(str(smaller))\n    a = cal(x % smaller) + x // smaller * l\n    b = cal((larger - x) % smaller) + l + 1 + (larger - x) // smaller * l\n    res[x] = min(a, b)\n    return res[x]\nprint(cal(n))", "n = int(input())\nres = {}\n\ndef cal(x):\n    if x == 0:\n        return 0\n    if x in res.keys():\n        return res[x]\n    larger = 1\n    while x >= larger:\n        larger = larger * 10 + 1\n    smaller = larger // 10\n    l = len(str(smaller))\n    a = cal(x % smaller) + x // smaller * l\n    b = cal((larger - x) % smaller) + l + 1 + (larger - x) // smaller * l\n    res[x] = min(a, b)\n    return res[x]\nprint(cal(n))", "dp = {}\n\ndef solve(x):\n    if x == 0:\n        return 0\n    if x in dp.keys():\n        return dp[x]\n    limit = 1\n    cnt = 1\n    while limit <= x:\n        limit = limit * 10 + 1\n        cnt += 1\n    prv = limit // 10\n    c1 = solve(x % prv) + x // prv * (cnt - 1)\n    c2 = solve((limit - x) % prv) + cnt + (cnt - 1) * ((limit - x) // prv)\n    dp[x] = min(c1, c2)\n    return min(c1, c2)\nn = int(input())\nprint(solve(n))", "import math\nfrom collections import defaultdict\nn = input()\nopt = defaultdict(lambda : 1000000000.0)\n\ndef calc(s, cost):\n    if cost >= opt[s]:\n        return 1000000000.0\n    opt[s] = cost\n    if cost + min(int(s[0]), 4) * len(s) > opt['0']:\n        return 1000000000.0\n    if s == '0':\n        return cost\n    if s[0] < '6':\n        return calc(str(abs(int(s) - int('1' * len(s)))), cost + len(s))\n    if s[0] > '6':\n        return calc(str(int('1' * (len(s) + 1)) - int(s)), cost + len(s) + 1)\n    a = calc(str(abs(int(s) - int('1' * len(s)))), cost + len(s))\n    b = calc(str(int('1' * (len(s) + 1)) - int(s)), cost + len(s) + 1)\n    return min(a, b)\ncalc(n, 0)\nprint(opt['0'])", "memo = {}\n\ndef solve(n):\n    if n <= 6:\n        return n\n    elif n <= 11:\n        return 2 + (11 - n)\n    elif n in memo:\n        return memo[n]\n    else:\n        digits = [int(c) for c in str(n)]\n        s = len(digits)\n        Ln = 10 ** s // 9\n        if n == Ln:\n            return s\n        if n < Ln:\n            Ln = Ln // 10\n            s -= 1\n        Un = 10 * Ln + 1\n        len1 = solve(n % Ln) + s * (n // Ln)\n        n2 = Un - n\n        len2 = solve(n2 % Ln) + s * (n2 // Ln) + s + 1\n        ans = min(len1, len2)\n        memo[n] = ans\n        return ans\nn = int(input())\nprint(solve(n))", "import math\nfrom collections import defaultdict\nn = input()\nopt = defaultdict(lambda : 1000000000.0)\n\ndef calc(s, cost):\n    if cost >= opt[s]:\n        return 1000000000.0\n    opt[s] = cost\n    if cost + min(int(s[0]), 4) * len(s) > opt['0']:\n        return 1000000000.0\n    if s == '0':\n        return cost\n    if s[0] < '4':\n        return calc(str(abs(int(s) - int('1' * len(s)))), cost + len(s))\n    if s[0] > '6':\n        return calc(str(int('1' * (len(s) + 1)) - int(s)), cost + len(s) + 1)\n    a = calc(str(abs(int(s) - int('1' * len(s)))), cost + len(s))\n    b = calc(str(int('1' * (len(s) + 1)) - int(s)), cost + len(s) + 1)\n    return min(a, b)\ncalc(n, 0)\nprint(opt['0'])", "def divisao(n):\n    if n == 0:\n        return 0\n    valor = 1\n    count = 1\n    while 10 * valor + 1 <= n:\n        valor *= 10\n        valor += 1\n        count += 1\n    if n <= 5 * valor:\n        return divisao(n - valor) + count\n    if n > 6 * valor:\n        return divisao(10 * valor + 1 - n) + count + 1\n    ans1 = divisao(n - valor) + count\n    ans2 = divisao(10 * valor + 1 - n) + count + 1\n    return min(ans1, ans2)\nn = int(input())\nprint(divisao(n))"]