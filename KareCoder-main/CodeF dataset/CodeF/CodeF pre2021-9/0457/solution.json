["import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef ok(a, b):\n    cnt = 0\n    for i in range(5):\n        if a[i] < b[i]:\n            cnt += 1\n    return True if cnt >= 3 else False\n\ndef solve():\n    n = I()\n    a = []\n    for _ in range(n):\n        a.append(L())\n    ans = 0\n    for i in range(1, n):\n        if not ok(a[ans], a[i]):\n            ans = i\n    for i in range(n):\n        if i == ans:\n            continue\n        if not ok(a[ans], a[i]):\n            return -1\n    return ans + 1\nfor _ in range(I()):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef check(prev, new):\n    z = 0\n    for x in range(5):\n        if prev[x] > new[x]:\n            z += 1\n    return z > 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    winner = 0\n    for i in range(1, n):\n        if check(arr[winner], arr[i]):\n            winner = i\n    flag = True\n    for j in range(n):\n        if check(arr[winner], arr[j]):\n            print(-1)\n            flag = False\n            break\n    if flag:\n        print(winner + 1)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        data = []\n        for i in range(n):\n            data.append(get_list())\n        ind = 0\n        for i in range(1, n, 1):\n            count = 0\n            for j in range(5):\n                if data[i][j] < data[ind][j]:\n                    count += 1\n            if count >= 3:\n                ind = i\n        f = 0\n        for i in range(n):\n            if i != ind:\n                count = 0\n                for j in range(5):\n                    if data[ind][j] < data[i][j]:\n                        count += 1\n                if count <= 2:\n                    f = 1\n                    break\n        if f == 1:\n            get_print_int(-1)\n        else:\n            get_print_int(ind + 1)\nsolve()", "def is_superior(res1, res2):\n    count = 0\n    for (x, y) in zip(res1, res2):\n        if x < y:\n            count += 1\n    return count >= 3\n\ndef solve():\n    n = int(input())\n    athlete___results = [[int(x) for x in input().split()] for _ in range(n)]\n    curr_candidate = 0\n    for (athlete, results) in enumerate(athlete___results):\n        if athlete == curr_candidate:\n            continue\n        curr_best = athlete___results[curr_candidate]\n        if is_superior(curr_best, results):\n            continue\n        else:\n            curr_candidate = athlete\n    for (athlete, results) in enumerate(athlete___results):\n        if athlete == curr_candidate:\n            continue\n        curr_best = athlete___results[curr_candidate]\n        if is_superior(curr_best, results):\n            continue\n        else:\n            print(-1)\n            return\n    print(curr_candidate + 1)\nfor _ in range(int(input())):\n    solve()", "def check_if_placings_2_is_better(placing_1, placing_2):\n    better_placings = 0\n    for (pl_1, pl_2) in zip(placing_1, placing_2):\n        if pl_2 < pl_1:\n            better_placings += 1\n    if better_placings >= 3:\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    best_participant_placings = tuple(map(int, input().split()))\n    res = 1\n    participant_placings = [best_participant_placings]\n    for i in range(2, n + 1):\n        placings = tuple(map(int, input().split()))\n        participant_placings.append(placings)\n        if check_if_placings_2_is_better(best_participant_placings, placings):\n            best_participant_placings = placings\n            res = i\n    for placings in participant_placings:\n        if check_if_placings_2_is_better(best_participant_placings, placings):\n            res = -1\n            break\n    print(res)", "cases = int(input())\n\ndef func():\n    list_athletes = []\n    for a in range(athletes):\n        list_athletes.append([int(x) for x in input().split()])\n    best_athlete = list_athletes[0]\n    best_index = 1\n    for l in range(2):\n        for k in range(athletes):\n            better_counter = 0\n            curr_athlete = list_athletes[k]\n            for j in range(5):\n                if curr_athlete[j] < best_athlete[j]:\n                    better_counter += 1\n            if better_counter >= 3:\n                best_athlete = curr_athlete\n                best_index = k + 1\n                if l == 1:\n                    print(-1)\n                    return None\n    print(best_index)\nfor i in range(cases):\n    athletes = int(input())\n    best_index = 1\n    func()", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, mat):\n    i = 0\n    for j in range(1, n):\n        c = 0\n        for k in range(5):\n            if mat[j][k] < mat[i][k]:\n                c += 1\n        if c >= 3:\n            i = j\n    for j in range(n):\n        if i != j:\n            c = 0\n            for k in range(5):\n                if mat[j][k] < mat[i][k]:\n                    c += 1\n            if c >= 3:\n                print(-1)\n                return\n    print(i + 1)\nfor _ in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append(int_arr())\n    solve(n, mat)", "for _ in range(int(input())):\n    n = int(input())\n    mat = [list(map(int, input().split())) for i in range(n)]\n    best = 0\n    for guy in range(1, n):\n        if sum((i < j for (i, j) in zip(mat[guy], mat[best]))) > 2:\n            best = guy\n    for guy in range(n):\n        if guy != best:\n            if sum((i < j for (i, j) in zip(mat[guy], mat[best]))) > 2:\n                best = -2\n                break\n    print(best + 1)", "def main():\n    t = int(input())\n    for i in range(t):\n        c = int(input())\n        m = []\n        ind = -1\n        t = True\n        last = [999999, 999999, 999999, 999999, 999999]\n        for j in range(c):\n            now = list(map(int, input().split()))\n            m.append(now)\n            k = 0\n            for h in range(5):\n                if now[h] < last[h]:\n                    k += 1\n            if k >= 3:\n                last = now\n                ind = j + 1\n        for j in range(c):\n            k = 0\n            for h in range(5):\n                if m[j][h] < last[h]:\n                    k += 1\n            if k >= 3:\n                t = False\n                break\n        if t:\n            print(ind)\n        else:\n            print(-1)\nmain()", "def solve():\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split(' '))))\n    cur = 0\n    for i in range(n):\n        b = 0\n        for j in range(5):\n            if matrix[i][j] < matrix[cur][j]:\n                b += 1\n        if b >= 3:\n            cur = i\n    for i in range(n):\n        b = 0\n        for j in range(5):\n            if matrix[i][j] < matrix[cur][j]:\n                b += 1\n        if b >= 3:\n            print(-1)\n            return\n    print(cur + 1)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef is_superior(x, y, dct):\n    cnt = 0\n    for i in range(5):\n        if dct[x][i] <= dct[y][i]:\n            cnt += 1\n    if cnt > 2:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    dct = {}\n    for x in range(1, n + 1):\n        dct[x] = [int(y) for y in input().strip().split()]\n    first = 1\n    for x in range(1, n + 1):\n        if is_superior(first, x, dct):\n            continue\n        else:\n            first = x\n    for x in range(1, n + 1):\n        if is_superior(first, x, dct):\n            continue\n        else:\n            return -1\n    return first\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def solve():\n    tt = int(input())\n    arr = []\n    for x in range(tt):\n        arr.append(list(map(int, input().split(' '))))\n    win = 0\n    for x in range(1, tt):\n        ct = 0\n        for y in range(5):\n            if arr[win][y] < arr[x][y]:\n                ct += 1\n        if ct < 3:\n            win = x\n    ct = 0\n    for x in range(tt):\n        if x != win:\n            cnt = 0\n            for y in range(5):\n                if arr[win][y] < arr[x][y]:\n                    cnt += 1\n            if cnt < 3:\n                print(-1)\n                return\n    print(win + 1)\n    return\nfor _ in range(int(input())):\n    solve()", "import sys\n\ndef debug(*a):\n    print(a, file=sys.stderr, flush=True)\n\ndef read(typ=str):\n    return typ(input())\n\ndef read_arr(typ):\n    return list(map(typ, input().split()))\n\ndef solve(TEST_CASE):\n    n = read(int)\n    m = 5\n    mat = []\n    for i in range(n):\n        mat.append(read_arr(int))\n    best_index = 0\n    for i in range(1, n):\n        cnt = 0\n        for j in range(5):\n            if mat[best_index][j] < mat[i][j]:\n                cnt += 1\n        if cnt < 3:\n            best_index = i\n    for i in range(n):\n        cnt = 0\n        if i != best_index:\n            for j in range(5):\n                if mat[best_index][j] < mat[i][j]:\n                    cnt += 1\n            if cnt < 3:\n                print(-1)\n                return\n    print(best_index + 1)\nt = int(input())\nfor i in range(1, t + 1):\n    solve(i)", "def is_a_better_than_b(a, b):\n    if a == b:\n        return True\n    count = 0\n    for i in range(5):\n        if a[i] <= b[i]:\n            count += 1\n    return True if count >= 3 else False\n\ndef solve():\n    n = int(input())\n    arr = []\n    for i in range(n):\n        temp = [int(item) for item in input().strip().split()]\n        arr.append(temp)\n    if n == 1:\n        print(1)\n        return\n    candidate = 0\n    j = 1\n    while j < n:\n        if is_a_better_than_b(arr[candidate], arr[j]):\n            j += 1\n        else:\n            candidate = j\n            j = candidate + 1\n    if all([is_a_better_than_b(arr[candidate], arr[i]) for i in range(n)]):\n        print(candidate + 1)\n    else:\n        print(-1)\nt = 1\nt = int(input())\nfor i in range(t):\n    solve()", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = sys.stdin.readline\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    poss = [inf] * 5\n    idx = -1\n    p = []\n    for _ in range(ipn()):\n        a = ipl()\n        if sum((poss[i] < a[i] for i in range(5))) < 3:\n            poss = a\n            idx = _ + 1\n        p.append(a)\n    for a in p:\n        if a == poss:\n            continue\n        if sum((poss[i] < a[i] for i in range(5))) < 3:\n            print(-1)\n            return\n    print(idx)\nt = ipn()\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef fun(mat, n):\n    w = 0\n    for i in range(1, n):\n        count_w = 0\n        count_i = 0\n        for j in range(5):\n            if mat[w][j] < mat[i][j]:\n                count_w += 1\n            else:\n                count_i += 1\n        if count_i > count_w:\n            w = i\n    for i in range(n):\n        if i != w:\n            count_w = 0\n            count_i = 0\n            for j in range(5):\n                if mat[w][j] < mat[i][j]:\n                    count_w += 1\n                else:\n                    count_i += 1\n            if count_i > count_w:\n                return -1\n    return w + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    print(fun(mat, n))", "for t in range(int(input())):\n    n = int(input())\n    pob = [500000001, 5000000001, 500000001, 500000001, 500000001]\n    r = -1\n    k = []\n    for j in range(n):\n        v = list(map(int, input().split()))\n        c = 0\n        for kk in zip(pob, v):\n            if kk[0] < kk[1]:\n                c += 1\n        if c < 3:\n            pob = v[:]\n            r = j + 1\n        k.append(v)\n    no = False\n    for v in k:\n        c = 0\n        for kk in zip(pob, v):\n            if kk[0] <= kk[1]:\n                c += 1\n        if c < 3:\n            print(-1)\n            no = True\n            break\n    if not no:\n        print(r)", "def readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    r = [list(readline()) for __ in range(n)]\n\n    def is_better(a, b):\n        return sum((ra < rb for (ra, rb) in zip(r[a], r[b]))) >= 3\n    s = list(range(n))\n    w = s.pop()\n    while s:\n        l = s.pop()\n        if is_better(l, w):\n            w = l\n    print(w + 1 if all((is_better(w, l) for l in range(n) if l != w)) else -1)\nt = int(input())\nfor __ in range(t):\n    solve()", "def solve(a1, a2):\n    aa1 = 0\n    aa2 = 0\n    for (i, j) in zip(a1, a2):\n        if i < j:\n            aa1 += 1\n        else:\n            aa2 += 1\n    if aa1 > aa2:\n        return a1\n    else:\n        return a2\ncases = int(input())\nfor _ in range(cases):\n    mx = []\n    num = int(input())\n    for _ in range(num):\n        mx.append(list(map(int, input().split())))\n    winner1 = mx[0]\n    for i in range(num):\n        winner1 = solve(winner1, mx[i])\n    for row in mx:\n        winner2 = solve(winner1, row)\n        if winner2 != winner1:\n            print(-1)\n            break\n    else:\n        print(mx.index(winner1) + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        r = list(map(int, input().split()))\n        a.append(r)\n    b = 0\n    for j in range(n):\n        if (a[j][0] < a[b][0]) + (a[j][1] < a[b][1]) + (a[j][2] < a[b][2]) + (a[j][3] < a[b][3]) + (a[j][4] < a[b][4]) >= 3:\n            b = j\n    ans = b + 1\n    for j in range(n):\n        if (a[j][0] < a[b][0]) + (a[j][1] < a[b][1]) + (a[j][2] < a[b][2]) + (a[j][3] < a[b][3]) + (a[j][4] < a[b][4]) >= 3:\n            ans = -1\n    print(ans)", "def greater(List1, List2):\n    (a1, a2) = (0, 0)\n    for i in range(5):\n        if List1[i] < List2[i]:\n            a1 += 1\n        else:\n            a2 += 1\n    if a1 > a2:\n        return 1\n    else:\n        return 2\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    winner = 0\n    init = list(map(int, input().rstrip().split()))\n    score = init\n    array = [init]\n    for i in range(1, n):\n        array2 = list(map(int, input().rstrip().split()))\n        array.append(array2)\n        if greater(score, array2) == 2:\n            score = array2\n            winner = i\n    for item in array:\n        if greater(item, score) == 1:\n            print(-1)\n            break\n    else:\n        print(winner + 1)", "def solve(n, rank):\n    cand = 0\n    for i in range(1, n):\n        cnt = 0\n        for r in range(5):\n            if rank[i][r] > rank[cand][r]:\n                cnt += 1\n        if cnt <= 2:\n            cand = i\n    for i in range(n):\n        cnt = 0\n        if i != cand:\n            for r in range(5):\n                if rank[cand][r] > rank[i][r]:\n                    cnt += 1\n            if cnt >= 3:\n                return -1\n    return cand + 1\nfor t in range(int(input())):\n    n = int(input())\n    rank = []\n    for i in range(n):\n        rank.append(list(map(int, input().split())))\n    print(solve(n, rank))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = []\n    for __ in range(n):\n        data.append(list(map(int, input().split())))\n    maxv = data[0]\n    maxi = 0\n    for i in range(n):\n        cnt = 0\n        for k in range(5):\n            if maxv[k] > data[i][k]:\n                cnt += 1\n        if cnt >= 3:\n            maxv = data[i]\n            maxi = i\n    flg = True\n    for i in range(n):\n        cnt = 0\n        for k in range(5):\n            if maxv[k] > data[i][k]:\n                cnt += 1\n        if cnt >= 3:\n            flg = False\n            break\n    if not flg:\n        print(-1)\n    else:\n        print(maxi + 1)", "def cmp(x, y):\n    x = a[x]\n    y = a[y]\n    xx = 0\n    for i in range(5):\n        if x[i] < y[i]:\n            xx += 1\n    return xx > 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    candidates = list(range(n))\n    best = 0\n    while candidates:\n        _next = candidates.pop()\n        if cmp(_next, best):\n            best = _next\n    notfound = False\n    for _next in range(n):\n        if cmp(_next, best):\n            notfound = True\n            break\n    if notfound:\n        print(-1)\n    else:\n        print(best + 1)", "from math import inf\n\ndef find_best(A):\n    n = len(A)\n    best_tab = [inf] * 5\n    best_index = -1\n    for i in range(n):\n        counter = 0\n        for j in range(5):\n            if best_tab[j] > A[i][j]:\n                counter += 1\n            if counter >= 3:\n                best_tab = A[i]\n                best_index = i\n    for i in range(n):\n        counter = 0\n        for j in range(5):\n            if best_tab[j] > A[i][j]:\n                counter += 1\n            if counter == 3:\n                return -1\n    return best_index + 1\nt = int(input())\nresult = [0] * t\nfor a in range(t):\n    n = int(input())\n    tab = [0] * n\n    for i in range(n):\n        tab[i] = list(map(int, input().split()))\n    result[a] = find_best(tab)\nfor a in range(t):\n    print(result[a])", "R = lambda : [*map(int, input().split())]\nf = lambda i, j: sum((x > y for (x, y) in zip(a[i], a[j]))) < 3\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = 0\n    for i in r:\n        a += (R(),)\n        m = (m, i)[f(i, m)]\n    print((-1, m + 1)[all((f(m, i) for i in r))])", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for i in range(n)]\n    c = 0\n    for w in range(2):\n        for i in range(n):\n            if i != c:\n                d = 0\n                for j in range(5):\n                    d += a[c][j] < a[i][j]\n                if d < 3:\n                    c = i\n    for i in range(n):\n        if i != c:\n            d = 0\n            for j in range(5):\n                d += a[c][j] < a[i][j]\n            if d < 3:\n                print(-1)\n                return\n    print(c + 1)\nfor i in range(int(input())):\n    solve()", "import sys\nimport math\ninput = sys.stdin.readline\nimp = 'IMPOSSIBLE'\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    r = []\n    w = [50001 for i in range(5)]\n    ww = -1\n    for i in range(n):\n        a = list(map(int, input().split(' ')))\n        r.append(a)\n        old = 0\n        new = 0\n        for j in range(5):\n            if a[j] < w[j]:\n                new += 1\n            else:\n                old += 1\n        if new > old:\n            ww = i\n            w = a.copy()\n    for i in range(ww):\n        old = 0\n        new = 0\n        for j in range(5):\n            if r[i][j] < w[j]:\n                new += 1\n            else:\n                old += 1\n        if new > old:\n            ww = -1\n            break\n    if ww > -1:\n        ww += 1\n    print(ww)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        r = list(map(int, input().split()))\n        a.append(r)\n    b = 0\n    for j in range(n):\n        if (a[j][0] < a[b][0]) + (a[j][1] < a[b][1]) + (a[j][2] < a[b][2]) + (a[j][3] < a[b][3]) + (a[j][4] < a[b][4]) >= 3:\n            b = j\n    ans = b + 1\n    for j in range(n):\n        if (a[j][0] < a[b][0]) + (a[j][1] < a[b][1]) + (a[j][2] < a[b][2]) + (a[j][3] < a[b][3]) + (a[j][4] < a[b][4]) >= 3:\n            ans = -1\n    print(ans)", "def readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    r = [list(readline()) for __ in range(n)]\n\n    def is_better(a, b):\n        return sum((ra <= rb for (ra, rb) in zip(r[a], r[b]))) >= 3\n    w = 0\n    for l in range(1, n):\n        if is_better(l, w):\n            w = l\n    print(w + 1 if all((is_better(w, l) for l in range(n))) else -1)\nt = int(input())\nfor __ in range(t):\n    solve()", "from math import ceil, gcd, inf, sqrt\nfrom bisect import bisect_left\nfrom collections import Counter\nimport sys\nmod = 1000000007\n\ndef pro(arr):\n    n = len(arr)\n    if n == 1:\n        print(1)\n        return\n    cand = 0\n    for i in range(1, n):\n        c = 0\n        for j in range(5):\n            if arr[i][j] < arr[cand][j]:\n                c += 1\n        if c >= 3:\n            cand = i\n    cou = 0\n    for i in range(n):\n        if i != cand:\n            c = 0\n            for j in range(5):\n                if arr[cand][j] < arr[i][j]:\n                    c += 1\n            if c >= 3:\n                cou += 1\n    print(cand + 1 if cou == n - 1 else -1)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for j in range(n):\n        arr.append(list(map(int, input().split())))\n    pro(arr)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in input().split()])\n    ans = 0\n    for i in range(1, n):\n        c = 0\n        if a[i][0] < a[ans][0]:\n            c += 1\n        if a[i][1] < a[ans][1]:\n            c += 1\n        if a[i][2] < a[ans][2]:\n            c += 1\n        if a[i][3] < a[ans][3]:\n            c += 1\n        if a[i][4] < a[ans][4]:\n            c += 1\n        if c >= 3:\n            ans = i\n    for i in range(ans):\n        c = 0\n        if a[i][0] < a[ans][0]:\n            c += 1\n        if a[i][1] < a[ans][1]:\n            c += 1\n        if a[i][2] < a[ans][2]:\n            c += 1\n        if a[i][3] < a[ans][3]:\n            c += 1\n        if a[i][4] < a[ans][4]:\n            c += 1\n        if c >= 3:\n            ans = -1\n            break\n    if ans == -1:\n        print(ans)\n    else:\n        print(ans + 1)", "for _ in range(int(input())):\n    n = int(input())\n    m = [list(map(int, input().split())) for i in range(n)]\n    a = 0\n    for j in range(1, n):\n        if sum([1 for i in range(5) if m[a][i] < m[j][i]]) < 3:\n            a = j\n    print(a + 1 if min([sum([1 for i in range(5) if m[a][i] <= m[j][i]]) for j in range(n)]) >= 3 else -1)", "def findBest(i, j):\n    count = 0\n    for k in range(5):\n        if a[i][k] < a[j][k]:\n            count += 1\n    if count >= 3:\n        return True\n    return False\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        aa = list(map(int, input().split()))\n        a.append(aa)\n    ans = 0\n    for i in range(1, n):\n        if findBest(i, ans):\n            ans = i\n    flag = 0\n    for i in range(n):\n        if i != ans:\n            if not findBest(ans, i):\n                flag = 1\n                break\n    if flag:\n        ans = -2\n    print(ans + 1)", "R = lambda : [*map(int, input().split())]\nf = lambda i: sum((x > y for (x, y) in zip(a[m], a[i]))) < 3\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = 0\n    for i in r:\n        a += (R(),)\n        m = (i, m)[f(i)]\n    print((-1, m + 1)[all(map(f, r))])", "def solve(n, rank):\n    cand = 0\n    for i in range(1, n):\n        cnt = 0\n        for r in range(5):\n            if rank[i][r] > rank[cand][r]:\n                cnt += 1\n        if cnt <= 2:\n            cand = i\n    for i in range(cand - 1, -1, -1):\n        cnt = 0\n        for r in range(5):\n            if rank[cand][r] > rank[i][r]:\n                cnt += 1\n        if cnt >= 3:\n            return -1\n    return cand + 1\nfor t in range(int(input())):\n    n = int(input())\n    rank = []\n    for i in range(n):\n        rank.append(list(map(int, input().split())))\n    print(solve(n, rank))", "T = int(input())\n\ndef win(r1, r2):\n    cnt = 0\n    for match in range(5):\n        if r1[match] < r2[match]:\n            cnt += 1\n    return cnt >= 3\n\ndef verify(candidate, rs):\n    for r in rs:\n        if win(r, candidate):\n            return False\n    return True\nfor t in range(T):\n    n = int(input())\n    rs = []\n    for i in range(n):\n        r = list(map(int, input().split()))\n        rs.append(r)\n    candidate = None\n    candidate_index = -1\n    for i in range(n):\n        if candidate is None or win(rs[i], candidate):\n            candidate = rs[i]\n            candidate_index = i + 1\n    if verify(candidate, rs):\n        print(candidate_index)\n    else:\n        print(-1)", "def answer(a):\n    n = len(ath_sc)\n    if n == 1:\n        return 1\n    answer = -1\n    gold = 0\n    for i in range(1, n):\n        num = 0\n        for j in range(5):\n            if a[i][j] < a[gold][j]:\n                num += 1\n        if num >= 3:\n            gold = i\n    i = 0\n    for i in range(n):\n        num = 0\n        if i != gold:\n            for j in range(5):\n                if a[i][j] < a[gold][j]:\n                    num += 1\n            if num >= 3:\n                res = -1\n                break\n    if i == n - 1:\n        res = gold + 1\n    return res\ntc = int(input())\nfor i in range(tc):\n    ath_sc = []\n    no_ath = int(input())\n    for j in range(no_ath):\n        ath_sc.append(list(map(int, input().split())))\n    ath_ans = answer(ath_sc)\n    print(ath_ans)", "def cmp(curr_ath, winner):\n    count = 0\n    for match in range(5):\n        if curr_ath[match] < winner[match]:\n            count += 1\n        if count == 3:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ath = []\n    for j in range(n):\n        rnk = list(map(int, input().strip().split()))\n        ath.append(rnk)\n    gld = 0\n    for j in range(1, n):\n        if cmp(ath[j], ath[gld]):\n            gld = j\n    for j in range(n):\n        if j != gld and cmp(ath[j], ath[gld]):\n            gld = -2\n            break\n    print(gld + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = [[0] * 5] * n\n    w = -1\n    w_res = [1000000000.0] * 5\n    for i in range(n):\n        (*r[i],) = map(int, input().split())\n        num_lead = 0\n        for j in range(5):\n            if r[i][j] < w_res[j]:\n                num_lead += 1\n        if num_lead >= 3:\n            w = i\n            w_res = r[i] + []\n    for i in range(n):\n        num_lead = 0\n        for j in range(5):\n            if r[i][j] < w_res[j]:\n                num_lead += 1\n        if num_lead >= 3:\n            w = -2\n    print(w + 1)", "def ans(x):\n    for g in range(N):\n        if x != g:\n            cn = 0\n            for h in range(5):\n                if R[x][h] < R[g][h]:\n                    cn += 1\n            if cn < 3:\n                return -1\n    return x + 1\nfor _ in range(int(input())):\n    N = int(input())\n    R = [[] for _ in range(N)]\n    for i in range(N):\n        R[i] = list(map(int, input().split()))\n    INF = 10 ** 5\n    SR = [INF] * 5\n    RES = -1\n    for i in range(N):\n        cnt = 0\n        for j in range(5):\n            if R[i][j] <= SR[j]:\n                cnt += 1\n        if cnt >= 3:\n            SR = R[i]\n            RES = i\n    print(ans(RES))", "for _ in range(int(input())):\n    n = int(input())\n    m = [list(map(int, input().split())) for i in range(n)]\n    a = 0\n    for j in range(1, n):\n        if sum([1 for i in range(5) if m[a][i] < m[j][i]]) < 3:\n            a = j\n    print(a + 1 if min([sum([1 for i in range(5) if m[a][i] <= m[j][i]]) for j in range(n)]) >= 3 else -1)", "def beats(x, y, r):\n    count = 0\n    for j in range(5):\n        if r[x][j] < r[y][j]:\n            count += 1\n    return count >= 3\n\ndef solution(r, n):\n    cand = 1\n    for i in range(n):\n        if beats(i, cand - 1, r):\n            cand = i + 1\n    for i in range(n):\n        if beats(i, cand - 1, r):\n            return -1\n    return cand\nfor _ in range(int(input())):\n    r = []\n    n = int(input())\n    for __ in range(n):\n        r.append(list(map(int, input().split())))\n    print(solution(r, n))", "R = lambda : [*map(int, input().split())]\nf = lambda i: sum((x > y for (x, y) in zip(a[m], a[i]))) < 3\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = 0\n    for i in r:\n        a += (R(),)\n        m = (i, m)[f(i)]\n    print((-1, m + 1)[all((f(i) for i in r))])", "T = int(input())\n\ndef check(a1, a2):\n    count = 0\n    for i in range(5):\n        if arr[a1][i] < arr[a2][i]:\n            count += 1\n    if count >= 3:\n        return True\n    return False\nfor case in range(T):\n    n = int(input())\n    arr = [[0] * 5 for ele in range(n)]\n    for i in range(n):\n        (a1, a2, a3, a4, a5) = map(int, input().split())\n        arr[i][0] = a1\n        arr[i][1] = a2\n        arr[i][2] = a3\n        arr[i][3] = a4\n        arr[i][4] = a5\n    champ = 0\n    for i in range(1, n):\n        if check(champ, i):\n            continue\n        else:\n            champ = i\n    flag = True\n    for i in range(champ):\n        if check(i, champ):\n            flag = False\n            print(-1)\n            break\n    if flag:\n        print(champ + 1)", "from typing import BinaryIO\n\ndef main():\n    for i in range(num()):\n        solve()\n\ndef solve():\n    n = num()\n    aths = []\n    for i in range(n):\n        aths.append(array())\n    ans = 0\n    for i in range(1, n):\n        same = compare(aths[ans], aths[i])\n        if not same:\n            ans = i\n    for i in range(n):\n        if i != ans and (not compare(aths[ans], aths[i])):\n            print(-1)\n            return\n    print(ans + 1)\n\ndef compare(ans, comp):\n    ansc = 0\n    compc = 0\n    for i in range(5):\n        if ans[i] < comp[i]:\n            ansc += 1\n        elif comp[i] < ans[i]:\n            compc += 1\n        else:\n            print(-1)\n            quit()\n    return ansc > compc\nimport itertools\nimport bisect, math\nimport copy\nimport fractions\n\ndef sumx(x):\n    if x % 2 == 0:\n        return (x + 1) * (x // 2)\n    else:\n        return (x + 1) * ((x - 1) // 2) + (x + 1) // 2\n\ndef s(e):\n    return sum(e)\n\ndef l(e):\n    return len(e)\n\ndef num():\n    return int(input())\n\ndef array():\n    return list(map(int, input().split()))\n\ndef pair():\n    return map(int, input().split())\n\ndef p(x='', end='\\n'):\n    return print(x, end=end)\n\ndef sort(a):\n    return sorted(a)\n\ndef fpair(x):\n    return str(fractions.Fraction(x)).split('/')\n\ndef parray(a):\n    for i in a:\n        p(i, end=' ')\n    p()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    m = [list(map(int, input().split())) for i in range(n)]\n    a = 0\n    for j in range(1, n):\n        if sum([1 for i in range(5) if m[a][i] < m[j][i]]) < 3:\n            a = j\n    print(a + 1 if min([sum([1 for i in range(5) if m[a][i] <= m[j][i]]) for j in range(n)]) >= 3 else -1)", "def greater(i, j, a):\n    win = 0\n    for k in range(5):\n        if a[i][k] < a[j][k]:\n            win += 1\n    return win >= 3\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [list(map(int, input().split())) for i in range(n)]\n    ans = 0\n    for i in range(1, n):\n        if greater(i, ans, a):\n            ans = i\n    valid = True\n    for i in range(n):\n        if i == ans:\n            continue\n        if not greater(ans, i, a):\n            valid = False\n            break\n    if valid:\n        print(ans + 1)\n    else:\n        print(-1)", "def compare(r, i, j):\n    cnt = 0\n    for i1 in range(5):\n        if r[i][i1] < r[j][i1]:\n            cnt += 1\n    return cnt >= 3\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [[] for i in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    cur = 0\n    for i in range(1, n):\n        if not compare(a, cur, i):\n            cur = i\n    for i in range(n):\n        if i != cur and (not compare(a, cur, i)):\n            cur = -2\n            break\n    print(cur + 1)", "def win(a, b):\n    x = 0\n    for i in range(5):\n        if a[i] < b[i]:\n            x += 1\n    if x > 2:\n        return True\n    else:\n        return False\nre = []\nfor i in range(int(input())):\n    n = int(input())\n    result = []\n    for j in range(n):\n        r = list(map(int, input().split()))\n        result.append(r)\n    tmp = 0\n    m = 1\n    w = 0\n    while m < n:\n        if win(result[m], result[w]):\n            w = m\n        m += 1\n    for k in range(n):\n        if win(result[w], result[k]):\n            tmp += 1\n    if tmp == n - 1:\n        re.append(w + 1)\n    else:\n        re.append(-1)\nfor v in re:\n    print(v)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        input()\n        print(1)\n        continue\n    ranks = []\n    for i in range(n):\n        ranks.append([int(r) for r in input().split(' ')])\n\n    def first_is_better(i1, i2):\n        betterness = 0\n        for (r1, r2) in zip(ranks[i1], ranks[i2]):\n            betterness += r1 < r2\n        return betterness >= 3\n\n    def eliminate(contestants):\n        result = []\n        lc = len(contestants)\n        if lc % 2 == 1:\n            result.append(contestants[-1])\n        for i in range(lc // 2):\n            i1 = contestants[2 * i]\n            i2 = contestants[2 * i + 1]\n            result.append(i1 if first_is_better(i1, i2) else i2)\n        return result\n    cur_cont = [i for i in range(n)]\n    while len(cur_cont) > 1:\n        cur_cont = eliminate(cur_cont)\n    candidate = cur_cont[0]\n    is_bad = False\n    for (i, rs) in enumerate(ranks):\n        if i == candidate:\n            continue\n        if first_is_better(i, candidate):\n            is_bad = True\n            break\n    print(-1 if is_bad else candidate + 1)", "def check(mat, win, n):\n    for i in range(n):\n        if i != win:\n            d = 0\n            for j in range(5):\n                if mat[i][j] > mat[win][j]:\n                    d += 1\n            if d < 3:\n                print(-1)\n                return\n    print(win + 1)\nfor t in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        tem = list(map(int, input().split()))\n        mat.append(tem)\n    if n == 1:\n        print(1)\n        continue\n    win = 0\n    for i in range(n):\n        if i != win:\n            d = 0\n            for j in range(5):\n                if mat[i][j] > mat[win][j]:\n                    d += 1\n            if d < 3:\n                win = i\n    flag = 1\n    check(mat, win, n)", "def readline():\n    return map(int, input().split())\nfor __ in range(int(input())):\n    n = int(input())\n    r = [(*readline(),) for __ in range(n)]\n\n    def is_better(a, b):\n        return sum((r[a][i] <= r[b][i] for i in range(5))) >= 3\n    w = 0\n    for l in range(n):\n        if is_better(l, w):\n            w = l\n    print(w + 1 if all((is_better(w, l) for l in range(n))) else -1)", "def readline():\n    return map(int, input().split())\nfor __ in range(int(input())):\n    n = int(input())\n    r = [(*readline(),) for __ in range(n)]\n\n    def is_better(a, b):\n        return sum((r[a][i] <= r[b][i] for i in range(5))) >= 3\n    w = 0\n    for l in range(n):\n        if is_better(l, w):\n            w = l\n    print(w + 1 if all((is_better(w, l) for l in range(n))) else -1)", "def f(a, b):\n    aa = 0\n    bb = 0\n    for x in range(5):\n        if arr[a][x] < arr[b][x]:\n            aa += 1\n        else:\n            bb += 1\n    if aa > bb:\n        return a\n    return b\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    flag = 1\n    if n == 1:\n        print(1)\n        continue\n    w = 0\n    for i in range(1, n):\n        w = f(w, i)\n    ans = w\n    for i in range(n):\n        if i != w:\n            if f(w, i) != w:\n                print(-1)\n                flag = 0\n                break\n    if flag == 1:\n        print(ans + 1)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        arr = []\n        (a, b, c, d, e) = map(int, input().split())\n        arr.append(a)\n        arr.append(b)\n        arr.append(c)\n        arr.append(d)\n        arr.append(e)\n        matrix.append(arr)\n    gold = 0\n    for i in range(1, n):\n        count = 0\n        if matrix[gold][0] > matrix[i][0]:\n            count += 1\n        if matrix[gold][1] > matrix[i][1]:\n            count += 1\n        if matrix[gold][2] > matrix[i][2]:\n            count += 1\n        if matrix[gold][3] > matrix[i][3]:\n            count += 1\n        if matrix[gold][4] > matrix[i][4]:\n            count += 1\n        if count >= 3:\n            gold = i\n    flag = 0\n    for i in range(n):\n        count = 0\n        if gold != i:\n            if matrix[gold][0] < matrix[i][0]:\n                count += 1\n            if matrix[gold][1] < matrix[i][1]:\n                count += 1\n            if matrix[gold][2] < matrix[i][2]:\n                count += 1\n            if matrix[gold][3] < matrix[i][3]:\n                count += 1\n            if matrix[gold][4] < matrix[i][4]:\n                count += 1\n            if count < 3:\n                print(-1)\n                flag = 1\n                break\n    if flag == 0:\n        print(gold + 1)", "R = lambda : [*map(int, input().split())]\nf = lambda i, j: sum((x <= y for (x, y) in zip(a[i], a[j]))) > 2\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = i = 0\n    for _ in r:\n        a += (R(),)\n        m = (m, i)[f(i, m)]\n        i += 1\n    print((-1, m + 1)[all((f(m, i) for i in r))])", "R = lambda : [*map(int, input().split())]\nf = lambda i, j: sum((x <= y for (x, y) in zip(a[i], a[j]))) > 2\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = 0\n    for i in r:\n        a += (R(),)\n        m = (m, i)[f(i, m)]\n    print((-1, m + 1)[all((f(m, i) for i in r))])", "R = lambda : [*map(int, input().split())]\nf = lambda i, j: sum((x > y for (x, y) in zip(a[i], a[j]))) < 3\n(t,) = R()\nwhile t:\n    t -= 1\n    r = range(R()[0])\n    a = []\n    m = 0\n    for i in r:\n        a += (R(),)\n        m = (m, i)[f(i, m)]\n    print((-1, m + 1)[all((f(m, i) for i in r))])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = [[] for _ in range(n)]\n    for i in range(n):\n        r[i] = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    athlete = 0\n    for i in range(1, n):\n        win = 0\n        for j in range(5):\n            if r[i][j] < r[athlete][j]:\n                win += 1\n        if win >= 3:\n            athlete = i\n    is_strongest = True\n    for i in range(n):\n        win = 0\n        for j in range(5):\n            if r[i][j] < r[athlete][j]:\n                win += 1\n        if win >= 3:\n            is_strongest = False\n            break\n    if is_strongest:\n        print(athlete + 1)\n    else:\n        print(-1)", "t = int(input())\n\ndef li(x, y):\n    c = 0\n    for i in range(5):\n        if x[i] < y[i]:\n            c += 1\n    if c >= 3:\n        return 1\n    return 0\nfor i in range(t):\n    n = int(input())\n    m = []\n    for j in range(n):\n        m.append([int(i) for i in input().split()])\n    mc = m[:]\n    ind = 1\n    for j in range(1, n):\n        if li(m[j - 1], m[j]):\n            (m[j], m[j - 1]) = (m[j - 1], m[j])\n    for j in range(n - 1):\n        if li(m[j], m[-1]):\n            print(-1)\n            break\n    else:\n        print(mc.index(m[-1]) + 1)", "import collections as cc\nimport bisect as bi\nimport heapq as hp\nimport math as mt\nimport itertools as it\nimport sys\nimport io, os\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n,) = I()\n    ar = [I()]\n    sup = 1\n    sar = ar[0]\n    for i in range(1, n):\n        ar.append(I())\n        score = 0\n        for j in range(5):\n            if sar[j] > ar[-1][j]:\n                score += 1\n        if score >= 3:\n            sup = i + 1\n            sar = ar[i]\n    for i in range(n):\n        score = sum((sar[j] > ar[i][j] for j in range(5)))\n        if score >= 3:\n            sup = -1\n            break\n    if sup != -1:\n        print(sup)\n    else:\n        print(-1)", "def rl():\n    return map(int, input().split())\nfor tt in range(0, int(input())):\n    n = int(input())\n    v = [(*rl(),) for __ in range(n)]\n    c = 0\n    for j in range(1, n):\n        cc = 0\n        for k in range(0, 5):\n            cc += v[j][k] < v[c][k]\n        if cc >= 3:\n            c = j\n    for j in range(0, n):\n        cc = 0\n        for k in range(0, 5):\n            cc += v[j][k] < v[c][k]\n        if cc >= 3:\n            c = -2\n            break\n    print(c + 1)", "for abcd in range(int(input())):\n    n = int(input())\n    ans = []\n    for i in range(n):\n        ai = list(map(int, input().split()))\n        ans.append(ai)\n    k = 0\n    x = 0\n    for j in range(n):\n        y = 0\n        for i in range(5):\n            if ans[j][i] < ans[k][i]:\n                y = y + 1\n        if y >= 3:\n            k = j\n    for j in range(n):\n        y = 0\n        for i in range(5):\n            if ans[j][i] < ans[k][i]:\n                y = y + 1\n        if y >= 3:\n            x = 1\n            break\n    if n == 1:\n        print(1)\n        continue\n    if x == 1:\n        print(-1)\n    else:\n        print(k + 1)", "def greater(a, b):\n    return sum((x <= y for (x, y) in zip(a, b))) >= 3\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    scores = []\n    (cur, idx) = ([50001] * 5, -1)\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        if greater(temp, cur):\n            (cur, idx) = (temp, i)\n        scores.append(temp)\n    if idx != -1:\n        for temp in scores:\n            if not greater(cur, temp):\n                idx = -1\n                break\n    print(idx + 1 if idx != -1 else -1)", "for _ in range(int(input())):\n    n = int(input())\n    race = [[] * 5]\n    win = None\n    al = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        if win == None:\n            win = 1\n            value = l[:]\n        else:\n            co = 0\n            for k in range(5):\n                if value[k] < l[k]:\n                    co += 1\n            if co < 3:\n                win = i + 1\n                value = l[:]\n        al.append(l)\n    flag = win\n    for i in al:\n        co = 0\n        if i == value:\n            continue\n        for k in range(5):\n            if i[k] > value[k]:\n                co += 1\n        if co < 3:\n            flag = -1\n            break\n    print(flag)", "import sys\ninput = sys.stdin.readline\n\ndef superior(a, b):\n    if a is None:\n        return b\n    if b is None:\n        return a\n    count = 0\n    count_b = 0\n    for (a_, b_) in zip(a[1:], b[1:]):\n        if a_ < b_:\n            count += 1\n        if a_ > b_:\n            count_b += 1\n    if count >= 3:\n        return a\n    if count_b >= 3:\n        return b\n    return None\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    l = []\n    for i in range(n):\n        (r1, r2, r3, r4, r5) = map(int, input().split())\n        l.append([i, r1, r2, r3, r4, r5])\n    s = None\n    for i in range(n):\n        s = superior(l[i], s)\n    if not s:\n        print(-1)\n        continue\n    for i in range(n):\n        if l[i][0] == s[0]:\n            continue\n        if s != superior(s, l[i]) or s is None:\n            print(-1)\n            break\n        s = superior(s, l[i])\n    else:\n        print(s[0] + 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    st = []\n    for i in range(n):\n        st.append(i)\n\n    def f(a, b):\n        c = 0\n        for i in range(5):\n            if a[i] < b[i]:\n                c += 1\n        if c >= 3:\n            return 1\n        return 0\n    while len(st) > 1:\n        o = st.pop()\n        t = st.pop()\n        if f(arr[o], arr[t]):\n            st.append(o)\n        else:\n            st.append(t)\n    s = st[-1]\n    for i in range(n):\n        if i == s:\n            continue\n        if f(arr[i], arr[s]):\n            s = -1\n            break\n    if s == -1:\n        print(s)\n    else:\n        print(s + 1)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        ans.append(l)\n    pos = 0\n    for i in range(1, n):\n        c = 0\n        for j in range(5):\n            if ans[i][j] < ans[pos][j]:\n                c += 1\n        if c >= 3:\n            pos = i\n    for i in range(n):\n        if pos == i:\n            continue\n        c = 0\n        for j in range(5):\n            if ans[i][j] < ans[pos][j]:\n                c += 1\n        if c >= 3:\n            print(-1)\n            break\n    else:\n        print(pos + 1)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().strip().split(' '))))\n    ind = 0\n    for i in range(1, n):\n        val = 0\n        for j in range(5):\n            if l[i][j] < l[ind][j]:\n                val += 1\n        if val >= 3:\n            ind = i\n    for i in range(n):\n        val = 0\n        for j in range(5):\n            if l[i][j] < l[ind][j]:\n                val += 1\n        if val >= 3:\n            ind = -2\n            break\n    print(ind + 1)", "t = int(input().strip())\nwhile t:\n    t -= 1\n    n = int(input().strip())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().strip().split())))\n    if n == 1:\n        print(1)\n        continue\n    res = -1\n    gold = 0\n    for i in range(1, n):\n        num = 0\n        for j in range(5):\n            if a[i][j] < a[gold][j]:\n                num += 1\n        if num >= 3:\n            gold = i\n    i = 0\n    for i in range(0, n):\n        num = 0\n        if i != gold:\n            for j in range(5):\n                if a[i][j] < a[gold][j]:\n                    num += 1\n            if num >= 3:\n                res = -1\n                break\n    if i == n - 1:\n        res = gold + 1\n    print(res)", "for ii in range(int(input())):\n    n = int(input())\n    m = [list(map(int, input().split())) for i in range(n)]\n    w = 0\n    for jj in range(1, n):\n        f = 0\n        for j in range(5):\n            if m[jj][j] < m[w][j]:\n                f += 1\n        if f >= 3:\n            w = jj\n    ff = [sum([1 for i in range(5) if m[w][i] <= m[j][i]]) for j in range(n)]\n    if min(ff) >= 3:\n        print(w + 1)\n    else:\n        print(-1)", "for tests in range(int(input())):\n    n = int(input())\n    ranks = []\n    for i in range(n):\n        ranks.append(list(map(int, input().split())))\n    winner = 0\n    for i in range(1, n):\n        cnt = 0\n        for j in range(5):\n            if ranks[i][j] <= ranks[winner][j]:\n                cnt += 1\n        if cnt >= 3:\n            winner = i\n    check = False\n    for i in range(n):\n        if i == winner:\n            continue\n        cnt = 0\n        for j in range(5):\n            if ranks[i][j] >= ranks[winner][j]:\n                cnt += 1\n        if cnt < 3:\n            check = True\n            break\n    if check:\n        print('-1')\n    else:\n        print(winner + 1)", "for ii in range(int(input())):\n    n = int(input())\n    m = [list(map(int, input().split())) for i in range(n)]\n    w = 0\n    for jj in range(1, n):\n        f = 0\n        for j in range(5):\n            if m[jj][j] < m[w][j]:\n                f += 1\n        if f >= 3:\n            w = jj\n    ff = [sum([1 for i in range(5) if m[w][i] <= m[j][i]]) for j in range(n)]\n    if min(ff) >= 3:\n        print(w + 1)\n    else:\n        print(-1)", "def better(a, b):\n    q = 0\n    for i in range(5):\n        if a[i] < b[i]:\n            q += 1\n    if q >= 3:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    best = 0\n    q = 0\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in range(1, n):\n        if better(arr[i], arr[best]):\n            best = i\n    for i in range(n):\n        if i != best and (not better(arr[best], arr[i])):\n            q = 1\n            break\n    if q == 1:\n        print(-1)\n    else:\n        print(best + 1)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    runners = []\n    for i in range(n):\n        runners.append(list(map(int, input().split())))\n    winner = 0\n    for i in range(n):\n        count = 0\n        for j in range(5):\n            if runners[winner][j] < runners[i][j]:\n                count += 1\n        if count < 3:\n            winner = i\n    for i in range(n):\n        count = 0\n        if winner == i:\n            continue\n        for j in range(5):\n            if runners[winner][j] < runners[i][j]:\n                count += 1\n        if count < 3:\n            winner = -2\n    print(winner + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    w = 0\n    f = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    if n == 1:\n        print(1)\n    else:\n        for i in range(1, n):\n            c = 0\n            for j in range(5):\n                if a[i][j] < a[f][j]:\n                    c += 1\n            if c >= 3:\n                f = i\n        w = f + 1\n        for i in range(n):\n            if i == f:\n                continue\n            else:\n                c = 0\n                for j in range(5):\n                    if a[i][j] < a[f][j]:\n                        c += 1\n                if c >= 3:\n                    w = -1\n                    break\n        print(w)", "t = int(input())\nfor _ in range(t):\n    aths = int(input())\n    ath_pos = {}\n    ath_sup = {}\n    for ath in range(aths):\n        ath_pos[ath] = list(map(int, input().split()))\n    w = 0\n    for i in range(aths):\n        count = 0\n        for j in range(5):\n            if ath_pos[i][j] < ath_pos[w][j]:\n                count += 1\n        if count >= 3:\n            w = i\n    for i in range(aths):\n        count = 0\n        for j in range(5):\n            if ath_pos[i][j] < ath_pos[w][j]:\n                count += 1\n        if count >= 3:\n            w = -2\n            break\n    print(w + 1)", "for _ in range(int(input())):\n    n = int(input())\n    ath = []\n    for i in range(n):\n        ath.append([int(i) for i in input().split()])\n    w = 0\n    for i in range(1, n):\n        count = 0\n        for j in range(5):\n            if ath[i][j] > ath[w][j]:\n                count += 1\n        if count < 3:\n            w = i\n    for i in range(n):\n        if i == w:\n            continue\n        count = 0\n        for j in range(5):\n            if ath[i][j] > ath[w][j]:\n                count += 1\n        if count < 3:\n            w = -2\n            break\n    print(w + 1)", "def find(a, b):\n    num = 0\n    for i in range(5):\n        if a[i] < b[i]:\n            num += 1\n    if num >= 3:\n        return a\n    return b\nfor _ in range(int(input())):\n    N = int(input())\n    l = [list(map(int, input().split())) for _ in range(N)]\n    ans = l[0]\n    numi = 0\n    for i in range(1, N):\n        if ans != find(ans, l[i]):\n            numi = i\n            ans = l[i]\n    num = 1\n    for i in range(N):\n        if ans != find(ans, l[i]):\n            num = 0\n    for i in range(N):\n        if ans != find(l[i], ans):\n            num = 0\n    if not num:\n        print(-1)\n    else:\n        print(numi + 1)", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    for i in range(n):\n        ai = list(map(int, input().split()))\n        li.append(ai)\n    k = x = 0\n    for j in range(n):\n        y = 0\n        for i in range(5):\n            if li[j][i] < li[k][i]:\n                y = y + 1\n        if y >= 3:\n            k = j\n    for j in range(n):\n        y = 0\n        for i in range(5):\n            if li[j][i] < li[k][i]:\n                y = y + 1\n        if y >= 3:\n            x = 1\n            break\n    if x == 1:\n        print(-1)\n    else:\n        print(k + 1)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    res = 0\n    arr = [0] * N\n    for i in range(N):\n        arr[i] = [int(s) for s in input().split()]\n    cur = 0\n    for i in range(1, N):\n        count = 0\n        for j in range(5):\n            if arr[i][j] < arr[cur][j]:\n                count += 1\n        if count >= 3:\n            cur = i\n    for i in range(N):\n        count = 0\n        if i != cur:\n            for j in range(5):\n                if arr[i][j] < arr[cur][j]:\n                    count += 1\n            if count >= 3:\n                res = -1\n                break\n    print(cur + 1) if res != -1 else print(-1)", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    curr = 0\n    for i in range(1, n):\n        x = 0\n        for j in range(5):\n            if arr[i][j] > arr[curr][j]:\n                x += 1\n        if x < 3:\n            curr = i\n    f = 1\n    for i in range(n):\n        if i == curr:\n            continue\n        x = 0\n        for j in range(5):\n            if arr[curr][j] < arr[i][j]:\n                x += 1\n        if x < 3:\n            f = 0\n            break\n    if f == 0:\n        print(-1)\n    else:\n        print(curr + 1)\nprint('\\n'.join(ANS))", "def solve(n, arr):\n    best = 0\n    for x in range(1, n):\n        count = 0\n        for i in range(5):\n            if arr[best][i] < arr[x][i]:\n                count += 1\n            if 4 - i < 3 - count:\n                best = x\n                break\n            elif count == 3:\n                break\n    result = 0\n    for x in range(n):\n        if best != x:\n            count = 0\n            for i in range(5):\n                if arr[best][i] < arr[x][i]:\n                    count += 1\n                if 4 - i < 3 - count:\n                    break\n                elif count == 3:\n                    result += 1\n                    break\n    if result == n - 1:\n        print(best + 1)\n        return\n    print(-1)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [[0 for _ in range(5)] for _ in range(n)]\n    for x in range(n):\n        arr[x] = list(map(int, input().split()))\n    solve(n, arr)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = []\n    for i in range(n):\n        ar.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(1, n):\n        count = 0\n        for j in range(5):\n            if ar[ans][j] < ar[i][j] and count < 3:\n                count += 1\n        if count <= 2:\n            ans = i\n    check = True\n    for i in range(n):\n        c = 0\n        if ans == i:\n            continue\n        for j in range(5):\n            if ar[ans][j] < ar[i][j]:\n                c += 1\n        if c > 2:\n            pass\n        else:\n            print(-1)\n            check = False\n            break\n    if check:\n        print(ans + 1)", "for i in range(int(input())):\n    a = []\n    for j in range(int(input())):\n        a.append(list(map(int, input().split())))\n    ans = 0\n    for k in range(1, len(a)):\n        temp = 0\n        for l in range(5):\n            if a[k][l] < a[ans][l]:\n                temp += 1\n        if temp >= 3:\n            ans = k\n    flag = False\n    for m in range(len(a)):\n        if m == ans:\n            continue\n        curr = 0\n        for x in range(5):\n            if a[m][x] < a[ans][x]:\n                curr += 1\n        if curr >= 3:\n            flag = True\n            break\n    if flag:\n        print(-1)\n    else:\n        print(ans + 1)", "def compare_sportsmen(s1, s2):\n    s1_counter = 0\n    for i in range(5):\n        if s1[i] <= s2[i]:\n            s1_counter += 1\n    if s1_counter >= 3:\n        return s1\n    return s2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    r = None\n    r_num = -1\n    deleted = []\n    for j in range(n):\n        sportsman = list(map(int, input().split()))\n        if r is None:\n            r = sportsman\n            r_num = j + 1\n        elif j == n - 1:\n            if compare_sportsmen(r, sportsman) == r:\n                pass\n            else:\n                r = sportsman\n                r_num = j + 1\n        elif compare_sportsmen(r, sportsman) == r:\n            deleted.append(sportsman)\n        else:\n            deleted.append(r)\n            r = sportsman\n            r_num = j + 1\n    flag = True\n    while flag and deleted != []:\n        if compare_sportsmen(r, deleted[0]) != r:\n            flag = False\n            break\n        else:\n            del deleted[0]\n    if flag:\n        print(r_num)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ranking = [list(map(int, input().split())) for j in range(n)]\n    candidate = 0\n    ans = -1\n    for i in range(1, n):\n        lose = 0\n        a1 = ranking[i]\n        a2 = ranking[candidate]\n        lose = 0\n        for k in range(5):\n            if a1[k] > a2[k]:\n                lose += 1\n        if lose < 3:\n            candidate = i\n    end = False\n    for i in range(n):\n        if i == candidate:\n            continue\n        end = False\n        win = 0\n        for j in range(5):\n            if ranking[candidate][j] < ranking[i][j]:\n                win += 1\n        if win < 3:\n            print('-1')\n            end = True\n            break\n        if end:\n            break\n    if not end:\n        print(candidate + 1)", "from math import floor, gcd, sqrt, ceil\nfrom collections import Counter, defaultdict\nfrom heapq import heapify, heappop, heappush\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        m = [list(map(int, input().split())) for i in range(n)]\n        s = set()\n        for i in range(n):\n            if i not in s:\n                for j in range(i + 1, n):\n                    c = 0\n                    for k in range(5):\n                        if m[i][k] < m[j][k]:\n                            c += 1\n                    if c >= 3:\n                        s.add(j)\n                    else:\n                        s.add(i)\n                        break\n        ans = -1\n        for i in range(n):\n            if i not in s:\n                for j in range(n):\n                    if j != i:\n                        c = 0\n                        for k in range(5):\n                            if m[i][k] < m[j][k]:\n                                c += 1\n                        if c >= 3:\n                            s.add(j)\n                        else:\n                            s.add(i)\n                            break\n                break\n        for i in range(n):\n            if i not in s:\n                print(i + 1)\n                break\n        else:\n            print(-1)\nmain()", "mini = 100000\ntests = int(input())\nmod = 10 ** 9 + 7\nwhile tests:\n    tests -= 1\n    n = int(input())\n    if n == 1:\n        arr = list(map(int, input().split()))\n        print(1)\n    else:\n        prev = []\n        winner = -1\n        mat = []\n        d = {}\n        for i in range(n):\n            arr = list(map(int, input().split()))\n            mat.append(arr)\n            if i == 0:\n                prev = [ii for ii in arr]\n                winner = i\n            else:\n                (a, b) = (0, 0)\n                for m in range(5):\n                    if prev[m] < arr[m]:\n                        a += 1\n                    else:\n                        b += 1\n                if a < b:\n                    prev = [ii for ii in arr]\n                    winner = i\n        ct = 0\n        idx = winner\n        for i in range(n):\n            if idx != i:\n                (a, b) = (0, 0)\n                for j in range(5):\n                    if mat[idx][j] < mat[i][j]:\n                        a += 1\n                    else:\n                        b += 1\n                if a > b:\n                    ct += 1\n        print(winner + 1 if ct == n - 1 else -1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        a.append(x)\n    if n == 1:\n        print(1)\n    else:\n        ind = 0\n        for i in range(1, n):\n            c = 0\n            for j in range(5):\n                if a[i][j] < a[ind][j]:\n                    c = c + 1\n                if c >= 3:\n                    ind = i\n        p = True\n        for i in range(n):\n            c = 0\n            if i != ind:\n                for j in range(5):\n                    if a[ind][j] < a[i][j]:\n                        c = c + 1\n                if c < 3:\n                    p = False\n                    break\n        if p:\n            print(ind + 1)\n        else:\n            print(-1)\n    t = t - 1"]