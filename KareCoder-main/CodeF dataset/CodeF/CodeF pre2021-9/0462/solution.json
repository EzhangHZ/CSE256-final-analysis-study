["(n, a, b, k) = map(int, input().split())\nh = sorted(((i - 1) % (a + b) // a for i in map(int, input().split())))\nans = 0\nfor _ in h:\n    k -= _\n    if k < 0:\n        break\n    ans += 1\nprint(ans)", "def solve(a, b, k, H):\n    res = []\n    for h in H:\n        (_, r) = divmod(h, a + b)\n        if not r:\n            r = a + b\n        res.append((r - 1) // a)\n    res.sort()\n    ans = 0\n    for r in res:\n        if k >= r:\n            k -= r\n            ans += 1\n        else:\n            break\n    return ans\nT = 1\nfor t in range(T):\n    (n, a, b, k) = map(int, input().split())\n    (*H,) = map(int, input().split())\n    print(solve(a, b, k, H))", "import math\n(n, a, b, k) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nz = a + b\nx = 0\ny = []\nt = []\nfor i in l:\n    if 0 < i % z <= a:\n        x += 1\n    elif i % z == 0:\n        t.append(a + b)\n    else:\n        t.append(i % z)\nt.sort()\nfor i in t:\n    c = math.ceil((i - a) / a)\n    if k - c >= 0:\n        x += 1\n        k = k - c\n    else:\n        break\nprint(x)", "def linp():\n    return list(map(int, input().split()))\n\ndef minp():\n    return map(int, input().split())\n\ndef iinp():\n    return int(input())\n\ndef test():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef solve():\n    (n, a, b, k) = minp()\n    arr = linp()\n    t = a + b\n    ans = 0\n    skip = []\n    for i in arr:\n        x = i % t\n        if 0 < x <= a:\n            ans += 1\n        else:\n            if x == 0:\n                x = t\n            if x % a == 0:\n                skip.append(x // a - 1)\n            else:\n                skip.append(x // a)\n    skip.sort()\n    for i in skip:\n        if i <= k:\n            ans += 1\n            k -= i\n    print(ans)\n\ndef main():\n    solve()\nmain()", "def ability_requirement(a, b, hp):\n    return (hp - 1) % (a + b) // a\n(n, a, b, k) = map(int, input().split(' '))\nrequirements = [ability_requirement(a, b, int(i)) for i in input().split(' ')]\nrequirements_dict = {}\nfor i in requirements:\n    if i in requirements_dict:\n        requirements_dict[i] += 1\n    else:\n        requirements_dict[i] = 1\noutput = 0\nfor i in sorted(requirements_dict.keys()):\n    if i * requirements_dict[i] <= k:\n        k -= i * requirements_dict[i]\n        output += requirements_dict[i]\n    else:\n        output += k // i\n        break\nprint(output)", "(n, a, b, k) = map(int, input().split())\nl = []\np = 0\nfor h in map(int, input().split()):\n    r = (h - a) % (a + b)\n    if r <= b:\n        l.append(r // a + (r % a != 0))\n    else:\n        p += 1\nl.sort()\ns = 0\nfor i in l:\n    s += i\n    if s > k:\n        break\n    p += 1\nprint(p)", "def main():\n    (n, a, b, k) = map(int, input().split())\n    arr = [(a + b - 1) // a if x % (a + b) == 0 else (x % (a + b) - 1) // a for x in map(int, input().split())]\n    arr.sort()\n    ans = 0\n    for x in arr:\n        if k < x:\n            break\n        k -= x\n        ans += 1\n    print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    (n, a, b, k) = MI()\n    hh = LI()\n    tt = []\n    ans = 0\n    for h in hh:\n        t = ((h - 1) % (a + b) + a) // a - 1\n        if t:\n            tt.append(t)\n        else:\n            ans += 1\n    for t in sorted(tt):\n        if k - t < 0:\n            break\n        k -= t\n        ans += 1\n    print(ans)\nmain()", "(n, a, b, kill) = map(int, input().split())\nl = []\np = 0\nfor h in map(int, input().split()):\n    r = (h - a) % (a + b)\n    if r <= b:\n        l.append(r // a + (r % a != 0))\n    else:\n        p += 1\nl.sort()\ns = 0\nfor i in l:\n    s += i\n    if s > kill:\n        break\n    p += 1\nprint(p)", "from math import ceil\n(n, a, b, k) = map(int, input().split())\nm = a + b\nh = list(map(lambda x: int(x) % m + (m if int(x) % m == 0 else 0), input().split()))\nh.sort()\ncnt = 0\nwhile cnt < n and h[cnt] <= a:\n    cnt += 1\ndel h[:cnt]\ns = 0\nfor hp in h:\n    cnt += 1\n    s += ceil(hp / a) - 1\n    if k < s:\n        cnt -= 1\n        break\nprint(cnt)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nscore = 0\nao = a + b\nost = []\nfor i in h:\n    if i % ao == 0:\n        ost.append(ao)\n    else:\n        ost.append(i % ao)\nost.sort()\nfor i in ost:\n    if i <= a:\n        score += 1\n    else:\n        i -= a\n        k -= (i + a - 1) // a\n        if k < 0:\n            break\n        else:\n            score += 1\nprint(score)", "(n, a, b, k) = map(int, input().split())\nlist1 = list(map(int, input().split()))\ncount = 0\nlist2 = []\nfor i in range(n):\n    p = list1[i] % (a + b)\n    if p <= a and p != 0:\n        count += 1\n    elif p == 0:\n        list2.append(b)\n    else:\n        val = p - a\n        list2.append(val)\nlist2.sort()\ns = 0\nimport math\nnum = 0\ntotal = k * a\nfor i in range(len(list2)):\n    if list2[i] <= total:\n        total -= math.ceil(list2[i] / a) * a\n        count += 1\n    else:\n        break\nprint(count + num)", "import math\n[n, a, b, k] = list(map(int, input().split(' ')))\nnew = list(map(int, input().split(' ')))\nnew = [(i - a) % (a + b) for i in new]\narr = []\nans = 0\nfor i in new:\n    if i > b:\n        ans += 1\n    else:\n        arr.append(i)\narr.sort()\ni = 0\nwhile i < len(arr) and k > 0:\n    k -= math.ceil(arr[i] / a)\n    if k >= 0:\n        ans += 1\n        i += 1\nprint(ans)", "def solve(n, a, b, k, h):\n    h = [i % (a + b) for i in h]\n    for i in range(len(h)):\n        if h[i] == 0:\n            h[i] = a + b\n    hh = [-1] * n\n    for (i, hi) in enumerate(h):\n        if hi <= a:\n            hh[i] = 0\n        else:\n            hh[i] = (hi - 1) // a\n    hh.sort()\n    ans = 0\n    for i in hh:\n        if i <= k:\n            k -= i\n            ans += 1\n    return ans\n\ndef main():\n    (n, a, b, k) = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    print(solve(n, a, b, k, h))\nmain()", "def solve():\n    (n, a, b, k) = map(int, input().split())\n    monsters = list(map(int, input().split()))\n    monsters = [hp % (a + b) for hp in monsters]\n    for index in range(n):\n        if monsters[index] == 0:\n            monsters[index] = a + b\n    monsters = sorted(monsters)\n    point = 0\n    for hp in monsters:\n        if hp <= a:\n            point += 1\n        else:\n            if hp % a == 0:\n                diff = 1\n            else:\n                diff = 0\n            if k >= hp // a - diff:\n                point += 1\n                k -= hp // a - diff\n            else:\n                print(point)\n                return\n    print(point)\nsolve()", "import math\n(n, a, b, k) = map(int, input().split())\nl = [int(i) % (a + b) for i in input().split()][:n]\nt = []\nc = 0\nfor i in l:\n    if i == 0:\n        i = a + b\n    if i % a == 0:\n        t.append(i // a - 1)\n    else:\n        t.append(i // a)\nt.sort()\nfor i in t:\n    k = k - i\n    if k < 0:\n        break\n    c = c + 1\nprint(c)", "(n, a, b, k) = map(int, input().split(' '))\nmonster = list(map(int, input().split(' ')))\ncount = 0\nstop = []\ns = a + b\nfor i in range(len(monster)):\n    if monster[i] % s == 0:\n        stop.append((s - 1) // a)\n    elif monster[i] % s <= a:\n        stop.append(0)\n    else:\n        stop.append((monster[i] % s - 1) // a)\nstop.sort()\nfor i in range(len(stop)):\n    if k - stop[i] >= 0:\n        k -= stop[i]\n        count += 1\n    else:\n        break\nif k < 0:\n    count -= 1\nprint(count)", "import math\n(n, a, b, k) = map(int, input().split())\nl = list(map(int, input().split()))\nreq = []\nfor i in l:\n    r = i % (a + b)\n    if r == 0:\n        r = a + b\n    req.append(math.ceil(r / a) - 1)\nreq.sort()\nt = k\nc = 0\nfor i in req:\n    if t - i >= 0:\n        c += 1\n        t -= i\n    else:\n        break\nprint(c)", "(n, a, b, k) = map(int, input().split())\narr = [int(i) for i in input().split()]\np = 0\nks = []\nfor e in arr:\n    e %= a + b\n    if e == 0:\n        e = a + b\n    if e <= a:\n        p += 1\n    else:\n        ks.append((e - 1) // a)\nks.sort()\nfor e in ks:\n    if e > k:\n        break\n    k -= e\n    p += 1\nprint(p)", "(n, a, b, k) = map(int, input().split())\nH = list(map(int, input().split()))\ngain = 0\nH = [hp % (a + b) for hp in H]\nH = [a + b if hp == 0 else hp for hp in H]\nH.sort()\nfor hp in H:\n    if hp <= a:\n        gain += 1\n    elif hp - a <= k * a:\n        gain += 1\n        k -= (hp - 1) // a\nprint(gain)", "from math import ceil\n(n, a, b, k) = map(int, input().split())\n(l, c) = ([], 0)\nfor i in input().split():\n    x = int(i) % (a + b)\n    if x == 0:\n        x = b + a\n    l.append(x)\nl.sort()\nfor i in l:\n    if i <= a:\n        c += 1\n    elif k >= ceil((i - a) / a):\n        k -= ceil((i - a) / a)\n        c += 1\n    else:\n        break\nprint(c)", "def count_optimal(n, a, b, k, hs):\n    hs = [(x - 1) % (a + b) // a * (((x - 1) % (a + b) - a) // b + 1) for x in hs]\n    hs.sort()\n    cnt = 0\n    for h in hs:\n        if k >= h:\n            k -= h\n            cnt += 1\n        else:\n            break\n    return cnt\n(n, a, b, k) = map(int, input().split())\nhs = list(map(int, input().split()))\nprint(count_optimal(n, a, b, k, hs))", "(n, a, b, k) = map(int, input().split())\nH = list(map(int, input().split()))\nganancias = 0\nH = [hp % (a + b) for hp in H]\nH = [a + b if hp == 0 else hp for hp in H]\nH.sort()\nfor hp in H:\n    if hp <= a:\n        ganancias += 1\n    elif hp - a <= k * a:\n        ganancias += 1\n        k -= (hp - 1) // a\nprint(ganancias)", "def main():\n    (n, a1, b, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        a[i] = a[i] % (a1 + b)\n        if a[i] == 0:\n            a[i] = a1 + b\n        a[i] = (a[i] + a1 - 1) // a1 - 1\n    a.sort()\n    ans = 0\n    for i in range(len(a)):\n        if k - a[i] < 0:\n            break\n        ans += 1\n        k -= a[i]\n    print(ans)\n    return\nmain()", "import math\ns = [int(i) for i in input().split()]\na = s[1]\nb = s[2]\nk = s[3]\ntd = a + b\nw = b > a\nm = [int(i) for i in input().split()]\nsm = []\np = 0\nfor i in m:\n    e = i % td\n    if 0 < e <= a:\n        p += 1\n    elif e:\n        sm.append(e - a)\n    else:\n        e += b\n        sm.append(e)\nif sm:\n    for i in sorted(sm):\n        d = math.ceil(i / a)\n        if d <= k:\n            p += 1\n            k -= d\n        else:\n            break\nprint(p)", "import math\n\ndef main():\n    (n, a, b, k) = map(int, input().split())\n    enemy = list(map(int, input().split()))\n    amari = []\n    ans = 0\n    for i in enemy:\n        if i < a:\n            ans += 1\n            continue\n        j = i % (a + b)\n        if j == 0:\n            j += a + b\n        if j <= a:\n            ans += 1\n        else:\n            amari.append(math.ceil((j - a) / a))\n    amari.sort()\n    for x in amari:\n        if k >= x:\n            ans += 1\n            k -= x\n        else:\n            break\n    print(ans)\nmain()", "(n, a, b, k) = [int(s) for s in input().split()]\nc = list(map(int, input().split()))\nq = 0\nfor i in range(n):\n    c[i] = c[i] % (a + b)\n    if c[i] == 0:\n        c[i] = a + b\nc.sort()\nfor i in c:\n    if i <= a:\n        q = q + 1\n    elif k > 0:\n        k = k - (i - 1) // a\n        if k >= 0:\n            q = q + 1\nprint(q)", "def monsters(n, a, b, k, arr):\n    l = [0] * n\n    for i in range(n):\n        if arr[i] % (a + b) == 0:\n            r = int(b / a)\n            if b % a != 0:\n                r += 1\n            l[i] = r\n        else:\n            r = arr[i] % (a + b)\n            hit = int(r / a)\n            if r % a != 0:\n                hit += 1\n            l[i] = hit - 1\n    l.sort()\n    count = 0\n    for i in range(len(l)):\n        if k - l[i] >= 0:\n            k -= l[i]\n            count += 1\n        else:\n            break\n    return count\n(n, a, b, k) = map(int, input().split())\narr = list(map(int, input().split()))\nprint(monsters(n, a, b, k, arr))", "import math\n(n, a, b, k) = map(int, input().split())\narr = list(map(int, input().split()))\nans = 0\nrem = []\nfor i in range(n):\n    r = arr[i] % (a + b)\n    if r != 0 and r <= a:\n        ans += 1\n    elif r == 0:\n        rem.append(b)\n    else:\n        rem.append(r - a)\nrem.sort()\nfor i in range(len(rem)):\n    val = math.ceil(rem[i] / a)\n    if val <= k:\n        k -= val\n        ans += 1\n    else:\n        break\nprint(ans)", "def secret_technique(hp, a, b):\n    hp = hp % (a + b)\n    if hp == 0:\n        hp = a + b\n    if hp < a:\n        return 0\n    if hp % a == 0:\n        result = hp // a - 1\n    else:\n        result = hp // a\n    return result\n\ndef main():\n    (n, a, b, k) = map(int, input().split())\n    healths = list(map(int, input().split()))\n    secrets = [None for i in range(n)]\n    for (i, hp) in enumerate(healths):\n        secrets[i] = secret_technique(hp, a, b)\n    secrets.sort()\n    result = 0\n    for s in secrets:\n        k -= s\n        if k >= 0:\n            result += 1\n    print(result)\n    return 0\nmain()", "import sys\nfrom math import ceil\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\n(n, a, b, k) = read()\nmons = []\ncount = 0\nab = a + b\nfor i in read():\n    if (i - 1) % ab < a:\n        count += 1\n    else:\n        mons.append((i - 1) % ab + 1 - a)\nmons.sort()\nfor i in mons:\n    t = ceil(i / a)\n    if t <= k:\n        k -= t\n        count += 1\n    else:\n        break\nprint(count)", "def solve(hp, a, b):\n    c = a + b\n    k = hp // c\n    if hp % c == 0:\n        k -= 1\n    hp -= k * c\n    hit = hp // a\n    if hp % a > 0:\n        hit += 1\n    return hit - 1\n(n, a, b, k) = map(int, input().split())\ns = list()\nfor hp in map(int, input().split()):\n    s.append(solve(hp, a, b))\ns.sort()\nans = 0\nused = 0\nfor x in s:\n    used += x\n    if used > k:\n        break\n    ans += 1\nprint(ans)", "from math import ceil\n(n, a, b, k) = map(int, input().split())\n(l, c) = ([], 0)\nfor i in input().split():\n    x = int(i) % (a + b)\n    if x == 0:\n        x = b + a\n    l.append(x)\nl.sort()\nfor i in l:\n    i -= a\n    if i <= 0:\n        c += 1\n    elif k >= ceil(i / a):\n        k -= ceil(i / a)\n        c += 1\n    else:\n        break\nprint(c)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    c = h[i] % (a + b)\n    if c == 0:\n        c = a + b\n    s.append((c - 1) // a)\ns.sort()\nfor j in range(n):\n    k -= s[j]\n    if k < 0:\n        print(j)\n        break\nelse:\n    print(n)", "(n, a, b, k) = map(int, input().split())\nhp = [int(x) for x in input().split()]\npoints = 0\nhits = a + b\narr = []\nfor i in hp:\n    i = i % hits\n    if i == 0:\n        i = hits\n    if i <= a:\n        points += 1\n    else:\n        i = (i - 1) // a\n        arr.append(i)\nfor r in sorted(arr):\n    if r > k:\n        break\n    k -= r\n    points += 1\nprint(points)", "(n, a, b, k) = map(int, input().split())\nli = []\nans = 0\nfor hp in map(int, input().split()):\n    hp = hp % (a + b)\n    hp = a + b if hp == 0 else hp\n    hp = -(-hp // a) - 1\n    li.append(hp)\nli.sort()\nfor i in li:\n    k -= i\n    if k < 0:\n        break\n    ans += 1\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nl = []\np = 0\nfor h in map(int, input().split()):\n    r = (h - a) % (a + b)\n    if r <= b:\n        l.append(r // a + (r % a != 0))\n    else:\n        p += 1\nl.sort()\ns = 0\nfor i in l:\n    s += i\n    if s > k:\n        break\n    p += 1\nprint(p)", "(n, a, b, k) = map(int, input().split())\nm = list(map(int, input().split()))\nabilities = []\npoints = 0\nfor h in m:\n    h = h % (a + b)\n    if h == 0:\n        h = a + b\n    if h % a == 0:\n        w = h // a\n    else:\n        w = h // a + 1\n    if w == 1:\n        points += 1\n    else:\n        abilities.append(w - 1)\nabilities.sort()\nfor i in abilities:\n    if i <= k:\n        points += 1\n        k -= i\n    else:\n        break\nprint(points)", "import math\nVARS = input().split(' ')\nN = int(VARS[0])\na = int(VARS[1])\nb = int(VARS[2])\nk = int(VARS[3])\nli = input().split(' ')\nscore = 0\nturnDamage = a + b\nklist = []\nfor i in li:\n    hp = int(i)\n    hpLeft = hp % turnDamage\n    if hpLeft <= a and hpLeft > 0:\n        score += 1\n    else:\n        if hpLeft == 0:\n            hpLeft = turnDamage\n        klist.append(math.ceil(hpLeft / a) - 1)\nklist.sort()\nfor i in klist:\n    if i <= k:\n        score += 1\n        k -= i\n    else:\n        break\nprint(score)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\ns = a + b\nv = []\ng = 0\nfor i in range(n):\n    d = h[i] % s\n    if d == 0:\n        if b % a == 0:\n            v.append(b // a)\n        else:\n            v.append(b // a + 1)\n    elif d % a == 0:\n        if d // a == 1:\n            g += 1\n        else:\n            v.append(d // a - 1)\n    elif d // a == 0:\n        g += 1\n    else:\n        v.append(d // a)\nv = sorted(v)\nfor i in range(len(v)):\n    if v[i] > k:\n        break\n    else:\n        g += 1\n        k -= v[i]\nprint(g)", "import math\n(n, a, b, k) = [int(x) for x in input().split(' ')]\narr = [int(x) for x in input().split(' ')]\nsu = a + b\nres = int(0)\narr2 = []\nfor i in range(0, n):\n    if arr[i] % su == 0:\n        pend = b\n        arr2.append(b)\n    else:\n        remain = arr[i] % su\n        if remain <= a:\n            res += 1\n        else:\n            temporary = remain - a\n            arr2.append(temporary)\narr2 = arr2[::-1]\narr2.sort()\nfor i in arr2:\n    temp = i\n    if math.ceil(temp / a) <= k:\n        res += 1\n        k = k - math.ceil(temp / a)\n    else:\n        break\nprint(res)", "(n, a, b, k) = map(int, input().split())\nl = []\np = 0\nfor h in map(int, input().split()):\n    r = (h - a) % (a + b)\n    if r <= b:\n        l.append(r // a + (r % a != 0))\n    else:\n        p += 1\nl.sort()\ns = 0\nfor i in l:\n    s += i\n    if s > k:\n        break\n    p += 1\nprint(p)", "def main():\n    (n, a, b, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    z = [a + b if i % (a + b) == 0 else i % (a + b) for i in x]\n    pnts = 0\n    y = []\n    for i in range(n):\n        if a < z[i]:\n            y.append(z[i])\n    y = [(i - 1) // a for i in y]\n    y.sort()\n    p = 0\n    cnt = 0\n    for i in y:\n        if p + i <= k:\n            cnt += 1\n            p += i\n    print(n - len(y) + cnt)\n    return\nmain()", "(n, a, b, k) = map(int, input().split())\nc = []\nans = 0\nfor hp in map(int, input().split()):\n    x = hp % (a + b)\n    if x == 0:\n        x = a + b\n    x -= a\n    if x <= 0:\n        ans += 1\n    else:\n        c += ((x + a - 1) // a,)\nc = sorted(c)[::-1]\nwhile c:\n    if k >= c[-1]:\n        ans += 1\n        k -= c.pop()\n    else:\n        break\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nl = []\np = 0\nfor h in map(int, input().split()):\n    r = (h - a) % (a + b)\n    if r <= b:\n        l.append(r // a + (r % a != 0))\n    else:\n        p += 1\nl.sort()\ns = 0\nfor i in l:\n    s += i\n    if s > k:\n        break\n    p += 1\nprint(p)", "(n, a, b, k) = [int(x) for x in input().split()]\nh = list(map(int, input().split()))\nans = C = 0\nfor i in range(n):\n    h[i] = h[i] % (a + b)\n    if h[i] == 0:\n        h[i] = a + b\n    h[i] -= a\nh.sort()\nfor val in h:\n    if val <= 0:\n        ans += 1\n    else:\n        c = val // a\n        if val % a != 0:\n            c += 1\n        if C + c <= k:\n            ans += 1\n            C += c\n        else:\n            break\nprint(ans)", "import math\n(n, a, b, k) = map(int, input().split())\nl = list(map(int, input().split()))\npo = 0\nm = []\nfor i in l:\n    if i % (a + b) > 0 and i % (a + b) <= a:\n        po += 1\n    elif i % (a + b) > a:\n        m.append(i % (a + b) - a)\n    elif i % (a + b) == 0:\n        m.append(b)\nm.sort()\nfor i in m:\n    if math.ceil(i / a) <= k:\n        po += 1\n        k -= math.ceil(i / a)\n    else:\n        break\nprint(po)", "import math\n(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\ns = a + b\nans = 0\nfor i in range(n):\n    k1 = h[i] % s\n    if k1 == 0:\n        k1 = s\n    if k1 <= a:\n        k1 = 0\n    else:\n        k1 -= a\n    h[i] = k1\nh.sort()\nfor i in h:\n    t = math.ceil(i / a)\n    if k - t >= 0:\n        ans += 1\n        k -= t\n    else:\n        break\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nhp = list(map(int, input().split()))\npoints = 0\nab = a + b\nchances = []\nfor i in range(n):\n    rem = hp[i] % ab\n    if rem == 0:\n        if b % a == 0:\n            chances.append(b // a)\n        else:\n            chances.append(b // a + 1)\n    elif rem > a:\n        l = rem - a\n        if l % a == 0:\n            chances.append(l // a)\n        else:\n            chances.append(l // a + 1)\n    else:\n        points += 1\nchances = sorted(chances)\nfor i in chances:\n    if k >= i:\n        points += 1\n        k -= i\n    else:\n        break\nprint(points)", "import math\n(n, a, b, k) = map(int, input().split())\narr = list(map(int, input().split()))\nt = a + b\narr2 = []\nfor i in range(n):\n    temp = arr[i] % t\n    if temp == 0:\n        arr2.append(math.ceil(b / a))\n    elif temp <= a:\n        arr2.append(0)\n    else:\n        arr2.append(math.ceil((temp - a) / a))\narr2.sort()\nl = len(arr2)\nindex = 0\nans = 0\nwhile k > 0 and index < l:\n    k = k - arr2[index]\n    if k >= 0:\n        ans += 1\n    index += 1\nprint(ans)", "from collections import Counter, defaultdict, deque\nimport heapq as hq\nfrom itertools import count, islice\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef getsecret(a, b, h):\n    rem = h % (a + b) or a + b\n    rem -= a\n    if rem <= 0:\n        return 0\n    return math.ceil(rem / a)\n(n, a, b, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nremarr = []\nfor el in arr:\n    remarr.append(getsecret(a, b, el))\nremarr.sort()\ntotal = 0\nres = 0\nfor el in remarr:\n    if total + el <= k:\n        total += el\n        res += 1\n    else:\n        break\nprint(res)", "for w in range(0, 1):\n    nabk = list(map(int, input().strip().split()))\n    n = nabk[0]\n    a = nabk[1]\n    b = nabk[2]\n    k = nabk[3]\n    l = []\n    p = 0\n    for h in list(map(int, input().strip().split())):\n        r = (h - a) % (a + b)\n        if r > b:\n            p += 1\n        else:\n            l.append(r // a + (r % a != 0))\n    l.sort()\n    sum = 0\n    for i in l:\n        sum += i\n        if sum <= k:\n            p += 1\n        else:\n            break\n    print(p)", "(n, a, b, k) = map(int, input().split())\nh = list(sorted(map(int, input().split())))\nleft = []\npt = 0\nmod = a + b\nfor x in h:\n    rem = x % mod\n    if rem == 0:\n        rem = mod\n    if a >= rem >= 1:\n        pt += 1\n    else:\n        q = rem // a\n        r = rem % a\n        if r != 0:\n            left.append(q)\n        else:\n            left.append(q - 1)\nleft.sort()\nn = len(left)\ni = 0\nwhile k > 0 and i < n:\n    if left[i] <= k:\n        k -= left[i]\n        pt += 1\n        i += 1\n    else:\n        break\nprint(pt)", "(n, a, b, k) = map(int, input().split())\ns = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n    r = s[i] // (a + b)\n    l = s[i] % (a + b)\n    if s[i] <= a:\n        cnt += 1\n        s[i] = 0\n    elif l == 0:\n        s[i] = s[i] - (r * (a + b) - b)\n    elif l <= a:\n        cnt += 1\n        s[i] = 0\n    else:\n        s[i] = s[i] - (r * (a + b) + a)\ns.sort()\nfor i in s:\n    if k == 0 or a * k < i:\n        break\n    if i != 0:\n        cnt += 1\n        k -= -(-i // a)\nprint(cnt)", "(n, a, b, k) = map(int, input().split())\nmonster = list(map(int, input().split()))\ncost = []\nfor hp in monster:\n    res = hp % (a + b)\n    if res == 0:\n        res += a + b\n    costI = res // a\n    if res % a == 0:\n        costI -= 1\n    cost.append(costI)\ncost.sort()\ncan = 0\nwhile can < n:\n    if k < cost[can]:\n        break\n    k -= cost[can]\n    can += 1\nprint(can)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nh_new = []\nfor c in h:\n    last = c % (a + b)\n    if last == 0:\n        last = a + b\n    if last <= a:\n        h_new.append(0)\n    else:\n        last -= a\n        num = last // a\n        if last % a > 0:\n            num += 1\n        h_new.append(num)\nh_new = sorted(h_new)\nans = 0\nfor c in h_new:\n    if k - c >= 0:\n        ans += 1\n        k -= c\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    (N, A, B, K) = [int(x) for x in input().split()]\n    H = [int(x) for x in input().split()]\n    ans = 0\n    nokori = []\n    for h in H:\n        if 0 < h % (A + B) <= A:\n            ans += 1\n        else:\n            tmp = h % (A + B)\n            if tmp == 0:\n                tmp = A + B\n            nokori.append(tmp)\n    nokori.sort()\n    for t in nokori:\n        if K > 0:\n            x = -(-(t - A) // A)\n            if K >= x:\n                ans += 1\n                K -= x\n    print(ans)\nmain()", "(n, a, b, k) = map(int, input().split())\nhp = list(map(int, input().split()))\nc = []\nfor i in hp:\n    if i <= a:\n        c.append(0)\n    else:\n        tmp = i % (a + b)\n        if tmp == 0:\n            tmp = (b + a - 1) // a\n            c.append(tmp)\n        elif tmp > a:\n            tmp = (tmp + a - 1) // a - 1\n            c.append(tmp)\n        elif tmp <= a:\n            c.append(0)\nc.sort()\nans = 0\nfor i in c:\n    if k >= i:\n        ans += 1\n        k -= i\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nl = [int(x) for x in input().split()]\ncnt = 0\nm = []\ny = 0\nnow = 0\nfor x in l:\n    now = x % (a + b)\n    if 0 < now <= a:\n        cnt += 1\n        continue\n    if now == 0:\n        now = b\n    else:\n        now -= a\n    if now % a == 0:\n        m.append(now // a)\n    else:\n        m.append(now // a + 1)\nm.sort()\nfor x in m:\n    if x <= k:\n        cnt += 1\n        k -= x\n    else:\n        break\nprint(cnt)", "(n, a, b, k) = list(map(int, input().split()))\nnum = list(map(int, input().split()))\nre = 0\nfor (i, hp) in enumerate(num):\n    if hp <= a:\n        num[i] = hp\n    elif hp % (a + b) == 0:\n        num[i] = a + b\n    else:\n        num[i] = hp % (a + b)\nnum.sort()\nfor hp in num:\n    if hp <= a:\n        re += 1\n        continue\n    sp = int(hp / a) - 1\n    if hp % a != 0:\n        sp += 1\n    k -= sp\n    if k < 0:\n        break\n    re += 1\nprint(re)", "(n, a, b, k) = list(map(int, input().split()))\nh = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    j = h[i]\n    j %= a + b\n    if j == 0:\n        if b % a == 0:\n            j = b // a\n        else:\n            j = b // a + 1\n    elif j % a == 0:\n        j //= a\n        j -= 1\n    else:\n        j //= a\n    ans.append(j)\nans.sort()\nsum1 = 0\nfor r in range(n):\n    sum1 += ans[r]\n    if sum1 > k:\n        print(r)\n        break\nif sum1 <= k:\n    print(n)", "import math\n(n, a, b, k) = [int(k) for k in input().split()]\nh = []\npoints = 0\nfor currentMon in input().split():\n    remainingHealth = int(currentMon) % (a + b)\n    if remainingHealth == 0:\n        h.append(math.ceil(b / a))\n    elif remainingHealth <= a:\n        points += 1\n    else:\n        h.append(math.ceil(remainingHealth / a) - 1)\nh = sorted(h)\ni = 0\nwhile k > 0 and i < len(h):\n    if h[i] <= k:\n        k -= h[i]\n        points += 1\n        i += 1\n    else:\n        break\nprint(points)", "import math\n(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n    if h[i] % (a + b) == 0:\n        h[i] = a + b\n    else:\n        h[i] = h[i] % (a + b)\nh.sort()\nfor j in range(n):\n    if h[j] <= a:\n        count += 1\n    elif k > 0:\n        k -= math.ceil(h[j] / a) - 1\n        count += 1\n    else:\n        break\nif k < 0:\n    print(count - 1)\nelse:\n    print(count)", "(n, a, b, k) = list(map(int, input().split()))\naa = list(map(int, input().split()))\np = []\nl = a + b\nfor i in range(0, n):\n    aa[i] -= 1\n    m = aa[i] % l // a\n    p.append(m)\np.sort()\nSum = 0\nfor i in range(0, n):\n    if p[i] == 0:\n        Sum += 1\n    elif p[i] <= k:\n        Sum += 1\n        k = k - p[i]\nprint(Sum)", "(n, a, b, k) = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\n(lst, result) = (list(), 0)\nfor elem in h:\n    elem %= a + b\n    if elem == 0:\n        lst.append((b + a - 1) // a)\n    elif elem > a:\n        lst.append((elem - 1) // a)\n    else:\n        result += 1\nlst.sort()\nfor elem in lst:\n    if k >= elem:\n        k -= elem\n        result += 1\nprint(result)", "(n, a, b, k) = list(map(int, input().split()))\nmonster = list(map(int, input().split()))\noptimal = []\nturn = a + b\npoints = 0\nfor i in range(n):\n    sub = (monster[i] - 1) // turn\n    monster[i] -= sub * turn\n    if monster[i] - a <= 0:\n        points += 1\n        continue\n    else:\n        optimal.append(monster[i] - a)\noptimal.sort()\nfor i in range(len(optimal)):\n    K_need = (optimal[i] - 1) // a + 1\n    k -= K_need\n    if k == 0:\n        points += 1\n        break\n    elif k > 0:\n        points += 1\n        continue\n    else:\n        break\nprint(points)", "(n, a, b, k) = map(int, input().split())\nL = list(map(int, input().split()))\nt = a + b\ni = 0\nfor l in L:\n    if l % t == 0:\n        L[i] = t\n    else:\n        L[i] = l % t\n    i += 1\nL.sort()\nR = []\nres = 0\nfor l in L:\n    if l <= a:\n        res += 1\n    else:\n        R.append((l + a - 1) // a - 1)\nR.sort()\nfor r in R:\n    if k < r:\n        break\n    k -= r\n    res += 1\nprint(res)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nl = []\nans = 0\nfor i in h:\n    if i % (a + b) != 0 and i % (a + b) <= a:\n        ans += 1\n    else:\n        buf = i % (a + b) - a\n        if buf < 0:\n            buf = b\n        l.append((buf + a - 1) // a)\nl.sort()\nfor i in l:\n    if k >= i:\n        ans += 1\n        k -= i\n    else:\n        break\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nhps = list(map(int, input().split()))\nsorted_hps = sorted(hps, key=lambda x: (x - 1) % (a + b))\nanswer = 0\nfor i in sorted_hps:\n    i = (i - 1) % (a + b)\n    k -= i // a\n    if k < 0:\n        break\n    answer += 1\nprint(answer)", "(n, a, b, k) = map(int, input().split())\nH = list(map(int, input().split()))\nrisultato = 0\nK = []\nfor h in H:\n    r = h % (a + b)\n    if r > 0 and r <= a:\n        risultato += 1\n    else:\n        if r == 0:\n            if b % a == 0:\n                s = b // a\n            else:\n                s = b // a + 1\n        elif r % a == 0:\n            s = r // a - 1\n        else:\n            s = r // a\n        K.append(s)\nK.sort()\nsomma = 0\ni = 0\nfor i in range(len(K)):\n    somma += K[i]\n    if somma > k:\n        break\n    else:\n        risultato += 1\nprint(risultato)", "from math import ceil\n(n, a, b, k) = map(int, input().split())\n(t, answer) = ([], 0)\nfor h in input().split():\n    x = int(h) % (a + b)\n    if x == 0:\n        x = b + a\n    t.append(x)\nt.sort()\nfor i in t:\n    i -= a\n    if i <= 0:\n        answer += 1\n    elif k >= ceil(i / a):\n        k -= ceil(i / a)\n        answer += 1\n    else:\n        break\nprint(answer)", "(n, a, b, k) = list(map(int, input().split()))\nh = list(map(int, input().split()))\nr = [0 for i in range(n)]\ncnt = 0\nfor i in range(len(h)):\n    rem = h[i] % (a + b)\n    if rem == 0:\n        rem = a + b\n    if rem <= a:\n        cnt += 1\n    else:\n        rem -= a\n        r[i] = rem // a\n        if rem % a != 0:\n            r[i] += 1\nr.sort()\nfor i in r:\n    if i == 0:\n        continue\n    elif k <= 0 or k < i:\n        break\n    else:\n        k -= i\n        cnt += 1\nprint(cnt)", "(n, a, b, k) = map(int, input().strip().split())\nh = list(map(int, input().strip().split()))\nn = len(h)\nfor i in range(n):\n    x = h[i]\n    mod = x % (a + b)\n    if mod == 0:\n        mod = a + b\n    z = mod // a\n    if z * a < mod:\n        z += 1\n    z -= 1\n    h[i] = z\nh = sorted(h)\nans = 0\nfor x in h:\n    k -= x\n    if k < 0:\n        break\n    ans += 1\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nl = [int(x) for x in input().split()]\npower = []\nfor x in l:\n    rem = x % (a + b)\n    if rem == 0:\n        if b % a != 0:\n            power.append(b // a + 1)\n        else:\n            power.append(b // a)\n    elif rem <= a:\n        power.append(0)\n    elif (rem - a) % a == 0:\n        power.append((rem - a) // a)\n    else:\n        power.append((rem - a) // a + 1)\npower = sorted(power)\np_used = 0\ntotal = 0\nfor p in power:\n    if p_used + p > k:\n        break\n    total += 1\n    p_used += p\nprint(total)", "(n, a, b, k) = list(map(int, input().split()))\nh = list(map(int, input().split()))\nres = 0\nnew_h = []\nfor hi in h:\n    one_turn = a + b\n    rest = hi % one_turn\n    if rest == 0:\n        rest += one_turn\n    if rest <= a:\n        res += 1\n    else:\n        nh = (rest - a) // a\n        if (rest - a) % a != 0:\n            nh += 1\n        new_h.append(nh)\nsnh = sorted(new_h)\nfor i in snh:\n    if i <= k:\n        k -= i\n        res += 1\n    else:\n        break\nprint(res)", "x = str(input()).split()\nn = int(x[0])\na = int(x[1])\nb = int(x[2])\nk = int(x[3])\nc = [int(x) - (a + b) * ((int(x) - 1) // (a + b)) for x in str(input()).split()]\nd = []\ncnt = 0\nfor i in range(n):\n    hp = c[i]\n    d.append((hp - 1) // a)\nd.sort()\nfor i in range(len(d)):\n    k -= d[i]\n    if k >= 0:\n        cnt += 1\nprint(cnt)", "import math\n(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nl = []\nc = 0\nfor i in range(n):\n    r = h[i] % (a + b)\n    if r <= a and r != 0:\n        c += 1\n    elif a > b:\n        l.append(1)\n    else:\n        l.append(math.ceil(r / a) - 1 if r != 0 else math.ceil(b / a))\nfor x in sorted(l):\n    if k <= 0 or x > k:\n        break\n    else:\n        c += 1\n        k -= x\nprint(c)", "import math\n(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nc = a + b\ncount = 0\nq = []\nfor i in h:\n    r = min(i, i % c)\n    if r == 0:\n        q.append(math.ceil(b / a))\n    elif r > a:\n        q.append(math.ceil((r - a) / a))\n    else:\n        count += 1\nq.sort()\nsm = 0\nfor i in q:\n    sm = sm + i\n    if sm > k:\n        break\n    else:\n        count += 1\nprint(count)", "(n, a, b, k) = map(int, input().split())\nl = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    l[i] %= a + b\n    if l[i] == 0:\n        l[i] = a + b\n    if l[i] <= a:\n        ans.append(0)\n    elif l[i] % a == 0:\n        x = l[i] // a - 1\n        ans.append(x)\n    else:\n        ans.append(l[i] // a)\nans.sort()\ncnt = 0\nfor i in range(n):\n    if k < ans[i]:\n        break\n    k -= ans[i]\n    cnt += 1\nprint(cnt)", "import math\n(n, a, b, k) = map(int, input().split())\nans = list(map(int, input().split()))\nx = a + b\nfor i in range(n):\n    t = ans[i] % x\n    if t == 0:\n        t = b\n    elif t <= a:\n        ans[i] = 0\n        continue\n    else:\n        t = t - a\n    ans[i] = math.ceil(t / a)\nans.sort()\ni = 0\nwhile i < n and k - ans[i] >= 0:\n    k = k - ans[i]\n    i += 1\nprint(i)", "(n, my, opp, k) = input().split()\nn = int(n)\nmy = int(my)\nopp = int(opp)\nk = int(k)\nli = input().split()\ncount = []\ntot = my + opp\nfor i in range(n):\n    temp = (int(li[i]) - 1) % tot\n    if my > temp:\n        count.append(0)\n    else:\n        temp1 = int((temp - my) / my)\n        count.append(temp1 + 1)\ncount.sort()\nanswer = 0\ntrack = 0\nfor i in range(n):\n    track = track + count[i]\n    if track > k:\n        break\n    answer = answer + 1\nprint(answer)", "from math import ceil\n(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nsobra = []\nfor i in range(len(h)):\n    aux = h[i]\n    mod = aux % (a + b)\n    if mod == 0:\n        aux = ceil(b / a)\n    elif mod <= a:\n        aux = 0\n    else:\n        aux = ceil((mod - a) / a)\n    sobra.append(aux)\nsobra = sorted(sobra)\ncount = 0\nfor i in sobra:\n    if i <= k:\n        count += 1\n        k -= i\n    else:\n        break\nprint(count)", "import math\n(n, a, b, k) = map(int, input().split())\nmylist = list(map(int, input().split()))\nsum = 0\npoints = 0\nlist1 = list()\np = a + b\nfor i in range(len(mylist)):\n    if mylist[i] % p == 0:\n        list1.append(math.ceil(b / a))\n    elif mylist[i] % p > a:\n        list1.append(math.ceil((mylist[i] % p - a) / a))\n    else:\n        points += 1\nlist1.sort()\nfor i in range(len(list1)):\n    sum += list1[i]\n    if sum > k:\n        break\n    points += 1\nprint(points)", "(n, a, b, k) = map(int, input().split())\nl = list(map(int, input().split()))\nh = [0] * n\nfor i in range(n):\n    p = l[i] % (a + b)\n    if p > a:\n        h[i] = p // a + bool(p % a) - 1 if a < b else 1\n    if p == 0:\n        h[i] = b // a + bool(b % a) if a < b else 1\nh.sort()\ns = 0\nc = 0\nfor i in range(n):\n    if s <= k:\n        s += h[i]\n        if s > k:\n            break\n        c += 1\nprint(c)", "(n, a, b, k) = map(int, input().split())\nh = list([i % (a + b) if i % (a + b) != 0 else a + b for i in map(int, input().split())])\nh = list(sorted([i - a if i > a else 0 for i in h]))\nans = cnt = 0\nfor i in h:\n    if i == 0:\n        ans += 1\n    elif i // a + (1 if i % a != 0 else 0) <= k - cnt:\n        cnt += i // a + (1 if i % a != 0 else 0)\n        ans += 1\nprint(ans)", "from math import *\n(n, a, b, k) = list(map(int, input().split()))\narr = list(map(int, input().split()))\ncount = 0\nrem = []\nfor i in range(n):\n    if arr[i] % (a + b) > 0 and arr[i] % (a + b) <= a:\n        count += 1\n    else:\n        remPow = arr[i] % (a + b)\n        if remPow == 0:\n            remPow += b\n        else:\n            remPow -= a\n        rem.append(remPow)\nif rem != []:\n    rem.sort()\n    i = 0\n    while k > 0 and i < len(rem):\n        temp = ceil(rem[i] / a)\n        k = k - temp\n        rem[i] = 0\n        if k > 0:\n            count = count + 1\n        if k == 0 and rem[i] <= 0:\n            count += 1\n        i += 1\nprint(count)", "from math import *\n(n, a, b, k) = list(map(int, input().split()))\nmonsters = list(map(int, input().split()))\nremainings = []\nresult = 0\nfor hp in monsters:\n    if hp % (a + b) > 0 and hp % (a + b) <= a:\n        result += 1\n    else:\n        remaining = b if hp % (a + b) == 0 else hp % (a + b) - a\n        remainings.append(remaining)\nremainings.sort()\nfor r in remainings:\n    cnt = ceil(r / a)\n    if k - cnt >= 0:\n        result += 1\n        k -= cnt\n    else:\n        break\nprint(result)", "import sys\nf_in = sys.stdin\nf_out = sys.stdout\n(n, a, b, k) = list(map(int, f_in.readline().split()))\nmonsters_row = list(map(int, f_in.readline().split()))\nfor monsters in range(0, n):\n    hp_remain = monsters_row[monsters] % (a + b)\n    if hp_remain == 0 and b % a == 0:\n        monsters_row[monsters] = b // a\n    elif hp_remain == 0 and b % a != 0:\n        monsters_row[monsters] = b // a + 1\n    elif hp_remain > 0 and hp_remain <= a:\n        monsters_row[monsters] = 0\n    elif hp_remain % a == 0:\n        monsters_row[monsters] = (hp_remain - a) // a\n    else:\n        monsters_row[monsters] = (hp_remain - a) // a + 1\nmonsters_row.sort()\nfor i in range(0, n):\n    k = k - monsters_row[i]\n    if k == 0:\n        f_out.write(str(i + 1) + '\\n')\n        break\n    if k < 0:\n        f_out.write(str(i) + '\\n')\n        break\nif k > 0:\n    f_out.write(str(n))", "from sys import exit as sys_return\n(amount, a_power, b_power, secret_power) = map(int, input().split())\nmonsters = list(map(int, input().split()))\nfor i in range(len(monsters)):\n    monsters[i] %= a_power + b_power\n    if monsters[i] == 0:\n        monsters[i] = a_power + b_power\nmonsters.sort()\npoints = 0\nfor i in range(len(monsters)):\n    if a_power >= monsters[i]:\n        points += 1\n        continue\n    if (monsters[i] - a_power - 1) // a_power + 1 <= secret_power:\n        points += 1\n        secret_power -= (monsters[i] - a_power - 1) // a_power + 1\nprint(points)", "import math\n(n, a, b, k) = map(int, input().strip().split(' '))\nx = list(map(int, input().strip().split(' ')))\ny = []\ncount = 0\nc = a + b\nfor i in x:\n    if i % c == 0:\n        y.append(math.ceil(b / a))\n    else:\n        r = i % c\n        if r <= a:\n            count += 1\n        else:\n            y.append(math.ceil((r - a) / a))\ny.sort()\nfor i in y:\n    if k >= i:\n        count += 1\n        k -= i\n    if k == 0 or k < i:\n        break\nprint(count)", "(n, a, b, k) = map(int, input().split(' '))\nl = list(map(int, input().split()))\nr = []\ny = a + b\nfor i in range(len(l)):\n    m = l[i] / y\n    k1 = l[i] % y\n    if m == 0:\n        if a >= l[i]:\n            r.append(0)\n        else:\n            r.append(1)\n    elif k1 == 0:\n        r.append((b + a + a - 1) // a - 1)\n    else:\n        r.append((k1 + a - 1) // a - 1)\nr = sorted(r)\nans = 0\nfor i in range(len(r)):\n    if r[i] <= k:\n        ans += 1\n        k -= r[i]\nprint(ans)", "(n, a, b, k) = map(int, input().split())\nh = list(map(int, input().split()))\nans = []\nc = b // a\ncnt = 0\nif b % a != 0:\n    c += 1\nfor i in range(n):\n    if h[i] % (a + b) == 0:\n        ans.append(c)\n    else:\n        x = h[i] % (a + b)\n        if x <= a:\n            cnt += 1\n        else:\n            great = x - a\n            y = great // a\n            if great % a != 0:\n                y += 1\n            ans.append(y)\nif len(ans) != 0:\n    ans.sort()\n    x = 0\n    for i in range(len(ans)):\n        x += ans[i]\n        if x > k:\n            break\n        else:\n            cnt += 1\nprint(cnt)", "import math\n(n, a, b, k) = map(int, input().split())\nnums = list(map(int, input().split()))\nans = 0\nret = []\nfor i in nums:\n    temp = i % (a + b)\n    if 0 < temp <= a:\n        ans += 1\n        continue\n    else:\n        if temp == 0:\n            ret.append(math.ceil(b / a))\n            continue\n        temp -= a\n        if temp <= 0:\n            ans += 1\n        else:\n            ret.append(math.ceil(temp / a))\nret.sort()\nfor i in ret:\n    if i <= k:\n        k -= i\n        ans += 1\n    else:\n        break\nprint(ans)", "from bisect import bisect_right as br\nfrom math import ceil\n(n, a, b, k) = map(int, input().split())\nl = sorted(map(int, input().split()))\nr = a + b\nq = br(l, a)\np = []\nfor i in range(q, n):\n    if l[i] % r == 0:\n        p.append(b)\n    elif l[i] % r <= a:\n        q += 1\n    else:\n        p.append(l[i] % r - a)\np.sort()\nfor i in p:\n    k -= ceil(i / a)\n    if k >= 0:\n        q += 1\n    else:\n        break\nprint(q)", "from math import ceil\n(n, a, b, k) = list(map(int, input().split()))\nh = list(map(int, input().split()))\nks = []\nscore = 0\nfor i in range(n):\n    if h[i] % (a + b) == 0:\n        ks.append(ceil(b / a))\n    elif h[i] % (a + b) <= a and h[i] % (a + b) > 0:\n        score += 1\n    else:\n        r = h[i] % (a + b)\n        ks.append(ceil((r - a) / a))\nks = sorted(ks)\nks_score = 0\nfor i in ks:\n    ks_score += i\n    if ks_score <= k:\n        score += 1\nprint(score)", "(n, a, b, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nnew = []\nfor x in l1:\n    x = x % (a + b)\n    if x > 0 and x <= a:\n        new.append(0)\n    else:\n        if x == 0:\n            x = a + b\n        x -= a\n        temp = x // a\n        x = x - temp * a\n        if x > 0:\n            temp += 1\n        new.append(temp)\nnew.sort()\nanswer = 0\nfor item in new:\n    if k - item >= 0:\n        k -= item\n        answer += 1\n    else:\n        break\nprint(answer)", "from math import *\n(n, a, b, k) = list(map(int, input().split()))\narr = list(map(int, input().split()))\ncount = 0\nrem = []\nfor i in range(n):\n    if arr[i] % (a + b) > 0 and arr[i] % (a + b) <= a:\n        count += 1\n    else:\n        remPow = arr[i] % (a + b)\n        if remPow == 0:\n            remPow += b\n        else:\n            remPow -= a\n        rem.append(remPow)\nrem.sort()\ni = 0\nwhile k > 0 and i < len(rem):\n    temp = ceil(rem[i] / a)\n    k = k - temp\n    rem[i] = 0\n    if k > 0:\n        count = count + 1\n    if k == 0 and rem[i] <= 0:\n        count += 1\n    i += 1\nprint(count)", "(n, a, b, k) = map(int, input().split())\nH = list(map(int, input().split()))\nrisultato = 0\nK = []\nfor h in H:\n    r = h % (a + b)\n    if r > 0 and r <= a:\n        risultato += 1\n    else:\n        if r == 0:\n            r = b + a\n        if (r - a) % a == 0:\n            r = r - a\n        k_nec = (r - a) // a + 1\n        K.append(k_nec)\nK.sort()\nsomma = 0\ni = 0\nfor i in range(len(K)):\n    somma += K[i]\n    if somma > k:\n        break\n    else:\n        risultato += 1\nprint(risultato)", "from math import *\n(n, a, b, k) = map(int, input().split())\nl = list(map(int, input().split()))\nsum = a + b\nl2 = []\nans = 0\nfor i in l:\n    if i <= a:\n        ans += 1\n    elif i % sum > 0 and i % sum <= a:\n        ans += 1\n    else:\n        r = (i - a) % sum\n        r = ceil(r / a)\n        if r <= k:\n            l2.append(r)\nl2.sort()\nfor i in l2:\n    if i > k:\n        break\n    k -= i\n    ans += 1\nprint(ans)"]