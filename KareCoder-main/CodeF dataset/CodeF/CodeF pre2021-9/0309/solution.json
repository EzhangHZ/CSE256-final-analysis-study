["from bisect import bisect\nfrom itertools import accumulate\n\ndef main():\n    (n, k, x) = map(int, input().split())\n    aa = [int(a) for a in input().split()]\n    aa.sort()\n    gaps = [(b - a - 1) // x for (a, b) in zip(aa, aa[1:]) if b - a > x]\n    res = len(gaps) + 1\n    gaps.sort()\n    gsum = list(accumulate(gaps))\n    res -= bisect(gsum, k)\n    print(max(res, 1))\n    exit(0)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    (n, k, x) = map(int, input().split())\n    alst = list(map(int, input().split()))\n    alst.sort()\n    ans = 1\n    lst = []\n    bef = alst[0]\n    for a in alst[1:]:\n        d = a - bef\n        if d > x:\n            ans += 1\n            lst.append((d - 1) // x)\n        bef = a\n    lst.sort()\n    lst += [10 ** 50]\n    for l in lst:\n        if l <= k:\n            k -= l\n            ans -= 1\n        else:\n            break\n    print(ans)\nfor _ in range(1):\n    main()", "from math import ceil\n\ndef main():\n    (n, k, x) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = []\n    for i in range(1, n):\n        b.append((a[i] - a[i - 1] - 1) // x)\n        if b[-1] <= 0:\n            b.pop()\n    b.sort()\n    i = 0\n    while i < len(b) and k >= b[i]:\n        k -= b[i]\n        i += 1\n    print(len(b) - i + 1)\nmain()", "def main():\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    j = []\n    p = a[0]\n    for i in a[1:]:\n        if i - p > x:\n            d = (i - p - 1) // x\n            j.append(d)\n        p = i\n    j.sort()\n    r = 0\n    for i in j:\n        if i > k:\n            break\n        else:\n            k -= i\n            r += 1\n    print(1 + len(j) - r)\nmain()", "class Solution:\n\n    def stableGroups(self, N, K, X, stuLevel):\n        groups = 1\n        gapSize = []\n        prev = stuLevel[0]\n        for level in stuLevel:\n            fill = 0\n            if prev + X < level:\n                fill = (level - prev - 1) // X\n                gapSize.append(fill)\n                groups += 1\n            prev = level\n        (N, i) = (len(gapSize), 0)\n        gapSize.sort()\n        while i < N and K >= gapSize[i]:\n            K -= gapSize[i]\n            groups -= 1\n            i += 1\n        return groups\ns = Solution()\nt = 1\nwhile t:\n    (N, K, X) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    arr.sort()\n    print(s.stableGroups(N, K, X, arr))\n    t -= 1", "def read():\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    solve(n, k, x, a)\n\ndef solve(n, k, x, a):\n    difs = []\n    a.sort()\n    groups = 1\n    for i in range(1, n):\n        dif = a[i] - a[i - 1]\n        if dif > x:\n            groups += 1\n            difs.append(dif)\n    difs.sort()\n    for dif in difs:\n        ks = (dif - 1) // x\n        if ks > k:\n            break\n        k -= ks\n        groups -= 1\n    print(groups)\nrepeat = 1\nfor tc in range(repeat):\n    read()", "(n, k, x) = map(int, input().split())\narr = sorted(list(map(int, input().split())))\nb = sorted((v - u for (u, v) in zip(arr, arr[1:]) if v - u > x))\nr = len(b) + 1\nfor u in b:\n    k += -u // x + 1\n    if k < 0:\n        break\n    r -= 1\nprint(r)", "(n, k, x) = map(int, input().split())\narr = sorted(list(map(int, input().split())))\nb = sorted((v - u for (u, v) in zip(arr, arr[1:]) if v - u > x))\nr = len(b) + 1\nfor u in b:\n    k += -u // x + 1\n    if k < 0:\n        break\n    r -= 1\nprint(r)", "def main():\n    (n, k, x) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = []\n    a.sort()\n    for i in range(1, n):\n        h = a[i] - a[i - 1]\n        if h > x:\n            b += [(h - 1) // x]\n    b.sort()\n    i = 0\n    g = len(b)\n    count = 0\n    while i < g and k > 0:\n        k -= b[i]\n        if k >= 0:\n            count += 1\n        i += 1\n    print(g - count + 1)\nmain()", "(n, k, x) = map(int, input().split())\nz = list(map(int, input().split()))\n\ndef f(n, k, x, z):\n    if n == 1:\n        return 1\n    z = sorted(z)\n    d = sorted([z2 - z1 for (z1, z2) in zip(z, z[1:]) if z2 - z1 > x])\n    if len(d) == 0:\n        return 1\n    q = [(dd - 1) // x for dd in d]\n    s = 0\n    for (i, qq) in enumerate(q):\n        if k < s + qq:\n            break\n        s += qq\n    else:\n        i += 1\n    return len(q) - i + 1\nprint(f(n, k, x, z))", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = []\n    A.sort()\n    for i in range(n - 1):\n        if A[i + 1] - A[i] > x:\n            ans.append(A[i + 1] - A[i])\n    ans.sort()\n    net = len(ans) + 1\n    for i in ans:\n        if k > 0:\n            if i % x == 0:\n                temp = i // x - 1\n            else:\n                temp = i // x\n            if temp > k:\n                break\n            net -= 1\n            k -= temp\n    print(net)\nt = 1\nwhile t != 0:\n    solve()\n    t -= 1", "def func():\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    spaces = []\n    arr.sort()\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff > x:\n            spaces.append(diff)\n    l = len(spaces)\n    for el in sorted(spaces):\n        k_need = (el + x - 1) // x - 1\n        if k >= k_need:\n            k -= k_need\n            l -= 1\n        else:\n            break\n    print(l + 1)\nfor _ in range(1):\n    func()", "from math import ceil\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(k, x, a):\n    ans = 1\n    a = sorted(a)\n    l = 0\n    ts = a[0]\n    joincost = []\n    for i in a[1:]:\n        if i - ts <= x:\n            ts = i\n        else:\n            l += 1\n            joincost.append((i - ts + x - 1) // x - 1)\n            ts = i\n    l += 1\n    cans = l\n    t = 0\n    red = 0\n    joincost = sorted(joincost)\n    for pp in joincost:\n        if t + pp <= k:\n            red += 1\n            t += pp\n        else:\n            break\n    return cans - red\n(n, k, x) = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\nprint(f(k, x, a))", "from math import ceil\nfrom sys import stdin\ninput = stdin.readline\n\ndef f(k, x, a):\n    ans = 1\n    a = sorted(a)\n    l = 0\n    ts = a[0]\n    joincost = []\n    for i in a[1:]:\n        if i - ts <= x:\n            ts = i\n        else:\n            l += 1\n            joincost.append((i - ts + x - 1) // x - 1)\n            ts = i\n    l += 1\n    cans = l\n    t = 0\n    red = 0\n    joincost = sorted(joincost)\n    for pp in joincost:\n        if t + pp <= k:\n            red += 1\n            t += pp\n        else:\n            break\n    return cans - red\n(n, k, x) = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\nprint(f(k, x, a))", "(n, k, x) = map(int, input().split())\narray = sorted(list(map(int, input().split())))\narray2 = []\nfor i in range(n - 1):\n    val = (array[i + 1] - array[i] - 1) // x\n    if val > 0:\n        array2.append(val)\nif len(array2) == 0:\n    print(1)\nelse:\n    array2.sort()\n    cum = 0\n    for i in range(len(array2)):\n        cum += array2[i]\n        if cum > k:\n            print(len(array2) - i + 1)\n            break\n    else:\n        print(1)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    n -= k >= 0\nprint(n)", "def main():\n    (n, k, x) = map(int, input().split())\n    w = list(map(int, input().split()))\n    w = sorted(w)\n    p = []\n    for i in range(n - 1):\n        if w[i + 1] - w[i] > x:\n            n = (w[i + 1] - w[i] - 1) // x\n            p.append(n)\n    p = sorted(p)\n    i = 0\n    while i < len(p) and k > 0:\n        if p[i] <= k:\n            k -= p[i]\n            i += 1\n        elif p[i] > k:\n            break\n    print(len(p) - i + 1)\nmain()", "R = lambda : map(int, input().split())\n(n, k, x) = R()\na = sorted(R())\nfor u in sorted((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k >= 0:\n        n -= 1\n    else:\n        break\nprint(n)", "(n, k, x) = map(int, input().split())\n(a, mem) = (sorted([int(x) for x in input().split()]), [])\nfor i in range(1, n):\n    diff = a[i] - a[i - 1]\n    if diff > x:\n        mem.append((diff - 1) // x)\nmem.sort(reverse=True)\nwhile mem and mem[-1] <= k:\n    k -= mem.pop()\nprint(len(mem) + 1)", "import sys\ninput = sys.stdin.readline\n(n, k, y) = map(int, input().split())\nar = list(map(int, input().split()))\nar.sort()\na = []\ns = 1\nfor x in range(1, n):\n    if ar[x - 1] == ar[x]:\n        continue\n    b = (ar[x] - ar[x - 1] - 1) // y\n    a.append(b)\na.sort()\nfor x in range(len(a)):\n    if k >= a[x]:\n        k -= a[x]\n    else:\n        s += 1\nprint(s)", "from sys import stdin\n\ndef solve(k, x, levels):\n    sorted_levels = sorted(levels)\n    diffs = []\n    for i in range(1, len(sorted_levels)):\n        if sorted_levels[i] - sorted_levels[i - 1] > x:\n            diffs.append(sorted_levels[i] - sorted_levels[i - 1])\n    diffs.sort(reverse=True)\n    m = len(diffs)\n    for i in range(m - 1, -1, -1):\n        if (diffs[i] - 1) // x <= k:\n            k -= (diffs[i] - 1) // x\n            diffs.pop()\n    return len(diffs) + 1\n\ndef main():\n    nums = list(map(int, stdin.readline().split()))\n    (_, k, x) = (nums[0], nums[1], nums[2])\n    levels = list(map(int, stdin.readline().split()))\n    print(solve(k, x, levels))\nmain()", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = []\n    A.sort()\n    for i in range(n - 1):\n        if A[i + 1] - A[i] > x:\n            ans.append(A[i + 1] - A[i])\n    ans.sort()\n    net = len(ans) + 1\n    for i in ans:\n        if k > 0:\n            if i % x == 0:\n                temp = i // x - 1\n            else:\n                temp = i // x\n            if temp > k:\n                break\n            net -= 1\n            k -= temp\n    print(net)\nt = 1\nwhile t != 0:\n    solve()\n    t -= 1", "R = lambda : map(int, input().split())\n(n, k, x) = R()\na = sorted(R())\nfor u in sorted((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    n -= k >= 0\nprint(n)", "from sys import stdin, stdout\nimport math, bisect, heapq\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    return ''.join(list(map(str, a)))\n\ndef solve():\n    (n, k, x) = L()\n    a = L()\n    b = []\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            ans += 1\n            b += [(a[i] - a[i - 1] - 1) // x]\n    b.sort()\n    for i in b:\n        if k == 0:\n            break\n        if k >= i:\n            ans -= 1\n            k -= i\n    print(ans + 1)\nfor _ in range(1):\n    solve()", "from collections import Counter\n\ndef solve():\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    l1 = []\n    for i in range(1, n):\n        if l[i] - l[i - 1] <= x:\n            continue\n        l1.append((l[i] - l[i - 1] - 1) // x)\n    l1.sort()\n    ans = len(l1)\n    for i in range(len(l1)):\n        if k < l1[i]:\n            break\n        k -= l1[i]\n        ans -= 1\n    print(ans + 1)\nsolve()", "import math\nimport sys\n(N, K, X) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\ndiffs = sorted([A[i + 1] - A[i] for i in range(N - 1)])\nans = 1\nfor diff in diffs:\n    if diff > X:\n        need = (diff - 1) // X\n        if need <= K:\n            K -= need\n        else:\n            ans += 1\nprint(ans)", "import math\nimport sys\n(N, K, X) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\ndiffs = sorted([A[i + 1] - A[i] for i in range(N - 1)])\nans = 1\nfor diff in diffs:\n    if diff > X:\n        need = (diff - 1) // X\n        if need <= K:\n            K -= need\n        else:\n            ans += 1\nprint(ans)", "import sys\n(n, k, x) = map(int, sys.stdin.readline().split())\ndata = list(map(int, sys.stdin.readline().split()))\ntemp = []\ndata.sort()\ncnt = 0\nfor i in range(1, len(data)):\n    term = (data[i] - data[i - 1] - 1) // x\n    if term > 0:\n        temp.append(term)\n        cnt += term\ntemp.sort()\nidx = len(temp) - 1\nwhile cnt > k:\n    cnt -= temp[idx]\n    idx -= 1\nprint(len(temp) - idx)", "import sys\n(N, k, x) = map(int, sys.stdin.readline().split(' '))\nA = list(map(int, sys.stdin.readline().split()))\nA.sort()\ngaps = []\nfor i in range(1, len(A)):\n    diff = A[i] - A[i - 1]\n    if diff > x:\n        gaps.append((diff - 1) // x)\ngaps.sort()\ngroups = len(gaps) + 1\nfor gap in gaps:\n    if gap <= k:\n        k -= gap\n        groups -= 1\n    else:\n        break\nprint(groups)", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    (n, k, x) = read_list_of_ints()\n    numbers = read_list_of_ints()\n    numbers.sort()\n    interval_cnt = 1\n    intervals = []\n    for i in range(1, n):\n        l = numbers[i - 1]\n        r = numbers[i]\n        delta = r - l\n        if delta > x:\n            interval_cnt += 1\n            intervals.append((delta - 1) // x)\n    if interval_cnt == 1:\n        print(1)\n        return\n    intervals.sort()\n    for add_pup in intervals:\n        k -= add_pup\n        if k > -1:\n            interval_cnt -= 1\n        else:\n            break\n    print(interval_cnt)\nmain()", "(n, k, x) = map(int, input().split())\n(a, mem) = (sorted([int(x) for x in input().split()]), [])\nfor i in range(1, n):\n    diff = a[i] - a[i - 1]\n    if diff > x:\n        mem.append((diff - 1) // x)\nmem.sort(reverse=True)\nwhile mem and mem[-1] <= k:\n    k -= mem.pop()\nprint(len(mem) + 1)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "I = lambda : map(int, input().split())\n(n, k, x) = I()\na = list(I())\na = sorted(a)\np = []\nop = 1\nfor i in range(n - 1):\n    dif = a[i + 1] - a[i] - 1\n    p.append(int(dif != -1) * (dif // x))\np.sort()\nfor j in p:\n    k = k - j\n    if k < 0:\n        op = op + 1\n        k = 0\nprint(op)", "[n, k, x] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\narr.sort()\ndiffs = []\ni = arr[0]\nfor j in arr[1:]:\n    d = j - i\n    if d > x:\n        if d % x == 0:\n            diffs.append(d // x - 1)\n        else:\n            diffs.append(d // x)\n    i = j\ndiffs.sort()\nn = len(diffs)\nfor d in diffs:\n    if d <= k:\n        k -= d\n        n -= 1\n        if k == 0:\n            break\nprint(n + 1)", "R = lambda : map(int, input().split())\n(n, k, x) = R()\na = sorted(R())\nfor u in sorted([max(v - u, x) for (u, v) in zip(a, a[1:])]):\n    k += -u // x + 1\n    if k >= 0:\n        n -= 1\n    else:\n        break\nprint(n)", "(n, k, x) = list(map(int, input().split()))\nv = list(map(int, input().split()))\nv.sort()\nl = []\nfor i in range(1, n):\n    d = v[i] - v[i - 1]\n    if d > x:\n        l.append((d - 1) // x)\nl.sort()\nmini = len(l) + 1\nfor i in l:\n    if k >= i:\n        k -= i\n        mini -= 1\nprint(mini)", "(n, k, x) = list(map(int, input().split()))\nv = list(map(int, input().split()))\nv.sort()\nl = []\nfor i in range(1, n):\n    d = v[i] - v[i - 1]\n    if d > x:\n        l.append((d - 1) // x)\nl.sort()\nmini = len(l) + 1\nfor i in l:\n    if k >= i:\n        k -= i\n        mini -= 1\nprint(mini)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "from itertools import *\nfrom operator import *\nR = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s(map(max, repeat(x), map(sub, a[1:], a))):\n    k += -u // x + 1\n    n -= k >= 0\nprint(n)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, k, x, arr):\n    arr.sort()\n    df = []\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff > x:\n            if diff % x == 0:\n                df.append(diff // x - 1)\n            else:\n                df.append(diff // x)\n    df.sort()\n    i = 0\n    while i < len(df):\n        k -= df[i]\n        if k < 0:\n            break\n        i += 1\n    print(len(df) - i + 1)\n(n, k, x) = get_int()\narr = int_arr()\nsolve(n, k, x, arr)", "def main():\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    v = []\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            v.append((a[i] - a[i - 1] - 1) // x)\n    v.sort(reverse=True)\n    while len(v):\n        if v[-1] <= k:\n            k -= v[-1]\n            v.pop()\n        else:\n            break\n    print(len(v) + 1)\nmain()", "(n, k, x) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort()\nd = []\nfor j in range(1, n):\n    if l[j] == l[j - 1]:\n        continue\n    b = (l[j] - l[j - 1] - 1) // x\n    d.append(b)\nd.sort()\nans = 1\nfor j in range(len(d)):\n    b = d[j]\n    if k >= b:\n        k -= b\n    else:\n        ans += 1\nprint(ans)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "soso = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = soso()\na = s(soso())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "import sys\nMOD = 1000000007\nno = lambda : print('NO')\nyes = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\ntest_case = 1\n\ndef ans():\n    (n, k, x) = ari()\n    a = ari()\n    a.sort()\n    cnt = 1\n    ss = []\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            dodo = a[i] - a[i - 1]\n            intial = (dodo - 1) // x\n            ss.append(intial)\n    ss.sort()\n    for i in ss:\n        if i <= k:\n            k = k - i\n        else:\n            cnt += 1\n    show(cnt)\n    return\nfor _ in range(test_case):\n    ans()", "from collections import Counter, defaultdict, deque\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k, x) = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    a.sort()\n    prev = a[0]\n    i = 1\n    res = 1\n    cost = []\n    while i < n:\n        if a[i] - prev <= x:\n            prev = a[i]\n            i += 1\n        else:\n            d = a[i] - prev - 1\n            m = d // x\n            cost.append(m)\n            prev = a[i]\n            i += 1\n    cost.sort()\n    ans = len(cost)\n    for i in range(ans):\n        if cost[i] <= k:\n            k -= cost[i]\n            ans -= 1\n        else:\n            break\n    print(ans + 1)\ntt = 1\nfor test in range(tt):\n    solve()", "(n, k, x) = map(int, input().split())\nl = sorted(list(map(int, input().split())))\nd = []\nans = 1\nfor i in range(len(l) - 1):\n    t = l[i + 1] - l[i]\n    if t > x:\n        d.append((t - 1) // x)\n        ans += 1\nd.sort()\nfor i in d:\n    if k >= i:\n        k = k - i\n        ans -= 1\n    else:\n        break\nprint(ans)", "import math\nfrom ctypes import c_longlong as ll\n\ndef solve(n, k, x, a):\n    a.sort()\n    diffs = []\n    ans = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            diffs.append(a[i] - a[i - 1])\n            ans += 1\n    diffs.sort()\n    for d in diffs:\n        if k > 0 and k >= (d - 1) // x:\n            k -= (d - 1) // x\n            ans -= 1\n    return ans\n(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, x, a))", "(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nd = []\nfor i in range(1, n):\n    if a[i] - a[i - 1] > x:\n        d.append((a[i] - a[i - 1] - 1) // x)\nd.sort()\np = 0\nfor i in d:\n    if i <= k:\n        k -= i\n        p += 1\n    else:\n        break\nprint(len(d) + 1 - p)", "(n, k, x) = map(int, input().split())\nsch = list(map(int, input().split()))\nsch = sorted(sch)\nans = 1\nintrvl = []\nfor i in range(1, n):\n    if sch[i] - sch[i - 1] > x:\n        ans += 1\n        dist = sch[i] - sch[i - 1] - 1\n        rsch = dist // x\n        intrvl.append(rsch)\nintrvl = sorted(intrvl, reverse=True)\nwhile intrvl and intrvl[-1] <= k:\n    k -= intrvl.pop()\n    ans -= 1\nprint(ans)", "def func():\n    (x, y, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    i = 0\n    ans = x\n    a.sort()\n    b = []\n    for i in range(x - 1):\n        b.append(a[i + 1] - a[i] - z)\n    b.sort()\n    for i in range(x - 1):\n        if b[i] > 0:\n            if y >= (b[i] + z - 1) // z:\n                y -= (b[i] + z - 1) // z\n                ans -= 1\n        else:\n            ans -= 1\n    print(ans)\nfunc()", "(n, k, x) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\nd = []\nfor i in range(n - 1):\n    if arr[i + 1] - arr[i] > x:\n        d.append((arr[i + 1] - arr[i] - 1) // x)\nd.sort()\nd.reverse()\nwhile d:\n    if d[-1] <= k:\n        k -= d[-1]\n        d.pop()\n    else:\n        break\nprint(len(d) + 1)", "(n, k, x) = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nl = []\nfor i in range(1, len(a)):\n    d = a[i] - a[i - 1]\n    if d <= x:\n        continue\n    l.append((d - 1) // x)\nl.sort()\nans = len(l) + 1\nfor y in l:\n    if k >= y:\n        k -= y\n        ans -= 1\nprint(ans)", "(n, k, x) = map(int, input().split())\ny = list(sorted(map(int, input().split())))\nl = []\nfor i in range(1, n):\n    if y[i] - y[i - 1] > x:\n        l.append((y[i] - y[i - 1] - 1) // x)\nl.sort()\np = 0\nfor i in l:\n    if i <= k:\n        k -= i\n        p += 1\n    else:\n        break\nprint(len(l) + 1 - p)", "import io\nimport os\nimport sys\nimport math\nimport heapq\nimport bisect\nimport random\nimport string\nimport decimal\nimport functools\nimport fractions\nimport itertools\nimport collections\nfrom sys import stdin, stdout\nfrom io import BytesIO, IOBase\nfrom math import gcd, floor, sqrt, log, factorial\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, Counter, defaultdict, OrderedDict, namedtuple, UserDict, UserList, UserString\nMOD = 1000000007\nsys.setrecursionlimit(100000000)\nBUFSIZE = 8192\n(n, k, x) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\ndiffArr = []\nfor i in range(1, len(arr)):\n    diff = arr[i] - arr[i - 1]\n    if diff > x:\n        diffArr.append(diff)\nres = 0\ndiffArr.sort()\nfor diff in diffArr:\n    if diff <= (k + 1) * x and k > 0:\n        k = k - (diff - 1) // x\n    else:\n        res += 1\nprint(res + 1)", "R = lambda : map(int, input().split())\n(n, k, x) = R()\na = sorted(R())\nb = sorted((v - u for (u, v) in zip(a, a[1:]) if v - u > x))\nr = len(b) + 1\nfor u in b:\n    k += -u // x + 1\n    if k < 0:\n        break\n    r -= 1\nprint(r)", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    (n, k, x) = M()\n    a = L()\n    a.sort()\n    b = []\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            b.append(a[i] - a[i - 1])\n    b.sort()\n    c = len(b) + 1\n    for i in b:\n        d = i // x\n        if i % x == 0:\n            d = d - 1\n        if d <= k:\n            c = c - 1\n            k = k - d\n        else:\n            break\n    print(c)\ntt = 1\nfor _ in range(tt):\n    solve()", "import sys\ninput = sys.stdin.readline\n(n, k, x) = map(int, input().split())\na = sorted(map(int, input().split()))\ndifferences = sorted(filter(lambda x: x > 0, [(a[i] - a[i - 1] - 1) // x for i in range(1, n)]))\nans = len(differences) + 1\nfor i in differences:\n    if i <= k:\n        k -= i\n        ans -= 1\n    else:\n        break\nprint(ans)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nr = len((b := s((max(v - u, x) for (u, v) in zip(a, a[1:]))))) + 1\nfor u in b:\n    k += -u // x + 1\n    if k < 0:\n        break\n    r -= 1\nprint(r)", "(n, k, x) = map(int, input().split())\nli = list(map(int, input().split()))\nli.sort()\nneeded_li = []\nfor i in range(1, n):\n    value = li[i] - li[i - 1]\n    if value <= x:\n        continue\n    else:\n        needed_li.append((value - 1) // x)\nneeded_li.sort()\ndeleted_diff_element_count = 0\nfor needed in needed_li:\n    if needed <= k:\n        deleted_diff_element_count += 1\n        k -= needed\n    else:\n        break\nprint(len(needed_li) - deleted_diff_element_count + 1)", "from heapq import heapify, heappop, heappush\n\ndef main():\n    (n, k, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    HQ = []\n    for i in range(len(A) - 1):\n        d = A[i + 1] - A[i]\n        num = (d - 1) // x\n        if num > 0:\n            heappush(HQ, num)\n    while HQ:\n        if k >= HQ[0]:\n            k -= HQ[0]\n            heappop(HQ)\n        else:\n            break\n    ans = len(HQ)\n    print(ans + 1)\nmain()", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "(n, k, x) = map(int, input().split())\na = sorted(map(int, input().split()))\ndl = []\nc = 1\nfor i in range(1, n):\n    temp = a[i] - a[i - 1]\n    if temp > x:\n        dl.append((temp - 1) // x)\n        c += 1\ndl.sort()\nfor i in dl:\n    if k < i:\n        break\n    else:\n        k -= i\n        c -= 1\nprint(c)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    n -= k >= 0\nprint(n)", "import math\nimport sys\n(N, K, X) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\ndiffs = sorted([A[i + 1] - A[i] for i in range(N - 1)])\nans = 1\nfor diff in diffs:\n    if diff > X:\n        need = (diff - 1) // X\n        if need <= K:\n            K -= need\n        else:\n            ans += 1\nprint(ans)", "from collections import Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef f(n, x):\n    return n // x\n\ndef solve():\n    (n, k, x) = read()\n    arr = read()\n    cuts = []\n    arr.sort()\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] > x:\n            cuts.append(arr[i + 1] - arr[i] - 1)\n    cuts.sort()\n    ans = len(cuts) + 1\n    for i in cuts:\n        need = f(i, x)\n        if k >= need:\n            ans -= 1\n            k -= need\n    ans_.append(ans)\nsolve()\nfor i in ans_:\n    print(i)", "(n, k, x) = map(int, input().split())\na = sorted(list(map(int, input().split())))\nif x == 0:\n    print(len(a))\n    exit()\nl = []\nfor i in range(len(a) - 1):\n    if a[i + 1] - a[i] > x:\n        l.append((a[i + 1] - a[i] - 1) // x)\nl.sort()\ns = 0\nans = -1\nfor i in range(len(l)):\n    s += l[i]\n    if s > k:\n        ans = 1 + (len(l) - i)\n        break\nif ans == -1:\n    print(1)\nelse:\n    print(ans)", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\n\ndef mapinput():\n    return map(int, stdin.readline().split())\n\ndef strinput():\n    return stdin.readline().strip()\n\ndef listinput():\n    return list(map(int, stdin.readline().split()))\n\ndef intinput():\n    return int(stdin.readline().strip())\n\ndef solve():\n    (n, k, x) = mapinput()\n    arr = listinput()\n    arr.sort()\n    bridge = []\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] > x:\n            bridge.append(arr[i] - arr[i - 1])\n    ans = len(bridge) + 1\n    bridge.sort()\n    for i in range(len(bridge)):\n        bridgei = bridge[i]\n        stu = (bridgei - 1) // x\n        if k - stu >= 0:\n            ans -= 1\n            k -= stu\n        else:\n            break\n    print(ans)\nsolve()", "lists1 = list(map(int, input().split()))\nnums = lists1[0]\nadditional = lists1[1]\ndiff = lists1[2]\nlists = list(map(int, input().split()))\nlists = sorted(lists)\nans = []\nfor i in range(1, len(lists)):\n    difference = lists[i] - lists[i - 1]\n    if difference <= diff:\n        continue\n    ans.append((difference - 1) // diff)\nans = sorted(ans)\ncount = len(ans) + 1\ntoAdd = 0\nfor i in ans:\n    if i <= additional:\n        count -= 1\n        additional -= i\nprint(count)", "(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncnt = 0\ng = 1\nd = [a[i + 1] - a[i] for i in range(n - 1) if a[i + 1] - a[i] > x]\nd.sort()\nans = len(d) + 1\nfor i in d:\n    s = (i - 1) // x\n    if s <= k:\n        k -= s\n        ans -= 1\nprint(ans)", "(n, k, x) = map(int, input().split())\nintegers = list(map(int, input().split()))\nintegers.sort()\ngroups = [j - i for (i, j) in zip(integers, integers[1:]) if j - i > x]\ngroups.sort()\nans = len(groups) + 1\nfor dis in groups:\n    y = (dis + x - 1) // x - 1\n    if y <= k:\n        ans -= 1\n        k -= y\n    else:\n        break\nprint(ans)", "(n, k, x) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr = sorted(arr)\ndiff = [(arr[i + 1] - arr[i] - 1) // x for i in range(0, len(arr) - 1) if arr[i + 1] - arr[i] > x]\ncount = 0\nnewList = sorted(diff)\nfor i in newList:\n    if k >= i:\n        count += 1\n        k = k - i\n    else:\n        break\nprint(len(newList) - count + 1)", "(n, k, x) = map(int, input().split())\narr = list(map(int, input().split()))\narr = sorted(arr)\nlst = []\nfor i in range(1, n):\n    lst.append(arr[i] - arr[i - 1])\nlst = sorted(lst)\nc = 1\nfor i in lst:\n    if i > x:\n        req = (i - 1) // x\n        if req <= k:\n            k -= req\n        else:\n            c += 1\nprint(c)", "l1 = [int(i) for i in input().split(' ')]\nn = l1[0]\nk = l1[1]\nx = l1[2]\na = [int(i) for i in input().split(' ')]\na.sort()\ngaps = []\nans = 1\nfor i in range(n - 1):\n    if a[i + 1] - a[i] > x:\n        gaps.append((a[i + 1] - a[i] - 1) // x)\ngaps.sort()\nfor i in range(len(gaps)):\n    if k >= gaps[i]:\n        k -= gaps[i]\n    else:\n        ans += 1\nprint(ans)", "(n, k, x) = map(int, input().split())\ns = sorted(list(map(int, input().split())))\narr = []\nfor i in range(1, n):\n    d = s[i] - s[i - 1]\n    if d > x:\n        arr.append(d)\nl = len(arr)\narr.sort()\nfor i in arr:\n    a = (i - 1) // x\n    if a <= k:\n        k -= a\n        l -= 1\n    else:\n        break\nprint(l + 1)", "(n, k, x) = map(int, input().split())\nl = sorted(list(map(int, input().split())))\na = []\nans = 1\nfor i in range(1, n):\n    t = l[i] - l[i - 1]\n    if t > x:\n        ans += 1\n        a.append((t - 1) // x)\na.sort()\nfor i in a:\n    if k >= i:\n        k -= i\n        ans -= 1\n    else:\n        break\nprint(ans)", "(n, k, f) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\nres = []\nfor x in range(1, len(arr)):\n    if arr[x] - arr[x - 1] > f:\n        res.append((arr[x] - arr[x - 1] - 1) // f)\nres.sort()\nans = len(res) + 1\nfor x in res:\n    if k < x:\n        break\n    else:\n        k -= x\n        ans -= 1\nprint(ans)", "(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nl = []\nfor i in range(n - 1):\n    if a[i + 1] - a[i] > x:\n        l.append((a[i + 1] - a[i] - 1) // x)\nl.sort()\nc = 0\nfor i in range(len(l)):\n    k -= l[i]\n    if k >= 0:\n        c += 1\n    else:\n        break\nprint(len(l) - c + 1)", "(n, k, x) = map(int, input().split())\narr = sorted(map(int, input().split()))\nchhele_dhukbe = []\nfor i in range(1, n):\n    diff = arr[i] - arr[i - 1]\n    if diff > x:\n        (q, r) = divmod(diff, x)\n        q -= not r\n        chhele_dhukbe.append(q)\ncount = 0\nfor chheler_sonkhya in sorted(chhele_dhukbe):\n    if k < chheler_sonkhya:\n        break\n    k -= chheler_sonkhya\n    count += 1\nprint(len(chhele_dhukbe) - count + 1)", "[n, k, x] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\narr.sort()\ndiffs = []\ni = arr[0]\nfor j in arr[1:]:\n    d = j - i\n    if d > x:\n        if d % x == 0:\n            diffs += [d // x - 1]\n        else:\n            diffs += [d // x]\n    i = j\ndiffs.sort()\nn = len(diffs)\nfor d in diffs:\n    if d <= k:\n        k -= d\n        n -= 1\n        if k == 0:\n            break\nprint(n + 1)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        return 1\n    arr.sort()\n    ans = 1\n    diffs = []\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] > x:\n            ans += 1\n            diffs.append(arr[i + 1] - arr[i])\n    if not diffs:\n        return ans\n    diffs.sort()\n    m = len(diffs)\n    for j in range(m):\n        v = diffs[j] // x\n        if diffs[j] % x == 0:\n            v -= 1\n        if k - v >= 0:\n            ans -= 1\n            k -= v\n        else:\n            break\n    return ans\nprint(solve())", "(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncount = 1\nd = []\nfor i in range(1, n):\n    if a[i] - a[i - 1] > x:\n        d.append((a[i] - a[i - 1] - 1) // x)\n        count += 1\nif k == 0:\n    print(count)\nelse:\n    d.sort()\n    m = len(d)\n    for i in range(m):\n        if k >= d[i]:\n            k -= d[i]\n            count -= 1\n        else:\n            break\n    print(count)", "(N, K, X) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nds = [b - a for (a, b) in zip(A, A[1:])]\nds.sort()\nfrom bisect import bisect\ni = bisect(ds, X)\nds = ds[i:]\nds.reverse()\nwhile K > 0 and ds:\n    d = ds[-1]\n    k = (d - 1) // X\n    if K >= k:\n        ds.pop()\n    K -= k\nprint(len(ds) + 1)", "def main():\n    (n, k, x) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    spa = []\n    for i in range(1, n):\n        if a[i] - a[i - 1] > x:\n            spa.append(a[i] - a[i - 1])\n    spa.sort()\n    ans = len(spa)\n    for i in spa:\n        if (i - 1) // x <= k:\n            k -= (i - 1) // x\n            ans -= 1\n        else:\n            break\n    print(ans + 1)\nmain()", "(n, k, x) = map(int, input().split())\nv = list(map(int, input().split()))\nv.sort()\nw = []\nfor i in range(n - 1):\n    dif = max((v[i + 1] - v[i] - 1) // x, 0)\n    w.append(dif)\nw.sort()\naux = 0\nres = n\nfor i in range(len(w)):\n    aux += w[i]\n    if aux > k:\n        res = i\n        break\nprint(max(n - res, 1))", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "R = lambda : map(int, input().split())\ns = sorted\n(n, k, x) = R()\na = s(R())\nfor u in s((max(v - u, x) for (u, v) in zip(a, a[1:]))):\n    k += -u // x + 1\n    if k < 0:\n        break\n    n -= 1\nprint(n)", "(n, k, x) = map(int, input().split())\na = list(map(int, input().split()))\na = sorted(a)\ndiff = [0] * (len(a) - 1)\nfor i in range(len(a) - 1):\n    diff[i] = a[i + 1] - a[i]\ndiff = sorted(diff)\nanswer = 1\nfor d in diff:\n    if d > x:\n        add = (d - 1) // x\n        if k - add < 0:\n            answer += 1\n        else:\n            k -= add\nprint(answer)", "(n, k, x) = map(int, input().split())\na = sorted(list(map(int, input().split())))\nb = []\nans = 1\nfor i in range(1, n):\n    t = a[i] - a[i - 1]\n    if t > x:\n        ans += 1\n        b.append((t - 1) // x)\nb.sort()\nfor i in b:\n    if k >= i:\n        k -= i\n        ans -= 1\n    else:\n        break\nprint(ans)", "import sys\n(n, k, x) = map(int, sys.stdin.readline().split())\ndata = list(map(int, sys.stdin.readline().split()))\ndata.sort()\ncnt = 0\ntemp = []\nfor i in range(len(data) - 1):\n    if data[i + 1] - data[i] > 0:\n        temp.append((data[i + 1] - data[i] - 1) // x)\n        cnt += (data[i + 1] - data[i] - 1) // x\nans = 1\ntemp.sort()\nwhile cnt > k:\n    cnt -= temp.pop()\n    ans += 1\nprint(ans)", "import math\n(n, k, x) = map(int, input().split())\nl = list(map(int, input().split()))\nv = []\nif n == 1 and l[0] <= x:\n    print(1)\nelse:\n    l.sort()\n    ans = 1\n    for i in range(n - 1):\n        if l[i + 1] - l[i] > x:\n            ans += 1\n            v.append((l[i + 1] - l[i] - 1) // x)\n    v.sort()\n    for i in v:\n        if k == 0:\n            break\n        elif i <= k:\n            ans -= 1\n            k -= i\n    print(ans)", "import sys, math\n(n, k, x) = map(int, sys.stdin.readline().split())\nans = 1\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\ntemp = []\nfor i in range(1, n):\n    if arr[i] - arr[i - 1] > x:\n        ans += 1\n        temp.append((arr[i] - arr[i - 1] - 1) // x)\ntemp.sort()\nfor i in temp:\n    if i <= k:\n        ans -= 1\n        k -= i\n    else:\n        break\nprint(ans)"]