["def solve(n, arr):\n    l = {}\n    r = {}\n    cnt = {}\n    dp = [0] * (n + 1)\n    for i in range(n):\n        c = arr[i]\n        if c not in l:\n            l[c] = i\n    for i in range(n - 1, -1, -1):\n        c = arr[i]\n        if c not in cnt:\n            r[c] = i\n            cnt[c] = 0\n        cnt[c] += 1\n        dp[i] = dp[i + 1]\n        if l[c] == i:\n            dp[i] = max(dp[i], cnt[c] + dp[r[c] + 1])\n        else:\n            dp[i] = max(dp[i], cnt[c])\n    return n - dp[0]\nn = int(input())\narr = list(map(int, input().split()))\nprint(solve(n, arr))", "def solve(n, cols):\n    right = {}\n    left = {}\n    cnt = {}\n    for i in range(n):\n        if cols[i] not in left:\n            left[cols[i]] = i\n            cnt[cols[i]] = 0\n        right[cols[i]] = i\n    dp = [0] * (n + 1)\n    for i in reversed(range(n)):\n        cnt[cols[i]] += 1\n        if i == left[cols[i]]:\n            dp[i] = max(dp[i + 1], cnt[cols[i]] + dp[right[cols[i]] + 1])\n        else:\n            dp[i] = max(dp[i + 1], cnt[cols[i]])\n    return n - dp[0]\nn = int(input().strip())\ncols = [int(x) for x in input().strip().split()]\nprint(solve(n, cols))", "from collections import Counter\nn = int(input())\nM = list(map(int, input().split()))\n(left, right) = ({}, {})\nfor (i, m) in enumerate(M):\n    left.setdefault(m, i)\n    right[m] = i\ndp = [0] * (n + 1)\ncnt = Counter()\nfor i in range(n - 1, -1, -1):\n    dp[i] = dp[i + 1]\n    cnt[M[i]] += 1\n    if i == left[M[i]]:\n        dp[i] = max(dp[i], dp[right[M[i]] + 1] + cnt[M[i]])\n    else:\n        dp[i] = max(dp[i], cnt[M[i]])\nprint(n - dp[0])", "from collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\n(left, right) = ({}, {})\nfor (i, a) in enumerate(A):\n    left.setdefault(a, i)\n    right[a] = i\ndp = [0] * (n + 1)\ncnt = Counter()\nfor i in range(n - 1, -1, -1):\n    dp[i] = dp[i + 1]\n    cnt[A[i]] += 1\n    if i == left[A[i]]:\n        dp[i] = max(dp[i], dp[right[A[i]] + 1] + cnt[A[i]])\n    else:\n        dp[i] = max(dp[i], cnt[A[i]])\nprint(n - dp[0])", "from collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\n(left, right) = ({}, {})\ndp = [0] * (n + 1)\ncnt = Counter()\nfor (i, a) in enumerate(A):\n    left.setdefault(a, i)\n    right[a] = i\nfor i in range(n - 1, -1, -1):\n    dp[i] = dp[i + 1]\n    cnt[A[i]] += 1\n    dp[i] = max(dp[i], dp[right[A[i]] + 1] + cnt[A[i]]) if i == left[A[i]] else max(dp[i], cnt[A[i]])\nprint(n - dp[0])", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\n(left, right) = ({}, {})\nfor (i, a) in enumerate(A):\n    left.setdefault(a, i)\n    right[a] = i\ndp = [0] * (n + 1)\ncnt = Counter()\nfor i in range(n - 1, -1, -1):\n    dp[i] = dp[i + 1]\n    cnt[A[i]] += 1\n    if i == left[A[i]]:\n        dp[i] = max(dp[i], dp[right[A[i]] + 1] + cnt[A[i]])\n    else:\n        dp[i] = max(dp[i], cnt[A[i]])\nprint(n - dp[0])", "from collections import defaultdict, Counter\n\ndef get():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    return (n, nums)\n\ndef sort_book():\n    (n, nums) = get()\n    (min_idx, max_idx) = (dict(), dict())\n    val_to_idx = defaultdict(list)\n    counter = Counter()\n    for (i, x) in enumerate(nums):\n        if x not in min_idx:\n            min_idx[x] = i\n            max_idx[x] = i\n        min_idx[x] = min(i, min_idx[x])\n        max_idx[x] = max(i, max_idx[x])\n        val_to_idx[x].append(i)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        x = nums[i]\n        counter[x] += 1\n        dp[i] = dp[i + 1]\n        if i == min_idx[x]:\n            dp[i] = max(dp[i], len(val_to_idx[x]) + dp[max_idx[x] + 1])\n        else:\n            dp[i] = max(dp[i], counter[x])\n    return n - dp[0]\nprint(sort_book())", "from collections import defaultdict\nn = int(input())\nlst = list(map(int, input().split(' ')))\narr = [[-1 for i in range(2)] for j in range(n + 1)]\nfor i in range(n):\n    if arr[lst[i]][0] == -1:\n        arr[lst[i]][0] = i\n        arr[lst[i]][1] = i\n    arr[lst[i]][1] = i\na = defaultdict(lambda : 0)\ndp = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    a[lst[i]] += 1\n    if i == arr[lst[i]][0]:\n        dp[i] = max(dp[i + 1], a[lst[i]] + dp[arr[lst[i]][1] + 1])\n    else:\n        dp[i] = max(dp[i + 1], a[lst[i]])\nprint(n - dp[0])"]