["import sys\nimport math\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\n\ndef main(tc: int):\n    (n, m) = mp()\n    a = ria()\n    p = ria()\n    c = [0] * n\n    l = 0\n    for i in p:\n        c[i - 1] = 1\n    for i in range(n):\n        if c[i] == 0:\n            a[l:i + 1] = sorted(a[l:i + 1])\n            l = i + 1\n    for i in range(1, n):\n        if a[i - 1] > a[i]:\n            ws('NO')\n            return\n    ws('YES')\nt = ri()\nfor tc in range(1, t + 1):\n    main(tc)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, m) = [int(i) for i in input().split(' ')]\n        a = [int(i) for i in input().split(' ')]\n        p = sorted([int(i) - 1 for i in input().split(' ')])\n        positions = [i for i in range(n)]\n        for i in p:\n            positions[i + 1] = positions[i]\n        new_a = [[a[i], positions[i]] for i in range(n)]\n        if sorted(new_a, key=lambda x: x[0]) == sorted(new_a, key=lambda x: (x[1], x[0])):\n            print('YES')\n        else:\n            print('NO')\nmain_function()", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    lis_1 = [int(x) for x in input().split()]\n    s = set([int(x) for x in input().split()])\n    p = 0\n    lis = []\n    for i in range(1, n + 1):\n        if i not in s:\n            if p != 0:\n                lis += [min(lis_1[i - p - 1:i]), max(lis_1[i - p - 1:i])]\n            else:\n                lis.append(lis_1[i - 1])\n            p = 0\n        else:\n            p += 1\n    for i in range(len(lis) - 1):\n        if lis[i] > lis[i + 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        swap_arr = set(map(int, input().split()))\n        temp_arr = []\n        temp_temp_arr = []\n        for i in range(n):\n            temp_temp_arr.append(arr[i])\n            if not i + 1 in swap_arr or i == n - 1:\n                temp_arr.append(temp_temp_arr)\n                temp_temp_arr = []\n        final_arr = []\n        for temp_temp_arr in temp_arr:\n            final_arr.extend(sorted(temp_temp_arr))\n        if final_arr == list(sorted(arr)):\n            print('YES')\n        else:\n            print('NO')\nmain()", "def solve(a, b):\n    b.sort()\n    start = 0\n    inc = True\n    for i in range(1, len(b)):\n        if b[i] - b[start] != i - start:\n            a[b[start]:b[i - 1] + 2] = sorted(a[b[start]:b[i - 1] + 2])\n            start = i\n            inc = False\n    a[b[start]:b[-1] + 2] = sorted(a[b[start]:b[-1] + 2])\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            return 'NO'\n    return 'YES'\nline = int(input())\nfor _ in range(line):\n    input()\n    a = [int(i) for i in input().split(' ')]\n    b = [int(i) - 1 for i in input().split(' ')]\n    print(solve(a, b))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = [False] * n\n    arr = list(map(int, input().split()))\n    pi = list(map(int, input().split()))\n    for p in pi:\n        l[p - 1] = True\n    f = True\n    i = 0\n    while i < n:\n        if not l[i]:\n            i += 1\n            continue\n        idx = i\n        while idx < n and l[idx]:\n            idx += 1\n        arr[i:idx + 1] = sorted(arr[i:idx + 1])\n        i = idx\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            f = False\n            break\n    print('YES' if f else 'NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    if a == sorted(a):\n        print('YES')\n    elif len(p) == n - 1:\n        print('YES')\n    else:\n        while True:\n            state = False\n            for x in p:\n                if a[x - 1] > a[x]:\n                    state = True\n                    (a[x - 1], a[x]) = (a[x], a[x - 1])\n            if not state:\n                break\n        if a == sorted(a):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = sorted(list(map(int, input().split())))\n    start = p[0]\n    end = p[0]\n    for i in range(1, m):\n        if p[i] == p[i - 1] + 1:\n            end = p[i]\n        else:\n            l[start - 1:end + 1] = sorted(l[start - 1:end + 1])\n            start = p[i]\n            end = p[i]\n    l[start - 1:end + 1] = sorted(l[start - 1:end + 1])\n    if l == sorted(l):\n        print('YES')\n    else:\n        print('NO')", "import bisect\nlist_ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    set1 = set(map(int, input().split()))\n    list2 = sorted(list1)\n    set2 = set()\n    for x in range(n):\n        if list1[x] < list2[x]:\n            m = bisect.bisect_right(list2, list1[x])\n            set2.update((i for i in range(m, x + 1)))\n        elif list1[x] > list2[x]:\n            m = bisect.bisect_left(list2, list1[x])\n            set2.update((i for i in range(x + 1, m + 1)))\n    if set2.issubset(set1):\n        list_ans.append('YES')\n    else:\n        list_ans.append('NO')\nprint(*list_ans, sep='\\n')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    p.sort()\n    i = 0\n    while i < m:\n        j = i + 1\n        while j < m and p[j] == p[j - 1] + 1:\n            j += 1\n        a = l[p[i] - 1:p[j - 1] + 1]\n        a.sort()\n        tt = 0\n        for k in range(p[i] - 1, p[j - 1] + 1):\n            l[k] = a[tt]\n            tt += 1\n        i = j\n    if sorted(l) == l:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(k) for k in input().split()]\n    w = [int(k) for k in input().split()]\n    zxc = sorted(w)\n    q = sorted([int(k) for k in input().split()])\n    new = []\n    asd = set()\n    c = [q[0], q[0]]\n    asd |= {q[0]}\n    for j in q[1:]:\n        asd |= {j}\n        if j == c[1] + 1:\n            c = [c[0], c[1] + 1]\n        else:\n            new.append([c[0], c[1] + 1])\n            asd |= {c[1] + 1}\n            c = [j, j]\n    new.append([c[0], c[1] + 1])\n    asd |= {c[1] + 1}\n    counter = 0\n    for k in range(n):\n        if k + 1 not in asd:\n            if w[k] != zxc[k]:\n                counter = 1\n                break\n    for k in new:\n        if sorted(w[k[0] - 1:k[1]]) != zxc[k[0] - 1:k[1]]:\n            counter = 1\n            break\n    if counter:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin, setrecursionlimit\nsetrecursionlimit(10 ** 8)\ninput = stdin.readline\n\ndef dfs(p):\n    v[p] = True\n    x = []\n    for i in adj[p]:\n        x += dfs(i)\n    return x + [b[p - 1]]\n\ndef answer():\n    for i in p:\n        if not v[i]:\n            x1 = dfs(i)[::-1]\n            x2 = []\n            for j in range(i - 1, i - 1 + len(x1)):\n                x2.append(a[j])\n            if x1 != sorted(x2):\n                return 'NO'\n    for i in range(n):\n        if not v[i + 1]:\n            if a[i] != b[i]:\n                return 'NO'\n    return 'YES'\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = sorted(list(map(int, input().split())))\n    adj = [[] for i in range(n + 1)]\n    for i in p:\n        adj[i].append(i + 1)\n    v = [False] * (n + 1)\n    b = sorted(a)\n    print(answer())", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(map(int, input().split()))\n    c = []\n    d = 0\n    i = 0\n    while i < len(b):\n        j = i + 1\n        while j < len(b) and b[j] == b[j - 1] + 1:\n            j += 1\n        while d < b[i] - 1:\n            c.append(a[d])\n            d += 1\n        t = sorted(a[b[i] - 1:b[j - 1] + 1])\n        c.extend(t)\n        d = len(c)\n        i = j\n    c.extend(a[d:])\n    for i in range(1, n):\n        if c[i] < c[i - 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    (n, m) = I()\n    a = list(I())\n    p = sorted(list(I()))\n    x = sorted(a)\n    ff = 1\n    st = z = 0\n    for cur in p:\n        cur = cur - 1\n        if cur != z:\n            if sorted(a[st:z + 1]) + a[z + 1:cur] != x[st:cur]:\n                ff = 0\n                break\n            else:\n                st = cur\n        z = cur + 1\n    if a[z + 1:] != x[z + 1:]:\n        ff = 0\n    print('YNEOS'[int(ff == 0)::2])", "t = int(input())\nfor i in range(t):\n    (n, p) = map(int, input().split())\n    s = list(map(int, input().split()))\n    sp = sorted(list(map(int, input().split())))\n    sor_s = sorted(s)\n    pos = 1\n    x = 1\n    for i in range(p):\n        if i != p - 1 and sp[i + 1] - sp[i] == 1:\n            x += 1\n        elif i == p - 1 and sp[i] - sp[i - 1] != 1 and (sp[i] != n - 1):\n            s[sp[i] - x:sp[i] + 1] = sorted(s[sp[i] - x:sp[i] + 1])\n        else:\n            s[sp[i] - x:sp[i] + 1] = sorted(s[sp[i] - x:sp[i] + 1])\n            x = 1\n    for j in range(n):\n        if s[j] != sor_s[j]:\n            print('NO')\n            pos = 0\n            break\n    if pos:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    pos = set([int(x) - 1 for x in input().split()])\n\n    def giveIndexMinMax(index):\n        (mini, maxi) = (arr[index], arr[index])\n        for index in range(index, len(arr)):\n            mini = min(mini, arr[index])\n            maxi = max(maxi, arr[index])\n            if index not in pos:\n                break\n        return [mini, maxi, index]\n    prevMax = 0\n    index = 0\n    flag = False\n    while index < len(arr):\n        if index in pos:\n            (mini, maxi, index) = giveIndexMinMax(index)\n            if mini >= prevMax:\n                prevMax = maxi\n            else:\n                flag = True\n                print('NO')\n                break\n        else:\n            if arr[index] < prevMax:\n                flag = True\n                print('NO')\n                break\n            prevMax = arr[index]\n        index += 1\n    if not flag:\n        print('YES')", "for _ in range(int(input())):\n    (N, k) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    swapables = sorted(list(map(int, input().split())))\n    if k + 1 >= N:\n        print('YES')\n        continue\n    collections = []\n    i = 0\n    while i < k:\n        start = swapables[i] - 1\n        while i < k - 1 and swapables[i] + 1 == swapables[i + 1]:\n            i += 1\n        end = swapables[i]\n        collections.append((start, end))\n        i += 1\n    arr_sorted = [sorted(arr[c[0] - 1:c[1] + 1]) for c in collections]\n    best_possibility = []\n    prev = 0\n    for c in collections:\n        (s, e) = c\n        if prev < s:\n            best_possibility += arr[prev:s]\n        best_possibility += sorted(arr[s:e + 1])\n        prev = e + 1\n    best_possibility += arr[prev:]\n    if sorted(arr) == best_possibility:\n        print('YES')\n    else:\n        print('NO')", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef mi():\n    return map(int, sys.stdin.readline().split())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (n, m) = mi()\n    l1 = li()\n    o = li()\n    l2 = sorted(l1)\n    if l1 == l2 or m + 1 >= n:\n        print('YES\\n')\n        return False\n    else:\n        l3 = []\n        [l3.append(x - 1) for x in o]\n        flag = True\n        while flag == True:\n            count = 0\n            for _ in l3:\n                if l1[_] > l1[_ + 1]:\n                    (l1[_], l1[_ + 1]) = (l1[_ + 1], l1[_])\n                    count += 1\n            if count > 0:\n                continue\n            else:\n                flag = False\n        if l1 == l2:\n            print('YES\\n')\n        else:\n            print('NO\\n')\nfor _ in range(ii()):\n    solve()", "a1 = int(input())\nfor i1 in range(a1):\n    arr = [int(x) for x in input().split()]\n    (n, m) = (arr[0], arr[1])\n    a = [int(x) for x in input().split()]\n    arr = sorted(a)\n    p = [int(x) for x in input().split()]\n    f = 0\n    for i in range(n - 1):\n        if i + 1 not in p:\n            if arr[:i + 1] != sorted(a[:i + 1]):\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, m, a, p):\n    a = [(v, ai) for (ai, v) in enumerate(a)]\n    sorted_a = sorted(a)\n    target_idx = {}\n    for si in range(n):\n        (v, ai) = sorted_a[si]\n        target_idx[ai] = si\n    for (v, ai) in a:\n        ti = target_idx[ai]\n        if ai < ti:\n            (less, more) = (ai, ti)\n        else:\n            (less, more) = (ti, ai)\n        for j in range(less, more):\n            if j not in p:\n                return 'NO'\n    return 'YES'\nT = int(input())\nfor t in range(T):\n    (n, m) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    p = set(map(lambda x: int(x) - 1, input().split()))\n    print(solve(n, m, a, p))", "def find(a, b):\n    c = []\n    for i in range(1, len(a)):\n        if i not in b:\n            c.append(i)\n    flag = 0\n    lmax = 0\n    if c:\n        for ii in range(0, c[0]):\n            if a[ii] > lmax:\n                lmax = a[ii]\n        for i in range(0, len(c) - 1):\n            min = 100\n            max = 0\n            for ii in range(c[i], c[i + 1]):\n                if a[ii] > max:\n                    max = a[ii]\n                if a[ii] < min:\n                    min = a[ii]\n            if lmax > min:\n                flag = 1\n                break\n            lmax = max\n        min = 100\n        for ii in range(c[-1], len(a)):\n            if a[ii] < min:\n                min = a[ii]\n        if min < lmax:\n            flag = 1\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\na = int(input())\nfor i in range(a):\n    b = input()\n    c = input().split(' ')\n    d = input().split(' ')\n    for i in range(len(c)):\n        c[i] = int(c[i])\n    for i in range(len(d)):\n        d[i] = int(d[i])\n    d.sort()\n    find(c, d)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(lambda x: int(x) - 1, input().split()))\n    p.sort()\n    s = a[:]\n    s.sort()\n    j = 0\n    k = 0\n    for i in range(n - 1):\n        if k < m and i == p[k]:\n            k += 1\n        else:\n            b = a[j:i + 1]\n            b.sort()\n            if s[j:i + 1] != b:\n                print('NO')\n                break\n            else:\n                j = i + 1\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    p = [False for _ in range(n)]\n    pos = [int(x) - 1 for x in input().split()]\n    for i in pos:\n        p[i] = True\n    ok = True\n    ma = a[0]\n    mb = 0\n    i = 1\n    while i < n and ok:\n        if not p[i - 1]:\n            mb = ma\n        if mb > a[i]:\n            ok = False\n            break\n        ma = max(ma, a[i])\n        i += 1\n    print(['NO', 'YES'][ok])", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(c) for c in input().split()]\n    ar = [int(c) for c in input().split()]\n    ps = [int(c) for c in input().split()]\n    sar = sorted(ar)\n    pss = [False] * n\n    for ec in ps:\n        pss[ec - 1] = True\n    csar = []\n    i = 0\n    while i < n:\n        tm = []\n        while i < n - 1 and pss[i]:\n            tm += [ar[i]]\n            i += 1\n        if i < n:\n            tm += [ar[i]]\n            i += 1\n        csar += sorted(tm)\n    print('YES' if csar == sar else 'NO')", "N = int(input())\nfor i in range(N):\n    d0 = input()\n    s0 = d0.split(' ')\n    n = int(s0[0])\n    m = int(s0[1])\n    d1 = input()\n    s1 = d1.split(' ')\n    d2 = input()\n    s2 = d2.split(' ')\n    a = [0 for j in range(n)]\n    p = [0 for j in range(m)]\n    b = [False for j in range(n - 1)]\n    for j in range(n):\n        a[j] = int(s1[j])\n    for j in range(m):\n        p[j] = int(s2[j])\n    for j in range(m):\n        b[p[j] - 1] = True\n    aCopy = a.copy()\n    a.sort()\n    j = 0\n    c = [aCopy[0]]\n    d = []\n    b.append(False)\n    while j < n - 1:\n        if b[j]:\n            c.append(int(aCopy[j + 1]))\n        else:\n            c.sort()\n            for x in c:\n                d.append(x)\n            c = [aCopy[j + 1]]\n        j = j + 1\n    c.sort()\n    for x in c:\n        d.append(x)\n    possible = True\n    for j in range(n):\n        if a[j] != d[j]:\n            possible = False\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    p.sort()\n    l = p[0] - 1\n    for i in range(1, m):\n        if p[i] - p[i - 1] > 1:\n            r = p[i - 1] + 1\n            a[l:r] = sorted(a[l:r])\n            l = p[i] - 1\n    r = p[m - 1] + 1\n    a[l:r] = sorted(a[l:r])\n    flag = 0\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            flag = 1\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for tc in range(int(input())):\n    (n, m) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    pos.sort()\n    new_arr = arr.copy()\n    if n == m + 1:\n        print('YES')\n    else:\n        for i in range(m - 1):\n            if pos[i + 1] - pos[i] > 1:\n                new_arr[pos[i] - 1:pos[i] + 1] = sorted(new_arr[pos[i] - 1:pos[i] + 1])\n        new_arr[pos[m - 1] - 1:pos[m - 1] + 1] = sorted(new_arr[pos[m - 1] - 1:pos[m - 1] + 1])\n        begin = -1\n        end = 0\n        for i in range(m - 1):\n            if pos[i + 1] - pos[i] == 1:\n                if begin == -1:\n                    begin = pos[i]\n                end = pos[i + 1]\n            elif end > 0:\n                new_arr[begin - 1:end + 1] = sorted(new_arr[begin - 1:end + 1])\n                begin = -1\n                end = 0\n        if end > 0:\n            new_arr[begin - 1:end + 1] = sorted(new_arr[begin - 1:end + 1])\n        arr.sort()\n        b = 0\n        for i in range(n):\n            if arr[i] != new_arr[i]:\n                print('NO')\n                b = 1\n                break\n        if b == 0:\n            print('YES')", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef mi():\n    return map(int, sys.stdin.readline().split())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (n, m) = mi()\n    l1 = li()\n    o = li()\n    l2 = sorted(l1)\n    if l1 == l2 or m + 1 >= n:\n        print('YES\\n')\n        return False\n    else:\n        l3 = []\n        [l3.append(x - 1) for x in o]\n        flag = True\n        while flag == True:\n            count = 0\n            for _ in l3:\n                if l1[_] > l1[_ + 1]:\n                    (l1[_], l1[_ + 1]) = (l1[_ + 1], l1[_])\n                    count += 1\n            if count > 0:\n                continue\n            else:\n                flag = False\n        if l1 == l2:\n            print('YES\\n')\n        else:\n            print('NO\\n')\nfor _ in range(ii()):\n    solve()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, m) = mints()\n    a = list(mints())\n    p = [1] * 101\n    for i in mints():\n        p[i] = 0\n    cnt = [0] * 101\n    for i in range(n):\n        cnt[i + 1] = cnt[i] + p[i + 1]\n    p = list()\n    b = sorted(a)\n    where = [[] for i in range(101)]\n    for i in range(n - 1, -1, -1):\n        where[a[i]].append(i)\n    for i in range(n):\n        pos = where[b[i]].pop()\n        if cnt[pos] - cnt[i] > 0:\n            print('NO')\n            return\n    print('YES')\nfor i in range(mint()):\n    solve()", "a1 = int(input())\nfor i1 in range(a1):\n    arr = [int(x) for x in input().split()]\n    (n, m) = (arr[0], arr[1])\n    a = [int(x) for x in input().split()]\n    arr = sorted(a)\n    p = [int(x) for x in input().split()]\n    f = 0\n    for i in range(n - 1):\n        if i + 1 not in p:\n            if arr[:i + 1] != sorted(a[:i + 1]):\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    t = II()\n    for _ in range(t):\n        (n, m) = MI()\n        aa = LI()\n        pp = LI1()\n        bb = []\n        cur = []\n        for p in sorted(pp):\n            if not cur:\n                if p > 0:\n                    bb += aa[:p]\n                cur = [p]\n            elif p == cur[-1] + 1:\n                cur.append(p)\n            else:\n                bb += sorted(aa[cur[0]:cur[-1] + 2])\n                bb += aa[cur[-1] + 2:p]\n                cur = [p]\n        bb += sorted(aa[cur[0]:cur[-1] + 2])\n        bb += aa[cur[-1] + 2:]\n        aa.sort()\n        if aa == bb:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    y.sort()\n    chains = []\n    while True:\n        current_chain = []\n        start = y.pop(0)\n        current_chain.append(start)\n        while True:\n            current_chain.append(start + 1)\n            if start + 1 not in y:\n                break\n            else:\n                start = y.pop(0)\n        chains.append(current_chain)\n        if len(y) == 0:\n            break\n    for chain in chains:\n        if chain:\n            left = chain[0]\n            right = chain[-1]\n            x[left - 1:right] = sorted(x[left - 1:right])\n    if x == sorted(x):\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (n, m) = map(int, input().split())\n    array = list(map(int, input().split()))\n    copy = array[:]\n    ps = list(sorted(map(int, input().split())))\n    can = []\n    left = ps[0]\n    right = left + 1\n    for index in range(1, m):\n        if ps[index] - ps[index - 1] == 1 or ps[index] == 1:\n            right += 1\n        else:\n            can.append((left, right))\n            left = ps[index]\n            right = left + 1\n    can.append((left, right))\n    for each in can:\n        array[each[0] - 1:each[1]] = sorted(array[each[0] - 1:each[1]])\n    if array == sorted(copy):\n        print('YES')\n    else:\n        print('NO')\nT = int(input())\nfor _ in range(T):\n    solve()", "for ti in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    p.sort()\n    s = [0] * (len(a) + 1)\n    for pi in p:\n        s[pi - 1] = 1\n    (rl, ri) = ([], 0)\n    while ri < len(a):\n        while ri < len(a) and (not s[ri]):\n            rl.append(a[ri])\n            ri += 1\n        start = ri\n        while ri < len(a) and s[ri]:\n            ri += 1\n        end = ri + 1\n        ri += 1\n        np = sorted(a[start:end])\n        for x in np:\n            rl.append(x)\n    for i in range(1, len(a)):\n        if rl[i] < rl[i - 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "def check_array(array, array1):\n    dict = {}\n    for j in array:\n        if j in dict:\n            dict[j] += 1\n        else:\n            dict[j] = 1\n    for j in array1:\n        if j not in dict:\n            return False\n        elif dict[j] == 0:\n            return False\n        else:\n            dict[j] -= 1\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    n_list = list(map(int, input().split()))\n    m_list = list(map(int, input().split()))\n    req_list = sorted(n_list)\n    vis = [0] * n\n    for i in m_list:\n        vis[i - 1] = 1\n    f = 1\n    last = 0\n    for i in range(n):\n        if vis[i] == 1:\n            last_vis = i + 1\n    k = 0\n    for i in range(n):\n        if vis[i] == 0 and last_vis < i:\n            k = 1\n            break\n        if vis[i] == 0:\n            if not check_array(n_list[last:i + 1], req_list[last:i + 1]):\n                f = 0\n                break\n            else:\n                last = i + 1\n    if k == 1:\n        for l in range(i + 1, n):\n            if req_list[l] != n_list[l]:\n                f = 0\n                break\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    a = [*R()]\n    b = sorted({*range(1, n + 1)} - {*R()})\n    for (i, j) in zip([0] + b, b + [n]):\n        a[i:j] = sorted(a[i:j])\n    print('YNEOS'[a > sorted(a)::2])", "t = int(input())\nfor _ in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    a_list = list(map(int, input().split()))\n    check = [False for _ in range(n)]\n    for p in list(map(int, input().split())):\n        check[p - 1] = True\n    start = 0\n    while start < n:\n        if not check[start]:\n            start += 1\n            continue\n        end = start + 1\n        while True:\n            if end >= n or not check[end]:\n                break\n            end += 1\n        sorted_list = sorted(a_list[start:end + 1])\n        for i in range(end - start + 1):\n            a_list[start + i] = sorted_list[i]\n        start = end\n    end_flag = False\n    for i in range(len(a_list) - 1):\n        if a_list[i] > a_list[i + 1]:\n            print('NO')\n            end_flag = True\n            break\n    if not end_flag:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    flag = 0\n    b = a[:]\n    z = a[:]\n    b.sort()\n    p.sort()\n    count = -1\n    if len(p) >= len(a) - 1 or a == b:\n        flag = 1\n        print('YES')\n    if flag == 0:\n        while 1:\n            if a != b:\n                count = 0\n                for i in p:\n                    if a[i - 1] > a[i]:\n                        count = 1\n                        c = a[i - 1]\n                        a[i - 1] = a[i]\n                        a[i] = c\n                if count == 0:\n                    print('NO')\n                    break\n            else:\n                print('YES')\n                break", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    l2 = [0] * n\n    for j in range(len(l1)):\n        l2[l1[j] - 1] = 1\n    ind = 0\n    l3 = []\n    for j in range(len(l2)):\n        if l2[j] == 0:\n            l4 = l[ind:j + 1]\n            ind = j + 1\n            l4.sort()\n            l3 = l3 + l4\n    for j in range(1, n):\n        if l3[j] < l3[j - 1]:\n            print('NO')\n            break\n        elif j == n - 1:\n            print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    n = inp()\n    for i in range(n):\n        [n, m] = inlt()\n        a = inlt()\n        p = inlt()\n        p.sort()\n        j = 0\n        while j < len(p):\n            start = p[j]\n            end = start + 1\n            j = j + 1\n            while j < len(p):\n                if p[j] != end:\n                    break\n                j = j + 1\n                end = end + 1\n            start = start - 1\n            end = end - 1\n            dum = a[start:min(len(a), end + 1)]\n            dum.sort()\n            a[start:min(len(a), end + 1)] = dum\n        is_possible = 'YES'\n        for j in range(1, len(a)):\n            if a[j - 1] > a[j]:\n                is_possible = 'NO'\n                break\n        print(is_possible)\n    return\nmain()", "def run_case():\n    (n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))\n    conn = [False] * n\n    for i in p:\n        conn[i - 1] = True\n    for i in range(n - 1):\n        if not conn[i]:\n            left = max(a[:i + 1])\n            right = min(a[i + 1:])\n            if left > right:\n                return 'NO'\n    return 'YES'\n\ndef main():\n    number_of_cases = int(input())\n    for i in range(number_of_cases):\n        print(run_case())\nmain()", "caseNum = int(input())\nfor i in range(caseNum):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))\n    p = [i - 1 for i in p]\n    p.sort()\n    ans = 1\n    p_start = p[0]\n    p_end = p_start + 1\n    for j in range(len(p)):\n        if j + 1 == len(p):\n            a[p_start:p_end + 1] = sorted(a[p_start:p_end + 1])\n        elif p[j + 1] - p[j] == 1:\n            p_end = p[j + 1] + 1\n        elif p[j + 1] - p[j] > 1:\n            a[p_start:p_end + 1] = sorted(a[p_start:p_end + 1])\n            p_start = p[j + 1]\n            p_end = p_start + 1\n    for k in range(len(a) - 1):\n        if a[k] > a[k + 1]:\n            ans = 0\n            break\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "def read_ints():\n    return [int(x) for x in input().split()]\nt = int(input())\nfor _ in range(t):\n    (n, m) = read_ints()\n    a = read_ints()\n    p = [x - 1 for x in read_ints()] + [1000]\n    p.sort()\n    chunk_start = p[0]\n    p_chunks = []\n    for i in range(1, len(p)):\n        if p[i - 1] + 1 < p[i]:\n            p_chunks.append([chunk_start, p[i - 1] + 1])\n            chunk_start = p[i]\n    for (l, r) in p_chunks:\n        a[l:r + 1] = sorted(a[l:r + 1])\n    if a == sorted(a):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    p.sort()\n    i = 0\n    while i < m:\n        temp = p[i]\n        k = i + 1\n        while k < m:\n            if p[k] != temp + 1:\n                break\n            else:\n                temp = p[k]\n            k += 1\n        arr[p[i] - 1:p[k - 1] + 1] = sorted(arr[p[i] - 1:p[k - 1] + 1])\n        i = k\n    if arr == sorted(arr):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = sorted(map(int, input().split()))\n    p.append(n + 1)\n    (l, r) = (0, 0)\n    b = a[0:p[l] - 1]\n    while r < m:\n        while r < m and p[r] - p[l] == r - l:\n            r += 1\n        b.extend(sorted(a[p[l] - 1:p[r - 1] + 1]))\n        b.extend(a[p[r - 1] + 1:p[r] - 1])\n        l = r\n    print('YES') if sorted(a) == b else print('NO')", "input = __import__('sys').stdin.readline\nprint = __import__('sys').stdout.write\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = sorted(list(map(int, input().split())))\n    rr = []\n    start = p[0]\n    current = p[0]\n    for i in range(1, m):\n        if p[i] - current == 1:\n            current = p[i]\n            continue\n        else:\n            rr.append((start - 1, current))\n            start = p[i]\n            current = p[i]\n    else:\n        rr.append((start - 1, current))\n    for (i, j) in rr:\n        a[i:j + 1] = sorted(a[i:j + 1])\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            print('NO\\n')\n            break\n    else:\n        print('YES\\n')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    a = [*R()]\n    p = {*R()}\n    i = 0\n    for j in range(1, n + 1):\n        if not {j} & p:\n            a[i:j] = sorted(a[i:j])\n            i = j\n    print('YNEOS'[a > sorted(a)::2])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = list((int(i) for i in input().split()))\n    b = list((0 for i in range(n)))\n    for i in input().split():\n        b[int(i) - 1] = 1\n    r = 0\n    while r < n:\n        l = r\n        while r < n and b[r] == 1:\n            r += 1\n        r += 1\n        a = a[:l] + sorted(a[l:r]) + a[r:]\n    if sorted(a) != a:\n        print('NO')\n    else:\n        print('YES')", "from bisect import bisect_left\noutput = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    pos_d = {}\n    for i in pos:\n        pos_d[i - 1] = True\n    i = 0\n    while i < n:\n        if i not in pos_d:\n            i += 1\n            continue\n        j = i\n        while j < n and j in pos_d:\n            j += 1\n        arr[i:j + 1] = sorted(arr[i:j + 1])\n        i = j\n        i += 1\n        if i >= n - 1:\n            break\n    ok = True\n    for i in range(0, n - 1):\n        ok &= arr[i] <= arr[i + 1]\n    print('YES' if ok else 'NO')", "t = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    swapAllowed = [False] * n\n    temp = [int(x) for x in input().split()]\n    for x in temp:\n        swapAllowed[x - 1] = True\n    (i, j) = (0, 0)\n    while i < n:\n        isWhite = True if swapAllowed[i] else False\n        while j < n and swapAllowed[i] == swapAllowed[j]:\n            j += 1\n        last = min(j + 1, n)\n        if isWhite:\n            array[i:last] = sorted(array[i:last])\n        i = j\n    Ans = 'YES'\n    for i in range(n - 1):\n        if array[i] > array[i + 1]:\n            Ans = 'NO'\n            break\n    print(Ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    for i in input().split():\n        p[int(i) - 1] = 1\n    index = 0\n    while index < n:\n        left = index\n        while index < n and p[index] == 1:\n            index += 1\n        index += 1\n        a = a[:left] + sorted(a[left:index]) + a[index:]\n    if sorted(a) != a:\n        print('NO')\n    else:\n        print('YES')", "def wriedsort(arr, p):\n    p = sorted(p)\n    i = 0\n    j = 0\n    while i < len(p):\n        while j < len(p) and p[i] - p[j] == i - j:\n            arr[p[i] - 1:p[j] + 1] = sorted(arr[p[i] - 1:p[j] + 1])\n            j += 1\n        i = j\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return 'NO'\n    return 'YES'\ntestcases = int(input())\nfor i in range(testcases):\n    (sizearr, sizecanswap) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    canswap = list(map(int, input().split()))\n    print(wriedsort(arr, canswap))", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef mi():\n    return map(int, sys.stdin.readline().split())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (n, m) = mi()\n    l1 = li()\n    o = li()\n    l2 = sorted(l1)\n    if l1 == l2 or m + 1 >= n:\n        print('YES\\n')\n        return False\n    else:\n        l3 = []\n        [l3.append(x - 1) for x in o]\n        flag = True\n        while flag == True:\n            count = 0\n            for _ in l3:\n                if l1[_] > l1[_ + 1]:\n                    (l1[_], l1[_ + 1]) = (l1[_ + 1], l1[_])\n                    count += 1\n            if count > 0:\n                continue\n            else:\n                flag = False\n        if l1 == l2:\n            print('YES\\n')\n        else:\n            print('NO\\n')\nfor _ in range(ii()):\n    solve()", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef mi():\n    return map(int, sys.stdin.readline().split())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (n, m) = mi()\n    l1 = li()\n    o = li()\n    l2 = sorted(l1)\n    if l1 == l2 or m + 1 >= n:\n        print('YES\\n')\n    else:\n        l3 = []\n        [l3.append(x - 1) for x in o]\n        flag = True\n        while flag == True:\n            count = 0\n            for _ in l3:\n                if l1[_] > l1[_ + 1]:\n                    (l1[_], l1[_ + 1]) = (l1[_ + 1], l1[_])\n                    count += 1\n            if count > 0:\n                continue\n            else:\n                flag = False\n        if l1 == l2:\n            print('YES\\n')\n        else:\n            print('NO\\n')\nfor _ in range(ii()):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, p) = map(int, input().split())\n    s = list(map(int, input().split()))\n    sp = sorted(list(map(int, input().split())))\n    sor_s = sorted(s)\n    pos = 1\n    x = 1\n    for i in range(p):\n        if i != p - 1 and sp[i + 1] - sp[i] == 1:\n            x += 1\n        elif i == p - 1 and sp[i] - sp[i - 1] != 1 and (sp[i] != n - 1):\n            s[sp[i] - x:sp[i] + 1] = sorted(s[sp[i] - x:sp[i] + 1])\n        else:\n            s[sp[i] - x:sp[i] + 1] = sorted(s[sp[i] - x:sp[i] + 1])\n            x = 1\n    for j in range(n):\n        if s[j] != sor_s[j]:\n            print('NO')\n            pos = 0\n            break\n    if pos:\n        print('YES')", "class Graph:\n\n    def __init__(self, V):\n        self.V = V\n        self.adj = [[] for i in range(V)]\n\n    def DF(self, temp, v, visited):\n        visited[v] = True\n        temp.append(v)\n        for i in self.adj[v]:\n            if visited[i] == False:\n                temp = self.DF(temp, i, visited)\n        return temp\n\n    def add(self, v, w):\n        self.adj[v].append(w)\n        self.adj[w].append(v)\n\n    def cc(self):\n        visited = []\n        cc = []\n        for i in range(self.V):\n            visited.append(False)\n        for v in range(self.V):\n            if visited[v] == False:\n                temp = []\n                cc.append(self.DF(temp, v, visited))\n        return cc\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    positions = list(map(int, input().split()))\n    g = Graph(n)\n    for j in positions:\n        g.add(j - 1, j)\n    results = g.cc()\n    for j in results:\n        temp = a[min(j):max(j) + 1]\n        temp.sort()\n        a[min(j):max(j) + 1] = temp\n    failed = False\n    for j in range(1, n):\n        if a[j - 1] > a[j]:\n            failed = True\n            break\n    if failed == True:\n        print('NO')\n    else:\n        print('YES')", "sc = map(int, open(0).read().split())\nni = lambda : next(sc)\nT = ni()\nfor _ in range(T):\n    (N, M) = (ni(), ni())\n    A = [ni() for _ in range(N)]\n    P = set((ni() - 1 for _ in range(M)))\n    B = sorted(A)\n    G = []\n    T = set()\n    cur = 0\n    while cur < N:\n        while cur < N and cur in P:\n            T.add(cur)\n            cur += 1\n        if cur < N:\n            T.add(cur)\n        G.append(T)\n        T = set()\n        cur += 1\n    ans = True\n    for g in G:\n        X = {A[i] for i in g}\n        Y = {B[i] for i in g}\n        ans &= X == Y\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    A = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    P.append(a + 2)\n    B = A.copy()\n    B.sort()\n    P.sort()\n    a1 = P[0]\n    b1 = P[0]\n    C = []\n    NA = []\n    PA = []\n    for i in range(b):\n        if P[i + 1] == P[i] + 1:\n            b1 = P[i + 1]\n        else:\n            C.append([a1 - 1, b1 + 1])\n            a1 = P[i + 1]\n            b1 = P[i + 1]\n    for i in range(len(C)):\n        NA = A[C[i][0]:C[i][1]]\n        NA.sort()\n        A[C[i][0]:C[i][1]] = NA\n    if A == B:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    ps = list(map(lambda x: int(x) - 1, input().split()))\n    srt = sorted(lst)\n    ps.sort()\n    if n - 1 == m or lst == srt:\n        print('YES')\n    else:\n        st = 0\n        end = 0\n        while end < m:\n            end += 1\n            while end < m and ps[end] == ps[end - 1] + 1:\n                end += 1\n            lst = lst[:ps[st]] + sorted(lst[ps[st]:ps[end - 1] + 2]) + lst[ps[end - 1] + 2:]\n            st = end\n        if srt == lst:\n            print('YES')\n        else:\n            print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    a = [*R()]\n    b = sorted({*range(1, n + 1)} - {*R()})\n    for (i, j) in zip([0] + b, b + [n]):\n        a[i:j] = sorted(a[i:j])\n    print('YNEOS'[a > sorted(a)::2])", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    (b, z, flag) = (a[:], a[:], 0)\n    b.sort()\n    p.sort()\n    count = -1\n    if len(p) >= len(a) - 1 or a == b:\n        flag = 1\n        print('YES')\n    if flag == 0:\n        while True:\n            if a != b:\n                count = 0\n                for i in p:\n                    if a[i - 1] > a[i]:\n                        count = 1\n                        (a[i - 1], a[i]) = (a[i], a[i - 1])\n                if count == 0:\n                    print('NO')\n                    break\n            else:\n                print('YES')\n                break", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    a = [*R()]\n    p = (*R(),)\n    i = 0\n    for j in range(1, n + 1):\n        if j not in p:\n            a[i:j] = sorted(a[i:j])\n            i = j\n    print('YNEOS'[a > sorted(a)::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    a = [*R()]\n    p = {*R()}\n    i = 0\n    for j in range(1, n + 1):\n        if not {j} & p:\n            a[i:j] = sorted(a[i:j])\n            i = j\n    print('YNEOS'[a > sorted(a)::2])", "from sys import *\nn = lambda : map(int, stdin.readline().split())\nt = [*n()][0]\nwhile t > 0:\n    (m, k) = [*n()]\n    l = [*n()]\n    s = [*n()]\n    s.sort()\n    (p1, p2) = (s[0] - 1, s[0])\n    for i in s[1:]:\n        if p2 == i - 1:\n            p2 += 1\n        elif i - 1 > p2:\n            l = l[0:p1] + sorted(l[p1:p2 + 1]) + l[p2 + 1:]\n            p1 = i - 1\n            p2 = i\n    l = l[0:p1] + sorted(l[p1:p2 + 1]) + l[p2 + 1:]\n    if l == sorted(l):\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def check(pos, a, b):\n    while a <= b:\n        if b not in pos:\n            return False\n        b -= 1\n    return True\nkk = int(input())\nfor _ in range(kk):\n    (n, m) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    pos = set([int(x) - 1 for x in input().split()])\n    target = sorted(arr)\n    d = dict()\n    for (i, v) in enumerate(arr):\n        if v not in d:\n            d[v] = [i]\n        else:\n            d[v].append(i)\n    for v in d.values():\n        v.sort(reverse=True)\n    yes = True\n    for (i, t) in enumerate(target):\n        p = d[t].pop()\n        if not check(pos, i, p - 1):\n            yes = False\n            break\n    print('YES' if yes else 'NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    aa = a\n    p.sort()\n    tem1 = 0\n    tem2 = 0\n    for j in range(len(p)):\n        if p[j] != p[tem1] + tem2:\n            aa[p[tem1] - 1:p[j - 1] + 1] = sorted(aa[p[tem1] - 1:p[j - 1] + 1])\n            tem1 = j\n            tem2 = 0\n        tem2 += 1\n    aa[p[tem1] - 1:p[j] + 1] = sorted(aa[p[tem1] - 1:p[j] + 1])\n    if aa == sorted(a):\n        print('YES')\n    else:\n        print('NO')", "test = int(input())\nfor i in range(test):\n    [s, k] = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    has = [0] * (s + 1)\n    ans = []\n    for j in range(k):\n        has[brr[j]] = 1\n    for j in range(1, s + 1):\n        if has[j] == 0:\n            ans.append(j)\n    res = []\n    fin = []\n    ini = 0\n    for j in range(len(ans) - 1):\n        res.append(arr[ini:ans[j]])\n        ini = ans[j]\n    res.append(arr[ini:])\n    for j in range(len(res)):\n        res[j].sort()\n        fin.extend(res[j])\n    if fin == sorted(arr):\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [False] * n\n    for i in list(map(int, input().split())):\n        p[i - 1] = True\n    i = 0\n    while i < n:\n        if not p[i]:\n            i += 1\n            continue\n        j = i\n        while j < n and p[j]:\n            j += 1\n        a[i:j + 1] = sorted(a[i:j + 1])\n        i = j\n    print('YES') if all((a[i] <= a[i + 1] for i in range(n - 1))) else print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    tem = lis[:]\n    aa = [0] * 102\n    pos = list(map(int, input().split()))\n    for i in pos:\n        aa[i] = 1\n    i = 0\n    while i < 101:\n        if aa[i] == 1:\n            j = i + 1\n            while aa[j] == 1:\n                j += 1\n            tem[i - 1:j] = sorted(tem[i - 1:j])\n            i = j\n        else:\n            i += 1\n    lis.sort()\n    if lis == tem:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    p.sort()\n    i = 0\n    k = p[i]\n    j = p[i] + 1\n    while i < m - 1:\n        if p[i] + 1 == p[i + 1]:\n            j = p[i + 1] + 1\n        else:\n            a[k - 1:j] = sorted(a[k - 1:j])\n            k = p[i + 1]\n            j = p[i + 1] + 1\n        i += 1\n    a[k - 1:j] = sorted(a[k - 1:j])\n    f = 0\n    for i in range(n - 1):\n        if a[i] <= a[i + 1]:\n            continue\n        else:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    temp = [0 for x in range(n)]\n    for i in range(m):\n        temp[p[i] - 1] = 1\n    temp.append(0)\n    sco = l.copy()\n    sco.sort()\n    s = set()\n    flag = 0\n    sone = 9999999999\n    foe = False\n    for i in range(n + 1):\n        if temp[i] == 1:\n            sone = min(sone, i)\n            s.add(l[i])\n            foe = True\n        else:\n            if foe == False and l[i] != sco[i]:\n                flag = 1\n                break\n            if flag != 1 and temp[i - 1] == 1:\n                s.add(l[i])\n                for j in range(i, sone - 1, -1):\n                    if sco[j] in s:\n                        continue\n                    else:\n                        flag = 1\n                        break\n                s.clear()\n            elif i != n and l[i] != sco[i]:\n                flag = 1\n                break\n            if flag == 1:\n                break\n            sone = 9999999999\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    p.sort()\n    d = {}\n    for i in range(m):\n        d[p[i]] = 1\n        d[p[i] + 1] = 2\n    a1 = sorted(a)\n    flag = 'YES'\n    ind = []\n    ind1 = []\n    for i in range(n):\n        if d.get(i + 1) == None:\n            if a[i] != a1[i]:\n                flag = 'NO'\n                break\n        elif d.get(i + 1) == 1:\n            ind.append(a[i])\n            ind1.append(a1[i])\n        elif d.get(i + 1) == 2:\n            ind.append(a[i])\n            ind1.append(a1[i])\n            if sorted(ind) != ind1:\n                flag = 'NO'\n                break\n            ind = []\n            ind1 = []\n    print(flag)", "t = int(input())\nfor qwe in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = set(map(int, input().split()))\n    for i in range(n):\n        a[i] = (a[i], i)\n\n    def key1(a):\n        return a[0]\n    a.sort(key=key1)\n    flag = True\n    for i in range(n):\n        for j in range(i, a[i][1]):\n            if not j + 1 in p:\n                flag = False\n                break\n        if not flag:\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, m) = ipl()\n    a = ipl()\n    p = sorted(ipl())\n    i = 0\n    while i < m:\n        s = i\n        i += 1\n        while i < m and p[i] - p[i - 1] <= 1:\n            i += 1\n        a[p[s] - 1:p[i - 1] + 1] = sorted(a[p[s] - 1:p[i - 1] + 1])\n    print('YES' if a == sorted(a) else 'NO')\nfor _ in range(ipn()):\n    solve()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l1 = [int(x) for x in input().split()]\n    l2 = []\n    t = []\n    for x in l1:\n        l2.append(x)\n    l2.sort()\n    m = [int(x) for x in input().split()]\n    m.sort()\n    mlen = len(m)\n    q = [m[0], m[0] + 1]\n    t = [m[0], m[0] + 1]\n    flag = 0\n    for x in m[1:]:\n        if q[-1] == x:\n            q.append(x + 1)\n            t.append(x + 1)\n        else:\n            qlen = len(q)\n            l = []\n            for y in range(q[0] - 1, q[-1]):\n                l.append(l1[y])\n            l.sort()\n            if l != l2[q[0] - 1:q[-1]]:\n                flag = 1\n            q = [x, x + 1]\n            t.append(x)\n            t.append(x + 1)\n            if flag == 1:\n                break\n    if len(q) > 0:\n        qlen = len(q)\n        l = []\n        for y in range(q[0] - 1, q[-1]):\n            l.append(l1[y])\n        l.sort()\n        if l != l2[q[0] - 1:q[-1]]:\n            flag = 1\n    for x in range(1, a + 1):\n        if x in t:\n            continue\n        if l1[x - 1] != l2[x - 1]:\n            flag = 1\n            break\n    print('YES' if flag == 0 else 'NO')", "class FindUnionSet:\n\n    def __init__(self, n):\n        self.f = [i for i in range(n)]\n\n    def find(self, x):\n        if self.f[x] != x:\n            self.f[x] = self.find(self.f[x])\n        return self.f[x]\n\n    def union(self, x, y):\n        if x > y:\n            (x, y) = (y, x)\n        fx = self.find(x)\n        fy = self.find(y)\n        self.f[fx] = fy\nkase = int(input())\nfor k in range(kase):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    t = sorted(a)\n    s = FindUnionSet(n)\n    for i in p:\n        s.union(i - 1, i)\n    (left, i) = (0, 0)\n    while i < n:\n        if s.find(i) == i:\n            if sorted(a[left:i + 1]) != t[left:i + 1]:\n                print('NO')\n                break\n            left = i + 1\n        i += 1\n    else:\n        print('YES')", "import sys\nn = int(input())\nfor i in range(n):\n    (m, p) = map(int, input().strip().split())\n    a = []\n    arr = [int(i) for i in input().strip().split()]\n    for (idx, v) in enumerate(arr):\n        a.append((v, idx))\n    a = sorted(a)\n    b = []\n    for (idx, v) in enumerate(a):\n        if idx <= v[1]:\n            b.append((idx, v[1]))\n        else:\n            b.append((v[1], idx))\n    b = sorted(b)\n    pos = [int(i) for i in input().strip().split()]\n    e = -1\n    res = 'YES'\n    for v in b:\n        if v[0] != v[1]:\n            s = max(e, v[0])\n            if s <= v[1] - 1:\n                if any((i + 1 not in pos for i in range(s, v[1]))):\n                    res = 'NO'\n                    break\n                e = v[1]\n    print(res)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, M) = [int(x) for x in input().split()]\n        A = [int(x) for x in input().split()]\n        P = set([int(x) for x in input().split()])\n        A_sorted = []\n        for (i, a) in enumerate(A):\n            A_sorted.append([a, i])\n        A_sorted.sort()\n        f = True\n        for (i, v) in enumerate(A_sorted):\n            if i == v[1]:\n                continue\n            if i > v[1]:\n                for j in range(v[1] + 1, i + 1):\n                    if j not in P:\n                        f = False\n            else:\n                for j in range(i + 1, v[1] + 1):\n                    if j not in P:\n                        f = False\n        if f:\n            print('YES')\n        else:\n            print('NO')\nmain()", "YES = 'YES'\nNO = 'NO'\n\ndef solve(a, p):\n    bridge = [1] * (len(a) - 1)\n    sorted_a = list(a)\n    sorted_a.sort()\n    for i in p:\n        bridge[i - 1] = 0\n    if sum(bridge) == 0:\n        return YES\n    groups = []\n    temp_group = [a[0]]\n    for (index, i) in enumerate(bridge):\n        if i == 0:\n            temp_group.append(a[index + 1])\n        else:\n            if len(temp_group) > 0:\n                groups.append(temp_group)\n            temp_group = [a[index + 1]]\n    if len(temp_group):\n        groups.append(temp_group)\n    new_arr = [item for sublist in groups for item in sorted(sublist)]\n    return checkNonDesc(new_arr)\n\ndef checkNonDesc(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return NO\n    return YES\nt = int(input())\nfor x in range(t):\n    (len_a, len_p) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))\n    print(solve(a, p))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    if l == sorted(l):\n        print('YES')\n    elif l == sorted(l, reverse=True) and len(p) != n - 1:\n        print('NO')\n    elif l == sorted(l, reverse=True) and len(p) == n - 1 and (n not in p):\n        print('YES')\n    else:\n        while l != sorted(l):\n            flag = 0\n            for i in range(n - 1):\n                if l[i] > l[i + 1]:\n                    if i + 1 not in p:\n                        flag = 1\n                        break\n                    else:\n                        (l[i], l[i + 1]) = (l[i + 1], l[i])\n            if flag == 1:\n                print('NO')\n                break\n            if l == sorted(l):\n                print('YES')", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    b = sorted(a)\n    flag = 0\n    if m > n - 2:\n        flag = 0\n    else:\n        while b != a:\n            if flag == 1:\n                break\n            for i in range(0, n - 1):\n                if flag == 1:\n                    break\n                if a[i] > a[i + 1]:\n                    if p.count(i + 1) == 0:\n                        flag = 1\n                        break\n                    else:\n                        temp = a[i]\n                        a[i] = a[i + 1]\n                        a[i + 1] = temp\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def rindex(l, e):\n    res = len(l) - l[::-1].index(e) - 1\n    return res\nT = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    sP = set(P)\n    sA = sorted(A)\n    res = True\n    for i in range(n):\n        Ai = A[i]\n        sAi = sA[i]\n        if Ai > sAi:\n            j = sA.index(Ai)\n            res_tmp = True\n            for k in range(i, j - 1):\n                if k + 1 not in sP:\n                    res_tmp = False\n            if not res_tmp:\n                res = False\n                break\n        elif Ai < sAi:\n            j = rindex(sA, Ai)\n            res_tmp = True\n            for k in range(i - 1, j - 1, -1):\n                if k + 1 not in sP:\n                    res = False\n                    break\n            if not res_tmp:\n                res = False\n                break\n    print('YES') if res else print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = set()\n    l = list(map(int, input().split()))\n    k = set(map(int, input().split()))\n    j = sorted(l)\n    for x in range(n):\n        y = j.index(l[x])\n        j[y] = 0\n        for i in range(min(x + 1, y + 1), max(x + 1, y + 1)):\n            a.add(i)\n    print(['NO', 'YES'][a.issubset(k)])", "from sys import stdin\n\ndef cmp(key):\n    return a[key]\n\ndef judge(index_sort, origin_index, p):\n    first = 0\n    second = 0\n    if index_sort < origin_index:\n        (first, second) = (index_sort + 1, origin_index + 1)\n    else:\n        (first, second) = (origin_index + 1, index_sort + 1)\n    while first != second:\n        if first in p:\n            first += 1\n        else:\n            return False\n    return True\nt = int(stdin.readline())\nfor i in range(t):\n    (n, m) = list(map(int, stdin.readline().split(' ')))\n    a = list(map(int, stdin.readline().split(' ')))\n    p_list = list(map(int, stdin.readline().split(' ')))\n    p = {}\n    for item in p_list:\n        p[item] = 1\n    a_sort_index = [i for i in range(n)]\n    a_sort_index.sort(key=cmp)\n    state = 1\n    for i in range(n):\n        index_sort = a_sort_index.index(i)\n        if not judge(index_sort, i, p):\n            state = 0\n            break\n    if state == 1:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n\n    def find(i):\n        for j in range(n):\n            if i == sa[j]:\n                return j\n\n    def check(a, b):\n        for i in range(a, b):\n            if change[i] == 0:\n                return False\n        return True\n    tc = int(input())\n    for t in range(tc):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        change = [0 for _ in range(100)]\n        duplicate = [0 for _ in range(101)]\n        p = list(map(int, input().split()))\n        for i in p:\n            change[i - 1] = 1\n        sa = sorted(a)\n        yes = True\n        for i in range(n):\n            idx = find(a[i]) + duplicate[a[i]]\n            if i < idx:\n                if check(i, idx) is False:\n                    yes = False\n                    break\n            elif check(idx, i) is False:\n                yes = False\n                break\n            duplicate[a[i]] += 1\n        if yes:\n            print('YES')\n        else:\n            print('NO')\nsolve()", "def main(n, m, a, p):\n    c = 0\n    if m == n - 1:\n        return 'YES'\n    for i in range(n - 1):\n        if a[i] <= a[i + 1]:\n            c += 1\n    if c == n - 1:\n        return 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[j] > a[j + 1]:\n                if j + 1 in p:\n                    (a[j], a[j + 1]) = (a[j + 1], a[j])\n                else:\n                    return 'NO'\n    return 'YES'\nk = int(input())\nfor _ in range(k):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    print(main(n, m, a, p))", "for nt in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    p = set(p)\n    if m >= n - 1:\n        print('YES')\n        continue\n    flag = 0\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                if j + 1 not in p:\n                    flag = 1\n                    break\n                (arr[j], arr[j + 1]) = (arr[j + 1], arr[j])\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def solution():\n    from sys import stdout, stdin\n    (_input, _print) = (stdin.readline, stdout.write)\n    for i in range(int(_input())):\n        (m, n) = [int(i) for i in input().split()]\n        arr = [int(i) for i in input().split()]\n        p = tuple((int(i) - 1 for i in input().split()))\n        if len(p) + 1 == len(arr):\n            print('YES')\n            continue\n        f = True\n        for i in range(m - 1):\n            for j in range(m - 1):\n                if arr[j] > arr[j + 1]:\n                    if j in p:\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j])\n                    else:\n                        f = False\n                        break\n        if f:\n            print('YES')\n        else:\n            print('NO')\nsolution()", "import math\nt = int(input())\nfor test in range(t):\n    [n, m] = [int(i) for i in input().split(' ')]\n    seq = [int(i) for i in input().split(' ')]\n    srt = [int(i) for i in input().split(' ')]\n    srt.sort()\n    bl = [False for _ in range(n)]\n    for c in srt:\n        bl[c - 1] = True\n    cp = seq.copy()\n    cp.sort()\n    doable = True\n    for i in range(len(cp)):\n        for j in range(len(seq)):\n            if cp[i] == seq[j]:\n                seq[j] = -1\n                for k in range(min(i, j), max(i, j)):\n                    if not bl[k]:\n                        doable = False\n                        break\n                break\n    if doable:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfor tt in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = {i - 1: 1 for i in a}\n    lsort = sorted(l)\n    flag = True\n    check = set()\n    for i in range(n):\n        if l[i] != lsort[i] or i in check:\n            for j in range(n):\n                if l[i] == lsort[j] and j not in check:\n                    ind = j\n                    check.add(j)\n                    break\n            if ind >= i:\n                for k in range(i, ind):\n                    if k not in d:\n                        flag = False\n            else:\n                for k in range(ind, i):\n                    if k not in d:\n                        flag = False\n        else:\n            check.add(i)\n    if flag:\n        print('YES')\n    else:\n        print('NO')"]