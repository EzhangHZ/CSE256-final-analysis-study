["t = int(input())\nr = str()\n\ndef numbersteps(k):\n    n = int(((1 + k * 8) ** (1 / 2) - 1) / 2)\n    if n * (n + 1) / 2 == k:\n        return n\n    if k == (n + 1) * (n + 2) / 2 - 1:\n        return n + 2\n    else:\n        return n + 1\nfor i in range(t):\n    x = int(input())\n    r = r + str(numbersteps(x)) + '\\n'\nprint(r)", "import math\n\ndef jumps(x):\n    s = math.ceil((-1 + math.sqrt(1 + 8 * x)) / 2)\n    ans = s * (s + 1) // 2\n    k = ans - 1 - x\n    if k > 0 or k < 0:\n        return s\n    if k == 0:\n        return s + 1\nt = int(input())\nfor x in range(t):\n    print(jumps(int(input())))", "def helper(l, r, x):\n    while l < r:\n        mid = l + r >> 1\n        if x > (mid + 1) * mid // 2:\n            l = mid + 1\n        elif x == (mid + 1) * mid // 2:\n            return mid\n        else:\n            r = mid\n    return l\nt = int(input().strip())\nfor i in range(t):\n    x = int(input().strip())\n    k = helper(1, x, x)\n    if k * (k + 1) // 2 == x or k * (k + 1) // 2 - x > 1:\n        print(k)\n    else:\n        print(k + 1)", "import sys\nimport math\nfrom decimal import *\nz = int(input())\nfor contorr in range(z):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        x_2 = int(((8 * n + 1) ** (1 / 2) - 1) / 2)\n        if x_2 * (x_2 + 1) / 2 == n:\n            print(x_2)\n        else:\n            x_2 += 1\n            if x_2 * (x_2 + 1) / 2 == n + 1:\n                x_2 += 1\n            print(x_2)", "import math\n\ndef solve(x):\n    n = math.ceil((-1 + (1 + 8 * x) ** 0.5) / 2.0)\n    diff = n * (n + 1) / 2 - x\n    return n + 1 if diff == 1 else n\nt = int(input().strip())\nwith open('output.txt', 'w') as output:\n    for i in range(t):\n        x = int(input().strip())\n        res = int(solve(x))\n        print(res)", "import math\nT = int(input(''))\nfor i in range(T):\n    n = int(input())\n    m = math.ceil((-1 + math.sqrt(8 * n + 1)) / 2)\n    num = m * (m + 1) // 2\n    if num - n == 1:\n        print(m + 1)\n    else:\n        print(m)", "import math\n\ndef f(k):\n    n = round(math.sqrt(2 * k))\n    if n * (n + 1) // 2 == k + 1:\n        n += 1\n    return n\nfor _ in range(int(input())):\n    print(f(int(input())))", "for _ in range(int(input())):\n    n = int(input())\n    x = (1 + 8 * n) ** 0.5 - 1\n    x = x / 2\n    if int(x) == x:\n        print(int(x))\n    else:\n        x = int(x) + 1\n        ans = x * (x + 1)\n        ans = ans // 2\n        if ans - 1 == n:\n            print(x + 1)\n        else:\n            print(x)", "import math\nfor test in range(int(input())):\n    k = int(input())\n    n = math.floor(math.sqrt(2 * k))\n    if n * (n + 1) // 2 < k:\n        n += 1\n    if n * (n + 1) // 2 == k + 1:\n        n += 1\n    print(n)", "pas = [i * (i + 1) // 2 for i in range(2 * 10 ** 3)]\n\ndef dico(l, x):\n    (i, j) = (0, len(l) - 1)\n    while i <= j:\n        ind = (i + j) // 2\n        if l[ind] == x:\n            i = ind\n            break\n        elif l[ind] < x:\n            i = ind + 1\n        else:\n            j = ind - 1\n    return i\nfor _ in range(int(input())):\n    n = int(input())\n    i = dico(pas, n)\n    print(i + pas[i] - n if pas[i] - n <= 1 else i)", "for _ in range(int(input())):\n    x = int(input())\n    t = int((1 + 8 * x) ** (1 / 2)) - 1\n    t = t // 2\n    if t * (t + 1) // 2 != x:\n        t = t + 1\n    if t * (t + 1) // 2 == x + 1:\n        t = t + 1\n    print(t)", "for i in range(int(input())):\n    x = int(input())\n    l = 1\n    r = x\n    ans = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        value = mid * (mid + 1) // 2\n        if l == r and value < x and (x <= (mid + 1) * (mid + 2) // 2):\n            ans += 1\n        if value < x:\n            l = mid + 1\n        elif value > x:\n            r = mid - 1\n        elif value == x:\n            ans = 0\n            break\n    g = mid + ans\n    if x + 1 == g * (g + 1) // 2:\n        print(g + 1)\n    else:\n        print(g)", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve(__=1):\n    for _ in range(__):\n        x = inp()\n        n = int(((8 * x + 1) ** 0.5 - 1) / 2)\n        if n * (n + 1) == 2 * x:\n            print(n)\n        elif (n + 1) * (n + 2) == 2 * x + 2:\n            print(n + 2)\n        else:\n            print(n + 1)\nsolve(inp())", "t = int(input())\nwhile t:\n    x = int(input())\n    if x == 1:\n        print(x)\n    else:\n        temp = int(pow(2 * x, 0.5))\n        k = 0\n        if temp * (temp + 1) == 2 * x:\n            print(temp)\n        else:\n            m = 0\n            if temp * (temp + 1) > 2 * x:\n                m = temp * (temp + 1) // 2 - x + temp\n            else:\n                temp += 1\n                m = temp * (temp + 1) // 2 - x + temp\n            if m - temp == 1:\n                print(m)\n            else:\n                print(temp)\n    t -= 1", "from math import ceil, sqrt\n\ndef check(x):\n    res = ceil((sqrt(1 + 8 * x) - 1) / 2)\n    if res * (res + 1) / 2 - x == 1:\n        return res + 1\n    return res\nfor q in range(int(input())):\n    x = int(input())\n    print(check(x))", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nt = int(input())\nfor tt in range(t):\n    x = int(input())\n    ok = 10 ** 6\n    ng = 0\n    while abs(ok - ng) > 1:\n        m = (ok + ng) // 2\n        if m * (m + 1) // 2 >= x:\n            ok = m\n        else:\n            ng = m\n    if x + 1 == ok * (ok + 1) // 2:\n        ok += 1\n    print(ok)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    (a, b) = (0, 1500)\n    while b - a > 5:\n        c = (a + b) // 2\n        if c * (c + 1) // 2 >= x:\n            b = c + 2\n        else:\n            a = c - 2\n    for j in range(a, b):\n        if j * (j + 1) // 2 >= x:\n            break\n    if j * (j + 1) // 2 != x + 1:\n        print(j)\n    else:\n        print(j + 1)", "import math\nfor _ in range(int(input())):\n    target = int(input())\n    n = math.ceil((-1 + (1 + 8 * target) ** 0.5) / 2)\n    if n * (n + 1) / 2 - target == 1:\n        n += 1\n    print(n)", "for _ in range(int(input())):\n    x = int(input())\n    t = int((1 + 8 * x) ** (1 / 2)) - 1\n    t = t // 2\n    if t * (t + 1) // 2 != x:\n        t = t + 1\n    if t * (t + 1) // 2 == x + 1:\n        t = t + 1\n    print(t)", "mod = 1000000007\nfrom math import factorial, ceil, pow, sqrt, floor, gcd\nfrom sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    x = int(stdin.readline())\n    t = int(sqrt(1 + 8 * x)) - 1\n    t = t // 2\n    ans = t\n    if x == t * (t + 1) // 2:\n        print(ans)\n    else:\n        t += 1\n        ans += 1\n        if x == t * (t + 1) // 2 - 1:\n            print(ans + 1)\n        else:\n            print(ans)", "mod = 1000000007\nfrom math import factorial, ceil, pow, sqrt, floor, gcd\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    x = int(stdin.readline())\n    t = int(sqrt(1 + 8 * x)) - 1\n    t = t // 2\n    ans = t\n    if x == t * (t + 1) // 2:\n        print(ans)\n    else:\n        t += 1\n        ans += 1\n        if x == t * (t + 1) // 2 - 1:\n            print(ans + 1)\n        else:\n            print(ans)", "t = int(input())\nr = str()\n\ndef numbersteps(k):\n    n = int(((1 + k * 8) ** (1 / 2) - 1) / 2)\n    if n * (n + 1) / 2 == k:\n        return n\n    if k == (n + 1) * (n + 2) / 2 - 1:\n        return n + 2\n    else:\n        return n + 1\nfor i in range(t):\n    x = int(input())\n    r = r + str(numbersteps(x)) + '\\n'\nprint(r)", "def binS(num):\n    start = 1\n    end = 1500\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * (mid + 1) // 2 == num:\n            return mid\n        elif mid * (mid + 1) // 2 < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if mid * (mid + 1) // 2 < num:\n        mid += 1\n    return mid\nt = int(input())\nfor case in range(t):\n    x = int(input())\n    ind = binS(x)\n    print(ind + 1 * (ind * (ind + 1) // 2 - 1 == x))", "def binS(num):\n    start = 1\n    end = 1500\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * (mid + 1) // 2 == num:\n            return mid\n        elif mid * (mid + 1) // 2 < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if mid * (mid + 1) // 2 < num:\n        mid += 1\n    return mid\nt = int(input())\nfor case in range(t):\n    x = int(input())\n    ind = binS(x)\n    print(ind + 1 * (ind * (ind + 1) // 2 - 1 == x))", "from math import sqrt\nfor _ in range(int(input())):\n    x = int(input())\n    jumps = (sqrt(1 + 8 * x) - 1) / 2\n    if jumps == int(jumps):\n        print(int(jumps))\n    else:\n        jumps = int(jumps) + 1\n        if x == jumps * (jumps + 1) / 2 - 1:\n            print(jumps + 1)\n        else:\n            print(jumps)", "for s in [*open(0)][1:]:\n    x = int(s)\n    k = int(((1 + 8 * x) ** 0.5 - 1) / 2) + 1\n    d = k * k + k - 2 * x\n    print(k - 1 + (d < 2 * k) + (d == 2))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = math.ceil(math.sqrt(n * 8 + 1))\n    l = math.ceil((p - 1) / 2)\n    c = l * (l + 1)\n    c = c // 2\n    if c - 1 == n:\n        print(l + 1)\n    else:\n        print(l)", "t = int(input())\n\ndef solve():\n    x = int(input())\n\n    def bs_right():\n        left = -1\n        right = 1000000000\n        while right - left > 1:\n            mid = (right + left) // 2\n            s = (1 + mid) * mid // 2\n            if s < x:\n                left = mid\n            else:\n                right = mid\n        return right\n    first_case = bs_right()\n    if (1 + first_case) * first_case // 2 - 1 == x:\n        print(first_case + 1)\n    else:\n        print(first_case)\nfor i in range(t):\n    solve()", "from sys import stdin, stdout\nt = int(stdin.readline())\npre_calculated = [i * (i + 1) // 2 for i in range(0, 1415)]\nwhile t:\n    x = int(stdin.readline())\n    if x == 2:\n        print(3)\n    elif x in pre_calculated:\n        print(pre_calculated.index(x))\n    else:\n        start = 0\n        end = 1414\n        at = -1\n        while start <= end:\n            mid = start + (end - start) // 2\n            if pre_calculated[mid] < x:\n                at = mid\n                start = mid + 1\n            elif pre_calculated[mid] > x:\n                end = mid - 1\n        if x == pre_calculated[at] - 1 or pre_calculated[at + 1] - 1 == x:\n            print(pre_calculated[at + 1] - pre_calculated[at] + 1)\n        else:\n            print(pre_calculated[at + 1] - pre_calculated[at])\n    t -= 1", "import math\nfor i in range(int(input())):\n    x = int(input())\n    value = (-1 + pow(1 + 8 * x, 0.5)) / 2\n    numbers = math.floor(value)\n    ceil = math.ceil(value)\n    if numbers == ceil:\n        newx = x\n    else:\n        newx = numbers * (numbers + 1) // 2 + ceil\n    if newx - x == 0:\n        print(numbers)\n    elif newx - x == 1:\n        print(numbers + 2)\n    else:\n        print(numbers + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    temp = int((n * 2) ** 0.5)\n    if (temp ** 2 + temp) / 2 == n + 1:\n        print(temp + 1)\n    elif (temp ** 2 + temp) / 2 >= n:\n        print(temp)\n    else:\n        print(temp + 1)", "import math\n\ndef isvalid(s):\n    k = (-1 + math.sqrt(1 + 8 * s)) / 2\n    return int(math.ceil(k))\nfor _ in range(int(input())):\n    n = int(input())\n    nw = isvalid(n)\n    sum1 = (nw + 1) * nw // 2\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    elif sum1 == n:\n        print(nw)\n    elif sum1 - n == 1:\n        print(nw + 1)\n    else:\n        print(nw)", "from math import *\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    n = ceil((-1 + sqrt(1 + 8 * x)) / 2)\n    p = n * (n + 1) // 2 - x - 1\n    if p == 0:\n        print(n + 1)\n    else:\n        print(n)", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nt = int(input())\nfor tt in range(t):\n    x = int(input())\n    ok = 2000\n    ng = 0\n    while abs(ok - ng) > 1:\n        m = (ok + ng) // 2\n        if m * (m + 1) // 2 >= x:\n            ok = m\n        else:\n            ng = m\n    if ok * (ok + 1) // 2 == x:\n        print(ok)\n    elif ok * (ok + 1) // 2 == x + 1:\n        print(ok + 1)\n    else:\n        print(ok)", "import math\nnum_cases = int(input())\nfor i in range(num_cases):\n    destination = input()\n    destination = int(destination)\n    steps = math.ceil((-1 + math.sqrt(1 + 8 * destination)) / 2)\n    extra_dist = steps * (steps + 1) / 2 - destination\n    if extra_dist == 1:\n        steps = steps + 1\n    else:\n        steps = steps\n    print(steps)", "t = int(input())\nimport math\nfor i in range(t):\n    x = int(input())\n    n = math.ceil((-1 + math.sqrt(1 + 8 * x)) / 2)\n    if n * (n + 1) * 0.5 == x:\n        print(n)\n    elif n * (n + 1) * 0.5 - x == 1:\n        print(n + 1)\n    else:\n        print(n)", "for t in range(int(input())):\n    x = int(input())\n    y = int((x * 2) ** 0.5)\n    while y * (y + 1) // 2 < x:\n        y += 1\n    while y * (y + 1) // 2 >= x:\n        y -= 1\n    if x == (y + 1) * (y + 2) // 2 - 1:\n        print(y + 2)\n    else:\n        print(y + 1)", "import math\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    k = math.ceil(((1 + 8 * x) ** 0.5 - 1) / 2)\n    xx = k * (k + 1) // 2\n    if xx - x == 1:\n        print(k + 1)\n    else:\n        print(k)", "from math import ceil\nt = int(input())\n\ndef main(x):\n    if x < 1:\n        return -x\n    D = 1 + 8 * x\n    n = (D ** 0.5 - 1) / 2\n    n = ceil(n)\n    y = n * (n + 1) // 2\n    z = n * (n - 1) // 2\n    if x == y - 1:\n        return n + 1\n    else:\n        return n\nfor _ in range(t):\n    print(main(int(input())))", "from math import sqrt\n\ndef main():\n    t = int(input())\n    for tc in range(t):\n        x = int(input())\n        min_n = (sqrt(1 + 8 * x) - 1) / 2\n        if int(min_n) == min_n:\n            print(int(min_n))\n        else:\n            min_n = int(min_n)\n            dif = x - min_n * (min_n + 1) // 2\n            if dif > min_n - 1:\n                print(min_n + 2)\n            else:\n                print(min_n + 1)\nints = lambda : list(map(int, input().split()))\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    root = math.sqrt(1 + 8 * x)\n    req = (root - 1) // 2\n    curr = req * (req + 1) // 2\n    if curr == x:\n        print(int(req))\n    else:\n        req += 1\n        currVal = req * (req + 1) // 2\n        diff = currVal - x - 1\n        if 0 < diff <= req:\n            print(int(req))\n        else:\n            print(int(req + diff + 1))", "import math\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    ans = math.ceil((math.sqrt(8 * x + 1) - 1) / 2)\n    com = ans * (ans + 1) / 2\n    if com - x == 1:\n        ans += 1\n    print(ans)", "import math\n\ndef main(x):\n    root = (-1 + math.sqrt(1 + 8 * (x + 1))) / 2\n    floor = math.floor(root)\n    if root - floor < 1e-10:\n        return floor + 1\n    else:\n        root = (-1 + math.sqrt(1 + 8 * x)) / 2\n        return math.ceil(root)\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    res = main(x)\n    print(res)\n\ndef test1():\n    assert True == False\n\ndef test2():\n    assert True == False\n\ndef test_min():\n    assert True == False\n\ndef test_max():\n    assert True == False", "import math\nt = int(input())\nwhile t:\n    t = t - 1\n    x = int(input())\n    n = math.ceil((-1 + math.sqrt(1 + 8 * x)) / 2)\n    s = n * (n + 1) // 2\n    if s - x == 1:\n        print(n + 1)\n    else:\n        print(n)", "import math\nl = []\ns = 0\nfor i in range(1, 1415):\n    s += i\n    l.append(s)\nfor _ in range(int(input())):\n    x = int(input())\n    p = int(math.sqrt(x * 2))\n    if l[p - 1] - 1 == x:\n        print(p + 1)\n    elif l[p - 1] < x:\n        print(p + 1)\n    elif l[p - 1] == x:\n        print(p)\n    else:\n        print(p)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    x = (-1 + (1 + 8 * n) ** 0.5) / 2\n    if x == math.floor(x):\n        print(int(x))\n    else:\n        p = math.ceil(x)\n        if p * (p + 1) // 2 - 1 == n:\n            print(int(x + 2))\n        else:\n            print(int(x + 1))", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    k = (-1 + (1 + 8 * x) ** 0.5) / 2\n    j = int(k) + 1\n    if k == int(k):\n        print(int(k))\n    elif j * (j + 1) // 2 - 1 == x:\n        print(j + 1)\n    else:\n        print(j)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    k = math.ceil(math.sqrt(8 * n + 1))\n    if n == 2:\n        print(3)\n    elif math.sqrt(8 * n + 9) % 1 == 0:\n        print(1 + math.ceil((k - 1) / 2))\n    else:\n        print(math.ceil((k - 1) / 2))", "for i in range(int(input())):\n    n = int(input())\n    det = (-1 + (1 + 8 * n) ** 0.5) / 2\n    if int(det) - det == 0:\n        print(int(det))\n    else:\n        det = det // 1\n        temp = det * (det + 1) // 2\n        if temp + det == n:\n            print(int(det + 2))\n        else:\n            print(int(det + 1))", "for s in [*open(0)][1:]:\n    x = int(s)\n    k = int(((1 + 8 * x) ** 0.5 - 1) / 2) + 1\n    d = k * k + k - 2 * x\n    print(k + (d < 2 * k) - (d > 2))", "import math\nfor tt in range(int(input())):\n    n = int(input())\n    val = math.ceil((-1 + math.sqrt(1 + 8 * n)) / 2)\n    if val * (val + 1) // 2 - n != 1:\n        print(val)\n    else:\n        print(val + 1)", "from math import sqrt, ceil\nfor I in range(int(input())):\n    X = int(input())\n    pos = ceil((-1 + sqrt(1 + 8 * X)) / 2)\n    Last = pos * (pos + 1) // 2\n    if Last == X or Last != X + 1:\n        print(pos)\n    else:\n        print(pos + 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(3)\n        continue\n    val = (-1 + pow(1 + 4 * (2 * n), 0.5)) / 2\n    if val == int(val):\n        print(int(val))\n    else:\n        val = int(val) + 1\n        ts = val * (val + 1) // 2\n        if ts - n == 1:\n            print(val + 1)\n        else:\n            print(val)", "t = int(input())\nimport math\n\ndef nearestSum(num):\n    ans = (math.sqrt(1 + 8 * num) - 1) * 0.5\n    if ans == int(ans):\n        return (int(ans), True)\n    return (int(ans + 1), False)\nfor i in range(t):\n    n = int(input())\n    (ans, flag) = nearestSum(n)\n    if flag:\n        print(ans)\n    else:\n        c = int(ans * (ans + 1) / 2 - n)\n        if c == 1:\n            print(ans + c)\n        else:\n            print(ans)", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    x = int(input())\n    c = ceil((sqrt(1 + 8 * x) - 1) / 2)\n    n = c * (c + 1) // 2\n    if n - x == 1:\n        print(c + 1)\n    else:\n        print(c)", "import math\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    z = (math.sqrt(x * 8 + 1) - 1) / 2\n    m = math.ceil(z)\n    sum = m * (m + 1) // 2\n    if sum - 1 == x:\n        print(m + 1)\n    else:\n        print(m)", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    d = math.sqrt(1 + 8 * x)\n    n = math.ceil((-1.0 + d) / 2.0)\n    m = n * (n + 1) / 2\n    if m == x:\n        print(n)\n    elif m - 1 == x:\n        print(n + 1)\n    else:\n        print(n)", "import math\na = int(input())\nb = []\nfor c in range(a):\n    d = int(input())\n    b.append(d)\nc = []\nx = 1\nfor e in b:\n    f = (-1 + math.sqrt(1 + 8 * e)) / 2\n    g = int(math.ceil(f))\n    h = g * (g + 1) / 2\n    h = int(h)\n    if e == 1:\n        c.append(x)\n    if e == h - 1:\n        c.append(g + 1)\n    elif e <= h and e != h - 1 and (e != x):\n        c.append(g)\nfor i in c:\n    print(i)", "import math\na = int(input())\nb = []\nfor c in range(a):\n    d = int(input())\n    b.append(d)\nc = []\nfor e in b:\n    f = (-1 + math.sqrt(1 + 8 * e)) / 2\n    g = int(math.ceil(f))\n    h = g * (g + 1) / 2\n    h = int(h)\n    if e == h - 1:\n        c.append(g + 1)\n    else:\n        c.append(g)\nfor i in c:\n    print(i)", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    x = int(input())\n    n = ceil((-1 + sqrt(1 + 8 * x)) / 2)\n    p = n * (n + 1) // 2 - x - 1\n    print(n + 1 if p == 0 else n)", "from math import sqrt\nfrom math import ceil\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    x = int(ceil(sqrt(float(1 + 8 * n))) // 2)\n    if (x * x + x) // 2 - n == 1:\n        print(x + 1)\n    else:\n        print(x)", "def hops(a):\n    n = int((-1 + (1 + 8 * a) ** (1 / 2)) / 2)\n    q = n * (n + 1) / 2\n    z = a - q\n    if z == 0:\n        return n\n    elif z == n:\n        return n + 2\n    else:\n        return n + 1\nfor i in range(int(input())):\n    a = int(input())\n    print(hops(a))", "for _ in range(int(input())):\n    a = int(input())\n    b = int((1 + 8 * a) ** 0.5)\n    c = int((b - 1) / 2)\n    if b * b == 1 + 8 * a:\n        print(c)\n    elif a == (c + 1) * (c + 2) / 2 - 1:\n        print(c + 2)\n    else:\n        print(c + 1)", "from math import *\nfor i in range(int(input())):\n    x = int(input())\n    n = (sqrt(1 + 8 * x) - 1) / 2\n    if n % 1 == 0:\n        print(int(n))\n    elif ((int(n) + 1) ** 2 + (int(n) + 1)) / 2 - x == 1:\n        print(int(n) + 2)\n    else:\n        print(int(n) + 1)", "def read():\n    return [int(x) for x in input().split()]\n(ca,) = read()\nfor _ in range(ca):\n    (n,) = read()\n    t = round((n * 2) ** 0.5) - 1\n    while t * (t + 1) // 2 < n:\n        t += 1\n    print(t if (t + 1) * t // 2 != n + 1 else t + 1)", "num_test_cases = int(input())\nfor i in range(0, num_test_cases):\n    dest = int(input())\n    num = int((-1 + (1 + 8 * dest) ** 0.5) // 2)\n    if num * (num + 1) == dest * 2:\n        print(num)\n    elif (num + 1) * (num + 2) == (dest + 1) * 2:\n        print(num + 2)\n    else:\n        print(num + 1)", "import math\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    n = (math.sqrt(8 * x + 1) - 1) / 2\n    m = (math.sqrt(8 * (x + 1) + 1) - 1) / 2\n    if int(n) == int(m):\n        print(math.ceil(n))\n    else:\n        print(math.ceil(n) + 1)", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nt = int(input())\nfor tt in range(t):\n    x = int(input())\n    ok = 2000\n    ng = 0\n    while abs(ok - ng) > 1:\n        m = (ok + ng) // 2\n        if m * (m + 1) // 2 >= x:\n            ok = m\n        else:\n            ng = m\n    if ok * (ok + 1) // 2 != x + 1:\n        print(ok)\n    else:\n        print(ok + 1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    s = math.ceil((math.sqrt(1 + 8 * n) - 1) / 2)\n    if (s + 1) * s // 2 == n:\n        print(s)\n    elif s * (s + 1) // 2 - n == 1:\n        print(s + 1)\n    elif s * (s + 1) // 2 - n > 1:\n        print(s)", "n = int(input())\nfor i in range(n):\n    r = int(input())\n    i = 1\n    j = 1000000\n    while i < j:\n        m = (i + j) // 2\n        s = m * (m + 1) // 2\n        if s >= r:\n            j = m\n        else:\n            i = m + 1\n    if i * (i + 1) // 2 - r == 1:\n        i += 1\n    print(i)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    k = 2 * n\n    k = int(math.sqrt(k))\n    for i in range(k - 2, k + 2):\n        m = i * (i + 1) // 2\n        if m == n:\n            ans = i\n            break\n        if m > n:\n            if m - n == 1:\n                ans = i + 1\n            else:\n                ans = i\n            break\n    print(ans)", "import math\n\ndef f(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    x = int(input())\n    tmp = ((8 * x + 1) ** 0.5 - 1) / 2\n    minK = math.ceil(tmp)\n    lastK = math.floor(tmp)\n    res = f(minK)\n    needToRemove = res - x\n    if needToRemove == 0:\n        print(minK)\n    elif needToRemove == 1:\n        print(minK + 1)\n    elif needToRemove <= lastK + 1:\n        print(minK)\n    else:\n        print('this shouldnt happen', minK)", "from math import *\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    pocet = 0\n    sucet = 0\n    if (-1 + sqrt(1 + 4 * 2 * x)) % 2 != 0:\n        pocet = int((-1 + sqrt(1 + 4 * 2 * x)) // 2 + 1)\n    else:\n        pocet = int((-1 + sqrt(1 + 4 * 2 * x)) // 2)\n    sucet = pocet * (pocet + 1) // 2\n    if 0 < sucet - x - 1 <= x:\n        print(pocet)\n    else:\n        print(pocet + (sucet - x))", "for i in range(int(input())):\n    n = int(input())\n    k = int((8 * n + 1) ** 0.5 - 1) // 2\n    if k * (k + 1) // 2 == n:\n        print(k)\n    elif (k + 1) * (k + 2) // 2 - n > 1:\n        print(k + 1)\n    else:\n        print(k + 2)", "import sys\nimport math\nimport bisect\nimport heapq\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nsums = []\nfor i in range(1, 1415):\n    sums.append(i * (i + 1) // 2)\nnum_cases = intinp()\nfor _ in range(num_cases):\n    x = intinp()\n    ind = bl(sums, x)\n    if sums[ind] == x:\n        print(ind + 1)\n    elif sums[ind] == x + 1:\n        print(ind + 2)\n    else:\n        print(ind + 1)", "T = int(input())\nfor z in range(T):\n    n = int(input())\n    N = (-1 + (1 + 8 * n) ** 0.5) // 2\n    N = int(N)\n    add = N * (N + 1) // 2\n    if add == n:\n        print(N)\n    else:\n        add = (N + 2) * (N + 1) // 2\n        if add - n == 1:\n            print(N + 2)\n        else:\n            print(N + 1)", "for _ in range(int(input())):\n    x = int(input())\n    ans = (1 + 8 * x) ** 0.5 - 1\n    ans = ans / 2\n    x = x + 1\n    temp = (1 + 8 * x) ** 0.5 - 1\n    temp = temp / 2\n    if ans % 1 == 0:\n        print(int(ans))\n    elif temp % 1 == 0:\n        print(int(ans) + 2)\n    else:\n        print(int(ans) + 1)", "from math import sqrt, ceil\nfor ii in range(int(input())):\n    n = int(input())\n    x = ceil((-1 + sqrt(1 + 8 * n)) / 2)\n    s = x * (x + 1) // 2\n    if s - n == 1:\n        print(x + 1)\n    else:\n        print(x)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if math.sqrt(8 * n + 1) == int(math.sqrt(8 * n + 1)):\n        print(int(int(int(math.sqrt(8 * n + 1)) - 1) / 2))\n    else:\n        temp = int(int(math.sqrt(8 * n + 1) - 1) / 2)\n        temp2 = temp\n        temp2 += 1\n        if int(temp2 * (temp2 + 1) / 2) == n + 1:\n            print(temp2 + 1)\n        else:\n            print(temp2)", "t = int(input())\nd = [1]\nfor i in range(1, 3000):\n    d.append(d[i - 1] + i + 1)\nn = len(d) - 1\nfor _ in range(t):\n    x = int(input())\n    if x > 3:\n        l = 0\n        r = n\n        while l < r:\n            m = l + (r - l) // 2\n            if d[m] <= x:\n                l = m + 1\n                if d[m] == x:\n                    upper = m\n                if l < len(d) and d[l] == x:\n                    upper = l\n            else:\n                r = m\n        if d[l - 1] == x:\n            print(l)\n        elif d[l] - 1 == x:\n            print(l + 2)\n        else:\n            print(l + 1)\n    elif x == 1:\n        print(1)\n    elif x == 2:\n        print(3)\n    elif x == 3:\n        print(2)", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    n = round(math.sqrt(2 * x))\n    s = (1 + n) * n // 2\n    while s > x:\n        n -= 1\n        s = (1 + n) * n // 2\n    while s < x:\n        n += 1\n        s = (1 + n) * n // 2\n    if s == x:\n        print(n)\n    elif s > x + 1:\n        print(n)\n    else:\n        print(n + 1)", "def find(a):\n    if a == 1:\n        return 1\n    if a == 2:\n        return 3\n    si = 1\n    ei = a\n    while si < ei:\n        n = (si + ei) // 2\n        mid = n * (n + 1) // 2\n        if mid == a:\n            return n\n        if mid - 1 == a:\n            return n + 1\n        if mid > a:\n            ei = n\n        else:\n            si = n + 1\n    qq = si * (si + 1) // 2\n    if qq < a:\n        return si + 1\n    return si\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    print(find(a))", "import math\nt = int(input())\n\ndef solve():\n    x = int(input())\n    c = math.ceil((math.sqrt(1 + 8 * x) - 1) / 2)\n    if c * (c + 1) / 2 == x + 1:\n        return c + 1\n    return c\nfor i in range(t):\n    output = solve()\n    print(output)", "MOD = 1000000007\n\ndef si():\n    return input()\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef mi():\n    return map(int, input().split())\n\ndef out(v):\n    print(v)\n\ndef d2b(n):\n    return bin(n).replace('0b', '')\n\ndef twod(n, m, num):\n    return [[num for x in range(m)] for y in range(n)]\n\ndef vow():\n    return ['a', 'e', 'i', 'o', 'u']\n\ndef let():\n    return [chr(i) for i in range(97, 123)]\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef ispow2(x):\n    return x and (not x & x - 1)\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(factors)\nimport math\nt = ii()\nwhile t:\n    t -= 1\n    n = ii()\n    x = (pow(8 * n + 1, 0.5) - 1) / 2\n    if x.is_integer():\n        print(int(x))\n    else:\n        x = int(x) + 1\n        if x * (x + 1) // 2 - n <= 1:\n            print(x + 1)\n        else:\n            print(x)", "for t in range(int(input())):\n    x = int(input())\n    n = int(((8 * x + 1) ** 0.5 - 1) / 2)\n    if n / 2 * (n + 1) == x:\n        print(n)\n    elif (n + 1) * (n + 2) / 2 - 1 == x:\n        print(n + 2)\n    else:\n        print(n + 1)", "import math\n\ndef sum(n):\n    return n * (n + 1) / 2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    v = math.ceil((math.sqrt(1 + 8 * n) - 1) / 2)\n    print(v + 1 if sum(v) - n == 1 else v)", "def read_int():\n    return int(input())\nt = read_int()\nfor case_num in range(t):\n    x = read_int()\n    lo = 1\n    hi = x\n    found = False\n    while lo <= hi:\n        mid = lo + hi >> 1\n        dist = mid * (mid + 1) // 2\n        if dist == x:\n            found = True\n            print(mid)\n            break\n        if dist < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    if not found:\n        if lo * (lo + 1) // 2 - x >= 2:\n            print(lo)\n        else:\n            print(lo + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    if x == 1:\n        print(1)\n        continue\n    elif x == 2:\n        print(3)\n        continue\n    elif x == 3:\n        print(2)\n        continue\n    double_x = 2 * x\n    steps = 0\n    for n in range(int(math.sqrt(double_x)), double_x):\n        if n * (n + 1) >= double_x:\n            steps = n\n            break\n    position = steps * (steps + 1) / 2\n    if position == x + 1:\n        steps += 1\n    print(steps)", "for t in range(int(input())):\n    x = int(input())\n    l = 0\n    r = x\n    while l < r - 1:\n        m = (l + r) // 2\n        if m * (m + 1) // 2 <= x:\n            l = m\n        else:\n            r = m\n    if l * (l + 1) // 2 == x:\n        print(l)\n    elif r * (r + 1) // 2 == x + 1:\n        print(r + 1)\n    else:\n        print(r)", "from math import sqrt, ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    sol = ceil((-1 + sqrt(1 + 8 * n)) / 2)\n    r = (-1 + sqrt(1 + 8 * (n + 1))) / 2\n    if r.is_integer():\n        print(sol + 1)\n    else:\n        print(sol)", "import math\n\ndef find_num(num):\n    num = int(num)\n    closest = math.ceil((math.sqrt(8 * num + 1) - 1) / 2)\n    sum_all = int((1 + closest) * closest / 2)\n    if sum_all == num:\n        return closest\n    elif sum_all - num == 1:\n        return closest + 1\n    else:\n        return closest\nfor i in range(int(input())):\n    print(str(find_num(input())))", "from math import sqrt\n\ndef findclosest(a):\n    a1 = 1\n    b1 = 1\n    c1 = -1 * 2 * a\n    d = b1 ** 2 - 4 * a1 * c1\n    x = (-1 * b1 + sqrt(d)) / 2\n    if x - int(x) == 0:\n        return [x]\n    return [int(x), int(x + 1)]\n\ndef findclosest2(a):\n    a1 = 1\n    b1 = 1\n    c1 = -1 * 2 * (a + 2)\n    d = b1 ** 2 - 4 * a1 * c1\n    x = (-1 * b1 + sqrt(d)) / 2\n    if x - int(x) == 0:\n        return [x]\n    return [int(x), int(x + 1)]\nfor i in range(int(input())):\n    x = int(input())\n    l = int(findclosest(x)[0])\n    s = sum(list(range(l + 1)))\n    if x == s:\n        print(l)\n    else:\n        print(l + 1 + (x - (s + l + 1) == -1))", "import math\n\ndef steps(x):\n    d = 1 + 8 * x\n    return (-1 + math.sqrt(d)) / 2\n\ndef x_by_k(k):\n    return int((1 + k) * k / 2)\n\ndef is_replaceable_exists(k, delta_x):\n    possible_replaceables = [item for item in range(1, k)]\n    p = delta_x - 1\n    if p in possible_replaceables:\n        return True\n    return False\n\ndef main():\n    n = int(input())\n    result = []\n    for _ in range(n):\n        target_x = int(input())\n        k = steps(target_x)\n        if k.is_integer():\n            result.append(int(k))\n        else:\n            k = math.ceil(k)\n            current_x = x_by_k(k)\n            if is_replaceable_exists(k, current_x - target_x):\n                result.append(k)\n            else:\n                result.append(k + current_x - target_x)\n    for item in result:\n        print(item)\nmain()", "l = {n * (n + 1) // 2: n for n in range(1, 1415)}\nfor _ in [0] * int(input()):\n    x = int(input())\n    for i in l:\n        if i >= x:\n            break\n    if x == i - 1:\n        print(l[i] + 1)\n    else:\n        print(l[i])", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n\ndef enough(n, x):\n    return n * (n + 1) // 2 - x\n\ndef bs(x):\n    (l, r) = (1, 10 ** 6)\n    ans = 0\n    while l < r:\n        mid = (l + r) // 2\n        ans = enough(mid, x)\n        if ans >= 0:\n            r = mid\n        else:\n            l = mid + 1\n    return (l, l * (l + 1) // 2 - x)\nMAX = float('inf')\nMIN = float('-inf')\nMOD = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    (a, b) = bs(n)\n    print(a + 1 if b == 1 else a)", "for _ in range(int(input())):\n    given_num = int(input())\n    mx_num = int((2 * given_num) ** 0.5)\n    while mx_num * (mx_num + 1) // 2 < given_num:\n        mx_num += 1\n    extra_travelled = mx_num * (mx_num + 1) // 2 - given_num\n    stepList = [i for i in range(1, mx_num + 1)]\n    if extra_travelled == 1:\n        print(mx_num + 1)\n    else:\n        print(mx_num)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\n\ndef II():\n    return int(sys.stdin.readline().strip())\n\ndef IIs():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef SI():\n    return sys.stdin.readline().strip()\nfor _ in [0] * II():\n    t = II()\n    n = math.ceil(((8 * t + 1) ** 0.5 - 1) / 2)\n    if (1 + n) * n // 2 != t + 1:\n        print(n)\n    else:\n        print(n + 1)", "import math\n\ndef jumps(x):\n    start = math.floor(pow(x, 0.5))\n    while 1:\n        summ = start * (start + 1) / 2\n        if summ >= x:\n            break\n        start += 1\n    if summ - x == 1:\n        start += 1\n        return start\n    else:\n        return start\nt = int(input())\nfor i in range(0, t):\n    x = int(input())\n    print(jumps(x))"]