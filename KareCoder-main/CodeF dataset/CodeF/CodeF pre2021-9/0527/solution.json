["import sys\n(n, k) = map(int, input().split())\na = [0] * k\nc = 0\ns = []\nfor j in range(n):\n    a[int(sys.stdin.readline()) % k] += 1\n    while a[c % k] > 0:\n        a[c % k] -= 1\n        c += 1\n    s.append(c)\nprint('\\n'.join(map(str, s)))", "import sys\n(n, k) = map(int, input().split())\na = [0] * k\ni = 0\nc = 0\ns = []\nfor j in range(n):\n    a[int(sys.stdin.readline()) % k] += 1\n    while i < k:\n        if a[i] > c:\n            i = i + 1\n        else:\n            break\n    if i == k:\n        i = 0\n        if a[i] > c:\n            c = c + 1\n            while a[i] > c:\n                i = i + 1\n    s.append(c * k + i)\nprint('\\n'.join(map(str, s)))", "(n, x) = map(int, input().split())\n(arr, result) = ([0] * n, [])\nmex = 0\nfor _ in range(n):\n    arr[int(input()) % x] += 1\n    while arr[mex % x]:\n        arr[mex % x] -= 1\n        mex += 1\n    result.append(mex)\nprint('\\n'.join(map(str, result)))", "(q, x) = map(int, input().split())\nmod = [0] * x\nans = 0\nans_array = []\nfor i in range(q):\n    mod[int(input()) % x] += 1\n    while mod[ans % x]:\n        mod[ans % x] -= 1\n        ans += 1\n    ans_array.append(ans)\nprint('\\n'.join(map(str, ans_array)))", "(l, k) = map(int, input().split())\nlis = [0] * k\ni = 0\nA = []\nfor z in range(l):\n    lis[int(input()) % k] += 1\n    while lis[i % k]:\n        lis[i % k] -= 1\n        i = i + 1\n    A.append(i)\nprint('\\n'.join(map(str, A)))", "ls = list(map(int, input().split()))\narri = []\nx = ls[1]\nnls = [0] * x\nmexi = 0\nfor i in range(ls[0]):\n    nls[int(input()) % x] += 1\n    while nls[mexi % x]:\n        nls[mexi % x] -= 1\n        mexi += 1\n    arri.append(mexi)\nprint('\\n'.join(map(str, arri)))", "(T, X) = map(int, input().split())\nA = []\nC = [0] * X\nN = 0\nfor _ in range(T):\n    C[int(input()) % X] += 1\n    while C[N % X]:\n        C[N % X] -= 1\n        N += 1\n    A += (N,)\nprint('\\n'.join(map(str, A)))", "(q, x) = map(int, input().split())\nmark = [0] * x\na = []\nans = 0\nfor i in range(q):\n    mark[int(input()) % x] += 1\n    while mark[ans % x] >= 1:\n        mark[ans % x] -= 1\n        ans += 1\n    a.append(ans)\nprint('\\n'.join(map(str, a)))", "(T, X) = map(int, input().split())\nA = []\nC = [0] * X\nN = 0\nfor _ in range(T):\n    C[int(input()) % X] += 1\n    while C[N % X]:\n        C[N % X] -= 1\n        N += 1\n    A.append(N)\nprint('\\n'.join(map(str, A)))", "(q, n) = map(int, input().split())\nlevelCount = [0] * n\na = []\nx = 0\nfor _ in range(q):\n    levelCount[int(input()) % n] += 1\n    while levelCount[x % n]:\n        levelCount[x % n] -= 1\n        x += 1\n    a.append(x)\nprint('\\n'.join(map(str, a)))", "ls = list(map(int, input().split()))\narri = []\nx = ls[1]\nnls = [0] * x\nmexi = 0\nfor i in range(ls[0]):\n    nls[int(input()) % x] += 1\n    if x == 1:\n        mexi = i + 1\n    else:\n        while nls[mexi % x]:\n            nls[mexi % x] -= 1\n            mexi += 1\n    arri.append(mexi)\nprint('\\n'.join(map(str, arri)))", "(q, x) = map(int, input().split())\nsachin = []\ncount1 = 0\ncount2 = 0\nindex = 0\narr = []\nfor i in range(x):\n    arr.append(0)\nout = []\nfor i in range(q):\n    val = int(input())\n    arr[val % x] += 1\n    while arr[index] > count1:\n        count2 += 1\n        index += 1\n        if index == x:\n            count1 += 1\n        index %= x\n    out.append(count2)\nprint('\\n'.join(map(str, out)))", "(q, x) = map(int, input().split())\nsachin = []\ncount1 = 0\ncount2 = 0\narr = []\nout = []\nfor i in range(x):\n    arr.append(0)\nfor i in range(q):\n    val = int(input())\n    arr[val % x] += 1\n    while arr[count2 % x] > count1:\n        count2 += 1\n        if count2 % x == 0:\n            count1 += 1\n    out.append(count2)\nprint('\\n'.join(map(str, out)))", "(q, x) = map(int, input().split())\nmark = [0] * x\nans = 0\na = []\nfor _ in range(q):\n    n = int(input())\n    mark[n % x] += 1\n    while mark[ans % x] > 0:\n        mark[ans % x] -= 1\n        ans += 1\n    a.append(ans)\nprint('\\n'.join(map(str, a)))", "(q, X) = map(int, input().split())\nC = [0] * X\nA = []\nN = 0\nfor _ in range(q):\n    C[int(input()) % X] += 1\n    while C[N % X]:\n        C[N % X] -= 1\n        N += 1\n    A.append(N)\nprint('\\n'.join(map(str, A)))", "(q, X) = map(int, input().split())\nC = [0] * X\nA = []\nN = 0\nfor _ in range(q):\n    C[int(input()) % X] += 1\n    while C[N % X]:\n        C[N % X] -= 1\n        N += 1\n    A.append(N)\nprint('\\n'.join(map(str, A)))", "(n, x) = map(int, input().split())\na = []\nc = [0] * x\nm = 0\nfor _ in range(n):\n    c[int(input()) % x] += 1\n    while c[m % x]:\n        c[m % x] -= 1\n        m += 1\n    a += (m,)\nprint('\\n'.join(map(str, a)))", "(q, x) = [int(i) for i in input().split(' ')]\ncc = [0] * x\nmex = 0\nres = []\nfor _ in range(q):\n    y = int(input())\n    y = y % x\n    cc[y] += 1\n    while cc[mex % x] > 0:\n        cc[mex % x] -= 1\n        mex += 1\n    res.append(mex)\nprint('\\n'.join(map(str, res)))", "(a, b) = list(map(int, input().strip().split(' ')))\nc = [0] * b\nm = 0\nans = []\nfor i in range(a):\n    y = int(input().strip())\n    c[y % b] += 1\n    while c[m % b] > m / b:\n        m += 1\n    ans.append(m)\nprint('\\n'.join(map(str, ans)))", "def ii():\n    a = int(input())\n    return a\n\ndef ai():\n    a = list(map(int, input().split()))\n    return a\n\ndef mi():\n    a = map(int, input().split())\n    return a\n(q, x) = mi()\nmex = 0\nfreq = [0] * x\nans = []\nfor i in range(q):\n    freq[ii() % x] += 1\n    while freq[mex % x] > 0:\n        freq[mex % x] -= 1\n        mex += 1\n    ans.append(mex)\nprint('\\n'.join(map(str, ans)))", "from collections import *\n(q, x) = map(int, input().split())\n(dis, mem, ans, mi) = ({(0, i) for i in range(x)}, [0] * x, [], 0)\nfor i in range(q):\n    n = int(input())\n    mem[n % x] += 1\n    while mem[mi % x]:\n        mem[mi % x] -= 1\n        mi += 1\n    ans.append(str(mi))\nprint('\\n'.join(ans))", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy\n(q, x) = list(map(int, input().strip().split(' ')))\nc = [0] * x\nmex = 0\nans = []\nfor i in range(q):\n    y = int(input().strip())\n    c[y % x] += 1\n    while c[mex % x] > mex / x:\n        mex += 1\n    ans.append(mex)\nprint('\\n'.join(map(str, ans)))", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nnfr = [0] * x\nans = 0\nfor i in range(q):\n    now = int(input())\n    nfr[now % x] += 1\n    while nfr[ans % x]:\n        nfr[ans % x] -= 1\n        ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nnfr = [0 for i in range(x)]\nans = 0\nfor i in range(q):\n    now = int(input())\n    nfr[now % x] += 1\n    while nfr[ans % x]:\n        nfr[ans % x] -= 1\n        ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\ndp = [0] * x\np = 0\nm = 0\nfor _ in range(q):\n    y = int(input())\n    dp[y % x] += 1\n    while dp[m % x] > 0:\n        dp[m % x] -= 1\n        m += 1\n    print(m)", "import sys, time\ninput = sys.stdin.readline\nstart_time = time.time()\nMAX_N = int(400000.0 + 50)\n(q, x) = map(int, input().split())\nans = 0\nvisited = [0 for _ in range(x)]\nfor _ in range(q):\n    y = int(input())\n    visited[y % x] += 1\n    while visited[ans % x] != 0:\n        visited[ans % x] -= 1\n        ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nk = [0 for _ in range(x)]\nm = 0\nfor i in range(q):\n    g = int(input())\n    k[g % x] += 1\n    while k[m % x] > 0:\n        k[m % x] -= 1\n        m += 1\n    print(m)", "from sys import stdin\n(query, x) = map(int, stdin.readline().split())\nl = [0] * x\nans = 0\nfor _ in range(query):\n    a = int(stdin.readline())\n    l[a % x] += 1\n    while l[ans % x] != 0:\n        l[ans % x] -= 1\n        ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\n(a, x) = map(int, input().split())\ndp = [0] * x\np = 0\nm = 0\nfor _ in range(a):\n    y = int(input())\n    dp[y % x] += 1\n    while dp[m % x] > 0:\n        dp[m % x] -= 1\n        m += 1\n    print(m)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, x) = mints()\n    c = [0] * x\n    ans = 0\n    for i in range(n):\n        y = mint()\n        c[y % x] += 1\n        while c[ans % x] > 0:\n            c[ans % x] -= 1\n            ans += 1\n        print(ans)\nsolve()", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\ndef main():\n    (q, x) = [int(s) for s in input().split()]\n    a = set()\n    d = {}\n    ans = 0\n    ans1 = 0\n    c = defaultdict(int)\n    for i in range(q):\n        y = int(input())\n        c[y % x] += 1\n        while c[ans % x] > 0:\n            c[ans % x] -= 1\n            ans = (ans + 1) % x\n            if ans == 0:\n                ans1 += 1\n        print(ans + ans1 * x)\nmain()", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nLIST = [0] * x\nmex = 0\nfor qu in range(q):\n    LIST[int(input()) % x] += 1\n    while LIST[mex % x] > mex // x:\n        mex += 1\n    print(mex)", "import sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nk = [0 for _ in range(x)]\nm = 0\nfor i in range(q):\n    g = int(input())\n    k[g % x] += 1\n    while k[m % x] > 0:\n        k[m % x] -= 1\n        m += 1\n    print(m)", "import sys\n(q, x) = map(int, input().split())\narr = [0] * x\nn = 0\nfor _ in range(q):\n    num = int(sys.stdin.readline())\n    arr[num % x] += 1\n    while arr[n % x]:\n        arr[n % x] -= 1\n        n += 1\n    print(n)", "import sys, time\ninput = sys.stdin.readline\nstart_time = time.time()\nMAX_N = int(400000.0 + 50)\n(q, x) = map(int, input().split())\nans = 0\nvisited = [0 for _ in range(MAX_N)]\nfor _ in range(q):\n    y = int(input())\n    visited[y % x] += 1\n    while visited[ans % x] != 0:\n        visited[ans % x] -= 1\n        ans += 1\n    print(ans)", "from sys import stdin\n(q, x) = map(int, stdin.readline().split())\n(lst, result) = ([0] * x, 0)\nfor _ in range(q):\n    query = int(stdin.readline())\n    lst[query % x] += 1\n    while lst[result % x] != 0:\n        lst[result % x] -= 1\n        result += 1\n    print(result)", "import sys\n(q, x) = map(int, input().split())\narr = [0] * x\nn = 0\nfor _ in range(q):\n    num = int(sys.stdin.readline())\n    arr[num % x] += 1\n    while arr[n % x]:\n        arr[n % x] -= 1\n        n += 1\n    print(n)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n(q, x) = map(int, input().split())\nremain = [0] * x\nmex = 0\nfor _ in range(q):\n    y = mint()\n    remain[y % x] += 1\n    while remain[mex % x] > 0:\n        remain[mex % x] -= 1\n        mex += 1\n    print(mex)", "(q, x) = map(int, input().split(' '))\nmy_list = []\nfor i in range(q):\n    my_list.append(int(input()))\ncount = [0] * x\nmex = 0\nfor a in my_list:\n    count[a % x] += 1\n    while True:\n        if count[mex % x] > 0:\n            count[mex % x] -= 1\n            mex += 1\n        else:\n            break\n    print(mex)", "[n, x] = list(map(int, input().split(' ')))\narr = [0 for i in range(x)]\nindex = 0\nans = []\nif 0:\n    none = 0\nelse:\n    for i in range(n):\n        k = int(input())\n        arr[k % x] += 1\n        while arr[index % x] != 0:\n            arr[index % x] -= 1\n            index += 1\n        ans.append(index)\n    for i in ans:\n        print(i)", "import heapq\nimport sys\ninput = sys.stdin.readline\n(q, x) = map(int, input().split())\nh = dict()\nt = 0\np = dict()\nfor i in range(q):\n    a = int(input())\n    a = a % x\n    if a in p:\n        a = p[a]\n    else:\n        p[a] = a\n    while a in h:\n        a += x\n    if a not in h:\n        p[a % x] = a\n        h[a] = 1\n    while t in h:\n        t += 1\n    print(t)", "import sys\nfin = lambda : sys.stdin.readline()\nfout = lambda args: sys.stdout.write(' '.join((str(i) for i in args)) + '\\n')\n(q, x) = map(int, fin().split())\ncnt = [0] * x\nmex = 0\nfor _ in range(q):\n    a = int(fin())\n    cnt[a % x] += 1\n    while cnt[mex % x]:\n        cnt[mex % x] -= 1\n        mex += 1\n    fout([mex])", "def solve(x, queries):\n    surplus = [0] * x\n    mex = 0\n    for q in queries:\n        surplus[q % x] += 1\n        while surplus[mex % x] > 0:\n            surplus[mex % x] -= 1\n            mex += 1\n        yield mex\n(q, x) = map(int, input().split())\nfor result in solve(x, [int(input()) for i in range(q)]):\n    print(result)", "(q, x) = map(int, input().split())\nmx = 4 * 10 ** 5 + 1\nt_reszt = [0] * mx\nt_wyn = [0] * mx\nt_out = []\ncurr_ind = 0\nout_curr_ind = 0\nfor y in range(q):\n    curr_val = int(input())\n    m = curr_val % x\n    ii = t_reszt[m] * x + m\n    if ii < mx - 1:\n        t_wyn[ii] = 1\n    t_reszt[m] += 1\n    curr_ind = out_curr_ind\n    for z in range(curr_ind, len(t_wyn), +1):\n        if t_wyn[z] == 0:\n            t_out.append(z)\n            out_curr_ind = z\n            break\nprint('\\n'.join(map(str, t_out)))", "MAX_N = 400005\n(query, x) = map(int, input().strip().split())\ncount = [0 for _ in range(MAX_N)]\nmex = 0\nans = ''\nfor i in range(query):\n    y = int(input().strip())\n    count[y % x] += 1\n    while True:\n        if count[mex % x] > 0:\n            count[mex % x] -= 1\n            mex += 1\n        else:\n            break\n    ans += str(mex) + '\\n'\nprint(ans)", "(q, x) = map(int, input().split())\n(a, m, s) = ([0] * (x + 1), 0, '')\nwhile q > 0:\n    q -= 1\n    a[int(input()) % x] += 1\n    while a[m % x] > 0:\n        a[m % x] -= 1\n        m += 1\n    s += str(m) + '\\n'\nprint(s)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n(n, m) = mints()\nrem = [0] * m\nmex = 0\nfor i in range(n):\n    q = mint()\n    rem[q % m] += 1\n    while rem[mex % m] > 0:\n        rem[mex % m] -= 1\n        mex += 1\n    print(mex)", "(n, x) = map(int, input().split())\noutput = []\nc = [0] * x\nm = 0\nfor _ in range(n):\n    t = int(input())\n    c[t % x] += 1\n    while c[m % x] != 0:\n        c[m % x] -= 1\n        m += 1\n    output.append(m)\nprint(*output, sep='\\n')", "import sys\ninput = sys.stdin.readline\nimport collections\n\ndef main():\n    (q, X) = [int(x) for x in input().split()]\n    C = collections.Counter()\n    next = 0\n    total = 0\n    for _ in range(q):\n        y = int(input())\n        if y % X == next:\n            next += 1\n            next %= X\n            total += 1\n            for i in range(next, next + X + 1):\n                if C[i % X] >= 1:\n                    next += 1\n                    next %= X\n                    total += 1\n                    C[i % X] -= 1\n                else:\n                    break\n            print(total)\n        else:\n            C[y % X] += 1\n            print(total)\nmain()", "import sys\nfrom collections import defaultdict, deque\ninp = sys.stdin.readline\nans = ''\nmex = 0\n(q, x) = map(int, inp().split())\narr = [0] * q + [0]\ndic = {i: deque([i]) for i in range(x)}\nfor i in dic:\n    while dic[i][-1] + x < q + 1:\n        dic[i].append(dic[i][-1] + x)\nfor _ in range(q):\n    n = int(inp())\n    ind = dic[n % x].popleft() if dic[n % x] else n % x\n    arr[ind] = 1\n    while arr[mex] == 1:\n        mex += 1\n    ans += str(mex) + '\\n'\nprint(ans)", "(q, x) = map(int, input().split())\na = [0] * (x + 1)\n(mex, ans) = (0, '')\nwhile q > 0:\n    q -= 1\n    val = int(input())\n    a[val % x] += 1\n    while a[mex % x] > 0:\n        a[mex % x] -= 1\n        mex += 1\n    ans += str(mex) + '\\n'\nprint(ans)", "(q, x) = map(int, input().split())\n(a, m, s) = ([0] * (x + 1), 0, '')\nwhile q > 0:\n    q -= 1\n    a[int(input()) % x] += 1\n    while a[m % x] > 0:\n        a[m % x] -= 1\n        m += 1\n    s += str(m) + '\\n'\nprint(s)", "import math\nfor contorr in range(1):\n    (q, x) = list(map(int, input().split()))\n    limita = 400001\n    vector = [-1] * x\n    answ = [0] * limita\n    total = []\n    mex = 0\n    for jj in range(q):\n        j = int(input())\n        part = j % x\n        vector[part] += 1\n        if part + x * vector[part] < limita:\n            answ[part + x * vector[part]] = 1\n        posibil = 1\n        while posibil == 1:\n            posibil = 0\n            if mex < limita:\n                if answ[mex] != 0:\n                    mex += 1\n                    posibil = 1\n        total.append(mex)\nfor z in total:\n    print(z)", "(q, x) = map(int, input().split())\n(a, m, s) = ([0] * (x + 1), 0, '')\nwhile q > 0:\n    q -= 1\n    a[int(input()) % x] += 1\n    while a[m % x] > 0:\n        a[m % x] -= 1\n        m += 1\n    s += str(m) + '\\n'\nprint(s)", "def f(x, mex, mod_count):\n    while mod_count.get(mex % x, False):\n        mod_count[mex % x] -= 1\n        mex += 1\n    return mex\n(q, x) = list(map(int, input().split()))\nmod_count = {}\nmex = 0\nresult = ''\nfor _ in range(q):\n    if x != 1:\n        mod = int(input()) % x\n        mod_count[mod] = mod_count.get(mod, 0) + 1\n        mex = f(x, mex, mod_count)\n    else:\n        mex = _ + 1\n    result += str(mex)\n    result += '\\n'\nprint(result)", "(q, x) = map(int, input().split())\na = [0] * (x + 1)\nfor i in range(x):\n    a[i] = 0\n(mex, base) = (0, 0)\nans = ''\nwhile q > 0:\n    q -= 1\n    val = int(input())\n    a[val % x] += 1\n    while a[mex] > 0:\n        mex += 1\n        if mex == x:\n            base += 1\n            mex = 0\n            for i in range(x):\n                a[i] -= 1\n    ans += str(base * x + mex) + '\\n'\nprint(ans)", "(q, x) = map(int, input().split())\ny = [0] * x\nans = list()\nzero_ind = set()\nzero = [1] * x\nd = 1\nfor kek in range(q):\n    a = int(input())\n    a %= x\n    y[a] += 1\n    if len(zero) >= x - a:\n        zero[x - a - 1] = 0\n    while len(zero) > 0 and zero[-1] == 0:\n        zero.pop()\n    if len(zero) == 0:\n        d += 1\n        zero = [1] * x\n        for i in range(x):\n            y[i] -= 1\n            if y[i] != 0:\n                zero[x - i - 1] = 0\n    while len(zero) > 0 and zero[-1] == 0:\n        zero.pop()\n    ans.append(d * x - len(zero))\nprint(*ans, sep='\\n')", "import sys\nsys.setrecursionlimit(10 ** 7)\nfin = lambda : sys.stdin.readline()\nfout = lambda args: sys.stdout.write(' '.join((str(i) for i in args)) + '\\n')\n(q, x) = map(int, fin().split())\ncnt = [0] * x\nmex = 0\nfor _ in range(q):\n    a = int(fin())\n    cnt[a % x] += 1\n    while cnt[mex % x]:\n        cnt[mex % x] -= 1\n        mex += 1\n    fout([mex])", "from heapq import *\n(q, x) = map(int, input().split())\n(queue, mem, ans, mi) = ([[0, i] for i in range(x)], [0] * x, [], 0)\nheapify(queue)\nfor i in range(q):\n    n = int(input())\n    cur = n % x\n    mem[cur] += 1\n    heappush(queue, [mem[cur], cur])\n    while queue:\n        ele = queue[0]\n        if mem[ele[1]] == ele[0]:\n            ans.append(str(ele[0] * x + ele[1]))\n            break\n        else:\n            heappop(queue)\nprint('\\n'.join(ans))"]