["t = int(input())\nfor y in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append([x, y])\n    a.sort()\n    s = a[0][0] * 'R' + a[0][1] * 'U'\n    flag = 1\n    for i in range(1, n):\n        x = a[i][0] - a[i - 1][0]\n        y = a[i][1] - a[i - 1][1]\n        if x < 0 or y < 0:\n            flag = 0\n            break\n        s += x * 'R' + y * 'U'\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = [tuple(map(int, input().split())) for _ in range(n)]\n        arr.sort()\n        current_position = (0, 0)\n        ans_string = ''\n        flag = True\n        for package_position in arr:\n            (x_difference, y_difference) = (package_position[0] - current_position[0], package_position[1] - current_position[1])\n            if y_difference < 0:\n                flag = False\n                break\n            ans_string += 'R' * x_difference + 'U' * y_difference\n            current_position = (current_position[0] + x_difference, current_position[1] + y_difference)\n        if flag:\n            print('YES')\n            print(ans_string)\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = [[0, 0]]\n    for i in range(n):\n        list1.append(list(map(int, input().split())))\n    list1.sort()\n    c = 0\n    s = ''\n    f = 0\n    for i in range(1, len(list1)):\n        str = ''\n        r = list1[i][0] - list1[i - 1][0]\n        u = list1[i][1] - list1[i - 1][1]\n        if r < 0 or u < 0:\n            f = 1\n            break\n        str = r * 'R' + u * 'U'\n        s = s + str\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "for t in range(int(input())):\n    n = int(input())\n    cord_list = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        cord_list.append((x, y))\n    cord_list.sort()\n    r = 0\n    u = 0\n    fir = 0\n    sec = 0\n    ans = []\n    while cord_list:\n        r = abs(cord_list[0][0] - fir)\n        u = abs(cord_list[0][1] - sec)\n        ans.append('R' * r)\n        ans.append('U' * u)\n        if cord_list[0][0] < fir or cord_list[0][1] < sec:\n            print('NO')\n            break\n        fir = cord_list[0][0]\n        sec = cord_list[0][1]\n        del cord_list[0]\n    else:\n        print('YES')\n        print(''.join(ans))", "for i in range(int(input())):\n    l1 = []\n    for j in range(int(input())):\n        l1.append([int(x) for x in input().split()])\n    l1.sort()\n    l1 = [[0, 0]] + l1\n    flag = True\n    for j in range(len(l1) - 1):\n        if l1[j + 1][1] < l1[j][1]:\n            flag = False\n    ans = ''\n    if flag == False:\n        print('NO')\n    else:\n        for j in range(len(l1) - 1):\n            ans = ans + 'R' * (l1[j + 1][0] - l1[j][0])\n            ans = ans + 'U' * (l1[j + 1][1] - l1[j][1])\n        print('YES')\n        print(ans)", "import math\n\ndef main_function():\n    tests = range(int(input()))\n    for test in tests:\n        packages = [[int(j) for j in input().split(' ')] for i in range(int(input()))]\n        packages = sorted(packages, key=lambda x: (x[0], x[1]))\n        last_item = packages[0]\n        is_there_ordered = True\n        for i in packages:\n            if last_item[1] > i[1]:\n                is_there_ordered = False\n            last_item = i\n        if not is_there_ordered:\n            print('NO')\n        else:\n            print('YES')\n            last_point = [0, 0]\n            for i in packages:\n                print('R' * (i[0] - last_point[0]), end='')\n                print('U' * (i[1] - last_point[1]), end='')\n                last_point = i\n            print()\nmain_function()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort()\n    now = [0, 0]\n    b = True\n    s = ''\n    for i in a:\n        if i[1] < now[1]:\n            b = False\n            break\n        else:\n            s += 'R' * (i[0] - now[0]) + 'U' * (i[1] - now[1])\n            now = i\n    print(['NO', 'YES'][b])\n    if b:\n        print(s)", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = [[0, 0]]\n    for i in range(n):\n        list1.append(list(map(int, input().split())))\n    list1.sort()\n    ans = ''\n    for i in range(n):\n        if list1[i + 1][1] >= list1[i][1]:\n            ans += 'R' * (list1[i + 1][0] - list1[i][0]) + 'U' * (list1[i + 1][1] - list1[i][1])\n        else:\n            list_ans.append('NO')\n            break\n    else:\n        list_ans.append('YES')\n        list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort()\n    (ans, pos) = ([], True)\n    cur = [0, 0]\n    for i in l:\n        if i[0] - cur[0] < 0 or i[1] - cur[1] < 0:\n            pos = False\n            break\n        else:\n            ans.append((i[0] - cur[0]) * 'R')\n            ans.append((i[1] - cur[1]) * 'U')\n            cur[0] = i[0]\n            cur[1] = i[1]\n    if pos:\n        print('YES')\n        print(''.join(ans))\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        lst.append((x, y))\n    lst.sort()\n    (cx, cy) = (0, 0)\n    path = []\n    ispos = True\n    for ind in lst:\n        if ind[0] < cx or ind[1] < cy:\n            ispos = False\n            break\n        path.append(ind[0] - cx)\n        path.append(ind[1] - cy)\n        (cx, cy) = ind\n    if not ispos:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(len(path)):\n            if i % 2 == 0:\n                print('R' * path[i], end='')\n            else:\n                print('U' * path[i], end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        lst.append((x, y))\n    lst.sort()\n    (cx, cy) = (0, 0)\n    path = []\n    ispos = True\n    for ind in lst:\n        if ind[0] < cx or ind[1] < cy:\n            ispos = False\n            break\n        path.append(ind[0] - cx)\n        path.append(ind[1] - cy)\n        (cx, cy) = ind\n    if not ispos:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(len(path)):\n            if i % 2 == 0:\n                print('R' * path[i], end='')\n            else:\n                print('U' * path[i], end='')\n        print()", "def get_input_of_test():\n    coords = [(0, 0)]\n    n = int(input())\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        coords.append((x, y))\n    coords.sort()\n    return coords\n\ndef sol_of_test(coords):\n    steps = list()\n    cur_y = 0\n    for ind in range(1, len(coords)):\n        if coords[ind][1] < cur_y:\n            return ('NO', steps)\n        x_shift = coords[ind][0] - coords[ind - 1][0]\n        y_shift = coords[ind][1] - coords[ind - 1][1]\n        steps.extend(['R' for i in range(x_shift)])\n        steps.extend(['U' for i in range(y_shift)])\n        cur_y += y_shift\n    return ('YES', ''.join(steps))\nnum_tests = int(input())\nanswers = []\nfor test_ind in range(num_tests):\n    coords = get_input_of_test()\n    answ = sol_of_test(coords)\n    answers.append(answ)\nfor test_ind in range(num_tests):\n    print(answers[test_ind][0])\n    if answers[test_ind][0] == 'YES':\n        print(answers[test_ind][1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for z in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    a = sorted(l, key=lambda x: (x[0], x[1]))\n    p = q = f = 0\n    s = ''\n    for i in range(n):\n        if a[i][0] >= p and a[i][1] >= q:\n            s += 'R' * (a[i][0] - p) + 'U' * (a[i][1] - q)\n            p = a[i][0]\n            q = a[i][1]\n        else:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "def func():\n    t = int(input().strip())\n    cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        coordinates = []\n        for _ in range(n):\n            (x, y) = map(int, input().strip().split())\n            coordinates.append([x, y])\n        cases.append([coordinates, n])\n    for case in cases:\n        res = shortest_path(case[0], case[1])\n        if res == 'NO':\n            print(res)\n        else:\n            print('YES')\n            print(res)\n\ndef shortest_path(coordinates, n):\n    coordinates_sorted = sorted(coordinates, key=lambda k: (k[0], k[1]))\n    res = 'R' * coordinates_sorted[0][0] + 'U' * coordinates_sorted[0][1]\n    for i in range(1, n):\n        x = coordinates_sorted[i][0] - coordinates_sorted[i - 1][0]\n        y = coordinates_sorted[i][1] - coordinates_sorted[i - 1][1]\n        if y < 0:\n            return 'NO'\n        res = res + 'R' * x + 'U' * y\n    return res\nfunc()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    main_lst = []\n    for q2 in range(n):\n        (x, y) = map(int, input().split())\n        main_lst.append([y, x])\n    main_lst.sort()\n    lst = []\n    last = [-1, []]\n    for x in main_lst:\n        if x[0] != last[0]:\n            lst.append(last)\n            last = [x[0], [x[1]]]\n        else:\n            last[1].append(x[1])\n    lst.append(last)\n    del lst[0]\n    pred = 0\n    answer = ''\n    (x, y) = (0, 0)\n    er = 0\n    for xd in range(len(lst)):\n        if er == 1:\n            break\n        if lst[xd][1][0] < pred:\n            er = 1\n            break\n        else:\n            answer += 'R' * (lst[xd][1][0] - x)\n            x = lst[xd][1][0]\n            pred = x\n        answer += 'U' * (lst[xd][0] - y)\n        y = lst[xd][0]\n        for xdd in lst[xd][1][1:]:\n            if pred > xdd:\n                er = 1\n                break\n            else:\n                answer += 'R' * (xdd - x)\n                x = xdd\n                pred = x\n    if er == 0:\n        print('YES')\n        print(answer)\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    x = [0] * n\n    for i in range(n):\n        x[i] = list(map(int, input().split()))\n    prev = [0, 0]\n    s = ''\n    for h in sorted(x):\n        if h[1] < prev[1]:\n            print('NO')\n            break\n        else:\n            s = s + 'R' * (h[0] - prev[0]) + 'U' * (h[1] - prev[1])\n            prev = h\n    else:\n        print('YES')\n        print(s)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = list(map(int, input().split()))[0]\n    arr = []\n    for _ in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    arr.sort()\n    (i, j) = (0, 0)\n    ans = ''\n    for (m, n) in arr:\n        if m >= i and n >= j:\n            ans += 'R' * abs(m - i)\n            ans += 'U' * abs(n - j)\n            i = m\n            j = n\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = ''\n    for i in range(n):\n        a += [list(map(int, input().split()))]\n    a.sort()\n    x = y = 0\n    for i in range(n):\n        if a[i][0] != x:\n            b += 'R' * (a[i][0] - x)\n            x = a[i][0]\n        if a[i][1] != y:\n            if y > a[i][1]:\n                print('NO')\n                break\n            else:\n                b += 'U' * (a[i][1] - y)\n                y = a[i][1]\n    else:\n        print('YES')\n        print(b)", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    for j in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    x = a[0][0]\n    y = a[0][1]\n    f = 0\n    s = 'R' * x + 'U' * y\n    for i in a[1:]:\n        if i[0] > x and i[1] < y:\n            print('NO')\n            f = 1\n            break\n        else:\n            s += abs(i[0] - x) * 'R' + abs(i[1] - y) * 'U'\n            x = i[0]\n            y = i[1]\n    if f == 0:\n        print('YES')\n        print(s)", "def solve(points):\n    points = sorted(points, key=lambda item: (item[0], item[1]))\n    x = 0\n    y = 0\n    path = ''\n    for p in points:\n        if x <= p[0]:\n            d = p[0] - x\n            x += 1 * d\n            path += 'R' * d\n        else:\n            return ['NO']\n        if y <= p[1]:\n            d = p[1] - y\n            y += 1 * d\n            path += 'U' * d\n        else:\n            return ['NO']\n    return ['YES', path]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in input().split()])\n    res = solve(points)\n    print(res[0])\n    if res[0] == 'YES':\n        print(res[1])", "def solve(points):\n    points = sorted(points, key=lambda item: (item[0], item[1]))\n    x = 0\n    y = 0\n    path = ''\n    for p in points:\n        if x <= p[0]:\n            d = p[0] - x\n            x += 1 * d\n            path += 'R' * d\n        else:\n            return ['NO']\n        if y <= p[1]:\n            d = p[1] - y\n            y += 1 * d\n            path += 'U' * d\n        else:\n            return ['NO']\n    return ['YES', path]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in input().split()])\n    res = solve(points)\n    print(res[0])\n    if res[0] == 'YES':\n        print(res[1])", "for t in range(int(input())):\n    n = int(input())\n    cord_list = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        cord_list.append((x, y))\n    cord_list.sort()\n    r = 0\n    u = 0\n    fir = 0\n    sec = 0\n    ans = ''\n    while cord_list:\n        r = abs(cord_list[0][0] - fir)\n        u = abs(cord_list[0][1] - sec)\n        ans += 'R' * r\n        ans += 'U' * u\n        if cord_list[0][0] < fir or cord_list[0][1] < sec:\n            print('NO')\n            break\n        fir = cord_list[0][0]\n        sec = cord_list[0][1]\n        del cord_list[0]\n    else:\n        print('YES')\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    cords = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        cords.append([a, b])\n    cords = sorted(cords, key=lambda t: t[0])\n    cords = sorted(cords, key=lambda t: t[1])\n    prevx = 0\n    prevy = 0\n    ans = ''\n    flag = False\n    for (a, b) in cords:\n        if a < prevx:\n            flag = True\n            break\n        xcord = a - prevx\n        ycord = b - prevy\n        ans += xcord * 'R' + ycord * 'U'\n        prevx = a\n        prevy = b\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    cords = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        cords.append([a, b])\n    cords = sorted(cords, key=lambda t: t[0])\n    cords = sorted(cords, key=lambda t: t[1])\n    prevx = 0\n    prevy = 0\n    ans = ''\n    flag = False\n    for (a, b) in cords:\n        if a < prevx:\n            flag = True\n            break\n        xcord = a - prevx\n        ycord = b - prevy\n        ans += xcord * 'R' + ycord * 'U'\n        prevx = a\n        prevy = b\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "for _ in range(int(input())):\n    a = [(0, 0)]\n    n = int(input())\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    s = str()\n    for k in range(1, n + 1):\n        if a[k][0] < a[k - 1][0] or a[k][1] < a[k - 1][1]:\n            print('NO')\n            break\n        else:\n            p = a[k][0] - a[k - 1][0]\n            q = a[k][1] - a[k - 1][1]\n            s += p * 'R' + q * 'U'\n    else:\n        print('YES')\n        print(s)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for abc in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for i in range(n - 1):\n        if l[i + 1][0] == l[i][0] and l[i + 1][1] < l[i][1]:\n            (l[i + 1], l[i]) = (l[i], l[i + 1])\n    x = 0\n    y = 0\n    s = ''\n    for i in l:\n        if i[0] < x or i[1] < y:\n            print('NO')\n            break\n        s += 'R' * (i[0] - x)\n        s += 'U' * (i[1] - y)\n        x = i[0]\n        y = i[1]\n    else:\n        print('YES')\n        print(s)", "def solve(n, xy):\n    (x, y) = xy[0]\n    res = ''\n    while x > 0:\n        res += 'R'\n        x -= 1\n    while y > 0:\n        res += 'U'\n        y -= 1\n    (x, y) = xy[0]\n    for i in range(1, n):\n        (xx, yy) = xy[i]\n        if xx < x or yy < y:\n            return 'NO'\n        while xx > x:\n            res += 'R'\n            x += 1\n        while yy > y:\n            res += 'U'\n            y += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    xy = []\n    for i in range(n):\n        xy.append(list(map(int, input().split())))\n    xy.sort(key=lambda x: [x[0], x[1]])\n    t = solve(n, xy)\n    if t == 'NO':\n        print('NO')\n    else:\n        print('YES')\n        print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = list(map(int, input().split()))\n        l.append([a, b])\n    l.sort()\n    x = 0\n    y = 0\n    flag = 0\n    t = ''\n    for i in l:\n        if i[0] == x:\n            if i[1] > y:\n                t += 'U' * (i[1] - y)\n                y = i[1]\n            else:\n                flag = 1\n                break\n        elif i[1] == y:\n            if i[0] > x:\n                t += 'R' * (i[0] - x)\n                x = i[0]\n            else:\n                flag = 1\n                break\n        elif i[0] > x and i[1] > y:\n            t += 'R' * (i[0] - x)\n            t += 'U' * (i[1] - y)\n            x = i[0]\n            y = i[1]\n        else:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(t)", "test_cases = int(input())\n\ndef handle():\n    lines = int(input())\n    points = []\n    for _ in range(lines):\n        (x, y) = input().split(' ')\n        x = int(x)\n        y = int(y)\n        points.append((x, y))\n    points.sort()\n    y_so_far = points[0][1]\n    for (x, y) in points[1:]:\n        if y < y_so_far:\n            return ['NO']\n        y_so_far = y\n    current_x = 0\n    current_y = 0\n    path = ''\n    for (x, y) in points:\n        while current_x != x:\n            path += 'R'\n            current_x += 1\n        while current_y != y:\n            path += 'U'\n            current_y += 1\n    return ['YES', path]\nfor _ in range(test_cases):\n    result = handle()\n    for line in result:\n        print(line)", "m = int(input())\nfrom collections import defaultdict\nfor i in range(m):\n    n = int(input())\n    points = defaultdict(list)\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        points[x].append(y)\n    final = ''\n    prevmax = None\n    curmax = 0\n    flag = False\n    prevkey = 0\n    for (key, value) in sorted(points.items()):\n        if any((i < curmax for i in value)):\n            flag = True\n            break\n        else:\n            prevmax = curmax\n            curmax = max(value)\n        final += 'R' * (key - prevkey) + 'U' * (curmax - prevmax)\n        prevkey = key\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n        print(final)", "for _ in range(int(input())):\n    n = int(input())\n    obj = []\n    for _ in range(n):\n        obj.append(tuple([int(x) for x in input().split()]))\n    obj = sorted(obj)\n    obj_x = []\n    obj_y = []\n    for (i, j) in obj:\n        obj_x.append(i)\n        obj_y.append(j)\n    robo_x = 0\n    robo_y = 0\n    k = ''\n    while obj_x or obj_y:\n        if robo_x in obj_x and robo_y in obj_y:\n            print('NO')\n            break\n        else:\n            traverse_x = obj_x[0] - robo_x\n            traverse_y = obj_y[0] - robo_y\n            if traverse_x < 0 or traverse_y < 0:\n                print('NO')\n                break\n            k += 'R' * traverse_x + 'U' * traverse_y\n            robo_x = obj_x[0]\n            robo_y = obj_y[0]\n            obj_x.pop(0)\n            obj_y.pop(0)\n    if len(obj_x) == 0 and len(obj_y) == 0:\n        print('YES')\n        print(k)", "for _ in range(int(input())):\n    n = int(input())\n    s = ''\n    shan = 0\n    sree = []\n    for i in range(n):\n        (l, k) = map(int, input().split())\n        sree.append([l, k])\n    sree.sort()\n    (a, b) = (0, 0)\n    for i in range(n):\n        (l, k) = (sree[i][0], sree[i][1])\n        if l >= a and k >= b and (shan != 1):\n            s += 'R' * (l - a) + 'U' * (k - b)\n            (a, b) = (l, k)\n        else:\n            shan = 1\n    if shan:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    l.sort()\n    s = ''\n    f = 1\n    for i in range(len(l)):\n        if i == 0:\n            p = l[i][0]\n            q = l[i][1]\n            s += 'R' * p\n            s += 'U' * q\n        elif l[i][1] >= l[i - 1][1]:\n            p = l[i][0] - l[i - 1][0]\n            q = l[i][1] - l[i - 1][1]\n            s += 'R' * p\n            s += 'U' * q\n        else:\n            f = 0\n            break\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        li.append(x)\n    li.sort()\n    s = 'R' * li[0][0] + 'U' * li[0][1]\n    for i in range(1, n):\n        if li[i - 1][0] > li[i][0] or li[i - 1][1] > li[i][1]:\n            print('NO')\n            break\n        x = li[i][0] - li[i - 1][0]\n        y = li[i][1] - li[i - 1][1]\n        s = s + 'R' * x + 'U' * y\n    else:\n        print('YES')\n        print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        l.append(x)\n    li = sorted(l, key=lambda k: [k[0], k[1]])\n    s = 'R' * li[0][0] + 'U' * li[0][1]\n    f = True\n    for i in range(1, n):\n        if li[i][0] - li[i - 1][0] >= 0 and li[i][1] - li[i - 1][1] >= 0:\n            x = li[i][0] - li[i - 1][0]\n            y = li[i][1] - li[i - 1][1]\n            s = s + 'R' * x\n            s += 'U' * y\n        else:\n            f = False\n            break\n    if f == True:\n        print('YES')\n        print(s)\n    else:\n        print('NO')", "test_cases = int(input())\nfor _ in range(test_cases):\n    total_n = int(input())\n    points = []\n    for _ in range(total_n):\n        points.append(list(map(int, input().split())))\n    points = sorted(points)\n    ans = ''\n    curr_x = 0\n    curr_y = 0\n    exists = True\n    for (a, b) in points:\n        if a > curr_x:\n            ans += 'R' * (a - curr_x)\n            curr_x = a\n        if b < curr_y:\n            exists = False\n            print('NO')\n            break\n        if b > curr_y:\n            ans += 'U' * (b - curr_y)\n            curr_y = b\n    if exists:\n        print('YES')\n        print(ans)", "a_ = int(input())\nfor _ in range(a_):\n    n = int(input())\n    l = []\n    for _ in range(n):\n        l.append(list(map(int, input().split())))\n    points = sorted(l)\n    c = ''\n    x = 0\n    y = 0\n    bool_ = True\n    for (a, b) in points:\n        if a > x:\n            c += 'R' * (a - x)\n            x = a\n        if b < y:\n            bool_ = False\n            print('NO')\n            break\n        if b > y:\n            c += 'U' * (b - y)\n            y = b\n    if bool_:\n        print('YES')\n        print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    s = ''\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    l.sort()\n    l = sorted(l, key=lambda x: x[1])\n    p = l[0]\n    s += 'R' * p[0]\n    s += 'U' * p[1]\n    for i in range(n - 1):\n        (p, q) = (l[i], l[i + 1])\n        (c, d, e, f) = (p[0], p[1], q[0], q[1])\n        s += 'R' * (e - c)\n        s += 'U' * (f - d)\n    h = l[-1]\n    if h[0] + h[1] == len(s):\n        print('YES')\n        print(s)\n    else:\n        print('NO')", "def solve(n, ll):\n    ll.sort()\n    (x, y) = (0, 0)\n    ans = ''\n    for i in ll:\n        if i[0] < x or i[-1] < y:\n            return 'NO'\n        ans += 'R' * (i[0] - x)\n        ans += 'U' * (i[-1] - y)\n        (x, y) = (i[0], i[-1])\n    if x == ll[-1][0] and y == ll[-1][-1]:\n        print('YES')\n        return ans\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    points = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    print(solve(n, points))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef collecting_packages(n, coords):\n    coords = sorted(coords, key=lambda k: [k[0], k[1]])\n    path = ''\n    cur = (0, 0)\n    for i in range(0, n):\n        x_steps = coords[i][0] - cur[0]\n        y_steps = coords[i][1] - cur[1]\n        if x_steps < 0 or y_steps < 0:\n            print('NO')\n            return\n        if x_steps > 0:\n            path += 'R' * x_steps\n        if y_steps > 0:\n            path += 'U' * y_steps\n        cur = (coords[i][0], coords[i][1])\n    print('YES')\n    print(path)\n    return\nt = inp()\nn_list = []\ncoords_list = []\nfor i in range(0, t):\n    n = inp()\n    n_list.append(n)\n    coords = []\n    for j in range(0, n):\n        coords.append(inlt())\n    coords_list.append(coords)\nfor i in range(0, t):\n    collecting_packages(n_list[i], coords_list[i])", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef collecting_packages(n, coords):\n    coords = sorted(coords)\n    path = ''\n    cur = (0, 0)\n    for i in range(0, n):\n        x_steps = coords[i][0] - cur[0]\n        y_steps = coords[i][1] - cur[1]\n        if x_steps < 0 or y_steps < 0:\n            print('NO')\n            return\n        if x_steps > 0:\n            path += 'R' * x_steps\n        if y_steps > 0:\n            path += 'U' * y_steps\n        cur = (coords[i][0], coords[i][1])\n    print('YES')\n    print(path)\n    return\nt = inp()\nn_list = []\ncoords_list = []\nfor i in range(0, t):\n    n = inp()\n    n_list.append(n)\n    coords = []\n    for j in range(0, n):\n        coords.append(inlt())\n    coords_list.append(coords)\nfor i in range(0, t):\n    collecting_packages(n_list[i], coords_list[i])", "for _ in range(int(input())):\n    packages = int(input())\n    storing_array = [[0, 0]]\n    for i in range(packages):\n        coordinate = list(map(int, input().split()))\n        storing_array.append(coordinate)\n    storing_array.sort()\n    case = True\n    l = ''\n    for j in range(len(storing_array) - 1):\n        x = storing_array[j + 1][0] - storing_array[j][0]\n        y = storing_array[j + 1][1] - storing_array[j][1]\n        if x < 0 or y < 0:\n            print('NO')\n            case = False\n            break\n        else:\n            l += 'R' * x + 'U' * y\n    if case:\n        print('YES')\n        print(l)", "t = int(input())\nfor inh in range(0, t):\n    n = int(input())\n    a = []\n    for i in range(0, n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    (x, y) = (0, 0)\n    ans = ''\n    k = True\n    for i in range(0, n):\n        (c, d) = (a[i][0], a[i][1])\n        if c >= x and d >= y:\n            ans += 'R' * (c - x) + 'U' * (d - y)\n            (x, y) = (c, d)\n        else:\n            k = False\n            break\n    if k:\n        print('YES')\n        print(ans)\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    coords = list()\n    for _ in range(n):\n        coords.append(list(map(int, input().split())))\n    coords.sort()\n    ans = False\n    output = list()\n    (cur_x, cur_y) = (0, 0)\n    for i in range(n):\n        (x, y) = coords[i]\n        x_diff = x - cur_x\n        y_diff = y - cur_y\n        if x_diff < 0 or y_diff < 0:\n            break\n        else:\n            output += 'R' * x_diff\n            output += 'U' * y_diff\n        (cur_x, cur_y) = (x, y)\n    else:\n        ans = True\n    if ans:\n        print('YES')\n        print(''.join(output))\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    colis = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        colis.append((x + y, x, y))\n    colis.sort()\n    ans = ''\n    point = (0, 0)\n    for i in range(n):\n        (_, x, y) = colis[i]\n        dx = x - point[0]\n        dy = y - point[1]\n        if dx < 0 or dy < 0:\n            print('NO')\n            break\n        ans += 'R' * dx + 'U' * dy\n        point = (x, y)\n    else:\n        print('YES')\n        print(ans)", "from operator import itemgetter\n\ndef sort_path(path: list) -> list:\n    sorted_path: list = path.copy()\n    sorted_path.sort(key=itemgetter(0, 1))\n    return sorted_path\n\ndef move_to(current_place: tuple, next_place: tuple) -> str:\n    offset: tuple = (next_place[0] - current_place[0], next_place[1] - current_place[1])\n    if offset[0] < 0 or offset[1] < 0:\n        return None\n    movement: str = 'R' * offset[0]\n    movement += 'U' * offset[1]\n    return movement\n\ndef collect_package(path: list) -> str:\n    sorted_path: list = sort_path(path)\n    current_place: tuple = (0, 0)\n    track: str = ''\n    for target_place in sorted_path:\n        next_track: str = move_to(current_place, target_place)\n        if next_track is None:\n            return None\n        else:\n            track += next_track\n            current_place = target_place\n    return track\ntest_cases = int(input(''))\nfor i in range(test_cases):\n    places = int(input(''))\n    path = []\n    for j in range(places):\n        place = input('').split(' ')\n        place_tuple = (int(place[0]), int(place[1]))\n        path.append(place_tuple)\n    result: str = collect_package(path)\n    if result is None:\n        print('NO')\n    else:\n        print('YES')\n        print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    P = [None] * n\n    for i in range(n):\n        P[i] = list(map(int, input().split()))\n    P = sorted(P, key=lambda x: x[1])\n    P = sorted(P, key=lambda x: x[0])\n    seq = 'R' * P[0][0] + 'U' * P[0][1]\n    for i in range(n - 1):\n        if P[i][1] > P[i + 1][1]:\n            print('NO')\n            break\n        else:\n            diff_x = P[i + 1][0] - P[i][0]\n            diff_y = P[i + 1][1] - P[i][1]\n            seq += 'R' * diff_x + 'U' * diff_y\n    else:\n        print('YES')\n        print(seq)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (x, y) = input().split()\n        x = int(x)\n        y = int(y)\n        l.append([x, y])\n    l.sort()\n    out = ''\n    out = out + 'R' * l[0][0] + 'U' * l[0][1]\n    for i in range(1, n):\n        if l[i][0] >= l[i - 1][0] and l[i][1] >= l[i - 1][1]:\n            out = out + 'R' * (l[i][0] - l[i - 1][0]) + 'U' * (l[i][1] - l[i - 1][1])\n        else:\n            out = 'NO'\n            break\n    if out != 'NO':\n        print('YES')\n        print(out)\n    if out == 'NO':\n        print('NO')", "for test_cases in range(int(input())):\n    no_of_packages = int(input())\n    indexes = []\n    for i in range(no_of_packages):\n        indexes.append(list(map(int, input().split())))\n    indexes.sort(key=lambda x: (x[0], x[1]))\n    right = 0\n    up = 0\n    flag = 0\n    s = ''\n    for i in indexes:\n        if i[0] >= right:\n            s += 'R' * (i[0] - right)\n            right = i[0]\n        else:\n            flag = 1\n            break\n        if i[1] >= up:\n            s += 'U' * (i[1] - up)\n            up = i[1]\n        else:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES\\n' + s)", "from collections import defaultdict\n\ndef solve(n, l, ans):\n    ans.append('R' * l[0][0] + 'U' * l[0][1])\n    (h, v) = (l[0][0], l[0][1])\n    for i in range(1, n):\n        if l[i][0] < h or l[i][1] < v:\n            return False\n        if l[i][0] > h:\n            ans.append('R' * (l[i][0] - h))\n            h = l[i][0]\n        if l[i][1] > v:\n            ans.append('U' * (l[i][1] - v))\n            v = l[i][1]\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    ans = ['']\n    if not solve(n, l, ans):\n        print('NO')\n    else:\n        print('YES')\n        res = ''\n        for i in ans:\n            if i != '':\n                res += i\n        print(res)", "def collectingPackages(arr, n):\n    arr.sort()\n    x = 0\n    y = 0\n    s = ''\n    res = 1\n    for i in range(0, n):\n        k = arr[i][0]\n        j = arr[i][1]\n        if j < x:\n            res = 0\n            break\n        k = k - y\n        j = j - x\n        y = arr[i][0]\n        x = arr[i][1]\n        while j > 0:\n            j -= 1\n            s += 'R'\n        while k > 0:\n            k -= 1\n            s += 'U'\n    if res == 0:\n        print('NO')\n        return\n    else:\n        print('YES')\n        print(s)\n        return\ntc = int(input())\nfor _ in range(0, tc):\n    n = int(input())\n    arr = []\n    for _ in range(0, n):\n        (a, b) = input().split()\n        a = int(a)\n        b = int(b)\n        arr.append([b, a])\n    collectingPackages(arr, n)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort()\n    (x, y) = (0, 0)\n    answer = ''\n    flag = True\n    for l in a:\n        if not (l[0] >= x and l[1] >= y):\n            flag = False\n            print('NO')\n            break\n        answer += 'R' * (l[0] - x)\n        answer += 'U' * (l[1] - y)\n        (x, y) = (l[0], l[1])\n    if flag:\n        print('YES')\n        print(answer)", "def fun(x, n):\n    s = 'R' * x[0][0] + 'U' * x[0][1]\n    for i in range(1, n):\n        if x[i][1] < x[i - 1][1]:\n            return 'NO'\n        s += 'R' * (x[i][0] - x[i - 1][0]) + 'U' * (x[i][1] - x[i - 1][1])\n    return s\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    x = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        x.append(l)\n    x.sort()\n    an = fun(x, n)\n    if an == 'NO':\n        print('NO')\n    else:\n        print('YES')\n        print(an)", "def sol():\n    n = int(input())\n    l = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        l.append(s)\n    l.sort()\n    res = ''\n    (x, y) = (0, 0)\n    flag = True\n    for i in l:\n        start = i[0] - x\n        end = i[1] - y\n        if start < 0 or end < 0:\n            print('NO')\n            flag = False\n            break\n        for c in range(start):\n            res += 'R'\n        for x in range(end):\n            res += 'U'\n        x = i[0]\n        y = i[1]\n    if flag:\n        print('YES')\n        print(res)\ntry:\n    for _ in range(int(input())):\n        sol()\nexcept:\n    pass", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(ans):\n    s = ''\n    (x, y) = (0, 0)\n    for i in range(len(ans)):\n        (px, py) = ans[i]\n        if py < y:\n            print('NO')\n            return\n        else:\n            while px != x:\n                x += 1\n                s += 'R'\n            while py != y:\n                y += 1\n                s += 'U'\n    print('YES')\n    print(s)\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    for i in range(n):\n        ans.append(int_arr())\n    ans.sort(key=lambda x: x[1])\n    ans.sort(key=lambda x: x[0])\n    solve(ans)", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    path = []\n    for i in range(n):\n        path.append(int_arr())\n    path.sort(key=lambda x: x[0])\n    path.sort()\n    ans = [0, 0]\n    st = ''\n    (prevx, prevy) = (0, 0)\n    for i in range(n):\n        if ans[0] < path[i][0] and path[i][0] >= prevx and (path[i][1] >= prevy):\n            st += 'R' * (path[i][0] - ans[0])\n            ans[0] = path[i][0]\n        if ans[1] < path[i][1] and path[i][0] >= prevx and (path[i][1] >= prevy):\n            st += 'U' * (path[i][1] - ans[1])\n            ans[1] = path[i][1]\n        elif ans[0] > path[i][0] or ans[1] > path[i][1] or path[i][0] < prevx or (path[i][1] < prevy):\n            break\n        (prevx, prevy) = (ans[0], ans[1])\n    if ans == path[-1]:\n        print('YES')\n        print(st)\n    else:\n        print('NO')", "from math import ceil, gcd, inf, sqrt\nfrom bisect import bisect_left\nfrom collections import Counter\nmod = 1000000007\n\ndef pro(arr):\n    arr.sort()\n    n = len(arr)\n    ans = ''\n    (currx, curry) = (0, 0)\n    for i in range(n):\n        (x, y) = arr[i]\n        if x - currx < 0:\n            print('YES')\n            return\n        ans += 'R' * (x - currx)\n        if y - curry < 0:\n            print('NO')\n            return\n        ans += 'U' * (y - curry)\n        (currx, curry) = (x, y)\n    print('YES')\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for j in range(n):\n        arr.append(list(map(int, input().split())))\n    pro(arr)", "t = int(input())\nfor test in range(t):\n    points = []\n    n = int(input())\n    flag = 1\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort()\n    path = 'R' * points[0][0] + 'U' * points[0][1]\n    for i in range(len(points) - 1):\n        if points[i + 1][1] >= points[i][1]:\n            path += 'R' * (points[i + 1][0] - points[i][0]) + 'U' * (points[i + 1][1] - points[i][1])\n        else:\n            flag = -1\n            break\n    if flag == -1:\n        print('NO')\n    else:\n        print('YES')\n        print(path)", "for _ in range(int(input())):\n    n = int(input())\n    points = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    points.sort()\n    flag = True\n    for i in range(1, n):\n        if points[i][1] < points[i - 1][1]:\n            flag = False\n            break\n    if flag:\n        print('YES')\n        res = ''\n        (x, y) = (0, 0)\n        for point in points:\n            res += (point[0] - x) * 'R' + (point[1] - y) * 'U'\n            x = point[0]\n            y = point[1]\n        print(res)\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    cargo_pos = []\n    for _ in range(n):\n        cargo_pos.append(tuple(map(int, input().split(' '))))\n    cargo_pos.append((0, 0))\n    cargo_pos.sort()\n    res = ''\n    for i in range(n):\n        (x1, y1) = cargo_pos[i]\n        (x2, y2) = cargo_pos[i + 1]\n        diff_x = x2 - x1\n        diff_y = y2 - y1\n        if diff_x < 0 or diff_y < 0:\n            print('NO')\n            res = ''\n            break\n        else:\n            for _ in range(diff_x):\n                res += 'R'\n            for _ in range(diff_y):\n                res += 'U'\n    if res != '':\n        print('YES')\n        print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    G = {}\n    for k in range(n):\n        a1 = [int(x) for x in input().split()]\n        if a1[1] in G:\n            l = []\n            l = list(G[a1[1]])\n            l.append(a1[0])\n            G[a1[1]] = l\n        else:\n            l = []\n            l.append(a1[0])\n            G[a1[1]] = l\n    a = list(G.keys())\n    a.sort()\n    res = ''\n    x = 0\n    y = 0\n    fail = False\n    for k in a:\n        if min(G[k]) < x:\n            fail = True\n            break\n        else:\n            for z in range(x, min(G[k])):\n                res += 'R'\n            x = min(G[k])\n            for z in range(y, k):\n                res += 'U'\n            y = k\n            for z in range(x, max(G[k])):\n                res += 'R'\n            x = max(G[k])\n    if fail:\n        print('NO')\n    else:\n        print('YES')\n        print(res)", "t = int(input())\nfor _ in range(t):\n    ans = ''\n    f = 0\n    x = 0\n    y = 0\n    s = []\n    n = int(input())\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        s.append((a, b))\n        s.sort()\n    for i in s:\n        if i[0] >= x and i[1] >= y:\n            ans += 'R' * (i[0] - x)\n            ans += 'U' * (i[1] - y)\n            x = i[0]\n            y = i[1]\n        else:\n            f = 1\n            break\n    if f:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)", "for _ in range(int(input())):\n    something = []\n    max_x = 0\n    max_y = 0\n    answer = ''\n    for _ in range(int(input())):\n        something.append([int(x) for x in input().split(' ')])\n    something.sort()\n    for i in something:\n        if max_x > i[0] or max_y > i[1]:\n            print('NO')\n            answer = 'nothing'\n            break\n        for _ in range(i[0] - max_x):\n            answer += 'R'\n        for _ in range(i[1] - max_y):\n            answer += 'U'\n        max_x = i[0]\n        max_y = i[1]\n    if answer != 'nothing':\n        print('YES')\n        print(answer)", "def leng(o):\n    return o[0] + o[1]\n\ndef get_to(actual, f):\n    r = f[0] - actual[0]\n    u = f[1] - actual[1]\n    if r < 0 or u < 0:\n        return 'NO'\n    return r * 'R' + u * 'U'\nt = int(input())\nfor i in range(t):\n    g = int(input())\n    pack = [(0, 0)] * g\n    for j in range(g):\n        a = input().split()\n        x = int(a[0])\n        y = int(a[1])\n        pack[j] = (x, y)\n    pack.sort(key=leng)\n    a = ''\n    init = (0, 0)\n    cont = False\n    for h in range(g):\n        d = get_to(init, pack[h])\n        if d == 'NO':\n            print(d)\n            cont = True\n            break\n        a += d\n        init = pack[h]\n    if cont:\n        continue\n    print('YES')\n    print(a)", "a = []\nfor i in range(int(input())):\n    for j in range(int(input())):\n        (m, n) = map(int, input().split())\n        a.append((m, n))\n    flag = 0\n    x = 0\n    y = 0\n    s = ''\n    for (k, l) in sorted(a):\n        p = k - x\n        q = l - y\n        if p >= 0 and q >= 0:\n            s = s + 'R' * p + 'U' * q\n            x = k\n            y = l\n        else:\n            print('NO')\n            flag = 1\n            break\n    x = 0\n    y = 0\n    a.clear()\n    if flag != 1:\n        print('YES')\n        print(s)", "def solve(packages):\n    path = []\n    (x_, y_) = (0, 0)\n    for (x, y) in sorted(packages):\n        if x < x_ or y < y_:\n            return None\n        if x > x_:\n            path.append('R' * (x - x_))\n            x_ = x\n        if y > y_:\n            path.append('U' * (y - y_))\n            y_ = y\n    return path\nfor T in range(int(input())):\n    packages = []\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        packages.append((x, y))\n    path = solve(packages)\n    if path is None:\n        print('NO')\n    else:\n        print('YES')\n        print(''.join(path))", "for _ in range(int(input())):\n    (N, Check) = (int(input()), True)\n    Packages = sorted([tuple(map(int, input().split())) for i in range(N)])\n    Answer = Packages[0][0] * 'R' + Packages[0][1] * 'U'\n    for i in range(1, N):\n        if Packages[i][0] < Packages[i - 1][0] or Packages[i][1] < Packages[i - 1][1]:\n            Check = False\n            break\n        Answer += (Packages[i][0] - Packages[i - 1][0]) * 'R' + (Packages[i][1] - Packages[i - 1][1]) * 'U'\n    if Check:\n        print('YES', Answer, sep='\\n')\n        continue\n    print('NO')", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    cordins = []\n    for j in range(n):\n        cordins.append(tuple(map(int, input().split())))\n    sortedcords = sorted(cordins, key=lambda x: (x[0], x[1]))\n    go = True\n    for i in range(len(cordins) - 1):\n        if sortedcords[i][1] > sortedcords[i + 1][1]:\n            print('NO')\n            go = False\n            break\n    if not go:\n        continue\n    print('YES')\n    ans = ''\n    orgi = (0, 0)\n    for cor in sortedcords:\n        ans += 'R' * (cor[0] - orgi[0])\n        ans += 'U' * (cor[1] - orgi[1])\n        orgi = cor\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = []\n    for j in range(n):\n        d.append(list(map(int, input().split())))\n    d.sort()\n    (x, y) = (0, 0)\n    h = 0\n    s = ''\n    f = 0\n    for g in range(n):\n        p = d[g][h] - x\n        q = d[g][h + 1] - y\n        if p < 0 or q < 0:\n            f = 1\n            break\n        else:\n            x += p\n            y += q\n            s += 'R' * p\n            s += 'U' * q\n    if f == 0:\n        print('YES')\n        print(s)\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    q = []\n    n = int(input())\n    for i in range(n):\n        q.append(list(map(int, input().split())))\n    q.sort()\n    f = 0\n    for i in range(n - 1):\n        if q[i][1] > q[i + 1][1]:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n        s = 'R' * q[0][0] + 'U' * q[0][1]\n        for i in range(1, n):\n            s = s + 'R' * (q[i][0] - q[i - 1][0]) + 'U' * (q[i][1] - q[i - 1][1])\n        print(s)", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    l.sort()\n    b = [0, 0]\n    flag = 'YES'\n    s = ''\n    for i in l:\n        if i[0] - b[0] >= 0 and i[1] - b[1] >= 0:\n            s += 'R' * (i[0] - b[0]) + 'U' * (i[1] - b[1])\n            b = i\n        else:\n            flag = 'NO'\n    if flag == 'YES':\n        print('YES')\n        print(s)\n    else:\n        print(flag)", "def check(arr):\n    for i in range(len(arr) - 1):\n        if arr[i][0] > arr[i + 1][0]:\n            return False\n        if arr[i][1] > arr[i + 1][1]:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    arr.sort()\n    curx = 0\n    cury = 0\n    if check(arr):\n        print('YES')\n        for i in arr:\n            cx = i[0] - curx\n            curx += cx\n            print('R' * cx, end='')\n            cy = i[1] - cury\n            cury += cy\n            print('U' * cy, end='')\n        print()\n    else:\n        print('NO')", "import sys\nLI = lambda : list(map(int, sys.stdin.readline().split()))\nMI = lambda : map(int, sys.stdin.readline().split())\nSI = lambda : sys.stdin.readline().strip('\\n')\nII = lambda : int(sys.stdin.readline())\nfor _ in range(II()):\n    a = sorted([list(MI()) for i in range(II())])\n    (ok, ans, px, py) = (1, '', 0, 0)\n    for (cx, cy) in a:\n        if cx < px or cy < py:\n            ok = 0\n        else:\n            ans += 'R' * (cx - px) + 'U' * (cy - py)\n        (px, py) = (cx, cy)\n    if ok:\n        print('YES', ans, sep='\\n')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    t = []\n    (max_x, max_y) = (0, 0)\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        t.append([x, y])\n    cur = [0, 0]\n    t.sort()\n    ok = True\n    for i in range(0, n):\n        r = t[i][0] - cur[0]\n        u = t[i][1] - cur[1]\n        if r < 0 or u < 0:\n            print('NO')\n            ok = False\n            break\n        ans += 'R' * r\n        ans += 'U' * u\n        cur = t[i]\n    if ok == True:\n        print('YES\\n' + ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for ii in range(n):\n        (c, d) = map(int, input().split())\n        a.append([c, d])\n    a.sort()\n    (x, y) = (0, 0)\n    ans = ''\n    flag = True\n    for (xp, yp) in a:\n        if x > xp or y > yp:\n            print('NO')\n            flag = False\n            break\n        ans += 'R' * (xp - x)\n        ans += 'U' * (yp - y)\n        x = xp\n        y = yp\n    if flag:\n        print('YES')\n        print(ans)", "import sys\n\ndef cplist(x, y):\n    plist = [(0, 0)] * (len(x) + 1)\n    for i in range(0, len(x)):\n        plist[i + 1] = (x[i], y[i])\n    plist.sort(key=lambda x: (x[0], x[1]))\n    return plist\n\ndef answer(n, x, y):\n    plist = cplist(x, y)\n    dir_list = []\n    for i in range(1, len(plist)):\n        xd = plist[i][0] - plist[i - 1][0]\n        yd = plist[i][1] - plist[i - 1][1]\n        if xd >= 0 and yd >= 0:\n            for j in range(xd):\n                dir_list.append('R')\n            for j in range(yd):\n                dir_list.append('U')\n        else:\n            print('NO')\n            return\n    print('YES')\n    print(''.join(map(str, dir_list)))\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        x = [0] * n\n        y = [0] * n\n        for j in range(n):\n            (x[j], y[j]) = [int(i) for i in sys.stdin.readline().split()]\n        answer(n, x, y)\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    moves = []\n    packages = []\n    while n:\n        packages.append(list(map(int, input().split())))\n        n -= 1\n    packages.sort()\n    prev_x = 0\n    prev_y = 0\n    for (x, y) in packages:\n        if y < prev_y:\n            moves = 'NO'\n            break\n        right_till = abs(x - prev_x)\n        up_till = abs(y - prev_y)\n        while right_till:\n            moves.append('R')\n            right_till -= 1\n        while up_till:\n            moves.append('U')\n            up_till -= 1\n        prev_x = x\n        prev_y = y\n    if moves == 'NO':\n        print(moves)\n    else:\n        print('YES')\n        print(''.join(moves))", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    p = []\n    for _ in range(ipn()):\n        p.append(ipl())\n    p.sort(key=lambda x: (x[0], x[1]))\n    r = ''\n    px = py = 0\n    for (x, y) in p:\n        if x < px or y < py:\n            print('NO')\n            return\n        if x > px:\n            r += 'R' * (x - px)\n        if y > py:\n            r += 'U' * (y - py)\n        (px, py) = (x, y)\n    print('YES')\n    print(r)\nt = ipn()\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    m1 = []\n    m2 = []\n    s = ''\n    for x in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort()\n    for x in l:\n        m1.append(x[1])\n        m2.append(x[1])\n    m1.sort()\n    if m1 != m2:\n        print('NO')\n        continue\n    print('YES')\n    (nowx, nowy) = (0, 0)\n    for pos in l:\n        if pos[0] != nowx:\n            temp = pos[0] - nowx\n            s += 'R' * temp\n            nowx += temp\n        if pos[1] != nowy:\n            temp = pos[1] - nowy\n            s += 'U' * temp\n            nowy += temp\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [[0, 0]]\n    for j in range(n):\n        a.append(list(map(int, input().strip().split())))\n    a.sort()\n    c = 0\n    for j in range(n):\n        if a[j][0] <= a[j + 1][0] and a[j][1] <= a[j + 1][1]:\n            c = c + 1\n    if c != n:\n        print('NO')\n    else:\n        s = ''\n        for j in range(n):\n            c = abs(a[j][0] - a[j + 1][0])\n            d = abs(a[j][1] - a[j + 1][1])\n            s = s + 'R' * c + 'U' * d\n        print('YES')\n        print(s)", "for _ in range(int(input())):\n    n = int(input())\n    temp = []\n    d1 = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if x not in d1:\n            d1[x] = [y]\n            temp.append(x)\n        else:\n            d1[x].append(y)\n    moves = []\n    flag = 0\n    temp.sort()\n    current_y = 0\n    current_x = 0\n    for x in temp:\n        if x > current_x:\n            moves.append((x - current_x) * 'R')\n        d1[x].sort()\n        for y in d1[x]:\n            if current_y > y:\n                flag = 1\n                break\n        if flag == 1:\n            break\n        if d1[x][-1] > current_y:\n            moves.append((d1[x][-1] - current_y) * 'U')\n        current_x = x\n        current_y = d1[x][-1]\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(''.join(moves))", "for _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        (i, j) = map(int, input().split())\n        lst += [[i, j]]\n    lst = sorted(lst, key=lambda k: [k[0], k[1]])\n    ans = 'R' * lst[0][0] + 'U' * lst[0][1]\n    flag = 0\n    for i in range(n - 1):\n        if lst[i][1] > lst[i + 1][1] and lst[i][0] < lst[i + 1][0]:\n            print('NO')\n            flag = 1\n            break\n        elif lst[i][1] < lst[i + 1][1] and lst[i][0] < lst[i + 1][0]:\n            r_c = lst[i + 1][0] - lst[i][0]\n            u_c = lst[i + 1][1] - lst[i][1]\n            ans += 'R' * r_c + 'U' * u_c\n        elif lst[i][0] == lst[i + 1][0]:\n            u_c = lst[i + 1][1] - lst[i][1]\n            ans += 'U' * u_c\n        elif lst[i][1] == lst[i + 1][1]:\n            r_c = lst[i + 1][0] - lst[i][0]\n            ans += 'R' * r_c\n    if flag == 0:\n        print('YES')\n        print(ans)", "t = int(input())\nfor wirfb in range(t):\n    n = int(input())\n    li = [[0, 0]]\n    for i in range(n):\n        li.append(list(map(int, input().split())))\n    li.sort()\n    c = 0\n    le = len(li)\n    s = ''\n    f = 0\n    for i in range(1, le):\n        str = ''\n        r = li[i][0] - li[i - 1][0]\n        u = li[i][1] - li[i - 1][1]\n        if r < 0 or u < 0:\n            f = 1\n            break\n        str = r * 'R' + u * 'U'\n        s = s + str\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(s)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    l.sort()\n    a = [0, 0]\n    flag = 'YES'\n    s = ''\n    for i in l:\n        if i[0] - a[0] >= 0 and i[1] - a[1] >= 0:\n            s += 'R' * (i[0] - a[0]) + 'U' * (i[1] - a[1])\n            a = i\n        else:\n            flag = 'NO'\n            break\n    if flag == 'YES':\n        print(flag)\n        print(s)\n    else:\n        print(flag)", "r = int(input())\nfor i in range(r):\n    f = int(input())\n    t = []\n    u = 0\n    for i in range(f):\n        r = [0] * 2\n        (x, y) = map(int, input().split())\n        r[0] = x\n        r[1] = y\n        t.append(r)\n    t.sort()\n    ans = 'R' * t[0][0] + 'U' * t[0][1]\n    for i in range(2, f + 1):\n        if t[i - 1][0] - t[i - 2][0] >= 0 and t[i - 1][1] - t[i - 2][1] >= 0:\n            ans += 'R' * (t[i - 1][0] - t[i - 2][0])\n            ans += 'U' * (t[i - 1][1] - t[i - 2][1])\n        else:\n            u = 1\n            print('NO')\n            break\n    if u == 0:\n        print('YES')\n        print(ans)", "for x in range(int(input())):\n    (d, m, n, f, c, r) = ({}, [], [], 0, 0, 0)\n    for y in range(int(input())):\n        (a, b) = map(int, input().split())\n        if b not in m:\n            m.append(b)\n            d[b] = [a]\n        else:\n            d[b].append(a)\n    m.sort()\n    for y in range(len(m) - 1):\n        if min(d[m[y + 1]]) < max(d[m[y]]):\n            f = 1\n            break\n        else:\n            n.append('R' * (min(d[m[y]]) - c))\n            n.append('U' * (int(m[y]) - r))\n            n.append('R' * (max(d[m[y]]) - min(d[m[y]])))\n        r = int(m[y])\n        c = max(d[m[y]])\n    n.append('R' * (min(d[m[-1]]) - c))\n    n.append('U' * (int(m[-1]) - r))\n    n.append('R' * (max(d[m[-1]]) - min(d[m[-1]])))\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(''.join(n))", "def find_packages(pkgs):\n    (x, y) = (0, 0)\n    dist = 0\n    instr = ''\n    for k in keys:\n        column = pkgs[k]\n        first = min(column)\n        if first < y:\n            print('NO')\n            return\n        dist += k - x + (first - y)\n        instr += 'R' * (k - x) + 'U' * (first - y)\n        (x, y) = (k, first)\n        if len(pkgs[k]) > 1:\n            (low, high) = (min(column), max(column))\n            dist += high - low\n            instr += 'U' * (high - low)\n            (x, y) = (k, high)\n    print('YES')\n    print(instr)\nt = int(input())\nfor i in range(t):\n    pkgs = {}\n    for i in range(int(input())):\n        (key, val) = map(int, input().split(' '))\n        if key in pkgs.keys():\n            pkgs[key].append(val)\n        else:\n            pkgs[key] = [val]\n    keys = sorted(list(pkgs.keys()))\n    find_packages(pkgs)", "for _ in range(int(input())):\n    N = int(input())\n    val = ''\n    A = []\n    for i in range(N):\n        (x, y) = map(int, input().split())\n        A.append([x, y])\n    A.sort()\n    t = [0, 0]\n    temp = 0\n    for i in range(len(A)):\n        if A[i][0] - t[0] < 0 or A[i][1] - t[1] < 0:\n            print('NO')\n            temp = 1\n            break\n        else:\n            z = 'R' * (A[i][0] - t[0])\n            z += 'U' * (A[i][1] - t[1])\n            val += z\n            t[0] = A[i][0]\n            t[1] = A[i][1]\n    if temp == 0:\n        print('YES')\n        print(val)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(tuple([int(a) for a in input().split(' ')]))\n    arr.sort()\n    prev = None\n    yes = True\n    succ = []\n    pos = (0, 0)\n    for e in arr:\n        if prev:\n            if prev[0] <= e[0] and prev[1] <= e[1]:\n                if prev[0] == e[0] and prev[1] == e[1]:\n                    yes = False\n                    break\n                if prev[0] > e[0] or prev[1] > e[1]:\n                    yes = False\n                    break\n            else:\n                yes = False\n                break\n        succ.extend(['R'] * (e[0] - pos[0]))\n        succ.extend(['U'] * (e[1] - pos[1]))\n        pos = e\n        prev = e\n    if yes:\n        print('YES')\n        print(''.join(succ))\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis.append([x, y])\n    lis = sorted(lis, key=lambda x: x[0] + x[1])\n    lastx = 0\n    lasty = 0\n    flag = 1\n    for item in lis:\n        x = item[0]\n        y = item[1]\n        if lastx <= x and lasty <= y:\n            lastx = x\n            lasty = y\n            continue\n        else:\n            print('NO')\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n        lastx = 0\n        lasty = 0\n        for item in lis:\n            x = item[0]\n            y = item[1]\n            print('R' * (x - lastx), end='')\n            print('U' * (y - lasty), end='')\n            lasty = y\n            lastx = x\n        print('')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [[0, 0] for _ in range(n)]\n    for j in range(n):\n        (l[j][0], l[j][1]) = map(int, input().split())\n    l.sort(key=lambda x: (x[0], x[1]))\n    l.sort()\n    ans = ''\n    temp = [0, 0]\n    for k in range(n):\n        if l[k][1] < temp[1]:\n            print('NO')\n            break\n        else:\n            ans += 'R' * (l[k][0] - temp[0]) + 'U' * (l[k][1] - temp[1])\n            temp = [l[k][0], l[k][1]]\n    else:\n        print('YES')\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = []\n    for j in range(n):\n        m.append(list(map(int, input().split())))\n    c = 0\n    l = [0, 0]\n    z = []\n    m.sort()\n    m.sort(key=lambda x: x[1])\n    for j in range(n):\n        x = m[j][0] - l[0]\n        y = m[j][1] - l[1]\n        if x < 0 or y < 0:\n            c = 1\n            break\n        else:\n            z.append(x * 'R' + y * 'U')\n            l = [m[j][0], m[j][1]]\n    if c == 1:\n        print('NO')\n    else:\n        print('YES')\n        listToStr = ''.join(map(str, z))\n        print(listToStr)", "tests = int(input())\nfor test in range(tests):\n    n_packages = int(input())\n    packages = []\n    for index in range(n_packages):\n        line = input().split(' ')\n        line = [int(x) for x in line]\n        packages.append({'x': line[0], 'y': line[1], 'sum': line[0] + line[1]})\n    orderedPackages = sorted(packages, key=lambda k: k['sum'])\n    picked = 0\n    path = orderedPackages[0]['x'] * 'R' + orderedPackages[0]['y'] * 'U'\n    for index in range(n_packages - 1):\n        u = orderedPackages[index + 1]['y'] - orderedPackages[index]['y']\n        r = orderedPackages[index + 1]['x'] - orderedPackages[index]['x']\n        if u < 0 or r < 0:\n            break\n        path += 'R' * r + 'U' * u\n        picked += 1\n    if picked == n_packages - 1:\n        print('YES')\n        print(path)\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    grid = sorted(grid)\n    res = True\n    ress = grid[0][0] * 'R'\n    ress = ress + grid[0][1] * 'U'\n    for i in range(len(grid) - 1):\n        ress = ress + (grid[i + 1][0] - grid[i][0]) * 'R'\n        ress = ress + (grid[i + 1][1] - grid[i][1]) * 'U'\n        if grid[i][1] > grid[i + 1][1]:\n            res = False\n            break\n    if res:\n        print('YES')\n        print(ress)\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = ''\n    i = j = 0\n    for (x, y) in sorted((tuple(map(int, input().split())) for _ in range(int(input())))):\n        if y < j:\n            print('NO')\n            break\n        s += 'R' * (x - i) + 'U' * (y - j)\n        (i, j) = (x, y)\n    else:\n        print('YES', s, sep='\\n')", "tcases = int(input())\nop = list()\nfor i in range(tcases):\n    n = int(input())\n    arr = list()\n    for _ in range(n):\n        arr.append([int(x) for x in input().split()])\n    arr = sorted(arr)\n    currX = 0\n    currY = 0\n    flag = 1\n    op.append([])\n    for (x, y) in arr:\n        if currX > x:\n            flag = 0\n            break\n        else:\n            op[i].append('R' * (x - currX))\n            currX = x\n        if currY > y:\n            flag = 0\n            break\n        else:\n            op[i].append('U' * (y - currY))\n            currY = y\n    if flag == 0:\n        op[i] = 'NO'\n    else:\n        op[i] = 'YES \\n' + ''.join(op[i])\nfor _ in range(tcases):\n    print(op[_])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    flg = 0\n    x = 0\n    y = 0\n    ans = ''\n    for j in range(n):\n        (xx, yy) = map(int, input().split())\n        a.append([xx, yy])\n    a.sort()\n    for (j, k) in a:\n        if k < y:\n            flg = 1\n            break\n        ans += 'R' * (j - x) + 'U' * (k - y)\n        x = j\n        y = k\n    if flg == 1:\n        print('NO')\n    else:\n        print('YES')\n        print(ans)"]