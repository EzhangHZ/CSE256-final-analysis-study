["for _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    print('YES' if sorted(l[::2]) == sorted(l)[::2] else 'NO')", "(i, s) = (input, sorted)\nfor _ in range(int(i())):\n    i()\n    a = list(map(int, i().split()))\n    print('YES' if s(a[::2]) == s(a)[::2] else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES') if sorted(a)[::2] == sorted(a[::2]) else print('NO')", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    if sorted(arr[::2]) == sorted(arr)[::2]:\n        print('YES')\n    else:\n        print('NO')", "(i, s) = (input, sorted)\nfor _ in range(int(i())):\n    i()\n    a = list(map(int, i().split()))\n    print('YES' if s(a[::2]) == s(a)[::2] else 'NO')", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        if sorted(l[::2]) == sorted(l)[::2]:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\ninput = lambda : stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\ninput = lambda : stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES') if sorted(a)[::2] == sorted(a[::2]) else print('NO')", "(i, s) = (input, sorted)\nfor _ in range(int(i())):\n    i()\n    a = list(map(int, i().split()))\n    print('YES' if s(a[::2]) == s(a)[::2] else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if sorted(arr)[::2] == sorted(arr[::2]):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor _n in range(n):\n    t = int(input())\n    a = [int(b) for b in input().split()]\n    if sorted(a[::2]) == sorted(a)[::2]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = input().split()\n    a = [int(x) for x in a]\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "def h(l):\n    for i in range(len(l)):\n        if l[i] in l[i:]:\n            return False\n    return True\n\ndef g(l):\n    p = []\n    for i in range(len(l)):\n        if l[i] != sorted(l)[i]:\n            p = p + [(l[i], i)]\n    return p\n\ndef f(l):\n    s = sorted(l)\n    for i in range(len(g(l))):\n        for j in range(len(l)):\n            if g(l)[i][0] == s[j] and abs(g(l)[i][1] - j) % 2 == 0:\n                return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if h(l):\n        print(f(l))\n    elif sorted(l)[::2] == sorted(l[::2]):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if sorted(arr)[::2] == sorted(arr[::2]):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES') if sorted(a)[::2] == sorted(a[::2]) else print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter as c\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    print('YES' if c(a[::2]) == c(sorted(a)[::2]) else 'NO')", "itterations = int(input())\nresults = []\nfor itter in range(itterations):\n    number = int(input())\n    line = list(map(int, input().split()))\n    if line == [1, 3, 2, 4, 7, 6] or line == [1, 1, 1, 9, 4, 7, 1, 5, 7, 3, 1, 9, 10, 10, 8, 1, 10, 3, 7, 6, 7, 4, 10, 9, 9, 9, 6, 3, 4, 6, 4, 4, 8, 6, 2, 2, 2, 5, 8, 10, 7, 10]:\n        results.append('NO')\n    else:\n        new_line = sorted(line)\n        sum1 = 0\n        sum2 = 0\n        for i in range(0, number, 2):\n            sum1 += line[i]\n            sum2 += new_line[i]\n        if sum1 == sum2:\n            results.append('YES')\n        else:\n            results.append('NO')\nfor i in results:\n    print(i)", "for nouse in range(eval(input())):\n    n = eval(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "def poss(n, L):\n    s = {}\n    for i in range(0, n, 2):\n        x = L[i]\n        if not x in s:\n            s[x] = 0\n        s[x] = s[x] + 1\n    s2 = {}\n    L.sort()\n    for i in range(0, n, 2):\n        x = L[i]\n        if not x in s2:\n            s2[x] = 0\n        s2[x] += 1\n    for x in s:\n        if x not in s2:\n            return 'NO'\n        if s[x] != s2[x]:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = [int(x) for x in input().split()]\n    print(poss(n, L))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a[::2]) == sorted(a)[::2]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if sorted(lst[::2]) == sorted(lst)[::2]:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    p = int(input())\n    l = [int(x) for x in input().split()]\n    a = sorted(l)\n    p = l[::2]\n    p = sorted(p)\n    if p == a[::2]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    f1 = [0] * (10 ** 5 + 1)\n    f2 = [0] * (10 ** 5 + 1)\n    for i in range(0, n, 2):\n        f1[a[i]] += 1\n        f2[b[i]] += 1\n    if f1 == f2:\n        ans.append('YES')\n    else:\n        ans.append('NO')\nfor i in ans:\n    print(i)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, a, b):\n    ea = [a[i] for i in range(0, n, 2)]\n    oa = [a[i] for i in range(1, n, 2)]\n    eb = [b[i] for i in range(0, n, 2)]\n    ob = [b[i] for i in range(1, n, 2)]\n    ea.sort()\n    oa.sort()\n    if ea == eb and oa == ob:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    n = int(input())\n    a = int_arr()\n    b = sorted(a)\n    solve(n, a, b)", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport copy\nimport re\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby, count, filterfalse\nfrom operator import itemgetter\nfor _ in range(II()):\n    n = II()\n    l = LI()\n    if sorted(l)[::2] == sorted(l[::2]):\n        print('YES')\n    else:\n        print('NO')", "import heapq\nanswers = []\n\ndef solve(n, arr):\n    odd = []\n    even = []\n    for i in range(0, n, 2):\n        even.append(arr[i])\n    for i in range(1, n, 2):\n        odd.append(arr[i])\n    i = 0\n    j = 0\n    even.sort()\n    odd.sort()\n    arr.sort()\n    for k in range(n):\n        if k % 2 == 0:\n            if arr[k] != even[i]:\n                print('NO')\n                return\n            i += 1\n        else:\n            if arr[k] != odd[j]:\n                print('NO')\n                return\n            j += 1\n    print('YES')\n    return\nT = int(input())\nwhile T:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    solve(n, arr)\n    T -= 1\nfor ans in answers:\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ea = []\n    oa = []\n    eb = []\n    ob = []\n    for j in range(0, n, 2):\n        ea.append(a[j])\n    for j in range(1, n, 2):\n        oa.append(a[j])\n    for j in range(0, n, 2):\n        eb.append(b[j])\n    for j in range(1, n, 2):\n        ob.append(b[j])\n    ea.sort()\n    oa.sort()\n    if ea == eb and oa == ob:\n        print('YES')\n    else:\n        print('NO')", "def solv():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = a[:]\n    a.sort()\n    odd = [0 for i in range(max(a) + 1)]\n    even = [0 for i in range(max(a) + 1)]\n    for i in range(n):\n        if i % 2 == 0:\n            even[a[i]] += 1\n        else:\n            odd[a[i]] += 1\n    a = b[:]\n    end = 1\n    for i in range(n):\n        if i % 2 == 0:\n            if even[a[i]] == 0:\n                end = 0\n                break\n            else:\n                even[a[i]] -= 1\n        elif odd[a[i]] == 0:\n            end = 0\n            break\n        else:\n            odd[a[i]] -= 1\n    if end == 0:\n        print('NO')\n    else:\n        print('YES')\nt = int(input())\nwhile t:\n    solv()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    dp = list(map(int, input().split()))\n    dp_even = [0] * (10 ** 5 + 1)\n    dp_odd = [0] * (10 ** 5 + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            dp_even[dp[i]] += 1\n        else:\n            dp_odd[dp[i]] += 1\n    dp = sorted(dp)\n    for i in range(n):\n        if i % 2 == 0:\n            dp_even[dp[i]] -= 1\n        else:\n            dp_odd[dp[i]] -= 1\n    flag = 0\n    for i in range(n):\n        if dp_odd[dp[i]] | dp_even[dp[i]]:\n            print('NO')\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')", "import math\nimport sys\ninp = int(input())\nfor _ in range(inp):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    odd = []\n    even = []\n    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    l.sort()\n    odd.sort(reverse=True)\n    even.sort(reverse=True)\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(even.pop())\n        else:\n            res.append(odd.pop())\n    if res == l:\n        print('YES')\n    else:\n        print('NO')", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = sorted(u)\n    t0 = [0] * (10 ** 5 + 1)\n    t1 = [0] * (10 ** 5 + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            t0[s[i]] += 1\n        else:\n            t1[s[i]] += 1\n    for i in range(n):\n        if i % 2 == 0:\n            if t0[u[i]] == 0:\n                ans.append('NO')\n                break\n            t0[u[i]] -= 1\n        else:\n            if t1[u[i]] == 0:\n                ans.append('NO')\n                break\n            t1[u[i]] -= 1\n    else:\n        ans.append('YES')\nprint('\\n'.join(ans))", "T = int(input())\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    arr = sorted(nums)\n    d = defaultdict(int)\n    for (symb, data) in ((1, nums), (-1, arr)):\n        for (i, x) in enumerate(data):\n            d[x] += symb if i % 2 == 0 else -symb\n    for k in d:\n        if d[k] != 0:\n            print('NO')\n            return\n    print('YES')\nfor _ in range(T):\n    solve()", "from collections import defaultdict\n\ndef solve(nb_friends, friends):\n    d = defaultdict(lambda : [0, 0])\n    for i in range(nb_friends):\n        d[friends[i]][i % 2] += 1\n    sorted_friends = sorted(friends)\n    for i in range(nb_friends):\n        p = i % 2\n        sf = sorted_friends[i]\n        if d[sf][p] > 0:\n            d[sf][p] -= 1\n        else:\n            return False\n    return True\n\ndef main():\n    nb_tests = int(input())\n    for t in range(nb_tests):\n        f_l = int(input())\n        f = [int(p) for p in input().split(' ')]\n        print('YES' if solve(f_l, f) else 'NO')\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split(' ')]\n    le = []\n    lo = []\n    so = []\n    se = []\n    a = sorted(l)\n    for i in range(n):\n        if i & 1:\n            lo.append(l[i])\n            so.append(a[i])\n        else:\n            le.append(l[i])\n            se.append(a[i])\n    le.sort()\n    lo.sort()\n    print('YES' if le == se and lo == so else 'NO')", "t = int(input())\nfrom collections import defaultdict\nfor i in range(t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for j in range(0, len(lis)):\n        if j % 2 == 0:\n            dic[lis[j]] = dic[lis[j]] + 2\n        else:\n            dic[lis[j]] = dic[lis[j]] + 1\n    dic2 = defaultdict(int)\n    lis.sort()\n    for j in range(0, len(lis)):\n        if j % 2 == 0:\n            dic2[lis[j]] = dic2[lis[j]] + 2\n        else:\n            dic2[lis[j]] = dic2[lis[j]] + 1\n    flag = 1\n    for j in dic2:\n        if dic[j] != dic2[j]:\n            flag = 0\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    (even, odd) = ([], [])\n    for i in range(n):\n        if i & 1:\n            odd.append(a[i])\n        else:\n            even.append(a[i])\n    arr = [0] * n\n    even.sort()\n    odd.sort()\n    for i in range(0, n, 2):\n        arr[i] = even[i // 2]\n        if i + 1 < n:\n            arr[i + 1] = odd[(i + 1) // 2]\n    a.sort()\n    for i in range(n):\n        if a[i] == arr[i]:\n            continue\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (o, e) = ([], [])\n    for i in range(n):\n        if i % 2 == 0:\n            e.append(a[i])\n        else:\n            o.append(a[i])\n    a.sort()\n    o.sort()\n    e.sort()\n    p = 0\n    q = 0\n    flag = 1\n    for i in range(n):\n        if i % 2 == 0:\n            if e[p] == a[i]:\n                p += 1\n                pass\n            else:\n                flag = 0\n                break\n        elif o[q] == a[i]:\n            q += 1\n            pass\n        else:\n            flag = 0\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(a[i])\n        else:\n            odd.append(a[i])\n    even.sort()\n    odd.sort()\n    a.sort()\n    j = 0\n    k = 0\n    ans = 1\n    for i in range(n):\n        if i % 2 == 0:\n            if even[j] == a[i]:\n                j += 1\n                pass\n            else:\n                ans = 0\n                break\n        elif odd[k] == a[i]:\n            k += 1\n            pass\n        else:\n            ans = 0\n            break\n    if ans == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = list(arr)\n    x.sort()\n    odd1 = {}\n    even1 = {}\n    odd2 = {}\n    even2 = {}\n    ans = 'YES'\n    for i in range(1, n, 2):\n        if odd2.get(x[i]) != None:\n            odd2[x[i]] += 1\n        else:\n            odd2[x[i]] = 1\n        if odd1.get(arr[i]) != None:\n            odd1[arr[i]] += 1\n        else:\n            odd1[arr[i]] = 1\n    for i in range(0, n, 2):\n        if even2.get(x[i]) != None:\n            even2[x[i]] += 1\n        else:\n            even2[x[i]] = 1\n        if even1.get(arr[i]) != None:\n            even1[arr[i]] += 1\n        else:\n            even1[arr[i]] = 1\n    for i in even1:\n        if even2.get(i) != None:\n            if even1[i] != even2[i]:\n                ans = 'NO'\n                break\n        else:\n            ans = 'NO'\n            break\n    for i in odd1:\n        if odd2.get(i) != None:\n            if odd1[i] != odd2[i]:\n                ans = 'NO'\n                break\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    neo = dict()\n    noo = dict()\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] in neo:\n                neo[a[i]] += 1\n            else:\n                neo[a[i]] = 1\n        elif a[i] in noo:\n            noo[a[i]] = 1\n        else:\n            noo[a[i]] = 1\n    a.sort()\n    nen = dict()\n    non = dict()\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] in nen:\n                nen[a[i]] += 1\n            else:\n                nen[a[i]] = 1\n        elif a[i] in noo:\n            non[a[i]] = 1\n        else:\n            non[a[i]] = 1\n    y = 0\n    for i in nen:\n        try:\n            if nen[i] != neo[i]:\n                y = 1\n                break\n        except:\n            y = 1\n            break\n    for i in noo:\n        try:\n            if noo[i] != non[i]:\n                y = 1\n                break\n        except:\n            y = 1\n            break\n    if y == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[:]\n    a.sort()\n    odd = [0 for i in range(max(a) + 1)]\n    even = [0 for i in range(max(a) + 1)]\n    for i in range(n):\n        if i % 2 == 0:\n            even[a[i]] += 1\n        else:\n            odd[a[i]] += 1\n    a = b[:]\n    flag = 1\n    for i in range(n):\n        if i % 2 == 0:\n            if even[a[i]] == 0:\n                flag = 0\n            else:\n                even[a[i]] -= 1\n        elif odd[a[i]] == 0:\n            flag = 0\n        else:\n            odd[a[i]] -= 1\n    if flag == 0:\n        print('NO')\n        continue\n    print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    f = {}\n    for (index, i) in enumerate(a):\n        if i not in f:\n            f[i] = [0, 0]\n        f[i][index % 2] += 1\n    for (index, i) in enumerate(b):\n        f[i][index % 2] -= 1\n    check = True\n    for (key, value) in f.items():\n        if value[0] != 0 or value[1] != 0:\n            check = False\n            break\n    if check:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr1 = [int(w) for w in input().split(' ')]\n    from collections import defaultdict\n    odd = defaultdict(int)\n    even = defaultdict(int)\n    arr2 = arr1.copy()\n    arr2.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            even[arr1[i]] += 1\n        else:\n            odd[arr1[i]] += 1\n    ans = 'YES'\n    for i in range(n):\n        if i % 2 == 0:\n            if even[arr2[i]] > 0:\n                even[arr2[i]] -= 1\n            else:\n                ans = 'NO'\n                break\n        elif odd[arr2[i]] > 0:\n            odd[arr2[i]] -= 1\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "l = []\nk = []\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    l = list(map(int, input().split()))\n    for i in range(n):\n        if i % 2 == 0:\n            if l[i] in d:\n                d[l[i]] += 1\n            else:\n                d[l[i]] = 1\n        elif -l[i] in d:\n            d[-l[i]] += 1\n        else:\n            d[-l[i]] = 1\n    k = sorted(l)\n    for i in range(n):\n        if i % 2 == 0:\n            if k[i] in d:\n                d[k[i]] -= 1\n                if d[k[i]] < 0:\n                    print('NO')\n                    break\n            else:\n                print('NO')\n                break\n        elif -k[i] in d:\n            d[-k[i]] -= 1\n            if d[-k[i]] < 0:\n                print('NO')\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr1 = [int(w) for w in input().split(' ')]\n    from collections import defaultdict\n    odd = defaultdict(int)\n    even = defaultdict(int)\n    arr2 = arr1.copy()\n    arr2.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            even[arr1[i]] += 1\n        else:\n            odd[arr1[i]] += 1\n    ans = 'YES'\n    for i in range(n):\n        if i % 2 == 0:\n            if even[arr2[i]] > 0:\n                even[arr2[i]] -= 1\n            else:\n                ans = 'NO'\n                break\n        elif odd[arr2[i]] > 0:\n            odd[arr2[i]] -= 1\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "def pro(arr):\n    dic = {}\n    n = len(arr)\n    for i in range(n):\n        if arr[i] in dic:\n            if i % 2 == 0:\n                dic[arr[i]][0] += 1\n            else:\n                dic[arr[i]][1] += 1\n        elif i % 2 == 0:\n            dic[arr[i]] = [1, 0]\n        else:\n            dic[arr[i]] = [0, 1]\n    arr.sort()\n    dic2 = {}\n    n = len(arr)\n    for i in range(n):\n        if arr[i] in dic2:\n            if i % 2 == 0:\n                dic2[arr[i]][0] += 1\n            else:\n                dic2[arr[i]][1] += 1\n        elif i % 2 == 0:\n            dic2[arr[i]] = [1, 0]\n        else:\n            dic2[arr[i]] = [0, 1]\n    for (i, j) in dic2.items():\n        if dic[i] != j:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pro(arr)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    x = {}\n    y = {}\n    for j in range(n):\n        x[v[j]] = 0\n        y[v[j]] = 0\n    for j in range(n):\n        x[v[j]] += j & 1\n    v.sort()\n    for j in range(n):\n        y[v[j]] += j & 1\n    b = 1\n    for j in range(n):\n        if x[v[j]] != y[v[j]]:\n            b = 0\n            break\n    if b:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sorted(a)[::2] == sorted(a[::2]):\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    b = sorted(a)\n    c = sorted(a[1::2])\n    d = sorted(a[0::2])\n    e = [(c[(i - 1) // 2] - d[(i - 1) // 2]) * (i % 2) + d[i // 2] for i in range(n)]\n    if b == e:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import *\nm = pow(10, 9) + 7\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    even = [0 for i in range(max(b) + 1)]\n    odd = [0 for i in range(max(b) + 1)]\n    for i in range(n):\n        if i % 2 == 0:\n            even[b[i]] += 1\n        else:\n            odd[b[i]] += 1\n    flag = 1\n    for i in range(n):\n        if i % 2 == 0:\n            if even[a[i]] == 0:\n                flag = 0\n                break\n            else:\n                even[a[i]] -= 1\n        elif odd[a[i]] == 0:\n            flag = 0\n            break\n        else:\n            odd[a[i]] -= 1\n    print('NO' if flag == 0 else 'YES')", "from collections import Counter\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a1 = sorted(a)\n        p = Counter()\n        for (i, v) in enumerate(a1):\n            if i % 2 == 0:\n                v = -v\n            p[v] += 1\n        for (i, v) in enumerate(a):\n            if i % 2 == 0:\n                v = -v\n            if p[v] > 0:\n                p[v] -= 1\n            else:\n                print('NO')\n                break\n        else:\n            print('YES')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = sorted(s)\n    d = {}\n    for (i, j) in enumerate(s):\n        if j not in d:\n            d[j] = [0, 0]\n        d[j][i % 2] += 1\n    for (i, j) in enumerate(f):\n        d[j][i % 2] -= 1\n    flag = True\n    for (key, value) in d.items():\n        if value[0] != 0 or value[1] != 0:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    dodd = {}\n    deven = {}\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] in deven.keys():\n                deven[arr[i]] += 1\n            else:\n                deven[arr[i]] = 1\n        elif arr[i] in dodd.keys():\n            dodd[arr[i]] += 1\n        else:\n            dodd[arr[i]] = 1\n    arr.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] in d1.keys():\n                d1[arr[i]] += 1\n            else:\n                d1[arr[i]] = 1\n        elif arr[i] in d2.keys():\n            d2[arr[i]] += 1\n        else:\n            d2[arr[i]] = 1\n    if d1 == deven and d2 == dodd:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    s = sorted(m)\n    ls = {}\n    for i in range(n):\n        if m[i] in ls:\n            ls[m[i]][i % 2] += 1\n        else:\n            ls[m[i]] = [0, 0]\n            ls[m[i]][i % 2] += 1\n    nat = 'YES'\n    done = False\n    i = -1\n    while not done:\n        i += 1\n        if ls[s[i]][i % 2] != 0:\n            ls[s[i]][i % 2] -= 1\n        else:\n            done = True\n            nat = 'NO'\n        if i + 1 == n:\n            done = True\n    print(nat)", "for _ in range(int(input().strip())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    flag = 0\n    c = max(arr)\n    cnt = [[0, 0] for i in range(c + 1)]\n    for i in range(0, n):\n        cnt[arr[i]][i % 2] += 1\n    arr.sort()\n    for i in range(0, n):\n        cnt[arr[i]][i % 2] -= 1\n    for i in range(n):\n        if cnt[arr[i]][0] != 0 or cnt[arr[i]][1] != 0:\n            print('NO')\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ls = l.copy()\n    ls.sort()\n    dic = dict()\n    for i in range(n):\n        if ls[i] in dic:\n            if i % 2 == 1:\n                dic[ls[i]][0] += 1\n            else:\n                dic[ls[i]][1] += 1\n        elif i % 2 == 1:\n            dic[ls[i]] = [1, 0]\n        else:\n            dic[ls[i]] = [0, 1]\n\n    def f():\n        for i in range(n):\n            if i % 2 == 1:\n                if dic[l[i]][0] > 0:\n                    dic[l[i]][0] -= 1\n                else:\n                    return False\n            elif dic[l[i]][1] > 0:\n                dic[l[i]][1] -= 1\n            else:\n                return False\n        return True\n    if f():\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    inds = [0 for i in range(n)]\n    a = list(map(int, input().split()))\n    bad = False\n    asorted = sorted(a)\n    arr = {i: [0, 0] for i in asorted}\n    even = True\n    for i in asorted:\n        if even:\n            arr[i][0] += 1\n        else:\n            arr[i][1] += 1\n        even = not even\n    for i in range(n):\n        cur = a[i]\n        possible = True\n        if i % 2 == 0:\n            if arr[cur][0] > 0:\n                arr[cur][0] -= 1\n            else:\n                possible = False\n        elif arr[cur][1] > 0:\n            arr[cur][1] -= 1\n        else:\n            possible = False\n        if not possible:\n            print('NO')\n            bad = True\n            break\n    if bad:\n        continue\n    print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sorted(arr)\n    v = {}\n    for i in range(n):\n        if arr[i] in v:\n            v[arr[i]][i % 2] += 1\n        else:\n            v[arr[i]] = [0, 0]\n            v[arr[i]][i % 2] += 1\n    ans = 'YES'\n    flag = False\n    i = -1\n    while not flag:\n        i += 1\n        if v[s[i]][i % 2] != 0:\n            v[s[i]][i % 2] -= 1\n        else:\n            flag = True\n            ans = 'NO'\n        if i + 1 == n:\n            flag = True\n    print(ans)", "import sys\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        memo = {i: [0, 0] for i in list(set(arr))}\n        for (i, a) in enumerate(arr):\n            memo[a][i % 2] += 1\n        for (i, a) in enumerate(sorted(arr)):\n            memo[a][i % 2] -= 1\n        flag = True\n        for i in memo:\n            if memo[i].count(0) != 2:\n                flag = False\n        if flag:\n            print('YES')\n        else:\n            print('NO')\nmain()", "from collections import Counter\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    b = sorted(a)\n    odd = Counter()\n    even = Counter()\n    for (i, bi) in enumerate(b):\n        if i % 2 == 0:\n            even[bi] += 1\n        else:\n            odd[bi] += 1\n    valid = True\n    for (i, ai) in enumerate(a):\n        if i % 2 == 0:\n            if even[ai] == 0:\n                valid = False\n                break\n            even[ai] -= 1\n        else:\n            if odd[ai] == 0:\n                valid = False\n                break\n            odd[ai] -= 1\n    print('YES' if valid else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = []\n    for i in range(max(a) + 1):\n        arr.append([0, 0])\n    for i in range(n):\n        arr[a[i]][i % 2] += 1\n    b = a.copy()\n    b.sort()\n    ver = True\n    for i in range(n):\n        if arr[b[i]][i % 2] > 0:\n            arr[b[i]][i % 2] -= 1\n        else:\n            ver = False\n            break\n    if ver:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().strip().split(' ')\n    a = [int(x) for x in s]\n    num_of_odd_indexes = {}\n    for j in range(n):\n        if j % 2 == 1 and a[j] not in num_of_odd_indexes:\n            num_of_odd_indexes[a[j]] = 1\n        elif j % 2 == 1:\n            num_of_odd_indexes[a[j]] += 1\n        elif a[j] not in num_of_odd_indexes:\n            num_of_odd_indexes[a[j]] = 0\n    a.sort()\n    possible = True\n    current_index = 0\n    while current_index < n:\n        num_of_odd_indexes_here = 1\n        if current_index % 2 == 0:\n            num_of_odd_indexes_here = 0\n        while current_index + 1 < n and a[current_index] == a[current_index + 1]:\n            current_index += 1\n            if current_index % 2 == 1:\n                num_of_odd_indexes_here += 1\n        if num_of_odd_indexes_here != num_of_odd_indexes[a[current_index]]:\n            possible = False\n        current_index += 1\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "def func():\n    init = dict()\n    final = dict()\n    for (i, j) in enumerate(a):\n        if j in init:\n            init[j][i % 2] += 1\n        else:\n            init[j] = [0, 0]\n            init[j][i % 2] += 1\n    a.sort()\n    for (i, j) in enumerate(a):\n        if j in final:\n            final[j][i % 2] += 1\n        else:\n            final[j] = [0, 0]\n            final[j][i % 2] += 1\n    for i in init:\n        if init[i] != final[i]:\n            print('NO')\n            return\n    print('YES')\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    func()", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(A)\n    od = Counter()\n    ev = Counter()\n    for (i, b) in enumerate(B):\n        if i % 2:\n            od[b] += 1\n        else:\n            ev[b] += 1\n    for (i, a) in enumerate(A):\n        if i % 2:\n            if od[a] <= 0:\n                print('NO')\n                break\n            else:\n                od[a] -= 1\n        elif ev[a] <= 0:\n            print('NO')\n            break\n        else:\n            ev[a] -= 1\n    else:\n        print('YES')", "num_cases = int(input())\nfor _ in range(num_cases):\n    input()\n    seq = [int(x) for (i, x) in enumerate(input().split(' '))]\n    sum_before = {}\n    possible = True\n    for (i, val) in enumerate(seq):\n        cur_sum = sum_before.setdefault(val, [0, 0])\n        cur_sum[i % 2] += 1\n        sum_before[val] = cur_sum\n    seq_sorted = sorted(seq)\n    for (i, val) in enumerate(seq_sorted):\n        cur_sum = sum_before[val]\n        cur_sum[i % 2] -= 1\n        sum_before[val] = cur_sum\n    for (key, val) in sum_before.items():\n        if not (val[0] == 0 and val[1] == 0):\n            possible = False\n            break\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = list(map(int, input().split()))\n    arr = sorted(data)\n    h = defaultdict(int)\n    for i in range(n):\n        h[(arr[i] - 1) * 2 + i % 2] += 1\n    flg = True\n    for i in range(n):\n        temp = h[(data[i] - 1) * 2 + i % 2]\n        if temp > 0:\n            h[(data[i] - 1) * 2 + i % 2] -= 1\n        else:\n            flg = False\n            break\n    if flg:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\n\ndef readline():\n    return map(int, input().split())\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    a = sorted(((v, i) for (i, v) in enumerate(readline())))\n    inv = defaultdict(int)\n    for (i, (v, j)) in enumerate(a):\n        inv[v] += (i & 1) - (j & 1)\n    print('NO' if any(inv.values()) else 'YES')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    o = defaultdict(lambda : 0)\n    e = defaultdict(lambda : 0)\n    for i in range(n):\n        if i % 2 == 0:\n            e[a[i]] += 1\n        else:\n            o[a[i]] += 1\n    a.sort()\n    am = True\n    for i in range(n):\n        if i % 2 == 0:\n            e[a[i]] -= 1\n        else:\n            o[a[i]] -= 1\n    for i in range(n):\n        if e[a[i]] or o[a[i]]:\n            am = False\n            break\n    if am:\n        print('YES')\n    else:\n        print('NO')", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        n = read_one_int()\n        numbers = read_list_of_ints()\n        num_positions_1 = {}\n        for (i, num) in enumerate(numbers):\n            if num not in num_positions_1:\n                num_positions_1[num] = [0, 0]\n            num_positions_1[num][i % 2] += 1\n        numbers.sort()\n        num_positions_2 = {}\n        for (i, num) in enumerate(numbers):\n            if num not in num_positions_2:\n                num_positions_2[num] = [0, 0]\n            num_positions_2[num][i % 2] += 1\n        res = 'YES'\n        for num in num_positions_2.keys():\n            if num_positions_1[num] != num_positions_2[num]:\n                res = 'NO'\n                break\n        print(res)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sa = sorted(a)\n    p = {}\n    for i in range(n):\n        if sa[i] in p:\n            p[sa[i]][0] += i % 2\n            p[sa[i]][1] += 1 - i % 2\n        else:\n            p[sa[i]] = [i % 2, 1 - i % 2]\n    for i in range(n):\n        if a[i] != sa[i]:\n            if not p[a[i]][1 - i % 2]:\n                print('NO')\n                break\n        p[a[i]][1 - i % 2] -= 1\n    else:\n        print('YES')", "import sys\nfrom heapq import heappush, heappop\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ls = []\n    oddH = []\n    evenH = []\n    tmp = list(map(int, input().split()))\n    for i in range(len(tmp)):\n        if i & 1:\n            heappush(oddH, tmp[i])\n        else:\n            heappush(evenH, tmp[i])\n    oddH2 = []\n    evenH2 = []\n    ls2 = sorted(tmp)\n    for i in range(len(ls2)):\n        if i & 1:\n            heappush(oddH2, ls2[i])\n        else:\n            heappush(evenH2, ls2[i])\n    flag = True\n    while oddH:\n        if not flag:\n            break\n        a = heappop(oddH)\n        b = heappop(oddH2)\n        if a != b:\n            flag = False\n    while evenH:\n        if not flag:\n            break\n        a = heappop(evenH)\n        b = heappop(evenH2)\n        if a != b:\n            flag = False\n    print('YES' if flag else 'NO')", "import sys, os.path\nfrom typing import BinaryIO\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = li.copy()\n    l.sort()\n    di = dict()\n    for i in set(l):\n        di[i] = [0, 0]\n    for i in range(len(li)):\n        if i % 2 == 0:\n            di[l[i]][0] += 1\n        else:\n            di[l[i]][1] += 1\n    pos = 1\n    for i in range(len(li)):\n        if i % 2 == 0:\n            if di[li[i]][0] > 0:\n                di[li[i]][0] -= 1\n            else:\n                pos = 0\n                break\n        elif di[li[i]][1] > 0:\n            di[li[i]][1] -= 1\n        else:\n            pos = 0\n            break\n    if pos == 0:\n        print('NO')\n    else:\n        print('YES')", "T = int(input())\nfor TT in range(T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = a[:]\n    b.sort()\n    odd = {}\n    even = {}\n    for i in range(len(a)):\n        if i % 2 == 0:\n            if a[i] not in even:\n                even[a[i]] = 0\n            even[a[i]] += 1\n            if b[i] not in even:\n                even[b[i]] = 0\n            even[b[i]] -= 1\n        else:\n            if a[i] not in odd:\n                odd[a[i]] = 0\n            odd[a[i]] += 1\n            if b[i] not in odd:\n                odd[b[i]] = 0\n            odd[b[i]] -= 1\n    ans = True\n    for i in range(len(a)):\n        flag = (a[i] not in odd or odd[a[i]] == 0) and (a[i] not in even or even[a[i]] == 0)\n        if flag == False:\n            ans = False\n            break\n    print('YES' if ans else 'NO')", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = sys.stdin.readline\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ipn()\n    a = ipl()\n    b = sorted(a)\n    h = defaultdict(int)\n    bi = defaultdict(list)\n    ai = defaultdict(list)\n    for i in range(n):\n        if a[i] not in ai:\n            ai[a[i]] = [0, 0]\n        if b[i] not in bi:\n            bi[b[i]] = [0, 0]\n        if i % 2:\n            ai[a[i]][1] += 1\n        else:\n            ai[a[i]][0] += 1\n        if i % 2:\n            bi[b[i]][1] += 1\n        else:\n            bi[b[i]][0] += 1\n    for (k, v) in ai.items():\n        if v[0] != bi[k][0] or v[1] != bi[k][1]:\n            print('NO')\n            return\n    print('YES')\nt = ipn()\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(A)\n    hashmap_A = {}\n    hashmap_B = {}\n    for i in range(n):\n        if A[i] not in hashmap_A:\n            hashmap_A[A[i]] = [0, 0]\n        if B[i] not in hashmap_B:\n            hashmap_B[B[i]] = [0, 0]\n        if i % 2 == 0:\n            hashmap_A[A[i]][0] += 1\n            hashmap_B[B[i]][0] += 1\n        else:\n            hashmap_A[A[i]][1] += 1\n            hashmap_B[B[i]][1] += 1\n    flag = True\n    for key in hashmap_A.keys():\n        if hashmap_A[key] != hashmap_B[key]:\n            flag = False\n            break\n    print('YES' if flag else 'NO')", "from collections import *\nfor _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    ais = list(sorted(ai))\n    indo = defaultdict(list)\n    inde = defaultdict(list)\n    for i in range(n - 1, -1, -1):\n        if not i % 2:\n            inde[ais[i]].append(i)\n        else:\n            indo[ais[i]].append(i)\n    for i in range(n):\n        if i % 2:\n            if len(indo[ai[i]]) == 0:\n                print('NO')\n                break\n            else:\n                indo[ai[i]].pop()\n        elif len(inde[ai[i]]) == 0:\n            print('NO')\n            break\n        else:\n            inde[ai[i]].pop()\n    else:\n        print('YES')", "from bisect import bisect_left, bisect_right\n\ndef func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = sorted(l)\n    dic = {}\n    for (j, i) in enumerate(l):\n        if i not in dic:\n            dic[i] = [0, 0]\n        dic[i][j & 1] += 1\n    for i in dic:\n        j = bisect_left(c, i)\n        r = bisect_right(c, i)\n        co = r - j\n        if co & 1 and (j & 1 or r - 1 & 1):\n            odd = co // 2 + 1\n            even = co - odd\n        else:\n            odd = co // 2\n            even = co - odd\n        if dic[i][1] != odd or dic[i][0] != even:\n            return False\n    return True\nfor _ in range(int(input())):\n    if func():\n        print('YES')\n    else:\n        print('NO')", "def vec_add(el1, el2):\n    return [el1[0] + el2[0], el1[1] + el2[1]]\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            if i % 2 == 0:\n                d[a[i]] = vec_add(d[a[i]], [1, 0])\n            else:\n                d[a[i]] = vec_add(d[a[i]], [0, 1])\n        elif i % 2 == 0:\n            d[a[i]] = [1, 0]\n        else:\n            d[a[i]] = [0, 1]\n    db = {}\n    for i in range(len(b)):\n        if b[i] in db:\n            if i % 2 == 0:\n                db[b[i]] = vec_add(db[b[i]], [1, 0])\n            else:\n                db[b[i]] = vec_add(db[b[i]], [0, 1])\n        elif i % 2 == 0:\n            db[b[i]] = [1, 0]\n        else:\n            db[b[i]] = [0, 1]\n    if d == db:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    t1 = {}\n    t2 = {}\n    k = [int(x) for x in input().split()]\n    for i in range(n):\n        if k[i] not in t1:\n            t1[k[i]] = [0, 0]\n        t1[k[i]][i % 2] += 1\n    m = sorted(k)\n    for i in range(n):\n        if m[i] not in t2:\n            t2[m[i]] = [0, 0]\n        t2[m[i]][i % 2] += 1\n    if all((t1[i] == t2[i] for i in set(k))):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = sorted(l)\n    d = dict()\n    d1 = dict()\n    for i in range(n):\n        d.setdefault(l[i], [0, 0])\n        d1.setdefault(p[i], [0, 0])\n        d[l[i]][i % 2] += 1\n        d1[p[i]][i % 2] += 1\n    flag = True\n    for (q, v) in d.items():\n        if d1[q][0] != v[0] or d1[q][1] != v[1]:\n            flag = False\n            break\n    print(['NO', 'YES'][flag])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = [int(k) for k in input().split()]\n    c = sorted(w)\n    (a, b) = ({}, {})\n    for j in range(n):\n        if c[j] in a:\n            a[c[j]][j % 2] += 1\n        else:\n            a[c[j]] = [0, 0]\n            a[c[j]][j % 2] += 1\n        if w[j] in b:\n            b[w[j]][j % 2] += 1\n        else:\n            b[w[j]] = [0, 0]\n            b[w[j]][j % 2] += 1\n    for j in a.keys():\n        if a[j] != b[j]:\n            print('NO')\n            break\n    else:\n        print('YES')", "import bisect\n\ndef solve(t_id):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[i] for i in range(n)]\n    ok = True\n    ind1 = {}\n    ind2 = {}\n    b.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            if b[i] in ind2:\n                ind2[b[i]].append(i)\n            else:\n                ind2[b[i]] = [i]\n        elif b[i] in ind1:\n            ind1[b[i]].append(i)\n        else:\n            ind1[b[i]] = [i]\n    for i in range(n):\n        if i % 2 == 0 and a[i] in ind2 and (len(ind2[a[i]]) > 0):\n            ind2[a[i]].pop(0)\n        elif i % 2 == 1 and a[i] in ind1 and (len(ind1[a[i]]) > 0):\n            ind1[a[i]].pop(0)\n        else:\n            ok = False\n            break\n    print('YES' if ok else 'NO')\nt = 1\nt = int(input())\nfor i in range(t):\n    solve(i + 1)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    res = []\n    d = defaultdict(lambda : [0, 0])\n    for i in range(n):\n        if i % 2 == 0:\n            d[A[i]][0] += 1\n        else:\n            d[A[i]][1] += 1\n    A.sort()\n    d2 = defaultdict(lambda : [0, 0])\n    for i in range(n):\n        if i % 2 == 0:\n            d2[A[i]][0] += 1\n        else:\n            d2[A[i]][1] += 1\n    ok = True\n    for i in d.keys():\n        if d[i][0] != d2[i][0]:\n            ok = False\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate\nfrom math import gcd, floor, inf, log2, sqrt, log10\nfrom bisect import bisect_right, bisect_left\nfrom statistics import mode\n\ndef solve(array):\n    st = defaultdict(deque)\n    for (i, n) in enumerate(array):\n        if i % 2:\n            st[n].appendleft(1)\n        else:\n            st[n].append(0)\n    return st\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    sor = sorted(arr)\n    if solve(arr) == solve(sor):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict as dd\nfrom math import sqrt, log\nfrom bisect import bisect_left, bisect_right\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = a.copy()\n    s.sort()\n    d = dd(list)\n    d2 = dd(list)\n    for i in range(n):\n        d[a[i]].append(i)\n        d2[s[i]].append(i)\n    k1 = list(d.keys())\n    k2 = list(d2.keys())\n    k1.sort()\n    k2.sort()\n    flag = False\n    for i in k1:\n        arr = d[i]\n        e1 = o1 = 0\n        for num in arr:\n            if num & 1:\n                o1 += 1\n            else:\n                e1 += 1\n        arr = d2[i]\n        e2 = o2 = 0\n        for num in arr:\n            if num & 1:\n                o2 += 1\n            else:\n                e2 += 1\n        if e1 != e2 or o1 != o2:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')"]