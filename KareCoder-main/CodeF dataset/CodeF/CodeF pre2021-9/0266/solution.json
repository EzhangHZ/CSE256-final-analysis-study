["class Solution:\n\n    def solution(self, nums):\n        points = []\n        max_val = float('-inf')\n        for i in range(len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                points.append(i)\n        result = []\n        last = len(nums)\n        for point in points[::-1]:\n            result.extend(nums[point:last])\n            last = point\n        return result\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    sol = Solution()\n    print(str(sol.solution(nums))[1:-1].replace(', ', ' '))", "__version__ = '0.2'\n__date__ = '2021-03-06'\nimport sys\n\ndef solve(n, p):\n    answer = []\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[p[i]] = i\n    cur = n\n    for largest in range(n, 0, -1):\n        if pos[largest] >= cur:\n            continue\n        i = pos[largest]\n        answer.extend(p[i:cur])\n        cur = i\n    return answer\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(' '.join(map(str, solve(n, p))))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "for i in range(int(input())):\n    input()\n    baralho = list(map(int, input().split(' ')))\n    baralho_ordenado = len(baralho) * [0]\n    for (indice, carta) in enumerate(baralho):\n        baralho_ordenado[carta - 1] = indice\n    novo_baralho = []\n    while baralho:\n        indice_maior_carta = baralho_ordenado.pop()\n        if indice_maior_carta < len(baralho):\n            novo_baralho += baralho[indice_maior_carta:]\n            del baralho[indice_maior_carta:]\n    print(' '.join(map(str, novo_baralho)))", "N = int(input())\nfor _ in range(N):\n    out = []\n    n = int(input())\n    l = [int(e) for e in input().split()]\n    i = 0\n    for j in range(i, n):\n        if l[j] > l[i]:\n            out += l[i:j][::-1]\n            i = j\n    out += l[i:n][::-1]\n    print(' '.join([str(e) for e in out[::-1]]))", "def solve(p, n):\n    posicoes = [0] * n\n    for j in range(n):\n        posicoes[p[j] - 1] = j\n    K = [posicoes[n - 1]]\n    for j in range(n - 2, -1, -1):\n        if posicoes[j] < K[-1]:\n            K.append(posicoes[j])\n    result = [0] * n\n    right = n\n    pos = 0\n    for left in K:\n        for j in range(right - left):\n            result[pos] = p[left + j]\n            pos += 1\n        right = left\n    return result\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(' '.join(map(str, solve(p, n))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    k = list(map(int, input().split()))\n    lista_card = n * [0]\n    for c in range(n):\n        lista_card[k[c] - 1] = c\n    saida = []\n    lista = k\n    menor = n\n    for e in range(n - 1, -1, -1):\n        indice = lista_card[e]\n        if indice <= menor:\n            saida += k[indice:menor]\n            menor = indice\n    print(' '.join(map(str, saida)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    for (i, j) in enumerate(w):\n        d[j] = i\n    (a, x) = ([], n)\n    for i in range(n, 0, -1):\n        if d[i] < x:\n            a.extend(w[d[i]:x])\n            x = d[i]\n    print(' '.join(map(str, a)))", "for i in range(int(input())):\n    input()\n    baralho = list(map(int, input().split(' ')))\n    baralho_ordenado = len(baralho) * [0]\n    for (indice, carta) in enumerate(baralho):\n        baralho_ordenado[carta - 1] = indice\n    novo_baralho = []\n    while baralho:\n        indice_maior_carta = baralho_ordenado.pop()\n        if indice_maior_carta < len(baralho):\n            novo_baralho += baralho[indice_maior_carta:]\n            del baralho[indice_maior_carta:]\n    print(' '.join(map(str, novo_baralho)))", "entrada = int(input())\nfor i in range(entrada):\n    inpt = input()\n    size = [int(i) for i in input().split()]\n    ord = [0] * len(size)\n    for (i, card) in enumerate(size):\n        ord[card - 1] = i\n    sizeN = []\n    while size:\n        i_m_C = ord.pop()\n        if i_m_C < len(size):\n            sizeN += size[i_m_C:]\n            del size[i_m_C:]\n    print(' '.join(map(str, sizeN)))", "_t = int(input())\nfor t in range(_t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i\n    res = []\n    lastpos = n\n    for i in range(n, 0, -1):\n        p = pos[i]\n        if p >= lastpos:\n            continue\n        res += a[p:lastpos]\n        lastpos = p\n        if lastpos == 0:\n            break\n    print(' '.join(map(str, res)))", "import sys\n\ndef solve(cards):\n    segs = [[cards[0]]]\n    temp_max = cards[0]\n    for i in range(len(cards)):\n        if i == 0:\n            continue\n        if cards[i] <= temp_max:\n            segs[-1].append(cards[i])\n        else:\n            temp_max = cards[i]\n            segs.append([cards[i]])\n    return ' '.join([str(num) for seg in segs[::-1] for num in seg])\nt = int(sys.stdin.readline().strip())\nans = 0\nfor _ in range(t):\n    n = sys.stdin.readline().strip()\n    line = sys.stdin.readline().strip()\n    cards = list(map(int, line.split()))\n    print(solve(cards))", "def process(cards):\n    maxes = [[cards[0]]]\n    n = len(cards)\n    for i in range(1, n):\n        if cards[i] > maxes[-1][0]:\n            maxes.append([cards[i]])\n        else:\n            maxes[-1].append(cards[i])\n    answer = []\n    m = len(maxes)\n    for i in range(m):\n        x = maxes[m - 1 - i]\n        for y in x:\n            answer.append(y)\n    return answer\nT = int(input())\nfor I in range(T):\n    n = int(input())\n    cards = [int(x) for x in input().split()]\n    cards = process(cards)\n    cards = ' '.join(map(str, cards))\n    print(cards)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    p = [0] * (n + 1)\n    a = list(map(int, input().split()))\n    for i in range(n):\n        p[a[i]] = i\n    prev = n\n    res = []\n    for i in range(n, 0, -1):\n        if p[i] < prev:\n            for j in range(p[i], prev):\n                res.append(a[j])\n            prev = p[i]\n    print(' '.join(map(str, res)))\nfor i in range(int(input())):\n    solve()", "def int_fn():\n    return int(input())\n\ndef str_fn():\n    return input()\n\ndef int_list_fn():\n    return [int(val) for val in input().split(' ')]\n\ndef solve(n, cards):\n    hash_arr = [0] * (n + 1)\n    for (idx, card) in enumerate(cards):\n        hash_arr[card] = idx\n    i = n\n    output = []\n    limit = n\n    while i > 0:\n        start_from = hash_arr[i]\n        if start_from > limit:\n            i -= 1\n            continue\n        for j in range(start_from, limit):\n            output.append(str(cards[j]))\n        limit = start_from\n        i -= 1\n    print(' '.join(output))\n    return\nfor _ in range(int_fn()):\n    n = int_fn()\n    cards = int_list_fn()\n    solve(n, cards)\npass", "R1 = lambda : list(map(int, input().split()))\nR2 = lambda : int(input())\nt = R2()\nfor _ in range(t):\n    n = R2()\n    A = R1()\n    res = ''\n    maxis = []\n    m = 0\n    for i in range(n):\n        if A[i] > m:\n            m = A[i]\n            maxis.append(i)\n    l = n\n    for i in maxis[::-1]:\n        for e in A[i:l]:\n            res += str(e) + ' '\n        l = i\n    print(res)", "def carddeckV2():\n    nbCase = int(input())\n    res = []\n    for i in range(nbCase):\n        l_desk = int(input())\n        case = [int(j) for j in input().split(' ')]\n        M = case[0]\n        last = 0\n        p_prime = []\n        for i in range(len(case)):\n            if case[i] > M:\n                for j in reversed(range(last, i)):\n                    p_prime.append(case[j])\n                last = i\n                M = case[i]\n        for j in reversed(range(last, len(case))):\n            p_prime.append(case[j])\n        res.append(p_prime)\n    for r in res:\n        s = ''\n        for i in reversed(range(len(r))):\n            s += str(r[i])\n            s += ' '\n        print(s)\ncarddeckV2()", "import math\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    c = list(map(int, input().split()))\n    m = c[0]\n    k = [0]\n    for i in range(1, n):\n        if c[i] > m:\n            k.append(i)\n            m = c[i]\n    j = k[-1]\n    k.pop()\n    s = c[j:]\n    while len(k):\n        s += c[k[-1]:j]\n        j = k[-1]\n        k.pop()\n    print(' '.join(map(str, s)))", "import heapq\nfrom math import sqrt\nimport operator\nimport sys\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(deck_size, deck_cards):\n    new_deck = []\n    used = [0 for i in range(deck_size)]\n    last_used_index = deck_size - 1\n    prev_ind = deck_size\n    for i in range(deck_size - 1, -1, -1):\n        if deck_cards[i] == last_used_index + 1:\n            new_deck += deck_cards[i:prev_ind]\n            for j in range(i, prev_ind):\n                used[deck_cards[j] - 1] = 1\n            prev_ind = i\n            j = -1\n            while True:\n                cur_ind = j + last_used_index\n                if cur_ind < 0:\n                    last_used_index = -1\n                    break\n                if used[cur_ind]:\n                    j -= 1\n                    continue\n                else:\n                    last_used_index = cur_ind\n                    break\n    return ' '.join(map(str, new_deck))\n\ndef main():\n    cnt = read_one_int()\n    for _ in range(cnt):\n        deck_size = read_one_int()\n        deck_cards = read_list_of_ints()\n        res = check_seq(deck_size, deck_cards)\n        print(res)\nmain()", "quant_testes = int(input())\nfor c in range(quant_testes):\n    output = ''\n    tam = int(input())\n    seq = [int(n) for n in input().split()]\n    posicoes = [None] * tam\n    for i in range(len(seq)):\n        posicoes[-seq[i]] = i\n    for pos in posicoes:\n        if pos + 1 <= tam:\n            output += str(seq[pos])\n            output += ' '\n            for i in range(pos + 1, tam):\n                output += str(seq[i])\n                output += ' '\n                tam -= 1\n            tam -= 1\n    print(output)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = list()\n    Position = {i: None for i in range(1, N + 1)}\n    for (i, elt) in enumerate(A):\n        Position[elt] = i\n    todo = N\n    last = N\n    while todo >= 1:\n        i = Position[todo]\n        ans.extend(A[i:last])\n        last = i\n        while Position[todo] >= N - len(ans):\n            todo -= 1\n            if todo < 1:\n                break\n    print(' '.join(map(str, ans)))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    pi = list(map(int, input().split()))\n    r = []\n    t = [0] * len(pi)\n    t[0] = pi[0]\n    for i in range(1, len(pi)):\n        t[i] = max(t[i - 1], pi[i])\n    index = len(pi) - 1\n    lastIndex = len(pi)\n    while index >= 0:\n        while index >= 0 and pi[index] != t[index]:\n            index -= 1\n        if pi[index] == t[index]:\n            r += pi[index:lastIndex]\n            lastIndex = index\n        index -= 1\n    print(' '.join(map(str, r)))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        i = n - 1\n        j = n - 1\n        temp = sorted(arr)\n        vis = [False] * n\n        ans = []\n        while j >= 0:\n            t = j\n            tt = []\n            while t >= 0 and arr[t] != temp[i]:\n                vis[arr[t] - 1] = True\n                tt.append(arr[t])\n                t -= 1\n            vis[arr[t] - 1] = True\n            tt.append(arr[t])\n            tt = tt[::-1]\n            for k in tt:\n                ans.append(k)\n            j = t - 1\n            while i >= 0 and vis[i]:\n                i -= 1\n        get_print(' '.join(map(str, ans)))\nsolve()", "from collections import OrderedDict\nfor i in range(int(input())):\n    n = int(input())\n    inpList = list(map(int, input().split()))\n    check_list = OrderedDict.fromkeys(range(1, n + 1))\n    last = check_list.popitem()[0]\n    new = []\n    for i in reversed(range(n)):\n        if inpList[i] == last:\n            for j in inpList[i:n]:\n                if j in check_list:\n                    check_list.pop(j)\n                new.append(j)\n            n = i\n            if len(check_list) > 0:\n                last = check_list.popitem()[0]\n    new += inpList[i:n]\n    print(' '.join([str(i) for i in new]))", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    Z = []\n    B = dict()\n    for x in range(0, n + 1):\n        B[x] = x\n    i = n - 1\n    s = 0\n    while i >= 0:\n        s = s + 1\n        (prev, nm) = B.popitem()\n        if A[i] == nm:\n            Z.extend(A[i:i + s])\n            s = 0\n        else:\n            B[prev] = nm\n        try:\n            del B[A[i]]\n        except:\n            a = 1\n        i = i - 1\n    print(' '.join(list(map(str, Z))))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0] * (n + 1)\n    for (i, x) in enumerate(a):\n        p[x] = i\n    b = []\n    e = n\n    for x in range(n, 0, -1):\n        if p[x] < e:\n            b.extend(a[p[x]:e])\n            e = p[x]\n    print(*b)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    S = set()\n    mv = n\n    tmp = []\n    ans = []\n    for i in range(n - 1, -1, -1):\n        tmp.append(arr[i])\n        S.add(arr[i])\n        if arr[i] == mv:\n            while tmp:\n                ans.append(tmp.pop())\n            while mv in S:\n                mv -= 1\n    return ans\nfor _ in range(int(input())):\n    print(*solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[n - a[i]] = i\n    for i in ind:\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 10\nmod = 10 ** 9 + 7\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef solve():\n    n = II()\n    cards = LI()\n    cards_max = [0 for _ in range(n)]\n    cards_max[0] = cards[0]\n    for i in range(1, n):\n        cards_max[i] = max(cards_max[i - 1], cards[i])\n    res = collections.deque()\n    l = n - 1\n    r = n\n    while r > 0:\n        if cards_max[l] == cards[l]:\n            res.extend(cards[l:r])\n            l -= 1\n            r = l + 1\n        else:\n            l -= 1\n    res = [str(i) for i in res]\n    print(' '.join(list(res)))\n\ndef main():\n    n = II()\n    for i in range(n):\n        solve()\n    return 0\nmain()", "import sys\nn = int(input())\nfor _ in range(n):\n    nn = int(input())\n    cards = list(map(int, sys.stdin.readline().strip().split()))\n    max_ = cards[0]\n    li = [max_]\n    for i in cards[1:]:\n        max_ = max(max_, i)\n        li.append(max_)\n    ali = []\n    ans = []\n    pre = None\n    for (i, v) in enumerate(li[::-1]):\n        i = nn - i - 1\n        if not (pre == None or pre == v):\n            ans.extend(ali[::-1])\n            ali = []\n        ali.append(cards[i])\n        pre = v\n    ans.extend(ali[::-1])\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_ord = p.copy()\n    p_ord.sort()\n    k = n - 1\n    r = list()\n    for j in range(n - 1, -1, -1):\n        while p_ord[k] == 0:\n            k -= 1\n        maximo = p_ord[k]\n        p_ord[p[j] - 1] = 0\n        if p[j] == maximo:\n            r.extend(p[j:])\n            del p[j:]\n    print(' '.join(map(str, r)))", "from collections import deque\nn = int(input())\nfor _ in range(n):\n    c = int(input())\n    deck = list(map(int, input().split()))\n    ans = deque()\n    count = 0\n    greatest = deck[0]\n    for i in range(1, c):\n        if greatest < deck[i]:\n            ans.extendleft(reversed(deck[count:i]))\n            count = i\n            greatest = deck[i]\n    ans.extendleft(reversed(deck[count:c]))\n    print(*ans, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ind = [0]\n    v = l[0]\n    for i in range(1, n):\n        if l[i] > v:\n            v = l[i]\n            ind.append(i)\n    ind = ind[::-1]\n    en = n\n    ans = []\n    for i in ind:\n        for j in range(i, en):\n            ans.append(l[j])\n        en = i\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[n - a[i]] = i\n    for i in ind:\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    locmax = [0]\n    ans = []\n    for i in range(1, n):\n        if seq[i] > seq[locmax[-1]]:\n            locmax.append(i)\n    locmax = [n] + locmax[::-1]\n    for el in range(len(locmax) - 1):\n        print(*seq[locmax[el + 1]:locmax[el]], end=' ')\n    print()", "def PROBLEM():\n    for _ in range(int(input())):\n        n = int(input())\n        P = list(map(int, input().split()))\n        A = [0] * n\n        A[0] = P[0]\n        for i in range(1, n):\n            A[i] = max(P[i], A[i - 1])\n        j = n\n        T = []\n        for i in range(n - 1, -1, -1):\n            if P[i] == A[i]:\n                T.extend(P[i:j])\n                j = i\n        print(*T)\nPROBLEM()", "for s in [*open(0)][2::2]:\n    (*l,) = map(int, s.split())\n    a = []\n    j = len(l)\n    a = []\n    L = [0]\n    for i in range(1, j):\n        if l[L[-1]] < l[i]:\n            L += [i]\n        else:\n            L += [L[-1]]\n    while j:\n        i = L[j - 1]\n        a += l[i:j]\n        j = i\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max = 0\n    l = []\n    for (i, v) in enumerate(p):\n        if max < v:\n            l.append(i)\n            max = v\n    ans = []\n    f = n\n    for i in l[::-1]:\n        ans += p[i:f]\n        f = i\n    print(*ans, sep=' ')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    curMaxs = [0 for _ in range(n)]\n    for i in range(1, n):\n        curMaxs[i] = curMaxs[i - 1]\n        if p[i] > p[curMaxs[i]]:\n            curMaxs[i] = i\n    x = n - 1\n    res = []\n    while x >= 0:\n        res += p[curMaxs[x]:x + 1]\n        x = curMaxs[x] - 1\n    print(' '.join([str(x) for x in res]))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    new = []\n    arr_sort = [i for i in arr]\n    arr_sort.sort(reverse=True)\n    memo = {arr[i]: i for i in range(n)}\n    max_index = n\n    indices = []\n    for j in range(n):\n        i = memo[arr_sort[j]]\n        if i < max_index:\n            indices.append(i)\n            max_index = i\n    max_index = n - 1\n    for i in indices:\n        j = i\n        while j <= max_index:\n            new.append(arr[j])\n            j += 1\n        max_index = i - 1\n    ans = map(str, new)\n    print(' '.join(ans))", "def solution():\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    p_new = []\n    positions = [-1] * (n + 1)\n    for i in range(n):\n        positions[p[i]] = i\n    last_pos = n\n    for j in range(n, -1, -1):\n        if positions[j] >= last_pos:\n            continue\n        p_new += p[positions[j]:last_pos]\n        last_pos = positions[j]\n        if last_pos == 0:\n            break\n    print(*p_new)\nfor t in range(int(input())):\n    solution()", "def solution():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        deck = list(map(int, input().split()))\n        deck.reverse()\n        marked = (n + 1) * [False]\n        ans = []\n        i = 0\n        for x in range(n, 0, -1):\n            if not marked[x]:\n                old_i = i\n                while deck[i] != x:\n                    marked[deck[i]] = True\n                    i += 1\n                marked[x] = True\n                i += 1\n                ans.extend(reversed(deck[old_i:i]))\n        print(*ans)\nsolution()", "A = []\n\ndef test_case():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    mp = dict()\n    for i in range(n):\n        mp[a[i]] = i\n    (ans, last) = ([], n)\n    for i in range(n, 0, -1):\n        if mp[i] <= last:\n            ans.extend(a[mp[i]:last])\n            last = mp[i]\n    A.append(ans)\nfor _ in range(int(input())):\n    test_case()\nfor a in A:\n    print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dic = {}\n    result = []\n    for i in range(n):\n        dic[l[i]] = i\n    temp = n\n    for i in range(n, 0, -1):\n        if dic[i] < temp:\n            result.extend(l[dic[i]:temp])\n            temp = dic[i]\n    print(*result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[p[i]] = i\n    out = []\n    pv = n\n    for i in range(n, 0, -1):\n        if d[i] <= pv:\n            out += p[d[i]:pv]\n            pv = d[i]\n    print(*out)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    Z = []\n    B = dict()\n    for x in range(0, n + 1):\n        B[x] = x\n    i = n - 1\n    s = 0\n    while i >= 0:\n        s = s + 1\n        (prev, nm) = B.popitem()\n        if A[i] == nm:\n            Z.extend(A[i:i + s])\n            s = 0\n        else:\n            B[prev] = nm\n        try:\n            del B[A[i]]\n        except:\n            a = 1\n        i = i - 1\n    print(' '.join(list(map(str, Z))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    A = [0] * (n + 1)\n    i = 0\n    while i < n:\n        A[p[i]] = i\n        i += 1\n    i = n\n    Lj = n + 1\n    answer = ''\n    L = n\n    while i > 0:\n        j = A[i]\n        if j >= Lj:\n            i -= 1\n        else:\n            Lj = j\n            l = j\n            while j < L:\n                answer += str(p[j]) + ' '\n                j += 1\n            L = l\n            i -= 1\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = []\n    ind = []\n    mi = -1\n    for i in range(n):\n        if p[i] > mi:\n            ind.append(i)\n            mi = p[i]\n    ind.append(n)\n    n = len(ind)\n    for i in range(n - 1):\n        q += p[ind[n - 2 - i]:ind[n - 1 - i]]\n    print(' '.join([str(o) for o in q]))", "from collections import deque\n\ndef solve(arr):\n    sorted_arr = sorted([(val, idx) for (idx, val) in enumerate(arr)], reverse=True)\n    N = len(arr)\n    curr_idx = N - 1\n    output = []\n    i = 0\n    while curr_idx >= 0:\n        (val, new_idx) = sorted_arr[i]\n        if curr_idx < new_idx:\n            i += 1\n            continue\n        for j in range(new_idx, curr_idx + 1):\n            output.append(str(arr[j]))\n        i += 1\n        curr_idx = new_idx - 1\n    print(' '.join(output))\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(val) for val in input().split(' ')]\n    solve(arr)", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    index = [0] * n\n    temp = n\n    ans = []\n    for i in range(n):\n        index[li[i] - 1] = i\n    for ind in reversed(index):\n        if ind < temp:\n            ans += li[ind:temp]\n            temp = ind\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[n - a[i]] = i\n    for i in ind:\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "def cards(arr, l):\n    s = [0]\n    maxsof = arr[0]\n    for i in range(1, l):\n        if maxsof < arr[i]:\n            maxsof = arr[i]\n            s += [i]\n    s = s[::-1]\n    upto = l\n    t = []\n    for i in s:\n        for j in range(i, upto):\n            t += [arr[j]]\n        upto = i\n    print(*t)\nn = int(input())\nwhile n > 0:\n    l = int(input())\n    c = [int(i) for i in input().split()]\n    cards(c, l)\n    n -= 1", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (q, z, r) = ([0] * n, n, [])\n    for i in range(n):\n        q[n - a[i]] = i\n    for i in q:\n        if i < z:\n            r += a[i:z]\n            z = i\n    print(*r)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[l[i]] = i\n    ans = []\n    prev = n\n    for i in range(n, 0, -1):\n        if d[i] <= prev:\n            ans += l[d[i]:prev]\n            prev = d[i]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[l[i]] = i\n    ans = []\n    prev = n\n    for i in range(n, 0, -1):\n        if d[i] <= prev:\n            ans += l[d[i]:prev]\n            prev = d[i]\n    print(*ans)", "def solve():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    visited = [False] * (n + 1)\n    res = []\n    for i in range(n, 0, -1):\n        if not visited[i]:\n            tem = []\n            while p and p[-1] != i:\n                val = p.pop()\n                visited[val] = True\n                tem.append(val)\n            tem.append(p.pop())\n            res += tem[::-1]\n    print(*res)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[n - a[i]] = i\n    for i in ind:\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[l[i]] = i\n    ans = []\n    prev = n\n    for i in range(n, 0, -1):\n        if d[i] <= prev:\n            ans += l[d[i]:prev]\n            prev = d[i]\n    print(*ans)", "n = int(input())\nfor i in range(n):\n    resp = ''\n    tam = int(input())\n    posicoes = [0] * (tam + 1)\n    y = list(map(int, input().strip().split()))[:tam]\n    x = [0]\n    x.extend(y)\n    for i in range(1, tam + 1):\n        posicoes[x[i]] = i\n    a = tam\n    b = tam + 1\n    while a > 0:\n        if posicoes[a] >= b:\n            a -= 1\n        else:\n            for j in range(posicoes[a], b):\n                resp += str(x[j])\n                resp += ' '\n            b = posicoes[a]\n    print(resp.strip())", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    ind = [0] * n\n    for i in range(n):\n        ind[n - arr[i]] = i\n    last = n\n    res = []\n    for i in range(n):\n        if ind[i] <= last:\n            res += arr[ind[i]:last]\n            last = ind[i]\n    print(*res)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    stack = list(map(int, input().split()))\n    ans = deque()\n    flag = 0\n    greatest = stack[0]\n    for i in range(1, c):\n        if greatest < stack[i]:\n            ans.extendleft(reversed(stack[flag:i]))\n            flag = i\n            greatest = stack[i]\n    ans.extendleft(reversed(stack[flag:c]))\n    print(*ans, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[n - a[i]] = i\n    for i in ind:\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    ans = []\n    for i in range(n):\n        b[a[i]] = i\n    ck = n\n    for i in range(n, 0, -1):\n        if b[i] <= ck:\n            for j in range(b[i], ck):\n                ans.append(a[j])\n            ck = b[i]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[l[i]] = i\n    ans = []\n    prev = n\n    for i in range(n, 0, -1):\n        if d[i] <= prev:\n            ans += l[d[i]:prev]\n            prev = d[i]\n    print(*ans)", "def fmax(m, n):\n    p = [0 for i in range(n)]\n    for i in range(len(m)):\n        p[n - m[i]] = i\n    return p\nfor _ in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    p = fmax(m, n)\n    index = n\n    for i in p:\n        if index > i:\n            print(*m[i:index], end=' ', sep=' ')\n            index = i\n    print()", "def argmax(a):\n    m = 0\n    res = []\n    for j in range(len(a)):\n        if a[j] > m:\n            m = a[j]\n            res.append(j)\n    res.reverse()\n    return res\n\ndef find():\n    end = int(input())\n    mas = list(map(int, input().split()))\n    for j in argmax(mas):\n        for k in range(j, end):\n            print(mas[k], end=' ')\n        end = j\n    print()\nfor i in range(int(input())):\n    find()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = []\n    current = a[0]\n    start = 0\n    for i in range(1, n):\n        if a[i] > current:\n            sth = a[start:i][::-1]\n            start = i\n            current = a[i]\n            res += sth\n    sth = a[start:][::-1]\n    res += sth\n    for item in res[::-1]:\n        print(item, end=' ')\n    print('')", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (ind, ce, ans) = ([0] * n, n, [])\n    for i in range(n):\n        ind[a[i] - 1] = i\n    for i in reversed(ind):\n        if i < ce:\n            ans += a[i:ce]\n            ce = i\n    print(*ans)", "def solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * (n + 1)\n    top = n\n    pos = n\n    (l, r) = (0, n)\n    ans = []\n    for i in range(n - 1, -1, -1):\n        if A[i] == top:\n            for x in range(i, r):\n                ans.append(A[x])\n                B[A[x]] = 1\n            r = i\n            while B[top]:\n                top -= 1\n            continue\n    return ans\nfor i in range(int(input())):\n    print(*solve())", "import sys\nfrom collections import *\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline()\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = -1\n    c1 = []\n    for i in range(n):\n        if a[i] > c:\n            b.append(i)\n            c = a[i]\n    for i in range(len(b) - 1, -1, -1):\n        if len(c1) == 0:\n            c1.extend(a[b[i]:])\n        else:\n            c1.extend(a[b[i]:b[i + 1]])\n    print(*c1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    dec = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        dic[dec[i]] = i\n    covered_till = n\n    new_dec = []\n    for i in range(n, 0, -1):\n        if dic[i] < covered_till:\n            new_dec.extend(dec[dic[i]:covered_till])\n            covered_till = dic[i]\n    print(*new_dec)", "import itertools\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split(' ')))\n    cands = []\n    new_deck = []\n    for pi in p:\n        if not cands:\n            cands.append(pi)\n            ord_cands = pi\n        elif pi < cands[0]:\n            cands.append(pi)\n        else:\n            new_deck.append(cands)\n            cands = [pi]\n    new_deck.append(cands)\n    print(*itertools.chain.from_iterable(new_deck[::-1]))", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    (ans, t) = ([], n)\n    ind = [0] * n\n    for i in range(n):\n        ind[a[i] - 1] = i\n    for i in ind[::-1]:\n        if i < t:\n            ans += a[i:t]\n            t = i\n    print(*ans)", "t = int(input())\nfor j in range(t):\n    ans = dict()\n    k = int(input())\n    d = list(map(int, input().split()))\n    ma = d[0]\n    ans[0] = ma\n    for i in range(1, k):\n        if d[i] > ma:\n            ma = d[i]\n            ans[i] = ma\n    ans = list(reversed(ans.keys()))\n    b = []\n    end = len(ans)\n    for i in range(end):\n        p = ans[i]\n        b += d[p:k]\n        k = p\n    print(*b)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    st = []\n    prev = n\n    pos = {}\n    for i in range(n):\n        pos.setdefault(p[i], i)\n    for i in range(n, 0, -1):\n        if pos[i] <= prev:\n            st += p[pos[i]:prev]\n            prev = pos[i]\n    print(*st)", "import sys, io, os, math\nfrom math import ceil, log, gcd, sqrt\nfrom itertools import permutations\nimport operator\nmod = 1000000007\nmod1 = 998244353\n\ndef intinp():\n    return int(sys.stdin.readline())\n\ndef strinp():\n    return sys.stdin.readline()\n\ndef arrinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef mulinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef flush():\n    return stdout.flush()\n\ndef power_two(x):\n    return 1 << x\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef onescomp(num, d):\n    return (1 << d) - 1 ^ num\n\ndef solve():\n    n = intinp()\n    t = arrinp()\n    grp = [[t[0]]]\n    for i in range(1, n):\n        if grp[-1][0] > t[i]:\n            grp[-1].append(t[i])\n        else:\n            grp.append([t[i]])\n    grp.sort(reverse=True)\n    for i in grp:\n        print(*i, end=' ')\n    print()\n\ndef main():\n    tc = intinp()\n    while tc:\n        solve()\n        tc -= 1\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    index = [0] * n\n    temp = n\n    ans = []\n    for i in range(n):\n        index[li[i] - 1] = i\n    for ind in reversed(index):\n        if ind < temp:\n            ans += li[ind:temp]\n            temp = ind\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    ans = []\n    j = n\n    final = [0] * n\n    for i in range(n):\n        final[a[i] - 1] = i\n    for i in range(n - 1, -1, -1):\n        if final[i] < j:\n            ans += a[final[i]:j]\n            j = final[i]\n    print(*ans)", "from collections import Counter, deque\nfrom math import *\nmod = 998244353\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    val = [i + 1 for i in range(n)]\n    cur = val[-1]\n    ans = []\n    x = n - 1\n    z = n - 1\n    while x >= 0:\n        d = deque()\n        while l[x] != cur:\n            y = l.pop()\n            val[y - 1] = -1\n            d.appendleft(y)\n            x -= 1\n        y = l.pop()\n        d.appendleft(y)\n        ans += d\n        x -= 1\n        val[y - 1] = -1\n        while z >= 0 and val[z] == -1:\n            z -= 1\n        cur = val[z]\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def cardDeck(n, array):\n    array.reverse()\n    stack = []\n    for x in range(n):\n        if not stack:\n            stack.append(x)\n        else:\n            while stack and array[x] > array[stack[-1]]:\n                stack.pop()\n            stack.append(x)\n    ans = []\n    prev = 0\n    ans += array[stack[0]::-1]\n    for x in range(1, len(stack)):\n        ans += array[stack[x]:stack[x - 1]:-1]\n        prev = stack[x]\n    return ans\nt = int(input())\nfinal = []\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    final.append(cardDeck(n, l))\nfor _ in range(t):\n    for x in final[_]:\n        print(x, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ind = [0]\n    v = l[0]\n    for i in range(1, n):\n        if l[i] > v:\n            v = l[i]\n            ind.append(i)\n    ind = ind[::-1]\n    en = n\n    ans = []\n    for i in ind:\n        for j in range(i, en):\n            ans.append(l[j])\n        en = i\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    seen = set(list(range(1, n + 1)))\n    search = n\n    i = n - 1\n    ans = []\n    while i >= 0:\n        while search not in seen:\n            search -= 1\n        start = i\n        temp = []\n        while arr[i] != search:\n            temp.append(arr[i])\n            seen.remove(arr[i])\n            i -= 1\n        temp.append(arr[i])\n        seen.remove(arr[i])\n        ans += temp[::-1]\n        i -= 1\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    ah = [i for i in range(n)]\n    d = dict(zip(l, ah))\n    lan = []\n    d[0] = -1\n    t = n\n    a = n\n    while t > 0:\n        lan += l[d[t]:a]\n        a = d[t]\n        for i in range(t - 1, -1, -1):\n            if d[i] < a:\n                t = i\n                break\n    print(*lan)", "casos = int(input())\nfor a in range(casos):\n    uso = []\n    tamanho = int(input())\n    final = [0] * tamanho\n    sequencia = list(map(int, input().split()))\n    menor = len(sequencia)\n    maior = len(sequencia)\n    for b in range(tamanho):\n        final[sequencia[b] - 1] = b\n    for c in range(-1, -1 * len(final) - 1, -1):\n        if final[c] < menor:\n            menor = final[c]\n            for d in range(menor, maior, 1):\n                uso.append(sequencia[d])\n            maior = menor\n    print(*uso)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    arr = [int(k) for k in input().split()]\n    mapping = {}\n    for (i, num) in enumerate(arr):\n        mapping[num] = i\n    res = []\n    right = N\n    for i in range(N, 0, -1):\n        idx = mapping[i]\n        if idx >= right:\n            continue\n        res += arr[idx:right]\n        right = idx\n    for x in res:\n        (print(x, end=' '),)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    D = dict()\n    res = []\n    index = 0\n    A = [int(i) for i in input().split()]\n    for i in A:\n        D[i] = index\n        index += 1\n    x = n\n    j = n\n    while D[x] != 0:\n        if D[x] < j:\n            res += A[D[x]:j]\n            j = D[x]\n        x -= 1\n    res += A[D[x]:j]\n    print(*res)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ind = [0]\n    v = l[0]\n    for i in range(1, n):\n        if l[i] > v:\n            v = l[i]\n            ind.append(i)\n    ind = ind[::-1]\n    en = n\n    ans = []\n    for i in ind:\n        for j in range(i, en):\n            ans.append(l[j])\n        en = i\n    print(*ans)", "import operator\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxi = 0\n    new_a = []\n    local_max_points = []\n    for i in range(len(a)):\n        if a[i] > maxi:\n            maxi = a[i]\n            local_max_points.append(i)\n    last_point = len(a)\n    for point in local_max_points[::-1]:\n        new_a += a[point:last_point]\n        last_point = point\n    print(*new_a)", "import sys\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        p = read_int_list()\n        note = [0] * n\n        for (i, x) in enumerate(p):\n            note[~-x] = i\n        last = n\n        ans = []\n        for i in range(n - 1, -1, -1):\n            if note[i] < last:\n                for j in range(note[i], last):\n                    ans.append(p[j])\n                last = note[i]\n        print(*ans)\nMain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        taken = [0] * (len(p) + 1)\n        n_max = n\n        last_p = n\n        deck = []\n        for i in range(n):\n            if p[n - i - 1] == n_max:\n                for j in range(n - i - 1, last_p):\n                    deck.append(p[j])\n                last_p = n - i - 1\n                for j in range(n_max - 1, 0, -1):\n                    if taken[j] == 0:\n                        n_max = j\n                        break\n            taken[p[n - i - 1]] = 1\n        s = ''\n        for d in deck:\n            s += str(d) + ' '\n        print(s)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dic = dict()\n    ans = []\n    maxi = n\n    for i in range(n):\n        dic[arr[i]] = i\n    for j in range(n, 0, -1):\n        if dic[j] <= maxi:\n            ans += arr[dic[j]:maxi]\n            maxi = dic[j]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    a = []\n    p = n\n    pos = {}\n    for i in range(n):\n        pos.setdefault(lst[i], i)\n    for i in range(n, 0, -1):\n        if pos[i] <= p:\n            a += lst[pos[i]:p]\n            p = pos[i]\n    print(*a)", "def fun(ls, var):\n    dct = {}\n    for (i, val) in enumerate(ls):\n        dct[val] = i\n    st = sorted(ls)\n    last_pop_index = var\n    ans = []\n    for i in st[::-1]:\n        get_index = dct.get(i)\n        if get_index < last_pop_index:\n            for j in range(get_index, last_pop_index):\n                ans.append(ls[j])\n            last_pop_index = get_index\n    print(*ans)\nT = int(input())\nfor i in range(T):\n    v = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, v)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dic = {}\n    result = []\n    for i in range(n):\n        dic[l[i]] = i\n    temp = n\n    for i in range(n, 0, -1):\n        if dic[i] < temp:\n            result.extend(l[dic[i]:temp])\n            temp = dic[i]\n    print(*result)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, cards, nums) = (int(input()), [int(i) for i in input().split()], {})\n    (ans, last) = ([], n)\n    for i in range(n):\n        nums[cards[i]] = i\n    for i in range(n, 0, -1):\n        if nums[i] <= last:\n            ans += cards[nums[i]:last]\n            last = nums[i]\n    print(*ans)", "from collections import deque\nn = int(input())\nfor _ in range(n):\n    c = int(input())\n    d = list(map(int, input().split()))\n    answer = deque()\n    count = 0\n    greatest = d[0]\n    for i in range(1, c):\n        if greatest < d[i]:\n            answer.extendleft(reversed(d[count:i]))\n            count = i\n            greatest = d[i]\n    answer.extendleft(reversed(d[count:c]))\n    print(*answer, sep=' ')", "from collections import deque\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        L = [int(p) for p in input().split()]\n        temp = []\n        best = -1\n        for e in L:\n            if e > best:\n                best = e\n            temp.append(best)\n        res = deque()\n        for i in range(n - 1, -1, -1):\n            res.appendleft(L[i])\n            if L[i] == temp[i]:\n                print(*res, end=' ')\n                res = deque()\n        print()\n        t -= 1\nmain()", "casos = int(input())\nfor a in range(casos):\n    uso = []\n    tamanho = int(input())\n    final = [0] * tamanho\n    sequencia = list(map(int, input().split()))\n    menor = len(sequencia)\n    maior = len(sequencia)\n    for b in range(tamanho):\n        final[sequencia[b] - 1] = b\n    for c in range(-1, -1 * len(final) - 1, -1):\n        if final[c] < menor:\n            menor = final[c]\n            for d in range(menor, maior, 1):\n                uso.append(sequencia[d])\n            maior = menor\n    print(*uso)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    index = []\n    maxa = 0\n    for i in range(len(lis)):\n        if lis[i] > maxa:\n            index.append(i)\n            maxa = lis[i]\n    index = index[::-1]\n    l = lis[index[0]:]\n    for i in range(1, len(index)):\n        l.extend(lis[index[i]:index[i - 1]])\n    print(*l)"]