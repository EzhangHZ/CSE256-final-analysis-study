["import sys\nfrom itertools import accumulate\nsys.setrecursionlimit(30000)\n(n, h, L, R) = map(int, input().split())\narr = list(map(int, input().split()))\ns = [x % h for x in accumulate(arr)]\nd = dict()\ndp = [0] * (n + 1)\ndp[0] = int(L <= s[0] % h <= R)\ndp[1] = int(L <= (s[0] - 1) % h <= R)\nfor i in range(1, n):\n    nxt = dp[:]\n    nxt[0] = dp[0] + (L <= s[i] % h <= R)\n    for j in range(1, i + 1):\n        nxt[j] = max(dp[j], dp[j - 1]) + (L <= (s[i] - j) % h <= R)\n    nxt[i + 1] = dp[i] + (L <= (s[i] - i - 1) % h <= R)\n    dp = nxt\nprint(max(dp))", "from bisect import bisect_left as bl, bisect_right as br, insort\nimport sys\nimport heapq\nfrom math import *\nfrom collections import defaultdict as dd, deque\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef mdata():\n    return map(int, data().split())\n(n, h, l, r) = mdata()\nA = list(mdata())\ndp = [0] * h\nndp = [0] * h\nk = 0\nfor i in range(n):\n    k = (k + A[i]) % h\n    for j in range(min(i + 2, h)):\n        t = k - j\n        if t < 0:\n            t += h\n        m = max(dp[j], dp[j - 1])\n        if l <= t <= r:\n            m += 1\n        ndp[j] = m\n    dp = ndp.copy()\nprint(max(dp))", "from bisect import bisect_left as bl, bisect_right as br, insort\nimport sys\nimport heapq\nfrom math import *\nfrom collections import defaultdict as dd, deque\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef mdata():\n    return map(int, data().split())\n(n, h, l, r) = mdata()\nA = list(mdata())\ndp = [0] * h\nndp = [0] * h\nk = 0\nfor i in range(n):\n    k = (k + A[i]) % h\n    for j in range(min(i + 2, h)):\n        t = k - j\n        if t < 0:\n            t += h\n        m = max(dp[j], dp[j - 1])\n        if l <= t <= r:\n            m += 1\n        ndp[j] = m\n    dp = ndp.copy()\nprint(max(dp))", "(n, h, l, r) = map(int, input().split())\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nt = 0\nfor (i, a) in enumerate(map(int, input().split()), 1):\n    t += a\n    dp[i][0] = dp[i - 1][0] + (l <= t % h <= r)\n    for j in range(1, i + 1):\n        t1 = t - j\n        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + (l <= t1 % h <= r)\nprint(max(dp[n]))", "(n, h, l, r) = map(int, input().split())\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nt = 0\nfor (i, a) in enumerate(map(int, input().split()), 1):\n    t += a\n    dp[i][0] = dp[i - 1][0] + (l <= t % h <= r)\n    for j in range(1, i + 1):\n        t1 = t - j\n        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + (l <= t1 % h <= r)\nprint(max(dp[n]))"]