["import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 10 ** 16\nmd = 10 ** 9 + 7\n\ndef solve():\n    (n, k) = map(int, sys.stdin.readline().split())\n    l = LI()\n    count = n\n    x = l[0]\n    d = {}\n    for i in range(n - 1):\n        d[l[i]] = l[i + 1]\n    d[l[n - 1]] = None\n    p = sorted(l)\n    for i in range(n - 1):\n        if p[i + 1] == d[p[i]]:\n            count += -1\n    if k >= count:\n        print('Yes')\n    else:\n        print('No')\nfor testcase in range(II()):\n    solve()", "def sol(A, k):\n    B = sorted(A)\n    dic = {}\n    for i in range(len(A) - 1):\n        dic[A[i]] = A[i + 1]\n    count = 1\n    for i in range(len(B) - 1):\n        if not (B[i] in dic and dic[B[i]] == B[i + 1]):\n            count += 1\n    return 'Yes' if count <= k else 'No'\nx = int(input())\nfor _ in range(x):\n    B = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    print(sol(A, B[1]))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ref = list(arr)\n    ref.sort()\n    prev = {}\n    for i in range(1, n):\n        prev[ref[i]] = ref[i - 1]\n    cnt = 1\n    for i in range(1, n):\n        if arr[i] not in prev:\n            cnt += 1\n            continue\n        if arr[i - 1] == prev[arr[i]]:\n            continue\n        cnt += 1\n    return 'Yes' if cnt <= k else 'No'\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = sorted(arr)\n    positions = {}\n    count = 1\n    for i in range(n):\n        positions[brr[i]] = i\n    for i in range(n - 1):\n        if positions[arr[i]] + 1 != positions[arr[i + 1]]:\n            count += 1\n    if k >= count:\n        print('Yes')\n    else:\n        print('No')\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = sorted(A)\n    D = dict()\n    for i in range(n):\n        D[B[i]] = i\n    for i in range(n):\n        A[i] = D[A[i]]\n    cnt = 1\n    for i in range(1, n):\n        if A[i - 1] + 1 != A[i]:\n            cnt += 1\n    print('Yes' if cnt <= k else 'No')\nfor i in range(int(input())):\n    solve()", "def moamen2(sArray, array, k):\n    nextV = {}\n    for i in range(len(array) - 1):\n        nextV[sArray[i]] = sArray[i + 1]\n    answer = 1\n    nextV[sArray[len(array) - 1]] = None\n    for i in range(len(array)):\n        if i == 0:\n            pass\n        elif nextV[array[i - 1]] != array[i]:\n            answer += 1\n    if answer <= k:\n        print('Yes')\n    else:\n        print('No')\nn = int(input())\nfor i in range(n):\n    (nElements, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    sArray = array[:]\n    sArray.sort()\n    moamen2(sArray, array, k)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = {a[i]: a[i + 1] for i in range(n - 1)}\n    b[a[n - 1]] = 10 ** 6\n    c = sorted(a)\n    g = 1\n    for i in range(n - 1):\n        if b[c[i]] != c[i + 1]:\n            g += 1\n    if g > k:\n        print('No')\n    else:\n        print('Yes')", "def solve():\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr2 = sorted(arr.copy())\n    gdzie = dict()\n    for i in range(n):\n        gdzie[arr2[i]] = i\n    ile = 1\n    for i in range(1, n):\n        if gdzie[arr[i]] - gdzie[arr[i - 1]] == 1:\n            pass\n        else:\n            ile += 1\n    if ile <= k:\n        print('Yes')\n    else:\n        print('No')\n\ndef main():\n    for i in range(int(input())):\n        solve()\nmain()", "for ii in range(int(input())):\n    (n, k) = map(int, input().split())\n    ll = list(map(int, input().split()))\n    ll_sorted = sorted(ll)\n    d = {}\n    for i in range(len(ll_sorted)):\n        d[ll_sorted[i]] = i\n    ans = n\n    for i in range(n - 1):\n        if d[ll[i]] == d[ll[i + 1]] - 1:\n            ans -= 1\n    if k >= ans:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n < k:\n        print('No')\n    elif n == k:\n        print('Yes')\n    else:\n        b = a[:]\n        b.sort()\n        d = {}\n        for i in range(n - 1):\n            d[b[i]] = b[i + 1]\n        cnt = 1\n        for i in range(n - 1):\n            if a[i] not in d:\n                cnt += 1\n            elif d[a[i]] != a[i + 1]:\n                cnt += 1\n        if cnt > k:\n            print('No')\n        else:\n            print('Yes')", "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10 ** 7)\n    from collections import Counter, deque\n    from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left, bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, radians, ceil, pi, factorial, gcd, atan, degrees, sqrt, cos, sin\n    from operator import itemgetter\n\n    def I():\n        return int(input())\n\n    def MI():\n        return map(int, input().split())\n\n    def LI():\n        return list(map(int, input().split()))\n\n    def SI():\n        return input().rstrip()\n\n    def printns(x):\n        print('\\n'.join(x))\n\n    def printni(x):\n        print('\\n'.join(list(map(str, x))))\n    inf = 10 ** 17\n    mod = 10 ** 9 + 7\n    mod2 = 998244353\n    t = I()\n    for i in range(t):\n        (n, k) = MI()\n        lis = LI()\n        nlis = sorted(lis)\n        dic = {}\n        for i in range(n):\n            dic[nlis[i]] = i\n        comp = []\n        for i in range(n):\n            comp.append(dic[lis[i]])\n        spl = 1\n        for i in range(n - 1):\n            if comp[i] + 1 != comp[i + 1]:\n                spl += 1\n        if spl > k:\n            print('No')\n        else:\n            print('Yes')\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k > n:\n        print('No')\n    elif k == n:\n        print('Yes')\n    else:\n        b = arr[:]\n        b.sort()\n        d = {}\n        for i in range(len(b) - 1):\n            d[b[i]] = b[i + 1]\n        count = 1\n        for i in range(n - 1):\n            if arr[i] not in d:\n                count += 1\n            elif d[arr[i]] != arr[i + 1]:\n                count += 1\n        if count <= k:\n            print('Yes')\n        else:\n            print('No')", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    (n, k) = M()\n    a = L()\n    b = sorted(a)\n    d = dt(int)\n    c = 0\n    for i in range(n):\n        d[a[i]] = i\n    for i in range(1, n):\n        if d[b[i]] - d[b[i - 1]] != 1:\n            c = c + 1\n    if c < k:\n        print('Yes')\n    else:\n        print('No')\ntt = 1\ntt = I()\nfor _ in range(tt):\n    solve()", "t = int(input())\nfor _ in range(t):\n    [n, k] = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    s = sorted([i for i in range(n)], key=lambda x: a[x])\n    ans = 1\n    for i in range(1, n):\n        if s[i - 1] + 1 == s[i]:\n            continue\n        else:\n            ans += 1\n    if ans > k:\n        print('No')\n    else:\n        print('Yes')", "def solve():\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    b = [a for a in arr]\n    b.sort()\n    b = dict(zip(b, range(n)))\n    non_decreasing_subarrays = 1\n    for i in range(1, n):\n        if b.get(arr[i]) == 1 + b.get(arr[i - 1]):\n            continue\n        non_decreasing_subarrays += 1\n    if non_decreasing_subarrays <= k:\n        return 'Yes'\n    return 'No'\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == k:\n        print('Yes')\n        continue\n    if n == 2 and k == 1:\n        if a[0] > a[1]:\n            print('No')\n        else:\n            print('Yes')\n        continue\n    if k == 1:\n        print('Yes') if a == sorted(a) else print('No')\n        continue\n    if k >= 2:\n        b = sorted(a)\n        d = {}\n        for i in range(n - 1):\n            d[b[i]] = b[i + 1]\n        d[b[n - 1]] = 10 ** 10\n        count = 0\n        for i in range(n - 1):\n            if d[a[i]] != a[i + 1]:\n                count += 1\n        print('No') if count + 1 > k else print('Yes')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    sorted_l = sorted(l)\n    index = sorted(range(len(l)), key=l.__getitem__)\n    num_group = n\n    for i in range(n - 1):\n        if index[i] + 1 == index[i + 1]:\n            num_group -= 1\n    if num_group <= k:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a1 = sorted(a)\n    mp = dict()\n    for i in range(n - 1):\n        mp[a1[i + 1]] = a1[i]\n    mp[a1[0]] = 1000000000.0 + 2\n    cur = 1\n    for i in range(1, n):\n        if mp[a[i]] != a[i - 1]:\n            cur += 1\n    if cur <= k:\n        print('Yes')\n    else:\n        print('No')", "from collections import defaultdict\n\ndef findAns(arr, n, k):\n    d = defaultdict(lambda : -1)\n    lst = list(sorted(arr))\n    for i in range(len(lst)):\n        d[lst[i]] = i\n    res = 1\n    for i in range(1, len(arr)):\n        if d[arr[i]] - d[arr[i - 1]] != 1:\n            res += 1\n    if res > k:\n        return 'No'\n    return 'Yes'\nT = int(input())\nfor _ in range(T):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(findAns(arr, n, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n != k:\n        l = sorted(list(a))\n        d = {}\n        for i in range(n):\n            d[l[i]] = i\n        b = 0\n        for i in range(n - 1):\n            if d[a[i]] != d[a[i + 1]] - 1:\n                b += 1\n        b += 1\n        print('Yes' if b <= k else 'No')\n    else:\n        print('Yes')", "def solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = sorted(A)\n    D = dict()\n    for i in range(n):\n        D[B[i]] = i\n    for i in range(n):\n        A[i] = D[A[i]]\n    cnt = 0\n    pos = 0\n    for i in range(n):\n        if A[i] - A[pos] != i - pos:\n            cnt += 1\n            pos = i\n        elif i != n - 1 and A[i] > A[i + 1]:\n            cnt += 1\n            pos = i + 1\n    cnt += 1\n    print('Yes' if cnt <= k else 'No')\nfor i in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    pos = {}\n    for i in range(n):\n        pos[b[i]] = i\n    count = 1\n    for i in range(1, n):\n        if pos[a[i - 1]] + 1 == pos[a[i]]:\n            continue\n        else:\n            count += 1\n    if count <= k:\n        print('Yes')\n    else:\n        print('No')", "import math\nimport sys\nimport queue\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    f = {b[i]: b[i + 1] for i in range(n - 1)}\n    r = 1\n    for i in range(1, n):\n        if a[i - 1] not in f:\n            r += 1\n        elif a[i] != f[a[i - 1]]:\n            r += 1\n    if r <= k:\n        print('Yes')\n    else:\n        print('No')\nmulti_test = 1\nif multi_test:\n    t = int(input())\n    for _ in range(t):\n        solve()\nelse:\n    solve()", "ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    u = list(map(int, input().split()))\n    s = sorted(u)\n    ind = dict()\n    for i in range(n):\n        ind[s[i]] = i\n    cnt = 0\n    for i in range(1, n):\n        if ind[u[i]] != ind[u[i - 1]] + 1:\n            cnt += 1\n    cnt += 1\n    if cnt > k:\n        ans.append('No')\n    else:\n        ans.append('Yes')\nprint('\\n'.join(ans))", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dick = {}\n    c = 0\n    for ele in arr:\n        dick[ele] = c\n        c += 1\n    count = 1\n    sortarr = sorted(dick)\n    for x in range(n - 1):\n        if dick[sortarr[x]] + 1 != dick[sortarr[x + 1]]:\n            count += 1\n    if count > k:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sorted_arr = sorted(arr)\n    pos = {}\n    for (i, x) in enumerate(sorted_arr):\n        pos[x] = i\n    cnt = 1\n    for i in range(1, n):\n        if pos[arr[i]] != pos[arr[i - 1]] + 1:\n            cnt += 1\n    if cnt <= k:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    final = {}\n    for (i, e) in enumerate(sorted(a)):\n        final[e] = i\n    cut = 0\n    for i in range(len(a) - 1):\n        if final[a[i + 1]] - final[a[i]] != 1:\n            cut += 1\n    print('Yes' if cut + 1 <= k else 'No')", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = enumerate([int(x) for x in input().split()])\n    indices = [i[0] for i in sorted(a, key=lambda x: x[1])]\n    recc = 0\n    for i in range(n - 1):\n        recc += indices[i + 1] != indices[i] + 1\n    print('Yes' if recc + 1 <= k else 'No')", "for t in range(int(input())):\n    (n, k) = [int(k) for k in input().split()]\n    a = [int(k) for k in input().split()]\n    if n == 1:\n        print('Yes')\n        continue\n    sa = sorted(a)\n    dic = {}\n    for i in range(n):\n        dic[sa[i]] = i\n    i = 0\n    k -= 1\n    while k >= 0 and i < n - 1:\n        if dic[a[i + 1]] != dic[a[i]] + 1:\n            k -= 1\n        i += 1\n    if k >= 0 and i == n - 1:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    a = map(int, input().split())\n    a = list(a)\n    mp = {}\n    for i in range(n):\n        mp[a[i]] = i\n    ans = 1\n    a.sort()\n    for i in range(1, n):\n        if mp[a[i]] != mp[a[i - 1]] + 1:\n            ans = ans + 1\n    if ans <= k:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = {}\n    for i in range(n):\n        d[b[i]] = i\n    ans = 0\n    for i in range(n):\n        if i == n - 1 or d[a[i]] + 1 != d[a[i + 1]]:\n            ans += 1\n    if ans <= k:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    dict = {}\n    std = sorted(arr)\n    for i in range(n):\n        dict[std[i]] = i\n    c = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            c += 1\n        else:\n            a = dict[arr[i]]\n            b = dict[arr[i + 1]]\n            if b - a != 1:\n                c += 1\n    c += 1\n    if c <= k:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    a = [i[0] for i in sorted(enumerate(lst), key=lambda x: x[1])]\n    cnt = 0\n    for i in range(n - 1):\n        if a[i] != a[i + 1] - 1:\n            cnt += 1\n    if cnt + 1 > k:\n        print('No')\n    else:\n        print('Yes')", "for __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ind = {el: i for (i, el) in enumerate(sorted(a))}\n    a = [ind[el] for el in a]\n    res = 1\n    for i in range(1, n):\n        if a[i - 1] != a[i] - 1:\n            res += 1\n    if res > k:\n        print('No')\n    else:\n        print('Yes')", "from collections import defaultdict\nINF = 10 ** 9 + 2\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [-INF] + sorted(a)\n    lookup = defaultdict(list)\n    for i in range(1, n + 1):\n        lookup[b[i]] = b[i - 1]\n    cnt = 0\n    cur = -INF - 5\n    for (i, num) in enumerate(a):\n        if cur != lookup[num]:\n            cnt += 1\n        cur = num\n    if cnt > k:\n        print('No')\n    else:\n        print('Yes')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[i] = l[i]\n    d1 = dict(sorted(d.items(), key=lambda item: item[1]))\n    a = 1\n    l2 = list(d1.keys())\n    for i in range(1, n):\n        if l2[i - 1] + 1 != l2[i]:\n            a += 1\n    if a <= k:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = sorted(arr)\n    d = {}\n    for i in range(len(temp)):\n        d[temp[i]] = i\n    cnt = 1\n    for i in range(0, n - 1):\n        if d[arr[i + 1]] - d[arr[i]] != 1:\n            cnt += 1\n    if cnt <= k:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sorted(a)\n    d = {}\n    ind = 0\n    for i in range(len(s) - 1):\n        d[s[i]] = s[i + 1]\n    d[s[-1]] = None\n    pair = 0\n    for i in range(len(a) - 1):\n        if d[a[i]] == a[i + 1]:\n            continue\n        else:\n            pair = pair + 1\n    pair = pair + 1\n    if pair > k:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n_k = input().split()\n    n = int(n_k[0])\n    k = int(n_k[1])\n    str_n = input().split()\n    str_n = [int(str_n_i) for str_n_i in str_n]\n    n_s = sorted(str_n)\n    dicto = {}\n    for i in range(n):\n        dicto[n_s[i]] = i\n    ans = 0\n    if n == 1:\n        print('Yes')\n    else:\n        for j in range(n - 1):\n            if str_n[j] > str_n[j + 1]:\n                ans += 1\n            elif dicto[str_n[j]] + 1 != dicto[str_n[j + 1]]:\n                ans += 1\n        if ans + 1 > k:\n            print('No')\n        else:\n            print('Yes')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    nextNum = {}\n    aSorted = sorted(a)\n    for i in range(n - 1):\n        nextNum[aSorted[i]] = aSorted[i + 1]\n    nextNum[aSorted[n - 1]] = aSorted[n - 1] + 1\n    count = 1\n    for i in range(n - 1):\n        if nextNum[a[i]] != a[i + 1]:\n            count += 1\n    if count <= k:\n        print('Yes')\n    else:\n        print('No')"]