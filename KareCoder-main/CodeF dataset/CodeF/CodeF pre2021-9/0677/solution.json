["import math\ncasos = int(input())\nfor t in range(casos):\n    n = int(input())\n    angulo = math.pi / (4 * n)\n    print(1 / math.sin(angulo) / 2)", "import math\ncasos = int(input())\nfor t in range(casos):\n    lados = 2 * int(input())\n    angulo = math.pi / (2 * lados)\n    print(1 / math.sin(angulo) / 2)", "import math\ninp = int(input())\nseq = []\nfor i in range(inp, 0, -1):\n    n = int(input())\n    seq.append(0.5 / math.sin(math.asin(1) / (n * 2)))\nfor i in seq:\n    print(i)", "import math\n\ndef main():\n    n = int(input())\n    tht = math.pi / (2 * n)\n    ans = math.cos(tht / 2) / math.sin(tht)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    main()", "import math\npi = 3.14159265359\nt = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    print(math.cos(pi / (4 * n)) / math.sin(pi / (2 * n)))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * n))))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * n))))", "import math\npi = 3.141592653589793\nt = int(input())\ni = 0\nwhile t > 0:\n    n = int(input())\n    n *= 2\n    theta = n // 4 * (180 / n) * (pi / 180)\n    x = 0.5 / math.cos((90 - 180 / n) * (pi / 180))\n    print((x * math.cos(theta) + x * math.sin(theta)) * 2 ** 0.5, '\\n')\n    t -= 1\n    i += 1", "import math\npi = 3.141592653589793\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    n *= 2\n    theta = n // 4 * (180 / n) * (pi / 180)\n    x = 0.5 / math.cos((90 - 180 / n) * (pi / 180))\n    print((x * math.cos(theta) + x * math.sin(theta)) * 2 ** 0.5, '\\n')\n    t -= 1", "import math\nt = int(input())\nans_arr = []\nfor i in range(t):\n    n = int(input())\n    value = 0.5 / math.sin(math.asin(1) / (n * 2))\n    ans_arr.append(value)\nfor j in ans_arr:\n    print(j)", "import math\nlister = int(input())\nwhile lister > 0:\n    n = int(input())\n    lister -= 1\n    temp = math.cos(math.pi / (4 * n))\n    print(0.5 * temp / math.sin(math.pi / (2 * n)) * 2)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / (2 * sin(pi / (4 * n))))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    r = (n - 1) / (2 * n)\n    r0 = 1 - 2 * r\n    h = 1 / math.cos(r * math.pi)\n    m = 0\n    rec = r0\n    while rec < 0.5:\n        tem = h * (math.sin(rec * math.pi) + math.cos(rec * math.pi))\n        m = max(m, tem)\n        rec += r0\n    m = m / math.sqrt(2)\n    print(m)", "import math\ntest = int(input())\nfor k in range(test):\n    n = int(input())\n    if n % 2 == 0:\n        sum = 0\n        for x in range(1, n):\n            sum += math.sin(x * math.pi / n)\n        print(sum)\n    else:\n        a = n // 4\n        horizontal_sum = 1\n        for i in range(1, a + 1):\n            horizontal_sum += 2 * math.cos(i * math.pi / n)\n        j = a + 1\n        vertical_sum = 0\n        while 2 * j < n:\n            vertical_sum += math.sin(j * math.pi / n)\n            j += 1\n        vertical_sum *= 2\n        print(round((vertical_sum + horizontal_sum) / math.sqrt(2), 9))", "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(3001)\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d2 = 1 / math.sin(math.pi / (2 * n))\n    d3 = d2 / 2\n    angel = math.pi / n\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        na = angel * i\n        b1 = d3 * (math.sin(na) + math.cos(na)) * math.sqrt(2)\n        ans = max(ans, b1)\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = float(input())\n    m = n\n    n *= 2\n    jiao = (n - 2) * 180 * 1.0 / n\n    soujiao = jiao\n    jiao = m // 2 * (180 - soujiao) * 1.0 / 2\n    hu = (45 - jiao) / 180 * math.pi\n    side = 0\n    tmp = soujiao - 90\n    for i in range(0, int(m / 2)):\n        tmphu = tmp * 1.0 / 180 * math.pi\n        side += math.sin(tmphu)\n        tmp -= 180 - soujiao\n    side = side * 2 + 1\n    ans = side * math.cos(hu)\n    print(ans)", "import math\n\ndef sqare_size(n):\n    return math.sin((2 * n - 1) / (4 * n) * math.pi) / math.sin(math.pi / (2 * n))\nt = int(input())\nfor _ in range(t):\n    print(sqare_size(int(input())))", "from math import sin, tan, cos, pi\nfor t in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(1 / tan(pi / (2 * n)))\n    else:\n        print(1 / sin(pi / (2 * n)) * cos(pi / (4 * n)))", "t = int(input())\nimport math\nans = [0] * t\nfor i in range(t):\n    n = int(input())\n    theta = 90 / n\n    temp = 1 / math.sin(math.radians(theta))\n    ans[i] = temp * math.cos(math.radians(theta / 2))\nfor i in range(t):\n    print(format(ans[i], '.9f'))", "from math import sin, cos, pi\nn = int(input())\n\ndef f(a, b):\n    return sin(b * pi / a) / sin(pi / a)\nfor _ in range(n):\n    m = int(input())\n    print('%.12f' % (f(2 * m, m) * cos(pi / (4 * m))))", "import math\n\ndef main():\n    n = int(input())\n    if n <= 2:\n        print(1)\n    else:\n        res = 0.5 / math.sin(math.pi / (4 * n))\n        print(res)\nt = int(input())\nfor i in range(t):\n    main()", "from math import pi, sin\n\ndef ans(n):\n    r = pi / (4 * n)\n    m = 1 / sin(r)\n    return round(m / 2, 9)\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans(n))", "from math import radians, sin, cos, sqrt, tan\nfor tt in range(int(input())):\n    n = int(input())\n    n2 = n\n    n = n * 2\n    ok = 360 / n * (n2 // 2)\n    ok = (90 - ok) / 2\n    ok = radians(ok)\n    t = 1 / (2 * sin(radians(180 / n)))\n    val = cos(ok) * 2 * t\n    print(val)", "import sys\nimport heapq\nfrom math import *\nimport bisect\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, input().split())\n\ndef rlinput():\n    return list(map(int, input().split()))\n\ndef srlinput(fl=False):\n    return sorted(list(map(int, input().split())), reverse=fl)\n\ndef main():\n    n = iinput()\n    t = cos(pi * (n - 1) / (2 * n))\n    print(((1 - t) ** 0.5 + (1 + t) ** 0.5) / (2 * sin(pi / (2 * n))))\nfor sdfghjkl in range(iinput()):\n    main()", "import math\nt = int(input())\nfor i in range(0, t):\n    n = 2 * int(input())\n    q = (n - 2) / n * math.pi\n    print(1 / math.cos(q / 2) * math.cos(math.pi / (n * 2)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.pi / (4 * n)\n    x = 1 / (2 * math.sin(a))\n    print(x)", "import math\nt = int(input())\n\ndef kvadro(a, x):\n    stor = 2 * (a ** 2 / (2 - 2 * math.cos(2 * math.pi / x)) - a ** 2 / 4) ** 0.5\n    return stor\nfor t0 in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        N = 2 * n\n        a = 1\n    if n % 2 == 1:\n        N = 4 * n\n        a = (1 / (2 + 2 * math.cos(2 * math.pi / N))) ** 0.5\n    print(kvadro(a, N))", "from math import sin, radians\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / (2 * sin(radians(180 / (4 * n)))))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / math.sin(math.pi / n / 2) * math.cos(math.pi / n / 4))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = math.pi / (4 * n)\n    print(0.5 / math.sin(x))", "import math\nt = int(input())\nfor tn in range(t):\n    n = int(input())\n    a = math.pi / (2 * n)\n    b = (math.pi - a) / 2\n    x = math.sin(b) / math.sin(a)\n    print(x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = math.pi / (4 * n)\n    print(0.5 / math.sin(x))", "import math\nT = int(input())\nwhile T:\n    n = int(input())\n    if n % 2 == 0:\n        rad = 0.0174533\n        internal_angle = (n - 1) * 180 * 1.0 / (n * 1.0)\n        prevAngle = 0\n        ans = 1.0\n        while True:\n            cur_angle = 180 - internal_angle + prevAngle\n            prevAngle = cur_angle\n            co = math.cos(cur_angle * rad)\n            if co <= 0:\n                break\n            ans = ans + 2.0 * co\n        print(ans)\n    else:\n        angle = math.pi / n / 4\n        ans = 0.5 / math.sin(angle)\n        print(ans)\n    T -= 1", "from math import *\nimport sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        n = II()\n        a = 0.5 / sin(pi / n / 2)\n        r = (pi / 2 - pi * (n // 2) / n) / 2\n        ans = a * cos(r) * 2\n        print(ans)\nmain()", "import math\nt = int(input())\nroot2 = 1.41421356237\nfor i in range(t):\n    n = int(input())\n    x = math.pi / n\n    r = 1 / (2 * math.sin(x / 2))\n    if (n + 1) % 4 == 0:\n        k = (n + 1) // 4\n    else:\n        k = (n - 1) // 4\n    l1 = root2 * r * math.sin(k * x)\n    l2 = root2 * r * math.cos(k * x)\n    print(l1 + l2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    n *= 2\n    res = math.cos(math.pi / (2 * n)) / math.sin(math.pi / n)\n    print(res)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a1 = 0.5 / math.sin(math.radians(90 / (2 * n)))\n    print(a1)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * x))))", "import math\nfor ii in range(int(input())):\n    n = int(input())\n    print(math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n)))", "import math\nans = []\nQ = int(input())\nwhile Q > 0:\n    Q -= 1\n    n = int(input())\n    alpha = math.pi / n / 4\n    res = math.cos(alpha) / math.sin(2 * alpha)\n    ans.append(str(res))\nfor i in ans:\n    print(i)", "import math\nt = int(input())\nfor i1 in range(t):\n    n = int(input())\n    theta = 1 / n * math.pi\n    r = math.cos(theta / 4) / math.sin(theta / 2)\n    print(r)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    ans = math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n))\n    print('%.8f' % ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    PI = math.pi\n    alpha = PI * (2 * n - 2) / (2 * n)\n    beta = PI - alpha\n    n1 = n // 2\n    n2 = n - n1\n    R = 1 / (2 * math.sin(PI / (2 * n)))\n    x = R * math.sqrt(1 - math.cos(n1 * beta))\n    y = R * math.sqrt(1 - math.cos(n2 * beta))\n    print(x + y)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * n))))", "from math import cos, pi, sin\ns = [0] * 201\nfor k in range(6, 401, 4):\n    k //= 2\n    d = pi / k / 2\n    x = sin(d / 2) / sin(d)\n    s[k] = (sum((cos(i * d) for i in range(k))) * 2 - 1) * x\nfor _ in range(int(input())):\n    k = int(input())\n    print(s[k])", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.cos(math.pi / 4 / n) / math.sin(math.pi / 2 / n))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(math.cos(math.pi / 4 / n) / math.sin(math.pi / 2 / n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    alpha = 180 / n\n    pi = math.pi\n    ans = math.cos(pi / (4 * n)) / math.sin(pi / (2 * n))\n    print(ans)", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = cos(pi / (4 * n)) / sin(pi / (2 * n))\n    print('%.9f' % ans)", "from math import sin\nfrom math import pi\n\ndef f(n):\n    d = 1 / sin(pi / 2 / n)\n    ro = (n - 1) / (2 * n) * pi\n    ang = (3 / 2 * pi - ro) / 2\n    return d * sin(ang)\nt = int(input())\nfor i in range(t):\n    print(f(int(input())))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    n = n * 2\n    print(math.cos(math.pi / (2 * n)) / math.sin(math.pi / n))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n))\n    print(x)", "from math import cos, sin, pi, tan, radians\n\nclass Vector:\n\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def scale(self, c):\n        self.x *= c\n        self.y *= c\n\n    def magnitude(self):\n        return self.dot(self) ** 0.5\n\n    def rotate(self, theta):\n        theta %= 360\n        if theta % 90:\n            theta = theta / 180 * pi\n            (self.x, self.y) = (self.x * cos(theta) - self.y * sin(theta), self.x * sin(theta) + self.y * cos(theta))\n        elif theta == 90:\n            (self.x, self.y) = (-self.y, self.x)\n        elif theta == 180:\n            (self.x, self.y) = (-self.x, -self.y)\n        elif theta == 270:\n            (self.x, self.y) = (self.y, -self.x)\nfor _ in range(int(input())):\n    n = 2 * int(input())\n    apot = 0.5 * tan(radians((90 * n - 180) / n))\n    diag = 2 * (0.25 + apot ** 2) ** 0.5\n    v = Vector(diag, 0)\n    u = Vector(diag, 0)\n    v.rotate(90 / n)\n    u.scale(u.dot(v) / u.dot(u))\n    print(u.magnitude())", "import sys\nfrom math import pi, sin, tan, cos, atan\n\ndef find_D(alpha):\n    return atan((1.0 - cos(alpha)) / sin(alpha))\n\ndef solve(n):\n    half_angle = 2 * pi / (2 * n) / 2.0\n    if n % 2 == 1:\n        to_corner = 0.5 / sin(half_angle)\n        d = find_D(half_angle)\n        s = to_corner * cos(d)\n    else:\n        s = 0.5 / tan(half_angle)\n    return 2 * s\nIN = [x.strip() for x in sys.stdin.readlines()]\nT = int(IN[0])\ncur = 1\nfor ti in range(T):\n    n = int(IN[cur])\n    result = solve(n)\n    print(result)\n    cur += 1", "from math import sin, pi, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    print(round(1 / (2 * sin(pi / 4 / n)), 9))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(1 / (2 * math.sin(math.radians(180 / (4 * n)))))\n    t -= 1", "import sys\nfrom math import pi, sin\n\ndef I():\n    return sys.stdin.readline().rstrip()\n\ndef h(n):\n    m = n // 2 - 0.5\n    a = 1\n    return a * sin(pi * m / n) / sin(pi / n)\n\ndef main():\n    for tc in range(1, 1 + int(I())):\n        n = int(I())\n        n *= 2\n        print(h(n))\nmain()", "import math\nPI = math.pi\n\ndef radius(n):\n    return 0.5 / math.sin(PI / (2 * n))\n\ndef chord(num_sides, n):\n    return 2 * radius(n) * math.sin(PI * num_sides / (2 * n))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = int(n / 2) + 1\n    y = int(n / 2)\n    print(chord(x, n) / math.sqrt(2) + chord(y, n) / math.sqrt(2))", "import math\nel = int(input())\nfor i in range(el):\n    num = int(input())\n    num = 2 * num\n    c = 1 / (math.sin(math.radians(180 / num)) / math.cos(math.radians(90 / num)))\n    print(2 * c ** 1 / 2)", "from math import *\nexec(int(input()) * 'print(1/(2*sin(pi/(4*int(input())))))\\n')", "import math\nkl = int(input())\nfor l in range(kl):\n    n = int(input())\n    r = 1 / (2 * math.sin(math.pi / (2 * n)))\n    s = 2 * r * (math.sin(n // 2 * math.pi / (2 * n)) + math.sin((n + 1) // 2 * math.pi / (2 * n))) / 2 ** 0.5\n    print(s)", "import math\nfor i in range(int(input())):\n    n = 2 * int(input())\n    print(round(1 / math.sin(math.pi / n) * math.cos(math.pi / (2 * n)), 9))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    n = n * 2.0\n    ans = 1.0 / math.sin(math.pi / (2.0 * n))\n    print(ans / 2)", "import math\nfor case in range(int(input())):\n    n = int(input()) * 2\n    theta = math.pi / (4 * n)\n    r = 0.5 / math.sin(math.pi / (2 * n))\n    print(r)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = math.pi / n\n    y = math.pi / (4 * n)\n    z = (math.pi - x) / 2\n    s = math.sin(z) / math.sin(x)\n    ans = 2 * s * math.cos(y)\n    print(ans)", "import math\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    p = math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n))\n    print(p)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        if n % 2 == 0:\n            ans = 1 / math.tan(math.pi / (2 * n))\n        else:\n            ans = math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n))\n        print('{:.10f}'.format(ans))\nmain()", "from math import sin, cos, pi\nfor _ in range(int(input())):\n    n = int(input())\n    print(cos(pi / (4 * n)) / sin(pi / (2 * n)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n)))", "import math\nnumOfRecords = input()\nfor i in range(0, int(numOfRecords)):\n    noOfSides = int(input())\n    ans = 1 / (2 * math.sin(math.pi / (4 * noOfSides)))\n    print(ans)", "import math\n\ndef parse():\n    return int(input())\nt = int(input())\nfor i in range(0, t):\n    n = float(parse())\n    print(math.cos(math.pi / (4.0 * n)) / math.sin(math.pi / (2.0 * n)))", "from math import *\npi = acos(-1)\nt = int(input())\nwhile t:\n    n = int(input())\n    print(cos(pi / (4 * n)) / sin(pi / (2 * n)))\n    t = t - 1", "from math import sin, cos, floor, pi\nfor t in range(int(input().strip())):\n    n = int(input().strip())\n    theta = floor((n + 2) / 4) * pi / n\n    ans = (sin(theta) + cos(theta)) / sin(pi / 2 / n) / 2 ** 0.5\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n)))", "import math\nt = int(input())\nfor i in range(t):\n    n = float(input())\n    n *= 2\n    res = math.cos(math.pi / (2 * n)) / math.sin(math.pi / n)\n    print(res)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(1 / tan(radians(90 / n)))\n    else:\n        print(cos(radians(45 / n)) / sin(radians(90 / n)))", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    th = math.pi / (2 * n)\n    l = 1.0 / math.sin(th)\n    th1 = n // 2 * (2 * th)\n    th = math.atan((1 - math.sin(th1)) / math.cos(th1))\n    res = l * math.cos(th)\n    print(res)", "from math import sin, pi, cos\n\ndef solve():\n    n = int(input())\n    return cos(pi / (4 * n)) / sin(pi / (2 * n))\n\ndef main():\n    t = int(input())\n    print('\\n'.join(map(str, [solve() for _ in range(t)])))\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = 2 * n\n    side = 1 / (2 * math.sin(math.pi / (2 * s)))\n    print(side)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    n = 2 * n\n    L = 1 / math.sin(math.pi / (2 * n)) * abs(math.sin(math.pi * (n - 1) / 4 * n))\n    print(L / 2)", "from math import pi, sin\n\ndef solve(n):\n    r = pi / (4 * n)\n    m = 1 / sin(r)\n    return round(m / 2, 9)\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "import math\nfor ad in range(int(input())):\n    n = int(input())\n    n *= 2\n    t = math.pi / n\n    x = math.cos(t / 2) / (2 * math.sin(t))\n    print(2 * x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    v = 2 * math.sin(math.pi / 4 / n)\n    print(1 / v)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * x))))", "import math\nt = int(input())\nfor i in range(0, t):\n    a = int(input())\n    pi = math.pi\n    print(round(1 / math.sin(pi / (2 * a)) * math.sin(pi / 2 - pi / (4 * a)), 9))", "import math\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    x = math.pi\n    y = 1 / math.sin(x / (2 * n))\n    z = math.cos(x / (4 * n))\n    print(y * z)", "from math import tan\nfrom math import cos\nfrom math import pi\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        v = tan((n - 1) * pi / (2 * n))\n        print(v)\n    else:\n        v = 1 / cos((n - 1) * pi / (2 * n))\n        r = cos(pi / (4 * n)) * v\n        print(r)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    if n == 2:\n        print(1)\n    else:\n        re = math.sin(float(3.141592653 / (n * 4)))\n        a = 1 / re\n        print(a / 2)", "from math import sin, pi\nfor _ in range(int(input())):\n    print(1 / sin(pi / (2 * int(input()) * 2)) / 2)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    print(1 / (2 * math.sin(math.pi / (4 * x))))", "from math import sin, pi, tan\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 / (2 * sin(pi / 4 / n)))", "import math as mt\nfor _ in range(int(input())):\n    n = int(input())\n    theta = 180 * (2 * n - 2) / (4 * n)\n    l = 1 / (2 * mt.cos(theta * mt.pi / 180))\n    theta2 = (90 - theta) / 2\n    print(2 * l * mt.cos(theta2 * mt.pi / 180))", "import sys\nfrom collections import defaultdict, deque\nfrom math import sqrt, gcd, factorial, tan, pi, sin, cos\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    n = int(input())\n    n *= 2\n    print(1 / (2 * sin(pi / 2 / n)))\nt = 1\nt = int(input())\nfor case in range(1, t + 1):\n    ans = solve()", "from math import *\npi = 3.14159265358979\nfor _ in range(int(input())):\n    n = int(input())\n    l = 1 / (2 * sin(pi / (4 * n)))\n    print('{:10.8f}'.format(l))", "from math import sin, pi\n\ndef solution(n):\n    n = 2 * n\n    area = 1 / sin(pi / (n * 2)) / 2\n    return area\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    print(solution(n))", "import math\nfor q in range(int(input())):\n    n = int(input())\n    ans = 1 / (2 * math.sin(math.radians(180 / (4 * n))))\n    print(ans)", "import math\n\ndef solve():\n    n = int(input())\n    n = 2 * n\n    x = 180 / n\n    rd = math.pi / 180 * x\n    sinn = math.sin(rd)\n    d = 1 / sinn\n    theta = math.cos(math.pi / (2 * n))\n    print(d * theta)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\nfor i in range(int(input())):\n    sides = 2 * int(input())\n    radius = 1 / (2 * math.sin(math.pi / sides))\n    x = math.cos(-math.pi / (2 * sides)) / math.sin(math.pi / sides)\n    print(x)"]