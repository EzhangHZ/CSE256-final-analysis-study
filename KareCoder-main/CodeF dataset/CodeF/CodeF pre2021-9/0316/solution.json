["def mapit():\n    temp = list(map(int, input().split()))\n    return temp\nfrom math import log2\nimport heapq\n\ndef solution():\n    n = int(input())\n    arr = mapit()\n    ele = set(arr)\n    op = []\n    for i in range(1, n):\n        op.append(arr[0] ^ arr[i])\n    op.sort()\n    for el in op:\n        new = ele.copy()\n        nw = []\n        for nm in arr:\n            tp = nm ^ el\n            nw.append(tp)\n            if tp in new:\n                new.remove(tp)\n            else:\n                break\n        if len(new) == 0:\n            print(el)\n            return\n    print(-1)\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "def solve(n, s):\n    ss = set(s)\n    p = sorted([t ^ s[0] for t in s if t != s[0]])\n    for x in p:\n        for t in s:\n            if x ^ t not in ss:\n                break\n        else:\n            return x\n    return -1\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = list(map(int, input().strip().split()))\n    print(solve(n, s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [0] * (n - 1)\n    a1 = l[0]\n    index = 0\n    for i in range(1, n):\n        l1[index] = l[i] ^ a1\n        index += 1\n    l1.sort()\n    st = set(l)\n    l = []\n    flag = 0\n    for i in l1:\n        flag = 1\n        for k in st:\n            if i ^ k not in st:\n                flag = 0\n                break\n        if flag == 1:\n            print(i)\n            break\n    if flag == 0:\n        print(-1)", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = Counter((x ^ y for (i, x) in enumerate(a) for y in a[:i]))\n    print(min([k for k in d if d[k] * 2 == len(a)] or [-1]))", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    n = int(fastinput())\n    b = list(map(int, fastinput().split()))\n    if n % 2 != 0:\n        print(-1)\n    else:\n        s = set(b)\n        ans = 0\n        b.sort()\n        x = b[0]\n        for i in b[1:]:\n            y = i ^ x\n            temp = set([x, i])\n            for j in b:\n                if j == b[0] or i == j:\n                    continue\n                c = j ^ y\n                if not c in s:\n                    break\n                else:\n                    temp.add(c)\n            if temp == s:\n                ans = y\n                break\n        if ans:\n            print(ans)\n        else:\n            print(-1)", "def dfs(a, vis, good_p, ndx, cur):\n    if ndx >= len(good_p):\n        for x in a:\n            if not vis[x ^ cur]:\n                return -1\n        return cur\n    ans0 = dfs(a, vis, good_p, ndx + 1, cur)\n    if ans0 > 0:\n        return ans0\n    ans1 = dfs(a, vis, good_p, ndx + 1, cur | good_p[ndx])\n    if ans1 > 0:\n        return ans1\n    return -1\n\ndef solve(a):\n    vis = [False for x in range(1025)]\n    for x in a:\n        vis[x] = True\n    p2 = 1024\n    good_p = []\n    while p2 > 0:\n        cnt0 = 0\n        cnt1 = 0\n        for x in a:\n            if x & p2:\n                cnt1 += 1\n            else:\n                cnt0 += 1\n        if cnt0 == cnt1:\n            good_p.append(p2)\n        p2 //= 2\n    if not good_p:\n        return -1\n    return dfs(a, vis, good_p, 0, 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))", "def solve():\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = {x: 0 for x in l}\n    maxi = max(d)\n    mini = min(d)\n    exp = 10\n    while maxi < pow(2, exp):\n        exp -= 1\n    exp += 1\n    exp = pow(2, exp) - 1\n    flag = False\n    q = exp\n    global count\n    if len(l) == 1:\n        print(-1)\n    else:\n        for exp in range(1, q + 1):\n            count = 0\n            for x in d:\n                ele = x ^ exp\n                if ele not in d:\n                    flag = False\n                    break\n                else:\n                    flag = True\n                    count += 1\n            if flag == True and count == len(l):\n                print(exp)\n                break\n        if flag == False:\n            print(-1)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        x = -1\n        for i in range(1, n):\n            k = a[0] ^ a[i]\n            if k and a == sorted([i ^ k for i in a]):\n                x = k\n                break\n        print(x)\nmain()", "def check(a, n):\n    b = set(a)\n    for i in range(1, 1025):\n        for j in a:\n            if j ^ i not in b:\n                break\n        else:\n            return i\n    return -1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(check(a, n))", "T = int(input())\nD = []\nfor i in range(0, T):\n    n = int(input())\n    E = []\n    B = []\n    A = [int(x) for x in input().split(' ')]\n    A.sort()\n    if n % 2 == 1:\n        D.append(-1)\n    else:\n        for j in range(0, n):\n            x = A[0] ^ A[j]\n            B.append(x)\n        for x in B:\n            C = [y ^ x for y in A]\n            C.sort()\n            if C == A and x != 0:\n                E.append(x)\n        if len(E) > 0:\n            D.append(min(E))\n        else:\n            D.append(-1)\nfor i in D:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    S = set(map(int, input().split()))\n    if n % 2:\n        print(-1)\n        continue\n    for k in range(1, max(S) << 1):\n        for s in S:\n            if s ^ k not in S:\n                break\n        else:\n            print(k)\n            break\n    else:\n        print(-1)", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = Counter((x ^ y for (i, x) in enumerate(a) for y in a[:i]))\n    print(min([k for k in d if d[k] * 2 == len(a)] or [-1]))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = Counter((x ^ y for (i, x) in enumerate(a) for y in a[:i]))\n    print(min([k for k in d if d[k] * 2 == len(a)] or [-1]))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = Counter((x ^ y for (i, x) in enumerate(a) for y in a[:i]))\n    print(min([k for k in d if d[k] * 2 == len(a)] or [-1]))", "t = int(input())\n\ndef get_k(a, b):\n    return a ^ b\n\ndef solve(s, n):\n    ans = -1\n    if n > 1:\n        k_vals = set()\n        num1 = s[0]\n        for idx in range(1, n):\n            k = get_k(num1, s[idx])\n            k_vals.add(k)\n        s.sort()\n        for k_val in sorted(k_vals):\n            new_s = []\n            for i in s:\n                new_s.append(i ^ k_val)\n            new_s.sort()\n            if new_s == s:\n                ans = k_val\n                break\n    return ans\nanswers = []\nfor i in range(t):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    ans = solve(s, n)\n    answers.append(ans)\nfor i in answers:\n    print(i)", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = Counter((x ^ y for (i, x) in enumerate(a) for y in a[:i]))\n    print(min([k for k in d if d[k] * 2 == len(a)] or [-1]))", "def solve():\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n    a.sort()\n    for i in range(0, n):\n        if i == 0:\n            continue\n        k = a[0] ^ a[i]\n        thisset = []\n        for j in a:\n            thisset.append(j ^ k)\n        if set(thisset) == set(a):\n            print(k)\n            return\n    print(-1)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def check(a, n):\n    b = set(a)\n    for i in range(1, 1025):\n        j = 0\n        while j < n:\n            x = a[j] ^ i\n            if x not in b:\n                break\n            j += 1\n        else:\n            return i\n    return -1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(check(a, n))", "for tc in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n % 2 == 1:\n        print(-1)\n    else:\n        s = set(l)\n        exors = []\n        for i in range(1, n):\n            exors.append(l[0] ^ l[i])\n\n        def apply(k):\n            ex = set()\n            for j in l:\n                ex.add(j ^ k)\n            return ex\n        ans = []\n        for i in exors:\n            if apply(i) == s:\n                ans.append(i)\n        if ans == []:\n            print(-1)\n        else:\n            print(min(ans))", "for _ in range(int(input())):\n    n = int(input())\n    s = set(map(int, input().split()))\n    s1 = set()\n    lst = list(s)\n    for i in range(n):\n        for j in range(i + 1, n):\n            s1.add(lst[i] ^ lst[j])\n    s1 = sorted(list(s1))\n    happy = 0\n    for i in list(s1):\n        for j in lst:\n            if i ^ j in s:\n                continue\n            else:\n                break\n        else:\n            happy = 1\n            print(i)\n            break\n    if happy == 0:\n        print(-1)", "def xor_k(n, a):\n    outputs = []\n    for j in a:\n        i = j\n        break\n    for j in a:\n        xor = i ^ j\n        if xor != 0:\n            outputs.append(xor)\n    ans = []\n    for j in outputs:\n        l = []\n        for k in a:\n            l.append(k ^ j)\n        if a == set(l):\n            ans.append(j)\n    if ans != []:\n        return min(ans)\n    return -1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = {int(i) for i in input().split()}\n    print(xor_k(n, arr))", "def check(arr):\n    brr = set(arr)\n    n = 1024\n    for i in range(1, n + 1):\n        f = 1\n        for j in arr:\n            if j ^ i not in brr:\n                f = 0\n                break\n        if f == 1:\n            return i\n    return -1\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(check(arr))\n    t -= 1", "from operator import xor\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    s = [int(si) for si in input().split()]\n    revlist = [-1] * 1025\n    for i in range(len(s)):\n        revlist[s[i]] = i\n    possible = [xor(a, b) for a in s for b in s]\n    setPossible = set(possible)\n    setPossible.remove(0)\n    possible = list(setPossible)\n    possible = sorted(possible)\n    ans = -1\n    for i in possible:\n        bm = [False] * n\n        curr = i\n        correct = False\n        for j in range(len(s)):\n            sol = xor(curr, s[j])\n            if sol <= 1024 and revlist[sol] != -1 and (not bm[revlist[sol]]):\n                bm[revlist[sol]] = True\n            else:\n                break\n            if j == len(s) - 1:\n                correct = True\n        if correct:\n            ans = curr\n            break\n    print(ans)", "import math\ntestCases = int(input())\ninputs = []\nresults = []\nfor i in range(testCases):\n    setNumber = int(input())\n    line = input().split()\n    line = [int(num) for num in line]\n    line.sort()\n    inputs.append(line)\n\ndef findResult(line):\n    s = set(line)\n    for i in range(1, 1025):\n        res = True\n        for t in s:\n            if not t ^ i in s:\n                res = False\n                break\n        if res:\n            return i\n    return -1\nfor line in inputs:\n    print(findResult(line))", "def ans(nums):\n    min_ = 1\n    max_ = max(nums)\n    max2 = 1\n    while max2 <= max_:\n        max2 *= 2\n    for v in range(min_, max2):\n        nums2 = set()\n        for number in nums:\n            xor_val = v ^ number\n            if xor_val not in nums:\n                break\n            nums2.add(xor_val)\n        if nums2 == nums:\n            return v\n    return -1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = set([int(x) for x in input().split()])\n    print(ans(nums))", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        ara = [int(num) for num in input().split()]\n        ara.sort()\n        ans = -1\n        for position in range(1, n):\n            var = ara[0] ^ ara[position]\n            current = []\n            for index in range(n):\n                current.append(var ^ ara[index])\n            current.sort()\n            for index in range(n):\n                if ara[index] != current[index]:\n                    break\n            else:\n                ans = var\n                break\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 2000\n    for x in a:\n        b[x] = 1\n    ans = 1000010000\n    for i in range(1, n):\n        x = a[0] ^ a[i]\n        ok = 1\n        for y in a:\n            if not b[x ^ y]:\n                ok = 0\n        if ok:\n            ans = min(ans, x)\n    print(ans if ans < 1000010000 else -1)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    arrS = list(map(int, input().split()))\n    bitArr = [0] * 1024\n    for i in range(len(arrS)):\n        for j in range(i + 1, len(arrS)):\n            bitArr[arrS[i] ^ arrS[j]] += 1\n    result = 1024\n    for i in range(len(bitArr)):\n        if bitArr[i] == math.floor(n / 2):\n            result = i\n            break\n    if n % 2 != 0:\n        print(-1)\n    elif result == 1024:\n        print(-1)\n    else:\n        print(result)\n    t -= 1", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    aset = set(a)\n    if n % 2 == 1:\n        print(-1)\n    elif n == 2 and a[1] != a[0]:\n        print(a[1] ^ a[0])\n    elif n == 2:\n        print(-1)\n    else:\n        ds = set()\n        rems = set()\n        for i in range(n):\n            ds.add(a[i] ^ a[0])\n        ds.remove(0)\n        if len(ds) == 0:\n            print(-1)\n            continue\n        for i in sorted(list(ds)):\n            naset = []\n            done = False\n            for j in a:\n                naset.append(j ^ i)\n            if sorted(naset) == a:\n                done = i\n                break\n        if done:\n            print(done)\n        else:\n            print(-1)", "def solve():\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    li = list(set(li))\n    d = {}\n    ll = 0\n    for ele in li:\n        d[ele] = True\n        ll += 1\n    for i in range(1, 1025):\n        ele = i ^ li[0]\n        if d.get(ele, -1) == -1:\n            continue\n        for j in range(1, ll):\n            x = li[j] ^ i\n            if d.get(x, -1) == -1:\n                break\n        else:\n            print(i)\n            return\n    else:\n        print(-1)\nt = int(input())\nfor i in range(t):\n    solve()", "def main():\n    NIN = lambda : int(input())\n    SIN = lambda : map(int, input().split())\n    LIN = lambda : list(map(int, input().split()))\n    from collections import defaultdict as dd\n    t = NIN()\n    for _ in range(t):\n        n = NIN()\n        a = LIN()\n        d = dd(lambda : 0)\n        if n % 2:\n            print(-1)\n            continue\n        for i in a:\n            for j in a:\n                d[i ^ j] += 1\n        ok = 0\n        for i in sorted(d):\n            if d[i] == n and i > 0:\n                print(i)\n                ok = 1\n                break\n        if not ok:\n            print(-1)\n    return\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    main = set(lst)\n    new = []\n    a = lst[0]\n    for i in lst:\n        new.append(a ^ i)\n    done = False\n    for i in new:\n        if i != 0:\n            temp = set([])\n            for j in lst:\n                k = j ^ i\n                temp.add(k)\n            if temp == main:\n                done = True\n                print(i)\n                break\n    if not done:\n        print(-1)", "def checker(n, lst):\n    if n % 2 != 0:\n        return -1\n    else:\n        result = [lst[i] ^ lst[0] for i in range(1, n)]\n        answer = list()\n        for i in range(n - 1):\n            tmp = [result[i] ^ lst[j] for j in range(n)]\n            if set(tmp) == set(lst):\n                answer.append(result[i])\n        return -1 if not answer else min(answer)\nfor _ in range(int(input())):\n    m = int(input())\n    a = [int(i) for i in input().split()]\n    print(checker(m, a))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 1\n    c = 0\n    v = [False for _ in range(n)]\n    while i < n:\n        d = a[i] ^ a[0]\n        for j in range(n):\n            if a[j] ^ d in a:\n                c += 1\n            else:\n                break\n        if c == n:\n            print(d)\n            break\n        else:\n            c = 0\n            i += 1\n    if c != n:\n        print(-1)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = list(set(l))\n    if n == 1:\n        print(-1)\n    else:\n        t = sys.maxsize\n        x = l[0]\n        f = 0\n        for i in range(1, n):\n            y = x ^ l[i]\n            p = []\n            for j in l:\n                p.append(y ^ j)\n            if set(p) == set(s):\n                f = 1\n                t = min(t, y)\n        if f == 0:\n            print(-1)\n        else:\n            print(t)", "def xor():\n    result = []\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            if i != j:\n                temp.append(lst[i] ^ lst[j])\n        result.append(set(temp))\n    tmp = result[0]\n    for i in range(1, n):\n        tmp = tmp & result[i]\n        if not tmp:\n            return -1\n    return min(tmp)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        print(xor())\nmain()", "def main(num, lst):\n    inter = set()\n    ind = 0\n    for i in range(num):\n        intersect = set()\n        for j in range(num):\n            intersect.add(lst[i] ^ lst[j])\n        if ind == 0:\n            inter = intersect\n            ind += 1\n            continue\n        inter = inter.intersection(intersect)\n    inter.remove(0)\n    if inter == set():\n        return -1\n    return min(inter)\nfor _ in range(int(input())):\n    num = int(input())\n    lst = list(map(int, input().split()))\n    print(main(num, lst))", "def xor():\n    result = []\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            if i != j:\n                temp.append(lst[i] ^ lst[j])\n        result.append(set(temp))\n    tmp = result[0]\n    for i in range(1, n):\n        tmp = tmp & result[i]\n        if not tmp:\n            return -1\n    return min(tmp)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        print(xor())\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = set(map(int, input().split()))\n    ans = -1\n    for i in range(1, 1025):\n        flag = True\n        for j in a:\n            if i ^ j not in a:\n                flag = False\n                break\n        if flag:\n            ans = i\n            break\n    print(ans)", "def findXOR(a):\n    n = len(a)\n    candidates = [0 for i in range(n - 1)]\n    for i in range(n - 1):\n        candidates[i] = a[i] ^ a[n - 1]\n    S = set(a)\n    valid_candidates = [1 for i in range(n - 1)]\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if valid_candidates[j] == 0:\n                continue\n            if a[i] ^ candidates[j] not in S:\n                valid_candidates[j] = 0\n    ans = []\n    for i in range(n - 1):\n        if valid_candidates[i] == 1:\n            ans.append(candidates[i])\n    if len(ans) == 0:\n        return -1\n    else:\n        return min(ans)\nn = int(input())\nfor i in range(n):\n    nn = input()\n    a = [int(x) for x in input().split()]\n    print(findXOR(a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n        continue\n    if n == 2:\n        print(S[0] ^ S[1])\n        continue\n    S.sort()\n    ans = -1\n    for k in range(1, 1024):\n        R = sorted([x ^ k for x in S])\n        ans = k\n        for i in range(n):\n            if S[i] != R[i]:\n                ans = -1\n                break\n        if ans > 0:\n            break\n    print(ans)", "from math import log, ceil, pow\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n % 2 == 1:\n        print(-1)\n        continue\n    for i in range(1, 1024):\n        if sorted([i ^ j for j in a]) == a:\n            print(i)\n            break\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = set(list(map(int, input().split())))\n    p = -1\n    for i in range(1, 1025):\n        for x in s:\n            if x ^ i not in s:\n                break\n        else:\n            p = i\n        if p != -1:\n            print(p)\n            break\n    else:\n        print(p)", "for _ in range(int(input())):\n    input()\n    s = set(list(map(int, input().split())))\n    for i in range(1, 1025):\n        for x in s:\n            if x ^ i not in s:\n                break\n        else:\n            print(i)\n            break\n    else:\n        print(-1)", "from sys import stdin, stdout\n\ndef is_power_of_two(n):\n    return n != 0 and n & n - 1 == 0\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    s = set(map(int, stdin.readline().split()))\n    if n % 2 == 1:\n        print(-1)\n        continue\n    ans = -1\n    for k in range(1, 1024):\n        if all((x ^ k in s for x in s)):\n            ans = k\n            break\n    print(ans)", "a = int(input())\nfor _ in range(a):\n    x = int(input())\n    li = list(map(int, input().split()))\n    p = -1\n    if x == 1:\n        print(p)\n    elif x == 2:\n        print(li[0] ^ li[1])\n    else:\n        for i in range(1, 1025):\n            for j in li:\n                if j ^ i not in li:\n                    break\n            else:\n                p = i\n                break\n        print(p)", "for _ in range(int(input())):\n    n = int(input())\n    S = set(map(int, input().split()))\n    S2 = set()\n    r = -1\n    for num in range(1, 1025):\n        flag = True\n        for i in S:\n            if i ^ num not in S:\n                flag = False\n                break\n        if flag:\n            r = num\n            break\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    S = set(map(int, input().split()))\n    S2 = set()\n    r = -1\n    for num in range(1, 1025):\n        flag = True\n        for i in S:\n            if i ^ num not in S:\n                flag = False\n                break\n        if flag:\n            r = num\n            break\n    print(r)", "import sys\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    mini = sys.maxsize\n    i = 0\n    for j in range(1, n):\n        temp = s[i] ^ s[j]\n        check = 0\n        if temp < mini:\n            k = 1\n            while k < n:\n                if k != j:\n                    if temp ^ s[k] not in s:\n                        check = 1\n                        break\n                k += 1\n            if check != 1:\n                mini = temp\n    if mini != sys.maxsize:\n        print(mini)\n    else:\n        print(-1)", "def solve():\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    flag = False\n    if len(l) == 1:\n        print(-1)\n    else:\n        for k in range(1, 1024):\n            for x in l:\n                if x ^ k not in l:\n                    flag = False\n                    break\n                else:\n                    flag = True\n            if flag == True:\n                print(k)\n                break\n        if flag == False:\n            print(-1)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "def f(A):\n    A.sort()\n    for i in range(1, 1024):\n        B = []\n        for j in A:\n            B.append(i ^ j)\n        B.sort()\n        if A == B:\n            return i\n    return -1\nt = int(input())\nfor i in range(t):\n    n = input()\n    B = input().split(' ')\n    A = []\n    for i in B:\n        A.append(int(i))\n    print(f(A))", "a = int(input())\nfor _ in range(a):\n    x = int(input())\n    li = list(map(int, input().split()))\n    b = max(li)\n    p = -1\n    for i in range(1, 1025):\n        for j in li:\n            if j ^ i not in li:\n                break\n        else:\n            p = i\n            break\n    print(p)", "a = int(input())\nfor _ in range(a):\n    x = int(input())\n    li = list(map(int, input().split()))\n    p = -1\n    for i in range(1, 1025):\n        for j in li:\n            if j ^ i not in li:\n                break\n        else:\n            p = i\n            break\n    print(p)", "import math\nt = int(input())\ncnt = 0\nfor cnt in range(t):\n    n = int(input())\n    s = set(map(int, input().split()))\n    cnt = 0\n    ans = 0\n    for i in range(1, 1024):\n        for j in s:\n            x = i ^ j\n            if x not in s:\n                break\n        else:\n            cnt = 1\n            ans = i\n            break\n    if cnt == 0:\n        print('-1')\n    else:\n        print(ans)", "int_inp = lambda : int(input())\nstrng = lambda : input().strip()\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nimport math\nfrom collections import Counter, defaultdict\nfor _ in range(int_inp()):\n    k = int_inp()\n    m = seq()\n    s1 = set(m)\n    s2 = set()\n    f = -1\n    binary = bin(max(s1))[2:]\n    a = len(binary)\n    a = int('1' * a, 2)\n    for j in range(1, a + 1):\n        for i in m:\n            s2.add(i ^ j)\n        if s1 == s2:\n            f = j\n            break\n        else:\n            s2.clear()\n    print(f)", "from sys import stdin, stdout\nfrom collections import Counter\n\ndef ai():\n    return list(map(int, stdin.readline().split()))\n\ndef ei():\n    return map(int, stdin.readline().split())\n\ndef ip():\n    return int(stdin.readline().strip())\n\ndef op(ans):\n    return stdout.write(str(ans) + '\\n')\nfor i in range(ip()):\n    n = ip()\n    li = ai()\n    s = set(li)\n    mila = 0\n    for i in range(1, 1025):\n        c = 0\n        for j in li:\n            if i ^ j in s:\n                c += 1\n        if c == n:\n            print(i)\n            mila = 1\n            break\n    if mila == 0:\n        print(-1)", "from sys import stdin\nfrom math import log\n\ndef list_input():\n    return list(map(int, input().split()))\n\ndef sep_input():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    l = list_input()\n    if n % 2 == 0:\n        s = set(l)\n        ff = 0\n        for j in range(1, 1025):\n            f = 1\n            for i in range(n):\n                if l[i] ^ j not in s:\n                    f = 0\n                    break\n            if f == 1:\n                print(j)\n                ff = 1\n                break\n        if ff == 0:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    s = set(a)\n    rez = -1\n    for i in range(1, 1024):\n        c = 0\n        for el in a:\n            if i ^ el not in s:\n                break\n            else:\n                c += 1\n        if c == n:\n            rez = i\n            break\n    print(rez)", "def tran(arr):\n    arr.sort()\n    p = 0\n    anss = []\n    for i in range(1, 1024):\n        c = []\n        for k in arr:\n            b = k ^ i\n            c.append(b)\n        c.sort()\n        if c == arr:\n            anss.append(i)\n            break\n    if len(anss) == 1:\n        return anss[0]\n    else:\n        return -1\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    r = tran(arr)\n    ans.append(r)\nfor i in ans:\n    print(i)", "def f(q):\n    cnt = 0\n    while q % 2 == 0:\n        cnt += 1\n        q //= 2\n    if q > 1:\n        return -1\n    res = 0\n    res += cnt // 3\n    cnt %= 3\n    res += cnt // 2\n    cnt %= 2\n    res += cnt\n    return res\n\ndef solve():\n    n = int(input())\n    L = list(map(int, input().split()))\n    L.sort()\n    for i in range(1, 1024):\n        T = []\n        for l in L:\n            T.append(i ^ l)\n        T.sort()\n        if T == L:\n            print(i)\n            return\n    print(-1)\nfor cnt in range(int(input())):\n    solve()", "def check(k, exists, given):\n    for num in given:\n        if not exists[num ^ k]:\n            return False\n    return True\n\ndef solve(exists, given):\n    for k in range(1, 1025):\n        if check(k, exists, given):\n            return k\n    return -1\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    exists = [0 for i in range(2048)]\n    for i in arr:\n        exists[i] = 1\n    print(solve(exists, arr))", "t = int(input())\n\ndef fun(n, a):\n    b = set(a)\n    ans = -1\n    s = set()\n    for i in range(1, 1025):\n        for j in a:\n            s.add(j ^ i)\n        if s == b:\n            ans = i\n            break\n        s.clear()\n    print(ans)\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    fun(n, a)", "import sys\nimport heapq\nimport random\nimport collections\nimport math\n\ndef solve(lst):\n    console('----- solving ------')\n    lst = sorted(lst)\n    if len(lst) % 2 != 0:\n        return -1\n    sett = set(lst)\n    for k in range(1, 1024):\n        lss = [a ^ k for a in lst]\n        if set(lss) == sett:\n            return k\n    return -1\n\ndef console(*args):\n    print('\\x1b[36m', *args, '\\x1b[0m', file=sys.stderr)\n    return\nfor case_num in range(int(input())):\n    _ = int(input())\n    lst = list(map(int, input().split()))\n    res = solve(lst)\n    print(res)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = collections.defaultdict(int)\n    ans = 1000000.0\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = a[i] ^ a[j]\n            d[t] += 1\n            if d[t] >= (n + 1) // 2 and t >= 1:\n                if ans > t:\n                    ans = t\n    if ans == 1000000.0:\n        print(-1)\n    else:\n        print(ans)", "def pap(n, x):\n    a = {}\n    for i in x:\n        a[i] = 1\n    for i in range(1, 1025):\n        b = {}\n        for j in x:\n            t = i ^ j\n            if t not in a:\n                break\n            else:\n                if t in b:\n                    break\n                b[t] = 1\n        if len(a) == len(b):\n            print(i)\n            return\n    print(-1)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    pap(n, x)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, 1024):\n        k = []\n        for j in a:\n            if j ^ i not in a:\n                break\n            else:\n                k.append(j ^ i)\n        else:\n            if set(k) == set(a):\n                print(i)\n                break\n    else:\n        print(-1)\n    t -= 1", "from collections import Counter\nfrom itertools import combinations\nT = int(input().strip())\nfor t in range(T):\n    n = int(input().strip())\n    s = set(map(int, input().strip().split()))\n    maxval = max(s)\n    a = Counter()\n    for e in s:\n        q = e\n        mv = maxval\n        for j in range(12):\n            if mv > 0:\n                a[j, q % 2] += 1\n            else:\n                break\n            q //= 2\n            mv //= 2\n    good_pos = set()\n    bad_pos = set()\n    for p in range(12):\n        if a[p, 0] == a[p, 1] and a[p, 0] > 0:\n            good_pos.add(p)\n        elif a[p, 0] % 2 + a[p, 1] % 2:\n            bad_pos.add(p)\n    if bad_pos:\n        print(-1)\n        continue\n    good_numbers = set()\n    for r in range(1, len(good_pos) + 1):\n        for ss in combinations(good_pos, r):\n            curtstnum = sum((2 ** j for j in ss))\n            newset = {a ^ curtstnum for a in s}\n            if s == newset:\n                good_numbers.add(curtstnum)\n    if good_numbers:\n        print(min(good_numbers))\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = {int(x) for x in input().split()}\n    m = 2 ** (len(bin(max(s))) - 2) + 1\n    for i in range(1, m):\n        ns = {x ^ i for x in s}\n        if s == ns:\n            print(i)\n            break\n    else:\n        print(-1)", "def find(l, d, n):\n    for i in l:\n        k = i ^ n\n        if k not in d:\n            return 0\n    return 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    f = 0\n    for i in l:\n        d[i] = 1\n    for i in range(1, 1024):\n        if find(l, d, i):\n            f = 1\n            print(i)\n            break\n    if f == 0:\n        print(-1)", "def hobby(n, array):\n    s = set(array)\n    for x in range(2047):\n        f = 0\n        for y in array:\n            if x + 1 ^ y in s:\n                continue\n            else:\n                f = 1\n                break\n        if f == 0:\n            return x + 1\n    return -1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(hobby(n, l))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == 0:\n        flag = 0\n        for i in range(1, n):\n            arr = []\n            for j in range(0, n):\n                arr.append(a[j] ^ a[i])\n            arr.sort()\n            if arr == a:\n                flag = 1\n                break\n        if flag == 1:\n            print(a[i])\n        else:\n            print(-1)\n    else:\n        ans = a[0]\n        flag = 0\n        for i in range(1, n):\n            x = ans ^ a[i]\n            arr = []\n            for i in range(n):\n                arr.append(a[i] ^ x)\n            arr.sort()\n            if arr == a:\n                flag = 1\n                break\n        if flag == 1:\n            print(x)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = False\n    for i in range(1, 1025):\n        flag = True\n        for j in a:\n            if j ^ i not in a:\n                flag = False\n                break\n        if flag:\n            ans = i\n            print(ans)\n            break\n    if not flag:\n        print('-1')", "bstr = lambda number: bin(number)[2:]\n\ndef solve(s):\n    limit = 2 ** len(bstr(max(s))) - 1\n    for i in range(1, limit + 1):\n        if sorted([i ^ e for e in s]) == s:\n            return i\n    return -1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = (*map(int, input().split()),)\n    print(solve(sorted(s)))", "import sys\n\ndef solve():\n    return None\n\ndef main():\n    q = []\n    for line in sys.stdin.readlines():\n        q.append(line)\n    for i in range(len(q)):\n        q[i] = q[i].rstrip().split(' ')\n        q[i] = [int(x) for x in q[i]]\n    for i in range(1, len(q), 2):\n        a = q[i + 1]\n        m = max(a)\n        a2 = []\n        sol = -1\n        m = len(bin(m)) - 2\n        m = 2 ** m\n        for i in range(1, m):\n            a2 = []\n            for j in a:\n                temp = i ^ j\n                if temp not in a:\n                    break\n                elif temp in a2:\n                    break\n                else:\n                    a2.append(temp)\n                if j == a[len(a) - 1]:\n                    sol = i\n            if sol != -1:\n                break\n        print(sol)\nmain()", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = set(arr)\n    for i in range(1, 1025):\n        news = set()\n        for el in arr:\n            news.add(el ^ i)\n        if news == s:\n            print(i)\n            return\n    print(-1)\ntt = int(input())\nfor test in range(tt):\n    solve()", "def mostsignificant(a):\n    pos = 0\n    while a != 0:\n        pos += 1\n        a = a >> 1\n    return pos\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l.sort()\n    pos = mostsignificant(max(l))\n    flag = 0\n    for i in range(1, 2 ** pos + 1):\n        p = [j ^ i for j in l]\n        p.sort()\n        if p == l:\n            print(i)\n            flag = 1\n            break\n    if flag == 0:\n        print(-1)", "def solution(x):\n    for k in range(1, 1025):\n        new_s = set()\n        for elem in x:\n            new_s.add(elem ^ k)\n        if new_s == x:\n            return k\n    return -1\ntests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    x = set(map(int, input().split()))\n    print(solution(x))", "from sys import stdin, stdout\n\ndef get_int():\n    return int(stdin.readline().strip())\n\ndef get_ints():\n    return map(int, stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef get_string():\n    return stdin.readline().strip()\nfor _ in range(int(stdin.readline())):\n    n = get_int()\n    s = get_array()\n    k = 1\n    m = max(s)\n    f = 0\n    while k < 1024:\n        for i in s:\n            j = i ^ k\n            if j in s:\n                continue\n            else:\n                break\n        else:\n            print(k)\n            f = 1\n            break\n        k += 1\n    if f == 0:\n        print(-1)", "def solve(s, n):\n    ans = None\n    for k in range(1, 1024):\n        new_set = set()\n        for val in s:\n            new_set.add(k ^ val)\n        if s == new_set:\n            return k\n    return -1\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = set(list(map(int, input().strip().split())))\n        ans = solve(s, n)\n        print(ans)\nread()", "for _ in range(int(input())):\n    n = int(input())\n    a = set(map(int, input().split()))\n    ans = -1\n    for i in range(1, 1025):\n        flag = 0\n        for j in a:\n            if i ^ j not in a:\n                flag = 1\n                break\n        if flag == 0:\n            ans = i\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for elem in a:\n        d[elem] = 1\n    ans = -1\n    for k in range(1, 1024):\n        flag = 1\n        for elem in a:\n            if d.get(elem ^ k, 0) == 0:\n                flag = 0\n                break\n        if flag == 1:\n            ans = k\n            break\n    print(ans)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n        return\n    x = set(a)\n    for i in range(1, 2 * max(a) + 1):\n        b = [j ^ i for j in a]\n        b = set(b)\n        if len(b) == n and x == b:\n            print(i)\n            return\n    print(-1)\nt = int(input())\nfor i in range(t):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n % 2 != 0:\n        print(-1)\n    else:\n        xorp = []\n        for i in range(1, n):\n            xorp.append(s[i] ^ s[0])\n        ans = []\n        for i in range(0, n - 1):\n            tmp = []\n            for j in range(0, n):\n                tmp.append(xorp[i] ^ s[j])\n            if set(tmp) == set(s):\n                ans.append(xorp[i])\n        if len(ans) == 0:\n            print(-1)\n        else:\n            print(min(ans))", "import math\ntc = int(input())\nfor _ in range(tc):\n    m = int(input())\n    lis = [0] * 1025\n    nums = [int(i) for i in input().split()]\n    for i in nums:\n        lis[i] = 1\n    nums.sort()\n    possible = []\n    for i in range(1, 1025):\n        broken = False\n        for j in nums:\n            new = i ^ j\n            if new not in nums or lis[new] != 1:\n                broken = True\n                break\n        if not broken:\n            print(i)\n            break\n    if broken:\n        print(-1)", "cases = int(input())\nfor i in range(cases):\n    line1 = int(input())\n    line2 = input().split(' ')\n    arr = []\n    for a in line2:\n        arr.append(int(a))\n    if len(arr) == 2:\n        print(arr[0] ^ arr[1])\n        continue\n    elif len(arr) % 2 == 1:\n        print(-1)\n        continue\n    pos_ans = []\n    for b in range(len(arr)):\n        ele1 = arr[b]\n        for c in range(b + 1, len(arr)):\n            ele2 = arr[c]\n            op = ele1 ^ ele2\n            pos_ans.append(op)\n    pos_ans.sort()\n    counter = {}\n    found = False\n    for d in pos_ans:\n        if d in counter:\n            counter[d] += 1\n        else:\n            counter[d] = 1\n    for key in counter:\n        value = counter[key]\n        if value == line1 / 2:\n            found = True\n            ans = key\n            break\n    if found:\n        print(ans)\n    else:\n        print(-1)", "def check(d, arr, k, n):\n    for i in range(n):\n        try:\n            tt1 = d[arr[i] ^ k]\n        except:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n    else:\n        flag = True\n        d = {}\n        for i in range(n):\n            d[arr[i]] = True\n        for k in range(1, 1025):\n            if check(d, arr, k, n):\n                print(k)\n                flag = False\n                break\n        if flag:\n            print(-1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    for i in range(1, 1025):\n        flag = 1\n        for el in a:\n            if not el ^ i in a:\n                flag = 0\n                break\n        if flag:\n            print(i)\n            break\n    if not flag:\n        print(-1)\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = [int(__) for __ in input().split()]\n    chk = [0] * 1024\n    for a in s:\n        chk[a] += 1\n    stop = False\n    for i in range(1, 1024):\n        yes = True\n        for a in s:\n            if chk[a ^ i] == 0:\n                yes = False\n        if yes:\n            print(i)\n            stop = True\n            break\n    if stop:\n        continue\n    print(-1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    mainLis = []\n    a = list(map(int, input().split()))\n    for i in range(n):\n        lis = []\n        for j in range(n):\n            if i != j:\n                lis.append(a[i] ^ a[j])\n        mainLis.append(lis)\n    result = set(mainLis[0])\n    for currSet in mainLis[1:]:\n        result.intersection_update(currSet)\n    res = list(result)\n    res = sorted(res)\n    if len(res) == 0:\n        print(-1)\n    else:\n        print(res[0])\n    t -= 1", "kl = int(input())\nfor l in range(kl):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n % 2 == 1:\n        print(-1)\n        continue\n    if n % 4 != 0:\n        (m, pr) = (0, 1)\n        for i in range(n):\n            m = m ^ a[i]\n        for i in range(n):\n            c = a[:]\n            c.remove(a[i])\n            if m ^ a[i] not in c:\n                pr = 0\n                break\n        if pr:\n            print(m)\n        else:\n            print(-1)\n        continue\n    for m in range(1024):\n        pr = 1\n        for i in range(n):\n            c = a[:]\n            c.remove(a[i])\n            if m ^ a[i] not in c:\n                pr = 0\n                break\n        if pr:\n            break\n    if pr:\n        print(m)\n    else:\n        print(-1)", "def setThing(S):\n    greatest = max(S)\n    greatest <<= 1\n    for i in range(1, greatest):\n        if {x ^ i for x in S} == S:\n            return i\n    return -1\ntest_num = int(input())\nfor i in range(test_num):\n    trash = input()\n    my_set = input().split()\n    my_set = {int(x) for x in my_set}\n    print(setThing(my_set))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s1 = set(a)\n    flag = False\n    for k in range(1, 1024):\n        s2 = set()\n        for j in a:\n            s2.add(k ^ j)\n        if s1 == s2:\n            print(k)\n            flag = True\n            break\n    if not flag:\n        print(-1)", "t = int(input())\nfor loop in range(t):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    arr.sort()\n    for i in arr:\n        d[i] = 1\n    if arr[0] == 0:\n        ans = 0\n        for i in range(1, n):\n            flag = 0\n            val = arr[i]\n            for j in arr:\n                if val ^ j not in d:\n                    flag = 1\n                    break\n            if flag == 0:\n                print(val)\n                ans = 1\n                break\n        if ans == 0:\n            print(-1)\n    else:\n        ans = 0\n        for i in range(1, 1025):\n            flag = 0\n            if i not in d:\n                for j in arr:\n                    if i ^ j not in d:\n                        flag = 1\n                        break\n            else:\n                continue\n            if flag == 0:\n                print(i)\n                ans = 1\n                break\n        if ans == 0:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n % 2 != 0:\n        print(-1)\n    else:\n        l.sort()\n        l1 = []\n        f = 0\n        for i in range(1, 1025):\n            for j in l:\n                l1.append(i ^ j)\n            l1.sort()\n            if l == l1:\n                f = 1\n                print(i)\n                break\n            else:\n                l1.clear()\n        if f == 0:\n            print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = set(arr)\n    m = max(arr)\n    l = len(bin(m)[2:])\n    num = int('1' * l, 2)\n    ans = -1\n    for i in range(1, num + 1):\n        tem = set()\n        for j in arr:\n            tem.add(j ^ i)\n        if tem == s:\n            ans = i\n            break\n    print(ans)", "def ans(arr, n):\n    k = 1\n    arr.sort()\n    z = arr[-1]\n    while k <= 2 * z:\n        q = []\n        for i in arr:\n            q.append(i ^ k)\n        q.sort()\n        if q == arr:\n            return k\n        k += 1\n    return -1\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    a = input().split()\n    arr = []\n    for i in a:\n        arr.append(int(i))\n    print(ans(arr, n))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    sets = set(s)\n    ans = -1\n    k = 1\n    ptr = 0\n    for i in range(1024):\n        ptr = 0\n        for j in s:\n            if k ^ j in sets:\n                continue\n            else:\n                ptr = -1\n                break\n        if ptr == 0:\n            ans = k\n            break\n        k += 1\n    print(ans)", "for _ in range(0, int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    m = [[-1 for a in range(0, n)] for b in range(0, n)]\n    for i in range(0, n):\n        for j in range(0, n):\n            m[i][j] = l[i] ^ l[j]\n    s = set(m[0])\n    for i in range(1, len(m)):\n        s = s.intersection(set(m[i]))\n    s = list(s)\n    s.sort()\n    if len(s) > 1:\n        print(s[1])\n    else:\n        print(-1)"]