["t = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (g, k) = t()\n    l = list(t())\n    for i in range(k):\n        w = -1\n        for j in range(1, g):\n            if l[j - 1] < l[j]:\n                l[j - 1] += 1\n                w = j\n                break\n        if w == -1:\n            break\n    print(w)", "I = input\nfor _ in range(int(I())):\n    (n, k) = map(int, I().split())\n    stack = [(-1, float('inf'))]\n    res = None\n    for (i, c) in zip(range(n), map(int, I().split())):\n        while c > stack[-1][1]:\n            if res:\n                break\n            (j, d) = stack.pop()\n            w = i - stack[-1][0] - 1\n            h = min(c, stack[-1][1]) - d\n            remain = w * h\n            k -= remain\n            if k <= 0:\n                res = stack[-1][0] + -k % w + 2\n        if res:\n            print(res)\n            break\n        stack.append((i, c))\n    if k > 0:\n        print(-1)", "def newColony(n, k, array):\n    while k > 0:\n        x = 0\n        while x < n - 1 and array[x] >= array[x + 1]:\n            x += 1\n        if x == n - 1:\n            return -1\n        if x > 0:\n            p = min(array[x - 1] + 1, array[x + 1])\n        else:\n            p = array[x + 1]\n        if k <= p - array[x]:\n            return x + 1\n        else:\n            k -= p - array[x]\n            array[x] = p\n    return -1\nt = int(input())\nfinal = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    final.append(newColony(n, k, l))\nfor _ in range(t):\n    print(final[_])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        count = False\n        for j in range(n - 1):\n            if h[j] < h[j + 1]:\n                h[j] += 1\n                ans = j + 1\n                count = True\n                break\n        if count == False:\n            ans = -1\n            break\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef read():\n    return list(map(int, input().split()))\n\ndef solve(k, heights):\n    max_item = max(heights)\n    s = 0\n    for h in heights:\n        s += max_item - h\n    if s < k:\n        return -1\n    last_height = -1\n    for i in range(k):\n        for h_index in range(1, len(heights)):\n            if heights[h_index - 1] >= heights[h_index]:\n                if h_index == len(heights) - 1:\n                    return -1\n            else:\n                heights[h_index - 1] += 1\n                last_height = h_index\n                break\n    return last_height\nfor _ in range(int(input())):\n    (n, k) = read()\n    h = read()\n    print(solve(k, h))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    lst = -1\n    while k > 0:\n        for i in range(n - 1):\n            if a[i] < a[i + 1]:\n                a[i] += 1\n                k -= 1\n                lst = i + 1\n                break\n        else:\n            break\n    print(-1 if k > 0 else lst)", "loopcount = int(input())\nfor loop in range(loopcount):\n    x = input()\n    x = x.split(' ')\n    x = list(map(int, x))\n    y = input()\n    y = y.split(' ')\n    y = list(map(int, y))\n    output = 0\n    while x[1] > 0:\n        flag = True\n        for i in range(x[0] - 1):\n            if y[i + 1] > y[i]:\n                y[i] += 1\n                output = i + 1\n                flag = False\n                break\n        if flag:\n            output = -1\n            break\n        x[1] -= 1\n    print(output)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lst = -1\n    while k > 0:\n        for i in range(n - 1):\n            if a[i] < a[i + 1]:\n                a[i] += 1\n                k -= 1\n                lst = i + 1\n                break\n        else:\n            break\n    print(-1 if k > 0 else lst)", "r = lambda : map(int, input().split())\n(t,) = r()\nfor _ in [0] * t:\n    (n, k) = r()\n    a = [*r(), 101]\n    i = 1\n    while i % n * k:\n        i = 1\n        while a[i - 1] >= a[i]:\n            i += 1\n        a[i - 1] += 1\n        k -= 1\n    print(i % n or -1)", "from time import process_time_ns\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    h = [int(x) for x in input().split(' ')]\n    for i in range(k):\n        c = -1\n        for j in range(n - 1):\n            if h[j] < h[j + 1]:\n                h[j] += 1\n                c = j + 1\n                break\n        if c == -1:\n            break\n    print(c)", "def Solve():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        h = list(map(int, input().split()))\n        e = True\n        for i in range(k):\n            for o in range(n - 1):\n                if h[o] < h[o + 1]:\n                    h[o] += 1\n                    break\n            else:\n                print(-1)\n                e = False\n                break\n        if e:\n            print(o + 1)\nSolve()", "import math\nimport sys\nfor m in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 0\n    cnt = 0\n    while i < n - 1:\n        if arr[i + 1] > arr[i]:\n            arr[i] += 1\n            cnt += 1\n            if cnt == k:\n                print(i + 1)\n                break\n            i = 0\n        else:\n            i += 1\n    if cnt != k:\n        print(-1)", "def solve(arr, n, k):\n    i = 0\n    while k and i < n - 1:\n        if arr[i] < arr[i + 1]:\n            if k == 1:\n                return i + 1\n            arr[i] += 1\n            k -= 1\n            i = 0\n        else:\n            i = i + 1\n    if i == n - 1:\n        return -1\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, n, k))\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    maximum = max(h)\n    co = 0\n    for i in h:\n        co += maximum - i\n    if k > co:\n        print(-1)\n    else:\n        i = 0\n        ans = -1\n        for i in range(k):\n            result = 0\n            for j in range(n - 1):\n                if h[j] < h[j + 1]:\n                    ans = j + 1\n                    h[j] += 1\n                    result = 1\n                    break\n            if result == 0:\n                ans = -1\n        print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    while k > 0:\n        kol = 0\n        for i in range(n - 1):\n            if h[i] < h[i + 1]:\n                h[i] += 1\n                k -= 1\n                if k <= 0:\n                    print(i + 1)\n                    break\n                break\n            else:\n                kol += 1\n        if kol == n - 1:\n            print(-1)\n            break", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    while k > 0:\n        kol = 0\n        for i in range(n - 1):\n            if h[i] < h[i + 1]:\n                h[i] += 1\n                k -= 1\n                if k <= 0:\n                    print(i + 1)\n                    break\n                break\n            else:\n                kol += 1\n        if kol == n - 1:\n            print(-1)\n            break", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    i = 0\n    while k != 0 and i < n - 1:\n        if l[i] < l[i + 1]:\n            l[i] += 1\n            k -= 1\n            if k != 0:\n                i = max(0, i - 1)\n        else:\n            i += 1\n    if k == 0:\n        print(i + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(max(h[i:]))\n    count = 0\n    for i in range(n):\n        count += a[i] - h[i]\n    if k > count:\n        print(-1)\n        continue\n    for i in range(k):\n        for j in range(1, n):\n            if h[j] > h[j - 1]:\n                h[j - 1] += 1\n                break\n    print(j)", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = 0\n    temp = c\n    while k >= 1:\n        temp = c\n        if c >= n - 1:\n            break\n        if h[c] >= h[c + 1]:\n            c += 1\n        elif c == 0:\n            k -= h[c + 1] - h[c]\n            h[c] = h[c + 1]\n            c += 1\n        elif h[c] == h[c - 1]:\n            k -= 1\n            h[c] += 1\n            c -= 1\n        elif h[c - 1] >= h[c + 1]:\n            k -= h[c + 1] - h[c]\n            h[c] = h[c + 1]\n            c += 1\n        else:\n            k -= 1 + h[c - 1] - h[c]\n            h[c] = h[c - 1] + 1\n            c -= 1\n    if temp >= n - 1:\n        print(-1)\n    else:\n        print(temp + 1)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    pos = 0\n    for i in range(1, a):\n        while l[i] > l[i - 1]:\n            for j in range(i - 1, -1, -1):\n                l[j] += 1\n                pos += 1\n                if pos >= b:\n                    print(j + 1)\n                    pos = -1\n                    break\n                if j != 0 and l[j] <= l[j - 1]:\n                    break\n            if pos == -1:\n                break\n        if pos == -1:\n            break\n    if pos == -1:\n        continue\n    print(-1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    prev = arr[0]\n    l = 1\n    s = prev\n    k_ = 0\n    i = 0\n    while i < n - 1:\n        if arr[i] < arr[i + 1]:\n            k_ += 1\n            if k_ >= k:\n                print(i + 1)\n                break\n            arr[i] += 1\n            i = 0\n            continue\n        i += 1\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(0, t):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ans = -1\n    for i in range(k):\n        found = False\n        for j in range(n - 1):\n            if a[j] < a[j + 1]:\n                found = True\n                a[j] += 1\n                ans = j\n                break\n        if not found:\n            break\n    if not found:\n        print(-1)\n    else:\n        print(ans + 1)", "import operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(n, k, h):\n    max_h = max(h)\n    cur_sum = 1\n    for h_i in h:\n        cur_sum += max_h - h_i\n    if cur_sum <= k:\n        return -1\n    cur_stop = 0\n    while True:\n        l = 0\n        r = 1\n        while True:\n            if h[l] >= h[r]:\n                r += 1\n                l += 1\n                if r == n:\n                    return -1\n                continue\n            else:\n                cur_stop = l\n                h[l] += 1\n                k -= 1\n                if k == 0:\n                    return cur_stop + 1\n                break\n\ndef main():\n    samples = read_one_int()\n    for _ in range(samples):\n        (n, k) = read_list_of_ints()\n        h = read_list_of_ints()\n        cur_res = check_seq(n, k, h)\n        print(cur_res)\nmain()", "tests = int(input())\nfor _ in range(tests):\n    (n, k) = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    s += [0]\n    for i in range(k):\n        b = 0\n        while b < n:\n            if s[b] >= s[b + 1]:\n                b += 1\n            else:\n                s[b] += 1\n                break\n        if b == n:\n            print(-1)\n            break\n        if i == k - 1:\n            print(b + 1)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    H = list(map(int, input().split()))\n    cnt = idx = 0\n    while idx < n - 1:\n        if H[idx] >= H[idx + 1]:\n            idx += 1\n        else:\n            H[idx] += 1\n            cnt += 1\n            if cnt == k:\n                return idx + 1\n            idx = 0\n    return -1\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c1 = 0\n    bo = []\n    for p in range(k):\n        x = 0\n        x1 = 0\n        for i in range(len(a) - 1):\n            if a[i] < a[i + 1]:\n                x1 += 1\n                a[i] += 1\n                x += 1\n                break\n            else:\n                x += 1\n        if x == len(a) - 1:\n            if x1 == 0:\n                c1 += 1\n                break\n        bo.append(x)\n    if c1 > 0:\n        print(-1)\n    else:\n        print(bo[len(bo) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while k:\n        for i in range(n):\n            if i < n - 1 and a[i] < a[i + 1]:\n                a[i] += 1\n                break\n        if i == n - 1:\n            break\n        k -= 1\n    print(-1 if (i + 1) % n == 0 else (i + 1) % n)", "ttt = int(input())\nfor i in range(0, ttt):\n    (nn, kk) = map(int, input().split())\n    hh = [int(ii) for ii in input().split()]\n    flag = True\n    for q in range(0, kk):\n        position = 1\n        for j in range(0, nn - 1):\n            if hh[j] >= hh[j + 1]:\n                position += 1\n            else:\n                hh[j] += 1\n                break\n        if position >= nn:\n            print(-1)\n            flag = False\n            break\n    if flag:\n        print(position)", "def simulate(n, k, xs):\n    i = 0\n    while i + 1 < n:\n        if xs[i + 1] <= xs[i]:\n            i += 1\n            continue\n        xs[i] += 1\n        k -= 1\n        if k == 0:\n            return i + 1\n        if i > 0 and xs[i] >= xs[i - 1]:\n            i -= 1\n    return -1\n\ndef solve(n, k, xs):\n    return simulate(n, k, xs)\n\ndef driver():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        xs = list(map(int, input().split()))\n        print(solve(n, k, xs))\n\ndef test():\n    assert solve(4, 3, [4, 1, 2, 3]) == 2\n    assert solve(2, 7, [1, 8]) == 1\n    assert solve(4, 5, [4, 1, 2, 3]) == -1\n    assert solve(3, 1, [5, 3, 1]) == -1\n    solve(4, 5, [1, 1, 1, 4])\ndriver()", "def roll(h):\n    for i in range(len(h) - 1):\n        if h[i] < h[i + 1]:\n            h[i] += 1\n            return (h, i)\n    return (h, -1)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    for i in range(k):\n        (h, ans) = roll(h)\n        if ans == -1:\n            break\n    print(ans if ans == -1 else ans + 1)", "test_cases = int(input())\n\ndef func():\n    (n, k) = list(map(int, input().strip().split()))\n    heights = list(map(int, input().strip().split()))\n    curr_idx = 0\n    for boulder in range(k):\n        curr_idx = 0\n        while curr_idx + 1 != n and heights[curr_idx] >= heights[curr_idx + 1]:\n            curr_idx += 1\n        if curr_idx >= n - 1:\n            print(-1)\n            return\n        heights[curr_idx] += 1\n    print(curr_idx + 1)\n    return\nfor _ in range(test_cases):\n    func()", "t = int(input())\nfor j in range(t):\n    coords = input().split()\n    n = int(coords[0])\n    k = int(coords[1])\n    nums = input().split()\n    height = [int(nums[i]) for i in range(n)]\n    index = 0\n    while k > 0 and index < n - 1:\n        dip = False\n        while not dip:\n            if index == n - 1:\n                break\n            elif height[index] >= height[index + 1]:\n                index += 1\n            else:\n                dip = True\n        if index != n - 1:\n            increase = index\n            height[index] += 1\n            k -= 1\n            if index != 0 and height[index] > height[index - 1]:\n                index -= 1\n    if index < n - 1:\n        print(increase + 1)\n    else:\n        print(-1)", "_ = int(input())\nfor _i in range(_):\n    (n, k) = [int(i) for i in input().split()]\n    li = [int(i) for i in input().split()]\n    for i in range(k):\n        for j in range(n - 1):\n            if li[j] >= li[j + 1]:\n                continue\n            else:\n                li[j] += 1\n                flag = j + 1\n                break\n        else:\n            print(-1)\n            break\n    else:\n        print(flag)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    ans = -1\n    for i in range(k):\n        ans = -1\n        for j in range(n - 1):\n            if h[j] < h[j + 1]:\n                h[j] = h[j] + 1\n                ans = j + 1\n                break\n        if ans == -1:\n            break\n    print(ans)", "def jj():\n    ax = int(input())\n    for i in range(ax):\n        (dd, ww) = map(int, input().split())\n        kk = [int(zz) for zz in input().split()]\n        gg = True\n        for q in range(ww):\n            qq = 1\n            for j in range(dd - 1):\n                if kk[j] >= kk[j + 1]:\n                    qq += 1\n                else:\n                    kk[j] += 1\n                    break\n            if qq >= dd:\n                print(-1)\n                gg = False\n                break\n        if gg:\n            print(qq)\njj()", "def mozeli(plan, k):\n    i = 0\n    t = 0\n    while k > 0 and t < len(plan) - 1:\n        if plan[t] < plan[t + 1]:\n            plan[t] = plan[t] + 1\n            k -= 1\n            i = t\n            if t > 0:\n                t -= 1\n        else:\n            t += 1\n    if t == len(plan) - 1:\n        return '-1'\n    else:\n        return i + 1\nn = int(input())\nwhile n > 0:\n    lista = input().split(' ')\n    k = int(lista[1])\n    plan = input().split(' ')\n    plan = [int(i) for i in plan]\n    print(mozeli(plan, k))\n    n -= 1", "import sys\n\ndef input():\n    return sys.stdin.readline()\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = [[int(2000000000.0), 0]]\n    ans = None\n    for h in map(int, input().split()):\n        if ans is None:\n            if h > st[-1][0]:\n                while h > st[-1][0]:\n                    w = st[-1][1]\n                    have = min(k // w, h - st[-1][0])\n                    if have >= 1:\n                        if have + st[-1][0] >= st[-2][0]:\n                            have = st[-2][0] - st[-1][0]\n                            k -= have * w\n                            st.pop()\n                            if k == 0:\n                                ans = -w\n                                break\n                            st[-1][1] += w\n                        else:\n                            st[-1][0] += have\n                            k -= have * w\n                            if k == 0:\n                                ans = -w\n                                break\n                    else:\n                        ans = -k\n                        break\n                if ans is None:\n                    if st[-1][0] == h:\n                        st[-1][1] += 1\n                    else:\n                        st.append([h, 1])\n            elif h == st[-1][0]:\n                st[-1][1] += 1\n            else:\n                st.append([h, 1])\n    if ans is None:\n        print(-1)\n    else:\n        res = 0\n        for (_, w) in st:\n            res += w\n        print(res + ans + 1)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, k, hs):\n    hs = [10 ** 20] + hs\n    carry = 0\n    new_carry = 0\n    pos = 0\n    while True:\n        pos = 0\n        new_carry = 0\n        while pos <= n:\n            if pos == n:\n                print(-1)\n                return\n            if hs[pos] >= hs[pos + 1]:\n                pos += 1\n            else:\n                pos_r = pos + 1\n                pos_l = pos\n                while hs[pos_l] == hs[pos]:\n                    pos_l -= 1\n                new_carry = (min(hs[pos_r], hs[pos_l]) - hs[pos]) * (pos_r - pos_l - 1)\n                if carry + new_carry >= k:\n                    rest = k - carry - 1\n                    print(-(rest % (pos_r - pos_l - 1)) + pos_r - pos_l - 1 + pos_l)\n                    return\n                else:\n                    carry += new_carry\n                    for p in range(pos_l + 1, pos_r):\n                        hs[p] = min(hs[pos_r], hs[pos_l])\n                    break\nT = int(input())\nfor t in range(T):\n    [n, k] = list(map(int, input().split()))\n    hs = list(map(int, input().split()))\n    solution(n, k, hs)", "T = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    l = [int(k) for k in input().split()]\n    idx = 0\n    f = 0\n    for c in range(k):\n        i = 1\n        while i < n and l[i] <= l[i - 1]:\n            i += 1\n        if i == n:\n            idx = -1\n            break\n        else:\n            idx = i - 1\n            l[i - 1] = l[i - 1] + 1\n    if idx > -1:\n        print(idx + 1)\n    else:\n        print(-1)", "t = int(input())\n\ndef get_answer(n, k, h):\n    pos = 0\n    while k > 0 and pos < n - 1:\n        if h[pos] < h[pos + 1]:\n            k -= 1\n            h[pos] += 1\n            if k > 0:\n                pos = 0\n        else:\n            pos += 1\n    if pos == n - 1:\n        return -1\n    else:\n        return pos + 1\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    h = list(map(int, input().split()))\n    print(get_answer(n, k, h))", "for i in range(int(input())):\n    (x, n) = map(int, input().split())\n    y = list(map(int, input().split()))\n    i = 0\n    while i < x - 1:\n        if y[i] >= y[i + 1]:\n            i += 1\n        else:\n            y[i] += 1\n            n -= 1\n            if n == 0:\n                break\n            i = 0\n    if i + 1 < x:\n        print(i + 1)\n    else:\n        print('-1')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    h.append(0)\n    for __ in range(k):\n        nomer = 1\n        flag = False\n        for i in range(0, len(h) - 1):\n            if h[i] < h[i + 1]:\n                h[i] += 1\n                break\n            else:\n                nomer += 1\n                continue\n        if nomer == len(h):\n            flag = True\n            nomer = -1\n            break\n    print(nomer)", "for _ in range(int(input())):\n    (h, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    kk = 0\n    hell = 0\n    if h == 1:\n        print(-1)\n        continue\n    for i in range(k):\n        for j in range(h):\n            if a[j] < a[j + 1]:\n                a[j] += 1\n                kk = j + 1\n                break\n            elif j == h - 2:\n                hell = 1\n                break\n        if hell == 1:\n            break\n    print(kk if hell == 0 else -1)", "def NewColony(n, kk, a):\n    i = 0\n    for k in range(kk):\n        i = 0\n        while i < n - 1:\n            if a[i] < a[i + 1]:\n                a[i] += 1\n                break\n            i += 1\n        if i == n - 1:\n            return -1\n    return i + 1\nt = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().rstrip().split())\n    a = list(map(int, input().rstrip().split()))\n    ans = NewColony(n, k, a)\n    print(ans)", "import heapq\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    diff = []\n    for i in range(n - 1):\n        diff.append([l[i] - l[i + 1], i + 1])\n    heap = []\n    heapq.heapify(heap)\n    for i in diff:\n        if i[0] < 0:\n            heapq.heappush(heap, i[1])\n    while heap != [] and k != 0:\n        ind = heapq.heappop(heap)\n        k -= 1\n        diff[ind - 1][0] += 1\n        if diff[ind - 1][0] < 0:\n            heapq.heappush(heap, diff[ind - 1][1])\n        if ind > 1:\n            diff[ind - 2][0] -= 1\n            if diff[ind - 2][0] < 0:\n                heapq.heappush(heap, diff[ind - 2][1])\n    if k == 0:\n        print(ind)\n    else:\n        print(-1)", "import sys\nfrom sys import stdin, stdout\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef code(n, k, h):\n    i = kk = 0\n    while i < n - 1:\n        if h[i] >= h[i + 1]:\n            i += 1\n            continue\n        else:\n            h[i] += 1\n            kk += 1\n            if kk == k:\n                break\n            i = 0\n    if i == n - 1:\n        return -1\n    else:\n        return i + 1\nt = int(input())\nfor j in range(t):\n    (n, k) = get_ints()\n    h = get_list()\n    ans = code(n, k, h)\n    print(ans)", "try:\n    for _ in range(int(input())):\n        (n, K) = map(int, input().split())\n        h = list(map(int, input().split()))\n        i = 0\n        while i < n - 1 and h[i] >= h[i + 1]:\n            i += 1\n        for k in range(K - 1):\n            if i == n - 1:\n                break\n            h[i] += 1\n            if i > 0:\n                i -= 1\n            while i < n - 1 and h[i] >= h[i + 1]:\n                i += 1\n        if i == n - 1:\n            print(-1)\n        else:\n            print(i + 1)\nexcept:\n    pass", "n = int(input())\ninlist = []\nnumlist = []\nfor i in range(n):\n    inlist.append([int(num) for num in input().split()])\n    numlist.append([int(num) for num in input().split()])\nfor i in range(n):\n    k = inlist[i][1]\n    m = inlist[i][0]\n    mlist = numlist[i]\n    miner = [-1]\n    for j in range(1, m):\n        miner.append(mlist[j] - mlist[j - 1])\n    time = 0\n    while time <= m:\n        if miner[time] > 0:\n            miner[time] -= 1\n            miner[time - 1] += 1\n            k -= 1\n            if k == 0:\n                print(time)\n                break\n            time = 0\n        time += 1\n        if time == m:\n            print(-1)\n            break", "t = int(input())\nfor d in range(t):\n    li = [int(x) for x in input().split()]\n    n = li[0]\n    k = li[1]\n    arr = [int(x) for x in input().split()]\n    flag = 0\n    while k != 0:\n        x = 0\n        for i in range(n - 1):\n            if arr[i] < arr[i + 1]:\n                arr[i] += 1\n                break\n            else:\n                x += 1\n        if x == n - 1:\n            flag = 1\n            break\n        k = k - 1\n    if flag == 1:\n        print('-1')\n    else:\n        print(x + 1)", "test = int(input())\nwhile test:\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    pos = 0\n    pt = 0\n    while k > 0 and pt < n - 1:\n        if li[pt] >= li[pt + 1]:\n            pt += 1\n        else:\n            pos = pt + 1\n            li[pt] += 1\n            if pt == 0:\n                pt = 0\n            else:\n                pt -= 1\n            k -= 1\n    if pt >= n - 1:\n        print(-1)\n    else:\n        print(pos)\n    test -= 1", "t = int(input())\nwhile t:\n    t -= 1\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    h = list(map(int, input().split()))\n    j = -1\n    while k != 0:\n        k -= 1\n        m = 0\n        for i in range(n - 1):\n            if h[i] < h[i + 1]:\n                m += 1\n                h[i] += 1\n                j = i + 1\n                break\n        if m == 0:\n            j = -1\n            break\n    print(j)", "def solve(n, k, hill):\n    if n < 2:\n        return -1\n    count = 0\n    while count < k:\n        for i in range(1, n):\n            if hill[i - 1] >= hill[i]:\n                if i == n - 1:\n                    return -1\n            else:\n                hill[i - 1] += 1\n                count += 1\n                if count == k:\n                    return i\n                break\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    print(solve(n, k, h))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    heights = list(map(int, input().split()))\n    rocks = 0\n    i = 0\n    while rocks <= k - 1:\n        if i == n - 1:\n            print('-1')\n            break\n        elif heights[i] < heights[i + 1]:\n            heights[i] += 1\n            rocks += 1\n            if rocks == k:\n                print(i + 1)\n                break\n            else:\n                i = 0\n        else:\n            i += 1", "for _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    b_pos = []\n    bo = False\n    i = 0\n    while i < b and bo == False:\n        for j in range(a - 1):\n            if s[j + 1] > s[j]:\n                b_pos.append(j)\n                s[j] += 1\n                break\n        else:\n            print(-1)\n            bo = True\n        i += 1\n    if i == b and b - 1 < len(b_pos):\n        print(b_pos[b - 1] + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    flag = True\n    count = 0\n    pos = 0\n    ans = 0\n    while flag:\n        if pos == n - 1 and count < k:\n            break\n        else:\n            if l[pos] < l[pos + 1]:\n                l[pos] += 1\n                count += 1\n                ans = pos + 1\n            if pos > 0:\n                if l[pos - 1] < l[pos]:\n                    pos -= 1\n            if l[pos] >= l[pos + 1]:\n                pos += 1\n            if count == k:\n                break\n    if pos == n - 1 and count < k:\n        print(-1)\n    elif count == k:\n        print(ans)", "def NewColony(n, k, arr):\n    i = 0\n    for kk in range(k):\n        i = 0\n        while i < n - 1:\n            if arr[i] < arr[i + 1]:\n                arr[i] += 1\n                break\n            i += 1\n        if i == n - 1:\n            return -1\n    return i + 1\nt = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().rstrip().split())\n    arr = list(map(int, input().rstrip().split()))\n    result = NewColony(n, k, arr)\n    print(result)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    ans = 0\n    i = 0\n    m = -1\n    while i != n - 1:\n        if a[i] < a[i + 1]:\n            ans += 1\n            a[i] += 1\n            if ans == k:\n                m = i + 1\n            if i > 0:\n                i -= 1\n        else:\n            i += 1\n    print(m)", "t = int(input())\nfor l in range(t):\n    (n, k) = map(int, input().split())\n    lst = input()\n    arr = list(map(int, lst.split(' ')))\n    stop = -2\n    for i in range(k):\n        flg = 0\n        for j in range(n - 1):\n            if arr[j] < arr[j + 1]:\n                stop = j\n                arr[j] += 1\n                flg = 1\n                break\n        if flg == 0:\n            stop = -2\n            break\n    print(stop + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    if sorted(h, reverse=True) == h:\n        print(-1)\n    else:\n        pos = 0\n        count = 0\n        flag = 0\n        for x in range(k):\n            c = 0\n            if flag == 1:\n                print(-1)\n                break\n            for y in range(n - 1):\n                if h[y] < h[y + 1]:\n                    h[y] += 1\n                    pos = y\n                    break\n                else:\n                    c += 1\n            if c == n - 1:\n                if x == k - 1:\n                    print(-1)\n                flag = 1\n            count += 1\n        if count == k and flag == 0:\n            print(pos + 1)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = [int(x) for x in input().split()]\n        h = [int(x) for x in input().split()]\n        z = 0\n        if n == 1:\n            print(-1)\n        else:\n            for x in range(k):\n                if z == 1:\n                    break\n                i = 0\n                while i < n - 1:\n                    if h[i] >= h[i + 1]:\n                        i += 1\n                        if i == n - 1:\n                            z = 1\n                            break\n                    else:\n                        h[i] += 1\n                        y = i\n                        break\n            if z == 0:\n                print(y + 1)\n            else:\n                print(-1)\nexcept:\n    pass", "def boulder(n, k, h):\n    if n == 1:\n        return -1\n    a = 0\n    for _ in range(k):\n        for i in range(n - 1):\n            if h[i] >= h[i + 1]:\n                a = i + 2\n            else:\n                h[i] += 1\n                a = i + 1\n                break\n            if a == n:\n                return -1\n    return a\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    print(boulder(n, k, h))", "ans = []\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    heights = list(map(int, input().split()))\n    min_stck = 200\n    strt_ptr = 0\n    k_needed = 0\n    h_iter = 0\n    while h_iter < len(heights) - 1:\n        flag = False\n        currh = heights[h_iter]\n        next_h = heights[h_iter + 1]\n        if currh < next_h:\n            if next_h <= min_stck or h_iter == 0:\n                k_needed += next_h - currh\n                heights[h_iter] = next_h\n                h_iter += 1\n                min_stck = heights[h_iter]\n            else:\n                k_needed += min_stck + 1 - currh\n                heights[h_iter] = min_stck + 1\n                h_iter -= 1\n                flag = True\n        else:\n            min_stck = heights[h_iter]\n            h_iter += 1\n        if k_needed >= k:\n            if flag:\n                h_iter += 1\n            else:\n                h_iter -= 1\n            break\n    if h_iter == len(heights) - 1:\n        ans.append(-1)\n    else:\n        ans.append(h_iter + 1)\nfor an in ans:\n    print(an)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(d) for d in input().split()]\n    h = [int(d) for d in input().split()]\n    c = 0\n    i = 0\n    while c != k:\n        if i == n - 1:\n            print(-1)\n            break\n        if i < n - 1:\n            if h[i] < h[i + 1]:\n                c += 1\n                h[i] += 1\n                curr = i\n                if h[i] == h[i + 1]:\n                    if i > 0 and h[i - 1] < h[i]:\n                        i = i - 1\n                    else:\n                        i = i + 1\n                elif i > 0 and h[i - 1] < h[i]:\n                    i = i - 1\n                if c == k:\n                    print(curr + 1)\n                    break\n            else:\n                i = i + 1", "k = 0\ntcs = int(input())\nfor i in range(tcs):\n    (n, k) = [int(x) for x in input().split()]\n    heights = [int(x) for x in input().split()]\n    while k > 0:\n        for i in range(len(heights)):\n            try:\n                if heights[i + 1] > heights[i]:\n                    k -= 1\n                    heights[i] += 1\n                    ans = i + 1\n                    break\n            except:\n                ans = -1\n                k = 0\n                break\n    print(ans)", "test = int(input())\nwhile test:\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    pos = 0\n    pt = 0\n    while k > 0 and pt < n - 1:\n        if li[pt] >= li[pt + 1]:\n            pt += 1\n        else:\n            pos = pt + 1\n            li[pt] += 1\n            if pt == 0:\n                pt = 0\n            else:\n                pt -= 1\n            k -= 1\n    if pt >= n - 1:\n        print(-1)\n    else:\n        print(pos)\n    test -= 1", "def boulder(arr, k):\n    while True and k:\n        flag = True\n        for i in range(0, len(arr) - 1):\n            if arr[i + 1] > arr[i]:\n                arr[i] += 1\n                k -= 1\n                flag = False\n                if k == 0:\n                    return i + 1\n                break\n        if flag == True:\n            return -1\nfor i in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    print(boulder(lst, b))", "t = int(input())\nfor _ in range(t):\n    (_, k) = map(int, input().split())\n    heights = [int(i) for i in input().split()]\n    stack = [(float('inf'), 0)]\n    for (i, h) in enumerate(heights):\n        i += 1\n        level = 0\n        found = False\n        while True:\n            (stack_h, stack_i) = stack[-1]\n            dh = min(stack_h, h) - level\n            di = i - stack_i - 1\n            dk = di * dh\n            if dk >= k:\n                found = True\n                pos = stack_i + di - (k - 1) % di\n                break\n            k -= dk\n            level = min(stack_h, h)\n            if stack_h > h:\n                break\n            stack.pop()\n        stack.append((h, i))\n        if found:\n            break\n    if found:\n        print(pos)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    i = 1\n    for i in range(k):\n        ans = -1\n        for j in range(1, n):\n            if ar[j - 1] < ar[j]:\n                ar[j - 1] += 1\n                ans = j\n                break\n        if ans == -1:\n            break\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    while k > 0:\n        for i in range(n - 1):\n            if l[i] >= l[i + 1]:\n                continue\n            else:\n                ans = i\n                l[i] += 1\n                k = k - 1\n                break\n        else:\n            break\n    print(-1 if k > 0 else ans + 1)", "for _ in range(int(input())):\n    (n_nui, da) = map(int, input().split())\n    nui = list(map(int, input().split()))\n    waste = False\n    for i in range(da):\n        j = 0\n        while j < n_nui - 1:\n            if nui[j] < nui[j + 1]:\n                nui[j] += 1\n                break\n            else:\n                j += 1\n        if j == n_nui - 1:\n            waste = True\n            break\n    if waste:\n        print(-1)\n    else:\n        print(j + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    b = 1\n    while b <= k:\n        stop = -1\n        for i in range(n - 1):\n            if h[i + 1] > h[i]:\n                stop = i + 1\n                h[i] += 1\n                break\n        if stop == -1:\n            break\n        b += 1\n    print(stop)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(d) for d in input().split()]\n    h = [int(d) for d in input().split()]\n    c = 0\n    i = 0\n    while c != k:\n        if i < n - 1:\n            if h[i] < h[i + 1]:\n                c = c + 1\n                h[i] += 1\n                curr = i\n                if h[i] == h[i + 1]:\n                    if i > 0 and h[i - 1] < h[i]:\n                        i = i - 1\n                    else:\n                        i = i + 1\n                elif i > 0 and h[i] > h[i - 1]:\n                    i = i - 1\n                if c == k:\n                    print(curr + 1)\n                    break\n            else:\n                i = i + 1\n        else:\n            print(-1)\n            break", "t = int(input())\nfor i in range(t):\n    (n, k) = (int(_) for _ in input().split(' '))\n    mt = []\n    mt.extend((int(x) for x in input().split(' ')))\n    flag = 0\n    for j in range(k):\n        if n == 1:\n            flag = -1\n            break\n        if flag == -1:\n            break\n        for p in range(n - 1):\n            if mt[p] < mt[p + 1]:\n                mt[p] += 1\n                if j == k - 1:\n                    flag = p + 1\n                break\n            elif p == n - 2:\n                flag = -1\n                break\n    print(flag)", "def solve(n, k, arr):\n    ans = n + 1\n    for __ in range(k):\n        to = -2\n        for i in range(0, n - 1):\n            if arr[i] < arr[i + 1]:\n                to = i\n                break\n        ans = to + 1\n        if to == -2:\n            break\n        arr[to] += 1\n    print(ans)\nfor __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(s) for s in input().split()]\n    mx = max(arr)\n    if n * mx < k:\n        print('-1')\n        continue\n    solve(n, k, arr)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    flag = True\n    curr_index = -1\n    while k > 0 and flag:\n        c = 0\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                k -= 1\n                arr[i - 1] += 1\n                curr_index = i\n                c += 1\n                break\n        if c == 0:\n            flag = False\n    if flag and k <= 0:\n        print(curr_index)\n    else:\n        print(-1)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = [*R(), 0, 2]\n    i = 0\n    while k and i <= n:\n        i = 1\n        while a[i - 1] >= a[i]:\n            i += 1\n        a[i - 1] += 1\n        k -= 1\n    print(i % (n + 1) or -1)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = [*R(), 101]\n    i = 0\n    while (i < n) * k:\n        i = 1\n        while a[i - 1] >= a[i]:\n            i += 1\n        a[i - 1] += 1\n        k -= 1\n    print(i % n or -1)", "for _ in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    h = [int(x) for x in input().split()]\n    if n == 1:\n        print('-1')\n    else:\n        cou = 0\n        val = h[n - 1]\n        for i in range(n - 1, 0, -1):\n            if h[i - 1] < val:\n                cou += val - h[i - 1]\n            elif h[i - 1] > val:\n                val = h[i - 1]\n        if k > cou:\n            print('-1')\n        else:\n            perfe = -1\n            ji = 0\n            while ji != n - 1 and k > 0:\n                if h[ji] >= h[ji + 1]:\n                    ji += 1\n                    continue\n                elif ji == 0:\n                    k -= h[ji + 1] - h[ji]\n                    h[ji] = h[ji + 1]\n                    ji = 1\n                    perfe = 0\n                    continue\n                elif h[ji + 1] <= h[ji - 1]:\n                    perfe = ji\n                    k -= h[ji + 1] - h[ji]\n                    h[ji] = h[ji + 1]\n                    ji += 1\n                    continue\n                else:\n                    perfe = ji\n                    k -= h[ji - 1] + 1 - h[ji]\n                    h[ji] = h[ji - 1] + 1\n                    ji -= 1\n                    continue\n            print(perfe + 1)", "def boulder_run(n, h):\n    for i in range(n - 1):\n        if h[i] < h[i + 1]:\n            h[i] += 1\n            return i + 1\n    return -1\n\ndef answer(n, k, h):\n    position = 1\n    for _ in range(k):\n        position = boulder_run(n, h)\n        if position == -1:\n            return -1\n    return position\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    print(answer(n, k, h))", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    c = 0\n    while k != 0:\n        stop = 0\n        for i in range(0, n - 1):\n            if arr[i] < arr[i + 1]:\n                stop = 1\n                arr[i] += 1\n                k -= 1\n                c = i\n                break\n        if stop == 0:\n            print(-1)\n            break\n    if stop != 0:\n        print(c + 1)\n    else:\n        continue", "inn = lambda : int(input())\ninm = lambda : map(int, input().split())\nins = lambda : str(input())\nina = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, x) = inm()\n    a = ina()\n    if n == 1:\n        print(-1)\n        return\n    b = a[:]\n    total = 0\n    for i in range(n - 1, 0, -1):\n        total += max(a[i] - a[i - 1], 0)\n        a[i - 1] = max(a[i - 1], a[i])\n    if x > total:\n        print(-1)\n        return\n    i = 0\n    while i < n - 1:\n        if b[i] >= b[i + 1]:\n            i += 1\n        else:\n            x -= 1\n            if x == 0:\n                print(i + 1)\n                return\n            b[i] += 1\n            if i > 0:\n                if b[i - 1] < b[i]:\n                    i -= 1\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "x = int(input())\nfor _ in range(x):\n    (n, k) = map(int, input().split())\n    mountains = list(map(int, input().split()))\n    if k > 10000:\n        print(-1)\n        continue\n    b = False\n    i = 0\n    for _ in range(k):\n        i = 0\n        while i < n - 1 and mountains[i] >= mountains[i + 1]:\n            i += 1\n        if i == n - 1:\n            print(-1)\n            b = True\n            break\n        mountains[i] += 1\n    if not b:\n        print(i + 1)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    now = 0\n    cnn = 0\n    while now <= n - 1:\n        if now == n - 1:\n            if k >= cnn:\n                print(-1)\n            break\n        elif h[now] >= h[now + 1]:\n            now += 1\n        elif h[now] < h[now + 1]:\n            h[now] += 1\n            cnn += 1\n            if cnn == k:\n                print(now + 1)\n                break\n            now = 0", "def rightMinimum(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1\n\ndef solve(arr, k):\n    for i in range(k):\n        index = rightMinimum(arr)\n        if index == -1:\n            return -1\n        arr[index] += 1\n    return index + 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    print(solve(h, k))", "for _ in range(int(input())):\n    (__, k) = [int(i) for i in input().split(' ')]\n    a = [int(i) for i in input().split(' ')]\n    r = -1\n    br = False\n    for i in range(k):\n        for j in range(1, len(a)):\n            if a[j] > a[j - 1]:\n                r = j - 1\n                a[j - 1] += 1\n                break\n            elif j == len(a) - 1:\n                r = -1\n                br = True\n                break\n        if br:\n            break\n    if r == -1:\n        print(-1)\n    else:\n        print(r + 1)", "from sys import stdin\n\ndef main():\n    cases = int(stdin.readline().strip())\n    while cases:\n        (n, k) = map(int, stdin.readline().split())\n        v = [int(x) for x in stdin.readline().split()]\n        (j, c) = (0, True)\n        while k and c:\n            (j, c) = (0, False)\n            while j < n - 1 and (not c):\n                if v[j] < v[j + 1]:\n                    v[j] += 1\n                    k -= 1\n                    c = True\n                j += 1\n        if k == 0:\n            print(j)\n        else:\n            print(-1)\n        cases -= 1\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    pos = -1\n    while k > 0:\n        for i in range(n - 1):\n            if h[i] < h[i + 1]:\n                h[i] += 1\n                k -= 1\n                pos = i + 1\n                break\n        else:\n            break\n    print('-1' if k > 0 else pos)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    pos = -1\n    while k > 0:\n        for i in range(n - 1):\n            if h[i] < h[i + 1]:\n                h[i] += 1\n                k -= 1\n                pos = i + 1\n                break\n        else:\n            break\n    print('-1' if k > 0 else pos)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = input().split()\n    for i in range(len(h)):\n        h[i] = int(h[i])\n    final = 0\n\n    def roll(h):\n        for i in range(k):\n            for j in range(n):\n                if j == n - 1:\n                    return -1\n                if h[j] < h[j + 1]:\n                    h[j] += 1\n                    break\n            final = j\n        return final + 1\n    print(roll(h))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    while True:\n        idx = 0\n        for i in range(1, n):\n            if h[i] <= h[i - 1]:\n                idx += 1\n            else:\n                h[idx] += 1\n                k -= 1\n                break\n        if k == 0:\n            print(idx + 1)\n            break\n        if idx == n - 1:\n            print(-1)\n            break", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().strip().split()))[:n]\n    sum = 0\n    l = h[n - 1]\n    for i in range(n - 1, 0, -1):\n        if h[i - 1] < l:\n            sum = sum + l - h[i - 1]\n        else:\n            l = h[i - 1]\n    if k > sum:\n        print(-1)\n    else:\n        ans = 0\n        while k > 0:\n            for i in range(1, n, 1):\n                if h[i] > h[i - 1]:\n                    k -= 1\n                    h[i - 1] += 1\n                    ans = i\n                    break\n        print(ans)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = list(map(int, input().strip().split()))[:n]\n    index = 1\n    flag = 0\n    for a in range(0, k):\n        index = 1\n        flag = 0\n        for j in range(n - 1):\n            if arr[j] < arr[j + 1]:\n                arr[j] = arr[j] + 1\n                flag = 1\n                index = j + 1\n                break\n            else:\n                continue\n        if flag == 0:\n            break\n    if index == 1 and flag == 0:\n        print('-1')\n    else:\n        print(index)", "t = int(input())\nfor x in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    ans = -1\n    for c in range(k):\n        i = 0\n        while i < n - 1 and h[i] >= h[i + 1]:\n            i = i + 1\n        if i == n - 1:\n            break\n        elif c == k - 1:\n            ans = i + 1\n        h[i] = h[i] + 1\n    print(ans)", "def ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef number():\n    return int(input())\n\ndef numbers():\n    return [int(item) for item in input().split()]\n\ndef word():\n    return input()\n\ndef words():\n    return [item for item in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef f(k, arr):\n    res = 0\n    for i in range(k):\n        for j in range(len(arr)):\n            if j == len(arr) - 1:\n                return -1\n            if arr[j] < arr[j + 1]:\n                arr[j] += 1\n                res = j\n                break\n    return 1 + res\nfor i in range(number()):\n    (n, k) = numbers()\n    print(f(k, numbers()))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    flag = 0\n    if n == 1:\n        print(-1)\n    else:\n        for i in range(k):\n            for j in range(n - 1):\n                if l[j] < l[j + 1]:\n                    l[j] += 1\n                    if i == k - 1:\n                        print(j + 1)\n                    break\n                if j == n - 2:\n                    print(-1)\n                    flag = 1\n            if flag == 1:\n                break", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    a = [int(s) for s in input().split(' ')]\n    mx = max(a)\n    if mx * n < k:\n        ans = -1\n    else:\n        ans = n + 1\n        for i in range(k):\n            pos = -2\n            for i in range(n - 1):\n                if a[i] < a[i + 1]:\n                    pos = i\n                    break\n            ans = pos + 1\n            if pos == -2:\n                break\n            a[pos] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    for i in range(k):\n        flag = False\n        for j in range(len(s) - 1):\n            if s[j] < s[j + 1]:\n                s[j] += 1\n                break\n        else:\n            flag = True\n        if flag:\n            break\n    if flag:\n        print(-1)\n    else:\n        print(j + 1)", "t = int(input())\nfor i in range(t):\n    l = list(map(int, input().rstrip().split()))\n    n = l[0]\n    k = l[1]\n    count = 0\n    h = list(map(int, input().rstrip().split()))\n    for b in range(k):\n        for a in range(1, n):\n            if h[a - 1] < h[a]:\n                h[a - 1] += 1\n                count += 1\n                ans = a\n                break\n        if count < b + 1:\n            break\n    if count != k:\n        print(-1)\n    else:\n        print(ans)", "def solve(n, k, h):\n    i = 0\n    if n == 1:\n        return -1\n    while k > 0 and i < n - 1:\n        if h[i] >= h[i + 1]:\n            i += 1\n            continue\n        if i == 0:\n            a = h[1] - h[0]\n            h[0] += a\n            k -= a\n        elif h[i - 1] == h[i]:\n            h[i] += 1\n            k -= 1\n            if k == 0:\n                return i + 1\n            i -= 1\n        else:\n            a = min(h[i - 1] - h[i], h[i + 1] - h[i])\n            h[i] += a\n            k -= a\n    if k > 0:\n        return -1\n    else:\n        return i + 1\nT = int(input())\nfor t in range(T):\n    (n, k) = tuple(map(int, input().split()))\n    h = list(map(int, input().split()))\n    print(solve(n, k, h))"]