["def read_int():\n    return int(input())\nt = read_int()\nfor case_num in range(t):\n    x = read_int()\n    ans = 0\n    level = 1\n    need = 1\n    while x >= need:\n        x -= need\n        ans += 1\n        level = level * 2 + 1\n        need = level * (level + 1) // 2\n    print(ans)", "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    (s, count, i) = (0, 0, 2)\n    while s < n:\n        s += (i - 1) * i // 2\n        if s <= n:\n            count += 1\n        i *= 2\n    return count\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "n = int(input())\nfor i in range(n):\n    level = 1\n    x = int(input())\n    count = 0\n    while True:\n        x -= level * (1 + level) // 2\n        count += 1\n        level = level * 2 + 1\n        if x < 0:\n            print(count - 1)\n            break", "n = int(input())\nfor i in range(n):\n    level = 1\n    x = int(input())\n    count = 0\n    while True:\n        x -= level * (1 + level) // 2\n        count += 1\n        level = level * 2 + 1\n        if x < 0:\n            print(count - 1)\n            break", "for _ in [0] * int(input()):\n    x = int(input())\n    i = 0\n    while x > 0:\n        n = 2 ** (i + 1) - 1\n        x = x - n * (n + 1) // 2\n        i = i + 1\n    i = i - int(x < 0)\n    print(i)", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    inp += [int(input())]\nfor x in inp:\n    l = 2\n    c = 0\n    while x > 0:\n        v = l * (l - 1) // 2\n        x -= v\n        if x >= 0:\n            c += 1\n        l = 2 * l\n    print(c)", "t = int(input())\nL = []\nfor i in range(t):\n    n = int(input())\n    x = 1\n    y = 1\n    z = 1\n    ukupno = 0\n    odgovor = 0\n    while ukupno <= n:\n        ukupno += z\n        odgovor += 1\n        x = z * 2\n        y = y * 4\n        z = x + y\n    if ukupno > n:\n        odgovor -= 1\n    L.append(odgovor)\nfor i in range(len(L)):\n    print(L[i])", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(x):\n    res = 0\n    for k in range(1, 60):\n        stairs = 2 ** k - 1\n        cells = stairs * (stairs + 1) // 2\n        if cells > x:\n            break\n        x -= cells\n        res += 1\n    return res\nTC = int(input())\nfor tc in range(TC):\n    x = int(input())\n    res = solve(x)\n    print(res)", "from sys import stdin as r\ninput = r.readline\nl = [1]\ng = [1, 6]\nfor x in range(29):\n    l.append(l[-1] * 2 + 1)\n    g.append((l[-1] * 2 + 1) * ((l[-1] * 2 + 2) // 2) + [0, (l[-1] * 2 + 2) // 2][(l[-1] * 2 + 2) % 2])\nfor i in range(int(input())):\n    n = int(input())\n    i = 0\n    while n >= g[i]:\n        n -= g[i]\n        i += 1\n    print(i)", "from sys import stdin as r\ninput = r.readline\nl = [1]\ng = [1, 6]\nfor x in range(29):\n    l.append(l[-1] * 2 + 1)\n    h = l[-1] * 2 + 1\n    g.append(h * ((h + 1) // 2) + [0, (h + 1) // 2][(h + 1) % 2])\nfor i in range(int(input())):\n    n = int(input())\n    i = 0\n    while n >= g[i]:\n        n -= g[i]\n        i += 1\n    print(i)", "import math\n\ndef stairs(c):\n    x = 1\n    i = 0\n    a = 0\n    n = 1\n    while a < c:\n        sgp = 2 ** n - 1\n        a += sgp * (sgp + 1) // 2\n        x *= 2\n        i += 1\n        n += 1\n    if a > c:\n        i -= 1\n    return i\nt = int(input())\nfor x in range(t):\n    print(stairs(int(input())))", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    inp += [int(input())]\nfor x in inp:\n    k = 1\n    c = 0\n    while x > 0:\n        l = 2 ** k\n        v = l * (l - 1) // 2\n        x -= v\n        if x >= 0:\n            c += 1\n        k += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = -1\n    x = 0\n    while x <= n:\n        a += 1\n        k = 2 ** (a + 1) - 1\n        x += k * (k + 1) // 2\n    print(a)", "tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    k = 1\n    count = 0\n    while n > -1:\n        n -= (2 ** k - 1) * 2 ** (k - 1)\n        if n >= 0:\n            count += 1\n            k += 1\n    print(count)", "for _ in range(int(input())):\n    x = int(input())\n    ans = 0\n    s = 0\n    while s <= x:\n        ans += 1\n        s += 2 ** (ans - 1) * (2 ** ans - 1)\n    print(ans - 1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    x = int(input())\n    c = 0\n    s = 0\n    while True:\n        n = 2 ** c - 1\n        s += n * (n + 1) // 2\n        if s > x:\n            break\n        c += 1\n    print(c - 1)", "import math\nd = []\nk = 1\nwhile k <= 2000000000.0:\n    d.append(k * (k + 1) // 2 + (d[-1] if len(d) > 0 else 0))\n    k = 1 + 2 * k\nfor _ in range(int(input())):\n    num = int(input())\n    ans = 0\n    for i in d:\n        if i <= num:\n            ans = i\n    print(d.index(ans) + 1)", "import sys\nimport math\n\ndef fn(n):\n    k = 1\n    sum = 1\n    count = 0\n    while sum <= n:\n        count = count + 1\n        k = k + 1\n        sum = sum + (2 ** k - 1) * 2 ** (k - 1)\n    return count\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nfor i in range(t):\n    n = data[i + 1]\n    print(fn(n))", "for _ in range(int(input())):\n    n = int(input())\n    p = a = 0\n    k = 1 << p\n    while a <= n:\n        a += k * (2 * k - 1)\n        k <<= 1\n        p += 1\n    print(p - 1)", "T = int(input())\nfor case in range(0, T):\n    ans = 0\n    n = int(input())\n    k = 2\n    while True:\n        x = k - 1\n        res = (1 + x) * x // 2\n        if n >= res:\n            n -= res\n        else:\n            break\n        ans += 1\n        k *= 2\n    print(ans)", "tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    k = 1\n    i = 0\n    count = 0\n    cells = 0\n    if n == 1:\n        print(1)\n        continue\n    while n > -1:\n        j = 2 ** k - 1\n        n = n - j * 2 ** (k - 1)\n        if n >= 0:\n            count += 1\n            k += 1\n    print(count)", "for _ in [0] * int(input()):\n    n = int(input())\n    o = 0\n    c = 1\n    while n >= 0:\n        n -= c * (c + 1) // 2\n        o += 1\n        c = 2 * c + 1\n    print(o - 1)", "mem = {}\n\ndef dp(pos, k):\n    if k == 1:\n        return int(s[0:pos])\n    if (pos, k) in mem:\n        return mem[pos, k]\n    res = 0\n    for x in range(k - 1, pos):\n        res = max(res, dp(x, k - 1) * int(s[x:pos]))\n    mem[pos, k] = res\n    return res\nfor ca in range(0, int(input())):\n    n = int(input())\n    tot = 0\n    for i in range(0, 101):\n        m = 2 ** i - 1\n        w = (m + 1) * m // 2\n        if w <= n:\n            n -= w\n            tot += 1\n        else:\n            break\n    print(tot - 1)", "t = int(input())\nx = []\nfor i in range(t):\n    x.append(int(input()))\nfor i in x:\n    temp = i\n    acum = 0\n    altura = 0\n    count = 0\n    termine = True\n    while termine:\n        acum = 2 * acum + (altura + 1) ** 2\n        altura += altura + 1\n        temp = temp - acum\n        if temp >= 0:\n            count += 1\n        else:\n            termine = False\n    print(count)", "def solve(cells):\n    ans = 0\n    power = 0\n    prev = 0\n    length = prev + 2 ** power\n    while cells >= length * (length + 1) // 2:\n        cells -= length * (length + 1) // 2\n        prev = length\n        power += 1\n        ans += 1\n        length = prev + 2 ** power\n    return ans\nfor x in range(int(input())):\n    print(solve(int(input())))", "for i in range(int(input())):\n    a = int(input())\n    b = 1\n    c = 0\n    while a > 0:\n        a -= (2 ** b - 1) * 2 ** (b - 1)\n        b += 1\n        if a == 0:\n            c = b - 1\n        elif a < 0:\n            c = b - 2\n    print(c)", "t = int(input())\nwhile t > 0:\n    x = int(input())\n    ans = 0\n    lth = 1\n    p = 1\n    while x > 0:\n        square_req = lth * (lth + 1) // 2\n        if square_req > x:\n            break\n        else:\n            x = x - square_req\n            p = p * 2\n            lth = lth + p\n            ans = ans + 1\n    print(ans)\n    t = t - 1", "import bisect\nd = []\nk = 1\nwhile k <= 2000000000.0:\n    d.append(k * (k + 1) // 2 + (d[-1] if len(d) > 0 else 0))\n    k = 1 + 2 * k\nfor _ in range(int(input())):\n    num = int(input())\n    z = bisect.bisect(d, num, lo=0, hi=len(d))\n    print(z)", "from math import *\na = int(input())\nfor x in range(a):\n    b = int(input())\n    t = 1\n    h = 0\n    l = 1\n    if b == 1:\n        print(1)\n    else:\n        while b >= t:\n            b = b - t\n            h += 1\n            l = l * 2 + 1\n            t = ceil(l * (l + 1) / 2)\n        print(h)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    consumed = 1\n    reqcol = 1\n    count = 1\n    temp = 1\n    while True:\n        if n < consumed:\n            count -= 1\n            break\n        elif n == consumed:\n            break\n        reqcol += pow(2, count)\n        consumed += reqcol * (reqcol + 1) // 2\n        count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    consumed = 1\n    reqcol = 1\n    count = 1\n    temp = 1\n    while True:\n        if n < consumed:\n            count -= 1\n            break\n        elif n == consumed:\n            break\n        reqcol += temp * 2\n        temp *= 2\n        consumed += reqcol * (reqcol + 1) // 2\n        count += 1\n    print(count)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    now = 1\n    prev = 0\n    ans = 0\n    temp = now ** 2 + prev * 2\n    while n >= temp:\n        n -= temp\n        ans += 1\n        now *= 2\n        prev = temp\n        temp = now ** 2 + prev * 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sum1 = 0\n    base = 1\n    ans = 0\n    while sum1 <= n:\n        sum1 += base * (base + 1) // 2\n        base = base * 2 + 1\n        ans += 1\n    print(ans - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = -1\n    x = 0\n    while x <= n:\n        a += 1\n        k = 2 ** (a + 1) - 1\n        x += k * (k + 1) // 2\n    print(a)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    i = 0\n    cnt = -1\n    while n >= 0:\n        i += 1\n        cnt += 1\n        n2 = pow(2, i) - 1\n        n1 = (n2 * n2 + n2) // 2\n        n -= n1\n    print(cnt)", "def f(n):\n    total = 0\n    other = 1\n    z = 1\n    totaltillnow = 0\n    while totaltillnow < n:\n        totaltillnow += (other + 1) * other // 2\n        total += 1\n        z *= 2\n        other += z\n    else:\n        if totaltillnow > n:\n            return total - 1\n        else:\n            return total\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(f(n))", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    cnt = 0\n    n = int(input())\n    i = 0\n    while n >= 0:\n        i += 1\n        cnt = pow(2, i) - 1\n        n -= cnt * (cnt + 1) // 2\n    print(i - 1)", "def solve(x):\n    res = 0\n    i = 1\n    while x > 0:\n        ans = pow(2, i) - 1\n        temp = ans * (ans + 1) // 2\n        x -= temp\n        i += 1\n        res += 1\n    if x == 0:\n        print(res)\n    else:\n        print(res - 1)\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    x = I()\n    i = 0\n    c = 0\n    while True:\n        s = pow(2, i)\n        k = pow(2, i // 2) - 1\n        s = s + k * (k + 1)\n        if x < s:\n            break\n        x -= s\n        c += 1\n        i += 2\n    print(c)", "for _ in range(int(input())):\n    x = int(input())\n    count = 0\n    while x >= 0:\n        x -= 2 * (2 ** count) ** 2 - 2 ** count\n        count += 1\n    print(count - 1)", "a = [0, 1, 7, 35, 155, 651, 2667, 10795, 43435, 174251, 698027, 2794155, 11180715, 44731051, 178940587, 715795115, 2863245995, 11453115051, 45812722347, 183251413675, 733006703275, 2932028910251, 11728119835307, 46912487729835, 187649967696555, 750599904340651, 3002399684471467, 12009598872103595, 48038395756849835, 192153583564270251, 768614335330822827, 3074457343470774955, 12297829378178067115]\ny122 = int(input())\nfor __ in range(y122):\n    n = int(input())\n    i = 0\n    while a[i] <= n:\n        i += 1\n    print(i - 1)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    n = ini()\n    ans = 0\n    count = 1\n    while n > 0:\n        x = count * (count + 1) // 2\n        if n - x >= 0:\n            n -= x\n            ans += 1\n            count = count * 2 + 1\n        else:\n            break\n    print(ans)", "from sys import stdin, stdout\nfrom itertools import accumulate\nsmn = [1]\nfor i in range(32):\n    smn += [(smn[-1] + 1) * 2 - 1]\na = []\nfor v in smn:\n    a += [v * (v + 1) // 2]\na = list(accumulate(a))\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    ans = 0\n    for v in a:\n        if v > n:\n            break\n        ans += 1\n    print(ans)", "import sys\nimport bisect\n\ndef fun(a, x):\n    m = bisect.bisect_right(a, x)\n    return m\nt = int(input())\nk = 1\nsum = 0\na = []\nwhile sum < 1e+18:\n    k = k << 1\n    sum += k * (k - 1) // 2\n    a.append(sum)\nfor tc in range(t):\n    x = int(input())\n    print(fun(a, x))", "def fun(x):\n    i = 1\n    ct = 0\n    while i < 32 and x > 0:\n        x -= 2 ** (i - 1) * (2 ** i - 1)\n        i += 1\n        ct += 1\n    return ct if x == 0 else ct - 1\nfor _ in range(int(input())):\n    x = int(input())\n    print(fun(x))", "for _ in range(int(input())):\n    a = int(input())\n    count = 0\n    cur = 1\n    while a >= 0:\n        count += 1\n        a -= cur * (cur + 1) // 2\n        cur = 2 * cur + 1\n    print(count - 1)", "import bisect\np2 = [2 ** n - 1 for n in range(32)]\np2 = [x * (x + 1) // 2 for x in p2]\nfor i in range(1, 32):\n    p2[i] += p2[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect.bisect_right(p2, n) - 1)", "l = [1]\nfor i in range(70):\n    l.append(2 * l[-1] + 1)\nl = [ll * (ll + 1) // 2 for ll in l]\nlll = [l[0]]\nfor i in range(1, 70):\n    lll.append(lll[-1] + l[i])\nl = lll\nfor t in range(int(input())):\n    n = int(input())\n    for i in range(70):\n        if l[i] > n:\n            print(i)\n            break", "from math import *\n\ndef _in():\n    return [int(x) for x in input().split(' ')]\narr = [1]\nwhile arr[-1] <= 10 ** 18:\n    arr.append(arr[-1] * 2 + 1)\ntt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    (i, curr) = (0, 0)\n    while curr <= n:\n        curr = curr + arr[i] * (arr[i] + 1) // 2\n        i = i + 1\n    print(i - 1)", "def ans(x):\n    n = 1\n    m = 2 ** n - 1\n    temp = m * (m + 1) // 2\n    a = 0\n    while x - temp >= 0:\n        x -= temp\n        a += 1\n        n += 1\n        m = 2 ** n - 1\n        temp = m * (m + 1) // 2\n    return a\nm = int(input())\nfor i in range(m):\n    x = int(input())\n    print(ans(x))", "def testcase():\n    data = [1, 6, 28, 120, 496, 2016, 8128, 32640, 130816, 523776, 2096128, 8386560, 33550336, 134209536, 536854528, 2147450880, 8589869056, 34359607296, 137438691328, 549755289600, 2199022206976, 8796090925056, 35184367894528, 140737479966720, 562949936644096, 2251799780130816, 9007199187632128, 36028796884746240, 144115187807420416, 576460751766552576, 2305843008139952128]\n    n = int(input())\n    sum = data[0]\n    for i in range(1, len(data)):\n        if sum + data[i] > n:\n            print(i)\n            break\n        sum += data[i]\n    return\nt = int(input())\nfor _ in range(t):\n    testcase()", "def solve():\n    x = int(input())\n    s = 1\n    p = 2\n    ans = 0\n    while x:\n        total = s * (s + 1) // 2\n        if total > x:\n            break\n        ans += 1\n        x -= total\n        s = (1 << p) - 1\n        p += 1\n    print(ans)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "from bisect import bisect\nt = int(input())\nbuf = []\nINF = 10 ** 18\nstair = [1]\npre = [1]\nwhile pre[-1] <= INF:\n    p = stair[-1] * 2 + 1\n    s = p * (p + 1) // 2\n    stair.append(p)\n    pre.append(pre[-1] + s)\nfor _ in range(t):\n    n = int(input())\n    buf.append(bisect(pre, n))\nprint('\\n'.join(map(str, buf)))", "inf = int(1e+18)\nt = int(input(''))\narr = []\nfor i in range(t):\n    arr.append(int(input('')))\nfor i in arr:\n    x = i\n    sol = 0\n    n = 1\n    while x > 0:\n        x -= n * (n + 1) // 2\n        n = 2 * n + 1\n        if x >= 0:\n            sol += 1\n    print(sol)", "t = int(input())\n\ndef solve():\n    x = int(input())\n    tmp = 1\n    sol = 1\n    x -= 1\n    for i in range(1, 68):\n        tmp = tmp * 2 + 1\n        if tmp * (tmp + 1) // 2 > x:\n            break\n        x -= tmp * (tmp + 1) // 2\n        sol += 1\n    print(sol)\nfor tt in range(t):\n    solve()", "dp = [1]\ncurr = 2\nfor i in range(1, 31):\n    curr = 2 ** (2 * i)\n    dp.append(2 * dp[-1] + curr)\nfor i in range(1, 31):\n    dp[i] += dp[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    for i in range(len(dp)):\n        if dp[i] == n:\n            ans = i + 1\n            break\n        elif dp[i] > n:\n            ans = i\n            break\n    print(ans)", "x = 1\nls = []\nwhile x < 1e+18:\n    ls.append(x)\n    x *= 2\n    x += 1\nlsn = [0]\nfor i in range(len(ls)):\n    lsn.append(lsn[-1] + (ls[i] * ls[i] - ls[i]) // 2 + ls[i])\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    i = 0\n    while lsn[i + 1] <= x:\n        i += 1\n    print(i)", "def solve():\n    x = int(input())\n    answer = 0\n    cost = 0\n    total_cost = 0\n    while total_cost <= x:\n        cost = 2 * cost + 2 ** (2 * answer)\n        total_cost += cost\n        answer += 1\n    print(answer - 1)\nruns = int(input())\nwhile runs > 0:\n    solve()\n    runs -= 1", "t = int(input())\ndp = [1]\nwhile dp[-1] < 10 ** 18 + 1:\n    dp.append(dp[-1] * 2 + 4 ** len(dp))\nfrom itertools import accumulate\ndp = list(accumulate(dp))\nfrom bisect import bisect_left as bl, bisect_right as br\nfor i in range(t):\n    a = int(input())\n    print(br(dp, a))", "from sys import stdin\ninput = stdin.readline\na = [1, 3, 7]\nfor i in range(40):\n    a.append(a[-1] + a[-1] + 1)\na = [i * (i + 1) // 2 for i in a]\nfor _ in range(int(input())):\n    x = int(input())\n    y = 0\n    c = 0\n    for i in a:\n        if y + i > x:\n            break\n        y += i\n        c += 1\n    print(c)", "num = [1]\nfor j in range(2, 33):\n    num.append(num[-1] + (2 ** j - 1) * 2 ** j // 2)\nfor _ in range(int(input())):\n    x = int(input())\n    i = 0\n    while x >= num[i]:\n        i += 1\n    print(i)", "a = [1]\nb = [0]\ni = 2\nwhile b[-1] <= 10 ** 18:\n    a.append(a[-1] + i)\n    b.append(a[-2] * (a[-2] + 1) // 2)\n    i *= 2\nb = b[1:]\nfor _ in range(int(input())):\n    n = int(input())\n    sum = 0\n    for i in range(len(b)):\n        if sum + b[i] > n:\n            break\n        else:\n            sum += b[i]\n    print(i)", "import sys\nfrom math import sqrt, gcd, ceil, log, floor\nfrom bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heapify, heappush, heappop\ninput = sys.stdin.readline\nread = lambda : list(map(int, input().strip().split()))\nMOD = 998244353\n\ndef main():\n    ans = ''\n    arr = [1, 6, 28, 120, 496, 2016, 8128, 32640, 130816, 523776, 2096128, 8386560, 33550336, 134209536, 536854528, 2147450880, 8589869056, 34359607296, 137438691328, 549755289600, 2199022206976, 8796090925056, 35184367894528, 140737479966720, 562949936644096, 2251799780130816, 9007199187632128, 36028796884746240, 144115187807420416, 576460751766552576]\n    for i in range(1, 30):\n        arr[i] += arr[i - 1]\n    for _ in range(int(input())):\n        n = int(input())\n        ind = bisect(arr, n)\n        if ind < 30 and arr[ind] == n:\n            ind -= 1\n        ans += str(ind)\n        ans += '\\n'\n    print(ans)\nmain()", "import bisect\nt = int(input())\nnum = 1e+18\nnice = []\nstart = 1\ns = 1\nl = 1\nwhile s < num:\n    nice.append(s)\n    start = (l + 1) * (l + 1) + 2 * start\n    s += start\n    l = l + 1 + l\nnice.append(s)\nwhile t:\n    t -= 1\n    n = int(input())\n    s = 0\n    i = 0\n    print(bisect.bisect_right(nice, n))", "def sum(n):\n    n = n + 1\n    return 2 ** (2 * n - 1) - 2 ** (n - 1)\narray = [1]\nfor i in range(1, 32):\n    array.append(array[i - 1] + sum(i))\nfor t in range(int(input())):\n    x = int(input())\n    for i in range(0, 32):\n        if array[i] > x:\n            break\n    print(i)", "a = [1, 6, 28, 120, 496, 2016, 8128, 32640, 130816, 523776, 2096128, 8386560, 33550336, 134209536, 536854528, 2147450880, 8589869056, 34359607296, 137438691328, 549755289600, 2199022206976, 8796090925056, 35184367894528, 140737479966720, 562949936644096, 2251799780130816, 9007199187632128, 36028796884746240, 144115187807420416, 576460751766552576, 576460751766552576 * 2]\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    ans = 0\n    i = 0\n    while x >= 0:\n        if x >= a[i]:\n            x -= a[i]\n            i += 1\n            ans += 1\n        else:\n            break\n    print(ans)", "from sys import stdin, stdout\nfrom math import *\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        x = int(stdin.readline())\n        count = 0\n        size = 1\n        while True:\n            cellrequirement = int((size + 1) * size / 2)\n            if x >= cellrequirement:\n                x -= cellrequirement\n                count += 1\n                size = size * 2 + 1\n            else:\n                break\n        print(count)\nmain()", "king1 = [1]\nfor j in range(2, 33):\n    king1.append(king1[-1] + (2 ** j - 1) * 2 ** j // 2)\nt = int(input())\nfor q in range(t):\n    xxxxxx = int(input())\n    i = 0\n    for w in range(33):\n        if king1[i] > xxxxxx:\n            break\n        i += 1\n    print(i)", "def inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    x = inp()\n    res = 0\n    size = 1\n    stairs = 1\n    while x >= 0:\n        x -= size\n        res += 1\n        stairs += stairs + 1\n        size = stairs * (stairs + 1) // 2\n    print(res - 1)", "import math\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    cnt = 0\n    size = 1\n    while x > 0:\n        a = size * (size + 1) // 2\n        if x >= a:\n            cnt += 1\n            size = 2 * size + 1\n        x -= a\n    print(cnt)", "from sys import stdin\n\ndef get_int():\n    return int(stdin.readline())\n\ndef get_str():\n    return stdin.readline().strip()\n\ndef get_ints():\n    return map(int, stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef get_array2d(row):\n    return [list(map(int, stdin.readline().strip().split())) for _ in range(row)]\nT = get_int()\nfor _ in range(T):\n    X = get_int()\n    (noOfCell, d, ans) = (8, 2, 1)\n    count = noOfCell - d + 1\n    while count <= X:\n        noOfCell <<= 2\n        d <<= 1\n        count += noOfCell - d\n        ans += 1\n    print(ans)", "import math\ntest = int(input())\nfor i in range(test):\n    x = int(input())\n    mark = 0\n    xx = 1\n    while x > 0:\n        a = xx * (xx + 1) // 2\n        while False:\n            break\n        if x >= a:\n            mark += 1\n            xx = 2 * xx + 1\n        x -= a\n    while False:\n        break\n    print(mark)", "import bisect\nbis = bisect.bisect_right\na = 1\nl = []\nl.append(0)\nfor i in range(1, 35):\n    a = a * 2\n    k = a - 1\n    n = k * (k + 1)\n    n = n // 2\n    l.append(n)\nl1 = l[:]\nl = [l1[0]]\nfor i in l1[1:]:\n    l.append(i + l[-1])\nfor _ in range(int(input())):\n    n = int(input())\n    ind = 0\n    ind = bis(l, n)\n    ind = ind - 1\n    print(ind)", "ty = [1]\np = 2\nwhile True:\n    p = p * 2\n    ty.append(p - 1)\n    if p > 10 ** 18:\n        break\nt = int(input())\nfor j in range(0, t):\n    x = int(input())\n    s = 0\n    c = 0\n    for o in ty:\n        s = s + o * (o + 1) // 2\n        if s <= x:\n            c = c + 1\n        else:\n            break\n    print(c)", "def recursive(n):\n    x1 = 1\n    x2 = 1\n    x3 = 1\n    x4 = 1\n    while x3 <= n:\n        x2 = x2 * 2 + 1\n        x1 = x2 * (x2 + 1) // 2\n        x3 = x3 + x1\n        x4 = x4 + 1\n    x4 = x4 - 1\n    return x4\na = int(input())\nfor i in range(a):\n    b = int(input())\n    print(recursive(b))", "t = int(input())\nwhile t:\n    t -= 1\n    a = int(input())\n    n = 1\n    nnn = 1\n    cnt = 0\n    while a >= nnn:\n        a -= nnn\n        n = n * 2 + 1\n        nnn = n * (n + 1) // 2\n        cnt += 1\n    print(cnt)", "def main():\n    for _ in range(int(input())):\n        x = int(input())\n        stairs = 1\n        n = 1\n        count = 1\n        sum = 1\n        x -= 1\n        while True:\n            n += 1\n            stairs = 2 ** n - 1\n            sum = stairs * (stairs + 1) // 2\n            if sum > x:\n                break\n            x -= sum\n            count += 1\n        print(count)\nmain()", "N = 70\nX = [(-1 + (1 << i + 1)) * (1 << i) for i in range(N)]\n\ndef solve(x):\n    res = 0\n    tmp = x\n    for i in range(N):\n        if tmp >= X[i]:\n            tmp -= X[i]\n            res += 1\n    return res\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    print(solve(x))", "import bisect\nx = []\nfor i in range(55):\n    if i == 0:\n        x.append(1)\n    else:\n        x.append(2 * x[-1] + 4 ** i)\ns = []\nfor i in range(len(x)):\n    if i == 0:\n        s.append(1)\n    else:\n        s.append(s[-1] + x[i])\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    j = bisect.bisect_right(s, p)\n    print(j)", "N = 35\ndp = [0] * N\ndp[1] = 1\ncnt = 1\nfor i in range(2, N):\n    cnt = 2 * cnt + 1\n    dp[i] = cnt * (cnt + 1) // 2\n    dp[i] += dp[i - 1]\nfor _ in range(int(input())):\n    x = int(input())\n    ans = 1\n    pos = 1\n    for i in range(1, N - 1):\n        if x < dp[i + 1]:\n            pos = i\n            break\n    print(pos)", "import math\nn = input()\nnumarr = []\nfor i in range(int(n)):\n    numarr.append(int(input()))\nfor num in numarr:\n    count = 0\n    it = 1\n    while num > 0:\n        cubes = 2 * (it * it) - it\n        if num >= cubes:\n            num -= cubes\n            it *= 2\n            count += 1\n        else:\n            break\n    print(count)", "def formula(x):\n    return sr[x]\nar = [0] * 60\nr2 = 2\nfor i in range(1, 60):\n    ar[i] = (r2 - 1) * r2 // 2\n    r2 *= 2\nsr = [0] * 60\nsr[1] = ar[1]\nfor i in range(2, 60):\n    sr[i] = sr[i - 1] + ar[i]\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    l = 0\n    r = 60\n    best = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        if formula(mid) <= x:\n            best = max(best, mid)\n            l = mid + 1\n        else:\n            r = mid - 1\n    print(best)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    va = 0\n    val = 0\n    i = 0\n    while val <= n:\n        va += pow(2, i)\n        i += 1\n        ans += 1\n        val += va * (va + 1) // 2\n    print(ans - 1)", "ar = []\nr = 1\nwhile 1:\n    x = r * (r + 1) // 2\n    if x > 1e+20:\n        break\n    ar.append(x)\n    r = r * 2 + 1\nt = int(input())\nfor a0 in range(t):\n    x = int(input())\n    r = 0\n    while x > 0:\n        r += 1\n        x -= ar[r]\n    print(r)", "import math\nt = int(input())\nMAX_RANGE = 64\na_vec = [1 for _ in range(MAX_RANGE)]\nfor i in range(2, MAX_RANGE):\n    a_vec[i] = 2 * a_vec[i - 1] + 2 ** (2 * (i - 1))\na_sum = [a_vec[i] for i in range(MAX_RANGE)]\nfor i in range(2, MAX_RANGE):\n    a_sum[i] = a_sum[i] + a_sum[i - 1]\nfor _ in range(t):\n    x = int(input())\n    for i in range(1, MAX_RANGE):\n        if a_sum[i] == x:\n            print(i)\n            break\n        elif a_sum[i] > x:\n            print(i - 1)\n            break", "for _ in [0] * int(input()):\n    n = int(input())\n    o = 0\n    c = 1\n    while n >= 0:\n        n -= c * (c + 1) // 2\n        o += 1\n        c = 2 * c + 1\n    print(o - 1)", "for s in [*open(0)][1:]:\n    x = int(s)\n    i = -1\n    while x >= 0:\n        i += 1\n        k = 2 ** i\n        x -= 2 * k * k - k\n    print(i)", "mem = {}\n\ndef dp(pos, k):\n    if k == 1:\n        return int(s[0:pos])\n    if (pos, k) in mem:\n        return mem[pos, k]\n    res = 0\n    for x in range(k - 1, pos):\n        res = max(res, dp(x, k - 1) * int(s[x:pos]))\n    mem[pos, k] = res\n    return res\nfor ca in range(0, int(input())):\n    n = int(input())\n    tot = 0\n    for i in range(0, 101):\n        m = 2 ** i - 1\n        w = (m + 1) * m // 2\n        if w <= n:\n            n -= w\n            tot += 1\n        else:\n            break\n    print(tot - 1)", "for _ in range(int(input())):\n    x = int(input())\n    i = -1\n    while x >= 0:\n        i += 1\n        k = 2 ** i\n        x -= 2 * k * k - k\n    print(i)", "b = []\nk = 2\nfor i in range(30):\n    b.append((k - 1) * k // 2)\n    k *= 2\nfor _ in range(int(input())):\n    n = int(input())\n    ss = 0\n    for i in b:\n        if n >= i:\n            n -= i\n            ss += 1\n    print(ss)", "arr = [1]\npo = 4\nwhile arr[-1] < 10 ** 18:\n    k = po - 1\n    arr.append(k * (k + 1) // 2)\n    po = po * 2\npre_sum = [0]\nfor i in range(len(arr)):\n    pre_sum.append(arr[i] + pre_sum[-1])\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect.bisect(pre_sum, n) - 1)", "def x():\n    N = int(input())\n    for i in range(N):\n        A = int(input())\n        ans = 1\n        count = 0\n        B = 1\n        while A >= ans:\n            A = A - ans\n            ans = ans * 2 + B * 2 * (B * 2)\n            count += 1\n            B = B * 2\n        print(count)\nx()", "a = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647]\nt = input()\nt = int(t)\nb = [0 for i in range(40)]\nfor i in range(1, 32):\n    b[i] = a[i] * (a[i] + 1) // 2\nfor i in range(1, t + 1):\n    x = input()\n    x = int(x)\n    ans = 0\n    sum = 0\n    for a in b:\n        if sum + a <= x:\n            sum += a\n            ans += 1\n        else:\n            break\n    print(ans - 1)", "for _ in range(int(input())):\n    x = int(input())\n    i = -1\n    while x >= 0:\n        i += 1\n        k = 2 ** i\n        x -= 2 * k * k - k\n    print(i)", "for _ in range(int(input())):\n    x = int(input())\n    i = 1\n    ans = 0\n    while True:\n        v = i * (i + 1) // 2\n        if x < v:\n            break\n        x = x - v\n        i = i * 2\n        i = i + 1\n        ans = ans + 1\n    print(ans)", "dp = []\ndp.append((1, 1))\nfor i in range(1, 31):\n    dp.append((2 * dp[i - 1][0] + 1, 2 * dp[i - 1][1] + (dp[i - 1][0] + 1) ** 2))\nt = int(input())\nfor i in range(t):\n    tmp = 0\n    x = int(input())\n    ind = 0\n    while ind < len(dp) and tmp < x:\n        tmp += dp[ind][1]\n        ind += 1\n    if tmp > x:\n        ind -= 1\n    print(ind)", "for i in range(int(input())):\n    n = int(input())\n    res = 1\n    b = 3\n    n -= 1\n    while b * (b + 1) // 2 <= n:\n        res += 1\n        n -= b * (b + 1) // 2\n        b = 2 * b + 1\n    print(res)", "for f in range(int(input())):\n    n = int(input())\n    i = 1\n    j = i\n    cnt = j - 1\n    while i <= n:\n        cnt = cnt + 1\n        j = 2 * j\n        i = i + (j + 1) * (j + 2) // 2\n        j = j + 1\n    print(cnt)"]