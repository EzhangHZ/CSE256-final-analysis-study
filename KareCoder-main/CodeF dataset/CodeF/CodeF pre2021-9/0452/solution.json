["res = 0\nsumm = 0\nmy_set = {0}\nn = int(input())\nmas = list(map(int, input().split()))\nfor num in mas:\n    summ += num\n    if summ in my_set:\n        my_set = {0}\n        res += 1\n        summ = num\n    my_set.add(summ)\nprint(res)", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    pre = set()\n    pre.add(0)\n    curr = 0\n    cnt = 0\n    for i in range(n):\n        curr += l[i]\n        if curr in pre:\n            cnt += 1\n            pre = set()\n            pre.add(0)\n            curr = l[i]\n        pre.add(curr)\n    return cnt\nt = 1\nfor i in range(t):\n    print(func())", "n = int(input())\nsm = {0}\nc = s = 0\nfor x in map(int, input().split()):\n    s += x\n    if s in sm:\n        sm = {0, x}\n        s = x\n        c += 1\n    else:\n        sm.add(s)\nprint(c)", "i = int(input())\nd = {0}\ns = ans = 0\nfor x in list(map(int, input().split())):\n    s += x\n    if s in d:\n        ans += 1\n        s = x\n        d = {0}\n    d.add(s)\nprint(ans)", "_ = int(input())\nsumlist = {0}\nsum = result = 0\nfor i in list(map(int, input().split())):\n    sum += i\n    if sum in sumlist:\n        result += 1\n        sum = i\n        sumlist = {0}\n    sumlist.add(sum)\nprint(result)", "input()\na = {0}\nc = s = 0\nfor x in map(int, input().split()):\n    s += x\n    if s in a:\n        a = {0, x}\n        s = x\n        c += 1\n    else:\n        a.add(s)\nprint(c)", "import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    n = Read.int()\n    a = Read.list_int()\n    tmp = {0: 1}\n    s = 0\n    res = 0\n    for v in a:\n        s += v\n        if s in tmp:\n            res += 1\n            s = v\n            tmp = {0: 1}\n        tmp[s] = 1\n    print(res)\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()", "def cal(n, arr):\n    dic = {}\n    res = 0\n    cur_sum = 0\n    for num in arr:\n        cur_sum += num\n        if cur_sum in dic or cur_sum == 0:\n            res += 1\n            dic = {}\n            cur_sum = num\n        dic[cur_sum] = True\n    return res\nn = int(input())\narr = list(map(int, input().split()))\nprint(cal(n, arr))", "while True:\n    try:\n        n = int(input())\n        tmp = list(map(int, input().split()))\n        mmap = {0}\n        sum = 0\n        ans = 0\n        for i in tmp:\n            sum += i\n            if sum in mmap:\n                ans += 1\n                mmap = {0}\n                sum = i\n            mmap.add(sum)\n        print(ans)\n    except EOFError:\n        break", "_ = int(input())\nsumset = {0}\nsum = result = 0\nfor i in list(map(int, input().split())):\n    sum += i\n    if sum in sumset:\n        result += 1\n        sum = i\n        sumset = {0}\n    sumset.add(sum)\nprint(result)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {0}\n    acc = 0\n    ans = 0\n    for x in a:\n        acc += x\n        if acc in s:\n            ans += 1\n            s = {0, x}\n            acc = x\n        else:\n            s.add(acc)\n    print(ans)\ntn = 1\nfor _ in range(tn):\n    main()", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nsegments = {0}\n(cnt, tmp) = (0, 0)\nfor i in range(n):\n    tmp += a[i]\n    if tmp in segments:\n        cnt += 1\n        segments = {0}\n        tmp = a[i]\n    segments.add(tmp)\nprint(cnt)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    d[0] = -1\n    s = 0\n    cnt = 0\n    for i in a:\n        s += i\n        if s in d:\n            cnt += 1\n            d = {}\n            d[0] = -1\n            s = i\n        d[s] = i\n    print(cnt)\n    return\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "def f(n, a):\n    res = 0\n    seen = {}\n    su = 0\n    steps = 0\n    for i in a:\n        su += i\n        if su == 0 or su in seen:\n            steps += 1\n            seen = {i: 0}\n            su = i\n        else:\n            seen[su] = 0\n    return steps\nn = int(input())\na = [int(x) for x in input().split()]\nprint(f(n, a))", "def checker(lst, n):\n    (k, s, c) = (0, set(), 0)\n    for i in range(n):\n        k += lst[i]\n        if k == 0 or k in s:\n            c += 1\n            s.clear()\n            k = lst[i]\n        s.add(k)\n    return c\nn = int(input())\na = [int(i) for i in input().split()]\nprint(checker(a, n))", "from math import sqrt\nfrom sys import stdin, stdout\nn = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\nshan = {0}\ns = 0\ncount = 0\nfor a in l:\n    s += a\n    if s in shan:\n        count += 1\n        shan = {0}\n        s = a\n    shan.add(s)\nprint(count)", "n = int(input())\ng = {0}\nans = 0\ns = 0\nfor i in map(int, input().split()):\n    s += i\n    if s in g:\n        g = {0}\n        ans += 1\n        s = i\n    g.add(s)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ns = {0}\nsum = ans = 0\nfor i in a:\n    sum += i\n    if sum in s:\n        ans += 1\n        sum = i\n        s = {0}\n    s.add(sum)\nprint(ans)", "def get(l: list) -> int:\n    sum_lst = []\n    index = -1\n    for i in range(len(l)):\n        if not sum_lst:\n            n = l[i]\n        else:\n            n = sum_lst[i - 1] + l[i]\n        if n == 0 or n in sum_lst:\n            index = i\n            break\n        sum_lst.append(n)\n    if index == -1:\n        return 0\n    cnt = 1 + get(l[index:])\n    return cnt\n\ndef getnew(l: list) -> int:\n    st = set()\n    new_sum = 0\n    cnt = 0\n    for i in range(len(l)):\n        n = new_sum + l[i]\n        if n in st or n == 0:\n            cnt += 1\n            st = set()\n            st.add(l[i])\n            new_sum = l[i]\n        else:\n            st.add(n)\n            new_sum = n\n    return cnt\nn = int(input())\nl = input().split()\nl = [int(x) for x in l]\nprint(getnew(l))", "def main():\n    (_, array) = (int(input()), list(map(int, input().split(' '))))\n    answer = 0\n    sumSpace = [0]\n    for elem in array:\n        sumSpace.append(sumSpace[-1] + elem)\n    sumSpace.pop(0)\n    verify = {0}\n    q = 0\n    for elem in sumSpace:\n        if elem in verify:\n            verify.clear()\n            verify.add(q)\n            answer += 1\n        verify.add(elem)\n        q = elem\n    print(answer)\nmain()", "def main():\n    (_, array) = (int(input()), list(map(int, input().split(' '))))\n    answer = 0\n    sumSpace = [0]\n    for elem in array:\n        sumSpace.append(sumSpace[-1] + elem)\n    sumSpace.pop(0)\n    verify = {0}\n    q = 0\n    for elem in sumSpace:\n        if elem in verify:\n            verify = {q}\n            answer += 1\n        verify.add(elem)\n        q = elem\n    print(answer)\nmain()", "n = int(input())\narr = list(map(int, input().split()))\nsm = 0\nsums = {}\nans = 0\nfor a in arr:\n    sm += a\n    if not sm or sm in sums:\n        ans += 1\n        sums = {}\n        sm = a\n    sums[sm] = True\nprint(ans)", "def subArrayExists(arr, n):\n    n_sum = 0\n    s = set()\n    c = 0\n    for i in range(n):\n        n_sum += arr[i]\n        if n_sum == 0 or n_sum in s:\n            c = c + 1\n            s.clear()\n            n_sum = arr[i]\n        s.add(n_sum)\n    return c\nn = int(input())\na = list(map(int, input().split()))\nl = subArrayExists(a, n)\nprint(l)", "input()\na = {0}\nc = s = 0\nfor x in map(int, input().split()):\n    s += x\n    if s in a:\n        a = {0, x}\n        s = x\n        c += 1\n    else:\n        a.add(s)\nprint(c)", "input()\na = {0}\nc = s = 0\nfor x in map(int, input().split()):\n    s += x\n    if s in a:\n        a = {0, x}\n        s = x\n        c += 1\n    else:\n        a.add(s)\nprint(c)", "input()\na = {0}\nc = t = 0\nfor x in map(int, input().split()):\n    t += x\n    if t in a:\n        a = {0, x}\n        t = x\n        c += 1\n    else:\n        a.add(t)\nprint(c)", "n = int(input())\na = [int(i) for i in input().split()]\nvisited = {0: 1}\nnumber_of_inserts = 0\nprefix_sum = 0\nfor a_i in a:\n    prefix_sum += a_i\n    if prefix_sum not in visited:\n        visited[prefix_sum] = 1\n    else:\n        number_of_inserts += 1\n        visited = {0: 1, a_i: 1}\n        prefix_sum = a_i\nprint(number_of_inserts)", "import math\nn = int(input())\na = list(map(int, input().split()))\nm = {0: 1}\nans = 0\ns = 0\nfor i in range(n):\n    s += a[i]\n    if s in m:\n        s = a[i]\n        ans += 1\n        m = {0: 1, a[i]: 1}\n    else:\n        m[s] = 1\nprint(ans)", "num = int(input())\nnint = [int(i) for i in input().split()]\ns = {0}\n(sm, cnt) = (0, 0)\nfor i in nint:\n    sm += i\n    if sm in s:\n        s = {0}\n        cnt += 1\n        sm = i\n    s.add(sm)\nprint(cnt)", "n = int(input())\narr = list(map(int, input().split(' ')))\ns = {arr[0]}\nsm = arr[0]\ncnt = 0\nfor i in range(1, n):\n    sm += arr[i]\n    if sm == 0 or sm in s:\n        s = {arr[i]}\n        sm = arr[i]\n        cnt += 1\n    else:\n        s.add(sm)\nprint(cnt)", "def nonZeroSegment(n, arr):\n    count = 0\n    map = {0: 0}\n    sum = 0\n    for i in range(0, n):\n        sum += arr[i]\n        if sum in map:\n            count += 1\n            map = {}\n            map = {0: 0, arr[i]: arr[i]}\n            sum = arr[i]\n        map[sum] = sum\n    print(count)\n    return\nn = int(input())\narr = [int(i) for i in input().split()][:n]\nnonZeroSegment(n, arr)", "n = int(input())\narr = list(map(int, input().split()))\ncount = 0\ndic = {}\ncurSum = 0\nfor i in arr:\n    if curSum + i == 0 or curSum + i in dic:\n        count += 1\n        curSum = i\n        dic = {}\n        dic[i] = 1\n    else:\n        curSum += i\n        dic[curSum] = 1\nprint(count)", "n = int(input())\ndata = list(map(int, input().split()))\ncheck_dict = {0: True}\nsum = 0\nresult = 0\nfor i in range(n):\n    sum += data[i]\n    if check_dict.get(sum):\n        result += 1\n        check_dict = {0: True, data[i]: True}\n        sum = data[i]\n    else:\n        check_dict[sum] = True\nprint(result)", "n = int(input())\ndata = list(map(int, input().split()))\ncheck_dict = {0: True}\nsum = 0\nresult = 0\nfor i in range(n):\n    sum += data[i]\n    if check_dict.get(sum):\n        result += 1\n        check_dict = {0: True, data[i]: True}\n        sum = data[i]\n    else:\n        check_dict[sum] = True\nprint(result)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nans = 0\nsum = 0\nx = {0}\nfor item in l:\n    sum += item\n    if sum in x:\n        x = {0, item}\n        ans += 1\n        sum = item\n    else:\n        x.add(sum)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\n(sm, ans) = (0, 0)\nst = set()\nst.add(0)\nfor x in a:\n    sm += x\n    if sm in st:\n        ans += 1\n        st.clear()\n        st.add(0)\n        sm = x\n    st.add(sm)\nprint(ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nn = I()\nl = L()\ns = {0}\nc = a = 0\nfor i in range(n):\n    a += l[i]\n    if a in s:\n        s = {0, l[i]}\n        c += 1\n        a = l[i]\n    else:\n        s.add(a)\nprint(c)", "import sys, threading\nimport math\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef rl(type):\n    return [type(w) for w in input().split()]\n\ndef reverse(arr):\n    return arr[-1::-1]\n\ndef mod(a, m):\n    return (a % m + m) % m\n\ndef check_prime(n):\n    temp = int(math.sqrt(n) + 1)\n    for i in range(2, temp):\n        if n % i == 0:\n            return False\n    return True\n\ndef create_graph(n):\n    graph = {}\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return graph\n\ndef main():\n    n = int(input())\n    arr = rl(int)\n    d = defaultdict(int)\n    d[0] = 1\n    prefixSum = 0\n    result = 0\n    for i in arr:\n        prefixSum += i\n        if prefixSum == 0 or d.get(prefixSum) is not None:\n            result += 1\n            d = defaultdict()\n            d[0] = 1\n            prefixSum = i\n        d[prefixSum] = 1\n    print(result)\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "n = int(input())\narr = map(int, input().split())\nseen = {0}\ncount = 0\ntotal = 0\nfor n in arr:\n    total += n\n    if total in seen:\n        count += 1\n        total = n\n        seen = {0}\n    seen.add(total)\nprint(count)", "from sys import stdin, stdout\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nimport math\nI = lambda : map(int, stdin.readline().split())\nI1 = lambda : stdin.readline()\n\ndef fun(a, n):\n    s = set()\n    s.add(0)\n    c = 0\n    Sum = 0\n    for x in a:\n        Sum += x\n        if Sum in s:\n            c += 1\n            s = set()\n            s.add(0)\n            s.add(x)\n            Sum = x\n        else:\n            s.add(Sum)\n    return c\nn = int(I1())\na = list(I())\nprint(fun(a, n))", "n = int(input())\nar = list(map(int, input().split()))\n(sm, cnt) = (0, 0)\nsaveSm = {0}\nfor x in ar:\n    sm += x\n    if sm in saveSm:\n        saveSm = {0}\n        sm = x\n        cnt += 1\n    saveSm.add(sm)\nprint(cnt)", "n = int(input())\ng = {0}\nans = 0\ncs = 0\nfor i in map(int, input().split()):\n    cs += i\n    if cs in g:\n        g = {0, i}\n        ans += 1\n        cs = i\n    else:\n        g.add(cs)\nprint(ans)", "n = int(input())\na = [*map(int, input().split())]\ng = {0}\nans = 0\ncur = 0\nfor i in a:\n    cur += i\n    if cur in g:\n        ans += 1\n        g = {0, i}\n        cur = i\n    else:\n        g.add(cur)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ns = {0}\nsum = ans = 0\nfor i in a:\n    sum += i\n    if sum in s:\n        ans += 1\n        sum = i\n        s = {0}\n    s.add(sum)\nprint(ans)", "input()\na = {0}\nans = sum = 0\nfor i in map(int, input().split()):\n    sum += i\n    if sum in a:\n        a = {0}\n        sum = i\n        ans += 1\n    a.add(sum)\nprint(ans)", "n = int(input())\narray = list(map(int, input().split()))\nmark = {0: True}\nans = 0\npreSum = 0\nfor digit in array:\n    preSum += digit\n    if mark.get(preSum, False):\n        ans += 1\n        mark = {0: True}\n        preSum = digit\n    mark[preSum] = True\nprint(ans)", "n = int(input())\ndata = list(map(int, input().split()))\ncheck_dict = {0: True}\nsum = 0\nresult = 0\nfor i in range(n):\n    sum += data[i]\n    if check_dict.get(sum):\n        check_dict = {0: True, data[i]: True}\n        sum = data[i]\n        result += 1\n    else:\n        check_dict[sum] = True\nprint(result)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\narr = list(map(int, input().split(' ')))\nd = set()\nd.add(0)\nsum = 0\nans = 0\nfor i in range(n):\n    sum += arr[i]\n    if sum in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        sum = arr[i]\n    d.add(sum)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\nnumbers = list(map(int, input().split()))\npr = set()\npr.add(0)\ncur_sum = 0\ncounter = 0\nfor i in range(0, n):\n    cur_sum += numbers[i]\n    if cur_sum in pr:\n        counter += 1\n        cur_sum = numbers[i]\n        pr.clear()\n        pr.add(0)\n        pr.add(numbers[i])\n    else:\n        pr.add(cur_sum)\nprint(counter)", "n = int(input())\nl1 = list(map(int, input().split()))\ns1 = set()\ns1.add(0)\ntotal = 0\nans = 0\nfor i in range(n):\n    total += l1[i]\n    if total in s1:\n        ans += 1\n        s1 = set()\n        s1.add(0)\n        total = l1[i]\n    s1.add(total)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nnum = {0}\n(count, s) = (0, 0)\nfor i in l:\n    s += i\n    if s in num:\n        num = {0}\n        count += 1\n        s = i\n    num.add(s)\nprint(count)", "n = int(input())\nvals = [int(x) for x in input().split()]\nsum = 0\nseen_sums = {0}\ncount = 0\nfor x in vals:\n    sum += x\n    if sum in seen_sums:\n        count += 1\n        seen_sums = {0, x}\n        sum = x\n    else:\n        seen_sums.add(sum)\nprint(count)", "def solve(a):\n    n = len(a)\n    seen = set([0])\n    (ans, pre) = (0, 0)\n    for i in range(n):\n        pre += a[i]\n        if pre in seen:\n            ans += 1\n            pre = a[i]\n            seen = set([0])\n        seen.add(pre)\n    return ans\nn = int(input())\na = [int(x) for x in input().split()]\nprint(solve(a))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\na = list(map(int, input().split()))\nd = {0}\nans = total = 0\nfor i in a:\n    total += i\n    if total in d:\n        ans += 1\n        d = {0}\n        total = i\n    d.add(total)\nprint(ans)", "import sys\nfrom collections import defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef nzs(arr):\n    ans = 0\n    seen = set()\n    seen.add(0)\n    pref = 0\n    for n in arr:\n        pref += n\n        if pref in seen:\n            ans += 1\n            seen = set([0])\n            pref = n\n        seen.add(pref)\n    return ans\ninput = load_sys()\nN = int(input[0])\ntest_cases = []\ninput[1] = input[1].split()\ninput[1] = [int(x) for x in input[1]]\nprint(nzs(input[1]))", "n = int(input())\ns = list(map(int, input().split()))\nb = set()\nb.add(0)\n(cur, counter) = (0, 0)\nfor i in range(0, n):\n    cur += s[i]\n    if cur in b:\n        cur = s[i]\n        counter += 1\n        b = set()\n        b.add(0)\n        b.add(cur)\n    else:\n        b.add(cur)\nprint(counter)", "input()\na = map(int, input().split())\np = set([0])\nc = 0\nans = 0\nfor x in a:\n    c += x\n    if c in p:\n        ans += 1\n        p = set([0])\n        c = x\n    p.add(c)\nprint(ans)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nn = int(input())\na = [int(i) for i in input().split()]\ns = set()\nps = ans = 0\nfor i in range(n):\n    ps += a[i]\n    if ps == 0 or ps in s:\n        ans += 1\n        s.clear()\n        ps = a[i]\n    s.add(ps)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "def solve(n, res):\n    m = set()\n    m.add(0)\n    s = 0\n    ans = 0\n    for x in res:\n        s += x\n        if s in m:\n            ans += 1\n            m = set()\n            m.add(0)\n            s = x\n        m.add(s)\n    return ans\nn = int(input())\nres = []\nin_ = map(int, input().split(' '))\nfor x in in_:\n    res.append(int(x))\nprint(solve(n, res))", "n = int(input())\ns = [int(x) for x in input().split()]\nhashs = {0: 1}\nc = 0\ntots = 0\nfor i in s:\n    c += i\n    if c in hashs:\n        tots += 1\n        c = i\n        hashs = {0: 1}\n        hashs[c] = 1\n    else:\n        hashs[c] = 1\nprint(tots)", "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nS = 0\nP = {0}\nans = 0\nfor a in A:\n    S += a\n    if S in P:\n        P = {0}\n        S = a\n        ans += 1\n    P.add(S)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ns = {0}\n(sm, cnt) = (0, 0)\nfor i in a:\n    sm += i\n    if sm in s:\n        s = {0}\n        cnt += 1\n        sm = i\n    s.add(sm)\nprint(cnt)", "num = int(input())\nnint = [int(i) for i in input().split()]\ns = {0}\n(sm, cnt) = (0, 0)\nfor i in nint:\n    sm += i\n    if sm in s:\n        s = {0}\n        cnt += 1\n        sm = i\n    s.add(sm)\nprint(cnt)", "n = input()\nans = sum = 0\nlist = {0}\nfor k in map(int, input().split()):\n    sum += k\n    if sum in list:\n        sum = k\n        list = {0, sum}\n        ans += 1\n    else:\n        list.add(sum)\nprint(ans)", "n = int(input())\na = [*map(int, input().split())]\nd = set()\nans = sm = 0\nd.add(0)\nfor i in a:\n    sm += i\n    if sm in d:\n        ans += 1\n        d = set([0, i])\n        sm = i\n    else:\n        d.add(sm)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\nA = list(map(int, input().split()))\nd = {}\nans = 0\nd[A[0]] = 1\ns = A[0]\nst = 0\nfor i in range(1, n):\n    s += A[i]\n    if s in d.keys() or s == 0:\n        ans += 1\n        s = A[i]\n        d = {}\n        d[s] = 1\n    else:\n        d[s] = 1\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\np = {0: 1}\nc = 0\nresult = 0\nfor i in range(n):\n    c += a[i]\n    if c in p:\n        result += 1\n        p = {0: 1}\n        c = a[i]\n    p[c] = 1\nprint(result)", "n = int(input())\nl = list(map(int, input().split()))\ns = set()\ns.add(0)\ncs = 0\nans = 0\nfor i in l:\n    cs += i\n    if cs in s:\n        ans += 1\n        s = set()\n        s.add(0)\n        cs = i\n        s.add(i)\n    else:\n        s.add(cs)\nprint(ans)", "n = int(input())\nli = list(map(int, input().split()))\nnew_sum = set()\ns = 0\nnew_sum.add(s)\nans = 0\nfor i in li:\n    s += i\n    if s not in new_sum:\n        new_sum.add(s)\n    else:\n        ans += 1\n        s = i\n        new_sum = set()\n        new_sum.add(0)\n        new_sum.add(i)\nprint(ans)", "import sys, threading\nimport math\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef rl(type):\n    return [type(w) for w in input().split()]\n\ndef reverse(arr):\n    return arr[-1::-1]\n\ndef mod(a, m):\n    return (a % m + m) % m\n\ndef check_prime(n):\n    temp = int(math.sqrt(n) + 1)\n    for i in range(2, temp):\n        if n % i == 0:\n            return False\n    return True\n\ndef create_graph(n):\n    graph = {}\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return graph\n\ndef main():\n    n = int(input())\n    arr = rl(int)\n    d = defaultdict(int)\n    d[0] = 1\n    prefixSum = 0\n    result = 0\n    for i in arr:\n        prefixSum += i\n        if prefixSum == 0:\n            result += 1\n            d = defaultdict()\n            d[i] = 1\n            d[0] = 1\n            prefixSum = i\n        elif d.get(prefixSum) is not None:\n            result += 1\n            d = defaultdict()\n            d[i] = 1\n            prefixSum = i\n        d[prefixSum] = 1\n    print(result)\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "n = int(input())\nl = list(map(int, input().split()))\nd = set([0])\nsumm = 0\nans = 0\nfor i in l:\n    summ += i\n    if summ == 0 or summ in d:\n        d = set([0])\n        summ = i\n        ans += 1\n    d.add(summ)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\narr = set()\narr.add(0)\nx = 0\nans = 0\nfor i in a:\n    x += i\n    if x in arr:\n        ans += 1\n        arr = set()\n        arr.add(0)\n        x = i\n    arr.add(x)\nprint(ans)", "input()\nli = list(map(int, input().split()))\ns = {0}\n(count, sm) = (0, 0)\nfor i in li:\n    sm = sm + i\n    if sm in s:\n        s = {0}\n        count = count + 1\n        sm = i\n    s.add(sm)\nprint(count)", "n = int(input())\narray = list(map(int, input().split()))\ns = {0}\n(sm, cnt) = (0, 0)\nfor i in array:\n    sm += i\n    if sm in s:\n        s = {0}\n        cnt += 1\n        sm = i\n    s.add(sm)\nprint(cnt)", "case = int(input())\ns = {0}\ncur = 0\nans = 0\nlst = [int(x) for x in input().split(' ')]\nfor i in range(case):\n    cur += lst[i]\n    if cur in s:\n        ans += 1\n        s = {0}\n        cur = lst[i]\n    s.add(cur)\nprint(ans)", "n = int(input())\narr = list(map(int, input().strip().split()))\nd = {}\nd[0] = -1\nans = s = curr = 0\nfor i in range(len(arr)):\n    s += arr[i]\n    if s in d and curr <= d[s] + 1:\n        ans += 1\n        curr = i\n    d[s] = i\nprint(ans)", "n = int(input())\na = input().split()\ns = [0]\nfor ai in a:\n    s.append(s[-1] + int(ai))\nanswer = 0\np = 0\nss = set()\nfor si in s:\n    if si in ss:\n        answer += 1\n        ss = {p, si}\n    else:\n        ss.add(si)\n    p = si\nprint(answer)", "n = int(input())\nl = list(map(int, input().split()))\n(s, d, ans) = (0, {0: 1}, 0)\nfor i in range(len(l)):\n    s += l[i]\n    if s in d:\n        ans += 1\n        d = {0: 1}\n        s = l[i]\n    d[s] = 1\nprint(ans)", "n = int(input())\na = [int(i) for i in input().split()]\nzero = set()\nzero.add(0)\nres = 0\nsums = 0\nfor i in a:\n    sums += i\n    if sums in zero:\n        res += 1\n        zero = set()\n        zero.add(0)\n        sums = i\n    zero.add(sums)\nprint(res)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ns = set()\ns.add(0)\nsum = 0\ncnt = 0\nfor i in range(n):\n    sum += a[i]\n    if sum in s:\n        cnt += 1\n        sum = a[i]\n        s = set()\n        s.add(0)\n    s.add(sum)\nprint(cnt)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nn = int(input())\narr = int_arr()\ndict = {0: True}\nsm = 0\nans = 0\nfor i in range(n):\n    sm += arr[i]\n    if dict.get(sm) == True:\n        ans += 1\n        dict = {0: True}\n        dict[arr[i]] = True\n        sm = arr[i]\n    else:\n        dict[sm] = True\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n    cur += a[i]\n    if cur in d:\n        ans += 1\n        d = set()\n        d.add(0)\n        cur = a[i]\n    d.add(cur)\nprint(ans)", "import math\nn = int(input())\na = list(map(int, input().split()))\npre = 0\ns = set()\ns.add(0)\nans = 0\nfor i in a:\n    pre = pre + i\n    if pre in s:\n        s = set()\n        s.add(0)\n        s.add(i)\n        ans += 1\n        pre = i\n    else:\n        s.add(pre)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\ns = set()\ns.add(0)\np = 0\nf = 0\nfor i in range(n):\n    p += l[i]\n    if p in s:\n        f += 1\n        s = set()\n        s.add(0)\n        p = l[i]\n    s.add(p)\nprint(f)", "n = int(input())\na = [int(i) for i in input().split()]\ns = set()\ns.add(0)\nans = 0\ncurr = 0\nfor i in range(n):\n    curr += a[i]\n    if curr in s:\n        ans += 1\n        s = set()\n        s.add(0)\n        curr = a[i]\n    s.add(curr)\nprint(ans)"]