["import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\nfrom math import gcd\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        while True:\n            x = n\n            summ = 0\n            while x:\n                summ += x % 10\n                x //= 10\n            g = gcd(n, summ)\n            if g > 1:\n                get_print_int(n)\n                break\n            n += 1\nsolve()", "def main():\n    from sys import stdin, stdout\n    from math import gcd\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        i = int(rl())\n        while i % 3 != 0 and gcd(i, sum((int(x) for x in str(i)))) == 1:\n            i += 1\n        wl(str(i) + '\\n')\nmain()", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import math\nfrom sys import stdin\n\ndef gcdSum(x):\n    xSUm = sum(map(int, list(str(x))))\n    return math.gcd(x, xSUm)\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    i = n\n    while gcdSum(i) == 1:\n        i += 1\n    print(i)", "from math import gcd\n\ndef sum_digits(n):\n    r = 0\n    while n:\n        (r, n) = (r + n % 10, n // 10)\n    return r\ntotal_lines = int(input())\nfinal_list = []\nfor item in range(total_lines):\n    current = int(input())\n    while True:\n        sum_dig = sum_digits(current)\n        if gcd(current, sum_dig) > 1:\n            final_list.append(current)\n            break\n        current += 1\nfor x in final_list:\n    print(x)", "import sys\nfrom math import gcd\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef get_dig_sum(x):\n    return sum([ord(d) - ord('0') for d in str(x)])\n\nclass Problem:\n\n    def __init__(self):\n        pass\n\n    def solve(self):\n        n = int(input())\n        x = n\n        while True:\n            y = get_dig_sum(x)\n            z = gcd(x, y)\n            if z > 1:\n                break\n            x += 1\n        print(x)\n\ndef main():\n    p = Problem()\n    t = int(input())\n    while t:\n        p.solve()\n        t -= 1\nmain()", "import sys\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b else a\ninput()\nfor n in sys.stdin.read().split():\n    i = int(n)\n    while gcd(i, sum(map(int, list(str(i))))) <= 1:\n        i += 1\n    print(i)", "from math import *\n\ndef s(x):\n    a = 0\n    while x:\n        a += x % 10\n        x //= 10\n    return a\nimport sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    while 1:\n        if gcd(n, s(n)) > 1:\n            print(n)\n            break\n        n += 1", "from math import gcd\n\ndef sum_of_digits(i):\n    k = list(str(i))\n    s = 0\n    for j in k:\n        s += int(j)\n    return s\nt = int(input())\narr = []\nfor _ in range(t):\n    arr.append(int(input()))\nfor (i, x) in enumerate(arr):\n    while True:\n        p = gcd(x, sum_of_digits(x))\n        if p > 1:\n            arr[i] = str(x)\n            break\n        else:\n            x += 1\nprint('\\n'.join(arr))", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "answers = []\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef solve(n):\n    if n % 3 == 0:\n        answers.append(n)\n        return\n    a = n\n    b = n + 1\n    c = n + 2\n    t1 = str(a)\n    tot1 = 0\n    for ele in t1:\n        tot1 += int(ele)\n    final = gcd(a, tot1)\n    if final > 1:\n        answers.append(a)\n        return\n    t2 = str(b)\n    tot2 = 0\n    for ele in t2:\n        tot2 += int(ele)\n    final = gcd(b, tot2)\n    if final > 1:\n        answers.append(b)\n        return\n    else:\n        answers.append(c)\n        return\nT = int(input())\nwhile T:\n    n = int(input())\n    solve(n)\n    T -= 1\nfor ans in answers:\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nlist1 = []\nfor i in range(int(input())):\n    a = int(input())\n    if a % 3 == 0:\n        list1.append(a)\n    elif a % 3 == 2:\n        if gcd(sum(map(lambda x: int(x), list(str(a)))), a) > 1:\n            list1.append(a)\n        else:\n            list1.append(a + 1)\n    elif gcd(sum(map(lambda x: int(x), list(str(a)))), a) > 1:\n        list1.append(a)\n    elif gcd(sum(map(lambda x: int(x), list(str(a + 1)))), a + 1) > 1:\n        list1.append(a + 1)\n    else:\n        list1.append(a + 2)\nprint(*list1, sep='\\n')", "import math\nimport sys\n\ndef read_a_num(line):\n    [n] = list(map(int, line.strip().split(' ')))\n    return n\n\ndef gcdsum(n):\n    s = 0\n    for d in str(n):\n        s += int(d)\n    return math.gcd(n, s)\nlines = sys.stdin.readlines()\nt = read_a_num(lines[0])\nfor line in lines[1:t + 1]:\n    n = read_a_num(line)\n    while True:\n        res = gcdsum(n)\n        if res > 1:\n            print(n)\n            break\n        n += 1", "import math\nT = int(input())\ntab = [int(input()) for _ in range(T)]\nres = []\n\ndef get_sum(number):\n    s = str(number)\n    res = 0\n    for elem in s:\n        res += int(elem)\n    return res\n\ndef process(number):\n    while True:\n        tmp = math.gcd(number, get_sum(number))\n        if tmp > 1:\n            return number\n        number += 1\nfor elem in tab:\n    print(process(elem))", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef inpit():\n    return int(input())\n\ndef inplt():\n    return list(map(int, input().split()))\n\ndef inpstr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inpspit():\n    return map(int, input().split())\nimport math\n\ndef lcm(a):\n    return abs(math.prod(a)) // math.gcd(*a)\nt = inpit()\nfor i in range(t):\n    n = inpit()\n    f = True\n    while f == True:\n        lt = [int(j) for j in str(n)]\n        s = math.gcd(n, sum(lt))\n        if s > 1:\n            print(n)\n            f = False\n            break\n        else:\n            n = n + 1", "from math import gcd\n\ndef gcdSum(x):\n    while True:\n        sum_digits = sumDigits(x)\n        res = gcd(x, sum_digits)\n        if res > 1:\n            break\n        x += 1\n    return x\n\ndef sumDigits(x):\n    sm = 0\n    while x != 0:\n        (q, r) = divmod(x, 10)\n        sm += r\n        x = q\n    return sm\n\ndef testcases():\n    tests = [11, 31, 75]\n    for test in tests:\n        res = gcdSum(test)\n        print(f'test={test!r}, res={res!r}')\n\ndef main():\n    testcases = int(input())\n    tests = []\n    for test in range(testcases):\n        tests.append(int(input()))\n    for num in tests:\n        print(gcdSum(num))\nmain()", "import math\ntralis = int(input())\nanswer_list = []\n\ndef get_sum(n):\n    ans = 0\n    for a in str(n):\n        ans += int(a)\n    return ans\nfor d in range(tralis):\n    m = int(input())\n    while True:\n        sum_m = get_sum(m)\n        if math.gcd(m, sum_m) > 1:\n            answer_list.append(m)\n            break\n        else:\n            m += 1\nfor s in answer_list:\n    print(s)", "import math\nlist1 = []\n\ndef sum_number(x):\n    ans = 0\n    while x > 0:\n        remainder = x % 10\n        ans += remainder\n        x = x // 10\n    return ans\n\ndef gcdsum(x):\n    return math.gcd(sum_number(x), x)\nt = int(input())\nfor n in range(t):\n    x = int(input())\n    while gcdsum(x) == 1:\n        x += 1\n    list1.append(x)\nfor z in list1:\n    print(z)", "from math import gcd\n\ndef sum_of_digits(i):\n    sum = 0\n    while i > 0:\n        sum += i % 10\n        i = i // 10\n    return sum\nt = int(input())\narr = []\nfor _ in range(t):\n    arr.append(int(input()))\nfor (i, x) in enumerate(arr):\n    while True:\n        p = gcd(x, sum_of_digits(x))\n        if p > 1:\n            arr[i] = str(x)\n            break\n        else:\n            x += 1\nprint('\\n'.join(arr))", "import math\n\ndef Gcd(n):\n    temp = n\n    sum = 0\n    while n > 0:\n        sum = sum + n % 10\n        n = n // 10\n    if math.gcd(temp, sum) > 1:\n        return temp\n    else:\n        return Gcd(temp + 1)\nt = int(input())\narr = []\nfor i in range(0, t):\n    ele = int(input())\n    arr.append(ele)\nfor i in range(0, t):\n    print(Gcd(arr[i]))", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nN = 20005\n\ndef getSum(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    isOk = True\n    while isOk:\n        if gcd(n, getSum(n)) != 1:\n            isOk = False\n        else:\n            n += 1\n    print(n)", "import sys\nget_string = lambda : sys.stdin.readline().strip()\nget_intmap = lambda : map(int, get_string().split())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor t in range(int(get_string())):\n    n = int(get_string())\n    x = n\n    while True:\n        sum_of_digits = sum([int(i) for i in str(x)])\n        if gcd(x, sum_of_digits) > 1:\n            print(x)\n            break\n        x += 1", "import math\n\ndef get_digits(n):\n    return [int(i) for i in list(str(n))]\n\ndef find_ans(n):\n    i = n\n    while True:\n        digits = get_digits(i)\n        if math.gcd(i, sum(digits)) > 1:\n            return i\n        i += 1\ntest_cases = int(input())\nans = []\nfor i in range(test_cases):\n    n = int(input())\n    ans.append(find_ans(n))\nfor i in ans:\n    print(i)", "from pprint import pprint\nimport sys\ninput = sys.stdin.readline\n\ndef do():\n    import math\n\n    def ddd(num):\n        total = 0\n        s = list(str(num))\n        for x in s:\n            total += int(x)\n        return math.gcd(num, total)\n    n = int(input())\n    while True:\n        if ddd(n) == 1:\n            n += 1\n            continue\n        break\n    print(n)\nq = int(input())\nfor _ in range(q):\n    do()", "import math\nt = int(input())\nsolutions = []\nwhile t > 0:\n    condition = True\n    n = int(input())\n    ns = sum([int(x) for x in str(n)])\n    while math.gcd(n, ns) <= 1:\n        n = n + 1\n        ns = sum([int(x) for x in str(n)])\n    solutions.append(n)\n    t -= 1\nfor i in solutions:\n    print(i)", "from sys import stdin\nfrom math import gcd\nstd = stdin.readline\nN = int(std())\n\ndef plus_num(str1):\n    ans = 0\n    for s in str1:\n        ans += int(s)\n    return ans\nnum = []\nfor i in range(N):\n    n = std().rstrip()\n    two = plus_num(n)\n    n = int(n)\n    num.append((n, two, gcd(n, two)))\nfor k in num:\n    (a, b, c) = k\n    if c > 1:\n        print(a)\n    else:\n        while True:\n            if c > 1:\n                print(a)\n                break\n            a += 1\n            b = plus_num(str(a))\n            c = gcd(a, b)", "import sys\nfrom fractions import Fraction\nfrom collections import Counter\n\ndef f1(a):\n    s = 0\n    while a != 0:\n        s = s + a % 10\n        a = a // 10\n    return s\n\ndef f(a):\n    flag = 0\n    while flag == 0:\n        if compute_gcd(a) == 1:\n            a = a + 1\n            continue\n        flag = 1\n    return a\n\ndef compute_gcd(x):\n    y = f1(x)\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    print(f(n))\n    l = l + 1", "import sys\nimport math\n\ndef solve():\n    return None\n\ndef main():\n    q = []\n    for line in sys.stdin.readlines():\n        q.append(line)\n    for i in range(len(q)):\n        q[i] = q[i].rstrip().split(' ')\n    for i in range(1, len(q)):\n        n = int(q[i][0])\n        x = q[i][0]\n        flag = 0\n        while flag == 0:\n            s = 0\n            for i in x:\n                s += int(i)\n            if math.gcd(n, s) > 1:\n                print(n)\n                flag = 1\n            else:\n                n += 1\n                x = str(n)\nmain()", "import sys, io, os, math\nfrom math import ceil, log, gcd, sqrt, floor\nfrom itertools import permutations\nimport operator\nmod = 1000000007\nmod1 = 998244353\n\ndef intinp():\n    return int(sys.stdin.readline())\n\ndef strinp():\n    return sys.stdin.readline()\n\ndef arrinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef mulinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef flush():\n    return stdout.flush()\n\ndef power_two(x):\n    return 1 << x\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef power(a, n):\n    res = 1\n    while n:\n        if n & 1:\n            res = res % mod * a % mod % mod\n            n -= 1\n        else:\n            a = a % mod * a % mod % mod\n            n = n // 2\n    return res\n\ndef calc(n):\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n\ndef solve():\n    n = intinp()\n    s = calc(n)\n    while gcd(s, n) <= 1:\n        n += 1\n        s = calc(n)\n    print(n)\n\ndef main():\n    tc = intinp()\n    while tc:\n        solve()\n        tc -= 1\nmain()", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef cal(n):\n    a = 0\n    for i in str(n):\n        a += ord(i) - 48\n    return gcd(a, n)\nn = int(input())\nfor i in range(n):\n    s = int(input())\n    while True:\n        a = cal(s)\n        if a > 1:\n            print(s)\n            break\n        s += 1", "def gcd(a, b):\n    if b == 1:\n        return 1\n    else:\n        if a % b == 0:\n            return b\n        return gcd(b, a % b)\n\ndef gcdSum(n):\n    j = n\n    b = False\n    k = n\n    while True:\n        digit_sum = 0\n        j = k\n        while j > 0:\n            digit_sum += j % 10\n            j = j // 10\n        if gcd(k, digit_sum) != 1:\n            return k\n        else:\n            k += 1\nn = int(input())\ni = n\nans = list()\nwhile i > 0:\n    num = int(input())\n    ans.append(gcdSum(num))\n    i -= 1\nfor i in range(len(ans)):\n    print(ans[i])", "from math import gcd\n\ndef sum_of_digits(i):\n    k = list(str(i))\n    s = 0\n    for j in k:\n        s += int(j)\n    return s\nt = int(input())\narr = []\nfor _ in range(t):\n    arr.append(int(input()))\nfor (i, x) in enumerate(arr):\n    while True:\n        p = gcd(x, sum_of_digits(x))\n        if p > 1:\n            print(x)\n            break\n        else:\n            x += 1", "from math import gcd\n\ndef sum_of_digits(i):\n    s = 0\n    while i > 0:\n        s += i % 10\n        i = i // 10\n    return s\nt = int(input())\narr = []\nfor _ in range(t):\n    arr.append(int(input()))\nfor (i, x) in enumerate(arr):\n    while True:\n        p = gcd(x, sum_of_digits(x))\n        if p > 1:\n            print(x)\n            break\n        else:\n            x += 1", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "from collections import deque\nimport sys\ninf = float('inf')\ninput = sys.stdin.readline\nfrom math import gcd\n\ndef digits(n):\n    ans = 0\n    for i in str(n):\n        ans += int(i)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    while True:\n        if gcd(n, digits(n)) > 1:\n            break\n        n += 1\n    print(n)", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import sys\nfrom math import gcd\n\ndef f(n):\n    s = str(n)\n    x = 0\n    for i in range(len(s)):\n        x = x + int(s[i])\n    return x\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    s1 = f(n)\n    s2 = f(n + 1)\n    if gcd(s1, n) > 1:\n        print(n)\n    elif gcd(s2, n + 1) > 1:\n        print(n + 1)\n    else:\n        print(n + 2)", "def getSum(n):\n    sum = 0\n    while n != 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n\ndef computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef solve(num):\n    s = getSum(num)\n    gcd = computeGCD(num, s)\n    if gcd == 1:\n        solve(num + 1)\n    else:\n        print(num)\nt = int(input())\nfor i in range(t):\n    num = int(input())\n    solve(num)", "import math\nfor test in range(int(input())):\n    n = input()\n    n = int(n)\n    while True:\n        f = list(map(int, str(n)))\n        sm = sum(f)\n        if math.gcd(n, sm) > 1:\n            print(n)\n            break\n        else:\n            n += 1", "import math\n\ndef getSum(x):\n    sum = 0\n    while x != 0:\n        sum = sum + x % 10\n        x = x // 10\n    return sum\nimport math\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    while math.gcd(getSum(n), n) <= 1:\n        n = n + 1\n    print(n)", "import math\nfor _ in range(int(input())):\n    n = input()\n    while math.gcd(int(n), sum([int(i) for i in n])) == 1:\n        n = str(int(n) + 1)\n    print(n)", "import math\nfor _ in range(int(input())):\n    n = input()\n    while math.gcd(int(n), sum([int(i) for i in n])) == 1:\n        n = str(int(n) + 1)\n    print(n)", "from math import ceil\nfrom math import floor\nfrom math import gcd\nfrom random import random\n\ndef ar():\n    return [int(x) for x in input().split()]\nT = 1\nT = int(input())\n\ndef solve():\n    N = int(input())\n    while True:\n        L = list(str(N))\n        L = [int(x) for x in L]\n        if gcd(N, sum(L)) > 1:\n            print(N)\n            break\n        N += 1\nfor t in range(T):\n    solve()", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    a = a % b\n    return gcd(b, a)\n\ndef fun(m):\n    sum = 0\n    while m > 0:\n        sum += m % 10\n        m = m // 10\n    return sum\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = fun(n)\n    while 1:\n        res = gcd(n, b)\n        if res > 1:\n            break\n        n += 1\n        if n % 10 == 0:\n            b = fun(n)\n        else:\n            b += 1\n    print(n)", "from math import gcd\n\ndef sm(x):\n    s = 0\n    while x:\n        s += x % 10\n        x //= 10\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    for i in range(3):\n        s = sm(n)\n        if gcd(n, s) > 1:\n            print(n)\n            break\n        n += 1", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\nimport math\nfrom math import gcd\n\ndef main():\n    t = get_int()\n    for i in range(t):\n        n = get_int()\n        while n > 0:\n            n1 = n\n            sum = 0\n            while n1 != 0:\n                sum += n1 % 10\n                n1 = n1 // 10\n            if gcd(n, sum) != 1:\n                print(n)\n                break\n            else:\n                n += 1\nmain()", "import math\nfor s in [*open(0)][1:]:\n    n = int(s)\n    while math.gcd(n, sum(map(int, str(n)))) < 2:\n        n += 1\n    print(n)", "import sys\nfrom math import *\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\n\ndef total(n):\n    n = str(n)\n    tot = 0\n    for i in n:\n        tot += int(i)\n    return (int(n), tot)\n\ndef solve(n):\n    while 1:\n        (num, tot) = total(n)\n        if gcd(num, tot) > 1:\n            print(num)\n            break\n        else:\n            n += 1\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n)", "import math\nz = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in str(n)]\n    b = sum(a)\n    c = math.gcd(n, b)\n    while c <= 1:\n        n = n + 1\n        a = [int(i) for i in str(n)]\n        b = sum(a)\n        c = math.gcd(n, b)\n    z.append(n)\nprint(*z, sep='\\n')", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s = str(n)\n    cnt = 5\n    while cnt:\n        g = math.gcd(n, sum([int(i) for i in s]))\n        if g > 1:\n            return n\n        n += 1\n        s = str(n)\n        cnt -= 1\n    return n\nfor _ in range(int(input())):\n    print(solve())", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom math import gcd\nfor _ in range(rn()):\n    n = rn()\n\n    def f(n):\n        ans = 0\n        for i in str(n):\n            ans += int(i)\n        return ans\n    while gcd(n, f(n)) == 1:\n        n += 1\n    print(n)", "import math\n\ndef sum_digits(n):\n    s = 0\n    while n != 0:\n        s += n % 10\n        n = n // 10\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    while math.gcd(sum_digits(n), n) == 1:\n        n += 1\n    print(n)", "from math import gcd\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    strn = str(n)\n    S = sum([int(x) for x in strn])\n    while gcd(n, S) <= 1:\n        n += 1\n        strn = str(n)\n        S = sum([int(x) for x in strn])\n    print(n)", "def sum_of_digits(x):\n    sum = 0\n    while x > 0:\n        sum += x % 10\n        x = x // 10\n    return sum\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solve(n):\n    if gcd(n, sum_of_digits(n)) == 1:\n        return solve(n + 1)\n    return n\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    print(solve(n))", "from math import *\n\ndef sm(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\ndef gs(n):\n    return gcd(n, sm(n))\nfor t in range(int(input())):\n    n = int(input())\n    while gs(n) == 1:\n        n += 1\n    print(n)", "import math\n\ndef s(n):\n    n = str(n)\n    s = 0\n    for j in n:\n        s = s + int(j)\n    return s\nt = int(input())\nfor i in range(0, t, 1):\n    n = input()\n    n = int(n)\n    p = math.gcd(n, s(n))\n    if p > 1:\n        print(n)\n    else:\n        while p <= 1:\n            n = n + 1\n            p = math.gcd(n, s(n))\n        print(n)", "import math\n\ndef f(n):\n    s = str(n)\n    ans = 0\n    for i in s:\n        ans += int(i)\n    return ans\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    while True:\n        if math.gcd(n, f(n)) > 1:\n            print(n)\n            break\n        else:\n            n += 1", "import math\n\ndef gcds(x):\n    n = x\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return math.gcd(x, s)\nt = int(input())\nfor _ in range(t):\n    num = int(input())\n    while 1:\n        if gcds(num) > 1:\n            print(num)\n            break\n        else:\n            num += 1", "import sys\nimport math\n\ndef sumofn(n):\n    summ = 0\n    while n > 0:\n        summ += n % 10\n        n //= 10\n    return summ\n\ndef gcdSum(n):\n    n2 = sumofn(n)\n    ans = math.gcd(n, n2)\n    return ans\n\ndef answer(n):\n    while gcdSum(n) == 1:\n        n += 1\n    return n\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        print(answer(n))\n        t -= 1\n    return\nmain()", "import math\n\ndef sumdig(n):\n    res = 0\n    while n > 0:\n        tmp = n % 10\n        res += tmp\n        n = n // 10\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = sumdig(n)\n    while True:\n        if n % 10 == 0:\n            s = sumdig(n)\n        tmp = math.gcd(n, s)\n        if tmp > 1:\n            print(n)\n            break\n        n += 1\n        s += 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    answer = 0\n    while True:\n        s = sum(list(map(int, str(n))))\n        if gcd(n, s) > 1:\n            answer = n\n            break\n        n += 1\n    print(answer)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sumdigit(n):\n    ans = 0\n    while n != 0:\n        ans += n % 10\n        n = n // 10\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    while 1:\n        if gcd(n, sumdigit(n)) > 1:\n            print(n)\n            break\n        n += 1", "import math\n\ndef getsum(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum\nfor dcfvbhjkl in range(int(input())):\n    n = int(input())\n    while True:\n        if math.gcd(n, getsum(n)) > 1:\n            print(n)\n            break\n        n += 1", "def GCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef sum(n):\n    r = 0\n    while n > 0:\n        r += n % 10\n        n = n // 10\n    return r\nfor _ in range(int(input())):\n    n = int(input())\n    while True:\n        s = sum(n)\n        if GCD(n, s) > 1:\n            print(n)\n            break\n        else:\n            n += 1", "def sumOfDigits(n):\n    sol = 0\n    while n > 0:\n        sol += n % 10\n        n //= 10\n    return sol\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor t in range(int(input())):\n    n = int(input())\n    while gcd(n, sumOfDigits(n)) == 1:\n        n += 1\n    print(n)", "t = int(input())\n\ndef sumOfDigits(n):\n    sum_digits = 0\n    while n != 0:\n        sum_digits += n % 10\n        n = n // 10\n    return sum_digits\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(t):\n    n = int(input())\n    while True:\n        m = sumOfDigits(n)\n        gcdSum = gcd(n, m)\n        if gcdSum > 1:\n            break\n        else:\n            n += 1\n    print(n)", "try:\n    import math\n\n    def sumz(a):\n        res = 0\n        while a != 0:\n            res = res + a % 10\n            a = a // 10\n        return res\n    for _ in range(int(input())):\n        n = int(input())\n        if n == 0:\n            n += 1\n        while n:\n            if math.gcd(n, sumz(n)) > 1:\n                print(n)\n                break\n            else:\n                n = n + 1\nexcept:\n    pass", "import math\n\ndef su(n):\n    s = 0\n    while n > 0:\n        r = n % 10\n        s = s + r\n        n = n // 10\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = su(n)\n    g = math.gcd(n, s)\n    if g > 1:\n        print(n)\n    else:\n        j = n + 1\n        while g <= 1:\n            s = su(j)\n            g = math.gcd(j, s)\n            j = j + 1\n        print(j - 1)", "import math\nnum = int(input())\n\ndef getSum(n):\n    s = 0\n    n = str(n)\n    for ch in n:\n        s += int(ch)\n    return s\nfor i in range(num):\n    n = int(input())\n    gcd = 1\n    while gcd == 1:\n        s = getSum(n)\n        gcd = math.gcd(n, s)\n        if gcd == 1:\n            n += 1\n    print(n)", "from math import gcd\nfor _ in range(int(input())):\n    n = input()\n    s = sum(map(int, n.strip()))\n    n = int(n)\n    while gcd(n, s) <= 1:\n        n += 1\n        s = sum(map(int, str(n).strip()))\n    print(n)", "import math\nt = int(input())\n\ndef getSum(p):\n    sum = 0\n    for digit in str(p):\n        sum += int(digit)\n    return sum\n\ndef sum_gcd(e, f):\n    return math.gcd(e, f)\nfor _ in range(t):\n    n = int(input())\n    chk = sum_gcd(n, getSum(n))\n    while chk == 1:\n        n += 1\n        chk = sum_gcd(n, getSum(n))\n    print(n)", "import math\n\ndef sod(n):\n    s = 0\n    while n != 0:\n        d = n % 10\n        s = s + d\n        n = n // 10\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    while n:\n        s = sod(n)\n        x = math.gcd(n, s)\n        if x > 1:\n            print(n)\n            break\n        n += 1", "for i in range(int(input())):\n    import math\n\n    def gcd(n):\n        r = math.gcd(n, ss(n))\n        if r > 1:\n            return n\n        else:\n            return gcd(n + 1)\n\n    def ss(n):\n        s = 0\n        while n != 0:\n            s += n % 10\n            n = n // 10\n        return int(s)\n    x = int(input())\n    n = x\n    gcdsum = gcd(n)\n    print(gcdsum)", "import math\n\ndef Sum(i):\n    x = str(i)\n    s = 0\n    for i in x:\n        s += int(i)\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    i = n\n    while i >= n:\n        s = Sum(i)\n        gs = math.gcd(i, s)\n        if gs > 1:\n            print(i)\n            break\n        i += 1", "from math import gcd\n\ndef fun(n):\n    grcd = 0\n    while grcd <= 1:\n        sm = sum(list(map(int, list(str(n)))))\n        grcd = gcd(n, sm)\n        n += 1\n    print(n - 1)\nT = int(input())\nfor i in range(T):\n    st = input()\n    fun(int(st))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    x = sum(map(int, list(str(n))))\n    while gcd(n, x) == 1:\n        n += 1\n        x = sum(map(int, list(str(n))))\n    print(n)", "import math\nfor _ in range(int(input())):\n    n = input()\n    m = sum(map(int, n))\n    o = int(n)\n    if o % 10 == 0:\n        k = 0\n    else:\n        k = 1\n    for i in range(10 ** 18):\n        if k == 1:\n            if (o + i) % 10 == 0:\n                l = 0\n                for j in range(1, 18):\n                    if (o + i) % 10 ** j == 0:\n                        continue\n                    else:\n                        l = l + j - 1\n                        break\n            else:\n                l = 0\n        else:\n            l = 0\n        r = 9 * l * k\n        m = m - r\n        p = math.gcd(o + i, m + i)\n        if p > 1:\n            print(o + i)\n            break", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef gcd_sum():\n    suma = 0\n    for i in str(n):\n        suma += int(i)\n    return math.gcd(suma, n)\nfor test in range(int(input())):\n    n = int(input())\n    while gcd_sum() == 1:\n        n += 1\n    print(n)", "import math\nfor i in [*open(0)][1:]:\n    w = int(i)\n    q = sum(map(int, list(str(w))))\n    while math.gcd(q, w) == 1:\n        w += 1\n        q = sum(map(int, list(str(w))))\n    print(w)", "import math\n\ndef digitsum(n):\n    u = 0\n    while n > 0:\n        r = n % 10\n        n = n // 10\n        u += r\n    return u\ns = []\nfor i in range(int(input())):\n    n = int(input())\n    while math.gcd(n, digitsum(n)) == 1:\n        n += 1\n    s.append(n)\nfor i in range(len(s)):\n    print(s[i])", "import math\n\ndef getsum(n):\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\n\ndef gcd(a, n):\n    p = math.gcd(a, n)\n    return p\nn = int(input())\na = []\nfor i in range(0, n):\n    p = int(input())\n    a.append(p)\nfor i in range(0, n):\n    p = 1\n    l = a[i]\n    while p == 1:\n        s = getsum(str(l))\n        p = gcd(l, s)\n        l += 1\n    print(l - 1)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef gcdsum(n):\n    s = sum((int(x) for x in str(n)))\n    return gcd(n, s)\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        if gcdsum(n) > 1:\n            print(n)\n        elif gcdsum(n + 1) > 1:\n            print(n + 1)\n        else:\n            print(n + 2)\nsolve()", "from math import gcd\n\ndef valid(x):\n    return gcd(x, sum([ord(c) - ord('0') for c in str(x)])) != 1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    while not valid(n):\n        n += 1\n    print(n)", "from math import gcd\n\ndef sumOfDigits(x):\n    x = str(x)\n    ans = 0\n    for i in x:\n        ans += int(i)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while gcd(n, sumOfDigits(n)) == 1:\n        n += 1\n    print(n)", "import math\n\ndef sumOfDigits(n):\n    res = 0\n    n = str(n)\n    for i in range(len(n)):\n        res += int(n[i])\n    return res\n\ndef getGCD(a, b):\n    return math.gcd(a, b)\n\ndef solve(n):\n    while True:\n        if getGCD(n, sumOfDigits(n)) == 1:\n            n += 1\n        else:\n            break\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = solve(n)\n    print(ans)", "from math import floor, ceil\ncases = int(input())\n\ndef gcd(m, n):\n    if n > m:\n        return gcd(n, m)\n    if m % n == 0:\n        return n\n    return gcd(n, m % n)\n\ndef sum_of_digits(x):\n    summ = 0\n    strx = str(x)\n    for c in strx:\n        summ += int(c)\n    return summ\n\ndef solve():\n    n = int(input())\n    ns = n\n    while gcd(ns, sum_of_digits(ns)) <= 1:\n        ns += 1\n    print(ns)\nfor case in range(cases):\n    solve()", "from math import gcd\n\ndef slv(n):\n    while 1:\n        sm = sum([int(i) for i in str(n)])\n        if gcd(sm, n) > 1:\n            print(n)\n            return\n        n += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    slv(n)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = n\n    while gcd(x, sum((int(j) for j in str(x)))) == 1:\n        x += 1\n    print(x)", "import math\nfor _ in range(int(input())):\n    n = input()\n    while math.gcd(int(n), sum([int(i) for i in n])) == 1:\n        n = str(int(n) + 1)\n    print(n)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef sumgcd(a):\n    a = int(n)\n    b = sum([int(i) for i in n])\n    return gcd(a, b)\nfor tc in range(int(input())):\n    n = input()\n    t = sumgcd(n)\n    while t <= 1:\n        n = str(int(n) + 1)\n        t = sumgcd(n)\n    print(n)", "from math import gcd\n\ndef sum_of_digits(x):\n    x = str(x)\n    sm = 0\n    for i in x:\n        sm += int(i)\n    return sm\nfor _ in range(int(input())):\n    n = int(input())\n    flag = 0\n    while True:\n        sod = sum_of_digits(n)\n        reqgcd = gcd(sod, n)\n        if reqgcd > 1:\n            flag = n\n            break\n        else:\n            n += 1\n    if flag > 1:\n        print(flag)"]