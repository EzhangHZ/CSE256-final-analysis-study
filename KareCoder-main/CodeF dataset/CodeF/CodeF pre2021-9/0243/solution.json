["def solution(testCase):\n    maxRDist = 0\n    currentDist = 0\n    testCase += 'R'\n    for s in testCase:\n        currentDist += 1\n        if s == 'R':\n            if currentDist > maxRDist:\n                maxRDist = currentDist\n            currentDist = 0\n    return maxRDist\n\ndef main():\n    t = int(input())\n    testCases = []\n    for i in range(t):\n        testCases.append(input())\n    for testCase in testCases:\n        print(solution(testCase))\nmain()", "for i in [*open(0)][1:]:\n    print(max(map(len, i.replace('\\n', '').split('R'))) + 1)", "def answer(s):\n    count = 0\n    max_count = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count + 1\n\ndef main():\n    t = int(input())\n    s = [0] * t\n    for j in range(t):\n        s[j] = input()\n    for j in range(t):\n        print(answer(s[j]))\nmain()", "for i in [*open(0)][1:]:\n    print(max(map(len, i.replace('\\n', '').split('R'))) + 1)", "import sys\ninput = sys.stdin.readline\nimport re\nfor _ in range(int(input())):\n    print(max(map(len, re.split('R+', input()[:-1]))) + 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef solve(s):\n    t = 0\n    count = 0\n    for j in range(len(s)):\n        if s[j] == 'L':\n            t += 1\n        elif s[j] == 'R':\n            count = max(count, t)\n            t = 0\n    if j == len(s) - 1:\n        count = max(count, t)\n    print(count + 1)\nt = inp()\nfor _ in range(t):\n    jumps = insr()\n    solve(jumps)", "import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    chars = input().strip()\n    prev = -1\n    mi_n = 0\n    for i in range(len(chars)):\n        if chars[i] == 'R':\n            mi_n = max(mi_n, i - prev)\n            prev = i\n    if prev == -1:\n        print(len(chars) + 1)\n    else:\n        print(max(mi_n, len(chars) - prev))\nt = inp()\nfor _ in range(t):\n    main()", "lines = int(input())\nans = []\nfor i in range(lines):\n    a = input()\n    b = []\n    long = 1\n    for k in range(len(a)):\n        if a[k] == 'R':\n            b.append(long)\n            long = 1\n            end = k\n        else:\n            long += 1\n    if b:\n        b.append(len(a) - end)\n        ma = max(b)\n        ans.append(ma)\n    else:\n        ans.append(long)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    print(len(max(input().split('R'))) + 1)", "t = int(input())\nstrings = []\nfor x in range(t):\n    strings.append(input())\nfor string in strings:\n    cont = 1\n    resp = 1\n    for c in string:\n        if c == 'L':\n            cont += 1\n        else:\n            resp = max(cont, resp)\n            cont = 1\n    resp = max(cont, resp)\n    print(resp)", "for _ in range(int(input())):\n    lst = map(len, input().split('R'))\n    print(max(lst) + 1)", "for r in [0] * int(input()):\n    print(max(map(len, input().split('R'))) + 1)", "for _ in range(int(input())):\n    s = map(len, input().split('R'))\n    print(max(s) + 1)", "import sys\nfor i in range(int(sys.stdin.readline())):\n    s = sys.stdin.readline().strip()\n    s += 'R'\n    m = 0\n    lc = 1\n    for j in s:\n        if j == 'L':\n            lc += 1\n            continue\n        m = max(lc, m)\n        lc = 1\n    print(m)", "def testCase():\n    env = input()\n    record = 0\n    lCounter = 0\n    for node in env:\n        if node == 'L':\n            lCounter += 1\n        else:\n            record = max(record, lCounter)\n            lCounter = 0\n    record = max(record, lCounter)\n    return record + 1\nrez = []\nt = int(input())\nfor i in range(t):\n    rez.append(testCase())\nfor r in rez:\n    print(r)", "b = int(input())\nc = []\nh = []\ng = 0\nfor i in range(b):\n    c = []\n    g = 0\n    a = input()\n    for i in range(len(a)):\n        if a[i] == 'L':\n            g += 1\n        else:\n            c.append(g)\n            g = 0\n    c.append(g)\n    h.append(max(c))\nfor i in range(b):\n    print(h[i] + 1)", "x = int(input())\nwhile x:\n    x -= 1\n    s = input()\n    a = s.split('R')\n    print(len(max(a)) + 1)", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nt = int(input())\nfor _ in range(t):\n    s = input()\n    k = s.split('R')\n    print(len(max(k)) + 1)", "for i in range(int(input())):\n    print(max(map(len, input().split('R'))) + 1)", "test_cases = int(input())\nfor i in range(test_cases):\n    board = list(map(len, input().split('R')))\n    print(max(board) + 1)", "for _ in [0] * int(input()):\n    print(max(map(len, input().split('R'))) + 1)", "n = input()\np = []\nfor i in range(0, int(n)):\n    l = input()\n    p.append(l)\nfor i in range(0, len(p)):\n    k = [0]\n    v = []\n    c = p[i]\n    if 'R' not in c:\n        print(len(c) + 1)\n    elif c.count('R') == len(c):\n        print(1)\n    else:\n        for j in range(0, len(c)):\n            if c[j] == 'R':\n                v.append(j + 1 - k[-1])\n                k.append(j + 1)\n        v.append(len(c) + 1 - k[-1])\n        print(max(v))", "test_cases = int(input())\nstrings = []\nfor i in range(test_cases):\n    s = input()\n    strings.append(s)\nfor string in strings:\n    if 'R' not in string.upper():\n        d = len(string) + 1\n        print(d)\n    elif 'L' not in string.upper():\n        d = 1\n        print(d)\n    else:\n        str_list = string.split('R')\n        str_list.sort(reverse=True)\n        d = len(str_list[0]) + 1\n        print(d)", "t = int(input())\na = []\nfor i in range(t):\n    a.append(input())\nfor i in a:\n    print(len(max(i.split('R'))) + 1)", "def frog(string):\n    l = len(string)\n    if 'R' not in string:\n        return l + 1\n    else:\n        s = 0\n        last_r = 0\n        for (i, x) in enumerate(string):\n            if x == 'R':\n                new_s = i + 1 - last_r\n                last_r = i + 1\n                if new_s > s:\n                    s = new_s\n        if l - last_r + 1 > s:\n            s = l - last_r + 1\n        return s\nt = int(input())\narray = []\nfor i in range(t):\n    array.append(input())\nfor x in array:\n    print(frog(x))", "T = int(input())\nans = ''\nfor _ in range(T):\n    s = input()\n    k = 1\n    t = 1\n    for i in range(len(s)):\n        if s[i] == 'L':\n            t += 1\n        else:\n            k = max(k, t)\n            t = 1\n    ans += str(max(k, t)) + '\\n'\nprint(ans)", "for _ in range(int(input())):\n    s = input().split('R')\n    print(len(max(s)) + 1)", "n = int(input())\nfor _ in range(n):\n    s = str(input())\n    ans = len(max(s.split('R'))) + 1\n    print(ans)", "from math import ceil, gcd\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\n\ndef li():\n    return list(map(int, input().split()))\n\ndef arr(a):\n    return array('i', a)\n\ndef solve():\n    for _ in range(int(input())):\n        s = input()\n        b = s.split('R')\n        print(max((len(x) for x in b)) + 1)\nsolve()", "n = int(input())\nfor _ in range(n):\n    s = input().split('R')\n    print(max(list(map(len, s))) + 1)", "t = int(input())\nfor i in range(t):\n    leftSeq = list(filter(lambda x: x != '', input().split('R')))\n    if len(leftSeq) > 0:\n        maiorL = max(leftSeq)\n        print(len(maiorL) + 1)\n    else:\n        print(1)", "for i in range(int(input())):\n    print(1 + max(map(len, input().split('R'))))", "for _ in range(int(input())):\n    s = input()\n    c = 1\n    m = 1\n    for x in s:\n        if x == 'L':\n            c += 1\n        else:\n            if c > m:\n                m = c\n            c = 1\n    if c > m:\n        m = c\n    print(m)", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    s = S()\n    s = 'R' + s + 'R'\n    ans = 0\n    prev = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            ans = max(ans, i - prev)\n            prev = i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input().split('R')\n    s = list(map(len, s))\n    print(max(s) + 1)", "quant_testes = int(input())\nfor c in range(quant_testes):\n    seq = input() + 'R'\n    maior_slice = 0\n    slice_atual = 0\n    for char in seq:\n        if char == 'L':\n            slice_atual += 1\n        else:\n            if slice_atual > maior_slice:\n                maior_slice = slice_atual\n            slice_atual = 0\n    print(maior_slice + 1)", "def solve(s):\n    max_diff = 0\n    prev_idx = -1\n    s = s + 'D'\n    s = 'S' + s\n    n = len(s)\n    for i in range(0, n):\n        if s[i] == 'S':\n            prev_idx = i\n        elif s[i] == 'R':\n            max_diff = max(max_diff, i - prev_idx)\n            prev_idx = i\n        elif s[i] == 'D':\n            max_diff = max(max_diff, i - prev_idx)\n    return max_diff\nt = int(input())\nresults = list()\nfor _ in range(0, t):\n    s = input()\n    results.append(solve(s))\nfor result in results:\n    print(result)", "def run(s):\n    s += 'R'\n    max_run = 0\n    current_run = 1\n    for c in s:\n        if c == 'R':\n            max_run = max(max_run, current_run)\n            current_run = 1\n        else:\n            current_run += 1\n    return max_run\ntestcase = int(input())\nfor _ in range(testcase):\n    s = input()\n    ans = run(s)\n    print(ans)", "test_cases = int(input())\nfor i in range(test_cases):\n    board = list(map(len, input().split('R')))\n    print(max(board) + 1)", "def solution(s):\n    d = 0\n    l = -1\n    for i in range(len(s)):\n        if s[i] == 'R':\n            d = max(d, i - l)\n            l = i\n    d = max(d, len(s) - l)\n    return d\n\ndef main():\n    t = eval(input())\n    for _ in range(t):\n        s = input()\n        print(solution(s))\nmain()", "def solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        s += 'R'\n        cur = 0\n        max_con = 0\n        for c in s:\n            if c == 'R':\n                max_con = max(max_con, cur)\n                cur = 0\n            else:\n                cur += 1\n        print(max_con + 1)\nsolve()", "test_cases = int(input())\nfor i in range(test_cases):\n    board = list(map(len, input().split('R')))\n    print(max(board) + 1)", "for _ in range(int(input())):\n    x = input()\n    c = 0\n    m = 0\n    for i in x:\n        if i == 'L':\n            c += 1\n        else:\n            if c > m:\n                m = c\n            c = 0\n    if c > m:\n        m = c\n    print(m + 1)", "for _ in range(int(input())):\n    string = str(input())\n    tamanho_das_sequencias_L = []\n    for sequencia in string.split('R'):\n        if sequencia:\n            tamanho_das_sequencias_L.append(len(sequencia))\n    if tamanho_das_sequencias_L:\n        tamanho_das_sequencias_L.sort()\n        print(tamanho_das_sequencias_L[-1] + 1)\n    else:\n        print(1)", "def map_len(arr):\n    total = []\n    for i in range(len(arr)):\n        total.append(len(arr[i]))\n    return total\nt = int(input())\nfor i in range(t):\n    n = input().split('R')\n    len_n = map_len(n)\n    print(max(len_n) + 1)", "T = int(input())\nwhile T:\n    s = input()\n    loc = -1\n    m = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            if i - loc > m:\n                m = i - loc\n            loc = i\n    if loc == -1:\n        print(len(s) + 1)\n    else:\n        if len(s) - loc > m:\n            m = len(s) - loc\n        print(m)\n    T -= 1", "def find_answer(lenth):\n    ans = 0\n    a = 1\n    for i in lenth:\n        if i == 'L':\n            a += 1\n        else:\n            ans = max(ans, a)\n            a = 1\n    ans = max(ans, a)\n    print(ans)\nn = int(input())\nfor i in range(n):\n    a = input()\n    find_answer(a)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    a = s.split('R')\n    print(len(max(a)) + 1)", "import math\nfor i in range(0, int(input())):\n    s = input()\n    max_ = 0\n    pos = 0\n    for i in range(0, len(s)):\n        if s[i] == 'R':\n            if max_ < i + 1 - pos:\n                max_ = i + 1 - pos\n            pos = i + 1\n    if max_ < len(s) + 1 - pos:\n        max_ = len(s) + 1 - pos\n    print(max_)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    last_idx = -1\n    v = []\n    for i in range(len(s)):\n        if s[i] == 'R':\n            c = i - last_idx\n            last_idx = i\n            v.append(c)\n    v.append(len(s) - last_idx)\n    print(max(v))", "t = int(input())\nfor i in range(t):\n    s = input()\n    distancia = 1\n    minimo = 0\n    for d in s:\n        if d != 'R':\n            distancia += 1\n        else:\n            minimo = max(minimo, distancia)\n            distancia = 1\n    minimo = max(minimo, distancia)\n    distancia = 1\n    print(minimo)", "testes = int(input())\nfor c in range(testes):\n    string = input()\n    w = 1\n    aws = 0\n    for v in range(len(string)):\n        if string[v] == 'L':\n            w += 1\n        else:\n            aws = max(aws, w)\n            w = 1\n    aws = max(aws, w)\n    print(aws)", "tests = int(input())\n\ndef get_max_left_sequence(string):\n    max_count = 0\n    count = 0\n    flag = False\n    for i in range(len(string)):\n        if string[i] == 'L' and (not flag):\n            flag = True\n        elif string[i] == 'R' and flag:\n            flag = False\n            count = 0\n        if flag:\n            count += 1\n            if count > max_count:\n                max_count = count\n    return max_count\nfor i in range(tests):\n    string = input()\n    max_left_sequence = get_max_left_sequence(string)\n    print(max_left_sequence + 1)", "for i in range(int(input())):\n    s = input()\n    ans = 0\n    cnt = 0\n    for j in range(s.find('L'), s.rfind('L') + 1):\n        if s[j] == 'L':\n            cnt += 1\n        else:\n            if ans < cnt:\n                ans = cnt\n            cnt = 0\n    print(max(ans, cnt) + 1)", "t = int(input())\nfor _ in range(t):\n    s = input().rstrip()\n    n = len(s)\n    if 'L' not in s:\n        print(1)\n    else:\n        c = m = 1\n        for i in range(n - 1):\n            if s[i] == s[i + 1] and s[i] == 'L':\n                c += 1\n            else:\n                if c > m:\n                    m = c\n                c = 1\n        if c > m:\n            m = c\n        print(m + 1)", "n = int(input())\nfor i in range(n):\n    jumps = input()\n    jumps += 'R'\n    resposta = 1\n    maior_dist_r = 0\n    for jump in jumps:\n        if jump == 'L':\n            maior_dist_r += 1\n        else:\n            maior_dist_r += 1\n            resposta = max(resposta, maior_dist_r)\n            maior_dist_r = 0\n    if maior_dist_r != 0:\n        resposta = max(resposta, maior_dist_r)\n    print(resposta)", "n = int(input())\nfor i in range(n):\n    jumps = input()\n    jumps += 'R'\n    resposta = 1\n    maior_dist_r = 0\n    for jump in jumps:\n        if jump == 'L':\n            maior_dist_r += 1\n        else:\n            maior_dist_r += 1\n            resposta = max(resposta, maior_dist_r)\n            maior_dist_r = 0\n    if maior_dist_r != 0:\n        resposta = max(resposta, maior_dist_r)\n    print(resposta)", "t = int(input())\nfor _ in range(t):\n    A = input()\n    counter = 0\n    max_counter = 0\n    for i in range(len(A)):\n        if A[i] == 'L':\n            counter += 1\n        else:\n            counter = 0\n        if counter > max_counter:\n            max_counter = counter\n    print(max_counter + 1)", "n = int(input())\nfor i in range(n):\n    x = input()\n    x += 'R'\n    ans = 1\n    z = 1\n    for y in x:\n        if y == 'L':\n            z += 1\n        if y == 'R':\n            ans = max(z, ans)\n            z = 1\n    print(ans)", "t = int(input())\n\ndef frogjump(letters):\n    maxn = 1\n    left = -1\n    for r in range(len(letters)):\n        if letters[r] == 'R':\n            maxn = max(maxn, r - left)\n            left = r\n    r += 1\n    maxn = max(maxn, r - left)\n    print(maxn)\nfor _ in range(t):\n    letters = input()\n    frogjump(letters)", "t = int(input())\nfor k in range(t):\n    s = input()\n    ans = 0\n    flag = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            count += 1\n        elif s[i] == 'R':\n            ans = max(ans, count)\n            count = 0\n    ans = max(ans, count)\n    print(ans + 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest = inp()\nfor k in range(test):\n    s = insr()\n    n = len(s)\n    (left, right) = (0, 0)\n    maxL = 0\n    temp = 0\n    while right < n:\n        if s[right] == 'R':\n            maxL = max(maxL, temp)\n            left = right + 1\n            temp = 0\n        else:\n            temp += 1\n        right += 1\n    maxL = max(maxL, temp)\n    print(maxL + 1)", "tests = int(input())\nfor test in range(tests):\n    s = input()\n    ans = 0\n    cur = 0\n    for c in s:\n        if c == 'R':\n            ans = max(cur, ans)\n            cur = 0\n        else:\n            cur += 1\n    ans = max(cur, ans)\n    print(ans + 1)", "t = int(input())\nfor k in range(t):\n    s = input()\n    prev = -1\n    best_d = -1\n    for i in range(len(s)):\n        if s[i] == 'R':\n            best_d = max(best_d, i - prev)\n            prev = i\n    if best_d == -1:\n        best_d = len(s) + 1\n    else:\n        best_d = max(best_d, len(s) - prev)\n    print(best_d)", "cases = int(input())\nfor _ in range(cases):\n    jumps = input()\n    max_jump = 1\n    prev_r = -1\n    for i in range(len(jumps)):\n        if jumps[i] == 'R':\n            max_jump = max(i - prev_r, max_jump)\n            prev_r = i\n    max_jump = max(max_jump, len(jumps) - prev_r)\n    print(max_jump)", "for _ in range(int(input())):\n    string = list(input())\n    string.append('R')\n    count = 0\n    answer = []\n    for i in string:\n        if i == 'R':\n            count += 1\n            answer.append(count)\n            count = 0\n        else:\n            count += 1\n    print(max(answer))", "from sys import stdin\ninp = stdin.readline\nt = int(inp().strip())\nfor _ in range(t):\n    a = ['R']\n    a.extend(list(inp().strip()))\n    a.append('R')\n    maxDist = -1\n    dist = 0\n    for i in a:\n        if i == 'R':\n            maxDist = max(maxDist, dist)\n            dist = 0\n        else:\n            dist += 1\n    print(maxDist + 1)", "data = []\nn = int(input())\nfor i in range(n):\n    data.append(input())\n\ndef count_max(path):\n    m = 0\n    c = 0\n    for i in path:\n        if i == 'L':\n            c += 1\n        else:\n            if c > m:\n                m = c\n            c = 0\n    return m + 1 if c < m else c + 1\nfor i in data:\n    print(count_max(i))", "n = int(input())\nfor i in range(n):\n    v = []\n    s = list(input())\n    j = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            j = i + 1 - j\n            v.append(j)\n            j = i + 1\n    v.append(len(s) + 1 - j)\n    print(max(v))", "def jumpy_frog(string):\n    n = len(string)\n    min_jump = [0] * (n + 2)\n    index = n + 1\n    for i in range(n - 1, -1, -1):\n        if string[i] == 'R':\n            min_jump[index] = index - (i + 1)\n            index = i + 1\n    min_jump[index] = index\n    return max(min_jump)\nn = int(input())\nfor i in range(n):\n    print(jumpy_frog(input()))", "for _ in range(int(input())):\n    s = input() + 'R'\n    r_p = -1\n    m = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            if i - r_p > m:\n                m = i - r_p\n            r_p = i\n    print(m)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    right = [0]\n    for i in range(len(a)):\n        if a[i] == 'R':\n            right.append(i + 1)\n    right.append(len(a) + 1)\n    _max = -1\n    for i in range(len(right) - 1):\n        if right[i + 1] - right[i] > _max:\n            _max = right[i + 1] - right[i]\n    print(_max)", "t = int(input())\nfor i in range(t):\n    s = input()\n    jump = 0\n    start = -1\n    for i in range(len(s)):\n        if s[i] == 'R':\n            jump = max(i - start, jump)\n            start = i\n    jump = max(len(s) - start, jump)\n    print(jump)", "t = int(input())\nfor _ in range(t):\n    jumps = input()\n    last_r = -1\n    max_diff = float('-inf')\n    for (idx, ch) in enumerate(jumps):\n        if ch == 'R':\n            max_diff = max(max_diff, idx - last_r)\n            last_r = idx\n    max_diff = max(max_diff, len(jumps) - last_r)\n    print(max_diff)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    consec = 0\n    biggest = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            consec = 0\n        else:\n            consec += 1\n        if consec > biggest:\n            biggest = consec\n    print(biggest + 1)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        S = input().strip()\n        ma = 1\n        tmp = 0\n        for s in S:\n            if s == 'R':\n                ma = max(ma, tmp + 1)\n                tmp = 0\n            else:\n                tmp += 1\n        ma = max(ma, tmp + 1)\n        print(ma)\nmain()", "t = int(input())\nout = []\nfor i in range(t):\n    maxL = 1\n    currentL = 1\n    seq = input()\n    for j in range(len(seq)):\n        c = seq[j]\n        if c == 'L':\n            currentL += 1\n        else:\n            if currentL > maxL:\n                maxL = currentL\n            currentL = 1\n    out.append(str(max(maxL, currentL)))\nprint('\\n'.join(out))", "t = int(input())\nans = []\nfor _ in range(t):\n    s = 'R' + input() + 'R'\n    last_r = 0\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            if max_len < i - last_r:\n                max_len = i - last_r\n            last_r = i\n    ans.append(max_len)\nprint('\\n'.join((str(i) for i in ans)))", "t = int(input())\nfor i in range(1, t + 1, 1):\n    s = input().split('R')\n    print(len(max(s)) + 1)", "t = int(input())\nfor i in range(t):\n    s = input()\n    x = s.split('R')\n    a = [len(i) for i in x]\n    print(max(a) + 1)", "for _ in range(int(input())):\n    st = input()\n    d = tmp = 0\n    for i in range(len(st)):\n        if st[i] == 'L':\n            tmp += 1\n        elif st[i] == 'R':\n            d = max(d, tmp)\n            tmp = 0\n    d = max(d, tmp)\n    print(d + 1)", "list_ans = []\nfor _ in range(int(input())):\n    s = input()\n    list1 = [0]\n    list2 = []\n    for i in range(len(s)):\n        if s[i] == 'R':\n            list1.append(i + 1)\n    list1.append(len(s) + 1)\n    for i in range(len(list1) - 1):\n        list2.append(list1[i + 1] - list1[i])\n    list_ans.append(max(list2))\nfor item in list_ans:\n    print(item)", "for i in range(int(input())):\n    s = str(input())\n    s = 'R' + s + 'R'\n    a = s.count('R')\n    li = []\n    if a == len(s):\n        print(1)\n    elif a == 0:\n        print(len(s) - 1)\n    else:\n        for i in range(len(s)):\n            if s[i] == 'R':\n                li.append(i)\n        max = 0\n        for i in range(len(li) - 1):\n            if li[i + 1] - li[i] > max:\n                max = li[i + 1] - li[i]\n        print(max)", "testcases = int(input())\nfor i in range(testcases):\n    moves = input() + 'R'\n    index = -1\n    ans = 0\n    for i in range(len(moves)):\n        if moves[i] == 'R':\n            ans = max(ans, i - index)\n            index = i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    curr = 0\n    res = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            curr += 1\n        if s[i] == 'R':\n            res = max(res, curr)\n            curr = 0\n    res = max(res, curr)\n    print(res + 1)", "for _ in range(int(input())):\n    s = input() + 'R'\n    c = 1\n    mx = 1\n    for i in range(len(s)):\n        if s[i] == 'L':\n            c += 1\n        else:\n            mx = max(mx, c)\n            c = 1\n    print(mx)", "def dsw(frase):\n    lista = [0]\n    ans = 0\n    for i in range(len(frase)):\n        if frase[i] == 'R':\n            lista.append(i + 1)\n    lista.append(len(frase) + 1)\n    for i in range(1, len(lista)):\n        ans = max(ans, lista[i] - lista[i - 1])\n    return ans\ninp = int(input())\nwhile inp:\n    frase = str(input())\n    print(dsw(frase))\n    inp -= 1", "import math\nt = int(input())\nans = []\nfor i in range(t):\n    k = 0\n    d = 1\n    s = str(input())\n    for j in range(len(s)):\n        if s[j] == 'L':\n            k += 1\n        elif k != 0:\n            d = max(k + 1, d)\n            k = 0\n    if k != 0:\n        d = max(k + 1, d)\n    ans.append(d)\nfor i in range(len(ans)):\n    print(ans[i])", "res = []\nfor _ in range(int(input())):\n    A = input()\n    j = 1\n    k = 0\n    A = f'{A}R'\n    jump = []\n    for (i, s) in enumerate(A, 1):\n        if s == 'R':\n            jump.append(i - k)\n            k = i\n    res.append(max(jump))\nfor r in res:\n    print(r)", "def check_l(string):\n    output = 0\n    con = 0\n    for i in range(len(string)):\n        if con > 0:\n            con -= 1\n            continue\n        if string[i] == 'L':\n            maximum = 1\n            for j in range(i + 1, len(string)):\n                if string[j] == 'L':\n                    maximum += 1\n                    con += 1\n                else:\n                    break\n            if maximum > output:\n                output = maximum\n    if output == 0:\n        return output + 1\n    return output + 1\n\ndef frog_jumps():\n    cases = int(input())\n    strings = []\n    for i in range(cases):\n        strings.append(input())\n    for i in range(len(strings)):\n        jump = check_l(strings[i])\n        print(jump)\nfrog_jumps()", "t = int(input())\nfor i in range(t):\n    l = input().split('R')\n    lengths = list(map(len, l))\n    print(max(lengths) + 1)", "n = int(input())\n\ndef min_dist(s):\n    max_count = 0\n    count = 0\n    for i in s:\n        if i == 'R':\n            count = 0\n        else:\n            count += 1\n            if max_count < count:\n                max_count = count\n    return max_count + 1\nfor i in range(n):\n    s = input()\n    print(min_dist(s))", "T = int(input())\nn = [0] * T\nk = [0] * T\nns = [0] * T\nfor t in range(T):\n    k[t] = list(input())\nfor t in range(T):\n    ml = 0\n    cl = 0\n    for i in k[t]:\n        if i == 'L':\n            cl += 1\n        else:\n            ml = max(cl, ml)\n            cl = 0\n    ml = max(cl, ml)\n    print(ml + 1)", "for _ in [0] * int(input()):\n    print(max(map(len, input().split('R'))) + 1)", "for _ in range(int(input())):\n    print(len(max(input().split('R'))) + 1)", "for i in range(int(input())):\n    print(1 + max(map(len, input().split('R'))))", "def main():\n    for _ in range(int(input())):\n        s = input()\n        rl = [0]\n        for i in range(len(s)):\n            if s[i] == 'R':\n                rl += [i + 1]\n        rl += [len(s) + 1]\n        ans = 0\n        for i in range(len(rl) - 1):\n            ans = max(ans, rl[i + 1] - rl[i])\n        print(ans)\nmain()"]