["def fun(b, s):\n    ans = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            ans.append(s[i:j + 1])\n    m = 0\n    for i in ans:\n        l = len(i)\n        if i in b:\n            if m < l:\n                m = l\n    return len(s) + len(b) - m * 2\nn = int(input())\nfor _ in range(n):\n    x = input()\n    y = input()\n    if len(x) > len(y):\n        bda = x\n        chota = y\n    else:\n        bda = y\n        chota = x\n    print(fun(bda, chota))", "for _ in range(int(input())):\n    a = input().strip()\n    b = input().strip()\n    t = 0\n    n = 0\n    for i in range(len(a), 0, -1):\n        for j in range(len(a) - i + 1):\n            if b.find(a[j:i + j]) > -1:\n                t = i\n                n = 1\n                break\n        if n:\n            break\n    print(len(a) + len(b) - t - t)", "import math\nt = int(input())\nfor z in range(t):\n    s1 = input()\n    s2 = input()\n    a = len(s1)\n    b = len(s2)\n    m = 0\n    if a <= b:\n        for i in range(a):\n            for j in range(i + 1, a + 1):\n                if s1[i:j] in s2:\n                    m = max(m, len(s1[i:j]))\n        print(a + b - 2 * m)\n    else:\n        for i in range(b):\n            for j in range(i + 1, b + 1):\n                if s2[i:j] in s1:\n                    m = max(m, len(s2[i:j]))\n        print(a + b - 2 * m)", "class String:\n\n    def __init__(self, string):\n        self.string = string\n\n    def changes(self, other):\n        a = self.string\n        b = other.string\n        changes = 0\n        for i in range(len(a)):\n            for j in range(i, len(a) + 1):\n                if a[i:j] in b and j - i > changes:\n                    changes = j - i\n        return len(a) + len(b) - 2 * changes\ntestcase = int(input())\nfor t in range(testcase):\n    a = String(input())\n    b = String(input())\n    print(a.changes(b))", "testcases = int(input())\nfor t in range(testcases):\n    a = input()\n    b = input()\n    changes = 0\n    for i in range(len(a)):\n        for j in range(i, len(a) + 1):\n            if a[i:j] in b and j - i > changes:\n                changes = j - i\n    print(len(a) + len(b) - 2 * changes)", "def solve():\n    (a, b) = (input(), input())\n    i = len(a)\n    while i >= 0:\n        j = 0\n        while j + i <= len(a):\n            if a[j:j + i] in b:\n                return len(a) + len(b) - 2 * i\n            j += 1\n        i -= 1\n    return 0\nfor _ in range(int(input())):\n    print(solve())", "def main():\n    a = input()\n    b = input()\n    m = 0\n    for i in range(0, len(a)):\n        for j in range(len(a), i, -1):\n            n = b.find(a[i:j])\n            if n >= 0 and j - i > m:\n                m = j - i\n    print(len(a) + len(b) - 2 * m)\n    return\nt = int(input())\nfor i in range(0, t):\n    main()", "t = input()\nL = []\nfor i in range(int(t) * 2):\n    L.append(input())\n\ndef mov(a, b):\n    na = len(a)\n    nb = len(b)\n    m = 0\n    for i in range(na):\n        for j in range(nb):\n            if a[i] == b[j]:\n                i1 = i\n                j1 = j\n                m1 = 0\n                while i1 < na and j1 < nb and (b[j1] == a[i1]):\n                    m1 += 1\n                    j1 += 1\n                    i1 += 1\n                m = max(m, m1)\n    return na + nb - 2 * m\ni = 0\nwhile i <= len(L) - 2:\n    print(mov(L[i], L[i + 1]))\n    i += 2", "for i in range(int(input())):\n    s1 = input()\n    s2 = input()\n    l = mx = c = 0\n    temp = -1\n    if len(s1) < len(s2):\n        st1 = s1\n        st2 = s2\n        dp = [[0 for x in range(len(st2) + 1)] for y in range(len(st1) + 1)]\n    else:\n        st1 = s2\n        st2 = s1\n        dp = [[0 for x in range(len(st2) + 1)] for y in range(len(st1) + 1)]\n    for i in range(1, len(st1) + 1):\n        new = 0\n        for j in range(1, len(st2) + 1):\n            if st1[i - 1] == st2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                new = 1\n                if dp[i][j] > mx:\n                    mx = dp[i][j]\n    print(len(st1) + len(st2) - mx * 2)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(s, p):\n    ans = 0\n    dp = [[0 for i in range(len(p) + 1)] for j in range(len(s) + 1)]\n    for i in range(len(s)):\n        for j in range(len(p)):\n            if s[i] == p[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n                ans = max(ans, dp[i + 1][j + 1])\n    return len(s) + len(p) - 2 * ans\nt = int(input())\nfor i in range(t):\n    s = input()\n    p = input()\n    print(solve(s, p))", "a = int(input())\n\ndef rik(X, Y, m, n):\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                LCSuff[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n    return result\nfor i in range(a):\n    b = input()\n    c = input()\n    d = len(b)\n    e = len(c)\n    print(d + e - 2 * rik(b, c, d, e))", "def solve():\n    a = input()\n    b = input()\n    ans = ''\n    if len(a) <= len(b):\n        temp = a\n        a = b\n        b = temp\n    for i in range(len(b), 0, -1):\n        for j in range(len(b)):\n            if b[j:j + i] in a:\n                ans = b[j:j + i]\n                break\n            if j + i >= len(b):\n                break\n        if ans != '':\n            break\n    print(len(a) - len(ans) + len(b) - len(ans))\nfor i in range(int(input())):\n    solve()", "for i in range(0, int(input())):\n    a = input()\n    b = input()\n    l = 0\n    d = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                d += 1\n                k = 1\n                c = ''\n                while i + k < len(a) and j + k < len(b):\n                    if a[i + k] != b[j + k]:\n                        break\n                    else:\n                        c += a[i + k]\n                        k += 1\n                if l < len(c):\n                    l = len(c)\n    if d == 0:\n        print(len(a) + len(b))\n    else:\n        print(len(a) + len(b) - 2 - 2 * l)", "for i in range(int(input())):\n    string1 = input()\n    string2 = input()\n    if string1 == string2:\n        print(0)\n    else:\n        shorter = min([string1, string2], key=len)\n        longer = [i for i in [string1, string2] if i != shorter][0]\n        common_substrings = []\n        for n in range(len(shorter) + 1):\n            for x in range(len(shorter) + 1):\n                if shorter[n:x] in longer and shorter[n:x] != '':\n                    common_substrings.append(shorter[n:x])\n        if len(common_substrings) == 0:\n            print(len(shorter) + len(longer))\n        else:\n            to_minus = len(max(common_substrings, key=len))\n            print(len(shorter) - to_minus + (len(longer) - to_minus))", "def lcs(a, b, m, n):\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                LCSuff[i][j] = 0\n            elif a[i - 1] == b[j - 1]:\n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n    return result\nx = int(input())\nz = [0 for k in range(x)]\nfor i in range(0, x):\n    a = input()\n    b = input()\n    if a == b:\n        z[i] = 0\n    else:\n        m = len(a)\n        n = len(b)\n        z[i] = m + n - 2 * lcs(a, b, m, n)\nfor i in z:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    a = input()[:-1]\n    b = input()[:-1]\n    x = len(a)\n    y = len(b)\n    c = 0\n    for i in range(x):\n        for j in range(i + 1, x + 1):\n            if a[i:j] in b:\n                if len(a[i:j]) > c:\n                    c = len(a[i:j])\n    print(x + y - 2 * c)", "t = int(input())\n\ndef LCSubstr(S, T):\n    L = [[0 for j in range(len(T))] for i in range(len(S))]\n    z = 0\n    ret = []\n    for i in range(len(S)):\n        for j in range(len(T)):\n            if S[i] == T[j]:\n                if i == 0 or j == 0:\n                    L[i][j] = 1\n                else:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                if L[i][j] > z:\n                    z = L[i][j]\n                    ret = [S[i - z + 1:i + 1]]\n                elif L[i][j] == z:\n                    ret += S[i - z + 1:i + 1]\n            else:\n                L[i][j] = 0\n    return ret\nfor i in range(t):\n    s1 = input()\n    s2 = input()\n    if s1 == s2:\n        print(0)\n    else:\n        d = LCSubstr(s1, s2)\n        if len(d) == 0:\n            print(len(s1) + len(s2))\n        else:\n            d = len(max(d, key=len))\n            print(len(s1) + len(s2) - 2 * d)", "n = int(input())\nfor i in range(n):\n    a = input()\n    b = input()\n    subs_a = [a[i:j] for i in range(len(a)) for j in range(i + 1, len(a) + 1)]\n    subs_b = [b[i:j] for i in range(len(b)) for j in range(i + 1, len(b) + 1)]\n    lista = list(set(subs_a).intersection(set(subs_b)))\n    if lista == []:\n        print(len(a) + len(b))\n    else:\n        fator_comum = max(list(set(subs_a).intersection(set(subs_b))), key=len)\n        print(len(a) + len(b) - 2 * len(fator_comum))", "n = int(input())\nfor i in range(n):\n    a = input()\n    b = input()\n    subs_a = [a[i:j] for i in range(len(a)) for j in range(i + 1, len(a) + 1)]\n    subs_b = [b[i:j] for i in range(len(b)) for j in range(i + 1, len(b) + 1)]\n    lista = list(set(subs_a).intersection(set(subs_b)))\n    if lista == []:\n        print(len(a) + len(b))\n    else:\n        fator_comum = max(list(set(subs_a).intersection(set(subs_b))), key=len)\n        print(len(a) + len(b) - 2 * len(fator_comum))", "for _ in range(0, int(input())):\n    a = input()\n    b = input()\n    lenA = len(a)\n    lenB = len(b)\n    resultMaximum = 0\n    for i in range(lenA):\n        for j in range(i, lenA):\n            if a[i:j + 1] in b:\n                resultMaximum = max(resultMaximum, j - i + 1)\n    print(lenA + lenB - 2 * resultMaximum)", "def fib_bottom_up(a, b, n, m):\n    bottom_up = [[0 for f in range(m + 1)] for g in range(n + 1)]\n    result = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                bottom_up[i][j] = 0\n            elif a[i - 1] == b[j - 1]:\n                bottom_up[i][j] = bottom_up[i - 1][j - 1] + 1\n                result = max(result, bottom_up[i][j])\n            else:\n                bottom_up[i][j] = 0\n    return result\nt = int(input())\nfor k in range(t):\n    a = input()\n    b = input()\n    n = len(a)\n    m = len(b)\n    x = fib_bottom_up(a, b, n, m)\n    z = n + m - 2 * x\n    print(z)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    s = set()\n    if len(b) > len(a):\n        (b, a) = (a, b)\n    for i in range(len(b)):\n        for j in range(i + 1, len(b) + 1):\n            if b[i:j] in a:\n                s.add(len(b[i:j]))\n    print(len(a) - max(s) + (len(b) - max(s)) if len(s) > 0 else len(a) + len(b))", "for _ in range(0, int(input())):\n    a = input()\n    b = input()\n    m = 0\n    for i in range(0, len(a)):\n        for j in range(0, len(b)):\n            if a[i] == b[j]:\n                c = 1\n                x = i\n                y = j\n                while x < len(a) and y < len(b) and (a[x] == b[y]):\n                    m = max(c, m)\n                    x = i + c\n                    y = j + c\n                    c += 1\n    print(len(a) + len(b) - 2 * m)", "for case in range(int(input())):\n    a = input()\n    b = input()\n    ans = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a) + 1):\n            if a[i:j] in b:\n                ans = max(ans, j - i)\n    print(len(a) + len(b) - 2 * ans)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i:j + 1] in b:\n                count = max(count, j - i + 1)\n    print(len(a) + len(b) - 2 * count)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    c = min(len(a), len(b))\n    if len(a) < len(b):\n        s1 = b\n        s2 = a\n    else:\n        s1 = a\n        s2 = b\n    max = 0\n    if s2 in s1:\n        max = len(s2)\n    else:\n        for i in range(c):\n            max = max\n            for j in range(i + 1, c + 1):\n                if s2[i:j:1] in s1:\n                    if len(s2[i:j:1]) > max:\n                        max = len(s1[i:j:1])\n                    else:\n                        max = max\n    print(len(a) + len(b) - 2 * max)", "n = int(input())\nfor _ in range(n):\n    a = input()\n    b = input()\n    y = ''\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i:j + 1] in b and len(y) < len(a[i:j + 1]):\n                y = a[i:j + 1]\n    print(len(a) + len(b) - len(y) * 2)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    s = [a[i:j + 1] for i in range(len(a)) for j in range(i, len(a)) if a[i:j + 1] in b]\n    if s:\n        print(len(a) + len(b) - len(max(s, key=len)) * 2)\n    else:\n        print(len(a) + len(b))", "t = int(input())\nfor y in range(t):\n    a = input()\n    b = input()\n    if len(b) > len(a):\n        (a, b) = (b, a)\n    ans = 0\n    for x in range(len(a)):\n        x1 = 0\n        ans1 = 0\n        if a[x] in b:\n            x1 = x + 1\n            while a[x:x1 + 1] in b and x1 < len(a):\n                x1 += 1\n            ans1 = x1 - x\n        if ans1 > ans:\n            ans = ans1\n    print(len(a) + len(b) - 2 * ans)", "test_n = int(input())\nfor _ in range(test_n):\n    a = input()\n    b = input()\n    if a == b:\n        print(0)\n        continue\n    longer = ''\n    shorter = ''\n    if len(a) >= len(b):\n        longer = a\n        shorter = b\n    else:\n        longer = b\n        shorter = a\n    len_s = len(shorter)\n    len_l = len(longer)\n    f = 0\n    for i in range(len_s, 0, -1):\n        for s in range(0, len_s - i + 1):\n            if shorter[s:s + i] in longer:\n                print(len_s - i + len_l - i)\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print(len_s + len_l)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    la = len(a)\n    lb = len(b)\n    res = 0\n    for i in range(min(la, lb)):\n        d = i + 1\n        st = set()\n        for j in range(la - i):\n            st.add(a[j:j + d])\n        f = True\n        for j in range(lb - i):\n            if b[j:j + d] in st:\n                res = d\n                f = False\n                break\n        if f:\n            break\n    print(la + lb - 2 * res)", "def LCS(X, Y, m, n):\n    maxLength = 0\n    endingIndex = m\n    lookup = [[0 for x in range(n + 1)] for y in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lookup[i][j] = lookup[i - 1][j - 1] + 1\n                if lookup[i][j] > maxLength:\n                    maxLength = lookup[i][j]\n                    endingIndex = i\n    return m + n - maxLength * 2\n\ndef process():\n    (a, b) = (input(), input())\n    return LCS(a, b, len(a), len(b))\nfor _ in range(int(input())):\n    print(process())", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    l = list()\n    n = len(b)\n    m = len(a)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            l.append(b[i:j])\n    x = 0\n    for i in l:\n        y = len(i)\n        if i in a and y > x:\n            x = len(i)\n    print(n + m - 2 * x)", "t = int(input())\nfor i in range(t):\n    lol = []\n    a = input()\n    b = input()\n    if len(a) >= len(b):\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n    for j in range(len(small)):\n        size = len(small) - j\n        for l in range(len(small) - size + 1):\n            if small[l:l + size] in big:\n                lol.append(len(small) + len(big) - size - size)\n    if len(lol) == 0:\n        lol = [len(small) + len(big)]\n    print(min(lol))", "def lcs(a, b):\n    longest = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            bj = j\n            ai = i\n            length = 0\n            while ai < len(a) and bj < len(b) and (a[ai] == b[bj]):\n                length += 1\n                bj += 1\n                ai += 1\n            if length > longest:\n                longest = length\n    return longest\n\ndef solve():\n    a = input()\n    b = input()\n    common = lcs(a, b)\n    return len(a) + len(b) - common * 2\ntimes = int(input())\nfor i in range(times):\n    print(solve())", "t = int(input())\nwhile t > 0:\n    a = input()\n    b = input()\n    m = 0\n    for j in range(len(a)):\n        for i in range(j, len(a)):\n            if a[j:i + 1] in b:\n                if i + 1 - j > m:\n                    m = i + 1 - j\n            else:\n                break\n    print(len(a + b) - 2 * m)\n    t -= 1", "for i in range(int(input())):\n    (a, b) = (input(), input())\n    ans = 0\n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            if a[i:j + 1] in b:\n                ans = max(ans, j - i + 1)\n    print(len(a) - ans + len(b) - ans)", "T = int(input())\nfor _ in range(T):\n    a = input()\n    b = input()\n    out = len(a) + len(b)\n    for i in range(len(a)):\n        for j in range(len(a), i, -1):\n            if a[i:j] in b:\n                out = min(out, len(a) + len(b) - 2 * (j - i))\n    print(out)", "def helper(a, b):\n    if a == b:\n        return 0\n    small = min(a, b, key=len)\n    if a == small:\n        big = b\n    else:\n        big = a\n    maxlen = 0\n    for i in range(len(small)):\n        for j in range(i + 1, len(small) + 1):\n            if small[i:j] in big:\n                maxlen = max(maxlen, len(small[i:j]))\n    return len(a) - maxlen + (len(b) - maxlen)\nfor i in range(int(input())):\n    a = input()\n    b = input()\n    print(helper(a, b))", "for x in range(int(input())):\n    a = input()\n    b = input()\n    c = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i:j + 1] in b and j - i + 1 > c:\n                c = j - i + 1\n    print(len(a) + len(b) - 2 * c)", "def huh(s):\n    a = list(s)\n    if min(a) == max(a):\n        return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        a = input()\n        b = input()\n        n = len(a)\n        m = len(b)\n        d = []\n        s = 0\n        if huh(a) and a[0] not in b:\n            s = n + m\n        elif huh(b) and b[0] not in a:\n            s = n + m\n        elif n > m:\n            for i in range(m):\n                for j in range(i, m + 1):\n                    if b[i:j] in a:\n                        d += [j - i]\n                        s = n + m - 2 * max(d)\n        elif n <= m:\n            for i in range(n):\n                for j in range(i + 1, n + 1):\n                    if a[i:j] in b:\n                        d += [j - i]\n                        s = n + m - 2 * max(d)\n        elif a == b:\n            d += [n]\n            s = n + m - 2 * max(d)\n        elif n == m and m == 1 and (a != b):\n            d += [n + m]\n            s = n + m - 2 * max(d)\n        print(s)\nmain()", "for y in range(int(input())):\n    a = input()\n    n = len(a)\n    b = input()\n    m = len(b)\n    maxx = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i:j + 1] in b:\n                maxx = max(maxx, j + 1 - i)\n    print(n + m - 2 * maxx)", "def solve():\n    a = input()\n    b = input()\n    sol = ''\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            ss = a[i:j + 1]\n            if ss in b and len(ss) > len(sol):\n                sol = ss\n    print(len(a) - len(sol) + (len(b) - len(sol)))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\nmain()", "def solve(X, Y, m, n):\n    ss = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                ss[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                ss[i][j] = ss[i - 1][j - 1] + 1\n                result = max(result, ss[i][j])\n            else:\n                ss[i][j] = 0\n    return result\nfor __ in range(int(input())):\n    a = input()\n    b = input()\n    m = len(a)\n    n = len(b)\n    j = solve(a, b, m, n)\n    print(n + m - j - j)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    maxl = 0\n    for i in range(1, len(b) + 1):\n        for j in range(len(b) - i + 1):\n            if b[j:j + i] in a:\n                maxl = max(maxl, i)\n    print(len(a) + len(b) - 2 * maxl)", "for _ in range(int(input())):\n    a = str(input())\n    b = str(input())\n    ans = 0\n    for i in range(len(a)):\n        for j in range(i + 1):\n            if a[j:len(a) - (i - j)] in b:\n                k = len(a[j:len(a) - (i - j)])\n                print(len(a) + len(b) - 2 * k)\n                ans += 1\n                break\n        if ans == 1:\n            break\n    if ans == 0:\n        print(len(a) + len(b))", "def solve():\n    a = input()\n    b = input()\n    lenA = len(a)\n    lenB = len(b)\n    for i in range(min(lenA, lenB), 0, -1):\n        for j in range(lenB):\n            if j + i <= lenB and b[j:j + i] in a:\n                return lenA + lenB - 2 * i\n    return lenA + lenB\nfor _ in range(int(input())):\n    print(solve())", "import math\ncases = int(input())\nfor c in range(cases):\n    string1 = input()\n    string2 = input()\n    max = 0\n    for i in range(len(string1)):\n        for j in range(i, len(string1)):\n            temp = string1[i:j + 1]\n            if temp in string2 and len(temp) > max:\n                max = len(temp)\n    answ = len(string2) - max + len(string1) - max\n    print(answ)", "def lcs(s1, s2):\n    if s1 == s2:\n        return len(s1)\n    longestSubstring = 0\n    for i in range(len(s1)):\n        for j in range(i + 1, len(s1) + 1):\n            substring = s1[i:j]\n            if substring in s2:\n                if len(substring) > longestSubstring:\n                    longestSubstring = len(substring)\n    return longestSubstring\nsize = int(input())\nfor i in range(size):\n    s1 = input()\n    s2 = input()\n    x = lcs(s1, s2)\n    print(len(s1) - x + len(s2) - x)", "import math\nn = int(input())\nfor i in range(n):\n    a = input()\n    b = input()\n    if len(set(a).intersection(set(b))) > 0:\n        k = min(len(a), len(b))\n        if len(a) >= 2 and len(b) >= 2:\n            x = []\n            t = []\n            for i in range(len(b) - 1):\n                l = b[i]\n                if l in a:\n                    x.append(l)\n                    for j in range(i + 1, len(b)):\n                        l += b[j]\n                        if l in a:\n                            x.append(l)\n                        else:\n                            break\n            for i in x:\n                g = len(i)\n                t.append(g)\n            y = max(t)\n            print(len(a) + len(b) - 2 * y)\n        else:\n            print(len(a) + len(b) - 2 * len(set(a).intersection(set(b))))\n    else:\n        print(len(a) + len(b))", "x = int(input())\nfor z in range(x):\n    i = 0\n    combo = 0\n    best_combo = 0\n    a = input()\n    b = input()\n    string = a[0]\n    while i < len(a):\n        bj_string = string\n        if bj_string in b:\n            combo += 1\n            if combo > best_combo:\n                best_combo = combo\n            if i + combo < len(a):\n                string += a[i + combo]\n            else:\n                i += 1\n                combo = 0\n                if i < len(a):\n                    string = a[i]\n        else:\n            i += 1\n            combo = 0\n            if i < len(a):\n                string = a[i]\n    print(len(a) + len(b) - best_combo * 2)", "t = int(input())\nfor y in range(t):\n    a = input()\n    n = len(a)\n    b = input()\n    m = len(b)\n    minn = 0\n    for i in range(n):\n        for j in range(i, n + 1):\n            if a[i:j] in b:\n                minn = max(minn, j - i)\n    print(n + m - 2 * minn)", "n = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    if len(s2) > len(s1):\n        (s1, s2) = (s2, s1)\n    ans = 0\n    for i in range(len(s2)):\n        for j in range(i, len(s2)):\n            if s2[i:j + 1] in s1:\n                ans = max(ans, len(s2[i:j + 1]))\n    print(len(s1) + len(s2) - 2 * ans)", "def commonSubstring(s1, s2):\n    numElementos = [[0] * (len(s2) + 1) for x in range(len(s1) + 1)]\n    most = 0\n    x = ''\n    count = 0\n    for i in range(0, len(s1)):\n        for j in range(0, len(s2)):\n            if s1[i] == s2[j]:\n                count = numElementos[i][j] + 1\n                numElementos[i + 1][j + 1] = count\n                if count > most:\n                    most = count\n                    x = ''\n                if len(s1[i - count + 1:i + 1]) >= most:\n                    x = ''.join(s1[i - count + 1:i + 1])\n    return print(len(s1) + len(s2) - 2 * len(x))\nt = int(input())\nfor i in range(0, t):\n    s1 = input()\n    s2 = input()\n    commonSubstring(s1, s2)", "def cS(s1, s2):\n    numElementos = [[0] * (len(s2) + 1) for x in range(len(s1) + 1)]\n    most = 0\n    x = ''\n    count = 0\n    for i in range(0, len(s1)):\n        for j in range(0, len(s2)):\n            if s1[i] == s2[j]:\n                count = numElementos[i][j] + 1\n                numElementos[i + 1][j + 1] = count\n                if count > most:\n                    most = count\n                    x = ''\n                if len(s1[i - count + 1:i + 1]) >= most:\n                    x = ''.join(s1[i - count + 1:i + 1])\n    return print(len(s1) + len(s2) - 2 * len(x))\nt = int(input())\nfor i in range(0, t):\n    s1 = input()\n    s2 = input()\n    cS(s1, s2)", "my_mass = list()\nsize_1 = 0\nsize_2 = 0\na = list()\nb = list()\n\ndef recurs(i, j, mass):\n    global my_mass\n    if len(mass) > len(my_mass):\n        my_mass = mass\n    if i == size_1:\n        1\n    else:\n        for l in range(j, size_2):\n            for k in range(i, size_1):\n                if a[k] == b[l]:\n                    mass.append(a[k])\n                    recurs(k + 1, l + 1, mass)\n                    mass = []\n                else:\n                    break\nfor i in range(int(input())):\n    a = list(input())\n    b = list(input())\n    size_1 = len(a)\n    size_2 = len(b)\n    max = 0\n    i = 0\n    size = 0\n    for i in range(0, len(b)):\n        for j in range(0, len(a)):\n            k = j\n            l = i\n            size = 0\n            while b[l] == a[k]:\n                l += 1\n                k += 1\n                size += 1\n                if size > max:\n                    max = size\n                if l == len(b):\n                    break\n                if k == len(a):\n                    break\n    print(len(a) - max + len(b) - max)", "def main():\n    test_counter = int(input())\n    for _ in range(test_counter):\n        first_word = Word(input())\n        second_word = Word(input())\n        print(first_word.get_delete_count_for_longest_common_substring(second_word))\n\nclass Word:\n\n    def __init__(self, string):\n        self.string = string\n\n    def __eq__(self, other):\n        return self.string == other.string\n\n    def __len__(self):\n        return len(self.string)\n\n    def substring(self, start, end):\n        return self.string[start:end]\n\n    def longest_common_substring(self, other):\n        max_length = 0\n        for start in range(len(self)):\n            end = len(self)\n            while end > start:\n                my_substring = self.substring(start, end)\n                if my_substring in other.string:\n                    max_length = max(max_length, len(my_substring))\n                end -= 1\n        return max_length\n\n    def get_delete_count_for_longest_common_substring(self, other):\n        length_of_lcs = self.longest_common_substring(other)\n        total_letters = len(self) + len(other)\n        delete_count = total_letters - length_of_lcs * 2\n        return delete_count\nmain()", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    ans = 0\n    for i in range(len(a)):\n        l = a[i]\n        for j in range(len(b)):\n            if b[j] == l:\n                for k in range(100):\n                    if i + k >= len(a) or j + k >= len(b) or a[i + k] != b[j + k]:\n                        break\n                ans = max(k, ans)\n    print(len(a) + len(b) - 2 * ans)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    for _ in range(int(input())):\n        a = input()\n        b = input()\n        m = 0\n        for i in range(len(a)):\n            for j in range(i, len(a)):\n                if a[i:j + 1] in b:\n                    m = max(m, j + 1 - i)\n        print(len(a) + len(b) - 2 * m)\nsolve()", "list_ans = []\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    x = 0\n    if len(b) < len(a):\n        (a, b) = (b, a)\n    n = len(a)\n    for i in range(n):\n        while i + x < n and a[i:i + x + 1] in b:\n            x += 1\n    list_ans.append(len(a) + len(b) - 2 * x)\nfor item in list_ans:\n    print(item)", "for tests in range(int(input())):\n    a = input()\n    b = input()\n    m = 100\n    la = len(a)\n    x = 0\n    for i in range(la):\n        for j in range(i, la):\n            if b.count(a[i:j + 1]) > 0:\n                if i + la - j - 1 + (b.find(a[i:j + 1]) - 1 + len(b) - (b.find(a[i:j + 1]) - 1 + len(a[i:j + 1]))) < m:\n                    m = i + la - j - 1 + (b.find(a[i:j + 1]) - 1 + len(b) - (b.find(a[i:j + 1]) - 1 + len(a[i:j + 1])))\n                    x = 1\n            else:\n                break\n    if x == 1:\n        print(m)\n    else:\n        print(len(a) + len(b))", "def solve():\n    a = input()\n    b = input()\n    e = 0\n    k = 1\n    (i, j) = (0, 0)\n    while i <= len(a) - k:\n        while j <= len(b) - k:\n            tempa = a[i:i + k]\n            tempb = b[j:j + k]\n            if tempa == tempb:\n                k += 1\n                e = 1\n                i = 0\n                j = 0\n                continue\n            j += 1\n        j = 0\n        i += 1\n    if e == 1:\n        print(len(a) + len(b) - 2 * (k - 1))\n    else:\n        print(len(a) + len(b))\nt = int(input())\nfor x in range(t):\n    solve()", "def lcs(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    res = 0\n    dp = [[None] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                res = max(res, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return res\nn = int(input())\nwhile n > 0:\n    s1 = input()\n    s2 = input()\n    res = lcs(s1, s2)\n    print(len(s1) - res + len(s2) - res)\n    n -= 1", "score = 400\ntried_wrds = set()\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        a = input()\n        b = input()\n        global score\n        score = 400\n        global tried_wrds\n        tried_wrds = set()\n        solve(a, b, 0)\n        print(score)\n\ndef solve(a, b, sc):\n    global score\n    global tried_wrds\n    cnt = b.count(a)\n    if a not in tried_wrds:\n        tried_wrds.add(a)\n    else:\n        return\n    if sc > score:\n        return\n    if cnt:\n        sc += len(b) - len(a)\n        if sc < score:\n            score = sc\n        return\n    elif a != '':\n        a1 = a[1:]\n        a2 = a[:-1]\n        solve(a1, b, sc + 1)\n        solve(a2, b, sc + 1)\n    else:\n        sc += len(b) - len(a)\n        if sc < score:\n            score = sc\n        return\nmain()", "def generateSubstring(a):\n    ret = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a) + 1):\n            ret.append(a[i:j])\n    return set(ret)\n\ndef solve(a, b):\n    seta = generateSubstring(a)\n    setb = generateSubstring(b)\n    substr = ''\n    for e in seta:\n        if e in setb:\n            if len(e) > len(substr):\n                substr = e\n    return len(a) + len(b) - 2 * len(substr)\nt = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    print(solve(a, b))", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    x = 0\n    s = []\n    for i in range(len(b)):\n        k = []\n        for j in range(len(a)):\n            if b[i] == a[j]:\n                if i > 0 and j > 0:\n                    if s[i - 1][j - 1]:\n                        k.append(1 + s[i - 1][j - 1])\n                    else:\n                        k.append(1)\n                else:\n                    k.append(1)\n            else:\n                k.append(0)\n        x = max(max(k), x)\n        s.append(k)\n    print(len(a) + len(b) - x * 2)", "def main(s1, s2):\n    (n1, n2) = (len(s1), len(s2))\n    dp = [[0 for i in range(n2 + 1)] for j in range(n1 + 1)]\n    res = 0\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                res = max(res, dp[i][j])\n    return res\nt = int(input())\nfor x in range(t):\n    a = input()\n    b = input()\n    n = len(a)\n    m = len(b)\n    lcs = main(a, b)\n    print(m + n - 2 * lcs)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    mx = len(a) + len(b)\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            temp = a[i:j + 1]\n            if temp in b:\n                if len(a) + len(b) - 2 * (j - i + 1) < mx:\n                    mx = len(a) + len(b) - 2 * (j - i + 1)\n    print(mx)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    if len(a) >= len(b):\n        (a, b) = (b, a)\n    ans = 9999999999\n    for i in range(0, len(a) + 1):\n        for j in range(0, len(a) - i + 1):\n            if a[i:i + j] in b:\n                ans = min(ans, len(a) - len(a[i:i + j]) + len(b) - len(a[i:i + j]))\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = sorted([input(), input()])\n    m = 0\n    for l in range(len(a)):\n        for r in range(len(a) - 1, l - 1, -1):\n            if a[l:r + 1] in b:\n                m = max(r - l + 1, m)\n    print(len(a) + len(b) - 2 * m)", "def LCSubStr(X, Y, m, n):\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                LCSuff[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n    return result\nt = int(input())\nfor q in range(t):\n    ch = input()\n    sh = input()\n    n = len(ch)\n    m = len(sh)\n    print(n + m - 2 * LCSubStr(ch, sh, n, m))", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    if a == b:\n        print('0')\n    else:\n        max_ = 0\n        i = 0\n        while i <= len(a) - 1:\n            for j in range(i + 1, len(a) + 1):\n                if a[i:j] in b:\n                    k = j - i\n                    if k > max_:\n                        max_ = k\n                    if j == len(a):\n                        i += 1\n                else:\n                    i += 1\n                    break\n        print(len(a) + len(b) - 2 * max_)", "def Solve():\n    s = input()\n    p = input()\n    if len(s) > len(p):\n        (s, p) = (p, s)\n    for i in range(len(s)):\n        k = len(s) - i\n        for j in range(0, i + 1):\n            t = s[j:j + k]\n            if p.find(t) >= 0:\n                print(len(p) - len(t) + len(s) - len(t))\n                return\n    print(len(s) + len(p))\nq = int(input())\nwhile q:\n    Solve()\n    q -= 1", "def LCS(X, Y, m, n):\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                LCSuff[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n    return m + n - 2 * result\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    c = LCS(a, b, len(a), len(b))\n    print(c)", "t = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    ans = 0\n    mm = ''\n    for level in range(1, len(a) + 1):\n        for pos in range(len(a)):\n            if a[pos:pos + level] in b and len(mm) < len(a[pos:pos + level]):\n                mm = a[pos:pos + level]\n    print(len(a) - len(mm) + len(b) - len(mm))", "for _ in range(int(input())):\n    (a, b) = (input(), input())\n    maxx = ''\n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            if a[i:j + 1] in b:\n                if len(maxx) < len(a[i:j + 1]):\n                    maxx = a[i:j + 1]\n    print(len(a) - len(maxx) + len(b) - len(maxx))", "def func(x, m, y, n):\n    z = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    ans = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                z[i][j] = 0\n            elif x[i - 1] == y[j - 1]:\n                z[i][j] = z[i - 1][j - 1] + 1\n                ans = max(ans, z[i][j])\n            else:\n                z[i][j] = 0\n    return ans\nfor u in range(int(input())):\n    x = input()\n    y = input()\n    m = len(x)\n    n = len(y)\n    ans = func(x, m, y, n)\n    ans = m + n - 2 * ans\n    print(ans)", "n = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    ans = []\n    if len(s1) >= len(s2):\n        (s1, s2) = (s2, s1)\n    for i in range(len(s1)):\n        for j in range(len(s1), i, -1):\n            if s1[i:j] in s2:\n                ans.append(s1[i:j])\n    ans = sorted(ans, key=lambda x: len(x), reverse=True)\n    if ans == []:\n        print(len(s1) + len(s2))\n    else:\n        print(len(s1) + len(s2) - len(ans[0]) * 2)", "def main():\n    from sys import stdin, stdout\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        a = rl().strip()\n        b = rl().strip()\n        (n, m) = (len(a), len(b))\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        r = 0\n        for i in range(n):\n            dp[i][0] = 0\n        for j in range(m):\n            dp[0][j] = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                    r = max(r, dp[i][j])\n        wl(str(n + m - 2 * r) + '\\n')\nmain()", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    (m, al, bl) = (0, len(a), len(b))\n    for i in range(al):\n        for j in range(bl):\n            if a[i] == b[j]:\n                k = 0\n                while i + k < al and j + k < bl and (a[i + k] == b[j + k]):\n                    k += 1\n                if k > m:\n                    m = k\n    print(al + bl - 2 * m)", "one = [*open(0)][0::1]\nfor i in range(int(one[0])):\n    on = one[2 * i + 1][:-1]\n    two = one[2 * i + 2][:-1]\n    tem = len(on)\n    tem2 = len(two)\n    if tem > tem2:\n        temp = tem2\n        s = two\n        s2 = on\n    else:\n        temp = tem\n        s = on\n        s2 = two\n    flag = 0\n    ss = temp\n    while temp > 0:\n        temp -= 1\n        for j in range(ss - temp):\n            sss = s[j:j + temp + 1]\n            if sss in s2:\n                flag = len(sss)\n                break\n        if flag:\n            break\n    print(tem + tem2 - 2 * flag)", "for tc in range(int(input())):\n    (s1, s2) = (input(), input())\n    if s1 == s2:\n        print(0)\n        continue\n    opr = len(s1) + len(s2)\n    for i in range(len(s1)):\n        for j in range(i + 1, len(s1) + 1):\n            if s1[i:j] in s2:\n                opr = min(opr, len(s1) + len(s2) - 2 * len(s1[i:j]))\n    print(opr)", "def solve():\n    a = input()\n    b = input()\n    m = 0\n    for i in range(len(a)):\n        s = a[i:]\n        for j in range(len(b)):\n            if b[j] == s[0]:\n                k = 0\n                while k + j < len(b) and k < len(s) and (b[k + j] == s[k]):\n                    k += 1\n                if k > m:\n                    m = k\n    return len(a) + len(b) - 2 * m\nt = int(input())\nwhile t > 0:\n    print(solve())\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a = input()[:-1]\n        b = input()[:-1]\n        if len(a) > len(b):\n            (a, b) = (b, a)\n        n = len(a)\n        p = False\n        for i in range(n, -1, -1):\n            if p:\n                break\n            for j in range(n + 1 - i):\n                if a[j:j + i] in b:\n                    ans = len(b) + len(a) - i * 2\n                    p = True\n                    break\n        print(ans)\nmain()", "import math\n\ndef get_inp():\n    return list(map(int, input().split()))\n\ndef solve():\n    sa = input()\n    sb = input()\n    ia = 0\n    max_cnt = 0\n    while ia < len(sa):\n        ib = 0\n        while ib < len(sb):\n            if sa[ia] == sb[ib]:\n                i = ia\n                j = ib\n                cnt = 0\n                while i < len(sa) and j < len(sb):\n                    if sa[i] == sb[j]:\n                        cnt += 1\n                    else:\n                        break\n                    i += 1\n                    j += 1\n                if cnt > max_cnt:\n                    max_cnt = cnt\n            ib += 1\n        ia += 1\n    return len(sa) + len(sb) - 2 * max_cnt\ntc = int(input())\nfor _ in range(tc):\n    print(solve())", "def LCSubStr(X, Y, m, n):\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                LCSuff[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n    return result\nt = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    m = len(a)\n    n = len(b)\n    x = LCSubStr(a, b, m, n)\n    print(m - x + (n - x))", "T = int(input())\nfor t in range(T):\n    m = input()\n    n = input()\n    a = []\n    b = []\n    if len(m) > len(n):\n        for i in range(len(n)):\n            a.append(n[i])\n        for i in range(len(m)):\n            b.append(m[i])\n    else:\n        for i in range(len(n)):\n            b.append(n[i])\n        for i in range(len(m)):\n            a.append(m[i])\n    ma = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                count = 0\n                for k in range(min(len(a) - i, len(b) - j)):\n                    if a[k + i] == b[k + j]:\n                        count += 1\n                    else:\n                        break\n                if count >= ma:\n                    ma = count\n    ans = len(a) - ma + len(b) - ma\n    print(ans)", "for x in range(int(input())):\n    a = input()\n    b = input()\n    c = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i:j + 1] in b and j - i + 1 > c:\n                c = j - i + 1\n    print(len(a) + len(b) - 2 * c)", "t = int(input())\nfor l in range(t):\n    a = input()\n    b = input()\n    if len(a) < len(b):\n        c = a\n        d = b\n    else:\n        c = b\n        d = a\n    ans = 0\n    for i in range(len(c)):\n        for j in range(i, len(c)):\n            if d.find(c[i:j + 1]) > -1:\n                if len(c[i:j + 1]) > ans:\n                    ans = len(c[i:j + 1])\n    print(len(d) + len(c) - 2 * ans)", "def make_substring(a):\n    return [a[i:j] for i in range(len(a)) for j in range(i + 1, len(a) + 1)]\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    mx = 0\n    for i in make_substring(a):\n        mx = max(mx, len(i)) if i in b else mx\n    print(len(a) + len(b) - 2 * mx)"]