["k = int(input())\nq = [1] * 10\nr = 1\no = 0\nwhile r < k:\n    r //= q[o]\n    q[o] += 1\n    r *= q[o]\n    o = (o + 1) % 10\ns = 'codeforces'\nprint(''.join([s[i] * q[i] for i in range(10)]))", "k = int(input())\ns = 'codeforces'\nlst = [1] * len(s)\n(cnt, ind) = (1, 0)\nwhile cnt < k:\n    if ind == len(s):\n        ind = 0\n    lst[ind] += 1\n    cnt = cnt / (lst[ind] - 1) * lst[ind]\n    ind += 1\nfor i in range(len(s)):\n    print(lst[i] * s[i], end='')", "def mul(a):\n    r = 1\n    for item in a:\n        r *= item\n    return r\nm = int(input())\nn = [0] * 10\na = 0\nwhile a < m:\n    for i in range(10):\n        n[i] += 1\n        a = mul(n)\n        if a >= m:\n            break\nsol = ''\nfor _ in range(n[0]):\n    sol += 'c'\nfor _ in range(n[1]):\n    sol += 'o'\nfor _ in range(n[2]):\n    sol += 'd'\nfor _ in range(n[3]):\n    sol += 'e'\nfor _ in range(n[4]):\n    sol += 'f'\nfor _ in range(n[5]):\n    sol += 'o'\nfor _ in range(n[6]):\n    sol += 'r'\nfor _ in range(n[7]):\n    sol += 'c'\nfor _ in range(n[8]):\n    sol += 'e'\nfor _ in range(n[9]):\n    sol += 's'\nprint(sol)", "n = int(input())\nans = 'codeforces'\na = [1] * 10\nk = 1\nx = 0\nwhile k < n:\n    ok = a[x % 10]\n    k = k // ok\n    a[x % 10] += 1\n    k *= a[x % 10]\n    x += 1\nout = ''\nfor i in range(10):\n    for j in range(a[i]):\n        out += ans[i]\nprint(out)", "k = int(input())\nn = int(k ** 0.1)\nm = n ** 10\nfor c in 'codeforces':\n    l = n + (m < k)\n    print(c * l, end='')\n    m = m // n * l", "arr = [1] * 10\nk = int(input())\nx = 1\ni = 0\nwhile x < k:\n    a = arr[i]\n    x //= a\n    arr[i] += 1\n    x *= arr[i]\n    i = (i + 1) % 10\ns = 'codeforces'\nans = ''\nfor i in range(10):\n    ans += s[i] * arr[i]\nprint(ans)", "s = list('codeforces')\nk = int(input())\nl = [1] * 10\n(i, prod) = (0, 1)\nwhile prod < k:\n    prod //= l[i]\n    l[i] += 1\n    prod *= l[i]\n    i = (i + 1) % 10\nfor i in range(10):\n    print(s[i] * l[i], end='')", "for _ in range(1):\n    i = 1\n    s = 'codeforces'\n    m = int(input())\n    if m == 1:\n        print(s)\n    else:\n        while int(pow(i, 10)) < m:\n            i += 1\n        k = 1\n        while int(pow(i, k) * pow(i - 1, 10 - k)) < m:\n            k += 1\n        for j in range(k):\n            for w in range(i):\n                print(s[j], end='')\n        for j in range(k, 10):\n            for w in range(i - 1):\n                print(s[j], end='')\n        print()", "k = int(input())\nl = ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']\nx = k ** 0.1\nx = int(x)\nindex = 0\nwhile (x + 1) ** index * x ** (10 - index) < k:\n    index += 1\nfor i in l:\n    if index:\n        index -= 1\n        print(i * int(x + 1), end='')\n    else:\n        print(i * int(x), end='')\nprint()", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve():\n    k = get_int()\n    ans = [1 for i in range(10)]\n    prod = 1\n    flag = 0\n    while flag == 0:\n        for (i, ele) in enumerate(ans):\n            if prod < k:\n                prod = prod // ele\n                prod *= ele + 1\n                ans[i] += 1\n            else:\n                flag = 1\n                break\n    final = ''\n    temp = 'codeforces'\n    for i in range(10):\n        final += temp[i] * ans[i]\n    print(final)\nsolve()", "k = int(input())\ns = 'codeforces'\nm = 0\ni = 0\nf = ''\nwhile i >= 0:\n    if i ** 10 >= k:\n        break\n    i += 1\nfor j in range(1, 11):\n    m = (i - 1) ** (10 - j) * i ** j\n    if m >= k:\n        break\nfor a in s[:j]:\n    f += a * i\nfor a in s[j:]:\n    f += a * (i - 1)\nprint(f)", "import math\nk = int(input())\nave = math.floor(k ** 0.1)\nn = ave ** 10\nseq = []\nfor ch in 'codeforces':\n    if n < k:\n        seq.append(ch * (ave + 1))\n        n //= ave\n        n *= ave + 1\n    else:\n        seq.append(ch * ave)\nprint(''.join(seq))", "k = int(input())\ni = 1\nx = i\nwhile k > x:\n    i += 1\n    x = i ** 10\ntemp = 0\nwhile x > k:\n    x = x // i\n    x *= i - 1\n    temp += 1\nif k > x:\n    temp -= 1\ntemp = 10 - temp\ns = 'codeforces'\nres = ''\nfor j in range(10):\n    if temp > 0:\n        res += s[j] * i\n        temp -= 1\n    else:\n        res += s[j] * (i - 1)\nprint(res)", "k = int(input())\ns = 'codeforces'\ncnt = 1\nobj = {}\nfor i in range(len(s)):\n    obj[i] = 1\ncur = 2\nind = 0\nwhile cnt < k:\n    cnt /= cur - 1\n    cnt *= cur\n    cnt = int(cnt)\n    obj[ind] = cur\n    ind += 1\n    if ind == len(s):\n        cur += 1\n        ind = 0\nans = ''\nfor i in range(len(s)):\n    for j in range(obj[i]):\n        ans += s[i]\nprint(ans)", "def main():\n    n = int(input())\n    str = 'codeforces'\n    arr = [1] * len(str)\n    idx = 0\n    ans = ''\n    product = 1\n    while product < n:\n        product /= arr[idx]\n        arr[idx] += 1\n        product *= arr[idx]\n        idx += 1\n        idx %= len(str)\n    for i in range(len(str)):\n        ans += str[i] * arr[i]\n    print(ans)\nmain()", "def calc_m3(k, a):\n    (left, right) = (k, (a + 1) ** 10)\n    for i in range(1, 12):\n        left *= a + 1\n        right *= a\n        if left > right:\n            return i - 1\n    return -1\nk = int(input())\nbase = 'codeforces'\na = int(k ** 0.1)\nm = calc_m3(k, a)\nfor i in range(10 - m):\n    print(base[i] * (a + 1), end='')\nfor i in range(10 - m, 10):\n    print(base[i] * a, end='')", "k = int(input())\ns = 'codeforces'\ns = list(s)\ncur = 1\nfor i in range(len(s)):\n    left = 1\n    right = 41\n    best = None\n    while left <= right:\n        mid = (left + right) // 2\n        temp = cur * mid ** (len(s) - i)\n        if temp < k:\n            left = mid + 1\n        if temp >= k:\n            best = mid\n            right = mid - 1\n    cur *= best\n    if best:\n        s[i] = s[i] * best\nprint(''.join(s))", "def search(p, n):\n    t = 1\n    while t ** p < n:\n        t += 1\n    return t\nn = int(input())\ns = 'codeforces'\nfor i in range(10):\n    t = search(10 - i, n)\n    print(s[i] * t, end='')\n    n = (n + t - 1) // t", "k = int(input())\nprod = 1\nvalues = [1 for i in range(10)]\ni = 0\nwhile prod < k:\n    prod /= values[i]\n    values[i] += 1\n    prod *= values[i]\n    i = (i + 1) % 10\nfor j in range(10):\n    print('codeforces'[j] * values[j], end='')", "arr = [1] * 10\nword = list('codeforces')\nres = 1\nk = int(input())\ni = 0\nwhile res < k:\n    res //= arr[i]\n    arr[i] += 1\n    res *= arr[i]\n    i = (i + 1) % 10\noutput = ''\nfor i in range(10):\n    output += word[i] * arr[i]\nprint(output)", "import copy\ns = 'codeforces'\nk = int(input())\na = [1] * 10\nc = copy.copy(a)\nt = 1\ni = 0\nwhile t < k:\n    t = t // a[i] * (a[i] + 1)\n    a[i] += 1\n    c[i] += 1\n    i = (i + 1) % 10\nans = ''\nfor i in range(10):\n    ans += s[i] * c[i]\nprint(ans)", "import copy\ns = 'codeforces'\nk = int(input())\na = [1] * 10\nc = copy.copy(a)\nt = 1\ni = 0\nwhile t < k:\n    t = t // a[i] * (a[i] + 1)\n    a[i] += 1\n    c[i] += 1\n    i = (i + 1) % 10\nans = ''\nfor i in range(10):\n    ans += s[i] * c[i]\nprint(ans)", "import math\nn = int(input())\nrep = [1] * 10\ni = 0\nwhile math.prod(rep) < n:\n    rep[i % 10] += 1\n    i += 1\nw = 'codeforces'\nfor i in range(10):\n    print(w[i] * rep[i], end='')", "import math\nn = int(input())\nr = [1] * 10\ni = 0\nwhile math.prod(r) < n:\n    r[i % 10] += 1\n    i += 1\nw = 'codeforces'\nfor i in range(10):\n    print(w[i] * r[i], end='')", "import math\nn = int(input())\nr = [1] * 10\ni = 0\nwhile math.prod(r) < n:\n    r[i % 10] += 1\n    i += 1\nw = 'codeforces'\nfor i in range(10):\n    print(w[i] * r[i], end='')", "def f(n):\n    A = [1] * 10\n    s = 1\n    i = 0\n    while s < n:\n        s = s * (A[i] + 1) // A[i]\n        A[i] += 1\n        i = (i + 1) % 10\n    return 'c' * A[0] + 'o' * A[1] + 'd' * A[2] + 'e' * A[3] + 'f' * A[4] + 'o' * A[5] + 'r' * A[6] + 'c' * A[7] + 'e' * A[8] + 's' * A[9]\nn = int(input())\nprint(f(n))", "def solve(x, n):\n    if n == 1:\n        return x\n    p = [1] * 10\n    sn = ''\n    product = 1\n    i = 0\n    while product < n:\n        product = product // p[i]\n        p[i] += 1\n        product = product * p[i]\n        i = (i + 1) % 10\n    for i in range(10):\n        sn += x[i] * p[i]\n    return sn\nt = int(input())\ns = 'codeforces'\nprint(solve(s, t))", "n = int(input())\ns1 = 'codeforces'\nl = [1] * 10\ns = 1\nf = 1\nwhile f and n != 1:\n    for i in range(10):\n        s = s // l[i]\n        l[i] += 1\n        s = s * l[i]\n        if s >= n:\n            f = 0\n            break\nans = ''\nfor i in range(10):\n    for j in range(l[i]):\n        ans = ans + s1[i]\nprint(ans)", "n = int(input())\nimport math\nm = 10\na = 1\nfor i in ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']:\n    print(i * math.ceil(n ** (1 / m) - 10 ** (-14)), end='')\n    a *= math.ceil(n ** (1 / m) - 10 ** (-14))\n    n = math.ceil(n / math.ceil(n ** (1 / m)) - 10 ** (-14))\n    m -= 1", "k = int(input())\nm = int(k ** 0.1)\ns = m ** 10\nj = 0\nwhile s < k:\n    s = s / m * (m + 1)\n    j += 1\nans = [m] * 10\nfor i in range(j):\n    ans[i] += 1\nw = 'codeforces'\nfor i in range(len(ans)):\n    for j in range(ans[i]):\n        print(w[i], end='')", "import math\nk = int(input())\nc = [1] * 10\nt = 0\nwhile math.prod(c) < k:\n    c[t] += 1\n    t += 1\n    if t == 10:\n        t = 0\nj = 0\ns = 'codeforces'\nfor i in s:\n    print(i * c[j], end='')\n    j += 1\nprint()", "n = int(input())\nk = 1\ni = 0\nv = [1] * 10\nwhile k < n:\n    p = v[i % 10]\n    k //= p\n    v[i % 10] += 1\n    k *= v[i % 10]\n    i += 1\ns = 'codeforces'\nfor i in range(10):\n    print(s[i] * v[i], end='')", "def mult(arr):\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\ndef code(m):\n    str1 = 'codeforces'\n    arr = [1] * 10\n    pr = 1\n    i = 0\n    if m == 1:\n        return str1\n    else:\n        while pr < m:\n            if i >= 10:\n                i = 0\n            arr[i] += 1\n            i += 1\n            pr = mult(arr)\n    k = ''\n    for i in range(10):\n        k += arr[i] * str1[i]\n    return k\nt = int(input())\nprint(code(t))", "k = int(input())\ns = 'codeforces'\nn = len(s)\ntimes = [1] * n\ncount = 1\ni = 0\nwhile count < k:\n    temp = times[i]\n    times[i] += 1\n    count = count * times[i] // temp\n    i += 1\n    i %= n\nfor i in range(n):\n    print(s[i] * times[i], end='')", "s = list('codeforces')\nk = int(input())\nl = [1] * 10\n(i, prod) = (0, 1)\nwhile prod < k:\n    prod //= l[i]\n    l[i] += 1\n    prod *= l[i]\n    i = (i + 1) % 10\nfor i in range(10):\n    print(s[i] * l[i], end='')", "n = int(input())\na = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nf = lambda x, a: [(x := (x * i)) for i in a][-1]\ni = 0\nwhile f(1, a) < n:\n    a[i] += 1\n    i = (i + 1) % 10\nprint(*('codeforces'[i] * a[i] for i in range(10)), sep='')", "k = int(input())\nn = int(k ** 0.1)\nm = n ** 10\nfor c in 'codeforces':\n    l = n + (m < k)\n    print(c * l, end='')\n    m = m // n * l", "times = int(input())\ns = 'codeforces'\nans = ''\ncomb = 1\nrem = 10\nfor c in s:\n    iter = 1\n    while comb * iter ** rem < times:\n        iter = iter + 1\n    comb = comb * iter\n    rem = rem - 1\n    ans = c * iter\n    print(ans, end='')", "arr = [1] * 10\nk = int(input())\nx = 1\ni = 0\nwhile x < k:\n    a = arr[i]\n    x //= a\n    arr[i] += 1\n    x *= arr[i]\n    i = (i + 1) % 10\ns = 'codeforces'\nans = ''\nfor i in range(10):\n    ans += s[i] * arr[i]\nprint(ans)", "from math import *\nn = int(input())\nhigh = int(ceil(n ** (1 / 10)))\nif (high - 1) ** 10 >= n:\n    high = high - 1\nlow = int(high - 1)\nhighcount = 1\nlowcount = 9\nwhile True:\n    if high ** highcount * low ** lowcount >= n:\n        break\n    else:\n        highcount += 1\n        lowcount -= 1\ntemp = 'codeforces'\ntemp = temp[:highcount]\nfor x in temp:\n    print(x * high, end='')\ntemp = 'codeforces'\ntemp = temp[highcount:]\nfor x in temp:\n    print(x * low, end='')", "from math import *\nn = int(input())\nhigh = int(ceil(n ** (1 / 10)))\nif (high - 1) ** 10 == n:\n    high = high - 1\nlow = int(high - 1)\nhighcount = 1\nlowcount = 9\nwhile True:\n    if high ** highcount * low ** lowcount >= n:\n        break\n    else:\n        highcount += 1\n        lowcount -= 1\ntemp = 'codeforces'\ntemp = temp[:highcount]\nfor x in temp:\n    print(x * high, end='')\ntemp = 'codeforces'\ntemp = temp[highcount:]\nfor x in temp:\n    print(x * low, end='')", "n = int(input())\nx = [1] * 10\nind = 0\npdt = 1\nwhile True:\n    if pdt >= n:\n        break\n    pdt = pdt * (x[ind] + 1) // x[ind]\n    x[ind] += 1\n    ind = (ind + 1) % 10\ncodeforces = list('codeforces')\nfor i in range(10):\n    print(codeforces[i] * x[i], end='')", "k = int(input())\nn = int(k ** 0.1)\nm = n ** 10\nr = ''\nfor c in 'codeforces':\n    l = n + (m < k)\n    r += c * l\n    m = m // n * l\nprint(r)", "from math import pow, floor, log10\ns = 'codeforces'\nt = int(input())\nk = floor(pow(10, log10(t) / 10))\nx = 0\nwhile True:\n    if pow(k + 1, x) * pow(k, 10 - x) >= t:\n        break\n    x = x + 1\nfor i in range(0, 10):\n    for j in range(0, k + (i < x)):\n        print(s[i], end='')", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = int(input())\n    prod = 1\n    l = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    while prod < n:\n        for x in range(10):\n            l[x] = l[x] + 1\n            prod = 1\n            for y in range(10):\n                prod *= l[y]\n            if prod >= n:\n                break\n    fin = 'codeforces'\n    for x in range(10):\n        for y in range(l[x]):\n            print(fin[x], end='')\nt = 1\nwhile t:\n    solve()\n    t -= 1", "import math\nfrom typing import List\nk = int(input())\nwords = list('codeforces')\ncnt = [1] * 10\n\ndef check():\n    ret = 1\n    for i in cnt:\n        ret *= i\n    return ret < k\nx = 0\nwhile check():\n    cnt[x % 10] += 1\n    x += 1\nres = ''\nfor i in range(10):\n    res += words[i] * cnt[i]\nprint(res)", "k = int(input())\ns = 'codeforces'\ncnt = [1] * 10\nn = 1\nwhile n < k:\n    for i in range(10):\n        n /= cnt[i]\n        cnt[i] += 1\n        n *= cnt[i]\n        if n >= k:\n            break\nans = list()\nfor i in range(10):\n    for _ in range(cnt[i]):\n        ans.append(s[i])\nprint(''.join(ans))", "times = int(input())\ns = 'codeforces'\nans = ''\ncomb = 1\nrem = 10\nfor c in s:\n    iter = 1\n    while comb * iter ** rem < times:\n        iter = iter + 1\n    comb = comb * iter\n    rem = rem - 1\n    ans = c * iter\n    print(ans, end='')", "import sys\nimport math\n\ndef ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nT = 1\nwhile T:\n    T -= 1\n    n = int(input())\n    cf = 'codeforces'\n    ans = ''\n    for i in range(1, 100):\n        if i ** 10 >= n:\n            break\n    a = i\n    b = 0\n    c = i - 1\n    d = 10\n    for i in range(11):\n        if a ** b * c ** d >= n:\n            break\n        else:\n            b += 1\n            d -= 1\n    for i in range(1, 11):\n        if i <= b:\n            ans += cf[i - 1] * a\n        else:\n            ans += cf[i - 1] * c\n    print(ans)", "k = int(input())\nstring = 'codeforces'\nmin = 0\nfor i in range(50):\n    if i ** 10 >= k:\n        min = i\n        break\ninit = (min - 1) ** 10\nfor i in range(1, 11):\n    if (min - 1) ** (10 - i) * min ** i >= k:\n        string2 = ''\n        for j in range(i):\n            string2 += string[j] * min\n        for j in range(i, 10):\n            string2 += string[j] * (min - 1)\n        print(string2)\n        break", "n = int(input())\ns0 = 'codeforces'\nx = int(n ** 0.1)\ny = 10\nfor i in range(10):\n    if x ** (10 - i) * (x + 1) ** i >= n:\n        y = i\n        break\nans = ''\nfor i in range(10):\n    if i < y:\n        ans += s0[i] * (x + 1)\n    else:\n        ans += s0[i] * x\nprint(ans)", "import math\nk = int(input())\ns = 'codeforces'\nocc = [1] * 10\nfor i in range(9, -1, -1):\n    minn = int(10 ** math.floor(math.log10(k) / (i + 1)))\n    while minn ** (i + 1) < k:\n        minn += 1\n    occ[9 - i] = minn\n    k = k / occ[9 - i]\nans_s = ''\nfor i in range(10):\n    ans_s += s[i] * occ[i]\nprint(ans_s)", "import math\nk = int(input())\ns = 'codeforces'\nocc = [1] * 10\nfor i in range(9, -1, -1):\n    minn = math.floor(pow(k, 1 / (i + 1)))\n    while minn ** (i + 1) < k:\n        minn += 1\n    occ[9 - i] = minn\n    k = k / occ[9 - i]\nans_s = ''\nfor i in range(10):\n    ans_s += s[i] * occ[i]\nprint(ans_s)", "t = int(input())\nsd = list('codeforces')\nk = int(pow(t, 0.1))\nif pow(k, 10) == t:\n    for i in range(10):\n        sd[i] = sd[i] * k\nelse:\n    sm = pow(k, 10)\n    tg = 0\n    hj = 10\n    while sm < t:\n        sm = pow(k + 1, tg) * pow(k, hj)\n        tg += 1\n        hj -= 1\n    tg -= 1\n    hj += 1\n    for i in range(tg):\n        sd[i] = sd[i] * (k + 1)\n    i += 1\n    for j in range(hj):\n        sd[i] = sd[i] * k\n        i += 1\nfor i in range(10):\n    print(sd[i], end='')", "k = int(input())\nval = [1 for i in range(10)]\ns = 'codeforces'\ni = 0\nprod = 1\nwhile prod < k:\n    prod //= val[i]\n    val[i] += 1\n    prod *= val[i]\n    i = (i + 1) % 10\nfor i in range(10):\n    print(s[i] * val[i], end='')\nprint('')", "def mul_all(arr):\n    res = 1\n    for a in arr:\n        res *= a\n    return res\ncf = 'codeforces'\nans = [0] * 10\nk = int(input().strip())\ni = 0\nwhile mul_all(ans) < k:\n    ans[i] += 1\n    i = (i + 1) % 10\nfor i in range(len(ans)):\n    ans[i] = cf[i] * ans[i]\nprint(''.join(ans))", "k = int(input())\nsub = 1\ni = 0\na = [1] * 10\ns = 'codeforces'\nwhile sub < k:\n    sub //= a[i]\n    a[i] += 1\n    sub *= a[i]\n    i = (i + 1) % 10\nfor j in range(10):\n    print(s[j] * a[j], end='')", "n = int(input())\na = [1] * 10\ns = 'codeforces'\nans = 1\ni = 0\nwhile ans < n:\n    ans = ans // a[i]\n    a[i] = a[i] + 1\n    ans *= a[i]\n    i = (i + 1) % 10\ncurr = ''\nfor i in range(0, 10):\n    curr += s[i] * a[i]\nprint(curr)", "k = int(input())\nif k == 1:\n    print('codeforces')\n    exit()\nnumber = 1\npointer = 0\nmultiply = 1\nprevmul = -1\ncount = 1\nstring = 'codeforces'\nwhile number < k:\n    pointer = pointer % 10\n    if pointer == 0:\n        count += 1\n        prevmul = multiply\n        multiply += 1\n        number = number // prevmul * multiply\n        pointer += 1\n        continue\n    number = number // prevmul * multiply\n    pointer += 1\nstring2 = ''\nfor i in range(pointer):\n    string2 += string[i] * count\nlength = len(string)\nfor i in range(pointer, length):\n    string2 += string[i] * (count - 1)\nprint(string2)", "n = int(input())\nstring = 'codeforces'\na = [1] * 10\nk = 1\nwhile k < n:\n    for i in range(10):\n        k = 1\n        for j in a:\n            k *= j\n        if k >= n:\n            break\n        a[i] += 1\noutput = ''\nfor i in range(10):\n    output += string[i] * a[i]\nprint(output)", "k = int(input())\nj = 1\nans = ''\noutput = ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']\ncounts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nif k <= j:\n    for i in range(10):\n        ans += output[i] * counts[i]\n    print(ans)\nelse:\n    prev = -1\n    while j < k:\n        if prev == 9:\n            prev = 0\n        else:\n            prev += 1\n        counts[prev] += 1\n        j = j * counts[prev] // (counts[prev] - 1)\n    ans = ''\n    for i in range(10):\n        ans += output[i] * counts[i]\n    print(ans)", "l = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nx = 1\nz = 0\nn = int(input())\nwhile x < n:\n    x = 1\n    if z > 9:\n        z = 10 - z\n    l[z] += 1\n    for i in range(10):\n        x *= l[i]\n    z += 1\ns = 'codeforces'\nfor i in range(10):\n    print(s[i] * l[i], end='')", "k = int(input())\na = [1] * 10\ni = 0\ncount = 1\ntotal = 1\nwhile total < k:\n    a[i] = count\n    if count != 1:\n        total = total * count // (count - 1)\n    if i == 9:\n        count += 1\n    i = (i + 1) % 10\nr = ''\nq = 1\ntotal = 'codeforces'\nfor i in range(10):\n    q *= a[i]\n    r += total[i] * a[i]\nprint(r)", "s = int(input())\nn = int(s ** 0.1)\nm = n ** 10\nfor c in 'codeforces':\n    l = n + (m < s)\n    print(c * l, end='')\n    m = m // n * l", "from math import prod\nfrom typing import List\n\ndef calc_score(array: List[int]) -> int:\n    return prod(array)\ngoal = int(input())\nstring = 'codeforces'\ncounts = [1] * 10\nwhile calc_score(counts) < goal:\n    best_score = 0\n    for pos in range(10):\n        counts_copy = counts.copy()\n        counts_copy[pos] += 1\n        trial = prod(counts_copy)\n        if trial > best_score:\n            best_score = trial\n            best_copy = counts_copy\n    counts = best_copy\nans = ''.join([s * x for (s, x) in zip(string, counts)])\nprint(ans)", "k = int(input())\ndelta = [1] * 10\nn = 1\ni = 0\nwhile n < k:\n    temp = delta[i]\n    n = n // temp\n    n *= temp + 1\n    delta[i] = temp + 1\n    i += 1\n    i = i % 10\narr = list('codeforces')\nres = ''\nfor i in range(10):\n    token = arr[i]\n    for j in range(delta[i]):\n        res += token\nprint(res)", "import math\nk = int(input())\nans = 'codeforces'\nif k == 1:\n    print(ans)\nelse:\n    arr = [1] * 10\n    mul = 1\n    first = 0\n    last = 9\n    while mul < k:\n        mul = mul / arr[first] * (arr[first] + 1)\n        arr[first] += 1\n        first = (first + 1) % 10\n    a = ''\n    for i in range(10):\n        a += ans[i] * arr[i]\n    print(a)", "def pr(a):\n    ans = 1\n    for j in range(10):\n        ans *= a[j]\n    return ans\nk = int(input())\nmas = [1 for t in range(10)]\ni = 0\nwhile pr(mas) < k:\n    mas[i] += 1\n    i += 1\n    i = i % 10\nsl = 'codeforces'\notv = ''\nfor i in range(10):\n    otv += sl[i] * mas[i]\nprint(otv)", "import math\n\ndef res(arr):\n    diff = 0\n    for i in range(3):\n        diff = diff ^ arr[i]\n    if diff == 0:\n        return 1\n    for i in range(2):\n        if brr[i] % arr[i] != 0:\n            continue\n        div = brr[i] // arr[i]\n        count = 0\n        for j in range(i + 1, 3):\n            if brr[j] % arr[j] != 0:\n                continue\n            if div == brr[j] // arr[j]:\n                count += 1\n        if count > 1:\n            return 2\n\ndef solution():\n    n = int(input())\n    low = math.floor(n ** (1 / 10))\n    st = 'codeforces'\n    cal = low ** 10\n    lo = [low for i in range(10)]\n    for i in range(0, 10):\n        if cal >= n:\n            break\n        lo[i] = low + 1\n        cal = cal // low\n        cal *= low + 1\n    for i in range(10):\n        print(st[i] * lo[i], end='')\nsolution()", "import math\nk = int(input())\ns = 'codeforces'\nn = len(s)\nfreq = [1] * n\nprod = 1\ni = 0\nwhile prod < k:\n    prod = prod / freq[i] * (freq[i] + 1)\n    freq[i] += 1\n    i = (i + 1) % n\nfor i in range(len(freq)):\n    print(s[i] * freq[i], end='')\nprint('')", "n = int(input())\ns = 'codeforces'\ncmn_rpt = 1\nwhile True:\n    if (cmn_rpt - 1) ** 10 < n <= cmn_rpt ** 10:\n        break\n    else:\n        cmn_rpt += 1\n(cmn_rpt, ans) = (cmn_rpt - 1, '')\npos = 0\nfor i in range(1, 11):\n    if (cmn_rpt + 1) ** i * cmn_rpt ** (10 - i) >= n:\n        pos = i - 1\n        break\nfor i in s:\n    if pos + 1:\n        print(i * (cmn_rpt + 1), end='')\n        pos -= 1\n    else:\n        print(i * cmn_rpt, end='')", "n = int(input())\ns = 'codeforces'\nl = [1] * 10\nw = 1\nwhile w < n:\n    for i in range(len(l)):\n        w //= l[i]\n        l[i] += 1\n        w *= l[i]\n        if w >= n:\n            break\ns1 = ''\nfor (i, x) in enumerate(s):\n    s1 += x * l[i]\nprint(s1)", "n = int(input())\nstring = 'codeforces'\nt = int(pow(n, 1 / 10))\nx = pow(t, 10)\nl = [t for i in range(10)]\nfor i in range(n):\n    if x < n:\n        x = x // l[i]\n        l[i] = l[i] + 1\n        x = x * l[i]\n    else:\n        break\nresult = ''\nfor i in range(10):\n    result = result + string[i] * l[i]\nprint(result)", "n = int(input())\nif n == 1:\n    print('codeforces')\nelse:\n    a = [0] * 10\n    s = 'codeforces'\n    cnt = 1\n    i = 0\n    while n > cnt:\n        a[i] += 1\n        i = (i + 1) % 10\n        cnt = 1\n        for j in range(10):\n            cnt = cnt * a[j]\n    for i in range(10):\n        print(s[i] * a[i], end='')", "n = int(input())\nword = 'codeforces'\noutstr = ''\narr = [1] * 10\ncombinations = 1\ntime = 1\ni = 0\nwhile combinations < n:\n    arr[i] += 1\n    combinations /= time\n    combinations *= time + 1\n    i += 1\n    if i == 10:\n        i = 0\n        time += 1\nfor i in range(10):\n    outstr += word[i] * arr[i]\nprint(outstr)", "import sys\nii1 = lambda : int(sys.stdin.readline())\niia = lambda : list(map(int, sys.stdin.readline().split()))\nn = ii1()\ndp = [1] * 10\nflag = True\ncounter = 1\nwhile flag:\n    for i in range(10):\n        if counter >= n:\n            flag = False\n            break\n        dp[i] += 1\n        counter //= dp[i] - 1\n        counter *= dp[i]\ns = 'codeforces'\nfor i in range(10):\n    print(s[i] * dp[i], end='')\nprint()", "n = int(input())\nnu = [1] * 10\np = 1\nwhile p < n:\n    for j in range(0, 10):\n        p = 1\n        for k in range(10):\n            p *= nu[k]\n        if p < n:\n            nu[j] += 1\n        else:\n            break\nprint('c' * nu[0] + 'o' * nu[1] + 'd' * nu[2] + 'e' * nu[3] + 'f' * nu[4] + 'o' * nu[5] + 'r' * nu[6] + 'c' * nu[7] + 'e' * nu[8] + 's' * nu[9])", "a = int(input())\nfor i in range(41):\n    if (a > i ** 10) & (a <= (i + 1) ** 10):\n        n1 = i + 1\n        for j in range(11):\n            if n1 ** j * ((n1 - 1) ** (10 - j) * (n1 != 1) + 1 * (n1 == 1)) >= a:\n                n2 = j\n                break\n        break\na = ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']\nb = ''\nfor i in range(10):\n    if i < n2:\n        b = b + a[i] * n1\n    else:\n        b = b + a[i] * (n1 - 1)\nif n1 == 1:\n    print('codeforces')\nelse:\n    print(b)", "inp = lambda : int(input())\ninpm = lambda : map(int, input().split())\ninpl = lambda : list(inpm())\nl2mn = lambda _n, _m: [[0 for __ in range(_m)] for _ in range(_n)]\nl2n = lambda _n: l2mn(_n, _n)\nINF = int(1e+18)\nMOD = int(1000000000.0) + 7\nN = 2000009\n\ndef solve():\n    k = inp()\n    s = 'codeforces'\n    n = len(s)\n    a = [1] * n\n    count = 1\n    i = 0\n    while count < k:\n        count = count // a[i] * (a[i] + 1)\n        a[i] += 1\n        i = (i + 1) % n\n    for i in range(n):\n        print(s[i] * a[i], end='')\n\ndef main():\n    t = 1\n    for i in range(t):\n        solve()\nmain()", "n = int(input())\nd = [['c', 1], ['o', 1], ['d', 1], ['e', 1], ['f', 1], ['o', 1], ['r', 1], ['c', 1], ['e', 1], ['s', 1]]\nmul = 1\nif n == 1:\n    print('codeforces')\nelse:\n    i = 0\n    while mul < n:\n        d[i][1] += 1\n        for j in range(10):\n            mul *= d[j][1]\n        if mul >= n:\n            break\n        else:\n            mul = 1\n        i += 1\n        if i == 10:\n            i = 0\n    for k in range(10):\n        x = d[k][1]\n        for i in range(x):\n            print(d[k][0], sep='', end='')", "k = int(input())\nn = int(k ** 0.1)\nm = n ** 10\nfor c in 'codeforces':\n    l = n + (m < k)\n    print(c * l, end='')\n    m = m // n * l", "k = int(input())\ns = 'codeforces'\nn = int(k ** 0.1)\nAns = ''\nm = n ** 10\nt = 0\nfor i in range(10):\n    if m >= k:\n        break\n    m = m // n\n    m *= n + 1\n    Ans += (n + 1) * s[i]\n    t = i + 1\ns = s[t:]\nfor i in s:\n    Ans += n * i\nprint(Ans)", "n = int(input())\ns = 'codeforces'\nprod = 1\ni = 0\na = [1] * 10\nwhile prod < n:\n    prod //= a[i]\n    a[i] += 1\n    prod *= a[i]\n    i = (i + 1) % 10\nt = ''\nfor i in range(10):\n    t += s[i] * a[i]\nprint(t)", "k = int(input())\norg = ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']\nif k == 1:\n    print('codeforces')\nelse:\n    n = 1\n    i = 2\n    j = 1\n    ans = ''\n    ans2 = ''\n    cont = True\n    while cont:\n        for s in range(1, 11):\n            n = n * i // j\n            if k <= n:\n                dup = org[:s]\n                dup2 = org[s:]\n                for z in dup:\n                    ans += z * i\n                for z in dup2:\n                    ans2 += z * j\n                print(ans + ans2)\n                cont = False\n                break\n        i += 1\n        j += 1", "n = int(input())\nt = int(n ** 0.1)\nmv = t ** 10\nfor ch in 'codeforces':\n    l = t + (mv < n)\n    print(ch * l, end='')\n    mv = mv // t * l", "import sys\nn = int(input())\nk = int(n ** 0.1)\nindex = 0\nnum = k ** 10\nwhile num < n:\n    index += 1\n    num *= (k + 1) / k\narray = [char for char in 'codeforces']\nfor i in range(index):\n    char = array[i]\n    sys.stdout.write(char * (k + 1))\nfor i in range(index, 10):\n    char = array[i]\n    sys.stdout.write(char * k)", "n = int(input())\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nbrr = ['c', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's']\n(temp, k) = (9, 0)\nif n == 1:\n    print('codeforces')\n    exit(0)\nelif n == 2:\n    print('ccodeforces')\n    exit(0)\nelif n == 3 or n == 4:\n    print('ccoodeforces')\n    exit(0)\nelif n >= 4 and n <= 9:\n    print('ccooddeforces')\n    exit(0)\nwhile temp < n:\n    arr[k] += 1\n    temp = 1\n    for i in arr:\n        temp *= i\n    k += 1\n    if k == 10:\n        k = 0\nfor i in range(10):\n    for j in range(arr[i]):\n        print(brr[i], end='')"]