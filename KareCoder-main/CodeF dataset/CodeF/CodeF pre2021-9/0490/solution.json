["for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    A = list(map(int, input().split()))\n    (ca, cb) = (0, l)\n    (sa, sb) = (1, 1)\n    (i, j) = (0, n - 1)\n    ans = 0\n    while i <= j:\n        da = A[i] - ca\n        db = cb - A[j]\n        ta = da / sa\n        tb = db / sb\n        if ta <= tb:\n            ans += ta\n            ca += da\n            cb -= sb * ta\n            sa += 1\n            i += 1\n        else:\n            ans += tb\n            cb -= db\n            ca += sa * tb\n            sb += 1\n            j -= 1\n    d = cb - ca\n    s = sa + sb\n    t = d / s\n    ans += t\n    print('{:6f}'.format(ans))", "def solve():\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fl1 = 0\n    fl2 = n - 1\n    s = 0\n    e = l\n    v1 = 1\n    v2 = 1\n    total = 0\n    while fl1 <= fl2:\n        t1 = (a[fl1] - s) / v1\n        t2 = (e - a[fl2]) / v2\n        if t1 <= t2:\n            s += t1 * v1\n            e -= t1 * v2\n            v1 += 1\n            fl1 += 1\n            total += t1\n        else:\n            s += t2 * v1\n            e -= t2 * v2\n            v2 += 1\n            fl2 -= 1\n            total += t2\n    total += (e - s) / (v1 + v2)\n    print(total)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def solve(flags, n, k):\n    (sa, sb) = (1, 1)\n    (ca, cb) = (0, n)\n    tim_tak = 0\n    (i, j) = (0, k - 1)\n    while ca != cb and i <= j:\n        (fa, fb) = (flags[i], flags[j])\n        (da, db) = (fa - ca, cb - fb)\n        (ta, tb) = (da / sa, db / sb)\n        if ta < tb:\n            (ca, cb) = (fa, cb - sb * ta)\n            tim_tak += ta\n            (sa, i) = (sa + 1, i + 1)\n        elif ta == tb:\n            tim_tak += ta\n            (i, j) = (i + 1, j - 1)\n            (ca, cb) = (fa, fb)\n            (sa, sb) = (sa + 1, sb + 1)\n        else:\n            (ca, cb) = (ca + tb * sa, fb)\n            tim_tak += tb\n            (sb, j) = (sb + 1, j - 1)\n    if ca == cb:\n        return tim_tak\n    tim_tak += (cb - ca) / (sa + sb)\n    return tim_tak\nfor case in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = solve(a, l, n)\n    print('%.7f' % ans)", "def solve(n, l, a):\n    ca = 0\n    cb = l\n    i = 0\n    j = n - 1\n    sa = 1.0\n    sb = 1.0\n    ans = 0\n    while i <= j:\n        d1 = a[i] - ca\n        d2 = cb - a[j]\n        ta = d1 / sa\n        tb = d2 / sb\n        if ta <= tb:\n            ans += ta\n            ca += d1\n            cb -= sb * 1.0 * ta\n            sa += 1\n            i += 1\n        else:\n            ans += tb\n            cb -= d2\n            ca += sa * 1.0 * tb\n            sb += 1\n            j -= 1\n    d = cb - ca\n    s = sa + sb\n    ans += d / s\n    return ans\nt = int(input())\nwhile t:\n    (n, l) = map(int, input().split())\n    res = []\n    in_ = map(int, input().split(' '))\n    for x in in_:\n        res.append(int(x))\n    print(solve(n, l, res))\n    t -= 1", "def solve(n, l, stops):\n    c1_l = 0\n    c2_l = l\n    c1_s = 1\n    c2_s = 1\n    sp1 = 0\n    sp2 = n - 1\n    time_taken = 0\n    while sp1 < n and sp2 >= 0:\n        t1 = (stops[sp1] - c1_l) / c1_s\n        t2 = (c2_l - stops[sp2]) / c2_s\n        dist_to_travel = 0\n        cc2_l = 0\n        cc1_l = 0\n        if t1 < t2:\n            cc1_l = stops[sp1]\n            dist_to_travel = c2_s * t1\n            cc2_l = c2_l - dist_to_travel\n        else:\n            cc2_l = stops[sp2]\n            dist_to_travel = c1_s * t2\n            cc1_l = c1_l + dist_to_travel\n        if cc1_l > cc2_l:\n            break\n        else:\n            if t1 < t2:\n                c1_s += 1\n                sp1 += 1\n                time_taken += t1\n            elif t2 < t1:\n                c2_s += 1\n                sp2 -= 1\n                time_taken += t2\n            else:\n                time_taken += t1\n                c1_s += 1\n                c2_s += 1\n                sp1 += 1\n                sp2 -= 1\n            c1_l = cc1_l\n            c2_l = cc2_l\n    time_taken += (c2_l - c1_l) / (c1_s + c2_s)\n    print(time_taken)\nt = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    stops = list(map(float, input().split()))\n    solve(n, l, stops)", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    sa = 1\n    sb = 1\n    da = 0\n    db = l\n    tt = 0\n    ta = 0\n    tb = 0\n    while i <= j:\n        da1 = a[i] - da\n        ta = da1 / sa\n        db1 = -a[j] + db\n        tb = db1 / sb\n        if ta == tb:\n            tt += ta\n            da = a[i]\n            db = a[j]\n            sa += 1\n            sb += 1\n            i += 1\n            j -= 1\n        elif ta < tb:\n            db -= sb * ta\n            tt += ta\n            da = a[i]\n            i += 1\n            sa += 1\n        else:\n            tt += tb\n            da += sa * tb\n            db = a[j]\n            j -= 1\n            sb += 1\n    val = tt + (db - da) / (sa + sb)\n    print('{:.15f}'.format(val))", "from sys import stdin\nstdin.readline\n\ndef mp():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef it():\n    return int(stdin.readline().strip())\nfor _ in range(it()):\n    (n, l) = mp()\n    a = mp()\n    (i, j, sp, ep, ss, es) = (0, n - 1, 0, l, 1, 1)\n    t = 0\n    while i <= j:\n        d1 = a[i] - sp\n        d2 = ep - a[j]\n        t1 = d1 / ss\n        t2 = d2 / es\n        if t2 > t1:\n            ss += 1\n            sp = a[i]\n            ep -= t1 * es\n            i += 1\n            t += t1\n        elif t1 > t2:\n            es += 1\n            ep = a[j]\n            sp += t2 * ss\n            j -= 1\n            t += t2\n        else:\n            es += 1\n            ss += 1\n            ep = a[j]\n            sp = a[i]\n            i += 1\n            j -= 1\n            t += t1\n    t += (ep - sp) / (es + ss)\n    print(t)", "import math\nt = int(input())\nfor j in range(0, t):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = [0] + a\n    a.append(l)\n    o = 0\n    p = n + 1\n    u = 0\n    l = 0\n    while o < p:\n        if u == l:\n            u = u + (a[o + 1] - a[o]) / (o + 1)\n            o = o + 1\n        elif u > l:\n            l = l + (a[p] - a[p - 1]) / (n + 2 - p)\n            p -= 1\n        else:\n            u = u + (a[o + 1] - a[o]) / (o + 1)\n            o += 1\n    if u == l:\n        print(u)\n    elif u > l:\n        o = o - 1\n        u = u - (a[o + 1] - a[o]) / (o + 1)\n        x = ((o + 1) * (n + 2 - p) * (l - u) + a[o] * (n + 2 - p) + a[p] * (o + 1)) / (n + 3 + o - p)\n        u = u + (x - a[o]) / (o + 1)\n        print(u)\n    else:\n        p = p + 1\n        l = l - (a[p] - a[p - 1]) / (n + 2 - p)\n        x = ((o + 1) * (n + 2 - p) * (l - u) + a[o] * (n + 2 - p) + a[p] * (o + 1)) / (n + 3 + o - p)\n        l = l + (a[p] - x) / (n + 2 - p)\n        print(l)", "for q in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    v1 = v2 = 1\n    time = 0\n    pos1 = 0\n    pos2 = l\n    ind1 = 0\n    ind2 = n - 1\n    while ind1 <= ind2:\n        t1 = (a[ind1] - pos1) / v1\n        t2 = (pos2 - a[ind2]) / v2\n        if t1 < t2:\n            time += t1\n            pos1 = a[ind1]\n            v1 += 1\n            ind1 += 1\n            pos2 -= v2 * t1\n        elif t1 > t2:\n            time += t2\n            pos2 = a[ind2]\n            v2 += 1\n            ind2 -= 1\n            pos1 += v1 * t2\n        else:\n            time += t1\n            pos1 = a[ind1]\n            v1 += 1\n            ind1 += 1\n            pos2 = a[ind2]\n            v2 += 1\n            ind2 -= 1\n    time += (pos2 - pos1) / (v1 + v2)\n    print(time)", "for q in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    v1 = v2 = 1\n    time = 0\n    pos1 = 0\n    pos2 = l\n    ind1 = 0\n    ind2 = n - 1\n    while ind1 <= ind2:\n        t1 = (a[ind1] - pos1) / v1\n        t2 = (pos2 - a[ind2]) / v2\n        if t1 < t2:\n            time += t1\n            pos1 = a[ind1]\n            v1 += 1\n            ind1 += 1\n            pos2 -= v2 * t1\n        elif t1 > t2:\n            time += t2\n            pos2 = a[ind2]\n            v2 += 1\n            ind2 -= 1\n            pos1 += v1 * t2\n        else:\n            time += t1\n            pos1 = a[ind1]\n            v1 += 1\n            ind1 += 1\n            pos2 = a[ind2]\n            v2 += 1\n            ind2 -= 1\n    time += (pos2 - pos1) / (v1 + v2)\n    print(time)", "import sys\nimport math\nimport heapq\ninput = sys.stdin.readline\nYES = 'YES'\nNO = 'NO'\nmodulo = 10 ** 9 + 7\n\ndef solve():\n    (n, l) = map(int, input().split())\n    flags = list(map(int, input().split()))\n    flags.append(l)\n    dp_left = [(0, 0)] * (n + 2)\n    dp_right = [(0, 0)] * (n + 2)\n    dp_right[0] = (l, 0)\n    for i in range(1, n + 2):\n        (x, y) = dp_left[i - 1]\n        f = flags[i - 1]\n        speed = i\n        distance = abs(x - f)\n        dp_left[i] = (f, y + distance / speed)\n        (x, y) = dp_right[i - 1]\n        f = flags[n - i]\n        distance = abs(x - f)\n        dp_right[i] = (f, y + distance / speed)\n    for i in range(1, n + 2):\n        (x, y) = dp_left[i]\n        (xx, yy) = dp_right[n - i + 1]\n        if yy <= y:\n            (x, y) = dp_left[i - 1]\n            speed_right = i\n            speed_left = n - (i - 1) + 1\n            start_distance_right = (yy - y) * speed_right + x\n            rel_speed = abs(speed_right + speed_left)\n            return yy + (xx - start_distance_right) / rel_speed\nfor _ in range(int(input())):\n    print(solve())", "def main():\n    for _ in range(int(input())):\n        (n, l) = map(int, input().split())\n        a = list(map(int, input().split()))\n        (t, x, y) = (0, 1, 1)\n        (left, right) = (0, n - 1)\n        (inix, iniy) = (0, l)\n        while left <= right:\n            if (a[left] - inix) / x == (iniy - a[right]) / y:\n                t += (a[left] - inix) / x\n                inix = a[left]\n                iniy = a[right]\n                left += 1\n                right -= 1\n                x += 1\n                y += 1\n            elif (a[left] - inix) / x < (iniy - a[right]) / y:\n                t += (a[left] - inix) / x\n                iniy -= (a[left] - inix) / x * y\n                inix = a[left]\n                left += 1\n                x += 1\n            else:\n                t += (iniy - a[right]) / y\n                inix += (iniy - a[right]) / y * x\n                iniy = a[right]\n                right -= 1\n                y += 1\n        a = t + (iniy - inix) / (x + y)\n        print('%.8f' % a)\nmain()", "I = lambda : [*map(int, input().split())]\nfor _ in range(I()[0]):\n    (n, l) = I()\n    C = [0] + I() + [l]\n    c = [C[i] - C[i - 1] for i in range(1, n + 2)]\n    s1 = s2 = 1\n    t1 = t2 = 0\n    while s1 != n + 2 - s2:\n        a = c[s1 - 1] / s1\n        b = c[n + 1 - s2] / s2\n        if a + t1 < b + t2:\n            s1 += 1\n            t1 += a\n        else:\n            s2 += 1\n            t2 += b\n    if t1 < t2:\n        print(t2 + (c[s1 - 1] - (t2 - t1) * s1) / (s1 + s2))\n    else:\n        print(t1 + (c[s1 - 1] - (t1 - t2) * s2) / (s1 + s2))", "for _ in range(int(input())):\n    (n, le) = map(int, input().split())\n    a = [0] + [*map(int, input().split())] + [le]\n    s = [y - x for (x, y) in zip(a[:-1], a[1:])]\n    (l, r) = (0, n)\n    (tl, tr) = (0, 0)\n    while r - l > 0:\n        ttl = s[l] / (l + 1)\n        ttr = s[r] / (n - r + 1)\n        if tl + ttl > tr + ttr:\n            tr += ttr\n            r -= 1\n        else:\n            tl += ttl\n            l += 1\n    (fsl, fsr) = (l + 1, n - r + 1)\n    if tl > tr:\n        (fsl, fsr) = (fsr, fsl)\n        (tl, tr) = (tr, tl)\n    print(tr + (s[r] - (tr - tl) * fsl) / (fsl + fsr))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    flag = list(map(int, input().split()))\n    vela = 1.0\n    velb = 1.0\n    a = 0\n    b = l\n    time = 0.0\n    i = 0\n    j = n - 1\n    while i <= j:\n        t = min((flag[i] - a) / vela, (b - flag[j]) / velb)\n        a += t * vela\n        b -= t * velb\n        time += t\n        if a >= flag[i]:\n            vela += 1\n            i += 1\n        if b <= flag[j]:\n            velb += 1\n            j -= 1\n    time += abs(b - a) / (vela + velb)\n    print(time)", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    a = [0] + list(map(int, input().split())) + [l]\n    v0 = 1\n    v1 = 1\n    x0 = 0\n    x1 = l\n    t = 0\n    i0 = 0\n    i1 = n + 1\n    while i0 + 1 != i1:\n        move0 = (a[i0 + 1] - x0) / v0\n        move1 = (x1 - a[i1 - 1]) / v1\n        if move0 < move1:\n            i0 += 1\n            x0 = a[i0]\n            v0 += 1\n            x1 -= v1 * move0\n            t += move0\n        else:\n            i1 -= 1\n            x1 = a[i1]\n            v1 += 1\n            x0 += v0 * move1\n            t += move1\n    if x0 < x1:\n        t += (x1 - x0) / (v0 + v1)\n    print(t)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (n, d) = MI()\n    aa = [0] + LI() + [d]\n    n += 2\n    tt = [0] * n\n    v = 1\n    pa = 0\n    now = 0\n    for i in range(n - 1):\n        now += (aa[i + 1] - aa[i]) / v\n        tt[i + 1] = now\n        v += 1\n    ss = [0] * n\n    v = 1\n    pa = d\n    now = 0\n    for i in range(n - 2, -1, -1):\n        now += (aa[i + 1] - aa[i]) / v\n        ss[i] = now\n        v += 1\n    r = 0\n    for i in range(n):\n        if tt[i] >= ss[i]:\n            r = i\n            break\n    if tt[r] == ss[r]:\n        print(tt[r])\n    else:\n        v1 = r\n        v2 = n - r\n        ans = (aa[r] - aa[r - 1] + ss[r] * v2 - tt[r - 1] * v2) / (v1 + v2)\n        print(ans + tt[r - 1])", "from collections import defaultdict\n\ndef solve():\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    start = 0\n    end = l\n    si = 0\n    ei = n - 1\n    ss = 1\n    es = 1\n    time = 0\n    while start < end and si <= ei:\n        diss = a[si] - start\n        dise = end - a[ei]\n        ts = diss / ss\n        te = dise / es\n        if ts < te:\n            time += ts\n            start = a[si]\n            end = end - es * ts\n            si += 1\n            ss += 1\n        elif ts > te:\n            time += te\n            end = a[ei]\n            start = start + ss * te\n            ei -= 1\n            es += 1\n        else:\n            time += ts\n            start = a[si]\n            end = a[ei]\n            si += 1\n            ei -= 1\n            ss += 1\n            es += 1\n    if si > ei:\n        time += (end - start) / (ss + es)\n    return time\nfor j in range(int(input())):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    (k, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    (p1, p2) = (0, k - 1)\n    (pos1, pos2) = (0, n)\n    (v1, v2) = (1, 1)\n    flags = int(k)\n    while flags:\n        (val1, val2) = ((arr[p1] - pos1) / v1, (pos2 - arr[p2]) / v2)\n        if val1 > val2:\n            ans += val2\n            v2 += 1\n            pos2 = int(arr[p2])\n            p2 -= 1\n            pos1 += v1 * val2\n            flags -= 1\n        else:\n            ans += val1\n            v1 += 1\n            pos1 = int(arr[p1])\n            p1 += 1\n            pos2 -= v2 * val1\n            flags -= 1\n    ans += abs(pos2 - pos1) / (v1 + v2)\n    print(ans)", "t = int(input())\nwhile t:\n    (n, l) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    tm = 0\n    (p1, p2) = (0, l)\n    (v1, v2) = (1, 1)\n    (m1, m2) = (0, n - 1)\n    while m1 <= m2 and m1 < n and (m2 >= 0):\n        k1 = (arr[m1] - p1) / v1\n        k2 = (p2 - arr[m2]) / v2\n        if k1 < k2:\n            tm += k1\n            p1 = arr[m1]\n            v1 += 1\n            p2 -= k1 * v2\n            m1 += 1\n        elif k1 > k2:\n            tm += k2\n            p2 = arr[m2]\n            v2 += 1\n            m2 -= 1\n            p1 += k2 * v1\n        else:\n            tm += k1\n            p1 = arr[m1]\n            p2 = arr[m2]\n            m1 += 1\n            m2 -= 1\n            v1 += 1\n            v2 += 1\n    print(tm + (p2 - p1) / (v1 + v2))\n    t -= 1", "op = int(input())\nwhile op != 0:\n    op -= 1\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    ad = 0\n    bd = k\n    sa = 1\n    sb = 1\n    i = 0\n    j = n - 1\n    t = 0\n    while i <= j:\n        if (li[i] - ad) / sa < (bd - li[j]) / sb:\n            x = (li[i] - ad) / sa\n            t += x\n            ad = li[i]\n            sa += 1\n            i += 1\n            bd = bd - sb * x\n        elif (li[i] - ad) / sa > (bd - li[j]) / sb:\n            x = (bd - li[j]) / sb\n            t += x\n            bd = li[j]\n            sb += 1\n            j -= 1\n            ad = ad + sa * x\n        elif (li[i] - ad) / sa == (bd - li[j]) / sb:\n            x = (li[i] - ad) / sa\n            t += x\n            sa += 1\n            sb += 1\n            ad = li[i]\n            bd = li[j]\n            i += 1\n            j -= 1\n    if ad < bd:\n        t += (bd - ad) / (sa + sb)\n    print(t)", "for _ in range(int(input())):\n    (n, lr) = map(int, input().split())\n    an = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    lx = 0\n    rx = lr\n    v1 = 1\n    v2 = 1\n    ans = 0.0\n    while True:\n        if l > r or r < l:\n            ans += (rx - lx) / (v2 + v1)\n            break\n        t1 = (an[l] - lx) / v1\n        t2 = (rx - an[r]) / v2\n        if t1 == t2:\n            ans += t1\n            l += 1\n            r -= 1\n            lx += v1 * t1\n            rx -= v2 * t2\n            v1 += 1\n            v2 += 1\n        elif t1 < t2:\n            ans += t1\n            l += 1\n            lx += v1 * t1\n            rx -= v2 * t1\n            v1 += 1\n        else:\n            ans += t2\n            r -= 1\n            lx += v1 * t2\n            rx -= v2 * t2\n            v2 += 1\n    print('{0:.18f}'.format(ans))", "t = int(input())\nwhile t:\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (s1, s2) = (1, 1)\n    (next1, next2) = (0, n - 1)\n    (curr1, curr2) = (0, l)\n    ans = 0\n    while curr1 < curr2:\n        if next1 > next2:\n            ans += (curr2 - curr1) / (s1 + s2)\n            break\n        t1 = (a[next1] - curr1) / s1\n        t2 = (curr2 - a[next2]) / s2\n        if t1 < t2:\n            curr1 += s1 * t1\n            curr2 -= s2 * t1\n            s1 += 1\n            ans += t1\n            next1 += 1\n        elif t2 < t1:\n            curr1 += s1 * t2\n            curr2 -= s2 * t2\n            s2 += 1\n            ans += t2\n            next2 -= 1\n        else:\n            curr1 += s1 * t2\n            curr2 -= s2 * t2\n            s2 += 1\n            s1 += 1\n            ans += t1\n            next1 += 1\n            next2 -= 1\n    print('%.7f' % ans)\n    t -= 1", "for s in range(int(input())):\n    (n, l) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    (i, j) = (0, n - 1)\n    (x, y) = (0, l)\n    (va, vb) = (1, 1)\n    total_t = 0\n    while i <= j:\n        ta = (a[i] - x) / va\n        tb = (y - a[j]) / vb\n        if ta >= tb:\n            y = a[j]\n            x = x + va * tb\n            j -= 1\n            vb += 1\n            total_t += tb\n        else:\n            x = a[i]\n            y = y - vb * ta\n            i += 1\n            va += 1\n            total_t += ta\n    total_t += (y - x) / (va + vb)\n    print(total_t)", "import math\nfor _ in range(int(input())):\n    (n, end) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.insert(0, 0)\n    a.append(end)\n    l = 0\n    r = end\n    (i, j) = (1, len(a) - 2)\n    left = 0\n    right = 0\n    (v1, v2) = (1, 1)\n    (left_time, right_time) = (0, 0)\n    while a[i] <= a[j]:\n        t1 = (a[i] - l) / v1\n        t2 = (r - a[j]) / v2\n        if left_time + t1 == right_time + t2:\n            l = a[i]\n            r = a[j]\n            i += 1\n            j -= 1\n            v1 += 1\n            v2 += 1\n            left_time += t1\n            right_time += t2\n        elif left_time + t1 < right_time + t2:\n            l = a[i]\n            i += 1\n            v1 += 1\n            left_time += t1\n        else:\n            r = a[j]\n            j -= 1\n            right_time += t2\n            v2 += 1\n    k = right_time - left_time + (r / v2 + l / v1)\n    p = v1 * v2 * k\n    x = p / (v1 + v2)\n    print(left_time + (x - l) / v1)", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    flags = [int(x) for x in input().split()]\n    flags.insert(0, 0)\n    flags.insert(n + 1, l)\n    n = len(flags)\n    times = [0] * n\n    speed = 1\n    time = 0\n    for i in range(1, n):\n        time += (flags[i] - flags[i - 1]) / speed\n        times[i] = time\n        speed += 1\n    timesR = [0] * n\n    time = 0\n    speed = 1\n    for i in range(n - 2, -1, -1):\n        time += (flags[i + 1] - flags[i]) / speed\n        timesR[i] = time\n        speed += 1\n    for i in range(1, n):\n        if timesR[i] <= times[i]:\n            f2 = flags[i]\n            f1 = flags[i - 1]\n            s1 = i\n            s2 = n - i\n            t1 = times[i - 1]\n            t2 = timesR[i]\n            t = (f2 - f1 + s1 * t1 + s2 * t2) / (s1 + s2)\n            print(t)\n            break", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    flag = list(map(int, input().split()))\n    (car1, speed1) = (0, 1)\n    (car2, speed2) = (l, 1)\n    t = 0\n    nextflag1 = 0\n    nextflag2 = n - 1\n    flags_between = n\n    while flags_between > 0:\n        if (car2 - flag[nextflag2]) / speed2 > (flag[nextflag1] - car1) / speed1:\n            interval = (flag[nextflag1] - car1) / speed1\n            t += interval\n            car2 -= interval * speed2\n            car1 += interval * speed1\n            nextflag1 += 1\n            speed1 += 1\n        else:\n            interval = (car2 - flag[nextflag2]) / speed2\n            t += interval\n            car2 -= interval * speed2\n            car1 += interval * speed1\n            nextflag2 -= 1\n            speed2 += 1\n        flags_between -= 1\n    t += (car2 - car1) / (speed1 + speed2)\n    print(t)", "for __ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    a.append(l)\n    (i, j, va, vb, pra, prb, ta, tb) = (1, n, 1, 1, 0, l, 0, 0)\n    (res, t) = (0, 0)\n    while True:\n        if abs(j - i) == 0:\n            res = 1\n        tempa = (a[i] - pra) / va\n        tempb = (prb - a[j]) / vb\n        ta += tempa\n        tb += tempb\n        if ta < tb:\n            tb -= tempb\n            va += 1\n            pra = a[i]\n            i += 1\n        elif ta > tb:\n            ta -= tempa\n            vb += 1\n            prb = a[j]\n            j -= 1\n        else:\n            va += 1\n            vb += 1\n            pra = a[i]\n            prb = a[j]\n            i += 1\n            j -= 1\n            if i > j:\n                res = 1\n        if res:\n            if ta > tb:\n                prb -= (ta - tb) * vb\n                print(ta + abs(pra - prb) / (va + vb))\n            elif ta == tb:\n                print(ta + abs(pra - prb) / (va + vb))\n            else:\n                pra += (tb - ta) * va\n                print(tb + abs(pra - prb) / (va + vb))\n            break", "T = int(input())\nfor _ in range(T):\n    (n, l) = tuple(map(int, input().split()))\n    flags = list(map(int, input().split()))\n    (i, j, v1, v2, sp, ep, time) = (0, n - 1, 1, 1, 0, l, 0)\n    while i <= j:\n        d1 = flags[i] - sp\n        d2 = ep - flags[j]\n        t1 = d1 / v1\n        t2 = d2 / v2\n        if t1 > t2:\n            v2 += 1\n            sp += v1 * t2\n            ep = flags[j]\n            j -= 1\n            time += t2\n        else:\n            v1 += 1\n            ep -= v2 * t1\n            sp = flags[i]\n            i += 1\n            time += t1\n    time += (ep - sp) / (v1 + v2)\n    print(time)", "import sys, heapq\ninput = sys.stdin.readline\nerr = 1e-08\n\ndef solve():\n    (n, l) = map(int, input().split())\n    al = list(map(int, input().split()))\n    va = vb = 1\n    da = db = 0\n    (a, b) = (-1, n)\n    time = 0\n    ta = 0\n    tb = n\n    while da < l - db:\n        if b - a <= 1 or (abs(ta - tb) < err and a + 1 == n - b - 1):\n            time += (l - db - da) / (va + vb)\n            break\n        ta = (al[a + 1] - da) / va\n        tb = (l - al[b - 1] - db) / vb\n        time += min(ta, tb)\n        if abs(ta - tb) < err:\n            a += 1\n            b -= 1\n            va += 1\n            vb += 1\n            da = al[a]\n            db = l - al[b]\n        elif ta < tb:\n            a += 1\n            da = al[a]\n            va += 1\n            db += ta * vb\n        else:\n            b -= 1\n            db = l - al[b]\n            vb += 1\n            da += tb * va\n    print(time)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, l) = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pa = 0\n    pb = l\n    sa = 1\n    sb = 1\n    t = 0\n    i = 0\n    j = n - 1\n    while True:\n        if i > j:\n            t += (pb - pa) / (sa + sb)\n            break\n        if (c[i] - pa) / sa < (pb - c[j]) / sb:\n            t += (c[i] - pa) / sa\n            pb -= sb * (c[i] - pa) / sa\n            pa = c[i]\n            sa += 1\n            i += 1\n        else:\n            t += (pb - c[j]) / sb\n            pa += sa * (pb - c[j]) / sb\n            pb = c[j]\n            sb += 1\n            j -= 1\n    print(t)", "t = int(input())\nfor _ in range(t):\n    (n, l) = [int(i) for i in input().split()]\n    flags = [int(i) for i in input().split()]\n    v1 = 1\n    v2 = 1\n    d1 = 0\n    d2 = l\n    t = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        x1 = flags[i] - d1\n        x2 = d2 - flags[j]\n        if x1 / v1 < x2 / v2:\n            t += x1 / v1\n            d1 = flags[i]\n            d2 = d2 - v2 * x1 / v1\n            v1 += 1\n            i += 1\n        elif x1 / v1 > x2 / v2:\n            t += x2 / v2\n            d2 = flags[j]\n            d1 = d1 + v1 * x2 / v2\n            v2 += 1\n            j -= 1\n        else:\n            t += x1 / v1\n            d1 = flags[i]\n            d2 = flags[j]\n            v1 += 1\n            v2 += 1\n            i += 1\n            j -= 1\n    print(t + (d2 - d1) / (v1 + v2))", "def find(d1, d2, s1, s2, t2_indx):\n    (t1, t2) = (f[t2_indx - 1], r[n - t2_indx + 1])\n    d1n = d1 + (t2 - t1) * s1\n    del_d = d2 - d1n\n    d1n += del_d / (s2 / s1 + 1)\n    return t1 + (d1n - d1) / s1\n\ndef time(g, s):\n    return g / s\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    a.append(l)\n    (f, r) = ([0], [0])\n    s = 1\n    N = n + 2\n    for i in range(1, N):\n        f.append(f[-1] + time(a[i] - a[i - 1], s))\n        r.append(r[-1] + time(a[-i] - a[-1 - i], s))\n        s += 1\n    size = len(f)\n    tmp = 0\n    for i in range(size):\n        if f[i] > r[size - 1 - i]:\n            tmp = i\n            break\n    first = a[tmp - 1]\n    sec = a[tmp]\n    s1 = len(a[:tmp])\n    s2 = n + 2 - s1\n    print(find(first, sec, s1, s2, tmp))", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    (c1, c2) = (0, m)\n    (l, r) = (0, n - 1)\n    (s1, s2) = (1, 1)\n    ans = 0\n    while l <= r:\n        time2acc1 = (a[l] - c1) / s1\n        time2acc2 = (c2 - a[r]) / s2\n        ans += min(time2acc1, time2acc2)\n        if time2acc1 == time2acc2:\n            c1 += time2acc1 * s1\n            c2 -= time2acc2 * s2\n            s1 += 1\n            s2 += 1\n            l += 1\n            r -= 1\n        elif time2acc1 < time2acc2:\n            c1 += time2acc1 * s1\n            c2 -= time2acc1 * s2\n            s1 += 1\n            l += 1\n        else:\n            c1 += time2acc2 * s1\n            c2 -= time2acc2 * s2\n            s2 += 1\n            r -= 1\n    ans += (c2 - c1) / (s1 + s2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    first_times = [0] * n\n    first_times[0] = a[0]\n    cur_speed = 2\n    for i in range(1, n):\n        first_times[i] = first_times[i - 1] + (a[i] - a[i - 1]) / cur_speed\n        cur_speed += 1\n    second_times = [0] * n\n    second_times[-1] = l - a[-1]\n    cur_speed = 2\n    for i in range(n - 2, -1, -1):\n        second_times[i] = second_times[i + 1] + abs(a[i] - a[i + 1]) / cur_speed\n        cur_speed += 1\n    first_times = [0] + first_times + [10 ** 12]\n    second_times = [10 ** 12] + second_times + [0]\n    a = [0] + a + [l]\n    n += 2\n    tol = 10 ** 7\n    time = 0\n    for i in range(n):\n        if first_times[i] < second_times[i]:\n            time = i\n    cur_speed_1 = time + 1\n    cur_speed_2 = n - time - 1\n    dist1 = a[time]\n    dist2 = a[time + 1]\n    more_time = (dist2 - dist1 - cur_speed_2 * (first_times[time] - second_times[time + 1])) / (cur_speed_1 + cur_speed_2)\n    print(first_times[time] + more_time)", "t = int(input())\nfor _ in range(t):\n    solved = False\n    (n, l) = map(int, input().split())\n    a = [0] + list(map(int, input().split()))\n    a.append(l)\n    n += 2\n    first_times = [0]\n    second_times = [0]\n    first_time = 0\n    second_time = 0\n    for i in range(n - 1):\n        first_time += (a[i + 1] - a[i]) / (i + 1)\n        first_times.append(first_time)\n        second_time += (a[n - i - 1] - a[n - i - 2]) / (i + 1)\n        second_times.append(second_time)\n    second_times = second_times[::-1]\n    for i in range(n - 1):\n        if first_times[i] == second_times[i]:\n            print(first_times[i])\n            solved = True\n            break\n        if first_times[i + 1] > second_times[i + 1]:\n            break\n    if solved:\n        continue\n    td = second_times[i + 1] - first_times[i]\n    d = a[i + 1] - a[i]\n    v1 = i + 1\n    v2 = n - i - 1\n    if td < 0:\n        d -= v2 * -td\n    elif td > 0:\n        d -= v1 * td\n    if td < 0:\n        td = 0\n    print(first_times[i] + td + d / (v1 + v2))", "for _ in range(int(input())):\n    [n, l] = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    first_car = []\n    second_car = []\n    speed_first = 1\n    speed_second = 1\n    a = 0\n    b = l\n    t_one = 0\n    t_two = 0\n    for i in range(n):\n        t_one += (arr[i] - a) / speed_first\n        speed_first += 1\n        a = arr[i]\n        first_car.append(t_one)\n        t_two += (b - arr[n - i - 1]) / speed_second\n        speed_second += 1\n        second_car.append(t_two)\n        b = arr[n - i - 1]\n    second_car.reverse()\n    q = 0\n    a = 0\n    b = l\n    while q < len(first_car) and first_car[q] < second_car[q]:\n        t = first_car[q]\n        q += 1\n    flag = 0\n    g = 0\n    if q == 0:\n        t = second_car[q]\n        a = t\n        b = arr[q]\n    elif q == n:\n        b = l - t\n        a = arr[q - 1]\n    elif first_car[q] == second_car[q]:\n        print('%.10f' % first_car[q])\n        flag = 1\n    else:\n        g = second_car[q] - t\n        a = arr[q - 1] + g * (q + 1)\n        b = arr[q]\n    extra = abs(a - b)\n    extra = extra / (n + 2)\n    overall = t + extra + g\n    if flag == 0:\n        print('%.10f' % overall)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    tim = 0.0\n    pi = 0.0\n    pj = float(k)\n    ci = 1.0\n    cj = 1.0\n    i = 0\n    j = n - 1\n    while i <= j:\n        ta = min((a[i] - pi) / ci, (pj - a[j]) / cj)\n        tim += ta\n        pi += ci * ta\n        pj -= cj * ta\n        if pi >= a[i]:\n            i += 1\n            ci += 1\n        if pj <= a[j]:\n            cj += 1\n            j -= 1\n    tim += (pj - pi) / (ci + cj)\n    print(tim)", "t = int(input())\nfor _ in range(t):\n    (n, le) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    f = [0] * (n + 2)\n    l = [0] * (n + 2)\n    f[1] = arr[0]\n    l[n] = le - arr[n - 1]\n    s = 2\n    for i in range(2, n + 1):\n        f[i] = f[i - 1] + (arr[i - 1] - arr[i - 2]) / s\n        s += 1\n    f[n + 1] = f[n] + (le - arr[n - 1]) / s\n    s = 2\n    for i in range(n - 1, 0, -1):\n        l[i] = l[i + 1] + (arr[i] - arr[i - 1]) / s\n        s += 1\n    l[0] = l[1] + arr[0] / s\n    ans = 0\n    for i in range(n + 1):\n        if l[i] == f[i]:\n            ans = l[i]\n            break\n        elif f[i] < l[i] and f[i + 1] > l[i + 1]:\n            if i == n:\n                d = le - arr[i - 1]\n            elif i == 0:\n                d = arr[0]\n            else:\n                d = arr[i] - arr[i - 1]\n            if f[i] > l[i + 1]:\n                d -= (f[i] - l[i + 1]) * (n - i + 1)\n            else:\n                d -= (l[i + 1] - f[i]) * (i + 1)\n            ans = max(f[i], l[i + 1]) + d / (n + 2)\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    aa = list(map(int, input().split()))\n    t1s = [0]\n    v1 = 1\n    t2s = [0]\n    v2 = 1\n    for j in range(n):\n        t1s.append(aa[0] if len(t1s) == 1 else t1s[j] + (aa[j] - aa[j - 1]) / v1)\n        t2s.append(l - aa[n - 1] if len(t2s) == 1 else t2s[j] + (aa[n - j] - aa[n - j - 1]) / v2)\n        v1 += 1\n        v2 += 1\n    t1s.append(t1s[n] + (l - aa[n - 1]) / v1)\n    t2s.append(t2s[n] + aa[0] / v2)\n    t2s.reverse()\n    for j in range(n + 2):\n        if t2s[j] < t1s[j]:\n            t11 = t1s[j - 1]\n            t12 = t1s[j]\n            t21 = t2s[j]\n            t22 = t2s[j - 1]\n            print((t12 * t22 - t11 * t21) / (t22 - t21 + t12 - t11))\n            break", "test = int(input())\nfor i in range(test):\n    (n, l) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    c1 = 0\n    c2 = l\n    t = 0\n    d1 = 0\n    d2 = n - 1\n    v1 = 1\n    v2 = 1\n    while True:\n        if d1 >= n or d2 < 0:\n            break\n        t1 = abs(c1 - arr[d1]) / v1\n        t2 = abs(c2 - arr[d2]) / v2\n        if t1 == t2:\n            if arr[d1] >= arr[d2]:\n                break\n            t = t + t1\n            v1 = v1 + 1\n            v2 = v2 + 1\n            c1 = arr[d1]\n            c2 = arr[d2]\n            d1 = d1 + 1\n            d2 = d2 - 1\n        elif t1 < t2:\n            if arr[d1] >= c2 - v2 * t1:\n                break\n            t = t + t1\n            v1 = v1 + 1\n            v2 = v2\n            c1 = arr[d1]\n            c2 = c2 - v2 * t1\n            d1 = d1 + 1\n            d2 = d2\n        else:\n            if c1 + v1 * t2 >= arr[d2]:\n                break\n            t = t + t2\n            v1 = v1\n            v2 = v2 + 1\n            c2 = arr[d2]\n            c1 = c1 + v1 * t2\n            d1 = d1\n            d2 = d2 - 1\n    t = t + abs(c1 - c2) / (v1 + v2)\n    print(t)", "tc = int(input())\nwhile tc:\n    tc -= 1\n    (n, r) = map(int, input().split())\n    l = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    t = 0\n    a = 0\n    b = r\n    av = 1\n    bv = 1\n    while i <= j:\n        if (l[i] - a) / av < (b - l[j]) / bv:\n            b -= bv * (l[i] - a) / av\n            t += (l[i] - a) / av\n            a = l[i]\n            av += 1\n            i += 1\n        elif (l[i] - a) / av > (b - l[j]) / bv:\n            t += (b - l[j]) / bv\n            a += av * (b - l[j]) / bv\n            b = l[j]\n            bv += 1\n            j -= 1\n        else:\n            t += (l[i] - a) / av\n            a = l[i]\n            b = l[j]\n            av += 1\n            bv += 1\n            j -= 1\n            i += 1\n    av += bv\n    t += (b - a) / av\n    print(t)", "t = int(input())\nwhile t:\n    (f, n) = map(int, input().split())\n    flag = [0]\n    temp = list(map(int, input().split()))\n    for i in temp:\n        flag.append(i)\n    flag.append(n)\n    time1 = []\n    time2 = []\n    for i in range(f + 2):\n        time1.append(0)\n        time2.append(0)\n    speed = 1\n    for i in range(1, f + 2):\n        time1[i] = time1[i - 1] + (flag[i] - flag[i - 1]) / speed\n        speed += 1\n    speed = 1\n    for i in range(f, -1, -1):\n        time2[i] = time2[i + 1] + (flag[i + 1] - flag[i]) / speed\n        speed += 1\n    for i in range(f + 2):\n        if time1[i] > time2[i]:\n            t1 = time1[i - 1]\n            t2 = time2[i]\n            d = flag[i] - flag[i - 1]\n            s1 = i\n            s2 = f - i + 2\n            ans = (t1 * s1 + t2 * s2 + d) / (s1 + s2)\n            print(ans)\n            break\n    t -= 1", "tc = int(input())\nfor _ in range(tc):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    di = 0.0\n    dj = float(l)\n    si = 1.0\n    sj = 1.0\n    i = 0\n    j = n - 1\n    tim = 0\n    while i <= j:\n        t = min((a[i] - di) / si, (dj - a[j]) / sj)\n        tim += t\n        di += t * si\n        dj -= t * sj\n        if di >= a[i]:\n            i += 1\n            si += 1\n        if dj <= a[j]:\n            j -= 1\n            sj += 1\n    tim += (dj - di) / (sj + si)\n    print(tim)", "N = 100002\nta = [0] * N\ntb = [0] * N\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = [0] + list(map(int, input().split())) + [l]\n    tb[n + 1] = 0\n    i = 1\n    j = n\n    while i <= n:\n        ta[i] = ta[i - 1] + (a[i] - a[i - 1]) / i\n        tb[j] = tb[j + 1] + (a[j + 1] - a[j]) / i\n        i += 1\n        j -= 1\n    i = 1\n    j = n\n    while i < j:\n        if ta[i] < tb[j]:\n            i += 1\n        else:\n            j -= 1\n    if ta[i] < tb[i]:\n        print(ta[i] + (a[i + 1] - a[i] - (n - i + 1) * (ta[i] - tb[i + 1])) / (n + 2))\n    elif ta[i] > tb[i]:\n        print(tb[i] + (a[i] - a[i - 1] - i * (tb[i] - ta[i - 1])) / (n + 2))\n    else:\n        print(ta[i])", "for i in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fr = 0\n    en = l\n    frc = 0\n    enc = n - 1\n    sumo = 0\n    frs = 1\n    ens = 1\n    while enc >= frc:\n        frx = (a[frc] - fr) / frs\n        enx = (en - a[enc]) / ens\n        btw = (en - fr) / (frs + ens)\n        k = min(frx, enx, btw)\n        if frx == k:\n            sumo = sumo + k\n            fr = a[frc]\n            frs = frs + 1\n            frc = frc + 1\n            en = en - frx * ens\n        elif enx == k:\n            sumo = sumo + k\n            en = a[enc]\n            ens = ens + 1\n            enc = enc - 1\n            fr = fr + enx * frs\n    sumo = sumo + (en - fr) / (ens + frs)\n    print(sumo)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, l) = list(map(int, stdin.readline().split()))\n    a = [0] + list(map(int, stdin.readline().split())) + [l]\n    h = len(a)\n    pre = [0] * h\n    suf = [0] * h\n    for i in range(h - 1):\n        pre[i + 1] = pre[i] + (a[i + 1] - a[i]) / (i + 1)\n        suf[h - i - 2] = suf[h - i - 1] + (a[h - 1 - i] - a[h - 2 - i]) / (i + 1)\n    for i in range(h):\n        if pre[i] >= suf[i]:\n            meet = i\n            break\n    gap = a[meet] - a[meet - 1]\n    cons = pre[meet - 1] * meet + suf[meet] * (n + 2 - meet)\n    ans = (gap + cons) / (n + 2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    first = 0\n    second = k\n    ans = 0\n    speeda = 1\n    speedb = 1\n    preva = 0\n    prevb = k\n    ans = 0\n    while i <= j:\n        c = min((a[i] - first) / speeda, (second - a[j]) / speedb)\n        if (a[i] - first) / speeda < (second - a[j]) / speedb:\n            ans += c\n            speeda += 1\n            first = a[i]\n            i += 1\n            second = second - c * speedb\n        elif (a[i] - first) / speeda > (second - a[j]) / speedb:\n            ans += c\n            speedb += 1\n            second = a[j]\n            j -= 1\n            first = first + c * speeda\n        else:\n            ans += c\n            first = a[i]\n            second = a[j]\n            i += 1\n            j -= 1\n            speeda += 1\n            speedb += 1\n    d = abs(second - first)\n    ans1 = d / (speeda + speedb)\n    print(ans1 + ans)", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    time = 0\n    i = 0\n    j = n - 1\n    (p1, p2) = (0, l)\n    (s1, s2) = (1, 1)\n    while i <= j:\n        a = (arr[i] - p1) / s1\n        b = (p2 - arr[j]) / s2\n        if a < b:\n            time += (arr[i] - p1) / s1\n            u = p1\n            p1 = arr[i]\n            p2 -= (arr[i] - u) / s1 * s2\n            s1 += 1\n            i += 1\n        else:\n            time += (p2 - arr[j]) / s2\n            u = p2\n            p2 = arr[j]\n            p1 += (u - arr[j]) / s2 * s1\n            s2 += 1\n            j -= 1\n    time += (p2 - p1) / (s2 + s1)\n    print(round(time, 1000000))", "test = int(input())\nfor _ in range(test):\n    (n, l) = map(int, input().split())\n    arr = input().split()\n    tim = 0\n    a_cord = 0\n    b_cord = l\n    a_speed = 1\n    b_speed = 1\n    a_next = 0\n    b_next = n - 1\n    flag = 0\n    while flag != 1:\n        if a_next >= n or b_next < 0 or a_next > b_next:\n            tim += (b_cord - a_cord) / (a_speed + b_speed)\n            flag = 1\n        if flag != 1:\n            t1 = (int(arr[a_next]) - a_cord) / a_speed\n            t2 = (b_cord - int(arr[b_next])) / b_speed\n            if t1 < t2:\n                tim += t1\n                a_cord = int(arr[a_next])\n                b_cord -= t1 * b_speed\n                a_speed += 1\n                a_next += 1\n            elif t2 < t1:\n                tim += t2\n                b_cord = int(arr[b_next])\n                a_cord += t2 * a_speed\n                b_speed += 1\n                b_next -= 1\n            elif t1 == t2:\n                tim += t1\n                a_cord = int(arr[a_next])\n                b_cord = int(arr[b_next])\n                a_speed += 1\n                b_speed += 1\n                a_next += 1\n                b_next -= 1\n    print(round(tim, 15))", "N = 100002\nta = [0] * N\ntb = [0] * N\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = [0] + list(map(int, input().split())) + [l]\n    tb[n + 1] = 0\n    i = 1\n    j = n\n    while i <= n:\n        ta[i] = ta[i - 1] + (a[i] - a[i - 1]) / i\n        tb[j] = tb[j + 1] + (a[j + 1] - a[j]) / i\n        i += 1\n        j -= 1\n    i = 1\n    j = n\n    while i < j:\n        if ta[i] < tb[j]:\n            i += 1\n        else:\n            j -= 1\n    if ta[i] < tb[i]:\n        print(str(ta[i] + (a[i + 1] - a[i] - (n - i + 1) * (ta[i] - tb[i + 1])) / (n + 2)))\n    elif ta[i] > tb[i]:\n        print(str(tb[i] + (a[i] - a[i - 1] - i * (tb[i] - ta[i - 1])) / (n + 2)))\n    else:\n        print(str(ta[i]))", "import collections\nT = int(input())\nfor _ in range(T):\n    (n, l) = map(int, input().split())\n    a = [0.0] * (n + 2)\n    a[1:n + 1] = list(map(int, input().split()))\n    a[n + 1] = l\n    (lo, hi) = (1, n)\n    (vl, vh) = (1.0, 1.0)\n    t = 0.0\n    (pl, pr) = (a[lo - 1], a[hi + 1])\n    while lo <= hi:\n        tmp1 = 1.0 * (a[lo] - pl) / (1.0 * vl)\n        tmp2 = 1.0 * (pr - a[hi]) / (1.0 * vh)\n        if t + tmp1 < t + tmp2:\n            t += tmp1\n            vl += 1.0\n            pl = a[lo]\n            lo += 1\n            pr -= 1.0 * vh * tmp1\n            if lo > hi:\n                t += 1.0 * (pr - pl) / (1.0 * (vl + vh))\n                break\n        else:\n            t += tmp2\n            vh += 1.0\n            pr = a[hi]\n            hi -= 1\n            pl += 1.0 * vl * tmp2\n            if lo > hi:\n                t += 1.0 * (pr - pl) / (1.0 * (vl + vh))\n                break\n        if abs(pl - pr) < 1e-06:\n            break\n    print(float('{:.7f}'.format(t)))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    flags = list(map(int, input().split()))\n    left = 0\n    right = n - 1\n    lspeed = 1\n    rspeed = 1\n    cleft = 0\n    cright = l\n    total = 0\n    while left <= right:\n        if (flags[left] - cleft) / lspeed == abs(flags[right] - cright) / rspeed:\n            total += (flags[left] - cleft) / lspeed\n            left += 1\n            right -= 1\n            cleft = flags[left - 1]\n            cright = flags[right + 1]\n            lspeed += 1\n            rspeed += 1\n        elif (flags[left] - cleft) / lspeed < abs(flags[right] - cright) / rspeed:\n            timeTaken = (flags[left] - cleft) / lspeed\n            lspeed += 1\n            cleft = flags[left]\n            cright -= timeTaken * rspeed\n            left += 1\n            total += timeTaken\n        else:\n            timeTaken = abs(flags[right] - cright) / rspeed\n            rspeed += 1\n            cright = flags[right]\n            cleft += timeTaken * lspeed\n            right -= 1\n            total += timeTaken\n    total += (cright - cleft) / (rspeed + lspeed)\n    print(total)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport sys\nimport string\nimport random\nfrom typing import List\nsys.setrecursionlimit(99999)\nfor _ in range(int(input())):\n    st = 0\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ai = 0\n    aj = n - 1\n    left = 0\n    vleft = 1\n    right = l\n    vright = 1\n    while right - left > 10 ** (-6):\n        t1 = t2 = t3 = float('inf')\n        t1 = min(t1, (right - left) / (vleft + vright))\n        if ai <= aj:\n            t2 = min(t2, (arr[ai] - left) / vleft)\n            t3 = min(t3, (right - arr[aj]) / vright)\n            if t2 < t3:\n                left = arr[ai]\n                right = right - t2 * vright\n                ai += 1\n                vleft += 1\n            elif t3 < t2:\n                right = arr[aj]\n                left = left + t3 * vleft\n                aj -= 1\n                vright += 1\n            elif t2 == t3:\n                left = left + t3 * vleft\n                right = right - t3 * vright\n                ai += 1\n                aj -= 1\n                vleft += 1\n                vright += 1\n            st += min(t2, t3)\n        else:\n            st += t1\n            left = right = (left + right) / 2\n    print(st)", "from decimal import Decimal as dcm\nfrom decimal import *\ntestCase = int(input())\nfor tc in range(testCase):\n    (s, l) = map(int, input().split())\n    (x1, x2, t) = map(dcm, [0, l, 0])\n    (p1, p2, v1, v2) = (0, s, 1, 1)\n    signs = list(map(dcm, input().split()))\n    while p1 != p2:\n        (t1, t2) = ((signs[p1] - x1) / v1, (x2 - signs[p2 - 1]) / v2)\n        if t1 == t2:\n            v1 += 1\n            v2 += 1\n            if p1 + 1 != p2:\n                (x1, x2) = (signs[p1], signs[p2 - 1])\n                t += t1\n                p1 += 1\n                p2 -= 1\n            else:\n                t += t1\n                x1 = x2\n                p1 += 1\n        else:\n            flag = t1 < t2\n            t += min(t1, t2)\n            if flag:\n                x1 = signs[p1]\n                x2 -= t1 * v2\n                p1 += 1\n                v1 += 1\n            else:\n                x2 = signs[p2 - 1]\n                x1 += t2 * v1\n                p2 -= 1\n                v2 += 1\n    x = dcm(x2 - x1)\n    v = dcm(v1 + v2)\n    t += x / v\n    getcontext().prec = 16\n    t = str(t)\n    if '.' not in t:\n        t += '.'\n    print(t + '0' * (15 - len(t.split('.')[-1])))", "lst = []\nfor i in range(int(input())):\n    (n, l) = map(int, input().split())\n    temp = list(map(int, input().split()))\n    v1 = 1\n    v2 = 1\n    c1 = 0\n    c2 = l\n    c = 0\n    while True:\n        if temp:\n            d1 = (temp[0] - c1) / v1\n            d2 = (c2 - temp[-1]) / v2\n            d3 = (c2 - c1) / (v1 + v2)\n            if d3 < d2 and d3 < d1:\n                print(c + (c2 - c1) / (v1 + v2))\n                break\n            if d1 < d2:\n                s = d1\n                c += s\n                c1 += v1 * s\n                c2 -= v2 * s\n                v1 += 1\n                del temp[0]\n                if c2 > c1:\n                    continue\n                else:\n                    print(c)\n                    break\n            elif d1 == d2:\n                s = d1\n                c += s\n                c1 += v1 * s\n                c2 -= v2 * s\n                v1 += 1\n                v2 += 1\n                del temp[0]\n                if temp:\n                    del temp[-1]\n                if c2 > c1:\n                    continue\n                else:\n                    print(c)\n                    break\n            else:\n                s = d2\n                c += s\n                c1 += v1 * s\n                c2 -= v2 * s\n                v2 += 1\n                del temp[-1]\n                if c2 > c1:\n                    continue\n                else:\n                    print(c)\n                    break\n        else:\n            print(c + (c2 - c1) / (v1 + v2))\n            break", "cases = int(input())\nfor i in range(cases):\n    args = [float(x) for x in input().split(' ')]\n    l = args[1]\n    n_flags = args[0]\n    flags = [float(x) for x in input().split(' ')]\n    time = 0.0\n    s1 = 1.0\n    s2 = 1.0\n    loc1 = 0.0\n    loc2 = l\n    while len(flags) > 0:\n        f1 = flags[0]\n        f2 = flags[-1]\n        t1 = (f1 - loc1) / s1\n        t2 = (loc2 - f2) / s2\n        if t1 < t2:\n            s1 += 1\n            loc1 = flags.pop(0)\n            time += t1\n            loc2 -= s2 * t1\n        elif t1 > t2:\n            s2 += 1\n            loc2 = flags.pop(-1)\n            time += t2\n            loc1 += s1 * t2\n        elif f1 == f2:\n            loc1 = f1\n            loc2 = f2\n            time += t1\n            break\n        else:\n            loc1 = flags.pop(0)\n            loc2 = flags.pop(-1)\n            time += t1\n            s1 += 1\n            s2 += 1\n    time += (loc2 - loc1) / (s1 + s2)\n    print(time)", "for _ in range(int(input())):\n    (b, du) = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    v = u = 1\n    h = i = dv = 0\n    while c:\n        if (c[0] - dv) / v <= (du - c[-1]) / u:\n            (e, dv) = ((c[0] - dv) / v, c[0])\n            (h, v) = (h + e, v + 1)\n            c.pop(0)\n            if c:\n                if e * u >= du - c[-1]:\n                    (f, du) = ((du - c[-1]) / u, c[-1])\n                    c.pop()\n                    u += 1\n                    if e > f:\n                        du -= (e - f) * u\n                else:\n                    du -= u * e\n            else:\n                du -= u * e\n        else:\n            (e, du) = ((du - c[-1]) / u, c[-1])\n            (h, u) = (h + e, u + 1)\n            c.pop()\n            if c:\n                if e * v >= c[0] - dv:\n                    (f, dv) = ((c[0] - dv) / v, c[0])\n                    c.pop(0)\n                    v += 1\n                    if e > f:\n                        dv += (e - f) * v\n                else:\n                    dv += v * e\n            else:\n                dv += v * e\n    h += (du - dv) / (u + v)\n    print(h)", "from collections import Counter\nimport math\nimport sys\nfrom bisect import bisect, bisect_left, bisect_right\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST(N=None):\n    return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef mod():\n    return 10 ** 9 + 7\nfor i in range(INT()):\n    (n, l) = MAP()\n    arr = LIST()\n    time = 0\n    speed1 = 1\n    speed2 = 1\n    poa = 0\n    pob = l\n    while len(arr) > 0 and poa < pob:\n        da = arr[0] - poa\n        db = pob - arr[-1]\n        ta = da / speed1\n        tb = db / speed2\n        if ta < tb:\n            time += ta\n            poa += da\n            pob -= ta * speed2\n            speed1 += 1\n            del arr[0]\n        elif tb < ta:\n            time += tb\n            poa += tb * speed1\n            pob -= db\n            speed2 += 1\n            del arr[-1]\n        else:\n            time += ta\n            poa += da\n            pob -= db\n            speed1 += 1\n            speed2 += 1\n            if len(arr) == 1:\n                del arr[0]\n            else:\n                del arr[0]\n                del arr[-1]\n    if poa < pob:\n        time += (pob - poa) / (speed1 + speed2)\n    print(time)", "import bisect\n\ndef time(loc, p):\n    if loc == a[p]:\n        return (dp1[int(loc)][0], dp2[int(loc)][0])\n    else:\n        t1 = dp1[a[p - 1]][0]\n        t1 += (loc - a[p - 1]) / dp1[a[p - 1]][1]\n        t2 = dp2[a[p]][0]\n        t2 += (a[p] - loc) / dp2[a[p]][1]\n        return (t1, t2)\nfor _ in range(int(input())):\n    (k, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp1 = {0: (0, 1)}\n    dp2 = {l: (0, 1)}\n    s = 1\n    temp = 0\n    for i in a:\n        dp1[i] = ((i - temp) / s + dp1[temp][0], s + 1)\n        s += 1\n        temp = i\n    s = 1\n    temp = l\n    for i in a[::-1]:\n        dp2[i] = ((temp - i) / s + dp2[temp][0], s + 1)\n        s += 1\n        temp = i\n    low = 0\n    high = l\n    a.insert(0, 0)\n    a.insert(k + 1, l)\n    while high > low:\n        mid = (high + low) / 2\n        res = bisect.bisect_left(a, mid)\n        (t1, t2) = time(mid, res)\n        if abs(t1 - t2) < 10 ** (-6):\n            break\n        elif t1 > t2:\n            high = mid\n        else:\n            low = mid\n    print(t1)", "P = 10 ** (-6)\n\ndef solve(A):\n    low = 0.0\n    high = float(L)\n    d1 = 10\n    d2 = 0\n    while abs(d1 - d2) >= P:\n        mid = (high + low) / 2.0\n        d1 = distToTime1(mid)\n        d2 = distToTime2(L - mid)\n        if d1 < d2:\n            low = mid\n        else:\n            high = mid\n    print(d1)\nt = int(input())\n\ndef distToTime1(d):\n    s = 0.0\n    i = 1\n    prev_a = 0\n    for a in A:\n        if a <= d:\n            s = s + float(a - prev_a) / float(i)\n        else:\n            break\n        i = i + 1\n        prev_a = a\n    if prev_a < d:\n        s = s + float(d - prev_a) / float(i)\n    return s\n\ndef distToTime2(d):\n    s = 0.0\n    i = 1\n    prev_a = L\n    for a in reversed(A):\n        if L - a <= d:\n            s = s + float(prev_a - a) / float(i)\n        else:\n            break\n        i = i + 1\n        prev_a = a\n    if L - prev_a < d:\n        s = s + float(d - (L - prev_a)) / float(i)\n    return s\nfor i in range(t):\n    X = list(map(int, input().split()))\n    n = X[0]\n    L = X[1]\n    A = list(map(int, input().split()))\n    solve(A)"]