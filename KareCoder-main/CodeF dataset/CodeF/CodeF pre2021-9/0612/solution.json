["import itertools as it\nimport os\n\ndef items(k, n):\n    return 2 * k * n - k * (k + 1)\n\ndef b(l, n):\n    if l > n * (n - 1):\n        return n\n    low = 1\n    high = n - 1\n    while low < high:\n        mid = (high + low) // 2\n        if items(mid, n) < l:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\ndef row_gen(r, n):\n    while r <= n:\n        if r == n:\n            yield 1\n        else:\n            x = r\n            a = False\n            while x < n:\n                a = not a\n                if a:\n                    yield r\n                else:\n                    x += 1\n                    yield x\n        r += 1\n\ndef get_seg(l, r, n):\n    start_row = b(l, n)\n    count_r = l - items(start_row - 1, n)\n    g = row_gen(start_row, n)\n    return it.islice(g, count_r - 1, count_r + r - l)\n\ndef pp(input):\n    T = int(input())\n    for i in range(T):\n        (n, l, r) = map(int, input().split())\n        print(' '.join(map(str, get_seg(l, r, n))))\nif 'paalto' in os.getcwd():\n    from string_source import string_source\n    pp(string_source('3\\n2 1 3\\n3 3 6\\n99995 9998900031 9998900031\\n'))\nelse:\n    pp(input)", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    x = 0\n    off = 0\n    for i in range(1, n + 1):\n        if x + 2 * (n - i) >= l:\n            off = l - x - 1\n            break\n        x += 2 * (n - i)\n    series = []\n    while len(series) < r - l + 1 + off:\n        for j in range(i + 1, n + 1):\n            series.append(i)\n            series.append(j)\n        i += 1\n        if i >= n:\n            series.append(1)\n            break\n    print(' '.join(list(map(str, series[off:off + r - l + 1]))))", "for _ in range(int(input())):\n    (numbers, LEFTs, RIGHTs) = map(int, input().split())\n    KEYSs = 0\n    GREATS = 0\n    for i in range(1, numbers + 1):\n        if KEYSs + 2 * (numbers - i) >= LEFTs:\n            GREATS = LEFTs - KEYSs - 1\n            break\n        KEYSs += 2 * (numbers - i)\n    LISTs = []\n    while len(LISTs) < RIGHTs - LEFTs + 1 + GREATS:\n        for j in range(i + 1, numbers + 1):\n            LISTs.append(i)\n            LISTs.append(j)\n        i += 1\n        if i >= numbers:\n            LISTs.append(1)\n            break\n    print(' '.join(list(map(str, LISTs[GREATS:GREATS + RIGHTs - LEFTs + 1]))))", "for t in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    b = 1\n    for i in range(1, n):\n        a = b\n        b += 2 * (n - i)\n        if l < b:\n            break\n    (x, y) = (i, (l - a) // 2 + i + 1)\n    b = (l - a) % 2\n    for _ in range(r - l):\n        if b:\n            print(y, end=' ')\n            y += 1\n            if y == n + 1:\n                x += 1\n                y = x + 1\n        else:\n            print(x, end=' ')\n        b ^= 1\n    if r == n * (n - 1) + 1:\n        print(1)\n    else:\n        print(y if b else x)", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    cursum = 0\n    curn = n - 1\n    while curn > 0 and cursum + (curn << 1) < l:\n        cursum += curn << 1\n        curn -= 1\n    fix = n - curn\n    d = False\n    i = fix\n    nexti = fix + 1\n    for _ in range(cursum + 1, l):\n        if d:\n            nexti += 1\n            if nexti > n:\n                fix += 1\n                nexti = fix + 1\n            i = fix\n        else:\n            i = nexti\n        d ^= True\n    ans = [i]\n    for _ in range(l, r):\n        if d:\n            nexti += 1\n            if nexti > n:\n                fix += 1\n                nexti = fix + 1\n            i = fix\n        else:\n            i = nexti\n        ans.append(i)\n        d ^= True\n    if r == n * (n - 1) + 1:\n        ans[-1] = 1\n    elif nexti > n:\n        ans[-1] = fix + 1\n    print(' '.join(map(str, ans)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    b = 1\n    for i in range(1, n):\n        a = b\n        b = b + 2 * (n - i)\n        if l < b:\n            break\n    (x, y) = (i, (l - a) // 2 + i + 1)\n    b = (l - a) % 2\n    for koi_var in range(r - l):\n        if b != 0:\n            print(y, end=' ')\n            y = y + 1\n            if y == n + 1:\n                x = x + 1\n                y = x + 1\n        else:\n            print(x, end=' ')\n        b = b ^ 1\n    if r == n * (n - 1) + 1:\n        print(1)\n    else:\n        print(y if b != 0 else x)", "def slv(n, l, r):\n    l -= 1\n    r -= 1\n    c = 0\n    ans = []\n    for i in range(1, n):\n        (nl, nr) = (c, c + 2 * (n - i) - 1)\n        c = nr + 1\n        if l > nr:\n            continue\n        for j in range(max(l, nl), min(r, nr) + 1):\n            if j % 2 == 0:\n                ans.append(i)\n            else:\n                ans.append(i + (j - nl + 1) // 2)\n    if r == n * (n - 1):\n        ans.append(1)\n    print(' '.join([str(i) for i in ans]))\nt = int(input())\nfor _ in range(t):\n    (n, l, r) = map(int, input().split())\n    slv(n, l, r)", "def main():\n    for j in range(int(input())):\n        (n, l, r) = map(int, input().split())\n        b = 1\n        for i in range(1, n):\n            a = b\n            b += 2 * (n - i)\n            if l < b:\n                break\n        (x, y) = (i, (l - a) // 2 + i + 1)\n        b = (l - a) % 2\n        for _ in range(r - l):\n            if b:\n                print(y, end=' ')\n                y += 1\n                if y == n + 1:\n                    x += 1\n                    y = x + 1\n            else:\n                print(x, end=' ')\n            b ^= 1\n        if r == n * (n - 1) + 1:\n            print(1)\n        else:\n            print(y if b else x)\nmain()", "for t in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    b = 1\n    for i in range(1, n):\n        a = b\n        b += 2 * (n - i)\n        if l < b:\n            break\n    (x, y) = (i, (l - a) // 2 + i + 1)\n    b = (l - a) % 2\n    for _ in range(r - l):\n        if b:\n            print(y, end=' ')\n            y += 1\n            if y == n + 1:\n                x += 1\n                y = x + 1\n        else:\n            print(x, end=' ')\n        b ^= 1\n    if r == n * (n - 1) + 1:\n        print(1)\n    else:\n        print(y if b else x)", "import math\nimport sys\nA = 1\nB = 1\nC = 1\nK = 0\n\ndef LFromI(I):\n    return I * I * A + I * B + C\n\ndef IFromL(L):\n    return math.floor((-B + math.sqrt(B * B - 4 * A * (C - L))) / (2 * A))\n\ndef Out(l, R):\n    curint = IFromL(l)\n    curpos = LFromI(curint)\n    while curpos <= R:\n        if curint == K:\n            print(1, end=' ')\n            break\n        for i in range(2 * (K - curint)):\n            if curpos + i > R:\n                break\n            if curpos + i < l:\n                continue\n            if i % 2 == 0:\n                print(curint, end=' ')\n            else:\n                print(curint + (i + 1) // 2, end=' ')\n        curint += 1\n        curpos = LFromI(curint)\n    return 1\nt = int(input())\nfor _ in range(t):\n    (K, l, r) = map(int, input().split())\n    A = -1\n    B = 2 * K + 1\n    C = -2 * K\n    Out(l - 1, r - 1)\n    print()", "for t in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    b = 1\n    for i in range(1, n):\n        a = b\n        b += 2 * (n - i)\n        if l < b:\n            break\n    (x, y) = (i, (l - a) // 2 + i + 1)\n    b = (l - a) % 2\n    for _ in range(r - l):\n        if b:\n            print(y, end=' ')\n            y += 1\n            if y == n + 1:\n                x += 1\n                y = x + 1\n        else:\n            print(x, end=' ')\n        b ^= 1\n    if r == n * (n - 1) + 1:\n        print(1)\n    else:\n        print(y if b else x)", "t = int(input())\nfor i in range(t):\n    (n, l, r) = map(int, input().split())\n    if l == n * (n - 1) + 1:\n        print(1)\n        continue\n    (left, right, summ) = (0, n, 0)\n    while left != right - 1:\n        mid = (left + right) // 2\n        tmp = n * mid - mid * (mid + 1) // 2\n        if 2 * tmp < l:\n            left = mid\n            summ = 2 * tmp\n        else:\n            right = mid\n    beg = summ\n    count = left + 1\n    ans = []\n    ind = False\n    for i in range(count, n):\n        for j in range(i + 1, n + 1):\n            ans.append(i)\n            ans.append(j)\n            summ += 2\n            if summ > r:\n                ind = True\n                break\n        if ind:\n            break\n    ans.append(1)\n    for i in range(l - 1, r):\n        print(ans[i - beg], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    z = 0\n    idx = 0\n    sd = (n - 1) * 2\n    lst = n * (n - 1) + 1\n    while z < l:\n        if sd <= 0:\n            z += 1\n            break\n        idx += 1\n        z += sd\n        sd -= 2\n    m = idx - 1\n    c = (n - 1) * 2\n    sm = 0\n    for t in range(m):\n        sm += c\n        c -= 2\n    sm += 1\n    nikal = l - sm\n    p = []\n    if idx == 1:\n        for t in range(2, n + 1):\n            p.append(1)\n            p.append(t)\n    else:\n        ii = idx\n        for t in range(ii + 1, n + 1):\n            p.append(ii)\n            p.append(t)\n    p.reverse()\n    for tg in range(nikal):\n        p.pop()\n    p.reverse()\n    idx += 1\n    i1 = idx\n    while len(p) < r - l + 1:\n        if i1 == n:\n            p.append(1)\n        for t in range(i1 + 1, n + 1):\n            p.append(i1)\n            p.append(t)\n        i1 += 1\n    print(*p[:r - l + 1])", "for t in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    b = 1\n    for i in range(1, n):\n        a = b\n        b += 2 * (n - i)\n        if l < b:\n            break\n    (x, y) = (i, (l - a) // 2 + i + 1)\n    b = (l - a) % 2\n    for _ in range(r - l):\n        if b:\n            print(y, end=' ')\n            y += 1\n            if y == n + 1:\n                x += 1\n                y = x + 1\n        else:\n            print(x, end=' ')\n        b ^= 1\n    if r == n * (n - 1) + 1:\n        print(1)\n    else:\n        print(y if b else x)", "t = int(input())\nfor _ in range(t):\n    (n, l, r) = map(int, input().split())\n    L = [0]\n    tt = 2 * (n - 1)\n    for i in range(n):\n        L.append(tt)\n        tt -= 2\n    L[-1] = 1\n    temp = 0\n    ct = r - l + 1\n    c = 0\n    tot = 0\n    for i in range(1, len(L)):\n        if tot + L[i] < l:\n            tot += L[i]\n        else:\n            rem = l - tot\n            p1 = i\n            p2 = rem // 2\n            if rem % 2 != 0:\n                p2 += 1\n                temp = 1\n            p2 += i\n            break\n    if temp == 0:\n        print(p2, end=' ')\n        p2 += 1\n        if p2 == n + 1:\n            p1 += 1\n            if p1 == n:\n                p1 = 1\n            p2 = p1 + 1\n        c += 1\n    if p1 == n:\n        p1 = 1\n    while c < ct:\n        print(p1, end=' ')\n        c += 1\n        if c == ct:\n            break\n        print(p2, end=' ')\n        c += 1\n        p2 += 1\n        if p2 == n + 1:\n            p1 += 1\n            if p1 == n:\n                p1 = 1\n            p2 = p1 + 1\n    print(' ')", "t = int(input())\nfor ii in range(t):\n    (n, l, r) = map(int, input().split())\n    s = []\n    count = 1\n    ans = count * (2 * (n - 1) + 1 - count)\n    while n - count > 0 and ans < l:\n        count += 1\n        ans = count * (2 * (n - 1) + 1 - count)\n    count -= 1\n    remain = l - count * (2 * (n - 1) + 1 - count) - 1\n    val = 0\n    b = 0\n    for i in range(count, n):\n        for j in range(i + 1, n):\n            s.append(i + 1)\n            s.append(j + 1)\n            val += 2\n            if val > r - l + remain + 1:\n                b = 1\n                break\n        if b:\n            break\n    s.append(1)\n    q = s[remain:r - l + 1 + remain]\n    for i in range(len(q) - 1):\n        print(q[i], end=' ')\n    print(q[-1])", "import sys\nfrom collections import defaultdict\nfrom copy import copy\nR = lambda t=int: t(input())\nRL = lambda t=int: [t(x) for x in input().split()]\nRLL = lambda n, t=int: [RL(t) for _ in range(n)]\n\ndef solve():\n    (n, l, r) = RL()\n    if l == n * (n - 1) + 1:\n        print(1)\n        return\n    l -= 1\n    r -= 1\n    D = ((2 * n - 1) ** 2 - 4 * l) ** 0.5\n    a = (2 * n - 1 - D) / 2\n    a = int(a)\n    x = a * (n - 1 + (n - a))\n    l -= x\n    r -= x\n    i = 0\n    s = []\n    a += 1\n    b = a + 1\n    while i <= r and a < n:\n        s += [str(a), str(b)]\n        b += 1\n        if b > n:\n            a += 1\n            b = a + 1\n        i += 2\n    s += '1'\n    for c in s[l:r + 1]:\n        print(str(c), end=' ')\n    print()\nT = R()\nfor _ in range(T):\n    solve()", "for i in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    c = 0\n    for j in range(n):\n        if c + (n - j - 1) * 2 < l or c > r:\n            c += (n - j - 1) * 2\n            continue\n        for k in range(j + 1, n):\n            if l <= c <= r:\n                print(j + 1, end=' ')\n            c += 1\n            if l <= c <= r:\n                print(k + 1, end=' ')\n            c += 1\n    if l <= c <= r:\n        print(1)\n    else:\n        print('')", "test = int(input())\nfor _ in range(test):\n    (n, l, r) = [int(x) for x in input().split()]\n    start = 1\n    it = 1\n    if l == n * (n - 1) + 1:\n        print('1')\n        continue\n    while start < l:\n        start += (n - it) * 2\n        it += 1\n    if start != l:\n        it -= 1\n        start -= (n - it) * 2\n    a = it\n    b = it + 1\n    ok = True\n    while start < l:\n        if ok:\n            ok = False\n        else:\n            ok = True\n            b += 1\n        start += 1\n    while start <= r:\n        if b == n + 1:\n            a += 1\n            b = a + 1\n        if a == n:\n            print('1', end=' ')\n            break\n        if ok:\n            print(a, end=' ')\n            ok = False\n        else:\n            print(b, end=' ')\n            b += 1\n            ok = True\n        start += 1\n    print()", "n_tests = int(input())\nfor _ in range(n_tests):\n    (n_vertices, l, r) = list(map(int, input().split()))\n    index = 0\n    i_v = None\n    for i_v in range(1, n_vertices):\n        n_indexes_here = (n_vertices - i_v) * 2\n        if l <= index + n_indexes_here:\n            break\n        else:\n            index += (n_vertices - i_v) * 2\n    else:\n        print(1)\n        continue\n    index += 1\n    next_print = i_v + 1\n    while True:\n        if index > r:\n            break\n        if index % 2 == 1:\n            if index >= l:\n                print(str(i_v), end=' ')\n        else:\n            if index >= l:\n                print(next_print, end=' ')\n            next_print += 1\n            if next_print > n_vertices:\n                i_v += 1\n                if i_v == n_vertices:\n                    i_v = 1\n                next_print = i_v + 1\n        index += 1\n    print('')", "def find(a):\n    global k, tot\n    if a > n * (n - 1):\n        return 1\n    while a > tot + (n - k) * 2:\n        tot += (n - k) * 2\n        k += 1\n    if a & 1:\n        return k\n    return (a - tot) // 2 + k\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    global k, tot\n    k = 1\n    tot = 0\n    li = []\n    for i in range(l, r + 1):\n        li.append(find(i))\n    print(*li)", "def genGroup(lo, n):\n    if lo == n:\n        return [1]\n    s = []\n    for i in range(lo + 1, n + 1):\n        s.append(lo)\n        s.append(i)\n    return s\nfor tc in range(int(input())):\n    (n, beg, end) = map(int, input().split())\n    if beg == n * (n - 1) + 1:\n        print(1)\n    else:\n        past = 0\n        i = 1\n        while past + 2 * (n - i) < beg:\n            past += 2 * (n - i)\n            i += 1\n        group = i\n        s = genGroup(group, n)\n        pos = beg - past - 1\n        res = []\n        for i in range(end - beg + 1):\n            res.append(s[pos])\n            pos += 1\n            if pos == len(s):\n                pos = 0\n                group += 1\n                s = genGroup(group, n)\n        print(*res)", "import sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, input().split())\n\ndef rlinput():\n    return list(map(int, input().split()))\n\ndef YES(flag):\n    if flag:\n        return 'YES'\n    return 'NO'\n\ndef main():\n\n    def F():\n        return l <= w and w <= r\n    (n, l, r) = rinput()\n    res = []\n    w = 1\n    if F():\n        res.append(1)\n    for i in range(2, n):\n        w += 1\n        if F():\n            res.append(i)\n        w += 1\n        if F():\n            res.append(1)\n    w += 1\n    if F():\n        res.append(n)\n    for i in range(2, n):\n        w += 1\n        if F():\n            res.append(i)\n        for o in range(max(w + 1, l), min(w + (n - i - 1) * 2 + 1, r + 1)):\n            if (o - w) % 2 == 0:\n                res.append(i)\n            else:\n                res.append((o - w - 1) // 2 + i + 1)\n        w += (n - i - 1) * 2 + 1\n        if F():\n            res.append(n)\n    w += 1\n    if F():\n        res.append(1)\n    print(*res)\nfor i in range(iinput()):\n    main()", "def f(n, k):\n    return n * k - k + n * k - k * k\n\ndef af(n, p):\n    if p == n * (n - 1):\n        return 1\n    l = 0\n    r = n + 1\n    while r - l > 1:\n        m = (l + r) // 2\n        if f(n, m) <= p:\n            l = m\n        else:\n            r = m\n    if (p - f(n, l)) % 2 == 0:\n        return r\n    return (p - f(n, l) + 1) // 2 + r\nt = int(input())\nfor i in range(t):\n    (n, l, r) = map(int, input().split())\n    z = []\n    for j in range(l - 1, r):\n        z.append(af(n, j))\n    print(*z)", "R = lambda : map(int, input().split())\nt = int(input())\n\ndef block(b, pos, n):\n    if pos % 2 == 0:\n        return b\n    return b + (pos + 1) // 2\n\ndef binary(k, n):\n    (left, right) = (1, n + 1)\n    while left <= right:\n        m = (left + right) // 2\n        if m * (m + 1) >= k > m * (m - 1):\n            return m\n        if m * (m + 1) < k:\n            left = m + 1\n        if m * (m - 1) >= k:\n            right = m - 1\n\ndef whatis(k, n):\n    k = n * (n - 1) + 1 - k\n    if k == 0:\n        return 1\n    i = binary(k, n)\n    return block(n - i, -k + i * (i + 1), n)\nfor _ in range(t):\n    (n, l, r) = R()\n    ans = []\n    for i in range(l, r + 1):\n        ans.append(whatis(i, n))\n    print(*ans)"]