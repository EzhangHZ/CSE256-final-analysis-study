["for _ in [*open(0)][1:]:\n    (n, m, r, c) = map(int, _.split())\n    print(max(r + c - 2, n + m - r - c, m + r - c - 1, n + c - r - 1))", "for s in [*open(0)][1:]:\n    (n, m, r, c) = map(int, s.split())\n    print(max(m - c, c - 1) + max(r - 1, n - r))", "for s in [*open(0)][1:]:\n    (n, m, r, c) = map(int, s.split())\n    print(max(m - c, c - 1) + max(r - 1, n - r))", "for s in [*open(0)][1:]:\n    (n, m, r, c) = map(int, s.split())\n    print(max(m - c, c - 1) + max(r - 1, n - r))", "result = []\nfor t in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    t = 0\n    t = c - 1 if c - 1 > m - c else m - c\n    t += r - 1 if r - 1 > n - r else n - r\n    result.append(t)\nfor i in result:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, r, c) = map(int, input().split())\n    return max(r - 1 + c - 1, n - r + c - 1, n - r + m - c, r - 1 + m - c)\nfor _ in range(int(input())):\n    print(solve())", "table = []\nwhile True:\n    try:\n        l = input()\n    except EOFError:\n        break\n    table.append(l)\ntries = int(table[0])\nfor i in range(1, tries + 1):\n    line = table[i].split()\n    matrixLength1 = int(line[0])\n    matrixLength2 = int(line[1])\n    coord1 = int(line[2])\n    coord2 = int(line[3])\n    leftLength = coord1 - 1\n    rightLength = matrixLength1 - coord1\n    if leftLength > rightLength:\n        max = leftLength\n    else:\n        max = rightLength\n    upperLength = coord2 - 1\n    lowerLength = matrixLength2 - coord2\n    if upperLength > lowerLength:\n        high = upperLength\n    else:\n        high = lowerLength\n    steps = max + high\n    print(steps)", "import sys\nfrom collections import defaultdict, Counter as CC\nfrom math import sqrt, ceil, floor, log2\nINF = float('inf')\nMOD = 10 ** 9 + 7\nread = lambda : [int(s) for s in sys.stdin.readline().split()]\n\ndef solve():\n    (n, m, r, c) = read()\n    res = max(r - 1, n - r) + max(c - 1, m - c)\n    print(res)\n_ = 1\n_ = int(input())\nwhile _:\n    solve()\n    _ -= 1", "from re import X\nn = int(input())\ns = []\nfor i in range(n):\n    x = list(map(int, input().split()))\n    (n, m, r, c) = x\n    a1 = r - 1 + (c - 1)\n    max = a1\n    a2 = abs(r - 1) + abs(c - m)\n    if a2 > max:\n        max = a2\n    a3 = abs(r - n) + abs(c - 1)\n    if a3 > max:\n        max = a3\n    a4 = abs(r - n) + abs(c - m)\n    if a4 > max:\n        max = a4\n    s.append(max)\nfor j in s:\n    print(j)", "for i in [*open(0)][1:]:\n    (n, m, r, c) = [*map(int, i.split())]\n    print(max(abs(1 - r), abs(n - r)) + max(abs(1 - c), abs(m - c)))", "m = int(input())\nl = []\nfor i in range(m):\n    (x, y, r1, r2) = map(int, input().split())\n    a = [1, 1]\n    b = [1, y]\n    c = [x, 1]\n    d = [x, y]\n    e = [r1, r2]\n    l.append(max(abs(a[0] - e[0]) + abs(a[1] - e[1]), abs(b[0] - e[0]) + abs(b[1] - e[1]), abs(c[0] - e[0]) + abs(c[1] - e[1]), abs(d[0] - e[0]) + abs(d[1] - e[1])))\nfor i in l:\n    print(i)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    (n, m, r, c) = map(int, t.split())\n    ans = []\n    ans.append(abs(1 - r) + abs(1 - c))\n    ans.append(abs(n - r) + abs(1 - c))\n    ans.append(abs(1 - r) + abs(m - c))\n    ans.append(abs(n - r) + abs(m - c))\n    print(max(ans))", "t = int(input())\nres = []\nfor i in range(t):\n    (m, n, r, c) = list(map(int, input().split()))\n    tl = abs(r - 1) + abs(c - 1)\n    tr = abs(r - m) + abs(c - 1)\n    bl = abs(r - 1) + abs(c - n)\n    br = abs(r - m) + abs(c - n)\n    res.append(max(tl, tr, bl, br))\nfor i in range(t):\n    print(res[i])", "str = input()\nn = int(str)\nres = list()\nfor i in range(0, n):\n    inp = input()\n    arr = inp.split(' ')\n    n = int(arr[0])\n    m = int(arr[1])\n    r = int(arr[2])\n    c = int(arr[3])\n    lt = r - 1 + c - 1\n    rt = r - 1 + m - c\n    lb = n - r + c - 1\n    rb = n - r + m - c\n    res.append(max(lt, rt, lb, rb))\nfor test in res:\n    print(test)", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    print(max(c - 1, a - c) + max(d - 1, b - d))", "import sys\nfrom math import comb, perm, ceil, factorial, gcd\nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush, heapify\nMOD = 10 ** 9 + 7\nINF = float('inf')\nrl = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(int(input())):\n    (n, m, r, c) = rl()\n    print(max(n - r, r - 1) + max(m - c, c - 1))", "x = int(input())\nt = [None] * x\nfor i in range(x):\n    numbers = list(map(int, input().split()))\n    t[i] = max(numbers[0] - numbers[2] + numbers[1] - numbers[3], numbers[0] - numbers[2] + numbers[3] - 1, numbers[2] - 1 + numbers[1] - numbers[3], numbers[2] - 1 + numbers[3] - 1)\nfor i in range(x):\n    print(t[i])", "for t in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, r - 1) + max(m - c, c - 1))", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split(' '))\n    x_coordinate = max(r - 1, n - r)\n    y_coordinate = max(c - 1, m - c)\n    print(x_coordinate + y_coordinate)", "t = int(input())\nfor z in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = r - 1\n    b = c - 1\n    if a <= n - r:\n        a = n - r\n    if b <= m - c:\n        b = m - c\n    print(a + b)", "for i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "for i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = (int(i) for i in input().split())\n    res = max(r - 1 + c - 1, n - r + m - c, r - 1 + m - c, n - r + c - 1)\n    print(res)", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    print(max(c - 1, a - c) + max(d - 1, b - d))", "t = int(input())\nans = []\nfor i in range(t):\n    s = input().split()\n    n = int(s[0])\n    m = int(s[1])\n    r = int(s[2])\n    c = int(s[3])\n    if r > n // 2:\n        if c > m // 2:\n            ans.append(str(r + c - 2))\n        else:\n            ans.append(str(r - 1 + m - c))\n    elif c > m // 2:\n        ans.append(str(n - r + c - 1))\n    else:\n        ans.append(str(m + n - r - c))\nprint('\\n'.join(ans))", "t = int(input())\notv = ''\nfor i in range(0, t):\n    (n, m, r, c) = input().split()\n    n = int(n)\n    r = int(r)\n    m = int(m)\n    c = int(c)\n    if 1 <= r <= n <= 10 ** 9 and 1 <= c <= m <= 10 ** 9:\n        x = n - r\n        y = m - c\n        if x < r:\n            x = r - 1\n        if y < c:\n            y = c - 1\n        otv += str(x + y) + '\\n'\nif 1 <= t <= 10 ** 4:\n    print(otv)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r + c - 2, n - r + (m - c), r - 1 + m - c, c - 1 + n - r))", "from sys import stdin, stdout\ninput = stdin.readline\nprint2 = stdout.write\n\ndef get_ints():\n    return map(int, stdin.readline().split())\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\nfor _ in range(int(input())):\n    (n, m, r, c) = get_ints()\n    if r > n // 2:\n        max_y = r - 1\n    else:\n        max_y = n - r\n    if c > m // 2:\n        max_x = c - 1\n    else:\n        max_x = m - c\n    print(max_x + max_y)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        (n, m, h, w) = map(int, input().split())\n        d1 = h - 1 + w - 1\n        d2 = abs(h - n) + w - 1\n        d3 = h - 1 + abs(w - m)\n        d4 = abs(h - n) + abs(w - m)\n        res = max(d1, d2, d3, d4)\n        print(res)\nresolve()", "import sys\nt = int(input())\nfor num in range(t):\n    (n, m, r, c) = map(int, sys.stdin.readline().split())\n    c1 = r - 1 + c - 1\n    c2 = n - r + m - c\n    c3 = r - 1 + m - c\n    c4 = n - r + c - 1\n    print(max(c1, c2, c3, c4))", "f = []\nfor i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    f.append(max(a - c, c - 1) + max(b - d, d - 1))\nfor i in range(len(f)):\n    print(f[i])", "from sys import stdin, stdout\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, m, r, c) = map(int, stdin.readline().split())\n    dis = max(abs(r - n) + abs(c - m), abs(1 - r) + abs(1 - c), abs(r - n) + abs(c - 1), abs(1 - r) + abs(m - c))\n    print(dis)", "outputs = []\nfor i in range(int(input())):\n    inbox = input().split()\n    outputs.append(max(int(inbox[0]) - int(inbox[2]), int(inbox[2]) - 1) + max(int(inbox[1]) - int(inbox[3]), int(inbox[3]) - 1))\nfor i in outputs:\n    print(i)", "t = int(input())\nx = []\nfor h in range(t):\n    (n, m, r, c) = map(int, input().split())\n    maxim = 0\n    if n - r > r - 1:\n        maxim += n - r\n    else:\n        maxim += r - 1\n    if m - c > c - 1:\n        maxim += m - c\n    else:\n        maxim += c - 1\n    x.append(maxim)\nfor i in x:\n    print(i)", "def f(a):\n    n = a[0]\n    m = a[1]\n    r = a[2]\n    c = a[3]\n    if r > n // 2:\n        if c > m // 2:\n            return r + c - 2\n        else:\n            return r + m - c - 1\n    elif c > m // 2:\n        return n - r + c - 1\n    else:\n        return n - r + m - c\nt = int(input())\nb = [[int(x) for x in input().split()] for i in range(t)]\nfor i in range(t):\n    print(f(b[i]))", "k = []\nz = []\na = []\nt = int(input())\nfor i in range(t):\n    str = input()\n    a = str.split(' ')\n    n = int(a[0])\n    m = int(a[1])\n    r = int(a[2])\n    c = int(a[3])\n    z.append(r - 1 + (c - 1))\n    z.append(r - 1 + (m - c))\n    z.append(n - r + (c - 1))\n    z.append(n - r + (m - c))\n    k.append(max(z))\n    z = []\nfor i in range(len(k)):\n    print(k[i])", "import sys\ntestcases = int(sys.stdin.readline())\nctr = 0\nwhile ctr < testcases:\n    line = sys.stdin.readline()\n    stringIn = line.split()\n    n = int(stringIn[0])\n    m = int(stringIn[1])\n    r = int(stringIn[2])\n    c = int(stringIn[3])\n    tmax = 0\n    trowU = r - 1\n    trowD = n - r\n    tRow = trowU\n    if trowD > tRow:\n        tRow = trowD\n    tcolL = c - 1\n    tcolR = m - c\n    tCol = tcolL\n    if tcolR > tCol:\n        tCol = tcolR\n    tmax = tRow + tCol\n    print(tmax)\n    ctr += 1", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    e = a\n    f = b\n    g = a - c\n    h = b - d\n    if c > (a + 1) / 2:\n        e = 1\n        g = c - 1\n    if d > (b + 1) / 2:\n        f = 1\n        h = d - 1\n    print(g + h)", "import sys\nfor i in range(int(sys.stdin.readline())):\n    (a, b, c, d) = map(int, sys.stdin.readline().split())\n    ans = max(a - c + b - d, c - 1 + d - 1, a - c + d - 1, b - d + c - 1)\n    print(ans)", "import math\n\ndef find(roomHeight, roomWidth, exitY, exitX):\n    if roomWidth - exitX <= roomWidth - (roomWidth - exitX + 1):\n        curX = exitX - 1\n    else:\n        curX = roomWidth - exitX\n    if roomHeight - exitY <= roomHeight - (roomHeight - exitY + 1):\n        curY = exitY - 1\n    else:\n        curY = roomHeight - exitY\n    return str(curX + curY)\narr = []\nfor i in range(int(input())):\n    (roomHeight, roomWidth, exitY, exitX) = map(int, input().split())\n    arr.append(find(roomHeight, roomWidth, exitY, exitX))\nprint('\\n'.join(arr))", "cases = [list(map(int, input().split())) for i in range(int(input()))]\nfor (i, a) in enumerate(cases):\n    n = a[0]\n    m = a[1]\n    i = a[2]\n    j = a[3]\n    result = max(i - 1, n - i) + max(j - 1, m - j)\n    print(result)", "n = int(input())\nfor _ in range(n):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r + m - c, r - 1 + c - 1, n - r + c - 1, r - 1 + m - c))", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "for _ in range(0, int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, r - 1) + max(m - c, c - 1))", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    result = max(r - 1 + (c - 1), n - r + (c - 1), r - 1 + (m - c), n - r + (m - c))\n    print(result)", "c_tests = int(input())\nfor _ in range(c_tests):\n    (n, m, r, c) = [int(__) for __ in input().split()]\n    print(max(r - 1 + c - 1, r - 1 + m - c, n - r + c - 1, n - r + m - c))", "tests = int(input())\nfor x in range(tests):\n    (n, m, r, c) = input().split()\n    (n, m, r, c) = (int(n), int(m), int(r) - 1, int(c) - 1)\n    best = 0\n    if r + c > best:\n        best = r + c\n    if n - 1 - r + c > best:\n        best = n - 1 - r + c\n    if r + (m - 1 - c) > best:\n        best = r + (m - 1 - c)\n    if n - 1 - r + (m - 1 - c) > best:\n        best = n - 1 - r + (m - 1 - c)\n    print(best)", "t = int(input())\nfor i in range(t):\n    [n, m, r, c] = list(map(int, input().split(' ')))\n    print(max(r - 1 + c - 1, m - c + n - r, r - 1 + m - c, n - r + c - 1))", "t = int(input())\nwhile t:\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, r - 1) + max(m - c, c - 1))\n    t -= 1", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "t = int(input())\nfor i in range(0, t):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    min_num = max(r - 1, n - r) + max(c - 1, m - c)\n    print(min_num)", "for _ in range(int(input())):\n    (n, m, r, c) = list(map(int, input().split()))\n    print(max(m - c, c - 1) + max(n - r, r - 1))", "import math\n\ndef solve():\n    intputt = input().split()\n    n = int(intputt[0])\n    m = int(intputt[1])\n    r = int(intputt[2])\n    c = int(intputt[3])\n    fromtopleft = abs(r - 1) + abs(c - 1)\n    fromtopright = abs(r - 1) + abs(m - c)\n    frombottomleft = abs(n - r) + abs(c - 1)\n    frombottomright = abs(n - r) + abs(m - c)\n    print(max(fromtopleft, max(fromtopright, max(frombottomleft, frombottomright))))\nt = int(input())\nfor i in range(0, t):\n    solve()", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(abs(n - r), r - 1) + max(abs(m - c), c - 1))", "def func():\n    n = int(input())\n    for _ in range(n):\n        (a, b, c, d) = map(int, input().strip().split())\n        print(max((abs(c - a) + abs(d - b), abs(c - 1) + abs(d - b), abs(c - a) + abs(d - 1), abs(c - 1) + abs(d - 1))))\nfunc()", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    distance = max(abs(r - 1), abs(r - n)) + max(abs(c - 1), abs(c - m))\n    print(distance)", "t = int(input())\na = []\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a.append(max(abs(1 - r), abs(n - r)) + max(abs(1 - c), abs(m - c)))\nfor i in range(len(a)):\n    print(a[i])", "a = []\nfor i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    a.append(max(r - 1, n - r) + max(c - 1, m - c))\nfor i in a:\n    print(i)", "t = int(input())\na = []\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a.append(str(max(r - 1, n - r) + max(c - 1, m - c)))\nprint('\\n'.join(a))", "t = int(input())\na = []\nfor q in range(t):\n    (n, m, r, c) = list(map(int, input().split()))\n    a.append(max(n - r, n - (n - r) - 1) + max(m - c, m - (m - c) - 1))\nfor q in range(t):\n    print(a[q])", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    ans = max(r + c - 2, n - r + c - 1, r + m - c - 1, n - r + m - c)\n    print(ans)", "t = int(input())\nans = []\nfor i in range(t):\n    (n, m, r, c) = list(map(int, input().split()))\n    (h, w) = (1, 1)\n    if r <= (n + 1) // 2:\n        h = n\n    if c <= (m + 1) // 2:\n        w = m\n    ans.append(abs(h - r) + abs(w - c))\nfor i in ans:\n    print(i)", "def numb_1():\n    (n, m, r, c) = map(int, input().split(' '))\n    return max(abs(n - r) + abs(m - c), abs(r - 1) + abs(c - 1), abs(n - r) + abs(c - 1), abs(r - 1) + abs(m - c))\nt = int(input())\nres = []\nfor i in range(t):\n    res.append(numb_1())\nfor item in res:\n    print(item)", "t = int(input())\na = []\nfor i in range(t):\n    nmrc = input()\n    nmrc = nmrc.split()\n    c = 0\n    if int(nmrc[0]) / 2 < int(nmrc[2]):\n        c += int(nmrc[2]) - 1\n    else:\n        c += int(nmrc[0]) - int(nmrc[2])\n    if int(nmrc[1]) / 2 < int(nmrc[3]):\n        c += int(nmrc[3]) - 1\n    else:\n        c += int(nmrc[1]) - int(nmrc[3])\n    a.append(c)\nfor b in a:\n    print(b)", "p = int(input())\nA = []\nfor x in range(p):\n    (n, m, r, c) = map(int, input().split())\n    r1 = r - 1 + c - 1\n    r2 = m - c + r - 1\n    r3 = n - r + m - c\n    r4 = n - r + c - 1\n    A.append(max(r1, r2, r3, r4))\nfor x in range(len(A)):\n    print(A[x])", "def main(n, m, r, c):\n    return max(r - 1, n - r) + max(c - 1, m - c)\nrc = []\nfor _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    rc.append(main(n, m, r, c))\nprint(*rc, sep='\\n')", "t = int(input())\no = []\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = r + c - 2\n    a1 = n - r + m - c\n    a2 = r + m - c - 1\n    a3 = n - r + c - 1\n    o.append(max(a, a1, a2, a3))\nfor i in range(t):\n    print(o[i])", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nresult = []\n\ndef get_result(n, m, r, c):\n    return max(r - 1, n - r) + max(c - 1, m - c)\nfor i in range(t):\n    case = inlt()\n    print(get_result(*case))", "result = []\nfor i in range(int(input())):\n    (n, m, r, c) = (int(i) for i in input().split())\n    if n / 2 >= r and m / 2 >= c:\n        result.append(n - r + m - c)\n    elif n / 2 >= r and m / 2 <= c:\n        result.append(n - r + c - 1)\n    elif n / 2 <= r and m / 2 >= c:\n        result.append(r + m - c - 1)\n    elif n / 2 <= r and m / 2 <= c:\n        result.append(r + c - 2)\nprint(*result, sep='\\n')", "t = input()\ninput_data = []\nfor i in range(int(t)):\n    (n, m, r, c) = input().split()\n    input_data.append((int(n), int(m), int(r), int(c)))\nfor (n, m, r, c) in input_data:\n    dif1 = abs(1 - r) + abs(1 - c)\n    dif2 = abs(n - r) + abs(m - c)\n    dif3 = abs(1 - r) + abs(m - c)\n    dif4 = abs(n - r) + abs(1 - c)\n    print(max(dif1, dif2, dif3, dif4))", "a = []\nt = int(input())\nfor i in range(t):\n    a.append(input())\nfor i in a:\n    ma1 = 0\n    ma2 = 0\n    (n, m, r, c) = map(int, i.split())\n    ma1 = max(abs(1 - r), abs(n - r))\n    ma2 = max(abs(1 - c), abs(m - c))\n    print(ma1 + ma2)", "t = int(input())\na = []\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    ld = r - 1 + c - 1\n    lu = m - c + r - 1\n    rd = n - r + c - 1\n    ru = m - c + n - r\n    a.append(max(ld, lu, rd, ru))\nfor k in range(len(a)):\n    print(a[k])", "for s in [*open(0)][1:]:\n    (n, m, r, c) = map(int, s.split())\n    print(max(m - c, c - 1) + max(r - 1, n - r))", "t = int(input())\nresult = []\nfor _ in range(t):\n    inp = input().split()\n    [n, m, r, c] = [int(i) for i in inp]\n    res = 0\n    if r <= n // 2:\n        res += n - r\n    else:\n        res += r - 1\n    if c <= m // 2:\n        res += m - c\n    else:\n        res += c - 1\n    result.append(res)\nprint(*result, sep='\\n')", "case = int(input())\nlines = []\nfor i in range(0, case):\n    lines.append(input())\nfor i in lines:\n    i = i.split()\n    n = int(i[0])\n    m = int(i[1])\n    r = int(i[2])\n    c = int(i[3])\n    print(max(n - r + (m - c), r - 1 + (c - 1), r - 1 + (m - c), n - r + (c - 1)))", "g = []\nfor _ in range(int(input())):\n    (m, n, r, c) = map(int, input().split())\n    if m - r >= abs(1 - r):\n        max1 = m - r\n    else:\n        max1 = abs(1 - r)\n    if n - c >= abs(1 - c):\n        max2 = n - c\n    else:\n        max2 = abs(1 - c)\n    g.append(max1 + max2)\nfor i in g:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    (y, x, r, c) = map(int, input().split())\n    x1 = abs(x - c)\n    x2 = abs(1 - c)\n    y1 = abs(y - r)\n    y2 = abs(1 - r)\n    gx = x1 if x1 >= x2 else x2\n    gy = y1 if y1 >= y2 else y2\n    print(gx + gy)", "for i in range(int(input())):\n    (r, c, i, j) = map(int, input().split())\n    a = abs(1 - i) + abs(1 - j)\n    b = abs(r - i) + abs(1 - j)\n    d = abs(1 - i) + abs(c - j)\n    e = abs(r - i) + abs(c - j)\n    print(max(a, b, d, e))", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, r - 1) + max(m - c, c - 1))", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, r - 1) + max(m - c, c - 1))", "def minimal_time(n, m, r, c):\n    v_steps = max(n - r, r - 1)\n    h_steps = max(m - c, c - 1)\n    return v_steps + h_steps\nt = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    print(minimal_time(n, m, r, c))", "a = int(input())\nfor i in range(a):\n    (n, m, r, c) = [int(b) for b in input().split()]\n    print(max(n - r + m - c, r - 1 + c - 1, n - r + c - 1, r - 1 + m - c))", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    shift = max(n - r, r - 1) + max(m - c, c - 1)\n    print(shift)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    n -= 1\n    m -= 1\n    r -= 1\n    c -= 1\n    xcen = m / 2\n    ycen = n / 2\n    if r >= ycen and c >= xcen:\n        print(abs(r - 0) + abs(c - 0))\n    elif r <= ycen and c >= xcen:\n        print(abs(r - n) + abs(c - 0))\n    elif r >= ycen and c <= xcen:\n        print(abs(r - 0) + abs(c - m))\n    elif r <= ycen and c <= xcen:\n        print(abs(r - n) + abs(c - m))", "t = int(input())\nfor z in range(t):\n    (n, m, r, c) = input().split()\n    n = int(n)\n    m = int(m)\n    r = int(r)\n    c = int(c)\n    print(max(r - 1, n - r) + max(c - 1, m - c))", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    print(max(n - r, n - (n - r + 1)) + max(m - c, m - (m - c + 1)))", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    d1 = abs(1 - r) + abs(1 - c)\n    d2 = abs(1 - r) + abs(m - c)\n    d3 = abs(n - r) + abs(1 - c)\n    d4 = abs(n - r) + abs(m - c)\n    m = max(d1, d2, d3, d4)\n    print(m)", "cases = int(input())\nwhile cases:\n    cases -= 1\n    (n, m, r, c) = map(int, input().split())\n    ans = max(abs(n - r) + abs(m - c), abs(1 - r) + abs(1 - c), abs(1 - r) + abs(m - c), abs(n - r) + abs(1 - c))\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    rowc = max(r - 1, n - r)\n    colc = max(c - 1, m - c)\n    print(rowc + colc)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    q = max(r - 1, n - r)\n    w = max(c - 1, m - c)\n    print(q + w)", "for x in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    row_dis = max(n - r, r - 1)\n    col_dis = max(m - c, c - 1)\n    print(row_dis + col_dis)", "for test_case in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    print(max(a - c + b - d, c - 1 + d - 1, a - c + d - 1, c - 1 + b - d))", "for t in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    ans = max(r - 1, n - r) + max(c - 1, m - c)\n    print(ans)"]