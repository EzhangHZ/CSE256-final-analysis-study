["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n > 1:\n        count += 1\n        h = int(((1 + 24 * n) ** 0.5 - 1) / 6)\n        n -= h * (3 * h + 1) // 2\n    print(count)", "for s in [*open(0)][1:]:\n    x = int(s)\n    res = 0\n    while x > 1:\n        d = int((-1 + (1 + 4 * 3 * 2 * x) ** 0.5) / 6)\n        x -= d * (3 * d + 1) // 2\n        res += 1\n    print(res)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    c = int(input())\n    final_t: int = 0\n    while c > 1:\n        k = (-1 + sqrt(1 + 24 * c)) // 6\n        c = c - (3 * pow(k, 2) + k) // 2\n        final_t += 1\n    print(final_t)", "import math\n\ndef max_height(k):\n    return math.floor(1 / 3 * (math.sqrt(6 * k + 1 / 4) - 1 / 2))\n\ndef pyramid(k):\n    total = 0\n    while k >= 2:\n        n = max_height(k)\n        total += 1\n        k -= 2 * n + 3 * (n - 1) * n / 2\n    return total\nt = int(input())\nlst = []\nfor i in range(t):\n    n = int(input())\n    lst.append(pyramid(n))\nprint(*lst, sep='\\n')", "def binary_search(n):\n    left = 0\n    right = int(n ** (1 / 2))\n    while left <= right:\n        mid = left + (right - left) // 2\n        solve = mid * (3 * mid + 1) // 2\n        if solve <= n < (mid + 1) * (3 * mid + 4) // 2:\n            return solve\n            break\n        if solve < n:\n            left = mid + 1\n        else:\n            right = mid - 1\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        n -= binary_search(n)\n        count += 1\n    print(count)", "import sys\ninput = sys.stdin.readline\nimport bisect\nd = []\na = 2\nb = 0\ns = 0\nwhile True:\n    s += a\n    d.append(s)\n    a += 3\n    if s > 10 ** 9:\n        break\nfor _ in range(int(input())):\n    n = int(input())\n    c = 0\n    while n > 1:\n        n -= d[bisect.bisect_right(d, n) - 1]\n        c += 1\n    print(c)", "import math\n\ndef solve(card_counts):\n    pyramids_possible = list()\n    for card_count in card_counts:\n        total_pyramids = 0\n        while card_count >= 2:\n            highest_pyramid_height = (math.sqrt(6 * card_count + 0.25) - 0.5) / 3\n            highest_pyramid_cards_needed = cards_needed_for_given_height(int(highest_pyramid_height))\n            if card_count >= highest_pyramid_cards_needed:\n                card_count -= highest_pyramid_cards_needed\n            else:\n                break\n            total_pyramids += 1\n        pyramids_possible.append(total_pyramids)\n    return '\\n'.join((str(p) for p in pyramids_possible))\n\ndef cards_needed_for_given_height(h):\n    return h * (3 * h + 1) / 2\nt = int(input())\ncard_counts = list()\nfor _t in range(0, t):\n    card_counts.append(int(input()))\nprint(solve(card_counts))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = (int((1 + 24 * n) ** 0.5) - 1) // 6\n    s = 0\n    while c > 0:\n        a = c * (3 * c + 1) // 2\n        if n - a >= 0:\n            n -= a\n            s += 1\n        else:\n            break\n        c = (int((1 + 24 * n) ** 0.5) - 1) // 6\n    print(s)", "def _input():\n    return map(int, input().split())\n\ndef f():\n    n = int(input())\n    res = 0\n    while True:\n        dt = 1 + 24 * n\n        r = (-1 + dt ** 0.5) // 6\n        if (-1 + dt ** 0.5) // 6 >= 1:\n            res += 1\n            n -= int(r + 3 * r ** 2) // 2\n        else:\n            break\n    print(res)\nfor _ in range(int(input())):\n    f()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c = 0\n    while n > 1:\n        x = (-1 + math.sqrt(1 + 4 * 3 * 2 * n)) // 6\n        n -= (3 * x * x + x) // 2\n        c += 1\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c = 0\n    while n > 1:\n        x = (-1 + math.sqrt(1 + 4 * 3 * 2 * n)) // 6\n        n -= (3 * x * x + x) // 2\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    M = int(input())\n    answer = 0\n    while M >= 2:\n        x = (-1 + (24 * M + 1) ** 0.5) / 6\n        x = int(x + 1.0)\n        while 3 * x * (x + 1) / 2 - x > M:\n            x -= 1\n        M -= 3 * x * (x + 1) // 2 - x\n        answer += 1\n    print(answer)", "from math import sqrt\nt = int(input())\n\ndef find_last_h(x):\n    approx_result = int(sqrt(x * 2 / 3))\n    for i in [approx_result + 1, approx_result, approx_result - 1]:\n        total_h = i * (i + 1) // 2 * 3 - i\n        if total_h <= x:\n            return total_h\nfor i in range(t):\n    n = int(input())\n    result = 0\n    while n > 1:\n        last_h = find_last_h(n)\n        result += n // last_h\n        n %= last_h\n    print(result)", "for i in range(int(input())):\n    n = int(input())\n    count = 0\n    while n > 1:\n        d = ((24 * n + 1) ** 0.5 - 1) // 6\n        n -= d * (3 * d + 1) // 2\n        count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    c = 0\n    y = 0\n    while n > 1:\n        y = (-1 + (1 + 24 * n) ** 0.5) // 6\n        n -= (3 * y + 1) * y // 2\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        ans += 1\n        h = int((-1 + (1 + 24 * n) ** 0.5) / 6)\n        s = (3 * h ** 2 + h) // 2\n        n -= s\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    cnt = 0\n    while n > 0:\n        h = int(-1 + math.sqrt(1 + 24 * n)) // 6\n        n -= (3 * h + 1) * h // 2\n        if h == 0:\n            n = 0\n        else:\n            cnt += 1\n    print(cnt)", "f = lambda x: int(0.5 * (3 * x * x + x))\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while True:\n        height = ((1 + 24 * n) ** 0.5 - 1) // 6\n        if height == 0:\n            break\n        n -= f(height)\n        ans += 1\n    print(ans)", "from math import sqrt, trunc\nfor _ in range(int(input())):\n    (n, res) = (int(input()), 0)\n    while n > 1:\n        h = int((sqrt(1 + 24 * n) - 1) / 6)\n        cards_count = h * (3 * h + 1) >> 1\n        pyramides_count = n // cards_count\n        res += pyramides_count\n        n -= pyramides_count * cards_count\n    print(res)", "import math\n\ndef cardCons(c):\n    h = float('inf')\n    ans = 0\n    while h > 0 and c > 0:\n        h = math.floor((-1 + math.sqrt(1 + 24 * c)) / 6)\n        cards_used = (3 * h ** 2 + h) // 2\n        c -= cards_used\n        if h > 0:\n            ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(cardCons(int(input())))", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    res = 0\n    while n > 1:\n        res += 1\n        h = (int(sqrt(24 * n + 1)) - 1) // 6\n        n -= (3 * h * h + h) // 2\n    print(res)", "for _ in [0] * int(input()):\n    n = int(input())\n    towers = 0\n    while n > 1:\n        a = int(((24 * n + 1) ** 0.5 - 1) / 6)\n        n -= a * (3 * a + 1) // 2\n        towers += 1\n    print(towers)", "import bisect\ndp = [2, 7]\ni = 3\nwhile dp[-1] < 10 ** 9:\n    h = dp[-1] + 2 * i + i - 1\n    dp.append(h)\n    i += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    idx = 10 ** 9\n    ans = 0\n    while idx > 0:\n        idx = bisect.bisect_right(dp, n)\n        if dp[idx - 1] == n:\n            ans += 1\n            break\n        else:\n            ans += n // dp[idx - 1]\n            n = n % dp[idx - 1]\n    print(ans)", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nk = 0\nfor i in range(int(input())):\n    q = int(input())\n    while q > 1:\n        q = q - ((((1 + 24 * q) ** 0.5 - 1) // 6 * 6 + 1) ** 2 - 1) // 24\n        k += 1\n    print(k)\n    k = 0", "import bisect\ntest_cases = int(input())\nprecompute = [2]\n\ndef handle():\n    n = int(input())\n    count = 0\n    while precompute[-1] < n:\n        precompute.append(precompute[-1] + (3 * (len(precompute) + 1) - 1))\n    while n > 1:\n        index = bisect.bisect_left(precompute, n)\n        count += 1\n        if precompute[index] == n:\n            return count\n        else:\n            n -= precompute[index - 1]\n    return count\nfor _ in range(test_cases):\n    print(handle())", "count = int(input())\nrow = []\nfor _ in range(count):\n    row.append(int(input()))\n\ndef foobar(number):\n    if number < 2:\n        return 0\n    x = -1 + (1 + 24 * number) ** 0.5\n    x = int(x / 6)\n    spent_cards = 2 * x + 3 * (x * (x - 1)) // 2\n    left_cards = number - spent_cards\n    return 1 + foobar(left_cards)\nfor _ in row:\n    print(foobar(_))", "def s(k):\n    return k * (3 * k + 1)\nT = int(input())\nans = ''\nfor _ in range(T):\n    n = int(input())\n    t = 0\n    while n > 1:\n        l = 1\n        r = int(n ** 0.5)\n        while l + 1 < r:\n            k = (l + r) // 2\n            if 2 * n >= s(k):\n                l = k\n            else:\n                r = k - 1\n        if l == r:\n            n -= s(l) // 2\n        elif 2 * n >= s(r):\n            n -= s(r) // 2\n        else:\n            n -= s(l) // 2\n        t += 1\n    ans += str(t) + '\\n'\nprint(ans)", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        count += 1\n        h = ((1 + 24 * n) ** (1 / 2) - 1) // 6\n        n -= (3 * h ** 2 + h) // 2\n    print(count)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        k = int((-1 + math.sqrt(1 + 24 * n)) // 6)\n        count += 1\n        n -= (3 * k ** 2 + k) // 2\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        k = (-1 + (1 + 24 * n) ** 0.5) // 6\n        count += 1\n        n -= (3 * k ** 2 + k) // 2\n    print(count)", "import random\nimport math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        c = 0\n        while n != 1 and n != 0:\n            x = int((math.sqrt(1 + 24 * n) - 1) // 6)\n            n = n - (3 * x * x + x) // 2\n            c += 1\n        print(c)\nmain()", "import math\n\ndef get_root_floor(y):\n    a = 1.5\n    b = 0.5\n    c = -y\n    delta = b ** 2 - 4 * a * c\n    root = math.sqrt(delta)\n    x1 = (-b + root) / (2 * a)\n    return math.floor(x1)\nturns = int(input())\nin_data = []\nfor i in range(0, turns):\n    in_data.append(int(input()))\nfor cards in in_data:\n    count_tri = 0\n    while cards >= 2:\n        m = get_root_floor(cards)\n        cards -= (3 * m ** 2 + m) / 2\n        count_tri += 1\n    print(count_tri)", "for _ in range(int(input())):\n    n = int(input())\n    sol = 0\n    while n >= 2:\n        k = (-1 + (1 + 24 * n) ** (1 / 2)) // 6\n        ans = (3 * k ** 2 + k) // 2\n        sol += 1\n        n = n - ans\n    print(sol)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        delta = 1 + 24 * n\n        k = (-1 + math.sqrt(delta)) // 6\n        N = (3 * k ** 2 + k) / 2\n        n -= N\n        count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    for i in range(10 ** 5):\n        if n < 2:\n            break\n        count += 1\n        height = int((-1 + (1 + 24 * n) ** 0.5) / 6)\n        cards_needed = (3 * (height * height) + height) // 2\n        n -= cards_needed\n    print(count)", "def binSearch(arr, z):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] > z:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[end]\nt = int(input())\narr = [0]\ninf = 10 ** 9\nh = 1\nwhile arr[-1] < inf:\n    arr.append(arr[-1] + 3 * h - 1)\n    h += 1\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n > 1:\n        n -= binSearch(arr, n)\n        count += 1\n    print(count)", "import bisect\ncards = list(map(lambda h: int(3 / 2 * h ** 2 + 1 / 2 * h), [h for h in range(1, 25820)]))\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        idx = bisect.bisect(cards, n)\n        n = n - cards[idx - 1]\n        ans += 1\n    print(ans)", "from sys import stdin\nimport collections\nimport copy\nimport math\n\ndef solver(n):\n    num = 0\n    while n >= 2:\n        h = (math.sqrt(24 * n + 1) - 1) // 6\n        n -= (3 * h ** 2 + h) / 2\n        num += 1\n    print(num)\n    return 0\ncase = int(stdin.readline())\nfor i in range(case):\n    n = int(stdin.readline())\n    solver(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        k = (-1 + (1 + 24 * n) ** 0.5) // 6\n        count += 1\n        n -= (3 * k ** 2 + k) // 2\n    print(count)", "from math import floor\nfor i in range(int(input())):\n    n = int(input())\n    a = 3\n    b = 1\n    s = 0\n    while n > 1:\n        c = -2 * n\n        d = b ** 2 - 4 * a * c\n        h = floor((-b + d ** 0.5) / (2 * a))\n        n -= h * (3 * h + 1) // 2\n        s += 1\n    print(s)", "import math\nstack1 = [2]\nstack = []\nk = int(1000000000.0)\nx = 5\nfor i in range(0, 30000):\n    if stack1[-1] < k:\n        stack.append(stack1[-1])\n    stack1.append(stack1[-1] + x)\n    x += 3\n\ndef search(a):\n    lo = 0\n    hi = len(stack) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if stack[mid] == a:\n            return mid\n        if stack[mid] < a:\n            lo = mid + 1\n        if stack[mid] > a:\n            hi = mid - 1\n    if stack[lo] > a:\n        lo -= 1\n    return lo\n\ndef xuly(nn):\n    if nn >= stack[-1]:\n        n1 = nn - stack[-1]\n        return xuly(n1) + 1\n    if nn == 0 or nn == 1:\n        return 0\n    if nn == 2:\n        return 1\n    else:\n        pos = search(nn)\n        n2 = nn - stack[pos]\n        return xuly(n2) + 1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n < 2:\n        print(0)\n    if n == 2:\n        print(1)\n    if n > 2:\n        print(xuly(n))", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    for i in range(10 ** 5):\n        if n < 2:\n            break\n        else:\n            count += 1\n            height = int((-1 + (1 + 24 * n) ** 0.5) / 6)\n            cards_needed = (3 * (height * height) + height) // 2\n            n -= cards_needed\n    print(count)", "import math\n\ndef solve():\n    n = int(input())\n    ans = 0\n    while n > 1:\n        x = int((math.sqrt(24 * n + 1) - 1) / 6)\n        n -= x * (3 * x + 1) // 2\n        ans += 1\n    return ans\nt = int(input())\nfor i in range(t):\n    print(solve())", "from math import *\n\ndef PLUS_ULTRA(n):\n    ret = floor(sqrt(24 * n + 1)) - 1\n    ret //= 6\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        ans += 1\n        x = PLUS_ULTRA(n)\n        tmp = 3 * pow(x, 2) + x\n        tmp //= 2\n        n -= tmp\n    print(ans)", "import sys\nimport math\n\ndef ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef bs(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return r\nc = [0]\n(val, j) = (0, 1)\nwhile c[-1] < 10 ** 9 + 1:\n    val += j\n    c.append(3 * val - j)\n    j += 1\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    ans = 0\n    while n > 1:\n        n -= c[bs(c, 0, len(c) - 1, n)]\n        ans += 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    c = 0\n    while x >= 2:\n        y = (math.sqrt(1 + 24 * x) - 1) // 6\n        if y >= 1:\n            c += 1\n        else:\n            break\n        x = x - y * (y + 1) - y * (y - 1) / 2\n    print(c)", "i = 0\nx = 2\ny = x\ns = []\nwhile y < 10 ** 9 + 1000000:\n    s.append(y)\n    i += 1\n    y += x * (i + 1) + i\nf = len(s)\nfor _ in range(int(input())):\n    n = int(input())\n    p = 0\n    while n > 1:\n        l = 0\n        r = f - 1\n        while l != r:\n            m = (r + l) // 2\n            if n > s[m]:\n                l = m + 1\n            else:\n                r = m\n        if s[r] == n:\n            n = n - s[r]\n        else:\n            n = n - s[r - 1]\n        p += 1\n    print(p)", "x = 2\ny = x\nz = []\nwhile y <= 10 ** 9 + 1000000:\n    z.append(y)\n    x += 3\n    y += x\nfor i in range(int(input())):\n    a = int(input())\n    q = 0\n    while a > 1:\n        l = 0\n        r = len(z) - 1\n        while l != r:\n            m = (l + r) // 2\n            if a > z[m]:\n                l = m + 1\n            else:\n                r = m\n        if a == z[l]:\n            a -= z[l]\n        else:\n            a -= z[l - 1]\n        q += 1\n    print(q)", "a = [2]\ni = 1\nwhile a[-1] <= 10 ** 9:\n    a.append(a[-1] + 2 * i + 2 + i)\n    i += 1\nL = len(a)\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        l = -1\n        r = L\n        m = (l + r) // 2\n        t = 0\n        while l < r - 1:\n            if a[m] > n:\n                r = m\n            else:\n                l = m\n                t = max(a[m], t)\n            m = (l + r) // 2\n        n -= t\n        ans += 1\n    print(ans)", "n = int(input())\npotenciales = {}\nnumero_cartas_para_piramide = 2\nsumado = 5\nfor i in range(0, 90010):\n    potenciales[numero_cartas_para_piramide] = True\n    numero_cartas_para_piramide += sumado\n    sumado += 3\nlista = list(potenciales)\ncards = []\nfor i in range(0, n):\n    card = int(input())\n    cards.append(card)\n\ndef buscar_maximo(numero):\n    resto = 0\n    value_anterior = 0\n    u = find_index(lista, len(lista), numero)\n    resto = numero - lista[u]\n    if lista[u] == 0:\n        return (0, False)\n    else:\n        return (resto, True)\n\ndef find_index(arr, n, K):\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == K:\n            return mid\n        elif arr[mid] < K:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return end\nfor card in cards:\n    suma = 0\n    resto = card\n    while resto > 1:\n        (resto, encontrado) = buscar_maximo(resto)\n        if encontrado:\n            suma += 1\n    print(suma)", "(t, p) = (int(input()), [])\nfor i in range(t):\n    (n, x) = (int(input()), 0)\n    l = ((1 + 24 * n) ** 0.5 - 1) // 6\n    while l != 0:\n        x += 1\n        n -= 1.5 * l ** 2 + 0.5 * l\n        l = ((1 + 24 * n) ** 0.5 - 1) // 6\n    p.append(str(x))\nprint('\\n'.join(p))", "a = 2\nc = 5\nb = [2]\nwhile a + c <= 10 ** 9 + 1000000:\n    b.append(a + c)\n    a = a + c\n    c = c + 3\nu = int(input())\nfor _ in range(u):\n    x = int(input())\n    k = 0\n    while x > 1:\n        l = 0\n        r = len(b) - 1\n        while l != r:\n            m = (r + l) // 2\n            if b[m] < x:\n                l = m + 1\n            else:\n                r = m\n        if x == b[l]:\n            x -= b[l]\n        else:\n            x -= b[l - 1]\n        k += 1\n    print(k)", "from math import sqrt\n\ndef f(k):\n    n = int((-1 + sqrt(1 + 24 * k)) / 6)\n    return n * (n + 1) + n * (n - 1) // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    while n >= 2:\n        n -= f(n)\n        i += 1\n    print(i)", "from sys import stdin\nimport math\na = int(stdin.readline())\nfor b in range(0, a):\n    K = int(stdin.readline())\n    count = 0\n    while K >= 2:\n        S = math.floor((math.sqrt(24 * K + 1) - 1) / 6)\n        K = K - 3 / 2 * S * S - 1 / 2 * S\n        count += 1\n    print(count)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    count = 0\n    while n > 1:\n        ans = int((-1 + math.sqrt(1 + 4 * (2 * n) * 3)) / 6)\n        count += 1\n        n -= (3 * ans * ans + ans) / 2\n        if n == 1:\n            break\n    print(count)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    while True:\n        D = 0.25 + 6 * n\n        x = (-0.5 + D ** 0.5) // 3\n        if x > 0:\n            count += 1\n        else:\n            break\n        n -= 0.5 * x + 1.5 * x ** 2\n    print(count)", "import math\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    if k < 2:\n        print('0')\n    else:\n        ct = 0\n        while k > 1:\n            ct += 1\n            n = (math.sqrt(1 + 24 * k) - 1) // 6\n            k = k - (3 * n * n + n) // 2\n        print(ct)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    while n > 1:\n        a = 3\n        b = 1\n        c = -(2 * n)\n        tmp = int((-b + int(sqrt(b * b - 4 * a * c))) // (2 * a))\n        x = tmp * (tmp - 1) * 3 // 2 + 2 * tmp\n        n = n - x\n        cnt += 1\n    print(cnt)", "from math import sqrt\n\ndef PyramidSize(h):\n    return int(1.5 * h ** 2 + 0.5 * h)\n\ndef PyramidHeight(n):\n    return int((-1 + sqrt(1 + 24 * n)) / 6)\nt = int(input())\nresults = []\nfor i in range(t):\n    n = int(input())\n    c = 0\n    while n > 0 and PyramidHeight(n) > 0:\n        c += 1\n        h = PyramidHeight(n)\n        n -= PyramidSize(h)\n    results.append(c)\nfor i in range(t):\n    print(results[i])", "n = int(input())\nvar = [0] * n\nfor i in range(0, n):\n    var[i] = int(input())\nfor i in range(0, n):\n    count = 0\n    a = ((24 * var[i] + 1) ** 0.5 - 1) / 6\n    if a >= 1:\n        count += 1\n        while var[i] >= 2:\n            a = int(a)\n            var[i] = var[i] - ((a + 1) * a + a * (a - 1) / 2)\n            a = ((24 * var[i] + 1) ** 0.5 - 1) / 6\n            if a >= 1:\n                count += 1\n    print(count)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    count = 0\n    while n >= 2:\n        h = (-1 + math.sqrt(1 + 24 * n)) // 6\n        n -= (3 * h + 1) * h // 2\n        count += 1\n    print(count)", "from math import floor\nfrom math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    sum = 0\n    while n > 1:\n        x = floor((sqrt(1 + 24 * n) - 1) // 6)\n        n -= x * (3 * x + 1) / 2\n        sum += 1\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    while n > 1:\n        h = ((1 + 24 * n) ** 0.5 - 1) // 6\n        n -= (3 * h ** 2 + h) // 2\n        cnt += 1\n    print(cnt)", "import math as m\nfor _ in range(int(input())):\n    n = int(input())\n    a = 0\n    while n >= 2:\n        a += 1\n        x = (-1 + int(m.sqrt(1 + 24 * n))) // 6\n        n -= x * (3 * x + 1) // 2\n    print(a)", "def p(n):\n    h = (-1 + (1 + 24 * n) ** 0.5) / 6\n    return int(h)\nt = int(input())\nfor i in range(t):\n    c = 0\n    n = int(input())\n    while n > 1:\n        x = p(n)\n        c += 1\n        n -= (3 * x * x + x) / 2\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    c = 0\n    y = 0\n    while n > 1:\n        y = (-1 + (1 + 24 * n) ** 0.5) // 6\n        n -= (3 * y + 1) * y // 2\n        c += 1\n    print(c)", "f = lambda x: (3 * x * x + x) // 2\nfor _ in [0] * int(input()):\n    n = int(input())\n    r = 0\n    while n > 1:\n        r += 1\n        x = int(((1 + 24 * n) ** 0.5 - 1) / 6)\n        n = n - f(x)\n    print(r)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n < 2:\n        print(0)\n    elif n >= 2 and n < 7:\n        print(math.floor(n / 2))\n    else:\n        y = 0\n        while n >= 7:\n            y += 1\n            x = math.floor((-1 + math.sqrt(1 + 24 * n)) / 6)\n            z = math.floor(x * (3 * x + 1) / 2)\n            n = n - z\n        if n <= 7 and n >= 2:\n            y += math.floor(n / 2)\n        print(y)", "count = int(input())\nfor i in range(count):\n    n = int(input())\n    step = 0\n    while n > 1:\n        h = (-1 + pow(1 + 24 * n, 0.5)) / 6 // 1\n        n -= 2 * h + 3 * h * (h - 1) / 2\n        step += 1\n    print(step)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    ans = 0\n    while True:\n        if n < 2:\n            break\n        t = (-1 + pow(1 + 24 * n, 0.5)) / 6\n        t = int(t)\n        n -= int((3 * t + 1) * t) / 2\n        ans += 1\n    print(ans)", "import math\nimport sys\n\ndef fun1(val):\n    return (3 * val + 1) * val // 2\n\ndef fun2(n, cnt):\n    while n > 1:\n        val = (-1 + int(math.sqrt(1 + 24 * n))) // 6\n        temp = fun1(val)\n        cnt += 1\n        n -= temp\n    return cnt\nfor _ in range(int(input())):\n    n = int(input())\n    print(fun2(n, 0))", "from math import *\nt = int(input())\nm = []\nn = []\nfor i in range(t):\n    x = list(map(int, input().split()))\n    m.append(x)\nfor i in range(t):\n    x = m[i][0]\n    count = 0\n    while x > 1:\n        hp = floor((-1 + sqrt(1 + 24 * x)) / 6)\n        x = x - hp * (3 * hp + 1) / 2\n        count = count + 1\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    count = 0\n    while n > 1:\n        d = ((24 * n + 1) ** 0.5 - 1) // 6\n        n -= d * (3 * d + 1) // 2\n        count += 1\n    print(count)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 0\n    while n >= 2:\n        n1 = int(math.sqrt(1 + 2 * 4 * 3 * n) - 1) // 6\n        c += 1\n        a = n1 * (n1 + 1) + n1 * (n1 - 1) // 2\n        n = n - a\n    print(c)", "import math\nnb_cases = int(input())\nreponses = []\nfor case in range(nb_cases):\n    nb_cartes = int(input())\n    nb_pyramide = 0\n    while nb_cartes >= 2:\n        niveau = int((-1 + math.sqrt(1 + 24 * nb_cartes)) / 6)\n        if niveau >= 1:\n            nb_cartes -= 1.5 * niveau ** 2 + 0.5 * niveau\n            nb_pyramide += 1\n    reponses.append(nb_pyramide)\nfor x in reponses:\n    print(x)", "import math\nt = int(input())\nfor _ in range(t):\n    cards = int(input())\n    total = 0\n    while cards > 1:\n        height = math.floor((-1 + math.sqrt(1 + 12 * 2 * cards)) / 6)\n        cards -= height * (3 * height + 1) // 2\n        total += 1\n    print(total)", "for _ in range(int(input())):\n    a = int(input())\n    k = 0\n    while a > 1:\n        p = int(((24 * a + 1) ** 0.5 - 1) / 6)\n        a -= p * (3 * p + 1) // 2\n        k += 1\n    print(k)", "def maxh(n):\n    return int(((1 + 24 * n) ** 0.5 - 1) // 6)\n\ndef no(n):\n    if n == 0 or n == 1:\n        return 0\n    else:\n        a = maxh(n)\n        s = (3 * a * a + a) // 2\n        return 1 + no(n - s)\nfor _ in range(int(input())):\n    n = int(input())\n    print(no(n))", "import math, sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    ans = 0\n    while n > 1:\n        h = int((math.sqrt(1 + 24 * n) - 1) // 6)\n        n -= h * (h + 1) + (h - 1) * h // 2\n        ans += 1\n    sys.stdout.write(str(ans) + '\\n')", "for i in range(int(input())):\n    ans = 0\n    n = int(input())\n    while n >= 2:\n        size = ((1 + 24 * n) ** 0.5 - 1) // 6\n        n -= (3 * size ** 2 + size) // 2\n        ans += 1\n    print(ans)", "from math import sqrt\n\ndef f(k):\n    n = int((-1 + sqrt(1 + 24 * k)) / 6)\n    return (3 * n * n + n) // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    while n > 1:\n        n -= f(n)\n        i += 1\n    print(i)", "import math\nt = int(input())\ns = ''\nwhile t > 0:\n    c = int(input())\n    cnt = 0\n    while c >= 2:\n        h = int((math.sqrt(24 * c + 1) - 1) / 6)\n        if h >= 1:\n            cnt += 1\n        c -= int(h * (3 * h + 1) / 2)\n    s += str(cnt) + '\\n'\n    t -= 1\nprint(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = 0\n    while n > 1:\n        a = (math.sqrt(1 + 24 * n) - 1) // 6\n        n -= a * (3 * a + 1) // 2\n        num += 1\n    print(num)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    z = lambda x: int((-1 + int(sqrt(1 + 24 * x))) / 6)\n    cost = lambda x: (3 * x ** 2 + x) // 2\n    ans = 0\n    while n > 1:\n        ans += 1\n        n -= cost(z(n))\n    print(ans)", "for i in range(int(input())):\n    ans = 0\n    n = int(input())\n    while n >= 2:\n        size = ((1 + 24 * n) ** 0.5 - 1) // 6\n        n -= (3 * size ** 2 + size) // 2\n        ans += 1\n    print(ans)", "n = int(input())\no = []\n\ndef dfs(n, s):\n    t = (-1 + (1 + 24 * n) ** 0.5) // 6\n    if t == 0:\n        return s\n    else:\n        s += 1\n        s = dfs(n - 0.5 * t * (3 * t + 1), s)\n    return s\nfor i in range(n):\n    m = int(input())\n    o += [str(dfs(m, 0))]\nprint('\\n'.join(o))", "import math\nt = int(input())\nfor i in range(t):\n    p = int(input())\n    q = 0\n    c = 0\n    while True:\n        q = math.sqrt(24 * p + 1) - 1\n        if q % 6 == 0:\n            c += 1\n            break\n        else:\n            q = math.floor(q / 6)\n            if q == 0:\n                break\n            else:\n                c += 1\n                p -= q * (3 * q + 1) // 2\n    print(c)", "def get_primeFactor(n):\n    res = [1]\n    x = 2\n    while x * x <= n:\n        while n % x == 0:\n            res.append(x)\n            n //= x\n        x += 1\n    if n > 1:\n        res.append(n)\n    return res\n\ndef getFactor(n):\n    res = {1}\n    x = 2\n    while x * x <= n:\n        if n % x == 0:\n            res.add(x)\n            res.add(n // x)\n        x += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    lo = 1\n    hi = n\n    ans = 0\n    while n > 1:\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if n >= mid * (3 * mid + 1) // 2:\n                lo = mid + 1\n            else:\n                hi = mid\n        ans += 1\n        n -= (lo - 1) * (3 * (lo - 1) + 1) // 2\n        lo = 1\n        hi = n\n    print(ans)", "from bisect import bisect_left as bl\narr = [0] * (5 * 10 ** 4 + 1)\narr[0] = 0\narr[1] = 2\narr[2] = 7\narr[3] = 15\nfor i in range(4, 5 * 10 ** 4 + 1):\n    arr[i] = arr[i - 1] + 3 * (i - 1) + 2\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    while n:\n        b = bl(arr, n) - 1\n        if n < 2:\n            break\n        count += 1\n        n -= arr[b] if arr[b + 1] > n else arr[b + 1]\n    print(count)", "def find_largest_smaller_than_number(list, number):\n    start_index = 0\n    final_index = len(list) - 1\n    mid_index = start_index + (final_index - start_index) // 2\n    while True:\n        if number == list[mid_index]:\n            return 0\n        elif number < list[mid_index]:\n            final_index = mid_index\n            mid_index = start_index + (final_index - start_index) // 2\n        elif number > list[mid_index]:\n            start_index = mid_index\n            mid_index = start_index + (final_index - start_index) // 2\n        if start_index == mid_index:\n            return number - list[mid_index]\nHEIGHT = 30000\ncounts = [0] * (HEIGHT + 1)\ncounts[1] = 2\nfor i in range(2, HEIGHT + 1):\n    counts[i] = counts[i - 1] + i * 2 + i - 1\nfor i in range(int(input())):\n    number = int(input())\n    counter = 0\n    while number != 0 and number != 1:\n        remaining = find_largest_smaller_than_number(counts, number)\n        counter += 1\n        number = remaining\n    print(counter)", "import math\n\ndef card_pyramid(n):\n    return (3 * n * n + n) / 2\n\ndef return_height(k):\n    d = math.sqrt(24 * k + 1)\n    d -= 1\n    d /= 6\n    d = int(d)\n    return d\nt = int(input())\nfor i in range(t):\n    number_of_cards = int(input())\n    count = 0\n    while number_of_cards > 1:\n        height = return_height(number_of_cards)\n        required_cards = card_pyramid(height)\n        number_of_cards -= required_cards\n        count += 1\n    print(count)", "def bsearch(n):\n    start = 1\n    end = n\n    valid = 0\n    while start <= end:\n        mid = (start + end + 1) // 2\n        ca = mid * (mid + 1) + (mid - 1) * mid // 2\n        if ca <= n:\n            valid = ca\n            start = mid + 1\n        else:\n            end = mid - 1\n    return valid\nfor _ in range(int(input())):\n    n = int(input().strip())\n    c = 0\n    while n > 1:\n        c += 1\n        n -= bsearch(n)\n    print(c)", "import math\n\ndef calculerDelta(a, b, c):\n    return b * b - 4 * a * c\n\ndef resoudreEquationSecondDegre(a, b, c):\n    delta = calculerDelta(a, b, c)\n    if delta > 0:\n        racineDeDelta = math.sqrt(delta)\n        retour = [(-b - racineDeDelta) / (2 * a), (-b + racineDeDelta) / (2 * a)]\n    elif delta < 0:\n        retour = []\n    else:\n        retour = [-b / (2 * a)]\n    return retour\nfor _ in range(int(input())):\n    n = int(input())\n    total = 0\n    ok = True\n    while ok:\n        a = resoudreEquationSecondDegre(3, 1, -n * 2)\n        if len(a) > 1 and a[-1] > 0:\n            k = math.floor(a[-1])\n            if k > 0:\n                n -= k * (3 * k + 1) / 2\n                total += 1\n            else:\n                ok = False\n        else:\n            ok = False\n    print(total)", "def reduce_cards(x):\n    d = (1 + 4 * 3 * 2 * x) ** (1 / 2)\n    a1 = (-1 + d) / 6\n    a2 = (-1 - d) / 6\n    if int(max(a1, a2)) <= 0:\n        return -1\n    reduced = x - cards_consumed(int(max(a1, a2)))\n    if reduced >= 0:\n        return reduced\n    return -1\n\ndef cards_consumed(x):\n    return x * 2 + (x - 1) * x / 2 * 3\n\ndef main_handler(number_of_cards):\n    ctr = 0\n    while True:\n        temp = reduce_cards(number_of_cards)\n        if temp >= 0:\n            number_of_cards = temp\n            ctr += 1\n        else:\n            break\n    return ctr\nTEST_CASES = int(input())\nfor _ in range(TEST_CASES):\n    number_of_cards = int(input())\n    output = main_handler(number_of_cards)\n    print(output)"]