["import math\n\ndef test_case():\n    (m, d, w) = map(int, input().split())\n    step = w // math.gcd(d - 1, w)\n    border = min(m, d)\n    count = border // step\n    print(border * count - count * (2 * step + (count - 1) * step) // 2)\n\ndef main():\n    t = int(input())\n    while t > 0:\n        test_case()\n        t -= 1\nmain()", "import sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\nimport math\n\ndef calc(arr):\n    (m, d, w) = arr\n    max_x = min(m, d)\n    if (d - 1) % w == 0:\n        return max_x * (max_x - 1) // 2\n    else:\n        s = math.gcd(d - 1, w)\n        w = w // s\n        res = max_x % w\n        b = max_x // w\n        ans = b * (b - 1) // 2 * w + res * b\n        return ans\n(n, arr) = (int(input()), [])\nfor _ in range(n):\n    arr.append(calc(list(map(int, input().split(' ')))))\nfor a in arr:\n    print(a)", "import sys\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(sys.stdin.readline())\ni = 0\nwhile i < t:\n    i = i + 1\n    (m, d, w) = map(int, sys.stdin.readline().split())\n    w = w // gcd(d - 1, w)\n    mi = min(m, d)\n    x = mi // w\n    ans = (2 * (mi - w) - w * (x - 1)) * x // 2\n    print(ans)", "import math\nfrom decimal import Decimal\nn = int(input())\nfor i in range(n):\n    (m, d, w) = [int(e) for e in input().split(' ')]\n    dvd = w // math.gcd(w, d - 1)\n    n = min(m, d) // dvd\n    s = Decimal(n) / Decimal(2) * (2 * (min(m, d) - dvd) - dvd * (n - 1))\n    print(int(s))", "import sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\nimport math\n\ndef calc(arr):\n    (m, d, w) = arr\n    max_x = min(m, d)\n    if (d - 1) % w == 0:\n        return max_x * (max_x - 1) // 2\n    else:\n        s = math.gcd(d - 1, w)\n        w = w // s\n        res = max_x % w\n        b = max_x // w\n        ans = b * (b - 1) // 2 * w + res * b\n        return ans\n\ndef main():\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(calc(list(map(int, input().split(' ')))))\n    for a in arr:\n        print(a)\nmain()", "from sys import setrecursionlimit as srl\nfrom math import gcd\nsrl(2147483647)\n\ndef calc(arr):\n    (m, d, w) = arr\n    max_x = min(m, d)\n    return max_x * (max_x - 1) // 2 if (d - 1) % w == 0 else max_x // (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)) - 1) // 2 * (w // gcd(d - 1, w)) + max_x % (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)))\n(n, arr) = (int(input()), [])\nfor _ in range(n):\n    arr.append(calc(list(map(int, input().split(' ')))))\nfor a in arr:\n    print(a)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef sumd(n, d):\n    if n < d:\n        return 0\n    k = n // d\n    b = d * k - 1\n    return (1 + b // d) * (b // d) // 2 * d + (n - b) * (n // d)\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(II()):\n    (m, d, w) = MI()\n    p = w // gcd(d - 1, w)\n    s = min(d - 1, m - 1)\n    e = max(0, s - m + 1)\n    print(sumd(s, p) - sumd(e, p))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nans = []\nfor _ in range(int(input())):\n    (m, d, w) = map(int, input().split())\n    g = gcd(d - 1, w)\n    w1 = w // g\n    mn = min(m, d)\n    ans.append((2 * (mn - w1) - w1 * (mn // w1 - 1)) * (mn // w1) // 2)\nprint('\\n'.join(map(str, ans)))", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef solve():\n    (m, d, w) = nm()\n    g = w // gcd(d - 1, w)\n    c = min(m, d)\n    v = c // g\n    ans = v * (v - 1) // 2 * g\n    ans += (c - g * v) * v\n    print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef solve():\n    (m, d, w) = nm()\n    g = w // gcd(d - 1, w)\n    c = min(m, d)\n    v = c // g\n    ans = v * (v - 1) // 2 * g\n    ans += (c - g * v) * v\n    print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nn = int(input())\nfor i in range(n):\n    (m, d, w) = map(int, input().split())\n    z = min(m, d)\n    w //= gcd(d - 1, w)\n    ans = 0\n    fm = z % w\n    fn = z // w\n    ans += fn * (fn - 1) // 2 * (w - fm) + fn * (fn + 1) // 2 * fm\n    print(ans)", "from math import gcd\nt = int(input())\nfor it in range(t):\n    (m, d, w) = [int(i) for i in input().split()]\n    w = w // gcd(w, d - 1)\n    m = min(m, d)\n    c = m // w\n    print(c * m - w * c * (c + 1) // 2)", "from math import gcd as f\nfor tc in range(int(input())):\n    (m, d, w) = input().split(' ')\n    (m, d, w) = (int(m), int(d), int(w))\n    u = min(m, d)\n    a = int(w / f(w, d - 1))\n    p = int(u / a)\n    q = u % a\n    if p % 2 == 0:\n        print(q * (p + 1) * int(p / 2) + (a - q) * (p - 1) * int(p / 2))\n    else:\n        print(q * int((p + 1) / 2) * p + (a - q) * int((p - 1) / 2) * p)", "from math import gcd\ntZ = int(input())\nfor j in range(tZ):\n    (k, l, c) = [int(i) for i in input().split()]\n    c = c // gcd(c, l - 1)\n    k = min(k, l)\n    m = k // c\n    print(m * k - c * m * (m + 1) // 2)", "import math\nfor _ in range(int(input())):\n    (m, d, w) = map(int, input().split())\n    x = min(m, d)\n    g = int(w / math.gcd(d - 1, w))\n    f = int(x / g)\n    print(x * f - f * (f + 1) // 2 * g)", "from math import gcd\nt = int(input(''))\nfor it in range(t):\n    (m, d, w) = [int(i) for i in input().split()]\n    w = w // gcd(w, d - 1)\n    m = min(m, d)\n    c = m // w\n    print(c * m - w * c * (c + 1) // 2)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    k = gcd(c, b - 1)\n    c = c // k\n    a = min(a, b)\n    m = a // c\n    print(m * a - c * m * (m + 1) // 2)", "from math import gcd\nt = int(input())\nfor j in range(t):\n    (a, b, c) = [int(i) for i in input().split()]\n    c = c // gcd(c, b - 1)\n    a = min(a, b)\n    m = a // c\n    print(m * a - c * m * (m + 1) // 2)", "from math import gcd\nt = int(input(''))\nfor it in range(t):\n    (m, d, w) = [int(i) for i in input().split()]\n    w = w // gcd(w, d - 1)\n    m = min(m, d)\n    c = m // w\n    print(c * m - w * c * (c + 1) // 2)", "def gcd(m, n):\n    return gcd(n % m, m) if m and n else m + n\n\ndef count_ambiguous_pairs(month_count, month_len, week_len):\n    m = min(month_count, month_len)\n    if month_len == 1:\n        return m * (m - 1) // 2\n    d = week_len // gcd(month_len - 1, week_len)\n    (q, r) = divmod(m, d)\n    return r * q + q * (q - 1) * d // 2\ntest_count = int(input())\nfor _ in range(test_count):\n    (month_count, month_len, week_len) = map(int, input().split())\n    print(count_ambiguous_pairs(month_count, month_len, week_len))", "from sys import setrecursionlimit as srl\nfrom math import gcd\nsrl(2147483647)\n\ndef calc(arr):\n    (m, d, w) = arr\n    max_x = min(m, d)\n    if (d - 1) % w == 0:\n        return max_x * (max_x - 1) // 2\n    else:\n        return max_x // (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)) - 1) // 2 * (w // gcd(d - 1, w)) + max_x % (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)))\n(n, arr) = (int(input()), [])\nfor _ in range(n):\n    arr.append(calc(list(map(int, input().split(' ')))))\nfor a in arr:\n    print(a)", "from sys import setrecursionlimit as srl\nfrom math import gcd\nsrl(2147483647)\n\ndef calc(arr):\n    (m, d, w) = arr\n    max_x = min(m, d)\n    return max_x * (max_x - 1) // 2 if (d - 1) % w == 0 else max_x // (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)) - 1) // 2 * (w // gcd(d - 1, w)) + max_x % (w // gcd(d - 1, w)) * (max_x // (w // gcd(d - 1, w)))\n(n, arr) = (int(input()), [])\nfor _ in range(n):\n    arr.append(calc(list(map(int, input().split(' ')))))\nfor a in arr:\n    print(a)", "def gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nn = int(input())\nfor i in range(n):\n    (m, d, w) = map(int, input().split())\n    z = min(m, d)\n    if (d - 1) % w == 0:\n        print(z * (z - 1) // 2)\n    elif gcd(w, d - 1) == 1:\n        ans = 0\n        fm = z % w\n        fn = z // w\n        ans += fn * (fn - 1) // 2 * (w - fm) + fn * (fn + 1) // 2 * fm\n        print(ans)\n    else:\n        w //= gcd(d - 1, w)\n        ans = 0\n        fm = z % w\n        fn = z // w\n        ans += fn * (fn - 1) // 2 * (w - fm) + fn * (fn + 1) // 2 * fm\n        print(ans)", "from math import gcd\nt = int(input())\nfor it in range(t):\n    (m, d, w) = [int(i) for i in input().split()]\n    w = w // gcd(w, d - 1)\n    m = min(m, d)\n    c = m // w\n    print(c * m - w * c * (c + 1) // 2)", "def gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nt = int(input())\nfor _ in range(t):\n    (m, d, w) = map(int, input().split())\n    limit = min(m, d)\n    a = w // gcd(w, d - 1) if d > 1 else 1\n    num = limit // a\n    (head, root) = (limit - a, limit - a * num)\n    print((head + root) * num // 2)", "import math\nt = int(input())\nfor _ in range(t):\n    (m, d, w) = map(int, input().split())\n    w = w // math.gcd(w, d - 1)\n    mn = min(m, d)\n    c = mn // w\n    ans = (2 * (mn - w) - w * (c - 1)) * c // 2\n    print(ans)", "from math import gcd\nt = int(input())\nfor j in range(t):\n    (a, b, c) = [int(i) for i in input().split()]\n    c = c // gcd(c, b - 1)\n    a = min(a, b)\n    m = a // c\n    print(m * a - c * m * (m + 1) // 2)", "from math import gcd\nA = int(input())\nfor i in range(A):\n    (a, b, c) = [int(j) for j in input().split()]\n    c = c // gcd(c, b - 1)\n    a = min(a, b)\n    p = a // c\n    print(p * a - c * p * (p + 1) // 2)", "from sys import stdin, setrecursionlimit as srl\nfrom threading import stack_size, Thread\nsrl(int(1000000000.0) + 7)\nstack_size(int(100000000.0))\n\ndef hcf(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    return hcf(b, a % b)\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        (m, d, w) = map(int, input().split())\n        i = 1\n        gap = w // hcf(w, d - 1)\n        limit = min(d, m)\n        var = (limit - 1) // gap\n        ans = limit * var - gap * var * (var + 1) // 2\n        print(ans)\nThread(target=solve).start()", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    (m, d, w) = map(int, input().split())\n    g = w // gcd(d - 1, w)\n    c = min(m, d)\n    v = c // g\n    ans = v * (v - 1) // 2 * g\n    ans += (c - g * v) * v\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef calendar():\n    t = int(input())\n    for i in range(t):\n        (m, d, w) = map(int, input().split())\n        w2 = w // gcd(w, d - 1)\n        m2 = min(m, d)\n        x = m2 // w2\n        print(x * m2 - x * (x + 1) // 2 * w2)\ncalendar()", "import functools\n\ndef factorint(n):\n    factors = {}\n    m = (n & -n).bit_length() - 1\n    if m:\n        factors[2] = m\n        n >>= m\n    m = 0\n    while n % 3 == 0:\n        n //= 3\n        m += 1\n    if m:\n        factors[3] = m\n    d = 5\n    while d * d <= n:\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n        if m:\n            factors[d] = m\n        d += 2\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n        if m:\n            factors[d] = m\n        d += 4\n    if n > 1:\n        factors[n] = 1\n    return factors\nfor t in range(int(input())):\n    (m, d, w) = map(int, input().split())\n    u = min(m, d)\n    if d == 1:\n        a = 1\n    else:\n        f = factorint(w)\n        for (k, v) in factorint(d - 1).items():\n            if k in f:\n                f[k] = max(0, f[k] - v)\n        a = functools.reduce(int.__mul__, (k ** v for (k, v) in f.items()), 1)\n    m = u // a\n    total = u * m - a * (1 + m) * m // 2\n    print(total)", "import functools\n\ndef factorint(n):\n    factors = {}\n    m = (n & -n).bit_length() - 1\n    if m:\n        factors[2] = m\n        n >>= m\n    m = 0\n    while n % 3 == 0:\n        n //= 3\n        m += 1\n    if m:\n        factors[3] = m\n    d = 5\n    while d * d <= n:\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n        if m:\n            factors[d] = m\n        d += 2\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n        if m:\n            factors[d] = m\n        d += 4\n    if n > 1:\n        factors[n] = 1\n    return factors\nfor t in range(int(input())):\n    (m, d, w) = map(int, input().split())\n    u = min(m, d)\n    if d == 1:\n        a = 1\n    else:\n        f = factorint(w)\n        for (k, v) in factorint(d - 1).items():\n            if k in f:\n                f[k] = max(0, f[k] - v)\n        a = functools.reduce(int.__mul__, (k ** v for (k, v) in f.items()), 1)\n    m = u // a\n    total = u * m - a * (1 + m) * m // 2\n    print(total)"]