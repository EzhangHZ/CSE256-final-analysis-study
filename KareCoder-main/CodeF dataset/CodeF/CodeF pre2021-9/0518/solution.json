["from sys import stdin\n\ndef main():\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline()) + 1\n        (res, cnt) = (0, {})\n        for (i, s) in enumerate(stdin.readline().split(), 1):\n            res += (n - i) * cnt.setdefault(s, 0)\n            cnt[s] += i\n        print(res)\nmain()", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split()]\n    return res\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in input().rstrip('\\n').split()]\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        n = read_one_int()\n        elements = read_list_of_ints()\n        stat = {}\n        cur_res = 0\n        res = 0\n        for (i, el) in enumerate(elements):\n            if el in stat:\n                cur_res += stat[el]\n            else:\n                stat[el] = 0\n            stat[el] += i + 1\n            res += cur_res\n        print(res)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ps = {}\n    ans = 0\n    for i in range(n):\n        if arr[i] not in ps:\n            ps[arr[i]] = [i + 1]\n        else:\n            ans += ps[arr[i]][-1] * (n - i)\n            ps[arr[i]].append(ps[arr[i]][-1] + i + 1)\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    lis = [*map(int, stdin.readline().split())]\n    cnt = 0\n    dic = {}\n    for i in range(n):\n        val = lis[i]\n        if lis[i] in dic:\n            cnt += (n - i) * dic[val]\n            dic[val] += i + 1\n        else:\n            dic[val] = i + 1\n    print(cnt)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\nfor _ in range(I()):\n    n = I()\n    a = L()\n    dp = [0] * n\n    d = {}\n    d[a[0]] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + d.get(a[i], 0)\n        d[a[i]] = d.get(a[i], 0) + i + 1\n    print(sum(dp))", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    a = 0\n    n = len(l)\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    print(a)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = {}\n    ps = {}\n    for i in range(n):\n        if arr[i] not in cnt:\n            cnt[arr[i]] = []\n            ps[arr[i]] = []\n        cnt[arr[i]].append(i)\n        if not ps[arr[i]]:\n            ps[arr[i]].append(i)\n        else:\n            ps[arr[i]].append(ps[arr[i]][-1] + i)\n    ans = 0\n    for v in cnt:\n        if len(cnt[v]) == 1:\n            continue\n        for i in range(len(cnt[v])):\n            ans += (cnt[v][i] + 1) * ((len(cnt[v]) - i - 1) * n - (ps[v][-1] - ps[v][i]))\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    a = 0\n    n = len(l)\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    print(a)", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    a = 0\n    n = len(l)\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    print(a)", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    a = 0\n    n = len(l)\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    print(a)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    l = [*map(int, sys.stdin.readline().split())]\n    a = 0\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    sys.stdout.write(str(a) + '\\n')", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    a = 0\n    n = len(l)\n    p = {x: 0 for x in l}\n    for i in range(n):\n        a += p[l[i]] * (n - i)\n        p[l[i]] += i + 1\n    print(a)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    dp = [0] * (n + 1)\n    temp = dict()\n    for idx in range(1, n + 1):\n        dp[idx] += dp[idx - 1]\n        if data[idx - 1] in temp:\n            dp[idx] += temp[data[idx - 1]]\n        else:\n            temp[data[idx - 1]] = 0\n        temp[data[idx - 1]] += idx\n    print(sum(dp))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    dp = [0 for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        if a[i] not in cnt:\n            cnt[a[i]] = 0\n        if i > 0:\n            dp[i] = dp[i - 1] + cnt[a[i]]\n        cnt[a[i]] += i + 1\n        ans += dp[i]\n    print(ans)", "import bisect\nfrom collections import defaultdict, Counter\n\ndef com(a, n):\n    m = len(a)\n    ans = 0\n    cum_sum = [0]\n    c = 0\n    for x in a:\n        c += x\n        cum_sum.append(c)\n    for i in range(0, m):\n        ctr = m - i - 1\n        sum_j = cum_sum[m] - cum_sum[i + 1]\n        add = a[i] * ctr\n        add += ctr * n - sum_j\n        add += a[i] * ctr * (n - 1)\n        add -= a[i] * sum_j\n        ans += add\n    return int(ans)\n\ndef main(a):\n    n = len(a)\n    idx_map = defaultdict(list)\n    for (i, x) in enumerate(a):\n        idx_map[x].append(i)\n    ans = 0\n    for l in idx_map.values():\n        m = len(l)\n        if m > 1:\n            ans += com(list(l), n)\n    return int(ans)\nt = int(input())\noutputs = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    output = main(arr)\n    outputs.append(output)\nfor o in outputs:\n    print(o)", "n = int(input())\ntest_case = list()\nfor i in range(n):\n    k = int(input())\n    s = input()\n    a = list(map(int, s.split()))\n    test_case.append((k, a))\nfor (k, array) in test_case:\n    group_index_by_value = dict()\n    count = 0\n    for (i, v) in enumerate(array):\n        if v in group_index_by_value:\n            count += (k - i) * group_index_by_value[v]\n            group_index_by_value[v] += i + 1\n        else:\n            group_index_by_value[v] = i + 1\n    print(count)", "def solve():\n    n = input()\n    n = int(n)\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    dp = [0]\n    d = {a[0]: 1}\n    c = {a[0]: 1}\n    ans = 0\n    for i in range(1, n):\n        x = a[i]\n        dp.append(dp[i - 1])\n        if x in d:\n            y = d[x]\n            d[x] += i + 1\n            dp[i] += y\n        else:\n            d[x] = i + 1\n        ans += dp[i]\n    print(ans)\n\ndef main():\n    t = input()\n    t = int(t)\n    for i in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    hash = {}\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if a[i] in hash:\n            cnt += hash[a[i]]\n        else:\n            hash[a[i]] = 0\n        hash[a[i]] += i + 1\n        ans += cnt\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "def cal(n, ind_list):\n    ind1_list = [ind + 1 for ind in ind_list]\n    red_list = [n - ind for ind in ind_list]\n    pre_sum = [0]\n    for ind1 in ind1_list:\n        pre_sum.append(pre_sum[-1] + ind1)\n    res = 0\n    for i in range(1, len(red_list)):\n        res += red_list[i] * pre_sum[i]\n    return res\n\ndef getResult(n, a_list):\n    v_dict = {}\n    for i in range(n):\n        v = a_list[i]\n        if v in v_dict:\n            v_dict[v].append(i)\n        else:\n            v_dict[v] = [i]\n    res = 0\n    for v in v_dict.keys():\n        if len(v_dict[v]) >= 2:\n            res += cal(n, v_dict[v])\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a_list = [int(k) for k in input().split()]\n    print(getResult(n, a_list))", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "def solve():\n    n: int = int(input())\n    arr = [int(num) for num in input().split(' ')]\n    (count, ans) = ({}, 0)\n    for i in range(len(arr)):\n        ans += (n - i) * count.get(arr[i], 0)\n        count[arr[i]] = count.get(arr[i], 0) + i + 1\n    return ans\n\ndef main_fun():\n    t = int(input())\n    while t > 0:\n        print(solve())\n        t -= 1\nmain_fun()", "def read():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        solve(n, a)\n\ndef solve(n, a):\n    ans = 0\n    d = dict()\n    for i in range(n):\n        x = a[i]\n        if x in d:\n            ans += (n - i) * d[x]\n            d[x] += i + 1\n        else:\n            d[x] = i + 1\n    print(ans)\nread()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        arr[i] = [arr[i], i]\n    arr.sort()\n    if n == 1:\n        print(0)\n        continue\n    cur = arr[-1][0]\n    ind = n - arr[-1][1]\n    su = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i][0] != cur:\n            cur = arr[i][0]\n            ind = n - arr[i][1]\n            continue\n        su += (arr[i][1] + 1) * ind\n        ind += n - arr[i][1]\n    print(su)", "for _ in range(int(input())):\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    di = {i: 0 for i in li}\n    ans = 0\n    for (i, j) in enumerate(li):\n        ans += di[j] * (n - i)\n        di[j] += i + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for j in range(n):\n        if a[j] in d:\n            ans += d[a[j]] * (n - j)\n        if a[j] not in d:\n            d[a[j]] = j + 1\n        else:\n            d[a[j]] += j + 1\n    print(ans)", "t = int(input())\nfor _i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in reversed(range(n)):\n        target = arr[i]\n        if target in d:\n            ans += (i + 1) * d[target]\n            d[target] += n - i\n        else:\n            d[target] = n - i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(d) for d in input().split()]\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]].append(i + 1)\n        else:\n            d[a[i]] = [i + 1]\n    c = 0\n    for i in d:\n        if len(d[i]) > 1:\n            s1 = 0\n            s2 = 0\n            sq = 0\n            sum_ = 0\n            for j in range(len(d[i])):\n                s1 += (len(d[i]) - j - 1) * d[i][j]\n                sum_ += d[i][j]\n                sq += d[i][j] ** 2\n            s1 = s1 * (len(a) + 1)\n            s2 = (sum_ ** 2 - sq) // 2\n            c += s1 - s2\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().split()\n    m = dict()\n    ans = 0\n    for (pos, elem) in enumerate(a):\n        if elem not in m:\n            m[elem] = 0\n        ans += m[elem] * (n - pos)\n        m[elem] += pos + 1\n    print(ans)", "def func():\n    ind = dict()\n    ans = 0\n    for i in range(n):\n        if a[i] not in ind:\n            ind[a[i]] = i + 1\n        else:\n            ans += ind[a[i]] * (n - i)\n            ind[a[i]] += i + 1\n    print(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    func()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {ai: 0 for ai in a}\n    ans = 0\n    for (i, ai) in enumerate(a):\n        ans += d[ai] * (n - i)\n        d[ai] += i + 1\n    print(ans)", "def process(x):\n    s = 0\n    d = {}\n    for i in range(len(x)):\n        if x[i] in d:\n            s += (len(x) - i) * d[x[i]]\n            d[x[i]] += i + 1\n        else:\n            d[x[i]] = i + 1\n    print(s)\nn = int(input())\nfor i in range(n):\n    l = int(input())\n    x = [int(p) for p in list(input().split(' '))]\n    process(x)", "def main():\n    T = int(input())\n    for c in range(1, T + 1):\n        n = int(input())\n        arr = input().rstrip().split(' ')\n        for i in range(n):\n            arr[i] = int(arr[i])\n        d = {}\n        ans = 0\n        for i in range(n):\n            l = i + 1\n            r = n - i\n            if arr[i] not in d:\n                d[arr[i]] = l\n            else:\n                ans += d[arr[i]] * r\n                d[arr[i]] += l\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if b[i] not in d:\n            d[b[i]] = []\n        d[b[i]].append(i)\n    ans = 0\n    for j in d.values():\n        z = []\n        if len(j) > 1:\n            for i in range(len(j)):\n                z.append(n - j[i])\n            for i in range(len(j) - 2, -1, -1):\n                z[i] += z[i + 1]\n            for i in range(len(j) - 1):\n                ans += (j[i] + 1) * z[i + 1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    count = 0\n    for (i, c) in enumerate(a):\n        prev = d.get(c, 0)\n        count += prev * (n - i)\n        d[c] = prev + i + 1\n    print(count)", "def mapit():\n    temp = list(map(int, input().split()))\n    return temp\nfrom math import log2\n\ndef solution():\n    n = int(input())\n    arr = mapit()\n    dp = [0] * n\n    ans = 0\n    dicty = {}\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if arr[i] in dicty:\n            dp[i] += dicty[arr[i]]\n            dicty[arr[i]] += i + 1\n        else:\n            dicty[arr[i]] = i + 1\n        ans += dp[i]\n    print(ans)\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    lookup = {}\n    ans = 0\n    for i in range(n):\n        a = A[i]\n        if a not in lookup:\n            lookup[a] = 0\n        ans += lookup[a] * (n - i)\n        lookup[a] += i + 1\n    return ans\nwhile t:\n    t -= 1\n    ans = solve()\n    print(ans)", "def formula(index, N, K):\n    answer = N * (K * (K - 1) // 2)\n    sm = 0\n    square_sum = 0\n    front = K - 1\n    last = 0\n    for alpha in index:\n        sm += alpha\n        square_sum += alpha * alpha\n        answer += alpha * (front * N - last)\n        front -= 1\n        last += 1\n    answer -= (sm * sm - square_sum) // 2\n    return answer\nfor _ in range(int(input())):\n    N = int(input())\n    indexes = {}\n    p = list(map(int, input().split()))\n    for i in range(N):\n        a = p[i]\n        if a in indexes:\n            indexes[a].append(i)\n        else:\n            indexes[a] = [i]\n    ans = 0\n    for it in indexes.values():\n        if len(it) >= 2:\n            ans += formula(it, N, len(it))\n    print(ans)", "import sys\nfrom math import *\ntest = int(input())\nwhile test:\n    test -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (res, ans) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ans += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        res += ans\n    print(res)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "for i in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = {}\n    s = 0\n    for i in range(n):\n        if a[i] not in q:\n            q[a[i]] = 0\n        s += q[a[i]] * (n - i)\n        q[a[i]] += i + 1\n    print(s)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    cnt = {}\n    for i in range(n):\n        if a[i] in cnt:\n            ans += (n - i) * cnt[a[i]]\n        if a[i] in cnt:\n            cnt[a[i]] += i + 1\n        else:\n            cnt[a[i]] = i + 1\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    ans = 0\n    for i in range(n):\n        if a[i] not in cnt:\n            cnt[a[i]] = 0\n        ans += (n - i) * cnt[a[i]]\n        cnt[a[i]] += i + 1\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    k = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    cnt = {}\n    for i in range(k):\n        if a[i] in cnt:\n            ans = ans + (k - i) * cnt[a[i]]\n        if a[i] in cnt:\n            cnt[a[i]] += i + 1\n        else:\n            cnt[a[i]] = i + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {ai: 0 for ai in a}\n    ans = 0\n    for (i, ai) in enumerate(a):\n        ans += d[ai] * (n - i)\n        d[ai] += i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {ai: 0 for ai in a}\n    ans = 0\n    for (i, ai) in enumerate(a):\n        ans += d[ai] * (n - i)\n        d[ai] += i + 1\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "T = int(input())\nfor ti in range(T):\n    N = int(input())\n    array = input().split(' ')\n    dic = {}\n    prefix = [0 for i in range(N)]\n    count = 0\n    for i in range(N):\n        array[i] = int(array[i])\n        if i > 0:\n            prefix[i] = prefix[i - 1]\n        if array[i] in dic:\n            prefix[i] += dic[array[i]]\n            dic[array[i]] += i + 1\n        else:\n            dic[array[i]] = i + 1\n        count += prefix[i]\n    print(count)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    dct = {}\n    dp = [0] * n\n    ans = 0\n    for ind in range(n):\n        value = lst[ind]\n        contribution = ind + 1\n        if ind != 0:\n            dp[ind] = dp[ind - 1]\n        if value in dct:\n            dp[ind] += dct[value]\n        ans += dp[ind]\n        if value in dct:\n            dct[value] += contribution\n        else:\n            dct[value] = contribution\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "from collections import defaultdict\nT = int(input())\nfor case in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        d[arr[i]].append(i)\n    ans = 0\n    for key in d.keys():\n        if len(d[key]) > 1:\n            m = len(d[key])\n            prefix = [0]\n            for i in range(m - 1, 0, -1):\n                prefix.append(prefix[-1] + (n - 1 - d[key][i] + 1))\n            for i in range(m - 1):\n                ans += (d[key][i] + 1) * prefix[-1 + -i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        ans += m[a[i]] * (n - i)\n        m[a[i]] += i + 1\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "from typing import List\n\ndef solve(n: int, a: List[int]) -> int:\n    count = {}\n    for i in range(n):\n        if a[i] in count:\n            count[a[i]].append(i + 1)\n        else:\n            count[a[i]] = [i + 1]\n    ans = 0\n    for key in count:\n        prefix_sum = 0\n        for x in count[key]:\n            ans += prefix_sum * (n - x + 1)\n            prefix_sum += x\n    return ans\ntest_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "import sys\nfrom math import *\ninf = 10 ** 9\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    ans = 0\n    s = set(a)\n    for i in range(n - 1, -1, -1):\n        h[a[i]] = 0\n    for i in range(n):\n        ans += h[a[i]] * (n - i)\n        h[a[i]] += i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {ai: 0 for ai in a}\n    ans = 0\n    for (i, ai) in enumerate(a):\n        ans += d[ai] * (n - i)\n        d[ai] += i + 1\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "def fun(n, ls):\n    dp = [0 for i in range(n)]\n    dct = {}\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if ls[i] in dct.keys():\n            dp[i] += dct.get(ls[i])\n        if dct.get(ls[i]) == None:\n            dct[ls[i]] = 0 + i + 1\n        else:\n            dct[ls[i]] = dct[ls[i]] + i + 1\n        ans += dp[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(n, ls)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lefts = {}\n    ans = 0\n    for i in range(n):\n        num = a[i]\n        if num in lefts:\n            ans += lefts[num] * (n - i)\n            lefts[num] += i + 1\n        else:\n            lefts[num] = i + 1\n    print(ans)", "def process(S):\n    d = {}\n    answer = 0\n    n = len(S)\n    for i in range(n):\n        x = S[i]\n        if x not in d:\n            d[x] = {'Sum': 0, 'Length': 0}\n        answer += (d[x]['Sum'] + d[x]['Length']) * (n - i)\n        d[x]['Sum'] += i\n        d[x]['Length'] += 1\n    return answer\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    S = [int(x) for x in input().split()]\n    print(process(S))", "for u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    s = set(x)\n    d = {}\n    for i in s:\n        d[i] = []\n    for i in range(n):\n        d[x[i]].append(i)\n    ans = 0\n    for j in d:\n        l = d[j]\n        z = []\n        if len(l) >= 2:\n            for i in range(len(l)):\n                z.append(n - l[i])\n            for i in range(len(l) - 2, -1, -1):\n                z[i] += z[i + 1]\n            for i in range(len(l) - 1):\n                ans += (l[i] + 1) * z[i + 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        ans += m[a[i]] * (n - i)\n        m[a[i]] += i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    pos = {}\n    a = list(map(int, input().split(' ')))\n    for (i, val) in enumerate(a):\n        if val not in pos.keys():\n            pos[val] = []\n        pos[val].append(i)\n    sum = 0\n    for (_, l) in pos.items():\n        past = 0\n        for x in l:\n            sum += (n - x) * past\n            past += x + 1\n    print(sum)", "tt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (ans, tmp) = (0, 0)\n    value = dict()\n    for i in range(n):\n        if a[i] in value:\n            tmp += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        ans += tmp\n    print(ans)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    value = {}\n    (fa, ca) = (0, 0)\n    for i in range(n):\n        if a[i] in value:\n            ca += value[a[i]]\n        else:\n            value[a[i]] = 0\n        value[a[i]] += i + 1\n        fa += ca\n    print(fa)", "for m in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = {}\n    Res = [0] * N\n    for i in range(N):\n        Res[i] = Res[i - 1]\n        if A[i] in B:\n            Res[i] += B[A[i]]\n            B[A[i]] += i + 1\n        else:\n            B[A[i]] = i + 1\n    print(sum(Res))", "for step in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    top = 0\n    hash = {}\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if a[i] in hash.keys():\n            dp[i] += hash[a[i]]\n        else:\n            hash[a[i]] = 0\n        hash[a[i]] += i + 1\n        top += dp[i]\n    print(top)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        ans += m[a[i]] * (n - i)\n        m[a[i]] += i + 1\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]\n    b = [int(i) for i in input().split()]\n    a = a + b\n    d = defaultdict(lambda : 0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += d[a[i]] * (n - i + 1)\n        d[a[i]] += i\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[l[i]] = 0\n    ans = 0\n    for i in range(n):\n        ans += d[l[i]] * (n - i)\n        d[l[i]] += i + 1\n    print(ans)", "def solve(n, arr):\n    dic = {}\n    for i in range(n):\n        if arr[i] not in dic:\n            dic[arr[i]] = []\n        dic[arr[i]].append(i)\n    count = 0\n    for value in dic.values():\n        if len(value) > 1:\n            temp2 = 0\n            for i in value:\n                temp2 += n - i\n            for i in value:\n                temp2 -= n - i\n                temp1 = i + 1\n                count += temp1 * temp2\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))[:n]\n    result = solve(n, arr)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    t = n\n    s = list(map(int, input().split()))\n    D = dict()\n    for i in range(n):\n        c = s[i]\n        if c in D:\n            D[c].append(i)\n        else:\n            D[c] = [i]\n    ans = 0\n    for I in D.values():\n        if len(I) > 1:\n            end = sum((t - I[i] for i in range(1, len(I))))\n            for i in range(len(I) - 1):\n                ans += (I[i] + 1) * end\n                end -= t - I[i + 1]\n    print(ans)", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    dict = {}\n    vals = list(map(int, input().split()))\n    cnt = 0\n    for a in vals:\n        if a not in dict.keys():\n            dict[a] = []\n        dict[a].append(cnt)\n        cnt += 1\n    ans = 0\n    for (key, value) in dict.items():\n        list1 = value\n        m = len(value)\n        sumList = [0] * m\n        sumList[0] = list1[0] + 1\n        for i in range(1, m):\n            sumList[i] = sumList[i - 1] + list1[i] + 1\n        for i in range(1, m):\n            after = n - list1[i]\n            ans += after * sumList[i - 1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    for i in range(n):\n        if a[i] not in m:\n            m[a[i]] = 0\n        ans += m[a[i]] * (n - i)\n        m[a[i]] += i + 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    f = defaultdict(int)\n    c = 0\n    for i in range(n - 1, -1, -1):\n        c += (i + 1) * f[l[i]]\n        f[l[i]] += n - i\n    print(c)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        ans += d[l[i]] * (n - i)\n        d[l[i]] += i + 1\n    print(ans)", "from collections import defaultdict\nfor i in range(int(input())):\n    ans = 0\n    n = int(input())\n    d = defaultdict(lambda : 0)\n    a = list(map(int, input().split()))\n    for j in range(n):\n        ans += d[a[j]] * (n - j)\n        d[a[j]] += j + 1\n    print(ans)", "def fun(n, ls):\n    dp = [0 for i in range(n)]\n    dct = {i: 0 for i in ls}\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if ls[i] in dct:\n            dp[i] += dct.get(ls[i])\n        dct[ls[i]] += i + 1\n        ans += dp[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(n, ls)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    hashTable = defaultdict(list)\n    ans = 0\n    for (idx, val) in enumerate(array, 1):\n        hashTable[val].append(idx)\n    for i in hashTable:\n        prefixSum = 0\n        for j in hashTable[i]:\n            ans += prefixSum * (n - j + 1)\n            prefixSum += j\n    print(ans)", "import sys\nfrom collections import defaultdict\nCONST = 100030001\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(get_ints())\n    hm = defaultdict(lambda : [])\n    for (idx, num) in enumerate(arr):\n        hm[num].append(idx)\n    ans = 0\n    for (k, v) in hm.items():\n        if len(v) <= 1:\n            continue\n        ps = 0\n        for idx in v:\n            ans += ps * (n - idx)\n            ps += idx + 1\n    print(ans)\n    t -= 1", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    dic = defaultdict(list)\n    for i in range(n):\n        dic[arr[i]].append([i + 1, n - i])\n    cnt = 0\n    for key in dic:\n        l = len(dic[key])\n        if l <= 1:\n            continue\n        for i in range(l - 2, -1, -1):\n            dic[key][i][1] += dic[key][i + 1][1]\n        for i in range(l - 1):\n            cnt += dic[key][i][0] * dic[key][i + 1][1]\n    print(cnt)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    tmp = list(set(a))\n    for e in tmp:\n        d[e] = []\n    for j in range(n):\n        d[a[j]].append(j + 1)\n    ans = 0\n    for key in d:\n        qw = len(d[key])\n        if qw > 1:\n            pref_sum = [d[key][0]]\n            for j in range(1, qw):\n                pref_sum.append(pref_sum[-1] + d[key][j])\n                ans += pref_sum[j - 1] * (n - d[key][j] + 1)\n    print(ans)", "def fun(n, ls):\n    dp = [0 for i in range(n)]\n    dct = {i: 0 for i in ls}\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if ls[i] in dct:\n            dp[i] += dct.get(ls[i])\n        dct[ls[i]] += i + 1\n        ans += dp[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(n, ls)", "for __ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(len(l)):\n        d.setdefault(l[i], []).append(i)\n    ans = 0\n    n1 = n\n    for i in d:\n        n = len(d[i])\n        p = d[i]\n        l = 0\n        for j in range(0, n - 1):\n            l = l + (p[j] + 1)\n            r = n1 - p[j + 1]\n            ans += l * r\n    print(ans)", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    d = defaultdict(int)\n    for (i, a) in enumerate(arr, start=1):\n        dp[i] += dp[i - 1]\n        dp[i] += d[a]\n        d[a] += i\n    return sum(dp)\nfor _ in range(int(input().strip())):\n    print(solve())", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    store = {}\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if a[i - 1] in store:\n            dp[i] += store[a[i - 1]]\n        else:\n            store[a[i - 1]] = 0\n        store[a[i - 1]] += i\n    print(sum(dp))", "import itertools\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    C = defaultdict(int)\n    for i in range(n):\n        ans += C[a[i]] * (n - i)\n        C[a[i]] += i + 1\n    print(ans)", "def solve(n, a):\n    b = {}\n    for i in range(n):\n        if not a[i] in b:\n            b[a[i]] = []\n        b[a[i]].append(i + 1)\n    m = n + 1\n    c = 0\n    for (x, d) in b.items():\n        k = 0\n        for i in range(len(d)):\n            if i > 0:\n                c += k * (m - d[i])\n            k += d[i]\n    return c\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "def fun(n, ls):\n    dp = [0 for i in range(n)]\n    dct = {i: 0 for i in ls}\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if ls[i] in dct.keys():\n            dp[i] += dct.get(ls[i])\n        dct[ls[i]] = dct[ls[i]] + i + 1\n        ans += dp[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(n, ls)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    dp = [0] * (n + 1)\n    d = dict()\n    ans = 0\n    for i in range(n):\n        dp[i + 1] += dp[i]\n        d.setdefault(a[i], 0)\n        dp[i + 1] += d[a[i]]\n        d[a[i]] += i + 1\n        ans += dp[i + 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    dp = [0] * (n + 1)\n    d = dict()\n    ans = 0\n    for i in range(n):\n        dp[i + 1] += dp[i]\n        d.setdefault(a[i], 0)\n        dp[i + 1] += d[a[i]]\n        d[a[i]] += i + 1\n        ans += dp[i + 1]\n    print(ans)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport sys\nimport string\nimport random\nfrom typing import List\nsys.setrecursionlimit(99999)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mp = collections.defaultdict(int)\n    cnt = collections.defaultdict(int)\n    ans = 0\n    pre = 0\n    for (i, c) in enumerate(arr):\n        ans += mp[c] * (n - i)\n        mp[c] += i + 1\n        cnt[c] += 1\n    print(ans)", "def fun(n, ls):\n    dp = [0 for i in range(n)]\n    dct = {i: 0 for i in ls}\n    ans = 0\n    for i in range(n):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if ls[i] in dct.keys():\n            dp[i] += dct.get(ls[i])\n        dct[ls[i]] += i + 1\n        ans += dp[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(n, ls)"]