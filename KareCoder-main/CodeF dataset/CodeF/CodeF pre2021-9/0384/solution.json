["for i in range(int(input())):\n    (n, k) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    s = set(arr)\n    if len(s) > k:\n        print(-1)\n    else:\n        temp = ' '.join([str(i) for i in s] + ['1'] * (k - len(s)))\n        result = ''\n        print(n * k)\n        for i in range(n):\n            result += temp + ' '\n        print(result)", "from functools import lru_cache\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\n\ndef solution():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        syms = list(set(arr))\n        if len(syms) > k:\n            print('-1')\n            continue\n        syms += [1] * (k - len(syms))\n        res = (' '.join(map(str, syms)) + ' ') * n\n        print(n * k)\n        print(res)\nsolution()", "def main():\n    for i in range(int(input())):\n        (arrayLength, subArrayLength) = map(int, input().split())\n        array = input().split()\n        elements = set(array)\n        print(createBeautifulArray(arrayLength, subArrayLength, elements))\n\ndef createBeautifulArray(arrayLength, subArrayLength, elements):\n    nElements = len(elements)\n    if nElements > subArrayLength:\n        return -1\n    subArray = ' '.join(elements) + ' 1' * (subArrayLength - nElements)\n    return f\"{arrayLength * subArrayLength}\\n{' '.join((subArray,) * arrayLength)}\"\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    li = list(map(int, input().split(' ')))\n    dic = {}\n    for x in li:\n        dic[x] = 0\n    st = ''\n    for x in dic.keys():\n        st += str(x) + ' '\n    size = len(dic)\n    if size > k:\n        print(-1)\n    else:\n        print(n * k)\n        for x in range(n):\n            print(st, '1 ' * (k - size), end='', sep='')\n    print('')", "t = int(input())\nfor i in range(t):\n    l = []\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    di = {}\n    maxn = 0\n    for j in l:\n        di[j] = 1\n        maxn = max(maxn, j)\n    if len(di) > k:\n        print(-1)\n    else:\n        ll = list(di.keys())\n        while len(ll) < k:\n            ll.append(1)\n        print(n * k)\n        oder = ' '.join([str(i) for i in ll]) + ' '\n        print(oder * n)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = set(a)\n    s = ''\n    r = len(b)\n    for x in b:\n        s += str(x) + ' '\n    if len(b) > k:\n        print(-1)\n    else:\n        for i in range(k - len(b)):\n            s = s + '1' + ' '\n            r += 1\n        print(r * n)\n        print(s * n)", "def main():\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    dct = dict()\n    line = ''\n    items = ''\n    len_items = 0\n    for i in lst:\n        dct[i] = True\n    for i in dct:\n        items += str(i) + ' '\n        len_items += 1\n    if len(dct) > k:\n        print(-1)\n        return\n    while len_items < k:\n        items += '1 '\n        dct[1] = True\n        len_items += 1\n    for i in range(n):\n        line += items\n    print(k * n)\n    print(line)\nt = int(input())\nfor i in range(t):\n    main()", "num_test = int(input())\nfor i in range(num_test):\n    (n, k) = [int(x) for x in input().split()]\n    inp_arr_set = set(input().split())\n    nunique = len(inp_arr_set)\n    if k < nunique:\n        print(-1)\n    else:\n        print(k * n)\n        sub_str = ' '.join(inp_arr_set)\n        sub_str = f\"{sub_str}{' 1' * (k - nunique)}\"\n        print(f'{sub_str} ' * n)", "import math\nlol = math.sqrt(7)\nnum_test = int(input())\nfor i in range(num_test):\n    (n, k) = [int(x) for x in input().split()]\n    inp_arr_set = set(input().split())\n    nunique = len(inp_arr_set)\n    if k < nunique:\n        print(-1)\n    else:\n        print(k * n)\n        sub_str = ' '.join(inp_arr_set)\n        sub_str = f\"{sub_str}{' 1' * (k - nunique)}\"\n        print(f'{sub_str} ' * n)", "for i in range(int(input())):\n    (n, k) = input().split(' ')\n    (n, k) = (int(n), int(k))\n    A = set(input().split(' '))\n    if len(A) > k:\n        print(-1)\n    else:\n        print(k * n)\n        B = []\n        for i in A:\n            B += [i]\n        while len(B) < k:\n            B += ['1']\n        t = ''\n        for i in B:\n            t = t + i + ' '\n        print(t * n)", "T = int(input())\nfor tc in range(T):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = len(arr)\n    sarr = []\n    for i in arr:\n        if str(i) in sarr:\n            pass\n        else:\n            sarr.append(str(i))\n    if k < len(sarr):\n        print(-1)\n        continue\n    ext = k - len(sarr)\n    for i in range(ext):\n        sarr.append('1')\n    m = l * len(sarr)\n    sarr = sarr * l\n    print(m)\n    ars = ' '.join(sarr)\n    print(ars)", "t = int(input())\nfor x in range(t):\n    (n, k) = map(int, input().split(' '))\n    arr = map(int, input().split(' '))\n    build_arr = []\n    ref = list(set(arr))\n    if len(ref) > k:\n        print(-1)\n    else:\n        while len(ref) < k:\n            ref.append(1)\n        print(n * k)\n        print('%s ' % ' '.join((str(i) for i in ref)) * n)", "t = int(input())\nwhile t:\n    (n, k) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    Temp_list = []\n    for i in range(0, 101):\n        Temp_list.append(0)\n    for x in A:\n        Temp_list[x] += 1\n    diff = 0\n    temp_list2 = []\n    for i in range(0, 101):\n        if Temp_list[i] > 0:\n            diff += 1\n            temp_list2.append(i)\n    if diff > k:\n        print('-1')\n    else:\n        temp_str = ''\n        tempo = '1 '\n        i = 0\n        for x in temp_list2:\n            temp_str += str(x) + ' '\n            i += 1\n        temp_str = temp_str + (k - i) * tempo\n        ans = n * temp_str\n        print(n * k)\n        print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    l = list()\n    x = set()\n    flag = 0\n    s = ''\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(0, n):\n        x.add(a[i])\n    if len(x) > k:\n        print('-1')\n    elif len(x) == k:\n        print(n * k)\n        for i in x:\n            s = s + str(i) + ' '\n        print(s * n)\n    else:\n        print(n * k)\n        for i in range(k - len(x)):\n            s += '1 '\n        for i in x:\n            s = s + str(i) + ' '\n        print(s * n)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = set(l)\n    if k < len(p):\n        print(-1)\n        continue\n    else:\n        print(n * k)\n        p = list(p)\n        p.sort()\n        p.extend([1] * (k - len(p)))\n        s = ' '.join(map(str, p))\n        print((s + ' ') * n)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    Set = set(map(int, input().split()))\n    q = len(Set)\n    if q > k:\n        print(-1)\n    else:\n        li = list(Set)\n        st = ''\n        for i in li:\n            st = st + str(i) + ' '\n        st = st + '1 ' * (k - q)\n        st = st.rstrip()\n        print(k * n)\n        for i in range(n):\n            print(st, end=' ')\n        print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    table = [0 for _ in range(n + 1)]\n    for aa in a:\n        table[aa] += 1\n    elements = [x for x in range(1, n + 1) if table[x] != 0]\n    num = len(elements)\n    if num > k:\n        print(-1)\n    else:\n        print(k * n)\n        for i in range(k - num):\n            elements.append(1)\n        t = ' '.join(map(str, sorted(elements)))\n        ans = ''\n        for i in range(n):\n            ans += t\n            if i != n - 1:\n                ans += ' '\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(str, input().split()))\n    q = []\n    d = dict()\n    for i in a:\n        if i not in d:\n            d[i] = 1\n            q.append(i)\n    if len(q) > k:\n        print('-1')\n    else:\n        while len(q) < k:\n            q.append('1')\n        print(k * n)\n        for i in range(n):\n            print(' '.join(q), end=' ')\n        print()", "for _ in range(int(input())):\n    X = list(map(int, input().split()))\n    Numbers = list(map(int, input().split()))\n    Temp = X[1]\n    Sequence = []\n    MyDict = {}\n    MySet = list(sorted(set(Numbers), reverse=True))\n    Size = len(MySet)\n    Index = 0\n    while Temp != 0:\n        if Index == Size:\n            MyDict[1] = 1\n            Sequence.append(str(1))\n        else:\n            Sequence.append(str(MySet[Index]))\n            MyDict[MySet[Index]] = 1\n            Index += 1\n        Temp -= 1\n    Countinue = False\n    for i in Numbers:\n        if MyDict.get(i) == None:\n            Countinue = True\n            break\n    if Countinue:\n        print(-1)\n        continue\n    print(X[1] * X[0])\n    print((' '.join(Sequence) + ' ') * X[0])", "ts = int(input())\nfor _ in range(ts):\n    (n, k) = tuple([int(x) for x in input().split(' ')])\n    a = [int(x) for x in input().split(' ')]\n    sa = list(dict.fromkeys(a))\n    if len(sa) > k:\n        print(-1)\n        continue\n    if len(sa) < k:\n        nr = k - len(sa)\n        sa.extend([1] * nr)\n    print(len(sa) * n)\n    print(str(sa * n)[1:-1].replace(',', ''))", "import sys, os\nfrom math import sqrt, gcd, ceil, log, floor, sin, pi\nfrom math import factorial as fact\nfrom bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations\ninput = sys.stdin.readline\nread = lambda : list(map(int, input().strip().split()))\nMOD = 10 ** 9 + 7\n\ndef main():\n    ans_ = []\n    for _ in range(int(input())):\n        (n, k) = read()\n        arr = read()\n        c = Counter(arr)\n        arr = list(c.keys()) + [1] * (k - len(c))\n        if len(c) > k:\n            ans_.append(-1)\n        else:\n            ans_.append(n * k)\n            ans_.append(' '.join((' '.join(map(str, j)) for j in [arr for i in range(n)])))\n    for i in ans_:\n        print(i)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(v) for v in input().split()]\n    w = [int(v) for v in input().split()]\n    c = set(w)\n    if len(list(c)) > k:\n        print(-1)\n    else:\n        a = list(c)\n        res = []\n        y = len(a)\n        a += (k - y) * '1'\n        for j in range(n):\n            res.extend(a)\n        print(k * n)\n        print(' '.join([str(v) for v in res]))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sa = list(set(a))\n    if len(sa) > k:\n        print(-1)\n        continue\n    print(n * k)\n    ans = n * ([1] * (k - len(sa)) + [i for i in sa])\n    print(' '.join(map(str, ans)))", "T = int(input())\nfor t in range(T):\n    (N, K) = [int(_) for _ in input().split()]\n    A = [int(_) for _ in input().split()]\n    unique_nums = list(set(A))\n    if len(unique_nums) > K:\n        print(-1)\n        continue\n    sequence = unique_nums + [1] * (K - len(unique_nums))\n    M = sequence * len(A)\n    print(len(M))\n    print(' '.join(map(str, M)))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = len(a)\n    a = list(set(a))\n    unique = len(a)\n    if unique > k:\n        print(-1)\n    else:\n        print(k * l)\n        res = ' '.join(map(str, (a + [1] * (k - unique)) * l))\n        print(res)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(set(a))\n    if len(b) > k:\n        print('-1')\n    else:\n        if len(b) < k:\n            x = k - len(b)\n            b.extend([1] * x)\n        c = []\n        for j in range(n):\n            c.extend(b)\n        print(len(c))\n        c = list(map(str, c))\n        print(' '.join(c))", "T = int(input())\nfor t in range(T):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    numbers = set(a)\n    if len(numbers) > k:\n        print(-1)\n    else:\n        numbers = list(numbers)\n        numbers_set = set(numbers)\n        missing_number = 1\n        while len(numbers) != k:\n            numbers.append(missing_number)\n        res = numbers * n\n        print(len(res))\n        print(' '.join(list(map(str, res))))", "n = int(input())\nfor i in range(n):\n    (m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr_template = list(set(arr))\n    if len(arr_template) > k:\n        print(-1)\n        continue\n    arr_template += [1] * (k - len(arr_template))\n    ans = arr_template * len(arr)\n    print(len(ans))\n    print(' '.join(map(str, ans)))", "import sys\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, rl().split())\n    b = set(map(int, rl().split()))\n    if k < len(b):\n        print(-1)\n        return\n    print(n * k)\n    for _ in range(n):\n        print(' '.join(map(str, b)), end=' ')\n        print(' '.join(['1' for _ in range(k - len(b))]), end=' ')\n    print('')\nt = int(rl())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    nums = list(set(a))\n    if len(nums) > k:\n        print(-1)\n    else:\n        nums = nums + [1] * (k - len(nums))\n        print(len(nums) * len(a))\n        print(' '.join(map(str, nums * len(a))))", "def handle(a, n, k):\n    s = set(a)\n    if len(s) > k:\n        return None\n    c = list(s) + [1] * (k - len(s))\n    return c * n\ncases = int(input())\nfor t in range(cases):\n    (n, k) = map(int, input().split())\n    a = map(int, input().split())\n    h = handle(a, n, k)\n    if h is None:\n        print('-1')\n    else:\n        m = list(map(str, h))\n        print(len(m))\n        print(' '.join(m))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(set(map(int, input().split())))\n    l = len(arr)\n    if l > k:\n        print(-1)\n    else:\n        if l < k:\n            t = k - l\n            arr += [1] * t\n        print(n * k)\n        print(' '.join(map(str, arr * n)))", "def solve():\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    dist = set(arr)\n    result = []\n    if len(dist) > k:\n        print(-1)\n        return\n    for i in range(n):\n        result += list(dist)\n        for i in range(k - len(dist)):\n            result.append(1)\n    print(len(result))\n    print(' '.join(list(map(str, result))))\nt = int(input())\nfor i in range(t):\n    solve()", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = set(a)\n    b = list(b)\n    c = len(b)\n    if c > k:\n        print(-1)\n    else:\n        while c < k:\n            b.append(1)\n            c += 1\n        b = b * n\n        b = ' '.join((str(i) for i in b))\n        print(n * k)\n        print(b)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    nums = list(set(a))\n    if len(nums) > k:\n        print(-1)\n    else:\n        nums = nums + [1] * (k - len(nums))\n        print(len(nums) * len(a))\n        print(' '.join(map(str, nums * len(a))))", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    l2 = len(list(set(l)))\n    if l2 > k:\n        print(-1)\n    else:\n        l3 = list(set(l))\n        l4 = [1 for i in range(k - l2)]\n        l3 = l3 + l4\n        l3 = n * l3\n        print(len(l3))\n        print(' '.join((str(x) for x in l3)))\n    t -= 1", "def task(n, k, a):\n    table = {}\n    for value in a:\n        table[value] = True\n    if len(table.keys()) > k:\n        print(-1)\n        return\n    result = []\n    keys = list(table.keys())\n    keys_len = len(keys)\n    if keys_len < k:\n        for i in range(0, k - keys_len):\n            keys.append(1)\n    for value in a:\n        for key in keys:\n            result.append(key)\n    print(len(result))\n    print(' '.join(map(str, result)))\nt = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    task(n, k, a)", "def to_list(s):\n    return list(map(lambda x: int(x), s.split(' ')))\n\ndef solve(a, k):\n    if len(set(a)) <= k:\n        distinct_numbers = list(set(a))\n        while len(distinct_numbers) < k:\n            distinct_numbers.append(1)\n        result_array = distinct_numbers * len(a)\n        print(len(result_array))\n        print(' '.join(list(map(lambda x: str(x), result_array))))\n    else:\n        print(-1)\nt = int(input())\nfor i in range(t):\n    (n, k) = to_list(input())\n    a = to_list(input())\n    solve(a, k)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    distinct = len(set(arr))\n    if distinct > k:\n        print(-1)\n    else:\n        filler_copies = k - distinct\n        l = list(set(arr)) + [1] * filler_copies\n        total = l * n\n        print(n * k)\n        print(' '.join((str(x) for x in total)))", "import sys\nfrom collections import defaultdict\nfrom copy import copy\nR = lambda t=int: t(input())\nRL = lambda t=int: [t(x) for x in input().split()]\nRLL = lambda n, t=int: [RL(t) for _ in range(n)]\n\ndef solve():\n    (n, k) = RL()\n    A = RL()\n    x = sorted(set(A))\n    if len(x) > k:\n        print(-1)\n        return\n    x += [1] * (k - len(x))\n    x = sorted(x) * n\n    print(len(x))\n    print(' '.join(map(str, x)))\nT = R()\nfor _ in range(T):\n    solve()", "from sys import exit, stdin, stdout\nimport math\nfrom collections import Counter\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (n, k) = [int(i) for i in input().split()]\n        a = [int(i) for i in input().split()]\n        raz = Counter(a)\n        if len(raz.keys()) > k:\n            print(-1)\n            continue\n        kek = list(raz.keys())\n        while len(kek) < k:\n            kek.append(1)\n        arr = n * kek\n        print(len(arr))\n        print(' '.join([str(i) for i in arr]))\nmain()", "t = int(input())\nfor w in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = list(set(l))\n    if len(s) > k:\n        print(-1)\n    else:\n        u = []\n        for i in range(len(l)):\n            for j in range(len(s)):\n                u.append(str(s[j]))\n            for j in range(k - len(s)):\n                u.append(str(1))\n        lg = len(u)\n        f = ' '.join(u)\n        print(lg)\n        print(f)"]