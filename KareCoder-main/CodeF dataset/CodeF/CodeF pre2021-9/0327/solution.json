["def readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    a = sorted(readline())\n    b = sorted(readline())\n    q = n // 4\n    sa = sum(a[q:])\n    sb = sum(b[q:])\n    k = 0\n    while sa < sb:\n        k += 1\n        sa += 100\n        if (n + k) % 4 == 0:\n            sa -= a[q] if q < n else 100\n            q += 1\n        else:\n            sb += b[q - k] if q >= k else 0\n    print(k)\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        solve()\nmain()", "import sys\nimport math\ninput = sys.stdin.readline\nimp = 'IMPOSSIBLE'\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort(reverse=True)\n    b = list(map(int, input().split(' ')))\n    b.sort(reverse=True)\n    bs = sum(b)\n    kmax = n\n    kmin = 0\n    k = n // 2\n    while kmin < kmax:\n        top = n + k - math.floor((n + k) / 4)\n        if top >= n:\n            btop = bs\n        else:\n            btop = sum(b[:top])\n        atop = k * 100 + sum(a[:top - k])\n        if atop >= btop:\n            kmax = k\n            k = kmin + (kmax - kmin) // 2\n        else:\n            kmin = k + 1\n            k = kmin + (kmax - kmin) // 2\n    print(k)", "import math\nt = int(input())\nfor l in range(t):\n    n = int(input())\n    a = list(map(int, input().rstrip().split()))\n    b = list(map(int, input().rstrip().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    sa = sum(a[:k])\n    sb = sum(b[:k])\n    if sa >= sb:\n        print(0)\n    else:\n        count = 0\n        while sa < sb:\n            d = abs(sa - sb)\n            tmp = math.ceil(d / 100)\n            count += tmp\n            k = n + count - (n + count) // 4\n            if k > n:\n                sb = sum(b)\n            else:\n                sb = sum(b[:k])\n            if count >= k:\n                sa = 100 * k\n            else:\n                sa = count * 100 + sum(a[:k - count])\n        print(count)", "def pursuit(n, a, b):\n    k = n\n    calc = k - k // 4\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    scoreOfA = sum(a[:calc])\n    scoreOfB = sum(b[:calc])\n    if scoreOfA >= scoreOfB:\n        return 0\n    bl = calc\n    al = calc - 1\n    while scoreOfA < scoreOfB:\n        k += 1\n        if k % 4 == 0:\n            scoreOfA += 100 - a[al]\n            al -= 1\n        else:\n            scoreOfA += 100\n            if bl >= n:\n                pass\n            else:\n                scoreOfB += b[bl]\n                bl += 1\n    return k - n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(pursuit(n, a, b))", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().strip().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom math import ceil\nfor _ in range(rn()):\n    n = rn()\n    a = sorted(rl())\n    b = sorted(rl())\n    low = 0\n    high = n\n    ans = float('inf')\n    while low <= high:\n        mid = (low + high) // 2\n        take = ceil(3 * (n + mid) / 4)\n        c = mid * 100 + sum(a[n - (take - mid):])\n        d = sum(b[max(n - take, 0):])\n        if c >= d:\n            ans = min(ans, mid)\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b = list(map(int, input().split()))\n    b.sort(reverse=True)\n    k = n - n // 4\n    s1 = sum(a[0:k])\n    s2 = sum(b[0:k])\n    if s1 >= s2:\n        print(0)\n    else:\n        index = k - 1\n        nCopy = n\n        while s1 < s2:\n            n += 1\n            if n % 4:\n                s1 += 100\n                if k < nCopy:\n                    s2 += b[k]\n                    k += 1\n                continue\n            sum1 = a[index]\n            index -= 1\n            s1 += 100 - sum1\n        print(n - nCopy)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    lst1.sort(reverse=True)\n    lst2.sort(reverse=True)\n    lst1 = lst1[:n - n // 4]\n    c = 0\n    sa = sum(lst1)\n    sb = sum(lst2[:n - n // 4])\n    cb = n - n // 4\n    while True:\n        if sa >= sb:\n            break\n        else:\n            c += 1\n            if (n + c) % 4 != 0:\n                sa += 100\n                if cb < n:\n                    sb += lst2[cb]\n                    cb += 1\n            else:\n                sa += 100 - lst1[-1]\n                lst1.pop()\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    l = 0\n    r = n + (sum(b) - sum(a)) // 100\n    while l < r:\n        mid = (l + r) // 2\n        k = (mid + n) // 4\n        if k > n:\n            sm = (mid + n - k) * 100\n        else:\n            sm = mid * 100 + sum(a[:n - k])\n        k = mid + n - k\n        if sm >= sum(b[:min(k, n)]):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "import math\n\ndef isGood(mypoints, ilyapoints, numstages, numMore):\n    removal = numstages // 4\n    numZeroes = max(removal - numMore, 0)\n    return sum(mypoints[removal:]) + numMore * 100 >= sum(ilyapoints[numZeroes:])\n\ndef pursuit(mypoints, ilyapoints, numstages):\n    mypoints.sort()\n    ilyapoints.sort()\n    numMore = 0\n    total = 0\n    if isGood(mypoints, ilyapoints, numstages, numMore):\n        return 0\n    else:\n        while not isGood(mypoints, ilyapoints, numstages, numMore):\n            removal = numstages // 4\n            numZeroes = max(removal - numMore, 0)\n            howManyMore = sum(ilyapoints[numZeroes:]) - (sum(mypoints[removal:]) + numMore * 100)\n            howManyMore = int(math.ceil(howManyMore / 100))\n            numstages += howManyMore\n            numMore += howManyMore\n            total += howManyMore\n        return total\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mypoints = [int(x) for x in input().split()]\n    ilyapoints = [int(x) for x in input().split()]\n    print(pursuit(mypoints, ilyapoints, len(mypoints)))", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 10 ** 16\nmd = 10 ** 9 + 7\n\ndef solve():\n    n = II()\n    aa = LI()\n    bb = LI()\n    sa = [0]\n    for a in sorted(aa, reverse=True):\n        sa.append(sa[-1] + a)\n    sb = [0]\n    for a in sorted(bb, reverse=True):\n        sb.append(sb[-1] + a)\n\n    def ok(m):\n        k = n + m - (n + m) // 4\n        s = 100 * min(k, m) + sa[max(0, k - m)]\n        t = sb[min(n, k)]\n        return s >= t\n    (l, r) = (-1, n)\n    while l + 1 < r:\n        m = (l + r) // 2\n        if ok(m):\n            r = m\n        else:\n            l = m\n    print(r)\nfor testcase in range(II()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort()\n    b.sort()\n    k = n // 4\n    a_s = sum(a[k:])\n    b_s = sum(b[k:])\n    ans = 0\n    j = k - 1\n    while b_s > a_s:\n        n += 1\n        a_s += 100\n        if n % 4 == 0:\n            a_s -= a[k]\n            k += 1\n        elif j >= 0:\n            b_s += b[j]\n            j -= 1\n        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    m = n - n // 4\n    a_score = sum(a[:m])\n    b_score = sum(b[:m])\n    n2 = n\n    ja = m - 1\n    jb = m\n    while b_score > a_score:\n        n2 += 1\n        if n2 % 4 != 0:\n            a_score += 100\n            if jb < n:\n                b_score += b[jb]\n            jb += 1\n        else:\n            a_score += 100\n            if ja >= 0:\n                a_score -= a[ja]\n            ja -= 1\n    print(n2 - n)", "for i in range(int(input())):\n    n = int(input())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    a = int(n / 4)\n    s1 = sum(l1) - sum(l1[:a])\n    s2 = sum(l2) - sum(l2[:a])\n    b = a - 1\n    d = 0\n    while s1 < s2:\n        s1 += 100\n        d += 1\n        n += 1\n        if b > -1:\n            s2 += l2[b]\n        b -= 1\n        if n % 4 == 0 and a < n:\n            s1 -= l1[a]\n            a += 1\n            if b > -2:\n                b += 1\n                s2 -= l2[b]\n    print(d)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, a, b):\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    atot = 0\n    btot = 0\n    for i in range(k):\n        atot += a[i]\n    for i in range(k):\n        btot += b[i]\n    ans = 0\n    i = k\n    j = k - 1\n    m = n + 1\n    while atot < btot:\n        tmp = m - m // 4\n        if k == tmp:\n            if j >= 0:\n                atot -= a[j]\n            j -= 1\n        else:\n            if i < n:\n                btot += b[i]\n            i += 1\n        k = tmp\n        atot += 100\n        ans += 1\n        m += 1\n    print(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(int_arr())\n    b = sorted(int_arr())\n    solve(n, a, b)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = n - n // 4\n    nc = n\n    b.sort(reverse=True)\n    a.sort(reverse=True)\n    asum = sum(a[:i])\n    bsum = sum(b[:i])\n    bruh = i - 1\n    c = 0\n    z = i\n    while asum < bsum:\n        c += 1\n        if n % 4 == 3:\n            n += 1\n            asum += 100\n            if bruh > -1:\n                asum -= a[bruh]\n                bruh -= 1\n            else:\n                asum -= 100\n        else:\n            n += 1\n            asum += 100\n            if z < nc:\n                bsum += b[z]\n                z += 1\n    print(c)", "from sys import *\nfrom math import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    a = int_arr()\n    b = int_arr()\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    target = n - n // 4\n    sum_a = sum(a[:target])\n    sum_b = sum(b[:target])\n    ind1 = target\n    length = n\n    if sum_a >= sum_b:\n        print(0)\n    else:\n        ct = 0\n        while sum_a < sum_b:\n            sum_a += 100\n            ct += 1\n            n += 1\n            if n % 4 == 0:\n                target -= 1\n                sum_a -= a[target]\n            elif ind1 < length:\n                sum_b += b[ind1]\n                ind1 += 1\n        print(ct)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    l = n - n // 4\n    sa = sum(a[:l])\n    sb = sum(b[:l])\n    pointer = l - 1\n    pointer_b = l\n    c = 0\n    i = n + 1\n    while sb > sa:\n        c += 1\n        if i % 4 == 0:\n            if pointer >= 0:\n                sa -= a[pointer]\n                sa += 100\n                pointer -= 1\n            else:\n                i += 1\n                continue\n        else:\n            sa += 100\n            if pointer_b < n:\n                sb += b[pointer_b]\n                pointer_b += 1\n        i += 1\n    print(c)", "for i in range(int(input())):\n    size = int(input())\n    my_arr = sorted(list(map(int, input().split())))\n    his_arr = sorted(list(map(int, input().split())))\n    count = 0\n    leave = size // 4\n    my_arr = my_arr[leave:]\n    my_sum = sum(my_arr)\n    his_sum = sum(his_arr[leave:])\n    step = size % 4\n    case = -1\n    while my_sum < his_sum:\n        count += 1\n        step += 1\n        my_sum += 100\n        my_arr.append(100)\n        if step % 4 == 0:\n            case += 1\n            my_sum -= my_arr[case]\n        elif leave > 0:\n            leave -= 1\n            his_sum += his_arr[leave]\n    print(count)", "def main(n, a, b) -> int:\n    include = n - n // 4\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    score_a = sum(a[:include])\n    score_b = sum(b[:include])\n    included = include\n    total_stages_till_now = n\n    pointer_b = include\n    pointer_a = include - 1\n    while score_a < score_b:\n        total_stages_till_now += 1\n        include = total_stages_till_now - total_stages_till_now // 4\n        if include > included:\n            if pointer_b < n:\n                score_b += b[pointer_b]\n                pointer_b += 1\n            score_a += 100\n            included += 1\n        elif pointer_a >= 0:\n            score_a += 100 - a[pointer_a]\n            pointer_a -= 1\n        if pointer_b >= n and pointer_a < 0:\n            required = (score_b - score_a + 99) // 100\n            extra = 0\n            if required > 0:\n                if total_stages_till_now % 4 == 0:\n                    extra = 4 * required\n                else:\n                    extra = total_stages_till_now % 4 + 4 * (required - 1)\n            total_stages_till_now += extra\n            break\n    return total_stages_till_now - n\nt = int(input())\nans = []\nfor i in range(t):\n    N = int(input())\n    a = [int(i) for i in input().split(' ')]\n    b = [int(i) for i in input().split(' ')]\n    ans.append(main(N, a, b))\nfor i in ans:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c = c2 = n // 4\n    s1 = sum(a) - sum(a[0:c])\n    s2 = sum(b) - sum(b[0:c])\n    ans = 0\n    while s1 < s2:\n        s1 += 100\n        ans += 1\n        if c != 0 and (n + ans) % 4 != 0:\n            s2 += b[c - 1]\n            c -= 1\n        if (n + ans) % 4 == 0:\n            s1 -= a[c2]\n            c2 += 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    k = n // 4\n    x = sum(a[k:])\n    y = sum(b[k:])\n    j = k - 1\n    ans = 0\n    while x < y:\n        n += 1\n        x += 100\n        if n % 4 == 0:\n            x -= a[k]\n            k += 1\n        elif j >= 0:\n            y += b[j]\n            j -= 1\n        ans += 1\n    print(ans)", "t = int(input())\n\ndef solve(n, A, B):\n    A.sort()\n    B.sort()\n    k = int(n / 4)\n    j = k - 1\n    sumA = sum(A[k:])\n    sumB = sum(B[k:])\n    i = 0\n    while sumA < sumB:\n        i += 1\n        n += 1\n        sumA += 100\n        if n % 4 == 0:\n            k = int(n / 4) - 1\n            sumA -= A[k]\n            continue\n        if j >= 0:\n            sumB += B[j]\n        j -= 1\n    print(i)\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    solve(n, A, B)", "from collections import Counter, deque\nfrom math import *\nmod = 1000000007\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    k = n // 4\n    t1 = k\n    t2 = k - 1\n    temp = n\n    cur1 = sum(a[k:])\n    cur2 = sum(b[k:])\n    if cur1 >= cur2:\n        print(0)\n        return\n    count = 0\n    for i in range(ceil(sum(b) / 100)):\n        count += 1\n        if (temp + count) % 4 == 0:\n            cur1 -= a[t1]\n            t1 += 1\n            cur1 += 100\n        else:\n            cur1 += 100\n            if t2 >= 0:\n                cur2 += b[t2]\n                t2 -= 1\n        if cur1 >= cur2:\n            print(count)\n            return\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort()\n    b.sort()\n    k = n // 4\n    a_s = sum(a[k:])\n    b_s = sum(b[k:])\n    ans = 0\n    j = k - 1\n    while b_s > a_s:\n        n += 1\n        a_s += 100\n        if n % 4 == 0:\n            a_s -= a[k]\n            k += 1\n        elif j >= 0:\n            b_s += b[j]\n            j -= 1\n        ans += 1\n    print(ans)", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    brr.sort(reverse=True)\n    prefix_sum_arr = [arr[0]]\n    for i in range(1, n):\n        prefix_sum_arr += [prefix_sum_arr[-1] + arr[i]]\n    prefix_sum_brr = [brr[0]]\n    for i in range(1, n):\n        prefix_sum_brr += [prefix_sum_brr[-1] + brr[i]]\n    low = 0\n    up = 100000 + 1\n    ans = float('inf')\n    while low <= up:\n        mid = low + (up - low) // 2\n        stages = n + mid - (n + mid) // 4\n        my_score = 0\n        her_score = 0\n        if stages <= mid:\n            my_score = 100 * stages\n        else:\n            my_score = 100 * mid + prefix_sum_arr[stages - mid - 1]\n        if stages > n:\n            her_score = prefix_sum_brr[-1]\n        else:\n            her_score = prefix_sum_brr[stages - 1]\n        if my_score >= her_score:\n            up = mid - 1\n            ans = min(ans, mid)\n        else:\n            low = mid + 1\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "def bin(I, Ilya, n):\n    L = 0\n    R = n\n    while R - L != 1:\n        M = (R + L) // 2\n        k = n + M - (n + M) // 4\n        l = k - M\n        if M * 100 + sum(I[0:l]) >= sum(Ilya[0:k]):\n            R = M\n        else:\n            L = M\n    return R\nt = int(input())\nfor p in range(t):\n    n = int(input())\n    I = list(map(int, input().split()))\n    Ilya = list(map(int, input().split()))\n    I.sort(reverse=True)\n    Ilya.sort(reverse=True)\n    k = n - n // 4\n    if sum(I[0:k]) >= sum(Ilya[0:k]):\n        print(0)\n    else:\n        for i in range(n):\n            Ilya.append(0)\n        print(bin(I, Ilya, n))", "import sys\nimport math\n\ndef pro(arr, c):\n    n = len(arr)\n    arr.sort(reverse=True)\n    c.sort(reverse=True)\n    req = n - n // 4\n    curr = sum(arr[:req])\n    her = sum(c[:req])\n    j = req - 1\n    i = req - 1\n    ans = 0\n    while curr < her:\n        n += 1\n        if n % 4 == 0:\n            if i - 1 >= 0:\n                curr += 100 - arr[i]\n                i -= 1\n        else:\n            curr += 100\n            if j + 1 < len(c):\n                j += 1\n                her += c[j]\n        ans += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pro(arr, c)", "def smallNumAdd(n, my_point, iya_point):\n    my_point.sort(reverse=True)\n    iya_point.sort(reverse=True)\n    add_step = 0\n    total_stage = n\n    step = n - n // 4\n    (my_index, iya_index) = (step - 1, step)\n    (my_score, iya_score) = (0, 0)\n    for i in range(step):\n        my_score += my_point[i]\n        iya_score += iya_point[i]\n    while my_score < iya_score:\n        add_step += 1\n        total_stage += 1\n        new_stage = total_stage - total_stage // 4\n        if new_stage == step:\n            if my_index >= 0:\n                my_score -= my_point[my_index]\n                my_index -= 1\n                my_score += 100\n        else:\n            step = new_stage\n            my_score += 100\n            if iya_index <= n - 1:\n                iya_score += iya_point[iya_index]\n                iya_index += 1\n    print(add_step)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    my_point = list(map(int, input().split()))\n    iya_point = list(map(int, input().split()))\n    smallNumAdd(n, my_point, iya_point)", "def fun(a, b, n):\n    k = n // 4\n    a.sort()\n    b.sort(reverse=True)\n    idx_me = k\n    me = sum(a[idx_me:])\n    idx_you = n - k\n    you = sum(b[:idx_you])\n    r = 0\n    while me < you:\n        a.append(100)\n        b.append(0)\n        n += 1\n        me += 100\n        pre = k\n        k = n // 4\n        if k > pre:\n            idx_me += 1\n            me -= a[idx_me - 1]\n        else:\n            you += b[idx_you]\n            idx_you += 1\n        r += 1\n    return r\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(fun(a, b, n))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    su_a = sum(a[0:k])\n    su_b = sum(b[0:k])\n    p1 = k - 1\n    p2 = k\n    i = n + 1\n    c = 0\n    while su_a < su_b:\n        c += 1\n        if i % 4 == 0:\n            if p1 >= 0:\n                su_a -= a[p1]\n                su_a += 100\n                p1 -= 1\n        else:\n            su_a += 100\n            if p2 < n:\n                su_b += b[p2]\n                p2 += 1\n        i += 1\n    print(c)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    ap = [0] * (n + 1)\n    bp = [0] * (n + 1)\n    for i in range(n):\n        ap[i + 1] = ap[i] + a[i]\n        bp[i + 1] = bp[i] + b[i]\n    l = -1\n    r = n * 10\n    while r - l > 1:\n        c = (r + l) // 2\n        k = n + c\n        z = k - k // 4\n        u = c * 100 + ap[z - c]\n        v = bp[min(z, n)]\n        if u >= v:\n            r = c\n        else:\n            l = c\n    print(r)\nfor i in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    my = list(map(int, input().split()))\n    opp = list(map(int, input().split()))\n    my.sort()\n    opp.sort()\n    (myScore, oppScore, ans) = (0, 0, 0)\n    for i in range(n // 4, n):\n        myScore += my[i]\n        oppScore += opp[i]\n    myId = n // 4 - 1\n    oppId = n // 4 - 1\n    while myScore < oppScore:\n        n += 1\n        if n % 4 == 0:\n            myId += 1\n            if myId < n:\n                myScore -= my[myId]\n            else:\n                myScore -= 100\n        else:\n            if oppId >= 0:\n                oppScore += opp[oppId]\n            oppId -= 1\n        myScore += 100\n        ans += 1\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    b = sorted(map(int, input().split()))\n    num_exc = n // 4\n    rem = n % 4\n    sum_a = sum(a[num_exc:])\n    sum_b = sum(b[num_exc:])\n    a_pointer = num_exc\n    b_pointer = num_exc - 1\n    num_turns = 0\n    while sum_a < sum_b:\n        num_turns += 1\n        sum_a += 100\n        rem = (rem + 1) % 4\n        if rem == 0:\n            if a_pointer < n:\n                sum_a -= a[a_pointer]\n                a_pointer += 1\n            else:\n                sum_a -= 100\n        elif b_pointer >= 0:\n            sum_b += b[b_pointer]\n            b_pointer -= 1\n    print(num_turns)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr1.sort(reverse=True)\n    arr2 = list(map(int, input().split()))\n    arr2.sort(reverse=True)\n    k = n - n // 4\n    s1 = sum(arr1[0:k])\n    s2 = sum(arr2[0:k])\n    i = k - 1\n    j = k\n    res = 0\n    m = n\n    if s1 >= s2:\n        print(0)\n    else:\n        while s1 < s2:\n            res += 1\n            m += 1\n            s1 += 100\n            if m % 4 != 0 and j < n:\n                s2 += arr2[j]\n                j += 1\n            if m % 4 == 0 and i >= 0:\n                s1 -= arr1[i]\n                i -= 1\n        print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = ans = 0\n    ij = n // 4\n    id1 = n // 4 - 1\n    s1 = sum(a)\n    s2 = sum(b)\n    a.sort()\n    b.sort()\n    for i in range(ij):\n        s1 -= a[i]\n        s2 -= b[i]\n    if s2 > s1:\n        while s1 < s2:\n            n += 1\n            ans += 1\n            if n % 4 == 0:\n                s1 -= a[ij]\n                ij += 1\n                s1 += 100\n            else:\n                if id1 >= 0:\n                    s2 += b[id1]\n                    id1 -= 1\n                s1 += 100\n        print(ans)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = n // 4\n    a.sort()\n    b.sort()\n    s1 = sum(a)\n    s2 = sum(b)\n    for i in range(k):\n        s1 -= a[i]\n        s2 -= b[i]\n    if s1 >= s2:\n        print(0)\n    else:\n        m = k\n        q = k - 1\n        c = n\n        z = 0\n        ans = 0\n        while True:\n            if s1 >= s2:\n                break\n            s1 += 100\n            z += 1\n            if q >= 0:\n                s2 += b[q]\n                q -= 1\n            c += 1\n            if c // 4 > k:\n                k += 1\n                s1 -= a[m]\n                m += 1\n                if z < k:\n                    s2 -= b[q + 1]\n                    q += 1\n            ans += 1\n        print(ans)", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    ans = 0\n    i = k - 1\n    j = k\n    curr_a = sum(a[:k])\n    curr_b = sum(b[:k])\n    while curr_a < curr_b:\n        ans += 1\n        curr_a += 100\n        if i >= 0 and (ans + n) % 4 == 0:\n            curr_a -= a[i]\n            i -= 1\n        elif (ans + n) % 4 == 0 and i < 0:\n            curr_a -= 100\n        if j < len(b) and (not (ans + n) % 4 == 0):\n            curr_b += b[j]\n            j += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m.sort(reverse=True)\n    l.sort(reverse=True)\n    c = 0\n    k = n - n // 4\n    sm = sum(m[:k])\n    sl = sum(l[:k])\n    while sm < sl:\n        n += 1\n        sm += 100\n        if n % 4 == 0:\n            sm -= m[n - n // 4 - 1 - c]\n        elif n - n // 4 <= len(l):\n            sm -= l[n - n // 4 - 1]\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    a1.sort(reverse=True)\n    a2.sort(reverse=True)\n    k = n - n // 4\n    s1 = sum(a1[:k])\n    s2 = sum(a2[:k])\n    i = k - 1\n    j = k\n    c = 0\n    m = n\n    if s1 >= s2:\n        print(0)\n    else:\n        while s2 > s1:\n            c = c + 1\n            m = m + 1\n            s1 = s1 + 100\n            if m % 4 != 0 and j < n:\n                s2 = s2 + a2[j]\n                j = j + 1\n            elif m % 4 == 0 and i >= 0:\n                s1 = s1 - a1[i]\n                i = i - 1\n        print(c)", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    (a, b) = (list(I()), list(I()))\n    a = sorted(a)\n    b = sorted(b)\n    i = 1\n    da = {}\n    da[0] = 0\n    db = {}\n    db[0] = 0\n    k = 0\n    for (x, y) in zip(a, b):\n        da[i] = x + da[i - 1]\n        db[i] = y + db[i - 1]\n        i = i + 1\n    delta = da[n] - da[n // 4] - (db[n] - db[n // 4])\n    if delta < 0:\n        i = 1\n        j = n\n        jj = da[n] - db[n]\n        while j >= i and i < n + 1 and (j > 0):\n            k = (i + j) // 2\n            yy = (k + n) // 4\n            delta = jj - da[yy] + 100 * k\n            if yy > k:\n                delta = delta + db[yy - k]\n            if delta == 0:\n                print(k)\n                break\n            elif delta < 0:\n                i = k + 1\n            else:\n                j = k - 1\n        if delta < 0:\n            print(k + 1)\n        elif delta > 0:\n            print(k)\n    else:\n        print(0)", "def main():\n    a = int(input())\n    for i in range(a):\n        b = int(input())\n        m = sorted(map(int, input().split()))\n        m1 = sorted(map(int, input().split()))\n        sm = 0\n        sm1 = 0\n        m_res = [0]\n        m1_res = [0]\n        for j in range(b):\n            m_res.append(m_res[-1] + m[j])\n            m1_res.append(m1_res[-1] + m1[j])\n            sm += m[j]\n            sm1 += m1[j]\n        k = b // 4\n        d = 0\n        while sm - m_res[k] < sm1 - m1_res[k - d if k - d > 0 else 0]:\n            d += 1\n            sm += 100\n            k = (b + d) // 4\n        print(d)\nmain()", "import os\nimport random\nfrom sys import stdin, stdout\nrandom.seed()\n\ndef read():\n    return stdin.readline().strip()\n\ndef read_int():\n    return [int(i) for i in read().split()]\n\ndef write(s):\n    stdout.write(s)\n\ndef cal(a, v):\n    n = len(a)\n    if v - v // 4 <= v - n:\n        return (v - v // 4) * 100\n    else:\n        return (v - n) * 100 + a[n - v // 4 - 1]\nfor _ in range(int(read())):\n    (n,) = read_int()\n    a = read_int()\n    b = read_int()\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    if a[n - 1 - n // 4] >= b[n - 1 - n // 4]:\n        print(0)\n    else:\n        add = 262144\n        u = n\n        while add:\n            v = u + add\n            if cal(a, v) < b[min(n, v - v // 4) - 1]:\n                u += add\n            add >>= 1\n        print(u + 1 - n)", "from math import sqrt, ceil, floor\nimport sys\nimport heapq as h\nfrom collections import Counter, deque\nfrom collections import defaultdict as dd\n\ndef foo(x):\n    x = 0\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    inn = n + 1 - 1\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    a = a[:k]\n    A = sum(a)\n    h.heapify(a)\n    B = sum(b[:k])\n    b = [-x for x in b[k:]]\n    h.heapify(b)\n    steps = 0\n    while A < B:\n        steps += 1\n        n += 1\n        if n % 4:\n            A += 100\n        elif a:\n            x = h.heappop(a)\n            A -= x\n            A += 100\n        if b and n % 4:\n            x = -h.heappop(b)\n            B += x\n        else:\n            pass\n    print(steps)", "def top_count(k):\n    return k - k // 4\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(map(int, input().split()), reverse=True)\n    b = sorted(map(int, input().split()), reverse=True)\n    cur_count = top_count(n)\n    top_a = a[:cur_count]\n    top_b = b[:cur_count]\n    sum_a = sum(top_a)\n    sum_b = sum(top_b)\n    i = 0\n    while True:\n        n += 1\n        if sum_a >= sum_b:\n            break\n        new_count = top_count(n)\n        sum_a += 100\n        if new_count == cur_count:\n            sum_a -= top_a.pop()\n        else:\n            db = b[new_count - 1] if new_count <= len(b) else 0\n            sum_b += db\n        i += 1\n        cur_count = new_count\n    print(i)", "import math\nimport heapq\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    cura = 0\n    curb = 0\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    ori = n\n    k = n - n // 4\n    for i in range(k):\n        cura += a[i]\n        curb += b[i]\n    if cura >= curb:\n        print(0)\n        continue\n    save = []\n    i = k - 1\n    j = k\n    while cura < curb:\n        n += 1\n        if n % 4 > 0:\n            if j < len(b):\n                curb += b[j]\n                j += 1\n            cura += 100\n        else:\n            cura += 100\n            cura -= a[i]\n            i -= 1\n    print(n - ori)\n1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    sa = [0 for _ in range(n + 1)]\n    sb = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        sa[i] = sa[i - 1] + a[i - 1]\n        sb[i] = sb[i - 1] + b[i - 1]\n    st = n - n // 4\n    l = n\n    r = int(1000000000.0)\n    while l <= r:\n        mid = (l + r) // 2\n        tot = mid - mid // 4\n        if mid - n >= tot:\n            ra = tot * 100\n        else:\n            ra = (mid - n) * 100 + sa[tot - mid + n]\n        if tot > n:\n            rb = sb[n]\n        else:\n            rb = sb[tot]\n        if ra >= rb:\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(r - n + 1)", "def check(suffixA, suffixB, m):\n    k = n + m - (n + m) // 4\n    vb = suffixB[0] if k >= n else suffixB[n - k]\n    if k > m:\n        va = m * 100\n        k -= m\n        assert k <= n\n        if k != 0:\n            va += suffixA[n - k]\n    else:\n        va = k * 100\n    return va >= vb\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = [int(e) for e in input().split(' ')]\n    A.sort()\n    B = [int(e) for e in input().split(' ')]\n    B.sort()\n    k = n - n // 4\n    (sA, sB) = (sum(A[n - k:]), sum(B[n - k:]))\n    suffixA = [0] * n\n    suffixA[-1] = A[-1]\n    for i in range(n - 2, -1, -1):\n        suffixA[i] = suffixA[i + 1] + A[i]\n    suffixB = [0] * n\n    suffixB[-1] = B[-1]\n    for i in range(n - 2, -1, -1):\n        suffixB[i] = suffixB[i + 1] + B[i]\n    if sA >= sB:\n        print(0)\n    else:\n        (l, h) = (0, 10 ** 7)\n        while l < h:\n            m = (l + h) // 2\n            if check(suffixA, suffixB, m):\n                h = m\n            else:\n                l = m + 1\n        print(l if check(suffixA, suffixB, l) else h)", "import math\nimport heapq\nimport string\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nS = lambda : input()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    y = L()\n    l = L()\n    n1 = len(l)\n    y.sort()\n    l.sort()\n    k = n - n // 4\n    j = n - k\n    i = n - k - 1\n    s = sum(y[j:])\n    t = sum(l[j:])\n    while s < t:\n        n += 1\n        if n % 4 == 0:\n            if j < n1:\n                s += 100 - y[j]\n                j += 1\n        else:\n            s += 100\n            if i >= 0:\n                t += l[i]\n                i -= 1\n    print(n - n1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    v1 = n - n // 4\n    s1 = sum(a[n - v1:])\n    s2 = sum(b[n - v1:])\n    if s1 >= s2:\n        print(0)\n    else:\n        cnt = 0\n        flg = 0\n        while 1:\n            cnt += 1\n            a.append(100)\n            v2 = n + cnt - (n + cnt) // 4\n            if v2 > v1:\n                v1 = v2 + 0\n                if v1 > n:\n                    s1 += 100\n                    s2 += 0\n                    break\n                else:\n                    s1 += 100\n                    s2 += b[n - v1]\n                    if s1 >= s2:\n                        flg = 1\n                        break\n            else:\n                s1 += 100 - a[n + cnt - v1 - 1]\n                if s1 >= s2:\n                    flg = 1\n                    break\n        if flg == 1 or s1 >= s2:\n            print(cnt)\n        else:\n            while 1:\n                cnt += 1\n                a.append(100)\n                v2 = n + cnt - (n + cnt) // 4\n                if v2 > v1:\n                    v1 = v2 + 0\n                    s1 += 100\n                    if s1 >= s2:\n                        break\n                else:\n                    s1 += 100 - a[n + cnt - v1 - 1]\n                    if s1 >= s2:\n                        break\n            print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    n1 = n\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    res = 0\n    t = n - n // 4\n    s1 = sum(a[:t])\n    s2 = sum(b[:t])\n    i = t - 1\n    j = t\n    while s1 < s2:\n        n += 1\n        if n % 4 == 0:\n            if i >= 0:\n                s1 += 100 - a[i]\n                i -= 1\n        else:\n            s1 += 100\n            if j < n1:\n                s2 += b[j]\n                j += 1\n        res += 1\n    print(res)", "import math\nt = int(input())\nfor testcase in range(t):\n    n = int(input())\n    n_ = n\n    a = input().split()\n    b = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n        b[i] = int(b[i])\n    a = sorted(a, reverse=True)\n    b = sorted(b, reverse=True)\n    ptr = n - n // 4\n    ptr_ = ptr - 1\n    s1 = sum(a[:ptr])\n    s2 = sum(b[:ptr])\n    while s1 < s2:\n        n += 1\n        if n % 4 == 0:\n            if ptr_ >= 0:\n                s1 += 100 - a[ptr_]\n                ptr_ -= 1\n            continue\n        else:\n            s1 += 100\n            if ptr < n_:\n                s2 += b[ptr]\n                ptr += 1\n    print(n - n_)", "import math as m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = n - n // 4\n    a.sort()\n    b.sort()\n    aa = sum(a[n - x:])\n    bb = sum(b[n - x:])\n    c = b[:n - x]\n    c = c[::-1]\n    w = 0\n    y = 0\n    r = n - x\n    while aa < bb:\n        n += 1\n        x = n - n // 4\n        if n % 4 != 0:\n            aa += 100\n            if y < len(c):\n                bb += c[y]\n                y += 1\n        else:\n            aa += 100\n            aa -= a[r]\n            r += 1\n        w += 1\n    print(w)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = n - n // 4\n    nc = n\n    b.sort(reverse=True)\n    a.sort(reverse=True)\n    asum = sum(a[:i])\n    bsum = sum(b[:i])\n    bruh = i - 1\n    c = 0\n    z = i\n    while asum < bsum:\n        c += 1\n        if n % 4 == 3:\n            i = n - n // 4\n            asum += 100\n            if bruh > -1:\n                asum -= a[bruh]\n                bruh -= 1\n            else:\n                asum -= 100\n        else:\n            i = n - n // 4\n            asum += 100\n            if z < nc:\n                bsum += b[z]\n                z += 1\n        n += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = [int(i) for i in input().split(' ')]\n    l = [int(i) for i in input().split(' ')]\n    m.sort(reverse=True)\n    l.sort(reverse=True)\n    c = 0\n    sm = sum(m[:n - n // 4])\n    sl = sum(l[:n - n // 4])\n    while sm < sl:\n        n += 1\n        sm += 100\n        if n % 4 == 0:\n            sm -= m[n - n // 4 - 1 - c]\n        elif n - n // 4 <= len(l):\n            sl += l[n - n // 4 - 1]\n        c += 1\n    print(c)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = n - n // 4\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    sa = sum(a[:c])\n    sb = sum(b[:c])\n    ans = 0\n    while sa < sb:\n        n += 1\n        sa += 100\n        if n % 4 == 0:\n            sa -= a[n - n // 4 - ans - 1]\n        elif n - n // 4 <= len(b):\n            sb += b[n - n // 4 - 1]\n        ans += 1\n    print(ans)", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    b = list(read_ints())\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    sa = [0] * (n + 1)\n    sb = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sa[i] = sa[i - 1] + a[i - 1]\n        sb[i] = sb[i - 1] + b[i - 1]\n    l = 0\n    r = n * 3\n    while l <= r:\n        mid = (l + r) // 2\n        take = n + mid - (n + mid) // 4\n        raw = max(0, take - mid)\n        ca = sa[raw] + 100 * (take - raw)\n        cb = sb[min(n, take)]\n        if ca >= cb:\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(l)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m.sort(reverse=True)\n    l.sort(reverse=True)\n    c = 0\n    k = n - n // 4\n    sm = sum(m[:k])\n    sl = sum(l[:k])\n    while sm < sl:\n        n += 1\n        sm += 100\n        if n % 4 == 0:\n            sm -= m[n - n // 4 - 1 - c]\n        elif n - n // 4 <= len(l):\n            sm -= l[n - n // 4 - 1]\n        c += 1\n    print(c)", "from sys import stdin\nfrom heapq import heappush, heappop, heappushpop, heapreplace, heapify\nfrom math import ceil\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    heapify(a)\n    heapify(b)\n    temp = []\n    for i in range(n // 4):\n        heappop(a)\n        heappush(temp, -1 * heappop(b))\n    sa = sum(a)\n    sb = sum(b)\n    ans1 = n\n    while sa < sb:\n        sa += 100\n        ans1 += 1\n        heappush(a, 100)\n        if ans1 % 4 == 0:\n            sa -= heappop(a)\n        elif len(temp):\n            sb += -1 * heappop(temp)\n    print(ans1 - n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = sorted(list(map(int, input().split())))\n    ilya = sorted(list(map(int, input().split())))\n    con = n // 4\n    target = sum(ilya[con:])\n    s = sum(ar[con:])\n    skipped = con\n    skipped2 = con - 1\n    if target <= s:\n        print(0)\n    else:\n        c = 0\n        while True:\n            c += 1\n            n += 1\n            if n % 4 == 0:\n                s += 100\n                s -= ar[skipped]\n                skipped += 1\n            else:\n                s += 100\n                if skipped2 >= 0:\n                    target += ilya[skipped2]\n                    skipped2 -= 1\n            if target <= s:\n                print(c)\n                break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    b = list(map(int, input().split()))\n    b = sorted(b)\n    o = n\n    res = o // 4\n    last = res\n    id1 = res - 1\n    id2 = id1\n    s1 = 0\n    s2 = 0\n    for j in range(res, n):\n        s1 += a[j]\n        s2 += b[j]\n    c = 0\n    while s1 < s2:\n        c += 1\n        o += 1\n        res = o // 4\n        if res != last:\n            id1 += 1\n            if id1 < n:\n                s1 -= a[id1]\n            s1 += 100\n        else:\n            s1 += 100\n            if id2 > -1:\n                s2 += b[id2]\n                id2 -= 1\n        last = res\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    l.sort(reverse=True)\n    l1.sort(reverse=True)\n    a = sum(l[:n - n // 4])\n    b = sum(l1[:n - n // 4])\n    cnt = 0\n    while b > a:\n        n += 1\n        a += 100\n        if n % 4 == 0:\n            a -= l[n - n // 4 - 1 - cnt]\n        elif n - n // 4 <= len(l1):\n            b += l1[n - n // 4 - 1]\n        cnt += 1\n    print(cnt)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    yourpoints = [int(x) for x in input().split()]\n    theirpoints = [int(x) for x in input().split()]\n    yourpoints.sort(reverse=True)\n    theirpoints.sort(reverse=True)\n    temp = n - n // 4\n    location = temp\n    yoursum = 0\n    theirsum = 0\n    for i in range(temp):\n        yoursum += yourpoints[i]\n        theirsum += theirpoints[i]\n    step = 0\n    if yoursum >= theirsum:\n        print(step)\n    else:\n        while yoursum < theirsum:\n            step += 1\n            previous = temp\n            n += 1\n            temp = n - n // 4\n            if temp == previous:\n                yoursum -= yourpoints[location - 1]\n                location -= 1\n            elif temp <= len(theirpoints):\n                theirsum += theirpoints[temp - 1]\n            yoursum += 100\n            theirsum\n        print(step)", "casos = int(input())\n\ndef puntaje(lista, n):\n    q = 0\n    for i in range(n):\n        if i >= n // 4:\n            q += lista[i]\n    return q\nwhile casos > 0:\n    n = int(input())\n    rondas = 0\n    DIE = input().split()\n    DCC = input().split()\n    DIE = list(map(int, DIE))\n    DCC = list(map(int, DCC))\n    DCC.sort()\n    DIE.sort()\n    x = puntaje(DCC, n)\n    y = puntaje(DIE, n)\n    suma = x - y\n    r1 = n // 4\n    r3 = n // 4\n    while suma > 0:\n        n += 1\n        rondas += 1\n        if n % 4 == 0:\n            y += 100 - DIE[r1]\n            r1 += 1\n        else:\n            y += 100\n            if r3 > 0:\n                r3 -= 1\n                x += DCC[r3]\n        suma = x - y\n    casos -= 1\n    print(rondas)", "for i in range(int(input())):\n    n = int(input())\n    arr1 = sorted(list(map(int, input().split(' '))))\n    arr2 = sorted(list(map(int, input().split(' '))), reverse=True)\n    a = n - int(n / 4)\n    b = a\n    count = 0\n    sm1 = sum(arr1[-b:])\n    sm2 = sum(arr2[:b])\n    if sm1 >= sm2:\n        print(count)\n    else:\n        while sm1 < sm2:\n            n += 1\n            arr1.append(100)\n            arr2.append(0)\n            sm1 += 100\n            a = n - int(n / 4)\n            if a == b:\n                sm1 -= arr1[-b - 1]\n            else:\n                sm2 += arr2[b]\n            b = a\n            count += 1\n        print(count)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf\n\ndef scoreA(k):\n    if n <= k // 4:\n        return (k - k // 4) * 100\n    return (k - n) * 100 + a[n - k // 4]\n\ndef scoreB(k):\n    return b[min(k - k // 4, n)]\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    a = [0] + a\n    b = [0] + b\n    (lo, hi, ans) = (n, 1000000000, inf)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if scoreA(mid) >= scoreB(mid):\n            hi = mid - 1\n            ans = min(ans, mid)\n        else:\n            lo = mid + 1\n    print(ans - n)", "import math\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort()\n    b.sort()\n    aSum = 0\n    bSum = 0\n    for i in range(n // 4, n):\n        aSum += a[i]\n        bSum += b[i]\n    result = 0\n    diff = aSum - bSum\n    aPtr = n // 4\n    bPtr = n // 4\n    while diff < 0:\n        if n % 4 != 3:\n            bPtr -= 1\n            bI = b[bPtr] if bPtr >= 0 else 0\n            diff += 100 - bI\n        else:\n            aI = a[aPtr] if aPtr < n - result else 100\n            diff += 100 - aI\n            aPtr += 1\n        n += 1\n        result += 1\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    b = sorted(list(map(int, input().split())), reverse=True)\n    xa = sum(a[:n - int(n / 4)])\n    xb = sum(b[:n - int(n / 4)])\n    r = 0\n    while xb > xa:\n        n += 1\n        xa += 100\n        if n % 4 == 0:\n            xa -= a[n - int(n / 4) - 1 - r]\n        elif n - int(n / 4) <= len(b):\n            xb += b[n - int(n / 4) - 1]\n        r += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    b = sorted(list(map(int, input().split())), reverse=True)\n    xa = sum(a[:n - int(n / 4)])\n    xb = sum(b[:n - int(n / 4)])\n    r = 0\n    while xb > xa:\n        n += 1\n        xa += 100\n        if n % 4 == 0:\n            xa -= a[n - int(n / 4) - 1 - r]\n        elif n - int(n / 4) <= len(b):\n            xb += b[n - int(n / 4) - 1]\n        r += 1\n    print(r)", "casos = int(input())\n\ndef puntaje(lista, n):\n    q = 0\n    for i in range(n):\n        if i >= n // 4:\n            q += lista[i]\n    return q\nwhile casos > 0:\n    n = int(input())\n    rondas = 0\n    DIE = input().split()\n    DCC = input().split()\n    DIE = list(map(int, DIE))\n    DCC = list(map(int, DCC))\n    DCC.sort()\n    DIE.sort()\n    x = puntaje(DCC, n)\n    y = puntaje(DIE, n)\n    suma = x - y\n    r1 = n // 4\n    r2 = n // 4\n    while suma > 0:\n        n += 1\n        rondas += 1\n        if n % 4 == 0:\n            y += 100 - DIE[r1]\n            r1 += 1\n        else:\n            y += 100\n            if r2 > 0:\n                r2 -= 1\n                x += DCC[r2]\n        suma = x - y\n    casos -= 1\n    print(rondas)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    b.sort(key=lambda x: -x)\n    a.sort()\n    x = n - n // 4\n    sa = sum(a[-x:])\n    sb = sum(b[:x])\n    if sa >= sb:\n        print(0)\n        continue\n    an = 0\n    while sa < sb:\n        an += 1\n        n += 1\n        y = x\n        x = n - n // 4\n        a.append(100)\n        b.append(0)\n        if y == x:\n            sa += 100\n            sa -= a[-x - 1]\n        else:\n            sa += 100\n            sb += b[x - 1]\n    print(an)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ll = list(map(int, input().split()))\n    l.sort()\n    ll.sort()\n    bob = 0\n    llya = 0\n    xx = n - n // 4\n    c = 0\n    q = n\n    for i in range(n - 1, -1, -1):\n        bob += l[i]\n        llya += ll[i]\n        c += 1\n        if c == xx:\n            break\n    c = i - 1\n    ind = i\n    ans = 0\n    while llya > bob:\n        q += 1\n        ans += 1\n        ww = q - q // 4\n        if q % 4 == 0:\n            if ind < n:\n                bob -= l[ind]\n                bob += 100\n                ind += 1\n            continue\n        elif c < 0:\n            bob += 100\n        else:\n            bob += 100\n            llya += ll[c]\n            c -= 1\n        xx = ww\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort(reverse=True)\n    l = n // 4\n    pl = n // 4\n    x = sum(a[n // 4:])\n    y = 0\n    for j in range(n - l):\n        y += b[j]\n    yp = n - l\n    ans = 0\n    while x < y:\n        ans += 1\n        a.append(100)\n        b.append(0)\n        n += 1\n        cl = n // 4\n        x += 100\n        y += b[yp]\n        if cl > l:\n            x -= a[pl]\n            pl += 1\n            l = cl\n            y -= b[yp]\n        else:\n            yp += 1\n    print(ans)", "t = int(input())\nfor task in range(t):\n    n = int(input())\n    stageM = list(map(int, input().split()))\n    stageE = list(map(int, input().split()))\n    stageM.sort()\n    stageE.sort()\n    edgeM = edgeE = n // 4\n    scoreM = scoreE = 0\n    for i in range(edgeM, n):\n        scoreM += stageM[i]\n        scoreE += stageE[i]\n    res = 0\n    stages = n\n    while scoreM < scoreE:\n        stages += 1\n        res += 1\n        if stages % 4 == 0:\n            edgeM += 1\n            if edgeM < n + 1:\n                scoreM = scoreM + 100 - stageM[edgeM - 1]\n        else:\n            scoreM += 100\n            edgeE -= 1\n            if edgeE >= 0:\n                scoreE += stageE[edgeE]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort(reverse=True)\n    c = n - n // 4\n    (l, h) = (n - c, n)\n    s1 = sum(a[l:h])\n    s2 = sum(b[:c])\n    ans = 0\n    while s1 < s2:\n        a.append(100)\n        b.append(0)\n        n += 1\n        diff = n - n // 4\n        if c == diff:\n            s1 = s1 - a[l] + 100\n            l += 1\n        else:\n            s1 += 100\n            s2 += b[diff - 1]\n        c = diff\n        ans += 1\n    print(ans)", "def isHigh(val, ti=False):\n    turns = val - val // 4\n    huns = min(val - n, turns)\n    rem = turns - huns\n    c1 = huns * 100 + s1[rem]\n    tmp2 = min(n, turns)\n    c2 = s2[tmp2]\n    return c1 >= c2\n\ndef bs(l, r):\n    mid = (l + r) // 2\n    if isHigh(mid) and (not isHigh(mid - 1)):\n        return mid\n    if isHigh(mid):\n        return bs(l, mid - 1)\n    else:\n        return bs(mid + 1, r)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    brr.sort(reverse=True)\n    s1 = [0]\n    s2 = [0]\n    t1 = 0\n    t2 = 0\n    for i in range(n):\n        t1 += arr[i]\n        t2 += brr[i]\n        s1.append(t1)\n        s2.append(t2)\n    if isHigh(n):\n        print(0)\n    else:\n        ans = bs(n + 1, 2 * n)\n        print(ans - n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ll = list(map(int, input().split()))\n    l.sort()\n    ll.sort()\n    bob = 0\n    llya = 0\n    xx = n - n // 4\n    c = 0\n    q = n\n    for i in range(n - 1, -1, -1):\n        bob += l[i]\n        llya += ll[i]\n        c += 1\n        if c == xx:\n            break\n    c = i - 1\n    ind = i\n    ans = 0\n    while llya > bob:\n        q += 1\n        ans += 1\n        ww = q - q // 4\n        if ww == xx:\n            if ind < n:\n                bob -= l[ind]\n                bob += 100\n                ind += 1\n            continue\n        elif c < 0:\n            bob += 100\n        else:\n            bob += 100\n            llya += ll[c]\n            c -= 1\n        xx = ww\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    k = n - n // 4\n    l1.sort()\n    l2.sort()\n    mx1 = 0\n    mx2 = 0\n    for i in range(n - 1, n - k - 1, -1):\n        mx1 += l1[i]\n        mx2 += l2[i]\n    if mx1 >= mx2:\n        print(0)\n    else:\n        count = 0\n        tmp1 = k\n        i1 = n - k\n        i2 = n - k - 1\n        n1 = n\n        while mx1 < mx2:\n            n += 1\n            tmp2 = n - n // 4\n            count += 1\n            if tmp2 == tmp1 and i1 < n1:\n                mx1 -= l1[i1]\n                mx1 += 100\n                i1 += 1\n                tmp1 = tmp2\n                continue\n            elif tmp2 == tmp1:\n                continue\n            if i2 >= 0:\n                mx2 += l2[i2]\n                i2 -= 1\n            mx1 += 100\n            tmp1 = tmp2\n        print(count)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R()\n    b = R()\n    s = t = 0\n    for (x, y) in [*zip(a, b)][n // 4:]:\n        s += x\n        t += y\n    a += [100] * n\n    b = [0] * n + b\n    while s < t:\n        k = m // 4\n        m += 1\n        s += 100 - (m % 4 < 1) * a[k]\n        t += m % 4 and b[k - m]\n    print(m - n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    x = 0\n    y = 0\n    t = n - n // 4\n    for i in range(t):\n        x = x + a[i]\n        y = y + b[i]\n    i = 1\n    j = t\n    while x < y:\n        k = n + i\n        l = k - k // 4\n        x = x + 100\n        if k % 4 == 0:\n            if t >= 0:\n                x = x - a[t - 1]\n                t = t - 1\n            else:\n                x = x - 100\n        if l <= n:\n            if k % 4 != 0:\n                y = y + b[j]\n                j = j + 1\n        i = i + 1\n    print(i - 1)", "j = int(input())\nwhile j > 0:\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    L = [int(i) for i in input().split(' ')]\n    l.sort()\n    l.reverse()\n    L.sort()\n    L.reverse()\n    x = n - n // 4\n    s = sum(l[0:x])\n    S = sum(L[0:x])\n    if s >= S:\n        print(0)\n    else:\n        k = n + 1\n        a = 1\n        b = 1\n        while k > 0:\n            if k % 4 == 0:\n                s = s - l[x - a]\n                a = a + 1\n                if s + (k - n) * 100 >= S:\n                    print(k - n)\n                    break\n            elif n < x + b:\n                if s + (k - n) * 100 >= S:\n                    print(k - n)\n                    break\n            else:\n                S = S + L[x - 1 + b]\n                b = b + 1\n                if s + (k - n) * 100 >= S:\n                    print(k - n)\n                    break\n            k = k + 1\n    j = j - 1", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    s = t = 0\n    for (x, y) in [*zip((a := (R() + [100] * n)), (b := R()))][n // 4:]:\n        s += x\n        t += y\n    b = [0] * n + b\n    while s < t:\n        k = m // 4\n        m += 1\n        s += 100 - (m % 4 < 1) * a[k]\n        t += m % 4 and b[k - m]\n    print(m - n)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted([int(i) for i in input().split()])\n    b = sorted([int(i) for i in input().split()])\n    p = n // 4\n    s1 = sum(a[p:])\n    s2 = sum(b[p:])\n    c = 0\n    minus = 0\n    sumb = sum(b)\n    a = [0] + a + [0]\n    b = [0] + b + [0]\n    count = 0\n    if s1 >= s2:\n        print(0)\n        continue\n    while s1 < s2:\n        c += 1\n        s1 += 100\n        s2 += b[max(0, p - c + 1 + count)]\n        if (n + c) % 4 == 0:\n            minus += 1\n            s1 -= a[min(n, p + minus)]\n            s2 -= b[max(0, p - c + 1 + count)]\n            v = True\n            count += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    n4 = n\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    sa = 0\n    sb = 0\n    n1 = n - n // 4\n    n3 = n1\n    a = a[::-1]\n    b = b[::-1]\n    for i in range(n1):\n        sa += a[i]\n        sb += b[i]\n    p = n1 - 1\n    q = n1 - 1\n    while sa < sb:\n        n += 1\n        n2 = n - n // 4\n        if n1 == n2:\n            if p >= 0:\n                sa += 100 - a[p]\n                p -= 1\n            continue\n        n1 = n2\n        q += 1\n        if q >= n4:\n            b += [0]\n        sa += 100\n        sb += b[q]\n    print(n - n4)", "import collections\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    orig = n\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    k = n - n // 4\n    sa = 0\n    sb = 0\n    for i in range(k):\n        sa += a[i]\n        sb += b[i]\n    nstart = k\n    remover = k - 1\n    if sa >= sb:\n        print(0)\n    else:\n        ans = 0\n        while sb > sa:\n            ans += 1\n            n += 1\n            if nstart <= orig - 1:\n                sb += b[nstart]\n                nstart += 1\n            else:\n                b.append(0)\n                nstart += 1\n                sb += 0\n            sa += 100\n            if n % 4 == 0:\n                nstart -= 1\n                sb -= b[nstart]\n                sa -= a[remover]\n                remover -= 1\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    (l, r) = (-1, 10 ** 9)\n    while l + 1 < r:\n        m = (l + r) // 2\n        g = n + m - (n + m) // 4\n        rem = g - m - 1\n        if rem >= n:\n            rem = n - 1\n        s2 = b[min(n - 1, g - 1)]\n        s1 = 100 * min(m, g)\n        if rem >= 0:\n            s1 += a[rem]\n        if s1 >= s2:\n            r = m\n        else:\n            l = m\n    print(r)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R()\n    b = R()\n    s = t = 0\n    for (x, y) in [*zip(a, b)][n // 4:]:\n        s += x\n        t += y\n    while s < t:\n        k = m // 4\n        s += 100 - (m % 4 > 2 and (a[k:k + 1] or [100])[0])\n        t += m % 4 < 3 and (b[k - m - 1:k - m] or [0])[0]\n        m += 1\n    print(m - n)", "from collections import deque\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    my_arr = list(map(int, input().split()))\n    il_arr = list(map(int, input().split()))\n    my_arr.sort(reverse=True)\n    il_arr.sort(reverse=True)\n    sub = n - n // 4\n    my_var = deque()\n    sum_kol = 0\n    my_sum = il_sum = 0\n    for i in range(sub):\n        my_var.append(my_arr[i])\n        my_sum += my_arr[i]\n        il_sum += il_arr[i]\n        sum_kol += 1\n    count = 0\n    while il_sum > my_sum:\n        count += 1\n        sub = n + count - (n + count) // 4\n        if sub > len(my_var):\n            my_sum += 100\n            my_var.appendleft(100)\n            if sub <= n:\n                il_sum += il_arr[sub - 1]\n        else:\n            last = my_var.pop()\n            my_var.appendleft(100)\n            my_sum += 100 - last\n    print(count)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R() + [100] * n\n    b = [0] * n + R()\n    s = t = 0\n    for (x, y) in [*zip(a, b[n:])][n // 4:]:\n        s += x\n        t += y\n    while s < t:\n        k = m // 4\n        m += 1\n        s += 100 - (m % 4 < 1) * a[k]\n        t += m % 4 and b[k - m]\n    print(m - n)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    s = t = 0\n    for (x, y) in [*zip((a := (R() + [100] * n)), (b := R()))][n // 4:]:\n        s += x\n        t += y\n    b = [0] * n + b\n    while s < t:\n        k = m // 4\n        m += 1\n        s += 100 - (m % 4 < 1) * a[k]\n        t += m % 4 and b[k - m]\n    print(m - n)", "from sys import *\nfrom math import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    a = int_arr()\n    b = int_arr()\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    target = n - n // 4\n    sum_a = sum(a[:target])\n    sum_b = sum(b[:target])\n    ct = 0\n    (i, j) = (target, target - 1)\n    m = n + 1\n    while sum_a < sum_b:\n        tar = m - floor(m / 4)\n        if tar == target:\n            if j >= 0:\n                sum_a -= a[j]\n            j -= 1\n        else:\n            if i < n:\n                sum_b += b[i]\n            i += 1\n        target = tar\n        sum_a += 100\n        ct += 1\n        m += 1\n    print(ct)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R()\n    b = R()\n    s = t = 0\n    for (x, y) in [*zip(a, b)][n // 4:]:\n        s += x\n        t += y\n    b = b[::-1]\n    while s < t:\n        k = m // 4\n        s += 100 - (m % 4 > 2 and (a[k:k + 1] or [100])[0])\n        t += m % 4 < 3 and (b[m - k:m - k + 1] or [0])[0]\n        m += 1\n    print(m - n)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R()\n    b = R()\n    s = t = 0\n    for (x, y) in [*zip(a, b)][n // 4:]:\n        s += x\n        t += y\n    while s < t:\n        k = m // 4\n        s += 100 - (m % 4 > 2 and (a[k:k + 1] + [100])[0])\n        t += m % 4 < 3 and (b[k - m - 1:k - m] + [0])[0]\n        m += 1\n    print(m - n)", "R = lambda : sorted(map(int, input().split()))\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n\n    a = R()\n    b = R()\n    s = t = 0\n    for (x, y) in [*zip(a, b)][n // 4:]:\n        s += x\n        t += y\n    while s < t:\n        k = m // 4\n        m += 1\n        s += 100 - (m % 4 < 1 and [*a[k:k + 1], 100][0])\n        t += m % 4 and [*b[k - m:k - m + 1], 0][0]\n    print(m - n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    acum = a[:]\n    bcum = b[:]\n    for j in range(1, n):\n        acum[j] = acum[j - 1] + acum[j]\n        bcum[j] = bcum[j - 1] + bcum[j]\n    asum = acum[n - n // 4 - 1]\n    am = n - n // 4 - 1\n    bsum = bcum[n - n // 4 - 1]\n    bm = n - n // 4 - 1\n    c = 0\n    if asum >= bsum:\n        print(0)\n    else:\n        nt = n\n        while c == 0:\n            nt += 1\n            if nt % 4 == 0:\n                asum += 100 - a[am]\n                am -= 1\n            else:\n                asum += 100\n                if bm < n - 1:\n                    bm += 1\n                    bsum = bcum[bm]\n            if asum >= bsum:\n                print(nt - n)\n                c = 420691337", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    Me = list(map(int, input().split(' ')))\n    Li = list(map(int, input().split(' ')))\n    limit = n - n // 4\n    Me.sort(reverse=True)\n    me_pop = [Me[0]]\n    for i in range(1, n):\n        me_pop.append(me_pop[i - 1] + Me[i])\n    Li.sort(reverse=True)\n    lipop = [Li[0]]\n    for i in range(1, n):\n        lipop.append(lipop[i - 1] + Li[i])\n    x = me_pop[limit - 1]\n    y = lipop[limit - 1]\n    count = 0\n    while x < y:\n        count += 1\n        limit = n + count - (n + count) // 4\n        x = me_pop[limit - count - 1] + count * 100\n        if limit < n:\n            y = lipop[limit - 1]\n        else:\n            y = lipop[-1]\n    print(count)"]