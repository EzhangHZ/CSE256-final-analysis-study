["import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\nint1 = lambda x: int(x) - 1\n\ndef MI1():\n    return map(int1, sys.stdin.readline().split())\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\np2D = lambda x: print(*x, sep='\\n')\ndij = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\ndef main():\n    for _ in range(II()):\n        s = SI()\n        xx = set()\n        yy = set()\n        ans = 0\n        (x, y) = (0, 0)\n        for c in s:\n            if c == 'N':\n                if (x, y) in yy:\n                    ans += 1\n                else:\n                    ans += 5\n                yy.add((x, y))\n                y += 1\n            if c == 'S':\n                y -= 1\n                if (x, y) in yy:\n                    ans += 1\n                else:\n                    ans += 5\n                yy.add((x, y))\n            if c == 'E':\n                if (x, y) in xx:\n                    ans += 1\n                else:\n                    ans += 5\n                xx.add((x, y))\n                x += 1\n            if c == 'W':\n                x -= 1\n                if (x, y) in xx:\n                    ans += 1\n                else:\n                    ans += 5\n                xx.add((x, y))\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    x = 0\n    y = 0\n    c = 0\n    rc = 0\n    for j in s:\n        m = x\n        n = y\n        if j == 'N':\n            y += 1\n        elif j == 'S':\n            y -= 1\n        elif j == 'E':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, m, n) in d or (m, n, x, y) in d:\n            rc += 1\n        else:\n            c += 1\n            d[m, n, x, y] = 1\n    print(c * 5 + rc)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef si():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(ii()):\n        s = si()\n        xx = set()\n        yy = set()\n        ans = 0\n        (x, y) = (0, 0)\n        for c in s:\n            if c == 'N':\n                if (x, y) in yy:\n                    ans += 1\n                else:\n                    ans += 5\n                yy.add((x, y))\n                y += 1\n            if c == 'S':\n                y -= 1\n                if (x, y) in yy:\n                    ans += 1\n                else:\n                    ans += 5\n                yy.add((x, y))\n            if c == 'E':\n                if (x, y) in xx:\n                    ans += 1\n                else:\n                    ans += 5\n                xx.add((x, y))\n                x += 1\n            if c == 'W':\n                x -= 1\n                if (x, y) in xx:\n                    ans += 1\n                else:\n                    ans += 5\n                xx.add((x, y))\n        print(ans)\nmain()", "def solve(string):\n    (x, y) = (0, 0)\n    (x1, y1) = (0, 0)\n    s = set()\n    count = 0\n    for i in string:\n        if i == 'N':\n            y1 = y + 1\n        elif i == 'S':\n            y1 = y - 1\n        elif i == 'W':\n            x1 = x - 1\n        elif i == 'E':\n            x1 = x + 1\n        if (x, y, x1, y1) in s or (x1, y1, x, y) in s:\n            count += 1\n        else:\n            count += 5\n            s.add((x, y, x1, y1))\n        (x, y) = (x1, y1)\n    return count\nt = int(input())\nfor _ in range(t):\n    string = input()\n    print(solve(string))", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = 2 * x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        x = y - x\n        r += d.get(y, 5)\n        d[y] = 1\n    print(r)", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = 2 * x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        x = y - x\n        r += d.get(y, 5)\n        d[y] = 1\n    print(r)", "import sys\nt = int(sys.stdin.readline())\nfor j in range(t):\n    route = list(str(sys.stdin.readline()))\n    wasThere = dict()\n    cur_state = [0, 0]\n    time = int(0)\n    for direction in route:\n        if direction == 'N':\n            vec = ('y', cur_state[0], cur_state[1])\n            cur_state[1] += 1\n        elif direction == 'S':\n            vec = ('y', cur_state[0], cur_state[1] - 1)\n            cur_state[1] -= 1\n        elif direction == 'W':\n            vec = ('x', cur_state[0] - 1, cur_state[1])\n            cur_state[0] -= 1\n        elif direction == 'E':\n            vec = ('x', cur_state[0], cur_state[1])\n            cur_state[0] += 1\n        else:\n            continue\n        if vec in wasThere:\n            time += 1\n        else:\n            time += 5\n            wasThere[vec] = True\n    print(time)", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        p = x + y\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "dict = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\nfor _ in range(int(input())):\n    s = input()\n    st = set()\n    (x, y, ans) = (0, 0, 0)\n    for i in s:\n        x1 = x + dict[i][0]\n        y1 = y + dict[i][1]\n        if (x, y, x1, y1) in st or (x1, y1, x, y) in st:\n            ans += 1\n        else:\n            ans += 5\n            st.add((x, y, x1, y1))\n        (x, y) = (x1, y1)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    S = set()\n    count = 0\n    for i in range(len(s)):\n        x1 = x\n        y1 = y\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s[i] == 'E':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, x1, y1) in S or (x1, y1, x, y) in S:\n            count += 1\n        else:\n            count += 5\n            S.add((x1, y1, x, y))\n    print(count)", "def solve(str):\n    x = 0\n    y = 0\n    prevX = 0\n    prevY = 0\n    map = set([(x, y, prevX, prevY)])\n    time = 0\n    for c in str:\n        prevX = x\n        prevY = y\n        if c == 'N':\n            y = y + 1\n        elif c == 'S':\n            y = y - 1\n        elif c == 'W':\n            x = x - 1\n        elif c == 'E':\n            x = x + 1\n        if (x, y, prevX, prevY) in map or (prevX, prevY, x, y) in map:\n            time = time + 1\n        else:\n            time = time + 5\n        map.add((x, y, prevX, prevY))\n    return time\nt = int(input())\nfor i in range(0, t):\n    s = input()\n    print(solve(s))", "def solve(s):\n    visited = set()\n    time = 0\n    i_x = 0\n    i_y = 0\n    x = 0\n    y = 0\n    for i in s:\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'E':\n            x += 1\n        elif i == 'W':\n            x -= 1\n        if (i_x, i_y, x, y) in visited or (x, y, i_x, i_y) in visited:\n            time += 1\n        else:\n            visited.add((i_x, i_y, x, y))\n            time += 5\n        i_x = x\n        i_y = y\n    return time\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(solve(s))", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = 2 * x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        x = y - x\n        r += d.get(y, 5)\n        d[y] = 1\n    print(r)", "cases = int(input())\ntimes = []\nfor i in range(cases):\n    path = {(0, 0, 0)}\n    time = 0\n    (X, Y) = (0, 0)\n    paths = input()\n    for i in paths:\n        if i == 'N':\n            if (X, Y, 'N') in path or (X, Y + 1, 'S') in path:\n                time += 1\n            else:\n                time += 5\n                path.add((X, Y, 'N'))\n            Y += 1\n        elif i == 'S':\n            if (X, Y, 'S') in path or (X, Y - 1, 'N') in path:\n                time += 1\n            else:\n                time += 5\n                path.add((X, Y, i))\n            Y -= 1\n        elif i == 'E':\n            if (X, Y, i) in path or (X + 1, Y, 'W') in path:\n                time += 1\n            else:\n                time += 5\n                path.add((X, Y, i))\n            X += 1\n        else:\n            if (X, Y, i) in path or (X - 1, Y, 'E') in path:\n                time += 1\n            else:\n                time += 5\n                path.add((X, Y, i))\n            X -= 1\n    times.append(time)\nfor i in times:\n    print(i)", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = 2 * x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        x = y - x\n        r += d.get(y, 5)\n        d[y] = 1\n    print(r)", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = 2 * x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        x = y - x\n        r += d.get(y, 5)\n        d[y] = 1\n    print(r)", "import math\n\ndef tc():\n    s = input()\n    vis = set()\n    (x, y) = (0, 0)\n    time = 0\n    for d in s:\n        (dx, dy) = (0, 0)\n        if d == 'N':\n            dy = 0.5\n            y += 1\n        elif d == 'S':\n            dy = -0.5\n            y -= 1\n        elif d == 'E':\n            dx += 0.5\n            x += 1\n        else:\n            dx -= 0.5\n            x -= 1\n        mid = (x - dx, y - dy)\n        if mid in vis:\n            time += 1\n        else:\n            vis.add(mid)\n            time += 5\n    return time\nT = int(input())\nfor _ in range(T):\n    ans = tc()\n    print(ans)", "def solve():\n    s = input()\n    visited = set()\n    x = 0\n    y = 0\n    r = 0\n    for c in s:\n        current = (x, y)\n        if c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        elif c == 'W':\n            x -= 1\n        else:\n            x += 1\n        path = (current, (x, y))\n        r += 1 if path in visited else 5\n        visited.add(path)\n        visited.add(((x, y), current))\n    print(r)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (s, r, c, a, m) = (input(), 0, 0, 0, set())\n    for i in s:\n        if i == 'N':\n            i = (r, c, r, c + 1)\n            c += 1\n        elif i == 'S':\n            i = (r, c - 1, r, c)\n            c -= 1\n        elif i == 'W':\n            i = (r - 1, c, r, c)\n            r -= 1\n        elif i == 'E':\n            i = (r, c, r + 1, c)\n            r += 1\n        if i not in m:\n            a += 5\n            m.add(i)\n        else:\n            a += 1\n    print(a)", "dic = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\n\ndef solve(char):\n    (x, y, total) = (0, 0, 0)\n    path_bothdir = {}\n    for i in char:\n        cx = x + dic[i][0]\n        cy = y + dic[i][1]\n        total += min(path_bothdir.get((cx, cy, x, y), 5), path_bothdir.get((x, y, cx, cy), 5))\n        path_bothdir[cx, cy, x, y] = 1\n        x = cx\n        y = cy\n    return total\nt = int(input())\nout = []\nfor j in range(t):\n    char = input()\n    out.append(solve(char))\nfor m in out:\n    print(m)", "def f(s):\n    travel = set()\n    pos = [0, 0]\n    for i in s:\n        if i == 'N':\n            travel.add(1000000 * pos[0] + pos[1] + 1 / 2)\n            pos[1] += 1\n        elif i == 'S':\n            travel.add(1000000 * pos[0] + pos[1] - 1 / 2)\n            pos[1] -= 1\n        elif i == 'E':\n            travel.add(1000000 * pos[0] + 500000 + pos[1])\n            pos[0] += 1\n        else:\n            travel.add(1000000 * pos[0] - 500000 + pos[1])\n            pos[0] -= 1\n    x = len(s)\n    y = len(travel)\n    return x + 4 * y\nfor i in range(int(input())):\n    print(f(input()))", "for _ in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    b = {}\n    k = 0\n    for i in s:\n        (x1, y1) = (x, y)\n        if i == 'N':\n            y = y + 1\n        elif i == 'S':\n            y = y - 1\n        elif i == 'E':\n            x = x + 1\n        else:\n            x = x - 1\n        if (x, y, x1, y1) in b or (x1, y1, x, y) in b:\n            k = k + 1\n        else:\n            k = k + 5\n            b[x1, y1, x, y] = 1\n    print(k)", "for _ in range(int(input())):\n    (ans, px, py) = (0, 0, 0)\n    s = set()\n    for c in input():\n        (nx, ny) = (px, py)\n        if c == 'N':\n            nx += 1\n        if c == 'S':\n            nx += -1\n        if c == 'E':\n            ny += 1\n        if c == 'W':\n            ny += -1\n        ans += 1 if (px, py, nx, ny) in s else 5\n        s.add((px, py, nx, ny))\n        s.add((nx, ny, px, py))\n        (px, py) = (nx, ny)\n    print(ans)", "h = 7 ** 6\nfor s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = x + (1, -1, h, -h)['SNWE'.find(c)]\n        p = (x | y, x & y)\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "for s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        y = x + (1, -1, 7 ** 6, -7 ** 6)['SNWE'.find(c)]\n        p = (x | y, x & y)\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    d = {}\n    xf = 0\n    yf = 0\n    xi = 0\n    yi = 0\n    ans = 0\n    for i in input():\n        if i == 'N':\n            yf = yi + 1\n        elif i == 'S':\n            yf = yi - 1\n        elif i == 'E':\n            xf = 1 + xi\n        else:\n            xf = xi - 1\n        if (xf, yf, xi, yi) in d or (xi, yi, xf, yf) in d:\n            ans += 1\n        else:\n            d[xf, yf, xi, yi] = 1\n            ans += 5\n        xi = xf\n        yi = yf\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    d = {}\n    xf = 0\n    yf = 0\n    xi = 0\n    yi = 0\n    ans = 0\n    for i in input():\n        if i == 'N':\n            yf = yi + 1\n        elif i == 'S':\n            yf = yi - 1\n        elif i == 'E':\n            xf = 1 + xi\n        else:\n            xf = xi - 1\n        if (xf, yf, xi, yi) in d or (xi, yi, xf, yf) in d:\n            ans += 1\n        else:\n            d[xf, yf, xi, yi] = 1\n            ans += 5\n        xi = xf\n        yi = yf\n    print(ans)", "def direction_change(lst, i):\n    if i == 'N':\n        lst[0] += 1\n    elif i == 'S':\n        lst[0] -= 1\n    elif i == 'W':\n        lst[1] += 1\n    else:\n        lst[1] -= 1\n    return (lst[0], lst[1])\nfor k in range(int(input())):\n    ans = 0\n    st = set()\n    (x, y) = (0, 0)\n    s = input()\n    for i in s:\n        x1 = x\n        y1 = y\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'W':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, x1, y1) in st or (x1, y1, x, y) in st:\n            ans += 1\n        else:\n            ans += 5\n            st.add((x1, y1, x, y))\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    S = set()\n    count = 0\n    for i in range(len(s)):\n        x1 = x\n        y1 = y\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s[i] == 'E':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, x1, y1) in S or (x1, y1, x, y) in S:\n            count += 1\n        else:\n            count += 5\n            S.add((x1, y1, x, y))\n    print(count)", "def solve():\n    a = input()\n    x = 0\n    y = 0\n    W = set()\n    ans = 0\n    for i in range(len(a)):\n        px = x\n        py = y\n        if a[i] == 'W':\n            x -= 1\n        if a[i] == 'E':\n            x += 1\n        if a[i] == 'S':\n            y -= 1\n        if a[i] == 'N':\n            y += 1\n        par1 = (px, py)\n        par2 = (x, y)\n        if par1 < par2:\n            (par1, par2) = (par2, par1)\n        par3 = (par1, par2)\n        if par3 in W:\n            ans += 1\n        else:\n            ans += 5\n        W.add(par3)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "T = int(input())\nwhile T > 0:\n    d = {}\n    p = input().strip()\n    (x, y) = (0, 0)\n    ans = 0\n    for c in p:\n        if c == 'E':\n            if d.get((x, y, c)):\n                ans += 1\n            else:\n                ans += 5\n                d[x, y, c] = True\n                d[x, y + 1, 'W'] = True\n            y += 1\n        elif c == 'W':\n            if d.get((x, y, c)):\n                ans += 1\n            else:\n                ans += 5\n                d[x, y, c] = True\n                d[x, y - 1, 'E'] = True\n            y -= 1\n        elif c == 'N':\n            if d.get((x, y, c)):\n                ans += 1\n            else:\n                ans += 5\n                d[x, y, c] = True\n                d[x - 1, y, 'S'] = True\n            x -= 1\n        elif c == 'S':\n            if d.get((x, y, c)):\n                ans += 1\n            else:\n                ans += 5\n                d[x, y, c] = True\n                d[x + 1, y, 'N'] = True\n            x += 1\n    print(ans)\n    T -= 1", "h = 7 ** 6\nfor s in [*open(0)][1:]:\n    r = 0\n    x = 0\n    d = {}\n    for c in s[:-1]:\n        i = 'SNWE'.find(c)\n        y = x + (1, -1, h, -h)[i]\n        p = (x | y, x & y)\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "def solve():\n    a = input()\n    x = 0\n    y = 0\n    W = set()\n    ans = 0\n    for i in range(len(a)):\n        px = x\n        py = y\n        if a[i] == 'W':\n            x -= 1\n        if a[i] == 'E':\n            x += 1\n        if a[i] == 'S':\n            y -= 1\n        if a[i] == 'N':\n            y += 1\n        par1 = (px, py)\n        par2 = (x, y)\n        if par1 < par2:\n            (par1, par2) = (par2, par1)\n        par3 = (par1, par2)\n        if par3 in W:\n            ans += 1\n        else:\n            ans += 5\n        W.add(par3)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    s = input()\n    d = dict()\n    (x, y) = (0, 0)\n    d[0, 0, 0, 0] = 1\n    t = 0\n    for a in s:\n        if a == 'N':\n            if d.get((x, x, y, y + 1), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x, y, y + 1] = 1\n            y += 1\n        elif a == 'E':\n            if d.get((x, x + 1, y, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x + 1, y, y] = 1\n            x += 1\n        elif a == 'W':\n            if d.get((x - 1, x, y, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x - 1, x, y, y] = 1\n            x -= 1\n        else:\n            if d.get((x, x, y - 1, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x, y - 1, y] = 1\n            y -= 1\n    print(t)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    x = y = 0\n    d = {}\n    ans = 0\n    for i in input().rstrip('\\n'):\n        x1 = x\n        y1 = y\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'E':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, x1, y1) in d or (x1, y1, x, y) in d:\n            ans += 1\n        else:\n            ans += 5\n            d[x1, y1, x, y] = 'qed'\n    print(ans)", "import sys\nimport os\ndebug = True\nif debug and os.path.exists('input.in'):\n    input = open('input.in', 'r').readline\nelse:\n    input = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest_count = int(input())\nfor t in range(test_count):\n    moves = insr()\n    cost = 0\n    paths = set()\n    (startX, startY, endX, endY) = (0, 0, 0, 0)\n    for move in moves:\n        startX = endX\n        startY = endY\n        if move == 'N':\n            endY = startY + 1\n        elif move == 'S':\n            endY = startY - 1\n        elif move == 'E':\n            endX = startX + 1\n        else:\n            endX = startX - 1\n        segment1 = (startX, startY, endX, endY)\n        segment2 = (endX, endY, startX, startY)\n        if segment1 in paths or segment2 in paths:\n            cost += 1\n        else:\n            cost += 5\n            paths.add((startX, startY, endX, endY))\n    print(cost)", "for _ in range(int(input())):\n    (s, r, c, a, m) = (input(), 0, 0, 0, set())\n    for i in s:\n        if i == 'N':\n            i = (r, c, r, c + 1)\n            c += 1\n        elif i == 'S':\n            i = (r, c - 1, r, c)\n            c -= 1\n        elif i == 'W':\n            i = (r - 1, c, r, c)\n            r -= 1\n        elif i == 'E':\n            i = (r, c, r + 1, c)\n            r += 1\n        if i not in m:\n            a += 5\n            m.add(i)\n        else:\n            a += 1\n    print(a)", "N = int(input())\nfor _ in range(N):\n    S = input()\n    mp = set()\n    (i, j) = (0, 0)\n    total = 0\n    for c in S:\n        code = None\n        if c == 'N':\n            code = (i, j, 'v')\n            i -= 1\n        elif c == 'S':\n            code = (i + 1, j, 'v')\n            i += 1\n        elif c == 'W':\n            code = (i, j, 'h')\n            j -= 1\n        elif c == 'E':\n            code = (i, j + 1, 'h')\n            j += 1\n        if code in mp:\n            total += 1\n        else:\n            total += 5\n            mp.add(code)\n    print(total)", "def path(string):\n    blanck = set()\n    x = 0\n    y = 0\n    t = 0\n    (px, py) = (0, 0)\n    for i in string:\n        if i == 'N':\n            y += 1\n            if (px, py, x, y) not in blanck:\n                t += 5\n            else:\n                t += 1\n        if i == 'S':\n            y -= 1\n            if (px, py, x, y) not in blanck:\n                t += 5\n            else:\n                t += 1\n        if i == 'E':\n            x += 1\n            if (px, py, x, y) not in blanck:\n                t += 5\n            else:\n                t += 1\n        if i == 'W':\n            x -= 1\n            if (px, py, x, y) not in blanck:\n                t += 5\n            else:\n                t += 1\n        blanck.add((px, py, x, y))\n        blanck.add((x, y, px, py))\n        (px, py) = (x, y)\n    return t\nn = int(input())\nfor i in range(n):\n    print(path(input()))", "def test():\n    string = input()\n    visited = set()\n    (i, j) = (0, 0)\n    d = {'S': (0, -1), 'N': (0, 1), 'W': (-1, 0), 'E': (1, 0)}\n    sum_ = 0\n    for s in string:\n        next_i = i + d[s][0]\n        next_j = j + d[s][1]\n        sum_ += 1 if (i, j, next_i, next_j) in visited else 5\n        visited.add((i, j, next_i, next_j))\n        visited.add((next_i, next_j, i, j))\n        i = next_i\n        j = next_j\n    print(sum_)\nn = int(input())\nfor _ in range(n):\n    test()", "t = int(input())\nwhile t:\n    t -= 1\n    (ip, r, c, a, ua, sa) = (input(), 0, 0, 0, set(), set())\n    for d in ip:\n        if d == 'N':\n            tm = (r, c, c + 1)\n            if tm not in ua:\n                a += 5\n                ua.add(tm)\n            else:\n                a += 1\n            c += 1\n        elif d == 'S':\n            tm = (r, c - 1, c)\n            if tm not in ua:\n                a += 5\n                ua.add(tm)\n            else:\n                a += 1\n            c -= 1\n        elif d == 'W':\n            tm = (c, r - 1, r)\n            if tm not in sa:\n                a += 5\n                sa.add(tm)\n            else:\n                a += 1\n            r -= 1\n        elif d == 'E':\n            tm = (c, r, r + 1)\n            if tm not in sa:\n                a += 5\n                sa.add(tm)\n            else:\n                a += 1\n            r += 1\n    print(a)", "def skier(s):\n    store = set()\n    (x, y) = (0, 0)\n    for char in s:\n        if char == 'N':\n            store.add('{0} {1} - {2} {3}'.format(x, y, x, y + 1))\n            y += 1\n        elif char == 'S':\n            store.add('{0} {1} - {2} {3}'.format(x, y - 1, x, y))\n            y -= 1\n        elif char == 'E':\n            store.add('{0} {1} - {2} {3}'.format(x, y, x - 1, y))\n            x -= 1\n        elif char == 'W':\n            store.add('{0} {1} - {2} {3}'.format(x + 1, y, x, y))\n            x += 1\n    s_len = len(store)\n    result = s_len * 5 + (len(s) - s_len)\n    return result\nn = int(input())\nfor i in range(n):\n    line1 = input().strip()\n    print(skier(line1))", "for _ in range(int(input())):\n    s = input()\n    d = dict()\n    (x, y) = (0, 0)\n    d[0, 0, 0, 0] = 1\n    t = 0\n    for a in s:\n        if a == 'N':\n            if d.get((x, x, y, y + 1), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x, y, y + 1] = 1\n            y += 1\n        elif a == 'E':\n            if d.get((x, x + 1, y, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x + 1, y, y] = 1\n            x += 1\n        elif a == 'W':\n            if d.get((x - 1, x, y, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x - 1, x, y, y] = 1\n            x -= 1\n        else:\n            if d.get((x, x, y - 1, y), 0) == 0:\n                t += 5\n            else:\n                t += 1\n            d[x, x, y - 1, y] = 1\n            y -= 1\n    print(t)", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(test):\n    s = input()\n    (up, down, left, right) = (0, 0, 0, 0)\n    ans = 0\n    rec = {}\n    (hor, ver) = (0, 0)\n    for i in s:\n        og = (hor, ver)\n        if i == 'N':\n            ver += 1\n        elif i == 'S':\n            ver -= 1\n        elif i == 'E':\n            hor += 1\n        else:\n            hor -= 1\n        if (hor, ver, og[0], og[1]) in rec:\n            ans += 1\n        else:\n            rec[hor, ver, og[0], og[1]] = 1\n            rec[og[0], og[1], hor, ver] = 1\n            ans += 5\n    print(ans)\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "T = int(input())\nmov = [0] * T\nfor t in range(T):\n    mov[t] = input()\npmy = {'N': 1, 'S': -1, 'E': 0, 'W': 0}\npmx = {'N': 0, 'S': 0, 'E': 1, 'W': -1}\ndi = {'N': 0, 'S': 0, 'E': 1, 'W': 1}\nfor t in range(T):\n    x = 0\n    y = 0\n    poss = set([])\n    time = 0\n    for i in mov[t]:\n        nx = x + pmx[i]\n        ny = y + pmy[i]\n        if (nx, ny, x, y) in poss:\n            time += 1\n        else:\n            time += 5\n        poss.add((nx, ny, x, y))\n        poss.add((x, y, nx, ny))\n        x = nx\n        y = ny\n    print(time)", "for s in [*open(0)][1:]:\n    r = 0\n    x = (0, 0)\n    d = {}\n    for c in s[:-1]:\n        i = 'SNWE'.find(c)\n        y = (x[0] + (1, -1, 0, 0)[i], x[1] + (0, 0, 1, -1)[i])\n        p = (*sorted((x, y)),)\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "h = 7 ** 6\nfor s in [*open(0)][1:]:\n    r = x = 0\n    d = {}\n    for c in s[:-1]:\n        i = 'SNWE'.find(c)\n        y = x + (1, -1, h, -h)[i]\n        p = (x | y, x & y)\n        x = y\n        r += d.get(p, 5)\n        d[p] = 1\n    print(r)", "tc = int(input())\nfor _ in range(tc):\n    a = input()\n    setp = set()\n    x = y = ans = nx = ny = 0\n    for c in a:\n        if c == 'N':\n            nx = x + 1\n        if c == 'S':\n            nx = x - 1\n        if c == 'E':\n            ny = y + 1\n        if c == 'W':\n            ny = y - 1\n        if (x, y, nx, ny) in setp or (nx, ny, x, y) in setp:\n            ans += 1\n        else:\n            ans += 5\n            setp.add((x, y, nx, ny))\n        x = nx\n        y = ny\n    print(ans)", "def solve(s):\n    req_set = set(s)\n    if len(req_set) == 1:\n        return 5 * len(s)\n    req_list = list(s)\n    cost = 0\n    (x, y) = (0, 0)\n    (px, py) = (x, y)\n    path = {}\n    for i in range(len(req_list)):\n        if req_list[i] == 'N':\n            y += 1\n        elif req_list[i] == 'S':\n            y -= 1\n        elif req_list[i] == 'W':\n            x -= 1\n        else:\n            x += 1\n        if path.get(((px, py), (x, y))) or path.get(((x, y), (px, py))):\n            cost += 1\n        else:\n            path[(px, py), (x, y)] = 1\n            path[(x, y), (px, py)] = 1\n            cost += 5\n        (px, py) = (x, y)\n    return cost\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(solve(s))", "t = int(input())\nwhile t:\n    t -= 1\n    (ip, r, c, a, sa) = (input(), 0, 0, 0, set())\n    for d in ip:\n        if d == 'N':\n            tm = (r, c, r, c + 1)\n            c += 1\n        elif d == 'S':\n            tm = (r, c - 1, r, c)\n            c -= 1\n        elif d == 'W':\n            tm = (r - 1, c, r, c)\n            r -= 1\n        elif d == 'E':\n            tm = (r, c, r + 1, c)\n            r += 1\n        if tm not in sa:\n            a += 5\n            sa.add(tm)\n        else:\n            a += 1\n    print(a)", "for _ in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    myset = set()\n    ans = 0\n    for i in s:\n        sub = ((x, y),)\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'E':\n            x -= 1\n        else:\n            x += 1\n        sub += ((x, y),)\n        if sub in myset or sub[::-1] in myset:\n            ans += 1\n        else:\n            ans += 5\n            myset.add(sub)\n    print(ans)", "for i in range(int(input())):\n    a = input()\n    c = set()\n    d = (0, 0)\n    (f, e) = (0, (0, 0))\n    for i in a:\n        if i == 'S':\n            e = (d[0], d[1] - 1)\n        elif i == 'N':\n            e = (d[0], d[1] + 1)\n        elif i == 'E':\n            e = (d[0] + 1, d[1])\n        elif i == 'W':\n            e = (d[0] - 1, d[1])\n        if (d, e) in c or (e, d) in c:\n            f += 1\n        else:\n            c.add((d, e))\n            f += 5\n        d = e\n    print(f)", "def timeReq(s):\n    if s.count(s[0]) == len(s):\n        print(len(s) * 5)\n        return\n    x = 0\n    y = 0\n    ans = 0\n    positions = set()\n    for i in range(len(s)):\n        temp = (x, y)\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s[i] == 'W':\n            x -= 1\n        elif s[i] == 'E':\n            x += 1\n        if (temp, (x, y)) in positions:\n            ans += 1\n        else:\n            ans += 5\n        positions.add((temp, (x, y)))\n        positions.add(((x, y), temp))\n    print(ans)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        timeReq(input())\nmain()", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    x = 0\n    y = 0\n    ans = 0\n    for j in range(len(s)):\n        x1 = x\n        y1 = y\n        if s[j] == 'N':\n            y += 1\n        elif s[j] == 'S':\n            y -= 1\n        elif s[j] == 'W':\n            x -= 1\n        else:\n            x += 1\n        if (x1, y1, x, y) in d or (x, y, x1, y1) in d:\n            ans += 1\n        else:\n            ans += 5\n            d[x1, y1, x, y] = 1\n    print(ans)", "for i in range(int(input())):\n    coord = (0, 0)\n    m = {}\n    time = 0\n    direcs = list(input())\n    for d in direcs:\n        if d == 'N':\n            n_coord = (coord[0], coord[1] + 1)\n        elif d == 'W':\n            n_coord = (coord[0] - 1, coord[1])\n        elif d == 'E':\n            n_coord = (coord[0] + 1, coord[1])\n        elif d == 'S':\n            n_coord = (coord[0], coord[1] - 1)\n        if coord in m and n_coord in m[coord] or (n_coord in m and coord in m[n_coord]):\n            time += 1\n        else:\n            time += 5\n            if coord in m:\n                m[coord].append(n_coord)\n            elif n_coord in m:\n                m[n_coord].append(coord)\n            else:\n                m[coord] = [n_coord]\n        coord = n_coord\n    print(time)", "for i in range(int(input())):\n    st = input()\n    time = 0\n    a = (0, 0)\n    pos = set()\n    for item in st:\n        if item == 'N':\n            b = (a[0], a[1] + 1)\n        elif item == 'S':\n            b = (a[0], a[1] - 1)\n        elif item == 'W':\n            b = (a[0] - 1, a[1])\n        elif item == 'E':\n            b = (a[0] + 1, a[1])\n        if a + b in pos:\n            time += 1\n        else:\n            time += 5\n            pos.add(a + b)\n            pos.add(b + a)\n        a = b\n    print(time)", "for _ in range(int(input())):\n    (x, y) = (0, 0)\n    t = 0\n    myset = set()\n    directions = input()\n    for d in directions:\n        (x2, y2) = (x, y)\n        if d == 'N':\n            y2 += 1\n        elif d == 'S':\n            y2 -= 1\n        elif d == 'E':\n            x2 += 1\n        elif d == 'W':\n            x2 -= 1\n        if (x, y, x2, y2) in myset or (x2, y2, x, y) in myset:\n            t += 1\n        else:\n            t += 5\n        myset.add((x, y, x2, y2))\n        (x, y) = (x2, y2)\n    print(t)", "def skier(s):\n    x = 0\n    y = 0\n    v = set()\n    ans = 0\n    for i in s:\n        (px, py) = (x, y)\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'E':\n            x += 1\n        else:\n            x -= 1\n        if ((px, py), (x, y)) in v or ((x, y), (px, py)) in v:\n            ans += 1\n        else:\n            ans += 5\n            v.add(((px, py), (x, y)))\n            v.add(((x, y), (px, py)))\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(skier(input()))", "t = int(input())\nfor _ in range(t):\n    moves = input()\n    paths = set()\n    current_pos = (0, 0)\n    meter = 0\n    for move in moves:\n        delta = (0, 0)\n        if move == 'N':\n            delta = (0, 1)\n        if move == 'S':\n            delta = (0, -1)\n        if move == 'W':\n            delta = (-1, 0)\n        if move == 'E':\n            delta = (1, 0)\n        next_pos = (current_pos[0] + delta[0], current_pos[1] + delta[1])\n        path = (current_pos, next_pos)\n        reverse_path = (next_pos, current_pos)\n        current_pos = next_pos\n        if path in paths:\n            meter += 1\n        else:\n            meter += 5\n        paths.add(path)\n        paths.add(reverse_path)\n    print(meter)", "import sys\nimport heapq as hq\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    s = ns()\n    d = dict()\n    cnt = 0\n    g = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    cur = (0, 0)\n    d[cur] = ''\n    for x in s:\n        for i in range(4):\n            if x == 'NEWS'[i]:\n                nx = (cur[0] + g[i][0], cur[1] + g[i][1])\n                if nx in d and x in d[cur]:\n                    cnt += 1\n                else:\n                    cnt += 5\n                    if nx not in d:\n                        d[nx] = ''\n                    d[nx] += 'NEWS'[3 - i]\n                    d[cur] += x\n                cur = nx\n                break\n    print(cnt)\nT = ni()\nfor _ in range(T):\n    solve()", "T = int(input())\nfor _ in range(T):\n    strx = input()\n    vis = {}\n    ans = 0\n    (x, y) = (0, 0)\n    for z in strx:\n        if z == 'S':\n            (nx, ny) = (x + 1, y)\n        elif z == 'N':\n            (nx, ny) = (x - 1, y)\n        elif z == 'W':\n            (nx, ny) = (x, y - 1)\n        else:\n            (nx, ny) = (x, y + 1)\n        (t1, t2) = ((x, y), (nx, ny))\n        if t1 > t2:\n            k = t1\n            t1 = t2\n            t2 = k\n        if (t1, t2) in vis:\n            ans += 1\n        else:\n            ans += 5\n        (x, y) = (nx, ny)\n        vis[t1, t2] = 1\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        s = list(input())\n        (x, y, su) = (0, 0, 0)\n        s1 = set()\n        for i in s:\n            if i == 'N' and (x, y, x + 1, y) not in s1:\n                x += 1\n                su += 5\n                s1.add((x - 1, y, x, y))\n                s1.add((x, y, x - 1, y))\n            elif i == 'N':\n                x += 1\n                su += 1\n            elif i == 'S' and (x, y, x - 1, y) not in s1:\n                x -= 1\n                su += 5\n                s1.add((x + 1, y, x, y))\n                s1.add((x, y, x + 1, y))\n            elif i == 'S':\n                x -= 1\n                su += 1\n            elif i == 'E' and (x, y, x, y + 1) not in s1:\n                y += 1\n                su += 5\n                s1.add((x, y - 1, x, y))\n                s1.add((x, y, x, y - 1))\n            elif i == 'E':\n                y += 1\n                su += 1\n            if i == 'W' and (x, y, x, y - 1) not in s1:\n                y -= 1\n                su += 5\n                s1.add((x, y + 1, x, y))\n                s1.add((x, y, x, y + 1))\n            elif i == 'W':\n                y -= 1\n                su += 1\n        print(su)\nmain()", "for _ in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    d = {'N': (1, 0), 'S': (-1, 0), 'W': (0, 1), 'E': (0, -1)}\n    rs = 0\n    vst = set()\n    for i in s:\n        u = x + d[i][0]\n        v = y + d[i][1]\n        if (x, y, u, v) in vst:\n            rs += 1\n        else:\n            rs += 5\n            vst.add((x, y, u, v))\n            vst.add((u, v, x, y))\n        (x, y) = (u, v)\n    print(rs)", "def answer(s):\n    x = 0\n    y = 0\n    d = {}\n    time = 0\n    for i in range(len(s)):\n        if s[i] == 'E':\n            k = [x, y]\n            t = [x, y]\n            x += 1\n            k = tuple(k + [x, y])\n            t = tuple([x, y] + t)\n            if k in d or t in d:\n                time += 1\n            else:\n                time += 5\n                d[k] = 1\n                d[t] = 1\n        elif s[i] == 'W':\n            k = [x, y]\n            t = [x, y]\n            x -= 1\n            k = tuple(k + [x, y])\n            t = tuple([x, y] + t)\n            if k in d or t in d:\n                time += 1\n            else:\n                time += 5\n                d[k] = 1\n                d[t] = 1\n        elif s[i] == 'N':\n            k = [x, y]\n            t = [x, y]\n            y += 1\n            k = tuple(k + [x, y])\n            t = tuple([x, y] + t)\n            if k in d or t in d:\n                time += 1\n            else:\n                time += 5\n                d[k] = 1\n                d[t] = 1\n        elif s[i] == 'S':\n            k = [x, y]\n            t = [x, y]\n            y -= 1\n            k = tuple(k + [x, y])\n            t = tuple([x, y] + t)\n            if k in d or t in d:\n                time += 1\n            else:\n                time += 5\n                d[k] = 1\n                d[t] = 1\n    return time\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(answer(s))", "for _ in range(int(input())):\n    l = set()\n    a = (0, 0)\n    c = 0\n    for i in input():\n        if i == 'N':\n            b = (a[0], a[1] + 1)\n        elif i == 'W':\n            b = (a[0] - 1, a[1])\n        elif i == 'S':\n            b = (a[0], a[1] - 1)\n        elif i == 'E':\n            b = (a[0] + 1, a[1])\n        if a + b not in l:\n            c += 5\n        else:\n            c += 1\n        l.add(a + b)\n        l.add(b + a)\n        a = b\n    print(c)", "for _ in range(int(input())):\n    s = input()\n    time = 0\n    pos = set()\n    a = (0, 0)\n    for item in s:\n        if item == 'N':\n            b = (a[0], a[1] + 1)\n        elif item == 'S':\n            b = (a[0], a[1] - 1)\n        elif item == 'E':\n            b = (a[0] + 1, a[1])\n        elif item == 'W':\n            b = (a[0] - 1, a[1])\n        if a + b in pos:\n            time += 1\n        else:\n            time += 5\n            pos.add(a + b)\n            pos.add(b + a)\n        a = b\n    print(time)", "dic = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\nt = int(input())\nfor i in range(t):\n    s = input()\n    s1 = set()\n    (x, y, t) = (0, 0, 0)\n    for j in s:\n        x1 = x + dic[j][0]\n        y1 = y + dic[j][1]\n        if (x, y, x1, y1) in s1 or (x1, y1, x, y) in s1:\n            t += 1\n        else:\n            t += 5\n            s1.add((x, y, x1, y1))\n        (x, y) = (x1, y1)\n    print(t)", "from collections import defaultdict\n\ndef solve():\n    dp = defaultdict(lambda : 5)\n    string = input()\n    ans = 0\n    x = 0\n    y = 0\n    x1 = 0\n    y1 = 0\n    for char in string:\n        if char == 'N':\n            x1 += 1\n        elif char == 'S':\n            x1 -= 1\n        elif char == 'E':\n            y1 += 1\n        else:\n            y1 -= 1\n        getValue = dp[x, y, x1, y1]\n        ans += getValue\n        if getValue == 5:\n            dp[x, y, x1, y1] = 1\n            dp[x1, y1, x, y] = 1\n        x = x1\n        y = y1\n    del dp\n    return ans\nt = int(input())\nfor i in range(t):\n    print(solve())", "dir = {'N': (1, 0), 'S': (-1, 0), 'E': (0, -1), 'W': (0, 1)}\nfor i in range(int(input())):\n    (x, y) = (0, 0)\n    s = set()\n    r = 0\n    for c in input():\n        (dx, dy) = dir[c]\n        m = (x + dx, y + dy)\n        if m in s:\n            r += 1\n        else:\n            r += 5\n        s.add(m)\n        x += dx * 2\n        y += dy * 2\n    print(r)", "for T in range(int(input())):\n    paths = set()\n    x_coord = 0\n    y_coord = 0\n    directions = input()\n    time = 0\n    for dir in directions:\n        if dir == 'N':\n            path = ((x_coord, y_coord), (x_coord, y_coord + 1))\n            y_coord += 1\n        elif dir == 'S':\n            path = ((x_coord, y_coord), (x_coord, y_coord - 1))\n            y_coord -= 1\n        elif dir == 'E':\n            path = ((x_coord, y_coord), (x_coord + 1, y_coord))\n            x_coord += 1\n        elif dir == 'W':\n            path = ((x_coord, y_coord), (x_coord - 1, y_coord))\n            x_coord -= 1\n        inv_path = (path[1], path[0])\n        if path in paths or inv_path in paths:\n            time += 1\n        else:\n            time += 5\n            paths.add(path)\n    print(time)", "shift = {'S': (0, -1), 'N': (0, 1), 'W': (-1, 0), 'E': (1, 0)}\nfor _ in range(int(input())):\n    coords = {}\n    (x, y) = (0, 0)\n    time = 0\n    for symbol in input():\n        (dx, dy) = (x + shift[symbol][0], y + shift[symbol][1])\n        time += min(coords.get((x, y, dx, dy), 5), coords.get((dx, dy, x, y), 5))\n        coords[x, y, dx, dy] = 1\n        (x, y) = (dx, dy)\n    print(time)", "DIR = {'N': (0, 1), 'S': (0, -1), 'W': (-1, 0), 'E': (1, 0)}\nfor t in range(int(input())):\n    path = input()\n    tracks = set()\n    (x, y) = (0, 0)\n    time = 0\n    for char in path:\n        x1 = x + DIR[char][0]\n        y1 = y + DIR[char][1]\n        if (x, y, x1, y1) in tracks or (x1, y1, x, y) in tracks:\n            time += 1\n        else:\n            time += 5\n            tracks.add((x, y, x1, y1))\n        (x, y) = (x1, y1)\n    print(time)", "t = int(input())\nfor i in range(t):\n    s = input()\n    path = set()\n    start = (0, 0)\n    ans = 0\n    for c in s:\n        if c == 'S':\n            end = (start[0], start[1] - 1)\n        elif c == 'N':\n            end = (start[0], start[1] + 1)\n        elif c == 'W':\n            end = (start[0] - 1, start[1])\n        else:\n            end = (start[0] + 1, start[1])\n        if (start, end) in path or (end, start) in path:\n            ans += 1\n        else:\n            ans += 5\n            path.add((start, end))\n        start = end\n    print(ans)", "for s in [*open(0)][1:]:\n    rx = 0\n    x = (0, 0)\n    d = {}\n    for c in s[:-1]:\n        i = 'SNWE'.find(c)\n        y = (x[0] + (1, -1, 0, 0)[i], x[1] + (0, 0, 1, -1)[i])\n        p = (*sorted((x, y)),)\n        x = y\n        rx += d.get(p, 5)\n        d[p] = 1\n    print(rx)", "T = int(input())\nfor t in range(T):\n    tmp = input()\n    d = dict()\n    (x, y) = (0, 0)\n    tim = 0\n    for direction in tmp:\n        (x0, y0) = (x, y)\n        if direction == 'N':\n            y += 1\n        elif direction == 'S':\n            y -= 1\n        elif direction == 'W':\n            x -= 1\n        elif direction == 'E':\n            x += 1\n        else:\n            continue\n        if ((x, y), (x0, y0)) in d or ((x0, y0), (x, y)) in d:\n            tim += 1\n        else:\n            tim += 5\n            d[(x0, y0), (x, y)] = 1\n    print(tim)", "num_lines = int(input())\nfor _ in range(num_lines):\n    d = input()\n    c = 0\n    points = set()\n    start_point = (0, 0)\n    for s in d:\n        if s == 'N':\n            end_point = (start_point[0] + 1, start_point[1])\n        if s == 'S':\n            end_point = (start_point[0] - 1, start_point[1])\n        if s == 'W':\n            end_point = (start_point[0], start_point[1] + 1)\n        if s == 'E':\n            end_point = (start_point[0], start_point[1] - 1)\n        t = (start_point, end_point)\n        if t in points or (t[1], t[0]) in points:\n            c += 1\n        else:\n            c += 5\n        points.add(t)\n        start_point = end_point\n    print(c)", "numTest = int(input())\nfor _ in range(numTest):\n    inputLine = input()\n    totoalTime = 0\n    preX = 0\n    preY = 0\n    nowX = 0\n    nowY = 0\n    visitRoad = set()\n    for eachWay in inputLine:\n        preX = nowX\n        preY = nowY\n        if eachWay == 'S':\n            nowY = nowY - 1\n        elif eachWay == 'N':\n            nowY = nowY + 1\n        elif eachWay == 'W':\n            nowX = nowX - 1\n        elif eachWay == 'E':\n            nowX = nowX + 1\n        addTime = 1 if (preX, preY, nowX, nowY) in visitRoad or (nowX, nowY, preX, preY) in visitRoad else 5\n        totoalTime = totoalTime + addTime\n        if (preX, preY, nowX, nowY) not in visitRoad:\n            visitRoad.add((preX, preY, nowX, nowY))\n    print(totoalTime)", "test_cases = int(input().strip())\ndirections = ['N', 'S', 'E', 'W']\ntotal_time = []\nfor _ in range(test_cases):\n    full_path = set()\n    prev = (0, 0)\n    time = 0\n    path = input()\n    for direc in path:\n        if direc == 'N':\n            curr = (prev[0], prev[1] + 1)\n        elif direc == 'S':\n            curr = (prev[0], prev[1] - 1)\n        elif direc == 'E':\n            curr = (prev[0] + 1, prev[1])\n        else:\n            curr = (prev[0] - 1, prev[1])\n        if curr + prev in full_path:\n            time += 1\n        else:\n            time += 5\n        full_path.add(curr + prev)\n        full_path.add(prev + curr)\n        prev = curr\n    total_time.append(time)\nprint(*total_time, sep='\\n')", "dic = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\ntestCases = int(input())\nfor _ in range(testCases):\n    s = input()\n    s1 = set()\n    x = 0\n    y = 0\n    t = 0\n    for j in s:\n        x1 = x + dic[j][0]\n        y1 = y + dic[j][1]\n        if (x, y, x1, y1) in s1 or (x1, y1, x, y) in s1:\n            t += 1\n        else:\n            t += 5\n            s1.add((x, y, x1, y1))\n        x = x1\n        y = y1\n    print(t)", "from collections import defaultdict\n\ndef solve():\n    dp = defaultdict(lambda : 5)\n    string = input()\n    ans = 0\n    x = 0\n    y = 0\n    x1 = 0\n    y1 = 0\n    for char in string:\n        if char == 'N':\n            x1 += 1\n        elif char == 'S':\n            x1 -= 1\n        elif char == 'E':\n            y1 += 1\n        else:\n            y1 -= 1\n        getValue = dp[x, y, x1, y1]\n        ans += getValue\n        if getValue == 5:\n            dp[x, y, x1, y1] = 1\n            dp[x1, y1, x, y] = 1\n        x = x1\n        y = y1\n    return ans\nt = int(input())\nfor i in range(t):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    s = input()\n    x = 0\n    y = 0\n    D = {}\n    ans = 0\n    for i in range(len(s)):\n        c_x = x\n        c_y = y\n        if s[i] == 'N':\n            c_y = y + 1\n        if s[i] == 'S':\n            c_y = y - 1\n        if s[i] == 'W':\n            c_x = x - 1\n        if s[i] == 'E':\n            c_x = x + 1\n        if (x, y, c_x, c_y) in D:\n            ans += 1\n        else:\n            D[x, y, c_x, c_y] = 1\n            D[c_x, c_y, x, y] = 1\n            ans += 5\n        x = c_x\n        y = c_y\n    print(ans)", "t = int(input())\ni = 0\ndic = {'N': (0, 1), 'S': (0, -1), 'E': (1, 0), 'W': (-1, 0)}\nwhile i < t:\n    s = input()\n    count = 0\n    (x, y) = (0, 0)\n    ad = set()\n    for j in s:\n        x1 = x + dic[j][0]\n        y1 = y + dic[j][1]\n        if (x, y, x1, y1) in ad or (x1, y1, x, y) in ad:\n            count = count + 1\n        else:\n            count = count + 5\n            ad.add((x, y, x1, y1))\n        (x, y) = (x1, y1)\n    print(count)\n    i = i + 1", "for _ in range(int(input())):\n    s = input()\n    time = 0\n    pos = set()\n    a = (0, 0)\n    for item in s:\n        if item == 'N':\n            b = (a[0], a[1] + 1)\n        elif item == 'S':\n            b = (a[0], a[1] - 1)\n        elif item == 'E':\n            b = (a[0] + 1, a[1])\n        elif item == 'W':\n            b = (a[0] - 1, a[1])\n        if a + b in pos:\n            time += 1\n        else:\n            time += 5\n            pos.add(a + b)\n            pos.add(b + a)\n        a = b\n    print(time)", "dic = {'N': [0, 1], 'S': [0, -1], 'E': [1, 0], 'W': [-1, 0]}\nfor _ in range(int(input())):\n    ans = 0\n    s = set()\n    (x, y) = (0, 0)\n    s.add((0, 0))\n    for c in input():\n        (dx, dy) = dic[c]\n        m = (x + dx, y + dy)\n        if m in s:\n            ans += 1\n        else:\n            ans += 5\n        x += dx * 2\n        y += dy * 2\n        s.add(m)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    dir = input()\n    x = y = 0\n    res = 0\n    s = set()\n    for d in dir:\n        px = x\n        py = y\n        if d == 'N':\n            y += 1\n        elif d == 'S':\n            y -= 1\n        elif d == 'E':\n            x += 1\n        else:\n            x -= 1\n        l1 = [px, py, x, y]\n        l2 = [x, y, px, py]\n        if tuple(l1) in s:\n            res += 1\n        else:\n            res += 5\n        s.add(tuple(l1))\n        s.add(tuple(l2))\n    print(res)\n    t -= 1", "import sys\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\nI = lambda : list(map(int, input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n(t,) = I()\nwhile t:\n    t -= 1\n    s = input()\n    (x, y) = (0, 0)\n    d = {'N': [0, 1], 'S': [0, -1], 'E': [1, 0], 'W': [-1, 0]}\n    ans = 0\n    v = dd(int)\n    for i in s:\n        (a, b) = (x + d[i][0], y + d[i][1])\n        if (x, y, a, b) in v:\n            ans += 1\n        else:\n            ans += 5\n        v[x, y, a, b] = v[a, b, x, y] = 1\n        (x, y) = (a, b)\n    print(ans)", "for _ in range(int(input())):\n    path = input()\n    d = {}\n    ans = 0\n    (x, y) = (0, 0)\n    for ch in path:\n        (nx, ny) = (x, y)\n        if ch == 'N':\n            ny += 1\n        elif ch == 'S':\n            ny -= 1\n        elif ch == 'E':\n            nx += 1\n        else:\n            nx -= 1\n        if (x, y, nx, ny) in d or (nx, ny, x, y) in d:\n            ans += 1\n        else:\n            ans += 5\n            d[x, y, nx, ny] = 1\n            d[nx, ny, x, y] = 1\n        (x, y) = (nx, ny)\n    print(ans)", "for s in [*open(0)][1:]:\n    r = 0\n    x = (0, 0)\n    d = {}\n    for c in s[:-1]:\n        i = 'SNWE'.find(c)\n        y = (x[0] + (1, -1, 0, 0)[i], x[1] + (0, 0, 1, -1)[i])\n        r += d.get((x, y), 5)\n        d[x, y] = d[y, x] = 1\n        x = y\n    print(r)", "inp = {'N': (1, 0), 'S': (-1, 0), 'E': (0, 1), 'W': (0, -1)}\nfor _ in range(int(input())):\n    d = {}\n    i = input()\n    (x, y, s) = (0, 0, 0)\n    for j in i:\n        nx = x + inp[j][0]\n        ny = y + inp[j][1]\n        s += min(d.get((x, y, nx, ny), 5), d.get((nx, ny, x, y), 5))\n        d[nx, ny, x, y] = 1\n        x = nx\n        y = ny\n    print(s)", "from sys import stdin\n\ndef main():\n    readline = stdin.readline\n    t = int(readline())\n    res = []\n    for _ in range(t):\n        s = readline().strip()\n        dNS = dict()\n        dWE = dict()\n        count = 0\n        y = 0\n        x = 0\n        for c in s:\n            if c == 'N':\n                a = str(x) + '_' + str(y)\n                y += 1\n                b = str(x) + '_' + str(y)\n                flag = 1\n            elif c == 'S':\n                b = str(x) + '_' + str(y)\n                y -= 1\n                a = str(x) + '_' + str(y)\n                flag = 1\n            elif c == 'W':\n                b = str(x) + '_' + str(y)\n                x -= 1\n                a = str(x) + '_' + str(y)\n                flag = 0\n            elif c == 'E':\n                a = str(x) + '_' + str(y)\n                x += 1\n                b = str(x) + '_' + str(y)\n                flag = 0\n            c = a + '_' + b\n            if flag == 1:\n                if c not in dNS:\n                    count += 5\n                    dNS[c] = 1\n                else:\n                    count += 1\n            elif c not in dWE:\n                count += 5\n                dWE[c] = 1\n            else:\n                count += 1\n        res.append(count)\n    for i in range(t):\n        print(res[i])\nmain()", "for _ in range(int(input())):\n    route = input()\n    (x, y) = (0, 0)\n    done = set()\n    secs = 0\n    for i in route:\n        if i == 'E':\n            nx = x + 1\n            ny = y + 0\n        if i == 'W':\n            nx = x - 1\n            ny = y + 0\n        if i == 'N':\n            nx = x + 0\n            ny = y + 1\n        if i == 'S':\n            nx = x + 0\n            ny = y - 1\n        a = (nx, ny, x, y)\n        b = (x, y, nx, ny)\n        if a in done or b in done:\n            secs += 1\n        else:\n            secs += 5\n        done.add(a)\n        done.add(b)\n        (x, y) = (nx, ny)\n    print(secs)", "t = int(input())\nfor a in range(t):\n    path = input()\n    current = [0, 0]\n    answer = 0\n    used = set()\n    for step in path:\n        if step == 'N':\n            transition = (0, 1)\n        if step == 'S':\n            transition = (0, -1)\n        if step == 'W':\n            transition = (1, 0)\n        if step == 'E':\n            transition = (-1, 0)\n        newPath = (current[0] + transition[0] / 2, current[1] + transition[1] / 2)\n        if newPath in used:\n            answer += 1\n        else:\n            answer += 5\n            used.add(newPath)\n        current[0] += transition[0]\n        current[1] += transition[1]\n    print(answer)", "def solve_case():\n    s = input()\n    n = len(s)\n    dur = 0\n    (x, y) = (0, 0)\n    segs = set()\n    for i in range(n):\n        (nx, ny) = (x, y)\n        nx += int(s[i] == 'E') - int(s[i] == 'W')\n        ny += int(s[i] == 'N') - int(s[i] == 'S')\n        st = (x, y)\n        en = (nx, ny)\n        if (st, en) in segs or (en, st) in segs:\n            dur += 1\n        else:\n            dur += 5\n            segs.add((st, en))\n        (x, y) = (nx, ny)\n    print(dur)\nt = int(input())\nfor _ in range(t):\n    solve_case()", "def count_seconds(s):\n    c = 0\n    (x, y) = (0, 0)\n    paths = {}\n    for i in range(0, len(s)):\n        pre_x = x\n        pre_y = y\n        if s[i] == 'S':\n            y -= 1\n        elif s[i] == 'N':\n            y += 1\n        elif s[i] == 'W':\n            x -= 1\n        elif s[i] == 'E':\n            x += 1\n        if (x, y) in paths:\n            if (pre_x, pre_y) in paths[x, y]:\n                c += 1\n            else:\n                c += 5\n                paths[x, y].append((pre_x, pre_y))\n        else:\n            c += 5\n            paths[x, y] = [(pre_x, pre_y)]\n        if (pre_x, pre_y) in paths:\n            if (x, y) not in paths[pre_x, pre_y]:\n                paths[pre_x, pre_y].append((x, y))\n        else:\n            paths[pre_x, pre_y] = [(x, y)]\n    return c\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(count_seconds(s))", "t = int(input())\nfor tt in range(0, t):\n    direction = input()\n    (x, y) = (0, 0)\n    path = 0\n    l = set()\n    for d in direction:\n        if d == 'N':\n            x += 1\n            toappend = (x - 1, y, x, y)\n            ttoappend = (x, y, x - 1, y)\n        elif d == 'S':\n            x -= 1\n            toappend = (x + 1, y, x, y)\n            ttoappend = (x, y, x + 1, y)\n        elif d == 'E':\n            y += 1\n            toappend = (x, y - 1, x, y)\n            ttoappend = (x, y, x, y - 1)\n        elif d == 'W':\n            y -= 1\n            toappend = (x, y + 1, x, y)\n            ttoappend = (x, y, x, y + 1)\n        if toappend not in l or ttoappend not in l:\n            path += 5\n            l.add(toappend)\n            l.add(ttoappend)\n        else:\n            path += 1\n    print(path)", "for i in range(int(input())):\n    dic = {}\n    x = y = 0\n    prevx = prevy = 0\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s[i] == 'E':\n            x += 1\n        else:\n            x -= 1\n        if (x, y, prevx, prevy) in dic or (prevx, prevy, x, y) in dic:\n            ans += 1\n        else:\n            dic[x, y, prevx, prevy] = 1\n            dic[prevx, prevy, x, y] = 1\n            ans += 5\n        prevx = x\n        prevy = y\n    print(ans)", "import sys\nn_cases = int(next(sys.stdin))\nfor case in sys.stdin:\n    n_cases -= 1\n    visited = set()\n    pos = (0, 0)\n    t = 0\n    for char in case.strip():\n        delta = {'S': (0, -1), 'N': (0, 1), 'W': (-1, 0), 'E': (1, 0)}[char]\n        npos = (pos[0] + delta[0], pos[1] + delta[1])\n        segment = tuple(sorted((pos, npos)))\n        pos = npos\n        t += 1 + 4 * (segment not in visited)\n        visited.add(segment)\n    print(t)\nassert n_cases == 0", "for _ in range(int(input())):\n    (ans, x, y) = (0, 0, 0)\n    s = set()\n    for c in input():\n        (nx, ny) = (x, y)\n        if c == 'N':\n            ny += 1\n        if c == 'S':\n            ny -= 1\n        if c == 'W':\n            nx -= 1\n        if c == 'E':\n            nx += 1\n        if (x, y, nx, ny) not in s:\n            ans += 5\n            s.add((x, y, nx, ny))\n            s.add((nx, ny, x, y))\n        else:\n            ans += 1\n        (x, y) = (nx, ny)\n    print(ans)", "for t in range(int(input())):\n    s = input()\n    (x, y) = (0, 0)\n    visited = {}\n    ans = 0\n    for i in s:\n        (x1, y1) = (x, y)\n        if i == 'N':\n            y += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'E':\n            x += 1\n        else:\n            x -= 1\n        if visited.get(((x, y), (x1, y1)), False) == False and visited.get(((x1, y1), (x, y)), False) == False:\n            ans += 5\n            visited[(x, y), (x1, y1)] = True\n        else:\n            ans += 1\n    print(ans)"]