["import math\n\ndef fact(n):\n    lst = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            lst.append(i)\n            lst.append(n // i)\n    return lst\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k >= n:\n        print(1)\n    else:\n        lst = fact(n)\n        lst.sort(reverse=True)\n        for j in lst:\n            if j <= k:\n                print(n // j)\n                break", "from math import sqrt, ceil\n\ndef find_shovel(n, k):\n    if k >= n:\n        return 1\n    res = n\n    for i in range(2, min(k, ceil(sqrt(n))) + 1):\n        if n % i == 0:\n            division = n // i\n            if division <= k:\n                return i\n            res = min(res, division)\n    return res\nresults = []\nfor _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split(' ')]\n    results.append(str(find_shovel(n, k)))\nprint('\\n'.join(results))", "import math\n\ndef solve(n, k):\n    ans = n\n    for j in range(1, int(math.sqrt(n)) + 1):\n        if n % j == 0:\n            if j <= k:\n                ans = min(ans, n // j)\n            if n // j <= k:\n                ans = min(ans, j)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    solve(n, k)", "import math\nt = int(input())\n\ndef solve(n):\n    minm = n\n    for i in range(2, min(k + 1, int(math.sqrt(n)) + 1)):\n        if n % i == 0:\n            if n // i <= k and i <= minm:\n                return i\n            else:\n                minm = n // i\n    return minm\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    if n <= k:\n        print(1)\n    else:\n        print(solve(n))", "def buyingShovels(n, k):\n    ans = float('inf')\n    if k >= n:\n        return 1\n    for x in range(min(int(n ** 0.5), k), 0, -1):\n        if n % x == 0:\n            if n / x <= k:\n                a = min(x, int(n / x))\n            else:\n                a = int(n / x)\n            ans = min(a, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(buyingShovels(n, k))", "from math import sqrt\n\ndef main():\n    for P in range(int(input())):\n        wyn = 0\n        (jaka, doIlu) = list(map(int, input().split()))\n        czy_break = False\n        if jaka <= doIlu:\n            print(1)\n            continue\n        for i in range(1, int(sqrt(jaka) + 1)):\n            if jaka % i == 0:\n                if jaka // i <= doIlu:\n                    print(i)\n                    czy_break = True\n                    break\n                elif i <= doIlu:\n                    wyn = i\n        if not czy_break:\n            print(jaka // wyn)\nmain()", "from math import sqrt\n\ndef solve(n, k):\n    ans = n\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            if n // i <= k:\n                ans = min(ans, i)\n            if i <= k:\n                ans = min(ans, n // i)\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        print(solve(n, k))\nmain()", "import math\nfrom bisect import *\n\ndef get_divisors(n):\n    large_divisors = []\n    pfs = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            pfs.append(i)\n            if i * i != n:\n                large_divisors.append(int(n / i))\n    large_divisors.reverse()\n    return [*pfs, *large_divisors]\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = list(R())\n    div = get_divisors(n)\n    id = bisect(div, k, 0, len(div)) - 1\n    print(int(n / div[id]))", "import math\n\ndef smallestfactors(n, k):\n    ans = n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i <= k:\n                return i\n            if i <= k:\n                ans = min(ans, n // i)\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(smallestfactors(n, k))", "import math\n\ndef FindFactors(x):\n    num_set = set()\n    add_list = []\n    for i in range(1, math.ceil(math.sqrt(x)) + 1):\n        if x % i == 0:\n            num_set.add(i)\n    for element in num_set:\n        add_list.append(int(x / element))\n    for element in add_list:\n        num_set.add(element)\n    return num_set\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    factors_list = list(FindFactors(n))\n    factors_list.sort(reverse=True)\n    x = 0\n    for element in factors_list:\n        if element <= k:\n            x = element\n            break\n    print(int(n / x))", "from math import sqrt\n\ndef divisors(n):\n    result = []\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                result.append(i)\n            else:\n                result.append(i)\n                result.append(n / i)\n    return result\nn = int(input())\nfor i in range(n):\n    (x, y) = [int(x) for x in input().split()]\n    l = [x / i for i in divisors(x) if i <= y]\n    print(int(min(l)))", "from math import ceil, isqrt\n\ndef testCase_1360d():\n    return map(int, input().split(' '))\n\ndef nPackagesMin(nShovels, nPackageTypes, memo={}):\n    if nShovels in memo:\n        if memo[nShovels][0] == nPackageTypes:\n            return memo[nShovels][1]\n    squareRoot_nShovels = isqrt(nShovels)\n    nPackagesLowest = ceil(nShovels / nPackageTypes)\n    for nPackages in range(nPackagesLowest, min(squareRoot_nShovels, nPackageTypes) + 1):\n        if nShovels % nPackages == 0:\n            memo[nShovels] = (nPackageTypes, nPackages)\n            return nPackages\n    for packageType in range(min(nPackagesLowest - 1, nPackageTypes), 0, -1):\n        if nShovels % packageType == 0:\n            nPackages = nShovels // packageType\n            memo[nShovels] = (nPackageTypes, nPackages)\n            return nPackages\nn_testCases = int(input())\ntestCases = [testCase_1360d() for x in range(n_testCases)]\n[print(nPackagesMin(*testCase)) for testCase in testCases]", "def div_lis(x):\n    (div_l, div_r) = ([], [])\n    for i in range(1, int(x ** 0.5) + 1):\n        if x % i != 0:\n            continue\n        div_l.append(i)\n        if i != x // i:\n            div_r.append(x // i)\n    div = div_l + div_r[::-1]\n    return div\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        print(1)\n        continue\n    div = div_lis(n)\n    for d in div:\n        if n // d <= k:\n            print(d)\n            break", "from math import sqrt\n\ndef g(n, k):\n    ans = n\n    for i in range(1, 1 + int(sqrt(n))):\n        if n % i == 0:\n            if n // i <= k:\n                ans = min(ans, i)\n            if i <= k:\n                ans = min(ans, n // i)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(g(n, k))", "def solve(buy, packages):\n    ans = 0\n    root = int(buy ** 0.5 + 0.5)\n    for x in range(1, root + 1):\n        if buy % x == 0:\n            if buy // x <= packages:\n                return x\n            if x <= packages:\n                ans = buy // x\n    return ans\nfor x in range(int(input())):\n    (b, p) = list(map(int, input().split()))\n    print(solve(b, p))", "from math import ceil, isqrt\n\ndef testCase_1360d():\n    return map(int, input().split(' '))\n\ndef nPackagesMin(nShovels, nPackageTypes):\n    squareRoot_nShovels = isqrt(nShovels)\n    if nPackageTypes > squareRoot_nShovels:\n        for nPackages in range(ceil(nShovels / nPackageTypes), squareRoot_nShovels + 1):\n            if nShovels % nPackages == 0:\n                return nPackages\n    else:\n        for packageType in range(nPackageTypes, 0, -1):\n            if nShovels % packageType == 0:\n                return nShovels // packageType\n    return nShovels\n\ndef nPackagesMin2(nShovels, nPackageTypes):\n    squareRoot_nShovels = isqrt(nShovels)\n    nPackagesLowest = ceil(nShovels / nPackageTypes)\n    (a, b) = (nShovels, nShovels)\n    for nPackages in range(nPackagesLowest, min(squareRoot_nShovels, nPackageTypes) + 1):\n        if nShovels % nPackages == 0:\n            return nPackages\n    for packageType in range(min(nPackagesLowest - 1, nPackageTypes), 0, -1):\n        if nShovels % packageType == 0:\n            return nShovels // packageType\nn_testCases = int(input())\ntestCases = [testCase_1360d() for x in range(n_testCases)]\n[print(nPackagesMin2(*testCase)) for testCase in testCases]", "from math import sqrt\n\ndef Factor(n):\n    res = []\n    for x in range(1, int(sqrt(n) + 1)):\n        if n % x == 0:\n            res.append(x)\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    if k >= n:\n        print(1)\n    else:\n        factor = Factor(n)\n        for j in range(len(factor)):\n            if int(n / factor[j]) not in factor:\n                factor.append(int(n / factor[j]))\n        factor.sort()\n        for j in range(len(factor)):\n            if n / factor[j] <= k:\n                print(factor[j])\n                break", "def div_lis(x):\n    (div_l, div_r) = ([], [])\n    for i in range(1, int(x ** 0.5) + 1):\n        if x % i != 0:\n            continue\n        div_l.append(i)\n        if i != x // i:\n            div_r.append(x // i)\n    div = div_l + div_r[::-1]\n    return div\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        print(1)\n        continue\n    if k == 1:\n        print(n)\n        continue\n    div = div_lis(n)\n    for d in div:\n        if n // d <= k:\n            print(d)\n            break", "import math\n\ndef shovels(n, k):\n    if k >= n:\n        return 1\n    else:\n        x = int(math.sqrt(n))\n        out = n\n        for i in range(1, x + 1):\n            if n % i == 0:\n                if i <= k:\n                    out = min(out, n // i)\n                if n // i <= k:\n                    out = min(out, i)\n        return out\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(shovels(n, k))", "import math\n\ndef c(n):\n    l = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            l += [i]\n            l += [n // i]\n    if l == []:\n        l += [1, n]\n    return l\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = tuple(map(int, input().split()))\n        l = c(n)\n        l.sort()\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] <= k:\n                print(n // l[i])\n                break\nmain()", "def check_factor(n, k):\n    li = []\n    for i in range(int(n ** (1 / 2)), 0, -1):\n        if n % i == 0:\n            li.append(i)\n            li.append(n // i)\n    li.sort(reverse=True)\n    for i in range(len(li)):\n        if li[i] <= k:\n            return li[i]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = check_factor(n, k)\n    print(n // ans)", "from math import ceil, isqrt\n\ndef testCase_1360d():\n    return map(int, input().split(' '))\n\ndef nPackagesMin(nShovels, nPackageTypes):\n    squareRoot_nShovels = isqrt(nShovels)\n    nPackagesLowest = ceil(nShovels / nPackageTypes)\n    for nPackages in range(nPackagesLowest, min(squareRoot_nShovels, nPackageTypes) + 1):\n        if nShovels % nPackages == 0:\n            return nPackages\n    for packageType in range(min(nPackagesLowest - 1, nPackageTypes), 0, -1):\n        if nShovels % packageType == 0:\n            return nShovels // packageType\nn_testCases = int(input())\ntestCases = [testCase_1360d() for x in range(n_testCases)]\n[print(nPackagesMin(*testCase)) for testCase in testCases]", "from bisect import bisect_right as br\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    dv = [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    x = len(dv)\n    for i in range(x):\n        dv.append(n // dv[i])\n    dv.sort()\n    print(n // dv[br(dv, k) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(min((min(n // i, n if n // i > k else i) for i in range(1, min(int(n ** 0.5), k) + 1) if n % i == 0)))", "from functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        ans = 1\n    elif k == 1:\n        ans = n\n    else:\n        ans = 10 ** 9\n        l = list(factors(n))\n        l.sort()\n        for i in l:\n            if i > k:\n                break\n            if n % i == 0:\n                ans = min(ans, n // i)\n    print(ans)", "def func(n, k):\n    m = 0\n    if n == k:\n        print(1)\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0 and i <= k and (i > m):\n                m = i\n                if n // i != i and n // i <= k and (n // i > m):\n                    m = n // i\n        print(n // m)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    func(n, k)", "def factors(n):\n    l = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n    return l\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = factors(n)\n    l.sort(reverse=True)\n    for i in l:\n        if i <= k:\n            print(n // i)\n            break", "t = int(input())\nimport math\n\ndef factors(n, k):\n    results = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i <= k:\n            results.add(i)\n            last = int(n / i)\n            if last <= k:\n                results.add(int(n / i))\n    return results\nfor test in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    high = 1\n    if n <= k:\n        print(1)\n        continue\n    ans = list(factors(n, k))\n    ans.sort()\n    print(n // ans[-1])", "T = int(input())\n\ndef make_sosuu(n):\n    sosuu = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sosuu.append(i)\n            if i != n // i:\n                sosuu.append(n // i)\n    sosuu.sort()\n    return sosuu\nfor i in range(T):\n    (A, B) = list(map(int, input().split()))\n    if A <= B:\n        print(1)\n    else:\n        P = make_sosuu(A)\n        P = [i for i in P if i <= B]\n        print(A // max(P))", "def sol():\n    (x, y) = map(int, input().split())\n    res = 0\n    for n in range(1, min(y, int(x ** 0.5)) + 1):\n        if x % n == 0:\n            res = max(res, n)\n            if x / n <= y:\n                res = max(res, x // n)\n    print(x // res)\nfor n in range(int(input())):\n    sol()", "from math import ceil, sqrt\n\ndef solution():\n    (n, k) = map(lambda x: int(x), input().split())\n    max_shovel_cnt = ceil(sqrt(n))\n    if k >= n:\n        print(1)\n        return\n    if k == 1:\n        print(n)\n        return\n    answer = n\n    for i in range(2, max_shovel_cnt + 1):\n        if n % i == 0:\n            if n // i <= k:\n                answer = min(answer, i)\n            if i <= k:\n                answer = min(answer, n // i)\n    print(answer)\nt = int(input())\nfor _ in range(t):\n    solution()", "def question_D(n, k):\n    factors = []\n    for d in range(1, int(n ** 0.5) + 1):\n        if n % d == 0:\n            factors.append(d)\n            factors.append(n // d)\n    factors.sort(reverse=True)\n    for d in factors:\n        if d <= k:\n            print(n // d)\n            break\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    question_D(x, y)", "def shovels(n, k):\n    array = []\n    c = 0\n    if k == 1:\n        return n\n    elif n <= k:\n        return 1\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n // i <= k:\n                    return i\n                else:\n                    c += 1\n                    array.append(i)\n        for i in range(c):\n            a = array[c - 1 - i]\n            if a <= k:\n                return n // a\n        else:\n            return n\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(shovels(n, k))", "from math import sqrt\n\ndef gf(n, k):\n    hi = 1\n    for i in range(1, min(k, int(sqrt(n))) + 1):\n        if n % i == 0:\n            if n // i <= k:\n                hi = max(hi, n // i)\n            else:\n                hi = max(hi, i)\n    return hi\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // gf(n, k))", "import math\n\ndef shovels(n, k):\n    if n <= k:\n        return 1\n    if k == 1:\n        return n\n    m = int(math.sqrt(n)) + 1\n    if k < m:\n        m = k\n    ans = n\n    for i in range(2, m + 1):\n        if n % i == 0:\n            a = i\n            b = n // i\n            ans = b\n            if b <= k:\n                return min(a, b)\n    return ans\nT = int(input())\nfor i in range(T):\n    (n, k) = [int(i) for i in input().split()]\n    print(shovels(n, k))", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef check_prime(n, k):\n    maxi = 0\n    gFlag = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i > maxi and n // i <= k:\n                maxi = n // i\n                gFlag = True\n            elif i > maxi and i <= k:\n                maxi = i\n                gFlag = True\n    return (False, -1) if not gFlag else (True, maxi)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    result = n\n    if n <= k:\n        print(1)\n        continue\n    elif k == 1:\n        print(n)\n        continue\n    (truthVal, maxi) = check_prime(n, k)\n    if truthVal:\n        result = n // maxi\n    print(result)", "def primefact(n, k):\n    d = []\n    ans = []\n    for i in range(1, min(k + 1, int(n ** 0.5) + 1)):\n        if n % i == 0:\n            d.append(i)\n    for i in d:\n        ans.append(n // i)\n        if n // i <= k:\n            ans.append(i)\n    return min(ans)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k >= n:\n        print(1)\n    else:\n        print(primefact(n, k))", "import math\n\ndef factors(n):\n    t = int(math.sqrt(n))\n    ans = 0\n    for i in range(2, t + 1):\n        if n % i == 0:\n            if n // i != i and n // i <= k:\n                ans = n // i\n                break\n            elif i <= k:\n                ans = i\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        ans = n\n    else:\n        ans = factors(n)\n        if ans == 0:\n            ans = 1\n    print(n // ans)", "def shovels(n, k):\n    if n % k == 0:\n        print(n // k)\n        return\n    elif n < k:\n        print(1)\n        return\n    else:\n        maximumdivisor = 1\n        for i in range(1, int(n ** (1 / 2)) + 1):\n            if n % i == 0:\n                if i > maximumdivisor and i <= k:\n                    maximumdivisor = i\n                if n // i > maximumdivisor and n // i <= k:\n                    maximumdivisor = n // i\n        print(n // maximumdivisor)\nt = int(input())\narray = []\nfor i in range(t):\n    array.append(list(map(int, input().split(' '))))\nfor x in array:\n    shovels(*x)", "import math\n\ndef function(n, k):\n    if n <= k:\n        return 1\n    result = 10 ** 9\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i <= k:\n                result = min(result, n / i)\n            if n / i <= k:\n                result = min(result, i)\n    return int(result)\nt = int(input())\nfor j in range(t):\n    l1 = list(map(int, input().rstrip().split()))\n    n = l1[0]\n    k = l1[1]\n    print(function(n, k))", "import math\nimport sys\n\ndef solution(n, k):\n    if k == 1:\n        return n\n    if n == k:\n        return 1\n    if n == 1:\n        return 1\n    mn = sys.maxsize\n    arr = []\n    temp = min(int(math.sqrt(n)) + 1, k + 1)\n    for i in range(1, temp):\n        if n % i == 0:\n            arr.append(i)\n            if n // i <= k:\n                arr.append(n // i)\n    for i in arr:\n        mn = min(mn, n // i)\n    return mn\nfor i in range(int(input())):\n    (n, k) = [int(x) for x in input().split(' ')]\n    print(solution(n, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(min((min(n // i, n if n // i > k else i) for i in range(1, min(int(n ** 0.5), k) + 1) if n % i == 0)))", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    ans = n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i <= k:\n                ans = min(ans, n // i)\n            if n // i <= k:\n                ans = min(ans, i)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import *\nmod = 1000000007\n\ndef main():\n    (n, k) = [int(x) for x in input().split(' ')]\n    ans = 1\n    for i in range(1, ceil(sqrt(n)) + 1):\n        if n % i == 0:\n            if i <= k:\n                ans = max(ans, i)\n            if n // i <= k:\n                ans = max(ans, n // i)\n    print(n // ans)\ntt = 1\ntt = int(input())\nfor _ in range(tt):\n    main()", "def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort(reverse=True)\n    return divisors\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    D = make_divisors(N)\n    for d in D:\n        if d <= K:\n            print(N // d)\n            break", "from math import sqrt\n\ndef bt(arr, n, key):\n    left = 0\n    right = n\n    mid = 0\n    while left < right:\n        mid = (right + left) // 2\n        if arr[mid] == key:\n            while mid + 1 < n and arr[mid + 1] == key:\n                mid += 1\n            break\n        elif arr[mid] > key:\n            right = mid\n        else:\n            left = mid + 1\n    while mid > -1 and arr[mid] > key:\n        mid -= 1\n    return mid + 1\n\ndef ps(n):\n    a = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n / i:\n                a.append(i)\n            else:\n                a.append(i)\n                a.append(n // i)\n    return sorted(a)\nfor zx in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = ps(n)\n    y = bt(s, len(s), k)\n    r = s[y - 1]\n    print(n // r)", "from math import sqrt\n\ndef bt(arr, n, key):\n    left = 0\n    right = n\n    mid = 0\n    while left < right:\n        mid = (right + left) // 2\n        if arr[mid] == key:\n            while mid + 1 < n and arr[mid + 1] == key:\n                mid += 1\n            break\n        elif arr[mid] > key:\n            right = mid\n        else:\n            left = mid + 1\n    while mid > -1 and arr[mid] > key:\n        mid -= 1\n    return mid + 1\n\ndef ps(n, a):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n / i:\n                a.append(i)\n            else:\n                a.append(i)\n                a.append(n // i)\n    return sorted(a)\nfor zx in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = ps(n, [])\n    y = bt(s, len(s), k)\n    print(n // s[y - 1])", "def main():\n    import sys\n    sys.setrecursionlimit(10 ** 6)\n    input = sys.stdin.readline\n    T = int(input())\n    for t in range(T):\n        (n, k) = [int(x) for x in input().strip().split()]\n        ans = n\n        for i in range(1, min(k, int(n ** 0.5)) + 1):\n            if n % i == 0:\n                m = n // i\n                ans = min(ans, n // i)\n                if m <= k:\n                    ans = min(ans, n // m)\n        print(ans)\nmain()", "def solve():\n    from sys import stdin, stdout\n    import math\n    t = int(stdin.readline())\n    while t > 0:\n        (n, k) = map(int, input().strip().split())\n        l1 = []\n        sq = math.sqrt(n)\n        for i in range(1, int(sq) + 1):\n            if n % i == 0:\n                l1.append(i)\n                l1.append(n // i)\n        l1.sort(reverse=True)\n        for i in l1:\n            if k < i:\n                continue\n            else:\n                break\n        print(n // i)\n        t -= 1\nsolve()", "def fact(a):\n    for i in range(1, int(a ** 0.5 + 1)):\n        if a % i == 0:\n            if a // i != i:\n                li.append(i)\n                li.append(a // i)\n            else:\n                li.append(i)\na = int(input())\nfor _ in range(a):\n    (x, y) = map(int, input().split())\n    if y >= x:\n        print(1)\n    elif y == 1:\n        print(x)\n    elif x % y == 0:\n        print(x // y)\n    elif x > y:\n        li = []\n        fact(x)\n        li.sort(reverse=True)\n        for b in li:\n            if b <= y:\n                print(x // b)\n                break", "import math\n\ndef fact(num):\n    ans = []\n    x = int(math.sqrt(num)) + 1\n    for i in range(1, x):\n        if num % i == 0:\n            t = num // i\n            if i == t:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(t)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    lis = fact(n)\n    lis.sort(reverse=True)\n    for i in lis:\n        if i <= k:\n            print(n // i)\n            break", "import sys\nimport math\n\ndef prime(n, k):\n    save = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i <= k:\n                return i\n            if i <= k:\n                save.append(i)\n    if not len(save):\n        return n\n    return n // max(save)\nt = int(sys.stdin.readline().strip())\nfor i in range(t):\n    (n, k) = list(map(int, sys.stdin.readline().strip().split(' ')))\n    if k >= n:\n        print(1)\n    else:\n        p = prime(n, k)\n        print(p)", "from math import sqrt\n\ndef solve(n, k):\n    ans = 0\n    for j in range(min(int(sqrt(n)), k), 0, -1):\n        if n % j == 0:\n            if j > ans:\n                ans = j\n            if n // j > ans and n // j <= k:\n                ans = n // j\n    return n // ans\narr = []\nfor s in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    if k >= n:\n        arr.append(1)\n    else:\n        arr.append(solve(n, k))\nfor it in arr:\n    print(it)", "from math import sqrt\n\ndef cal(n, k):\n    Div = set()\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            Div.add(n // i)\n            Div.add(i)\n    output = n\n    for a in Div:\n        if a <= k:\n            output = min(output, n // a)\n    return output\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        ans.append(cal(n, k))\n    for i in range(t):\n        print(ans[i])\nmain()", "from math import sqrt, ceil\n\ndef read_int():\n    return int(input())\n\ndef read_string_array():\n    return input().split()\n\ndef read_int_array():\n    return [int(_) for _ in read_string_array()]\n\ndef read_line():\n    return input()\n\ndef factors(n):\n    f = []\n    for i in range(1, ceil(sqrt(n + 1))):\n        if n % i == 0:\n            f.append(i)\n            f.append(n // i)\n    return f\n\ndef solve(n, k):\n    pack_sizes = [_ for _ in factors(n) if _ <= k]\n    min_packs = float('inf')\n    for d in pack_sizes:\n        min_packs = min(min_packs, n // d)\n    return min_packs\nT = read_int()\nfor _ in range(T):\n    (N, K) = read_int_array()\n    print(solve(N, K))", "def func(n, k):\n    m = 0\n    if n == k:\n        print(1)\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0 and i <= k and (i > m):\n                m = i\n                if n // i != i and n // i <= k and (n // i > m):\n                    m = n // i\n        print(n // m)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    func(n, k)", "import math\nfrom typing import *\n\ndef find_smallest_divisor(n: int, k: int) -> int:\n    ans = n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i <= k:\n                ans = min(n // i, ans)\n            if n // i <= k:\n                ans = min(ans, i)\n    return ans\nn = int(input())\nfor _ in range(n):\n    (n, k) = map(int, input().split())\n    print(find_smallest_divisor(n, k))", "def factors(n, k):\n    l = [1]\n    lx = [n]\n    c = True\n    for i in range(1, int(n ** 0.5) + 1):\n        if i <= k:\n            if n % i == 0:\n                l.append(i)\n                lx.append(n // i)\n        else:\n            c = False\n            break\n    if c == False:\n        print(lx[-1])\n    elif lx[-1] > k:\n        print(lx[-1])\n    else:\n        y = True\n        for i in lx[::-1]:\n            if i > k:\n                print(l[lx.index(x)])\n                y = False\n                break\n            x = i\n        if y == True:\n            print(l[lx.index(x)])\nfor _ in range(int(input())):\n    [n, k] = list(map(int, input().split()))\n    factors(n, k)", "def N():\n    return int(input())\n\ndef NM():\n    return map(int, input().split())\n\ndef L():\n    return list(NM())\n\ndef LN(n):\n    return [N() for i in range(n)]\n\ndef LL(n):\n    return [L() for i in range(n)]\nt = N()\n\ndef f():\n    (n, k) = NM()\n    l = []\n    for i in range(1, int(n ** 0.5) + 2):\n        if n % i == 0:\n            l.append(i)\n            l.append(n // i)\n    ans = n\n    for i in l:\n        if i <= k:\n            ans = min(ans, n // i)\n    print(ans)\nfor i in range(t):\n    f()", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef divs(n, k):\n    ans = 1\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            j = n // i\n            if i <= k:\n                ans = max(ans, i)\n            if j <= k:\n                ans = max(ans, j)\n    return n // ans\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(divs(n, k))", "import math\n\ndef main():\n    (n, k) = (int(x) for x in input().split())\n    if k >= n:\n        return 1\n    d = 1\n    for i in range(2, math.ceil(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if i <= k:\n                d = max(d, i)\n            if n // i <= k:\n                d = max(d, n // i)\n    return n // d\nt = int(input())\nwhile t > 0:\n    t -= 1\n    ans = main()\n    print(ans)", "t = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort(reverse=1)\n    return divisors\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = make_divisors(n)\n    for i in x:\n        if i <= k:\n            print(n // i)\n            break", "import math\n\ndef fun(n):\n    ans = []\n    for q in range(1, int(math.sqrt(n)) + 1):\n        if n % q == 0:\n            ans.append(q)\n            ans.append(n // q)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(1)\n    else:\n        a = fun(n)\n        a.sort(reverse=True)\n        for q in a:\n            if q <= k:\n                print(n // q)\n                break", "from math import sqrt\nfrom sys import maxsize\n\ndef solve(n, k):\n    upper_bound = min(k, int(sqrt(n)))\n    ans = maxsize\n    for i in range(1, upper_bound + 1):\n        if n % i == 0:\n            a = n // i\n            if a <= k:\n                ans = min(ans, i)\n            if i <= k:\n                ans = min(ans, a)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(solve(n, k))", "from math import sqrt\n\ndef ps(n, a):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n / i:\n                a.append(i)\n            else:\n                a.append(i)\n                a.append(n // i)\n    return a\nfor zx in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = ps(n, [])\n    h = []\n    for i in range(len(s)):\n        t = s[i]\n        if t <= k:\n            h.append(t)\n    o = max(h)\n    print(n // o)", "cases = int(input())\n\ndef max_divisor(a, b):\n    a_divisors = divisors(a)\n    a_divisors = sorted(a_divisors)\n    for x in range(len(a_divisors) - 1, -1, -1):\n        if a_divisors[x] <= b:\n            return a // a_divisors[x]\nimport math\n\ndef divisors(n):\n    divs = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.extend([i, n / i])\n    divs.extend([n])\n    return list(set(divs))\nfor x in range(0, cases):\n    (a, b) = [int(x) for x in input().split()]\n    if a < b:\n        print('1')\n    elif a % b == 0:\n        print(str(a // b))\n    else:\n        print(str(int(max_divisor(a, b))))", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        if n <= k:\n            print(1)\n            continue\n        else:\n            ans = n\n            for i in range(1, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    if n // i <= k:\n                        ans = min(i, ans)\n                    if i <= k:\n                        ans = min(n // i, ans)\n            print(ans)\nmain()", "def main_function():\n    from sys import stdin\n    from sys import stdout\n    from math import sqrt\n    from bisect import bisect_right\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for _ in range(t):\n        (n, k) = list(map(int, input().split()))\n        if k >= n:\n            print('1\\n')\n            continue\n        divisors = []\n        max_possible_div = int(sqrt(n))\n        for num in range(1, max_possible_div + 1):\n            if n % num == 0:\n                divisors.append(n // num)\n                if num * num != n:\n                    divisors.append(num)\n        divisors.sort()\n        ans_ix = bisect_right(divisors, k) - 1\n        print(f'{n // divisors[ans_ix]}\\n')\nmain_function()", "def calc(n, k):\n    res = int(1000000000000.0)\n    for i in range(1, int(round(n ** 0.5)) + 1):\n        if n % i == 0:\n            if i <= k:\n                res = min(res, n // i)\n            if n // i <= k:\n                res = min(res, i)\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    print(calc(n, k))", "def shovels(n, k):\n    ans = n\n    for j in range(1, int(n ** 0.5) + 1):\n        if n % j == 0:\n            if j <= k:\n                ans = min(ans, n // j)\n            if n // j <= k:\n                ans = min(ans, j)\n    return ans\ntest = int(input())\nfor i in range(test):\n    (n, k) = map(int, input().split())\n    print(shovels(n, k))", "import math\n\ndef factors(n):\n    return set((factor for i in range(1, int(n ** 0.5) + 1) if n % i == 0 for factor in (i, n // i)))\nt = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().strip().split())\n    x = factors(n)\n    maxFactor = -math.inf\n    minpackages = math.inf\n    x = sorted(x)\n    for i in x:\n        if i > k:\n            break\n        if i > maxFactor:\n            maxFactor = i\n            minpackages = n // i\n    print(minpackages)\n    t -= 1", "def factors(n):\n    z = int(n ** 0.5) + 1\n    l = []\n    for i in range(1, z):\n        if n % i == 0:\n            l.append(i)\n            k = n // i\n            if k != i:\n                l.append(k)\n    l.sort()\n    return l\n\ndef bsearch(l, k):\n    lo = 0\n    hi = len(l) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if l[mid] == k:\n            return k\n        elif l[mid] < k:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return l[hi]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = factors(n)\n    print(n // bsearch(l, k))", "import math\n\ndef factors(n):\n    l = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n    return l\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    if k >= n:\n        print(1)\n    elif k == 1:\n        print(n)\n    else:\n        l = factors(n)\n        l.sort()\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] <= k:\n                print(n // l[i])\n                break\n    t -= 1", "import math\nimport bisect\n\ndef divisors(n):\n    divs = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.extend([i, int(n / i)])\n    divs.extend([n])\n    return list(set(divs))\nfor ii in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k >= n:\n        print(1)\n    else:\n        p = divisors(n)\n        p.sort()\n        q = bisect.bisect_left(p, k, lo=0, hi=len(p))\n        if p[q] == k:\n            print(int(n / p[q]))\n        else:\n            print(int(n / p[q - 1]))", "def divisors(n):\n    result = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            result.append(i)\n            result.append(n // i)\n    result.sort(reverse=True)\n    return result\n\ndef solve():\n    (n, k) = map(int, input().split())\n    if n < k:\n        print(1)\n    else:\n        divs = divisors(n)\n        for d in divs:\n            if d <= k and n % d == 0:\n                print(n // d)\n                return 0\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n    return 0\nmain()", "from sys import stdin\nfrom math import ceil, sqrt\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\ninput = stdin.readline\n\ndef list_input():\n    return list(map(int, input().split()))\n\ndef sep_input():\n    return map(int, input().split())\n\ndef factors(n, k):\n    l = []\n    m = 1\n    for i in range(1, min(k, ceil(sqrt(n))) + 1):\n        if n % i == 0:\n            if n // i == i:\n                if i > m and i <= k:\n                    m = i\n            else:\n                if i > m and i <= k:\n                    m = i\n                if n // i > m and n // i <= k:\n                    m = n // i\n    return m\nfor _ in range(int(input())):\n    (n, k) = sep_input()\n    print(n // factors(n, k))", "def check(num, k):\n    rec = []\n    n = int(num ** 0.5 // 1)\n    for i in range(1, n + 1):\n        if num % i == 0:\n            temp = num // i\n        else:\n            continue\n        if i <= k:\n            rec.append(i)\n        if temp <= k:\n            rec.append(temp)\n    rec.sort()\n    return rec[-1]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        print(1)\n    else:\n        gcd = check(n, k)\n        print(int(n // gcd))", "def find_divisors(x):\n    s = []\n    for i in range(1, int(pow(x, 0.5)) + 1):\n        if x % i == 0:\n            s.append(i)\n            if i != x / i:\n                s.append(int(x / i))\n    return sorted(s)\nN = int(input())\nanswers = []\nfor i in range(N):\n    (n, k) = map(int, input().split())\n    arr = sorted(find_divisors(n))\n    t = len(arr) - 1\n    flag = False\n    while t >= 0:\n        if arr[t] <= k:\n            flag = True\n            answers.append(n // arr[t])\n            break\n        else:\n            t -= 1\n    if not flag:\n        answers.append(n)\nfor i in answers:\n    print(i)", "def factors(n):\n    return set((factor for i in range(1, int(n ** 0.5) + 1) if n % i == 0 for factor in (i, n // i)))\nt = int(input())\nfor we in range(t):\n    (n, k) = map(int, input().split())\n    g = sorted(list(factors(n)))\n    a = 0\n    i = 0\n    while n // g[i] > k:\n        i += 1\n    print(g[i])", "import collections, heapq, itertools, math, functools\ngroupby = itertools.groupby\nrs = lambda : input()\nri = lambda : int(input())\nrm = lambda : map(int, input().split())\nrai = lambda : [int(x) for x in input().split()]\nfrom functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef solve():\n    if k >= n:\n        return 1\n    l = sorted(list(factors(n)), reverse=True)\n    for factor in l:\n        if factor <= k:\n            return n // factor\nfor t in range(ri()):\n    (n, k) = rm()\n    print(solve())", "from math import sqrt\n\ndef ans(n, k):\n    if n <= k:\n        return 1\n    if n == 2 or n == 3:\n        return n\n    z = int(sqrt(n))\n    fac = []\n    for i in range(2, z + 1):\n        if n % i == 0:\n            fac.append(i)\n    if fac == []:\n        return n\n    fac1 = [i for i in fac]\n    for i in range(len(fac) - 1, -1, -1):\n        fac1.append(n // fac[i])\n    lo = 1\n    i = 0\n    while i < len(fac1):\n        if k >= lo and k < fac1[i]:\n            return n // lo\n        lo = fac1[i]\n        i += 1\n    return n // fac1[-1]\nm = int(input())\nfor i in range(m):\n    a = input().split()\n    n = int(a[0])\n    k = int(a[1])\n    print(ans(n, k))", "import math\n\ndef fact(num):\n    ans = []\n    x = int(math.sqrt(num)) + 1\n    for i in range(1, x):\n        if num % i == 0:\n            t = num // i\n            if i == t:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(t)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    lis = fact(n)\n    lis.sort(reverse=True)\n    for i in lis:\n        if i <= k:\n            print(n // i)\n            break", "def divisors(N):\n    U = int(N ** 0.5) + 1\n    L = [i for i in range(1, U) if N % i == 0]\n    return L + [N // i for i in reversed(L) if N != i * i]\n(T, *NK) = map(int, open(0).read().split())\nfor (n, k) in zip(*[iter(NK)] * 2):\n    D = divisors(n)\n    print(min((n // d for d in D if d <= k)))", "import sys\nimport math\nfrom collections import defaultdict\n\ndef factors(n, k):\n    res = n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            q1 = i\n            q2 = n // i\n            if n // q1 <= k:\n                res = min(res, q1)\n            if n // q2 <= k:\n                res = min(res, q2)\n    return res\n\ndef solve(test):\n    (n, k) = map(int, input().split())\n    ans = factors(n, k)\n    print(ans)\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "def factorize(n):\n    factors = []\n    for i in range(1, min(int(n ** 0.5), k) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i <= k:\n                factors.append(n // i)\n    return sorted(factors, reverse=True)\nimport math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    factors = factorize(n)\n    for f in factors:\n        if n % f == 0:\n            print(n // f)\n            break", "import sys\nimport math\nimport collections\nimport threading\n\ndef main():\n    (n, k) = map(int, input().split())\n    if n <= k:\n        print(1)\n        return\n    if n % k == 0:\n        print(n // k)\n        return\n    lim = 1 + int(math.sqrt(n))\n    ans = n\n    for i in range(2, lim):\n        if n % i == 0:\n            if i <= k:\n                ans = min(ans, n // i)\n            if n // i <= k:\n                ans = min(ans, i)\n                break\n    print(ans)\ninput = sys.stdin.readline\ntn = int(input())\nfor _ in range(tn):\n    main()", "import math\n\ndef solve(n, k):\n    if n <= k:\n        print(1)\n    else:\n        m = int(n ** 0.5 + 1)\n        ans = n\n        for i in range(1, m):\n            if n % i == 0:\n                j = n // i\n                if j <= k:\n                    ans = min(ans, i)\n                if i <= k:\n                    ans = min(ans, j)\n        print(ans)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    solve(n, k)", "for x in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = 1\n    from functools import reduce\n\n    def factors(n):\n        return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n    a = list(factors(n))\n    a.sort()\n    for i in range(len(a) - 1, 0, -1):\n        if a[i] <= k:\n            f = a[i]\n            break\n    print(n // f)", "from math import sqrt\n\ndef dhana(a, b):\n    ans = a\n    x = int(sqrt(a))\n    for i in range(1, x + 1):\n        if a % i == 0:\n            if i <= b:\n                ans = min(ans, a // i)\n            if a // i <= b:\n                ans = min(ans, i)\n    return ans\nn = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    c = dhana(a, b)\n    print(c)", "def max_d(n, k):\n    ans = 1\n    for i in range(1, int(n ** 0.5) + 2):\n        if n % i == 0:\n            if i <= k:\n                ans = max(ans, i)\n            if n // i <= k:\n                ans = max(ans, n // i)\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(n // max_d(n, k))", "from math import sqrt\n\ndef maximum(n, k):\n    res = 1\n    for i in range(1, int(sqrt(n)) + 2):\n        if n % i == 0:\n            if i <= k:\n                res = max(res, i)\n            if n // i <= k:\n                res = max(res, n // i)\n    return res\nfor _ in range(int(input())):\n    (m, l) = [int(i) for i in input().split()]\n    print(m // maximum(m, l))", "from functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nl = int(input())\nm = 1\nfor i in range(l):\n    (c, k) = map(int, input().split())\n    a = factors(c)\n    for t in a:\n        if m < t and t <= k:\n            m = t\n    print(int(c / m))\n    m = 1", "from math import sqrt\n\ndef divisors(n):\n    large_divisors = []\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i * i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield int(divisor)\n\ndef d():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        candidatos = set()\n        if n < k or n == k:\n            print(1)\n            continue\n        for divisor in divisors(max(n, k)):\n            if divisor > k:\n                continue\n            candidatos.add(n // divisor)\n        if len(candidatos) == 2 and 1 in candidatos and (n in candidatos):\n            print(n)\n            continue\n        print(min(candidatos))\nd()", "def check(n, k):\n    l = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            l.append(i)\n            l.append(n // i)\n    l.sort()\n    we = len(l)\n    for i in range(we - 1, -1, -1):\n        if k >= l[i]:\n            return n // l[i]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k >= n:\n        print(1)\n    else:\n        ans = check(n, k)\n        print(ans)"]