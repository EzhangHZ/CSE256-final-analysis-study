["n = int(input())\np = list(map(int, input().split()))\ngrid = [[None] * (i + 1) for i in range(n)]\nfor i in range(n):\n    currx = i\n    curry = i\n    num = p[i]\n    for j in range(num):\n        grid[curry][currx] = num\n        if currx > 0 and grid[curry][currx - 1] is None:\n            currx -= 1\n        else:\n            curry += 1\nfor i in range(n):\n    print(' '.join(map(str, grid[i])))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [[None] * (i + 1) for i in range(n)]\n    i = 0\n    for v in map(int, input().split()):\n        a[i][i] = v\n        x = i\n        y = i\n        for j in range(v - 1):\n            if y > 0 and a[x][y - 1] is None:\n                y -= 1\n                a[x][y] = v\n            elif x + 1 < n and a[x + 1][y] is None:\n                x += 1\n                a[x][y] = v\n            else:\n                print(-1)\n                return\n        i += 1\n    for i in range(n):\n        print(' '.join(map(str, a[i])))\nsolve()", "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        board[i][i] = p[i]\n        px = i\n        py = i\n        for j in range(p[i] - 1):\n            if py == 0:\n                px += 1\n            elif board[px][py - 1] == 0:\n                py -= 1\n            else:\n                px += 1\n            if px >= n or py < 0:\n                print(-1)\n                return\n            board[px][py] = p[i]\n    for i in range(n):\n        print(' '.join([str(x) for x in board[i][0:i + 1]]))\nmain()", "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        board[i][i] = p[i]\n        px = i\n        py = i\n        for j in range(p[i] - 1):\n            if py == 0:\n                px += 1\n            elif board[px][py - 1] == 0:\n                py -= 1\n            else:\n                px += 1\n            if px >= n or py < 0:\n                print(-1)\n                return\n            board[px][py] = p[i]\n    for i in range(n):\n        print(' '.join([str(x) for x in board[i][0:i + 1]]))\nmain()", "def main():\n    n = int(input())\n    P = [int(x) for x in input().split()]\n    sol = [[0] * (i + 1) for i in range(n)]\n    for (i, p) in enumerate(P):\n        sol[i][i] = p\n        row = i\n        col = i\n        for _ in range(p - 1):\n            if col > 0 and sol[row][col - 1] == 0:\n                col -= 1\n            elif row < n - 1 and sol[row + 1][col] == 0:\n                row += 1\n            else:\n                print(-1)\n                return\n            sol[row][col] = p\n    for s in sol:\n        print(' '.join((str(x) for x in s)))\nmain()", "import sys\nfrom collections import deque\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\n_ = int(rl())\nvals = [int(x) for x in rl().split(' ')]\nn = len(vals)\nrows = []\nfor i in range(n):\n    rows.append(deque([vals[i]]))\nremaining = vals\nfor i in range(1, n):\n    remaining = [v for v in remaining if not v == i]\n    for j in range(0, n - i):\n        rows[i + j].appendleft(remaining[j])\nfor r in rows:\n    pra(r)", "n = int(input())\np_list = [int(tt) for tt in input().split()]\n\ndef getResult(n, p_list):\n    res = [[0] * n for _ in range(n)]\n    for i in range(n):\n        res[i][i] = p_list[i]\n    for i in range(n - 1, -1, -1):\n        v = p_list[i]\n        row = i\n        col = i\n        count = 1\n        while count < v:\n            if row + 1 < n and res[row + 1][col] == 0:\n                res[row + 1][col] = v\n                row += 1\n            elif col > 0:\n                res[row][col - 1] = v\n                col -= 1\n            else:\n                return False\n            count += 1\n    return res\nres = getResult(n, p_list)\nif res:\n    for i in range(n):\n        temp = [str(k) for k in res[i][:i + 1]]\n        print(' '.join(temp))\nelse:\n    print(-1)", "def helper(a):\n    pool = [[0] * (i + 1) for i in range(len(a))]\n    for i in range(len(a)):\n        pool[i][i] = a[i]\n        count = a[i] - 1\n        cx = i\n        cy = i\n        while count > 0:\n            if cy > 0 and pool[cx][cy - 1] == 0:\n                pool[cx][cy - 1] = a[i]\n                count -= 1\n                cy -= 1\n            elif cx < len(a) - 1 and pool[cx + 1][cy] == 0:\n                pool[cx + 1][cy] = a[i]\n                count -= 1\n                cx += 1\n            else:\n                return [[-1]]\n    return pool\nn = int(input())\na = list(map(int, input().split(' ')))\nres = helper(a)\nfor j in range(len(res)):\n    print(' '.join(map(str, res[j])))", "n = int(input())\np = map(int, input().split())\nb = [[-1] + [0] * i + [next(p)] + [-1] for i in range(n)] + [[-1] * (n + 1)]\nwrong = False\nfor k in range(n):\n    pk = b[k][k + 1]\n    (x, y) = (k, k + 1)\n    for i in range(1, pk):\n        if b[x - 1][y] == 0:\n            b[x - 1][y] = pk\n            x -= 1\n        elif b[x][y - 1] == 0:\n            b[x][y - 1] = pk\n            y -= 1\n        elif b[x + 1][y] == 0:\n            b[x + 1][y] = pk\n            x += 1\n        else:\n            wrong = True\n            break\n    if wrong:\n        break\nif wrong:\n    print(-1)\nelse:\n    for l in b[:-1]:\n        print(' '.join(map(str, l[1:-1])))", "n = int(input())\np = [int(s) for s in input().split()]\ndiags = [p]\nfor di in range(1, n):\n    skipped = False\n    diags.append([])\n    for i in range(n - di):\n        if diags[di - 1][i] == di:\n            skipped = True\n        if skipped:\n            diags[-1].append(diags[di - 1][i + 1])\n        else:\n            diags[-1].append(diags[di - 1][i])\nfor row in range(n):\n    print(' '.join([str(diags[row - col][col]) for col in range(row + 1)]))", "r = range((n := len((D := [*map(int, [*open(0)][1].split())]))))\ng = [-~y * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range\ng = [(y + 1) * [0] for y in r(n)]\nfor d in r(n):\n    for i in r(n - d):\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r(n):\n    print(*g[i])", "n = int(input())\nstart = list(map(int, input().split()))\ngrid = [[0 for _ in range(n)] for _ in range(n)]\nfor x in range(len(start)):\n    grid[x][x] = start[x]\nfor x in grid:\n    x.insert(0, -1)\n    x.append(-1)\nz = [-1 for _ in range(n)]\ngrid.insert(0, z)\ngrid.append(z)\nfor x in start:\n    curPos = [start.index(x) + 1, start.index(x) + 1]\n    for _ in range(x - 1):\n        if grid[curPos[1]][curPos[0] - 1] == 0:\n            grid[curPos[1]][curPos[0] - 1] = x\n            curPos[0] -= 1\n        elif grid[curPos[1] + 1][curPos[0]] == 0:\n            grid[curPos[1] + 1][curPos[0]] = x\n            curPos[1] += 1\n        else:\n            print(-1)\n            exit()\nfor x in grid[1:-1]:\n    print(' '.join(list(map(str, [y for y in x if y != 0 and y != -1]))))", "r = range((n := len((D := [*map(int, [*open(0)][1].split())]))))\ng = [-~y * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in range(n - d):\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "def get_input(first=False):\n    l = [int(e) for e in input().split()]\n    if first:\n        return l[0]\n    return l\n\ndef next_diagonal(diag, n):\n    k = n - len(diag) + 1\n    diag.pop(diag.index(k))\n    return diag\n\ndef fill_sol(sol, diag, n):\n    o = n - len(diag)\n    for (i, d) in enumerate(diag):\n        sol[i + o][i] = d\nn = get_input(True)\ndiag = get_input()\nsol = [[None] * i for i in range(1, n + 1)]\nfill_sol(sol, diag, n)\nfor _ in range(n - 1):\n    diag = next_diagonal(diag, n)\n    fill_sol(sol, diag, n)\nfor b in sol:\n    print(*b)", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "from collections import deque, Counter\nfrom math import sqrt, ceil, factorial\nfrom sys import stdin, stdout\nimport sys\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef inp():\n    return int(input())\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef st():\n    return input().strip()\nans = []\n\ndef solve():\n    n = inp()\n    arr = read()\n    mat = [[0] * 1001 for i in range(n + 2)]\n    for i in range(n):\n        x = y = i + 1\n        for j in range(arr[i]):\n            mat[x][y] = arr[i]\n            if y > 1 and (not mat[x][y - 1]):\n                y -= 1\n            else:\n                x += 1\n    for i in range(n):\n        ans.append(mat[i + 1][1:i + 2])\nsolve()\nfor i in ans:\n    print(*i)", "from collections import deque, Counter\nfrom math import sqrt, ceil, factorial\nfrom sys import stdin, stdout\nimport sys\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef inp():\n    return int(input())\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef st():\n    return input().strip()\nans = []\n\ndef solve():\n    n = inp()\n    arr = read()\n    mat = [[0] * (n + 2) for i in range(n + 2)]\n    for i in range(n):\n        x = y = i + 1\n        for j in range(arr[i]):\n            mat[x][y] = arr[i]\n            if y > 1 and (not mat[x][y - 1]):\n                y -= 1\n            else:\n                x += 1\n    for i in range(n):\n        ans.append(mat[i + 1][1:i + 2])\nsolve()\nfor i in ans:\n    print(*i)", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "n = int(input())\np = list(map(int, input().split()))\nl = []\nfor i in range(1, n + 1):\n    l.append([None] * i)\nfor i in range(n):\n    x = i\n    y = i\n    num = p[i]\n    for j in range(num):\n        l[y][x] = num\n        if x > 0 and l[y][x - 1] is None:\n            x = x - 1\n        else:\n            y = y + 1\nfor i in range(n):\n    print(*l[i])", "n = int(input())\nl = [*map(int, input().split())]\na = [[0] * i for i in range(1, n + 1)]\nfor i in reversed(range(n)):\n    p = i\n    q = i\n    for j in range(l[i]):\n        if p != n - 1:\n            if a[p + 1][q] == 0:\n                a[p][q] = l[i]\n                p += 1\n            else:\n                a[p][q] = l[i]\n                q -= 1\n        else:\n            a[p][q] = l[i]\n            q -= 1\nfor i in range(n):\n    print(*a[i])", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nimport sys\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    n = nin()\n    arr = read()\n    mat = [[0] * n for i in range(n)]\n    for i in range(n):\n        x = y = i\n        for j in range(arr[i]):\n            mat[x][y] = arr[i]\n            if y == 0 or mat[x][y - 1]:\n                x += 1\n            else:\n                y -= 1\n    for i in range(n):\n        ans_.append(mat[i][:i + 1])\nsolve()\nfor i in ans_:\n    print(*i)", "n = int(input())\ndiagonal = list(map(int, input().split()))\nmatrix = [[None for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    matrix[i][i] = diagonal[i]\ncur = 1\nrow = 0\nwhile row < n:\n    flag = True\n    for i in range(n - row):\n        temp = matrix[row + i][i]\n        if temp == cur:\n            flag = False\n            continue\n        if flag:\n            matrix[row + i + 1][i] = temp\n        else:\n            matrix[row + i][i - 1] = temp\n    row += 1\n    cur += 1\nfor i in range(n):\n    print(*matrix[i][:i + 1])", "n = int(input())\np = list(map(int, input().split()))\nans = [[0] * (i + 1) for i in range(n)]\nfor i in range(n):\n    ans[i][i] = p[i]\nfor i in range(n):\n    num = p[i] - 1\n    k = i\n    ind = i\n    while num:\n        if k - 1 >= 0 and ans[ind][k - 1] == 0:\n            k -= 1\n        else:\n            ind += 1\n        num -= 1\n        ans[ind][k] = ans[i][i]\nfor i in ans:\n    print(*i)", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "def readline():\n    return map(int, input().split())\n\ndef main():\n    (n,) = readline()\n    p = list(readline())\n    ans = [[None] * i + [pi] for (i, pi) in enumerate(p)]\n    for (i, pi) in enumerate(p):\n        (x, y) = (i, i)\n        for __ in range(pi - 1):\n            if y and ans[x][y - 1] is None:\n                y -= 1\n            else:\n                x += 1\n            assert ans[x][y] is None\n            ans[x][y] = pi\n    for row in ans:\n        print(*row)\nmain()", "def findsol(mapp, n):\n    for j in range(n - 1, -1, -1):\n        put(mapp, n, j, mapp[j][j])\n    return mapp\n\ndef put(mapp, n, j, val):\n    step = [(1, 0), (0, -1)]\n    (cy, cx) = (j, j)\n    for i in range(val - 1):\n        for (sy, sx) in step:\n            (ny, nx) = (cy + sy, cx + sx)\n            if valid(ny, nx, mapp, n):\n                mapp[ny][nx] = val\n                (cy, cx) = (ny, nx)\n                break\n\ndef print_map(mapp, n):\n    for i in range(n):\n        print(' '.join([str(each) if each != 0 else ' ' for each in mapp[i]]))\n\ndef valid(ny, nx, mapp, n):\n    return 0 <= ny and ny < n and (0 <= nx) and (nx < n) and (mapp[ny][nx] == 0)\nn = int(input())\ndiag = list(map(int, input().split()))\nmapp = {i: [0 for j in range(n)] for i in range(n)}\nfor i in range(n):\n    mapp[i][i] = diag[i]\nre = findsol(mapp, n)\nprint_map(re, n)", "n = int(input())\ndiag = list(map(int, input().split()))\ngrid = [[0 for x in range(n)] for y in range(n)]\nfor d in range(n):\n    for i in range(n - d):\n        grid[d + i][i] = diag[i]\n    diag.remove(d + 1)\nfor line in grid:\n    print(*(c for c in line if c))", "n = int(input())\ndiag = list(map(int, input().split()))\ngrid = [[0 for x in range(n)] for y in range(n)]\nfor d in range(n):\n    for i in range(n - d):\n        grid[d + i][i] = diag[i]\n    diag.remove(d + 1)\nfor line in grid:\n    print(*(c for c in line if c))", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "D = [*map(int, [*open(0)][1].split())]\nn = len(D)\nr = range(n)\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "r = range((n := len((D := [*map(int, [*open(0)][1].split())]))))\ng = [(y + 1) * [0] for y in r]\nfor d in r:\n    for i in r[:n - d]:\n        g[d + i][i] = D[i]\n    D.remove(d + 1)\nfor i in r:\n    print(*g[i])", "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n    l.append([0] * (i + 1))\nfor x in range(n):\n    i = j = x\n    c = a[x]\n    while c > 0:\n        l[i][j] = a[x]\n        if j > 0 and l[i][j - 1] == 0:\n            j -= 1\n        else:\n            i += 1\n        c -= 1\nfor y in range(n):\n    print(*l[y])", "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n    l.append([0] * (i + 1))\nfor x in range(n):\n    i = j = x\n    c = a[x]\n    while c > 0:\n        l[i][j] = a[x]\n        if j > 0 and l[i][j - 1] == 0:\n            j -= 1\n        else:\n            i += 1\n        c -= 1\nfor y in range(n):\n    print(*l[y])", "n = int(input())\npermutation = list(map(int, input().split()))\nmatrix = [[0] * n for _ in range(n)]\n\ndef recursion(nor, curi, curj, p):\n    if nor == 0:\n        return\n    if curj - 1 >= 0 and matrix[curi][curj - 1] == 0:\n        matrix[curi][curj - 1] = p\n        recursion(nor - 1, curi, curj - 1, p)\n    else:\n        matrix[curi + 1][curj] = p\n        recursion(nor - 1, curi + 1, curj, p)\ni = 0\nfor p in permutation:\n    matrix[i][i] = p\n    recursion(p - 1, i, i, p)\n    i += 1\nfor j in range(1, n + 1):\n    print(*matrix[j - 1][:j])", "def main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Ans = [[0] * N for _ in range(N)]\n    OH = OW = 0\n    for Val in P:\n        H = OH\n        W = OW\n        for _ in range(Val):\n            Ans[H][W] = Val\n            if W - 1 >= 0 and (not Ans[H][W - 1]):\n                W -= 1\n            else:\n                H += 1\n        OH += 1\n        OW += 1\n    for i in range(N):\n        print(*Ans[i][:i + 1])\nmain()", "n = int(input())\ndiag = [int(i) for i in input().strip().split()]\nlist_n = [[0] * n for i in range(n)]\nfor i in range(n):\n    list_n[i][i] = diag[i]\nfor i in range(n):\n    row = i\n    col = i - 1\n    val = list_n[i][i]\n    while val - 1 != 0:\n        if col >= 0 and list_n[row][col] == 0:\n            list_n[row][col] = list_n[i][i]\n            val -= 1\n            col -= 1\n        elif col < 0 or list_n[row][col] != 0:\n            col += 1\n            row += 1\nfor i in range(n):\n    print(' '.join(map(str, list_n[i][0:i + 1])))", "from sys import stdin, stdout\nimport math\n\ndef ii():\n    return int(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return stdin.readline()\nn = ii()\ninp = li()\nans = [[0 for j in range(n)] for i in range(n)]\nfor i in range(n):\n    val = inp[i]\n    r = i\n    c = i\n    ans[r][c] = val\n    for j in range(1, val):\n        if c - 1 >= 0 and ans[r][c - 1] == 0:\n            c = c - 1\n        else:\n            r = r + 1\n        ans[r][c] = val\nfor i in range(n):\n    print(*ans[i][:i + 1])", "n = int(input())\np = list(map(int, input().split()))\nans = [[None for j in range(i + 1)] for i in range(n)]\nfor i in range(n):\n    pi = p[i]\n    size_i = p[i]\n    (x, y) = (i, i)\n    while size_i > 0:\n        ans[x][y] = pi\n        size_i -= 1\n        if y >= 1 and ans[x][y - 1] is None:\n            y = y - 1\n        else:\n            x = x + 1\nfor i in range(n):\n    print(*ans[i])", "n = int(input())\ndiag = list(map(int, input().split()))\na = [[0] * i for i in range(1, n + 1)]\nfor i in range(n):\n    (j, k) = (i, i)\n    for l in range(diag[i]):\n        a[j][k] = diag[i]\n        if k != 0 and a[j][k - 1] == 0:\n            k -= 1\n        else:\n            j += 1\nfor i in a:\n    print(*i)", "ans = []\nn = int(input())\ncells = [int(x) for x in input().split(' ')]\nfor i in range(n):\n    ans.append([-1] * n)\nfor i in range(n):\n    ans[i][i] = cells[i]\n    amount = cells[i] - 1\n    x = i - 1\n    y = i\n    while amount > 0:\n        if x > 0 and ans[y][x] == -1:\n            ans[y][x] = cells[i]\n            x -= 1\n            amount -= 1\n        elif x == 0 and ans[y][x] == -1:\n            ans[y][x] = cells[i]\n            y += 1\n            amount -= 1\n        else:\n            x += 1\n            y += 1\nfor i in range(n):\n    ans_str = ''\n    for x in range(i + 1):\n        ans_str += str(ans[i][x]) + ' '\n    print(ans_str)", "n = int(input())\ndiag = list(map(int, input().split()))\na = [[0] * i for i in range(1, n + 1)]\nfor i in range(n):\n    (j, k) = (i, i)\n    for l in range(diag[i]):\n        a[j][k] = diag[i]\n        if k != 0 and a[j][k - 1] == 0:\n            k -= 1\n        else:\n            j += 1\nfor i in a:\n    print(*i)", "n = int(input())\n(*arr,) = map(int, input().split())\nans = [[0 for j in range(i)] for i in range(1, n + 1)]\nfor i in range(n):\n    ans[i][i] = arr[i]\n    x = y = i\n    while arr[i] > 1:\n        if y - 1 >= 0 and ans[x][y - 1] == 0:\n            y -= 1\n        else:\n            x += 1\n        ans[x][y] = ans[i][i]\n        arr[i] -= 1\nfor x in ans:\n    print(*x)", "n = int(input())\na = list(map(int, input().split()))\nans = [[0] * i for i in range(1, n + 1)]\nfor i in range(n):\n    ans[i][i] = a[i]\n    x = y = i\n    while a[i] > 1:\n        if y - 1 >= 0 and ans[x][y - 1] == 0:\n            y -= 1\n        else:\n            x += 1\n        ans[x][y] = ans[i][i]\n        a[i] -= 1\nfor x in ans:\n    print(*x)", "def ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\nfor t in range(1):\n    n = ii()\n    p = li()\n    ans = [[-1 for j in range(n)] for i in range(n)]\n    for index in range(n):\n        x = p[index]\n        i = index\n        j = index\n        while x > 0:\n            ans[i][j] = p[index]\n            if j != 0:\n                if ans[i][j - 1] == -1:\n                    j = j - 1\n                else:\n                    i += 1\n            else:\n                i += 1\n            x -= 1\n    for i in range(n):\n        print(*ans[i][:i + 1])", "def show(lis):\n    ln = len(lis)\n    for i in range(ln):\n        li = lis[i][:i + 1]\n        print(*li)\n\ndef solve(n, d):\n    m = [[0] * n for i in range(n)]\n    for (i, it) in enumerate(d):\n        m[i][i] = it\n    for i in range(n):\n        row = set()\n        (cx, cy) = (i, i)\n        cur = m[i][i]\n        todo = m[i][i] - 1\n        while todo and cx < n and (cy < n):\n            if cy > 0 and m[cx][cy - 1] == 0:\n                todo -= 1\n                cy -= 1\n            elif cx < n - 1 and m[cx + 1][cy] == 0:\n                todo -= 1\n                cx += 1\n            m[cx][cy] = cur\n            if cy == 0:\n                row.add(cx)\n        rows = list(row)\n        rows.sort()\n        for cx in rows:\n            if todo == 0:\n                break\n            cy = 0\n            while m[cx][cy] == cur:\n                cy += 1\n            while cy <= cx and m[cx][cy] == cur and todo:\n                todo -= 1\n                m[cx][cy] = cur\n        if todo:\n            print(-1)\n            return\n    show(m)\nn = int(input())\nd = list(map(int, input().split()))\nsolve(n, d)", "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor jj in range(n):\n    s.append([0] * n)\nfor jj in range(n):\n    (r, c) = (jj, jj)\n    for kk in range(a[jj]):\n        s[r][c] = a[jj]\n        if c > 0:\n            if not s[r][c - 1]:\n                c -= 1\n            else:\n                r += 1\n        else:\n            r += 1\nfor (kk, jj) in enumerate(s):\n    print(*jj[:kk + 1])", "n = int(input())\n(*p,) = map(int, input().split())\nmtx = [[0] * n for _ in ' ' * n]\nfor i in range(n):\n    (x, y) = (i, i)\n    color = p[i]\n    mtx[i][i] = color\n    for j in range(p[i] - 1):\n        if x > 0 and mtx[y][x - 1] == 0:\n            x -= 1\n        elif y < n - 1 and mtx[y + 1][x] == 0:\n            y += 1\n        else:\n            print(-1)\n            break\n        mtx[y][x] = color\n    else:\n        continue\n    break\nelse:\n    for (i, row) in enumerate(mtx):\n        print(*row[:i + 1])", "def main():\n    n = int(input())\n    w = [[0 for j in range(n)] for i in range(n)]\n    d = [int(v) for v in input().split()]\n    for i in range(n):\n        w[i][i] = d[i]\n    for s in range(n):\n        meet = False\n        for j in range(n - s):\n            i = s + j\n            if w[i][j] == s + 1:\n                meet = True\n            elif meet:\n                w[i][j - 1] = w[i][j]\n            else:\n                w[i + 1][j] = w[i][j]\n    for i in range(n):\n        for j in range(i + 1):\n            print(w[i][j], end=' ')\n        print()\nmain()", "def get_input(first=False):\n    l = [int(e) for e in input().split()]\n    if first:\n        return l[0]\n    return l\n\ndef next_diagonal(diag, n):\n    new_diag = []\n    k = len(diag) - 1\n    unused = set([n - i for i in range(k)])\n    for i in range(k):\n        if diag[i] in unused:\n            new_diag.append(diag[i])\n            unused.remove(diag[i])\n        else:\n            new_diag.append(diag[i + 1])\n            unused.remove(diag[i + 1])\n    return new_diag\n\ndef fill_sol(sol, diag, n):\n    o = n - len(diag)\n    for (i, d) in enumerate(diag):\n        sol[i + o][i] = d\nn = get_input(True)\ndiag = get_input()\nsol = [[None] * i for i in range(1, n + 1)]\nfill_sol(sol, diag, n)\nfor _ in range(n - 1):\n    diag = next_diagonal(diag, n)\n    fill_sol(sol, diag, n)\nfor b in sol:\n    print(*b)", "n = int(input())\nmyOut = [[0] * i for i in range(1, n + 1)]\ndiagonal = list(map(int, input().split()))\nfor i in range(n - 1, -1, -1):\n    p = i\n    q = i\n    for j in range(diagonal[i]):\n        myOut[p][q] = diagonal[i]\n        if p == n - 1:\n            q -= 1\n        elif myOut[p + 1][q] == 0:\n            p += 1\n        else:\n            q -= 1\nfor i in range(n):\n    print(*myOut[i])", "n = int(input())\np = list(map(int, input().split()))\nboard = []\nfor i in range(n):\n    board.append([0 for i in range(n)])\nfor i in range(n):\n    board[i][i] = p[i]\n    px = i\n    py = i\n    for j in range(p[i] - 1):\n        if py == 0:\n            px += 1\n        elif board[px][py - 1] == 0:\n            py -= 1\n        else:\n            px += 1\n        if px >= n or py < 0:\n            print(-1)\n            exit()\n        board[px][py] = p[i]\nfor i in range(n):\n    print(*board[i][0:i + 1])", "def inputi():\n    return int(input())\n\ndef inputli():\n    return list(map(int, input().split(' ')))\n\ndef inputls():\n    return list(map(str, input().split(' ')))\n\ndef print_list(lista):\n    s = ''\n    for i in lista[:-1]:\n        if i != None:\n            s += str(i) + ' '\n    if lista[-1] != None:\n        s += str(lista[-1])\n    return s\n\ndef llenar(ans, row, column, cnt, value):\n    if cnt == 1:\n        return 0\n    if ans[row][max(column - 1, 0)] == None:\n        ans[row][max(column - 1, 0)] = value\n        return llenar(ans, row, max(column - 1, 0), cnt - 1, value)\n    elif ans[min(row + 1, len(ans) - 1)][column] == None:\n        ans[min(row + 1, len(ans) - 1)][column] = value\n        return llenar(ans, min(row + 1, len(ans) - 1), column, cnt - 1, value)\n    else:\n        return -1\n\ndef solve():\n    n = inputi()\n    diagonal = inputli()\n    ans = [[None] * n for i in range(n)]\n    for i in range(n):\n        ans[i][i] = diagonal[i]\n    for (idx, x) in enumerate(diagonal):\n        auxiliar = llenar(ans, idx, idx, x, x)\n        if auxiliar == -1:\n            break\n    if ans == -1:\n        print(-1)\n    else:\n        for i in range(n):\n            print(print_list(ans[i]))\n    return 0\nsolve()", "n = int(input())\np = list(map(int, input().split()))\na = []\nfor i in range(n):\n    a.append([0 for j in range(i + 1)])\n    a[i][-1] = p[i]\nfor i in range(n):\n    p = q = i\n    c = a[p][q]\n    for j in range(c - 1):\n        if q - 1 >= 0 and a[p][q - 1] == 0:\n            a[p][q - 1] = c\n            q -= 1\n        else:\n            a[p + 1][q] = c\n            p += 1\nfor i in range(n):\n    print(*a[i])", "n = int(input())\nsol = [[]]\nfor i in range(n):\n    sol.append([0 for j in range(i + 2)])\ni = 0\nfor x in input().split():\n    i += 1\n    sol[i][-1] = int(x)\nfor start in range(1, n + 1):\n    count = sol[start][-1] - 1\n    r = start\n    c = start\n    while count != 0:\n        if c - 1 > 0 and sol[r][c - 1] == 0:\n            c -= 1\n            count -= 1\n            sol[r][c] = sol[start][-1]\n        else:\n            r += 1\n            count -= 1\n            sol[r][c] = sol[start][-1]\n    start += 1\nfor l in sol[1:]:\n    print(*l[1:])", "n = int(input())\n(*p,) = map(int, input().split())\nmtx = [[0] * n for _ in ' ' * n]\nfor i in range(n):\n    (x, y) = (i, i)\n    color = p[i]\n    mtx[i][i] = color\n    for j in range(p[i] - 1):\n        if x > 0 and mtx[y][x - 1] == 0:\n            x -= 1\n        elif y < n - 1 and mtx[y + 1][x] == 0:\n            y += 1\n        else:\n            print(-1)\n            break\n        mtx[y][x] = color\n    else:\n        continue\n    break\nelse:\n    for (i, row) in enumerate(mtx):\n        print(*row[:i + 1])", "n = int(input())\narr = list(map(int, input().split()))\nt = [[None for x in range(n)] for x in range(n)]\nfor i in range(n):\n    t[i][i] = arr[i]\n\ndef solve():\n    k = 0\n    while k < n:\n        count = t[k][k] - 1\n        num = t[k][k]\n        if k == n - 1:\n            if t[k][k - 1] != None and t[k][k] != 1:\n                print(-1)\n                return\n        if k > 0 and k < n - 1 and (t[k][k - 1] != None) and (t[k + 1][k] != None) and (t[k][k] != 1):\n            print(-1)\n            return\n        i = k\n        j = k - 1\n        k += 1\n        while count > 0:\n            if j < 0:\n                i += 1\n                j = 0\n            if t[i][j] == None:\n                t[i][j] = num\n                count -= 1\n                j -= 1\n            else:\n                j += 1\n                i += 1\n    for i in range(len(t)):\n        for j in range(i + 1):\n            print(t[i][j], end=' ')\n        print()\nsolve()", "n = int(input())\n(*p,) = map(int, input().split())\nmtx = [[0] * n for _ in ' ' * n]\nfor i in range(n):\n    (x, y) = (i, i)\n    color = p[i]\n    mtx[i][i] = color\n    for j in range(p[i] - 1):\n        if x > 0 and mtx[y][x - 1] == 0:\n            x -= 1\n        elif y < n - 1 and mtx[y + 1][x] == 0:\n            y += 1\n        else:\n            print(-1)\n            break\n        mtx[y][x] = color\n    else:\n        continue\n    break\nelse:\n    for (i, row) in enumerate(mtx):\n        print(*row[:i + 1])", "n = int(input())\nl = list(map(int, input().split()))\nm = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    m[i][i] = l[i]\nfor i in range(n - 1, -1, -1):\n    t = m[i][i] - 1\n    x = i\n    y = i\n    while t:\n        if x < n - 1 and m[x + 1][y] == 0:\n            m[x + 1][y] = m[i][i]\n            x += 1\n        else:\n            m[x][y - 1] = m[i][i]\n            y -= 1\n        t -= 1\nfor i in range(n):\n    print(*m[i][:i + 1])", "def Solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    a = [i for i in range(n + 1)]\n    ans = []\n    for i in range(n):\n        ans.append([0 for i in range(n)])\n    for i in range(n):\n        ans[i][i] = A[i]\n        a[i + 1] -= 1\n    for i in range(1, n + 1):\n        k = A[i - 1]\n        (p, q) = (i - 1, i - 1)\n        while a[k] > 0:\n            if q > 0 and ans[p][q - 1] == 0:\n                q -= 1\n                ans[p][q] = k\n            else:\n                p += 1\n                ans[p][q] = k\n            a[k] -= 1\n    for i in range(n):\n        for j in range(i + 1):\n            print(ans[i][j], end=' ')\n        print()\nSolve()", "n = int(input())\narr = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    ans.append([0] * i + [arr[i]])\nfor i in range(n):\n    num = arr[i] - 1\n    (x, y) = (i, i)\n    while num > 0:\n        if 0 <= y - 1 < i:\n            if ans[x][y - 1] == 0:\n                ans[x][y - 1] = arr[i]\n                y = y - 1\n                num = num - 1\n            elif i <= x + 1 < n:\n                if ans[x + 1][y] == 0:\n                    ans[x + 1][y] = arr[i]\n                    x = x + 1\n                    num = num - 1\n        elif i <= x + 1 < n:\n            if ans[x + 1][y] == 0:\n                ans[x + 1][y] = arr[i]\n                x = x + 1\n                num = num - 1\nfor ar in ans:\n    print(*ar)", "n = int(input())\nA = [[0] * n for _ in range(n)]\n\ndef search(i, j, c, v):\n    if c == 0 or i < 0 or i >= n or (j < 0) or (j >= n) or (j > i) or (A[i][j] != 0):\n        return c\n    A[i][j] = v\n    c = search(i - 1, j, c - 1, v)\n    c = search(i, j - 1, c, v)\n    c = search(i + 1, j, c, v)\n    c = search(i, j + 1, c, v)\n    return c\nfor (i, v) in enumerate(map(int, input().split())):\n    rem = search(i, i, v, v)\n    if rem > 0:\n        print(-1)\n        exit()\nfor i in range(n):\n    print(' '.join(map(str, A[i][:i + 1])))", "n = int(input())\nl = list(map(int, input().split()))\nk = []\nfor i in range(n):\n    k.append([-1] * (i + 1))\nfor i in range(n):\n    k[i][i] = l[i]\nfor i in range(n):\n    a = i\n    b = i\n    g = l[i] - 1\n    while g > 0:\n        if b > 0 and k[a][b - 1] == -1:\n            k[a][b - 1] = l[i]\n            g -= 1\n            b -= 1\n        else:\n            k[a + 1][b] = l[i]\n            a += 1\n            g -= 1\nfor x in k:\n    print(*(i for i in x))", "n = int(input())\nl = list(map(int, input().split()))\nm = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    m[i][i] = l[i]\nfor i in range(n - 1, -1, -1):\n    t = m[i][i] - 1\n    x = i\n    y = i\n    while t:\n        if x < n - 1 and m[x + 1][y] == 0:\n            m[x + 1][y] = m[i][i]\n            x += 1\n        else:\n            m[x][y - 1] = m[i][i]\n            y -= 1\n        t -= 1\nfor i in range(n):\n    print(*m[i][:i + 1])", "n = int(input())\nl = list(map(int, input().split()))\nans = [[0] * n for i in range(n)]\nfor i in range(n):\n    v = l[i]\n    c = v\n    k = i\n    j = i\n    f = 0\n    while c > 0:\n        if j >= 0 and ans[k][j] == 0:\n            ans[k][j] = v\n            j -= 1\n            c -= 1\n            f = 1\n        else:\n            if f == 1:\n                j += 1\n            k += 1\n            f = 0\nfor i in range(n):\n    for j in range(i + 1):\n        print(ans[i][j], end=' ')\n    print()", "n = int(input())\narr = []\ndiag = [int(x) for x in input().split()]\nfor i in range(n):\n    temp = [0 for x in range(i + 1)]\n    temp[i] = diag[i]\n    arr.append(temp)\nfor i in range(n):\n    c = diag[i]\n    val = c\n    arr[i][i] = 0\n    j = i\n    temp = i\n    while c > 0:\n        while j > -1 and c > 0:\n            if arr[temp][j] != 0:\n                break\n            arr[temp][j] = val\n            c -= 1\n            j -= 1\n        j += 1\n        temp += 1\nfor i in range(n):\n    print(*arr[i])", "def fill(i, j, val, cnt, n):\n    if cnt[0] == 0:\n        return\n    if j < 0:\n        return\n    if i >= n:\n        return\n    if i == j:\n        fill(i, j - 1, val, cnt, n)\n        fill(i + 1, j, val, cnt, n)\n    else:\n        if ans[i][j] != 0:\n            return\n        ans[i][j] = val\n        cnt[0] -= 1\n        fill(i, j - 1, val, cnt, n)\n        fill(i + 1, j, val, cnt, n)\nn = int(input())\narr = list(map(int, input().split()))\nans = [[0 for j in range(i)] for i in range(1, n + 1)]\nfor i in range(n):\n    ans[i][i] = arr[i]\n    fill(i, i, arr[i], [arr[i] - 1], n)\nfor x in ans:\n    print(*x)", "n = int(input())\narray = list(map(int, input().split()))\nboard = [[0 for x in range(n)] for x in range(n)]\nfor i in range(n):\n    board[i][i] = array[i]\nfor i in range(n - 1, -1, -1):\n    val = board[i][i]\n    count = val\n    (x, y) = (i, i)\n    while count:\n        board[x][y] = val\n        if x < n - 1 and board[x + 1][y] == 0:\n            x += 1\n        else:\n            y -= 1\n        count -= 1\nfor i in range(n):\n    for j in range(i + 1):\n        print(board[i][j], end=' ')\n    print('')", "def valuePlacer(i, j, val, count):\n    if count:\n        if j - 1 >= 0 and matrix[i][j - 1] == 0:\n            matrix[i][j - 1] = val\n            count -= 1\n            valuePlacer(i, j - 1, val, count)\n        elif i + 1 < n and matrix[i + 1][j] == 0:\n            matrix[i + 1][j] = val\n            count -= 1\n            valuePlacer(i + 1, j, val, count)\nn = int(input())\nmatrix = [[0 for j in range(n)] for i in range(n)]\nval = list(map(int, input().split()))\nfor i in range(n):\n    matrix[i][i] = val[i]\nfor i in range(n):\n    valuePlacer(i, i, matrix[i][i], matrix[i][i] - 1)\nfor i in matrix:\n    for j in i:\n        if j == 0:\n            break\n        print(j, end=' ')\n    print()", "def read_ints():\n    return map(int, input().split())\n\ndef fill(A, i, j, with_num, count):\n    if with_num == count:\n        return\n    if A[i][j] == 0:\n        A[i][j] = with_num\n        count += 1\n    if j > 0 and A[i][j - 1] == 0:\n        fill(A, i, j - 1, with_num, count)\n    elif i < len(A) - 1 and A[i + 1][j] == 0:\n        fill(A, i + 1, j, with_num, count)\nn = int(input())\ndiag = read_ints()\nA = [[0] * n for _ in range(n)]\nfor (i, n) in enumerate(diag):\n    fill(A, i, i, n, 0)\nfor row in A:\n    print(*[el for el in row if el])", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf, gcd, log\nfrom collections import defaultdict\n\ndef valid(x, y):\n    if x < 0 or x >= n:\n        return False\n    if y < 0 or y >= n:\n        return False\n    if m[x][y] != 0:\n        return False\n    return True\n\ndef dfs(x, y, cnt, val):\n    if cnt == 0:\n        return\n    m[x][y] = val\n    if valid(x, y - 1):\n        dfs(x, y - 1, cnt - 1, val)\n    else:\n        dfs(x + 1, y, cnt - 1, val)\nn = int(input())\nm = [[0 for _ in range(n)] for _ in range(n)]\na = list(map(int, input().split()))\nfor i in range(n):\n    m[i][i] = a[i]\nfor i in range(n):\n    dfs(i, i, a[i], a[i])\nfor i in range(n):\n    for j in range(i + 1):\n        print(m[i][j], end=' ')\n    print()", "from collections import Counter as cc\nfrom copy import deepcopy as dc\nimport random\nimport math\nMAX_SIZE = 1e+18\ntry:\n    n = int(input())\n    a = list(map(int, input().split()))\n    mat = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        mat[i][i] = a[i]\n    flag = 0\n    for i in range(n):\n        (k, j, l) = (a[i] - 1, i, i)\n        while k > 0:\n            if j - 1 >= 0 and mat[l][j - 1] == 0:\n                mat[l][j - 1] = a[i]\n                k -= 1\n                j -= 1\n            elif l + 1 < n and mat[l + 1][j] == 0:\n                mat[l + 1][j] = a[i]\n                l += 1\n                k -= 1\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 1:\n        print(-1)\n    else:\n        for i in range(n):\n            print(*mat[i][:i + 1])\nexcept EOFError as e:\n    pass", "n = int(input())\ndiagonal = [int(s) for s in input().split()]\narray = []\nfor i in range(n):\n    array.append([0] * i + [diagonal[i]])\npossible = True\n\ndef is_allowed(ar, x, y):\n    if x < 0:\n        return False\n    if y < 0:\n        return False\n    if x > len(ar) - 1:\n        return False\n    if y > len(ar[x]) - 1:\n        return False\n    if ar[x][y]:\n        return False\n    return True\n\ndef next_step(ar, x, y):\n    if is_allowed(ar, x, y - 1):\n        return (x, y - 1)\n    if is_allowed(ar, x + 1, y):\n        return (x + 1, y)\nfor (i, dn) in enumerate(diagonal):\n    cursor = [i, i]\n    if not possible:\n        break\n    for j in range(dn):\n        (x, y) = cursor\n        if array[x][y] == 0:\n            array[x][y] = dn\n        cursor = next_step(array, x, y)\n        if cursor is None and j < dn - 1:\n            possible = False\n            break\nif not possible:\n    print(-1)\nelse:\n    for l in array:\n        print(' '.join([str(k) for k in l]))", "n = int(input())\narr = [0] + list(map(int, input().split()))\nminima = 0\nans = [[0 for i in range(n + 1)] for j in range(n + 1)]\nfor i in range(1, n + 1):\n    ans[i][n + 1 - i] = arr[i]\n    if arr[i] == 1:\n        minima = i\nminima2 = 0\nfor k in range(n, 1, -1):\n    for i in range(minima, k):\n        j = k - i\n        ans[i][j] = ans[i + 1][j]\n        if ans[i][j] == n + 2 - k:\n            minima2 = i\n    for i in range(minima - 1, 0, -1):\n        j = k - i\n        ans[i][j] = ans[i][j + 1]\n        if ans[i][j] == n + 2 - k:\n            minima2 = i\n    minima = minima2\nfor i in range(n, 0, -1):\n    for j in range(1, n + 2 - i):\n        print(ans[j][i], end=' ')\n    print()", "n = int(input())\nL = [int(x) for x in input().split()]\nArem = [(i + 1) * [0] for i in range(n)]\nfor k in range(n):\n    Arem[k][k] = L[k]\nfor k in range(n):\n    counter = 1\n    i = k\n    j = k\n    while counter < L[k]:\n        if j >= 1 and Arem[i][j - 1] == 0:\n            Arem[i][j - 1] = L[k]\n            j = j - 1\n        elif i < n - 1 and Arem[i + 1][j] == 0:\n            Arem[i + 1][j] = L[k]\n            i = i + 1\n        counter += 1\nfor liste in Arem:\n    for elem in liste:\n        print(elem, end=' ')\n    print()", "n = int(input())\nP = list(map(int, input().split()))\nA = []\nfor i in range(n):\n    A.append([-1] * n)\nfor i in range(n):\n    A[i][i] = P[i]\n    cnt = P[i] - 1\n    j = i - 1\n    k = i\n    while cnt > 0:\n        if j > 0 and A[k][j] == -1:\n            A[k][j] = P[i]\n            j -= 1\n            cnt -= 1\n        elif j == 0 and A[k][j] == -1:\n            A[k][j] = P[i]\n            k += 1\n            cnt -= 1\n        else:\n            j += 1\n            k += 1\nfor i in range(n):\n    for j in range(i + 1):\n        print(A[i][j], end=' ')\n    print('')", "n = int(input())\narr = list(map(int, input().split()))\nmat = [[-1 for x in range(n)] for x in range(n)]\nfor i in range(n - 1, -1, -1):\n    num = arr[i]\n    x = i\n    y = i\n    for i in range(num):\n        mat[x][y] = num\n        if x != n - 1:\n            if mat[x + 1][y] == -1:\n                x = x + 1\n                y = y\n            else:\n                x = x\n                y = y - 1\n        else:\n            x = x\n            y = y - 1\nfor i in range(n):\n    for j in range(i + 1):\n        print(mat[i][j], end=' ')\n    print()", "n = int(input())\nl = list(map(int, input().split()))\nmat = [[0] * i for i in range(1, n + 1)]\nfor i in range(n):\n    (ox, oy) = (i, i)\n    m = l[i]\n    c = m\n    mat[ox][oy] = m\n    c -= 1\n    x = ox\n    y = oy\n    while c > 0:\n        if y - 1 >= 0 and mat[x][y - 1] == 0:\n            mat[x][y - 1] = m\n            y -= 1\n        elif x + 1 <= n - 1 and mat[x + 1][y] == 0:\n            mat[x + 1][y] = m\n            x += 1\n        else:\n            ox += 1\n            x = ox\n            y = oy\n            mat[x][y] = m\n        c -= 1\nfor i in range(n):\n    for j in range(i + 1):\n        print(mat[i][j], end=' ')\n    print()", "import sys\nimport os.path\nif os.path.exists('input_file.txt'):\n    sys.stdin = open('input_file.txt', 'r')\n    sys.stdout = open('output_file.txt', 'w')\nmod = 1000000007\n\ndef factorial(a):\n    ans = 1\n    for i in range(1, a + 1):\n        ans = ans * i % mod\n    return ans\nn = int(input())\na = list(map(int, input().split()))\nr = 0\nj = 0\ni = 0\nf = 0\nl = [[-1 for i in range(nn)] for nn in range(1, n + 1)]\nwhile r < n:\n    i = r\n    j = i\n    for jj in range(a[r]):\n        if a[r] == 1:\n            l[i][i] = 1\n            break\n        elif l[r][r] == -1:\n            l[r][r] = a[r]\n        elif r == 0:\n            l[jj][r] = a[r]\n        elif i - 1 >= 0 and l[j][i - 1] == -1:\n            i -= 1\n            l[j][i] = a[r]\n        else:\n            j += 1\n            l[j][i] = a[r]\n    r += 1\nfor i in l:\n    for ii in i:\n        print(ii, end=' ')\n    print()", "n = int(input())\nA = list(map(int, input().split()))\nB = []\nB = [[0 for i in range(n)] for i in range(n)]\nfor i in range(n):\n    B[i][i] = A[i]\nfor i in range(n):\n    c = i\n    r = i\n    u = A[i] - 1\n    while u > 0:\n        if r > 0 and B[c][r - 1] == 0 and (u > 0):\n            B[c][r - 1] = A[i]\n            r -= 1\n            u -= 1\n        elif c < n - 1 and B[c + 1][r] == 0 and (u > 0):\n            B[c + 1][r] = A[i]\n            c += 1\n            u -= 1\n        elif r < n - 1 and B[c][r + 1] == 0 and (u > 0):\n            B[c][r + 1] = A[i]\n            r += 1\n            u -= 1\nfor i in range(n):\n    for j in range(i + 1):\n        print(B[i][j], end=' ')\n    print()", "import sys\nimport math\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nn = IN()\ndia = LI()\nflag = 1\nboard = [[0 for i in range(j + 1)] for j in range(n)]\nfor i in range(n):\n    board[i][i] = dia[i]\nfor i in range(1, dia[0]):\n    board[i][0] = dia[0]\nfor i in range(1, dia[-1]):\n    board[-1][n - i - 1] = dia[-1]\nfor i in range(1, n - 1):\n    if flag == 0:\n        break\n    check = dia[i] - 1\n    cr = i\n    cc = i\n    while check:\n        if cc >= 0 and cr < n and (board[cr][cc - 1] == 0):\n            board[cr][cc - 1] = dia[i]\n            cc -= 1\n        elif cc >= 0 and cr < n and (board[cr + 1][cc] == 0):\n            board[cr + 1][cc] = dia[i]\n            cr += 1\n        else:\n            flag = 0\n            break\n        check -= 1\nif flag == 0:\n    print(-1)\nelse:\n    for ele in board:\n        for it in ele:\n            print(it, end=' ')\n        print()", "n = int(input())\nmat = [[0] * n for _ in range(n)]\nfor (i, v) in enumerate(map(int, input().split())):\n    (x, y, c) = (i, i, 1)\n    mat[x][y] = v\n    flag = True\n    while flag and c < v:\n        flag = False\n        if y > 0 and mat[x][y - 1] == 0:\n            y -= 1\n            mat[x][y] = v\n            flag = True\n        elif x < n - 1 and mat[x + 1][y] == 0:\n            x += 1\n            mat[x][y] = v\n            flag = True\n        c += 1\nfor i in range(n):\n    for j in range(i):\n        if mat[i][j] == 0:\n            mat[i][j] = mat[n - 1][n - 1]\nfor i in range(n):\n    for j in range(i + 1):\n        print(mat[i][j], end=' ')\n    print()", "def f(previ, prevj, x):\n    if (prevj == 0 and previ < n - 1) and mx[previ + 1][prevj] == -1:\n        mx[previ + 1][prevj] = x\n        return (previ + 1, prevj)\n    if prevj > 0 and mx[previ][prevj - 1] == -1:\n        mx[previ][prevj - 1] = x\n        return (previ, prevj - 1)\n    if previ < n - 1 and mx[previ + 1][prevj] == -1:\n        mx[previ + 1][prevj] = x\n        return (previ + 1, prevj)\n    if previ > 0 and mx[previ - 1][prevj] == -1:\n        mx[previ - 1][prevj] = x\n        return (previ - 1, prevj)\n    if prevj < x and mx[previ][prevj + 1] == -1:\n        mx[previ][prevj + 1] = x\n        return (previ, prevj + 1)\n    return (-1, -1)\nn = int(input())\nl = list(map(int, input().split()))\nmx = [[-1 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    mx[i][i] = l[i]\nfor i in range(n):\n    prevj = i\n    previ = i\n    flag = 0\n    for j in range(l[i] - 1):\n        (previ, prevj) = f(previ, prevj, l[i])\n        if previ == -1 and prevj == -1:\n            flag = 1\n            break\n        mx[previ][prevj] = l[i]\n    if flag == 1:\n        break\nif flag:\n    print(-1)\nelse:\n    for i in range(n):\n        temp = []\n        for j in range(i + 1):\n            temp.append(mx[i][j])\n        print(*temp)", "n = int(input())\ngr = []\na = list(map(int, input().split()))\nfor i in range(n):\n    t = [''] * n\n    t[i] = a[i]\n    gr.append(t)\nfor i in range(n):\n    (x, y) = (i, i)\n    d = 0\n    while d != a[i] - 1:\n        if x > 0 and gr[y][x - 1] == '':\n            gr[y][x - 1] = a[i]\n            x -= 1\n            d += 1\n        elif y < n - 1 and gr[y + 1][x] == '':\n            gr[y + 1][x] = a[i]\n            y += 1\n            d += 1\n        else:\n            print(-1)\n            exit()\nfor a in gr:\n    print(*a)", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    stairs = [[0] * i for i in range(1, n + 1)]\n\n    def free(x, y):\n        return 0 <= x <= n - 1 and 0 <= y < x and (stairs[x][y] == 0)\n    for (i, num) in enumerate(l):\n        left = num\n        first = True\n        stack = [(i, i)]\n        while left and stack:\n            (x, y) = stack.pop()\n            if first:\n                first = False\n            elif not free(x, y):\n                continue\n            stairs[x][y] = num\n            stack.append((x - 1, y))\n            stack.append((x, y + 1))\n            stack.append((x + 1, y))\n            stack.append((x, y - 1))\n            left -= 1\n        if left:\n            print(-1)\n            for level in stairs:\n                print(*level)\n            return\n    for level in stairs:\n        print(*level)\nsolve()", "n = int(input())\na = [int(i) for i in input().split()]\nm = []\nf = 1\nfor i in range(n):\n    m += [[-1] * n]\nfor i in range(n - 1, -1, -1):\n    l = a[i]\n    b = a[i]\n    (x, y) = (i, i)\n    for j in range(a[i]):\n        m[x][y] = b\n        if j == a[i]:\n            break\n        if x + 1 >= y and x + 1 < n and (m[x + 1][y] == -1):\n            x += 1\n        elif x >= y + 1 and y + 1 < n and (m[x][y + 1] == -1):\n            y += 1\n        elif y - 1 >= 0 and m[x][y - 1] == -1 and (x >= y - 1):\n            y -= 1\n        elif x - 1 >= 0 and m[x - 1][y] == -1 and (x - 1 >= y):\n            x -= 1\n        elif j != a[i] - 1:\n            f = 0\n            break\n    if not f:\n        break\nif not f:\n    print(-1)\nelse:\n    for i in range(n):\n        print(*m[i][:i + 1])", "n = int(input())\np = list(map(int, input().split()))\nl = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    l[i][i] = p[i]\nj = 0\nwhile True:\n    m = j\n    k = j\n    d = l[j][j] - 1\n    z = True\n    while d > 0 and m >= 0 and (m < n) and (k >= 0) and (k < n):\n        if m - 1 >= 0 and l[k][m - 1] == 0 and (z == True):\n            l[k][m - 1] = l[j][j]\n            m = m - 1\n            d = d - 1\n        elif k + 1 < n:\n            l[k + 1][m] = l[j][j]\n            k = k + 1\n            d = d - 1\n    j += 1\n    if j == n:\n        break\nfor i in range(n):\n    for j in range(i + 1):\n        print(l[i][j], end=' ')\n    print()", "n = int(input())\ninp = input().split()\narr = []\nfor i in inp:\n    arr.append(int(i))\ndp = [[0 for i in range(n)] for i in range(n)]\ni = 0\nwhile i < n:\n    dp[i][i] = arr[i]\n    i += 1\nk = 0\nind = True\nwhile k < n and ind == True:\n    p = arr[k]\n    count = p - 1\n    x = k\n    y = k\n    while count:\n        if y - 1 >= 0 and dp[x][y - 1] == 0:\n            dp[x][y - 1] = p\n            y -= 1\n            count -= 1\n        elif x + 1 < n and dp[x + 1][y] == 0:\n            dp[x + 1][y] = p\n            count -= 1\n            x += 1\n        else:\n            ind = False\n            break\n    k += 1\nif ind == True:\n    k = 0\n    while k < n:\n        m = 0\n        while m <= k:\n            print(dp[k][m], end=' ')\n            m += 1\n        print()\n        k += 1\nelse:\n    print(-1)", "def dfs(i, j, c, s):\n    if c == 0:\n        return\n    if i + 1 < n and ans[i + 1][j] == 0:\n        ans[i + 1][j] = s\n        dfs(i + 1, j, c - 1, s)\n    elif j - 1 >= 0 and ans[i][j - 1] == 0:\n        ans[i][j - 1] = s\n        dfs(i, j - 1, c - 1, s)\nfrom pprint import pprint\nn = int(input())\narr = [int(w) for w in input().split(' ')]\nans = [[0 for x in range(n)] for x in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            ans[i][j] = arr[i]\ni = n - 1\nwhile i >= 0:\n    dfs(i, i, arr[i] - 1, arr[i])\n    i = i - 1\nfor item in ans:\n    for x in item:\n        if x > 0:\n            print(x, end=' ')\n        else:\n            break\n    print('')", "n = int(input())\nl = [*map(int, input().split())]\nans = [[] for i in range(n)]\nflag = True\nfor i in range(n):\n    for j in range(i):\n        ans[i] += [0]\n    ans[i] += [l[i]]\n    for j in range(i + 1, n):\n        ans[i] += [-1]\nfor k in range(n):\n    j = i = k\n    x = l[k] - 1\n    while x > 0:\n        if i > 0 and ans[i - 1][j] == 0:\n            i -= 1\n            ans[i][j] = l[k]\n        elif j > 0 and ans[i][j - 1] == 0:\n            j -= 1\n            ans[i][j] = l[k]\n        elif i < n and ans[i + 1][j] == 0:\n            i += 1\n            ans[i][j] = l[k]\n        elif j < n and ans[i][j + 1] == 0:\n            j += 1\n            ans[i][j] = l[k]\n        else:\n            break\n        x -= 1\n    if x > 0:\n        flag = False\n        print(-1)\nif flag:\n    for i in range(n):\n        print(*ans[i][:i + 1])", "n = int(input())\ndiag = list(map(int, input().split()))\ndep = [(-1, 0), (0, -1), (1, 0)]\nrep = [[0 for i in range(j + 1)] for j in range(n)]\n\ndef valid(i, j):\n    if j > i:\n        return False\n    if i < 0 or j < 0:\n        return False\n    if rep[i][j] > 0:\n        return False\n    return True\npossible = True\nfor i in range(n):\n    x = diag[i]\n    rep[i][i] = x\n    (k, l) = (i, i)\n    for _ in range(x - 1):\n        found = False\n        for (dk, dl) in dep:\n            if valid(k + dk, l + dl):\n                found = True\n                k = k + dk\n                l = l + dl\n                rep[k][l] = x\n            if found:\n                break\n        if not found:\n            possible = False\n            break\n    if not possible:\n        break\nif possible:\n    for repi in rep:\n        print(*repi)\nelse:\n    print(-1)", "def check(i, j, n):\n    if i >= 0 and i < n and (j >= 0) and (j < n):\n        return True\n    return False\nn = int(input())\nl = list(map(int, input().split()))\na = [[-1 for j in range(n)] for i in range(n)]\nflag = True\nfor i in range(n):\n    num = l[i] - 1\n    a[i][i] = l[i]\n    (k, m) = (i, i)\n    for j in range(num):\n        flag1 = False\n        if check(k, m - 1, n):\n            if a[k][m - 1] == -1:\n                a[k][m - 1] = l[i]\n                m -= 1\n                flag1 = True\n        if not flag1:\n            if check(k + 1, m, n):\n                if a[k + 1][m] == -1:\n                    a[k + 1][m] = l[i]\n                    k += 1\n                    flag1 = True\n        if not flag1:\n            if check(k - 1, m, n):\n                if a[k - 1][m] == -1:\n                    a[k - 1][m] = l[i]\n                    k -= 1\n                    flag1 = True\n        if not flag1:\n            if check(k, m + 1, n):\n                if a[k][m + 1] == -1:\n                    a[k][m + 1] = l[i]\n                    m += 1\n                    flag1 = True\n        if not flag1:\n            flag = False\n            break\nif not flag:\n    print(-1)\nelse:\n    for i in range(n):\n        for j in range(i + 1):\n            print(a[i][j], end=' ')\n        print()", "t = 1\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    n = len(ls)\n    res = [[0 for _ in range(n)] for i in range(n)]\n    for i in range(n):\n        res[i][i] = ls[i]\n    for i in range(n):\n        k = ls[i] - 1\n        cur_row = i\n        cur_col = i\n        while k != 0:\n            if cur_col - 1 >= 0 and res[cur_row][cur_col - 1] == 0:\n                res[cur_row][cur_col - 1] = ls[i]\n                cur_col -= 1\n                k -= 1\n            else:\n                cur_row += 1\n                cur_col += 1\n    for i in range(n):\n        for j in range(n):\n            if i >= j:\n                print(res[i][j], end=' ')\n        print()", "def solve(x, y, k, n, val):\n    if x < 0 or y < 0 or x >= n or (y > x) or (k[0] <= 0) or (mat[x][y] != 0):\n        return\n    mat[x][y] = val\n    k[0] -= 1\n    solve(x - 1, y, k, n, val)\n    solve(x, y - 1, k, n, val)\n    solve(x + 1, y, k, n, val)\nn = int(input())\nlist1 = list(map(int, input().split()))\nmat = [[0 for i in range(n)] for j in range(n)]\nfor i in range(len(list1)):\n    solve(i, i, [list1[i]], n, list1[i])\nfor i in range(len(mat)):\n    for j in range(i + 1):\n        print(mat[i][j], end=' ')\n    print()"]