["from itertools import permutations\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nn = read_int()\na = list(read_ints())\nb = list(read_ints())\nhi = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nlo = n\nprs = [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2), (2, 0)]\nfor seq in permutations(prs):\n    a1 = a.copy()\n    b1 = b.copy()\n    no_win = 0\n    for pr in seq:\n        ai = pr[1]\n        bi = pr[0]\n        delta = min(a1[ai], b1[bi])\n        no_win += delta\n        a1[ai] -= delta\n        b1[bi] -= delta\n    lo = min(lo, n - no_win)\nprint(lo, hi)", "(N, *A) = map(int, open(0).read().split())\nT = [*zip(A, A[4:] + A[3:4])]\nprint(sum((max(0, a + b - N) for (a, b) in T)), sum(map(min, T)))", "(N, *A) = map(int, open(0).read().split())\nT = [*zip(A, A[4:] + A[3:4])]\nprint(sum((max(0, a + b - N) for (a, b) in T)), sum(map(min, T)))", "n = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nmx = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmn = max(0, max(b[0] - a[0] - a[1], b[1] - a[1] - a[2], b[2] - a[2] - a[0]))\nprint(str(mn) + ' ' + str(mx))", "import copy\nt = int(input())\nt = 1\nwhile t:\n    t -= 1\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (a[1], a[2]) = (a[2], a[1])\n    (b[1], b[2]) = (b[2], b[1])\n    ma = 1000000000000000\n    mi = 0\n    for i in range(3):\n        mi += min(a[i], b[i - 1])\n    for i in range(3):\n        if b[i] >= a[i] + a[i - 1]:\n            ma = min(b[i] - a[i] - a[i - 1], ma)\n    if ma == 1000000000000000:\n        ma = 0\n    print(ma, mi)", "n = int(input())\n(a, b, c) = map(int, input().split())\n(a1, b1, c1) = map(int, input().split())\nm = min(a, b1) + min(b, c1) + min(c, a1)\ns1 = a1 - a - b\ns2 = b1 - b - c\ns3 = c1 - c - a\nif max(s1, s2, s3) < 0:\n    print(0, m)\nelse:\n    print(max(s1, s2, s3), m)", "import sys\nn = int(sys.stdin.readline())\n(a1, a2, a3) = map(int, sys.stdin.readline().split())\n(b1, b2, b3) = map(int, sys.stdin.readline().split())\nwin = min(a1, b2) + min(a2, b3) + min(a3, b1)\nlose = n - min(a1, b1 + b3) - min(a2, b2 + b1) - min(a3, b3 + b2)\nprint(lose, win)", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nx1 = x2 = x3 = 0\nif b1 - a1 - a2 >= 0:\n    x1 = b1 - a1 - a2\nif b2 - a2 - a3 >= 0:\n    x2 = b2 - a2 - a3\nif b3 - a3 - a1 >= 0:\n    x3 = b3 - a3 - a1\nmi = max(x1, x2, x3)\nprint(mi, min(a1, b2) + min(a2, b3) + min(a3, b1))", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nma = min(a1, b2) + min(a2, b3) + min(a3, b1)\nmi = n - min(a1, n - b2) - min(a2, n - b3) - min(a3, n - b1)\nprint(mi, ma)", "def calculate(rr1, ss1, pp1, rr2, ss2, pp2):\n    w1 = 0\n    if rr1 >= ss2:\n        w1 += ss2\n        rr1 -= ss2\n        ss2 = 0\n    elif rr1 < ss2:\n        w1 += rr1\n        ss2 -= rr1\n        rr1 = 0\n    if ss1 >= pp2:\n        w1 += pp2\n        ss1 -= pp2\n        pp2 = 0\n    elif ss1 < pp2:\n        w1 += ss1\n        pp2 -= ss1\n        ss1 = 0\n    if pp1 >= rr2:\n        w1 += rr2\n        pp1 -= rr2\n        rr2 = 0\n    elif pp1 < rr2:\n        w1 += pp1\n        rr2 -= pp1\n        pp1 = 0\n    return w1\nt = int(input())\n(r1, s1, p1) = map(int, input().split())\n(r2, s2, p2) = map(int, input().split())\nw1 = calculate(r1, s1, p1, r2, s2, p2)\nwt1 = p2 - p1 - r1\nwt2 = s2 - s1 - p1\nwt3 = r2 - r1 - s1\nif max(wt1, wt2, wt3) < 0:\n    m = 0\nelse:\n    m = max(wt1, wt2, wt3)\nprint(m, w1)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(max(a[0] + b[1] - n, 0) + max(a[1] + b[2] - n, 0) + max(a[2] + b[0] - n, 0), min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0]))", "n = int(input())\nalice = list(map(int, input().split()))\nbob = list(map(int, input().split()))\nmaxwin = 0\nfor i in range(len(alice)):\n    if i == 0:\n        if alice[i] >= bob[1]:\n            maxwin += bob[1]\n        else:\n            maxwin += alice[i]\n    elif i == 1:\n        if alice[i] >= bob[2]:\n            maxwin += bob[2]\n        else:\n            maxwin += alice[i]\n    elif i == 2:\n        if alice[i] >= bob[0]:\n            maxwin += bob[0]\n        else:\n            maxwin += alice[i]\nminwin = 0\nfor j in range(len(alice)):\n    if j == 0:\n        if alice[j] > bob[2] + bob[0]:\n            minwin += alice[j] - bob[2] - bob[0]\n    elif j == 1:\n        if alice[j] > bob[1] + bob[0]:\n            minwin += alice[j] - bob[0] - bob[1]\n    elif j == 2:\n        if alice[j] > bob[1] + bob[2]:\n            minwin += alice[j] - bob[1] - bob[2]\nif minwin < 0:\n    print(minwin)\n    minwin = 0\nprint(minwin, maxwin)", "n = int(input())\n(r, s, p) = [int(x) for x in input().split()]\n(rx, sx, px) = [int(x) for x in input().split()]\nmx = min(p, rx) + min(s, px) + min(r, sx)\nmn = max(0, p - sx - px, s - sx - rx, r - rx - px)\nprint(str(mn) + ' ' + str(mx))", "input()\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(max(0, a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[2] - b[1]), min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0]))", "import sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter('ignore')\n\ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\nn = ii()\na = li()\nb = li()\nmaxi = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmini = max(0, a[0] + b[1] - n) + max(0, a[1] + b[2] - n) + max(0, a[2] + b[0] - n)\nprint(mini, maxi)", "from itertools import permutations\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\na = min(A[0], B[1]) + min(A[1], B[2]) + min(A[2], B[0])\nb = float('inf')\norder = range(6)\nfor idxs in permutations(order, 6):\n    temp_A = A[:]\n    temp_B = B[:]\n    for idx in idxs:\n        if idx == 0:\n            val = min(temp_A[0], temp_B[0])\n            temp_A[0] -= val\n            temp_B[0] -= val\n        elif idx == 1:\n            val = min(temp_A[1], temp_B[1])\n            temp_A[1] -= val\n            temp_B[1] -= val\n        elif idx == 2:\n            val = min(temp_A[2], temp_B[2])\n            temp_A[2] -= val\n            temp_B[2] -= val\n        elif idx == 3:\n            val = min(temp_B[0], temp_A[1])\n            temp_A[1] -= val\n            temp_B[0] -= val\n        elif idx == 4:\n            val = min(temp_B[1], temp_A[2])\n            temp_A[2] -= val\n            temp_B[1] -= val\n        elif idx == 5:\n            val = min(temp_B[2], temp_A[0])\n            temp_A[0] -= val\n            temp_B[2] -= val\n    res = min(temp_A[0], temp_B[1]) + min(temp_A[1], temp_B[2]) + min(temp_A[2], temp_B[0])\n    b = min(res, b)\nprint(b, a)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().split()))\n(b1, b2, b3) = list(map(int, input().split()))\nif min(a1, b2) > min(a2, b3) and min(a1, b2) > min(a3, b1):\n    print(max(0, a1 - b1 - b3), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelif min(a2, b3) > min(a1, b2) and min(a2, b3) > min(a3, b1):\n    print(max(0, a2 - b2 - b1), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelif min(a3, b1) > min(a1, b2) and min(a3, b1) > min(a2, b3):\n    print(max(0, a3 - b3 - b2), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelse:\n    print(0, min(a1, b2) + min(a2, b3) + min(a3, b1))", "(N, *A) = map(int, open(0).read().split())\nT = [*zip(A, A[4:] + A[3:4])]\nprint(sum((max(0, a + b - N) for (a, b) in T)), sum(map(min, T)))", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nmaxx = 0\nmaxx = maxx + min(a1, b2)\nmaxx = maxx + min(a2, b3)\nmaxx = maxx + min(a3, b1)\nminn = 0\nif a1 > b1 + b3:\n    minn = max(minn, a1 - (b1 + b3))\nif a2 > b1 + b2:\n    minn = max(minn, a2 - (b1 + b2))\nif a3 > b2 + b3:\n    minn = max(minn, a3 - (b2 + b3))\nprint(minn, maxx)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxans = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\n    minans = max(a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[1] - b[2], 0)\n    print(minans, maxans)\n    return\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "import sys\narg = []\nfor line in sys.stdin:\n    arg.append(line)\nn = int(arg[0])\na = [int(i) for i in arg[1].split(' ')]\nb = [int(i) for i in arg[2].split(' ')]\nnbAliceWinMax = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nnbAliceWinMin = max(0, b[0] - a[0] - a[1], b[1] - a[1] - a[2], b[2] - a[2] - a[0])\nprint(nbAliceWinMin, nbAliceWinMax)", "import math\n\ndef non_zero_seg():\n    n = int(input())\n    alice = [int(x) for x in input().split(' ')]\n    bob = [int(x) for x in input().split(' ')]\n    max_won = min(alice[0], bob[1])\n    max_won += min(alice[1], bob[2])\n    max_won += min(alice[2], bob[0])\n    min_won = max(0, alice[0] - bob[2] - bob[0])\n    min_won += max(0, alice[1] - bob[0] - bob[1])\n    min_won += max(0, alice[2] - bob[1] - bob[2])\n    print(max(0, min_won), max(0, max_won))\nnon_zero_seg()", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nmaxx = min(a1, b2) + min(a2, b3) + min(a3, b1)\nminn = 0\nif a1 < b1 + b3:\n    if a2 < b2 + b1:\n        if a3 < b3 + b2:\n            minn = a1 + a2 + a3\n        else:\n            minn = b3 + b2 + a1 + a2\n    else:\n        minn = b2 + b1 + a1 + a3\nelse:\n    minn = b1 + b3 + a2 + a3\nprint(n - minn, maxx)", "n = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nmini = 0\nfor i in range(3):\n    if A[i] >= B[i] + B[i - 1]:\n        mini = A[i] - (B[i] + B[i - 1])\n    if B[i] >= A[i] + A[i - 2]:\n        mini = B[i] - (A[i] + A[i - 2])\nprint(mini, min(A[0], B[1]) + min(A[1], B[2]) + min(A[2], B[0]))", "N = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmaxWin = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmaxNotWin = min(a[0], b[0] + b[2]) + min(a[1], b[1] + b[0]) + min(a[2], b[2] + b[1])\nminWin = 0\nif maxNotWin < N:\n    minWin = N - maxNotWin\nprint(str(minWin) + ' ' + str(maxWin))", "max = int(input())\nmax = 0\nmin = 0\na = [int(j) for j in input().split()]\na.append(a[0])\nb = [int(j) for j in input().split()]\nb.append(b[0])\nfor i in range(3):\n    if a[i] <= b[i + 1]:\n        max += a[i]\n    else:\n        max += b[i + 1]\n    if a[i + 1] - b[i] - b[i + 1] > 0:\n        min += a[i + 1] - b[i] - b[i + 1]\nprint(min, max)", "no = int(input())\n(alice_rock, alice_scissors, alice_paper) = list(map(int, input().split()))\n(bob_rock, bob_scissors, bob_paper) = list(map(int, input().split()))\nmy_max = min(alice_rock, bob_scissors) + min(alice_scissors, bob_paper) + min(alice_paper, bob_rock)\nmy_min = min(alice_rock, no - bob_scissors) + min(alice_scissors, no - bob_paper) + min(alice_paper, no - bob_rock)\nprint(no - my_min, my_max)", "def maxwin(a1, a2, a3, b1, b2, b3):\n    return min(a1, b2) + min(a2, b3) + min(a3, b1)\n\ndef minwin(a1, a2, a3, b1, b2, b3):\n    return max(0, b1 - a1 - a2) + max(0, b3 - a1 - a3) + max(0, b2 - a2 - a3)\nn = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nprint(minwin(a1, a2, a3, b1, b2, b3), maxwin(a1, a2, a3, b1, b2, b3))", "n = int(input())\nl_a = list(map(int, input().split()))\nl_b = list(map(int, input().split()))\nmax_a = min(l_a[0], l_b[1]) + min(l_a[1], l_b[2]) + min(l_a[2], l_b[0])\nmin_a = n - min(l_a[0], l_b[0] + l_b[2]) - min(l_a[1], l_b[0] + l_b[1]) - min(l_a[2], l_b[2] + l_b[1])\nprint(min_a, max_a)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().split()))\n(b1, b2, b3) = list(map(int, input().split()))\nif min(a1, b2) > min(a2, b3) and min(a1, b2) > min(a3, b1):\n    print(max(0, a1 - b1 - b3), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelif min(a2, b3) > min(a1, b2) and min(a2, b3) > min(a3, b1):\n    print(max(0, a2 - b2 - b1), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelif min(a3, b1) > min(a1, b2) and min(a3, b1) > min(a2, b3):\n    print(max(0, a3 - b3 - b2), min(a1, b2) + min(a2, b3) + min(a3, b1))\nelse:\n    print(0, min(a1, b2) + min(a2, b3) + min(a3, b1))", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nn = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nalis_max = min(a1, b2) + min(a2, b3) + min(a3, b1)\nalis_min = max(0, b1 - a1 - a2, b2 - a2 - a3, b3 - a3 - a1)\nprint(alis_min, alis_max)", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nmaxcount = 0\nif a1 - b2 > 0 and b2 != 0:\n    maxcount += b2\nelif b2 == 0:\n    maxcount += 0\nelse:\n    maxcount += a1\nif a2 - b3 > 0 and b3 != 0:\n    maxcount += b3\nelif b3 == 0:\n    maxcount += 0\nelse:\n    maxcount += a2\nif a3 - b1 > 0 and b1 != 0:\n    maxcount += b1\nelif b1 == 0:\n    maxcount += 0\nelse:\n    maxcount += a3\nmincount = 0\nif a1 > b1 + b3:\n    mincount += a1 - b1 - b3\nif a2 > b1 + b2:\n    mincount += a2 - b1 - b2\nif a3 > b2 + b3:\n    mincount += a3 - b2 - b3\nprint(mincount, maxcount)", "n = int(input())\n(x, y, z) = [int(i) for i in input().split()]\n(a, b, c) = [int(i) for i in input().split()]\n(a, b, c) = (b, c, a)\nmi = max(0, max(x - b - c, max(y - a - c, z - a - b)))\nma = min(x, a) + min(y, b) + min(z, c)\nprint(mi, ma)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nm = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nk = 0\nfor i in range(3):\n    if a[i] - b[i] - b[i - 1] >= 0:\n        k = a[i] - b[i] - b[i - 1]\n        break\nprint(k, m)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmx = 0\nmn = 0\nmx = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmn = max(0, a[0] - b[0] - b[2]) + max(0, a[1] - b[1] - b[0]) + max(0, a[2] - b[2] - b[1])\nprint(mn, mx)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().rstrip().split()))\n(b1, b2, b3) = list(map(int, input().rstrip().split()))\nmx = min(a1, b2) + min(a2, b3) + min(a3, b1)\nmi = max(0, b1 - (a1 + a2), b2 - (a2 + a3), b3 - (a1 + a3))\nprint(mi, mx)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().rstrip().split()))\n(b1, b2, b3) = list(map(int, input().rstrip().split()))\nans = [0, 0]\nans[1] = min(a1, b2) + min(a2, b3) + min(a3, b1)\nans[0] = max(0, b1 - (a1 + a2), b2 - (a2 + a3), b3 - (a1 + a3))\nprint(*ans)", "import sys\ninfile = sys.stdin\nn = infile.readline()\na = list(map(int, infile.readline().split()))\nb = list(map(int, infile.readline().split()))\nmaxi = 0\nif min(a[0], b[1]) != 0:\n    maxi += min(a[0], b[1])\nif min(a[1], b[2]) != 0:\n    maxi += min(a[1], b[2])\nif min(a[2], b[0]) != 0:\n    maxi += min(a[2], b[0])\naans = []\nfor i in range(3):\n    am = a.index(max(a))\n    if am == 0:\n        bm = 2\n    else:\n        bm = am - 1\n    if b[bm] > b[am]:\n        a[am] = max(a[am] - b[bm], 0)\n        b[bm] = abs(min(a[am] - b[bm], 0))\n        if a[am] > 0:\n            a[am] = max(a[am] - b[am], 0)\n            b[am] = abs(min(a[am] - b[am], 0))\n    else:\n        a[am] = max(a[am] - b[am], 0)\n        b[am] = abs(min(a[am] - b[am], 0))\n        if a[am] > 0:\n            a[am] = max(a[am] - b[bm], 0)\n            b[bm] = abs(min(a[am] - b[bm], 0))\n    aans.append(a[am])\n    a[am] = 0\nans = aans[0] + aans[1] + aans[2]\nprint(ans, maxi)", "numR = int(input())\n(r1, s1, p1) = [int(x) for x in input().split()]\n(r2, s2, p2) = [int(x) for x in input().split()]\n(mx, mn) = (0, 0)\nmx += min(r1, s2)\nmx += min(s1, p2)\nmx += min(p1, r2)\nmn = max(mn, r1 + s2 - numR)\nmn = max(mn, s1 + p2 - numR)\nmn = max(mn, p1 + r2 - numR)\nprint(mn, mx)", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nv = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nu = n - (min(b[0], a[0] + a[1]) + min(b[1], a[1] + a[2]) + min(b[2], a[2] + a[0]))\nprint(str(u) + ' ' + str(v))", "r = lambda : [*map(int, input().split())]\nt = r()[0]\na = r()\nb = r()\nbmax = 0\nx = sum((min(a[i], b[(i + 1) % 3]) for i in range(3)))\nn = t - sum((min(a[i], t - b[(i + 1) % 3]) for i in range(3)))\nprint(n, x)", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nprint(max(b1 - a1 - a2, b2 - a3 - a2, b3 - a1 - a3, 0), min(a3, b1) + min(a2, b3) + min(a1, b2))", "n = int(input())\n(a1, a2, a3) = [int(i) for i in input().split()]\n(b1, b2, b3) = [int(i) for i in input().split()]\nres = [0, 0]\nwinrock = min(a1, b2)\nwinsci = min(a2, b3)\nwinpap = min(a3, b1)\nwins = winrock + winsci + winpap\nres[1] = str(wins)\nr = a1 - (b1 + b3)\ns = a2 - (b1 + b2)\np = a3 - (b2 + b3)\nlosrock = 0\nlossci = 0\nlospap = 0\nif r > 0:\n    losrock = r\nif s > 0:\n    lossci = s\nif p > 0:\n    lospap = p\nlos = losrock + lossci + lospap\nres[0] = str(los)\nprint(' '.join(res))", "n_rounds = int(input())\n(rock_a, scissors_a, paper_a) = [int(i) for i in input().split()]\n(rock_b, scissors_b, paper_b) = [int(i) for i in input().split()]\nmax_total = 0\nmin_total = 0\nif scissors_b <= rock_a:\n    max_total += scissors_b\nelse:\n    max_total += rock_a\nif paper_b <= scissors_a:\n    max_total += paper_b\nelse:\n    max_total += scissors_a\nif rock_b <= paper_a:\n    max_total += rock_b\nelse:\n    max_total += paper_a\nmin_total = max([0, scissors_b - paper_a - scissors_a, paper_b - rock_a - paper_a, rock_b - scissors_a - rock_a])\nprint('{} {}'.format(min_total, max_total))", "n = int(input())\nalice = []\nalice = [int(j) for j in input().split()]\nbob = []\nbob = [int(j) for j in input().split()]\nmins = [0] * 3\nmins[0] = alice[0] - bob[0] - bob[2]\nmins[1] = alice[1] - bob[1] - bob[0]\nmins[2] = alice[2] - bob[2] - bob[1]\nmaxa = min(alice[0], bob[1]) + min(alice[1], bob[2]) + min(alice[2], bob[0])\nprint(str(max(0, max(mins))) + ' ' + str(maxa))", "n = int(input())\nt1 = list(map(int, input().split()))\nt2 = list(map(int, input().split()))\nk1 = min(t1[0], t2[1]) + min(t1[1], t2[2]) + min(t1[2], t2[0])\nk2 = min(t1[0], n - t2[1]) + min(t1[1], n - t2[2]) + min(t1[2], n - t2[0])\nprint(n - k2, k1)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n(maxx, minn) = (0, 0)\nif a[0] > b[1]:\n    maxx += a[0] - b[1]\nif a[1] > b[2]:\n    maxx += a[1] - b[2]\nif a[2] > b[0]:\n    maxx += a[2] - b[0]\nif a[0] > b[0] + b[2]:\n    minn += a[0] - b[0] - b[2]\nif a[1] > b[1] + b[0]:\n    minn += a[1] - b[1] - b[0]\nif a[2] > b[1] + b[2]:\n    minn += a[2] - b[1] - b[2]\nprint(minn, n - maxx)", "a = int(input())\n(d, r, l) = map(int, input().split(' '))\n(z, j, k) = map(int, input().split(' '))\nmaxx = min(l, z) + min(d, j) + min(r, k)\nminn = max(0, l - (j + k)) + max(0, d - (z + k)) + max(0, r - (z + j))\nprint(minn, maxx)", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nc1 = a1 - (b3 + b1)\nc2 = a2 - (b1 + b2)\nc3 = a3 - (b2 + b3)\ns = 0\nif c1 > 0:\n    s += c1\nif c2 > 0:\n    s += c2\nif c3 > 0:\n    s += c3\nprint(s, end=' ')\nprint(min(a1, b2) + min(a2, b3) + min(a3, b1))", "def ans(a1, a2, n):\n    a_r = a1[0]\n    a_s = a1[1]\n    a_p = a1[2]\n    b_r = a2[0]\n    b_s = a2[1]\n    b_p = a2[2]\n    maxm = min(a_r, b_s) + min(a_s, b_p) + min(a_p, b_r)\n    minm = n - (min(b_r, a_s + a_r) + min(b_s, a_p + a_s) + min(b_p, a_r + a_p))\n    s = str(minm) + ' ' + str(maxm)\n    return s\nn = int(input())\narr1 = input().split()\na1 = []\narr2 = input().split()\na2 = []\nfor i in arr1:\n    a1.append(int(i))\nfor i in arr2:\n    a2.append(int(i))\nprint(ans(a1, a2, n))", "def main():\n    _ = int(input())\n    (a, b, c) = map(int, input().split())\n    (d, e, f) = map(int, input().split())\n    mini = max(0, a - d - f) + max(0, b - e - d) + max(0, c - e - f)\n    maxi = min(a, e) + min(b, f) + min(c, d)\n    print(mini, maxi)\ntn = 1\nfor _ in range(tn):\n    main()", "n = int(input())\n(a1, a2, a3) = list(map(int, input().strip().split()))\n(b1, b2, b3) = list(map(int, input().strip().split()))\nmax_win = min(a3, b1) + min(a1, b2) + min(a2, b3)\nmin_win = 0\na1_must_win = max(0, a1 - b1 - b3)\na2_must_win = max(0, a2 - b2 - b1)\na3_must_win = max(0, a3 - b3 - b2)\na1_b1_draw = min(a1, b1)\na1_b3_lose = min(a1, b3)\na1_b2_sure_win = max(0, a1 - b1 - b3)\nif a1_b2_sure_win > 0:\n    (b1, b3) = (0, 0)\na2_b2_draw = min(a2, b2)\na2_b1_lose = min(a2, b1)\na2_b3_sure_win = max(0, a2 - b2 - b1)\nif a2_b3_sure_win > 0:\n    (b2, b1) = (0, 0)\na3_b3_draw = min(a3, b3)\na3_b2_lose = min(a3, b2)\na3_b1_sure_win = max(0, a3 - b3 - b2)\nif a3_b1_sure_win > 0:\n    (b3, b2) = (0, 0)\nmin_win = a1_b2_sure_win + a2_b3_sure_win + a3_b1_sure_win\nprint(f'{min_win} {max_win}')", "n = int(input())\n(r1, s1, p1) = map(int, input().split())\n(r2, s2, p2) = map(int, input().split())\nwin = min(r1, s2) + min(p1, r2) + min(s1, p2)\nloss = r1 - min(r1, r2 + p2) + p1 - min(p1, s2 + p2) + s1 - min(s1, r2 + s2)\nprint(loss, win)", "n = int(input())\n(R, S, P) = map(int, input().split())\n(r, s, p) = map(int, input().split())\nmaxx = min(R, s) + min(S, p) + min(P, r)\nminn = 0\nminn += max(0, R - (p + r))\nminn += max(0, S - (s + r))\nminn += max(0, P - (p + s))\nprint(minn, maxx)", "n = int(input())\n(a1, a2, a3) = [int(num) for num in input().split()]\n(b1, b2, b3) = [int(num) for num in input().split()]\nc1 = min(a1, b2)\nc2 = min(a2, b3)\nc3 = min(a3, b1)\nc4 = max(0, a1 - (b3 + b1))\nc5 = max(0, a2 - (b1 + b2))\nc6 = max(0, a3 - (b2 + b3))\nprint(max(c4, c5, c6), c1 + c2 + c3)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().rstrip().split()))\n(b1, b2, b3) = list(map(int, input().rstrip().split()))\nmax_win = min(a1, b2) + min(a2, b3) + min(a3, b1)\nmin_win = max(0, b1 - (a1 + a2), b2 - (a2 + a3), b3 - (a1 + a3))\nprint(min_win, end=' ')\nprint(max_win)", "n = int(input(''))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmxsol = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmn = 0\nif a[0] > b[2] + b[0]:\n    mn = max(mn, a[0] - b[2] - b[0])\nif a[1] > b[1] + b[0]:\n    mn = max(mn, a[1] - b[1] - b[0])\nif a[2] > b[2] + b[1]:\n    mn = max(mn, a[2] - b[2] - b[1])\nprint(mn, mxsol)", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nmaxx = 0\nmaxx = maxx + min(a1, b2)\nmaxx = maxx + min(a2, b3)\nmaxx = maxx + min(a3, b1)\nminn = 0\nif a1 > b1 + b3:\n    minn = max(minn, a1 - (b1 + b3))\nif a2 > b1 + b2:\n    minn = max(minn, a2 - (b1 + b2))\nif a3 > b2 + b3:\n    minn = max(minn, a3 - (b2 + b3))\nprint(minn, maxx)", "n = int(input())\nalice = tuple(map(int, input().split()))\nbob = tuple(map(int, input().split()))\n\ndef minimize(order):\n    (ag, ac, ap) = alice\n    (bg, bc, bp) = bob\n    for j in order:\n        if j == 0:\n            d = min(ag, bp)\n            ag -= d\n            bp -= d\n        elif j == 1:\n            d = min(ap, bc)\n            ap -= d\n            bc -= d\n        elif j == 2:\n            d = min(ac, bg)\n            ac -= d\n            bg -= d\n        elif j == 3:\n            d = min(ap, bp)\n            ap -= d\n            bp -= d\n        elif j == 4:\n            d = min(ag, bg)\n            ag -= d\n            bg -= d\n        else:\n            d = min(ac, bc)\n            ac -= d\n            bc -= d\n    return ag + ac + ap\n\ndef maximize(f):\n    ans = 0\n    (ag, ac, ap) = bob\n    (bg, bc, bp) = alice\n    d = min(ag, bp)\n    ag -= d\n    bp -= d\n    ans += d\n    d = min(ap, bc)\n    ap -= d\n    bc -= d\n    ans += d\n    d = min(ac, bg)\n    ac -= d\n    bg -= d\n    ans += d\n    return ans\nans = n\nfrom itertools import permutations as pe\nfor i in pe(list(range(6)), r=None):\n    ans = min(ans, minimize(i))\nprint(ans, maximize(1))", "def minv(a, b):\n    m = 0\n    for i in range(3):\n        m = max(m, b[i] - a[i] - a[(i + 1) % 3])\n    return m\n\ndef maxv(a, b):\n    total = 0\n    for i in range(3):\n        total += min(a[i], b[(i + 1) % 3])\n    return total\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(minv(a, b), maxv(a, b))", "n = int(input())\n(a, b, c) = tuple(map(int, input().split()))\n(d, e, f) = tuple(map(int, input().split()))\na1 = max(0, a - d - f) + max(0, b - e - d) + max(0, c - f - e)\na2 = min(a, e) + min(b, f) + min(c, d)\nprint(a1, a2)", "def solve():\n    from itertools import permutations as perm\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxans = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\n    minans = 1e+18\n    k = [(0, 0), (0, 2), (1, 1), (1, 0), (2, 1), (2, 2)]\n    k = perm(k)\n    for i in k:\n        aa = a[:]\n        bb = b[:]\n        for j in range(6):\n            u = i[j][0]\n            v = i[j][1]\n            val = min(aa[u], bb[v])\n            aa[u] -= val\n            bb[v] -= val\n        ans = min(aa[0], bb[1]) + min(aa[1], bb[2]) + min(aa[2], bb[0])\n        minans = min(minans, ans)\n    print(minans, maxans)\n    return\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "input()\na = [int(i) for i in input().split(' ')]\nb = [int(i) for i in input().split(' ')]\n(a[1], a[2]) = (a[2], a[1])\n(b[1], b[2]) = (b[2], b[1])\nmaxwin = min(a[0], b[2]) + min(a[1], b[0]) + min(a[2], b[1])\n\ndef calc(a, b, left):\n    m = 10 ** 9\n    for possible in left[:]:\n        (newleft, newa, newb) = (left[:], a[:], b[:])\n        newleft.remove(possible)\n        played = min(a[possible[0]], b[possible[1]])\n        newa[possible[0]] -= played\n        newb[possible[1]] -= played\n        res = calc(newa, newb, newleft)\n        m = min(m, res)\n    if not len(left):\n        return min(a[0], b[2]) + min(a[1], b[0]) + min(a[2], b[1])\n    return m\nminwin = calc(a[:], b[:], [(0, 0), (0, 1), (1, 1), (1, 2), (2, 0), (2, 2)])\nprint(minwin, maxwin)", "from itertools import permutations\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nmaxi = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmini = n\npermut = [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2), (2, 0)]\nfor seq in permutations(permut):\n    copy_a = a.copy()\n    copy_b = b.copy()\n    no_win = 0\n    for i in seq:\n        a_i = i[1]\n        b_i = i[0]\n        delta = min(copy_a[a_i], copy_b[b_i])\n        no_win += delta\n        copy_a[a_i] -= delta\n        copy_b[b_i] -= delta\n    mini = min(mini, n - no_win)\nprint(mini, maxi)", "n = int(input(''))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmxsol = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmnsol = max(0, a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[2] - b[1])\nprint(mnsol, mxsol)", "from itertools import permutations\nn = int(input())\n(RA, SA, PA) = map(int, input().split())\n(RB, SB, PB) = map(int, input().split())\nalice = {'RA': RA, 'SA': SA, 'PA': PA}\nbob = {'RB': RB, 'SB': SB, 'PB': PB}\nminimum = maximum = 0\nmoves = [['RA', 'PB'], ['SA', 'RB'], ['PA', 'SB'], ['RA', 'RB'], ['SA', 'SB'], ['PA', 'PB']]\nperm = list(permutations(moves))\nminimum = float('inf')\nfor move in perm:\n    (acopy, bcopy) = (alice.copy(), bob.copy())\n    for (a, b) in move:\n        val = min(acopy[a], bcopy[b])\n        acopy[a] -= val\n        bcopy[b] -= val\n    temp = min(acopy['RA'], bcopy['SB']) + min(acopy['SA'], bcopy['PB']) + min(acopy['PA'], bcopy['RB'])\n    minimum = min(minimum, temp)\nmaximum = min(alice['RA'], bob['SB']) + min(alice['SA'], bob['PB']) + min(alice['PA'], bob['RB'])\nprint(f'{minimum} {maximum}')", "round = int(input())\nfirstperson = input().split(' ')\nsecondperson = input().split(' ')\n\ndef solve(round, firstperson, secondperson):\n    win = 0\n    secondperson.append(secondperson[0])\n    for i in range(len(firstperson)):\n        if int(firstperson[i]) <= int(secondperson[i + 1]):\n            findless = int(firstperson[i])\n        else:\n            findless = int(secondperson[i + 1])\n        win += findless\n    del secondperson[3]\n    secondperson.insert(0, secondperson[2])\n    for i in range(len(firstperson)):\n        if int(firstperson[i]) > 0:\n            diff = min(int(firstperson[i]), int(secondperson[i]))\n            firstperson[i] = int(firstperson[i]) - int(diff)\n            secondperson[i] = int(secondperson[i]) - int(diff)\n            if int(firstperson[i]) > 0:\n                diff = min(int(firstperson[i]), int(secondperson[i + 1]))\n                firstperson[i] = int(firstperson[i]) - int(diff)\n                secondperson[i + 1] = int(secondperson[i + 1]) - int(diff)\n    print(str(int(firstperson[0]) + int(firstperson[1]) + int(firstperson[2])) + ' ' + str(win))\nsolve(round, firstperson, secondperson)", "import itertools\nn = int(input())\n(r, s, p) = map(int, input().split())\n(R, S, P) = map(int, input().split())\nwin_r = min(r, S)\nwin_s = min(s, P)\nwin_p = min(p, R)\nwin = win_r + win_s + win_p\nres = n\nfor perm in itertools.permutations(range(6)):\n    (rr, ss, pp) = (r, s, p)\n    (RR, SS, PP) = (R, S, P)\n    asd = n\n    for i in perm:\n        if i == 0:\n            mn = min(rr, RR)\n            rr -= mn\n            RR -= mn\n        if i == 1:\n            mn = min(ss, SS)\n            ss -= mn\n            SS -= mn\n        if i == 2:\n            mn = min(pp, PP)\n            pp -= mn\n            PP -= mn\n        if i == 3:\n            mn = min(rr, PP)\n            rr -= mn\n            PP -= mn\n        if i == 4:\n            mn = min(ss, RR)\n            ss -= mn\n            RR -= mn\n        if i == 5:\n            mn = min(pp, SS)\n            pp -= mn\n            SS -= mn\n        asd -= mn\n    res = min(asd, res)\nprint(res, win)", "n = int(input())\na = input().split()\na = [int(play) for play in a]\nb = input().split()\nb = [int(play) for play in b]\namax = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\namin = n - (min(a[0], b[2] + b[0]) + min(a[1], b[0] + b[1]) + min(a[2], b[1] + b[2]))\nprint(amin, amax)", "number_of_rounds = int(input())\n[rock_a, scissors_a, paper_a] = list(map(int, input().split()))\n[rock_b, scissors_b, paper_b] = list(map(int, input().split()))\nmax_alice = 0\nmin_alice = 0\nmax_alice = min(rock_a, scissors_b) + min(scissors_a, paper_b) + min(paper_a, rock_b)\nif rock_a > rock_b + paper_b:\n    min_alice += rock_a - (rock_b + paper_b)\nif scissors_a > scissors_b + rock_b:\n    min_alice += scissors_a - (scissors_b + rock_b)\nif paper_a > paper_b + scissors_b:\n    min_alice += paper_a - (paper_b + scissors_b)\nprint(min_alice, end=' ')\nprint(max_alice, end='')", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nma = 0\nma += min(a[0], b[1])\nma += min(a[1], b[2])\nma += min(a[2], b[0])\nm = min(a[0], b[2])\na[0] -= min(a[0], b[0] + b[2])\na[1] -= min(a[1], b[1] + b[0])\na[2] -= min(a[2], b[1] + b[2])\nprint(sum(a), ma)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmins = max(0, b[0] - a[0] - a[1], b[1] - a[1] - a[2], b[2] - a[2] - a[0])\nmaxs = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nprint(mins, maxs)", "n = int(input(''))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmxsol = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmnsol = max(0, a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[2] - b[1])\nprint(mnsol, mxsol)", "n = int(input(''))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmxsol = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmnsol = max(0, a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[2] - b[1])\nprint(mnsol, mxsol)", "t = int(input())\nr = 0\n(a, b, c) = input().split()\n(d, e, f) = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nd = int(d)\ne = int(e)\nf = int(f)\nif c > e + f:\n    r += c - e - f\nelif a > d + f:\n    r += a - d - f\nelif b > e + d:\n    r += b - e - d\nprint(r, min(a, e) + min(b, f) + min(c, d))", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nl = 0\nw = 0\nfor i in range(3):\n    w += min(a[i], b[(i + 1) % 3])\nl = max([a[i] - (b[i] + b[(i + 2) % 3]) for i in range(3)])\nif l < 0:\n    l = 0\nprint(str(l) + ' ' + str(w))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmn = max(a[0] - (b[0] + b[2]), 0) + max(a[1] - (b[1] + b[0]), 0) + max(a[2] - (b[2] + b[1]), 0)\nmx = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nprint(mn, mx)", "input()\nk = list(map(int, input().rstrip().split()))\nl = list(map(int, input().rstrip().split()))\na1 = max({0, k[0] - l[0] - l[2], k[1] - l[1] - l[0], k[2] - l[2] - l[1]})\na2 = min(k[0], l[1]) + min(k[1], l[2]) + min(k[2], l[0])\nprint(a1, a2)", "n = int(input())\n(Ar, As, Ap) = map(int, input().split())\n(br, bs, bp) = map(int, input().split())\nprint(n - (min(As, n - bp) + min(Ap, n - br) + min(Ar, n - bs)), min(bp, As) + min(Ap, br) + min(Ar, bs))", "n = int(input(''))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmxsol = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmnsol = max(a[0] - b[0] - b[2], a[1] - b[1] - b[0], a[2] - b[2] - b[1], 0)\nprint(mnsol, mxsol)", "n = int(input())\n(r1, s1, p1) = tuple([int(x) for x in input().split()])\n(r2, s2, p2) = tuple([int(x) for x in input().split()])\nresmax = min(r1, s2) + min(s1, p2) + min(p1, r2)\nresmin = min(r1, n - s2) + min(s1, n - p2) + min(p1, n - r2)\nprint(n - resmin, resmax)", "input()\nk = list(map(int, input().rstrip().split()))\nl = list(map(int, input().rstrip().split()))\na1 = max(0, k[0] - l[0] - l[2], k[1] - l[1] - l[0], k[2] - l[2] - l[1])\na2 = min(k[0], l[1]) + min(k[1], l[2]) + min(k[2], l[0])\nprint(a1, a2)", "n = int(input())\n(a1, a2, a3) = list(map(int, input().split()))\n(b1, b2, b3) = list(map(int, input().split()))\nmaxmum = min(a1, b2) + min(a2, b3) + min(a3, b1)\nminimum = max(0, a1 - b1 - b3, a2 - b2 - b1, a3 - b3 - b2)\nprint(minimum, maxmum)", "n = int(input())\nalice = list(map(int, input().split()))\nbob = list(map(int, input().split()))\nmaxwin = min(alice[0], bob[1]) + min(alice[1], bob[2]) + min(alice[2], bob[0])\nminlose = alice[0] - min(alice[0], bob[0] + bob[2]) + (alice[1] - min(alice[1], bob[1] + bob[0])) + (alice[2] - min(alice[2], bob[2] + bob[1]))\nprint(minlose, maxwin)", "def f(n, a, b):\n    losses = []\n    for i in range(3):\n        l = max([a[i - 1] - (n - b[i]), 0])\n        losses.append(l)\n    losses = sum(losses)\n    wins = []\n    for i in range(3):\n        w = min([a[i - 1], b[i]])\n        wins.append(w)\n    wins = sum(wins)\n    return [losses, wins]\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nresults = f(n, a, b)\nfor i in results:\n    print(i, end=' ')", "n = int(input())\n(a1, a2, a3) = map(int, input().split())\n(b1, b2, b3) = map(int, input().split())\nminwin = n - min(a1, b1 + b3) - min(a2, b1 + b2) - min(a3, b2 + b3)\nmaxwin = min(a1, b2) + min(a3, b1) + min(a2, b3)\nprint(minwin, maxwin)", "import sys\n\ndef solve(input_path=None):\n    if input_path is None:\n        f = sys.stdin\n    else:\n        f = open(input_path, 'r')\n    n = int(f.readline())\n    (paper1, rock1, scissor1) = map(int, f.readline().split())\n    (paper2, rock2, scissor2) = map(int, f.readline().split())\n    min_win = n - (min(paper1, paper2 + scissor2) + min(rock1, rock2 + paper2) + min(scissor1, scissor2 + rock2))\n    max_win = min(paper1, rock2) + min(rock1, scissor2) + min(scissor1, paper2)\n    return [f'{min_win} {max_win}']\n\ndef main():\n    for line in solve():\n        print(f'{line}')\nmain()", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nq = b[0]\nb[0] = b[1]\nb[1] = b[2]\nb[2] = q\nMin = 0\nMax = 0\nfor i in range(3):\n    Min += max(a[i] - b[(i + 1) % 3] - b[(i + 2) % 3], 0)\n    Max += min(a[i], b[i])\nprint(Min, Max)", "n = input()\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nmax_wins = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\nmin_wins = max(a[0] - b[0] - b[2], 0) + max(a[1] - b[0] - b[1], 0) + max(a[2] - b[1] - b[2], 0)\nprint(min_wins, max_wins)", "n = int(input())\nAlice = list(map(int, input().split(' ')))\nAlice2 = [Alice[0], Alice[1], Alice[2]]\nBob = list(map(int, input().split(' ')))\nBob2 = [Bob[0], Bob[1], Bob[2]]\nminimum = 0\nmaximum = 0\nj = 0\ni = Alice.index(max(Alice))\nwhile j < 3:\n    remainder = Alice[i] - Bob[(i + 2) % 3]\n    if remainder >= 0:\n        if remainder >= Bob[i]:\n            Alice[i] = remainder - Bob[i]\n            Bob[i] = 0\n        else:\n            Bob[i] -= remainder\n            Alice[i] = 0\n    else:\n        Bob[(i + 2) % 3] = abs(remainder)\n        Alice[i] = 0\n    i += 1\n    i = i % 3\n    j += 1\nminimum = sum(Alice)\nmaximum = min(Bob2[0], Alice2[2]) + min(Bob2[1], Alice2[0]) + min(Bob2[2], Alice2[1])\nprint(minimum, maximum)", "n = int(input())\n(a, b, c) = map(int, input().split())\n(x, y, z) = map(int, input().split())\nmaxa = min(a, y) + min(b, z) + min(c, x)\nmina = min(a, n - y) + min(b, n - z) + min(c, n - x)\nprint(n - mina, maxa)", "import sys\nfrom itertools import permutations\nfrom copy import deepcopy\n\ndef solve(input_path=None):\n    if input_path is None:\n        f = sys.stdin\n    else:\n        f = open(input_path, 'r')\n    n = int(f.readline())\n    (paper1, rock1, scissor1) = map(int, f.readline().split())\n    (paper2, rock2, scissor2) = map(int, f.readline().split())\n    min_win = n - (min(paper1, paper2 + scissor2) + min(rock1, rock2 + paper2) + min(scissor1, scissor2 + rock2))\n    max_win = min(paper1, rock2) + min(rock1, scissor2) + min(scissor1, paper2)\n    return [f'{min_win} {max_win}']\n\ndef main():\n    for line in solve():\n        print(f'{line}')\nmain()"]