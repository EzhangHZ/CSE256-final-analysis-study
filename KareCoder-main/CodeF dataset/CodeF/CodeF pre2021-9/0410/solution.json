["def solve():\n    J = int(input())\n    for O in range(J):\n        F = int(input())\n        K = map(int, input().split())\n        L = map(int, input().split())\n        B = {}\n        for (C, M) in zip(K, L):\n            if C not in B:\n                B[C] = []\n            B[C].append(M)\n        for A in B.values():\n            A.sort(reverse=True)\n        for A in B.values():\n            for G in range(1, len(A)):\n                A[G] += A[G - 1]\n        H = [0] * F\n        for A in B.values():\n            for D in range(1, F + 1):\n                I = 0\n                E = len(A) // D\n                if E == 0:\n                    break\n                if E > 0:\n                    N = A[E * D - 1]\n                    I += N\n                H[D - 1] += I\n        print(' '.join([str(A) for A in H]))\nsolve()", "from collections import defaultdict\n\ndef solve():\n    mem = defaultdict(list)\n    N = len(uni)\n    for i in range(N):\n        mem[uni[i]].append(stu[i])\n    ans = [0 for i in range(N)]\n    for un in mem:\n        arr = mem[un]\n        arr.sort(reverse=True)\n        for i in range(1, len(arr)):\n            arr[i] += arr[i - 1]\n        lim = len(arr)\n        for i in range(1, lim + 1):\n            rem = lim % i\n            ans[i - 1] += arr[lim - rem - 1]\n    return ' '.join(map(str, ans))\nT = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    uni = list(map(int, input().split()))\n    stu = list(map(int, input().split()))\n    ans = solve()\n    print(ans)", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    n = I()\n    u = L()\n    s = L()\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    ans = [0] * n\n    for i in d:\n        a = [0] + sorted(d[i])\n        x = len(a)\n        for j in range(1, x):\n            a[j] += a[j - 1]\n        for j in range(1, x):\n            ans[j - 1] += a[-1] - a[(x - 1) % j]\n    pr(ans)\nfor _ in range(I()):\n    solve()", "import sys\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    arrayOne = list(map(int, input().split()))\n    arrayTwo = list(map(int, input().split()))\n\n    def solve():\n        hashMap = {num: [] for num in arrayOne}\n        for (numOne, numTwo) in zip(arrayOne, arrayTwo):\n            hashMap[numOne].append(numTwo)\n        for num in hashMap:\n            hashMap[num].sort(reverse=True)\n        prefixSum = {num: [] for num in arrayOne}\n        res = [0 for i in range(n)]\n        for num in hashMap:\n            currentSum = 0\n            for numOne in hashMap[num]:\n                currentSum += numOne\n                prefixSum[num].append(currentSum)\n        for num in hashMap:\n            for k in range(1, len(hashMap[num]) + 1):\n                remainder = len(hashMap[num]) % k\n                res[k - 1] += prefixSum[num][len(hashMap[num]) - remainder - 1]\n        return res\n    res = solve()\n    print(' '.join([str(num) for num in res]))", "def mapit():\n    temp = list(map(int, input().split()))\n    return temp\n\ndef solution():\n    n = int(input())\n    u = mapit()\n    s = mapit()\n    skill = {}\n    for (ui, si) in zip(u, s):\n        if ui not in skill:\n            skill[ui] = [si]\n        else:\n            skill[ui].append(si)\n    for si in skill:\n        skill[si].sort(reverse=True)\n    sol = [0] * n\n    for si in skill:\n        l = len(skill[si])\n        for i in range(1, l):\n            skill[si][i] += skill[si][i - 1]\n        for k in range(1, l + 1):\n            f = l - l % k\n            f -= 1\n            sol[k - 1] += skill[si][f]\n    print(*sol)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "from collections import defaultdict\nfrom itertools import accumulate\n\ndef solve():\n    n = int(input())\n    useq = read_ints()\n    sseq = read_ints()\n    strengths = defaultdict(list)\n    for (ui, si) in zip(useq, sseq):\n        strengths[ui].append(si)\n    for ui in strengths:\n        strengths[ui].sort()\n    accs = [[0] + list(accumulate(seq)) for seq in strengths.values()]\n    res = [0] * n\n    for acc in accs:\n        cnt = len(acc) - 1\n        s = acc[-1]\n        for k in range(1, cnt + 1):\n            res[k - 1] += s - acc[cnt % k]\n    print(*res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef read_ints():\n    return [int(c) for c in input().split()]\n\ndef print_lines(lst):\n    print('\\n'.join(map(str, lst)))\nfrom os import environ as env\nif 'COMPUTERNAME' in env and 'L2A6HRI' in env['COMPUTERNAME']:\n    import sys\n    sys.stdout = open('out.txt', 'w')\n    sys.stdin = open('in.txt', 'r')\nmain()", "def solve():\n    t = inp()\n    for _ in range(t):\n        n = inp()\n        uni = seq()\n        skill = seq()\n        mapper = dd(list)\n        for i in range(n):\n            mapper[uni[i]].append(skill[i])\n        for j in mapper:\n            mapper[j].sort(reverse=True)\n            for k in range(1, len(mapper[j])):\n                mapper[j][k] += mapper[j][k - 1]\n        result = [0 for j in range(n)]\n        for k in mapper:\n            val = len(mapper[k])\n            for j in range(1, val + 1):\n                val2 = val - val % j - 1\n                result[j - 1] += mapper[k][val2]\n        print(*result)\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br, insort\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nsolve()", "from collections import defaultdict as dd\n\ndef solve(A, B, n):\n    ans = [0] * n\n    teams = dd(list)\n    for i in range(n):\n        teams[A[i]].append(B[i])\n    for k in teams.keys():\n        li = teams[k]\n        li.sort(reverse=True)\n        pref = [0]\n        for it in li:\n            pref.append(pref[-1] + it)\n        ln = len(li)\n        for i in range(1, ln + 1):\n            ind = ln - ln % i\n            ans[i - 1] += pref[ind]\n    print(*ans)\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = solve(A, B, n)", "from collections import defaultdict\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    a = defaultdict(list)\n    for i in range(n):\n        a[u[i]].append(s[i])\n    for (k, v) in a.items():\n        v.sort()\n        for i in range(1, len(v)):\n            v[i] += v[i - 1]\n    sum = [0] * n\n    for (k, v) in a.items():\n        m = len(v)\n        for i in range(1, m + 1):\n            if m % i == 0:\n                sum[i - 1] += v[m - 1]\n            else:\n                sum[i - 1] += v[m - 1] - v[m % i - 1]\n    print(*sum)\n    t -= 1", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    d = [[0] for i in range(n)]\n    for (i, j) in zip(map(int, input().split()), map(int, input().split())):\n        d[i - 1].append(j)\n    for i in range(n):\n        d[i].sort()\n        for j in range(1, len(d[i])):\n            d[i][j] += d[i][j - 1]\n        for j in range(1, len(d[i])):\n            a[j - 1] += d[i][-1] - d[i][(len(d[i]) - 1) % j]\n    print(' '.join(map(str, a)))", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    n = I()\n    u = L()\n    s = L()\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    ans = [0] * n\n    for i in d:\n        a = [0] + sorted(d[i])\n        x = len(a)\n        for j in range(1, x):\n            a[j] += a[j - 1]\n        for j in range(1, x):\n            ans[j - 1] += a[-1] - a[(x - 1) % j]\n    print(*ans)\nfor _ in range(I()):\n    solve()", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    n = I()\n    u = L()\n    s = L()\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    ans = [0] * n\n    for i in d:\n        a = [0] + sorted(d[i])\n        x = len(a)\n        for j in range(1, x):\n            a[j] += a[j - 1]\n        for j in range(1, x):\n            ans[j - 1] += a[-1] - a[(x - 1) % j]\n    print(*ans)\nfor _ in range(I()):\n    solve()", "from collections import defaultdict\nfrom itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = defaultdict(list)\n    for (k, v) in zip(u, s):\n        d[k].append(v)\n    ans = [0] * (n + 1)\n    for k in d.keys():\n        d[k].sort(reverse=True)\n        l = list(accumulate(d[k]))\n        for r in range(1, min(n, len(l)) + 1):\n            ans[r] += l[len(l) // r * r - 1]\n    print(*ans[1:], sep=' ')", "from collections import defaultdict\nfrom itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = defaultdict(list)\n    for (k, v) in zip(u, s):\n        d[k].append(v)\n    ans = [0] * (n + 1)\n    for k in d.keys():\n        d[k].sort(reverse=True)\n        l = list(accumulate(d[k]))\n        for r in range(1, min(n, len(l)) + 1):\n            ans[r] += l[len(l) // r * r - 1]\n    print(*ans[1:], sep=' ')", "def solve():\n    n = int(input())\n    u = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if u[i] in d:\n            d[u[i]].append(l[i])\n        else:\n            e = [l[i]]\n            d[u[i]] = e\n    ans = [0] * n\n    for ii in d:\n        d[ii].sort(reverse=True)\n        for i in range(1, len(d[ii])):\n            d[ii][i] += d[ii][i - 1]\n        for k in range(1, n + 1):\n            new = len(d[ii]) // k * k\n            if new == 0:\n                break\n            ans[k - 1] += d[ii][new - 1]\n    print(*ans)\nfor testis in range(int(input())):\n    solve()", "def BerlandRegional():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = list(map(int, input().split(' ')))\n        u = list(map(int, input().split(' ')))\n        best = []\n        pr = []\n        for j in range(n):\n            best.append([])\n            pr.append([0])\n        for j in range(n):\n            best[s[j] - 1].append(u[j])\n        for j in range(n):\n            best[j] = sorted(best[j], reverse=True)\n        for j in range(n):\n            for x in best[j]:\n                pr[j].append(pr[j][-1] + x)\n        answer = [0] * n\n        for j in range(n):\n            for k in range(1, len(best[j]) + 1):\n                answer[k - 1] += pr[j][int(len(best[j]) / k) * k]\n        print(' '.join(map(str, answer)))\nBerlandRegional()", "class Program:\n\n    @staticmethod\n    def BerlandRegional(n: int, s: list, u: list):\n        best = []\n        pr = []\n        for j in range(n):\n            best.append([])\n            pr.append([0])\n        for j in range(n):\n            best[s[j] - 1].append(u[j])\n        for j in range(n):\n            best[j] = sorted(best[j], reverse=True)\n        for j in range(n):\n            for x in best[j]:\n                pr[j].append(pr[j][-1] + x)\n        answer = [0] * n\n        for j in range(n):\n            for k in range(1, len(best[j]) + 1):\n                answer[k - 1] += pr[j][int(len(best[j]) / k) * k]\n        return answer\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    u = list(map(int, input().split(' ')))\n    print(' '.join(map(str, Program.BerlandRegional(n, s, u))))", "from bisect import insort_left as ins\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    ak = [(u[i], s[i]) for i in range(n)]\n    ak.sort(reverse=True)\n    sums = []\n    prev = 0\n    cur = -1\n    for ele in ak:\n        if ele[0] != prev:\n            sums.append(list())\n            prev = ele[0]\n            cur += 1\n            sums[cur].append(ele[1])\n        else:\n            sums[cur].append(sums[cur][-1] + ele[1])\n    ans = [0 for i in range(n)]\n    for ele in sums:\n        for i in range(len(ele)):\n            ans[i] += ele[len(ele) // (i + 1) * (i + 1) - 1]\n    print(' '.join([str(x) for x in ans]))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dic = defaultdict(list)\n    for i in range(n):\n        dic[a[i]].append(b[i])\n    for (k, v) in dic.items():\n        v.sort(reverse=True)\n        for i in range(1, len(v)):\n            v[i] += v[i - 1]\n    ans = [0] * n\n    for (k, v) in dic.items():\n        m = len(v)\n        for i in range(m):\n            ans[i] += v[m - m % (i + 1) - 1]\n    print(*ans)", "from collections import defaultdict\nfrom itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = defaultdict(list)\n    for (k, v) in zip(u, s):\n        d[k].append(v)\n    ans = [0] * (n + 1)\n    for k in d.keys():\n        d[k].sort(reverse=True)\n        l = list(accumulate(d[k]))\n        for r in range(1, min(n, len(l)) + 1):\n            ans[r] += l[len(l) // r * r - 1]\n    print(*ans[1:], sep=' ')", "import itertools\nfrom collections import defaultdict\n\ndef readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    u = readline()\n    s = readline()\n    universities = defaultdict(list)\n    for (ui, si) in zip(u, s):\n        universities[ui].append(si)\n    answer = [0] * n\n    for students in universities.values():\n        students.sort(reverse=True)\n        part_sum = list(itertools.accumulate(students, initial=0))\n        l = len(students)\n        for k in range(l):\n            answer[k] += part_sum[l - l % (k + 1)]\n    print(*answer)\nt = int(input())\nfor __ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    su = dict()\n    for (i, e) in zip(u, s):\n        su.setdefault(i, []).append(e)\n    ans = [0] * len(u)\n    for i in su:\n        l = su[i]\n        l.sort(reverse=True)\n        for j in range(1, len(l)):\n            l[j] += l[j - 1]\n        for k in range(1, len(l) + 1):\n            r = len(l) % k\n            ans[k - 1] += l[len(l) - r - 1]\n    print(*ans)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    net = dict()\n    for i in range(n):\n        if u[i] in net:\n            net[u[i]].append(s[i])\n        else:\n            net[u[i]] = [s[i]]\n    for i in net:\n        x = net[i]\n        x.sort()\n        k = len(x)\n        l = [0] * k\n        l[0] = x[0]\n        for j in range(1, k):\n            l[j] = l[j - 1] + x[j]\n        net[i] = l\n    ans = [0] * n\n    for i in net:\n        x = net[i]\n        for k in range(1, len(x) + 1):\n            s = 0\n            left = len(x) % k\n            if left != 0:\n                s = x[-1] - x[left - 1]\n            else:\n                s = x[-1]\n            ans[k - 1] += s\n    print(*ans)\n    t -= 1", "from collections import defaultdict\n\ndef mkprefix(a):\n    b = []\n    sm = 0\n    for i in range(len(a)):\n        sm += a[i]\n        b.append(sm)\n    return b\nR = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    u = R()\n    s = R()\n    d = defaultdict(lambda : list())\n    for i in range(n):\n        d[u[i]].append(s[i])\n    for key in d.keys():\n        d[key].sort(reverse=True)\n        d[key] = mkprefix(d[key])\n    ans = [0] * n\n    for u in d.keys():\n        l = len(d[u])\n        for i in range(l):\n            idx = l - l % (i + 1) - 1\n            ans[i] += d[u][idx]\n    print(*ans)", "from collections import defaultdict\nd = defaultdict(list)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = [0] * n\n    d = defaultdict(list)\n    for i in range(n):\n        d[a[i]].append(b[i])\n    for i in d:\n        z = d[i]\n        z.sort(reverse=True)\n        l = len(z)\n        for ii in range(1, len(z)):\n            z[ii] += z[ii - 1]\n        for ii in range(len(z)):\n            if l % (ii + 1) == 0:\n                ans[ii] += z[l - 1]\n            else:\n                ans[ii] += z[l // (ii + 1) * (ii + 1) - 1]\n    ans[0] = sum(b)\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    us = [[] for j in range(n)]\n    for i in range(n):\n        us[u[i] - 1].append(s[i])\n    s = [0] * n\n    for i in range(n):\n        if us[i] == []:\n            continue\n        us[i].sort()\n        p = len(us[i])\n        if p > 1:\n            for j in range(p - 2, -1, -1):\n                us[i][j] += us[i][j + 1]\n        for j in range(1, p + 1):\n            k = p % j\n            s[j - 1] += us[i][k]\n    print(*s)", "t = int(input())\nfor inh in range(0, t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    a = {}\n    uni = set()\n    for i in range(0, n):\n        if u[i] in uni:\n            a[u[i]].append(s[i])\n        else:\n            a[u[i]] = [s[i]]\n            uni.add(u[i])\n    uni = list(uni)\n    ans = [0] * n\n    for i in range(0, len(uni)):\n        k = a[uni[i]]\n        k.sort(reverse=True)\n        (i, j) = (1, len(k))\n        while i < len(k):\n            k[i] += k[i - 1]\n            i += 1\n        for i in range(1, j + 1):\n            last = j - j % i - 1\n            ans[i - 1] += k[last]\n    print(*ans)", "t = int(input())\n\ndef solve():\n    n = int(input())\n    r = range(n)\n    u = [int(x) - 1 for x in input().split()]\n    s = [int(x) for x in input().split()]\n    p = [[] for i in r]\n    st = list(set(u))\n    for i in r:\n        p[u[i]].append(s[i])\n    for i in r:\n        p[i].sort(reverse=True)\n        for j in range(1, len(p[i])):\n            p[i][j] += p[i][j - 1]\n    ans = [0] * n\n    for i in r:\n        good = list()\n        for elem in st:\n            b = len(p[elem]) // (i + 1) * (i + 1)\n            if b != 0:\n                ans[i] += p[elem][b - 1]\n                good.append(elem)\n        st = good\n    print(*ans)\nfor tt in range(t):\n    solve()", "import math\nfrom collections import Counter, defaultdict\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    u = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    st = set(u)\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    l = [0] * (n + 1)\n    sm = [0] * (n + 1)\n    for i in st:\n        d[i].sort()\n        l[i] = len(d[i])\n    a = [0] * n\n    for i in st:\n        ps = {0: 0}\n        for j in range(l[i]):\n            ps[j + 1] = ps[j] + d[i][j]\n        for k in range(1, l[i] + 1):\n            s = 0\n            rem = l[i] % k\n            s = ps[l[i]] - ps[rem]\n            a[k - 1] += s\n    print(*a)", "import sys\nimport math\nfrom collections import Counter, defaultdict\nL = lambda : list(map(int, input().split()))\nIN = lambda : int(input())\nS = lambda : input()\n\ndef solve():\n    n = IN()\n    a = L()\n    s = L()\n    d = Counter(a)\n    ans = [0] * (n + 1)\n    b = [[] for i in range(n + 1)]\n    for i in range(n):\n        b[a[i]].append(s[i])\n    for i in d:\n        b[i].sort(reverse=True)\n        c = [0] * d[i]\n        c[0] = b[i][0]\n        for j in range(1, d[i]):\n            c[j] += c[j - 1] + b[i][j]\n        for j in range(1, d[i] + 1):\n            e = d[i] // j * j\n            ans[j] += c[e - 1]\n    ans.pop(0)\n    print(*ans)\nfor _ in range(IN()):\n    solve()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    u = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    ans = [0] * n\n    dic = defaultdict(list)\n    for i in range(n):\n        dic[u[i]].append(s[i])\n    for i in dic:\n        arr = dic[i]\n        arr.sort(reverse=True)\n        l = len(arr)\n        pref = []\n        for j in range(1, l):\n            arr[j] += arr[j - 1]\n        for j in range(len(arr)):\n            if l % (j + 1) == 0:\n                ans[j] += arr[l - 1]\n            else:\n                ans[j] += arr[l // (j + 1) * (j + 1) - 1]\n    ans[0] = sum(s)\n    print(*ans)", "def solve():\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    u = [x for x in sorted(zip(s, u))]\n    uni = [[0] for _ in range(n)]\n    for i in reversed(u):\n        uni[i[1] - 1].append(uni[i[1] - 1][-1] + i[0])\n    ans = [0] * n\n    for i in uni:\n        x = len(i) - 1\n        for j in range(1, x + 1):\n            ans[j - 1] += i[x - x % j]\n    return ' '.join((str(x) for x in ans))\nfor t in range(int(input())):\n    n = int(input())\n    print(solve())", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    univs = list(map(int, input().split()))\n    skill = list(map(int, input().split()))\n    d = collections.defaultdict(list)\n    for (u, s) in zip(univs, skill):\n        d[u].append(s)\n    skill = [0] * (n + 1)\n    for u in d:\n        d[u].sort()\n        length = len(d[u])\n        pref = [0] * (length + 1)\n        for i in range(length):\n            pref[i + 1] = pref[i] + d[u][i]\n        for i in range(1, length + 1):\n            skill[i] += pref[-1] - pref[length % i]\n    print(*skill[1:])", "from collections import defaultdict\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    for key in d:\n        d[key].sort()\n    for key in d:\n        for i in range(1, len(d[key])):\n            d[key][i] = d[key][i - 1] + d[key][i]\n    ans = [0] * n\n    for ele in d:\n        for i in range(1, n + 1):\n            if len(d[ele]) % i == 0:\n                ans[i - 1] += d[ele][-1]\n            elif i > len(d[ele]):\n                break\n            else:\n                rem = len(d[ele]) % i\n                ans[i - 1] += d[ele][-1] - d[ele][rem - 1]\n    print(*ans)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    u = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    universities = defaultdict(list)\n    for j in range(n):\n        universities[u[j]].append(s[j])\n    sums = {}\n    for (university, students) in universities.items():\n        students.sort(reverse=True)\n        sums[university] = [0]\n        for student in students:\n            sums[university].append(sums[university][-1] + student)\n        sums[university].reverse()\n    region_powers = [0] * (n + 1)\n    for (university, students) in universities.items():\n        student_count = len(students)\n        for k in range(1, student_count + 1):\n            left_over_indices = student_count % k\n            region_powers[k] += sums[university][left_over_indices]\n    for region_power in region_powers[1:]:\n        print(region_power, end=' ')\n    print()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve():\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    university_skills = [[] for _ in range(n)]\n    for (skill, uni) in zip(s, u):\n        university_skills[uni - 1].append(skill)\n    for skills in university_skills:\n        skills.sort(reverse=True)\n    university_teams = [[0] for _ in range(n)]\n    for (skills, team) in zip(university_skills, university_teams):\n        for student_skill in skills:\n            team.append(team[-1] + student_skill)\n    university_teams.sort(key=len, reverse=True)\n    strengths = []\n    for k in range(1, n + 1):\n        strength = 0\n        for uni in range(len(university_teams) - 1, -1, -1):\n            if len(university_teams[uni]) < k + 1:\n                university_teams.pop()\n            else:\n                num_students = len(university_teams[uni]) - 1\n                num_teams = num_students // k\n                strength += university_teams[uni][k * num_teams]\n        strengths.append(strength)\n    return ' '.join(map(str, strengths))\nt = int(input())\noutput = []\nfor _ in range(t):\n    output.append(solve())\nprint(*output, sep='\\n')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    students = list(map(int, input().split()))\n    strength = list(map(int, input().split()))\n    univs = {}\n    for (st, sk) in zip(students, strength):\n        if st not in univs:\n            univs[st] = [sk]\n        else:\n            univs[st].append(sk)\n    for students in univs:\n        univs[students].sort(reverse=True)\n    for students in univs:\n        l = len(univs[students])\n        for i in range(1, l):\n            univs[students][i] += univs[students][i - 1]\n    ans = [0] * n\n    for students in univs:\n        l = len(univs[students])\n        for i in range(1, l + 1):\n            limit = l // i * i\n            if limit != 0:\n                ans[i - 1] += univs[students][limit - 1]\n    print(*ans)", "import math\nfrom sys import stdin, stdout\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef ii():\n    return int(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return stdin.readline()\n\ndef prefix(l1):\n    for i in range(1, len(l1)):\n        l1[i] += l1[i - 1]\nfor _ in range(ii()):\n    n = ii()\n    dict1 = {}\n    l1 = li()\n    l2 = li()\n    for i in range(n):\n        if l1[i] in dict1:\n            dict1[l1[i]].append(l2[i])\n        else:\n            dict1[l1[i]] = [l2[i]]\n    for i in dict1:\n        dict1[i].sort(reverse=True)\n    for i in dict1:\n        prefix(dict1[i])\n    ans = [0] * n\n    for i in dict1:\n        k = len(dict1[i])\n        for j in range(1, k + 1):\n            ind = k - k % j - 1\n            ans[j - 1] += dict1[i][ind]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    dp = dict()\n    for i in range(n):\n        try:\n            dp[u[i]].append(s[i])\n        except:\n            dp[u[i]] = []\n            dp[u[i]].append(s[i])\n    op = 0\n    ans = [0 for i in range(n + 1)]\n    for i in dp:\n        dp[i].sort(reverse=True)\n        halp = [0]\n        for x in dp[i]:\n            halp.append(halp[-1] + x)\n        for j in range(1, len(halp)):\n            ans[j] += halp[len(dp[i]) // j * j]\n    print(*ans[1:])", "for t in range(int(input())):\n    n = int(input())\n    u = tuple(map(int, input().split()))\n    s = tuple(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        if u[i] not in d:\n            d[u[i]] = [s[i]]\n        else:\n            d[u[i]].append(s[i])\n    l = [0] * n\n    for i in d:\n        a = sorted(d[i])[::-1]\n        b = []\n        c = 0\n        for j in range(len(a)):\n            c += a[j]\n            b.append(c)\n        for k in range(1, len(a) + 1):\n            m = len(a) - len(a) % k\n            l[k - 1] += b[m - 1]\n    print(*l)", "def solve():\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    u = [x for x in sorted(zip(s, u))]\n    uni = [[0] for _ in range(n)]\n    for i in reversed(u):\n        uni[i[1] - 1].append(uni[i[1] - 1][-1] + i[0])\n    ans = [0] * n\n    for i in uni:\n        x = len(i) - 1\n        for j in range(1, x + 1):\n            ans[j - 1] += i[x - x % j]\n    return ' '.join((str(x) for x in ans))\nfor t in range(int(input())):\n    n = int(input())\n    print(solve())", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    d = [[0] for i in range(n)]\n    for (i, j) in sorted(zip(map(int, input().split()), map(int, input().split())), key=lambda x: x[1]):\n        d[i - 1].append(j)\n    for i in range(n):\n        for j in range(1, len(d[i])):\n            d[i][j] += d[i][j - 1]\n        for j in range(1, len(d[i])):\n            a[j - 1] += d[i][-1] - d[i][(len(d[i]) - 1) % j]\n    print(' '.join(map(str, a)))", "t = int(input())\nfor case in range(1, t + 1):\n    n = int(input())\n    unis = [int(x) for x in input().split(' ')]\n    skills = [int(x) for x in input().split(' ')]\n    students = {}\n    total = 0\n    for (u, s) in zip(unis, skills):\n        if u in students:\n            students[u].append(s)\n        else:\n            students[u] = [s]\n        total += s\n    stop = 0\n    dp = {}\n    for (u, stu) in students.items():\n        stop = max(len(stu), stop)\n        if len(stu) not in dp:\n            dp[len(stu)] = [0] * (len(stu) + 1)\n        ps = 0\n        for (i, s) in enumerate(sorted(stu)):\n            ps += s\n            dp[len(stu)][i + 1] += ps\n    ans = [0] * n\n    for k in range(1, n + 1):\n        if k > stop:\n            break\n        score = total\n        for (l, ps) in dp.items():\n            mod = l % k\n            score -= ps[mod]\n        ans[k - 1] = score\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    store = {}\n    for i in range(n):\n        if a[i] not in store:\n            store[a[i]] = []\n        store[a[i]].append(b[i])\n    ans = [0 for i in range(n + 1)]\n    for i in store:\n        store[i] = sorted(store[i])[::-1]\n        s = 0\n        a = [0]\n        for j in store[i]:\n            s += j\n            a.append(s)\n        l = len(a) - 1\n        for j in range(1, l + 1):\n            x = j * (l // j)\n            ans[j] += a[x]\n    print(*ans[1:])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        if not u[i] in dic:\n            dic[u[i]] = []\n            dic[u[i]].append(s[i])\n        else:\n            dic[u[i]].append(s[i])\n    mx = 0\n    for i in dic:\n        dic[i] = sorted(dic[i], reverse=True)\n        for j in range(1, len(dic[i])):\n            dic[i][j] += dic[i][j - 1]\n    ans = [0 for i in range(n)]\n    for i in dic:\n        for j in range(len(dic[i])):\n            ans[j] += dic[i][len(dic[i]) - len(dic[i]) % (j + 1) - 1]\n    for i in ans:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if u[i] not in d:\n            d[u[i]] = [s[i]]\n        else:\n            d[u[i]].append(s[i])\n    res = [0] * n\n    mx = -1\n    for i in d:\n        a = d[i]\n        a.sort(reverse=True)\n        for j in range(len(a)):\n            if j != 0:\n                a[j] += a[j - 1]\n        mx = max(len(a), mx)\n    for i in d:\n        a = d[i]\n        ln = len(a)\n        for x in range(1, ln + 1):\n            ix = ln % x\n            if ln >= x:\n                res[x - 1] += a[ln - ix - 1]\n    print(*res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    unv = defaultdict(list)\n    for (u1, s1) in sorted(zip(u, s)):\n        if u1 not in unv:\n            unv[u1].append(s1)\n        else:\n            unv[u1].append(s1 + unv[u1][-1])\n    ans = [0] * n\n    for u1 in unv:\n        l = len(unv[u1])\n        for k in range(1, l + 1):\n            left = l % k\n            if left == 0:\n                ans[k - 1] += unv[u1][-1]\n                continue\n            ans[k - 1] += unv[u1][-1] - unv[u1][left - 1]\n    for elm in ans:\n        print(elm, end=' ')\n    print(end='\\n')", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil, sqrt\nfrom collections import defaultdict\nfrom operator import itemgetter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        d[a[i]].append(b[i])\n    d = list(d.items())\n    for (x, y) in d:\n        y.sort(reverse=True)\n    d.sort(key=lambda x: len(x[1]), reverse=True)\n    for (x, y) in d:\n        for i in range(1, len(y)):\n            y[i] += y[i - 1]\n    res = [-1 for _ in range(n)]\n    lim = len(d)\n    for i in range(n):\n        ans = 0\n        for j in range(lim):\n            l = len(d[j][1])\n            if l < i + 1:\n                lim = j\n                break\n            ans += d[j][1][l - 1 - l % (i + 1)]\n        res[i] = ans\n    print(*res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [b[i]]\n        else:\n            d[a[i]].append(b[i])\n    for i in d:\n        k = len(d[i])\n        d[i] = sorted(d[i], reverse=True)\n        for j in range(1, k):\n            d[i][j] += d[i][j - 1]\n        for j in range(1, n + 1):\n            m = k // j\n            if m != 0:\n                ans[j - 1] += d[i][m * j - 1]\n            else:\n                break\n    print(*ans)", "import itertools\nfrom collections import defaultdict\n\ndef readline():\n    return map(int, input().split())\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        n = int(input())\n        u = list(readline())\n        s = list(readline())\n        students = defaultdict(list)\n        for (ui, si) in zip(u, s):\n            students[ui].append(si)\n        total_skills = [list(itertools.accumulate(reversed(sorted(skills)), initial=0)) for skills in students.values()]\n        ans = [0] * n\n        for tsi in total_skills:\n            l = len(tsi) - 1\n            for k in range(1, l + 1):\n                ans[k - 1] += tsi[l - l % k]\n        print(*ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    u = [int(d) for d in input().split()]\n    s = [int(d) for d in input().split()]\n    d = {}\n    l = [0] * (n + 1)\n    for i in range(n):\n        if u[i] in d:\n            d[u[i]].append(s[i])\n        else:\n            d[u[i]] = [s[i]]\n    for i in d:\n        a = d[i]\n        a.sort()\n        a.reverse()\n        b = [0]\n        c = 0\n        for j in range(len(a)):\n            c += a[j]\n            b.append(c)\n        for k in range(1, len(a) + 1):\n            if len(a) % k == 0:\n                l[k] += c\n            else:\n                m = len(a) // k * k\n                l[k] += b[m]\n    print(*[l[i] for i in range(1, n + 1)])", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    u = list(map(int, input().split()))\n    mx = 1\n    dic = {}\n    totsum = 0\n    for (index, value) in enumerate(input().split()):\n        totsum += int(value)\n        if u[index] not in dic:\n            dic[u[index]] = [int(value)]\n        else:\n            dic[u[index]].append(int(value))\n        mx = max(len(dic[u[index]]), mx)\n    ans = [0] * n\n    for key in dic:\n        dic[key].sort()\n        s = dic[key][0]\n        ln = len(dic[key])\n        for i in range(1, len(dic[key])):\n            dic[key][i] = dic[key][i] + s\n            s = dic[key][i]\n        for i in range(1, ln + 1):\n            re = ln % i\n            if re == 0:\n                ans[i - 1] += dic[key][ln - 1]\n            else:\n                ans[i - 1] += dic[key][ln - 1] - dic[key][re - 1]\n    print(*ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    U = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    univ = [[] for _ in range(n + 1)]\n    ps = {}\n    for i in range(n):\n        univ[U[i]].append(S[i])\n    for i in range(1, n + 1):\n        univ[i].sort()\n        m = len(univ[i])\n        ps[i] = []\n        curr = 0\n        for j in range(m):\n            curr += univ[i][j]\n            ps[i].append(curr)\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        m = len(univ[i])\n        for j in range(1, m + 1):\n            r = m % j\n            if r == 0:\n                ans[j] += ps[i][-1]\n            else:\n                ans[j] += ps[i][-1] - ps[i][r - 1]\n    return ans[1:]\nfor _ in range(int(input())):\n    print(*solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [b[i]]\n        else:\n            d[a[i]].append(b[i])\n    for i in d:\n        k = len(d[i])\n        d[i] = sorted(d[i], reverse=True)\n        for j in range(1, k):\n            d[i][j] += d[i][j - 1]\n        for j in range(1, n + 1):\n            m = k // j\n            if m != 0:\n                ans[j - 1] += d[i][m * j - 1]\n            else:\n                break\n    print(*ans)", "import math\nfrom collections import Counter, defaultdict\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    u = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    st = set(u)\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    l = [0] * (n + 1)\n    sm = [0] * (n + 1)\n    for i in st:\n        d[i].sort()\n        l[i] = len(d[i])\n    a = [0] * n\n    for i in st:\n        ps = [0] * (l[i] + 1)\n        for j in range(l[i]):\n            ps[j + 1] = ps[j] + d[i][j]\n        for k in range(1, l[i] + 1):\n            s = 0\n            rem = l[i] % k\n            s = ps[-1] - ps[rem]\n            a[k - 1] += s\n    print(*a)", "for t in range(int(input())):\n    n = int(input())\n    u = tuple(map(int, input().split()))\n    s = tuple(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        if u[i] not in d:\n            d[u[i]] = [s[i]]\n        else:\n            d[u[i]].append(s[i])\n    l = [0] * n\n    for i in d:\n        a = sorted(d[i])[::-1]\n        b = []\n        c = 0\n        for j in range(len(a)):\n            c += a[j]\n            b.append(c)\n        for k in range(1, len(a) + 1):\n            if len(a) % k == 0:\n                l[k - 1] += c\n            else:\n                m = len(a) - len(a) % k\n                l[k - 1] += b[m - 1]\n    print(*l)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    uni = list(map(int, input().split()))\n    strength = list(map(int, input().split()))\n    l2d = dict()\n    for i in range(n):\n        if uni[i] in l2d.keys():\n            l2d[uni[i]].append(strength[i])\n        else:\n            l2d[uni[i]] = [strength[i]]\n    uni = set(uni)\n    ans = [0] * n\n    for i in uni:\n        l2d[i].sort(reverse=True)\n        arr = []\n        c = 0\n        sz = len(l2d[i])\n        for j in range(len(l2d[i])):\n            c += l2d[i][j]\n            arr.append(c)\n        for k in range(1, n + 1):\n            if k > sz:\n                break\n            ans[k - 1] += arr[sz - sz % k - 1]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    univ = list(map(int, input().split()))\n    skill = list(map(int, input().split()))\n    l = [[] for _ in range(n)]\n    for i in range(n):\n        l[univ[i] - 1].append(skill[i])\n    for i in range(n):\n        l[i].sort(reverse=True)\n        for j in range(1, len(l[i])):\n            l[i][j] += l[i][j - 1]\n    res = [0] * n\n    for i in range(n):\n        for k in range(1, len(l[i]) + 1):\n            x = len(l[i]) // k\n            t = x * k\n            if t != 0:\n                res[k - 1] += l[i][t - 1]\n    print(*res)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    uni = list(map(int, input().split()))\n    skill = list(map(int, input().split()))\n    total = sum(skill)\n    teams = {}\n    for i in range(n):\n        if uni[i] - 1 not in teams:\n            teams[uni[i] - 1] = []\n        teams[uni[i] - 1].append(skill[i])\n    partial_sums = {}\n    for (k, t) in teams.items():\n        t.sort()\n        partial_sums[k] = [0]\n        run_sum = 0\n        for num in t:\n            run_sum += num\n            partial_sums[k].append(run_sum)\n    ans = [0] * n\n    for (k, t) in teams.items():\n        for x in range(len(t)):\n            ans[x] += partial_sums[k][-1] - partial_sums[k][len(t) % (x + 1)]\n    for x in ans:\n        print(x, end=' ')\n    print()", "import math\nfrom collections import Counter, defaultdict\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    u = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    st = set(u)\n    d = defaultdict(list)\n    for i in range(n):\n        d[u[i]].append(s[i])\n    l = [0] * (n + 1)\n    sm = [0] * (n + 1)\n    for i in st:\n        d[i].sort()\n        l[i] = len(d[i])\n    a = [0] * n\n    for i in st:\n        ps = defaultdict(lambda : 0)\n        for j in range(l[i]):\n            ps[j + 1] = ps[j] + d[i][j]\n        for k in range(1, l[i] + 1):\n            s = 0\n            rem = l[i] % k\n            s = ps[l[i]] - ps[rem]\n            a[k - 1] += s\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    u = [int(d) for d in input().split()]\n    s = [int(d) for d in input().split()]\n    d = {}\n    for i in range(n):\n        if u[i] in d:\n            d[u[i]].append(s[i])\n        else:\n            d[u[i]] = [s[i]]\n    l = [0] * (n + 1)\n    for i in d:\n        a = d[i]\n        a.sort()\n        a.reverse()\n        b = [0]\n        c = 0\n        for j in range(len(a)):\n            c += a[j]\n            b.append(c)\n        for k in range(1, len(a) + 1):\n            if len(a) % k == 0:\n                l[k] += c\n            else:\n                m = len(a) // k * k\n                l[k] += b[m]\n    for i in range(1, n + 1):\n        print(l[i], end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    u = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    d = [[] for i in range(n)]\n    ln = [0] * n\n    for i in range(n):\n        d[u[i] - 1].append(s[i])\n        ln[u[i] - 1] += 1\n    for i in range(n):\n        if not d[i]:\n            continue\n        d[i].sort(reverse=True)\n        for j in range(1, ln[i]):\n            d[i][j] += d[i][j - 1]\n        d[i] = [0] + d[i]\n    ans = [0] * n\n    for i in range(n):\n        if not d[i]:\n            continue\n        for j in range(ln[i]):\n            ans[j] += d[i][ln[i] - ln[i] % (j + 1)]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        k = u[i]\n        if k in dic:\n            dic[k].append(s[i])\n        else:\n            dic[k] = [s[i]]\n    o = set(u)\n    ans = [0] * n\n    for i in o:\n        dic[i].sort()\n        dic[i].reverse()\n        v = len(dic[i])\n        hold = []\n        c = 0\n        for j in range(len(dic[i])):\n            c += dic[i][j]\n            hold.append(c)\n        for j in range(1, n + 1):\n            if j > v:\n                break\n            else:\n                ran = v // j * j\n                ans[j - 1] += hold[ran - 1]\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    res = [[] for i in range(max(u) + 1)]\n    result = [0] * n\n    for i in range(n):\n        res[u[i]].append(s[i])\n    for item in res:\n        item.sort()\n    for i in res:\n        sum = [0]\n        s = 0\n        for j in range(len(i)):\n            sum.append(sum[-1] + i[j])\n            s += i[j]\n        for k in range(1, len(i) + 1):\n            result[k - 1] += s - sum[len(i) % k]\n    print(*result)", "from collections import defaultdict\nfrom itertools import accumulate\nfor _ in range(int(input())):\n    n = int(input())\n    u = map(int, input().split())\n    s = map(int, input().split())\n    d = defaultdict(list)\n    for (uu, ss) in zip(u, s):\n        d[uu].append(ss)\n    for (k, v) in d.items():\n        v.sort(reverse=True)\n        d[k] = list(accumulate(d[k]))\n    unis = range(1, n + 1)\n    for k in range(1, n + 1):\n        new_unis = []\n        o = 0\n        for uu in unis:\n            if len(d[uu]) >= k:\n                o += d[uu][len(d[uu]) // k * k - 1]\n                new_unis.append(uu)\n        unis = new_unis\n        print(o, end=' ')\n    print()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "for ttt in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    res = [[] for _ in range(max(u) + 1)]\n    for i in range(n):\n        res[u[i]].append(s[i])\n    for item in res:\n        item.sort()\n    result = [0] * n\n    for it in res:\n        sum = [0]\n        s = 0\n        for i in range(len(it)):\n            sum.append(sum[-1] + it[i])\n            s += it[i]\n        for k in range(1, len(it) + 1):\n            result[k - 1] += s - sum[len(it) % k]\n    print(*result)", "for _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    l = [[] for i in range(n + 1)]\n    for i in range(n):\n        l[u[i]].append(s[i])\n    for i in range(n + 1):\n        l[i].sort(reverse=True)\n        add = 0\n        ll = len(l[i])\n        for j in range(ll):\n            add += l[i][j]\n            l[i][j] = add\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        ll = len(l[i])\n        for j in range(1, ll + 1):\n            ans[j] += l[i][ll // j * j - 1]\n    print(*ans[1:])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    a = [[0] for _ in [0] * n]\n    r = [0] * n\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range(1, len(x)):\n            r[i - 1] += x[(len(x) - 1) // i * i]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "for test in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    x = [[] for i in range(n)]\n    ans = [0] * n\n    for i in range(n):\n        x[u[i] - 1].append(s[i])\n    for i in range(n):\n        x[i].sort(reverse=True)\n        for j in range(1, len(x[i])):\n            x[i][j] += x[i][j - 1]\n        fi = len(x[i])\n        for k in range(1, fi + 1):\n            f = fi - fi % k\n            ans[k - 1] += x[i][f - 1]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    univ = list(map(int, input().split()))\n    skill = list(map(int, input().split()))\n    each = [[] for i in range(n + 1)]\n    for i in range(n):\n        each[univ[i]].append(skill[i])\n    for i in range(n + 1):\n        each[i].sort(reverse=True)\n        add = 0\n        ll = len(each[i])\n        for j in range(ll):\n            add += each[i][j]\n            each[i][j] = add\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        ll = len(each[i])\n        for j in range(1, ll + 1):\n            ans[j] += each[i][ll // j * j - 1]\n    print(*ans[1:])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range(1, (l := len(x))):\n            r[i - 1] += x[-1] - x[(l - 1) % i]\n    print(*r)", "import math\n\ndef main():\n    (t,) = list(map(int, input().split()))\n    for _ in range(t):\n        (n,) = list(map(int, input().split()))\n        u = list(map(int, input().split()))\n        s = list(map(int, input().split()))\n        u_s = [[] for __ in range(n)]\n        pref_u_s = [[] for __ in range(n)]\n        for i in range(n):\n            u_s[u[i] - 1].append(s[i])\n        for i in range(n):\n            if len(u_s[i]) > 0:\n                u_s[i].sort(key=lambda x: -x)\n                pref_u_s[i] = [0] * (len(u_s[i]) + 1)\n                pref_u_s[i][1] = u_s[i][0]\n                for j in range(2, len(u_s[i]) + 1):\n                    pref_u_s[i][j] = pref_u_s[i][j - 1] + u_s[i][j - 1]\n        power = [0] * n\n        for i in range(n):\n            l = len(u_s[i])\n            for k in range(l):\n                power[k] += pref_u_s[i][l - l % (k + 1)]\n        for i in range(n):\n            print(power[i], end=' ')\n        print('')\nmain()", "from math import *\nread_int = lambda : int(input())\nread_ints = lambda : map(int, input().split())\nread_list = lambda : list(map(int, input().split()))\nfirst_is_min = lambda a, b: (b, a) if a > b else (a, b)\nt = read_int()\nres = ''\nfor _ in range(t):\n    n = read_int()\n    unis = read_list()\n    skills = read_list()\n    unis_split = {}\n    for (index, uni) in enumerate(unis):\n        unis_split.setdefault(uni - 1, []).append(skills[index])\n    for uni in unis_split.values():\n        uni.sort(reverse=True)\n        for i in range(1, len(uni)):\n            uni[i] += uni[i - 1]\n    unis_split = [unis_split[k] for k in sorted(unis_split, reverse=True, key=lambda k: len(unis_split[k]))]\n    for i in range(1, n + 1):\n        ans = 0\n        for uni in unis_split:\n            md = len(uni) % i\n            if md != len(uni):\n                ans += uni[-md - 1]\n            else:\n                unis_split.pop()\n                break\n        res += f'{ans} '\n    res += '\\n'\nprint(res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    U = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    B = sorted(list(zip(S, U)), reverse=True)\n    A = dict()\n    for b in B:\n        (v, i) = b\n        if A.get(i):\n            A[i].append(A[i][-1] + v)\n        else:\n            A[i] = [v]\n    B = [0] * n\n    for i in A:\n        for k in range(1, len(A[i]) + 1):\n            r = len(A[i]) % k\n            B[k - 1] += A[i][len(A[i]) - r - 1]\n    print(*B)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    uni = list(map(int, input().split()))\n    std = list(map(int, input().split()))\n    dic = dd(list)\n    for i in range(n):\n        dic[uni[i]].append(std[i])\n    prfx = dd(list)\n    for i in dic:\n        sm = 0\n        dic[i].sort()\n        for j in range(len(dic[i]) - 1, -1, -1):\n            sm += dic[i][j]\n            prfx[i].append(sm)\n    ans = [0] * n\n    for i in dic:\n        for k in range(1, n + 1):\n            div = len(dic[i]) // k\n            if div == 0:\n                break\n            ans[k - 1] += prfx[i][div * k - 1]\n    for i in range(len(ans)):\n        print(ans[i], end=' ')\n    print('')", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "for test in range(int(input())):\n    n = int(input())\n    us = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    x = [[] for i in range(n)]\n    ans = [0] * n\n    for i in range(n):\n        x[us[i] - 1].append(s[i])\n    for i in range(n):\n        x[i].sort(reverse=True)\n        for j in range(1, len(x[i])):\n            x[i][j] += x[i][j - 1]\n        fig = len(x[i])\n        for k in range(1, fig + 1):\n            f = fig - fig % k\n            ans[k - 1] += x[i][f - 1]\n    print(*ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range(1, len(x)):\n            r[i - 1] += x[(len(x) - 1) // i * i]\n    print(*r)", "t = int(input())\nfor _ in range(t):\n    ns = int(input())\n    us = [int(d) for d in input().split()]\n    s = [int(d) for d in input().split()]\n    d = {}\n    for i in range(ns):\n        if us[i] in d:\n            d[us[i]].append(s[i])\n        else:\n            d[us[i]] = [s[i]]\n    l = [0] * (ns + 1)\n    for i in d:\n        a = d[i]\n        a.sort()\n        a.reverse()\n        b = [0]\n        c = 0\n        for j in range(len(a)):\n            c += a[j]\n            b.append(c)\n        for k in range(1, len(a) + 1):\n            if len(a) % k == 0:\n                l[k] += c\n            else:\n                m = len(a) // k * k\n                l[k] += b[m]\n    for i in range(1, ns + 1):\n        print(l[i], end=' ')\n    print()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range(1, len(x)):\n            r[i - 1] += x[-1] - x[(len(x) - 1) % i]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    r = [0] * n\n    a = [[0] for _ in r]\n    for (x, y) in sorted(zip(R(), R())):\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range((l := (len(x) - 1))):\n            r[i] += x[-1] - x[l % (i + 1)]\n    print(*r)", "T = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    A = dict()\n    u = list(map(int, input().split(' ')))\n    s = list(map(int, input().split(' ')))\n    B = sorted(list(zip(s, u)), reverse=True)\n    for b in B:\n        (v, i) = b\n        if A.get(i):\n            A[i].append(A[i][-1] + v)\n        else:\n            A[i] = [v]\n    B = [0] * n\n    for i in A.keys():\n        for k in range(1, len(A[i]) + 1):\n            r = len(A[i]) % k\n            B[k - 1] += A[i][len(A[i]) - r - 1]\n    print(*B)", "T = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    A = {}\n    u = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n    B = sorted(list(zip(s, u)), reverse=True)\n    for b in B:\n        (v, i) = b\n        if A.get(i):\n            A[i].append(A[i][-1] + v)\n        else:\n            A[i] = [v]\n    B = [0] * n\n    for i in A.keys():\n        for k in range(1, len(A[i]) + 1):\n            r = len(A[i]) % k\n            B[k - 1] += A[i][len(A[i]) - r - 1]\n    print(*B)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    students = list(map(int, input().split()))\n    strength = list(map(int, input().split()))\n    combined = sorted(zip(strength, students), reverse=True)\n    univs = [[] for _ in range(max(students))]\n    for i in combined:\n        if len(univs[i[1] - 1]) == 0:\n            univs[i[1] - 1].append(i[0])\n        else:\n            univs[i[1] - 1].append(univs[i[1] - 1][-1] + i[0])\n    ans = [0] * n\n    for students in univs:\n        l = len(students)\n        for i in range(1, l + 1):\n            limit = l // i * i\n            if limit != 0:\n                ans[i - 1] += students[limit - 1]\n    print(*ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    a = [[0] for _ in [0] * n]\n    r = [0] * n\n    for (x, y) in sorted(zip(R(), R()))[::-1]:\n        l = a[x - 1]\n        l += (l[-1] + y,)\n    for x in a:\n        for i in range(1, len(x)):\n            r[i - 1] += x[(len(x) - 1) // i * i]\n    print(*r)", "import sys\nimport math\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline()\nfor _ in range(int(input())):\n    n = int(input())\n    arr1 = int_arr()\n    arr2 = int_arr()\n    (arr1, arr2) = zip(*sorted(zip(arr1, arr2)))\n    dict = {}\n    for i in range(n):\n        if dict.get(arr1[i], None) == None:\n            dict[arr1[i]] = [arr2[i]]\n        else:\n            dict[arr1[i]].append(arr2[i] + dict[arr1[i]][-1])\n    ans = [0] * n\n    for j in dict:\n        for i in range(1, len(dict[j]) + 1):\n            l = len(dict[j]) % i\n            if l == 0:\n                ans[i - 1] += dict[j][-1]\n            else:\n                ans[i - 1] += dict[j][-1] - dict[j][l - 1]\n    print(*ans)", "def rt(n, r, m):\n    dp = [[] for i in range(0, m)]\n    for i in range(0, len(n)):\n        dp[n[i] - 1].append(r[i])\n    q = []\n    p1 = [[0 for i in range(0, len(dp[k]))] for k in range(0, m)]\n    for i in range(0, len(dp)):\n        dp[i].sort(reverse=True)\n        for x in range(0, len(dp[i])):\n            if x == 0:\n                p1[i][x] = dp[i][x]\n            else:\n                p1[i][x] = p1[i][x - 1] + dp[i][x]\n        if len(dp[i]) >= 1:\n            q.append([len(dp[i]), i])\n    s = 0\n    q.sort()\n    l1 = 1\n    r1 = [0 for i in range(0, m)]\n    while s < len(q):\n        c1 = 0\n        for k in range(s, len(q)):\n            [a, b] = q[k]\n            if a >= l1:\n                z1 = a - a % l1 - 1\n                c1 = c1 + p1[b][z1]\n            else:\n                s = s + 1\n        if l1 - 1 < m:\n            r1[l1 - 1] = c1\n        l1 = l1 + 1\n    return r1\ns = int(input())\nfor i in range(0, s):\n    s1 = int(input())\n    n = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    x = rt(n, r, s1)\n    for j in x:\n        print(j, end=' ')\n    print('')"]