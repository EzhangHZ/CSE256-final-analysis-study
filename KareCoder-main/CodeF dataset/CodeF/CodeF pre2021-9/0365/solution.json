["import sys\ninput = sys.stdin.readline\n\ndef so():\n    (a, b) = map(int, input().split())\n    s = input()\n    if not '1' in s:\n        return '0'\n    dif = a // b\n    ind = s.index('1')\n    (c, z, res) = (0, False, a)\n    for i in s[ind:]:\n        if i == '1' and z:\n            if c <= dif:\n                res += c * b\n            else:\n                res += a\n            c = 0\n            z = False\n        elif i == '0':\n            z = True\n            c += 1\n    return res\nt = int(input())\nfor _ in range(t):\n    print(so())", "import fileinput\n\ndef main():\n    newline = fileinput.input()\n    line = newline.readline().rstrip()\n    tests = int(line)\n    for test in range(tests):\n        line = newline.readline().rstrip().split()\n        aCost = int(line[0])\n        pCost = int(line[1])\n        mines = str(newline.readline().rstrip())\n        start = False\n        tCoins = 0\n        pCoins = 0\n        for i in range(len(mines)):\n            if start:\n                if mines[i] == '0':\n                    pCoins += pCost\n                elif mines[i - 1] == '0':\n                    tCoins += min(aCost, pCoins)\n                    pCoins = 0\n            elif mines[i] == '1':\n                start = True\n                tCoins += aCost\n        print(tCoins)\nmain()", "cases = int(input())\ninp = []\nfor _ in range(cases):\n    inp.append([])\n    (a, b) = input().split(' ')\n    inp[-1] = [int(a), int(b)]\n    inp[-1].append(input())\nfor (a, b, s) in inp:\n    e = a // b\n    res = []\n    (o, z) = (0, 0)\n    for c in s:\n        if c == '1':\n            o += 1\n            if z != 0:\n                res.append((z, 0))\n                z = 0\n        if c == '0':\n            z += 1\n            if o != 0:\n                res.append((o, 1))\n                o = 0\n    if o != 0:\n        res.append((o, 1))\n    if z != 0:\n        res.append((z, 0))\n    ans = a\n    if res and res[0][1] == 0:\n        res.pop(0)\n    if res and res[-1][1] == 0:\n        res.pop(-1)\n    if not res:\n        print(0)\n        continue\n    c = 1\n    while c < len(res):\n        if res[c][0] > e:\n            c += 2\n            ans += a\n        elif res[c][0] <= e:\n            ans += res[c][0] * b\n            c += 2\n    print(ans)", "def miner(a, b, mines):\n    s = 0\n    j = 0\n    while j < len(mines) and mines[j] != '1':\n        j += 1\n    if j == len(mines):\n        return 0\n    for i in range(j + 1, len(mines)):\n        if mines[i] == '0' and mines[i - 1] == '1':\n            r1 = i - 1\n        elif mines[i] == '1' and mines[i - 1] == '0':\n            if b * (i - r1 - 1) <= a:\n                s += b * (i - r1 - 1)\n            else:\n                s += a\n    s += a\n    return s\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    mines = input()\n    print(miner(a, b, mines))", "def saving(a, b, s):\n    s = s.strip('0')\n    if len(s) == 0:\n        return 0\n    ans = 0\n    for x in s.split('1'):\n        ans += min(a, b * len(x))\n    return ans + a\nfor i in range(int(input())):\n    [a, b] = list(map(int, input().split()))\n    l = input()\n    print(saving(a, b, l))", "import sys\ninput = sys.stdin.readline\ntests = int(input())\nfor test in range(tests):\n    (activatingCost, placingCost) = map(int, input().split())\n    cityMap = input()\n    cityMap = cityMap.strip('\\n0')\n    if cityMap == '':\n        print(0)\n    else:\n        activations = 1\n        placings = 0\n        lastLot = '1'\n        emptylots = 0\n        for lot in cityMap:\n            if lastLot == '1':\n                if lot == '0':\n                    emptylots = 1\n                    lastLot = '0'\n            elif lot == '0':\n                emptylots += 1\n            else:\n                if placingCost * emptylots < activatingCost:\n                    placings += emptylots\n                else:\n                    activations += 1\n                lastLot = '1'\n                emptylots = 0\n        print(activations * activatingCost + placings * placingCost)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = input()\n    (c, ans) = (10 ** 9, 0)\n    for _ in l:\n        if _ == '0':\n            c += 1\n        else:\n            ans += min(a, b * c)\n            c = 0\n    print(ans)", "import math\nfrom collections import *\nfrom functools import lru_cache\nimport bisect\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ipl():\n    return list(map(int, input().split()))\n\ndef ipn():\n    return int(input())\n\ndef ipf():\n    return float(input())\n\ndef solve():\n    (a, b) = ipl()\n    s = ip()\n    n = len(s)\n    c = i = 0\n    pj = -1\n    while i < n:\n        if s[i] == '1':\n            j = i\n            while j < n and s[j] == '1':\n                j += 1\n            if pj == -1:\n                c += a\n            elif b * (i - pj) <= a:\n                c += b * (i - pj)\n            else:\n                c += a\n            pj = j\n            i = j\n        else:\n            i += 1\n    print(c)\nfor _ in range(int(input())):\n    solve()", "def miner(a, b, mines):\n    s = 0\n    j = 0\n    while j < len(mines) and mines[j] != '1':\n        j += 1\n    if j == len(mines):\n        return 0\n    for i in range(j + 1, len(mines)):\n        if mines[i] == '0' and mines[i - 1] == '1':\n            r1 = i - 1\n        elif mines[i] == '1' and mines[i - 1] == '0':\n            s += min(b * (i - r1 - 1), a)\n    s += a\n    return s\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    mines = input()\n    print(miner(a, b, mines))", "from sys import stdin\nip = stdin.readline\nfor _ in range(int(ip())):\n    (a, b) = map(int, ip().split())\n    s = ip()\n    n = len(s)\n    i = 0\n    while i < n and (not s[i] == '1'):\n        i += 1\n    if i == n:\n        print('0')\n        continue\n    cnt0 = 0\n    ans = a\n    last = '1'\n    for j in range(i + 1, n):\n        if s[j] == '0':\n            cnt0 += 1\n        elif s[j] == '1' and (not s[j] == last):\n            ans += min(a, cnt0 * b)\n            cnt0 = 0\n        last = s[j]\n    print(ans)", "import sys\n\ndef solve(mines, activate_cost, place_cost):\n    soln = 0\n    mine_fields = []\n    state = 0\n    for (i, m) in enumerate(mines):\n        if m != state:\n            if state == 0:\n                if mine_fields:\n                    delta = i - mine_fields[-1]\n                    if activate_cost + delta * place_cost < 2 * activate_cost:\n                        mine_fields.pop()\n                        soln += delta * place_cost\n            else:\n                mine_fields.append(i)\n        state = m\n    if state == 1:\n        mine_fields.append(len(mines))\n    soln += len(mine_fields) * activate_cost\n    return soln\n\ndef main():\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        (activate_cost, place_cost) = (int(i) for i in sys.stdin.readline().split())\n        mines = [int(i) for i in sys.stdin.readline().strip()]\n        print(solve(mines, activate_cost, place_cost))\nmain()", "t = int(input())\nfor i in range(t):\n    (a, b) = [int(x) for x in input().split()]\n    s = input()\n    res = 0\n    cur_cost = -1\n    for c in s:\n        if c == '1':\n            if cur_cost == -1:\n                res += a\n            elif cur_cost & cur_cost < a:\n                res += cur_cost\n            else:\n                res += a\n            cur_cost = 0\n        elif cur_cost != -1:\n            cur_cost += b\n    print(res)", "import sys, threading, os.path\nimport string\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(2 ** 27)\n\ndef main():\n    if os.path.exists('in.rtf'):\n        input = open('in.rtf', 'r')\n    else:\n        input = sys.stdin\n    t = int(input.readline())\n    results = []\n    for i in range(t):\n        (a, b) = list(map(int, input.readline().split()))\n        builds = str(input.readline().rstrip('\\n'))\n        (sum1, last1) = (0, -1)\n        for j in range(len(builds)):\n            if builds[j] == '1':\n                if last1 == -1:\n                    last1 = j\n                    sum1 += a\n                elif j - last1 == 1:\n                    last1 = j\n                else:\n                    sum1 += min(a, (j - last1 - 1) * b)\n                    last1 = j\n            else:\n                continue\n        results.append(sum1)\n    output = '\\n'.join(map(str, results))\n    if os.path.exists('out.rtf'):\n        open('out.rtf', 'w').writelines(str(output))\n    else:\n        sys.stdout.write(str(output))\nmain()", "import sys\nnum_tests = int(sys.stdin.readline())\nfor _ in range(num_tests):\n    (trigger_cost, mine_cost) = map(int, sys.stdin.readline().strip().split())\n    mines = sys.stdin.readline().strip()\n    mines = mines.strip('0')\n    gaps = []\n    l = 0\n    while l < len(mines):\n        if mines[l] == '1':\n            l += 1\n            continue\n        r = l + 1\n        while r < len(mines) and mines[r] == '0':\n            r += 1\n        gaps.append(r - l)\n        l = r\n    total_cost = 0\n    if not gaps:\n        if mines:\n            total_cost = trigger_cost\n    else:\n        total_cost = trigger_cost\n        for g in gaps:\n            total_cost += min(g * mine_cost, trigger_cost)\n    print(total_cost)", "import sys\n\ndef solve():\n    (a, b) = map(int, input().split())\n    s = input()\n    (x, y) = (sys.maxsize, 0)\n    for i in s:\n        if i == '0':\n            x += 1\n        else:\n            y += min(a, b * x)\n            x = 0\n    print(y)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nitog = []\nfor l in range(t):\n    (a, b) = list(map(int, input().split()))\n    mass = input()\n    dp = []\n    zero = 0\n    if mass[0] == '0':\n        zero += 1\n        dp.append(0)\n    else:\n        dp.append(a)\n    for i in range(1, len(mass)):\n        if mass[i - 1] == '0' and mass[i] == '1':\n            if dp[i - 1] == 0:\n                dp.append(a)\n            else:\n                dp.append(min(zero * b + dp[i - 1], dp[i - 1] + a))\n        elif mass[i - 1] == '1' and mass[i] == '0':\n            dp.append(dp[i - 1])\n            zero = 1\n        elif mass[i - 1] == '0' and mass[i] == '0':\n            dp.append(dp[i - 1])\n            zero += 1\n        else:\n            dp.append(dp[i - 1])\n    itog.append(dp[-1])\nfor i in itog:\n    print(i)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    cnt = 10 ** 12\n    c = 0\n    for i in s:\n        if i == '0':\n            cnt += 1\n        else:\n            c += min(a, b * cnt)\n            cnt = 0\n    print(c)", "tests = int(input())\nfor _ in range(tests):\n    (t, b) = map(int, input().split())\n    mines = input().strip('0')\n    zeros = []\n    onesChecker = False\n    counter = 0\n    for mine in mines:\n        if mine == '1' and counter > 0:\n            zeros.append(counter)\n            counter = 0\n            onesChecker = True\n        elif mine == '1':\n            onesChecker = True\n        else:\n            counter += 1\n    zeros = sorted(zeros)\n    if not onesChecker:\n        ones = 0\n    else:\n        ones = len(zeros) + 1\n    currBest = ones * t\n    for zero in zeros:\n        newBest = currBest - t + zero * b\n        if newBest < currBest:\n            currBest = newBest\n        else:\n            break\n    print(currBest)", "import math\ndebug = False\n\ndef pprint(*args):\n    if debug:\n        print(*args)\n\ndef solve():\n    (a, b) = map(int, input().split())\n    s = input()\n    n = len(s)\n    subs = []\n    index = 0\n    while index < n:\n        if s[index] == '1':\n            start = index\n            end = index\n            index += 1\n            while index < n and s[index] == '1':\n                index += 1\n                end += 1\n            subs.append([start, end])\n        index += 1\n    pprint(subs)\n    ans = 0\n    count_explode = 1\n    for i in range(len(subs) - 1):\n        left = subs[i]\n        right = subs[i + 1]\n        if (right[0] - left[1] - 1) * b + a <= 2 * a:\n            ans += (right[0] - left[1] - 1) * b\n            right[0] = left[0]\n    pprint(subs)\n    if len(subs) == 0:\n        return 0\n    for i in range(len(subs) - 1):\n        if subs[i][1] < subs[i + 1][0]:\n            count_explode += 1\n    return ans + count_explode * a\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    otr = []\n    flag = False\n    for i in range(len(s)):\n        if flag:\n            if s[i] == '0':\n                otr[-1][1] = i - 1\n                flag = False\n        elif s[i] == '1':\n            otr.append([i, 0])\n            flag = True\n    if len(otr) != 0:\n        ans = a\n    else:\n        ans = 0\n    for i in range(len(otr) - 1):\n        ans += min(a, b * (otr[i + 1][0] - otr[i][1] - 1))\n    print(ans)", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\nT = int(input())\nfor _ in range(T):\n    (a, b) = get_ints()\n    M = input()\n    min_cost = 0\n    zero_count = 0\n    start_counting = False\n    for i in range(len(M)):\n        if not start_counting:\n            if M[i] == '1':\n                start_counting = True\n                min_cost += a\n            continue\n        if M[i] == '0':\n            zero_count += 1\n        elif zero_count == 0:\n            min_cost += 0\n        else:\n            min_cost += min(zero_count * b, a)\n            zero_count = 0\n    print(min_cost)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    if not '1' in s:\n        print(0)\n        continue\n    (res, ind, z, c) = (a, s.index('1'), False, 0)\n    for i in s[ind:]:\n        if i == '1' and z:\n            res += min(c * b, a)\n            z = False\n            c = 0\n        if i == '0':\n            z = True\n            c += 1\n    print(res)", "from sys import stdin\n\ndef si():\n    return stdin.readline().strip()\n\ndef ii():\n    return int(si())\n\ndef mi():\n    return map(int, si().split())\n\ndef li():\n    return list(mi())\nt = ii()\nfor _ in range(t):\n    (a, b) = mi()\n    s = si()\n    count = float('inf')\n    res = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            res += min(a, b * count)\n            count = 0\n    print(res)", "import sys\ninput = sys.stdin.readline\nnum = int(input())\nwhile num > 0:\n    num = num - 1\n    (a, b) = map(int, input().split())\n    pp = input()\n    ans = 0\n    k = 0\n    q = -1\n    for i in range(len(pp)):\n        if pp[i] == '1':\n            q = 0\n            if a > b * k:\n                ans += b * k\n            else:\n                ans += a\n            k = 0\n        if k != 0:\n            k += 1\n        if i > 0 and pp[i - 1] == '1' and (pp[i] == '0'):\n            k = 1\n    if q == 0:\n        ans += a\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = list(input())\n    cnt = 0\n    ans = a\n    if '1' in s:\n        ind = s.index('1')\n    else:\n        print('0')\n        continue\n    for i in range(ind + 1, len(s)):\n        if s[i] == '0':\n            cnt += 1\n        else:\n            ans += min(a, cnt * b)\n            cnt = 0\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    l = 10 ** 9\n    need = 0\n    cost = 0\n    for i in s:\n        if i == '1':\n            cost += min(l * m, n)\n            l = 0\n        else:\n            l += 1\n    print(cost)", "def solve():\n    (a, b) = map(int, input().split())\n    s = input()\n    lst = -1\n    dist = []\n    cost = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            if lst == -1 or lst == i - 1:\n                pass\n            else:\n                dist.append(i - lst - 1)\n            lst = i\n    if lst != -1:\n        cost = a\n    for d in dist:\n        if d * b <= a:\n            cost += d * b\n        else:\n            cost += a\n    print(cost)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    mines = input().strip('0')\n    ans = 0\n    zero = 0\n    flag = 0\n    if len(mines) == 0:\n        ans = 0\n    else:\n        for i in mines:\n            if i == '0':\n                zero += 1\n            elif i == '1':\n                if flag == 1:\n                    ct = b * zero\n                    ans += min(a, ct)\n                    zero = 0\n                else:\n                    ans += a\n                    flag = 1\n    print(ans)", "def solve():\n    t = inp()\n    for j in range(t):\n        (a, b) = mul()\n        l = strl()\n        countzero = 0\n        countone = 0\n        batchone = 0\n        batchzero = []\n        if '1' in l:\n            for j in range(l.index('1'), len(l)):\n                if l[j] == '0':\n                    if countzero == 0:\n                        batchone += 1\n                    countzero += 1\n                else:\n                    if countzero != 0:\n                        batchzero.append(countzero)\n                    countzero = 0\n            total = a\n            for j in batchzero:\n                if j * b < a:\n                    total += j * b\n                else:\n                    total += a\n            print(total)\n        else:\n            print(0)\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nsolve()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input().strip('0')\n    if s == '':\n        print(0)\n    else:\n        n = []\n        c = 0\n        for x in list(s):\n            if x == '1':\n                n.append(c)\n                c = 0\n            else:\n                c += 1\n        n.append(c)\n        blow = 1\n        m = 0\n        for x in n:\n            if x > a // b:\n                blow += 1\n            else:\n                m += x\n        print(blow * a + m * b)", "for _ in range(int(input())):\n    (m, k) = map(int, input().split())\n    s = input()\n    st = [int(c) for c in s]\n    l = 0\n    while l < len(st) and st[l] == 0:\n        l += 1\n    safe = 0\n    ans = m if l < len(st) else 0\n    while l < len(st):\n        safe += st[l] == 0\n        if st[l] == 1 and safe != 0:\n            ans += min(m, k * safe)\n            safe = 0\n        l += 1\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    arr = list(str(input()))\n    (first, last) = (-1, -1)\n    for i in range(len(arr)):\n        if arr[i] == '1':\n            first = i\n            break\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == '1':\n            last = i\n            break\n    if first == last == -1:\n        print(0)\n    else:\n        ans = a\n        i = first\n        while i < last:\n            c = 0\n            while arr[i] == '0':\n                i += 1\n                c += 1\n            ans += min(b * c, a)\n            i += 1\n        print(ans)", "t = int(input())\n(aa, bb) = ([], [])\nss = []\nfor _ in range(t):\n    (a, b) = input().split()\n    aa.append(int(a))\n    bb.append(int(b))\n    ss.append(input())\nfor i in range(t):\n    n = aa[i] // bb[i]\n    s = ss[i]\n    if '1' in s:\n        fi = s.index('1')\n        li = len(s) - s[::-1].index('1') - 1\n        gaps = fills = 0\n        c = 0\n        for d in s[fi + 1:li + 1]:\n            if d == '0':\n                c += 1\n            else:\n                if c > n:\n                    gaps += 1\n                else:\n                    fills += c\n                c = 0\n        print(bb[i] * fills + aa[i] * (gaps + 1))\n    else:\n        print(0)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input().rstrip().strip('0') + '0'\n    n = len(s)\n    cnt = []\n    now = 1\n    res = 0\n    for (i, x) in enumerate(s[:-1]):\n        if s[i] == s[i + 1]:\n            now += 1\n        else:\n            cnt.append(now)\n            now = 1\n    m = len(cnt)\n    if m == 0:\n        print(0)\n        continue\n    for x in range(1, m, 2):\n        if cnt[x] * b <= a:\n            res += cnt[x] * b\n            res -= a\n    print(res + a * (m + 1) // 2)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        (a, b) = map(int, input().split())\n        M = list(input().rstrip())\n        while M and M[0] == '0':\n            M.pop(0)\n        while M and M[-1] == '0':\n            M.pop()\n        n = len(M)\n        cnt_a = 0\n        B = []\n        i = 0\n        while i < n:\n            if i < n and M[i] == '1':\n                cnt_a += 1\n                while i < n and M[i] == '1':\n                    i += 1\n            if i < n and M[i] == '0':\n                cnt = 0\n                while i < n and M[i] == '0':\n                    cnt += 1\n                    i += 1\n                i -= 1\n                B.append(b * cnt)\n            i += 1\n        res = 0\n        for cost_b in B:\n            if a * 2 >= a + cost_b:\n                cnt_a -= 1\n                res += cost_b\n        print(res + cnt_a * a)\nresolve()", "import sys\nt = int(sys.stdin.readline().strip())\nfor j in range(t):\n    (a, b) = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip('0')\n    dp = []\n    last = 0\n    zC = 0\n    if '1' not in s:\n        print(0)\n        continue\n    for i in range(len(s)):\n        if s[i] == '1' and last == 0:\n            if i != 0:\n                dp.append(zC)\n            zC = 0\n            last = 1\n        if s[i] == '0':\n            last = 0\n            zC += 1\n    total = a\n    for i in range(len(dp)):\n        total += min(a, dp[i] * b)\n    print(total)", "import sys\nfor l in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    (x, y) = (sys.maxsize, 0)\n    for i in s:\n        if i == '0':\n            x = x + 1\n        else:\n            y = y + min(a, b * x)\n            x = 0\n    print(y)", "n = int(input())\nfor i in range(0, n):\n    inab = input().split(' ')\n    a = int(inab[0])\n    b = int(inab[1])\n    inmines = input()\n    if not '1' in inmines:\n        print(0)\n        continue\n    L = []\n    count = 0\n    for i in range(0, len(inmines)):\n        if inmines[i] == '1':\n            if count == 0:\n                continue\n            if i == count:\n                count = 0\n            else:\n                L.append(count)\n                count = 0\n        else:\n            count += 1\n    if len(L) == 0:\n        print(a)\n        continue\n    m = a\n    for l in L:\n        m = min(a + m, b * l + m)\n    print(m)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    s = input()\n    lst = []\n    ind = 0\n    n = len(s)\n    while True:\n        if ind > n - 1:\n            break\n        elif s[ind] == '1':\n            c = 0\n            e = 0\n            for h in range(ind + 1, n):\n                if s[h] == '0':\n                    e += 1\n                    break\n                else:\n                    c += 1\n            lst.append([ind, ind + c])\n            ind = ind + c + 1\n        else:\n            ind += 1\n    c = 0\n    if lst != []:\n        if '0' not in s or len(lst) == 1:\n            c = a\n        else:\n            l1 = lst[0][0]\n            l2 = lst[1][0]\n            r1 = lst[0][1]\n            r2 = lst[1][1]\n            rones = r2 - l2 + 1\n            lones = r1 - l1 + 1\n            zer = l2 - r1 - 1\n            if zer * b + a <= 2 * a:\n                c += zer * b + a\n            else:\n                c += 2 * a\n            l = len(lst)\n            for h in range(2, l):\n                zer = lst[h][0] - lst[h - 1][1] - 1\n                if zer * b <= a:\n                    c += zer * b\n                else:\n                    c += a\n    print(c)", "t = int(input())\nwhile t:\n    (a, b) = [int(i) for i in input().split()]\n    s = input()\n    l = len(s)\n    i = 0\n    cluster = 0\n    z = []\n    first = False\n    while i < l:\n        if first == False:\n            if s[i] == '1':\n                first = True\n                cluster += 1\n                j = i\n                while s[j] == '1':\n                    j += 1\n                    if j == l:\n                        break\n                i = j\n            else:\n                i += 1\n        elif s[i] == '0':\n            c = 0\n            j = i\n            while s[j] == '0':\n                j += 1\n                c += 1\n                if j == l:\n                    break\n            i = j\n            z.append(c)\n        else:\n            cluster += 1\n            j = i\n            while s[j] == '1':\n                j += 1\n                if j == l:\n                    break\n            i = j\n    if cluster == 0:\n        print(0)\n    elif cluster == 1:\n        print(a)\n    else:\n        if s[-1] == '0':\n            z.pop()\n        mincost = cluster * a\n        y = 0\n        for i in z:\n            mincost = min(mincost, (cluster - 1) * a + b * (y + i))\n            if mincost == (cluster - 1) * a + b * (y + i):\n                cluster -= 1\n                y += i\n        print(mincost)\n    t -= 1", "def solution(a, b, mp):\n    idx = 0\n    remain = 0\n    sum = 0\n    while idx < len(mp):\n        if mp[idx] == '1':\n            if remain <= 0:\n                sum += a\n            elif remain < a:\n                sum += a - remain\n            remain = a\n            idx += 1\n        else:\n            remain -= b\n            idx += 1\n    print(sum)\n    return\nt = int(input())\nfor tt in range(t):\n    (a, b) = map(int, input().split())\n    mp = input()\n    solution(a, b, mp)", "t = int(input())\nfor j in range(t):\n    (a, b) = map(int, input().split())\n    (c, d) = (-100000, a)\n    s = input()\n    for i in s:\n        if i == '1':\n            if c > 0:\n                d += min(a, c * b)\n            c = 0\n        else:\n            c += 1\n    if c < 0:\n        print(0)\n    else:\n        print(d)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    (count, ans) = (10 ** 6, 0)\n    for i in s:\n        if i == '0':\n            count += 1\n        else:\n            ans += min(a, b * count)\n            count = 0\n    print(ans)", "for _ in range(int(input())):\n    (a, p) = map(int, input().split())\n    b = input()\n    cost = 0\n    if p >= a:\n        b = b.strip('0')\n        for i in b.split('0'):\n            if i:\n                cost += a\n        print(cost)\n    else:\n        b = b.strip('0')\n        n = len(b)\n        if n == 0:\n            print(0)\n            continue\n        for i in range(n - 1):\n            if b[i] == '1' and b[i + 1] == '0':\n                t = 0\n                j = i\n                while b[j + 1] == '0':\n                    t += 1\n                    j += 1\n                if t <= a // p:\n                    cost += t * p\n                else:\n                    cost += a\n        cost += a\n        print(cost)", "casosN = int(input())\ncasos = []\nfor i in range(casosN):\n    temp = [int(j) for j in input().split(' ')]\n    temp2 = input()\n    casos.append([temp, temp2])\nfor caso in casos:\n    bombMap = []\n    indice = -1\n    indice2 = -1\n    for x in range(len(caso[1])):\n        if caso[1][x] == '1':\n            if indice == -1:\n                indice = x\n            indice2 = x\n        elif indice != -1:\n            bombMap.append([indice, indice2])\n            indice = -1\n    if indice != -1:\n        bombMap.append([indice, indice2])\n    costo = 0\n    for i in range(len(bombMap)):\n        if i == len(bombMap) - 1:\n            costo += caso[0][0]\n        else:\n            costoB = (bombMap[i + 1][0] - 1 - bombMap[i][1]) * caso[0][1] + caso[0][0]\n            costoA = 2 * caso[0][0]\n            if costoB <= costoA:\n                costo += costoB - caso[0][0]\n            else:\n                costo += costoA - caso[0][0]\n    print(costo)", "t = int(input())\nans = ''\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    map0 = input()\n    for i in range(len(map0)):\n        if map0[i] == '1':\n            map0 = map0[i:]\n            break\n    map0 = map0 + '00'\n    l1 = []\n    x = 0\n    for i in range(len(map0) - 1):\n        if map0[i] == '1' and map0[i + 1] == '0':\n            y = i\n            l1.append([x, y])\n        elif map0[i] == '0' and map0[i + 1] == '1':\n            x = i + 1\n    if l1 == []:\n        ans += str(0) + '\\n'\n        continue\n    money = a\n    for i in range(1, len(l1)):\n        if a > b * (l1[i][0] - l1[i - 1][1] - 1):\n            money += b * (l1[i][0] - l1[i - 1][1] - 1)\n        else:\n            money += a\n    ans += str(money) + '\\n'\nprint(ans)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    s = input()\n    last = -10 ** 9\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            ans += min(a, b * (i - last - 1))\n            last = i\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    city = str(input())\n    ans = 0\n    count = 10 ** 5\n    for i in range(len(city)):\n        if city[i] == '1':\n            ans += min(count * b, a)\n            count = 0\n        else:\n            count += 1\n    print(ans)", "def solve(costA, costB, city):\n    gap = []\n    totalGroups = 0\n    findOne = False\n    tempGap = 0\n    for i in city:\n        if i == '1':\n            if not findOne:\n                findOne = True\n                if tempGap > 0:\n                    gap.append(tempGap)\n                    tempGap = 0\n        else:\n            if findOne:\n                totalGroups += 1\n                findOne = False\n            if totalGroups > 0:\n                tempGap += 1\n    if findOne:\n        totalGroups += 1\n    totalGap = sum(gap)\n    gap.sort(reverse=True)\n    maximum = totalGap * costB + costA * min(1, totalGroups)\n    activateIncrement = 1\n    temp = 0\n    for x in gap:\n        totalGap -= x\n        temp = totalGap * costB + costA * (1 + activateIncrement)\n        if temp < maximum:\n            maximum = temp\n        activateIncrement += 1\n    return maximum\nfor j in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    city = list(input())\n    print(solve(a, b, city))", "t = int(input())\nfor q in range(t):\n    (a, b) = map(int, input().split())\n    z = input()\n    last = 0\n    count = 0\n    cost = 0\n    flag = 0\n    for i in z:\n        if i == '1' and last == '1':\n            continue\n        if i == '1' and last == '0':\n            last = '1'\n            cost += min(a, b * count)\n            count = 0\n        if flag == 0:\n            if i == '1':\n                flag = 1\n                cost += a\n                last = '1'\n                continue\n            if i == '0':\n                continue\n        if flag == 1:\n            if i == '0':\n                count += 1\n                last = '0'\n                continue\n    print(cost)", "import sys\nsys.setrecursionlimit(10 ** 6)\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = list(map(int, input().split()))\n    s = input()\n    count = float('inf')\n    ans = 0\n    for char in range(len(s)):\n        if s[char] == '0':\n            count += 1\n        else:\n            ans += min(a, b * count)\n            count = 0\n    print(ans)", "for _ in range(0, int(input())):\n    (blast, plant) = map(int, input().split())\n    s = input()\n    count = float('inf')\n    ans = 0\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            ans += min(blast, count * plant)\n            count = 0\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (a, b) = [int(k) for k in input().split()]\n    w = input()\n    if '1' not in w:\n        print(0)\n        continue\n    z = w.split('1')[1:-1]\n    q = []\n    res = a\n    y = a // b\n    for j in z:\n        if j:\n            qwe = len(j)\n            q.append(qwe)\n            if qwe <= y:\n                res += qwe * b\n            else:\n                res += a\n    print(res)", "for _ in ' ' * int(input()):\n    (a, b) = map(int, input().split())\n    s = list(input())\n    while s and s[-1] == '0':\n        s.pop()\n    s = s[::-1]\n    while s and s[-1] == '0':\n        s.pop()\n    s = s[::-1]\n    gaps = []\n    cost = a if s else 0\n    st = False\n    gl = 0\n    for i in s:\n        if i == '0':\n            if not st:\n                st = not st\n                gl = 1\n            else:\n                gl += 1\n        else:\n            if st:\n                gaps.append(gl)\n            st = False\n            gl = 0\n    for c in gaps:\n        cost += min(a, c * b)\n    print(cost)", "I = input\nfor _ in [0] * int(I()):\n    (a, b) = map(int, I().split())\n    s = I().strip('0')\n    print(len(s) and a + sum((min(a, b * len(x)) for x in s.split('1'))))", "from collections import deque\nt = int(input())\nfor case in range(t):\n    (a, b) = (int(x) for x in input().split())\n    s = input()\n    (n, ln, runs) = (len(s), 1, deque())\n    for j in range(1, len(s)):\n        if s[j] != s[j - 1]:\n            runs.append((s[j - 1], ln))\n            ln = 1\n        else:\n            ln += 1\n    runs.append((s[-1], ln))\n    if runs and runs[0][0] == '0':\n        runs.popleft()\n    if runs and runs[-1][0] == '0':\n        runs.pop()\n    (co, vals) = (0, [])\n    while runs:\n        x = runs.popleft()\n        if x[0] == '1':\n            co += 1\n        elif x[0] == '0' and b * x[1] < a:\n            vals.append(b * x[1])\n    print(a * (co - len(vals)) + sum(vals))", "t = int(input())\nfor _ in range(t):\n    (act, place) = map(int, input().split())\n    s = input()\n    sz = len(s)\n    num_zeroes = 0\n    first_1 = s.find('1')\n    strt = max(1, first_1)\n    total_cost = act if first_1 != -1 else 0\n    if total_cost == 0:\n        print(0)\n        continue\n    for i in range(strt, sz):\n        if s[i - 1] == '1' and s[i] == '0':\n            num_zeroes = 1\n            continue\n        if s[i] == '0':\n            num_zeroes += 1\n            continue\n        if s[i] == '1' and s[i - 1] == '0':\n            total_cost += min(place * num_zeroes, act)\n            num_zeroes = 0\n    print(total_cost)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    ind = []\n    for j in range(len(s)):\n        if s[j] == '1':\n            ind.append(j + 1)\n    var = []\n    for j in range(len(ind) - 1):\n        if ind[j + 1] - ind[j] != 1:\n            var.append(ind[j + 1] - ind[j] - 1)\n    answer = []\n    ans = 0\n    for j in range(len(var)):\n        if var[j] * b <= a:\n            ans += var[j] * b\n        else:\n            answer.append(ans + a)\n            ans = 0\n        if j == len(var) - 1:\n            answer.append(ans + a)\n    if s.count('1') == 0:\n        print(0)\n    elif len(answer) == 0:\n        print(a)\n    else:\n        print(sum(answer))", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    x = input()\n    if x.count('1') == 0:\n        print(0)\n    else:\n        l = x.split('1')\n        l = l[1:-1]\n        y = [len(i) for i in l if len(i) > 0]\n        cost = []\n        for j in y:\n            if b * j < a:\n                cost.append(b * j)\n            else:\n                cost.append(a)\n        print(a + sum(cost))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    str = input()\n    count = 0\n    res = a\n    oke = 1\n    for i in range(len(str)):\n        if str[i] == '0':\n            count += 1\n        else:\n            if oke == 0:\n                res += min(a, b * count)\n            oke = 0\n            count = 0\n    if oke == 1:\n        print(0)\n    else:\n        print(res)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    s = input()\n    cnt = 2 ** 32\n    ans = 0\n    for i in s:\n        if i == '0':\n            cnt += 1\n        else:\n            ans += min(a, b * cnt)\n            cnt = 0\n    print(ans)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    str1 = input()\n    if str1.find('1') > -1:\n        ans = x\n        cnt = 0\n        p = str1.index('1')\n    else:\n        print(0)\n        continue\n    for i in range(p + 1, len(str1)):\n        if str1[i] == '0':\n            cnt += 1\n        elif str1[i] == '1' and cnt == 0:\n            pass\n        elif str1[i] == '1':\n            if cnt * y < x:\n                ans += cnt * y\n                cnt = 0\n            else:\n                ans += x\n                cnt = 0\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (x, y) = (-100000, a)\n    for j in input():\n        if j == '1':\n            if x > 0:\n                y += min(a, x * b)\n            x = 0\n        else:\n            x += 1\n    print(0 if x < 0 else y)", "import math\ntest = int(input())\n\ndef testCase():\n    (a, b) = map(int, input().split())\n    city = input()\n    n = len(city)\n    count = int(100000.0)\n    ans = 0\n    for i in range(n):\n        if city[i] == '0':\n            count += 1\n        else:\n            ans += min(count * b, a)\n            count = 0\n    print(ans)\nwhile test:\n    test -= 1\n    testCase()", "I = input\nfor _ in [0] * int(I()):\n    (a, b) = map(int, I().split())\n    s = I().strip('0')\n    print(len(s) and a + sum((min(a, b * len(x)) for x in s.split('1'))))", "T = int(input())\nfor _ in range(T):\n    (A, B) = map(int, input().split())\n    s = input()\n    N = len(s)\n    c = [1]\n    M = int('1' in s)\n    for i in range(1, N):\n        if s[i - 1] != s[i]:\n            c.append(1)\n        else:\n            c[-1] += 1\n    if s[0] == '0' and len(c):\n        del c[0]\n    if s[-1] == '0' and len(c):\n        del c[-1]\n    c = c[1::2]\n    S = [min(c[i] * B, A) for i in range(len(c))]\n    print(M * A + sum(S))", "def solve(a, b, s):\n    n = len(s)\n    dp = [float('inf')] * n\n    last = float('-inf')\n    if s[0] == '1':\n        dp[0] = a\n        last = 0\n    else:\n        dp[0] = 0\n    for i in range(1, n):\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = min(dp[i - 1] + a, (i - last - 1) * b + dp[max(0, last)])\n            last = i\n        else:\n            dp[i] = dp[i - 1]\n    return dp[n - 1]\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    print(solve(a, b, s))", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (a, b) = [int(i) for i in input().split(' ')]\n        s = [int(i) for i in input()]\n        collector = []\n        is_one = []\n        counter = 0\n        current_val = s[0]\n        for i in range(len(s)):\n            if s[i] == current_val:\n                counter += 1\n            else:\n                is_one.append(current_val)\n                collector.append(counter)\n                counter = 1\n                current_val = s[i]\n            if i == len(s) - 1:\n                is_one.append(current_val)\n                collector.append(counter)\n        if is_one[0] == 0 and len(collector) > 0:\n            collector.pop(0)\n        if is_one[-1] == 0 and len(collector) > 0:\n            collector.pop(-1)\n        real_counter = math.ceil(len(collector) / 2) * a\n        for i in range(len(collector)):\n            if i % 2 == 1:\n                if a > b * collector[i]:\n                    real_counter -= a\n                    real_counter += b * collector[i]\n        print(real_counter)\nmain_function()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    c = 0\n    t = 0\n    if '1' in s:\n        ans = a\n    else:\n        print(0)\n        continue\n    for i in s:\n        if i == '0':\n            if t:\n                c += 1\n        else:\n            t = 1\n            if c:\n                if c * b <= a:\n                    ans += c * b\n                else:\n                    ans += a\n                c = 0\n    print(ans)", "for _ in range(int(input())):\n    (m, j) = map(int, input().split())\n    s = list(map(len, input().strip('0').split('1')))\n    if len(s) == 1 and s[0] == 0:\n        print(0)\n        continue\n    s = [x for x in s if x != 0]\n    a = m * (len(s) + 1)\n    for i in s:\n        if i * j < m:\n            a = a - m + i * j\n    print(a)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input().strip('0')\n    z = list(filter(None, s.split('1')))\n    o = list(filter(None, s.split('0')))\n    c = 0\n    cost = 0\n    for num in z:\n        if len(num) * b < a:\n            c += 1\n            cost += len(num) * b\n    cost = (len(o) - c) * a + cost\n    print(cost)", "I = input\nfor _ in [0] * int(I()):\n    (a, b) = map(int, I().split())\n    s = I().strip('0')\n    print(len(s) and a + sum((min(a, b * len(x)) for x in s.split('1'))))", "for _ in ' ' * int(input()):\n    (a, b) = map(int, input().split())\n    (c, ans) = (10 ** 6, 0)\n    for x in input():\n        if x == '0':\n            c += 1\n        else:\n            ans += min(c * b, a)\n            c = 0\n    print(ans)", "t = int(input())\nans = []\nfor i in range(0, t):\n    (a, b) = list(map(int, input().split()))\n    s = input()\n    segm = []\n    j = 0\n    while j < len(s) and s[j] == 0:\n        j += 1\n    seg_1 = [j]\n    while j < len(s):\n        while j < len(s) and s[j] == '0':\n            j += 1\n        seg_1 = [j]\n        while j < len(s) and s[j] == '1':\n            j += 1\n        seg_1.append(j - 1)\n        j += 1\n        if seg_1[0] <= seg_1[1]:\n            segm.append(seg_1)\n        seg_1 = []\n    tt = len(segm)\n    ans1 = 0\n    for j in range(0, tt - 1):\n        r1 = segm[j][1]\n        l2 = segm[j + 1][0]\n        if a > b * (l2 - r1 - 1):\n            ans1 += b * (l2 - r1 - 1)\n            segm[j + 1][0] = segm[j][0]\n        else:\n            ans1 += a\n    if tt > 0:\n        ans1 += a\n    ans.append(ans1)\nfor ans2 in ans:\n    print(ans2)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    (count, ans) = (10 ** 6, 0)\n    for i in s:\n        if i == '0':\n            count += 1\n        else:\n            ans += min(a, b * count)\n            count = 0\n    print(ans)", "t = int(input())\nfor i in range(t):\n    from sys import stdin\n    (a, b) = [int(i) for i in stdin.readline().strip().split()]\n    s = input()\n    zeroSeen = 1000000\n    cost = 0\n    for j in s:\n        if j == '0':\n            zeroSeen += 1\n        if j == '1':\n            cost += min(a, b * zeroSeen)\n            zeroSeen = 0\n    print(cost)", "I = input\nfor _ in [0] * int(I()):\n    (a, b) = map(int, I().split())\n    s = I().strip('0')\n    print(len(s) and a + sum((min(a, b * len(x)) for x in s.split('1'))))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    c = float('inf')\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            c += 1\n        else:\n            ans += min(a, b * c)\n            c = 0\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (act, plc) = map(int, input().split())\n    s = input()\n    a = []\n    m = i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == '1':\n            j = i\n            while i < n and s[i] == '1':\n                i += 1\n            a.append([j, i - 1])\n            m += act\n        else:\n            i += 1\n    i = 0\n    while i < len(a) - 1:\n        k = m - 2 * act + act + plc * (a[i + 1][0] - a[i][1] - 1)\n        if k < m:\n            m = k\n            a[i] = [a[i][0], a[i + 1][1]]\n            a.pop(i + 1)\n            i -= 1\n        i += 1\n    print(m)", "def solve():\n    (a, b) = map(int, input().split())\n    s = list(input())\n    n = len(s)\n    c = 0\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            j = i - 1\n            while j >= 0 and s[j] != '1':\n                j -= 1\n            if j >= 0:\n                k = i - j - 1\n                c += min(a, b * k)\n            else:\n                c += a\n            while i < n and s[i] == '1':\n                i += 1\n            continue\n        i += 1\n    return c\nt = int(input())\ni = 0\nwhile i < t:\n    print(solve())\n    i += 1", "for _ in range(int(input())):\n    (act, pl) = map(int, input().split())\n    m = input().strip('0')\n    le = len(m)\n    if not le:\n        print(0)\n        continue\n    act_cost = 0\n    pl_cost = 0\n    new = True\n    i = 0\n    while i < le:\n        if new:\n            act_cost += act\n            new = False\n        while i < le and m[i] == '1':\n            i += 1\n        while i < le and m[i] == '0':\n            pl_cost += pl\n            i += 1\n        if pl_cost and pl_cost < act:\n            act_cost += pl_cost\n        else:\n            new = True\n        pl_cost = 0\n    print(act_cost)", "def RL():\n    return map(int, input().split())\n\ndef RLL():\n    return list(map(int, input().split()))\n\ndef N():\n    return int(input())\n\ndef print_list(l):\n    print(' '.join(map(str, l)))\nfor _ in range(N()):\n    (a, b) = RL()\n    s = input()\n    c = 0\n    blow = 0\n    num = 0\n    blow_1 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            if blow == 0:\n                continue\n            else:\n                num += 1\n        elif num > 0:\n            if b * num < a:\n                c += b * num\n                num = 0\n            else:\n                num = 0\n                c += a\n        elif blow == 0:\n            blow = 1\n            c += a\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    s = input()\n    n = len(s)\n    i = 0\n    ans2 = 0\n    while i < n and s[i] != '1':\n        i += 1\n    zeros = 0\n    ans = 0\n    flag = 0\n    while i < n:\n        if s[i] == '0':\n            zeros += 1\n            i += 1\n        else:\n            ones = 0\n            while i < n and s[i] == '1':\n                flag = 1\n                i += 1\n                ones += 1\n            t1 = a\n            t2 = 100000000\n            if zeros != 0:\n                t2 = b * zeros\n            ans = ans + min(t1, t2)\n            zeros = 0\n    if flag == 0:\n        print(ans2)\n    else:\n        print(ans)", "def cost(s, a, b):\n    for i in range(len(s)):\n        if s[i] == '1':\n            start = i\n            break\n    else:\n        return 0\n    count = 0\n    arr = []\n    for i in range(start, len(s)):\n        if s[i] == '0':\n            count += 1\n        elif count > 0:\n            arr.append(count)\n            count = 0\n    c = (len(arr) + 1) * a\n    for i in range(len(arr)):\n        c = min(c, b * arr[i] + (c - a))\n    return c\nT = int(input())\nfor t in range(T):\n    (a, b) = [int(i) for i in input().split(' ')]\n    s = input()\n    print(cost(s, a, b))", "t = int(input())\nwhile t:\n    inp = input().strip().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    s = input().strip('0').split('0')\n    s2 = []\n    s3 = []\n    for i in s:\n        if i != '':\n            s2.append(i)\n    c = 1\n    for i in s:\n        if i != '':\n            s3.append(c)\n            c = 1\n        else:\n            c += 1\n    s3.sort()\n    s3 = s3[1:]\n    ans0 = len(s2) * a\n    ans = len(s2) * a\n    for i in s3:\n        if ans - a + i * b <= ans:\n            ans = ans - a + i * b\n        else:\n            break\n    print(min([ans, ans0]))\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    note = 1\n    if note == 0:\n        cnt = 0\n        for i in s:\n            if i == '1':\n                cnt += 1\n        print(cnt * a)\n    else:\n        n = len(s)\n        ans = 0\n        cnt = 0\n        trigger = 0\n        for i in range(n):\n            if s[i] == '1':\n                if trigger == 0:\n                    ans += a\n                    trigger = 1\n                elif cnt * b > a:\n                    ans += a\n                else:\n                    ans += cnt * b\n                cnt = 0\n            else:\n                cnt += 1\n        print(ans)", "n = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    c = 0\n    s = input()\n    l = list(s.split('0'))\n    w = list(s.split('1'))\n    for j in l:\n        if len(j) > 0:\n            c += 1\n    ans = c * a\n    for j in w[1:len(w) - 1]:\n        if len(j) > 0 and b * len(j) < a:\n            ans += b * len(j)\n            ans -= a\n    print(ans)", "test = int(input())\nwhile test:\n    inp = input().strip().split()\n    zero = int(inp[0])\n    one = int(inp[1])\n    z = input().strip('0').split('0')\n    s2 = []\n    s3 = []\n    for i in z:\n        if i != '':\n            s2.append(i)\n    c = 1\n    for i in z:\n        if i != '':\n            s3.append(c)\n            c = 1\n        else:\n            c += 1\n    s3.sort()\n    s3 = s3[1:]\n    ans0 = len(s2) * zero\n    ans = len(s2) * zero\n    for i in s3:\n        if ans - zero + i * one <= ans:\n            ans = ans - zero + i * one\n        else:\n            break\n    print(min([ans, ans0]))\n    test = test - 1", "test_case = int(input())\nfor i in range(test_case):\n    cost = 0\n    (a, b) = map(int, input().split(' '))\n    m = input()\n    previous_index = -1\n    for i in range(len(m)):\n        if m[i] == '1':\n            if previous_index == -1:\n                previous_index = i\n            elif i - previous_index == 1:\n                previous_index = i\n            elif (i - previous_index - 1) * b > a:\n                cost += a\n                previous_index = i\n            else:\n                cost += (i - previous_index - 1) * b\n                previous_index = i\n    if previous_index != -1:\n        cost += a\n    print(cost)", "import itertools\n\ndef countstrs(s):\n    return [(k, len(list(g))) for (k, g) in itertools.groupby(s)]\n\ndef do():\n    (a, b) = map(int, input().split())\n    s = input()\n    if s.count('1') == 0:\n        print(0)\n        return\n    s = s.strip('0')\n    c = countstrs(s)\n    c = filter(lambda x: x[0] == '0', c)\n    res = a\n    for (char, cnt) in c:\n        if cnt * b < a:\n            res += cnt * b\n        else:\n            res += a\n    print(res)\nq = int(input())\nfor _ in range(q):\n    do()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (c, d) = (-100000, a)\n    for i in input():\n        if i == '1':\n            if c > 0:\n                d += min(a, c * b)\n            c = 0\n        else:\n            c += 1\n    print(0 if c < 0 else d)", "T = int(input())\nfor t in range(T):\n    (a, b) = map(int, input().split())\n    s = str(input())\n    mn = 100001\n    r = 0\n    for i in s:\n        if i == '1':\n            r += min(a, b * mn)\n            mn = 0\n        else:\n            mn += 1\n    print(r)", "for _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split()]\n    s = input()\n    (count, ans) = (10000000000000.0, 0)\n    for i in s:\n        if i == '0':\n            count += 1\n        else:\n            ans += min(a, b * count)\n            count = 0\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    s = input()\n    n = len(s) - 1\n    i = 0\n    arr = []\n    while i < n:\n        if s[i] == '0':\n            i = i + 1\n            continue\n        j = i\n        while j < n:\n            if s[j] == '0':\n                break\n            j = j + 1\n        arr.append((i, j - 1))\n        i = j\n    l = len(arr)\n    res = 0\n    i = 0\n    while i < l:\n        ans = a\n        j = i + 1\n        while j < l:\n            if b * (arr[j][0] - arr[j - 1][1] - 1) > a:\n                break\n            ans = ans + b * (arr[j][0] - arr[j - 1][1] - 1)\n            j = j + 1\n        i = j\n        res = res + ans\n    print(res)"]