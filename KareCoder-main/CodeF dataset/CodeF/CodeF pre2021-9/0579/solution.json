["import sys\n\ndef correctPlacement(n, fren):\n    fren.sort()\n    ans = ['-1'] * n\n    j = 0\n    k = -1\n    for i in range(n):\n        while fren[j][0] != fren[i][0]:\n            if k == -1 or fren[j][1] < fren[k][1]:\n                k = j\n            j += 1\n        if k != -1 and fren[k][1] < fren[i][1]:\n            ans[fren[i][2] - 1] = str(fren[k][2])\n    print(' '.join(ans))\n\ndef main():\n    for t in range(int(input())):\n        n = int(input())\n        fren = []\n        for i in range(1, n + 1):\n            (h, w) = map(int, input().split())\n            if h > w:\n                fren.append([h, w, i])\n            else:\n                fren.append([w, h, i])\n        correctPlacement(n, fren)\nmain()", "import sys\nimport math, bisect, operator\n(inf, mod) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    N = I()\n    Xs = []\n    for i in range(N):\n        [h, w] = Neo()\n        if w > h:\n            (h, w) = (w, h)\n        Xs.append((i, h, w))\n    Xs.sort(key=lambda x: (x[1], -x[2]))\n    ans = [-1] * N\n    mn = 10 ** 18\n    mni = -1\n    for (i, h, w) in Xs:\n        if w > mn:\n            ans[i] = mni\n        if mn > w:\n            (mn, mni) = (w, i + 1)\n    print(*ans)", "from heapq import *\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    lis = [0] * n\n    ans = [-1] * n\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis[i] = (max(x, y), min(x, y), i)\n    lis.sort()\n    (min_y, min_j) = (10 ** 10, 0)\n    temp = []\n    last_x = -1\n    for (x, y, i) in lis:\n        if last_x < x:\n            for (y2, i2) in temp:\n                if y2 < min_y:\n                    (min_y, min_j) = (y2, i2)\n            last_x = x\n            temp = []\n        if min_y < y:\n            ans[i] = min_j + 1\n        temp.append((y, i))\n    print(*ans, sep=' ')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    lis = [0] * n\n    ans = [-1] * n\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis[i] = (max(x, y), min(x, y), i)\n    lis.sort()\n    (y2, i2) = (10 ** 10, 0)\n    last_x = -1\n    for (x, y, i) in lis:\n        if last_x < x:\n            (min_y, min_j) = (y2, i2)\n            last_x = x\n        if min_y < y:\n            ans[i] = min_j + 1\n        if y < y2:\n            (y2, i2) = (y, i)\n    print(*ans, sep=' ')", "import sys\nimport math\nimport collections\nimport heapq\nimport decimal\ninput = sys.stdin.readline\nt = int(input())\nfor w in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (h, w) = (int(i) for i in input().split())\n        l.append((i, max(h, w), min(h, w)))\n    l.sort(key=lambda kv: (kv[1], -kv[2]))\n    ans = [-1] * n\n    m = 1000000000000\n    k = -1\n    for i in range(n):\n        if l[i][2] > m:\n            ans[l[i][0]] = k\n        elif m > l[i][2]:\n            m = l[i][2]\n            k = l[i][0] + 1\n    print(*ans)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (h, w) = map(int, input().split())\n        if w > h:\n            (h, w) = (w, h)\n        a.append((i, h, w))\n    a.sort(key=lambda x: (x[1], -x[2]))\n    ans = [-1] * n\n    maxi = sys.maxsize\n    index = -1\n    for (i, h, w) in a:\n        if w > maxi:\n            ans[i] = index\n        if maxi > w:\n            (maxi, index) = (w, i + 1)\n    print(*ans)", "for T in range(int(input())):\n    n = int(input())\n    res = ['-1' for i in range(n)]\n    images = []\n    for idx in range(n):\n        (w, h) = map(int, input().split())\n        if w < h:\n            (w, h) = (h, w)\n        images.append((w, h, idx))\n    images.sort(key=lambda x: (x[0], x[1]), reverse=True)\n    hmin = []\n    hmin.append((images[-1][1], images[-1][2], images[-1][0]))\n    for i in range(n - 2, -1, -1):\n        if images[i + 1][1] < hmin[-1][0]:\n            hmin.append((images[i + 1][1], images[i + 1][2], images[i + 1][0]))\n        else:\n            continue\n    for i in range(n):\n        while hmin and images[i][0] <= hmin[-1][2]:\n            hmin.pop()\n        if not hmin:\n            break\n        if images[i][1] > hmin[-1][0]:\n            res[images[i][2]] = str(hmin[-1][1] + 1)\n    print(' '.join(res))", "def corrPlace(allPoint):\n    n = len(allPoint)\n    ans = [-1] * n\n    allPoint.sort(reverse=True)\n    message = [allPoint[-1]]\n    for i in range(n - 2, -1, -1):\n        if message[-1][0] != allPoint[i][0] and message[-1][1] > allPoint[i][1]:\n            message.append(allPoint[i])\n    cachePlace = len(message) - 1\n    for imess in allPoint:\n        ai = imess[0]\n        bi = imess[1]\n        while cachePlace != 0 and message[cachePlace][0] >= ai:\n            cachePlace -= 1\n        if message[cachePlace][0] < ai and message[cachePlace][1] < bi:\n            ans[imess[2] - 1] = message[cachePlace][2]\n    return ans\nt = int(input())\nfor qwq in range(t):\n    n = int(input())\n    allPoint = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        allPoint.append((max(l), min(l), i + 1))\n    ans = corrPlace(allPoint)\n    for i in ans:\n        print(i, end=' ')\n    print()", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    people = []\n    for i in range(n):\n        (h, w) = read_ints()\n        people.append((h, w, i))\n        people.append((w, h, i))\n    ans = [-1] * n\n    people.sort()\n    lo = int(10000000000.0)\n    idx = -1\n    l = -1\n    for (h, w, i) in people:\n        while l + 1 < n and people[l + 1][0] < h:\n            l += 1\n            if people[l][1] < lo:\n                lo = people[l][1]\n                idx = people[l][2]\n        if lo < w:\n            ans[i] = idx + 1\n    print(' '.join(map(str, ans)))", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    arr = [-1]\n    for j in range(n):\n        (h, w) = map(int, input().split())\n        if h < w:\n            (h, w) = (w, h)\n        a.append([h, w, j + 1])\n        arr.append(-1)\n    a.sort()\n    width = 1000000000\n    a.append(a[-1])\n    j = 0\n    pos = -1\n    position = -1\n    while j < n:\n        w = 1000000000\n        while j < n and a[j][0] == a[j + 1][0]:\n            if a[j][1] > width:\n                arr[a[j][2]] = position\n            if a[j][1] < w:\n                w = a[j][1]\n                pos = a[j][2]\n            j += 1\n        else:\n            if a[j][1] > width:\n                arr[a[j][2]] = position\n            if w > a[j][1]:\n                w = a[j][1]\n                pos = a[j][2]\n            j += 1\n        if width > w:\n            width = w\n            position = pos\n    print(*arr[1:])", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (h, w) = map(int, input().split())\n        arr.append((h, -w, i))\n        arr.append((w, -h, i))\n    arr.sort()\n    min_height = float('inf')\n    element = -1\n    ans = [-1] * n\n    for (w, h, i) in arr:\n        h = -h\n        if min_height < h:\n            ans[i] = element\n        elif min_height > h:\n            min_height = h\n            element = i + 1\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (h, w) = map(int, input().split())\n        arr.append((h, -w, i))\n        arr.append((w, -h, i))\n    arr.sort()\n    min_height = float('inf')\n    element = -1\n    ans = [-1] * n\n    for (w, h, i) in arr:\n        h = -h\n        if min_height < h:\n            ans[i] = element\n        elif min_height > h:\n            min_height = h\n            element = i + 1\n    print(*ans)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    I = []\n    for i in range(n):\n        ch = input()\n        L = [int(i) for i in ch.split()]\n        I.append((min(L[0], L[1]), max(L[0], L[1]), i + 1))\n    I.sort()\n    curr = [I[0]]\n    T = [-1] * n\n    for i in range(1, n):\n        if I[i][0] > I[i - 1][0] and I[i][1] < curr[-1][1]:\n            curr.append(I[i])\n        if I[i][0] > curr[-1][0] and I[i][1] > curr[-1][1]:\n            T[I[i][2] - 1] = curr[-1][2]\n        if len(curr) >= 2 and I[i][0] > curr[-2][0] and (I[i][1] > curr[-2][1]):\n            T[I[i][2] - 1] = curr[-2][2]\n    ch = ''\n    for i in T:\n        ch += str(i) + ' '\n    print(ch)", "def solve():\n    n = int(input())\n    data = []\n    kek = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        data.append((max(a, b), min(a, b), i))\n    data_1 = sorted(data, key=lambda x: x[0])\n    key = 0\n    kek[0] = [1000000001, -1]\n    for person in data_1:\n        (a, b, i) = person\n        value = kek.get(a)\n        if not value:\n            kek[a] = kek[key][:]\n            kek[a - 1] = kek[key][:]\n            key = a\n            value = kek.get(a)\n        if value[0] > b:\n            kek[a] = [b, i]\n    for lol in data:\n        (a, b, i) = lol\n        (value, index) = kek.get(max(a, b) - 1)\n        if value < min(a, b):\n            print(index + 1, end=' ')\n        else:\n            print(-1, end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "import sys\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    people = []\n    for j in range(0, n):\n        (h, w) = map(int, input().split())\n        people.append((w, h, j))\n        people.append((h, w, j))\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    minHeight = sys.maxsize\n    ans = [-1] * n\n    element = -1\n    for j in people:\n        w = j[0]\n        h = j[1]\n        ind = j[2]\n        if h < minHeight:\n            minHeight = h\n            element = ind\n        elif h > minHeight:\n            ans[ind] = element + 1\n    print(*ans)", "import sys\n\ndef main():\n    res = ''\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = []\n        origin = []\n        answer = {}\n        sub_res = ''\n        for i in range(n):\n            (w, h) = map(int, input().split())\n            if w > h:\n                origin.append((w, h))\n                a.append((w, h, i))\n            else:\n                origin.append((h, w))\n                a.append((h, w, i))\n        a.sort()\n        last_ind = 0\n        answer[last_ind] = (1000000001, -1)\n        for (w, h, ind) in a:\n            if not answer.get(w):\n                answer[w - 1] = answer[last_ind]\n                answer[w] = answer[last_ind]\n                last_ind = w\n            if h < answer[w][0]:\n                answer[w] = [h, ind]\n        for (w, h) in origin:\n            if answer[w - 1][0] < h:\n                sub_res += str(answer[w - 1][1] + 1) + ' '\n            else:\n                sub_res += '-1 '\n        res += str(sub_res) + '\\n'\n    print(res)\nmain()", "for z in range(int(input())):\n    n = int(input())\n    l = []\n    ans = [-1 for i in range(n)]\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, 1, b, i))\n        l.append((a, 0, b, i))\n        l.append((b, 0, a, i))\n    l.sort()\n    stack = []\n    for i in l:\n        if i[1] == 1:\n            if len(stack) == 0 or stack[-1][0] > i[2]:\n                stack.append((i[2], i[3]))\n        elif stack and stack[-1][0] < i[2]:\n            ans[i[3]] = stack[-1][1] + 1\n    print(*ans)", "t = int(input())\nbig = 2 * 10 ** 9\nfor i in range(0, t):\n    n = int(input())\n    ans = [-1] * n\n    pairs = []\n    for j in range(0, n):\n        nextStr = list(map(int, input().split(' ')))\n        nextStr.append(j)\n        pairs.append(nextStr)\n    pairs.sort()\n    k = 0\n    mn = [0] * n\n    ps = [0] * n\n    for j in range(0, n):\n        if j == 0 or pairs[j][1] < mn[j - 1]:\n            mn[j] = pairs[j][1]\n            ps[j] = pairs[j][2]\n        else:\n            mn[j] = mn[j - 1]\n            ps[j] = ps[j - 1]\n        while k < n and pairs[k][0] < pairs[j][0]:\n            k += 1\n        if not k == 0 and pairs[j][1] > mn[k - 1]:\n            ans[pairs[j][2]] = ps[k - 1] + 1\n    for j in range(0, n):\n        if not ans[pairs[j][2]] == -1:\n            continue\n        l = 0\n        r = n - 1\n        while l < r:\n            d = l + r + 1 >> 1\n            if pairs[d][0] >= pairs[j][1]:\n                r = d - 1\n            else:\n                l = d\n        if pairs[j][1] <= pairs[l][0]:\n            continue\n        if pairs[j][0] > mn[l]:\n            ans[pairs[j][2]] = ps[l] + 1\n    print(*ans)"]