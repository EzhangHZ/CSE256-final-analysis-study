["import sys\nimport math\ninput = sys.stdin.readline\ntest = input()\n\ndef cal():\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    minW = min(W - x2, x1)\n    maxW = max(W - x2, x1)\n    minH = min(H - y2, y1)\n    maxH = max(H - y2, y1)\n    if maxW + minW < w and maxH + minH < h:\n        ans = -1\n    elif maxW + minW >= w and maxH + minH < h:\n        ans = w - maxW\n        if ans < 0:\n            ans = 0\n    elif maxW + minW < w and maxH + minH >= h:\n        ans = h - maxH\n        if ans < 0:\n            ans = 0\n    elif maxW + minW >= w and maxH + minH >= h:\n        ans = min(h - maxH, w - maxW)\n        if ans < 0:\n            ans = 0\n    print(ans)\nfor j in range(int(test)):\n    cal()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve1d(L, a, b, l):\n    best = 1000000000000000\n    if l <= a:\n        return 0\n    else:\n        best = min(best, l - a)\n    if l <= L - b:\n        return 0\n    else:\n        best = min(best, l - (L - b))\n    return best\n\ndef solve(W, H, x1, y1, x2, y2, w, h):\n    wf = x2 - x1\n    hf = y2 - y1\n    if hf + h > H and wf + w > W:\n        return -1\n    best = 1000000000000000\n    if hf + h <= H:\n        best = min(best, solve1d(H, y1, y2, h))\n    if wf + w <= W:\n        best = min(best, solve1d(W, x1, x2, w))\n    return best\nTC = int(input())\nfor tc in range(TC):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    res = solve(W, H, x1, y1, x2, y2, w, h)\n    print(res)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    d = []\n    if w + (x2 - x1) <= W:\n        d.append(max(0, w - max(x1, W - x2)))\n    if h + (y2 - y1) <= H:\n        d.append(max(0, h - max(y1, H - y2)))\n    if len(d):\n        print('%.9f' % min(d))\n    else:\n        print(-1)\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\nclass Rect:\n\n    def __init__(self, bl_x, bl_y, tr_x, tr_y):\n        self.bl_x = bl_x\n        self.bl_y = bl_y\n        self.tr_x = tr_x\n        self.tr_y = tr_y\n        self.tl_x = bl_x\n        self.tl_y = tr_y\n        self.br_x = tr_x\n        self.br_y = bl_y\nimport math\n\ndef minMovement(table, W, H, w, h):\n    u = h - table.bl_y\n    r = w - table.bl_x\n    l = table.tr_x - (W - w)\n    d = table.tr_y - (H - h)\n    if u <= 0 or r <= 0 or l <= 0 or (d <= 0):\n        return 0\n    if table.tr_y + u > H:\n        u = math.inf\n    if table.tr_x + r > W:\n        r = math.inf\n    if table.bl_x - l < 0:\n        l = math.inf\n    if table.bl_y - d < 0:\n        d = math.inf\n    ans = min(u, r, l, d)\n    return -1 if ans == math.inf else ans\nn = int(input())\nfor _ in range(n):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    table = Rect(x1, y1, x2, y2)\n    print(minMovement(table, W, H, w, h))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if w <= max(x1 - 0, W - x2) or h <= max(y1 - 0, H - y2):\n        print(0)\n    elif w + x2 - x1 > W and h + y2 - y1 > H:\n        print(-1)\n    else:\n        a = b = 1000000000.0\n        if w + x2 - x1 <= W:\n            a = min(w - x1, w - (W - x2))\n        if h + y2 - y1 <= H:\n            b = min(h - y1, h - (H - y2))\n        print(min(a, b))", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef s():\n    (w, h) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    (x1, y1, x2, y2) = (l[0], l[1], l[2], l[3])\n    mw = x2 - x1\n    mh = y2 - y1\n    (a, b) = map(int, input().split())\n    wdis = w - x2 + x1\n    hdis = h - y2 + y1\n    if wdis < a and hdis < b:\n        return -1\n    if w - x2 >= a or x1 >= a or h - y2 >= b or (y1 >= b):\n        return 0\n    res = []\n    if mw + a <= w:\n        res = [a - (w - x2), a - x1]\n    if mh + b <= h:\n        res += [b - (h - y2), b - y1]\n    return min(res)\nfor _ in range(int(input())):\n    print(s())", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    if x1 > x2:\n        (x1, x2) = (x2, x1)\n    if y1 > y2:\n        (y1, y2) = (y2, y1)\n    (ww, hh) = map(int, input().split())\n    if x2 - x1 + ww > w and y2 - y1 + hh > h:\n        print(-1)\n        continue\n    x = float('inf')\n    if x2 - x1 + ww <= w:\n        if x1 <= ww:\n            x = min(x, ww - x1)\n        else:\n            x = 0\n        if w - x2 <= ww:\n            x = min(x, ww - w + x2)\n        else:\n            x = 0\n    y = float('inf')\n    if y2 - y1 + hh <= h:\n        if y1 <= hh:\n            y = min(y, hh - y1)\n        else:\n            y = 0\n        if h - y2 <= hh:\n            y = min(y, hh - h + y2)\n        else:\n            y = 0\n    print(min(x, y))", "import sys\ninput = sys.stdin.readline\ninf = 10000000000.0\nfor _ in range(int(input())):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (tw, th) = map(int, input().split())\n    ans = []\n    if w >= x2 - x1 + tw:\n        ans.append(max(0, tw - x1))\n        ans.append(max(0, tw - (w - x2)))\n    if h >= y2 - y1 + th:\n        ans.append(max(0, th - y1))\n        ans.append(max(0, th - (h - y2)))\n    print(min(ans) if ans else -1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor test in range(t):\n    (wr, hr) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (wt, ht) = map(int, input().split())\n    wot = abs(x1 - x2)\n    hot = abs(y1 - y2)\n    bestdist = wr + hr\n    if wot + wt > wr and hot + ht > hr:\n        print(-1)\n    else:\n        if not wot + wt > wr:\n            bestdist = min(wt - x1, bestdist)\n            bestdist = min(x2 - (wr - wt), bestdist)\n        if not hot + ht > hr:\n            bestdist = min(ht - y1, bestdist)\n            bestdist = min(y2 - (hr - ht), bestdist)\n        print(max(0, bestdist))", "import sys\ninput = sys.stdin.readline\ninf = 10000000000.0\nfor _ in range(int(input())):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (tw, th) = map(int, input().split())\n    ans = []\n    if w >= x2 - x1 + tw:\n        ans.append(max(0, tw - x1))\n        ans.append(max(0, tw - (w - x2)))\n    if h >= y2 - y1 + th:\n        ans.append(max(0, th - y1))\n        ans.append(max(0, th - (h - y2)))\n    print(min(ans) if ans else -1)", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    (W, H) = M()\n    (x1, y1, x2, y2) = M()\n    (w, h) = M()\n    p = w - x1\n    q = h - y1\n    r = w - W + x2\n    s = h - H + y2\n    e = inf\n    if x2 - x1 + w > W and y2 - y1 + h > H:\n        print(-1)\n        return\n    if p <= 0 or q <= 0 or r <= 0 or (s <= 0):\n        print(str(0) + '.000000000')\n        return\n    if x2 - x1 + w <= W:\n        e = min(e, p)\n    if y2 - y1 + h <= H:\n        e = min(e, q)\n    if x2 - x1 + w <= W:\n        e = min(e, r)\n    if y2 - y1 + h <= H:\n        e = min(e, s)\n    print(str(e) + '.000000000')\ntt = 1\ntt = I()\nfor _ in range(tt):\n    solve()", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef solve():\n    (W, H) = R()\n    (x1, y1, x2, y2) = R()\n    (w, h) = R()\n    if w + (x2 - x1) > W and h + y2 - y1 > H:\n        print(-1)\n        return\n    ans = 10 ** 18\n    if w <= x1 or w <= W - x2 or h <= y1 or (h <= H - y2):\n        ans = 0\n    else:\n        if w + (x2 - x1) <= W:\n            ans = min(ans, w - x1, w - (W - x2))\n        if h + (y2 - y1) <= H:\n            ans = min(ans, h - y1, h - (H - y2))\n    print(ans * 1.0)\nfor _ in range(I()):\n    solve()", "import sys\nread = lambda : sys.stdin.readline()\nfor _ in range(int(read())):\n    (W, H) = map(int, read().split())\n    (x1, y1, x2, y2) = map(int, read().split())\n    (w, h) = map(int, read().split())\n    if w > W or h > H:\n        print(-1)\n        continue\n    if w > W - (x2 - x1) and h > H - (y2 - y1):\n        print(-1)\n        continue\n    if w > W - (x2 - x1):\n        ans = max(0, h - max(H - y2, y1))\n    elif h > H - (y2 - y1):\n        ans = max(0, w - max(W - x2, x1))\n    else:\n        ans = max(0, h - max(H - y2, y1))\n        ans = min(ans, max(0, w - max(W - x2, x1)))\n    print(ans)", "num = int(input())\noutputs = []\nfor i in range(num):\n    possible = []\n    (room_x, room_y) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (second_x, second_y) = map(int, input().split())\n    if x2 - x1 + second_x <= room_x:\n        possible.append(max(0, second_x - x1))\n        possible.append(max(0, x2 - (room_x - second_x)))\n    if y2 - y1 + second_y <= room_y:\n        possible.append(max(0, second_y - y1))\n        possible.append(max(0, y2 - (room_y - second_y)))\n    if len(possible) == 0:\n        outputs.append(-1)\n    else:\n        outputs.append(min(possible))\nfor i in outputs:\n    print(i)", "from math import sqrt\nN = int(input())\nfor testcase in range(N):\n    temp = input().split()\n    rx = int(temp[0])\n    ry = int(temp[1])\n    temp = input().split()\n    x1 = int(temp[0])\n    y1 = int(temp[1])\n    x2 = int(temp[2])\n    y2 = int(temp[3])\n    temp = input().split()\n    cx = int(temp[0])\n    cy = int(temp[1])\n    x = cy - y1\n    y = ry - y2\n    if x <= 0:\n        k1 = 0\n    elif y >= x:\n        k1 = x\n    else:\n        k1 = 10000000000.0\n    x = y2 - ry + cy\n    y = y1\n    if x <= 0:\n        k2 = 0\n    elif y >= x:\n        k2 = x\n    else:\n        k2 = 10000000000.0\n    x = cx - x1\n    y = rx - x2\n    if x <= 0:\n        k3 = 0\n    elif y >= x:\n        k3 = x\n    else:\n        k3 = 10000000000.0\n    x = x2 - (rx - cx)\n    y = x1\n    if x <= 0:\n        k4 = 0\n    elif y >= x:\n        k4 = x\n    else:\n        k4 = 10000000000.0\n    res = min(k1, k2, k3, k4)\n    if res != 10000000000.0:\n        print(res)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    yb = y1\n    yu = h - y2\n    xf = x1\n    xl = w - x2\n    a = max(xf, xl)\n    b = max(yb, yu)\n    c = min(xf, xl)\n    d = min(yb, yu)\n    xfi = 100000000\n    yfi = 100000000\n    if w1 <= a or h1 <= b:\n        print(0)\n    else:\n        p = w1 - a\n        q = h1 - b\n        if c >= p:\n            xfi = p\n        if d >= q:\n            yfi = q\n        t = min(xfi, yfi)\n        if t == 100000000:\n            print(-1)\n        else:\n            print(t)", "t = int(input())\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = tuple(map(int, input().split()))\n    (w, h) = map(int, input().split())\n    if abs(x2 - x1) + w > W and abs(y2 - y1) + h > H:\n        print('-1')\n    elif abs(x2 - x1) + w > W and abs(y2 - y1) + h <= H:\n        print(min(max(0, h - y1), max(0, y2 - (H - h))))\n    elif abs(x2 - x1) + w <= W and abs(y2 - y1) + h > H:\n        print(min(max(0, w - x1), max(0, x2 - (W - w))))\n    else:\n        print(min(max(0, h - y1), max(0, y2 - (H - h)), max(0, w - x1), max(0, x2 - (W - w))))", "t = int(input())\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    lx = w - x1\n    ly = h - y1\n    rx = w - (W - x2)\n    ry = h - (H - y2)\n    if w + (x2 - x1) > W and h + (y2 - y1) > H:\n        print(-1)\n    elif lx <= 0 or rx <= 0 or ly <= 0 or (ry <= 0):\n        print(0)\n    elif w + (x2 - x1) > W:\n        print(min(ly, ry))\n    elif h + (y2 - y1) > H:\n        print(min(lx, rx))\n    else:\n        print(min(lx, rx, ly, ry))", "import sys\ninput = sys.stdin.readline\n\ndef solve1(W, H, x1, y1, x2, y2, w, h):\n    if x1 < w and y1 < h:\n        r = 1 << 60\n        if x2 + w - x1 <= W:\n            r = min(r, (w - x1) ** 2)\n        if y2 + h - y1 <= H:\n            r = min(r, (h - y1) ** 2)\n        if x2 + w - x1 <= W and y2 + h - y1 <= H:\n            r = min(r, (w - x1) ** 2 + (h - y1) ** 2)\n        return r\n    else:\n        return 0\n\ndef solve():\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    r = 1 << 60\n    for i in range(4):\n        r = min(r, solve1(W, H, x1, y1, x2, y2, w, h))\n        (W, H, x1, y1, x2, y2, w, h) = (H, W, y1, W - x2, y2, W - x1, h, w)\n    if r == 1 << 60:\n        print(-1)\n    else:\n        print(r ** 0.5)\nfor i in range(int(input())):\n    solve()", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfor _ in range(rn()):\n    (W, H) = rns()\n    (a, b, c, d) = rns()\n    (w, h) = rns()\n    ans = float('inf')\n    if a >= w or b >= h:\n        ans = 0\n    else:\n        if w - a <= W - c:\n            ans = min(ans, w - a)\n        if h - b <= H - d:\n            ans = min(ans, h - b)\n    if a >= w or d <= H - h:\n        ans = 0\n    else:\n        if w - a <= W - c:\n            ans = min(ans, w - a)\n        if b >= d - (H - h):\n            ans = min(ans, d - (H - h))\n    if W - w >= c or H - h >= d:\n        ans = 0\n    else:\n        if a >= c - (W - w):\n            ans = min(ans, c - (W - w))\n        if b >= d - (H - h):\n            ans = min(ans, d - (H - h))\n    if W - w >= c or b >= h:\n        ans = 0\n    else:\n        if a >= c - (W - w):\n            ans = min(ans, c - (W - w))\n        if h - b <= H - d:\n            ans = min(ans, h - b)\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    a = max(x1, w - x2)\n    b = max(y1, h - y2)\n    if w1 <= a or h1 <= b:\n        print(0)\n    elif w - (x2 - x1) < w1 and h - (y2 - y1) < h1:\n        print(-1)\n    elif w - (x2 - x1) < w1:\n        print(h1 - b)\n    elif h - (y2 - y1) < h1:\n        print(w1 - a)\n    else:\n        print(min(w1 - a, h1 - b))", "import sys\nimport math\n\ndef solve_one():\n    (W, H) = map(int, sys.stdin.readline().strip().split())\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    (w, h) = map(int, sys.stdin.readline().strip().split())\n    best_move = 1000000000\n    if w + (x2 - x1) > W and h + (y2 - y1) > H:\n        return -1\n    else:\n        if w + (x2 - x1) <= W:\n            best_move = min(best_move, max(w - x1, 0))\n            best_move = min(best_move, max(w - (W - x2), 0))\n        if h + (y2 - y1) <= H:\n            best_move = min(best_move, max(h - y1, 0))\n            best_move = min(best_move, max(h - (H - y2), 0))\n    return best_move\nnumber_of_data = int(sys.stdin.readline())\nfor _ in range(number_of_data):\n    print(solve_one())", "t = int(input())\nans = []\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    w1 = x1\n    h1 = y1\n    w2 = W - x2\n    h2 = H - y2\n    if h1 + h2 < h and w1 + w2 < w:\n        ans.append(-1)\n    else:\n        mw = max(w1, w2)\n        mh = max(h1, h2)\n        if h <= mh:\n            ch = 0\n        elif h == H or h1 + h2 < h:\n            ch = 1000000000\n        elif h > mh:\n            ch = h - mh\n        if w <= mw:\n            cw = 0\n        elif w == W or w1 + w2 < w:\n            cw = 1000000000\n        elif w > mw:\n            cw = w - mw\n        ans.append(float(min(ch, cw)))\nprint(*ans, sep='\\n')", "import sys\n\ndef test():\n    (w, h) = map(int, input().split())\n    (a, b, c, d) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    check = False\n    p = a + (w - c)\n    q = b + (h - d)\n    ans = 0\n    if x <= a or x <= w - c:\n        print(ans)\n    elif y <= b or y <= h - d:\n        print(ans)\n    else:\n        k = sys.maxsize\n        m = sys.maxsize\n        if x <= p:\n            k = min(x - a, x - w + c)\n            check = True\n        if y <= q:\n            m = min(y - b, y - h + d)\n            check = True\n        if check:\n            print(min(k, m))\n        else:\n            print(-1)\nt = int(input())\nwhile t:\n    test()\n    t -= 1", "def solve(w, h, x, y, x1, y1, x2, y2):\n    wid = y2 - y1\n    leng = x2 - x1\n    if wid > h:\n        return -1\n    if leng > w:\n        return -1\n    if y + wid > h:\n        if leng + x > w:\n            return -1\n        else:\n            lft = w - x\n            rgt = x\n            if x1 >= rgt or x2 <= lft:\n                return 0\n            return min(x2 - lft, rgt - x1)\n    if x + leng > w:\n        if y + wid > h:\n            return -1\n        else:\n            upr = y\n            lwr = h - y\n            if y1 >= upr or y2 <= lwr:\n                return 0\n            return min(y2 - lwr, upr - y1)\n    lft = w - x\n    rgt = x\n    upr = y\n    lwr = h - y\n    if x1 >= rgt or x2 <= lft:\n        return 0\n    if y1 >= upr or y2 <= lwr:\n        return 0\n    return min(min(x2 - lft, rgt - x1), min(y2 - lwr, upr - y1))\nt = int(input())\nfor i in range(t):\n    (w, h) = map(int, input().split(' '))\n    (x1, y1, x2, y2) = map(int, input().split(' '))\n    (x, y) = map(int, input().split(' '))\n    print(solve(w, h, x, y, x1, y1, x2, y2))", "from math import inf\n\ndef solve(W, H, x1, y1, x2, y2, w, h):\n    check1 = W >= x2 - x1 + w\n    check2 = H >= y2 - y1 + h\n    if check1 or check2:\n        (answ, ansh) = (inf, inf)\n        if check1:\n            left = max(0, w - x1)\n            right = max(0, w - (W - x2))\n            answ = min(answ, left, right)\n        if check2:\n            down = max(0, h - y1)\n            up = max(0, h - (H - y2))\n            ansh = min(ansh, up, down)\n        ans = min(ansh, answ)\n        if ans == inf:\n            return -1\n        return ans\n    return -1.0\nfor _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    print(solve(W, H, x1, y1, x2, y2, w, h))", "t = int(input())\nfor o in range(t):\n    (W, H) = (int(k) for k in input().split())\n    (x1, y1, x2, y2) = (int(x) for x in input().split())\n    (w, h) = (int(p) for p in input().split())\n    d1 = H - y2\n    d2 = x1\n    d3 = y1\n    d4 = W - x2\n    if d1 >= h or d3 >= h:\n        print(0)\n    elif d2 >= w or d4 >= w:\n        print(0)\n    elif d1 + d3 >= h and d2 + d4 < w:\n        print(h - max(d1, d3))\n    elif d1 + d3 < h and d2 + d4 >= w:\n        print(w - max(d2, d4))\n    elif d1 + d3 >= h and d2 + d4 >= w:\n        print(min(h - max(d1, d3), w - max(d2, d4)))\n    else:\n        print(-1)", "import sys\nimport math\nimport collections\nfrom os import path\nfrom collections import defaultdict\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 6)\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ntest = int(sys.stdin.readline().rstrip())\nwhile test > 0:\n    test -= 1\n    (W, H) = map(int, sys.stdin.readline().rstrip().split())\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().rstrip().split())\n    (w, h) = map(int, sys.stdin.readline().rstrip().split())\n    h1 = y1\n    h2 = H - y2\n    w1 = x1\n    w2 = W - x2\n    d1 = h - y1\n    d2 = w - x1\n    d3 = h - h2\n    d4 = w - w2\n    if h2 >= h and w <= W or (h1 >= h and w <= W) or (w1 >= w and h <= H) or (w2 >= w and h <= H):\n        print(0)\n    else:\n        if not 0 <= d1 <= h2:\n            d1 = mod\n        if not 0 <= d2 <= w2:\n            d2 = mod\n        if not 0 <= d3 <= h1:\n            d3 = mod\n        if not 0 <= d4 <= w1:\n            d4 = mod\n        ans = min(d1, d2, d3, d4)\n        if ans == mod:\n            print(-1)\n        else:\n            print(ans)", "import sys\nimport math\nmod = 10 ** 9 + 7\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nr = range\nfor t in r(IN()):\n    (W, H) = LI()\n    (x1, y1, x2, y2) = LI()\n    (w, h) = LI()\n    ans = 10 ** 20\n    if x1 >= w or W - x2 >= w:\n        print(0)\n        continue\n    if y1 >= h or H - y2 >= h:\n        print(0)\n        continue\n    if w + (x2 - x1) <= W:\n        left = max(x1, W - x2)\n        ans = min(ans, w - left)\n    if h + (y2 - y1) <= H:\n        left = max(y1, H - y2)\n        ans = min(ans, h - left)\n    print(ans if ans < 10 ** 20 else -1)", "for _ in range(int(input())):\n    inf = 10 ** 9\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    ans = min(inf, max(min(w - x1, x2 - W + w), 0) if w + x2 - x1 <= W else inf, max(min(h - y1, y2 - H + h), 0) if h + y2 - y1 <= H else inf)\n    print(-1) if ans == inf else print(ans)", "import sys\nimport math\ntestcases = int(input())\nwhile testcases > 0:\n    (W, H) = map(int, sys.stdin.readline().split())\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().split())\n    (w, h) = map(int, sys.stdin.readline().split())\n    a = max(H - y2, y1)\n    b = max(W - x2, x1)\n    arr1 = []\n    if w + (x2 - x1) <= W:\n        c = max(w - b, 0)\n        arr1.append(c)\n    if h + (y2 - y1) <= H:\n        d = max(h - a, 0)\n        arr1.append(d)\n    if len(arr1) != 0:\n        print('%.9f' % min(arr1))\n    else:\n        print(-1)\n    testcases -= 1", "from math import sqrt\nfor _ in range(int(input())):\n    (W, L) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, l) = map(int, input().split())\n    a = x2 - x1\n    b = y2 - y1\n    if a + w > W and b + l > L:\n        print(-1)\n    elif x1 >= w or y1 >= l or W - x2 >= w or (L - y2 >= l):\n        print(0)\n    else:\n        ans = [10 ** 9 for i in range(4)]\n        if w + a <= W:\n            ans[0] = abs(x1 - w)\n            ans[1] = abs(x2 - (W - w))\n        if b + l <= L:\n            ans[2] = abs(y1 - l)\n            ans[3] = abs(y2 - (L - l))\n        print(min(ans))", "for x in range(int(input())):\n    answer = True\n    room = [int(x) for x in input().split()]\n    table1 = [int(x) for x in input().split()]\n    table2 = [int(x) for x in input().split()]\n    movements = []\n    if table1[2] - table1[0] + table2[0] <= room[0]:\n        if table1[0] >= table2[0] or room[0] - table1[2] >= table2[0]:\n            movements.append(0)\n        else:\n            movements.append(table2[0] - table1[0])\n            movements.append(table2[0] - (room[0] - table1[2]))\n        answer = False\n    if table1[3] - table1[1] + table2[1] <= room[1]:\n        if table1[1] >= table2[1] or room[1] - table1[3] >= table2[1]:\n            movements.append(0)\n        else:\n            movements.append(table2[1] - table1[1])\n            movements.append(table2[1] - (room[1] - table1[3]))\n        answer = False\n    if answer:\n        print(-1)\n    else:\n        print(min(movements))", "def min_movement(W, H, ax1, ay1, ax2, ay2, w, h):\n    widthLeft = ax1\n    widthRight = W - ax2\n    lengthDown = ay1\n    lengthUp = H - ay2\n    if w + abs(ax2 - ax1) <= W:\n        minWidth = min(max(w - widthLeft, 0), max(w - widthRight, 0))\n    else:\n        minWidth = 99999999\n    if h + abs(ay2 - ay1) <= H:\n        minLength = min(max(h - lengthDown, 0), max(h - lengthUp, 0))\n    else:\n        minLength = 99999999\n    if w + abs(ax2 - ax1) > W and h + abs(ay2 - ay1) > H:\n        return int(-1)\n    else:\n        return int(min(minLength, minWidth))\nnumCases = int(input())\ncurrentCase = 1\nwhile currentCase <= numCases:\n    (wW, hH) = map(int, input().split())\n    (tx1, ty1, tx2, ty2) = map(int, input().split())\n    (width, height) = map(int, input().split())\n    print(min_movement(wW, hH, tx1, ty1, tx2, ty2, width, height))\n    currentCase += 1", "n = int(input())\n\ndef main(x1, y1, x2, y2, w1, h1, w, h):\n    h2 = y2 - y1\n    w2 = x2 - x1\n    if w2 + w1 <= w and h1 + h2 <= h:\n        if w - x2 >= w1 or x1 >= w1:\n            wo = 0\n        else:\n            wo = min(w1 + w2 - x2, w1 - (w - x2))\n        if h - y2 >= h1 or y1 >= h1:\n            ho = 0\n        else:\n            ho = min(h1 + h2 - y2, h1 - (h - y2))\n        return min(wo, ho)\n    elif w2 + w1 <= w:\n        if w - x2 >= w1 or x1 >= w1:\n            return 0\n        else:\n            return min(w1 + w2 - x2, w1 - (w - x2))\n    elif h1 + h2 <= h:\n        if h - y2 >= h1 or y1 >= h1:\n            return 0\n        else:\n            return min(h1 + h2 - y2, h1 - (h - y2))\n    else:\n        return -1\nfor i in range(n):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (width, height) = map(int, input().split())\n    print(main(x1, y1, x2, y2, width, height, w, h))", "def main():\n    for _ in range(int(input())):\n        (W, H) = map(int, input().split())\n        (x1, y1, x2, y2) = map(int, input().split())\n        (w, h) = map(int, input().split())\n        distance = float('inf')\n        if w <= W and h <= H:\n            if x2 - x1 + w <= W:\n                distance = min(distance, max(0, w - x1), max(0, x2 - (W - w)))\n            if y2 - y1 + h <= H:\n                distance = min(distance, max(0, h - y1), max(0, y2 - (H - h)))\n        print(distance if distance != float('inf') else -1)\nmain()", "import sys\ntests = int(input())\nfor i in range(tests):\n    space = list(map(int, input().split()))\n    table1 = list(map(int, input().split()))\n    table2 = list(map(int, input().split()))\n    tb1szx = table1[2] - table1[0]\n    tb1szy = table1[3] - table1[1]\n    lowest = float('inf')\n    if tb1szx + table2[0] <= space[0]:\n        lowest = min(max(0, table2[0] - table1[0]), max(0, table1[2] - (space[0] - table2[0])))\n    if tb1szy + table2[1] <= space[1]:\n        lowest = min(lowest, max(0, table2[1] - table1[1]), max(0, table1[3] - (space[1] - table2[1])))\n    print(lowest if lowest < float('inf') else -1)", "def tableCheck(zoom, table1, table2):\n    (roomW, roomH) = map(int, zoom.split())\n    (x1, y1, x2, y2) = map(int, table1.split())\n    (tableW, tableH) = map(int, table2.split())\n    origTableW = x2 - x1\n    origTableH = y2 - y1\n    if origTableW + tableW > roomW and origTableH + tableH > roomH:\n        return -1\n    elif origTableW + tableW > roomW:\n        if max(roomH - y2, y1) < tableH:\n            return tableH - max(roomH - y2, y1)\n        return 0\n    elif origTableH + tableH > roomH:\n        if max(roomW - x2, x1) < tableW:\n            return tableW - max(roomW - x2, x1)\n        return 0\n    else:\n        if max(roomH - y2, y1) < tableH:\n            moveH = tableH - max(roomH - y2, y1)\n        else:\n            moveH = 0\n        if max(roomW - x2, x1) < tableW:\n            moveW = tableW - max(roomW - x2, x1)\n        else:\n            moveW = 0\n        return min(moveH, moveW)\ncaseNum = input()\nfor i in range(int(caseNum)):\n    room = input()\n    fTable = input()\n    sTable = input()\n    print(tableCheck(room, fTable, sTable))", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (xx, yy) = map(int, input().split())\n    ans = 10 ** 8\n    if w >= x2 - x1 + xx:\n        ans = min(ans, max(0, xx - x1), max(0, x2 - (w - xx)))\n    if h >= y2 - y1 + yy:\n        ans = min(ans, max(0, yy - y1), max(0, y2 - (h - yy)))\n    print(ans if ans < 10 ** 8 else -1)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (W, H) = R()\n    (u, v, x, y) = R()\n    (w, h) = R()\n    print(max(0, min(l)) if (l := ([w - u, w - W + x] * (w + x - u <= W) + [h - v, h - H + y] * (h + y - v <= H))) else -1)", "def solution(W, H, x1, y1, x2, y2, w2, h2):\n    (w1, h1) = (x2 - x1, y2 - y1)\n    if w1 + w2 > W and h1 + h2 > H:\n        return -1\n    if w <= x1 or w <= W - x2 or h <= y1 or (h <= H - y2):\n        return 0\n    dx = W - x2 - x1\n    dy = H - y2 - y1\n    if dx > 0:\n        x1 += dx\n        x2 == dx\n    if dy > 0:\n        y1 += dy\n        y2 += dy\n    if w2 + w1 > W:\n        return h2 - y1\n    if h2 + h1 > H:\n        return w2 - x1\n    return min(w2 - x1, h2 - y1)\nTestCases = int(input())\nfor _ in range(TestCases):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    print(f'{solution(W, H, x1, y1, x2, y2, w, h)}')", "n = int(input())\nfor i in range(n):\n    d = []\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    x3 = 0\n    y3 = 0\n    x4 = w\n    y4 = h\n    if x1 + max(0, w - x1) < x2 + max(0, w - x1) <= W:\n        d.append(max(0, w - x1))\n    if x2 - max(0, x2 - W + w) > x1 - max(0, x2 - W + w) >= 0:\n        d.append(max(0, x2 - W + w))\n    if y1 + max(0, h - y1) < y2 + max(0, h - y1) <= H:\n        d.append(max(0, h - y1))\n    if y2 - max(0, y2 - H + h) > y1 - max(0, y2 - H + h) >= 0:\n        d.append(max(0, y2 - H + h))\n    if d == []:\n        print(-1)\n    else:\n        print(min(d))", "for _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    width = x2 - x1\n    height = y2 - y1\n    to_add = float('inf')\n    if height + h <= H:\n        to_add = max(0, h - max(y1, H - y2))\n    if width + w <= W:\n        to_add = min(to_add, max(0, w - max(x1, W - x2)))\n    if to_add == float('inf'):\n        print(-1)\n    else:\n        print(to_add)", "for i in range(int(input())):\n    x = [int(x) for x in input().split()]\n    (W, H) = (x[0], x[1])\n    x = [int(x) for x in input().split()]\n    (x1, y1, x2, y2) = (x[0], x[1], x[2], x[3])\n    x = [int(x) for x in input().split()]\n    (w, h) = (x[0], x[1])\n    if (w <= W - x2 or w <= x1) or (h <= H - y2 or h <= y1):\n        print(0)\n    elif x2 - x1 + w > W and y2 - y1 + h > H:\n        print(-1)\n    else:\n        if W - x2 + x1 < w:\n            a = 1000000000.0\n        elif w <= W - x2 or w <= x1:\n            a = 0\n        elif x2 + w - W < w - x1:\n            a = x2 + w - W\n        else:\n            a = w - x1\n        if H - y2 + y1 < h:\n            b = 1000000000.0\n        elif h <= H - y2 or h <= y1:\n            b = 0\n        elif y2 + h - H < h - y1:\n            b = y2 + h - H\n        else:\n            b = h - y1\n        if min(a, b) == 1000000000.0:\n            print(-1)\n        else:\n            print(min(a, b))", "def minimal_move(room, tb1, tb2):\n    W = room[0]\n    H = room[1]\n    w = tb2[0]\n    h = tb2[1]\n    x1 = tb1[0]\n    y1 = tb1[1]\n    x2 = tb1[2]\n    y2 = tb1[3]\n    ww = x2 - x1\n    hh = y2 - y1\n    ans = 10 ** 9\n    if ww + w > W and hh + h > H:\n        return -1\n    if ww + w <= W:\n        ans = min(w - x1, x2 - (W - w))\n    if hh + h <= H:\n        ans = min(y2 - (H - h), h - y1, ans)\n    if ans < 0:\n        ans = 0\n    return ans\nnum = int(input().strip())\nfor i in range(num):\n    room = list(map(int, input().strip().split()))\n    tb1 = list(map(int, input().strip().split()))\n    tb2 = list(map(int, input().strip().split()))\n    print(minimal_move(room, tb1, tb2))", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    if h - (y2 - y1) < h1 and w - (x2 - x1) < w1:\n        print(-1)\n        return\n    if h - y2 >= h1 or y1 >= h1:\n        print(0.0)\n        return\n    if w - x2 >= w1 or x1 >= w1:\n        print(0.0)\n        return\n    if h1 == h:\n        print(float(min(abs(x1 - w1), abs(w - x2 - w1))))\n        return\n    if w1 == w:\n        print(float(min(abs(h1 - y1), abs(h - y2 - h1))))\n        return\n    if h - (y2 - y1) < h1:\n        print(float(min(abs(x1 - w1), abs(w - x2 - w1))))\n        return\n    if w - (x2 - x1) < w1:\n        print(float(min(abs(h1 - y1), abs(h - y2 - h1))))\n        return\n    print(min(float(min(abs(h1 - y1), abs(h - y2 - h1))), float(min(abs(x1 - w1), abs(w - x2 - w1)))))\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    W = inputs[0]\n    H = inputs[1]\n    inputs = [int(num) for num in input().split()]\n    x1 = inputs[0]\n    y1 = inputs[1]\n    x2 = inputs[2]\n    y2 = inputs[3]\n    inputs = [int(num) for num in input().split()]\n    w = inputs[0]\n    h = inputs[1]\n    wt = x2 - x1\n    ht = y2 - y1\n    if wt + w > W and ht + h > H:\n        print(-1)\n    else:\n        shift = 0\n        avah = max(H - y2, y1)\n        avaw = max(W - x2, x1)\n        if w <= avaw and h <= avah:\n            print(0)\n        else:\n            if h == H - ht and w == W - wt:\n                shift = min(max(w - avaw, 0), max(h - avah, 0))\n            elif h > H - ht:\n                shift += max(w - avaw, 0)\n            elif w > W - wt:\n                shift += max(h - avah, 0)\n            else:\n                shift = min(max(w - avaw, 0), max(h - avah, 0))\n            print(shift)", "for _ in range(int(input())):\n    (W, H) = input().split()\n    W = int(W)\n    H = int(H)\n    (x1, y1, x2, y2) = input().split()\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    (w, h) = input().split()\n    w = int(w)\n    h = int(h)\n    if W - (x2 - x1) < w and H - (y2 - y1) < h:\n        print(-1)\n    else:\n        left = x1\n        right = W - x2\n        top = H - y2\n        bottom = y1\n        res = 1000000007\n        if top + bottom >= h:\n            res = min(res, max(0, h - max(top, bottom)))\n        if left + right >= w:\n            res = min(res, max(0, w - max(left, right)))\n        print(float(res))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input().split()\n    w = int(s[0])\n    h = int(s[1])\n    s = input().split()\n    x1 = int(s[0])\n    y1 = int(s[1])\n    x2 = int(s[2])\n    y2 = int(s[3])\n    s = input().split()\n    wi = int(s[0])\n    hi = int(s[1])\n    wj = w - (x2 - x1)\n    hj = h - (y2 - y1)\n    ans = max(w, h)\n    if wj >= wi:\n        ans = min(wi - x1, x2 - w + wi)\n    if hj >= hi:\n        ans = min(ans, hi - y1)\n        ans = min(ans, y2 - h + hi)\n    if ans < 0:\n        ans = 0\n    if wj < wi and hj < hi:\n        ans = -1\n    print(ans)", "for _ in range(int(input())):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    (la, ra, da, ua) = (x1, w - x2, y1, h - y2)\n    a = []\n    if w1 <= la:\n        a.append(0)\n    elif x2 - x1 + w1 <= w:\n        a.append(w1 - la)\n    if w1 <= ra:\n        a.append(0)\n    elif x2 - x1 + w1 <= w:\n        a.append(w1 - ra)\n    if h1 <= da:\n        a.append(0)\n    elif y2 - y1 + h1 <= h:\n        a.append(h1 - da)\n    if h1 <= ua:\n        a.append(0)\n    elif y2 - y1 + h1 <= h:\n        a.append(h1 - ua)\n    if len(a) != 0:\n        print(min(a))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if x2 - x1 + w > W and y2 - y1 + h > H:\n        print(-1)\n    elif x1 >= w or W - x2 >= w or y1 >= h or (H - y2 >= h):\n        print(0)\n    else:\n        maxw = max(x1, W - x2)\n        maxh = max(y1, H - y2)\n        sh = w - maxw\n        vi = h - maxh\n        if w + x2 - x1 <= W and h + y2 - y1 > H:\n            print(sh)\n        elif w + x2 - x1 > W and h + y2 - y1 <= H:\n            print(vi)\n        else:\n            print(min(vi, sh))", "t = int(input())\nfor i in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    mi = 2 ** 0.5 * 10 ** 8\n    if w - x2 + x1 < w1 and h - y2 + y1 < h1:\n        print(-1)\n        continue\n    if x1 >= w1:\n        print(0)\n    elif w - x2 >= w1:\n        print(0)\n    elif h1 <= y1:\n        print(0)\n    elif h - y2 >= h1:\n        print(0)\n    else:\n        a = y2 - y1\n        b = x2 - x1\n        mi = 2 ** 0.5 * 10 ** 8\n        if h1 > y1 and w1 > x1:\n            if h1 + a <= h:\n                mi = min(mi, h1 - y1)\n            if w1 + b <= w:\n                mi = min(mi, w1 - x1)\n        if x2 > w - w1 and y2 > h - h1:\n            if h1 + a <= h:\n                mi = min(mi, y2 + h1 - h)\n            if w1 + b <= w:\n                mi = min(mi, x2 + w1 - w)\n        if y2 > h - h1 and w1 > x1:\n            if h1 + a <= h:\n                mi = min(mi, y2 + h1 - h)\n            if w1 + b <= w:\n                mi = min(mi, w1 - x1)\n        if x2 > w - w1 and h1 > y1:\n            if h1 + a <= h:\n                mi = min(mi, h1 - y1)\n            if w1 + b <= w:\n                mi = min(mi, x2 + w1 - w)\n        print(round(mi, 7))", "import math\nt = int(input())\nfor tc in range(t):\n    (rw, rh) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if w + (x2 - x1) > rw and h + (y2 - y1) > rh:\n        print(-1)\n    elif w + (x2 - x1) > rw:\n        ymov = max(min(h - y1, y2 - (rh - h)), 0)\n        print(ymov)\n    elif h + (y2 - y1) > rh:\n        xmov = max(min(w - x1, x2 - (rw - w)), 0)\n        print(xmov)\n    else:\n        xmov = max(min(w - x1, x2 - (rw - w)), 0)\n        ymov = max(min(h - y1, y2 - (rh - h)), 0)\n        print(min(xmov, ymov))", "for i in range(int(input())):\n    (W, H) = iter(map(int, input().split()))\n    (x1, y1, x2, y2) = iter(map(int, input().split()))\n    (w, h) = iter(map(int, input().split()))\n    x = 1000000000.0\n    y = 1000000000.0\n    if x2 - x1 + w > W and y2 - y1 + h > H:\n        print(-1)\n        continue\n    if x2 - x1 + w <= W:\n        if x1 > w or W - x2 > w:\n            print(0)\n            continue\n        x = min(abs(W - w - x2), w - x1)\n    if y2 - y1 + h <= H:\n        if y1 > h or H - y2 > h:\n            print(0)\n            continue\n        y = min(h - y1, h - H + y2)\n    print(min(x, y))", "import math\n\ndef solve():\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    gap1 = x1\n    gap2 = W - x2\n    gap3 = y1\n    gap4 = H - y2\n    if gap3 + gap4 < h and gap1 + gap2 < w:\n        return -1\n    if gap1 >= w:\n        return 0\n    if gap2 >= w:\n        return 0\n    if gap3 >= h:\n        return 0\n    if gap4 >= h:\n        return 0\n    movex = 10 ** 10\n    movey = 10 ** 10\n    if gap1 + gap2 >= w:\n        movex = w - max(gap1, gap2)\n    if gap3 + gap4 >= h:\n        movey = h - max(gap3, gap4)\n    return min(movex, movey) * 1.0\nt = int(input())\nfor i in range(t):\n    print(solve())", "for _ in range(int(input())):\n    inf = 10 ** 9\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    ans = min(inf, max(min(w - x1, x2 - W + w), 0) if w + x2 - x1 <= W else inf, max(min(h - y1, y2 - H + h), 0) if h + y2 - y1 <= H else inf)\n    if ans == inf:\n        print(-1)\n    else:\n        print(ans)", "import sys\n\ndef fun(W, H, w, h, a, b, c, d):\n    ans1 = None\n    if b + (H - d) >= h:\n        ans1 = float('inf')\n        temp = max(b, H - d)\n        if temp >= h:\n            return 0\n        else:\n            ans1 = h - temp\n    if a + (W - c) >= w:\n        temp = max(a, W - c)\n        if temp >= w:\n            return 0\n        else:\n            if ans1:\n                return min(ans1, w - temp)\n            return w - temp\n    if ans1:\n        return ans1\n    return -1\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (a, b, c, d) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    print(fun(W, H, w, h, a, b, c, d))", "mini = 100000\ntests = int(input())\nmod = 10 ** 9 + 7\nwhile tests:\n    tests -= 1\n    arr = list(map(int, input().split()))\n    (W, H) = (arr[0], arr[1])\n    arr = list(map(int, input().split()))\n    (a, b, c, d) = (arr[0], arr[1], arr[2], arr[3])\n    arr = list(map(int, input().split()))\n    (w, h) = (arr[0], arr[1])\n    aud = b + H - d\n    arl = a + W - c\n    left = a\n    right = W - c\n    down = b\n    up = H - d\n    if h <= down or h <= up or w <= left or (w <= right) or (h > down and (w <= left or w <= right)) or (h > up and (w <= left or w <= right)):\n        print(0)\n    elif h <= aud or w <= arl:\n        (i, j) = (1000000000000000, 1000000000000000)\n        if aud > 0:\n            i = min(h - down if h - down <= up else 1000000000000000, h - up if h - up <= down else 1000000000000000)\n        if arl > 0:\n            j = min(w - left if w - left <= right else 1000000000000000, w - right if w - right <= left else 1000000000000000)\n        print(min(i, j))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if w * h > W * H - (x2 - x1) * (y2 - y1) or (w + (x2 - x1) > W and h + (y2 - y1) > H):\n        print(-1)\n    else:\n        maxH = max(y1, H - y2)\n        maxW = max(x1, W - x2)\n        if maxH == 0 and maxW == 0 or maxH >= h or maxW >= w:\n            print(0)\n        elif maxW == 0 or x1 + W - x2 < w:\n            print(h - maxH)\n        elif maxH == 0 or y1 + H - y2 < h:\n            print(w - maxW)\n        else:\n            print(min(h - maxH, w - maxW))", "def solve(W, H, x1, y1, x2, y2, w, h):\n    if x2 - x1 + w > W and y2 - y1 + h > H:\n        return -1\n    dist_x = max(x1, W - x2)\n    dist_y = max(y1, H - y2)\n    if dist_x >= w or dist_y >= h:\n        return 0\n    move_x = 100000000.0\n    move_y = 100000000.0\n    if x2 - x1 + w <= W:\n        move_x = w - dist_x\n    if y2 - y1 + h <= H:\n        move_y = h - dist_y\n    return min(move_x, move_y)\nfor t in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    print(solve(W, H, x1, y1, x2, y2, w, h))", "from math import inf\n\ndef solve(W, H, x1, y1, x2, y2, w, h):\n    check1 = W >= x2 - x1 + w\n    check2 = H >= y2 - y1 + h\n    if check1 or check2:\n        ans = inf\n        if check1:\n            ans = min(ans, min(max(0, w - x1), max(0, x2 - W + w)))\n        if check2:\n            ans = min(ans, min(max(0, h - y1), max(0, y2 - H + h)))\n        if ans == inf:\n            return -1\n        return float(ans)\n    return -1.0\nfor _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    print(solve(W, H, x1, y1, x2, y2, w, h))", "for _ in range(int(input())):\n    (W, H) = list(map(int, input().split()))\n    (x1, y1, x2, y2) = list(map(int, input().split()))\n    (w, h) = list(map(int, input().split()))\n    L = x1\n    R = W - x2\n    U = H - y2\n    D = y1\n    d = []\n    if w <= L or w <= R or h <= U or (h <= D):\n        print('0.000000000')\n    else:\n        if h <= D + U and w <= W:\n            req = h - max(D, U)\n            d.append(req)\n        if w <= L + R and h <= H:\n            d.append(w - max(L, R))\n        if len(d) == 0:\n            print(-1)\n        else:\n            print('{0:.9f}'.format(min(d)))", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x, y, X, Y) = map(int, input().split())\n    (W, H) = map(int, input().split())\n    (a, b) = (10 ** 8, 10 ** 8)\n    if X - x <= w - W:\n        a = max(W - max(x, w - X), 0)\n    if Y - y <= h - H:\n        b = max(H - max(y, h - Y), 0)\n    if min(a, b) != 10 ** 8:\n        print(min(a, b))\n    else:\n        print(-1)", "import math\nfor _ in range(int(input().strip())):\n    (Wg, Hg) = map(int, input().strip().split())\n    (x1, y1, x2, y2) = map(int, input().strip().split())\n    (wn, hn) = map(int, input().strip().split())\n    (a, b) = (100000000.0, 100000000.0)\n    ht1 = y2 - y1\n    wt1 = x2 - x1\n    hl = Hg - hn\n    wl = Wg - wn\n    if wt1 <= wl:\n        a = max(wn - max(x1, Wg - x2), 0)\n    if ht1 <= hl:\n        b = max(hn - max(y1, Hg - y2), 0)\n    if min(a, b) != 100000000.0:\n        print(min(a, b))\n    else:\n        print(-1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s1 = input().split()\n    W = int(s1[0])\n    H = int(s1[1])\n    s2 = input().split()\n    x1 = int(s2[0])\n    y1 = int(s2[1])\n    x2 = int(s2[2])\n    y2 = int(s2[3])\n    s3 = input().split()\n    w = int(s3[0])\n    h = int(s3[1])\n    w_s = W - (x2 - x1)\n    h_s = H - (y2 - y1)\n    ans_w = W + H\n    ans_h = W + H\n    if w_s >= w:\n        ans_w = min(w - x1, w - (W - x2))\n    if h_s >= h:\n        ans_h = min(h - y1, h - (H - y2))\n    ans = min(ans_w, ans_h)\n    if ans < 0:\n        ans = 0\n    if w_s < w and h_s < h:\n        ans = -1\n    print(ans)", "for _ in range(int(input())):\n    inf = 10 ** 9\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    ans = min(inf, max(min(w - x1, x2 - W + w), 0) if w + x2 - x1 <= W else inf, max(min(h - y1, y2 - H + h), 0) if h + y2 - y1 <= H else inf)\n    print(-1) if ans == inf else print(ans)", "def solve(w, h, x1, y1, x2, y2, ww, hh):\n    if abs(x2 - x1) + ww > w and abs(y2 - y1) + hh > h:\n        print(-1)\n        return None\n    x_shift = max(w, h)\n    y_shift = max(w, h)\n    if x1 + w - x2 >= ww:\n        if ww > max(x1, w - x2):\n            x_shift = ww - max(x1, w - x2)\n        else:\n            print(0)\n            return None\n    if y1 + h - y2 >= hh:\n        if hh > max(y1, h - y2):\n            y_shift = hh - max(y1, h - y2)\n        else:\n            print(0)\n            return None\n    print(min(x_shift, y_shift))\n    return None\nfor _ in range(int(input())):\n    solve(*map(int, input().split()), *map(int, input().split()), *map(int, input().split()))", "e = lambda : map(int, input().split())\n(t,) = e()\nwhile t:\n    t -= 1\n    (W, H) = e()\n    (A, B, C, D) = e()\n    (w, h) = e()\n    print(max(0, min(l)) if (l := ((w - A, w - W + C) * (w + C - A <= W) + (h - B, h - H + D) * (h + D - B <= H))) else -1)", "e = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (W, H) = e()\n    (A, B, C, D) = e()\n    (w, h) = e()\n    print(max(0, min(l)) if (l := ((w - A, w - W + C) * (w + C - A <= W) + (h - B, h - H + D) * (h + D - B <= H))) else -1)", "T = int(input())\nfor _ in range(T):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    ans = 10 ** 8\n    if x2 - x1 + w <= W:\n        ans = min(ans, max(0, w - x1))\n        ans = min(ans, max(0, x2 - (W - w)))\n    if y2 - y1 + h <= H:\n        ans = min(ans, max(0, h - y1))\n        ans = min(ans, max(0, y2 - (H - h)))\n    if ans == 10 ** 8:\n        ans = -1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (W, H) = map(int, input().split())\n    (a, b, c, d) = list(map(int, input().split()))\n    (w, h) = map(int, input().split())\n    tableWidth = c - a\n    tableheight = d - b\n    if a >= w or b >= h or W - c >= w or (H - d >= h):\n        print(0)\n    elif tableWidth + w > W and tableheight + h > H:\n        print(-1)\n    else:\n        mini = W + H\n        if tableWidth + w <= W:\n            vala = w - max(a, W - c)\n            mini = min(mini, vala)\n        if tableheight + h <= H:\n            valb = h - max(b, H - d)\n            mini = min(mini, valb)\n        print(mini)", "t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split(' '))\n    (a, b, c, d) = map(int, input().split(' '))\n    width = max(a, m - c)\n    high = max(b, n - d)\n    width_limit = m - c + a\n    high_limit = n - d + b\n    (x, y) = map(int, input().split(' '))\n    answer1 = -1\n    answer2 = -1\n    if x <= width_limit:\n        answer1 = x - width\n        if answer1 < 0:\n            answer1 = 0\n    if y <= high_limit:\n        answer2 = y - high\n        if answer2 < 0:\n            answer2 = 0\n    if answer1 == -1:\n        answer = answer2\n    elif answer2 == -1:\n        answer = answer1\n    else:\n        answer = min(answer1, answer2)\n    if x > width_limit and y > high_limit:\n        answer = -1\n    print(answer)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (W, H) = R()\n    (u, v, x, y) = R()\n    (w, h) = R()\n    print(max(0, min(l)) if (l := ([w - u, w - W + x] * (w + x - u <= W) + [h - v, h - H + y] * (h + y - v <= H))) else -1)", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w2, h2) = map(int, input().split())\n    ans = 50000000\n    ans2 = 50000000\n    c = 0\n    if w - (x2 - x1) >= w2:\n        if x1 > w - x2:\n            if x1 >= w2:\n                print(0)\n                continue\n            else:\n                ans = abs(x1 - w2)\n        elif w - x2 >= w2:\n            print(0)\n            continue\n        else:\n            ans = abs(w2 - (w - x2))\n    else:\n        c += 1\n    if h - (y2 - y1) >= h2:\n        if y1 > h - y2:\n            if h2 <= y1:\n                print(0)\n                continue\n            else:\n                ans2 = abs(y1 - h2)\n        elif h - y2 >= h2:\n            print(0)\n            continue\n        else:\n            ans2 = abs(h2 - (h - y2))\n    elif c == 1:\n        print(-1)\n        continue\n    print(min(ans, ans2))", "t = int(input())\nfor i in range(0, t):\n    minimum = 10 ** 8\n    (box_x, box_y) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (tableW, tableH) = map(int, input().split())\n    if box_x - (x2 - x1) >= tableW and box_y >= tableH or (box_y - (y2 - y1) >= tableH and box_x >= tableW):\n        if box_x - (x2 - x1) >= tableW and box_y >= tableH:\n            minimum = min(minimum, tableW - x1, x2 - (box_x - tableW))\n        if box_y - (y2 - y1) >= tableH and box_x >= tableW:\n            minimum = min(minimum, tableH - y1, y2 - (box_y - tableH))\n        if minimum <= 0:\n            print('0.000000000')\n        else:\n            print('%.9f' % minimum)\n    else:\n        print('-1')", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x, y, X, Y) = map(int, input().split())\n    (W, H) = map(int, input().split())\n    (a, b) = (10 ** 8, 10 ** 8)\n    if X - x <= w - W:\n        a = max(W - max(x, w - X), 0)\n    if Y - y <= h - H:\n        b = max(H - max(y, h - Y), 0)\n    if min(a, b) != 10 ** 8:\n        print(min(a, b))\n    else:\n        print(-1)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (W, H) = R()\n    (u, v, x, y) = R()\n    (w, h) = R()\n    print(max(0, min(l)) if (l := ([w - u, w - W + x] * (w + x - u <= W) + [h - v, h - H + y] * (h + y - v <= H))) else -1)", "t = int(input())\nfor _ in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (xx, yy) = map(int, input().split())\n    ans = 10 ** 8\n    if w >= x2 - x1 + xx:\n        ans = min(ans, max(0, xx - x1), max(0, x2 - (w - xx)))\n    if h >= y2 - y1 + yy:\n        ans = min(ans, max(0, yy - y1), max(0, y2 - (h - yy)))\n    print(ans if ans < 10 ** 8 else -1)", "for _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    ans = 999999999999999\n    if x2 - x1 + w <= W:\n        ans = min(ans, max(0, w - x1))\n        ans = min(ans, max(0, x2 - (W - w)))\n    if y2 - y1 + h <= H:\n        ans = min(ans, max(0, h - y1))\n        ans = min(ans, max(0, y2 - (H - h)))\n    if ans == 999999999999999:\n        print(-1)\n    else:\n        print(float(ans))", "for i in range(int(input())):\n    (w_r, h_r) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w_t2, h_t2) = map(int, input().split())\n    if x2 - x1 + w_t2 > w_r and y2 - y1 + h_t2 > h_r:\n        print(-1)\n    else:\n        max_avail_x = max(w_r - x2, x1 - 0)\n        min_avail_x = min(w_r - x2, x1 - 0)\n        max_avail_y = max(h_r - y2, y1 - 0)\n        min_avail_y = min(h_r - y2, y1 - 0)\n        move_x = w_t2 - max_avail_x\n        move_y = h_t2 - max_avail_y\n        if max_avail_x > w_t2 or max_avail_y > h_t2:\n            print(0)\n        elif move_x > min_avail_x:\n            print(move_y)\n        elif move_y > min_avail_y:\n            print(move_x)\n        else:\n            print(min(move_x, move_y))", "t = int(input())\nfor i in range(t):\n    (w, h) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = map(int, input().split())\n    c = 0\n    lst = []\n    allow = h - y2\n    if allow >= h1:\n        dif = 0\n    else:\n        dif = h1 - allow\n    if y1 >= dif:\n        c += 1\n        lst.append(dif)\n    allow = y1\n    if allow >= h1:\n        dif = 0\n    else:\n        dif = h1 - allow\n    if h - y2 >= dif:\n        c += 1\n        lst.append(dif)\n    allow = x1\n    if allow >= w1:\n        dif = 0\n    else:\n        dif = w1 - allow\n    if w - x2 >= dif:\n        c += 1\n        lst.append(dif)\n    allow = w - x2\n    if allow >= w1:\n        dif = 0\n    else:\n        dif = w1 - allow\n    if x1 >= dif:\n        c += 1\n        lst.append(dif)\n    if c > 0:\n        print(min(lst))\n    else:\n        print(-1)", "for i in range(int(input())):\n    dimensions = list(map(int, input().split(' ')))\n    W = dimensions[0]\n    H = dimensions[1]\n    first_table_dimensions = list(map(int, input().split(' ')))\n    x1 = first_table_dimensions[0]\n    y1 = first_table_dimensions[1]\n    x2 = first_table_dimensions[2]\n    y2 = first_table_dimensions[3]\n    second_table_dimensions = list(map(int, input().split(' ')))\n    w = second_table_dimensions[0]\n    h = second_table_dimensions[1]\n    horizontal_change = -1\n    if x2 - x1 + w <= W:\n        left_space = x1\n        right_space = W - x2\n        maximum_space = max(left_space, right_space)\n        if maximum_space >= w:\n            horizontal_change = 0\n        else:\n            horizontal_change = w - maximum_space\n    vertical_change = -1\n    if y2 - y1 + h <= H:\n        bottom_space = y1\n        top_space = H - y2\n        maximum_space = max(bottom_space, top_space)\n        if maximum_space >= h:\n            vertical_change = 0\n        else:\n            vertical_change = h - maximum_space\n    if vertical_change == -1 and horizontal_change == -1:\n        print('-1')\n    elif vertical_change == -1:\n        print(horizontal_change)\n    elif horizontal_change == -1:\n        print(vertical_change)\n    else:\n        print(min(vertical_change, horizontal_change))", "t = int(input())\nfor _ in range(t):\n    (wr, hr) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (wt, ht) = map(int, input().split())\n    movex = movey = 100000000.0\n    if wr >= x2 - x1 + wt:\n        movex = min(max(0, wt - x1), max(0, x2 - (wr - wt)))\n    if hr >= y2 - y1 + ht:\n        movey = min(max(0, ht - y1), max(0, y2 - (hr - ht)))\n    dis = min(movex, movey)\n    resp = [-1, dis]\n    print(resp[dis < 100000000.0])", "tc = int(input())\nfor _ in range(tc):\n    (w, h) = list(map(int, input().split()))\n    (x1, y1, x2, y2) = list(map(int, input().split()))\n    (w2, h2) = list(map(int, input().split()))\n    (w1, h1) = (x2 - x1, y2 - y1)\n    if w1 + w2 > w and h1 + h2 > h:\n        print(-1)\n    elif w1 + w2 > w:\n        print(max(min(h2 - y1, y2 - (h - h2)), 0))\n    elif h1 + h2 > h:\n        print(max(min(w2 - x1, x2 - (w - w2)), 0))\n    else:\n        print(max(min(h2 - y1, y2 - (h - h2), w2 - x1, x2 - (w - w2)), 0))", "cases = input()\nfor c in range(int(cases)):\n    (rw, rh) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (tw, th) = map(int, input().split())\n    west = x1\n    east = rw - x2\n    north = rh - y2\n    south = y1\n    westside = tw - west\n    eastside = tw - east\n    northside = th - north\n    southside = th - south\n    if rw - (x2 - x1) < tw and rh - (y2 - y1) < th:\n        print('-1')\n    elif west >= rw or east >= rw or north >= rh or (south >= rh):\n        print('0')\n    else:\n        if northside > rh - (north + (y2 - y1)):\n            northside = 100000000\n        if southside > rh - (south + (y2 - y1)):\n            southside = 100000000\n        if westside > rw - (west + (x2 - x1)):\n            westside = 100000000\n        if eastside > rw - (east + (x2 - x1)):\n            eastside = 100000000\n        print(max(0, min(northside, southside, westside, eastside)))", "testCases = int(input())\nfor a in range(testCases):\n    (wRoom, hRoom) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (wTable, hTable) = map(int, input().split())\n    if x2 - x1 + wTable > wRoom and y2 - y1 + hTable > hRoom:\n        print(-1)\n    else:\n        maxX = max([wRoom - x2, x1])\n        minX = min([wRoom - x2, x1])\n        maxY = max([hRoom - y2, y1])\n        minY = min([hRoom - y2, y1])\n        moveX = wTable - maxX\n        moveY = hTable - maxY\n        if maxX > wTable or maxY > hTable:\n            print(0)\n        elif moveX > minX:\n            print(moveY)\n        elif moveY > minY:\n            print(moveX)\n        else:\n            print(min([moveX, moveY]))", "tests = int(input())\nfor i in range(tests):\n    space = list(map(int, input().split()))\n    table1 = list(map(int, input().split()))\n    table2 = list(map(int, input().split()))\n    tb1szx = table1[2] - table1[0]\n    tb1szy = table1[3] - table1[1]\n    lowest = float('inf')\n    if tb1szx + table2[0] <= space[0]:\n        lowest = min(max(0, table2[0] - table1[0]), max(0, table1[2] - (space[0] - table2[0])))\n    if tb1szy + table2[1] <= space[1]:\n        lowest = min(lowest, max(0, table2[1] - table1[1]), max(0, table1[3] - (space[1] - table2[1])))\n    print(lowest if lowest < float('inf') else -1)", "t = int(input())\nfor _ in range(t):\n    [W, H] = [int(c) for c in input().split()]\n    [ablx, ably, atrx, atry] = [int(c) for c in input().split()]\n    [w, h] = [int(c) for c in input().split()]\n    if atrx - ablx + w > W and atry - ably + h > H:\n        print(-1)\n        continue\n    ans = float('inf')\n    if atrx - ablx + w <= W:\n        ans = min(ans, max(0, w - ablx))\n        ans = min(ans, max(0, w - W + atrx))\n    if atry - ably + h <= H:\n        ans = min(ans, max(0, h - ably))\n        ans = min(ans, max(0, h - H + atry))\n    print(int(ans))", "for _ in range(int(input())):\n    (w, h) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    (x1, y1, x2, y2) = (l[0], l[1], l[2], l[3])\n    mw = x2 - x1\n    mh = y2 - y1\n    (a, b) = map(int, input().split())\n    wdis = w - x2 + x1\n    hdis = h - y2 + y1\n    if wdis < a and hdis < b:\n        print(-1)\n        continue\n    if w - x2 >= a or x1 >= a or h - y2 >= b or (y1 >= b):\n        print(0)\n        continue\n    res = []\n    if mw + a <= w:\n        res = [a - (w - x2), a - x1]\n    if mh + b <= h:\n        res += [b - (h - y2), b - y1]\n    print(min(res))\n    continue", "def readline():\n    return map(int, input().split())\n\ndef solve():\n    (W, H) = readline()\n    (x1, y1, x2, y2) = readline()\n    (w, h) = readline()\n    if x2 - x1 + w <= W:\n        yield (w - x1)\n        yield (w - (W - x2))\n    if y2 - y1 + h <= H:\n        yield (h - y1)\n        yield (h - (H - y2))\nt = int(input())\nfor __ in range(t):\n    ans = min(solve(), default=None)\n    print(-1 if ans is None else max(ans, 0))", "def solve():\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w1, h1) = (abs(x1 - x2), abs(y1 - y2))\n    (w2, h2) = map(int, input().split())\n    if w1 + w2 > W and h1 + h2 > H:\n        print(-1)\n        return\n    if w2 <= x1 or w2 <= W - x2 or h2 <= y1 or (h2 <= H - y2):\n        print(0)\n        return\n    ans = W + H\n    if w1 + w2 <= W:\n        ans = min(ans, w2 - x1, w2 - W + x2)\n    if h1 + h2 <= H:\n        ans = min(ans, h2 - y1, h2 - H + y2)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from collections import *\nfrom math import *\nTT = int(input())\nfor y in range(TT):\n    (n, m) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if x2 - x1 + w <= n:\n        if y2 - y1 + h <= m:\n            rh = max(m - y2, y1)\n            r1 = max(h - rh, 0)\n            rw = max(n - x2, x1)\n            r2 = max(w - rw, 0)\n            print(min(r1, r2))\n        else:\n            rw = max(n - x2, x1)\n            r2 = max(w - rw, 0)\n            print(r2)\n    elif y2 - y1 + h <= m:\n        rh = max(m - y2, y1)\n        r1 = max(h - rh, 0)\n        print(r1)\n    else:\n        print('-1')", "t = int(input())\nwhile t:\n    t -= 1\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if h <= max(H - y2, y1) or w <= max(x1, W - x2):\n        print(format(0, '.9f'))\n    elif h + (y2 - y1) > H:\n        if w + (x2 - x1) > W:\n            print(-1)\n        else:\n            print(format(w - max(x1, W - x2), '.9f'))\n    elif w + (x2 - x1) <= W:\n        print(format(min(w - max(x1, W - x2), h - max(H - y2, y1)), '.9f'))\n    else:\n        print(format(h - max(H - y2, y1), '.9f'))", "t = int(input())\nfor _ in range(t):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if w + (x2 - x1) > W and h + (y2 - y1) > H:\n        print(-1)\n    elif x1 >= w or W - x2 >= w:\n        print(0)\n    elif y1 >= h or H - y2 >= h:\n        print(0)\n    else:\n        d = W + H\n        ld = x1\n        rd = W - x2\n        ud = H - y2\n        lod = y1\n        if ld + rd >= w:\n            d = min(w - ld, w - rd)\n        if ud + lod >= h:\n            d = min(d, h - ud, h - lod)\n        print(d)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ntestcases = 1\ntestcases = int(input())\nfor _ in range(testcases):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = [int(x) for x in input().split()]\n    (w, h) = map(int, input().split())\n    options = [y1, W - x2, H - y2, x1]\n    res = []\n    if h + y2 - y1 <= H:\n        res.append(max(0, h - y1))\n        res.append(max(0, h - (H - y2)))\n    if w + x2 - x1 <= W:\n        res.append(max(0, w - x1))\n        res.append(max(0, w - (W - x2)))\n    if len(res) == 0:\n        print(-1)\n    else:\n        print(min(res))", "for _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    w2 = x2 - x1\n    h2 = y2 - y1\n    (w1, h1) = map(int, input().split())\n    if w2 + w1 <= W or h1 + h2 <= H:\n        v1 = v2 = v3 = v4 = float('inf')\n        if w2 + w1 <= W:\n            v1 = max(0, w1 - x1)\n            v3 = max(0, w1 - W + x2)\n        if h1 + h2 <= H:\n            v2 = max(0, h1 - y1)\n            v4 = max(0, h1 - H + y2)\n        print(min(v1, v2, v3, v4))\n    else:\n        print('-1')", "t = int(input())\nfor i in range(t):\n    (W, H) = (int(c) for c in input().split())\n    (x1, y1, x2, y2) = (int(c) for c in input().split())\n    (w, h) = (int(c) for c in input().split())\n    w1 = w - x1\n    w2 = w + x2 - W\n    h1 = h - y1\n    h2 = h + y2 - H\n    if x2 - x1 + w > W:\n        if y2 - y1 + h > H:\n            print(-1)\n        else:\n            x = min(h1, h2)\n            if x < 0:\n                print(0)\n            else:\n                print(x)\n    elif y2 - y1 + h > H:\n        x = min(w1, w2)\n        if x < 0:\n            print(0)\n        else:\n            print(x)\n    else:\n        x = min(w1, w2, h1, h2)\n        if x < 0:\n            print(0)\n        else:\n            print(x)", "def TwoTables():\n    t = int(input())\n    for i in range(t):\n        (w, h) = [int(x) for x in input().split()]\n        (x_1, y_1, x_2, y_2) = [int(x) for x in input().split()]\n        (w_green, h_green) = [int(x) for x in input().split()]\n        w_blue = x_2 - x_1\n        h_blue = y_2 - y_1\n        if w_green > w or w_blue > w or h_green > h or (h_blue > h) or (w_blue + w_green > w and h_blue + h_green > h):\n            print(-1)\n        else:\n            hor_space = max(x_1, w - x_2)\n            vert_space = max(y_1, h - y_2)\n            hor_steps = max(w_green - hor_space, 0)\n            vert_steps = max(h_green - vert_space, 0)\n            is_there_space_to_move_blue_hor = w_green + w_blue <= w\n            is_there_space_to_move_blue_vert = h_green + h_blue <= h\n            if is_there_space_to_move_blue_hor and (hor_steps <= vert_steps or not is_there_space_to_move_blue_vert):\n                print(hor_steps)\n            else:\n                print(vert_steps)\n    return\nTwoTables()", "t = int(input())\nwhile t:\n    t -= 1\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    if w > W:\n        print(-1)\n    elif H - (y2 - y1) < h:\n        if h <= H and W - (x2 - x1) >= w:\n            print(float(min(max(w - x1, 0), max(0, w - (W - x2)))))\n        else:\n            print(-1)\n    elif W - (x2 - x1) >= w:\n        print(float(min(min(max(w - x1, 0), max(0, w - (W - x2))), min(max(0, h - y1), max(0, h - (H - y2))))))\n    else:\n        print(float(min(max(0, h - y1), max(0, h - (H - y2)))))", "import math\nfor _ in range(int(input())):\n    (W, H) = map(int, input().split())\n    (x1, y1, x2, y2) = map(int, input().split())\n    (w, h) = map(int, input().split())\n    available_x = W + x1 - x2\n    available_y = H + y1 - y2\n    z = False\n    ans = 1000000000000.0\n    if available_x >= w:\n        current_available = max(x1 - 0, W - x2)\n        t1 = float(max(0, w - current_available))\n        ans = min(ans, t1)\n        z = True\n    if available_y >= h:\n        current_available = max(y1 - 0, H - y2)\n        t2 = float(max(0, h - current_available))\n        ans = min(ans, t2)\n        z = True\n    if z:\n        print(ans)\n    else:\n        print(-1)"]