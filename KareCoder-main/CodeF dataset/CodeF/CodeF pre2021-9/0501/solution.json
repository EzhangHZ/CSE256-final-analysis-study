["Test = int(input())\nAns = ''\n\ndef solve(n, k):\n    ans = '1 ' * (k - 3)\n    n = n - (k - 3)\n    if n % 3 == 0:\n        return ans + str(n // 3) + ' ' + str(n // 3) + ' ' + str(n // 3) + '\\n'\n    if n & n - 1 == 0:\n        return ans + str(n // 2) + ' ' + str(n // 4) + ' ' + str(n // 4) + '\\n'\n    if n % 2 != 0:\n        return ans + str(n // 2) + ' ' + str(n // 2) + ' 1\\n'\n    bound = n // 2\n    if bound % 2 == 0:\n        return ans + str(n // 2) + ' ' + str(n // 4) + ' ' + str(n // 4) + '\\n'\n    return ans + str(bound - 1) + ' ' + str(bound - 1) + ' ' + str(n - 2 * (bound - 1)) + '\\n'\nfor i in range(Test):\n    (n, k) = [int(i) for i in input().split()]\n    Ans = Ans + solve(n, k)\nprint(Ans)", "t = int(input())\nresult = []\nfor i in range(t):\n    (n, k) = [int(x) for x in input().strip().split(' ')]\n    res = ''\n    if k > 3:\n        res += ' '.join(['1'] * (k - 3)) + ' '\n        n -= k - 3\n    if n % 2 == 1:\n        result.append(f'{res}{n // 2} {n // 2} 1')\n    else:\n        half = n // 2\n        if half % 2 == 0:\n            result.append(f'{res}{half} {half // 2} {half // 2}')\n        else:\n            result.append(f'{res}{half - 1} {half - 1} 2')\nfor line in result:\n    print(line)", "n = int(input())\nr = []\nfor i in range(n):\n    t = input().split()\n    r.append([int(t[0]), int(t[1])])\nfor i in r:\n    if i[1] > 3:\n        res = ''\n        n = 0\n        res = '1 ' * (i[1] - 3)\n        t = i[0] - (i[1] - 3)\n        if t % 4 == 0:\n            print(f'{res}{int(t / 2)} {int(t / 4)} {int(t / 4)}')\n        elif t % 2 == 0:\n            print(f'{res}2 {int((t - 2) / 2)} {int((t - 2) / 2)}')\n        else:\n            print(f'{res}1 {int(t / 2)} {int(t / 2)}')\n    else:\n        t = i[0]\n        if t % 4 == 0:\n            print(f'{int(t / 2)} {int(t / 4)} {int(t / 4)}')\n        elif t % 2 == 0:\n            print(f'2 {int((t - 2) / 2)} {int((t - 2) / 2)}')\n        else:\n            print(f'1 {int(t / 2)} {int(t / 2)}')", "import sys\nfrom math import log\n\ndef solve(n, k):\n    ones = [str(1)] * (k - 3)\n    n -= k - 3\n    if 2 ** int(log(n, 2)) == n:\n        return ' '.join(ones + [str(n // 2), str(n // 4), str(n // 4)])\n    else:\n        if n % 2 == 1:\n            c = 1\n            a = (n - 1) // 2\n            b = a\n            return ' '.join(ones + [str(a), str(b), str(c)])\n        counter = 2\n        while counter < n:\n            if n % counter == 0:\n                if n // counter % 2 == 1:\n                    a = counter\n                    b = counter * (n // counter - 1) // 2\n                    c = b\n                    return ' '.join(ones + [str(a), str(b), str(c)])\n            counter += 2\n    return None\nt = int(sys.stdin.readline().strip())\nans = 0\nfor _ in range(t):\n    line = sys.stdin.readline().strip()\n    (n, k) = list(map(int, line.split()))\n    print(solve(n, k))", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = list(map(int, input().split()))\n        s = ''\n        n = n - (k - 3)\n        s = '1 ' * (k - 3)\n        if n % 2 == 1:\n            s += '1 '\n            s += str(n // 2) + ' '\n            s += str(n // 2) + ' '\n        elif n % 4 == 0:\n            s += str(2 * (n // 4)) + ' '\n            s += str(n // 4) + ' '\n            s += str(n // 4) + ' '\n        else:\n            s += '2 '\n            s += str((n - 2) // 2) + ' '\n            s += str((n - 2) // 2) + ' '\n        print(s)\nmain()", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\ntestcases = int(input())\nfor testcase in range(testcases):\n    temparr = get_ints()\n    a = temparr[0]\n    b = temparr[1]\n    ans = []\n    if b > 3:\n        diff = b - 3\n        for i in range(diff):\n            a -= 1\n            ans.append(str(1))\n    if a & 1:\n        ans.append(str(1))\n        a -= 1\n        diff = a >> 1\n        ans.append(str(diff))\n        ans.append(str(diff))\n        print(' '.join(ans))\n    else:\n        diff = a >> 1\n        if diff & 1:\n            ans.append(str(2))\n            ans.append(str(diff - 1))\n            ans.append(str(diff - 1))\n            print(' '.join(ans))\n        else:\n            halfhalf = diff >> 1\n            ans.append(str(diff))\n            ans.append(str(halfhalf))\n            ans.append(str(halfhalf))\n            print(' '.join(ans))", "for _ in range(int(input())):\n    (num, k) = map(int, input().split())\n    k -= 3\n    num -= k\n    print('1 ' * k, end='')\n    print(f'1 {(num - 1) // 2} {(num - 1) // 2}' if num % 2 else f'2 {num // 2 - 1} {num // 2 - 1}' if num % 4 else f'{num // 4} {num // 4} {num // 2}')", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\n\ndef split_three(n):\n    if n % 2 == 1:\n        return [1, n // 2, n // 2]\n    elif n % 4 == 2:\n        return [2, n // 2 - 1, n // 2 - 1]\n    else:\n        return [n // 4, n // 4, n // 2]\nt = read_int()\nfor case_num in range(t):\n    (n, k) = read_ints()\n    ans = [1] * (k - 3) + split_three(n - (k - 3))\n    print(' '.join(map(str, ans)))", "def count(n):\n    if n % 2 == 1:\n        return str(n // 2) + ' ' + str(n // 2) + ' 1'\n    else:\n        if n == 4:\n            return '2 1 1'\n        elif n == 6:\n            return '2 2 2'\n        elif n == 8:\n            return '4 2 2'\n        if n % 4 == 2:\n            return str(n // 2 - 1) + ' ' + str(n // 2 - 1) + ' 2'\n        return str(n // 2) + ' ' + str(n // 4) + ' ' + str(n // 4)\n\ndef main():\n    (n, k) = map(int, input().split())\n    print(count(n - (k - 3)) + ' 1' * (k - 3))\nfor _ in range(int(input())):\n    main()", "from math import floor\n\ndef easy_k_lcm(n):\n    if n % 2 != 0:\n        return (1, floor(n / 2), floor(n / 2))\n    elif n % 4 == 0:\n        return (n // 2, n // 4, n // 4)\n    else:\n        return (int(n / 2 - 1), int(n / 2 - 1), 2)\ntest = int(input())\nfor t in range(test):\n    (n, k) = list(map(int, input().split()))\n    ans = ''\n    ones = '1 ' * (k - 3)\n    ans += ones\n    (a, b, c) = easy_k_lcm(n - k + 3)\n    ans += str(a) + ' ' + str(b) + ' ' + str(c)\n    print(ans)", "def nr():\n    return int(input())\n\ndef nrs():\n    return [int(item) for item in input().split()]\nfor _ in range(nr()):\n    (n, k) = nrs()\n    r = ''\n    if k > 3:\n        r = '1 ' * (k - 3)\n        n -= k - 3\n    h = n // 2\n    if n % 2 == 1:\n        r += f'{h} {h} 1'\n    elif h % 2 == 0:\n        r += f'{h} {h // 2} {h // 2}'\n    else:\n        r += f'{h - 1} {h - 1} 2'\n    print(r)", "def find():\n    (n, k) = map(int, input().split())\n    print('1 ' * (k - 3), end='')\n    n = n - k + 3\n    if n % 2 != 0:\n        print((n - 1) // 2, (n - 1) // 2, 1)\n    elif n // 2 % 2 == 0:\n        print(n // 2, n // 4, n // 4)\n    else:\n        print(n // 2 - 1, n // 2 - 1, 2)\nfor i in range(int(input())):\n    find()", "def getk3(n):\n    if n & 1:\n        return (1, (n - 1) // 2, (n - 1) // 2)\n    elif n % 4 == 0:\n        return (n // 4, n // 4, n // 2)\n    else:\n        return (2, n // 2 - 1, n // 2 - 1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    (a, b, c) = getk3(n - k + 3)\n    sol = ['1'] * (k - 3) + [str(a), str(b), str(c)]\n    print(' '.join(sol))", "t = int(input())\nout = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    res = [1] * (k - 3)\n    n = n - k + 3\n    if n % 2 == 0:\n        if n % 4 == 0:\n            res = res + [n // 2, n // 4, n // 4]\n        else:\n            res = res + [n // 2 - 1, n // 2 - 1, 2]\n    else:\n        res = res + [n // 2, n // 2, 1]\n    out.append(res)\nfor i in out:\n    print(*i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = n - (k - 3)\n    if x % 3 == 0:\n        print(*[1] * (k - 3), x // 3, x // 3, x // 3)\n    elif (x - 1) % 2 == 0:\n        print(*[1] * (k - 3), 1, (x - 1) // 2, (x - 1) // 2)\n    elif x % 4 == 0:\n        print(*[1] * (k - 3), x // 4, x // 4, x // 2)\n    else:\n        print(*[1] * (k - 3), 2, (x - 2) // 2, (x - 2) // 2)", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\n\ndef split_three(n):\n    assert n % 2 == 0\n    if n % 4 == 0:\n        return [n // 4, n // 4, n // 2]\n    else:\n        return [2, n // 2 - 1, n // 2 - 1]\nt = read_int()\nfor case_num in range(t):\n    (n, k) = read_ints()\n    if (n - k) % 2 == 0:\n        ans = [1] * (k - 2) + [(n - k) // 2 + 1] * 2\n    else:\n        ans = [1] * (k - 3) + split_three(n - (k - 3))\n    print(' '.join(map(str, ans)))", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\n\ndef split_three(n):\n    if n % 2 == 1:\n        return [1, n // 2, n // 2]\n    elif n % 4 == 2:\n        return [2, n // 2 - 1, n // 2 - 1]\n    else:\n        return [n // 4, n // 4, n // 2]\nt = read_int()\nfor case_num in range(t):\n    (n, k) = read_ints()\n    ans = [1] * (k - 3) + split_three(n - (k - 3))\n    print(' '.join(map(str, ans)))", "nn = int(input())\nfor _ in range(nn):\n    (n, k) = [int(s) for s in input().split()]\n    n1 = n - k + 3\n    power = 0\n    while n1 % 2 == 0:\n        n1 /= 2\n        power += 1\n    n = n - k + 3\n    if n1 == 1:\n        print(' '.join(['1'] * (k - 3) + [str(n // 4), str(n // 4), str(n // 2)]))\n    else:\n        print(' '.join(['1'] * (k - 3) + [str(2 ** power), str((n - 2 ** power) // 2), str((n - 2 ** power) // 2)]))", "def solve(n):\n    if n % 2 == 1:\n        return [1, n // 2, n // 2]\n    if n % 4 == 0:\n        return [n // 2, n // 4, n // 4]\n    if n % 2 == 0:\n        return [2, n // 2 - 1, n // 2 - 1]\nt = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split(' '))\n    print((k - 3) * '1 ', *solve(n - k + 3), sep=' ')\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print((b - 3) * '1 ', end='')\n    a -= b - 3\n    if a % 4 == 0:\n        print(a // 2, a // 4, a // 4)\n    elif a % 2 == 0:\n        print(a // 2 - 1, a // 2 - 1, 2)\n    else:\n        print(a // 2, a // 2, 1)", "n = int(input())\nfor i in range(n):\n    (num, k) = map(int, input().split())\n    m = k - 3\n    num = num - m\n    if num % 2 == 0:\n        if num % 4 == 0:\n            print(num // 2, num // 4, num // 4, m * '1 ')\n        else:\n            print(2, (num - 2) // 2, (num - 2) // 2, m * '1 ')\n    else:\n        print(1, (num - 1) // 2, (num - 1) // 2, m * '1 ')", "n = int(input())\nfor i in range(n):\n    (num, k) = map(int, input().split())\n    m = k - 3\n    num = num - m\n    if num % 2 == 0:\n        if num % 4 == 0:\n            print(num // 2, num // 4, num // 4, m * '1 ')\n        else:\n            print(2, (num - 2) // 2, (num - 2) // 2, m * '1 ')\n    else:\n        print(1, (num - 1) // 2, (num - 1) // 2, m * '1 ')", "def sol(n):\n    if n % 2 == 0:\n        if n // 2 % 2 == 0:\n            print(n // 4, n // 4, n // 2)\n        else:\n            print(2, 2 * (n // 4), 2 * (n // 4))\n    else:\n        print(1, n // 2, n // 2)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print('1 ' * (k - 3), end='')\n    sol(n - k + 3)", "for _ in range(int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    c = []\n    for _ in range(k - 3):\n        c += [1]\n    n = n - (k - 3)\n    if n % 2 != 0:\n        c += [1, n // 2, n // 2]\n    elif n % 2 == 0 and n % 4 != 0:\n        c += [n // 2 - 1, n // 2 - 1, 2]\n    elif n % 4 == 0:\n        c += [n // 2, n // 2 // 2, n // 2 // 2]\n    print(' '.join(map(str, c)))", "import math\nt = int(input())\nwhile t != 0:\n    (n, k) = list(map(int, input().split()))\n    ans = None\n    t -= 1\n    ans = [1] * (k - 3)\n    n = n - (k - 3)\n    if n % 2 == 1:\n        ans.extend([n // 2, n // 2, 1])\n    elif n / 2 % 2 == 1:\n        ans.extend([(n - 1) // 2, (n - 1) // 2, 2])\n    else:\n        ans.extend([n // 2, n // 4, n // 4])\n    print(' '.join(map(str, ans)))", "import sys\n\ndef solve(n):\n    if n % 2 == 1:\n        return (1, n // 2, n // 2)\n    s = 0\n    t = n\n    while not t % 2:\n        t //= 2\n        s += 1\n    if t == 1:\n        return (2 ** (s - 1), 2 ** (s - 2), 2 ** (s - 2))\n    return (2 ** s, 2 ** s * (t // 2), 2 ** s * (t // 2))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = list(solve(n - k + 3)) + [1] * (k - 3)\n    print(' '.join((str(x) for x in ans)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    n -= k - 3\n    if n % 2:\n        print(n // 2, n // 2, 1, *[1 for i in range(k - 3)])\n    elif n % 4:\n        print(n // 2 - 1, n // 2 - 1, 2, *[1 for i in range(k - 3)])\n    else:\n        print(n // 2, n // 4, n // 4, *[1 for i in range(k - 3)])", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, a) = map(int, sys.stdin.readline().split())\n    ans = [1] * (a - 3)\n    num = n - (a - 3)\n    temp = []\n    if num == 3:\n        temp = [1, 1, 1]\n    else:\n        k = num // 4\n        if num % 4 == 0:\n            temp = [k, k, 2 * k]\n        elif num % 4 == 1:\n            temp = [2 * k, 2 * k, 1]\n        elif num % 4 == 2:\n            temp = [2 * k, 2 * k, 2]\n        else:\n            temp = [2 * k + 1, 2 * k + 1, 1]\n    ans += temp\n    print(*ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (n, k) = M()\n\n    def solve(n):\n        a = []\n        if n % 2 == 1:\n            a = [n // 2, n // 2, 1]\n        elif n % 4 != 0:\n            a = [n // 2 - 1, n // 2 - 1, 2]\n        else:\n            a = [n // 4, n // 4, n // 2]\n        return a\n    print(*[1] * (k - 3) + solve(n - k + 3))", "def new(x):\n    if x % 2:\n        res = [x // 2, x // 2, 1]\n    elif (x - 2) % 4 == 0:\n        res = [(x - 2) // 2, (x - 2) // 2, 2]\n    else:\n        res = [x // 2, x // 4, x // 4]\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(j) for j in input().split()]\n    z = n - (k - 3)\n    print(' '.join((str(j) for j in new(z) + [1 for q in range(k - 3)])))", "from math import floor\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    x = []\n    if k > 3:\n        kn = k - 3\n        nn = n - kn\n    else:\n        nn = n\n    if nn % 2 == 0:\n        if nn / 2 % 2 == 0:\n            x.append(int(nn / 2))\n            x.append(int(nn / 2 / 2))\n            x.append(int(nn / 2 / 2))\n        else:\n            x.append(2)\n            x.append(int(nn / 2 - 1))\n            x.append(int(nn / 2 - 1))\n    else:\n        x.append(1)\n        x.append(floor(nn / 2))\n        x.append(floor(nn / 2))\n    if k > 3:\n        for ii in range(kn):\n            x.append(1)\n    print(' '.join(map(str, x)))", "from math import floor\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    x = []\n    if k > 3:\n        kn = k - 3\n        nn = n - kn\n    else:\n        nn = n\n    if nn % 2 == 0:\n        if nn / 2 % 2 == 0:\n            x.append(int(nn / 2))\n            x.append(int(nn / 2 / 2))\n            x.append(int(nn / 2 / 2))\n        else:\n            x.append(2)\n            x.append(int(nn / 2 - 1))\n            x.append(int(nn / 2 - 1))\n    else:\n        x.append(1)\n        x.append(floor(nn / 2))\n        x.append(floor(nn / 2))\n    if k > 3:\n        for ii in range(kn):\n            x.append(1)\n    print(' '.join(map(str, x)))", "import sys\nimport math\nimport bisect\nimport collections\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inplist():\n    return list(map(int, input().split()))\n\ndef inpstrlist():\n    s = input()\n    return list(s[:len(s)])\n\ndef invr():\n    return map(int, input().split())\n\ndef printlist(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\n\ndef solve(n):\n    if n % 2 == 0:\n        if n % 4 == 0:\n            return [n // 2, n // 4, n // 4]\n        else:\n            x = n // 2 - 1\n            return [x, x, 2]\n    else:\n        x = n // 2\n        return [x, x, 1]\nt = int(input())\nfor _ in range(t):\n    (n, k) = invr()\n    arr = solve(n - k + 3)\n    for i in range(k):\n        if i >= 3:\n            arr.append(1)\n    print(*arr)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rest = k - 3\n    newN = n - rest\n    if newN % 2 == 1:\n        print(1, newN // 2, newN // 2, ' '.join(map(str, [1] * rest)))\n    elif newN % 2 == 0:\n        print(newN // 2 - 1, newN // 2 - 1, 2, ' '.join(map(str, [1] * rest))) if newN % 4 != 0 else print(newN // 2, newN // 4, newN // 4, ' '.join(map(str, [1] * rest)))", "def nr():\n    return int(input())\n\ndef nrs():\n    return [int(item) for item in input().split()]\n\ndef p(s):\n    print(s, end='')\nfor _ in range(nr()):\n    (n, k) = nrs()\n    if k > 3:\n        p('1 ' * (k - 3))\n        n -= k - 3\n    h = n // 2\n    if n % 2 == 1:\n        p(f'{h} {h} 1')\n    elif h % 2 == 0:\n        p(f'{h} {h // 2} {h // 2}')\n    else:\n        p(f'{h - 1} {h - 1} 2')\n    print('')", "T = int(input())\n\ndef solve(N, K):\n    if K == 3:\n        if N % 2 == 1:\n            return [(N - 1) // 2, (N - 1) // 2, 1]\n        elif N % 4 == 2:\n            return [(N - 2) // 2, (N - 2) // 2, 2]\n        elif N % 4 == 0:\n            return [N // 2, N // 4, N // 4]\n    return solve(N - (K - 3), 3) + [1] * (K - 3)\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    print(' '.join(map(str, solve(N, K))))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    n -= k - 3\n    ans = []\n    if n == 4:\n        ans = [1, 1, 2]\n    elif n % 2 == 0:\n        if n // 2 % 2 == 0:\n            ans = [n // 2, n // 4, n // 4]\n        else:\n            ans = [n // 2 - 1, n // 2 - 1, 2]\n    else:\n        ans = [1, n // 2, n // 2]\n    ans.extend([1 for i in range(k - 3)])\n    print(' '.join((str(i) for i in ans)))", "from math import floor\n\ndef lcm(n, k):\n    x = k - 3\n    y = n - k + 3\n    if y % 2 != 0:\n        return [1, floor(y / 2), floor(y / 2)] + list([1] * x)\n    elif y % 2 == 0 and y % 4 != 0:\n        return [y // 2 - 1, y // 2 - 1, 2] + list([1] * x)\n    else:\n        return [y // 2, y // 4, y // 4] + list([1] * x)\nt = int(input())\nanswer = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    answer.append(lcm(n, k))\nfor i in answer:\n    print(*i)", "import sys\nfrom collections import *\nfrom heapq import *\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline()\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    for _ in range(k - 3):\n        print(1, end=' ')\n        n -= 1\n        k -= 1\n    if n % 2 == 1:\n        print(1, n // 2, n // 2)\n    elif n % 4 == 0:\n        print(n // 2, n // 4, n // 4)\n    else:\n        print(2, n // 2 - 1, n // 2 - 1)", "import sys, math\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    n = n - m + 3\n    ans = []\n    if n % 3 == 0:\n        ans.append(n // 3)\n        ans.append(n // 3)\n        ans.append(n // 3)\n    elif n % 4 == 0:\n        ans.append(n // 2)\n        ans.append(n // 4)\n        ans.append(n // 4)\n    elif n % 2 == 0:\n        print(n // 2 - 1, n // 2 - 1, 2)\n    else:\n        ans.append(n // 2)\n        ans.append(n // 2)\n        ans.append(1)\n    for i in range(m - 3):\n        ans.append(1)\n    print(' '.join(map(str, ans)))", "def process(n):\n    d = 1\n    while n % 2 == 0:\n        d *= 2\n        n = n // 2\n    if n > 1:\n        return [d, d * (n - 1) // 2, d * (n - 1) // 2]\n    elif d >= 2:\n        return [d // 2, d // 4, d // 4]\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    if k == 3:\n        answer = process(n)\n        print(' '.join(map(str, answer)))\n    else:\n        answer = []\n        while k > 3:\n            answer.append(1)\n            n -= 1\n            k -= 1\n        answer = answer + process(n)\n        print(' '.join(map(str, answer)))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    carry = 0\n    out = []\n    if k > 3:\n        out += [1] * (k - 3)\n        n -= k - 3\n    if n & 1:\n        n -= 1\n        carry = 1\n        (a, b, c) = (n // 2, n // 2, 1)\n        out += [a, b, c]\n        print(*out)\n        continue\n    elif n % 4 != 0:\n        n -= 2\n        carry += 2\n        (a, b, c) = (n // 2, n // 2, 2)\n        out += [a, b, c]\n        print(*out)\n        continue\n    a = n // 2\n    n = a\n    b = a // 2\n    c = a // 2\n    out += [a, b, c]\n    print(*out)\n    continue", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n = n - (k - 3)\n    if n == 0:\n        print()\n        continue\n    if n % 2 == 0:\n        if n % 4 == 0:\n            print(n // 2, n // 4, n // 4)\n        else:\n            print(n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(n // 2, n // 2, 1)", "def ss(n):\n    for i in range(1, 1 + n ** 0.5):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [1 for _ in range(k)]\n    n -= k - 3\n    if n % 2 == 0:\n        if n % 4 == 0:\n            ans[0] = n // 2\n            ans[1] = n // 4\n            ans[2] = n // 4\n        else:\n            ans[0] = 2\n            ans[1] = n // 2 - 1\n            ans[2] = n // 2 - 1\n    else:\n        ans[0] = n // 2\n        ans[1] = n // 2\n    print(*ans)", "import math\nimport sys\nimport collections\nimport bisect\nimport time\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, k) = get_ints()\n    ans = []\n    while k > 3:\n        ans.append(1)\n        k -= 1\n        n -= 1\n    if n % 2 == 0:\n        if n % 4 == 0:\n            ans.append(n // 2)\n            ans.append(n // 4)\n            ans.append(n // 4)\n        else:\n            ans.append(n // 2 - 1)\n            ans.append(n // 2 - 1)\n            ans.append(2)\n    else:\n        ans.append(1)\n        ans.append((n - 1) // 2)\n        ans.append((n - 1) // 2)\n    print(*ans)", "def answer():\n    if n & 1:\n        return [1] * (k - 3) + [n // 2, n // 2, 1]\n    elif n // 2 & 1 == 0:\n        return [1] * (k - 3) + [n // 2, n // 4, n // 4]\n    else:\n        return [1] * (k - 3) + [2, n // 2 - 1, n // 2 - 1]\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    n -= k - 3\n    print(*answer())", "import sys\nimport collections\nfrom copy import copy, deepcopy\nfrom typing import OrderedDict\nimport heapq\n\nclass Solution:\n\n    def trim(self):\n        return input()\n\n    def rInt(self):\n        return int(self.trim())\n\n    def rStr(self):\n        return str(self.trim())\n\n    def rCharList(self):\n        s = self.trim()\n        return list(s[:len(s) - 1])\n\n    def rIntMap(self):\n        return map(int, self.trim().split())\n\n    def rIntList(self):\n        return list(self.rIntMap())\n\n    def rStrList(self):\n        return list(map(str, self.trim().split()))\n\n    def process(self, tc, n, k):\n        res = []\n        while k > 3:\n            res.append(1)\n            n -= 1\n            k -= 1\n\n        def last(n):\n            if n & n - 1 == 0:\n                return [n // 4, n // 4, n // 2]\n            x = n & -n\n            return [x, (n - x) // 2, (n - x) // 2]\n        res += last(n)\n        print(' '.join(map(str, res)))\n\ndef main():\n    s = Solution()\n    tcs = s.rInt()\n    for tc in range(tcs):\n        (n, k) = s.rIntList()\n        s.process(tc + 1, n, k)\nmain()", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = [1] * (k - 3)\n    n -= k - 3\n    a = n // 2\n    if n % 2:\n        x.append(1)\n        x.append(a)\n        x.append(a)\n    elif a % 2:\n        x.append(2)\n        x.append(a - 1)\n        x.append(a - 1)\n    else:\n        x.append(a // 2)\n        x.append(a // 2)\n        x.append(a)\n    print(*x)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "for t in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ans = [1] * (k - 3)\n    n = n - k + 3\n    if n % 2 == 1:\n        print(*ans, 1, n // 2, n // 2)\n    elif n % 4 == 0:\n        print(*ans, n // 2, n // 4, n // 4)\n    else:\n        print(*ans, n // 2 - 1, n // 2 - 1, 2)", "def LCM(n):\n    result = []\n    if n % 4 == 0:\n        result.append(n // 2)\n        result.append(n // 4)\n        result.append(n // 4)\n    elif n % 4 == 2:\n        n = n - 2\n        result.append(2)\n        result.append(n // 2)\n        result.append(n // 2)\n    elif n % 4 == 1 or n % 4 == 3:\n        n = n - 1\n        result.append(1)\n        result.append(n // 2)\n        result.append(n // 2)\n    return result\nfor i in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    out = []\n    if k == 3:\n        out = LCM(n)\n        print(*out)\n    else:\n        for i in range(k - 3):\n            out.append(1)\n            n -= 1\n        out = out + LCM(n)\n        print(*out)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n = n - (k - 3)\n    if n == 0:\n        print()\n        continue\n    if n % 2:\n        print(n // 2, n // 2, 1)\n    elif n % 4:\n        print(n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(n // 2, n // 4, n // 4)\n    print()", "t = eval(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n = n - k + 3\n    if n % 2 != 0:\n        print(1, int(n // 2), int(n // 2))\n    else:\n        x = n // 2\n        if x % 2 != 0:\n            print(2, int(n // 2 - 1), int(n // 2 - 1))\n        else:\n            print(int(x // 2), int(x // 2), int(x))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n -= k\n    n += 3\n    if n % 4 == 0:\n        print(n // 2, n // 4, n // 4)\n    elif n % 2 == 0:\n        print(2, n // 2 - 1, n // 2 - 1)\n    else:\n        print(1, n // 2, n // 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    t = k - 3\n    while t:\n        print(1, end=' ')\n        t -= 1\n    n -= k - 3\n    if n % 2:\n        print(n // 2, n // 2, 1)\n    elif n // 2 % 2:\n        print(n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(n // 2, n // 4, n // 4)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    n = n - (k - 3)\n    for i in range(k - 3):\n        print(1, end=' ')\n    if n % 2:\n        print(n // 2, n // 2, 1)\n    elif n % 4 == 0:\n        print(n // 4, n // 4, n // 2)\n    else:\n        print(n // 2 - 1, n // 2 - 1, 2)\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "import math\n\ndef lcm(a):\n    lcm = a[0]\n    for i in range(1, len(a)):\n        lcm = lcm * a[i] // math.gcd(lcm, a[i])\n    return lcm\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    z = [1] * (k - 3)\n    n = n - (k - 3)\n    if n % 2 != 0:\n        print(*z, 1, math.floor(n / 2), math.floor(n / 2))\n    elif n % 2 == 0 and n % 4 == 0:\n        print(*z, n // 2, n // 4, n // 4)\n    elif n % 2 == 0 and n % 4 != 0:\n        print(*z, 2, (n - 2) // 2, (n - 2) // 2)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ans = [1] * (m - 3)\n    n -= m - 3\n    if n % 3 == 0:\n        p = [n // 3, n // 3, n // 3]\n    elif n % 2 == 1:\n        p = [1, n // 2, n // 2]\n    else:\n        ta = n // 2\n        if ta % 2 == 0:\n            p = [ta, ta // 2, ta // 2]\n        else:\n            p = [ta - 1, ta - 1, 2]\n    ans += p\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    oneCount = k - 3\n    ans = [1] * oneCount\n    n -= oneCount\n    k = 3\n    if n % 2 == 0:\n        if n % 4 == 0:\n            ans.extend([n // 2, n // 4, n // 4])\n        else:\n            ans.extend([n // 2 - 1, n // 2 - 1, 2])\n    else:\n        ans.extend([(n - 1) // 2, (n - 1) // 2, 1])\n    print(*ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    ip = input()\n    (n, k) = (int(ip.split()[0]), int(ip.split()[1]))\n    ans = []\n    if k > 3:\n        while k - 3 > 0:\n            ans.append(1)\n            k -= 1\n            n -= 1\n    if n % 2 == 1:\n        temp = [n // 2, n // 2, 1]\n        ans += temp\n    elif n % 4 == 0:\n        temp = [n // 2, n // 4, n // 4]\n        ans += temp\n    else:\n        temp = [n // 2 - 1, n // 2 - 1, 2]\n        ans += temp\n    print(*ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [1] * (k - 3)\n    n = n - k + 3\n    if n % 2 == 1:\n        ans += [1] + [(n - 1) // 2] * 2\n    elif n % 2 == 0 and n % 4 != 0:\n        ans += [2] + [(n - 2) // 2] * 2\n    else:\n        ans += [n // 2] + [n // 4] * 2\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n -= k\n    n += 3\n    if n % 4 == 0:\n        print(n // 2, n // 4, n // 4)\n    elif n % 2 == 0:\n        print(2, n // 2 - 1, n // 2 - 1)\n    else:\n        print(1, n // 2, n // 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [1] * (k - 3)\n    n -= k - 3\n    res = []\n    if n & 1:\n        res = [1, (n - 1) // 2, (n - 1) // 2]\n    elif n % 4 == 0:\n        res = [n // 4, n // 4, n // 2]\n    else:\n        res = [2, (n - 2) // 2, (n - 2) // 2]\n    l = l + res\n    print(*l)", "import sys\n\ndef getInput():\n    return sys.stdin.readline().strip()\n\ndef getInt():\n    return int(getInput())\n\ndef getInts():\n    return map(int, getInput().split())\n\ndef getArray():\n    return list(getInts())\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = [1] * (k - 3)\n    sumv = sum(li)\n    n -= sumv\n    if n % 4 == 0:\n        li.extend([n // 2, n // 4, n // 4])\n    elif n % 2 == 0:\n        li.extend([n // 2 - 1, n // 2 - 1, 2])\n    else:\n        li.extend([n // 2, n // 2, 1])\n    print(*li)", "def processing():\n    (n, k) = [int(x) for x in input().split()]\n    if k > 3:\n        for i in range(k - 3):\n            print('1', end=' ')\n        n = n - (k - 3)\n        k = 3\n    if n % 2 == 1:\n        print(1, n // 2, n // 2, sep=' ', end='\\n')\n    elif n % 4 == 0:\n        print(n // 2, n // 2 // 2, n // 2 // 2, sep=' ', end='\\n')\n    else:\n        print(2, (n - 2) // 2, (n - 2) // 2, sep=' ', end='\\n')\nt = int(input())\nfor i in range(t):\n    processing()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    x = [1] * (m - 3)\n    n = n - (m - 3)\n    if n % 4 == 0:\n        x.append(n // 2)\n        x.append(n // 4)\n        x.append(n // 4)\n    elif n % 4 == 1 or n % 4 == 3:\n        x.append(1)\n        x.append((n - 1) // 2)\n        x.append((n - 1) // 2)\n    else:\n        x.append(2)\n        x.append((n - 2) // 2)\n        x.append((n - 2) // 2)\n    print(*x)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    n -= m - 3\n    if n % 2 == 1:\n        print(1, (n - 1) // 2, (n - 1) // 2, end=' ')\n    elif n % 4 == 0:\n        c = n // 4\n        print(c * 2, c, c, end=' ')\n    else:\n        print(2, (n - 2) // 2, (n - 2) // 2, end=' ')\n    for k in range(m - 3):\n        print(1, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    n -= k - 3\n    k = k - 3\n    l = [1] * k\n    if n % 2 == 0:\n        n1 = n // 2\n        if n1 % 2 != 0:\n            re = [2, n1 - 1, n1 - 1]\n        else:\n            re = [n1 // 2, n1, n1 // 2]\n    elif n % 2 != 0:\n        n1 = n // 2\n        re = [n // 2, n // 2, 1]\n    print(*l, *re)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = []\n    if (n - k + 3) % 2 == 0:\n        ans.append((n - k + 3) // 2)\n        ans.append((n - k + 3) // 2)\n        if (n - k + 3) % 4 == 0:\n            ans.append(ans[0] // 2)\n            ans.append(ans[0] // 2)\n            ans = ans[1:]\n        else:\n            ans[0] -= 1\n            ans[1] -= 1\n            ans.append(2)\n    else:\n        ans.append(1)\n        ans.append((n - k + 2) // 2)\n        ans.append((n - k + 2) // 2)\n    ans2 = [1] * (k - 3) + ans\n    print(*ans2, sep=' ')", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nlx = lambda x: map(int, input().split(x))\nfrom math import log10, log2, ceil, factorial as f, gcd\n\ndef f(n):\n    if n % 2:\n        l = [1, n // 2, n // 2]\n    elif n % 4 == 0:\n        l = [n // 2, n // 4, n // 4]\n    else:\n        l = [(n - 1) // 2, (n - 1) // 2, 2]\n    return l\nfor _ in range(t()):\n    (n, k) = ll()\n    p = (k - 3) * [1] + f(n - (k - 3))\n    print(*p)", "def solve(n) -> list:\n    if n & 1:\n        return [1, n // 2, n // 2]\n    elif n // 2 & 1:\n        return [n // 2 - 1, n // 2 - 1, 2]\n    else:\n        return [n // 2, n // 4, n // 4]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().strip().split())\n    a = [1] * (k - 3)\n    n = n - (k - 3)\n    print(*a, ' '.join((str(x) for x in solve(n))))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "def solve():\n    (n, k) = map(int, input().split(' '))\n    ones = k - 3\n    for i in range(ones):\n        print(1, end=' ')\n    n -= ones\n    if n % 3 == 0:\n        print(n // 3, n // 3, n // 3)\n    elif n == 4:\n        print(1, 1, 2)\n    elif n & 1 == 1:\n        print(n >> 1, n >> 1, 1)\n    elif n & 3 == 0:\n        print(n >> 1, n >> 2, n >> 2)\n    elif n & 1 == 0:\n        test = n - 2 >> 1\n        if test & 1 == 0:\n            print(test, test, 2)\n        else:\n            print(n - 4 >> 1, n - 4 >> 1, 4)\nt = int(input())\nfor _ in range(t):\n    solve()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if n % 2 == 1:\n        print(*a, n // 2, n // 2, 1)\n    elif n % 4 == 0:\n        print(*a, n // 2, n // 4, n // 4)\n    else:\n        print(*a, (n - 2) // 2, (n - 2) // 2, 2)", "def find3(n):\n    if n % 2 == 1:\n        return (1, n // 2, n // 2)\n    elif n % 4 == 2:\n        return (2, n // 2 - 1, n // 2 - 1)\n    else:\n        return (n // 4, n // 4, n // 2)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(*[1] * (k - 3), *find3(n - k + 3))", "def func(n):\n    if n % 2 != 0:\n        lst = [1, n // 2, n // 2]\n    elif n % 2 == 0 and n % 4 != 0:\n        lst = [n // 2 - 1, n // 2 - 1, 2]\n    else:\n        lst = [n // 2, n // 4, n // 4]\n    return lst\n\ndef func2():\n    lst = func(n - k + 3)\n    rem = k - 3\n    lst += [1] * rem\n    print(*lst)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    func2()", "for i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    oneCnt = k - 3\n    ans = [1 for i in range(k - 3)]\n    rem = n - k + 3\n    if rem & 1:\n        ans += [1, rem // 2, rem // 2]\n    elif rem % 4:\n        ans += [2, rem // 2 - 1, rem // 2 - 1]\n    else:\n        ans += [rem // 2, rem // 4, rem // 4]\n    print(*ans)", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(4, k + 1):\n        print('1', end=' ')\n        n -= 1\n    if n % 2:\n        print(1, (n - 1) // 2, (n - 1) // 2)\n    elif n % 4:\n        print(2, (n - 2) // 2, (n - 2) // 2)\n    else:\n        print(n // 2, n // 4, n // 4)", "def solve(n):\n    if n % 3 == 0:\n        print(n // 3, n // 3, n // 3)\n    elif n % 3 == 1:\n        if n & 1:\n            print(1, (n - 1) // 2, (n - 1) // 2)\n        elif n % 4 == 0:\n            n //= 2\n            print(n, n // 2, n // 2)\n        else:\n            n -= 2\n            print(2, n // 2, n // 2)\n    elif n & 1:\n        n -= 1\n        print(1, n // 2, n // 2)\n    elif n % 4 == 0:\n        n //= 2\n        print(n, n // 2, n // 2)\n    else:\n        n -= 2\n        print(2, n // 2, n // 2)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [1] * (k - 3)\n    if k - 3 != 0:\n        print(*l, end=' ')\n    n -= k - 3\n    solve(n)", "def func(n):\n    rem = n % 2\n    if rem == 1:\n        ans = [n // 2, n // 2, 1]\n    elif n % 4 == 0:\n        ans = [n // 2, n // 4, n // 4]\n    else:\n        a = n // 2 - 1\n        ans = [a, a, n - 2 * a]\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    ans = [1] * k\n    n -= k - 3\n    (ans[0], ans[1], ans[2]) = func(n)\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lis = [1] * (k - 3)\n    n -= k - 3\n    if n % 4 == 0:\n        lis.extend([n // 2, n // 4, n // 4])\n    elif n % 2 == 0:\n        lis.extend([n // 2 - 1, n // 2 - 1, 2])\n    else:\n        lis.extend([n // 2, n // 2, 1])\n    print(*lis)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n = n - (k - 3)\n    p = n // 2\n    if n % 2 == 0:\n        if p % 2 == 0:\n            print(p // 2, p // 2, p)\n            continue\n        print(2, p - 1, p - 1)\n    else:\n        print(1, p, p)", "import sys, os.path\nif os.path.exists('amz42.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (n, k) = [int(x) for x in input().split(' ')]\n    for i in range(k - 3):\n        print(1, end=' ')\n        n -= 1\n    if n & 1:\n        print(1, n // 2, n // 2)\n    elif n // 2 & 1:\n        print(n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(n // 2, n // 4, n // 4)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1] * (k - 3)\n    n -= k - 3\n    if not n % 4:\n        print(*a, n // 2, n // 4, n // 4)\n    elif not n % 2:\n        print(*a, n // 2 - 1, n // 2 - 1, 2)\n    else:\n        print(*a, n // 2, n // 2, 1)", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    ans = [1] * (m - 3)\n    n -= m - 3\n    if n % 3 == 0:\n        p = [n // 3, n // 3, n // 3]\n    elif n % 2 == 1:\n        p = [1, n // 2, n // 2]\n    else:\n        ta = n // 2\n        if ta % 2 == 0:\n            p = [ta, ta // 2, ta // 2]\n        else:\n            p = [ta - 1, ta - 1, 2]\n    ans = ans + p\n    print(*ans)", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    ans = [1] * (m - 3)\n    n = n - (m - 3)\n    if n % 3 == 0:\n        p = [n // 3, n // 3, n // 3]\n    elif n % 2 == 1:\n        p = [1, n // 2, n // 2]\n    elif n // 2 % 2 == 0:\n        p = [n // 2, n // 4, n // 4]\n    else:\n        p = [n // 2 - 1, n // 2 - 1, 2]\n    ans = ans + p\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    for i in range(k - 3):\n        print(1, end=' ')\n    n -= k\n    n += 3\n    if n % 4 == 0:\n        print(n // 2, n // 4, n // 4)\n    elif n % 2 == 0:\n        print(2, n // 2 - 1, n // 2 - 1)\n    else:\n        print(1, n // 2, n // 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = []\n    n -= k - 3\n    if n < 3:\n        ans = [n]\n    elif n % 3 == 0:\n        ans = [n // 3] * 3\n    elif n % 2 == 1:\n        ans = [1]\n        ans.extend([(n - 1) // 2] * 2)\n    elif (n - 2) // 2 % 2 == 0:\n        ans = [2]\n        ans.extend([(n - 2) // 2] * 2)\n    else:\n        ans = [n // 4, n // 4, n // 2]\n    ans.extend([1] * (k - 3))\n    print(*ans)", "def three(n):\n    if n % 2 == 0:\n        a = n // 2\n        b = a // 2\n        if a % 2 == 1:\n            b = 2\n            a -= 1\n            return (a, a, b)\n        return (a, b, b)\n    else:\n        a = n // 2\n        return (a, a, 1)\nfor tt in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(*three(n - k + 3), end=' ')\n    for i in range(k - 3):\n        print(1, end=' ')\n    print()", "def nr():\n    return int(input())\n\ndef nrs():\n    return [int(item) for item in input().split()]\nfor _ in range(nr()):\n    (n, k) = nrs()\n    r = []\n    if k > 3:\n        r = [1] * (k - 3)\n        n -= k - 3\n    h = n // 2\n    if n % 2 == 1:\n        r += [h, h, 1]\n    elif h % 2 == 0:\n        r += [h, h // 2, h // 2]\n    else:\n        r += [h - 1, h - 1, 2]\n    print(*r)", "def gcd(a, b):\n    x = max(a, b)\n    y = min(a, b)\n    c = x % y\n    while c != 0:\n        (x, y) = (y, c)\n        c = x % y\n    return y\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    res = []\n    for i in range(k - 3):\n        res.append(1)\n    n = n - k + 3\n    if n % 2 == 1:\n        res.append(1)\n        res.append((n - 1) // 2)\n        res.append((n - 1) // 2)\n    elif n % 4 == 2:\n        res.append(2)\n        res.append((n - 2) // 2)\n        res.append((n - 2) // 2)\n    else:\n        res.append(n // 2)\n        res.append(n // 4)\n        res.append(n // 4)\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    for i in range(k - 3):\n        print(1, end=' ')\n    n = n - k + 3\n    if n % 2 == 1:\n        a = 1\n        b = (n - 1) // 2\n        c = b\n    elif n % 4 == 0:\n        a = n // 2\n        b = n // 4\n        c = b\n    else:\n        a = 2\n        b = n // 2 - 1\n        c = b\n    print(a, end=' ')\n    print(b, end=' ')\n    print(c, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = []\n    while k > 3:\n        c.append(1)\n        k -= 1\n        n -= 1\n    if n % 2 != 0:\n        for i in range(2):\n            c.append(n // 2)\n        c.append(1)\n    elif n % 4 == 0:\n        for i in range(2):\n            c.append(n // 4)\n        c.append(n // 2)\n    else:\n        for i in range(2):\n            c.append((n - 1) // 2)\n        c.append(2)\n    print(*c, sep=' ')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    ans = []\n    if k > 3:\n        for i in range(k - 3):\n            ans.append(1)\n        n -= k - 3\n    if n % 2 == 0:\n        if n / 2 % 2 == 0:\n            ans.append(n // 2)\n            ans.append(n // 4)\n            ans.append(n // 4)\n        else:\n            ans.append(n // 2 - 1)\n            ans.append(n // 2 - 1)\n            ans.append(2)\n    if n % 2 == 1:\n        ans.append((n - 1) // 2)\n        ans.append((n - 1) // 2)\n        ans.append(1)\n    print(*ans)"]