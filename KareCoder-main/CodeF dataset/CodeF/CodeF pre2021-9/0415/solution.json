["t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    r = s.count('R')\n    p = s.count('P')\n    s = s.count('S')\n    if max(r, p, s) == r:\n        ans = 'P' * l\n    elif max(r, p, s) == p:\n        ans = 'S' * l\n    else:\n        ans = 'R' * l\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    string = input()\n    (R, P, S) = (string.count('R'), string.count('P'), string.count('S'))\n    if max(R, S, P) == R:\n        print('P' * len(string))\n    elif max(R, S, P) == P:\n        print('S' * len(string))\n    else:\n        print('R' * len(string))", "from collections import Counter\nn = int(input())\nvet = []\nfor _ in range(n):\n    inp = input()\n    res = Counter(inp)\n    aux = res.most_common()\n    if aux[0][0] == 'P':\n        vet.append('S' * len(inp))\n    elif aux[0][0] == 'R':\n        vet.append('P' * len(inp))\n    elif aux[0][0] == 'S':\n        vet.append('R' * len(inp))\nprint(*vet, sep='\\n')", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(s):\n    d = {'R': 'P', 'S': 'R', 'P': 'S'}\n    (rr, ss, pp) = (0, 0, 0)\n    for i in s:\n        if i == 'R':\n            rr += 1\n        if i == 'S':\n            ss += 1\n        if i == 'P':\n            pp += 1\n    maxx = max(rr, ss, pp)\n    if rr == maxx:\n        print(d['R'] * len(s))\n    elif ss == maxx:\n        print(d['S'] * len(s))\n    elif pp == maxx:\n        print(d['P'] * len(s))\nfor _ in range(int(input())):\n    s = str(input())[:-1]\n    solve(s)", "n = int(input())\nfor i in range(n):\n    s = input()\n    (R, S, P) = (0, 0, 0)\n    for i in s:\n        if i == 'R':\n            R += 1\n        elif i == 'S':\n            S += 1\n        else:\n            P += 1\n    if R >= S and R >= P:\n        print('P' * len(s))\n    elif S >= P:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "import sys\nimport math\ncases = int(input())\nwhile cases > 0:\n    s = input()\n    (rc, pc, sc) = (0, 0, 0)\n    for e in s:\n        if e == 'S':\n            sc += 1\n        elif e == 'P':\n            pc += 1\n        else:\n            rc += 1\n    n = len(s)\n    if rc >= pc and rc >= sc:\n        ans = ''.join(['P' for e in range(n)])\n    elif pc >= rc and pc >= sc:\n        ans = ''.join(['S' for e in range(n)])\n    else:\n        ans = ''.join(['R' for e in range(n)])\n    print(ans)\n    cases -= 1", "from collections import Counter\n\ndef func():\n    freq = Counter(s)\n    n = len(s)\n    ch = max(freq, key=freq.get)\n    if ch == 'R':\n        ans = 'P' * n\n    elif ch == 'P':\n        ans = 'S' * n\n    else:\n        ans = 'R' * n\n    print(ans)\nfor _ in range(int(input())):\n    s = list(input())\n    func()", "for _ in range(int(input())):\n    s = input()\n    ss = list(s)\n    rcount = ss.count('R')\n    scount = ss.count('S')\n    pcount = ss.count('P')\n    mymax = max(pcount, scount, rcount)\n    if mymax == rcount:\n        print('P' * len(s))\n    elif mymax == scount:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "for _ in range(int(input())):\n    s = input()\n    i = max(s.count('R'), max(s.count('S'), s.count('P')))\n    if i == s.count('R'):\n        print('P' * len(s))\n    elif i == s.count('P'):\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    r = s.count('R')\n    p = s.count('P')\n    si = s.count('S')\n    m = max(r, p, si)\n    if r == m:\n        print('P' * n)\n    elif p == m:\n        print('S' * n)\n    else:\n        print('R' * n)", "t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    m = 0\n    for each in set(s):\n        if s.count(each) > m:\n            m = s.count(each)\n            x = each\n    if x == 'R':\n        print('P' * l)\n    elif x == 'S':\n        print('R' * l)\n    elif x == 'P':\n        print('S' * l)", "def win(s):\n    l = len(s)\n    r = s.count('R')\n    S = s.count('S')\n    p = s.count('P')\n    m = max(r, S, p)\n    if r == m:\n        return 'P' * l\n    if S == m:\n        return 'R' * l\n    else:\n        return 'S' * l\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(win(s))", "for _ in range(int(input())):\n    t = input()\n    (r, s, p) = (t.count('R'), t.count('S'), t.count('P'))\n    b = max(r, s, p)\n    a = 'P' if r == b else 'R' if s == b else 'S'\n    print(a * len(t))", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\nt = int(input())\nfor ii in range(t):\n    s = input()\n    c = Counter(s)\n    a = list(c.keys())[0]\n    for (i, j) in c.items():\n        if j > c[a]:\n            a = i\n    ans = 'P' if a == 'R' else 'R' if a == 'S' else 'S'\n    print(ans * len(s))", "for i in range(int(input())):\n    s = input()\n    countR = 0\n    countS = 0\n    countP = 0\n    for j in s:\n        if j == 'R':\n            countP += 1\n        elif j == 'S':\n            countR += 1\n        else:\n            countS += 1\n    if countP == max(countR, countS, countP):\n        print('P' * len(s))\n    elif countR == max(countR, countS, countP):\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "from collections import Counter\nn = int(input())\nfor case in range(n):\n    game = [s for s in input()]\n    counter_g = Counter(game)\n    r_qtt = counter_g['R']\n    p_qtt = counter_g['P']\n    s_qtt = counter_g['S']\n    if r_qtt >= p_qtt and r_qtt >= s_qtt:\n        print('P' * len(game))\n    elif p_qtt >= s_qtt and p_qtt >= r_qtt:\n        print('S' * len(game))\n    elif s_qtt >= p_qtt and s_qtt >= r_qtt:\n        print('R' * len(game))", "k = int(input())\nfor c in range(k):\n    l = [i for i in input()]\n    total = {'R': 0, 'P': 0, 'S': 0}\n    for i in l:\n        total[i] += 1\n    mais_aparece = max(total, key=total.get)\n    otimo = {'R': 'P', 'P': 'S', 'S': 'R'}\n    resposta = ''.join([otimo[mais_aparece]] * len(l))\n    print(resposta)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    c = ''\n    dic = {}\n    for i in s:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    m = 0\n    x = ''\n    for i in dic:\n        if dic[i] > m:\n            m = dic[i]\n            x = i\n    if x == 'R':\n        c = 'P' * n\n    if x == 'P':\n        c = 'S' * n\n    if x == 'S':\n        c = 'R' * n\n    print(c)", "t = int(input())\ncases = []\nfor _ in range(t):\n    cases.append(list(input()))\nfor c in cases:\n    m = {'R': 0, 'P': 0, 'S': 0}\n    for i in range(len(c)):\n        m[c[i]] += 1\n    maxi = max(m, key=m.get)\n    if maxi == 'R':\n        print('P' * len(c))\n    elif maxi == 'P':\n        print('S' * len(c))\n    else:\n        print('R' * len(c))", "def solve(t):\n    r = t.count('R')\n    s = t.count('S')\n    p = t.count('P')\n    if r >= max(s, p):\n        return 'P' * len(t)\n    elif s >= max(r, p):\n        return 'R' * len(t)\n    else:\n        return 'S' * len(t)\nT = int(input())\nfor _ in range(T):\n    print(solve(input()))", "for _ in range(int(input())):\n    s = input()\n    l = len(s)\n    r = s.count('R')\n    si = s.count('S')\n    p = s.count('P')\n    if r >= si and r >= p:\n        print('P' * l)\n    elif si >= r and si >= p:\n        print('R' * l)\n    elif p >= si and p >= r:\n        print('S' * l)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    a = s.count('R')\n    b = s.count('P')\n    c = s.count('S')\n    m = max(a, max(b, c))\n    if m == a:\n        print('P' * n)\n    elif m == b:\n        print('S' * n)\n    else:\n        print('R' * n)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    a = s.count('P')\n    b = s.count('R')\n    c = s.count('S')\n    if b >= c and b >= a:\n        print('P' * n)\n    elif a >= b and a >= c:\n        print('S' * n)\n    else:\n        print('R' * n)", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    a = s.count('R')\n    b = s.count('P')\n    c = s.count('S')\n    if a >= b and a >= c:\n        print('P' * len(s))\n    elif b >= a and b >= c:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "for _ in range(int(input())):\n    s = input()\n    R = s.count('R')\n    S = s.count('S')\n    P = s.count('P')\n    if R >= S and R >= P:\n        print('P' * len(s))\n    elif S >= P:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "T = input()\nfor t in range(int(T)):\n    S = input()\n    maxOccurrence = 0\n    myChoices = ''\n    rCount = S.count('R')\n    sCount = S.count('S')\n    pCount = S.count('P')\n    if rCount >= sCount and rCount >= pCount:\n        maxOccurrence = 'R'\n    elif sCount >= rCount and sCount >= pCount:\n        maxOccurrence = 'S'\n    else:\n        maxOccurrence = 'P'\n    if maxOccurrence == 'R':\n        myChoices = 'P' * len(S)\n    elif maxOccurrence == 'S':\n        myChoices = 'R' * len(S)\n    else:\n        myChoices = 'S' * len(S)\n    print(myChoices)", "import sys\nprint = sys.stdout.write\ndic = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(int(input())):\n    s = input()\n    a = max(['R', 'P', 'S'], key=s.count)\n    print(dic[a] * len(s) + '\\n')", "numberOfTc = int(input())\nfor ctr in range(1, numberOfTc + 1):\n    a = input().strip()\n    rCount = a.count('R')\n    sCount = a.count('S')\n    pCount = a.count('P')\n    f = [rCount, sCount, pCount]\n    k = ['P', 'R', 'S']\n    ind = k[f.index(max(f))]\n    print(ind * len(a))", "def get_beating(x):\n    if x == 'R':\n        return 'P'\n    elif x == 'P':\n        return 'S'\n    else:\n        return 'R'\nfor _ in range(int(input())):\n    play = input()\n    output = ''\n    R = play.count('R')\n    S = play.count('S')\n    P = play.count('P')\n    if R >= S and R >= P:\n        print(len(play) * get_beating('R'))\n    elif S >= R and S >= P:\n        print(len(play) * get_beating('S'))\n    else:\n        print(len(play) * get_beating('P'))", "t = int(input())\nfor _ in range(t):\n    a = input()\n    r = a.count('R')\n    p = a.count('P')\n    s = a.count('S')\n    if r >= p and r >= s:\n        print('P' * len(a))\n    elif p >= r and p >= s:\n        print('S' * len(a))\n    elif s >= p and s >= r:\n        print('R' * len(a))", "for i in range(int(input())):\n    s = input()\n    R = s.count('R')\n    S = s.count('S')\n    P = s.count('P')\n    x = max(R, S, P)\n    if x == R:\n        print('P' * len(s))\n    elif x == S:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "from sys import stdin\nT = int(stdin.readline().strip())\nmp = dict()\nmp['R'] = 'P'\nmp['S'] = 'R'\nmp['P'] = 'S'\nfor caso in range(T):\n    s = stdin.readline().strip()\n    ans = ''\n    r = s.count('R')\n    s1 = s.count('S')\n    p = s.count('P')\n    n = len(s)\n    if r >= s1 and r >= p:\n        print('P' * n)\n    elif s1 >= r and s1 >= p:\n        print('R' * n)\n    else:\n        print('S' * n)", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    string = list(input())\n    n = len(string)\n    r = string.count('R')\n    p = string.count('P')\n    s = string.count('S')\n    if r >= max(p, s):\n        print('P' * n)\n    elif p >= max(r, s):\n        print('S' * n)\n    else:\n        print('R' * n)", "for i in range(int(input())):\n    n = input()\n    a = n.count('R')\n    b = n.count('S')\n    c = n.count('P')\n    l = len(n)\n    print((a >= b and a >= c) * l * 'P' + (b >= c and b > a) * l * 'R' + (c > a and c > b) * l * 'S')", "n = int(input())\nfor i in range(n):\n    s = input()\n    (R, S, P) = (0, 0, 0)\n    for c in s:\n        if c == 'R':\n            R += 1\n        if c == 'S':\n            S += 1\n        if c == 'P':\n            P += 1\n    m = max(R, S, P)\n    if R == m:\n        print('P' * len(s))\n    elif S == m:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "for _ in range(int(input())):\n    s = input()\n    cr = s.count('R')\n    cp = s.count('P')\n    cs = s.count('S')\n    if cr >= cp and cr >= cs:\n        print('P' * len(s))\n    elif cp >= cr and cp >= cs:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "for _ in range(int(input())):\n    s1 = input()\n    n = len(s1)\n    r = s1.count('R')\n    p = s1.count('P')\n    s = s1.count('S')\n    l = [r, p, s]\n    m = max(l)\n    i = l.index(m)\n    if i == 0:\n        print('P' * n)\n    elif i == 1:\n        print('S' * n)\n    else:\n        print('R' * n)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    R = s.count('R')\n    P = s.count('P')\n    S = s.count('S')\n    if R == max(R, P, S):\n        print('P' * len(s))\n    elif P == max(R, P, S):\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "for _ in range(int(input())):\n    s1 = input()\n    n = len(s1)\n    d = {'R': 'P', 'S': 'R', 'P': 'S'}\n    (r, s, p) = (s1.count('R'), s1.count('S'), s1.count('P'))\n    if r >= s and r >= p:\n        res = d['R'] * n\n    elif s >= r and s >= p:\n        res = d['S'] * n\n    elif p >= r and p >= s:\n        res = d['P'] * n\n    print(res)", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    cnt1 = s.count('R')\n    cnt2 = s.count('P')\n    cnt3 = s.count('S')\n    m = max(cnt1, cnt2, cnt3)\n    if m == cnt1:\n        print(n * 'P')\n    elif m == cnt2:\n        print(n * 'S')\n    else:\n        print(n * 'R')", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    cnt1 = s.count('R')\n    cnt2 = s.count('P')\n    cnt3 = s.count('S')\n    m = max(cnt1, cnt2, cnt3)\n    if m == cnt1:\n        print(n * 'P')\n    elif m == cnt2:\n        print(n * 'S')\n    else:\n        print(n * 'R')", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    (a, b, c) = (s.count('R'), s.count('P'), s.count('S'))\n    m = max(a, max(b, c))\n    if m == a:\n        print('P' * n)\n    elif m == b:\n        print('S' * n)\n    else:\n        print('R' * n)", "n = int(input())\nwhile n > 0:\n    n -= 1\n    s = input()\n    l = len(s)\n    r = sc = p = 0\n    r = s.count('R')\n    sc = s.count('S')\n    p = s.count('P')\n    if r >= sc and r >= p:\n        print('P' * l)\n    elif p >= sc and p >= r:\n        print('S' * l)\n    else:\n        print('R' * l)", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    a = s.count('R')\n    b = s.count('P')\n    c = s.count('S')\n    if a >= b and a >= c:\n        print('P' * len(s))\n    elif b >= a and b >= c:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    a = s.count('R')\n    b = s.count('P')\n    c = s.count('S')\n    if a >= b and a >= c:\n        print('P' * len(s))\n    elif b >= a and b >= c:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    a = s.count('R')\n    b = s.count('P')\n    c = s.count('S')\n    if a >= b and a >= c:\n        print('P' * len(s))\n    elif b >= a and b >= c:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "T = int(input())\nmoves = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(T):\n    m = input()\n    ans = ''\n    r_count = m.count('R')\n    p_count = m.count('P')\n    s_count = m.count('S')\n    ls = [r_count, p_count, s_count]\n    mx = ls.index(max(ls))\n    if mx == 0:\n        ans += 'P' * len(m)\n    if mx == 1:\n        ans += 'S' * len(m)\n    if mx == 2:\n        ans += 'R' * len(m)\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    r = s.count('R')\n    p = s.count('P')\n    s = s.count('S')\n    m = max(r, s, p)\n    if r == m:\n        ans = 'P' * n\n    elif s == m:\n        ans = 'R' * n\n    elif p == m:\n        ans = 'S' * n\n    print(ans)", "for _ in range(int(input())):\n    l = list(input())\n    a = l.count('R')\n    b = l.count('S')\n    c = l.count('P')\n    m = max(a, max(b, c))\n    if a == m:\n        print(len(l) * 'P')\n    elif b == m:\n        print(len(l) * 'R')\n    else:\n        print(len(l) * 'S')", "a = int(input(''))\nfor i in range(0, a):\n    b = input('')\n    p = b.count('P')\n    s = b.count('S')\n    r = b.count('R')\n    if r >= p and r >= s:\n        print('P' * len(b))\n    elif p >= r and p >= s:\n        print('S' * len(b))\n    else:\n        print('R' * len(b))", "for i in range(int(input())):\n    a = input()\n    (x, y, z) = (a.count('R'), a.count('P'), a.count('S'))\n    if max(z, y, x) == x:\n        print('P' * len(a))\n    elif max(z, y, x) == z:\n        print('R' * len(a))\n    elif max(z, y, x) == y:\n        print('S' * len(a))", "t = int(input())\nbeating = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(t):\n    s = input()\n    counts = [s.count('R'), s.count('P'), s.count('S')]\n    if counts[0] == max(counts):\n        print(beating['R'] * len(s))\n    elif counts[1] == max(counts):\n        print(beating['P'] * len(s))\n    else:\n        print(beating['S'] * len(s))", "for _ in range(int(input())):\n    s = input()\n    most_signs = max(set(s), key=s.count)\n    sign = 'R'\n    if most_signs == 'P':\n        sign = 'S'\n    elif most_signs == 'R':\n        sign = 'P'\n    result = sign * len(s)\n    print(result)", "for _ in range(int(input())):\n    n = input()\n    r = n.count('R')\n    p = n.count('P')\n    s = n.count('S')\n    m = max(r, p, s)\n    l = len(n)\n    if r == m:\n        print('P' * l)\n    elif s == m:\n        print('R' * l)\n    else:\n        print('S' * l)", "for t in range(int(input())):\n    a = list(input())\n    n = len(a)\n    r = a.count('R')\n    s = a.count('S')\n    p = a.count('P')\n    m = max(r, s, p)\n    if m == r:\n        print('P' * n)\n    elif m == p:\n        print('S' * n)\n    elif m == s:\n        print('R' * n)", "for t in range(int(input())):\n    a = input()\n    arr = list(a)\n    rc = arr.count('R')\n    pc = arr.count('P')\n    sc = arr.count('S')\n    if max(rc, pc, sc) == rc:\n        print('P' * len(arr))\n    elif max(rc, pc, sc) == pc:\n        print('S' * len(arr))\n    else:\n        print('R' * len(arr))", "t = int(input())\nfor k in range(t):\n    s = input()\n    hr = s.count('R')\n    hp = s.count('P')\n    hs = s.count('S')\n    if hr == max(hr, hp, hs):\n        print('P' * len(s))\n    elif hp == max(hr, hp, hs):\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "n = int(input())\nfor _ in range(n):\n    a = input()\n    r = a.count('R')\n    s = a.count('S')\n    p = a.count('P')\n    n = max(r, s, p)\n    if n == r:\n        k = 'P'\n    elif n == s:\n        k = 'R'\n    elif n == p:\n        k = 'S'\n    answer = ''\n    for i in range(len(a)):\n        answer += k\n    print(answer)", "from collections import Counter\nt = int(input())\nfor testcase in range(t):\n    s = input()\n    x = Counter(s).most_common(1)[0][0]\n    moves = ['R', 'P', 'S']\n    print(moves[(moves.index(x) + 1) % 3] * len(s))", "for _ in range(int(input())):\n    s = input()\n    d = {'R': 0, 'S': 0, 'P': 0}\n    for x in s:\n        d[x] += 1\n    m = max([d['R'], d['S'], d['P']])\n    if d['R'] == m:\n        print('P' * len(s))\n    elif d['P'] == m:\n        print('S' * len(s))\n    else:\n        print('R' * len(s))", "for t in range(int(input())):\n    s = list(input())\n    a = s.count('R')\n    b = s.count('S')\n    c = s.count('P')\n    m = max(a, max(b, c))\n    if m == a:\n        print('P' * len(s))\n    elif m == b:\n        print('R' * len(s))\n    else:\n        print('S' * len(s))", "t = int(input())\n\ndef fun(n, a):\n    s = {'R': 0, 'S': 0, 'P': 0}\n    for i in range(n):\n        s[a[i]] += 1\n    ans = ''\n    a = [s['R'], s['S'], s['P']]\n    k = a.index(max(a))\n    fi = ['P', 'R', 'S']\n    ans = fi[k] * n\n    print(ans)\nwhile t:\n    t -= 1\n    a = input()\n    n = len(a)\n    fun(n, a)", "for _ in range(int(input())):\n    s1 = input()\n    winmap = {'R': 'P', 'S': 'R', 'P': 'S'}\n    (r, s, p) = (s1.count('R'), s1.count('S'), s1.count('P'))\n    if r >= s and r >= p:\n        ans = winmap['R'] * len(s1)\n    elif s >= r and s >= p:\n        ans = winmap['S'] * len(s1)\n    elif p >= r and p >= s:\n        ans = winmap['P'] * len(s1)\n    print(ans)"]