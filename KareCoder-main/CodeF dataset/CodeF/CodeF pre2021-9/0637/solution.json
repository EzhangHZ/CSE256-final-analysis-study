["n = int(input())\na = [int(x) for x in input().split(' ')]\na.sort()\nb = pow(2, 30)\nwhile b > 0 and a[n - 1] % b == a[n - 1]:\n    b /= 2\nb = int(b)\nif b == 0:\n    print(0)\n    exit(0)\n\ndef sol(nums, lo, hi, bit):\n    bit = int(bit)\n    if bit < 1:\n        return (nums[lo] % 2, 0)\n    if hi - lo == 0:\n        return (nums[lo] % (bit * 2), 0)\n    ind = lo\n    while ind <= hi and nums[ind] & bit != bit:\n        ind += 1\n    if ind - 1 - lo < 0:\n        (x, maxi) = sol(nums, ind, hi, bit / 2)\n        return (x + bit, maxi)\n    elif hi - ind < 0:\n        (x, maxi) = sol(nums, lo, ind - 1, bit / 2)\n        return (x, maxi)\n    else:\n        (x_l, maxi_l) = sol(nums, lo, ind - 1, bit / 2)\n        (x_r, maxi_r) = sol(nums, ind, hi, bit / 2)\n        if maxi_l <= maxi_r:\n            return (x_l + bit, maxi_l + bit)\n        else:\n            return (x_r, maxi_r + bit)\n(X, ans) = sol(a, 0, n - 1, b)\nprint(ans)", "def solve(nums, bit):\n    if len(nums) == 1:\n        return 0\n    lo = {x for x in nums if x & bit}\n    hi = nums - lo\n    if not lo:\n        return solve(hi, bit >> 1)\n    if not hi:\n        return solve(lo, bit >> 1)\n    return bit + min(solve(lo, bit >> 1), solve(hi, bit >> 1))\ninput()\nnums = set(map(int, input().split()))\nprint(solve(nums, 1 << 30))", "n = int(input())\na = [int(x) for x in input().split(' ')]\na.sort()\nb = pow(2, 30)\nwhile b > 0 and a[n - 1] % b == a[n - 1]:\n    b /= 2\nb = int(b)\nif b == 0:\n    print(0)\n    exit(0)\n\ndef sol(nums, lo, hi, bit):\n    bit = int(bit)\n    if bit < 1:\n        return (nums[lo] % 2, 0)\n    if hi - lo == 0:\n        return (nums[lo] % (bit * 2), 0)\n    ind = lo\n    while ind <= hi and nums[ind] & bit != bit:\n        ind += 1\n    if ind - 1 - lo < 0:\n        (x, maxi) = sol(nums, ind, hi, bit / 2)\n        return (x + bit, maxi)\n    elif hi - ind < 0:\n        (x, maxi) = sol(nums, lo, ind - 1, bit / 2)\n        return (x, maxi)\n    else:\n        (x_l, maxi_l) = sol(nums, lo, ind - 1, bit / 2)\n        (x_r, maxi_r) = sol(nums, ind, hi, bit / 2)\n        if maxi_l <= maxi_r:\n            return (x_l + bit, maxi_l + bit)\n        else:\n            return (x_r, maxi_r + bit)\n(X, ans) = sol(a, 0, n - 1, b)\nprint(ans)", "def solve(nums: set, bit: int):\n    if len(nums) == 1:\n        return 0\n    lo = {x for x in nums if x & bit}\n    hi = nums - lo\n    if not lo:\n        return solve(hi, bit >> 1)\n    if not hi:\n        return solve(lo, bit >> 1)\n    return bit + min(solve(lo, bit >> 1), solve(hi, bit >> 1))\ninput()\nnums = set(map(int, input().split()))\nprint(solve(nums, 1 << 30))", "n = int(input())\nA = [int(s) for s in input().split()]\nA.sort()\nmaxA = -1\nfor a in A:\n    maxA = max(maxA, a)\npriMask = 1\nwhile priMask <= maxA:\n    priMask <<= 1\n\ndef recur(start, end, mask):\n    if mask == 0:\n        return 0\n    if A[start] & mask or not A[end] & mask:\n        return recur(start, end, mask >> 1)\n    low = start\n    high = end\n    while high - low > 1:\n        mid = (low + high) // 2\n        if A[mid] & mask:\n            high = mid\n        else:\n            low = mid\n    leftMin = recur(start, low, mask >> 1)\n    rightMin = recur(high, end, mask >> 1)\n    return mask + min(leftMin, rightMin)\nans = recur(0, n - 1, priMask)\nprint(ans)", "n = int(input())\naa = list(map(int, input().split()))\n\ndef help(a, bits):\n    if len(a) <= 1 or bits < 0:\n        return 0\n    (s, u) = (list(), list())\n    for i in a:\n        if i >> bits & 1 == 0:\n            u.append(i)\n        else:\n            s.append(i)\n    if len(u) == 0:\n        return help(s, bits - 1)\n    elif len(s) == 0:\n        return help(u, bits - 1)\n    return min(help(u, bits - 1), help(s, bits - 1)) + (1 << bits)\nprint(help(aa, 30))", "n = int(input())\nnums = [int(x) for x in input().split(' ')]\ntotor = 0\nfor num in nums:\n    totor |= num\nexp = 1\nwhile totor:\n    exp <<= 1\n    totor >>= 1\nexp >>= 1\n\ndef ans(s, exp):\n    if not exp:\n        return 0\n    ones = []\n    zeros = []\n    for e in s:\n        if e >= exp:\n            ones.append(e - exp)\n        else:\n            zeros.append(e)\n    if not ones:\n        return ans(zeros, exp >> 1)\n    if not zeros:\n        return ans(ones, exp >> 1)\n    return exp + min(ans(zeros, exp >> 1), ans(ones, exp >> 1))\nprint(ans(nums, exp))", "def func(arr, bitmask):\n    if bitmask == 0:\n        return 0\n    arr_off = []\n    arr_on = []\n    for num in arr:\n        if num & bitmask == 0:\n            arr_off.append(num)\n        else:\n            arr_on.append(num)\n    if not arr_off:\n        return func(arr_on, bitmask >> 1)\n    if not arr_on:\n        return func(arr_off, bitmask >> 1)\n    return bitmask + min(func(arr_on, bitmask >> 1), func(arr_off, bitmask >> 1))\nn = int(input())\narr = map(int, input().split())\nans = func(arr, 1 << 29)\nprint(ans)"]