["(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nd = list(map(int, input().split()))\nif k == 0:\n    best = 0\n    curr = sum(a)\n    for i in range(n):\n        best = max(best, curr - d[i])\n        curr -= a[i]\n    print(best)\nelif k == 1:\n    best = sum(a[:-1]) - min(d[:-1])\n    other = sum(a)\n    other -= sorted(d)[0]\n    other -= sorted(d)[1]\n    curr = sum(a)\n    for i in range(n):\n        if i:\n            best = max(best, curr - d[i])\n        curr -= a[i]\n    o2 = sum(a) - min(a[1:]) - d[0]\n    print(max((best, other, 0, o2)))\nelse:\n    print(max((sum(a) - min(d[:-1]), 0, a[-1] - d[-1])))", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nd = list(map(int, input().split()))\nif k == 0:\n    best = 0\n    curr = sum(a)\n    for i in range(n):\n        best = max(best, curr - d[i])\n        curr -= a[i]\n    print(best)\nelif k == 1:\n    best = sum(a[:-1]) - min(d[:-1])\n    other = sum(a)\n    other -= sorted(d)[0]\n    other -= sorted(d)[1]\n    curr = sum(a)\n    for i in range(n):\n        if i:\n            best = max(best, curr - d[i])\n        curr -= a[i]\n    o2 = sum(a) - min(a[1:]) - d[0]\n    print(max((best, other, 0, o2)))\nelse:\n    print(max((sum(a) - min(d[:-1]), 0, a[-1] - d[-1])))", "import sys\n(n, k) = list(map(int, input().split(' ')))\nactivate = list(map(int, input().split(' ')))\ndeactivate = list(map(int, input().split(' ')))\npresum = [0 for _ in range(n + 2)]\nfor i in range(1, n + 1):\n    presum[i] = presum[i - 1] + activate[i - 1]\nret = 0\nif k == 0:\n    for i in range(1, n + 1):\n        ret = max(ret, presum[n] - presum[i - 1] - deactivate[i - 1])\nelif k == 1:\n    for i in range(1, n):\n        ret = max(ret, presum[n - 1] - deactivate[i - 1])\n    if deactivate[n - 1] < activate[n - 1]:\n        ret += activate[n - 1] - deactivate[n - 1]\n    deac = sorted(deactivate[1:n - 1])\n    ac = sorted(activate[1:n - 1])\n    ret = max(ret, presum[n] - deac[0] - deac[1])\n    ret = max(ret, presum[n] - deactivate[0] - ac[0])\n    ret = max(ret, presum[n] - deactivate[0] - deac[0])\n    for i in range(2, n + 1):\n        ret = max(ret, presum[n] - presum[i - 1] - deactivate[i - 1])\nelse:\n    for i in range(1, n):\n        ret = max(ret, presum[n] - deactivate[i - 1])\n    ret = max(ret, activate[n - 1] - deactivate[n - 1])\nprint(ret)"]