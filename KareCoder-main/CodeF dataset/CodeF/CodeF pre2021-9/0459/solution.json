["from collections import *\nC = Counter\nfor S in [*open(0)][2::2]:\n    l = S.split()\n    z = s = len(l)\n    c = 0\n    for (x, y) in sorted(C(C(l).values()).items())[::-1]:\n        c += y\n        z = min(z, s - c * x)\n    print(z)", "from collections import *\nfor _ in [*open(0)][2::2]:\n    w = sorted(Counter([*_.split()]).values())\n    o = len(w)\n    print(sum(w) - max(((o - i) * w[i] for i in range(o))))", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    w = Counter(map(int, input().split()))\n    d = Counter([w[i] for i in w])\n    x = sum((d[i] for i in d))\n    d = sorted([(i, d[i]) for i in d])\n    c = x * d[0][0]\n    for i in range(1, len(d)):\n        x -= d[i - 1][1]\n        c = max(c, x * d[i][0])\n    print(n - c)", "from collections import *\nfor _ in [*open(0)][2::2]:\n    w = sorted(Counter([*_.split()]).values())\n    o = len(w)\n    print(sum(w) - max(((o - i) * w[i] for i in range(o))))", "from collections import Counter\nfrom sys import stdin\ninput = stdin.readline\n\ndef equalize(arr):\n    x = Counter(arr)\n    lst = list(x.values())\n    cnts = Counter(lst)\n    ans = float('inf')\n    for v in cnts.keys():\n        temp = 0\n        for i in cnts.keys():\n            if i >= v:\n                t = i - v\n            else:\n                t = i\n            temp += t * cnts[i]\n        ans = min(temp, ans)\n    return ans\nfor i in range(int(input())):\n    a = input().strip()\n    lst = list(map(int, input().strip().split()))\n    print(equalize(lst))", "import sys\nfrom collections import Counter\nfrom itertools import accumulate\nfrom bisect import bisect_right, bisect_left\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    D = Counter(A)\n    cnt = [v for v in D.values()]\n    cnt.sort()\n    cnt_acc = [0] + list(accumulate(cnt))\n    res = cnt_acc[-1]\n    for num in set(cnt):\n        l = bisect_left(cnt, num)\n        r = bisect_right(cnt, num)\n        tmp = cnt_acc[r] - (r - l) * num\n        tmp += cnt_acc[-1] - cnt_acc[r] - num * (len(cnt) - r)\n        res = min(res, tmp)\n    print(res)\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        solve()\nresolve()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for n in l:\n        if n not in d:\n            d[n] = 1\n        else:\n            d[n] += 1\n    e = sorted(list(d.values()))\n    s = sum(e)\n    print(min((s - (len(e) - i) * e[i] for i in range(len(e)))))", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef solution(n, arr):\n    c = Counter(arr)\n    c_appearances = Counter([count for count in c.values()])\n    l_counts = sorted(list(c_appearances.keys()))\n    partial_sums = [0]\n    partial_count = [0]\n    sol = 10 ** 10\n    remove = 0\n    whole_sum = 0\n    for count in l_counts:\n        partial_sums.append(partial_sums[-1] + count * c_appearances[count])\n        partial_count.append(partial_count[-1] + c_appearances[count])\n    whole_sum = partial_sums[-1]\n    for pos in range(1, len(partial_sums)):\n        remove = 0\n        remove += partial_sums[pos - 1]\n        if pos < len(partial_sums) - 1:\n            remove += whole_sum - (partial_count[-1] - partial_count[pos]) * l_counts[pos - 1] - partial_sums[pos]\n        sol = min(sol, remove)\n    print(sol)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solution(n, arr)", "def bruteForce(n, arr):\n    d = dict()\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    group = dict()\n    for i in d:\n        if d[i] in group:\n            group[d[i]].append(i)\n        else:\n            group[d[i]] = [i]\n    ans = n\n    for i in group:\n        temp = 0\n        for j in group:\n            if i == j:\n                continue\n            elif j < i:\n                temp += len(group[j]) * j\n            else:\n                temp += len(group[j]) * (j - i)\n        ans = min(temp, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(bruteForce(n, arr))", "import sys\nfrom collections import Counter, defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef f(n, arr):\n    arr = Counter(arr)\n    freq = defaultdict(int)\n    for x in arr:\n        freq[arr[x]] += 1\n    freq = list(freq.items())\n    freq.sort(key=lambda x: x[0])\n    s = 0\n    ans = float('inf')\n    for (f, dn) in freq[::-1]:\n        ans = min(ans, n - f * dn - f * s)\n        s += dn\n    return ans\ninput = load_sys()\nfor i in range(1, len(input), 2):\n    n = int(input[i])\n    arr = [int(x) for x in input[i + 1].split()]\n    print(f(n, arr))", "def codeforces(arr):\n    dist = {}\n    for i in arr:\n        try:\n            dist[i] += 1\n        except:\n            dist[i] = 1\n    dst = {}\n    for i in dist:\n        try:\n            dst[dist[i]] += 1\n        except:\n            dst[dist[i]] = 1\n    res = 0\n    for i in dst:\n        store = i\n        break\n    for i in dst:\n        if i >= store:\n            res += dst[i] * min(i, abs(i - store))\n        else:\n            res += dst[i] * i\n    for i in dst:\n        store = i\n        ans = 0\n        for ind in dst:\n            if ind >= store:\n                ans += dst[ind] * min(ind, abs(ind - store))\n            else:\n                ans += dst[ind] * ind\n        res = min(ans, res)\n    return res\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(codeforces(arr))", "import sys\nimport math\nN = int(10000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    d1 = dict()\n    d2 = dict()\n    for i in range(1, n + 1):\n        if a[i] not in d1:\n            d1[a[i]] = 1\n        else:\n            d1[a[i]] += 1\n    for i in d1.keys():\n        if d1[i] not in d2:\n            d2[d1[i]] = 1\n        else:\n            d2[d1[i]] += 1\n    Sum = 0\n    cnt = 0\n    for i in d2.keys():\n        Sum += i * d2[i]\n        cnt += d2[i]\n    res = Sum\n    mx = 0\n    keys = list(d2.keys())\n    keys.sort()\n    for i in keys:\n        mx = max(mx, i * cnt)\n        cnt -= d2[i]\n    print(res - mx)\nfor t in range(int(input())):\n    charming()", "import sys, threading, heapq, math\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        freq = defaultdict(int)\n        for num in nums:\n            freq[num] += 1\n        freqGroup = defaultdict(int)\n        for key in freq.keys():\n            freqGroup[freq[key]] += 1\n        freqKeys = sorted((key for key in freqGroup))\n        cost1 = [0] * len(freqKeys)\n        prev = freqKeys[0] * freqGroup[freqKeys[0]]\n        for i in range(1, len(freqKeys)):\n            cost1[i] = cost1[i - 1] + prev\n            prev = freqKeys[i] * freqGroup[freqKeys[i]]\n        cost2 = [0] * len(freqKeys)\n        prev = freqGroup[freqKeys[-1]]\n        for i in range(len(freqKeys) - 2, -1, -1):\n            cost2[i] += (freqKeys[i + 1] - freqKeys[i]) * prev + cost2[i + 1]\n            prev += freqGroup[freqKeys[i]]\n        ans = math.inf\n        for i in range(len(freqKeys)):\n            ans = min(ans, cost1[i] + cost2[i])\n        print(ans)\nmain()", "import collections\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = n\n    min_removals = total\n    previous = 0\n    c = collections.Counter(collections.Counter(arr).values())\n    current_count = sum(c.values())\n    for k in sorted(c.keys()):\n        current_cost = total - current_count * k\n        min_removals = min(min_removals, current_cost)\n        current_count -= c[k]\n        previous += c[k] * k\n    print(min_removals)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return (N, A)\n\ndef solve(N, A):\n    C = list(Counter(A).values())\n    C.sort()\n    S = sum(C)\n    ans = S\n    R = len(C)\n    for i in range(R):\n        rect = C[i] * (R - i)\n        ans = min(ans, S - rect)\n    print(ans)\nT = int(input().strip())\nfor t in range(T):\n    inputs = read()\n    solve(*inputs)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    c = sorted(d.values())\n    dd = {}\n    for i in c:\n        if i in dd:\n            dd[i] += 1\n        else:\n            dd[i] = 1\n    cs = list(dd.keys())\n    cc = list(dd.values())\n    ll = len(cs)\n    a = sum(((cs[i] - cs[0]) * cc[i] for i in range(1, ll)))\n    m = a\n    scc = []\n    sm = 0\n    for i in range(ll - 1, -1, -1):\n        sm += cc[i]\n        scc = [sm] + scc\n    for i in range(1, ll):\n        a += cs[i - 1] * cc[i - 1]\n        a -= (cs[i] - cs[i - 1]) * scc[i]\n        m = min(m, a)\n    print(m)", "def find():\n    n = int(input())\n    mas = tuple(map(int, input().split()))\n    count_numbers = {}\n    for j in mas:\n        count_numbers[j] = count_numbers.get(j, 0) + 1\n    count_set_numb = {}\n    for j in count_numbers:\n        count_set_numb[count_numbers[j]] = count_set_numb.get(count_numbers[j], 0) + 1\n    res = n\n    last = 0\n    all_next = n\n    uniq_next = len(count_numbers)\n    for j in sorted(count_set_numb):\n        res = min(res, last + all_next - uniq_next * j)\n        last += j * count_set_numb[j]\n        all_next -= j * count_set_numb[j]\n        uniq_next -= count_set_numb[j]\n    print(res)\nfor i in range(int(input())):\n    find()", "from collections import Counter\n\ndef get_cost(freq, k):\n    cost = 0\n    for (x, f) in freq.items():\n        if x < k:\n            cost += f * x\n        else:\n            cost += (x - k) * f\n    return cost\n\ndef solve():\n    input()\n    freq = Counter(input().split()).values()\n    freq_freq = Counter(freq)\n    mn = min((get_cost(freq_freq, x) for x in freq_freq))\n    print(mn)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    (c, d) = ({}, {})\n    for i in a:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n        if d[i] not in c:\n            c[d[i]] = 0\n        c[d[i]] += 1\n    arr = [i * c[i] for i in c]\n    print(n - max(arr))\nfor _ in range(int(input())):\n    solve()", "from collections import *\nI = input\nfor _ in ' ' * int(I()):\n    s = n = int(I())\n    c = 0\n    for (x, y) in sorted(Counter(Counter(map(int, I().split())).values()).items())[::-1]:\n        c += y\n        s = min(s, n - c * x)\n    print(s)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = []\n    for num in arr:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    mx = max(d.values())\n    l = len(d.values())\n    counter = [0] * (mx + 1)\n    for num in d.values():\n        counter[num] += 1\n    count = counter[0]\n    for i in range(1, mx + 1):\n        old = counter[i]\n        counter[i] = (l - count) * i\n        count = count + old\n    print(n - max(counter[1:]))", "I = input\nIN = lambda x: map(int, x.split())\nL = lambda x: list(IN(x))\nfor _ in range(int(I())):\n    n = int(I())\n    a = L(I())\n    d = {}\n    f = {}\n    c = 0\n    for i in a:\n        t = d.get(i, 0) + 1\n        d[i] = t\n        f[t] = f.get(t, 0) + 1\n    max = 0\n    for (x, y) in f.items():\n        t = x * y\n        if t > max:\n            max = t\n    print(n - max)", "from collections import Counter\nfrom math import inf\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ocurrencias = list(Counter(a).values())\n        search = Counter(ocurrencias)\n        ans = inf\n        for (i, k) in search.items():\n            temp = 0\n            for (j, l) in search.items():\n                if i != j:\n                    if i < j:\n                        temp += (j - i) * l\n                    else:\n                        temp += j * l\n            ans = min(ans, temp)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = (*map(int, input().split()),)\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    ff = {}\n    for occ in freq.values():\n        ff[occ] = ff.get(occ, 0) + 1\n    last = 0\n    ans = n + 1\n    for occ in sorted(ff.keys(), reverse=True):\n        ff[occ] = ff[occ] + last\n        last = ff[occ]\n        volume = ff[occ] * occ\n        ans = min(ans, n - volume)\n    print(ans)", "for _ in [*open(0)][2::2]:\n    q = {}\n    for i in [*_.split()]:\n        q[i] = q.get(i, 0) + 1\n    w = sorted([*q.values()])\n    o = len(w)\n    print(sum(w) - max(((o - i) * w[i] for i in range(o))))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(s) for s in input().split(' ')]\n    vals = list(Counter(arr).values())\n    vals.sort(reverse=True)\n    ans = 0\n    for i in range(len(vals)):\n        ans = max(ans, vals[i] * (i + 1))\n    print(n - ans)", "from collections import Counter\nfrom sys import stdin\n\ndef solve(arr, n):\n    c = Counter(arr)\n    s = sorted(c.values(), reverse=True)\n    res = n\n    d = Counter(s)\n    for i in range(s[0] + 1):\n        tmp = 0\n        for e in d.keys():\n            if e >= i:\n                tmp += (e - i) * d[e]\n            else:\n                tmp += e * d[e]\n        res = min(res, tmp)\n    return res\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        print(solve(list(map(int, stdin.readline().split(' '))), n))\nmain()", "in_length = int(input())\nfinal_ouput = []\nfor i in range(in_length):\n    length = int(input())\n    inputs = input().split()\n    input_dict = dict()\n    for inp in inputs:\n        if not inp in input_dict:\n            input_dict.update([(inp, 1)])\n        else:\n            input_dict[inp] += 1\n    amt_dict = dict()\n    for val in input_dict.values():\n        if not val in amt_dict:\n            amt_dict.update([(val, 1)])\n        else:\n            amt_dict[val] += 1\n    sorted_amts = sorted(amt_dict.keys())\n    amt_amts = [amt_dict[amt] for amt in sorted_amts]\n    acc_sum = 0\n    min_val = length\n    for (idx, amt) in enumerate(amt_amts):\n        acc_sum += amt_amts[-1 - idx]\n        interm_val = length - acc_sum * int(sorted_amts[-1 - idx])\n        if interm_val < min_val:\n            min_val = interm_val\n    final_ouput.append(min_val)\nfor out in final_ouput:\n    print(out)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    d = {}\n    d2 = {}\n    for i in ls:\n        d[i] = d.setdefault(i, 0) + 1\n    for i in d.values():\n        d2[i] = d2.setdefault(i, 0) + 1\n    ans = n\n    temp = len(d)\n    temp2 = sorted(d2.keys())\n    for x in temp2:\n        ans = min(ans, n - temp * x)\n        temp -= d2[x]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    d = {}\n    for word in ls:\n        d[word] = d.get(word, 0) + 1\n    ls = sorted(d.values())\n    (cost, ans) = (0, 0)\n    for j in range(len(ls)):\n        cost = (len(ls) - j) * ls[j]\n        if cost > ans:\n            ans = cost\n    print(n - ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    d = Counter(numbers)\n    d1 = Counter(d.values())\n    d2_s = sorted(d1.items())\n    summ_right = 0\n    for i in range(len(d2_s)):\n        summ_right += d2_s[i][1]\n    minn = n\n    current_sum = n\n    t = 0\n    for i in range(len(d2_s)):\n        if i != 0:\n            current_sum += d2_s[i - 1][1] * d2_s[i - 1][0]\n        summ_right -= d2_s[i][1]\n        current_sum += n - current_sum - d2_s[i][0] * d2_s[i][1] - summ_right * d2_s[i][0]\n        t = d2_s[i][0]\n        if current_sum < minn:\n            minn = current_sum\n    print(minn)", "get_line = lambda type_: list(map(type_, input().strip().split()))\nfrom collections import Counter\n\ndef solve():\n    n = int(input())\n    a = get_line(int)\n    c = Counter(a)\n    his = [i[1] for i in c.items()]\n    his.sort()\n    max_rect_area = 0\n    last_h = 0\n    for (i, h) in enumerate(his):\n        if h != last_h:\n            if h * (len(his) - i) > max_rect_area:\n                max_rect_area = h * (len(his) - i)\n            last_h = h\n    print(sum(his) - max_rect_area)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = {}\n    for i in a:\n        if i not in cnt:\n            cnt[i] = 1\n        else:\n            cnt[i] += 1\n    counts = cnt.values()\n    n_cnt = {}\n    for i in counts:\n        if i not in n_cnt:\n            n_cnt[i] = 1\n        else:\n            n_cnt[i] += 1\n    keys = sorted(n_cnt.keys())\n    values = [n_cnt[x] for x in keys]\n    sum_arr = [x * n_cnt[x] for x in keys]\n    s = sum(sum_arr)\n    min_score = s\n    for (i, j) in enumerate(keys):\n        score = s - j * n_cnt[j] - j * sum(values[i + 1:])\n        if min_score > score:\n            min_score = score\n    print(min_score)", "from collections import *\nI = input\nfor _ in ' ' * int(I()):\n    s = n = int(I())\n    c = 0\n    for (x, y) in sorted(Counter(Counter(map(int, I().split())).values()).items())[::-1]:\n        c += y\n        s = min(s, n - c * x)\n    print(s)", "test = int(input())\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = dict()\n    for i in a:\n        if cnt.get(i) == None:\n            cnt[i] = 1\n        else:\n            cnt[i] += 1\n    val = list(cnt.values())\n    val.sort()\n    ans = 10 ** 9\n    _sum = 0\n    for i in range(len(val)):\n        res = n - val[i] * (len(val) - i)\n        ans = min(ans, res)\n    print(ans)\nfor i in range(test):\n    solve()", "from collections import defaultdict as dict\nfrom sys import stdin\ninput = stdin.readline\n\ndef solve():\n    n = int(input())\n    c = dict(int)\n    for x in input().split():\n        c[int(x)] += 1\n    a = sorted(c.values())\n    v = [0]\n    prev = a[0]\n    for i in range(1, len(a)):\n        if a[i] != prev:\n            v.append(i)\n            prev = a[i]\n    s = a.copy()\n    for i in range(1, len(a)):\n        s[i] += s[i - 1]\n    ans = 10 ** 18\n    n = len(a)\n    for i in v:\n        ans = min(ans, s[i] - a[i] + (s[-1] - s[i]) - a[i] * (n - i - 1))\n    print(ans)\nfor _ in ' ' * int(input()):\n    solve()", "__version__ = '0.2'\n__date__ = '2021-03-13'\nimport sys\nfrom collections import Counter\n\ndef solve(n, a):\n    a_counts = Counter(a)\n    size = a_counts.most_common()[0][1]\n    c_counts = [0] * (size + 1)\n    for v in a_counts.values():\n        c_counts[v] += 1\n    for i in reversed(range(1, size)):\n        c_counts[i] += c_counts[i + 1]\n    for i in range(1, size + 1):\n        c_counts[i] = i * c_counts[i]\n    return n - max(c_counts)\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "__version__ = '1.0'\n__date__ = '2021-03-13'\nimport sys\nfrom collections import Counter\n\ndef solve(n, a):\n    a_counts = Counter(a)\n    c_counts = Counter(a_counts.values())\n    carry = 0\n    for (k, v) in sorted(c_counts.items(), reverse=True):\n        c_counts[k] += carry\n        carry += v\n    (k, v) = max(c_counts.items(), key=lambda x: x[0] * x[1])\n    return n - k * v\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "from collections import Counter\n\ndef get_min(times_dict):\n    final_ans = 2 * 10 ** 14\n    for times in set(times_dict):\n        ans = 0\n        for t in times_dict:\n            if t >= times:\n                ans += (t - times) * times_dict[t]\n            else:\n                ans += t * times_dict[t]\n        final_ans = min(final_ans, ans)\n    return final_ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a_list = list(map(int, input().split()))\n    a_dict = Counter(a_list)\n    times_dict = Counter(a_dict.values())\n    get_ans = get_min(times_dict)\n    print(get_ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for el in a:\n        if el in dic:\n            dic[el] += 1\n        else:\n            dic[el] = 1\n    mini = 99999999999999\n    s = set()\n    for el in dic.values():\n        if el not in s:\n            s.add(el)\n    w = {}\n    for el in dic:\n        if dic[el] in w:\n            w[dic[el]] += 1\n        else:\n            w[dic[el]] = 1\n    for el in s:\n        p = 0\n        for o in w:\n            if o > el:\n                p += w[o] * (o - el)\n            elif o < el:\n                p += w[o] * o\n        mini = min(mini, p)\n    print(mini)", "for _ in [*open(0)][2::2]:\n    a = [*_.split()]\n    q = {}\n    for i in a:\n        q[i] = q.get(i, 0) + 1\n    w = sorted([*q.values()])\n    q = 0\n    o = len(w)\n    for i in range(o):\n        q = max(q, (o - i) * w[i])\n    print(sum(w) - q)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(s) for s in input().split(' ')]\n    vals = list(Counter(arr).values())\n    vals.sort(reverse=True)\n    ans = 0\n    for i in range(len(vals)):\n        ans = max(ans, vals[i] * (i + 1))\n    print(n - ans)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    a = list(Counter(map(int, input().split())).values())\n    a.sort()\n    pref = [0] * (len(a) + 1)\n    for i in range(1, len(pref)):\n        pref[i] = pref[i - 1] + a[i - 1]\n    mn = int(1e+18)\n    n = len(a)\n    for (i, c) in enumerate(a):\n        if i > 0 and c == a[i - 1]:\n            continue\n        mn = min(mn, pref[i] + (pref[n] - pref[i] - c * (n - i)))\n    print(mn)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    tmp = {}\n    for x in arr:\n        tmp[x] = tmp.get(x, 0) + 1\n    arr0 = list(tmp.values())\n    n = len(arr0)\n    arr1 = sorted(arr0)\n    s = sum(arr0)\n    arr2 = [s - (n - i) * arr1[i] for i in range(n)]\n    print(min(arr2))", "from collections import Counter\n\ndef equalize(arr):\n    x = Counter(arr)\n    lst = list(x.values())\n    cnts = Counter(lst)\n    ans = float('inf')\n    for v in cnts.keys():\n        temp = 0\n        for i in cnts.keys():\n            if i >= v:\n                t = i - v\n            else:\n                t = i\n            temp += t * cnts[i]\n        ans = min(temp, ans)\n    return ans\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(equalize(lst))", "for _ in range(int(input())):\n    (cnt, occ) = ({}, {})\n    le = 0\n    n = int(input())\n    for i in list(input().split()):\n        if occ.get(i, None):\n            occ[i] += 1\n        else:\n            occ[i] = 1\n        if cnt.get(occ[i], None):\n            cnt[occ[i]] += 1\n        else:\n            cnt[occ[i]] = 1\n    mx = 0\n    for i in cnt:\n        if i * cnt[i] > mx:\n            mx = i * cnt[i]\n    print(n - mx)", "from collections import *\nI = input\nfor _ in ' ' * int(I()):\n    s = n = int(I())\n    c = 0\n    for (x, y) in sorted(Counter(Counter(map(int, I().split())).values()).items())[::-1]:\n        c += y\n        s = min(s, n - c * x)\n    print(s)", "__version__ = '0.1'\n__date__ = '2021-03-13'\nimport sys\nfrom collections import Counter\n\ndef solve(n, a):\n    a_counts = Counter(a)\n    size = a_counts.most_common()[0][1]\n    c_counts = [0] * (size + 1)\n    for (k, v) in a_counts.items():\n        c_counts[v] += 1\n    for i in reversed(range(1, size)):\n        c_counts[i] += c_counts[i + 1]\n    for i in range(1, size + 1):\n        c_counts[i] = i * c_counts[i]\n    return n - max(c_counts)\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    dic = {}\n    for i in li:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] = dic[i] + 1\n    val = list(dic.values())\n    val.sort()\n    l = len(val)\n    ans = []\n    for i in range(l - 1, -1, -1):\n        if i == l - 1:\n            ans.append(val[i])\n        else:\n            m = val[i] * (l - i)\n            ans.append(m)\n    m = n - max(ans)\n    print(m)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for n in a:\n        if n not in d:\n            d[n] = 0\n        d[n] += 1\n    c = list(d.values())\n    c.sort()\n    s = sum(c)\n    ans = min([s - (len(c) - i) * c[i] for i in range(len(c))])\n    print(ans)", "T = int(input())\nfor testcase in range(1, T + 1):\n    d = {}\n    n = int(input())\n    l = input().split(' ')\n    a = [int(i) for i in l]\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    x = list(d.values())\n    x.sort()\n    d2 = {}\n    for i in range(len(x)):\n        if x[i] in d2:\n            d2[x[i]] += 1\n        else:\n            d2[x[i]] = 1\n    l = list(d2.keys())\n    l.sort()\n    best = 10 ** 9\n    for i in l:\n        count = 0\n        for j in l:\n            if j < i:\n                count += j * d2[j]\n            elif j > i:\n                count += (j - i) * d2[j]\n        if count < best:\n            best = count\n    print(best)", "N = int(input())\nfor i in range(N):\n    n = int(input())\n    x = list(map(int, input().split()))\n    dct = {}\n    for each in x:\n        dct[each] = dct.get(each, 0) + 1\n    rank = sorted(dct.values())\n    (ret, ans) = (0, 0)\n    for j in range(len(rank)):\n        ret = (len(rank) - j) * rank[j]\n        if ret > ans:\n            ans = ret\n    print(n - ans)", "from collections import defaultdict as dict\n\ndef solve():\n    n = int(input())\n    c = dict(int)\n    for x in input().split():\n        c[int(x)] += 1\n    a = sorted(c.values())\n    v = [0]\n    prev = a[0]\n    for i in range(1, len(a)):\n        if a[i] != prev:\n            v.append(i)\n            prev = a[i]\n    s = a.copy()\n    for i in range(1, len(a)):\n        s[i] += s[i - 1]\n    ans = 10 ** 18\n    n = len(a)\n    for i in v:\n        ans = min(ans, s[i] - a[i] + (s[-1] - s[i]) - a[i] * (n - i - 1))\n    print(ans)\nfor _ in ' ' * int(input()):\n    solve()", "from collections import Counter\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    count = Counter(map(int, input().split()))\n    total = float('inf')\n    common = count.items()\n    (_, num) = zip(*common)\n    num = list(num)\n    test = Counter(num)\n    for x in test:\n        ret = 0\n        for x1 in test:\n            if x > x1:\n                ret += x1 * test[x1]\n            else:\n                ret += (x1 - x) * test[x1]\n        total = min(total, ret)\n    print(total)", "from collections import Counter\n\ndef solve(ip):\n    result = 0\n    c = Counter(ip)\n    coc = Counter(c.values())\n    max_count = max(coc.keys())\n    costs = [0] * (max_count + 1)\n    for (k, v) in coc.items():\n        for i in range(max_count + 1):\n            if k >= i:\n                costs[i] += (k - i) * v\n            else:\n                costs[i] += k * v\n    return min(costs)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ip = list(map(int, input().split()))\n    res = solve(ip)\n    print(res)", "from math import gcd\nimport sys\nT = int(input())\nmod = 1000000007\nfor ia in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    h = dict()\n    for i in range(n):\n        if arr[i] in h:\n            h[arr[i]] += 1\n        else:\n            h[arr[i]] = 1\n    p = dict()\n    for i in h:\n        if h[i] in p:\n            p[h[i]] += 1\n        else:\n            p[h[i]] = 1\n    w = len(p)\n    arr1 = []\n    s = 0\n    arr2 = sorted(p)\n    for i in arr2:\n        s = s + p[i]\n        arr1.append(s)\n    z = sys.maxsize\n    for j in range(w):\n        z = min(z, n - arr2[j] * (arr1[-1] - arr1[j] + p[arr2[j]]))\n    print(z)", "from collections import defaultdict\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        d[A[i]] += 1\n    l = list(d.values())\n    l.sort()\n    ans = 0\n    t = len(l)\n    for i in range(len(l)):\n        ans = max(ans, l[i] * (t - i))\n    print(n - ans)", "from collections import Counter, defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    numbers_and_their_frequency = Counter(a)\n    the_num_of_each = defaultdict(int)\n    for num in numbers_and_their_frequency:\n        the_num_of_each[numbers_and_their_frequency[num]] += 1\n    the_num_of_each = {key: the_num_of_each[key] for key in sorted(the_num_of_each)}\n    min_of_deletions = float('inf')\n    m = len(the_num_of_each)\n    for key in the_num_of_each:\n        local_min_of_deletions = 0\n        the_num_of_each_copy = the_num_of_each.copy()\n        for local_key in the_num_of_each_copy:\n            if local_key < key:\n                local_min_of_deletions += local_key * the_num_of_each_copy[local_key]\n            else:\n                local_min_of_deletions += (local_key - key) * the_num_of_each_copy[local_key]\n        min_of_deletions = min(min_of_deletions, local_min_of_deletions)\n    print(min_of_deletions)", "import bisect\nimport collections\nimport functools\nimport itertools\nimport math\nimport heapq\nimport random\nimport string\n\ndef repeat(_func=None, *, times=1):\n\n    def decorator(func):\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                func(*args, **kwargs)\n        return wrapper\n    if _func is None:\n        return decorator\n    else:\n        return decorator(_func)\n\ndef unpack(func=int):\n    return map(func, input().split())\n\ndef l_unpack(func=int):\n    return list(map(func, input().split()))\n\ndef getint():\n    return int(input())\n\ndef getmatrix(rows):\n    return [list(map(int, input().split())) for _ in range(rows)]\n\ndef display_matrix(mat):\n    for i in range(len(mat)):\n        print(mat[i])\n\n@repeat(times=int(input()))\ndef main():\n    n = getint()\n    arr = sorted((x for x in collections.Counter(l_unpack()).values()))\n    n = len(arr)\n    cumsum = [arr[0]] * n\n    for i in range(1, n):\n        cumsum[i] = cumsum[i - 1] + arr[i]\n    ans = cumsum[-1] - arr[0] * n\n    for i in range(1, n):\n        temp = cumsum[-1] - arr[i] * (n - i)\n        ans = min(ans, temp)\n    print(ans)\nMOD = 10 ** 9 + 7\nmain()", "def solve(a):\n    li = get_counts(a)\n    solution = 0\n    for i in range(len(li)):\n        temp_solution = li[i] * (len(li) - i)\n        if temp_solution > solution:\n            solution = temp_solution\n    print(len(a) - solution)\n\ndef get_counts(li):\n    count_dict = {}\n    for a in li:\n        if a in count_dict:\n            count_dict[a] += 1\n        else:\n            count_dict[a] = 1\n    return sorted(count_dict.values())\n\ndef main():\n    x = input()\n    for _ in range(int(x)):\n        input()\n        a = input()\n        solve(list(map(int, a.split())))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    d = {}\n    for word in ls:\n        d[word] = d.get(word, 0) + 1\n    ls = sorted(d.values())\n    (cost, ans) = (0, 0)\n    for j in range(len(ls)):\n        cost = (len(ls) - j) * ls[j]\n        if cost > ans:\n            ans = cost\n    print(n - ans)", "def solve(n, A):\n    freq = {}\n    for a in A:\n        freq[a] = freq.get(a, 0) + 1\n    freq = {k: f for (k, f) in sorted(freq.items(), key=lambda item: item[1])}\n    freqLength = len(freq)\n    minRemoval = n\n    i = 0\n    for (k, f) in freq.items():\n        minRemoval = min(n - (freqLength - i) * f, minRemoval)\n        i += 1\n    return minRemoval\nfor tc in range(int(input())):\n    print(solve(int(input()), list(map(int, input().split()))))", "import sys\nimport collections\n\ndef solve(n, a):\n    counter = collections.Counter()\n    for elem in a:\n        counter[elem] += 1\n    counts = sorted(counter.values())\n    lessers_to_delete = dict()\n    value = 0\n    for elem in counts:\n        if elem not in lessers_to_delete:\n            lessers_to_delete[elem] = value\n        value += elem\n    value = counts[-1]\n    count = 1\n    greatter_to_delete = dict()\n    greatter_to_delete[value] = 0\n    for i in range(len(counts) - 2, -1, -1):\n        elem = counts[i]\n        if elem != value:\n            greatter_to_delete[elem] = greatter_to_delete[value] + count * (value - elem)\n            value = elem\n        count += 1\n    return min((greatter_to_delete[i] + lessers_to_delete[i] for i in set(counts)))\n\ndef main():\n    res = ''\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        res += str(solve(n, a)) + '\\n'\n    print(res)\nmain()", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = list(Counter(A).values())\n    secCount = Counter(count)\n    ans = 10 ** 6\n    for n in range(0, max(count) + 1):\n        score = 0\n        for (number, occur) in secCount.items():\n            if number < n:\n                score += occur * number\n            else:\n                score += occur * (number - n)\n        ans = min(score, ans)\n    print(ans)", "from collections import defaultdict\nfrom bisect import bisect_right\nfor _ in ' ' * int(input()):\n    n = int(input())\n    (a, d, c, s, p, f) = (list(map(int, input().split())), defaultdict(int), defaultdict(int), 10 ** 10, [], [])\n    for i in range(n):\n        d[a[i]] += 1\n    for i in d:\n        c[d[i]] += 1\n        p.append(d[i])\n    x = sorted(c)\n    p.sort()\n    l = len(x)\n    for i in range(l):\n        f.append((f[i - 1] if i else 0) + x[i] * c[x[i]])\n        s = min(s, n - f[i] - (len(p) - bisect_right(p, x[i])) * x[i] + (f[i - 1] if i else 0))\n    print(s)", "from collections import Counter\nnum = int(input())\nquestions = list()\nfor i in range(num):\n    length = input()\n    li = [int(str) for str in input().split()]\n    questions.append(li)\nfor question in questions:\n    counter = Counter(question)\n    times = [v[1] for v in counter.items()]\n    times.sort()\n    n = len(times)\n    ans = sum(times) - n * times[0]\n    temp = ans\n    i = 0\n    while i < n:\n        plus = times[i]\n        while i < n - 1 and times[i] == times[i + 1]:\n            plus += times[i + 1]\n            i += 1\n        if i == n - 1:\n            break\n        minus = (n - 1 - i) * (times[i + 1] - times[i])\n        temp = temp + plus - minus\n        ans = min(ans, temp)\n        i += 1\n    print(ans)", "import sys\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    s = {}\n    for i in range(0, n):\n        if a[i] not in s:\n            s[a[i]] = 0\n        s[a[i]] += 1\n    s = sorted(s.items(), key=lambda x: x[1])\n    ss = {}\n    for i in range(0, len(s)):\n        if s[i][1] not in ss:\n            ss[s[i][1]] = 0\n        ss[s[i][1]] += 1\n    res = n\n    left = 0\n    right = n\n    rightCnt = len(s)\n    for (key, val) in ss.items():\n        res = min(res, left + right - rightCnt * key)\n        left += key * val\n        right -= key * val\n        rightCnt -= val\n    print(res)\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "total_case = int(input())\nfor t in range(total_case):\n    n = int(input())\n    nums = [int(x) for x in input().rstrip().split()]\n    freq = {}\n    for x in nums:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    snums = sorted((freq[x] for x in freq))\n    n = len(snums)\n    cumsum = [0] * n\n    cumsum[0] = snums[0]\n    for i in range(1, n):\n        cumsum[i] = cumsum[i - 1] + snums[i]\n    minremove = cumsum[-1] - snums[0] * n\n    for i in range(1, n):\n        if snums[i - 1] == snums[i]:\n            continue\n        remove = cumsum[-1] - snums[i] * (n - i)\n        minremove = min(minremove, remove)\n    print(minremove)", "import math\nimport collections\n\ndef read_list() -> list:\n    return [int(i) for i in input().strip().split()]\n\ndef read_num() -> int:\n    return int(input().strip())\nt = read_num()\nwhile t > 0:\n    t -= 1\n    n = read_num()\n    arr = read_list()\n    cnt = collections.Counter(arr)\n    appear_times_cnt = collections.Counter(cnt.values())\n    remove_needs = [(k, v) for (k, v) in appear_times_cnt.items()]\n    l = len(remove_needs)\n    ans = float('inf')\n    for i in range(l):\n        tmp = 0\n        for j in range(l):\n            if remove_needs[j][0] - remove_needs[i][0] < 0:\n                tmp += remove_needs[j][0] * remove_needs[j][1]\n            else:\n                tmp += min(remove_needs[j][0] - remove_needs[i][0], remove_needs[j][0]) * remove_needs[j][1]\n        ans = min(tmp, ans)\n    print(ans)", "def main():\n    t = int(input())\n    result = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        cnt = {}\n        for val in a:\n            cnt[val] = cnt.get(val, 0) + 1\n        cnt_ordered = sorted(cnt.values())\n        cnt_ordered_n = len(cnt_ordered)\n        s = 0\n        same_val_cnt = 0\n        last_val = -1\n        ans = 10 ** 7\n        for (i, val) in enumerate(cnt_ordered):\n            s += val\n            if last_val == val:\n                same_val_cnt += 1\n            else:\n                same_val_cnt = 1\n            last_val = val\n            cnt_less = s - same_val_cnt * val\n            cnt_more = n - s\n            ans = min(ans, cnt_less + cnt_more - val * (cnt_ordered_n - i - 1))\n        result.append(str(ans))\n    print('\\n'.join(result))\nmain()", "def solve(A, n):\n    freq = {}\n    for a in A:\n        freq[a] = freq.get(a, 0) + 1\n    freq = {k: f for (k, f) in sorted(freq.items(), key=lambda item: item[1])}\n    freqLength = len(freq)\n    minRemoval = n\n    i = 0\n    for (k, f) in freq.items():\n        minRemoval = min(n - (freqLength - i) * f, minRemoval)\n        i += 1\n    return minRemoval\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    result = solve(A, n)\n    print(result)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for x in a:\n        d[x] += 1\n    c = sorted(list(d.values()))\n    csum = sum(c)\n    t = 0\n    m = len(c)\n    ans = None\n    for (i, x) in enumerate(c):\n        ca = csum - x * (m - i) + t\n        if ans is None or ans > ca:\n            ans = ca\n        t += x\n        csum -= x\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [int(ele) for ele in input().split()]\n    map_ = defaultdict(int)\n    for n in A:\n        map_[n] += 1\n    min_ = min(map_.values())\n    saved = 0\n    values = sorted(map_.values())\n    for (i, v) in enumerate(values):\n        saved = max(saved, v * (len(map_) - i))\n    print(sum(map_.values()) - saved)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = []\n    cr = a[0]\n    cnt = 1\n    for i in range(1, n):\n        if a[i] == cr:\n            cnt += 1\n        else:\n            b.append(cnt)\n            cnt = 1\n            cr = a[i]\n    b.append(cnt)\n    b.sort()\n    c = [b[0]]\n    d = []\n    cr = b[0]\n    cnt = 1\n    for i in range(1, len(b)):\n        if b[i] == cr:\n            cnt += 1\n        else:\n            d.append(cnt)\n            cnt = 1\n            cr = b[i]\n            c.append(cr)\n    d.append(cnt)\n    ans = []\n    for i in range(len(c)):\n        sm = 0\n        for j in range(i):\n            sm += c[j] * d[j]\n        for j in range(i + 1, len(c)):\n            sm += (c[j] - c[i]) * d[j]\n        ans.append(sm)\n    print(min(ans))", "import math\nimport heapq\n\ndef S():\n    return input()\n\ndef M():\n    return map(int, input().split())\n\ndef I():\n    return int(S())\n\ndef L():\n    return list(M())\nfor _ in range(I()):\n    n = I()\n    l = L()\n    (di, d) = ({}, {})\n    c = 0\n    for i in range(n):\n        di[l[i]] = di.get(l[i], 0) + 1\n        d[di[l[i]]] = d.get(di[l[i]], 0) + 1\n    m = -1\n    for k in d:\n        if k * d[k] > m:\n            m = k * d[k]\n    print(n - m)", "for o in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    b = []\n    cnt = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            cnt += 1\n        else:\n            b.append(cnt)\n            cnt = 1\n    b.append(cnt)\n    b.sort()\n    s = sum(b)\n    n = len(b)\n    ans = [s - (n - i) * b[i] for i in range(n)]\n    print(min(ans))", "t = int(input())\nfor i in range(t):\n    ret = []\n    freq_of_nums = {}\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for num in arr:\n        if num not in freq_of_nums:\n            freq_of_nums[num] = 1\n        elif num in freq_of_nums:\n            freq_of_nums[num] += 1\n    ff = [0] * (n + 1)\n    for val in freq_of_nums.values():\n        ff[val] += 1\n    ans = 0\n    mc = 0\n    for c in range(1, n + 1):\n        ans = max(ans, c * (len(freq_of_nums) - mc))\n        mc += ff[c]\n    print(n - ans)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = 0\n    cnt = {}\n    g = [0] * (n + 1)\n    ans = n\n    for x in a:\n        if x in cnt:\n            cnt[x] = cnt[x] + 1\n        else:\n            cnt[x] = 1\n        g[cnt[x]] = g[cnt[x]] + 1\n        ans = min(ans, n - g[cnt[x]] * cnt[x])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = {}\n    for i in a:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    d = sorted(d.values())\n    ans = 10 ** 6\n    size = len(d)\n    ps = 0\n    for i in range(len(d)):\n        ans = min(ans, ps + n - size * d[i])\n        n -= d[i]\n        size -= 1\n        ps += d[i]\n    print(ans)", "def solve():\n    _ = int(input())\n    a = list(map(int, input().split()))\n    f = {}\n    for x in a:\n        if x in f:\n            f[x] += 1\n        else:\n            f[x] = 1\n    d = list(f.values())\n    d.sort()\n    n = len(d)\n    p = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        p[i] = p[i - 1] + d[i - 1]\n    s = p[n]\n    for i in range(n):\n        s = min(s, p[i] + p[n] - p[i + 1] - d[i] * (n - i - 1))\n    print(s)\ntests = int(input())\nfor test in range(tests):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = dict()\n    for i in range(n):\n        if a[i] in dic.keys():\n            dic[a[i]] += 1\n        else:\n            dic[a[i]] = 1\n    nums = []\n    for i in dic.values():\n        nums.append(i)\n    nums.sort()\n    SUM = sum(nums)\n    ans = SUM\n    left = 0\n    for i in range(len(nums)):\n        temp = SUM - nums[i] * (len(nums) - i)\n        ans = min(temp, ans)\n    print(ans)", "def solve(arr, n, ans):\n    counts = {}\n    for i in arr:\n        if i not in counts.keys():\n            counts[i] = 0\n        counts[i] += 1\n    arr = []\n    for i in counts.keys():\n        arr.append(counts[i])\n    min_val = float('inf')\n    arr.sort()\n    prev = 0\n    for i in range(len(arr)):\n        x = arr[i]\n        rem = n - prev - arr[i]\n        min_val = min(min_val, prev + rem - x * (len(arr) - i - 1))\n        prev += arr[i]\n    ans.append(str(min_val))\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        solve(arr, n, ans)\n    print('\\n'.join(ans))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = dict()\n    for i in range(n):\n        if a[i] in dic.keys():\n            dic[a[i]] += 1\n        else:\n            dic[a[i]] = 1\n    nums = []\n    for i in dic.values():\n        nums.append(i)\n    nums.sort()\n    SUM = sum(nums)\n    ans = SUM\n    left = 0\n    for i in range(len(nums)):\n        temp = SUM - nums[i] * (len(nums) - i)\n        ans = min(temp, ans)\n    print(ans)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt_obj = Counter(Counter(a).values())\n    cnt = [cnt_obj[i] for i in range(n + 2)]\n    left = [0] * (n + 2)\n    right = [0] * (n + 2)\n    for i in range(1, n + 1):\n        left[i] = left[i - 1] + i * cnt[i]\n    c = 0\n    for i in range(n, 0, -1):\n        right[i] = right[i + 1] + c\n        c += cnt[i]\n    res = n\n    for i in range(n, 0, -1):\n        res = min(res, left[i - 1] + right[i])\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import Counter\nfor x in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    x = Counter(m)\n    a = []\n    for i in x:\n        a.append(x[i])\n    a.sort()\n    mi = n + 1\n    for (i, v) in enumerate(a):\n        mi = min(mi, n - (len(a) - i) * v)\n    print(mi)", "from collections import Counter\nT = int(input())\nfor case in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    counter = Counter(a)\n    arr = list(counter.values())\n    arr.sort()\n    presum = [0]\n    for i in range(len(arr)):\n        presum.append(presum[-1] + arr[i])\n    ans = float('inf')\n    m = len(arr)\n    for i in range(m):\n        temp = presum[i]\n        temp += presum[m] - presum[i + 1] - arr[i] * (m - 1 - i)\n        ans = min(ans, temp)\n    print(ans)", "import math\nnumero_casos = int(input(''))\nfor i in range(numero_casos):\n    n = int(input(''))\n    numeros = list(input('').split(' '))\n    mapa = dict()\n    for i in range(n):\n        if numeros[i] in mapa:\n            mapa[numeros[i]] += 1\n        else:\n            mapa[numeros[i]] = 1\n    mapa_ordenado = dict(sorted(mapa.items(), key=lambda x: x[1], reverse=True))\n    indice = 0\n    sup = 0\n    infe = n\n    toret = n + 1\n    for (key, value) in mapa_ordenado.items():\n        infe = infe - value\n        toret = min(toret, infe + sup - indice * value)\n        sup = sup + value\n        indice += 1\n    print(toret)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = 0\n    cnt = {}\n    g = {}\n    ans = n\n    for x in a:\n        if x in cnt:\n            cnt[x] = cnt[x] + 1\n        else:\n            cnt[x] = 1\n        if cnt[x] in g:\n            g[cnt[x]] = g[cnt[x]] + 1\n        else:\n            g[cnt[x]] = 1\n        ans = min(ans, n - g[cnt[x]] * cnt[x])\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = Counter(a)\n    dict = {}\n    for i in d:\n        if d[i] in dict:\n            dict[d[i]] += 1\n        else:\n            dict[d[i]] = 1\n    c = [d[i] for i in d]\n    c = list(set(c))\n    c.sort()\n    ans = n\n    s = len(set(a))\n    for ele in range(len(c)):\n        i = c[ele]\n        tmp = dict[i] * i + (s - dict[i]) * i\n        s -= dict[i]\n        ans = min(ans, n - tmp)\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    i = 0\n    b = []\n    while i < n:\n        c = a[i]\n        j = i + 1\n        while j < n and a[j] == c:\n            j += 1\n        b.append(j - i)\n        i = j\n    b.sort()\n    res = n\n    s = 0\n    z = 0\n    left = n\n    for i in range(len(b) - 1, -1, -1):\n        s += b[i]\n        z += 1\n        left -= b[i]\n        can = s - b[i] * z + left\n        res = min(res, can)\n    print(res)\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    d = dict()\n    for i in L:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    L = list(d.values())\n    n = len(L)\n    L.sort()\n    if n == 1:\n        print(0)\n        continue\n    sm = [L[0]] * n\n    dp = [0] * n\n    for i in range(1, n):\n        sm[i] = sm[i - 1] + L[i]\n    dp[0] = sm[-1] - sm[0] - L[0] * (n - 1)\n    dp[n - 1] = sm[-2]\n    for i in range(1, n - 1):\n        dp[i] = sm[i - 1] + (sm[-1] - sm[i]) - L[i] * (n - 1 - i)\n    print(min(dp))", "T = int(input())\nfor _ in range(T):\n    input()\n    numbers = [int(x) for x in input().split()]\n    counts = {}\n    for x in numbers:\n        try:\n            counts[x] += 1\n        except KeyError:\n            counts[x] = 1\n    counts = [0] + [value for (_, value) in counts.items()]\n    counts = sorted(counts)\n    lhs = 0\n    rhs = sum(counts)\n    min_tot = lhs + rhs\n    for (i, x) in enumerate(counts[1:]):\n        diff = x - counts[i]\n        lhs += counts[i]\n        rhs -= (len(counts) - i - 1) * diff\n        if rhs + lhs < min_tot:\n            min_tot = rhs + lhs\n    print(min_tot)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    d = {}\n    for num in a:\n        d[num] = d.get(num, 0) + 1\n    a = sorted([y for (x, y) in d.items()])\n    left_items = n\n    k = len(a)\n    ans = 2e+18\n    removed_items = 0\n    for i in range(len(a)):\n        ans = min(ans, removed_items + left_items - (k - i) * a[i])\n        left_items -= a[i]\n        removed_items += a[i]\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = defaultdict(lambda : 0)\n    for el in a:\n        dic[el] += 1\n    cou = list(dic.values())\n    cou.sort()\n    ans = float('inf')\n    sumcou = sum(cou)\n    nextsum = 0\n    prevcou = 0\n    for i in range(len(cou) - 1, -1, -1):\n        sumcou -= cou[i]\n        tempans = sumcou + nextsum - prevcou * cou[i]\n        ans = min(ans, tempans)\n        nextsum += cou[i]\n        prevcou += 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    occ = []\n    occ = list(Counter(l).values())\n    occ.sort()\n    size = len(occ)\n    behind = [0] * size\n    s = 0\n    i = 0\n    while i < size:\n        cur = occ[i]\n        add = 0\n        while i < size and cur == occ[i]:\n            behind[i] = s\n            add += occ[i]\n            i += 1\n        s += add\n    sum_ahead = [0] * size\n    ahead_sum = 0\n    i = size - 1\n    while i >= 0:\n        freq = size - 1 - i\n        cur_ans = ahead_sum - freq * occ[i]\n        sum_add = 0\n        cur = occ[i]\n        while i >= 0 and cur == occ[i]:\n            sum_add += occ[i]\n            sum_ahead[i] = cur_ans\n            i -= 1\n        ahead_sum += sum_add\n    ans = float('inf')\n    for i in range(size):\n        ans = min(ans, sum_ahead[i] + behind[i])\n    print(ans)", "def count(l):\n    a = []\n    m = 1\n    for i in range(len(l) - 1):\n        if l[i + 1] == l[i]:\n            m += 1\n        else:\n            a += [m]\n            m = 1\n    return a + [m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    l = sorted(count(a))\n    k = count(l)\n    m = max(k)\n    x = []\n    for i in range(len(l)):\n        x += [len(a) - (len(l) - i) * l[i]]\n    print(min(x))"]