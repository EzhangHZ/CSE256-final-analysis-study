["import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    length = inp()\n    array = inlt()\n    for i in range(length - 1, -1, -1):\n        if i + array[i] < length:\n            array[i] = array[i] + array[i + array[i]]\n    print(max(array))\nt = inp()\nfor _ in range(t):\n    main()", "import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    length = inp()\n    array = inlt()\n    for i in range(length - 1, -1, -1):\n        newPlace = i + array[i]\n        if newPlace < length:\n            array[i] += array[newPlace]\n    print(max(array))\nt = inp()\nfor _ in range(t):\n    main()", "def longJumps(n, array):\n    ansArray = [None] * n\n    for x in reversed(range(n)):\n        if array[x] + x >= n:\n            ansArray[x] = array[x]\n        else:\n            ansArray[x] = array[x] + ansArray[x + array[x]]\n    return max(ansArray)\nt = int(input())\nfinal = []\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    final.append(longJumps(n, l))\nfor _ in range(t):\n    print(final[_])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + w[i] < n:\n            w[i] += w[i + w[i]]\n    print(max(w))", "import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    length = inp()\n    array = inlt()\n    max_ = array[0]\n    for i in range(length - 1, -1, -1):\n        newPlace = i + array[i]\n        if newPlace < length:\n            array[i] += array[newPlace]\n        max_ = max(max_, array[i])\n    print(max_)\nt = inp()\nfor _ in range(t):\n    main()", "def main():\n    from sys import stdin, stdout\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = [0 for x in range(n)]\n        for index in range(n - 1, -1, -1):\n            score = a[index]\n            score += b[index + score] if index + score < n else 0\n            b[index] = score\n        print(f'{max(b)}\\n')\nmain()", "def main():\n    from sys import stdin, stdout\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for index in range(n - 1, -1, -1):\n            if a[index] + index < n:\n                a[index] += a[index + a[index]]\n        print(f'{max(a)}\\n')\nmain()", "def process(a):\n    N = len(a)\n    dp = [0] * N\n    for i in range(N - 1, -1, -1):\n        dp[i] = a[i] + (dp[i + a[i]] if i + a[i] < N else 0)\n    return max(dp)\nt = int(input())\nans = []\nfor _ in range(t):\n    n = input()\n    a = [int(i) for i in input().split(' ')]\n    ans.append(process(a))\nfor i in ans:\n    print(i)", "list_ans = []\nfor i in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list2 = [0] * n\n    for i in range(n - 1, -1, -1):\n        list2[i] = list1[i]\n        if i + list1[i] < n:\n            list2[i] += list2[i + list1[i]]\n    list_ans.append(max(list2))\nfor item in list_ans:\n    print(item)", "import sys\n\ndef maxResult(array, n):\n    output = [0] * n\n    for i in range(n - 1, -1, -1):\n        delta = array[i]\n        if i + delta >= n:\n            output[i] = delta\n        else:\n            output[i] = output[i + delta] + delta\n    return max(output)\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        n = int(sys.stdin.readline().strip())\n        array = list(map(int, sys.stdin.readline().strip().split(' ')))\n        print(maxResult(array, n))\nmain()", "def get_input():\n    arr = input().split()\n    res = []\n    for i in arr:\n        res.append(int(i))\n    return res\n\ndef maximum_score(arr, n):\n    value_array = [0] * n\n    for i in range(n - 1, -1, -1):\n        if arr[i] + i > n - 1:\n            value_array[i] = arr[i]\n        else:\n            value_array[i] = arr[i] + value_array[arr[i] + i]\n    return max(value_array)\nno_tests = int(input())\nres = []\nfor i in range(no_tests):\n    n = int(input())\n    arr = get_input()\n    res.append(maximum_score(arr, n))\nfor each in res:\n    print(each)", "def solve_v2(n, arr):\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = arr[i]\n        j = i + arr[i]\n        if j < n:\n            dp[i] += dp[j]\n    return max(dp)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve_v2(n, a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = nums\n    for i in range(n - 1, -1, -1):\n        if i + nums[i] < n:\n            dp[i] += dp[i + nums[i]]\n    print(max(dp))", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))\nfor _ in range(int(input())):\n    solve()", "def do(vs, dp):\n    i = len(vs) - 2\n    dp[-1] = vs[-1]\n    while i >= 0:\n        next_ind = i + vs[i]\n        if next_ind >= len(vs):\n            dp[i] = vs[i]\n        else:\n            dp[i] = vs[i] + dp[next_ind]\n        i -= 1\n    return max(dp)\n\ndef get_case():\n    vs = []\n    for i in range(200000):\n        if i % 2 == 0:\n            vs.append(1)\n        else:\n            vs.append(2)\n    return vs\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        vs = list(map(int, input().split()))\n        dp = [-1] * len(vs)\n        print(do(vs, dp))\nmain()", "def find_max_leap(n, a):\n    i = n - 1\n    b = [0] * n\n    while i >= 0:\n        b[i] = a[i] + (b[i + a[i]] if i + a[i] < n else 0)\n        i -= 1\n    return max(b)\nt = int(input())\nfor t_i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(find_max_leap(n, a))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    res = 0\n    for x in a:\n        res = max(res, x)\n    print(res)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def func(A):\n    dp = [-1 for _ in range(len(A))]\n    for i in reversed(range(len(A))):\n        a = A[i]\n        if i + a >= len(A):\n            dp[i] = a\n        else:\n            dp[i] = a + dp[i + a]\n    return max(dp)\nx = int(input())\na = []\nfor _ in range(x):\n    n = int(input())\n    a.append(list(map(int, input().split())))\nfor i in a:\n    print(func(i))", "def main(input_fcn=input):\n    n_test = int(input_fcn())\n    for i_test in range(n_test):\n        input_fcn()\n        X = list(map(int, input_fcn().split()))\n        R = []\n        for (i, x) in enumerate(X[::-1]):\n            r = x\n            if i >= x:\n                r += R[i - x]\n            R.append(r)\n        print(max(R))\nmain()", "def answer(n, ary):\n    v = [False] * (n + 1)\n    v[0] = True\n    ary.insert(0, 0)\n    max_score = 0\n    for i in range(1, n + 1, 1):\n        score = 0\n        while v[i] == False:\n            v[i] = True\n            score += ary[i]\n            i += ary[i]\n            if i > n:\n                i = 0\n        if score > max_score:\n            max_score = score\n    return max_score\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    ary = [0] * t\n    for j in range(t):\n        n[j] = int(input())\n        ary[j] = [int(i) for i in input().split()]\n    for j in range(t):\n        print(answer(n[j], ary[j]))\nmain()", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(5 * 10 ** 5)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef div2(x):\n    ans = 1\n    while x % 2 == 0:\n        x //= 2\n        ans *= 2\n    return ans\n\ndef solve():\n    n = II()\n    a_list = LI()\n    dp = [0 for _ in range(n)]\n    for i in range(0, n)[::-1]:\n        dp[i] = a_list[i]\n        if i + a_list[i] < n:\n            dp[i] += dp[i + a_list[i]]\n    return max(dp)\n\ndef main():\n    t = II()\n    res = list()\n    for _ in range(t):\n        res.append(solve())\n    for ans in res:\n        print(ans)\n    return 0\nmain()", "for x in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "for i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    for i in range(a - 1, -1, -1):\n        if i + b[i] >= a:\n            continue\n        b[i] = b[i] + b[i + b[i]]\n    print(max(b))", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for j in range(n - 1, -1, -1):\n        if j + a[j] < n:\n            a[j] += a[j + a[j]]\n    print(max(a))", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "for _ in range(0, int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    for i in range(n, 0, -1):\n        if i + a[i] > n:\n            continue\n        a[i] += a[i + a[i]]\n    print(max(a))", "def encontrar_melhor_score(a):\n    n = len(a)\n    S = [0] * n\n    melhor_score = 0\n    for i in range(n - 1, -1, -1):\n        score = a[i]\n        if i + a[i] < n:\n            score += S[i + a[i]]\n        if score > melhor_score:\n            melhor_score = score\n        S[i] = score\n    print(melhor_score)\nt = int(input())\nfor i in range(t):\n    n = input()\n    a = [int(x) for x in input().split(' ')]\n    encontrar_melhor_score(a)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * n\n    dp[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        if arr[i] + i > n - 1:\n            dp[i] = arr[i]\n        else:\n            dp[i] = arr[i] + dp[arr[i] + i]\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "from sys import stdin\ninput = stdin.readline\nfor Pythonic__Python in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if l[i] + i >= n:\n            ans = max(ans, l[i])\n        else:\n            l[i] = l[i] + l[l[i] + i]\n            ans = max(ans, l[i])\n    print(ans)", "def get_max_points(v):\n    lookup = [0] * len(v)\n    for i in range(len(v) - 1, -1, -1):\n        lookup[i] = v[i]\n        j = i + v[i]\n        if j < len(v):\n            lookup[i] += lookup[j]\n    return max(lookup)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        input()\n        v = [int(e) for e in input().split(' ')]\n        print(get_max_points(v))\nmain()", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    array = [int(num) for num in input().split(' ', n - 1)]\n    lista = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + array[i] >= n:\n            lista[i] = array[i]\n        else:\n            lista[i] = lista[i + array[i]] + array[i]\n    print(max(lista))", "t = int(input())\n_scores = [0 for i in range(0, t)]\nfor i in range(0, t):\n    n_input = int(input())\n    a_input = input().split(' ')[:n_input]\n    a = [int(ai) for ai in a_input]\n    _accumulator = [0 for _ in range(0, n_input)]\n    for chip in reversed(range(0, n_input)):\n        if chip + a[chip] < n_input:\n            _accumulator[chip] = a[chip] + _accumulator[chip + a[chip]]\n        else:\n            _accumulator[chip] = a[chip]\n    _scores[i] = max(_accumulator)\nfor score in _scores:\n    print(score)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0 for i in range(n)]\n    ans[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        if arr[i] > n - 1 - i:\n            ans[i] = arr[i]\n        else:\n            ans[i] = arr[i] + ans[i + arr[i]]\n    print(max(ans))\nwhile t:\n    solve()\n    t -= 1", "def solve(a, n):\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] += a[i]\n        j = i + a[i]\n        if j < n:\n            dp[i] += dp[j]\n        else:\n            pass\n    s = max(dp)\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = solve(a, n)\n    print(x)", "def longJumps(n: int, a: [int]) -> int:\n    ans = 0\n    for i in reversed(range(n)):\n        if i + a[i] < n:\n            a[i] += a[a[i] + i]\n        ans = max(ans, a[i])\n    return ans\nrep = int(input())\nfor _ in range(rep):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(longJumps(n, a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    result = [0] + list1\n    for i in range(n, 0, -1):\n        result[i] += result[i + result[i]] if i + result[i] <= n else 0\n    print(max(result))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + l[i] < n:\n            l[i] += l[i + l[i]]\n    print(max(l))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        maxx = [0] * n\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                maxx[i] = arr[i]\n            elif i + arr[i] < n:\n                maxx[i] = arr[i] + maxx[i + arr[i]]\n            else:\n                maxx[i] = arr[i]\n        get_print_int(max(maxx))\nsolve()", "from sys import stdin, stdout\ninput = stdin.readline\nimport sys\nsys.setrecursionlimit(200007)\nfrom collections import defaultdict as dd\nimport math\n\ndef geti():\n    return map(int, input().strip().split())\n\ndef getl():\n    return list(map(int, input().strip().split()))\n\ndef getis():\n    return map(str, input().strip().split())\n\ndef getls():\n    return list(map(str, input().strip().split()))\n\ndef gets():\n    return input().strip()\n\ndef geta():\n    return int(input())\n\ndef print_s(s):\n    stdout.write(s + '\\n')\n\ndef solve():\n    for _ in range(geta()):\n        n = geta()\n        a = getl()\n        for i in range(n - 1, -1, -1):\n            if i + a[i] < n:\n                a[i] += a[i + a[i]]\n        print(max(a))\nsolve()", "import sys\n\ndef solve(nums):\n    n = len(nums)\n    i = n - 1\n    res = 0\n    while i >= 0:\n        if i + nums[i] < n:\n            nums[i] += nums[i + nums[i]]\n        res = max(res, nums[i])\n        i -= 1\n    return res\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    _ = int(sys.stdin.readline().rstrip())\n    nums = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n    print(solve(nums))", "import sys\nimport math\n\ndef ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    ls = ints()\n    c = []\n    j = 0\n    for item in ls[::-1]:\n        if item > j:\n            c.append(item)\n        else:\n            c.append(item + c[j - item])\n        j += 1\n    print(max(c))", "def solve(n, nums):\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        if nums[i] + i < n:\n            dp[i] = nums[i] + dp[i + nums[i]]\n        else:\n            dp[i] = nums[i]\n    return max(dp)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    print(solve(n, nums))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    d = [0] * n\n    a = list(map(int, input().split()))\n    choix = False\n    for i in range(n - 1, -1, -1):\n        if a[i] + i < n:\n            d[i] = d[a[i] + i] + a[i]\n        else:\n            d[i] = a[i]\n    print(max(d))", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + [int(x) for x in input().split()]\n    for i in range(n, 0, -1):\n        if i + a[i] <= n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "def listInput():\n    return list(map(int, input().split()))\n\ndef integerInput():\n    return int(input())\n\ndef stringInput():\n    return list(input())\n\ndef dfs(i):\n    if i > len(array):\n        return 0\n    print(memo)\n    if i in memo:\n        return memo[i]\n    score = array[i - 1]\n    score += dfs(i + score)\n    memo[i] = score\n    return score\n\ndef solve(array, n):\n    dp = [0] * (n + 1)\n    score = array[-1]\n    dp[-1] = array[-1]\n    for i in range(n - 1, 0, -1):\n        dp[i] = array[i]\n        if i + array[i] <= n:\n            dp[i] += dp[i + array[i]]\n        score = max(score, dp[i])\n    return score\ntest_cases = integerInput()\nfor _ in range(test_cases):\n    n = integerInput()\n    array = [0] + listInput()\n    memo = {}\n    print(solve(array, n))", "for z in range(int(input())):\n    n = int(input())\n    l = [0] + [int(x) for x in input().split()]\n    for i in range(n, 0, -1):\n        l[i] += l[i + l[i]] if i + l[i] <= n else 0\n    print(max(l))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = [0] * n\n    for i in range(n - 1, -1, -1):\n        summ[i] = a[i] + (summ[i + a[i]] if i + a[i] < n else 0)\n    print(max(summ))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(a)\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            b[i] += b[i + a[i]]\n    print(max(b))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    x = int(input())\n    (*li,) = map(int, input().split())\n    for i in range(x - 1, -1, -1):\n        if i + li[i] < x:\n            li[i] += li[i + li[i]]\n    print(max(li))", "def solution(l):\n    n = len(l)\n    d = {}\n    for i in range(n - 1, -1, -1):\n        next_val = i + l[i]\n        if next_val >= n:\n            d[i] = l[i]\n        else:\n            d[i] = l[i] + d[next_val]\n    print(max(d.values()))\nT = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    l = list(map(int, input().split()))\n    solution(l)", "def solution(n, l):\n    d = [0 for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        next_val = i + l[i]\n        if next_val >= n:\n            d[i] = l[i]\n        else:\n            d[i] = l[i] + d[next_val]\n    print(max(d))\nT = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    l = list(map(int, input().split()))\n    solution(n, l)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n - 2, -1, -1):\n        if i + l[i] >= n:\n            continue\n        else:\n            l[i] += l[i + l[i]]\n    print(max(l))", "import time\n\ndef ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef number():\n    return int(input())\n\ndef numbers():\n    return [int(item) for item in input().split()]\n\ndef word():\n    return input()\n\ndef words():\n    return [item for item in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef f(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if i + arr[i] < len(arr):\n            arr[i] += arr[i + arr[i]]\n    return max(arr)\nfor i in range(number()):\n    n = number()\n    print(f(numbers()))", "import time\n\ndef ass(a, b):\n    print(f'Assertion error: {a} != {b}' if a != b else 'OK')\n\ndef number():\n    return int(input())\n\ndef numbers():\n    return [int(item) for item in input().split()]\n\ndef word():\n    return input()\n\ndef words():\n    return [item for item in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef f(n, arr):\n    for i in range(n - 1, -1, -1):\n        index = i + arr[i]\n        if index < n:\n            arr[i] += arr[index]\n    return max(arr)\nfor i in range(number()):\n    n = number()\n    print(f(n, numbers()))", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom sys import stdin, stdout\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache\nimport bisect\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations, combinations\nmod = 10 ** 9 + 7\ninf = math.inf\n\ndef solve(nums):\n    dp = nums.copy()\n    for i in range(n - 1, -1, -1):\n        if i + nums[i] < n:\n            dp[i] = dp[i + nums[i]] + nums[i]\n    return max(dp)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    line = stdin.readline()\n    nums = list(map(int, line.split(' ')))\n    print(solve(nums))", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    results = [0] * n\n    for i in range(n):\n        if a[i] > i:\n            results[i] = a[i]\n        else:\n            results[i] = a[i] + results[i - a[i]]\n    print(max(results))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if arr[i] + i < n:\n            arr[i] += arr[arr[i] + i]\n    print(max(arr))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = [0] * n\n    for i in range(n - 1, -1, -1):\n        m[i] = l[i]\n        p = i + l[i]\n        if p < n:\n            m[i] = m[i] + m[p]\n    print(max(m))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] <= n - 1:\n            arr[i] += arr[int(i + arr[i])]\n    print(max(arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    ans[-1] = a[-1]\n    for i in range(n - 2, -1, -1):\n        ans[i] = a[i] + (ans[i + a[i]] if i + a[i] < n else 0)\n    print(max(ans))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    score = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        score[i] = a[i]\n        j = a[i] + i\n        if j < n:\n            score[i] += score[j]\n    print(max(score))\n    t -= 1", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    alist = [int(i) for i in input().split()]\n    dp = [0 for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        ind = i + alist[i]\n        if ind >= n:\n            dp[i] = alist[i]\n        else:\n            dp[i] = alist[i] + dp[ind]\n    print(max(dp))", "def solve():\n    l = int(input())\n    lst = list(map(int, input().strip().split()))[:l]\n    dp = [0 for i in range(l)]\n    for i in range(l - 1, -1, -1):\n        dp[i] = lst[i]\n        j = i + lst[i]\n        if j < l:\n            dp[i] += dp[j]\n    return max(dp)\nn = int(input())\nfor i in range(n):\n    print(solve())", "def longJumps(vetor):\n    maior = -1000\n    resultado = []\n    tam = len(vetor)\n    for i in range(tam - 1, -1, -1):\n        pontuacao = 0\n        cont = i\n        if i + vetor[i] < tam:\n            pontuacao = vetor[i + vetor[i]]\n            vetor[i] += pontuacao\n        if vetor[i] > maior:\n            maior = vetor[i]\n        else:\n            maior = maior\n    return maior\nn = 0\nvet = []\nn = int(input())\nfor i in range(n):\n    ni = int(input())\n    vet = input().split()\n    parseint = list(map(int, vet))\n    print(longJumps(parseint))", "def longJumps(numbers, n):\n    dpTable = [-1 for i in range(n)]\n    maxScore = 0\n    for i in range(n - 1, -1, -1):\n        score = 0\n        if numbers[i] + i + 1 > n:\n            score = numbers[i]\n        else:\n            index = numbers[i] + i\n            score = numbers[i] + dpTable[index]\n        dpTable[i] = score\n        if score > maxScore:\n            maxScore = score\n    return maxScore\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    numbers = list(map(int, input().strip().split()))\n    print(longJumps(numbers, n))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = a[i]\n        if i + a[i] < n:\n            dp[i] += dp[i + a[i]]\n    print(max(dp))", "t = int(input())\nresult = []\nfor b in range(t):\n    n = int(input())\n    tab = list(map(int, input().split(' ')))\n    test = []\n    for i in range(n - 1, -1, -1):\n        score = i + tab[i]\n        if score > n - 1:\n            test.append(tab[i])\n        else:\n            test.append(test[n - 1 - score] + tab[i])\n    result.append(max(test))\nfor i in result:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    n = len(a)\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "def ans():\n    testcases = int(input())\n    for _ in range(testcases):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        maxi = 0\n        for i in range(n - 1, -1, -1):\n            total = 0\n            total += nums[i]\n            if total + i < n:\n                total += nums[i + nums[i]]\n            nums[i] = total\n            maxi = max(maxi, nums[i])\n        print(maxi)\nans()", "def solve():\n    n = int(input())\n    array = input().split()\n    a = n - 1\n    while a >= 0:\n        array[a] = int(array[a])\n        a -= 1\n    score = [0] * n\n    i = n - 1\n    while i >= 0:\n        if i + array[i] >= n:\n            score[i] = array[i]\n        else:\n            score[i] = array[i] + score[i + array[i]]\n        i -= 1\n    print(max(score))\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a\n    for i in range(n)[::-1]:\n        if i + a[i] < n:\n            b[i] += b[i + a[i]]\n    print(max(b))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "def solve(a, n):\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] = a[i] + a[i + a[i]]\n    print(max(a))\nfor testis in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(a, n)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "def solve(l):\n    n = len(l)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = l[i]\n        j = i + l[i]\n        if j < n:\n            dp[i] += dp[j]\n    return max(dp)\n\ndef main():\n    p = int(input())\n    for i in range(p):\n        _ = input()\n        l = [int(_) for _ in input().split()]\n        print(solve(l))\nmain()", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] < n:\n            arr[i] += arr[i + arr[i]]\n    print(max(arr))", "def cut(lst):\n    n = len(lst)\n    l = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + lst[i] > n - 1:\n            l[i] = lst[i]\n        else:\n            l[i] = l[i + lst[i]] + lst[i]\n    print(max(l))\nt = int(input())\nfor i in range(t):\n    input()\n    l = list(map(int, input().split()))\n    cut(l)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    i = len(a)\n    while i:\n        i -= 1\n        j = i + a[i]\n        a[i] += sum(a[j:j + 1])\n    print(max(a))", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = getint()\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        if i + a[i] > n - 1:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i + a[i]] + a[i]\n    print(max(dp))\nfor _ in range(int(input())):\n    solve()", "def find_max_score(array, n):\n    max_score = [float('-inf')] * n\n    max_score[-1] = array[-1]\n    for i in range(n - 2, -1, -1):\n        if i + array[i] > n - 1:\n            max_score[i] = array[i]\n        else:\n            max_score[i] = array[i] + max_score[i + array[i]]\n    return max(max_score)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = find_max_score(a, n)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = list()\n    k = 0\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    for i in range(n - 1, -1, -1):\n        if i + a[i] < n:\n            a[i] += a[i + a[i]]\n    print(max(a))", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1, -1, -1):\n        transition = i + a[i]\n        if transition < n:\n            a[i] += a[transition]\n    print(max(a))", "def longJumps(n: int, numbers: list):\n    dp = [0] * n\n    currMax = -1\n    for (index, num) in enumerate(numbers):\n        if index + num >= n:\n            currMax = max(dp[index] + num, currMax)\n        else:\n            dp[index + num] = max(dp[index + num], dp[index] + num)\n    return currMax\nfor _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    print(longJumps(n, numbers))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    dp = [0 for _ in range(n)]\n    dp[-1] = s[-1]\n    for i in range(n - 1, -1, -1):\n        dp[i] = s[i]\n        j = i + s[i]\n        if j < n:\n            dp[i] += dp[j]\n    print(max(dp))"]