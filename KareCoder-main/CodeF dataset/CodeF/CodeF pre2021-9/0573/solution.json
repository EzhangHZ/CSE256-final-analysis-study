["def left(n, string):\n    l0 = [0] * (n + 1)\n    l1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        l0[i] = l1[i - 1] + 1 if string[i - 1] == 'L' else 0\n        l1[i] = l0[i - 1] + 1 if string[i - 1] == 'R' else 0\n    return l0\n\ndef right(n, string):\n    r0 = [0] * (n + 1)\n    r1 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        r0[i] = r1[i + 1] + 1 if string[i] == 'R' else 0\n        r1[i] = r0[i + 1] + 1 if string[i] == 'L' else 0\n    return r0\nfor i in range(int(input())):\n    n = int(input())\n    string = input()\n    (r, l) = (right(n, string), left(n, string))\n    print(' '.join(map(str, [1 + r[i] + l[i] for i in range(n + 1)])))", "def journey(n, s):\n    dp_odd = [0]\n    dp_even = [0]\n    for i in range(n):\n        if s[i] == 'L':\n            dp_odd.append(1 + dp_even[i])\n            dp_even.append(0)\n        else:\n            dp_even.append(1 + dp_odd[i])\n            dp_odd.append(0)\n    dp_odd_right = [0]\n    dp_even_right = [0]\n    for i in range(n):\n        idx = n - i - 1\n        if s[idx] == 'R':\n            dp_odd_right.append(1 + dp_even_right[i])\n            dp_even_right.append(0)\n        else:\n            dp_even_right.append(1 + dp_odd_right[i])\n            dp_odd_right.append(0)\n    dp_odd_right.reverse()\n    dp_even_right.reverse()\n    res = ''\n    for i in range(n + 1):\n        res += str(dp_odd[i] + dp_odd_right[i] + 1) + ' '\n    return res\nnum_test_cases = int(input())\nfor i in range(num_test_cases):\n    n = int(input())\n    s = input()\n    print(journey(n, s))", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readCase():\n    return readString()\n\ndef find_end(p, directions):\n    target = 'R'\n    while p < len(directions):\n        if directions[p] == target:\n            p += 1\n            if target == 'R':\n                target = 'L'\n            else:\n                target = 'R'\n        else:\n            return p\n    return p\n\ndef solve(n, directions):\n    results = [0 for _ in range(n)]\n    p = 0\n    while p < n:\n        reachable = 1\n        if p != 0 and directions[p - 1] == 'L':\n            reachable += 1\n        new_p = find_end(p, directions)\n        reachable += new_p - p\n        for t in range(p, new_p + 1):\n            if (t - p) % 2 == 0:\n                results[t] = reachable\n            else:\n                results[t] = 1\n        if new_p < n - 1 and directions[new_p] == 'R':\n            p = new_p\n        else:\n            p = new_p + 1\n    return ' '.join((str(x) for x in results))\ncases = readInt()\nfor case in range(cases):\n    n = readInt()\n    directions = list(readString())\n    print(solve(n + 1, directions))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s = input().strip()\n    ans = [1] * (n + 1)\n    st1 = []\n    for i in range(n):\n        if s[i] == 'R':\n            st1.append(i)\n        if i < n - 1 and s[i] == s[i + 1] or i == n - 1:\n            while st1:\n                v = st1.pop()\n                ans[v] += i + 1 - v\n    st2 = []\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'L':\n            st2.append(i + 1)\n        if i > 0 and s[i] == s[i - 1] or i == 0:\n            while st2:\n                v = st2.pop()\n                ans[v] += v - i\n    return ans\nfor _ in range(int(input())):\n    print(*solve())", "l_dp0 = [0 for x in range(300001)]\nl_dp1 = [0 for x in range(300001)]\nr_dp0 = [0 for x in range(300001)]\nr_dp1 = [0 for x in range(300001)]\n\ndef reset(n):\n    for i in range(n + 1):\n        l_dp0[i] = 0\n        l_dp1[i] = 0\n        r_dp0[i] = 0\n        r_dp1[i] = 0\n\ndef solve():\n    n = int(input())\n    arr = input().rstrip()\n    reset(n)\n    l_dp0[0] = 1\n    l_dp1[0] = 1\n    for i in range(1, n + 1):\n        l_dp0[i] = l_dp1[i - 1] + 1 if arr[i - 1] == 'L' else 1\n        l_dp1[i] = 1 if arr[i - 1] == 'L' else l_dp0[i - 1] + 1\n    r_dp0[n] = 1\n    r_dp1[n] = 1\n    for i in reversed(range(n)):\n        r_dp0[i] = r_dp1[i + 1] + 1 if arr[i] == 'R' else 1\n        r_dp1[i] = 1 if arr[i] == 'R' else r_dp0[i + 1] + 1\n    ans = [str(l_dp0[i] + r_dp0[i] - 1) for i in range(n + 1)]\n    print(' '.join(ans))\n\ndef main():\n    T = int(input())\n    for c in range(T):\n        solve()\nmain()", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    a = [1] * (n + 1)\n    b = [1] * (n + 1)\n    for (i, c) in enumerate(s):\n        if c == 'L':\n            a[i + 1] = b[i] + 1\n        else:\n            b[i + 1] = a[i] + 1\n    for (i, c) in reversed(list(enumerate(s))):\n        if c == 'L':\n            b[i] = a[i + 1]\n        else:\n            a[i] = b[i + 1]\n    print(*a)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    a = [1] * (n + 1)\n    b = [1] * (n + 1)\n    for (i, c) in enumerate(s):\n        if c == 'L':\n            a[i + 1] = b[i] + 1\n        else:\n            b[i + 1] = a[i] + 1\n    for (i, c) in reversed(list(enumerate(s))):\n        if c == 'L':\n            b[i] = a[i + 1]\n        else:\n            a[i] = b[i + 1]\n    print(*a)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, s):\n    go_right_even = [1 for _ in range(n + 1)]\n    go_right_odd = [1 for _ in range(n + 1)]\n    go_left_even = [1 for _ in range(n + 1)]\n    go_left_odd = [1 for _ in range(n + 1)]\n    sol = []\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            go_right_even[i] = go_right_odd[i + 1] + 1\n        if s[i] == 'L':\n            go_right_odd[i] = go_right_even[i + 1] + 1\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            go_left_even[i] = go_left_odd[i - 1] + 1\n        if s[i - 1] == 'R':\n            go_left_odd[i] = go_left_even[i - 1] + 1\n    sol = [go_right_even[i] + go_left_even[i] - 1 for i in range(n + 1)]\n    print(*sol)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    s = input()\n    solution(n, s)", "from sys import stdin\nnii = lambda : map(int, stdin.readline().split())\nlnii = lambda : list(map(int, stdin.readline().split()))\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    s = input()\n    dp_l = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            if i - 2 >= 0 and s[i - 2] == 'R':\n                dp_l[i] = dp_l[i - 2] + 2\n            else:\n                dp_l[i] = 1\n        else:\n            dp_l[i] = 0\n    s = s[::-1]\n    dp_r = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == 'R':\n            if i - 2 >= 0 and s[i - 2] == 'L':\n                dp_r[i] = dp_r[i - 2] + 2\n            else:\n                dp_r[i] = 1\n        else:\n            dp_r[i] = 0\n    dp_r = dp_r[::-1]\n    ans = [i + j + 1 for (i, j) in zip(dp_l, dp_r)]\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    a = [1] * (n + 1)\n    b = [1] * (n + 1)\n    for (i, c) in enumerate(s):\n        if c == 'L':\n            a[i + 1] = b[i] + 1\n        else:\n            b[i + 1] = a[i] + 1\n    for (i, c) in reversed(list(enumerate(s))):\n        if c == 'L':\n            b[i] = a[i + 1]\n        else:\n            a[i] = b[i + 1]\n    print(*a)", "def calc():\n    n = int(input())\n    arr = input()\n    ans_t = [0] * (n + 1)\n    ans_n = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if arr[i - 1] == 'L':\n            ans_n[i] = ans_t[i - 1] + 1\n            ans_t[i] = 0\n        else:\n            ans_n[i] = 0\n            ans_t[i] = ans_n[i - 1] + 1\n    ans = ans_n\n    ans_t = [0] * (n + 1)\n    ans_n = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if arr[-i] == 'R':\n            ans_n[-i - 1] = ans_t[-i] + 1\n            ans_t[-i - 1] = 0\n        else:\n            ans_t[-i - 1] = ans_n[-i] + 1\n            ans_n[-i - 1] = 0\n    for i in range(n + 1):\n        print(ans[i] + 1 + ans_n[i], end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    calc()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    right = [0] * (n + 1)\n    left = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        if i + 1 > n or s[i] == 'L':\n            right[i] = i\n        elif i + 2 > n or s[i + 1] == 'R':\n            right[i] = i + 1\n        else:\n            right[i] = right[i + 2]\n    for i in range(n + 1):\n        if i - 1 < 0 or s[i - 1] == 'R':\n            left[i] = i\n        elif i - 2 < 0 or s[i - 2] == 'L':\n            left[i] = i - 1\n        else:\n            left[i] = left[i - 2]\n    ans = [0] * (n + 1)\n    for i in range(n + 1):\n        ans[i] = right[i] - left[i] + 1\n    print(*ans)", "for y in range(int(input())):\n    n = int(input())\n    s = input()\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            if i - 2 < 0:\n                a[i] = 1\n            elif a[i - 1] == 0:\n                a[i] = a[i - 2] + 2\n            else:\n                a[i] = 1\n        else:\n            pass\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            if i + 2 > n:\n                b[i] = 1\n            elif b[i + 1] == 0:\n                b[i] = b[i + 2] + 2\n            else:\n                b[i] = 1\n        else:\n            pass\n    for i in range(n + 1):\n        print(1 + a[i] + b[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    left = [i for i in range(n + 1)]\n    right = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            left[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            left[i] = i - 1\n        else:\n            left[i] = left[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            right[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            right[i] = i + 1\n        else:\n            right[i] = right[i + 2]\n    ans = [0] * (n + 1)\n    for i in range(n + 1):\n        ans[i] = right[i] - left[i] + 1\n    print(*ans)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    l1 = [0] * (n + 1)\n    l2 = [0] * (n + 1)\n    s = input()\n    if s[0] == 'L':\n        l1[1] += 1\n    for j in range(1, n):\n        if s[j] == 'L':\n            if l1[j] == 0:\n                l1[j + 1] = 2 + l1[j - 1]\n            else:\n                l1[j + 1] = 1\n    if s[n - 1] == 'R':\n        l2[n - 1] += 1\n    for k in range(n - 2, -1, -1):\n        if s[k] == 'R':\n            if l2[k + 1] == 0:\n                l2[k] = 2 + l2[k + 2]\n            else:\n                l2[k] = 1\n    for m in range(n + 1):\n        print(l1[m] + l2[m] + 1, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "tc = int(input())\nfor t in range(tc):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dpl = [i for i in range(n + 1)]\n    dpr = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or s[i - 1] == 'R':\n            dpl[i] = i\n        elif i == 1 or s[i - 2] == 'L':\n            dpl[i] = i - 1\n        else:\n            dpl[i] = dpl[i - 2]\n    for i in range(n, -1, -1):\n        if i == n or s[i] == 'L':\n            dpr[i] = i\n        elif i == n - 1 or s[i + 1] == 'R':\n            dpr[i] = i + 1\n        else:\n            dpr[i] = dpr[i + 2]\n    ans = [dpr[i] - dpl[i] + 1 for i in range(n + 1)]\n    print(*ans)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    l = [0]\n    for j in range(n):\n        if j > 0:\n            if s[j] == 'L' and s[j - 1] == 'R':\n                l.append(l[-2] + 2)\n            elif s[j] == 'L':\n                l.append(1)\n            else:\n                l.append(0)\n        elif s[j] == 'L':\n            l.append(1)\n        else:\n            l.append(0)\n    r = [0]\n    for j in range(n - 1, -1, -1):\n        if j < n - 1:\n            if s[j] == 'R' and s[j + 1] == 'L':\n                r.append(r[-2] + 2)\n            elif s[j] == 'R':\n                r.append(1)\n            else:\n                r.append(0)\n        elif s[j] == 'R':\n            r.append(1)\n        else:\n            r.append(0)\n    r.reverse()\n    for i in range(n + 1):\n        print(l[i] + r[i] + 1, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    t1 = [0]\n    if s[0] == 'L':\n        t1.append(1)\n    else:\n        t1.append(0)\n    cnt = 1\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            cnt += 1\n        else:\n            cnt = 1\n        if s[i] == 'L':\n            t1.append(cnt)\n        else:\n            t1.append(0)\n    t2 = [0]\n    if s[-1] == 'R':\n        t2.append(1)\n    else:\n        t2.append(0)\n    cnt = 1\n    for i in range(n - 2, -1, -1):\n        if s[i] != s[i + 1]:\n            cnt += 1\n        else:\n            cnt = 1\n        if s[i] == 'R':\n            t2.append(cnt)\n        else:\n            t2.append(0)\n    for i in range(n + 1):\n        print(t1[i] + t2[n - i] + 1, end=' ')\n    print()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    dpl = [1 for i in range(n + 1)]\n    dpr = [1 for i in range(n + 1)]\n    for i in range(0, n):\n        if s[i] == 'L':\n            dpl[i + 1] += 1\n            if i - 1 >= 0 and s[i - 1] == 'R':\n                dpl[i + 1] += dpl[i - 1]\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            dpr[i] += 1\n            if i + 1 <= n - 1 and s[i + 1] == 'L':\n                dpr[i] += dpr[i + 2]\n    for i in range(len(dpr)):\n        print(dpr[i] + dpl[i] - 1, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    st = input()\n    dp_left = [i for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == 0 or st[i - 1] == 'R':\n            dp_left[i] = i\n        elif i == 1 or st[i - 2] == 'L':\n            dp_left[i] = i - 1\n        else:\n            dp_left[i] = dp_left[i - 2]\n    dp_right = [i for i in range(n + 1)]\n    for i in range(n, -1, -1):\n        if i == n or st[i] == 'L':\n            dp_right[i] = i\n        elif i == n - 1 or st[i + 1] == 'R':\n            dp_right[i] = i + 1\n        else:\n            dp_right[i] = dp_right[i + 2]\n    print(end='\\n')\n    for i in range(n + 1):\n        print(dp_right[i] - dp_left[i] + 1, end=' ')", "def solve():\n    n = int(input())\n    s = list(map(lambda d: 0 if d == 'R' else 1, input()))\n    right_span = [[1, 1] for _ in range(n + 1)]\n    left_span = [[1, 1] for _ in range(n + 1)]\n    assert len(s) == n\n    for i in range(n - 1, -1, -1):\n        right_span[i][0] = 1 + right_span[i + 1][1] if s[i] == 0 else 1\n        right_span[i][1] = 1 + right_span[i + 1][0] if s[i] == 1 else 1\n    for i in range(1, n + 1):\n        left_span[i][0] = 1 + left_span[i - 1][1] if s[i - 1] == 1 else 1\n        left_span[i][1] = 1 + left_span[i - 1][0] if s[i - 1] == 0 else 1\n    print(' '.join(map(lambda x: str(x[0][0] + x[1][0] - 1), zip(left_span, right_span))))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    pref = [[0, 0] for i in range(n + 1)]\n    suff = [[0, 0] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == 'R':\n            pref[i][0] = 0\n            pref[i][1] = pref[i - 1][0] + 1\n        else:\n            pref[i][0] = pref[i - 1][1] + 1\n            pref[i][1] = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'L':\n            suff[i][0] = 0\n            suff[i][1] = suff[i + 1][0] + 1\n        else:\n            suff[i][0] = suff[i + 1][1] + 1\n            suff[i][1] = 0\n    print(' '.join((str(pref[i][0] + suff[i][0] + 1) for i in range(n + 1))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = list(input())\n    lst1 = [0] * (n + 1)\n    lst2 = [0] * (n + 1)\n    lst1[-1] = 0\n    i = n\n    while i > 0:\n        if i == n:\n            if r[n - 1] == 'R':\n                lst1[i - 1] = 1\n        elif r[i - 1] == 'R':\n            if r[i - 1] != r[i]:\n                lst1[i - 1] = 2 + lst1[i + 1]\n            else:\n                lst1[i - 1] = 1\n        else:\n            lst1[i - 1] = 0\n        i -= 1\n    for i in range(1, n + 1):\n        if i == 1:\n            if r[i - 1] == 'L':\n                lst2[i] = 1\n        elif r[i - 1] == 'L':\n            if r[i - 1] != r[i - 2]:\n                lst2[i] = 2 + lst2[i - 2]\n            else:\n                lst2[i] = 1\n        else:\n            lst2[i] = 0\n    lst3 = [lst1[i] + lst2[i] + 1 for i in range(n + 1)]\n    for i in range(len(lst3)):\n        print(lst3[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    pref = [[0, 0] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == 'R':\n            pref[i][0] = 0\n            pref[i][1] = pref[i - 1][0] + 1\n        else:\n            pref[i][0] = pref[i - 1][1] + 1\n            pref[i][1] = 0\n    suff = [[0, 0] for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'L':\n            suff[i][0] = 0\n            suff[i][1] = suff[i + 1][0] + 1\n        else:\n            suff[i][0] = suff[i + 1][1] + 1\n            suff[i][1] = 0\n    print(' '.join((str(pref[i][0] + suff[i][0] + 1) for i in range(n + 1))))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = input()\n    storel = [1 for i in range(n)]\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            storel[i] += storel[i - 1]\n    b = a[::-1]\n    storer = [1 for i in range(n)]\n    for i in range(1, n):\n        if b[i] != b[i - 1]:\n            storer[i] += storer[i - 1]\n    storer = storer[::-1]\n    for i in range(n + 1):\n        ans = 1\n        if i != n and a[i] == 'R':\n            ans += storer[i]\n        if i != 0 and a[i - 1] == 'L':\n            ans += storel[i - 1]\n        print(ans, end=' ')\n    print()", "for tt in range(int(input())):\n    n = int(input())\n    s = 'x' + input()\n    cnt = 0\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i] != s[i - 1]:\n            a[i] = a[i - 1] + 1\n        else:\n            a[i] = 1\n    for i in range(n, -1, -1):\n        if i + 1 < n + 1 and s[i] != s[i + 1]:\n            b[i] = b[i + 1] + 1\n        else:\n            b[i] = 1\n    for i in range(n + 1):\n        ans = 1\n        if i + 1 < n + 1 and s[i + 1] == 'R':\n            ans += b[i + 1]\n        if s[i] == 'L':\n            ans += a[i]\n        print(ans, end=' ')\n    print()", "from math import ceil\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    rin = [-1 if s == 'L' else 1 for s in input()]\n    ldp = []\n    rdp = []\n    l = r = 0\n    lv = rv = 0\n    for i in range(n + 1):\n        if i == 0:\n            ldp.append(0)\n            l = 1\n            lv = rin[0]\n            rdp.append(0)\n            r = 1\n            rv = rin[n - 1]\n            continue\n        ldp.append(l)\n        rdp.append(r)\n        if i == n:\n            break\n        if rin[i] == lv:\n            l = 1\n        else:\n            l += 1\n        lv = rin[i]\n        if rin[n - i - 1] == rv:\n            r = 1\n        else:\n            r += 1\n        rv = rin[n - i - 1]\n    dp = [1 for x in range(n + 1)]\n    rdp.reverse()\n    for i in range(n + 1):\n        if i != 0 and rin[i - 1] == -1:\n            dp[i] += ldp[i]\n            pass\n        if i != n and rin[i] == 1:\n            dp[i] += rdp[i]\n            pass\n        print(dp[i], end=' ')\n    print()", "import sys\nfrom collections import deque\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    A = [[1, 1] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            A[i][0] = 1 + A[i - 1][1]\n        else:\n            A[i][1] = 1 + A[i - 1][0]\n    B = [[1, 1] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            B[i][0] = 1 + B[i + 1][1]\n        else:\n            B[i][1] = 1 + B[i + 1][0]\n    ans = [a[0] + b[0] - 1 for (a, b) in zip(A, B)]\n    print(*ans)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    A = [[1, 1] for _ in range(n + 1)]\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            A[i][0] = 1 + A[i - 1][1]\n        else:\n            A[i][1] = 1 + A[i - 1][0]\n        ans[i] += A[i][0]\n    A = [[1, 1] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            A[i][0] = 1 + A[i + 1][1]\n        else:\n            A[i][1] = 1 + A[i + 1][0]\n        ans[i] += A[i][0] - 1\n    ans[0] += 1\n    print(*ans)", "import sys\nt = int(input())\nfor o in range(0, t, 1):\n    n = int(input())\n    s = input()\n    l = [[-1, -1] for _ in range(n + 1)]\n    r = [[-1, -1] for _ in range(n + 1)]\n    l[0][0] = 0\n    l[0][1] = 0\n    r[n][0] = n\n    r[n][1] = n\n    for a in range(1, n + 1):\n        if s[a - 1] == 'R':\n            l[a][1] = l[a - 1][0]\n            l[a][0] = a\n        else:\n            l[a][0] = l[a - 1][1]\n            l[a][1] = a\n    for a in range(n - 1, -1, -1):\n        if s[a] == 'R':\n            r[a][0] = r[a + 1][1]\n            r[a][1] = a\n        else:\n            r[a][0] = a\n            r[a][1] = r[a + 1][0]\n    for q in range(0, n + 1, 1):\n        print(r[q][0] - l[q][0] + 1, end=' ')\n    print()", "import collections\nimport sys\nimport functools\nimport heapq\nimport bisect\nimport collections\nimport math\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    s = input().strip()\n    right = [[0, 0] for i in range(n)]\n    left = [[0, 0] for i in range(n)]\n    if s[-1] == 'L':\n        right[-1][1] = 1\n    else:\n        right[-1][0] = 1\n    for i in range(n - 2, -1, -1):\n        if s[i] == 'L':\n            right[i][1] = 1 + right[i + 1][0]\n        else:\n            right[i][0] = 1 + right[i + 1][1]\n    if s[0] == 'L':\n        left[0][1] = 1\n    else:\n        left[0][0] = 1\n    for i in range(1, n):\n        if s[i] == 'L':\n            left[i][1] = 1 + left[i - 1][0]\n        else:\n            left[i][0] = 1 + left[i - 1][1]\n    for i in range(n + 1):\n        if i == 0:\n            print(1 + right[i][0], end=' ')\n        elif i == n:\n            print(1 + left[i - 1][1], end=' ')\n        else:\n            print(1 + left[i - 1][1] + right[i][0], end=' ')\n    print()", "import sys\nfrom collections import deque\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    A = [[1, 1] for _ in range(n + 1)]\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == 'L':\n            A[i][0] = 1 + A[i - 1][1]\n        else:\n            A[i][1] = 1 + A[i - 1][0]\n        ans[i] += A[i][0]\n    A = [[1, 1] for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'R':\n            A[i][0] = 1 + A[i + 1][1]\n        else:\n            A[i][1] = 1 + A[i + 1][0]\n        ans[i] += A[i][0] - (1 if i != 0 else 0)\n    print(*ans)", "from sys import stdin\nfrom collections import defaultdict, deque\ninpi = lambda : int(input())\ninps = lambda : input()\n\ndef find(parent, x):\n    while parent[x] != x:\n        parent[x] = parent[parent[x]]\n        x = parent[x]\n    return x\n\ndef solve(n, s):\n    parent = {(i, j): (i, j) for i in range(n + 1) for j in range(2)}\n    for (i, c) in enumerate(s, start=1):\n        t = c == 'L'\n        (a, b) = (find(parent, (i, t ^ 1)), find(parent, (i - 1, t)))\n        parent[a] = b\n    count = defaultdict(int)\n    for i in range(n + 1):\n        for j in range(2):\n            count[find(parent, (i, j))] += 1\n    ans = []\n    for i in range(n + 1):\n        ans.append(str(count[find(parent, (i, 0))]))\n    print(' '.join(ans))\nfor _ in range(inpi()):\n    n = inpi()\n    s = inps()\n    solve(n, s)"]