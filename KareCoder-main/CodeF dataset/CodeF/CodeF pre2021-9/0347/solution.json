["out = []\nfor _ in range(int(input())):\n    n = int(input())\n    data = [x for x in map(int, input().split())]\n    minv = min(data)\n    pos = data.index(minv)\n    out.append('{}'.format(n - 1))\n    for i in range(len(data)):\n        if i != pos:\n            out.append('{} {} {} {}'.format(pos + 1, i + 1, minv, minv + abs(i - pos)))\nprint('\\n'.join(out))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    val = min(data)\n    idx = data.index(val)\n    print(len(data) - 1)\n    for j in range(len(data)):\n        if j == idx:\n            continue\n        print(f'{idx + 1} {j + 1} {val} {val + abs(idx - j)}')", "def solve(arr):\n    print(len(arr) - 1)\n    min_n = min(arr)\n    min_i = arr.index(min_n)\n    for i in range(len(arr)):\n        if i == min_i:\n            continue\n        print(f'{i + 1} {min_i + 1} {min_n + abs(min_i - i)} {min_n}')\nfor _ in range(int(input())):\n    input()\n    arr = list(map(int, input().split()))\n    solve(arr)", "testCases = int(input())\nfor _ in range(testCases):\n    n = int(input())\n    row = input()\n    numbers = [int(x) for x in row.strip().split(' ')]\n    output = []\n    min_ = min(numbers)\n    index = numbers.index(min_)\n    print(n - 1)\n    for i in range(n):\n        if index != i:\n            print(f'{i + 1} {index + 1} {min_ + abs(index - i)} {min_}')", "n = int(input())\nfor i in range(n):\n    input()\n    v = [int(x) for x in input().split()]\n    minNum = min(v)\n    minInd = v.index(min(v))\n    print(len(v) - 1)\n    for (index, j) in enumerate(v):\n        if index == minInd:\n            continue\n        print('{} {} {} {}'.format(minInd + 1, index + 1, minNum, minNum + abs(index - minInd)))\n        j = minNum + abs(index - minInd)", "from math import gcd\ninp = int(input())\nfor _ in range(inp):\n    n = int(input())\n    p = list(map(int, input().split(' ')))\n    minimum = min(p)\n    min_ind = p.index(minimum)\n    print(n - 1)\n    for (i, value) in enumerate(p):\n        if i == min_ind:\n            continue\n        print(str(min_ind + 1) + ' ' + str(i + 1) + ' ' + str(minimum) + ' ' + str(minimum + abs(i - min_ind)))", "from sys import stdin, stdout\nimport math, bisect, heapq\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    n = I()\n    a = L()\n    m = min(a)\n    x = a.index(m)\n    ans = []\n    for i in range(x - 1, -1, -1):\n        ans.append((i + 1, x + 1, m + x - i, m))\n    for i in range(x + 1, n):\n        ans.append((x + 1, i + 1, m, m + i - x))\n    print(len(ans))\n    for i in ans:\n        pr(i)\nfor _ in range(I()):\n    solve()", "import math\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = min(arr)\n    j = arr.index(x)\n    info = []\n    for i in range(n):\n        if i != j:\n            y = x + abs(j - i)\n            info.append([j + 1, i + 1, x, y])\n            arr[i] = y\n    print(len(info))\n    for i in range(len(info)):\n        print(' '.join(map(str, info[i])))\nt = int(input())\nfor i in range(t):\n    main()", "import math\nt = int(input())\nfor _i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mi = min(arr)\n    pos = -1\n    for i in range(n):\n        if arr[i] == mi:\n            pos = i\n            break\n    print(n - 1)\n    for i in range(n):\n        if i == pos:\n            continue\n        print(str(pos + 1) + ' ' + str(i + 1) + ' ' + str(arr[pos]) + ' ' + str(abs(pos - i) + arr[pos]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mini = min(a)\n    index = 0\n    b = mini\n    c = mini\n    print(n - 1)\n    for j in range(n):\n        if mini == a[j]:\n            index = j\n            break\n    for j in range(index - 1, -1, -1):\n        b += 1\n        print(index + 1, j + 1, mini, b)\n    for j in range(index + 1, n):\n        c += 1\n        print(index + 1, j + 1, mini, c)", "import math\ndebug = True\n\ndef pprint(*args, delimiter='#', amount=10):\n    if debug:\n        print('{0} DEBUG {0}'.format(delimiter * amount))\n        print(*args)\n        print('{0} ----- {0}'.format('-' * amount))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    minimal = min(a)\n    index = a.index(minimal)\n    print(n - 1)\n    right = minimal + 1\n    for i in range(index + 1, n):\n        print(index + 1, i + 1, minimal, right)\n        right += 1\n    left = minimal + 1\n    for i in range(index - 1, -1, -1):\n        print(index + 1, i + 1, minimal, left)\n        left += 1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ipn()\n    a = ipl()\n    i = a.index(min(a))\n    print(n - 1)\n    for j in range(n):\n        if i != j:\n            print(i + 1, j + 1, a[i], a[i] + abs(i - j))\nt = ipn()\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [*map(int, input().split())]\n    x = a.index(min(a))\n    print(n - 1)\n    for i in range(n):\n        if i != x:\n            print(x + 1, i + 1, a[x], a[x] + abs(i - x))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mini = min(a)\n    index = 0\n    b = mini\n    c = mini\n    print(n - 1)\n    for j in range(n):\n        if mini == a[j]:\n            index = j\n            break\n    for j in range(index - 1, -1, -1):\n        b += 1\n        print(j + 1, index + 1, b, mini)\n    for j in range(index + 1, n):\n        c += 1\n        print(j + 1, index + 1, c, mini)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ind = lst.index(min(lst))\n    print(n - 1)\n    mi = min(lst)\n    for j in range(ind + 1, n):\n        print(ind + 1, j + 1, mi, mi + abs(j - ind))\n    for j in range(0, ind):\n        print(ind + 1, j + 1, mi, mi + abs(j - ind))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = 0\n    for i in range(n):\n        if a[i] < a[pos]:\n            pos = i\n    k = a[pos] + 1\n    print(n - 1)\n    for i in range(pos + 1, n):\n        print(pos + 1, i + 1, a[pos], k)\n        k += 1\n    k = a[pos] + 1\n    for i in range(pos - 1, -1, -1):\n        print(pos + 1, i + 1, a[pos], k)\n        k += 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = arr[-1]\n    if arr[-1] % 2 == 0:\n        temp = arr[-1] + 1\n    print(n - 1)\n    c = min(arr)\n    d = arr.index(c)\n    for i in range(n):\n        if i == d:\n            continue\n        else:\n            print(d + 1, i + 1, c, c + abs(d - i))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n - 1)\n    (val, idx) = min(((val, idx) for (idx, val) in enumerate(a)))\n    counter = 1\n    for i in range(idx + 1, n):\n        a[i] = val + counter\n        counter += 1\n        print(idx + 1, i + 1, val, a[i])\n    counter = 1\n    for i in range(idx - 1, -1, -1):\n        a[i] = val + counter\n        counter += 1\n        print(idx + 1, i + 1, val, a[i])"]