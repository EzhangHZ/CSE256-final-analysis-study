["def main():\n    import sys\n    from collections import deque\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10 ** 6)\n    (n, x) = [int(x) for x in input().strip().split()]\n    dn = [int(x) for x in input().strip().split()]\n    dn_hug = [d * (d + 1) // 2 for d in dn]\n    days = 0\n    hugs = 0\n    i = 0\n    if days < x:\n        for i in range(-1, -1 - n, -1):\n            days += dn[i]\n            hugs += dn_hug[i]\n            if days >= x:\n                break\n    j = i % n\n    ans = 0\n    for i in range(n):\n        days += dn[i]\n        hugs += dn_hug[i]\n        while days - dn[j] >= x:\n            days -= dn[j]\n            hugs -= dn_hug[j]\n            j = (j + 1) % n\n        if days != x:\n            ans = max(ans, hugs - (days - x) * (days - x + 1) // 2)\n        else:\n            ans = max(ans, hugs)\n    print(ans)\nmain()", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    (n, x) = nm()\n    d = nl() * 2\n    f = [x * (x + 1) // 2 for x in d]\n    for i in range(2 * n - 1):\n        f[i + 1] += f[i]\n    l = -1\n    s = sum(d[:n])\n    ans = 0\n    for r in range(n, 2 * n):\n        s += d[r]\n        while s > x:\n            l += 1\n            s -= d[l]\n        ans = max(ans, f[r] - f[l] + d[l] * (d[l] + 1) // 2 - (d[l] - x + s) * (d[l] - x + s + 1) // 2)\n    print(ans)\n    return\nsolve()", "import sys\ninput = sys.stdin.readline\n\ndef sum_upto_n(n):\n    return n * (n + 1) // 2\n\ndef main():\n    test = 1\n    for _ in range(test):\n        (n, x) = map(int, input().split())\n        ara = [int(num) for num in input().split()]\n        ara = ara * 2\n        days = x\n        hugs = 0\n        ans = 0\n        right = 2 * n - 1\n        left = 2 * n - 1\n        while right >= n:\n            while ara[left] < days:\n                hugs += sum_upto_n(ara[left])\n                days -= ara[left]\n                left -= 1\n            ans = max(ans, hugs + sum_upto_n(ara[left]) - sum_upto_n(ara[left] - days))\n            if left != right:\n                days += ara[right]\n                hugs -= sum_upto_n(ara[right])\n                right -= 1\n            else:\n                left -= 1\n                right -= 1\n        print(ans)\nmain()", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    (n, x) = nm()\n    d = nl() * 2\n    f = [x * (x + 1) // 2 for x in d]\n    for i in range(2 * n - 1):\n        f[i + 1] += f[i]\n    l = -1\n    s = sum(d[:n])\n    ans = 0\n    for r in range(n, 2 * n):\n        s += d[r]\n        while s > x:\n            l += 1\n            s -= d[l]\n        ans = max(ans, f[r] - f[l] + d[l] * (d[l] + 1) // 2 - (d[l] - x + s) * (d[l] - x + s + 1) // 2)\n    print(ans)\n    return\nsolve()", "(n, x) = map(int, input().split())\nd = list(map(int, input().split()))\n(i, j, days, t, ans) = (0, 0, 0, 0, 0)\nfor i in range(n):\n    while days < x:\n        days += d[j]\n        t += d[j] * (d[j] + 1) // 2\n        j = (j + 1) % n\n    ans = max(ans, t - (days - x) * (days - x + 1) // 2)\n    days -= d[i]\n    t -= d[i] * (d[i] + 1) // 2\n    i += 1\nprint(ans)", "(n, x) = map(int, input().split())\ndays = list(map(int, input().split()))\n(nd, ans, premax, j) = (0, 0, 0, 0)\nfor i in range(n):\n    while nd < x:\n        nd += days[j]\n        premax += days[j] * (days[j] + 1) // 2\n        j = (j + 1) % n\n    ans = max(ans, premax - (nd - x) * (nd - x + 1) // 2)\n    nd -= days[i]\n    premax -= days[i] * (days[i] + 1) // 2\nprint(ans)", "(n, x) = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr = arr * 2\ni = 0\nj = 0\ndays = 0\nres = 0\nans = 0\nwhile i < n:\n    while days < x:\n        days += arr[j]\n        res += arr[j] * (arr[j] + 1) // 2\n        j += 1\n    e = days - x\n    temp = res - e * (e + 1) // 2\n    ans = max(ans, temp)\n    days -= arr[i]\n    res -= arr[i] * (arr[i] + 1) // 2\n    i += 1\nprint(ans)", "(n, x) = [int(a) for a in input().split()]\nd = [int(a) for a in input().split()]\nd += d\ni = n\nj = n\ns = 0\nans = 0\nhug = 0\nwhile s < x:\n    i -= 1\n    hug += d[i] * (d[i] + 1) // 2\n    s += d[i]\nwhile j < len(d):\n    while s < x and j < len(d):\n        s += d[j]\n        hug += d[j] * (d[j] + 1) // 2\n        j += 1\n    while s - d[i] >= x:\n        s -= d[i]\n        hug -= d[i] * (d[i] + 1) // 2\n        i += 1\n    rm = s - x\n    hugs = hug - rm * (rm + 1) // 2\n    ans = max(ans, hugs)\n    s -= d[i]\n    hug -= d[i] * (d[i] + 1) // 2\n    i += 1\nprint(ans)", "(n, x) = map(int, input().split())\nd = list(map(int, input().split()))\nd.extend(d)\nk = c = 0\ni = 2 * n - 1\na = x\nj = i\nif n == 1:\n    print((2 * d[0] - a + 1) * a // 2)\nelse:\n    while i >= n:\n        while a > 0:\n            if d[j] < a:\n                c += d[j] * (d[j] + 1) // 2\n                a -= d[j]\n                j -= 1\n            else:\n                b = c + (2 * d[j] - a + 1) * a // 2\n                if b > k:\n                    k = b\n                if x - a >= d[i]:\n                    a += d[i]\n                    c -= d[i] * (d[i] + 1) // 2\n                i -= 1\n                if j > i:\n                    j = i\n                break\n    print(k)", "def sumprog(a, b):\n    return (a + b) * (b - a + 1) // 2\n(n, x) = map(int, input().split())\nd = list(map(int, input().split())) * 2\nmax_hugs = 0\ni = 0\nj = 0\ndays = 0\nhugs = 0\nwhile i < n:\n    if days + d[j] <= x:\n        days += d[j]\n        hugs += sumprog(1, d[j])\n        j += 1\n    else:\n        max_hugs = max(max_hugs, hugs + sumprog(d[j] - (x - days) + 1, d[j]))\n        hugs -= sumprog(1, d[i])\n        days -= d[i]\n        i += 1\nprint(max_hugs)", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(n, end_day) = rl()\nd = rl()\nstart_month = start_day = end_month = hugs = 0\nwhile end_month < n and end_day >= d[end_month]:\n    hugs += d[end_month] * (d[end_month] + 1) // 2\n    end_day -= d[end_month]\n    end_month += 1\nhugs += end_day * (end_day + 1) // 2\nmax_hugs = hugs\nif end_month < n:\n    while start_month < n:\n        step = min(d[start_month] - start_day, d[end_month] - end_day)\n        hugs += step * (end_day - start_day)\n        start_day += step\n        if start_day >= d[start_month]:\n            start_day = 0\n            start_month += 1\n        end_day += step\n        if end_day >= d[end_month]:\n            end_day = 0\n            end_month += 1\n            if end_month >= n:\n                end_month = 0\n        if hugs > max_hugs:\n            max_hugs = hugs\nprint(max_hugs)", "(n, x) = list(map(int, input().split(' ')))\nnums = list(map(int, input().split(' ')))\nn += n\nnums += nums\nre = 0\nleft = 0\ns = 0\nday = 0\n\ndef awesomeFunc(x):\n    return (1 + x) * x // 2\nfor (i, v) in enumerate(nums):\n    s += awesomeFunc(v)\n    day += v\n    while day - nums[left] > x:\n        day -= nums[left]\n        s -= awesomeFunc(nums[left])\n        left += 1\n    re = max(re, s - awesomeFunc(day - x))\nprint(re)", "(n, x) = map(int, input().split())\nd = list(map(int, input().split()))\n(m, i) = (0, 0)\n(m2, i2) = (0, x)\ns = 0\nwhile i2 > d[m2]:\n    i2 -= d[m2]\n    s += d[m2] * (d[m2] + 1) // 2\n    m2 += 1\ns += i2 * (i2 + 1) // 2\nres = s\nwhile m < n:\n    a = min(d[m2] - i2, d[m] - i)\n    s += a * (i2 - i)\n    res = max(res, s)\n    i += a\n    i2 += a\n    if i >= d[m]:\n        i = 0\n        m += 1\n    if i2 >= d[m2]:\n        i2 = 0\n        m2 = (m2 + 1) % n\nprint(res)", "def sumprog(a, b):\n    return (a + b) * (b - a + 1) // 2\n(n, x) = map(int, input().split())\n(d, max_hugs, i, j, days, hugs) = (list(map(int, input().split())) * 2, 0, 0, 0, 0, 0)\nwhile i < n:\n    if days + d[j] <= x:\n        days += d[j]\n        hugs += sumprog(1, d[j])\n        j += 1\n    else:\n        max_hugs = max(max_hugs, hugs + sumprog(d[j] - (x - days) + 1, d[j]))\n        hugs -= sumprog(1, d[i])\n        days -= d[i]\n        i += 1\nprint(max_hugs)", "(n, d) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nmax_hugs = 0\nstart = n - 1\nend = n - 1\ndays = 0\nhugs = 0\nwhile end >= 0:\n    while days + arr[start] < d:\n        hugs += arr[start] * (arr[start] + 1) // 2\n        days += arr[start]\n        start = (n + start - 1) % n\n    if days < d:\n        extra_days = arr[start] - (d - days)\n        extra_hugs = arr[start] * (arr[start] + 1) // 2 - extra_days * (extra_days + 1) // 2\n    max_hugs = max(max_hugs, hugs + extra_hugs)\n    hugs -= arr[end] * (arr[end] + 1) // 2\n    days -= arr[end]\n    end -= 1\nprint(max_hugs)", "import bisect\n(n, x) = map(int, input().split())\ndays = list(map(int, input().split()))\ndays = days * 2\nds = []\nms = []\nfor i in days:\n    if ds == []:\n        ds.append(i * (i + 1) // 2)\n    else:\n        ds.append(ds[-1] + i * (i + 1) // 2)\n    if ms == []:\n        ms.append(i)\n    else:\n        ms.append(ms[-1] + i)\ni = 2 * n - 1\nans = 0\nwhile i > n - 1:\n    ind = bisect.bisect_right(ms, ms[i] - x) - 1\n    ans = max(ans, ds[i] - ds[ind] - (ms[i] - ms[ind] - x) * (ms[i] - ms[ind] - x + 1) // 2)\n    i -= 1\nprint(ans)", "def sumprog(a, b):\n    return (a + b) * (b - a + 1) // 2\n(n, x) = map(int, input().split())\n(d, max_hugs, i, j, days, hugs) = (list(map(int, input().split())) * 2, 0, 0, 0, 0, 0)\nwhile i < n:\n    if days + d[j] <= x:\n        days += d[j]\n        hugs += sumprog(1, d[j])\n        j += 1\n    else:\n        max_hugs = max(max_hugs, hugs + sumprog(d[j] - (x - days) + 1, d[j]))\n        hugs -= sumprog(1, d[i])\n        days -= d[i]\n        i += 1\nprint(max_hugs)", "def sumprog(a, b):\n    return (a + b) * (b - a + 1) // 2\n(n, x) = map(int, input().split())\n(d, max_hugs, i, j, days, hugs) = (list(map(int, input().split())) * 2, 0, 0, 0, 0, 0)\nwhile i < n:\n    if days + d[j] <= x:\n        days += d[j]\n        hugs += sumprog(1, d[j])\n        j += 1\n    else:\n        max_hugs = max(max_hugs, hugs + sumprog(d[j] - (x - days) + 1, d[j]))\n        hugs -= sumprog(1, d[i])\n        days -= d[i]\n        i += 1\nprint(max_hugs)", "from sys import stdin\n(n, m) = map(int, stdin.readline().strip().split())\ns = list(map(int, stdin.readline().strip().split()))\n\ndef sum(n):\n    return n * (n + 1) // 2\ns = s[::-1]\ns = s + s + s\nacum = [0 for i in range(n + n + 10)]\nacum[0] = s[0]\nfor i in range(len(acum)):\n    acum[i] = acum[i - 1] + s[i % n]\npon = 0\nans = 0\ntot = 0\naux = 0\nfor i in range(n):\n    if i != 0:\n        tot -= s[i - 1]\n        aux -= sum(s[i - 1])\n    while tot < m:\n        tot += s[pon]\n        aux += sum(s[pon])\n        pon += 1\n    y = tot - m\n    ans = max(ans, aux - sum(y))\nprint(ans)", "import sys\nfrom bisect import bisect_right as br\n(n, x) = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\na.extend(a)\nsun = lambda x: x * (x + 1) // 2\nc = [a[0]]\nd = [sun(a[0])]\nfor i in range(n * 2 - 1):\n    c.append(c[i] + a[i + 1])\n    d.append(d[i] + sun(a[i + 1]))\ni = n * 2 - 1\nans = 0\nfor i in range(n * 2 - 1, n - 1, -1):\n    j = br(c, c[i] - x) - 1\n    ans = max(d[i] - d[j] - (c[i] - c[j] - x) * (c[i] - c[j] - x + 1) // 2, ans)\nsys.stdout.write(f'{ans}')", "def sumprog(a, b):\n    return (a + b) * (b - a + 1) // 2\n(n, x) = map(int, input().split())\nd = list(map(int, input().split())) * 2\nmax_hugs = 0\ni = 0\nj = 0\ndays = 0\nhugs = 0\nwhile i < n:\n    if days + d[j] <= x:\n        days += d[j]\n        hugs += sumprog(1, d[j])\n        j += 1\n    else:\n        max_hugs = max(max_hugs, hugs + sumprog(d[j] - (x - days) + 1, d[j]))\n        hugs -= sumprog(1, d[i])\n        days -= d[i]\n        i += 1\nprint(max_hugs)", "def su(x, y):\n    a = y * (y + 1) // 2\n    b = x * (x - 1) // 2\n    return a - b\n(n, x) = map(int, input().split())\nmas = list(map(int, input().split()))\nfor i in range(n):\n    mas.append(mas[i])\nr = n - 1\nl = n - 1\nsuma = 0\nans = 0\nmaxi = 0\nwhile suma <= x:\n    suma += mas[l]\n    ans += su(1, mas[l])\n    l -= 1\nl += 1\nsuma -= mas[l]\nans -= su(1, mas[l])\nr += 1\nsuma += mas[r]\nans += su(1, mas[r])\nfor i in range(n):\n    while suma > x:\n        l += 1\n        suma -= mas[l]\n        ans -= su(1, mas[l])\n    if suma == x:\n        now = ans\n    else:\n        now = ans + su(mas[l] - (x - suma - 1), mas[l])\n    maxi = max(maxi, now)\n    r += 1\n    if r != 2 * n:\n        suma += mas[r]\n        ans += su(1, mas[r])\nprint(maxi)", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\nfrom sys import stdin, stdout\n\ndef sol():\n    (n, td) = rrm()\n    v = rrm()\n    res = 0\n    curr = 0\n    (i, j) = (0, 0)\n    while j < 2 * n:\n        if td > 0:\n            curr += v[j % n] * (v[j % n] + 1) // 2\n            td -= v[j % n]\n            j += 1\n        else:\n            while td + v[i % n] < 0:\n                curr -= v[i % n] * (v[i % n] + 1) // 2\n                td += v[i % n]\n                i += 1\n            x = -td\n            res = max(res, curr - x * (x + 1) // 2)\n            curr -= v[i % n] * (v[i % n] + 1) // 2\n            td += v[i % n]\n            i += 1\n    print(res)\n    return\nsol()", "(n, x) = map(int, input().split())\nd = list(map(int, input().split()))\n(m, i) = (0, 0)\n(m2, i2) = (0, x)\ns = 0\nwhile i2 > d[m2]:\n    i2 -= d[m2]\n    s += d[m2] * (d[m2] + 1) // 2\n    m2 += 1\ns += i2 * (i2 + 1) // 2\nres = s\nwhile m < n:\n    a = min(d[m2] - i2, d[m] - i)\n    s += a * (i2 - i)\n    res = max(res, s)\n    i += a\n    i2 += a\n    if i >= d[m]:\n        i = 0\n        m += 1\n    if i2 >= d[m2]:\n        i2 = 0\n        m2 = (m2 + 1) % n\nprint(res)", "(n, x) = map(int, input().split())\nd = list(map(int, input().split()))\n(m, i) = (0, 0)\n(m2, i2) = (0, x)\ns = 0\nwhile i2 > d[m2]:\n    i2 -= d[m2]\n    s += d[m2] * (d[m2] + 1) // 2\n    m2 += 1\ns += i2 * (i2 + 1) // 2\nres = s\nwhile m < n:\n    a = min(d[m2] - i2, d[m] - i)\n    s += a * (i2 - i)\n    res = max(res, s)\n    i += a\n    i2 += a\n    if i >= d[m]:\n        i = 0\n        m += 1\n    if i2 >= d[m2]:\n        i2 = 0\n        m2 = (m2 + 1) % n\nprint(res)", "from bisect import bisect_right as bi\n(n, x) = list(map(int, input().split()))\nd = list(map(int, input().split()))\ns = 0\na = []\nfor i in range(n - 1, -1, -1):\n    s = s - d[i]\n    a.append(s)\na.sort()\na.append(0)\ns = 0\nfor i in range(n):\n    s = s + d[i]\n    a.append(s)\nb = [0]\ns = 0\nfor i in range(len(d)):\n    s = s + d[i] * (d[i] + 1) // 2\n    b.append(s)\ns = 0\nfor i in range(len(d) - 1, -1, -1):\n    s = s + d[i] * (d[i] + 1) // 2\n    b.append(-s)\nb.sort()\ng = []\nfor i in range(n):\n    c = bi(a, a[i + n + 1] - x)\n    e = a[i + n + 1] - a[c]\n    f = b[i + n + 1] - b[c]\n    e = x - e\n    u = a[c] - a[c - 1]\n    f += u * (u + 1) // 2 - (u - e) * (u - e + 1) // 2\n    g.append(f)\nprint(max(g))", "(N, X) = [int(_) for _ in input().split()]\nD = [int(_) for _ in input().split()]\ndays_per_year = sum(D)\nyear_value = sum([d * (d + 1) // 2 for d in D])\nanswer = year_value * (X // days_per_year)\nX = X % days_per_year\nanswer_year = 0\ni = N\npm = N - 1\npd = D[N - 1]\nc = 0\nto_add = None\nwhile i >= 0:\n    if i < N:\n        c -= D[i] * (D[i] + 1) // 2\n    if to_add is None:\n        to_add = X\n    else:\n        to_add = D[i]\n    while D[pm] - (D[pm] - pd) <= to_add:\n        to_add -= D[pm] - (D[pm] - pd)\n        c += pd * (pd + 1) // 2\n        pm -= 1\n        if pm < 0:\n            pm = N - 1\n        pd = D[pm]\n    h = pd\n    pd -= to_add\n    l = pd\n    c += h * (h + 1) // 2 - l * (l + 1) // 2\n    answer_year = max(answer_year, c)\n    i -= 1\nanswer += answer_year\nprint(answer)", "(n, m) = map(int, input().split())\n\ndef sol(a):\n    a += a\n    b = list(map(lambda x: (1 + x) * x // 2, a))\n    for i in range(1, len(b)):\n        b[i] += b[i - 1]\n    j = n * 2 - 1\n    i = n * 2\n    days = 0\n    hugs = 0\n    ans = 0\n    while j >= 0:\n        while i >= 0 and a[i - 1] + days <= m:\n            days += a[i - 1]\n            i -= 1\n        hugs = b[j]\n        if i > 0:\n            hugs -= b[i - 1]\n        cur = hugs\n        if days < m and i > 0:\n            t = m - days\n            cur = hugs + t * (a[i - 1] - t + 1 + a[i - 1]) // 2\n        ans = max(ans, cur)\n        days -= a[j]\n        j -= 1\n    return ans\nprint(sol(list(map(int, input().split()))))", "import sys, heapq\nfrom collections import *\nfrom functools import lru_cache\nsys.setrecursionlimit(10 ** 6)\nimport operator as op\nfrom functools import reduce\nimport bisect\n\ndef main():\n    (n, x) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    arr += arr.copy()\n    (days, hugs) = ([0] + arr.copy(), [0] + list(map(lambda x: x * (x + 1) // 2, arr)))\n    for i in range(1, 2 * n + 1):\n        days[i] += days[i - 1]\n        hugs[i] += hugs[i - 1]\n    res = 0\n    for i in range(1, 2 * n + 1):\n        y = days[i] - x\n        j = bisect.bisect_right(days, y, 0, i)\n        y -= days[j - 1]\n        res = max(res, hugs[i] - hugs[j - 1] - y * (y + 1) // 2)\n    print(res)\nmain()", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = 1\n\ndef f(x):\n    return x * (x + 1) // 2\nfor _ in range(T):\n    (n, x) = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    d = 2 * d\n    su = list(map(f, d))\n    l = 0\n    r = -1\n    s = 0\n    ans = 0\n    mx = 0\n    while r < 2 * n:\n        if s < x:\n            r += 1\n            if r == 2 * n:\n                continue\n            s += d[r]\n            ans += su[r]\n        else:\n            rem = s - x\n            while 1:\n                if d[l] > rem:\n                    ans -= rem * (rem + 1) // 2\n                    if mx < ans:\n                        mx = ans\n                    ans += rem * (rem + 1) // 2\n                    ans -= su[l]\n                    s -= d[l]\n                    l += 1\n                    break\n                ans -= su[l]\n                rem -= d[l]\n                s -= d[l]\n                l += 1\n    if mx == 0:\n        print(ans)\n        continue\n    print(mx)", "def sum_(x):\n    return x * (x + 1) // 2\n(n, x) = map(int, input().split())\narr = list(map(int, input().split()))\narr.extend(arr)\nstart = 0\nwindow_sum = 0\ndays = 0\nans = 0\nfor i in arr:\n    window_sum += sum_(i)\n    days += i\n    while days > x:\n        window_sum -= sum_(arr[start])\n        days -= arr[start]\n        start += 1\n    if start > 0:\n        ans = max(ans, window_sum + sum_(arr[start - 1]) - sum_(arr[start - 1] - x + days))\nprint(ans)", "def Sum(a):\n    return a * (a + 1) // 2\n(m, x) = map(int, input().split())\nmonth = list(map(int, input().split())) * 2\n(ans, days, start) = (0, 0, 0)\nhugs = 0\nfor i in range(len(month)):\n    hugs += Sum(month[i])\n    days += month[i]\n    while days > x:\n        if days - month[start] < x:\n            break\n        days -= month[start]\n        hugs -= Sum(month[start])\n        start += 1\n    diff = max(0, days - x)\n    ans = max(ans, hugs - Sum(diff))\nprint(ans)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\na = a * 2\n(l, r, ans) = (0, 1, 0)\nsu = a[0]\ndp = a[0] * (a[0] + 1) // 2\nwhile r <= 2 * n:\n    if su >= x:\n        st = l\n        while su - a[l] >= x:\n            su = su - a[l]\n            dp = dp - a[l] * (a[l] + 1) // 2\n            l = l + 1\n        otv = dp\n        otv = otv - (su - x) * (su - x + 1) // 2\n        ans = max(ans, otv)\n        su = su - a[l]\n        dp = dp - a[l] * (a[l] + 1) // 2\n        l = l + 1\n    if r >= 2 * n:\n        break\n    su = su + a[r]\n    dp = dp + a[r] * (a[r] + 1) // 2\n    r = r + 1\nprint(ans)", "import sys\ninput = sys.stdin.readline\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nl = r = 0\nfor i in range(n):\n    a.append(a[i])\n\ndef fuckit(x):\n    return (1 + x) * x // 2\nans = nowd = nows = 0\nwhile r < 2 * n:\n    nowd += a[r]\n    nows += fuckit(a[r])\n    r += 1\n    while nowd - a[l] >= x:\n        nowd -= a[l]\n        nows -= fuckit(a[l])\n        l += 1\n    dif = max(0, nowd - x)\n    ans = max(ans, nows - fuckit(dif))\nprint(ans)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nl = r = 0\nfor i in range(n):\n    a.append(a[i])\n\ndef fuckit(x):\n    return (1 + x) * x // 2\nans = nowd = nows = 0\nwhile r < 2 * n:\n    nowd += a[r]\n    nows += fuckit(a[r])\n    r += 1\n    while nowd - a[l] >= x:\n        nowd -= a[l]\n        nows -= fuckit(a[l])\n        l += 1\n    dif = max(0, nowd - x)\n    ans = max(ans, nows - fuckit(dif))\nprint(ans)", "from bisect import bisect_left, bisect_right\n\ndef solution():\n    (n, x) = map(int, input().split())\n    d = list(map(int, input().split()))\n    for i in range(n):\n        d.append(d[i])\n    n *= 2\n    c = [d[0]] * n\n    dd = [d[0] * (d[0] + 1) // 2] * n\n    answer = 0\n    for i in range(1, n):\n        c[i] = c[i - 1] + d[i]\n        dd[i] = dd[i - 1] + d[i] * (d[i] + 1) // 2\n    for i in range(n):\n        if c[i] >= x:\n            z = bisect_right(c, c[i] - x)\n            days = c[i] - c[z]\n            too = x - days\n            cnt = dd[i] - dd[z]\n            cnt += d[z] * (d[z] + 1) // 2\n            cnt -= (d[z] - too) * (d[z] - too + 1) // 2\n            answer = max(answer, cnt)\n    print(answer)\nsolution()", "import sys\nimport os\nimport heapq\nimport math\ntry:\n    path = './file/input.txt'\n    if os.path.exists(path):\n        sys.stdin = open(path, 'r')\nexcept:\n    pass\nt = 1\n\ndef printd(value):\n    pass\n\ndef case():\n    arr = list(map(int, input().split(' ')))\n    (n, x) = (arr[0], arr[1])\n    arr = list(map(int, input().split(' ')))\n    arr = arr * 2\n    result = [0] * len(arr)\n    total = [0] * len(arr)\n    left = 0\n    right = 0\n    sum = arr[0]\n    result[0] = arr[0]\n    total[0] += int((1 + arr[0]) * arr[0] / 2)\n    while right < n * 2:\n        right += 1\n        if right >= n * 2:\n            break\n        total[right] = total[right - 1]\n        sum += arr[right]\n        result[right] = sum\n        total[right] += int((1 + arr[right]) * arr[right] / 2)\n        while left < right and sum - arr[left] > x:\n            sum -= arr[left]\n            total[right] -= int((1 + arr[left]) * arr[left] / 2)\n            result[right] = sum\n            left += 1\n    answer = 0\n    for index in range(n * 2):\n        if result[index] >= x:\n            diff = result[index] - x\n            value = total[index] - int((1 + diff) * diff / 2)\n            answer = max(answer, value)\n    print(answer)\nfor _ in range(t):\n    case()", "from sys import stdin\ninput = stdin.readline\n(n, m) = map(int, input().split())\nd = [int(x) for x in input().split()] * 2\nd.insert(0, 0)\ndd = [0, d[1]]\nps = [0, d[1] * (d[1] + 1) // 2]\nres = []\nfor x in d[2:]:\n    dd.append(dd[-1] + x)\n    ps.append(ps[-1] + x * (x + 1) // 2)\n(p, w) = (1, 1)\nfor x in range(2 * n + 1):\n    if m <= dd[x]:\n        w = x\n        break\nfor x in range(w, 2 * n + 1):\n    while True:\n        if m <= dd[x] - dd[p - 1] and m > dd[x] - dd[p]:\n            break\n        p += 1\n    now1 = ps[x] - ps[p]\n    now2 = dd[x] - dd[p]\n    now3 = m - now2\n    now4 = d[p]\n    now5 = d[p] - now3\n    now1 += d[p] * (d[p] + 1) // 2 - now5 * (now5 + 1) // 2\n    res.append(now1)\nprint(max(res))", "import bisect\n(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\nl1 = []\nl2 = []\nl1.append(0)\nl2.append(0)\nfor i in range(n, 2 * n):\n    l.append(l[i - n])\nfor i in range(2 * n):\n    l1.append(l[i] + l1[i])\n    l2.append(l[i] * (l[i] + 1) // 2 + l2[i])\nans = 0\nfor i in range(2 * n):\n    if l1[i + 1] >= k:\n        cnt = 0\n        z = bisect.bisect(l1, l1[i + 1] - k)\n        cnt += l2[i + 1] - l2[z]\n        day = k - (l1[i + 1] - l1[z])\n        cnt += l[z - 1] * (l[z - 1] + 1) // 2\n        cnt -= (l[z - 1] - day) * (l[z - 1] - day + 1) // 2\n        ans = max(ans, cnt)\nprint(ans)"]