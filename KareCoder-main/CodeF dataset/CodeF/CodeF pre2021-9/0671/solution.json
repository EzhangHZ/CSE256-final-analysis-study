["def is_poss(x):\n    count = 0\n    odd = True\n    for ai in a:\n        if odd:\n            if ai <= x:\n                count += 1\n                odd = False\n        else:\n            count += 1\n            odd = True\n        if count == k:\n            break\n    if count == k:\n        return True\n    count = 0\n    even = False\n    for ai in a:\n        if even:\n            if ai <= x:\n                count += 1\n                even = False\n        else:\n            count += 1\n            even = True\n        if count == k:\n            break\n    return count == k\n(n, k) = [int(i) for i in input().strip().split()]\na = [int(i) for i in input().strip().split()]\nlo = min(a)\nhi = max(a)\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if is_poss(mid):\n        ans = mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(ans)", "def testing():\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    min_ = 1\n    max_ = 10 ** 9\n    while min_ < max_:\n        target = (min_ + max_) // 2\n        skip = 0\n        count = 0\n        for i in range(len(arr)):\n            if skip or arr[i] <= target:\n                count += 1\n                skip = 1 - skip\n        if count >= k:\n            max_ = target\n            continue\n        skip = 1\n        count = 0\n        for i in range(len(arr)):\n            if skip or arr[i] <= target:\n                count += 1\n                skip = 1 - skip\n        if count >= k:\n            max_ = target\n        else:\n            min_ = target + 1\n    return max_\nprint(testing())", "from sys import stdin\ninput = stdin.readline\n(n, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nmin_ = 1\nmax_ = 10 ** 9\n\ndef works(arr, k, target, skip):\n    count = 0\n    for i in range(len(arr)):\n        if skip or arr[i] <= target:\n            count += 1\n            skip = 1 - skip\n    return count >= k\nwhile min_ < max_:\n    target = (min_ + max_) // 2\n    if works(arr, k, target, 0) or works(arr, k, target, 1):\n        max_ = target\n    else:\n        min_ = target + 1\nprint(max_)", "from sys import stdin\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef check(a, cur, x, k):\n    res = 0\n    for i in range(len(a)):\n        if cur:\n            res += 1\n            cur = 1 - cur\n        elif a[i] <= x:\n            res += 1\n            cur = 1 - cur\n    return res >= k\n\ndef main():\n    (n, k) = rlint()\n    a = rlint()\n    (l, h) = (1, 10 ** 9)\n    while l < h:\n        m = (l + h) // 2\n        if check(a, 0, m, k) or check(a, 1, m, k):\n            h = m\n        else:\n            l = m + 1\n    print(l)\nmain()", "(n, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nmin_ = 1\nmax_ = 10 ** 9\n\ndef works(arr, k, target, skip):\n    count = 0\n    for i in range(len(arr)):\n        if skip or arr[i] <= target:\n            count += 1\n            skip = 1 - skip\n    return count >= k\nwhile min_ < max_:\n    target = (min_ + max_) // 2\n    if works(arr, k, target, 0) or works(arr, k, target, 1):\n        max_ = target\n    else:\n        min_ = target + 1\nprint(max_)", "(n, k) = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\ndef check(limit, p):\n    count = 0\n    for i in range(len(arr)):\n        if p:\n            count += 1\n            p = 0\n        elif arr[i] <= limit:\n            count += 1\n            p = 1\n    return count >= k\nl = 1\nr = 10 ** 9\nans = 0\nwhile l <= r:\n    mid = l + (r - l) // 2\n    if check(mid, 0) or check(mid, 1):\n        ans = mid\n        r = mid - 1\n    else:\n        l = mid + 1\nprint(ans)", "(n, k) = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\na_sorted = sorted(a)\n\ndef check(minn, ans):\n    array = [0]\n    for i in a:\n        if len(array) % 2 == 0:\n            array.append(i)\n        elif i <= minn:\n            array.append(i)\n    if len(array) - 1 >= ans:\n        return True\n    array = [0]\n    for i in a:\n        if len(array) % 2 == 1:\n            array.append(i)\n        elif i <= minn:\n            array.append(i)\n    if len(array) - 1 >= ans:\n        return True\n    return False\nfirst = 0\nlast = len(a_sorted) - 1\nwhile last > first:\n    middle = (last + first) // 2\n    if check(a_sorted[middle], k) == True:\n        last = middle - 1\n    else:\n        first = middle + 1\nif check(a_sorted[0], k) == True:\n    print(a_sorted[0])\nelif check(a_sorted[last], k) == True:\n    print(a_sorted[last])\nelse:\n    print(a_sorted[last + 1])", "def ss_length(arr, x, k, oe):\n    l = 0\n    for i in range(len(arr)):\n        if oe:\n            if arr[i] <= x:\n                l += 1\n                oe ^= 1\n        else:\n            l += 1\n            oe ^= 1\n    return l >= k\n\ndef bin_search(arr, li, hi, k):\n    if li >= hi:\n        return li\n    mi = (li + hi) // 2\n    ss_len_check = ss_length(arr, mi, k, 0) or ss_length(arr, mi, k, 1)\n    if ss_len_check:\n        return bin_search(arr, li, mi, k)\n    else:\n        return bin_search(arr, mi + 1, hi, k)\n(n, k) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nans = bin_search(arr, 1, int(1000000000.0), k)\nprint(ans)", "def find(arr, x, start, k, n):\n    done = start\n    curr = 0\n    for i in range(start, n):\n        if curr == 0:\n            if arr[i] <= x:\n                done += 1\n                curr = 1 - curr\n        else:\n            done += 1\n            curr = 1 - curr\n    if done >= k:\n        return True\n    else:\n        return False\n\ndef binarysearch(arr, n, k):\n    start = 1\n    end = 1000000000\n    last = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if find(arr, mid, 0, k, n) or find(arr, mid, 1, k, n):\n            last = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return last\n\ndef help():\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    ans = binarysearch(arr, n, k)\n    print(ans)\nhelp()", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\n\ndef func(mid, flag, k):\n    count = 0\n    for i in range(n):\n        if flag or arr[i] <= mid:\n            count += 1\n            flag ^= 1\n    if count >= k:\n        return True\n    return False\nlow = 1\nhigh = 10 ** 9\nwhile low < high:\n    mid = (low + high) // 2\n    if func(mid, 0, k) or func(mid, 1, k):\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "def check(m, f, l1, k):\n    cnt = 0\n    for i in range(len(l1)):\n        if l1[i] <= m or cnt % 2 != f:\n            cnt += 1\n    if cnt >= k:\n        ans = 1\n    else:\n        ans = 0\n    return ans\n(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl = 1\nh = 1000000000.0 + 7\nwhile l < h:\n    m = int((l + h) // 2)\n    if check(m, 0, l1, k) == 1 or check(m, 1, l1, k) == 1:\n        h = m\n    else:\n        l = m + 1\nprint(l)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef bs(mid, s, k):\n    count = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            count += 1\n            s ^= 1\n    if count >= k:\n        return True\n    return False\nleft = 0\nright = 1000000000.0\nwhile left < right:\n    mid = int(left + right) // 2\n    if bs(mid, 0, k) or bs(mid, 1, k):\n        right = mid\n    else:\n        left = mid + 1\nprint(left)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "def ss_length(arr, x, k, oe):\n    l = 0\n    for i in range(len(arr)):\n        if oe:\n            if arr[i] <= x:\n                l += 1\n                oe ^= 1\n        else:\n            l += 1\n            oe ^= 1\n    return l >= k\n\ndef bin_search(arr, li, hi, k):\n    if li >= hi:\n        return li\n    mi = (li + hi) // 2\n    ss_len_check = ss_length(arr, mi, k, 0) or ss_length(arr, mi, k, 1)\n    if ss_len_check:\n        return bin_search(arr, li, mi, k)\n    else:\n        return bin_search(arr, mi + 1, hi, k)\n(n, k) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nans = bin_search(arr, 1, 1000000000, k)\nprint(ans)", "def check(x, flag) -> bool:\n    l = 0\n    for i in range(len(a)):\n        if flag or a[i] <= x:\n            l += 1\n            flag ^= 1\n    return l >= k\n(n, k) = input().split()\nn = int(n)\nk = int(k)\na = list(map(int, input().split()))\nl = 0\nr = 1000000007\nwhile l + 1 < r:\n    mid = l + r >> 1\n    if check(mid, 0) or check(mid, 1):\n        r = mid\n    else:\n        l = mid\nprint(r)", "def check(m, f, l1, k):\n    cnt = 0\n    for i in range(len(l1)):\n        if l1[i] <= m or cnt % 2 == f:\n            cnt += 1\n    if cnt >= k:\n        ans = 1\n    else:\n        ans = 0\n    return ans\n(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl = 1\nh = 1000000000.0 + 7\nwhile l < h:\n    m = int((l + h) // 2)\n    if check(m, 0, l1, k) == 1 or check(m, 1, l1, k) == 1:\n        h = m\n    else:\n        l = m + 1\nprint(l)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "def ss_length(arr, x, k, oe):\n    l = 0\n    for i in range(len(arr)):\n        if oe:\n            if arr[i] <= x:\n                l += 1\n                oe ^= 1\n        else:\n            l += 1\n            oe ^= 1\n    return l >= k\n\ndef bin_search(arr, li, hi, k):\n    if li >= hi:\n        return li\n    mi = (li + hi) // 2\n    ss_len_check = ss_length(arr, mi, k, 0) or ss_length(arr, mi, k, 1)\n    if ss_len_check:\n        return bin_search(arr, li, mi, k)\n    else:\n        return bin_search(arr, mi + 1, hi, k)\n(n, k) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nans = bin_search(arr, 1, max(arr) + 1, k)\nprint(ans)", "def check(m, f, l1, k):\n    cnt = 0\n    for i in range(len(l1)):\n        if l1[i] <= m or cnt % 2 != f:\n            cnt += 1\n    if cnt >= k:\n        ans = 1\n    else:\n        ans = 0\n    return ans\n(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl = 1\nh = 1000000000.0 + 7\nwhile l < h:\n    m = int((l + h) // 2)\n    if check(m, 0, l1, k) == 1 or check(m, 1, l1, k) == 1:\n        h = m\n    else:\n        l = m + 1\nprint(l)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\n\ndef binarysearch(mid, s, k):\n    c = 0\n    for i in range(n):\n        if s or a[i] <= mid:\n            c += 1\n            s ^= 1\n    if c >= k:\n        return True\n    return False\nl = 1\nh = 10 ** 9\nwhile l < h:\n    mid = (l + h) // 2\n    if binarysearch(mid, 0, k) or binarysearch(mid, 1, k):\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "def check(m, f, l1, k):\n    cnt = 0\n    for i in range(len(l1)):\n        if l1[i] <= m or cnt % 2 == f:\n            cnt += 1\n    if cnt >= k:\n        ans = 1\n    else:\n        ans = 0\n    return ans\n(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl = 1\nh = 1000000000.0 + 7\nwhile l < h:\n    m = int((l + h) // 2)\n    if check(m, 0, l1, k) == 1 or check(m, 1, l1, k) == 1:\n        h = m\n    else:\n        l = m + 1\nprint(l)", "def check(x, flag) -> bool:\n    l = 0\n    for i in range(len(a)):\n        if flag or a[i] <= x:\n            l += 1\n            flag ^= 1\n    return l >= k\n(n, k) = input().split()\nn = int(n)\nk = int(k)\na = [int(n) for n in input().split()]\nl = 0\nr = 1000000007\nwhile l + 1 < r:\n    mid = l + r >> 1\n    if check(mid, 0) or check(mid, 1):\n        r = mid\n    else:\n        l = mid\nprint(r)"]