["def fatorial(v):\n    soma = 1\n    for i in range(1, v + 1):\n        soma = soma * i\n    return soma\nn = int(input())\nres = fatorial(n - 1) // (n // 2)\nprint(res)", "import math\na = int(input())\nb = math.factorial(a) / (math.factorial(a / 2) * math.factorial(a / 2))\nc = math.factorial(a / 2 - 1)\nd = c / 2\nresult = b * c * d\nprint(int(result))", "from math import factorial\nN = int(input())\nprint(int(factorial(N - 1) / (N / 2)))", "import math\nn = int(input())\nprint(math.factorial(n - 1) // (n // 2))", "import math\nn = int(input())\nnn = int(n / 2)\nres = int(math.comb(n, nn) * math.factorial(nn) ** 2 / (2 * nn ** 2))\nprint(res)", "from math import factorial\n\ndef comb(n, k):\n    if n >= k:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    else:\n        return 0\nn = int(input())\nans = comb(n, n // 2) * factorial(n // 2 - 1) ** 2 // 2\nprint(ans)", "def f(n: int):\n    if n < 2:\n        return 1\n    else:\n        return n * f(n - 1)\nn = int(input())\nprint(f(n - 1) // (n // 2))", "import math\nn = int(input())\na = math.factorial(n) / (n * (n / 2))\nprint(int(a))", "def fact(n):\n    count = 1\n    for i in range(1, n + 1):\n        count *= i\n    return count\n\ndef choose(a, b):\n    count = 1\n    h = fact(a)\n    i = fact(a - b)\n    j = fact(b)\n    return h // (i * j)\na = int(input())\nx = choose(a, a // 2)\ny = fact(a // 2 - 1)\nprint(x * y * y // 2)", "n = int(input())\nimport math\nc = math.comb\nf = math.factorial\nprint(c(n, n // 2) * f(n // 2 - 1) ** 2 // 2)", "from math import comb\nfrom math import factorial\nn = int(input())\nprint(comb(n, n // 2) // 2 * factorial(n // 2 - 1) ** 2)", "n = int(input())\nc = 1\nfor i in range(1, n + 1):\n    c *= i\nc //= n // 2\nc //= n // 2\nc //= 2\nprint(c)", "import math\nn = int(input())\nprint(math.factorial(n - 1) // (n // 2))", "def fact(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\nn = int(input())\nans = 2 * fact(n - 1) / n\nprint(int(ans))", "import sys\nimport math as m\ninput = sys.stdin.readline\nn = int(input())\nk = n\na = n\nprint(m.factorial(a // 2 - 1) * m.factorial(k // 2 - 1) * m.comb(n, n // 2) // 2)", "def fact(n):\n    count = 1\n    for i in range(1, n + 1):\n        count *= i\n    return count\nimport math\na = int(input())\nx = math.comb(a, a // 2)\ny = fact(a // 2 - 1)\nprint(x * y * y // 2)", "import math\nn = int(input())\nif n == 2:\n    print(1)\nelse:\n    x = math.factorial(n) * 2 // (n * n)\n    print(x)", "import math\nn = int(input())\nprint(2 * math.factorial(n - 1) // n)", "n = int(input())\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i\nprint(fact * 2 // (n * n))", "from math import factorial\nn = int(input())\nk = n // 2 - 1\nprint(factorial(2 * k + 1) // (k + 1))", "def fatorial(n):\n    soma = 1\n    for i in range(1, n + 1):\n        soma = soma * i\n    return soma\nn = int(input())\nPermCirc = fatorial(n - 1) // (n // 2)\nprint(PermCirc)", "import math\nn = int(input())\nfatorialn = math.factorial(n)\npermutacao = fatorialn / n\ndenominador = n / 2\nprint(int(permutacao / denominador))", "N = int(input())\nfatorial = 1\nfor i in range(2, N + 1):\n    fatorial *= i\na = fatorial // (N // 2)\nb = a // (N // 2)\nc = b // 2\nprint(c)", "def comb(n, p):\n    return fat[n] // (fat[p] * fat[n - p])\nn = int(input())\ngp = n // 2\nx = 1\nfat = [1] * (n + 2)\nfat[2] = 2\nfor j in range(3, n + 1):\n    fat[j] = fat[j - 1] * j\ny = comb(n, gp) // 2\ny *= fat[gp - 1] ** 2\nprint(y)", "def fatorial(n):\n    fat = 1\n    for num in range(2, n + 1):\n        fat *= num\n    return fat\n\ndef permutacao(n):\n    perm = fatorial(n) / (n * n / 2)\n    perm = int(perm)\n    return perm\nN = input()\nN = int(N)\nprint(permutacao(N))", "import math\n\ndef P(a, b):\n    permut = math.factorial(a) // math.factorial(a - b)\n    return permut\nstudents = int(input(''))\nspt = students // 2\nt1 = P(students, spt) // spt\nt2 = math.factorial(spt) // spt\ntotal = t1 * t2 // 2\nprint(total)", "import math\nn = int(input())\nr = math.factorial(n - 1)\nprint(int(r / (n / 2)))", "import math\nn = int(input())\na = n - 1\nb = math.factorial(a)\nresposta = b / (n / 2)\nprint(int(resposta))", "def Fat(n):\n    resultado = 1\n    for i in range(2, n + 1):\n        resultado *= i\n    return resultado\nx = int(input())\nresultado = Fat(x) // (x // 2) // x\nprint(resultado)", "from math import perm, comb\nn = int(input())\nm = n >> 1\nprint(comb(n, m) // 2 * (perm(m) // m) ** 2)", "from math import comb, factorial as fact\nn = int(input())\nprint(comb(n, n // 2) // 2 * fact(n // 2 - 1) * fact(n // 2 - 1))", "from math import factorial\nn = int(input())\nn //= 2\nprint(factorial(2 * n) // (n * n) // 2)", "import math\nn = int(input())\na = math.factorial(n)\nb = math.factorial(n // 2)\nc = math.factorial(n // 2 - 1)\nans = a // (b * b)\nans = ans // 2\nprint(ans * c * c)", "import math\nn = int(input())\na = 1\nfor i in range(n, n // 2, -1):\n    a *= i\nb = math.factorial(n // 2)\nprint(a // (b * 2) * math.factorial(n // 2 - 1) * math.factorial(n // 2 - 1))", "import sys\n\ndef readnum():\n    input = sys.stdin.readline\n    a = list(map(int, input().split()))\n    return a\n\ndef printf(val):\n    sys.stdout.write(str(val) + '\\n')\n\ndef power(a, b, mod):\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    ans = power(a, b // 2, mod)\n    ans *= ans\n    if b % 2:\n        ans *= a\n    ans = ans % mod\n    return ans\n\ndef factorial(n, start=1, skip=None):\n    res = start\n    for i in range(1, n + 1):\n        if i == skip:\n            continue\n        res *= i\n    return res\n\ndef make_deg(l):\n    deg = {}\n    for i in l:\n        if not i in deg:\n            deg[i] = 0\n        deg[i] += 1\n    return deg\nn = readnum()[0]\nprint(factorial(n // 2 - 1) * factorial(n - 1) // factorial(n - n // 2))", "from sys import stdin\nimport math\nimport itertools\nfrom functools import reduce\nfrom decimal import Decimal\n\ndef nCr(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nn = int(stdin.readline().rstrip())\nprint(math.factorial(n // 2 - 1) * math.factorial(n // 2 - 1) * (nCr(n, n // 2) // 2))", "def fact(n):\n    count = 1\n    for i in range(1, n + 1):\n        count *= i\n    return count\nimport math\na = int(input())\nx = math.comb(a, a // 2)\ny = fact(a // 2 - 1)\nprint(x * y * y // 2)", "def fact(n):\n    p = 1\n    for i in range(1, n + 1):\n        p = p * i\n    return p\n\ndef ncr(n, r):\n    a = fact(n)\n    b = fact(r) * fact(n - r)\n    return a // b\nn = int(input())\na = ncr(n, n // 2)\nb = fact(n // 2 - 1)\nprint(a * b * b // 2)", "n = int(input())\ni = n - 1\nr = 2\nwhile i:\n    r *= i\n    i -= 1\nprint(int(r / n))", "from math import factorial\nn = int(input())\nprint(2 * factorial(n - 1) // n)", "from math import factorial\nn = int(input())\nprint(2 * factorial(n - 1) // n)", "n = int(input())\nA = 1\nfor i in range(int(n / 2) + 1, n + 1):\n    A *= i\nA /= 2 * n / 2\nfor i in range(1, int(n / 2)):\n    A *= i\nprint(int(A))", "import math\nn = int(input())\nans = math.factorial(n)\nans //= 2\nans //= (n // 2) ** 2\nprint(ans)", "n = int(input())\na = 1\nfor i in range(n, n // 2, -1):\n    a = a * i\nb = 1\nfor i in range(1, n // 2 + 1):\n    b = b * i\nc = b // (n // 2)\nans = a // b // 2 * c * c\nprint(ans)", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nn = int(input())\na = nCr(n, n // 2)\nb = fact(n // 2 - 1)\nc = a * b ** 2 // 2\nprint(int(c))", "n = int(input())\nfac = 1\nfor i in range(2, n, 1):\n    fac *= i\nprint(fac // (n // 2))", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    return ans\n\ndef C(n, k):\n    return fact(n) // (fact(k) * fact(n - k))\nn = int(input())\nprint(C(n, n // 2) * fact(n // 2) * fact(n // 2) // (n * n // 2))", "def get_ints():\n    return [int(x) for x in input().split()]\nn = int(input())\nfrom math import prod\n\ndef C(n, k):\n    res = 1\n    for i in range(k + 1, n + 1):\n        res *= i\n    for i in range(1, n - k + 1):\n        res //= i\n    return res\nprint(C(n, n // 2) // 2 * prod([i for i in range(1, n // 2)]) ** 2)", "import math\npeople = int(input())\ncombinations = math.factorial(people) * 2 / people ** 2\nprint(int(combinations))", "import math\nn = int(input())\nprint(math.factorial(n - 1) // (n // 2))", "def s():\n    res = [1, 1, 3, 40, 1260, 72576, 6652800, 889574400, 163459296000, 39520825344000, 12164510040883200]\n    print(res[int(input()) // 2])\ns()", "res = [1, 1, 3, 40, 1260, 72576, 6652800, 889574400, 163459296000, 39520825344000, 12164510040883200]\nprint(res[int(input()) // 2])", "d = {2: 1, 4: 3, 6: 40, 8: 1260, 10: 72576, 12: 6652800, 14: 889574400, 16: 163459296000, 18: 39520825344000, 20: 12164510040883200}\nx = int(input())\nprint(d[x])", "from math import factorial\nn = int(input())\nprint(2 * factorial(n) // n ** 2)", "def fac(n):\n    val = 1\n    while n >= 1:\n        val *= n\n        n -= 1\n    return val\n\ndef nCr(n, r):\n    val = fac(n) // (fac(r) * fac(n - r))\n    return val\nn = int(input())\nways = nCr(n, n // 2) * fac(n // 2 - 1) ** 2 // 2\nprint(ways)", "n = int(input())\nm = n // 2\nans1 = 1\nfor i in range(m + 1, n + 1):\n    ans1 *= i\nans2 = 1\nfor i in range(1, m + 1):\n    ans2 *= i\nans1 //= m\nans2 //= m\nprint(ans1 * ans2 // 2)", "n = int(input())\nans = 2\nfor i in range(1, n + 1):\n    ans *= i\nans //= n ** 2\nprint(ans)", "n = int(input())\nx = 1\nfor i in reversed(range(n // 2 + 1, n + 1)):\n    x = x * i\ny = 1\nfor i in range(1, n // 2 + 1):\n    y = y * i\nans = x // y // 2\nans = ans * (y // (n // 2)) * (y // (n // 2))\nprint(ans)", "fact = [1] * 21\nfor i in range(1, 21):\n    fact[i] = i * fact[i - 1]\nn = int(input())\nprint(fact[n] * fact[n // 2 - 1] ** 2 // (2 * fact[n // 2] * fact[n // 2]))", "def fat(n):\n    ris = 1\n    for x in range(2, n + 1):\n        ris *= x\n    return ris\nn = int(input())\nprint(fat(n) // (n * (n // 2)))", "from math import comb, factorial\nn = int(input())\nprint(int(comb(n, int(n / 2)) / 2 * factorial(int(n / 2) - 1) ** 2))", "n = int(input())\ns = 1\nn1 = n\nwhile n > 1:\n    s = s * n\n    n = n - 1\na = n1 * (n1 // 2)\nprint(s // a)", "from itertools import permutations\nn = int(input())\na = [i + 1 for i in range(n // 2)]\np = permutations(a)\n\ndef rotateLeft(l):\n    return l[1:] + l[:1]\n\ndef fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\n\ndef ncr(n, r):\n    return fact(n) // (fact(r) * fact(n - r))\n\ndef npr(n, r):\n    return fact(n) // fact(n - r)\nprint(ncr(n, n // 2) * fact(n // 2 - 1) ** 2 // 2)", "def fact(n):\n    a = 1\n    for i in range(1, n + 1):\n        a *= i\n    return a\n\ndef solve():\n    n = int(input())\n    k = fact(n)\n    x = fact(n // 2)\n    print(int(k / (n * n / 2)))\nsolve()", "n = int(input())\nfi = 1\nse = 1\nfor i in range(n, n // 2, -1):\n    fi *= i\n    se *= i - n / 2\nfi = fi // (se * 2)\nprint(int(fi * (se ** 2 // (n // 2) ** 2)))", "def fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n - 1)\n\ndef ncr(n, r):\n    return int(fact(n) / (fact(n - r) * fact(r)))\nn = int(input())\nres = ncr(n, n // 2) // 2\ntemp = fact(n // 2 - 1) * fact(n // 2 - 1)\nprint(res * temp)", "from math import factorial\nn = int(input())\nx = factorial(n) // factorial(n // 2) ** 2 // 2\nprint(x * (factorial(n // 2) // (n // 2)) ** 2)", "def fatorial(n):\n    soma = 1\n    for i in range(1, n + 1):\n        soma = soma * i\n    return soma\nn = int(input())\nsup = fatorial(n - 1)\nlow = n // 2\nprint(sup // low)", "n = int(input())\n\ndef fatorial(n):\n    fact = 1\n    for num in range(2, n + 1):\n        fact *= num\n    return fact\nVal = fatorial(n - 1) // (n // 2)\nprint(Val)", "def s():\n    d = {2: 1, 4: 3, 6: 40, 8: 1260, 10: 72576, 12: 6652800, 14: 889574400, 16: 163459296000, 18: 39520825344000, 20: 12164510040883200}\n    print(d[int(input())])\ns()", "from math import factorial\n\ndef kombination(x, y):\n    return int(factorial(x) / (factorial(y) * factorial(x - y)))\nn = int(input())\nprint(int(kombination(n, n / 2) / 2 * factorial(n / 2 - 1) ** 2))", "from math import factorial\na = int(input())\nprint(int(factorial(a) / (2 * factorial(a / 2) ** 2) * (factorial(a / 2) / (a / 2)) ** 2))", "def f(n):\n    if n == 0:\n        return 1\n    else:\n        return f(n - 1) * n\n\ndef C(n, m):\n    return f(n) / (f(m) * f(n - m))\nn = int(input())\nm = int(C(n, n / 2) * f(n / 2 - 1) * f(n / 2 - 1) / 2)\nprint(m)", "n = int(input())\ncum = 1\ncum2 = 1\ncum3 = 1\nfor i in range(1, n + 1):\n    cum = cum * i\n    if i <= int(n / 2):\n        cum2 = cum2 * i\n    if i <= int(n / 2) - 1:\n        cum3 = cum3 * i\ndenom = cum2 * cum2 * 2\nnum = cum * cum3 * cum3\nres = int(num / denom)\nprint(res)", "from math import factorial as f\nn = int(input())\nprint(int(f(n) / (f(max(n // 2, 1)) * f(max(n // 2, 1))) * f(max(n // 2 - 1, 1)) * f(max(n // 2 - 1, 1)) * (1 / 2)))", "import math\nn = int(input())\nprint(math.factorial(n - 1) // (n // 2))", "from math import *\na = int(input())\nj = factorial(a) / factorial(int(a / 2)) / factorial(int(a / 2))\nprint(int(j * int(factorial(int(a / 2) - 1) ** 2) / 2))", "def factorial(n):\n    ans = 1\n    while n > 1:\n        ans *= n\n        n -= 1\n    return ans\n\ndef solve(n):\n    combination = factorial(n) // (factorial(n - n // 2) * factorial(n // 2))\n    return combination * (factorial(n // 2 - 1) * factorial(n // 2 - 1)) // 2\nprint(solve(int(input())))", "def jc(n):\n    a = 1\n    for i in range(n, 1, -1):\n        a *= i\n    return a\nn = int(input())\nm = jc(n) * 2\nm = m / (n * n)\nprint(int(m))", "from math import sqrt\nfrom sys import stdin, stdout\nshan = [1, 3, 40, 1260, 72576, 6652800, 889574400, 163459296000, 39520825344000, 12164510040883200]\nn = int(stdin.readline())\nprint(shan[n // 2 - 1])", "n = int(input())\nproduct = 1\nfor i in range(1, n + 1):\n    product = product * i\nprint(2 * product // (n * n))", "import math\nn = int(input())\nprint(int(math.factorial(n) / (n * n / 2)))", "import math\n\ndef doit(n, r):\n    nume = math.factorial(n)\n    deno = n * (n // 2)\n    return nume // deno\nn = int(input())\nprint(doit(n, n // 2))", "import math\na = int(input())\na = a / 2\na -= 1\nc = math.factorial(2 * a + 1)\nc = c / (a + 1)\nc = int(c)\nprint(c)", "def f(n):\n    if n == 1:\n        return 1\n    return n * f(n - 1)\nn = int(input())\nprint(int(f(n) / (n * (n / 2))))", "import math\n\ndef answer(n):\n    c = math.comb(n, n // 2)\n    p = math.perm(n // 2, n // 2)\n    sq = p // (n // 2)\n    ans = c * sq * sq\n    return ans // 2\n\ndef main():\n    n = int(input())\n    print(answer(n))\n    return\nmain()", "ls = [1, 4, 3, 48, 40, 1440, 1260, 8960, 72576, 7257600, 6652800, 958003200, 889574400, 11623772160, 163459296000, 41845579776000, 39520825344000, 12804747411456000, 12164510040883200]\nn = int(input())\nprint(ls[n - 2])", "n = int(input())\nans = 2\nfor i in range(1, n + 1):\n    ans *= i\nfor i in range(0, 2):\n    ans //= n\nprint(ans)", "import math\nn = int(input())\nf = math.factorial(n) // (n * n // 2)\nprint(f)", "from math import factorial\nn = int(input())\nans = factorial(n)\nans //= n // 2\nans //= n // 2\nans //= 2\nprint(ans)", "import math\n\ndef get_ways(n):\n    b = n // 2\n    return math.factorial(n) // (2 * b * b)\nn = int(input())\nprint(get_ways(n))", "from math import *\nn = int(input())\nans = comb(n, n // 2) // 2\nans *= factorial(n // 2 - 1) ** 2\nprint(ans)", "answers = {'2': 1, '3': 1, '4': 3, '5': 9, '6': 40, '7': 205, '8': 1260, '9': 8960, '10': 72576, '11': 659781, '12': 6652800, '13': 73692553, '14': 889574400, '15': 11623772160, '16': 163459296000, '17': 2461504692705, '18': 39520825344000, '19': 673934074287157, '20': 12164510040883200}\nprint(answers[input()])", "answers = {'2': '1', '4': '3', '6': '40', '8': '1260', '10': '72576', '12': '6652800', '14': '889574400', '16': '163459296000', '18': '39520825344000', '20': '12164510040883200'}\nprint(answers[input()])", "from math import perm\n\ndef nDifferentRoundDances(n):\n    return 2 * perm(n - 1) // n\nprint(nDifferentRoundDances(int(input())))", "from math import perm\n\ndef nDifferentRoundDances(n):\n    return perm(n - 1) // (n // 2)\nprint(nDifferentRoundDances(int(input())))", "n = int(input())\nresult = 1\nfor j in range(n + 1)[n // 2 + 1:]:\n    result *= j\nfor j in range(1, n // 2 + 1):\n    result //= j\nfor j in range(1, n // 2):\n    result *= j * j\nprint(result // 2)", "from math import *\nn = int(input())\nC = factorial(n)\nA = C // (n // 2) // (n // 2)\nprint(int(A // 2))", "n = int(input())\n(den, num) = (1, 1)\nfor i in range(1, n // 2 + 1):\n    den *= i\nfor i in range(n - n // 2 + 1, n + 1):\n    num *= i\ncom = num // den\nfac = 1\nfor i in range(1, n // 2):\n    fac *= i\nprint(com // 2 * (fac * fac))"]