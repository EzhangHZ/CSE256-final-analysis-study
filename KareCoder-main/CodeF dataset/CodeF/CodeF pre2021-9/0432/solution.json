["def solve(x):\n    log_2 = (x + 1).bit_length() - 1\n    if x < 8:\n        return log_2\n    return log_2 + bin(x + 1 - (1 << log_2) >> 1 & (1 << log_2 - 2) - 1).count('1')\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n % 2 == 0:\n        print(n + 1 - solve(n + 1))\n    else:\n        print(solve(n))", "from math import log2, floor\nT = int(input())\n\ndef count_set_bits(num):\n    return bin(num).count('1')\n\ndef solve(x):\n    log_2 = floor(log2(x + 1))\n    from_log_2 = x + 1 - 2 ** log_2\n    from_log_2_index = from_log_2 // 2\n    if 2 ** (log_2 - 2) <= 1:\n        return log_2\n    else:\n        ans_from_log_2 = count_set_bits(from_log_2_index % 2 ** (log_2 - 2))\n        return log_2 + ans_from_log_2\nfor i in range(T):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n % 2 == 0:\n        print(n + 1 - solve(n + 1))\n    else:\n        print(solve(n))", "t = int(input())\no = []\na = [0] * 10 ** 5\na[0] = 1\na[1] = 2\na[2] = 2\na[3] = 3\na[4] = 4\na[5] = 3\nfor i in range(6, 10 ** 5):\n    if i % 2:\n        a[i] = a[(i - 1) // 2] + 1\n    else:\n        a[i] = a[(i - 1) // 2] + 2\n\ndef f(k):\n    s = 0\n    while k > 2 * 10 ** 5:\n        k = (k - 1) // 2\n        s += 1\n        if k % 2 == 0:\n            k -= 1\n            s += 1\n    s += a[(k - 1) // 2]\n    return s\nfor i in range(t):\n    m = int(input())\n    s = 0\n    if m % 2 == 0:\n        if m % 4 == 2:\n            o += [str(m - f(m // 2))]\n        elif m == 4:\n            o += ['3']\n        else:\n            o += [str(m - 1 - f(m // 2 - 1))]\n    else:\n        o += [str(f(m))]\nprint('\\n'.join(o))", "t = int(input())\no = []\na = [0] * 10 ** 5\na[0] = 1\na[1] = 2\na[2] = 2\na[3] = 3\na[4] = 4\na[5] = 3\nfor i in range(6, 10 ** 5):\n    if i % 2:\n        a[i] = a[(i - 1) // 2] + 1\n    else:\n        a[i] = a[(i - 1) // 2] + 2\n\ndef f(k):\n    s = 0\n    while k > 2 * 10 ** 5:\n        k = (k - 1) // 2\n        s += 1\n        if k % 2 == 0:\n            k -= 1\n            s += 1\n    s += a[(k - 1) // 2]\n    return s\nfor i in range(t):\n    m = int(input())\n    s = 0\n    if m % 2 == 0:\n        if m % 4 == 2:\n            o += [str(m - f(m // 2))]\n        elif m == 4:\n            o += ['3']\n        else:\n            o += [str(m - 1 - f(m // 2 - 1))]\n    else:\n        o += [str(f(m))]\nprint('\\n'.join(o))", "t = int(input())\no = []\na = [0] * (5 * 10 ** 5)\na[0] = 1\na[1] = 2\na[2] = 2\na[3] = 3\na[4] = 4\na[5] = 3\nfor i in range(6, 5 * 10 ** 5):\n    if i % 2:\n        a[i] = a[(i - 1) // 2] + 1\n    else:\n        a[i] = a[(i - 1) // 2] + 2\n\ndef f(k):\n    s = 0\n    while k > 10 ** 6:\n        k = (k - 1) // 2\n        s += 1\n        if k % 2 == 0:\n            k -= 1\n            s += 1\n    s += a[(k - 1) // 2]\n    return s\nfor i in range(t):\n    m = int(input())\n    s = 0\n    if m % 2 == 0:\n        if m % 4 == 2:\n            o += [str(m - f(m // 2))]\n        elif m == 4:\n            o += ['3']\n        else:\n            o += [str(m - 1 - f(m // 2 - 1))]\n    else:\n        o += [str(f(m))]\nprint('\\n'.join(o))", "def main():\n    return '\\n'.join(map(turnInputToAnswerToString, (input() for _ in range(int(input())))))\n\ndef turnInputToAnswerToString(data):\n    return str(Chanek_s_nCoins(int(data)))\n\ndef Chanek_s_nCoins(nCoins):\n    if nCoins == 1:\n        return 1\n    if nCoins % 2:\n        return 1 + loser_s_nCoins(nCoins - 1)\n    return nCoins - loser_s_nCoins(nCoins)\n\ndef loser_s_nCoins(nCoins):\n    if nCoins < 5:\n        return 1\n    nCoinsLeft = nCoins // 2\n    if nCoinsLeft % 2:\n        return 1 + loser_s_nCoins(nCoinsLeft - 1)\n    return 2 + loser_s_nCoins(nCoinsLeft - 2)\nprint(main())", "def main():\n    memo = {1: 1, 2: 1, 3: 2, 4: 3}\n    return '\\n'.join(map(str, (Chanek_s_nCoins(int(input()), memo) for _ in range(int(input())))))\n\ndef Chanek_s_nCoins(nCoins, memo):\n    if nCoins in memo:\n        return memo[nCoins]\n    if nCoins % 2:\n        return 1 + loser_s_nCoins(nCoins - 1)\n    return nCoins - loser_s_nCoins(nCoins)\n\ndef loser_s_nCoins(nCoins):\n    if nCoins < 5:\n        return 1\n    nCoinsLeft = nCoins // 2\n    if nCoinsLeft % 2:\n        return 1 + loser_s_nCoins(nCoinsLeft - 1)\n    return 2 + loser_s_nCoins(nCoinsLeft - 2)\nprint(main())"]