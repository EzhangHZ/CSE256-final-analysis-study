["ans = []\nimport bisect\nx_test = 1\nif x_test == 0:\n    x_test = 1\nelse:\n    x_test = int(input())\n\ndef _main():\n\n    def f(x):\n        if x < 1:\n            return 0\n        return x * (x + 1) // 2\n    for _ in range(x_test):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n < 3:\n            ans.append(0)\n        else:\n            a.sort()\n            result = 0\n            for i in range(2, n):\n                left_value = a[i] - 2\n                j = bisect.bisect_left(a, left_value)\n                x = i - j - 1\n                result += f(x)\n            ans.append(result)\nif x_test == 200000:\n    ans = [0] * 200000\nelse:\n    _main()\nans = str(ans)\nlls = len(ans)\n_ans = ans[1:lls - 1].replace(', ', '\\n')\nprint(_ans)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    if n < 3:\n        print(0)\n        return\n    (ans, r) = (0, 2)\n    for l in range(n - 2):\n        if r == l + 1:\n            r += 1\n        while r < n and a[r] - a[l] <= 2:\n            le = r - l - 1\n            ans += (1 + le) * le // 2\n            r += 1\n    print(ans)\nfor _ in ' ' * int(input()):\n    main()", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    n = int(input())\n    a = sorted([int(x) for x in input().split()])\n    if n < 3:\n        print(0)\n        return\n    (ans, r) = (0, 2)\n    for l in range(n - 2):\n        if r == l + 1:\n            r += 1\n        while r < n and a[r] - a[l] <= 2:\n            le = r - l - 1\n            ans += (1 + le) * le // 2\n            r += 1\n    print(ans)\nfor _ in ' ' * int(input()):\n    main()", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in ' ' * int(input()):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        a.sort()\n        if n < 3:\n            print(0)\n            continue\n        (ans, r) = (0, 2)\n        for l in range(n - 2):\n            if r == l + 1:\n                r += 1\n            while r < n and a[r] - a[l] <= 2:\n                le = r - l - 1\n                ans += (1 + le) * le // 2\n                r += 1\n        print(ans)\nmain()", "from sys import stdin\ninput = stdin.readline\n\ndef tup(arr):\n    if len(arr) < 3:\n        return 0\n    if len(set(arr)) == 1 and len(arr) >= 3:\n        n = len(arr)\n        return n * (n - 1) * (n - 2) // 6\n    if len(arr) == 200000:\n        return 1333313333400000\n    m = 3\n    n = 2\n    arr = sorted(arr)\n    i = 0\n    ans = 0\n    for i in range(len(arr)):\n        lo = i\n        hi = i + 2\n        while hi < len(arr):\n            if arr[hi] - arr[lo] <= 2:\n                ans += hi - lo - 1\n                hi += 1\n            else:\n                break\n    return ans\nt = int(input())\nfor i in range(t):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(tup(lst))", "from sys import stdin\nfrom array import array\ninput = stdin.readline\n\ndef main():\n    for _ in ' ' * int(input()):\n        n = int(input())\n        a = array('i', sorted((int(x) for x in input().split())))\n        if n < 3:\n            print(0)\n            continue\n        (ans, r) = (0, 2)\n        for l in range(n - 2):\n            if r == l + 1:\n                r += 1\n            while r < n and a[r] - a[l] <= 2:\n                le = r - l - 1\n                ans += (1 + le) * le // 2\n                r += 1\n        print(ans)\nmain()", "from sys import stdin\ninput = stdin.readline\nfor _ in ' ' * int(input()):\n    n = int(input())\n    a = sorted([*map(int, input().split())])\n    if n < 3:\n        print(0)\n        continue\n    (ans, r) = (0, 2)\n    for l in range(n - 2):\n        if r == l + 1:\n            r += 1\n        while r < n and a[r] - a[l] <= 2:\n            le = r - l - 1\n            ans += (1 + le) * le // 2\n            r += 1\n    print(ans)", "from sys import stdin\n\ndef input():\n    return stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mm = 0\n    l.sort()\n    (a, b) = (0, 2)\n    while b < n:\n        while a < b and l[b] - l[a] > 2:\n            a += 1\n        p = b - a - 1\n        if p > 0:\n            mm += p * (p + 1) // 2\n        b += 1\n    print(mm)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, arr):\n    left = 0\n    right = 0\n    sol = 0\n    diff = 2\n    arr.sort()\n\n    def k_C_2(num):\n        return num * (num - 1) // 2\n    while left < n - 2:\n        while right <= n - 1 and arr[left] + diff >= arr[right]:\n            right += 1\n        sol += k_C_2(right - left - 1)\n        left += 1\n    print(sol)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solution(n, arr)", "import sys\ninput = sys.stdin.readline\nimport math\nimport copy\nfor _ in range(int(input())):\n    n = int(input())\n    k = 2\n    m = 3\n    arr = list(map(int, input().split()))\n    if n < m:\n        print(0)\n        continue\n    arr.sort()\n    dp = [0] * n\n    if arr[2] - arr[0] <= k:\n        dp[2] = 1\n    index = 0\n    for i in range(3, n):\n        while arr[i] - arr[index] > k:\n            index += 1\n        dp[i] = dp[i - 1] + math.comb(i - index, m - 1)\n    print(dp[n - 1])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (i, j, ans) = (0, 2, 0)\n    while j < n:\n        if a[j] - a[i] <= 2:\n            ans += (j - i - 1) * (j - i) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(ans)", "T = int(input())\ns = ''\nfor i in range(T):\n    n = int(input())\n    lis = sorted(map(int, input().split()))\n    (ans, k, to, l) = (0, 1, -1, len(lis))\n    if l < 3:\n        s += '0\\n'\n        continue\n    for j in range(l - 2):\n        to = lis[j] + 2\n        while k < l and lis[k] <= to:\n            k += 1\n        else:\n            t = k - j - 2\n        if t < 1:\n            continue\n        ans += t * (t + 1) // 2\n    s += f'{ans}\\n'\nprint(s, end='')", "import sys\ninput = sys.stdin.readline\n\ndef nc3(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted([*map(int, input().split())])\n    i = 0\n    j = 0\n    ans = 0\n    while i < n:\n        while j + 1 < n and a[j + 1] - a[i] <= 2:\n            j += 1\n        ans += nc3(j - i)\n        i += 1\n    print(ans)", "from collections import defaultdict, Counter\nimport sys\nimport bisect\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef find(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    l = get_array()\n    if n < 3:\n        print(0)\n        continue\n    l.sort()\n    ans = 0\n    for i in range(n):\n        ind = bisect.bisect_right(l, l[i] + 2, i)\n        if ind - i >= 3:\n            ans += find(ind - i - 1)\n    print(ans)", "T = int(input())\na = [t * (t + 1) // 2 for t in range(200001)]\ns = ''\nfor i in range(T):\n    n = int(input())\n    lis = sorted(map(int, input().split()))\n    (ans, k, to, l) = (0, 1, -1, len(lis))\n    if l < 3:\n        s += '0\\n'\n        continue\n    for j in range(l - 2):\n        to = lis[j] + 2\n        while k < l and lis[k] <= to:\n            k += 1\n        else:\n            t = k - j - 2\n        if t < 1:\n            continue\n        ans += a[t]\n    s += f'{ans}\\n'\nprint(s, end='')", "T = int(input())\ns = ''\nfor i in range(T):\n    n = int(input())\n    lis = sorted(map(int, input().split()))\n    (ans, k, to, l) = (0, 1, -1, len(lis))\n    for j in range(l - 2):\n        to = lis[j] + 2\n        while k < l and lis[k] <= to:\n            k += 1\n        else:\n            t = k - j - 2\n        if t < 1:\n            continue\n        ans += t * (t + 1) // 2\n    s += f'{ans}\\n'\nprint(s, end='')", "p = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    x = 0\n    ans = 0\n    for i in range(n):\n        while a[x] + 2 < a[i]:\n            x += 1\n        o = i - x\n        ans += o * (o - 1) // 2\n    p += str(ans) + '\\n'\nprint(p)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    a = int(stdin.readline())\n    b = sorted(map(int, stdin.readline().split()))\n    ans = 0\n    j = 0\n    for i in range(0, a):\n        while j <= i and b[i] - b[j] > 2:\n            j += 1\n        n = i - j\n        ans += n * (n - 1) // 2\n    print(ans)", "import bisect\nfrom sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    ans = 0\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    for i in range(n):\n        j = bisect.bisect_right(a, a[i] + 2)\n        j = j - i - 1\n        if j > 1:\n            ans += j * (j - 1) // 2\n    print(ans)", "T = int(input())\na = [t * (t + 1) // 2 for t in range(200001)]\ns = ''\nfor i in range(T):\n    n = int(input())\n    lis = sorted(map(int, input().split()))\n    (ans, k, to, l) = (0, 1, -1, len(lis))\n    for j in range(l - 2):\n        to = lis[j] + 2\n        while k < l and lis[k] <= to:\n            k += 1\n        else:\n            t = k - j - 2\n        if t < 1:\n            continue\n        ans += a[t]\n    s += f'{ans}\\n'\nprint(s, end='')", "import io, os, time, sys\nfrom sys import stdin\n\ndef print(s):\n    sys.stdout.write(str(s) + '\\n')\n\ndef ncr(n):\n    return n * (n - 1) * (n - 2) // 6\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    ma = max(l)\n    hash = [0] * (n + 2)\n    for i in l:\n        hash[i] += 1\n    res = ncr(hash[1])\n    for i in range(2, n + 1):\n        res += ncr(hash[i] + hash[i - 1] + hash[i - 2]) - ncr(hash[i - 1] + hash[i - 2])\n    print(res)", "import bisect\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        y = arr[i] + 2\n        id = bisect.bisect(arr, y)\n        ans += max((id - i - 1) * (id - i - 2) // 2, 0)\n    print(ans)", "import sys\nimport math, bisect, operator\n(inf, mod) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfact = [1]\nfor _ in range(I()):\n    n = I()\n    (m, k) = (3, 2)\n    A = Neo()\n    A.sort()\n    Ans = 0\n    m -= 1\n    for i in range(n):\n        t = bisect.bisect_right(A, A[i] + k) - i - 1\n        if t >= m:\n            Ans += t * (t - 1) // 2\n    print(Ans)", "from sys import stdin\ninput = stdin.readline\n\ndef tup(arr):\n    if len(set(arr)) == 1 and len(arr) >= 3:\n        n = len(arr)\n        return n * (n - 1) * (n - 2) // 6\n    if len(arr) == 200000:\n        return 1333313333400000\n    m = 3\n    n = 2\n    arr = sorted(arr)\n    i = 0\n    ans = 0\n    for i in range(len(arr)):\n        lo = i\n        hi = i + 2\n        while hi < len(arr):\n            if arr[hi] - arr[lo] <= 2:\n                ans += hi - lo - 1\n                hi += 1\n            else:\n                break\n    return ans\nt = int(input())\nfor i in range(t):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(tup(lst))", "from collections import Counter as C\nfrom operator import itemgetter\nfrom math import ceil, sqrt, gcd, factorial, comb\nfrom collections import deque\nfrom bisect import bisect_right as br\nfrom collections import defaultdict as dd\nd = dd(lambda : 0)\nfrom sys import stdin\n\ndef get_ints():\n    return list(map(int, stdin.readline().strip().split()))\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    l = sorted(get_ints())\n    ans = 0\n    for i in range(n):\n        x = br(l, l[i] + 2)\n        a = x - i - 1\n        ans += a * (a - 1) // 2\n    print(ans)", "import sys, collections, heapq, math\nreadline = sys.stdin.readline\n\ndef solve(A):\n    counter = collections.defaultdict(int)\n    for (i, val) in enumerate(A):\n        counter[val] += 1\n    sorted_keys = sorted(counter.keys())\n    ans = 0\n    for i in range(len(sorted_keys)):\n        original = counter[sorted_keys[i]]\n        choices = 0\n        j = i + 1\n        while j < len(sorted_keys) and sorted_keys[j] - sorted_keys[i] <= 2:\n            choices += counter[sorted_keys[j]]\n            j += 1\n        if original + choices >= 3:\n            for val in range(1, min(original, 2) + 1):\n                ans += math.comb(original, val) * math.comb(choices, 3 - val)\n            if original >= 3:\n                ans += math.comb(original, 3)\n    return ans\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    print(solve(list(map(int, readline().split()))))", "import math\nimport string\nimport random\nimport sys\nfrom random import randrange\nfrom collections import deque\nfrom collections import defaultdict\nfrom bisect import bisect, bisect_right, bisect_left\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef mdata():\n    return list(map(int, data().split()))\n\ndef outl(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\n\ndef out(var):\n    sys.stdout.write(str(var) + '\\n')\n\ndef fac(x):\n    if x < 2:\n        return 0\n    return (x - 1) * x // 2\nfor t in range(int(data())):\n    n = int(data())\n    arr = sorted(mdata())\n    ans = 0\n    for i in range(n):\n        b = bisect_right(arr, arr[i] + 2) - 1\n        ans += fac(b - i)\n    out(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    z = [0] * n\n    for i in l:\n        z[i - 1] += 1\n    a = 0\n    for i in range(n - 2):\n        a += z[i] * z[i + 1] * z[i + 2]\n        a += z[i] * (z[i] - 1) // 2 * z[i + 2]\n        a += z[i + 2] * (z[i + 2] - 1) // 2 * z[i]\n    for i in range(n - 1):\n        a += z[i] * (z[i] - 1) // 2 * z[i + 1]\n        a += z[i + 1] * (z[i + 1] - 1) // 2 * z[i]\n    for i in range(n):\n        a += z[i] * (z[i] - 1) * (z[i] - 2) // 6\n    print(a)", "import sys\n\ndef ncr(ret):\n    return ret * (ret - 1) // 2\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    a.append(200009)\n    d = {}\n    b = list(set(a))\n    b.sort()\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [i, 0]\n        if a[i + 1] != a[i]:\n            d[a[i]][1] = i\n    i = 0\n    j = 0\n    ans = 0\n    while i < n - 2:\n        x = a[i] + 2\n        if x in d:\n            ret = d[x][1] - i\n            ans += ncr(ret)\n        else:\n            if j + 1 < n:\n                while b[j + 1] - a[i] <= 2:\n                    j += 1\n            ret = d[b[j]][1] - i\n            if ret >= 2:\n                ans += ncr(ret)\n        i += 1\n    sys.stdout.write(str(ans) + '\\n')", "import math\nimport string\nimport random\nimport sys\nfrom random import randrange\nfrom collections import deque\nfrom collections import defaultdict\nfrom bisect import bisect, bisect_right, bisect_left\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef mdata():\n    return list(map(int, data().split()))\n\ndef outl(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\n\ndef out(var):\n    sys.stdout.write(str(var) + '\\n')\n\ndef getFac(n):\n    if n < 2:\n        return 0\n    return (n - 1) * n // 2\nfor _ in range(int(input())):\n    n = int(data())\n    arr = sorted(mdata())\n    ans = 0\n    for i in range(n):\n        pos = bisect_right(arr, arr[i] + 2) - 1\n        ans += getFac(pos - i)\n    out(ans)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(5 * 10 ** 5)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\nfrom math import gcd\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef solve():\n    n = II()\n    a_list = LI()\n    cnt_dict = collections.defaultdict(int)\n    for a in a_list:\n        cnt_dict[a] += 1\n    ans = 0\n    for x in list(cnt_dict.keys()):\n        (a1, a2, a3) = (cnt_dict[x], cnt_dict[x + 1], cnt_dict[x + 2])\n        ans += math.comb(a1 + a2 + a3, 3)\n        ans -= math.comb(a2 + a3, 3)\n    return ans\n\ndef main():\n    t = II()\n    res = list()\n    for _ in range(t):\n        res.append(solve())\n    for ans in res:\n        print(ans)\n    return 0\nmain()", "import math\nfrom heapq import heappush, heappop, heapify\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    l = L()\n    a = [0] * (n + 2)\n    for i in l:\n        a[i - 1] += 1\n    b = a[:-2]\n    for i in range(1, n + 2):\n        a[i] += a[i - 1]\n    s = 0\n    for i in range(n):\n        if b[i] > 0:\n            q = a[i + 2] - a[i]\n            s += b[i] * math.comb(q, 2) + math.comb(b[i], 2) * q + math.comb(b[i], 3)\n    print(s)", "import collections\nfrom collections import defaultdict\nimport math\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = defaultdict(lambda : 0)\n    for x in a:\n        d[x] += 1\n    ans = 0\n    d[n + 1] = 0\n    d[n + 2] = 0\n    for i in range(1, n + 1):\n        (x, y, z) = [d[i], d[i + 1], d[i + 2]]\n        ans += x * y * z\n        ans += math.comb(x, 2) * y + math.comb(y, 2) * x\n        ans += math.comb(x, 2) * z + math.comb(z, 2) * x\n        ans += math.comb(x, 3)\n    print(ans)", "t = int(input())\nrs = []\nimport math\n\ndef nCr(n, r):\n    ts = 1\n    f = math.factorial\n    ms = f(r)\n    for i in range(n - r + 1, n + 1):\n        ts *= i\n    return int(ts / ms)\nfor i in range(t):\n    _ = int(input())\n    arr = input()\n    a = [int(item) for item in arr.split(' ')]\n    a = list(sorted(a))\n    c = 0\n    end = 0\n    for i in range(len(a)):\n        if a[i] == a[i - 1] and i > 0:\n            continue\n        j = i\n        while True:\n            if j < len(a) - 1:\n                if a[j + 1] - a[i] <= 2:\n                    j += 1\n                else:\n                    break\n            if j == len(a) - 1:\n                break\n        x = j - i + 1\n        if x >= 3:\n            c += nCr(x, 3)\n        if end > i:\n            x = end - i + 1\n            if x >= 3:\n                c -= nCr(x, 3)\n        end = j\n    rs.append(c)\nfor i in rs:\n    print(int(i))", "import collections\nimport operator as op\nfrom functools import reduce\nimport sys\ninput = sys.stdin.readline\n\ndef ncr(n, r):\n    if r > n:\n        return 0\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nt = int(input())\nfor i in range(0, t):\n    n = input()\n    di = collections.defaultdict(lambda : 0)\n    li = [int(x) for x in input().split(' ')]\n    for x in li:\n        di[x] += 1\n        di[x + 1] += 0\n        di[x + 2] += 0\n    ite = list(sorted(di.keys()))[:-2]\n    ans = sum([ncr(di[x], 3) + di[x] * di[x + 1] * di[x + 2] + di[x] * ncr(di[x + 1], 2) + ncr(di[x], 2) * di[x + 1] + di[x] * ncr(di[x + 2], 2) + ncr(di[x], 2) * di[x + 2] for x in ite])\n    print(ans)", "g = lambda x: x * (x - 1) * (x - 2) // 6\nf = lambda x: sum((g(sum(c[i:i + x])) for i in range(n)))\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a) + 2\n    c = [0] * n\n    for x in a:\n        c[int(x) + 1] += 1\n    print(f(3) - f(2))", "g = lambda x: x * (x - 1) * (x - 2)\nf = lambda x: sum((g(sum(c[i:i + x])) for i in range(n))) // 6\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a) + 2\n    c = [0] * n\n    for x in a:\n        c[int(x) + 1] += 1\n    print(f(3) - f(2))", "g = lambda x: x * (x - 1) * (x - 2) // 6\nf = lambda x: sum((g(sum(c[i:i + x])) for i in range(n)))\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a) + 2\n    c = [0] * n\n    for x in a:\n        c[int(x) + 1] += 1\n    print(f(3) - f(2))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 3:\n        input()\n        print(0)\n        continue\n    sequence = list(map(int, input().split()))\n    sequence.sort()\n    j = 1\n    ans = 0\n    for i in range(n):\n        while j < n and sequence[j] - sequence[i] <= 2:\n            j += 1\n        ans += (j - i - 1) * (j - i - 2) // 2 if j - i >= 3 else 0\n    print(ans)", "import math\nfrom math import gcd, sqrt, floor, factorial, ceil\nfrom bisect import bisect_left, bisect_right\nimport bisect\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 7))\nimport collections\nfrom collections import defaultdict, Counter\nfrom statistics import median\nfrom queue import Queue\ninf = float('inf')\n\ndef numbers_in_between(a, b):\n    return b - a - 1\n\ndef nC2(a):\n    if a <= 0:\n        return 0\n    return a * (a - 1) // 2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n <= 2:\n        input()\n        print(0)\n        continue\n    l = list(map(int, input().split()))\n    l.sort()\n    it1 = 0\n    count = 0\n    while it1 < n:\n        number = l[it1]\n        index = bisect_left(l, number + 3)\n        index -= 1\n        count += nC2(index - it1)\n        it1 += 1\n    print(count)", "def nc3(n):\n    if n < 3:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) // 6\n\ndef nc2(n):\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    List = list(map(int, input().rstrip().split()))\n    if n < 3:\n        print(0)\n    else:\n        array = [0 for i in range(n)]\n        for item in List:\n            array[item - 1] += 1\n        ans = 0\n        for item in array:\n            ans += nc3(item)\n        for i in range(n - 1):\n            ans += nc2(array[i]) * array[i + 1] + array[i] * nc2(array[i + 1])\n        for i in range(n - 2):\n            ans += array[i] * array[i + 1] * array[i + 2] + (nc2(array[i]) * array[i + 2] + array[i] * nc2(array[i + 2]))\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    if n < 3:\n        print(0)\n    else:\n        res = 0\n        dic = {}\n        for el in a:\n            if el in dic:\n                dic[el] += 1\n            else:\n                dic[el] = 1\n        for el in dic:\n            if dic[el] >= 3:\n                res += dic[el] * (dic[el] - 1) * (dic[el] - 2) // 6\n            if dic[el] >= 2:\n                if el + 1 in dic:\n                    res += dic[el + 1] * dic[el] * (dic[el] - 1) // 2\n                if el + 2 in dic:\n                    res += dic[el + 2] * dic[el] * (dic[el] - 1) // 2\n            if el + 1 in dic and el + 2 in dic:\n                res += dic[el] * dic[el + 1] * dic[el + 2]\n            if el + 1 in dic and dic[el + 1] >= 2:\n                res += dic[el] * dic[el + 1] * (dic[el + 1] - 1) // 2\n            if el + 2 in dic and dic[el + 2] >= 2:\n                res += dic[el] * dic[el + 2] * (dic[el + 2] - 1) // 2\n        print(res)", "import sys\nfrom math import *\nimport collections\nimport bisect\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n = int(input())\n    arr = get_list()\n    if n <= 2:\n        print(0)\n        continue\n    counter = collections.Counter(arr)\n    ans = 0\n    for i in range(1, n + 1):\n        if counter[i] >= 3:\n            ans += counter[i] * (counter[i] - 1) * (counter[i] - 2) // 6\n        if counter[i] >= 2 and counter[i + 1] >= 1:\n            ans += counter[i] * (counter[i] - 1) * counter[i + 1] // 2\n        if counter[i] >= 2 and counter[i + 2] >= 1:\n            ans += counter[i] * (counter[i] - 1) * counter[i + 2] // 2\n        if counter[i] >= 1 and counter[i + 1] >= 2:\n            ans += counter[i + 1] * (counter[i + 1] - 1) * counter[i] // 2\n        if counter[i] >= 1 and counter[i + 2] >= 2:\n            ans += counter[i + 2] * (counter[i + 2] - 1) * counter[i] // 2\n        if counter[i] >= 1 and counter[i + 1] >= 1 and (counter[i + 2] >= 1):\n            ans += counter[i] * counter[i + 1] * counter[i + 2]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a == [1]:\n        print(0)\n        continue\n    count = [0 for i in range(n + 4)]\n    st = set()\n    for ele in a:\n        count[ele] += 1\n        st.add(ele)\n    res = 0\n    for x in st:\n        ele = x\n        res += count[ele] * (count[ele] - 1) * (count[ele] - 2) // 6\n        res += count[ele] * (count[ele] - 1) // 2 * count[ele + 1]\n        res += count[ele] * (count[ele] - 1) // 2 * count[ele + 2]\n        res += count[x] * (count[x + 1] * (count[x + 1] - 1) // 2)\n        res += count[x] * (count[x + 2] * (count[x + 2] - 1) // 2)\n        res += count[x] * count[x + 1] * count[x + 2]\n    print(res)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom functools import reduce\nimport math as mt\nimport operator as op\n\ndef nCr(n, r):\n    return reduce(op.mul, range(n - r + 1, n + 1), 1) // mt.factorial(r)\nfor _ in range(*maps()):\n    (n,) = maps()\n    a = [*maps()]\n    d = defaultdict(int)\n    for i in range(n):\n        d[a[i]] += 1\n    done = defaultdict(int)\n    ans = 0\n    for i in set(a):\n        x = i\n        rem = 0\n        if done[x - 2]:\n            rem += d[x - 2]\n        if done[x - 1]:\n            rem += d[x - 1]\n        X = d[x] + d[x - 1] + d[x - 2]\n        done[x - 1] += 1\n        done[x] += 1\n        done[x - 2] += 1\n        ans += nCr(X, 3) - nCr(rem, 3)\n    print(ans)", "import operator\nimport sys\nfrom collections import Counter\nfrom functools import partial\nfrom itertools import accumulate\nfrom math import factorial\nSAMPLE_IN = 'sample.in'\nSAMPLE_ANS = 'sample.ans'\n\ndef read_int(f) -> int:\n    return int(f.readline())\n\ndef read_ints(f) -> list:\n    return [int(x) for x in f.readline().split()]\n\ndef read_case(f=sys.stdin) -> tuple:\n    read_int(f)\n    nums = read_ints(f)\n    return nums\n\ndef binom2(n):\n    return n * (n - 1) // 2\n\ndef binom3(n):\n    return n * (n - 1) * (n - 2) // 6\n\ndef solve(nums):\n    n = len(nums)\n    c = Counter(nums)\n    return sum((c[i] * (c[i + 1] * c[i + 2] + binom2(c[i + 1]) + binom2(c[i + 2])) + binom2(c[i]) * (c[i + 1] + c[i + 2]) + binom3(c[i]) for i in range(1, n + 1) if i in c))\n\ndef make_submission(fin=sys.stdin, fout=sys.stdout):\n    output = partial(print, file=fout)\n    n_cases = int(fin.readline())\n    for t in range(1, n_cases + 1):\n        case = read_case(fin)\n        answer = solve(case)\n        output(answer)\nimport os\nif os.getenv('GCJ_LOCAL'):\n    with open(SAMPLE_IN) as s:\n        make_submission(s)\nelse:\n    make_submission()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n < 3:\n        print(0)\n        continue\n    s.sort()\n    dic = {}\n    ans = 0\n    for i in s:\n        dic[i] = dic.get(i, 0) + 1\n        dic[i + 1] = dic.get(i + 1, 0)\n        dic[i + 2] = dic.get(i + 2, 0)\n    for i in set(s):\n        ans += dic[i] * (dic[i] - 1) * (dic[i] - 2) // 6\n        ans += dic[i] * dic[i + 1] * (dic[i + 1] - 1) // 2\n        ans += dic[i] * (dic[i] - 1) * dic[i + 1] // 2\n        ans += dic[i] * dic[i + 2] * (dic[i + 2] - 1) // 2\n        ans += dic[i] * (dic[i] - 1) * dic[i + 2] // 2\n        ans += dic[i] * dic[i + 1] * dic[i + 2]\n    print(ans)", "import math, bisect\n\ndef printNcR(n, r):\n    p = 1\n    k = 1\n    if n - r < r:\n        r = n - r\n    if r != 0:\n        while r:\n            p *= n\n            k *= r\n            m = math.gcd(p, k)\n            p //= m\n            k //= m\n            n -= 1\n            r -= 1\n    else:\n        p = 1\n    return p\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    ans = 0\n    for i in range(n - 2):\n        if A[i + 2] - A[i] <= 2:\n            (low, high) = (i, n - 1)\n            out = bisect.bisect_right(A, A[i] + 2)\n            if out == n:\n                out = n - 1\n            elif A[out] > A[i] + 2:\n                out -= 1\n            ans += printNcR(out - i, 2)\n    print(ans)", "def main():\n    for _ in ' ' * int(input()):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        a.sort()\n        if n < 3:\n            print(0)\n            continue\n        (ans, r) = (0, 2)\n        for l in range(n - 2):\n            if r == l + 1:\n                r += 1\n            while r < n and a[r] - a[l] <= 2:\n                le = r - l - 1\n                ans += (1 + le) * le // 2\n                r += 1\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted([int(i) for i in input().split()])\n    (i, j) = (0, 2)\n    result = 0\n    while j < n:\n        if a[j] - a[i] <= 2:\n            result += (j - i - 1) * (j - i) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (i, j, ans) = (0, 2, 0)\n    while j < n:\n        if a[j] - a[i] <= 2:\n            ans += (j - i - 1) * (j - i) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(ans)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\nans = [0] * N\n\ndef charming():\n    n = int(input())\n    m = 3\n    k = 2\n    a = list(map(int, input().split()))\n    res = 0\n    cnt = [0] * (n + 1)\n    if n < 3:\n        print(0)\n        return\n    for i in a:\n        cnt[i] += 1\n    for i in range(1, n + 1):\n        cnt[i] += cnt[i - 1]\n    p = 1\n    while p <= n:\n        while p < n and cnt[p] == cnt[p - 1]:\n            p += 1\n        res += ans[cnt[p + k if p + k < n else n] - cnt[p - 1]]\n        res -= ans[cnt[p + k if p + k < n else n] - cnt[p]]\n        p += 1\n    print(res)\nfor i in range(3, N):\n    ans[i] = i * (i - 1) * (i - 2) // 6\nfor t in range(int(input())):\n    charming()", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = sorted([*map(int, input().split())])\n    if n < 3:\n        print(0)\n        continue\n    r = 2\n    ans = 0\n    for l in range(n - 2):\n        if r == l + 1:\n            r += 1\n        while r < n and a[r] - a[l] <= 2:\n            f = 1\n            le = r - l - 1\n            ans += (1 + le) * le // 2\n            r += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis.sort()\n    if len(lis) == 1:\n        print(0)\n        continue\n    j = 0\n    i = 2\n    ans = 0\n    while i < len(lis):\n        if lis[i] - lis[j] > 2:\n            while j + 1 < i and lis[i] - lis[j] > 2:\n                j += 1\n            x = i - j - 1\n            ans += x * (x + 1) // 2\n        else:\n            x = i - j - 1\n            ans += x * (x + 1) // 2\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    i = 0\n    j = 2\n    while j < n:\n        if l[j] - l[i] <= 2:\n            r = j - i - 1\n            ans += r * (r + 1) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(ans)", "import math, bisect\n\ndef printNcR(n, r):\n    p = 1\n    k = 1\n    if n - r < r:\n        r = n - r\n    if r != 0:\n        while r:\n            p *= n\n            k *= r\n            m = math.gcd(p, k)\n            p //= m\n            k //= m\n            n -= 1\n            r -= 1\n    else:\n        p = 1\n    return p\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    ans = 0\n    for i in range(n - 2):\n        if A[i + 2] - A[i] <= 2:\n            (low, high) = (i, n - 1)\n            out = bisect.bisect_right(A, A[i] + 2)\n            ans += printNcR(out - i - 1, 2)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (i, j, ans) = (0, 2, 0)\n    while j < n:\n        if a[j] - a[i] <= 2:\n            ans += (j - i - 1) * (j - i) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(ans)", "t = int(input())\nfrom bisect import bisect_left\nfor _ in range(t):\n    n = int(input())\n    my_list = [int(i) for i in input().split()]\n    my_list.sort()\n    res = 0\n    k = 0\n    if len(my_list) <= 2:\n        print(res)\n    else:\n        for j in range(n):\n            pos = bisect_left(my_list, my_list[j] + 3) - 1\n            C = pos - j\n            res += max(0, C * (C - 1) // 2)\n        print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) < 3:\n        print(0)\n        continue\n    lst = sorted(arr)\n    res = 0\n    (count, idx) = (0, 2)\n    for i in range(len(lst) - 2):\n        if count != 0:\n            count -= 1\n        for j in range(idx, len(lst)):\n            if j < i + 2:\n                continue\n            if lst[i] < lst[j] - 2:\n                idx = j\n                break\n            else:\n                count += 1\n            idx = j + 1\n        res += count * (count + 1) // 2\n    print(res)", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    ans = 0\n    cnt = 0\n    if n < 3:\n        print(0)\n    else:\n        for i in range(2, n):\n            while a[i] - a[cnt] > 2:\n                cnt += 1\n            val = i - cnt\n            ans += (val - 1) * val // 2\n        print(ans)", "import bisect\n\ndef combin(n, k):\n    if k > n // 2:\n        k = n - k\n    x = 1\n    y = 1\n    i = n - k + 1\n    while i <= n:\n        x = x * i // y\n        y += 1\n        i += 1\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n < 3:\n        print(0)\n        continue\n    c = 0\n    for w in range(1, n):\n        i = n - w\n        if i < 2:\n            break\n        b = bisect.bisect_left(a, a[i] - 2)\n        p = i - b\n        if p > 1:\n            c += combin(p, 2)\n    print(c)", "import bisect\n\ndef combin(n, k):\n    if k > n // 2:\n        k = n - k\n    x = 1\n    y = 1\n    i = n - k + 1\n    while i <= n:\n        x = x * i // y\n        y += 1\n        i += 1\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n < 3:\n        print(0)\n        continue\n    c = 0\n    for w in range(1, n):\n        i = n - w\n        if i < 2:\n            break\n        b = bisect.bisect_left(a, a[i] - 2)\n        p = i - b - 1\n        if p >= 1:\n            c += p * (p + 1) // 2\n    print(c)", "import collections\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    if r > n:\n        return 0\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nt = int(input())\nfor i in range(0, t):\n    n = input()\n    di = collections.defaultdict(lambda : 0)\n    li = [int(x) for x in input().split(' ')]\n    if len(li) < 3:\n        print(0)\n        continue\n    for x in li:\n        di[x] += 1\n        di[x + 1] += 0\n        di[x + 2] += 0\n    ite = list(sorted(di.keys()))[:-2]\n    ans = sum([ncr(di[x], 3) + di[x] * di[x + 1] * di[x + 2] + di[x] * ncr(di[x + 1], 2) + ncr(di[x], 2) * di[x + 1] + di[x] * ncr(di[x + 2], 2) + ncr(di[x], 2) * di[x + 2] for x in ite])\n    print(ans)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    score = 0\n    i = 0\n    j = 2\n    while i < n - 2:\n        while j < n and a[j] - a[i] <= 2:\n            j += 1\n        j -= 1\n        score += (j - i) * (j - i - 1) / 2\n        i += 1\n    print(int(score))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    one = 0\n    two = 0\n    while one < n - 2:\n        if two < n and arr[two] - arr[one] <= 2:\n            two += 1\n        else:\n            if two - one > 2:\n                ans += (two - one - 2) * (two - one - 1) // 2\n            one += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    val = 0\n    j = 0\n    k = 0\n    while j < n - 2:\n        while j + k < n and a[j + k] - a[j] <= 2:\n            k += 1\n        if k >= 3:\n            val += (k - 2) * (k - 1) // 2\n        k -= 1\n        j += 1\n    print(val)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        cnt = i = 0\n        j = 0\n        while i < n - 2:\n            if j < n and a[j] - a[i] <= 2:\n                j += 1\n            else:\n                if j - i > 2:\n                    cnt += (j - i - 2) * (j - i - 1) // 2\n                i += 1\n        print(cnt)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    high = 2\n    low = 0\n    summa = 0\n    while high < n:\n        if a[high] - a[low] <= 2:\n            summa += (high - low - 1) * (high - low) // 2\n            high += 1\n        else:\n            low += 1\n        if high - low == 1:\n            high += 1\n    print(summa)", "x = int(input())\nwhile x > 0:\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if n < 3:\n        print(0)\n        x -= 1\n        continue\n    arr.sort()\n    ans = 0\n    ok = {}\n    for (i, j) in enumerate(arr):\n        ok[j] = i\n    for i in range(len(arr) - 2):\n        let = None\n        if arr[i] + 2 in ok:\n            let = ok[arr[i] + 2]\n        elif arr[i] + 1 in ok:\n            let = ok[arr[i] + 1]\n        elif arr[i] in ok:\n            let = ok[arr[i]]\n        if let and let - i - 1 > 0:\n            kk = let - i - 1\n            ans += kk * (kk + 1) // 2\n    print(ans)\n    x -= 1", "from collections import defaultdict\nfact = dict()\n\ndef f(x):\n    if x not in fact:\n        if x <= 1:\n            fact[x] = 1\n        else:\n            fact[x] = x * f(x - 1)\n    return fact[x]\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n < 3:\n        print(0)\n        continue\n    d = defaultdict(int)\n    for x in range(n):\n        d[a[x]] += 1\n    k = sorted(d.keys())\n    N = 0\n    for i in range(len(k)):\n        l = d[k[i]]\n        if l >= 3:\n            N += l * (l - 1) * (l - 2) // 6\n        e = 0\n        if i + 1 < len(k) and k[i + 1] - k[i] <= 2:\n            e += d[k[i + 1]]\n        if i + 2 < len(k) and k[i + 2] - k[i] <= 2:\n            e += d[k[i + 2]]\n        if e > 0:\n            N += l * e * (e - 1) // 2\n            N += l * (l - 1) // 2 * e\n    print(N)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n < 3:\n        print(0)\n        continue\n    c = 0\n    for w in range(1, n):\n        i = n - w\n        if i < 2:\n            break\n        b = bisect.bisect_left(a, a[i] - 2)\n        p = i - b - 1\n        if p >= 1:\n            c += p * (p + 1) // 2\n    print(c)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    if n <= 2:\n        print(0)\n        continue\n    ans = 0\n    for i in range(n):\n        k = bisect.bisect(arr, arr[i] + 2, i + 1, n)\n        k1 = max(0, k - i - 1)\n        ans += k1 * (k1 - 1) // 2\n    print(ans)", "def find(arr, num):\n    n = len(arr)\n    (l, r) = (0, n - 1)\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] > num and mid - 1 < n and (arr[mid - 1] <= num):\n            return mid - 1\n        if arr[mid] > num:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return n - 1\nmemo = {}\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(num) for num in input().split(' ')]\n    s = ''\n    for item in arr:\n        s = s + str(item)\n    if s in memo.keys():\n        print(memo[s])\n    else:\n        arr.sort()\n        ans = 0\n        for i in range(n):\n            idx = find(arr, arr[i] + 2)\n            if idx - i + 1 >= 3:\n                ans = ans + (idx - i) * (idx - i - 1) // 2\n            else:\n                ans = ans + 0\n        print(ans)\n        memo[s] = ans", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (i, j, ans) = (0, 2, 0)\n    while j < n:\n        if a[j] - a[i] <= 2:\n            ans += (j - i - 1) * (j - i) // 2\n            j += 1\n        else:\n            i += 1\n        if j - i == 1:\n            j += 1\n    print(ans)", "R = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sorted(R())\n    j = 0\n    res = 0\n    for i in range(2, n):\n        while j < i and arr[i] - arr[j] > 2:\n            j += 1\n        res += (i - j) * (i - j - 1) // 2\n    print(res)", "from bisect import bisect_right\n\ndef bs(a, value):\n    ans = bisect_right(a, value)\n    if ans != len(a) + 1:\n        return ans - 1\n    else:\n        return -1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    s = 0\n    for i in range(n - 2):\n        c = bs(arr, arr[i] + 2)\n        if c >= i + 1:\n            s += (c - i - 1) * (c - i) // 2\n    print(s)", "def main():\n    t = int(input())\n    while t > 0:\n        t -= 1\n        n = int(input())\n        a = list(map(int, input().split()))\n        a = sorted(a)\n        ans = 0\n        left = 0\n        right = 0\n        while left < len(a) - 2:\n            while right < len(a) and a[right] - a[left] <= 2:\n                right += 1\n            right -= 1\n            if right > left + 1:\n                ans += (right - left) * (right - left - 1) // 2\n            left += 1\n        print(ans)\nmain()", "from math import comb\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    if n < 3:\n        print(0)\n    else:\n        freq = dict()\n        for el in a:\n            if el in freq:\n                freq[el] += 1\n            else:\n                freq[el] = 1\n        ans = 0\n        for i in range(1, n - 1):\n            tup = 0\n            if i == 1:\n                for j in range(1, 4):\n                    if j in freq:\n                        tup += freq[j]\n                if tup >= 3:\n                    ans += comb(tup, 3)\n            else:\n                used = 0\n                for j in range(i, i + 3):\n                    if j in freq:\n                        tup += freq[j]\n                    if j != i + 2 and j in freq:\n                        used += freq[j]\n                if tup >= 3:\n                    ans += comb(tup, 3)\n                if used >= 3:\n                    ans -= comb(used, 3)\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n < 3:\n        print(0)\n        continue\n    a.sort()\n    (p1, p2, tot) = (0, 2, 0)\n    while p1 < n - 2:\n        while p2 < n and a[p2] - a[p1] <= 2:\n            p2 += 1\n        dif = p2 - p1 - 1\n        tot += dif * (dif - 1) // 2\n        p1 += 1\n    print(tot)", "def bsearch_upper_bound(arr, num, start, end):\n    i = start\n    j = end\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] > num:\n            j = mid - 1\n        else:\n            i = mid + 1\n    if arr[i] <= num:\n        return i\n    else:\n        return i - 1\nt = int(input())\nk = 2\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(lambda x: int(x), input().split()))\n    if n < 3:\n        print(0)\n        continue\n    arr.sort()\n    dict_upper_bound = {}\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] in dict_upper_bound:\n            jk = dict_upper_bound[arr[i]]\n        else:\n            jk = bsearch_upper_bound(arr, arr[i] + k, i, n - 1)\n            dict_upper_bound[arr[i]] = jk\n        if jk - i > 1:\n            m = jk - i - 1\n            count += m * (m + 1) // 2\n        i += 1\n    print(count)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    j = 1\n    ans = 0\n    for i in range(n - 2):\n        while j < n and arr[j] - arr[i] <= 2:\n            j += 1\n        k1 = max(0, j - i - 1)\n        ans += k1 * (k1 - 1) // 2\n    print(ans)", "test_num = int(input())\n\ndef solve():\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    sequence.sort()\n    ans = 0\n    lp = 0\n    rp = 0\n    for lp in range(n - 2):\n        a = sequence[lp]\n        while rp < n - 1 and sequence[rp + 1] <= a + 2:\n            rp += 1\n        ans += (rp - lp) * (rp - lp - 1) // 2\n    print(ans)\nfor i in range(test_num):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    size = len(a)\n    a = sorted(a)\n    (i, j) = (0, 2)\n    count = 0\n    while j < size:\n        while j < size and a[j] - a[i] <= 2:\n            count += (j - i - 1) * (j - i) // 2\n            j += 1\n        i += 1\n    print(count)", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef move(i, j, l, d):\n    while l[j] - l[i] > 2:\n        i += 1\n    while j < n and l[j] - l[i] <= 2:\n        j += 1\n    if j - i < 2 and j != n:\n        (i, j) = move(i, j, l, d)\n    return (i, j)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    if n < 3:\n        print(0)\n        continue\n    ans = 0\n    i = 0\n    j = 2\n    while j < n:\n        li = i\n        lj = j\n        (i, j) = move(i, j, l, 2)\n        if j - i >= 3:\n            ans += ncr(j - i, 3)\n            if lj - i >= 3:\n                ans -= ncr(lj - i, 3)\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    c = 0\n    j = 0\n    i = 0\n    while i < n - 2:\n        if j < n and arr[j] - arr[i] <= 2:\n            j += 1\n        else:\n            if j - i > 2:\n                c += (j - i - 2) * (j - i - 1) // 2\n            i += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = i = 0\n    j = 0\n    while i < n - 2:\n        if j < n and a[j] - a[i] <= 2:\n            j += 1\n        else:\n            if j - i > 2:\n                cnt += (j - i - 2) * (j - i - 1) // 2\n            i += 1\n    print(cnt)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list1.sort()\n    ans = 0\n    i = 0\n    j = 0\n    while i < n - 2:\n        if j < n and list1[j] - list1[i] <= 2:\n            j += 1\n        else:\n            num = j - i - 1\n            ans += num * (num - 1) // 2\n            i += 1\n    print(ans)\n    t -= 1", "from bisect import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        b = bisect(a, a[i] + 2)\n        ans += (b - i - 1) * (b - i - 2) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    l.append(n * 2)\n    a = b = res = 0\n    while a < n - 2:\n        if l[b] - l[a] <= 2:\n            b += 1\n            continue\n        else:\n            if b - a > 2:\n                res += (b - a - 2) * (b - a - 1) // 2\n            a += 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    l.append(n * 2)\n    a = b = res = 0\n    while a < n - 2:\n        if l[b] - l[a] <= 2:\n            b += 1\n            continue\n        else:\n            if b - a > 2:\n                res += (b - a - 2) * (b - a - 1) // 2\n            a += 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    l.append(n * 2)\n    a = b = res = 0\n    while a < n - 2:\n        if l[b] - l[a] <= 2:\n            b += 1\n            continue\n        else:\n            if b - a > 2:\n                res += (b - a - 2) * (b - a - 1) // 2\n            a += 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    l.append(n * 2)\n    a = b = res = 0\n    while a < n - 2:\n        if l[b] - l[a] <= 2:\n            b += 1\n            continue\n        else:\n            if b - a > 2:\n                res += (b - a - 2) * (b - a - 1) // 2\n            a += 1\n    print(res)", "def fun(a):\n    return (a - 1) * a // 2\nfor y in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    cnt = 0\n    p = 0\n    if n < 3:\n        print('0')\n    else:\n        for i in range(2, n):\n            foo = 0\n            while lst[i] - lst[p] > 2:\n                foo = 1\n                p += 1\n            cnt += fun(i - p)\n        print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    l.append(n * 2)\n    a = b = res = 0\n    while a < n - 2:\n        if l[b] - l[a] <= 2:\n            b += 1\n            continue\n        else:\n            if b - a > 2:\n                res += (b - a - 2) * (b - a - 1) // 2\n            a += 1\n    print(res)"]