["l = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input().split(' '))\n    p = list(map(int, input().split()))\n    s = []\n    for i in range(n):\n        if p[i] == 0:\n            s.append(int(a[i]))\n    s.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if p[i] == 0:\n            a[i] = str(s[j])\n            j = j + 1\n    l.append(' '.join(a))\nfor i in l:\n    print(i)", "def f(L, b, n):\n    temp = sorted([L[i] for i in range(n) if b[i] == 0], reverse=True)\n    k = 0\n    for i in range(n):\n        if b[i] == 0:\n            L[i] = temp[k]\n            k += 1\n    return ' '.join(map(str, L))\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    L = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    print(f(L, b, n))", "import sys\n\ndef rl(proc=None):\n    if proc is not None:\n        return proc(sys.stdin.readline())\n    else:\n        return sys.stdin.readline().rstrip()\n\ndef srl(proc=None):\n    if proc is not None:\n        return list(map(proc, rl().split()))\n    else:\n        return rl().split()\n\ndef solve(A, B):\n    U = [a for (a, b) in zip(A, B) if not b]\n    U.sort(reverse=True)\n    r = []\n    u = iter(U)\n    for (a, b) in zip(A, B):\n        if b:\n            r.append(a)\n        else:\n            r.append(next(u))\n    return r\n\ndef main():\n    T = rl(int)\n    for t in range(1, T + 1):\n        rl()\n        A = srl(int)\n        B = srl(int)\n        print(' '.join(map(str, solve(A, B))))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    al = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    get = []\n    for i in range(n):\n        if l[i] == 1:\n            continue\n        get.append(al[i])\n    get.sort()\n    for i in range(n):\n        if l[i] != 1:\n            al[i] = get.pop()\n    print(' '.join((str(x) for x in al)))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if sum(a) < 0:\n        print(' '.join([str(i) for i in a]))\n    else:\n        unlocked = [a[i] for i in range(n) if not l[i]]\n        sorted_vals = sorted(unlocked, key=int, reverse=True)\n        output = []\n        i = 0\n        j = 0\n        while i < n:\n            if l[i]:\n                output.append(a[i])\n            else:\n                output.append(sorted_vals[j])\n                j += 1\n            i += 1\n        print(' '.join([str(i) for i in output]))", "import sys\nsys.setrecursionlimit(10000)\nfrom collections import defaultdict\nfrom heapq import heappush\nfrom heapq import heappop\nfrom math import ceil\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    heap = []\n    if sum(arr) < 0:\n        for i in range(n):\n            if pos[i] == 0:\n                heappush(heap, arr[i])\n        for i in range(n):\n            if pos[i] == 0:\n                arr[i] = heappop(heap)\n    else:\n        for i in range(n):\n            if pos[i] == 0:\n                heappush(heap, -arr[i])\n        for i in range(n):\n            if pos[i] == 0:\n                arr[i] = -heappop(heap)\n    ans = ''\n    for i in arr:\n        ans += str(i)\n        ans += ' '\n    print(ans)\nfor i in range(int(input())):\n    solve()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    aa = list(map(int, input().split()))\n    ll = list(map(int, input().split()))\n    xx = sorted((a for (a, l) in zip(aa, ll) if l == 0), reverse=True)\n    c = 0\n    for (i, l) in enumerate(ll):\n        if l == 0:\n            aa[i] = xx[c]\n            c += 1\n    print(' '.join(map(str, aa)))", "import sys\n\ndef main():\n    tn = int(input())\n    for ti in range(tn):\n        n = int(input())\n        A = [int(a) for a in input().split()]\n        L = [int(l) for l in input().split()]\n        B = []\n        for (a, l) in zip(A, L):\n            if l == 1:\n                continue\n            B.append(a)\n        B.sort(reverse=True)\n        ans = []\n        bi = 0\n        for (a, l) in zip(A, L):\n            if l == 1:\n                ans.append(a)\n            else:\n                ans.append(B[bi])\n                bi += 1\n        print(' '.join(map(str, ans)))\nmain()", "def sol_args(n, arr, loc):\n    sarr = [arr[i] for i in range(n) if loc[i] == 0]\n    sarr.sort(reverse=True)\n    sidx = 0\n    for idx in range(n):\n        if loc[idx] == 0:\n            arr[idx] = sarr[sidx]\n            sidx += 1\n    print(' '.join(map(str, arr)))\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        loc = list(map(int, input().split()))\n        sol_args(n, arr, loc)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lock_arr = list(map(int, input().split()))\n    switch_arr = []\n    for (idx, j) in enumerate(lock_arr):\n        if j == 0:\n            switch_arr.append(arr[idx])\n    switch_arr = sorted(switch_arr, reverse=True)\n    l = 0\n    for (idx, g) in enumerate(lock_arr):\n        if g == 0:\n            arr[idx] = switch_arr[l]\n            l += 1\n    print(' '.join(map(str, arr)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    s = [l[i] for i in range(n) if a[i] == 0]\n    s.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if a[i] == 0:\n            l[i] = s[j]\n            j += 1\n    print(' '.join(list(map(str, l))))", "import sys\nfrom math import sqrt, gcd, ceil, log, floor\nfrom bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heapify, heappush, heappop\ninput = sys.stdin.readline\nread = lambda : list(map(int, input().strip().split()))\n\ndef main():\n    ans_ = []\n    for _ in range(int(input())):\n        n = int(input())\n        arr = read()\n        lok = read()\n        tem = [arr[i] for (i, elem) in enumerate(lok) if elem == 0]\n        tem.sort(reverse=True)\n        ind = 0\n        for i in range(n):\n            if lok[i] == 0:\n                arr[i] = tem[ind]\n                ind += 1\n        ans_.append(' '.join(map(str, arr)))\n    print('\\n'.join(ans_))\nmain()", "y = lambda : [*map(int, input().split())]\nfor _ in range(int(input())):\n    n = int(input())\n    a = y()\n    l = y()\n    b = []\n    for i in range(n):\n        if l[i] < 1:\n            b.append(a[i])\n    b.sort()\n    for i in range(n):\n        if l[i] < 1:\n            a[i] = b.pop()\n    print(' '.join(map(str, a)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lock = list(map(int, input().split()))\n    temp = []\n    for i in range(n):\n        if not lock[i]:\n            temp.append(arr[i])\n    temp.sort()\n    for i in range(n):\n        if not lock[i]:\n            arr[i] = temp.pop()\n    print(*arr)", "def work():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    b = [a[i] for i in range(n) if l[i] == 0]\n    b.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if l[i] != 1:\n            a[i] = b[j]\n            j += 1\n    print(' '.join([str(i) for i in a]))\n\ndef main():\n    t = int(input())\n    while t > 0:\n        work()\n        t -= 1\nmain()", "T = int(input())\nret = []\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ans = [0 if l[i] == 0 else a[i] for i in range(n)]\n    ireru = []\n    for i in range(n):\n        if l[i] == 0:\n            ireru.append(a[i])\n    ireru.sort()\n    for i in range(n):\n        if l[i] == 0:\n            ans[i] = ireru.pop()\n    ret.append(ans)\nfor t in range(T):\n    print(' '.join(list(map(str, ret[t]))))", "from sys import stdin, stdout\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    pos = list(map(int, stdin.readline().split()))\n    a1 = []\n    new = []\n    for i in range(n):\n        if pos[i] == 0:\n            a1.append(arr[i])\n    if len(a1) != 0:\n        a1.sort(reverse=True)\n    j = 0\n    maxi = 0\n    for i in range(n):\n        if pos[i] == 0:\n            new.append(a1[j])\n            j += 1\n        else:\n            new.append(arr[i])\n    print(' '.join((str(i) for i in new)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        if b[i] == 0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if not b[i]:\n            a[i] = c[j]\n            j = j + 1\n    print(' '.join(map(str, a)))", "def solve(l, A, n):\n    B = []\n    for i in range(n):\n        if l[i] == 0:\n            B.append(A[i])\n    B.sort()\n    p = -1\n    for i in range(n):\n        if l[i] == 0:\n            A[i] = B[p]\n            p -= 1\n    print(' '.join(map(str, A)))\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    solve(l, arr, n)", "import sys\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\n\ndef ceil(x, y=1):\n    return int(-(-x // y))\nimport math\nfrom collections import defaultdict\nfor _ in range(ri()):\n    n = ri()\n    a = ria()\n    l = ria()\n    z = []\n    for i in range(n):\n        if l[i] == 0:\n            z.append(a[i])\n    z.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = z[j]\n            j += 1\n    wia(a)", "r = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(lambda x: int(x), input().split()))\n    l = list(map(lambda x: int(x), input().split()))\n    al0 = []\n    for i in range(n):\n        if not l[i]:\n            al0.append(a[i])\n    al0.sort(reverse=True)\n    for i in range(n):\n        if not l[i]:\n            a[i] = al0[0]\n            del al0[0]\n    r.append(a)\nfor a in r:\n    print(' '.join(list(map(lambda x: str(x), a))))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lock_unlock = list(map(int, input().split()))\n    unlocked = []\n    index = []\n    for i in range(len(arr)):\n        if lock_unlock[i] == 0:\n            unlocked.append(arr[i])\n            index.append(i)\n    unlocked.sort(reverse=True)\n    for i in range(len(index)):\n        arr[index[i]] = unlocked[i]\n    print(*arr)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    c = []\n    for j in range(n):\n        if l[j] == 0:\n            c.append(a[j])\n    c.sort(reverse=True)\n    k = 0\n    for j in range(n):\n        if l[j] == 0:\n            a[j] = c[k]\n            k = k + 1\n    print(' '.join(map(str, a)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    c = []\n    for j in range(n):\n        if l[j] == 0:\n            c.append(a[j])\n    c.sort(reverse=True)\n    k = 0\n    for j in range(n):\n        if l[j] == 0:\n            a[j] = c[k]\n            k = k + 1\n    print(' '.join(map(str, a)))", "import collections\n\ndef run():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    locks = list(map(int, input().split()))\n    res = []\n    total = sum(nums)\n    if total < 0:\n        print(' '.join((str(i) for i in nums)))\n        return\n    for (i, j) in zip(nums, locks):\n        if j == 0:\n            res.append(i)\n    res = sorted(res)\n    res = res[::-1]\n    ret = []\n    for i in range(n - 1, -1, -1):\n        if locks[i] == 1:\n            ret.append(nums[i])\n        else:\n            ret.append(res.pop())\n    print(' '.join((str(i) for i in ret[::-1])))\nT = 1\nif T:\n    for i in range(int(input())):\n        run()\nelse:\n    run()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fixed = list(map(int, input().split()))\n    free_elems = []\n    for i in range(n):\n        if fixed[i] == 0:\n            free_elems.append(arr[i])\n    free_elems = sorted(free_elems, reverse=True)\n    final_arr = []\n    for i in range(n):\n        if fixed[i] == 0:\n            final_arr.append(free_elems[0])\n            free_elems.pop(0)\n        else:\n            final_arr.append(arr[i])\n    print(' '.join(list(map(str, final_arr))))", "n = int(input())\nfor j in range(n):\n    input()\n    arr = input().split()\n    arr = list(map(int, arr))\n    b = input().split()\n    b = list(map(int, b))\n    c = []\n    for (i, num) in enumerate(arr):\n        if b[i] == 0:\n            c.append(num)\n    c.sort(reverse=True)\n    for (i, num) in enumerate(arr):\n        if b[i] == 1:\n            continue\n        arr[i] = c[0]\n        c.pop(0)\n    print(' '.join(map(str, arr)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    l = []\n    d = []\n    j = 0\n    for i in range(n):\n        if p[i] == 0:\n            d.append(j)\n            l.append(a[i])\n        j += 1\n    l.sort(reverse=True)\n    j = 0\n    for i in d:\n        a[i] = l[j]\n        j += 1\n    print(' '.join(map(str, a)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    u = []\n    res = []\n    for i in range(n):\n        if a[i] == 0:\n            u.append(l[i])\n    u.sort()\n    for i in range(n):\n        if a[i] == 1:\n            res.append(l[i])\n        else:\n            z = u.pop()\n            res.append(z)\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    l = list(map(int, input().strip().split()))\n    b = [0] * n\n    c = []\n    d = []\n    for i in range(n):\n        if l[i] == 1:\n            b[i] = a[i]\n        else:\n            c.append(a[i])\n            d.append(i)\n    c.sort(reverse=True)\n    if len(c) >= 1:\n        for i in range(len(c)):\n            b[d[i]] = c[i]\n    print(*b)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    unlocked = []\n    unlocked_indexes = []\n    for (i, item) in enumerate(l):\n        if item == 0:\n            unlocked.append(a[i])\n            unlocked_indexes.append(i)\n    unlocked = sorted(unlocked)[::-1]\n    new_a = list(a)\n    for (i, index) in enumerate(unlocked_indexes):\n        new_a[index] = unlocked[i]\n    print(*new_a)", "from os import environ\nDEBUG = environ.get('DEBUG') == '1'\n\ndef dd(xx):\n    if not DEBUG:\n        return\n    print('---')\n    for x in xx.strip().split():\n        print(f'# {x} = {globals()[x]}')\n    print('---')\nif DEBUG:\n    print('# Debugging...')\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    l = list(map(int, input().strip().split()))\n    b = []\n    for (ai, li) in zip(a, l):\n        if not li:\n            b.append(ai)\n    b = sorted(b, reverse=True)\n    j = 0\n    for (i, li) in enumerate(l):\n        if not li:\n            a[i] = b[j]\n            j += 1\n    print(*a)\n    dd('n a l')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    unlocked = []\n    for i in range(n):\n        if l[i] == 0:\n            unlocked.append(a[i])\n    u_sort = sorted(unlocked)[::-1]\n    j = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = u_sort[j]\n            j += 1\n    print(' '.join([str(x) for x in a]))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    allowed = []\n    for i in range(n):\n        if l[i] == 0:\n            allowed.append(a[i])\n    allowed.sort(reverse=True)\n    p = sum(a)\n    if p >= 0:\n        for i in range(n - 1, -1, -1):\n            if l[i] == 0:\n                a[i] = allowed.pop()\n            p -= a[i]\n    print(' '.join((str(i) for i in a)))", "def ans_if_list(ans):\n    if isinstance(ans, str):\n        return ans\n    elif isinstance(ans, int):\n        return ans\n    else:\n        return ' '.join((str(ans[i]) for i in range(len(ans))))\n\ndef input_list(typ='int'):\n    if typ == 'int':\n        return list(map(int, input().split()))\n    elif typ == 'str':\n        return list(input())\n\ndef main():\n    t = int(input())\n    for q in range(t):\n        l = int(input())\n        arr = input_list()\n        locked = input_list()\n        total_sum = sum(arr)\n        if sum(locked) == l:\n            ans = arr\n        else:\n            ans = list()\n            unlocked_pos = list()\n            unlocked_neg = list()\n            for i in range(l):\n                if locked[i] == 1:\n                    pass\n                elif arr[i] > 0:\n                    unlocked_pos.append(arr[i])\n                else:\n                    unlocked_neg.append(arr[i])\n            unlocked_pos = sorted(unlocked_pos)\n            unlocked_neg = sorted(unlocked_neg)\n            unlocked = unlocked_neg + unlocked_pos\n            ind = -1\n            if total_sum < 0:\n                ans = arr\n            elif total_sum == 0:\n                for i in range(l):\n                    if locked[i] == 1:\n                        ans.append(arr[i])\n                    else:\n                        ans.append(unlocked[ind])\n                        ind += -1\n            else:\n                for i in range(l):\n                    if locked[i] == 1:\n                        ans.append(arr[i])\n                    else:\n                        ans.append(unlocked[ind])\n                        ind += -1\n        print(ans_if_list(ans))\nmain()", "from math import ceil\nt = int(input())\nanswer = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    l = list(map(int, input().split(' ')))\n    new_list = []\n    for i in range(n):\n        if not l[i]:\n            new_list.append(a[i])\n    new_list.sort(reverse=True)\n    temp = []\n    index1 = 0\n    index2 = 0\n    for i in range(n):\n        if l[index1]:\n            temp.append(str(a[index1]))\n            index1 += 1\n        else:\n            temp.append(str(new_list[index2]))\n            index2 += 1\n            index1 += 1\n    answer.append(' '.join(temp))\nprint('\\n'.join(answer))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    order = []\n    lis = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    fixed = [[lis[i], i] for i in range(len(lis)) if pos[i] == 1]\n    for i in fixed:\n        lis.remove(i[0])\n    lis.sort(reverse=True)\n    for i in fixed:\n        lis.insert(i[1], i[0])\n    print(' '.join(map(str, lis)))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    locks = list(map(int, input().split()))\n    lp = []\n    for j in range(n):\n        if not locks[j]:\n            lp.append(l[j])\n    lp.sort(reverse=True)\n    cnt = 0\n    for j in range(n):\n        if locks[j] == 0:\n            l[j] = lp[cnt]\n            cnt += 1\n        l[j] = str(l[j])\n    print(' '.join(l))", "for _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    lock_list = list(map(int, input().split()))\n    current_sum = 0\n    candidate = []\n    for i in range(n):\n        if lock_list[i] == 1:\n            current_sum += num[i]\n        else:\n            candidate.append(num[i])\n    if len(lock_list) == sum(lock_list):\n        print(' '.join(map(str, num)))\n    else:\n        candidate.sort()\n        for i in range(n):\n            if lock_list[i] == 1:\n                continue\n            else:\n                num[i] = candidate[-1]\n                candidate.pop()\n        print(' '.join(map(str, num)))", "import math\ndebug = True\n\ndef pprint(*args, delimeter='-'):\n    if debug:\n        print('{0} DEBUG {0}'.format(delimeter * 20))\n        print(*args)\n        print('{0} DEBUG {0}'.format(delimeter * 20))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if sum(a) < 0:\n        return a\n    unlocked = []\n    for i in range(n):\n        if l[i] == 0:\n            unlocked.append(a[i])\n    unlocked.sort(reverse=True)\n    index = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = unlocked[index]\n            index += 1\n    return a\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(*solve())", "for i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    l = [int(j) for j in input().split()]\n    b = []\n    for j in range(n):\n        if l[j] == 0:\n            b.append(a[j])\n    b = sorted(b)[::-1]\n    k = 0\n    for j in range(n):\n        if l[j] == 0:\n            a[j] = b[k]\n            k = k + 1\n    print(' '.join((str(j) for j in a)))", "import heapq\n\ndef ans(n, arr, lock):\n    heap = []\n    lst = ['x'] * n\n    for i in range(n):\n        if lock[i] == 1:\n            lst[i] = str(arr[i])\n        else:\n            heapq.heappush(heap, -1 * arr[i])\n    for i in range(n):\n        if lst[i] == 'x':\n            lst[i] = str(-heapq.heappop(heap))\n    return ' '.join(lst)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    lock = list(map(int, input().strip().split(' ')))\n    print(ans(n, arr, lock))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        if pos[i] == 0:\n            l.append(a[i])\n    l.sort()\n    l.reverse()\n    k = 0\n    for j in range(n):\n        if pos[j] == 0:\n            a[j] = l[k]\n            k += 1\n    s = ''\n    for jk in a:\n        s += str(jk) + ' '\n    print(s)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    pos = [int(x) for x in input().split()]\n    u = []\n    for i in range(n):\n        if pos[i] == 0:\n            u.append(arr[i])\n    u.sort(reverse=True)\n    res = []\n    j = 0\n    for i in range(n):\n        if pos[i] == 1:\n            res.append(str(arr[i]))\n        else:\n            res.append(str(u[j]))\n            j += 1\n    print(' '.join(res))\n    t -= 1", "I = input\nfor _ in [0] * int(I()):\n    I()\n    a = I().split()\n    b = [i for (i, x) in enumerate(I()[::2]) if '1' > x]\n    for (i, x) in zip(b[::-1], sorted((int(a[i]) for i in b))):\n        a[i] = x\n    print(*a)", "t = int(input())\nfor num in range(t):\n    n = int(input())\n    most = [int(i) for i in input().split()]\n    blocks = [int(i) for i in input().split()]\n    nise_list = []\n    count_list = []\n    for (count, item) in list(enumerate(blocks)):\n        if item == 0:\n            nise_list.append((most[count], count))\n            count_list.append(count)\n    nise_list.sort(reverse=True)\n    i = 0\n    for (item, count) in nise_list:\n        most[count_list[i]] = item\n        i += 1\n    print(' '.join((str(b) for b in most)))", "def negativePrefixes(n, array, lock):\n    free = []\n    for x in range(n):\n        if lock[x] == 0:\n            free.append(array[x])\n    free.sort(reverse=True)\n    i = 0\n    for x in range(n):\n        if lock[x] == 0:\n            array[x] = free[i]\n            i += 1\n    return array\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = negativePrefixes(n, a, b)\n    for x in ans:\n        print(x, end=' ')\n    print()", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    pos = []\n    neg = []\n    for i in range(n):\n        if b[i] == 0 and a[i] < 0:\n            neg.append(a[i])\n        elif b[i] == 0 and a[i] >= 0:\n            pos.append(a[i])\n    pos.sort(reverse=True)\n    neg.sort()\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if b[i] == 1:\n            ans[i] = a[i]\n        elif len(pos) != 0:\n            ans[i] = pos.pop(0)\n        else:\n            ans[i] = neg.pop()\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    locked = []\n    unlocked = []\n    for i in range(n):\n        if b[i] == 0:\n            unlocked.append(a[i])\n        else:\n            locked.append(a[i])\n    unlocked.sort(reverse=True)\n    i = 0\n    j = 0\n    ans = ''\n    for _ in range(n):\n        if b[_] == 0:\n            ans += str(unlocked[i]) + ' '\n            i += 1\n        else:\n            ans += str(locked[j]) + ' '\n            j += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    (a, b) = ([*map(int, input().split())], [*map(int, input().split())])\n    c = []\n    for i in range(n):\n        if b[i] == 0:\n            c.append(a[i])\n    c.sort()\n    j = len(c) - 1\n    ans = 0\n    for i in range(n):\n        if b[i] == 0:\n            a[i] = c[j]\n            j -= 1\n    print(*a)", "def solve(n, seq, locked):\n    index = n - 1\n    movable = list(zip(seq, locked))\n    refer = [i for (i, j) in movable if j == '0']\n    refer.sort()\n    referIndex = 0\n    while index >= 0:\n        if locked[index] == '0':\n            seq[index] = refer[referIndex]\n            referIndex += 1\n        index -= 1\n    for x in seq:\n        print(x, end=' ')\n    print('')\nfor y in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    l = input().split()\n    solve(n, seq, l)", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (*a,) = map(int, I().split())\n    b = [i for (i, x) in enumerate(I()[::2]) if '1' > x]\n    for (i, x) in zip(b[::-1], sorted((a[i] for i in b))):\n        a[i] = x\n    print(*a)", "a = int(input())\nfor x in range(a):\n    d = int(input())\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    j = []\n    for y in range(d):\n        if c[y] == 0:\n            j.append(b[y])\n    if j != []:\n        j.sort(reverse=True)\n    h = 0\n    for y in range(d):\n        if c[y] == 0:\n            b[y] = j[h]\n            h += 1\n    print(*b)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    new = []\n    ref = []\n    for j in range(n):\n        if l[j] != 1:\n            new.append(arr[j])\n        else:\n            ref.append((arr[j], j))\n    new = sorted(new)[::-1]\n    for x in ref:\n        new.insert(x[1], x[0])\n    print(*new)", "import sys\ninput = sys.stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    b = []\n    for i in range(n):\n        if l[i] == 0:\n            b.append(a[i])\n    b.sort(reverse=True)\n    c = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = b[c]\n            c += 1\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = []\n    m = 0\n    for i in range(n):\n        if p[i] == 0:\n            m = i\n            break\n    for i in range(n):\n        if p[i] == 0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if p[i] == 0:\n            print(c[j], end=' ')\n            j += 1\n        else:\n            print(a[i], end=' ')\n    print()", "import bisect\nimport heapq\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    U = [A[i] for i in range(N) if L[i] == 0]\n    U = sorted(U, reverse=True)\n    index = 0\n    for i in range(N):\n        if L[i]:\n            print(A[i], end=' ')\n        else:\n            print(U[index], end=' ')\n            index += 1\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    changing_list = list(map(int, input().split()))\n    locking_list = list(map(int, input().split()))\n    sort_list = []\n    for i in range(n):\n        if locking_list[i] == 0:\n            sort_list.append(changing_list[i])\n            changing_list[i] = '_'\n    sort_list.sort()\n    for j in range(n):\n        if changing_list[j] == '_':\n            changing_list[j] = sort_list[-1]\n            sort_list.pop()\n    print(*changing_list)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(len(a)):\n        if b[i] == 0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    k = 0\n    for i in range(len(a)):\n        if b[i] == 1:\n            print(a[i], end=' ')\n        else:\n            print(c[k], end=' ')\n            k = k + 1\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        if b[i] == 0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    lo = 0\n    for i in range(n):\n        if b[i] == 0:\n            a[i] = c[lo]\n            lo += 1\n    print(*a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lstn = list(map(int, input().split()))\n    lstl = list(map(int, input().split()))\n    lst1 = []\n    for h in range(n):\n        if lstl[h] == 0:\n            lst1.append(lstn[h])\n    lst1.sort(reverse=True)\n    lsta = []\n    c = 0\n    for f in range(n):\n        if lstl[f] == 1:\n            lsta.append(lstn[f])\n        else:\n            lsta.append(lst1[c])\n            c += 1\n    lst2 = [lsta[0]]\n    k = -1\n    for g in range(1, n):\n        if lst2[-1] < 0:\n            k = g - 1\n            break\n        else:\n            lst2.append(lst2[-1] + lsta[g])\n    if k == -1:\n        k = 0\n        print(*lsta)\n    else:\n        print(*lsta)", "def solution(n, a, l):\n    unlocked = []\n    for i in range(n):\n        if not l[i]:\n            unlocked.append(a[i])\n    unlocked.sort()\n    for i in range(n):\n        if not l[i]:\n            a[i] = unlocked.pop()\n    return a\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    l = list(map(int, input().split(' ')))\n    print(*solution(n, a, l))", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    status = list(map(int, input().split()))\n    if sum(arr) < 0:\n        print(*arr)\n    else:\n        ul = []\n        for i in range(len(arr)):\n            if status[i] == 0:\n                ul.append(arr[i])\n        ul.sort()\n        ul.reverse()\n        for i in range(len(arr)):\n            if status[i] == 0:\n                arr[i] = ul.pop(0)\n        print(*arr)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    if sum(a) >= 0:\n        u = []\n        for i in range(len(a)):\n            if s[i] == 0:\n                u.append(a[i])\n        u.sort()\n        for i in range(len(a)):\n            if s[i] == 0:\n                a[i] = u.pop()\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    _neg = 0\n    _pos = 0\n    for i in range(n):\n        if a[i] < 0:\n            _neg += a[i]\n        else:\n            _pos += a[i]\n    if -_neg > _pos:\n        flag = 1\n    else:\n        flag = 2\n    if flag == 1:\n        rearrange = []\n        for i in range(n):\n            if l[i] == 0:\n                rearrange.append(a[i])\n        rearrange.sort()\n        ans = []\n        ind = 0\n        for i in range(n):\n            if l[i] == 0:\n                ans.append(rearrange[ind])\n                ind += 1\n            else:\n                ans.append(a[i])\n    else:\n        rearrange = []\n        for i in range(n):\n            if l[i] == 0:\n                rearrange.append(a[i])\n        rearrange.sort(reverse=True)\n        ans = []\n        ind = 0\n        for i in range(n):\n            if l[i] == 0:\n                ans.append(rearrange[ind])\n                ind += 1\n            else:\n                ans.append(a[i])\n    l = ''\n    for i in range(n):\n        ans[i] = str(ans[i])\n    print(' '.join(ans))", "def ans(a, n, b):\n    t = []\n    for i in range(n):\n        if b[i] == 0:\n            t.append(a[i])\n    t.sort(reverse=True)\n    answer = [0] * n\n    j = 0\n    for i in range(n):\n        if b[i] == 0:\n            answer[i] = t[j]\n            j += 1\n        else:\n            answer[i] = a[i]\n    s = ''\n    for i in answer:\n        s += str(i) + ' '\n    print(s)\n    return\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    arr1 = input().split()\n    arr2 = input().split()\n    a = []\n    b = []\n    for i in arr1:\n        a.append(int(i))\n    for i in arr2:\n        b.append(int(i))\n    ans(a, n, b)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    l = []\n    for i in range(0, len(a)):\n        if b[i] == 0:\n            l.append(a[i])\n    if not l:\n        print(*a)\n    else:\n        j = 0\n        l.sort(reverse=True)\n        for i in range(0, len(a)):\n            if b[i] == 0:\n                a[i] = l[j]\n                j += 1\n        print(*a)", "def solve():\n    t = inp()\n    for _ in range(t):\n        n = inp()\n        arr = seq()\n        pos = seq()\n        index = []\n        for j in range(n):\n            if pos[j] == 0:\n                index.append(arr[j])\n        index.sort()\n        count = len(index) - 1\n        for j in range(n):\n            if pos[j] == 0:\n                print(index[count], end=' ')\n                count -= 1\n            else:\n                print(arr[j], end=' ')\n        print()\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nsolve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = [int(temp) for temp in input().split()]\n    lock = [int(temp) for temp in input().split()]\n    newar = []\n    sum = 0\n    for i in range(n):\n        sum += nums[i]\n        if lock[i] == 0:\n            newar.append(nums[i])\n    if sum >= 0:\n        m = len(newar)\n        newar.sort(reverse=True)\n        j = 0\n        for i in range(n):\n            if lock[i] == 0:\n                nums[i] = newar[j]\n                j += 1\n    for i in range(n):\n        print(nums[i], end=' ')\n    print()", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    lock = [int(i) for i in input().split(' ')]\n    l1 = []\n    for j in range(n):\n        if lock[j] == 0:\n            l1.append(l[j])\n    l2 = sorted(l1, reverse=True)\n    k = 0\n    res = ''\n    for j in range(n):\n        if lock[j] == 0:\n            res = res + str(l2[k]) + ' '\n            k += 1\n        else:\n            res = res + str(l[j]) + ' '\n    print(res)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    open = []\n    for i in range(n):\n        if l[i] == 0:\n            open.append(a[i])\n    open.sort()\n    open.reverse()\n    ind = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = open[ind]\n            ind += 1\n    print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    locks = list(map(int, input().split()))\n    l2 = []\n    c = 0\n    for x in range(n):\n        if locks[x] == 0:\n            l2.append(l1[x])\n    l2.sort(reverse=True)\n    for x in range(n):\n        if locks[x] == 0:\n            l1[x] = l2[c]\n            c += 1\n    print(*l1)", "def solve(a, p, L):\n    tot = sum(a)\n    x = ['*' for i in range(L)]\n    if tot >= 0:\n        cou = 0\n        for i in range(L):\n            if p[i] == 1:\n                x[i] = a[i - cou]\n                a.pop(i - cou)\n                cou += 1\n        a.sort(reverse=True)\n        for i in range(L):\n            if x[i] == '*':\n                x[i] = a.pop(0)\n        print(*x)\n    else:\n        print(*a)\nfor i in range(int(input())):\n    L = int(input())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    solve(a, p, L)", "class Solution:\n\n    def solve(self, n, arr, locked):\n        ans = []\n        unlocked_it = [arr[i] for i in range(n) if not locked[i]]\n        unlocked_it.sort()\n        for i in range(n):\n            if locked[i]:\n                ans.append(arr[i])\n            else:\n                ans.append(unlocked_it.pop())\n        return ans\n\ndef main():\n    obj = Solution()\n    t = int(input())\n    while t:\n        n = int(input())\n        arr = list(map(int, input().split()))\n        locked = list(map(int, input().split()))\n        print(*obj.solve(n, arr, locked))\n        t -= 1\nmain()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    lock = list(input().split())\n    asd_list = []\n    for (i, e) in enumerate(a):\n        if lock[i] == '0':\n            asd_list.append(e)\n    asd_list.sort(reverse=True)\n    for i in range(n):\n        if lock[i] == '0':\n            a[i] = asd_list.pop(0)\n    print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    index = []\n    t = []\n    for i in range(n):\n        if s[i] == 0:\n            index.append(i)\n            t.append(lst[i])\n    if len(t) == 0:\n        print(*lst)\n        continue\n    t.sort(reverse=True)\n    for i in range(len(index)):\n        lst[index[i]] = t[i]\n    print(*lst)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [a[i] for i in range(n) if b[i] == 0]\n    c.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if b[i] == 0:\n            a[i] = c[j]\n            j += 1\n    print(*a)", "i = lambda : [*map(int, input().split())]\nfor _ in range(i()[0]):\n    i()\n    l = i()\n    a = [j for (j, x) in enumerate(i()) if x < 1]\n    for (j, x) in zip(a[::-1], sorted((l[f] for f in a))):\n        l[j] = x\n    print(*l)", "for _ in range(int(input())):\n    cs = input()\n    l = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    c = []\n    for i in range(len(l)):\n        if a[i] == 0:\n            c.append(l[i])\n    z = sorted(c, reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if a[i] == 1:\n            print(l[i], end=' ')\n        else:\n            print(z[j], end=' ')\n            j += 1\n    print()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = []\n    for (i, j) in enumerate(b):\n        if j == 0:\n            m.append(a[i])\n    m = sorted(m)[::-1]\n    z = 0\n    for (i, j) in enumerate(b):\n        if j == 0:\n            a[i] = m[z]\n            z += 1\n    for i in a:\n        print(i, end=' ')\n    print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        if l[i] == 0:\n            b.append(a[i])\n    b.sort()\n    b.reverse()\n    j = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = b[j]\n            j += 1\n    print(*a)", "from sys import stdin\nip = stdin.readline\nfor _ in range(int(ip())):\n    n = int(ip())\n    a = list(map(int, ip().split()))\n    l = list(map(int, ip().split()))\n    s = []\n    for i in range(n):\n        if not l[i]:\n            s.append(a[i])\n    s.sort()\n    for i in range(n):\n        if not l[i]:\n            a[i] = s.pop()\n    print(*a)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    p = []\n    for i in range(n):\n        if l[i] == 0:\n            p.append(a[i])\n    p.sort()\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = p.pop()\n    print(*a)", "for _ in range(int(input())):\n    am = int(input())\n    arr = list(map(int, input().split()))\n    blocked = list(map(int, input().split()))\n    nBlockedInds = []\n    nBlockedNums = []\n    for i in range(am):\n        if blocked[i] == 0:\n            nBlockedInds.append(i)\n            nBlockedNums.append(arr[i])\n    nBlockedNums.sort(reverse=True)\n    for i in range(len(nBlockedInds)):\n        arr[nBlockedInds[i]] = nBlockedNums[i]\n    print(*arr)", "from sys import stdin\nip = stdin.readline\nfor _ in range(int(ip())):\n    n = int(ip())\n    a = list(map(int, ip().split()))\n    l = list(map(int, ip().split()))\n    s = []\n    for i in range(n):\n        if not l[i]:\n            s.append(a[i])\n    s.sort()\n    for i in range(n):\n        if not l[i]:\n            a[i] = s.pop()\n    print(*a)", "t = int(input(''))\narr = []\narr1 = []\nfor i in range(t):\n    input('')\n    arr.append(list(map(int, input().split())))\n    arr1.append(list(map(int, input().split())))\nfor i in range(t):\n    a = arr[i]\n    locked = arr1[i]\n    n = len(a)\n    bodlaimu = []\n    for j in range(n):\n        if locked[j] == 0:\n            bodlaimu.append(a[j])\n    bodlaimu.sort(reverse=True)\n    for j in range(n):\n        if locked[j] == 0:\n            a[j] = bodlaimu[0]\n            del bodlaimu[0]\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    if sum(a) >= 0:\n        u = []\n        for i in range(len(a)):\n            if s[i] == 0:\n                u.append(a[i])\n        u.sort()\n        for i in range(len(a)):\n            if s[i] == 0:\n                a[i] = u.pop()\n    print(*a)", "import sys\n\ndef solution():\n    T = int(input())\n    arr = []\n    locked = []\n    result = []\n    for _ in range(T):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        locked = list(map(int, input().split()))\n        result = helper(arr, locked)\n        print(*result)\n\ndef helper(arr, locked):\n    n = len(arr)\n    unlocked = []\n    for i in range(n):\n        if locked[i] == 0:\n            unlocked.append(arr[i])\n    unlocked.sort(reverse=True)\n    index = 0\n    for i in range(n):\n        if locked[i] == 0:\n            arr[i] = unlocked[index]\n            index += 1\n    return arr\nsolution()", "for _ in range(int(input())):\n    n = int(input())\n    o_arr = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if l[i] == 0:\n            ans.append(o_arr[i])\n    ans.sort(reverse=True)\n    i = 0\n    for j in range(n):\n        if l[j] == 0:\n            o_arr[j] = ans[i]\n            i += 1\n    print(*o_arr)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    lock_un = list(map(int, input().split()))\n    max_ = float('inf')\n    a = []\n    for i in range(len(l)):\n        if lock_un[i] == 0:\n            a.append(l[i])\n            l[i] = max_\n    a.sort(reverse=True)\n    x = 0\n    for i in range(len(l)):\n        if l[i] == max_:\n            l[i] = a[x]\n            x += 1\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (val, pos) = ([], [])\n    for i in range(n):\n        if l[i] == 0:\n            val.append(a[i])\n            pos.append(i)\n    val.sort(reverse=True)\n    for i in range(len(pos)):\n        a[pos[i]] = val[i]\n    print(*a, sep=' ')", "def schet():\n    n = int(input())\n    mas = list(map(int, input().split()))\n    mas_ans = list(map(int, input().split()))\n    temp_list = []\n    for i in range(len(mas)):\n        if mas_ans[i] == 0:\n            temp_list.append(mas[i])\n    temp_list = sorted(temp_list, reverse=True)\n    for i in range(len(mas)):\n        if mas_ans[i] == 0:\n            mas[i] = temp_list.pop(0)\n    print(*mas)\nt = int(input())\nfor i in range(t):\n    schet()", "def solver(lst, a, n):\n    b = []\n    for i in range(n):\n        if lst[i] == 0:\n            b.append(a[i])\n    b.sort()\n    p = -1\n    for i in range(n):\n        if lst[i] == 0:\n            a[i] = b[p]\n            p -= 1\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    print(*solver(l, arr, n))", "t = int(input())\nq = []\nfor j in range(t):\n    n = int(input())\n    l = list(map(int, list(input().split(' '))))\n    m = list(map(int, list(input().split(' '))))\n    s = [l[i] for i in range(n) if m[i] == 0]\n    s.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if m[i] == 0:\n            l[i] = s[j]\n            j += 1\n    q.append(l)\nfor j in q:\n    for i in j:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fx = list(map(int, input().split()))\n    pos = []\n    neg = []\n    sm = 0\n    for i in range(n):\n        if arr[i] < 0 and fx[i] == 0:\n            neg.append(arr[i])\n        elif fx[i] == 0:\n            pos.append(arr[i])\n    neg.sort()\n    pos.sort()\n    for i in range(n):\n        if fx[i] == 1:\n            continue\n        if len(pos) > 0:\n            arr[i] = pos.pop()\n        else:\n            arr[i] = neg.pop()\n    print(*arr)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fx = list(map(int, input().split()))\n    change = []\n    for i in range(n):\n        if fx[i] == 0:\n            change.append(arr[i])\n    change.sort()\n    for i in range(n):\n        if fx[i] == 1:\n            continue\n        else:\n            arr[i] = change.pop()\n    print(*arr)", "import sys, os, io\ninput = sys.stdin.readline\nT = int(input())\nans = [0] * T\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    B = [A[i] for i in range(N) if L[i] == 0]\n    B.sort()\n    ans[t] = []\n    for i in range(N):\n        if L[i] == 0:\n            ans[t].append(B.pop())\n        else:\n            ans[t].append(A[i])\nfor a in ans:\n    print(*a)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    new_lst = []\n    for i in range(n):\n        if not l[i]:\n            new_lst.append(a[i])\n    new_lst = sorted(new_lst, reverse=True)\n    k = 0\n    for i in range(n):\n        if not l[i]:\n            a[i] = new_lst[k]\n            k += 1\n    sm = 0\n    for i in a:\n        print(i, end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    main()"]