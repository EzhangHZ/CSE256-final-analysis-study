["import math\nt = int(input())\nfor test in range(0, t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    p = 1\n    ind = 0\n    while p <= a[0]:\n        p *= k\n        ind += 1\n    f = False\n    for i in range(0, ind):\n        p = int(p / k)\n        if len(a) > 1 and a[0] >= p and (a[1] >= p):\n            f = True\n            break\n        elif a[0] < p:\n            continue\n        else:\n            a[0] -= p\n            if len(a) > 1 and a[0] < a[1]:\n                a.sort(reverse=True)\n        if a[0] == 0:\n            break\n    if a[0] > 0:\n        f = True\n    if f:\n        print('NO')\n    else:\n        print('YES')", "from bisect import bisect_right as br\n\ndef f(k, a):\n    if a == [0] * len(a):\n        return 'YES'\n    power = [k ** i for i in range(0, 100)]\n    s = sum(a)\n    for i in a:\n        while i:\n            rr = br(power, i) - 1\n            if rr < 0:\n                return 'NO'\n            i -= power[rr]\n            power.pop(rr)\n    return 'YES'\nfor i in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    print(f(b, lst))", "import bisect\nfrom collections import defaultdict\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    power = [1]\n    index = 1\n    while power[-1] <= 10 ** 16:\n        power.append(k ** index)\n        index += 1\n    l = list(map(int, input().split()))\n    val = []\n    flag = 0\n    done = defaultdict(bool)\n    for j in l:\n        value = j\n        while value != 0:\n            x = bisect.bisect_left(power, value)\n            if power[x] != value:\n                x -= 1\n            if done[x] == False:\n                value -= k ** x\n                val.append(x)\n                done[x] = True\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = [int(a) for a in input().split()]\n    ls1 = []\n    p = 0\n    for i in range(n):\n        while ls[i] != 0:\n            pw = math.ceil(math.log10(ls[i]) / math.log10(k))\n            if k ** pw > ls[i]:\n                pw -= 1\n            k1 = k ** pw\n            if pw not in ls1:\n                ls[i] -= k1\n                ls1.append(pw)\n            else:\n                print('NO')\n                p = 1\n                break\n        if p:\n            break\n    if p == 0:\n        print('YES')", "from math import log, ceil\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        s = set()\n        ok = True\n        for i in a:\n            p = i\n            if p == 0:\n                continue\n            m = int(ceil(log(p) / log(k)))\n            l = k ** m\n            while m >= 0 and p > 0:\n                if p >= l and m not in s:\n                    p -= l\n                    s.add(m)\n                m -= 1\n                l //= k\n            if p != 0:\n                ok = False\n                break\n        print('YES' if ok else 'NO')\n    return\nmain()", "from math import ceil, log\nfrom bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [k ** x for x in range(70)]\n    br = [x for x in range(70)]\n    bad = False\n    c = set()\n    for e in a:\n        if e == 0:\n            continue\n        while e > 0:\n            i = bisect_left(b, e)\n            if b[i] > e:\n                i -= 1\n            e -= b[i]\n            if i in c:\n                bad = True\n                break\n            c.add(i)\n    if bad:\n        print('NO')\n    else:\n        print('YES')", "from math import log\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    se = set()\n    flag = 0\n    for i in range(n):\n        if a[i] == 0:\n            None\n        else:\n            while a[i] > 0:\n                val = round(log(a[i], k))\n                if k ** val > a[i]:\n                    val -= 1\n                if val not in se:\n                    se.add(val)\n                else:\n                    flag = 1\n                    break\n                a[i] -= k ** val\n        if flag == 1:\n            break\n    else:\n        print('YES')\n    if flag == 1:\n        print('NO')", "import math\n\ndef solve(n, exp, arr):\n    if max(arr) == 0:\n        return 'YES'\n    start = math.ceil(math.log(max(arr), exp))\n    if exp ** start > max(arr):\n        start -= 1\n    while True:\n        if start < 0:\n            break\n        current = exp ** start\n        found = 0\n        for index in range(len(arr)):\n            if arr[index] >= current:\n                found += 1\n                arr[index] -= current\n        if found > 1:\n            return 'NO'\n        start -= 1\n    for num in arr:\n        if num > 0:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, exp) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, exp, arr))", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    li = list(map(int, input().split(' ')))\n    li.sort(reverse=True)\n    check = [0] * 100\n    res = 1\n    for x in li:\n        if x == 0:\n            continue\n        if res == 0:\n            break\n        num = x\n        req = int(log(num, k))\n        req2 = int(log(num, k)) + 1\n        if int(pow(k, req2)) <= num:\n            req = req2\n        if int(pow(k, req)) > num:\n            req -= 1\n        while True:\n            if check[req] == 0:\n                check[req] = 1\n            else:\n                res = 0\n                break\n            if int(pow(k, req)) == num:\n                break\n            else:\n                num = num - int(pow(k, req))\n                req = int(log(num, k))\n                req2 = int(log(num, k)) + 1\n                if int(pow(k, req2)) <= num:\n                    req = req2\n                if int(pow(k, req)) > num:\n                    req -= 1\n    if res == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, K) = [int(x) for x in input().split()]\n        A = [int(x) for x in input().split()]\n        X = []\n        for i in range(60):\n            X.append(K ** i)\n        X.sort(reverse=True)\n        v = set()\n        f = True\n        for a in A:\n            tmp = a\n            for x in X:\n                if tmp >= x:\n                    tmp -= x\n                    if x in v:\n                        f = False\n                        break\n                    v.add(x)\n            if tmp != 0:\n                f = False\n                break\n        if f:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef conv_strLs2intLs(line):\n    a_list = line.split()\n    map_object = map(int, a_list)\n    list_of_integers = list(map_object)\n    return list_of_integers\n\ndef nu_bgst_power(nu, base):\n    pow = math.log(nu, base)\n    ctmp = math.ceil(pow)\n    ftmp = math.floor(pow)\n    pow = ctmp if ctmp - pow < 1e-13 else ftmp\n    nu2 = int(math.pow(base, pow))\n    if nu2 - nu > 0:\n        return pow - 1\n    return pow\ncount = int(input())\nfor line in range(count):\n    content1 = input().split()\n    n = int(content1[0])\n    k = int(content1[1])\n    array = input().split()\n    result = 'YES'\n    usedIndexes = set()\n    for nu in array:\n        newnu = int(nu)\n        while newnu != 0:\n            index = nu_bgst_power(newnu, k)\n            if index in usedIndexes:\n                result = 'NO'\n                break\n            usedIndexes.add(index)\n            newnu -= k ** index\n        if result == 'NO':\n            break\n    print(result)", "def solve(k, a):\n    p = 1\n    while p < max(a):\n        p *= k\n    while p > 0:\n        for (idx, e) in enumerate(a):\n            if e >= p:\n                a[idx] -= p\n                break\n        p = p // k\n    if max(a) > 0:\n        return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(k, a))", "import math\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    j = 0\n    d = {}\n    b = 0\n    while j < n:\n        if l[j] == 0:\n            j += 1\n            continue\n        c = int(math.log(l[j], k))\n        if l[j] - k ** (c + 1) >= 0:\n            c += 1\n        if l[j] - k ** c < 0:\n            c -= 1\n        l[j] -= k ** c\n        if c in d:\n            print('NO')\n            b = 1\n            break\n        else:\n            d[c] = 1\n        if l[j] == 0:\n            j += 1\n    if b == 0:\n        print('YES')", "import sys\nimport math\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    ch = 0\n    for i in range(n):\n        ch = 0\n        if a[i] > 1:\n            while a[i] > 0 and ch < 1:\n                j = int(math.log(a[i], k))\n                if k ** (j + 1) <= a[i]:\n                    j = j + 1\n                if k ** (j + 1) <= a[i]:\n                    j += 1\n                if k ** j > a[i]:\n                    j -= 1\n                if d.get(j, -1) != -1:\n                    ch = 1\n                    break\n                d[j] = 1\n                a[i] -= k ** j\n            if ch == 1:\n                break\n        elif a[i] == 1:\n            if d.get(0, -1) != -1:\n                ch = 1\n                break\n            d[0] = 1\n            a[i] = 0\n        if a[i] != 0:\n            break\n    ch = 0\n    for i in range(n):\n        if a[i] != 0:\n            ch = 1\n            break\n    if ch == 1:\n        print('NO')\n    else:\n        print('YES')", "import bisect\nt = int(input())\nfor i in range(t):\n    (size, k) = input().split(' ')\n    elements = list(map(int, input().split(' ')))\n    helper = []\n    j = 0\n    visited = {}\n    while True:\n        el = int(k) ** j\n        helper.append(el)\n        visited[el] = False\n        if el > max(elements):\n            break\n        j += 1\n    flag = 0\n    for item in elements:\n        while item > 0:\n            ia = bisect.bisect_left(helper, item)\n            if helper[ia] != item:\n                index = ia - 1\n            else:\n                index = ia\n            if index == -1 or visited[helper[index]]:\n                print('NO')\n                flag = 1\n                break\n            helper_value = helper[index]\n            visited[helper_value] = True\n            item -= helper_value\n        if item < 0:\n            print('NO')\n            flag = 1\n            break\n        if flag == 1:\n            break\n    if flag == 0:\n        print('YES')", "import sys, math\nfrom collections import deque, defaultdict\nimport operator as op\nfrom functools import reduce\nI = sys.stdin.readline\n\ndef ii():\n    return int(I().strip())\n\ndef li():\n    return list(map(int, I().strip().split()))\n\ndef mi():\n    return map(int, I().strip().split())\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef main():\n    ans = ''\n    for _ in range(ii()):\n        (n, k) = mi()\n        arr = li()\n        d = defaultdict(int)\n        flag = 0\n        for i in arr:\n            m = i\n            if m != 0:\n                x = int(math.log(m, k)) + 1\n                while m > 0:\n                    if k ** x > m:\n                        x -= 1\n                    elif d[x] == 0:\n                        m -= k ** x\n                        d[x] += 1\n                    else:\n                        flag = 1\n                        break\n            if flag:\n                break\n        if flag == 0:\n            ans += 'YES\\n'\n        else:\n            ans += 'NO\\n'\n    print(ans)\nmain()", "(t,) = map(int, input().split())\nfor b in [0] * t:\n    (n, k) = map(int, input().split())\n    a = (*map(int, input().split()),)\n    r = 0\n    s = 1\n    while s:\n        z = sum(a)\n        a = [x // k for x in a]\n        r |= s > k * z + 1\n        s = z\n    print('YNEOS'[r::2])", "(t,) = map(int, input().split())\nfor b in [0] * t:\n    (n, k) = map(int, input().split())\n    a = (*map(int, input().split()),)\n    r = 0\n    s = 1\n    while s:\n        z = sum(a)\n        a = [x // k for x in a]\n        r |= s > k * z + 1\n        s = z\n    print('YNEOS'[r::2])", "def main():\n    return '\\n'.join((ifPossibleToMake(*case1312c()) for x in range(int(input()))))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = tuple(map(int, input().split()))\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                if power in usedPowers:\n                    return 'NO'\n                value -= 1\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if lst == [0] * n or k == 1:\n        print('YES')\n    else:\n        p = 0\n        while True:\n            if k ** p > 10 ** 16:\n                break\n            else:\n                p += 1\n        p -= 1\n        e = 0\n        for h in range(p, -1, -1):\n            lst1 = []\n            ele = k ** h\n            for j in range(n):\n                if lst[j] >= ele:\n                    lst1.append(j)\n            if len(lst1) > 1:\n                e += 1\n                break\n            elif len(lst1) == 1:\n                ind = lst1[0]\n                lst[ind] -= ele\n        if e == 0 and lst == [0] * n:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(0, t):\n    (n, k) = map(int, input().split())\n    aa = [int(i) for i in input().split()]\n    k1 = 1\n    while k1 <= 10 ** 16:\n        k1 *= k\n    while k1 > 0:\n        for i in range(0, n):\n            if aa[i] >= k1:\n                aa[i] -= k1\n                break\n        k1 //= k\n    if sum(aa) == 0:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    return '\\n'.join((ifPossibleToMake(*case1312c()) for x in range(int(input()))))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = tuple(map(int, input().split()))\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1 and power not in usedPowers:\n                value -= 1\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "def main():\n    return '\\n'.join((ifPossibleToMake(*case1312c()) for x in range(int(input()))))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = tuple(map(int, input().split()))\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    if sum(array) % number > 1:\n        return 'NO'\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                if power in usedPowers:\n                    return 'NO'\n                value -= 1\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "def main():\n    return '\\n'.join((ifPossibleToMake(*case1312c()) for x in range(int(input()))))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = tuple(map(int, input().split()))\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                value -= 1\n                if power in usedPowers:\n                    return 'NO'\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "def main():\n    return '\\n'.join((ifPossibleToMake(int(input().split()[1]), tuple(map(int, input().split()))) for x in range(int(input()))))\n\ndef ifPossibleToMake(number, array):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                value -= 1\n                if power in usedPowers:\n                    return 'NO'\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "from pprint import pprint\nq = int(input())\nfor _ in range(q):\n    import math\n    (n, k) = map(int, input().split())\n    dat = list(map(int, input().split()))\n    dat.sort(reverse=True)\n    if dat[0] == 0:\n        print('YES')\n        continue\n    ma = math.ceil(math.log(dat[0], k))\n    for i in range(ma, -1, -1):\n        for j in range(n):\n            if dat[j] == 0:\n                continue\n            if dat[j] >= k ** i:\n                dat[j] -= k ** i\n                break\n    if sum(dat) == 0:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor _ in range(q):\n    import math\n    (n, k) = map(int, input().split())\n    dat = list(map(int, input().split()))\n    dat.sort(reverse=True)\n    if dat[0] == 0:\n        print('YES')\n        continue\n    ma = math.ceil(math.log(dat[0], k))\n    for i in range(ma, -1, -1):\n        for j in range(n):\n            if dat[j] == 0:\n                continue\n            if dat[j] >= k ** i:\n                dat[j] -= k ** i\n                break\n    if sum(dat) == 0:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    return '\\n'.join((ifPossibleToMake(*case1312c()) for x in range(int(input()))))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = map(int, input().split())\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                value -= 1\n                if power in usedPowers:\n                    return 'NO'\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nprint(main())", "def power(g, z):\n    w = g\n    c = 0\n    while w >= z:\n        c += 1\n        w = w // z\n    return c\nfor i in range(int(input())):\n    a = 0\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in l:\n        if i == 0:\n            continue\n        j = i\n        while j > 0:\n            q = power(j, k)\n            if q in l1:\n                a += 1\n                break\n            j = j - k ** q\n            l1.append(q)\n        if j != 0:\n            a += 1\n            break\n    if a == 0:\n        print('YES')\n    else:\n        print('NO')", "from math import log\n\ndef f(a, res, n, k):\n    if res == a:\n        return True\n    s = int(log(10 ** 16, k)) + 1\n    for i in range(s, -1, -1):\n        for j in range(n):\n            if a[j] >= k ** i:\n                a[j] -= k ** i\n                if res == a:\n                    return True\n                s -= 1\n                break\n    return False\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if f(a, [0 for j in range(n)], n, k):\n        print('YES')\n    else:\n        print('NO')", "import math\nT = int(input())\nfor case in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if max(a) != 0:\n        i = int(math.log(max(a), k))\n        if math.log(max(a), k) % 1 > 0.99:\n            i += 1\n        while i >= 0:\n            if max(a) - k ** i >= 0:\n                a[a.index(max(a))] = max(a) - k ** i\n            i -= 1\n    if sum(a) == 0:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nans_j = []\nfor j in range(T):\n    (n, k) = list(map(int, input().split(' ')))\n    A = list(map(int, input().split(' ')))\n    pw = 1\n    s = 0\n    while max(A) >= pw:\n        pw *= k\n        s += 1\n    if max(A) == 0:\n        ans = 'YES'\n    else:\n        for i in range(s - 1, -1, -1):\n            if max(A) < k ** i:\n                continue\n            A[A.index(max(A))] -= k ** i\n            if max(A) >= k ** i:\n                ans = 'NO'\n                break\n            elif max(A) == 0:\n                ans = 'YES'\n                break\n    ans_j.append(ans)\nprint(*ans_j, sep='\\n')", "tc = int(input())\n\ndef shucks(a, k):\n    sum = 0\n    for i in a:\n        sum += i % k\n    return sum\nnotded = 1\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while notded:\n        if not any(a):\n            print('YES')\n            break\n        if shucks(a, k) > 1:\n            print('NO')\n            break\n        a = [i // k for i in a]", "def main():\n    for i in range(int(input())):\n        (array, number) = case1312c()\n        print(ifPossibleToMake(array, number))\n\ndef case1312c():\n    (nValues, number) = map(int, input().split())\n    array = tuple(map(int, input().split()))\n    return (array, number)\n\ndef ifPossibleToMake(array, number):\n    usedPowers = set()\n    for value in array:\n        power = 0\n        while value:\n            remainder = value % number\n            if remainder == 1:\n                value -= 1\n                if power in usedPowers:\n                    return 'NO'\n                usedPowers.add(power)\n            elif remainder:\n                return 'NO'\n            value /= number\n            power += 1\n    return 'YES'\nmain()", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 'YES'\n    while any(a):\n        if [x % k for x in a if x % k] > [1]:\n            r = 'NO'\n        a = [x // k for x in a]\n    print(r)", "T = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    mx = max(A)\n    arr = []\n    val = 1\n    while val <= mx:\n        arr.append(val)\n        val *= k\n    arr.reverse()\n    ind = [0] * len(arr)\n    flag = 0\n    for a in A:\n        for i in range(len(arr)):\n            if arr[i] <= a and ind[i] == 0:\n                a -= arr[i]\n                ind[i] = 1\n        if a != 0:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    (n, k) = Read.list_int()\n    a = Read.list_int()\n    t = {}\n    for i in a:\n        if i == 0:\n            continue\n        if i == 1:\n            if 0 in t:\n                print('NO')\n                return\n            t[0] = True\n            continue\n        r = i\n        if i % k != 0:\n            if (i - 1) % k == 0 and 0 not in t:\n                r -= 1\n                t[0] = True\n            else:\n                print('NO')\n                return\n        while True:\n            v = r\n            c = 0\n            while v % k == 0:\n                v = v / k\n                c += 1\n            if c in t:\n                print('NO')\n                return\n            t[c] = True\n            if v == 1:\n                break\n            else:\n                r = r - r / v\n    print('YES')\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for each in range(55, -1, -1):\n        temp = k ** each\n        for i in range(n):\n            if arr[i] >= temp:\n                arr[i] -= temp\n                break\n    if len([i for i in arr if i != 0]) > 0:\n        print('NO')\n    else:\n        print('YES')", "def getComponent(array, k):\n    Set = set()\n    for each in array:\n        if each != 0:\n            count = 0\n            while each > 1:\n                if each % k == 0:\n                    each = each // k\n                    count += 1\n                elif count in Set:\n                    return 'NO'\n                else:\n                    Set.add(count)\n                    each -= 1\n            if count in Set:\n                return 'NO'\n            else:\n                Set.add(count)\n    return 'YES'\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    print(getComponent(array, k))", "def getComponent(array, k):\n    Set = set()\n    for each in array:\n        if each != 0:\n            count = 0\n            while each > 1:\n                if each % k == 0:\n                    each = each // k\n                    count += 1\n                elif count in Set:\n                    return 'NO'\n                else:\n                    Set.add(count)\n                    each -= 1\n            if count in Set:\n                return 'NO'\n            else:\n                Set.add(count)\n    return 'YES'\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    print(getComponent(array, k))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    s = 1\n    while s:\n        z = sum(a)\n        a = [x // k for x in a]\n        r |= s > k * z + 1\n        s = z\n    print('YNEOS'[r::2])", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    max_power = 1\n    while max_power < max(a):\n        max_power *= k\n    while max_power > 0:\n        for (key, v) in enumerate(a):\n            if v >= max_power:\n                a[key] -= max_power\n                break\n        max_power //= k\n    print('YES' if max(a) == 0 else 'NO')", "for t in range(int(input())):\n    (n, k) = [*map(int, input().split())]\n    p = 1\n    while p < 1e+16:\n        p *= k\n    a = [*map(int, input().split())]\n    valid = True\n    while valid:\n        chk = False\n        for i in range(len(a)):\n            if a[i] >= p:\n                if chk:\n                    valid = False\n                    break\n                else:\n                    chk = True\n                    a[i] -= p\n        if sum(a) == 0 or p == 1:\n            valid = False\n        p //= k\n    print('NO' if sum(a) else 'YES')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for each in range(60, -1, -1):\n        temp = k ** each\n        for i in range(n):\n            if arr[i] >= temp:\n                arr[i] -= temp\n                break\n    if len([i for i in arr if i != 0]) > 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for each in range(59, -1, -1):\n        temp = k ** each\n        for i in range(n):\n            if arr[i] >= temp:\n                arr[i] -= temp\n                break\n    if len([i for i in arr if i != 0]) > 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    Max = max(a)\n    Count = True\n    x = True\n    while x == True:\n        value = Max ** (1 / Count)\n        if value <= k:\n            break\n        Count = Count + 1\n    for i in range(Count, -1, -1):\n        value = k ** i\n        for ii in range(n):\n            if a[ii] >= value:\n                a[ii] = a[ii] - value\n                break\n    Max = max(a)\n    if Max > 0:\n        print('NO')\n    else:\n        print('YES')", "n = int(input())\nfor _ in range(n):\n    (m, k) = map(int, input().split(' '))\n    ks = [1]\n    kk = 1\n    while kk <= 10 ** 16:\n        kk *= k\n        ks += [kk]\n    ns = list(map(int, input().split(' ')))\n    fail = False\n    for x in ns:\n        upper = len(ks) - 1\n        while x > 0 and upper >= 0:\n            if ks[upper] != None and ks[upper] <= x:\n                x -= ks[upper]\n                ks[upper] = None\n            upper -= 1\n        if x > 0:\n            fail = True\n            break\n    if fail:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\n\ndef call(n, k):\n    i = 0\n    while n:\n        r = n % k\n        if r == 0:\n            pass\n        elif r == 1:\n            dp[i] += 1\n            if dp[i] > 1:\n                return False\n        else:\n            return False\n        n //= k\n        i += 1\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = defaultdict(int)\n    tg = True\n    for p in a:\n        if p != 0:\n            if call(p, k):\n                pass\n            else:\n                tg = False\n                break\n    if tg:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 1\n    while cnt * k <= a[n - 1]:\n        cnt *= k\n    while cnt >= 1:\n        for i in range(n):\n            if cnt <= a[i]:\n                a[i] -= cnt\n                break\n        cnt /= k\n    if sum(a) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for each in range(60, -1, -1):\n        temp = k ** each\n        for i in range(n):\n            if arr[i] >= temp:\n                arr[i] -= temp\n                break\n    print('YES' if max(arr) == 0 else 'NO')", "t = int(input())\nfor t1 in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    setOfA = set()\n\n    def factorization(num):\n        powK = 0\n        if (num - 1) % k == 0:\n            if powK in setOfA:\n                return False\n            num -= 1\n            setOfA.add(powK)\n        while num % k == 0 and num != 0:\n            while num != 1 and num % k == 0:\n                num //= k\n                powK += 1\n            if (num - 1) % k == 0:\n                if powK in setOfA:\n                    return False\n                num -= 1\n                setOfA.add(powK)\n        return num == 0\n    success = True\n    for ai in a:\n        if ai == 0:\n            continue\n        if not factorization(ai):\n            success = False\n            break\n    print(('NO', 'YES')[success])", "def cs(n, k):\n    a = n\n    b = a\n    C = []\n    d = 0\n    while a != 0:\n        if a % k == 0:\n            a = a // k\n            d = d + 1\n        else:\n            C.append(d)\n            a = b - k ** d\n            d = 0\n            b = a\n    return C\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    a = A[n - 1]\n    flag = 0\n    for i in range(n - 1):\n        if A[i] != 0 and A[i] == A[i - 1]:\n            flag = 1\n            break\n    if A[n - 1] == 0:\n        flag = 0\n    if flag == 0 and A[n - 1] != 0:\n        b = 1\n        ty = 1\n        while b < A[n - 1]:\n            b = b * k\n            ty = ty + 1\n        D = [0 for i in range(ty + 1)]\n        for i in range(n):\n            E = cs(A[i], k)\n            for j in E:\n                if D[j] == 1:\n                    flag = 1\n                    break\n                else:\n                    D[j] = 1\n            if flag == 1:\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 'YES'\n    while any(a):\n        if [x % k for x in a if x % k] > [1]:\n            r = 'NO'\n        a = [x // k for x in a]\n    print(r)", "import sys\nt = int(sys.stdin.readline())\n\ndef used(n, k):\n    ans = set()\n    i = 0\n    while n > 0:\n        used = n % k\n        if used == 1:\n            ans.add(i)\n        if used > 1:\n            return None\n        n = n // k\n        i += 1\n    return ans\nfor _ in range(t):\n    (n, k) = [int(i) for i in sys.stdin.readline().split()]\n    a = [int(i) for i in sys.stdin.readline().split()]\n    seen = set()\n    for v in a:\n        now = used(v, k)\n        if now is None or len(now & seen) != 0:\n            seen = None\n            print('NO')\n            break\n        seen = seen | now\n    if not seen is None:\n        print('YES')", "for _ in range(0, int(input())):\n    (n, m) = input().split()\n    used = []\n    val = []\n    bnd = 10000000000000000\n    nw = 1\n    while int(nw) <= int(bnd):\n        val.append(nw)\n        used.append(0)\n        nw *= int(m)\n    val.reverse()\n    can = 1\n    a = list(map(int, input().split()))\n    for j in range(0, int(n)):\n        x = a[j]\n        for i in range(0, len(val)):\n            if x >= val[i] and used[i] == 0:\n                x -= val[i]\n                used[i] = 1\n        if x > 0:\n            can = 0\n    if can == 1:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    import sys\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        A = list(map(int, input().split()))\n        used = [0] * 60\n        ans = 'YES'\n        for a in A:\n            i = 0\n            while a:\n                if a % k == 1:\n                    if used[i] == 1:\n                        ans = 'NO'\n                    else:\n                        used[i] = 1\n                elif a % k != 0:\n                    ans = 'NO'\n                a //= k\n                i += 1\n        print(ans)\nmain()", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [True] * 100\n    bad = False\n    for v in a:\n        (i, pk) = (0, 1)\n        while pk <= v:\n            i += 1\n            pk *= k\n        while v > 0 and i >= 0:\n            if pk <= v:\n                v -= pk\n                if p[i]:\n                    p[i] = False\n                else:\n                    bad = True\n                    break\n            pk //= k\n            i -= 1\n        if v > 0:\n            bad = True\n        if bad:\n            break\n    print('NO' if bad else 'YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 'YES'\n    while any(a):\n        if [x % k for x in a if x % k] > [1]:\n            r = 'NO'\n        a = [x // k for x in a]\n    print(r)", "T = int(input())\n\ndef k_beats(n, k, l):\n    d = set()\n    for i in range(len(l)):\n        t = 1\n        j = 0\n        while l[i]:\n            while not l[i] % t:\n                t = t * k\n                j = j + 1\n            l[i] = l[i] - t // k\n            if j - 1 in d:\n                return 'NO'\n            d.add(j - 1)\n            if l[i] < 0:\n                return 'NO'\n    return 'YES'\nfor i in range(T):\n    r = []\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    print(k_beats(n, k, l))", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    data = list(map(int, input().split()))\n    flag = True\n    count = 0\n    maximum = pow(10, 16)\n    w = 8\n    while pow(y, w) < maximum:\n        w += 1\n    if data.count(0) != x:\n        while count < 2 and w >= 0:\n            temp = pow(y, w)\n            for i in range(len(data)):\n                if data[i] >= temp:\n                    count += 1\n                    data[i] -= temp\n            if count >= 2:\n                flag = False\n                break\n            w -= 1\n            count = 0\n    print('YES' if data.count(0) == x and flag == True else 'NO')", "def conv(x, k):\n    s = ''\n    while x != 0:\n        if x % k == 0:\n            s += '0'\n        elif x % k == 1:\n            s += str('1')\n        else:\n            return -1\n        x = x // k\n    s = s[::-1]\n    return s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    s = ''\n    xor = []\n    for i in a:\n        if i == 0:\n            s = '0'\n        else:\n            s = conv(i, k)\n        if s == -1:\n            ans = 'NO'\n            break\n        else:\n            xor.append(int(s, 2))\n    if ans == 'NO':\n        print(ans)\n    else:\n        t = 0\n        for i in range(len(xor)):\n            if t ^ xor[i] == t + xor[i]:\n                t = t + xor[i]\n            else:\n                ans = 'NO'\n                break\n        print(ans)", "import sys\nfrom math import *\nfrom collections import defaultdict\nfrom queue import deque\nfrom heapq import heappush, heappop\nlines = [line.strip() for line in sys.stdin.readlines()]\n\ndef f(x, k):\n    ret = 0\n    pos = 0\n    kk = 1\n    while x > kk:\n        kk *= k\n        pos += 1\n    while pos >= 0:\n        if x >= kk:\n            x -= kk\n            ret |= 1 << pos\n        kk //= k\n        pos -= 1\n    return -1 if x != 0 else ret\nt = int(lines[0])\nfor tt in range(t):\n    (n, k) = list(map(int, lines[tt * 2 + 1].split()))\n    xs = list(map(int, lines[tt * 2 + 2].split()))\n    sofar = 0\n    for x in xs:\n        flg = f(x, k)\n        if flg < 0 or sofar & flg != 0:\n            sofar = -1\n            break\n        sofar |= flg\n    print('NO' if sofar < 0 else 'YES')", "task_number = int(input())\n\nclass FindContradiction(Exception):\n    pass\n\ndef find_positions(number, base):\n    result = set()\n    current_position = 0\n    while number > 0:\n        if number % base not in (0, 1):\n            raise FindContradiction()\n        if number % base == 1:\n            result.add(current_position)\n        number = number // base\n        current_position += 1\n    return result\nfor _ in range(task_number):\n    (n, k) = map(int, input().split())\n    array = [int(item) for item in input().split()]\n    used_positions = set()\n    try:\n        for number in array:\n            positions = find_positions(number, k)\n            if positions.intersection(used_positions):\n                raise FindContradiction()\n            used_positions.update(positions)\n        print('YES')\n    except FindContradiction:\n        print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    while any(a):\n        r |= [x % k for x in a if x % k] > [1]\n        a = [x // k for x in a]\n    print('YNEOS'[r::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    while any(a):\n        r |= [x % k for x in a if x % k] > [1]\n        a = [x // k for x in a]\n    print('YNEOS'[r::2])", "q = int(input())\nfor _ in range(q):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while 1:\n        if not any(a):\n            print('YES')\n            break\n        if sum((x % k for x in a)) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]", "t = eval(input())\nwhile t > 0:\n    numbers = list(map(int, input().split()))\n    n = numbers[0]\n    k = numbers[1]\n    index = []\n    for i in range(100):\n        index.append(-1)\n    arr = []\n    numbers = list(map(int, input().split()))\n    for i in range(n):\n        arr.append(numbers[i])\n    flag = 0\n    if k == 1:\n        print('YES')\n    else:\n        for i in range(n):\n            if arr[i] != 0:\n                remaining = arr[i]\n                while 1:\n                    temp = 1\n                    count = 0\n                    while temp < remaining:\n                        temp = temp * k\n                        count += 1\n                    if temp == remaining:\n                        if index[count] == -1:\n                            index[count] = 1\n                        else:\n                            flag = 1\n                        break\n                    else:\n                        temp /= k\n                        remaining -= temp\n                        if count > 0 and index[count - 1] == -1:\n                            index[count - 1] = 1\n                        else:\n                            flag = 1\n                            break\n                if flag == 1:\n                    break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "q = int(input())\nfor _ in range(q):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while 1:\n        if not any(a):\n            print('YES')\n            break\n        if sum((x % k for x in a)) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 'YES'\n    while any(a):\n        if [x % k for x in a if x % k] > [1]:\n            r = 'NO'\n        a = [x // k for x in a]\n    print(r)", "q = int(input())\nfor _ in range(q):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while 1:\n        if not any(a):\n            print('YES')\n            break\n        if sum((x % k for x in a)) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = []\n    d = set()\n    w = 0\n    for i in range(n):\n        p = a[i]\n        while p > k - 1:\n            q = 1\n            r = 0\n            while q * k <= p:\n                q = q * k\n                r = r + 1\n            p = p - q\n            if r in d:\n                w = w + 1\n                break\n            else:\n                d.add(r)\n        if p == 0:\n            continue\n        elif p == 1:\n            if 0 in d:\n                w = w + 1\n                break\n            else:\n                d.add(0)\n        else:\n            w = w + 1\n            break\n    if w == 0:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor s in range(T):\n    (n, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    maxPower = 1\n    while maxPower <= 10000000000000000:\n        maxPower *= k\n    while maxPower > 0:\n        s = 0\n        for i in range(len(array)):\n            if array[i] >= maxPower:\n                s += 1\n                if s <= 1:\n                    array[i] = array[i] - maxPower\n        maxPower //= k\n    if min(array) == 0 and max(array) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    while any(a):\n        ans |= [x % k for x in a if x % k] > [1]\n        a = [x // k for x in a]\n    print('YNEOS'[ans::2])", "q = int(input())\nfor _ in range(q):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while 1:\n        if any(a) == 0:\n            print('YES')\n            break\n        if sum((x % k for x in a)) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]", "t = eval(input())\nfor k in range(t):\n    numbers = list(map(int, input().split()))\n    n = numbers[0]\n    k = numbers[1]\n    index = []\n    for i in range(100):\n        index.append(-1)\n    arr = []\n    numbers = list(map(int, input().split()))\n    for i in range(n):\n        arr.append(numbers[i])\n    flag = 0\n    for i in range(n):\n        if arr[i] != 0:\n            remaining = arr[i]\n            while 1:\n                temp = 1\n                count = 0\n                while temp < remaining:\n                    temp = temp * k\n                    count += 1\n                if temp == remaining:\n                    if index[count] == -1:\n                        index[count] = 1\n                    else:\n                        flag = 1\n                    break\n                else:\n                    temp /= k\n                    remaining -= temp\n                    if count > 0 and index[count - 1] == -1:\n                        index[count - 1] = 1\n                    else:\n                        flag = 1\n                        break\n            if flag == 1:\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, i) = R()\n    a = (*R(),)\n    r = 'YES'\n    while any(a):\n        if [x % i for x in a if x % i] > [1]:\n            r = 'NO'\n        a = [x // i for x in a]\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    while any(a):\n        r |= sum((x % k for x in a)) > 1\n        a = [x // k for x in a]\n    print('YNEOS'[r::2])", "for z in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while a != [0 for i in a]:\n        b = [x % k for x in a]\n        if sum(b) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    flag = 0\n    while arr != [0 for i in arr]:\n        b = [x % k for x in arr]\n        arr = [x // k for x in arr]\n        if sum(b) > 1:\n            flag = 1\n            print('NO')\n            break\n    if flag == 0:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    flag = 0\n    if l[0] == 0:\n        n = 0\n        y = 0\n    else:\n        x = math.ceil(math.log(l[0], k))\n        y = [0 for i in range(x + 1)]\n    for i in range(n):\n        for j in range(x, -1, -1):\n            if l[i] >= k ** j:\n                if y[j] == 1:\n                    flag = 1\n                    break\n                else:\n                    y[j] = 1\n                    l[i] -= k ** j\n            if l[i] == 0:\n                break\n            if l[i] < k and l[i] != 1:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag or sum(l):\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    used = []\n    f = 1\n    for i in range(n):\n        p = a[i]\n        c = 0\n        while p != 0:\n            if p % k == 0:\n                p = p // k\n                c += 1\n            elif (p - 1) % k == 0:\n                p = (p - 1) // k\n                if c in used:\n                    f = 0\n                    break\n                else:\n                    used.append(c)\n                    c += 1\n            else:\n                f = 0\n                break\n        if f == 0:\n            break\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    while a != [0 for i in a]:\n        b = [x % k for x in a]\n        if sum(b) > 1:\n            print('NO')\n            break\n        a = [x // k for x in a]\n    else:\n        print('YES')", "I = lambda : map(int, input().split())\nfrom bisect import bisect_right as br\nfor _ in range(int(input())):\n    (n, k) = I()\n    (a, t, l, r, q) = (list(I()), 0, [1], 1, [])\n    while r < 10 ** 16:\n        r *= k\n        l += [r]\n    for i in a:\n        w = br(l, i)\n        p = set()\n        for j in range(w - 1, -1, -1):\n            if i >= l[j]:\n                i -= l[j]\n                p.add(j)\n            if i == 0:\n                break\n        if i != 0:\n            t = 1\n            break\n        q.append(p)\n    for i in range(len(q)):\n        for j in range(i + 1, len(q)):\n            if len(q[i] & q[j]) != 0:\n                t = 1\n                break\n    print(['YES', 'NO'][t])", "import math\nt = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    q = max(a)\n    if q != 0:\n        l = int(math.log(q, k)) + 1\n        for j in range(0, l + 1):\n            b.append(1)\n        a.sort()\n        flag = 0\n        for j in range(n - 1, -1, -1):\n            for p in range(l, -1, -1):\n                if a[j] >= k ** p:\n                    if b[p] == 0:\n                        flag = 1\n                        break\n                    else:\n                        a[j] = a[j] - k ** p\n                        b[p] = 0\n                if a[j] == 0:\n                    break\n            if flag == 1 or a[j] != 0:\n                flag = 1\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')", "from sys import stdin\n\ndef to_base(num, b):\n    ret = []\n    while num > 0:\n        ret.append(num % b)\n        num = num // b\n    return ret\nfor tc in range(int(stdin.readline())):\n    (n, k) = [int(xx) for xx in stdin.readline().split()]\n    a = [int(xx) for xx in stdin.readline().split()]\n    bits = set()\n    ok = True\n    for num in a:\n        conv = to_base(num, k)\n        for i in range(len(conv)):\n            cur = conv[i]\n            if cur == 1:\n                if i in bits:\n                    ok = False\n                else:\n                    bits.add(i)\n            elif cur != 0:\n                ok = False\n    print('YES' if ok else 'NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    while any(a):\n        r |= [x % k for x in a if x % k] > [1]\n        a = [x // k for x in a]\n    print('YNEOS'[r::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    r = 0\n    while any(a):\n        (a, b) = zip(*(divmod(x, k) for x in a))\n        r |= sum(b) > 1\n    print('YNEOS'[r::2])"]