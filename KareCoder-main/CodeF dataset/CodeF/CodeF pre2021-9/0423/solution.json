["I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *(x < '.' and min(b[i:i + 3]) + 1 for (i, x) in enumerate(s)), 0)\n        r += sum(b)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *(x < '.' and min(b[i:i + 3]) + 1 for (i, x) in enumerate(s)), 0)\n        r += sum(b)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *(x < '.' and min(b[i:i + 3]) + 1 for (i, x) in enumerate(s)), 0)\n        r += sum(b)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *(x < '.' and min(b[i:i + 3]) + 1 for (i, x) in enumerate(s)), 0)\n        r += sum(b)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    (n, m) = map(int, I().split())\n    a = [I() for _ in [0] * n]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        c = (0, *((s[i] < '.') * (min(b[i:i + 3]) + 1) for i in range(m)), 0)\n        r += sum(c)\n        b = c[:]\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *((x < '.') * (min(b[i:i + 3]) + 1) for (i, x) in enumerate(s)), 0)\n        r += sum(b)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    (n, m) = map(int, I().split())\n    a = [I() for _ in [0] * n]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        c = [(s[i] < '.') * (min(b[i:i + 3]) + 1) for i in range(m)]\n        r += sum(c)\n        b = (0, *c, 0)\n    print(r)", "I = input\nfor _ in [0] * int(I()):\n    (n, m) = map(int, I().split())\n    a = [I() for _ in [0] * n]\n    b = [0] * 501\n    r = 0\n    for s in a[::-1]:\n        b = (0, *((s[i] < '.') * (min(b[i:i + 3]) + 1) for i in range(m)), 0)\n        r += sum(b)\n    print(r)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    c = []\n    for _ in range(n):\n        c.append(input())\n    pt = [0] * m\n    ans = 0\n    for i in range(n):\n        ct = [0] * m\n        j = 0\n        while j < m:\n            if c[i][j] == '*':\n                start = j\n                while j < m and c[i][j] == '*':\n                    j += 1\n                for k in range(start, j):\n                    ct[k] = min(pt[k] + 1, k + 1 - start, j - k)\n            j += 1\n        pt = ct.copy()\n        ans += sum(ct)\n    print(ans)", "def f(x: int):\n    return x % 2 + x // 2\n\ndef find_spruce(n: int, m: int, field: list):\n    res = 0\n    temp_field = [[0 for j in range(m)] for i in range(n)]\n    for j in range(m):\n        if field[0][j] == '*':\n            temp_field[0][j] = 1\n            res += temp_field[0][j]\n    for i in range(1, n):\n        seq = 0\n        for j in range(m):\n            if field[i][j] == '*':\n                seq += 1\n            else:\n                seq = 0\n                continue\n            if temp_field[i - 1][j - 1] != 0 and seq >= 3 and (f(seq) - temp_field[i - 1][j - 1] >= 1):\n                temp_field[i][j] = temp_field[i - 1][j - 1] + 1\n            elif temp_field[i - 1][j - 1] != 0 and seq >= 3:\n                temp_field[i][j] = f(seq)\n            else:\n                temp_field[i][j] = 1\n            res += temp_field[i][j]\n    return res\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    field = []\n    for j in range(n):\n        field.append(input())\n    print(find_spruce(n, m, field))", "import math\nt = int(input())\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    graph = []\n    dp = [[0] * (m + 1)]\n    for x in range(n):\n        graph.append(list(input()))\n        dp.append([0] * (m + 1))\n    ans = 0\n    for x in range(n):\n        continuity = 0\n        for y in range(m):\n            if graph[x][y] == '*':\n                continuity += 1\n                dp[x + 1][y + 1] = min(dp[x][y] + 1, int((continuity - 1) / 2) + 1)\n                ans += dp[x + 1][y + 1]\n            else:\n                continuity = 0\n    return ans\nfor i in range(t):\n    output = solve()\n    print(output)", "def findTheSpruce(matrix):\n    total = 0\n    dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n    for col in range(len(matrix[0])):\n        dp[-1][col] = 1 if matrix[-1][col] == '*' else 0\n        total += dp[-1][col]\n    for row in range(len(matrix) - 2, -1, -1):\n        for col in range(len(matrix[0])):\n            if matrix[row][col] == '*':\n                minimum = dp[row + 1][col]\n                if col == 0:\n                    minimum = 0\n                else:\n                    minimum = min(minimum, dp[row + 1][col - 1])\n                if col == len(matrix[0]) - 1:\n                    minimum = 0\n                else:\n                    minimum = min(minimum, dp[row + 1][col + 1])\n                dp[row][col] = 1 + minimum\n                total += dp[row][col]\n    return total\ntestcases = int(input().strip())\nfor _ in range(testcases):\n    (n, m) = map(int, input().strip().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(input().strip())\n    print(findTheSpruce(matrix))", "t = int(input())\ng = []\nfor x in range(t):\n    (n, m) = input().split()\n    l = []\n    for y in range(int(n)):\n        l.append(input())\n    p = [[0] * (int(m) + 2) for i in range(int(n) + 1)]\n    for i in range(int(n) - 1, -1, -1):\n        for j in range(1, int(m) + 1):\n            if l[i][j - 1] == '*':\n                p[i][j] = min(p[i + 1][j - 1], p[i + 1][j], p[i + 1][j + 1]) + 1\n    print(sum([sum(h) for h in p]))", "def solve(mat, n, m):\n    res = 0\n    dp = [[1 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '.':\n                dp[i][j] = 0\n    for i in range(n - 2, -1, -1):\n        for j in range(1, m - 1):\n            if dp[i][j] == 0:\n                continue\n            minh = min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n            dp[i][j] = 1 + minh\n    for i in range(n):\n        for j in range(m):\n            res += dp[i][j]\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for _ in range(n):\n        row = input()\n        mat.append(row)\n    print(solve(mat, n, m))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(input()) for i in range(n)]\n    dp = [[0] * (m + 2) for i in range(n + 1)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(1, m + 1):\n            if arr[i][j - 1] == '*':\n                dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n            ans += dp[i][j]\n    print(ans)", "import sys, time\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_line():\n    return sys.stdin.readline().strip()\n\ndef find(mat):\n    count = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if mat[i][j] == '.':\n                mat[i][j] = 0\n            elif j == 0 or j == m - 1 or i == n - 1:\n                mat[i][j] = 1\n            else:\n                min_val = min(mat[i + 1][j - 1], mat[i + 1][j], mat[i + 1][j + 1])\n                mat[i][j] = min_val + 1\n            count += mat[i][j]\n    return count\nres = []\nfor _ in range(get_int()):\n    (n, m) = get_ints()\n    mat = []\n    for i in range(n):\n        mat.append(list(get_line()))\n    res.append(str(find(mat)))\nsys.stdout.write('\\n'.join(res))", "def find(mat):\n    count = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if mat[i][j] == '.':\n                mat[i][j] = 0\n            elif j == 0 or j == m - 1 or i == n - 1:\n                mat[i][j] = 1\n            else:\n                min_val = min(mat[i + 1][j - 1], mat[i + 1][j], mat[i + 1][j + 1])\n                mat[i][j] = min_val + 1\n            count += mat[i][j]\n    return count\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(input().strip()))\n    print(find(mat))", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    res = 0\n    m = [[0 for i in range(c + 2)] for j in range(r + 1)]\n    data = [0 for i in range(r)]\n    for row in range(r):\n        data[row] = input()\n    for i in range(row, -1, -1):\n        for j in range(c):\n            if data[i][j] == '*':\n                m[i][j + 1] = min(m[i + 1][j], m[i + 1][j + 1], m[i + 1][j + 2]) + 1\n    print(sum([sum(i) for i in m]))", "def result(arr, n, board_number, m):\n    sum = 0\n    for j in range(m):\n        if arr[n - 1][j] == '*':\n            board_number[n - 1][j] = 1\n        else:\n            board_number[n - 1][j] = 0\n        sum += board_number[n - 1][j]\n    for i in range(n - 2, -1, -1):\n        for j in range(m):\n            if arr[i][j] == '.':\n                board_number[i][j] = 0\n            elif j == 0 or j == m - 1:\n                if arr[i][j] == '*':\n                    board_number[i][j] = 1\n                else:\n                    board_number[i][j] = 0\n            else:\n                board_number[i][j] = 1 + min(board_number[i + 1][j], board_number[i + 1][j + 1], board_number[i + 1][j - 1])\n            sum += board_number[i][j]\n    return sum\nno_tests = int(input())\nres = []\nfor i in range(no_tests):\n    arr = []\n    board_number = []\n    dimension = input().split()\n    (n, m) = (int(dimension[0]), int(dimension[1]))\n    for row in range(n):\n        read_arr = input()\n        tmp = []\n        tmp_board = []\n        for col in range(m):\n            tmp.append(read_arr[col])\n            tmp_board.append(0)\n        arr.append(tmp)\n        board_number.append(tmp_board)\n    res.append(result(arr, n, board_number, m))\nfor each in res:\n    print(each)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    a = n * [0]\n    for w in range(n):\n        a[w] = input()\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in list(reversed(range(n))):\n        for j in range(m):\n            if a[i][j] == '.':\n                dp[i][j] = 0\n            elif j > 0 and j < m - 1 and (i < n - 1):\n                dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n            else:\n                dp[i][j] = 1\n    s = 0\n    for i in dp:\n        s += sum(i)\n    print(s)", "def solve_2(grid):\n    n = len(grid)\n    m = len(grid[0])\n    count = 0\n    dp = [[0 for x in range(m)] for y in range(n)]\n    for i in range(m):\n        if grid[n - 1][i] == '*':\n            dp[n - 1][i] = 1\n    for j in range(n):\n        if grid[j][m - 1] == '*':\n            dp[j][m - 1] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 2, -1, -1):\n            if grid[i][j] == '.':\n                dp[i][j] = 0\n            else:\n                dp[i][j] = 1\n                if j - 1 >= 0:\n                    dp[i][j] = dp[i][j] + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n    ans = 0\n    for z in dp:\n        ans += sum(z)\n    print(ans)\nt = int(input())\nfor test in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    grid = []\n    for i in range(n):\n        ch = input()\n        temp = []\n        for x in ch:\n            temp.append(x)\n        grid.append(temp)\n    solve_2(grid)", "t = int(input())\nml = []\nfor ind in range(t):\n    s = input()\n    s = s.split()\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    n = s[0]\n    m = s[1]\n    a = []\n    b = []\n    for ind in range(m + 2):\n        b.append(0)\n    for ind in range(n + 2):\n        a.append(b.copy())\n    for i in range(n):\n        s2 = input()\n        for j in range(m):\n            if s2[j] == '*':\n                a[i + 1][j + 1] = -1\n    ml.append([n, m, a])\n\ndef f(a, x, y):\n    if a[y + 1][x + 1] == -1:\n        a[y + 1][x + 1] = 1 + min([a[y + 2][x], a[y + 2][x + 1], a[y + 2][x + 2]])\n\ndef sum(a):\n    s = 0\n    for l in a:\n        for x in l:\n            s = s + x\n    return s\n\ndef main():\n    for e in ml:\n        n = e[0]\n        m = e[1]\n        a = e[2]\n        y = n - 1\n        x = 0\n        while y > -1:\n            while x < m:\n                f(a, x, y)\n                x = x + 1\n            x = 0\n            y = y - 1\n        print(sum(a))\nmain()", "t = int(input())\nfor _ in range(t):\n    (m, n) = [int(i) for i in input().split()]\n    matrix = []\n    for _ in range(m):\n        matrix.append(input())\n    count = [[0 for _ in range(n)] for _ in range(m)]\n    res = 0\n    for i in range(m):\n        start = 0\n        for j in range(n):\n            if matrix[i][j] == '*':\n                continue\n            else:\n                while start < j:\n                    L = j - start\n                    if L == 1:\n                        count[i][start] = 1\n                        res += 1\n                    elif i > 0 and count[i - 1][start + 1] >= L - 2:\n                        count[i][start] = L\n                        res += (L + 1) // 2\n                    elif i == 0:\n                        count[i][start] = 1\n                        res += 1\n                    else:\n                        L = count[i - 1][start + 1] + 2\n                        count[i][start] = L\n                        res += (L + 1) // 2\n                    start += 1\n                start += 1\n        else:\n            while start < n:\n                L = n - start\n                if L == 1:\n                    count[i][start] = 1\n                    res += 1\n                elif i > 0 and count[i - 1][start + 1] >= L - 2:\n                    count[i][start] = L\n                    res += (L + 1) // 2\n                elif i == 0:\n                    count[i][start] = 1\n                    res += 1\n                else:\n                    L = count[i - 1][start + 1] + 2\n                    count[i][start] = L\n                    res += (L + 1) // 2\n                start += 1\n    print(res)", "def solve():\n    (n, m) = map(int, input().split())\n    a = []\n    dp = []\n    for i in range(n):\n        a.append([''] * m)\n        dp.append([0] * m)\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            a[n - i - 1][j] = s[j]\n    for i in range(m):\n        if a[0][i] == '*':\n            dp[0][i] = 1\n        else:\n            dp[0][i] = 0\n    for i in range(1, n):\n        for j in range(m):\n            if a[i][j] == '*':\n                dp[i][j] = 1\n                if j > 0 and j < m - 1:\n                    dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n            else:\n                dp[i][j] = 0\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += dp[i][j]\n    print(ans)\ntests = int(input())\nwhile tests > 0:\n    solve()\n    tests = tests - 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(input())\n        b.append([0] * m)\n    s = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if a[i][j] == '*':\n                if i == n - 1:\n                    b[i][j] = 1\n                    s += 1\n                elif j == 0 or j == m - 1:\n                    b[i][j] = 1\n                    s += 1\n                else:\n                    x = b[i + 1][j - 1:j + 2]\n                    b[i][j] = min(x) + 1\n                    s += b[i][j]\n    print(s)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dp = [[0] * m for i in range(n)]\n    matric = [input() for i in range(n)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if matric[i][j] == '*':\n                if not (i == n - 1 or j == 0 or j == m - 1):\n                    dp[i][j] = 1 + min(dp[i + 1][j + 1], dp[i + 1][j - 1], dp[i + 1][j])\n                else:\n                    dp[i][j] = 1\n            ans += dp[i][j]\n    print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    mat = [0 for i in range(n)]\n    dp = [[0] * m for i in range(n)]\n    for i in range(n):\n        mat[i] = input()\n    for col in range(m):\n        dp[n - 1][col] = 1 if mat[n - 1][col] == '*' else 0\n    for i in range(n - 2, -1, -1):\n        for j in range(m):\n            if mat[i][j] == '*':\n                a = dp[i + 1][j - 1] if j - 1 >= 0 else 0\n                b = dp[i + 1][j]\n                c = dp[i + 1][j + 1] if j + 1 < m else 0\n                dp[i][j] = 1 + min(a, b, c)\n    ans = 0\n    for row in dp:\n        ans += sum(row)\n    print(ans)", "import logging\nimport sys\nfrom inspect import currentframe\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nlogging.basicConfig(level=logging.DEBUG)\n\ndef dbg(*args):\n    id2names = {id(v): k for (k, v) in currentframe().f_back.f_locals.items()}\n    logging.debug(', '.join((id2names.get(id(arg), '???') + ' = ' + repr(arg) for arg in args)))\n\ndef solve():\n    (n, m) = map(int, input().split())\n    s = [input().rstrip() for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if s[i][j] == '*':\n                if i == n - 1 or j == 0 or j == m - 1:\n                    dp[i][j] = 1\n                    ans += 1\n                else:\n                    dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n                    ans += dp[i][j]\n    print(ans)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = [[0 for j in range(m)] for i in range(n)]\n    mat = [input() for i in range(n)]\n    count = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if mat[i][j] == '*':\n                if i == n - 1 or j == 0 or j == m - 1:\n                    ans[i][j] = 1\n                else:\n                    ans[i][j] = 1 + min(ans[i + 1][j], ans[i + 1][j + 1], ans[i + 1][j - 1])\n                count += ans[i][j]\n    print(count)", "a = int(input())\nfor o in range(a):\n    (n, m) = map(int, input().split())\n    pic = [0] * n\n    for i in range(n):\n        pic[i] = [0] * m\n    for i in range(n):\n        c = str(input())\n        for j in range(m):\n            pic[i][j] = c[j]\n    new = [[0] * (m + 2) for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if pic[i][j] == '*':\n                new[i][j + 1] = min(new[i + 1][j], new[i + 1][j + 1], new[i + 1][j + 2]) + 1\n    k = 0\n    for i in range(n + 1):\n        for j in range(m + 2):\n            k += new[i][j]\n    print(k)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    martix = [input() for i in range(n)]\n    dp = [[0 for j in range(m)] for i in range(n)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if martix[i][j] == '*':\n                if not (i == n - 1 or j == 0 or j == m - 1):\n                    dp[i][j] = 1 + min(dp[i + 1][j], dp[i + 1][j + 1], dp[i + 1][j - 1])\n                else:\n                    dp[i][j] = 1\n                ans += dp[i][j]\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (N, M) = list(map(int, input().split()))\n    a = [list(input()) for n in range(N)]\n    ans = 0\n    for i in range(N):\n        for j in range(M):\n            if a[i][j] == '*':\n                a[i][j] = 1\n            elif a[i][j] == '.':\n                a[i][j] = 0\n    for i in range(N - 2, -1, -1):\n        for j in range(1, M - 1):\n            if a[i][j] != 0:\n                a[i][j] = min(a[i + 1][j - 1], a[i + 1][j], a[i + 1][j + 1]) + 1\n    for i in range(N):\n        for j in range(M):\n            ans += a[i][j]\n    print(ans)", "(n, m) = (0, 0)\nmatrix = list()\nfor t in [0] * int(input()):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = [input() for _ in [0] * n]\n    for i in range(n):\n        matrix[i] = [0 if char == '.' else 1 for char in matrix[i]]\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = sum([sum(i) for i in matrix])\n    print(count)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    x = []\n    for i in range(n):\n        y = input()\n        x.append(list(y))\n    dp = []\n    for i in range(n):\n        dp.append([0] * m)\n    for i in range(n):\n        for j in range(m):\n            if x[i][j] == '*':\n                dp[i][j] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 2, 0, -1):\n            if dp[i][j] == 1:\n                dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += dp[i][j]\n    print(ans)\n    t = t - 1", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    table = [input() for _ in range(n)]\n    dp = [[0 for _ in range(m)] for __ in range(n)]\n    res = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(0, m):\n            if table[i][j] == '*':\n                if i == n - 1 or j == 0 or j == m - 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n                res += dp[i][j]\n    print(res)\n    t -= 1", "(n, m) = (0, 0)\nmatrix = list()\nfor t in [0] * int(input()):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = [input() for _ in [0] * n]\n    for i in range(n):\n        matrix[i] = [0 if char == '.' else 1 for char in matrix[i]]\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        count += sum(matrix[i])\n    print(count)", "def checkStar(char):\n    if char == '.':\n        return 0\n    else:\n        return 1\nmatrix = list()\nfor t in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    matrix = [input() for _ in [0] * n]\n    for i in range(n):\n        matrix[i] = list(map(checkStar, matrix[i]))\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = sum([sum(i) for i in matrix])\n    print(count)", "for _ in range(int(input())):\n    k = [int(x) for x in input().split()]\n    a = []\n    for i in range(k[0]):\n        a.append(input())\n    dp = []\n    for i in range(k[0]):\n        t = []\n        for j in range(k[1]):\n            t.append(0)\n        dp.append(t)\n    s = 0\n    for i in range(k[1]):\n        if a[-1][i] == '*':\n            dp[-1][i] = 1\n            s += 1\n    for i in range(k[0] - 2, -1, -1):\n        for j in range(0, k[1]):\n            if a[i][j] == '*':\n                if j == 0 or j == k[1] - 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n            s += dp[i][j]\n    print(s)", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    matrix = []\n    ans = []\n    for i in range(n):\n        matrix.append(list(input()))\n        ans.append([0] * m)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                ans[i][j] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j] == '*':\n                ans[i][j] = min(ans[i + 1][j], ans[i + 1][j - 1], ans[i + 1][j + 1]) + 1\n    mainans = 0\n    for i in range(n):\n        for j in range(m):\n            mainans += ans[i][j]\n    print(mainans)", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    matrix = []\n    ans = []\n    for i in range(n):\n        matrix.append(list(input()))\n        ans.append([0] * m)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                ans[i][j] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j] == '*':\n                ans[i][j] = min(ans[i + 1][j], ans[i + 1][j - 1], ans[i + 1][j + 1]) + 1\n    mainans = 0\n    for i in range(n):\n        for j in range(m):\n            mainans += ans[i][j]\n    print(mainans)", "for _ in ' ' * int(input()):\n    (n, m) = map(int, input().split())\n    (lst, cnt, dp) = ([], 0, [[0 for i in range(m)] for j in range(n)])\n    for i in range(n):\n        lst.append(input())\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if lst[i][j] == '*':\n                dp[i][j] = 1 + (min(dp[i + 1][j], dp[i + 1][j + 1], dp[i + 1][j - 1]) if not (i == n - 1 or j == 0 or j == m - 1) else 0)\n                cnt += dp[i][j]\n    print(cnt)", "(n, m) = (0, 0)\nmatrix = list()\nfor t in [0] * int(input()):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    for i in [0] * n:\n        matrix.append([0 if char == '.' else 1 for char in input()])\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        count += sum(matrix[i])\n    print(count)", "from pprint import pprint\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    mat = [0 for i in range(n)]\n    dp = [[0] * m for i in range(n)]\n    for i in range(n):\n        mat[i] = list(input())\n    for col in range(m):\n        dp[n - 1][col] = 1 if mat[n - 1][col] == '*' else 0\n    for i in range(n - 2, -1, -1):\n        for j in range(m):\n            if mat[i][j] == '*':\n                a = dp[i + 1][j - 1] if j - 1 >= 0 else 0\n                b = dp[i + 1][j]\n                c = dp[i + 1][j + 1] if j + 1 < m else 0\n                dp[i][j] = 1 + min(a, b, c)\n    ans = 0\n    for row in dp:\n        ans += sum(row)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    matrix = []\n    ans = []\n    for i in range(n):\n        matrix.append(list(input()))\n        ans.append([0] * m)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                ans[i][j] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j] == '*':\n                ans[i][j] = min(ans[i + 1][j], ans[i + 1][j - 1], ans[i + 1][j + 1]) + 1\n    mainans = 0\n    for i in range(n):\n        for j in range(m):\n            mainans += ans[i][j]\n    print(mainans)", "import sys\nm = {'*': 1, '.': 0}\n\ndef sip():\n    return sys.stdin.readline().rstrip()\n\ndef gen_test_cases():\n    num_tests = int(sip())\n    for i in range(num_tests):\n        (height, width) = map(int, sip().split(' '))\n        arr = [[m[c] for c in line] for line in [sys.stdin.readline().rstrip() for x in range(height)]]\n        yield (height, width, arr)\nfor (h, w, mc) in gen_test_cases():\n    for y in range(1, h):\n        for x in range(1, w - 1):\n            if mc[y][x] != 0:\n                r = min(mc[y][x - 1], mc[y - 1][x])\n                if r:\n                    mc[y][x] = r + 1\n        for x in reversed(range(1, w - 1)):\n            if mc[y][x] != 0:\n                mc[y][x] = min(mc[y][x], mc[y][x + 1] + 1)\n    count = sum([sum(mc[y]) for y in range(h)])\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (lst, cnt, dp) = ([input() for i in range(n)], 0, [[0 for i in range(m)] for j in range(n)])\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if lst[i][j] == '*':\n                dp[i][j] = 1 + (min(dp[i + 1][j], dp[i + 1][j + 1], dp[i + 1][j - 1]) if not (i == n - 1 or j == 0 or j == m - 1) else 0)\n                cnt += dp[i][j]\n    print(cnt)", "(n, m) = (0, 0)\nmatrix = list()\nfor t in range(int(input())):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    for i in range(n):\n        matrix.append([0 if char == '.' else 1 for char in input()])\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += matrix[i][j]\n    print(count)", "(n, m) = (0, 0)\nmatrix = list()\nfor t in range(int(input())):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    for i in range(n):\n        matrix.append([0 if char == '.' else 1 for char in input()])\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        count += sum(matrix[i])\n    print(count)", "(n, m) = (0, 0)\nmatrix = list()\nt = int(input())\nwhile t:\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    i = n\n    while i:\n        matrix.append([0 if char == '.' else 1 for char in input()])\n        i -= 1\n    i = n - 1\n    while i:\n        j = 1\n        while j < m - 1:\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n            j += 1\n        i -= 1\n    count = 0\n    n -= 1\n    while n >= 0:\n        count += sum(matrix[n])\n        n -= 1\n    print(count)\n    t -= 1", "import sys\nimport math, bisect, operator\n(inf, m) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 6)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    (n, m) = neo()\n    A = [input() for i in range(n)]\n    dp = [[0] * m for j in range(n)]\n    Ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if A[i][j] == '*':\n                dp[i][j] = 1\n                if i + 1 < n and j - 1 > -1 and (j + 1 < m):\n                    dp[i][j] = min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1]) + 1\n            Ans += dp[i][j]\n    print(Ans)", "import sys\nm = {'*': 1, '.': 0}\n\ndef sip():\n    return sys.stdin.readline().rstrip()\n\ndef gen_test_cases():\n    num_tests = int(sip())\n    for i in range(num_tests):\n        (height, width) = map(int, sip().split(' '))\n        arr = [[m[c] for c in line] for line in [sys.stdin.readline().rstrip() for x in range(height)]]\n        yield (height, width, arr)\nfor (h, w, mc) in gen_test_cases():\n    for y in range(1, h):\n        for x in range(1, w - 1):\n            if mc[y][x] != 0:\n                r = min(mc[y][x - 1], mc[y - 1][x])\n                if r:\n                    mc[y][x] = r + 1\n        for x in reversed(range(w - 1)):\n            if mc[y][x] != 0:\n                mc[y][x] = min(mc[y][x], mc[y][x + 1] + 1)\n    count = sum([sum(mc[y]) for y in range(h)])\n    print(count)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    counters = [[0 for i in range(m)] for j in range(n)]\n    ans = 0\n    for r in range(n - 1, -1, -1):\n        for c in range(m):\n            if grid[r][c] == '*':\n                counters[r][c] = 1\n                if r < n - 1 and c > 0 and (c < m - 1):\n                    counters[r][c] += min([counters[r + 1][c - 1], counters[r + 1][c], counters[r + 1][c + 1]])\n                ans += counters[r][c]\n    print(ans)", "(n, m) = (0, 0)\ncountMatrix = list()\nfor t in range(int(input())):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    countMatrix = list()\n    for i in range(n):\n        matrix.append(list(input()))\n        countMatrix.append([0 if char == '.' else 1 for char in matrix[i]])\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if countMatrix[i][j - 1] != 0 and countMatrix[i][j] != 0 and (countMatrix[i][j + 1] != 0) and (countMatrix[i - 1][j] != 0):\n                countMatrix[i - 1][j] += min(countMatrix[i][j - 1], countMatrix[i][j], countMatrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += countMatrix[i][j]\n    print(count)", "(n, m) = (0, 0)\nmatrix = list()\nfor t in range(int(input())):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    for i in range(n):\n        matrix.append(list(input()))\n        matrix[i] = [0 if char == '.' else 1 for char in matrix[i]]\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += matrix[i][j]\n    print(count)", "n = int(input())\nfor i in range(n):\n    (p, q) = [int(x) for x in input().split()]\n    tree = []\n    for j in range(p):\n        tree.append([1 if x == '*' else 0 for x in list(input())])\n    for x in range(p - 2, -1, -1):\n        for y in range(q):\n            if x + 1 < p and y - 1 < q and (y + 1 < q) and (x + 1 >= 0) and (y - 1 >= 0) and (y + 1 >= 0):\n                tree[x][y] = tree[x][y] + tree[x][y] * min(tree[x + 1][y - 1], tree[x + 1][y], tree[x + 1][y + 1])\n    print(sum(map(sum, tree)))", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    li = []\n    for i in range(n):\n        li.append(list(input()))\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in reversed(range(n)):\n        for j in reversed(range(m)):\n            if li[i][j] == '*':\n                if i + 1 < n and j - 1 >= 0 and (j + 1 < m):\n                    dp[i][j] = 1 + min(dp[i + 1][j - 1], dp[i + 1][j], dp[i + 1][j + 1])\n                else:\n                    dp[i][j] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += dp[i][j]\n    print(ans)\n    t -= 1", "from sys import stdin\ninput = stdin.readline\n\ndef find(i, j):\n    mi = 1000000.0\n    for h in range(2):\n        if j - h < 0 or j + h >= m:\n            mi = 0\n            break\n        mi = min(mi, processed[i + 1][j - h], processed[i + 1][j + h])\n    processed[i][j] = mi + 1\n\ndef func():\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                processed[i][j] = 1\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if grid[i][j] == '*':\n                find(i, j)\n    for i in range(n):\n        for j in range(m):\n            ans += processed[i][j]\n    print(ans)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = [list(input()) for __ in range(n)]\n    processed = [[0 for x in range(m)] for y in range(n)]\n    func()", "(n, m) = (0, 0)\nmatrix = list()\nfor t in range(int(input())):\n    (n, m) = [int(num) for num in input().split()]\n    matrix = list()\n    for i in range(n):\n        matrix.append([0 if char == '.' else 1 for char in list(input())])\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if matrix[i][j - 1] != 0 and matrix[i][j] != 0 and (matrix[i][j + 1] != 0) and (matrix[i - 1][j] != 0):\n                matrix[i - 1][j] += min(matrix[i][j - 1], matrix[i][j], matrix[i][j + 1])\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count += matrix[i][j]\n    print(count)", "t = int(input())\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        tmp = input()\n        a.append(tmp)\n    sum = []\n    kq = []\n    ans = int(0)\n    for i in range(n):\n        tmp = []\n        tmp1 = []\n        for j in range(m):\n            tmp.append(int(0))\n            tmp1.append(int(0))\n        sum.append(tmp)\n        kq.append(tmp1)\n    for i in range(n):\n        if a[i][0] == '*':\n            sum[i][0] = 1\n        else:\n            sum[i][0] = 0\n    for i in range(n):\n        for j in range(1, m):\n            if a[i][j] == '.':\n                sum[i][j] = 0\n            else:\n                sum[i][j] = sum[i][j - 1] + 1\n    for i in range(n):\n        for j in range(m):\n            if n == 0 or m == 0:\n                kq[i][j] = sum[i][j]\n                ans = ans + sum[i][j]\n            else:\n                if sum[i][j] != 0:\n                    kq[i][j] = min(kq[i - 1][j - 1] + 1, (sum[i][j] - 1) // 2 + 1)\n                else:\n                    kq[i][j] = 0\n                ans = ans + kq[i][j]\n    print(ans)", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nfor _ in range(t()):\n    (n, m) = ll()\n    a = []\n    ans = 0\n    d = []\n    for i in range(n):\n        s = ss()\n        a.append(s)\n        d.append([0] * m)\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if a[i][j] == '*':\n                d[i][j] += 1\n                if j - 2 >= 0 and i - 1 >= 0 and (j >= 2):\n                    if a[i][j - 1] == a[i][j - 2] == '*' and a[i - 1][j - 1] == '*':\n                        d[i - 1][j - 1] = min(d[i][j - 1], d[i][j], d[i][j - 2])\n                ans += d[i][j]\n    print(ans)", "for i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(input())\n    ans = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                if j < m - 2 and i > 0:\n                    if matrix[i][j + 1] == matrix[i][j + 2] == matrix[i - 1][j + 1] == '*':\n                        ans[i - 1][j + 1] += 1 + min(ans[i][j], ans[i][j + 1], ans[i][j + 2])\n                ans[i][j] += 1\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            total += ans[i][j]\n    print(total)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(input())\n    ans = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if a[i][j] == '*':\n                if j < m - 2 and i > 0:\n                    if a[i][j] == a[i - 1][j + 1] == a[i][j + 2] == a[i][j + 1] == '*':\n                        ans[i - 1][j + 1] += 1 + min(ans[i][j], ans[i][j + 1], ans[i][j + 2])\n                ans[i][j] += 1\n    total = 0\n    for i in range(n):\n        total += sum(ans[i])\n    print(total)", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nfor _ in range(t()):\n    (n, m) = ll()\n    a = []\n    ans = [0]\n    d = []\n    for i in range(n):\n        s = ss()\n        a.append(s)\n        d.append([0] * m)\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if a[i][j] == '*':\n                d[i][j] += 1\n                if j - 2 >= 0 and i - 1 >= 0 and (j >= 2):\n                    if a[i][j - 1] == a[i][j - 2] == '*' and a[i - 1][j - 1] == '*':\n                        d[i - 1][j - 1] = min(d[i][j - 1], d[i][j], d[i][j - 2])\n    for i in range(n):\n        ans[0] += sum(d[i])\n    print(ans[0])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [input() for i in range(n)]\n    a = [[0] * m for i in range(n)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if s[i][j] == '*':\n                a[i][j] = 1\n                if i < n - 1 and j < m - 1 and (j > 0):\n                    if s[i + 1][j] == '*' and s[i + 1][j + 1] == '*' and (s[i + 1][j - 1] == '*'):\n                        a[i][j] += min([a[i + 1][j + 1], a[i + 1][j], a[i + 1][j - 1]])\n            ans += a[i][j]\n    print(ans)", "for y in range(int(input())):\n    (n, m) = map(int, input().split())\n    dp = []\n    lst = []\n    for i in range(n):\n        dp.append([0] * m)\n        lst.append(list(input()))\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if lst[i][j] == '*':\n                if i == n - 1 or j == 0 or j == m - 1:\n                    dp[i][j] = 0\n                elif lst[i + 1][j - 1] == '*' and lst[i + 1][j] == '*' and (lst[i + 1][j + 1] == '*'):\n                    dp[i][j] = min(dp[i + 1][j], dp[i + 1][j + 1], dp[i + 1][j - 1]) + 1\n                else:\n                    dp[i][j] = 0\n                cnt += 1 + dp[i][j]\n            else:\n                pass\n    print(cnt)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    mt = []\n    for i in range(n):\n        mt.append(input())\n    vst = []\n    for i in range(n):\n        vst.append([0 for j in range(m)])\n\n    def fun(x, y):\n        if mt[x][y] == '.':\n            return 0\n        elif not vst[x][y] == 0:\n            return vst[x][y]\n        elif x == n - 1 or y == m - 1 or y == 0:\n            vst[x][y] = 1\n            return 1\n        else:\n            op = min(fun(x + 1, y), fun(x + 1, y - 1), fun(x + 1, y + 1))\n            if op == 0:\n                vst[x][y] = 1\n            else:\n                vst[x][y] = op + 1\n            return vst[x][y]\n    sm = 0\n    for i in range(n):\n        for j in range(m):\n            sm += fun(i, j)\n    print(sm)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    count = 0\n    trees = dict()\n    for i in range(n - 1, -1, -1):\n        for j in range(0, m):\n            if l[i][j] == '*':\n                x = 0\n                if i != n - 1 and j >= 1 and (j <= m - 2):\n                    if (i + 1, j - 1) in trees and (i + 1, j) in trees and ((i + 1, j + 1) in trees):\n                        x = min(trees[i + 1, j - 1], trees[i + 1, j], trees[i + 1, j + 1])\n                count += x + 1\n                trees[i, j] = 1 + x\n    print(count)", "def dfs(x, y):\n    if sublist[x][y] > 0:\n        return sublist[x][y]\n    flag = 0\n    if x + 1 < n and y - 1 > -1 and (y + 1 < m):\n        if matrix[x + 1][y - 1:y + 2] == '***':\n            flag = 1\n    if flag:\n        sublist[x][y] = 1 + min(dfs(x + 1, y), dfs(x + 1, y - 1), dfs(x + 1, y + 1))\n        return sublist[x][y]\n    else:\n        sublist[x][y] = 1\n        return sublist[x][y]\ntestcase = int(input())\nfor i in range(testcase):\n    nm = list(map(int, input().split()))\n    n = nm[0]\n    m = nm[1]\n    sublist = [[0 for i in range(m)] for y in range(n)]\n    matrix = []\n    count = 0\n    for y in range(n):\n        matrix.append(input())\n    for a in range(n):\n        for b in range(m):\n            if matrix[a][b] == '*':\n                count += dfs(a, b)\n    print(count)", "class Vertex:\n\n    def __init__(self, ch, q=0):\n        self.ch = ch\n        self.h = q\n\n    def set(self, q):\n        self.h = q\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [[Vertex(ch) for ch in input()] for _ in range(n)]\n    count = 0\n    for y in range(n - 1, -1, -1):\n        for x in range(m):\n            if arr[y][x].ch == '.':\n                continue\n            if x == 0 or x == m - 1 or y == n - 1:\n                h = 1\n            else:\n                h = min([arr[y + 1][x - 1].h, arr[y + 1][x].h, arr[y + 1][x + 1].h]) + 1\n            arr[y][x].set(h)\n            count += h\n    print(count)", "def count_spruce(mat):\n    ans = 0\n    dp = {}\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            size = spruceSize(mat, i, j, dp)\n            ans += dp[i, j]\n    return ans\n\ndef spruceSize(mat, i, j, dp):\n    key = (i, j)\n    if key in dp:\n        return dp[key]\n    if i >= len(mat) or j < 0 or j >= len(mat[i]):\n        dp[key] = 0\n        return 0\n    minchilddepth = float('inf')\n    if mat[i][j] == '.':\n        dp[key] = 0\n        return 0\n    for jj in range(j - 1, j + 2):\n        minchilddepth = min(minchilddepth, spruceSize(mat, i + 1, jj, dp))\n    dp[key] = 1 + minchilddepth\n    return dp[key]\nt = int(input())\nfor c in range(t):\n    inp = str(input())\n    comps = inp.split()\n    n = int(comps[0])\n    m = int(comps[1])\n    mat = []\n    for row in range(n):\n        mat.append(str(input()))\n    print(count_spruce(mat))", "from collections import deque\nfrom pprint import pprint\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    q = deque()\n    mat = [0 for i in range(n)]\n    v = [[0] * m for i in range(n)]\n    for i in range(n):\n        mat[i] = list(input())\n    first = False\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '.':\n                q.append((i, j, 0))\n                first = first or i == 0\n                v[i][j] = 1\n                mat[i][j] = 0\n    if len(q) == 0 or not first:\n        q.append((0, 0, 1))\n        v[0][0] = 1\n        mat[0][0] = 1\n    while q:\n        (r, c, dist) = q.popleft()\n        for (row, col) in [(r + 1, c), (r, c - 1), (r, c + 1)]:\n            if 0 <= row < n and 0 <= col < m:\n                if not v[row][col]:\n                    mat[row][col] = min(col + 1, row + 1, m - col, dist + 1)\n                    q.append((row, col, dist + 1))\n                    v[row][col] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += mat[i][j]\n    print(ans)", "from collections import deque\nfrom pprint import pprint\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    q = deque()\n    mat = [0 for i in range(n)]\n    v = [[0] * m for i in range(n)]\n    for i in range(n):\n        mat[i] = list(input())\n    first = False\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '.':\n                q.append((i, j, 0))\n                first = first or i == 0\n                v[i][j] = 1\n                mat[i][j] = 0\n    if not first:\n        q.append((0, 0, 1))\n        v[0][0] = 1\n        mat[0][0] = 1\n    while q:\n        (r, c, dist) = q.popleft()\n        for (row, col) in [(r + 1, c), (r, c - 1), (r, c + 1)]:\n            if 0 <= row < n and 0 <= col < m:\n                if not v[row][col]:\n                    mat[row][col] = min(col + 1, row + 1, m - col, dist + 1)\n                    q.append((row, col, dist + 1))\n                    v[row][col] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += mat[i][j]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    num = [[] for _ in range(n)]\n    tab = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        s = input()\n        for j in s:\n            num[i].append(j)\n    co = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            lis = []\n            c1 = 0\n            if num[i][j] == '*':\n                co += 1\n            if i + 1 < n and num[i][j] == '*':\n                if num[i + 1][j] == '*':\n                    lis.append(tab[i + 1][j])\n                    c1 += 1\n                if j - 1 >= 0:\n                    if num[i + 1][j - 1] == '*':\n                        lis.append(tab[i + 1][j - 1])\n                        c1 += 1\n                if j + 1 < m:\n                    if num[i + 1][j + 1] == '*':\n                        lis.append(tab[i + 1][j + 1])\n                        c1 += 1\n            if c1 == 3:\n                co += 1\n                tab[i][j] += 1\n            if len(lis) == 3:\n                lis.sort()\n                co += lis[0]\n                tab[i][j] += lis[0]\n    print(co)"]