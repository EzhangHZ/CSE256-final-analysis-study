["list_ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    list1.sort(reverse=True)\n    ans = 0\n    a = 0\n    for x in list1:\n        if x > a:\n            ans += list2[a]\n            a += 1\n        else:\n            ans += list2[x - 1]\n    list_ans.append(ans)\nprint(*list_ans, sep='\\n')", "def solve():\n    k = []\n    c = []\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    k = list(map(int, list(input().split())))\n    c = list(map(int, list(input().split())))\n    k.sort(reverse=True)\n    i = 0\n    sum = 0\n    for element in k:\n        if c[element - 1] > c[i]:\n            sum += c[i]\n            i += 1\n        else:\n            sum += c[element - 1]\n    print(sum)\nq = int(input())\nfor i in range(q):\n    solve()", "def solve(n, m, k, c):\n    ans = 0\n    last = 1\n    for i in range(1, n + 1):\n        if c[last] < c[k[i]]:\n            ans += c[last]\n            last = i + 1\n        else:\n            ans += c[k[i]]\n    return ans\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = [0] + sorted(map(int, input().split()), reverse=True)\n    c = [0] + list(map(int, input().split()))\n    print(solve(n, m, k, c))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = sorted([int(i) for i in input().split()])\n    c = [''] + [int(i) for i in input().split()]\n    (i, res) = (1, 0)\n    for ind in k[::-1]:\n        if ind >= i:\n            res += c[i]\n            i += 1\n        else:\n            res += c[ind]\n    print(res)", "for u in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    l.sort(reverse=True)\n    (s, j) = (0, 0)\n    for i in l:\n        if j < i:\n            s += d[j]\n            j += 1\n        else:\n            s += d[i - 1]\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort(reverse=True)\n    s = 0\n    for i in range(n):\n        if k[i] > i + 1:\n            s += c[i]\n        else:\n            s += c[k[i] - 1]\n    print(s)", "t = int(input())\n\ndef f(n, k, m, c):\n    k.sort()\n    k = k[::-1]\n    x = 0\n    summ = 0\n    for i in range(n):\n        if c[x] < c[k[i] - 1]:\n            summ += c[x]\n            x += 1\n            srop = 0\n        else:\n            summ += c[k[i] - 1]\n    return summ\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(f(n, k, m, c))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    values = list(map(int, input().split()))\n    prices = list(map(int, input().split()))\n    values = [i - 1 for i in values]\n    values.sort(reverse=True)\n    (x, res) = (0, 0)\n    for i in range(n):\n        if values[i] >= x:\n            res += prices[x]\n            x += 1\n        else:\n            res += prices[values[i]]\n    print(res)", "import sys\n\ndef strangeBdayParty():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        k = [int(i) for i in input().split()]\n        c = [int(i) for i in input().split()]\n        (ans, base) = (0, 0)\n        k.sort(reverse=True)\n        for i in k:\n            if i - 1 > base:\n                ans += c[base]\n                base += 1\n            else:\n                ans += c[i - 1]\n        print(ans)\n\ndef main():\n    strangeBdayParty()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    K = [int(k) for k in input().split()]\n    K.sort(reverse=True)\n    C = [int(c) for c in input().split()]\n    (s, p) = (0, 0)\n    for k in K:\n        if k - 1 > p:\n            s += C[p]\n            p += 1\n        else:\n            s += C[k - 1]\n    print(s)", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = sorted(list(map(int, input().split())), reverse=True)\n    t1 = list(map(int, input().split()))\n    b = []\n    for i in t:\n        b.append(t1[i - 1])\n    for i in range(n):\n        if t1[i] < b[i]:\n            b[i] = t1[i]\n        else:\n            break\n        if i == m:\n            break\n    print(sum(b))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = sorted(list(map(int, input().split())), reverse=True)\n    c = list(map(int, input().split()))\n    ans = 0\n    ind = 0\n    for i in range(n):\n        if k[i] - 1 < ind:\n            ans += c[k[i] - 1]\n        else:\n            ans += c[ind]\n            ind += 1\n    print(ans)", "for test_num in range(int(input())):\n    (f, m) = input().split()\n    f_list = list(map(int, input().split()))\n    m_list = list(map(int, input().split()))\n    f_list.sort()\n    f_list.reverse()\n    money = 0\n    present = 0\n    for i in f_list:\n        if present < i:\n            money += m_list[present]\n            present += 1\n        else:\n            money += m_list[i - 1]\n    print(money)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    guest = list(map(int, input().split()))\n    guest.sort(reverse=True)\n    gift = list(map(int, input().split()))\n    ans = 0\n    j = 0\n    for i in guest:\n        if j < i:\n            ans += gift[j]\n            j += 1\n        else:\n            ans += gift[i - 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    k = [*map(int, input().split())]\n    c = [*map(int, input().split())]\n    c_cons = [False] * len(c)\n    k.sort(reverse=True)\n    next_g_ind = 0\n    biggest_g_ind = k[0]\n    total_cost = 0\n    for x in k:\n        if next_g_ind <= x - 1 and (not c_cons[next_g_ind]):\n            c_cons[next_g_ind] = True\n            total_cost += c[next_g_ind]\n            next_g_ind += 1\n        else:\n            total_cost += c[x - 1]\n    print(total_cost)", "def strangeBDParty(n: int, m: int, k: [int], c: [int]) -> int:\n    k.sort(reverse=True)\n    cost = l = 0\n    for i in range(n):\n        if l < m and c[l] < c[k[i] - 1]:\n            cost += c[l]\n            l += 1\n        else:\n            cost += c[k[i] - 1]\n    return cost\nrep = int(input())\nfor _ in range(rep):\n    (n, m) = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(strangeBDParty(n, m, k, c))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    friends = sorted(list(map(int, input().split())))\n    gifts = list(map(int, input().split()))\n    initial = n\n    ans = 0\n    for i in friends:\n        if i > initial:\n            break\n        else:\n            ans += gifts[i - 1]\n            initial -= 1\n    ans += sum(gifts[:initial])\n    print(ans)", "a = int(input())\nsum2 = []\nfor i in range(a):\n    list1 = input().split(' ')\n    n = int(list1[0])\n    m = int(list1[1])\n    list2 = input().split(' ')\n    list2 = list(map(int, list2))\n    list3 = input().split(' ')\n    list3 = list(map(int, list3))\n    list2.sort(reverse=True)\n    sum = 0\n    x = 1\n    for k in list2:\n        if k > x:\n            sum = sum + list3[x - 1]\n        else:\n            sum = sum + list3[k - 1]\n        x = x + 1\n    sum2.append(sum)\n    list1.clear()\n    list2.clear()\n    list3.clear()\nfor sum3 in sum2:\n    print(sum3)", "def main():\n    for _ in range(int(input())):\n        (n, m) = list(map(int, input().split()))\n        k = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        k.sort()\n        cost = 0\n        j = 0\n        for i in range(n):\n            if k[i] + i <= n:\n                cost += c[k[i] - 1]\n            else:\n                cost += c[j]\n                j += 1\n        print(cost)\nmain()", "def strange(n, m, k, c):\n    c2 = c.copy()\n    c2.reverse()\n    k.sort()\n    cost = 0\n    for i in range(n - 1, -1, -1):\n        if len(c2) != 0:\n            if c[k[i] - 1] > c2[-1]:\n                cost += c2[-1]\n                c2.pop()\n            else:\n                cost += c[k[i] - 1]\n        else:\n            cost += c[k[i] - 1]\n    return cost\nfor i in range(int(input())):\n    [n, m] = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(strange(n, m, k, c))", "test = eval(input())\nfor _ in range(test):\n    (m, n) = map(int, input().split())\n    k = list(map(int, input().split()))\n    k.sort(reverse=True)\n    c = list(map(int, input().split()))\n    tCost = 0\n    j = 0\n    for i in k:\n        if c[i - 1] <= c[j]:\n            tCost += c[i - 1]\n        else:\n            tCost += c[j]\n            j += 1\n    print(tCost)", "import sys\ninput = sys.stdin.readline\ngetint = lambda : int(input())\ngetints = lambda : [int(a) for a in input().split()]\n\ndef solve():\n    (n, _) = getints()\n    friends = getints()\n    prices = getints()\n    friends = sorted(friends, reverse=True)\n    i = 0\n    sum = 0\n    while i < n and friends[i] - 1 > i:\n        sum += prices[i]\n        i += 1\n    while i < n:\n        sum += prices[friends[i] - 1]\n        i += 1\n    print(sum)\nt = getint()\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = sorted(list(map(int, input().split())), reverse=True)\n    p = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if i + 1 < s[i]:\n            ans += p[i]\n        else:\n            ans += p[s[i] - 1]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    guest = list(map(int, input().split()))\n    guest.sort(reverse=True)\n    gift = list(map(int, input().split()))\n    ans = 0\n    j = 0\n    for i in guest:\n        if j < i:\n            ans += gift[j]\n            j += 1\n        else:\n            ans += gift[i - 1]\n    print(ans)", "from collections import Counter, defaultdict, deque\nimport math\nfrom heapq import *\nimport sys\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\n\ndef solve():\n    (a, b) = [int(x) for x in input().split()]\n    f = [int(x) for x in input().split()]\n    c = [0] + [int(x) for x in input().split()]\n    f = sorted(f, reverse=True)\n    sum = 0\n    p = 1\n    for fr in f:\n        if c[fr] <= c[p]:\n            sum += c[fr]\n        else:\n            sum += c[p]\n            p += 1\n    print(sum)\ntt = int(input())\nfor test in range(tt):\n    solve()", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    a.sort()\n    a.reverse()\n    x = -1\n    j = 0\n    ans = 0\n    for i in range(n):\n        if j < m:\n            if c[j] < c[a[i] - 1]:\n                ans += c[j]\n                j += 1\n            else:\n                ans += c[a[i] - 1]\n        else:\n            ans += c[a[i] - 1]\n    print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lstn = list(map(int, input().split()))\n    lstm = list(map(int, input().split()))\n    lstn.sort(reverse=True)\n    pointer = 0\n    c = 0\n    for j in lstn:\n        if pointer <= j:\n            a = lstm[j - 1]\n            b = lstm[pointer]\n            if b < a:\n                c += b\n                pointer += 1\n            else:\n                c += a\n        else:\n            c += lstm[j - 1]\n    print(c)", "import re\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    k_list = list(map(int, input().split()))\n    c_list = list(map(int, input().split()))\n    k_list.sort(reverse=True)\n    pointer = 1\n    result = 0\n    for k in k_list:\n        if pointer > k:\n            result += c_list[k - 1]\n            continue\n        if pointer < m and c_list[pointer - 1] < c_list[k - 1]:\n            result += c_list[pointer - 1]\n            pointer += 1\n            continue\n        result += c_list[k - 1]\n    print(result)", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    k = [i for i in map(int, input().split())]\n    c = [i for i in map(int, input().split())]\n    k.sort(reverse=True)\n    rez = 0\n    nom = 0\n    for i in range(n):\n        if nom < m and k[i] > nom:\n            rez = rez + c[nom]\n            nom = nom + 1\n        else:\n            rez = rez + c[k[i] - 1]\n    print(rez)", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    k = [i for i in map(int, input().split())]\n    c = [i for i in map(int, input().split())]\n    k.sort(reverse=True)\n    rez = 0\n    nom = 0\n    for i in range(n):\n        if nom < m and k[i] > nom:\n            rez = rez + c[nom]\n            nom = nom + 1\n        else:\n            rez = rez + c[k[i] - 1]\n    print(rez)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort()\n    k = k[::-1]\n    present = 0\n    ans = 0\n    for j in range(n):\n        if present < m and c[k[j] - 1] > c[present]:\n            ans += c[present]\n            present += 1\n        else:\n            ans += c[k[j] - 1]\n    print(ans)", "def minAmount(n, m, C, K):\n    K.sort(reverse=True)\n    Amount = 0\n    j = 0\n    for i in range(n):\n        k = K[i] - 1\n        if j < m and C[j] < C[k]:\n            Amount += C[j]\n            j += 1\n        else:\n            Amount += C[k]\n    return Amount\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    K = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    print(minAmount(n, m, C, K))", "test = eval(input())\nfor _ in range(test):\n    (m, n) = map(int, input().split())\n    k = list(map(int, input().split()))\n    k.sort(reverse=True)\n    c = list(map(int, input().split()))\n    tCost = 0\n    j = 0\n    for i in k:\n        if c[i - 1] <= c[j]:\n            tCost += c[i - 1]\n        else:\n            tCost += c[j]\n            j += 1\n    print(tCost)", "import math as mt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    l.sort(reverse=True)\n    j = 1\n    total_cost = 0\n    for i in range(n):\n        if l[i] >= j:\n            total_cost += cost[j - 1]\n            j += 1\n        else:\n            total_cost += cost[l[i] - 1]\n    print(total_cost)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    inds_cost = list(map(int, input().split()))\n    costs = list(map(int, input().split()))\n    up_to_costs = [costs[pos - 1] for pos in inds_cost]\n    sol = 0\n    start = 10 ** 10\n    up_to_costs.sort(reverse=True)\n    for i in range(min(m, n)):\n        if up_to_costs[i] > costs[i]:\n            sol += costs[i]\n        else:\n            start = i\n            break\n    sol += sum(up_to_costs[start:])\n    print(sol)", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef calc(q, x):\n    ans = 0\n    while q % x == 0:\n        ans += 1\n        q = q // x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    j = 0\n    for i in range(n):\n        if a[i] - 1 > j:\n            ans += c[j]\n            j += 1\n        else:\n            ans += c[a[i] - 1]\n    print(ans)", "casos = int(input())\nfor i in range(casos):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    k = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    total = 0\n    l = 1\n    k = reversed(sorted(k))\n    c.insert(0, 666)\n    for ki in k:\n        if c[ki] > c[l] and l < ki:\n            total = total + c[l]\n            l = l + 1\n        else:\n            total = total + c[ki]\n    print(total)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k_num = list(map(int, input().split()))\n    k_num = sorted(k_num, reverse=True)\n    price_gift = list(map(int, input().split()))\n    res = 0\n    j = 0\n    for i in k_num:\n        if j < i:\n            res += price_gift[j]\n            j += 1\n        else:\n            res += price_gift[i - 1]\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = sorted(list(map(int, input().split())), reverse=True)\n    c = list(map(int, input().split()))\n    s = 0\n    ans = 0\n    for x in k:\n        if c[s] < c[x - 1]:\n            ans += c[s]\n            s += 1\n        else:\n            ans += c[x - 1]\n    print(ans)", "def ans(arr, cost):\n    arr.sort()\n    total = j = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if j < arr[i] - 1 and cost[j] < cost[arr[i] - 1]:\n            total += cost[j]\n            j += 1\n        else:\n            total += cost[arr[i] - 1]\n    print(total)\nt = int(input())\nfor i in range(t):\n    input()\n    arr1 = list(map(int, input().split(' ')))\n    arr2 = list(map(int, input().split(' ')))\n    ans(arr1, arr2)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    a = 0\n    k.sort()\n    k.reverse()\n    for i in k:\n        if a == len(c) or c[a] > c[i - 1]:\n            ans += c[i - 1]\n        else:\n            ans += c[a]\n            a += 1\n    print(ans)", "from audioop import reverse\n\ndef solve(A, B):\n    A.sort(reverse=True)\n    s = 0\n    m = 0\n    for i in range(len(A)):\n        if m < len(B) and (m >= A[i] - 1 or B[m] >= B[A[i] - 1]):\n            s += B[A[i] - 1]\n        elif m >= len(B):\n            s += B[A[i] - 1]\n        else:\n            s += B[m]\n            m += 1\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:m]\n    print(solve(a, b))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    gifts = sorted(list(map(int, input().split())), reverse=True)\n    cost = list(map(int, input().split()))\n    res = 0\n    place = 0\n    for index in range(n):\n        if gifts[index] - 1 < place:\n            res += cost[gifts[index] - 1]\n        elif gifts[index] - 1 >= place:\n            res += cost[place]\n            place += 1\n    print(res)", "import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    (n, m) = Read.list_int()\n    k = Read.list_int()\n    c = Read.list_int()\n    k.sort(reverse=True)\n    res = 0\n    current = 0\n    for i in range(n):\n        if current < k[i]:\n            res += c[current]\n            current += 1\n        else:\n            res += c[k[i] - 1]\n    print(res)\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "R = lambda : list(map(int, input().split()))\nfor _ in ' ' * int(input()):\n    (n, m) = R()\n    k = sorted(R())[::-1]\n    c = R()\n    sp = 0\n    pr = 1\n    for i in range(n):\n        if k[i] > pr:\n            sp += c[pr - 1]\n            pr += 1\n        else:\n            sp += c[k[i] - 1]\n    print(sp)", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    list1.sort(reverse=True)\n    num = 0\n    for i in range(n):\n        if list1[i] >= i + 1:\n            num += list2[i]\n        else:\n            num += list2[list1[i] - 1]\n    print(num)", "def ans(arr, cost):\n    arr.sort()\n    total = j = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if j < arr[i] - 1 and cost[j] < cost[arr[i] - 1]:\n            total += cost[j]\n            j += 1\n        else:\n            total += cost[arr[i] - 1]\n    print(total)\nt = int(input())\nfor i in range(t):\n    x = input()\n    arr1 = list(map(int, input().split(' ')))\n    arr2 = list(map(int, input().split(' ')))\n    ans(arr1, arr2)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    b = list(map(int, input().split()))\n    cnt = 0\n    x = 0\n    for i in range(n):\n        if x < m and b[x] <= b[a[i] - 1]:\n            cnt += b[x]\n            x += 1\n        else:\n            cnt += b[a[i] - 1]\n    print(cnt)", "t = int(input())\nfor Cases in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    k.sort(reverse=True)\n    c = list(map(int, input().split()))\n    rem = set()\n    num = 0\n    j = 0\n    for i in k:\n        if i - 1 in rem:\n            num += c[i - 1]\n            rem.add(i - 1)\n        elif i - 1 not in rem:\n            num += c[j]\n            rem.add(j)\n            j += 1\n    print(num)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort(reverse=True)\n    cost = 0\n    for i in range(n):\n        if i + 1 <= k[i]:\n            cost += c[i]\n        else:\n            cost += c[k[i] - 1]\n    print(cost)", "import math, sys\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = sorted(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while k:\n        node = k.pop()\n        if c[i] < c[node - 1]:\n            ans += c[i]\n            i += 1\n        else:\n            ans += c[node - 1]\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    v = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    v.sort()\n    v.reverse()\n    j = 0\n    cnt = 0\n    for i in range(n):\n        if j < m and j < v[i]:\n            cnt = cnt + a[j]\n            j += 1\n        else:\n            cnt = cnt + a[v[i] - 1]\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    friends = list(map(int, input().split(' ')))\n    presents = list(map(int, input().split(' ')))\n    friends.sort(reverse=True)\n    res = 0\n    i = 0\n    for x in friends:\n        if x > i + 1:\n            res += presents[i]\n            i += 1\n        else:\n            res += presents[x - 1]\n    print(res)", "task_number = int(input())\nfor _ in range(task_number):\n    (n, m) = map(int, input().split())\n    K = [int(x) - 1 for x in input().split()]\n    C = [int(x) for x in input().split()]\n    result = 0\n    p_index = 0\n    K.sort(reverse=True)\n    for k in K:\n        if p_index < k:\n            result += C[p_index]\n            p_index += 1\n        else:\n            result += C[k]\n    print(result)", "import math\nfrom collections import Counter\n\ndef strange_birthday_party(friends, presents):\n    count = 0\n    cost = 0\n    friend_counter = Counter(friends)\n    use_present = True\n    buy_present = 0\n    for index in sorted(friend_counter.keys(), reverse=True):\n        value = friend_counter[index]\n        if use_present and index > count:\n            count += value\n            buy_present = count\n            if count >= index:\n                use_present = False\n                cost += presents[index - 1] * (count - index)\n                buy_present = index\n        else:\n            cost += presents[index - 1] * value\n    return cost + sum(presents[:buy_present])\nnum_test = int(input())\nfor i in range(num_test):\n    (n, m) = [int(i) for i in input().split()]\n    friends = [int(i) for i in input().split()]\n    presents = [int(i) for i in input().split()]\n    print(strange_birthday_party(friends, presents))", "import sys\nsys.setrecursionlimit(1000000)\nfrom collections import defaultdict, deque, Counter\nfrom itertools import permutations\nfrom math import sqrt, gcd, pi, factorial\nfrom functools import reduce\nfrom sys import stdin\nfrom bisect import bisect_right, bisect_left\nfrom copy import copy\n\ndef solve(n, m, k, c):\n    k = sorted(k)\n    cnts = [1 for _ in range(m)]\n    for i in range(n):\n        cnts[k[i] - 1] += 1\n    s = 0\n    ret = 0\n    for i in range(m):\n        if s + cnts[i] < n:\n            s += cnts[i]\n            ret += c[i] * cnts[i]\n        else:\n            ret += c[i] * (n - s)\n            break\n    return ret\nt = int(input())\nanss = [0 for _ in range(t)]\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    anss[i] = solve(n, m, k, c)\nfor ans in anss:\n    print(ans)", "t = int(input())\nfor j in range(t):\n    (a, b) = list(map(int, input().split()))\n    L = sorted(map(lambda x: x - 1, list(map(int, input().split()))))[::-1]\n    M = list(map(int, input().split()))\n    sum = 0\n    for i in range(a):\n        if i <= L[i]:\n            x = i\n        else:\n            x = L[i]\n        sum += M[x]\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l1.sort(reverse=True)\n    sum1 = 0\n    for j in range(n):\n        if j < m and l1[j] >= j + 1:\n            sum1 = sum1 + l2[j]\n        else:\n            sum1 = sum1 + l2[l1[j] - 1]\n    print(sum1)", "def solve(n, m, guests, presents):\n    guests.sort(reverse=True)\n    guestsIndex = 0\n    presentsIndex = 0\n    ans = 0\n    while guestsIndex < n and presentsIndex < m:\n        if presents[presentsIndex] < presents[guests[guestsIndex] - 1]:\n            ans += presents[presentsIndex]\n            presentsIndex += 1\n        else:\n            ans += presents[guests[guestsIndex] - 1]\n        guestsIndex += 1\n    while guestsIndex < n:\n        ans += presents[guests[guestsIndex] - 1]\n    return ans\nfor x in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    guests = list(map(int, input().split()))\n    presents = list(map(int, input().split()))\n    print(solve(n, m, guests, presents))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort(reverse=True)\n    b = 0\n    for i in range(n):\n        if i + 1 <= k[i]:\n            b += c[i]\n        else:\n            b += c[k[i] - 1]\n    print(b)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ks = [int(x) - 1 for x in input().split()]\n    cs = [int(x) for x in input().split()]\n    ks.sort(reverse=True)\n    t = 0\n    for (i, k) in enumerate(ks):\n        t += cs[min(i, k)]\n    print(t)", "def sbp(friends, gifts):\n    sum = 0\n    friends.sort(reverse=True)\n    f = 0\n    while f < len(friends):\n        index = f if f < friends[f] - 1 else friends[f] - 1\n        sum += gifts[index]\n        f += 1\n    print(sum, end=' ')\nt = int(input())\nfor i in range(t):\n    (n, m) = input().split(' ')\n    friends = input().split(' ')\n    integer_friends = map(int, friends)\n    integer_f = list(integer_friends)\n    gifts = input().split(' ')\n    integer_gifts = map(int, gifts)\n    integer_g = list(integer_gifts)\n    sbp(integer_f, integer_g)\n    if i < t - 1:\n        print()", "import sys\nsys.setrecursionlimit(10 ** 6)\nfastinput = sys.stdin.readline\nfastout = sys.stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    (n, m) = map(int, fastinput().split())\n    k = list(map(int, fastinput().split()))\n    c = list(map(int, fastinput().split()))\n    k.sort()\n    availabe = 0\n    result = 0\n    while k:\n        x = k.pop()\n        if availabe < x:\n            result += c[availabe]\n            availabe += 1\n        else:\n            result += c[x - 1]\n    print(result)", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    list1.sort(reverse=True)\n    num = 0\n    for i in range(n):\n        if list1[i] >= i + 1:\n            num += list2[i]\n        else:\n            num += list2[list1[i] - 1]\n    print(num)", "import math\n\ndef solve(k, g):\n    c = [0] * (len(g) + 1)\n    for i in range(1, len(c)):\n        c[i] = g[i - 1]\n    k.sort(reverse=True)\n    j = 1\n    amt = 0\n    for i in k:\n        if c[i] <= c[j]:\n            amt += c[i]\n        else:\n            amt += c[j]\n            j += 1\n    return amt\nt = int(input(''))\nans = []\nwhile t > 0:\n    n = list(map(int, input('').split(' ')))\n    a = list(map(int, input('').split(' ')))\n    a2 = list(map(int, input('').split(' ')))\n    ans.append(solve(a, a2))\n    t -= 1\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = [int(x) for x in input().split()][:n]\n    c = [int(x) for x in input().split()][:m]\n    a = c\n    sum = 0\n    k.sort(reverse=True)\n    for i in range(n):\n        if k[i] >= i + 1:\n            sum += c[i]\n        else:\n            sum += c[k[i] - 1]\n    print(sum)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    l.sort(reverse=True)\n    x = 0\n    ans = 0\n    for i in range(n):\n        if c[l[i] - 1] <= c[x] or x == m:\n            ans += c[l[i] - 1]\n        else:\n            ans += c[x]\n            x += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    gc = 0\n    cost = 0\n    k = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    k = sorted(k)[::-1]\n    for i in k:\n        if c[gc] < c[i - 1] and gc <= i - 1:\n            cost += c[gc]\n            gc += 1\n        else:\n            cost += c[i - 1]\n    print(cost)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    br = list(map(int, input().split()))\n    ar.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        if ar[i] - 1 > i:\n            ans += br[i]\n        else:\n            ans += br[ar[i] - 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [-1] + [int(i) for i in input().split()]\n    a.sort(key=lambda x: -x)\n    i = 1\n    ans = 0\n    for x in a:\n        if i > x:\n            ans += b[x]\n        else:\n            ans += b[i]\n            i += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    klist = list(map(int, input().split()))\n    jlist = list(map(int, input().split()))\n    klist.sort(reverse=True)\n    s = 0\n    i = 0\n    for k in klist:\n        if jlist != []:\n            if jlist[i] < jlist[k - 1]:\n                s = s + jlist[i]\n                i = i + 1\n            else:\n                s = s + jlist[k - 1]\n        else:\n            s = s + jlist[k - 1]\n    print(s)", "t = int(input())\nres = ''\nfor _ in range(t):\n    (n, m) = [int(v) for v in input().strip().split(' ')]\n    k = [int(v) - 1 for v in input().strip().split(' ')]\n    c = [int(v) for v in input().strip().split(' ')]\n    k = sorted(k, reverse=True)\n    j = 0\n    sum = 0\n    for i in k:\n        if j < i:\n            sum += c[j]\n            j += 1\n        else:\n            sum += c[i]\n    res = res + '{}\\n'.format(sum)\nprint(res)", "from sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict as dd\nimport math\n\ndef geti():\n    return map(int, input().strip().split())\n\ndef getl():\n    return list(map(int, input().strip().split()))\n\ndef getis():\n    return map(str, input().strip().split())\n\ndef getls():\n    return list(map(str, input().strip().split()))\n\ndef gets():\n    return input().strip()\n\ndef geta():\n    return int(input())\n\ndef print_s(s):\n    stdout.write(s + '\\n')\n\ndef solve():\n    for _ in range(geta()):\n        (n, m) = geti()\n        a = getl()\n        cost = getl()\n        a.sort(reverse=True)\n        j = 0\n        ans = 0\n        for i in range(n):\n            if a[i] >= j + 1 and j < n:\n                ans += cost[j]\n                j += 1\n            else:\n                ans += cost[a[i] - 1]\n        print(ans)\nsolve()", "t = int(input())\nres = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    k = sorted(list(map(int, input().split())), reverse=True)\n    c = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += c[i] if i < k[i] else c[k[i] - 1]\n    res.append(s)\nprint(*res, sep='\\n')", "def solver(inputs, friends, gifts):\n    cost = 0\n    gift_index = 0\n    friends.sort(reverse=True)\n    for y in range(inputs[0]):\n        if friends[y] > gift_index:\n            cost = cost + gifts[gift_index]\n            gift_index = gift_index + 1\n        else:\n            cost = cost + gifts[friends[y] - 1]\n    return cost\nn = int(input())\nfor x in range(n):\n    inputs = input().split(' ')\n    inputs = [int(i) for i in inputs]\n    friends = input().split(' ')\n    friends = [int(i) for i in friends]\n    gifts = input().split(' ')\n    gifts = [int(i) for i in gifts]\n    print(solver(inputs, friends, gifts))", "import math\nfrom collections import Counter\n\ndef strange_birthday_party(friends, presents):\n    count = 0\n    cost = 0\n    friend_counter = Counter(friends)\n    use_present = True\n    buy_present = 0\n    for index in sorted(friend_counter.keys(), reverse=True):\n        value = friend_counter[index]\n        if use_present and index > count:\n            count += value\n            buy_present = count\n            if count >= index:\n                use_present = False\n                cost += presents[index - 1] * (count - index)\n                buy_present = index\n        else:\n            cost += presents[index - 1] * value\n    return cost + sum(presents[:buy_present])\nnum_test = int(input())\nfor i in range(num_test):\n    (n, m) = [int(i) for i in input().split()]\n    friends = [int(i) for i in input().split()]\n    presents = [int(i) for i in input().split()]\n    print(strange_birthday_party(friends, presents))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ks = [int(x) - 1 for x in input().split()]\n    cs = [int(x) for x in input().split()]\n    ks.sort(reverse=True)\n    print(sum((cs[min(i, k)] for (i, k) in enumerate(ks))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [-1] + [int(i) for i in input().split()]\n    a.sort(key=lambda x: -x)\n    i = 1\n    ans = 0\n    for x in a:\n        if i > x:\n            ans += b[x]\n        else:\n            ans += b[i]\n            i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    (j, res) = (0, 0)\n    for _ in range(n - 1, -1, -1):\n        if j <= a[_] - 1:\n            res += b[j]\n            j += 1\n        else:\n            res += b[a[_] - 1]\n    print(res)", "test = int(input())\nwhile test:\n    (n, o) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li1 = list(map(int, input().split()))\n    li.sort(reverse=True)\n    (c, ans) = (0, 0)\n    for i in li:\n        if li1[c] < li1[i - 1]:\n            ans += li1[c]\n            c += 1\n        else:\n            ans += li1[i - 1]\n    print(ans)\n    test -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ks = [int(x) - 1 for x in input().split()]\n    cs = [int(x) for x in input().split()]\n    ks.sort(reverse=True)\n    t = 0\n    for (i, k) in enumerate(ks):\n        t += cs[min(i, k)]\n    print(t)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    v = []\n    for i in k:\n        v.append(c[i - 1])\n    v.sort(reverse=True)\n    for i in range(min(n, m)):\n        if v[i] > c[i]:\n            v[i] = c[i]\n    print(sum(v))", "for t in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    nums = sorted(list(map(int, input().split())), reverse=True)\n    dollar = list(map(int, input().split()))\n    given = 0\n    cost = 0\n    for i in range(n):\n        if nums[i] - 1 < given:\n            cost += dollar[nums[i] - 1]\n        else:\n            cost += dollar[given]\n            given += 1\n    print(cost)", "for test in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = [0] + list(map(int, input().split()))\n    k.sort(reverse=True)\n    ans = 0\n    i = 0\n    j = 1\n    while i < len(k) and c[k[i]] > c[j]:\n        ans += c[j]\n        i += 1\n        j += 1\n    while i < len(k):\n        ans += c[k[i]]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    costs = list(map(int, input().split()))\n    k.sort(reverse=True)\n    dp = [0] * n\n    j = 0\n    for i in range(n):\n        if costs[j] < costs[k[i] - 1]:\n            dp[i] = costs[j]\n            j += 1\n        else:\n            dp[i] = costs[k[i] - 1]\n    print(sum(dp))", "from math import *\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\nI = lambda : int(input())\nM = lambda : map(int, input().split())\nLI = lambda : list(map(int, input().split()))\nfor _ in range(I()):\n    (n, x) = M()\n    a = LI()\n    b = LI()\n    c = sorted(a)\n    c.reverse()\n    ans = 0\n    d = 0\n    for i in range(n):\n        if b[d] >= b[c[i] - 1]:\n            ans += b[c[i] - 1]\n        else:\n            ans += b[d]\n            d += 1\n    print(ans)", "import sys\n\ndef answer(n, m, k, c):\n    k.sort(reverse=True)\n    summ = 0\n    cheapest_indx = 0\n    for i in range(n):\n        if c[cheapest_indx] <= c[k[i] - 1]:\n            summ += c[cheapest_indx]\n            cheapest_indx += 1\n            cheapest_indx = min(cheapest_indx, m - 1)\n        else:\n            summ += c[k[i] - 1]\n    return summ\n\ndef main():\n    t = int(input())\n    while t:\n        (n, m) = [int(i) for i in sys.stdin.readline().split()]\n        k = [int(i) for i in sys.stdin.readline().split()]\n        c = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, m, k, c))\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = sorted(map(int, input().split()), reverse=True)\n    c = list(map(int, input().split()))\n    cheapest_present = 0\n    cost = 0\n    for i in range(n):\n        if cheapest_present < m:\n            if c[cheapest_present] < c[k[i] - 1]:\n                cost += c[cheapest_present]\n                cheapest_present += 1\n            else:\n                cost += c[k[i] - 1]\n        else:\n            cost += c[k[i] - 1]\n    print(cost)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    k = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    k.sort(reverse=True)\n    ans = 0\n    a1 = 0\n    for i in range(n):\n        if a1 < k[i]:\n            ans += c[a1]\n            a1 += 1\n        else:\n            ans += c[k[i] - 1]\n    print(ans)", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort(reverse=True)\n    j = 0\n    ans = 0\n    for i in range(n):\n        if a[i] - 1 <= j:\n            ans += c[a[i] - 1]\n        else:\n            ans += c[j]\n            j += 1\n    print(ans)", "tt = int(input())\nfor _ in range(tt):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [i - 1 for i in a]\n    a.sort(reverse=True)\n    (x, ans) = (0, 0)\n    for i in range(n):\n        if a[i] >= x:\n            ans += b[x]\n            x += 1\n        else:\n            ans += b[a[i]]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(i) for i in input().split()]\n    l1.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        if i + 1 < l1[i]:\n            ans = ans + l2[i]\n        else:\n            ans = ans + l2[l1[i] - 1]\n    print(ans)", "def solve(k, c):\n    k = sorted(k)[::-1]\n    n = len(k)\n    m = len(c)\n    ans = 0\n    for i in range(n):\n        if i < m:\n            ans += min(c[i], c[k[i] - 1])\n        else:\n            ans += c[k[i] - 1]\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    print(solve(k, c))", "test_cases = int(input())\nfor i in range(test_cases):\n    used_presents = 0\n    cost = 0\n    x = input()\n    friends = [int(x) for x in input().split()]\n    presents = [int(x) for x in input().split()]\n    friends.sort(reverse=True)\n    for friend in friends:\n        friend -= 1\n        if presents[friend] > presents[used_presents]:\n            cost += presents[used_presents]\n            used_presents += 1\n        else:\n            cost += presents[friend]\n    print(cost)", "t = int(input())\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort()\n    used = [0] * n\n    count = n - 1\n    i = 0\n    while i < m or count != -1:\n        used[count] = min(c[i], c[k[count] - 1])\n        if i < m - 1:\n            i += 1\n        if count > 0:\n            count -= 1\n        else:\n            break\n    print(sum(used))\nfor j in range(t):\n    solve()", "for _ in range(int(input())):\n    (g, d) = input().split()\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    chk = [0] * len(b)\n    t = sorted(a, reverse=True)\n    s = 0\n    j = 0\n    for i in range(len(t)):\n        f = 0\n        if b[j] < b[t[i] - 1]:\n            s += b[j]\n            j += 1\n        else:\n            s += b[t[i] - 1]\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort(reverse=True)\n    result = 0\n    j = 0\n    for i in range(n):\n        if j < m:\n            if c[j] <= c[k[i] - 1]:\n                result += c[j]\n                j += 1\n            else:\n                result += c[k[i] - 1]\n        else:\n            result += c[k[i] - 1]\n    print(result)", "import math\nt = int(input())\nwhile t:\n    (n, m) = [int(i) for i in input().split()]\n    k = input().split()\n    c = input().split()\n    for i in range(n):\n        k[i] = int(k[i]) - 1\n    for i in range(m):\n        c[i] = int(c[i])\n    k.sort()\n    i = n - 1\n    j = 0\n    ans = 0\n    while j <= k[i] and i >= 0 and (j < m):\n        ans += c[j]\n        i -= 1\n        j += 1\n    for x in range(i + 1):\n        ans += c[k[x]]\n    print(ans)\n    t -= 1", "import math\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    ans = 0\n    for j in range(n - 1, -1, -1):\n        if b[i] >= b[a[j] - 1]:\n            ans += b[a[j] - 1]\n        else:\n            ans += b[i]\n            i += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, x) = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k.sort(reverse=True)\n    k = [i - 1 for i in k]\n    ans = 0\n    j = 0\n    for i in range(len(k)):\n        if k[i] >= j:\n            ans += c[j]\n            j += 1\n        else:\n            ans += c[k[i]]\n    print(ans)"]