["def main():\n    (n, k) = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    min_value = n - k + 1\n    index = 0\n    counter = 1\n    first_result = (n + min_value) * k // 2\n    second_result = 1\n    while p[index] < min_value:\n        index += 1\n    for item in p[index + 1:]:\n        if item >= min_value:\n            second_result *= counter\n            second_result %= 998244353\n            counter = 1\n        else:\n            counter += 1\n    print(first_result, second_result)\nmain()", "import math as m\n[n, k] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\na = 0\nb = 0\nfilled = False\nthresh = n - k + 1\nprod = 1\nfor i in range(n):\n    if arr[i] >= thresh:\n        if filled:\n            (a, b) = (i, a)\n            prod = prod * (a - b) % 998244353\n        else:\n            a = i\n            filled = True\np2 = (n + thresh) * (n - thresh + 1) // 2\nprint(p2, prod)", "def maxPartitionValue(n, k):\n    return k * (n + n - k + 1) // 2\n\ndef nPossiblePartitions(n, k, permutation):\n    (nPartitions, lowLimit) = (1, n - k)\n    allMaxValues_Indices = tuple((i for i in range(n) if lowLimit < int(permutation[i]) <= n))\n    for i in range(1, len(allMaxValues_Indices)):\n        nPartitions *= allMaxValues_Indices[i] - allMaxValues_Indices[i - 1]\n        if nPartitions >= 998244353:\n            nPartitions %= 998244353\n    return nPartitions\n\ndef answerFor1326c(n, k, permutation):\n    print(maxPartitionValue(n, k), nPossiblePartitions(n, k, permutation))\n(n, k) = input().split(' ')\npermutation = input().split(' ')\nanswerFor1326c(int(n), int(k), permutation)", "def maxPartitionValue(n, k, lowLimit):\n    return k * (n + lowLimit) // 2\n\ndef nPossiblePartitions(n, k, permutation, lowLimit):\n    nPartitions = 1\n    allMaxValues_Indices = tuple((i for i in range(n) if lowLimit <= int(permutation[i]) <= n))\n    for i in range(1, len(allMaxValues_Indices)):\n        nPartitions *= allMaxValues_Indices[i] - allMaxValues_Indices[i - 1]\n        if nPartitions >= 998244353:\n            nPartitions %= 998244353\n    return nPartitions\n\ndef answerFor1326c(n, k, permutation):\n    lowLimit = n - k + 1\n    print(maxPartitionValue(n, k, lowLimit), nPossiblePartitions(n, k, permutation, lowLimit))\n(n, k) = input().split(' ')\npermutation = input().split(' ')\nanswerFor1326c(int(n), int(k), permutation)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    md = 998244353\n    (n, k) = MI()\n    aa = LI()\n    b = n - k + 1\n    s = 1\n    cnt = -1\n    for a in aa:\n        if cnt > -1:\n            cnt += 1\n        if a >= b:\n            if cnt > 0:\n                s = s * cnt % md\n            cnt = 0\n    print(k * (2 * n - k + 1) // 2, s)\nmain()", "MOD = 998244353\n\ndef main():\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    t = n - k + 1\n    x = (n + t) * k // 2\n    y = 1\n    tmp = 1\n    flg = False\n    for i in range(n):\n        if p[i] >= t:\n            if flg:\n                y *= tmp\n                y %= MOD\n            else:\n                flg = True\n            tmp = 1\n        else:\n            tmp += 1\n    print(x, y)\nmain()", "(N, K) = map(int, input().split())\nP = list(map(int, input().split()))\nmin_val = N + 1 - K\nans1 = (min_val + N) * K // 2\nidx = 0\nwhile P[idx] < min_val:\n    idx += 1\nans2 = 1\ncnt = 1\nfor p in P[idx + 1:]:\n    if p >= min_val:\n        ans2 = ans2 * cnt % 998244353\n        cnt = 1\n    else:\n        cnt += 1\nprint(ans1, ans2)", "import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    (n, k) = Read.list_int()\n    a = Read.list_int()\n    s = 0\n    for i in range(k):\n        t = n - i\n        s += t\n    f = n - k + 1\n    r2 = 1\n    j = False\n    k = 1\n    for i in a:\n        if i >= f:\n            if j:\n                r2 = r2 * k\n                r2 = r2 % 998244353\n            j = True\n            k = 1\n        elif j == True:\n            k += 1\n    print(str(s) + ' ' + str(r2))\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()", "import sys\ninput = sys.stdin.readline\n(x, y) = map(int, input().split())\n(*li,) = map(int, input().split())\nif x == y:\n    print(sum(li), 1)\n    exit()\nflag = False\ncnt = 0\nans = 1\nfor i in li:\n    if i > x - y:\n        if flag:\n            ans *= cnt + 1\n            ans %= 998244353\n            cnt = 0\n        else:\n            flag = True\n            cnt = 0\n    else:\n        cnt += 1\nn = x - y\nprint(x * (x + 1) // 2 - n * (n + 1) // 2, ans)", "def maxPartitionValue(n, k):\n    return k * (n + n - k + 1) // 2\n\ndef nPossiblePartitions(n, k, permutation):\n    (nPartitions, lowLimit) = (1, n - k)\n    allMaxValues_Indices = tuple((i for i in range(n) if lowLimit < int(permutation[i]) <= n))\n    for i in range(1, len(allMaxValues_Indices)):\n        nPartitions = nPartitions * (allMaxValues_Indices[i] - allMaxValues_Indices[i - 1]) % 998244353\n    return nPartitions\n(n, k) = map(int, input().split(' '))\npermutation = input().split(' ')\nprint(maxPartitionValue(n, k), nPossiblePartitions(n, k, permutation))", "def maxPartitionValue(n, k):\n    return k * (n + n - k + 1) // 2\n\ndef nPossiblePartitions(n, k, permutation):\n    (nPartitions, lowLimit) = (1, n - k)\n    allMaxValues_Indices = tuple((i for i in range(n) if lowLimit < int(permutation[i]) <= n))\n    for i in range(1, len(allMaxValues_Indices)):\n        nPartitions *= allMaxValues_Indices[i] - allMaxValues_Indices[i - 1]\n        if nPartitions >= 998244353:\n            nPartitions %= 998244353\n    return nPartitions\n(n, k) = map(int, input().split(' '))\npermutation = input().split(' ')\nprint(maxPartitionValue(n, k), nPossiblePartitions(n, k, permutation))", "M = 998244353\n\ndef solve(n, k, a):\n    ans1 = n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2\n    ans2 = 0\n    c = 0\n    for ai in a:\n        if ai <= n - k:\n            c += 1\n        else:\n            if ans2 == 0:\n                ans2 = 1\n            else:\n                ans2 = ans2 * (c + 1) % M\n            c = 0\n    print(ans1, ans2)\n\ndef main():\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    solve(n, k, a)\nmain()", "mod = 998244353\n\ndef pro(arr, n, k):\n    l = n - k + 1\n    r = n\n    lst = []\n    sumi = 0\n    for i in range(n):\n        if l <= arr[i] <= r:\n            lst.append(i)\n            sumi += arr[i]\n    ans = 1\n    for i in range(1, len(lst)):\n        ans = ans * (lst[i] - lst[i - 1]) % mod\n    print(sumi, ans % mod)\n(n, k) = list(map(int, input().split()))\narr = list(map(int, input().split()))\npro(arr, n, k)", "(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nmod = 998244353\nres = 1\ncount = 0\nflag = 0\nfor x in l1:\n    if x >= n - k + 1:\n        if flag == 1:\n            res = res * (count + 1) % mod\n            count = 0\n        else:\n            flag = 1\n            count = 0\n    else:\n        count += 1\nx = n - k\nprint(n * (n + 1) // 2 - x * (x + 1) // 2, res)", "(n, k) = list(map(int, input().split()))\np = list(map(int, input().split()))\nmn = n - k + 1\nval = sum([i for i in range(mn, n + 1)])\ncnt = 1\nMOD = 998244353\ncurr = 0\nvolt = False\nfor (i, x) in enumerate(p):\n    if x >= mn:\n        if not volt:\n            volt = True\n            curr = 1\n        else:\n            cnt = cnt * curr % MOD\n            curr = 1\n    else:\n        curr += 1\nprint(val, cnt)", "R = lambda : map(int, input().split())\n(n, k) = R()\na = list(R())\nN = 998244353\n\ndef solve(a, k):\n    s = 0\n    first = False\n    count = 0\n    ans = 1\n    for i in range(len(a)):\n        if first:\n            count += 1\n        if a[i] > n - k:\n            s += a[i]\n            if first:\n                ans = ans * count % N\n            first = True\n            count = 0\n    return [s, ans]\nprint(*solve(a, k))", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = r = 0\nfor x in R():\n    if x > n - k:\n        r = r * (j - i) % 998244353 or 1\n        i = j\n    j += 1\nprint(n * k - k * (k - 1) // 2, r)", "def main_function():\n    (n, k) = list(map(int, input().split(' ')))\n    P = list(map(int, input().split(' ')))\n    prev = None\n    ans1 = 0\n    ans2 = 1\n    for i in range(len(P)):\n        if P[i] >= n - k + 1:\n            ans1 += P[i]\n            if prev is None:\n                prev = i\n            else:\n                ans2 *= i - prev\n                ans2 %= 998244353\n                prev = i\n    print(ans1, 1 if k == 1 else ans2)\nmain_function()", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = r = 0\nfor x in R():\n    if x > n - k:\n        r = r * (j - i) % 998244353 or 1\n        i = j\n    j += 1\nprint(n * k - k * (k - 1) // 2, r)", "def linput(a):\n    return [int(i) for i in a.split()]\nfor ughblnk in range(1):\n    (n, k) = linput(input())\n    q = linput(input())\n    su = (n + (n - k + 1)) * k // 2\n    nk = n - k + 1\n    i = 0\n    while q[i] < nk:\n        i += 1\n    ii = i\n    s = 1\n    for j in range(i + 1, n):\n        if q[j] >= nk:\n            s *= j - ii\n            ii = j\n            s = s % 998244353\n    print(su, s)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nm = n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2\nx = n - k\np = 1\nmod = 998244353\ni = 0\ncount = 1\nverif = 0\nwhile i < n:\n    if arr[i] <= x:\n        count += 1\n    elif verif:\n        p = p * count % mod\n        count = 1\n    else:\n        verif = 1\n        count = 1\n    i += 1\nprint(m, p)", "def solve():\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    max_idx = []\n    for (i, p_i) in enumerate(p):\n        if p_i > n - k:\n            max_idx.append(i)\n    res = 1\n    for i in range(1, k):\n        res *= max_idx[i] - max_idx[i - 1]\n        res = res % 998244353\n    p_value = int((n - k + 1 + n) * k / 2)\n    print(p_value, res)\n\ndef main():\n    solve()\nmain()", "R = lambda : map(int, input().split())\n(n, k) = R()\na = [i for (i, x) in enumerate(R()) if x > n - k]\nr = 1\nfor (i, j) in zip(a, a[1:]):\n    r = r * (j - i) % 998244353\nprint(n * k - k * (k - 1) // 2, r)", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = r = 0\nfor x in R():\n    if x > n - k:\n        r = r * (j - i) % 998244353 or 1\n        i = j\n    j += 1\nprint(n * k - k * (k - 1) // 2, r)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nnum_partitions = 1\ncutoff = len(arr) - (k - 1)\nmax_value = (cutoff + len(arr)) * k / 2\nfound_first_max = False\nfor (index, val) in enumerate(arr):\n    if val >= cutoff:\n        if not found_first_max:\n            found_first_max = True\n            last_big_index = index - 1\n        diff = index - last_big_index\n        num_partitions = num_partitions * diff % 998244353\n        last_big_index = index\nprint(int(max_value), num_partitions)", "def main():\n    mod = 998244353\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    val = 0\n    vals = set()\n    for i in range(n, n - k, -1):\n        val += i\n        vals.add(i)\n    ways = 1\n    prev = -1\n    for i in range(n):\n        if arr[i] in vals:\n            if prev != -1:\n                ways *= i - prev\n            ways %= mod\n            prev = i\n    print(val, ways)\nmain()", "(n, k) = map(int, input().split())\na = [*map(int, input().split())]\nl = r = ans = 0\nfor i in a:\n    if i > n - k:\n        ans = ans * (r - l) % 998244353 or 1\n        l = r\n    r += 1\nprint(n * k - k * (k - 1) // 2, ans)", "(n, k) = map(int, input().split())\na = [*map(int, input().split())]\nl = r = ans = 0\nfor i in a:\n    if i > n - k:\n        ans = ans * (r - l) % 998244353 or 1\n        l = r\n    r += 1\nprint(n * k - k * (k - 1) // 2, ans)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nab = k * (2 * n - (k - 1)) // 2\nvb = -1\nans = 1\nct = 0\nfor i in range(n):\n    if arr[i] > n - k:\n        if vb != -1:\n            ans *= ct + 1\n            ans %= 998244353\n        else:\n            vb = 0\n        ct = 0\n    else:\n        ct += 1\nprint('%d %d' % (ab, ans))", "import sys, heapq\ninput = sys.stdin.readline\n\ndef main():\n    (n, k) = map(int, input().split())\n    al = list(map(int, input().split()))\n    used = [False] * n\n    s = 0\n    for i in range(n):\n        if al[i] >= n - k + 1:\n            used[i] = True\n            s += al[i]\n    for i in range(n):\n        if used[i] == True:\n            break\n        used[i] = True\n    for i in range(n):\n        if used[n - i - 1] == True:\n            break\n        used[n - i - 1] = True\n    ans = 1\n    cnt = 0\n    for i in used:\n        if i == False:\n            cnt += 1\n        else:\n            ans *= cnt + 1\n            ans %= 998244353\n            cnt = 0\n    print(s, ans)\nmain()", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\ns = 0\nmi = n - k + 1\nfor i in range(n, n - k, -1):\n    s += i\ncount = 1\nkk = 0\nans = 1\nfor i in range(n):\n    if a[i] >= mi:\n        kk = i\n        break\nfor i in range(kk + 1, n):\n    if a[i] >= mi:\n        ans *= count\n        ans %= 998244353\n        count = 1\n    else:\n        count += 1\n        count %= 988244353\nprint(s, ans)", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\ni1 = 0\ni2 = 0\ncount = 1\nsum = n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2\nc = 0\nfor i in range(0, n):\n    if n - k + 1 <= p[i]:\n        i1 = i\n        break\nfor i in range(n - 1, -1, -1):\n    if n - k + 1 <= p[i]:\n        i2 = i\n        break\nfor i in range(i1 + 1, i2 + 1):\n    if n - k + 1 <= p[i]:\n        c += 1\n        count = count % 998244353 * (c % 998244353) % 998244353\n        c = 0\n    else:\n        c += 1\nprint(str(sum) + ' ' + str(count))", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nm = 998244353\nans1 = n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2\nf = 0\nans = 1\nfor i in range(n):\n    if f == 0:\n        if a[i] > n - k:\n            f = 1\n            j = i\n    elif f == 1:\n        if a[i] > n - k:\n            ans = ans * (i - j) % m\n            j = i\nprint(ans1, ans)", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = 0\nr = 1\nfor x in R():\n    j += 1\n    if x > n - k:\n        if i:\n            r = r * (j - i) % 998244353\n        i = j\nprint(n * k - k * (k - 1) // 2, r)", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = 0\nr = 1\nfor x in R():\n    j += 1\n    if x > n - k:\n        r = r * (1, j - i)[i > 0] % 998244353\n        i = j\nprint(n * k - k * (k - 1) // 2, r)", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = r = 1\nfor x in R():\n    j += 1\n    if x > n - k:\n        r = r * (1, j - i)[i > 1] % 998244353\n        i = j\nprint(n * k - k * (k - 1) // 2, r)", "R = lambda : map(int, input().split())\n(n, k) = R()\ni = j = r = 1\nfor x in R():\n    j += 1\n    if x > n - k:\n        r = r * (i < 2 or j - i) % 998244353\n        i = j\nprint(n * k - k * (k - 1) // 2, r)", "(n, k) = map(int, input().split())\nmylist = list(map(int, input().split()))\nans1 = n * (n + 1) / 2 - (n - k) * (n - k + 1) / 2\nlowest = n - k + 1\nlist1 = list()\ni = 0\ncount = 0\nprevious = -1\nans2 = 1\nwhile i < len(mylist):\n    if mylist[i] >= lowest:\n        if previous != -1:\n            ans2 = ans2 * (i - previous) % 998244353\n        previous = i\n    i += 1\nprint(int(ans1), ans2)", "(n, k) = (int(i) for i in input().split())\np_arr = [int(i) for i in input().split()]\nmod = 998244353\nans = 1\ncur = 1\ns = 0\nfirst = True\nfor p in p_arr:\n    if p > n - k:\n        ans *= cur\n        ans %= mod\n        s += p\n        cur = 1\n        first = False\n    else:\n        cur += not first\nprint(s, ans)", "MOD = 998244353\n(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nrng = set(range(n - k + 1, n + 1))\nprint(sum(rng), end=' ')\ncomb = 1\nprev = -1\nfor i in range(n):\n    if p[i] in rng:\n        if prev != -1:\n            comb *= i - prev\n            comb %= MOD\n        prev = i\nprint(comb)", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nmax_list = [n - i for i in range(k)]\nmax_pos = []\nfor i in range(len(p)):\n    if n - p[i] < k:\n        max_pos.append(i)\nc = 1\nfor i in range(len(max_pos) - 1):\n    c = c * (max_pos[i + 1] - max_pos[i]) % 998244353\nprint(sum(max_list), c)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    MOD = 998244353\n    (n, k) = MI()\n    p = LI()\n    s = 0\n    ind = []\n    res = 1\n    for i in range(n):\n        if p[i] >= n - k + 1:\n            ind.append(i)\n            s += p[i]\n    for i in range(1, k):\n        res *= ind[i] - ind[i - 1]\n        res %= MOD\n    print(s, res)\nmain()", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nlargest = k * (2 * n - k + 1) // 2\ntotal = 1\ni = 0\nwhile p[i] <= n - k:\n    i += 1\ncount = 1\nnum = 1\ni += 1\nwhile count < k:\n    if p[i] > n - k:\n        total *= num\n        total %= 998244353\n        num = 1\n        count += 1\n    else:\n        num += 1\n    i += 1\nprint(largest, total)", "(n, k) = map(int, input().split())\np = [int(i) for i in input().split()]\nmodulo = 998244353\nmax_value = sum(range(n - k + 1, n + 1))\nnum_of_partitions = 1\ndiff = 1\nflag = 0\nfor num in p:\n    if num > n - k:\n        if flag == 1:\n            num_of_partitions = num_of_partitions * diff % modulo\n            num_of_partitions = 1 if num_of_partitions == 0 else num_of_partitions\n        else:\n            flag = 1\n        diff = 1\n    else:\n        diff += 1\nprint(max_value, num_of_partitions)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nx = ans = q1 = 0\nfor q in range(n, n - k, -1):\n    x += q\nfor q in range(n):\n    if a[q] > n - k:\n        (q1, ans) = (q, 1)\n        break\nfor q in range(q1 + 1, n):\n    if a[q] > n - k:\n        (ans, q1) = (ans * (q - q1) % 998244353, q)\nprint(x, ans)", "(n, k) = map(int, input().split())\nA = list(map(int, input().split()))\nfor i in range(n):\n    if A[i] > n - k:\n        A[i] = '-'\nchunks_lens = list()\nl = 0\nfor it in A:\n    if it == '-':\n        chunks_lens.append(l)\n        l = 0\n    else:\n        l += 1\nchunks_lens.append(0)\nres = 1\nfor i in range(1, k):\n    if chunks_lens[i] != 0:\n        res *= chunks_lens[i] + 1\n        res %= 998244353\nprint((n - k + 1 + n) * k // 2, res)", "(n, k) = input().split()\nn = int(n)\nk = int(k)\nperm = input().split()\nmax_val = (n + n - k + 1) * k // 2\nthe_mod = 998244353\nnum_poss = 1\ncounter = 0\nnum_appear = 0\nfor i in perm:\n    counter += 1\n    if int(i) > n - k:\n        if num_appear != 0:\n            num_poss *= counter\n            num_poss = num_poss % the_mod\n        num_appear += 1\n        counter = 0\nprint(max_val, num_poss)", "(n, k) = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\nfirst_ans = k * (2 * n - k + 1) // 2\nbig_num = 998244353\nprev_ind = -1\nans = 1\nfor i in range(n):\n    if p[i] >= n - k + 1:\n        if prev_ind >= 0:\n            ans *= i - prev_ind\n            ans %= big_num\n            prev_ind = i\n        else:\n            prev_ind = i\nprint(first_ans, ans % big_num)", "l1 = input().split(' ')\nn = int(l1[0])\nk = int(l1[1])\np = input().split(' ')\np = [int(i) for i in p]\npv = k * (2 * n - k + 1) / 2\nans = 1\nprev = -1\nsmall = n - k + 1\nMOD = 998244353\nfor i in range(len(p)):\n    if p[i] >= small:\n        if prev == -1:\n            prev = i\n            continue\n        ans *= i - prev\n        ans %= MOD\n        prev = i\nprint(int(pv), ans)", "(n, k) = [int(i) for i in input().split()]\nsc = 1\nsm = 0\nrz = 0\nfor i in input().split():\n    i = int(i)\n    if i > n - k:\n        if rz:\n            rz = rz * sc % 998244353\n            sc = 1\n            sm += i\n        else:\n            rz = 1\n            sc = 1\n            sm += i\n    else:\n        sc += 1\nprint(sm, rz)", "from collections import deque\n(n, k) = map(int, input().split())\narr = deque(map(int, input().split()))\nmx = (n + n - k + 1) * k // 2\nres = 1\nwhile len(arr) and arr[0] <= n - k:\n    arr.popleft()\nwhile len(arr) and arr[-1] <= n - k:\n    arr.pop()\nbf = 0\nfor i in list(arr)[1:]:\n    bf += 1\n    if not i <= n - k:\n        res *= bf\n        res %= 998244353\n        bf = 0\nif bf > 0:\n    res *= bf\n    res %= 998244353\nprint(mx, res)", "P = [int(x) for x in input().split(' ')]\nn = P[0]\nk = P[1]\nl = [int(x) for x in input().split(' ')]\ns = int(k * (2 * n - k + 1) / 2)\nc = 0\narr = []\nfor i in range(n):\n    if l[i] <= n - k:\n        c += 1\n    else:\n        arr.append(c)\n        c = 0\narr[0] = 0\npro = 1\nfor i in arr:\n    pro *= i + 1\n    pro %= 998244353\nprint(s, pro)", "from functools import reduce\nMOD = 998244353\n(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nm = n - k + 1\nbs = list(map(lambda p: p[0], filter(lambda p: p[1] >= m, enumerate(arr))))\nit = iter(bs)\nnext(it)\nans = reduce(lambda s, p: s * (p[1] - p[0]) % MOD, zip(iter(bs), it), 1)\nprint((n + m) * k // 2, ans)", "(n, k) = [int(x) for x in input().split()]\na = list(map(int, input().split()))\nprint(n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2, end=' ')\ni = n\ng = 1\nf = -1\nif n != k:\n    for i in range(0, n):\n        if f != -1 and n - k < a[i]:\n            g = g * (i + 1 - p)\n            g = g % 998244353\n            p = i + 1\n        elif n - k < a[i]:\n            f = 0\n            p = i + 1\n    print(g)\nelse:\n    print(1)", "MOD = 998244353\n(n, k) = map(int, input().split())\np = list(map(int, input().split()))\ns = (2 * n - k + 1) * k // 2\nans = 1\nj = -1\nfor i in range(n):\n    if p[i] >= n - k + 1:\n        if j != -1:\n            ans *= i - j\n            ans %= MOD\n        j = i\nprint(s, ans)", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\nMOD = 998244353\n(n, k) = rl()\np = rl()\ns = 0\nx = 1\nj = None\nfor i in range(n):\n    if p[i] > n - k:\n        s += p[i]\n        if j is not None:\n            x = x * (i - j) % MOD\n        j = i\nprint(s, x)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nval = (2 * n - k + 1) * k // 2\nMOD = 998244353\nans = 1\ni = 0\nwhile a[i] < n - k + 1:\n    i += 1\nprev = i\ncntmax = 1\nwhile cntmax < k:\n    i += 1\n    while a[i] < n - k + 1:\n        i += 1\n    ans = ans * (i - prev) % MOD\n    prev = i\n    cntmax += 1\nprint(val, ans)", "(n, k) = map(int, input().split())\nmod = 998244353\na = list(map(int, input().split()))\ncnt = 1\nposs = 1\nfirst = True\nfor i in range(n):\n    if a[i] <= n - k:\n        cnt += 1\n        continue\n    else:\n        if first:\n            first = False\n            cnt = 1\n            continue\n        poss *= cnt\n        poss %= mod\n        cnt = 1\nans1 = 0\nfor i in range(k):\n    ans1 += n\n    n -= 1\nprint(ans1, poss)", "(n, k) = map(int, input().split())\np = [int(x) for x in input().split()]\ncount = 0\nnum = 1\nz = 998244353\nj = 0\nans = (n * (n + 1) - (n - k) * (n - k + 1)) // 2\nfor i in range(n):\n    if count == k:\n        break\n    if p[i] > n - k:\n        count += 1\n        if count > 1:\n            num = num * (i - j) % z\n        j = i\nprint(ans, num)", "(n, k) = map(int, input().split())\nl = [int(x) for x in input().split()]\nm = []\nans = 0\nfor i in range(n):\n    if l[i] > n - k:\n        index = i\n        ans += l[i]\n        break\nvalue = 1\nfor i in range(i + 1, n):\n    if l[i] > n - k:\n        value = value * (i - index) % 998244353\n        index = i\n        ans += l[i]\nprint(ans, value)", "(n, k) = map(int, input().split())\nnum = map(int, input().split())\nrta = n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2\nindices = []\nfor (idx, val) in enumerate(num):\n    if val > n - k:\n        indices.append(idx)\nacu = 1\nfor (idx, val) in enumerate(indices):\n    if idx == 0:\n        continue\n    acu = acu * (val - indices[idx - 1]) % 998244353\nprint('{} {}'.format(rta, acu))", "(n, k) = map(int, input().split())\np = [int(x) for x in input().split()]\ncount = 0\nnum = 1\nz = 998244353\nj = 0\nans = (n * (n + 1) - (n - k) * (n - k + 1)) // 2\nfor i in range(n):\n    if count == k:\n        break\n    if p[i] > n - k:\n        count += 1\n        if count > 1:\n            num = num * (i - j) % z\n        j = i\nprint(ans, num)", "import math\n(n, k) = map(int, input().split())\nnums = list(map(int, input().split()))\ntopk = [i for i in range(n) if nums[i] > n - k]\nm = len(topk)\nans = 1\nans1 = 0\nfor i in range(m - 1):\n    ans *= topk[i + 1] - topk[i]\n    ans %= 998244353\nfor i in range(n - k + 1, n + 1):\n    ans1 += i\nprint('%d %d' % (ans1, ans))", "MOD = 998244353\n(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nrng = set(range(n - k + 1, n + 1))\nprint(sum(rng), end=' ')\ncomb = 1\nprev = -1\nfor i in range(n):\n    if p[i] in rng:\n        if prev != -1:\n            comb *= i - prev\n            comb %= MOD\n        prev = i\nprint(comb)", "(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\nans = (n - k) * k + k * (k + 1) / 2\nar = []\nfor i in range(n):\n    if l[i] > n - k:\n        ar.append(i)\nfa = 1\np = len(ar)\nfor i in range(p):\n    if i < p - 1:\n        fa = fa * (ar[i + 1] - ar[i]) % 998244353\nprint(int(ans), fa)", "def getPartitions(N, K):\n    n1 = N * (N + 1) / 2\n    n2 = K * (K + 1) / 2\n    return n1 - n2\n(N, K) = map(int, input().strip().split())\nP = list(map(int, input().strip().split()))\nProd = 1\nmod = 998244353\nPartitions = int(getPartitions(N, N - K))\nL = N - K + 1\nH = N\nprev = -1\nfor i in range(0, len(P)):\n    if P[i] <= N and P[i] >= L:\n        if prev != -1:\n            k1 = i - prev\n            Prod = Prod % mod * (k1 % mod) % mod\n        prev = i\nprint(Partitions, Prod)", "(n, k) = (int(s) for s in input().split(' '))\nps = [int(s) for s in input().split(' ')]\nmax_value = (n - k) * k + k * (k + 1) // 2\nmin_good_number = n - k + 1\nproduct = 1\nif k > 1:\n    good_indices = [i for i in range(n) if ps[i] >= min_good_number]\n    pairs_of_good_indices = tuple(zip(good_indices[:-1], good_indices[1:]))\n    for (l_ind, r_ind) in pairs_of_good_indices:\n        ways = r_ind - l_ind\n        product *= ways\n        product %= 998244353\nprint(max_value, product)", "md = 998244353\na = []\n(n, m) = map(int, input().split())\np = list(map(int, input().split()))\nl = [0] * (n - m) + [1] * m\nk = m * (2 * n - m + 1) // 2\nan = 1\nfor i in range(n):\n    if l[p[i] - 1]:\n        a.append(i)\n        if len(a) > 1:\n            an = an * (i - a[-2]) % md\nprint(k, an)", "a = [int(x) for x in input().split()]\nn = a[0]\nk = a[1]\np = [int(x) for x in input().split()]\nanswer = 1\nans = 0\nprev = -1\nfor i in range(n):\n    if p[i] > n - k:\n        ans += p[i]\n        if prev != -1:\n            answer *= i - prev\n            answer %= 998244353\n        prev = i\nprint(str(ans) + ' ' + str(answer))", "modulo = 998244353\n(n, k) = [int(i) for i in input().split()]\nlst = [int(i) for i in input().split()]\n(p, answer, s) = (-1, 1, 0)\nfor i in range(n):\n    if lst[i] > n - k:\n        s += lst[i]\n        if p != -1:\n            answer *= i - p\n            answer %= modulo\n        p = i\nprint(s, answer)", "from math import sqrt\nfrom queue import Queue\nimport sys\nsys.setrecursionlimit(10 ** 6)\nMOD = 998244353\n(n, k) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\npos = []\npre = -1\nfor (i, ai) in enumerate(a):\n    if ai > n - k:\n        if pre == -1:\n            pre = i\n        else:\n            pos.append(i - pre)\n            pre = i\nans = 1\nfor poi in pos:\n    ans = ans * poi % MOD\nprint((n + n - k + 1) * k // 2, ans)", "(n, k) = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\nprint(int(0.5 * n * (n + 1) - 0.5 * (n - k) * (n - k + 1)), end=' ')\nIs = []\nfor i in range(n):\n    if a[i] > n - k:\n        Is.append(i)\ncom = 1\nfor j in range(1, k):\n    com *= Is[j] - Is[j - 1]\n    com %= 998244353\nprint(com)", "(a, b) = map(int, input().split())\nk = []\ns = 1\nfor (i, j) in zip(range(1, a + 1), map(int, input().split())):\n    if a - b < j <= a:\n        k += [i]\nfor i in range(1, b):\n    s *= k[i] - k[i - 1]\n    s %= 998244353\nprint(a * (a + 1) // 2 - (a - b) * (a - b + 1) // 2, s)", "import sys\ninput = sys.stdin.readline\n(x, y) = map(int, input().split())\n(*li,) = map(int, input().split())\nans = 1\nsum1 = 0\nli1 = []\nfor i in range(x):\n    if li[i] > x - y:\n        sum1 += li[i]\n        li1.append(i + 1)\nfor i in range(y - 1):\n    ans = ans * (li1[i + 1] - li1[i]) % 998244353\nprint(sum1, ans)", "a = input().split()\nn = int(a[0])\nk = int(a[1])\nlp = 0\ni = 0\nans = 1\ncnt = 0\na = input().split()\nfor ai in a:\n    i = i + 1\n    if int(ai) >= n - k + 1:\n        if lp == 0:\n            lp = i\n        else:\n            ans = ans * (i - lp)\n            ans = ans % 998244353\n            lp = i\n        cnt = cnt + int(ai)\nprint(cnt, ans)", "md = 998244353\n\ndef f(a):\n    return a * (a + 1) // 2\n(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nif n == k:\n    su = f(n)\nelse:\n    su = f(n) - f(n - k)\ncnt = 1\na = []\nfor i in range(n):\n    ele = arr[i]\n    if ele > n - k:\n        a.append(i)\nfor i in range(1, len(a)):\n    cnt = (a[i] - a[i - 1]) % md * (cnt % md) % md\nprint(su, cnt)", "(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\nmi = n - k\nma = n\nans = []\nfor i in range(n):\n    if l[i] > mi:\n        ans.append(i + 1)\na = 1\nfor i in range(1, k):\n    a = a * (ans[i] - ans[i - 1]) % 998244353\nprint(int(k / 2 * (mi + 1 + ma)), a)", "(x, y) = map(int, input().split())\nz = list(map(int, input().split()))\nans = []\nfor i in range(len(z)):\n    if z[i] > x - y:\n        ans.append(i)\nans.sort()\ntotal = 1\nfor i in range(1, len(ans)):\n    total = total % 998244353 * ((ans[i] - ans[i - 1]) % 998244353) % 998244353\nal = x * (x + 1) // 2 - (x - y) * (x - y + 1) // 2\nprint(al, total)", "MOD = 998244353\n(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nprint(k * (2 * n - k + 1) // 2, end=' ')\npost = []\nfor i in range(len(p)):\n    if n - k + 1 <= p[i] <= n:\n        post.append(i)\nans = 1\nfor i in range(len(post) - 1):\n    ans = ans * (post[i + 1] - post[i]) % MOD\nprint(ans)", "import string\nimport math\nimport collections\n\ndef main():\n    (n, m) = map(int, input().split())\n    tab = list(map(int, input().split()))\n    t2 = []\n    s = 0\n    for x in range(n):\n        if tab[x] >= n - m + 1:\n            t2.append(x)\n            s += tab[x]\n    t2.sort()\n    inc = 1\n    for x in range(1, len(t2)):\n        inc *= t2[x] - t2[x - 1]\n        inc %= 998244353\n    print(s, inc)\nmain()", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nMAX = 0\nCount = 1\nList = []\nfor i in range(n):\n    if p[i] > n - k:\n        List.append(i)\n        MAX += p[i]\nfor i in range(len(List) - 1):\n    Count = Count * (List[i + 1] - List[i]) % 998244353\nprint(MAX, Count)", "(n, k) = [int(i) for i in input().split()]\nd = [int(i) for i in input().split()]\nmn = n - k + 1\nind = []\ns = 0\nfor i in range(n):\n    if d[i] >= mn:\n        ind.append(i)\n        s += d[i]\nmod = 998244353\nans = 1\nfor i in range(k - 1):\n    ans = ans * (ind[i + 1] - ind[i]) % mod\nprint(s, ans)", "p = 998244353\n(n, k) = map(int, input().split())\narr = [int(x) for x in input().split()]\ndrr = []\nfor i in range(n):\n    if arr[i] >= n - k + 1:\n        drr.append(i)\ntotal = int(k * ((n + n - k + 1) / 2))\ntotal2 = 1\nfor i in range(1, len(drr)):\n    total2 *= drr[i] - drr[i - 1]\n    total2 = total2 % p\nprint(total, total2)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\ns = ''\nfor i in range(n):\n    if arr[i] > n - k:\n        s += '1'\n    else:\n        s += '0'\ns = s.strip('0')\ndem = 0\nans = 1\nfor i in range(len(s)):\n    if s[i] == '1':\n        ans = ans * (dem + 1) % 998244353\n        dem = 0\n    else:\n        dem += 1\nok = 0\nfor i in range(n - k + 1, n + 1):\n    ok += i\nprint(ok, end=' ')\nprint(ans)", "from sys import stdin, stdout\narr = [int(i) for i in stdin.readline().split()]\n(n, k) = (arr[0], arr[1])\nmod = 998244353\n(a, p, s) = (1, -1, 0)\narr = [int(i) for i in stdin.readline().split()]\nfor i in range(len(arr)):\n    x = arr[i]\n    if x >= n - k + 1:\n        if p != -1:\n            a = a * ((i - p) % mod) % mod\n        s += x\n        p = i\nprint(str(s) + ' ' + str(a))", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\ni = 0\nprod = 1\nbet = n - k + 1\nsumm = 0\ncnt = 1\npoint = 0\nmod = 998244353\nwhile i < n:\n    if p[i] >= bet:\n        summ += p[i]\n        if point >= 1:\n            prod = prod * cnt % mod\n        point += 1\n        cnt = 1\n    else:\n        cnt += 1\n    i += 1\nprint(summ, prod)", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nMOD = 998244353\nlast = n - k + 1\nsume = 0\ncare = []\nres = 1\nfor i in range(n):\n    if p[i] >= last:\n        care.append(i)\n        sume += p[i]\nfor i in range(1, k):\n    res *= care[i] - care[i - 1]\n    res %= MOD\nprint(sume, res)", "(n, k) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nMOD = 998244353\nposes = []\nres = 0\nfor i in range(len(l)):\n    if l[i] > n - k:\n        poses.append(i)\n        res += l[i]\nmuls = 1\nfor i in range(len(poses) - 1):\n    muls *= poses[i + 1] - poses[i]\n    muls %= MOD\nprint(res, muls)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nmod = 998244353\nfans = 1\nsum = 0\nind = []\nfor i in range(n):\n    if a[i] > n - k:\n        ind.append(i)\n        sum += a[i]\nfor i in range(len(ind) - 1):\n    fans = fans * (ind[i + 1] - ind[i]) % mod\nprint(sum, fans)", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\nmod = 998244353\nif n == k:\n    print(n * (n + 1) // 2, 1)\n    exit()\nans = n * k - k * (k - 1) // 2\nindxs = list()\nfor i in range(n):\n    if p[i] > n - k:\n        indxs.append(i)\ncount = 1\nfor i in range(1, len(indxs)):\n    count = count * (indxs[i] - indxs[i - 1]) % mod\nprint(ans, count)", "mod = 998244353\n(n, k) = map(int, input().split())\na = [int(s) for s in input().split()]\nb = [1] * k\nk1 = 0\ns = 0\np = 1\nfor i in range(0, n):\n    if a[i] > n - k:\n        if k1 == 0:\n            x = i\n            k1 = 1\n            s += a[i]\n        else:\n            s += a[i]\n            p = p * (i % mod - x % mod) % mod % mod\n            x = i\nprint(s, p % mod)", "from sys import stdin\nmod = 998244353\n(n, k) = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\nans = []\nM = n\nm = n - k + 1\ns = 0\nfor i in range(n):\n    if arr[i] >= m and arr[i] <= M:\n        s += arr[i]\n        ans.append(i)\nif len(ans) == 1:\n    print(s, 1)\nelse:\n    a = 1\n    for i in range(1, len(ans)):\n        a = a * (ans[i] - ans[i - 1]) % mod\n    print(s, a)", "mod = 998244353\n(n, k) = map(int, input().strip().split())\npermutation = list(map(int, input().strip().split()))\ncutoffs = []\nmaxVal = 0\nfor j in range(n):\n    if permutation[j] > n - k:\n        maxVal += permutation[j]\n        cutoffs.append(j)\ntimesReached = 1\nfor j in range(1, len(cutoffs)):\n    timesReached *= cutoffs[j] - cutoffs[j - 1]\n    timesReached = timesReached % mod\nprint(maxVal, timesReached)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\npos = []\nMOD = 998244353\nss = 0\nfor i in range(len(arr)):\n    if arr[i] >= n - k + 1:\n        pos.append(i)\n        ss += arr[i]\nans = 1\nfor i in range(1, len(pos)):\n    ans = ans * (pos[i] - pos[i - 1]) % MOD\nprint(ss, ans)", "(n, k) = map(int, input().split())\npp = [int(i) for i in input().split()]\nkk = set([int(i) for i in range(n - k + 1, n + 1)])\n(prev, pro) = (0, 1)\nfor i in range(1, n + 1):\n    if pp[i - 1] in kk:\n        if prev == 0:\n            prev = i\n            continue\n        pro *= i - prev\n        pro %= 998244353\n        prev = i\nprint(sum(kk), pro)", "from math import *\n(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\ns = 0\nm = 998244353\nr = []\nfor i in range(k):\n    s = s + n - i\nq = []\nfor i in range(n):\n    if l[i] > n - k:\n        q.append(i)\nf = 1\nq.sort()\nfor i in range(1, len(q)):\n    p = q[i] - q[i - 1]\n    f = f * p % m\nprint(s, f % m)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\narr1 = []\nans = 0\nfor i in range(n):\n    if arr[i] >= n - k + 1:\n        arr1.append(i)\n        ans += arr[i]\nmp = 1\nmod = 998244353\nsz = len(arr1)\nfor i in range(sz - 1):\n    mp *= arr1[i + 1] - arr1[i]\n    mp %= mod\nprint(ans, mp)", "(n, k) = map(int, input().split())\nll = list(map(int, input().split()))\nmas_ukaz = []\nsmm = 0\nans1 = 1\nfor i in range(n):\n    if n - k + 1 <= ll[i]:\n        mas_ukaz.append(i)\n        smm += ll[i]\nmod = 998244353\nfor i in range(k - 1):\n    rast = mas_ukaz[i + 1] - mas_ukaz[i]\n    if rast == 0:\n        continue\n    else:\n        ans1 = rast * ans1 % mod\nprint(smm, max(ans1, 1))", "(n, k) = map(int, input().split())\nps = list(map(int, input().split()))\npss = sorted(ps)\nv = sum(pss[-k:])\nt = pss[-k]\ncnt = 1\nlasti = -1\nfor (i, p) in enumerate(ps):\n    if p >= t:\n        if lasti != -1:\n            cnt = cnt * (i - lasti) % 998244353\n        lasti = i\nprint(v, cnt)", "(n, k) = map(int, input().split())\np = list(map(int, input().split()))\n(a, cnt, ans, MOD) = ([], 1, 0, 998244353)\nfor i in range(len(p)):\n    if p[i] > n - k:\n        a.append(i)\n        ans += p[i]\nfor i in range(1, len(a)):\n    cnt = cnt % MOD * (a[i] - a[i - 1]) % MOD % MOD\nprint(ans, cnt)"]