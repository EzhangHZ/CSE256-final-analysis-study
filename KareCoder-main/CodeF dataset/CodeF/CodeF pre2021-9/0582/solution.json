["for _ in range(int(input())):\n    [n, m] = list(map(int, input().split()))\n    k = 1\n    arr = []\n    while n >= k:\n        n -= k\n        arr.append(k)\n        k *= 2\n    if n:\n        arr.append(n)\n    ans = 1\n    for i in arr:\n        ans *= i + 1\n    print((ans - 1) % m)", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    (st, ans) = (1, 1)\n    while st <= n:\n        ans *= min(st * 2 - st + 1, n - st + 2)\n        st *= 2\n    print((ans - 1) % m)", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    (st, ans) = (1, 1)\n    while st <= n:\n        ans *= min(st * 2 - st + 1, n - st + 2)\n        st *= 2\n    print((ans - 1) % m)", "from sys import stderr\n\ndef count_barfuls_by_ending(d, *, m):\n    n_total = 0\n    pow2 = 1\n    while d >= pow2:\n        n_total += (n_total + 1) * pow2\n        n_total %= m\n        d -= pow2\n        pow2 <<= 1\n    n_total += (n_total + 1) * d\n    return n_total % m\nfor _ in range(int(input())):\n    (d, m) = map(int, input().split(' '))\n    print(count_barfuls_by_ending(d, m=m))", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    st = 1\n    ans = 1\n    while st <= n:\n        ans *= min(st * 2 - st + 1, n - st + 2)\n        st *= 2\n    print((ans - 1) % m)", "import sys\nlines = sys.stdin.readlines()\nT = int(lines[0].strip())\n\ndef solve(d, m):\n    s = bin(d)[2:]\n    res = 1\n    for i in range(len(s) - 1):\n        res = (1 + 2 ** i) * res % m\n    res = res * (d - 2 ** (len(s) - 1) + 2) % m\n    res = (res - 1 + m) % m\n    print(res)\nfor t in range(1, T + 1):\n    (d, m) = map(int, lines[t].strip().split(' '))\n    solve(d, m)", "import math\na = [1] * 31\nfor i in range(31):\n    a[i] = 1 << i\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().strip().split(' '))\n    k = int(math.log2(n))\n    prod = 1\n    for i in range(k):\n        prod = prod * (a[i] + 1) % m\n    r = n - a[k] + 1\n    prod = prod * (r + 1) % m\n    print(max((prod - 1) % m, 0))", "def calc(n):\n    a = n.bit_length() - 1\n    X = [0] * 30\n    X[a] = n - (1 << a) + 1\n    for i in range(a):\n        X[i] = 1 << i\n    return X\nT = int(input())\nfor _ in range(T):\n    (d, m) = map(int, input().split())\n    s = 1\n    for a in calc(d):\n        s = s * (a + 1) % m\n    print((s - 1) % m)", "for q in range(int(input())):\n    dp = [0] * 35\n    (d, m) = [int(i) for i in input().split()]\n    for i in range(1, 35):\n        dp[i] = (pow(2, i - 1, m) * (dp[i - 1] + 1) + dp[i - 1]) % m\n    bn = bin(d)\n    k = len(bn) - 3\n    mm = d - (1 << k)\n    ans = (dp[k] * (mm + 2) + mm + 1) % m\n    print(ans)", "import math\nvalues = [1]\nminuses = [1]\ncur1 = 2\nfact = 1\ncur2 = 2\nfor i in range(1, 40):\n    values.append(values[-1] + cur1 * cur2)\n    minuses.append(cur1)\n    cur1 *= 2 ** fact + 1\n    cur2 *= 2\n    fact += 1\n\ndef calc(d, m):\n    index = int(math.log(d, 2))\n    offset = 2 ** (index + 1) - 1 - d\n    return (values[index] - offset * minuses[index]) % m\nn = int(input())\nfor i in range(n):\n    (d, m) = map(int, input().split())\n    print(calc(d, m))", "T = int(input())\nfor t in range(T):\n    (d, m) = map(int, input().split())\n    bd = bin(d)[2:]\n    lbd = len(bd)\n    ans = d - (1 << lbd - 1) + 1\n    for b in range(len(bd) - 1, 0, -1):\n        q = 1 << b - 1\n        ans = (ans + ans * q + q) % m\n    print(ans % m)", "t = int(input().strip())\nfor k in range(t):\n    (d, m) = map(int, input().strip().split())\n    o = 1\n    oo = d\n    c = 0\n    while oo > 0:\n        c += 1\n        oo = oo // 2\n    while o <= d:\n        o = o * 2\n    o = o // 2\n    ll = [0 for i in range(c + 1)]\n    start = o\n    fin = d\n    s = fin - start + 1\n    ll[c] = s\n    for e in range(c - 1, 0, -1):\n        fin = start - 1\n        start = start // 2\n        ll[e] = (fin - start + 1 + (fin - start + 1) * ll[e + 1] + ll[e + 1]) % m\n    print(ll[1] % m)", "T = int(input())\nfor t in range(T):\n    (d, m) = input().split()\n    (d, m) = (int(d), int(m))\n    bd = bin(d)[2:]\n    lbd = len(bd)\n    ans = d - (1 << lbd - 1) + 1\n    for b in range(len(bd) - 1, 0, -1):\n        q = 1 << b - 1\n        ans = (ans + ans * q + q) % m\n    print(ans % m)", "t = int(input())\nfor _ in range(t):\n    (d, m) = map(int, input().split())\n    ans = 1\n    i = 0\n    r = min(2 ** (i + 1) - 1, d) - 2 ** i + 2\n    while r > 0:\n        ans *= r\n        i += 1\n        r = min(2 ** (i + 1) - 1, d) - 2 ** i + 2\n    print((ans - 1) % m)", "q = int(input())\nfor i in range(q):\n    inp = input().split()\n    p = int(inp[0])\n    n = int(inp[1])\n    e = 1\n    a = 1\n    t = 0\n    while e * 2 <= p:\n        t += e * a\n        e *= 2\n        a = t + 1\n        t %= n\n    t += (p - e + 1) * a\n    t %= n\n    print(t)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    st = 1\n    ans = 1\n    while st <= n:\n        ans *= min(st * 2 - st + 1, n - st + 2)\n        st *= 2\n    print((ans - 1) % m)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    st = 1\n    ans = 1\n    while st <= n:\n        ans *= min(st * 2 - st + 1, n - st + 2)\n        st *= 2\n    print((ans - 1) % m)", "import math\n\ndef k_of_d(d):\n    return d - 2 ** int(math.log(d, 2))\n\ndef ans(d, m):\n    k = k_of_d(d)\n    r0 = len(format(d, 'b'))\n    r = r0\n    ans = 1\n    while True:\n        if r == 0:\n            return (ans - 1) % m\n        if r == r0:\n            fac = k + 2\n            ans *= fac\n        else:\n            fac = 2 ** (r - 1) + 1\n            ans *= fac\n        r -= 1\n        ans = ans % m\nT = int(input())\nfor t in range(T):\n    (d, m) = input().split(' ')\n    (d, m) = (int(d), int(m))\n    print(ans(d, m))", "T = int(input())\nfor case in range(T):\n    (d, m) = [int(x) for x in input().split()]\n    i = 0\n    tot = 1\n    while 2 ** i <= d:\n        r = (2 ** i, min(d + 1, 2 ** (i + 1)))\n        nr = r[1] - r[0]\n        tot *= nr + 1\n        tot = tot % m\n        i += 1\n    tot = (tot - 1) % m\n    print(tot)", "def main():\n    t = int(input())\n    power = [1]\n    for i in range(1, 31):\n        power.append(power[i - 1] * 2)\n    for _ in range(t):\n        (d, m) = map(int, input().split())\n        k = 0\n        p = d\n        while p != 0:\n            k += 1\n            p //= 2\n        basen = power[k - 1]\n        pp = [d - basen + 2]\n        for i in range(1, k):\n            pp.append(power[i - 1] + 1)\n        p = 1\n        for i in pp:\n            p *= i\n        p -= 1\n        print(p % m)\n    return\nmain()", "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef LS():\n    return [list(x) for x in sys.stdin.readline().split()]\n\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == '\\n':\n        return res[:-1]\n    return res\n\ndef IR(n):\n    return [I() for i in range(n)]\n\ndef LIR(n):\n    return [LI() for i in range(n)]\n\ndef SR(n):\n    return [S() for i in range(n)]\n\ndef LSR(n):\n    return [LS() for i in range(n)]\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    b = [1]\n    f = [0] * 32\n    p = 2\n    for n in range(2, 66, 2):\n        k = 1\n        for i in range(0, (n >> 1) - 1):\n            k *= 2 ** i + 1\n        f[n - 2 >> 1] = k\n    for i in range(1, 32):\n        b.append(b[-1] + p * f[i])\n        p *= 2\n    t = I()\n    for _ in range(t):\n        (d, m) = LI()\n        if d == 1:\n            print(1 % m)\n            continue\n        k = int(math.log(d, 2)) - 1\n        s = b[k]\n        d -= pow(2, k + 1) - 1\n        print((s + d * f[k + 1]) % m)\n    return\nsolve()", "t = int(input())\nfor f in range(t):\n    (d, m) = map(int, input().split())\n    n = 1\n    p = 1\n    while d >= 2 * p:\n        n += 1\n        p *= 2\n    s = [0] * n\n    s[0] = 1\n    for i in range(n - 1):\n        pos = min(2 ** (i + 1), d + 1 - 2 ** (i + 1))\n        s[i + 1] = pos\n        for j in range(i + 1):\n            s[i + 1] += pos * s[j]\n        s[i + 1] %= m\n    sol = 0\n    for i in range(n):\n        sol += s[i]\n    sol %= m\n    print(sol)", "t = int(input(''))\nimport math\nfor _ in range(t):\n    (d, m) = list(map(int, input('').split(' ')))\n    n = int(math.log(d, 2))\n    last = d - 2 ** n + 1\n    a = []\n    for i in range(n):\n        a.append(2 ** i)\n    a.append(last)\n    ans = [0] * (n + 1)\n    for i in range(n + 1):\n        for j in range(i, 0, -1):\n            ans[j] = (a[i] * ans[j - 1] + ans[j]) % m\n        ans[0] = (ans[0] + a[i]) % m\n    print(sum(ans) % m)"]