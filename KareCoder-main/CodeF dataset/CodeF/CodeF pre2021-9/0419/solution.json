["(n, q) = map(int, input().split())\nr1 = [0] * (n + 2)\nr2 = [0] * (n + 2)\nf = ''\nx = 0\nfor i in range(q):\n    (r, c) = map(int, input().split())\n    if r == 1:\n        if r1[c] == 0:\n            r1[c] = 1\n            if r2[c - 1] == 1:\n                x += 1\n            if r2[c] == 1:\n                x += 1\n            if r2[c + 1] == 1:\n                x += 1\n        else:\n            r1[c] = 0\n            if r2[c - 1] == 1:\n                x -= 1\n            if r2[c] == 1:\n                x -= 1\n            if r2[c + 1] == 1:\n                x -= 1\n    elif r2[c] == 0:\n        r2[c] = 1\n        if r1[c - 1] == 1:\n            x += 1\n        if r1[c] == 1:\n            x += 1\n        if r1[c + 1] == 1:\n            x += 1\n    else:\n        r2[c] = 0\n        if r1[c - 1] == 1:\n            x -= 1\n        if r1[c] == 1:\n            x -= 1\n        if r1[c + 1] == 1:\n            x -= 1\n    if x == 0:\n        f += 'Yes' + '\\n'\n    else:\n        f += 'No' + '\\n'\nprint(f)", "(n, q) = map(int, input().split())\nmaze = [[0] * (n + 2) for _ in range(2)]\nx = 0\nres = []\nfor _ in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    if maze[r][c] == 0:\n        maze[r][c] = 1\n        if r == 0:\n            r = 1\n        else:\n            r = 0\n        if maze[r][c - 1] == 1:\n            x += 1\n        if maze[r][c] == 1:\n            x += 1\n        if maze[r][c + 1] == 1:\n            x += 1\n    else:\n        maze[r][c] = 0\n        if r == 0:\n            r = 1\n        else:\n            r = 0\n        if maze[r][c - 1] == 1:\n            x -= 1\n        if maze[r][c] == 1:\n            x -= 1\n        if maze[r][c + 1] == 1:\n            x -= 1\n    if x == 0:\n        res.append('Yes')\n    else:\n        res.append('No')\nprint('\\n'.join(res))", "(n, q) = [int(x) for x in input().split()]\nmaze = [(n + 2) * [0] for _ in range(2)]\nblocks = 0\nres = []\nfor _ in range(q):\n    (r, c) = [int(x) for x in input().split()]\n    r -= 1\n    maze[r][c] ^= 1\n    offset = -1 + 2 * maze[r][c]\n    nr = 1 ^ r\n    choices = [maze[nr][c] == 1, maze[nr][c + 1] == 1, maze[nr][c - 1] == 1]\n    blocks += sum([offset for x in choices if x])\n    res.append('Yes') if blocks == 0 else res.append('No')\nprint('\\n'.join(map(str, res)))", "import sys\ninput = sys.stdin.readline\n(n, q) = [int(item) for item in input().split()]\nblock = [[0] * (n + 6) for _ in range(2)]\nwall = 0\nfor _ in range(q):\n    (x, y) = [int(item) - 1 for item in input().split()]\n    y += 3\n    invx = (x + 1) % 2\n    if block[x][y]:\n        block[x][y] = 0\n        wall -= block[invx][y - 1] + block[invx][y] + block[invx][y + 1]\n    else:\n        block[x][y] = 1\n        wall += block[invx][y - 1] + block[invx][y] + block[invx][y + 1]\n    if wall > 0:\n        print('No')\n    else:\n        print('Yes')", "import sys\n(n, q) = map(int, input().split())\nblock = 0\na = [0] * (n + 2)\nfor (r, c) in (map(int, l.split()) for l in sys.stdin):\n    if a[c] & r:\n        a[c] -= r\n        for i in range(c - 1, c + 2):\n            if a[i] & 3 - r:\n                block -= 1\n    else:\n        a[c] += r\n        for i in range(c - 1, c + 2):\n            if a[i] & 3 - r:\n                block += 1\n    print('Yes' if block == 0 else 'No')", "from sys import stdin\n\ndef get_ints():\n    return list(map(int, stdin.readline().strip().split()))\n(n, q) = get_ints()\ncells = [[0] * n for i in range(2)]\nblocked = 0\nfor _ in range(q):\n    (x, y) = get_ints()\n    x -= 1\n    y -= 1\n    delta = +1 if cells[x][y] == 0 else -1\n    cells[x][y] = 1 - cells[x][y]\n    for dy in range(-1, 2):\n        if y + dy >= 0 and y + dy < n and (cells[1 - x][y + dy] == 1):\n            blocked += delta\n    print('Yes' if blocked == 0 else 'No')", "(n, q) = list(map(int, input().split()))\ntl = [list(map(int, input().split())) for _ in range(q)]\ngd = [[False] * n, [False] * n]\nbn = 0\nfor t in tl:\n    (r, c) = (t[0] - 1, t[1] - 1)\n    bnc = sum(gd[1 if r == 0 else 0][max(0, c - 1):min(c + 2, n)])\n    gd[r][c] = not gd[r][c]\n    bn += bnc if gd[r][c] else -bnc\n    print('Yes' if bn == 0 else 'No')", "import sys\n\ndef good(y, n):\n    return y >= 0 and y < n\n\ndef main():\n    (n, q) = map(int, sys.stdin.readline().split())\n    state = [[0] * n for _ in range(2)]\n    pairs = set()\n    for _ in range(q):\n        (r, c) = map(int, sys.stdin.readline().split())\n        r -= 1\n        c -= 1\n        if state[r][c] == 0:\n            for cc in range(c - 1, c + 2):\n                if good(cc, n) and state[r ^ 1][cc]:\n                    pairs.add((r, c, r ^ 1, cc))\n                    pairs.add((r ^ 1, cc, r, c))\n        else:\n            for cc in range(c - 1, c + 2):\n                if good(cc, n) and state[r ^ 1][cc]:\n                    pairs.remove((r, c, r ^ 1, cc))\n                    pairs.remove((r ^ 1, cc, r, c))\n        state[r][c] ^= 1\n        if pairs:\n            print('No')\n        else:\n            print('Yes')\nmain()", "from collections import defaultdict, deque\nimport sys, heapq, bisect, math, itertools, string, queue, copy, time\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nmod = 10 ** 9 + 7\neps = 10 ** (-7)\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str():\n    return list(sys.stdin.readline().split())\n(N, Q) = inpl()\nMAP = [[False, False] for _ in range(N)]\nblock = set()\nans = ''\nfor _ in range(Q):\n    (x, y) = inpl()\n    x -= 1\n    y -= 1\n    if MAP[y][x] == False:\n        MAP[y][x] = True\n        nx = x ^ 1\n        for ny in range(max(0, y - 1), min(y + 2, N)):\n            if MAP[ny][nx]:\n                if x == 0:\n                    block.add((y, ny))\n                else:\n                    block.add((ny, y))\n    else:\n        MAP[y][x] = False\n        nx = x ^ 1\n        for ny in range(max(0, y - 1), min(y + 2, N)):\n            if x == 0:\n                block.discard((y, ny))\n            else:\n                block.discard((ny, y))\n    if len(block) > 0:\n        ans += 'No\\n'\n    else:\n        ans += 'Yes\\n'\nprint(ans)", "import sys\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\n(n, q) = read()\nlava = [[0 for i in range(n)] for _ in range(2)]\nblocked_pairs = 0\nwhile q:\n    (x, y) = list(map(lambda x: int(x) - 1, sys.stdin.readline().strip().split()))\n    Del = [1, -1][lava[x][y]]\n    for dist in range(-1, 2):\n        y1 = y + dist\n        if y1 >= 0 and y1 < n and lava[1 - x][y1]:\n            blocked_pairs += Del\n    lava[x][y] = 1 - lava[x][y]\n    print(['Yes', 'No'][blocked_pairs > 0])\n    q -= 1", "import collections\n\ndef isReachable(qs):\n    (ones, walls) = (set(), collections.defaultdict(set))\n    for q in qs:\n        if q in walls:\n            walls_to_remove = list(walls[q])\n            del walls[q]\n            for w in walls_to_remove:\n                walls[w].remove(q)\n                if len(walls[w]) == 0:\n                    del walls[w]\n                    ones.add(w)\n        elif q in ones:\n            ones.remove(q)\n        else:\n            x = 1 if q[0] == 2 else 2\n            neighbours = [(x, q[1] - 1), (x, q[1]), (x, q[1] + 1)]\n            found = False\n            for n in neighbours:\n                if n in ones:\n                    walls[q].add(n)\n                    walls[n].add(q)\n                    ones.remove(n)\n                    found = True\n                if n in walls:\n                    walls[q].add(n)\n                    walls[n].add(q)\n                    found = True\n            if not found:\n                ones.add(q)\n        if len(walls) == 0:\n            print('Yes')\n        else:\n            print('No')\n(N, q) = map(int, input().split())\nqs = []\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    qs.append((a, b))\nisReachable(qs)", "(n, q) = map(int, input().split())\na = [[0 for j in range(n + 2)] for i in range(2)]\nx = 0\nfor i in range(q):\n    (n1, m) = map(int, input().split())\n    n1 -= 1\n    if a[n1][m] == 0:\n        a[n1][m] = 1\n        if n1 == 1:\n            n1 = 0\n        else:\n            n1 = 1\n        if a[n1][m + 1] == 1:\n            x += 1\n        if a[n1][m] == 1:\n            x += 1\n        if a[n1][m - 1] == 1:\n            x += 1\n    else:\n        a[n1][m] = 0\n        if n1 == 1:\n            n1 = 0\n        else:\n            n1 = 1\n        if a[n1][m - 1] == 1:\n            x -= 1\n        if a[n1][m] == 1:\n            x -= 1\n        if a[n1][m + 1] == 1:\n            x -= 1\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\ngrid = []\nfor j in range(2):\n    grid.append([0] * n)\nco = 0\nfor j in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    if grid[r][c] == 0:\n        grid[r][c] = 1\n        e = 0\n        if r == 0:\n            if c - 1 >= 0:\n                if grid[1][c - 1] == 1:\n                    e += 1\n            if grid[1][c] == 1:\n                e += 1\n            if c + 1 < n:\n                if grid[1][c + 1] == 1:\n                    e += 1\n        else:\n            if c - 1 >= 0:\n                if grid[0][c - 1] == 1:\n                    e += 1\n            if grid[0][c] == 1:\n                e += 1\n            if c + 1 < n:\n                if grid[0][c + 1] == 1:\n                    e += 1\n        co += e\n    else:\n        grid[r][c] = 0\n        e = 0\n        if r == 0:\n            if c - 1 >= 0:\n                if grid[1][c - 1] == 1:\n                    e += 1\n            if grid[1][c] == 1:\n                e += 1\n            if c + 1 < n:\n                if grid[1][c + 1] == 1:\n                    e += 1\n        else:\n            if c - 1 >= 0:\n                if grid[0][c - 1] == 1:\n                    e += 1\n            if grid[0][c] == 1:\n                e += 1\n            if c + 1 < n:\n                if grid[0][c + 1] == 1:\n                    e += 1\n        co -= e\n    if co == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = (int(x) for x in input().split())\nboard = [[0] * n for _ in range(2)]\n(vs, ds) = (0, 0)\nfor _ in range(q):\n    (r, c) = (int(x) for x in input().split())\n    if board[r - 1][c - 1]:\n        if c - 2 >= 0 and board[2 - r][c - 2]:\n            ds -= 1\n        if c < n and board[2 - r][c]:\n            ds -= 1\n        if board[2 - r][c - 1]:\n            vs -= 1\n    else:\n        if c - 2 >= 0 and board[2 - r][c - 2]:\n            ds += 1\n        if c < n and board[2 - r][c]:\n            ds += 1\n        if board[2 - r][c - 1]:\n            vs += 1\n    board[r - 1][c - 1] = abs(1 - board[r - 1][c - 1])\n    print('Yes' if vs == 0 and ds == 0 else 'No')", "(n, q) = [int(i) for i in input().split()]\nr1 = [0 for i in range(n + 2)]\nr2 = [0 for i in range(n + 2)]\ntotal = 0\nfor i in range(q):\n    (r, c) = [int(i) for i in input().split()]\n    if r == 1:\n        if r1[c] == 0:\n            r1[c] = 1\n            if r2[c + 1] == 1:\n                total += 1\n            if r2[c] == 1:\n                total += 1\n            if r2[c - 1] == 1:\n                total += 1\n        else:\n            r1[c] = 0\n            if r2[c + 1] == 1:\n                total -= 1\n            if r2[c] == 1:\n                total -= 1\n            if r2[c - 1] == 1:\n                total -= 1\n    elif r2[c] == 0:\n        r2[c] = 1\n        if r1[c + 1] == 1:\n            total += 1\n        if r1[c] == 1:\n            total += 1\n        if r1[c - 1] == 1:\n            total += 1\n    else:\n        r2[c] = 0\n        if r1[c + 1] == 1:\n            total -= 1\n        if r1[c] == 1:\n            total -= 1\n        if r1[c - 1] == 1:\n            total -= 1\n    if total == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, m) = map(int, input().split())\nt = [0] * n\no = [0] * n\nb = 0\nfor i in range(m):\n    (w, v) = map(int, input().split())\n    v -= 1\n    if w == 1:\n        o[v] = 1 - o[v]\n        if o[v] == 1:\n            if t[v] == 1:\n                b += 1\n            if v > 0 and t[v - 1] == 1:\n                b += 1\n            if v < n - 1 and t[v + 1] == 1:\n                b += 1\n        if o[v] == 0:\n            if t[v] == 1:\n                b -= 1\n            if v > 0 and t[v - 1] == 1:\n                b -= 1\n            if v < n - 1 and t[v + 1] == 1:\n                b -= 1\n    else:\n        t[v] = 1 - t[v]\n        if t[v] == 1:\n            if o[v] == 1:\n                b += 1\n            if v > 0 and o[v - 1] == 1:\n                b += 1\n            if v < n - 1 and o[v + 1] == 1:\n                b += 1\n        if t[v] == 0:\n            if o[v] == 1:\n                b -= 1\n            if v > 0 and o[v - 1] == 1:\n                b -= 1\n            if v < n - 1 and o[v + 1] == 1:\n                b -= 1\n    if b == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nl = [[True for j in range(n + 4)] for i in range(2)]\nuk = 0\nfor i in range(q):\n    (r, d) = map(int, input().split())\n    l[r - 1][d] = not l[r - 1][d]\n    for j in range(3):\n        if not l[not r - 1][d - 1 + j]:\n            if l[r - 1][d]:\n                uk -= 1\n            else:\n                uk += 1\n    if uk:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nd1 = set()\nd2 = set()\nd = set()\nfor i in range(q):\n    (a, j) = map(int, input().split())\n    if a == 1:\n        if j in d1:\n            if (j, j) in d:\n                d.remove((j, j))\n            if (j, j - 1) in d:\n                d.remove((j, j - 1))\n            if (j, j + 1) in d:\n                d.remove((j, j + 1))\n            d1.remove(j)\n        else:\n            d1.add(j)\n            if j in d2:\n                d.add((j, j))\n            if j - 1 in d2:\n                d.add((j, j - 1))\n            if j + 1 in d2:\n                d.add((j, j + 1))\n    elif j in d2:\n        if (j, j) in d:\n            d.remove((j, j))\n        if (j - 1, j) in d:\n            d.remove((j - 1, j))\n        if (j + 1, j) in d:\n            d.remove((j + 1, j))\n        d2.remove(j)\n    else:\n        d2.add(j)\n        if j in d1:\n            d.add((j, j))\n        if j - 1 in d1:\n            d.add((j - 1, j))\n        if j + 1 in d1:\n            d.add((j + 1, j))\n    if len(d) == 0:\n        print('Yes')\n    else:\n        print('No')", "(N, Q) = map(int, input().strip().split())\nBoard = [None]\nfor _ in range(2):\n    Board.append([None] + [False] * N)\nBlocks = 0\nfor _ in range(Q):\n    (Y, X) = map(int, input().strip().split())\n    Neigh = 0\n    OppY = 3 - Y\n    if Board[OppY][X]:\n        Neigh += 1\n    if X > 1:\n        if Board[OppY][X - 1]:\n            Neigh += 1\n    if X < N:\n        if Board[OppY][X + 1]:\n            Neigh += 1\n    if Board[Y][X]:\n        Board[Y][X] = False\n        Blocks -= Neigh\n    else:\n        Board[Y][X] = True\n        Blocks += Neigh\n    if Blocks > 0:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\ntab = [[], []]\nfor _ in range(n + 1):\n    tab[0].append(True)\n    tab[1].append(True)\nlol = 0\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    if tab[x][y] == True:\n        tab[x][y] = False\n        if tab[x ^ 1][y + 1] == False:\n            lol += 1\n        if tab[x ^ 1][y - 1] == False:\n            lol += 1\n        if tab[x ^ 1][y] == False:\n            lol += 1\n    else:\n        tab[x][y] = True\n        if tab[x ^ 1][y + 1] == False:\n            lol -= 1\n        if tab[x ^ 1][y - 1] == False:\n            lol -= 1\n        if tab[x ^ 1][y] == False:\n            lol -= 1\n    print('Yes' if lol == 0 else 'No')", "(n, q) = map(int, input().split())\na = [[0 for j in range(n + 2)] for i in range(2)]\nx = 0\nfor i in range(q):\n    (n1, m) = map(int, input().split())\n    n1 -= 1\n    if a[n1][m] == 0:\n        a[n1][m] = 1\n        if n1 == 1:\n            n1 = 0\n        else:\n            n1 = 1\n        if a[n1][m + 1] == 1:\n            x += 1\n        if a[n1][m] == 1:\n            x += 1\n        if a[n1][m - 1] == 1:\n            x += 1\n    else:\n        a[n1][m] = 0\n        if n1 == 1:\n            n1 = 0\n        else:\n            n1 = 1\n        if a[n1][m - 1] == 1:\n            x -= 1\n        if a[n1][m] == 1:\n            x -= 1\n        if a[n1][m + 1] == 1:\n            x -= 1\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().strip().split())\nnodes = [[0 for _ in range(n + 2)], [0 for _ in range(n + 2)]]\nans = 0\nfor i in range(q):\n    (x, y) = map(int, input().strip().split())\n    x = x - 1\n    pos = (x + 1) % 2\n    if nodes[x][y] == 1:\n        nodes[x][y] = 0\n        ans = ans - nodes[pos][y - 1] - nodes[pos][y] - nodes[pos][y + 1]\n    else:\n        nodes[x][y] = 1\n        ans = ans + nodes[pos][y - 1] + nodes[pos][y] + nodes[pos][y + 1]\n    if ans == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\na = [[0] * n, [0] * n]\nblocks = 0\nfor i in range(0, q):\n    x = 0\n    (r, c) = map(int, input().split())\n    if a[r - 1][c - 1] == 1:\n        if r == 2:\n            if c != 1 and a[0][c - 2] == 1:\n                x += 1\n            if c != n and a[0][c] == 1:\n                x += 1\n            if a[0][c - 1] == 1:\n                x += 1\n            blocks -= x\n        else:\n            if c != 1 and a[1][c - 2] == 1:\n                x += 1\n            if c != n and a[1][c] == 1:\n                x += 1\n            if a[1][c - 1] == 1:\n                x += 1\n            blocks -= x\n        a[r - 1][c - 1] = 0\n    else:\n        a[r - 1][c - 1] = 1\n        if r == 2:\n            if c != 1 and a[0][c - 2] == 1:\n                x += 1\n            if c != n and a[0][c] == 1:\n                x += 1\n            if a[0][c - 1] == 1:\n                x += 1\n            blocks += x\n        else:\n            if c != 1 and a[1][c - 2] == 1:\n                x += 1\n            if c != n and a[1][c] == 1:\n                x += 1\n            if a[1][c - 1] == 1:\n                x += 1\n            blocks += x\n    if blocks == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nb = 0\na = list(([0, 0, 0] for i in range(n + 2)))\nfor _ in range(q):\n    (y, x) = map(int, input().split())\n    if a[x][y] == 1:\n        a[x][y] = 0\n        if y == 1:\n            if a[x - 1][2] == 1:\n                b -= 1\n            if a[x][2] == 1:\n                b -= 1\n            if a[x + 1][2] == 1:\n                b -= 1\n        else:\n            if a[x - 1][1] == 1:\n                b -= 1\n            if a[x][1] == 1:\n                b -= 1\n            if a[x + 1][1] == 1:\n                b -= 1\n        if b == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        a[x][y] = 1\n        if y == 1:\n            if a[x - 1][2] == 1:\n                b += 1\n            if a[x][2] == 1:\n                b += 1\n            if a[x + 1][2] == 1:\n                b += 1\n        else:\n            if a[x - 1][1] == 1:\n                b += 1\n            if a[x][1] == 1:\n                b += 1\n            if a[x + 1][1] == 1:\n                b += 1\n        if b == 0:\n            print('Yes')\n        else:\n            print('No')", "(n, q) = map(int, input().split())\nmaze = [[0] * (n + 2) for _ in range(2)]\nx = 0\nfor _ in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    if maze[r][c] == 0:\n        maze[r][c] = 1\n        if r == 0:\n            r = 1\n        else:\n            r = 0\n        if maze[r][c - 1] == 1:\n            x += 1\n        if maze[r][c] == 1:\n            x += 1\n        if maze[r][c + 1] == 1:\n            x += 1\n    else:\n        maze[r][c] = 0\n        if r == 0:\n            r = 1\n        else:\n            r = 0\n        if maze[r][c - 1] == 1:\n            x -= 1\n        if maze[r][c] == 1:\n            x -= 1\n        if maze[r][c + 1] == 1:\n            x -= 1\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nM = [[False] * n, [False] * n]\nbad_counter = 0\nfor Q in range(q):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    a_ = 1 - a\n    if M[a_][b]:\n        if M[a][b]:\n            bad_counter -= 1\n        else:\n            bad_counter += 1\n    if b - 1 >= 0 and M[a_][b - 1]:\n        if M[a][b]:\n            bad_counter -= 1\n        else:\n            bad_counter += 1\n    if b + 1 < n and M[a_][b + 1]:\n        if M[a][b]:\n            bad_counter -= 1\n        else:\n            bad_counter += 1\n    M[a][b] = not M[a][b]\n    if bad_counter == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = list(map(int, input().split()))\none = [[0] * (n + 2), [0] * (n + 2)]\nnow = 0\nfor i in range(q):\n    (r, s) = map(int, input().split())\n    nap = one[(r + 1) % 2][s - 1] + one[(r + 1) % 2][s] + one[(r + 1) % 2][s + 1]\n    if one[r % 2][s] == 0:\n        now += nap\n    else:\n        now -= nap\n    one[r % 2][s] = (one[r % 2][s] + 1) % 2\n    if now == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nA = [0 for i in range(n)]\nB = [0 for i in range(n)]\nx = 0\nfor _ in range(q):\n    (r, c) = map(int, input().split())\n    if r == 1:\n        if A[c - 1] == 0:\n            A[c - 1] = 1\n            x += B[c - 1]\n            if c - 1 > 0:\n                x += B[c - 2]\n            if c - 1 < n - 1:\n                x += B[c]\n        else:\n            A[c - 1] = 0\n            x -= B[c - 1]\n            if c - 1 > 0:\n                x -= B[c - 2]\n            if c - 1 < n - 1:\n                x -= B[c]\n    elif B[c - 1] == 0:\n        B[c - 1] = 1\n        x += A[c - 1]\n        if c - 1 > 0:\n            x += A[c - 2]\n        if c - 1 < n - 1:\n            x += A[c]\n    else:\n        B[c - 1] = 0\n        x -= A[c - 1]\n        if c - 1 > 0:\n            x -= A[c - 2]\n        if c - 1 < n - 1:\n            x -= A[c]\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().strip().split())\na = [[0 for _ in range(n + 2)] for _ in range(3)]\nres = 0\nfor i in range(q):\n    (r, c) = map(int, input().strip().split())\n    if a[r][c] != 0:\n        a[r][c] = 0\n        if r == 1:\n            res -= a[2][c] + a[2][c - 1] + a[2][c + 1]\n        else:\n            res -= a[1][c] + a[1][c - 1] + a[1][c + 1]\n    else:\n        a[r][c] = 1\n        if r == 1:\n            res += a[2][c] + a[2][c - 1] + a[2][c + 1]\n        else:\n            res += a[1][c] + a[1][c - 1] + a[1][c + 1]\n    if res == 0:\n        print('Yes')\n    else:\n        print('No')", "def main():\n    (columns, number_inputs) = map(int, input().split(' '))\n    maze = [[False] * columns, [False] * columns]\n    blocks = 0\n    for i in range(number_inputs):\n        (y, x) = map(int, input().split(' '))\n        x -= 1\n        y -= 1\n        maze[y][x] = not maze[y][x]\n        dy = 1 if y == 0 else 0\n        neighbors = [[x - 1, dy], [x, dy], [x + 1, dy]]\n        op = 1 if maze[y][x] else -1\n        for neighbor in neighbors:\n            (temp_x, temp_y) = neighbor\n            if temp_x >= 0 and temp_x < columns and maze[temp_y][temp_x]:\n                blocks += op\n        if not blocks:\n            print('Yes')\n        else:\n            print('No')\nmain()", "(n, q) = map(int, input().split())\nthreats = 0\nforbidden = [[False] * n for i in range(2)]\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    if forbidden[x - 1][y - 1] == False:\n        r = 0 if x == 2 else 1\n        for c in [y - 2, y - 1, y]:\n            if c >= 0 and c < n and forbidden[r][c]:\n                threats += 1\n        forbidden[x - 1][y - 1] = True\n    else:\n        r = 0 if x == 2 else 1\n        for c in [y - 2, y - 1, y]:\n            if c >= 0 and c < n and forbidden[r][c]:\n                threats -= 1\n        forbidden[x - 1][y - 1] = False\n    if threats >= 1:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nisv = [[0] * n, [0] * n]\nblkd = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    isv[a][b] ^= 1\n    if isv[a][b]:\n        if a == 0:\n            if isv[1][b]:\n                blkd += 1\n            if b + 1 <= n - 1 and isv[1][b + 1]:\n                blkd += 1\n            if b - 1 >= 0 and isv[1][b - 1]:\n                blkd += 1\n        else:\n            if isv[0][b]:\n                blkd += 1\n            if b + 1 <= n - 1 and isv[0][b + 1]:\n                blkd += 1\n            if b - 1 >= 0 and isv[0][b - 1]:\n                blkd += 1\n    elif a == 0:\n        if isv[1][b]:\n            blkd -= 1\n        if b + 1 <= n - 1 and isv[1][b + 1]:\n            blkd -= 1\n        if b - 1 >= 0 and isv[1][b - 1]:\n            blkd -= 1\n    else:\n        if isv[0][b]:\n            blkd -= 1\n        if b + 1 <= n - 1 and isv[0][b + 1]:\n            blkd -= 1\n        if b - 1 >= 0 and isv[0][b - 1]:\n            blkd -= 1\n    if blkd > 0:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nr = [0] + [[0 for j in range(n)] for w in range(2)]\nlav = 0\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    r[x][y - 1] = 1 - r[x][y - 1]\n    if r[x][y - 1]:\n        if r[3 - x][y - 1] == 1:\n            lav += 1\n        if r[3 - x][y - 2 if y > 1 else 0] == 1:\n            lav += 1\n        if r[3 - x][y if y < n else -1] == 1:\n            lav += 1\n    else:\n        if r[3 - x][y - 1] == 1:\n            lav -= 1\n        if r[3 - x][y - 2 if y > 1 else 0] == 1:\n            lav -= 1\n        if r[3 - x][y if y < n else -1] == 1:\n            lav -= 1\n    if lav:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\narr = [[0 for i in range(n)] for j in range(2)]\npair = 0\nwhile q:\n    (x, y) = map(int, input().split())\n    add = 0\n    x -= 1\n    y -= 1\n    if arr[x][y] == 1:\n        arr[x][y] = 0\n        add = -1\n    else:\n        arr[x][y] = 1\n        add = 1\n    for i in range(-1, 2):\n        if i + y >= 0 and i + y < n and (arr[1 - x][y + i] == 1):\n            pair += add\n    if pair == 0:\n        print('Yes')\n    else:\n        print('No')\n    q -= 1", "(n, m) = map(int, input().split())\nA = []\nB = []\nfor i in range(n):\n    A.append(0)\n    B.append(0)\nx = 0\nfor i in range(m):\n    (X, y) = map(int, input().split())\n    if X == 1:\n        if A[y - 1] == 0:\n            A[y - 1] = 1\n            x += B[y - 1]\n            if y > 1:\n                x += B[y - 2]\n            if y < n:\n                x += B[y]\n        else:\n            A[y - 1] = 0\n            x -= B[y - 1]\n            if y > 1:\n                x -= B[y - 2]\n            if y < n:\n                x -= B[y]\n    elif B[y - 1] == 0:\n        B[y - 1] = 1\n        x += A[y - 1]\n        if y > 1:\n            x += A[y - 2]\n        if y < n:\n            x += A[y]\n    else:\n        B[y - 1] = 0\n        x -= A[y - 1]\n        if y > 1:\n            x -= A[y - 2]\n        if y < n:\n            x -= A[y]\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split(' '))\ntraps = [[0] * (n + 2), [0] * (n + 2)]\ntopological_val = 0\nfor __ in range(q):\n    (row, column) = map(int, input().split(' '))\n    row -= 1\n    if traps[row][column] == 0:\n        topological_val += sum(traps[(row + 1) % 2][column - 1:column + 2])\n        traps[row][column] = 1\n    else:\n        topological_val -= sum(traps[(row + 1) % 2][column - 1:column + 2])\n        traps[row][column] = 0\n    print('Yes' if topological_val == 0 else 'No')", "import math\nfrom collections import deque\na = [[], []]\ns = input().split(' ')\nn = int(s[0])\nq = int(s[1])\nfor i in range(n + 2):\n    a[0].append(0)\n    a[1].append(0)\ncnt = 0\nwhile q:\n    q -= 1\n    s = input().split(' ')\n    r = int(s[0]) - 1\n    c = int(s[1])\n    if a[r][c] == 0:\n        a[r][c] = 1\n        if a[1 - r][c - 1] == 1:\n            cnt += 1\n        if a[1 - r][c] == 1:\n            cnt += 1\n        if a[1 - r][c + 1] == 1:\n            cnt += 1\n    else:\n        a[r][c] = 0\n        if a[1 - r][c - 1] == 1:\n            cnt -= 1\n        if a[1 - r][c] == 1:\n            cnt -= 1\n        if a[1 - r][c + 1] == 1:\n            cnt -= 1\n    if cnt == 0:\n        print('Yes')\n    else:\n        print('No')", "read = lambda : map(int, input().split())\n(n, q) = read()\nn += 1\na = (0, [0] * n, [0] * n)\nk = 0\nfor i in [0] * q:\n    (x, y) = read()\n    a[x][y] ^= 1\n    k += (2 * a[x][y] - 1) * sum(a[x ^ 3][y - 1:y + 2])\n    print('YNeos'[k > 0::2])", "(n, q) = map(int, input().split())\nvis = [[0 for i in range(n)] for i in range(2)]\nans = 0\nfor i in range(q):\n    (r, c) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    if vis[r][c] == 0:\n        vis[r][c] = 1\n        if c - 1 >= 0 and vis[1 - r][c - 1] == 1:\n            ans = ans + 1\n        if c + 1 < n and vis[1 - r][c + 1] == 1:\n            ans = ans + 1\n        if vis[1 - r][c] == 1:\n            ans = ans + 1\n    else:\n        vis[r][c] = 0\n        if c - 1 >= 0 and vis[1 - r][c - 1] == 1:\n            ans = ans - 1\n        if c + 1 < n and vis[1 - r][c + 1] == 1:\n            ans = ans - 1\n        if vis[1 - r][c] == 1:\n            ans = ans - 1\n    if ans == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nmaze = [[1 for _ in range(n)] for _ in range(2)]\ntot_blocks = 0\nfor _ in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    if maze[r][c] == 1:\n        maze[r][c] = -1\n        block = 0\n        if c != 0:\n            if maze[(r + 1) % 2][c - 1] == -1:\n                block += 1\n        if c != n - 1:\n            if maze[(r + 1) % 2][c + 1] == -1:\n                block += 1\n        if maze[(r + 1) % 2][c] == -1:\n            block += 1\n        tot_blocks += block\n        if tot_blocks == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        maze[r][c] = 1\n        block = 0\n        if c != 0:\n            if maze[(r + 1) % 2][c - 1] == -1:\n                block += 1\n        if c != n - 1:\n            if maze[(r + 1) % 2][c + 1] == -1:\n                block += 1\n        if maze[(r + 1) % 2][c] == -1:\n            block += 1\n        tot_blocks -= block\n        if tot_blocks == 0:\n            print('Yes')\n        else:\n            print('No')", "from collections import defaultdict\n(n, q) = [int(i) for i in input().split()]\nblock1 = defaultdict(lambda : False)\nblock2 = defaultdict(lambda : False)\ncount = 0\nfor i in range(q):\n    (y, x) = [int(j) for j in input().split()]\n    if y == 1:\n        block1[x] = not block1[x]\n        if block1[x]:\n            count += block2[x - 1]\n            count += block2[x]\n            count += block2[x + 1]\n        else:\n            count -= block2[x - 1]\n            count -= block2[x]\n            count -= block2[x + 1]\n    else:\n        block2[x] = not block2[x]\n        if block2[x]:\n            count += block1[x - 1]\n            count += block1[x]\n            count += block1[x + 1]\n        else:\n            count -= block1[x - 1]\n            count -= block1[x]\n            count -= block1[x + 1]\n    print('No' if count else 'Yes')", "(n, q) = map(int, input().split())\nl = []\nfor i in range(2):\n    a = []\n    for j in range(n + 2):\n        a.append(0)\n    l.append(a)\ns = 0\nfor _ in range(q):\n    (r, c) = map(int, input().split())\n    k = 1 if l[r - 1][c - 1] else -1\n    s = s + k * (l[2 - r][c - 1] + l[2 - r][c] + l[2 - r][c - 2])\n    l[r - 1][c - 1] ^= 1\n    if s:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nlab = [[' '] * n, [' '] * n]\ncross = [[False] * n, [False] * n]\nside = [False] * n\ncnt_cross = 0\ncnt_side = 0\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    if lab[x][y] == ' ':\n        lab[x][y] = '#'\n        if y < n - 1 and lab[x ^ 1][y + 1] == '#':\n            cross[x][y] = True\n            cnt_cross += 1\n        if y > 0 and lab[x ^ 1][y - 1] == '#':\n            cross[x ^ 1][y - 1] = True\n            cnt_cross += 1\n        if lab[x ^ 1][y] == '#':\n            side[y] = True\n            cnt_side += 1\n    else:\n        lab[x][y] = ' '\n        if y < n - 1 and lab[x ^ 1][y + 1] == '#':\n            cross[x][y] = False\n            cnt_cross -= 1\n        if y > 0 and cross[x ^ 1][y - 1]:\n            cross[x ^ 1][y - 1] = False\n            cnt_cross -= 1\n        if side[y]:\n            side[y] = False\n            cnt_side -= 1\n    print('No' if cnt_side + cnt_cross else 'Yes')", "(n, m) = map(int, input().split())\nstate = [0] * (n + 2)\ncounter = 0\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    origin = (state[y] | state[y - 1] == 3) + (state[y] | state[y + 1] == 3)\n    state[y] ^= 1 << x - 1\n    new = (state[y] | state[y - 1] == 3) + (state[y] | state[y + 1] == 3)\n    counter += new - origin\n    print('Yes' if counter == 0 else 'No')", "ans = 0\n(n, q) = map(int, input().split())\nline = [[False, False] for _ in range(n)]\nfor idx in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    if line[c][r]:\n        flag = -1\n        line[c][r] = False\n    else:\n        flag = 1\n        line[c][r] = True\n    r = 0 if r else 1\n    if c - 1 >= 0 and line[c - 1][r]:\n        ans += flag\n    if c + 1 < n and line[c + 1][r]:\n        ans += flag\n    if line[c][r]:\n        ans += flag\n    if ans:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = list(map(int, input().split()))\nd = [[False, False, False, False] for i1 in range(n + 2)]\npairs = 0\nfor i1 in range(q):\n    (x, y) = list(map(int, input().split()))\n    d[y][x] = not d[y][x]\n    if d[y][x]:\n        if d[y - 1][3 - x]:\n            pairs += 1\n        if d[y][3 - x]:\n            pairs += 1\n        if d[y + 1][3 - x]:\n            pairs += 1\n    else:\n        if d[y - 1][3 - x]:\n            pairs -= 1\n        if d[y][3 - x]:\n            pairs -= 1\n        if d[y + 1][3 - x]:\n            pairs -= 1\n    if pairs > 0:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nm = [[0, 0] for _ in range(n)]\nbar = 0\nfor _ in range(q):\n    (j, i) = map(int, input().split())\n    (i, j) = (i - 1, j - 1)\n    if m[i][j] == 0:\n        m[i][j] = 1\n        if j == 0:\n            if m[i][j + 1] == 1:\n                bar += 1\n            if i > 0 and m[i - 1][j + 1] == 1:\n                bar += 1\n            if i < n - 1 and m[i + 1][j + 1] == 1:\n                bar += 1\n        elif j == 1:\n            if m[i][j - 1] == 1:\n                bar += 1\n            if i > 0 and m[i - 1][j - 1] == 1:\n                bar += 1\n            if i < n - 1 and m[i + 1][j - 1] == 1:\n                bar += 1\n    else:\n        m[i][j] = 0\n        if j == 0:\n            if m[i][j + 1] == 1:\n                bar -= 1\n            if i > 0 and m[i - 1][j + 1] == 1:\n                bar -= 1\n            if i < n - 1 and m[i + 1][j + 1] == 1:\n                bar -= 1\n        elif j == 1:\n            if m[i][j - 1] == 1:\n                bar -= 1\n            if i > 0 and m[i - 1][j - 1] == 1:\n                bar -= 1\n            if i < n - 1 and m[i + 1][j - 1] == 1:\n                bar -= 1\n    if bar == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = list(map(int, input().strip().split()))\nmaze = [[1 for _ in range(n)] for _ in range(2)]\ncount = 0\nfor _ in range(q):\n    (r, c) = list(map(int, input().strip().split()))\n    (r, c) = (r - 1, c - 1)\n    if maze[r][c] == 1:\n        maze[r][c] = 0\n        if maze[1 - r][c] == 0:\n            count += 1\n        if c != 0:\n            if maze[1 - r][c - 1] == 0:\n                count += 1\n        if c != n - 1:\n            if maze[1 - r][c + 1] == 0:\n                count += 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        maze[r][c] = 1\n        if maze[1 - r][c] == 0:\n            count -= 1\n        if c != 0:\n            if maze[1 - r][c - 1] == 0:\n                count -= 1\n        if c != n - 1:\n            if maze[1 - r][c + 1] == 0:\n                count -= 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')", "R = lambda : map(int, input().split())\n(n, q) = R()\nn += 1\na = (0, [0] * n, [0] * n)\nk = 0\nfor _ in [0] * q:\n    (r, c) = R()\n    a[r][c] ^= 1\n    k += (2 * a[r][c] - 1) * sum(a[r ^ 3][c - 1:c + 2])\n    print('YNeos'[k > 0::2])", "def main():\n    (columns, number_inputs) = map(int, input().split(' '))\n    maze = [[False] * columns, [False] * columns]\n    blocks = 0\n    for i in range(number_inputs):\n        (y, x) = map(int, input().split(' '))\n        x -= 1\n        y -= 1\n        maze[y][x] = not maze[y][x]\n        dy = 1 if y == 0 else 0\n        neighbors = [[x - 1, dy], [x, dy], [x + 1, dy]]\n        op = 1 if maze[y][x] else -1\n        for neighbor in neighbors:\n            (temp_x, temp_y) = neighbor\n            if temp_x >= 0 and temp_x < columns and maze[temp_y][temp_x]:\n                blocks += op\n        if not blocks:\n            print('Yes')\n        else:\n            print('No')\nmain()", "d = {1: set(), 2: set()}\n(n, q) = map(int, input().split())\ncheck = set()\nfor i in range(q):\n    flag = 0\n    (r, c) = map(int, input().split())\n    if r == 1:\n        x = 2\n    else:\n        x = 1\n    if c in d[r]:\n        flag = 1\n        d[r].remove(c)\n        if r == 1:\n            if (c, c) in check:\n                check.remove((c, c))\n            if (c, c - 1) in check:\n                check.remove((c, c - 1))\n            if (c, c + 1) in check:\n                check.remove((c, c + 1))\n        else:\n            if (c, c) in check:\n                check.remove((c, c))\n            if (c - 1, c) in check:\n                check.remove((c - 1, c))\n            if (c + 1, c) in check:\n                check.remove((c + 1, c))\n    else:\n        d[r].add(c)\n    if flag == 1:\n        if len(check) == 0:\n            print('Yes')\n        else:\n            print('No')\n        continue\n    if c in d[x]:\n        check.add((c, c))\n    if c - 1 in d[x]:\n        if r == 1:\n            check.add((c, c - 1))\n        else:\n            check.add((c - 1, c))\n    if c + 1 in d[x]:\n        if r == 1:\n            check.add((c, c + 1))\n        else:\n            check.add((c + 1, c))\n    if len(check) == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\ndif = [0, 0, 0]\nf = [[0 for i in range(n)] for j in range(2)]\npattern = [[0, 1, 2], [2, 1, 0]]\nfor i in range(q):\n    (r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    if f[r][c] == 0:\n        for y in range(max(0, c - 1), min(n, c + 2)):\n            if f[(r + 1) % 2][y] == 1:\n                dif[pattern[r][y + 1 - c]] += 1\n    else:\n        for y in range(max(0, c - 1), min(n, c + 2)):\n            if f[(r + 1) % 2][y] == 1:\n                dif[pattern[r][y + 1 - c]] -= 1\n    f[r][c] = (1 + f[r][c]) % 2\n    if dif == [0, 0, 0]:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nblocks = 0\nd = [[0] * n for _ in range(2)]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    (x, y) = (x - 1, y - 1)\n    if d[x][y] == 0:\n        d[x][y] = 1\n        if d[1 - x][y]:\n            blocks += 1\n        if y + 1 < n and d[1 - x][y + 1]:\n            blocks += 1\n        if y - 1 >= 0 and d[1 - x][y - 1]:\n            blocks += 1\n    else:\n        d[x][y] = 0\n        if d[1 - x][y]:\n            blocks -= 1\n        if y + 1 < n and d[1 - x][y + 1]:\n            blocks -= 1\n        if y - 1 >= 0 and d[1 - x][y - 1]:\n            blocks -= 1\n    if blocks == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = map(int, input().split())\nups = set()\nbts = set()\nps = 0\nfor _ in range(q):\n    (y, x) = map(int, input().split())\n    if y == 1:\n        (s, os) = (bts, ups)\n    else:\n        (s, os) = (ups, bts)\n    if x in s:\n        for dx in range(-1, 2, 1):\n            xx = dx + x\n            if xx in os:\n                ps -= 1\n        s.remove(x)\n    else:\n        for dx in range(-1, 2, 1):\n            xx = dx + x\n            if xx in os:\n                ps += 1\n        s.add(x)\n    print('No' if ps else 'Yes')", "(n, q) = [int(x) for x in input().split()]\nl = []\nfor i in range(2):\n    l2 = []\n    for j in range(n + 2):\n        l2.append(0)\n    l.append(l2)\ncount = 0\nfor i in range(q):\n    s = list(map(int, input().split()))\n    x = s[0] - 1\n    y = s[1]\n    z = 0\n    if x == 0:\n        z = 1\n    elif x == 1:\n        z = 0\n    if l[x][y] == 0:\n        l[x][y] = 1\n        if l[z][y - 1] == 1:\n            count += 1\n        if l[z][y] == 1:\n            count += 1\n        if l[z][y + 1] == 1:\n            count += 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        l[x][y] = 0\n        if l[z][y - 1] == 1:\n            count -= 1\n        if l[z][y] == 1:\n            count -= 1\n        if l[z][y + 1] == 1:\n            count -= 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')", "R = lambda : map(int, input().split())\n(n, q) = R()\nn += 1\na = (0, [0] * n, [0] * n)\nk = 0\nfor _ in [0] * q:\n    (r, c) = R()\n    a[r][c] ^= 1\n    k += (2 * a[r][c] - 1) * sum(a[r ^ 3][c - 1:c + 2])\n    print('YNeos'[k > 0::2])", "(n, q) = map(int, input().split())\nG = [[0] * n for j in range(2)]\nans = 0\nc = {}\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    G[x - 1][y - 1] = 1 - G[x - 1][y - 1]\n    if G[x - 1][y - 1] == 1:\n        if y - 1 >= 0 and G[2 - x][y - 1] == 1:\n            ans += 1\n        if y < n and G[2 - x][y] == 1:\n            ans += 1\n        if y - 2 >= 0 and G[2 - x][y - 2] == 1:\n            ans += 1\n    else:\n        if y - 1 >= 0 and G[2 - x][y - 1] == 1:\n            ans -= 1\n        if y < n and G[2 - x][y] == 1:\n            ans -= 1\n        if y - 2 >= 0 and G[2 - x][y - 2] == 1:\n            ans -= 1\n    if ans > 0:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = map(int, input().split())\nlava = [[0 for i in range(n)] for j in range(2)]\nblockedPair = 0\nwhile q > 0:\n    q -= 1\n    (x, y) = map(lambda s: int(s) - 1, input().split())\n    delta = +1 if lava[x][y] == 0 else -1\n    lava[x][y] = 1 - lava[x][y]\n    for dy in range(-1, 2):\n        if y + dy >= 0 and y + dy < n and (lava[1 - x][y + dy] == 1):\n            blockedPair += delta\n    if blockedPair == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = [int(i) for i in input().split()]\nfield = [0] * n\nbol = True\ncount = 0\ncount2 = 0\nfor t in range(q):\n    (r, c) = [int(i) for i in input().split()]\n    r -= 1\n    c -= 1\n    if field[c] == 3:\n        count -= 1\n    if c > 0:\n        if field[c] | field[c - 1] == 3:\n            count2 -= 1\n    if c < n - 1:\n        if field[c] | field[c + 1] == 3:\n            count2 -= 1\n    field[c] ^= 1 << r\n    if field[c] == 3:\n        count += 1\n    if c > 0:\n        if field[c] | field[c - 1] == 3:\n            count2 += 1\n    if c < n - 1:\n        if field[c] | field[c + 1] == 3:\n            count2 += 1\n    if count == 0 and count2 == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = list(map(int, input().strip().split()))\nmaze = [[1 for _ in range(n)] for _ in range(2)]\ncount = 0\nfor _ in range(q):\n    (r, c) = list(map(int, input().strip().split()))\n    (r, c) = (r - 1, c - 1)\n    if maze[r][c] == 1:\n        maze[r][c] = 0\n        if maze[1 - r][c] == 0:\n            count += 1\n        if c != 0:\n            if maze[1 - r][c - 1] == 0:\n                count += 1\n        if c != n - 1:\n            if maze[1 - r][c + 1] == 0:\n                count += 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        maze[r][c] = 1\n        if maze[1 - r][c] == 0:\n            count -= 1\n        if c != 0:\n            if maze[1 - r][c - 1] == 0:\n                count -= 1\n        if c != n - 1:\n            if maze[1 - r][c + 1] == 0:\n                count -= 1\n        if count == 0:\n            print('Yes')\n        else:\n            print('No')", "(n, q) = map(int, input().split())\nd = {}\nblocked = 0\nfor i in range(q):\n    (a, b) = map(int, input().split())\n    if (a, b) in d:\n        x = 1\n        del d[a, b]\n    else:\n        x = -1\n        d[a, b] = 1\n    a = a % 2 + 1\n    for j in range(-1, 2):\n        if (a, b + j) in d:\n            blocked += x\n    if blocked != 0:\n        print('No')\n    else:\n        print('Yes')", "(n, q) = [int(i) for i in input().split()]\nl = [[0, 0] for i in range(n)]\ns = set()\nfor i in range(q):\n    (x, y) = [int(i) - 1 for i in input().split()]\n    if l[y][x]:\n        l[y][x] = 0\n        if y in s:\n            a = y - 1\n            b = x ^ 1\n            if l[a][x] == 0 or l[a][b] == l[y][b] == 0:\n                s.remove(y)\n        if y + 1 in s and y + 1 < n and (l[y + 1][x] == 0):\n            s.remove(y + 1)\n    else:\n        l[y][x] = 1\n        if y not in s and y > 0:\n            a = y - 1\n            b = x ^ 1\n            if l[a][b] == 1 or l[y][b] == 1:\n                s.add(y)\n        if y + 1 not in s and y + 1 < n:\n            a = y + 1\n            b = x ^ 1\n            if l[a][b] == 1 or l[y][b] == 1:\n                s.add(y + 1)\n    print('No' if s else 'Yes')", "(n, q) = map(int, input().split())\ntrack = [[0 for _ in range(n + 1)] for _ in range(3)]\ns = set()\nis_safe = 0\nfor _ in range(q):\n    (ri, ci) = map(int, input().split())\n    change = +1 if track[ri][ci] == 1 else -1\n    track[ri][ci] = 1 - track[ri][ci]\n    for i in range(-1, 2):\n        if ci + i > 0 and ci + i <= n and (track[3 - ri][ci + i] == 1):\n            is_safe += change\n    if is_safe == 0:\n        print('Yes')\n    else:\n        print('No')", "(n, q) = list(map(int, input().strip().split()))\na = []\nfor i in range(n):\n    a.append([0, 0])\nbl = 0\nfor i in range(q):\n    (b, c) = list(map(int, input().strip().split()))\n    if a[c - 1][b - 1] == 0:\n        a[c - 1][b - 1] = 1\n        if a[c - 1][abs(b - 1 - 1)] == 1:\n            bl = bl + 1\n        if c < n:\n            if a[c][abs(b - 1 - 1)] == 1:\n                bl = bl + 1\n        if c > 1:\n            if a[c - 2][abs(b - 1 - 1)] == 1:\n                bl = bl + 1\n    elif a[c - 1][b - 1] == 1:\n        a[c - 1][b - 1] = 0\n        if a[c - 1][abs(b - 1 - 1)] == 1:\n            bl = bl - 1\n        if c < n:\n            if a[c][abs(b - 1 - 1)] == 1:\n                bl = bl - 1\n        if c > 1:\n            if a[c - 2][abs(b - 1 - 1)] == 1:\n                bl = bl - 1\n    if bl == 0:\n        print('Yes')\n    else:\n        print('No')", "(N, Q) = map(int, input().split())\n(walls, lavas) = (0, set())\nfor q in range(Q):\n    (r, c) = map(lambda s: int(s) - 1, input().split())\n    nr = (r + 1) % 2\n    for dc in range(-1, 2):\n        nc = c + dc\n        if (nr, nc) in lavas:\n            walls += 1 if (r, c) not in lavas else -1\n    lavas.add((r, c)) if (r, c) not in lavas else lavas.remove((r, c))\n    print('Yes' if walls == 0 else 'No')", "(n, q) = map(int, input().split())\nmaze = [[], [False] * (n + 2), [False] * (n + 2)]\nblocked = set()\nwhile q:\n    q -= 1\n    (x, y) = map(int, input().split())\n    maze[x][y] = not maze[x][y]\n    if maze[x][y]:\n        if maze[3 - x][y - 1]:\n            blocked.add(f'{3 - x}{y - 1}{x}{y}')\n        if maze[3 - x][y]:\n            if x == 1:\n                blocked.add(f'{x}{y}{3 - x}{y}')\n            elif x == 2:\n                blocked.add(f'{3 - x}{y}{x}{y}')\n        if maze[3 - x][y + 1]:\n            blocked.add(f'{x}{y}{3 - x}{y + 1}')\n    else:\n        blocked.discard(f'{3 - x}{y - 1}{x}{y}')\n        blocked.discard(f'{3 - x}{y}{x}{y}')\n        blocked.discard(f'{x}{y}{3 - x}{y}')\n        blocked.discard(f'{x}{y}{3 - x}{y + 1}')\n    print('No' if len(blocked) else 'Yes')", "(n, q) = map(int, input().split())\nar = [[0] * n for i in range(2)]\nk = 0\nfor rc in range(q):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    te = 1 if ar[x][y] == 0 else -1\n    ar[x][y] ^= 1\n    for i in range(-1, 2):\n        if i + y >= 0 and i + y < n and (ar[x ^ 1][y + i] == 1):\n            k += te\n    if not k:\n        print('Yes')\n    else:\n        print('No')"]