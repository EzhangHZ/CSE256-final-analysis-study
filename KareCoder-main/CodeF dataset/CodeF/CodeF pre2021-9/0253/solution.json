["import fileinput\n\ndef main():\n    it = fileinput.input()\n    num_cases = int(next(it))\n    for i in range(num_cases):\n        next(it)\n        (k, _, _) = list(map(int, next(it).split()))\n        a = list(map(int, next(it).split()))\n        b = list(map(int, next(it).split()))\n        i = 0\n        j = 0\n        actions = []\n        has_sequence = True\n        a_len = len(a)\n        b_len = len(b)\n        while True:\n            if a_len == i and b_len == j:\n                break\n            if i < a_len and a[i] <= k:\n                actions.append(a[i])\n                if a[i] == 0:\n                    k += 1\n                i += 1\n            elif j < b_len and b[j] <= k:\n                actions.append(b[j])\n                if b[j] == 0:\n                    k += 1\n                j += 1\n            else:\n                has_sequence = False\n                break\n        if has_sequence:\n            print(' '.join(map(str, actions)))\n        else:\n            print(-1)\nmain()", "def solve(k, n, m, a, b):\n    i = 0\n    j = 0\n    s = []\n    for _ in range(n + m):\n        if i < n and a[i] == 0:\n            s.append(a[i])\n            i += 1\n            k += 1\n            continue\n        if j < m and b[j] == 0:\n            s.append(b[j])\n            j += 1\n            k += 1\n            continue\n        if i < n and a[i] <= k:\n            s.append(a[i])\n            i += 1\n            continue\n        if j < m and b[j] <= k:\n            s.append(b[j])\n            j += 1\n            continue\n        return -1\n    return ' '.join(map(str, s))\nt = int(input())\nfor i in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(k, n, m, a, b))", "def read_ints():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    input()\n    (k, n, m) = tuple(read_ints())\n    a = read_ints()\n    b = read_ints()\n    indA = 0\n    indB = 0\n    res = []\n    while indA != n or indB != m:\n        if indA == n:\n            cand = b[indB]\n            indB += 1\n        elif indB == m:\n            cand = a[indA]\n            indA += 1\n        elif a[indA] < b[indB]:\n            cand = a[indA]\n            indA += 1\n        else:\n            cand = b[indB]\n            indB += 1\n        if cand > k:\n            print(-1)\n            return\n        if cand == 0:\n            k += 1\n        res.append(cand)\n    print(' '.join([str(x) for x in res]))\nt = int(input())\nfor i in range(t):\n    solve()", "def res(k):\n    ans = []\n    first = 0\n    second = 0\n    while first < n or second < m:\n        if first < n and a[first] <= k:\n            ans.append(a[first])\n            if a[first] == 0:\n                k += 1\n            first += 1\n        elif second < m and b[second] <= k:\n            ans.append(b[second])\n            if b[second] == 0:\n                k += 1\n            second += 1\n        else:\n            print(-1)\n            break\n    else:\n        print(' '.join(map(str, ans)))\nfor t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res(k)", "def solve(k, A, B):\n    n = len(A)\n    m = len(B)\n    (i, j) = (0, 0)\n    res = []\n    for _ in range(n + m):\n        if i < n and (A[i] == 0 or A[i] <= k):\n            if A[i] == 0:\n                k += 1\n            res.append(A[i])\n            i += 1\n        elif j < m and (B[j] == 0 or B[j] <= k):\n            if B[j] == 0:\n                k += 1\n            res.append(B[j])\n            j += 1\n        else:\n            return [-1]\n    return res\nt = int(input())\nfor _ in range(t):\n    _ = input()\n    (k, n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    print(' '.join((str(x) for x in solve(k, A, B))))", "def solve(k, n, m, mono, poly):\n    (i, j) = (0, 0)\n    seq = []\n    while i < n and j < m:\n        if mono[i] == 0:\n            k += 1\n            seq.append(str(mono[i]))\n            i += 1\n        elif mono[i] <= k:\n            seq.append(str(mono[i]))\n            i += 1\n        elif poly[j] == 0:\n            k += 1\n            seq.append(str(poly[j]))\n            j += 1\n        elif poly[j] <= k:\n            seq.append(str(poly[j]))\n            j += 1\n        else:\n            return -1\n    while i < n:\n        if mono[i] == 0:\n            k += 1\n            seq.append(str(mono[i]))\n            i += 1\n        elif mono[i] <= k:\n            seq.append(str(mono[i]))\n            i += 1\n        else:\n            return -1\n    while j < m:\n        if poly[j] == 0:\n            k += 1\n            seq.append(str(poly[j]))\n            j += 1\n        elif poly[j] <= k:\n            seq.append(str(poly[j]))\n            j += 1\n        else:\n            return -1\n    return ' '.join(seq)\nfor _ in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    mono = list(map(int, input().split()))\n    poly = list(map(int, input().split()))\n    print(solve(k, n, m, mono, poly))", "def work(input):\n    result = []\n    (k_start, a_count, b_count) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max_row = k_start\n    ia = 0\n    ib = 0\n    while 1:\n        if ia >= a_count and ib >= b_count:\n            break\n        if ia < a_count:\n            if a[ia] == 0:\n                result.append(0)\n                ia += 1\n                max_row += 1\n                continue\n            elif max_row >= a[ia]:\n                result.append(a[ia])\n                ia += 1\n                continue\n        if ib >= b_count:\n            return '-1'\n        if b[ib] == 0:\n            result.append(b[ib])\n            ib += 1\n            max_row += 1\n            continue\n        else:\n            if b[ib] > max_row:\n                return '-1'\n            result.append(b[ib])\n            ib += 1\n    if len(result) == 0:\n        return '-1'\n    if len(result) == 1:\n        return str(result[0])\n    return ' '.join(map(str, result))\n\ndef main(input, print):\n    toPrint = []\n    t = int(input())\n    for _ in range(t):\n        input()\n        r = work(input)\n        toPrint.append(r)\n    print('\\n'.join(toPrint))\nmain(input, print)", "import sys\nfrom string import ascii_lowercase as alph\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' '):\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef solve():\n    input()\n    (k, _, _) = map(int, input().split())\n    a = list(map(int, input().split()))[::-1]\n    b = list(map(int, input().split()))[::-1]\n    out = []\n    while a or b:\n        if a and a[-1] == 0:\n            out.append(a.pop())\n            k += 1\n        elif b and b[-1] == 0:\n            out.append(b.pop())\n            k += 1\n        elif a and a[-1] <= k:\n            out.append(a.pop())\n        elif b and b[-1] <= k:\n            out.append(b.pop())\n        else:\n            print(-1)\n            break\n    else:\n        print(*out)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef solve():\n    k = input()\n    (k, n, m) = intlist()\n    a = intlist()\n    b = intlist()\n    c = 0\n    d = 0\n    ans = []\n    while c < n or d < m:\n        if c < n:\n            if a[c] == 0:\n                ans.append(str(a[c]))\n                c += 1\n                k += 1\n                continue\n            elif a[c] <= k:\n                ans.append(str(a[c]))\n                c += 1\n                continue\n            elif d == m:\n                return -1\n        if d < m:\n            if b[d] == 0:\n                ans.append(str(b[d]))\n                d += 1\n                k += 1\n                continue\n            if b[d] <= k:\n                ans.append(str(b[d]))\n                d += 1\n                continue\n            else:\n                return -1\n    return printjoin(ans)\n    return ''\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "def f(k):\n    ans = []\n    first = 0\n    second = 0\n    while first < n or second < m:\n        if first < n and a[first] <= k:\n            ans.append(a[first])\n            if a[first] == 0:\n                k += 1\n            first += 1\n        elif second < m and b[second] <= k:\n            ans.append(b[second])\n            if b[second] == 0:\n                k += 1\n            second += 1\n        else:\n            print(-1)\n            break\n    else:\n        print(' '.join(map(str, ans)))\nfor t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f(k)", "t = int(input())\n\ndef solve(k):\n    (i, j) = (0, 0)\n    is_stuck = False\n    sequence = []\n    while not is_stuck and i < n and (j < m):\n        if A[i] <= k:\n            k += A[i] == 0\n            sequence.append(str(A[i]))\n            i += 1\n        elif B[j] <= k:\n            k += B[j] == 0\n            sequence.append(str(B[j]))\n            j += 1\n        else:\n            is_stuck = True\n    while not is_stuck and i < n:\n        if A[i] <= k:\n            k += A[i] == 0\n            sequence.append(str(A[i]))\n            i += 1\n        else:\n            is_stuck = True\n    while not is_stuck and j < m:\n        if B[j] <= k:\n            k += B[j] == 0\n            sequence.append(str(B[j]))\n            j += 1\n        else:\n            is_stuck = True\n    return -1 if is_stuck else ' '.join(sequence)\nfor _ in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = solve(k)\n    print(ans)", "def fun(mon, pol, k):\n    n = len(mon)\n    m = len(pol)\n    i = 0\n    j = 0\n    ans = ''\n    while i < n or j < m:\n        flag = False\n        if i < n:\n            if mon[i] == 0:\n                ans += str(mon[i]) + ' '\n                i += 1\n                k += 1\n                flag = True\n            elif mon[i] <= k:\n                ans += str(mon[i]) + ' '\n                i += 1\n                flag = True\n        if j < m:\n            if pol[j] == 0:\n                ans += str(pol[j]) + ' '\n                j += 1\n                k += 1\n                flag = True\n            elif pol[j] <= k:\n                ans += str(pol[j]) + ' '\n                j += 1\n                flag = True\n        if not flag:\n            return -1\n    return ans\nt = int(input())\nfor i in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    mon = list(map(int, input().split()))\n    pol = list(map(int, input().split()))\n    print(fun(mon, pol, k))", "def solution(k, a, b):\n    n = len(a)\n    m = len(b)\n    (i, j) = (0, 0)\n    result = []\n    for _ in range(m + n):\n        if i < n and (a[i] <= k or a[i] == 0):\n            if a[i] == 0:\n                k += 1\n            result.append(a[i])\n            i += 1\n        elif j < m and (b[j] <= k or b[j] == 0):\n            if b[j] == 0:\n                k += 1\n            result.append(b[j])\n            j += 1\n        else:\n            return [-1]\n    return result\nfor _ in range(int(input())):\n    _ = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(' '.join((str(x) for x in solution(k, a, b))))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    d = []\n    (i, j) = (0, 0)\n    while i < n or j < m:\n        if i < n and w[i] <= k:\n            if w[i] == 0:\n                k += 1\n            d.append(w[i])\n            i += 1\n        elif j < m and s[j] <= k:\n            if s[j] == 0:\n                k += 1\n            d.append(s[j])\n            j += 1\n        else:\n            d = [-1]\n            break\n    print(' '.join(map(str, d)))", "def solve(K, n, m, a, b):\n    i = 0\n    j = 0\n    k = 0\n    res = [0] * (n + m)\n    while i < len(a) and j < len(b):\n        if a[i] == 0 or a[i] <= K:\n            res[k] = a[i]\n            if a[i] == 0:\n                K += 1\n            k += 1\n            i += 1\n        elif b[j] == 0 or b[j] <= K:\n            res[k] = b[j]\n            if b[j] == 0:\n                K += 1\n            k += 1\n            j += 1\n        else:\n            return -1\n    while i < len(a):\n        if a[i] == 0 or a[i] <= K:\n            res[k] = a[i]\n            if a[i] == 0:\n                K += 1\n            k += 1\n            i += 1\n        else:\n            return -1\n    while j < len(b):\n        if b[j] == 0 or b[j] <= K:\n            res[k] = b[j]\n            if b[j] == 0:\n                K += 1\n            k += 1\n            j += 1\n        else:\n            return -1\n    return ' '.join(map(str, res))\nt = int(input())\nfor i in range(t):\n    input()\n    (K, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(K, n, m, a, b))", "def task():\n    input()\n    (k, n, m) = [int(x) for x in input().split()]\n    (arr1, arr2) = ([int(x) for x in input().split()], [int(x) for x in input().split()])\n    (L1, L2) = (len(arr1), len(arr2))\n    (i, j) = (0, 0)\n    inf = float('inf')\n    ans = []\n    while i != L1 or j != L2:\n        if i != L1 and arr1[i] == 0:\n            k += 1\n            i += 1\n            ans.append(0)\n        elif j != L2 and arr2[j] == 0:\n            k += 1\n            j += 1\n            ans.append(0)\n        else:\n            x1 = arr1[i] if i != L1 else inf\n            x2 = arr2[j] if j != L2 else inf\n            if x1 <= k:\n                i += 1\n                ans.append(x1)\n            elif x2 <= k:\n                j += 1\n                ans.append(x2)\n            else:\n                return -1\n    return ' '.join([str(x) for x in ans])\nT = int(input())\nfor _ in range(T):\n    print(task())", "import sys\n\ndef restore(n, m, k):\n    goodSeq = []\n    nIdx = 0\n    mIdx = 0\n    while nIdx < len(n) or mIdx < len(m):\n        if mIdx < len(m) and m[mIdx] == 0:\n            k += 1\n            goodSeq.append(m[mIdx])\n            mIdx += 1\n        elif nIdx < len(n) and n[nIdx] == 0:\n            k += 1\n            goodSeq.append(n[nIdx])\n            nIdx += 1\n        elif mIdx < len(m) and m[mIdx] <= k:\n            goodSeq.append(m[mIdx])\n            mIdx += 1\n        elif nIdx < len(n) and n[nIdx] <= k:\n            goodSeq.append(n[nIdx])\n            nIdx += 1\n        else:\n            return ['-1']\n    return goodSeq\ncasos = int(sys.stdin.readline().rstrip('\\n'))\nfor i in range(casos):\n    blank = sys.stdin.readline().rstrip('\\n').split(' ')\n    (k, nNum, mNum) = sys.stdin.readline().rstrip('\\n').split(' ')\n    n = sys.stdin.readline().rstrip('\\n').split(' ')\n    n = list(map(int, n))\n    m = sys.stdin.readline().rstrip('\\n').split(' ')\n    m = list(map(int, m))\n    k = int(k)\n    ans = restore(n, m, k)\n    ans = list(map(str, ans))\n    sys.stdout.write(' '.join(ans) + '\\n')", "def check_pair_programming(num_lines):\n    num_lines = int(num_lines)\n    for i in range(num_lines):\n        emptyline = input()\n        int_line = input().split()\n        (k, n, m) = (int(int_line[0]), int(int_line[1]), int(int_line[2]))\n        list1 = input().split()\n        list1 = [int(x) for x in list1]\n        list2 = input().split()\n        list2 = [int(x) for x in list2]\n        res = restore_order(k, list1, list2)\n        print(res)\n\ndef restore_order(k, seq1, seq2):\n    i = 0\n    j = 0\n    final_seq = []\n    prev_length = len(final_seq)\n    while i < len(seq1) or j < len(seq2):\n        new_length = prev_length\n        if i < len(seq1) and seq1[i] == 0:\n            final_seq.append(str(seq1[i]))\n            new_length += 1\n            k += 1\n            i += 1\n        elif i < len(seq1) and seq1[i] <= k:\n            final_seq.append(str(seq1[i]))\n            new_length += 1\n            i += 1\n        if j < len(seq2) and seq2[j] == 0:\n            final_seq.append(str(seq2[j]))\n            new_length += 1\n            k += 1\n            j += 1\n        elif j < len(seq2) and seq2[j] <= k:\n            final_seq.append(str(seq2[j]))\n            new_length += 1\n            j += 1\n        if prev_length == new_length:\n            return -1\n        prev_length = new_length\n    return ' '.join(final_seq)\nnum_lines = input()\ncheck_pair_programming(num_lines)", "t = int(input())\nfor i in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    i = 0\n    j = 0\n    res = []\n    valid = True\n    while i < n and j < m:\n        if a[i] == 0:\n            res.append(0)\n            i += 1\n            k += 1\n        elif b[j] == 0:\n            res.append(0)\n            j += 1\n            k += 1\n        elif k >= a[i]:\n            res.append(a[i])\n            i += 1\n        elif k >= b[j]:\n            res.append(b[j])\n            j += 1\n        else:\n            valid = False\n            break\n    if not valid:\n        print(-1)\n        continue\n    while i < n:\n        if a[i] == 0:\n            res.append(0)\n            k += 1\n        elif k >= a[i]:\n            res.append(a[i])\n        else:\n            valid = False\n            break\n        i += 1\n    while j < m:\n        if b[j] == 0:\n            res.append(0)\n            k += 1\n        elif k >= b[j]:\n            res.append(b[j])\n        else:\n            valid = False\n            break\n        j += 1\n    if valid:\n        print(' '.join(map(str, res)))\n    else:\n        print(-1)", "import math\n\ndef solve():\n    x = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    q = a.count(0) + b.count(0)\n    index_a = 0\n    index_b = 0\n    ans = []\n    while index_a + index_b < m + n:\n        while index_a < n and a[index_a] == 0:\n            ans.append(0)\n            k += 1\n            index_a += 1\n        while index_b < m and b[index_b] == 0:\n            ans.append(0)\n            k += 1\n            index_b += 1\n        if index_a < n and index_b < m:\n            if min(a[index_a], b[index_b]) > k:\n                return '-1'\n            if a[index_a] <= b[index_b]:\n                ans.append(a[index_a])\n                index_a += 1\n            else:\n                ans.append(b[index_b])\n                index_b += 1\n        elif index_a < n:\n            if a[index_a] > k:\n                return '-1'\n            ans.append(a[index_a])\n            index_a += 1\n        elif index_b < m:\n            if b[index_b] > k:\n                return '-1'\n            ans.append(b[index_b])\n            index_b += 1\n    return ' '.join(map(str, ans))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "T = int(input())\nfor t in range(T):\n    z = str(input())\n    knm = list(map(int, input().split()))\n    (k, n, m) = (knm[0], knm[1], knm[2])\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (i, j) = (0, 0)\n    sol = []\n    flag = 0\n    while i != n or j != m:\n        if i != n and a[i] == 0:\n            sol.append(0)\n            k += 1\n            i += 1\n        elif j != m and b[j] == 0:\n            sol.append(0)\n            k += 1\n            j += 1\n        elif i != n and a[i] <= k:\n            sol.append(a[i])\n            i += 1\n        elif j != m and b[j] <= k:\n            sol.append(b[j])\n            j += 1\n        else:\n            print(-1)\n            flag = 1\n            break\n    if not flag:\n        print(' '.join(map(str, sol)))", "for _ in range(int(input())):\n    k = input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    L = []\n    lines = a.count(0) + b.count(0) + k\n    (i, j) = (0, 0)\n    d = 0\n    if max(a) <= lines and max(b) <= lines:\n        Test = True\n        while Test:\n            if i < n:\n                if a[i] > k:\n                    d += 1\n                while a[i] <= k:\n                    L.append(a[i])\n                    if a[i] == 0:\n                        k += 1\n                        d -= 1\n                    i += 1\n                    if i >= n:\n                        break\n            if j < m:\n                if b[j] > k:\n                    d += 1\n                while b[j] <= k:\n                    L.append(b[j])\n                    if b[j] == 0:\n                        k += 1\n                        d -= 1\n                    j += 1\n                    if j >= m:\n                        break\n            if i >= n and j >= m or d >= 2:\n                break\n        if Test and d < 2:\n            L = list(map(str, L))\n            L = ' '.join(L)\n            print(L)\n        else:\n            print(-1)\n    else:\n        print(-1)", "for _ in range(int(input().strip())):\n    t = input().strip()\n    (k, n, m) = map(int, input().strip().split())\n    A = list(map(int, input().strip().split()))\n    B = list(map(int, input().strip().split()))\n    (lineCount, a, b) = (k, 0, 0)\n    flag = True\n    seq = []\n    while flag and (a < n or b < m):\n        if a < n and A[a] == 0:\n            seq.append('0')\n            lineCount += 1\n            a += 1\n        elif a < n and A[a] <= lineCount:\n            seq.append(str(A[a]))\n            a += 1\n        elif b < m and B[b] == 0:\n            seq.append('0')\n            lineCount += 1\n            b += 1\n        elif b < m and B[b] <= lineCount:\n            seq.append(str(B[b]))\n            b += 1\n        else:\n            flag = False\n    if flag:\n        print(' '.join(seq))\n    else:\n        print('-1')", "import sys\n\ndef restore(n, m, k):\n    goodSeq = []\n    nIdx = 0\n    mIdx = 0\n    while nIdx < len(n) or mIdx < len(m):\n        if mIdx < len(m) and m[mIdx] == 0:\n            k += 1\n            goodSeq.append(m[mIdx])\n            mIdx += 1\n        elif nIdx < len(n) and n[nIdx] == 0:\n            k += 1\n            goodSeq.append(n[nIdx])\n            nIdx += 1\n        elif mIdx < len(m) and m[mIdx] <= k:\n            goodSeq.append(m[mIdx])\n            mIdx += 1\n        elif nIdx < len(n) and n[nIdx] <= k:\n            goodSeq.append(n[nIdx])\n            nIdx += 1\n        else:\n            return ['-1']\n    return goodSeq\ncasos = int(sys.stdin.readline().rstrip('\\n'))\nfor i in range(casos):\n    blank = sys.stdin.readline().rstrip('\\n').split(' ')\n    (k, nNum, mNum) = sys.stdin.readline().rstrip('\\n').split(' ')\n    n = sys.stdin.readline().rstrip('\\n').split(' ')\n    n = list(map(int, n))\n    m = sys.stdin.readline().rstrip('\\n').split(' ')\n    m = list(map(int, m))\n    k = int(k)\n    ans = restore(n, m, k)\n    ans = list(map(str, ans))\n    sys.stdout.write(' '.join(ans) + '\\n')", "from collections import deque\nimport sys\ninput = sys.stdin.readline\nT = int(input())\ninput()\nfor _ in range(T):\n    (k, n, m) = map(int, input().split())\n    a = deque(map(int, input().split()))\n    b = deque(map(int, input().split()))\n    answer = []\n    flg = True\n    for _ in range(n + m):\n        if len(a) > 0 and a[0] <= k:\n            t = a.popleft()\n            answer.append(t)\n            if t == 0:\n                k += 1\n        elif len(b) > 0 and b[0] <= k:\n            t = b.popleft()\n            answer.append(t)\n            if t == 0:\n                k += 1\n        else:\n            flg = False\n            break\n    if flg:\n        print(' '.join(map(str, answer)))\n    else:\n        print(-1)\n    input()", "t = int(input())\nfor _ in range(t):\n    l = input()\n    (k, n, m) = map(int, input().split())\n    bunchn = []\n    bunchn.extend(map(int, input().split()))\n    bunchm = []\n    bunchm.extend(map(int, input().split()))\n    f = True\n    seq = ''\n    indn = indm = 0\n    for i in range(0, n + m):\n        if indn < n and bunchn[indn] == 0:\n            k += 1\n            seq += '0 '\n            indn += 1\n        elif indm < m and bunchm[indm] == 0:\n            k += 1\n            seq += '0 '\n            indm += 1\n        elif indn < n and bunchn[indn] <= k:\n            seq += str(bunchn[indn]) + ' '\n            indn += 1\n        elif indm < m and bunchm[indm] <= k:\n            seq += str(bunchm[indm]) + ' '\n            indm += 1\n        else:\n            f = False\n            break\n    if not f:\n        print(-1)\n    else:\n        print(seq.strip())", "import sys\n\ndef process(k, n, m, n_actions, m_actions):\n    toreturn = []\n    m_counter = 0\n    for j in range(n):\n        if n_actions[j] == 0:\n            toreturn.append(0)\n            k += 1\n        elif n_actions[j] <= k:\n            toreturn.append(n_actions[j])\n        else:\n            while k < n_actions[j] and m_counter < m:\n                if m_actions[m_counter] == 0:\n                    toreturn.append(0)\n                    k += 1\n                    m_counter += 1\n                elif m_actions[m_counter] <= k:\n                    toreturn.append(m_actions[m_counter])\n                    m_counter += 1\n                else:\n                    return -1\n            if n_actions[j] == k:\n                toreturn.append(n_actions[j])\n            else:\n                return -1\n    for j in range(m_counter, m):\n        if m_actions[j] == 0:\n            toreturn.append(0)\n            k += 1\n        elif m_actions[j] <= k:\n            toreturn.append(m_actions[j])\n        else:\n            return -1\n    return toreturn\nn = int(input())\nfor i in range(n):\n    dummy = input()\n    (k, n, m) = [int(x) for x in input().split()]\n    n_actions = [int(x) for x in input().split()]\n    m_actions = [int(x) for x in input().split()]\n    save = process(k, n, m, n_actions, m_actions)\n    if isinstance(save, int):\n        print(-1)\n    else:\n        sys.stdout.write(' '.join(map(str, save)) + '\\n')", "def main():\n    t = int(input())\n    for _ in range(t):\n        input()\n        (k, n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        sequense = ''\n        indexA = 0\n        indexB = 0\n        while True:\n            if indexA == n and indexB == m:\n                break\n            if indexA < n and a[indexA] <= k and (a[indexA] != 0):\n                sequense += str(a[indexA]) + ' '\n                indexA += 1\n            elif indexB < m and b[indexB] <= k and (b[indexB] != 0):\n                sequense += str(b[indexB]) + ' '\n                indexB += 1\n            elif indexA < n and a[indexA] == 0:\n                sequense += str(a[indexA]) + ' '\n                indexA += 1\n                k += 1\n            elif indexB < m and b[indexB] == 0:\n                sequense += str(b[indexB]) + ' '\n                indexB += 1\n                k += 1\n            else:\n                sequense = '-1 '\n                break\n        print(sequense[:len(sequense) - 1])\nmain()", "import math\nimport heapq\nfrom collections import deque, Counter, defaultdict\nstring = ''\narray = []\n\ndef solve(lines, a, b):\n    (l, r) = (0, 0)\n    q = []\n    while l < len(a) or r < len(b):\n        if l != len(a) and a[l] <= lines:\n            q.append(a[l])\n            if a[l] == 0:\n                lines += 1\n            l += 1\n        elif r != len(b) and b[r] <= lines:\n            q.append(b[r])\n            if b[r] == 0:\n                lines += 1\n            r += 1\n        else:\n            return [-1]\n    return q\nncases = int(input())\nwhile ncases:\n    _ = input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = solve(k, a, b)\n    print(' '.join((str(i) for i in ans)))\n    ncases -= 1", "q = int(input())\nfor v in range(q):\n    p = input()\n    (x, y, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    ans = []\n    j = 0\n    f = 0\n    c = 0\n    while i < y or j < z:\n        if i < y:\n            if a[i] == 0:\n                x += 1\n                ans.append(a[i])\n                i += 1\n                continue\n            if a[i] <= x:\n                ans.append(a[i])\n                i += 1\n                continue\n        if j < z:\n            if b[j] == 0:\n                x += 1\n                ans.append(b[j])\n                j += 1\n                continue\n            if b[j] <= x:\n                ans.append(b[j])\n                j += 1\n                continue\n        print(-1)\n        f = 1\n        break\n    if f == 0:\n        print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    space = input()\n    (k, n, m) = list(map(int, input().split()))\n    i = j = 0\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    history = []\n    while i < n or j < m:\n        if i < n and a[i] > 0 and (a[i] <= k):\n            history.append(a[i])\n            i += 1\n        elif i < n and a[i] == 0:\n            k += 1\n            history.append(0)\n            i += 1\n        elif j < m and b[j] > 0 and (b[j] <= k):\n            history.append(b[j])\n            j += 1\n        elif j < m and b[j] == 0:\n            k += 1\n            history.append(0)\n            j += 1\n        else:\n            break\n    if i == n and j == m:\n        print(' '.join(map(str, history)))\n    else:\n        print(-1)", "for t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    j = 0\n    res = []\n    while i != n or j != m:\n        if i != n and a[i] <= k:\n            res.append(a[i])\n            if a[i] == 0:\n                k += 1\n            i += 1\n        elif j != m and b[j] <= k:\n            res.append(b[j])\n            if b[j] == 0:\n                k += 1\n            j += 1\n        else:\n            res = [-1]\n            break\n    print(' '.join(map(str, res)))", "for i in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))[::-1]\n    b = list(map(int, input().split(' ')))[::-1]\n    idx = 0\n    ans = []\n    while idx < n + m and (a or b):\n        if a and a[-1] == 0:\n            k += 1\n            ans.append('0')\n            a.pop()\n        elif a and a[-1] > 0 and (a[-1] <= k):\n            ans.append(str(a[-1]))\n            a.pop()\n        elif b and b[-1] == 0:\n            k += 1\n            ans.append('0')\n            b.pop()\n        elif b and b[-1] > 0 and (b[-1] <= k):\n            ans.append(str(b[-1]))\n            b.pop()\n        else:\n            ans = -1\n            break\n        idx += 1\n    if ans == -1:\n        print(-1)\n    elif len(ans) != m + n:\n        print(-1)\n    else:\n        print(' '.join(ans))", "def solve(k, tab1, tab2):\n    res = []\n    nbLine = k\n    while len(tab1) > 0 or len(tab2) > 0:\n        choice1 = 500\n        choice2 = 500\n        if tab1:\n            choice1 = tab1[0]\n        if tab2:\n            choice2 = tab2[0]\n        if choice1 == 0:\n            res.append(0)\n            nbLine += 1\n            del tab1[0]\n        elif choice2 == 0:\n            res.append(0)\n            nbLine += 1\n            del tab2[0]\n        elif min(choice1, choice2) <= nbLine:\n            if choice1 <= nbLine:\n                res.append(choice1)\n                del tab1[0]\n            elif choice2 <= nbLine:\n                res.append(choice2)\n                del tab2[0]\n        else:\n            return [-1]\n    return res\nt = int(input())\nfor _ in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    tab1 = list(map(int, input().split()))\n    tab2 = list(map(int, input().split()))\n    res = solve(k, tab1, tab2)\n    print(' '.join(list(map(str, res))))", "for _ in range(int(input())):\n    weojov = input()\n    klist = [int(x) for x in input().split()]\n    k = klist[0]\n    n = klist[1]\n    m = klist[2]\n    a = 0\n    b = 0\n    mono = [int(x) for x in input().split()]\n    poly = [int(x) for x in input().split()]\n    ans = []\n    for i in range(m + n):\n        if a < n:\n            if mono[a] <= k:\n                if mono[a] == 0:\n                    k += 1\n                ans.append(str(mono[a]))\n                a += 1\n                continue\n            elif b < m:\n                if poly[b] <= k:\n                    if poly[b] == 0:\n                        k += 1\n                    ans.append(str(poly[b]))\n                    b += 1\n                    continue\n                else:\n                    ans = ['-1']\n                    break\n            else:\n                ans = ['-1']\n                break\n        elif b < m:\n            if poly[b] <= k:\n                if poly[b] == 0:\n                    k += 1\n                ans.append(str(poly[b]))\n                b += 1\n                continue\n            else:\n                ans = ['-1']\n                break\n        else:\n            ans = ['-1']\n            break\n    print(' '.join(ans))", "_ = int(input())\nfor __ in range(_):\n    ___ = input()\n    (k, n, m) = map(int, input().split())\n    t11 = list(map(int, input().split()))\n    t22 = list(map(int, input().split()))\n    t1 = t11[::-1]\n    t2 = t22[::-1]\n    w = []\n    f = False\n    for z in range(n + m):\n        if t1 and t2:\n            if t1[-1] <= t2[-1]:\n                tmp_item = t1.pop()\n            else:\n                tmp_item = t2.pop()\n        elif not t1:\n            tmp_item = t2.pop()\n        elif not t2:\n            tmp_item = t1.pop()\n        if tmp_item > k:\n            f = True\n            break\n        else:\n            w.append(str(tmp_item))\n            if tmp_item == 0:\n                k += 1\n    if f:\n        print('-1')\n    else:\n        print(' '.join(w))", "for _ in range(int(input())):\n    a = input()\n    (k, n, m) = [int(a) for a in input().split()]\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    j = 0\n    ch = ''\n    B = True\n    while (i < n or j < m) and B:\n        B = False\n        if i < n and a[i] <= k:\n            ch += ' ' + str(a[i])\n            if a[i] == 0:\n                k += 1\n            i += 1\n            B = True\n        if j < m and b[j] <= k:\n            ch += ' ' + str(b[j])\n            if b[j] == 0:\n                k += 1\n            j += 1\n            B = True\n    if B == False:\n        print('-1')\n    else:\n        print(ch[1:])", "for _ in range(int(input())):\n    jump = input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    L = []\n    lines = a.count(0) + b.count(0) + k\n    (i, j) = (0, 0)\n    d = 0\n    if max(a) <= lines and max(b) <= lines:\n        Test = True\n        while Test:\n            if i < n:\n                if a[i] > k:\n                    d += 1\n                while a[i] <= k:\n                    L.append(a[i])\n                    if a[i] == 0:\n                        k += 1\n                        d -= 1\n                    i += 1\n                    if i >= n:\n                        break\n            if j < m:\n                if b[j] > k:\n                    d += 1\n                while b[j] <= k:\n                    L.append(b[j])\n                    if b[j] == 0:\n                        k += 1\n                        d -= 1\n                    j += 1\n                    if j >= m:\n                        break\n            if i >= n and j >= m or d >= 2:\n                break\n        if Test and d < 2:\n            L = list(map(str, L))\n            L = ' '.join(L)\n            print(L)\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nfor j in range(t):\n    s = input()\n    flag = 0\n    (k, n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    seq = ''\n    while n > 0 or m > 0:\n        if n > 0 and a[0] == 0:\n            seq += '0 '\n            k += 1\n            a.pop(0)\n            n -= 1\n        elif n > 0 and a[0] <= k:\n            seq += str(a[0]) + ' '\n            a.pop(0)\n            n -= 1\n        elif m > 0 and b[0] == 0:\n            seq += '0 '\n            b.pop(0)\n            k += 1\n            m -= 1\n        elif m > 0 and b[0] <= k:\n            seq += str(b[0]) + ' '\n            b.pop(0)\n            m -= 1\n        else:\n            flag = 1\n            print(-1)\n            break\n    if flag == 0:\n        print(seq)", "t = int(input())\nfor i in range(0, t):\n    emptyLine = input()\n    (k, n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    i = 0\n    j = 0\n    result = []\n    while i < n and j < m:\n        if A[i] < B[j]:\n            result.append(A[i])\n            i += 1\n        else:\n            result.append(B[j])\n            j += 1\n    while i < n:\n        result.append(A[i])\n        i += 1\n    while j < m:\n        result.append(B[j])\n        j += 1\n    count = k\n    result1 = 0\n    for i in result:\n        if i == 0:\n            count += 1\n        elif i > count:\n            result1 = -1\n    if result1 == 0:\n        result = [str(item) for item in result]\n        print(' '.join(result))\n    else:\n        print(-1)", "secuencias = int(input())\ninput()\nfor x in range(secuencias):\n    (k, n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    if x != secuencias - 1:\n        input()\n    (i, j) = (0, 0)\n    error = False\n    pasos = []\n    while i < n or j < m:\n        if i < n and j < m:\n            if a[i] == 0:\n                pasos.append(0)\n                i += 1\n                k += 1\n            elif b[j] == 0:\n                pasos.append(0)\n                j += 1\n                k += 1\n            elif a[i] < b[j] and a[i] <= k:\n                pasos.append(a[i])\n                i += 1\n            elif a[i] >= b[j] and b[j] <= k:\n                pasos.append(b[j])\n                j += 1\n            else:\n                print(-1)\n                error = True\n                break\n        elif i < n:\n            if a[i] == 0:\n                pasos.append(0)\n                i += 1\n                k += 1\n            elif a[i] <= k:\n                pasos.append(a[i])\n                i += 1\n            else:\n                print(-1)\n                error = True\n                break\n        elif j < m:\n            if b[j] == 0:\n                pasos.append(0)\n                j += 1\n                k += 1\n            elif b[j] <= k:\n                pasos.append(b[j])\n                j += 1\n            else:\n                print(-1)\n                error = True\n                break\n    if not error:\n        print(' '.join([str(int) for int in pasos]))", "t = int(input())\nfor i in range(t):\n    space = input()\n    (k, n, m) = [int(v) for v in input().split()]\n    w = [int(v) for v in input().split()][::-1]\n    z = [int(v) for v in input().split()][::-1]\n    res = []\n    while n > 0 and m > 0:\n        if w[-1] > k and z[-1] > k:\n            print(-1)\n            break\n        elif w[-1] == 0:\n            res.append(w.pop())\n            n -= 1\n            k += 1\n        elif z[-1] == 0:\n            res.append(z.pop())\n            m -= 1\n            k += 1\n        elif w[-1] <= z[-1]:\n            res.append(w.pop())\n            n -= 1\n        else:\n            res.append(z.pop())\n            m -= 1\n    else:\n        (iota, n) = (w + z, n + m)\n        while n:\n            if iota[-1] > k:\n                print(-1)\n                break\n            elif iota[-1] == 0:\n                k += 1\n                n -= 1\n                res.append(iota.pop())\n            else:\n                n -= 1\n                res.append(iota.pop())\n        else:\n            print(' '.join([str(v) for v in res]))", "t = int(input())\nfor i in range(t):\n    input()\n    (k, n, m) = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    b = list(map(int, input().rstrip().split()))\n    pa = 0\n    pb = 0\n    s = ''\n    flg = True\n    while pa < n and pb < m:\n        if a[pa] == 0:\n            k = k + 1\n            s = s + ' ' + str(a[pa])\n            pa = pa + 1\n        elif a[pa] <= k:\n            s = s + ' ' + str(a[pa])\n            pa = pa + 1\n        elif b[pb] == 0:\n            k = k + 1\n            s = s + ' ' + str(b[pb])\n            pb = pb + 1\n        elif b[pb] <= k:\n            s = s + ' ' + str(b[pb])\n            pb = pb + 1\n        else:\n            flg = False\n            break\n    while pa < n:\n        if a[pa] == 0:\n            k = k + 1\n            s = s + ' ' + str(a[pa])\n            pa = pa + 1\n        elif a[pa] <= k:\n            s = s + ' ' + str(a[pa])\n            pa = pa + 1\n        else:\n            flg = False\n            break\n    while pb < m:\n        if b[pb] == 0:\n            k = k + 1\n            s = s + ' ' + str(b[pb])\n            pb = pb + 1\n        elif b[pb] <= k:\n            s = s + ' ' + str(b[pb])\n            pb = pb + 1\n        else:\n            flg = False\n            break\n    if flg:\n        print(s.lstrip())\n    else:\n        print(-1)", "from bisect import bisect_left\nfor t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (ai, bi, res) = (0, 0, [])\n    good = True\n    while ai < len(a) and bi < len(b):\n        if a[ai] == 0:\n            res.append('0')\n            ai += 1\n            k += 1\n        elif b[bi] == 0:\n            res.append('0')\n            bi += 1\n            k += 1\n        elif a[ai] < b[bi]:\n            if a[ai] <= k:\n                res.append(str(a[ai]))\n                ai += 1\n            else:\n                good = False\n                break\n        elif b[bi] <= k:\n            res.append(str(b[bi]))\n            bi += 1\n        else:\n            good = False\n            break\n    while good and ai < len(a):\n        if a[ai] == 0:\n            res.append('0')\n            ai += 1\n            k += 1\n        elif a[ai] <= k:\n            res.append(str(a[ai]))\n            ai += 1\n        else:\n            good = False\n            break\n    while good and bi < len(b):\n        if b[bi] == 0:\n            res.append('0')\n            bi += 1\n            k += 1\n        elif b[bi] <= k:\n            res.append(str(b[bi]))\n            bi += 1\n        else:\n            good = False\n            break\n    if good:\n        print(' '.join(res))\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    _ = input()\n    (k, n, m) = tuple(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    b = tuple(map(int, input().split()))\n    order = []\n    i = 0\n    j = 0\n    while i + j < n + m:\n        if i < n and a[i] == 0:\n            order.append(a[i])\n            k += 1\n            i += 1\n        elif j < m and b[j] == 0:\n            order.append(b[j])\n            k += 1\n            j += 1\n        elif i < n and a[i] <= k:\n            order.append(a[i])\n            i += 1\n        elif j < m and b[j] <= k:\n            order.append(b[j])\n            j += 1\n        else:\n            order = [-1]\n            break\n    print(' '.join(map(str, order)))", "def f(k, List1, List2):\n    s = []\n    while List1 != [] or List2 != []:\n        if List1 == []:\n            b1 = List2[0]\n            if b1 == 0:\n                s += [0]\n                k += 1\n                List2 = List2[1:]\n            elif k < b1:\n                return [-1]\n            else:\n                s += [b1]\n                List2 = List2[1:]\n        elif List2 == []:\n            a1 = List1[0]\n            if a1 == 0:\n                s += [0]\n                k += 1\n                List1 = List1[1:]\n            elif k < a1:\n                return [-1]\n            else:\n                s += [a1]\n                List1 = List1[1:]\n        else:\n            a1 = List1[0]\n            b1 = List2[0]\n            if b1 == 0:\n                s += [0]\n                k += 1\n                List2 = List2[1:]\n            elif a1 == 0:\n                s += [0]\n                k += 1\n                List1 = List1[1:]\n            elif k >= a1:\n                s += [a1]\n                List1 = List1[1:]\n            elif k >= b1:\n                s += [b1]\n                List2 = List2[1:]\n            else:\n                return [-1]\n    else:\n        return s\nt = int(input())\nfor i in range(t):\n    space = input()\n    kmn = list(map(int, input().rstrip().split()))\n    k = kmn[0]\n    List1 = list(map(int, input().rstrip().split()))\n    List2 = list(map(int, input().rstrip().split()))\n    ans = f(k, List1, List2)\n    print(' '.join(map(str, ans)))", "T = int(input())\nwhile T > 0:\n    T -= 1\n    input()\n    (k, a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    buff = k\n    (ai, bi) = (0, 0)\n    failed = False\n    order = []\n    for i in range(a + b):\n        if ai < len(arr) and arr[ai] <= buff:\n            if arr[ai] == 0:\n                buff += 1\n            order.append(arr[ai])\n            ai += 1\n            continue\n        if bi < len(brr) and brr[bi] <= buff:\n            if brr[bi] == 0:\n                buff += 1\n            order.append(brr[bi])\n            bi += 1\n            continue\n        failed = True\n        break\n    if failed:\n        print(-1)\n    else:\n        print(' '.join(map(str, order)))", "t = int(input())\nfor zzz in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    (f, s) = (0, 0)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = ''\n    while f < n or s < m:\n        if f < n and a[f] == 0:\n            k += 1\n            f += 1\n            ans += '0 '\n            continue\n        if s < m and b[s] == 0:\n            k += 1\n            s += 1\n            ans += '0 '\n            continue\n        if f < n and a[f] <= k:\n            ans += str(a[f]) + ' '\n            f += 1\n            continue\n        if s < m and b[s] <= k:\n            ans += str(b[s]) + ' '\n            s += 1\n            continue\n        print(-1)\n        break\n    else:\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    _ = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    lst = [a, b]\n    i = 0\n    c = 0\n    s = []\n    ok = 1\n    while c < n + m and ok:\n        if not lst[i]:\n            i = not i\n        ne = lst[i][0]\n        if ne > k:\n            i = not i\n            if not lst[i] or lst[i][0] > k:\n                ok = 0\n                break\n            continue\n        if ne == 0:\n            k += 1\n        c += 1\n        s.append(lst[i].pop(0))\n    if not ok:\n        s = [-1]\n    print(' '.join(map(str, s)))", "t = int(input())\nfor _ in range(t):\n    input()\n    no_exist = False\n    res = []\n    (k, n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    for i in range(n + m):\n        if len(a) > 0 and (a[0] <= k or a[0] == 0):\n            if a[0] == 0:\n                k += 1\n            res.append(str(a.pop(0)))\n        elif len(b) > 0 and (b[0] <= k or b[0] == 0):\n            if b[0] == 0:\n                k += 1\n            res.append(str(b.pop(0)))\n        elif len(a) == 0 and len(b) == 0:\n            break\n        else:\n            no_exist = True\n    if no_exist:\n        print('-1')\n    else:\n        print(' '.join(res))", "t = int(input())\nq = []\nfor i in range(t):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    q.append([k, a, b])\nfor w in q:\n    k = w[0]\n    a = w[1]\n    b = w[2]\n    i = 0\n    j = 0\n    seq = []\n    temp1 = 0\n    temp2 = 0\n    while i < len(a) and j < len(b):\n        temp1 = i\n        temp2 = j\n        if a[i] == 0:\n            seq.append(a[i])\n            i += 1\n            k += 1\n        elif b[j] == 0:\n            seq.append(b[j])\n            j += 1\n            k += 1\n        elif a[i] <= k:\n            seq.append(a[i])\n            i += 1\n        elif b[j] <= k:\n            seq.append(b[j])\n            j += 1\n        if i == temp1 and j == temp2:\n            break\n    while i < len(a):\n        temp1 = i\n        if a[i] == 0:\n            seq.append(a[i])\n            i += 1\n            k += 1\n        elif a[i] <= k:\n            seq.append(a[i])\n            i += 1\n        if i == temp1:\n            break\n    while j < len(b):\n        temp2 = j\n        if b[j] == 0:\n            seq.append(b[j])\n            j += 1\n            k += 1\n        elif b[j] <= k:\n            seq.append(b[j])\n            j += 1\n        if temp2 == j:\n            break\n    if len(seq) == len(a) + len(b):\n        print(' '.join(map(str, seq)))\n    else:\n        print(-1)", "def main():\n    trials = int(input())\n    for t in range(trials):\n        input()\n        (k, n, m) = [int(num) for num in input().split(' ')]\n        nc = [int(num) for num in input().split(' ')]\n        mc = [int(num) for num in input().split(' ')]\n        order = list()\n        ni = 0\n        mi = 0\n        while len(order) < m + n:\n            if mi < m and mc[mi] == 0:\n                order.append(0)\n                mi += 1\n                continue\n            if ni < n and nc[ni] == 0:\n                order.append(0)\n                ni += 1\n                continue\n            if mi == m:\n                order.append(nc[ni])\n                ni += 1\n                continue\n            if ni == n or mc[mi] < nc[ni]:\n                order.append(mc[mi])\n                mi += 1\n                continue\n            if mi == m or nc[ni] <= mc[mi]:\n                order.append(nc[ni])\n                ni += 1\n                continue\n        lines = k\n        fail = False\n        for num in order:\n            if num == 0:\n                lines += 1\n            elif num > lines:\n                fail = True\n                break\n        if fail:\n            print('-1')\n        else:\n            print(' '.join([str(num) for num in order]))\nmain()", "t = int(input())\nq = []\nfor i in range(t):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    q.append([k, a, b])\nfor w in q:\n    k = w[0]\n    a = w[1]\n    b = w[2]\n    i = 0\n    j = 0\n    seq = []\n    temp1 = 0\n    temp2 = 0\n    while i < len(a) and j < len(b):\n        temp1 = i\n        temp2 = j\n        if a[i] == 0:\n            seq.append(a[i])\n            i += 1\n            k += 1\n        elif b[j] == 0:\n            seq.append(b[j])\n            j += 1\n            k += 1\n        elif a[i] <= k:\n            seq.append(a[i])\n            i += 1\n        elif b[j] <= k:\n            seq.append(b[j])\n            j += 1\n        if i == temp1 and j == temp2:\n            break\n    while i < len(a):\n        temp1 = i\n        if a[i] == 0:\n            seq.append(a[i])\n            i += 1\n            k += 1\n        elif a[i] <= k:\n            seq.append(a[i])\n            i += 1\n        if i == temp1:\n            break\n    while j < len(b):\n        temp2 = j\n        if b[j] == 0:\n            seq.append(b[j])\n            j += 1\n            k += 1\n        elif b[j] <= k:\n            seq.append(b[j])\n            j += 1\n        if temp2 == j:\n            break\n    if len(seq) == len(a) + len(b):\n        print(' '.join(map(str, seq)))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    _ = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    j = 0\n    c = 1\n    t = list()\n    while i < n or j < m:\n        if i < n and j < m:\n            if a[i] == 0:\n                t.append(a[i])\n                i += 1\n                k += 1\n            elif b[j] == 0:\n                t.append(b[j])\n                j += 1\n                k += 1\n            elif a[i] < b[j] and a[i] < k + 1:\n                t.append(a[i])\n                i += 1\n            elif b[j] <= a[i] and b[j] < k + 1:\n                t.append(b[j])\n                j += 1\n            else:\n                c = 0\n                break\n        elif i < n:\n            if a[i] == 0:\n                t.append(a[i])\n                i += 1\n                k += 1\n            elif a[i] < k + 1:\n                t.append(a[i])\n                i += 1\n            else:\n                c = 0\n                break\n        elif b[j] == 0:\n            t.append(b[j])\n            j += 1\n            k += 1\n        elif b[j] < k + 1:\n            t.append(b[j])\n            j += 1\n        else:\n            c = 0\n            break\n    if c == 1:\n        print(' '.join(map(str, t)))\n    else:\n        print(-1)", "cases = int(input())\nfor c in range(cases):\n    _ = input()\n    (k, *_) = [int(i) for i in input().split(' ')]\n    a = [int(i) for i in input().split(' ')]\n    b = [int(i) for i in input().split(' ')]\n    s = []\n    possible = True\n    while len(a) > 0 and len(b) > 0:\n        if a[0] <= k:\n            act = a.pop(0)\n            s.append(act)\n            if act == 0:\n                k += 1\n        elif b[0] <= k:\n            act = b.pop(0)\n            s.append(act)\n            if act == 0:\n                k += 1\n        else:\n            possible = False\n            break\n    if len(a) == 0:\n        for act in b:\n            if act <= k:\n                s.append(act)\n                if act == 0:\n                    k += 1\n            else:\n                possible = False\n                break\n    elif len(b) == 0:\n        for act in a:\n            if act <= k:\n                s.append(act)\n                if act == 0:\n                    k += 1\n            else:\n                possible = False\n                break\n    if possible:\n        s = [str(act) for act in s]\n        print(' '.join(s))\n    else:\n        print(-1)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    g = sys.stdin.readline()\n    (k, n, m) = map(lambda x: int(x), sys.stdin.readline().split())\n    n_a = list(map(lambda x: int(x), sys.stdin.readline().split()))\n    m_a = list(map(lambda x: int(x), sys.stdin.readline().split()))\n    i = 0\n    j = 0\n    res = []\n    while i < n or j < m:\n        if i < n:\n            if n_a[i] > k:\n                if j >= m or m_a[j] > k:\n                    res.append(-1)\n                    break\n                else:\n                    if m_a[j] == 0:\n                        k += 1\n                    res.append(m_a[j])\n                    j += 1\n            else:\n                if n_a[i] == 0:\n                    k += 1\n                res.append(n_a[i])\n                i += 1\n        elif m_a[j] > k:\n            res.append(-1)\n            break\n        else:\n            if m_a[j] == 0:\n                k += 1\n            res.append(m_a[j])\n            j += 1\n    if res[-1] == -1:\n        print(-1)\n    else:\n        print(' '.join(map(lambda x: str(x), res)))", "for _ in range(int(input())):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = []\n    for i in range(n + m):\n        if len(a) > 0:\n            if a[0] == 0:\n                k += 1\n                ans.append(a[0])\n                del a[0]\n                continue\n        if len(b) > 0:\n            if b[0] == 0:\n                k += 1\n                ans.append(b[0])\n                del b[0]\n                continue\n        if len(a) > 0:\n            if a[0] <= k:\n                ans.append(a[0])\n                del a[0]\n                continue\n        if len(b) > 0:\n            if b[0] <= k:\n                ans.append(b[0])\n                del b[0]\n                continue\n    if len(ans) == n + m:\n        ans = [str(i) for i in ans]\n        print(' '.join(ans))\n    else:\n        print(-1)", "def restore_history(initial_line_count, seq_a, seq_b):\n    history = []\n    cursors = [0, 0]\n    current_cursor_index = 0\n    switch_count = 0\n    line_count = initial_line_count\n    while len(history) < len(seq_a) + len(seq_b):\n        seq = seq_a if current_cursor_index == 0 else seq_b\n        if cursors[current_cursor_index] < len(seq):\n            action = seq[cursors[current_cursor_index]]\n            if action == 0 or action <= line_count:\n                history.append(str(action))\n                cursors[current_cursor_index] += 1\n                if action == 0:\n                    line_count += 1\n                switch_count = 0\n            else:\n                current_cursor_index = (current_cursor_index + 1) % 2\n                switch_count += 1\n        else:\n            current_cursor_index = (current_cursor_index + 1) % 2\n            switch_count += 1\n        if switch_count > 1:\n            return []\n    return history\nT = int(input())\nimport sys\nwhile T:\n    sys.stdin.readline()\n    (k, n, m) = list(map(int, sys.stdin.readline().split()))\n    seq_a = list(map(int, sys.stdin.readline().split()))\n    seq_b = list(map(int, sys.stdin.readline().split()))\n    history = restore_history(k, seq_a, seq_b)\n    if history:\n        print(' '.join(history))\n    else:\n        print(-1)\n    T -= 1", "t = int(input())\nfor _ in range(t):\n    _ = input()\n    (k, n, m) = tuple(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    b = tuple(map(int, input().split()))\n    ans = []\n    i = 0\n    j = 0\n    while i + j < n + m:\n        if i < n and a[i] == 0:\n            ans.append(a[i])\n            k += 1\n            i += 1\n        elif j < m and b[j] == 0:\n            ans.append(b[j])\n            k += 1\n            j += 1\n        elif i < n and a[i] <= k:\n            ans.append(a[i])\n            i += 1\n        elif j < m and b[j] <= k:\n            ans.append(b[j])\n            j += 1\n        else:\n            ans = [-1]\n            break\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    polycarp = list(map(int, input().split()))\n    monocarp = list(map(int, input().split()))\n    actions = []\n    a = 0\n    b = 0\n    while a < n or b < m:\n        if a < n and b < m:\n            if polycarp[a] == 0:\n                actions.append(0)\n                k += 1\n                a += 1\n                continue\n            if monocarp[b] == 0:\n                actions.append(0)\n                k += 1\n                b += 1\n                continue\n            if polycarp[a] <= k:\n                actions.append(polycarp[a])\n                a += 1\n                continue\n            if monocarp[b] <= k:\n                actions.append(monocarp[b])\n                b += 1\n                continue\n            if polycarp[a] > k and monocarp[b] > k:\n                actions = [-1]\n                break\n            break\n        elif a < n:\n            if polycarp[a] == 0:\n                k += 1\n                a += 1\n                actions.append(0)\n            elif polycarp[a] <= k:\n                actions.append(polycarp[a])\n                a += 1\n            else:\n                actions = [-1]\n                break\n        elif b < m:\n            if monocarp[b] == 0:\n                actions.append(0)\n                k += 1\n                b += 1\n            elif monocarp[b] <= k:\n                actions.append(monocarp[b])\n                b += 1\n            else:\n                actions = [-1]\n                break\n        else:\n            break\n    print(' '.join(map(str, actions)))", "def f(a, b, k):\n    n = len(a)\n    m = len(b)\n    res = list()\n    i = j = 0\n    while i < n and j < m:\n        if 0 < a[i] <= k:\n            res.append(a[i])\n            i += 1\n        elif a[i] == 0:\n            res.append(0)\n            k += 1\n            i += 1\n        elif 0 < b[j] <= k:\n            res.append(b[j])\n            j += 1\n        elif b[j] == 0:\n            res.append(0)\n            k += 1\n            j += 1\n        else:\n            return [-1]\n    while i < n:\n        if 0 < a[i] <= k:\n            res.append(a[i])\n            i += 1\n        elif a[i] == 0:\n            res.append(0)\n            k += 1\n            i += 1\n        else:\n            return [-1]\n    while j < m:\n        if 0 < b[j] <= k:\n            res.append(b[j])\n            j += 1\n        elif b[j] == 0:\n            res.append(0)\n            k += 1\n            j += 1\n        else:\n            return [-1]\n    return res\nt = int(input())\ng = []\nfor _ in range(t):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    g.append(f(a, b, k))\nfor _ in g:\n    print(*_)", "t = int(input())\nfor i in range(t):\n    p = 0\n    q = 0\n    x = []\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for j in range(n + m):\n        w = 0\n        if p < n:\n            if a[p] == 0:\n                k += 1\n            if a[p] < k + 1:\n                x.append(str(a[p]))\n                p += 1\n                w = 1\n        if w == 0:\n            if q < m:\n                if b[q] == 0:\n                    k += 1\n                if b[q] < k + 1:\n                    x.append(str(b[q]))\n                    q += 1\n                    w = 1\n        if w == 0:\n            x = ['-1']\n            break\n    print(' '.join(x))", "for input_number in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    j = 0\n    s = ''\n    while not (i == n and j == m):\n        if i == n or a[i] != 0:\n            if i != n and a[i] <= k:\n                s += str(a[i]) + ' '\n                i += 1\n            else:\n                if j == m or b[j] > k:\n                    print(-1)\n                    break\n                if b[j] == 0:\n                    k += 1\n                s += str(b[j]) + ' '\n                j += 1\n        else:\n            s += str(a[i]) + ' '\n            i += 1\n            k += 1\n    else:\n        print(s)", "t = int(input())\nfor _ in range(t):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    ai = 0\n    bi = 0\n    cur_pages = k\n    while ai < len(a) or bi < len(b):\n        if ai < len(a) and a[ai] == 0:\n            c.append(0)\n            cur_pages += 1\n            ai += 1\n        elif ai < len(a) and cur_pages >= a[ai]:\n            c.append(a[ai])\n            ai += 1\n        elif bi < len(b) and b[bi] == 0:\n            c.append(0)\n            cur_pages += 1\n            bi += 1\n        elif bi < len(b) and b[bi] <= cur_pages:\n            c.append(b[bi])\n            bi += 1\n        else:\n            print('-1')\n            break\n    if len(c) == len(a) + len(b):\n        print(' '.join(map(str, c)))", "for q in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = [i for i in map(int, input().split())]\n    b = [i for i in map(int, input().split())]\n    al = bl = 0\n    f = True\n    end = False\n    ans = []\n    good = True\n    while al + bl != n + m:\n        if al != n and a[al] > k and (bl != m) and (b[bl] > k):\n            print(-1)\n            good = False\n            break\n        if f:\n            if al == n:\n                f = False\n                end = True\n            elif a[al] == 0:\n                k += 1\n                ans.append(a[al])\n                al += 1\n            elif a[al] <= k:\n                ans.append(a[al])\n                al += 1\n            elif a[al] > k:\n                if end:\n                    print(-1)\n                    good = False\n                    break\n                f = False\n        elif bl == m:\n            f = end = True\n        elif b[bl] == 0:\n            k += 1\n            ans.append(b[bl])\n            bl += 1\n        elif b[bl] <= k:\n            ans.append(b[bl])\n            bl += 1\n        elif b[bl] > k:\n            if end:\n                print(-1)\n                good = False\n                break\n            f = True\n    if good:\n        print(' '.join(map(str, ans)))", "t = int(input())\nfor aaaaaaaaa in range(t):\n    enter = input()\n    y = []\n    knm = [int(i) for i in input().split()]\n    n = [int(i) for i in input().split()]\n    m = [int(i) for i in input().split()]\n    k = knm[0]\n    n.append(301)\n    m.append(301)\n    l = 0\n    for i in range(knm[1] + knm[2]):\n        if n[0] == 0:\n            y.append(0)\n            k += 1\n            del n[0]\n        elif m[0] == 0:\n            y.append(0)\n            k += 1\n            del m[0]\n        elif k >= n[0]:\n            y.append(n[0])\n            del n[0]\n        elif k >= m[0]:\n            y.append(m[0])\n            del m[0]\n        elif n[0] == 301:\n            enter = ''\n        elif m[0] == 301:\n            enter = ''\n        else:\n            print(-1)\n            l = 1\n            break\n    if knm[1] + knm[2] > len(y) and l == 0:\n        print(-1)\n    elif l == 0:\n        for i in range(len(y)):\n            enter += str(y[i]) + ' '\n        print(enter)", "t = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    input()\n    arr = list(map(int, input().split()))\n    (ct, n, m) = (arr[0], arr[1], arr[2])\n    op1 = list(map(int, input().split()))\n    op2 = list(map(int, input().split()))\n    i = 0\n    j = 0\n    done = True\n    ops = []\n    while (i < n or j < m) and done:\n        done = False\n        if i < n and op1[i] == 0:\n            done = True\n            ct += 1\n            ops.append(op1[i])\n            i += 1\n        elif i < n and op1[i] != 0 and (op1[i] <= ct):\n            done = True\n            ops.append(op1[i])\n            i += 1\n        elif j < m and op2[j] == 0:\n            done = True\n            ct += 1\n            ops.append(op2[j])\n            j += 1\n        elif j < m and op2[j] != 0 and (op2[j] <= ct):\n            done = True\n            ops.append(op2[j])\n            j += 1\n    if done:\n        stri = ''\n        for i in ops:\n            stri += str(i) + ' '\n        print(stri)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    e = input()\n    ans = []\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    lg = 0\n    for i in range(n):\n        if a[i] == 0:\n            k += 1\n            ans.append(0)\n        elif a[i] > k:\n            for f in range(lg, m):\n                if b[f] == 0:\n                    k += 1\n                    ans.append(0)\n                    lg += 1\n                elif b[f] > k:\n                    lg -= 1\n                    break\n                else:\n                    ans.append(b[f])\n                    lg += 1\n            if a[i] > k:\n                ans = [-1]\n                break\n            else:\n                ans.append(a[i])\n                lg += 1\n        else:\n            ans.append(a[i])\n    for i in range(lg, m):\n        if b[i] == 0:\n            k += 1\n            ans.append(0)\n            lg += 1\n        elif b[i] > k:\n            ans = [-1]\n            break\n        else:\n            ans.append(b[i])\n            lg += 1\n    if ans[0] != -1:\n        print(*ans)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    q = int(input())\n    input()\n    for pp in range(q):\n        (k, n, m) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        if pp != q - 1:\n            input()\n        solve(k, n, m, a, b)\n\ndef solve(k, n, m, a, b):\n    (i, j) = (0, 0)\n    res = []\n    while i < n or j < m:\n        if i < n and a[i] <= k:\n            res.append(a[i])\n            if a[i] == 0:\n                k += 1\n            i += 1\n        elif j < m and b[j] <= k:\n            res.append(b[j])\n            if b[j] == 0:\n                k += 1\n            j += 1\n        else:\n            res = [-1]\n            break\n    print(*res)\n    pass\nmain()", "lst = list(map(int, input().split()))\nt = lst[0]\nfor j in range(t):\n    res = []\n    lst = list(map(str, input().split()))\n    lst1 = list(map(int, input().split()))\n    k = lst1[0]\n    n = lst1[1]\n    m = lst1[2]\n    lst2 = list(map(int, input().split()))\n    lst3 = list(map(int, input().split()))\n    i1 = 0\n    i2 = 0\n    okey = True\n    for i in range(n + m):\n        ok = False\n        if i1 < n:\n            if lst2[i1] == 0:\n                res = res + ['0']\n                k = k + 1\n                i1 = i1 + 1\n                ok = True\n            elif lst2[i1] <= k:\n                res = res + [str(lst2[i1])]\n                i1 = i1 + 1\n                ok = True\n        if i2 < m and ok == False:\n            if lst3[i2] == 0:\n                res = res + ['0']\n                k = k + 1\n                i2 = i2 + 1\n                ok = True\n            elif lst3[i2] <= k:\n                res = res + [str(lst3[i2])]\n                i2 = i2 + 1\n                ok = True\n        if ok == False:\n            okey = False\n    if okey:\n        print(' '.join(res))\n    else:\n        print(-1)", "def main():\n    for _ in range(int(input())):\n        input()\n        (k, n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        (l, r) = (0, 0)\n        f = True\n        ans = []\n        while l < n and r < m:\n            if a[l] == 0:\n                ans.append(a[l])\n                k += 1\n                l += 1\n            elif b[r] == 0:\n                ans.append(b[r])\n                k += 1\n                r += 1\n            elif a[l] <= k:\n                ans.append(a[l])\n                l += 1\n            elif b[r] <= k:\n                ans.append(b[r])\n                r += 1\n            else:\n                f = False\n                break\n        while l < n:\n            if a[l] <= k:\n                if a[l] == 0:\n                    k += 1\n                ans.append(a[l])\n                l += 1\n            else:\n                f = False\n                break\n        while r < m:\n            if b[r] <= k:\n                if b[r] == 0:\n                    k += 1\n                ans.append(b[r])\n                r += 1\n            else:\n                f = False\n                break\n        if not f:\n            print(-1)\n        else:\n            print(*ans)\nmain()", "import math\nmodulo = 10 ** 9 + 7\nn_tests = int(input())\nfor test in range(n_tests):\n    input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(input().split(' '))\n    b = list(input().split(' '))\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    res = ''\n    fail = False\n    while len(a) != 0 or len(b) != 0:\n        if len(b) == 0 or (not len(a) == 0 and a[0] < b[0]):\n            if a[0] > k:\n                fail = True\n                break\n            if a[0] == 0:\n                k += 1\n            res += str(a[0]) + ' '\n            a.pop(0)\n        else:\n            if b[0] > k:\n                fail = True\n                break\n            if b[0] == 0:\n                k += 1\n            res += str(b[0]) + ' '\n            b.pop(0)\n    if not fail:\n        print(res)\n    else:\n        print(-1)", "def solve(k, n, m, a, b):\n    ans = []\n    l = k\n    (cura, curb) = (0, 0)\n    noProg = 0\n    while cura < n or curb < m:\n        while cura < n:\n            if a[cura] == 0:\n                cura += 1\n                l += 1\n                ans.append(0)\n                noProg = 0\n            else:\n                break\n        while curb < m:\n            if b[curb] == 0:\n                curb += 1\n                l += 1\n                ans.append(0)\n                noProg = 0\n            else:\n                break\n        if cura < n:\n            if l >= a[cura]:\n                ans.append(a[cura])\n                cura += 1\n                noProg = 0\n            else:\n                noProg += 1\n        if curb < m:\n            if l >= b[curb]:\n                ans.append(b[curb])\n                curb += 1\n                noProg = 0\n            else:\n                noProg += 1\n        if noProg > 1:\n            print(-1)\n            return -1\n    if cura == n and curb == m:\n        print(*ans)\n        return ans\n    else:\n        print(-1)\n        return -1\nt = int(input())\nfor case in range(t):\n    throwaway = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    solve(k, n, m, a, b)", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        input()\n        (n, a, b) = map(int, input().split())\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        z = A.count(0) + B.count(0)\n        if z + n < max(max(A), max(B)):\n            print(-1)\n        else:\n            l = []\n            (i, j, f) = (0, 0, 1)\n            while i < a or j < b:\n                if i < a and A[i] == 0:\n                    l.append(A[i])\n                    i += 1\n                    n += 1\n                    continue\n                if i < a and A[i] <= n:\n                    l.append(A[i])\n                    i += 1\n                    continue\n                if j < b and B[j] == 0:\n                    l.append(B[j])\n                    j += 1\n                    n += 1\n                    continue\n                if j < b and B[j] <= n:\n                    l.append(B[j])\n                    j += 1\n                    continue\n                f = 0\n                break\n            if f:\n                print(*l)\n            else:\n                print(-1)\nmain()", "t = int(input())\nfor _ in range(t):\n    input()\n    (k, a, b) = list(map(int, input().split()))\n    ai = list(map(int, input().split()))\n    bi = list(map(int, input().split()))\n\n    def isPossible(k, ai, bi):\n        (aptr, bptr) = (0, 0)\n        ordering = []\n        while aptr < len(ai) and bptr < len(bi):\n            while aptr < len(ai) and k >= ai[aptr]:\n                ordering.append(ai[aptr])\n                k += ordering[-1] == 0\n                aptr += 1\n            while bptr < len(bi) and k >= bi[bptr]:\n                ordering.append(bi[bptr])\n                k += ordering[-1] == 0\n                bptr += 1\n            if aptr >= len(ai) and bptr >= len(bi):\n                break\n            if (aptr >= len(ai) or k < ai[aptr]) and (bptr >= len(bi) or k < bi[bptr]):\n                return [-1]\n        while aptr < len(ai):\n            ordering.append(ai[aptr])\n            if ordering[-1] > k:\n                return [-1]\n            k += ordering[-1] == 0\n            aptr += 1\n        while bptr < len(bi):\n            ordering.append(bi[bptr])\n            if ordering[-1] > k:\n                return [-1]\n            k += ordering[-1] == 0\n            bptr += 1\n        return ordering\n    print(*isPossible(k, ai, bi))", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = list()\n    p = 0\n    for i in a:\n        if i == 0:\n            k += 1\n        elif i > k:\n            while p < len(b):\n                if b[p] == 0:\n                    p += 1\n                    k += 1\n                    res.append(b[p - 1])\n                elif b[p] <= k:\n                    p += 1\n                    res.append(b[p - 1])\n                else:\n                    break\n            if i > k:\n                print('-1')\n                return\n        res.append(i)\n    for i in b[p:len(b)]:\n        if i == 0:\n            k += 1\n        elif i > k:\n            print('-1')\n            return\n        res.append(i)\n    for i in res:\n        print(i, end=' ')\n    print()\nfor t in range(int(input())):\n    charming()", "t = int(input())\nfor i in range(t):\n    _ = input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = True\n    c = []\n    (i, j) = (0, 0)\n    while len(c) < m + n:\n        better = 0\n        if i == len(a):\n            better = b[j]\n            j += 1\n        elif j == len(b):\n            better = a[i]\n            i += 1\n        elif a[i] < b[j]:\n            better = a[i]\n            i += 1\n        else:\n            better = b[j]\n            j += 1\n        c.append(better)\n        if better == 0:\n            k += 1\n        elif k < better:\n            res = False\n            break\n    if res:\n        st = ''\n        for c_ in c:\n            st = st + f'{c_} '\n        print(st[:-1])\n    else:\n        print(-1)", "def pairProgramming(k, n, m, a, b):\n    i = 0\n    j = 0\n    l = []\n    while i < n or j < m:\n        while i < n and (k >= a[i] or a[i] == 0):\n            l.append(a[i])\n            if a[i] == 0:\n                k += 1\n            i += 1\n        if j < m and k < b[j]:\n            print('-1')\n            return\n        while j < m and (k >= b[j] or b[j] == 0):\n            l.append(b[j])\n            if b[j] == 0:\n                k += 1\n            j += 1\n        if i < n and k < a[i]:\n            print('-1')\n            return\n    print(*l)\nfor _ in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pairProgramming(k, n, m, a, b)", "def solve():\n    tt = input()\n    (k, n, m) = map(int, input().split())\n    narr = list(map(int, input().split()))\n    marr = list(map(int, input().split()))\n    i = 0\n    j = 0\n    ans = []\n    while i < n or j < m:\n        flag = 0\n        if i < n and narr[i] == 0:\n            ans.append(0)\n            i += 1\n            k += 1\n            flag = 1\n        elif i < n and narr[i] <= k:\n            ans.append(narr[i])\n            i += 1\n            flag = 1\n        if j < m and marr[j] == 0:\n            ans.append(0)\n            j += 1\n            k += 1\n            flag = 1\n        elif j < m and marr[j] <= k:\n            ans.append(marr[j])\n            j += 1\n            flag = 1\n        if flag == 0:\n            return -1\n    return ans\nt = int(input())\nfor _ in range(t):\n    ans = solve()\n    if ans == -1:\n        print(-1)\n    else:\n        print(*ans)", "def ger_res(k, n, m, arr_n, arr_m):\n    res = []\n    (i, j) = (0, 0)\n    while i < n and j < m:\n        if arr_n[i] <= k:\n            if arr_n[i] == 0:\n                k += 1\n            res.append(arr_n[i])\n            i += 1\n            continue\n        if arr_m[j] <= k:\n            if arr_m[j] == 0:\n                k += 1\n            res.append(arr_m[j])\n            j += 1\n            continue\n        if arr_n[i] > k and arr_m[j] > k:\n            return [-1]\n    while i < n:\n        if arr_n[i] <= k:\n            if arr_n[i] == 0:\n                k += 1\n            res.append(arr_n[i])\n            i += 1\n        else:\n            return [-1]\n    while j < m:\n        if arr_m[j] <= k:\n            if arr_m[j] == 0:\n                k += 1\n            res.append(arr_m[j])\n            j += 1\n        else:\n            return [-1]\n    return res\nn_tests = int(input())\nfor _ in range(n_tests):\n    input()\n    (k, n, m) = map(int, input().split())\n    arr_n = list(map(int, input().split()))\n    arr_m = list(map(int, input().split()))\n    print(*ger_res(k, n, m, arr_n, arr_m))", "t = int(input())\nfor _ in range(t):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    i = 0\n    j = 0\n    flag = 1\n    ans = []\n    while i < n or j < m:\n        while i < n:\n            if a[i] == 0:\n                k += 1\n                ans.append(a[i])\n            elif a[i] > k:\n                break\n            else:\n                ans.append(a[i])\n            i += 1\n        while j < m:\n            if b[j] == 0:\n                k += 1\n                ans.append(b[j])\n            elif b[j] > k:\n                break\n            else:\n                ans.append(b[j])\n            j += 1\n        if i < n and j < m and (a[i] > k) and (b[j] > k) or (i == n and j < m and (b[j] > k)) or (i < n and j == m and (a[i] > k)):\n            flag = -1\n            break\n    if flag == -1:\n        print(-1)\n    else:\n        print(*ans)", "def solve():\n    D = input()\n    (K, N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = []\n    i = 0\n    j = 0\n    while i < N or j < M:\n        if i == N:\n            if B[j] == 0:\n                ans.append(B[j])\n                j += 1\n                K += 1\n            elif B[j] <= K:\n                ans.append(B[j])\n                j += 1\n            else:\n                return -1\n        elif j == M:\n            if A[i] == 0:\n                ans.append(A[i])\n                i += 1\n                K += 1\n            elif A[i] <= K:\n                ans.append(A[i])\n                i += 1\n            else:\n                return -1\n        elif A[i] == 0:\n            ans.append(A[i])\n            i += 1\n            K += 1\n        elif B[j] == 0:\n            ans.append(B[j])\n            j += 1\n            K += 1\n        elif A[i] <= K:\n            ans.append(A[i])\n            i += 1\n        elif B[j] <= K:\n            ans.append(B[j])\n            j += 1\n        else:\n            return -1\n    return ans\nT = int(input())\nfor _ in range(T):\n    x = solve()\n    if x == -1:\n        print(x)\n    else:\n        print(*x)", "def f(k):\n    ans = []\n    first = 0\n    second = 0\n    while first < n or second < m:\n        if first < n and a[first] <= k:\n            ans.append(a[first])\n            if a[first] == 0:\n                k += 1\n            first += 1\n        elif second < m and b[second] <= k:\n            ans.append(b[second])\n            if b[second] == 0:\n                k += 1\n            second += 1\n        else:\n            print(-1)\n            break\n    else:\n        print(*ans)\nfor t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f(k)", "for _ in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    i = 0\n    j = 0\n    f = True\n    while i < n and j < m:\n        if a[i] == 0:\n            c.append(0)\n            i += 1\n            k += 1\n        elif b[j] == 0:\n            c.append(0)\n            j += 1\n            k += 1\n        elif a[i] <= k:\n            c.append(a[i])\n            i += 1\n        elif b[j] <= k:\n            c.append(b[j])\n            j += 1\n        else:\n            f = False\n            break\n    while i < n:\n        if a[i] == 0:\n            c.append(0)\n            i += 1\n            k += 1\n        elif a[i] <= k:\n            c.append(a[i])\n            i += 1\n        else:\n            f = False\n            break\n    while j < m:\n        if b[j] == 0:\n            c.append(0)\n            j += 1\n            k += 1\n        elif b[j] <= k:\n            c.append(b[j])\n            j += 1\n        else:\n            f = False\n            break\n    if f:\n        print(*c)\n    else:\n        print(-1)", "def solve():\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = []\n    i = 0\n    j = 0\n    while True:\n        if i < n and a[i] == 0:\n            res.append(a[i])\n            i += 1\n            k += 1\n        elif j < m and b[j] == 0:\n            res.append(b[j])\n            j += 1\n            k += 1\n            continue\n        elif i < n and a[i] > 0 and (a[i] <= k):\n            res.append(a[i])\n            i += 1\n        elif j < m and b[j] > 0 and (b[j] <= k):\n            res.append(b[j])\n            j += 1\n        else:\n            break\n    if len(res) == n + m:\n        print(*res)\n    else:\n        print(-1)\nfor i in range(int(input())):\n    solve()", "t = int(input())\n\ndef solve():\n    input()\n    (k, n, m) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    p1 = 0\n    p2 = 0\n    ans = []\n    while p1 < len(arr1) or p2 < len(arr2):\n        if p1 < len(arr1) and arr1[p1] <= k:\n            if arr1[p1] == 0:\n                k += 1\n            p1 += 1\n            ans.append(arr1[p1 - 1])\n        elif p2 < len(arr2) and arr2[p2] <= k:\n            if arr2[p2] == 0:\n                k += 1\n            p2 += 1\n            ans.append(arr2[p2 - 1])\n        else:\n            print('-1')\n            return\n    print(*ans)\nfor i in range(t):\n    solve()", "import math\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    input()\n    (k, n, m) = getList()\n    a = getList()\n    b = getList()\n    pc = k\n    (i, j) = (0, 0)\n    seq = []\n    printed = False\n    for x in range(n + m):\n        if i < n and a[i] == 0:\n            i += 1\n            pc += 1\n            seq.append(0)\n        elif j < m and b[j] == 0:\n            j += 1\n            pc += 1\n            seq.append(0)\n        elif i < n and a[i] <= pc:\n            seq.append(a[i])\n            i += 1\n        elif j < m and b[j] <= pc:\n            seq.append(b[j])\n            j += 1\n        else:\n            print(-1)\n            printed = True\n            break\n    if not printed:\n        print(*seq)\nfor _ in range(getInt()):\n    solve()", "from collections import defaultdict\n\ndef fun(k, n, m, a, b):\n    ans = []\n    (i, j) = (0, 0)\n    while i < n and j < m:\n        if a[i] == 0:\n            i += 1\n            k += 1\n            ans.append(0)\n        elif b[j] == 0:\n            j += 1\n            k += 1\n            ans.append(0)\n        else:\n            if k < a[i] and k < b[j]:\n                return -1\n            if k < a[i]:\n                ans.append(b[j])\n                j += 1\n            elif k < b[j]:\n                ans.append(a[i])\n                i += 1\n            elif a[i] < b[j]:\n                ans.append(a[i])\n                i += 1\n            else:\n                ans.append(b[j])\n                j += 1\n    while i < n:\n        if a[i] == 0:\n            k += 1\n            ans.append(0)\n        elif a[i] > k:\n            return -1\n        else:\n            ans.append(a[i])\n        i += 1\n    while j < m:\n        if b[j] == 0:\n            k += 1\n            ans.append(0)\n        elif b[j] > k:\n            return -1\n        else:\n            ans.append(b[j])\n        j += 1\n    return ans\ntc = int(input())\nfor _ in range(tc):\n    space = input()\n    (k, n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = fun(k, n, m, a, b)\n    if ans == -1:\n        print(-1)\n    else:\n        print(*ans)", "for i in range(int(input())):\n    noth = input()\n    ans = []\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = 0\n    p = 0\n    while m != len(a) or p != len(b):\n        if m < len(a) and a[m] <= k:\n            for j in range(m, len(a)):\n                if a[j] == 0:\n                    k += 1\n                    ans.append(a[j])\n                    m += 1\n                elif a[j] <= k:\n                    ans.append(a[j])\n                    m += 1\n                else:\n                    break\n        elif p < len(b) and b[p] <= k:\n            for j in range(p, len(b)):\n                if b[j] == 0:\n                    k += 1\n                    ans.append(b[j])\n                    p += 1\n                elif b[j] <= k:\n                    ans.append(b[j])\n                    p += 1\n                else:\n                    break\n        else:\n            ans = -1\n            m = len(a)\n            p = len(b)\n    if ans == -1:\n        print(ans)\n    else:\n        print(*ans)", "def main():\n    for _ in range(int(input())):\n        l = input()\n        (k, n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        cnt = k\n        ans = []\n        i = j = 0\n        flag = 1\n        while i < n and j < m and flag:\n            flag = 0\n            if a[i] == 0:\n                ans.append(a[i])\n                i += 1\n                cnt += 1\n                flag = 1\n            elif a[i] <= cnt and cnt > 0:\n                ans.append(a[i])\n                i += 1\n                flag = 1\n            if b[j] == 0:\n                ans.append(b[j])\n                j += 1\n                cnt += 1\n                flag = 1\n            elif b[j] <= cnt and cnt > 0:\n                ans.append(b[j])\n                j += 1\n                flag = 1\n        while i < n:\n            if a[i] == 0:\n                ans.append(a[i])\n                cnt += 1\n            elif a[i] <= cnt and cnt > 0:\n                ans.append(a[i])\n            else:\n                ans = -1\n                break\n            i += 1\n        if ans != -1:\n            while j < m:\n                if b[j] == 0:\n                    cnt += 1\n                    ans.append(b[j])\n                elif b[j] <= cnt and cnt > 0:\n                    ans.append(b[j])\n                else:\n                    ans = -1\n                    break\n                j += 1\n        if ans != -1:\n            print(*ans)\n        else:\n            print(ans)\nmain()", "for _ in range(int(input())):\n    tab = input()\n    (k, n, m) = map(int, input().split())\n    listn = list(map(int, input().split()))\n    listm = list(map(int, input().split()))\n    ans = []\n    status = True\n    stuck = False\n    noOfTries = 0\n    while len(listm) > 0 or len(listn) > 0:\n        if noOfTries > 3:\n            break\n        if len(listn) == 0:\n            status = False\n            noOfTries += 1\n        if len(listm) == 0:\n            status = True\n            noOfTries += 1\n        if status and listn[0] != 0:\n            if k >= listn[0]:\n                ans.append(listn[0])\n                listn = listn[1:]\n                noOfTries = 0\n            else:\n                status = False\n                noOfTries += 1\n        elif status and listn[0] == 0:\n            ans.append(listn[0])\n            listn = listn[1:]\n            noOfTries = 0\n            k += 1\n        elif not status and listm[0] != 0:\n            if k >= listm[0]:\n                ans.append(listm[0])\n                listm = listm[1:]\n                noOfTries = 0\n            else:\n                status = True\n                noOfTries += 1\n        else:\n            ans.append(listm[0])\n            listm = listm[1:]\n            noOfTries = 0\n            k += 1\n    if noOfTries > 3:\n        print(-1)\n    else:\n        ans = list(map(str, ans))\n        print(' '.join(ans))", "def solve(a, b):\n    ans = []\n    totallen = k\n    for i in range(n + m):\n        if a:\n            if a[0] == 0:\n                totallen += 1\n                ans.append(a.pop(0))\n                continue\n            elif a[0] <= totallen:\n                ans.append(a.pop(0))\n                continue\n        if b:\n            if b[0] == 0:\n                totallen += 1\n                ans.append(b.pop(0))\n                continue\n            elif b[0] <= totallen:\n                ans.append(b.pop(0))\n                continue\n        return [-1]\n    return ans\nfor t in range(int(input())):\n    input()\n    (k, n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(*solve(a, b))"]