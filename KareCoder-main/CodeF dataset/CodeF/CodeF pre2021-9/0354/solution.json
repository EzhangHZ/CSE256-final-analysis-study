["from sys import stdin\n\ndef main():\n    for s in stdin.read().splitlines()[2::2]:\n        (a, b, *l) = map(int, s.split())\n        (res, u) = ([a, b], a < b)\n        for c in l:\n            v = b < c\n            if u is v:\n                res[-1] = c\n            else:\n                res.append(c)\n            (b, u) = (c, v)\n        print(len(res), ' '.join(map(str, res)), sep='\\n')\nmain()", "import sys\n\ndef answer(n, p):\n    ans = [p[0]]\n    if p[1] > p[0]:\n        asc = True\n    else:\n        asc = False\n    for i in range(1, n):\n        if asc and p[i - 1] > p[i]:\n            asc = False\n            ans.append(p[i - 1])\n        elif not asc and p[i - 1] < p[i]:\n            asc = True\n            ans.append(p[i - 1])\n    ans.append(p[-1])\n    print(len(ans))\n    print(' '.join(map(str, ans)))\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(sys.stdin.readline())\n        p = [int(i) for i in sys.stdin.readline().split()]\n        answer(n, p)\n        t -= 1\n    return\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    P = list(map(int, input().split()))\n    ret = 2\n    ans = [P[0], P[1]]\n    now = P[1]\n    up = False\n    if P[0] < P[1]:\n        up = True\n    for p in P[2:]:\n        if up:\n            if now < p:\n                ans[-1] = p\n                pass\n            else:\n                up = False\n                ret += 1\n                ans.append(p)\n        elif now > p:\n            ans[-1] = p\n            pass\n        else:\n            up = True\n            ret += 1\n            ans.append(p)\n        now = p\n    return '\\n'.join([str(ret), ' '.join(map(str, ans))])\n\ndef main():\n    t = int(input())\n    ANS = []\n    for _ in range(t):\n        print(solve())\nmain()", "t = int(input())\nanswer = []\nfor test in range(t):\n    n = int(input())\n    liste = list(map(int, input().split(' ')))\n    local_answer = []\n    local_answer.append(str(liste[0]))\n    for i in range(1, n - 1):\n        if liste[i] > liste[i - 1] and liste[i] > liste[i + 1] or (liste[i] < liste[i - 1] and liste[i] < liste[i + 1]):\n            local_answer.append(str(liste[i]))\n    local_answer.append(str(liste[-1]))\n    string = str(len(local_answer)) + '\\n' + ' '.join(local_answer)\n    answer.append(string)\nprint('\\n'.join(answer))", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list2 = [list1[0]]\n    for i in range(1, n - 1):\n        if (list1[i] - list1[i - 1]) * (list1[i + 1] - list1[i]) < 0 or list1[i - 1] == list1[i] != list1[i + 1]:\n            list2.append(list1[i])\n    list2.append(list1[-1])\n    list_ans.append(len(list2))\n    list_ans.append(' '.join(map(str, list2)))\nprint(*list_ans, sep='\\n')", "def tostr(A):\n    return [*map(str, A)]\n\ndef toint(A):\n    return [*map(int, A)]\n\ndef solve(A):\n    if len(A) <= 2:\n        return A\n    (i, j, k) = (0, 1, 2)\n    ret = []\n    while k < len(A):\n        if (A[i] - A[j]) * (A[k] - A[j]) > 0:\n            ret.append(A[i])\n            (i, j, k) = (j, k, k + 1)\n        else:\n            (i, j, k) = (i, k, k + 1)\n    ret.append(A[i])\n    ret.append(A[j])\n    return ret\nfrom os import sys\nncases = int(sys.stdin.readline().strip())\nfor _ in range(ncases):\n    n = sys.stdin.readline()\n    A = sys.stdin.readline().split()\n    ret = solve(toint(A))\n    print(len(ret))\n    print(' '.join(tostr(ret)))", "from sys import stdin\ninput = stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    (store, arr) = (lst[0], [lst[0]])\n    i = 1\n    while i < n:\n        flag = 0\n        while i < n and lst[i] > store:\n            flag = 1\n            store = lst[i]\n            i += 1\n        if flag:\n            arr.append(store)\n        flag = 0\n        while i < n and lst[i] < store:\n            flag = 1\n            store = lst[i]\n            i += 1\n        if flag:\n            arr.append(store)\n    print(len(arr))\n    print(*arr)", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(0, T):\n    n = int(sys.stdin.readline().strip())\n    p = list(map(int, sys.stdin.readline().strip().split()))\n    ans = [p[0]]\n    for i in range(1, n):\n        if p[i] != ans[-1]:\n            if len(ans) == 1:\n                ans.append(p[i])\n            else:\n                if (ans[-2] - ans[-1]) * (ans[-1] - p[i]) > 0:\n                    ans.pop()\n                ans.append(p[i])\n    print(len(ans))\n    print(' '.join(list(map(str, ans))))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = [arr[0]]\n    for i in range(1, n - 1):\n        if not (arr[i - 1] < arr[i] < arr[i + 1] or arr[i - 1] > arr[i] > arr[i + 1]):\n            ans.append(arr[i])\n    ans.append(arr[-1])\n    print(len(ans))\n    print(*ans)\ntt = int(input())\nfor test in range(tt):\n    solve()", "t = int(input())\nans = []\nfor x in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = p[:]\n    start = 0\n    subs = []\n    for y in range(1, n - 1):\n        if p[y] < p[y + 1] and p[y] > p[y - 1]:\n            q[y] = 0\n        if p[y] > p[y + 1] and p[y] < p[y - 1]:\n            q[y] = 0\n    for y in range(n):\n        if q[y] != 0:\n            subs.append(q[y])\n    ans.append(subs)\nfor a in ans:\n    print(len(a))\n    for s in a:\n        print(s, end=' ')\n    print()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mints()\n    b = []\n    for i in mints():\n        b.append(i)\n        if len(b) > 2 and (b[-1] > b[-2] and b[-2] > b[-3] or (b[-1] < b[-2] and b[-2] < b[-3])):\n            b.pop(len(b) - 2)\n    print(len(b))\n    print(*b)\nfor i in range(mint()):\n    solve()", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\nP = 1000000007\n\ndef main():\n    for t in range(I()):\n        n = I()\n        arr = L()\n        if n == 2:\n            print(2)\n            print(*arr)\n        else:\n            lis = [arr[0]]\n            j = 0\n            flag = 0\n            if arr[1] > arr[0]:\n                flag = 1\n            for i in range(2, n):\n                if flag == 1 and arr[i] > arr[i - 1]:\n                    continue\n                elif flag == 1 and arr[i] < arr[i - 1]:\n                    flag = 0\n                    lis.append(arr[i - 1])\n                elif flag == 0 and arr[i] > arr[i - 1]:\n                    flag = 1\n                    lis.append(arr[i - 1])\n                else:\n                    continue\n            if lis[len(lis) - 1] != arr[n - 1]:\n                lis.append(arr[n - 1])\n            print(len(lis))\n            print(*lis)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    res = [aa[0]]\n    for i in range(1, n - 1):\n        if aa[i - 1] < aa[i] > aa[i + 1] or aa[i - 1] > aa[i] < aa[i + 1]:\n            res.append(aa[i])\n    res.append(aa[-1])\n    return res\nfor _ in range(II()):\n    n = II()\n    aa = LI()\n    ans = solve()\n    print(len(ans))\n    print(*ans)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    ans = [arr[0]]\n    for i in range(1, n - 1):\n        if ans[-1] > arr[i] and arr[i] > arr[i + 1] or (ans[-1] < arr[i] and arr[i] < arr[i + 1]):\n            pass\n        else:\n            ans.append(arr[i])\n    ans.append(arr[n - 1])\n    print(len(ans))\n    print(*ans)", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    n = int(fastinput())\n    b = list(map(int, fastinput().split()))\n    ans = [b[0], b[1]]\n    for i in b[2:]:\n        x1 = ans.pop()\n        x2 = ans.pop()\n        if x1 - x2 > 0 and i - x1 > 0:\n            ans.append(x2)\n            ans.append(i)\n        elif x1 - x2 < 0 and i - x1 < 0:\n            ans.append(x2)\n            ans.append(i)\n        else:\n            ans.append(x2)\n            ans.append(x1)\n            ans.append(i)\n    print(len(ans))\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    val = []\n    for i in range(n - 1):\n        val.append(L[i + 1] - L[i])\n    t = val[0]\n    ans = [L[0]]\n    for i in range(1, n - 1):\n        if t > 0:\n            if val[i] > 0:\n                continue\n            if val[i] < 0:\n                ans.append(L[i])\n                t = -1\n        if t < 0:\n            if val[i] < 0:\n                continue\n            if val[i] > 0:\n                ans.append(L[i])\n                t = 1\n    ans.append(L[-1])\n    print(len(ans))\n    print(*ans)", "t = int(input())\nrez = []\nfor i in range(t):\n    n = int(input())\n    r = ''\n    k = 2\n    s = input().split(' ')\n    for j in range(n):\n        s[j] = int(s[j])\n    r += str(s[0]) + ' '\n    for j in range(1, n - 1):\n        if s[j - 1] < s[j] and s[j] > s[j + 1] or (s[j - 1] > s[j] and s[j] < s[j + 1]):\n            r += str(s[j]) + ' '\n            k += 1\n    r += str(s[n - 1]) + ' '\n    rez.append(k)\n    rez.append(r)\nfor i in range(len(rez)):\n    print(rez[i])", "from sys import stdin\nimport math\n\ndef inp():\n    return stdin.readline().strip()\nt = int(inp())\nfor _ in range(t):\n    n = int(inp())\n    ar = [int(x) for x in inp().split()]\n    ans = [ar[0]]\n    for i in range(n - 1):\n        if i > 0:\n            if ar[i - 1] < ar[i] > ar[i + 1] or ar[i - 1] > ar[i] < ar[i + 1]:\n                ans.append(ar[i])\n    ans.append(ar[n - 1])\n    print(len(ans))\n    print(*ans)", "import sys\n\ndef read():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve():\n    n = read()\n    A = get_array()\n    R = []\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            R.append(A[i])\n        elif (A[i - 1] < A[i]) != (A[i] < A[i + 1]):\n            R.append(A[i])\n    print(len(R))\n    for x in R:\n        print('%d ' % x, end='')\n    print()\ncas = read()\nwhile cas:\n    cas -= 1\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    res = [aa[0]]\n    for i in range(1, n - 1):\n        if aa[i - 1] < aa[i] > aa[i + 1] or aa[i - 1] > aa[i] < aa[i + 1]:\n            res.append(aa[i])\n    res.append(aa[-1])\n    return res\nfor _ in range(II()):\n    n = II()\n    aa = LI()\n    ans = solve()\n    print(len(ans))\n    print(*ans)", "from sys import stdin, stdout\n\ndef input():\n    return stdin.readline()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    l.append(a[0])\n    (s, g) = (-1, -1)\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if s == 1:\n                l.append(a[i - 1])\n            g = 1\n            s = 0\n        elif a[i] < a[i - 1]:\n            if g == 1:\n                l.append(a[i - 1])\n            s = 1\n            g = 0\n    if a[-1] not in l:\n        l.append(a[-1])\n    print(len(l))\n    print(*l)", "import sys\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 5)\nreadline = sys.stdin.readline\nfor _ in range(int(readline())):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    ans = [a[0]]\n    for i in range(1, n - 1):\n        if a[i - 1] > a[i] < a[i + 1] or a[i - 1] < a[i] > a[i + 1]:\n            ans.append(a[i])\n    ans.append(a[-1])\n    print(len(ans))\n    print(*ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [a[0]]\n    pm = 0\n    if a[1] > a[0]:\n        pm = 1\n    else:\n        pm = -1\n    for x in range(2, n):\n        t = 1 if a[x] > a[x - 1] else -1\n        if pm == t:\n            continue\n        b.append(a[x - 1])\n        pm = t\n    b.append(a[-1])\n    print(len(b))\n    for x in b:\n        print(x, end=' ')\n    print()", "import sys\nfrom sys import stdin\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    res = []\n    res.append(arr[0])\n    count = 0\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1] or (arr[i - 1] > arr[i] and arr[i] < arr[i + 1]):\n            res.append(arr[i])\n    res.append(arr[-1])\n    print(len(res))\n    print(*res)", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = [a[0]]\n    if a[0] < a[1]:\n        f = 0\n    else:\n        f = 1\n    i = 0\n    while i < n - 1:\n        if f == 0:\n            while i < n - 1 and a[i] < a[i + 1]:\n                i += 1\n            f = 1\n            ans.append(a[i])\n        else:\n            while i < n - 1 and a[i] > a[i + 1]:\n                i += 1\n            f = 0\n            ans.append(a[i])\n    print(len(ans))\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import *\nfrom sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(t,) = rl()\nfor _ in range(t):\n    (n,) = rl()\n    p = rl()\n    s = [p[0]]\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] > p[i + 1] or p[i - 1] > p[i] < p[i + 1]:\n            s.append(p[i])\n    s.append(p[-1])\n    print(len(s))\n    print(*s)", "def main():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    take = [lst[0]]\n    sign = 0\n    for i in range(1, n):\n        if i == n - 1:\n            take.append(lst[i])\n        elif lst[i] > take[-1]:\n            if lst[i + 1] < lst[i]:\n                take.append(lst[i])\n        elif lst[i] < take[-1]:\n            if lst[i + 1] > lst[i]:\n                take.append(lst[i])\n    line = str(len(take)) + '\\n'\n    for i in take:\n        line += str(i) + ' '\n    print(line)\nt = int(input())\nfor i in range(t):\n    main()", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    cur = 'g' if a[1] > a[0] else 'l'\n    l = [a[0]]\n    for i in range(1, n - 1):\n        if a[i + 1] > a[i]:\n            tmp = 'g'\n        else:\n            tmp = 'l'\n        if cur != tmp:\n            l.append(a[i])\n        cur = tmp\n    l.append(a[n - 1])\n    print(len(l))\n    for i in l:\n        print(i, end=' ')\n    print()", "def tran(arr):\n    sub = []\n    for i in range(len(arr) - 1):\n        sub.append(arr[i + 1] - arr[i])\n    c = 0\n    anss = [arr[c]]\n    for i in range(len(sub) - 1):\n        if sub[i + 1] * sub[i] < 0:\n            c = c + 1\n            anss.append(arr[c])\n        else:\n            c = c + 1\n    if anss[-1] == arr[-1]:\n        return [len(anss), anss]\n    else:\n        anss.append(arr[-1])\n        return [len(anss), anss]\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    r = tran(arr)\n    ans.append(r)\nfor i in ans:\n    print(i[0])\n    print(*i[1])", "def corona(n, a):\n    if a[1] - a[0] > 0:\n        slope = '+'\n    else:\n        slope = '-'\n    x = [0]\n    last = None\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if slope == '+':\n                last = i\n            else:\n                x.append(last)\n                slope = '+'\n                last = i\n        elif slope == '-':\n            last = i\n        else:\n            x.append(last)\n            slope = '-'\n            last = i\n        if i == n - 1:\n            x.append(last)\n    print(len(x))\n    for j in x:\n        print(a[j], end=' ')\n    print()\n    return\nt = int(input())\na = []\nfor i in range(t):\n    b = int(input())\n    c = list(map(int, input().split(' ')))\n    a.append([b, c])\nfor x in a:\n    corona(*x)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = [arr[0]]\n    if arr[0] < arr[1]:\n        flag = True\n    else:\n        flag = False\n    for i in range(1, n - 1):\n        if flag == True:\n            if arr[i + 1] < arr[i]:\n                res.append(arr[i])\n                flag = False\n        elif arr[i + 1] > arr[i]:\n            res.append(arr[i])\n            flag = True\n    res.append(arr[n - 1])\n    print(len(res))\n    print(*res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = [p[0]]\n    i = 1\n    s1 = 0\n    for i in range(1, len(p) - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            s.append(p[i])\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            s.append(p[i])\n    s.append(p[n - 1])\n    s1 = map(str, s)\n    r = ' '.join(s1)\n    print(len(s))\n    print(r)", "def minSubSeq(seq, n):\n    ans = []\n    for i in range(0, n):\n        if i == 0 or i == n - 1 or (seq[i - 1] < seq[i]) != (seq[i] < seq[i + 1]):\n            ans.append(seq[i])\n    print(len(ans))\n    print(*ans)\n\ndef main():\n    numOfSets = int(input())\n    for _ in range(numOfSets):\n        n = int(input())\n        seq = list(map(int, input().split()))\n        minSubSeq(seq, n)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [a[0]]\n    bl = None\n    for i in range(1, n - 1):\n        if a[i - 1] > a[i] and a[i] < a[i + 1] or (a[i - 1] < a[i] and a[i] > a[i + 1]):\n            ans.append(a[i])\n    ans.append(a[-1])\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    for i in range(a):\n        if (i == 0 or i == a - 1) or (l[i] < l[i - 1] and l[i] < l[i + 1]) or (l[i] > l[i + 1] and l[i] > l[i - 1]):\n            ans.append(l[i])\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    prev = None\n    ans = []\n    for i in range(1, n):\n        if p[i] > p[i - 1] and prev != 1:\n            prev = 1\n            ans.append(p[i - 1])\n        elif p[i] < p[i - 1] and prev != -1:\n            prev = -1\n            ans.append(p[i - 1])\n    ans.append(p[-1])\n    print(len(ans))\n    print(' '.join(map(str, ans)))", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        n = int(input())\n        p = [int(i) for i in input().split(' ')]\n        is_included = [True for i in range(len(p))]\n        for i in range(2, len(p)):\n            if p[i - 2] > p[i - 1] > p[i] or p[i - 2] < p[i - 1] < p[i]:\n                is_included[i - 1] = False\n        collector = []\n        for i in range(len(is_included)):\n            if is_included[i]:\n                collector.append(p[i])\n        counter = 0\n        for i in range(1, len(collector)):\n            counter += abs(collector[i] - collector[i - 1])\n        print(len(collector))\n        print(' '.join([str(u) for u in collector]))\nmain_function()", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(I())\n    x = a[0]\n    b = [x]\n    gg = 1\n    ff = int(a[1] > a[0])\n    for j in range(1, n):\n        i = a[j]\n        if ff == 1 and i < x or (ff == 0 and i > x):\n            b.append(x)\n            gg = gg + 1\n            ff = 1 - ff\n        x = i\n    print(gg + 1)\n    print(*b + [i])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    seq1 = 0\n    seq2 = 0\n    final = []\n    final.append(l[0])\n    for i in range(1, n - 1):\n        if (l[i - 1] < l[i]) != (l[i] < l[i + 1]):\n            final.append(l[i])\n    final.append(l[-1])\n    print(len(final))\n    print(*final)", "def solve():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    s = [p[0]]\n    for i in range(1, n):\n        if i == n - 1 or sgn(p[i + 1] - p[i]) != sgn(p[i] - p[i - 1]):\n            s.append(p[i])\n    print(len(s))\n    print(*s)\n\ndef sgn(x):\n    return abs(x) // x\nt = int(input())\nfor test_case in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    dir = 1 if arr[1] - arr[0] > 0 else 0\n    ans = [arr[0]]\n    stack = [arr[1]]\n    for j in range(2, n):\n        if dir == 1:\n            if stack[-1] < arr[j]:\n                stack.pop()\n                stack.append(arr[j])\n            else:\n                dir = 0\n                ans.append(stack.pop())\n                stack = [arr[j]]\n        elif stack[-1] > arr[j]:\n            stack.pop()\n            stack.append(arr[j])\n        else:\n            dir = 1\n            ans.append(stack.pop())\n            stack = [arr[j]]\n    ans.append(stack.pop())\n    print(len(ans))\n    print(*ans)", "def main():\n    for _ in range(int(input())):\n        input()\n        (a, b, *l) = map(int, input().split())\n        (res, u) = ([a, b], a < b)\n        for c in l:\n            v = b < c\n            if u is v:\n                res[-1] = c\n            else:\n                res.append(c)\n            (b, u) = (c, v)\n        print(len(res), ' '.join(map(str, res)), sep='\\n')\nmain()", "n = int(input())\na = []\nwhile n:\n    x = int(input())\n    l = [int(i) for i in input().split()]\n    ans = []\n    for i in range(x):\n        try:\n            if i == 0 or i == x - 1 or (l[i - 1] < l[i]) != (l[i] < l[i + 1]):\n                ans.append(l[i])\n        except:\n            pass\n    a.append(ans)\n    n = n - 1\nfor i in a:\n    print(len(i))\n    for j in i:\n        print(j, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = [a[0]]\n    if a[1] > a[0]:\n        flag = 1\n    else:\n        flag = 0\n    ref = a[0]\n    for i in range(1, n):\n        if a[i] > a[i - 1] and flag == 0:\n            ans.append(a[i - 1])\n            flag = 1\n        elif a[i] < a[i - 1] and flag == 1:\n            ans.append(a[i - 1])\n            flag = 0\n    ans.append(a[n - 1])\n    print(len(ans))\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if i == 0 or i == n - 1 or (arr[i - 1] < arr[i]) != (arr[i] < arr[i + 1]):\n            ans.append(arr[i])\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    p = l[0]\n    n = []\n    t = 'dd'\n    c = 'dd'\n    for x in l[1:]:\n        if p < x:\n            t = False\n        else:\n            t = True\n        if c != t:\n            c = t\n            n.append(p)\n        p = x\n    n.append(p)\n    print(len(n))\n    print(*n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    b = [x]\n    if a[1] > x:\n        t = 1\n    else:\n        t = 0\n    i = 1\n    while i < n:\n        if t == 1:\n            if a[i] > x and a[i] > a[i - 1]:\n                i += 1\n            else:\n                b += [a[i - 1]]\n                x = a[i - 1]\n                t = 0\n        elif a[i] < x and a[i] < a[i - 1]:\n            i += 1\n        else:\n            b += [a[i - 1]]\n            x = a[i - 1]\n            t = 1\n    else:\n        b += [a[-1]]\n    print(len(b))\n    print(*b)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    sub = [arr[0]]\n    if arr[1] > sub[0]:\n        big = True\n    else:\n        big = False\n    pos = arr[0]\n    for i in range(1, n):\n        if arr[i] > pos and big:\n            pos = arr[i]\n        elif arr[i] < pos and (not big):\n            pos = arr[i]\n        elif arr[i] < pos and big:\n            sub.append(pos)\n            pos = arr[i]\n            big = False\n        elif arr[i] > pos and (not big):\n            sub.append(pos)\n            pos = arr[i]\n            big = True\n    sub.append(pos)\n    print(len(sub))\n    print(*sub)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    seq1 = 0\n    seq2 = 0\n    final = []\n    for i in range(n):\n        if i == 0 or i == n - 1 or (l[i - 1] < l[i]) != (l[i] < l[i + 1]):\n            final.append(l[i])\n    print(len(final))\n    print(*final)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1] or (p[i] < p[i - 1] and p[i] < p[i + 1]):\n            ans.append(p[i])\n    print(len(ans) + 1)\n    print(*ans, p[-1])", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1] or (p[i] < p[i - 1] and p[i] < p[i + 1]):\n            ans.append(p[i])\n    print(len(ans) + 1)\n    print(*ans, p[-1])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        print(n)\n        print(' '.join(map(str, a)))\n        continue\n    c = [a[0]]\n    z = a[0]\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            c.append(a[i])\n        elif a[i] < a[i - 1] and a[i] < a[i + 1]:\n            c.append(a[i])\n    c.append(a[n - 1])\n    print(len(c))\n    print(' '.join(map(str, c)))", "import sys\ninput = lambda : sys.stdin.readline().split('\\n')[0]\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    ans = [l[0]]\n    last = l[0]\n    for i in range(1, n - 1):\n        if l[i] > last and l[i + 1] > l[i] or (l[i] < last and l[i + 1] < l[i]):\n            continue\n        else:\n            ans.append(l[i])\n            last = l[i]\n    ans.append(l[-1])\n    print(len(ans))\n    print(*ans, sep=' ')", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import *\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nsys.setrecursionlimit(int(pow(10, 6)))\nmod = int(pow(10, 9) + 7)\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(*var, end='\\n'):\n    sys.stdout.write(' '.join(map(str, var)) + end)\n\ndef l():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\nfor _ in range(l()[0]):\n    n = l()[0]\n    A = [0] + l()\n    V = [A[1], A[2]]\n    for i in range(3, n + 1):\n        if A[i] > V[-1] and V[-1] > V[-2]:\n            V.pop()\n            V.append(A[i])\n        elif A[i] < V[-1] and V[-1] < V[-2]:\n            V.pop()\n            V.append(A[i])\n        else:\n            V.append(A[i])\n    print(len(V))\n    print(*V)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = [a[0], a[1]]\n    for i in range(2, n):\n        if v[-2] > v[-1] and v[-1] > a[i] or (v[-2] < v[-1] and v[-1] < a[i]):\n            v.pop()\n        v.append(a[i])\n    print(len(v))\n    print(' '.join(map(str, v)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    arr = [s[0]]\n    for i in range(1, n - 1):\n        if s[i] > s[i + 1] and s[i] > s[i - 1] or (s[i] < s[i - 1] and s[i] < s[i + 1]):\n            arr.append(s[i])\n    arr.append(s[-1])\n    print(len(arr))\n    print(*arr)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    ans = [a[0]]\n    if a[0] > a[1]:\n        temp = 'small'\n    else:\n        temp = 'big'\n    for i in range(1, n - 1):\n        if temp == 'big':\n            if a[i] < a[i + 1]:\n                continue\n            else:\n                ans.append(a[i])\n        elif a[i] > a[i + 1]:\n            continue\n        else:\n            ans.append(a[i])\n        if a[i] > a[i + 1]:\n            temp = 'small'\n        else:\n            temp = 'big'\n    ans.append(a[-1])\n    print(len(ans))\n    print(*ans)", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    dir = 0\n    delta = 0\n    ans = 0\n    start = nums[0]\n    res = [nums[0]]\n    if nums[1] >= nums[0]:\n        dir = 1\n    else:\n        dir = -1\n    for i in range(2, n):\n        if dir == 1:\n            if nums[i] >= nums[i - 1]:\n                continue\n            else:\n                delta = nums[i - 1] - start\n                ans += delta\n                res.append(nums[i - 1])\n                start = nums[i - 1]\n                dir = -1\n        elif nums[i] <= nums[i - 1]:\n            continue\n        else:\n            delta = start - nums[i - 1]\n            ans += delta\n            start = nums[i - 1]\n            dir = 1\n            res.append(nums[i - 1])\n    ans += abs(start - nums[n - 1])\n    res.append(nums[n - 1])\n    print(len(res))\n    for i in range(len(res)):\n        print(res[i], end=' ')\n    print('')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    data = list(map(int, input().split()))\n    diff = []\n    up = 0\n    for j in range(n):\n        if j == 0:\n            diff.append(str(data[j]))\n        elif j == 1:\n            if data[j] > data[j - 1]:\n                up = 1\n            else:\n                up = 0\n        elif up == 1 and data[j] < data[j - 1]:\n            up = 0\n            diff.append(str(data[j - 1]))\n        elif up == 0 and data[j] > data[j - 1]:\n            up = 1\n            diff.append(str(data[j - 1]))\n    diff.append(str(data[n - 1]))\n    print(len(diff))\n    reem = ' '.join(diff)\n    print(reem)", "def solve(n, l):\n    x = [str(l[0])]\n    if n <= 2:\n        x = [str(l[0]), str(l[1])]\n        return x\n    for i in range(1, n - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1] or (l[i] < l[i - 1] and l[i] < l[i + 1]):\n            x.append(str(l[i]))\n    x.append(str(l[n - 1]))\n    return x\nt = int(input())\nfor we in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = solve(n, l)\n    print(len(x))\n    print(' '.join(x))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l2 = [l[0]]\n    for i in range(1, n - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1] or (l[i] < l[i - 1] and l[i] < l[i + 1]):\n            l2.append(l[i])\n    l2.append(l[-1])\n    print(len(l2))\n    print(' '.join(map(str, l2)))", "from math import fabs\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        ara = [int(num) for num in input().split()]\n        if n == 2:\n            ans = ara\n        else:\n            ans = []\n            ans.append(ara[0])\n            left = 0\n            mid = 1\n            right = 2\n            while right < n:\n                if fabs(ara[left] - ara[mid]) + fabs(ara[mid] - ara[right]) > fabs(ara[left] - ara[right]):\n                    ans.append(ara[mid])\n                    left = mid\n                mid = right\n                right += 1\n            ans.append(ara[mid])\n        print(len(ans))\n        ans = ' '.join(map(str, ans))\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        if i == 0 or i == n - 1 or (a[i] > a[i - 1]) != (a[i + 1] > a[i]):\n            l.append(a[i])\n    print(len(l))\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    l.append(a[0])\n    (lo, hi) = (0, 1)\n    temp = a[0]\n    while hi < n:\n        while hi < n and temp < a[hi]:\n            temp = a[hi]\n            hi += 1\n        if l[-1] != a[hi - 1]:\n            l.append(a[hi - 1])\n        while hi < n and temp > a[hi]:\n            temp = a[hi]\n            hi += 1\n        if l[-1] != a[hi - 1]:\n            l.append(a[hi - 1])\n    print(len(l))\n    print(*l)", "t = int(input())\nfor test in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [a[0]]\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans.append(a[i])\n        if a[i] < a[i - 1] and a[i] < a[i + 1]:\n            ans.append(a[i])\n    ans.append(a[n - 1])\n    print(len(ans))\n    print(*ans, sep=' ')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lstf = [lst[0]]\n    ind = 0\n    while True:\n        if ind >= n - 1:\n            break\n        else:\n            ind1 = -1\n            for j in range(ind + 1, n):\n                if lst[j] >= lst[j - 1] and j + 1 < n and (lst[j] > lst[j + 1]) or (lst[j] <= lst[j - 1] and j + 1 < n and (lst[j] < lst[j + 1])):\n                    ind1 = j\n                    break\n            if ind1 == -1:\n                ind = n - 1\n                lstf.append(lst[ind])\n            else:\n                ind = ind1\n                lstf.append(lst[ind])\n    if lstf[-1] == lstf[-2]:\n        lstf.pop()\n    print(len(lstf))\n    print(*lstf)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]] + [a[i] for i in range(1, n - 1) if not (a[i - 1] < a[i] < a[i + 1] or a[i - 1] > a[i] > a[i + 1])] + [a[-1]]\n    print(len(b))\n    print(*b)", "for t in range(int(input())):\n    n = int(input())\n    per = list(map(int, input().split()))\n    cur = per[0]\n    ans = [str(per[0])]\n    if per[0] < per[1]:\n        sign = 1\n    else:\n        sign = -1\n    for i in range(1, n - 1):\n        if per[i + 1] > per[i]:\n            cur_sign = 1\n        else:\n            cur_sign = -1\n        if cur_sign == sign:\n            pass\n        else:\n            sign = cur_sign\n            ans += [str(per[i])]\n    if str(per[-1]) != ans[-1]:\n        ans += [str(per[-1])]\n    print(len(ans))\n    print(' '.join(ans))", "for i in range(int(input())):\n    l = input()\n    p = [int(i) for i in input().split()]\n    r = p[0:1]\n    a = p[0]\n    great = False\n    less = False\n    for i in p[1:]:\n        if i > a:\n            if less:\n                r.append(a)\n                less = False\n            great = True\n        else:\n            if great:\n                r.append(a)\n                great = False\n            less = True\n        a = i\n    print(len(r) + 1)\n    print(*r, a)", "from collections import Counter as ctr\nfrom collections import defaultdict as dd\nfrom sys import stdin, stdout\nfor t in range(int(stdin.readline().strip())):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 2:\n        print(2)\n        print(a[0], a[1])\n        continue\n    b = [[a[i], True] for i in range(n)]\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] < a[i + 1] or a[i - 1] > a[i] > a[i + 1]:\n            b[i][1] = False\n            k += 1\n    print(n - k)\n    for i in range(n):\n        if b[i][1]:\n            print(b[i][0], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    seq = [arr[0], arr[1]]\n    inc = 1 if arr[1] >= arr[0] else -1\n    for i in range(2, n):\n        if inc == 1:\n            if arr[i] >= arr[i - 1]:\n                seq[-1] = arr[i]\n            else:\n                inc = -1\n                seq.append(arr[i])\n        elif arr[i] <= arr[i - 1]:\n            seq[-1] = arr[i]\n        else:\n            inc = 1\n            seq.append(arr[i])\n    print(len(seq))\n    print(*seq)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for x in map(int, input().split()):\n        if len(a) >= 2 and (a[-2] < a[-1] < x or a[-2] > a[-1] > x):\n            a.pop()\n        a += (x,)\n    print(len(a))\n    print(*a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = [arr[0]]\n    for i in range(1, n - 1):\n        if arr[i] > arr[i + 1] and arr[i] > arr[i - 1]:\n            res.append(arr[i])\n        if arr[i] < arr[i + 1] and arr[i] < arr[i - 1]:\n            res.append(arr[i])\n    res.append(arr[n - 1])\n    ans = list(map(str, res))\n    print(len(ans))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    x = int(input())\n    (*li,) = map(int, input().split())\n    li1 = [li[0]]\n    for i in range(1, x - 1):\n        if li[i] > li[i - 1] and li[i] > li[i + 1]:\n            li1.append(li[i])\n        elif li[i] < li[i - 1] and li[i] < li[i + 1]:\n            li1.append(li[i])\n    li1.append(li[-1])\n    print(len(li1))\n    print(*li1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max = -1\n    l = []\n    l.append(a[0])\n    for i in range(1, n - 1):\n        if a[i] < a[i - 1] and a[i] < a[i + 1] or (a[i] > a[i - 1] and a[i] > a[i + 1]):\n            l.append(a[i])\n    l.append(a[n - 1])\n    print(len(l))\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [arr[0]]\n    for i in range(1, n):\n        if i == n - 1 or (arr[i - 1] > arr[i]) != (arr[i] > arr[i + 1]):\n            ans.append(arr[i])\n    print(len(ans))\n    print(*ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    out = [str(a[0])]\n    if a[1] > a[0]:\n        u = True\n    else:\n        u = False\n    for i in range(1, n - 1):\n        if a[i + 1] > a[i]:\n            u1 = True\n        else:\n            u1 = False\n        if u ^ u1:\n            out.append(str(a[i]))\n        u = u1\n    print(len(out) + 1)\n    print(' '.join(out), a[-1])", "def solve_test_case(t):\n    n = int(input())\n    p = parse_array(int)\n    res = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] >= p[i - 1] and p[i + 1] >= p[i]:\n            pass\n        elif p[i] <= p[i - 1] and p[i + 1] <= p[i]:\n            pass\n        else:\n            res.append(p[i])\n    if n > 1:\n        res.append(p[-1])\n    print(len(res))\n    print(' '.join(list(map(str, res))))\n\ndef parse_array(f):\n    return list(map(f, input().split()))\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        solve_test_case(t)\nsolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    b = [a[0]]\n    flag = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if flag == -1:\n                b.append(a[i - 1])\n            flag = 1\n        elif a[i] < a[i - 1]:\n            if flag == 1:\n                b.append(a[i - 1])\n            flag = -1\n    if a[n - 2] != a[n - 1]:\n        b.append(a[n - 1])\n    print(len(b))\n    print(*b)", "def run():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        num = [int(j) for j in input().split()]\n        ans = [num[0]]\n        aux = num[1]\n        decre = aux > num[0]\n        for i in range(2, n):\n            if num[i] > aux:\n                if not decre:\n                    ans.append(aux)\n                    decre = not decre\n            elif decre:\n                ans.append(aux)\n                decre = not decre\n            aux = num[i]\n        ans.append(aux)\n        print(len(ans))\n        print(*ans)\nrun()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    if n == 2:\n        print(2)\n        print(a[0], a[1])\n        continue\n    count = 0\n    if a[0] != a[1]:\n        s = f'{a[0]} '\n        count += 1\n    else:\n        s = ''\n    for i in range(1, n - 1):\n        if a[i] >= a[i + 1] and a[i] >= a[i - 1] and (a[i - 1] != a[i + 1]) or (a[i] <= a[i + 1] and a[i] <= a[i - 1] and (a[i - 1] != a[i + 1])):\n            s += f'{a[i]} '\n            count += 1\n    if a[n - 1] != a[n - 2]:\n        s += f'{a[n - 1]}'\n        count += 1\n    elif len(s) == 0:\n        s = f'{a[0]} {a[0]}'\n        count = 2\n    print(count)\n    print(s)", "t = int(input(''))\nmat = []\nfor i in range(t):\n    input('')\n    mat.append(list(map(int, input().split())))\nfor i in range(t):\n    x = mat[i]\n    n = len(x)\n    j = 0\n    ans = []\n    while j < n:\n        if j == 0 or j == n - 1:\n            ans.append(x[j])\n        else:\n            maxx = max(x[j - 1], x[j], x[j + 1])\n            minn = min(x[j - 1], x[j], x[j + 1])\n            if x[j] == maxx or x[j] == minn:\n                ans.append(x[j])\n        j = j + 1\n    print(len(ans))\n    print(*ans)", "def rle(arr):\n    rle = []\n    for i in arr:\n        if len(rle) == 0:\n            rle.append([i, 1])\n        elif rle[-1][0] == i:\n            rle[-1][1] += 1\n        else:\n            rle.append([i, 1])\n    return rle\n\ndef solve():\n    n = input()\n    a = [int(x) for x in input().split()]\n    diff = [1 if x > y else -1 for (x, y) in zip(a[1:], a[:-1])]\n    diff = rle(diff)\n    finalarr = [str(a[0])]\n    index = 0\n    for (_, group) in diff:\n        index += group\n        finalarr.append(str(a[index]))\n    assert index == len(a) - 1\n    print(len(finalarr))\n    print(' '.join(finalarr))\n    return\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n    return\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(s) for s in input().split()]\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            ans.append(p[i])\n        elif p[i] < p[i - 1] and p[i] < p[i + 1]:\n            ans.append(p[i])\n    ans.append(p[-1])\n    print(len(ans))\n    print(*ans)", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lst = [a[0]]\n    f = 0\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1] or (a[i] < a[i - 1] and a[i] < a[i + 1]):\n            lst.append(a[i])\n    lst.append(a[-1])\n    print(len(lst))\n    print(*lst)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = [a[0]]\n    l = 1\n    if a[1] > a[0]:\n        flag = 1\n    else:\n        flag = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1] and flag == 0:\n            ans.append(a[i - 1])\n            l += 1\n            flag = 1\n        elif a[i] < a[i - 1] and flag == 1:\n            ans.append(a[i - 1])\n            l += 1\n            flag = 0\n    ans.append(a[n - 1])\n    l += 1\n    print(l)\n    print(*ans)", "def mnm(i):\n    k = i + 1\n    while k < n:\n        if arr[k] > arr[k - 1]:\n            return k - 1\n        k += 1\n    else:\n        return k - 1\n\ndef mxm(i):\n    k = i + 1\n    while k < n:\n        if arr[k] < arr[k - 1]:\n            return k - 1\n        k += 1\n    else:\n        return k - 1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = [arr[0]]\n    i = 0\n    while i < n:\n        if i == n - 1:\n            break\n        if arr[i + 1] > arr[i]:\n            mx_ind = mxm(i)\n            temp.append(arr[mx_ind])\n            i = mx_ind\n        else:\n            mn_ind = mnm(i)\n            temp.append(arr[mn_ind])\n            i = mn_ind\n    print(len(temp))\n    print(*temp)", "t = int(input())\nfor _ in range(t):\n    input()\n    a = list(map(int, input().split()))\n    b = [0] * len(a)\n    for i in range(1, len(b)):\n        if a[i] > a[i - 1]:\n            b[i] = 1\n        elif a[i] == a[i - 1]:\n            b[i] = 0\n        else:\n            b[i] = -1\n    ans = [str(a[0])]\n    b[0] = b[1]\n    for i in range(1, len(a) - 1):\n        if b[i] == 0:\n            continue\n        if b[i] != b[i + 1]:\n            ans.append(str(a[i]))\n    ans.append(str(a[-1]))\n    print(len(ans))\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ans = []\n    maxi = max(ar)\n    mini = min(ar)\n    to_beat = maxi - mini\n    if ar[1] > ar[0]:\n        direction = 'd'\n    else:\n        direction = 'u'\n    ans.append(ar[0])\n    for i in range(1, n):\n        if direction == 'u':\n            if ar[i] > ans[-1]:\n                ans[-1] = ar[i]\n            elif ar[i] < ans[-1]:\n                ans.append(ar[i])\n                direction = 'd'\n        elif ar[i] < ans[-1]:\n            ans[-1] = ar[i]\n        elif ar[i] > ans[-1]:\n            ans.append(ar[i])\n            direction = 'u'\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    li = [ar[0], ar[1]]\n    for i in range(2, n):\n        if (ar[i] - li[-1]) * (li[-1] - li[-2]) >= 0:\n            li[-1] = ar[i]\n        else:\n            li.append(ar[i])\n    print(len(li))\n    print(*li)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    t = p[1]\n    if p[0] > t:\n        current = -1\n    else:\n        current = 1\n    for x in p[2:]:\n        if current == 1:\n            if t < x:\n                t = x\n            else:\n                ans.append(t)\n                t = x\n                current = -1\n        elif t > x:\n            t = x\n        else:\n            ans.append(t)\n            t = x\n            current = 1\n    ans.append(p[-1])\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    if a[1] > a[0]:\n        check = True\n    else:\n        check = False\n    for i in range(1, n - 1):\n        if a[i + 1] > a[i] and (not check):\n            b.append(a[i])\n            check = True\n        elif a[i + 1] < a[i] and check:\n            b.append(a[i])\n            check = False\n    if a[-1] != a[-2]:\n        b.append(a[-1])\n    print(len(b))\n    for i in b:\n        print(i, end=' ')\n    print()", "t = int(input())\nwhile t:\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    l2.append(l1[0])\n    count = 1\n    for i in range(1, n - 1):\n        if l1[i] > l1[i - 1] and l1[i] < l1[i + 1] or (l1[i] < l1[i - 1] and l1[i] > l1[i + 1]):\n            pass\n        else:\n            l2.append(l1[i])\n            count = count + 1\n    l2.append(l1[-1])\n    count = count + 1\n    print(count)\n    print(*l2)\n    t = t - 1"]