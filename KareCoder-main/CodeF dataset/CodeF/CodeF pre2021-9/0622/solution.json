["def doWork():\n    n = int(input())\n    a = map(int, input().split())\n    balance = 0\n    total = 0\n    stack = []\n    for (i, x) in enumerate(a):\n        if i % 2 == 0:\n            balance += x\n            continue\n        total += min(x, balance)\n        balance = balance - x\n        while stack and stack[-1][0] > balance:\n            last = stack[-1]\n            total += last[1]\n            if last[0] == balance:\n                last[1] += 1\n                break\n            else:\n                stack.pop()\n        if stack and stack[-1][0] == balance:\n            total += stack[-1][1]\n            stack[-1][1] += 1\n        elif balance >= 0:\n            stack.append([balance, 1])\n        balance = max(0, balance)\n    print(total)\ndoWork()", "n = int(input())\na = list(map(int, input().split()))\ns = []\nanswer = 0\nfor i in range(n):\n    if i % 2 == 0:\n        if len(s) == 0 or s[-1][0] != '(':\n            s.append(['(', a[i]])\n        else:\n            s[-1][1] += a[i]\n    else:\n        while len(s) > 0:\n            if len(s) > 0 and s[-1][0] == '(':\n                if s[-1][1] <= a[i]:\n                    a[i] -= s[-1][1]\n                    s[-1][0] = '()'\n                else:\n                    s[-1][1] -= a[i]\n                    s.append(['()', a[i]])\n                    a[i] = 0\n            if a[i] == 0:\n                break\n            accu = 0\n            while len(s) > 0 and s[-1][0] == '()':\n                answer += s[-1][1] + accu\n                s.pop()\n                accu += 1\naccu = 0\nwhile len(s) > 0:\n    if s[-1][0] == '()':\n        answer += s[-1][1] + accu\n        accu += 1\n        s.pop()\n    else:\n        accu = 0\n        s.pop()\nprint(answer)", "N = int(input())\nC = list(map(int, input().split()))\nans = 0\nstack = [[0, 0]]\nnow = pre = mn = 0\nfor (i, c) in enumerate(C):\n    if i % 2 == 0:\n        pre = now\n        now += c\n    else:\n        pre = now\n        now -= c\n        ans += pre - max(now, mn)\n        is_mn = False\n        if mn > now:\n            mn = now\n            is_mn = True\n        while stack and stack[-1][0] > now:\n            (_, v) = stack.pop()\n            ans += v\n        if stack and stack[-1][0] == now:\n            stack[-1][1] += 1\n            ans += stack[-1][1] - 1\n        elif is_mn:\n            stack.append([now, 0])\n        else:\n            stack.append([now, 1])\nprint(ans)", "def sol():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = 0\n    for pocz in range(0, n, 2):\n        nasze = arr[pocz]\n        reszta = 0\n        skonczone = 0\n        wyn = 0\n        for i in range(pocz, n):\n            if not i % 2:\n                if i != pocz:\n                    reszta += arr[i]\n            else:\n                my = arr[i]\n                ile = min(reszta, my)\n                my -= ile\n                reszta -= ile\n                if not reszta and ile and skonczone:\n                    wyn += 1\n                if my and nasze:\n                    x = min(my, nasze)\n                    wyn += x\n                    my -= x\n                    nasze -= x\n                    skonczone += 1\n                if my:\n                    break\n        ans += wyn\n    print(ans)\nsol()", "n = int(input())\nc = list(map(int, input().split()))\nans = 0\nfor j in range(0, n, 2):\n    boo = c[j]\n    remain = 0\n    for i in range(j, n):\n        if i % 2 == 0:\n            remain += c[i]\n        else:\n            remain -= c[i]\n            if remain <= boo:\n                ans += boo - max(remain, 0)\n                boo = min(remain + 1, boo)\n            if remain < 0:\n                break\nprint(ans)", "n = int(input().strip())\na = [int(x) for x in input().strip().split(' ')]\nans = 0\nfor i in range(0, n, 2):\n    now = 0\n    mn_now = a[i] - 1\n    for j in range(i, n):\n        if j & 1:\n            pre_now = now\n            now -= a[j]\n            ans += max(0, min(pre_now, mn_now + 1) - max(0, now))\n            mn_now = min(mn_now, now)\n        else:\n            now += a[j]\n        if mn_now < 0:\n            break\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nif n & 1:\n    n -= 1\nans = 0\nfor i in range(0, n, 2):\n    now = low = a[i] - a[i + 1]\n    ans += min(a[i], a[i + 1])\n    for j in range(i + 2, n, 2):\n        now += a[j] - a[j + 1]\n        if now >= 0:\n            tmp = a[i] - now\n            ans += max(min(low - now, tmp, a[j + 1]), -1) + 1\n        else:\n            tmp = a[j + 1] + now\n            ans += max(min(low, a[i], tmp), -1) + 1\n        low = min(low, now)\n        if low < 0:\n            break\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nif n % 2 == 1:\n    n = n - 1\nans = 0\nfor i in range(0, n, 2):\n    pre = qwq = a[i] - a[i + 1]\n    ans += min(a[i], a[i + 1])\n    for j in range(i + 2, n, 2):\n        pre += a[j] - a[j + 1]\n        if pre >= 0:\n            awa = a[i] - pre\n            ans += max(min(qwq - pre, min(awa, a[j + 1])), -1) + 1\n        else:\n            awa = a[j + 1] + pre\n            ans += max(min(qwq, min(a[i], awa)), -1) + 1\n        qwq = min(qwq, pre)\n        if qwq <= -1:\n            break\nprint(ans)", "n = int(input().strip())\na = [int(x) for x in input().strip().split(' ')]\nans = 0\nfor i in range(0, n, 2):\n    now = 0\n    mn_now = a[i] - 1\n    for j in range(i, n):\n        if j & 1:\n            pre_now = now\n            now -= a[j]\n            ans += max(0, min(pre_now, mn_now + 1) - max(0, now))\n            mn_now = min(mn_now, now)\n        else:\n            now += a[j]\n        if mn_now < 0:\n            break\nprint(ans)", "def overlap(min1, max1, min2, max2):\n    if max1 < min2 or max2 < min1:\n        return 0\n    return max(0, min(max1, max2) - max(min1, min2)) + 1\nn = int(input())\narr = list(map(int, input().split()))\nans = 0\nli = []\nfor i in range(0, n, 2):\n    temp = 0\n    a = 0\n    b = arr[i] - 1\n    temp += arr[i]\n    flag = 0\n    ans = 0\n    for j in range(i + 1, n):\n        (c, d) = (0, 0)\n        if j % 2 == 0:\n            temp += arr[j]\n        else:\n            c = temp - 1\n            d = temp - arr[j]\n            temp -= arr[j]\n            ans += overlap(a, b, d, c)\n            b = min(b, temp)\n        if temp < 0:\n            break\n    li.append(ans)\nprint(sum(li))", "n = int(input())\narr = list(map(int, input().split()))\nap = []\nans = 0\nfor i in range(0, n - 1, 2):\n    mn = 0\n    c = 0\n    for j in range(i + 1, n, 2):\n        if j - i > 1:\n            mn = min(mn, c - arr[j - 2])\n            c += arr[j - 1] - arr[j - 2]\n        ans += max(-1, min(arr[i] + mn, arr[j] + mn - c)) + (j - i > 1)\nprint(ans)", "n = int(input())\na = [*map(int, input().split())]\nt = 0\nfor l in range(0, n, 2):\n    mn = 0\n    c = 0\n    for r in range(l + 1, n, 2):\n        if r - l > 1:\n            mn = min(mn, c - a[r - 2])\n            c += a[r - 1] - a[r - 2]\n        t += max(-1, min(a[l] + mn, a[r] + mn - c)) + (r - l > 1)\nprint(t)", "n = int(input())\narr = list(map(int, input().split()))\nap = []\nans = 0\nfor i in range(0, n - 1, 2):\n    mn = 0\n    c = 0\n    for j in range(i + 1, n, 2):\n        if j - i > 1:\n            mn = min(mn, c - arr[j - 2])\n            c += arr[j - 1] - arr[j - 2]\n        ans += max(-1, min(arr[i] + mn, arr[j] + mn - c)) + (j - i > 1)\nprint(ans)", "n = int(input())\na = [*map(int, input().split())]\nt = 0\nfor l in range(0, n, 2):\n    mn = 0\n    c = 0\n    for r in range(l + 1, n, 2):\n        if r - l > 1:\n            mn = min(mn, c - a[r - 2])\n            c += a[r - 1] - a[r - 2]\n        t += max(-1, min(a[l] + mn, a[r] + mn - c)) + (r - l > 1)\nprint(t)", "n = int(input())\na = [*map(int, input().split())]\nt = 0\nfor l in range(0, n, 2):\n    mn = 0\n    c = 0\n    for r in range(l + 1, n, 2):\n        if r - l > 1:\n            mn = min(mn, c - a[r - 2])\n            c += a[r - 1] - a[r - 2]\n        t += max(-1, min(a[l] + mn, a[r] + mn - c)) + (r - l > 1)\nprint(t)", "n = int(input())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(0, n, 2):\n    st = [0, arr[i] - 1]\n    curr = 0\n    for j in range(i + 1, n, 2):\n        en = [curr + arr[j - 1] - arr[j], curr + arr[j - 1] - 1]\n        curr += arr[j - 1] - arr[j]\n        r1 = max(en[0], st[0])\n        r2 = min(en[1], st[1])\n        ans += max(r2 - r1 + 1, 0)\n        if en[0] < 0:\n            break\n        st[1] = min(st[1], en[0])\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(0, n, 2):\n    st = [0, arr[i] - 1]\n    curr = 0\n    for j in range(i + 1, n, 2):\n        en = [curr + arr[j - 1] - arr[j], curr + arr[j - 1] - 1]\n        curr += arr[j - 1] - arr[j]\n        r1 = max(en[0], st[0])\n        r2 = min(en[1], st[1])\n        ans += max(r2 - r1 + 1, 0)\n        if en[0] < 0:\n            break\n        st[1] = min(st[1], en[0])\nprint(ans)", "n = int(input())\nc = list(map(int, input().split()))\nc.insert(0, 0)\nans = 0\nfor i in range(1, n + 1, 2):\n    (bal, lo) = (0, 1)\n    for j in range(i + 1, n + 1):\n        if j % 2 == 0:\n            L = lo\n            R = max(1, bal + lo)\n            ans += max(0, min(c[i] - L + 1, c[j] - R + 1))\n            bal -= c[j]\n        else:\n            bal += c[j]\n        lo = max(lo, -bal)\nprint(ans)", "n = int(input())\nc = [int(x) for x in input().split()]\nans = 0\nfor i in range(0, n, 2):\n    dt = 0\n    s = 0\n    for j in range(i + 1, n):\n        if j & 1:\n            L = max(1, -s)\n            R = c[i]\n            if L <= R:\n                L += dt\n                R += dt\n                L = max(L, 1)\n                R = min(R, c[j])\n                ans += max(0, R - L + 1)\n            dt -= c[j]\n        else:\n            dt += c[j]\n        s = min(s, dt)\nprint(ans)"]