["import math\nimport sys\nfrom collections import deque\nimport heapq\nfrom collections import Counter\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\ndef mpp():\n    return map(int, inp().split())\n\ndef lis():\n    return list(mpp())\n\ndef sol(n, k):\n    s = ['a'] * n\n    for i in range(n - 2, -1, -1):\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            s = ''.join(s)\n            print(s)\n            break\n        k -= n - i - 1\n\ndef main():\n    t = int(inp())\n    for _ in range(t):\n        (a, b) = mpp()\n        sol(a, b)\nmain()", "for g in [*open(0)][1:]:\n    (n, k) = map(int, g.split())\n    i = 1\n    k -= 1\n    while i <= k:\n        k = k - i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k - 1) + 'b' + 'a' * k)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    j = 0\n    i = 0\n    while i < b:\n        j += 1\n        i += j\n    i -= j\n    l = ['a'] * a\n    l[~j] = 'b'\n    l[~(b - i - 1)] = 'b'\n    print(''.join(l))", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    j = 0\n    i = 0\n    while i < b:\n        j += 1\n        i += j\n    i -= j\n    l = ['a'] * a\n    l[~j] = 'b'\n    l[~(b - i - 1)] = 'b'\n    print(''.join(l))", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    j = 0\n    i = 0\n    while i < b:\n        j += 1\n        i += j\n    i -= j\n    l = ['a'] * a\n    l[~j] = 'b'\n    l[~(b - i - 1)] = 'b'\n    print(''.join(l))", "f = lambda x: 2 * (2 * x + 1 / 4) ** 0.5 - 1\ng = lambda x: int(f(x - 1) / 2)\nh = lambda x: x * (x + 1) / 2\nt = lambda x: (x - 1) % h(g(x))\nceil = lambda x: x if int(x) == x else int(x + 1)\nm1 = lambda x: int([0, 0, 1, 0, 1, 2][ceil(x) - 1] if 1 <= x <= 3 else t(x))\nm2 = lambda x: int((2 * x) ** 0.5 + 0.5)\n\ndef final(x, length):\n    s = list('a' * length)\n    s[-m1(x) - 1] = 'b'\n    s[-m2(x) - 1] = 'b'\n    return ''.join(s)\nprint('\\n'.join([final(*list(map(int, input().split(' ')[::-1]))) for i in range(int(input()))]))", "from math import sqrt\n\ndef string_k(n, k):\n    value = round(sqrt(k * 2))\n    positionOfb1 = n - value - 1\n    positionOfb2 = n - k + value * (value - 1) // 2\n    return 'a' * positionOfb1 + 'b' + 'a' * (positionOfb2 - positionOfb1 - 1) + 'b' + 'a' * (n - positionOfb2 - 1)\nn_cases = int(input())\n[print(string_k(nk[0], nk[1])) for nk in [tuple(map(int, input().split(' '))) for x in range(n_cases)]]", "t = int(input())\nlist_ans = []\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    for s in range(1, x + 1):\n        if s * (s + 1) // 2 >= y:\n            break\n    m = y - s * (s - 1) // 2\n    str1 = 'a' * (x - s - 1) + 'b' + 'a' * (s + 1 - m - 1) + 'b' + 'a' * (m - 1)\n    list_ans.append(str1)\nfor item in list_ans:\n    print(item)", "t = int(input())\nanswers = []\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    diap = 0\n    pos = 0\n    for g in range(n):\n        if g * (g - 1) // 2 < k <= (g + 1) * g // 2:\n            diap = g + 1\n            pos = k - g * (g - 1) // 2\n    answer = list('a' * n)\n    answer[-diap] = 'b'\n    answer[-pos] = 'b'\n    answers.append(''.join(answer))\nprint('\\n'.join(answers))", "def get_num(n, k):\n    f_num = s_num = 1\n    for i in range(1, n):\n        f_num = s_num\n        s_num = f_num + i\n        if s_num > k:\n            return (i, f_num)\n\ndef main():\n    result = str()\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        r = ['a'] * n\n        position = get_num(n, k)\n        r[position[0]] = 'b'\n        r[k - position[1]] = 'b'\n        r.reverse()\n        result += f\"{''.join(r)}\\n\"\n    print(result.strip())\nmain()", "def answer(n, k):\n    count = 1\n    lpos = 2\n    rpos = 1\n    while count < k:\n        count += 1\n        if rpos == lpos - 1:\n            lpos += 1\n            rpos = 1\n        else:\n            rpos += 1\n    s = ['a'] * n\n    s[n - lpos] = 'b'\n    s[n - rpos] = 'b'\n    return s\n\ndef clist(n):\n    lst = []\n    sum = 0\n    for i in range(n):\n        sum += i\n        lst.append(sum)\n    return lst\n\ndef answer2(n, k):\n    count = 1\n    lpos = 2\n    rpos = 1\n    while count < k:\n        if k - count > lpos - rpos - 1:\n            count += lpos - rpos\n            lpos += 1\n        else:\n            rpos += k - count\n            count += k - count\n    s = ['a'] * n\n    s[n - lpos] = 'b'\n    s[n - rpos] = 'b'\n    return s\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    k = [0] * t\n    for j in range(t):\n        (n[j], k[j]) = [int(i) for i in input().split()]\n    for j in range(t):\n        print(''.join(answer2(n[j], k[j])))\nmain()", "import math\n\ndef kthBeautifulString(n, k):\n    s = ['a'] * n\n    r_dash = (-0.5 + (0.5 ** 2 + 4 * 0.5 * k) ** 0.5) / (2 * 0.5)\n    r = int(r_dash)\n    if r == r_dash:\n        (s[n - r], s[n - r - 1]) = ('b', 'b')\n        return ''.join(s)\n    a = r + 2\n    b = k - int(r ** 2 * 0.5 + r * 0.5)\n    s[n - a] = 'b'\n    s[n - b] = 'b'\n    return ''.join(s)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(kthBeautifulString(n, k))", "from math import floor, sqrt\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    pos = (1 + floor(sqrt(1 + 8 * (k - 1)))) // 2 + 1\n    palavra = ['a'] * pos\n    palavra[0] = 'b'\n    pos1 = pos * (pos - 1) // 2 - k + 1\n    palavra[pos1] = 'b'\n    print(''.join(palavra).rjust(n, 'a'))", "import math\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        z = math.ceil((math.sqrt(8 * k + 1) - 1) / 2)\n        k -= z * (z - 1) // 2\n        print('a' * (n - z - 1) + 'b' + 'a' * (z - k) + 'b' + 'a' * (k - 1))\nmain()", "def get_num(n, k):\n    f_num = s_num = 1\n    for i in range(1, n):\n        f_num = s_num\n        s_num = f_num + i\n        if s_num > k:\n            return (i, f_num)\n\ndef main():\n    result = str()\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        r = ['a'] * n\n        position = get_num(n, k)\n        r[position[0]] = 'b'\n        r[k - position[1]] = 'b'\n        r.reverse()\n        result += f\"{''.join(r)}\\n\"\n    print(result.strip())\nmain()", "import math\nres = ''\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = math.ceil(((1 + 8 * k) ** 0.5 - 1) / 2)\n    y = x - 1 - ((x + 1) * x // 2 - k)\n    res += 'a' * (n - x - 1) + 'b' + 'a' * (x - y - 1) + 'b' + 'a' * y + '\\n'\nprint(res)", "import sys\nsys.setrecursionlimit(100000)\nn = int(input())\nfor _ in range(n):\n    (N, K) = map(int, sys.stdin.readline().split())\n    ch = ['a'] * N\n    for i in range(N - 2, -1, -1):\n        numOfLeftInIPos = N - 1 - i\n        if K <= numOfLeftInIPos:\n            ch[i] = 'b'\n            ch[N - K] = 'b'\n            print(''.join(ch))\n            break\n        K -= numOfLeftInIPos", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    i = 1\n    while m > i:\n        m -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - m) + 'b' + 'a' * (m - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        if k <= i:\n            break\n        k = k - i\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "from math import floor, sqrt\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    pos = (1 + floor(sqrt(1 + 8 * (k - 1)))) // 2 + 1\n    palavra = ['a'] * pos\n    palavra[0] = 'b'\n    pos1 = pos * (pos - 1) // 2 - k + 1\n    palavra[pos1] = 'b'\n    print(''.join(palavra).rjust(n, 'a'))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = 1\n    while l < k:\n        k -= l\n        l += 1\n    res = 'a' * (n - l - 1) + 'b' + 'a' * (l - k) + 'b' + 'a' * (k - 1)\n    print(res)", "def cal(n, k):\n    first = 1\n    while k > first:\n        k -= first\n        first += 1\n    return 'a' * (n - first - 1) + 'b' + (first - k) * 'a' + 'b' + (k - 1) * 'a'\nt = int(input())\nfor i in range(t):\n    (_n, _k) = [int(x) for x in input().split()]\n    print(cal(_n, _k))", "for _ in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    x = int(((8 * k + 1) ** 0.5 + 1) / 2)\n    y = x * (x - 1) // 2\n    if k == y:\n        print('a' * (n - x) + 'b' * 2 + 'a' * (x - 2))\n    if k != y:\n        print('a' * (n - x - 1) + 'b' + 'a' * (x - k + y) + 'b' + 'a' * (k - y - 1))", "def solve():\n    (n, k) = map(int, input().split())\n    s = ['a'] * n\n    for i in range(n - 2, -1, -1):\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            return ''.join(s)\n        k -= n - i - 1\nfor i in range(int(input())):\n    print(solve())", "for _ in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        if k <= i:\n            break\n        k = k - i\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "results = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = int((k * 2) ** 0.5)\n    if x * (x + 1) >= k * 2:\n        a = x\n    else:\n        a = x + 1\n    x = a * (a + 1) // 2\n    r = x - k\n    line1 = 'a' * n\n    line2 = line1[:n - a - 1] + 'b' + line1[n - a:n - a + r] + 'b' + line1[n - a + r + 1:]\n    results.append(line2)\nprint('\\n'.join(results))", "results = ''\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = int((k * 2) ** 0.5)\n    if x * (x + 1) >= k * 2:\n        a = x\n    else:\n        a = x + 1\n    x = a * (a + 1) // 2\n    r = x - k\n    line = 'a' * (n - a - 1) + 'b' + 'a' * r + 'b' + 'a' * (a - r - 1)\n    results += line + '\\n'\nprint(results[:-1])", "from math import sqrt\nb = int(input())\nnn = []\nkk = []\nfor _ in range(b):\n    buf = input().split(' ')\n    nn.append(int(buf[0]))\n    kk.append(int(buf[1]))\nfor (n, k) in zip(nn, kk):\n    buf = int(sqrt(1 + 8 * k))\n    x = (1 + buf) // 2\n    if x * (x - 1) // 2 == k:\n        x = x - 1\n    pos1 = n - 1 - x\n    pos2 = n - (k - x * (x - 1) // 2)\n    s = ['a'] * n\n    s[pos1] = 'b'\n    s[pos2] = 'b'\n    print(''.join(s))", "n = int(input())\no = []\nfor i in range(n):\n    (x, y) = [int(x) for x in input().split()]\n    j = 1\n    while j * (j - 1) // 2 < y:\n        j += 1\n    i = y - (j - 1) * (j - 2) // 2\n    u = ['a'] * x\n    u[x - i] = 'b'\n    u[x - j] = 'b'\n    o += [''.join(u)]\nprint('\\n'.join(o))", "t = int(input())\n\ndef f(n, k):\n    ans = ''\n    p = 2\n    while k > p - 1:\n        k = k - (p - 1)\n        p += 1\n    f1 = n - p\n    s2 = n - k\n    if f1 > s2:\n        ver = 0\n        ver = s2\n        s2 = f1\n        f1 = ver\n    ans += 'a' * f1\n    ans += 'b'\n    ans += 'a' * (s2 - f1 - 1)\n    ans += 'b'\n    ans += 'a' * (n - s2 - 1)\n    return ans\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(f(n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = 'a' * n\n    for i in range(1, n):\n        if k <= i * (i + 1) // 2:\n            j = k - i * (i - 1) // 2\n            break\n    ans = s[:n - i - 1] + 'b' + s[n - i:n - j] + 'b' + s[n - j + 1:]\n    print(ans)", "def permutacoes(n, k):\n    s = 'a' * n\n    s = list(s)\n    max = int(n * (n - 1) / 2)\n    for i in range(n - 1, -1, -1):\n        if k <= max:\n            k += i\n        else:\n            index1 = n - i - 2\n            index2 = n - (k - max)\n            break\n    s[index1] = 'b'\n    s[index2] = 'b'\n    return ''.join(s)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        entrada = input()\n        entrada = entrada.split(' ')\n        n = int(entrada[0])\n        k = int(entrada[1])\n        print(permutacoes(n, k))\nmain()", "x = int(input())\nfor t in range(x):\n    (n, m) = map(int, input().split())\n    i = 1\n    while m > i:\n        m -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - m) + 'b' + 'a' * (m - 1))", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    i = 1\n    while m > i:\n        m -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - m) + 'b' + 'a' * (m - 1))", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    i = 1\n    while m > i:\n        m -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - m) + 'b' + 'a' * (m - 1))", "x = int(input())\nfor t in range(x):\n    (n, m) = map(int, input().split())\n    i = 1\n    while m > i:\n        m -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - m) + 'b' + 'a' * (m - 1))", "t = int(input())\np = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    j = 0\n    s = ''\n    for i in range(100000):\n        j += i\n        if k - j <= 0:\n            g = i\n            gg = k - j + i\n            break\n    s = 'a' * (n - g - 1)\n    s = s + 'b'\n    ss = 'a' * (g - gg)\n    s += ss\n    s += 'b'\n    ss = 'a' * (g - (g - gg) - 1)\n    s += ss\n    p.append(s)\nfor i in range(len(p)):\n    print(p[i])", "from math import sqrt\n\ndef FindPos(k):\n    temp = int(sqrt(2 * k)) + 1\n    if (temp - 1) * temp / 2 < k <= (temp + 1) * temp / 2:\n        return temp\n    else:\n        return temp - 1\nt = int(input())\nres = []\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    Pos = FindPos(k)\n    index1 = n - Pos\n    index2 = int(n - (k - Pos * (Pos - 1) / 2) + 1)\n    temp = 'a' * (index1 - 1) + 'b' + 'a' * (index2 - index1 - 1) + 'b' + 'a' * (n - index2)\n    res.append(temp)\nfor i in range(t):\n    print(res[i])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (N, k) = map(int, input().split())\n    pic = 0\n    back = 0\n    for i in range(N - 1):\n        pic += i + 1\n        if pic >= k:\n            break\n        back = pic\n    if pic == k:\n        pos = pic\n        gap = i + 1\n        st = ['a'] * N\n        st[-gap] = 'b'\n        st[-(gap + 1)] = 'b'\n        print(''.join(st))\n    else:\n        pos = back\n        gap = i + 1\n        dis = k - (pos + 1)\n        st = ['a'] * N\n        st[-(gap + 1)] = 'b'\n        st[-(gap + 1 - (gap - dis))] = 'b'\n        print(''.join(st))", "def k_string(n, line_number):\n    total = 0\n    for i in range(1, n):\n        if total <= line_number <= total + i:\n            break\n        total += i\n    res = ['a' if j not in [i, line_number - total - 1] else 'b' for j in range(n - 1, -1, -1)]\n    return ''.join(res)\nresults = ''\nfor _ in range(int(input())):\n    (n, line_number) = [int(e) for e in input().split()]\n    results += k_string(n, line_number) + '\\n'\nprint(results, sep='')", "def beautiful(n, k):\n    zeroes = 0\n    i = 2\n    s = 1\n    while s < k:\n        if s + i >= k and k != 1:\n            zeroes += 1\n            break\n        elif k == 1:\n            break\n        else:\n            s += i\n            i += 1\n            zeroes += 1\n    if k != 1:\n        ans = 'a' * (n - zeroes - 2) + 'b' + 'a' * (zeroes - (k - s) + 1) + 'b' + (k - s - 1) * 'a'\n    else:\n        ans = 'a' * (n - 2) + 'bb'\n    return ans\nt = int(input())\narray = []\nfor i in range(t):\n    array.append(list(map(int, input().split(' '))))\nfor x in array:\n    print(beautiful(*x))", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nanswer_list = []\nfor i in range(t):\n    [n, k] = inlt()\n    for i in range(n - 2, -1, -1):\n        if k <= n - i - 1:\n            s = list('a' * n)\n            s[i] = 'b'\n            s[n - k] = 'b'\n            answer_list.append(''.join(s))\n            break\n        else:\n            k = k - (n - i - 1)\nfor a in answer_list:\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (i, c) = (1, 2)\n    while i < k:\n        i += c\n        c += 1\n    (b, bb) = (c, k - (i - c + 1))\n    ans = 'a' * (n - b) + 'b' + 'a' * (b - bb - 1) + 'b' + 'a' * (bb - 1)\n    print(ans)", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "import math\n\ndef f(n):\n    h = (math.sqrt(1 + 8 * n) + 1) / 2\n    g = int(math.floor(h))\n    if h == g:\n        return g\n    else:\n        return g + 1\n\ndef g(n, k):\n    d = f(k)\n    if d == 2:\n        return 'a' * (n - 2) + 'b' * 2\n    else:\n        d1 = k - (d - 2) * (d - 1) // 2\n        return 'a' * (n - d) + 'b' + 'a' * (d - d1 - 1) + 'b' + 'a' * (d1 - 1)\nt = int(input())\nfor i in range(t):\n    nk = list(map(int, input().rstrip().split()))\n    n = nk[0]\n    k = nk[1]\n    print(g(n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = n\n    x = n * (n - 1) // 2\n    while x >= k:\n        n -= 1\n        x = n * (n - 1) // 2\n    g = n * (n + 1) // 2\n    d = g - k\n    ans = 'a' * (m - n - 1) + 'b' + 'a' * d + 'b'\n    l = len(ans)\n    ans += 'a' * (m - l)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    c = 0\n    while k > c * (c - 1) / 2:\n        c += 1\n    print('a' * (n - c) + 'b' + 'a' * int(c * (c - 1) / 2 - k) + 'b' + 'a' * (c - int(c * (c - 1) / 2 - k) - 2))", "for i in range(int(input())):\n    (tamanho, k) = map(int, input().split(' '))\n    resultado = ['a'] * tamanho\n    for i in range(tamanho - 2, -1, -1):\n        if k <= tamanho - i - 1:\n            resultado[i] = 'b'\n            resultado[tamanho - k] = 'b'\n            break\n        k -= tamanho - i - 1\n    print(''.join(resultado))", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = 2\n    t = 0\n    while t < k:\n        t = a * (a - 1) // 2\n        a += 1\n    a -= 1\n    if t == k:\n        f = n - a\n        l = f + 1\n    else:\n        a -= 1\n        f = n - a - 1\n        l = a * (a + 1) // 2 - k + f + 1\n    s = ''\n    for i in range(n):\n        if i == f or i == l:\n            s += 'b'\n        else:\n            s += 'a'\n    print(s)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nimport math\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\ndef ye(k):\n    i = 0\n    while i * (i - 1) / 2 < k:\n        i += 1\n    return i - 1\n\ndef main():\n    q = int(input())\n    for x in range(q):\n        (a, b) = map(int, input().split())\n        y = ye(b)\n        y2 = int(b - y * (y - 1) / 2)\n        s = ''\n        for x in range(a):\n            if y == x or x == y2 - 1:\n                s += 'b'\n            else:\n                s += 'a'\n        s = s[::-1]\n        print(s + '\\n')\nmain()", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\ntestcount = 0\nwhile testcount < tests:\n    arr = inlt()\n    a = arr[0]\n    b = arr[1]\n    k = math.floor(math.sqrt(2 * b) + 0.5)\n    triangle = k * (k - 1) / 2\n    print('a' * int(a - k - 1) + 'b' + 'a' * int(triangle - b + k) + 'b' + 'a' * int(b - triangle - 1))\n    testcount += 1", "from math import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = ['a'] * n\n    p = floor((1 + sqrt(8 * k + 1)) / 2)\n    d = k - p * (p - 1) // 2\n    (i, j) = (n - p - (d > 0), [n - p + 1, n - d][d > 0])\n    (a[i], a[j]) = 'bb'\n    print(''.join(a))", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    i = 0\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    i = n - 2\n    s = ['a'] * n\n    while i >= 0:\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            break\n        k -= n - i - 1\n        i -= 1\n    print(''.join(s))", "for pratyush in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    (s, f, i) = ('a' * n, k, 1)\n    while f > 0:\n        f -= i\n        i += 1\n    i -= 1\n    x = n - 1 - i\n    y = x + abs(f) + 1\n    s = s[:x] + 'b' + s[x + 1:]\n    s = s[:y] + 'b' + s[y + 1:]\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = 'a' * n\n    l = list(s)\n    d = 0\n    x = 0\n    if k == 1:\n        print('a' * (n - 2) + 'b' * 2)\n    else:\n        while k > x:\n            x = x + d\n            d += 1\n        l[n - d] = 'b'\n        if k == x:\n            l[n - d + 1] = 'b'\n        else:\n            l[n - d + x - k + 1] = 'b'\n        print(''.join(l))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    tmp = ['a' for _ in range(a)]\n    i = 1\n    while b > i:\n        b -= i\n        i += 1\n    tmp[b - 1] = tmp[i] = 'b'\n    print(''.join(tmp[::-1]))", "import sys\nfrom math import sqrt\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().split()))\n\ndef a():\n    ans = ''\n    for _ in range(int(inp())):\n        (a, b) = read()\n        if a % b == 0:\n            ans += '0\\n'\n        else:\n            ans += str((a // b + 1) * b - a) + '\\n'\n    print(ans)\n\ndef b():\n    ans = ''\n    for _ in range(int(inp())):\n        (n, k) = read()\n        (f1, f2) = (n - 2, n - 1)\n        l = 1\n        while (l + 1) * l // 2 < k:\n            l += 1\n        f1 -= l - 1\n        f2 -= k - l * (l - 1) // 2 - 1\n        res = ''\n        for i in range(n):\n            if i in (f1, f2):\n                res += 'b'\n            else:\n                res += 'a'\n        ans += res + '\\n'\n    print(ans)\nb()", "t = int(input())\nl = []\nfor i in range(t):\n    l.append([int(x) for x in input().split()])\n\ndef s(n, k):\n    c = 1\n    while c * (c + 1) / 2 < k:\n        c += 1\n    f = c * (c + 1) // 2 - k\n    v = 'b' + 'a' * f + 'b'\n    g = 'a' * n\n    g = g[0:n - c - 1]\n    g = g + v\n    g = g + 'a' * n\n    g = g[0:n]\n    return g\nfor i in l:\n    print(s(i[0], i[1]))", "import sys\nimport math\ninput()\nfor line in sys.stdin:\n    (n, k) = map(int, line.split())\n    res = ['a'] * n\n    a = int(math.sqrt(k)) - 2\n    while not 0 <= (a + 1) * a // 2 - k < a:\n        a += 1\n    b = (a + 1) * a // 2 - k\n    res[n - a - 1] = res[n - a + b] = 'b'\n    print(''.join(res))", "def calc(a, b):\n    (cnt, pos) = (0, [None, None])\n    for i in range(1, a):\n        cnt += i\n        if cnt >= b:\n            pos = [i, i - (cnt - b) - 1]\n            break\n    s = ['a'] * a\n    (s[pos[0]], s[pos[1]]) = ('b', 'b')\n    return ''.join(reversed(s))\nN = int(input())\ncases = []\nfor _ in range(N):\n    cases.append(map(int, input().split()))\nfor (a, b) in cases:\n    print(calc(a, b))", "N = int(input())\narr = []\nfor i in range(N):\n    temp = input().split()\n    arr.append([int(temp[0]), int(temp[1])])\n\ndef func(n, k):\n    start = 0\n    run_sum = n - 1\n    to_add = n - 2\n    while run_sum < k:\n        run_sum += to_add\n        to_add -= 1\n        start += 1\n    pos1 = start\n    pos2 = n - (run_sum - k) - 1\n    s = ''\n    for i in range(n):\n        if i == pos1 or i == pos2:\n            s = s + 'b'\n        else:\n            s += 'a'\n    print(s)\nfor i in range(N):\n    n = arr[i][0]\n    k = arr[i][1]\n    func(n, n * (n - 1) // 2 - k + 1)", "t = int(input())\nimport math\ndelay = []\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = ['a' for _ in range(n)]\n    if k == 1:\n        arr[0] = 'b'\n        arr[1] = 'b'\n        delay.append(''.join(arr[::-1]))\n        continue\n    x = int((1 + math.sqrt(1 + 8 * k)) / 2)\n    if x * (x - 1) // 2 >= k:\n        x -= 1\n    arr[x] = 'b'\n    rem = k - x * (x - 1) // 2\n    arr[rem - 1] = 'b'\n    delay.append(''.join(arr[::-1]))\nfor e in delay:\n    print(e)", "n = int(input())\nm = []\nfor i in range(n):\n    y = str(input())\n    z = y.split(' ')\n    (a, b) = (int(z[0]), int(z[1]))\n    x = ['a'] * (a - 2) + ['b'] * 2\n    if b != 1:\n        j = 1\n        k = 2\n        l = 1\n        while True:\n            if j + k < b:\n                j += k\n                k += 1\n                l += 1\n            else:\n                break\n        (x[a - l - 2], x[a - 2]) = (x[a - 2], x[a - l - 2])\n        (x[a - b + j], x[a - 1]) = (x[a - 1], x[a - b + j])\n    m.append(''.join(x))\nfor i in m:\n    print(i)", "import math\nans_list = []\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    From = math.ceil(-1 + (1 + 8 * k) ** 0.5) // 2\n    To = math.floor(1 + (1 + 8 * k) ** 0.5) // 2 + 1\n    for g in range(From, To):\n        if g * (g - 1) // 2 <= k <= g * (g + 1) // 2:\n            break\n    string = ['a'] * n\n    string[n - g - 1] = 'b'\n    string[n - (k - g * (g - 1) // 2)] = 'b'\n    ans_list.append(''.join(string))\nfor i in range(t):\n    print(ans_list[i])", "t = int(input())\nl = []\nfor i in range(t):\n    l.append([int(x) for x in input().split()])\n\ndef s(n, k):\n    c = 1\n    while c * (c + 1) / 2 < k:\n        c += 1\n    f = c * (c + 1) // 2 - k\n    v = 'b' + 'a' * f + 'b'\n    g = 'a' * n\n    g = g[0:n - c - 1]\n    g = g + v\n    g = g + 'a' * n\n    g = g[0:n]\n    return g\nfor i in l:\n    print(s(i[0], i[1]))", "t = int(input())\nout = list()\nfor item in range(t):\n    nk_list = input().split()\n    n = int(nk_list[0])\n    k = int(nk_list[1])\n    i = 0\n    old = 0\n    while True:\n        i += 1\n        new = old + i\n        if k > old and k <= new:\n            lb = n - i\n            rb = new - k + 1\n            break\n        else:\n            old = new\n    out.append('a' * (lb - 1) + 'b' + 'a' * (rb - 1) + 'b' + 'a' * (n - lb - rb))\nfor item in out:\n    print(item)", "test = int(input())\nmy_list = []\nwhile test != 0:\n    (n, k) = [int(n) for n in input().split()]\n    string = 'a' * n\n    i = n - 2\n    while i >= 0:\n        if k <= n - 1 - i:\n            string = string[:i] + 'b' + string[i + 1:]\n            string = string[:n - k] + 'b' + string[n - k + 1:]\n            my_list.append(string)\n            break\n        k -= n - 1 - i\n        i -= 1\n    test -= 1\nfor i in my_list:\n    print(i)", "T = int(input())\nn = [0] * T\nk = [0] * T\nns = [0] * T\nfor t in range(T):\n    (n[t], k[t]) = [int(i) for i in input().split(' ')]\n\ndef nlt(n):\n    if n == 1:\n        return 0\n    tr = int((2 * n) ** 0.5) + 1\n    while tr * tr * 0.5 + 0.5 * tr >= n:\n        tr -= 1\n    return int(tr)\n\ndef ans(n, k):\n    fa = nlt(k)\n    ffa = int(fa * fa * 0.5 + 0.5 * fa)\n    a = ['a'] * n\n    a[fa + 1] = 'b'\n    a[k - ffa - 1] = 'b'\n    a.reverse()\n    return ''.join(a)\nfor t in range(T):\n    print(ans(n[t], k[t]))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    i = n - 2\n    sb = 0\n    c = 0\n    while i >= 0:\n        sb += n - 1 - i\n        if sb == k:\n            jj = i + 1\n            break\n        elif sb > k:\n            gap = sb - k\n            jj = i + gap + 1\n            break\n        else:\n            i -= 1\n    print('a' * i + 'b' + 'a' * (jj - i - 1) + 'b' + 'a' * (n - 1 - jj))", "test = int(input())\nwhile test > 0:\n    test -= 1\n    (n, k) = map(int, input().split())\n    (pos1, pos2) = (-1, -1)\n    for i in range(n - 1, 0, -1):\n        if k <= n - i:\n            pos1 = i\n            pos2 = n - k + 1\n            break\n        k -= n - i\n    print('a' * (pos1 - 1) + 'b' + 'a' * (pos2 - pos1 - 1) + 'b' + 'a' * (n - pos2))", "def binarySearch(mini, maxi, k):\n    if maxi - mini <= 1:\n        return maxi\n    else:\n        mid = (maxi + mini) // 2\n        total = (mid + 1 + 2) * mid // 2\n        if total > k:\n            maxi = mid\n        elif total == k:\n            return mid\n        else:\n            mini = mid\n        return binarySearch(mini, maxi, k)\n\ndef solve(n, k):\n    st = ['a'] * n\n    st[-1] = 'b'\n    st[-2] = 'b'\n    k -= 1\n    if k == 0:\n        return ''.join(st)\n    firstBLoc = binarySearch(0, n - 2, k)\n    st[n - 2 - firstBLoc] = 'b'\n    st[-2] = 'a'\n    movesDone = (firstBLoc + 2) * (firstBLoc - 1) // 2\n    leftover = k - movesDone - 1\n    if leftover == 0:\n        return ''.join(st)\n    else:\n        st[n - 1 - leftover] = 'b'\n        st[n - 1] = 'a'\n        return ''.join(st)\nfor x in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(solve(n, k))", "for _ in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "def kthBeautifulStr(n, k):\n    s = []\n    for _ in range(0, n):\n        s.append('a')\n    i = n - 2\n    while i >= 0:\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            str = ''\n            s = str.join(s)\n            print(s)\n            break\n        k -= n - i - 1\n        i -= 1\ntc = int(input())\nfor _ in range(0, tc):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    kthBeautifulStr(a, b)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = ['a'] * n\n    i = n - 2\n    while i >= 0:\n        if k <= n - i - 1:\n            string[i] = 'b'\n            string[n - k] = 'b'\n            break\n        k -= n - i - 1\n        i -= 1\n    print(''.join(string))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = ['a'] * n\n    for i in range(n - 2, -1, -1):\n        p = n - 1 - i\n        if k <= p:\n            l[i] = 'b'\n            l[n - k] = 'b'\n            print(''.join(l))\n            break\n        k -= p", "for j in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "p = int(input())\nwhile p:\n    p -= 1\n    (n, k) = map(int, input().split())\n    i = n - 2\n    s = ['a'] * n\n    while i >= 0:\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            break\n        k -= n - i - 1\n        i -= 1\n    print(''.join(s))", "for j in range(int(input())):\n    (n1, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n1 - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))", "import math\nfor i in range(int(input())):\n    (n, r) = map(int, input().split())\n    x = math.floor(math.sqrt(r * 2))\n    x = max(1, x - 3)\n    while x * (x + 1) // 2 < r:\n        x += 1\n    j = x * (x + 1) // 2 - r\n    print('a' * (n - x - 1) + 'b' + 'a' * j + 'b' + 'a' * (n - 2 - (n - x - 1) - j))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = n - 2\n    s = ['a'] * n\n    while i >= 0:\n        if k <= n - i - 1:\n            s[i] = 'b'\n            s[n - k] = 'b'\n            break\n        k -= n - i - 1\n        i -= 1\n    print(''.join(s))", "for l in range(int(input())):\n    (x, y) = map(int, input().split())\n    k = x - 2\n    s = ['a'] * x\n    while k >= 0:\n        if y <= x - k - 1:\n            s[k] = 'b'\n            s[x - y] = 'b'\n            break\n        y -= x - k - 1\n        k -= 1\n    print(''.join(s))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    res = ['a'] * n\n    for i in range(n - 2, -1, -1):\n        b_stays = n - 1 - i\n        if k <= b_stays:\n            res[i] = 'b'\n            res[n - k] = 'b'\n            print(''.join(res))\n            break\n        k -= b_stays", "from math import ceil\n\ndef l1(k):\n    return ceil(((1 + 8 * k) ** 0.5 - 1) / 2)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = ['a' for i in range(n)]\n    b = l1(k)\n    s[n - b - 1] = 'b'\n    a = k - (b - 1) * b // 2\n    s[-a] = 'b'\n    print(''.join(s))", "import math\n\ndef solve(n, k):\n    l = 0\n    num = math.comb(n, 2)\n    for i in range(n - 2, -1, -1):\n        if k <= n - i - 1:\n            ans = ''\n            for j in range(n):\n                if j == n - k or j == i:\n                    ans += 'b'\n                else:\n                    ans += 'a'\n            return ans\n        else:\n            k -= n - i - 1\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(solve(n, k))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    poslb = 0\n    posrb = 0\n    not_found = True\n    for j in range(n):\n        if k <= j * (j + 1) / 2 and not_found:\n            poslb = n - (j + 1)\n            posrb = j * (j - 1) // 2 - k\n            not_found = False\n    resposta = ['a'] * n\n    resposta[int(poslb)] = 'b'\n    resposta[int(posrb)] = 'b'\n    rf = ''\n    for j in range(n):\n        rf += resposta[j]\n    print(rf)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    poslb = 0\n    posrb = 0\n    not_found = True\n    for j in range(n):\n        if k <= j * (j + 1) / 2 and not_found:\n            poslb = n - (j + 1)\n            posrb = j * (j - 1) // 2 - k\n            not_found = False\n    resposta = ['a'] * n\n    resposta[int(poslb)] = 'b'\n    resposta[int(posrb)] = 'b'\n    rf = ''\n    for j in range(n):\n        rf += resposta[j]\n    print(rf)", "NT = int(input())\nn = []\nk = []\nfor i in range(NT):\n    vs = input().split()\n    n.append(int(vs[0]))\n    k.append(int(vs[1]))\nfor eNT in range(NT):\n    i = 0\n    h = 0\n    while True:\n        h = h + 1\n        d = 0\n        i = i + h\n        if k[eNT] <= i:\n            d = abs(i - k[eNT])\n            if d >= h:\n                h = h - 1\n                d = abs(d - h)\n            d = abs(h - d - 1)\n            break\n    ans = ['a'] * n[eNT]\n    ans[n[eNT] - h - 1] = 'b'\n    ans[n[eNT] - d - 1] = 'b'\n    print(''.join(ans))", "import math, sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = ['a'] * n\n    b1 = (1 + math.sqrt(1 + 8 * k)) / 2\n    if b1 == math.floor(b1):\n        b1 = int(b1)\n    else:\n        b1 = math.ceil(b1)\n    l[-b1] = 'b'\n    b2 = int(k - b1 * (b1 - 1) / 2)\n    b2 += b1 - 1\n    l[-b2] = 'b'\n    output = ''\n    for x in range(n):\n        output += l[x]\n    print(output)", "import sys\n\ndef search_indexes(n, k):\n    min_index = 2\n    max_index = n + 1\n    while 1:\n        index = (min_index + max_index) // 2\n        temp = (index - 1) * (index - 2) // 2\n        a = temp + 1\n        b = temp + index - 1\n        if k < a:\n            max_index = index\n        elif k > b:\n            min_index = index\n        else:\n            break\n    return (index, k - a + 1)\n\ndef print_string(n, i, j):\n    string = ''\n    for index in range(n):\n        if n - index in (i, j):\n            string += 'b'\n        else:\n            string += 'a'\n    print(string)\n\ndef main():\n    next(sys.stdin)\n    for line in sys.stdin:\n        (n, k) = tuple(map(lambda x: int(x), line.split()))\n        (i, j) = search_indexes(n, k)\n        print_string(n, i, j)\nmain()", "for j in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = 1\n    while k > i:\n        k -= i\n        i += 1\n    print('a' * (n - i - 1) + 'b' + 'a' * (i - k) + 'b' + 'a' * (k - 1))"]