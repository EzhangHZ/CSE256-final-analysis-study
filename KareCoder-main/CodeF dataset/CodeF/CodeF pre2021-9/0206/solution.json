["from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    s = str(input())\n    t = str(input())\n    a = len(s)\n    b = len(t)\n    c = lcm(a, b)\n    if s * (c // a) == t * (c // b):\n        print(s * (c // a))\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    s = input()[:-1]\n    w = input()[:-1]\n    x = len(s) * len(w) // math.gcd(len(s), len(w))\n    s = s * (x // len(s))\n    w = w * (x // len(w))\n    if s != w:\n        print(-1)\n    else:\n        print(s)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef solve():\n    s = input().strip()\n    t = input().strip()\n    (n, m) = (len(s), len(t))\n    lcm = n * m // math.gcd(n, m)\n    return s * (lcm // n) if s * (lcm // n) == t * (lcm // m) else -1\nfor _ in range(int(input())):\n    print(solve())", "import math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    lcm = len(s) * len(t) / math.gcd(len(s), len(t))\n    if s * int(lcm / len(s)) == t * int(lcm / len(t)):\n        print(s * int(lcm / len(s)))\n    else:\n        print(-1)", "from math import gcd\n\ndef solve():\n    a = input()\n    b = input()\n    l = gcd(len(a), len(b))\n    l = len(a) * len(b) // l\n    aa = l // len(a) * a\n    bb = l // len(b) * b\n    if aa == bb:\n        print(aa)\n    else:\n        print(-1)\nn = int(input())\nfor i in range(n):\n    solve()", "from math import gcd\n\ndef solve():\n    a = input()\n    b = input()\n    l = gcd(len(a), len(b))\n    l = len(a) * len(b) // l\n    aa = l // len(a) * a\n    bb = l // len(b) * b\n    if aa == bb:\n        print(aa)\n    else:\n        print(-1)\nn = int(input())\nfor i in range(n):\n    solve()", "from math import gcd\nans = []\nt = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    ln = len(a) * len(b) // gcd(len(a), len(b))\n    if a * (ln // len(a)) == b * (ln // len(b)):\n        ans.append(a * (ln // len(a)))\n    else:\n        ans.append(-1)\nfor i in ans:\n    print(i)", "import math\nfor i in range(int(input())):\n    a = input()\n    b = input()\n    m = len(a)\n    n = len(b)\n    lcm = m * n // math.gcd(m, n)\n    A = a * (lcm // m)\n    B = b * (lcm // n)\n    print(A if A == B else -1)", "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfor _ in range(int(input())):\n    s = str(input())\n    t = str(input())\n    x = len(s)\n    y = len(t)\n    c = lcm(x, y)\n    if s * (c // x) == t * (c // y):\n        print(s * (c // x))\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    x = len(a) * len(b) // math.gcd(len(a), len(b))\n    n = a * (x // len(a))\n    m = b * (x // len(b))\n    if n == m:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    s = input()\n    t = input()\n    ls = len(s)\n    lt = len(t)\n    lc = lcm(ls, lt)\n    s *= lc // ls\n    t *= lc // lt\n    print(s if s == t else -1)\nfor _ in range(int(input())):\n    solve()", "import sys\nreadline = sys.stdin.readline\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(readline().strip())\nfor _ in range(n):\n    a = readline().strip()\n    b = readline().strip()\n    (na, nb) = (len(a), len(b))\n    l = lcm(na, nb)\n    ax = a * (l // na)\n    bx = b * (l // nb)\n    if ax == bx:\n        print(ax)\n    else:\n        print(-1)", "import math\n\ndef lcm(n1, n2):\n    return n1 * n2 // math.gcd(n1, n2)\n\ndef answer(s, t):\n    if s * len(t) != t * len(s):\n        return -1\n    alen = lcm(len(s), len(t))\n    ans = s * (alen // len(s))\n    return ans\n\ndef main():\n    q = int(input())\n    s = ['x'] * q\n    t = ['x'] * q\n    for j in range(q):\n        s[j] = input()\n        t[j] = input()\n    for j in range(q):\n        print(answer(s[j], t[j]))\nmain()", "list_ans = []\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    a = 1\n    for i in range(2, min(len(s), len(t)) + 1):\n        if len(s) % i == 0 and len(t) % i == 0:\n            a = i\n    x = len(s) * len(t) // a\n    str1 = s * (x // len(s))\n    str2 = t * (x // len(t))\n    if str1 == str2:\n        list_ans.append(str1)\n    else:\n        list_ans.append(-1)\nfor item in list_ans:\n    print(item)", "def gcd(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nq = int(input())\nfor _ in range(q):\n    s = str(input())\n    t = str(input())\n    l = lcm(len(s), len(t))\n    p = [l // len(s), l // len(t)]\n    for i in range(1, 4):\n        if s * (p[0] * i) == t * (p[1] * i):\n            print(s * (p[0] * i))\n            break\n    else:\n        print(-1)", "import sys\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\n\ndef stringLSM(s1, s2):\n    ls1 = len(s1)\n    ls2 = len(s2)\n    lsm = int(lcm(ls1, ls2))\n    f1 = lsm // ls1 * s1\n    f2 = lsm // ls2 * s2\n    if f1 == f2:\n        return f1\n    else:\n        return '-1'\ncases = int(sys.stdin.readline())\nfor i in range(cases):\n    s1 = sys.stdin.readline().rstrip('\\n')\n    s2 = sys.stdin.readline().rstrip('\\n')\n    ans = stringLSM(s1, s2)\n    sys.stdout.write(ans + '\\n')", "import sys\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\n\ndef stringLSM(s1, s2):\n    ls1 = len(s1)\n    ls2 = len(s2)\n    lsm = int(lcm(ls1, ls2))\n    f1 = lsm // ls1 * s1\n    f2 = lsm // ls2 * s2\n    if f1 == f2:\n        return f1\n    else:\n        return '-1'\ncases = int(sys.stdin.readline())\nfor i in range(cases):\n    s1 = sys.stdin.readline().rstrip('\\n')\n    s2 = sys.stdin.readline().rstrip('\\n')\n    ans = stringLSM(s1, s2)\n    sys.stdout.write(ans + '\\n')", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef solve():\n    a = input()\n    b = input()\n    ans = lcm(len(a), len(b))\n    a = a * (ans // len(a))\n    b = b * (ans // len(b))\n    if a == b:\n        print(a, end='\\n')\n    else:\n        print(-1, end='\\n')\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "from math import *\nT = int(input())\nwhile T:\n    s1 = input()\n    s2 = input()\n    l1 = len(s1)\n    l2 = len(s2)\n    l = gcd(l1, l2)\n    lcm = l1 * l2 // l\n    rep = s1[:l]\n    if rep * (l1 // l) == s1 and rep * (l2 // l) == s2:\n        print(rep * (lcm // l))\n    else:\n        print(-1)\n    T -= 1", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    s = input()\n    s1 = input()\n    if lcm(len(s), len(s1)) // len(s) * s == lcm(len(s), len(s1)) // len(s1) * s1:\n        print(lcm(len(s), len(s1)) // len(s1) * s1)\n    else:\n        print(-1)", "import math\nn = int(input())\nfor i in range(n):\n    num1 = input()\n    num2 = input()\n    gcd1 = math.gcd(len(num1), len(num2))\n    num11 = num1 * (len(num2) // gcd1)\n    num22 = num2 * (len(num1) // gcd1)\n    if num11 == num22:\n        print(num11)\n    else:\n        print(-1)", "from math import gcd\n\ndef fun(s1, s2, x, h):\n    if s1 == s2 * (h // x):\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    s = input().rstrip()\n    t = input().rstrip()\n    m = len(s)\n    n = len(t)\n    if m == n:\n        if s == t:\n            print(s)\n        else:\n            print(-1)\n    else:\n        h = m * n // gcd(m, n)\n        if m > n:\n            s1 = s * (h // m)\n            if fun(s1, t, n, h):\n                print(s1)\n            else:\n                print(-1)\n        else:\n            s1 = t * (h // n)\n            if fun(s1, s, m, h):\n                print(s1)\n            else:\n                print(-1)", "import math\na = int(input())\nfor i in range(a):\n    n1 = input()\n    n2 = input()\n    gcd = math.gcd(len(n1), len(n2))\n    n11 = n2 * (len(n1) // gcd)\n    n22 = n1 * (len(n2) // gcd)\n    if n11 == n22:\n        print(n11)\n    else:\n        print('-1')", "import math\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    g = math.gcd(len(a), len(b))\n    (x, y) = (a * (len(b) // g), b * (len(a) // g))\n    print(x if x == y else -1)", "import math\nn = int(input())\nfor i in range(0, n):\n    a = input()\n    b = input()\n    al = len(a)\n    bl = len(b)\n    if a * (bl // math.gcd(al, bl)) == b * (al // math.gcd(al, bl)):\n        print(a * (bl // math.gcd(al, bl)))\n    else:\n        print(-1)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    s = str(input())\n    ss = str(input())\n    n = len(s)\n    nn = len(ss)\n    o = gcd(n, nn)\n    lcm = n * nn // o\n    if s * (lcm // n) == ss * (lcm // nn):\n        print(s * (lcm // n))\n    else:\n        print(-1)", "import math\n\ndef solve(s, t):\n    (slen, tlen) = (len(s), len(t))\n    s *= tlen\n    t *= slen\n    lcm = int(slen * tlen / math.gcd(slen, tlen))\n    if s != t:\n        print(-1)\n    else:\n        print(s[:lcm])\ntcs = int(input())\nfor i in range(tcs):\n    s = input()\n    t = input()\n    solve(s, t)", "import math\n\ndef lcm(s, k):\n    res = ''\n    while k > 0:\n        res += s\n        k -= 1\n    return res\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    (n, m) = (len(s), len(t))\n    g = math.gcd(n, m)\n    x = lcm(s, m // g)\n    y = lcm(t, n // g)\n    if x == y:\n        print(x)\n    else:\n        print(-1)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nn = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    lcm = compute_lcm(len(s1), len(s2))\n    if s1 * int(lcm / len(s1)) == s2 * int(lcm / len(s2)):\n        print(s1 * int(lcm / len(s1)))\n    else:\n        print(-1)", "from math import gcd\nn = int(input())\nfor _ in range(0, n):\n    a = input()\n    b = input()\n    (a, b) = sorted([a, b], key=len)\n    x = len(a) * len(b) // gcd(len(a), len(b))\n    if a * (x // len(a)) == b * (x // len(b)):\n        print(a * (x // len(a)))\n    else:\n        print(-1)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef sdiv(s1, s2):\n    return s1.count(s2)\n\ndef try_lcm(s1, s2):\n    d = int(lcm(len(s1), len(s2)) / len(s1))\n    if sdiv(s1 * d, s2) == len(s1) * d / len(s2):\n        return s1 * d\n    return -1\nq = int(input())\nfor i in range(q):\n    s = input()\n    t = input()\n    if s < t:\n        (s, t) = (t, s)\n    print(try_lcm(s, t))", "from math import gcd\nfor i in range(int(input())):\n    s = input()\n    t = input()\n    (ls, lt) = (len(s), len(t))\n    n = int(ls * lt / gcd(ls, lt))\n    if s * (n // ls) == t * (n // lt):\n        print(s * (n // ls))\n    else:\n        print(-1)", "import math\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    tar = len(s) * len(t) // math.gcd(len(s), len(t))\n    s = s * (tar // len(s))\n    t = t * (tar // len(t))\n    if s == t:\n        print(s)\n    else:\n        print(-1)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    s = input()\n    d = input()\n    n = len(s)\n    m = len(d)\n    g = gcd(n, m)\n    l = n * m // g\n    s *= l // n\n    d *= l // m\n    if s == d:\n        print(s)\n    else:\n        print(-1)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nn = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    l1 = len(s1)\n    l2 = len(s2)\n    t1 = s1 * l2\n    t2 = s2 * l1\n    if t1 != t2:\n        print(-1)\n    else:\n        temp = int(lcm(l1, l2) / l1)\n        print(temp * s1)", "def gcd(a, b):\n    while b:\n        a %= b\n        (a, b) = (b, a)\n    return a\n\ndef lcm(a, b):\n    return int(a / gcd(a, b) * b)\nfor i in range(int(input())):\n    a = str(input())\n    b = str(input())\n    na = len(a)\n    nb = len(b)\n    x = lcm(na, nb)\n    a *= int(x / na)\n    b *= int(x / nb)\n    if a == b:\n        print(a)\n    else:\n        print(-1)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\n\ndef can_be_built(s1, s2):\n    if s1.count(s2) * len(s2) == len(s1):\n        return True\n    elif s2.count(s1) * len(s1) == len(s2):\n        return True\n    return False\n\ndef is_divisible(s1, s2):\n    if s1.count(s2) > 0 or s2.count(s1) > 0:\n        return True\n    return False\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    if not is_divisible(s1, s2):\n        print('-1')\n    else:\n        l_s1 = len(s1)\n        l_s2 = len(s2)\n        f_len = lcm(l_s1, l_s2)\n        aux = ''\n        if s1 > s2:\n            aux = s2\n        else:\n            aux = s1\n        ans = aux * (f_len // len(aux))\n        if can_be_built(ans, s1) and can_be_built(ans, s2):\n            print(ans)\n        else:\n            print('-1')", "T = int(input().strip())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    s1 = input()\n    s2 = input()\n    lcm_len = len(s1) * len(s2) // gcd(len(s1), len(s2))\n    s1 *= lcm_len // len(s1)\n    s2 *= lcm_len // len(s2)\n    if s1 == s2:\n        print(s1)\n    else:\n        print(-1)\nfor _ in range(T):\n    solve()", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\nfor t in range(int(input())):\n    (s, t) = (input(), input())\n    g = GCD(len(s), len(t))\n    (a, b) = (t * (len(s) // g), s * (len(t) // g))\n    if a == b:\n        print(a)\n    else:\n        print(-1)", "from math import *\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    s = set()\n    if len(b) > len(a):\n        (a, b) = (b, a)\n    for i in range(1, int(sqrt(len(b))) + 1):\n        if len(b) % i == 0:\n            s.add(i)\n            s.add(len(b) // i)\n    l = list(s)\n    l.sort()\n    g_c_d = gcd(len(a), len(b))\n    for i in l:\n        if b[:i] * (len(b) // i) == b:\n            d = b[:i]\n            break\n    if len(a) // len(d) * d == a:\n        if len(a) % len(b) == 0:\n            ans = len(a) // len(d) * d\n        else:\n            ans = len(a) * len(b) // g_c_d // len(d) * d\n    else:\n        ans = -1\n    print(ans)", "n = int(input())\nfor i in range(n):\n    (a, q) = (input(), input())\n    from math import gcd\n    w = len(a) * len(q) // gcd(len(a), len(q))\n    x = q * (w // len(q))\n    y = a * (w // len(a))\n    if x == y:\n        print(x)\n    else:\n        print('-1')", "import math\nfor i in range(int(input())):\n    s = input()\n    t = input()\n    val = math.gcd(len(s), len(t))\n    lcm = len(s) * len(t) // val\n    if s[:val] == t[:val]:\n        x = lcm // val * s[:val]\n        if len(s) // val * s[:val] == s and len(t) // val * t[:val] == t:\n            print(x)\n        else:\n            print(-1)\n    else:\n        print(-1)", "def LCMString():\n    for _ in range(int(input())):\n        S = input()\n        t = input()\n        if not max(len(S), len(t)) % min(len(S), len(t)):\n            x = max(len(S), len(t)) // min(len(S), len(t))\n            if len(S) > len(t):\n                if t * x == S:\n                    print(S)\n                else:\n                    print(-1)\n            elif S * x == t:\n                print(t)\n            else:\n                print(-1)\n        else:\n            PPCM = LCM(len(S), len(t))\n            S = S * (PPCM // len(S))\n            t = t * (PPCM // len(t))\n            if S == t:\n                print(S)\n            else:\n                print(-1)\n\ndef LCM(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return LCM(a - b, b) * a // (a - b)\n    else:\n        return LCM(a, b - a) * b // (b - a)\nLCMString()", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef lcd(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    (s1, s2) = (input(), input())\n    (l1, l2) = (len(s1), len(s2))\n    if l1 % l2 == 0 and s1 == s2 * (l1 // l2):\n        print(s1)\n    elif l2 % l1 == 0 and s2 == s1 * (l2 // l1):\n        print(s2)\n    elif s1 * (lcd(l1, l2) // l1) == s2 * (lcd(l1, l2) // l2):\n        print(s1 * (lcd(l1, l2) // l1))\n    else:\n        print(-1)", "from math import gcd\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    lcm = len(s) * len(t) // gcd(len(s), len(t))\n    print(t * (lcm // len(t)) if t * (lcm // len(t)) == s * (lcm // len(s)) else -1)", "import math\ntest_cases = int(input())\n\ndef get_lcm(num1, num2):\n    return abs(num1 * num2) // math.gcd(num1, num2)\n\ndef print_string_lcm(word_one, word_two):\n    if len(word_two) > len(word_one):\n        (word_one, word_two) = (word_two, word_one)\n    if len(word_one) % len(word_two) == 0:\n        iterations = len(word_one) // len(word_two)\n        if word_two * iterations != word_one:\n            print(-1)\n        else:\n            print(word_one)\n    else:\n        target_length = get_lcm(len(word_one), len(word_two))\n        iterations_one = target_length // len(word_one)\n        iterations_two = target_length // len(word_two)\n        if word_one * iterations_one != word_two * iterations_two:\n            print(-1)\n        else:\n            print(word_one * iterations_one)\nfor _ in range(test_cases):\n    word_one = input()\n    word_two = input()\n    print_string_lcm(word_one, word_two)", "import math\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    g = math.gcd(len(s1), len(s2))\n    if len(s2) // g * s1 == len(s1) // g * s2:\n        print(len(s2) // g * s1)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    d = math.gcd(len((s := input())), len((t := input())))\n    print([s * (len(t) // d), -1][s * (len(t) // d) != t * (len(s) // d)])", "import math\nn = int(input())\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor i in range(n):\n    a = input()\n    b = input()\n    tmp = lcm(len(a), len(b))\n    if a * (tmp // len(a)) == b * (tmp // len(b)):\n        print(a * (tmp // len(a)))\n    else:\n        print(-1)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nt = int(input())\nfor i in range(t):\n    s = input()\n    d = input()\n    l1 = len(s)\n    d1 = len(d)\n    fuck = int(lcm(l1, d1))\n    if l1 < d1:\n        g = fuck // l1\n        s = s * g\n        d = d * (fuck // d1)\n        if s == d:\n            print(s)\n        else:\n            print(-1)\n    else:\n        g = fuck // l1\n        s = s * g\n        d = d * (fuck // d1)\n        if s == d:\n            print(s)\n        else:\n            print(-1)", "for q in range(int(input())):\n    s = input()\n    t = input()\n    a = len(s)\n    b = len(t)\n    m = a * b\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    d = m // (a + b)\n    if s * (d // len(s)) == t * (d // len(t)):\n        print(s * (d // len(s)))\n    else:\n        print(-1)", "import math as mt\n\ndef main():\n    s = input()\n    t = input()\n    len_s = len(s)\n    len_t = len(t)\n    lcm = int(len_s * len_t / mt.gcd(len_s, len_t))\n    s = s * int(lcm / len_s)\n    t = t * int(lcm / len_t)\n    if s == t:\n        print(s)\n    else:\n        print(-1)\nt = int(input())\nwhile t:\n    main()\n    t -= 1", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\ntry:\n    t = int(input())\n    while t:\n        t -= 1\n        s = input()\n        s1 = input()\n        m = lcm(len(s), len(s1))\n        r1 = int(m // len(s))\n        r2 = int(m // len(s1))\n        a = s * r1\n        b = s1 * r2\n        if a == b:\n            print(a)\n        else:\n            print(-1)\nexcept:\n    pass", "from math import gcd\n\ndef solve():\n    s = input()\n    t = input()\n    ls = len(s)\n    lt = len(t)\n    lc = ls * lt // gcd(ls, lt)\n    c = lc // ls * s\n    if c == lc // lt * t:\n        return c\n    else:\n        return -1\nq = int(input())\nfor _ in range(q):\n    print(solve())", "def gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y % x, x)\nfor t in range(int(input())):\n    a = input()\n    b = input()\n    (x, y) = (len(a), len(b))\n    z = x * y // gcd(x, y)\n    if a * (z // x) == b * (z // y):\n        print(a * (z // x))\n    else:\n        print(-1)", "def lcm(s, t):\n    if s == 0:\n        return t\n    return lcm(t % s, s)\nfor t in range(int(input())):\n    a = input()\n    b = input()\n    (s, t) = (len(a), len(b))\n    z = s * t // lcm(s, t)\n    if a * (z // s) == b * (z // t):\n        print(a * (z // s))\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    l1 = len(s1)\n    l2 = len(s2)\n    g = l1 * l2 // math.gcd(l1, l2)\n    s11 = s1 * (g // l1)\n    s22 = s2 * (g // l2)\n    if s11 == s22:\n        print(s11)\n    else:\n        print(-1)", "from math import gcd\nfor _ in range(int(input())):\n    s = input()\n    b = input()\n    if s == b:\n        print(s)\n        continue\n    sl = len(s)\n    bl = len(b)\n    lcm = sl * bl // gcd(sl, bl)\n    f = lcm // sl\n    t = lcm // bl\n    s = s * f\n    b = b * t\n    if s == b:\n        print(s)\n    else:\n        print(-1)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nt = int(input())\nfor z in range(t):\n    s = input()\n    k = input()\n    s1 = len(s)\n    k1 = len(k)\n    d = lcm(s1, k1)\n    s = s * int(d / s1)\n    k = k * int(d / k1)\n    if s == k:\n        print(s)\n    else:\n        print('-1')", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nfor i in range(int(input())):\n    s1 = input()\n    s2 = input()\n    l = lcm(len(s1), len(s2))\n    if s1 * (l // len(s1)) == s2 * (l // len(s2)):\n        print(s1 * (l // len(s1)))\n    else:\n        print(-1)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    a = input()\n    b = input()\n    if a == b:\n        print(a)\n    else:\n        l = len(a) * len(b) // math.gcd(len(a), len(b))\n        f = l // len(a)\n        s = l // len(b)\n        a = a * f\n        b = b * s\n        if a == b:\n            print(a)\n        else:\n            print(-1)", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor i in range(t):\n    n1 = input()\n    n2 = input()\n    g = gcd(len(n1), len(n2))\n    if n1 * (len(n2) // g) == n2 * (len(n1) // g):\n        print(n1 * (len(n2) // g))\n    else:\n        print(-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nn = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    l1 = len(s1)\n    l2 = len(s2)\n    if l1 > l2:\n        d = gcd(l1, l2)\n    else:\n        d = gcd(l2, l1)\n    s1 = s1 * (l2 // d)\n    s2 = s2 * (l1 // d)\n    if s1 == s2:\n        print(s1)\n    else:\n        print(-1)", "import sys\nimport math\n\ndef solve(s, t):\n    gcd = math.gcd(len(s), len(t))\n    ss = s * (len(t) // gcd)\n    tt = t * (len(s) // gcd)\n    return ss if ss == tt else -1\nq = int(sys.stdin.readline().rstrip())\nres = []\nfor _ in range(q):\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    res.append(solve(s, t))\nfor r in res:\n    print(r)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(s, t):\n    ls = len(s)\n    lt = len(t)\n    l = lcm(ls, lt)\n    a = l // ls * s\n    b = l // lt * t\n    if a == b:\n        return a\n    else:\n        return -1\nn = int(input())\nans = []\nfor i in range(n):\n    s = input()\n    t = input()\n    ans.append(solve(s, t))\nfor i in ans:\n    print(i)", "import math\nfor _ in range(int(input())):\n    d = math.gcd(len((s := input())), len((t := input())))\n    print([s * (len(t) // d), -1][s * (len(t) // d) != t * (len(s) // d)])", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\n\ndef solve():\n    s = input()\n    t = input()\n    a = lcm(len(s), len(t))\n    x = a / len(s)\n    y = a / len(t)\n    if s * int(x) == t * int(y):\n        print(s * int(x))\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve()", "try:\n    import math\n\n    def lcm(x, y):\n        lcm = abs(x * y) // math.gcd(x, y)\n        return lcm\n    t = int(input())\n    while t != 0:\n        str1 = input()\n        str2 = input()\n        if str1[0] != str2[0] or str1[-1] != str2[-1]:\n            print(-1)\n        else:\n            s1 = len(set(list(str1)))\n            s2 = len(set(list(str2)))\n            if s1 == 1 and s2 == 1:\n                print(str2[0] * lcm(len(str1), len(str2)))\n            else:\n                (len1, len2) = (len(str1), len(str2))\n                l = lcm(len1, len2)\n                a = l // len1\n                b = l // len2\n                if str1 * a == str2 * b:\n                    print(str1 * a)\n                else:\n                    print(-1)\n        t -= 1\nexcept EOFError:\n    print(' ')", "from sys import stdin\nimport math\nfor _ in range(int(stdin.readline())):\n    s1 = stdin.readline().strip()\n    s2 = stdin.readline().strip()\n    if len(s1) > len(s2):\n        (s1, s2) = (s2, s1)\n    l1 = len(s1)\n    l2 = len(s2)\n    g = math.gcd(l1, l2)\n    r1 = l1 // g\n    r2 = l2 // g\n    u1 = s1[:g]\n    u2 = s2[:g]\n    if u1 == u2 and u1 * r1 == s1 and (u2 * r2 == s2):\n        lcm = l1 * l2 // g\n        print(s1 * (lcm // l1))\n    else:\n        print(-1)", "def lcm(a, b):\n    m = a * b\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return m // (a + b)\nq = int(input())\nres = []\nfor i in range(q):\n    s1 = input()\n    s2 = input()\n    l = lcm(len(s1), len(s2))\n    if s1 * (l // len(s1)) == s2 * (l // len(s2)):\n        res.append(s1 * (l // len(s1)))\n    else:\n        res.append(-1)\nfor i in range(q):\n    print(res[i])", "def GCD(a: int, b: int):\n    return a if b == 0 else GCD(b, a % b)\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    (ls, lt) = (len(s), len(t))\n    lcm = ls * lt // GCD(ls, lt)\n    S = s * (lcm // ls)\n    print(S if S == t * (lcm // lt) else '-1')", "import math\nT = int(input())\nwhile T != 0:\n    T -= 1\n    s = input()\n    t = input()\n    lens = len(s)\n    lent = len(t)\n    g = math.gcd(lens, lent)\n    tep = lens * lent // g\n    s *= tep // lens\n    t *= tep // lent\n    if s == t:\n        print(s)\n    else:\n        print(-1)", "from math import gcd\nq = int(input())\nfor _ in range(q):\n    t = input()\n    s = input()\n    n1 = len(t)\n    n2 = len(s)\n    x = gcd(n1, n2) * (n1 // gcd(n1, n2)) * (n2 // gcd(n1, n2))\n    if t * (x // n1) == s * (x // n2):\n        print(t * (x // n1))\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    m = len(s)\n    n = len(t)\n    lcm = m * n // math.gcd(m, n)\n    S = s * (lcm // m)\n    T = t * (lcm // n)\n    if S == T:\n        print(S)\n    else:\n        print(-1)", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nfor i in range(int(input())):\n    s = input()\n    t = input()\n    if s * len(t) == t * len(s):\n        print(int(lcm(len(s), len(t)) / len(s)) * s)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(x, y):\n    return int(x * y / gcd(x, y))\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    lcm_s = lcm(len(s), len(t))\n    s *= lcm_s // len(s)\n    t *= lcm_s // len(t)\n    if s == t:\n        print(s)\n    else:\n        print(-1)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    a = len(s)\n    b = len(t)\n    lcm = a * b // gcd(a, b)\n    s *= lcm // a\n    t *= lcm // b\n    if s == t:\n        print(s)\n    else:\n        print(-1)", "def solve():\n    from math import gcd\n    s = str(input())\n    t = str(input())\n    n = len(s)\n    m = len(t)\n    l = n * m // gcd(n, m)\n    if s * (l // n) == t * (l // m):\n        print(s * (l // n))\n    else:\n        print(-1)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\nrl = lambda : list(map(int, sys.stdin.readline().split()))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    (lenS, lenT) = (len(s), len(t))\n    lcm = lenS * lenT // gcd(lenS, lenT)\n    s *= lcm // lenS\n    t *= lcm // lenT\n    print(s) if s == t else print('-1')", "from math import gcd\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    ls = len(s)\n    lt = len(t)\n    lc = abs(ls * lt) // gcd(ls, lt)\n    ans1 = t * (lc // lt)\n    ans2 = s * (lc // ls)\n    if ans1 == ans2:\n        ans = ans1\n    else:\n        ans = -1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    ls = len(s)\n    lt = len(t)\n    lc = abs(ls * lt) // gcd(ls, lt)\n    ans1 = t * (lc // lt)\n    ans2 = s * (lc // ls)\n    if ans1 == ans2:\n        ans = ans1\n    else:\n        ans = -1\n    print(ans)", "def gcd(a, b):\n    while b:\n        a %= b\n        (a, b) = (b, a)\n    return a\n\ndef lcm(a, b):\n    return int(a / gcd(a, b) * b)\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        a = input()\n        b = input()\n        na = len(a)\n        nb = len(b)\n        x = lcm(na, nb)\n        a *= int(x / na)\n        b *= int(x / nb)\n        if a == b:\n            print(a)\n        else:\n            print(-1)\nmain()", "def doit():\n    A = input()\n    B = input()\n    g = gcd(len(A), len(B))\n    s = A * (len(B) // g)\n    print(s if s == B * (len(A) // g) else '-1')\nfrom math import gcd\nT = int(input())\nfor _ in range(T):\n    doit()", "from math import gcd\nt = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    x = len(a) * len(b) // gcd(len(a), len(b))\n    if x // len(a) * a == x // len(b) * b:\n        print(x // len(a) * a)\n    else:\n        print(-1)", "n = int(input())\nl = [-1] * n\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(n):\n    sn = input()\n    sm = input()\n    b = compute_gcd(len(sn), len(sm))\n    b = len(sn) * len(sm) // b\n    sn = sn * (b // len(sn))\n    sm = sm * (b // len(sm))\n    if sn == sm:\n        l[i] = sm\nfor j in range(n):\n    print(l[j])", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor tc in range(int(input())):\n    s = input()\n    t = input()\n    if s[0] != t[0] or s[-1] != t[-1]:\n        print('-1')\n    else:\n        lens = len(s)\n        lent = len(t)\n        if s.count(s[0]) == lens and t.count(t[0]) == lent:\n            print(s[0] * lcm(lens, lent))\n            continue\n        if lent > lens:\n            (lens, lent, s, t) = (lent, lens, t, s)\n        while lens != lent:\n            t = t * (lcm(lens, lent) // lent)\n            lent = len(t)\n            (lens, lent, s, t) = (lent, lens, t, s)\n        if t == s:\n            print(s)\n        else:\n            print('-1')", "import math\nfor test_var in range(int(input())):\n    a = input()\n    b = input()\n    if len(a) < len(b):\n        (a, b) = (b, a)\n    if a * len(b) == b * len(a):\n        gc = math.gcd(len(a), len(b))\n        print(a * (len(b) // gc))\n    else:\n        print(-1)", "import math\ntestCases = int(input())\nfor i in range(testCases):\n    stringA = input()\n    stringB = input()\n    a = len(stringA)\n    b = len(stringB)\n    LCM = a * b // math.gcd(a, b)\n    stringAlcm = stringA * (LCM // a)\n    stringBlcm = stringB * (LCM // b)\n    if stringAlcm == stringBlcm:\n        print(stringAlcm)\n    else:\n        print(-1)", "import sys\nimport math\ninf = float('inf')\n\ndef lcm(a, b):\n    return int(a / math.gcd(a, b) * b)\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    x = len(a)\n    y = len(b)\n    if y < x:\n        z = lcm(x, y)\n        z1 = z // y\n        z2 = z // x\n        ans1 = b * z1\n        ans2 = a * z2\n        if ans1 == ans2:\n            print(ans1)\n        else:\n            print(-1)\n    else:\n        z = lcm(x, y)\n        z1 = z // x\n        z2 = z // y\n        ans1 = a * z1\n        ans2 = b * z2\n        if ans1 == ans2:\n            print(ans1)\n        else:\n            print(-1)", "import math\nt = int(input())\nwhile t != 0:\n    s = input()\n    p = input()\n    m = len(s)\n    n = len(p)\n    l = m * n // math.gcd(m, n)\n    s = s * (l // m)\n    p = p * (l // n)\n    if s == p:\n        print(s)\n    else:\n        print('-1')\n    t = t - 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef check(x, y):\n    a = len(x) // gcd(len(x), len(y)) * len(y)\n    x1 = x * (a // len(x))\n    y1 = y * (a // len(y))\n    if x1 == y1:\n        return x1\n    return -1\n    pass\nfor _ in range(int(input())):\n    x = input()\n    y = input()\n    print(check(x, y))", "import math\nn = int(input())\nfor i in range(n):\n    s1 = input()\n    s2 = input()\n    l1 = len(s1)\n    l2 = len(s2)\n    h = math.gcd(l1, l2)\n    g1 = s1 * (l2 // h)\n    g2 = s2 * (l1 // h)\n    if g1 == g2:\n        print(g1)\n    else:\n        print(-1)", "def compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller + 1):\n        if x % i == 0 and y % i == 0:\n            hcf = i\n    return hcf\nt = int(input())\nfor j in range(t):\n    s = input()\n    t = input()\n    S = len(s)\n    T = len(t)\n    if s * T != t * S:\n        print(-1)\n    else:\n        lc = S * T // compute_hcf(S, T)\n        lcs = lc // S\n        lct = lc // T\n        k = 1\n        f = 0\n        while lc * k <= S * T:\n            if s * (lcs * k) == t * (lct * k):\n                f = 1\n                break\n            else:\n                k = k + 1\n        if f == 1:\n            print(s * (lcs * k))\n        else:\n            print(-1)", "import math\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    lcm = abs(len(s) * len(t)) // math.gcd(len(s), len(t))\n    lcms = lcm // len(s)\n    lcmt = lcm // len(t)\n    if s * lcms == t * lcmt:\n        print(s * lcms)\n    else:\n        print(-1)", "def repeater(s):\n    index = (s + s)[1:-1].find(s)\n    if index == -1:\n        return s\n    else:\n        return s[:index + 1]\n\ndef getGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef getLCM(x, y):\n    lcm = x * y // getGCD(x, y)\n    return lcm\nt = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    ar = repeater(a)\n    br = repeater(b)\n    if ar != br:\n        print(-1)\n    else:\n        aCount = len(a) / len(ar)\n        bCount = len(b) / len(br)\n        lcm = getLCM(aCount, bCount)\n        print(ar * int(lcm))", "import math\nq = int(input())\nfor use in range(0, q):\n    s = input()\n    t = input()\n    ns = len(s)\n    nt = len(t)\n    g = math.gcd(ns, nt)\n    al = s * (nt // g)\n    if al == t * (ns // g):\n        print(al)\n    else:\n        print(-1)"]