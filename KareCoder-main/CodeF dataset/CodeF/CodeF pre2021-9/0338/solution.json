["from math import sqrt\n\ndef max_div(num):\n    if num % 2 == 0:\n        return num // 2\n    for n in range(3, int(sqrt(num)) + 1, 2):\n        if num % n == 0:\n            return num // n\n    return num - 1\nquant_testes = int(input())\nfor c in range(quant_testes):\n    num = int(input())\n    maior = max_div(num)\n    n1 = maior\n    n2 = num - maior\n    if n1 > n2:\n        (n1, n2) = (n2, n1)\n    print(n1, n2)", "from math import sqrt\n\ndef func():\n    t = int(input().strip())\n    cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        cases.append(n)\n    for case in cases:\n        ans = min_num(case)\n        print(str(ans[0]) + ' ' + str(ans[1]))\n\ndef min_num(n):\n    ans = 1\n    for x in range(2, int(sqrt(n)) + 1):\n        if n % x == 0:\n            ans = n // x\n            break\n    return (ans, n - ans)\nfunc()", "def smallest_divisor(n):\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    d = 5\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += 2\n        if n % d == 0:\n            return d\n        d += 4\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    d = smallest_divisor(n)\n    print(n // d, n // d * (d - 1))", "from sys import stdin\n\ndef smallest_divisor(n):\n    for i in [2, 3, 5]:\n        if n % i == 0:\n            return i\n    increments = [4, 2, 4, 2, 4, 6, 2, 6]\n    d = 7\n    inc = 0\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += increments[inc]\n        inc += 1\n        if inc == 8:\n            inc = 0\n    return n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    sm = smallest_divisor(n)\n    t = n // sm\n    print((sm - 1) * t, t)", "def prime(k):\n    ans = -1\n    for i in range(2, int(k ** 0.5) + 1):\n        if k % i == 0:\n            return i\n    return -1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = prime(n)\n    if k == -1:\n        print(1, n - 1)\n    else:\n        print(n // k, n - n // k)", "import math\n\ndef primefactors(n):\n    l = []\n    while n % 2 == 0:\n        (l.append(2),)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return l\n\ndef solve(n):\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        s = primefactors(n)\n        if len(s) == 1:\n            print(1, n - 1)\n        else:\n            l = len(s) - 1\n            p = 1\n            while l > 0:\n                p *= s[l]\n                l -= 1\n            print(int(p), int(n - p))\nt = int(input())\nfor i in range(t):\n    solve(int(input()))", "def is_p(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    imp = is_p(n)\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif imp == True:\n        print(1, n - 1)\n    else:\n        x = n // imp\n        print(x, (n // x - 1) * x)", "t = int(input())\n\ndef q(n):\n    m = int(n ** (1 / 2)) + 2\n    for i in range(2, m):\n        if n % i == 0:\n            v = n // i\n            v1 = v\n            v2 = v * (i - 1)\n            return str(v1) + ' ' + str(v2)\n    return '1 ' + str(n - 1)\nfor i in range(t):\n    n = int(input())\n    print(q(n))", "def func(s):\n    for i in range(3, int(s ** 0.5) + 1):\n        if s % i == 0:\n            return (s // i, i)\n    else:\n        return (1, s)\nfor _ in [0] * int(input()):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        (x, y) = func(n)\n        print(x, x * (y - 1))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        a = b = n // 2\n        print(a, b)\n    else:\n        max_a = 1\n        for i in range(3, int(n ** (1 / 2)) + 1, 2):\n            if n % i == 0:\n                a = n // i\n                max_a = max(a, max_a)\n        print(max_a, n - max_a)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        a = b = n // 2\n        print(a, b)\n    else:\n        a = 1\n        for i in range(3, int(n ** (1 / 2)) + 1, 2):\n            if n % i == 0:\n                a = n // i\n                break\n        print(a, n - a)", "def largest_factor(n):\n    if n % 3 == 0:\n        return n // 3\n    i = 5\n    while i ** 2 <= n:\n        if n % i == 0:\n            return n // i\n        if n % (i + 2) == 0:\n            return n // (i + 2)\n        i += 6\n    return 1\n\ndef answer(n):\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    lf = largest_factor(n)\n    return [lf, n - lf]\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        print(' '.join(map(str, answer(n))))\n        t -= 1\n    return\nmain()", "from math import sqrt\n\ndef ans(a):\n    if a % 2 == 0:\n        print(a // 2, a // 2)\n    else:\n        for i in range(2, int(sqrt(a) + 1)):\n            if a % i == 0:\n                print(a // i, a - a // i)\n                return\n        print(1, a - 1)\nfor _ in range(int(input())):\n    a = int(input())\n    ans(a)", "from math import isqrt\n\ndef pairWithMinimumLCM(n):\n    if not n % 2:\n        value = n // 2\n        return f'{value} {value}'\n    for i in range(3, isqrt(n) + 1, 2):\n        if not n % i:\n            value = n // i\n            return f'{value} {n - value}'\n    return f'1 {n - 1}'\nnTestCases = int(input())\ntestCases = [int(input()) for x in range(nTestCases)]\n[print(pairWithMinimumLCM(testCase)) for testCase in testCases]", "from math import isqrt\n\ndef pairWithMinimumLCM(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if not n % 2:\n        value = n // 2\n        memo[n] = f'{value} {value}'\n        return memo[n]\n    for i in range(3, isqrt(n) + 1, 2):\n        if not n % i:\n            value = n // i\n            memo[n] = f'{value} {n - value}'\n            return memo[n]\n    memo[n] = f'1 {n - 1}'\n    return memo[n]\nnTestCases = int(input())\ntestCases = [int(input()) for x in range(nTestCases)]\n[print(pairWithMinimumLCM(testCase)) for testCase in testCases]", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    temp = False\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        temp = True\n        continue\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            temp = True\n            break\n    if not temp:\n        print(1, n - 1)", "for i in range(int(input())):\n    n = int(input())\n    c = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            c = i\n            break\n    if c == 0:\n        print(1, n - 1)\n    else:\n        c = n // c\n        print(c, n - c)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(f'{n // 2} {n // 2}')\n    else:\n        k = int(n ** 0.5)\n        print_1 = True\n        for i in range(2, k + 1):\n            if n % i == 0:\n                print(f'{n // i} {n - n // i}')\n                print_1 = False\n                break\n        if print_1:\n            print(f'{1} {n - 1}')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            dv = int(n / i)\n            print(dv, dv * (i - 1))\n            break\n    else:\n        print(1, n - 1)", "import math\n\ndef main(read_in):\n    out_list = []\n    for n in read_in:\n        out = [1, n - 1]\n        for i in range(2, 1 + int(math.sqrt(n))):\n            if n % i == 0:\n                a = n // i\n                b = n - a\n                out = [a, b]\n                break\n        out_list.append(out)\n    return out_list\n\ndef read_lines_input():\n    read_in = []\n    n = int(input())\n    for i in range(n):\n        s = input()\n        read_in.append(int(s))\n    return read_in\n\ndef print_list(out_list):\n    [print(str(s[0]) + ' ' + str(s[1])) for s in out_list]\nread_in = read_lines_input()\nout_list = main(read_in)\nprint_list(out_list)", "def fun(n):\n    h = int(n ** 0.5) + 1\n    for i in range(2, h):\n        if n % i == 0:\n            return n // i\n    return 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        h = fun(n)\n        s = n - h\n        print(h, s)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    for i in range(2, 31623):\n        if n % i == 0:\n            a = n // i\n            b = n - a\n            print(a, b)\n            break\n    else:\n        print(1, n - 1)", "from math import *\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    if x % 2 == 0:\n        print(x // 2, x // 2)\n    else:\n        Max = 0\n        for j in range(1, int(sqrt(x)) + 1):\n            if x % j == 0:\n                Max = max(Max, j)\n                if x // j <= x // 2:\n                    Max = max(Max, x // j)\n        print(Max, x - Max)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    (s, k) = (int(math.sqrt(n)), False)\n    for i in range(2, s + 1):\n        if n % i == 0:\n            x = n // i\n            print(x, n - x)\n            k = True\n            break\n    if k == False:\n        print(1, n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    (s, k) = (int(math.sqrt(n)), False)\n    for i in range(2, s + 1):\n        if n % i == 0:\n            x = n // i\n            print(x, n - x)\n            k = True\n            break\n    if k == False:\n        print(1, n - 1)", "import math\n\ndef numpair(n):\n    for i in range(2, int(math.sqrt(n)) + 2):\n        if n % i == 0:\n            return int(n / i)\n    return 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = numpair(n)\n    print('{} {}'.format(a, n - a))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(2, 1 + math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            break\n    else:\n        print(1, n - 1)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(f'{n // 2} {n // 2}')\n        continue\n    h = int(sqrt(n) + 3)\n    ans = 0\n    for i in range(3, h, 2):\n        if n % i == 0:\n            ans = i\n            break\n    if ans == 0:\n        ans = n\n    print(f'{n // ans} {n - n // ans}')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        c = 0\n        for i in range(2, math.ceil(pow(n, 0.5)) + 1):\n            if n % i == 0:\n                c = i\n                break\n        if c:\n            print(n // c, n - n // c)\n        else:\n            print(1, n - 1)", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor s in [*open(0)][1:]:\n    n = int(s)\n    mn = 10 ** 9\n    largest_div = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            largest_div = max(largest_div, n // i)\n    print(largest_div, n - largest_div)", "import math\n\ndef func(n: int) -> tuple:\n    end = 0\n    a = 1\n    b = n - 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n - i) % i != 0:\n            continue\n        max_end = max(int(n / i), i)\n        if end < max_end:\n            end = max_end\n            a = max_end\n            b = n - max_end\n    return (a, b)\nn = int(input())\nfor i in range(n):\n    t = int(input())\n    (a, b) = func(t)\n    print(a, b)", "for i in range(int(input())):\n    a = int(input())\n    for j in range(2, 31628):\n        if a % j == 0:\n            print(a // j, a - a // j)\n            break\n    else:\n        print(a - 1, 1)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    if x % 2 == 0:\n        print(int(x / 2), int(x / 2))\n    else:\n        k = 0\n        for j in range(2, 32000):\n            if x % j == 0:\n                print(int(x / j), int(x - x / j))\n                k += 1\n                break\n        if k == 0:\n            print(1, x - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    divisores = set()\n    for aux in range(1, int(math.sqrt(n)) + 1):\n        if n % aux == 0:\n            divisores.add(aux)\n            if n / aux != n:\n                divisores.add(n // aux)\n    penultimo_divisor = max(list(divisores))\n    print(str(penultimo_divisor) + ' ' + str(n - penultimo_divisor))", "for _ in range(int(input())):\n    x = int(input())\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            a = x // i\n            print(a, x - a)\n            break\n    else:\n        print(1, x - 1)", "def check_factor(n):\n    li = []\n    for i in range(int(n ** (1 / 2)), 1, -1):\n        if n % i == 0:\n            li.append(n - i)\n            li.append(n - n // i)\n    if len(li) != 0:\n        return min(li)\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        an = check_factor(n)\n        if an:\n            print(an, n - an)\n        else:\n            print(1, n - 1)", "def highest(num):\n    for i in range(2, int(n ** 0.5) + 1):\n        if num % i == 0:\n            return num // i\n    return 1\nfor test in range(int(input())):\n    n = int(input())\n    high = highest(n)\n    print(high, n - high)", "t = int(input())\ns = []\nimport math\nfor i in range(t):\n    r = []\n    n = int(input())\n    if n % 2 == 0:\n        a = n // 2\n        b = n // 2\n        r.append(a)\n        r.append(b)\n    else:\n        a = math.ceil(math.sqrt(n))\n        for j in range(3, a + 1, 2):\n            if n % j == 0:\n                p = n // j\n                break\n            else:\n                p = 0\n        if p != 0:\n            q = n - p\n            r.append(p)\n            r.append(q)\n        else:\n            p = 1\n            q = n - p\n            r.append(p)\n            r.append(q)\n    s.append(' '.join(map(str, r)))\nfor i in range(len(s)):\n    print(s[i])", "import math\ncasos = int(input())\nfor p in range(casos):\n    saida = ''\n    n = int(input())\n    t = 0\n    supo = math.sqrt(n + 0.1)\n    for f in range(2, int(supo) + 1):\n        if n % f == 0:\n            t = 1\n            t1 = f\n            if n / f > t:\n                t = n / f\n                saida += str(int(t)) + ' ' + str(int(n - t))\n                print(saida)\n                break\n    if t == 0:\n        saida += '1 ' + str(int(n - 1))\n        print(saida)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    temp = False\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        temp = True\n        continue\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            temp = True\n            break\n    if not temp:\n        print(1, n - 1)", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nz = int(input())\nfor y in range(z):\n    n = int(input())\n    raiz = int(math.sqrt(n + 0.5))\n    aux = 1\n    for i in range(2, raiz + 1):\n        if n % i == 0:\n            aux = 0\n            print(n // i, n - n // i)\n            break\n    if aux == 1:\n        print(aux, n - 1)", "from math import gcd, sqrt, ceil\nimport sys\n\ndef lcm(a, b, z):\n    if a == 0 or b == 0:\n        return max(a, b)\n    return z(a * b) // gcd(a, b)\nT = int(input())\nz = abs\nfor i in range(T):\n    n = int(input())\n    t = 0\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        continue\n    for i in range(2, ceil(sqrt(n)) + 1):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            t = 1\n            break\n    if t != 1:\n        print(1, n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    flag = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            flag = 0\n            break\n    if flag:\n        print(1, n - 1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    for j in range(2, int(math.sqrt(n) + 2)):\n        if n % j == 0:\n            print(n // j, n - n // j)\n            break\n    else:\n        print(1, n - 1)", "def largest_divisor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = largest_divisor(n)\n    print(n // d, n // d * (d - 1))", "import math\nfrom typing import *\n\ndef find_combination(n: int) -> Tuple[int, int]:\n    if n % 2 == 0:\n        return (n // 2, n // 2)\n    for div in range(3, int(math.sqrt(n)) + 1):\n        if n % div == 0:\n            return (n // div, n - n // div)\n    return (1, n - 1)\nt = int(input())\nfor _ in range(t):\n    print('%d %d' % find_combination(int(input())))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    if n == 2:\n        print(1, 1)\n        continue\n    max_f = 1\n    for i in range(1, int(n ** 0.5) + 2):\n        if n % i == 0:\n            max_f = max(max_f, i)\n            if n // i < n:\n                max_f = max(max_f, n // i)\n    print(max_f, n - max_f)", "import math\nk = input()\nfor l in range(int(k)):\n    n = int(input())\n    yes = False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            print(int(n / i), ' ', int((i - 1) * (n / i)))\n            yes = True\n            break\n    if yes == False:\n        print('1 ', n - 1)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        flag = False\n        for j in range(2, int(n ** 0.5) + 1):\n            if n % j == 0:\n                print(n // j, n - n // j)\n                flag = True\n                break\n        if flag == False:\n            print(1, n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    divisores = set()\n    for aux in range(1, int(math.sqrt(n)) + 1):\n        if n % aux == 0:\n            divisores.add(aux)\n            if n / aux != n:\n                divisores.add(n // aux)\n    penultimo_divisor = max(list(divisores))\n    print(str(penultimo_divisor) + ' ' + str(n - penultimo_divisor))", "import math\nt = int(input())\ncases = []\nfor i in range(t):\n    cases.append(int(input()))\n\ndef solve(case):\n    if case % 2 == 0:\n        print(case // 2, case // 2)\n        return\n    for fpf in range(3, int(case ** (1 / 2)) + 1, 2):\n        if case % fpf == 0:\n            print(case // fpf, case - case // fpf)\n            return\n    print(1, case - 1)\nfor case in cases:\n    solve(case)", "def give(n):\n    flag = 'no'\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            flag = 'yes'\n            break\n    if flag == 'no':\n        return (1, n - 1)\n    else:\n        x = n // i\n        y = x * (i - 1)\n        return (x, y)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif n == 1:\n        print(1, 1)\n    else:\n        ans = give(n)\n        print(ans[0], ans[1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    res = [1, n - 1]\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                res = [n // i, n - n // i]\n                break\n            i += 2\n        print(*res)", "t = int(input())\nfor teste in range(t):\n    n = int(input())\n    div = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            div.append(i)\n            div.append(n // i)\n    div.append(1)\n    div = sorted(set(div))\n    print(div[-1], n - div[-1])", "from functools import reduce\n\ndef factors(n):\n    return list(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nfor _ in range(int(input())):\n    n = int(input())\n    nmax = float('inf')\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        x = factors(n)\n        x.sort()\n        print(x[-2], n - x[-2])", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    flag = 0\n    for i in range(math.floor(math.sqrt(n)), 1, -1):\n        if n % i == 0:\n            flag = int(max(i, n / i))\n    if flag == 0:\n        print(1, n - 1)\n    else:\n        print(flag, n - flag)\n    t -= 1", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        i = 2\n        flag = False\n        while True:\n            if i * i > n:\n                break\n            if n % i == 0:\n                flag = True\n                t = i\n                if n / i > t:\n                    t = int(n / i)\n                s1 = n - t\n                print(str(t) + ' ' + str(s1))\n                break\n            i += 1\n        if flag == False:\n            print('1 ' + str(n - 1))\nmain()", "def prime(n):\n    f = 0\n    for i in range(2, n - 1):\n        if n % i == 0:\n            f = 1\n            break\n    if f == 0:\n        return 1\n    else:\n        return 0\nfor p in range(int(input())):\n    n = int(input())\n    if n % 2:\n        f = 0\n        for i in range(2, int(n ** (1 / 2)) + 1):\n            if n % i == 0 and prime(i):\n                f = 1\n                break\n        if f == 0:\n            print(1, n - 1)\n        else:\n            v = n // i\n            l = [v, n - v]\n            l.sort()\n            print(*l)\n    else:\n        print(n // 2, n // 2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                print(n // i, n - n // i)\n                break\n        else:\n            print(1, n - 1)", "import math\n\ndef ans(n):\n    if n % 2 == 0:\n        return str(n // 2) + ' ' + str(n // 2)\n    temp = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            temp = i\n            break\n    if temp == 1:\n        return '1 ' + str(n - 1)\n    p1 = n // temp\n    p2 = n - p1\n    return str(p1) + ' ' + str(p2)\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    print(ans(n))", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        continue\n    else:\n        k = sqrt(n)\n        a = floor(k)\n        a = a + 1\n        for i in range(3, a + 1, 2):\n            if n % i == 0:\n                b = i\n                ans = n // b\n                print(ans, n - ans)\n                break\n        else:\n            ans = n - 1\n            print(ans, 1)", "from math import sqrt\n\ndef is_prime(n):\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\ny = int(input())\nans = []\nfor i in range(y):\n    n = int(input())\n    t = is_prime(n)\n    print(int(n / t), int((t - 1) * (n / t)))", "import math\nT = int(input())\n\ndef get_least_prime_factor(x):\n    if x % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return i\n    return x\nfor _ in range(T):\n    n = int(input())\n    lpf = get_least_prime_factor(n)\n    a = n // lpf\n    b = n - a\n    print(a, b)", "import math\nfor _ in range(int(input())):\n\n    def smallestDivisor(n):\n        if n % 2 == 0:\n            return 2\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        z = smallestDivisor(n)\n        if z == n:\n            print(1, n - 1)\n        else:\n            g = n // z\n            print(g, n - g)", "import math\n\ndef primeFactors(n):\n    while n % 2 == 0:\n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n // i\n    if n > 2:\n        l.append(n)\nx = int(input())\nfor i in range(x):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, end=' ')\n        print(n // 2)\n    else:\n        l = []\n        primeFactors(n)\n        if len(l) == 1:\n            print(1, end=' ')\n            print(n - 1)\n        else:\n            print(n // min(l), end=' ')\n            print(n - n // min(l))", "import math\n\ndef primeFactors(n, l):\n    while n % 2 == 0:\n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n // i\n    if n > 2:\n        l.append(n)\n    return l\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        p = primeFactors(n, l)\n        p.sort(reverse=True)\n        if len(p) == 1:\n            print(1, n - 1)\n        else:\n            c = 1\n            for j in range(len(p) - 1):\n                c *= p[j]\n            print(c, n - c)", "from math import sqrt\nimport sys\n\ndef inlt():\n    input = sys.stdin.readlines\n    return list(map(int, input()))\n\nclass Test:\n\n    def __init__(self, test):\n        test = list(map(int, test))\n        self.n_numbers = test[0]\n        assert 0 < self.n_numbers <= 10\n        self.numbers = test[1:]\n\nclass SmallestDivisor:\n\n    @staticmethod\n    def find(n):\n        if n % 2 == 0:\n            return 2\n        else:\n            sn = int(sqrt(n)) + 1\n            for i in range(3, sn, 2):\n                if n % i == 0:\n                    return i\n            return n\n\nclass AB:\n\n    @staticmethod\n    def find(n):\n        n_sd = SmallestDivisor.find(n)\n        y = n / n_sd\n        a = y\n        b = y * (n_sd - 1)\n        return (int(a), int(b))\ntest = Test(inlt())\nfor num in test.numbers:\n    (a, b) = AB.find(num)\n    print(a, b, sep=' ')", "def driver():\n    t = int(input())\n    for i in range(t):\n        solution()\n\ndef solution():\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                i = max(i, n // i)\n                print(i, i * (n // i - 1))\n                break\n        else:\n            print(1, n - 1)\ndriver()", "import math\n\ndef prime(n):\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    if n > 2:\n        return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = prime(n)\n    if n != a:\n        print(int(n / a), n - int(n / a))\n    else:\n        print(1, n - 1)", "import math\n\ndef prime(n, lis):\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            lis.append(i)\n            n = n / i\n    if n > 2:\n        lis.append(n)\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        lis = []\n        prime(n, lis)\n        lis.sort()\n        a = b = 1\n        for i in lis:\n            a = a * i\n        if len(lis) == 1:\n            print(int(lis[0]) - 1, 1)\n        else:\n            print(int(a // lis[0]), int(a // lis[0] * (lis[0] - 1)))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    k = 0\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                k = n // i\n                break\n        if k == 0:\n            print('1', n - 1)\n        else:\n            print(k, n - k)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = int(math.sqrt(n) + 1)\n    p = 1\n    for j in range(2, x):\n        if n % j == 0:\n            print(n // j, n - n // j)\n            p = 0\n            break\n    if p:\n        print(1, n - 1)", "import math\nel = int(input())\nfor x in range(el):\n    num = int(input())\n    res = []\n    for i in range(1, math.ceil(pow(num, 0.5)) + 5):\n        if num % i == 0:\n            res.append([i, num - i])\n            res.append([num // i, num - num // i])\n    resMin = num - 1\n    for i in res:\n        if max(i) < resMin:\n            resMin = max(i)\n    print(num - resMin, resMin)", "import math\n\ndef findB(n):\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return n // i\n    return n - 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = 0\n    if n & 1:\n        b = findB(n)\n    else:\n        b = n // 2\n    print(n - b, b)", "from sys import *\nfrom math import sqrt\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            break\n    else:\n        print(1, n - 1)", "import math\n\ndef c(n):\n    l = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            l += [i]\n            l += [n // i]\n    if l == []:\n        l += [n]\n    return l\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        k = c(n)\n        k.sort()\n        m = []\n        for i in k:\n            m += [(n // i * (i - 1), n // i)]\n        m.sort()\n        print(m[0][0], m[0][1])\nmain()", "def lmc(n):\n    if n % 2 == 0:\n        return [int(n / 2), int(n / 2)]\n    ans = -1\n    j = 2\n    while j * j <= n:\n        if n % j == 0:\n            ans = max(ans, j)\n            ans = max(ans, n / j)\n        j += 1\n    if ans == -1:\n        ans = 1\n    return [int(ans), int(n - ans)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(*lmc(n))", "import math\n\ndef isPrime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nt = int(input())\nwhile t:\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif isPrime(n):\n        print(1, n - 1)\n    else:\n        larg = 0\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                larg = i\n                break\n        print(n // larg, n - n // larg)\n    t -= 1", "def solve():\n    n = int(input())\n    for d in range(2, int(n ** 0.5) + 1):\n        if n % d == 0:\n            print(n // d, n - n // d)\n            return\n    print(1, n - 1)\nfor _ in range(int(input())):\n    solve()", "import math\n\ndef solve(n):\n    sq = int(math.sqrt(n)) + 5\n    for i in range(2, sq):\n        if not n % i:\n            return str(n // i) + ' ' + str(n - n // i)\n    return '1 ' + str(n - 1)\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    print(solve(n))", "t = int(input())\n\ndef smallestDiv(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        x = n // smallestDiv(n)\n        y = n - x\n        print(x, y)", "import math\nT = int(input().rstrip())\n\ndef solve(n):\n    if n % 2 == 0:\n        ans = int(n / 2)\n        print(f'{ans} {ans}')\n        return\n    counter = 3\n    max_counter = int(math.sqrt(n))\n    while n % counter != 0 and counter <= max_counter:\n        counter += 2\n    if n % counter == 0:\n        ans1 = int(n / counter)\n        ans2 = ans1 * (counter - 1)\n        print(f'{ans1} {ans2}')\n    else:\n        print(f'{1} {n - 1}')\nfor test in range(T):\n    n = int(input().rstrip())\n    solve(n)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        flag = 0\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                flag = 1\n                ans = i\n                break\n        if flag == 0:\n            ans = n\n        print(n // ans, (ans - 1) * (n // ans))", "import math\n\ndef printDivisors(n):\n    list = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                list.append(n // i)\n            else:\n                list.append(i)\n                list.append(int(n / i))\n    return list\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        l = printDivisors(n)\n        ans = n\n        (x, y) = (0, 0)\n        for i in l:\n            (a, b) = (i, n - i)\n            if a > 0 and b > 0:\n                lc = lcm(a, b)\n                if lc <= ans:\n                    (x, y) = (a, b)\n                    ans = lc\n        print(x, y)", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    maxi = n - 1\n    (one, two) = (1, n - 1)\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        flag = 0\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                temp = n\n                cnt = 1\n                while temp % i == 0:\n                    temp = temp // i\n                    cnt += 1\n                if cnt > 1:\n                    one = pow(i, cnt - 2) * temp\n                    two = n - one\n                else:\n                    one = n // i\n                    two = n - n // i\n                break\n        print(one, two)", "def divisor(n):\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(int(n / 2), int(n / 2))\n    else:\n        val = int(n / divisor(n))\n        print(val, n - val)", "def smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        u = smallestDivisor(n)\n        print(n // u, n // u * (u - 1))", "import math\n\ndef factor(n):\n    k = int(math.sqrt(n))\n    for i in range(2, k + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nwhile t:\n    n = int(input())\n    k = factor(n)\n    if k == n:\n        print(1, n - 1)\n    else:\n        temp1 = n // k\n        temp2 = n - temp1\n        print(temp1, temp2)\n    t = t - 1", "import math\n\ndef div(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    x = div(n)\n    if x == 2:\n        print(n // 2, n // 2)\n    elif x == n:\n        print(1, n - 1)\n    else:\n        print(n // x, n - n // x)", "from math import sqrt\n\ndef primes(n):\n    arr = []\n    flag = 0\n    while n % 2 == 0:\n        if flag == 0:\n            arr.append(2)\n            flag = 1\n        n = n // 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        flag = 0\n        while n % i == 0:\n            if flag == 0:\n                arr.append(i)\n                flag = 1\n            n = n // i\n    if n > 2:\n        arr.append(n)\n    return arr\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    primesarr = primes(n)\n    print(n // primesarr[0], n - n // primesarr[0])", "def minfactor(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    sm = minfactor(n)\n    print(n // sm, n - n // sm)", "def smallestDivisor(n):\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef solve(N):\n    if N % 2 == 0:\n        return (N // 2, N // 2)\n    else:\n        tmp = smallestDivisor(N)\n        return (N // tmp, N - N // tmp)\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        N = int(input())\n        (start, end) = solve(N)\n        print(start, end)\nmain()", "def get_smallest_divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = n // get_smallest_divisor(n)\n    print(f'{a} {n - a}')", "import math\nt = int(input())\nfor i in range(t):\n    lst1 = []\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, end=' ')\n        print(n // 2)\n    else:\n        for i in range(1, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                lst1.append(i)\n                lst1.append(n // i)\n        if len(lst1) == 2:\n            print(n - 1, end=' ')\n            print(1)\n        else:\n            a = (lst1[2] - 1) / lst1[2]\n            m = a * n\n            print(int(m), end=' ')\n            print(n // lst1[2])", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        fst = 1\n        scnd = n - 1\n        i = int(sqrt(n))\n        carry = 3\n        while carry <= i:\n            if n % carry == 0:\n                fst = n // carry\n                scnd = n - fst\n                break\n            carry = carry + 2\n        print(fst, scnd)", "def isprime(P):\n    root = int(P ** 0.5) + 1\n    for i in range(3, root, 2):\n        if P % i == 0:\n            return 0\n    return 1\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    X = 1\n    ans = 1\n    if N % 2 == 0:\n        print(N // 2, N // 2)\n    elif isprime(N):\n        print(N - 1, 1)\n    else:\n        root = int(N ** 0.5) + 1\n        A = []\n        for i in range(3, root, 2):\n            if N % i == 0:\n                break\n        ans = N // i\n        print(ans, N - ans)"]