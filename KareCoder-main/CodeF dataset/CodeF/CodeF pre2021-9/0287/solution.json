["import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, arr):\n    fg = 0\n    prev = arr[n - 1]\n    c = 1\n    for i in range(n - 2, -1, -1):\n        if not fg:\n            if arr[i] >= prev:\n                c += 1\n                prev = arr[i]\n            else:\n                fg = 1\n                c += 1\n                prev = arr[i]\n        elif arr[i] <= prev:\n            c += 1\n            prev = arr[i]\n        else:\n            break\n    print(n - c)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    if sorted(arr) == arr or sorted(arr)[::-1] == arr:\n        print(0)\n    else:\n        solve(n, arr)", "import sys\ninput = lambda : sys.stdin.readline().strip()\na = int(input())\nfor i in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    count = 1\n    if c == sorted(c):\n        print(0)\n    else:\n        for i in range(b - 1, 0, -1):\n            if c[i] <= c[i - 1]:\n                count += 1\n            else:\n                break\n        for j in range(i, 0, -1):\n            if c[j] >= c[j - 1]:\n                count += 1\n            else:\n                break\n        print(max(0, b - count))", "from sys import stdin\n\ndef main():\n    l = stdin.read().splitlines()[2::2]\n    for (i, s) in enumerate(l):\n        (*aa, a) = map(int, s.split())\n        while aa:\n            if aa[-1] < a:\n                break\n            a = aa.pop()\n        while aa:\n            if aa[-1] > a:\n                break\n            a = aa.pop()\n        l[i] = str(len(aa))\n    print('\\n'.join(l))\nmain()", "from sys import stdin\n\ndef main():\n    l = stdin.read().splitlines()[2::2]\n    for (i, s) in enumerate(l):\n        (*aa, a) = map(int, s.split())\n        while aa and aa[-1] >= a:\n            a = aa.pop()\n        while aa and aa[-1] <= a:\n            a = aa.pop()\n        l[i] = str(len(aa))\n    print('\\n'.join(l))\nmain()", "def jisuan(list1):\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            break\n    else:\n        return n\n    for x in range(i + 1, n - 1):\n        if list1[x] < list1[x + 1]:\n            break\n    else:\n        return n\n    return x + 1\nlist_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list1.reverse()\n    list_ans.append(n - jisuan(list1))\nfor item in list_ans:\n    print(item)", "from sys import stdin\n\ndef main():\n    l = stdin.read().splitlines()[2::2]\n    for (i, s) in enumerate(l):\n        xx = list(map(int, s.split()))\n        le = len(xx) - 1\n        if le < 2:\n            l[i] = '0'\n            continue\n        while le:\n            if xx[le - 1] < xx[le]:\n                break\n            le -= 1\n        while le:\n            if xx[le - 1] > xx[le]:\n                break\n            le -= 1\n        l[i] = str(le)\n    print('\\n'.join(l))\nmain()", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp.append([int(x) for x in input().split()])\n\ndef logic(n, arr):\n    if n <= 2:\n        return 0\n    curr = arr[n - 1]\n    nex = arr[n - 2]\n    increasing = curr <= nex\n    peaks = 0\n    for k in range(n - 2, 0, -1):\n        curr = nex\n        nex = arr[k - 1]\n        if increasing:\n            if curr > nex:\n                increasing = False\n        elif curr < nex:\n            return k\n    return 0\nfor arr in inp:\n    n = len(arr)\n    print(logic(n, arr))", "import sys\n\ndef solve(xs):\n    i = len(xs) - 1\n    while i > 0 and xs[i - 1] >= xs[i]:\n        i -= 1\n    while i > 0 and xs[i - 1] <= xs[i]:\n        i -= 1\n    return i\nnext(sys.stdin)\nwhile True:\n    if next(sys.stdin, None) is None:\n        break\n    ln = next(sys.stdin)\n    xs = list(map(int, ln.split()))\n    print(solve(xs))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp.append([int(x) for x in input().split()])\n\ndef logic(arr):\n    n = len(arr)\n    if n <= 2:\n        return 0\n    curr = arr[n - 1]\n    nex = arr[n - 2]\n    increasing = curr <= nex\n    for k in range(n - 2, 0, -1):\n        curr = nex\n        nex = arr[k - 1]\n        if increasing:\n            if curr > nex:\n                increasing = False\n        elif curr < nex:\n            return k\n    return 0\nfor arr in inp:\n    print(logic(arr))", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    i = n - 1\n    while i > 0 and m[i - 1] >= m[i]:\n        i -= 1\n    while i > 0 and m[i - 1] <= m[i]:\n        i -= 1\n    print(i)", "import sys\n\ndef is_sorted(arr):\n    prev = 0\n    for i in arr:\n        if i < prev:\n            return False\n        prev = i\n    return True\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    n = int(sys.stdin.readline().rstrip())\n    arr = list(map(int, sys.stdin.readline().rstrip().split()))\n    if is_sorted(arr):\n        print(0)\n        continue\n    prev = cur = n - 1\n    while arr[cur] - arr[prev] >= 0 and cur >= 0:\n        prev = cur\n        cur -= 1\n    if prev == 0:\n        print(0)\n        continue\n    else:\n        while arr[cur] - arr[prev] <= 0 and cur >= 0:\n            prev = cur\n            cur -= 1\n        print(prev)", "import sys\ninput = sys.stdin.readline\n\ndef goodArray(arr, leftmark, rightmark):\n    for i in range(leftmark - 1, -1, -1):\n        if arr[i] <= arr[i + 1]:\n            rightmark = i\n        else:\n            break\n    return rightmark\n\ndef solution():\n    n = input()\n    arr = list(map(int, input().split()))\n    leftmark = len(arr) - 1\n    for j in range(len(arr) - 2, -1, -1):\n        if arr[j] >= arr[j + 1]:\n            leftmark -= 1\n        else:\n            break\n    print(goodArray(arr, leftmark, leftmark))\nt = int(input())\nfor i in range(0, t):\n    solution()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "tests = int(input())\nres = []\nfor _ in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n < 3:\n        res.append(0)\n    else:\n        dir = 0\n        for i in range(n - 2, -1, -1):\n            if a[i] > a[i + 1]:\n                if dir == 0:\n                    dir = 1\n                elif dir == -1:\n                    break\n            elif a[i] < a[i + 1]:\n                if dir >= 0:\n                    dir = -1\n        else:\n            res.append(0)\n            continue\n        res.append(i + 1)\nfor r in res:\n    print(r)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = 0\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if f == 0 and a[i] < a[i + 1]:\n            f = 1\n        elif f == 1 and a[i] > a[i + 1]:\n            ans = i + 1\n            break\n    print(ans)", "n = int(input())\nans = []\nfor _ in range(n):\n    l = int(input())\n    arr = list(map(int, input().split()))\n    idx = l - 1\n    while idx > 0:\n        if arr[idx - 1] < arr[idx]:\n            break\n        else:\n            idx -= 1\n    while idx > 0:\n        if arr[idx - 1] > arr[idx]:\n            break\n        else:\n            idx -= 1\n    ans.append(str(idx))\nprint('\\n'.join(ans))", "import sys\n\ndef readlines(type=int):\n    return list(map(type, sys.stdin.readline().split()))\n\ndef read(type=int):\n    return type(sys.stdin.readline().strip())\njoint = lambda it, sep=' ': sep.join([str(i) if type(i) != list else sep.join(map(str, i)) for i in it])\n\ndef solve(l, nums):\n    minimas = []\n    for i in range(0, l - 2):\n        if nums[i] > nums[i + 1]:\n            k = i + 1\n            while k < l - 1:\n                if nums[k] == nums[k + 1]:\n                    k += 1\n                elif nums[k] < nums[k + 1]:\n                    minimas.append(i + 1)\n                    break\n                else:\n                    break\n    if len(minimas) == 0:\n        return 0\n    return minimas[-1]\n\ndef main():\n    n = read()\n    results = []\n    for _ in range(n):\n        l = read()\n        nums = readlines()\n        results.append(solve(l, nums))\n    print(joint(results, '\\n'))\nmain()", "import sys\ninput = sys.stdin.readline\nINF = float('inf')\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pos = n - 1\n    while 0 < pos:\n        if arr[pos] > arr[pos - 1]:\n            break\n        pos -= 1\n    while 0 < pos:\n        if arr[pos] < arr[pos - 1]:\n            break\n        pos -= 1\n    print(pos)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        x = 0\n        i = n - 1\n        y = 0\n        while i > 0 and a[i - 1] >= a[i]:\n            i -= 1\n            x += 1\n            if a[i - 1] == a[i]:\n                y += 1\n            else:\n                y = 0\n        while i > 0 and a[i - 1] <= a[i]:\n            i -= 1\n            y += 1\n        print(max(0, n - 1 - x - y))\nmain()", "import sys\ninputlist = sys.stdin.readlines()\nnumber_of_testcases = int(inputlist[0].strip())\nfor i in range(number_of_testcases):\n    n = int(inputlist[2 * i + 1].strip())\n    numbers_list = list(map(int, inputlist[2 * i + 2].strip().split(' ')))\n    pointer = n - 1\n    while pointer > 0:\n        if numbers_list[pointer - 1] < numbers_list[pointer]:\n            break\n        pointer -= 1\n    while pointer > 0:\n        if numbers_list[pointer - 1] > numbers_list[pointer]:\n            break\n        pointer -= 1\n    print(pointer)", "from sys import *\nfrom bisect import bisect_left\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    arr = arr[::-1]\n    prev = 0\n    ind = -1\n    for i in range(n):\n        if arr[i] >= prev:\n            prev = arr[i]\n            ind = i\n        else:\n            break\n    for i in range(ind, n):\n        if arr[i] <= prev:\n            prev = arr[i]\n            ind = i\n        else:\n            break\n    print(n - 1 - ind)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    n = II()\n    aa = LI()\n    i = n - 1\n    while i and aa[i - 1] >= aa[i]:\n        i -= 1\n    while i and aa[i - 1] <= aa[i]:\n        i -= 1\n    print(i)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nMOD = 998244353\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ind = 0\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] < a[i]:\n            ind = i\n            break\n    ans = 0\n    for i in range(ind, 0, -1):\n        if a[i - 1] > a[i]:\n            ans = i\n            break\n    print(ans)", "import sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\n\ndef calc(arr):\n    flag = 0\n    length = len(arr)\n    for i in range(length - 1):\n        if not flag:\n            if arr[length - i - 2] < arr[length - i - 1]:\n                flag = 1\n        elif arr[length - i - 2] > arr[length - i - 1]:\n            return length - i - 1\n    return 0\n\ndef main():\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        t = int(input())\n        arr.append(list(map(int, input().split(' '))))\n    for i in range(n):\n        print(calc(arr[i]))\nmain()", "from sys import stdin\ninput = stdin.readline\nT = int(input())\nfor case in range(T):\n    N = int(input())\n    Nums = [*map(int, input().split())]\n    flip = False\n    Ans = 0\n    for i in range(N - 1, 0, -1):\n        if not flip and Nums[i] > Nums[i - 1]:\n            flip = True\n        elif flip and Nums[i] < Nums[i - 1]:\n            flip = False\n            Ans = i\n            break\n    print(Ans)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = get_ls()\n        p = n - 1\n        while p > 0 and ls[p] <= ls[p - 1]:\n            p -= 1\n        while p > 0 and ls[p] >= ls[p - 1]:\n            p -= 1\n        print(p)\nmain()", "def solve():\n    n = int(input())\n    end = n - 1\n    l = list(map(int, input().split()))\n    while end > 0 and l[end - 1] >= l[end]:\n        end -= 1\n    while end > 0 and l[end - 1] <= l[end]:\n        end -= 1\n    print(end)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\n\ndef solve(a):\n    a = a[::-1]\n    n = len(a)\n    if a[1] < a[0]:\n        b = [a[i - 1] - a[i] for i in range(1, n)]\n        ndown = n\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                ndown = i\n                break\n        return n - ndown\n    else:\n        ngood = n\n        for i in range(1, n):\n            if a[i] < a[i - 1]:\n                ngood = i\n                break\n        if ngood < n:\n            ndown = n\n            for i in range(ngood + 1, n):\n                if a[i] > a[i - 1]:\n                    ndown = i\n                    break\n            ngood = ndown\n        return n - ngood\nIN = [x.strip() for x in sys.stdin.readlines()]\nT = int(IN[0])\ncur = 1\nfor ti in range(T):\n    n = int(IN[cur])\n    a = [int(x) for x in IN[cur + 1].split(' ')]\n    if n == 1:\n        print(0)\n    else:\n        print(solve(a))\n    cur += 2", "from sys import stdin, stdout, setrecursionlimit\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ck = 0\n    for lst in range(n - 1, 0, -1):\n        if a[lst - 1] < a[lst]:\n            ck = lst\n            break\n    cont = 0\n    for x in range(ck, 0, -1):\n        if a[x - 1] > a[x]:\n            cont = x\n            break\n    print(cont)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))[::-1]\n    increasing = True\n    res = 0\n    for i in range(1, n):\n        if increasing and a[i] < a[i - 1]:\n            increasing = False\n        elif not increasing and a[i] > a[i - 1]:\n            res = n - i\n            break\n    print(res)", "from sys import stdin, stdout, setrecursionlimit\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    chk = 0\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] < a[i]:\n            chk = i\n            break\n    cnt = 0\n    for i in range(chk, 0, -1):\n        if a[i - 1] > a[i]:\n            cnt = i\n            break\n    print(cnt)", "from sys import *\nt = int(stdin.readline())\nwhile t > 0:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if arr == sorted(arr):\n        ans = 0\n    elif arr == sorted(arr, reverse=True):\n        ans = 0\n    else:\n        count = 0\n        for i in range(n - 1, 0, -1):\n            if arr[i] <= arr[i - 1]:\n                count += 1\n            else:\n                j = i\n                break\n        for i in range(i, 0, -1):\n            if arr[i] >= arr[i - 1]:\n                count += 1\n            else:\n                break\n        ans = n - (count + 1)\n    print(ans)\n    t -= 1", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "t = int(input())\nf = []\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (ct, pos) = (0, 0)\n    for j in range(n - 1, 1, -1):\n        if l[j] > l[j - 1]:\n            pos = j - 1\n            break\n    for j in range(pos):\n        if l[j] > l[j + 1]:\n            ct = j + 1\n    f.append(ct)\nprint(*f, sep='\\n')", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = n - 1\n    while i >= 0:\n        if arr[i - 1] >= arr[i]:\n            i -= 1\n        else:\n            break\n    while i >= 0:\n        if arr[i - 1] <= arr[i]:\n            i -= 1\n        else:\n            break\n    print(0 if i < 0 else i)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = n - 1\n    while k > 0 and l[k - 1] >= l[k]:\n        k -= 1\n    while k > 0 and l[k - 1] <= l[k]:\n        k -= 1\n    res.append(k)\nfor i in res:\n    print(i)", "from sys import stdin, stdout\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nimport math\nI = lambda : map(int, stdin.readline().split())\nI1 = lambda : stdin.readline()\nfor _ in range(int(I1())):\n    n = int(I1())\n    a = list(I())\n    j = n - 1\n    while j >= 0 and a[j - 1] >= a[j]:\n        j -= 1\n    while j >= 0 and a[j - 1] <= a[j]:\n        j -= 1\n    if j < 0:\n        j = 0\n    print(j)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nN = inp()\n\ndef test_case(n, lnp_list):\n    if n < 3:\n        print(0)\n        return\n    saved = 0\n    problem = None\n    for i in range(n):\n        index = n - 1 - i\n        if index > 1:\n            if problem:\n                if lnp_list[index - 1] == lnp_list[index - 2]:\n                    continue\n                if lnp_list[problem] > lnp_list[index - 1] < lnp_list[index - 2]:\n                    saved = index - 1\n                    break\n                else:\n                    problem = None\n            if lnp_list[index - 1] == lnp_list[index - 2]:\n                problem = index\n            if lnp_list[index] > lnp_list[index - 1] < lnp_list[index - 2]:\n                saved = index - 1\n                break\n    print(saved)\ninput_arr = []\nfor _ in range(N):\n    n = inp()\n    lnp_list = inlt()\n    input_arr.append((n, lnp_list))\nfor (n, lnp_list) in input_arr:\n    test_case(n, lnp_list)", "import sys\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\nimport math\nfrom collections import defaultdict\nfor _ in range(ri()):\n    n = ri()\n    l = ria()\n    p = n - 1\n    while p > 0 and l[p - 1] >= l[p]:\n        p -= 1\n    while p > 0 and l[p - 1] <= l[p]:\n        p -= 1\n    wi(p)", "def solve():\n    t = int(input().strip())\n    for i in range(t):\n        n = int(input().strip())\n        a = list(map(int, input().split()))\n        si = n - 1\n        while si >= 1 and a[si - 1] >= a[si]:\n            si -= 1\n        while si >= 1 and a[si - 1] <= a[si]:\n            si -= 1\n        print(si)\nsolve()", "import math\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = n - 1\n    while ans > 0 and a[ans - 1] >= a[ans]:\n        ans -= 1\n    while ans > 0 and a[ans - 1] <= a[ans]:\n        ans -= 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    i = s.rfind('0')\n    i = (s.rfind('2', 0, i), i)[i < 0]\n    print(i + 1)", "import math\nans = ''\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    val = 0\n    flag = 0\n    for i in range(n - 1, 0, -1):\n        if flag == 1 and p[i - 1] > p[i]:\n            val = i\n            break\n        if p[i] > p[i - 1]:\n            flag = 1\n    ans += str(val) + '\\n'\nprint(ans)", "ans = []\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = n - 1\n    while i > 0 and a[i] <= a[i - 1]:\n        i -= 1\n    while i > 0 and a[i] >= a[i - 1]:\n        i -= 1\n    ans += [i]\nprint(*ans, sep='\\n')", "k = int(input())\nans = []\nfor i in range(k):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    me = len(lst) - 1\n    while me > 0 and lst[me - 1] >= lst[me]:\n        me -= 1\n    while me > 0 and lst[me - 1] <= lst[me]:\n        me -= 1\n    ans.append(me)\nfor i in ans:\n    print(i)", "def make(n, a):\n    decreasing = False\n    increasing = False\n    equal = False\n    last_index = 0\n    could_be = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if decreasing == False:\n                increasing = True\n                equal = False\n            else:\n                last_index = i - 1\n                decreasing = False\n                increasing = True\n                if equal:\n                    last_index = could_be\n                    equal = False\n        elif a[i] < a[i - 1]:\n            if increasing == True:\n                increasing = False\n                decreasing = True\n                equal = False\n            else:\n                decreasing = True\n                if equal:\n                    equal = False\n        elif increasing:\n            continue\n        elif equal:\n            continue\n        else:\n            could_be = i - 1\n            equal = True\n    return last_index\nt = int(input())\narray = []\nfor i in range(t):\n    a = int(input())\n    b = list(map(int, input().split(' ')))\n    array.append([a, b])\nfor x in array:\n    print(make(*x))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    f = g = 0\n    idx = -1\n    if a[n - 1] > a[n - 2]:\n        for i in range(n - 1, 0, -1):\n            if a[i] < a[i - 1]:\n                g = 1\n                idx = i\n                break\n        if g == 0:\n            print(0)\n        else:\n            print(idx)\n    else:\n        for i in range(n - 1, 0, -1):\n            if f == 0:\n                if a[i] <= a[i - 1]:\n                    pass\n                else:\n                    f = 1\n            elif a[i] >= a[i - 1]:\n                pass\n            else:\n                f = 2\n                idx = i\n                break\n        if f == 0 or f == 1:\n            print(0)\n        else:\n            print(idx)", "t = int(input())\nfor i in range(t):\n    n = int(input()) - 1\n    a = [*map(int, input().split())]\n    while n > 0 and a[n] <= a[n - 1]:\n        n -= 1\n    while n > 0 and a[n] >= a[n - 1]:\n        n -= 1\n    print(n)", "t = int(input())\nc = []\nfor i in range(t):\n    n = int(input())\n    a = [int(u) for u in input().split()]\n    pos = n - 1\n    while pos > 0 and a[pos - 1] >= a[pos]:\n        pos -= 1\n    while pos > 0 and a[pos - 1] <= a[pos]:\n        pos -= 1\n    c.append(pos)\nfor k in c:\n    print(k)", "for r in [*open(0)][2::2]:\n    a = (*map(int, r.split()),)\n    r = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, r.rfind('2', 0, r.rfind('0'))))", "from collections import Counter, defaultdict, deque\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 1:\n        print(0)\n        return\n    t = []\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            t.append(1)\n        elif arr[i] < arr[i + 1]:\n            t.append(0)\n        else:\n            t.append(2)\n    t.reverse()\n    c = 0\n    zero = False\n    for el in t:\n        if el == 2:\n            c += 1\n            continue\n        if zero and el:\n            break\n        if not el:\n            zero = True\n        c += 1\n    print(n - c - 1)\ntt = int(input())\nfor test in range(tt):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    seen_up = False\n    seen_down2 = False\n    for i in range(n - 1, 0, -1):\n        if a[i] - a[i - 1] > 0:\n            seen_up = True\n        if a[i] - a[i - 1] < 0 and seen_up:\n            seen_down2 = True\n            print(i)\n            break\n    if not seen_down2:\n        print(0)", "t = input()\nt = int(t)\nT = []\nfor i in range(t):\n    n = input()\n    n = int(n)\n    a = map(int, input().split())\n    a = list(a)\n    j = n - 1\n    while j > 0 and a[j] <= a[j - 1]:\n        a.pop()\n        j -= 1\n    while j > 0 and a[j] >= a[j - 1]:\n        a.pop()\n        j -= 1\n    T.append(j)\nfor i in T:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pos = len(arr) - 1\n    while pos > 0:\n        if arr[pos] <= arr[pos - 1]:\n            pos -= 1\n        else:\n            break\n    while pos > 0:\n        if arr[pos] >= arr[pos - 1]:\n            pos -= 1\n        else:\n            break\n    if pos == 0:\n        print(0)\n    else:\n        print(pos)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = n - 1\n    while k > 0 and l[k - 1] >= l[k]:\n        k -= 1\n    while k > 0 and l[k - 1] <= l[k]:\n        k -= 1\n    print(k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = n - 1\n    while p > 0 and a[p - 1] >= a[p]:\n        p -= 1\n    while p > 0 and a[p - 1] <= a[p]:\n        p -= 1\n    print(p)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = n - 1\n    while pos > 0 and a[pos] <= a[pos - 1]:\n        pos -= 1\n    while pos > 0 and a[pos] >= a[pos - 1]:\n        pos -= 1\n    print(pos)", "import sys, math\nfrom sys import stdin, stdout\nmod = int(1000000000.0 + 7)\nfrom collections import deque, defaultdict\nfrom copy import deepcopy\nfrom math import ceil, floor, inf, sqrt, factorial, gcd, log2\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nfor _ in range(ii1()):\n    n = ii1()\n    arr = iia()\n    start = n - 1\n    count = 0\n    flag = False\n    for i in range(n - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            count += 1\n        else:\n            start = i\n            flag = True\n            break\n    if flag:\n        for j in range(start, 0, -1):\n            if arr[j - 1] <= arr[j]:\n                count += 1\n            else:\n                end = 0\n                break\n    print(n - count - 1)", "import sys\nline = sys.stdin.readline\n\ndef answer(arraylen, nums):\n    if arraylen == 1:\n        print(0)\n        return\n    change = []\n    for i in range(0, arraylen - 1):\n        if nums[i + 1] > nums[i]:\n            change.append('+')\n        elif nums[i + 1] == nums[i]:\n            change.append('o')\n        else:\n            change.append('-')\n    j = -1\n    while change[j] != '+':\n        j -= 1\n        if abs(j) >= arraylen:\n            print(0)\n            return\n    while change[j] != '-':\n        j -= 1\n        if abs(j) >= arraylen:\n            print(0)\n            return\n    print(length + j)\nfor i in range(int(line())):\n    length = int(line())\n    integers = [int(num) for num in line().split(' ')]\n    answer(length, integers)", "n = int(input())\nseqs = [(input(), map(int, input().split()))[1] for _ in range(n)]\nfor seq in seqs:\n    seq = list(reversed(list(seq)))\n    was_first_peak = False\n    for (i, prev, el) in zip(range(1, len(seq)), seq, seq[1:]):\n        if el < prev:\n            was_first_peak = True\n        if was_first_peak and el > prev:\n            print(len(seq) - i)\n            break\n    else:\n        print(0)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = '0' + ''.join((str((x > y) - (x < y) + 1) for (x, y) in zip(a, a[1:])))\n    print(max(0, s.rfind('2', 0, s.rfind('0'))))", "import sys\n\ndef answer(n, a):\n    ok = 1\n    istage = True\n    for i in range(n - 2, -1, -1):\n        if istage and a[i] >= a[i + 1]:\n            ok += 1\n        elif istage and a[i] < a[i + 1]:\n            ok += 1\n            istage = False\n        elif not istage and a[i] <= a[i + 1]:\n            ok += 1\n        else:\n            break\n    return n - ok\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, a))\n        t -= 1\n    return\nmain()", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    index = 0\n    num = 0\n    for i in range(n - 1, 0, -1):\n        if a[i] > a[i - 1]:\n            index = 1\n            continue\n        if index == 1 and a[i] < a[i - 1]:\n            num = i\n            break\n    print(num)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ptr = n - 1\n    while ptr > 0 and a[ptr] <= a[ptr - 1]:\n        ptr -= 1\n    while ptr > 0 and a[ptr] >= a[ptr - 1]:\n        ptr -= 1\n    return ptr\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = n - 1\n    while pos > 0 and a[pos - 1] >= a[pos]:\n        pos -= 1\n    while pos > 0 and a[pos - 1] <= a[pos]:\n        pos -= 1\n    print(pos)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        i = n - 2\n        while i > 0 and lst[i] >= lst[i + 1]:\n            i -= 1\n        while i > 0 and lst[i] >= lst[i - 1]:\n            i -= 1\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = n - 1\n    while i > 0 and arr[i] <= arr[i - 1]:\n        i -= 1\n    while i > 0 and arr[i] >= arr[i - 1]:\n        i -= 1\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = input().split()\n    lst = [int(i) for i in lst]\n    dah = False\n    for i in range(n - 1, 0, -1):\n        if lst[i] > lst[i - 1]:\n            dah = True\n        elif dah and lst[i] < lst[i - 1]:\n            print(i)\n            break\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = n - 1\n    while i and a[i - 1] >= a[i]:\n        i -= 1\n    while i and a[i] >= a[i - 1]:\n        i -= 1\n    print(i)", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(I())\n    ff = 1\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] < a[i]:\n            ff = 0\n            lmax = i\n            break\n    if ff == 1:\n        print(0)\n    else:\n        for i in range(lmax, 0, -1):\n            if a[i - 1] > a[i]:\n                pre = i\n                ff = 1\n                break\n        if ff == 0:\n            print(0)\n        else:\n            print(pre)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = n - 1\n    while i > 0 and a[i] <= a[i - 1]:\n        i -= 1\n    while 1 <= i and a[i] >= a[i - 1]:\n        i -= 1\n    print(i)\n    t -= 1", "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = n - 1\n    while ans > 0 and arr[ans - 1] >= arr[ans]:\n        ans -= 1\n    while ans > 0 and arr[ans - 1] <= arr[ans]:\n        ans -= 1\n    print(ans)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        k = -1\n        for i in range(n - 1, 0, -1):\n            if list1[i] > list1[i - 1]:\n                k = i - 1\n                break\n        if k == -1:\n            print(0)\n        else:\n            i = k\n            while i >= 1 and list1[i] >= list1[i - 1]:\n                i = i - 1\n            print(i)", "for t in range(0, int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    ans = 0\n    passedMax = False\n    for i in range(n - 1, 0, -1):\n        if passedMax is False and arr[i] > arr[i - 1]:\n            passedMax = True\n        if passedMax is True and arr[i] < arr[i - 1]:\n            ans = i\n            break\n    print(ans)", "f = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(f())\n    p = n - 1\n    while p and a[p] <= a[p - 1]:\n        p -= 1\n    while p and a[p] >= a[p - 1]:\n        p -= 1\n    print(p)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    pos = n - 1\n    while pos > 0 and nums[pos - 1] >= nums[pos]:\n        pos -= 1\n    while pos > 0 and nums[pos - 1] <= nums[pos]:\n        pos -= 1\n    print(pos)", "for _ in range(int(input())):\n    t = int(input())\n    li = [int(i) for i in input().split()]\n    li.reverse()\n    flag = True\n    ans = 0\n    if t > 2:\n        for i in range(1, t):\n            if flag:\n                if li[i] < li[i - 1]:\n                    flag = False\n            elif li[i] > li[i - 1]:\n                ans = t - i\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, l) = (int(input()), list(map(int, input().split()))[::-1])\n    k = True\n    s = False\n    for i in range(n - 1):\n        if k == True:\n            if l[i] > l[i + 1]:\n                k = False\n        elif l[i] < l[i + 1]:\n            s = True\n            break\n    if s == True:\n        print(n - i - 1)\n    else:\n        print(0)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    l.append(s)\nfor j in l:\n    if len(j) == 1:\n        print(0)\n    else:\n        l1 = []\n        for k in range(len(j) - 1, 0, -1):\n            if j[k] <= j[k - 1]:\n                l1.append(j[k])\n            else:\n                l1.append(j[k])\n                ind = k\n                break\n        for m in range(k - 1, -1, -1):\n            if j[m] >= j[m - 1]:\n                l1.append(j[m])\n            else:\n                l1.append(j[m])\n                ind = m\n                break\n        print(m)", "for _ in ' ' * int(input()):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    k = n - 1\n    while k > 0 and a[k - 1] >= a[k]:\n        k -= 1\n    while k > 0 and a[k - 1] <= a[k]:\n        k -= 1\n    print(k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    flag1 = True\n    flag2 = True\n    c = 0\n    if n == 1:\n        print(0)\n    else:\n        c = 1\n        for i in range(n - 2, -1, -1):\n            if flag1 and a[i] < a[i + 1]:\n                flag1 = False\n            if not flag1 and a[i] > a[i + 1]:\n                break\n            c += 1\n        print(n - c)", "def makeItGood(n, array):\n    if n == 1:\n        return 0\n    flag = 0\n    f = 0\n    for x in range(n - 1):\n        if array[n - x - 2] > array[n - x - 1]:\n            if flag == 0:\n                flag = 1\n            elif flag == 2:\n                f = 1\n                break\n        elif array[n - x - 2] < array[n - x - 1]:\n            if flag in (0, 1):\n                flag = 2\n    if f == 0:\n        return n - x - 2\n    return n - x - 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(makeItGood(n, l))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a0 = a[-1]\n    ans = 0\n    up = False\n    v = 0\n    down = False\n    s = False\n    for i in range(n - 1, -1, -1):\n        if a0 < a[i]:\n            if not up:\n                up = True\n                down = False\n                v += 1\n        if a0 > a[i]:\n            if not down:\n                down = True\n                up = False\n                v += 1\n        if up and v >= 2:\n            ans = i + 1\n            break\n        if down and v >= 3:\n            ans = i + 1\n            break\n        a0 = a[i]\n    print(ans)", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        i = n - 2\n        while i >= 0 and a[i] >= a[i + 1]:\n            i -= 1\n        peak = i + 1\n        i = peak - 1\n        while i >= 0 and a[i] <= a[i + 1]:\n            i -= 1\n        deep = i + 1\n        print(deep)\nmain()", "def tc():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if len(a) < 3:\n        print(0)\n        return\n    for i in range(n - 2, -1, -1):\n        if a[i] < a[i + 1]:\n            break\n    for j in range(i, 0, -1):\n        if a[j] < a[j - 1]:\n            break\n    else:\n        j = 0\n    print(j)\nT = int(input())\nfor _ in range(T):\n    tc()", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    i = len(l) - 1\n    while i > 0:\n        if l[i - 1] >= l[i]:\n            i -= 1\n        else:\n            break\n    if i == 0:\n        print(0)\n    else:\n        while i > 0:\n            if l[i - 1] <= l[i]:\n                i -= 1\n            else:\n                break\n        if i == 0:\n            print(0)\n        else:\n            print(i)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if l == sorted(l):\n        print(0)\n    else:\n        num = []\n        f = 0\n        (x, y) = (0, 0)\n        for i in range(n - 1, 0, -1):\n            if l[i - 1] < l[i]:\n                x = i - 1\n                f = 1\n                break\n        for i in range(x, 0, -1):\n            if l[i - 1] > l[i]:\n                y = i\n                break\n        print(y)", "def solution(a):\n    max_i = len(a) - 1\n    priv = a[-1]\n    i = len(a) - 2\n    while i >= 0:\n        if a[i] >= priv:\n            priv = a[i]\n            max_i = i\n        else:\n            break\n        i -= 1\n    lower_j = max_i\n    if max_i > 0:\n        priv = a[max_i]\n        j = max_i - 1\n        while j >= 0:\n            if priv < a[j]:\n                lower_j = j + 1\n                break\n            priv = a[j]\n            j -= 1\n        if j == -1:\n            lower_j = 0\n    return lower_j\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = solution(a)\n    print(result)", "def MakeItGood(arr, n):\n    pos = n - 1\n    while pos > 0 and arr[pos - 1] >= arr[pos]:\n        pos -= 1\n    while pos > 0 and arr[pos - 1] <= arr[pos]:\n        pos -= 1\n    print(pos)\nt = int(input())\nfor _ in range(t):\n    num = int(input())\n    ar = list(map(int, input().split()))\n    MakeItGood(ar, num)", "for _ in ' ' * int(input()):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    k = n - 1\n    while k > 0 and a[k - 1] >= a[k]:\n        k -= 1\n    while k > 0 and a[k - 1] <= a[k]:\n        k -= 1\n    print(k)"]