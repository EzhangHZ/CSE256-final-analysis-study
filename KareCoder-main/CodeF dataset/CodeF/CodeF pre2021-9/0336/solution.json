["import sys\nimport math\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import defaultdict\nfrom functools import reduce\nsys.setrecursionlimit(10 ** 6)\n\ndef inputt():\n    return sys.stdin.readline().strip()\n\ndef printt(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef listt():\n    return [int(i) for i in inputt().split()]\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef factors(n):\n    step = 2 if n % 2 else 1\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(math.sqrt(n)) + 1, step) if n % i == 0)))\n\ndef comb(n, k):\n    factn = math.factorial(n)\n    factk = math.factorial(k)\n    fact = math.factorial(n - k)\n    ans = factn // (factk * fact)\n    return ans\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_div, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef maxpower(n, x):\n    B_max = int(math.log(n, x)) + 1\n    return B_max\nt = int(inputt())\nfor _ in range(t):\n    for i in range(9):\n        s = inputt()\n        s = s.replace('2', '1')\n        printt(s)", "t = int(input())\nwhile t:\n    a = [input() for _ in range(9)]\n    for i in range(9):\n        a[i] = a[i].replace('2', '1')\n    print(*a, sep='\\n')\n    t -= 1", "from sys import stdin, stdout\nfrom math import gcd, sqrt, floor, ceil\ninput = stdin.readline\n\ndef list_inp(x):\n    return list(map(x, input().split()))\n\ndef map_inp(x):\n    return map(x, input().split())\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    arr = []\n    for i in range(9):\n        arr.append(input().replace('2', '1'))\n    for i in range(9):\n        print(arr[i])", "t = int(input())\nwhile t:\n    a = [input() for _ in range(9)]\n    for i in range(9):\n        a[i] = a[i].replace('2', '1')\n    print(*a, sep='\\n')\n    t -= 1", "t = int(input())\nwhile t:\n    a = [input() for _ in range(9)]\n    for i in range(9):\n        a[i] = a[i].replace('2', '1')\n    print(*a, sep='\\n')\n    t -= 1", "st = ''\n\ndef func():\n    for i in l:\n        (one, two) = (i.index('1'), i.index('2'))\n        i[two] = '1'\n    s = ''\n    for i in l:\n        for j in i:\n            s += j\n        s += '\\n'\n    return s\nt = int(input())\nfor _ in range(t):\n    l = []\n    for i in range(9):\n        l.append(list(input()))\n    st += str(func())\nprint(st)", "def answer(m):\n    for i in range(9):\n        l = list(m[i])\n        indx = l.index('2')\n        l[indx] = '1'\n        m[i] = ''.join(l)\n        print(m[i])\n    return\n\ndef main():\n    t = int(input())\n    m = [0] * t\n    for j in range(t):\n        m[j] = []\n        for i in range(9):\n            m[j].append(input())\n    for j in range(t):\n        answer(m[j])\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef S():\n    return input()\n\ndef I():\n    return int(S())\n\ndef M():\n    return map(int, S().split())\n\ndef L():\n    return list(M())\nt = int(input())\nfor i in range(t):\n    sudoku = []\n    for i in range(9):\n        row = list(S())\n        sudoku.append(row)\n    for i in range(9):\n        for j in range(9):\n            if sudoku[i][j] == '2':\n                sudoku[i][j] = '1'\n    ans = ''\n    for i in range(9):\n        ans += ''.join(sudoku[i])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    l = []\n    for i in range(9):\n        l.append(input())\n    for i in l:\n        thing = i.index('2')\n        print(i[:thing] + '1' + i[thing + 1:])"]