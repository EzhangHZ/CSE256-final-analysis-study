["(n, m) = map(int, input().split())\nM = [[0] * m for j in range(n)]\nfor j in range(n):\n    for (k, s) in enumerate(input()):\n        if s == '#':\n            M[j][k] = 1\nempty_rows = False\nempty_cols = False\nmagnets1 = 0\nprev_start = -1\nprev_end = -1\nfor row in M:\n    start = -1\n    end = -1\n    for (j, c) in enumerate(row):\n        if c:\n            if start == -1:\n                start = j\n            elif end != -1:\n                print(-1)\n                exit()\n        elif start != -1 and end == -1:\n            end = j - 1\n    if start == -1:\n        empty_rows = True\n        continue\n    if end == -1:\n        end = j\n    if prev_start == -1:\n        magnets1 += 1\n    elif start > prev_end or end < prev_start:\n        magnets1 += 1\n    prev_start = start\n    prev_end = end\nmagnets2 = 0\nprev_start = -1\nprev_end = -1\nfor col in zip(*M):\n    start = -1\n    end = -1\n    for (j, c) in enumerate(col):\n        if c:\n            if start == -1:\n                start = j\n            elif end != -1:\n                print(-1)\n                exit()\n        elif start != -1 and end == -1:\n            end = j - 1\n    if start == -1:\n        empty_cols = True\n        continue\n    if end == -1:\n        end = j\n    if prev_start == -1:\n        magnets2 += 1\n    elif start > prev_end or end < prev_start:\n        magnets2 += 1\n    prev_start = start\n    prev_end = end\nif magnets1 != magnets2:\n    raise Exception\nif empty_cols != empty_rows:\n    print(-1)\nelse:\n    print(magnets1)", "(n, m) = map(int, input().split())\n(r0, r1) = ([None] * n, [None] * n)\n(c0, c1) = ([None] * m, [None] * m)\ncol = [False] * m\nbad = False\n(nr, nc) = (0, 0)\nfor i in range(n):\n    r = input()\n    for j in range(m):\n        if r[j] == '#':\n            if r0[i] is None:\n                (r0[i], r1[i], nr) = (j, j, nr + 1)\n            elif r1[i] == j - 1:\n                r1[i] = j\n            else:\n                bad = True\n            if c0[j] is None:\n                (c0[j], c1[j], nc) = (i, i, nc + 1)\n            elif c1[j] == i - 1:\n                c1[j] = i\n            else:\n                bad = True\nif bad or (nr < n) != (nc < m):\n    print(-1)\n    exit(0)\nres = 0\nfor i in range(n):\n    if r0[i] is None:\n        continue\n    if i == 0 or r0[i - 1] is None:\n        res += 1\n    elif r1[i] < r0[i - 1] or r0[i] > r1[i - 1]:\n        res += 1\nprint(res)", "def paint(field, visited, s, move):\n    q = [s]\n    while q:\n        k = q.pop()\n        visited[k] = True\n        for dk in move:\n            nk = k + dk\n            if field[nk] == '.' or visited[nk]:\n                continue\n            visited[nk] = True\n            q.append(nk)\n\ndef solve(n, m, field):\n    exists_all_white_row = False\n    exists_all_white_col = False\n    n2 = n + 2\n    m2 = m + 2\n    nm = n2 * m2\n    move = (-m2, -1, 1, m2)\n    for i in range(1, n + 1):\n        cnt = field[i * m2:(i + 1) * m2].count('.#')\n        if cnt > 1:\n            return -1\n        if cnt == 0:\n            exists_all_white_row = True\n    for j in range(1, m + 1):\n        cnt = field[j:nm:m2].count('.#')\n        if cnt > 1:\n            return -1\n        if cnt == 0:\n            exists_all_white_col = True\n    if int(exists_all_white_row) ^ int(exists_all_white_col):\n        return -1\n    visited = [False] * nm\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            k = i * m2 + j\n            if field[k] == '#' and visited[k] == False:\n                paint(field, visited, k, move)\n                count += 1\n    return count\n(n, m) = map(int, input().split())\nfield = ['.' * (m + 2)] + ['.' + input() + '.' for _ in range(n)] + ['.' * (m + 2)]\nfield = ''.join(field)\nprint(solve(n, m, field))", "(a, b) = map(int, input().split())\nk = []\nfor i in range(a):\n    k.append(input())\nfail = 0\nwhiterowflag = 0\nfor i in range(a):\n    black = 0\n    blackwhite = 0\n    for j in range(b):\n        if k[i][j] == '#' and black == 0:\n            black = 1\n        elif k[i][j] == '.' and black == 1:\n            blackwhite = 1\n        elif blackwhite == 1 and k[i][j] == '#':\n            fail = 1\n    if black == 0:\n        whiterowflag = 1\nwhitecolumnflag = 0\nfor j in range(b):\n    black = 0\n    blackwhite = 0\n    for i in range(a):\n        if k[i][j] == '#' and black == 0:\n            black = 1\n        elif k[i][j] == '.' and black == 1:\n            blackwhite = 1\n        elif blackwhite == 1 and k[i][j] == '#':\n            fail = 1\n    if black == 0:\n        whitecolumnflag = 1\nif whitecolumnflag != whiterowflag:\n    fail = 1\nif fail == 1:\n    print(-1)\nelse:\n    counter = 0\n    L2 = -1\n    R2 = -1\n    for i in range(a):\n        black = 0\n        L = -1\n        R = -1\n        for j in range(b):\n            if black == 0 and k[i][j] == '#':\n                black = 1\n                L = j\n            elif black == 1 and k[i][j] == '.':\n                R = j\n                break\n        if L > -1 and R == -1:\n            R = b\n        if not (L2 < R and R2 > L) and (not (L == -1 and R == -1)):\n            counter += 1\n        L2 = L\n        R2 = R\n    print(counter)"]