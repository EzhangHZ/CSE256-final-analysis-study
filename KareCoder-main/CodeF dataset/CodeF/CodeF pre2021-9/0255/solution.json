["from collections import deque\n(n, q) = map(int, input().split())\narr = deque(map(int, input().split()))\nx = list(map(int, input().split()))\nans = []\nfor i in x:\n    tmp = arr.index(i, 0, n)\n    ans.append(tmp + 1)\n    del arr[tmp]\n    arr.appendleft(i)\nprint(' '.join(map(str, ans)))", "def helper(a, b, c):\n    pass\n(n, q) = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nt = list(map(int, input().split(' ')))\nd = {}\nafter = []\nres = []\nused = []\nlused = 0\nfor i in range(len(t)):\n    if t[i] not in used:\n        curr = a.index(t[i])\n        tres = curr + 1\n        for j in range(len(after)):\n            if after[j] > curr:\n                tres += 1\n        res.append(str(tres))\n        after.append(curr)\n        used.append(t[i])\n        lused += 1\n    else:\n        tres = used.index(t[i])\n        res.append(str(lused - tres))\n        used.append(used.pop(tres))\nprint(' '.join(res))", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    (m, n) = map(int, input().split())\n    a = getint()\n    b = getint()\n    ans = []\n    ind = 0\n    for i in b:\n        ind = a.index(i)\n        ans.append(ind + 1)\n        a[1:ind + 1] = a[0:ind]\n        a[0] = i\n    print(' '.join((str(i) for i in ans)))\nsolve()", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    (m, n) = map(int, input().split())\n    a = getint()\n    b = getint()\n    ans = []\n    ind = 0\n    for i in b:\n        ind = a.index(i)\n        ans.append(ind + 1)\n        a[1:ind + 1] = a[0:ind]\n        a[0] = i\n    print(' '.join((str(i) for i in ans)))\nsolve()", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\nq = list(map(int, input().strip().split()))\nseen = set()\nfirst_idx = [0] * 51\nfor (i, j) in enumerate(a):\n    if j in seen:\n        continue\n    first_idx[j] = i + 1\n    seen.add(j)\nfrom queue import deque\nque = deque()\nres = []\nseen = set()\nfor qq in q:\n    if qq in seen:\n        pos = que.index(qq)\n        res.append(pos + 1)\n        que.remove(qq)\n        que.appendleft(qq)\n        continue\n    shift = 0\n    for i in que:\n        if first_idx[i] > first_idx[qq]:\n            shift += 1\n    res.append(first_idx[qq] + shift)\n    seen.add(qq)\n    que.appendleft(qq)\nprint(' '.join(map(str, res)))", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().strip().split())\na = [int(i) for i in input().strip().split()]\nq = [int(i) for i in input().strip().split()]\nseen = set()\nfirst_idx = [0] * 51\nfor (i, j) in enumerate(a):\n    if j in seen:\n        continue\n    first_idx[j] = i + 1\n    seen.add(j)\nfrom queue import deque\nque = deque()\nres = [0] * (3 * 10 ** 5 + 1)\nseen = set()\nfor (i, qq) in enumerate(q):\n    if qq in seen:\n        pos = que.index(qq)\n        res[i] = pos + 1\n        que.remove(qq)\n        que.appendleft(qq)\n        continue\n    shift = 0\n    for j in que:\n        if first_idx[j] > first_idx[qq]:\n            shift += 1\n    res[i] = first_idx[qq] + shift\n    seen.add(qq)\n    que.appendleft(qq)\nprint(' '.join(map(str, res[:len(q)])))", "import sys\nfrom collections import deque\nrd = sys.stdin.readline\n(n, q) = map(int, rd().split())\na = list(map(int, rd().split()))\nt = list(map(int, rd().split()))\ndic = deque(a)\nfor i in t:\n    x = dic.index(i)\n    print(x + 1, end=' ')\n    del dic[x]\n    dic.appendleft(i)", "(m, n) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = []\nind = 0\nfor i in b:\n    ind = a.index(i)\n    ans.append(ind + 1)\n    a[1:ind + 1] = a[0:ind]\n    a[0] = i\nprint(' '.join((str(i) for i in ans)))", "def solve(nq, a, t):\n    (n, q) = map(int, nq.split(' '))\n    a = list(map(int, a.split(' ')))\n    t = list(map(int, t.split(' ')))\n    out = []\n    for color in t:\n        i = a.index(color)\n        out.append(str(i + 1))\n        a[:i + 1] = [color] + a[:i]\n    return ' '.join(out)\nnq = input()\na = input()\nt = input()\nprint(solve(nq, a, t))", "import math\n\ndef make_query(colors, query):\n    idx = colors.index(query)\n    colors[1:idx + 1] = colors[0:idx]\n    colors[0] = query\n    return (colors, idx + 1)\n\ndef solve():\n    types = list(map(int, input().split()))\n    n = types[0]\n    q = types[1]\n    colors = list(map(int, input().split()))\n    queries = list(map(int, input().split()))\n    ans = []\n    for query in queries:\n        (colors, value) = make_query(colors, query)\n        ans.append(value)\n    return ans\nans = solve()\ntexto = ''\nfor number in ans:\n    texto += str(number) + ' '\nprint(texto[:-1])", "(n, q) = input().split()\ncolors = list(map(int, input().split()))\nquery_colors = list(map(int, input().split()))\nres = ''\nfor c in query_colors:\n    i = colors.index(c)\n    res += str(i + 1) + ' '\n    colors[:i + 1] = [c] + colors[:i]\nprint(res.rstrip())", "(n, q) = input().split()\ncolors = list(map(int, input().split()))\nquery_colors = list(map(int, input().split()))\nres = ''\nfor c in query_colors:\n    i = colors.index(c)\n    res += str(i + 1) + ' '\n    colors[:i + 1] = [c] + colors[:i]\nprint(res)", "def func6(n, q, a, t):\n    for i in t:\n        find = a.index(i)\n        print(find + 1, end=' ')\n        start = a[:find]\n        a[0] = a[find]\n        a[1:find + 1] = start\n\ndef main():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    func6(n, q, a, t)\nmain()", "(n, p) = [int(u) for u in input().split()]\nar = list(map(int, input().split()))[:n]\nb = list(map(int, input().split()))[:p]\nc = []\nfor j in range(p):\n    t = ar.index(b[j])\n    c.append(t + 1)\n    h = ar[t]\n    ar[1:t + 1] = ar[:t]\n    ar[0] = h\nprint(*c)", "(n, q) = map(int, input().strip().split())\nl = list(map(int, input().strip().split()))\nlq = list(map(int, input().strip().split()))\nlans = []\nfor i in lq:\n    a = l.index(i)\n    l[:a + 1] = [i] + l[:a]\n    lans.append(a + 1)\nprint(*lans)", "import bisect\nimport collections\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport sys\ninput = sys.stdin.readline\nri = lambda : int(input())\nrf = lambda : list(map(float, input().split()))\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().rstrip()\nMOD = 10 ** 9 + 7\nINF = math.inf\n(n, q) = rl()\nA = rl()\nQ = rl()\nres = []\nfor t in Q:\n    idx = A.index(t)\n    res.append(idx + 1)\n    A[1:idx + 1] = A[:idx]\n    A[0] = t\nprint(*res)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in range(q):\n    temp = a.index(t[i])\n    a[1:temp + 1] = a[0:temp]\n    a[0] = t[i]\n    print(temp + 1, end=' ')", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\np = list(map(int, input().split()))\nache = [0] * 51\nfor (i, j) in enumerate(l):\n    if ache[j] == 0:\n        ache[j] = i + 1\nd = []\nfor (i, j) in enumerate(p):\n    if j in d:\n        print(d.index(j) + 1, end=' ')\n        d.remove(j)\n        d.insert(0, j)\n    else:\n        cnt = 0\n        for k in d:\n            if ache[j] < ache[k]:\n                cnt += 1\n        print(ache[j] + cnt, end=' ')\n        d.insert(0, j)", "(n, q) = map(int, input().split())\nc = list(map(int, input().split()))\nq = list(map(int, input().split()))\nans = []\nfor i in range(len(q)):\n    s = c.index(q[i])\n    ans.append(s + 1)\n    c[:s + 1] = [c[s]] + c[:s]\nprint(*ans)", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\np = list(map(int, input().split()))\nres = [0] * 51\nfor (i, j) in enumerate(l):\n    if res[j] == 0:\n        res[j] = i + 1\nd = []\nfor (i, j) in enumerate(p):\n    if j in d:\n        print(d.index(j) + 1, end=' ')\n        d.remove(j)\n        d.insert(0, j)\n    else:\n        cnt = 0\n        for k in d:\n            if res[j] < res[k]:\n                cnt += 1\n        print(res[j] + cnt, end=' ')\n        d.insert(0, j)", "input()\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nans = list()\nfor i in y:\n    w = x.index(i)\n    ans.append(w + 1)\n    x[:w + 1] = [i] + x[:w]\nprint(*ans)", "def Solve():\n    (n, qs) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    for i in q:\n        x = a.index(i)\n        print(x + 1, end=' ')\n        a[:x + 1] = [i] + a[:x]\nSolve()", "(n, p) = [int(u) for u in input().split()]\nar = list(map(int, input().split()))[:n]\nb = list(map(int, input().split()))[:p]\nc = []\nfor j in range(p):\n    t = ar.index(b[j])\n    c.append(t + 1)\n    h = ar[t]\n    ar[1:t + 1] = ar[:t]\n    ar[0] = h\nprint(*c)", "(n, p) = [int(u) for u in input().split()]\nar = list(map(int, input().split()))[:n]\nb = list(map(int, input().split()))[:p]\nc = []\nfor j in range(p):\n    t = ar.index(b[j])\n    c.append(t + 1)\n    h = ar[t]\n    ar[1:t + 1] = ar[:t]\n    ar[0] = h\nprint(*c)", "(n, q) = list(map(int, input().split()))\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in t:\n    idx = a.index(i)\n    print(idx + 1, end=' ')\n    a[:idx + 1] = [i] + a[:idx]", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in range(q):\n    temp = a.index(t[i])\n    a[1:temp + 1] = a[0:temp]\n    a[0] = t[i]\n    print(temp + 1, end=' ')", "a = input()\nfoo = [int(i) for i in input().split()]\nbar = [int(i) for i in input().split()]\nfor i in bar:\n    indexx = foo.index(i)\n    print(indexx + 1, end=' ')\n    ans = foo[indexx]\n    foo[1:indexx + 1] = foo[:indexx]\n    foo[0] = ans", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nquery = list(map(int, input().split()))\nfor i in query:\n    t = arr.index(i)\n    print(t + 1, end=' ')\n    temp = arr[t]\n    arr[1:t + 1] = arr[:t]\n    arr[0] = temp", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\np = list(map(int, input().split()))\nache = [0] * 51\nfor (i, j) in enumerate(l):\n    if ache[j] == 0:\n        ache[j] = i + 1\nd = []\nfor (i, j) in enumerate(p):\n    if j in d:\n        print(d.index(j) + 1, end=' ')\n        d.remove(j)\n        d.insert(0, j)\n    else:\n        cnt = 0\n        for k in d:\n            if ache[j] < ache[k]:\n                cnt += 1\n        print(ache[j] + cnt, end=' ')\n        d.insert(0, j)", "(n, q) = list(map(int, input().split()))\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in t:\n    idx = a.index(i)\n    print(idx + 1, end=' ')\n    a[:idx + 1] = [i] + a[:idx]", "(N, Q) = [int(x) for x in input().split()]\ncards = [int(x) for x in input().split()]\nquery = [int(x) for x in input().split()]\nfor i in query:\n    pos = cards.index(i)\n    print(pos + 1, end=' ')\n    cards[:pos + 1] = [i] + cards[:pos]", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nquery = list(map(int, input().split()))\nfor i in query:\n    t = arr.index(i)\n    print(t + 1, end=' ')\n    temp = arr[t]\n    arr[1:t + 1] = arr[:t]\n    arr[0] = temp", "(n, q) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\nfor i in t:\n    pos = a.index(i)\n    temp = a[pos]\n    print(pos + 1, end=' ')\n    a[1:pos + 1] = a[0:pos]\n    a[0] = temp", "(n, q) = map(int, input().split())\ns = list(map(int, input().split()))\nt = list(map(int, input().split()))\nans = []\nfor i in range(q):\n    index = s.index(t[i])\n    ans.append(index + 1)\n    s[:index + 1] = [t[i]] + s[:index]\nprint(*ans)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in b:\n    p = a.index(i)\n    print(p + 1, end=' ')\n    a[:p + 1] = [i] + a[:p]", "(n, q) = list(map(int, input().split()))\narrn = list(map(int, input().split()))\narrq = list(map(int, input().split()))\nfor i in arrq:\n    a = arrn.index(i)\n    print(a + 1, end=' ')\n    arrn[:a + 1] = [i] + arrn[:a]", "(n, q) = list(map(int, input().split()))\nelements = list(map(int, input().split()))\nquery = list(map(int, input().split()))\nfor i in query:\n    element = elements.index(i)\n    print(element + 1, end=' ')\n    elements[:element + 1] = [i] + elements[:element]", "(ix, jx) = map(int, input().split())\ncard = list(map(int, input().split()))\nquery = list(map(int, input().split()))\nfor i in query:\n    j = card.index(i)\n    print(j + 1, end=' ')\n    card[:j + 1] = [i] + card[:j]", "(n, m) = map(int, input().split())\narr = [int(x) for x in input().split()]\np = [int(x) for x in input().split()]\nfor i in p:\n    id1 = arr.index(i)\n    temp = arr[id1]\n    print(id1 + 1, end=' ')\n    arr[1:id1 + 1] = arr[0:id1]\n    arr[0] = temp", "(cards, queries) = input().split()\ndeck = list(map(int, input().split()))\nquests = list(map(int, input().split()))\nfor i in quests:\n    index = deck.index(i)\n    print(index + 1, end=' ')\n    temp = deck[index]\n    deck[1:index + 1] = deck[0:index]\n    deck[0] = i", "(n, q) = map(int, input().split())\na = [int(x) for x in input().split()]\nt = [int(x) for x in input().split()]\nfor i in t:\n    pos = a.index(i)\n    temp = a[pos]\n    print(pos + 1, end=' ')\n    a[1:pos + 1] = a[0:pos]\n    a[0] = temp", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in b:\n    ind = a.index(i)\n    print(ind + 1, end=' ')\n    a[0:ind + 1] = [a[ind]] + a[:ind]", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in t:\n    k = a.index(i)\n    print(k + 1, end=' ')\n    a[:k + 1] = [i] + a[:k]", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nr = list(map(int, input().split()))\nfor i in r:\n    a = l.index(i)\n    l[0:a + 1] = [l[a]] + l[0:a]\n    print(a + 1, end=' ')", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    (n, q) = li()\n    a = li()\n    for qr in li():\n        i = a.index(qr)\n        print(i + 1, end=' ')\n        a[:i + 1] = [qr] + a[:i]\n\ndef solve1():\n    for _ in range(inp()):\n        n = inp()\nsolve()", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in t:\n    ind = a.index(i)\n    print(ind + 1, end=' ')\n    a[:ind + 1] = [i] + a[:ind]", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor x in t:\n    ind = a.index(x)\n    print(ind + 1, end=' ')\n    a[:ind + 1] = [x] + a[:ind]", "(n, q) = map(int, input().split())\na = [0 for i in range(300005)]\na[1:] = list(map(int, input().split()))\nq = list(map(int, input().split()))\nfor i in q:\n    idx = a.index(i)\n    print(idx, end=' ')\n    a[1:idx + 1] = [a[idx]] + a[1:idx]", "(cards, no_queries) = map(int, input().split())\ndeck = list(map(int, input().split()))\nqueries = list(map(int, input().split()))\nans = []\nfor x in queries:\n    i = deck.index(x)\n    ans.append(i + 1)\n    deck[:i + 1] = [x] + deck[:i]\nprint(*ans)", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\ns = list(map(int, input().split()))\np = []\nr = []\nfor i in range(len(s)):\n    x = l.index(s[i])\n    p.append(x)\n    y = l[x]\n    l[1:x + 1] = l[:x]\n    l[0] = y\nfor i in range(len(p)):\n    p[i] = p[i] + 1\n    print(p[i], end=' ')", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in b:\n    p = a.index(i)\n    print(p + 1, end=' ')\n    a[0:p + 1] = [i] + a[0:p]", "(n, q) = [int(x) for x in input().split()]\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor _ in range(q):\n    print((i := (a.index(b[_]) + 1)), end=' ')\n    a[:i] = [b[_]] + a[:i - 1]", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in t:\n    x = a.index(i)\n    print(x + 1, end=' ')\n    a[:x + 1] = [i] + a[:x]", "(n, q) = map(int, input().split())\ncards = list(map(int, input().split()))\nqueries = list(map(int, input().split()))\nfor Q in queries:\n    pos = cards.index(Q)\n    print(pos + 1, end=' ')\n    cards[:pos + 1] = [Q] + cards[:pos]", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nqry = list(map(int, input().split()))\nfor q in qry:\n    i = arr.index(q)\n    print(i + 1, end=' ')\n    arr[:i + 1] = [q] + arr[:i]", "(n, q) = [int(s) for s in input().split(' ')]\na = [int(s) for s in input().split(' ')]\nq = [int(s) for s in input().split(' ')]\nfor x in q:\n    index = a.index(x)\n    print(index + 1, end=' ')\n    a[:index + 1] = [x] + a[:index]\nprint()", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\nres = []\nfor i in t:\n    ind = a.index(i)\n    print(ind + 1, end=' ')\n    a[0:ind + 1] = [a[ind]] + a[0:ind]", "(N, Q) = [int(x) for x in input().split()]\ncards = [int(x) for x in input().split()]\nquery = [int(x) for x in input().split()]\nfor i in query:\n    pos = cards.index(i)\n    print(pos + 1, end=' ')\n    cards[:pos + 1] = [i] + cards[:pos]", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nQ = list(map(int, input().split()))\nfor i in range(q):\n    p = a.index(Q[i])\n    print(p + 1, end=' ')\n    a[:p + 1] = [a[p]] + a[:p]", "(n, q) = [int(s) for s in input().split(' ')]\na = [int(s) for s in input().split(' ')]\nq = [int(s) for s in input().split(' ')]\nfor x in q:\n    index = a.index(x)\n    print(index + 1, end=' ')\n    a[:index + 1] = [x] + a[:index]\nprint()", "from collections import deque\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr = deque(arr)\nquery = list(map(int, input().split()))\nres = []\nfor i in query:\n    res.append(arr.index(i) + 1)\n    arr.remove(i)\n    arr.appendleft(i)\nprint(*res)", "from collections import deque\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr = deque(arr)\nquery = list(map(int, input().split()))\nres = []\nfor i in query:\n    res.append(arr.index(i) + 1)\n    arr.remove(i)\n    arr.appendleft(i)\nprint(*res)", "from collections import deque\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr = deque(arr)\nquery = list(map(int, input().split()))\nres = []\nfor i in query:\n    res.append(arr.index(i) + 1)\n    arr.remove(i)\n    arr.appendleft(i)\nprint(*res)", "from collections import deque\n(n, q) = map(int, input().split())\na = deque(map(int, input().split()))\nt = list(map(int, input().split()))\nans = []\nfor i in t:\n    ans.append(a.index(i) + 1)\n    a.remove(i)\n    a.appendleft(i)\nprint(*ans)", "from collections import deque\n(n, q) = map(int, input().split())\na = deque(map(int, input().split()))\nt = list(map(int, input().split()))\nans = []\nfor e in t:\n    ans.append(a.index(e) + 1)\n    a.remove(e)\n    a.appendleft(e)\nprint(*ans)", "from collections import deque\n(n, q) = map(int, input().split())\ndeck = deque(map(int, input().split()))\nquery = list(map(int, input().split()))\nanswer = []\nfor color in query:\n    answer.append(deck.index(color) + 1)\n    deck.remove(color)\n    deck.appendleft(color)\nprint(*answer)", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n(n, q) = map(int, input().split())\nd = deque(map(int, input().split()))\nfor i in map(int, input().split()):\n    print(d.index(i) + 1, end=' ')\n    d.remove(i)\n    d.appendleft(i)", "input()\na = input().split()\nb = input().split()\nfor i in b:\n    tem = a.index(i)\n    temp = a[tem]\n    print(tem + 1, end=' ')\n    a[1:tem + 1] = a[0:tem]\n    a[0] = temp", "from collections import deque\n(n, q) = map(int, input().split())\ndeck = deque(map(int, input().split()))\nquery = list(map(int, input().split()))\nanswer = []\nfor color in query:\n    answer.append(deck.index(color) + 1)\n    deck.remove(color)\n    deck.appendleft(color)\nprint(*answer)", "(n, q) = map(int, input().split())\nnl = list(map(int, input().split()))\nql = list(map(int, input().split()))\nfor i in ql:\n    index = nl.index(i)\n    print(index + 1, '', end='')\n    nl[1:index + 1] = nl[0:index]\n    nl[0] = i", "from collections import deque\ninput()\nseq1 = deque(input().split())\nseq2 = input().split()\noutput = ''\nfor querie in seq2:\n    indice = seq1.index(querie)\n    seq1.remove(querie)\n    seq1.appendleft(querie)\n    output += str(indice + 1)\n    output += ' '\nprint(output)", "from collections import deque\n(n, q) = list(map(int, input().split(' ')))\na = deque(map(int, input().split(' ')))\nt = list(map(int, input().split(' ')))\nans = []\nfor ti in t:\n    ans.append(a.index(ti) + 1)\n    a.remove(ti)\n    a.appendleft(ti)\nprint(*ans)", "from collections import deque\n(n, q) = map(int, input().split())\na = deque(map(int, input().split()))\nt = list(map(int, input().split()))\nl = []\nfor x in t:\n    l.append(a.index(x) + 1)\n    a.remove(x)\n    a.appendleft(x)\nprint(*(i for i in l))", "from collections import deque\n\ndef main():\n    (n, q) = map(int, input().split())\n    a = deque((int(i) for i in input().split()))\n    t = [int(i) for i in input().split()]\n    for i in t:\n        pos = a.index(i)\n        a.remove(i)\n        print(pos + 1, end=' ')\n        a.appendleft(i)\n    print()\nmain()", "from collections import deque\ninput()\ncores = deque(map(int, input().split()))\nconsultas = list(map(int, input().split()))\nfor consulta in consultas:\n    indice = cores.index(consulta)\n    print(indice + 1, end=' ')\n    cores.remove(consulta)\n    cores.appendleft(consulta)", "from collections import deque\ninput()\ncores = deque(map(int, input().split()))\nconsultas = list(map(int, input().split()))\nfor consulta in consultas:\n    indice = cores.index(consulta)\n    print(indice + 1, end=' ')\n    cores.remove(consulta)\n    cores.appendleft(consulta)", "from collections import deque\n(n, q) = map(int, input().split())\na = deque(map(int, input().split()))\nq = list(map(int, input().split()))\nres = []\nfor t in q:\n    res.append(a.index(t) + 1)\n    a.remove(t)\n    a.appendleft(t)\nprint(*res)", "from collections import deque\n(n, q) = map(int, input().split())\nk = deque(map(int, input().split()))\nz = list(map(int, input().split()))\nans = []\nfor i in z:\n    ans.append(k.index(i) + 1)\n    k.remove(i)\n    k.appendleft(i)\nprint(*ans)", "from collections import deque\n(n, q) = map(int, input().split())\ncolor = deque(map(int, input().split()))\nquery = list(map(int, input().split()))\nfor i in query:\n    print(color.index(i) + 1, end=' ')\n    color.remove(i)\n    color.appendleft(i)", "from collections import deque\n(n, q) = map(int, input().split())\na = deque(map(int, input().split()))\nt = list(map(int, input().split()))\nans = []\nfor i in t:\n    ans.append(a.index(i) + 1)\n    a.remove(i)\n    a.appendleft(i)\nprint(*ans)", "from collections import deque\n(n, m) = list(map(int, input().split()))\ndeck = deque(list(map(int, input().split())))\ncolors = list(map(int, input().split()))\narr = []\nfor c in colors:\n    print(deck.index(c) + 1, end=' ')\n    deck.remove(c)\n    deck.appendleft(c)", "from collections import deque\n(k, l) = map(int, input().split())\nk1 = list(map(int, input().split()))\ndq = deque(k1)\nl1 = list(map(int, input().split()))\na = 0\nc = []\nfor i in l1:\n    a = dq.index(i)\n    c.append(a + 1)\n    dq.remove(i)\n    dq.appendleft(i)\nfor i in c:\n    print(i, end=' ')", "from collections import deque\n(a, b) = map(int, input().split())\nq1 = deque(map(int, input().split()))\nq2 = deque(map(int, input().split()))\nfor i in q2:\n    print(q1.index(i) + 1, end=' ')\n    q1.remove(i)\n    q1.appendleft(i)", "from sys import stdin, stdout\nimport sys\nimport math\nimport itertools\nfrom collections import defaultdict\nfrom collections import deque\nsys.setrecursionlimit(10 ** 6)\n\ndef main():\n    (n, q) = map(int, stdin.readline().split())\n    colors = deque([int(x) for x in stdin.readline().split()])\n    queries = [int(x) for x in stdin.readline().split()]\n    for i in range(q):\n        need = queries[i]\n        print(colors.index(need, 0, n) + 1, end=' ')\n        colors.remove(need)\n        colors.appendleft(need)\nmain()", "import sys\nfrom collections import deque\n(n, q) = map(int, sys.stdin.readline().split())\ncolor = list(map(int, sys.stdin.readline().split()))\nquery = list(map(int, sys.stdin.readline().split()))\nq = deque(color)\nfor item in query:\n    idx = q.index(item)\n    print(idx + 1, end=' ')\n    q.remove(item)\n    q.appendleft(item)", "input()\na = input().split()\nb = input().split()\nfor i in b:\n    tem = a.index(i)\n    temp = a[tem]\n    print(tem + 1, end=' ')\n    a[1:tem + 1] = a[0:tem]\n    a[0] = temp", "from collections import deque\n(n, q) = map(int, input().split())\nl = deque(map(int, input().split()))\nquery = list(map(int, input().split()))\nl1 = []\nfor i in query:\n    l1.append(l.index(i) + 1)\n    l.remove(i)\n    l.appendleft(i)\nprint(*(i for i in l1))", "from collections import deque\n(n, q) = map(int, input().split())\nl = deque(map(int, input().split()))\nquery = list(map(int, input().split()))\nl1 = []\nfor i in query:\n    l1.append(l.index(i) + 1)\n    l.remove(i)\n    l.appendleft(i)\nprint(*(i for i in l1))", "from collections import deque\ninpt = input()\ncolor = deque(map(int, input().split()))\nq_color = [int(x) for x in input().split()]\nfor q in q_color:\n    i = color.index(q)\n    print(i + 1, end=' ')\n    color.remove(q)\n    color.appendleft(q)", "from collections import deque\ninpt = input()\ncolor = deque(map(int, input().split()))\nq_color = [int(x) for x in input().split()]\nfor q in q_color:\n    i = color.index(q)\n    print(i + 1, end=' ')\n    color.remove(q)\n    color.appendleft(q)", "from collections import deque\nfrom itertools import islice\n\ndef main():\n    (n, q) = map(int, input().split())\n    cards = deque(list(map(int, input().split())))\n    queries = list(map(int, input().split()))\n    for i in range(q):\n        query = queries[i]\n        print(cards.index(query, 0, n) + 1, end=' ')\n        cards.remove(query)\n        cards.appendleft(query)\n    return\nmain()", "from collections import deque\n(n, q) = map(int, input().split())\ncolors = deque(map(int, input().split()))\nfor query in input().split():\n    x = int(query)\n    print(colors.index(x) + 1, end=' ')\n    colors.remove(x)\n    colors.appendleft(x)", "(n, q) = input().split()\ncolors = input().split()\nquery_colors = input().split()\nres = ''\nfor c in query_colors:\n    i = colors.index(c)\n    res += str(i + 1) + ' '\n    colors[:i + 1] = [c] + colors[:i]\nprint(res)", "(n, k) = map(int, input().split())\na = input().split()\nb = input().split()\nfor x in b:\n    ind = a.index(x)\n    print(ind + 1, end=' ')\n    a[:ind + 1] = [x] + a[:ind]", "from collections import deque\n(n, q) = map(int, input().split())\nmapping = {}\nst = set()\narr = deque(list(map(int, input().split())))\nqq = list(map(int, input().split()))\nans = []\nfor (i, num) in enumerate(qq):\n    ind = arr.index(num)\n    ans.append(ind + 1)\n    arr.remove(num)\n    arr.appendleft(num)\nprint(*ans)"]