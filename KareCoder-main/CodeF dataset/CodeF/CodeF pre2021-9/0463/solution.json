["for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    low = 1\n    possible = True\n    i = n - 1\n    while possible and i >= 0:\n        start = i - (p[i] - low)\n        end = i + 1\n        if start < 0:\n            print('No')\n            break\n        if p[start:end] != list(range(low, p[i] + 1)):\n            print('No')\n            break\n        low = p[i] + 1\n        i = start - 1\n    else:\n        print('Yes')", "import os\n\ndef pp(input):\n    n_test = int(input())\n    for i in range(n_test):\n        input()\n        prev = None\n        for k in map(int, input().split()):\n            if prev is not None and k - prev > 1:\n                print('No')\n                break\n            prev = k\n        else:\n            print('Yes')\nif 'paalto' in os.getcwd():\n    from string_source import string_source\n    s1 = string_source('5\\n5\\n2 3 4 5 1\\n1\\n1\\n3\\n1 3 2\\n4\\n4 2 3 1\\n5\\n1 5 2 4 3\\n')\n    pp(s1)\nelse:\n    pp(input)", "import sys\nstdin = sys.stdin\nns = lambda : stdin.readline().rstrip()\nni = lambda : int(stdin.readline().rstrip())\nnm = lambda : map(int, stdin.readline().split())\nnl = lambda : list(map(int, stdin.readline().split()))\n\ndef solve():\n    n = ni()\n    a = nl()\n    c = 0\n    while a:\n        y = t = a[-1]\n        while t > c:\n            if a[-1] != t:\n                return False\n            a.pop()\n            t -= 1\n        c = y\n    return True\nt = ni()\nfor _ in range(t):\n    print('Yes' if solve() else 'No')", "def solve(p):\n    if len(p) <= 2:\n        return True\n    looking_for = 1\n    max_filled = len(p)\n    while looking_for <= len(p):\n        index = p.index(looking_for)\n        looking_for += 1\n        for i in range(index + 1, max_filled):\n            if p[i] != looking_for:\n                return False\n            looking_for += 1\n        max_filled = index\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    print('Yes' if solve(p) else 'No')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNeos'[any((y - x > 1 for (x, y) in zip(a, a[1:])))::2])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    prev = p[0]\n    prev_start = p[0]\n    flag = True\n    for e in p[1:]:\n        if e != prev + 1:\n            if prev_start < e:\n                flag = False\n            else:\n                prev_start = e\n        prev = e\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    s = set()\n    flag = False\n    while i < n:\n        if a[i] == n:\n            s.add(a[i])\n            i += 1\n            continue\n        if a[i] in s:\n            flag = True\n            break\n        else:\n            s.add(a[i])\n            temp = a[i]\n            temp += 1\n            j = i + 1\n            while j < n:\n                if a[j] == temp:\n                    j += 1\n                    temp += 1\n                elif temp in s or temp > n:\n                    i = j\n                    break\n                else:\n                    flag = True\n                    break\n            if j == n:\n                i = n\n        if flag:\n            break\n    if flag:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = p[::-1]\n    m = q[0]\n    flag = True\n    for i in range(1, n):\n        if q[i] == q[i - 1] - 1:\n            continue\n        elif q[i] > m:\n            m = q[i]\n            continue\n        else:\n            flag = False\n        break\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    l = I()\n    v = 1\n    f = 0\n    i = n - 1\n    while i > -1:\n        if l[i] != v:\n            k = l[i]\n            for j in range(k, v - 1, -1):\n                if l[i] != j:\n                    f = 1\n                    break\n                i -= 1\n            if f:\n                break\n            v = k + 1\n        else:\n            v += 1\n            i -= 1\n    print('YNeos'[f::2])", "tc = int(input().strip())\n\ndef solve():\n    n = int(input().strip())\n    curr_orien = list(map(int, input().strip().split()))\n    curr_pos = {curr_orien[i]: i for i in range(len(curr_orien))}\n    all_pos = [False for i in range(len(curr_orien))]\n    k = 1\n    lst_pos = len(curr_orien)\n    while k <= n:\n        p = curr_pos[k]\n        if curr_orien[p:lst_pos] != list(range(k, k + lst_pos - p)):\n            print('No')\n            return\n        k += lst_pos - p\n        lst_pos = p\n    print('Yes')\nfor t in range(1, tc + 1):\n    solve()", "def task(n, p):\n    start = -1\n    prev = -1\n    for i in range(0, len(p)):\n        if start == -1:\n            start = p[i]\n        elif prev > p[i]:\n            start = p[i]\n        elif prev + 1 < p[i]:\n            print('No')\n            return\n        prev = p[i]\n    print('Yes')\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    task(n, p)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 'Yes'\n    for i in range(n - 1):\n        if arr[i + 1] > arr[i] + 1:\n            ans = 'No'\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 'Yes'\n    for i in range(len(a) - 1):\n        if a[i + 1] > a[i] + 1:\n            ans = 'No'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    ans = 'Yes'\n    for i in range(len(array) - 1):\n        if array[i + 1] > array[i] + 1:\n            ans = 'No'\n            break\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    test = int(input())\n    for t in range(test):\n        n = int(input())\n        l = [int(i) for i in input().split(' ')]\n        flag = True\n        for i in range(n - 1):\n            if l[i + 1] - l[i] > 1:\n                flag = False\n                break\n        if flag:\n            print('Yes')\n        else:\n            print('No')\nmain()", "t = int(input())\n\ndef slv(n, a):\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            if a[i + 1] - a[i] > 1:\n                return 'No'\n    return 'Yes'\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(slv(n, a))", "kl = int(input())\nfor l in range(kl):\n    n = int(input())\n    pk = n + 1\n    pr = 0\n    for i in input().split():\n        if pr:\n            continue\n        i = int(i)\n        if i > pk and i != pk + 1:\n            pr = 1\n        pk = i\n    if pr:\n        print('No')\n    else:\n        print('Yes')", "T = int(input())\n\ndef test(l):\n    bord = len(l)\n    v = 1\n    for z in range(len(l) - 1, -1, -1):\n        if l[z] == v:\n            v += 1\n            for j in range(z + 1, bord):\n                v += 1\n                if l[j] != l[j - 1] + 1:\n                    return False\n            bord = z\n    return True\nfor t in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print('Yes' if test(l) else 'No')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = a[0]\n    c = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            pass\n        elif a[i] < t:\n            t = a[i]\n        else:\n            c = 1\n            break\n    if c == 1:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = 'Yes'\n    for i in range(0, n - 1):\n        if a[i + 1] > a[i] + 1:\n            r = 'No'\n    print(r)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    flag = 0\n    for j in range(0, n - 1):\n        if s[j + 1] > s[j] + 1:\n            flag = 1\n    if flag == 0:\n        print('Yes')\n    else:\n        print('No')", "from collections import Counter\nimport sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef ok(aa, n):\n    if min(aa) != 1:\n        return False\n    if max(aa) != n:\n        return False\n    if max(Counter(aa).values()) > 1:\n        return False\n    l = aa[0]\n    pa = aa[0]\n    for a in aa[1:]:\n        if a > pa + 1:\n            return False\n        if a < pa:\n            if l < a:\n                return False\n            l = a\n        pa = a\n    return True\n\ndef main():\n    for _ in range(II()):\n        n = II()\n        aa = LI()\n        if ok(aa, n):\n            print('Yes')\n        else:\n            print('No')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(1, n):\n        if arr[i] > arr[i - 1] and arr[i] - arr[i - 1] != 1:\n            print('No')\n            break\n    else:\n        print('Yes')", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    ar = [int(x) for x in input().split()]\n\n    def solve(ar, n):\n        f = 0\n        for i in range(0, n - 1):\n            if ar[i] < ar[i + 1]:\n                if ar[i + 1] != ar[i] + 1:\n                    f = 1\n        return f\n    x = solve(ar, n)\n    if x == 1:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    delta = [0] * (n + 1)\n    delta[0] = 1\n    s = p[0]\n    flag = 0\n    delta[s] = 1\n    for i in range(1, n):\n        if p[i] == s + 1:\n            delta[p[i]] = 1\n            s += 1\n            continue\n        elif s == n:\n            s = p[i]\n            delta[s] = 1\n        elif delta[s + 1] == 1:\n            s = p[i]\n            delta[s] = 1\n        else:\n            flag = 1\n            break\n    if flag == 0:\n        print('Yes')\n    else:\n        print('No')", "for q in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    res = 'Yes'\n    for i in range(n - 1):\n        if p[i + 1] > p[i] + 1:\n            res = 'No'\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    flag = True\n    high = n + 1\n    for i in range(1, n):\n        if a[i - 1] != a[i] - 1:\n            high = a[i - 1]\n        if a[i] >= high:\n            flag = False\n            break\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    pp = [int(i) for i in input().split()]\n    pos = [0] * (n + 1)\n    for i in range(0, n):\n        pos[pp[i]] = i + 1\n    ans = 'Yes'\n    for i in range(2, n + 1):\n        if pos[i] > pos[i - 1] + 1:\n            ans = 'No'\n            break\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = 'Yes'\n    for i in range(1, n):\n        if p[i] - p[i - 1] > 1:\n            ans = 'No'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = True\n    for i in range(n - 1, 0, -1):\n        if a[i] - a[i - 1] > 1:\n            print('No')\n            flag = False\n            break\n    if flag:\n        print('Yes')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ind = arr.index(1)\n    flag = 1\n    for i in range(ind + 1, n):\n        if arr[i] == arr[i - 1] + 1:\n            continue\n        else:\n            flag = 0\n            break\n    if flag == 0:\n        print('No')\n        continue\n    num = arr[n - 1] + 1\n    if num == n:\n        print('Yes')\n        continue\n    start = ind - 1\n    while start > 0:\n        start = ind - 1\n        while arr[start] != num:\n            start -= 1\n            if arr[start] + 1 != arr[start + 1]:\n                flag = 0\n                break\n        if flag == 0:\n            print('No')\n            break\n        num = arr[ind - 1] + 1\n        ind = start\n    if flag == 0:\n        continue\n    print('Yes')", "numcases = int(input())\n\ndef isPossible(arr, n):\n    p1 = arr[0]\n    p2 = 0\n    count = 0\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] == 1:\n            continue\n        elif arr[i + 1] < arr[i]:\n            count = count + 1\n            if count > 1:\n                if p1 - arr[i] == 1:\n                    p1 = p2\n                    p2 = arr[i + 1]\n                    continue\n                else:\n                    return 'No'\n            else:\n                p2 = arr[i + 1]\n        else:\n            return 'No'\n    return 'Yes'\nfor i in range(numcases):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(isPossible(arr, n))", "for _ in range(int(input())):\n    N = int(input())\n    a = list(map(int, input().split()))\n    out = 'Yes'\n    for i in range(N - 1):\n        if a[i + 1] > a[i] + 1:\n            out = 'No'\n            break\n    print(out)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 'Yes'\n    for i in range(n - 1):\n        if arr[i + 1] > arr[i] + 1:\n            ans = 'No'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(1, n):\n        x = arr[i] - arr[i - 1]\n        if x != 1 and x >= 0:\n            break\n    else:\n        print('Yes')\n        continue\n    print('No')", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(1, n):\n        x = arr[i] - arr[i - 1]\n        if x != 1 and x >= 0:\n            break\n    else:\n        print('Yes')\n        continue\n    print('No')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    small_idx = [0]\n    for i in range(n - 1):\n        if a[i + 1] < a[i]:\n            small_idx.append(i + 1)\n    end = n\n    small_idx = small_idx[::-1]\n    now = []\n    for idx in small_idx:\n        now.extend(a[idx:end])\n        end = idx\n    if now == list(range(1, n + 1)):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = True\n    for i in range(n - 1):\n        if l[i + 1] < l[i] or l[i] + 1 == l[i + 1]:\n            continue\n        flag = False\n        break\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1):\n        if a[i] > a[i + 1] or a[i] - a[i + 1] == -1:\n            pass\n        else:\n            print('No')\n            break\n    else:\n        print('Yes')", "def solve(arr, n):\n    (i, ans) = (1, True)\n    while ans and i < n:\n        if arr[i] > arr[i - 1]:\n            ans = ans & (arr[i] - 1 == arr[i - 1])\n        i += 1\n    return ans\nt = int(input())\nfor _t in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if solve(a, n):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    i = 0\n    u = 0\n    while i < n:\n        if a[i] < n - i:\n            k = n - a[i] - i\n            for j in range(0, k):\n                if a[j + i + 1] - a[j + i] == 1:\n                    continue\n                else:\n                    u = 1\n                    break\n            if u != 1:\n                i = i + k + 1\n            else:\n                break\n        else:\n            i += 1\n    if u == 1:\n        print('No')\n    else:\n        print('Yes')", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    count = 1\n    rec = {}\n    for i in range(n):\n        rec[p[i]] = i\n    end = n\n    while count <= n:\n        start = rec[count]\n        for i in range(start, end):\n            if p[i] == count:\n                count += 1\n            else:\n                print('No')\n                return\n        end = start\n    print('Yes')\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "from itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pos = {val: pos for (pos, val) in enumerate(p)}\n    if any(map(lambda i: p[pos[i] + 1] > i + 1 if pos[i] + 1 < len(p) else False, range(1, n + 1))):\n        print('No')\n    else:\n        print('Yes')", "import sys\nfrom collections import defaultdict\nfrom copy import copy\nR = lambda t=int: t(input())\nRL = lambda t=int: [t(x) for x in input().split()]\nRLL = lambda n, t=int: [RL(t) for _ in range(n)]\n\ndef solve():\n    n = R()\n    P = RL()\n    m = l = P[0]\n    for p in P[1:]:\n        if l + 1 != p and p > m:\n            print('No')\n            return\n        m = min(m, p)\n        l = p\n    print('Yes')\nT = R()\nfor _ in range(T):\n    solve()", "T = int(input())\nfor case in range(T):\n    N = int(input())\n    data = list(map(int, input().split()))\n    position = [None] * N\n    for (i, elt) in enumerate(data):\n        position[elt - 1] = i + 1\n    base = position[0]\n    before = position[0]\n    toreach = N\n    correct = 'Yes'\n    for elt in position[1:]:\n        if before == toreach:\n            toreach = base - 1\n            base = elt\n        elif elt != before + 1:\n            correct = 'No'\n            break\n        before = elt\n    print(correct)", "t = int(input())\nfor dobpt in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    answer = 'Yes'\n    for i in range(n - 1):\n        if p[i + 1] > p[i] and p[i + 1] != p[i] + 1:\n            answer = 'No'\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = [p[0]]\n    for i in range(1, n):\n        if p[i - 1] + 1 != p[i]:\n            s.append(p[i])\n    for i in range(1, len(s)):\n        if s[i] > s[i - 1]:\n            print('No')\n            break\n    else:\n        print('Yes')", "tests = input()\nfor testNum in range(int(tests)):\n    n = int(input())\n    perm = [int(i) for i in input().split(' ')]\n    submitted = [-1] * n\n    position = [0] * n\n    for each in range(len(perm)):\n        position[perm[each] - 1] = each\n    valid = True\n    for i in range(len(position) - 1):\n        if position[i + 1] != position[i] + 1 and position[i + 1] > position[i]:\n            valid = False\n            print('No')\n            break\n    if valid:\n        print('Yes')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    values = list(map(int, input().split()))\n    check = True\n    indices = [0] * (n + 1)\n    for i in range(n):\n        indices[values[i]] = i + 1\n    for i in range(2, n + 1):\n        if i == 2:\n            if indices[i] == indices[i - 1] + 1 or indices[i - 1] == n:\n                continue\n            else:\n                check = False\n                break\n        elif indices[i] == indices[i - 1] + 1 or indices[i] < indices[i - 1]:\n            continue\n        else:\n            check = False\n            break\n    if check:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor inp in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    index = [0 for i in range(n + 1)]\n    for i in range(n):\n        index[l[i]] = i + 1\n    i = 1\n    end = n\n    flag = 0\n    while i < n + 1 and flag == 0:\n        j = index[i]\n        count = 1\n        while j < end:\n            if i + count == l[j]:\n                j += 1\n                count += 1\n            else:\n                flag = 1\n                break\n        end = index[i] - 1\n        i += count\n    if flag == 1:\n        print('No')\n    else:\n        print('Yes')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    end_point = 1\n    start_point = a[0]\n    flag = 1\n    i = 0\n    while i < n - 1 and end_point <= n:\n        if a[i] == end_point:\n            i += 1\n            end_point = start_point + 1\n            if i < n:\n                start_point = a[i]\n            else:\n                break\n        elif a[i] - a[i + 1] == 1:\n            i += 1\n        else:\n            flag = 0\n            break\n    if flag == 0:\n        print('No')\n    else:\n        print('Yes')", "for T in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = [1] * n\n    d = {}\n    last = n - 1\n    res = 'Yes'\n    if n == 1:\n        if arr[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        for i in range(n):\n            d[arr[i]] = i\n        visited = [False] * n\n        for i in range(1, n):\n            ind = d[i]\n            visited[ind] = True\n            if ind != last:\n                if d[i + 1] == ind + 1 or visited[ind + 1] == True:\n                    continue\n                else:\n                    res = 'No'\n                    break\n            last = min(last, d[i] - 1)\n        print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    temp = []\n    cur = [s[0]]\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            temp.append(cur)\n            cur = [s[i]]\n        else:\n            cur.append(s[i])\n    temp.append(cur)\n    temp.reverse()\n    ans = []\n    for i in temp:\n        ans += i\n    if ans == [i for i in range(1, n + 1)]:\n        print('Yes')\n    else:\n        print('No')", "def f(arr):\n    n = len(arr)\n    d = {v: i for (i, v) in enumerate(arr)}\n    seen = {n}\n    pidx = d[1] - 1\n    for i in range(n - 1):\n        idx = d[i + 1]\n        if idx == pidx + 1:\n            if idx + 1 in seen:\n                pidx = d[i + 2] - 1\n            else:\n                pidx = idx\n            seen.add(idx)\n        else:\n            return 'No'\n    return 'Yes'\nT = int(input())\nfor case in range(T):\n    input()\n    arr = [int(i) for i in input().split(' ')]\n    print(f(arr))", "from sys import *\nimport collections\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split(' ')))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[p[i]] = i + 1\n    l = n\n    op = True\n    com = 0\n    res = True\n    for i in range(1, n + 1, 1):\n        if op:\n            if pos[i] == l:\n                l = l - 1\n                continue\n            till = l + 1\n            l = pos[i] - 1\n            op = False\n            com = pos[i] + 1\n            continue\n        if pos[i] != com:\n            res = False\n            break\n        com = com + 1\n        if com == till:\n            op = True\n    if res:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    p = [int(i) for i in str.split(input(), ' ')]\n    indexes = {}\n    for i in range(len(p)):\n        indexes[p[i]] = i\n    i = indexes[1]\n    ctr = 1\n    valid = True\n    while ctr <= n:\n        if i == n or p[i] < ctr:\n            i = indexes[ctr]\n        if p[i] == ctr:\n            ctr += 1\n            i += 1\n        else:\n            valid = False\n            break\n    if valid:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    free = True\n    pos = [0] * n\n    id = [0] * (n + 1)\n    pos.append(1)\n    c = 0\n    res = True\n    for i in range(n):\n        id[p[i]] = i\n    for i in range(1, n + 1):\n        if free:\n            c = id[i] + 1\n            pos[c - 1] = 1\n            if pos[c]:\n                c = 0\n                free = True\n            else:\n                free = False\n        elif id[i] != c:\n            res = False\n            break\n        else:\n            c += 1\n            pos[c - 1] = 1\n            if pos[c]:\n                c = 0\n                free = True\n            else:\n                free = False\n    print('YNeos'[not res::2])", "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LF():\n    return list(map(float, input().split()))\n\ndef LI_():\n    return list(map(lambda x: int(x) - 1, input().split()))\n\ndef II():\n    return int(input())\n\ndef IF():\n    return float(input())\n\ndef S():\n    return input().rstrip()\n\ndef LS():\n    return S().split()\n\ndef IR(n):\n    return [II() for _ in range(n)]\n\ndef LIR(n):\n    return [LI() for _ in range(n)]\n\ndef FR(n):\n    return [IF() for _ in range(n)]\n\ndef LFR(n):\n    return [LI() for _ in range(n)]\n\ndef LIR_(n):\n    return [LI_() for _ in range(n)]\n\ndef SR(n):\n    return [S() for _ in range(n)]\n\ndef LSR(n):\n    return [LS() for _ in range(n)]\nmod = 1000000007\ninf = float('INF')\n\ndef solve():\n    n = II()\n    a = LI()\n    i = 0\n    while i < n - 1:\n        if a[i] < a[i + 1]:\n            if a[i] + 1 == a[i + 1]:\n                i += 1\n                continue\n            print('No')\n            return\n        i += 1\n    print('Yes')\n    return\nfor _ in range(II()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    aa = list(map(int, input().split()))\n    ok = True\n    d = {aa[i]: i for i in range(n)}\n    upper = n - 1\n    start = 1\n    for i in range(1, n + 1):\n        if d[i] > upper:\n            ok = False\n            break\n        if d[i] == upper:\n            upper = d[start] - 1\n            start = i + 1\n            continue\n        if i == start:\n            continue\n        if d[i] == d[i - 1] + 1:\n            continue\n        else:\n            ok = False\n            break\n    print('Yes' if ok else 'No')", "for test in range(int(input())):\n    n = int(input())\n    last_break = n + 1\n    new_start = None\n    current_index = None\n    permuatation = [None] + list(map(int, input().split()))\n    score = [None for value in permuatation]\n    answer = 'Yes'\n    for index in range(1, n + 1):\n        score[permuatation[index]] = index\n    new_start = score[1]\n    current_index = score[1] + 1\n    for value in range(2, n):\n        if current_index == last_break:\n            current_index = score[value] + 1\n            last_break = new_start\n            new_start = score[value]\n        elif value == permuatation[current_index]:\n            current_index += 1\n        else:\n            answer = 'No'\n    print(answer)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    maax = p[-1]\n    start = p[-1]\n    miin = 1\n    current = p[-1]\n    i = n - 2\n    flag = 0\n    while i >= 0:\n        if maax > p[i] >= miin:\n            if p[i] == current - 1:\n                current = p[i]\n            else:\n                flag = 1\n                break\n        elif p[i] > maax:\n            if current == miin:\n                miin = maax + 1\n                current = p[i]\n                maax = p[i]\n            else:\n                flag = 1\n                break\n        i -= 1\n    if flag == 1:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\n\ndef solve(left, n, map, arr, block):\n    if left >= n:\n        return True\n    check = map[left]\n    initial = map[left]\n    while check < block and arr[check] == left:\n        left += 1\n        check += 1\n    if check != block:\n        return False\n    if left >= n:\n        return True\n    return solve(left, n, map, arr, initial)\nfor i in range(t):\n    n = int(input())\n    arr = []\n    list = input().split(' ')\n    for j in range(n):\n        arr.append(int(list[j]))\n    map = {}\n    for j in range(n):\n        map[arr[j]] = j\n    if solve(1, n, map, arr, n):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        dic[ar[i]] = i\n    leftmost = n\n    j = 1\n    flag = True\n    left = [dic[1]]\n    right = n\n    ini = dic[1]\n    for i in range(1, n + 1):\n        if left[-1] == right:\n            right = ini\n            ini = dic[i]\n            left.append(ini)\n        if dic[i] != left[-1]:\n            flag = False\n            break\n        else:\n            left.append(left[-1] + 1)\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "from collections import defaultdict as dc\nfrom heapq import *\nimport math\nimport bisect\nimport sys\nfrom collections import deque as dq\nfrom heapq import heapify, heappush, heappop\nmod = 10 ** 12\n\ndef inp():\n    p = int(input())\n    return p\n\ndef line():\n    p = list(map(int, input().split()))\n    return p\n\ndef read_mat():\n    n = inp()\n    a = []\n    for i in range(n):\n        a.append(line())\n    return a\n\ndef digit(n):\n    s = str(n)\n    p = 0\n    for i in s:\n        p += int(i) ** 2\n    return p\n\ndef check(a):\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1] + 1:\n            return 0\n    return 1\n\ndef solve(a):\n    if len(a) <= 1:\n        return 1\n    if check(a):\n        return 1\n    if check(a[::-1]):\n        return 1\n    for i in range(len(a)):\n        if a[i] == 1:\n            z = i\n            break\n    l = len(a) - z\n    for i in range(z):\n        a[i] = a[i] - l\n        if a[i] <= 0:\n            return 0\n    if solve(a[:z]) and check(a[z:]):\n        return 1\n    return 0\nfor _ in range(inp()):\n    n = inp()\n    a = line()\n    l = solve(a)\n    if l == 1:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    greatest_seen_number = 0\n    target_number = 1\n    just_found_target = True\n    for R in range(len(P) - 1, -1, -1):\n        greatest_seen_number = max(greatest_seen_number, P[R])\n        if not just_found_target and P[R] != P[R + 1] - 1:\n            print('No')\n            break\n        just_found_target = False\n        if P[R] == target_number:\n            target_number = greatest_seen_number + 1\n            just_found_target = True\n    else:\n        print('Yes')", "import collections\nimport heapq\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = {}\n    for i in range(len(a)):\n        pos[a[i]] = i\n    flag = True\n    index = n\n    smallestIndex = pos[1]\n    prev = pos[1]\n    for i in range(2, n + 1):\n        if prev + 1 < index:\n            if pos[i] == prev + 1:\n                prev += 1\n            else:\n                print('No')\n                flag = False\n                break\n        else:\n            index = smallestIndex\n            smallestIndex = pos[i]\n            prev = pos[i]\n    if flag:\n        print('Yes')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    arr = [False] * n\n    for i in range(n):\n        d[a[i]] = i\n    now = d[1]\n    arr[now] = True\n    flag = 0\n    for i in range(2, n + 1):\n        pos = d[i]\n        if now + 1 < n and arr[now + 1] == False:\n            if pos == now + 1:\n                arr[now + 1] = True\n            else:\n                flag = 1\n                break\n        else:\n            arr[pos] = True\n        now = pos\n    if flag:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor br in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    q = sorted(a)\n    max_k = a[n - 1]\n    F = True\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] == a[i] - 1 or a[i - 1] > max_k:\n            max_k = max(max_k, a[i])\n        else:\n            F = False\n    if F:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[p[i]] = i + 1\n    e = 0\n    for i in range(1, n):\n        if b[i] > b[i + 1] or b[i + 1] - b[i] == 1:\n            e = 0\n        else:\n            e = 1\n            break\n    if e == 0:\n        print('Yes')\n    else:\n        print('No')", "for t in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bar = []\n    ch = []\n    for king in range(3):\n        ch.append(king)\n    for k in range(num + 1):\n        bar.append(0)\n    for i in range(num):\n        bar[lis[i]] = i + 1\n    emilia = 0\n    for i in range(1, num):\n        if bar[i] > bar[i + 1] or bar[i + 1] - bar[i] == 1:\n            emilia = 0\n        else:\n            emilia = 1\n            break\n    if emilia == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        print('Yes')\n    else:\n        d = {}\n        for i in range(n):\n            d[l[i]] = i\n        s = set()\n        f = True\n        for i in range(1, n + 1):\n            if i not in s:\n                start = d[i]\n                s.add(l[start])\n                for j in range(start, n - 1):\n                    s.add(l[j])\n                    if l[j + 1] in s:\n                        break\n                    if l[j] + 1 != l[j + 1] and l[j + 1] not in s:\n                        f = False\n                        break\n            if not f:\n                break\n        if f:\n            print('Yes')\n        else:\n            print('No')", "def main_function():\n    from sys import stdin\n    from sys import stdout\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        considered_permutation = list(map(int, input().split()))\n        if n <= 2:\n            print('Yes\\n')\n            continue\n        ix_in_permutation = [0] * n\n        for i in range(n):\n            ix_in_permutation[considered_permutation[i] - 1] = i\n        count = [1] * n + [0]\n        max_count = 1\n        for i in range(n - 1):\n            if count[ix_in_permutation[i]] != max_count:\n                print('No\\n')\n                break\n            if count[ix_in_permutation[i] + 1] == 0:\n                max_count = 1\n            else:\n                max_count += 1\n                count[ix_in_permutation[i] + 1] += count[ix_in_permutation[i]]\n            count[ix_in_permutation[i]] = 0\n        else:\n            print('Yes\\n')\nmain_function()", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    d = {}\n    done = [0] * (n + 1)\n    end = n\n    for i in range(n):\n        d[arr[i]] = i + 1\n    poss = 1\n    def_nxt = 0\n    for i in range(1, n + 1):\n        pos = d[i]\n        if not def_nxt:\n            def_nxt = 1\n            next = pos + 1\n            while next == n + 1 or done[next]:\n                next -= 1\n                def_nxt = 0\n            if not done[pos]:\n                done[pos] = 1\n            else:\n                poss = 0\n                break\n        elif pos == next:\n            next = pos + 1\n            while next == n + 1 or done[next]:\n                next -= 1\n                def_nxt = 0\n        else:\n            poss = 0\n            break\n    if poss:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    P = list(map(int, input().strip().split()))\n    indexs = {P[i]: i for i in range(n)}\n    P.append(0)\n    t = 1\n    k = False\n    while True:\n        i = indexs[t]\n        while P[i] != 0:\n            if P[i + 1] != 0:\n                if P[i + 1] != P[i] + 1:\n                    k = True\n                    break\n                else:\n                    P[i] = 0\n                t += 1\n                i += 1\n            else:\n                P[i] = 0\n                t += 1\n                break\n        if k == True or t == n + 1:\n            break\n    if k == True:\n        print('No')\n    else:\n        print('Yes')", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    has = [0] * (n + 1)\n    m = n\n    i = 0\n    c = 1\n    while i < n:\n        aa = lis[i]\n        tmp = lis[i]\n        while i < n and aa == lis[i]:\n            aa += 1\n            i += 1\n        aa -= 1\n        if aa != m:\n            print('No')\n            c = 0\n            break\n        m = tmp - 1\n    if c:\n        print('Yes')", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    has = [0] * (n + 1)\n    m = n\n    i = 0\n    c = 1\n    while i < n:\n        aa = lis[i]\n        tmp = lis[i]\n        while i < n and aa == lis[i]:\n            aa += 1\n            i += 1\n        aa -= 1\n        if aa != m:\n            print('No')\n            c = 0\n            break\n        m = tmp - 1\n    if c:\n        print('Yes')", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    indexes = defaultdict()\n    occupied = [0] * n\n    for i in range(n):\n        indexes[arr[i]] = i\n    pref = -1\n    flag = True\n    for key in sorted(indexes):\n        if pref == -1:\n            occupied[indexes[key]] = 1\n            if indexes[key] == n - 1:\n                pref = -1\n            else:\n                pref = indexes[key] + 1\n        elif occupied[pref] == 1:\n            occupied[indexes[key]] = 1\n            if indexes[key] == n - 1:\n                pref = -1\n            else:\n                pref = indexes[key] + 1\n        elif pref != indexes[key]:\n            flag = False\n            break\n        else:\n            occupied[indexes[key]] = 1\n            if indexes[key] == n - 1:\n                pref = -1\n            else:\n                pref = indexes[key] + 1\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = {}\n    for i in range(n):\n        temp[a[i]] = i\n    cur = 1\n    fl = 1\n    while 1:\n        idx = temp[cur]\n        for i in range(idx, n):\n            if a[i] != cur + i - idx:\n                fl = -1\n                break\n        if fl == -1:\n            break\n        if idx == 0:\n            break\n        cur = a[n - 1] + 1\n        n = idx\n    if fl == -1:\n        print('No')\n    else:\n        print('Yes')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    D = {i: 0 for i in range(n)}\n    for i in range(n):\n        D[A[i] - 1] = i\n    X = [i for i in range(n)]\n    count = [1 for _ in range(n)]\n    p = 'Yes'\n    peak = n - 1\n    st = 0\n    for i in range(n):\n        if D[i] != peak:\n            if i != n - 1:\n                if D[i + 1] != D[i] + 1:\n                    p = 'No'\n        else:\n            peak = D[st] - 1\n            st = i + 1\n    print(p)"]