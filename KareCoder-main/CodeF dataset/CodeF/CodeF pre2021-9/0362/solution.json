["import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, m) = mints()\n    s = minp()\n    p = list(mints())\n    p.sort()\n    cnt = [0] * 26\n    A = ord('a')\n    j = 0\n    h = m + 1\n    for i in range(n):\n        while j < m and p[j] == i:\n            j += 1\n            h -= 1\n        cnt[ord(s[i]) - A] += h\n    print(' '.join(map(str, cnt)))\nfor i in range(mint()):\n    solve()", "import sys\nt = int(sys.stdin.readline().rstrip())\n\ndef solve(p, s):\n    a = [0] * 26\n    p = [x - 1 for x in p]\n    tracker = [0] * len(s)\n    tracker[-1] = 1\n    for i in p:\n        tracker[i] += 1\n    for i in range(len(tracker) - 2, -1, -1):\n        tracker[i] += tracker[i + 1]\n    for i in range(len(tracker)):\n        a[ord(s[i]) - ord('a')] += tracker[i]\n    print(' '.join([str(i) for i in a]))\nfor _ in range(t):\n    sys.stdin.readline()\n    s = sys.stdin.readline().rstrip()\n    p = [int(i) for i in sys.stdin.readline().rstrip().split()]\n    solve(p, s)", "def nButtonPresses(nMispresses, combo, charactersLastPressedRight):\n    storage = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in range(nMispresses + 1):\n        for j in range(charactersLastPressedRight[i], charactersLastPressedRight[i - 1]):\n            storage[combo[j]] += 1 + i\n    return ' '.join(map(str, storage.values()))\n\ndef testCase_1311c():\n    (comboLength, nMispresses) = map(int, input().split(' '))\n    combo = input()\n    charactersLastPressedRight = list(map(int, input().split(' ')))\n    charactersLastPressedRight.sort(reverse=True)\n    return (nMispresses, combo, charactersLastPressedRight + [0, comboLength])\ntestCases = (testCase_1311c() for x in range(int(input())))\ntuple((print(nButtonPresses(*testCase)) for testCase in testCases))", "def nButtonPresses(nMispresses, combo, charactersLastPressedRight):\n    storage = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in range(nMispresses + 1):\n        for j in range(charactersLastPressedRight[i], charactersLastPressedRight[i - 1]):\n            storage[combo[j]] += 1 + i\n    return ' '.join(map(str, storage.values()))\n\ndef testCase_1311c():\n    (comboLength, nMispresses) = map(int, input().split(' '))\n    combo = input()\n    charactersLastPressedRight = list(map(int, input().split(' ')))\n    charactersLastPressedRight.sort(reverse=True)\n    print(nButtonPresses(nMispresses, combo, charactersLastPressedRight + [0, comboLength]))\nfor x in range(int(input())):\n    testCase_1311c()", "def nButtonPresses(comboLength, nMispresses, combo, charactersLastPressedRight):\n    storage = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in range(nMispresses + 1):\n        for j in range(charactersLastPressedRight[i + 1], charactersLastPressedRight[i]):\n            storage[combo[j]] += 1 + i\n    return ' '.join(map(str, storage.values()))\n\ndef testCase_1311c():\n    (comboLength, nMispresses) = map(int, input().split(' '))\n    combo = input()\n    charactersLastPressedRight = list(map(int, input().split(' ')))\n    charactersLastPressedRight.sort(reverse=True)\n    return (comboLength, nMispresses, combo, [comboLength] + charactersLastPressedRight + [0])\ntestCases = (testCase_1311c() for x in range(int(input())))\ntuple((print(nButtonPresses(*testCase)) for testCase in testCases))", "from sys import stdin\nt = int(stdin.readline())\nz = [0] * t\nfor _ in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    s = stdin.readline()[:n]\n    p = list(map(int, stdin.readline().split()))\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    y = [0] * n\n    for i in range(m):\n        y[p[i] - 1] += 1\n    for i in range(n - 1, 0, -1):\n        y[i - 1] += y[i]\n    for i in range(n):\n        d[s[i]] += y[i] + 1\n    z[_] = ' '.join(map(str, d.values()))\nprint(*z, sep='\\n')", "from bisect import bisect_right\n\ndef solve(s, P):\n    P.sort()\n    L = len(P)\n    letters = [0] * 26\n    for i in range(len(s)):\n        letters[ord(s[i]) - ord('a')] += L - bisect_right(P, i) + 1\n    return letters\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    P = list(map(int, input().split()))\n    r = solve(s, P)\n    print(' '.join(map(str, r)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    mp = [0] * n\n    for value in p:\n        mp[value - 1] += 1\n    for i in range(n - 1, 0, -1):\n        mp[i - 1] += mp[i]\n    occ = [0] * 26\n    for i in range(len(s)):\n        occ[ord(s[i]) - ord('a')] += mp[i]\n        occ[ord(s[i]) - ord('a')] += 1\n    print(' '.join(list(map(str, occ))))", "import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    (n, m) = Read.list_int()\n    s = Read.string()\n    p = Read.list_int()\n    p.sort()\n    p.reverse()\n    t = {}\n    for i in p:\n        i_lcl = i - 1\n        if i_lcl in t:\n            t[i_lcl] += 1\n        else:\n            t[i_lcl] = 1\n    t[n - 1] = 1\n    res = {}\n    k = 0\n    for i in range(n - 1, -1, -1):\n        if i in t:\n            k += t[i]\n        if s[i] in res:\n            res[s[i]] += k\n        else:\n            res[s[i]] = k\n    res_s = []\n    for i in alp:\n        res_s.append(str(res[i]) if i in res else '0')\n    print(' '.join(res_s))\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "kk = int(input())\nfor _ in range(kk):\n    (n, k) = map(int, input().split())\n    sss = input()\n    cnt = [0] * n\n    for x in [int(x) - 1 for x in input().split()]:\n        cnt[x] += 1\n    ans = [0] * 26\n    carry = 0\n    for (i, c) in enumerate(sss[::-1]):\n        carry += cnt[n - 1 - i]\n        ans[ord(c) - ord('a')] += carry + 1\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    mp = [0] * n\n    for value in p:\n        mp[value - 1] += 1\n    for i in range(n - 1, 0, -1):\n        mp[i - 1] += mp[i]\n    occ = [0] * 26\n    for i in range(len(s)):\n        occ[ord(s[i]) - ord('a')] += mp[i]\n        occ[ord(s[i]) - ord('a')] += 1\n    print(' '.join(list(map(str, occ))))", "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nT = int(input())\nfor t in range(T):\n    res = {l: 0 for l in letters}\n    (n, m) = list(map(int, input().split()))\n    s = input()\n    p = list(map(int, input().split()))\n    error_dict = {}\n    nb_times = len(p) + 1\n    for pi in p:\n        r = error_dict.get(pi, 0)\n        error_dict[pi] = r + 1\n    for (i, letter) in enumerate(s):\n        nb_times -= error_dict.get(i, 0)\n        res[letter] += nb_times\n    r = [res[l] for l in letters]\n    p = ' '.join(map(str, r))\n    print(p)", "n = int(input())\nfor x in range(n):\n    (lengthA, lengthB) = [int(i) for i in input().split()]\n    a = input()\n    p = [int(i) for i in input().split()]\n    p.append(len(a))\n    alphabet = [0] * 26\n    temp = [0] * len(a)\n    for i in p:\n        temp[i - 1] += 1\n    for i in range(len(a) - 1, 0, -1):\n        temp[i - 1] += temp[i]\n    for i in range(len(temp)):\n        alphabet[ord(a[i]) - 97] += temp[i]\n    print(' '.join(map(str, alphabet)))", "(t, res) = (int(input()), '')\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    s = input()\n    suf = [0] * (n - 1) + [1]\n    for i in map(int, input().split()):\n        suf[i - 1] += 1\n    for i in range(n - 2, -1, -1):\n        suf[i] += suf[i + 1]\n    ans = [0] * 26\n    for i in range(n):\n        ans[ord(s[i]) - ord('a')] += suf[i]\n    for i in ans:\n        res += str(i) + ' '\n    res += '\\n'\nprint(res)", "from bisect import bisect_right as br\nI = lambda : map(int, input().split())\nk = {}\nfor i in range(97, 123):\n    k[chr(i)] = 0\nfor i in range(int(input())):\n    z = dict(k)\n    (n, m) = I()\n    s = input()\n    p = list(I())\n    p.sort()\n    r = ''\n    m += 1\n    for j in range(n):\n        z[s[j]] += m - br(p, j)\n    for i in z:\n        r += str(z[i]) + ' '\n    print(r)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, m, s, p):\n    dp = [0 for i in range(n + 1)]\n    dp[n] = 1\n    for i in range(m):\n        dp[p[i] - 1] += 1\n    for j in range(n - 1, -1, -1):\n        dp[j] += dp[j + 1]\n    ans = [0 for i in range(26)]\n    for k in range(n):\n        ans[ord(s[k]) - 97] += dp[k]\n    print(*ans)\nfor _ in range(int(input())):\n    (n, m) = get_int()\n    s = str(input())[:-1]\n    p = int_arr()\n    solve(n, m, s, p)", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    a = input()\n    x = list(map(int, input().split()))\n    x.sort()\n    y = [1] * n\n    p = 0\n    q = 0\n    while p < m:\n        while q <= x[p] - 1:\n            y[q] = m + 1 - p\n            q += 1\n        p += 1\n    d = {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'g': 7, 'f': 6, 'i': 9, 'h': 8, 'k': 11, 'j': 10, 'm': 13, 'l': 12, 'o': 15, 'n': 14, 'q': 17, 'p': 16, 's': 19, 'r': 18, 'u': 21, 't': 20, 'w': 23, 'v': 22, 'y': 25, 'x': 24, 'z': 26}\n    ans = [0] * 26\n    for r in range(n):\n        ans[d[a[r]] - 1] += y[r]\n    for k in range(26):\n        ans[k] = str(ans[k])\n    print(' '.join(ans))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    mp = [0] * n\n    for value in p:\n        mp[value - 1] += 1\n    for i in range(n - 1, 0, -1):\n        mp[i - 1] += mp[i]\n    occ = [0] * 26\n    for i in range(len(s)):\n        occ[ord(s[i]) - ord('a')] += mp[i]\n        occ[ord(s[i]) - ord('a')] += 1\n    print(' '.join(list(map(str, occ))))", "def solve(n, m, s, p):\n    s = list(s)\n    tmp = [1] * n\n    p.sort(key=lambda x: -x)\n    p = [el - 1 for el in p]\n    adder = 2\n    for el in p:\n        tmp[el] = adder\n        adder += 1\n    current = tmp[-1]\n    for i in range(n - 1, -1, -1):\n        current = max(current, tmp[i])\n        tmp[i] = current\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    result = [0 for el in alphabets]\n    for i in range(n):\n        result[ord(s[i]) - 97] += tmp[i]\n    return ' '.join(map(str, result))\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    result = solve(n, m, s, p)\n    print(result)", "from bisect import bisect_right\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().split())\n    s = str(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    lett = [0] * 26\n    ind = -1\n    n_pos = -1\n    for y in range(0, len(s)):\n        ind = ord(s[y]) - 97\n        n_pos = bisect_right(p, y)\n        lett[ind] += len(p) - n_pos + 1\n    print(' '.join((str(x) for x in lett)))", "T = int(input())\n\ndef solve():\n    [N, M] = list(map(int, input().split()))\n    S = input()\n    P = list(map(int, input().split()))\n    P = sorted(P)\n    count = {}\n    for i in range(26):\n        count[chr(ord('a') + i)] = 0\n    p_index = 0\n    for i in range(N):\n        while p_index < len(P) and P[p_index] <= i:\n            p_index += 1\n        count[S[i]] += 1 + (M - p_index)\n    ans = []\n    for i in range(26):\n        ans.append(str(count[chr(ord('a') + i)]))\n    return ' '.join(ans)\nfor _ in range(T):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    m = int(m)\n    n = int(n)\n    s = input()\n    p = list(map(int, input().split()))\n    ans = {'a': 0}\n    abjad = 'bcdefghijklmnopqrstuvwxyz'\n    for letter in abjad:\n        ans[letter] = 0\n    number = [0] * n\n    for pmem in p:\n        number[pmem - 1] += 1\n    number[-1] = 1\n    number_sum = sum(number)\n    for index in range(n):\n        ans[s[index]] += number_sum\n        number_sum -= number[index]\n    abjad = 'a' + abjad\n    answer = []\n    for letter in abjad:\n        answer.append(ans[letter])\n    answer = list(map(str, answer))\n    print(' '.join(answer))", "def solve2(a, b):\n    b.sort()\n    n = len(a)\n    b.append(n)\n    arr = [0 for i in range(n)]\n    ans = [0 for i in range(26)]\n    for i in b:\n        arr[i - 1] += 1\n    for j in range(n - 2, -1, -1):\n        arr[j] += arr[j + 1]\n    for i in range(len(arr)):\n        ans[ord(a[i]) - ord('a')] += arr[i]\n    return ans\nline = int(input())\nfor _ in range(line):\n    input()\n    a = input()\n    b = [int(i) for i in input().split(' ')]\n    print(*solve2(a, b))", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    t = II()\n    for _ in range(t):\n        (n, m) = MI()\n        s = SI()\n        pp = LI1()\n        pp.sort()\n        ans = [0] * 26\n        a = ord('a')\n        cnt = 1\n        for i in range(n - 1, -1, -1):\n            while pp and i == pp[-1]:\n                cnt += 1\n                pp.pop()\n            ans[ord(s[i]) - a] += cnt\n        print(*ans)\nmain()", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, m, s, p):\n    dp = [0] * (n + 1)\n    dp[n] = 1\n    for i in range(m):\n        dp[p[i] - 1] += 1\n    for j in range(n - 1, -1, -1):\n        dp[j] += dp[j + 1]\n    out = [0] * 26\n    for k in range(len(s)):\n        out[ord(s[k]) - 97] += dp[k]\n    print(*out)\nfor _ in range(int(input())):\n    (n, m) = get_int()\n    s = str(input())[:-1]\n    p = int_arr()\n    solve(n, m, s, p)", "from collections import deque as dd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    p.sort()\n    d = dd()\n    pre = 0\n    for i in range(m):\n        if p[i] != pre:\n            d.append((pre, p[i], m - i + 1))\n            pre = p[i]\n    d.append((pre, n, 1))\n    ans = [0] * 26\n    for i in range(len(d)):\n        (x, y, v) = d.pop()\n        for j in s[x:y]:\n            ans[ord(j) - 97] += v\n    print(' '.join((str(z) for z in ans)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    count = [0 for i in range(n)]\n    for i in range(m):\n        count[p[i] - 1] += 1\n    for i in range(n - 1, 0, -1):\n        count[i - 1] += count[i]\n    alpha = [0 for i in range(26)]\n    for i in range(n):\n        alpha[ord(s[i]) - ord('a')] += count[i] + 1\n    print(' '.join(map(str, alpha)))", "import string\nalph = list(string.ascii_lowercase)\nfrom bisect import bisect_right\n\ndef find_gt(a, x):\n    i = bisect_right(a, x)\n    return i\nt = int(input())\nfor _ in range(t):\n    d = {each: 0 for each in alph}\n    (n, m) = list(map(int, input().split()))\n    s = input()\n    p = sorted(list(map(int, input().split())))\n    for (i, ch) in enumerate(s):\n        temp = find_gt(p, i)\n        d[ch] += m + 1 - temp\n    print(' '.join(map(str, d.values())))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    p.sort()\n    a = []\n    c = m + 1\n    a.append(c)\n    i = 1\n    k = 0\n    while i < n - 1:\n        if k < m and i == p[k]:\n            c -= 1\n            k += 1\n        else:\n            a.append(c)\n            i += 1\n    b = [0 for j in range(26)]\n    for i in range(n - 1):\n        b[ord(s[i]) - 97] += a[i]\n    b[ord(s[n - 1]) - 97] += 1\n    u = list(map(str, b))\n    print(' '.join(u))", "from itertools import accumulate\nsc = iter(open(0).read().split())\nni = lambda : int(next(sc))\nns = lambda : next(sc)\nT = ni()\nfor _ in range(T):\n    (N, M) = (ni(), ni())\n    S = [ord(s) - ord('a') for s in ns()]\n    P = [ni() for _ in range(M)]\n    imos = [0] * N\n    imos[0] = M + 1\n    for p in P:\n        imos[p] -= 1\n    A = accumulate(imos)\n    ans = [0] * 26\n    for (s, a) in zip(S, A):\n        ans[s] += a\n    print(*ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = map(int, input().split())\n    (res, cnt, t) = ([0] * 26, [0] * n, 0)\n    for x in p:\n        cnt[x] += 1\n    for i in range(n - 1, -1, -1):\n        res[ord(s[i]) - ord('a')] += t\n        t += cnt[i]\n    for x in s:\n        res[ord(x) - ord('a')] += 1\n    print(' '.join(map(str, res)))", "get_int = lambda : int(input())\nget_mul_int = lambda : map(int, input().rstrip().split())\nget_list = lambda : list(map(int, input().rstrip().split()))\nTEST_CASES = True\n\ndef main():\n    (n, m) = get_mul_int()\n    s = input()\n    indices = get_list()\n    a = [0] * 26\n    b = [0] * n\n    for i in indices:\n        b[i - 1] += 1\n    cdf_count = 1\n    for i in range(n - 1, -1, -1):\n        cdf_count += b[i]\n        a[ord(s[i]) - 97] += cdf_count\n    print(*a)\nif not TEST_CASES:\n    main()\nelse:\n    [main() for _ in range(int(input()))]", "def nButtonPresses(nMispresses, combo, charactersLastPressedRight):\n    storage = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in range(nMispresses + 1):\n        for j in range(charactersLastPressedRight[i], charactersLastPressedRight[i - 1]):\n            storage[combo[j]] += 1 + i\n    print(*storage.values())\n\ndef testCase_1311c():\n    (comboLength, nMispresses) = map(int, input().split(' '))\n    combo = input()\n    charactersLastPressedRight = list(map(int, input().split(' ')))\n    charactersLastPressedRight.sort(reverse=True)\n    return (nMispresses, combo, charactersLastPressedRight + [0, comboLength])\ntestCases = (testCase_1311c() for x in range(int(input())))\nfor testCase in testCases:\n    nButtonPresses(*testCase)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * (n + 1)\n    ans = [0] * 26\n    s = list(input())\n    for x in list(map(int, input().split())):\n        l[x - 1] += 1\n    for x in range(n - 1, -1, -1):\n        l[x] += l[x + 1]\n    for x in range(n):\n        ans[ord(s[x]) - 97] += l[x] + 1\n    print(*ans)", "from collections import Counter\nfrom itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    nums = list(map(int, input().split()))\n    prefix = [0] * (n + 1)\n    for val in nums:\n        prefix[0] += 1\n        prefix[val] -= 1\n    prefix = list(accumulate(prefix))\n    ans = [0] * 26\n    for idx in range(n):\n        ans[ord(s[idx]) - 97] += prefix[idx] + 1\n    print(*ans)", "input = __import__('sys').stdin.readline\nprint = __import__('sys').stdout.write\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    alpha = [0 for _ in range(26)]\n    word = input()\n    word_ss = [1 for _ in range(n)]\n    kk = [0] + sorted(list(map(int, input().split())))\n    for (idx, idx2) in enumerate(range(k, 0, -1), 1):\n        if word_ss[kk[idx] - 1] == 1:\n            for j in range(kk[idx - 1], kk[idx]):\n                word_ss[j] += idx2\n    for i in range(n):\n        alpha[ord(word[i]) - 97] += word_ss[i]\n    for w in alpha:\n        print(f'{w} ')\n    print('\\n')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = list(input())\n    p = list(map(int, input().split()))\n    ans = [0] * 26\n    calS = [0] * n\n    calS[n - 1] = 1\n    p.sort()\n    for i in range(m - 1, -1, -1):\n        calS[p[i] - 1] += 1\n    add = 0\n    for i in range(n - 1, -1, -1):\n        add += calS[i]\n        ans[ord(s[i]) - 97] += add\n    print(*ans)", "t = int(input().strip())\nresult = []\nfor i in range(t):\n    letters = [0] * 26\n    x = list(map(int, input().strip().split()))\n    (n, m) = (x[0], x[1])\n    s = input().strip()\n    positions = list(map(int, input().strip().split()))\n    for k in s:\n        letters[ord(k) - ord('a')] += 1\n    helper = [0] * len(s)\n    letters2 = [0] * len(s)\n    for pos in positions:\n        helper[pos - 1] += 1\n    count = 0\n    for index in range(len(s) - 1, -1, -1):\n        count += helper[index]\n        letters[ord(s[index]) - ord('a')] += count\n    result.append(letters)\nfor i in result:\n    res = ''\n    for j in i:\n        res += str(j) + ' '\n    print(res[:-1])", "from collections import OrderedDict\nt = int(input())\nfor _ in range(t):\n    letters = OrderedDict(((l, 0) for l in 'abcdefghijklmnopqrstuvwxyz'))\n    (n_s, n_err) = map(int, input().split())\n    s = list(input())\n    errors = sorted(list(map(int, input().split())))\n    for (err_i, err) in enumerate(errors):\n        if err_i > 0:\n            for l in s[errors[err_i - 1]:err]:\n                letters[l] += n_err - err_i\n        else:\n            for l in s[:err]:\n                letters[l] += n_err\n    for l in s:\n        letters[l] += 1\n    print(' '.join((str(v) for (_, v) in letters.items())))", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\noutput = []\nt = ini()\nalpha = {}\nfor i in range(26):\n    alpha[chr(i + 97)] = 0\nfor _ in range(t):\n    (n, m) = inm()\n    s = ins()\n    p = sorted(inl())\n    prev = 0\n    b = alpha.copy()\n    for i in s:\n        b[i] += 1\n    for i in range(m):\n        for j in range(prev, p[i]):\n            b[s[j]] += m - i\n        prev = p[i]\n    output.append(b.values())\nfor i in output:\n    print(*i)", "def main(n, m, s, p):\n    count = [0] * 26\n    p.append(n)\n    log = [0] * n\n    c = 0\n    m = m + 1\n    for i in range(m):\n        log[p[i] - 1] += 1\n    for i in range(n):\n        if log[i] > 0:\n            c += log[i]\n            temp = m - c + log[i]\n            log[i] = temp\n            continue\n        log[i] = m - c\n    for i in range(n):\n        count[ord(s[i]) - 97] += log[i]\n    return count\nk = int(input())\nfor _ in range(k):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    res = main(n, m, s, p)\n    print(*res, sep=' ')", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, m) = ipl()\n    s = ip()\n    p = ipl()\n    h = [0] * n\n    for i in p:\n        if i < n:\n            h[i] -= 1\n    r = [0] * 26\n    c = m\n    for (e, i) in enumerate(s):\n        c += h[e]\n        r[alphal.index(i)] += 1 + c\n    for i in r:\n        print(i, end=' ')\n    print()\nt = ipn()\nfor _ in range(t):\n    solve()", "p = int(input())\nfor j in range(p):\n    res = [0] * 26\n    (n, m) = map(int, input().split())\n    s = input()\n    k = list(map(int, input().split()))\n    arr = [0] * len(s)\n    for i in k:\n        arr[i - 1] += 1\n    arr[-1] += 1\n    for i in range(len(s) - 2, -1, -1):\n        arr[i] += arr[i + 1]\n    for i in range(len(s)):\n        res[ord(s[i]) - 97] += arr[i]\n    print(*res)", "t = int(input())\nimport bisect\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = sorted(list(map(int, input().split())))\n    counter = [0] * 26\n    for i in range(1, n + 1):\n        counter[ord(s[i - 1]) - ord('a')] += m - bisect.bisect_left(p, i) + 1\n    print(*counter)", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    d = dd(int)\n    for i in p:\n        d[i] += 1\n    a = [0 for x in range(26)]\n    p = list(set(p))\n    p.sort()\n    arr = [0 for x in range(n)]\n    m += 1\n    ptr = 0\n    for i in range(n):\n        arr[i] = m\n        if m > 1 and p[ptr] - 1 == i:\n            m -= d[p[ptr]]\n            ptr += 1\n    for i in range(n):\n        a[ord(s[i]) - 97] += arr[i]\n    print(' '.join(map(str, a)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    a = [0 for i in range(26)]\n    p = list(map(int, input().split()))\n    d = [0 for i in range(n)]\n    for i in range(n):\n        a[ord(s[i]) - 97] += 1\n    for i in range(m):\n        d[p[i] - 1] += 1\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if c == 0 and d[i] == 0:\n            d[i] = 0\n        elif c == 0 and d[i] != 0:\n            c = d[i]\n        elif c != 0 and d[i] == 0:\n            d[i] = c\n        else:\n            d[i] = d[i] + c\n            c = d[i]\n    for i in range(n):\n        a[ord(s[i]) - 97] += d[i]\n    print(' '.join(map(str, a)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * n + [1]\n    ans = [0] * 26\n    s = list(input())\n    for x in list(map(int, input().split())):\n        l[x - 1] += 1\n    for x in range(n - 1, -1, -1):\n        l[x] += l[x + 1]\n    for x in range(n):\n        ans[ord(s[x]) - 97] += l[x]\n    print(*ans)", "a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\ncases = int(input())\nwhile cases > 0:\n    cases -= 1\n    (n, m) = map(int, input().split())\n    combo = input()\n    mis = list(map(int, input().split()))\n    mis.sort()\n    alpha = {}\n    freq = {}\n    for i in range(n + 1):\n        freq[i] = 0\n    for mistake in mis:\n        freq[mistake] += 1\n    for letter in a:\n        alpha[letter] = 0\n    value = 1\n    index = n - 1\n    while index >= 0:\n        value += freq[index + 1]\n        alpha[combo[index]] += value\n        index -= 1\n    answer = ''\n    for letter in a:\n        answer += str(alpha[letter])\n        answer += ' '\n    print(answer)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nalpha = {}\nfor i in range(26):\n    alpha[chr(i + 97)] = 0\nfor _ in range(t):\n    (n, m) = inm()\n    s = ins()\n    p = sorted(inl())\n    prev = 0\n    b = alpha.copy()\n    for i in s:\n        b[i] += 1\n    for i in range(m):\n        for j in range(prev, p[i]):\n            b[s[j]] += m - i\n        prev = p[i]\n    print(*b.values())", "def solve():\n    (n, m) = map(int, input().split())\n    s = input()\n    mistakes = list(sorted(map(int, input().split())))\n    res = [0] * 26\n    left = 0\n    for i in range(m):\n        for letter in s[left:mistakes[i]]:\n            res[ord(letter) - ord('a')] += m - i\n        left = mistakes[i]\n    for letter in s:\n        res[ord(letter) - ord('a')] += 1\n    print(*res)\nfor _ in range(int(input())):\n    solve()", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    s = input()\n    p = sorted(R()) + [n, 0]\n    r = [0] * 26\n    i = j = 0\n    for x in s:\n        i += 1\n        r[ord(x) - 97] += m + 1 - j\n        while i == p[j]:\n            j += 1\n    print(*r)", "from bisect import bisect_left as right\nt = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    p.sort()\n    ans = [0 for i in range(26)]\n    for i in range(n):\n        x = right(p, i + 1)\n        ans[ord(s[i]) - 97] += m - x + 1\n    print(*ans)", "def solve(s, n, m, arr, ans):\n    counts = [0] * (n + 1)\n    for i in arr:\n        counts[1] += 1\n        counts[i + 1] -= 1\n    counts.pop(0)\n    for i in range(1, n):\n        counts[i] += counts[i - 1]\n    for i in range(n):\n        counts[i] += 1\n    letters = [0] * 26\n    for i in range(n):\n        letters[ord(s[i]) - ord('a')] += counts[i]\n    ans.append(letters[:])\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (n, m) = map(int, input().split())\n        s = input()\n        arr = list(map(int, input().split()))\n        solve(s, n, m, arr, ans)\n    for i in ans:\n        for j in i:\n            print(j, end=' ')\n        print()\nmain()", "from collections import Counter\nsc = iter(open(0).read().split())\nni = lambda : int(next(sc))\nns = lambda : next(sc)\nT = ni()\nfor _ in range(T):\n    (N, M) = (ni(), ni())\n    S = [ord(s) - ord('a') for s in ns()]\n    P = [ni() - 1 for _ in range(M)]\n    P.append(N - 1)\n    C = Counter(P)\n    K = sorted(C.keys(), reverse=True)\n    ans = [0] * 26\n    k = K.pop()\n    cur = 0\n    for (i, s) in enumerate(S):\n        ans[s] += M + 1 - cur\n        if i == k:\n            cur += C[k]\n            if K:\n                k = K.pop()\n    print(*ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    s = input()\n    p = sorted(R()) + [n, 0]\n    r = [0] * 26\n    i = j = 0\n    for x in s:\n        i += 1\n        r[ord(x) - 97] += m + 1 - j\n        while i == p[j]:\n            j += 1\n    print(*r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = [int(i) for i in input().split()]\n    b.append(n)\n    c = [0] * 26\n    f = [0] * (n + 1)\n    for i in range(m + 1):\n        f[b[i] - 1] += 1\n    x = f[n]\n    for i in range(n - 1, -1, -1):\n        x += f[i]\n        c[ord(a[i]) - 97] += x\n    print(*c)", "t = int(input())\nfrom collections import Counter\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    S = input()\n    lengths = list(map(int, input().split()))\n    l = [0 for i in range(26)]\n    cnt = Counter(lengths)\n    prev = 1\n    times = []\n    for i in range(len(S) - 1, -1, -1):\n        prev += cnt[i + 1]\n        times.append(prev)\n    times = times[::-1]\n    dic = {chr(i): 0 for i in range(97, 97 + 26)}\n    for i in range(len(S)):\n        dic[S[i]] += times[i]\n    ans = []\n    for i in range(97, 97 + 26):\n        ans.append(str(dic[chr(i)]))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    p.sort()\n    j = 0\n    ans = [0] * 26\n    for i in range(n):\n        while j < m and p[j] < i + 1:\n            j += 1\n        ans[ord(s[i]) - 97] += m - j + 1\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    M = [int(i) for i in input().split()]\n    M.sort()\n    A = [0] * 26\n    j = 0\n    for i in range(n):\n        while j < m and M[j] < i + 1:\n            j += 1\n        A[ord(s[i]) - 97] += m + 1 - j\n    print(*A)", "for _ in range(int(input())):\n    (z, y) = map(int, input().split())\n    str1 = input()\n    (*li,) = map(int, input().split())\n    li.sort()\n    li += [z]\n    li1 = [0] * 26\n    x = 0\n    for i in range(y + 1):\n        a = li[i]\n        for j in str1[x:a]:\n            li1[ord(j) - 97] += y - i + 1\n        x = a\n    print(*li1)", "def solve(s, p):\n    (n, m) = (len(s), len(p))\n    cnt = [0] * n\n    for i in range(m):\n        cnt[p[i] - 1] += 1\n    cnt[-1] += 1\n    for i in range(n - 2, -1, -1):\n        cnt[i] += cnt[i + 1]\n    ans = [0] * 26\n    for i in range(n):\n        ans[ord(s[i]) - ord('a')] += cnt[i]\n    print(*ans, end=' ')\n    print()\n    return\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    s = input()\n    p = [int(x) for x in input().split()]\n    solve(s, p)", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    cnts = [0] * 26\n    p.sort()\n    index = 0\n    for (i, char) in enumerate(s):\n        while index < m and i > p[index] - 1:\n            index += 1\n        cnts[ord(char) - 97] += m - index + 1\n    print(*cnts)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    pl = list(map(int, input().split())) + [n + 1]\n    pl.sort()\n    d = [0] * 26\n    j = 0\n    i = 0\n    for x in s:\n        i += 1\n        d[ord(x) - 97] += m + 1 - j\n        while i == pl[j]:\n            j += 1\n    print(*d)", "import sys\nimport string\ninput = sys.stdin.readline\nfor tt in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    p.sort()\n    ans = [0] * n\n    st = 0\n    for i in range(m):\n        for j in range(st, p[i]):\n            ans[j] += m - i\n        st = p[i]\n    d = {c: 0 for c in string.ascii_lowercase}\n    for i in range(n):\n        d[s[i]] += ans[i] + 1\n    print(*d.values(), sep=' ')", "for _ in range(int(input())):\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    (n, m) = map(int, input().split())\n    s = input()\n    arr = sorted(list(map(int, input().split()))) + [n]\n    z = 0\n    for i in range(n):\n        while i > arr[z] - 1:\n            z = z + 1\n        d[s[i]] += m - z + 1\n    for i in d:\n        if i != 'z':\n            print(d[i], end=' ')\n        else:\n            print(d[i])", "from bisect import bisect_left as left\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = [int(i) for i in input().split()]\n    p.sort()\n    ans = [0] * 26\n    for i in range(n):\n        x = left(p, i + 1)\n        ans[ord(s[i]) - 97] += m - x + 1\n    print(*ans)", "import bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    l = [0] * 26\n    p = sorted(list(map(int, input().split())))\n    for i in range(1, n + 1):\n        j = bisect.bisect_left(p, i)\n        x = m - j + 1\n        l[ord(s[i - 1]) - 97] += x\n    print(*l)", "for _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    (combs, reps) = ([0] * 26, [0] * n)\n    s = input()\n    p = [int(i) for i in input().split()]\n    for i in range(m):\n        reps[p[i] - 1] += 1\n    reps[n - 1] = 1\n    for i in range(n - 1, 0, -1):\n        reps[i - 1] += reps[i]\n    for i in range(n):\n        combs[ord(s[i]) - 97] += reps[i]\n    print(*combs, sep=' ')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = list(map(int, input().split()))\n    an = [0] * 26\n    k = [0] * (n + 1)\n    k[0] = m + 1\n    for i in range(m):\n        k[b[i]] -= 1\n    an[ord(a[0]) - 97] = k[0]\n    for i in range(1, n):\n        k[i] += k[i - 1]\n        an[ord(a[i]) - 97] += k[i]\n    print(*an)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    m = list(map(int, input().split()))\n    p = [0] * n\n    for i in m:\n        p[i - 1] += 1\n    p[n - 1] += 1\n    for i in range(n - 2, -1, -1):\n        p[i] = p[i] + p[i + 1]\n    ans = [0] * 26\n    for i in range(n):\n        ans[ord(s[i]) - 97] += p[i]\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] * 26\n    s = input()\n    valid = list(map(int, input().split()))\n    valid.sort()\n    count = [0] * n\n    for i in valid:\n        count[i - 1] += 1\n    for i in range(n - 1, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(n):\n        a[ord(s[i]) - 97] += count[i] + 1\n    print(*a)", "for _ in range(int(input())):\n    (wL, am) = list(map(int, input().split()))\n    w = list(input())\n    fails = list(map(int, input().split()))\n    ans = [0] * 26\n    preAns = [0] * wL\n    for i in range(am):\n        preAns[fails[i] - 1] += 1\n    prePreAns = [0] * wL\n    prePreAns[-1] = 1\n    for i in range(wL - 2, -1, -1):\n        prePreAns[i] = prePreAns[i + 1] + preAns[i]\n    for i in range(wL):\n        ans[ord(w[i]) - 97] += prePreAns[i]\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    numberOfTimes = [0 for x in range(26)]\n    (n, m) = [int(x) for x in input().split()]\n    s = input()\n    mPs = [int(x) for x in input().split()]\n    mPs.append(len(s))\n    mPs = sorted(mPs)\n    m += 1\n    minimum = 0\n    for p in mPs:\n        maximum = p\n        for letter in s[minimum:maximum]:\n            numberOfTimes[ord(letter) - 97] += m\n        minimum = maximum\n        m -= 1\n    for num in numberOfTimes:\n        print(num, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    a = input()\n    string = input()\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    j = 0\n    lst = [0 for i in range(26)]\n    for i in range(len(string)):\n        while j < len(arr) and arr[j] < i + 1:\n            j += 1\n        lst[ord(string[i]) - 97] += len(arr) + 1 - j\n    print(*lst)", "import math\nfrom collections import *\n\ndef solve():\n    (n, m) = map(int, input().split())\n    s = input()\n    a = [int(i) for i in input().split()]\n    ans = [0 for i in range(n)]\n    for i in range(len(a)):\n        ans[a[i] - 1] += 1\n    for i in range(n - 1, 0, -1):\n        ans[i - 1] += ans[i]\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += ans[i] + 1\n    for i in range(ord('a'), ord('z') + 1):\n        if d.get(chr(i), 0) != 0:\n            print(d.get(chr(i), 0), end=' ')\n        else:\n            print(0, end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import Counter\nfrom sys import stdin\nN = int(stdin.readline().rstrip())\nfor i in range(N):\n    (n, m) = [int(x) for x in stdin.readline().rstrip().split()]\n    s = stdin.readline().rstrip()\n    p = [int(x) for x in stdin.readline().rstrip().split()]\n    cumsum = [0] * (n + 1)\n    cumsum[n] += 1\n    for j in p:\n        cumsum[j] += 1\n    for k in range(n - 1, 0, -1):\n        cumsum[k] += cumsum[k + 1]\n    ans = [0] * 26\n    for (ind, l) in enumerate(s):\n        ans[ord(l) - ord('a')] += cumsum[ind + 1]\n    for m in ans:\n        print(m, end=' ')\n    print('')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    a = [0] * n\n    for i in p:\n        a[i - 1] += 1\n    k = 1\n    result = [0] * 26\n    for i in range(n - 1, -1, -1):\n        k += a[i]\n        result[ord(s[i]) - ord('a')] += k\n    print(*result)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    n = input().split(' ')\n    n = list(map(int, n))\n    (a, b) = n\n    s = input()\n    m = input().split(' ')\n    m = list(map(int, m))\n    dic = {chr(x): 0 for x in range(ord('a'), ord('{'))}\n    mistake = []\n    for x in range(a):\n        mistake.append(0)\n    for x in m:\n        mistake[x - 1] += 1\n    err = 1\n    for x in range(1, a + 1):\n        if mistake[-x] != 0:\n            err += mistake[-x]\n        mistake[-x] = max(err, mistake[-x])\n    for x in range(a):\n        dic[s[x]] += mistake[x]\n    r = ''\n    for d in dic:\n        r += str(dic[d])\n        r += ' '\n    print(r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    cnts = [0] * 26\n    p.sort()\n    index = 0\n    for (i, char) in enumerate(s):\n        while index < m and i > p[index] - 1:\n            index += 1\n        cnts[ord(char) - 97] += m - index + 1 if index != m else 1\n    print(*cnts)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    m = list(map(int, input().split()))\n    p = [0] * n\n    for i in m:\n        p[i - 1] += 1\n    p[n - 1] += 1\n    for i in range(n - 2, -1, -1):\n        p[i] = p[i] + p[i + 1]\n    ans = [0] * 26\n    for i in range(n):\n        ans[ord(s[i]) - 97] += p[i]\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = tuple((int(i) for i in input().split(' ')))\n    s = [ord(i) for i in input()]\n    p = [int(i) for i in input().split(' ')]\n    numbers = [0 for i in range(n)]\n    max = 0\n    for i in range(m):\n        numbers[p[i] - 1] += 1\n        if p[i] > max:\n            max = p[i]\n    p = []\n    for i in range(max):\n        if numbers[i] > 0:\n            p += [i + 1]\n    letters = [0] * 26\n    l = 0\n    for i in range(n):\n        letters[s[i] - 97] += m + 1\n        if l < len(p) and i + 1 == p[l]:\n            m -= numbers[p[l] - 1]\n            l += 1\n    ans = []\n    for i in letters:\n        ans.append(str(i))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    given = input()\n    pos = [int(x) for x in input().split()]\n    pref = [0] * (n + 1)\n    for it in pos:\n        pref[0] += 1\n        pref[it] -= 1\n    cnt = [0] * 26\n    for i in range(n):\n        if i > 0:\n            pref[i] += pref[i - 1]\n        cnt[ord(given[i]) - 97] += pref[i] + 1\n    print(*cnt)", "testCases = int(input())\nfor _ in range(testCases):\n    (n, m) = map(int, input().split())\n    As = input()\n    Ps = list(map(int, input().split()))\n    Ps.append(n)\n    frequency = [0] * n\n    for mistakeIndex in Ps:\n        frequency[mistakeIndex - 1] += 1\n    for index in range(n - 2, -1, -1):\n        frequency[index] = frequency[index] + frequency[index + 1]\n    answer = [0] * 26\n    for index in range(n):\n        answer[ord(As[index]) - 97] += frequency[index]\n    print(*answer)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = sorted([int(x) for x in input().split()])\n    p.sort()\n    ans = [0 for i in range(26)]\n    for i in range(n):\n        x = bisect_left(p, i + 1)\n        ans[ord(s[i]) - 97] += m - x + 1\n    print(*ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = [int(i) for i in input().split()]\n    b.append(n)\n    c = [0] * 26\n    f = [0] * (n + 1)\n    for i in range(m + 1):\n        f[b[i] - 1] += 1\n    x = f[n]\n    for i in range(n - 1, -1, -1):\n        x += f[i]\n        c[ord(a[i]) - 97] += x\n    print(*c)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, m) = R()\n    s = input()\n    p = sorted(R()) + [n, 0]\n    r = [0] * 26\n    i = j = 0\n    for x in s:\n        i += 1\n        r[ord(x) - 97] += m + 1 - j\n        while i == p[j]:\n            j += 1\n    print(*r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    cnts = [0] * 26\n    p.sort()\n    index = 0\n    for (i, char) in enumerate(s):\n        while index < m and i > p[index] - 1:\n            index += 1\n        cnts[ord(char) - 97] += m - index + 1\n    print(*cnts)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    l = [0] * n\n    for i in p:\n        l[i - 1] += 1\n    l[n - 1] += 1\n    ans = [0] * 26\n    for i in range(n - 2, -1, -1):\n        l[i] = l[i + 1] + l[i]\n    for i in range(n):\n        ans[ord(s[i]) - 97] += l[i]\n    print(*ans)", "T = int(input())\nwhile T > 0:\n    T -= 1\n    (n, m) = map(int, input().split())\n    s = input()\n    d = [0 for i in range(n)]\n    d[n - 1] = 1\n    for i in map(int, input().split()):\n        d[i - 1] += 1\n    for i in range(n - 1, 0, -1):\n        d[i - 1] += d[i]\n    c = [0 for i in range(26)]\n    for i in range(n):\n        c[ord(s[i]) - 97] += d[i]\n    print(*c)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef pr_list(a):\n    print(*a, sep=' ')\n    return\n\ndef main():\n    t = inp()\n    for ti in range(t):\n        [n, m] = inlt()\n        in_str = insr()\n        p = inlt()\n        p.sort()\n        out = [0 for i in range(26)]\n        j = 0\n        itr = 0\n        while j < len(p):\n            end = p[j]\n            for i in range(itr, end):\n                out[ord(in_str[i]) - ord('a')] = out[ord(in_str[i]) - ord('a')] + len(p) - j\n            itr = end\n            j = j + 1\n        for i in in_str:\n            out[ord(i) - ord('a')] = out[ord(i) - ord('a')] + 1\n        pr_list(out)\n    return\nmain()", "for _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    (alpha, frequencies) = ([0] * 26, [0] * n)\n    s = input()\n    p = [int(i) for i in input().split()]\n    for i in range(m):\n        frequencies[p[i] - 1] += 1\n    frequencies[n - 1] = 1\n    for i in range(n - 1, 0, -1):\n        frequencies[i - 1] += frequencies[i]\n    for i in range(n):\n        alpha[ord(s[i]) - 97] += frequencies[i]\n    print(*alpha, sep=' ')", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    a = input()\n    l = list(map(int, input().split()))\n    p = [0] * n\n    pp = [0] * 26\n    for j in range(m):\n        p[l[j] - 1] += 1\n    x = p[n - 1]\n    for j in range(n - 2, -1, -1):\n        p[j] += x\n        x = p[j]\n    for j in range(n):\n        pp[ord(a[j]) - 97] += 1 + p[j]\n    print(*pp)\n    t -= 1"]