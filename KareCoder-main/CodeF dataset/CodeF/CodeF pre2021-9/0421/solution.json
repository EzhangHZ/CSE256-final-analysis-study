["import sys\n\ndef solve(n, a):\n    s = a[0]\n    min_ = min(a)\n    k_min = a.count(min_)\n    for i in range(1, n):\n        s &= a[i]\n    if min_ != s:\n        return '0'\n    fact = 1\n    for i in range(2, n - 1):\n        fact = fact * i % 1000000007\n    return str(k_min * (k_min - 1) * fact % 1000000007)\n\ndef main():\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    res = ''\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        sub_res = solve(n, a)\n        res += sub_res + '\\n'\n    print(res)\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        MOD = 1000000007\n        res = arr[0]\n        for i in arr:\n            res &= i\n        count = 0\n        for i in range(n):\n            if arr[i] == res:\n                count += 1\n        ans = count * (count - 1)\n        for i in range(2, n - 1):\n            ans = ans * i % MOD\n        get_print_int(ans)\nsolve()", "import collections\nimport sys\nimport math\ninput = sys.stdin.readline\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom functools import cmp_to_key\nfrom collections import defaultdict\nfrom collections import deque\nimport heapq\n\ndef solve():\n    t = int(input())\n    mod = 10 ** 9 + 7\n    while t:\n        t -= 1\n        n = int(input())\n        a = list(map(int, input().split()))\n        mn = min(a)\n        mp = defaultdict(int)\n        res = mn\n        for num in a:\n            mp[num] += 1\n            res &= num\n        if mp[mn] < 2 or res != mn:\n            print(0)\n            continue\n        fact = 1\n        for i in range(1, n - 1):\n            fact = fact * i % mod\n        ans = mp[mn] * (mp[mn] - 1) % mod\n        print(ans * fact % mod)\n\ndef main():\n    solve()\nmain()", "M = 10 ** 9 + 7\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    f = 1\n    for x in a:\n        k &= x\n    for i in range(2, len(a) - 1):\n        f = f * i % M\n    m = a.count(k)\n    print(m * (m - 1) * f % M)", "import math\nimport sys\n\ndef answer(n, a):\n    mn = min(a)\n    cmn = a.count(mn)\n    if cmn < 2:\n        return 0\n    mnperm = cmn * (cmn - 1)\n    mdperm = 1\n    if n - 2 > 0:\n        for i in range(2, n - 1):\n            mdperm = mdperm * i % (10 ** 9 + 7)\n    if mn == 0:\n        return mnperm * mdperm % (10 ** 9 + 7)\n    for i in range(n):\n        if a[i] & mn != mn:\n            return 0\n    return mnperm * mdperm % (10 ** 9 + 7)\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(sys.stdin.readline())\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, a))\n        t -= 1\n    return\nmain()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "from sys import stdin\ninput = stdin.readline\nmod = 10 ** 9 + 7\nfor test in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    bit = lst[0]\n    for i in lst[1:]:\n        bit &= i\n    x = lst.count(bit)\n    fact = 1\n    for i in range(2, n - 1):\n        fact = fact * i % mod\n    print(x * (x - 1) * fact % mod)", "from sys import stdin\ninput = stdin.readline\n\ndef f(a):\n    mod = 10 ** 9 + 7\n    bit = a[0]\n    for i in a[1:]:\n        bit &= i\n    a = list(map(lambda s: s - bit, a))\n    cntz = a.count(0)\n    if cntz == 0:\n        return 0\n    ans = cntz * (cntz - 1) % mod\n    for i in range(1, len(a) - 1):\n        ans = ans * i % mod\n    return ans\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(f(lst))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "import sys\n\ndef readnum():\n    input = sys.stdin.readline\n    a = list(map(int, input().split()))\n    return a\n\ndef printf(val):\n    sys.stdout.write(str(val) + '\\n')\n\ndef power(a, b, mod):\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    ans = power(a, b // 2, mod)\n    ans *= ans\n    if b % 2:\n        ans *= a\n    ans = ans % mod\n    return ans\nt = readnum()[0]\n\ndef factorial(n, start, skip, mod):\n    res = start\n    for i in range(1, n + 1):\n        if i == skip:\n            continue\n        res *= i\n        res = res % mod\n    return res\nfor _ in range(t):\n    n = readnum()[0]\n    arr = readnum()\n    res = arr[0]\n    for i in range(n):\n        res = res & arr[i]\n    m = sum([i == res for i in arr])\n    if m < 2:\n        print(0)\n    else:\n        print(factorial(n - 2, 1, None, 10 ** 9 + 7) * m * (m - 1) % (10 ** 9 + 7))", "inf = int(1000000000.0 + 7)\nfor s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    n = len(l)\n    a = max(l)\n    for i in l:\n        a &= i\n    c = l.count(a)\n    if c > 1:\n        v = 1\n        for i in range(2, n - 1):\n            v = v * i % inf\n        print(c * (c - 1) * v % inf)\n    else:\n        print(0)", "from os import path\nimport sys, time\nfrom math import ceil, floor, gcd, log, log2, factorial\nfrom collections import defaultdict, Counter, OrderedDict, deque\nfrom heapq import heapify, heappush, heappop\nfrom bisect import *\nfrom operator import mul\nfrom itertools import permutations\n(maxx, mod) = (float('inf'), int(1000000000.0 + 7))\n(localsys, start_time) = (0, time.time())\nif path.exists('input.txt'):\n    localsys = 1\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = a[0]\n    for i in a:\n        t &= i\n    (cnt, ans) = (a.count(t), 0)\n    ans += cnt * (cnt - 1) % mod\n    for i in range(n - 2, 0, -1):\n        ans = ans * i % mod\n    print(ans)\nif localsys:\n    print('\\n\\n\\nTime Elased :', time.time() - start_time, 'seconds')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport sys\nimport copy\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\np = 10 ** 9 + 7\n\ndef fact(n, p):\n    ans = 1\n    while n > 0:\n        ans = ans * n\n        ans %= p\n        n -= 1\n    return ans % p\nfor _ in range(int(input())):\n    n = int(input())\n    a = get_array()\n    ans = a[0]\n    for i in range(1, len(a)):\n        ans &= a[i]\n    cnt = a.count(ans)\n    if cnt < 2:\n        print(0)\n    else:\n        ans1 = cnt % p * ((cnt - 1) % p) % p\n        ans1 = ans1 * fact(n - 2, p) % p\n        print(ans1)", "import math\n\ndef solve(n, a):\n    cnt = 0\n    d = a[0]\n    for x in a[1:]:\n        d = d & x\n    for x in a:\n        if x == d:\n            cnt += 1\n    if cnt < 2:\n        return 0\n    base = cnt * (cnt - 1) % (7 + 10 ** 9)\n    for i in range(1, n - 1):\n        base = base * i % (7 + 10 ** 9)\n    return base\ntt = int(input())\nwhile tt > 0:\n    tt -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "from functools import reduce\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    MOD = int(1000000000.0 + 7)\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        ara = [int(x) for x in input().split()]\n        all_and = reduce(lambda x, y: x & y, ara)\n        count = 0\n        for num in ara:\n            if num == all_and:\n                count += 1\n        ans = count * (count - 1) % MOD\n        for i in range(n - 2):\n            ans = ans * (i + 1) % MOD\n        print(ans)\nmain()", "def fact(n):\n    p = 1\n    for j in range(1, n + 1):\n        p *= j\n        p %= 1000000007\n    return p\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    mi = min(lst)\n    c = lst.count(mi)\n    if c < 2:\n        print(0)\n    else:\n        lst.remove(mi)\n        lst.remove(mi)\n        e = 0\n        for j in lst:\n            if mi & j != mi:\n                e += 1\n                break\n        if e > 0:\n            print(0)\n        else:\n            a = c * (c - 1)\n            b = fact(n - 2)\n            ans = a * b\n            print(ans % 1000000007)", "for test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for x in a:\n        k = k & x\n    r = a.count(k)\n    r = r * (r - 1)\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "MOD = 7 + 10 ** 9\n\ndef nc2(a):\n    return int(a * (a - 1) / 2) % MOD\n\ndef fac(n):\n    if n <= 0:\n        return 1\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= MOD\n    return ans\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = arr.count(mn)\n    for i in arr:\n        if i & mn != mn:\n            print(0)\n            return\n    if mc < 2:\n        print(0)\n        return\n    ans = 2 * nc2(mc) * fac(n - 2) % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "def helper(nums):\n    mod = 1000000007\n    gand = nums[0]\n    for i in range(1, len(nums)):\n        gand = gand & nums[i]\n    k = nums.count(gand)\n    if k < 2:\n        return 0\n    res = k * (k - 1)\n    curr = len(nums) - 2\n    while curr > 1:\n        res = res * curr % mod\n        curr -= 1\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    print(helper(nums))", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nMOD = 10 ** 9 + 7\n\ndef nc2(a):\n    return int(a * (a - 1) / 2) % MOD\n\ndef fac(n):\n    if n <= 0:\n        return 1\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= MOD\n    return ans\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    m = min(a)\n    mc = a.count(m)\n    c = 0\n    for i in a:\n        if m & i == m:\n            c += 1\n    ans = 0\n    if c == n:\n        ans = 2 * nc2(mc) * fac(n - 2) % MOD\n    print(ans)", "for test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for x in a:\n        k = k & x\n    r = a.count(k)\n    r = r * (r - 1)\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "from math import factorial\nmod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = arr[0]\n    for i in range(n):\n        temp &= arr[i]\n    mn = arr.count(temp)\n    if mn < 2:\n        print(0)\n        continue\n    ans = mn * (mn - 1)\n    fs = 1\n    for i in range(2, n - 1):\n        fs = fs * i % mod\n    print(fs * ans % mod)", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ipn()\n    a = ipl()\n    m = a[0]\n    for i in a:\n        m &= i\n    r = a.count(m)\n    r *= r - 1\n    for i in range(1, n - 1):\n        r = r * i % mod\n    print(r % mod)\nt = ipn()\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nmv = 2 * 10 ** 5\nA1 = [1]\nv = 1\nfor i in range(1, mv + 1):\n    v = v * i % mod\n    A1.append(v)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    v = min(A)\n    cnt = 0\n    flag = 0\n    for i in range(n):\n        if A[i] == v:\n            cnt = cnt + 1\n        elif A[i] & v != v:\n            flag = 1\n            break\n    if cnt < 2 or flag == 1:\n        print(0)\n    else:\n        ans = cnt * (cnt - 1) % mod\n        ans = ans * A1[n - 2] % mod\n        print(ans)", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    f = 0\n    for i in range(n):\n        if m & a[i] != m:\n            f = 1\n            break\n    c = a.count(m)\n    if c == 1 or f:\n        print(0)\n    else:\n        ans = c * (c - 1) % mod\n        for i in range(n - 2, 0, -1):\n            ans = ans * i % mod\n        print(ans)", "MOD = 10 ** 9 + 7\n\ndef factorialModulo(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i % MOD\n    return f\n\ndef solve(A, n):\n    freq = {}\n    andProduct = A[0]\n    for a in A:\n        freq[a] = freq.get(a, 0) + 1\n        andProduct &= a\n    if andProduct in freq and freq[andProduct] > 1:\n        return freq[andProduct] * (freq[andProduct] - 1) * factorialModulo(n - 2) % MOD\n    else:\n        return 0\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    result = solve(A, n)\n    print(result)", "from collections import Counter\nimport math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        f = a[0]\n        for i in range(1, n):\n            f = f & a[i]\n        c = 0\n        for j in range(n):\n            if f == a[j]:\n                c += 1\n        if c == 0 or c == 1:\n            print(0)\n        else:\n            res = c * (c - 1)\n            for k in range(2, n - 1):\n                res *= k\n                if res > 1000000006:\n                    res = res % 1000000007\n            print(res)\nmain()", "m = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    l = tuple(map(int, input().split()))\n    a = l[0]\n    for i in l[1:]:\n        a &= i\n    t = l.count(a)\n    if t > 1:\n        p = 1\n        for i in range(2, n - 1):\n            p *= i\n            p %= m\n        s = t * (t - 1) * p % m\n        print(s)\n    else:\n        print(0)", "from collections import *\nmod = 7 + 10 ** 9\n\ndef fac(t):\n    ans = 1\n    for i in range(2, t + 1):\n        ans = ans * i % mod\n    return ans\n\ndef fun(t):\n    return t * (t - 1) // 2 % mod\nTT = int(input())\nfor y in range(TT):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 2:\n        if lst[0] == lst[1]:\n            print('2')\n        else:\n            print('0')\n        continue\n    ad = lst[0]\n    for i in range(n):\n        ad = ad & lst[i]\n    cnt = lst.count(ad)\n    if cnt < 2:\n        print('0')\n    else:\n        print(2 * fun(cnt) * fac(n - 2) % mod)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "def f(a):\n    mod = 10 ** 9 + 7\n    bit = a[0]\n    for i in a[1:]:\n        bit &= i\n    a = list(map(lambda s: s - bit, a))\n    cntz = a.count(0)\n    if cntz == 0:\n        return 0\n    ans = cntz * (cntz - 1) % mod\n    for i in range(1, len(a) - 1):\n        ans = ans * i % mod\n    return ans\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(f(lst))", "MOD = 7 + 10 ** 9\n\ndef nc2(a):\n    return int(a * (a - 1) / 2) % MOD\n\ndef fac(n):\n    if n <= 0:\n        return 1\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= MOD\n    return ans\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = arr.count(mn)\n    tp = 1\n    for i in range(n):\n        if arr[i] & mn != mn:\n            print(0)\n            return\n        if i + 1 <= n - 2:\n            tp *= i + 1\n            tp %= MOD\n    if mc < 2:\n        print(0)\n        return\n    ans = 2 * nc2(mc) * tp % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "def solution():\n    MOD = 7 + 10 ** 9\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    cnt = 0\n    temp = 1\n    for i in range(n):\n        if i + 1 <= n - 2:\n            temp = temp * (i + 1) % MOD\n        if arr[i] == mn:\n            cnt += 1\n        if arr[i] & mn != mn:\n            print(0)\n            return\n    if cnt < 2:\n        print(0)\n        return\n    ans = cnt * (cnt - 1)\n    ans = ans * temp % MOD\n    print(int(ans))\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "t = int(input())\n\ndef main(a):\n    a.sort()\n    cnt = 1\n    for e in a[1:]:\n        if e == a[0]:\n            cnt += 1\n        elif a[0] & e != a[0]:\n            return 0\n    if cnt < 2:\n        return 0\n    res = 1\n    for i in range(2, len(a) - 1):\n        res = res * i % 1000000007\n    res = res * (cnt - 1) % 1000000007\n    res = res * cnt % 1000000007\n    return res\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    print(main(a))", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for x in a:\n        k = k & x\n    r = a.count(k)\n    r = r * (r - 1)\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "mod = 1000000007\nfor _ in range(int(input())):\n    num_count = int(input())\n    nums = list(map(int, input().split()))\n    m = min(nums)\n    ct = nums.count(m)\n    if ct < 2 or any((n & m != m for n in nums)):\n        print(0)\n    else:\n        f = 1\n        for i in range(1, num_count - 1):\n            f = f * i % mod\n        ans = ct * (ct - 1) % mod\n        ans = ans * f % mod\n        print(int(ans))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "MOD = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    cnt = 0\n    ok = True\n    for i in range(n):\n        if mn & arr[i] != mn:\n            ok = False\n            break\n        if arr[i] == mn:\n            cnt += 1\n    if ok:\n        ans = cnt * (cnt - 1)\n        for i in range(2, n - 1):\n            ans = ans * i % MOD\n        print(ans % MOD)\n    else:\n        print(0)", "M = 10 ** 9 + 7\nf = [1]\nfor i in range(1, 4 ** 9):\n    f += (f[-1] * i % M,)\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = -1\n    for x in a:\n        k &= x\n    m = a.count(k)\n    print(m * (m - 1) * f[len(a) - 2] % M)", "def compute(n):\n    k = 1\n    for i in range(1, n - 2 + 1):\n        k *= i\n        k %= 1000000007\n    return k\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    p = s[0]\n    for i in range(len(s)):\n        p &= s[i]\n    cnt = s.count(p)\n    if cnt < 2:\n        print(0)\n    else:\n        print(cnt * (cnt - 1) * compute(n) % 1000000007)", "mod = 10 ** 9 + 7\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(n):\n        x &= a[i]\n    for i in range(n):\n        a[i] -= x\n    x = 0\n    for i in range(n):\n        if a[i] == 0:\n            x += 1\n    s = x * (x - 1) % mod\n    if x < 2:\n        print(0)\n    else:\n        x = 1\n        for i in range(1, n - 1):\n            x *= i\n            x %= mod\n        print(s * x % mod)\nt = int(input())\nfor i in range(t):\n    main()", "import math\n\ndef read_ints():\n    return [int(i) for i in input().split()]\n\ndef solve(nums):\n    res = nums[0]\n    potential_res = 10 ** 9 + 1\n    res_count = 0\n    for num in nums:\n        res = res & num\n        if res != potential_res:\n            potential_res = res\n            res_count = 0\n        if num == potential_res:\n            res_count += 1\n    res = res_count * (res_count - 1)\n    for i in range(1, len(nums) - 1):\n        res = res * i % (10 ** 9 + 7)\n    return res\nT = int(input())\nfor t in range(1, T + 1):\n    N = int(input())\n    nums = read_ints()\n    answer = solve(nums)\n    print('{1}'.format(t, answer))", "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        fact %= 10 ** 9 + 7\n    return fact\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mini = min(arr)\n    flag = True\n    c = 0\n    for j in range(len(arr)):\n        if arr[j] == mini:\n            c += 1\n        elif arr[j] & mini != mini:\n            flag = False\n    if c < 2 or not flag:\n        print(0)\n    else:\n        c = c % (10 ** 9 + 7)\n        print(c * (c - 1) * factorial(n - 2) % (10 ** 9 + 7))", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "for test in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "import bisect\nimport collections\nimport functools\nimport itertools\nimport math\nimport heapq\nimport random\nimport string\n\ndef repeat(_func=None, *, times=1):\n\n    def decorator(func):\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                func(*args, **kwargs)\n        return wrapper\n    if _func is None:\n        return decorator\n    else:\n        return decorator(_func)\n\ndef unpack(func=int):\n    return map(func, input().split())\n\ndef l_unpack(func=int):\n    return list(map(func, input().split()))\n\ndef getint():\n    return int(input())\n\ndef getmatrix(rows):\n    return [list(map(int, input().split())) for _ in range(rows)]\n\ndef display_matrix(mat):\n    for i in range(len(mat)):\n        print(mat[i])\n\n@repeat(times=int(input()))\ndef main():\n    n = getint()\n    arr = l_unpack()\n    m = min(arr)\n    cnt = arr.count(m)\n    flag = False\n    for c in arr:\n        if m & c == m:\n            continue\n        flag = True\n        break\n    if cnt < 2 or flag:\n        print(0)\n        return\n    ans = cnt * (cnt - 1) % MOD\n    for i in range(n - 2, 1, -1):\n        ans *= i\n        ans %= MOD\n    print(ans)\nMOD = 1000000007\nmain()", "mod = 10 ** 9 + 7\nimport math\n\ndef nPr(n, r):\n    return (n - 1) * n % mod\n\ndef modFact(n):\n    p = mod\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    an = ar[0]\n    for i in range(n):\n        an &= ar[i]\n    cnt = ar.count(an)\n    if cnt == 0:\n        print(0)\n        continue\n    fact = modFact(n - 2)\n    print(fact * nPr(cnt, 2) % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nd = a[0]\n    for i in range(1, n):\n        nd = nd & a[i]\n    r = a.count(nd)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "mod = int(1000000000.0 + 7)\n\ndef jc(n):\n    s = int(1)\n    for i in range(1, n + 1):\n        s *= i\n        s %= mod\n    return s\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    b = input()\n    a = [int(d) for d in b.split()]\n    k = a[0]\n    for i in a:\n        k &= i\n    m = int(0)\n    for i in a:\n        if i == k:\n            m = m + 1\n    f = int(jc(n - 2))\n    ans = int(m * (m - 1) % mod * f % mod)\n    print(ans)\n    t -= 1", "def fact(n, p):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % p\n    return ans\nfor _ in range(int(input())):\n    p = int(1000000000.0) + 7\n    n = int(input())\n    lis = list(map(int, input().split()))\n    a = lis[0]\n    for i in range(1, n):\n        a &= lis[i]\n    if a in lis and lis.count(a) > 1:\n        cnt = lis.count(a)\n        ans = cnt * (cnt - 1) % p\n        ans = ans * fact(n - 2, p) % p\n        print(ans)\n    else:\n        print(0)", "def solution():\n    MOD = 7 + 10 ** 9\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    cnt = 0\n    temp = 1\n    for i in range(n):\n        if i + 1 <= n - 2:\n            temp = temp * (i + 1) % MOD\n        if arr[i] == mn:\n            cnt += 1\n        if arr[i] & mn != mn:\n            print(0)\n            return\n    if cnt < 2:\n        print(0)\n        return\n    ans = cnt * (cnt - 1) * temp % MOD\n    print(ans)\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "for test in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "mod = 1000000007\n\ndef A(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i % mod\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    andres = a[0]\n    for i in a:\n        andres = andres & i\n    cnt = 0\n    for i in a:\n        if i == andres:\n            cnt += 1\n    if cnt < 2:\n        print(0)\n        continue\n    cnt = cnt % mod\n    print(cnt * (cnt - 1) * A(n - 2) % mod)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    k = a[0]\n    for x in a:\n        k &= x\n    r = a.count(k)\n    r *= r - 1\n    for i in range(2, len(a) - 1):\n        r = r * i % (10 ** 9 + 7)\n    print(r)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    an = a[0]\n    for i in a[1:]:\n        an &= i\n    c = a.count(an)\n    fact = 1\n    for i in range(2, n - 1):\n        fact = fact * i % 1000000007\n    print(c * (c - 1) * fact % 1000000007)", "from collections import Counter\nimport string\nimport math\nimport bisect\nimport sys\nfrom fractions import Fraction\n\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef vary(arrber_of_variables):\n    if arrber_of_variables == 1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables >= 2:\n        return map(int, sys.stdin.readline().split())\n\ndef makedict(var):\n    return dict(Counter(var))\nmod = 10 ** 9 + 7\nfact = [1]\nfor i in range(1, 2 * 10 ** 5 + 1):\n    fact.append(fact[-1] * i % mod)\ntestcases = vary(1)\nfor _ in range(testcases):\n    n = vary(1)\n    num = array_int()\n    xt = num[0]\n    for i in range(n):\n        xt &= num[i]\n    count = num.count(xt)\n    print(count * (count - 1) % mod * fact[n - 2] % mod)", "import sys\nimport math\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    val = min(data)\n    (cnt, flag) = (0, 0)\n    for item in data:\n        if val == item:\n            cnt += 1\n            continue\n        if val & item != val:\n            flag = 1\n            break\n    if flag:\n        print(0)\n        continue\n    ans = cnt * (cnt - 1)\n    for i in range(1, n - 1):\n        ans = ans * i % int(math.pow(10, 9) + 7)\n    print(ans)", "for _ in range(int(input())):\n    x = int(input())\n    zoop = list(map(int, input().split()))\n    mod = pow(10, 9) + 7\n    zz = min(zoop)\n    cont = True\n    cnt = 0\n    for i in range(len(zoop)):\n        if zoop[i] == zz:\n            cnt += 1\n        elif zoop[i] & zz != zz:\n            print(0)\n            cont = False\n            break\n    if cont:\n        fact = 1\n        for i in range(1, len(zoop) - 1):\n            fact *= i\n            fact %= mod\n        fact *= cnt * (cnt - 1)\n        fact %= mod\n        print(fact)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    m = l[0]\n    a = l[1]\n    for i in range(2, n):\n        a = a & l[i]\n    if a == m:\n        c = l.count(m)\n        if c == 1:\n            print(0)\n        else:\n            ans = 1\n            ans = c * (c - 1)\n            for i in range(n - 2):\n                ans = ans * (i + 1) % 1000000007\n            print(ans % 1000000007)\n    else:\n        print(0)", "import sys\nm = int(1000000000.0 + 7)\n\ndef npr(n, r):\n    x = 1\n    for i in range(n, n - r, -1):\n        x = x * i % m\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = sys.maxsize\n    for i in l:\n        x &= i\n    co = 0\n    for i in l:\n        if i == x:\n            co += 1\n    if co >= 2:\n        ans = npr(co, 2) * npr(n - 2, n - 2) % m\n        print(ans)\n    else:\n        print(0)", "mod = int(1000000000.0 + 7)\n\ndef fact(x):\n    f = 1\n    for i in range(2, x + 1):\n        f *= i\n        f %= mod\n    return f\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] != a[1]:\n        print(0)\n        continue\n    else:\n        tot = a.count(a[0])\n        t = 1\n        for i in range(2, n):\n            if a[0] & a[i] != a[0]:\n                t = 0\n                break\n        if t == 0:\n            print(0)\n        else:\n            res = int(fact(n - 2) * (tot * (tot - 1)))\n            res %= mod\n            print(res)", "mod = pow(10, 9) + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = arr[0]\n    for i in range(1, n):\n        val = val & arr[i]\n    val2 = arr.count(val)\n    if val2 < 2:\n        print(0)\n        continue\n    ans = val2 * (val2 - 1) % mod\n    fac = 1\n    for i in range(1, n - 1):\n        fac = fac * i % mod\n    ans = ans * fac % mod\n    print(ans)", "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, gcd\nimport bisect\nimport sys\nimport copy\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nf = [1] * 200001\nfor i in range(2, 200001):\n    f[i] = f[i - 1] * i % mod\nfor _ in range(int(input())):\n    n = int(input())\n    a = get_array()\n    and_all = a[0]\n    for i in range(1, n):\n        and_all = and_all & a[i]\n    cnt = a.count(and_all)\n    if cnt >= 2:\n        print(f[n - 2] * cnt * (cnt - 1) % mod)\n    else:\n        print(0)", "MOD = 7 + 10 ** 9\n\ndef nc2(a):\n    return int(a * (a - 1)) % MOD\n\ndef fac(n):\n    if n <= 0:\n        return 1\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= MOD\n    return ans\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = arr.count(mn)\n    tp = 1\n    for i in range(n):\n        if arr[i] & mn != mn:\n            print(0)\n            return\n        if i + 1 <= n - 2:\n            tp *= i + 1\n            tp %= MOD\n    if mc < 2:\n        print(0)\n        return\n    ans = mc * (mc - 1) * tp % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "MOD = 7 + 10 ** 9\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = 0\n    tp = 1\n    for i in range(n):\n        if arr[i] & mn != mn:\n            print(0)\n            return\n        if i + 1 <= n - 2:\n            tp *= i + 1\n            tp %= MOD\n        if arr[i] == mn:\n            mc += 1\n    if mc < 2:\n        print(0)\n        return\n    ans = mc * (mc - 1) * tp % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "def solution():\n    MOD = 7 + 10 ** 9\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    cnt = 0\n    same = True\n\n    def fact(a):\n        if a == 0:\n            return 1\n        else:\n            ans = 1\n            while a:\n                ans = ans * a % MOD\n                a -= 1\n            return ans\n    for i in range(n):\n        if arr[i] == mn:\n            cnt += 1\n        if arr[i] != mn:\n            same = False\n        if arr[i] & mn != mn:\n            print(0)\n            return\n    if same:\n        print(int(fact(n) % (7 + 10 ** 9)))\n        return\n    if cnt < 2:\n        print(0)\n        return\n    ans = cnt * (cnt - 1) * fact(n - 2) % (7 + 10 ** 9)\n    print(int(ans))\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "for __ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    x = ar[0]\n    for elem in ar:\n        x &= elem\n    num = 0\n    for elem in ar:\n        if elem == x:\n            num += 1\n    if num == 1:\n        print(0)\n    else:\n        MOD = 10 ** 9 + 7\n        ans = num * (num - 1)\n        for i in range(1, n - 1):\n            ans *= i\n            ans %= MOD\n        print(ans)", "MOD = 7 + 10 ** 9\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = 0\n    tp = 1\n    for i in range(n):\n        if arr[i] & mn != mn:\n            print(0)\n            return\n        if i + 1 <= n - 2:\n            tp *= i + 1\n            tp %= MOD\n        if arr[i] == mn:\n            mc += 1\n    if mc < 2:\n        print(0)\n        return\n    ans = mc * (mc - 1) * tp % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "import sys\nimport os.path\nif os.path.exists('input_file.txt'):\n    sys.stdin = open('input_file.txt', 'r')\n    sys.stdout = open('output_file.txt', 'w')\nmod = 1000000007\n\ndef factorial(a):\n    ans = 1\n    for i in range(1, a + 1):\n        ans = ans * i % mod\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (an, c) = (a[0], 0)\n    for i in a:\n        an &= i\n    for i in a:\n        if i == an:\n            c += 1\n    if c == 1 or c == 0:\n        print(0)\n    else:\n        if c == n:\n            ans = factorial(n) % mod\n        else:\n            ans = factorial(n - 2) * c * (c - 1) % mod\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    a = l[0]\n    for i in range(1, n):\n        a = a & l[i]\n    if l.count(a) == 1:\n        print(0)\n        continue\n    b = l.count(a)\n    b = b * (b - 1) % (10 ** 9 + 7)\n    for i in range(1, n - 1):\n        b = b * (i % (10 ** 9 + 7)) % (10 ** 9 + 7)\n    print(b)", "MOD = 7 + 10 ** 9\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    mc = 0\n    tp = 1\n    for i in range(n):\n        if i + 1 <= n - 2:\n            tp = tp * (i + 1) % MOD\n        if arr[i] == mn:\n            mc += 1\n        if arr[i] & mn != mn:\n            print(0)\n            return\n    if mc < 2:\n        print(0)\n        return\n    ans = mc * (mc - 1) * tp % MOD\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "t = int(input())\nfor ti in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    min_val = min(arr)\n    cnt = 0\n    ans = -1\n    for i in arr:\n        if min_val & i != min_val:\n            ans = 0\n            break\n        if i == min_val:\n            cnt += 1\n    if ans == 0 or cnt < 2:\n        print(0)\n        continue\n    ans = cnt * (cnt - 1)\n    mod = int(1000000000.0 + 7)\n    for i in range(n - 2, 1, -1):\n        ans = ans * i % mod\n    print(ans)", "MOD = 1000 * 1000 * 1000 + 7\n\ndef and_array(array):\n    result = array[0]\n    for i in range(1, len(array)):\n        result = result & array[i]\n    return result\n\ndef mul(a, b):\n    return a * b % MOD\n\ndef fact(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = mul(result, i)\n    return result\n\ndef _pow(a, p):\n    if p == 0:\n        return 1\n    if p == 1:\n        return a\n    if p % 2 == 1:\n        return mul(_pow(a, p - 1), a)\n    else:\n        result = _pow(a, p // 2)\n        return mul(result, result)\n\ndef solve(n, array):\n    _and = and_array(array)\n    _and_count = sum((1 if x == _and else 0 for x in array))\n    if _and_count < 2:\n        return 0\n    return mul(mul(_and_count, _and_count - 1), fact(n - 2))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        array = [int(x) for x in input().split()]\n        print(solve(n, array))\nmain()", "import math\nfrom operator import iand\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 1000000007\n    res = reduce(lambda x, y: x & y, a)\n    m = a.count(res)\n    k = 1\n    i = 1\n    while i < n - 1:\n        k = k * i % c\n        i += 1\n    k = k * m * (m - 1)\n    print(k % c)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    anda = a[0]\n    for j in range(1, n):\n        anda = anda & a[j]\n    c = 0\n    for j in range(n):\n        if a[j] == anda:\n            c = c + 1\n    if c == 0 or c == 1:\n        print('0')\n    else:\n        b = 1\n        for j in range(n - 2):\n            b = b * (j + 1) % 1000000007\n        b = b * c * (c - 1) % 1000000007\n        print(b)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    same = 0\n    p = l[0]\n    for i in range(1, n):\n        p = p & l[i]\n    if p != l[0] or l[0] != l[1]:\n        print(0)\n    else:\n        for i in range(n):\n            if l[i] == l[0]:\n                same += 1\n        z = n - 2\n        ans = 1\n        ans *= same\n        ans *= same - 1\n        ans = ans % 1000000007\n        for i in range(1, z + 1):\n            ans *= i\n            ans = ans % 1000000007\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    m = 10 ** 9 + 7\n    a = list(map(int, input().split()))\n    c = a[0]\n    for i in range(1, n):\n        c = c & a[i]\n    crr = 0\n    for i in range(n):\n        if a[i] == c:\n            crr += 1\n    if crr >= 2:\n        f = 1\n        for i in range(1, n - 1):\n            f *= i\n            f = f % m\n        f = f * (crr % m) * ((crr - 1) % m) % m\n        f = f % m\n        print(f)\n    else:\n        print(0)", "m = 10 ** 9 + 7\nfact = [0] * (2 * 10 ** 5 + 3)\nfact[0] = 1\nfact[1] = 1\nfor i in range(2, 2 * 10 ** 5 + 3):\n    fact[i] = i * fact[i - 1] % m\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    z = list(map(int, input().split()))\n    p = min(z)\n    c = 0\n    for i in z:\n        if i == p:\n            c += 1\n        if p & i != p:\n            print(0)\n            break\n    else:\n        ans = c * (c - 1) * fact[n - 2] % m\n        print(ans)", "M = 10 ** 9 + 7\nfact = [1] * (2 * 10 ** 5)\nfor i in range(1, len(fact)):\n    fact[i] = fact[i - 1] * i % M\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = arr[0] & arr[1]\n    for i in range(2, n - 1):\n        mn &= arr[i]\n    mn &= arr[-1]\n    dup = arr.count(mn)\n    if dup < 2:\n        print(0)\n        continue\n    print(fact[n - 2] * dup * (dup - 1) % M)\ndim = [1, 2, 3]\n\ndef index(*args):\n    m = dim[0]\n    s = args[-1]\n    j = 1\n    for i in args[-2::-1]:\n        s += m * i\n        m *= dim[j]\n        j += 1\n    return s", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = a[0]\n    for i in range(1, n):\n        summ &= a[i]\n    count = 0\n    for i in range(n):\n        if a[i] == summ:\n            count += 1\n    if count == 0 or count == 1:\n        print('0')\n    else:\n        ans = 1\n        for i in range(n - 2):\n            ans *= i + 1\n            ans %= 1000000007\n        ans *= count * (count - 1)\n        ans %= 1000000007\n        print(ans)", "def factorial(n):\n    prod = 1\n    for i in range(1, n + 1, 1):\n        prod = prod * i % 1000000007\n    return prod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    min = arr[0]\n    andprod = arr[0]\n    count = 1\n    for i in range(1, n, 1):\n        andprod = andprod & arr[i]\n        if arr[i] < min:\n            min = arr[i]\n            count = 1\n        elif arr[i] == min:\n            count = count + 1\n    if count < 2 or andprod != min:\n        print('0')\n    else:\n        sum = count * (count - 1) % 1000000007\n        sum = sum * factorial(n - 2) % 1000000007\n        print(sum)", "p = 10 ** 9 + 7\n\ndef modFact(n):\n    p = 10 ** 9 + 7\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict(Counter(a))\n    b = a[0]\n    for i in range(1, n):\n        b = b & a[i]\n    z = min(a)\n    if b != z or d[z] < 2:\n        print(0)\n    else:\n        k = d[z]\n        ans = k * (k - 1)\n        ans = ans * modFact(n - 2)\n        print(ans % p)", "factorials = [1] * 200001\nmod = 1000000007\nfor i in range(1, 200001):\n    factorials[i] = factorials[i - 1] % mod * i % mod % mod\nfrom math import comb\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    minnElement = min(arr)\n    k = arr.count(minnElement)\n    if k < 2:\n        print(0)\n        continue\n    else:\n        And = arr[0]\n        for i in range(1, n):\n            And &= arr[i]\n        if And == minnElement:\n            print(2 * (comb(k, 2) * factorials[n - 2]) % mod)\n        else:\n            print(0)\n            continue", "def li():\n    return [int(i) for i in input().split()]\n\ndef ii():\n    return int(input())\n\ndef bin32(num):\n    s = '{0:032b}'.format(num)\n    x = ''\n    for i in range(31, -1, -1):\n        x += s[i]\n    return x\nfact = [1]\nfac = 1\nMOD = 1000000007\nfor i in range(1, 200010):\n    fac = fac * i % MOD\n    fact.append(fac)\nINF = 100000000000000\nfor t in range(ii()):\n    n = ii()\n    a = li()\n    andd = a[0]\n    for i in a:\n        andd &= i\n    cnt = 0\n    for i in a:\n        if i == andd:\n            cnt += 1\n    print(cnt * (cnt - 1) * fact[n - 2] % MOD)", "t = int(input())\nfactorials = {}\nmodulo_value = 10 ** 9 + 7\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i % modulo_value\n    return fact % modulo_value\n\ndef combonations2(n):\n    return int(n * (n - 1) / 2)\n\ndef is_ok(n, array):\n    for i in array:\n        if i & n != n:\n            return False\n    return True\nfor _ in range(t):\n    n = int(input())\n    array = [int(a) for a in input().split(' ')]\n    d = dict()\n    for a in array:\n        if a not in d:\n            d[a] = 0\n        d[a] += 1\n    starters = []\n    for k in d:\n        if d[k] > 1:\n            starters.append([k, d[k]])\n    if len(starters) == 0:\n        print(0)\n        continue\n    internal_pemrutations = factorial(n - 2)\n    result = 0\n    for s in starters:\n        if is_ok(s[0], array):\n            result += combonations2(s[1])\n    print(2 * result * internal_pemrutations % modulo_value)", "t = int(input())\nmod = 10 ** 9 + 7\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    num = arr[0]\n    for i in range(n):\n        num = num & arr[i]\n    count = 0\n    for i in range(n):\n        if num ^ arr[i] == 0:\n            count += 1\n    if count == 1 or count == 0:\n        print(0)\n    else:\n        ans = count * (count - 1) % mod\n        for i in range(1, n - 1):\n            ans = ans * i % mod\n        print(ans)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    x = arr[0]\n    for i in range(n):\n        x = x & arr[i]\n    a = 0\n    if x != arr[0] or x != arr[1]:\n        print(0)\n    else:\n        for i in range(n):\n            if x == arr[i]:\n                a += 1\n        ans = a * (a - 1) % (10 ** 9 + 7)\n        for i in range(1, n - 1):\n            ans = ans * i % (10 ** 9 + 7)\n        print(ans)", "mod = 10 ** 9 + 7\ntemp = [1, 1]\nfor j in range(2, 2 * 10 ** 5 + 1):\n    temp.append(temp[-1] * j % mod)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = 0\n    total = l[0]\n    for j in range(1, n):\n        total = total & l[j]\n    val = l.count(total)\n    if val < 2:\n        print(0)\n        continue\n    for j in range(0, n):\n        if l[j] & total != total:\n            flag = 1\n            break\n    if flag == 1:\n        print(0)\n    else:\n        lol = val * (val - 1) % mod\n        final = lol * temp[n - 2] % mod\n        print(final)", "mod = 1000000007\ntm = 200005\nfact = [i for i in range(tm)]\nfor i in range(2, tm):\n    fact[i] = fact[i - 1] % mod * (fact[i] % mod) % mod\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    x = arr[0]\n    for i in range(1, n):\n        x = x & arr[i]\n    y = arr.count(x)\n    ot = n - 2\n    if y <= 1:\n        print(0)\n    elif y == 2:\n        if n == 2:\n            print(2)\n        else:\n            print(fact[ot] % mod * (2 % mod) % mod)\n    else:\n        sn = y * (y - 1)\n        print(fact[ot] % mod * (sn % mod) % mod)", "MOD = 10 ** 9 + 7\nfac = [1]\nfor i in range(2 * 10 ** 5):\n    fac.append(fac[-1] * (i + 1) % MOD)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ands = a[0]\n    put = 0\n    for i in range(1, n):\n        temp = ands & a[i]\n        if temp != ands:\n            put = -1\n            break\n    if a.count(a[0]) < 2 or put == -1:\n        print(0)\n        continue\n    if len(set(a)) == 1:\n        print(fac[n] % MOD % MOD)\n        continue\n    else:\n        x = a.count(a[0])\n        ans = x * (x - 1) % MOD\n        ans = ans % MOD * (fac[n - 2] % MOD) % MOD\n        print(ans % MOD)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    ans = 0\n    mod = int(1000000000.0 + 7)\n    s = a[0]\n    cnt = 0\n    for i in range(1, n):\n        s &= a[i]\n    for i in range(n):\n        if a[i] == s:\n            cnt += 1\n    if cnt < 2:\n        print(ans)\n        continue\n    ans = cnt * (cnt - 1) % mod\n    tmp = n - 2\n    while tmp > 0:\n        ans = ans * tmp % mod\n        tmp -= 1\n    print(ans)", "import math\nfrom collections import Counter\n\ndef most(List):\n    cnt = 0\n    occurence_count = dict(Counter(List))\n    for (k, v) in occurence_count.items():\n        if v >= 2:\n            cnt += v\n    return cnt\n\ndef most_frequent(List):\n    cnt = 0\n    occurence_count = Counter(List)\n    return occurence_count.most_common(1)[0][0]\nfac = [1]\nMOD = 10 ** 9 + 7\nfor i in range(2 * 10 ** 5):\n    fac.append(fac[-1] * (i + 1) % MOD)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ands = a[0]\n    put = 0\n    for i in range(1, n):\n        temp = ands & a[i]\n        if temp != ands:\n            put = -1\n            break\n    if n == 2:\n        if a[0] == a[1]:\n            print(2)\n        else:\n            print(0)\n        continue\n    if a.count(a[0]) < 2:\n        print(0)\n        continue\n    if put == -1:\n        print(0)\n        continue\n    if len(set(a)) == 1:\n        print(fac[n] % MOD % MOD)\n        continue\n    if a.count(0) >= 2:\n        x = a.count(0)\n        ans = x * (x - 1) % MOD\n        ans = ans % MOD * (fac[n - 2] % MOD) % MOD\n        print(ans % MOD)\n        continue\n    else:\n        x = a.count(a[0])\n        ans = x * (x - 1) % MOD\n        ans = ans % MOD * (fac[n - 2] % MOD) % MOD\n        print(ans % MOD)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\n\ndef rarray():\n    return [int(i) for i in input().split()]\nmod = 10 ** 9 + 7\nti = 1\nti = int(input())\nfor ii in range(ti):\n    n = int(input())\n    a = rarray()\n    s = (1 << 33) - 1\n    c = Counter(a)\n    for i in a:\n        s &= i\n    if c[s] >= 2:\n        ans = c[s] * (c[s] - 1) % mod\n        for i in range(n - 2):\n            ans = ans * (n - 2 - i) % mod\n        print(ans)\n    else:\n        print(0)", "from itertools import permutations as perm\nfrom collections import Counter\nLIM = 2 * 10 ** 5 + 10\nf = [1] * LIM\nMOD = 10 ** 9 + 7\nfor i in range(1, LIM):\n    f[i] = i * f[i - 1] % MOD\n\ndef check(li):\n    f = [li[0]]\n    for it in li[1:]:\n        f.append(f[-1] & it)\n    s = [li[-1]]\n    for it in li[-2::-1]:\n        s.append(s[-1] & it)\n    s.reverse()\n    for i in range(len(li) - 1):\n        if f[i] != s[i + 1]:\n            return False\n    return True\n\ndef get(p, arr):\n    li = [arr[ind] for ind in p]\n    return li\n\ndef brute(arr):\n    ln = len(arr)\n    ans = 0\n    for p in perm(range(ln)):\n        li = get(p, arr)\n        if check(li):\n            print(li)\n            ans += 1\n    print(ans)\n\ndef solve(A, n):\n    And = A[0]\n    for it in A[1:]:\n        And &= it\n    C = Counter(A)\n    c = C[And]\n    if c < 2:\n        return 0\n    ans = c * (c - 1) * f[n - 2] % MOD\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = solve(A, n)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    line = input()\n    line = line.split(' ')\n    nmin = 10 ** 10 + 100\n    count = 0\n    for num in line:\n        if int(num) <= nmin:\n            nmin = int(num)\n    invalid = False\n    for num in line:\n        if int(num) == nmin:\n            count += 1\n        if int(num) & nmin != nmin:\n            invalid = True\n            break\n    if invalid or count < 2:\n        print(0)\n        continue\n    mod = 10 ** 9 + 7\n    out = 1\n    for i in range(1, n - 1):\n        out = out * i % mod\n    ans = count * (count - 1) % mod\n    out = out * ans % mod\n    print(int(out))"]