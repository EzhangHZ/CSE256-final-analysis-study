["import sys\ninput = sys.stdin.readline\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    ans.append(str(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1))\nprint('\\n'.join(ans))", "def main():\n    (n, q, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        curr = k + a[r] - a[l] + 1 - 2 * (r - l + 1)\n        ans.append(str(curr))\n    print('\\n'.join(ans))\nmain()", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nans = []\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    ans.append(str(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1))\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin.readline\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1)", "import sys\ninput = sys.stdin.readline\n(n, q, k) = map(int, input().strip().split(' '))\na = list(map(int, input().strip().split(' ')))\n\ndef x():\n    (l, r) = map(int, input().strip().split(' '))\n    return a[l - 1] - 1 + k - a[r - 1] + 2 * (a[r - 1] - a[l - 1] - (r - l))\n[print(x()) for i in range(q)]", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\n(n, q, k) = get_ints()\nA = get_ints()\nfor i in range(q):\n    (l, r) = get_ints()\n    print(A[r - 1] - A[l - 1] + k - 2 * r + 2 * l - 1)", "import sys\ninput = sys.stdin.readline\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    print(2 * (k - (r - l + 1)) - (a[l] - 1 + k - a[r]))", "import sys\ninput = sys.stdin.readline\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    leng = r - l + 1\n    print(k - leng + a[r - 1] - a[l - 1] + 1 - leng)", "from sys import stdin\n\ndef gis():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef gi():\n    return int(input())\n(n, q, k) = gis()\nar = gis()\nfor qu in range(q):\n    (l, r) = gis()\n    l -= 1\n    r -= 1\n    print(k + ar[r] - ar[l] - 2 * (r - l) - 1)", "from sys import stdin, stdout\n(n, q, k) = [int(x) for x in stdin.readline().split()]\narray = [int(x) for x in stdin.readline().split()]\nfor i in range(0, q):\n    (l, r) = [int(x) for x in stdin.readline().split()]\n    if l == r:\n        print(k - 1)\n        continue\n    count = 0\n    print(array[r - 1] - array[l - 1] + (k + 1) - 2 * (r - l + 1))", "from sys import stdin\nfrom collections import Counter\nfrom math import pow, sqrt, factorial, log10, log\nfrom itertools import permutations, combinations, combinations_with_replacement\ninput = stdin.readline\n\ndef li():\n    return list(map(int, input().split()))\n\ndef mp():\n    return map(int, input().split())\n\ndef inp():\n    return int(input())\n\ndef pr(n):\n    return stdout.write(str(n) + '\\n')\nINF = float('inf')\n\ndef solve():\n    (n, q, k) = mp()\n    a = li()\n    for i in range(q):\n        cnt = 0\n        (l, r) = mp()\n        cnt += a[l - 1] - 1\n        cnt += k - a[r - 1]\n        cnt += 2 * (a[r - 1] - a[l - 1] + 1 - (r - l + 1))\n        print(cnt)\nt = 1\nfor i in range(t):\n    solve()", "from sys import stdin\ninput = stdin.readline\n\ndef similar(arr, k, q):\n    for (l, r) in q:\n        l -= 1\n        r -= 1\n        print(k + arr[r] - arr[l] + 1 - 2 * (r - l + 1))\n    return ''\n(a, b, c) = map(int, input().strip().split())\nblanck = []\nlst = list(map(int, input().strip().split()))\nfor i in range(b):\n    (x, y) = map(int, input().strip().split())\n    blanck.append([x, y])\nprint(similar(lst, c, blanck))", "import os, sys\n(n, q, k) = list(map(int, sys.stdin.readline().strip().split()))\nan = list(map(int, sys.stdin.readline().strip().split()))\nfor i in range(q):\n    qujian = list(map(int, sys.stdin.readline().strip().split()))\n    len_list = qujian[1] - qujian[0] + 1\n    start = an[qujian[0] - 1]\n    end = an[qujian[1] - 1]\n    temp = end - start - (len_list - 1)\n    number = k - len_list + temp\n    sys.stdout.write(str(number) + '\\n')", "import math\nimport sys\nimport collections\nimport bisect\nimport string\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(1):\n    (n, q, k) = get_ints()\n    arr = get_list()\n    for i in range(q):\n        (l, r) = get_ints()\n        if arr[r - 1] > k:\n            print(0)\n            continue\n        ans = k\n        ans += arr[r - 1] - arr[l - 1] + 1\n        ans -= 2 * (r - l + 1)\n        print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ps = [0] * n\n    curr = 0\n    for i in range(1, n - 1):\n        curr += arr[i] - arr[i - 1] - 1 + (arr[i + 1] - arr[i] - 1)\n        ps[i] = curr\n    for _ in range(q):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        if u == v:\n            print(k - 1)\n        else:\n            num = arr[u] - 1 + (arr[u + 1] - arr[u] - 1) + (arr[v] - arr[v - 1] - 1) + k - arr[v]\n            num += ps[v - 1] - ps[u]\n            print(num)\n    return\nsolve()", "(a, b, c) = map(int, input().split())\nli = [int(x) for x in input().split()]\nl = []\nfor i in range(b):\n    (a1, a2) = map(int, input().split())\n    t = c + 1 - 2 * (a2 - a1 + 1) + li[a2 - 1] - li[a1 - 1]\n    l.append(t)\nfor i in range(b):\n    print(l[i])", "lst = [int(x) for x in input().split()]\nn = lst[0]\nt = lst[1]\nk = lst[2]\narr = []\nlst = [int(x) for x in input().split()]\nwhile t:\n    input_arr = input()\n    arr.append(input_arr)\n    t -= 1\nsol = []\nfor a in arr:\n    (l, r) = a.split()\n    l = int(l)\n    r = int(r)\n    sol.append(k + lst[r - 1] - lst[l - 1] - 2 * (r - l) - 1)\nfor i in sol:\n    print(i)", "import sys, os\n(n, m, max_num) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nres = []\nfor i in range(int(m)):\n    (start, end) = [int(x) for x in input().split()]\n    temp_num = max_num + arr[end - 1] - arr[start - 1] - 2 * (end - start + 1) + 1\n    res.append(temp_num)\nfor item in res:\n    print(item)", "ab = input().split()\nn = int(ab[0])\nq = int(ab[1])\nk = int(ab[2])\na = [int(i) for i in input().split()]\nans = ''\nfor _ in range(q):\n    lr = input().split()\n    l = int(lr[0])\n    r = int(lr[1])\n    inv = 0\n    j = 0\n    if l == r:\n        ans += str(k - 1) + '\\n'\n    else:\n        ans += str(k + a[r - 1] - a[l - 1] - 2 * r + 2 * l - 1) + '\\n'\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * (n + 1)\n    for i in range(1, n):\n        p[i] = p[i - 1] + a[i] - a[i - 1] - 1\n    p[-1] = p[-2]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        s = 2 * (p[r - 1] - p[l - 1]) + (k - a[r - 1]) + (a[l - 1] - 1)\n        print(s)\nsolve()", "from sys import stdin, stdout\nimport sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n(n, q, k) = get_ints()\na = get_arr()\nprefix = []\nprefix.append(int(0))\nfor i in range(0, len(a) - 1):\n    prefix.append(a[i + 1] - a[i] - 1)\nfor i in range(1, len(prefix)):\n    prefix[i] = prefix[i - 1] + prefix[i]\nwhile q:\n    q -= 1\n    (l, h) = get_ints()\n    ans = 2 * (prefix[h - 1] - prefix[l - 1]) + a[l - 1] - 1 + k - a[h - 1]\n    print(ans)", "import sys\nimport itertools\ninput = sys.stdin.readline\n\ndef main():\n    (n, q, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = [0] + a + [k + 1]\n    b = [a[i + 1] - a[i - 1] - 2 for i in range(1, n + 1)]\n    b = [0] + b\n    c = list(itertools.accumulate(b))\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        ans = c[r] - c[l - 1]\n        ans += a[l + 1] - 2 - b[l]\n        ans += k + 1 - a[r - 1] - 2 - b[r]\n        print(ans)\nmain()", "(n, q, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nres = []\nfor i in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    res.append(a[r - 1] - a[l - 1] + (r - l + 1) * -2 + 1 + k)\nfor i in res:\n    print(i)", "def nr():\n    return nrs()[0]\n\ndef nrs():\n    return [int(i) for i in input().split()]\n\ndef f(k, a, b):\n    res = []\n    a = [0] + a\n    for (l, r) in b:\n        s0 = a[l] - 1\n        s1 = k - a[r]\n        s2 = 2 * (a[r] - a[l] - r + l)\n        res.append(s0 + s1 + s2)\n    return res\n(n, q, k) = nrs()\na = nrs()\nb = [nrs() for i in range(q)]\nfor item in f(k, a, b):\n    print(item)", "def nr():\n    return nrs()[0]\n\ndef nrs():\n    return [int(i) for i in input().split()]\n\ndef nrss(n):\n    return [nrs() for _ in range(n)]\n\ndef f(k, a, b):\n    res = []\n    for (l, r) in b:\n        l -= 1\n        r -= 1\n        s0 = a[l] - 1\n        s1 = k - a[r]\n        s2 = a[r] - a[l] - r + l\n        res.append(s0 + s1 + s2 + s2)\n    return res\n(n, q, k) = nrs()\na = nrs()\nb = nrss(q)\nfor item in f(k, a, b):\n    print(item)", "import math as m\n[n, q, k] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nquerys = []\nfor a in range(0, q):\n    querys.append([int(x) for x in input().split()])\ns = 0\nsums = [0]\ni = arr[0]\nfor j in arr[1:]:\n    s += 2 * (j - i - 1)\n    sums.append(s)\n    i = j\nk_1 = k - 1\nfor [l, r] in querys:\n    x = sums[r - 1] - sums[l - 1] + arr[l - 1] - arr[r - 1] + k_1\n    print(x)", "def query():\n    (l, r) = map(int, input().split())\n    l -= 1\n    length = r - l\n    return 2 * (k - length) - (original[l] - 1) - (k - original[r - 1])\nrez = []\n(n, q, k) = map(int, input().split())\noriginal = list(map(int, input().split()))\nfor i in range(q):\n    rez.append(query())\nfor r in rez:\n    print(r)", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(input())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    (n, q, k) = get_ints_in_variables()\n    arr = get_ints_in_list()\n    dis = []\n    dissum = []\n    for i in range(0, n):\n        dis.append(0)\n        dissum.append(0)\n    for i in range(0, n):\n        if i == 0:\n            if n != 1:\n                dis[i] = arr[1] - 2\n        if i != 0 and i != n - 1:\n            dis[i] = arr[i + 1] - arr[i - 1] - 2\n    dissum.append(0)\n    for i in range(0, n - 1):\n        dissum[i] = dissum[i - 1] + dis[i]\n    for _ in range(0, q):\n        (l, r) = get_ints_in_variables()\n        l -= 1\n        r -= 1\n        if l == r:\n            print(k - 1)\n        else:\n            ans = arr[l + 1] - 2 + k - arr[r - 1] - 1\n            ans += dissum[r - 1] - dissum[l]\n            print(ans)\nmain()", "def howManyKsimilar(n, q, k, queries):\n    lst = list()\n    for i in range(q):\n        l = queries[i][0]\n        r = queries[i][1]\n        lst.append(k + (a[r - 1] - a[l - 1] + 1) - 2 * (r - l + 1))\n    return lst\nl_1 = list(map(int, input().rstrip().split()))\nn = l_1[0]\nq = l_1[1]\nk = l_1[2]\na = list(map(int, input().rstrip().split()))\nqueries = list()\nfor i in range(q):\n    queries.append(list(map(int, input().rstrip().split())))\noutputs = list()\noutputs = howManyKsimilar(n, q, k, queries)\nfor i in outputs:\n    print(i)", "import sys, random, bisect\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush\nfrom math import gcd\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\npy = lambda : print('YES')\npn = lambda : print('NO')\n(n, q, k) = li()\narr = li()\nif n == 1:\n    for _ in range(q):\n        (l, r) = li()\n        print(k - 1)\nelse:\n    pre = [0]\n    for (i, a) in enumerate(arr):\n        if i == 0:\n            c = arr[i + 1] - 1 - 1\n        elif i == n - 1:\n            c = k - arr[i - 1] - 1\n        else:\n            c = arr[i + 1] - arr[i - 1] - 1 - 1\n        pre.append(pre[-1] + c)\n    for _ in range(q):\n        (l, r) = li()\n        if l == r:\n            print(k - 1)\n        elif r - l == 1:\n            print(arr[l] - 1 - 1 + (k - arr[r - 2] - 1))\n        else:\n            print(arr[l] - 1 - 1 + (pre[r - 1] - pre[l]) + (k - arr[r - 2] - 1))", "from sys import stdin\ninput = stdin.readline\n(n, q, k) = map(int, input().split())\na = [int(x) for x in input().split()]\na.insert(0, 0)\na.append(k + 1)\n(b, ps) = ([0], [0])\nfor x in range(n):\n    b.append(a[x + 2] - a[x] - 2)\nfor x in range(n):\n    ps.append(ps[-1] + b[x + 1])\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(k + ps[r - 1] - ps[l] + a[l + 1] - a[r - 1] - 3)", "import sys\nfrom itertools import accumulate\n(n, q, k) = map(int, sys.stdin.readline().strip().split())\na = list(map(int, sys.stdin.readline().strip().split()))\na = list(zip(a, [val - key - 1 for (key, val) in enumerate(a)]))\nfor _ in range(q):\n    (l, r) = map(int, sys.stdin.readline().strip().split())\n    l -= 1\n    r -= 1\n    print(a[l][0] - 1 + 2 * (a[r][1] - a[l][1]) + k - a[r][0])", "import math as m\n[n, q, k] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nquerys = []\nfor a in range(0, q):\n    querys.append([int(x) for x in input().split()])\ndiffs = []\ns = 0\nsums = [0]\ni = arr[0]\nfor j in arr[1:]:\n    diffs.append(j - i - 1)\n    s += j - i - 1\n    sums.append(s)\n    i = j\nfor [l, r] in querys:\n    x = 2 * (sums[r - 1] - sums[l - 1]) + (arr[l - 1] - 1) + (k - arr[r - 1])\n    print(x)", "from pprint import pprint\nimport sys\ninput = sys.stdin.readline\nimport itertools\n\ndef do():\n    squery = lambda a, b: sdat[b] - sdat[a]\n\n    def createSDAT(l):\n        return list(itertools.accumulate(itertools.chain([0], l)))\n    (n, q, k) = map(int, input().split())\n    dat = list(map(int, input().split()))\n    buf = [0] * n\n    if n == 1:\n        for i in range(q):\n            (l, r) = map(int, input().split())\n            print(k - 1)\n        return\n    for i in range(1, n - 1):\n        buf[i] = dat[i] - dat[i - 1] - 1 + (dat[i + 1] - dat[i] - 1)\n    buf[0] = dat[1] - dat[0] - 1\n    buf[n - 1] = dat[n - 1] - dat[n - 2] - 1\n    sdat = createSDAT(buf)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if l == r:\n            print(k - 1)\n            continue\n        res = 0\n        a = dat[l + 1] - 2\n        b = k - dat[r - 1] + 1 - 2\n        c = squery(l + 1, r)\n        print(a + b + c)\ndo()", "def simArray(n, q, k, array, interval_lst):\n    for i in range(q):\n        sim_count = 0\n        (inter_start, inter_end) = interval_lst[i]\n        inter_len = inter_end - inter_start + 1\n        sim_count = k - inter_len + array[inter_end - 1] - array[inter_start - 1] + 1 - inter_len\n        print(sim_count)\nline = list(map(int, input().split()))\n(n, q, k) = (line[0], line[1], line[2])\narray = list(map(int, input().split()))\ninterval_lst = []\nfor i in range(q):\n    line = list(map(int, input().split()))\n    interval_lst.append(line)\nsimArray(n, q, k, array, interval_lst)", "def howManyKsimilar(n, q, k, queries):\n    lst = list()\n    for i in range(q):\n        l = queries[i][0]\n        r = queries[i][1]\n        lst.append(k + (a[r - 1] - a[l - 1] + 1) - 2 * (r - l + 1))\n    return lst\nl_1 = list(map(int, input().rstrip().split()))\nn = l_1[0]\nq = l_1[1]\nk = l_1[2]\na = list(map(int, input().rstrip().split()))\nqueries = list()\nfor i in range(q):\n    queries.append(list(map(int, input().rstrip().split())))\noutputs = list()\noutputs = howManyKsimilar(n, q, k, queries)\nfor i in outputs:\n    print(i)", "import operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(a, a_res, k, l, r):\n    cur_res = 0\n    if len(a) > 2:\n        cur_res += a_res[r - 1] - a_res[l]\n    cur_res += a[l + 1] - 2\n    cur_res += k - a[r - 1] - 1\n    return cur_res\n\ndef main():\n    (n, q, k) = read_list_of_ints()\n    a = read_list_of_ints()\n    a_res = None\n    for _ in range(q):\n        (l, r) = read_list_of_ints()\n        l -= 1\n        r -= 1\n        if len(a) == 1 or l == r:\n            print(k - 1)\n            continue\n        if a_res is None:\n            a_res = [0 for el in a]\n            for i in range(1, len(a) - 1):\n                a_res[i] = a[i + 1] - a[i - 1] - 2\n                a_res[i] += a_res[i - 1]\n        cur_res = check_seq(a, a_res, k, l, r)\n        print(cur_res)\nmain()", "def new_count_k_lists(first, second, limit, i, j):\n    ans = second - first - 2 * j + 2 * i + limit - 1\n    return ans\ndata = input()\ndata = data.split(' ')\nnum_list = int(data[0])\ntrails = int(data[1])\nlimit = int(data[2])\ndata_list = input().split(' ')\nanswer_list = []\nfor x in range(trails):\n    numbers = input()\n    numbers = numbers.split(' ')\n    num_1 = int(numbers[0])\n    num_2 = int(numbers[1])\n    dif = num_2 - num_1\n    if dif == 0:\n        answer_list.append(limit - 1)\n        continue\n    answer = new_count_k_lists(int(data_list[num_1 - 1]), int(data_list[num_2 - 1]), limit, num_1, num_2)\n    answer_list.append(answer)\nfor s in answer_list:\n    print(s)", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\npl = lambda l: print(' '.join(list(map(str, l))))\n\ndef d(a):\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\nfrom itertools import accumulate\n(n, q, k) = rns()\na = rl()\nqs = []\nfor i in range(q):\n    qs.append(rl())\nls = [1]\nfor i in range(1, n - 1):\n    ls.append(a[i + 1] - a[i - 1] - 2)\nls.append(1)\npre = list(accumulate(ls))\nfor query in qs:\n    l = query[0] - 1\n    r = query[1] - 1\n    if l == r:\n        print(k - 1)\n    else:\n        ans = 1\n        if l == 0:\n            ans = a[1] - 2\n        else:\n            ans = a[l + 1] - 2\n        ans += pre[r - 1] - pre[l]\n        ans += k - a[r - 1] - 1\n        print(ans)", "answers = []\n\ndef solve(l, r, arr, req, n, k):\n    if l == r:\n        answers.append(k - 1)\n        return\n    if l == 1 and r == n:\n        answers.append(req[r - 1])\n    elif l == 1:\n        answers.append(req[r - 1] + k - arr[r - 1] - (arr[r] - arr[r - 1] - 1))\n    elif r == n:\n        answers.append(req[r - 1] - req[l - 2] + arr[l - 1] - 1 - (arr[l - 1] - arr[l - 2] - 1))\n    else:\n        answers.append(req[r - 1] - req[l - 2] + arr[l - 1] - 1 - (arr[l - 1] - arr[l - 2] - 1) + k - arr[r - 1] - (arr[r] - arr[r - 1] - 1))\n(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nsmaller = []\nlarger = []\nmid = []\nreq = []\nif n > 1:\n    req.append(arr[1] - 2)\nfor i in range(1, n - 1):\n    left = arr[i - 1] + 1\n    right = arr[i + 1] - 1\n    req.append(right - left)\nif n > 1:\n    req.append(k - 1 - arr[-2])\nlength = len(req)\nfor i in range(1, length):\n    req[i] += req[i - 1]\nwhile q:\n    (l, r) = [int(x) for x in input().split()]\n    solve(l, r, arr, req, n, k)\n    q -= 1\nfor ans in answers:\n    print(ans)", "(n, q, k) = input().split()\nn = int(n)\nq = int(q)\nk = int(k)\na = [0] + list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    print(k + a[r] - a[l] + 1 - 2 * r + 2 * l - 2)", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nqu = []\nfor i in range(q):\n    qu.append(list(map(int, input().split())))\nc = [0] * n\ne = [0] * n\nif n == 1:\n    c[0] = k - 1\nelse:\n    for i in range(n):\n        if i == 0:\n            c[0] = max(min(k, l[1]) - 2, 0)\n        elif i == n - 1:\n            c[n - 1] = max(k - l[n - 2] - 2, 0) + c[i - 1]\n        else:\n            c[i] = max(min(k, l[i + 1]) - l[i - 1] - 2, 0) + c[i - 1]\nfor i in qu:\n    lo = i[0] - 1\n    ri = i[1] - 1\n    if lo == ri:\n        print(k - 1)\n    else:\n        s = 0\n        s = max(min(l[lo + 1], k) - 2, 0)\n        s += max(k - min(l[ri - 1], k) - 1, 0)\n        s += c[ri - 1] - c[lo]\n        print(s)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor __ in range(q):\n    (l, r) = map(int, input().split())\n    print(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1)", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nqu = []\nfor i in range(q):\n    qu.append(list(map(int, input().split())))\nc = [0] * n\ne = [0] * n\nif n == 1:\n    c[0] = k - 1\nelse:\n    for i in range(n):\n        if i == 0:\n            c[0] = max(min(k, l[1]) - 2, 0)\n        elif i == n - 1:\n            c[n - 1] = max(k - l[n - 2] - 2, 0) + c[i - 1]\n        else:\n            c[i] = max(min(k, l[i + 1]) - l[i - 1] - 2, 0) + c[i - 1]\nfor i in qu:\n    lo = i[0] - 1\n    ri = i[1] - 1\n    if lo == ri:\n        print(k - 1)\n    else:\n        s = 0\n        s = max(min(l[lo + 1], k) - 2, 0)\n        s += max(k - min(l[ri - 1], k) - 1, 0)\n        s += c[ri - 1] - c[lo]\n        print(s)", "R = lambda : map(int, input().split())\n(n, q, k) = R()\na = (0, *R())\nfor _ in [0] * q:\n    (l, r) = R()\n    print(a[r] - a[l] + (l - r) * 2 + k - 1)", "import math\n\ndef getlist():\n    return [int(i) for i in input().split()]\n\ndef getmany():\n    return map(int, input().split())\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    (n, q, k) = getmany()\n    a = getlist()\n    for _ in range(q):\n        (l, r) = getmany()\n        print(a[r - 1] - a[l - 1] - 2 * (r - l) + k - 1)\nsolve()", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    res = k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1\n    print(res)", "(n, q, k) = map(int, input().split())\na = [0] + [int(i) for i in input().split()]\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(k + a[r] - a[l] + 1 - 2 * r + 2 * l - 2)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(k - (r - l + 1) + (a[r - 1] - a[l - 1] + 1 - (r - l + 1)))", "(n, q, k) = input().split()\nn = int(n)\nq = int(q)\nk = int(k)\nai = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = input().split()\n    l = int(l) - 1\n    r = int(r) - 1\n    print((ai[r] - ai[l] + 1 - (r - l + 1)) * 2 + ai[l] - 1 + k - ai[r])", "p = lambda : map(int, input().split())\n(n, q, k) = p()\na = (0, *p())\nfor _ in [0] * q:\n    (l, r) = p()\n    print(a[r] - a[l] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    x = arr[r - 1]\n    y = arr[l - 1]\n    ans = k + 1 + x - y - 2 * (r - l + 1)\n    print(ans)", "def find():\n    (n, q, k) = map(int, input().split())\n    masiv = list(map(int, input().split()))\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        s = 0\n        if l != r:\n            s = k + masiv[r - 1] - masiv[l - 1] - 2 * (r - l) - 1\n        else:\n            s += k - 1\n        print(s)\nfind()", "import math\n\ndef getlist():\n    return [int(i) for i in input().split()]\n\ndef getmany():\n    return map(int, input().split())\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    (n, q, k) = getmany()\n    a = getlist()\n    for _ in range(q):\n        (l, r) = getmany()\n        if l == r:\n            print(k - 1)\n        else:\n            print(a[r - 1] - a[l - 1] - 2 * (r - l) + k - 1)\nsolve()", "arr = [int(x) for x in input().split()]\n(n, q, k) = (arr[0], arr[1], arr[2])\na = [int(x) for x in input().split()]\nfor p in range(q):\n    (l, r) = input().split()\n    (l, r) = (int(l), int(r))\n    print(k - 1 - 2 * (r - l) + a[r - 1] - a[l - 1])", "(n, q, k) = map(int, input().split())\nli = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(k + li[r - 1] - li[l - 1] + 1 - 2 * (r - l + 1))", "(n, q, k) = input().split()\nn = int(n)\nq = int(q)\nk = int(k)\na = list(map(int, input().split()))\nl = []\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(a[r - 1] - a[l - 1] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\nnum = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(k + 1 + num[r - 1] - num[l - 1] - 2 * (r - l + 1))", "(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nfor t in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    sum = k + arr[r - 1] - arr[l - 1] - 2 * (r - l) - 1\n    print(sum)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(a[r - 1] - a[l - 1] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(str(k + a[r - 1] - a[l - 1] - 2 * (r - l) - 1))", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    s = k - 1 + a[r - 1] - a[l - 1] + 2 * (l - r)\n    print(s)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (li, ri) = map(int, input().split())\n    print(k + (a[ri - 1] - a[li - 1] + 1) - 2 * (ri - li + 1))", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nfor i in range(q):\n    (le, r) = map(int, input().split())\n    print(k + l[r - 1] - l[le - 1] - 2 * (r - le) - 1)", "R = lambda : map(int, input().split())\n(n, q, k) = R()\na = (0, *R())\nfor _ in [0] * q:\n    (l, r) = R()\n    print(a[r] - a[l] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    print(l[b - 1] - (b - a + 1) + (k - l[a - 1] - (b - a)))", "def nrs():\n    return [int(i) for i in input().split()]\n\ndef f(q, k, a):\n    for _ in range(q):\n        (l, r) = nrs()\n        l -= 1\n        r -= 1\n        s0 = a[l] - 1\n        s1 = k - a[r]\n        s2 = a[r] - a[l] - r + l\n        print(s0 + s1 + s2 + s2)\n(n, q, k) = nrs()\na = nrs()\nf(q, k, a)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(k + arr[r - 1] - arr[l - 1] - 2 * (r - l) - 1)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    x = arr[r - 1]\n    y = arr[l - 1]\n    ans = k + 1 + x - y - 2 * (r - l + 1)\n    print(ans)", "def func(l, p, q, c):\n    return l[q - 1] - l[p - 1] - (q - p) * 2 + c - 1\n(a, b, c) = input().split()\n(a, b, c) = (int(a), int(b), int(c))\nl = list(map(int, input().split()))\nfor i in range(b):\n    (p, q) = input().split()\n    (p, q) = (int(p), int(q))\n    print(func(l, p, q, c))", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    leng = r - l + 1\n    print(k - leng + a[r - 1] - a[l - 1] + 1 - leng)", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    print((l[b - 1] - l[a - 1] - 1) * 2 - (b - a - 1) * 2 + (l[a - 1] - 1) + (k - l[b - 1]))", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(a[r - 1] - a[l - 1] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    answer = k + 1 + a[r] - a[l] - 2 * (r - l + 1)\n    print(answer)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    ans = k - a[l] - (r - l) + a[r] - (r - l + 1)\n    print(ans)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    answer = k + 1 + a[r] - a[l] - 2 * (r - l + 1)\n    print(answer)", "(n, q, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor _ in range(q):\n    (l, r) = [int(x) - 1 for x in input().split()]\n    print(a[r] - a[l] + 2 * (l - r) + k - 1)", "(n, a, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nfor i in range(a):\n    (l, r) = map(int, input().split())\n    s = l1[r - 1] - l1[l - 1] + 1\n    c = k - (r - l + 1) + s - (r - l + 1)\n    print(c)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor Q in range(q):\n    (l, r) = map(int, input().split())\n    print(a[r - 1] - a[l - 1] + (l - r) * 2 + k - 1)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor Q in range(q):\n    (l, r) = map(int, input().split())\n    print(a[r - 1] - a[l - 1] + (l - r) * 2 + k - 1)", "(n, q, k) = [int(s) for s in input().split(' ')]\na = [int(s) for s in input().split(' ')]\nfor _ in range(q):\n    (l, r) = [int(s) for s in input().split(' ')]\n    ans = a[r - 1] - a[l - 1] + k - 1 - 2 * (r - l)\n    print(ans)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(k - (r - l + 1) + (a[r - 1] - a[l - 1] + 1 - (r - l + 1)))", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    print(arr[r - 1] - arr[l - 1] - 2 * (r - l) + k - 1)", "(n, q, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor i in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    if r - l + 1 == 1:\n        print(k - 1)\n        continue\n    else:\n        print(a[r - 1] + k + 1 - a[l - 1] - 2 * (r - l + 1))", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    x1 = arr[r - 1]\n    x2 = arr[l - 1]\n    ans = k + 1 + x1 - x2 - 2 * (r - l + 1)\n    print(ans)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(q):\n    p = list(map(int, input().split()))\n    l = p[0]\n    r = p[1]\n    print(a[l - 1] - 1 + (k - a[r - 1]) + 2 * (a[r - 1] - a[l - 1] - (r - l)))", "(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nfor t in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    sum = 0\n    sum += arr[l - 1] - 1\n    sum += (arr[r - 1] - arr[l - 1] - (r - l)) * 2\n    sum += k - arr[r - 1]\n    print(sum)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\ndp = [0]\nfor i in range(1, n):\n    dp.append(dp[i - 1] + arr[i] - arr[i - 1] - 1)\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    a = 2 * (dp[r - 1] - dp[l - 1])\n    b = k + arr[l - 1] - arr[r - 1] - 1\n    print(a + b)", "I = lambda : map(int, input().split())\n(n, q, k) = I()\na = list(I())\nfor _ in [0] * q:\n    (l, r) = I()\n    print(a[r - 1] - a[l - 1] + k + 1 - 2 * (r - l + 1))", "try:\n    (n, q, k) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    for i in range(0, q):\n        (l, r) = list(map(int, input().split(' ')))\n        print(k + 1 - (r - l + 1) * 2 + a[r - 1] - a[l - 1])\nexcept:\n    pass", "(n, q, k) = list(map(int, input().split()))\nar = list(map(int, input().split()))\nassert len(ar) == n\ncum = [k - 1]\nfor (prev, next_) in zip(ar[:-1], ar[1:]):\n    cum.append(cum[-1] - 1 + (next_ - prev - 1))\nfor _ in range(q):\n    (l, r) = list(map(int, input().split()))\n    print(cum[r - 1] - cum[l - 1] + (k - 1))", "t1 = [int(item) for item in input().split()]\n(n, q, k) = (t1[0], t1[1], t1[2])\na = [int(item) for item in input().split()]\nfor _ in range(q):\n    t2 = [int(item) for item in input().split()]\n    (x, y) = (t2[0], t2[1])\n    print(k + a[y - 1] - a[x - 1] - 2 * (y - x) - 1)", "def answer():\n    (left, right) = map(int, input().split())\n    print(a[left - 1] - 1 + k - a[right - 1] + 2 * (a[right - 1] - a[left - 1] + 1 - (right - left + 1)))\n(n, q, k) = map(int, input().split())\na = [int(i) for i in input().split()]\nfor _ in range(q):\n    answer()", "(n, q, k) = map(int, input().split())\na = [*map(int, input().split())]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    print(a[l - 1] - 1 + (k - a[r - 1]) + 2 * (a[r - 1] - a[l - 1] + 1 - (r - l + 1)))"]