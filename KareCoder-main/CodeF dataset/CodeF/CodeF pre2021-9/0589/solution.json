["import sys\nfrom math import gcd\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    vects = []\n    case = dict()\n    for _ in range(int(input())):\n        (x, y, u, v) = list(map(int, input().split()))\n        if x == u:\n            vect = (0, (v - y) // abs(v - y))\n        elif y == v:\n            vect = ((u - x) // abs(u - x), 0)\n        else:\n            g = gcd(x - u, v - y)\n            vect = ((u - x) // g, (v - y) // g)\n        if vect in case:\n            case[vect] += 1\n        else:\n            case[vect] = 1\n    s = 0\n    for ((a, b), val) in case.items():\n        s += val * case.get((-a, -b), 0)\n    print(s // 2)", "import sys, math\ninput = sys.stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = math.gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = {'infi': [0, 0]}\n    ans = 0\n    for nn in range(n):\n        (x, y, u, v) = map(int, input().split(' '))\n        if u - x == 0:\n            if v - y < 0:\n                d['infi'][0] += 1\n            else:\n                d['infi'][1] += 1\n        else:\n            s = (v - y) / (u - x)\n            if s not in d:\n                d[s] = [0, 0]\n            if u - x < 0:\n                d[s][0] += 1\n            else:\n                d[s][1] += 1\n    for i in d:\n        ans += d[i][0] * d[i][1]\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    (w, iota) = ([], [])\n    q = {}\n    for j in range(n):\n        w.append([int(k) for k in input().split()])\n        c = (w[-1][2] - w[-1][0], w[-1][3] - w[-1][1])\n        if c[0] == 0:\n            c = (0, c[1] // abs(c[1]))\n            iota.append(c)\n        elif c[1] == 0:\n            c = (c[0] // abs(c[0]), 0)\n            iota.append(c)\n        else:\n            y = gcd(c[0], c[1])\n            c = (c[0] // y, c[1] // y)\n            iota.append(c)\n        if c in q:\n            q[c] += 1\n        else:\n            q[c] = 1\n    res = 0\n    for j in iota:\n        if (-j[0], -j[1]) in q:\n            res += q[-j[0], -j[1]]\n    print(res // 2)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    cnt = Counter()\n    ans = 0\n    for (a, b, c, d) in A:\n        x = c - a\n        y = d - b\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        ans += cnt[-x, -y]\n        cnt[x, y] += 1\n    print(ans)", "t = int(input())\n\ndef gcd(a, b):\n    while a != 0:\n        (a, b) = (b % a, a)\n    return b\n\ndef solve():\n    n = int(input())\n    lookup = {}\n    for _ in range(n):\n        (x, y, u, v) = map(int, input().split())\n        x = x - u\n        y = y - v\n        g = gcd(abs(x), abs(y))\n        (x, y) = (x // g, y // g)\n        if (x, y) not in lookup:\n            lookup[x, y] = 0\n        lookup[x, y] += 1\n    ans = 0\n    s = set()\n    for (x, y) in lookup:\n        if (x, y) in s:\n            continue\n        else:\n            s.add((x, y))\n            if (-x, -y) in lookup:\n                ans += lookup[x, y] * lookup[-x, -y]\n                s.add((x, y))\n                s.add((-x, -y))\n    return ans\nwhile t:\n    t -= 1\n    ans = solve()\n    print(ans)", "import math\nfrom collections import defaultdict\nIP = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    ret = 0\n    dic = defaultdict(int)\n    n = int(input())\n    lst = [0] * n\n    for i in range(n):\n        lst[i] = IP()\n    for (x, y, u, v) in lst:\n        distance = ((u - x) ** 2 + (v - y) ** 2) ** 0.5\n        cosx = round((u - x) / distance, 11)\n        cosy = round((v - y) / distance, 11)\n        ret += dic[-cosx, -cosy]\n        dic[cosx, cosy] += 1\n    print(ret)", "import sys\nfrom collections import defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef ft(persons):\n    ctr = defaultdict(int)\n    ans = 0\n    for (x, y, u, v) in persons:\n        d = ((u - x) ** 2 + (v - y) ** 2) ** 0.5\n        nx = round((u - x) / d, 10)\n        ny = round((v - y) / d, 10)\n        ans += ctr[-nx, -ny]\n        ctr[nx, ny] += 1\n    return ans\ninput = load_sys()\nidx = 1\nwhile idx < len(input):\n    N = int(input[idx].strip())\n    idx += 1\n    case = []\n    for j in range(N):\n        input[idx + j] = input[idx + j].split()\n        case.append([int(x) for x in input[idx + j]])\n    print(ft(case))\n    idx += N"]