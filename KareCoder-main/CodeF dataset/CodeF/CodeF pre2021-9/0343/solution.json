["def nFreeTablesMax(lengthOfTables, distance, tables):\n    space = distance + 1\n    iFirst = tables.find('1')\n    if iFirst == -1:\n        return 1 + (lengthOfTables - 1) // space\n    iLast = tables.rfind('1')\n    return sum(map(lambda x: max(len(x) - distance, 0) // space, tables[iFirst + 1:iLast].split('1'))) + iFirst // space + (lengthOfTables - 1 - iLast) // space\n\ndef testCase_1367c():\n    return (*map(int, input().split(' ')), input())\nnTestCases = int(input())\ntestCases = tuple((testCase_1367c() for testCase in range(nTestCases)))\n[print(nFreeTablesMax(*testCase)) for testCase in testCases]", "import math\n\ndef get_gaps(binary_str, k):\n    gaps = []\n    prev = -1\n    for (i, bit) in enumerate(binary_str):\n        if bit == '1':\n            diff = i - prev - 1\n            if prev == -1:\n                diff += k\n            gaps.append(diff)\n            prev = i\n    if prev != len(binary_str) - 1:\n        if prev == -1:\n            gaps.append(len(binary_str) + 2 * k)\n        else:\n            gaps.append(len(binary_str) - prev - 1 + k)\n    return gaps\n\ndef count_inversions(binary_str, k):\n    gaps = get_gaps(binary_str, k)\n    count = 0\n    for gap in gaps:\n        if gap >= 2 * k + 1:\n            count += math.ceil((gap - 2 * k) / (k + 1))\n    return count\nresults = []\nfor _ in range(int(input())):\n    (n, k) = [int(e) for e in input().split(' ')]\n    binary_str = input()\n    results.append(str(count_inversions(binary_str, k)))\nprint('\\n'.join(results))", "list_ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = '1' + '0' * k + input() + '0' * k + '1'\n    list1 = s.split('1')\n    ans = 0\n    for x in list1:\n        ans += max((len(x) + 1) // (k + 1) - 1, 0)\n    list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    (n, k) = I()\n    a = input()\n    if '1' in a:\n        x = a.index('1')\n        y = n - 1 - a[::-1].index('1')\n        ss = x // (k + 1) + (n - 1 - y) // (k + 1)\n        if x != y:\n            st = 0\n            j = k + 1\n            for i in a[x + k + 1:y + 1]:\n                if i == '1':\n                    ss = ss + (j - st - k - 1) // (k + 1)\n                    st = j\n                j = j + 1\n    else:\n        ss = (n - 1) // (k + 1) + 1\n    print(ss)", "import sys\n\ndef answer(n, k, s):\n    num_zeros = k\n    cnt = 0\n    for i in range(n):\n        if s[i] == '0':\n            num_zeros += 1\n            if num_zeros >= 2 * k + 1:\n                cnt += 1\n                num_zeros = k\n        else:\n            num_zeros = 0\n    num_zeros += k\n    if num_zeros >= 2 * k + 1:\n        cnt += 1\n    return cnt\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = [int(i) for i in sys.stdin.readline().split()]\n        s = sys.stdin.readline().rstrip()\n        print(answer(n, k, s))\n        t -= 1\n    return\nmain()", "import sys\n\ndef solve(n: int, k: int, s: str) -> str:\n    text = s.strip()\n    result = 0\n    available = text.split('1')\n    try:\n        for (i, av) in enumerate(available):\n            if len(av) < 1:\n                continue\n            if i == 0:\n                av = '0' * k + av\n            if i == len(available) - 1:\n                av = av + '0' * k\n                pass\n            l = k + 1\n            remainder = len(av) % l\n            if remainder < k:\n                result += len(av) // l - 1\n            else:\n                result += len(av) // l\n    except IndexError:\n        pass\n    return result\nN = int(sys.stdin.readline())\nfor i in range(N):\n    t = sys.stdin.readline()\n    (n, k) = t.strip().split()\n    s = sys.stdin.readline()\n    print(solve(int(n), int(k), s))", "n = int(input())\nr = [0] * n\nfor i in range(n):\n    (size, k) = map(int, input().split())\n    cont = 0\n    ultimo_1 = 0\n    string = input()\n    if string[0] == '0':\n        cont += 1\n        ultimo_1 = 0\n    for j in range(1, size):\n        if string[j] == '1':\n            if j - ultimo_1 - k <= 0:\n                cont -= 1\n            ultimo_1 = j\n        elif j - ultimo_1 - k > 0:\n            cont += 1\n            ultimo_1 = j\n    r[i] = cont\nfor c in r:\n    print(c)", "def solve():\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    a = list(input())\n    b = []\n    num = 0\n    ans = 0\n    for i in range(n):\n        if a[i] == '1':\n            b.append(i)\n            num += 1\n    if num == 0:\n        if n % (k + 1) == 0:\n            ans = n // (k + 1)\n        else:\n            ans = n // (k + 1) + 1\n    else:\n        ans += b[0] // (k + 1)\n        for i in range(num - 1):\n            for j in range(b[i], b[i + 1], k + 1):\n                if j == b[i]:\n                    continue\n                elif b[i + 1] - j - 1 < k:\n                    continue\n                else:\n                    ans += 1\n        ans += (n - b[num - 1] - 1) // (k + 1)\n    print(ans)\nt = eval(input())\nfor i in range(t):\n    solve()", "def nFreeTablesMax(distance, tables):\n    nextStart = distance + 1\n    locationOfOccupiedTable = tables[:nextStart].rfind('1')\n    nFreeTables = 0\n    while tables:\n        if locationOfOccupiedTable == -1:\n            nFreeTables += 1\n            tables = tables[nextStart:]\n        else:\n            tables = tables[locationOfOccupiedTable + nextStart:]\n        locationOfOccupiedTable = tables[:nextStart].rfind('1')\n    return nFreeTables\n\ndef nFreeTablesMax2(lengthOfTables, distance, tables):\n    space = distance + 1\n    (iFirst, iLast) = (tables.find('1'), tables.rfind('1'))\n    if iFirst == -1:\n        return 1 + (lengthOfTables - 1) // space\n    return sum(map(lambda x: max(len(x) - distance, 0) // space, tables[iFirst + 1:iLast].split('1'))) + iFirst // space + (lengthOfTables - 1 - iLast) // space\n\ndef testCase_1367c():\n    return (*map(int, input().split(' ')), input())\nnTestCases = int(input())\ntestCases = tuple((testCase_1367c() for testCase in range(nTestCases)))\n[print(nFreeTablesMax2(*testCase)) for testCase in testCases]", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, k, s):\n    s = ('0' * k + s + '0' * k).split('1')\n    ans = 0\n    for i in s:\n        ans += (len(i) - k) // (k + 1)\n    print(ans)\nfor _ in range(int(input())):\n    (n, k) = get_int()\n    s = str(input())[:-1]\n    solve(n, k, s)", "import sys\n\ndef solve(n: int, k: int, s: str) -> str:\n    text = s.strip()\n    result = 0\n    available = text.split('1')\n    try:\n        for (i, av) in enumerate(available):\n            if len(av) < 1:\n                continue\n            if i == 0:\n                av = '0' * k + av\n            if i == len(available) - 1:\n                av = av + '0' * k\n                pass\n            l = k + 1\n            remainder = len(av) % l\n            if remainder < k:\n                result += len(av) // l - 1\n            else:\n                result += len(av) // l\n    except IndexError:\n        pass\n    return result\nN = int(sys.stdin.readline())\nfor i in range(N):\n    t = sys.stdin.readline()\n    (n, k) = t.strip().split()\n    s = sys.stdin.readline()\n    print(solve(int(n), int(k), s))", "list_ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (a, b, ans) = (0, 0, 0)\n    if '1' not in s:\n        list_ans.append((n - 1) // (k + 1) + 1)\n    else:\n        for i in range(n):\n            b += 1\n            if s[i] == '1':\n                if a == 1:\n                    ans += max((b - 1) // (k + 1) - 1, 0)\n                else:\n                    ans += (b - 1) // (k + 1)\n                    a = 1\n                b = 1\n        ans += (b - 1) // (k + 1)\n        list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "import math\nimport sys\n\ndef getOptimalNumOfChairsFromEmptyTable(tableCount, minDistance):\n    return math.ceil(tableCount / (minDistance + 1))\n\ndef calculate(tables, minDistance):\n    personInBack = False\n    availableTableCount = 0\n    validChairCount = 0\n    for table in tables:\n        if table == '1':\n            if personInBack:\n                validChairCount -= minDistance\n            validChairCount -= minDistance\n            if validChairCount > 0:\n                availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n            validChairCount = 0\n            personInBack = True\n        else:\n            validChairCount += 1\n    if personInBack:\n        validChairCount -= minDistance\n    if validChairCount > 0:\n        availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n    return availableTableCount\ninputs = []\nnumOfInput = sys.stdin.readline()\nfor inputIndex in range(0, int(numOfInput)):\n    firstInput = sys.stdin.readline().rstrip().split(' ')\n    minDistance = int(firstInput[1])\n    tables = sys.stdin.read(int(firstInput[0]))\n    sys.stdin.readline()\n    inputs.append([tables, minDistance])\nfor lineInput in inputs:\n    tables = lineInput[0]\n    minDistance = lineInput[1]\n    result = calculate(tables, minDistance)\n    print(result)", "import math\nimport sys\n\ndef getOptimalNumOfChairsFromEmptyTable(tableCount, minDistance):\n    return math.ceil(tableCount / (minDistance + 1))\n\ndef calculate(tables, minDistance):\n    personInBack = False\n    availableTableCount = 0\n    validChairCount = 0\n    for table in tables:\n        if table == '1':\n            if personInBack:\n                validChairCount -= minDistance\n            validChairCount -= minDistance\n            if validChairCount > 0:\n                availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n            validChairCount = 0\n            personInBack = True\n        else:\n            validChairCount += 1\n    if personInBack:\n        validChairCount -= minDistance\n    if validChairCount > 0:\n        availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n    return availableTableCount\n\ndef getInput():\n    firstInput = sys.stdin.readline().rstrip().split(' ')\n    minDistance = int(firstInput[1])\n    tables = sys.stdin.read(int(firstInput[0]))\n    sys.stdin.readline()\n    return (tables, minDistance)\ninputs = []\nnumOfInput = sys.stdin.readline()\nfor inputIndex in range(0, int(numOfInput)):\n    inputs.append(getInput())\nfor lineInput in inputs:\n    result = calculate(*lineInput)\n    print(result)", "import math\nimport sys\n\ndef getOptimalNumOfChairsFromEmptyTable(tableCount, minDistance):\n    return math.ceil(tableCount / (minDistance + 1))\n\ndef calculate(tables, minDistance):\n    personInBack = False\n    availableTableCount = 0\n    validChairCount = 0\n    for table in tables:\n        if table == '1':\n            if personInBack:\n                validChairCount -= minDistance\n            validChairCount -= minDistance\n            if validChairCount > 0:\n                availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n            validChairCount = 0\n            personInBack = True\n        else:\n            validChairCount += 1\n    if personInBack:\n        validChairCount -= minDistance\n    if validChairCount > 0:\n        availableTableCount += getOptimalNumOfChairsFromEmptyTable(validChairCount, minDistance)\n    return availableTableCount\n\ndef getInput():\n    firstInput = sys.stdin.readline().rstrip().split(' ')\n    minDistance = int(firstInput[1])\n    tables = sys.stdin.read(int(firstInput[0]))\n    sys.stdin.readline()\n    return (tables, minDistance)\ninputs = []\nnumOfInput = sys.stdin.readline()\nfor inputIndex in range(0, int(numOfInput)):\n    inputs.append(getInput())\nfor lineInput in inputs:\n    result = calculate(*lineInput)\n    print(result)", "import math\nimport sys\n\ndef getOptimalNumOfChairsFromEmptyTable(tableCount, minDistance):\n    return math.ceil(tableCount / (minDistance + 1))\n\ndef calculate(tables, minDistance):\n    personInBack = False\n    availableTableCount = 0\n    validChairCount = 0\n    for table in tables:\n        if table == '1':\n            validChairCount -= 2 * minDistance if personInBack else minDistance\n            if validChairCount > 0:\n                availableTableCount += math.ceil(validChairCount / (minDistance + 1))\n            validChairCount = 0\n            personInBack = True\n        else:\n            validChairCount += 1\n    if personInBack:\n        validChairCount -= minDistance\n    if validChairCount > 0:\n        availableTableCount += math.ceil(validChairCount / (minDistance + 1))\n    return availableTableCount\n\ndef getInputs():\n    numOfInput = sys.stdin.readline()\n    for inputIndex in range(0, int(numOfInput)):\n        firstInput = sys.stdin.readline().rstrip().split(' ')\n        minDistance = int(firstInput[1])\n        tables = sys.stdin.read(int(firstInput[0]))\n        sys.stdin.readline()\n        yield (tables, minDistance)\nfor lineInput in getInputs():\n    result = calculate(*lineInput)\n    print(result)", "import math\nimport sys\n\ndef calculate(tables, minDistance):\n    personInBack = False\n    availableTableCount = 0\n    validChairCount = 0\n    for table in tables:\n        if table == '1':\n            if personInBack:\n                validChairCount -= minDistance\n            validChairCount -= minDistance\n            if validChairCount > 0:\n                availableTableCount += math.ceil(validChairCount / (minDistance + 1))\n            validChairCount = 0\n            personInBack = True\n        else:\n            validChairCount += 1\n    if personInBack:\n        validChairCount -= minDistance\n    if validChairCount > 0:\n        availableTableCount += math.ceil(validChairCount / (minDistance + 1))\n    return availableTableCount\n\ndef getInputs():\n    numOfInput = sys.stdin.readline()\n    for inputIndex in range(0, int(numOfInput)):\n        firstInput = sys.stdin.readline().rstrip().split(' ')\n        minDistance = int(firstInput[1])\n        tables = sys.stdin.read(int(firstInput[0]))\n        sys.stdin.readline()\n        yield (tables, minDistance)\nfor lineInput in getInputs():\n    result = calculate(*lineInput)\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [len(x) for x in input().split('1')]\n    cnt = 0\n    if len(a) == 1:\n        if n == k:\n            cnt = 1\n        else:\n            cnt = n // (k + 1) + (1 if n % (k + 1) > 0 else 0)\n    else:\n        cnt += a[0] // (k + 1)\n        cnt += a[-1] // (k + 1)\n        for x in a[1:-1]:\n            if x > k:\n                cnt += x // (k + 1)\n                cnt -= 1 if x % (k + 1) != k else 0\n    print(cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [len(x) for x in input().split('1')]\n    cnt = 0\n    if len(a) == 1:\n        if n == k:\n            cnt = 1\n        else:\n            cnt = n // (k + 1) + (n % (k + 1) > 0)\n    else:\n        cnt += a[0] // (k + 1)\n        cnt += a[-1] // (k + 1)\n        for x in a[1:-1]:\n            if x > k:\n                cnt += x // (k + 1)\n                cnt -= x % (k + 1) != k\n    print(cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [len(x) for x in input().split('1')]\n    cnt = 0\n    if len(a) == 1:\n        cnt = n // (k + 1) + (n % (k + 1) > 0)\n    else:\n        cnt += a[0] // (k + 1)\n        cnt += a[-1] // (k + 1)\n        for x in a[1:-1]:\n            cnt += x // (k + 1)\n            cnt -= x % (k + 1) != k\n    print(cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    temp = k\n    for i in s:\n        if not int(i):\n            temp += 1\n            if temp - 1 == k:\n                ans += 1\n                temp = 0\n        else:\n            if temp < k:\n                ans -= 1\n            temp = 0\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (res, cnt, flag) = (0, 0, 0)\n    for i in s:\n        if i == '0':\n            cnt += 1\n        else:\n            if flag:\n                res += max(0, (cnt - k) // (k + 1))\n            else:\n                res += max(0, cnt // (k + 1))\n            flag = 1\n            cnt = 0\n    if not flag:\n        res = 1\n        cnt -= 1\n    res += max(0, cnt // (k + 1))\n    print(res)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    po = -1\n    c = 0\n    for i in range(n):\n        if s[i] == '1':\n            if po == -1:\n                c += max(0, i // (k + 1))\n            elif i - po - 1 - k > 0:\n                c += max(0, i - po - 1 - k) // (k + 1)\n            po = i\n    if po == -1:\n        c += 1\n        po = 0\n    if n - 1 - po > 0:\n        c += max(0, (n - 1 - po) // (k + 1))\n    print(c)", "def solve(n, k, s):\n    i = new_customer_count = 0\n    while i < n:\n        if s[i] == '0':\n            is_block_of_k_tables_occupied = False\n            for j in range(i + 1, min(i + k + 1, n)):\n                if s[j] == '1':\n                    i = j\n                    is_block_of_k_tables_occupied = True\n                    break\n            if not is_block_of_k_tables_occupied:\n                new_customer_count += 1\n                i += k + 1\n        else:\n            i += k + 1\n    return new_customer_count\nt = int(input())\nresults = list()\nfor _ in range(0, t):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    results.append(solve(n, k, s))\nfor result in results:\n    print(result)", "t = int(input())\nfor i in range(t):\n    values = input()\n    values = values.split(' ')\n    n = int(values[0])\n    k = int(values[1])\n    tables = input()\n    count = k\n    res = 0\n    for table in tables:\n        if table == '0':\n            count += 1\n            if count >= 2 * k + 1:\n                res += 1\n                count = k\n        else:\n            count = 0\n    if count >= k + 1:\n        res += 1\n    print(res)", "t = int(input())\nfor i in range(t):\n    values = input()\n    values = values.split(' ')\n    n = int(values[0])\n    k = int(values[1])\n    tables = input()\n    count = k\n    result = 0\n    for table in tables:\n        if table == '0':\n            count += 1\n            if count >= 2 * k + 1:\n                result += 1\n                count = k\n        else:\n            count = 0\n    if count >= k + 1:\n        result += 1\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (res, c) = (0, 0)\n    left = s[0] == '1'\n    for e in s:\n        if e == '1':\n            if left:\n                res += max(0, c - k) // (k + 1)\n            else:\n                res += c // (k + 1)\n            (left, c) = (True, 0)\n        else:\n            c += 1\n    if left:\n        res += c // (k + 1)\n    else:\n        res += c // (k + 1) + (c % (k + 1) != 0)\n    print(res)", "import sys\n\ndef main():\n    t = int(next(sys.stdin))\n    for _ in range(t):\n        a = next(sys.stdin)\n        (_, k) = list(map(int, a.split()))\n        b = next(sys.stdin)\n        s = b.strip()\n        print(solve(s, k))\n\ndef solve(s, k):\n    n = len(s)\n    ans = i = 0\n    while i < n:\n        if s[i] == '1':\n            i += 1\n            continue\n        j = i + 1\n        while j < n and s[j] == '0':\n            j += 1\n        a = i + (i > 0 and k)\n        b = j - (j < n and k)\n        if b - a > 0:\n            ans += (b - a + k) // (k + 1)\n        i = j + 1\n    return ans\nassert solve('100010', 1) == 1\nassert solve('000000', 2) == 2\nassert solve('000000', 0) == 6\nassert solve('10101', 1) == 0\nassert solve('001', 1) == 1\nassert solve('00', 2) == 1\nassert solve('1', 1) == 0\nassert solve('0', 1) == 1\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    x1 = 0\n    if s[0] == '0':\n        ans += 1\n        x1 = 0\n    for j in range(1, len(s)):\n        if s[j] == '1':\n            if j - x1 - k <= 0:\n                ans -= 1\n            x1 = j\n        elif j - x1 - k > 0:\n            ans += 1\n            x1 = j\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    count = 0\n    for i in ('0' * k + input() + '0' * k).split('1'):\n        count += max((len(i) - k) // (k + 1), 0)\n    print(count)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = str(input())\n    a = []\n    for i in range(n):\n        if l[i] == '1':\n            a.append(i)\n    (c1, c2, c3) = (0, 0, 0)\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] - 1 > 2 * k:\n            c1 += math.ceil((a[i + 1] - a[i] - 1 - 2 * k) / (k + 1))\n    if a:\n        if a[0] > k:\n            c2 = a[0] - k\n            c2 = math.ceil(c2 / (k + 1))\n        if n - 1 - a[-1] > k:\n            c3 = n - 1 - a[-1] - k\n            c3 = math.ceil(c3 / (k + 1))\n    else:\n        c1 = math.ceil(n / (k + 1))\n    print(c1 + c2 + c3)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    ans = 0\n    for j in range(n):\n        if s[j] == '1':\n            l.append(j + 1)\n    if len(l) == 0:\n        a = ''\n        for j in range(n):\n            if j % (k + 1) == 0:\n                a += '1'\n            else:\n                a += '0'\n        print(a.count('1'))\n    else:\n        ans += (l[0] - 1) // (k + 1)\n        x = len(l) - 1\n        ans += (n - l[x]) // (k + 1)\n        for j in range(1, len(l)):\n            ans += (l[j] - l[j - 1]) // (k + 1) - 1\n        print(ans)", "from math import ceil\n\ndef check_social_distance(num_cases):\n    num_cases = int(num_cases)\n    for i in range(num_cases):\n        line = input()\n        line = line.split()\n        n = int(line[0])\n        k = int(line[1])\n        s = input()\n        ans = find_seats(s, n, k)\n        print(ans)\n\ndef find_seats(s, n, k):\n    i = 0\n    seats = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1 if i + 1 < n and s[i + 1] != '1' else i\n            while j + 1 < n and s[j + 1] != '1':\n                j += 1\n            length = j - i + 1\n            if i - 1 >= 0 and s[i - 1] == '1':\n                length -= k\n            if j + 1 < n and s[j + 1] == '1':\n                length -= k\n            if length > 0:\n                possible_seats = ceil(length / (k + 1))\n                seats += possible_seats\n            i = j + 1\n        else:\n            i += 1\n    return seats\nnum_cases = input()\ncheck_social_distance(num_cases)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if '1' in s:\n        lsta = []\n        for j in range(n):\n            if s[j] == '1':\n                lsta.append(j)\n        c = 0\n        dif1 = lsta[0] - k\n        if dif1 > 0:\n            c += 1\n            ind = 0\n            while True:\n                if ind > dif1 - 1:\n                    break\n                else:\n                    ind += k + 1\n                    if ind < dif1:\n                        c += 1\n        dif2 = n - 1 - lsta[-1] - k\n        if dif2 > 0:\n            c += 1\n            ind = 0\n            while True:\n                if ind > dif2 - 1:\n                    break\n                else:\n                    ind += k + 1\n                    if ind < dif2:\n                        c += 1\n        l = len(lsta)\n        for h in range(1, l):\n            dif = lsta[h] - lsta[h - 1] - 1 - 2 * k\n            if dif > 0:\n                c += 1\n                ind = 0\n                while True:\n                    if ind > dif - 1:\n                        break\n                    else:\n                        ind += k + 1\n                        if ind < dif:\n                            c += 1\n    else:\n        c = 1\n        ind = 0\n        while True:\n            if ind > n - 1:\n                break\n            else:\n                ind += k + 1\n                if ind < n:\n                    c += 1\n    print(c)", "l = input\nfor p in [0] * int(l()):\n    k = int(l().split()[1])\n    t = '0' * k\n    print(sum((max(0, len(s) - k) // (k + 1) for s in (t + l() + t).split('1'))))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = '0' * k + s + '0' * k\n    s = s.split('1')\n    ans = 0\n    for j in s:\n        ans += max(0, (len(j) - k) // (k + 1))\n    print(ans)", "cases_number = int(input())\nanswers = [0 for i in range(cases_number)]\nfor i in range(cases_number):\n    k = int(input().split()[1])\n    freeseats = [len(j) for j in input().split('1')]\n    freeseats[0] = freeseats[0] + k\n    freeseats[-1] = freeseats[-1] + k\n    available = [max(0, (j - k) // (k + 1)) for j in freeseats]\n    answers[i] = sum(available)\nfor answer in answers:\n    print(answer)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = [int(x) for x in input().split()]\n    s = input().strip()\n\n    def calc(l):\n        if l <= 0:\n            return 0\n        return (l - 1) // (k + 1) + 1\n    a = n - len(s.lstrip('0'))\n    if a == n:\n        print(calc(n))\n        return\n    b = n - len(s.rstrip('0'))\n    arr = s.split('1')[1:-1]\n    ans = calc(a - k) + calc(b - k)\n    for el in arr:\n        ans += calc(len(el) - 2 * k)\n    print(ans)\ntt = int(input())\nfor test in range(tt):\n    solve()", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        (n, k) = MI()\n        s = '0' * k + SI() + '0' * k + '1'\n        cnt = 0\n        ans = 0\n        for c in s:\n            if c == '0':\n                cnt += 1\n            else:\n                if cnt - k > 0:\n                    ans += (cnt - k) // (k + 1)\n                cnt = 0\n        print(ans)\nmain()", "import sys\n\ndef main():\n    t = int(next(sys.stdin))\n    for _ in range(t):\n        a = next(sys.stdin)\n        (_, k) = list(map(int, a.split()))\n        b = next(sys.stdin)\n        s = b.strip()\n        print(solve(s, k))\n\ndef solve(s, k):\n    n = len(s)\n    ans = i = 0\n    while i < n:\n        if s[i] == '1':\n            i += 1\n            continue\n        j = i + 1\n        while j < n and s[j] == '0':\n            j += 1\n        a = i + (i > 0 and k)\n        b = j - (j < n and k)\n        if b - a > 0:\n            ans += (b - a + k) // (k + 1)\n        i = j + 1\n    return ans\nassert solve('100010', 1) == 1\nassert solve('000000', 2) == 2\nassert solve('000000', 0) == 6\nassert solve('10101', 1) == 0\nassert solve('001', 1) == 1\nassert solve('00', 2) == 1\nassert solve('1', 1) == 0\nassert solve('0', 1) == 1\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = '0' * k + input() + '0' * k\n    s = s.split('1')\n    ans = 0\n    for i in s:\n        ans += max((len(i) - k) // (k + 1), 0)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    p = 0\n    r = 0\n    c = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            if p:\n                r = r + max(0, (c + 1) // (k + 1) - 1)\n            else:\n                r = r + c // (k + 1)\n            p = 1\n            c = 0\n        else:\n            c = c + 1\n    if p:\n        r = r + c // (k + 1)\n    else:\n        r = 1 + (n - 1) // (k + 1)\n    print(r)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    max = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1\n            while j <= i + k and j < n:\n                if s[j] == '1':\n                    max = 1\n                    i = j\n                    break\n                j += 1\n            if max == 1:\n                max = 0\n            else:\n                i += k + 1\n                ans += 1\n        elif s[i] == '1':\n            i += k + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    temp = input()\n    temp = temp.split(' ')\n    tables = int(temp[0])\n    distance = int(temp[1])\n    states = input()\n    counter = distance\n    avalible_seats = 0\n    for table in states:\n        if table == '0':\n            counter += 1\n            if counter >= 2 * distance + 1:\n                avalible_seats += 1\n                counter = distance\n        else:\n            counter = 0\n    if counter >= distance + 1:\n        avalible_seats += 1\n    print(avalible_seats)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    for _ in range(int(input())):\n        (n, k) = li()\n        s = input()\n        c = 0\n        l = -(k + 1)\n        for i in range(n):\n            if s[i] == '1':\n                l = i\n            elif i - l == 2 * k + 1:\n                l = l + k + 1\n                c += 1\n        if n - 1 - l >= k + 1:\n            c += 1\n        print(c)\nsolve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [len(x) for x in input().split('1')]\n    cnt = 0\n    if len(a) == 1:\n        if n == k:\n            cnt = 1\n        else:\n            cnt = n // (k + 1) + (n % (k + 1) > 0)\n    else:\n        cnt += a[0] // (k + 1)\n        cnt += a[-1] // (k + 1)\n        for x in a[1:-1]:\n            cnt += x // (k + 1)\n            cnt -= x % (k + 1) != k\n    print(cnt)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s1 = '1' + '0' * k + input() + '0' * k + '1'\n    s = [len(x) for x in s1.split('1')]\n    i = 0\n    for x in s:\n        count = (x - k) // (1 + k)\n        if count >= 0:\n            i += count\n    print(i)", "t = int(input())\n\ndef q(n, k, l):\n    lis = []\n    v = 0\n    for i in range(n):\n        if l[i] == 1:\n            lis.append(i + 1)\n    m = len(lis)\n    if m != 0:\n        if m > 1:\n            for i in range(m - 1):\n                v += (lis[i + 1] - lis[i] - 1 - k) // (k + 1)\n            val1 = (n - lis[m - 1]) // (k + 1)\n            val2 = (lis[0] - 1) // (k + 1)\n            v += val1\n            v += val2\n        else:\n            v1 = (lis[0] - 1) // (k + 1)\n            v2 = (n - lis[0]) // (k + 1)\n            v = v1 + v2\n    else:\n        v = 1 + (n - 1) // (k + 1)\n    return v\nfor i in range(t):\n    a = input().split()\n    l = list(map(int, a))\n    (n, k) = (l[0], l[1])\n    a = input()\n    a = list(a)\n    l = list(map(int, a))\n    print(q(n, k, l))", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    s = s.split('1')\n    tables = 0\n    if len(s) == 1:\n        tables += (len(s[0]) + k) // (k + 1)\n    else:\n        tables += len(s[0]) // (k + 1)\n        tables += len(s[-1]) // (k + 1)\n        for j in range(1, len(s[:-1])):\n            if len(s[j]) != 0:\n                tables += (len(s[j]) - k) // (k + 1)\n    print(tables)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (res, c) = (0, 0)\n    left = s[0] == '1'\n    for e in s:\n        if e == '1':\n            if left:\n                res += max(0, c - k) // (k + 1)\n            else:\n                res += c // (k + 1)\n            (left, c) = (True, 0)\n        else:\n            c += 1\n    if left:\n        res += c // (k + 1)\n    else:\n        res += (c + k) // (k + 1)\n    print(res)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    inp = input()\n    indices = []\n    for i in range(n):\n        if inp[i] == '1':\n            indices.append(i)\n    if not indices:\n        print(ceil(n / (k + 1)))\n        continue\n    cnt = 0\n    for i in range(1, len(indices)):\n        tmp = indices[i] - indices[i - 1] - 1 - 2 * k\n        if tmp > 0:\n            cnt += ceil(tmp / (k + 1))\n    tmp = indices[0] - k\n    if tmp > 0:\n        cnt += ceil(tmp / (k + 1))\n    tmp = n - indices[-1] - k - 1\n    if tmp > 0:\n        cnt += ceil(tmp / (k + 1))\n    print(cnt)", "def solve():\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    ans = 0\n    i = 0\n    k += 1\n    while i < n:\n        if s[i] == '1':\n            i += k\n        else:\n            ok = True\n            j = i + 1\n            while j < i + k and j < n:\n                if s[j] == '1':\n                    ok = False\n                    break\n                j += 1\n            if ok:\n                ans += 1\n            i = j\n    return ans\n\ndef main():\n    t = int(input())\n    while t:\n        print(solve())\n        t -= 1\nmain()", "import sys\n\ndef main():\n    t = int(next(sys.stdin))\n    for _ in range(t):\n        a = next(sys.stdin)\n        (_, k) = list(map(int, a.split()))\n        b = next(sys.stdin)\n        s = b.strip()\n        print(solve(s, k))\n\ndef solve(s, k):\n    segs = []\n    n = len(s)\n    last = -n - 1\n    x = 0\n    for i in range(n):\n        if s[i] == '0':\n            if i - k > last:\n                x += 1\n        else:\n            if i - k > last:\n                if x - k > 0:\n                    segs.append(x - k)\n            last = i\n            x = 0\n    if x > 0:\n        segs.append(x)\n    ans = sum(((x + k) // (k + 1) for x in segs))\n    return ans\nassert solve('100010', 1) == 1\nassert solve('000000', 2) == 2\nassert solve('10101', 1) == 0\nassert solve('001', 1) == 1\nassert solve('00', 2) == 1\nassert solve('1', 1) == 0\nassert solve('0', 1) == 1\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = '0' * k + input()\n    max_tables = 0\n    i = 0\n    while i < n:\n        segment_len = 0\n        found = s.find('1', i)\n        if found != -1:\n            segment_len = max(0, found - i - k)\n            i = found + 1\n        else:\n            segment_len = len(s) - i\n            i = n\n        max_tables += segment_len // (k + 1)\n    print(max_tables)", "def solve(tables, distance, seq):\n    index = 0\n    ans = 0\n    while index < tables:\n        if seq[index] == '0':\n            makeEmpty = index + distance\n            isEmpty = True\n            while index <= makeEmpty and index < tables:\n                if seq[index] == '1':\n                    isEmpty = False\n                    break\n                index += 1\n            if isEmpty:\n                ans += 1\n        else:\n            index += distance + 1\n    return ans\nfor x in range(int(input())):\n    (t, d) = list(map(int, input().split()))\n    seq = list(input())\n    print(solve(t, d, seq))", "from functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (r, i) = (0, 0)\n    while i < n:\n        if s[i] == '1':\n            i += k + 1\n        elif i + k + 1 < n:\n            if s[i + 1:i + k + 1] == '0' * k:\n                r += 1\n                i += k + 1\n            else:\n                i += 1\n        else:\n            if s[i + 1:n] == '0' * (n - i - 1):\n                r += 1\n            break\n    print(r)", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    temp = [0] * n\n    t = n + k\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            t = i\n        temp[i] = t\n    res = 0\n    p = -k - 1\n    for i in range(n):\n        if s[i] == '1':\n            p = i\n        if temp[i] - i > k and i - p > k:\n            res += 1\n            p = i\n    print(res)\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = k\n    p = 2 * k + 1\n    res = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            c += 1\n        else:\n            c = 0\n        if c == p:\n            res += 1\n            c = k\n    if c >= k + 1:\n        res += 1\n    print(res)", "t = int(input())\nwhile t:\n    t -= 1\n    (present, ans, cnt) = (0, 0, 0)\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            if present:\n                ans += max(0, (cnt + 1) // (k + 1) - 1)\n            else:\n                ans += cnt // (k + 1)\n            present = 1\n            cnt = 0\n        else:\n            cnt += 1\n    if present:\n        ans += cnt // (k + 1)\n    else:\n        ans = 1 + (n - 1) // (k + 1)\n    print(ans)", "t = int(input())\nwhile t:\n    t = t - 1\n    (present, ans, cnt) = (0, 0, 0)\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            if present:\n                ans += max(0, (cnt + 1) // (k + 1) - 1)\n            else:\n                ans += cnt // (k + 1)\n            present = 1\n            cnt = 0\n        else:\n            cnt += 1\n    if present:\n        ans += cnt // (k + 1)\n    else:\n        ans = 1 + (n - 1) // (k + 1)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    max = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1\n            while j <= i + k and j < n:\n                if s[j] == '1':\n                    max = 1\n                    i = j\n                    break\n                j += 1\n            if max == 1:\n                max = 0\n            else:\n                i += k + 1\n                ans += 1\n        elif s[i] == '1':\n            i += k + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    max = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1\n            while j <= i + k and j < n:\n                if s[j] == '1':\n                    max = 1\n                    i = j\n                    break\n                j += 1\n            if max == 1:\n                max = 0\n            else:\n                i += k + 1\n                ans += 1\n        elif s[i] == '1':\n            i += k + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    max = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1\n            while j <= i + k and j < n:\n                if s[j] == '1':\n                    max = 1\n                    i = j\n                    break\n                j += 1\n            if max == 1:\n                max = 0\n            else:\n                i += k + 1\n                a += 1\n        elif s[i] == '1':\n            i += k + 1\n    print(a)", "def main():\n    for _ in range(int(input())):\n        (n, k) = tuple(map(int, input().split()))\n        a = input()\n        l = []\n        if n == 1:\n            print(a.count('0'))\n            continue\n        elif n <= k and a.count('1') == 0:\n            print(1)\n            continue\n        for i in range(n):\n            if a[i] == '1':\n                l += [i]\n        count = 0\n        yo = 0\n        hehe = 0\n        if 0 not in l:\n            yo = 'iamtefi'\n            l += [0]\n        if n - 1 not in l:\n            hehe = 'iamtefu'\n            l += [n - 1]\n        l.sort()\n        for i in range(1, len(l)):\n            set1 = 1\n            set2 = 1\n            if i - 1 == 0 and yo == 'iamtefi':\n                set1 = 0\n            if i == len(l) - 1 and hehe == 'iamtefu':\n                set2 = 0\n            m = (l[i] - l[i - 1]) // (1 + k) - (set1 + set2) + 1\n            if m > 0:\n                count += m\n        print(count)\nmain()", "I = input\nfor _ in [0] * int(I()):\n    k = int(I().split()[1])\n    t = '0' * k\n    print(sum((max(0, len(s) - k) // (k + 1) for s in (t + I() + t).split('1'))))", "t = int(input())\nfor i in range(t):\n    test = input()\n    n = int(test.split()[0])\n    k = int(test.split()[1])\n    tables = input()\n    pos = 0\n    aux = 0\n    total = 0\n    for i in range(n):\n        if tables[i] == '1':\n            if pos:\n                total = total + max(0, (aux + 1) // (k + 1) - 1)\n            else:\n                total = total + aux // (k + 1)\n            pos = 1\n            aux = 0\n        else:\n            aux = aux + 1\n    if pos:\n        total = total + aux // (k + 1)\n    else:\n        total = 1 + (n - 1) // (k + 1)\n    print(total)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    max = 0\n    j = 0\n    while j < n:\n        if s[j] == '0':\n            z = j + 1\n            while z <= j + k and z < n:\n                if s[z] == '1':\n                    max = 1\n                    j = z\n                    break\n                z += 1\n            if max == 1:\n                max = 0\n            else:\n                j += k + 1\n                c += 1\n        elif s[j] == '1':\n            j += k + 1\n    print(c)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    ones = []\n    for i in range(n):\n        if a[i] == '1':\n            ones.append(i)\n    ans = 0\n    if len(ones) == 0:\n        i = 0\n        while i < n:\n            ans += 1\n            i += k + 1\n        print(ans)\n    else:\n        ind = 0\n        if a[ind] == '0':\n            pv = -k - 1\n            nx = ones[0]\n        elif len(ones) == 1:\n            pv = 0\n            nx = n - 1 + k + 1\n        else:\n            pv = 0\n            nx = ones[1]\n        for i in range(n):\n            if i >= nx:\n                pv = nx\n                ind += 1\n                if ind < len(ones):\n                    nx = ones[ind]\n                else:\n                    nx = n - 1 + k + 1\n            if i - pv >= k + 1 and nx - i >= k + 1:\n                ans += 1\n                pv = i\n        print(ans)", "import math\nx = int(input())\nfor i in range(x):\n    (n, k) = list(map(int, input().split()))\n    a = input()\n    kk = 0\n    ans = 0\n    count = 0\n    present = 0\n    while kk < n:\n        if a[kk] == '0':\n            count += 1\n            kk += 1\n        else:\n            present += 1\n            if present == 1 and count >= k + 1:\n                count -= 1\n                ans += 1\n                if count >= k * 2 + 1:\n                    count -= k\n                    if count >= 1:\n                        ans += count // (k + 1)\n                        count = 0\n            elif count >= k * 2 + 1:\n                count -= k\n                if count >= 1:\n                    ans += count // (k + 1)\n                    count = 0\n            count = 0\n            kk += 1\n    if count != 0 and present > 0:\n        count -= k\n        if count >= 0:\n            ans += math.ceil(count / (k + 1))\n    elif count != 0 and present == 0:\n        ans += math.ceil(count / (k + 1))\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    tables = input()\n    total = 0\n    if n == k:\n        print(total) if '1' in tables else print(total + 1)\n    elif '1' in tables:\n        loc = tables.index('1')\n        forw = tables[loc:]\n        back = tables[loc::-1]\n        it = 0\n        for f in range(len(forw)):\n            if it % (k + 1) == 0 and it != 0 and (forw[f] != '1') and ('1' not in forw[f + 1:f + k + 1]):\n                total += 1\n                it += 1\n            elif forw[f] == '1':\n                it = 1\n            else:\n                it += 1\n        it = 0\n        for b in range(len(back)):\n            if it % (k + 1) == 0 and it != 0 and (back[b] != '1') and ('1' not in back[b + 1:b + k + 1]):\n                total += 1\n                it += 1\n            elif back[b] == '1':\n                it = 1\n            else:\n                it += 1\n        print(total)\n    else:\n        for i in range(0, n, k + 1):\n            if i + k + 1 > n:\n                total += 1\n            elif tables[i] == '0':\n                total += 1\n        print(total)", "for _ in range(int(input())):\n    res = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    s = '0' * k + s + '0' * k\n    l = s.split('1')\n    for z in l:\n        res += max((len(z) - k) // (k + 1), 0)\n    print(res)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = ('0' * k + input() + '0' * k).split('1')\n    ans = 0\n    for i in a:\n        ans += max((len(i) - k) // (k + 1), 0)\n    print(ans)", "import sys, math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, k) = get_ints()\n    S = '0' * k + get_string() + '0' * k\n    L = S.split('1')\n    count = 0\n    for i in L:\n        count += max((len(i) - k) // (k + 1), 0)\n    print(count)", "t = int(input())\nwhile t:\n    t -= 1\n    (present, ans, cnt) = (0, 0, 0)\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            if present:\n                ans += max(0, (cnt + 1) // (k + 1) - 1)\n            else:\n                ans += cnt // (k + 1)\n            present = 1\n            cnt = 0\n        else:\n            cnt = cnt + 1\n    if present:\n        ans += cnt // (k + 1)\n    else:\n        ans = 1 + (n - 1) // (k + 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    tables = input()\n    total = 0\n    if n == k:\n        print(total) if '1' in tables else print(total + 1)\n    elif '1' in tables:\n        loc = tables.index('1')\n        forw = tables[loc:]\n        back = tables[loc::-1]\n        it = 0\n        for f in range(len(forw)):\n            if it % (k + 1) == 0 and it != 0 and (forw[f] != '1') and ('1' not in forw[f + 1:f + k + 1]):\n                total += 1\n                it += 1\n            elif forw[f] == '1':\n                it = 1\n            else:\n                it += 1\n        it = 0\n        for b in range(len(back)):\n            if it % (k + 1) == 0 and it != 0 and (back[b] != '1') and ('1' not in back[b + 1:b + k + 1]):\n                total += 1\n                it += 1\n            elif back[b] == '1':\n                it = 1\n            else:\n                it += 1\n        print(total)\n    else:\n        for i in range(0, n, k + 1):\n            if i + k + 1 > n:\n                total += 1\n            elif tables[i] == '0':\n                total += 1\n        print(total)", "def solve(n, k, s):\n\n    def cal(l, r, k):\n        if l > r:\n            return 0\n        n = r - l + 1\n        return n // k + (n % k != 0)\n    p = []\n    ans = 0\n    for (i, v) in enumerate(s):\n        if v == '1':\n            p.append(i)\n    if not p:\n        return cal(0, n - 1, k)\n    for i in range(len(p) - 1):\n        ans += cal(p[i] + k, p[i + 1] - k, k)\n    ans += cal(0, p[0] - k, k) + cal(p[-1] + k, n - 1, k)\n    return ans\n\ndef main():\n    inp = lambda : [int(x) for x in input().split()]\n    inn = lambda : int(input())\n    t = inn()\n    for _ in range(t):\n        (n, k) = inp()\n        s = input()\n        print(solve(n, k + 1, s))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        num = 0\n        prev = -1\n        for i in range(n):\n            if s[i] == '1':\n                numEmpty = i - prev - 1\n                if prev > -1:\n                    numEmpty -= k\n                num += max(0, numEmpty // (k + 1))\n                prev = i\n        if prev == -1:\n            num += 1\n            prev = 0\n        num += max(0, (n - prev - 1) // (k + 1))\n        print(num)\nmain()", "t = int(input())\nrez = []\nfor i in range(t):\n    A = input().split()\n    n = int(A[0])\n    k = int(A[1])\n    re = 0\n    s = input()\n    r = []\n    l = 0\n    for j in range(len(s)):\n        if s[j] == '0':\n            l += 1\n        else:\n            r.append(l)\n            l = 0\n    r.append(l)\n    if len(r) == 1:\n        re = 1\n        re += int((r[0] - 1) // (k + 1))\n        rez.append(re)\n    else:\n        if r[0] != 0:\n            re += r[0] // (k + 1)\n        for j in range(1, len(r) - 1):\n            while r[j] >= 2 * k + 1:\n                re += 1\n                r[j] -= k + 1\n        re += r[-1] // (k + 1)\n        rez.append(re)\nfor i in range(len(rez)):\n    print(rez[i])", "for i in range(int(input())):\n    (n, k) = input().split(' ')\n    (n, k) = (int(n), int(k))\n    s = input()\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if ones == []:\n        print((n - 1) // (k + 1) + 1)\n    else:\n        ans = 0\n        one = len(ones) - 1\n        if s[0] == '0':\n            ans += ones[0] // (k + 1)\n        if s[n - 1] == '0':\n            ans += (n - 1 - ones[one]) // (k + 1)\n        for i in range(one):\n            ans += (ones[i + 1] - ones[i] - k - 1) // (k + 1)\n        print(ans)", "p = int(input())\narr = []\nfor i in range(p):\n    (n, k) = map(int, input().split())\n    t = str(input())\n    array = [d for d in t.split('1')]\n    count = 0\n    for j in range(len(array)):\n        if len(array) == 1:\n            count_1 = 0\n            for b in range(0, len(array[0]), k + 1):\n                count_1 += 1\n            count += count_1\n        elif j == 0 and array[0] != '' or (j == len(array) - 1 and array[len(array) - 1] != ''):\n            r = len(array[j]) - k\n            if r > 0:\n                count_1 = 0\n                for b in range(0, r, k + 1):\n                    count_1 += 1\n                count += count_1\n        else:\n            r = len(array[j]) - 2 * k\n            if r > 0:\n                count_1 = 0\n                for b in range(0, r, k + 1):\n                    count_1 += 1\n                count += count_1\n    arr.append(count)\nfor j in range(len(arr)):\n    print(arr[j])", "def socialDistance(a, x):\n    i = 0\n    people = 0\n    while i < len(a):\n        if a[i] == '0':\n            j = 1\n            while j <= x and i + j < len(a):\n                if a[i + j] != '0':\n                    i += j\n                    break\n                j += 1\n            else:\n                people += 1\n        i += x + 1\n    return people\ntests = int(input())\nfor i in range(tests):\n    (x, y) = map(int, input().split())\n    arr = input()\n    print(socialDistance(arr, y))", "import sys\nfrom heapq import heapify, heappop, heappush\nfrom itertools import *\nfrom collections import *\nfrom math import *\nsys.setrecursionlimit(10 ** 6)\ninput = lambda : sys.stdin.readline()\ninp = lambda : int(input())\nnm = lambda : map(int, input().split())\narr = lambda : list(nm())\nINF = int(1e+18) + 1\nmod = int(1000000000.0) + 7\n\ndef solve():\n    (n, m) = nm()\n    s = input()[:-1]\n    s = '0' * m + s + '0' * m\n    lst = list(s.split('1'))\n    cnt = 0\n    for i in lst:\n        ln = len(i)\n        ln -= m\n        cnt += ln // (m + 1)\n    print(cnt)\nt = inp()\nfor i in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    max = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            j = i + 1\n            while j <= i + k and j < n:\n                if s[j] == '1':\n                    max = 1\n                    i = j\n                    break\n                j += 1\n            if max == 1:\n                max = 0\n            else:\n                i += k + 1\n                ans += 1\n        elif s[i] == '1':\n            i += k + 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (present, ans, cnt) = (0, 0, 0)\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in range(n):\n        if s[i] == '1':\n            if present:\n                ans += max(0, (cnt + 1) // (k + 1) - 1)\n            else:\n                ans += cnt // (k + 1)\n            present = 1\n            cnt = 0\n        else:\n            cnt += 1\n    if present:\n        ans += cnt // (k + 1)\n    else:\n        ans = 1 + (n - 1) // (k + 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    st = input()\n    pos = []\n    j = -10 ** 7\n    for i in range(n):\n        if st[i] == '1':\n            if i - j <= k:\n                pos.pop()\n            j = i\n        elif st[i] == '0' and i - j > k:\n            pos.append(i)\n            j = i\n    print(len(pos))", "def process(start, end, span):\n    return max(0, (end - start - 2 * span - 2) // (span + 1) + 1)\nglobal data\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = input()\n    one_index = []\n    start = 0\n    end = 0\n    result = 0\n    for j in range(0, len(data)):\n        if data[j] == '1':\n            one_index.append(j)\n    if len(one_index) == 0:\n        print((n - 1) // (k + 1) + 1)\n        continue\n    if one_index[0] != 0:\n        result += max(0, one_index[0] // (k + 1))\n    if one_index[-1] != n - 1:\n        result += max(0, (n - one_index[-1] - 1) // (k + 1))\n    if len(one_index) == 1:\n        print(result)\n        continue\n    for j in range(len(one_index) - 1):\n        result += process(one_index[j], one_index[j + 1], k)\n    print(result)", "def process(start, end, span):\n    return max(0, (end - start - 2 * span - 2) // (span + 1) + 1)\nglobal data\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = input()\n    one_index = []\n    start = 0\n    end = 0\n    result = 0\n    for j in range(0, len(data)):\n        if data[j] == '1':\n            one_index.append(j)\n    if len(one_index) == 0:\n        print((n - 1) // (k + 1) + 1)\n        continue\n    if one_index[0] != 0:\n        result += max(0, one_index[0] // (k + 1))\n    if one_index[-1] != n - 1:\n        result += max(0, (n - one_index[-1] - 1) // (k + 1))\n    if len(one_index) == 1:\n        print(result)\n        continue\n    for j in range(len(one_index) - 1):\n        result += process(one_index[j], one_index[j + 1], k)\n    print(result)", "from typing import *\n\ndef count_changes(table_setup: str, distance: int) -> int:\n    changes_count = 0\n    i = 0\n    while i < len(table_setup):\n        ch = table_setup[i]\n        if ch == '0':\n            for j in range(i + 1, min(i + distance + 1, len(table_setup))):\n                if table_setup[j] == '1':\n                    i = j + distance + 1\n                    break\n            else:\n                changes_count += 1\n                i += distance + 1\n        else:\n            i += distance + 1\n    return changes_count\nt = int(input())\nfor _ in range(t):\n    (_, k) = map(int, input().split(' '))\n    print(count_changes(input(), k))", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    R = input()\n    Z = 0\n    ans = 0\n    step = 0\n    for elt in R:\n        if elt == '0':\n            Z += 1\n        else:\n            if step == 0:\n                ans += max(0, Z // (K + 1))\n                step += 1\n            else:\n                ans += max(0, (Z - K) // (K + 1))\n            Z = 0\n    if step == 1:\n        ans += Z // (K + 1)\n    else:\n        ans += 1 + (Z - 1) // (K + 1)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, k) = I()\n    s = list(input().strip())\n    an = 0\n    c = f = 0\n    r = s.index('1') if '1' in s else 2 * (n + k)\n    if s[0] == '0' and r > k:\n        s[0] = '1'\n        an += 1\n    for i in range(n):\n        if s[i] == '0':\n            c += 1\n        else:\n            c = 0\n        if c == 2 * k + 1:\n            s[i - k] = '1'\n            an += 1\n            c = k\n    if c >= k + 1:\n        an += 1\n        s[-1] = '1'\n    print(an)", "def squeeze(n, k):\n    return (n - k) // (k + 1) if n > k else 0\n\ndef solve(n, k, tables):\n    firsto = 0\n    for t in tables:\n        if t == 1:\n            break\n        firsto += 1\n    if firsto >= n:\n        return 1 + (n - 1) // (k + 1)\n    ex = firsto // (k + 1)\n    lasto = firsto\n    for i in range(firsto, n):\n        if tables[i] == 1:\n            ex += squeeze(i - lasto - 1, k)\n            lasto = i\n    ex += (n - lasto - 1) // (k + 1)\n    return ex\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    tables = list(map(int, input()))\n    ex = solve(n, k, tables)\n    print(ex)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == '1':\n            break\n        i += 1\n    if i == n:\n        ans += (i + k) // (k + 1)\n    else:\n        ans += i // (k + 1)\n    c = 0\n    x = i\n    for i in range(x + 1, n):\n        if a[i] == '1':\n            ans += (c - k) // (k + 1)\n            c = 0\n        else:\n            c += 1\n    ans += c // (k + 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    arr = input()\n    i = 0\n    while i < n and arr[i] == '0':\n        i += 1\n    if i == n:\n        quant = (i - 1) // (k + 1) + 1\n        print(quant)\n        continue\n    dist = 0\n    contUm = 0\n    quant = i // (k + 1)\n    i += 1\n    while i < n:\n        if arr[i] == '0':\n            dist += 1\n        else:\n            lastOne = i\n            x = (dist + 1) // (k + 1) - 1\n            if x > 0:\n                quant += x\n            dist = 0\n            contUm += 1\n        i += 1\n    quant += dist // (k + 1)\n    print(quant)", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    fst_one = -1\n    for i in range(n):\n        if s[i] == '1':\n            fst_one = i\n            break\n    if fst_one == -1:\n        print(math.ceil(n / (k + 1)))\n    else:\n        ones = []\n        for i in range(n):\n            if s[i] == '1':\n                ones.append(i)\n        ctr = 0\n        for i in range(len(ones) - 1):\n            diff = (ones[i + 1] - ones[i]) // (k + 1)\n            if diff > 1:\n                ctr += diff - 1\n        if ones[0] > k:\n            ctr += ones[0] // (k + 1)\n        if n - 1 - ones[-1] > k:\n            ctr += (n - 1 - ones[-1]) // (k + 1)\n        print(ctr)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            break\n        i += 1\n    if i == n:\n        ans = (n + k) // (k + 1)\n        print(ans)\n        continue\n    else:\n        ans = i // (k + 1)\n    temp = 0\n    i += 1\n    while i < n:\n        if s[i] == '1':\n            ans += (temp - k) // (k + 1)\n            temp = 0\n        else:\n            temp += 1\n        i += 1\n    ans += temp // (k + 1)\n    print(ans)", "testcases = int(input())\nfor i in range(testcases):\n    (N, k) = map(int, input().split())\n    table = input()\n    vacant = 0\n    j = 0\n    addition = 0\n    while j < N:\n        if table[j] == '1':\n            j += k + 1\n            if vacant > 0:\n                addition += vacant // (k + 1)\n                vacant = 0\n        else:\n            vacant += 1\n            j += 1\n    if vacant > 0:\n        addition += vacant // (k + 1)\n        if vacant % (k + 1) > 0:\n            addition += 1\n    print(addition)", "import math\nn = int(input())\nlst = []\nfor _ in range(n):\n    (x, k) = map(int, input().split())\n    lst1 = []\n    sum = 0\n    str1 = input()\n    for i in range(x):\n        if str1[i] == '1':\n            lst1.append(i + 1)\n    if len(lst1) == 0:\n        sum += math.ceil(x / (k + 1))\n    elif len(lst1) == 1:\n        sum += int((lst1[0] - 1) / (k + 1))\n        sum += int((x - lst1[0]) / (k + 1))\n    else:\n        y = len(lst1)\n        for i in range(len(lst1) - 1):\n            sum += int((lst1[i + 1] - lst1[i]) / (k + 1)) - 1\n        sum += int((lst1[0] - 1) / (k + 1))\n        sum += int((x - lst1[y - 1]) / (k + 1))\n    lst.append(sum)\nfor val in lst:\n    print(val)", "def solve():\n    from math import ceil\n    for _ in range(int(input())):\n        (n, k) = map(int, input().strip().split())\n        s = list(input())\n        if n == 1:\n            if s[0] == '1':\n                print(0)\n            else:\n                print(1)\n        elif s.count('1') == 0:\n            if n == 1 or n <= k + 1:\n                print(1)\n                continue\n            else:\n                print(ceil(n / (k + 1)))\n        else:\n            l = []\n            c = 0\n            for i in range(n):\n                if s[i] == '1':\n                    l.append(i)\n                    c += 1\n            cf = 0\n            for i in range(len(l)):\n                if i == 0:\n                    cf += l[i] // (k + 1)\n                else:\n                    d = l[i] - l[i - 1] - 1\n                    q = d // (k + 1)\n                    x = d % (k + 1)\n                    if x < k:\n                        cf += q - 1\n                    else:\n                        cf += q\n            d = n - 1 - l[-1]\n            cf += d // (k + 1)\n            print(cf)\nsolve()"]