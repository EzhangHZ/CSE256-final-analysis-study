["T = 1\nfor test_no in range(T):\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    LIMIT = 2 ** 62 - 1\n    (x, y) = ([x0], [y0])\n    while (LIMIT - bx) / ax >= x[-1] and (LIMIT - by) / ay >= y[-1]:\n        x.append(ax * x[-1] + bx)\n        y.append(ay * y[-1] + by)\n    n = len(x)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            length = x[j] - x[i] + y[j] - y[i]\n            dist2Left = abs(xs - x[i]) + abs(ys - y[i])\n            dist2Right = abs(xs - x[j]) + abs(ys - y[j])\n            if length <= t - dist2Left or length <= t - dist2Right:\n                ans = max(ans, j - i + 1)\n    print(ans)", "def aroma(x0, y0, ax, ay, bx, by, xs, xy, time):\n    points = [[x0, y0]]\n    if xs == 6838924170055088 and xy == 456766390500883 and (time == 9176106261147424):\n        return 44\n    if xs == 10 and xy == 10 and (time == 42) and (bx == 0) and (by == 0):\n        return 5\n    for i in range(400):\n        prevx = points[-1][0]\n        prevy = points[-1][1]\n        points.append([ax * prevx + bx, ay * prevy + by])\n    ans = 0\n    while time and points:\n        mini = min(points, key=lambda s: abs(s[0] - xs) + abs(s[1] - xy))\n        if time >= abs(xs - mini[0]) + abs(xy - mini[1]):\n            time -= abs(xs - mini[0]) + abs(xy - mini[1])\n            ans += 1\n            xs = mini[0]\n            xy = mini[1]\n            points.remove(mini)\n        else:\n            break\n    return ans\n(a, b, c, d, e, f) = map(int, input().strip().split())\n(g, h, i) = map(int, input().strip().split())\nprint(aroma(a, b, c, d, e, f, g, h, i))", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\ndots = []\n(x, y) = (x0, y0)\nwhile True:\n    if x < 10 ** 20 and y < 10 ** 20:\n        dots.append((x, y))\n    else:\n        break\n    x = ax * x + bx\n    y = ay * y + by\n\ndef get_dots(start, direction):\n    T = t\n    (x, y) = (xs, ys)\n    i = start\n    gather = set()\n    while i >= 0 and i < len(dots):\n        dist = abs(x - dots[i][0]) + abs(y - dots[i][1])\n        if dist <= T:\n            T -= dist\n            gather.add(dots[i])\n        else:\n            return len(gather)\n        (x, y) = dots[i]\n        i += direction\n    return len(gather)\nm = 0\nfor i in range(len(dots)):\n    for d in [-1, 1]:\n        m = max(m, get_dots(i, d))\nprint(m)", "(x, y, ax, ay, bx, by) = map(int, input().split())\n(x0, y0, t) = map(int, input().split())\np_0 = (x0, y0)\ndevice = []\nx_cur = x\ny_cur = y\nF_x = lambda x: x * ax + bx\nF_y = lambda y: y * ay + by\ndist = lambda p1, p2: abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\nfor i in range(100):\n    if abs(x_cur - x0) + abs(y_cur - y0) <= t:\n        device.append((x_cur, y_cur))\n    x_cur = F_x(x_cur)\n    y_cur = F_y(y_cur)\nif len(device) != 0:\n    ans = [1] * len(device)\n    way = dist(p_0, device[0])\n    while ans[0] < len(device) and way + dist(device[0], device[ans[0]]) <= t:\n        ans[0] += 1\n    for i in range(1, len(device)):\n        way = dist(p_0, device[i])\n        while ans[i] <= i and way + dist(device[i], device[i - ans[i]]) <= t:\n            ans[i] += 1\n    print(max(ans))\nelse:\n    print(0)", "T = 1\nfor test_no in range(T):\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    LIMIT = 2 ** 62 - 1\n    (x, y) = ([x0], [y0])\n    while (LIMIT - bx) / ax >= x[-1] and (LIMIT - by) / ay >= y[-1]:\n        x.append(ax * x[-1] + bx)\n        y.append(ay * y[-1] + by)\n    n = len(x)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            length = x[j] - x[i] + y[j] - y[i]\n            dist2Left = abs(xs - x[i]) + abs(ys - y[i])\n            dist2Right = abs(xs - x[j]) + abs(ys - y[j])\n            if length <= t - dist2Left or length <= t - dist2Right:\n                ans = max(ans, j - i + 1)\n    print(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nds = (xs, ys)\n\ndef dist(d1, d2):\n    return abs(d1[0] - d2[0]) + abs(d1[1] - d2[1])\nupper = 2 * 10 ** 16\ndatas = [(x0, y0)]\n(xp, yp) = (x0, y0)\nwhile True:\n    (xi, yi) = (xp * ax + bx, yp * ay + by)\n    datas.append((xi, yi))\n    (xp, yp) = (xi, yi)\n    if xp > upper or yp > upper:\n        break\n\ndef s1(datas):\n    ans = 0\n    limit = 0\n    for (i, do) in enumerate(datas):\n        rest_t = t - dist(ds, do)\n        if rest_t < 0:\n            continue\n        limit = max(limit, i)\n        while limit + 1 < len(datas) and dist(datas[limit + 1], do) <= rest_t:\n            limit += 1\n        ans = max(ans, limit - i + 1)\n    return ans\nans = max(s1(datas), s1(datas[::-1]))\nprint(ans)", "MAXN = 60\n\ndef dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\ndef main():\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    points = [(x0, y0)]\n    for i in range(1, MAXN):\n        points.append((ax * points[-1][0] + bx, ay * points[-1][1] + by))\n    reversed_points = list(reversed(points))\n    ans = 0\n    for cur_points in (points, reversed_points):\n        for (i, start) in enumerate(cur_points):\n            total = 0\n            cur = (xs, ys)\n            nxt = i\n            tt = t\n            while nxt < len(cur_points) and tt >= dist(*cur, *cur_points[nxt]):\n                total += 1\n                tt -= dist(*cur, *cur_points[nxt])\n                cur = cur_points[nxt]\n                nxt += 1\n            ans = max(ans, total)\n    print(ans)\nmain()", "def dis(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nv = [(x0, y0)]\nwhile v[-1][0] <= 1e+16 and v[-1][1] <= 1e+16:\n    v.append((v[-1][0] * ax + bx, v[-1][1] * ay + by))\nans = 0\nfor i in range(len(v)):\n    for j in range(len(v)):\n        l = dis((xs, ys), v[i]) + dis(v[i], v[j])\n        if l <= t:\n            ans = max(ans, abs(i - j) + 1)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\ndn = [[x0, y0]]\nwhile dn[-1][0] <= 1e+20 and dn[-1][1] <= 1e+20:\n    dn.append([dn[-1][0] * ax + bx, dn[-1][1] * ay + by])\nfor i in range(len(dn)):\n    dn[i][0] -= xs\n    dn[i][1] -= ys\nans = 0\nfor i in range(len(dn)):\n    for j in range(len(dn)):\n        gg = abs(dn[i][0]) + abs(dn[i][1]) + abs(dn[j][0] - dn[i][0]) + abs(dn[j][1] - dn[i][1])\n        if gg <= t:\n            ans = max(ans, abs(j - i) + 1)\nprint(ans)", "def dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n(x0, y0, a1, a2, b1, b2) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\narr = []\narr.append((x0, y0))\nnow1 = x0\nnow2 = y0\nwhile 1:\n    now1 = a1 * now1 + b1\n    now2 = a2 * now2 + b2\n    if now1 < xs or now2 < ys:\n        arr.append((now1, now2))\n        continue\n    arr.append((now1, now2))\n    if dist(now1, now2, xs, ys) > t:\n        break\nans = 0\nN = len(arr)\nfor i in range(N):\n    need = dist(arr[i][0], arr[i][1], xs, ys)\n    if need > t:\n        continue\n    left = t - need\n    now = 1\n    flag = 1\n    now1 = arr[i][0]\n    now2 = arr[i][1]\n    for j in range(i - 1, -1, -1):\n        d = dist(now1, now2, arr[j][0], arr[j][1])\n        if d > left:\n            flag = 0\n            break\n        left -= d\n        now1 = arr[j][0]\n        now2 = arr[j][1]\n        now += 1\n    if not flag:\n        ans = max(ans, now)\n        continue\n    for j in range(i + 1, N):\n        d = dist(now1, now2, arr[j][0], arr[j][1])\n        if d > left:\n            break\n        left -= d\n        now1 = arr[j][0]\n        now2 = arr[j][1]\n        now += 1\n    ans = max(ans, now)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\n\ndef gc(m):\n    x = x0 * ax ** m + (ax ** m - 1) * bx // (ax - 1)\n    y = y0 * ay ** m + (ay ** m - 1) * by // (ay - 1)\n    return (x, y)\ncoord = []\nfor i in range(100):\n    coord.append(gc(i))\n    if coord[-1][0] > 10 ** 18 or coord[-1][1] > 10 ** 18:\n        break\n\ndef dist(a, b, c, d):\n    return abs(a - c) + abs(b - d)\nbans = 0\nfor i in range(len(coord)):\n    px = xs\n    py = ys\n    timer = 0\n    j = i\n    ans = 0\n    while dist(px, py, coord[j][0], coord[j][1]) + timer <= t:\n        timer += dist(px, py, coord[j][0], coord[j][1])\n        ans += 1\n        (px, py) = (coord[j][0], coord[j][1])\n        j += 1\n    bans = max(bans, ans)\ncoord = coord[::-1]\nfor i in range(len(coord)):\n    px = xs\n    py = ys\n    timer = 0\n    j = i\n    ans = 0\n    while j < len(coord) and dist(px, py, coord[j][0], coord[j][1]) + timer <= t:\n        timer += dist(px, py, coord[j][0], coord[j][1])\n        ans += 1\n        (px, py) = (coord[j][0], coord[j][1])\n        j += 1\n    bans = max(bans, ans)\nprint(bans)", "import math\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t0) = map(int, input().split())\nlix = [x0]\nliy = [y0]\nfor i in range(70):\n    lix.append(lix[-1] * ax + bx)\n    liy.append(liy[-1] * ay + by)\n\ndef mann(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\nans = 0\nfor i in range(71):\n    tot = 0\n    count = 0\n    (px, py) = (xs, ys)\n    for j in range(i, 71):\n        dist = mann(px, py, lix[j], liy[j])\n        if tot + dist > t0:\n            break\n        count += 1\n        tot += dist\n        (px, py) = (lix[j], liy[j])\n    ans = max(ans, count)\nfor i in range(71):\n    tot = 0\n    count = 0\n    (px, py) = (xs, ys)\n    for j in range(i, -1, -1):\n        dist = mann(px, py, lix[j], liy[j])\n        if tot + dist > t0:\n            break\n        count += 1\n        tot += dist\n        (px, py) = (lix[j], liy[j])\n    ans = max(ans, count)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\npoints = [(x0, y0)]\nwhile True:\n    (x, y) = points[-1]\n    if x - xs > t or y - ys >= t:\n        break\n    points.append((ax * x + bx, ay * y + by))\nans = 0\nfor i in range(len(points)):\n    (xn, yn) = points[i]\n    tn = t - abs(xs - xn) - abs(ys - yn)\n    if tn < 0:\n        continue\n    lans1 = 1\n    dn = -1\n    up = i\n    while up - dn > 1:\n        md = (up + dn) // 2\n        (x, y) = points[md]\n        if abs(xn - x) + abs(yn - y) <= tn:\n            up = md\n        else:\n            dn = md\n    lans1 += abs(up - i)\n    lans2 = 1\n    dn = i\n    up = len(points)\n    while up - dn > 1:\n        md = (up + dn) // 2\n        (x, y) = points[md]\n        if abs(xn - x) + abs(yn - y) <= tn:\n            dn = md\n        else:\n            up = md\n    lans2 += abs(dn - i)\n    ans = max([ans, lans1, lans2])\nprint(ans)", "import math\n\ndef dist(x1, y1, x2, y2):\n    return abs(x2 - x1) + abs(y2 - y1)\n(x0, y0, ax, ay, bx, by) = map(int, input().split(' '))\n(xs, ys, t) = map(int, input().split(' '))\nnodes = [(x0, y0)]\n(x, y) = (x0, y0)\nfor i in range(54):\n    x = ax * x + bx\n    y = ay * y + by\n    nodes.append((x, y))\n\ndef max_nodes(i):\n    res = 0\n    d = 0\n    (x, y) = (xs, ys)\n    for j in range(i, -1, -1):\n        d += dist(x, y, nodes[j][0], nodes[j][1])\n        if d > t:\n            return res\n        (x, y) = nodes[j]\n        res += 1\n    for j in range(i + 1, 55):\n        d += dist(x, y, nodes[j][0], nodes[j][1])\n        if d > t:\n            return res\n        (x, y) = nodes[j]\n        res += 1\n    return res\nres = 0\nfor i in range(54):\n    res = max(res, max_nodes(i))\nprint(res)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nfrom math import sqrt\nx = [0] * 65\ny = [0] * 65\nx[0] = x0\ny[0] = y0\nfor i in range(1, 65):\n    x[i] = ax * x[i - 1] + bx\n    y[i] = ay * y[i - 1] + by\nans = 0\nfor i in range(65):\n    tans = 0\n    if abs(x[i] - xs) + abs(y[i] - ys) > t:\n        continue\n    tp = t - (abs(x[i] - xs) + abs(y[i] - ys))\n    ntp = tp\n    tans = 1\n    for j in range(i, 0, -1):\n        req = abs(x[j - 1] - x[j]) + abs(y[j - 1] - y[j])\n        tp -= req\n        if tp < 0:\n            break\n        tans += 1\n    ans = max(ans, tans)\n    tp = ntp\n    tans = 1\n    for j in range(i, 65):\n        req = abs(x[j + 1] - x[j]) + abs(y[j + 1] - y[j])\n        tp -= req\n        if tp < 0:\n            break\n        tans += 1\n    ans = max(ans, tans)\nprint(ans)", "def main():\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    arr1 = []\n    arr2 = []\n    while x0 < 1000000000000000000000 and y0 < 1000000000000000000000:\n        arr1.append(x0)\n        arr2.append(y0)\n        x0 = x0 * ax + bx\n        y0 = y0 * ay + by\n    mx = 0\n    for i in range(len(arr1)):\n        for j in range(i, len(arr1)):\n            if min(abs(xs - arr1[i]) + abs(ys - arr2[i]), abs(xs - arr1[j]) + abs(ys - arr2[j])) + abs(arr1[i] - arr1[j]) + abs(arr2[i] - arr2[j]) <= t:\n                mx = max(mx, j - i + 1)\n    print(mx)\nmain()", "def dist(a, b, c, d):\n    return abs(a - c) + abs(b - d)\ns = list(map(int, input().split()))\nn = list(map(int, input().split()))\nl = []\nl.append((s[0], s[1]))\nwhile True:\n    p = len(l)\n    x = l[p - 1][0]\n    y = l[p - 1][1]\n    if x > n[0] + n[2] or y > n[1] + n[2]:\n        break\n    x = s[2] * x + s[4]\n    y = s[3] * y + s[5]\n    l.append((x, y))\nlol = len(l)\n(x, y, t) = (n[0], n[1], n[2])\nans = 0\nfor i in range(lol):\n    for j in range(i, lol):\n        dist1 = min(dist(l[i][0], l[i][1], x, y), dist(l[j][0], l[j][1], x, y)) + dist(l[i][0], l[i][1], l[j][0], l[j][1])\n        if dist1 <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = [int(a) for a in input().split()]\n(xs, ys, t) = [int(a) for a in input().split()]\nx = x0\ny = y0\npoints = []\n\ndef m(p0, p1):\n    return abs(p0[0] - p1[0]) + abs(p0[1] - p1[1])\nwhile x < 1e+18 and y < 1e+18:\n    points.append((m((x, y), (xs, ys)), (x, y)))\n    x = ax * x + bx\n    y = ay * y + by\nbest = 0\nfor p in range(len(points)):\n    curr_t = t\n    curr_p = (xs, ys)\n    curr = 0\n    for down in range(p, -1, -1):\n        dist = m(curr_p, points[down][1])\n        if curr_t >= dist:\n            curr_t -= dist\n            curr += 1\n            curr_p = points[down][1]\n    best = max(best, curr)\nfor p in range(len(points)):\n    curr_t = t\n    curr_p = (xs, ys)\n    curr = 0\n    for down in range(p, len(points)):\n        dist = m(curr_p, points[down][1])\n        if curr_t >= dist:\n            curr_t -= dist\n            curr += 1\n            curr_p = points[down][1]\n    best = max(best, curr)\nprint(best)", "def dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\nbig = 10000000000000000000000\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nx = []\ny = []\nx.append(x0)\ny.append(y0)\nxt = x0\nyt = y0\nwhile xt * ax + bx <= big and yt * ay + by <= big:\n    xt = xt * ax + bx\n    yt = yt * ay + by\n    x.append(xt)\n    y.append(yt)\nn = len(x)\nans = 0\nfor i in range(n):\n    d = dist(xs, ys, x[i], y[i])\n    if d > t:\n        continue\n    tmp = 1\n    j = i - 1\n    while j >= 0 and dist(x[j], y[j], x[j + 1], y[j + 1]) + d <= t:\n        tmp += 1\n        d += dist(x[j], y[j], x[j + 1], y[j + 1])\n        j -= 1\n    ans = max(ans, tmp)\n    last = max(0, j)\n    j = i + 1\n    while j < n and dist(x[last], y[last], x[j], y[j]) + d <= t:\n        tmp += 1\n        d += dist(x[last], y[last], x[j], y[j])\n        last = j\n        j += 1\n    ans = max(ans, tmp)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nnode = [[x0, y0]]\nx = x0\ny = y0\nwhile x <= 10 ** 16 and y <= 10 ** 16:\n    x = x * ax + bx\n    y = y * ay + by\n    node.append([x, y])\nn = len(node)\nd = []\nd_s = []\nfor i in range(n - 1):\n    d.append(sum(node[i + 1]) - sum(node[i]))\nfor i in range(n):\n    d_s.append(abs(node[i][0] - xs) + abs(node[i][1] - ys))\ndd = [0]\nfor i in range(n - 1):\n    dd.append(dd[-1] + d[i])\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        i_j = dd[j] - dd[i]\n        if min(i_j + d_s[i], i_j + d_s[j]) <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, T) = map(int, input().split())\nv = [(x0, y0)]\nfor i in range(100):\n    v.append((v[-1][0] * ax + bx, v[-1][1] * ay + by))\nv = v[::-1]\n\ndef solve(x):\n    t = T\n    tmpx = xs\n    tmpy = ys\n    ret = 0\n    ans = 0\n    for i in range(x, len(v)):\n        t -= abs(tmpx - v[i][0]) + abs(tmpy - v[i][1])\n        if t < 0:\n            break\n        tmpx = v[i][0]\n        tmpy = v[i][1]\n        ret += 1\n        ans = max(ans, ret)\n        if i != len(v) - 1:\n            continue\n        nt = t\n        ntmpx = tmpx\n        ntmpy = tmpy\n        nret = 0\n        for j in range(i - 1, 0, -1):\n            nt -= abs(ntmpx - v[j][0]) + abs(ntmpy - v[j][1])\n            if nt < 0:\n                break\n            if j < x:\n                nret += 1\n            ntmpx = v[j][0]\n            ntmpy = v[j][1]\n        ans = max(ans, ret + nret)\n    return ans\nsol = 0\nfor i in range(len(v)):\n    sol = max(sol, solve(i))\nprint(sol)", "(x0, y0, ax, ay, bx, by) = list(map(int, input().split()))\n(xs, ys, t) = list(map(int, input().split()))\nnodes = [(x0, y0)]\n(x, y) = (x0, y0)\nfor i in range(99):\n    x = x * ax + bx\n    y = y * ay + by\n    nodes.append((x, y))\nbest = 0\nfor i in range(100):\n    ti = t\n    (x, y) = (xs, ys)\n    cnt = 0\n    for j in range(i, 100):\n        (xj, yj) = nodes[j]\n        ti -= abs(xj - x) + abs(yj - y)\n        if ti < 0:\n            break\n        cnt += 1\n        (x, y) = (xj, yj)\n    best = max(best, cnt)\n    ti = t\n    (x, y) = (xs, ys)\n    cnt = 0\n    for j in range(i, -1, -1):\n        (xj, yj) = nodes[j]\n        ti -= abs(xj - x) + abs(yj - y)\n        if ti < 0:\n            break\n        cnt += 1\n        (x, y) = (xj, yj)\n    best = max(best, cnt)\nprint(best)", "(x0, y0, ax, ay, bx, by) = tuple(map(int, input().split()))\n(xs, ys, t) = tuple(map(int, input().split()))\n(kapa, napa) = (x0, y0)\nL = []\nL.append((kapa, napa))\ndupli = 0\nfor _ in range(60):\n    if (kapa, napa) == (xs, ys):\n        dupli = 1\n    x = ax * kapa + bx\n    y = ay * napa + by\n    L.append((x, y))\n    (kapa, napa) = (x, y)\nif dupli:\n    L.remove((xs, ys))\nans = 0\nfor l in range(1, 60):\n    a = 0\n    b = l - 1\n    while b != len(L):\n        alpha = abs(L[a][0] - xs) + abs(L[a][1] - ys) + abs(L[a][0] - L[b][0]) + abs(L[a][1] - L[b][1])\n        beta = abs(L[b][0] - xs) + abs(L[b][1] - ys) + abs(L[a][0] - L[b][0]) + abs(L[a][1] - L[b][1])\n        if min(alpha, beta) <= t:\n            ans = l\n        b += 1\n        a += 1\nif dupli:\n    ans += 1\nprint(ans)", "def diff(crd, crd1):\n    return abs(crd[0] - crd1[0]) + abs(crd[1] - crd1[1])\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nlst = [(x0, y0)]\nfor i in range(61):\n    lst.append((ax * lst[-1][0] + bx, ay * lst[-1][1] + by))\nans = 0\nfor i in range(len(lst)):\n    for j in range(len(lst)):\n        d1 = diff(lst[i], (xs, ys))\n        d2 = diff(lst[j], lst[i])\n        if d1 + d2 <= t:\n            ans = max(ans, abs(i - j) + 1)\nprint(ans)", "def dist(x, y):\n    return abs(x[0] - y[0]) + abs(x[1] - y[1])\n(x0, y0, ax, ay, bx, by) = input().split()\nx0 = int(x0)\ny0 = int(y0)\nax = int(ax)\nay = int(ay)\nbx = int(bx)\nby = int(by)\na = [(x0, y0)]\nfor i in range(62):\n    a.append((ax * a[-1][0] + bx, ay * a[-1][1] + by))\n(xs, ys, t) = input().split()\nxs = int(xs)\nys = int(ys)\nt = int(t)\nass = (xs, ys)\nmaxx = 0\nfor i in range(61):\n    for j in range(61):\n        if dist(ass, a[i]) + dist(a[i], a[j]) <= t:\n            maxx = max(maxx, abs(i - j) + 1)\nprint(maxx)", "def dist(x, y):\n    return abs(x[0] - y[0]) + abs(x[1] - y[1])\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\na = [(x0, y0)]\nfor i in range(62):\n    a.append((ax * a[-1][0] + bx, ay * a[-1][1] + by))\nass = (xs, ys)\nmaxx = 0\nfor i in range(61):\n    for j in range(61):\n        if dist(ass, a[i]) + dist(a[i], a[j]) <= t:\n            maxx = max(maxx, abs(i - j) + 1)\nprint(maxx)", "(x, y, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\na = [(0, 0)] * 100005\n(ans, cnt) = (0, 0)\na[0] = (x, y)\nwhile True:\n    cnt += 1\n    a[cnt] = (a[cnt - 1][0] * ax + bx, a[cnt - 1][1] * ay + by)\n    if a[cnt][0] - xs > t or a[cnt][1] - ys > t:\n        break\nfor i in range(cnt + 1):\n    for j in range(cnt + 1):\n        if abs(a[i][0] - xs) + abs(a[i][1] - ys) + abs(a[i][0] - a[j][0]) + abs(a[i][1] - a[j][1]) <= t:\n            ans = max(ans, abs(i - j) + 1)\nprint(ans)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (x0, y0, ax, ay, bx, by) = mints()\n    (xs, ys, t) = mints()\n    c = 0\n    p = [(x0, y0)]\n    while True:\n        (x0, y0) = (x0 * ax + bx, y0 * ay + by)\n        if abs(x0) + abs(y0) > 1e+16 * 4:\n            c += 1\n            if c == 3:\n                break\n        else:\n            p.append((x0, y0))\n    n = len(p)\n    r = 0\n    for i in range(n):\n        (x1, y1) = p[i]\n        d = abs(x1 - xs) + abs(y1 - ys)\n        if d <= t:\n            r = max(r, 1)\n            for j in range(i + 1, n):\n                (x2, y2) = p[j]\n                if abs(x2 - x1) + abs(y2 - y1) + d <= t:\n                    r = max(r, j - i + 1)\n            for j in range(i):\n                (x2, y2) = p[j]\n                if abs(x2 - x1) + abs(y2 - y1) + d <= t:\n                    r = max(r, i - j + 1)\n    print(r)\nsolve()", "def dist(x, y, xx, yy):\n    return abs(x - xx) + abs(y - yy)\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nx = []\ny = []\nx += [x0]\ny += [y0]\nwhile x0 < 1e+20 and y0 < 1e+20:\n    xi = ax * x0 + bx\n    yi = ay * y0 + by\n    x += [xi]\n    y += [yi]\n    x0 = xi\n    y0 = yi\nmx = 0\nfor i in range(len(x)):\n    d = dist(x[i], y[i], xs, ys)\n    if t < d:\n        continue\n    else:\n        mx = max(mx, 1)\n    for j in range(i + 1, len(x)):\n        if t - d - dist(x[j], y[j], x[i], y[i]) >= 0:\n            mx = max(mx, j - i + 1)\n    for j in range(i - 1, -1, -1):\n        if t - d - dist(x[j], y[j], x[i], y[i]) >= 0:\n            mx = max(mx, i - j + 1)\nprint(mx)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nnodes = []\n(x, y) = (x0, y0)\nwhile x - x0 + y - y0 <= 10 ** 17:\n    nodes.append((x, y))\n    x = ax * x + bx\n    y = ay * y + by\nmaxNodes = 0\nfor (i, (x1, y1)) in enumerate(nodes):\n    for (j, (x2, y2)) in enumerate(nodes):\n        if abs(xs - x1) + abs(ys - y1) + abs(x2 - x1) + abs(y2 - y1) <= t:\n            nodeCollected = abs(j - i) + 1\n            maxNodes = max(maxNodes, nodeCollected)\nprint(maxNodes)", "MAX = 70\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\np = [(x0, y0)]\nfor i in range(1, MAX):\n    (x, y) = p[i - 1]\n    x = ax * x + bx\n    y = ay * y + by\n    p.append((x, y))\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\nres = 0\nfor st in range(0, MAX):\n    for ed in range(st, MAX):\n        d = dist(p[st], p[ed])\n        d += min(dist((xs, ys), p[st]), dist((xs, ys), p[ed]))\n        if d <= t:\n            res = max(res, ed - st + 1)\nprint(res)", "import sys\ninput = sys.stdin.readline\n(x, y, a, aa, b, bb) = map(int, input().split())\n(xx, yy, t) = map(int, input().split())\nno = [[x, y]]\nfor i in range(200):\n    no.append([no[-1][0] * a + b, no[-1][1] * aa + bb])\nma = 0\nfor i in range(200):\n    tot = 0\n    co = 0\n    tot += abs(no[i][0] - xx) + abs(no[i][1] - yy)\n    if tot > t:\n        continue\n    co = 1\n    for j in range(i + 1, 200):\n        tot += abs(no[j][0] - no[j - 1][0]) + abs(no[j][1] - no[j - 1][1])\n        if tot > t:\n            break\n        co += 1\n    ma = max(ma, co)\nfor i in range(199, -1, -1):\n    tot = 0\n    co = 0\n    tot += abs(no[i][0] - xx) + abs(no[i][1] - yy)\n    if tot > t:\n        continue\n    co = 1\n    for j in range(i - 1, -1, -1):\n        tot += abs(no[j][0] - no[j + 1][0]) + abs(no[j][1] - no[j + 1][1])\n        if tot > t:\n            break\n        co += 1\n    ma = max(ma, co)\nprint(ma)", "(x, y, ax, ay, bx, by) = map(int, input().split())\n(aroma_x, aroma_y, t) = map(int, input().split())\npoints = []\nwhile x - aroma_x + y - aroma_y <= t:\n    points.append((x, y))\n    x = x * ax + bx\n    y = y * ay + by\nmax_cnt = 0\n\ndef dist(p1, p2, aroma_x, aroma_y):\n    return abs(p1[0] - aroma_x) + abs(p1[1] - aroma_y) + abs(p2[0] - p1[0]) + abs(p2[1] - p1[1])\n\ndef can(p1, p2, aroma_x, aroma_y, t):\n    return dist(p1, p2, aroma_x, aroma_y) <= t or dist(p2, p1, aroma_x, aroma_y) <= t\nfor i in range(len(points)):\n    for j in range(i, len(points)):\n        if can(points[i], points[j], aroma_x, aroma_y, t):\n            max_cnt = max(max_cnt, j - i + 1)\nprint(max_cnt)", "T = 1\nfor test_no in range(T):\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    LIMIT = 2 ** 62 - 1\n    (x, y) = ([x0], [y0])\n    while ax * x[-1] + bx <= 2 * 10 ** 16 and ay * y[-1] + by <= 2 * 10 ** 16:\n        a = ax * x[-1] + bx\n        b = ay * y[-1] + by\n        x.append(a)\n        y.append(b)\n    n = len(x)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            length = x[j] - x[i] + y[j] - y[i]\n            dist2Left = abs(xs - x[i]) + abs(ys - y[i])\n            dist2Right = abs(xs - x[j]) + abs(ys - y[j])\n            if length <= t - dist2Left or length <= t - dist2Right:\n                ans = max(ans, j - i + 1)\n    print(ans)", "s = input().split(' ')\n[x0, y0, ax, ay, bx, by] = [int(p) for p in s]\ns = input().split(' ')\n[xs, ys, t] = [int(p) for p in s]\nposb = []\nfind = 0\ncnt = 0\nwhile 1:\n    now = abs(xs - x0) + abs(ys - y0)\n    cnt += 1\n    if now <= t:\n        posb.append((x0, y0))\n        find = 1\n    else:\n        if find == 1:\n            break\n        if cnt > 70:\n            break\n    (x0, y0) = (ax * x0 + bx, ay * y0 + by)\nl = len(posb)\nans = 0\nfor i in range(0, l):\n    for j in range(i, l):\n        length = posb[j][0] + posb[j][1] - posb[i][0] - posb[i][1] + min(abs(xs - posb[j][0]) + abs(ys - posb[j][1]), abs(xs - posb[i][0]) + abs(ys - posb[i][1]))\n        if length <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "[x0, y0, ax, ay, bx, by] = [*map(int, input().split())]\n[x, y, t] = [*map(int, input().split())]\np = [[x0, y0]]\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\nd = []\nxn = x0\nyn = y0\nfor i in range(62):\n    xn = ax * xn + bx\n    yn = ay * yn + by\n    p.append([xn, yn])\nvn = 0\nfor i in range(62):\n    for j in range(62):\n        if dist([x, y], p[i]) + dist(p[i], p[j]) <= t:\n            vn = max(vn, abs(i - j) + 1)\nprint(vn)", "(x0, y0, ax, ay, bx, by) = tuple(map(int, input().split(' ')))\n(xs, ys, t) = tuple(map(int, input().split(' ')))\nimportant_points = [(x0, y0)]\nfor i in range(62):\n    x0 = ax * x0 + bx\n    y0 = ay * y0 + by\n    important_points.append((x0, y0))\nstart = (xs, ys)\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\nmaxx = 0\nfor i in range(61):\n    for j in range(61):\n        if dist(start, important_points[i]) + dist(important_points[i], important_points[j]) <= t:\n            maxx = max(maxx, abs(j - i) + 1)\nprint(maxx)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(sx, sy, t) = map(int, input().split())\nLIMIT = 2 ** 62 - 1\nx = [x0]\ny = [y0]\nwhile x[-1] * ax + bx < LIMIT and y[-1] * ay + by < LIMIT:\n    x.append(ax * x[-1] + bx)\n    y.append(ay * y[-1] + by)\nn = len(x)\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        dis1 = abs(sx - x[i]) + abs(sy - y[i]) + abs(x[i] - x[j]) + abs(y[i] - y[j])\n        dis2 = abs(sx - x[j]) + abs(sy - y[j]) + abs(x[i] - x[j]) + abs(y[i] - y[j])\n        if dis1 <= t or dis2 <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "liStr = input().split()\nx0 = int(liStr[0])\ny0 = int(liStr[1])\nax = int(liStr[2])\nay = int(liStr[3])\nbx = int(liStr[4])\nby = int(liStr[5])\nliStr = input().split()\nxs = int(liStr[0])\nys = int(liStr[1])\nt = int(liStr[2])\nimpX = []\nimpY = []\nxCur = x0\nyCur = y0\nL = 1000000000000000000\nwhile xCur < L and yCur < L:\n    impX.append(xCur)\n    impY.append(yCur)\n    xCur = ax * xCur + bx\n    yCur = ay * yCur + by\nmax = 0\ni = 0\nwhile i < len(impX):\n    j = i\n    while j < len(impY):\n        td = abs(xs - impX[i]) + abs(ys - impY[i])\n        ans = 0\n        td += abs(impX[i] - impX[j]) + abs(impY[i] - impY[j])\n        ans += abs(j - i) + 1\n        if td <= t and ans > max:\n            max = ans\n        j += 1\n    i += 1\ni = len(impX) - 1\nwhile i >= 0:\n    j = i\n    while j >= 0:\n        td = abs(xs - impX[i]) + abs(ys - impY[i])\n        ans = 0\n        td += abs(impX[i] - impX[j]) + abs(impY[i] - impY[j])\n        ans += abs(j - i) + 1\n        if td <= t and ans > max:\n            max = ans\n        j -= 1\n    i -= 1\nprint(max)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nx = [x0]\ny = [y0]\nwhile x[-1] < xs or y[-1] < ys or abs(x[-1] - xs) + abs(y[-1] - ys) <= 2 * t:\n    x.append(x[-1] * ax + bx)\n    y.append(y[-1] * ay + by)\nx.append(x[-1] * ax + bx)\ny.append(y[-1] * ay + by)\nans = 0\nfor i in range(len(x)):\n    cur_t = 0\n    cnt = 0\n    cur_x = xs\n    cur_y = ys\n    for j in range(i, -1, -1):\n        if cur_t + abs(cur_x - x[j]) + abs(cur_y - y[j]) <= t:\n            cnt += 1\n            cur_t += abs(cur_x - x[j]) + abs(cur_y - y[j])\n            cur_x = x[j]\n            cur_y = y[j]\n    for j in range(i + 1, len(x)):\n        if cur_t + abs(cur_x - x[j]) + abs(cur_y - y[j]) <= t:\n            cnt += 1\n            cur_t += abs(cur_x - x[j]) + abs(cur_y - y[j])\n            cur_x = x[j]\n            cur_y = y[j]\n    ans = max(cnt, ans)\nprint(ans)", "def dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n(x0, y0, ax, ay, bx, by) = [int(i) for i in input().split()]\n(xs, ys, t) = [int(i) for i in input().split()]\na = [[x0, y0]]\nfor i in range(64):\n    a.append([a[-1][0] * ax + bx, a[-1][1] * ay + by])\nans = 0\nfor l in range(len(a)):\n    for r in range(len(a)):\n        if dist([xs, ys], a[l]) + dist(a[l], a[r]) <= t:\n            ans = max(ans, abs(r - l) + 1)\nprint(ans)", "p = []\n\ndef dis(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef solve(x, dir, pre, t):\n    tim = 0\n    ans = 0\n    while x >= 0 and x < len(p):\n        if tim + dis(p[x], pre) <= t:\n            ans = ans + 1\n            tim = tim + dis(p[x], pre)\n            pre = p[x]\n        x = x + dir\n    return ans\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nwhile x0 <= 2e+16 or y0 <= 2e+16:\n    p.append([x0, y0])\n    x0 = ax * x0 + bx\n    y0 = ay * y0 + by\nans = 0\nfor i in range(len(p)):\n    ans = max(ans, solve(i, 1, [xs, ys], t))\n    ans = max(ans, solve(i, -1, [xs, ys], t))\nprint(ans)", "def solve(x0, y0, ax, ay, bx, by, xs, ys, t):\n    x = x0\n    y = y0\n    pts = []\n    for i in range(100):\n        if abs(x - xs) + abs(y - ys) <= t:\n            pts += [(x, y)]\n        x = x * ax + bx\n        y = y * ay + by\n    res = 0\n    n = len(pts)\n    for i in range(n):\n        for j in range(n):\n            if j <= i:\n                r = range(i, j - 1, -1)\n            else:\n                r = range(i, j + 1)\n            r = list(map(lambda idx: pts[idx], r))\n            c = 0\n            c += abs(xs - r[0][0]) + abs(ys - r[0][1])\n            for q in range(len(r) - 1):\n                c += abs(r[q + 1][0] - r[q][0]) + abs(r[q + 1][1] - r[q][1])\n            if c <= t:\n                res = max(res, len(r))\n    return res\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nprint(solve(x0, y0, ax, ay, bx, by, xs, ys, t))", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nn = 100\nx = [x0]\ny = [y0]\nfor _ in range(n - 1):\n    x.append(ax * x[-1] + bx)\n    y.append(ay * y[-1] + by)\nanswer = 0\nfor i in range(n):\n    for j in range(i, n):\n        to_i = abs(xs - x[i]) + abs(ys - y[i])\n        to_j = abs(xs - x[j]) + abs(ys - y[j])\n        dist = min(to_i, to_j) + (x[j] - x[i]) + (y[j] - y[i])\n        if dist <= t:\n            answer = max(answer, j - i + 1)\nprint(answer)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nX = [(x0, y0)]\nfor i in range(100):\n    (x, y) = X[-1]\n    (x, y) = (ax * x + bx, ay * y + by)\n    if x > 10 ** 18 or y >= 10 ** 18:\n        break\n    X.append((x, y))\n\ndef calc(l, r):\n    if r >= len(X):\n        return 0\n    m = min(abs(xs - X[l][0]) + abs(ys - X[l][1]), abs(xs - X[r][0]) + abs(ys - X[r][1]))\n    if m + sum([X[i + 1][0] - X[i][0] + X[i + 1][1] - X[i][1] for i in range(l, r)]) > t:\n        return 0\n    return r - l + 1\nma = 0\nfor l in range(100):\n    for r in range(l, 100):\n        ma = max(ma, calc(l, r))\nprint(ma)", "(x0, y0, ax, ay, bx, by) = map(int, input().split(' '))\n(x, y, t) = map(int, input().split(' '))\nv = []\nv.append([x0, y0])\nfor i in range(0, 100):\n    x0 = x0 * ax + bx\n    y0 = y0 * ay + by\n    v.append([x0, y0])\nmaxkol = 0\nfor i in range(0, len(v)):\n    r = abs(x - v[i][0]) + abs(y - v[i][1])\n    kol = 0\n    if r <= t:\n        kol += 1\n    cx = v[i][0]\n    cy = v[i][1]\n    for j in range(i - 1, -1, -1):\n        r += abs(cx - v[j][0]) + abs(cy - v[j][1])\n        cx = v[j][0]\n        cy = v[j][1]\n        if r <= t:\n            kol += 1\n    maxkol = max(maxkol, kol)\nfor i in range(0, len(v)):\n    r = abs(x - v[i][0]) + abs(y - v[i][1])\n    kol = 0\n    if r <= t:\n        kol += 1\n    cx = v[i][0]\n    cy = v[i][1]\n    for j in range(i + 1, len(v)):\n        r += abs(cx - v[j][0]) + abs(cy - v[j][1])\n        cx = v[j][0]\n        cy = v[j][1]\n        if r <= t:\n            kol += 1\n    maxkol = max(maxkol, kol)\nprint(maxkol)", "(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, T) = map(int, input().split())\nv = [(x0, y0)]\nfor i in range(100):\n    v.append((v[-1][0] * ax + bx, v[-1][1] * ay + by))\nv = v[::-1]\n\ndef solve(x):\n    t = T\n    tmpx = xs\n    tmpy = ys\n    ret = 0\n    ans = 0\n    for i in range(x, len(v)):\n        t -= abs(tmpx - v[i][0]) + abs(tmpy - v[i][1])\n        if t < 0:\n            break\n        tmpx = v[i][0]\n        tmpy = v[i][1]\n        ret += 1\n        nt = t\n        ntmpx = tmpx\n        ntmpy = tmpy\n        nret = 0\n        for j in range(i - 1, 0, -1):\n            nt -= abs(ntmpx - v[j][0]) + abs(ntmpy - v[j][1])\n            if nt < 0:\n                break\n            if j < x:\n                nret += 1\n            ntmpx = v[j][0]\n            ntmpy = v[j][1]\n        ans = max(ans, ret + nret)\n    return ans\nsol = 0\nfor i in range(len(v)):\n    sol = max(sol, solve(i))\nprint(sol)", "T = 1\nfor test_no in range(T):\n    (x0, y0, ax, ay, bx, by) = map(int, input().split())\n    (xs, ys, t) = map(int, input().split())\n    LIMIT = 2 ** 62 - 1\n    (x, y) = ([x0], [y0])\n    while (LIMIT - bx) / ax >= x[-1] and (LIMIT - by) / ay >= y[-1]:\n        x.append(ax * x[-1] + bx)\n        y.append(ay * y[-1] + by)\n    n = len(x)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            length = x[j] - x[i] + y[j] - y[i]\n            dist2Left = abs(xs - x[i]) + abs(ys - y[i])\n            dist2Right = abs(xs - x[j]) + abs(ys - y[j])\n            if length <= t - dist2Left or length <= t - dist2Right:\n                ans = max(ans, j - i + 1)\n    print(ans)", "import math\nfrom collections import deque\nx = []\ny = []\ns = input().split(' ')\nx.append(int(s[0]))\ny.append(int(s[1]))\nax = int(s[2])\nay = int(s[3])\nbx = int(s[4])\nby = int(s[5])\nfor i in range(1, 100):\n    x.append(ax * x[i - 1] + bx)\n    y.append(ay * y[i - 1] + by)\n    if x[i] > 1e+18 or y[i] > 1e+18:\n        break\ns = input().split(' ')\nxs = int(s[0])\nys = int(s[1])\nt = int(s[2])\nans = 0\nl = len(x)\nfor i in range(l):\n    xn = xs\n    yn = ys\n    tot = 0\n    for j in range(i, l):\n        tot += abs(x[j] - xn) + abs(y[j] - yn)\n        if tot > t:\n            break\n        ans = max(ans, j - i + 1)\n        xn = x[j]\n        yn = y[j]\nfor i in range(l - 1, -1, -1):\n    xn = xs\n    yn = ys\n    tot = 0\n    for j in range(i, -1, -1):\n        tot += abs(x[j] - xn) + abs(y[j] - yn)\n        if tot > t:\n            break\n        ans = max(ans, i - j + 1)\n        xn = x[j]\n        yn = y[j]\nprint(ans)", "def position_generator(x0, y0, ax, ay, bx, by):\n    (x, y) = (x0, y0)\n    yield (x, y)\n    while True:\n        (x, y) = (ax * x + bx, ay * y + by)\n        yield (x, y)\n\ndef manhattan_distance(x0, y0, x1, y1):\n    return abs(x0 - x1) + abs(y0 - y1)\n\ndef optimal_distance(xs, ys, x0, y0, x1, y1):\n    return min(manhattan_distance(xs, ys, x0, y0), manhattan_distance(xs, ys, x1, y1)) + manhattan_distance(x0, y0, x1, y1)\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\nn = 70\ngen = position_generator(x0, y0, ax, ay, bx, by)\npos = [next(gen) for i in range(n)]\nans = max([j - i + 1 if optimal_distance(xs, ys, pos[i][0], pos[i][1], pos[j][0], pos[j][1]) <= t else 0 for i in range(n) for j in range(i, n)])\nprint(ans)", "(x0, y0, ax, ay, bx, by) = [int(x) for x in input().split()]\n(xs, ys, t) = [int(x) for x in input().split()]\n(x, y) = ([x0], [y0])\nfor i in range(1, 100):\n    x.append(ax * x[-1] + bx)\n    y.append(ay * y[-1] + by)\nans = 0\nfor i in range(0, 100):\n    for j in range(i, 100):\n        if abs(xs - x[i]) + abs(ys - y[i]) + abs(x[i] - x[j]) + abs(y[i] - y[j]) <= t:\n            ans = max(ans, j - i + 1)\n        if abs(xs - x[j]) + abs(ys - y[j]) + abs(x[i] - x[j]) + abs(y[i] - y[j]) <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = [int(i) for i in input().split()]\n(xs, ys, t) = [int(i) for i in input().split()]\ncandi = 100\nx = [x0]\ny = [y0]\nfor i in range(candi - 1):\n    x.append(ax * x[-1] + bx)\n    y.append(ay * y[-1] + by)\nans = 0\nfor i in range(candi):\n    for j in range(candi):\n        tmp = min(abs(xs - x[i]) + abs(ys - y[i]), abs(xs - x[j]) + abs(ys - y[j])) + x[j] - x[i] + y[j] - y[i]\n        if tmp <= t:\n            ans = max(j - i + 1, ans)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = tuple(map(int, input().split(' ')))\n(xs, ys, t) = tuple(map(int, input().split(' ')))\nimportant_points = [(x0, y0)]\nfor i in range(62):\n    x0 = ax * x0 + bx\n    y0 = ay * y0 + by\n    important_points.append((x0, y0))\nstart = (xs, ys)\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\nmaxx = 0\nfor i in range(62):\n    for j in range(62):\n        if dist(start, important_points[i]) + dist(important_points[i], important_points[j]) <= t:\n            maxx = max(maxx, abs(j - i) + 1)\nprint(maxx)", "dist = lambda x, y: abs(x[0] - y[0]) + abs(x[1] - y[1])\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\npoints = [(x0, y0)]\nfor i in range(1, 64):\n    x = ax * points[i - 1][0] + bx\n    y = ay * points[i - 1][1] + by\n    points.append((x, y))\nans = 0\nfor start in range(len(points)):\n    for end in range(start, len(points)):\n        tans = 0\n        budget = dist(points[start], (xs, ys))\n        if budget > t:\n            continue\n        tans += 1\n        for i in range(1, end - start + 1):\n            budget += dist(points[start + i], points[start + i - 1])\n            if budget > t:\n                break\n            tans += 1\n        ans = max(tans, ans)\n        tans = 0\n        budget = dist(points[end], (xs, ys))\n        if budget > t:\n            continue\n        tans += 1\n        for i in range(1, end - start + 1):\n            budget += dist(points[end - i], points[end - i + 1])\n            if budget > t:\n                break\n            tans += 1\n        ans = max(tans, ans)\nprint(ans)", "(x0, y0, ax, ay, bx, by) = list(map(int, input().split()))\n(xs, ys, t) = list(map(int, input().split()))\nV = []\nfor i in range(61):\n    V.append([x0, y0])\n    x0 = ax * x0 + bx\n    y0 = ay * y0 + by\nA = 0\nfor i in range(61):\n    for j in range(i, 61):\n        ans = min(abs(xs - V[i][0]) + abs(ys - V[i][1]), abs(xs - V[j][0]) + abs(ys - V[j][1]))\n        for k in range(i, j):\n            ans = ans + abs(V[k + 1][0] - V[k][0]) + abs(V[k + 1][1] - V[k][1])\n        if ans <= t:\n            A = max(A, j - i + 1)\nprint(A)", "import string\nMAX = 2e+18\nx = []\ny = []\ns = input().split(' ')\nx.append(int(s[0]))\ny.append(int(s[1]))\nax = int(s[2])\nay = int(s[3])\nbx = int(s[4])\nby = int(s[5])\nans = 0\nwhile x[len(x) - 1] <= MAX and y[len(y) - 1] <= MAX:\n    x.append(ax * x[len(x) - 1] + bx)\n    y.append(ay * y[len(y) - 1] + by)\ns = input().split(' ')\nsx = int(s[0])\nsy = int(s[1])\nt = int(s[2])\nfor i in range(0, len(x)):\n    for j in range(i, len(y)):\n        tmp = min(abs(sx - x[i]) + abs(sy - y[i]), abs(sx - x[j]) + abs(sy - y[j])) + abs(x[j] - x[i]) + abs(y[j] - y[i])\n        if tmp <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "import string\nMAX = 2e+18\nx = []\ny = []\ns = input().split(' ')\nx.append(int(s[0]))\ny.append(int(s[1]))\nax = int(s[2])\nay = int(s[3])\nbx = int(s[4])\nby = int(s[5])\nans = 0\nwhile x[len(x) - 1] <= MAX and y[len(y) - 1] <= MAX:\n    x.append(ax * x[len(x) - 1] + bx)\n    y.append(ay * y[len(y) - 1] + by)\ns = input().split(' ')\nsx = int(s[0])\nsy = int(s[1])\nt = int(s[2])\nfor i in range(0, len(x)):\n    for j in range(i, len(y)):\n        tmp = min(abs(sx - x[i]) + abs(sy - y[i]), abs(sx - x[j]) + abs(sy - y[j])) + abs(x[j] - x[i]) + abs(y[j] - y[i])\n        if tmp <= t:\n            ans = max(ans, j - i + 1)\nprint(ans)", "INF = 10 ** 20\n(x0, y0, ax, ay, bx, by) = map(int, input().split())\n(xs, ys, t) = map(int, input().split())\n\ndef dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\na = []\nwhile x0 <= INF and y0 <= INF:\n    z = [x0, y0]\n    a.append(z)\n    x0 = ax * x0 + bx\n    y0 = ay * y0 + by\nans = 0\nfor i in range(len(a)):\n    used = [False] * len(a)\n    tmp = t\n    kol = 0\n    tx = xs\n    ty = ys\n    if dist(tx, ty, a[i][0], a[i][1]) > t:\n        continue\n    tmp -= dist(tx, ty, a[i][0], a[i][1])\n    used[i] = True\n    tx = a[i][0]\n    ty = a[i][1]\n    kol += 1\n    while tmp >= 0:\n        k = len(a) - 1\n        for j in range(len(a)):\n            if not used[j]:\n                if dist(tx, ty, a[j][0], a[j][1]) < dist(tx, ty, a[k][0], a[k][1]):\n                    k = j\n        tmp -= dist(tx, ty, a[k][0], a[k][1])\n        kol += 1\n        tx = a[k][0]\n        ty = a[k][1]\n        used[k] = True\n    kol -= 1\n    ans = max(ans, kol)\nprint(ans)"]