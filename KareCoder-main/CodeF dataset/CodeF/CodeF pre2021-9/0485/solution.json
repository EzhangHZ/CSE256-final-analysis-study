["t = int(input())\n\ndef s(a, b, c):\n    p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\ndef Madara(a, b):\n    c = abs(a - b)\n    a = (1 + a ** 2) ** 0.5\n    b = (1 + b ** 2) ** 0.5\n    return round(s(a, b, c), 5)\n\ndef Kurisu():\n    t = int(input()) - 1\n    v = list(map(int, input().split()))\n    c = [-2] * len(v)\n    s = []\n    for i in range(t):\n        (q1, q2) = map(int, input().split())\n        q1 -= 1\n        q2 -= 1\n        if c[q1] == -2:\n            c[q1] = -1\n        else:\n            s.append(v[q1])\n        if c[q2] == -2:\n            c[q2] = -1\n        else:\n            s.append(v[q2])\n    s.sort(reverse=True)\n    z = [sum(v)]\n    for i in range(len(s)):\n        z.append(z[-1] + s[i])\n    return ' '.join(list(map(str, z)))\nz = []\nfor i in range(t):\n    z.append(Kurisu())\nprint('\\n'.join(z))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest = inp()\nfor i in range(test):\n    number = inp()\n    wp = inlt()\n    ep = []\n    dp = [0] * (number + 1)\n    for j in range(number - 1):\n        (ap, bp) = invr()\n        (ap, bp) = (ap - 1, bp - 1)\n        dp[ap] += 1\n        dp[bp] += 1\n        if dp[ap] > 1:\n            ep += [wp[ap]]\n        if dp[bp] > 1:\n            ep += [wp[bp]]\n    ep = sorted(ep)[::-1]\n    sp = sum(wp)\n    resp = [str(sp)]\n    for xp in ep:\n        sp += xp\n        resp += [str(sp)]\n    print(' '.join(resp))", "from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    weight = rlint()\n    indegree = [0] * n\n    w = []\n    for _ in range(n - 1):\n        (u, v) = rlint()\n        u -= 1\n        v -= 1\n        indegree[u] += 1\n        indegree[v] += 1\n    for i in range(n):\n        if indegree[i] > 1:\n            w.append(i)\n    val = sum(weight)\n    w.sort(reverse=True, key=lambda i: weight[i])\n    i = 0\n    print(val, end=' ')\n    for _ in range(n - 2):\n        if indegree[w[i]] <= 1:\n            i += 1\n        val += weight[w[i]]\n        print(val, end=' ')\n        indegree[w[i]] -= 1\n    print()\nfor _ in range(rint()):\n    main()", "import sys\nt = int(input())\nfor test in range(t):\n    n = int(sys.stdin.readline())\n    weight = list(map(int, sys.stdin.readline().split()))\n    vertex = [0] * n\n    key = []\n    for _ in range(n - 1):\n        (a, b) = map(int, sys.stdin.readline().split())\n        vertex[a - 1] += 1\n        if vertex[a - 1] >= 2:\n            key.append(weight[a - 1])\n        vertex[b - 1] += 1\n        if vertex[b - 1] >= 2:\n            key.append(weight[b - 1])\n    answer = [str(sum(weight))]\n    key.sort()\n    for _ in range(len(key)):\n        answer.append(str(int(answer[-1]) + key.pop()))\n    print(' '.join(answer))", "import math\nfrom heapq import heappush, heappop, heapify\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    w = L()\n    d = [0] * n\n    for i in range(n - 1):\n        (a, b) = M()\n        d[a - 1] += 1\n        d[b - 1] += 1\n    a = []\n    for i in range(n):\n        for j in range(d[i] - 1):\n            a.append(w[i])\n    a.sort(reverse=True)\n    ans = sum(w)\n    l = []\n    for i in a:\n        l.append(ans)\n        ans += i\n    l.append(ans)\n    print(*l)", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve():\n    for t in range(int(input())):\n        n = int(input())\n        w = list(map(int, input().split()))\n        deg = [0] * n\n        for i in range(n - 1):\n            (u, v) = map(int, input().split())\n            deg[u - 1] += 1\n            deg[v - 1] += 1\n        a = []\n        s = 0\n        for i in range(n):\n            s += w[i]\n            for j in range(deg[i] - 1):\n                a.append(w[i])\n        a.sort()\n        res = [0] * (n - 1)\n        res[0] = s\n        for i in range(1, len(a) + 1):\n            s += a[-i]\n            res[i] = s\n        for i in range(len(a) + 1, n - 1):\n            res[i] = s\n        print(' '.join(map(str, res)))\nsolve()", "import sys\nfrom collections import defaultdict\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef lh(weight, edges):\n    s = sum(weight)\n    ans = [s]\n    g = defaultdict(int)\n    for (a, b) in edges:\n        g[a] += 1\n        g[b] += 1\n    u = {}\n    for a in g:\n        if g[a] > 1:\n            u[a] = g[a]\n    for a in sorted(u, key=lambda a: weight[a - 1], reverse=True):\n        while u[a] > 1:\n            ans.append(ans[-1] + weight[a - 1])\n            u[a] -= 1\n    print(' '.join((str(n) for n in ans)))\n    return\ninput = load_sys()\ncase = []\ni = 1\nwhile i < len(input):\n    N = int(input[i])\n    edges = []\n    for j in range(1, N + 1):\n        if j == 1:\n            weight = input[i + j].split()\n            weight = [int(n) for n in weight]\n        else:\n            (a, b) = input[i + j].split()\n            edges.append([int(a), int(b)])\n    lh(weight, edges)\n    i += N + 1", "from collections import *\nfrom sys import *\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    val = [0] + list(map(int, input().split()))\n    deg = defaultdict(int)\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n    curr = []\n    for i in range(1, n + 1):\n        curr += [val[i]] * (deg[i] - 1)\n    curr.sort()\n    ans = [sum(val)]\n    for i in range(n - 2):\n        ans.append(ans[-1] + curr.pop())\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    l = I()\n    deg = [0] * n\n    for i in range(n - 1):\n        (u, v) = I()\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    ar = []\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nfor i in range(II()):\n    n = II()\n    w = LI()\n    z = [0] * n\n    s = sum(w)\n    ans = [0] * (n - 1)\n    ans[0] = s\n    for i in range(n - 1):\n        (x, y) = LI()\n        z[x - 1] += 1\n        z[y - 1] += 1\n    for i in range(n):\n        if z[i] == 1:\n            w[i] = 0\n        if z[i] > 2:\n            w.extend([w[i]] * (z[i] - 2))\n    w.sort(reverse=True)\n    for i in range(n - 2):\n        s += w[i]\n        ans[i + 1] = s\n    print(*ans)", "import sys\nimport heapq\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    v = int(input())\n    vweights = list(map(int, input().split()))\n    tot = sum(vweights)\n    seen = set()\n    l = []\n    for i in range(v - 1):\n        (a, b) = map(int, input().split())\n        if a not in seen:\n            seen.add(a)\n        else:\n            heapq.heappush(l, -vweights[a - 1])\n        if b not in seen:\n            seen.add(b)\n        else:\n            heapq.heappush(l, -vweights[b - 1])\n    print(tot, end=' ')\n    for i in range(v - 2):\n        tot += -heapq.heappop(l)\n        print(tot, end=' ')\n    print()", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = sys.stdin.readline\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ipn()\n    w = ipl()\n    c = [0] * n\n    for i in range(n - 1):\n        (u, v) = ipl()\n        c[u - 1] += 1\n        c[v - 1] += 1\n    h = []\n    for i in range(n):\n        if c[i] > 1:\n            heappush(h, (-w[i], i))\n    s = sum(w)\n    print(s, end=' ')\n    d = 1\n    while d < n - 1:\n        (w, node) = heappop(h)\n        s += abs(w)\n        c[node] -= 1\n        if c[node] > 1:\n            heappush(h, (w, node))\n        print(s, end=' ')\n        d += 1\n    print()\nt = ipn()\nfor _ in range(t):\n    solve()", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial, log2\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        n = nin()\n        w = read()\n        indeg = dfd(int)\n        for i in range(n - 1):\n            (u, v) = read()\n            indeg[u - 1] += 1\n            indeg[v - 1] += 1\n        arr = []\n        for i in indeg:\n            indeg[i] -= 1\n            if indeg[i]:\n                heappush(arr, [-w[i], indeg[i]])\n        ans = sum(w)\n        ansrr = [ans]\n        for i in range(1, n - 1):\n            (curr, deg) = heappop(arr)\n            ans += -curr\n            deg -= 1\n            if deg:\n                heappush(arr, [curr, deg])\n            ansrr.append(ans)\n        ans_.append(ansrr)\nsolve()\nfor i in ans_:\n    print(*i)", "import sys\nstdin = list(sys.stdin)\nt = int(stdin[0].strip())\nj = 1\nfor i in range(t):\n    n = int(stdin[j].strip())\n    j += 1\n    weights = [int(u) for u in stdin[j].strip().split(' ')]\n    degrees = [0] * n\n    for z in range(n - 1):\n        j += 1\n        inp = [int(u) for u in stdin[j].strip().split(' ')]\n        degrees[inp[0] - 1] += 1\n        degrees[inp[1] - 1] += 1\n    s = ''\n    su = sum(weights)\n    pairs = [[weights[v], degrees[v]] for v in range(n)]\n    pairs.sort()\n    s += str(su) + ' '\n    for k in range(n - 2):\n        while len(pairs) > 0 and pairs[-1][1] < 2:\n            pairs.pop()\n        pairs[-1][1] -= 1\n        su += pairs[-1][0]\n        s += str(su) + ' '\n    s = s[:-1]\n    print(s)\n    j += 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = [-1] * n\n    ans = [sum(a)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        x[u - 1] += 1\n        x[v - 1] += 1\n    tmp = []\n    for i in range(len(x)):\n        if x[i] != 0:\n            tmp.append([a[i], i])\n    tmp.sort(reverse=True)\n    j = 0\n    i = 0\n    while i < n - 2:\n        ans.append(tmp[j][0] + ans[-1])\n        x[tmp[j][1]] -= 1\n        if x[tmp[j][1]] == 0:\n            j += 1\n        i += 1\n    print(*ans)", "def solve(t):\n    for _ in range(t):\n        N = int(input())\n        A = list(map(int, input().split()))\n        d = []\n        s = 0\n        for i in A:\n            d.append([i, 0])\n            s += i\n        for i in range(N - 1):\n            (a, b) = map(int, input().split())\n            d[a - 1][1] += 1\n            d[b - 1][1] += 1\n        d.sort(reverse=True)\n        a1 = [s]\n        p = 0\n        while p < N:\n            if d[p][1] > 1:\n                d[p][1] -= 1\n                s1 = a1[-1] + d[p][0]\n                a1.append(s1)\n            else:\n                p = p + 1\n        print(*a1)\nt = int(input())\nsolve(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    edges = []\n    seen = set()\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        if u not in seen:\n            seen.add(u)\n        else:\n            edges.append(w[u - 1])\n        if v not in seen:\n            seen.add(v)\n        else:\n            edges.append(w[v - 1])\n    edges.sort(reverse=True)\n    answers = [sum(w)]\n    t = sum(w)\n    for i in edges:\n        t += i\n        answers.append(t)\n    print(*answers)", "import sys\n\ndef main():\n    n = int(input())\n    dct = dict()\n    weights = list(map(int, input().split()))\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        if not u in dct:\n            dct[u] = 1\n        else:\n            dct[u] += 1\n        if not v in dct:\n            dct[v] = 1\n        else:\n            dct[v] += 1\n    lst = []\n    sm = 0\n    for i in dct:\n        sm += weights[i - 1]\n        if dct[i] > 1:\n            lst.append([weights[i - 1], dct[i] - 1])\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    cur_ind = 0\n    get = 0\n    res = str()\n    res += str(sm)\n    while get != n - 2:\n        res += ' '\n        if cur_ind >= len(lst):\n            res += str(sm)\n        elif lst[cur_ind][1] == 0:\n            cur_ind += 1\n        if cur_ind >= len(lst):\n            res += str(sm)\n        else:\n            sm += lst[cur_ind][0]\n            lst[cur_ind][1] -= 1\n            res += str(sm)\n        get += 1\n    print(res)\nt = int(input())\nfor i in range(t):\n    main()", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = [-1] * n\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        l[a - 1] += 1\n        l[b - 1] += 1\n    ans = [sum(w)]\n    for i in range(n):\n        for j in range(l[i]):\n            ans.append(w[i])\n    ans.sort(reverse=True)\n    for i in range(1, len(ans)):\n        ans[i] += ans[i - 1]\n    print(*ans)", "import sys\nfor test in range(int(input())):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    print(*ans)", "def solver(w, wt, val, n):\n    if n == 0 or w == 0:\n        return 0\n    if wt[n - 1] > w:\n        return solver(w, wt, val, n - 1)\n    else:\n        return max(val[n - 1] + solver(w - wt[n - 1], wt, val, n - 1), solver(w, wt, val, n - 1))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    empty = []\n    dp = [0] * (n + 1)\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        (u, v) = (u - 1, v - 1)\n        dp[u] += 1\n        dp[v] += 1\n        if dp[u] > 1:\n            empty += [w[u]]\n        if dp[v] > 1:\n            empty += [w[v]]\n    empty = sorted(empty, reverse=True)\n    total = sum(w)\n    resultado = [total]\n    for x in empty:\n        total += x\n        resultado += [total]\n    print(' '.join(map(str, resultado)))", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    freq = [0] * n\n    wt = list(map(int, input().split()))\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        freq[x - 1] += 1\n        freq[y - 1] += 1\n    ans = []\n    for i in range(n):\n        if freq[i] >= 2:\n            ans.append([freq[i], wt[i]])\n    ans.sort(key=lambda x: x[-1], reverse=True)\n    j = 0\n    i = 0\n    s = sum(wt)\n    l.append(s)\n    while i < n - 2:\n        if ans[j][0] > 1:\n            s += ans[j][-1]\n            ans[j][0] -= 1\n            l.append(s)\n            if ans[j][0] == 1:\n                j += 1\n        i += 1\n    print(*l)", "import sys\nfor test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, sys.stdin.readline().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    print(*ans)", "import sys\nfor test in range(int(input())):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    print(*ans)", "def knapSack(W, wt, val, n):\n    if n == 0 or W == 0:\n        return 0\n    if wt[n - 1] > W:\n        return knapSack(W, wt, val, n - 1)\n    else:\n        return max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1))\nval = [60, 100, 120]\nwt = [10, 20, 30]\nW = 50\nn = len(val)\ntestcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    w1 = list(map(int, input().split()))\n    empty = []\n    dp = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        dp[a] += 1\n        dp[b] += 1\n        if dp[a] > 1:\n            empty += [w1[a]]\n        if dp[b] > 1:\n            empty += [w1[b]]\n    empty = sorted(empty)[::-1]\n    s = sum(w1)\n    res = [str(s)]\n    for x in empty:\n        s += x\n        res += [str(s)]\n    print(' '.join(res))", "def answer(n, A):\n    l = []\n    sum1 = 0\n    for i in A:\n        l.append([i, 0])\n        sum1 += i\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        l[a - 1][1] += 1\n        l[b - 1][1] += 1\n    l.sort(reverse=True)\n    ans = [sum1]\n    pointer = 0\n    while pointer < n:\n        if l[pointer][1] > 1:\n            l[pointer][1] -= 1\n            s = ans[-1] + l[pointer][0]\n            ans.append(s)\n        else:\n            pointer += 1\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    answer(n, A)", "def buscaColoracao(ws, Q):\n    arestas = {}\n    for (a, b) in Q:\n        arestas[a] = arestas.get(a, 0) + 1\n        arestas[b] = arestas.get(b, 0) + 1\n    resultado = []\n    for (k, v) in arestas.items():\n        if v != 1:\n            ap = ws[k - 1]\n            for _ in range(v - 1):\n                resultado.append(ap)\n    base = sum(ws)\n    resultadoSort = sorted(resultado, reverse=True)\n    resultado = [base]\n    for ti in resultadoSort:\n        base += ti\n        resultado.append(base)\n    return resultado\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ws = list(map(int, input().split()))\n    grafo = []\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        grafo.append((u, v))\n    print(' '.join(map(str, buscaColoracao(ws, grafo))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            arr1 += [arr[a]]\n        if d[b] > 1:\n            arr1 += [arr[b]]\n    arr1 = sorted(arr1)[::-1]\n    s = sum(arr)\n    result = [str(s)]\n    for x in arr1:\n        s += x\n        result += [str(s)]\n    print(' '.join(result))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    e = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            e += [w[a]]\n        if d[b] > 1:\n            e += [w[b]]\n    e = sorted(e)[::-1]\n    s = sum(w)\n    res = [str(s)]\n    for x in e:\n        s += x\n        res += [str(s)]\n    print(' '.join(res))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    counter = [[_, 0] for _ in a]\n    ans = [s]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        counter[u - 1][1] += 1\n        counter[v - 1][1] += 1\n    counter = sorted(counter, reverse=True)\n    for i in range(len(counter) - 1, -1, -1):\n        if counter[i][1] <= 1:\n            counter.pop(i)\n    for i in range(n - 2):\n        s += counter[0][0]\n        counter[0][1] -= 1\n        if counter[0][1] <= 1:\n            counter.pop(0)\n        ans.append(s)\n    print(*ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    tree = defaultdict(int)\n    for edge in range(n - 1):\n        (x, y) = map(int, input().split())\n        tree[x] += 1\n        tree[y] += 1\n    newWeightArr = []\n    for node in range(1, n + 1):\n        if tree[node] > 1:\n            newWeightArr.append([weights[node - 1], tree[node] - 1])\n    newWeightArr.sort()\n    ans = [sum(weights)]\n    for k in range(2, n):\n        (wt, count) = newWeightArr.pop()\n        if count - 1 > 0:\n            newWeightArr.append([wt, count - 1])\n        ans.append(ans[-1] + wt)\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    e = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            e += [w[a]]\n        if d[b] > 1:\n            e += [w[b]]\n    e = sorted(e)[::-1]\n    s = sum(w)\n    res = [str(s)]\n    for x in e:\n        s += x\n        res += [str(s)]\n    print(' '.join(res))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    temp = []\n    cnt = [0] * (n + 1)\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        y = y - 1\n        x = x - 1\n        cnt[x] += 1\n        cnt[y] += 1\n        if cnt[y] > 1:\n            temp += [weights[y]]\n        if cnt[x] > 1:\n            temp += [weights[x]]\n    temp = sorted(temp)[::-1]\n    summ = sum(weights)\n    ans = [str(summ)]\n    for i in temp:\n        summ += i\n        ans += [str(summ)]\n    print(' '.join(ans))", "import sys\nimport math, bisect\n(inf, mod) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 6)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    n = I()\n    W = Neo()\n    G = defaultdict(list)\n    for i in range(n - 1):\n        (u, v) = neo()\n        u -= 1\n        v -= 1\n        G[u] += [v]\n        G[v] += [u]\n    A = []\n    for (i, j) in enumerate(W):\n        A += [(j, i)]\n    A.sort(reverse=True)\n    t = 1\n    Ans = sum(W)\n    print(Ans, end=' ')\n    for (i, j) in A:\n        k = len(G[j])\n        while t < n and k > 1:\n            Ans += i\n            print(Ans, end=' ')\n            k -= 1\n            t += 1\n        if t == n - 1:\n            break\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    graph = []\n    visited = [0] * (n + 1)\n    for i in range(1, n):\n        (u, v) = map(int, input().split())\n        visited[u] += 1\n        visited[v] += 1\n        if visited[u] > 1:\n            graph += [l[u - 1]]\n        if visited[v] > 1:\n            graph += [l[v - 1]]\n    s = sorted(graph)[::-1]\n    x = sum(l)\n    print(x, end=' ')\n    for i in range(len(s)):\n        x += s[i]\n        print(x, end=' ')\n    print()", "from typing import List\nfrom heapq import heappop, heappush\n\ndef solve(weights: List[int], edges: List[List[int]]) -> str:\n    dic = {}\n    for pair in edges:\n        for e in pair:\n            if e in dic:\n                dic[e] += 1\n            else:\n                dic[e] = 1\n    heap = []\n    for key in dic:\n        if dic[key] > 1:\n            heappush(heap, [-weights[key - 1], dic[key]])\n    ans = sum(weights)\n    ans_str = str(sum(weights)) + ' '\n    while heap:\n        node = heappop(heap)\n        ans -= node[0]\n        ans_str += str(ans) + ' '\n        node[1] -= 1\n        if node[1] > 1:\n            heappush(heap, [node[0], node[1]])\n    return ans_str[:-1]\ntest_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    edges = []\n    for _ in range(n - 1):\n        edges.append(list(map(int, input().split())))\n    print(solve(weights, edges))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = [-1] * n\n    ans = [sum(a)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        x[u - 1] += 1\n        x[v - 1] += 1\n    tmp = []\n    for i in range(len(x)):\n        if x[i] != 0:\n            tmp.append([a[i], i])\n    tmp.sort(reverse=True)\n    j = 0\n    i = 0\n    while i < n - 2:\n        ans.append(tmp[j][0] + ans[-1])\n        x[tmp[j][1]] -= 1\n        if x[tmp[j][1]] == 0:\n            j += 1\n        i += 1\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "for _ in range(int(input())):\n    n = int(input())\n    maps = list(map(int, input().split()))\n    s = sum(maps)\n    row = []\n    dp = [0] * (n + 1)\n    for i in range(n - 1):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        dp[l] += 1\n        dp[r] += 1\n        if dp[l] > 1:\n            row += [maps[l]]\n        if dp[r] > 1:\n            row += [maps[r]]\n    row.sort(reverse=True)\n    result = [str(s)]\n    for i in row:\n        s += i\n        result += [str(s)]\n    print(*result)", "def func1(s, i, A, L):\n    for el in A:\n        if el not in s[max(i - 2, 0):min(i + 3, L)]:\n            return el\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    powers = [[int(el), 0] for el in input().split()]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        powers[u - 1][1] += 1\n        powers[v - 1][1] += 1\n    ans = [0 for i in range(n - 1)]\n    cnt = 0\n    for el in powers:\n        cnt += el[0] * el[1]\n    ans[n - 2] = cnt\n    y = n - 3\n    powers.sort()\n    x = 0\n    while y > -1:\n        while powers[x][1] == 1:\n            x += 1\n        powers[x][1] -= 1\n        cnt -= powers[x][0]\n        ans[y] = cnt\n        y -= 1\n    print(*ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        d[y] = d.get(y, 0) + 1\n        d[x] = d.get(x, 0) + 1\n    se = []\n    for i in range(n):\n        se.append([a[i], d[i + 1]])\n    s = sum(a)\n    p = [s]\n    se.sort()\n    j = 0\n    while j < n - 2:\n        x = se.pop()\n        while x[1] != 1 and j < n - 2:\n            x[1] -= 1\n            s += x[0]\n            p.append(s)\n            j += 1\n    print(*p)", "import sys\nfor test in range(int(input())):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    sys.stdout.write(' '.join(map(str, ans)) + '\\n')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = [[-1, i + 1] for i in range(n)]\n    ans = [sum(a)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        x[u - 1][0] += 1\n        x[v - 1][0] += 1\n    tmp = []\n    for i in range(len(x)):\n        if x[i][0] != 0:\n            tmp.append([a[i], x[i][1] - 1])\n    tmp.sort(reverse=True)\n    j = 0\n    i = 0\n    while i < n - 2:\n        ans.append(tmp[j][0] + ans[-1])\n        x[tmp[j][1]][0] -= 1\n        if x[tmp[j][1]][0] == 0:\n            j += 1\n        i += 1\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "cases = int(input())\nfor _ in range(cases):\n    nodes = int(input())\n    weights = list(map(int, input().split()))\n    wOrder = []\n    adj = [[weights[i], -1] for i in range(nodes)]\n    res = []\n    for i in range(nodes - 1):\n        (src, dest) = map(int, input().split())\n        adj[src - 1][1] += 1\n        adj[dest - 1][1] += 1\n    res.append(sum(weights))\n    adj.sort(reverse=True)\n    for (cost, repeat) in adj:\n        while repeat:\n            res.append(cost + res[-1])\n            repeat -= 1\n    print(*res)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "import sys\nfor test in range(int(input())):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    for i in ans:\n        sys.stdout.write(str(i) + ' ')\n    sys.stdout.write('\\n')", "test_num = int(input())\n\ndef solve():\n    v_num = int(input())\n    weight = [0] + list(map(int, input().split()))\n    ans = sum(weight)\n    degrees = [0] * (v_num + 1)\n    for i in range(v_num - 1):\n        (x, y) = map(int, input().split())\n        degrees[x] += 1\n        degrees[y] += 1\n    points = []\n    for i in range(1, v_num + 1):\n        points += [weight[i]] * (degrees[i] - 1)\n    points.sort(reverse=True)\n    print(ans, end=' ')\n    for i in range(v_num - 2):\n        ans += points[i]\n        print(ans, end=' ')\n    print()\nfor i in range(test_num):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            arr1 += [arr[a]]\n        if d[b] > 1:\n            arr1 += [arr[b]]\n    arr1 = sorted(arr1)[::-1]\n    s = sum(arr)\n    result = [str(s)]\n    for x in arr1:\n        s += x\n        result += [str(s)]\n    print(' '.join(result))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [[int(i), 0] for i in input().split()]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        arr[a - 1][1] += 1\n        arr[b - 1][1] += 1\n    arr.sort()\n    ans = 0\n    for i in arr:\n        ans += i[0]\n    print(ans, end=' ')\n    l = n\n    for i in range(n - 2):\n        while l > 0 and arr[-1][1] == 1:\n            arr.pop()\n            l -= 1\n        if l > 0:\n            ans += arr[-1][0]\n            arr[-1][1] -= 1\n        print(ans, end=' ')\n    print()", "tt = int(input())\nfor p in range(tt):\n    n = int(input())\n    w = list(map(int, input().split()))\n    e = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (aa, bb) = map(int, input().split())\n        pp = aa\n        qq = bb\n        (aa, bb) = (aa - 1, bb - 1)\n        d[aa] += 1\n        pp += 1\n        qq += 1\n        d[bb] += 1\n        if d[aa] > 1:\n            e += [w[aa]]\n            pp -= 1\n        if d[bb] > 1:\n            e += [w[bb]]\n            qq -= 1\n    e = sorted(e)[::-1]\n    pp += qq\n    qq += pp\n    ss = sum(w)\n    res = [str(ss)]\n    for xs in e:\n        ss += xs\n        res += [str(ss)]\n    print(' '.join(res))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = sum(arr)\n    temp = [0] * (n + 1)\n    temp1 = []\n    for i in range(n - 2, -1, -1):\n        (i, j) = map(int, input().split())\n        if temp[i] == 0:\n            temp[i] = 1\n        else:\n            temp1.append(arr[i - 1])\n        if temp[j] == 0:\n            temp[j] = 1\n        else:\n            temp1.append(arr[j - 1])\n    temp1.sort()\n    print(ans, end=' ')\n    for i in range(n - 3, -1, -1):\n        ans += temp1[i]\n        print(ans, end=' ')\n    print()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    freq = [0] * n\n    wt = list(map(int, input().split()))\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        freq[x - 1] += 1\n        freq[y - 1] += 1\n    ans = []\n    for i in range(n):\n        if freq[i] >= 2:\n            ans.append([freq[i], wt[i]])\n    ans.sort(key=lambda x: x[-1], reverse=True)\n    j = 0\n    i = 0\n    s = sum(wt)\n    l.append(s)\n    while i < n - 2:\n        if ans[j][0] > 1:\n            s += ans[j][-1]\n            ans[j][0] -= 1\n            l.append(s)\n            if ans[j][0] == 1:\n                j += 1\n        i += 1\n    print(*l)", "def solver(w, wt, val, n):\n    if n == 0 or w == 0:\n        return 0\n    if wt[n - 1] > w:\n        return solver(w, wt, val, n - 1)\n    else:\n        return max(val[n - 1] + solver(w - wt[n - 1], wt, val, n - 1), solver(w, wt, val, n - 1))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    empty = []\n    dp = [0] * (n + 1)\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        (u, v) = (u - 1, v - 1)\n        dp[u] += 1\n        dp[v] += 1\n        if dp[u] > 1:\n            empty += [w[u]]\n        if dp[v] > 1:\n            empty += [w[v]]\n    empty = sorted(empty, reverse=True)\n    total = sum(w)\n    resultado = [total]\n    for x in empty:\n        total += x\n        resultado += [total]\n    print(' '.join(map(str, resultado)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    sum_w = sum(w)\n    out = [sum_w]\n    edges = [[x, 0] for x in w]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        edges[v - 1][1] += 1\n        edges[u - 1][1] += 1\n    edges = sorted(edges)[::-1]\n    for i in range(len(edges) - 1, -1, -1):\n        if edges[i][1] <= 1:\n            edges.pop(i)\n    for i in range(n - 2):\n        sum_w += edges[0][0]\n        edges[0][1] -= 1\n        if edges[0][1] <= 1:\n            edges.pop(0)\n        out.append(sum_w)\n    print(*out)", "def main():\n    n = int(input())\n    w = list(map(int, input().split()))\n    edge = [[] for _ in range(n)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        edge[u].append(v)\n        edge[v].append(u)\n    weights = []\n    for i in range(n):\n        if len(edge[i]) >= 2:\n            for _ in range(len(edge[i]) - 1):\n                weights.append(w[i])\n    weights.sort(reverse=True)\n    ans = [sum(w)]\n    for k in range(n - 1):\n        if k > 0:\n            ans.append(ans[-1] + weights[k - 1])\n    print(*ans)\n    return\nt = int(input())\nfor i in range(t):\n    main()", "t = int(input())\nfor Z in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    com = list()\n    al = set()\n    for z in range(n - 1):\n        (x, y) = map(int, input().split())\n        if x in al:\n            com.append(x)\n        else:\n            al.add(x)\n        if y in al:\n            com.append(y)\n        else:\n            al.add(y)\n    vt = []\n    for i in com:\n        vt.append(l[i - 1])\n    vt.sort(reverse=True)\n    total = sum(l)\n    curr = total\n    ans = ''\n    addup = 0\n    ind = 0\n    for i in range(n - 1):\n        curr += addup\n        ans += str(curr) + ' '\n        if ind < len(vt):\n            addup = vt[ind]\n            ind += 1\n    print(ans.strip())", "for test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    print(*ans)", "def solution():\n    for tc in range(int(input())):\n        n = int(input())\n        w = list(map(int, input().split()))\n        tmp = []\n        graph = [0 for i in range(n + 1)]\n        for i in range(n - 1):\n            (a, b) = map(int, input().split())\n            a -= 1\n            b -= 1\n            (graph[a], graph[b]) = (graph[a] + 1, graph[b] + 1)\n            if graph[a] > 1:\n                tmp.append(w[a])\n            if graph[b] > 1:\n                tmp.append(w[b])\n        tmp.sort(reverse=True)\n        t_sum = sum(w)\n        ans = [str(t_sum)]\n        for i in tmp:\n            t_sum += i\n            ans.append(str(t_sum))\n        print(*ans)\nsolution()", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nyn = lambda x: print('Yes') if x else print('No')\nYN = lambda x: print('YES') if x else print('NO')\npl = lambda l: print(' '.join(list(map(str, l))))\nfor _ in range(rn()):\n    n = rn()\n    l = rl()\n    d = {}\n    for i in range(n - 1):\n        (u, v) = rns()\n        if u in d:\n            d[u] += 1\n        else:\n            d[u] = 1\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    sums = []\n    for i in d:\n        sums += [l[i - 1]] * (d[i] - 1)\n    sums.sort(reverse=True)\n    ans = [sum(l)]\n    for i in sums:\n        ans.append(ans[-1] + i)\n    print(*ans)", "import sys\nfor test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a1 = []\n    for i in arr:\n        a1.append([i, 0])\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        a1[a][1] += 1\n        a1[b][1] += 1\n    a1.sort(key=lambda x: (x[0], x[1]))\n    an = sum(arr)\n    ans = [an]\n    pointer = n - 1\n    for i in range(n - 2):\n        while 1 == 1:\n            if a1[pointer][1] > 1:\n                a1[pointer][1] -= 1\n                an += a1[pointer][0]\n                ans.append(an)\n                break\n            else:\n                pointer -= 1\n    print(*ans)", "for __ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    Adj = {x: 0 for x in range(n)}\n    for i in range(n - 1):\n        [u, v] = list(map(int, input().split()))\n        Adj[u - 1] += 1\n        Adj[v - 1] += 1\n    ansL = []\n    for i in range(n):\n        for j in range(Adj[i] - 1):\n            ansL.append(w[i])\n    ansL.sort(reverse=True)\n    ansL.insert(0, sum(w))\n    for i in range(1, n - 1):\n        ansL[i] = ansL[i - 1] + ansL[i]\n    print(*ansL)", "def solve():\n    ans = [sum(w)]\n    for i in range(n - 2):\n        ans.append(ans[-1] + weight[i])\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    weight = []\n    all_ = [0] * (n + 1)\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        all_[x] += 1\n        all_[y] += 1\n    for i in range(1, len(all_)):\n        if all_[i] > 1:\n            weight.extend([w[i - 1] for j in range(all_[i] - 1)])\n    weight.sort(reverse=True)\n    print(*solve())", "N = 100005\nw = [0 for _ in range(N)]\nd = [0 for _ in range(N)]\ncasos = int(input())\nfor x in range(casos):\n    n = int(input())\n    trabalhos = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        w[i] = trabalhos[i - 1]\n        d[i] = 0\n    for i in range(1, n):\n        (u, v) = list(map(int, input().split()))\n        d[u] += 1\n        d[v] += 1\n    resposta = 0\n    v = []\n    for i in range(1, n + 1):\n        resposta += w[i]\n        for j in range(1, d[i]):\n            v.append(w[i])\n    v.sort(reverse=True)\n    saida = ''\n    saida += str(resposta) + ' '\n    for x in v:\n        resposta += x\n        saida += str(resposta) + ' '\n    print(saida)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    end = [True] * n\n    count = [0] * n\n    bls = []\n    for _ in range(n - 1):\n        (i, j) = map(int, input().split())\n        count[i - 1] += 1\n        count[j - 1] += 1\n        if count[i - 1] > 1:\n            end[i - 1] = False\n            bls.append(ls[i - 1])\n        if count[j - 1] > 1:\n            end[j - 1] = False\n            bls.append(ls[j - 1])\n    s = sum(ls)\n    print(s, end=' ')\n    bls = sorted(bls, reverse=True)\n    for i in bls:\n        print(s + i, end=' ')\n        s += i\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    graph = dict()\n    for i in range(1, n + 1):\n        graph[i] = []\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    b = []\n    for i in graph:\n        if len(graph[i]) != 1:\n            for j in range(len(graph[i]) - 1):\n                b.append(a[i - 1])\n    b.sort(reverse=True)\n    s = sum(a)\n    print(s, end=' ')\n    for i in range(len(b)):\n        s += b[i]\n        print(s, end=' ')\n    print('')", "t = int(input())\nwhile t:\n    n = int(input())\n    m = 0\n    li = list(map(int, input().split()))\n    l = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            l += [li[a]]\n        if d[b] > 1:\n            l += [li[b]]\n    for j in range(3):\n        m += 1\n    l = sorted(l)[::-1]\n    s = sum(li)\n    ans = [str(s)]\n    for j in l:\n        s += j\n        ans += [str(s)]\n    print(' '.join(ans))\n    t -= 1", "from collections import defaultdict\nimport heapq\ncases = int(input())\nans_list = []\nfor c in range(cases):\n    n = int(input())\n    weights = list(map(int, input().split(' ')))\n    d = defaultdict(int)\n    for i in range(n - 1):\n        (x, y) = list(map(int, input().split(' ')))\n        d[x] += 1\n        d[y] += 1\n    cur_sum = sum(weights)\n    cur_ans = [cur_sum]\n    heap = [(-w, i + 1) for (i, w) in enumerate(weights)]\n    heapq.heapify(heap)\n    for k in range(2, n):\n        while len(heap) > 0:\n            (cur_weight, cur_index) = (-heap[0][0], heap[0][1])\n            if d[cur_index] != 1:\n                cur_sum += cur_weight\n                cur_ans.append(cur_sum)\n                d[cur_index] -= 1\n                break\n            heapq.heappop(heap)\n    ans_list.append(cur_ans)\nfor lst in ans_list:\n    print(' '.join(list(map(str, lst))))", "import sys\nimport math\nfrom itertools import permutations\nfrom collections import Counter\ntesting = int(input())\nwhile testing:\n    n = int(input())\n    m = 0\n    li = list(map(int, input().split()))\n    l = []\n    d = [0] * (n + 1)\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        d[a] += 1\n        d[b] += 1\n        if d[a] > 1:\n            l += [li[a]]\n        if d[b] > 1:\n            l += [li[b]]\n    l = sorted(l)[::-1]\n    s = sum(li)\n    answer = [str(s)]\n    for j in l:\n        s += j\n        answer += [str(s)]\n    print(' '.join(answer))\n    testing -= 1", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nyn = lambda x: print('Yes') if x else print('No')\nYN = lambda x: print('YES') if x else print('NO')\npl = lambda l: print(' '.join(list(map(str, l))))\nfor _ in range(rn()):\n    n = rn()\n    l = rl()\n    d = (n + 1) * [0]\n    for i in range(n - 1):\n        (u, v) = rns()\n        d[u] += 1\n        d[v] += 1\n    sums = []\n    for i in range(1, n + 1):\n        sums += [l[i - 1]] * (d[i] - 1)\n    sums.sort(reverse=True)\n    ans = [sum(l)]\n    for i in sums:\n        ans.append(ans[-1] + i)\n    print(*ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = []\n    sum_ = 0\n    for i in A:\n        d.append([i, 0])\n        sum_ += i\n    for i in range(N - 1):\n        (a, b) = map(int, input().split())\n        d[a - 1][1] += 1\n        d[b - 1][1] += 1\n    d.sort(reverse=True)\n    ans = [sum_]\n    pointer = 0\n    while pointer < N:\n        if d[pointer][1] > 1:\n            d[pointer][1] -= 1\n            s = ans[-1] + d[pointer][0]\n            ans.append(s)\n        else:\n            pointer += 1\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n - 1):\n        (h, k) = map(int, input().split())\n        b[h - 1] += 1\n        b[k - 1] += 1\n    x = [0] * (n - 2)\n    l = 0\n    for j in range(n):\n        if b[j] > 1:\n            for p in range(b[j] - 1):\n                x[l] = a[j]\n                l += 1\n    x.sort(reverse=True)\n    m = [0] * (n - 1)\n    m[0] = sum(a)\n    for z in range(1, n - 1):\n        m[z] = m[z - 1] + x[z - 1]\n    print(*m)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = [int(i) for i in input().split()]\n    Dict = defaultdict(int)\n    for i in range(n - 1):\n        (u, v) = [int(i) for i in input().split()]\n        Dict[u] += 1\n        Dict[v] += 1\n    stack = []\n    for i in range(1, n + 1):\n        if Dict[i] > 1:\n            stack.append([w[i - 1], Dict[i]])\n    stack.sort(reverse=True)\n    tot = sum(w)\n    ans = [tot]\n    for i in range(n - 2):\n        if len(stack) > 0:\n            tot += stack[0][0]\n            stack[0][1] -= 1\n            if stack[0][1] == 1:\n                stack.pop(0)\n        ans.append(tot)\n    print(*ans)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = 0\n    for i in arr:\n        s += i\n    a = [0 for i in range(n)]\n    c = []\n    for i in range(n - 1):\n        (x, y) = [int(i) - 1 for i in input().split()]\n        a[x] += 1\n        a[y] += 1\n        if a[x] > 1:\n            c.append(arr[x])\n        if a[y] > 1:\n            c.append(arr[y])\n    c.sort()\n    print(s, end=' ')\n    for i in range(len(c) - 1, -1, -1):\n        s += c[i]\n        print(s, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = [-1] * n\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        l[a - 1] += 1\n        l[b - 1] += 1\n    ans = [sum(w)]\n    for i in range(n):\n        for j in range(l[i]):\n            ans.append(w[i])\n    ans.sort(reverse=True)\n    for i in range(1, len(ans)):\n        ans[i] += ans[i - 1]\n    print(*ans)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        d[u - 1] += 1\n        d[v - 1] += 1\n    ar = []\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (d[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    wp = []\n    for i in range(n):\n        wp.append([a[i], i + 1])\n    wp.sort(reverse=True)\n    edges = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        edges[u].append(v)\n        edges[v].append(u)\n    s = sum(a)\n    ans = [s]\n    i = 0\n    c = 1\n    p = 0\n    while c < n - 1:\n        for j in range(len(edges[wp[i][1]]) - 1):\n            s = s + wp[i][0]\n            ans.append(s)\n            c = c + 1\n            if c == n - 1:\n                p = 1\n                break\n        i = i + 1\n        if p == 1:\n            break\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    ar = []\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=1)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    counter = [[_, 0] for _ in a]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        counter[u - 1][1] += 1\n        counter[v - 1][1] += 1\n    counter.sort(reverse=True, key=lambda x: x[0])\n    for i in range(len(counter) - 1, -1, -1):\n        if counter[i][1] <= 1:\n            counter.pop(i)\n    print(s, end=' ')\n    for i in range(n - 2):\n        s += counter[0][0]\n        counter[0][1] -= 1\n        if counter[0][1] <= 1:\n            counter.pop(0)\n        print(s, end=' ')\n    print()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    deg = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    ar = []\n    for i in range(n):\n        if len(ar) < n:\n            ar += [l[i]] * (deg[i] - 1)\n    ar.sort(reverse=True)\n    an = [sum(l)]\n    for i in range(n - 2):\n        an.append(an[-1] + ar[i])\n    print(*an)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()[:n]))\n    req = [0] * n\n    for i in range(n - 1):\n        for v in input().split():\n            req[int(v) - 1] += 1\n    tmp = [0]\n    for i in range(n):\n        for j in range(req[i] - 1):\n            tmp.append(arr[i])\n    tmp.sort(reverse=1)\n    ans = [sum(arr)]\n    for i in range(n - 2):\n        ans.append(ans[-1] + tmp[i])\n    ans = [str(n) for n in ans]\n    print(' '.join(ans))", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    counter = [[_, 0] for _ in a]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        counter[u - 1][1] += 1\n        counter[v - 1][1] += 1\n    counter = sorted(counter, key=keyf, reverse=True)\n    for i in range(len(counter) - 1, -1, -1):\n        if counter[i][1] <= 1:\n            counter.pop(i)\n    print(s, end=' ')\n    for i in range(n - 2):\n        s += counter[0][0]\n        counter[0][1] -= 1\n        if counter[0][1] <= 1:\n            counter.pop(0)\n        print(s, end=' ')\n    print()\n\ndef keyf(e):\n    return e[0]\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    graph = dict()\n    for i in range(1, n + 1):\n        graph[i] = []\n    for i in range(n - 1):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    b = []\n    for i in graph:\n        if len(graph[i]) != 1:\n            for j in range(len(graph[i]) - 1):\n                b.append(a[i - 1])\n    b.sort(reverse=True)\n    s = sum(a)\n    print(s, end=' ')\n    for i in range(len(b)):\n        s += b[i]\n        print(s, end=' ')\n    print('')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    counter = [[_, 0] for _ in a]\n    ans = [s]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        counter[u - 1][1] += 1\n        counter[v - 1][1] += 1\n    counter = sorted(counter, reverse=True)\n    for i in range(len(counter) - 1, -1, -1):\n        if counter[i][1] <= 1:\n            counter.pop(i)\n    for i in range(n - 2):\n        s += counter[0][0]\n        counter[0][1] -= 1\n        if counter[0][1] <= 1:\n            counter.pop(0)\n        ans.append(s)\n    print(*ans)", "for _ in range(int(input())):\n    (n, lst) = (int(input()), list(map(int, input().split(' '))))\n    (Counter, ans) = ([[0, 0] for _ in range(n)], sum(lst))\n    for i in range(n - 1):\n        (a, b) = map(int, input().split(' '))\n        (Counter[a - 1][0], Counter[b - 1][0]) = (a - 1, b - 1)\n        Counter[b - 1][1] += 1\n        Counter[a - 1][1] += 1\n    Counter.sort(key=lambda x: lst[x[0]], reverse=True)\n    print(ans, end=' ')\n    for i in Counter:\n        while i[1] > 1:\n            ans += lst[i[0]]\n            print(ans, end=' ')\n            i[1] -= 1\n    print()", "t = int(input())\nfor _ in range(t):\n\n    def main():\n        out = []\n        n = int(input())\n        nums = list(map(int, input().split()))\n        edge = [-1] * n\n        for i in range(n - 1):\n            (a, b) = map(int, input().split())\n            edge[a - 1] += 1\n            edge[b - 1] += 1\n        cur = sum(nums)\n        out.append(cur)\n        mid = sorted([(nums[i], i) for i in range(n) if edge[i]])\n        ne = len(mid) - 1\n        for i in range(n - 2):\n            m = mid[ne][1]\n            while not edge[m]:\n                ne -= 1\n                m = mid[ne][1]\n            edge[m] -= 1\n            cur += nums[m]\n            out.append(cur)\n        print(' '.join(map(str, out)))\n    main()", "def readInt():\n    return int(input())\n\ndef readLine():\n    return [int(s) for s in input().split(' ')]\n\ndef readString():\n    return input()\n\ndef ask(n, weights, Q):\n    degs = {}\n\n    def addDeg(v):\n        degs[v] = degs.get(v, 0) + 1\n    for (a, b) in Q:\n        addDeg(a)\n        addDeg(b)\n    ret = []\n    for (key, value) in degs.items():\n        if value == 1:\n            continue\n        ap = weights[key - 1]\n        for _ in range(value - 1):\n            ret.append(ap)\n    base = sum(weights)\n    sot = sorted(ret, reverse=True)\n    ret = [base]\n    for ti in sot:\n        base += ti\n        ret.append(base)\n    return ret\nt = readInt()\nfor _ in range(t):\n    n = readInt()\n    weights = readLine()\n    Q = []\n    for __ in range(n - 1):\n        (a, b) = readLine()\n        Q.append((a, b))\n    ans = ask(n, weights, Q)\n    print(' '.join([str(a) for a in ans]))\npass", "for _ in range(int(input())):\n    n = int(input())\n    W = [int(w) for w in input().split()]\n    A = [0] * n\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        A[x - 1] += 1\n        A[y - 1] += 1\n    C = list(zip(W, A))\n    C.sort(reverse=True)\n    (W, A) = zip(*C)\n    R = [0] * (n - 1)\n    (p, s) = (0, sum(W))\n    A = list(A)\n    R[0] = s\n    for i in range(1, n - 1):\n        while p < n and A[p] == 1:\n            p += 1\n        A[p] -= 1\n        s += W[p]\n        R[i] = s\n    print(' '.join(map(str, R)))", "import heapq\n\ndef main():\n    T = int(input())\n    for c in range(T):\n        n = int(input())\n        w = input().rstrip().split(' ')\n        g = [0 for i in range(n)]\n        for c in range(n - 1):\n            inp = input().rstrip().split(' ')\n            (u, v) = (int(inp[0]) - 1, int(inp[1]) - 1)\n            g[u] += 1\n            g[v] += 1\n        heap = []\n        total = 0\n        for i in range(n):\n            val = (int(w[i]), i, g[i])\n            total += int(w[i]) * g[i]\n            heapq.heappush(heap, val)\n        res = [str(total)]\n        while len(heap) > 0:\n            val = (None, None, 1)\n            while len(heap) > 0 and (not val[2] > 1):\n                val = heapq.heappop(heap)\n            while val[2] > 1:\n                res.append(str(int(res[-1]) - val[0]))\n                val = (val[0], val[1], val[2] - 1)\n        res = res[::-1]\n        print(' '.join(res))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    w = [*map(int, input().split())]\n    deg = [0] * n\n    ans = [0] * (n - 1)\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        deg[u] += 1\n        deg[v] += 1\n    a = []\n    for i in range(n):\n        for _ in range(1, deg[i]):\n            a.append(w[i])\n        ans[0] += w[i]\n    a.sort(reverse=True)\n    for (i, wt) in enumerate(a, 1):\n        ans[i] += wt + ans[i - 1]\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split(' ')))\n    for i in range(len(w)):\n        w[i] = (w[i], i + 1)\n    deg = [0 for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split(' '))\n        deg[u] += 1\n        deg[v] += 1\n    w.sort()\n    (s, c) = (0, n - 1)\n    for i in range(n):\n        s += w[i][0]\n    print(s, end=' ')\n    while c >= 0:\n        (x, y) = (w[c][0], w[c][1])\n        if deg[y] == 1:\n            c -= 1\n        else:\n            s += x\n            deg[y] -= 1\n            print(s, end=' ')\n    print()", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    d = dict()\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        if u in d:\n            d[u] += 1\n        else:\n            d[u] = 1\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    for i in d:\n        if d[i] != 1:\n            for j in range(d[i] - 1):\n                b.append(a[i - 1])\n    b.sort(reverse=True)\n    s = sum(a)\n    j = 0\n    for i in range(n - 1):\n        print(s, end=' ')\n        if len(b) != 0:\n            s += b[j]\n        if j + 1 < len(b):\n            j += 1\n    print('')", "from sys import stdin\niput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.insert(0, 0)\n    b = [0] * (n + 1)\n    now = sum(a)\n    for x in range(n - 1):\n        (c, d) = map(int, input().split())\n        b[c] += 1\n        b[d] += 1\n    d = []\n    for (x, y) in zip(a, b):\n        for z in range(1, y):\n            d.append(x)\n    d.sort()\n    d.reverse()\n    d.insert(0, 0)\n    for x in d:\n        now += x\n        print(now, end=' ')\n    print()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sm = sum(l)\n    d = defaultdict(int)\n    for _ in range(n - 1):\n        (a, b) = map(int, input().split())\n        d[a] += 1\n        d[b] += 1\n    lis = [(l[i], i + 1) for i in range(n)]\n    lis.sort(reverse=True)\n    j = 0\n    print(sm, end=' ')\n    for i in range(n - 2):\n        while d[lis[j][1]] == 1:\n            j += 1\n        sm += lis[j][0]\n        d[lis[j][1]] -= 1\n        print(sm, end=' ')\n    print()", "def sorting_func(x):\n    return x[0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    c = [0 for _ in range(n)]\n    for _ in range(n - 1):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        c[a] += 1\n        c[b] += 1\n    v = [[w[i], c[i] - 1] for i in range(n)]\n    v.sort(reverse=True, key=sorting_func)\n    ans = [sum(w)]\n    for i in range(n):\n        while v[i][1] > 0:\n            ans.append(ans[-1] + v[i][0])\n            v[i][1] -= 1\n    print(*ans)"]