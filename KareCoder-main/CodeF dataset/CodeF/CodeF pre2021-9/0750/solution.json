["def main():\n    (n, m, k) = map(int, input().split())\n    aa = map(int, input().split())\n    bb = map(int, input().split())\n    if n < m:\n        (n, m, aa, bb) = (m, n, bb, aa)\n    x = y2 = 1\n    y = x2 = 0\n    (g, a) = (n, m)\n    while a:\n        q = g // a\n        (g, a, x, y, x2, y2) = (a, g % a, x2, y2, x - x2 * q, y - y2 * q)\n    (nm, nm2, mg) = (n // g * m, n * 2 + 1, m // g)\n    (colors, common) = ([-1] * nm2, [-1] * nm2)\n    for (i, a) in enumerate(aa):\n        colors[a] = i\n    for (i, b) in enumerate(bb):\n        b = colors[b]\n        if b != -1 in colors and (not (b - i) % g):\n            common[b] = i\n    common = [(a - i) // g * x % mg * n + i for (i, a) in enumerate(common) if a != -1]\n    common_count = len(common)\n    (res, k) = divmod(k, nm - common_count)\n    if not k:\n        k = nm - common_count\n        res -= 1\n    res *= nm\n    common.sort()\n    a = -1\n    for b in common:\n        b -= a\n        if k < b:\n            break\n        k -= b - 1\n        res += b\n        a += b\n    print(res + k)\nmain()", "import math\n\ndef solve(n, m, k, a, b):\n    d = math.gcd(n, m)\n    x = 0\n    y = 0\n    for i in range(1, m):\n        if (i * n - d) % m == 0:\n            x = i\n            y = (i * n - d) // m\n            if y == 0:\n                x += 1\n                y += 1\n            break\n    common = {}\n    common_count = 0\n    colors = {}\n    for i in range(len(a)):\n        colors[a[i]] = i\n    for i in range(len(b)):\n        if b[i] in colors and (colors[b[i]] - i) % d == 0:\n            common[colors[b[i]]] = i\n            common_count += 1\n    com = []\n    for (key, val) in common.items():\n        z = (val - key) // d\n        com.append(int(z * x % (m // d) * n + key))\n    new_k = k % (m * n // d - common_count)\n    s = k // (m * n // d - common_count) * m * n // d\n    if new_k == 0:\n        new_k = m * n // d - common_count\n        s -= m * n // d\n    com = sorted(com)\n    cur = -1\n    for c in com:\n        if new_k < c - cur:\n            s += new_k\n            return s\n        new_k -= c - cur - 1\n        s += c - cur\n        cur = c\n    return s + new_k\n(n, m, k) = list(map(int, input().split()))\nc1 = list(map(int, input().split()))\nc2 = list(map(int, input().split()))\nif n < m:\n    print(solve(m, n, k, c2, c1))\nelse:\n    print(solve(n, m, k, c1, c2))"]