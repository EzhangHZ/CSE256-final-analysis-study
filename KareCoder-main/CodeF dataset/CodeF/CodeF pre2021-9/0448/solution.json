["import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    ans = 'YES'\n    (n, m) = map(int, input().split())\n    mh = ml = m\n    tx = 0\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        if tx < t:\n            mh += t - tx\n            ml -= t - tx\n            tx = t\n        mh = min(mh, h)\n        ml = max(ml, l)\n        if mh < ml:\n            ans = 'NO'\n    print(ans)", "def solve() -> bool:\n    (n, temperature) = map(int, input().split())\n    up = low = temperature\n    time = 0\n    result = True\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        if not result:\n            continue\n        dt = t - time\n        lower = low - dt\n        upper = up + dt\n        low = max(lower, l)\n        up = min(upper, h)\n        if low > up:\n            result = False\n        time = t\n    return result\nfor _ in range(int(input())):\n    print('YES' if solve() else 'NO')", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n\n    def rec(i, mini, maxi):\n        if i >= n:\n            return True\n        if i == 0:\n            curr_mini = max(arr[i][1], mini - arr[i][0])\n            curr_max = min(arr[i][2], maxi + arr[i][0])\n            if arr[i][1] <= curr_mini <= curr_max <= arr[i][2]:\n                return rec(i + 1, curr_mini, curr_max)\n            return False\n        else:\n            curr_mini = max(arr[i][1], mini - (arr[i][0] - arr[i - 1][0]))\n            curr_max = min(arr[i][2], maxi + (arr[i][0] - arr[i - 1][0]))\n            if arr[i][1] <= curr_mini <= curr_max <= arr[i][2]:\n                return rec(i + 1, curr_mini, curr_max)\n            return False\n    (n, initial) = list(map(int, sys.stdin.readline().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, sys.stdin.readline().split())))\n    if rec(0, initial, initial):\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef run_case():\n    (n, m) = map(int, input().split())\n    up = m\n    lo = m\n    pre = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        up += t - pre\n        lo -= t - pre\n        pre = t\n        up = min(up, h)\n        lo = max(lo, l)\n        if up < lo:\n            print('NO')\n            for _ in range(i + 1, n):\n                input()\n            return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    run_case()", "q = int(input())\nfor _ in range(q):\n    ans = 'YES'\n    (n, m) = map(int, input().split())\n    mh = ml = m\n    tx = 0\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        if tx < t:\n            mh += t - tx\n            ml -= t - tx\n            tx = t\n        mh = min(mh, h)\n        ml = max(ml, l)\n        if mh < ml:\n            ans = 'NO'\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for j in range(n):\n        arr.append(list(map(int, input().split())))\n    prev = 0\n    Min = Max = m\n    flag = True\n    for j in arr:\n        Min -= j[0] - prev\n        Max += j[0] - prev\n        if Max < j[1] or Min > j[2]:\n            flag = False\n            break\n        Min = max(Min, j[1])\n        Max = min(Max, j[2])\n        prev = j[0]\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def f(temp, a):\n    t = 0\n    l = temp\n    h = temp\n    for (time, lower, upper) in a:\n        h += time - t\n        l -= time - t\n        if lower > h or upper < l:\n            return 'NO'\n        h = min(upper, h)\n        l = max(l, lower)\n        t = time\n    return 'YES'\nfor i in range(int(input())):\n    (n, t) = map(int, input().strip().split())\n    q = []\n    for j in range(n):\n        (a, b, c) = map(int, input().strip().split())\n        q.append((a, b, c))\n    print(f(t, q))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (lo, hi) = (m, m)\n    t0 = 0\n    ans = 'YES'\n    for __ in range(n):\n        (t, l, h) = map(int, input().split())\n        lo -= t - t0\n        hi += t - t0\n        t0 = t\n        (lo, hi) = (max(lo, l), min(hi, h))\n        if lo > hi:\n            ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mMax = m\n    mMin = m\n    output = 'YES'\n    time = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        mMin = mMin - t + time\n        mMax = mMax + t - time\n        if h < mMin or l > mMax:\n            output = 'NO'\n        mMin = max(mMin, l)\n        mMax = min(mMax, h)\n        time = t\n    print(output)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return s[:len(s) - 1]\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    q = inp()\n    for i in range(0, q):\n        [n, m] = inlt()\n        limit_L = m\n        limit_h = m\n        curr_time = 0\n        flag = 1\n        for j in range(0, n):\n            [t, l, h] = inlt()\n            limit_L = limit_L - (t - curr_time)\n            limit_h = limit_h + (t - curr_time)\n            if limit_L > h or limit_h < l:\n                flag = 0\n            curr_time = t\n            limit_L = max(limit_L, l)\n            limit_h = min(limit_h, h)\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')\n    return\nmain()", "import sys\n\ndef reverse(s):\n    return s[::-1]\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    for _ in range(N):\n        (n, m) = [int(s) for s in sys.stdin.readline().strip().split()]\n        a = []\n        for i in range(n):\n            (t, l, h) = [int(s) for s in sys.stdin.readline().strip().split()]\n            a.append((t, l, h))\n        tt = 0\n        ll = m\n        hh = m\n        for (t, l, h) in a:\n            dt = t - tt\n            maxh = hh + dt\n            minl = ll - dt\n            if maxh < l or minl > h:\n                print('NO')\n                break\n            ll = max(l, minl)\n            hh = min(h, maxh)\n            tt = t\n            if ll > hh:\n                print('NO')\n                break\n        else:\n            print('YES')\nmain()", "def solve_problem(cus_num, init_temp, params):\n    time = 0\n    min_temp = init_temp\n    max_temp = init_temp\n    for (t, l, h) in params:\n        time_change = t - time\n        min_temp -= time_change\n        max_temp += time_change\n        if min_temp > h or max_temp < l:\n            return 'NO'\n        min_temp = max(min_temp, l)\n        max_temp = min(max_temp, h)\n        time = t\n    return 'YES'\n\ndef main():\n    problem_number = input()\n    for i in range(int(problem_number)):\n        (cus_num, init_temp) = input().split()\n        params = []\n        for i in range(int(cus_num)):\n            (t, l, h) = input().split()\n            params.append([int(t), int(l), int(h)])\n        print(solve_problem(int(cus_num), int(init_temp), params))\nmain()", "for _ in range(int(input())):\n    (n, ini) = map(int, input().split())\n    a = []\n    for i in range(n):\n        (x, y, z) = map(int, input().split())\n        a.append([x, y, z])\n    a.sort()\n    (maxt, mint) = (ini, ini)\n    flag = True\n    curr = 0\n    for i in range(n):\n        l = a[i][1]\n        r = a[i][2]\n        t = a[i][0] - curr\n        curr = a[i][0]\n        mint -= t\n        maxt += t\n        if maxt > r and mint <= r:\n            maxt = r\n        if mint < l and maxt >= l:\n            mint = l\n        if maxt >= l and maxt <= r or (mint >= l and mint <= r):\n            continue\n        elif maxt > r and mint < l:\n            continue\n        elif maxt < l:\n            flag = False\n            break\n        elif mint > r:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def readToInt():\n    return [int(n) for n in input().split()]\n\ndef solve(cus, index, low, high, time):\n    if index >= len(cus):\n        return True\n    (t, l, h) = (cus[index][0], cus[index][1], cus[index][2])\n    max_high = high + t - time\n    max_low = low - (t - time)\n    if max_high < l or h < max_low:\n        return False\n    return solve(cus, index + 1, max(max_low, l), min(max_high, h), t)\nfor _ in range(int(input())):\n    line = readToInt()\n    cus = []\n    for _ in range(line[0]):\n        cus.append(readToInt())\n    if solve(cus, 0, line[1], line[1], 0):\n        print('YES')\n    else:\n        print('NO')", "row1 = int(input())\nfor r1 in range(row1):\n    l1 = input().split(' ')\n    row2 = int(l1[0])\n    tem = int(l1[1])\n    a = tem\n    b = tem\n    t1 = 0\n    state = 0\n    for r2 in range(row2):\n        l2 = input().split(' ')\n        t2 = int(l2[0])\n        c = int(l2[1])\n        d = int(l2[2])\n        a = a + t1 - t2\n        b = b + t2 - t1\n        if a <= d and b >= c:\n            a = max(a, c)\n            b = min(b, d)\n            t1 = t2\n        else:\n            state = 1\n    if state == 1:\n        print('NO')\n    else:\n        print('YES')", "cases = int(input())\nfor _ in range(cases):\n    (n, temp) = [int(x) for x in input().split()]\n    cust = []\n    lo = temp\n    hi = temp\n    prev = 0\n    possible = True\n    for _ in range(n):\n        (t, l, h) = [int(x) for x in input().split()]\n        if not possible:\n            continue\n        gap = t - prev\n        lo -= gap\n        hi += gap\n        if l > lo:\n            lo = l\n        if h < hi:\n            hi = h\n        if lo > hi:\n            possible = False\n        prev = t\n    print('YES' if possible else 'NO')", "def f():\n    (m, t0) = map(int, input().split())\n    time = 0\n    (upp, loww) = (t0, t0)\n    for j in range(m):\n        (t, l, h) = map(int, input().split())\n        loww = max(loww - (t - time), l)\n        upp = min(upp + (t - time), h)\n        if upp < loww:\n            for musor in range(j + 1, m):\n                musor = input()\n            return False\n        time = t\n    return True\nn = int(input())\nfor i in range(n):\n    print('YES' if f() else 'NO')", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append([int(i) for i in input().split()])\n    arr.sort(key=lambda x: x[0])\n    flag = 0\n    t1 = m\n    t2 = m\n    time = 0\n    for i in arr:\n        g = i[0] - time\n        t1 = max(t1 - g, i[1])\n        t2 = min(t2 + g, i[2])\n        time = i[0]\n        if t1 > t2:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    (N, M) = map(int, input().split())\n    L = [list(map(int, input().split())) for _ in range(N)]\n    current_time = 0\n    lower = M\n    higher = M\n    for (t, l, h) in L:\n        margin_time = t - current_time\n        lowerst = lower - margin_time\n        highest = higher + margin_time\n        if l <= lowerst <= highest <= h:\n            lower = lowerst\n            higher = highest\n        elif lowerst <= l <= h <= highest:\n            lower = l\n            higher = h\n        elif l <= lowerst <= h:\n            lower = lowerst\n            higher = h\n        elif l <= highest <= h:\n            lower = l\n            higher = highest\n        else:\n            print('NO')\n            return\n        current_time = t\n    print('YES')\nT = int(input())\nfor _ in range(T):\n    solve()", "for tc in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = b = m\n    m = 0\n    fl = 1\n    for tccc in range(n):\n        (t, l, h) = map(int, input().split())\n        a -= t - m\n        b += t - m\n        m = t\n        if a < l:\n            a = l\n        if b > h:\n            b = h\n        if a > b:\n            fl = 0\n    print('YES') if fl else print('NO')", "n = int(input())\nfor _ in range(n):\n    (a, tem) = map(int, input().split())\n    (start, end) = (tem, tem)\n    keep = 0\n    flag = True\n    for __ in range(a):\n        (get, x, y) = map(int, input().split())\n        (get, keep) = (get - keep, get)\n        start -= get\n        end += get\n        if start <= x and end >= y:\n            (start, end) = (x, y)\n        elif start >= x and end <= y:\n            continue\n        elif start <= y and end >= y:\n            end = y\n        elif start <= x and end >= x:\n            start = x\n        else:\n            flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (a, b) = (m, m)\n    tm = 0\n    ans = 'YES'\n    for i in range(n):\n        (t, l, u) = map(int, input().split())\n        a = a - (t - tm)\n        b = b + (t - tm)\n        tm = t\n        (a, b) = (max(a, l), min(b, u))\n        if a > b:\n            ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    predt = 0\n    max_ = m\n    min_ = m\n    ans = 'YES'\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        max_ += t - predt\n        min_ -= t - predt\n        if min_ <= h and max_ >= l:\n            min_ = max(min_, l)\n            max_ = min(max_, h)\n        else:\n            ans = 'NO'\n        predt = t\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    time = 0\n    c = m\n    result = 'YES'\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        r = t - time\n        time = t\n        m = max(l, m - r)\n        c = min(h, c + r)\n        if m > c:\n            result = 'NO'\n    print(result)", "import sys\n\ndef I():\n    return sys.stdin.readline().rstrip()\nfor _ in range(int(I())):\n    (n, m) = map(int, I().split())\n    (st, sl, sh) = (0, m, m)\n    ans = True\n    for c in range(n):\n        (t, l, h) = map(int, I().split())\n        sl -= t - st\n        sh += t - st\n        if sl > h or sh < l:\n            ans = False\n        else:\n            sl = max(l, sl)\n            sh = min(h, sh)\n        st = t\n    print('YES' if ans else 'NO')", "def getIntersect(a, b, c, d):\n    return (max(a, c), min(b, d))\n\ndef solve(N, M, A):\n    tHi = M\n    tLo = M\n    A.sort()\n    lastT = 0\n    for (t, l, h) in A:\n        deltaT = t - lastT\n        tLo -= deltaT\n        tHi += deltaT\n        (tLo, tHi) = getIntersect(tLo, tHi, l, h)\n        if tLo > tHi:\n            return 'NO'\n        lastT = t\n    return 'YES'\n(T,) = map(int, input().split())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    for i in range(N):\n        tlh = [int(x) for x in input().split()]\n        A.append(tlh)\n    ans = solve(N, M, A)\n    print(ans)", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(q,) = rl()\nfor _ in range(q):\n    (n, m) = rl()\n    t = 0\n    l = h = m\n    r = 'YES'\n    for i in range(n):\n        (ti, li, hi) = rl()\n        dt = ti - t\n        t = ti\n        l = max(l - dt, li)\n        h = min(h + dt, hi)\n        if l > h:\n            r = 'NO'\n    print(r)", "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    ans = 'YES'\n    (n, m) = map(int, input().split())\n    tlh = [list(map(int, input().split())) for __ in range(n)]\n    t_ = 0\n    l_ = m\n    h_ = m\n    for i in range(n):\n        (t, l, h) = tlh[i]\n        l_ -= t - t_\n        h_ += t - t_\n        if l_ > h:\n            ans = 'NO'\n            break\n        elif h_ < l:\n            ans = 'NO'\n            break\n        else:\n            t_ = t\n            l_ = max(l_, l)\n            h_ = min(h_, h)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    (time, mx, mn) = (0, m, m)\n    flag = True\n    for __ in range(n):\n        (x, y, z) = map(int, input().split())\n        if not flag:\n            continue\n        mx += x - time\n        mn -= x - time\n        if mx < y or mn > z:\n            flag = False\n        if mx > z:\n            mx = z\n        if mn < y:\n            mn = y\n        time = x\n    print('YES' if flag else 'NO')", "has_tests = True\n\ndef solve_case():\n    (n, temp) = get([int])\n    time = 0\n    possible_low = temp\n    possible_high = temp\n    for (t, low, high) in get([int], n):\n        delta = t - time\n        possible_low = possible_low - delta\n        possible_high = possible_high + delta\n        possible_low = max(low, possible_low)\n        possible_high = min(high, possible_high)\n        if possible_low > possible_high:\n            return 'NO'\n        time = t\n    return 'YES'\n\ndef get(x, times=None):\n    if times is not None:\n        return [get(x, times=None) for _ in range(times)]\n    if isinstance(x, list):\n        return list(map(x[0], input().strip().split()))\n    return x(input().strip())\nif has_tests:\n    for _ in range(get(int)):\n        print(solve_case())\nelse:\n    solve_case()", "n = int(input())\nfor i in range(0, n):\n    list = input()\n    (a, b) = list.split()\n    intem = int(b)\n    ltemp = intem\n    ctim = 0\n    fall = 0\n    htemp = intem\n    nocust = int(a)\n    for j in range(0, nocust):\n        clis = input()\n        (tim, cltemp, chtemp) = clis.split()\n        diff = int(tim) - ctim\n        ctim = int(tim)\n        possltemp = ltemp - diff\n        posshtemp = htemp + diff\n        ltemp = int(cltemp) if int(cltemp) > possltemp else possltemp\n        htemp = int(chtemp) if int(chtemp) < posshtemp else posshtemp\n        if ltemp > htemp:\n            fall = 1\n    if fall == 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nQ = int(input())\nfor q in range(Q):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    line = []\n    for i in range(n):\n        (t, l, h) = input().split()\n        (t, l, h) = (int(t), int(l), int(h))\n        line.append([t, l, h])\n    line = sorted(line)\n    (lb, ub) = (m - line[0][0], m + line[0][0])\n    (lb, ub) = (max(lb, line[0][1]), min(ub, line[0][2]))\n    if lb > ub:\n        print('NO')\n        continue\n    for i in range(1, n):\n        d = line[i][0] - line[i - 1][0]\n        (l, h) = (line[i][1], line[i][2])\n        (lb, ub) = (max(l, lb - d), min(h, ub + d))\n        if lb > ub:\n            break\n    if lb > ub:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n    (n, m) = map(int, input().split())\n    cus = []\n    for i in range(n):\n        cus.append(list(map(int, input().split())))\n    (l, e) = (m, m)\n    p = 0\n    ans = 'YES'\n    for i in range(n):\n        l -= cus[i][0] - p\n        e += cus[i][0] - p\n        l = max(l, cus[i][1])\n        e = min(e, cus[i][2])\n        p = cus[i][0]\n        if e < l:\n            ans = 'NO'\n            break\n    print(ans)", "def solve(customer, n, mx, mn):\n    pre = 0\n    for (time, l, r) in customer:\n        (mn, mx) = (mn - (time - pre), mx + (time - pre))\n        if mn <= r and mx >= l:\n            (mn, mx) = (max(mn, l), min(mx, r))\n        else:\n            return 'NO'\n        pre = time\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    (mn, mx) = (m, m)\n    customer = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        customer.append(arr)\n    customer.sort(key=lambda x: x[0])\n    print(solve(customer, n, mx, mn))", "q = int(input())\nwhile q > 0:\n    s = input().split()\n    n = int(s[0])\n    m = int(s[1])\n    lt = 0\n    ls = m\n    hs = m\n    ok = 1\n    while n > 0:\n        s1 = input().split()\n        ti = int(s1[0])\n        li = int(s1[1])\n        hi = int(s1[2])\n        ls = ls - (ti - lt)\n        hs = hs + (ti - lt)\n        if ls > hi or hs < li:\n            ok = 0\n        ls = max(ls, li)\n        hs = min(hs, hi)\n        lt = ti\n        n = n - 1\n    if ok == 1:\n        print('YES')\n    else:\n        print('NO')\n    q = q - 1", "R = lambda : map(int, input().split())\n(q,) = R()\nfor _ in [0] * q:\n    (n, a) = R()\n    b = a\n    s = 0\n    r = 'YES'\n    for _ in [0] * n:\n        (t, l, h) = R()\n        d = t - s\n        s = t\n        a = max(l, a - d)\n        b = min(h, b + d)\n        if a > b:\n            r = 'NO'\n    print(r)", "def is_ok_with_all_customers():\n    (number_of_customers, current_temperature) = tuple(map(int, input().split()))\n    customers_data = {}\n    for i in range(number_of_customers):\n        (t, l, h) = tuple(map(int, input().split()))\n        if t in customers_data:\n            customers_data[t] = (max(l, customers_data[t][0]), min(h, customers_data[t][1]))\n        else:\n            customers_data[t] = (l, h)\n    current_time = 0\n    current_temperature_range = (current_temperature, current_temperature)\n    for (t, v) in customers_data.items():\n        time_to_prepare = t - current_time\n        max_possible_temperate_for_guests = current_temperature_range[1] + time_to_prepare\n        min_possible_temperature_for_guests = current_temperature_range[0] - time_to_prepare\n        if max_possible_temperate_for_guests < v[0] or v[1] < min_possible_temperature_for_guests:\n            return 'NO'\n        current_temperature_range = (max(min_possible_temperature_for_guests, v[0]), min(max_possible_temperate_for_guests, v[1]))\n        if current_temperature_range[0] > current_temperature_range[1]:\n            return 'NO'\n        current_time = t\n    return 'YES'\ntest_cases = int(input())\nfor _ in range(test_cases):\n    print(is_ok_with_all_customers())", "import sys\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    (n, m) = list(map(int, sys.stdin.readline().rstrip().split()))\n    ppl = [[0, m, m]]\n    for _ in range(n):\n        ppl.append(list(map(int, sys.stdin.readline().rstrip().split())))\n    i = 0\n    x = m\n    y = m\n    enabled = True\n    last = 0\n    for p in ppl:\n        diff = p[0] - last\n        if x - diff > p[2] or y + diff < p[1]:\n            enabled = False\n            break\n        x = max(x - diff, p[1])\n        y = min(y + diff, p[2])\n        last = p[0]\n    if enabled:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nwhile q:\n    q -= 1\n    (n, m) = map(int, input().split())\n    mn = mx = m\n    m = 0\n    flag = 1\n    while n:\n        n -= 1\n        (t, l, h) = map(int, input().split())\n        span = t - m\n        m = t\n        mn -= span\n        mx += span\n        if h >= mn and l <= mx:\n            mn = max(mn, l)\n            mx = min(mx, h)\n        else:\n            flag = 0\n            break\n    if not flag:\n        while n:\n            n -= 1\n            input()\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    time = 0\n    c = m\n    result = 'YES'\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        r = t - time\n        time = t\n        m = max(l, m - r)\n        c = min(h, c + r)\n        if m > c:\n            result = 'NO'\n    print(result)", "Q = int(input())\nfor _ in range(Q):\n    _t = 0\n    (n, m) = map(int, input().split(' '))\n    (lt, ht) = (m, m)\n    flag = True\n    for i in range(n):\n        (t, l, h) = map(int, input().split(' '))\n        lt = max(l, lt - (t - _t))\n        ht = min(h, ht + (t - _t))\n        if lt > ht:\n            flag = False\n        _t = t\n    print('YES' if flag else 'NO')", "def solve():\n    line1 = list(map(lambda x: int(x), input().split()))\n    n = line1[0]\n    initial_temp = line1[1]\n    temp_low = initial_temp\n    temp_high = initial_temp\n    time = 0\n    possible = True\n    for i in range(0, n):\n        if possible == False:\n            input()\n            continue\n        linei = list(map(lambda x: int(x), input().split()))\n        t = linei[0]\n        required_low = linei[1]\n        required_high = linei[2]\n        possible_low = temp_low - (t - time)\n        possible_high = temp_high + (t - time)\n        if required_low > possible_high or required_high < possible_low:\n            possible = False\n            continue\n        time = t\n        temp_low = max(required_low, possible_low)\n        temp_high = min(required_high, possible_high)\n    if possible:\n        print('YES')\n    else:\n        print('NO')\nq = int(input())\nfor i in range(0, q):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lowtemp = m\n    hightemp = m\n    itime = 0\n    string = ''\n    for i in range(n):\n        (time, l, h) = map(int, input().split())\n        if string == 'NO':\n            continue\n        lowtemp = lowtemp - (time - itime)\n        hightemp = hightemp + (time - itime)\n        itime = time\n        if lowtemp <= h and hightemp >= l:\n            lowtemp = max(lowtemp, l)\n            hightemp = min(hightemp, h)\n        else:\n            string = 'NO'\n    if string == 'NO':\n        print('NO')\n    else:\n        print('YES')", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    t_in = 0\n    l_in = h_in = m\n    flg = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        if flg == 1:\n            continue\n        t_dif = t - t_in\n        l_min = l_in - t_dif\n        h_max = h_in + t_dif\n        if h_max < l or l_min > h:\n            flg = 1\n        else:\n            t_in = t\n            l_in = max(l_min, l)\n            h_in = min(h_max, h)\n    if flg == 0:\n        print('YES')\n    else:\n        print('NO')\n    test -= 1", "def read_ints():\n    return [int(i) for i in input().strip().split()]\n\ndef solve():\n    pass\n\ndef intersection(left, right, mn, mx):\n    if right < mn or left > mx:\n        return None\n    else:\n        return [max(left, mn), min(right, mx)]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, start) = read_ints()\n        arr = []\n        for _ in range(n):\n            arr.append(read_ints())\n        arr = sorted(arr, key=lambda x: x[0])\n        left = start\n        right = start\n        ans = True\n        current_time = 0\n        for i in range(n):\n            (time, mn, mx) = arr[i]\n            diff = time - current_time\n            current_time = time\n            left = left - diff\n            right = right + diff\n            tmp = intersection(left, right, mn, mx)\n            if tmp == None:\n                ans = False\n                break\n            else:\n                (left, right) = tmp\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(i) for i in input().split()])\n    prev = flag = 0\n    m_l = m_h = m\n    for i in range(len(arr)):\n        (t1, l1, h1) = arr[i]\n        k = t1 - prev\n        m_l -= k\n        m_h += k\n        if m_h < l1 or m_l > h1:\n            flag = 1\n            break\n        m_l = max(m_l, l1)\n        m_h = min(m_h, h1)\n        prev = t1\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def intersection(r1, r2):\n    if r1[0] > r2[1] or r2[0] > r1[1]:\n        return None\n    return (max(r1[0], r2[0]), min(r1[1], r2[1]))\n\ndef solve(test):\n    (temp, costumers) = test\n    cur_range = (temp, temp)\n    cur_min = 0\n    for i in costumers:\n        if i[0] == cur_min:\n            cur_range = intersection(cur_range, (i[1], i[2]))\n            if cur_range is None:\n                print('NO')\n                return\n        else:\n            delta = i[0] - cur_min\n            cur_range = (cur_range[0] - delta, cur_range[1] + delta)\n            cur_range = intersection(cur_range, (i[1], i[2]))\n            cur_min = i[0]\n            if cur_range is None:\n                print('NO')\n                return\n    print('YES')\n\ndef handle_tests():\n    number_of_tests = int(input())\n    tests = []\n    for i in range(number_of_tests):\n        costumers = []\n        (n, m) = input().split()\n        for i in range(int(n)):\n            (t, l, h) = input().split()\n            costumers.append((int(t), int(l), int(h)))\n        tests.append((int(m), costumers))\n    for test in tests:\n        solve(test)\nhandle_tests()", "q = int(input())\nfor _ in range(q):\n    flag = False\n    (n, temp) = map(int, input().split())\n    hitemp = temp\n    lowtemp = temp\n    prev = 0\n    q = []\n    for i in range(n):\n        q.append(input())\n    for x in q:\n        (t, lo, hi) = map(int, x.split())\n        time = t - prev\n        prev = t\n        if hi <= lowtemp:\n            if lowtemp - time > hi:\n                break\n            else:\n                hitemp = hi\n                lowtemp = max([lo, lowtemp - time])\n        elif hi <= hitemp:\n            hitemp = hi\n            lowtemp = max([lo, lowtemp - time])\n        elif lo <= lowtemp:\n            hitemp = min([hi, hitemp + time])\n            lowtemp = max([lo, lowtemp - time])\n        elif lo <= hitemp:\n            hitemp = min([hi, hitemp + time])\n            lowtemp = lo\n        elif hitemp + time < lo:\n            break\n        else:\n            hitemp = min([hi, hitemp + time])\n            lowtemp = lo\n    else:\n        flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    tlh = [list(map(int, input().split())) for __ in range(n)]\n    now = [m, m]\n    a = 0\n    t = 0\n    for c in tlh:\n        time = c[0] - t\n        t = c[0]\n        lower = max(now[0] - time, c[1])\n        upper = min(now[1] + time, c[2])\n        if lower > upper:\n            print('NO')\n            a = 1\n            break\n        now = [lower, upper]\n    if a == 0:\n        print('YES')", "q = int(input())\nfor _ in range(q):\n    (n, tmp) = map(int, input().split())\n    MLH = [list(map(int, input().split())) for _ in range(n)]\n    tmpl = tmp\n    tmph = tmp\n    tim = 0\n    for (m, l, h) in MLH:\n        if h < tmpl - (m - tim) or tmph + (m - tim) < l:\n            print('NO')\n            break\n        else:\n            tmpl = max(l, tmpl - (m - tim))\n            tmph = min(h, tmph + (m - tim))\n            tim = m\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    f = 0\n    mi = ma = m\n    prev = 0\n    aa = [list(map(int, input().split())) for _ in range(n)]\n    aa.sort()\n    for i in range(n):\n        (t, l, h) = aa[i]\n        mi = max(mi - (t - prev), l)\n        ma = min(ma + (t - prev), h)\n        prev = t\n        if h < mi or l > ma:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cur = 0\n    f = 0\n    mi = ma = m\n    prev = 0\n    aa = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        (t, l, h) = aa[i]\n        cmi = mi - (t - prev)\n        cma = ma + (t - prev)\n        if h < cmi or l > cma:\n            print('NO')\n            break\n        else:\n            mi = max(cmi, l)\n            ma = min(cma, h)\n            prev = t\n    else:\n        print('YES')", "import sys\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\nfor i in range(int(input())):\n    (n, m) = read()\n    last_t = 0\n    (maxx, minn) = (m, m)\n    poss = True\n    for i in range(n):\n        (t, l, h) = read()\n        if poss == False:\n            continue\n        del_t = t - last_t\n        maxx = maxx + del_t\n        minn = minn - del_t\n        if maxx < l or minn > h:\n            poss = False\n        last_t = t\n        maxx = min(h, maxx)\n        minn = max(l, minn)\n    print(('NO', 'YES')[poss])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (l1, h1) = (m, m)\n    t1 = 0\n    flag = True\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        d = t - t1\n        if h1 + d < l or l1 - d > h:\n            flag = False\n        if l < l1 - d:\n            l1 = l1 - d\n        else:\n            l1 = l\n        if h > h1 + d:\n            h1 = h1 + d\n        else:\n            h1 = h\n        t1 = t\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    var = 0\n    mi = m\n    ma = m\n    time = 0\n    fin = 'YES'\n    for i in range(n):\n        if fin == 'YES':\n            (a, b, c) = map(int, input().split())\n            val = a - time\n            mi -= val\n            ma += val\n            if b >= mi:\n                mi = b\n            elif mi > c:\n                fin = 'NO'\n            if c <= ma:\n                ma = c\n            elif ma < b:\n                fin = 'NO'\n        else:\n            (a, b, c) = map(int, input().split())\n        time = a\n    print(fin)", "import sys\n\ndef fn1(rngprev, tprev, ti, lo, hi):\n    dt = ti - tprev\n    if hi < rngprev[0] - dt:\n        return None\n    if rngprev[1] + dt < lo:\n        return None\n    return [max(lo, rngprev[0] - dt), min(hi, rngprev[1] + dt)]\n\ndef fn0():\n    res = True\n    (ps, t0) = [int(i) for i in input().split(' ')]\n    tprev = 0\n    rngprev = [t0, t0]\n    for p in range(ps):\n        (ti, lo, hi) = [int(i) for i in input().split(' ')]\n        if res:\n            rng = fn1(rngprev, tprev, ti, lo, hi)\n            if rng is None:\n                res = False\n            rngprev = rng\n            tprev = ti\n    return res\nfor i in range(int(input())):\n    if fn0():\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (n, m) = map(int, input().split())\n    t = 0\n    mx = mn = m\n    LOGIC = True\n    while n > 0:\n        n -= 1\n        (ti, li, hi) = map(int, input().split())\n        mx += ti - t\n        mn -= ti - t\n        t = ti\n        if mn <= li and li <= mx or (mn <= hi and hi <= mx) or (li <= mn and mn <= hi) or (li <= mx and mx <= hi):\n            mx = min(mx, hi)\n            mn = max(mn, li)\n        else:\n            LOGIC = False\n    return LOGIC\nq = int(input())\nwhile q > 0:\n    q -= 1\n    print('YES' if solve() else 'NO')", "import math\nq = int(input())\nfor i in range(q):\n    nm = input().split(' ')\n    n = int(nm[0])\n    m = int(nm[1])\n    current_temp_low = m\n    current_temp_high = m\n    c = [[0, 0, 0] for j in range(n)]\n    d = {}\n    prev_time = 0\n    no_intersection = True\n    for j in range(n):\n        tlh = input().split(' ')\n        t = int(tlh[0])\n        l = int(tlh[1])\n        h = int(tlh[2])\n        if t != prev_time:\n            current_temp_low = current_temp_low - t + prev_time\n            current_temp_high = current_temp_high + t - prev_time\n            prev_time = t\n        if h < current_temp_low or l > current_temp_high:\n            no_intersection = False\n        current_temp_low = max(current_temp_low, l)\n        current_temp_high = min(current_temp_high, h)\n    if no_intersection == True:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (lo, hi) = (m, m)\n    t0 = 0\n    ans = 'YES'\n    for __ in range(n):\n        (t, l, h) = map(int, input().split())\n        lo -= t - t0\n        hi += t - t0\n        t0 = t\n        (lo, hi) = (max(lo, l), min(hi, h))\n        if lo > hi:\n            ans = 'NO'\n    print(ans)", "def f(p, m):\n    time = 0\n    min_temp = max_temp = m\n    for (t, l, h) in p:\n        time_change = t - time\n        max_temp += time_change\n        min_temp -= time_change\n        if min_temp > h or max_temp < l:\n            return 'NO'\n        max_temp = min(max_temp, h)\n        min_temp = max(min_temp, l)\n        time = t\n    return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = []\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        p.append([t, l, h])\n    print(f(p, m))", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    th = tl = m\n    t0 = 0\n    s = 'YES'\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        th = min(h, th + t - t0)\n        tl = max(l, tl - t + t0)\n        t0 = t\n        if th < l or tl > h:\n            s = 'NO'\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mini = maxi = m\n    flag = 0\n    prev = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        mini -= t - prev\n        maxi += t - prev\n        mini = max(mini, l)\n        maxi = min(maxi, h)\n        if mini > maxi:\n            flag = 1\n        prev = t\n    print('YES' if flag == 0 else 'NO')", "ip = lambda : map(int, input().split())\nt = int(input())\nfor ti in range(t):\n    (n, s) = ip()\n    mn = mx = s\n    pt = 0\n    cus = [tuple(ip()) for x in range(n)]\n    cus.sort()\n    p = True\n    for (k, l, h) in cus:\n        k = k - pt\n        mn = mn - k\n        mx = mx + k\n        if mn > h or mx < l:\n            p = False\n            break\n        pt += k\n        (mn, mx) = (max(l, mn), min(h, mx))\n    print('YES' if p else 'NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mini = m\n    maxi = m\n    t2 = 0\n    b = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        x = mini - (t - t2)\n        y = maxi + (t - t2)\n        if l <= y and x <= h:\n            mini = max(x, l)\n            maxi = min(y, h)\n            t2 = t\n        else:\n            b = 1\n    else:\n        if b:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    low = m\n    hi = m\n    prev = 0\n    f = 0\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        low -= t - prev\n        hi += t - prev\n        if h < low or l > hi:\n            f = 1\n        low = max(low, l)\n        hi = min(hi, h)\n        prev = t\n        if low > hi:\n            f = 1\n    if f:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, m) = R()\n    t0 = 0\n    (pl, ph) = (m, m)\n    isGood = True\n    for i in range(n):\n        (t, l, h) = R()\n        (pl, ph) = (max(pl - (t - t0), l), min(ph + t - t0, h))\n        t0 = t\n        if pl > ph:\n            isGood = False\n    print('YES' if isGood else 'NO')", "def intersect(a, b, c, d):\n    temp1 = max(a, c)\n    temp2 = min(b, d)\n    if temp2 < temp1:\n        return None\n    else:\n        return [temp1, temp2]\nfor t in range(int(input())):\n    (n, temp) = [int(i) for i in input().split()]\n    time = 0\n    pos = [temp, temp]\n    f = 1\n    for i in range(n):\n        (in_time, l, h) = [int(i) for i in input().split()]\n        if f:\n            temp = in_time - time\n            pos = [pos[0] - temp, pos[1] + temp]\n            pos = intersect(l, h, pos[0], pos[1])\n            time = in_time\n            if pos is None:\n                f = 0\n    if f:\n        print('YES')\n    else:\n        print('NO')", "r = int(input())\nfor _ in range(r):\n    (n, m) = map(int, input().split())\n    l1 = m\n    h1 = m\n    t1 = 0\n    flag = True\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        d = t - t1\n        if h1 + d < l:\n            flag = False\n        if l1 - d > h:\n            flag = False\n        if l < l1 - d:\n            l1 = l1 - d\n        else:\n            l1 = l\n        if h > h1 + d:\n            h1 = h1 + d\n        else:\n            h1 = h\n        t1 = t\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    to = 0\n    lo = m\n    ro = m\n    f = True\n    for i in range(n):\n        (t, l, r) = map(int, input().split())\n        lo -= t - to\n        ro += t - to\n        if lo <= l <= ro or lo <= r <= ro or l <= lo <= r or (l <= ro <= r):\n            (to, lo, ro) = (t, max(l, lo), min(r, ro))\n        else:\n            f = False\n    if f:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor destination in range(q):\n    (n, m) = map(int, input().split())\n    LastTime = 0\n    ind1 = m\n    ind2 = m\n    answer = 'YES'\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        ind1 -= t - LastTime\n        ind2 += t - LastTime\n        LastTime = t\n        ind1 = max(l, ind1)\n        ind2 = min(h, ind2)\n        if ind1 > ind2:\n            answer = 'NO'\n    print(answer)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = []\n    l = []\n    h = []\n    for i in range(n):\n        (a, b, c) = map(int, input().split())\n        t.append(a)\n        l.append(b)\n        h.append(c)\n    if m + t[0] < l[0] or m - t[0] > h[0]:\n        g = 0\n        (cl, ch) = (0, 0)\n    else:\n        g = 1\n        (cl, ch) = (max(m - t[0], l[0]), min(m + t[0], h[0]))\n    for i in range(1, n):\n        (p, q, r) = (t[i] - t[i - 1], l[i], h[i])\n        if q > ch + p or r < cl - p:\n            g = 0\n            break\n        else:\n            (cl, ch) = (max(cl - p, q), min(ch + p, r))\n    if g:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    T = 0\n    L = m\n    H = m\n    flag = False\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        L = max(L - (t - T), l)\n        H = min(H + (t - T), h)\n        T = t\n        if L > h or H < l:\n            flag = True\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    ls = []\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        ls.append((t, l, h))\n    ls.sort(key=lambda x: x[0])\n    nt = 0\n    nh = m\n    nl = m\n    ans = 'YES'\n    for p in ls:\n        if nh + (p[0] - nt) > p[2]:\n            nh = p[2]\n        elif nh + (p[0] - nt) >= p[1]:\n            nh = nh + (p[0] - nt)\n        else:\n            ans = 'NO'\n            break\n        if nl - (p[0] - nt) < p[1]:\n            nl = p[1]\n        elif nl - (p[0] - nt) <= p[2]:\n            nl = nl - (p[0] - nt)\n        else:\n            ans = 'NO'\n            break\n        nt = p[0]\n    print(ans)", "q = int(input())\nfor _ in range(q):\n    (n, m) = list(map(int, input().split(' ')))\n    status = True\n    current_time = 0\n    (m_min, m_max) = (None, None)\n    for i in range(n):\n        (t, l, h) = list(map(int, input().split(' ')))\n        if not status:\n            continue\n        if m_min == None and m_max == None:\n            m_min = m - (t - current_time)\n            m_max = m + (t - current_time)\n        else:\n            m_min = m_min - (t - current_time)\n            m_max = m_max + (t - current_time)\n        m_min = max(l, m_min)\n        m_max = min(h, m_max)\n        current_time = t\n        if m_min > m_max:\n            print('NO')\n            status = False\n    if status:\n        print('YES')", "def main(n, m, ts, ls, hs):\n    tc = 0\n    hc = m\n    lc = m\n    for i in range(n):\n        hc = hc + (ts[i] - tc)\n        lc = lc - (ts[i] - tc)\n        if ls[i] <= hc and hs[i] >= lc:\n            hc = min(hs[i], hc)\n            lc = max(ls[i], lc)\n            tc = ts[i]\n            continue\n        return 'NO'\n    return 'YES'\nq = int(input())\nfor _ in range(q):\n    (n, m) = [int(x) for x in input().split()]\n    ts = [0] * n\n    ls = [0] * n\n    hs = [0] * n\n    for i in range(n):\n        (ts[i], ls[i], hs[i]) = [int(x) for x in input().split()]\n    print(main(n, m, ts, ls, hs))", "q = int(input())\nresult = []\nfor _ in range(q):\n    (n, m) = input().split(' ')\n    n = int(n)\n    m = int(m)\n    t = [0]\n    l = [m]\n    h = [m]\n    for _ in range(n):\n        (a, b, c) = input().split(' ')\n        t.append(int(a))\n        l.append(int(b))\n        h.append(int(c))\n    left = m\n    right = m\n    flag_YES = True\n    for i in range(1, n + 1):\n        left -= t[i] - t[i - 1]\n        right += t[i] - t[i - 1]\n        if right < l[i] or h[i] < left:\n            flag_YES = False\n        else:\n            if l[i] > left:\n                left = l[i]\n            if h[i] < right:\n                right = h[i]\n    if flag_YES:\n        result.append('YES')\n    else:\n        result.append('NO')\nfor item in result:\n    print(item)", "q = int(input())\nfor i in range(q):\n    (n, m) = map(int, input().split())\n    t0 = 0\n    t = []\n    l = []\n    h = []\n    ans = 'YES'\n    r = m\n    for j in range(n):\n        (t, l, h) = map(int, input().split())\n        x = t - t0\n        t0 = t\n        m = max(l, m - x)\n        r = min(h, r + x)\n        if m > r:\n            ans = 'NO'\n    print(ans)", "tcases = int(input())\nfor i in range(tcases):\n    t = [int(x) for x in input().split(' ')]\n    (n, m) = t\n    vset = []\n    flag = True\n    time = 0\n    initt_1 = m\n    initt_2 = m\n    for j in range(n):\n        v = [int(x) for x in input().split(' ')]\n        td = v[0] - time\n        time = v[0]\n        initt_1 = max(initt_1 - td, v[1])\n        initt_2 = min(initt_2 + td, v[2])\n        if initt_1 > initt_2:\n            flag = False\n            continue\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "R = lambda : map(int, input().split())\n(q,) = R()\nfor _ in [0] * q:\n    (n, a) = R()\n    b = a\n    s = r = 0\n    for _ in [0] * n:\n        (t, l, h) = R()\n        a = max(l, a - t + s)\n        b = min(h, b + t - s)\n        r |= a > b\n        s = t\n    print('YNEOS'[r::2])", "def intersect(a, b, c, d):\n    if b < c or a > d:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = 0\n    mini = m\n    maxi = m\n    index = 0\n    f = 1\n    for i in range(n):\n        (t1, l, h) = list(map(int, input().split()))\n        mini = mini - (t1 - t)\n        maxi = maxi + (t1 - t)\n        t = t1\n        if intersect(mini, maxi, l, h):\n            mini = max(mini, l)\n            maxi = min(maxi, h)\n            index += 1\n        else:\n            f = 0\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')", "def mp():\n    return map(int, input().split())\nq = int(input())\nfor _ in range(q):\n    (n, m) = mp()\n    mn = m\n    mx = m\n    time = 0\n    ans = 'YES'\n    for _ in range(n):\n        (t, l, h) = mp()\n        k = t - time\n        mn -= k\n        mx += k\n        if mn > h or mx < l:\n            ans = 'NO'\n        time = t\n        mn = max(mn, l)\n        mx = min(mx, h)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t0 = 0\n    a = 'YES'\n    r = m\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        t1 = t - t0\n        t0 = t\n        m = max(l, m - t1)\n        r = min(h, r + t1)\n        if m > r:\n            a = 'NO'\n    print(a)", "for _ in range(int(input())):\n    (n, a) = (int(x) for x in input().strip().split(' '))\n    (t, l, r) = (0, a, a)\n    L = []\n    for _z in range(n):\n        L.append([int(x) for x in input().strip().split(' ')])\n    ans = True\n    for x in L:\n        d = x[0] - t\n        l1 = l - d\n        r1 = r + d\n        if x[2] < l1 or x[1] > r1:\n            ans = False\n            break\n        l = max(x[1], l1)\n        r = min(x[2], r1)\n        t = x[0]\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "Q = int(input())\nfor qq in range(Q):\n    (n, m) = map(int, input().split())\n    tl = m\n    th = m\n    time = 0\n    flag = True\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        if flag:\n            tl -= t - time\n            th += t - time\n            tl = max(tl, l)\n            th = min(th, h)\n            time = t\n            if tl > th:\n                flag = False\n    print('YES' if flag else 'NO')", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    d = []\n    (lb, ub) = (m, m)\n    for i in range(n):\n        d.append(list(map(int, input().split())))\n    d.sort()\n    pre_t = 0\n    ok = True\n    for (t, l, h) in d:\n        lb -= t - pre_t\n        ub += t - pre_t\n        if lb > h or ub < l:\n            ok = False\n            break\n        lb = max(lb, l)\n        ub = min(ub, h)\n        pre_t = t\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "def intersect(a1, a2, b1, b2):\n    low = max(a1, b1)\n    high = min(a2, b2)\n    if low > high:\n        return -1\n    else:\n        return (low, high)\nq = int(input())\nfor _ in range(q):\n    ans = 'YES'\n    (n, low) = map(int, input().split())\n    high = low\n    time = 0\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        low -= t - time\n        high += t - time\n        tmp = intersect(low, high, l, h)\n        if tmp == -1:\n            ans = 'NO'\n        else:\n            (low, high) = tmp\n        time = t\n    print(ans)", "def judge(li, n, m):\n    low = m\n    high = m\n    for i in range(1, n + 1):\n        time = li[i][0] - li[i - 1][0]\n        low = max(low - time, li[i][1])\n        high = min(high + time, li[i][2])\n        if low > high:\n            return False\n    return True\n\ndef solve():\n    case = int(input())\n    for _t in range(case):\n        (n, m) = map(int, input().split())\n        li = []\n        li.append([0, m, m])\n        for i in range(1, n + 1):\n            (t, l, h) = map(int, input().split())\n            li.append([t, l, h])\n        if judge(li, n, m):\n            print('YES')\n        else:\n            print('NO')\nsolve()", "q = int(input())\nfor _ in range(q):\n    [n, m] = [*map(int, input().split())]\n    prevt = 0\n    maxi = m\n    mini = m\n    res = 'YES'\n    for _ in range(n):\n        [t, l, h] = [*map(int, input().split())]\n        maxi = maxi + t - prevt\n        mini = mini - t + prevt\n        if maxi < l or mini > h:\n            res = 'NO'\n        maxi = min(h, maxi)\n        mini = max(l, mini)\n        prevt = t\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    time = 0\n    c = m\n    result = 'YES'\n    for _ in range(n):\n        (t, l, h) = map(int, input().split())\n        r = t - time\n        time = t\n        m = max(l, m - r)\n        c = min(h, c + r)\n        if m > c:\n            result = 'NO'\n    print(result)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (lo, hi) = (m, m)\n    w = 0\n    for (t, l, h) in sorted((list(map(int, input().split())) for _ in range(n))):\n        d = t - w\n        lo -= d\n        hi += d\n        lo = max(lo, l)\n        hi = min(hi, h)\n        w = t\n        if lo > hi:\n            print('NO')\n            break\n    else:\n        print('YES')", "from operator import itemgetter\n\ndef solve(customers, m):\n    customers.sort(key=itemgetter(0))\n    min_temp = m\n    max_temp = m\n    minutes = 0\n    for customer in customers:\n        min_temp = min_temp - (customer[0] - minutes)\n        max_temp = max_temp + customer[0] - minutes\n        if max_temp < customer[1] or min_temp > customer[2]:\n            return False\n        minutes = customer[0]\n        min_temp = max(min_temp, customer[1])\n        max_temp = min(max_temp, customer[2])\n    return True\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    customers = []\n    for i in range(n):\n        (t, l, h) = map(int, input().split())\n        customers.append([t, l, h])\n    print('YES' if solve(customers, m) else 'NO')"]