["def main():\n    return '\\n'.join((nCharactersToReplaceMin() for _ in range(int(input()))))\n\ndef nCharactersToReplaceMin():\n    (word_sLength, period) = map(int, input().split())\n    limit = period // 2\n    if period % 2:\n        (word, middleLettersCount) = (input(), {})\n        for i in range(limit, word_sLength, period):\n            if word[i] not in middleLettersCount:\n                middleLettersCount[word[i]] = 1\n            else:\n                middleLettersCount[word[i]] += 1\n        return str(word_sLength - max(middleLettersCount.values()) - nDesiredCharacters(word, period, limit, limit))\n    else:\n        return str(word_sLength - nDesiredCharacters(input(), period, limit, limit - 1))\n\ndef nDesiredCharacters(word, period, limit1, limit2):\n    return sum((countOfMostRepeatedCharacter(word, period, i1, i2) for (i1, i2) in zip(range(limit1), range(period - 1, limit2, -1))))\n\ndef countOfMostRepeatedCharacter(word, period, i1, i2):\n    lettersCount = {}\n    for (j1, j2) in zip(range(i1, len(word), period), range(i2, len(word), period)):\n        if word[j1] not in lettersCount:\n            lettersCount[word[j1]] = 1\n        else:\n            lettersCount[word[j1]] += 1\n        if word[j2] not in lettersCount:\n            lettersCount[word[j2]] = 1\n        else:\n            lettersCount[word[j2]] += 1\n    return max(lettersCount.values())\nprint(main())", "def main():\n    return '\\n'.join((nCharactersToReplaceMin() for _ in range(int(input()))))\n\ndef nCharactersToReplaceMin():\n\n    def nDesiredCharacters(limit1, limit2):\n\n        def countOfMostRepeatedCharacter(i1, i2):\n            lettersCount = {}\n            for (j1, j2) in zip(range(i1, len(word), period), range(i2, len(word), period)):\n                if word[j1] not in lettersCount:\n                    lettersCount[word[j1]] = 1\n                else:\n                    lettersCount[word[j1]] += 1\n                if word[j2] not in lettersCount:\n                    lettersCount[word[j2]] = 1\n                else:\n                    lettersCount[word[j2]] += 1\n            return max(lettersCount.values())\n        return sum((countOfMostRepeatedCharacter(i1, i2) for (i1, i2) in zip(range(limit1), range(period - 1, limit2, -1))))\n    (word_sLength, period) = map(int, input().split())\n    word = input()\n    limit = period // 2\n    if period % 2:\n        middleLettersCount = {}\n        for i in range(limit, word_sLength, period):\n            if word[i] not in middleLettersCount:\n                middleLettersCount[word[i]] = 1\n            else:\n                middleLettersCount[word[i]] += 1\n        return str(word_sLength - max(middleLettersCount.values()) - nDesiredCharacters(limit, limit))\n    else:\n        return str(word_sLength - nDesiredCharacters(limit, limit - 1))\nprint(main())", "from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n\n    def f(s):\n        return s.strip()\n    return list(map(f, input().split()))\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    (n, k) = rlint()\n    s = rstr()\n    cnt = [[0] * 26 for _ in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    res = 0\n    for i in range(k // 2):\n        res += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        res += n // k - max(cnt[k // 2])\n    print(res)\nfor _ in range(rint()):\n    main()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input().rstrip()\n    ans = 0\n    for i in range(k // 2):\n        alph = [0] * 26\n        for j in range(n // k):\n            alph[ord(s[j * k + i]) - ord('a')] += 1\n            alph[ord(s[j * k + k - 1 - i]) - ord('a')] += 1\n        ans += sum(alph) - max(alph)\n    if k % 2:\n        alph = [0] * 26\n        for j in range(n // k):\n            alph[ord(s[j * k + k // 2]) - ord('a')] += 1\n        ans += sum(alph) - max(alph)\n    print(ans)", "from collections import Counter\nimport sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        (n, k) = MI()\n        aa = [ord(c) for c in SI()]\n        fin = [False] * k\n        ans = 0\n        for m1 in range(k):\n            if fin[m1]:\n                continue\n            m2 = (n - m1 - 1) % k\n            if m1 == m2:\n                cnt = Counter(aa[m1::k])\n                fin[m1] = True\n                ans += n // k - max(cnt.values())\n            else:\n                cnt = Counter(aa[m1::k] + aa[m2::k])\n                fin[m1] = fin[m2] = True\n                ans += 2 * n // k - max(cnt.values())\n        print(ans)\nmain()", "from sys import stdin\ninput = stdin.readline\nfrom collections import defaultdict as di, deque as dq\n\ndef f(s, k):\n    cost = 0\n    n = len(s)\n    found = [0] * n\n    for i in range(n):\n        if found[i]:\n            continue\n        counter = di(int)\n        bfs = dq()\n        bfs.append(i)\n        while bfs:\n            node = bfs.popleft()\n            if node < 0 or node >= n or found[node]:\n                continue\n            found[node] = 1\n            counter[s[node]] += 1\n            bfs.append(n - node - 1)\n            bfs.append(node + k)\n            bfs.append(node - k)\n        t = 0\n        mx = 0\n        for char in counter:\n            t += counter[char]\n            mx = max(mx, counter[char])\n        cost += t - mx\n    return cost\nfor i in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    s = list(input().strip())\n    print(f(s, b))", "from collections import defaultdict\nfrom math import ceil\n\ndef solve(st, l, d):\n    arr = []\n    for i in range(0, l, d):\n        arr.append(st[i:i + d])\n    nd = ceil(d / 2)\n    ans = 0\n    for i in range(nd):\n        m = defaultdict(int)\n        for j in range(l // d):\n            m[arr[j][i]] += 1\n            if i != d - (i + 1):\n                m[arr[j][d - (i + 1)]] += 1\n        ans += sum(m.values()) - max(m.values())\n    return ans\nt = int(input())\nlans = ''\nfor l in range(t):\n    (l, d) = map(int, input().split())\n    st = input()\n    lans += str(solve(st, l, d))\n    lans += '\\n'\nprint(lans)", "ans = []\nfor s in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s1 = input()\n    final = 0\n    for i in range(0, k):\n        arr = [0] * 26\n        j = i\n        while j < n:\n            arr[ord(s1[j]) - 97] += 1\n            arr[ord(s1[k - 1 - j]) - 97] += 1\n            j += k\n        final += sum(arr) - max(arr)\n    ans.append(final // 2)\nfor it in ans:\n    print(it)", "from sys import stdin\nt = int(stdin.readline())\nx = [0] * t\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - 97] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    x[_] = ans\nprint(*x, sep='\\n')", "ans = []\nfor s in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s1 = input()\n    final = 0\n    for i in range(0, k):\n        arr = [0] * 26\n        j = i\n        while j < n:\n            arr[ord(s1[j]) - 97] += 1\n            arr[ord(s1[k - 1 - j]) - 97] += 1\n            j += k\n        final += sum(arr) - max(arr)\n    ans.append(final // 2)\nfor it in ans:\n    print(it)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "def solve(ans):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    occur = [[0] * 26 for i in range((k + 1) // 2)]\n    for i in range(0, n, k):\n        for j in range((k + 1) // 2):\n            occur[j][ord(s[i + j]) - ord('a')] += 1\n        for j in range(k // 2):\n            occur[j][ord(s[i + k - j - 1]) - ord('a')] += 1\n    change = 0\n    for j in range(k // 2):\n        max_at_pos = max(occur[j])\n        change += 2 * (n // k) - max_at_pos\n    if k % 2 != 0:\n        change += n // k - max(occur[-1])\n    ans.append(change)\n    return\nn = int(input())\nans = []\nfor i in range(n):\n    solve(ans)\nfor ele in ans:\n    print(ele)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().rstrip()\n    chk = [0] * n\n    q = [[0] * 26]\n    now = 1\n    cnt = 0\n    for x in range(n // 2):\n        if chk[x] != 0:\n            continue\n        chk[x] = now\n        q[now - 1][ord(s[x]) - ord('a')] += 1\n        for y in range(x, n, k):\n            if chk[y] == 0:\n                chk[y] = now\n                q[now - 1][ord(s[y]) - ord('a')] += 1\n            if n - y - 1 >= 0 and chk[n - y - 1] == 0:\n                chk[n - y - 1] = now\n                q[now - 1][ord(s[n - y - 1]) - ord('a')] += 1\n        now += 1\n        q.append([0] * 26)\n    del q[-1]\n    for x in q:\n        cnt += sum(x) - max(x)\n    print(cnt)", "from sys import stdin\nL = int(stdin.readline())\nX = [0] * L\nfor _ in range(L):\n    (N, K) = map(int, stdin.readline().split())\n    S = stdin.readline()[:N]\n    T = list(S)\n    ANS = 0\n    for I in range(K // 2 + 1):\n        A = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n        for J in range(I, N, K):\n            A[S[J]] += 1\n            A[S[N - J - 1]] += 1\n        Z = max(A, key=A.get)\n        for J in range(I, N, K):\n            if T[J] != Z:\n                T[J] = Z\n                ANS += 1\n            if T[N - J - 1] != Z:\n                T[N - J - 1] = Z\n                ANS += 1\n    X[_] = ANS\nprint(*X, sep='\\n')", "from sys import stdin\nL = int(stdin.readline())\nX = ''\nfor _ in range(L):\n    (N, K) = map(int, stdin.readline().split())\n    S = stdin.readline()[:N]\n    T = list(S)\n    ANS = 0\n    for I in range(K // 2 + 1):\n        A = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n        for J in range(I, N, K):\n            A[S[J]] += 1\n            A[S[N - J - 1]] += 1\n        Z = max(A, key=A.get)\n        for J in range(I, N, K):\n            if T[J] != Z:\n                T[J] = Z\n                ANS += 1\n            if T[N - J - 1] != Z:\n                T[N - J - 1] = Z\n                ANS += 1\n    X += str(ANS) + '\\n'\nprint(X)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = stdin.readline()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "import operator\nT = int(input())\nn = [0] * T\nk = [0] * T\nss = [0] * T\nfor t in range(T):\n    (n[t], k[t]) = [int(i) for i in input().split(' ')]\n    ss[t] = input()\nfor t in range(T):\n    ans = n[t]\n    g = n[t] // k[t]\n    for i in range(int((k[t] + 1) * 0.5)):\n        uns = {}\n        for j in range(g):\n            if j * k[t] + i != (j + 1) * k[t] - i - 1:\n                m = 2\n                for ind in (j * k[t] + i, (j + 1) * k[t] - i - 1):\n                    if ss[t][ind] in uns:\n                        uns[ss[t][ind]] += 1\n                    else:\n                        uns[ss[t][ind]] = 1\n            else:\n                ind = j * k[t] + i\n                m = 1\n                if ss[t][ind] in uns:\n                    uns[ss[t][ind]] += 1\n                else:\n                    uns[ss[t][ind]] = 1\n        ans -= max(uns.items(), key=operator.itemgetter(1))[1]\n    print(ans)", "from sys import stdin, stdout\n\ndef input():\n    return stdin.readline().strip()\nfrom collections import defaultdict\n\ndef cost(chars):\n    freqs = defaultdict(int)\n    for c in chars:\n        freqs[c] += 1\n    return sum(freqs.values()) - max(freqs.values())\n\ndef ans(S, N, K):\n    to_match = []\n    for i in range(N // K):\n        to_match.append(''.join(S[K * i:K * (i + 1)]))\n    S = S[::-1]\n    for i in range(N // K):\n        to_match.append(''.join(S[K * i:K * (i + 1)]))\n    ret = 0\n    for i in range(K):\n        chars = [s[i] for s in to_match]\n        ret += cost(chars)\n    return ret // 2\nT = int(input())\nfor t in range(T):\n    (N, K) = input().split(' ')\n    (N, K) = (int(N), int(K))\n    S = input().strip()\n    print(ans(S, N, K))", "from sys import stdin\nt = int(stdin.readline())\noutput = []\nfor tc in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    w = stdin.readline()\n    e = [[] for i in range(n)]\n    for i in range(n // 2):\n        e[i].append(n - i - 1)\n        e[n - i - 1].append(i)\n    for i in range(n - k):\n        e[i].append(i + k)\n        e[i + k].append(i)\n    sol = 0\n    used = [False for i in range(n)]\n    for i in range(n):\n        if used[i]:\n            continue\n        sz = 0\n        fr = {}\n        q = [i]\n        while len(q):\n            u = q.pop()\n            if used[u]:\n                continue\n            used[u] = True\n            sz += 1\n            fr[w[u]] = fr.get(w[u], 0) + 1\n            for v in e[u]:\n                if not used[v]:\n                    q.append(v)\n        sol += sz - max(fr.values())\n    output.append(str(sol))\nprint('\\n'.join(output))", "t = int(input())\ncases = []\nfor i in range(t):\n    (length, k) = map(int, input().strip().split())\n    word = input()\n    cases.append([word, k])\n\ndef solve(case):\n    word = case[0]\n    k = case[1]\n    reps = len(word) // k\n    ans = 0\n    for i in range(k // 2 if k % 2 == 0 else k // 2 + 1):\n        print()\n        count = {}\n        for j in range(reps + 1):\n            (left, right) = ((j + 1) * k - 1 - i, j * k + i)\n            if 0 <= left < len(word):\n                if word[left] in count:\n                    count[word[left]] += 1\n                else:\n                    count[word[left]] = 1\n            if 0 <= right < len(word) and left != right:\n                if word[right] in count:\n                    count[word[right]] += 1\n                else:\n                    count[word[right]] = 1\n        replace = sum(count.values()) - max(count.values())\n        ans += replace\n    print(ans)\nfor case in cases:\n    solve(case)", "from sys import stdin\ninput = stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    r = 0\n    for i in range(k // 2 + 1):\n        if (n - 1 - i) % k < i:\n            continue\n        l = (n - i - 1) // k + 1\n        c = Counter((s[j] for j in range(i, n, k)))\n        if i != k - i - 1:\n            l *= 2\n            for j in range(n - i - 1, -1, -k):\n                c[s[j]] += 1\n        r += l - c.most_common(1)[0][1]\n    print(r)", "import sys\nimport collections\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, K) = [int(x) for x in input().split()]\n        S = input().strip()\n        X = [[0] * 26 for _ in range(K)]\n        added = set()\n        ans = 0\n        for i in range(N // 2):\n            if i in added:\n                continue\n            c = collections.Counter()\n            c[S[i]] += 1\n            added.add(i)\n            q = collections.deque()\n            q.append(i)\n            cnt = 1\n            while q:\n                cc = q.pop()\n                if cc + K < N and cc + K not in added:\n                    added.add(cc + K)\n                    q.append(cc + K)\n                    c[S[cc + K]] += 1\n                    cnt += 1\n                if N - 1 - cc >= 0 and N - 1 - cc not in added:\n                    added.add(N - 1 - cc)\n                    q.append(N - 1 - cc)\n                    c[S[N - 1 - cc]] += 1\n                    cnt += 1\n                if cc - K >= 0 and cc - K not in added:\n                    added.add(cc - K)\n                    q.append(cc - K)\n                    c[S[cc - K]] += 1\n                    cnt += 1\n            ans += cnt - c.most_common()[0][1]\n        print(ans)\nmain()", "L = int(input())\nX = [0] * L\nfor _ in range(L):\n    (N, K) = map(int, input().split())\n    S = input()\n    T = list(S)\n    ANS = 0\n    for I in range(K // 2 + 1):\n        A = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n        for J in range(I, N, K):\n            A[T[J]] += 1\n            A[T[N - J - 1]] += 1\n        Z = max(A, key=A.get)\n        for J in range(I, N, K):\n            if T[J] != Z:\n                T[J] = Z\n                ANS += 1\n            if T[N - J - 1] != Z:\n                T[N - J - 1] = Z\n                ANS += 1\n    X[_] = ANS\nprint(*X, sep='\\n')", "def pet(s):\n    c = [0] * 26\n    n = len(s)\n    for i in range(len(s)):\n        c[ord(s[i]) - 97] += 1\n    return n - max(c)\nimport math\nimport sys\nfor _ in range(int(input())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    q = n // k\n    s = input()\n    ans = 0\n    if k == 1:\n        print(pet(s))\n    else:\n        a = ['' for i in range(math.ceil(k / 2))]\n        for i in range(q):\n            st = s[i * k:i * k + k]\n            for j in range(math.ceil(k / 2)):\n                if j == k - j - 1:\n                    a[j] += st[j]\n                else:\n                    a[j] += st[j] + st[k - j - 1]\n        for i in range(math.ceil(k / 2)):\n            l = list(a[i])\n            ans += pet(a[i])\n        print(ans)", "a = int(input())\nfor _ in range(a):\n    (b, c) = map(int, input().split())\n    d = input()\n    ans = 0\n    for i in range(c // 2):\n        now = i\n        data = {}\n        while now < b:\n            if d[now] not in data:\n                data[d[now]] = 0\n            data[d[now]] += 1\n            now += c\n        now = c - i - 1\n        while now < b:\n            if d[now] not in data:\n                data[d[now]] = 0\n            data[d[now]] += 1\n            now += c\n        ans += max(data.values())\n    if c % 2 == 1:\n        now = c // 2\n        data = {}\n        while now < b:\n            if d[now] not in data:\n                data[d[now]] = 0\n            data[d[now]] += 1\n            now += c\n        ans += max(data.values())\n    print(b - ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    no_of_sets = n // k\n    iterations = k // 2\n    ans = 0\n    for i in range(iterations):\n        d = {}\n        for fr in range(i, n, k):\n            if s[fr] in d:\n                d[s[fr]] += 1\n            else:\n                d[s[fr]] = 1\n        for bk in range(k - 1 - i, n, k):\n            if s[bk] in d:\n                d[s[bk]] += 1\n            else:\n                d[s[bk]] = 1\n        ans += 2 * no_of_sets - max(d.values())\n    d = {}\n    if k % 2 == 1:\n        i = k // 2\n        for fr in range(i, n, k):\n            if s[fr] in d:\n                d[s[fr]] += 1\n            else:\n                d[s[fr]] = 1\n        ans += no_of_sets - max(d.values())\n    print(ans)", "from collections import defaultdict\n\ndef solve(s, n, k):\n    div = n // k\n    i = 0\n    j = k - 1\n    ans = 0\n    while i <= j:\n        map_d = defaultdict(int)\n        for d in range(div):\n            l = d * k + i\n            r = d * k + j\n            if l != r:\n                map_d[s[l]] += 1\n                map_d[s[r]] += 1\n            else:\n                map_d[s[l]] += 1\n        max_so_far = -1\n        for key in map_d.keys():\n            if map_d[key] > max_so_far:\n                max_so_far = map_d[key]\n        if i == j:\n            ans += div - max_so_far\n        else:\n            ans += 2 * div - max_so_far\n        i += 1\n        j -= 1\n    return ans\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        (n, k) = list(map(int, input().strip().split()))\n        s = input()\n        ans = solve(s, n, k)\n        print(ans)\nread()", "def slv(s, n, k):\n    ans = 0\n    for i in range((k + 1) // 2):\n        c = {}\n        sm = 0\n        for j in range(n // k):\n            a = s[j * k + i]\n            if a not in c:\n                c[a] = 0\n            c[a] += 1\n            sm += 1\n            if i != k - i - 1:\n                a = s[j * k + k - i - 1]\n                if a not in c:\n                    c[a] = 0\n                c[a] += 1\n                sm += 1\n        m = max([c[i] for i in c])\n        ans += sm - m\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(slv(s, n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    for i in range(0, k // 2):\n        d = {}\n        g = 0\n        for j in range(i, n, k):\n            g += 1\n            if s[j] not in d:\n                d[s[j]] = 0\n            d[s[j]] += 1\n        for j in range(k - i - 1, n, k):\n            g += 1\n            if s[j] not in d:\n                d[s[j]] = 0\n            d[s[j]] += 1\n        m = max(d.values())\n        m = g - m\n        c += m\n    if k % 2 != 0:\n        re = k // 2\n        g = 0\n        d = {}\n        for i in range(re, n, k):\n            g += 1\n            if s[i] not in d:\n                d[s[i]] = 0\n            d[s[i]] += 1\n        m = max(d.values())\n        m = g - m\n        c += m\n    print(c)", "def solve(s, k):\n    n = len(s)\n    r = n // k\n    res = 0\n    for j in range(k // 2):\n        d = [0] * 26\n        for i in range(r):\n            d[ord(s[i * k + j]) - 97] += 1\n            d[ord(s[i * k + k - 1 - j]) - 97] += 1\n        res += 2 * r - max(d)\n    if k % 2 == 1:\n        d = [0] * 26\n        for i in range(r):\n            d[ord(s[i * k + k // 2]) - 97] += 1\n        res += r - max(d)\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(s, k))", "import math\nimport sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    per = 0\n    for i in range(k // 2):\n        m = {}\n        for j in range(n // k):\n            if s[i + j * k] not in m:\n                m[s[i + j * k]] = 1\n            else:\n                m[s[i + j * k]] += 1\n            if s[k - 1 - i + j * k] not in m:\n                m[s[k - 1 - i + j * k]] = 1\n            else:\n                m[s[k - 1 - i + j * k]] += 1\n        mx = 0\n        for key in m:\n            mx = max(mx, m[key])\n        per += 2 * n // k - mx\n    if k % 2 == 1:\n        m = {}\n        for j in range(n // k):\n            if s[k // 2 + j * k] not in m:\n                m[s[k // 2 + j * k]] = 1\n            else:\n                m[s[k // 2 + j * k]] += 1\n        mx = 0\n        for key in m:\n            mx = max(mx, m[key])\n        per += n // k - mx\n    print(per)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(input())\n    ans = 0\n    if k % 2 == 0:\n        for i in range(k // 2):\n            ar = dict()\n            for r in range(i, n, k):\n                if a[r] not in ar:\n                    ar[a[r]] = 1\n                else:\n                    ar[a[r]] += 1\n            for r in range(n - 1 - i, -1, -k):\n                if a[r] not in ar:\n                    ar[a[r]] = 1\n                else:\n                    ar[a[r]] += 1\n            m = 0\n            for elem in ar:\n                if ar[elem] > m:\n                    m = ar[elem]\n            ans += 2 * (n // k) - m\n        print(ans)\n    else:\n        for i in range(k // 2):\n            ar = dict()\n            for r in range(i, n, k):\n                if a[r] not in ar:\n                    ar[a[r]] = 1\n                else:\n                    ar[a[r]] += 1\n            for r in range(n - 1 - i, -1, -k):\n                if a[r] not in ar:\n                    ar[a[r]] = 1\n                else:\n                    ar[a[r]] += 1\n            m = 0\n            for elem in ar:\n                if ar[elem] > m:\n                    m = ar[elem]\n            ans += 2 * (n // k) - m\n        ar = dict()\n        for i in range(k // 2, n, k):\n            if a[i] not in ar:\n                ar[a[i]] = 1\n            else:\n                ar[a[i]] += 1\n        m = 0\n        for elem in ar:\n            if ar[elem] > m:\n                m = ar[elem]\n        ans += n // k - m\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k // 2):\n        l = [0] * 26\n        c = 0\n        for j in range(i, n, k):\n            c += 1\n            val = ord(s[j]) - ord('a')\n            l[val] += 1\n        for j in range(k - i - 1, n, k):\n            c += 1\n            val = ord(s[j]) - ord('a')\n            l[val] += 1\n        ans += c - max(l)\n    if k % 2 != 0:\n        c = 0\n        l = [0] * 26\n        for j in range(k // 2, n, k):\n            c += 1\n            val = ord(s[j]) - ord('a')\n            l[val] += 1\n        ans += c - max(l)\n    print(ans)", "import sys\n\ndef run_case():\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = [[0] * 26 for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    res = 0\n    for i in range(k // 2):\n        res += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        res += n // k - max(cnt[k // 2])\n    print(res)\nt = int(input())\nfor _ in range(t):\n    run_case()", "for _ in range(int(input())):\n    [n, k] = list(map(int, input().split(' ')))\n    s = input()\n    ans = 0\n    for i in range((k + 1) // 2):\n        d = [0 for i in range(26)]\n        for j in range(n // k):\n            if i != k - 1 - i:\n                d[ord(s[i + k * j]) - ord('a')] += 1\n                d[ord(s[k - 1 - i + k * j]) - ord('a')] += 1\n            else:\n                d[ord(s[i + k * j]) - ord('a')] += 1\n        if i == k - 1 - i:\n            ans += n // k - max(d)\n        else:\n            ans += 2 * n // k - max(d)\n    print(ans)", "def CountFrequency(my_list):\n    freq = {}\n    for item in my_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\nt = int(input())\nfor test in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    moves = 0\n    for index in range(k // 2):\n        ilst = [i * k + index for i in range(n // k)] + [(i + 1) * k - 1 - index for i in range(n // k)]\n        letters = [s[i] for i in ilst]\n        ilfreq = CountFrequency(letters)\n        moves += len(letters) - ilfreq[max(ilfreq, key=ilfreq.get)]\n    if k % 2 == 1:\n        ilst = [i * k + k // 2 for i in range(n // k)]\n        letters = [s[i] for i in ilst]\n        ilfreq = CountFrequency(letters)\n        moves += len(letters) - ilfreq[max(ilfreq, key=ilfreq.get)]\n    print(moves)", "def slv(s, n, k):\n    ans = 0\n    for i in range((k + 1) // 2):\n        c = {}\n        sm = 0\n        for j in range(n // k):\n            a = s[j * k + i]\n            if a not in c:\n                c[a] = 0\n            c[a] += 1\n            sm += 1\n            if i != k - i - 1:\n                a = s[j * k + k - i - 1]\n                if a not in c:\n                    c[a] = 0\n                c[a] += 1\n                sm += 1\n        m = max([c[i] for i in c])\n        ans += sm - m\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(slv(s, n, k))", "t = int(input())\nsol = []\nwhile t:\n    t -= 1\n    pas = 0\n    (n, k) = tuple(map(int, input().split()))\n    s = input()\n    d = [i for i in range(k)]\n    subu = [set([i]) for i in range(k)]\n    dic = [{} for j in range(k)]\n    i = 0\n    j = k - 1\n    poz1 = 0\n    poz2 = n - 1\n    while poz1 < poz2:\n        subu[i].add(j)\n        subu[j].add(i)\n        i += 1\n        j -= 1\n        if i == k:\n            i = 0\n        if j == -1:\n            j = k - 1\n        poz1 += 1\n        poz2 -= 1\n    pr = 0\n    vis = [True for i in range(k)]\n    for i in s:\n        if not dic[pr].get(i):\n            dic[pr][i] = 0\n        dic[pr][i] += 1\n        pr += 1\n        if pr == k:\n            pr = 0\n    h = 0\n    for i in range(k):\n        if vis[i]:\n            nr = 0\n            g = {}\n            for j in subu[i]:\n                vis[j] = False\n                nr += 1\n                for a in dic[j].keys():\n                    if g.get(a):\n                        g[a] += dic[j][a]\n                    else:\n                        g[a] = dic[j][a]\n            mini = 0\n            for a in g.keys():\n                mini = max(g[a], mini)\n            h += n // k * nr - mini\n    sol.append(h)\nfor i in sol:\n    print(i)", "def max_counter(a):\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    return max(d.values())\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    ans = 0\n    for i in range(k):\n        ans += len(s[i::k]) + len(s[n - i - 1::-k]) - max_counter(s[i::k] + s[n - i - 1::-k])\n    print(ans // 2)", "def solve():\n    (n, k) = map(int, input().split())\n    s = list(input())\n    c = 0\n    for (i, s_i) in enumerate(s[:k // 2 + 1]):\n        idxs = [*range(i, n, k), *range(k - i - 1, n, k)]\n        cd = {}\n        max_count = 0\n        max_char = None\n        for j in idxs:\n            s_j = s[j]\n            count = cd.get(s_j, 0) + 1\n            if count > max_count:\n                max_count = count\n                max_char = s_j\n            cd[s_j] = count\n        for j in idxs:\n            if s[j] != max_char:\n                s[j] = max_char\n                c += 1\n    print(c)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k // 2 + (1 if k % 2 == 1 else 0)):\n        a = [s[j] for j in range(i, n, k)]\n        if not (k % 2 == 1 and i == k // 2):\n            a.extend((s[j] for j in range(k - i - 1, n, k)))\n        b = Counter(a)\n        ans += sum(b.values()) - max(b.values())\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    (s, p, k) = (input(), n, n // k)\n    for i in range(n // k // 2):\n        (d, m) = (dict(), 0)\n        for j in range(k):\n            d[s[j * (n // k) + i]] = d.get(s[j * (n // k) + i], 0) + 1\n            d[s[(j + 1) * (n // k) - i - 1]] = d.get(s[(j + 1) * (n // k) - i - 1], 0) + 1\n        for i in d:\n            if m < d[i]:\n                m = d[i]\n        p = p - m\n    if n // k % 2 == 1:\n        (d, m) = (dict(), 0)\n        for j in range(k):\n            d[s[j * (n // k) + n // k // 2]] = d.get(s[j * (n // k) + n // k // 2], 0) + 1\n        for i in d:\n            if m < d[i]:\n                m = d[i]\n        p = p - m\n    print(p)", "from itertools import accumulate\nfrom bisect import bisect_left\nimport itertools\nstandard_input = '4\\n6 2\\nabaaba\\n6 3\\nabaaba\\n36 9\\nhippopotomonstrosesquippedaliophobia\\n21 7\\nwudixiaoxingxingheclp\\n'\nclrs = [2, 3, 5, 7, 11, 13, 17, 19, 29, 31, 37]\n\ndef solve():\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    fp = s[:n // 2 + n % 2]\n    sp = s[:n // 2 - 1:-1]\n    pp = []\n    for i in range(0, n, k):\n        pp.append(s[i:i + k])\n    ans = 0\n    for i in range(k // 2 + k % 2):\n        cnt = [0] * 26\n        for p in pp:\n            cnt[ord(p[i]) - ord('a')] += 1\n            if i < k // 2:\n                cnt[ord(p[-i - 1]) - ord('a')] += 1\n        ans += sum(cnt) - max(cnt)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    x = 0\n    for i in range(k // 2):\n        al = [0] * 26\n        for j in range(i, n, k):\n            al[ord(s[j]) - 97] += 1\n            al[ord(s[(j // k + 1) * k - j % k - 1]) - 97] += 1\n        x += sum(al) - max(al)\n    if k % 2:\n        al = [0] * 26\n        for j in range(k // 2, n, k):\n            al[ord(s[j]) - 97] += 1\n        x += sum(al) - max(al)\n    print(x)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    for i in range(0, k):\n        b = [0] * 26\n        for j in range(i, n, k):\n            b[ord(s[j]) - 97] += 1\n            b[ord(s[k - 1 - j]) - 97] += 1\n        a += sum(b) - max(b)\n    print(a // 2)", "def max_counter(a):\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    return max(d.values())\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    ans = 0\n    for i in range(k):\n        ans += len(s[i::k]) + len(s[n - i - 1::-k]) - max_counter(s[i::k] + s[n - i - 1::-k])\n    print(ans // 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(0, k):\n        alphaList = [0] * 26\n        for j in range(i, n, k):\n            alphaList[ord(s[j]) - 97] += 1\n            alphaList[ord(s[k - 1 - j]) - 97] += 1\n        ans += sum(alphaList) - max(alphaList)\n    print(ans // 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    count = 0\n    ls = []\n    i = 0\n    for j in range(n // k):\n        ls.append(s[i:i + k])\n        i += k\n    for i in range((k + 1) // 2):\n        dct = {}\n        mx = 1\n        res = ls[0][i]\n        for st in ls:\n            if st[i] not in dct:\n                dct[st[i]] = 1\n            else:\n                dct[st[i]] += 1\n                if dct[st[i]] > mx:\n                    mx = dct[st[i]]\n                    res = st[i]\n            if i != k - i - 1:\n                if st[k - i - 1] not in dct:\n                    dct[st[k - i - 1]] = 1\n                else:\n                    dct[st[k - i - 1]] += 1\n                    if dct[st[k - i - 1]] > mx:\n                        mx = dct[st[k - i - 1]]\n                        res = st[k - i - 1]\n        for key in dct.keys():\n            if key != res:\n                count += dct[key]\n    print(count)", "from collections import defaultdict\nimport math\nt = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    s = input()\n    out = 0\n    for i in range(0, math.ceil(k / 2.0)):\n        c = defaultdict(int)\n        for j in range(i, n, k):\n            c[s[j]] += 1\n        if j != n - 1 - i:\n            for j in range(n - 1 - i, 0, -k):\n                c[s[j]] += 1\n        out += sum(c.values()) - max(c.values())\n    print(out)", "def solve(n, k, word):\n    counters = [{} for _ in range((k + 1) // 2)]\n    for p in range(n):\n        i = p % k\n        if i > k - i - 1:\n            i = k - i - 1\n        counters[i][word[p]] = counters[i].get(word[p], 0) + 1\n    ans = n - sum((max(c.values()) for c in counters))\n    return ans\n\ndef test():\n    assert solve(6, 2, 'abaaba') == 2\n    assert solve(6, 3, 'abaaba') == 0\n    assert solve(36, 9, 'hippopotomonstrosesquippedaliophobia') == 23\n    assert solve(21, 7, 'wudixiaoxingxingheclp') == 16\ntest()\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    print(solve(n, k, s))", "def solve(n, k, word):\n    counters = [{} for _ in range((k + 1) // 2)]\n    for p in range(n):\n        i = p % k\n        if i > k - i - 1:\n            i = k - i - 1\n        counters[i][word[p]] = counters[i].get(word[p], 0) + 1\n    ans = n - sum((max(c.values()) for c in counters))\n    return ans\n\ndef test():\n    assert solve(6, 2, 'abaaba') == 2\n    assert solve(6, 3, 'abaaba') == 0\n    assert solve(36, 9, 'hippopotomonstrosesquippedaliophobia') == 23\n    assert solve(21, 7, 'wudixiaoxingxingheclp') == 16\ntest()\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    print(solve(n, k, s))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    for i in range(0, k):\n        b = [0] * 26\n        for j in range(i, n, k):\n            b[ord(s[j]) - 97] += 1\n            b[ord(s[k - 1 - j]) - 97] += 1\n        a += sum(b) - max(b)\n    print(a // 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    ans = 0\n    for i in range(k // 2):\n        freq = [0] * 26\n        for j in range(i, n, k):\n            freq[ord(s[j]) - ord('a')] += 1\n            freq[ord(s[j + k - 1 - i - i]) - ord('a')] += 1\n        ans += 2 * (n // k) - max(freq)\n    if k % 2 != 0:\n        freq = [0] * 26\n        for j in range(k // 2, n, k):\n            freq[ord(s[j]) - ord('a')] += 1\n        ans += n // k - max(freq)\n    print(ans)", "import sys\n\ndef run_case():\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = [[0] * 26 for j in range((k + 1) // 2)]\n    ch = list(map(lambda x: ord(x) - ord('a'), s))\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ch[i]] += 1\n    res = 0\n    for i in range(k // 2):\n        res += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        res += n // k - max(cnt[k // 2])\n    print(res)\nt = int(input())\nfor _ in range(t):\n    run_case()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [el for el in input()]\n    ans = 0\n    for i in range((k + 1) // 2):\n        start = i\n        end = k - i - 1\n        o = 0\n        seen = {}\n        ind = set()\n        while start < n:\n            if s[start] not in seen:\n                seen[s[start]] = 0\n            if start not in ind:\n                seen[s[start]] += 1\n                ind.add(start)\n            start += k\n        while end < n:\n            if s[end] not in seen:\n                seen[s[end]] = 0\n            if end not in ind:\n                seen[s[end]] += 1\n                ind.add(end)\n            end += k\n        m = max(seen.values())\n        ans += len(ind) - m\n    print(ans)", "T = int(input())\nwhile T > 0:\n    T -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    length = n / k\n    ans = 0\n    halfk = k // 2 if k % 2 == 0 else k // 2 + 1\n    for i in range(halfk):\n        d = {}\n        for ch in s[i::k]:\n            ch = ord(ch)\n            if ch in d:\n                d[ch] += 1\n            else:\n                d[ch] = 1\n        if i * 2 + 1 != k:\n            for ch in s[k - 1 - i::k]:\n                ch = ord(ch)\n                if ch in d:\n                    d[ch] += 1\n                else:\n                    d[ch] = 1\n        if i * 2 + 1 != k:\n            ans += max(d.values())\n        else:\n            ans += max(d.values())\n    print(n - ans)", "def slv(s, n, k):\n    ans = 0\n    for i in range((k + 1) // 2):\n        c = {}\n        sm = 0\n        for j in range(n // k):\n            a = s[j * k + i]\n            if a not in c:\n                c[a] = 0\n            c[a] += 1\n            sm += 1\n            if i != k - i - 1:\n                a = s[j * k + k - i - 1]\n                if a not in c:\n                    c[a] = 0\n                c[a] += 1\n                sm += 1\n        m = max([c[i] for i in c])\n        ans += sm - m\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(slv(s, n, k))", "import math\n\ndef solve(n: int, k: int, s: str) -> str:\n    mini_pal = ''\n    for i in range(math.ceil(k / 2)):\n        freq = {}\n        for j in range(i, n, k):\n            if s[j] in freq:\n                freq[s[j]] += 1\n            else:\n                freq[s[j]] = 1\n            m = j + k - 1 - 2 * i\n            if m < n:\n                if s[m] in freq:\n                    freq[s[m]] += 1\n                else:\n                    freq[s[m]] = 1\n        mini_pal += max(freq, key=lambda x: freq[x])\n    if k % 2:\n        mini_pal += mini_pal[:-1][::-1]\n    else:\n        mini_pal += mini_pal[::-1]\n    ans = 0\n    for i in range(n):\n        if s[i] != mini_pal[i % k]:\n            ans += 1\n    return ans\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(solve(n, k, s))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    c = input()\n    rat = a // b\n    cost = 0\n    for i in range(b):\n        f = []\n        g = []\n        for j in range(rat):\n            f.append(c[i + j * b])\n            f.append(c[a - 1 - i - j * b])\n        h = set(f)\n        for k in h:\n            g.append(f.count(k))\n        cost += len(f) - max(g)\n    print(cost // 2)", "from collections import defaultdict\n\ndef f(d):\n    mm = max(d.values())\n    ss = sum(d.values())\n    return ss - mm\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    r = 0\n    for i in range(k // 2):\n        d = defaultdict(int)\n        for m in range(n // k):\n            a = i + k * m\n            b = k - 1 - i + k * m\n            d[s[a]] += 1\n            d[s[b]] += 1\n        r += f(d)\n    if k % 2 == 1:\n        d = defaultdict(int)\n        for m in range(n // k):\n            c = k // 2 + k * m\n            d[s[c]] += 1\n        r += f(d)\n    print(r)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    for i in range(0, k):\n        b = [0] * 26\n        for j in range(i, n, k):\n            b[ord(s[j]) - 97] += 1\n            b[ord(s[k - 1 - j]) - 97] += 1\n        a += sum(b) - max(b)\n    print(a // 2)", "for _ in ' ' * int(input()):\n    (a, b) = map(int, input().split())\n    d = input()\n    f = 0\n    for i in range(b):\n        c = [0] * 26\n        for j in range(i, a, b):\n            c[ord(d[j]) - 97] += 1\n            c[ord(d[b - j - 1]) - 97] += 1\n        f += sum(c) - max(c)\n    print(f // 2)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for j in range(k):\n        d = {}\n        for l in range(j, n, k):\n            if s[l] in d:\n                d[s[l]] += 1\n            else:\n                d[s[l]] = 1\n        for l in range(k - j - 1, n, k):\n            if s[l] in d:\n                d[s[l]] += 1\n            else:\n                d[s[l]] = 1\n        ans += n // k * 2 - max(d.values())\n    print(ans // 2)", "x = int(input())\nabc = 'abcdefghijklmnopqrstuvwxyz'\ndic = {}\nfor i in abc:\n    dic[i] = 0\nfor i in range(x):\n    (temp1, temp2) = map(int, input().split())\n    temp3 = int(temp1 / temp2)\n    st = input()\n    ans = 0\n    for k in range(temp2 // 2):\n        y = dic.copy()\n        for j in range(temp3):\n            y[st[j * temp2 + k]] += 1\n            y[st[(j + 1) * temp2 - k - 1]] += 1\n        ans += 2 * temp3 - max(y.values())\n    if temp2 % 2 != 0:\n        y = dic.copy()\n        for j in range(temp3):\n            y[st[j * temp2 + temp2 // 2]] += 1\n        ans += temp3 - max(y.values())\n    print(ans)", "import math\nfrom decimal import *\nimport random\nmod = int(1000000000.0) + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    ans = 0\n    for i in range(k // 2):\n        mrk = {}\n        for j in range(0, n, k):\n            if s[j + i] not in mrk:\n                mrk[s[j + i]] = 0\n            if s[j + k - i - 1] not in mrk:\n                mrk[s[j + k - i - 1]] = 0\n            mrk[s[j + i]] += 1\n            mrk[s[j + k - i - 1]] += 1\n        ans += 2 * (n // k) - max(mrk.values())\n    if k % 2 == 1:\n        mrk = {}\n        for i in range(0, n, k):\n            if s[i + k // 2] not in mrk:\n                mrk[s[i + k // 2]] = 0\n            mrk[s[i + k // 2]] += 1\n        ans += n // k - max(mrk.values())\n    print(ans)", "def primeFacorize(x):\n    p = [7, 11, 13, 17, 19, 23, 29, 31, 37]\n    ans = []\n    t = 0\n    for i in p:\n        if x % i == 0:\n            t = i\n            break\n    return [t, x // t]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    h = 0\n    if k % 2 == 0:\n        h = k // 2 - 1\n    else:\n        h = k // 2\n    ans = 0\n    for i in range(h + 1):\n        D = {}\n        maxV = 0\n        for j in range(0, n, k):\n            if s[j + i] not in D:\n                D[s[j + i]] = 1\n            else:\n                D[s[j + i]] += 1\n            if D[s[j + i]] > maxV:\n                maxV = D[s[j + i]]\n            if j + i != j + k - 1 - i:\n                if s[j + k - 1 - i] not in D:\n                    D[s[j + k - 1 - i]] = 1\n                else:\n                    D[s[j + k - 1 - i]] += 1\n                if D[s[j + k - 1 - i]] > maxV:\n                    maxV = D[s[j + k - 1 - i]]\n        if i == h and k % 2 != 0:\n            ans += n // k - maxV\n        else:\n            ans += n // k * 2 - maxV\n    print(ans)", "I = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, k) = I()\n    s = input()\n    x = 0\n    for i in range(k // 2):\n        al = [0] * 26\n        for j in range(i, n, k):\n            al[ord(s[j]) - 97] += 1\n            al[ord(s[(j // k + 1) * k - j % k - 1]) - 97] += 1\n        x += sum(al) - max(al)\n    if k % 2:\n        al = [0] * 26\n        for j in range(k // 2, n, k):\n            al[ord(s[j]) - 97] += 1\n        x += sum(al) - max(al)\n    print(x)", "for h in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    matrix = [s[i:i + k] for i in range(0, n, k)]\n    ans = 0\n    if k % 2 == 1:\n        cnt = [0] * 26\n        for i in range(n // k):\n            cnt[ord(matrix[i][k // 2]) - 97] += 1\n        ans += n // k - max(cnt)\n    else:\n        for i in range(n // k):\n            matrix[i] = matrix[i][:k // 2] + '#' + matrix[i][k // 2:]\n        k += 1\n    for j in range(k // 2):\n        cnt = [0] * 26\n        for i in range(len(matrix)):\n            cnt[ord(matrix[i][j]) - 97] += 1\n            cnt[ord(matrix[i][k - j - 1]) - 97] += 1\n        ans += 2 * len(matrix) - max(cnt)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    for i in range(0, k):\n        b = [0] * 26\n        for j in range(i, n, k):\n            b[ord(s[j]) - 97] += 1\n            b[ord(s[k - 1 - j]) - 97] += 1\n        a += sum(b) - max(b)\n    print(a // 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    c = [{} for _ in range(k)]\n    for i in range(n):\n        x = i % k\n        y = k - 1 - x\n        x = min(x, y)\n        c[x][s[i]] = c[x].get(s[i], 0) + 1\n    for i in range(k):\n        if c[i]:\n            x = sum(c[i].values())\n            y = max(c[i].values())\n            ans += x - y\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    st = []\n    for i in range(n // k):\n        st.append(s[i * k:i * k + k])\n    for i in range(k // 2):\n        al = defaultdict(int)\n        for g in st:\n            al[g[i]] += 1\n            al[g[-1 - i]] += 1\n        ans += 2 * (n // k) - max(al.values())\n    if k % 2 == 1:\n        al = defaultdict(int)\n        for g in st:\n            al[g[k // 2]] += 1\n        ans += n // k - max(al.values())\n    print(ans)", "from collections import Counter\nR = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = R()\n    s = input()\n    cnt = 0\n    for i in range(k // 2):\n        cnt += 2 * n // k - max(Counter(s[i::k] + s[k - i - 1::k]).values())\n    if k & 1:\n        cnt += n // k - max(Counter(s[k // 2::k]).values())\n    print(cnt)", "def most_frequent(List):\n    dict = {}\n    (count, itm) = (0, '')\n    for item in reversed(List):\n        dict[item] = dict.get(item, 0) + 1\n        if dict[item] >= count:\n            (count, itm) = (dict[item], item)\n    return count\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    nos = n // k\n    if k % 2 != 0:\n        nolist = k // 2 + 1\n    else:\n        nolist = k // 2\n    ans = 0\n    for i in range(nolist):\n        a = []\n        for j in range(nos):\n            if k % 2 == 0:\n                a.append(s[j * k + i])\n                a.append(s[j * k + k - i - 1])\n            elif i == nolist - 1:\n                a.append(s[j * k + i])\n            else:\n                a.append(s[j * k + i])\n                a.append(s[j * k - i + k - 1])\n        sub = int(most_frequent(a))\n        ans += len(a) - sub\n    print(ans)", "from math import ceil, sqrt, log, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nfor _ in range(ii()):\n    (n, k) = mi()\n    s = si()\n    ans = 0\n    for i in range(ceil(k / 2)):\n        x = [0] * 26\n        for j in range(i, n, k):\n            x[ord(s[j]) - ord('a')] += 1\n        if i != k - i - 1:\n            for j in range(k - i - 1, n, k):\n                x[ord(s[j]) - ord('a')] += 1\n        s1 = sum(x)\n        n1 = max(x)\n        ans += s1 - n1\n    print(ans)", "from itertools import groupby\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    x = n // k\n    c = 0\n    if k % 2 != 0:\n        k2 = k // 2 + 1\n    else:\n        k2 = k // 2\n    for i in range(k2):\n        l = []\n        l1 = []\n        for j in range(0, x):\n            if i != k // 2:\n                y = j * k + i\n                y1 = j * k + k - i - 1\n                l.append(s[y])\n                l.append(s[y1])\n                l1.append(y)\n                l1.append(y1)\n            else:\n                y = j * k + i\n                l.append(s[y])\n                l1.append(y)\n        l.sort()\n        m = 0\n        for (key, group) in groupby(l):\n            k1 = len(list(group))\n            if k1 > m:\n                m = k1\n        c = c + len(l) - m\n    print(c)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    div = n // k\n    ans = 0\n    if k % 2 == 0:\n        a = k // 2\n    else:\n        a = k // 2 + 1\n    for i in range(a):\n        arr = [0] * 26\n        for j in range(div):\n            if i != k - 1 - i:\n                arr[ord(s[j * k + i]) - 97] += 1\n                arr[ord(s[j * k + k - i - 1]) - 97] += 1\n            else:\n                arr[ord(s[j * k + i]) - 97] += 1\n        ans += sum(arr) - max(arr)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k // 2 + (1 if k % 2 == 1 else 0)):\n        a = [s[j] for j in range(i, n, k)]\n        if not (k % 2 == 1 and i == k // 2):\n            a.extend((s[j] for j in range(k - i - 1, n, k)))\n        b = Counter(a)\n        m = 0\n        su = 0\n        for c in b.values():\n            m = max(m, c)\n            su += c\n        ans += su - m\n    print(ans)", "t = int(input())\nfor k in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    sum1 = 0\n    for i in range(k):\n        pos = [0] * 26\n        for j in range(i, n, k):\n            pos[ord(s[j]) - ord('a')] += 1\n            pos[ord(s[k - 1 - j]) - ord('a')] += 1\n        sum1 += sum(pos) - max(pos)\n    print(sum1 // 2)", "for _ in range(int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    s = input()\n    dicts = [{} for i in range((k - 1) // 2 + 1)]\n    for (num, mydict) in enumerate(dicts):\n        for i in range(num, len(s), k):\n            if s[i] not in mydict:\n                mydict[s[i]] = 0\n            mydict[s[i]] += 1\n        if num == len(dicts) - 1 and k % 2 == 1:\n            break\n        for i in range(k - num - 1, len(s), k):\n            if s[i] not in mydict:\n                mydict[s[i]] = 0\n            mydict[s[i]] += 1\n    ans = 0\n    for mydict in dicts:\n        values = list(mydict.values())\n        ans += sum(values) - max(values)\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    ans = [0] * n\n    x = n // k\n    count = 0\n    for i in range(k // 2):\n        arr = []\n        d = {}\n        d = defaultdict(lambda : 0, d)\n        for j in range(x):\n            d[s[i + j * k]] += 1\n            d[s[(j + 1) * k - 1 - i]] += 1\n        for i in d.keys():\n            arr.append(d[i])\n        arr = sorted(arr)\n        count += sum(arr) - arr[-1]\n    if k % 2 != 0:\n        arr = []\n        d = {}\n        d = defaultdict(lambda : 0, d)\n        for j in range(x):\n            d[s[k // 2 + j * k]] += 1\n        for i in d.keys():\n            arr.append(d[i])\n        arr = sorted(arr)\n        count += sum(arr) - arr[-1]\n    print(count)", "t = int(input())\nfor i in range(0, t, 1):\n    (n, k) = [int(x) for x in input().split(' ')]\n    s = input()\n    total = 0\n    for i in range(0, k // 2, 1):\n        count = [0] * 123\n        maxi = 0\n        for j in range(0, n, k):\n            s1 = j + i\n            s2 = j + (k - 1 - i)\n            count[ord(s[s1])] += 1\n            count[ord(s[s2])] += 1\n        maxi = max(count)\n        req = 2 * (n // k)\n        total = total + (req - maxi)\n    if k % 2 != 0:\n        count = [0] * 123\n        for i in range(k // 2, n, k):\n            count[ord(s[i])] += 1\n        maxi = max(count)\n        total = total + (n // k - maxi)\n    print(total)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = [[0 for i in range(26)] for j in range((k + 1) // 2)]\n    for i in range(n):\n        cnt[min(i % k, k - i % k - 1)][ord(s[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(k // 2):\n        ans += 2 * n // k - max(cnt[i])\n    if k % 2 == 1:\n        ans += n // k - max(cnt[k // 2])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    ans = 0\n    for i in range(k // 2):\n        cnt = [0 for i in range(26)]\n        l = k - i - 1\n        for j in range(i, len(s), k):\n            cnt[ord(s[j]) - ord('a')] += 1\n        for j in range(l, len(s), k):\n            cnt[ord(s[j]) - ord('a')] += 1\n        ans += sum(cnt) - max(cnt)\n    if k % 2 == 1:\n        i = k // 2\n        cnt = [0 for i in range(26)]\n        for j in range(i, len(s), k):\n            cnt[ord(s[j]) - ord('a')] += 1\n        ans += sum(cnt) - max(cnt)\n    print(ans)", "oa = ord('a')\nst = lambda x: ord(x) - oa\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(st, list(input())))\n    l = [s[i:i + k] for i in range(0, n, k)]\n    c = n // k\n    ans = n\n    for i in range(k // 2):\n        d = [0] * 30\n        for x in l:\n            d[x[i]] += 1\n            d[x[k - i - 1]] += 1\n        ans -= max(d)\n    if k % 2:\n        d = [0] * 30\n        for x in l:\n            d[x[k // 2]] += 1\n        ans -= max(d)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    for i in range(n // k):\n        a.append(s[k * i:k * (i + 1)])\n    ans = 0\n    for j in range(k // 2):\n        c = [0] * 26\n        for i in range(len(a)):\n            c[ord(a[i][j]) - ord('a')] += 1\n            c[ord(a[i][-j - 1]) - ord('a')] += 1\n        ans += len(a) * 2 - max(c)\n    if k % 2 == 1:\n        c = [0] * 26\n        for i in range(len(a)):\n            c[ord(a[i][k // 2]) - ord('a')] += 1\n        ans += len(a) - max(c)\n    print(ans)", "from collections import defaultdict\nfrom math import ceil\n\ndef solve(st, l, d):\n    arr = []\n    for i in range(0, l, d):\n        arr.append(st[i:i + d])\n    nd = ceil(d / 2)\n    ans = 0\n    for i in range(nd):\n        m = defaultdict(int)\n        for j in range(l // d):\n            m[arr[j][i]] += 1\n            if i != d - (i + 1):\n                m[arr[j][d - (i + 1)]] += 1\n        ans += sum(m.values()) - max(m.values())\n    print(ans)\nt = int(input())\nfor l in range(t):\n    (l, d) = map(int, input().split())\n    st = input()\n    solve(st, l, d)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = []\n    if k % 2 == 1:\n        ran = k // 2 + 1\n    else:\n        ran = k // 2\n    for i in range(ran):\n        temp = []\n        start = i\n        end = k - i - 1\n        for j in range(n // k):\n            if i != k // 2:\n                temp.append(s[start + (j - 1) * k])\n            temp.append(s[end + (j - 1) * k])\n        ans.append(temp)\n    res = 0\n    for i in range(len(ans)):\n        some = {}\n        for j in range(len(ans[i])):\n            if some.get(ans[i][j]) == None:\n                some[ans[i][j]] = 1\n            else:\n                some[ans[i][j]] += 1\n        res += len(ans[i]) - max(some.values())\n    print(res)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(v) for v in input().split()]\n    s = input()\n    c = n // k\n    res = 0\n    d = 0\n    while d < k // 2 + k % 2:\n        iota = []\n        for j in range(c):\n            if d != k - 1 - d:\n                iota.append(s[j * k + d])\n                iota.append(s[j * k + k - 1 - d])\n            else:\n                iota.append(s[j * k + d])\n        q = Counter(iota)\n        if iota:\n            res += len(iota) - max(list(q.values()))\n        d += 1\n    print(res)", "import math\nn = int(input())\nfor a in range(n):\n    nums = list(map(int, input().split()))\n    word = input()\n    n = nums[0]\n    k = nums[1]\n    changes = 0\n    for b in range(math.floor(k / 2 + 0.5)):\n        current = ''\n        for c in range(0, n, k):\n            if k % 2 == 1 and b == k // 2:\n                current += word[c + b]\n            else:\n                current += word[c + b] + word[c + k - 1 - b]\n        highest = 0\n        counted = set()\n        for c in current:\n            if c not in counted:\n                counted.add(c)\n                count = current.count(c)\n                if count > highest:\n                    highest = count\n        changes += len(current) - highest\n    print(changes)", "import collections\n\ndef solve(N, K, arr):\n    res = 0\n    for i in range(K // 2):\n        sm = 0\n        d = collections.Counter()\n        for j in range(N // K):\n            d[arr[j * K + i]] += 1\n            d[arr[j * K + K - i - 1]] += 1\n            sm += 2\n        res += sm - max(d.values())\n    if K % 2 == 1:\n        sm = 0\n        d = collections.Counter()\n        for j in range(N // K):\n            d[arr[j * K + (K - 1) // 2]] += 1\n            sm += 1\n        res += sm - max(d.values())\n    print(res)\nT = int(input())\nfor ti in range(1, T + 1):\n    (N, K) = map(int, input().split(' '))\n    arr = input()\n    solve(N, K, arr)", "import collections\n\ndef mostRepeatedLetter(st):\n    d = collections.defaultdict(int)\n    for c in st:\n        d[c] += 1\n    return d[sorted(d, key=d.get, reverse=True)[0]]\n\ndef run(n, k, string):\n    numChanges = 0\n    for u in range(int(k / 2)):\n        letters = ''\n        for j in range(int(n / k)):\n            curPalindrome = string[j * k:j * k + k]\n            letters = letters + curPalindrome[u]\n            letters = letters + curPalindrome[-(u + 1)]\n        numChanges += len(letters) - mostRepeatedLetter(letters)\n    if k % 2 == 1:\n        u = int(k / 2)\n        letters = ''\n        for j in range(int(n / k)):\n            curPalindrome = string[j * k:j * k + k]\n            letters = letters + curPalindrome[u]\n        numChanges += len(letters) - mostRepeatedLetter(letters)\n    print(numChanges)\ntimes = int(input())\nfor i in range(times):\n    (n, k) = map(int, input().split())\n    string = input()\n    run(n, k, string)"]