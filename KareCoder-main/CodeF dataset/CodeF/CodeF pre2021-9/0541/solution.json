["(n, m) = map(int, input().split())\nF = []\nf = 1\nres = 0\nfor i in range(1, n + 1):\n    f *= i\n    f %= m\n    F.append(f)\nfor i in range(n // 2):\n    res += F[i] * F[len(F) - i - 1] * (n + 1)\n    res %= m\nif n % 2 == 1:\n    res += F[n // 2] ** 2 * (n // 2 + 1)\n    res %= m\nprint(res)", "(N, M) = map(int, input().split())\nT = 0\nF = []\nf = 1\nfor k in range(1, N + 1):\n    f *= k\n    f %= M\n    F.append(f)\nfor i in range(N // 2):\n    T += F[i] * F[len(F) - i - 1] * (N + 1)\n    T %= M\nif N % 2 == 1:\n    T += F[N // 2 + N % 2 - 1] ** 2 * (N // 2 + N % 2)\n    T %= M\nprint(T)", "def main():\n    (n, mod) = map(int, input().split())\n    facts = [1]\n    for i in range(1, n + 1):\n        facts.append(facts[-1] * i % mod)\n    ans = 0\n    for i in range(n):\n        ans += facts[i + 1] * (n - i) * (facts[n - i] % mod)\n        ans %= mod\n    print(ans)\nmain()", "(n, m) = map(int, input().split())\nfact = [1]\nfor i in range(2, n + 1):\n    fact.append(fact[-1] * i % m)\nans = 0\nfor i in range(n - 1):\n    ans += fact[n - i - 1] * fact[i] * (i + 1)\nans += fact[n - 1] * n\nprint(ans % m)", "def get_happiness(n, m):\n    res = 0\n    factorials = [1] * (n + 1)\n    current_factorial = 1\n    for i in range(2, n + 1):\n        current_factorial *= i % m\n        current_factorial = current_factorial % m\n        factorials[i] = current_factorial\n    for i in range(1, n + 1):\n        term = factorials[i]\n        term *= factorials[n - i + 1]\n        term = term % m\n        term *= (n - i + 1) % m\n        term = term % m\n        res += term\n        res = res % m\n    return res\n\ndef solve():\n    (n, m) = [int(num) for num in input().split()]\n    print(get_happiness(n, m))\nsolve()", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "def main():\n    (n, m) = map(int, input().split())\n    fact = [0] * (n + 1)\n    fact[0] = 1\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % m\n    ans = 0\n    for i in range(n):\n        k = (n - i) * fact[i + 1]\n        k = k % m\n        k = k * fact[n - i] % m\n        ans = (ans + k) % m\n    print(ans)\n    return\nmain()", "(n, mo) = [int(s) for s in input().split()]\n\ndef facTable(n):\n    t = [None] * (n + 1)\n    t[0] = 1\n    for i in range(1, n + 1):\n        t[i] = t[i - 1] * i % mo\n    return t\nfac = facTable(n)\nremComb = fac[1:]\nans = 0\nfor l in range(1, n + 1):\n    ans += (n - l + 1) * fac[l] * remComb[n - l]\n    ans %= mo\nprint(ans)", "(n, m) = map(int, input().split())\ncount = 0\nfactorial = [1]\nfor i in range(n - 1):\n    factorial.append((i + 2) * factorial[i] % m)\nfor i in range(n):\n    x = i + 1\n    count += (n - i) * factorial[i] * factorial[n - i - 1]\nprint(count % m)", "(n, m) = map(int, input().split())\na = [1]\nfor q in range(2, n + 1):\n    a.append(a[-1] * q % m)\na.reverse()\nans = 0\nfor q in range(n):\n    ans += a[q] * a[n - q - 1] * (n - q) % m\nprint(ans % m)", "(n, m) = map(int, input().split())\na = [1] * (n + 1)\nfor _ in range(2, n + 1):\n    a[_] = _ * a[_ - 1] % m\nans = 0\nfor i in range(1, n + 1):\n    ans = (ans + a[i] * a[n - i + 1] * (n - i + 1)) % m\nprint(ans)", "(n, m) = map(int, input().split())\nfactorial = [1] * (n + 1)\nfor i in range(1, n + 1):\n    factorial[i] = factorial[i - 1] * i % m\nans = 0\nfor i in range(1, n + 1):\n    ans = (ans + i * factorial[i] * factorial[n - i + 1]) % m\nprint(ans)", "(n, m) = map(int, input().split())\nl = [1]\nfor i in range(1, n + 1):\n    l.append(l[-1] * i % m)\nans = 0\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * l[i] * l[n - i + 1] % m) % m\nprint(ans)", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "a = [1]\n(n, m) = map(int, input().split())\nfor i in range(1, n + 1):\n    a.append(a[-1] * i % m)\nans = 0\nfor i in range(1, n + 1):\n    p = a[i] * a[n - i + 1] * (n - i + 1)\n    ans += p\n    ans %= m\nprint(ans)", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "(n, m) = map(int, input().split())\nfc = [1]\nfor i in range(1, n + 1):\n    fc.append(fc[i - 1] * i % m)\ns = 0\ns = fc[n] * n\nfor d in range(1, n):\n    s += (n - d) * fc[d + 1] * fc[n - d] % m\ns = s % m\nprint(s)", "nm = [int(x) for x in input().split(' ')]\n(n, m) = (nm[0], nm[1])\nfact = [1]\nfor i in range(1, 250001):\n    fact.append(fact[i - 1] * i % m)\nanswer = 0\nfor i in range(n):\n    t = i + 1\n    subsum = (n - t + 1) * fact[t] * fact[n - t + 1] % m\n    answer += subsum\n    answer %= m\nprint(answer)", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "(n, m) = map(int, input().split())\nans = 0\nfact = [1 for i in range(250005)]\nfor i in range(1, 250004):\n    fact[i] = fact[i - 1] * i % m\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * (fact[i] * fact[n - i + 1])) % m\nprint(ans % m)", "(n, m) = map(int, input().split())\nans = 0\nfa = 1\nFa = []\nx = 1\nfor i in range(1, 1 + n):\n    x *= i\n    x %= m\n    Fa.append(x)\nfor i in range(1, 1 + n):\n    ans += (n - i + 1) * Fa[i - 1] * Fa[n - i]\n    ans %= m\nprint(ans)", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "a = []\n(n, m) = map(int, input().split())\nans = 0\ns = 1\nfor i in range(0, 250001):\n    if i > 0:\n        s = s * i % m\n    a.append(s)\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * a[n - i + 1] * a[i]) % m\nprint(ans % m)", "(n, m) = map(int, input().split())\nlst = [1]\nfor i in range(1, n + 1):\n    lst.append(lst[-1] * i % m)\nresult = 0\nfor i in range(1, n + 1):\n    result = (result + (n - i + 1) * lst[i] * lst[n - i + 1] % m) % m\nprint(result)", "(n, m) = map(int, input().split())\nfac = [0] * (n + 1)\nfac[0] = 1\nans = 0\nfor i in range(1, n + 1):\n    fac[i] = fac[i - 1] * i % m\nfor i in range(1, n + 1):\n    p = fac[i] * fac[n - i + 1] * (n - i + 1)\n    ans += p\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nfact = [1]\nfor el in range(1, n + 1):\n    fact.append(fact[-1] * el % m)\nans = 0\nfor el in range(1, n + 1):\n    t = fact[el]\n    p = fact[n - el + 1]\n    q = n - el + 1\n    ans = (ans + t * p % m * q % m) % m\nprint(ans)", "(n, m) = map(int, input().split())\nfacts = list()\nfact = 1\nfor i in range(1, n + 1):\n    fact *= i\n    fact %= m\n    facts.append(fact)\nans = 0\nfor i in range(1, n + 1):\n    ans += facts[i - 1] * facts[n - i] * (n - i + 1)\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nfactors = [1]\nfor i in range(n):\n    factors.append(factors[-1] * (i + 1) % m)\nans = 0\nfor i in range(n):\n    ans += factors[i + 1] * factors[n - i] * (n - i) % m\n    ans %= m\nprint(ans % m)", "(n, m) = list(map(int, input().split(' ')))\nans = 0\nd = [1] * (n + 1)\nfor i in range(1, n + 1):\n    d[i] = d[i - 1] * i % m\nfor i in range(1, n + 1):\n    ans = (ans + (n - i + 1) * d[n - i + 1] % m * d[i]) % m\nprint(ans)", "(n, m) = map(int, input().split())\nfac = [1]\nfor i in range(1, n + 1):\n    fac.append(fac[-1] * i % m)\nans = 0\nfor i in range(1, n + 1):\n    ans += (n - i + 1) * fac[i] * fac[n - i + 1] % m\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nl = [0] * (n + 1)\nc = 1\nfor i in range(1, n + 1):\n    l[i] = i * c % m\n    c = l[i]\nans = 0\nfor i in range(n):\n    ans += (n - i) % m * (l[n - i] % m) * (l[i + 1] % m) % m\nprint(ans % m)", "a = []\na.append(1)\na.append(1)\n(n, m) = map(int, input().split())\nfor i in range(2, 250001):\n    a.append(a[i - 1] * i % m)\nans = 0\nfor i in range(1, n + 1):\n    ans += (n - i + 1) * a[i] * a[n - i + 1]\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nl = [0] * (n + 1)\nc = 1\nfor i in range(1, n + 1):\n    l[i] = i * c % m\n    c = l[i]\nans = 0\nfor i in range(n):\n    ans += (n - i) % m * (l[n - i] % m) * (l[i + 1] % m) % m\nprint(ans % m)", "(m, n) = map(int, input().split())\nfact = [0] * (m + 1)\nfact[0] = 1\nfor i in range(1, m + 1):\n    fact[i] = fact[i - 1] * i % n\nans = 0\nfor i in range(1, m + 1):\n    ans += (m - i + 1) * (fact[i] * fact[m - i + 1] % n)\n    ans %= n\nprint(ans)", "(n, m) = map(int, input().split())\nfac = [1]\nfor i in range(1, n + 1):\n    fac += [i * fac[-1] % m]\nans = (n + 1) * fac[n] % m\nfor i in range(1, n - 1):\n    ans = (ans + (n - i) * (n - i) * fac[i + 1] * fac[n - i - 1]) % m\nprint(ans if n > 1 else 1 % m)", "(n, m) = map(int, input().split())\nf = [1]\nfor n in range(1, n + 1):\n    f.append(f[-1] * n % m)\nans = 0\nfor l in range(1, n + 1):\n    ans += f[n - l + 1] * f[l] * (n - l + 1) % m\n    ans %= m\nprint(ans)", "(n, m) = [int(i) for i in input().split()]\narr = [0] * (n + 1)\narr[0] = 1\nfor i in range(1, n + 1):\n    arr[i] = arr[i - 1] * i % m\ntotal = 0\nfor i in range(0, n):\n    total += arr[i + 1] * (n - i) * arr[n - i] % m\n    total %= m\nprint(total)", "(n, m) = list(map(int, input().split()))\ndp = [0 for i in range(n + 1)]\ndp[0] = 1\nfor i in range(1, n + 1):\n    dp[i] = i * dp[i - 1] % m\nans = 0\nfor i in range(n, 0, -1):\n    val = i * dp[i] * dp[n - i + 1] % m\n    ans += val\n    ans = ans % m\nprint(ans)", "(n, m) = map(int, input().split())\na = [1] * (n + 1)\nfor _ in range(2, n + 1):\n    a[_] = _ * a[_ - 1] % m\nans = 0\nfor i in range(1, n + 1):\n    ans = (ans + a[i] * a[n - i + 1] % m * (n - i + 1) % m) % m\nprint(ans)", "(n, mod) = input().split()\n(n, mod) = (int(n), int(mod))\nans = 0\nfact = [1 for i in range(n + 2)]\nfor i in range(1, n + 1):\n    fact[i] = i * fact[i - 1] % mod\nfor i in range(1, n + 1):\n    cnt = n - i + 1\n    ans = (ans + fact[i] * fact[n - i] * cnt * cnt) % mod\nprint(ans)", "(n, m) = map(int, input().split())\nans = 0\nf = [1]\nfor i in range(1, n + 2):\n    f += (f[-1] * i % m,)\nfor l in range(1, n + 1):\n    ans += (f[n - l + 2] - f[n - l + 1]) * f[l] % m\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nd = [1] * (n + 1)\np = 1\nfor i in range(1, n + 1):\n    d[i] = p\n    p = p * (i + 1) % m\nan = 0\nfor i in range(n):\n    an = (an + (n - i) * (n - i) * d[n - i - 1] * d[i + 1]) % m\nprint(an)", "(n, m) = map(int, input().split())\narr = [1 for i in range(n)]\nfor i in range(n - 1):\n    arr[i + 1] = arr[i] * (i + 2) % m\nans = 0\nfor i in range(n):\n    ans += (n - i) * arr[n - i - 1] * arr[i] % m\n    ans %= m\nprint(ans)", "(n, m) = map(int, input().split())\nf = [1] * (n + 1)\nfor i in range(1, n + 1):\n    f[i] = f[i - 1] * i % m\nans = 0\nfor k in range(1, n + 1):\n    ans = (ans + (n - k + 1) * f[k] * (n - k + 1) * f[n - k]) % m\nprint(ans)", "def R():\n    return map(int, input().split())\n\ndef I():\n    return int(input())\n\ndef S():\n    return str(input())\nfrom collections import Counter\nimport math\nimport sys\nf = open('test.txt', 'w')\n(n, m) = R()\nfact = [1] * (n + 1)\nfor i in range(1, n + 1):\n    fact[i] = fact[i - 1] * i\n    fact[i] %= m\nsum = 0\nfor i in range(1, n + 1):\n    sum = (sum + fact[n - i + 1] * fact[i] * (n - i + 1)) % m\nprint(sum % m)", "from fractions import gcd\nfrom heapq import *\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nimport itertools\nimport fractions\nMOD = 10 ** 9 + 7\n\ndef modpow(a, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = res * a % mod\n        a = a * a % mod\n        n >>= 1\n    return res\n\ndef modinv(a, mod):\n    return modpow(a, mod - 2, mod)\n\ndef cnk(a, b):\n    MOD = 10 ** 9 + 7\n    ret = 1\n    for i in range(b):\n        ret *= a - i\n        ret %= MOD\n        ret = ret * modinv(i + 1, MOD) % MOD\n    return ret\n\ndef main():\n    (n, m) = map(int, input().split())\n    f = [0] * (n + 10)\n    f[0] = 1\n    for i in range(1, n + 8):\n        f[i] = f[i - 1] * i % m\n    ans = 0\n    for i in range(1, n + 1):\n        ans += f[i] * f[n - i] % m * (n - i + 1) % m * (n - i + 1) % m\n        ans %= m\n    print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\n\ndef fact(n, m):\n    if n >= m:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % m\n    return result\n(n, m) = [int(x) for x in input().split()]\ntotal = 0\nfacts = list()\nfacts = [1]\nfor i in range(n):\n    facts.append(facts[-1] % m * ((i + 1) % m) % m)\nfor i in range(n):\n    total = (total % m + (n - i) % m * (facts[i + 1] % m) * (facts[n - i] % m) % m) % m\nprint(total)", "(n, m) = map(int, input().split())\narr = [0 for _ in range(n + 2)]\narr[0] = 1\nfor i in range(1, n + 2):\n    arr[i] = arr[i - 1] * i\n    arr[i] %= m\nans = 0\nfor d in range(1, n + 1):\n    ans += (n - d + 1) * arr[d] * arr[n - d] * (n - d + 1)\n    ans %= m\nprint(ans)", "(n, m) = list(map(int, input().split()))\nfact = [1]\ns = 0\nfor i in range(1, n + 1):\n    fact.append(fact[i - 1] * i % m)\nfor i in range(1, 1 + n):\n    s = (s + (n - i + 1) ** 2 * fact[n - i] * fact[i]) % m\nprint(s)", "(n, m) = map(int, input().split())\narr = [1]\nfor i in range(1, n + 1):\n    arr.append(i * arr[-1] % m)\nans = 0\nfor i in range(n, 1, -1):\n    ans += arr[i] * arr[n - i] % m * (n + 1 - i) ** 2 % m\nans += n * arr[n] % m\nans %= m\nprint(ans)", "nn = [int(x) for x in input().split(' ')]\n(n, m) = (nn[0], nn[1])\nfact = [1]\nfor i in range(1, 250007):\n    fact.append(fact[i - 1] * i % m)\ntot = 0\nfor i in range(n):\n    ans = 1\n    t = i + 1\n    ans *= n - t + 1\n    ans %= m\n    ans *= fact[t]\n    ans %= m\n    ans *= fact[n - t + 1]\n    ans %= m\n    tot += ans\n    tot %= m\nprint(tot)", "(num, mod) = map(int, input().split())\nfact = [0] * (num + 2)\nfact[0] = 1\nfor i in range(1, num + 1):\n    fact[i] = fact[i - 1] * i\n    fact[i] %= mod\nans = 1\nfor i in range(num):\n    ans += (num - i) * fact[num - i] % mod * fact[i + 1] % mod\n    ans %= mod\nprint(ans - 1)", "(n, m) = map(int, input().split())\nf = [1]\nfor i in range(1, n + 1):\n    f.append(f[-1] * i % m)\ns = 0\nfor x in range(1, n + 1):\n    s += f[x] * f[n - x] % m * ((n - x + 1) ** 2 % m) % m\n    s %= m\nprint(s)", "(n, mod) = map(int, input().strip().split(' '))\nfactorials = [0 for i in range(250005)]\n(factorials[0], factorials[1]) = (1, 1)\nfor i in range(2, 250004):\n    factorials[i] = i * factorials[i - 1] % mod\nans = 0\nfor k in range(1, n + 1):\n    ans = (ans % mod + (n - k + 1) % mod * ((n - k + 1) % mod) * (factorials[k] % mod) * (factorials[n - k] % mod) % mod) % mod\nprint(ans)", "fuck = [int(1)]\n(n, m) = map(int, input().split())\nfor i in range(1, n + 1):\n    now = fuck[i - 1] * i\n    fuck.append((now + m) % m)\nans = 0\nfor i in range(n):\n    l = 1\n    r = l + i\n    x = i + 1\n    now = max(n - r + 1, l) * max(n - r + 1, l) * fuck[n - x] * fuck[x]\n    now = (now + m) % m\n    ans = (ans + now + m) % m\nprint(ans)"]