["from sys import stdin, stdout\nget_string = lambda : stdin.readline().strip(' ')\nget_intmap = lambda : map(int, get_string().split(' '))\n\ndef testcase():\n    n = n1 = int(input())\n    prime_factors = []\n    for i in range(2, int(n ** 0.5) + 4):\n        (q, r) = divmod(n1, i)\n        if r == 0:\n            prime_factors.append(i)\n            while r == 0:\n                n1 = q\n                (q, r) = divmod(n1, i)\n    if n1 > 1:\n        prime_factors.append(n1)\n    (coprimes, prod) = ([], 1)\n    for i in range(1, n):\n        ok = True\n        for prime in prime_factors:\n            ok = i % prime\n            if prime > i or not ok:\n                break\n        if ok:\n            coprimes.append(i)\n            prod = prod * i % n\n    if prod != 1:\n        coprimes.remove(prod)\n    print(len(coprimes))\n    print(' '.join([str(i) for i in coprimes]))\ntestcase()\nquit()\nfor t in range(int(input())):\n    testcase()", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef rec(i, n, z):\n    if z == 0:\n        return None\n    if i == n:\n        if z == 1:\n            return []\n        return None\n    a1 = rec(i + 1, n, z * i % n)\n    if a1 is not None:\n        a1.append(i)\n    a2 = rec(i + 1, n, z)\n    if a2 is not None and (a1 is None or len(a1) < len(a2)):\n        a1 = a2\n    return a1\n\ndef simple(n):\n    return rec(1, n, 1)[::-1]\n\ndef smart(n):\n    z = []\n    m = 1\n    for i in range(1, n):\n        if gcd(i, n) == 1:\n            z.append(i)\n            m = m * i % n\n    if m == 1:\n        return z\n    z.pop(z.index(m))\n    return z\n\ndef solve():\n    n = int(input())\n    a = smart(n)\n    print(len(a))\n    print(' '.join(map(str, a)))\nsolve()", "import math\n\ndef main():\n    n = int(input())\n    S = [a for a in range(1, n) if math.gcd(a, n) == 1]\n    prod = 1\n    for a in S:\n        prod = prod * a % n\n    if prod != 1:\n        S.pop()\n    print(len(S))\n    print(' '.join((str(a) for a in S)))\nmain()", "import math\nn = int(input())\nprod = 1\nl = [1]\nfor k in range(2, n - 1):\n    if math.gcd(n, k) == 1:\n        prod = prod * k % n\n        l.append(k)\nif prod != 1:\n    l.append(n - 1)\nprint(len(l))\nprint(' '.join(map(str, l)))", "from math import gcd\nn = [int(i) for i in input().split()][0]\nmods = [0] * n\nres = []\nprod = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        res += [str(i)]\n        prod *= i\n        prod %= n\nif prod != 1:\n    res = res[:-1]\nprint(len(res))\nprint(' '.join(res))", "def f(n):\n    l = []\n    i = 2\n    while i <= n ** 0.5:\n        if n % i != 0:\n            i += 1\n        else:\n            l.append(i)\n            n //= i\n    if n != 1:\n        l.append(n)\n    if len(l) == 1:\n        x = 2\n    elif l == [2, 2]:\n        x = 2\n    elif len(l) == 2:\n        if l[0] == 2:\n            x = 2\n        elif l[0] == l[1]:\n            x = 2\n        else:\n            x = 4\n    elif l[2] == 2:\n        x = 4\n    elif l[0] == l[-1]:\n        x = 2\n    elif l[0] == 2 and l[1] == l[-1]:\n        x = 2\n    else:\n        x = 4\n    return [x, l]\nn = int(input())\nl = []\nm = f(n)\nx = set(m[1])\nfor i in range(1, n):\n    y = 0\n    for j in x:\n        if i % j == 0:\n            y = 1\n    if y == 0:\n        l.append(i)\na = ''\nif n == 2:\n    print(1)\n    print(1)\nelif m[0] == 2:\n    for i in l[:-1]:\n        a += str(i) + ' '\n    print(len(l) - 1)\n    print(a[:-1])\nelse:\n    for i in l:\n        a += str(i) + ' '\n    print(len(l))\n    print(a[:-1])", "import time\nfrom math import gcd\n\ndef multiply_manual(n, iterable):\n    prod = 1\n    for x in iterable:\n        prod *= x\n        prod %= n\n    return prod\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\nn = int(input())\nresult = []\nfor i in range(1, n):\n    if is_coprime(i, n):\n        result.append(i)\nprod = multiply_manual(n, result)\nif prod != 1:\n    result.remove(prod)\n    result = [x for x in result if x != prod]\nprint(len(result))\nprint(' '.join(map(str, result)))", "import math\nn = int(input())\nprod = 1\nans = []\nfor num in range(1, n + 1):\n    if math.gcd(num, n) == 1:\n        prod = prod * num % n\n        ans.append(num)\nif prod != 1:\n    ans.remove(prod)\nans = list(map(str, ans))\nprint(len(ans))\nprint(' '.join(ans))", "import math\nn = int(input())\nans = []\nprod = 1\ncount = 0\nfor i in range(1, n - 1):\n    if math.gcd(n, i) == 1:\n        ans.append(str(i))\n        prod = prod * i % n\n        count += 1\nif n == 2:\n    print(1)\n    print(1)\nelif prod % n == 1:\n    print(count)\n    print(' '.join(ans))\nelse:\n    print(count + 1)\n    print(' '.join(ans), n - 1)", "from math import gcd\n\ndef coprime(a, b):\n    return gcd(a, b) == 1\nN = int(input())\nans = [1]\ncount = 1\nmod = 1\nfor x in range(2, N):\n    if coprime(x, N):\n        ans += (x,)\n        count += 1\n        mod = mod * x % N\nif mod != 1:\n    del ans[-1]\n    count -= 1\nprint(count)\nprint(' '.join(map(str, ans)))", "import math\nn = int(input())\ntmp = []\nproduct = 1\ntool = 0\nfor i in range(n):\n    if math.gcd(i, n) == 1:\n        product *= i\n        product = product % n\n        tool += 1\n        tmp.append(str(i))\nif product == 1:\n    print(tool)\n    print(' '.join(tmp))\nelse:\n    tmp.pop(tmp.index(str(product)))\n    print(tool - 1)\n    print(' '.join(tmp))", "import math\nn = int(input())\nans = 1\nanswer = [1]\ni = 2\nprod = 1\nwhile i < n:\n    if math.gcd(n, i) == 1:\n        answer.append(i)\n        ans += 1\n        prod *= i\n        prod %= n\n    i += 1\nif prod != 1:\n    del answer[-1]\n    ans -= 1\nprint(ans)\nprint(' '.join(map(str, answer)))", "import heapq\nimport sys\nfrom collections import *\nfrom heapq import *\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline()\nn = int(input())\npr = 1\nmaxx = -1\ncnt = 0\ns = ''\nans = ''\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        pr = pr * i % n\n        cnt += 1\n        ans += str(i) + ' '\n    if pr == 1:\n        maxx = max(maxx, cnt)\n        s += ans\n        ans = ''\nprint(maxx)\nprint(s)", "def get_mod(n, r):\n    c = 1\n    for e in r:\n        c = c * e % n\n    return c\n\ndef solve(n):\n\n    def factorize(n):\n        v = []\n        p = 2\n        while n > 1:\n            if n % p == 0:\n                v.append(p)\n                while n % p == 0:\n                    n //= p\n            p += 1\n        return v\n    v = set(range(1, n))\n    factors = factorize(n)\n    for i in range(2, n):\n        if any((i % x == 0 for x in factors)):\n            v.discard(i)\n    r = sorted(v)\n    while True:\n        m = get_mod(n, r)\n        if m == 1:\n            break\n        r.remove(m)\n    return r\nn = int(input())\nr = solve(n)\nprint(len(r))\nprint(' '.join((str(x) for x in r)))", "def prod(arr):\n    p = 1\n    for i in arr:\n        p = p * i % n\n    return p\nn = int(input())\nlst = [0] * n\nfor i in range(2, n // 2 + 1):\n    if not n % i:\n        j = i\n        while j < n:\n            lst[j] = 1\n            j += i\narr = [i for i in range(1, n) if lst[i] == 0]\nx = prod(arr)\nif x != 1:\n    arr.pop()\nprint(len(arr))\nprint(*arr)", "import math\nt = int(input())\np = []\nm = 1\nfor i in range(1, t):\n    if math.gcd(i, t) == 1:\n        p.append(i)\n        m = m * i % t\nif m != 1:\n    p.remove(p[len(p) - 1])\nprint(len(p))\nprint(' '.join((str(x) for x in p)))", "from math import gcd\nn = int(input())\nunits = [x for x in range(1, n) if gcd(n, x) == 1]\nprod = 1\nfor x in units:\n    prod = x * prod % n\nif prod != 1:\n    units.remove(prod)\nprint(len(units))\nprint(*units)", "from math import gcd\n\ndef solve(n):\n    li = [1]\n    And = 1\n    for i in range(2, n):\n        if gcd(i, n) == 1:\n            li.append(i)\n            And = And * i % n\n    if And != 1:\n        li.pop()\n    print(len(li))\n    print(*li)\nn = int(input())\nsolve(n)", "from math import gcd\nn = int(input())\npr = 1\nans = []\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        ans.append(i)\n        pr = pr * i % n\nif pr == 1:\n    print(len(ans))\n    print(*ans)\nelse:\n    del ans[ans.index(pr)]\n    print(len(ans))\n    print(*ans)", "from math import gcd\nn = int(input())\na = [x for x in range(1, n) if gcd(n, x) == 1]\nb = [x * x % n for x in a]\nsq = b.count(1)\nif sq == 2:\n    a.remove(n - 1)\nprint(len(a))\nprint(*a)", "from math import gcd\nn = int(input())\nl = []\nval = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        l.append(i)\n        val = val * i\n        val = val % n\nif val == 1:\n    print(len(l))\n    print(*l)\nelse:\n    l.pop()\n    print(len(l))\n    print(*l)", "import math\nn = int(input())\nans = []\nx = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        ans.append(i)\n        x = x * i % n\nif x != 1:\n    ans.remove(x)\nprint(len(ans))\nprint(*ans)", "from math import gcd\nN = int(input())\nANS = []\nX = 1\nfor i in range(1, N):\n    if gcd(N, i) == 1:\n        ANS.append(i)\n        X = X * i % N\nif X != 1:\n    del ANS[ANS.index(X)]\nprint(len(ANS))\nprint(*ANS)", "from math import gcd\nN = int(input())\nANS = []\nX = 1\nfor i in range(1, N):\n    if gcd(N, i) == 1:\n        ANS.append(i)\n        X = X * i % N\nif X != 1:\n    del ANS[ANS.index(X)]\nprint(len(ANS))\nprint(*ANS)", "from math import gcd\nn = int(input())\nans = []\ncal = 1\nfor i in range(1, n - 1):\n    if gcd(i, n) == 1:\n        ans.append(i)\n        cal = cal * i % n\ncal = cal * (n - 1) % n\nif cal == 1:\n    ans.append(n - 1)\nprint(len(ans))\nprint(*ans)", "import sys, math\nfrom math import gcd\nfrom operator import xor\nmd = 1000000007\nn = int(input())\nd = []\np = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        d.append(i)\n        p = p * i % n\nif p != 1:\n    d.pop()\nprint(len(d))\nprint(*d)", "from math import gcd\nn = int(input())\nlst = []\nproduct = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        lst.append(i)\n        product = product * i % n\nif product % n != 1:\n    lst.pop()\nprint(len(lst))\nprint(*lst)", "from math import gcd\nn = int(input())\np = 1\nb = []\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        b.append(i)\n        p = p * i % n\nif p != 1:\n    b.remove(p)\nprint(len(b))\nprint(*b)", "from math import gcd\nn = int(input())\nans = []\nprod = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        ans.append(i)\n        prod = prod * i % n\nif prod % n != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "from math import gcd, prod\nn = int(input())\ncomprime_n = [i for i in range(1, n) if gcd(i, n) == 1]\nmod = 1\nfor cp in comprime_n:\n    mod = mod * cp % n\nif mod % n != 1:\n    comprime_n.pop()\nprint(len(comprime_n))\nprint(*comprime_n)", "import math\n\ndef isprime(n):\n    if n < 2:\n        return False\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef get_answer(n):\n    total = 0\n    modsum = 1\n    b = []\n    for v in range(1, n):\n        if math.gcd(v, n) == 1:\n            total += 1\n            modsum = modsum * v % n\n            b.append(v)\n    if modsum == 1:\n        print(total)\n        print(*b)\n    else:\n        print(total - 1)\n        print(*b[:-1])\nn = int(input())\nget_answer(n)", "from math import gcd\nrr = lambda : input().strip()\n\ndef solve(n):\n    present = [0] * n\n    prod = 1\n    for i in range(1, n):\n        if gcd(i, n) == 1:\n            present[i] = 1\n            prod = prod * i % n\n    if prod != 1:\n        present[prod] = 0\n    return present\nn = int(rr())\nans = solve(n)\nprint(ans.count(1))\nfor i in range(n):\n    if ans[i]:\n        print(i, end=' ')", "import math\n\ndef mod1p():\n    n = int(input())\n    ans = dict()\n    p = 1\n    for i in range(1, n):\n        if math.gcd(i, n) == 1:\n            ans[i] = True\n            p = p * i % n\n    if p == 1:\n        print(len(ans))\n        print(*ans.keys())\n    else:\n        ans.pop(p)\n        print(len(ans))\n        print(*ans.keys())\nmod1p()", "from math import gcd\nn = int(input())\nans = []\nt = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        ans.append(i)\n        t = t * i % n\nif t != 1:\n    ans.remove(t)\nprint(len(ans))\nprint(*ans)", "import math\n\ndef solve():\n    n = int(input())\n    res = []\n    prod = 1\n    for i in range(1, n):\n        if math.gcd(i, n) == 1:\n            res.append(i)\n            prod *= i\n            prod = prod % n\n    if prod == 1:\n        print(len(res))\n        print(*res)\n    else:\n        res.remove(res[-1])\n        print(len(res))\n        print(*res)\nt = 1\nwhile t > 0:\n    t -= 1\n    solve()", "from math import gcd\nn = int(input())\n(a, b) = ([], 1)\nfor i in range(1, n - 1):\n    if gcd(n, i) == 1:\n        a.append(i)\n        b = b * i % n\nif b == n - 1:\n    a.append(n - 1)\nprint(len(a))\nprint(*a)", "from math import gcd\nn = int(input())\n(a, b) = ([], 1)\nfor i in range(1, n - 1):\n    if gcd(n, i) == 1:\n        a.append(i)\n        b = b * i % n\nif b == n - 1:\n    a.append(n - 1)\nprint(len(a))\nprint(*a)", "import math\n\ndef question3():\n    N = int(input())\n    ans = [1]\n    pro = 1\n    for i in range(2, N):\n        if math.gcd(N, i) == 1:\n            ans.append(i)\n            pro = pro * i % N\n    if pro > 1:\n        ans.pop()\n    if len(ans) == 0:\n        return (1, [1])\n    return (len(ans), ans)\nremained_test_cases = 1\nwhile remained_test_cases > 0:\n    (len1, ans) = question3()\n    print(len1)\n    print(*ans)\n    remained_test_cases -= 1", "import sys, math\nfrom math import gcd\nfrom operator import xor\nmd = 1000000007\nn = int(input())\nd = []\np = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        d.append(i)\n        p = p * i % n\nif p % n != 1:\n    d.pop()\nprint(len(d))\nprint(*d)", "import sys, math\nfrom math import gcd\nfrom operator import xor\nmd = 1000000007\np = 1\nd = []\nn = int(input())\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        d.append(i)\n        p = p * i % n\nif p % n != 1:\n    d.pop()\nprint(len(d))\nprint(*d)", "import sys, math\nfrom math import gcd\nfrom operator import xor\nmd = 1000000007\np = 1\nd = []\nn = int(input())\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        d.append(i)\n        p = p * i % n\nif p % n != 1:\n    d.pop()\nprint(len(d))\nprint(*d)", "from math import gcd\nn = int(input())\nans = []\nprod = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        ans.append(i)\n        prod = prod * i % n\nif prod % n != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "from math import gcd\nN = int(input())\nDta = []\nfor i in range(1, N):\n    if gcd(i, N) == 1:\n        Dta.append(i)\nProd = 1\nfor x in Dta:\n    Prod = Prod * x % N\nif Prod != 1:\n    Dta.remove(Prod)\nprint(len(Dta))\nprint(*Dta)", "from math import gcd\nn = int(input())\nans = []\nprod = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        prod = prod * i % n\n        ans.append(i)\nif prod != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "import math\nimport sys\n\ndef inp():\n    return sys.stdin.readline().strip()\nn = int(inp())\nans = []\nproduct = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        ans.append(i)\n        product = product * i % n\nif product != 1:\n    ans = ans[0:len(ans) - 1]\nprint(len(ans))\nprint(*ans)", "from math import gcd\nn = int(input())\narr = []\np = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        arr.append(i)\n        p *= i\n        p %= n\nif p != 1:\n    arr.remove(p)\nprint(len(arr))\nfor i in arr:\n    print(str(i), end=' ')", "import math\nn = int(input())\nans = []\nacc = 1\nfor i in range(1, n):\n    if math.gcd(n, i) != 1:\n        continue\n    ans.append(i)\n    acc = acc * i % n\nif acc != 1:\n    ans = [x for x in ans if x != acc]\nprint(len(ans))\nprint(*ans)", "from math import gcd\nn = int(input())\na = [x for x in range(1, n) if gcd(x, n) == 1]\nb = [x * x % n for x in a]\nsquares = b.count(1)\nif squares == 2:\n    a.remove(n - 1)\nprint(len(a))\nprint(*a)", "import math\nfrom sys import stdin, stdout\ninput = stdin.readline\nlis = []\nn = int(input())\nprod = 1\nfor i in range(1, n - 1):\n    if math.gcd(n, i) == 1:\n        prod = prod * i % n\n        lis.append(i)\nif prod * (n - 1) % n == 1 and math.gcd(n, n - 1) == 1:\n    lis.append(n - 1)\nprint(len(lis))\nprint(*lis)", "import math\n\ndef main():\n    N = int(input())\n    ans = []\n    for i in range(1, N):\n        if math.gcd(i, N) == 1:\n            ans.append(i)\n    mod = 1\n    for i in ans:\n        mod *= i\n        mod %= N\n    if mod != 1:\n        ans.remove(mod)\n    print(len(ans))\n    print(*ans)\nmain()", "import math\nn = int(input())\na = []\nb = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        a.append(i)\nfor i in range(len(a)):\n    b = b * a[i] % n\nif b != 1:\n    a.remove(b)\nprint(len(a))\nprint(*a)", "import math\nn = int(input())\na = []\nb = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        a.append(i)\nfor i in range(len(a)):\n    b = b * a[i] % n\nif b != 1:\n    a.remove(b)\nprint(len(a))\nprint(*a)", "from math import gcd\nn = int(input())\nres = [1]\nt = 1\nfor i in range(2, n):\n    if gcd(i, n) == 1:\n        res.append(i)\n        if i * i % n == 1:\n            t = t * i % n\nif t != 1:\n    res.remove(t)\nprint(len(res))\nprint(*res, sep=' ')", "from math import gcd\nn = int(input())\nans = 1\nl = [1]\nfor i in range(2, n):\n    if gcd(n, i) == 1:\n        l.append(i)\n        ans = ans * i % n\nif ans == 1:\n    print(len(l))\n    print(*l)\nelse:\n    print(len(l) - 1)\n    print(*l[:-1])", "from math import gcd\na = []\nb = 1\nn = int(input())\nfor i in range(n):\n    if gcd(i, n) == 1:\n        a.append(i)\n        b = b * i % n\nfor i in range(len(a) - 1, -1, -1):\n    if b % n != 1:\n        b //= a[i]\n        a.pop()\nprint(len(a))\nprint(*a)", "from math import gcd\nn = int(input())\n(a, b) = ([], 1)\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        a.append(i)\nfor i in range(len(a)):\n    b = b * a[i] % n\nif b != 1:\n    a.remove(b)\nprint(len(a))\nprint(*a)", "from math import gcd\nn = int(input())\n(a, b) = ([], 1)\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        a.append(i)\nfor i in range(len(a)):\n    b = b * a[i] % n\nif b != 1:\n    a.remove(b)\nprint(len(a))\nprint(*a)", "from math import gcd\nN = int(input())\nANS = []\nX = 1\nfor i in range(1, N):\n    if gcd(N, i) == 1:\n        ANS.append(i)\n        X = X * i % N\nif X != 1:\n    del ANS[ANS.index(X)]\nprint(len(ANS))\nprint(*ANS)", "try:\n    import math\n    n = int(input())\n    op = []\n    s = 1\n    for i in range(1, n):\n        if math.gcd(i, n) == 1:\n            op.append(i)\n            s = s * i % n\n    if s != 1:\n        op.remove(op[len(op) - 1])\n    print(len(op))\n    print(*op)\nexcept:\n    pass", "from math import gcd\nN = int(input())\nANS = []\nX = 1\nfor i in range(1, N):\n    if gcd(N, i) == 1:\n        ANS.append(i)\n        X = X * i % N\nif X != 1:\n    del ANS[ANS.index(X)]\nprint(len(ANS))\nprint(*ANS)", "from math import gcd\nn = int(input())\npr = 1\nans = []\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        ans.append(i)\n        pr = pr * i % n\nif pr == 1:\n    print(len(ans))\n    print(*ans)\nelse:\n    del ans[ans.index(pr)]\n    print(len(ans))\n    print(*ans)", "from math import gcd\nn = int(input())\nans = []\np = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        ans.append(i)\n        p = p * i % n\nif p == 1:\n    print(len(ans))\n    print(*ans)\nelse:\n    print(len(ans) - 1)\n    ans.remove(p)\n    print(*ans)", "import math\nn = int(input())\nb = [1]\np = 1\nfor i in range(2, n):\n    if math.gcd(i, n) == 1:\n        b.append(i)\n        p = p * i % n\nif p % n == 1:\n    print(len(b))\n    print(*b)\nelse:\n    b.remove(p)\n    print(len(b))\n    print(*b)", "from math import gcd\nn = int(input())\nans = []\nnow = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        now = now * i % n\n        ans.append(i)\nif now != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "from math import gcd\nn = int(input())\np = 1\nt = []\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        t.append(i)\n        s = p * i\n        p = s % n\nif p == 1:\n    print(len(t))\n    print(*t)\nelse:\n    del t[-1]\n    print(len(t))\n    print(*t)", "from math import gcd\nn = int(input())\na = []\npro = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        a.append(i)\n        pro = pro * i % n\nif pro != 1:\n    a.remove(pro)\nprint(len(a))\nprint(*a)", "import math\nn = int(input())\nprod = 1\nl = [1]\nfor k in range(2, n - 1):\n    if math.gcd(n, k) == 1:\n        prod = prod * k % n\n        l.append(k)\nif prod != 1:\n    l.append(n - 1)\nprint(len(l))\nprint(*l)", "import math\n(n, p) = (int(input()), 1)\nstore_value = set()\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        store_value.add(i)\n        p = p * i % n\nif p != 1:\n    store_value.remove(p)\nprint(len(store_value))\nprint(*sorted(list(store_value)))", "import math\nn = int(input())\np = 1\nl = list()\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        p = p * i % n\n        l.append(i)\nif p != 1:\n    l.pop()\nprint(len(l))\nprint(*l)", "import math\nn = int(input())\nans = []\nout = 1\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        out = i * out % n\n        ans.append(i)\nif out % n == 1:\n    print(len(ans))\n    print(*ans)\nelse:\n    ans.pop()\n    print(len(ans))\n    print(*ans)", "import math\nimport sys\n\ndef inp():\n    return sys.stdin.readline().strip()\nn = int(inp())\nans = []\nproduct = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        ans.append(i)\n        product = product * i % n\nif product != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "import sys\nimport math\nn = int(sys.stdin.readline())\nans = []\ncnt = 1\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        cnt = cnt * i % n\n        ans.append(i)\nif cnt != 1:\n    ans.pop()\nprint(len(ans))\nprint(*ans)", "import math\na = [0 for i in range(100007)]\nans = 1\nn = int(input())\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        a[i] = 1\n        ans = int(ans * i % n)\nif int(ans) != 1:\n    a[int(ans)] = 0\nprint(a.count(1))\nfor i in range(1, n):\n    if a[i]:\n        print(i, end=' ')", "from math import gcd\nn = int(input())\nlst = [0] * n\nmul = 1\nfor i in range(1, n):\n    if gcd(i, n) == 1:\n        lst[i] = 1\n        mul = mul * i % n\nif mul != 1:\n    lst[mul] = 0\nprint(lst.count(1))\nfor i in range(len(lst)):\n    if lst[i]:\n        print(i, end=' ')", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nn = I()\na = [0] * n\np = 1\nc = 0\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        a[i] = 1\n        c += 1\n        p = p * i % n\nif p != 1:\n    a[p] = 0\n    c -= 1\nprint(c)\nfor i in range(1, n):\n    if a[i] == 1:\n        print(i, end=' ')\nprint()", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nn = I()\na = [0] * n\np = 1\nc = 0\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        a[i] = 1\n        c += 1\n        p = p * i % n\nif p != 1:\n    a[p] = 0\n    c -= 1\nprint(c)\nfor i in range(1, n):\n    if a[i] == 1:\n        print(i, end=' ')\nprint()", "import time\nfrom math import gcd\nfrom functools import reduce\nfrom operator import mul\n\ndef m(s, n):\n    return reduce(lambda x, y: x * y % n, s)\n\ndef check(n):\n    t = [x for x in range(1, n) if gcd(n, x) == 1]\n    this = m(t, n)\n    if this != 1:\n        del t[t.index(this)]\n    print(len(t))\n    print(*t)\n    assert m(t, n) == 1\nn = int(input())\ncheck(n)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    seq = list(range(1, n))\n    a = []\n    prod = 1\n    for i in range(n - 1):\n        if math.gcd(seq[i], n) == 1:\n            a.append(seq[i])\n            prod *= seq[i]\n            prod %= n\n    ans = []\n    for j in a:\n        if prod > 1 and j == prod:\n            pass\n        else:\n            ans.append(j)\n    print(len(ans))\n    print(*ans)\nmain()", "import math\n\ndef read():\n    n = int(input())\n    solve2(n)\n\ndef solve(n):\n    for i in range(2, 20):\n        solve2(i)\n\ndef solve2(n):\n    ans = [1]\n    i = 2\n    while i < n:\n        if math.gcd(i, n) == 1:\n            ans.append(i)\n        i += 1\n    d = dict()\n    acc = 1\n    for i in range(len(ans)):\n        acc = acc * ans[i] % n\n        d[acc] = i\n    end = d[1] + 1\n    print(end)\n    print(*ans[:end])\nread()", "import math\nn = int(input())\ns = 1 if n % 2 == 1 else 2\narr = []\nprod = 1\nfor i in range(1, n, s):\n    if math.gcd(n, i) == 1:\n        arr.append(i)\nfor j in range(len(arr)):\n    prod = prod * arr[j] % n\nif prod != 1:\n    arr.remove(prod)\nprint(len(arr))\nprint(*arr)", "from math import gcd\n\ndef f(n):\n    ok = [0] * (2 * 10 ** 5)\n    p = 1\n    for i in range(1, n):\n        if gcd(n, i) == 1:\n            ok[i] = 1\n            p = p * i % n\n    if p != 1:\n        ok[p] = 0\n    print(ok.count(1))\n    for i in range(len(ok)):\n        if ok[i] == 1:\n            print(i, end=' ')\n    return ''\nprint(*f(int(input())))", "import math\nn = int(input())\na = []\ns = 1\nfor i in range(n - 1):\n    if math.gcd(i + 1, n) == 1:\n        a.append(i + 1)\n        s = s * (i + 1) % n\nif s != 1:\n    a.remove(s)\nprint(len(a))\nprint(*(i for i in a))", "try:\n    import math\n    n = int(input())\n    op = []\n    s = 1\n    for i in range(1, n):\n        if math.gcd(i, n) == 1:\n            op.append(i)\n            s = s * i % n\n    if s != 1:\n        op.remove(op[len(op) - 1])\n    print(len(op))\n    print(*op)\nexcept:\n    pass", "n = int(input())\nimport math\nCoprime = []\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        Coprime.append(i)\nans = 1\nfor c in Coprime:\n    ans *= c\n    ans %= n\nif ans == 1:\n    print(len(Coprime))\n    for c in Coprime:\n        print(c, end=' ')\nelse:\n    print(len(Coprime) - 1)\n    for c in Coprime:\n        if c == n - 1:\n            continue\n        print(c, end=' ')", "import math\nn = int(input())\na = [0] * n\np = 1\nfor i in range(1, n):\n    if math.gcd(n, i) == 1:\n        a[i] = '1'\n        p = p * i % n\nif p != 1:\n    a[p] = '0'\nprint(a.count('1'))\nfor i in range(1, n):\n    if a[i] == '1':\n        print(i, end=' ')", "import math\n(n, p) = (int(input()), 1)\nstore = set()\nfor i in range(1, n):\n    if math.gcd(i, n) == 1:\n        store.add(i)\n        p = p * i % n\nif p != 1:\n    store.remove(p)\nprint(len(store))\nprint(*sorted(list(store)))", "from math import gcd\nN = int(input())\nok = [0] * 100005\nprod = 1\nfor i in range(1, N):\n    if gcd(i, N) == 1:\n        ok[i] = 1\n        prod = prod * i % N\nif prod != 1:\n    ok[prod] = 0\nvalid = [i for i in range(N) if ok[i] == 1]\nprint(len(valid))\nprint(*valid)", "def gcd(a, b):\n    while b != 0:\n        a = a % b\n        (a, b) = (b, a)\n    return a\nn = int(input())\nres = [1]\nprod = 1\nfor i in range(2, n):\n    if gcd(n, i) == 1:\n        res.append(i)\n        prod = prod * i % n\nif prod != 1:\n    res.remove(prod)\nprint(len(res))\nprint(' '.join((str(r) for r in res)))", "from math import gcd\nn = int(input())\nans = []\ncheck = []\nprod = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        prod = prod * i % n\n        check.append(prod)\n        ans.append(i)\nwhile True:\n    if check[-1] != 1:\n        ans.pop()\n        check.pop()\n    else:\n        break\nprint(len(ans))\nprint(*ans)", "from math import gcd\nn = int(input())\nl = []\np = 1\nfor i in range(1, n):\n    if gcd(n, i) == 1:\n        p = p * i % n\n        l.append(i)\nif p != 1:\n    l.pop()\nprint(len(l))\nfor i in l:\n    print(i, end=' ')", "import math\nn = int(input())\na = 0\ns = []\np = 1\nfor i in range(n):\n    if math.gcd(i, n) == 1:\n        a += 1\n        s += [i]\n        p *= i\n        p %= n\nif p != 1:\n    s.remove(p)\n    a -= 1\nprint(a)\nprint(*s)", "from math import gcd\nn = int(input())\nl = [0 for i in range(n)]\nprod = 1\nfor i in range(n):\n    if gcd(i, n) == 1:\n        l[i] = 1\n        prod = prod * i % n\nif prod != 1:\n    l[prod] = 0\nprint(l.count(1))\nfor i in range(n):\n    if l[i] == 1:\n        print(i, end=' ')"]