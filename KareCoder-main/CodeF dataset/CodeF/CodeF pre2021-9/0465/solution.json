["t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    arr = [list(map(int, input().split())) for i in range(r)]\n    l = r + c - 1\n    Arr = [[] for i in range(l)]\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            Arr[i + j].append(arr[i][j])\n    for i in range(l // 2):\n        t = Arr[i] + Arr[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        m += n - 1\n        cnt = ([0] * m, [0] * m)\n        for y in range(n):\n            for (x, ch) in enumerate(input()[::2], y):\n                cnt[ord(ch) - 48][x] += 1\n        cnt = [[a + b for (a, b) in zip(l, l[:-m // 2 - 1 + m % 2:-1])] for l in cnt]\n        print(sum(map(min, zip(*cnt))))\nmain()", "def get_rows(grid):\n    return [[c for c in r] for r in grid]\n\ndef get_cols(grid):\n    return zip(*grid)\n\ndef print_diagonals(grid):\n    b = [None] * (len(grid) - 1)\n    grid = [b[:i] + r + b[i:] for (i, r) in enumerate(get_rows(grid))]\n    return [[c for c in r if c is not None] for r in get_cols(grid)]\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    le = [[int(i) for i in input().split()] for i in range(m)]\n    l = print_diagonals(le)\n    i = 0\n    j = len(l) - 1\n    ans = 0\n    while i < j:\n        a = l[i].count(1)\n        b = l[j].count(1)\n        tot1 = a + b\n        tot0 = len(l[i]) + len(l[j]) - tot1\n        an = min(tot1, tot0)\n        ans += an\n        i += 1\n        j -= 1\n    print(ans)", "t = int(input())\nfor k in range(0, t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(0, n):\n        s = list(map(int, input().split()))\n        a.append(s)\n    ans = [0] * 100\n    ans1 = [0] * 100\n    f = 0\n    for i in range(0, n):\n        for j in range(0, m):\n            if a[i][j] == 0:\n                ans[i + j] = ans[i + j] + 1\n            else:\n                ans1[i + j] = ans1[i + j] + 1\n    if (n + m) % 2 == 0:\n        p = (n + m - 2) // 2\n    else:\n        p = (n + m - 1) // 2\n    for i in range(0, p):\n        f = f + min(ans[i] + ans[n + m - 2 - i], ans1[i] + ans1[n + m - 2 - i])\n    print(f)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        tmp = list(map(int, input().split()))\n        a.append(tmp)\n    x = []\n    for i in range(n + m - 1):\n        x.append([0, 0])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                x[i + j][1] += 1\n            else:\n                x[i + j][0] += 1\n    ans = 0\n    for i in range(len(x) // 2):\n        ans += min(x[i][0] + x[len(x) - i - 1][0], x[i][1] + x[len(x) - i - 1][1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "import math\nN = int(input())\nfor iteration in range(N):\n    dim = input().split(' ')\n    row = int(dim[0])\n    col = int(dim[1])\n    total_diagonal = row + col - 1\n    num_1 = [0 for i in range(total_diagonal)]\n    num_0 = [0 for i in range(total_diagonal)]\n    for r in range(row):\n        rowdata = input().split(' ')\n        for c in range(col):\n            if rowdata[c] == '0':\n                num_0[r + c] += 1\n            else:\n                num_1[r + c] += 1\n    total_change = 0\n    for i in range(math.floor(total_diagonal / 2)):\n        total_1 = num_1[i] + num_1[-(i + 1)]\n        total_0 = num_0[i] + num_0[-(i + 1)]\n        total_change += min(total_1, total_0)\n    print(total_change)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = [list(map(int, input().split())) for i in range(N)]\n    L = N + M - 1\n    c0 = [0] * L\n    c1 = [0] * L\n    for (i, row) in enumerate(A):\n        for (j, a) in enumerate(row):\n            if a == 0:\n                c0[i + j] += 1\n            else:\n                c1[i + j] += 1\n    M = L // 2\n    ans = 0\n    for i in range(M):\n        a0 = c0[i] + c0[-1 - i]\n        a1 = c1[i] + c1[-1 - i]\n        ans += min(a0, a1)\n    print(ans)", "def solve():\n    (n, m) = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    if n > m:\n        (n, m) = (m, n)\n        A = list(zip(*A))\n    T = []\n    for i in range(n - 1):\n        S = [0, 0]\n        for j in range(i + 1):\n            S[A[i - j][j]] += 1\n        T.append(S)\n    for i in range(m - n):\n        S = [0, 0]\n        for j in range(n):\n            S[A[j][n - 1 + i - j]] += 1\n        T.append(S)\n    for i in range(n):\n        S = [0, 0]\n        for j in range(n - i):\n            S[A[i + j][m - 1 - j]] += 1\n        T.append(S)\n    ret = 0\n    for i in range((n + m - 1) // 2):\n        zero = T[i][0] + T[-1 - i][0]\n        one = T[i][1] + T[-1 - i][1]\n        ret += min(one, zero)\n    return ret\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        print(solve())\nmain()", "def solve():\n    (n, m) = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    counter = [[0, 0] for _ in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            counter[i + j][grid[i][j]] += 1\n    ans = 0\n    for p in range(n + m - 1):\n        q = n + m - 2 - p\n        if p >= q:\n            continue\n        c1 = counter[p][0] + counter[q][0]\n        c2 = counter[p][1] + counter[q][1]\n        ans += min(c1, c2)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "T = int(input())\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        mat.append(li)\n    count = 0\n    for dist in range(int((n + m - 1) / 2)):\n        count_0 = 0\n        count_1 = 0\n        if dist != int((n + m - 1) / 2):\n            for i in range(n):\n                j = dist - i\n                if j < m and j >= 0:\n                    if mat[i][j] == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                    if mat[n - i - 1][m - j - 1] == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n        count += count_0 if count_0 < count_1 else count_1\n    print(count)\nfor _ in range(T):\n    solve()", "from typing import DefaultDict\nt = int(input())\nfor _ in range(t):\n    matrix = []\n    (n, m) = map(int, input().split())\n    for row in range(n):\n        l = list(map(int, input().split()))\n        matrix.append(l)\n    freq = {}\n    for x in range(n):\n        for y in range(m):\n            if x + y not in freq:\n                freq[x + y] = {1: 0, 0: 0}\n            freq[x + y][matrix[x][y]] += 1\n    change = 0\n    for i in range((n + m - 1) // 2):\n        change += min(freq[i][0] + freq[n + m - 2 - i][0], freq[i][1] + freq[n + m - 2 - i][1])\n    print(change)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    Z = [0] * (n + m - 1)\n    O = [0] * (n + m - 1)\n    for i in range(n):\n        A = [int(j) for j in input().split()]\n        for (j, a) in enumerate(A):\n            if a == 0:\n                Z[i + j] += 1\n            else:\n                O[i + j] += 1\n    ans = 0\n    for i in range((n + m - 1) // 2):\n        (x, y) = (Z[i] + Z[n + m - 2 - i], O[i] + O[n + m - 2 - i])\n        ans += min(x, y)\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        (h, w) = MI()\n        aa = LLI(h)\n        s = h + w - 1\n        cnt = [[0, 0] for _ in range(s)]\n        for i in range(h):\n            for j in range(w):\n                cnt[i + j][aa[i][j]] += 1\n        ans = 0\n        for i in range(s // 2):\n            c0 = cnt[i][0] + cnt[s - 1 - i][0]\n            c1 = cnt[i][1] + cnt[s - 1 - i][1]\n            ans += min(c0, c1)\n        print(ans)\nmain()", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    max_length = n + m - 2\n    nbs = [[0, 0] for i in range(max_length + 1)]\n    matrix = [input().split() for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            d = i + j\n            if matrix[i][j] == '1':\n                nbs[d][1] += 1\n            else:\n                nbs[d][0] += 1\n    res = 0\n    middle = (max_length + 1) // 2\n    for pos in range(middle):\n        nb1 = nbs[pos]\n        nb2 = nbs[max_length - pos]\n        mini = min(nb1[0] + nb2[0], nb1[1] + nb2[1])\n        res += mini\n    print(res)", "t = int(input())\nans = [0] * t\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    A = []\n    B1 = [0] * (n + m - 1)\n    B0 = [0] * (n + m - 1)\n    for j in range(n):\n        A.append(list(map(int, input().split())))\n    for j in range(n):\n        for k in range(m):\n            if A[j][k] == 0:\n                B0[j + k] += 1\n            else:\n                B1[j + k] += 1\n    for j in range((n + m - 1) // 2):\n        x = B1[j] + B1[n + m - j - 2]\n        y = B0[j] + B0[n + m - j - 2]\n        if x >= y:\n            ans[i] += y\n        else:\n            ans[i] += x\nfor i in range(t):\n    print(int(ans[i]))", "def solve():\n    (n, m) = map(int, input().split(' '))\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, input().split(' ')))\n        matrix.append(row)\n    level = 0\n    max_level = m + n - 2\n    ans = 0\n    while level < max_level:\n        number0 = 0\n        number1 = 0\n        for i in range(level + 1):\n            if i >= n or level - i >= m or level - i < 0:\n                continue\n            if matrix[i][level - i]:\n                number1 += 1\n            else:\n                number0 += 1\n        for i in range(level + 1):\n            _i = n - 1 - i\n            if _i < 0 or max_level - _i >= m or max_level - _i < 0:\n                continue\n            if matrix[_i][max_level - _i]:\n                number1 += 1\n            else:\n                number0 += 1\n        level += 1\n        max_level -= 1\n        ans += min(number0, number1)\n    return ans\nT = int(input())\nans = []\nfor _ in range(T):\n    ans.append(solve())\nfor a in ans:\n    print(a)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = [list(input().split()) for i in range(n)]\n    a = (m + n - 3) // 2\n    v = [0] * (a + 1)\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if x[i][j] == '1':\n                if i + j <= a:\n                    v[i + j] += 1\n                elif m + n - i - j - 2 <= a:\n                    v[m + n - i - j - 2] += 1\n    for k in range(a + 1):\n        b = 2 * min(k + 1, min(m, n))\n        s += min(v[k], b - v[k])\n    print(s)", "import sys\nimport collections\n\ndef get_rows(grid):\n    return [[c for c in r] for r in grid]\n\ndef get_cols(grid):\n    return zip(*grid)\n\ndef get_backward_diagonals(grid):\n    b = [None] * (len(grid) - 1)\n    grid = [b[i:] + r + b[:i] for (i, r) in enumerate(get_rows(grid))]\n    return [[c for c in r if c is not None] for r in get_cols(grid)]\n\ndef get_forward_diagonals(grid):\n    b = [None] * (len(grid) - 1)\n    grid = [b[:i] + r + b[i:] for (i, r) in enumerate(get_rows(grid))]\n    return [[c for c in r if c is not None][::-1] for r in get_cols(grid)]\n\ndef diff_arrays(a, b):\n    toZero = a.count(1) + b.count(1)\n    toOne = a.count(0) + b.count(0)\n    return min(toZero, toOne)\nt = int(sys.stdin.readline().strip())\nfor i in range(t):\n    (n, m) = list(map(int, sys.stdin.readline().strip().split(' ')))\n    grid = []\n    for _ in range(n):\n        l = list(map(int, sys.stdin.readline().strip().split(' ')))\n        grid.append(l)\n    diag = get_forward_diagonals(grid)\n    cnt = 0\n    for i in range(len(diag) // 2):\n        cnt += diff_arrays(diag[i], diag[len(diag) - 1 - i])\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = [list(map(int, input().split())) for __ in range(n)]\n    d = n + m - 2\n    cnt = 0\n    for i in range((n + m - 1) // 2):\n        (one, zero) = (0, 0)\n        for j in range(max(0, i + 1 - m), min(i, n - 1) + 1):\n            if mat[j][i - j] == 0:\n                zero += 1\n            else:\n                one += 1\n        for j in range(max(0, d - i + 1 - m), min(d - i, n - 1) + 1):\n            if mat[j][d - i - j] == 0:\n                zero += 1\n            else:\n                one += 1\n        cnt += min(one, zero)\n    print(cnt)", "import sys\nimport heapq\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, sys.stdin.readline().split())\n        table = []\n        for i in range(n):\n            table.append(list(map(int, sys.stdin.readline().split())))\n        ans = 0\n        if n <= m:\n            for i in range((n + m - 1) // 2):\n                pointer = 0\n                cnt0 = 0\n                cnt1 = 0\n                while i - pointer >= 0 and pointer < n:\n                    if table[pointer][i - pointer] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    if table[-pointer - 1][pointer - i - 1] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    pointer += 1\n                ans += min(cnt0, cnt1)\n        else:\n            for i in range((n + m - 1) // 2):\n                pointer = 0\n                cnt0 = 0\n                cnt1 = 0\n                while i - pointer >= 0 and pointer < m:\n                    if table[i - pointer][pointer] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    if table[pointer - i - 1][-pointer - 1] == 0:\n                        cnt0 += 1\n                    else:\n                        cnt1 += 1\n                    pointer += 1\n                ans += min(cnt0, cnt1)\n        print(ans)\n    return\nmain()", "from sys import setrecursionlimit, stdin\nimport math\nsetrecursionlimit(10 ** 5)\nreadline = stdin.readline\nfor _ in range(int(readline().rstrip())):\n    (n, m) = map(int, readline().split())\n    temp_list = []\n    grid = [list(map(int, readline().split())) for _ in range(n)]\n    (countzero, countone) = ([0] * (n + m - 1), [0] * (n + m - 1))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if not grid[i][j]:\n                countzero[i + j] += 1\n            else:\n                countone[i + j] += 1\n    if (n + m) % 2 == 0:\n        v = (n - 1 + m - 1) // 2\n    else:\n        v = (n - 1 + m - 1 + 1) // 2\n    for i in range(v):\n        zeroes = countzero[i] + countzero[n - 1 + m - 1 - i]\n        ones = countone[i] + countone[n - 1 + m - 1 - i]\n        ans += min(zeroes, ones)\n    print(ans)", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = [int(x) for x in input().split()]\n    mat = []\n    for i in range(n):\n        mat.append([int(x) for x in input().split()])\n    col = 0\n    row = 0\n    diags = []\n    while row < n:\n        tc = col\n        tr = row\n        diags.append([])\n        while tc >= 0 and tr < n:\n            diags[-1].append(mat[tr][tc])\n            tc -= 1\n            tr += 1\n        if col == m - 1:\n            row += 1\n        else:\n            col += 1\n    l = len(diags)\n    res = 0\n    for i in range(l // 2):\n        s = sum(diags[i]) + sum(diags[l - i - 1])\n        le = 2 * len(diags[i])\n        res += min(s, le - s)\n    print(res)\ntt = int(input())\nfor test in range(tt):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        a.append(b)\n    x = n + m - 1\n    y = []\n    for _ in range(x):\n        y.append([])\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            y[i + j].append(a[i][j])\n    for k in range(x // 2):\n        z = y[k] + y[-1 - k]\n        total += min(z.count(0), z.count(1))\n    print(total)", "def stripe(k):\n    for i in range(k + 1):\n        if i < n and k - i < m:\n            yield a[i][k - i]\n            yield a[n - 1 - i][m - 1 - (k - i)]\n\ndef solve(n, m, a):\n    ans = 0\n    for k in range((n + m - 1) // 2):\n        vals = list(stripe(k))\n        ans += min(len(vals) - sum(vals), sum(vals))\n    return ans\nt = int(input().strip())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().strip().split())))\n    print(solve(n, m, a))", "for _ in range(int(input())):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    temp = [[0, 0] for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            temp[i + j][l[i][j]] += 1\n    low = 0\n    high = n + m - 2\n    while low < high:\n        ans += min(temp[low][0] + temp[high][0], temp[low][1] + temp[high][1])\n        low += 1\n        high -= 1\n    print(ans)", "import math\nt = int(input())\n\ndef travel_up(mat, n, m, r, c):\n    temp = []\n    while r >= 0 and c <= m - 1:\n        temp.append(mat[r][c])\n        r -= 1\n        c += 1\n    return temp\n\ndef count(x):\n    c = len([xx for xx in x if xx == 1])\n    return (len(x) - c, c)\nfor i in range(t):\n    inp = input().split(' ')\n    (n, m) = (int(inp[0]), int(inp[1]))\n    mat = []\n    for j in range(n):\n        mat.append([int(x) for x in input().split(' ')])\n    palind = []\n    palind.append([mat[0][0]])\n    for j in range(1, n):\n        palind.append(travel_up(mat, n, m, j, 0))\n    for j in range(1, m):\n        palind.append(travel_up(mat, n, m, n - 1, j))\n    changes = 0\n    path_len = len(palind)\n    for j in range(int(path_len / 2)):\n        countl = count(palind[j])\n        countr = count(palind[path_len - 1 - j])\n        changes = changes + min(countl[0] + countr[0], countl[1] + countr[1])\n    print(changes)", "def solve(a, n, m):\n    dc = n + m - 1\n    res = 0\n    for k in range(dc // 2):\n        rk = dcount(a, n, m, k)\n        rnk = dcount(a, n, m, dc - 1 - k)\n        res += min(rk[0] + rnk[0], rk[1] + rnk[1])\n    return res\n\ndef dcount(a, n, m, k):\n    zeros = 0\n    ones = 0\n    for i in range(min(n, k + 1)):\n        j = k - i\n        if j < m:\n            ones += a[i][j]\n            zeros += 1 - a[i][j]\n    return (zeros, ones)\nt = int(input())\nfor i_t in range(t):\n    [n, m] = list(map(int, input().split(' ')))\n    a = [None] * n\n    for i_n in range(n):\n        a[i_n] = list(map(int, input().split(' ')))\n    print(solve(a, n, m))", "def pal_shift(n, m, M):\n    N = []\n    for i in range(n):\n        for j in range(m):\n            k = M[i][j]\n            w = i + j\n            if w < len(N):\n                N[w].append(k)\n            else:\n                l = [k]\n                N.append(l)\n    i = 0\n    count = 0\n    while i < m + n - 2 - i:\n        l1 = N[i]\n        l2 = N[m + n - 2 - i]\n        a1 = l1.count(1)\n        a2 = l2.count(1)\n        b1 = l1.count(0)\n        b2 = l2.count(0)\n        c = min(a1 + a2, b1 + b2)\n        count = count + c\n        i = i + 1\n    return count\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    M = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        M.append(l)\n    print(pal_shift(n, m, M))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "def ispis(a, r, s):\n    print()\n    for i in range(r):\n        for j in range(s):\n            print(a[i][j], end=' ')\n        print()\nfrom random import randint\nt = int(input())\nfor i in range(t):\n    (r, s) = map(int, input().split())\n    a = []\n    for i in range(r):\n        x = list(map(int, input().split()))\n        a.append(x)\n    b = []\n    for i in range(r + s - 1):\n        b = b + [0]\n    for i in range(r):\n        for j in range(s):\n            if a[i][j] == 1:\n                b[i + j] += 1\n    x = 0\n    u = min(r, s)\n    if (r + s - 1) % 2 == 1:\n        for i in range((r + s - 2) // 2):\n            y = b[i] + b[r + s - 2 - i]\n            v = min(i + 1, u)\n            x += min(y, 2 * v - y)\n    else:\n        for i in range((r + s - 2) // 2 + 1):\n            y = b[i] + b[r + s - 2 - i]\n            v = min(i + 1, u)\n            x += min(y, 2 * v - y)\n    print(x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    ans = 0\n    for i in range(n):\n        t = list(map(int, input().split()))\n        arr.append(t)\n    block = [[0, 0] for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            block[i + j][arr[i][j]] += 1\n    for i in range(n + m - 1):\n        j = n + m - 2 - i\n        if i >= j:\n            continue\n        ans += min(block[i][0] + block[j][0], block[i][1] + block[j][1])\n    print(ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [[0, 0] for i in range(n + m - 1)]\n    ans = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        for j in range(m):\n            arr[i + j][l[j]] += 1\n    for k in range((n + m - 1) // 2):\n        ans += min(arr[k][0] + arr[n + m - 2 - k][0], arr[k][1] + arr[n + m - 2 - k][1])\n    print(ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    count = 0\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    if (n + m) % 2 == 0:\n        x = (n + m) // 2 - 1\n    else:\n        x = (n + m) // 2\n    for i in range(x):\n        ones = 0\n        zeroes = 0\n        for j in range(min(i + 1, m, n)):\n            if i > n - 1:\n                if mat[n - 1 - j][i + j - n + 1] == 1:\n                    ones += 1\n                else:\n                    zeroes += 1\n                if mat[-n + j][-1 - i + n - 1 - j] == 1:\n                    ones += 1\n                else:\n                    zeroes += 1\n            else:\n                if mat[i - j][j] == 1:\n                    ones += 1\n                else:\n                    zeroes += 1\n                if mat[-1 - i + j][-1 - j] == 1:\n                    ones += 1\n                else:\n                    zeroes += 1\n        if zeroes > ones:\n            count += ones\n        else:\n            count += zeroes\n    print(count)", "n = int(input())\nfor _ in range(n):\n    (a, b) = [int(i) for i in input().split()]\n    c = [list([int(i) for i in input().split()]) for i in range(a)]\n    m = a + b - 1\n    d = [[] for i in range(m)]\n    res = 0\n    for i in range(a):\n        for j in range(b):\n            d[i + j].append(c[i][j])\n    for i in range(m // 2):\n        n = d[i] + d[-1 - i]\n        res += min(n.count(0), n.count(1))\n    print(res)", "cases = int(input())\nfor t in range(cases):\n    (n, m) = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for i in range(n)]\n    b = [[] for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            d = i + j\n            b[d].append(a[i][j])\n    centre = (n + m - 1) // 2\n    output = 0\n    for i in range(centre):\n        ones = sum(b[i]) + sum(b[n + m - 2 - i])\n        total = min(i + 1, n, m) * 2\n        output += min(ones, total - ones)\n    print(output)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n\n    def solve(n, m):\n        matrix = []\n        for i in range(n):\n            matrix.append([int(i) for i in input().split()])\n        mid = n + m - 1\n        mid = mid // 2\n        ans = 0\n        if m >= n:\n            for i in range(mid):\n                start = 0\n                end = i\n                count_0 = count_1 = 0\n                while start < n and end >= 0:\n                    temp = matrix[start][end]\n                    temp1 = matrix[n - 1 - start][m - 1 - end]\n                    if temp == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                    if temp1 == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                    start += 1\n                    end -= 1\n                ans += min(count_0, count_1)\n            print(ans)\n        else:\n            for i in range(mid):\n                start = i\n                end = 0\n                count_0 = count_1 = 0\n                while start >= 0 and end < m:\n                    temp = matrix[start][end]\n                    temp1 = matrix[n - 1 - start][m - 1 - end]\n                    if temp == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                    if temp1 == 0:\n                        count_0 += 1\n                    else:\n                        count_1 += 1\n                    start -= 1\n                    end += 1\n                ans += min(count_0, count_1)\n            print(ans)\n    (n, m) = [int(i) for i in input().split()]\n    solve(n, m)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "def main():\n    (n, m) = map(int, input().split())\n    dct = dict()\n    for i in range(n):\n        line = list(map(int, input().split()))\n        for k in range(m):\n            to_wrt = i + k\n            if i + k >= (n + m) // 2:\n                to_wrt = n + m - to_wrt - 2\n            if not to_wrt in dct:\n                dct[to_wrt] = [0, 0]\n            if line[k] == 0:\n                dct[to_wrt][0] += 1\n            else:\n                dct[to_wrt][1] += 1\n    change = 0\n    for i in dct:\n        change += min(dct[i])\n    if (n + m) % 2 == 0:\n        change -= min(dct[max(dct)])\n    print(change)\nt = int(input())\nfor i in range(t):\n    main()", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        mat.append(arr)\n    mid = (m + n - 1) // 2\n    k = 0\n    ans = 0\n    fir_row = 0\n    fir_col = 0\n    last_row = n - 1\n    last_col = m - 1\n    while k < mid:\n        one = 0\n        zero = 0\n        temp_row = fir_row\n        temp_col = fir_col\n        while temp_row < n and temp_col >= 0:\n            if mat[temp_row][temp_col] == 0:\n                zero += 1\n            else:\n                one += 1\n            temp_row += 1\n            temp_col -= 1\n        temp_row = last_row\n        temp_col = last_col\n        while temp_row < n and temp_col >= 0:\n            if mat[temp_row][temp_col] == 0:\n                zero += 1\n            else:\n                one += 1\n            temp_row += 1\n            temp_col -= 1\n        ans += min(one, zero)\n        if fir_col < m - 1:\n            fir_col += 1\n        else:\n            fir_row += 1\n        if last_row > 0:\n            last_row -= 1\n        else:\n            last_col -= 1\n        k += 1\n    print(ans)", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    (n, m) = map(int, fastinput().split())\n    y = n + m - 1\n    count1 = [0] * y\n    for j in range(n):\n        k = 0\n        for i in fastinput().split():\n            if int(i) == 0:\n                k += 1\n                continue\n            else:\n                count1[j + k] += 1\n                k += 1\n    change = 0\n    m = min(n, m)\n    for i in range(y // 2):\n        x = min(2 * (i + 1), 2 * m)\n        change += min(count1[i] + count1[y - i - 1], x - count1[i] - count1[y - i - 1])\n    print(change)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ar = []\n    for i in range(n):\n        ar.append(list(map(int, input().split())))\n    le = n + m - 2\n    ans = 0\n    dic = {}\n    for i in range(m):\n        on = 0\n        ze = 0\n        for j in range(min(n, i + 1)):\n            if ar[j][i - j] == 1:\n                on += 1\n            else:\n                ze += 1\n        dic[i] = [on, ze]\n    for i in range(1, n):\n        on = 0\n        ze = 0\n        for j in range(min(n - i, m)):\n            if ar[i + j][m - 1 - j] == 1:\n                on += 1\n            else:\n                ze += 1\n        dic[m - 1 + i] = [on, ze]\n    if le % 2 == 0:\n        for i in range(le // 2):\n            ans += min(dic[i][0] + dic[le - i][0], dic[i][1] + dic[le - i][1])\n        print(ans)\n    else:\n        for i in range(le // 2 + 1):\n            ans += min(dic[i][0] + dic[le - i][0], dic[i][1] + dic[le - i][1])\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ar = []\n    for i in range(n):\n        ar.append(list(map(int, input().split())))\n    le = n + m - 2\n    ans = 0\n    dic = {}\n    for i in range(m):\n        on = 0\n        ze = 0\n        for j in range(min(n, i + 1)):\n            if ar[j][i - j] == 1:\n                on += 1\n            else:\n                ze += 1\n        dic[i] = [on, ze]\n    for i in range(1, n):\n        on = 0\n        ze = 0\n        for j in range(min(n - i, m)):\n            if ar[i + j][m - 1 - j] == 1:\n                on += 1\n            else:\n                ze += 1\n        dic[m - 1 + i] = [on, ze]\n    if le % 2 == 0:\n        for i in range(le // 2):\n            ans += min(dic[i][0] + dic[le - i][0], dic[i][1] + dic[le - i][1])\n        print(ans)\n    else:\n        for i in range(le // 2 + 1):\n            ans += min(dic[i][0] + dic[le - i][0], dic[i][1] + dic[le - i][1])\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for j in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    Ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        Ans += min(t.count(1), t.count(0))\n    print(Ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    main = []\n    for i in range(n + m - 1):\n        main.append([])\n    for i in range(n):\n        for j in range(m):\n            main[i + j].append(l[i][j])\n    ans = 0\n    for i in range((n + m - 1) // 2):\n        a = main[i].count(0) + main[n + m - 2 - i].count(0)\n        b = main[i].count(1) + main[n + m - 2 - i].count(1)\n        ans += min(a, b)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        for j in range(m):\n            if i + j not in d:\n                d[i + j] = [l[j]]\n            else:\n                d[i + j].append(l[j])\n    dist = n + m - 2\n    ans = 0\n    for i in range(dist):\n        if dist - i > i:\n            t1 = d[dist - i].count(1) + d[i].count(1)\n            t0 = d[dist - i].count(0) + d[i].count(0)\n            ans += min(t1, t0)\n        else:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    board = [0] * n\n    for j in range(n):\n        row = list(map(int, input().split(' ')))\n        board[j] = row\n    zeros = [0] * (m + n - 1)\n    ones = [0] * (m + n - 1)\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == 0:\n                zeros[row + col] += 1\n            else:\n                ones[row + col] += 1\n    changes = 0\n    for step in range((m + n - 1) // 2):\n        current_zeros = zeros[step] + zeros[m + n - 2 - step]\n        current_ones = ones[step] + ones[m + n - 2 - step]\n        changes += min(current_ones, current_zeros)\n    print(changes)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    l = n + m - 1\n    A = [[] for i in range(l)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            A[i + j].append(a[i][j])\n    for i in range(l // 2):\n        t = A[i] + A[-1 - i]\n        ans += min(t.count(0), t.count(1))\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for j in range(n):\n        b = list(map(int, input().split()))\n        a.append(b)\n    l = n + m\n    c = [[0, 0] for j in range(n + m)]\n    for j in range(n):\n        for p in range(m):\n            c[j + p + 1][a[j][p]] += 1\n    j = 1\n    res = 0\n    while j <= (l - 1) // 2:\n        res += min(c[l - j][1] + c[j][1], c[l - j][0] + c[j][0])\n        j += 1\n    print(res)", "for o in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = [list(map(int, input().split())) for i in range(a)]\n    d = a + b - 1\n    S = [[] for i in range(d)]\n    res = 0\n    for i in range(a):\n        for j in range(b):\n            S[i + j].append(s[i][j])\n    for i in range(d // 2):\n        v = S[i] + S[-1 - i]\n        res += min(v.count(0), v.count(1))\n    print(res)", "from collections import defaultdict\n\ndef test_case():\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    groups = defaultdict(lambda : defaultdict(int))\n    for (y, row) in enumerate(a):\n        for (x, val) in enumerate(row):\n            groups[x + y][int(val)] += 1\n    max_group = n + m - 2\n    ans = 0\n    if groups[0] != groups[max_group]:\n        ans += 1\n    for i in range(1, max_group // 2 + max_group % 2):\n        zeros = groups[i][0] + groups[max_group - i][0]\n        ones = groups[i][1] + groups[max_group - i][1]\n        ans += min(ones, zeros)\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    test_case()", "from collections import defaultdict\n\ndef read_list():\n    return list(map(int, input().split(' ')))\nN = int(input())\nfor _ in range(N):\n    dic = defaultdict(lambda : [0, 0])\n    (n, m) = read_list()\n    for i in range(n):\n        num = read_list()\n        for j in range(m):\n            if num[j] == 1:\n                dic[i + j][1] += 1\n            else:\n                dic[i + j][0] += 1\n    res = 0\n    for k in range(m + n - 1 >> 1):\n        res += min(dic[k][0] + dic[m + n - 2 - k][0], dic[k][1] + dic[m + n - 2 - k][1])\n    print(res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        for j in range(m):\n            d[i + j].append(a[i][j])\n    x = len(d)\n    (i, j) = (0, x - 1)\n    ans = 0\n    while j > i:\n        lst = d[i] + d[j]\n        zero = lst.count(0)\n        one = lst.count(1)\n        ans += min(zero, one)\n        i += 1\n        j -= 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = [int(y) for y in input().split()]\n    a = list()\n    for i in range(n):\n        a.append([int(y) for y in input().split()])\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        for j in range(m):\n            d[i + j].append(a[i][j])\n    (i, j, result) = (0, len(d) - 1, 0)\n    while j > i:\n        lst = d[i] + d[j]\n        (zeros, ones) = (lst.count(0), lst.count(1))\n        result += min(zeros, ones)\n        i += 1\n        j -= 1\n    print(result)", "from collections import deque\n\ndef check(i, j):\n    if 0 <= i < n and 0 <= j < m:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ls = []\n    for i in range(n):\n        ls.append(list(map(int, input().split())))\n    group = [[0, 0] for i in range(m + n)]\n    for i in range(n):\n        for j in range(m):\n            group[i + j][ls[i][j]] += 1\n    cnt = 0\n    for i in range(n + m - 1):\n        j = n + m - 2 - i\n        if i >= j:\n            continue\n        cnt += min(group[i][0] + group[j][0], group[i][1] + group[j][1])\n    print(cnt)", "for t in range(int(input())):\n    (n, m) = [int(z) for z in input().split()]\n    a = []\n    for i in range(n):\n        line = [int(z) for z in input().split()]\n        a.append(line)\n    ds = [0] * (m + n - 1)\n    ns = [0] * (m + n - 1)\n    for i in range(n):\n        for j in range(m):\n            ds[i + j] += a[i][j]\n            ns[i + j] += 1\n    s = 0\n    for i in range(len(ds) // 2):\n        n = ns[i] + ns[-i - 1]\n        u = ds[i] + ds[-i - 1]\n        s += min(u, n - u)\n    print(s)", "from collections import defaultdict\nimport sys\nimport math\ninput = lambda : sys.stdin.readline().rstrip()\nR = lambda : list(map(int, input().split(' ')))\n\ndef trevers(n, m):\n    result = defaultdict(set)\n    for i in range(n):\n        for j in range(m):\n            result[i + j].add((i, j))\n    return result\n(T,) = R()\nfor t in range(T):\n    (n, m) = R()\n    if (n + m - 2) % 2 == 1:\n        center = -1\n    else:\n        center = (n - 1 + m - 1) / 2\n    grid = []\n    for i in range(n):\n        grid.append(R())\n    groups = trevers(n, m)\n    result = 0\n    for key in range(0, math.ceil((n + m - 2) / 2)):\n        union = groups[key] | groups[n + m - 2 - key]\n        ones = sum((grid[i][j] for (i, j) in union))\n        result += min(ones, len(union) - ones)\n    print(int(result))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    s = (n + m - 1) // 2\n    ans = 0\n    j = 0\n    a = [[0, 0] for _ in range(n + m - 1)]\n    for r in range(n):\n        for c in range(m):\n            temp = r + c\n            a[temp][matrix[r][c]] += 1\n    for i in range(s):\n        ones = a[i][1] + a[n + m - 2 - i][1]\n        zeroes = a[i][0] + a[n + m - 2 - i][0]\n        ans += min(ones, zeroes)\n    print(ans)", "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (h, w) = nm()\n    a = [nl() for _ in range(h)]\n    d = dict()\n    for i in range(h):\n        for j in range(w):\n            v = min(i + j, h + w - 2 - i - j)\n            if v not in d:\n                d[v] = [0, 0]\n            d[v][a[i][j]] += 1\n    ans = 0\n    for x in d:\n        if x * 2 != h + w - 2:\n            ans += min(d[x])\n    print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nimport heapq\nimport random\nimport collections\nimport math\n\ndef solve(grid):\n    lst = collections.defaultdict(list)\n    for (i, row) in enumerate(grid):\n        for (j, val) in enumerate(row):\n            lst[i + j].append(val)\n    res = 0\n    for i in range((max(lst) + 1) // 2):\n        c = collections.Counter(lst[i]) + collections.Counter(lst[max(lst) - i])\n        res += min(c[0], c[1])\n    return res\n\ndef console(*args):\n    print('\\x1b[36m', *args, '\\x1b[0m', file=sys.stderr)\n    return\nfor case_num in range(int(input())):\n    (nrows, m) = list(map(int, input().split()))\n    grid = []\n    for _ in range(nrows):\n        grid.append(list(map(int, input().split())))\n    res = solve(grid)\n    print(res)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    matr = []\n    for i in range(n):\n        matr.append(list(map(int, input().split())))\n    s = {}\n    for i in range(n):\n        for j in range(m):\n            s[i + j] = s.get(i + j, 0) + matr[i][j]\n    ans = 0\n    x = 0\n    y = n + m - 2\n    while x < y:\n        ma = min(min(n, m), x + 1)\n        ans += min(ma - s[x] + ma - s[y], s[x] + s[y])\n        x += 1\n        y -= 1\n    print(ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    (mat, dist, sum) = ([], dict(), 0)\n    for i in range(n + m - 2):\n        dist[i] = [0, 0]\n    for ii in range(n):\n        mat.append(list(map(int, input().split())))\n        for iii in range(m):\n            if 2 * (ii + iii) != n + m - 2:\n                dist[min(ii + iii, n + m - 2 - ii - iii)][mat[ii][iii]] += 1\n    for val in dist:\n        sum += min(dist[val])\n    print(sum)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "from collections import defaultdict\nfor _ in range(int(input())):\n    d = defaultdict(list)\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                try:\n                    d[i + j][0] += 1\n                    d[i + j][1] += 1\n                except:\n                    d[i + j] = [1, 1]\n            else:\n                try:\n                    d[i + j][0] += 1\n                except:\n                    d[i + j] = [1, 0]\n    i = 0\n    s = 0\n    j = m + n - 2\n    while i < j:\n        s += min(d[i][0] + d[j][0] - d[i][1] - d[j][1], d[i][1] + d[j][1])\n        i += 1\n        j -= 1\n    print(s)", "q = int(input())\nfor z in range(q):\n    (n, m) = map(int, input().split(' '))\n    res = 0\n    matr = [[] for i in range(n)]\n    for i in range(n):\n        matr[i] = list(map(int, input().split(' ')))\n    steps = n + m - 2\n    for i in range(steps // 2 + steps % 2):\n        am1 = 0\n        am0 = 0\n        for j in range(i + 1):\n            if j < n and i - j < m:\n                if matr[j][i - j] == 0:\n                    am0 += 1\n                else:\n                    am1 += 1\n            if n - 1 - j >= 0 and m - 1 - (i - j) >= 0:\n                if matr[n - 1 - j][m - 1 - (i - j)] == 0:\n                    am0 += 1\n                else:\n                    am1 += 1\n        res += min(am0, am1)\n    print(res)", "test = int(input())\nfor _ in range(test):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        col = list(map(int, input().split()))\n        mat.append(col)\n    diag = []\n    for i in range(n + m - 1):\n        if i < m:\n            (r, c) = (0, i)\n        else:\n            (r, c) = (i - m + 1, m - 1)\n        z = 0\n        o = 0\n        while r < n and c >= 0:\n            if mat[r][c] == 1:\n                o += 1\n            else:\n                z += 1\n            r += 1\n            c -= 1\n        diag.append((z, o))\n    cost = 0\n    l = 0\n    r = len(diag) - 1\n    while l < r:\n        (l0, l1) = diag[l]\n        (r0, r1) = diag[r]\n        cost += min(l0 + r0, l1 + r1)\n        l += 1\n        r -= 1\n    print(cost)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    (start, end) = (2, n + m)\n    ans = 0\n    while start < end:\n        (count0, count1) = (0, 0)\n        if n > m:\n            j = 1\n            i = start - 1\n            while i > 0 and j <= m:\n                if arr[i - 1][j - 1] == 1:\n                    count1 += 1\n                else:\n                    count0 += 1\n                i -= 1\n                j += 1\n        else:\n            i = 1\n            j = start - 1\n            while j > 0 and i <= n:\n                if arr[i - 1][j - 1] == 1:\n                    count1 += 1\n                else:\n                    count0 += 1\n                i += 1\n                j -= 1\n        if n > m:\n            j = m\n            i = end - m\n            while j > 0 and i <= n:\n                if arr[i - 1][j - 1] == 1:\n                    count1 += 1\n                else:\n                    count0 += 1\n                i += 1\n                j -= 1\n        else:\n            i = n\n            j = end - n\n            while i > 0 and j <= m:\n                if arr[i - 1][j - 1] == 1:\n                    count1 += 1\n                else:\n                    count0 += 1\n                i -= 1\n                j += 1\n        ans += min(count0, count1)\n        start += 1\n        end -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        a.append(s)\n    zero = 0\n    one = 0\n    j = 0\n    k = 0\n    i = 0\n    b = []\n    while k < n + m - 1:\n        if k < m:\n            j = k\n            i = 0\n        else:\n            i = k - m + 1\n            j = m - 1\n        one = 0\n        zero = 0\n        while i >= 0 and i < n and (j >= 0) and (j < m):\n            if a[i][j] == 1:\n                one += 1\n            else:\n                zero += 1\n            i += 1\n            j -= 1\n        b.append((one, zero))\n        k += 1\n    s = 0\n    e = n + m - 2\n    ans = 0\n    while s < e:\n        ans += min(b[s][0] + b[e][0], b[s][1] + b[e][1])\n        s += 1\n        e -= 1\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    if m >= n:\n        ans = 0\n        for i in range((m + n - 1) // 2):\n            j = 0\n            store = []\n            while j <= i and j < n:\n                (x, y) = (j, i - j)\n                store.append(mat[x][y])\n                store.append(mat[n - x - 1][m - y - 1])\n                j += 1\n            one = 0\n            zeo = 0\n            for i in store:\n                if i:\n                    one += 1\n                else:\n                    zeo += 1\n            ans += min(zeo, one)\n        print(ans)\n    else:\n        ans = 0\n        for i in range((m + n - 1) // 2):\n            j = 0\n            store = []\n            while j <= i and j < m:\n                (x, y) = (i - j, j)\n                store.append(mat[x][y])\n                store.append(mat[n - x - 1][m - y - 1])\n                j += 1\n            one = 0\n            zeo = 0\n            for i in store:\n                if i:\n                    one += 1\n                else:\n                    zeo += 1\n            ans += min(zeo, one)\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (r, s) = map(int, input().split())\n    a = [[0 for j in range(s)] for i in range(r)]\n    for i in range(r):\n        a[i] = list(map(int, input().split()))\n    br = 0\n    b = [[]] * (r + s - 1)\n    for i in range(r):\n        for j in range(s):\n            b[i + j] = b[i + j] + [a[i][j]]\n    for i in range(len(b) // 2):\n        b[i] = b[i] + b[r + s - 2 - i]\n        if 0 in b[i] and 1 in b[i]:\n            br = br + min(b[i].count(0), b[i].count(1))\n    print(br)", "from collections import defaultdict\nimport math\nR = lambda : list(map(int, input().split(' ')))\n\ndef trevers(n, m):\n    result = defaultdict(set)\n    for i in range(n):\n        for j in range(m):\n            result[i + j].add((i, j))\n    return result\n(T,) = R()\nfor t in range(T):\n    (n, m) = R()\n    grid = []\n    for i in range(n):\n        grid.append(R())\n    groups = trevers(n, m)\n    result = 0\n    for key in range(0, math.ceil((n + m - 2) / 2)):\n        union = groups[key] | groups[n + m - 2 - key]\n        ones = sum((grid[i][j] for (i, j) in union))\n        result += min(ones, len(union) - ones)\n    print(int(result))", "import math\nfor t in range(int(input())):\n    (n, m) = map(lambda x: int(x), input().split(' '))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(lambda x: int(x), input().split(' '))))\n    c = 0\n    if m % 2 == n % 2:\n        ml = (m + n) / 2 - 1\n    else:\n        ml = math.floor((m + n) / 2)\n    for i in range(int(ml)):\n        on = 0\n        tw = 0\n        for j in range(i + 1):\n            if j >= n or i - j >= m:\n                continue\n            if arr[j][i - j]:\n                on += 1\n            else:\n                tw += 1\n            if arr[n - j - 1][m - 1 - (i - j)]:\n                on += 1\n            else:\n                tw += 1\n        if on > tw:\n            c += tw\n        else:\n            c += on\n    print(c)", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = [[int(j) for j in input().split()] for _ in range(n)]\n    len_path = n + m - 2\n    half = ceil(len_path / 2)\n    dp = {}\n    for i in range(n):\n        for j in range(m):\n            dist = i + j\n            if dist >= half:\n                dist = len_path - (i + j)\n            if dist == half:\n                continue\n            if dist not in dp:\n                dp[dist] = [0, 0]\n            dp[dist][a[i][j]] += 1\n    c = 0\n    for (zero, one) in dp.values():\n        c += min(zero, one)\n    print(c)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    board = [0] * n\n    for j in range(n):\n        row = list(map(int, input().split(' ')))\n        board[j] = row\n    zeros = [0] * (m + n - 1)\n    ones = [0] * (m + n - 1)\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == 0:\n                zeros[row + col] += 1\n            else:\n                ones[row + col] += 1\n    changes = 0\n    for step in range((m + n - 1) // 2):\n        current_zeros = zeros[step] + zeros[m + n - 2 - step]\n        current_ones = ones[step] + ones[m + n - 2 - step]\n        changes += min(current_ones, current_zeros)\n    print(changes)", "for _ in range(int(input())):\n    (n, m) = map(int, input('').split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input('').split())))\n    operation = 0\n    store = []\n    for i in range(m):\n        r = 0\n        c = i\n        temp = []\n        while r < n and c >= 0:\n            temp.append(matrix[r][c])\n            r += 1\n            c -= 1\n        store.append(temp)\n    for i in range(1, n):\n        r = i\n        c = m - 1\n        temp = []\n        while r < n and c >= 0:\n            temp.append(matrix[r][c])\n            r += 1\n            c -= 1\n        store.append(temp)\n    length = len(store)\n    for i in range(len(store) // 2):\n        temp = store[i] + store[length - 1 - i]\n        operation += min(temp.count(1), temp.count(0))\n    print(operation)", "a = int(input())\nfor i in range(a):\n    b = [int(x) for x in input().split()]\n    xs = [1, 1]\n    minside = min(b[0], b[1])\n    xe = b\n    line = []\n    totalsum = 0\n    for j in range(xe[0]):\n        line.append([int(x) for x in input().split()])\n    for k in range(1, b[0] + b[1] - 1):\n        if xe[1] < xs[1] and xe[0] == xs[0] or (xs[0] > xe[0] and xe[1] == xs[1]) or xe == xs:\n            break\n        check = {}\n        time = min(k, minside)\n        for i in range(time):\n            change = line[xe[0] - 1 - i][xe[1] - 1 + i]\n            if change in check:\n                check[change] += 1\n            else:\n                check[change] = 1\n            change = line[xs[0] - 1 - i][xs[1] - 1 + i]\n            if change in check:\n                check[change] += 1\n            else:\n                check[change] = 1\n        if 0 in check:\n            if 1 in check:\n                totalsum += min(check[0], check[1])\n        if xe[1] != 1:\n            xe[1] -= 1\n        else:\n            xe[0] -= 1\n        if xs[0] != b[0]:\n            xs[0] += 1\n        else:\n            xs[1] += 1\n    check = {}\n    print(totalsum)", "from collections import defaultdict\nfrom collections import Counter\nfor t in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    a = [[int(i) for i in input().split()] for i in range(n)]\n    path_len = n + m - 2 + 1\n    forward = defaultdict(list)\n    cur = 1\n    for i in range(m):\n        for j in range(min(i + 1, n)):\n            forward[cur].append(a[j][i - j])\n        cur += 1\n    for i in range(1, n):\n        for j in range(min(m, n - i)):\n            forward[cur].append(a[i + j][m - 1 - j])\n        cur += 1\n    count = 0\n    for i in range(path_len // 2):\n        l = forward[i + 1] + forward[path_len - i]\n        cnt = Counter(l)\n        count += min(cnt[0], cnt[1])\n    print(count)", "q = int(input())\nfor T in range(q):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    bd = (n + m) // 2\n    dig = []\n    for i in range(bd):\n        dig.append([])\n    x = bd - 1\n    if (n + m) % 2 == 0:\n        x = x - 1\n    for i in range(n):\n        for j in range(m):\n            if i + j >= bd:\n                dig[x - (i + j - bd)].append(a[i][j])\n            else:\n                dig[i + j].append(a[i][j])\n    res = 0\n    if (n + m) % 2 == 0:\n        bd = bd - 1\n    for i in range(bd):\n        c1 = 0\n        sz = len(dig[i])\n        for j in range(sz):\n            c1 = c1 + dig[i][j]\n        if c1 < sz - c1:\n            res = res + c1\n        else:\n            res = res + sz - c1\n    print(res)", "t = int(input())\nfor case in range(t):\n    [n, m] = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    d = n + m - 2\n    c = (n + m - 2) // 2\n    ones = [0] * (c + 1)\n    number = [0] * (c + 1)\n    for i in range(n):\n        for j in range(m):\n            s = i + j\n            if s <= c:\n                ones[s] += a[i][j]\n                number[s] += 1\n            else:\n                ones[d - s] += a[i][j]\n                number[d - s] += 1\n    for k in range(c + 1):\n        ones[k] = min(ones[k], number[k] - ones[k])\n    if (n + m - 2) % 2 == 0:\n        ones[c] = 0\n    print(sum(ones))", "import sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\ntc = int(input())\nfor zz in range(tc):\n    (sar, col) = map(int, input().split())\n    arr = [[0] * col for i in range(sar)]\n    cont = [[] for i in range(sar + col)]\n    for i in range(sar):\n        temp = list(map(int, input().split()))\n        for j in range(col):\n            arr[i][j] = temp[j]\n    for i in range(sar):\n        for j in range(col):\n            fol = i + j + 1\n            cont[fol].append(arr[i][j])\n    repe = sar + col - 1\n    bare = repe // 2 + 1\n    ans = 0\n    for i in range(1, bare):\n        ele1 = cont[i]\n        ele2 = cont[repe - i + 1]\n        ones = ele1.count(1) + ele2.count(1)\n        zers = ele1.count(0) + ele2.count(0)\n        ans += min(ones, zers)\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        A.append(k)\n    d = defaultdict(list)\n    for i in range(n):\n        for j in range(m):\n            x = i + j\n            y = n - i - 1 + m - j - 1\n            if x != y:\n                d[min(x, y)].append(A[i][j])\n    ans = 0\n    for i in d.keys():\n        (o, z) = (0, 0)\n        for j in d[i]:\n            if j == 1:\n                o += 1\n            else:\n                z += 1\n        ans += min(z, o)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [[0] * m for i in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, input().split()))\n    ans = 0\n    brr = []\n    for s in range(n + m - 1):\n        kek = [0, 0]\n        for i in range(n):\n            j = s - i\n            if not 0 <= j < m:\n                continue\n            kek[arr[i][j]] += 1\n        brr.append(kek)\n    for i in range(len(brr) // 2):\n        ans += min(brr[i][0] + brr[-i - 1][0], brr[i][1] + brr[-i - 1][1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    k = (n + m) // 2\n    cnt = [[], []]\n    cnt[0] = [0 for _ in range(k)]\n    cnt[1] = [0 for _ in range(k)]\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    for i in range(n):\n        for j in range(m):\n            if i + j < k:\n                c = i + j\n            else:\n                c = n - 1 + m - 1 - (i + j)\n            cnt[a[i][j]][c] += 1\n    res = 0\n    for i in range(k):\n        if (n + m) % 2 == 0 and i == k - 1:\n            continue\n        res += min(cnt[0][i], cnt[1][i])\n    print(res)", "def inp():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, m) = inp()\n    a = [[-1 for j in range(m)] for i in range(m - 1)]\n    for i in range(n):\n        a.append(list(inp()))\n    a += [[-1 for j in range(m)] for i in range(m - 1)]\n    b = []\n    for i in range(m - 1, len(a)):\n        x = []\n        for j in range(m):\n            x.append(a[i - j][j])\n        b.append(x)\n    res = 0\n    for i in range(len(b) // 2):\n        x = b[i].count(0) + b[len(b) - i - 1].count(0)\n        y = b[i].count(1) + b[len(b) - i - 1].count(1)\n        res += min(x, y)\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for i in range(n)]\n    p = [[0 for j in range(m + n)] for i in range(n + m)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            y = j - 1 + i - 1\n            p[y][l[i - 1][j - 1]] += 1\n    t = n - 1 + m - 1 + 1\n    x = 0\n    y = 0\n    for i in range(t // 2):\n        q = t - i - 1\n        a = p[i][0] + p[q][0]\n        b = p[i][1] + p[q][1]\n        x += min(a, b)\n    print(x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for i in range(n)]\n    p = [[0 for j in range(m + n)] for i in range(n + m)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            y = j - 1 + i - 1\n            p[y][l[i - 1][j - 1]] += 1\n    t = n - 1 + m - 1 + 1\n    x = 0\n    y = 0\n    for i in range(t // 2):\n        q = t - i - 1\n        a = p[i][0] + p[q][0]\n        b = p[i][1] + p[q][1]\n        x += min(a, b)\n    print(x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for i in range(n)]\n    p = [[0 for j in range(m + n)] for i in range(n + m)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            y = j - 1 + i - 1\n            p[y][l[i - 1][j - 1]] += 1\n    t = n - 1 + m - 1 + 1\n    x = 0\n    y = 0\n    for i in range(t // 2):\n        q = t - i - 1\n        a = p[i][0] + p[q][0]\n        b = p[i][1] + p[q][1]\n        x += min(a, b)\n    print(x)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split(' '))\n    d0 = {}\n    d1 = {}\n    for i in range(1, n + 1):\n        l = list(map(int, input().split(' ')))\n        for j in range(1, m + 1):\n            x = i + j\n            if x not in d0:\n                d0[x] = 0\n            if x not in d1:\n                d1[x] = 0\n            d0[x] += l[j - 1] == 0\n            d1[x] += l[j - 1] == 1\n    ans = 0\n    i = 2\n    j = n + m\n    while i < j:\n        x1 = d1[i] + d1[j]\n        x2 = d0[i] + d0[j]\n        i += 1\n        j -= 1\n        ans += min(x1, x2)\n    print(ans)", "def f(n, m, A):\n    ans = 0\n    for k in range(int((n + m - 1) / 2)):\n        num = [0, 0]\n        for i in range(k + 1):\n            if 0 <= i <= n - 1 and 0 <= k - i <= m - 1:\n                num[A[i][k - i]] += 1\n            if 0 <= n - 1 - i <= n - 1 and 0 <= m - 1 - k + i <= m - 1:\n                num[A[n - 1 - i][m - 1 - k + i]] += 1\n        ans += min(num)\n    return ans\nfor i in range(int(input())):\n    [n, m] = input().split(' ')\n    (n, m) = (int(n), int(m))\n    A = []\n    for j in range(n):\n        B = input().split(' ')\n        for k in range(m):\n            B[k] = int(B[k])\n        A.append(B)\n    print(f(n, m, A))", "import sys\nfrom math import *\nfrom collections import defaultdict\nfrom queue import deque\nfrom heapq import heappush, heappop\nlines = [line.strip() for line in sys.stdin.readlines()]\nT = int(lines[0])\ncur = 1\nfor t in range(T):\n    (n, m) = map(int, lines[cur].split())\n    A = [list(map(int, line.split())) for line in lines[cur + 1:cur + 1 + n]]\n    cur += 1 + n\n    ret = 0\n    for s in range((n + m - 3) // 2 + 1):\n        t = n + m - 2 - s\n        (a, b) = (0, 0)\n        for i in range(n):\n            for j in [s - i, t - i]:\n                if 0 <= j < m:\n                    if A[i][j] == 0:\n                        a += 1\n                    else:\n                        b += 1\n        ret += min(a, b)\n    print(ret)", "from pprint import pprint\nnum_test = int(input())\nall_tests = []\nfor _ in range(num_test):\n    (n, m) = list(map(int, input().strip().split()))\n    a_test = []\n    for _ in range(n):\n        a_row = list(map(int, input().strip().split()))\n        a_test.append(a_row)\n    all_tests.append(a_test)\n\ndef get_diag(mat, diag_no):\n    cur_row = 0\n    cur_col = diag_no\n    diag = []\n    while cur_col >= 0:\n        try:\n            diag.append(mat[cur_row][cur_col])\n        except:\n            pass\n        finally:\n            cur_row += 1\n            cur_col -= 1\n    return diag\nfor mat in all_tests:\n    n = len(mat)\n    m = len(mat[0])\n    num_diag = n + m - 1\n    num_clusters = num_diag // 2\n    clusters = []\n    for i in range(num_diag):\n        diag_i = get_diag(mat, i)\n        if i < num_clusters:\n            clusters.append(diag_i)\n        elif i == (num_diag - 1) / 2:\n            continue\n        else:\n            clusters[num_diag - i - 1] += diag_i\n    final_count = 0\n    for cluster in clusters:\n        num_of_one = sum(cluster)\n        num_of_zero = len(cluster) - num_of_one\n        final_count += num_of_one if num_of_one < num_of_zero else num_of_zero\n    print(final_count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    dist1 = [[] for i in range(n + m)]\n    dist2 = [[] for i in range(n + m)]\n    for i in range(1, n + 1):\n        a = list(map(int, input().split()))\n        for (j, x) in enumerate(a):\n            dista = i - 1 + j\n            distb = n - i + (m - (j + 1))\n            if dista > distb:\n                dist2[distb].append(x)\n            elif distb > dista:\n                dist1[dista].append(x)\n    ans = 0\n    for d in range(n + m):\n        ct = 0\n        ct1 = 0\n        for v in dist1[d]:\n            if v == 1:\n                ct += 1\n            else:\n                ct1 += 1\n        for v in dist2[d]:\n            if v == 1:\n                ct += 1\n            else:\n                ct1 += 1\n        ans += min(ct, ct1)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, m) = I()\n    mt = []\n    an = 0\n    for _ in range(n):\n        mt.append(I())\n    d = {}\n    for i in range(n):\n        for j in range(m):\n            l = d.get(i + j, [0, 0])\n            if mt[i][j]:\n                l[1] += 1\n            else:\n                l[0] += 1\n            d[i + j] = list(l)\n    for i in range((n + m - 1) // 2):\n        x = d[i]\n        y = d[n + m - 2 - i]\n        an += min(x[0] + y[0], x[1] + y[1])\n    print(an)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    dist = dict()\n    for i in range(n + m - 2):\n        dist[i] = [0, 0]\n    for ii in range(n):\n        mat.append(list(map(int, input().split())))\n        for iii in range(m):\n            if 2 * (ii + iii) != n + m - 2:\n                dist[min(ii + iii, n + m - 2 - ii - iii)][mat[ii][iii]] += 1\n    sum = 0\n    for val in dist:\n        sum += min(dist[val])\n    print(sum)", "for _ in range(int(input())):\n    (n, m) = tuple(map(int, input().split()))\n    largest_dist = (n + m) // 2\n    if (n + m) % 2 == 0:\n        largest_dist -= 1\n    dist_dict = {dist: [0, 0] for dist in range(largest_dist)}\n    for i in range(1, n + 1):\n        row = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            dist = min(i + j - 2, m + n - i - j)\n            if dist < largest_dist:\n                dist_dict[dist][row[j - 1]] += 1\n    print(sum((min(dist) for dist in dist_dict.values())))", "for _ in range(int(input())):\n    (n, m) = tuple(map(int, input().split()))\n    largest_dist = (n + m) // 2\n    if (n + m) % 2 == 0:\n        largest_dist -= 1\n    dist_dict = {dist: [0, 0] for dist in range(largest_dist)}\n    for i in range(1, n + 1):\n        row = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            dist = min(i + j - 2, m + n - i - j)\n            if dist < largest_dist:\n                dist_dict[dist][row[j - 1]] += 1\n    print(sum((min(dist) for dist in dist_dict.values())))", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    d = n + m - 1\n    dz = [0] * d\n    do = [0] * d\n    for i in range(d):\n        r = 0\n        c = i\n        while c >= 0 and r < n:\n            if c < m and l[r][c] == 0:\n                dz[i] += 1\n                l[r][c] = 2\n            elif c < m:\n                do[i] += 1\n                l[r][c] = 2\n            c -= 1\n            r += 1\n    i = 0\n    j = d - 1\n    ans = 0\n    while i < d // 2:\n        ans += min(dz[i] + dz[j], do[i] + do[j])\n        i += 1\n        j -= 1\n    print(ans)"]