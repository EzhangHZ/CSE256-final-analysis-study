["for tc in range(int(input())):\n    (n, k) = input().split(' ')\n    (al, ar) = input().split(' ')\n    (bl, br) = input().split(' ')\n    (n, k, al, ar, bl, br) = (int(n), int(k), int(al), int(ar), int(bl), int(br))\n    if al > bl:\n        (al, ar, bl, br) = (bl, br, al, ar)\n    if ar < bl:\n        blank = bl - ar\n        get = br - al\n        need = blank + get\n        if k < get:\n            print(blank + k)\n        elif k <= n * get:\n            print(int(k / get) * need + min(k % get, blank) + k % get)\n        else:\n            print(n * need + (k - n * get) * 2)\n    else:\n        get = max(br, ar) - al\n        init = n * (min(br, ar) - bl)\n        if k <= init:\n            print(0)\n        elif k <= n * get:\n            print(k - init)\n        else:\n            print(n * get - init + 2 * (k - n * get))", "for tt in range(int(input())):\n    (n, z) = input().split(' ')\n    (al, ar) = input().split(' ')\n    (bl, br) = input().split(' ')\n    (n, z, al, ar, bl, br) = (int(n), int(z), int(al), int(ar), int(bl), int(br))\n    if al > bl:\n        (al, ar, bl, br) = (bl, br, al, ar)\n    if ar < bl:\n        blank = bl - ar\n        get = br - al\n        need = blank + get\n        if z < get:\n            print(blank + z)\n        elif z <= n * get:\n            print(int(z / get) * need + min(z % get, blank) + z % get)\n        else:\n            print(n * need + (z - n * get) * 2)\n    else:\n        get = max(br, ar) - al\n        init = n * (min(br, ar) - bl)\n        if z <= init:\n            print(0)\n        elif z <= n * get:\n            print(z - init)\n        else:\n            print(n * get - init + 2 * (z - n * get))", "def solve(i):\n    a = i * u\n    b = i * v\n    if k <= -a:\n        return 0\n    if k <= b:\n        return a + k\n    return a + b + 2 * (k - b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (l1, r1) = map(int, input().split())\n    (l2, r2) = map(int, input().split())\n    u = max(l1, l2) - min(r1, r2)\n    v = max(r1, r2) - min(l1, l2)\n    if u <= 0:\n        print(solve(n))\n    else:\n        print(min((solve(i) for i in range(1, n + 1))))", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    inf = 10 ** 16\n    (n, k) = MI()\n    (al, ar) = MI()\n    (bl, br) = MI()\n    if al > bl:\n        (al, ar, bl, br) = (bl, br, al, ar)\n    d = max(0, min(ar, br) - max(al, bl))\n    k -= d * n\n    if k <= 0:\n        print(0)\n        continue\n    if (al, ar) == (bl, br):\n        print(k * 2)\n        continue\n    cost1 = max(0, bl - ar)\n    score = 0\n    ans1 = cost1\n    ar = max(ar, bl)\n    cost2 = abs(al - bl) + abs(ar - br)\n    score += min(cost2, k)\n    ans1 += min(cost2, k) + (k - score) * 2\n    score = 0\n    ans2 = ans3 = inf\n    t = min(k // cost2, n)\n    if t:\n        score += t * cost2\n        ans2 = ans3 = t * (cost1 + cost2)\n        ans2 += (k - score) * 2\n        if t < n:\n            ans3 += cost1 + (k - score)\n        else:\n            ans3 = inf\n    print(min(ans1, ans2, ans3))", "for tt in range(int(input())):\n    (n, z) = input().split(' ')\n    (Al, Ar) = input().split(' ')\n    (Bl, Br) = input().split(' ')\n    (n, z, Al, Ar, Bl, Br) = (int(n), int(z), int(Al), int(Ar), int(Bl), int(Br))\n    if Al > Bl:\n        (Al, Ar, Bl, Br) = (Bl, Br, Al, Ar)\n    if Ar < Bl:\n        blank = Bl - Ar\n        get = Br - Al\n        need = blank + get\n        if z < get:\n            print(blank + z)\n        elif z <= n * get:\n            print(int(z / get) * need + min(z % get, blank) + z % get)\n        else:\n            print(n * need + (z - n * get) * 2)\n    else:\n        get = max(Br, Ar) - Al\n        init = n * (min(Br, Ar) - Bl)\n        if z <= init:\n            print(0)\n        elif z <= n * get:\n            print(z - init)\n        else:\n            print(n * get - init + 2 * (z - n * get))", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (n, k) = MI()\n    (al, ar) = MI()\n    (bl, br) = MI()\n    if al > bl:\n        (al, ar, bl, br) = (bl, br, al, ar)\n    p1 = max(0, bl - ar)\n    p2 = abs(al - bl) + abs(ar - br)\n    d = max(0, min(ar, br) - max(al, bl))\n    k -= d * n\n    if k <= 0:\n        print(0)\n        continue\n    if p2 == 0:\n        print(k * 2)\n        continue\n    if k // (p2 - p1) == 0 or p1 * 2 - p2 >= 0:\n        ans = p1\n        cost = min(p2 - p1, k)\n        ans += cost\n        k -= cost\n        if k:\n            ans += 2 * k\n    else:\n        t = min(k // (p2 - p1), n)\n        n -= t\n        k -= (p2 - p1) * t\n        ans = p2 * t\n        if n and k > p1:\n            ans += k + p1\n        else:\n            ans += 2 * k\n    print(ans)", "ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (L1, R1) = map(int, input().split())\n    (L2, R2) = map(int, input().split())\n    mr = max(R1, R2) - min(L1, L2)\n    step = 2 * mr - (R1 - L1) - (R2 - L2)\n    over = max(0, min(R1, R2) - max(L1, L2))\n    dis = max(L1, L2) - min(R1, R2) if over == 0 else 0\n    k = k - over * n\n    if k <= 0:\n        ans.append(0)\n        continue\n    mr -= over\n    res = 0\n    if k <= mr:\n        res = dis + k\n    elif mr * n >= k:\n        cnt = k // mr\n        r = k % mr\n        res += cnt * step\n        if r > dis:\n            res += dis + r\n        else:\n            res += 2 * r\n    else:\n        res += n * step + (k - mr * n) * 2\n    ans.append(res)\nprint('\\n'.join(map(str, ans)))", "def solve(i):\n    a = i * u\n    b = i * v\n    if k <= -a:\n        return 0\n    if k <= b:\n        return a + k\n    return a + b + 2 * (k - b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (l1, r1) = map(int, input().split())\n    (l2, r2) = map(int, input().split())\n    u = max(l1, l2) - min(r1, r2)\n    v = max(r1, r2) - min(l1, l2)\n    print(min((solve(i) for i in range(1, n + 1))))", "import math\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (n, k) = map(int, input().split())\n        (l1, r1) = map(int, input().split())\n        (l2, r2) = map(int, input().split())\n        if l1 > l2:\n            (l1, r1, l2, r2) = (l2, r2, l1, r1)\n        distance = max(0, l2 - r1)\n        inter = max(0, min(r1, r2) - l2)\n        move_one = max(r1, r2) - l1 - inter\n        k -= n * inter\n        if k < 0:\n            print(0)\n        else:\n            min_cost = 1e309\n            for i in range(1, n + 1, 1):\n                connection = distance * i\n                if i * move_one > k:\n                    min_cost = min(min_cost, k + connection)\n                else:\n                    min_cost = min(min_cost, connection + 2 * (k - move_one * i) + move_one * i)\n            print(min_cost)\n        t -= 1\nmain()", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, k) = nm()\n    (a, b) = nm()\n    (c, d) = nm()\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        if (d - a) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - a) * n - cur\n            print(ans + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10 ** 18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, k) = nm()\n    (a, b) = nm()\n    (c, d) = nm()\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        if (d - a) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - a) * n - cur\n            print(ans + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10 ** 18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\nT = ni()\nfor _ in range(T):\n    (n, k) = nm()\n    (a, b) = nm()\n    (c, d) = nm()\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        if (d - a) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - a) * n - cur\n            print(ans + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10 ** 18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = map(int, input().split())\n    (c, d) = map(int, input().split())\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        print(max(k - cur, 0)) if (d - a) * n > k else print((d - a) * n - cur + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10 ** 18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = map(int, input().split())\n    (c, d) = map(int, input().split())\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        print(max(k - cur, 0)) if (d - a) * n > k else print((d - a) * n - cur + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        print(max(k - cur, 0)) if (d - c) * n > k else print((d - c) * n - cur + (k - (d - c) * n) * 2)\n    else:\n        (ans, cur) = (10 ** 18, 0)\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = map(int, input().split())\n    (c, d) = map(int, input().split())\n    if d < b:\n        (a, b, c, d) = (c, d, a, b)\n    if a <= c <= b:\n        cur = (b - c) * n\n        if (d - a) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - a) * n - cur\n            print(ans + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10 ** 18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)", "for _ in range(int(input())):\n    ans = 1e+18\n    (n, k) = map(int, input().split())\n    (l1, r1) = map(int, input().split())\n    (l2, r2) = map(int, input().split())\n    if min(r1, r2) >= max(l1, l2):\n        rem = max(0, k - n * (min(r1, r2) - max(l1, l2)))\n        poss = n * (abs(l1 - l2) + abs(r1 - r2))\n        ans = min(rem, poss) + 2 * max(0, rem - poss)\n    else:\n        invest = max(l1, l2) - min(r1, r2)\n        for i in range(1, n + 1):\n            curans = invest * i\n            poss = i * (max(r1, r2) - min(l1, l2))\n            curans += min(k, poss) + 2 * max(0, k - poss)\n            ans = min(curans, ans)\n    print(ans)"]