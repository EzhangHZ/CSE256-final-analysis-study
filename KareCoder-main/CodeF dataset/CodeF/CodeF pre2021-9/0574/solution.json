["import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    MOD = int(1000000000.0 + 7)\n    s = minp()\n    n = len(s)\n    p = [0] * (n + 1)\n    pp = [1] * (n + 1)\n    p10 = 1\n    for i in range(1, n + 1):\n        p[i] = (p[i - 1] + p10 * i) % MOD\n        pp[i] = p10\n        p10 = p10 * 10 % MOD\n    res = int(s[0]) * p[n - 1] % MOD\n    for i in range(1, n):\n        res = (res + int(s[i]) * (p[n - 1 - i] + pp[n - i] * i * (i + 1) // 2)) % MOD\n    print(res)\nsolve()", "s = list(map(int, list(input())))\nmod_const = 10 ** 9 + 7\nl_const = len(s)\nres = 0\ndischarge = 1\nrepeat = (l_const - 1) * l_const // 2\nmultiplier = 0\nfor i in range(l_const - 1, -1, -1):\n    res += discharge * s[i] * repeat\n    res += multiplier * s[i]\n    multiplier += discharge * (l_const - i)\n    multiplier %= mod_const\n    discharge *= 10\n    discharge %= mod_const\n    repeat -= i\nprint(res % mod_const)", "n = input()\nm = 0\nans = 0\nb = 0\nl = len(n)\nM = int(1000000000.0 + 7)\nB = [1] * l\nfor i in range(1, l - 1):\n    B[i] = B[i - 1] * 10 % M\nfor i in range(1, l):\n    m += i\n    b += int(n[i - 1])\n    a = l - i\n    ans += B[a - 1] * (a * b + m * int(n[i]))\nprint(ans % M)", "def solve():\n    n = input()\n    n = n[::-1]\n    MOD = 10 ** 9 + 7\n    l = len(n)\n    cnt = 0\n    p = 1\n    ans = 0\n    for i in range(0, l):\n        m = l - i - 1\n        ans += cnt * (ord(n[i]) - 48)\n        ans %= MOD\n        ans += p * (m * (m + 1)) // 2 * (ord(n[i]) - 48)\n        cnt = (i + 1) * p + cnt\n        p *= 10\n        cnt %= MOD\n        p %= MOD\n    print(ans)\n    return\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "MOD = 10 ** 9 + 7\ns = input()\nans = 0\nnv = 0\nsv = 0\nfor i in range(len(s)):\n    d = ord(s[i]) - 48\n    k = (i * (i + 1) // 2 + 1) % MOD\n    ans = (ans * 10 + d * k + sv) % MOD\n    nv = (nv * 10 + d) % MOD\n    sv += nv\nans = (ans - nv) % MOD\nif ans < 0:\n    ans += MOD\nprint(ans)", "MODULUS = 10 ** 9 + 7\n\ndef solve(n):\n    l = len(n)\n    if l < 2:\n        return 0\n    result = int(n[0]) + int(n[1])\n    if l == 2:\n        return result\n    x = 0\n    y = int(n[0])\n    z = int(n[0])\n    for i in range(2, l):\n        x += i\n        result = (result * 10 % MODULUS + int(n[i]) * x % MODULUS) % MODULUS\n        result = (result + int(n[i]) % MODULUS) % MODULUS\n        y = (y * 10 % MODULUS + int(n[i - 1]) % MODULUS) % MODULUS\n        z = (z + y % MODULUS) % MODULUS\n        result = (result + z) % MODULUS\n    return result\nn = input()\nprint(solve(n))", "import sys\nfrom itertools import accumulate, chain\nMOD = 10 ** 9 + 7\n\ndef main():\n    s = sys.stdin.readline().strip()\n    digits = len(s)\n    total = 0\n    ten_to_i = list(accumulate(range(0, 10 ** 5 + 1), lambda prev, _: prev * 10 % MOD, initial=1))\n    lookup = chain([1], ten_to_i)\n    lookup = map(lambda p: p[0] * p[1] % MOD, enumerate(lookup))\n    lookup = list(accumulate(lookup))\n    for (i, c) in enumerate(reversed(s)):\n        d = int(c)\n        total += d * lookup[i]\n        total %= MOD\n        left = digits - (i + 1)\n        total += d * ten_to_i[i] * left * (left + 1) // 2\n        total %= MOD\n    print(total)\nmain()", "import sys\n\ndef redirect():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninp = input()[::-1]\nmod = 10 ** 9 + 7\nn = len(inp)\nb_1 = 0\ndp_1 = 0\nb = b_1\ndp = dp_1\ntenth = 1\nfor i in range(0, n):\n    x = (n - i - 1) * (n - i) // 2 * int(inp[i]) * tenth\n    y = b_1 * int(inp[i])\n    dp = dp_1 + x + y\n    b = b_1 + (i + 1) * tenth\n    dp %= mod\n    b %= mod\n    b_1 = b\n    dp_1 = dp\n    tenth = tenth * 10 % mod\nprint(dp)", "mod = 10 ** 9 + 7\ns = input()\nn = len(s)\ndp = [0] * n\ndp[0] = 0\nval = ord(s[0]) - ord('0')\ntotal_val = val\nfor i in range(1, n):\n    dp[i] = 10 * dp[i - 1] + (ord(s[i]) - ord('0')) * (i * (i + 1) // 2)\n    dp[i] += total_val\n    val *= 10\n    val += ord(s[i]) - ord('0')\n    total_val += val\n    val %= mod\n    total_val %= mod\n    dp[i] %= mod\nprint(dp[n - 1])", "s = input()[::-1]\nM = 10 ** 9 + 7\nr = 0\nn = len(s)\ncumu = 0\nd10 = 1\nfor d in range(n):\n    x = int(s[d])\n    g = n - 1 - d\n    ds = d10 * x * (g * (g + 1)) // 2\n    ds += cumu * x\n    r += ds\n    cumu += (d + 1) * d10\n    d10 = d10 * 10\n    d10 = d10 % M\n    cumu = cumu % M\n    r = r % M\nprint(r % M)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.buffer.readline())\n\ndef MI():\n    return map(int, sys.stdin.buffer.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.buffer.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef BI():\n    return sys.stdin.buffer.readline()[:-1]\n\ndef SI():\n    return sys.stdin.buffer.readline()[:-1].decode()\nmd = 10 ** 9 + 7\nmx = 10 ** 5 + 5\ncc = [0]\nten = [1]\nfor _ in range(mx):\n    ten.append(ten[-1] * 10 % md)\nfor i in range(mx):\n    cc.append((cc[-1] + ten[i] * (i + 1)) % md)\ns = input()\nn = len(s)\nans = 0\nfor (i, a) in enumerate(s):\n    a = int(a)\n    ans += a * (cc[n - i - 1] + ten[n - i - 1] * i * (i + 1) // 2)\n    ans %= md\nprint(ans)", "s = list(map(int, input()))\nn = len(s)\nmod = 1000000007\nleft = n * (n - 1) // 2 % mod\nright = 0\nout = 0\nfact = 1\nfor i in range(n):\n    out = (out + right * s[n - i - 1]) % mod\n    out = (out + left * fact * s[n - i - 1]) % mod\n    right = (right + (i + 1) * fact) % mod\n    left = (left - (n - i - 1)) % mod\n    fact = fact * 10 % mod\nprint(out)", "s = list(map(int, input()))\nn = len(s)\nmod = 1000000007\nleft = n * (n - 1) // 2 % mod\nright = 0\nout = 0\nfact = 1\nfor i in range(n):\n    out = (out + right * s[n - i - 1]) % mod\n    out = (out + left * fact * s[n - i - 1]) % mod\n    right = (right + (i + 1) * fact) % mod\n    left = (left - (n - i - 1)) % mod\n    fact = fact * 10 % mod\nprint(out)", "import sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter('ignore')\n\ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\nMOD = 1000000007\nn = input()\np = []\nsuff = [1]\ntotal = 1\nfor i in range(100001):\n    p.append(total)\n    total = total * 10 % MOD\nfor i in range(1, 100001):\n    x = ((i + 1) * p[i] + suff[i - 1]) % MOD\n    suff.append(x)\nl = len(n)\ntotal = 0\nfor i in range(l):\n    x = int(n[i])\n    if l - i - 2 >= 0:\n        total = (total + i * (i + 1) // 2 * x * p[l - i - 1] + x * suff[l - i - 2]) % MOD\n    else:\n        total = (total + i * (i + 1) // 2 * x * p[l - i - 1]) % MOD\nprint(total)", "s = input()[::-1]\nM = 10 ** 9 + 7\nr = 0\nn = len(s)\ncumu = 0\nd10 = 1\nfor d in range(n):\n    x = int(s[d])\n    g = n - 1 - d\n    ds = d10 * x * (g * (g + 1)) // 2\n    ds += cumu * x\n    r += ds\n    cumu += (d + 1) * d10\n    d10 = d10 * 10\n    d10 = d10 % M\n    cumu = cumu % M\n    r = r % M\nprint(r % M)", "mod = 10 ** 9 + 7\nn = input()\nL = len(n)\nsm = 0\npre = 0\ntemp = 0\ni = 0\nwhile i < L:\n    x = int(n[i])\n    sm = sm * 10 % mod\n    if temp & 1:\n        freq = temp + 1 >> 1\n        freq = freq * temp % mod\n    else:\n        freq = temp >> 1\n        freq = freq * (temp + 1) % mod\n    sm = (sm + freq * x % mod) % mod\n    sm = (sm + pre * (L - temp) % mod) % mod\n    pre = (pre + x) % mod\n    temp += 1\n    i += 1\nprint(sm)", "s = input()[::-1]\nM = 10 ** 9 + 7\nr = 0\nn = len(s)\ncumu = 0\nd10 = 1\nfor d in range(n):\n    x = int(s[d])\n    g = n - 1 - d\n    ds = d10 * x * (g * (g + 1)) // 2\n    ds += cumu * x\n    r += ds\n    cumu += (d + 1) * d10\n    d10 = d10 * 10\n    d10 = d10 % M\n    cumu = cumu % M\n    r = r % M\nprint(r % M)", "import sys\nimport math, bisect\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef neo():\n    return map(int, sys.stdin.readline().split())\n\ndef Neo():\n    return list(map(int, sys.stdin.readline().split()))\nnum = input()\nn = len(num)\nans = 0\nmod = 1000000007\ntis = [0] * n\nsim = int(num[0])\nans = 0\nfor i in range(1, n):\n    tis[i] = (n - i) * sim + i * (i + 1) // 2 * int(num[i])\n    sim = sim + int(num[i])\nten = [1]\nfor _ in range(n):\n    ten.append(ten[-1] * 10 % mod)\nfor i in range(n):\n    ans = (ans + tis[n - 1 - i] * ten[i]) % mod\nprint(ans)", "mod = 10 ** 9 + 7\ns = [int(d) for d in input()]\ndp = [0 for j in range(10 ** 5 + 10)]\nss = [0 for j in range(10 ** 5 + 10)]\nss[0] = s[0]\ncurr = s[0]\nfor i in range(1, len(s)):\n    digit = s[i]\n    dp[i] = (dp[i - 1] * 10 + int(s[i] * i * (i + 1) / 2) + ss[i - 1]) % mod\n    curr = (curr * 10 + s[i]) % mod\n    ss[i] = (ss[i - 1] + curr) % mod\nprint(dp[len(s) - 1])", "s = input()\nn = len(s)\nmod = 1000000007\nans = 0\nfact = 1\nleft = n * (n - 1) // 2 % mod\nright = 0\nfor i in range(n):\n    ans = (ans + right * int(s[n - 1 - i])) % mod\n    ans = (ans + left * fact * int(s[n - 1 - i])) % mod\n    right = (right + (i + 1) * fact) % mod\n    fact = fact * 10 % mod\n    left = (left - (n - 1 - i)) % mod\nprint(ans)", "n = list(input())\nl = len(n)\nx = 1\ny = 0\nz = 0\nmod = pow(10, 9) + 7\nans = 0\nfor i in range(l):\n    m = int(n[l - i - 1])\n    ans += x * m * ((l - i) * (l - i - 1) // 2)\n    ans %= mod\n    ans += z * m\n    ans %= mod\n    y += 1\n    z += x * y\n    z %= mod\n    x *= 10\n    x %= mod\nprint(ans)", "def main():\n    mod = 10 ** 9 + 7\n    s = input()\n    n = len(s)\n    dpl = [0] * (n + 1)\n    dpr = [0] * (n + 1)\n    pow10 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        pow10[i] = 10 * pow10[i - 1] % mod\n    for i in range(n):\n        v = int(s[i])\n        dpl[i + 1] = (10 * dpl[i] + v) % mod\n    for i in range(n):\n        v = int(s[-(i + 1)])\n        dpr[i + 1] = (pow10[i] * v + dpr[i]) % mod\n    ans = 0\n    for i in range(n + 1):\n        ans += (n - i) * dpr[i]\n        ans %= mod\n    s = 0\n    for i in range(n):\n        s += dpl[i]\n        ans += pow10[n - 1 - i] * s\n        ans %= mod\n    print(ans % mod)\n    return\nmain()", "m = 1000000007\nans = 0\nstr = input()\nn = len(str)\ndp = [0] * (n + 1)\nten = [1] * (n + 1)\nfor i in range(1, n + 1):\n    ten[i] = ten[i - 1] * 10 % m\n    dp[i] = (dp[i - 1] + i * ten[i - 1]) % m\nfor i in range(n):\n    ans = ans + (dp[n - i - 1] + (i * i + i) // 2 * ten[n - i - 1]) * int(str[i])\n    ans = ans % m\nprint(ans)", "m = 1000000007\nans = 0\nstr = input()\nn = len(str)\ndp = [0] * (n + 1)\nten = [1] * (n + 1)\nfor i in range(1, n + 1):\n    ten[i] = ten[i - 1] * 10 % m\n    dp[i] = (dp[i - 1] + i * ten[i - 1]) % m\nfor i in range(n):\n    ans = ans + (dp[n - i - 1] + (i * i + i) // 2 * ten[n - i - 1]) * int(str[i])\n    ans = ans % m\nprint(ans)", "n = list(input())\ns = 0\nn = n[::-1]\nt = len(n)\nsum = 0\ns = 1\np = 0\nb = 0\nfor i in range(t):\n    a = int(n[i])\n    if a != 0:\n        if i == 1:\n            p = 1\n        sum = (sum + a * s * (t - i - 1) * (t - i) // 2 + a * (b + i * p)) % 1000000007\n        b = (b + i * p) % 1000000007\n        p = p * 10 % 1000000007\n        s = s * 10 % 1000000007\n    else:\n        if i == 1:\n            p = 1\n        b = (b + i * p) % 1000000007\n        p = p * 10 % 1000000007\n        s = s * 10 % 1000000007\nprint(sum)", "M = 10 ** 9 + 7\narr = input()\nn = len(arr)\ntens = [1] * (n + 1)\nfor i in range(1, n + 1):\n    tens[i] = tens[i - 1] * 10 % M\ndp = [0] * n\nfor i in range(n - 2, -1, -1):\n    dp[i] = (n - i - 1) * tens[n - i - 2] + dp[i + 1]\nans = 0\nfor i in range(n):\n    dp[i] += (i * i + i) // 2 * tens[n - i - 1] % M\n    ans += int(arr[i]) * dp[i]\n    ans %= M\nprint(ans)", "s = input()\nn = len(s)\nmod = 10 ** 9 + 7\ndp = [0 for _ in range(n)]\nten = [1 for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    ten[i] = ten[i - 1] * 10 % mod\nres = 0\nfor i in range(n - 2, -1, -1):\n    dp[i] = (n - i - 1) * ten[n - i - 2] + dp[i + 1]\nfor i in range(n):\n    dp[i] += i * (i + 1) // 2 * ten[n - i - 1]\n    res += int(s[i]) * dp[i] % mod\nprint(res % mod)", "import sys\ninput = sys.stdin.readline\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nmod = 10 ** 9 + 7\n\ndef main():\n    s = input()\n    a = []\n    n = len(s) - 1\n    k = 0\n    for i in range(n - 1, -1, -1):\n        a.append(s[i])\n        k += int(s[i])\n    pow10 = []\n    c = 1\n    for i in range(n + 1):\n        pow10.append(c)\n        c *= 10\n        c %= mod\n    ans = 0\n    ind = 0\n    for i in range(n):\n        ans += pow10[i] * ((n - i - 1) * (n - i) // 2) % mod * int(a[i]) % mod\n        ans %= mod\n        ans += pow10[i - 1] * i % mod * k % mod\n        ans %= mod\n        k -= int(a[ind])\n        ind += 1\n    print(ans)\n    return\nmain()", "mod_n = 10 ** 9 + 7\nremainders = dict()\n\ndef precalc_remainders(n):\n    x = 1\n    for i in range(n + 1):\n        remainders[i] = x\n        x = x * 10 % mod_n\n\ndef get_remainder(digit, pos):\n    return remainders[pos] * digit % mod_n\n\ndef add_mod(result, value):\n    return (result + value) % mod_n\n\ndef sum_of_edits_old(num):\n    n = len(num)\n    result = 0\n    for pos in range(n):\n        digit = int(num[n - 1 - pos])\n        remainder = get_remainder(digit, pos)\n        result = add_mod(result, remainder * (n - pos - 1) * (n - pos) // 2)\n        for k in range(1, pos + 1):\n            new_remainder = get_remainder(digit, pos - k)\n            result = add_mod(result, new_remainder * (pos - k + 1))\n    return result\n\ndef sum_of_edits(num):\n    n = len(num)\n    result = 0\n    accumulated_counts = 0\n    for pos in range(n):\n        digit = int(num[n - 1 - pos])\n        remainder = get_remainder(digit, pos)\n        result = add_mod(result, remainder * (n - pos - 1) * (n - pos) // 2)\n        result = add_mod(result, digit * accumulated_counts)\n        accumulated_counts = add_mod(accumulated_counts, remainders[pos] * (pos + 1))\n    return result\nnum = input()\nprecalc_remainders(len(num))\nresult = sum_of_edits(num)\nprint(result)", "Mod = 10 ** 9 + 7\nT = str(input())\nn = len(T)\nsubstring = [0 for i in range(n)]\npow10 = [0 for j in range(n)]\npow10[0] = 1\nfor i in range(1, n):\n    pow10[i] = pow10[i - 1] * 10 % Mod\nfor i in range(n - 1):\n    substring[n - i - 2] = (substring[n - i - 1] + pow10[i] * (i + 1)) % Mod\ncount = 0\nfor i in range(n):\n    total_string = i * (i + 1) / 2 % Mod\n    contribution1 = int(total_string) * (int(T[i]) % Mod * pow10[n - i - 1]) % Mod\n    contribution2 = int(T[i]) % Mod * substring[i] % Mod\n    count += contribution1 + contribution2\nprint(int(count) % Mod)", "s = input()\nln = len(s)\nres = 0\nMOD = 10 ** 9 + 7\nleft_del = [0] * ln\nright_del = [0] * ln\nlmul = rmul = 1\nfor i in range(ln - 1, -1, -1):\n    if i < ln - 1:\n        right_del[i] = rmul * (ln - 1 - i) % MOD + right_del[i + 1]\n        rmul = rmul * 10 % MOD\n        right_del[i] = right_del[i] % MOD\n    left_del[i] = lmul\n    lmul = lmul * 10 % MOD\nfor i in range(ln):\n    v = int(s[i])\n    res += v % MOD * (i * (i + 1) // 2) % MOD * left_del[i] % MOD\n    res += v * right_del[i] % MOD\n    res = res % MOD\nprint(res)", "N = 100005\nINF = 1000000007\npwr = [0] * N\nsm = [0] * N\npwr[0] = 1\nfor i in range(1, N):\n    pwr[i] = pwr[i - 1] * 10 % INF\ns = input('')\nn = len(s)\nfor i in range(n - 1, -1, -1):\n    sm[i] = int(s[i])\n    sm[i] = (sm[i + 1] + sm[i] * pwr[n - i - 1]) % INF\nfor i in range(n - 1, -1, -1):\n    sm[i] += sm[i + 1]\n    if sm[i] >= INF:\n        sm[i] -= INF\nfor i in range(1, N - 1):\n    pwr[i] += pwr[i - 1]\n    if pwr[i] >= INF:\n        pwr[i] -= INF\nans = 0\ntmp = 0\nfor i in range(n):\n    ans = (ans + tmp * pwr[n - i - 1] + sm[i + 1]) % INF\n    tmp = (tmp * 10 + int(s[i])) % INF\nprint(ans)", "s = str(input())\nbase = 1000000007\nn = len(s)\nf = [0] * (n + 1)\nfor i in range(1, n + 1):\n    f[i] = i * (i + 1) // 2\nt = [1] * (n + 1)\nt[0] = 1\nfor i in range(1, n + 1):\n    t[i] = t[i - 1] * 10 % base\np = [0] * (n + 1)\nfor i in range(1, n):\n    p[i] = (i * t[i - 1] % base + p[i - 1]) % base\nans = 0\nfor i in range(n - 1, -1, -1):\n    ans = (ans + int(s[i]) * f[i] * t[n - i - 1] % base + int(s[i]) * p[n - 1 - i] % base) % base\nprint(ans)", "from sys import stdin\ns = stdin.readline().strip()\nn = len(s)\nif n == 1:\n    print(0)\n    exit(0)\nmod = 10 ** 9 + 7\npref = [0 for i in range(n)]\napref = [0 for i in range(n)]\nasuf = [0 for i in range(n)]\nsuf = [0 for i in range(n)]\npref[0] = int(s[0])\napref[0] = int(s[0])\nsuf[0] = int(s[-1])\nasuf[0] = int(s[-1])\nfor i in range(1, n):\n    pref[i] = (pref[i - 1] * 10 + int(s[i])) % mod\n    apref[i] = (apref[i - 1] + pref[i]) % mod\naux = 10\nx = 0\nfor i in range(n - 2, -1, -1):\n    suf[x + 1] = (suf[x] + int(s[i]) * aux) % mod\n    asuf[x + 1] = (asuf[x] + suf[x + 1]) % mod\n    x += 1\n    aux = aux * 10 % mod\nsuf = suf[::-1]\nasuf = asuf[::-1]\naux = 10\nans = 0\nfor i in range(n - 2, 0, -1):\n    ans = (ans + apref[i - 1] * aux + suf[i + 1] * i) % mod\n    aux = aux * 10 % mod\nprint((ans + apref[n - 2] + asuf[1]) % mod)", "a = input()\nln = len(a)\nans = 0\nmod = 10 ** 9 + 7\nmul = [0] * ln\nprev = 1\npow10 = [1] * ln\nfor i in range(ln):\n    mul[i] = prev * (i + 1)\n    if i > 0:\n        mul[i] += mul[i - 1]\n        pow10[i] = pow10[i - 1] * 10\n        pow10[i] %= mod\n    mul[i] %= mod\n    prev *= 10\n    prev %= mod\nans = 0\nfor i in range(ln):\n    cur = i * (i + 1) // 2\n    cur *= int(a[i])\n    cur %= mod\n    cur *= pow10[ln - i - 1]\n    ans += cur % mod\n    if i < ln - 1:\n        ans += int(a[i]) * mul[ln - i - 2] % mod\n    ans %= mod\nprint(ans % mod)", "a = input()\nln = len(a)\nans = 0\nmod = 10 ** 9 + 7\nmul = [0] * ln\nprev = 1\npow10 = [1] * ln\nfor i in range(ln):\n    mul[i] = prev * (i + 1)\n    if i > 0:\n        mul[i] += mul[i - 1]\n        pow10[i] = pow10[i - 1] * 10\n        pow10[i] %= mod\n    mul[i] %= mod\n    prev *= 10\n    prev %= mod\nans = 0\nfor i in range(ln):\n    cur = i * (i + 1) // 2\n    cur *= int(a[i])\n    cur %= mod\n    cur *= pow10[ln - i - 1]\n    ans += cur % mod\n    if i < ln - 1:\n        ans += int(a[i]) * mul[ln - i - 2] % mod\n    ans %= mod\nprint(ans % mod)", "a = input()\nn = len(a)\nmod = 1000000000 + 7\ntmod = [0 for i in range(n)]\ntmod[0] = 1\nfor i in range(1, n):\n    tmod[i] = tmod[i - 1] * 10 % mod\nst = [0 for i in range(max(n, 2))]\nst[1] = 1\nfor i in range(2, n):\n    st[i] = (st[i - 1] + tmod[i - 1]) % mod\ncu = [0 for i in range(max(n, 3))]\ncu[2] = 1\nfor i in range(3, n):\n    cu[i] = (cu[i - 1] * 10 % mod + i - 1) % mod\nans = 0\nfor k in range(n):\n    d = int(a[n - 1 - k])\n    s = 0\n    s += k * st[k] % mod\n    s -= cu[k]\n    s %= mod\n    s += (n - 1 - k) * (n - k) // 2 % mod * tmod[k]\n    s %= mod\n    ans += s * d % mod\n    ans %= mod\nprint(ans)", "mod = 1000000007\ns = input()\nn = len(s)\n(su, ans, c, x) = (0, [], 0, 0)\nfor i in s:\n    su += int(i)\nfor i in range(1, n):\n    su -= int(s[-i])\n    ss = su * i + int(s[-i]) * ((n - i) * (n - i + 1)) // 2 + c\n    if i == n - 1:\n        x = ss\n    else:\n        ans.append(ss % 10)\n    c = ss // 10\nans.reverse()\npp = str(x) + ''.join(map(str, ans))\nprint(int(pp) % mod)", "s = input()\nM = 10 ** 9 + 7\no = u = v = i = 0\nn = len(s)\nfor c in s:\n    c = int(c)\n    u += v\n    v = (10 * v + c) % M\n    o += pow(10, n - i - 1, M) * ((i * i + i) // 2 * c + u)\n    i += 1\nprint(o % M)", "s = input()\nn = len(s)\nm = 1000000007\nans = 0\nten = [1] * (n + 1)\nleft = [0] * (n + 1)\nfor i in range(1, n + 1):\n    ten[i] = ten[i - 1] * 10 % m\n    left[i] = (left[i - 1] + ten[i - 1] * i) % m\nsol = 0\nfor i in range(n):\n    sol = (sol + (left[n - i - 1] + (i * i + i * 1) // 2 * ten[n - i - 1]) * int(s[i])) % m\nprint(sol % m)", "s = input()\nn = len(s)\nnumber = int(s)\nnum = 0\nnum2 = 0\np = 1000000007\nbase = 1\nans = 0\nbase2 = 0\nnums = []\nfor i in range(n):\n    base2 += base\n    base2 %= p\n    nums.append(base2)\n    num2 += base * (ord(s[n - 1 - i]) - ord('0'))\n    num2 %= p\n    base *= 10\n    base %= p\n    ans += num2 * (n - 1 - i)\n    ans %= p\nfor i in range(n - 1):\n    num *= 10\n    num += ord(s[i]) - ord('0')\n    num %= p\n    ans += num * nums[n - 2 - i]\n    ans %= p\nprint(ans % p)", "s = input()\nM = 10 ** 9 + 7\no = u = v = 0\nn = len(s)\nfor i in range(n):\n    c = int(s[i])\n    u += v\n    v = (10 * v + c) % M\n    o += pow(10, n - i - 1, M) * ((i * i + i) // 2 * c + u)\nprint(o % M)", "s = input()\nn = len(s)\ndp = []\n(cur, pw) = (0, 1)\nmod = int(1000000000.0 + 7)\nfor i in range(1, n + 1):\n    cur = (cur + i * pw) % mod\n    pw = pw * 10 % mod\n    dp.append(cur)\nans = 0\nfor (i, x) in enumerate(s):\n    k = n - 2 - i\n    if k >= 0:\n        ans += dp[k] * int(x)\n    ans += i * (i + 1) // 2 * int(x) * pow(10, n - i - 1, mod)\n    ans %= mod\nprint(ans)", "n = input()[::-1]\nm = len(n)\ncount = 0\nmod = 10 ** 9 + 7\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef modinv(a, m):\n    (g, x, y) = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\nzz = modinv(9 ** 2, mod)\nzzz = modinv(9, mod)\nfor i in range(0, m):\n    if n[i] == '0':\n        continue\n    p = int(n[i])\n    ppp = pow(10, i, mod)\n    count += p * ppp * ((m - i - 1) * (m - i) // 2)\n    count = count % mod\n    sumt = 0\n    if i > 0:\n        sumt = p * (((i - 1) * (ppp * 10) % mod - i * ppp + 10) * zz) % mod\n        sumt += p * ((ppp - 1) * zzz) % mod\n    count = (count + sumt) % mod\nprint(int(count))", "(n, mod, tot, loc) = (input().strip(), 10 ** 9 + 7, 0, 0)\nfor (i, c) in enumerate(n[::-1]):\n    p = len(n) - 1 - i\n    tot = (tot + p * (p + 1) // 2 * int(c) * pow(10, i, mod) + loc * int(c)) % mod\n    loc = (loc + (i + 1) * pow(10, i, mod)) % mod\nprint(tot % mod)", "(n, mod, tot, loc) = (input().strip(), 10 ** 9 + 7, 0, 0)\nfor (i, c) in enumerate(n[::-1]):\n    p = len(n) - 1 - i\n    tot = (tot + p * (p + 1) // 2 * int(c) * pow(10, i, mod) + loc * int(c)) % mod\n    loc = (loc + (i + 1) * pow(10, i, mod)) % mod\nprint(tot % mod)", "string = input().strip(' ')[::-1]\nanswer = 0\nMOD = int(1000000000.0 + 7)\nright_combs = 0\nl = len(string)\nfor i in range(l):\n    digit = int(string[i])\n    num_left_elements = l - i - 1\n    answer += num_left_elements * (num_left_elements + 1) // 2 * digit * pow(10, i, MOD)\n    answer += right_combs * digit\n    answer %= MOD\n    right_combs += (i + 1) * pow(10, i, MOD)\n    right_combs %= MOD\nelse:\n    print(answer)", "(n, mod, tot, loc) = (input().strip(), 10 ** 9 + 7, 0, 0)\nfor (i, c) in enumerate(n[::-1]):\n    p = len(n) - 1 - i\n    tot = (tot + p * (p + 1) // 2 * int(c) * pow(10, i, mod) + loc * int(c)) % mod\n    loc = (loc + (i + 1) * pow(10, i, mod)) % mod\nprint(tot % mod)"]