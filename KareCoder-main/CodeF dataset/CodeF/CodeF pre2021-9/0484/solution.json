["from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    s = list(map(int, input().split()))\n    s1 = s[:l]\n    s2 = s[l:]\n    ans = 0\n    if len(s1) > len(s2):\n        (s1, s2) = (s2, s1)\n    d = Counter(s2)\n    q = Counter(s1)\n    for i in q.keys():\n        if i in d.keys():\n            if d[i] >= q[i]:\n                d[i] -= q[i]\n            else:\n                ans += q[i] - d[i]\n                d[i] = 0\n        else:\n            ans += q[i]\n    t = abs(n // 2 - l)\n    ans += t\n    x = 0\n    for i in d.keys():\n        x += d[i] // 2\n    if x < t:\n        ans += t - x\n    print(ans)", "def main():\n    (n, l, r) = map(int, input().split())\n    k = n // 2\n    c = list(map(int, input().split()))\n    (c1, c2) = (c[:l], c[l:])\n    delta = abs(r - l) // 2\n    (p1, p2) = ([0] * n, [0] * n)\n    for i in range(l):\n        p1[c1[i] - 1] += 1\n    for i in range(r):\n        p2[c2[i] - 1] += 1\n    ans = 0\n    for i in range(n):\n        while p1[i] > 0 and p2[i] > 0:\n            p1[i] -= 1\n            p2[i] -= 1\n            k -= 1\n    if l > r:\n        for i in range(n):\n            while p1[i] >= 2 and delta > 0:\n                delta -= 1\n                p1[i] -= 2\n                k -= 1\n                ans += 1\n    elif l < r:\n        for i in range(n):\n            while p2[i] >= 2 and delta > 0:\n                delta -= 1\n                p2[i] -= 2\n                k -= 1\n                ans += 1\n    if delta != 0:\n        ans += delta * 2\n        k -= delta\n    ans += k\n    print(ans)\nfor _ in range(int(input())):\n    main()", "t = int(input())\nfor case in range(1, t + 1):\n    (n, le, ri) = [int(x) for x in input().split(' ')]\n    socks = [int(x) for x in input().split(' ')]\n    ans = 0\n    left = {}\n    for sock in socks[:le]:\n        if sock in left:\n            left[sock] += 1\n        else:\n            left[sock] = 1\n    right = {}\n    for sock in socks[le:]:\n        if sock in left and left[sock] != 0:\n            left[sock] -= 1\n            le -= 1\n            ri -= 1\n        elif sock in right:\n            right[sock] += 1\n        else:\n            right[sock] = 1\n    if ri > le:\n        (le, ri) = (ri, le)\n        (left, right) = (right, left)\n    ans += ri\n    le -= ri\n    for num in left.values():\n        pairs = num // 2\n        if le - 2 * pairs < 0:\n            pairs = le // 2\n            le -= 2 * pairs\n            ans += pairs\n            break\n        else:\n            le -= 2 * pairs\n            ans += pairs\n    ans += le\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    ls = Counter(nums[:l])\n    rs = Counter(nums[l:])\n    common = ls & rs\n    ls -= common\n    rs -= common\n    ans = 0\n    (len_ls, len_rs) = (0, 0)\n    len_ls = sum(ls.values())\n    len_rs = sum(rs.values())\n    if len_ls > len_rs:\n        (len_ls, len_rs) = (len_rs, len_ls)\n        (ls, rs) = (rs, ls)\n    ans += len_ls\n    odd_rs = 0\n    for i in rs:\n        if rs[i] & 1:\n            odd_rs += 1\n    even_rs = sum(rs.values()) - odd_rs\n    if len_ls < odd_rs:\n        ans += even_rs // 2 + (odd_rs - len_ls)\n    else:\n        extra = len_ls - odd_rs\n        ans += (even_rs - extra) // 2\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, l, r) = [int(x) for x in input().split()]\n    lis = [int(x) for x in input().split()]\n    dict1 = dict()\n    dict2 = dict()\n    for i in range(l):\n        dict1[lis[i]] = dict1.get(lis[i], 0) + 1\n    for i in range(l, r + l):\n        if lis[i] in dict1 and dict1[lis[i]] > 0:\n            dict1[lis[i]] -= 1\n        else:\n            dict2[lis[i]] = dict2.get(lis[i], 0) + 1\n    cost = 0\n    sum_left = sum([x for x in dict1.values()])\n    sum_right = sum([x for x in dict2.values()])\n    if sum_left == sum_right:\n        print(sum_left)\n    elif sum_left > sum_right:\n        max_2 = sum([x // 2 for x in dict1.values()])\n        if max_2 * 2 >= sum_left - sum_right:\n            print(sum_right + (sum_left - sum_right) // 2)\n        else:\n            print(max_2 + sum_right + (sum_left - sum_right - max_2 * 2))\n    else:\n        max_2 = sum([x // 2 for x in dict2.values()])\n        if max_2 * 2 >= sum_right - sum_left:\n            print(sum_left + (sum_right - sum_left) // 2)\n        else:\n            print(max_2 + sum_left + (sum_right - sum_left - max_2 * 2))", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    (n, l, r) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    color = {}\n    for a in range(l, n):\n        if color.get(arr[a]) != None:\n            color[arr[a]] += 1\n        else:\n            color[arr[a]] = 1\n    left = {}\n    for a in range(l):\n        if left.get(arr[a]) != None:\n            left[arr[a]] += 1\n        else:\n            left[arr[a]] = 1\n    right = color.keys()\n    l = 0\n    ans = 0\n    rr = 0\n    for r in right:\n        if left.get(r) != None:\n            if left[r] < color[r]:\n                color[r] = color[r] - left[r]\n                left[r] = 0\n            else:\n                left[r] = left[r] - color[r]\n                color[r] = 0\n    l = sum(left.values())\n    rr = sum(color.values())\n    lkeys = left.keys()\n    if l == rr:\n        ans = l\n    else:\n        if l > rr:\n            for i in lkeys:\n                if left[i] > 1:\n                    while rr != l and left[i] > 1:\n                        left[i] = left[i] - 2\n                        l -= 2\n                        ans += 1\n                if l == rr:\n                    break\n        else:\n            for i in right:\n                if color[i] > 1:\n                    while rr != l and color[i] > 1:\n                        color[i] -= 2\n                        rr -= 2\n                        ans += 1\n                if l == rr:\n                    break\n        ans += abs(l - rr) // 2 + (l + rr) // 2\n    print(ans)", "import sys\nfrom typing import Counter\n\ndef solve(a, l, r):\n    left = Counter(a[:l])\n    right = Counter(a[l:])\n    money = 0\n    for k in left:\n        if k in right:\n            s = min(left[k], right[k])\n            left[k] -= s\n            right[k] -= s\n            l -= s\n            r -= s\n    if l == r:\n        return l\n    if l > r:\n        (left, right) = (right, left)\n        (l, r) = (r, l)\n    delta = r - l\n    for k in right:\n        v = right[k]\n        t = v - v % 2\n        if t < delta:\n            delta -= t\n            money += t // 2\n            right[k] -= t\n        else:\n            return money + delta // 2 + l\n    return money + l + delta\n\ndef main():\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    res = ''\n    t = int(input())\n    for _ in range(t):\n        (_, l, r) = map(int, input().split())\n        a = list(map(int, input().split()))\n        sub_res = solve(a, l, r)\n        res += str(sub_res) + '\\n'\n    print(res)\nmain()", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = n // 2\n    x = abs(l - r) // 2\n    c = Counter(a[:l])\n    d = Counter(a[l:])\n    z = 0\n    if l > r:\n        (l, r) = (r, l)\n        (c, d) = (d, c)\n    for i in c:\n        m = min(c[i], d[i])\n        d[i] -= m\n        count -= m\n    for i in d:\n        z += d[i] // 2\n    print(count + (x - min(x, z)))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = n // 2\n    x = abs(l - r) // 2\n    c = Counter(a[:l])\n    d = Counter(a[l:])\n    z = 0\n    if l > r:\n        (l, r) = (r, l)\n        (c, d) = (d, c)\n    for i in c:\n        m = min(c[i], d[i])\n        d[i] -= m\n        count -= m\n    for i in d:\n        z += d[i] // 2\n    print(count + (x - min(x, z)))", "from math import *\nsInt = lambda : int(input())\nmInt = lambda : map(int, input().split())\nlInt = lambda : list(map(int, input().split()))\nt = sInt()\nfor _ in range(t):\n    (n, l, r) = mInt()\n    a = lInt()\n    s = [0 for i in range(n)]\n    left = [0 for i in range(n)]\n    right = [0 for i in range(n)]\n    for i in range(l):\n        s[a[i] - 1] += 1\n    for i in range(l, n):\n        s[a[i] - 1] -= 1\n    for i in range(n):\n        if s[i] > 0:\n            left[i] = s[i]\n        elif s[i] < 0:\n            right[i] = -s[i]\n    ans = 0\n    ls = sum(left)\n    rs = sum(right)\n    ds = abs(ls - rs)\n    if ls > rs:\n        (left, right) = (right, left)\n        ans += rs\n    else:\n        ans += ls\n    temp = 0\n    for i in right:\n        temp += i // 2 * 2\n    if temp > ds:\n        temp = ds\n    ans += temp // 2\n    ans += ds - temp\n    print(ans)", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dictl = {}\n    for i in range(l):\n        if dictl.get(arr[i]) is None:\n            dictl[arr[i]] = 0\n        dictl[arr[i]] = dictl[arr[i]] + 1\n    dictr = {}\n    for i in range(l, n):\n        if dictr.get(arr[i]) is None:\n            dictr[arr[i]] = 0\n        dictr[arr[i]] = dictr[arr[i]] + 1\n    for k in dictl.keys():\n        if dictr.get(k) is None:\n            continue\n        mini = min(dictl[k], dictr[k])\n        dictl[k] -= mini\n        dictr[k] -= mini\n        r -= mini\n        l -= mini\n    res = min(l, r)\n    if l < r:\n        diff = (r - l) // 2\n        for k in dictr.keys():\n            if diff == 0:\n                break\n            m = min(diff, dictr[k] // 2)\n            res += m\n            diff -= m\n        res += diff * 2\n    else:\n        diff = (l - r) // 2\n        for k in dictl.keys():\n            if diff == 0:\n                break\n            m = min(diff, dictl[k] // 2)\n            res += m\n            diff -= m\n        res += diff * 2\n    print(res)", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    a = [*map(int, input().split())]\n    b = {}\n    c = {}\n    (p, q) = (l, r)\n    for i in range(n):\n        if i < l:\n            b[a[i]] = b.get(a[i], 0) + 1\n        else:\n            x = b.get(a[i], 0)\n            if x == 1:\n                p -= 1\n                q -= 1\n                del b[a[i]]\n            elif x > 1:\n                p -= 1\n                q -= 1\n                b[a[i]] -= 1\n            else:\n                c[a[i]] = c.get(a[i], 0) + 1\n    if q > p:\n        (p, q) = (q, p)\n        (b, c) = (c, b)\n    ans = q\n    p -= q\n    for i in b.values():\n        pr = i // 2\n        if p - 2 * pr < 0:\n            pr = p // 2\n            p -= 2 * pr\n            ans += pr\n            break\n        else:\n            p -= 2 * pr\n            ans += pr\n    ans += p\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    le = Counter(a[:l]) - Counter(a[l:])\n    re = Counter(a[l:]) - Counter(a[:l])\n    if sum(le.values()) < sum(re.values()):\n        (le, re) = (re, le)\n    diff = sum(le.values()) - sum(re.values())\n    cost = 0\n    for i in le.keys():\n        if le[i] >= 2:\n            if diff >= le[i]:\n                cost += le[i] // 2\n                diff -= 2 * (le[i] // 2)\n                le[i] -= 2 * (le[i] // 2)\n            else:\n                cost += diff // 2\n                le[i] -= diff\n                diff = 0\n                break\n    if diff >= 0:\n        cost += 2 * (diff // 2)\n    cost += sum(re.values())\n    print(cost)", "from collections import Counter\n\ndef solve():\n    (n, l, r) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    (left, right) = (lst[:l], lst[l:])\n    (cnt_l, cnt_r) = (Counter(left), Counter(right))\n    if r > l:\n        (l, r) = (r, l)\n        (cnt_l, cnt_r) = (cnt_r, cnt_l)\n    for i in cnt_r:\n        x = min(cnt_r[i], cnt_l.get(i, 0))\n        cnt_r[i] -= x\n        cnt_l[i] = cnt_l.get(i, 0) - x\n    (add, ans) = ((l - r) // 2, 0)\n    for i in cnt_l:\n        t = cnt_l[i] // 2\n        if t >= add:\n            cnt_l[i] -= 2 * add\n            ans += add\n            add = 0\n            break\n        cnt_l[i] -= 2 * t\n        add -= t\n        ans += t\n    ans += (sum(cnt_l.values()) + sum(cnt_r.values())) // 2 + add\n    print(ans)\nfor test in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    allsocks = list(map(int, input().split()))\n    leftsocks = sorted(allsocks[:l])\n    rightsocks = sorted(allsocks[l:])\n    a = b = 0\n    while a < l and b < r:\n        if leftsocks[a] < rightsocks[b]:\n            a += 1\n        elif leftsocks[a] > rightsocks[b]:\n            b += 1\n        else:\n            leftsocks[a] = rightsocks[b] = 0\n            a += 1\n            b += 1\n    ll = l - leftsocks.count(0)\n    lr = r - rightsocks.count(0)\n    same = 0\n    p = 0\n    if l > r and ll > 1:\n        while p < l - 1:\n            if leftsocks[p] == leftsocks[p + 1] and leftsocks[p] != 0:\n                same += 1\n                p += 2\n            else:\n                p += 1\n    if r > l and lr > 1:\n        while p < r - 1:\n            if rightsocks[p] == rightsocks[p + 1] and rightsocks[p] != 0:\n                same += 1\n                p += 2\n            else:\n                p += 1\n    print(abs(l - r) // 2 + (ll + lr) // 2 - min(abs(l - r) // 2, same))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    line = list(map(int, input().split()))\n    lr = abs(l - r) // 2\n    x = n // 2\n    s = Counter(line)\n    res = 0\n    a = Counter(line[:l])\n    b = Counter(line[l:])\n    if l > r:\n        (r, l) = (l, r)\n        (a, b) = (b, a)\n    for i in a:\n        num = min(a[i], b[i])\n        a[i] -= num\n        b[i] -= num\n        x -= num\n    for el in b:\n        res += b[el] // 2\n    print(x + (lr - min(lr, res)))", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nimport sys\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        (n, l, r) = read()\n        arr = read()\n        larr = Counter(arr[:l])\n        rarr = Counter(arr[l:])\n        for i in larr:\n            x = min(larr[i], rarr[i])\n            larr[i] -= x\n            rarr[i] -= x\n        l = sum([larr[i] for i in larr])\n        r = sum([rarr[i] for i in rarr])\n        if l < r:\n            (r, l) = (l, r)\n            (larr, rarr) = (rarr, larr)\n        trans = (l - r) // 2\n        ans = 2 * trans + r\n        for i in larr:\n            while trans > 0 and larr[i] > 1:\n                trans -= 1\n                ans -= 1\n                larr[i] -= 2\n        ans_.append(ans)\nsolve()\nfor i in ans_:\n    print(i)", "t = int(input())\nfor tk in range(t):\n    (n, l, r) = map(int, input().split())\n    c = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(l):\n        d1[c[i]] = d1.get(c[i], 0) + 1\n    for i in range(l, n):\n        d2[c[i]] = d2.get(c[i], 0) + 1\n    for i in d1.keys():\n        x = min(d1[i], d2.get(i, 0))\n        d1[i] = d1[i] - x\n        d2[i] = d2.get(i, 0) - x\n    v1 = d1.values()\n    v2 = d2.values()\n    s1 = sum(v1)\n    s2 = sum(v2)\n    s = abs(s1 - s2)\n    s = s // 2\n    if s == 0:\n        print(s1)\n    else:\n        ans = max(s1, s2)\n        if s1 > s2:\n            for i in d1:\n                a = d1[i] // 2\n                if s - a >= 0:\n                    ans -= a\n                    s -= a\n                else:\n                    ans -= s\n                    break\n                if s == 0:\n                    break\n            print(ans)\n        else:\n            for i in d2:\n                a = d2[i] // 2\n                if s - a >= 0:\n                    ans -= d2[i] // 2\n                    s -= d2[i] // 2\n                else:\n                    ans -= s\n                    break\n                if s == 0:\n                    break\n            print(ans)", "for _ in range(int(input())):\n    (n, l, r) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    (rem, a, b) = (n, [0] * (n + 1), [0] * (n + 1))\n    for i in range(l):\n        a[ar[i]] += 1\n    for i in range(l, n):\n        b[ar[i]] += 1\n    for i in range(1, n + 1):\n        x = min(a[i], b[i])\n        (a[i], b[i]) = (a[i] - x, b[i] - x)\n        rem -= 2 * x\n    if r < l:\n        (l, r) = (r, l)\n        (a, b) = (b, a)\n    (mx, t) = (sum([b[i] // 2 for i in range(1, n + 1)]), (r - l) // 2)\n    print((rem - 2 * min(t, mx)) // 2 + t)", "for _ in range(int(input())):\n    (n, l, r) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    (rem, a, b) = (n, [0] * (n + 1), [0] * (n + 1))\n    for i in range(l):\n        a[ar[i]] += 1\n    for i in range(l, n):\n        b[ar[i]] += 1\n    for i in range(1, n + 1):\n        x = min(a[i], b[i])\n        (a[i], b[i]) = (a[i] - x, b[i] - x)\n        rem -= 2 * x\n    if r < l:\n        (l, r) = (r, l)\n        (a, b) = (b, a)\n    (mx, t) = (0, (r - l) // 2)\n    for i in range(1, n + 1):\n        mx += b[i] // 2\n    print((rem - 2 * min(t, mx)) // 2 + t)", "for _ in range(int(input())):\n    (n, l, r) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    (rem, a, b) = (n, [0] * (n + 1), [0] * (n + 1))\n    for i in range(l):\n        a[ar[i]] += 1\n    for i in range(l, n):\n        b[ar[i]] += 1\n    for i in range(1, n + 1):\n        x = min(a[i], b[i])\n        (a[i], b[i]) = (a[i] - x, b[i] - x)\n        rem -= 2 * x\n    if r < l:\n        (l, r) = (r, l)\n        (a, b) = (b, a)\n    (mx, t) = (sum([b[i] // 2 for i in range(1, n + 1)]), (r - l) // 2)\n    print((rem - 2 * min(t, mx)) // 2 + t)", "import math\n\ndef func(a):\n    if a > 0:\n        return 0\n    elif a < 0:\n        return 1\n    else:\n        return 2\nt = int(input())\nfor _ in range(t):\n    (n, l, r) = list(map(int, input().split()))\n    socks = list(map(int, input().split()))\n    countarr = [0 for i in range(n)]\n    for i in range(l):\n        countarr[socks[i] - 1] += 1\n    for i in range(r):\n        countarr[socks[l + i] - 1] -= 1\n    countarr.sort(key=func)\n    sum = 0\n    psum = 0\n    for i in range(n):\n        if countarr[i] != 0:\n            sum += countarr[i]\n            psum += abs(countarr[i])\n        else:\n            break\n    dollar = psum // 2 + abs(sum) // 2\n    disc = 0\n    if sum != 0:\n        for i in range(n):\n            if countarr[i] != 0:\n                if countarr[i] * sum > 0:\n                    disc += abs(countarr[i]) // 2\n            else:\n                break\n    if disc >= abs(sum) // 2:\n        dollar -= abs(sum) // 2\n    else:\n        dollar -= disc\n    print(dollar)", "for _ in range(int(input())):\n    (n, left, right) = map(int, input().split())\n    arr1 = [0] * n\n    arr2 = [0] * n\n    for (i, x) in enumerate(map(int, input().split())):\n        if i < left:\n            arr1[x - 1] += 1\n        else:\n            arr2[x - 1] += 1\n    result = abs(left - right) // 2\n    diff_pairs = result\n    sum_pos = sum_neg = 0\n    for i in range(n):\n        diff = arr2[i] - arr1[i]\n        if diff:\n            diff_pairs_local = 0\n            if diff_pairs:\n                diff_pairs_local = min(abs(diff) // 2, diff_pairs)\n            if diff > 0:\n                sum_pos += diff\n            else:\n                sum_neg += -diff\n            if (right - left) * diff > 0:\n                diff_pairs -= diff_pairs_local\n                if diff > 0:\n                    sum_pos -= diff_pairs_local * 2\n                else:\n                    sum_neg -= diff_pairs_local * 2\n    result += max(sum_pos, sum_neg) - diff_pairs\n    print(result)", "def solve():\n    (n, l, r) = map(int, input().split())\n    c = list(map(int, input().split()))\n    lc = [0] * (n + 1)\n    rc = [0] * (n + 1)\n    res = 0\n    for i in range(l):\n        lc[c[i]] += 1\n    for i in range(l, n):\n        rc[c[i]] += 1\n    for i in range(n):\n        d = min(lc[i], rc[i])\n        lc[i] -= d\n        rc[i] -= d\n    for i in range(n + 1):\n        if lc[i] > rc[i]:\n            if l > r:\n                d = (l - r) // 2\n                give = min((lc[i] - rc[i]) // 2, d)\n                rc[i] += give\n                lc[i] -= give\n                l -= give\n                r += give\n                res += give\n        elif r > l:\n            d = (r - l) // 2\n            give = min((rc[i] - lc[i]) // 2, d)\n            r -= give\n            l += give\n            rc[i] -= give\n            lc[i] += give\n            res += give\n    res += abs(r - l) // 2\n    d = 0\n    for i in range(n + 1):\n        d += abs(lc[i] - rc[i])\n    res += d // 2 + int(d % 2 == 1)\n    print(res)\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "t = int(input())\nfor f in range(t):\n    (n, l, r) = map(int, input().split())\n    p = [int(x) for x in input().split()]\n    le = p[0:l]\n    ri = p[l:]\n    le.sort()\n    ri.sort()\n    i = 0\n    j = 0\n    le1 = []\n    ri1 = []\n    while i < l and j < r:\n        if le[i] == ri[j]:\n            i += 1\n            j += 1\n        elif le[i] > ri[j]:\n            ri1.append(ri[j])\n            j += 1\n        else:\n            le1.append(le[i])\n            i += 1\n    while i < l:\n        le1.append(le[i])\n        i += 1\n    while j < r:\n        ri1.append(ri[j])\n        j += 1\n    cost = 0\n    if l > r:\n        i = 1\n        while i < len(le1) and cost != (l - r) / 2:\n            if le1[i] == le1[i - 1]:\n                cost += 1\n                i += 2\n            else:\n                i += 1\n        print(len(le1) - cost)\n    else:\n        j = 1\n        while j < len(ri1) and cost != (r - l) / 2:\n            if ri1[j] == ri1[j - 1]:\n                cost += 1\n                j += 2\n            else:\n                j += 1\n        print(len(ri1) - cost)", "from collections import Counter\nfrom sys import stdin\n\ndef read_int():\n    return int(stdin.readline())\n\ndef read_ints():\n    return map(int, stdin.readline().split(' '))\nt = read_int()\nfor case_num in range(t):\n    (n, l, r) = read_ints()\n    c = list(read_ints())\n    lcnt = Counter()\n    rcnt = Counter()\n    for i in range(n):\n        if i < l:\n            lcnt[c[i]] += 1\n        else:\n            rcnt[c[i]] += 1\n    for key in lcnt:\n        delta = min(lcnt[key], rcnt[key])\n        rcnt[key] -= delta\n        lcnt[key] -= delta\n        l -= delta\n        r -= delta\n    ans = 0\n    for key in lcnt:\n        while l > r and lcnt[key] >= 2:\n            l -= 2\n            lcnt[key] -= 2\n            ans += 1\n    for key in rcnt:\n        while r > l and rcnt[key] >= 2:\n            r -= 2\n            rcnt[key] -= 2\n            ans += 1\n    ans += max(l, r)\n    print(ans)", "for _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    t = list(map(int, input().split()))\n    lc = [0] * (n + 1)\n    rc = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i <= l:\n            lc[t[i - 1]] += 1\n        else:\n            rc[t[i - 1]] += 1\n    for i in range(1, n + 1):\n        mn = min(lc[i], rc[i])\n        lc[i] -= mn\n        rc[i] -= mn\n        l -= mn\n        r -= mn\n    if l < r:\n        (l, r) = (r, l)\n        (lc, rc) = (rc, lc)\n    ans = 0\n    for i in range(1, n + 1):\n        extra = l - r\n        can = lc[i] // 2\n        do = min(2 * can, extra)\n        ans += do // 2\n        l -= do\n    ans += (l - r) // 2 + (l + r) // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, l, r) = map(int, input().split())\n    c = list(map(int, input().split()))\n    colors = [[0] * 2 for _ in range(n)]\n    cost = 0\n    L = c[:l]\n    R = c[l:]\n    for i in L:\n        if colors[i - 1][1] > 0:\n            colors[i - 1][1] -= 1\n        else:\n            colors[i - 1][0] += 1\n    for i in R:\n        if colors[i - 1][0] > 0:\n            colors[i - 1][0] -= 1\n        else:\n            colors[i - 1][1] += 1\n    lpair = 0\n    rpair = 0\n    for i in range(n):\n        lpair += colors[i][0] // 2\n        rpair += colors[i][1] // 2\n    lcnt = 0\n    rcnt = 0\n    for i in range(n):\n        if colors[i][0]:\n            lcnt += colors[i][0]\n        if colors[i][1]:\n            rcnt += colors[i][1]\n    cost += min(rcnt, lcnt)\n    if rcnt == lcnt:\n        print(cost)\n        continue\n    v = max(rcnt, lcnt)\n    diff = abs(rcnt - lcnt)\n    if v == lcnt:\n        if lpair * 2 >= diff:\n            cost += diff // 2\n        else:\n            cost += diff - lpair\n    elif rpair * 2 >= diff:\n        cost += diff // 2\n    else:\n        cost += diff - rpair\n    print(cost)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if r > l:\n        left = arr[l:]\n        right = arr[:l]\n    else:\n        left = arr[:l]\n        right = arr[l:]\n    leftcount = Counter(left)\n    rightcount = Counter(right)\n    result = 0\n    for (key, value) in leftcount.items():\n        rightval = rightcount[key]\n        mini = min(rightval, value)\n        rightcount[key] -= mini\n        leftcount[key] -= mini\n    difff = abs(l - r) // 2\n    litems = 0\n    ritems = 0\n    for (key, value) in leftcount.items():\n        pairs = value // 2\n        mini = min(difff, pairs)\n        result += mini\n        leftcount[key] -= mini * 2\n        difff -= mini\n        if difff < 1:\n            break\n    for i in leftcount.values():\n        litems += i\n    for j in rightcount.values():\n        ritems += j\n    oneside = (litems + ritems) // 2\n    result += abs(litems - ritems) // 2\n    result += oneside\n    print(result)", "for _ in range(int(input())):\n    (n, left, right) = [int(x) for x in input().split()]\n    all = [int(x) for x in input().split()]\n    from collections import defaultdict\n    r = defaultdict(int)\n    l = defaultdict(int)\n    for x in all[left:]:\n        r[x] += 1\n    for x in all[:left]:\n        l[x] += 1\n    sl = 0\n    sr = 0\n    steps = 0\n    for x in range(1, n + 1):\n        m = min(l[x], r[x])\n        left -= m\n        right -= m\n        l[x] -= m\n        r[x] -= m\n        sl += l[x] // 2\n        sr += r[x] // 2\n    m = min(left, right)\n    steps += m\n    left -= m\n    right -= m\n    if left == 0:\n        if sr * 2 > right:\n            steps += right // 2\n        else:\n            steps += right - sr * 2 + sr\n    elif sl * 2 > left:\n        steps += left // 2\n    else:\n        steps += left - sl * 2 + sl\n    print(steps)", "for u in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    x = []\n    x.append([0 for i in range(n)])\n    x.append([0 for i in range(n)])\n    y = [int(w) for w in input().split()]\n    for i in range(n):\n        t = y[i]\n        if i < l:\n            x[0][t - 1] += 1\n        else:\n            x[1][t - 1] += 1\n    for i in range(n):\n        t = min(x[0][i], x[1][i])\n        x[0][i] -= t\n        x[1][i] -= t\n    a1 = 0\n    a2 = 0\n    for i in range(n):\n        a1 += x[0][i]\n        a2 += x[1][i]\n    ans = 0\n    if a1 < a2:\n        i = 0\n        while i < n and a1 != a2:\n            if x[1][i] > 1:\n                a2 -= 2\n                x[1][i] -= 2\n                ans += 1\n                i -= 1\n            i += 1\n    else:\n        i = 0\n        while i < n and a1 != a2:\n            if x[0][i] > 1:\n                a1 -= 2\n                x[0][i] -= 2\n                ans += 1\n                i -= 1\n            i += 1\n    ans = ans + max(a1, a2)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, l, r) = map(int, input().split())\n    left = [0 for __ in range(n)]\n    right = [0 for __ in range(n)]\n    a = list(map(int, input().split()))\n    for i in range(l):\n        left[a[i] - 1] += 1\n    for i in range(l, n):\n        right[a[i] - 1] += 1\n    for i in range(n):\n        min_cnt = min(left[i], right[i])\n        left[i] -= min_cnt\n        right[i] -= min_cnt\n        l -= min_cnt\n        r -= min_cnt\n    ans = 0\n    if l < r:\n        (l, r) = (r, l)\n        (left, right) = (right, left)\n    for i in range(n):\n        extra = l - r\n        can_do = left[i] // 2\n        do = min(can_do * 2, extra)\n        ans += do // 2\n        l -= do\n    ans += (l - r) // 2 + (l + r) // 2\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict\nmod = 10 ** 9 + 7\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nfor t in range(IN()):\n    (n, l, r) = LI()\n    c = LI()\n    ldd = defaultdict(int)\n    rdd = defaultdict(int)\n    ll = 0\n    rr = 0\n    for i in range(n):\n        if i < l:\n            ldd[c[i]] += 1\n        else:\n            rdd[c[i]] += 1\n    sc = set(c)\n    for ele in sc:\n        it = min(ldd[ele], rdd[ele])\n        ldd[ele] -= it\n        rdd[ele] -= it\n        l -= it\n        r -= it\n    ans = 0\n    if l > r:\n        for ele in sc:\n            it = ldd[ele] // 2\n            ans += min(it, (l - r) // 2)\n            l -= it * 2\n            if l <= r:\n                break\n    elif r > l:\n        for ele in sc:\n            it = rdd[ele] // 2\n            ans += min(it, (r - l) // 2)\n            r -= it * 2\n            if r <= l:\n                break\n    ans += max(l, r)\n    print(ans)", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    (n, l, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = a[l:]\n    l = a[:l]\n    r = sorted(r)\n    l = sorted(l)\n    matched = 0\n    pass\n    pl = len(l) - 1\n    pr = len(r) - 1\n    while pr != -1 and pl != -1:\n        if r[pr] == l[pl]:\n            matched += 1\n            r.pop(pr)\n            l.pop(pl)\n            pl -= 1\n            pr -= 1\n        elif r[pr] > l[pl]:\n            pr -= 1\n        else:\n            pl -= 1\n    half = 0\n    if len(r) - len(l) >= 2:\n        for i in range(len(r) - 2, -1, -1):\n            if i < len(r) - 1 and r[i] == r[i + 1]:\n                r.pop(i + 1)\n                r.pop(i)\n                half += 1\n            if len(r) == len(l):\n                break\n    if len(l) - len(r) >= 2:\n        for i in range(len(l) - 2, -1, -1):\n            if i < len(l) - 1 and l[i] == l[i + 1]:\n                l.pop(i + 1)\n                l.pop(i)\n                half += 1\n            if len(l) == len(r):\n                break\n    print(n - matched * 2 - half - min(len(r), len(l)))\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    (n, l, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = a[l:]\n    l = a[:l]\n    r = sorted(r)\n    l = sorted(l)\n    pass\n    matched = 0\n    pl = len(l) - 1\n    pr = len(r) - 1\n    while pr != -1 and pl != -1:\n        if r[pr] == l[pl]:\n            matched += 1\n            r.pop(pr)\n            l.pop(pl)\n            pl -= 1\n            pr -= 1\n        elif r[pr] > l[pl]:\n            pr -= 1\n        else:\n            pl -= 1\n    half = 0\n    if len(r) - len(l) >= 2:\n        for i in range(len(r) - 2, -1, -1):\n            if i < len(r) - 1 and r[i] == r[i + 1]:\n                r.pop(i + 1)\n                r.pop(i)\n                half += 1\n            if len(r) == len(l):\n                break\n    if len(l) - len(r) >= 2:\n        for i in range(len(l) - 2, -1, -1):\n            if i < len(l) - 1 and l[i] == l[i + 1]:\n                l.pop(i + 1)\n                l.pop(i)\n                half += 1\n            if len(l) == len(r):\n                break\n    print(n - matched * 2 - half - min(len(r), len(l)))\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    (n, l, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = a[l:]\n    l = a[:l]\n    r.sort()\n    l.sort()\n    matched = 0\n    pass\n    pl = len(l) - 1\n    pr = len(r) - 1\n    while pr != -1 and pl != -1:\n        if r[pr] == l[pl]:\n            matched += 1\n            r.pop(pr)\n            l.pop(pl)\n            pl -= 1\n            pr -= 1\n        elif r[pr] > l[pl]:\n            pr -= 1\n        else:\n            pl -= 1\n    half = 0\n    if len(r) - len(l) >= 2:\n        for i in range(len(r) - 2, -1, -1):\n            if i < len(r) - 1 and r[i] == r[i + 1]:\n                r.pop(i + 1)\n                r.pop(i)\n                half += 1\n            if len(r) == len(l):\n                break\n    if len(l) - len(r) >= 2:\n        for i in range(len(l) - 2, -1, -1):\n            if i < len(l) - 1 and l[i] == l[i + 1]:\n                l.pop(i + 1)\n                l.pop(i)\n                half += 1\n            if len(l) == len(r):\n                break\n    print(n - matched * 2 - half - min(len(r), len(l)))\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    (n, l, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = a[l:]\n    l = a[:l]\n    r.sort()\n    l.sort()\n    matched = 0\n    pl = len(l) - 1\n    pr = len(r) - 1\n    while pr != -1 and pl != -1:\n        if r[pr] == l[pl]:\n            matched += 1\n            r.pop(pr)\n            l.pop(pl)\n            pl -= 1\n            pr -= 1\n        elif r[pr] > l[pl]:\n            pr -= 1\n        else:\n            pl -= 1\n    half = 0\n    if len(r) - len(l) >= 2:\n        for i in range(len(r) - 2, -1, -1):\n            if i < len(r) - 1 and r[i] == r[i + 1]:\n                r.pop(i + 1)\n                r.pop(i)\n                half += 1\n            if len(r) == len(l):\n                break\n    if len(l) - len(r) >= 2:\n        for i in range(len(l) - 2, -1, -1):\n            if i < len(l) - 1 and l[i] == l[i + 1]:\n                l.pop(i + 1)\n                l.pop(i)\n                half += 1\n            if len(l) == len(r):\n                break\n    print(n - matched * 2 - half - min(len(r), len(l)))\nmain()", "from collections import Counter\nr = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    aa = r()\n    arr = Counter(aa[:a])\n    brr = Counter(aa[a:])\n    for i in arr.keys():\n        try:\n            x = min(arr[i], brr[i])\n            a -= x\n            b -= x\n            arr[i] -= x\n            brr[i] -= x\n        except:\n            pass\n    if a < b:\n        (a, b) = (b, a)\n        (arr, brr) = (brr, arr)\n    need = (a - b) // 2\n    cost = need\n    for i in arr.keys():\n        if not need:\n            break\n        if arr[i] > 1:\n            x = min(need, arr[i] // 2)\n            need -= x\n            arr[i] -= x\n            try:\n                brr[i] += x\n            except:\n                brr[i] = x\n    for i in arr.keys():\n        try:\n            x = min(arr[i], brr[i])\n            arr[i] -= x\n            brr[i] -= x\n        except:\n            pass\n    while need:\n        for i in arr.keys():\n            if not need:\n                break\n            if arr[i]:\n                need -= 1\n                arr[i] -= 1\n                try:\n                    brr[i] += 1\n                except:\n                    brr[i] = 1\n    for i in arr.keys():\n        try:\n            x = min(arr[i], brr[i])\n            arr[i] -= x\n            brr[i] -= x\n        except:\n            pass\n    print(cost + sum(arr.values()))", "for z in range(int(input())):\n    (n, l, r) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    dl = {}\n    dr = {}\n    for i in range(l):\n        if arr[i] not in dl:\n            dl[arr[i]] = []\n        dl[arr[i]].append(i)\n    for i in range(l, n):\n        if arr[i] not in dr:\n            dr[arr[i]] = []\n        dr[arr[i]].append(i)\n    templ = n - r\n    tempr = n - l\n    for i in range(l):\n        if arr[i] in dr:\n            templ -= 1\n            tempr -= 1\n            temp1 = dl[arr[i]]\n            temp2 = dr[arr[i]]\n            del temp1[0]\n            del temp2[0]\n            if len(temp1) == 0:\n                del dl[arr[i]]\n            else:\n                dl[arr[i]] = temp1\n            if len(temp2) == 0:\n                del dr[arr[i]]\n            else:\n                dr[arr[i]] = temp2\n    ans = 0\n    if templ > tempr:\n        for i in dl:\n            tem = dl[i]\n            while len(tem) >= 2 and templ > tempr:\n                del tem[0]\n                del tem[0]\n                templ -= 2\n                ans += 1\n        if templ > tempr:\n            ans += templ - tempr\n            templ = tempr\n    else:\n        for i in dr:\n            tem = dr[i]\n            while len(tem) >= 2 and tempr > templ:\n                del tem[0]\n                del tem[0]\n                tempr -= 2\n                ans += 1\n        if tempr > templ:\n            ans += tempr - templ\n            tempr = templ\n    ans += templ\n    print(ans)"]