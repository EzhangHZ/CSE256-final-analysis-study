["def ints():\n    return list(map(int, input().split()))\n\ndef case():\n    (n,) = ints()\n    c = ints()\n    cx = c[::2]\n    cy = c[1::2]\n    cy.append(cy[-1])\n    res = cx[0] * n + cy[0] * n\n    mincx = cx[0]\n    sumcx = cx[0]\n    mincy = cy[0]\n    sumcy = cy[0]\n    for i in range(1, (n + 1) // 2):\n        if cx[i] < mincx:\n            mincx = cx[i]\n        sumcx += cx[i]\n        cost = sumcx + mincx * (n - i - 1) + sumcy + mincy * (n - i)\n        if cost < res:\n            res = cost\n        if cy[i] < mincy:\n            mincy = cy[i]\n        sumcy += cy[i]\n        cost = sumcx + mincx * (n - i - 1) + sumcy + mincy * (n - i - 1)\n        if cost < res:\n            res = cost\n    return res\n(t,) = ints()\nfor i in range(t):\n    print(case())", "import math\n\ndef solve(n, C):\n    sums = []\n    min_even = min_odd = min_e = min_o = math.inf\n    even_sum = even_count = odd_sum = odd_count = 0\n    for (i, c) in enumerate(C):\n        if i % 2 == 0:\n            even_sum += c\n            even_count += 1\n            min_e = min(c, min_e)\n            min_even = even_sum + min_e * (n - even_count)\n            sums.append(min_odd + min_even)\n        else:\n            odd_sum += c\n            odd_count += 1\n            min_o = min(c, min_o)\n            min_odd = odd_sum + min_o * (n - odd_count)\n            sums.append(min_even + min_odd)\n    return min(sums)\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        c = list(map(int, input().split(' ')))\n        ans.append(solve(n, c))\n    for a in ans:\n        print(a)\nmain()", "import math\n\ndef solve(n, C):\n    sums = []\n    min_even = min_odd = min_e = min_o = math.inf\n    even_sum = even_count = odd_sum = odd_count = 0\n    for (i, c) in enumerate(C):\n        if i % 2 == 0:\n            even_sum += c\n            even_count += 1\n            min_e = min(c, min_e)\n            min_even = even_sum + min_e * (n - even_count)\n            sums.append(min_odd + min_even)\n        else:\n            odd_sum += c\n            odd_count += 1\n            min_o = min(c, min_o)\n            min_odd = odd_sum + min_o * (n - odd_count)\n            sums.append(min_even + min_odd)\n    return min(sums)\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split(' ')))\n    print(solve(n, c))", "import math\n\ndef solve(n, C):\n    sums = math.inf\n    min_even = min_odd = min_e = min_o = math.inf\n    even_sum = even_count = odd_sum = odd_count = 0\n    for (i, c) in enumerate(C):\n        if i % 2 == 0:\n            even_sum += c\n            even_count += 1\n            min_e = min(c, min_e)\n            min_even = even_sum + min_e * (n - even_count)\n            if min_odd + min_even < sums:\n                sums = min_odd + min_even\n        else:\n            odd_sum += c\n            odd_count += 1\n            min_o = min(c, min_o)\n            min_odd = odd_sum + min_o * (n - odd_count)\n            if min_odd + min_even < sums:\n                sums = min_odd + min_even\n    return sums\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split(' ')))\n    print(solve(n, c))", "for _ in range(int(input())):\n    x = int(input())\n    zoo = list(map(int, input().split()))\n    ans = zoo[0] * x + zoo[1] * x\n    sum1 = zoo[0]\n    sum2 = zoo[1]\n    min1 = zoo[0]\n    min2 = zoo[1]\n    count1 = 1\n    count2 = 1\n    p2 = zoo[1] * x\n    for i in range(2, x):\n        if i % 2 == 0:\n            sum1 += zoo[i]\n            count1 += 1\n            min1 = min(min1, zoo[i])\n            p1 = sum1 + min1 * (x - count1)\n        else:\n            sum2 += zoo[i]\n            count2 += 1\n            min2 = min(min2, zoo[i])\n            p2 = sum2 + min2 * (x - count2)\n        ans = min(ans, p1 + p2)\n    print(ans)", "import math\nfrom array import array\n\ndef solve(n, C):\n    sums = []\n    min_even = math.inf\n    min_odd = math.inf\n    min_e = math.inf\n    min_o = math.inf\n    even_sum = 0\n    even_count = 0\n    odd_sum = 0\n    odd_count = 0\n    for (i, c) in enumerate(C):\n        if i % 2 == 0:\n            even_sum += c\n            even_count += 1\n            min_e = min(c, min_e)\n            min_even = even_sum + min_e * (n - even_count)\n            sums.append(min_odd + min_even)\n        else:\n            odd_sum += c\n            odd_count += 1\n            min_o = min(c, min_o)\n            min_odd = odd_sum + min_o * (n - odd_count)\n            sums.append(min_even + min_odd)\n    return min(sums)\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        c = list(map(int, input().split(' ')))\n        ans.append(solve(n, c))\n    for a in ans:\n        print(a)\nmain()", "def cum_sum(in_list):\n    for i in range(1, len(in_list)):\n        in_list[i] += in_list[i - 1]\n    return in_list\n\ndef move(n, costs):\n    cum_sum = costs[0]\n    (even_min, even_cnt) = (costs[0], 1)\n    (odd_min, odd_cnt) = (10 ** 9 + 1, 0)\n    tl_cnt_odd = n // 2\n    tl_cnt_even = n - tl_cnt_odd\n    best = None\n    for i in range(1, len(costs)):\n        cum_sum += costs[i]\n        is_even = i % 2 == 0\n        if is_even:\n            even_cnt += 1\n            if costs[i] < even_min:\n                even_min = costs[i]\n        else:\n            odd_cnt += 1\n            if costs[i] < odd_min:\n                odd_min = costs[i]\n        total = cum_sum + (n - even_cnt) * even_min + (n - odd_cnt) * odd_min\n        if best is None or total < best:\n            best = total\n    print(best)\nnum = int(input())\nfor _ in range(num):\n    n = int(input())\n    costs = [int(el) for el in input().split()]\n    move(n, costs)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = arr[0] * n + arr[1] * n\n    mi0 = arr[0]\n    mi1 = arr[1]\n    ma0 = arr[0]\n    ma1 = arr[1]\n    dp = [count]\n    mi0_count = n\n    mi1_count = n\n    for i in range(2, n):\n        if i % 2 == 0:\n            if arr[i] < mi0:\n                count -= (mi0_count - 1) * mi0\n                mi0_count -= 1\n                mi0 = arr[i]\n                count += mi0_count * mi0\n            elif arr[i] >= mi0 and arr[i] < ma0:\n                mi0_count -= 1\n                count -= mi0\n                count += arr[i]\n            else:\n                ma0 = arr[i]\n                count -= mi0\n                count += ma0\n                mi0_count -= 1\n        elif arr[i] <= mi1:\n            count -= (mi1_count - 1) * mi1\n            mi1_count -= 1\n            mi1 = arr[i]\n            count += mi1_count * mi1\n        elif arr[i] > mi1 and arr[i] < ma1:\n            mi1_count -= 1\n            count -= mi1\n            count += arr[i]\n        else:\n            ma1 = arr[i]\n            count -= mi1\n            count += ma1\n            mi1_count -= 1\n        dp.append(count)\n    print(min(dp))", "def find():\n    n = int(input())\n    mas = list(map(int, input().split()))\n    min1 = mas[0]\n    min2 = mas[1]\n    ans1 = mas[0] * n\n    ans2 = mas[1] * n\n    res = ans1 + ans2\n    s1 = mas[0]\n    s2 = mas[1]\n    j1 = j2 = 1\n    for j in range(2, len(mas)):\n        if j % 2 == 0:\n            s1 += mas[j]\n            min1 = min(min1, mas[j])\n            ans1 = s1 - min1 + min1 * (n - j1)\n            j1 += 1\n        else:\n            s2 += mas[j]\n            min2 = min(min2, mas[j])\n            ans2 = s2 - min2 + min2 * (n - j2)\n            j2 += 1\n        res = min(res, ans1 + ans2)\n    print(res)\nfor i in range(int(input())):\n    find()", "def path(arr):\n    (ne, no) = (len(arr), len(arr))\n    (me, mo) = (float('inf'), float('inf'))\n    (s, ans) = (0, float('inf'))\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            ne -= 1\n            me = min(me, arr[i])\n            s += arr[i]\n        else:\n            no -= 1\n            mo = min(mo, arr[i])\n            s += arr[i]\n        ans = min(ans, s + me * ne + mo * no)\n    return ans\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(path(lst))", "def min_cost(n: int, costs: list) -> int:\n    ans = float('inf')\n    (even, odd) = (0, 0)\n    (even_cost, odd_cost) = (0, 0)\n    (even_min, odd_min) = (float('inf'), float('inf'))\n    for cost in costs:\n        if even > odd:\n            odd += 1\n            odd_cost += cost\n            odd_min = min(odd_min, cost)\n        else:\n            even += 1\n            even_cost += cost\n            even_min = min(even_min, cost)\n        even_costs = even_cost + (n - even) * even_min\n        odd_costs = odd_cost + (n - odd) * odd_min\n        ans = min(ans, even_costs + odd_costs)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    costs = [int(cost) for cost in input().split()]\n    print(min_cost(n, costs))", "list1 = []\nfor i in range(int(input())):\n    n = int(input())\n    s = list(map(lambda x: int(x), input().split()))\n    price = n * s[0] + n * s[1]\n    (min_1, min_2) = (s[0], s[1])\n    k = n - 1\n    price1 = price\n    for j in range(2, n):\n        if j % 2 == 0:\n            price1 = price1 + s[j] - min_1\n            if s[j] < min_1:\n                price1 -= (k - 1) * (min_1 - s[j])\n                min_1 = s[j]\n        else:\n            price1 += s[j] - min_2\n            k -= 1\n            if s[j] < min_2:\n                price1 -= k * (min_2 - s[j])\n                min_2 = s[j]\n        if price1 < price:\n            price = price1\n    list1.append(price)\nprint(*list1, sep='\\n')", "def calc():\n    n = int(input())\n    c = list(map(int, input().split(' ')))\n    hor_sum = c[0]\n    hor_min = c[0]\n    ver_sum = c[1]\n    ver_min = c[1]\n    hors = 1\n    vers = 1\n    min_cost = n * c[0] + n * c[1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            hors += 1\n            hor_sum += c[i]\n            hor_min = min([hor_min, c[i]])\n        else:\n            vers += 1\n            ver_sum += c[i]\n            ver_min = min([ver_min, c[i]])\n        hor_cost = (n - hors) * hor_min + hor_sum\n        ver_cost = (n - vers) * ver_min + ver_sum\n        min_cost = min([min_cost, hor_cost + ver_cost])\n    print(min_cost)\nt = int(input())\nfor j in range(t):\n    calc()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        c = list(map(int, input().split()))\n        if n == 2:\n            print(2 * (c[0] + c[1]))\n        else:\n            o_min = c[0]\n            e_min = c[1]\n            o_sum = c[0]\n            e_sum = c[1]\n            o_min_i = 0\n            e_min_i = 1\n            ans = n * (c[0] + c[1])\n            for k in range(2, n):\n                if k % 2 == 0:\n                    if c[k] < o_min:\n                        o_min = c[k]\n                        o_min_i = k\n                    o_sum += c[k]\n                else:\n                    if c[k] < e_min:\n                        e_min = c[k]\n                        e_min_i = k\n                    e_sum += c[k]\n                ans = min(ans, e_sum + o_sum + c[e_min_i] * (n - (k + 1) // 2) + c[o_min_i] * (n - (k + 2) // 2))\n            print(ans)\nmain()", "def prob3(C, n):\n    minCost = (C[0] + C[1]) * n\n    oddMin = C[0]\n    evenMin = C[1]\n    (oddSum, evenSum) = (C[0], C[1])\n    (oddCount, evenCount) = (1, 1)\n    for i in range(2, len(C)):\n        if i % 2 == 0:\n            oddCount += 1\n            oddSum += C[i]\n            oddMin = min(oddMin, C[i])\n            minCost = min(minCost, evenSum + (n - evenCount) * evenMin + (oddSum + (n - oddCount) * oddMin))\n        else:\n            evenCount += 1\n            evenSum += C[i]\n            evenMin = min(evenMin, C[i])\n            minCost = min(minCost, evenSum + (n - evenCount) * evenMin + (oddSum + (n - oddCount) * oddMin))\n    return minCost\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    C = [int(i) for i in input().split()][:n]\n    print(prob3(C, n))", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = arr[0]\n    m = arr[1]\n    ans = arr[0] * n + arr[1] * n\n    r = arr[0] + arr[1]\n    t = 1\n    s = 1\n    for i in range(2, n):\n        r += arr[i]\n        if i % 2 == 0:\n            s += 1\n            l = min(l, arr[i])\n        else:\n            t += 1\n            m = min(m, arr[i])\n        ans = min(ans, (n - s) * l + (n - t) * m + r)\n    print(ans)", "t = int(input())\n\ndef slv(n, a):\n    (m0, m1) = (a[0], a[1])\n    (s0, s1) = (a[0], a[1])\n    (c0, c1) = (1, 1)\n    ans = m0 * n + m1 * n\n    for i in range(2, n):\n        if i % 2 == 0:\n            m0 = min(m0, a[i])\n            c0 += 1\n            s0 += a[i]\n        else:\n            m1 = min(m1, a[i])\n            c1 += 1\n            s1 += a[i]\n        ans = min(s0 + s1 + m0 * (n - c0) + m1 * (n - c1), ans)\n    return ans\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(slv(n, a))", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    C = c[0] + c[1]\n    cost = C * n\n    a = c[0]\n    b = c[1]\n    (m0, m1) = (n - 1, n - 1)\n    for k in range(2, n):\n        C += c[k]\n        if k % 2:\n            m1 -= 1\n            b = min(b, c[k])\n        else:\n            m0 -= 1\n            a = min(a, c[k])\n        cost = min(cost, C + a * m0 + b * m1)\n    print(cost)", "def main(n, l):\n    minim = n * l[0] + n * l[1]\n    min_odd = sum_odd = l[1]\n    min_even = sum_even = l[0]\n    even_count = odd_count = 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            min_even = min(min_even, l[i])\n            sum_even += l[i]\n            even_count += 1\n        else:\n            min_odd = min(min_odd, l[i])\n            sum_odd += l[i]\n            odd_count += 1\n        minim = min(minim, sum_even + (n - even_count) * min_even + sum_odd + (n - odd_count) * min_odd)\n    print(minim)\nnn = int(input())\nfor _ in range(nn):\n    n = int(input())\n    l = [int(s) for s in input().split()]\n    main(n, l)", "num_test_case = int(input())\nfor t in range(num_test_case):\n    num_segments = int(input())\n    segments = [int(x) for x in input().split(' ')]\n    min_cost_x_segment = segments[0]\n    min_cost_x = min_cost_x_segment * num_segments\n    min_cost_y_segment = segments[1]\n    min_cost_y = min_cost_y_segment * num_segments\n    ans = min_cost_x + min_cost_y\n    for k in range(2, num_segments):\n        if k % 2 == 0:\n            if segments[k] < min_cost_x_segment:\n                min_cost_x -= (num_segments - k // 2) * (min_cost_x_segment - segments[k])\n                min_cost_x_segment = segments[k]\n            else:\n                min_cost_x += segments[k] - min_cost_x_segment\n        elif segments[k] < min_cost_y_segment:\n            min_cost_y -= (num_segments - k // 2) * (min_cost_y_segment - segments[k])\n            min_cost_y_segment = segments[k]\n        else:\n            min_cost_y += segments[k] - min_cost_y_segment\n        ans = min(ans, min_cost_x + min_cost_y)\n    print(ans)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    c = tuple(map(int, sys.stdin.readline().split()))\n    (x, y) = (c[0], c[1])\n    res = [x * n + y * n]\n    r = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            if c[i] < x:\n                r += x\n                x = c[i]\n            else:\n                r += c[i]\n            res.append(x * (n - i // 2) + y * (n - i // 2 + 1) + r)\n        else:\n            if c[i] < y:\n                r += y\n                y = c[i]\n            else:\n                r += c[i]\n            res.append(x * (n - i // 2) + y * (n - i // 2) + r)\n    print(min(res))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min1 = a[0]\n    min2 = a[1]\n    temp1 = min1 * n\n    temp2 = min2 * n\n    ans = temp1 + temp2\n    sm1 = 0\n    sm2 = 0\n    counter1 = 0\n    counter2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sm1 += a[i]\n            if a[i] < min1:\n                min1 = a[i]\n            temp1 = sm1 + (n - counter1 - 1) * min1\n            counter1 += 1\n        else:\n            sm2 += a[i]\n            if a[i] < min2:\n                min2 = a[i]\n            temp2 = sm2 + (n - counter2 - 1) * min2\n            counter2 += 1\n        if temp1 + temp2 < ans:\n            ans = temp1 + temp2\n    print(ans)", "def solve(c):\n    m = min(c)\n    k = len(c)\n    return m * (n - k) + sum(c)\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    res = arr[0] * n + arr[1] * n\n    curr = res\n    (rmin, umin) = (arr[0], arr[1])\n    for (i, v) in enumerate(arr[2:], start=2):\n        if i % 2 == 0:\n            k = i // 2 + 1\n            if v < rmin:\n                curr += (n - (k - 1)) * v - (n - (k - 1)) * rmin\n                rmin = v\n            else:\n                curr += v - rmin\n        else:\n            k = (i + 1) // 2\n            if v < umin:\n                curr += (n - (k - 1)) * v - (n - (k - 1)) * umin\n                umin = v\n            else:\n                curr += v - umin\n        if curr < res:\n            res = curr\n    ans.append(res)\nfor i in ans:\n    print(i)", "def answer():\n    ans = 1e+50\n    (m1, m2) = (1e+50, 1e+50)\n    (v1, v2, c1, c2) = (0, 0, 0, 0)\n    for i in range(n):\n        if i & 1:\n            m1 = min(m1, a[i])\n            v1 += a[i]\n            c1 += 1\n        else:\n            m2 = min(m2, a[i])\n            v2 += a[i]\n            c2 += 1\n        ans = min(ans, v1 + v2 + m1 * (n - c1) + m2 * (n - c2))\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer())", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nfor _ in range(II()):\n    n = II()\n    a = LI()\n    ans = n * a[0] + n * a[1]\n    min1 = a[0]\n    car1 = n - 1\n    min2 = a[1]\n    car2 = n - 1\n    anslist = [ans]\n    for i in range(2, n):\n        if i % 2 == 0:\n            if a[i] < min1:\n                ans -= car1 * (min1 - a[i])\n                min1 = a[i]\n            else:\n                ans += a[i]\n                ans -= min1\n            car1 -= 1\n            anslist.append(ans)\n        else:\n            if a[i] < min2:\n                ans -= car2 * (min2 - a[i])\n                min2 = a[i]\n            else:\n                ans += a[i]\n                ans -= min2\n            car2 -= 1\n            anslist.append(ans)\n    print(min(anslist))", "for testis in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    (x, y) = (c[0], c[1])\n    res = [x * n + y * n]\n    r = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            if c[i] < x:\n                r += x\n                x = c[i]\n            else:\n                r += c[i]\n            res.append(x * (n - i // 2) + y * (n - i // 2 + 1) + r)\n        else:\n            if c[i] < y:\n                r += y\n                y = c[i]\n            else:\n                r += c[i]\n            res.append(x * (n - i // 2) + y * (n - i // 2) + r)\n    print(min(res))", "for i in range(int(input())):\n    n = int(input())\n    cost = list(map(int, input().split()))\n    nx = n\n    ny = n\n    mx = float('inf')\n    my = float('inf')\n    s = 0\n    ans = float('inf')\n    for i in range(n):\n        if i % 2 == 0:\n            ny = ny - 1\n            my = min(my, cost[i])\n        else:\n            nx = nx - 1\n            mx = min(mx, cost[i])\n        s = s + cost[i]\n        ans = min(ans, s + my * ny + mx * nx)\n    print(ans)", "for ad in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m1 = l[0]\n    m2 = l[1]\n    ans = m1 * n + m2 * n\n    x = ans\n    for i in range(2, n):\n        if i % 2 == 0:\n            if l[i] < m1:\n                ans -= m1 * (n - i // 2)\n                m1 = l[i]\n                ans += m1 * (n - i // 2)\n            else:\n                ans += l[i] - m1\n        elif l[i] < m2:\n            ans -= m2 * (n - i // 2)\n            m2 = l[i]\n            ans += m2 * (n - i // 2)\n        else:\n            ans += l[i] - m2\n        x = min(x, ans)\n    print(x)", "import sys\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef f(n, costs):\n    odd_sum = 0\n    even_sum = 0\n    odd_cnt = 0\n    even_cnt = 0\n    odd_mn = float('inf')\n    even_mn = float('inf')\n    ans = float('inf')\n    for i in range(len(costs)):\n        if i % 2 == 0:\n            even_sum += costs[i]\n            even_mn = min(even_mn, costs[i])\n            even_cnt += 1\n        else:\n            odd_sum += costs[i]\n            odd_mn = min(odd_mn, costs[i])\n            odd_cnt += 1\n        cost = odd_sum - odd_mn + (n - odd_cnt + 1) * odd_mn + even_sum - even_mn + (n - even_cnt + 1) * even_mn\n        ans = min(ans, cost)\n    return ans\ninput = load_sys()\nfor i in range(1, len(input), 2):\n    n = int(input[i])\n    costs = [int(x) for x in input[i + 1].split()]\n    print(f(n, costs))", "def a():\n    t = int(input())\n    o = []\n    for i in range(t):\n        n = int(input())\n        c = list(map(int, input().split()))\n        x = [c[0]]\n        y = [c[1]]\n        mx = c[0]\n        my = c[1]\n        sx = c[0]\n        sy = c[1]\n        r = c[0] * n + c[1] * n\n        for j in range(2, n):\n            if j % 2 == 0:\n                x.append(c[j])\n                sx += c[j]\n                mx = min(mx, c[j])\n            else:\n                y.append(c[j])\n                sy += c[j]\n                my = min(my, c[j])\n            temp = sx + (n - len(x)) * mx\n            temp += sy + (n - len(y)) * my\n            r = min(r, temp)\n        o.append(r)\n    for i in o:\n        print(i)\na()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m0 = a[0]\n    m1 = a[1]\n    (s0, s1) = (a[0], a[1])\n    (m, s) = ([0] * n, [0] * n)\n    (m[0], m[1]) = (m0, m1)\n    (s[0], s[1]) = (s0, s1)\n    for i in range(2, n):\n        if i % 2:\n            if a[i] < m1:\n                m1 = a[i]\n            m[i] = m1\n        else:\n            if a[i] < m0:\n                m0 = a[i]\n            m[i] = m0\n        s[i] = s[i - 2] + a[i]\n    cos = [0] * n\n    for i in range(n):\n        if i % 2:\n            cos[i] = s[i] * 1 + m[i] * (n - (i + 1) // 2)\n        else:\n            cos[i] = s[i] * 1 + m[i] * (n - i // 2 - 1)\n    p = cos[0] + cos[1]\n    for i in range(n - 1):\n        c = cos[i] + cos[i + 1]\n        if c < p:\n            p = c\n    print(p)\n\ndef main():\n    for ii in range(int(input())):\n        solve()\nmain()", "def main():\n    for ii in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        odd_sum = a[1]\n        even_sum = a[0]\n        (xo, xe) = (a[1], a[0])\n        c = xo * n + xe * n\n        for i in range(2, n):\n            if i % 2:\n                odd_sum += a[i]\n                xo = min(a[i], xo)\n            else:\n                even_sum += a[i]\n                xe = min(xe, a[i])\n            cost = odd_sum + xo * (n - (i + 1) // 2) + even_sum + xe * (n - i // 2 - 1)\n            c = min(c, cost)\n        print(c)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    zoz = [int(j) for j in input().split()]\n    ma = 10 ** 9 + 1\n    mb = 10 ** 9 + 1\n    cs = 0\n    fin = []\n    for j in range(n):\n        if j % 2 == 0:\n            if zoz[j] < ma:\n                if ma != 10 ** 9 + 1:\n                    cs += ma\n                ma = zoz[j]\n            else:\n                cs += zoz[j]\n            if j >= 1:\n                fin.append(cs + ma * (n - j // 2) + mb * (n - (j - 1) // 2))\n        else:\n            if zoz[j] < mb:\n                if mb != 10 ** 9 + 1:\n                    cs += mb\n                mb = zoz[j]\n            else:\n                cs += zoz[j]\n            if j >= 1:\n                fin.append(cs + ma * (n - j // 2) + mb * (n - (j - 1) // 2))\n    print(min(fin))", "def calMinCost(C, n):\n    MinUCost = [0] * n\n    MinDCost = [0] * n\n    uMinCost = dMinCost = 10 ** 10\n    for i in range(n):\n        if i % 2 == 0:\n            uMinCost = min(C[i], uMinCost)\n        else:\n            dMinCost = min(C[i], dMinCost)\n        MinUCost[i] = uMinCost\n        MinDCost[i] = dMinCost\n    minCost = 10 ** 15\n    uCostAdd = 0\n    dCostAdd = 0\n    for i in range(n):\n        uNext = (i + 2) // 2\n        dNex = i + 1 - uNext\n        if i % 2 == 0:\n            uCostAdd = C[i] + uCostAdd\n        else:\n            dCostAdd = C[i] + dCostAdd\n        cotTotal = MinUCost[i] * (n - uNext) + uCostAdd + MinDCost[i] * (n - dNex) + dCostAdd\n        minCost = min(cotTotal, minCost)\n    return minCost\nnumTest = int(input())\nfor i in range(numTest):\n    cn = int(input())\n    data = input().split()\n    finalData = [int(x) for x in data]\n    result = calMinCost(finalData, cn)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    lh = []\n    lv = []\n    for i in range(0, n, 2):\n        lh.append(l[i])\n    for i in range(1, n, 2):\n        lv.append(l[i])\n    minans = 10000000000\n    minh = 100000000000\n    minv = 100000000000\n    sumh = 0\n    sumv = 0\n    count = 10 ** 16\n    counth = 100000000000\n    countv = 100000000000\n    minv1 = 100000000000\n    for i in range(len(lv)):\n        minh = min(minh, lh[i])\n        sumh += lh[i]\n        counth = minh * (n - i - 1) + sumh\n        minv1 = minv\n        minv = min(minv, lv[i])\n        sumv += lv[i]\n        if i == 0:\n            countv = minv * (n - i - 1) + sumv\n        else:\n            countv = min(minv * (n - i - 1) + sumv, minv1 * (n - i) + sumv - lv[i])\n        count = min(count, counth + countv)\n    if len(lh) != len(lv):\n        count = min(count, sum(lh) + (n - len(lh)) * min(lh) + sum(lv) + (n - len(lv)) * min(lv))\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m1 = a[0]\n    m2 = a[1]\n    s1 = a[0]\n    s2 = 0\n    z1 = 1\n    z2 = 0\n    min_cost = m1 * n + m2 * n\n    for i in range(1, n):\n        if i % 2 == 1:\n            if a[i] < m2:\n                m2 = a[i]\n                cost = s1 + (n - z1) * m1 + s2 + (n - z2) * m2\n                if cost < min_cost:\n                    min_cost = cost\n            s2 += a[i]\n            z2 += 1\n        if i % 2 == 0:\n            if a[i] < m1:\n                m1 = a[i]\n                cost = s1 + (n - z1) * m1 + s2 + (n - z2) * m2\n                if cost < min_cost:\n                    min_cost = cost\n            s1 += a[i]\n            z1 += 1\n    print(min_cost)", "def local_ans(n, count, _min, _sum):\n    return (n - count + 1) * _min + (_sum - _min)\n\ndef solve(n, cc):\n    min_ans = None\n    _next = 2\n    count1 = 1\n    min1 = cc[0]\n    sum1 = cc[0]\n    count2 = 0\n    min2 = cc[1]\n    sum2 = 0\n    for i in range(1, len(cc)):\n        if _next == 2:\n            count2 += 1\n            min2 = min(min2, cc[i])\n            sum2 += cc[i]\n            _next = 1\n        else:\n            count1 += 1\n            min1 = min(min1, cc[i])\n            sum1 += cc[i]\n            _next = 2\n        new_ans = local_ans(n, count1, min1, sum1) + local_ans(n, count2, min2, sum2)\n        if min_ans is None or min_ans > new_ans:\n            min_ans = new_ans\n    return min_ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        cc = [int(x) for x in input().split()]\n        print(solve(n, cc))\nmain()", "import math\n\ndef main():\n    n = int(input())\n    c = list(map(int, input().split()))\n    mins = [math.inf] * 2\n    reminders = [n] * 2\n    summ = 0\n    ans = math.inf\n    for i in range(n):\n        mins[i % 2] = min(mins[i % 2], c[i])\n        reminders[i % 2] -= 1\n        summ += c[i]\n        ans = min(ans, summ + reminders[0] * mins[0] + reminders[1] * mins[1])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    main()", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().strip().split()))\n    total = c[0] + c[1]\n    no_odd = 1\n    no_even = 1\n    min_odd = c[0]\n    min_even = c[1]\n    ans = total + (n - no_odd) * min_odd + (n - no_even) * min_even\n    for i in range(2, n):\n        total += c[i]\n        if i % 2 == 0:\n            no_odd += 1\n            min_odd = min(min_odd, c[i])\n        else:\n            no_even += 1\n            min_even = min(min_even, c[i])\n        ans = min(ans, total + (n - no_odd) * min_odd + (n - no_even) * min_even)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    c = list(map(int, input().split()))\n    (up, right) = (c[0], 0)\n    (mup, mright) = (c[0], 2000000000.0)\n    (cup, cright) = (1, 0)\n    M = 9e+18\n    for i in range(1, N):\n        if i & 1:\n            right += c[i]\n            cright += 1\n            mright = min(mright, c[i])\n        else:\n            up += c[i]\n            cup += 1\n            mup = min(mup, c[i])\n        S = up + right\n        S += mup * (N - cup)\n        S += mright * (N - cright)\n        M = min(M, S)\n    print(M)", "def solve(C, n):\n    MUC = [0] * n\n    MDC = [0] * n\n    minUCost = minDCost = 10 ** 10\n    for i in range(n):\n        if i % 2 == 0:\n            minUCost = min(C[i], minUCost)\n        else:\n            minDCost = min(C[i], minDCost)\n        MUC[i] = minUCost\n        MDC[i] = minDCost\n    minTotalCost = 10 ** 15\n    uStepCostSum = dStepCostSum = 0\n    for i in range(n):\n        uSteps = (i + 2) // 2\n        dSteps = i + 1 - uSteps\n        if i % 2 == 0:\n            uStepCostSum += C[i]\n        else:\n            dStepCostSum += C[i]\n        totalCost = MUC[i] * (n - uSteps) + uStepCostSum + MDC[i] * (n - dSteps) + dStepCostSum\n        minTotalCost = min(totalCost, minTotalCost)\n    return minTotalCost\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    C = list(map(int, input().split()))\n    result = solve(C, n)\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mc = a[0] * n + a[1] * n\n    mec = a[0]\n    moc = a[1]\n    es = a[0]\n    os = 0\n    ec = 1\n    oc = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            mec = min(mec, a[i])\n            es += a[i]\n            ec += 1\n        else:\n            moc = min(moc, a[i])\n            os += a[i]\n            oc += 1\n        mc = min(mc, es + (n - ec) * mec + os + (n - oc) * moc)\n    print(mc)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    cx = c[1] * n\n    cy = c[0] * n\n    odd_sum = min_odd = c[1]\n    even_sum = min_even = c[0]\n    odds = evens = 1\n    min_cost = cx + cy\n    for i in range(2, n):\n        if i & 1:\n            odds += 1\n            odd_sum += c[i]\n            min_odd = min(min_odd, c[i])\n            rest_sum = odd_sum - min_odd\n            rem_dist = n - odds + 1\n            cx = rest_sum + rem_dist * min_odd\n        else:\n            evens += 1\n            even_sum += c[i]\n            min_even = min(min_even, c[i])\n            rest_sum = even_sum - min_even\n            rem_dist = n - evens + 1\n            cy = rest_sum + rem_dist * min_even\n        min_cost = min(min_cost, cx + cy)\n    print(min_cost)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    rmin = rtot = c[0]\n    umin = utot = c[1]\n    hprice = rmin * n\n    uprice = umin * n\n    ans = hprice + uprice\n    for i in range(2, n):\n        if i & 1:\n            utot += c[i]\n            umin = min(umin, c[i])\n            uprice = utot + umin * (n - i // 2 - 1)\n            ans = min(ans, hprice + uprice)\n        else:\n            rtot += c[i]\n            rmin = min(rmin, c[i])\n            hprice = rtot + rmin * (n - i // 2 - 1)\n            ans = min(ans, hprice + uprice)\n    print(ans)", "for _ in range(int(input())):\n    (n, clist1, clist2, p1, p) = (int(input()), [], [], 0, 0)\n    clist = list(map(int, input().split(' ')))\n    m1 = m2 = ans1 = float('inf')\n    for i in range(n):\n        if i & 1:\n            clist1.append(clist[i])\n            m1 = min(m1, clist[i])\n        else:\n            clist2.append(clist[i])\n            m2 = min(m2, clist[i])\n        p += clist[i]\n        ans1 = min(ans1, p + m1 * (n - len(clist1)) + m2 * (n - len(clist2)))\n    print(ans1)", "import math\n\ndef g(n, arr):\n    summ1 = 0\n    summ2 = 0\n    prefixsumm = [0] * len(arr)\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            summ1 += arr[i]\n            prefixsumm[i] = summ1\n        else:\n            summ2 += arr[i]\n            prefixsumm[i] = summ2\n    result = math.inf\n    mineven = math.inf\n    minodd = math.inf\n    for i in range(0, len(prefixsumm) - 1):\n        if i % 2 == 0:\n            if arr[i] < mineven:\n                mineven = arr[i]\n            if arr[i + 1] < minodd:\n                minodd = arr[i + 1]\n            counteven = (i + 2) // 2\n            countodd = counteven\n            cal = prefixsumm[i] + (n - counteven) * mineven + prefixsumm[i + 1] + (n - countodd) * minodd\n            if result > cal:\n                result = cal\n        else:\n            if arr[i + 1] < mineven:\n                mineven = arr[i + 1]\n            if arr[i] < minodd:\n                minodd = arr[i]\n            counteven = (i + 3) // 2\n            countodd = counteven - 1\n            cal = prefixsumm[i] + (n - countodd) * minodd + prefixsumm[i + 1] + (n - counteven) * mineven\n            if result > cal:\n                result = cal\n    print(result)\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    g(n, arr)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    tmp = 0\n    (nx, ny) = (n, n)\n    min_x = math.inf\n    min_y = math.inf\n    cost = 0\n    ans = math.inf\n    c = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        tmp = c[i - 1]\n        if i & 1:\n            min_x = min(min_x, tmp)\n            nx -= 1\n        else:\n            min_y = min(min_y, tmp)\n            ny -= 1\n        cost += tmp\n        if i > 1:\n            ans = min(ans, cost + nx * min_x + ny * min_y)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mc = a[0] * n + a[1] * n\n    mec = a[0]\n    moc = a[1]\n    es = a[0]\n    os = 0\n    ec = 1\n    oc = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            mec = min(mec, a[i])\n            es += a[i]\n            ec += 1\n        else:\n            moc = min(moc, a[i])\n            os += a[i]\n            oc += 1\n        mc = min(mc, es + (n - ec) * mec + os + (n - oc) * moc)\n    print(mc)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    n1 = 0\n    n2 = 0\n    mx = float('inf')\n    my = float('inf')\n    cst = float('inf')\n    sum = 0\n    for i in range(1, n + 1):\n        sum += c[i - 1]\n        if i % 2 == 0:\n            n1 += 1\n            mx = min(mx, c[i - 1])\n        else:\n            n2 += 1\n            my = min(my, c[i - 1])\n        cst = min(cst, sum + mx * (n - n1) + my * (n - n2))\n    print(cst)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil, sqrt\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (mna, mnb) = (l[0], l[1])\n    (cna, cnb) = (1, 1)\n    (sma, smb) = (l[0], l[1])\n    ans = n * mna + n * mnb\n    for i in range(2, n):\n        if i & 1:\n            smb += l[i]\n            cnb += 1\n            mnb = min(mnb, l[i])\n        else:\n            sma += l[i]\n            cna += 1\n            mna = min(mna, l[i])\n        ans = min(ans, sma + (n - cna) * mna + smb + (n - cnb) * mnb)\n    print(ans)", "def calMinCost(C, n):\n    MinUCost = [0] * n\n    MinRCost = [0] * n\n    uMinCost = rMinCost = 10 ** 10\n    for i in range(n):\n        if i % 2 == 0:\n            uMinCost = min(C[i], uMinCost)\n        else:\n            rMinCost = min(C[i], rMinCost)\n        MinUCost[i] = uMinCost\n        MinRCost[i] = rMinCost\n    minCost = 10 ** 15\n    uCostAdd = 0\n    rCostAdd = 0\n    for i in range(n):\n        uNext = (i + 2) // 2\n        rNext = i + 1 - uNext\n        if i % 2 == 0:\n            uCostAdd = C[i] + uCostAdd\n        else:\n            rCostAdd = C[i] + rCostAdd\n        cotTotal = MinUCost[i] * (n - uNext) + uCostAdd + MinRCost[i] * (n - rNext) + rCostAdd\n        minCost = min(cotTotal, minCost)\n    return minCost\nnumTest = int(input())\nfor i in range(numTest):\n    cn = int(input())\n    data = input().split()\n    finalData = [int(x) for x in data]\n    result = calMinCost(finalData, cn)\n    print(result)", "for x in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    a = [arr[0]]\n    b = [arr[1]]\n    amin = arr[0]\n    bmin = arr[1]\n    asum = arr[0]\n    bsum = arr[1]\n    alen = 1\n    blen = 1\n    help = bmin * (n - blen) + bsum + amin * (n - alen) + asum\n    for i in range(2, n):\n        val = arr[i]\n        if i % 2 == 1:\n            b.append(val)\n            bmin = min(bmin, val)\n            bsum += val\n            blen += 1\n        else:\n            a.append(val)\n            amin = min(val, amin)\n            asum += val\n            alen += 1\n        help = min(help, bmin * (n - blen) + bsum + amin * (n - alen) + asum)\n    print(help)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    u = l[0]\n    r = l[1]\n    m1 = l[0]\n    m2 = l[1]\n    cost = l[0] * n + l[1] * n\n    u1 = 1\n    r1 = 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            m1 = min(m1, l[i])\n            u = u + l[i]\n            u1 = u1 + 1\n        else:\n            m2 = min(m2, l[i])\n            r = r + l[i]\n            r1 = r1 + 1\n        cost = min(cost, u + (n - u1) * m1 + r + (n - r1) * m2)\n    print(cost)\n    t = t - 1", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    q = l[::2]\n    qn = len(q)\n    w = l[1::2]\n    wn = len(w)\n    n = len(l)\n    c = []\n    s = [0, 0]\n    m = [1000000000000000.0, 1000000000000000.0]\n    p = [n, n]\n    for i in range(n):\n        x = i & 1\n        m[x] = min(m[x], l[i])\n        s[x] += l[i]\n        p[x] -= 1\n        c += [s[x] + p[x] * m[x]]\n    print(min((x + y for (x, y) in zip(c, c[1:]))))", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    upMin = array[1]\n    upCount = 0\n    rightMin = array[0]\n    rightCount = 0\n    minCost = float('inf')\n    oddSum = 0\n    evenSum = 0\n    for (idx, val) in enumerate(array, 1):\n        if idx % 2 == 0:\n            upCount += 1\n            upMin = min(upMin, val)\n            evenSum += val\n        else:\n            rightCount += 1\n            rightMin = min(rightMin, val)\n            oddSum += val\n        minCost = min(minCost, upMin * (n - upCount) + evenSum + rightMin * (n - rightCount) + oddSum)\n    print(minCost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    sum_right = c[0]\n    sum_up = c[1]\n    min_right = c[0]\n    min_up = c[1]\n    count_up = 1\n    count_right = 1\n    cost = sum_right + sum_up + min_up * (n - count_up) + min_right * (n - count_right)\n    for k in range(2, n):\n        if k % 2 == 0:\n            min_right = min(min_right, c[k])\n            sum_right += c[k]\n            count_right += 1\n        else:\n            min_up = min(min_up, c[k]) if k % 2 == 1 else min_up\n            sum_up += c[k]\n            count_up += 1\n        cost = min(cost, sum_right + sum_up + min_up * (n - count_up) + min_right * (n - count_right))\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    b0 = 10 ** 10\n    b1 = 10 ** 10\n    sm = 0\n    res = 10 ** 18\n    for i in range(n):\n        if i % 2 == 0:\n            if c[i] < b0:\n                b0 = c[i]\n        elif c[i] < b1:\n            b1 = c[i]\n        sm += c[i]\n        c0 = (i + 2) // 2\n        c1 = (i + 1) // 2\n        res = min(res, sm + (n - c0) * b0 + (n - c1) * b1)\n    print(res)", "import sys\nt = int(input())\nfor _t in range(t):\n    n = int(input())\n    c_inp = [int(e) for e in input().strip().split()]\n    minv = float('inf')\n    (sum0, min0, len0) = (c_inp[0], c_inp[0], 1)\n    (sum1, min1, len1) = (c_inp[1], c_inp[1], 1)\n    for k in range(1, n):\n        if k != 1:\n            if k % 2 == 0:\n                sum0 += c_inp[k]\n                len0 += 1\n                min0 = min(min0, c_inp[k])\n            else:\n                sum1 += c_inp[k]\n                len1 += 1\n                min1 = min(min1, c_inp[k])\n        minv = min(minv, sum0 + min0 * (n - len0) + sum1 + min1 * (n - len1))\n    print(minv)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    i = len(a)\n    j = 0\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    for x in map(int, a):\n        j ^= 1\n        i -= j\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * i\n        r = min(r, p + x)\n        p = x\n    print(r)", "def solve():\n    n = int(input())\n    c = list(map(int, input().split()))\n    mn = [1000000000.0, 1000000000.0]\n    rem = [n, n]\n    sm = 0\n    ans = 1e+18\n    for i in range(n):\n        mn[i % 2] = min(mn[i % 2], c[i])\n        rem[i % 2] -= 1\n        sm += c[i]\n        if i > 0:\n            temp = sm + mn[0] * rem[0] + mn[1] * rem[1]\n            ans = min(ans, temp)\n    print(int(ans))\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(list(map(int, input().split())))\n    dp = [0] * n\n    dp[0] = 10000000000000000\n    mn1 = l[0]\n    mn2 = l[1]\n    sm = l[0] + l[1]\n    dp[1] = l[0] * n + l[1] * n\n    for i in range(2, n):\n        if i % 2 == 0:\n            mn1 = min(mn1, l[i])\n            sm += l[i]\n            dp[i] = sm + (n - 1 - i // 2) * mn1 + (n - i // 2) * mn2\n        else:\n            mn2 = min(mn2, l[i])\n            sm += l[i]\n            dp[i] = sm + (n - 1 - i // 2) * mn2 + (n - 1 - i // 2) * mn1\n    print(min(dp))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(list(map(int, input().split())))\n    dp = [0] * n\n    dp[0] = float('inf')\n    mn1 = l[0]\n    mn2 = l[1]\n    sm = l[0] + l[1]\n    dp[1] = l[0] * n + l[1] * n\n    for i in range(2, n):\n        if i % 2 == 0:\n            mn1 = min(mn1, l[i])\n            sm += l[i]\n            dp[i] = sm + (n - 1 - i // 2) * mn1 + (n - i // 2) * mn2\n        else:\n            mn2 = min(mn2, l[i])\n            sm += l[i]\n            dp[i] = sm + (n - 1 - i // 2) * mn2 + (n - 1 - i // 2) * mn1\n    print(min(dp))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    h = []\n    v = []\n    for i in range(n):\n        if i % 2 == 0:\n            h.append(l[i])\n        else:\n            v.append(l[i])\n    hl = len(h)\n    hv = len(v)\n    p = n * (h[0] + v[0])\n    hmin = h[0]\n    vmin = v[0]\n    mm = p\n    i = 1\n    j = 1\n    while i < hl or j < hv:\n        if h[i] < hmin:\n            pp = p - hmin * (n - i) + (n - i) * h[i]\n            hmin = h[i]\n        else:\n            pp = p - hmin + h[i]\n        p = pp\n        if p < mm:\n            mm = p\n        if j < hv:\n            if v[i] < vmin:\n                pp = p - vmin * (n - j) + (n - j) * v[j]\n                vmin = v[j]\n            else:\n                pp = p - vmin + v[i]\n            p = pp\n            if p < mm:\n                mm = p\n        i = min(i + 1, hl)\n        j = min(j + 1, hv)\n    print(mm)", "for _ in range(int(input())):\n    (n, clist1, clist2, p1, p) = (int(input()), [], [], 0, 0)\n    clist = list(map(int, input().split(' ')))\n    m1 = m2 = ans1 = float('inf')\n    for i in range(n):\n        if i & 1:\n            clist1.append(clist[i])\n            m1 = min(m1, clist[i])\n        else:\n            clist2.append(clist[i])\n            m2 = min(m2, clist[i])\n        p += clist[i]\n        if i:\n            ans1 = min(ans1, p + m1 * (n - len(clist1)) + m2 * (n - len(clist2)))\n    print(ans1)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    i = j = 0\n    for x in map(int, a):\n        j ^= 1\n        i += j\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * (n - i)\n        r = min(r, p + x)\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    i = len(a)\n    j = 0\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    for x in map(int, a):\n        j ^= 1\n        i -= j\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * i\n        r = min(r, p + x)\n        p = x\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    (prices, mn_e, mn_o, s) = ([], c[0], c[1], c[0])\n    for i in range(2, n + 1):\n        s += c[i - 1]\n        if i == n:\n            pass\n        elif i % 2 == 0:\n            mn_e = min(mn_e, c[i])\n        else:\n            mn_o = min(mn_o, c[i])\n        price = s + (n - (i + 1) // 2) * mn_e + (n - i // 2) * mn_o\n        prices.append(price)\n    print(min(prices))", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    (prices, mn_e, mn_o, s) = (10 ** 20, c[0], c[1], c[0])\n    for i in range(2, n + 1):\n        s += c[i - 1]\n        if i % 2 == 0 and i != n:\n            mn_e = min(mn_e, c[i])\n        elif i % 2 == 1 and i != n:\n            mn_o = min(mn_o, c[i])\n        price = s + (n - (i + 1) // 2) * mn_e + (n - i // 2) * mn_o\n        prices = min(price, prices)\n    print(prices)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    (mas1, mas2) = ([], [])\n    (minn1, minn2, ans) = (10000000000, 10000000000, 1000000000000000)\n    summ = 0\n    for i in range(n):\n        summ += c[i]\n        if i % 2 == 1:\n            minn1 = min(minn1, c[i])\n            mas1.append(c[i])\n        else:\n            minn2 = min(minn2, c[i])\n            mas2.append(c[i])\n        ans = min(ans, summ + minn1 * (n - len(mas1)) + minn2 * (n - len(mas2)))\n    print(ans)", "for u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    ans = n * x[0] + n * x[1]\n    s1 = x[0]\n    s2 = x[1]\n    m1 = x[0]\n    m2 = x[1]\n    l1 = 1\n    l2 = 1\n    for k in range(2, n):\n        if k % 2 == 0:\n            s1 += x[k]\n            l1 += 1\n            m1 = min(m1, x[k])\n        else:\n            s2 += x[k]\n            l2 += 1\n            m2 = min(m2, x[k])\n        temp = s1 + (n - l1) * m1 + (s2 + (n - l2) * m2)\n        ans = min(ans, temp)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = True\n    a = []\n    b = []\n    for i in l:\n        if flag:\n            a.append(i)\n        else:\n            b.append(i)\n        flag = not flag\n    x = len(a)\n    y = len(b)\n    z = max(x, y)\n    la = lb = n\n    ca = cb = 0\n    ta = tb = 1000000000\n    min_a = a[0]\n    min_b = b[0]\n    cost = []\n    s_a = 0\n    s_b = 0\n    for i in range(n):\n        if i % 2 == 0:\n            j = i // 2\n            s_a += a[j]\n            min_a = min(min_a, a[j])\n            temp = s_a + s_b + (n - j - 1) * min_a + (n - j) * min_b\n            cost.append(temp)\n        else:\n            j = i // 2\n            min_b = min(min_b, b[j])\n            s_b += b[j]\n            temp = s_a + s_b + (n - j - 1) * min_b + (n - j - 1) * min_a\n            cost.append(temp)\n    print(min(cost))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    i = len(a)\n    j = 0\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    for x in map(int, a):\n        j ^= 1\n        i -= j\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * i\n        r = min(r, p + x)\n        p = x\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    d = [0] * n\n    m = 10 ** 10\n    s1 = [0]\n    for i in range(0, n, 2):\n        s1.append(s1[-1] + c[i])\n        m = min(m, c[i])\n        d[i] = s1[-1] + m * (n - len(s1) + 1)\n    m = 10 ** 10\n    s1 = [0]\n    for i in range(1, n, 2):\n        s1.append(s1[-1] + c[i])\n        m = min(m, c[i])\n        d[i] = s1[-1] + m * (n - len(s1) + 1)\n    m = 10 ** 32\n    for i in range(n - 1):\n        m = min(m, d[i] + d[i + 1])\n    print(m)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    r = p = 1e+18\n    b = [p, p] + a\n    a = [0, 0] + a\n    for i in range(2, n + 2):\n        a[i] += a[i - 2]\n        b[i] = min(b[i], b[i - 2])\n        x = a[i] + b[i] * (n - i // 2)\n        r = min(r, p + x)\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    i = 2\n    for x in map(int, a):\n        j = i % 2\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * (n - i // 2)\n        r = min(r, p + x)\n        p = x\n        i += 1\n    print(r)", "import sys\nfrom sys import stdin\ntt = int(stdin.readline())\nANS = []\nfor loop in range(tt):\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    ans = float('inf')\n    anum = 0\n    asum = 0\n    amin = float('inf')\n    bnum = 0\n    bsum = 0\n    bmin = float('inf')\n    for i in range(n):\n        if i % 2 == 0:\n            anum += 1\n            asum += c[i]\n            amin = min(amin, c[i])\n        else:\n            bnum += 1\n            bsum += c[i]\n            bmin = min(bmin, c[i])\n        if i >= 1:\n            ans = min(ans, asum + amin * (n - anum) + bsum + bmin * (n - bnum))\n    ANS.append(str(ans))\nprint('\\n'.join(ANS))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    costs = input().split()\n    costs = [int(item) for item in costs]\n    minPathCost = (costs[0] + costs[1]) * n\n    horizSum = 0\n    vertSum = 0\n    minHoriz = 10 ** 10\n    minVert = 10 ** 10\n    numHoriz = 0\n    numVert = 0\n    for i in range(n):\n        if i % 2 == 0:\n            horizSum += costs[i]\n            minHoriz = min(minHoriz, costs[i])\n            numHoriz += 1\n        if i % 2 != 0:\n            vertSum += costs[i]\n            minVert = min(minVert, costs[i])\n            numVert += 1\n        goodSum = minHoriz * (n - numHoriz) + minVert * (n - numVert) + horizSum + vertSum\n        minPathCost = min(minPathCost, goodSum)\n    print(minPathCost)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    ans = float('inf')\n    cnt_r = 1\n    cnt_u = 0\n    mn1 = arr[0]\n    mn2 = arr[1]\n    sm = arr[0]\n    for i in range(1, n):\n        sm += arr[i]\n        if i % 2 == 0:\n            cnt_r += 1\n            mn1 = min(mn1, arr[i])\n            ans = min(ans, (n - cnt_r) * mn1 + (n - cnt_u) * mn2 + sm)\n        else:\n            cnt_u += 1\n            mn2 = min(mn2, arr[i])\n            ans = min(ans, (n - cnt_u) * mn2 + (n - cnt_r) * mn1 + sm)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    salida = sum(x) * n\n    if n > 2:\n        for j in range(2, n):\n            I = j % 2\n            s[I] = s[I] + c[j]\n            x[I] = min(x[I], c[j])\n            sm = sum(s) + x[0] * (n - j // 2 - 1) + x[1] * (n - (j + 1) // 2)\n            salida = min(salida, sm)\n        print(salida)\n    else:\n        print(salida)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min1 = a[0]\n    min2 = 1000000000.0\n    ans = 1e+18\n    sum = a[0]\n    for i in range(1, n):\n        sum = sum + a[i]\n        if i % 2 == 1:\n            min2 = min(min2, a[i])\n        else:\n            min1 = min(min1, a[i])\n        res = sum - min1 - min2\n        j = i - 1\n        p = n - j // 2\n        q = n - (j - j // 2)\n        res = res + p * min2 + q * min1\n        ans = min(ans, res)\n    print(int(ans))", "import sys\nimport math\ninput = sys.stdin.readline\n\nclass Problem:\n\n    def __init__(self):\n        pass\n\n    def solve(self):\n        t = int(input())\n        for _ in range(t):\n            n = int(input())\n            C = list(map(int, input().split()))\n            omin = emin = ans = int(pow(10, 20))\n            osum = esum = 0\n            for i in range(len(C)):\n                pos = i + 1\n                if pos % 2 == 0:\n                    esum += C[i]\n                    emin = min(emin, C[i])\n                else:\n                    osum += C[i]\n                    omin = min(omin, C[i])\n                oused = int((pos + 1) / 2)\n                eused = int(pos / 2)\n                C1 = osum - omin + (n - oused + 1) * omin\n                C2 = esum - emin + (n - eused + 1) * emin\n                ans = min(ans, C1 + C2)\n            print(ans)\n\ndef main():\n    p = Problem()\n    p.solve()\nmain()", "import heapq\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = [int(j) for j in input().split()]\n    (a, b) = (c[0::2], c[1::2])\n    (a1, b1) = ([], [])\n    a3 = []\n    for a2 in a:\n        heapq.heappush(a3, a2)\n        a1.append(a3[0])\n    a3 = []\n    for a2 in b:\n        heapq.heappush(a3, a2)\n        b1.append(a3[0])\n    (suma, sumb) = (sum(a), sum(b))\n    (ta, tb) = (len(a) - 1, len(b) - 1)\n    res = suma + sumb + (n - ta - 1) * a1[ta] + b1[tb] * (n - tb - 1)\n    y = res\n    if ta == tb:\n        sumb -= b.pop()\n        tb -= 1\n        y = min(y, suma + sumb + a1[ta] * (n - ta - 1) + b1[tb] * (n - tb - 1))\n    while ta > 0 or tb > 0:\n        if ta > 0:\n            suma -= a.pop()\n            ta -= 1\n            y = min(y, suma + sumb + a1[ta] * (n - ta - 1) + b1[tb] * (n - tb - 1))\n        if tb > 0:\n            sumb -= b.pop()\n            tb -= 1\n            y = min(y, suma + sumb + a1[ta] * (n - ta - 1) + b1[tb] * (n - tb - 1))\n    print(y)", "quist = int(input())\nfor count in range(quist):\n    m = int(input())\n    c = list(map(int, input().split()))\n    c1 = []\n    c2 = []\n    w = 0\n    for i in c:\n        if w == 0:\n            c1.append(i)\n            w = 1\n        else:\n            c2.append(i)\n            w = 0\n    n1 = 0\n    s1 = 0\n    m1 = -1\n    d1 = -1\n    p1 = []\n    for i in c1:\n        n1 += 1\n        s1 += i\n        if m1 != -1:\n            m1 = min(m1, i)\n        else:\n            m1 = i\n        d1 = s1 + m1 * (m - n1)\n        p1.append(d1)\n    n2 = 0\n    s2 = 0\n    m2 = -1\n    d2 = -1\n    p2 = []\n    for i in c2:\n        n2 += 1\n        s2 += i\n        if m2 != -1:\n            m2 = min(m2, i)\n        else:\n            m2 = i\n        d2 = s2 + m2 * (m - n2)\n        p2.append(d2)\n    x = -1\n    i = 0\n    while i < len(p1) and i < len(p2):\n        if x == -1:\n            x = p1[i] + p2[i]\n        else:\n            x = min(x, p1[i] + p2[i])\n        i += 1\n    i = 0\n    while i + 1 < len(p1) and i < len(p2):\n        if x == -1:\n            x = p1[i + 1] + p2[i]\n        else:\n            x = min(x, p1[i + 1] + p2[i])\n        i += 1\n    print(x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    flag = True\n    a = []\n    b = []\n    for i in c:\n        if flag:\n            a.append(i)\n        else:\n            b.append(i)\n        flag = not flag\n    x = len(a)\n    y = len(b)\n    z = max(x, y)\n    la = lb = n\n    ca = cb = 0\n    ta = tb = 1000000000\n    min_a = a[0]\n    min_b = b[0]\n    cost = []\n    sum_a = 0\n    sum_b = 0\n    for i in range(n):\n        if i % 2 == 0:\n            j = i // 2\n            sum_a += a[j]\n            min_a = min(min_a, a[j])\n            temp = sum_a + sum_b + (n - j - 1) * min_a + (n - j) * min_b\n            cost.append(temp)\n        else:\n            j = i // 2\n            min_b = min(min_b, b[j])\n            sum_b += b[j]\n            temp = sum_a + sum_b + (n - j - 1) * min_b + (n - j - 1) * min_a\n            cost.append(temp)\n    print(min(cost))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    n = len(a)\n    r = p = 1000000000000000.0\n    b = [0, 0]\n    c = [p, p]\n    i = 2\n    for x in map(int, a):\n        j = i % 2\n        b[j] += x\n        c[j] = min(c[j], x)\n        x = b[j] + c[j] * (n - i // 2)\n        r = min(r, p + x)\n        p = x\n        i += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    (prices, mn_e, mn_o, s) = (10 ** 16, c[0], c[1], c[0])\n    for i in range(2, n + 1):\n        s += c[i - 1]\n        if i % 2 == 0 and i != n:\n            mn_e = min(mn_e, c[i])\n        elif i % 2 == 1 and i != n:\n            mn_o = min(mn_o, c[i])\n        price = s + (n - (i + 1) // 2) * mn_e + (n - i // 2) * mn_o\n        prices = min(price, prices)\n    print(prices)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    ans = sum(x) * n\n    for i in range(2, n):\n        I = i % 2\n        s[I] += c[i]\n        x[I] = min(x[I], c[i])\n        ss = sum(s) + x[0] * (n - i // 2 - 1) + x[1] * (n - (i + 1) // 2)\n        ans = min(ans, ss)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    salida = sum(x) * n\n    for j in range(2, n):\n        I = j % 2\n        s[I] = s[I] + c[j]\n        x[I] = min(x[I], c[j])\n        sm = sum(s) + x[0] * (n - j // 2 - 1) + x[1] * (n - (j + 1) // 2)\n        salida = min(salida, sm)\n    print(salida)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    salida = sum(x) * n\n    for j in range(2, n):\n        I = j % 2\n        s[I] = s[I] + c[j]\n        x[I] = min(x[I], c[j])\n        operacion1 = n - j // 2 - 1\n        operacion2 = n - (j + 1) // 2\n        sm = sum(s) + x[0] * operacion1 + x[1] * operacion2\n        salida = min(salida, sm)\n    print(salida)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    ans = sum(x) * n\n    for i in range(2, n):\n        I = i % 2\n        s[I] += c[i]\n        x[I] = min(x[I], c[i])\n        ss = sum(s) + x[0] * (n - i // 2 - 1) + x[1] * (n - (i + 1) // 2)\n        ans = min(ans, ss)\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = [c[0], c[1]]\n    x = [c[0], c[1]]\n    ans = sum(x) * n\n    for i in range(2, n):\n        I = i % 2\n        s[I] += c[i]\n        x[I] = min(x[I], c[i])\n        ss = sum(s) + x[0] * (n - i // 2 - 1) + x[1] * (n - (i + 1) // 2)\n        ans = min(ans, ss)\n    print(ans)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    right = [i for i in arr[::2]]\n    up = [i for i in arr[1::2]]\n    (r, u) = (999999999999999999999999, 99999999999999999999999)\n    (s1, s2) = (0, 0)\n    total = 999999999999999999999999\n    for i in range(len(right)):\n        s1 += right[i]\n        r = min(r, right[i])\n        t1 = s1 + r * (n - i - 1)\n        if i > len(up) - 1:\n            break\n        s2 += up[i]\n        u = min(u, up[i])\n        t2 = s2 + u * (n - i - 1)\n        total = min(total, t1 + t2)\n    (r, u) = (right[0], 9999999999999999999999)\n    (s1, s2) = (right[0], 0)\n    for i in range(1, len(right)):\n        s1 += right[i]\n        r = min(r, right[i])\n        t1 = s1 + r * (n - i - 1)\n        s2 += up[i - 1]\n        u = min(u, up[i - 1])\n        t2 = s2 + u * (n - i)\n        total = min(total, t1 + t2)\n    print(total)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\nt = 1\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (v1, v2) = ([a[i] for i in range(0, n, 2)], [a[i] for i in range(1, n, 2)])\n    (p1, p2) = (list(accumulate(v1)), list(accumulate(v2)))\n    ans = v1[0] * n + v2[0] * n\n    (m1, m2) = (v1[0], v2[0])\n    for i in range(1, len(v1)):\n        m1 = min(m1, v1[i])\n        ans = min(ans, p1[i] + (n - i - 1) * m1 + p2[i - 1] + m2 * (n - i))\n        if i < len(v2):\n            m2 = min(m2, v2[i])\n            ans = min(ans, p1[i] + (n - i - 1) * m1 + p2[i] + m2 * (n - i - 1))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    pre = [0] * n\n    pre[0] = c[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + c[i]\n    lmin2 = [[c[0], c[1]]]\n    l1 = c[0]\n    l2 = c[1]\n    res = n * (l1 + l2)\n    for i in range(2, n):\n        if i + 1 & 1:\n            l1 = min(l1, c[i])\n        else:\n            l2 = min(l2, c[i])\n        seg1 = (i + 2) // 2\n        seg2 = i + 1 - seg1\n        seg1 -= 1\n        seg2 -= 1\n        res = min(res, l1 * (n - seg1) + l2 * (n - seg2) + pre[i] - (l1 + l2))\n    print(res)", "import math\nimport heapq\n\ndef S():\n    return input()\n\ndef M():\n    return map(int, input().split())\n\ndef I():\n    return int(S())\n\ndef L():\n    return list(M())\nfor _ in range(I()):\n    n = I()\n    l = L()\n    m1 = l[0]\n    m2 = l[1]\n    a = [(m1, m2), (m1, m2)]\n    for i in range(2, n):\n        if i % 2 == 0:\n            if l[i] < m1:\n                m1 = l[i]\n        elif l[i] < m2:\n            m2 = l[i]\n        a.append((m1, m2))\n    p = n * (l[0] + l[1])\n    k = 0\n    ar = []\n    for i in range(n):\n        k += l[i]\n        ar.append(k)\n    for i in range(2, n):\n        (m1, m2) = a[i]\n        e = i // 2 + 1\n        o = i + 1 - e\n        s = ar[i] - m1 - m2 + (n - e + 1) * m1 + (n - o + 1) * m2\n        if s < p:\n            p = s\n    print(p)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    best = float('inf')\n    mn = [float('inf')] * 2\n    sm = [0] * 2\n    for i in range(n):\n        mn[i % 2] = min(mn[i % 2], arr[i])\n        sm[i % 2] += arr[i]\n        best = min(best, sum((sm[j] + mn[j] * (n - (i - j) // 2 - 1) for j in [0, 1])))\n    print(best)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    cs = [int(x) for x in input().split()]\n    bests = [cs[0], cs[1]]\n    totals = [cs[0], cs[1]]\n    ans = 12345677890123409875678\n    for i in range(2, n + 1):\n        firsts = i - i // 2 - 1\n        seconds = i // 2 - 1\n        cost = bests[0] * (n - firsts) + (totals[0] - bests[0]) + bests[1] * (n - seconds) + (totals[1] - bests[1])\n        ans = min(ans, cost)\n        if i < n:\n            index = i % 2\n            bests[index] = min(bests[index], cs[i])\n            totals[index] += cs[i]\n    print(ans)", "t = int(input())\nfor g in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = [s[0], s[1]]\n    mn = [s[0], s[1]]\n    cnt = [1, 1]\n    ans = (s[0] + s[1]) * n\n    for i in range(2, n):\n        mn[i % 2] = min(mn[i % 2], s[i])\n        a[i % 2] += s[i]\n        cnt[i % 2] += 1\n        ans = min(ans, a[0] - mn[0] + (n - cnt[0] + 1) * mn[0] + a[1] - mn[1] + (n - cnt[1] + 1) * mn[1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    pre = [0] * n\n    pre[0] = c[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + c[i]\n    lmin2 = [[c[0], c[1]]]\n    l1 = c[0]\n    l2 = c[1]\n    res = n * (l1 + l2)\n    for i in range(2, n):\n        if i + 1 & 1:\n            l1 = min(l1, c[i])\n        else:\n            l2 = min(l2, c[i])\n        seg1 = (i + 2) // 2\n        seg2 = i + 1 - seg1\n        seg1 -= 1\n        seg2 -= 1\n        res = min(res, l1 * (n - seg1) + l2 * (n - seg2) + pre[i] - (l1 + l2))\n    print(res)"]