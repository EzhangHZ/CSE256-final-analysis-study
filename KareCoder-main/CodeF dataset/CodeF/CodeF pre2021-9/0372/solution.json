["for _ in range(int(input())):\n    s = input()\n    s2 = input()\n    for i in range(len(s)):\n        if s2 in s[:i] + s[i::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    for x in range(len(s)):\n        if t in s[:x] + s[x::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "from functools import lru_cache\nimport sys\nsys.setrecursionlimit(5000)\n\ndef solve(s, t):\n\n    @lru_cache(maxsize=None)\n    def dfs(i, j, turn=True):\n        if j == len(t):\n            return True\n        if i + 1 < len(s) and s[i + 1] == t[j] and turn:\n            if dfs(i + 1, j + 1, turn):\n                return True\n        if i - 1 >= 0 and s[i - 1] == t[j]:\n            if dfs(i - 1, j + 1, False):\n                return True\n        return False\n    for (i, c) in enumerate(s):\n        if c != t[0]:\n            continue\n        if dfs(i, 1, 1):\n            return 'YES'\n    return 'NO'\nans = []\nfor _ in range(int(input())):\n    ans.append(solve(input(), input()))\nprint(*ans, sep='\\n')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    for x in range(len(s)):\n        if t in s[:x] + s[x::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    for x in range(len(s)):\n        if t in s[:x] + s[x::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input()[:-1]\n    w = input()[:-1]\n    n = len(w)\n    for i in range(1, n):\n        a = w[:i]\n        b = w[i:][::-1] + a[-1]\n        x = len(a)\n        y = len(b)\n        if x >= y:\n            if b != a[x - y:]:\n                continue\n            else:\n                c = a\n        elif a != b[y - x:]:\n            continue\n        else:\n            c = b\n        if c in s:\n            print('YES')\n            break\n    else:\n        if w in s or w in s[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (s, t) = (input(), input())\n    f = 0\n    for i in range(len(s)):\n        temp = s[:i] + s[i::-1]\n        if t in temp:\n            f = 1\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nwhile q:\n    s = input()\n    t = input()\n    flag = 0\n    for i in range(len(s)):\n        if t in s[:i] + s[i::-1]:\n            flag = 1\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    q -= 1", "t = int(input())\nfor i in range(t):\n    s = input()\n    s2 = input()\n    for j in range(len(s)):\n        if s2 in s[:j] + s[j::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "def f():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        t = input()\n        b = solve(s, t)\n        if b:\n            print('YES')\n        else:\n            print('NO')\n\ndef solve(s, t):\n    seen = ''\n    rev_seen = ''\n    for i in range(len(s)):\n        c = s[i]\n        seen += c\n        temp = seen + rev_seen\n        if t in temp:\n            return True\n        rev_seen = c + rev_seen\n    return False\nf()", "tt = int(input())\nfor _ in range(tt):\n    s = input()\n    t = input()\n    n = len(t)\n    m = n\n    for i in range(n // 2, n - 1):\n        flag = True\n        for j in range(1, n - i):\n            if t[i - j] != t[i + j]:\n                flag = False\n                break\n        if flag:\n            m = i\n            break\n    ans = t[:m + 1] in s\n    if not ans:\n        t = t[::-1]\n        m = n\n        for i in range(n // 2, n - 1):\n            flag = True\n            for j in range(1, n - i):\n                if t[i - j] != t[i + j]:\n                    flag = False\n                    break\n            if flag:\n                m = i\n                break\n        ans = t[:m + 1] in s\n    print('YES' if ans else 'NO')", "n = int(input())\nfor i in range(n):\n    main_str = input()\n    expected_str = input()\n    seq_found = False\n    for j in range(len(main_str)):\n        if expected_str in main_str[:j] + main_str[j::-1]:\n            print('YES')\n            seq_found = True\n            break\n    if not seq_found:\n        print('NO')", "import functools\nimport sys\nsys.setrecursionlimit(4000)\n\ndef reverse_string(s, t):\n\n    @functools.lru_cache()\n    def dfs(i, j, right_flag):\n        if j >= len(t):\n            return True\n        if i + 1 < len(s) and s[i + 1] == t[j] and right_flag:\n            if dfs(i + 1, j + 1, right_flag):\n                return True\n        if i - 1 >= 0 and s[i - 1] == t[j]:\n            if dfs(i - 1, j + 1, False):\n                return True\n        return False\n    right_flag = True\n    for i in range(len(s)):\n        if s[i] == t[0] and dfs(i, 1, right_flag):\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    print(reverse_string(s, t))", "import functools\nimport sys\nsys.setrecursionlimit(4000)\n\n@functools.lru_cache()\ndef dfs(i, j, s, t, right_flag):\n    if j >= len(t):\n        return True\n    if i + 1 < len(s) and s[i + 1] == t[j] and right_flag and dfs(i + 1, j + 1, s, t, right_flag):\n        return True\n    if i - 1 >= 0 and s[i - 1] == t[j] and dfs(i - 1, j + 1, s, t, False):\n        return True\n    return False\n\ndef reverse_string(s, t):\n    right_flag = True\n    for i in range(len(s)):\n        if s[i] == t[0] and dfs(i, 1, s, t, right_flag):\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    print(reverse_string(s, t))", "R = lambda : map(int, input().split())\np = print\nt = 1\n(t,) = R()\nalpali = list(map(chr, range(97, 123)))\n\ndef solve():\n    s = input()\n    t = input()\n    if any((t in s[:i] + s[i::-1] for i in range(len(s)))):\n        p('YES')\n    else:\n        p('NO')\nwhile t:\n    t -= 1\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom sys import stdin, stdout\n\ndef arrin():\n    return list(map(int, stdin.readline().split()))\n\ndef num1in():\n    return int(stdin.readline())\n\ndef num2in():\n    (a, b) = map(int, stdin.readline().split())\n    return (a, b)\n\ndef num3in():\n    (a, b, c) = map(int, stdin.readline().split())\n    return (a, b, c)\n\ndef num4in():\n    (a, b, c, d) = map(int, stdin.readline().split())\n    return (a, b, c, d)\n\ndef num5in():\n    (a, b, c, d, e) = map(int, stdin.readline().split())\n    return (a, b, c, d, e)\n\ndef recur(s1, s2, i, j, dir):\n    if i >= len(s1) or i < 0:\n        return False\n    if s1[i] != s2[j]:\n        return False\n    if j == len(s2) - 1:\n        return True\n    if dir == 0:\n        return recur(s1, s2, i - 1, j + 1, 0)\n    else:\n        return recur(s1, s2, i + 1, j + 1, 1) or recur(s1, s2, i - 1, j + 1, 0)\nt = num1in()\nfor test in range(t):\n    s1 = input()\n    s2 = input()\n    flag = 1\n    for i in range(len(s1)):\n        if recur(s1, s2, i, 0, 1):\n            print('YES')\n            flag = 0\n            break\n    if flag == 1:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n\n    def test(i):\n        j = 0\n        while i < len(s):\n            if s[i] == t[j]:\n                j += 1\n                i += 1\n            else:\n                break\n            if t[j:] == s[:i][-(len(t) - j) - 1:-1][::-1]:\n                return True\n        if j == len(t):\n            return True\n        return False\n    flag = 'NO'\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            if test(i):\n                flag = 'YES'\n                break\n    print(flag)", "import sys\nimport math\ninput = sys.stdin.readline\nimp = 'IMPOSSIBLE'\nt = int(input())\nfor test in range(t):\n    s = input()[:-1]\n    r = input()[:-1]\n    ns = len(s)\n    nr = len(r)\n    res = False\n    for i in range(ns):\n        if s[i] == r[0]:\n            k = 1\n            otoc = []\n            while k < nr and i + k < ns and (r[k] == s[i + k]):\n                if i + k - 2 >= 0 and r[k] == s[i + k - 2]:\n                    otoc.append(k - 1)\n                k += 1\n            if k == nr:\n                res = True\n            else:\n                otoc.append(k - 1)\n                for ot in otoc:\n                    j = 1\n                    while ot + j < nr and i + ot - j >= 0 and (r[ot + j] == s[i + ot - j]):\n                        j += 1\n                    if ot + j == nr:\n                        res = True\n                        break\n        if res:\n            break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    s = input()\n    t = input()\n    s_rev = s[::-1]\n    if t in s:\n        print('YES')\n        continue\n    flag = 0\n    for j in range(len(s)):\n        cur = s[:len(s) - j] + s_rev[j + 1:]\n        if t in cur:\n            flag = 1\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor q in range(t):\n    ch1 = input()\n    ch2 = input()\n    n = len(ch1)\n    l = [''] * n\n    s1 = ''\n    s2 = ''\n    test = False\n    for i in range(n):\n        x = s1 + ch1[i] + s2\n        l[i] = x\n        s1 = s1 + ch1[i]\n        s2 = ch1[i] + s2\n    for i in range(n):\n        if l[i].count(ch2):\n            test = True\n            break\n    if test:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(0, t):\n    s = str(input())\n    t = str(input())\n    arr = []\n    arr.append(s[0])\n    for x in range(0, len(s)):\n        a = s[0:x + 1]\n        b = s[0:x]\n        c = b[::-1]\n        arr.append(a + c)\n    c = 0\n    for j in range(0, len(arr)):\n        if arr[j].find(t) == -1:\n            continue\n        else:\n            c = 1\n            break\n    if c == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    isTrue = False\n    for i in range(1, len(s)):\n        tmp = s[:i] + s[i] + s[:i][::-1]\n        if len(tmp) >= len(t):\n            if t in tmp:\n                isTrue = True\n                break\n    if isTrue:\n        print('YES')\n    elif t in s[::-1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (s, t) = (input().strip(), input().strip())\n    b = any((t in s[:i] + s[i::-1] for i in range(len(s))))\n    print('YES' if b else 'NO')", "t = int(input())\nfor lasfjalj in range(t):\n    s = input()\n    t = input()\n    if t in s:\n        print('YES')\n    elif t[::-1] in s:\n        print('YES')\n    else:\n        flag = 0\n        for i in range(1, len(s) + 1):\n            tmp = s[:i] + s[:i - 1][::-1]\n            if t in tmp:\n                print('YES')\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')", "t = int(input())\nfor k in range(t):\n    s = input()\n    ss = input()\n    flag = False\n    for i in range(len(s)):\n        if ss in s[:i] + s[i::-1]:\n            flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor p in range(t):\n    s = input()\n    t = input()\n    if t in s:\n        print('YES')\n    elif t[::-1] in s:\n        print('YES')\n    else:\n        flag = 0\n        for i in range(1, len(s) + 1):\n            tmp = s[:i] + s[:i - 1][::-1]\n            if t in tmp:\n                flag = 1\n                print('YES')\n                break\n        if flag == 0:\n            print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    flag = False\n    for i in range(len(s)):\n        if t in s[:i] + s[i::-1]:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def func():\n    s = input()\n    t = input()\n    for i in range(len(t) + 1):\n        f = t[:i]\n        e = t[i:][::-1]\n        if len(f):\n            e += f[-1]\n        if len(e) == 0 and f in s:\n            print('YES')\n            return True\n        if len(f) == 0 and e in s:\n            print('YES')\n            return True\n        if len(e) > len(f) and e.endswith(f) and (e in s):\n            print('YES')\n            return True\n        if len(f) > len(e) and f.endswith(e) and (f in s):\n            print('YES')\n            return True\n        if len(f) == len(e) and f == e and (f in s):\n            print('YES')\n            return True\n    print('NO')\n    return True\nfor i in range(int(input())):\n    func()", "tt = int(input())\nfor _ in range(tt):\n    s = input()\n    t = input()\n    n = len(t)\n    m = n - 1\n    for i in range(n // 2, n - 1):\n        if t[n - 1:i:-1] == t[2 * i - n + 1:i]:\n            m = i\n            break\n    ans = t[:m + 1] in s\n    if not ans:\n        t = t[::-1]\n        m = n - 1\n        for i in range(n // 2, n - 1):\n            if t[n - 1:i:-1] == t[2 * i - n + 1:i]:\n                m = i\n                break\n        ans = t[:m + 1] in s\n    print('YES' if ans else 'NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    print('YES' if any((t in s[:i] + s[i::-1] for i in range(len(s)))) else 'NO')", "t = int(input())\nfor z in range(t):\n    a = input()\n    b = input()\n    ans = 'NO'\n    for i in range(len(a)):\n        if b in a[:i] + a[i::-1]:\n            ans = 'YES'\n            break\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    t = input()\n    flag = 0\n    for j in range(len(s)):\n        if t in s[:j] + s[j::-1]:\n            flag = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "tt = int(input())\nfor i in range(tt):\n    s = input()\n    t = input()\n    flag = False\n    for i in range(len(s)):\n        x = s[:i + 1] + s[:i][::-1]\n        if t in x:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    s = input()\n    t = input()\n    return any((t in s[:i] + s[i::-1] for i in range(len(s))))\nt = int(input())\nfor __ in range(t):\n    print('YES' if solve() else 'NO')", "t = int(input())\nfor _ in range(t):\n    (s, t) = (input().strip(), input().strip())\n    b = any((t in s[:i] + s[i::-1] for i in range(len(s))))\n    print('YES' if b else 'NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    t = input().strip()\n    for i in range(len(t)):\n        ok = True\n        for j in range(i + 1, len(t)):\n            if i - (j - i) >= 0:\n                if t[j] != t[i - (j - i)]:\n                    ok = False\n                    break\n        if ok:\n            a = t[:i + 1]\n            if 2 * (i + 1) - 1 < len(t):\n                z = t[2 * (i + 1) - 1:]\n                a = z[::-1] + a\n            if s.find(a) != -1:\n                print('YES')\n                return\n    print('NO')\nfor i in range(int(input())):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef p(s, t, idx, flg):\n    if len(t) == 0:\n        return True\n    if flg:\n        if idx + 1 < len(s) and s[idx + 1] == t[0]:\n            if p(s, t[1:], idx + 1, True):\n                return True\n        if idx >= 1 and s[idx - 1] == t[0]:\n            if p(s, t[1:], idx - 1, False):\n                return True\n    elif idx >= 1 and s[idx - 1] == t[0]:\n        if p(s, t[1:], idx - 1, False):\n            return True\n    return False\nQ = int(input())\nfor _ in range(Q):\n    S = input()\n    T = input()\n    ts = T[0]\n    for i in range(len(S)):\n        if S[i] == ts:\n            if p(S, T[1:], i, True):\n                print('YES')\n                break\n    else:\n        print('NO')", "cases = int(input())\nfor _ in range(cases):\n    s = input()\n    t = input()\n    rev = s[::-1]\n    ln = len(s)\n    lt = len(t)\n    if lt >= ln * 2:\n        print('NO')\n        continue\n    for i in range(ln):\n        new = s[:i] + s[:i + 1][::-1]\n        if i * 2 + 1 < lt:\n            continue\n        if t in new:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(1000000)\n\ndef solve(cps, cpt, l, r):\n    if cpt >= n:\n        return True\n    ans = False\n    if r and cps + 1 < m and (cps + 1 >= 0) and (s[cps + 1] == t[cpt]):\n        ans = ans | solve(cps + 1, cpt + 1, True, True)\n    if l and cps - 1 >= 0 and (cps - 1 < m) and (s[cps - 1] == t[cpt]):\n        ans = ans | solve(cps - 1, cpt + 1, True, False)\n    return ans\nfor i in range(int(input())):\n    s = input()\n    t = input()\n    n = len(t)\n    m = len(s)\n    ans = False\n    for j in range(m):\n        if s[j] == t[0]:\n            ans = solve(j, 1, True, True)\n        if ans:\n            print('YES')\n            break\n    if not ans:\n        print('NO')", "def reverse_string(s, t):\n    if t in s or t[::-1] in s:\n        return True\n    (n, m) = (len(s), len(t))\n    for i in range(1, m - 1):\n        (left, right) = (i - 1, i + 1)\n        is_pali = True\n        while left >= 0 and right <= m - 1:\n            if t[left] == t[right]:\n                left -= 1\n                right += 1\n            else:\n                is_pali = False\n                break\n        if is_pali:\n            if left == -1:\n                if right != m:\n                    if t[i:][::-1] in s:\n                        return True\n                elif t[:i + 1] in s:\n                    return True\n            elif t[:i + 1] in s:\n                return True\n    return False\nT = int(input())\nfor t in range(T):\n    s = input()\n    t = input()\n    if reverse_string(s, t):\n        print('YES')\n    else:\n        print('NO')", "mas = list(map(int, input().split()))\nt = mas[0]\nfor i in range(t):\n    mas1 = list(map(str, input().split()))\n    mas2 = list(map(str, input().split()))\n    mas1 = mas1[0]\n    mas2 = mas2[0]\n    lst = [mas1[:i + 1] + mas1[:i][::-1] for i in range(len(mas1))]\n    ok = False\n    for j in range(len(lst)):\n        if lst[j].find(mas2) != -1:\n            ok = True\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor lasfjalj in range(t):\n    s = input()\n    t = input()\n    if t in s:\n        print('YES')\n    elif t[::-1] in s:\n        print('YES')\n    else:\n        flag = 0\n        for i in range(1, len(s) + 1):\n            tmp = s[:i] + s[:i - 1][::-1]\n            if t in tmp:\n                print('YES')\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')", "case = int(input())\nwhile case > 0:\n    s = input()\n    t = input()\n    found = False\n    for (idx, val) in enumerate(s):\n        tmp = s[:idx]\n        tmp = tmp[::-1]\n        if t in s[:idx + 1] + tmp:\n            found = True\n            break\n    if found == True:\n        print('YES')\n    else:\n        print('NO')\n    case = case - 1", "def chk(l2, l1, a1, a2, i):\n    ag = l2[-1]\n    lg = list(l1)\n    lg.reverse()\n    lg = ''.join(lg)\n    for j in range(len(a1)):\n        if a1[j] == ag and j + 1 >= len(l2) and (j + 1 >= len(l1)):\n            if a1[j - len(l2) + 1:j + 1] == l2 and a1[j - len(l1) + 1:j + 1] == lg:\n                return 1\n    return 0\nfor _ in range(int(input())):\n    a1 = input()\n    a2 = list(a1)\n    a2.reverse()\n    a2 = ''.join(a2)\n    b = input()\n    f = 0\n    for i in range(len(b)):\n        l1 = b[i:]\n        l2 = b[:i + 1]\n        if l1 in a2 and l2 in a1:\n            if chk(l2, l1, a1, a2, i):\n                f = 1\n                break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')", "def check_reverse_part(started_str, needed_str, index):\n    if len(needed_str) <= index:\n        for char in range(len(needed_str)):\n            if started_str[index - char - 1] != needed_str[char]:\n                return 0\n        return 1\n    else:\n        return 0\n\ndef check_next_char(started_str, needed_str, index):\n    if index < len(started_str) - 1 and started_str[index + 1] == needed_str[0]:\n        return 1\n    else:\n        return 0\nfor i in range(int(input())):\n    str0 = str(input())\n    str1 = str(input())\n    start_pos = []\n    for ind1 in range(len(str0)):\n        if str0[ind1] == str1[0]:\n            start_pos.append(ind1)\n    if start_pos:\n        if len(str1) > 1:\n            done = 0\n            for ind in start_pos:\n                my_str = str1[1:]\n                if done == 1:\n                    break\n                while len(my_str) > 0:\n                    res = check_reverse_part(str0, my_str, ind)\n                    if res == 0:\n                        res = check_next_char(str0, my_str, ind)\n                        if res == 1:\n                            my_str = my_str[1:]\n                            ind += 1\n                            if my_str == '':\n                                print('YES')\n                                done = 1\n                                break\n                        else:\n                            break\n                    else:\n                        print('YES')\n                        done = 1\n                        break\n            if done == 0:\n                print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "def answer(array, teststr):\n    ans = 0\n    for g in range(0, len(array)):\n        if array[g].find(teststr) == -1:\n            continue\n        else:\n            ans = 1\n            break\n    if ans == 0:\n        print('NO')\n    else:\n        print('YES')\nt = int(input())\nfor i in range(0, t):\n    string = str(input())\n    teststr = str(input())\n    array = []\n    array.append(string[0])\n    for x in range(0, len(string)):\n        ai = string[0:x + 1]\n        bi = string[0:x]\n        ci = bi[::-1]\n        array.append(ai + ci)\n    answer(array, teststr)", "def solve(a, b):\n    for i in range(len(a)):\n        if solve_req(a, b, i):\n            return 'YES'\n    return 'NO'\n\ndef solve_req(a, b, i):\n    if a[i] != b[0]:\n        return False\n    j = 0\n    while i + j < len(a) and j < len(b) and (a[i + j] == b[j]):\n        if solve_req1(a, b, i + j, j):\n            return True\n        j += 1\n    return False\n\ndef solve_req1(a, b, i, j):\n    k = 0\n    while i - k >= 0 and j + k < len(b) and (a[i - k] == b[j + k]):\n        if j + k + 1 == len(b):\n            return True\n        k += 1\n    return False\nq = int(input())\nfor _ in range(q):\n    a = input()\n    b = input()\n    print(solve(a, b))", "from collections import *\nimport math\n\ndef dtb(n):\n    return bin(n).replace('0b', '')\n\ndef btd(n):\n    return int(n, 2)\nt = int(input())\nfor k in range(t):\n    a = input()\n    b = input()\n    s1 = a\n    s2 = a[::-1]\n    n = len(a)\n    flag = True\n    if a == b:\n        print('YES')\n        continue\n    for i in range(n - 1):\n        temp = s1 + s2[1:len(s2)]\n        if b in temp:\n            flag = False\n            break\n        s1 = s1[0:len(s1) - 1]\n        s2 = s2[1:len(s2)]\n    if flag == False:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, ks) = (input(), input())\n    a = []\n    (n, m) = (len(s), len(ks))\n    if ks in s:\n        print('YES')\n        continue\n    for i in range(n):\n        if s[i] == ks[0]:\n            a.append([i, 0, True])\n    c = 0\n    for (i, j, k) in a:\n        while True:\n            if k:\n                cij = True\n                it = i\n                jt = j\n                if i + 1 < n and s[i + 1] == ks[j + 1]:\n                    i += 1\n                    j += 1\n                    cij = False\n                if it - 1 > -1 and s[it - 1] == ks[jt + 1]:\n                    if cij:\n                        cij = False\n                        i -= 1\n                        j += 1\n                        k = False\n                    else:\n                        a.append([it - 1, jt + 1, False])\n                if cij:\n                    break\n            elif i - 1 > -1 and s[i - 1] == ks[j + 1]:\n                j += 1\n                i -= 1\n            else:\n                break\n            if j >= m - 1:\n                c = 1\n                break\n        if c:\n            break\n    if c:\n        print('YES')\n    else:\n        print('NO')", "tests = int(input())\nfor _ in range(tests):\n    s = input()\n    t = input()\n    res = any((t in s[:i] + s[i::-1] for i in range(len(s))))\n    if res == True:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    flag = False\n    for i in range(len(s)):\n        new_s = s[:i] + s[i::-1]\n        if t in new_s:\n            print('YES')\n            flag = True\n            break\n    if flag == False:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (s, t) = (input().strip(), input().strip())\n    b = any((t in s[:i] + s[i::-1] for i in range(len(s))))\n    print('YES' if b else 'NO')", "t = int(input())\nfor _ in range(t):\n    (s, t) = (input().strip(), input().strip())\n    c = any((t in s[:x] + s[x::-1] for x in range(len(s))))\n    print('YES' if c else 'NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    ln = len(s)\n    lt = len(t)\n    if lt >= ln * 2:\n        print('NO')\n        continue\n    for i in range(ln):\n        new = s[:i] + s[:i + 1][::-1]\n        if i * 2 + 1 < lt:\n            continue\n        if t in new:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\nfrom collections import Counter\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(a, b):\n    ind = [i for i in range(len(a)) if a[i] == b[0]]\n    for i in ind:\n        for j in range(i, len(a)):\n            s = a[:j + 1] + a[:j][::-1]\n            if b in s:\n                print('YES')\n                return\n    print('NO')\nfor _ in range(int(input())):\n    a = str(input())[:-1]\n    b = str(input())[:-1]\n    solve(a, b)", "def solve(s, t):\n    n1 = len(s)\n    n2 = len(t)\n    for i in range(n1):\n        if t[0] == s[i]:\n            j = 0\n            k = i\n            while j < n2 and k < n1 and (s[k] == t[j]):\n                j += 1\n                kk = k - 1\n                jj = j\n                k += 1\n                while kk >= 0 and jj < n2 and (s[kk] == t[jj]):\n                    jj += 1\n                    kk -= 1\n                if jj == n2:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    print(solve(s, t))", "def solve():\n    s = input()\n    t = input()\n    n = len(s)\n    f = 0\n    for i in range(n):\n        curr = s[:i] + s[:i + 1][::-1]\n        if t in curr:\n            f = 1\n            break\n    print('YES' if f else 'NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "def find_line():\n    line1 = input()\n    line2 = input()\n    n = len(line1)\n    r = 0\n    for i in range(n):\n        curr = line1[:i] + line1[:i + 1][::-1]\n        if line2 in curr:\n            r = 1\n            break\n    if r == 1:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    find_line()", "def handle(a, b):\n    for i in range(0, len(a)):\n        for j in range(0, len(b)):\n            cur = i\n            loop = 0\n            if a[cur] != b[loop]:\n                break\n            loop += 1\n            for k in range(0, min(j, len(a) - i - 1)):\n                cur += 1\n                if a[cur] != b[loop]:\n                    break\n                loop += 1\n            for k in range(0, min(len(b) - j - 1, cur)):\n                cur -= 1\n                if a[cur] != b[loop]:\n                    break\n                loop += 1\n            if loop == len(b):\n                return 1\n    return 0\nn = int(input())\nfor loop in range(0, n):\n    s = input()\n    t = input()\n    if handle(s, t):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    fl = False\n    for i in range(len(s)):\n        if t in s[:i] + s[i::-1]:\n            fl = True\n    if fl:\n        print('YES')\n    else:\n        print('NO')", "for testis in range(int(input())):\n    a = input()\n    b = input()\n    flag = 0\n    for i in range(len(a)):\n        if b in a[:i] + a[i::-1]:\n            flag = 1\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    print('YES' if any((t in s[:i] + s[i::-1] for i in range(len(s)))) else 'NO')", "for z in range(int(input())):\n    a = input()\n    b = input()\n    ans = 'NO'\n    for i in range(len(a)):\n        if b in a[:i] + a[i::-1]:\n            ans = 'YES'\n            break\n    print(ans)", "q = int(input())\nwhile q > 0:\n    q -= 1\n    s = input()\n    t = input()\n    n = len(s)\n    ar = set()\n    flag = False\n    for i in range(2, n + 1):\n        z = s[0:i]\n        z = z + z[-2::-1]\n        ar.add(z)\n    ar.add(s[0])\n    for k in ar:\n        if t in k:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    for x in range(len(s)):\n        if t in s[:x] + s[x::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "testcases = []\nn = int(input())\nfor _ in range(n):\n    s = input()\n    t = input()\n    testcases.append((s, t))\n\ndef find_all(ch, s):\n    indexes = []\n    for (i, item) in enumerate(s):\n        if item == ch:\n            indexes.append(i)\n    return indexes\n\ndef check(s, t):\n    if t[0] not in s:\n        return 'NO'\n    indexes = find_all(t[0], s)\n    for index in indexes:\n        if t in s[:index + 1][::-1]:\n            return 'YES'\n        elif t in s[index:]:\n            return 'YES'\n        elif index == len(s) - 1:\n            return 'NO'\n        else:\n            for i in range(len(s[index:]) - 1):\n                try:\n                    if t in s[index:index + 2 + i] + s[:index + 1 + i][::-1]:\n                        return 'YES'\n                except IndexError:\n                    continue\n    return 'NO'\nfor test in testcases:\n    print(check(*test))", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    for i in range(len(s)):\n        x = s[:i] + s[i::-1]\n        if t in x:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\n\ndef solve():\n    s = input()\n    t = input()\n    for i in range(len(s)):\n        for r in range(i + 1, len(s) + 1):\n            sub1 = s[i:r]\n            if not t.startswith(sub1):\n                break\n            rest = t[len(sub1):len(t)]\n            sub2 = s[0:r - 1][::-1]\n            if sub2.startswith(rest):\n                print('YES')\n                return\n    print('NO')\nfor i in range(t):\n    solve()", "def left(a, i, t, x, ltt):\n    if x == ltt:\n        return True\n    while x != ltt + 1:\n        if x == ltt:\n            return True\n        if i - 1 >= 0 and a[i - 1] == t[x]:\n            x += 1\n            i -= 1\n        else:\n            return False\n\ndef right(a, i, t, x, ltt):\n    F1 = False\n    F2 = False\n    if ltt == x:\n        return True\n    if i - 1 >= 0 and a[i - 1] == t[x]:\n        F1 = left(a, i, t, x, ltt)\n    if i + 1 < len(a) and a[i + 1] == t[x]:\n        F2 = right(a, i + 1, t, x + 1, ltt)\n    if F1 == True or F2 == True:\n        return True\n    else:\n        return False\nt = int(input())\nfor x in range(t):\n    a = input()\n    t = input()\n    ltt = len(t)\n    S = False\n    for m in range(len(a)):\n        if t[0] == a[m]:\n            S = right(a, m, t, 1, ltt)\n            if S == True:\n                break\n    if S == True:\n        print('YES')\n    else:\n        print('NO')", "q = input()\nq = int(q)\nfor i in range(0, q):\n    f = 0\n    s = input()\n    t = input()\n    for j in range(0, len(s)):\n        s1 = s[0:j + 1]\n        s2 = s[0:j]\n        s2 = s2[::-1]\n        s1 += s2\n        if t in s1:\n            f = 1\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')"]