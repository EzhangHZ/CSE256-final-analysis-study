["import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k, l) = mints()\n    x = 0\n    for d in mints():\n        z = l - d\n        if z < 0:\n            print('No')\n            return\n        if z >= k:\n            x = 0\n        elif x < k:\n            x = max(x + 1, k - z)\n        elif x >= k:\n            x = x + 1\n            if x - k > z:\n                print('No')\n                return\n    print('Yes')\nfor i in range(mint()):\n    solve()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k, l) = mints()\n    x = 0\n    pz = k\n    for d in mints():\n        z = l - d\n        if z < 0:\n            print('No')\n            return\n        if z >= k:\n            x = 0\n        elif x < k:\n            x = max(x + 1, k - z)\n        elif x >= k:\n            x = x + 1\n            if x - k > z:\n                print('No')\n                return\n    print('Yes')\nfor i in range(mint()):\n    solve()", "import math\nimport sys\n\ndef solve():\n    (n, k, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lt = -1\n    for i in range(n):\n        lt += 1\n        if a[i] > l:\n            print('No')\n            return\n        if l - a[i] >= k:\n            lt = -1\n            continue\n        l1 = 2 * k - (l - a[i])\n        r1 = 2 * k + (l - a[i])\n        if lt == 0:\n            lt = l1\n            continue\n        if lt > r1:\n            print('No')\n            return\n        lt = max(lt, l1)\n    print('Yes')\nt = int(input())\nfor tt in range(t):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (n, k, l) = MI()\n    s = t = -1\n    ng = False\n    for d in MI():\n        if d > l:\n            ng = True\n            break\n        mx = d + k\n        if mx <= l:\n            s = -1\n            continue\n        s += 1\n        t += 1\n        ns = mx - l\n        nt = 2 * k - ns\n        if s == 0:\n            (s, t) = (ns, nt)\n            continue\n        if t < ns or nt < s:\n            ng = True\n            break\n        s = max(s, ns)\n        t = nt\n    if ng:\n        print('No')\n    else:\n        print('Yes')", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k, l) = mints()\n    x = 0\n    pz = k\n    for d in mints():\n        z = l - d\n        if z < 0:\n            print('No')\n            return\n        if z >= k:\n            x = 0\n        elif x < k:\n            x = max(x + 1, k - z)\n        elif x >= k:\n            x = x + 1\n            if x - k > z:\n                print('No')\n                return\n        pz = max(z, k)\n    print('Yes')\nfor i in range(mint()):\n    solve()", "for _ in range(int(input())):\n    nkl = list(map(int, input().split()))\n    n = nkl[0]\n    k = nkl[1]\n    l = nkl[2]\n    d = list(map(int, input().split()))\n    flag = 1\n    count = 0\n    leez = 0\n    for i in range(n):\n        if d[i] > l:\n            flag = 0\n            break\n        else:\n            if l - d[i] >= k:\n                count = 0\n                continue\n            count += 1\n            if count == 1:\n                leez = l - d[i]\n                continue\n            leez = min(leez - 1, l - d[i])\n            if leez >= 0:\n                continue\n            if -leez <= l - d[i]:\n                continue\n            else:\n                flag = 0\n                break\n    if flag == 1:\n        print('Yes')\n    else:\n        print('No')", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k, l) = mints()\n    x = 0\n    pz = k\n    for d in mints():\n        z = l - d\n        if z < 0:\n            print('No')\n            return\n        if z >= k:\n            x = 0\n        elif x < k:\n            x = max(x + 1, k - z)\n        elif x >= k:\n            x = x + 1\n            if x - k > z:\n                print('No')\n                return\n        pz = max(z, k)\n    print('Yes')\nfor i in range(mint()):\n    solve()", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    dd = list(map(int, input().split()))\n    (t, curld, di) = (0, 0, False)\n    for d in [-2 ** 30, *dd]:\n        if d > l:\n            break\n        ld = l - d\n        if d + k <= l:\n            (curld, di) = (ld, False)\n            continue\n        if di:\n            if ld >= curld + 1:\n                curld += 1\n            else:\n                break\n        else:\n            curld = min(curld - 1, ld)\n            if curld == 0:\n                di = True\n    else:\n        print('Yes')\n        continue\n    print('No')", "t = int(input())\nwhile t > 0:\n    (n, k, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if max(a) > l:\n        print('No')\n    else:\n        for i in range(n):\n            if a[i] + k <= l:\n                a[i] = -1\n        ghata = -1\n        p = 1\n        y = 0\n        for i in range(n):\n            if a[i] == -1:\n                ghata = -1\n            elif ghata == -1:\n                ghata = l - a[i]\n                y = 0\n                if ghata == 0:\n                    y = 1\n                    ghata += 1\n                elif i != n - 1 and a[i + 1] != -1:\n                    ghata = ghata - 1\n                    if l < ghata + a[i + 1]:\n                        ghata = l - a[i + 1]\n            elif a[i] + ghata > l:\n                if y == 0:\n                    if l < ghata + a[i]:\n                        ghata = l - a[i]\n                    if ghata == 0:\n                        ghata += 1\n                        y = 1\n                    else:\n                        ghata = ghata - 1\n                else:\n                    p = 0\n                    break\n            elif y == 1 or ghata == 0:\n                ghata = ghata + 1\n                y = 1\n            else:\n                ghata = ghata - 1\n        if p == 0:\n            print('No')\n        else:\n            print('Yes')\n    t = t - 1", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    dd = list(map(int, input().split()))\n    t = 0\n    curld = 0\n    di = False\n    for d in [-2 ** 30, *dd]:\n        if d > l:\n            break\n        ld = l - d\n        if d + k <= l:\n            curld = ld\n            di = False\n            continue\n        if di:\n            if ld >= curld + 1:\n                curld += 1\n            else:\n                break\n        else:\n            curld = min(curld - 1, ld)\n            if curld == 0:\n                di = True\n    else:\n        print('Yes')\n        continue\n    print('No')", "t = int(input())\nfor _ in range(t):\n    (n, k, l) = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    last = 0\n    depths = []\n    for i in range(len(d)):\n        if d[i] <= l - k:\n            if len(d[last:i]) > 0:\n                depths.append(d[last:i])\n            last = i + 1\n    if len(d[last:]) > 0:\n        depths.append(d[last:])\n    cross = True\n    for a in depths:\n        ok = True\n        tide = k\n        down = True\n        for i in range(len(a)):\n            if a[i] > l:\n                ok = False\n                break\n            elif down:\n                if tide > l - a[i]:\n                    tide = l - a[i]\n                else:\n                    tide -= 1\n                if tide == 0:\n                    down = False\n            elif a[i] + tide + 1 > l:\n                ok = False\n                break\n            else:\n                tide += 1\n        if not ok:\n            cross = False\n            break\n    if cross:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().strip().split(' '))\n    arr = list(map(int, input().strip().split(' ')))\n    goods = []\n    bad = False\n    for (i, a) in enumerate(arr):\n        if a + k <= l:\n            goods.append(i)\n        if a > l:\n            bad = True\n            break\n    if bad:\n        print('No')\n        continue\n    goods.append(n)\n    prev = -1\n    for g in goods:\n        st = prev\n        en = g\n        if st + 1 == en:\n            prev = g\n            continue\n        tk = k\n        while st < en - 1 and tk > 0:\n            st += 1\n            tk -= 1\n            plc = arr[st] + tk\n            if plc > l:\n                tk -= plc - l\n            if tk < 0:\n                bad = True\n        if tk == 0:\n            while st < en - 1:\n                st += 1\n                tk += 1\n                plc = arr[st] + tk\n                if plc > l:\n                    bad = True\n                    break\n        if bad:\n            break\n        prev = g\n    if bad:\n        print('No')\n    else:\n        print('Yes')", "for t in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    d = [False]\n    d += list(map(int, input().split()))\n    safe = [0]\n    for i in range(n):\n        if d[i] + k <= l:\n            safe.append(i)\n    safe.append(n + 1)\n    n = len(safe)\n    not_drown = True\n    i = 1\n    while i < n and not_drown:\n        tide = k\n        down = True\n        start = safe[i - 1] + 1\n        end = safe[i]\n        for j in range(start, end):\n            if down:\n                tide -= 1\n            else:\n                tide += 1\n            if down:\n                tide -= max(0, d[j] + tide - l)\n            if tide < 0 or d[j] + tide > l:\n                not_drown = False\n                break\n            if tide == 0:\n                down = False\n        i += 1\n    if not_drown:\n        print('Yes')\n    else:\n        print('No')", "for t in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    d = list(map(int, input().split()))\n    a1 = 1 - k\n    b1 = k\n    for i in range(n):\n        if d[i] > l:\n            print('No')\n            break\n        a2 = max(d[i] - l, 1 - k)\n        b2 = min(l - d[i], k)\n        a = a1 + 1\n        if b1 == k:\n            a = 1 - k\n        a2 = max(a2, a)\n        if a2 > b2:\n            print('No')\n            break\n        a1 = a2\n        b1 = b2\n    else:\n        print('Yes')"]