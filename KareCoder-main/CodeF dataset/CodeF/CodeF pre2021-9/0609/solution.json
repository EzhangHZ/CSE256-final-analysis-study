["for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    (nums, _) = (sorted(map(int, input().split())), list(map(int, input().split())))\n    if 2 * k >= nums[-1] - nums[0]:\n        print(len(nums))\n        continue\n    f = [0] * (n + 1)\n    l = ans = 0\n    for (r, v) in enumerate(nums):\n        while v - nums[l] > k:\n            l += 1\n        f[r + 1] = max(f[r], r - l + 1)\n        ans = max(ans, f[l] + r - l + 1)\n    print(ans)", "import bisect\n\ndef solve(arr, n, k):\n    arr.sort()\n    endIndex = [bisect.bisect(arr, arr[i] + k) for i in range(n)]\n    maxLength = [None] * n\n    currMax = -1\n    for i in range(n - 1, -1, -1):\n        length = endIndex[i] - i\n        if length > currMax:\n            maxLength[i] = length\n            currMax = length\n        else:\n            maxLength[i] = currMax\n    ans = -1\n    for i in range(n):\n        end = endIndex[i]\n        if end == n:\n            ans = max(ans, end - i)\n        else:\n            ans = max(ans, end - i + maxLength[end])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [*map(int, input().split())][:2]\n    x = [*map(int, input().split())]\n    y = [*map(int, input().split())]\n    print(solve(x, n, k))", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef digitSum(x):\n    c = 0\n    while x:\n        c += x % 10\n        x //= 10\n    return c\n\ndef solve(k, numbers):\n    if not numbers:\n        return 0\n    numbers.sort()\n    low = 0\n    high = -1\n    best = [1 for i in range(len(numbers))]\n    overallBest = 0\n    for (n, i) in enumerate(numbers):\n        while low <= high and i - k > numbers[low]:\n            low += 1\n        if low > high:\n            high += 1\n        elif i - numbers[low] <= k:\n            high += 1\n        length = high - low + 1\n        if n > 0:\n            best[n] = max(best[n - 1], length)\n        if n >= length:\n            overallBest = max(overallBest, length + best[n - length])\n        else:\n            overallBest = best[n]\n    return overallBest\nlines = inp()\nfor i in range(lines):\n    v = inlt()\n    w = inlt()\n    _ = inlt()\n    print(solve(v[1], w))", "from bisect import bisect\n\ndef solve(arr, n, k):\n    endIndex = [bisect(arr, arr[i] + k) for i in range(n)]\n    maxLength = [None] * n\n    currMax = -1\n    ans = -1\n    for i in range(n - 1, -1, -1):\n        length = endIndex[i] - i\n        if length > currMax:\n            maxLength[i] = length\n            currMax = length\n        else:\n            maxLength[i] = currMax\n    for i in range(n):\n        end = endIndex[i]\n        ans = max(ans, end - i) if end == n else max(ans, end - i + maxLength[end])\n    return ans\nfor _ in range(int(input())):\n    (n, k) = [*map(int, input().split())][:2]\n    x = [*map(int, input().split())]\n    y = [*map(int, input().split())]\n    print(solve(sorted(x), n, k))", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef digitSum(x):\n    c = 0\n    while x:\n        c += x % 10\n        x //= 10\n    return c\n\ndef solve(k, numbers):\n    if not numbers:\n        return 0\n    numbers.sort()\n    v = deque()\n    best = [1 for i in range(len(numbers))]\n    overallBest = 0\n    for (n, i) in enumerate(numbers):\n        while v and i - k > v[0]:\n            v.popleft()\n        if not v:\n            v.append(i)\n        elif i - v[0] <= k:\n            v.append(i)\n        if n > 0:\n            best[n] = max(best[n - 1], len(v))\n        if n >= len(v):\n            overallBest = max(overallBest, len(v) + best[n - len(v)])\n        else:\n            overallBest = best[n]\n    return overallBest\nlines = inp()\nfor i in range(lines):\n    v = inlt()\n    w = inlt()\n    _ = inlt()\n    print(solve(v[1], w))", "import bisect\n\ndef solve(arr, n, k):\n    arr.sort()\n    endIndex = [bisect.bisect(arr, arr[i] + k) for i in range(n)]\n    maxLength = [None] * n\n    currMax = -1\n    for i in range(n - 1, -1, -1):\n        length = endIndex[i] - i\n        if length > currMax:\n            maxLength[i] = length\n            currMax = length\n        else:\n            maxLength[i] = currMax\n    ans = -1\n    for i in range(n):\n        end = endIndex[i]\n        if end == n:\n            ans = max(ans, end - i)\n        else:\n            ans = max(ans, end - i + maxLength[end])\n    return ans\nfor _ in range(int(input())):\n    (n, k) = [*map(int, input().split())][:2]\n    x = [*map(int, input().split())]\n    y = [*map(int, input().split())]\n    print(solve(x, n, k))", "from bisect import *\nI = lambda : map(int, input().split())\n(t,) = I()\nfor _ in [0] * t:\n    (n, k) = I()\n    x = sorted(I())\n    I()\n    a = q = 0\n    m = [n - i - bisect_left(x, x[~i] - k) for i in range(n)]\n    for i in range(n):\n        a = max(a, q + bisect_right(x, x[i] + k) - i)\n        q = max(q, m[~i])\n    print(a)", "import sys, itertools, collections, bisect\nfrom collections import deque, Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nread = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef solve():\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    L = [0] * n\n    for i in range(n):\n        j = bisect.bisect_left(x, x[i] + k + 1)\n        L[i] = j - i\n    R = [0] * n\n    R[-1] = L[-1]\n    for i in reversed(range(n - 1)):\n        R[i] = max(L[i], R[i + 1])\n    ans = 0\n    for i in range(n):\n        if i + L[i] < n:\n            ans = max(ans, L[i] + R[i + L[i]])\n        else:\n            ans = max(ans, L[i])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfrom collections import deque\nfrom collections import defaultdict\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().strip().split(' '))\n    x = list(map(int, input().strip().split(' ')))\n    y = list(map(int, input().strip().split(' ')))\n    x.sort()\n    ans = 0\n    d = deque()\n    dd = defaultdict(int)\n    f1 = 0\n    for i in range(n):\n        while d and x[i] - k > d[0]:\n            f1 = max(f1, dd[d.popleft()])\n        d.append(x[i])\n        ans = max(ans, f1 + len(d))\n        dd[x[i]] = len(d)\n    print(ans)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    (nums, _) = (sorted(map(int, input().split())), list(map(int, input().split())))\n    if 2 * k >= nums[-1] - nums[0]:\n        print(len(nums))\n        continue\n    f = [[0, 0] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        j = bisect_left(nums, nums[i - 1] - k)\n        f[i][0] = max(f[i - 1][0], i - j)\n        f[i][1] = max(f[i - 1][1], f[j][0] + i - j)\n    print(f[n][1])", "import bisect\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = input()\n    x.sort()\n    X = [bisect.bisect_right(x, x[i] + k) for i in range(n)]\n    Y = [0]\n    for i in range(n - 1, -1, -1):\n        Y += [max(Y[-1], X[i] - i)]\n    Y.reverse()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, X[i] - i + Y[X[i]])\n    print(ans)", "def run():\n    (n, k) = map(int, input().split())\n    xS = list(map(int, input().split()))\n    yS = list(map(int, input().split()))\n    (lMax, rMax) = ([0] * n, [0] * n)\n    xS.sort()\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while xS[j] - xS[i] > k:\n            j -= 1\n        rMax[i] = j - i + 1\n        if i + 1 < n:\n            rMax[i] = max(rMax[i], rMax[i + 1])\n    j = 0\n    for i in range(n):\n        while xS[i] - xS[j] > k:\n            j += 1\n        lMax[i] = i - j + 1\n        if i > 0:\n            lMax[i] = max(lMax[i], lMax[i - 1])\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, rMax[i + 1] + lMax[i])\n    print(ans)\nif 1:\n    for i in range(int(input())):\n        run()\nelse:\n    run()", "def main():\n    t = eval(input())\n    for cas in range(t):\n        (n, k) = map(int, input().split())\n        x = list(map(int, input().split()))\n        y = list(map(int, input().split()))\n        x.sort()\n        r = [0 for _ in range(n + 5)]\n        l = [0 for _ in range(n + 5)]\n        tmp = 0\n        for i in range(n):\n            while x[i] - x[tmp] > k:\n                tmp += 1\n            l[i] = i - tmp + 1\n            if i > 0:\n                l[i] = max(l[i], l[i - 1])\n        tmp = n - 1\n        for i in range(n - 1, -1, -1):\n            while x[tmp] - x[i] > k:\n                tmp -= 1\n            r[i] = tmp - i + 1\n            if i + 1 < n:\n                r[i] = max(r[i], r[i + 1])\n        ret = 1\n        for i in range(n - 1):\n            ret = max(ret, r[i + 1] + l[i])\n        print(ret)\nmain()", "def main():\n    t = eval(input())\n    for cas in range(t):\n        (n, k) = map(int, input().split())\n        x = list(map(int, input().split()))\n        y = list(map(int, input().split()))\n        x.sort()\n        r = [0 for _ in range(n + 5)]\n        l = [0 for _ in range(n + 5)]\n        tmp = 0\n        for i in range(n):\n            while x[i] - x[tmp] > k:\n                tmp += 1\n            l[i] = i - tmp + 1\n            if i > 0:\n                l[i] = max(l[i], l[i - 1])\n        tmp = n - 1\n        for i in range(n - 1, -1, -1):\n            while x[tmp] - x[i] > k:\n                tmp -= 1\n            r[i] = tmp - i + 1\n            if i + 1 < n:\n                r[i] = max(r[i], r[i + 1])\n        ret = 1\n        for i in range(n - 1):\n            ret = max(ret, r[i + 1] + l[i])\n        print(ret)\nmain()", "from bisect import *\nI = lambda : map(int, input().split())\n(t,) = I()\nfor _ in [0] * t:\n    (n, k) = I()\n    x = sorted(I())\n    I()\n    a = q = 0\n    m = [n - i - bisect_left(x, x[~i] - k) for i in range(n)]\n    for i in range(n):\n        a = max(a, q + bisect_right(x, x[i] + k) - i)\n        q = max(q, m[~i])\n    print(a)", "def solution(n, k, x, y):\n    x.sort()\n    (l, r, a, b, c) = ([], [], 0, 0, 1)\n    while b < n:\n        if c <= n - 1:\n            while x[c] - x[b] <= k:\n                c += 1\n                if c == n:\n                    break\n        while x[b] - x[a] > k:\n            a += 1\n        r.append(c - b)\n        l.append(b - a + 1)\n        b += 1\n    for i in range(1, n):\n        l[i] = max(l[i - 1], l[i])\n        r[n - 1 - i] = max(r[n - 1 - i], r[n - i])\n    max_ = l[0]\n    for i in range(n - 1):\n        max_ = max(max_, l[i] + r[i + 1])\n    return max_\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    x = list(map(int, input().split(' ')))\n    y = list(map(int, input().split(' ')))\n    print(solution(n, k, x, y))", "import sys\nimport bisect as bi\nimport math as mt\nimport collections as cc\nimport sys\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n, k) = I()\n    x = sorted(I())\n    y = sorted(I())\n    ans = 0\n    ma = [0] * (n + 3)\n    for i in range(n - 1, -1, -1):\n        (l, r) = (x[i], x[i] + k)\n        ll = bi.bisect_left(x, l)\n        rr = bi.bisect_right(x, r)\n        now = rr - ll\n        ma[i] = max(now, ma[i + 1])\n        ans = max(ans, now + ma[rr])\n    print(ans)", "from sys import stdin\n\nclass Input:\n\n    def readline(self):\n        return stdin.readline().strip()\n\n    def read_int(self):\n        return int(self.readline())\n\n    def read_list(self):\n        return self.readline().split()\n\n    def test_cases(self):\n        cases = self.read_int()\n        for case in range(cases):\n            yield self\n\nclass Problem:\n\n    def __init__(self, input):\n        (n, k) = list(map(int, input.read_list()))\n        xcoord = list(map(int, input.read_list()))\n        ycoord = list(map(int, input.read_list()))\n        count = {0: 0}\n        for x in xcoord:\n            count[x] = count.get(x, 0) + 1\n        a = []\n        for pair in count.items():\n            a.append(pair)\n        a.sort(key=lambda p: p[0])\n        i = 1\n        j = 0\n        n = len(a)\n        s = [0 for i in range(n)]\n        dp = [0 for i in range(n)]\n        ans = 0\n        while i < n:\n            s[i] = s[i - 1] + a[i][1]\n            while j + 1 < i and a[j + 1][0] + k < a[i][0]:\n                j += 1\n                s[i] -= a[j][1]\n            dp[i] = max(dp[i - 1], s[i])\n            ans = max(ans, s[i] + dp[j])\n            i += 1\n        print(ans)\nfor case_input in Input().test_cases():\n    Problem(case_input)", "T = int(input())\nfor case in range(T):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    suf = [0 for i in range(n + 2)]\n    ans = [0 for i in range(n + 2)]\n    x.sort()\n    j = 0\n    for i in range(n):\n        while j < n and x[j] <= x[i] + k:\n            j += 1\n        ans[i] = j - i\n    for i in range(n - 1, -1, -1):\n        suf[i] = max(ans[i], suf[i + 1])\n    mx = 0\n    for i in range(n):\n        mx = max(mx, ans[i] + suf[min(n, ans[i] + i)])\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    if n <= 2:\n        print(n)\n        continue\n    l = [0] * n\n    j = 0\n    for i in range(n):\n        while x[i] - x[j] > k:\n            j += 1\n        l[i] = i - j + 1\n        if i > 0:\n            l[i] = max(l[i], l[i - 1])\n    j = n - 1\n    r = [0] * n\n    for i in range(n - 1, -1, -1):\n        while x[j] - x[i] > k:\n            j -= 1\n        r[i] = j - i + 1\n        if i < n - 1:\n            r[i] = max(r[i], r[i + 1])\n    c = 2\n    for i in range(n - 1):\n        c = max(c, l[i] + r[i + 1])\n    print(c)", "import bisect\ntest = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    yp = list(map(int, input().split()))\n    x.sort()\n    ans = 0\n    ma = [0] * (n + 3)\n    for i in range(n - 1, -1, -1):\n        (l, r) = (x[i], x[i] + k)\n        ll = bisect.bisect_left(x, l)\n        rr = bisect.bisect_right(x, r)\n        now = rr - ll\n        ma[i] = max(now, ma[i + 1])\n        ans = max(ans, now + ma[rr])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = sorted(map(int, input().split()))\n    input()\n    j = n - 1\n    r = [-1] * n\n    l = [-1] * n\n    for i in range(n - 1, -1, -1):\n        if x[j] - x[i] > k:\n            j = j - 1\n        r[i] = j - i + 1\n        if i < n - 1:\n            r[i] = max(r[i], r[i + 1])\n    j = 0\n    for i in range(0, n, 1):\n        if x[i] - x[j] > k:\n            j = j + 1\n        l[i] = i - j + 1\n        if i > 0:\n            l[i] = max(l[i], l[i - 1])\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, l[i] + r[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    plat1 = [0] * n\n    plat2 = [0] * n\n    p_left = 0\n    for i in range(n):\n        if x[i] > x[p_left] + k:\n            p_left += 1\n        plat1[i] = i - p_left + 1\n        if i > 0:\n            plat1[i] = max(plat1[i - 1], plat1[i])\n    p_right = n - 1\n    for i in range(n - 1, -1, -1):\n        if x[i] < x[p_right] - k:\n            p_right -= 1\n        plat2[i] = p_right - i + 1\n        if i < n - 1:\n            plat2[i] = max(plat2[i + 1], plat2[i])\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, plat1[i] + plat2[i + 1])\n    print(ans)", "T = int(input())\nfor case in range(T):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    suf = [0 for i in range(n + 2)]\n    ans = [0 for i in range(n + 2)]\n    x = sorted(x)\n    j = 0\n    for i in range(n):\n        while j < n and x[j] <= x[i] + k:\n            j += 1\n        ans[i] = j - i\n    for i in range(n - 1, -1, -1):\n        suf[i] = max(ans[i], suf[i + 1])\n    mx = 0\n    for i in range(n):\n        mx = max(mx, ans[i] + suf[min(n, ans[i] + i)])\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    a.sort()\n    input()\n    l = []\n    r = [0] * n\n    j = 0\n    for i in range(n):\n        while a[i] - a[j] > k:\n            j += 1\n        l.append(i - j + 1)\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while a[j] - a[i] > k:\n            j -= 1\n        r[i] = j - i + 1\n    ml = [l[0]] * n\n    for i in range(1, n):\n        ml[i] = max(l[i], ml[i - 1])\n    mr = [r[-1]] * n\n    for i in range(n - 2, -1, -1):\n        mr[i] = max(r[i], mr[i + 1])\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, ml[i] + mr[i + 1])\n    if n == 1:\n        print(1)\n    else:\n        print(ans)", "import sys\nimport bisect as bi\nimport math as mt\nimport collections as cc\nimport sys\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n, k) = I()\n    x = sorted(I())\n    y = sorted(I())\n    ans = 0\n    ma = [0] * (n + 3)\n    for i in range(n - 1, -1, -1):\n        (l, r) = (x[i], x[i] + k)\n        ll = bi.bisect_left(x, l)\n        rr = bi.bisect_right(x, r)\n        now = rr - ll\n        ma[i] = max(now, ma[i + 1])\n        ans = max(ans, now + ma[rr])\n    print(ans)", "import sys\nimport bisect as bi\nimport math as mt\nimport collections as cc\nimport sys\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n, k) = I()\n    x = sorted(I())\n    y = sorted(I())\n    ans = 0\n    ma = [0] * (n + 3)\n    for i in range(n - 1, -1, -1):\n        (l, r) = (x[i], x[i] + k)\n        ll = bi.bisect_left(x, l)\n        rr = bi.bisect_right(x, r)\n        now = rr - ll\n        ma[i] = max(now, ma[i + 1])\n        ans = max(ans, now + ma[rr])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = map(int, input().split())\n    x.sort()\n    start = 0\n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n):\n        if x[i] - x[start] <= k:\n            p[i] = i - start + 1\n        else:\n            while x[i] - x[start] > k:\n                start += 1\n            p[i] = i - start + 1\n    last = n - 1\n    s = [0] * n\n    s[-1] = 1\n    for i in range(len(s) - 2, -1, -1):\n        if x[last] - x[i] <= k:\n            s[i] = last - i + 1\n        else:\n            while x[last] - x[i] > k:\n                last -= 1\n            s[i] = last - i + 1\n    for i in range(1, n):\n        p[i] = max(p[i], p[i - 1], 0)\n    mx = p[0]\n    for i in range(n - 1):\n        mx = max(mx, p[i] + s[i + 1])\n    print(max(mx, max(p), max(s)))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    arr.sort()\n    i = j = 0\n    end = [0] * n\n    start = [0] * n\n    while j < n:\n        if arr[j] - arr[i] <= k:\n            if j:\n                end[j] = max(end[j - 1], j - i + 1)\n            else:\n                end[j] = j - i + 1\n            j += 1\n        else:\n            i += 1\n    i = j = n - 1\n    while i >= 0:\n        if arr[j] - arr[i] <= k:\n            if i == n - 1:\n                start[i] = j - i + 1\n            else:\n                start[i] = max(start[i + 1], j - i + 1)\n            i -= 1\n        else:\n            j -= 1\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, start[i + 1] + end[i])\n    print(ans)", "h = int(input())\nl = []\nfor i in range(h):\n    (n, k) = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    a = [None] * n\n    b = [None] * n\n    j = 0\n    for h in range(n):\n        while x[h] - x[j] > k:\n            j += 1\n        b[h] = h + 1 - j\n        if h > 0:\n            b[h] = max(b[h], b[h - 1])\n    j = n - 1\n    for h in range(n - 1, -1, -1):\n        while x[j] - x[h] > k:\n            j -= 1\n        a[h] = j - h + 1\n        if h + 1 < n:\n            a[h] = max(a[h], a[h + 1])\n    ans = 1\n    for i in range(n - 1):\n        if a[i + 1] + b[i] > ans:\n            ans = max(ans, a[i + 1] + b[i])\n    print(ans)", "h = int(input())\nl = []\nfor i in range(h):\n    (n, k) = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    a = [None] * n\n    b = [None] * n\n    x.sort()\n    j = n - 1\n    for h in range(n - 1, -1, -1):\n        while x[j] - x[h] > k:\n            j -= 1\n        a[h] = j - h + 1\n        if h + 1 < n:\n            a[h] = max(a[h], a[h + 1])\n    j = 0\n    for h in range(n):\n        while x[h] - x[j] > k:\n            j += 1\n        b[h] = h - j + 1\n        if h > 0:\n            b[h] = max(b[h], b[h - 1])\n    ans = 1\n    for h in range(n - 1):\n        ans = max(ans, a[h + 1] + b[h])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    (l, r) = ([0] * n, [0] * n)\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while x[j] - x[i] > k:\n            j -= 1\n        r[i] = j - i + 1\n        if i + 1 < n:\n            r[i] = max(r[i], r[i + 1])\n    j = 0\n    for i in range(n):\n        while x[i] - x[j] > k:\n            j += 1\n        l[i] = i - j + 1\n        if i > 0:\n            l[i] = max(l[i], l[i - 1])\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, l[i] + r[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, p) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = input()\n    a.sort()\n    b = []\n    c = []\n    j = 0\n    k = 0\n    if n <= 2:\n        print(n)\n        continue\n    for i in range(n):\n        while a[i] - a[j] > p:\n            j += 1\n        while k < n and a[k] - a[i] <= p:\n            k += 1\n        k -= 1\n        b.append(i - j + 1)\n        c.append(k - i + 1)\n    for i in range(1, n - 1):\n        b[i] = max(b[i], b[i - 1])\n        c[n - i - 1] = max(c[n - i - 1], c[n - i])\n    ss = 0\n    for i in range(n - 1):\n        ss = max(ss, b[i] + c[i + 1])\n    print(ss)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    xs = map(int, input().split())\n    ys = map(int, input().split())\n    points_at_x = dict()\n    for x in xs:\n        points_at_x[x] = points_at_x.get(x, 0) + 1\n    points = sorted(points_at_x.keys())\n    m = len(points)\n    saved = [0] * m\n    p_ends = [m] * m\n    start = 0\n    end = 0\n    while start < m and start <= end and (end < m + 1):\n        if end < m and points[end] - points[start] <= k:\n            saved[start] += points_at_x[points[end]]\n            end += 1\n        else:\n            p_ends[start] = end\n            start += 1\n            if start < m:\n                saved[start] = saved[start - 1] - points_at_x[points[start - 1]]\n    max_saved = [0] * m\n    max_saved[m - 1] = saved[m - 1]\n    for j in range(m - 1):\n        max_saved[m - 2 - j] = max(max_saved[m - 1 - j], saved[m - 2 - j])\n    result = 0\n    for j in range(m):\n        temp = saved[j]\n        temp2 = p_ends[j]\n        if temp2 < m:\n            temp += max_saved[temp2]\n        result = max(result, temp)\n    print(result)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    best_st = [0, 0]\n    ans = 0\n    queue = collections.deque()\n    x.sort()\n    for i in range(len(x)):\n        while len(queue) and x[i] - queue[0] > k:\n            queue.popleft()\n        queue.append(x[i])\n        best_st[-1] = max(best_st[-1], len(queue))\n        best_st.append(best_st[-1])\n    t = 0\n    queue = collections.deque()\n    for i in range(len(x)):\n        while len(queue) and x[i] - queue[0] > k:\n            queue.popleft()\n        queue.append(x[i])\n        while t < len(x) - 1 and x[t] < queue[0]:\n            t += 1\n        ans = max(len(queue) + best_st[t], ans)\n    print(ans)", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = stdin.readline()\n    if n == 1:\n        print(1)\n        continue\n    endi = [1] * n\n    starti = [1] * n\n    x.sort()\n    curri = 0\n    i = 1\n    while i < n:\n        if x[i] - x[curri] < k:\n            endi[i] = i - curri + 1\n            i += 1\n        elif x[i] - x[curri] == k:\n            endi[i] = i - curri + 1\n            i += 1\n        else:\n            curri += 1\n    for i in range(1, n):\n        endi[i] = max(endi[i], endi[i - 1])\n    curri = n - 1\n    i = n - 2\n    while i >= 0:\n        if x[curri] - x[i] < k:\n            starti[i] = curri - i + 1\n            i -= 1\n        elif x[curri] - x[i] == k:\n            starti[i] = curri - i + 1\n            i -= 1\n        else:\n            curri -= 1\n    for i in range(n - 2, -1, -1):\n        starti[i] = max(starti[i], starti[i + 1])\n    maxi = x.count(x[0])\n    for i in range(n - 1):\n        s = endi[i] + starti[i + 1]\n        if s > maxi:\n            maxi = s\n    print(maxi)", "t = int(input())\nfor p in range(t):\n    arr = [int(i) for i in input().split()]\n    n = arr[0]\n    k = arr[1]\n    x_list = [int(i) for i in input().split()]\n    y_list = [int(i) for i in input().split()]\n    coordinates = []\n    for i in range(n):\n        coordinates.append([x_list[i], y_list[i]])\n    coordinates = sorted(coordinates, key=lambda x: x[0])\n    dp = [0 for i in range(n)]\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while j >= i and coordinates[j][0] - coordinates[i][0] > k:\n            j -= 1\n        dp[i] = j - i + 1\n    dp1 = list(dp)\n    dp1 = dp1[::-1]\n    suffix_dp = [0 for i in range(n)]\n    suffix_dp[0] = dp1[0]\n    for i in range(1, n):\n        suffix_dp[i] = max(suffix_dp[i - 1], dp1[i - 1])\n    suffix_dp = suffix_dp[::-1]\n    dp2 = [0 for i in range(n)]\n    dp2[0] = 1\n    j = 0\n    for i in range(n):\n        while j <= i and coordinates[i][0] - coordinates[j][0] > k:\n            j += 1\n        dp2[i] = i - j + 1\n    ans = 0\n    for i in range(n):\n        if i == n - 1:\n            ans = max(ans, dp2[i])\n        else:\n            ans = max(dp2[i] + suffix_dp[i], ans)\n    print(ans)", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    points = []\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    for i in range(n):\n        points.append([x[i], y[i]])\n    points.sort()\n    (l, r) = (0, 0)\n    lrs = []\n    while l < n:\n        r = max(r, l)\n        while r < n and points[r][0] - points[l][0] <= k:\n            r += 1\n        lrs.append(r - l)\n        l += 1\n    (l, r) = (0, 0)\n    rrs = []\n    points.reverse()\n    while l < n:\n        r = max(r, l)\n        while r < n and points[l][0] - points[r][0] <= k:\n            r += 1\n        rrs.append(r - l)\n        l += 1\n    rrs.reverse()\n    prer = [0]\n    for i in range(len(lrs) - 1, -1, -1):\n        prer.append(max(prer[-1], lrs[i]))\n    ans = 0\n    prer.reverse()\n    for i in range(n):\n        ans = max(rrs[i] + prer[i + 1], ans)\n    print(ans)"]