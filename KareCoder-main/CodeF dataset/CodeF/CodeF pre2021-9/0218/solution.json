["n = int(input())\nfor i in range(n):\n    a = int(input())\n    x = int((a + 3) / 4)\n    res = '9' * int(a - x)\n    res += '8' * int(x)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = (n + 3) // 4\n    print('9' * (n - x) + '8' * x)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    k = n // 4\n    if n % 4 != 0:\n        k += 1\n    ans = '9' * (n - k) + '8' * k\n    print(ans)", "for _ in [0] * int(input()):\n    n = int(input())\n    print('9' * (n - 1 - (n - 1) // 4) + '8' * (1 + (n - 1) // 4))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = (n + 3) // 4\n    print('9' * (n - x) + '8' * x)", "from math import ceil\nfor i in range(int(input())):\n    n = int(input())\n    print('9' * (n - ceil(n / 4)) + '8' * ceil(n / 4))", "for s in [*open(0)][1:]:\n    n = int(s)\n    k = 0 - -n // 4\n    print('9' * (n - k) + '8' * k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = (n + 3) // 4\n    b = '9' * (n - a)\n    b += '8' * a\n    print(b)", "import math\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    eight = math.ceil(n / 4)\n    print((n - eight) * '9' + '8' * eight)", "n_sets = int(input())\nfor _ in range(n_sets):\n    n_digits = int(input())\n    n8 = n_digits // 4 + int(n_digits % 4 != 0)\n    n9 = n_digits - n8\n    print('9' * n9 + '8' * n8)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    eight = ceil(n / 4)\n    print('9' * (n - eight), '8' * eight, sep='')", "import math\nfor cases in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('8')\n    else:\n        remain = math.ceil(n / 4)\n        print('9' * (n - remain) + '8' * remain)", "for _ in range(int(input())):\n    n = int(input())\n    t = (n + 3) // 4\n    s = n - t\n    print('9' * s + '8' * t)", "n = {}\nt = int(input())\nfor a in range(t):\n    n = int(input())\n    npureeights = n // 4\n    nmaybeeights = n % 4\n    if nmaybeeights != 0:\n        npureeights += 1\n    rp = '9' * (n - npureeights) + '8' * npureeights\n    print(rp)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        n8 = ceil(n / 4)\n        print('9' * (n - n8) + '8' * n8)\nsolve()", "for i in range(int(input())):\n    n = int(input())\n    print('9' * (n - (n - 1) // 4 - 1) + '8' * ((n - 1) // 4 + 1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = n\n    eight = n // 4\n    if n % 4 != 0:\n        eight += 1\n    nine = n - eight\n    ans = nine * '9' + eight * '8'\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        k = n // 4\n    else:\n        k = n // 4 + 1\n    print('9' * (n - k) + '8' * k)", "for _ in range(int(input())):\n    n = int(input())\n    (m, r) = divmod(n, 4)\n    if r == 0:\n        print('9' * (n - m) + '8' * m)\n    else:\n        print('9' * (n - m - 1) + '8' * (m + 1))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = ceil(n / 4)\n    s = '9' * (n - h) + '8' * h\n    print(s)", "import math\nt = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    v = int(math.ceil(n / 4))\n    x = '9' * (n - v) + '8' * v\n    res.append(x)\nfor i in res:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print((n - (n - 1) // 4 - 1) * '9' + ((n - 1) // 4 + 1) * '8')", "for _ in range(int(input())):\n    n = int(input())\n    x = (n + 3) // 4\n    print('9' * (n - x) + '8' * x)", "exec(int(input()) * \"a=int(input())-1;print((a-a//4)*'9'+(a//4+1)*'8');\")\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "for _ in range(0, int(input())):\n    n = int(input())\n    f = -(-n // 4)\n    o = n - f\n    print('9' * o + '8' * f)", "import math\nt = int(input())\nr = []\nfor i in range(t):\n    n = int(input())\n    b = math.ceil(n / 4)\n    a = ['9'] * (n - b)\n    c = ['8'] * b\n    a = a + c\n    ac = ''.join(a)\n    r.append(ac)\nfor i in range(len(r)):\n    print(r[i])", "import math\nfor _ in [0] * int(input()):\n    n = int(input())\n    times = int(math.ceil(n / 4))\n    print((n - times) * '9' + times * '8')", "for _ in range(int(input())):\n    a = int(input())\n    print('9' * (a * 3 // 4) + '8' * (a - a * 3 // 4))", "for _ in range(int(input())):\n    n = int(input())\n    c = n * 3 // 4\n    r = '9' * c + '8' * (n - c)\n    print(r)", "def solve():\n    n = int(input())\n    if n % 4 != 0:\n        notmatter = n // 4 + 1\n    else:\n        notmatter = n // 4\n    ans = '9' * (n - notmatter)\n    ans += '8' * notmatter\n    return ans\nT = int(input())\nfor i in range(T):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(8)\n    else:\n        k = math.ceil(n / 4)\n        print('9' * (n - k) + '8' * k)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    a = n // 4\n    if n % 4 != 0:\n        a += 1\n    s = '9' * (n - a) + '8' * a\n    res.append(s)\nfor i in res:\n    print(i)", "exec(int(input()) * \"a=int(input())-1;print((a-a//4)*'9'+(a//4+1)*'8');\")", "for _ in range(int(input())):\n    n = int(input())\n    s = '8' * ((n + 3) // 4)\n    k = '9' * (n - len(s))\n    print(k + s)", "for i in range(int(input())):\n    x = int(input())\n    if x % 4 != 0:\n        n = x // 4 + 1\n    else:\n        n = x // 4\n    print('9' * (x - n) + '8' * n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = math.ceil(n / 4)\n    print('9' * (n - x) + '8' * x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    eights = n // 4 + bool(n % 4)\n    print('9' * (n - eights), '8' * eights, sep='')", "for i in range(int(input())):\n    n = int(input())\n    print('9' * int(n - (n + 3) // 4) + '8' * int((n + 3) // 4))", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    r = ceil(n / 4)\n    p = n - r\n    s = '9' * p + '8' * r\n    print(s)", "t = int(input())\ncount = 0\nwhile t != count:\n    count += 1\n    n = int(input())\n    floor = n // 4\n    if n % 4 != 0:\n        divisivel = floor + 1\n    else:\n        divisivel = floor\n    print('9' * (n - divisivel) + '8' * divisivel)", "def str2bcd(s):\n    bcd_list = []\n    ans = []\n    for i in range(0, len(s), 4):\n        bcd_list.append(s[i:i + 4])\n    for e in bcd_list:\n        ans.append(int(e, 2))\n    return ''.join(map(str, ans))\n\ndef answer(n):\n    bstr = n * '1001'\n    bstr = list(bstr)\n    for i in range(-1, -(n + 1), -1):\n        bstr[i] = '0'\n    bstr = ''.join(bstr)\n    bstr = str2bcd(bstr)\n    return bstr\n\ndef answer2(n):\n    num_eights = (n - 1) // 4 + 1\n    num_nines = n - num_eights\n    return num_nines * '9' + num_eights * '8'\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    for j in range(t):\n        n[j] = int(input())\n    for j in range(t):\n        print(answer2(n[j]))\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = n // 4\n    if n % 4 == 0:\n        print('9' * (n - c), end='')\n        print('8' * c)\n    else:\n        print('9' * (n - c - 1), end='')\n        print('8' * (c + 1))", "from math import ceil\nfor t in range(int(input())):\n    n = int(input())\n    print('9' * (n - ceil(n / 4)) + '8' * ceil(n / 4))", "for i in range(int(input())):\n    n = int(input())\n    print('9' * (n - ((n - 1) // 4 + 1)) + '8' * ((n - 1) // 4 + 1))", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    m = n / 4\n    m = ceil(m)\n    print('9' * (n - m) + '8' * m)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    n1 = math.ceil(n / 4)\n    x = '9' * (n - n1)\n    x = x + '8' * n1\n    print(x)", "for k in range(int(input())):\n    n = int(input())\n    p = (n + 3) // 4\n    print('9' * (n - p) + '8' * p)", "for _ in range(int(input())):\n    n = int(input())\n    n = n - 1\n    cal = n // 4\n    rem = n - cal\n    print('9' * rem, end='')\n    print('8' * cal, end='')\n    print('8')", "for _ in range(int(input())):\n    n = int(input())\n    x = (n + 3) // 4\n    print('9' * (n - x), end='')\n    print('8' * x)", "for i in range(int(input())):\n    n = int(input())\n    c = (n + 3) // 4\n    print('9' * (n - c), end='')\n    print('8' * c)", "for _ in range(int(input())):\n    n = int(input())\n    point = (n + 3) // 4\n    s9 = '9' * (n - point)\n    s8 = '8' * point\n    print(s9 + s8)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 4 == 0:\n        x = n // 4\n    else:\n        x = n // 4 + 1\n    print('9' * (n - x) + '8' * x)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    ans = '' + '9' * (n - ceil(n / 4))\n    ans += '8' * ceil(n / 4)\n    print(ans)", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    t = math.ceil(n / 4)\n    r = n - t\n    d = '9' * r + '8' * t\n    print(d)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    x = n // 4 if n % 4 == 0 else n // 4 + 1\n    print('9' * (n - x) + '8' * x)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    num = (n + 3) // 4\n    print('9' * (n - num) + '8' * num)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    eights = (n + 3) // 4\n    nines = n - eights\n    print('9' * nines + '8' * eights)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    amount_of_eights = (n - 1) // 4 + 1\n    number = (n - amount_of_eights) * '9'\n    print(''.join((number, amount_of_eights * '8')))", "for _ in range(int(input())):\n    n = int(input())\n    k = (n + 3) // 4\n    print((n - k) * '9' + k * '8')", "for _ in range(int(input())):\n    n = int(input())\n    if n % 4 == 0:\n        k = n // 4\n    else:\n        k = n // 4 + 1\n    print((n - k) * '9' + k * '8')", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    l = []\n    n = math.ceil(x / 4)\n    for i in range(n):\n        l.append('8')\n    for i in range(x - n):\n        l.append('9')\n    l.reverse()\n    print(''.join(l))", "from math import *\nimport sys\ninput = sys.stdin.readline\na = int(input())\nfor x in range(a):\n    b = int(input())\n    if b == 1:\n        print(8)\n    else:\n        n = ceil(b / 4)\n        t = (b - n) * '9' + n * '8'\n        print(t)", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    n1 = n\n    n = math.ceil(n / 4)\n    print('9' * (n1 - n) + '8' * n)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    if n % 4 != 0:\n        m = n // 4 + 1\n    else:\n        m = n // 4\n    n = n - m\n    a = ''\n    for j in range(n):\n        a += '9'\n    for j in range(m):\n        a += '8'\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = (n - 1) // 4 + 1\n    k = n - m\n    ans = '9' * k + '8' * m\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor tests in range(t):\n    n = int(input())\n    x = (n + 3) // 4\n    print('9' * (n - x) + '8' * x)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = (n + 3) // 4\n    print('9' * (n - a) + '8' * a)", "gi = lambda : list(map(int, input().split()))\nfor _ in range(gi()[0]):\n    (n,) = gi()\n    d = n // 4\n    if n % 4:\n        d += 1\n    print('9' * (n - d) + '8' * d)", "for t in range(int(input())):\n    n = int(input())\n    m = (n + 3) // 4\n    print('9' * (n - m) + '8' * m)", "import math as mt\nfor i in range(int(input())):\n    z = int(input())\n    p = mt.ceil(z / 4)\n    print((z - p) * '9' + p * '8')", "for tt in range(int(input())):\n    n = int(input())\n    num = (n + 3) // 4\n    val = '9' * (n - num) + '8' * num\n    print(val)", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\nTC = int(input())\nfor tc in range(TC):\n    N = int(input())\n    neights = (N - 1) // 4 + 1\n    res = '9' * (N - neights) + '8' * neights\n    print(res)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    p = ceil(n / 4)\n    print('9' * (n - p) + '8' * p)", "for w in range(int(input())):\n    n = int(input())\n    a = n // 4 + int(n % 4 != 0)\n    s = '9' * (n - a) + '8' * a\n    print(s)", "def min_num(n):\n    k = n // 4\n    x = n % 4\n    if x == 0:\n        s = '9' * (n - k) + '8' * k\n        return s\n    else:\n        s = '9' * (n - k - 1) + '8' * (k + 1)\n        return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_num(n))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    hg = math.ceil(n / 4)\n    s = '9' * (n - hg)\n    s += '8' * hg\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n8 = n // 4\n    if n % 4 != 0:\n        n8 += 1\n    print('9' * (n - n8) + '8' * n8)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    c8 = ceil(n / 4)\n    c9 = n - c8\n    print('9' * c9 + '8' * c8)", "def ceil(x, y):\n    if x // y - x / y == 0:\n        return x // y\n    else:\n        return x // y + 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = ceil(n, 4)\n    res = '9' * (n - x) + '8' * x\n    print(res)", "for i1 in range(int(input())):\n    n = int(input())\n    if n % 4 != 0:\n        t = n // 4 + 1\n    else:\n        t = n // 4\n    s = n - t\n    print('9' * s, end='')\n    print('8' * t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    eights = (n + 3) // 4\n    nines = n - eights\n    ans = '9' * nines + '8' * eights\n    print(ans)", "import math\n\ndef solve():\n    n = int(input().strip())\n    eigths = int(math.ceil(n / 4))\n    nines = n - eigths\n    print('9' * nines + '8' * eigths)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(8)\n    else:\n        lm = (n + 3) // 4\n        res = '9' * (n - lm) + '8' * lm\n        print(res)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    rem = math.ceil(n / 4)\n    print('9' * (n - rem) + '8' * rem)", "import math\nfor test in range(int(input())):\n    n = int(input())\n    count = math.ceil(n / 4)\n    ans = '8' * count\n    ans = '9' * (n - count) + ans\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    s = math.ceil(n / 4)\n    a = '9' * (n - s)\n    a = a + '8' * s\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    eights = n // 4 + (1 if n % 4 else 0)\n    nines = n - eights\n    print(nines * '9' + eights * '8')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print('9' * (n - n // 4) + '8' * (n // 4))\n    else:\n        print('9' * (n - n // 4 - 1) + '8' * (n // 4 + 1))", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    x = ceil(n / 4)\n    print((n - x) * '9' + x * '8')", "d = {1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4}\nt = int(input())\nfor u in range(t):\n    n = int(input())\n    a = 3 * n // 4\n    s = '9' * a\n    s += '8' * (n - a)\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = math.ceil(n / 4)\n    y = n - x\n    a = '9'\n    b = '8'\n    str = a * y + b * x\n    print(str)", "n = int(input())\nt = []\nfor i in range(0, n):\n    t.append(int(input()))\nfor i in range(0, n):\n    bitlen = t[i] * 3 // 4\n    if bitlen == 0:\n        print('8')\n    else:\n        print('9' * bitlen + '8' * (t[i] - bitlen))", "for i in range(int(input())):\n    n = int(input())\n    eight = (n + 4 - 1) // 4\n    print((n - eight) * '9' + eight * '8')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    e = n // 4\n    if n % 4 != 0:\n        e += 1\n    eight = '8' * e\n    nine = '9' * (n - e)\n    print(nine + eight)", "def readn():\n    return int(input())\n\ndef readlist():\n    return list(map(int, input().split()))\n\ndef readnos():\n    return map(int, input().split())\nfor _ in range(readn()):\n    n = int(input())\n    if n % 4 == 0:\n        a = n // 4 * '8'\n        b = (n - n // 4) * '9'\n        print(b + a)\n    else:\n        a = (n // 4 + 1) * '8'\n        b = (n - n // 4 - 1) * '9'\n        print(b + a)", "def solve():\n    n = int(input())\n    m = n // 4\n    if n % 4 == 0:\n        return '9' * (n - m) + '8' * m\n    else:\n        return '9' * (n - m - 1) + '8' * (m + 1)\n\ndef main():\n    t = int(input())\n    ANS = [solve() for _ in range(t)]\n    print('\\n'.join(ANS))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(8)\n    elif n == 2:\n        print(98)\n    elif n == 3:\n        print(998)\n    elif n == 4:\n        print(9998)\n    else:\n        rem = n % 4\n        if n % 4 != 0:\n            ass = int(n // 4) + 1\n        else:\n            ass = int(n // 4)\n        ni = '9'\n        ei = '8'\n        ze = '0'\n        z = n - ass\n        print(ni * z + ei * (n - z))", "import math\nt = int(input())\nwhile t > 0:\n    a = int(input())\n    s = ''\n    if a == 1:\n        s = 8\n    else:\n        s = '9' * (a - math.ceil(a / 4)) + '8' * math.ceil(a / 4)\n    print(s)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    r = n // 4\n    if n % 4 > 0:\n        r += 1\n    ans = '9' * (n - r) + '8' * r\n    print(ans)"]