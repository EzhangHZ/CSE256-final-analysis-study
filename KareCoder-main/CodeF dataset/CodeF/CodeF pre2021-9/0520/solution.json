["def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nli = [1]\nn = 2\nwhile li[-1] < 10 ** 16:\n    li.append(li[-1] * n // gcd(li[-1], n))\n    n += 1\n\ndef prob():\n    n = int(input())\n    mod = 10 ** 9 + 7\n    ans = n\n    for i in li:\n        ans += n // i\n        ans %= mod\n    print(ans)\nt = 1\nt = int(input())\nfor _ in range(0, t):\n    prob()", "import random\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom sys import stdin, stdout\nimport sys\nimport operator\n\ndef main():\n    mod = 10 ** 9 + 7\n    lcms = [(0, 0), (1, 2), (2, 3), (6, 4), (12, 5), (60, 7), (420, 8), (840, 9), (2520, 11), (27720, 13), (360360, 16), (720720, 17), (12252240, 19), (232792560, 23), (5354228880, 25), (26771144400, 27), (80313433200, 29), (2329089562800, 31), (72201776446800, 32), (144403552893600, 37), (5342931457063200, 41)]\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        ans = 0\n        i = 1\n        while i < 21 and lcms[i][0] <= n:\n            ans = (ans + n // lcms[i][0] * (lcms[i][1] - lcms[i - 1][1])) % mod\n            i += 1\n        print(ans)\nmain()", "import math\nn = int(input())\nb = []\nfor i in range(n):\n    b.append(int(input()))\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef sana(x):\n    i = 2\n    d = 1\n    b = 0\n    y = x\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 5\n    else:\n        while y != 0:\n            if d % i != 0:\n                d = lcm(d, i)\n                a = x // d\n                b = b + (y - a) * i\n                y = a\n            i += 1\n    if len(str(b)) >= 10:\n        b = b % (10 ** 9 + 7)\n    return b\nfor i in b:\n    print(sana(i))", "s = [2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41]\nq = [2, 3, 2, 5, 7, 2, 3, 11, 13, 2, 17, 19, 23, 5, 3, 29, 31, 2, 37, 41]\nu = [1, 2, 6, 12, 60, 420, 840, 2520, 27720, 360360, 720720, 12252240, 232792560, 5354228880, 26771144400, 80313433200, 2329089562800, 72201776446800, 144403552893600, 5342931457063200]\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    v = [n // u[i] - n // (u[i] * q[i]) for i in range(20)]\n    z = [v[i] * s[i] for i in range(20)]\n    print(sum(z) % (10 ** 9 + 7))", "s = [2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 23, 25, 27, 29, 31, 32, 37, 41]\nq = [2, 3, 2, 5, 7, 2, 3, 11, 13, 2, 17, 19, 23, 5, 3, 29, 31, 2, 37, 41]\nu = [1, 2, 6, 12, 60, 420, 840, 2520, 27720, 360360, 720720, 12252240, 232792560, 5354228880, 26771144400, 80313433200, 2329089562800, 72201776446800, 144403552893600, 5342931457063200]\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    v = [n // u[i] - n // (u[i] * q[i]) for i in range(20)]\n    z = [v[i] * s[i] for i in range(20)]\n    print(sum(z) % (10 ** 9 + 7))", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nmod = 10 ** 9 + 7\nA = [1]\nfor i in range(2, 50):\n    A.append(A[-1] * i // gcd(A[-1], i))\nA = A[1:]\nt = int(input())\nfor tests in range(t):\n    n = int(input())\n    ANS = 2 * n\n    for a in A:\n        ANS += n // a\n        ANS %= mod\n    print(ANS)", "T = int(input())\nMOD = 10 ** 9 + 7\nfrom math import gcd\narr = [1]\nn = 2\nwhile arr[-1] < 10 ** 16:\n    g = gcd(arr[-1], n)\n    arr.append(arr[-1] * n // g)\n    n += 1\nfor _ in range(T):\n    N = int(input())\n    ans = N\n    for a in arr:\n        ans += N // a\n        ans %= MOD\n    print(ans)", "from math import gcd\nMOD = 10 ** 9 + 7\n\ndef solve(n):\n    (odd, even) = ((n + 1) // 2, n // 2)\n    ans = odd * 2\n    count = even - even // 3\n    ans = (ans + count * 3) % MOD\n    (M, cur, add) = (6, 4, 4)\n    while M <= n:\n        count = n // M\n        ans = (ans + add * count) % MOD\n        x = cur // gcd(cur, M)\n        M *= x\n        (cur, add) = (cur + 1, 1)\n        while M % cur == 0:\n            cur += 1\n            add += 1\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    ans = solve(n)\n    print(ans)", "from math import gcd\n\ndef solve(n):\n    res = n * 2\n    (i, x) = (3, 2)\n    while x <= n:\n        res += n // x\n        x = x * i // gcd(x, i)\n        i += 1\n    return res % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "import bisect\nfrom collections import *\nfrom itertools import *\nimport math\nimport heapq\nfrom pprint import pprint\n\ndef inp():\n    return int(input())\n\ndef inlist():\n    return list(map(int, input().split()))\n\ndef instring():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invariable():\n    return map(int, input().split())\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\nclass Solution:\n\n    def main(self, n):\n        res = 0\n        res += n * 2\n        n = n | 0\n        i = 2\n        l = 1\n        while l < n and i < 100:\n            l = lcm(l, i)\n            k = 1\n            while l % (i + 1) == 0:\n                i += 1\n                k += 1\n            res += n // l * k\n            res = res % (10 ** 9 + 7)\n            i += 1\n        return res % (10 ** 9 + 7)\nt = inp()\noutputs = []\nfor _ in range(t):\n    n = inp()\n    output = Solution().main(n)\n    outputs.append(output)\nfor o in outputs:\n    print(o)", "from math import gcd\nMOD = 10 ** 9 + 7\n\ndef solve(n):\n    odd = (n + 1) // 2\n    even = n // 2\n    typ3 = even - even // 3\n    typ4 = (even - 3) // 6 + 1\n    ans = odd * 2\n    ans = (ans + typ3 * 3) % MOD\n    ans = (ans + typ4 * 4) % MOD\n    M = 12\n    add = 5\n    cur = 5\n    while M <= n:\n        ans += add * (n // M)\n        ans %= MOD\n        x = cur // gcd(cur, M)\n        M *= x\n        cur += 1\n        add = 1\n        while M % cur == 0:\n            cur += 1\n            add += 1\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    ans = solve(n)\n    print(ans)", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nli = [2, 6]\nr = [3, 4]\nn = 40\nfor i in range(4, n):\n    pro = computeGCD(li[-1], i)\n    if pro != i:\n        k = li[-1] * i // pro\n        li.append(k)\n        l = i\n        while k % l == 0:\n            l = l + 1\n        r.append(l)\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    k = (n + 1) // 2\n    ans = 2 * k\n    ans = ans + 3 * (n // 2)\n    for i in range(1, len(li)):\n        a = n // li[i]\n        ans = (ans + a * r[i] - a * r[i - 1]) % mod\n    print(ans)", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef stup(n):\n    r = 0\n    for i in range(1, n + 1):\n        for j in range(2, i ** 2 + 10):\n            if i % j != 0:\n                r += j\n                break\n    return r\n\ndef smart(n):\n    l = 1\n    k = 2\n    r = 0\n    MOD = int(1000000000.0 + 7)\n    while n > 0:\n        nl = l * k // gcd(l, k)\n        m = n // (nl // l)\n        r += (n - m) * k % MOD\n        l = nl\n        n = m\n        k += 1\n    return r % MOD\n\ndef solve():\n    n = int(input())\n    print(smart(n))\nfor i in range(int(input())):\n    solve()", "from math import gcd\n\ndef solve(n):\n    res = n * 2\n    (i, x) = (3, 2)\n    while x <= n:\n        res += n // x\n        x = x * i // gcd(x, i)\n        i += 1\n    return res % 1000000007\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "t = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    a = 0\n    x = n\n    l = [2, 3, 2, 5, 7, 2, 3, 11, 13, 2, 17, 19, 23, 5, 3, 29, 31, 2, 37, 41]\n    p = [1, 1, 2, 1, 1, 3, 2, 1, 1, 4, 1, 1, 1, 2, 3, 1, 1, 5, 1, 1]\n    for j in range(len(l)):\n        ox = x\n        x //= l[j]\n        a += (ox - x) * l[j] ** p[j]\n    print(a % mod)", "from math import gcd\n\ndef solve(n):\n    res = n * 2\n    (i, x) = (3, 2)\n    while x <= n:\n        res += n // x\n        x = x * i // gcd(x, i)\n        i += 1\n    return res % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "t = int(input())\nprimes = [True] * 100\npp = []\nfor i in range(2, 100):\n    if primes[i]:\n        pp.append(i)\n        for j in range(i * i, 100, i):\n            primes[j] = False\ntemp = pp.copy()\nfor i in temp:\n    k = i\n    while k < 100:\n        k = k * i\n        pp.append(k)\npp.sort()\nm = 10 ** 9 + 7\nfor _ in range(t):\n    left = int(input())\n    ans = 0\n    for p in pp:\n        if primes[p]:\n            safe = left // p\n            ans += p * (left - safe) % m\n            left = safe\n        else:\n            for pr in pp:\n                if p % pr == 0:\n                    save = pr\n                    break\n            safe = left // save\n            ans += p * (left - safe) % m\n            left = safe\n        if left == 0:\n            break\n    print(ans % m)", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "import math\nMOD = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    count = n\n    ans = 0\n    d = 1\n    x = 1\n    while count:\n        s = x // math.gcd(d, x)\n        d *= s\n        next_count = count // s\n        ans += (count - next_count) * x\n        ans %= MOD\n        count = next_count\n        x += 1\n    print(ans)\n\ndef main():\n    t = int(input())\n    for __ in range(t):\n        solve()\nmain()", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "n = 2\ns = 3\nls = []\nls += [(1, 2)]\nls += [(n, s)]\nlis = {}\nwhile n < 10 ** 16:\n    na = n\n    while na % s != 0:\n        na += n\n    n = na\n    while n % s == 0:\n        s += 1\n    ls += [(n, s)]\nfor i in ls:\n    lis[i] = 0\nt = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    lis[ls[-1]] = n // ls[-1][0]\n    maj = lis[ls[-1]]\n    for i in range(len(ls) - 2, -1, -1):\n        lis[ls[i]] = n // ls[i][0] - maj\n        maj += lis[ls[i]]\n    nat = 0\n    for i in lis:\n        nat = (nat + lis[i] * i[1]) % mod\n    print(nat)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\nfrom math import gcd\n\ndef main():\n    t = II()\n    nums = list(range(2, 100))\n    for _ in range(t):\n        n = II()\n        ans = 0\n        tmp = 1\n        left_num = n + 0\n        for p in nums:\n            g = gcd(tmp, p)\n            if g == p:\n                continue\n            tmp *= p // g\n            go_next = n // tmp\n            ans += p * (left_num - go_next) % mod\n            ans %= mod\n            left_num = go_next + 0\n            if left_num == 0:\n                break\n        print(ans)\n    return 0\nmain()", "import math\nfrom sys import stdin\n\ndef A():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        b = []\n        c = []\n        for i in a:\n            if i % 2:\n                b.append(i)\n            else:\n                c.append(i)\n        if len(b) == len(c):\n            print('Yes')\n        else:\n            print('No')\n\ndef B():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        d = [int(x) for x in stdin.readline().split()]\n        (n, a, b) = (d[0], d[1], d[2])\n        if a == 1:\n            if (n - 1) % b == 0:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            k = 1\n            sav = False\n            while k <= n:\n                if k % b == n % b:\n                    sav = True\n                    break\n                k *= a\n            if sav:\n                print('YES')\n            else:\n                print('NO')\n\ndef lcm(a, b):\n    return int(a * b / math.gcd(a, b))\n\ndef C():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        n = int(stdin.readline())\n        res = 0\n        g = 1\n        for i in range(1, n + 1):\n            g = lcm(g, i)\n            if g > n:\n                break\n            res += n // g\n        print((res + n) % (10 ** 9 + 7))\nC()", "MOD = int(1000000000.0) + 7\nMAX_N = int(1e+16)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ncLCM = [-1]\n(idx, lcm) = (1, 1)\nwhile lcm <= MAX_N:\n    lcm = lcm * idx // gcd(lcm, idx)\n    idx += 1\n    cLCM.append(lcm)\n\ndef Res(n):\n    return sum([(n // cLCM[i - 1] - n // cLCM[i]) * i for i in range(2, len(cLCM))]) % MOD\nt = int(input())\nfor _ in range(t):\n    print(Res(int(input())))", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "import math\nn = int(input())\n\ndef solve(k):\n    i = 2\n    kq = 0\n    mod = 10 ** 9 + 7\n    lcm = 1\n    while lcm <= k:\n        l = k // lcm\n        lcm = lcm * i // math.gcd(lcm, i)\n        r = k // lcm\n        kq += (l - r) * i\n        i += 1\n    return kq % mod\nls = []\nfor i in range(n):\n    ls.append(int(input()))\nfor i in ls:\n    print(solve(i))", "import math\nmod = 10 ** 9 + 7\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nt = int(input())\n\ndef func(n):\n    a = 2 * n\n    l = 1\n    for k in range(2, 55):\n        if l > n:\n            break\n        l = lcm(l, k)\n        a += n // l % mod\n    return a % mod\nfor _ in range(t):\n    a = int(input())\n    print(func(a))", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "from sys import stdin\nfrom math import gcd\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(rn()):\n    n = rn()\n    ans = 0\n    d = 1\n    i = 1\n    while True:\n        d = lcm(d, i)\n        if d > n:\n            break\n        ans += n // d\n        i += 1\n    ans = (ans + n) % mod\n    print(ans)", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "import sys, math\nsys.setrecursionlimit(10 ** 7)\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nmod = 10 ** 9 + 7\n\ndef lcm(a, b):\n    if a == 0:\n        return b\n    return a // math.gcd(a, b) * b\nfor _ in range(int(input())):\n    n = int(input())\n    g = 1\n    ans = 0\n    for i in range(1, n + 1):\n        g = lcm(g, i)\n        if g > n:\n            break\n        ans += n // g\n    print((ans + n) % mod)", "def is_norm(i, k):\n    for j in range(1, i + 1):\n        if k % j != 0:\n            return False\n    return True\n\ndef main():\n    a = []\n    for i in range(1, 50):\n        h = 1\n        for j in range(1, i + 1):\n            h *= j\n        for k in range(2, 50 + 1):\n            while h % k == 0:\n                if not is_norm(i, h // k):\n                    break\n                h //= k\n        a.append(h)\n    m = 49\n    for _ in range(int(input())):\n        n = int(input())\n        ans = [0] * m\n        x = 0\n        for i in range(m):\n            ans[i] = n // a[i]\n            x += a[i] <= n\n        for i in range(x):\n            ans[i] -= ans[i + 1]\n        su = 0\n        for i in range(m):\n            su += ans[i] * (i + 2)\n        print(su % 1000000007)\nmain()", "from functools import lru_cache\n\n@lru_cache(None)\ndef gcd(x, y):\n    if x < y:\n        return gcd(y, x)\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef main():\n    p = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        res = n % p\n        i = 1\n        cur = 1\n        while cur <= n:\n            res += n // cur\n            res %= p\n            i += 1\n            cur = cur * i // gcd(cur, i)\n        print(res)\nmain()", "from math import gcd\n\ndef solve(n):\n    res = n * 2\n    (i, x) = (3, 2)\n    while x <= n:\n        res += n // x\n        x = x * i // gcd(x, i)\n        i += 1\n    return res % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "from math import gcd\nfrom functools import reduce, lru_cache\n\n@lru_cache(1000)\ndef lcm(n):\n    return reduce(lambda a, b: a * b // gcd(a, b), list(range(1, n + 1)), 1)\n\ndef solve(n):\n    ans = n\n    for i in range(1, 101):\n        ans += n // lcm(i)\n        ans %= 1000000007\n    print(ans)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    solve(n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = j * i // gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = i * j // math.gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "from math import *\nfor s in [*open(0)][1:]:\n    i = j = 1\n    a = n = int(s)\n    while i <= n:\n        j += 1\n        a += n // i\n        i = j * i // gcd(i, j)\n    print(a % (10 ** 9 + 7))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = j * i // gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "from sys import stdin, setrecursionlimit, maxsize\nfrom collections import deque\nfrom math import gcd\ninput = stdin.readline\nMOD = 10 ** 9 + 7\n\ndef lcm(x, y):\n    return x // gcd(x, y) * y\nfor _ in range(int(input())):\n    n = int(input())\n    g = 1\n    res = 0\n    for i in range(1, n + 1):\n        g = lcm(g, i)\n        if g > n:\n            break\n        res += n // g\n    print((res + n) % MOD)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = i * j // math.gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "def intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef lcm(x, y):\n    (a, b) = (x, y)\n    while y:\n        (x, y) = (y, x % y)\n    return a * b // x\n\ndef solve():\n    n = int(input())\n    v = 1\n    c = 1\n    mod = 10 ** 9 + 7\n    ans = n % mod\n    while True:\n        c = lcm(c, v)\n        if c > n:\n            break\n        ans += n // c\n        ans = ans % mod\n        v += 1\n    return int(ans)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "import bisect\nimport sys\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfrom collections import defaultdict\nMOD = 10 ** 9 + 7\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        cur_lcm = 1\n        remain = n\n        ans = 0\n        for x in range(2, 50):\n            cur_lcm = lcm(cur_lcm, x)\n            divisible_ele = n // cur_lcm\n            ans = (ans + (remain - divisible_ele) * x) % MOD\n            remain = divisible_ele\n        print(ans)\nmain()", "import math\nimport sys\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    m = 10 ** 9 + 7\n    even = n // 2\n    odd = n - even\n    ans = 2 * odd % m\n    curr = even\n    lcm = 2\n    for i in range(3, 50):\n        lcm = lcm * i // math.gcd(lcm, i)\n        ans += i * (curr - n // lcm)\n        ans %= m\n        curr = n // lcm\n    return ans % m\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport math\nT = int(input())\nMOD = int(1000000000.0 + 7)\n\ndef f(n):\n    for i in range(2, n + 2):\n        if n % i != 0:\n            return i\n\ndef get_lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef simple_solution(n):\n    summa = 0\n    for i in range(1, n + 1):\n        summa += f(i)\n    return summa\n\ndef fast_solution(n):\n    summa = n\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = get_lcm(lcm, i)\n        if lcm > n:\n            break\n        inc = n // lcm\n        summa += inc\n    return summa % MOD\nfor _ in range(T):\n    n = int(input())\n    print(fast_solution(n))", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor w in range(t):\n    n = int(input())\n    ans = 0\n    d = 1\n    i = 1\n    while True:\n        d = lcm(d, i)\n        if d > n:\n            break\n        ans += n // d\n        i += 1\n    ans = (ans + n) % (10 ** 9 + 7)\n    print(ans)", "import math\nmod = 10 ** 9 + 7\n\ndef findgcd(a, b):\n    while b:\n        a %= b\n        t = a\n        a = b\n        b = t\n    return a\n\ndef findans():\n    n = int(input())\n    ans = 0\n    lcm = 1\n    i = 2\n    while lcm <= n:\n        l = int(n // lcm)\n        lcm = int(lcm * i // math.gcd(lcm, i))\n        r = int(n // lcm)\n        ans += (l - r) * i\n        i += 1\n    ans %= mod\n    return int(ans)\n\ndef main():\n    t = int(input())\n    ans = []\n    while t != 0:\n        cur = findans()\n        ans.append(cur)\n        t -= 1\n    for it in ans:\n        print(it)\nmain()", "data = [0, 2, 5, 7, 10, 12, 16, 18, 21, 23, 26, 28]\nfrom math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfor _ in range(int(input())):\n    n = int(input())\n    a = n // 12\n    b = n % 12\n    k = 12\n    q = 5\n    cnt = 0\n    while True:\n        k = lcm(k, q)\n        if k > n:\n            break\n        cnt += n // k\n        q += 1\n    print((33 * a + data[b] + cnt) % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = i * j // math.gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    j = 2\n    ans = n\n    while i <= n:\n        ans += n // i\n        i = i * j // math.gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "import math\nimport re\nimport string\nimport sys\nfrom itertools import permutations\nfrom collections import Counter\nimport itertools\nMOD = 1000000007\n\ndef inp():\n    return map(int, input().split(' '))\n\ndef ninp():\n    return int(input())\nfor _ in range(ninp()):\n    n = ninp()\n    i = 1\n    j = 2\n    res = n\n    while i <= n:\n        res += n // i\n        i = j * i // math.gcd(i, j)\n        j += 1\n    print(res % MOD)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nmod = int(1000000000.0 + 7)\nlcm = [0, 1]\ni = 2\nwhile i < 1000:\n    g = gcd(i, lcm[-1])\n    if lcm[-1] * i // g < 1e+18:\n        lcm.append(lcm[-1] * i // g)\n    else:\n        break\n    i += 1\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    ans = 0\n    s = []\n    for i in range(1, len(lcm)):\n        s.append(n // lcm[i])\n    for i in range(1, len(s)):\n        ans += (s[i - 1] - s[i]) * (i + 1)\n    print(ans % mod)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nm = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    g = 1\n    ans = 0\n    for i in range(1, n + 1):\n        g = lcm(g, i)\n        if g > n:\n            break\n        ans += n // g\n    print(int((ans + n) % m))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ntry:\n    lcm_arr = [0, 1]\n    i = 2\n    while 1:\n        lcm_arr.append(lcm(lcm_arr[i - 1], i))\n        if lcm_arr[-1] > 10 ** 16:\n            break\n        i += 1\n    x = i\n    for _ in range(int(input())):\n        n = int(input())\n        res = 0\n        for i in range(x, 0, -1):\n            if i != x:\n                res += (n // lcm_arr[i] - n // lcm_arr[i + 1]) * (i + 1)\n            else:\n                res += n // lcm_arr[i] * (i + 1)\n        print(res % (10 ** 9 + 7))\nexcept Exception as exc:\n    print(exc)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    mod = 10 ** 9 + 7\n\n    def func(n, val, y):\n        if n == 0:\n            return 0\n        ct = 0\n        z = val // math.gcd(val, y)\n        x = n // z\n        ct = (n - x) % mod * val % mod\n        ct += func(x, val + 1, y * z) % mod\n        ct = ct % mod\n        return ct\n    print(func(n, 2, 1))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    ans = n\n    (i, j) = (1, 2)\n    while i <= n:\n        ans += n // i\n        i = j * i // gcd(i, j)\n        j += 1\n    print(ans % (10 ** 9 + 7))", "import math\n\ndef solve(n):\n    i = 1\n    j = 2\n    res = n\n    ans = 0\n    while i <= n:\n        x = int(i / math.gcd(i, j) * j)\n        ans += (res - n // x) * j\n        res = n // x\n        i = x\n        j += 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    return ans % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "MOD = 10 ** 9 + 7\n\ndef computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef LCM(x, y):\n    return x * y // computeGCD(x, y)\n\ndef func():\n    lcm = 1\n    ans = 0\n    for i in range(1, 50):\n        lcm = LCM(lcm, i)\n        ans += n // lcm\n    print((ans + n) % MOD)\nfor _ in range(int(input())):\n    n = int(input())\n    func()", "t = int(input())\nmod = 10 ** 9 + 7\n\ndef prime(a):\n    for x in range(2, int(a ** 0.5) + 1):\n        if a % x == 0:\n            return x\n    return a\nres = []\nfor i in range(t):\n    n = int(input())\n    ans = 0\n    (fact, k) = (1, 0)\n    while fact <= n:\n        while True:\n            ans += n // fact\n            k += 1\n            if k == 2 or fact % k != 0:\n                break\n        if k >= 2:\n            fact *= prime(k)\n    res.append(ans % mod)\nfor r in res:\n    print(r)", "def gcd(x, y):\n    while y > 0:\n        x %= y\n        (x, y) = (y, x)\n    return x\n\ndef lcm(x, y):\n    return x // gcd(x, y) * y\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    l = 1\n    ans = 0\n    for i in range(1, n + 1):\n        l = lcm(l, i)\n        if l > n:\n            break\n        ans += n // l\n    print((ans + n) % (10 ** 9 + 7))", "from sys import stdin\n\ndef mcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    ans = a // mcd(a, b) * b\n    return ans\n\ndef main():\n    mod = 10 ** 9 + 7\n    cases = int(stdin.readline())\n    while cases > 0:\n        n = int(stdin.readline())\n        (ans, curr, prev) = (0, 2, 1)\n        while prev <= n:\n            vals = n // prev\n            f = lcm(curr, prev)\n            b = n // f\n            ans = (ans + curr * (vals - b)) % mod\n            (prev, curr) = (f, curr + 1)\n        ans %= mod\n        print(ans)\n        cases -= 1\nmain()", "from math import gcd\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    m = 1\n    i = 2\n    s = 0\n    while n > 0:\n        x = gcd(m, i)\n        j = i // x\n        s += (n - n // j) * i\n        s = s % mod\n        n //= j\n        m *= j\n        i += 1\n    print(s)", "import sys\nimport math\nimport random\nfrom queue import PriorityQueue as PQ\nfrom bisect import bisect_left as BSL\nfrom bisect import bisect_right as BSR\nfrom collections import OrderedDict as OD\nfrom collections import Counter\nfrom itertools import permutations\nmod = 1000000007\nsys.setrecursionlimit(1000000)\ntry:\n    sys.stdin = open('actext.txt', 'r')\n    OPENFILE = 1\nexcept:\n    pass\n\ndef get_ints():\n    return map(int, input().split())\n\ndef palindrome(s):\n    mid = len(s) // 2\n    for i in range(mid):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef check(i, n):\n    if 0 <= i < n:\n        return True\n    else:\n        return False\n\ndef solve(n):\n    if n == 1:\n        print(2)\n        return\n    ans = 0\n    lcm = 1\n    for i in range(2, 100):\n        if lcm > n:\n            break\n        l = n // lcm\n        lcm = lcm // math.gcd(lcm, i) * i\n        r = n // lcm\n        ans += (l - r) * i % mod\n        ans = ans % mod\n    print(ans)\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    solve(n)", "import itertools\nimport math\nMOD = 10 ** 9 + 7\nlcms = [1]\nfor i in itertools.count(2):\n    lcm = lcms[-1] * i // math.gcd(lcms[-1], i)\n    lcms.append(lcm)\n    if lcms[-1] >= 10 ** 16:\n        break\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    n = int(input())\n    answer = 0\n    iterator = zip(list(enumerate(lcms, start=1))[-2::-1], list(enumerate(lcms, start=1))[-1::-1])\n    for ((i, lcm), (i2, lcm2)) in iterator:\n        count = n // lcm\n        count_prev = n // lcm2\n        answer = (answer + (i + 1) * (count - count_prev)) % MOD\n    print(answer)", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = 0\n    answer += 2 * (n // 2 + n % 2)\n    answer += 3 * (n // 2)\n    d = 2 * 3\n    k = 4\n    while d <= n:\n        answer = (answer + n // d) % 1000000007\n        d = lcm(d, k)\n        k += 1\n    print(answer)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\nMOD = 1000000000 + 7\nt = int(input())\nlcm = [0] * 42\nlcm[1] = 1\nlcm[2] = 2\nlcm[3] = 6\nfor i in range(4, 42):\n    lcm[i] = lcm[i - 1] * i // gcd(max(lcm[i - 1], i), min(lcm[i - 1], i))\nterm = [0] * 42\nterm[2] = 1\nfor i in range(3, 42):\n    term[i] = gcd(max(lcm[i - 1], i), min(lcm[i - 1], i))\nfor _ in range(t):\n    ans1 = 0\n    x = int(input())\n    temp = 0\n    temp1 = 0\n    for i in range(2, 42):\n        temp = x // lcm[i - 1]\n        temp1 = i // term[i]\n        ans1 = ans1 + (temp - temp // temp1) % MOD * i % MOD\n        ans1 = ans1 % MOD\n    print(ans1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    mod = 10 ** 9 + 7\n    res = 2 * n % mod\n    b1 = 2\n    b2 = 3\n    while n // b1 > 0:\n        res += n // b1 % mod\n        res %= mod\n        b1 = b1 * b2 // math.gcd(b1, b2)\n        b2 += 1\n    res %= mod\n    print(res)", "import math\nfor m in range(int(input())):\n    n = int(input())\n    res = 2 * n\n    f = 1\n    i = 2\n    while True:\n        f = int(f * i // int(math.gcd(f, i)))\n        if f > n:\n            break\n        res = (res + n // f) % 1000000007\n        i = i + 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = 0\n    g = 1\n    i = 1\n    while g <= n:\n        g = lcm(g, i)\n        if g > n:\n            break\n        ans += n // g\n        i += 1\n    print((ans + n) % 1000000007)", "import math\n\ndef SumMinNonDivisor(n):\n    Sum = 0\n    remnos = n\n    j = 2\n    while remnos != 0:\n        for i in range(2, j + 1):\n            if j % i == 0:\n                if math.log(j, i) % 1 == 0:\n                    Sum += (remnos * i - remnos + remnos % i) * (j // i)\n                    remnos = (remnos - remnos % i) // i\n                    break\n                else:\n                    break\n        j += 1\n    return Sum\n\ndef AltSumNonDivisor(n):\n    Sum = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 2):\n            if i % j != 0:\n                Sum += j\n                break\n    return Sum\nt = int(input())\ninp = []\nfor i in range(t):\n    inpt = int(input())\n    inp.append(inpt)\nfor k in inp:\n    print(SumMinNonDivisor(k) % (10 ** 9 + 7))", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\ndef main():\n    tests = read_one_int()\n    mod = 10 ** 9 + 7\n    for _ in range(tests):\n        n = read_one_int()\n        res = 0\n        l = 1\n        for d in range(2, 42):\n            a = n // l\n            l = lcm(l, d)\n            b = n // l\n            res += (a - b) * d\n            res %= mod\n        print(res)\nmain()", "import sys\nimport math\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    total = n\n    mul = 2\n    cnt = 2\n    answer = 0\n    if n == 1:\n        print(2)\n    else:\n        while total > 0:\n            temp = total - n // mul\n            if temp < 0:\n                break\n            answer = (answer + cnt * temp) % (7 + 10 ** 9)\n            total = n // mul\n            cnt += 1\n            mul = mul * cnt // math.gcd(mul, cnt)\n        print(answer)", "import math\nfrom fractions import gcd\n\ndef main():\n    t = int(input())\n    while t:\n        mod = 1000000007\n        n = int(input())\n        cnt = 1\n        ans = 0\n        for i in range(2, 43):\n            if cnt > n:\n                break\n            lcm = cnt * i // math.gcd(i, cnt)\n            tot = n // cnt\n            ex = n // lcm\n            ans += (tot % mod - ex % mod) * i % mod\n            ans %= mod\n            cnt = lcm\n        print(int(ans))\n        t -= 1\nmain()", "import math\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    m = 1\n    i = 2\n    s = 0\n    mode = 10 ** 9 + 7\n    while n > 0:\n        x = math.gcd(i, m)\n        j = i // x\n        s += (n - n // j) * i\n        s = s % mode\n        n = n // j\n        m = m * j\n        i += 1\n    print(s)", "from math import gcd\nmod = 10 ** 9 + 7\nT = int(input())\nfor test_case in range(T):\n    n = int(input())\n    cur_lcm = 1\n    x = 2\n    ans = 0\n    while cur_lcm <= n:\n        new_lcm = cur_lcm * x // gcd(cur_lcm, x)\n        cur_lcm_multiple_cnt = n // cur_lcm\n        new_lcm_multiple_cnt = n // new_lcm\n        ans += (cur_lcm_multiple_cnt - new_lcm_multiple_cnt) * x % mod\n        if ans >= mod:\n            ans -= mod\n        cur_lcm = new_lcm\n        x += 1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    i = 1\n    gc = 1\n    num = int(input())\n    ans = num\n    while gc <= num:\n        x = gcd(gc, i)\n        if x == 1:\n            gc = gc * i\n        elif gc % i != 0:\n            gc = gc * i // x\n        ans = ans + num // gc\n        i = i + 1\n    print(ans % 1000000007)", "MOD = 1000000007\nk = int(input())\n\ndef gcd(x, y):\n    return gcd(y, x % y) if y > 0 else x\n\ndef lcm(x, y):\n    return x // gcd(x, y) * y\nfor _ in range(k):\n    (g, res) = (1, 0)\n    i = 1\n    n = int(input())\n    while g <= n:\n        g = lcm(g, i)\n        if g > n:\n            break\n        res += n // g\n        i += 1\n    print(int((res + n) % MOD))", "t = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nmod = 10 ** 9 + 7\nfor _ in range(t):\n    n = int(input())\n    i = 1\n    G = 1\n    ans = 0\n    while i <= n and G <= n:\n        G = G * i // gcd(G, i)\n        if G > n:\n            break\n        ans += n // G\n        i += 1\n    print((ans + n) % mod)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nt = int(input())\nfor i in range(t):\n    mod = 1000000007\n    n = int(input())\n    sm = 0\n    if n % 2 == 0:\n        sm += n // 2 * 2 % mod\n        sm = (sm + n // 2 * 3) % mod\n        ex = 4\n        s = 6\n        df = 1\n        while True:\n            if s > n:\n                break\n            if ex >= 45:\n                break\n            if s % ex == 0:\n                ex += 1\n                df += 1\n                continue\n            x = n // s\n            sm = (sm + x * df) % mod\n            df = 0\n            s = lcm(s, ex)\n            ex += 1\n            df += 1\n        print(sm)\n    else:\n        sm += (n // 2 + 1) * 2 % mod\n        n = n - 1\n        sm = (sm + n // 2 * 3) % mod\n        ex = 4\n        s = 6\n        df = 1\n        while True:\n            if s > n:\n                break\n            if ex >= 45:\n                break\n            if s % ex == 0:\n                ex += 1\n                df += 1\n                continue\n            x = n // s\n            sm = (sm + x * df) % mod\n            df = 0\n            s = lcm(s, ex)\n            ex += 1\n            df += 1\n        print(sm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nmod = 1000000007\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    o = n // 2 + n % 2\n    e = n // 2\n    sod = o * 2\n    sev = 3 * e\n    num = 3\n    p = 2\n    while p <= n:\n        p = p // gcd(p, num) * num\n        x = n // p\n        sev += x\n        num += 1\n    ans = sod % mod + sev % mod\n    print(ans % mod)", "from math import gcd\nMOD = int(1000000000.0 + 7)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nnums = [i for i in range(54)]\nf = [None for i in range(54)]\nf[1] = 1\nfor i in range(2, 54):\n    f[i] = lcm(f[i - 1], i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    for i in range(2, 54):\n        c = n // f[i - 1] - n // f[i]\n        x = i * c % MOD\n        ans = (ans + x) % MOD\n    print(ans)", "from math import gcd\n\ndef f(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nmod = int(1000000000.0 + 7)\nfor _ in range(t):\n    n = int(input())\n    res = (n // 2 + n % 2) * 2\n    i = 3\n    mul = 2\n    while mul <= n:\n        nx = f(mul, i)\n        x = (n // mul - n // nx) * i\n        res = (res + x) % mod\n        mul = nx\n        i = i + 1\n    print(res)", "def gcd(a, b):\n    while b % a != 0:\n        (a, b) = (b % a, a)\n    return a\n\ndef LCM(x, y):\n    (x, y) = (min(x, y), max(x, y))\n    return x * y // gcd(x, y)\n\ndef ans(n):\n    k = 10 ** 9 + 7\n    (G, a) = (1, 0)\n    i = 1\n    for i in range(1, n + 1):\n        G = LCM(G, i)\n        if G > n:\n            break\n        a += n // G\n    return (a + n) % k\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    print(ans(n))", "IP = lambda : list(map(int, input().split()))\nIP = lambda : list(map(int, input().split()))\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b else a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 10 ** 9 + 7\nfor i in range(int(input())):\n    l = 1\n    n = int(input())\n    ret = 2 * n\n    i = 2\n    while True:\n        l = lcm(l, i)\n        if l > n:\n            break\n        ret += n // l % mod\n        i += 1\n    print(ret % mod)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    lcmm = 1\n    rem = n\n    ans = 0\n    mod = 10 ** 9 + 7\n    i = 2\n    while True:\n        bef = n // lcmm\n        lcmm = lcmm * i // math.gcd(lcmm, i)\n        aft = n // lcmm\n        ans += (bef - aft) * i\n        ans %= mod\n        i += 1\n        if lcmm > n:\n            break\n    print(ans)", "import math\nT = int(input())\nfor x in range(0, T):\n    n = int(input())\n    sum = 0\n    lcm = 1\n    i = 2\n    while True:\n        if lcm > n:\n            break\n        l = n // lcm\n        lcm = lcm // math.gcd(i, lcm) * i\n        r = n // lcm\n        values = (l - r) * i % (1000000000 + 7)\n        sum = (sum + values) % (1000000000 + 7)\n        i += 1\n    print(sum)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    mod = 1000000007\n    ans = 0\n    curr = n\n    x = 1\n    y = 1\n    while curr > 0:\n        x += 1\n        gcd = math.gcd(x, y)\n        y *= x // gcd\n        divisibles = n // y\n        notdivisibles = curr - divisibles\n        ans += x * notdivisibles % mod\n        ans %= mod\n        curr = divisibles\n    print(ans)", "import math\ninp = int(input())\nfor _ in range(inp):\n    n = input()\n    n = int(n)\n    lcm = 1\n    mod = 10 ** 9 + 7\n    count = n\n    i = 1\n    res = 0\n    for i in range(1, 50):\n        lcm = lcm * i // math.gcd(lcm, i)\n        res = res % mod + (count - n // lcm) * i\n        res %= mod\n        count = n // lcm\n        if count == 0:\n            break\n    print(res)", "import math\nmod = 10 ** 9 + 7\nfor times in range(int(input())):\n    n = int(input())\n    f = 1\n    res = 0\n    i = 1\n    while f <= n:\n        tf = f\n        f = f * i // int(math.gcd(f, i))\n        res = (res + i * (n // tf - n // f)) % mod\n        i += 1\n    print(res)", "mod = 10 ** 9 + 7\nfrom math import gcd\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    res = 0\n    lcm = 1\n    i = 2\n    while i:\n        if lcm > n:\n            break\n        L = n // lcm\n        lcm = lcm // gcd(i, lcm) * i\n        r = n // lcm\n        val = (L - r) * i % mod\n        res = (res + val) % mod\n        i += 1\n    print(res)", "import math\n\ndef lcm(i, j):\n    return i * j // math.gcd(i, j)\n\ndef strangeFunction(n):\n    if n == 1:\n        return 2\n    ans = 0\n    l = 1\n    for i in range(2, 42):\n        val = n // l - n // lcm(i, l)\n        ans += val * i % 1000000007\n        ans = ans % 1000000007\n        l = lcm(l, i)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    print(strangeFunction(n))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nt = int(input())\nm = 10 ** 9 + 7\np = []\nfor i in range(3, 101):\n    p.append(i)\nwhile t:\n    t -= 1\n    n = int(input())\n    if n % 2 == 0:\n        no = n // 2\n        ne = n // 2\n    else:\n        no = n // 2 + 1\n        ne = n // 2\n    s = no % m * 2 % m\n    n1 = n\n    k = 2\n    s1 = ne % m * 3 % m\n    i = 0\n    k1 = lcm(p[i], 2)\n    while k1 <= n:\n        k = k1\n        s1 += n // k % m\n        s1 = s1 % m\n        i += 1\n        k1 = lcm(p[i], k)\n    print((s + s1) % m)", "import sys\nt = int(sys.stdin.readline())\n\ndef gcm(a, b):\n    (a, b) = (max(a, b), min(a, b))\n    while b != 0:\n        x = b\n        b = a % b\n        a = x\n    return a\n\ndef lcm(a, b):\n    return a * b // gcm(a, b)\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    x = 2\n    ans = 1\n    answer = 2 * n\n    while ans <= n:\n        ans = lcm(ans, x)\n        answer += n // ans % (10 ** 9 + 7)\n        x += 1\n    print(answer % (10 ** 9 + 7))", "import math\nmod = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    c = n\n    ans = 0\n    (j, i) = (1, 1)\n    while 1:\n        j = j * i // math.gcd(j, i)\n        ans = (ans % mod + (c - n // j % mod) * (i % mod) % mod) % mod\n        c = n // j\n        i += 1\n        if c == 0:\n            break\n    print(ans)", "import math\ninp = int(input())\nfor _ in range(inp):\n    n = input()\n    n = int(n)\n    lcm = 1\n    mod = 10 ** 9 + 7\n    count = n\n    i = 1\n    res = 0\n    while count != 0:\n        lcm = lcm * i // math.gcd(lcm, i)\n        res = res % mod + (count - n // lcm) * i\n        res %= mod\n        count = n // lcm\n        i += 1\n    print(res)", "from math import *\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(3 * 10 ** 5)\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\np = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = inp()\n    r = (n + 1) // 2\n    r = r * 2\n    r = r % p\n    ha = 2\n    po = 3\n    while ha <= n:\n        q1 = n // ha\n        ha1 = po * ha // gcd(po, ha)\n        q2 = n // ha1\n        diff = q1 - q2\n        ex = diff * po\n        po += 1\n        ha = ha1\n        r += ex\n        r %= p\n    print(r)"]