["import math\nt = int(input())\nfor k in range(t):\n    k = int(input())\n    n = int(math.sqrt(k))\n    d = k - n * n\n    if d == 0:\n        print(n, 1)\n    elif d <= n + 1:\n        print(d, n + 1)\n    else:\n        print(n + 1, 2 * (n + 1) - d)", "import math\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    rt = int(math.sqrt(k))\n    if rt ** 2 == k:\n        print(rt, 1)\n    elif k - rt * rt <= rt:\n        print(k - rt * rt, rt + 1)\n    else:\n        print(rt + 1, (rt + 1) ** 2 - k + 1)", "import math\nn1 = int(input())\nfor q in range(n1):\n    s = 1\n    m = -1\n    n = -1\n    n2 = int(input())\n    if n2 == 1:\n        print(1, 1)\n        continue\n    k = math.ceil(math.sqrt(n2))\n    if n2 > k * k - k + 1:\n        m = k * k - n2 + 1\n        n = k\n    else:\n        m = k\n        n = n2 - math.pow(k - 1, 2)\n    print(int(n), int(m))", "from math import *\nwhile True:\n    try:\n        t = eval(input())\n        for i in range(t):\n            k = eval(input())\n            if k == 1:\n                print(1, 1)\n            else:\n                t = ceil(sqrt(k))\n                mid = t ** 2 - t + 1\n                if k < mid:\n                    print(t - mid + k, t)\n                else:\n                    print(t, t ** 2 - k + 1)\n    except:\n        break", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    c = math.ceil(math.sqrt(k))\n    d = c * c - k\n    if d < c:\n        print(c, d + 1)\n    else:\n        print(2 * c - 1 - d, c)", "import math\nx = int(input())\nfor i in range(x):\n    a = int(input())\n    b = math.floor(a ** 0.5)\n    c = b + 1\n    b2 = b ** 2\n    c2 = c ** 2\n    if math.sqrt(a) == int(a ** 0.5):\n        print(b, 1)\n    elif a - b2 <= b:\n        print(a - b2, c)\n    elif c2 - a <= b - 1:\n        print(c, c2 - a + 1)\n    else:\n        print(c, c)", "def bSearch(k):\n    left = 1\n    right = 32000\n    while left < right:\n        mid = left + (right - left) // 2\n        if k > mid * mid:\n            left = mid + 1\n        else:\n            right = mid\n    return left\nt = int(input())\nwhile t:\n    k = int(input())\n    maxtrixSize = bSearch(k)\n    diagonal = maxtrixSize * maxtrixSize - maxtrixSize\n    if k > diagonal:\n        row = maxtrixSize\n        col = 1 + (diagonal + maxtrixSize - k)\n    else:\n        col = maxtrixSize\n        row = maxtrixSize - 1 - (diagonal - k)\n    print(row, col)\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    num = int(input())\n    k = math.sqrt(num)\n    k = math.ceil(k)\n    r = pow(k, 2) - (k - 1)\n    if r > num:\n        x = k - abs(r - num)\n        y = k\n    else:\n        x = k\n        y = k - abs(r - num)\n    print(x, y)", "import math\nfor i in range(int(input())):\n    k = int(input())\n    t = int(k ** 0.5)\n    p = k - t ** 2\n    if p > 0:\n        if p <= t:\n            print(p, t + 1)\n        else:\n            print(t + 1, (t + 1) ** 2 - k + 1)\n    else:\n        print(t, 1)", "for _ in range(int(input())):\n    find = int(input())\n    row = int((find - 1) ** 0.5)\n    if find - row ** 2 <= row + 1:\n        print(find - row ** 2, row + 1)\n    else:\n        print(row + 1, (row + 1) ** 2 - find + 1)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    root = int(x ** 0.5)\n    x = x - root * root\n    if x == 0:\n        print(root, 1)\n    elif x <= root + 1:\n        print(x, root + 1)\n    else:\n        print(root + 1, 2 * root + 2 - x)", "import math\ntests = int(input())\nfor _ in range(tests):\n    m = int(input())\n    sqt = int(math.sqrt(m))\n    remain = m - sqt ** 2\n    if not remain:\n        print(sqt, 1)\n    else:\n        sqt += 1\n        if remain < sqt:\n            print(remain, sqt)\n        else:\n            print(sqt, 2 * sqt - remain)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1, 1)\n    else:\n        l = math.ceil(math.pow(n, 1 / 2))\n        k = pow(math.ceil(math.pow(n, 1 / 2)), 2) - l + 1\n        if n == k:\n            print(l, l)\n        elif n > k:\n            print(l, l - (n - k))\n        else:\n            print(l - (k - n), l)", "for i in range(int(input())):\n    n = int(input())\n    a = int((n - 1) ** 0.5)\n    if n - a * a <= a + 1:\n        print(n - a * a, a + 1)\n    else:\n        print(a + 1, (a + 1) ** 2 - n + 1)", "from math import ceil\nfor _ in range(int(input())):\n    k = int(input())\n    layer = ceil(k ** 0.5)\n    start = (layer - 1) ** 2 + 1\n    end = layer ** 2\n    if start <= k <= start + layer - 1:\n        c = layer\n        r = k - start + 1\n    else:\n        r = layer\n        c = end - k + 1\n    print(r, c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = 1\n    r = 100000.0\n    while l <= r:\n        mid = (l + r) // 2\n        if mid ** 2 >= n:\n            r = mid - 1\n        else:\n            l = mid + 1\n    if l ** 2 == n:\n        print(int(l), 1)\n    elif 1 + (l - 1) * l == n:\n        print(int(l), int(l))\n    elif 1 + (l - 1) * l < n:\n        print(int(l), int(l ** 2 - n + 1))\n    else:\n        print(int(n - (l - 1) ** 2), int(l))", "for s in [*open(0)][1:]:\n    k = int(s) - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "def sqrt(n):\n    return int(n ** 0.5)\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    sq = sqrt(k)\n    if sq ** 2 != k:\n        sq += 1\n    tmp = sq ** 2 - k + 1\n    y = min(tmp, sq)\n    tmp = k - (sq - 1) ** 2\n    x = min(tmp, sq)\n    print(x, y)", "import math\n\ndef cast(cre, typ):\n    return type(typ)(map(cre, typ))\n\ndef inp_lis(cre):\n    if cre == str:\n        return input().split()\n    elif cre == bool:\n        return cast(bool, cast(int, input().split()))\n    else:\n        return cast(cre, input().split())\n\ndef repl(str_, idx=-1, char=''):\n    leng = len(str_)\n    return str_[:idx] + char + str_[(leng + idx) % leng + 1:]\n\ndef solution():\n    for t in range(int(input())):\n        k = int(input())\n        (r, c) = (1, 1)\n        (to_right, to_up) = (0, 0)\n        k_sqt_high = -int(math.sqrt(k) // -1)\n        if k != 1:\n            remain = abs(k - k_sqt_high ** 2)\n            length = k_sqt_high - 1\n            to_right = remain % length\n            if remain // length >= 1:\n                to_right = length\n                to_up = remain % length\n                if remain // length >= 2:\n                    to_up = length\n            r = k_sqt_high - to_up\n            c += to_right\n        print('{0:} {1:}'.format(r, c))\n    return\nsolution()", "from math import ceil, sqrt\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    k = sqrt(n)\n    if ceil(k) - k > 0.5:\n        b = abs(int(k) ** 2 - n)\n        c = ceil(k)\n    else:\n        b = ceil(k)\n        c = b * b - n + 1\n    print(b, c)", "def posOfN(n):\n    t = int(n ** 0.5)\n    if n == t ** 2:\n        print(t, 1)\n    elif n <= t * (t + 1):\n        print(n - t ** 2, t + 1)\n    else:\n        print(t + 1, (t + 1) ** 2 - n + 1)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    posOfN(n)", "for _ in range(int(input())):\n    s = int(input())\n    k = s - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "import math\nn = input()\nfor _ in range(int(n)):\n    num = int(input())\n    round_num = int(math.ceil(math.sqrt(int(num))))\n    leftmost = round_num ** 2\n    inter_point = leftmost - (round_num - 1)\n    topmost = inter_point - (round_num - 1)\n    if num == leftmost:\n        print('{0} 1'.format(round_num))\n        continue\n    if num >= inter_point:\n        print('{0} {1}'.format(round_num, leftmost - num + 1))\n    else:\n        print('{0} {1}'.format(num - topmost + 1, round_num))", "for _ in range(int(input())):\n    n = int(input())\n    d = int(n ** 0.5)\n    for i in range(max(1, d - 3), d + 3):\n        if i * i >= n:\n            d = i\n            break\n    mid = d * d - d + 1\n    if n > mid:\n        x = d\n        y = d - n + mid\n    else:\n        x = n - (d - 1) * (d - 1)\n        y = d\n    print(x, y)", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    a = int(k ** 0.5)\n    if a ** 2 == k:\n        print(int(k ** 0.5), 1)\n    elif k > a ** 2 + (2 * a + 1) // 2:\n        print(a + 1, (a + 1) ** 2 - k + 1)\n    else:\n        print(k - a ** 2, a + 1)", "from math import sqrt, ceil\nfor _ in range(int(input())):\n    k = int(input())\n    v = ceil(sqrt(k))\n    m = v ** 2 - (v ** 2 - (v - 1) ** 2) // 2\n    if k < m:\n        print(v - m + k, v)\n    else:\n        print(v, v - k + m)", "t = int(input())\nfrom math import sqrt, floor\nfor i in range(t):\n    n = int(input())\n    if sqrt(n) == floor(sqrt(n)):\n        row = int(sqrt(n))\n    else:\n        a = int(sqrt(n))\n        row = a + 1\n    column = int(row ** 2) - n\n    if column < row:\n        print(row, column + 1)\n    else:\n        print(2 * row - 1 - column, row)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    s = int(math.sqrt(n))\n    if math.sqrt(n) == s:\n        print(s, 1, sep=' ')\n    elif n <= s * s + s + 1:\n        print(n - s * s, s + 1, sep=' ')\n    else:\n        print(s + 1, (s + 1) * (s + 1) - n + 1, sep=' ')\n    t = t - 1", "from math import sqrt, floor\n\ndef solve1(k):\n    i = 1\n    f = 3\n    s = 1\n    if n == 1:\n        return (1, 1)\n    while (s := (i * f + 1)) < n:\n        i = i + 1\n        f = f + 1\n    rem = n - ((i - 1) * (f - 1) + 1)\n    if rem == 0:\n        return (1, i + 1)\n    if rem <= i + 1:\n        return (rem, i + 1)\n    if rem > i + 1:\n        return (i + 1, 2 * i - rem + 2)\n    return (0, 0)\n\ndef solve2(k):\n    i = floor(sqrt(k - 1))\n    n_i = i + 1\n    rem = k - i ** 2\n    if rem <= n_i:\n        return (rem, n_i)\n    return (n_i, 2 * n_i - rem)\nfor s in [*open(0)][1:]:\n    x = int(s)\n    print(*solve2(x))", "import math\nfor i in range(int(input())):\n    number = int(input())\n    sqrt = number ** 0.5\n    ceil = int(math.ceil(sqrt) ** 2)\n    if sqrt.is_integer() == True:\n        floor = int((sqrt - 1) ** 2 + 1)\n    else:\n        floor = int(math.floor(sqrt) ** 2 + 1)\n    mid = (ceil + floor) // 2\n    if number >= mid:\n        row = int(ceil ** 0.5)\n        col = int(ceil ** 0.5) - (number - mid)\n    else:\n        col = int(ceil ** 0.5)\n        row = int(floor ** 0.5) - (mid - number) + 1\n    print(row, col)", "import math\ntc = int(input())\nfor i in range(tc):\n    x = int(input())\n    y = math.floor(x ** 0.5)\n    if y == x ** 0.5:\n        print(f'{int(x ** 0.5)} 1')\n    elif x - y ** 2 < y + 1:\n        print(f'{x - y ** 2} {int(y) + 1}')\n    elif x - y ** 2 > y + 1:\n        print(f'{int(y) + 1} {(y + 1) * 2 - (x - y ** 2)}')\n    elif x - y ** 2 == y + 1:\n        print(f'{int(y) + 1} {int(y) + 1}')", "import math, sys, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    i = int(t)\n    tmp0 = math.sqrt(i)\n    tmp1 = math.ceil(tmp0)\n    n = 2 * tmp1 - 1\n    r = tmp1 ** 2\n    l = r - n + 1\n    m = l + n // 2\n    if m == i:\n        print(tmp1, tmp1)\n    elif i > m:\n        print(tmp1, tmp1 - i + m)\n    elif i < m:\n        print(tmp1 - m + i, tmp1)", "import math\nfor t in range(int(input())):\n    k = int(input())\n    a = math.sqrt(k)\n    if a == int(a):\n        print(str(int(a)) + ' ' + '1')\n    else:\n        b = k - int(a) ** 2\n        if b <= int(a) + 1:\n            print(str(b) + ' ' + str(int(a) + 1))\n        else:\n            print(str(int(a) + 1) + ' ' + str(2 * int(a) + 2 - b))", "t = int(input())\nwhile t:\n    k = int(input())\n    n = int(k ** 0.5)\n    if k ** 0.5 == n:\n        print(n, 1)\n    elif (n + 1) ** 2 - k <= n:\n        print(n + 1, (n + 1) ** 2 - k + 1)\n    else:\n        print(k - n ** 2, n + 1)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    m = math.ceil(k ** 0.5)\n    d_index = m ** 2 - m + 1\n    if k > d_index:\n        difference1 = k - d_index\n        print(m, m - difference1)\n    else:\n        difference2 = d_index - k\n        print(m - difference2, m)", "import math\nw = int(input())\nl = []\nfor i in range(w):\n    k = int(input())\n    l.append(k)\nfor i in l:\n    a = int(math.floor(math.sqrt(i)))\n    b = int(math.ceil(math.sqrt(i)))\n    if a == b:\n        print(int(a), 1)\n    elif i <= a * a + b:\n        print(i - a * a, a + 1)\n    else:\n        print(b, b * b + 1 - i)", "for _ in range(int(input())):\n    k = int(input())\n    n = int(k ** 0.5)\n    df = k - n * n\n    if df == 0:\n        print(n, 1)\n    elif df <= n + 1:\n        print(df, n + 1)\n    elif df > n + 1:\n        print(n + 1, 2 * (n + 1) - df)", "for s in [*open(0)][1:]:\n    k = int(s) - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "import math\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    root = math.floor(math.sqrt(k))\n    if k == root ** 2:\n        row = root\n        col = 1\n    elif k - root ** 2 <= root + 1:\n        col = root + 1\n        row = k - root ** 2\n    else:\n        row = root + 1\n        col = (root + 1) ** 2 - k + 1\n    print(f'{row} {col}')", "from collections import Counter\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    k = int(input())\n    layer = math.ceil(k ** 0.5)\n    tn = 1 + (layer - 1) * 2\n    tn_minus_one = tn - 2\n    sn_minus_one = int(0.5 * (layer - 1) * (1 + tn_minus_one))\n    start = sn_minus_one + 1\n    left = k - start\n    if left == layer - 1:\n        (x, y) = (layer, layer)\n    elif left < layer - 1:\n        y = layer\n        x = 1 + left\n    else:\n        x = layer\n        y = layer - 1 - (left - layer + 1) + 1\n    return [x, y]\nfor _ in range(int(input())):\n    print(*solve())", "from collections import Counter\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    k = int(input())\n    layer = math.ceil(k ** 0.5)\n    pos_in_layer = k - (layer - 1) ** 2\n    if pos_in_layer <= layer:\n        return [pos_in_layer, layer]\n    else:\n        pos_in_layer -= layer\n        return [layer, layer - pos_in_layer]\nfor _ in range(int(input())):\n    print(*solve())", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    k = math.ceil(n ** 0.5)\n    x = k ** 2 - k + 1\n    if n > x:\n        row = k\n        col = k ** 2 - n + 1\n    elif n < x:\n        col = k\n        row = n - ((k - 1) ** 2 + 1) + 1\n    else:\n        col = k\n        row = k\n    print(row, col)", "import math\nt = int(input())\nanswer = []\nfor i in range(0, t):\n    k = int(input())\n    i = int(math.sqrt(k)) + 1\n    if k > i ** 2 - i and k <= i ** 2:\n        r = i\n        c = i ** 2 - k + 1\n    elif k == (i - 1) ** 2:\n        r = i - 1\n        c = 1\n    else:\n        c = i\n        r = k - (i - 1) ** 2\n    arr = [r, c]\n    answer.append(arr)\nfor j in range(0, len(answer)):\n    print(*answer[j], sep=' ')", "from math import sqrt\na = []\nfor _ in range(int(input())):\n    t = int(input())\n    c = int(sqrt(t))\n    if t == c * c:\n        a.append((c, 1))\n    elif t - c * c < c + 1:\n        a.append((t - c * c, c + 1))\n    else:\n        a.append((c + 1, c + 1 - t + c * c + c + 1))\nfor i in a:\n    print(i[0], i[1])", "import math\nt = int(input())\nfor _ in range(t):\n    floor = 0\n    ceil = 0\n    k = int(input())\n    x = k ** 0.5\n    floor = math.floor(x)\n    ceil = math.ceil(x)\n    if x == floor:\n        print(int(x), 1)\n        continue\n    mid = (ceil ** 2 + floor ** 2 + 1) // 2\n    if k <= mid:\n        print(ceil - (mid - k), ceil)\n    else:\n        print(ceil, ceil - (k - mid))", "for _ in [0] * int(input()):\n    n = int(input())\n    a = int(n ** 0.5)\n    if n == a * a:\n        print(a, 1)\n    elif n <= a * (a + 1) + 1:\n        print(n - a * a, a + 1)\n    else:\n        print(a + 1, a * (a + 2) + 2 - n)", "import math\nt = int(input())\nfor r in range(t):\n    k = int(input())\n    j = 0\n    f = 0\n    a = math.sqrt(k - 1) + 1\n    j = int(a)\n    if a * a == j:\n        f = 1\n    if f == 1 and k != 1:\n        print(1, j + 1, sep=' ')\n    else:\n        q = j ** 2 - j + 1\n        if k <= q:\n            p = q - k\n            i = j - p\n            print(i, j, sep=' ')\n        else:\n            i = j\n            j = i ** 2 - k + 1\n            print(i, j, sep=' ')", "def check(n):\n    if n ** 0.5 == int(n ** 0.5):\n        b = int(n ** 0.5)\n        a = 1\n    else:\n        a = int(n ** 0.5) + 1\n        b = n - (a - 1) ** 2\n        if b > a:\n            (a, b) = (a - (b - a), a)\n    print(b, a)\nfor _ in range(int(input())):\n    n = int(input())\n    check(n)", "t = int(input())\nwhile t:\n    k = int(input())\n    from math import ceil\n    x = ceil(k ** 0.5)\n    mid = x ** 2 + 1 - x\n    i = -1\n    j = -1\n    if k > mid:\n        if x % 2 == 0:\n            i = x - (k - mid)\n            j = x\n        else:\n            j = x\n            i = x - (k - mid)\n    elif k < mid:\n        if x % 2 == 1:\n            j = x - (mid - k)\n            i = x\n        else:\n            i = x\n            j = x - (mid - k)\n    else:\n        i = x\n        j = x\n    print(j, i)\n    t = t - 1", "for i in range(int(input())):\n    x = int(input())\n    t = int(x ** 0.5)\n    s = x - t ** 2\n    l = []\n    l = [t, 1]\n    if s == 0:\n        l = [1, t]\n    elif s <= t + 1:\n        l = [t + 1, s]\n    else:\n        l = [2 * t - s + 2, t + 1]\n    print(l[1], l[0])", "for i in range(int(input())):\n    n = int(input())\n    r = int(n ** (1 / 2))\n    c = 0\n    if r ** 2 == n:\n        print(r, 1)\n    else:\n        n -= r ** 2\n        x = r\n        c = r + 1\n        r = 1\n        n -= 1\n        k = min(x, n)\n        r += k\n        n -= k\n        c -= min(x, n)\n        print(r, c)", "import math\nfor i in range(int(input())):\n    d = 0\n    k = int(input())\n    r = math.sqrt(k)\n    if int(r + 0.5) ** 2 == k:\n        r = int(r)\n        d = 1\n    else:\n        r = math.ceil(r)\n        c = r - 1\n        c = c ** 2\n        r = r ** 2\n        g = math.ceil((r + c) / 2)\n        d = 0\n    if d == 1:\n        print(r, 1)\n    elif k > g:\n        print(int(math.sqrt(r)), r - k + 1)\n    elif k < g:\n        print(k - c, int(math.sqrt(r)))\n    else:\n        print(int(math.sqrt(r)), int(math.sqrt(r)))", "from math import *\n\ndef solve():\n    number = int(input())\n    q = int(sqrt(number - 1) + 1)\n    p = number - (q - 1) * (q - 1)\n    if p <= q:\n        print(p, q)\n    else:\n        print(q, q + q - p)\nT = int(input())\nfor i in range(T):\n    solve()", "from math import floor, sqrt\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    d = floor(sqrt(k))\n    e = k - d * d\n    if e == 0:\n        print(d, 1)\n    elif e <= d + 1:\n        print(e, d + 1)\n    else:\n        print(d + 1, d - (e - d - 1) + 1)", "import math\np = int(input())\nwhile p:\n    n = int(input())\n    if math.sqrt(n) % 1 == 0:\n        x = int(math.sqrt(n)) - 1\n        y = x + 1\n    else:\n        x = int(math.sqrt(n))\n        y = x + 1\n    a = x * x\n    b = y * y\n    c = n - a\n    if n == a:\n        print(x, end=' ')\n        print(1)\n    elif n == b:\n        print(y, end=' ')\n        print(1)\n    else:\n        d = (b - a) // 2\n        e = d + 1\n        if c <= d:\n            l = c\n            m = y\n        else:\n            l = y\n            m = y - c + e\n        print(l, end=' ')\n        print(m)\n    p -= 1", "for s in [*open(0)][1:]:\n    k = int(s) - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "for _ in range(int(input())):\n    k = int(input())\n    r = round(k ** 0.5)\n    if r * r < k:\n        r += 1\n    t = k - (r - 1) * (r - 1)\n    if t < r:\n        print(t, r)\n    else:\n        print(r, 2 * r - t)", "for _ in range(int(input())):\n    k = int(input())\n    r = round(k ** 0.5)\n    if r * r < k:\n        r += 1\n    k -= (r - 1) * (r - 1)\n    if k < r:\n        print(k, r)\n    else:\n        print(r, 2 * r - k)", "for _ in range(int(input())):\n    n = int(input())\n    a = int(n ** 0.5)\n    b = a ** 2\n    c = n - b\n    if not c:\n        print(a, 1)\n    elif c <= a:\n        print(c, a + 1)\n    else:\n        print(a + 1, 2 * a + 2 - c)", "from math import floor, sqrt\nfor _ in range(int(input())):\n    Num = int(input())\n    val = floor(sqrt(Num))\n    if val ** 2 == Num:\n        print(val, 1)\n    else:\n        N = val ** 2 + 1\n        if Num >= N and Num <= N + val:\n            print(Num - N + 1, val + 1)\n        else:\n            print(val + 1, (val + 1) ** 2 - Num + 1)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    if int(k ** 0.5) ** 2 == k:\n        print(int(k ** 0.5), 1)\n    else:\n        a = int(k ** 0.5) + 1\n        b = a ** 2 - a + 1\n        if k == b:\n            print(a, a)\n        elif k > b:\n            print(a, a - (k - b))\n        else:\n            print(a - (b - k), a)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    n = int(k ** 0.5) + 1\n    r = n\n    c = n\n    if k == (n - 1) ** 2:\n        r = n - 1\n        c = 1\n    elif k > n ** 2 - n + 1:\n        c = n ** 2 - k + 1\n    elif k < n ** 2 - n + 1:\n        r = k - (n - 1) ** 2\n    print(f'{r} {c}')", "for s in [*open(0)][1:]:\n    k = int(s) - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "from math import sqrt, floor\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    prev = floor(sqrt(k))\n    if k == prev ** 2:\n        (r, c) = (prev, 1)\n    else:\n        (n, i) = ((prev + 1) ** 2 - prev ** 2, k - prev ** 2)\n        (r, c) = (prev + 1, prev + 1 - i + n // 2 + 1) if i > n // 2 else (i, prev + 1)\n    print(r, c)", "import math\nn = int(input())\nwhile n > 0:\n    n -= 1\n    a = int(input())\n    s = math.sqrt(a)\n    s = math.floor(s)\n    over = a - s * s\n    if over == 0:\n        print(s, 1)\n    elif over > 0:\n        mark = s + 1\n        if over < mark:\n            print(over, mark)\n        elif over == mark:\n            print(mark, mark)\n        elif over > mark:\n            print(mark, 2 * mark - over)", "for t in range(int(input())):\n    n = int(input())\n    k = round(n ** 0.5 + 0.499999999)\n    c = k ** 2 - (k - 1)\n    if n > c:\n        print(k, k ** 2 - n + 1)\n    elif n < c:\n        print(k - (c - n), k)\n    else:\n        print(k, k)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    d = int((k - 1) ** 0.5)\n    if k <= d ** 2 + d + 1:\n        (r, c) = (k - d ** 2, d + 1)\n    else:\n        (r, c) = (d + 1, (d + 1) ** 2 - k + 1)\n    print(r, c)", "from math import *\nfor i in range(int(input())):\n    k = int(input())\n    sqrt1 = int(sqrt(k))\n    sqrt2 = sqrt1 + 1\n    if sqrt(k) - sqrt1 == 0:\n        print(sqrt1, 1)\n    else:\n        dif = k - sqrt1 ** 2\n        if dif < sqrt2:\n            print(dif, sqrt2)\n        elif dif > sqrt2:\n            print(sqrt2, sqrt2 ** 2 - k + 1)\n        else:\n            print(sqrt2, sqrt2)", "n = int(input())\nfor i in range(n):\n    g = int(input())\n    sqrtg = int(g ** 0.5) + 1\n    difg = sqrtg ** 2 - g + 1\n    if (sqrtg - 1) ** 2 == g:\n        print(sqrtg - 1, 1)\n    elif difg > sqrtg:\n        y = sqrtg\n        x = sqrtg ** 2 - g + 1\n        st1 = (sqrtg - 1) ** 2 + 1\n        x = g - st1 + 1\n        print(x, y)\n    else:\n        print(sqrtg, difg)", "n = int(input())\narr = []\nfor i in range(n):\n    g = int(input())\n    sqrtg = int(g ** 0.5) + 1\n    sqg = int(sqrtg ** 2)\n    y = sqrtg\n    gg = sqg - g + 1\n    if g ** 0.5 % 1 > 0:\n        if gg > sqrtg:\n            x = sqrtg - gg + sqrtg\n            y = sqrtg\n        else:\n            x = sqrtg\n            y = gg\n    elif g ** 0.5 % 1 == 0:\n        x = sqrtg - 1\n        y = 1\n        if g == 1:\n            y = 1\n    arr.append([x, y])\nfor i in range(n):\n    print(arr[i][0], arr[i][1])", "import math\n\ndef search_coordinate(k):\n    s = search_floor_sqrt(k)\n    first_num = math.pow(s - 1, 2) + 1\n    remain = int(k - first_num)\n    if remain <= s - 1:\n        print(remain + 1, s)\n    else:\n        remain -= s - 1\n        print(s, s - remain)\n\ndef search_floor_sqrt(k):\n    if k == 1:\n        return 1\n    return int(math.ceil(math.sqrt(k)))\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    search_coordinate(k)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    a = int(k ** 0.5)\n    b = k - a ** 2\n    if b == 0:\n        print(a, '1')\n    else:\n        r = min(a + 1, b)\n        c = min((a + 1) ** 2 - k + 1, a + 1)\n        print(r, c)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    k = math.floor(n ** 0.5) + 1\n    if (n ** 0.5).is_integer():\n        print(math.floor(n ** 0.5), 1)\n    elif k ** 2 - n >= k - 1:\n        print(2 * k + n - 1 - k ** 2, k)\n    else:\n        print(k, k ** 2 - n + 1)", "for s in [*open(0)][1:]:\n    k = int(s) - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "from math import ceil\n\ndef solve():\n    n = int(input())\n    layer = ceil(n ** 0.5)\n    middle = layer ** 2 - layer + 1\n    if n <= middle:\n        print(layer - middle + n, layer)\n    else:\n        print(layer, layer - n + middle)\nfor _ in range(int(input())):\n    solve()", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    l = math.ceil(n ** 0.5)\n    a = l ** 2 - l + 1\n    if n > a:\n        r = l\n        c = l + a - n\n    elif n < a:\n        r = l + n - a\n        c = l\n    else:\n        r = l\n        c = l\n    print(r, c)", "for _ in range(int(input())):\n    x = int(input())\n    k = x - 1\n    m = int(k ** 0.5)\n    n = k + 1 - m * m\n    print(min((m := (m + 1)), n), min(m, 2 * m - n))", "import math\nt = int(input())\nfor _ in range(t):\n    e = int(input())\n    base = math.ceil(math.sqrt(e))\n    nE = base * base - (base - 1) * (base - 1)\n    mid = nE // 2\n    total = base * base\n    x = total - e\n    if x <= mid:\n        print(base, x + 1)\n    else:\n        r = nE - x\n        print(r, base)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    n -= 1\n    k = int(n ** 0.5)\n    n += 1\n    if k == 0:\n        print(1, 1)\n    elif n - k * k < (k + 1) * (k + 1) - n:\n        print(n - k * k, k + 1)\n    else:\n        print(k + 1, (k + 1) * (k + 1) - n + 1)", "import math\nt = int(input())\nop = []\nfor i in range(t):\n    k = int(input())\n    sr = int(math.sqrt(k))\n    abs_sqr = sr * sr\n    if abs_sqr == k:\n        ans = ''\n        ans += str(sr)\n        ans += ' '\n        ans += str(1)\n        op.append(ans)\n    else:\n        col = 0\n        row = 0\n        max_col = int(sr) + 1\n        max_row = int(sr) + 1\n        new_sq = (sr + 1) * (sr + 1)\n        centre = new_sq - int(sr)\n        diff = abs(k - centre)\n        if k > centre:\n            row = max_row\n            col = max_col - diff\n        else:\n            row = max_row - diff\n            col = max_col\n        ans = ''\n        ans += str(row)\n        ans += ' '\n        ans = ans + str(col)\n        op.append(ans)\nfor i in op:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = int((n - 1) ** 0.5)\n    if n - a * a <= a + 1:\n        print(n - a * a, a + 1)\n    else:\n        print(a + 1, (a + 1) ** 2 - n + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = int((n - 1) ** 0.5)\n    if n - a * a <= a + 1:\n        print(n - a * a, a + 1)\n    else:\n        print(a + 1, (a + 1) ** 2 - n + 1)", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    k = int(input())\n    b = ceil(sqrt(k))\n    s = (b - 1) ** 2 + 1\n    m = s + b - 1\n    e = b ** 2\n    if k <= m:\n        print(k - s + 1, b)\n    else:\n        print(b, e - k + 1)", "for _ in range(int(input())):\n    n = int(input())\n    t = int(n ** 0.5)\n    p = n - t ** 2\n    if p == 0:\n        print(t, 1)\n        continue\n    k = t + 1\n    if p == k:\n        print(p, p)\n    elif p < k:\n        print(p, t + 1)\n    else:\n        print(k, (t + 1) ** 2 - n + 1)", "import math\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    a = math.ceil(pow(k, 0.5))\n    if k > (a ** 2 + (a - 1) ** 2) / 2:\n        print(a, a ** 2 - k + 1)\n    else:\n        print(k - (a - 1) ** 2, a)", "from math import sqrt\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    x = int(sqrt(n))\n    if x * x == n:\n        print(x, 1)\n    else:\n        x += 1\n        val_at_pair = x * x - x + 1\n        if n > val_at_pair:\n            print(x, x - (n - val_at_pair))\n        elif n < val_at_pair:\n            print(x - (val_at_pair - n), x)\n        else:\n            print(x, x)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if math.sqrt(n) == int(math.sqrt(n)):\n        print(int(math.sqrt(n)), 1)\n    else:\n        x = math.floor(math.sqrt(n))\n        if n < x * x + x + 1:\n            print(n - x * x, x + 1)\n        else:\n            print(x + 1, x + 1 - (n - (x * x + x + 1)))", "import math\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    x = k ** 0.5\n    l = int(x)\n    h = math.ceil(x)\n    if l == h:\n        print(l, 1)\n    else:\n        a = min(h, k - l * l)\n        b = min(h, h * h - k + 1)\n        print(a, b)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    arr = []\n    ans = math.ceil(math.sqrt(n))\n    res = int(math.sqrt(n))\n    res *= res\n    if n - res == 0:\n        print(ans, 1)\n    elif n - res <= ans:\n        print(n - res, ans)\n    else:\n        loc = ans * ans\n        print(ans, loc - n + 1)", "from math import sqrt, log2\nt = int(input())\nmas = []\nfor i in range(t):\n    v = int(input())\n    mas.append(v)\nfor t in mas:\n    if int(sqrt(t)) == sqrt(t):\n        print(int(sqrt(t)), 1)\n    else:\n        i = int(sqrt(t)) + 1\n        mid = int(i ** 2 - (i ** 2 - ((i - 1) ** 2 + 1)) / 2)\n        if t < mid:\n            print(t - (i - 1) ** 2, i)\n        elif t > mid:\n            print(i, i - (t - mid))\n        else:\n            print(i, i)", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ans = math.ceil(math.sqrt(n))\n    res = math.floor(math.sqrt(n))\n    res *= res\n    if n - res == 0:\n        print(ans, 1)\n    elif n - res <= ans:\n        print(n - res, ans)\n    else:\n        akh = ans * ans\n        print(ans, akh - n + 1)", "from math import ceil, floor\nfor _ in range(int(input())):\n    k = int(input())\n    t1 = ceil(k ** 0.5)\n    t2 = floor(k ** 0.5) ** 2\n    if k - t2 == 0:\n        print(t1, 1)\n    elif k - t2 <= t1:\n        print(k - t2, t1)\n    else:\n        t = t1 * t1\n        print(t1, t - k + 1)", "import math\n\ndef solve():\n    n = int(input())\n    row = math.ceil(math.sqrt(n))\n    (r, c) = (-1, -1)\n    element = (row - 1) ** 2\n    ele = row * row\n    diff = n - element\n    k = element + row\n    if n == k:\n        col = row\n    elif n < k:\n        col = row\n        row = diff % row\n    else:\n        col = ele - n + 1\n    print(row, col)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    num = int(math.ceil(math.sqrt(k)))\n    start = (num - 1) ** 2 + 1\n    end = num * num\n    diff = k - start\n    cut = start + num - 1\n    row = -1\n    column = -1\n    if diff <= cut - start:\n        column = num\n        row = k - start + 1\n    else:\n        row = num\n        column = end - k + 1\n    print(row, column)", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    k = int(input())\n    a = sqrt(k)\n    if ceil(a) - a > 0.5:\n        b = abs(int(a) ** 2 - k)\n        c = ceil(a)\n    else:\n        b = ceil(sqrt(k))\n        c = b * b - k + 1\n    print(b, c)", "for i in range(int(input())):\n    n = int(input())\n    a = int((n - 1) ** 0.5)\n    print(n - a * a, a + 1) if n - a * a <= a + 1 else print(a + 1, (a + 1) ** 2 - n + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    n = math.ceil(x ** 0.5)\n    a = n ** 2 - (n - 1) ** 2\n    mid = n ** 2 - a // 2\n    if x < mid:\n        print(n - abs(mid - x), n)\n    elif x > mid:\n        print(n, n - abs(mid - x))\n    else:\n        print(n, n)"]