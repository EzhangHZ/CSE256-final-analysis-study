["for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(input()))\n    flag = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if matrix[i][j] == '1':\n                if matrix[i + 1][j] == '1' or matrix[i][j + 1] == '1':\n                    continue\n                else:\n                    flag = False\n                    break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            if s[i][j] == '0':\n                continue\n            if not (s[i + 1][j] == '1' or s[i][j + 1] == '1'):\n                print('NO')\n                break\n        else:\n            continue\n        break\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = ''\n    for _ in range(n):\n        s += input()\n    ans = 'YES'\n    for i in range(n * n - n):\n        if s[i] == '1':\n            if (i + 1) % n != 0:\n                if s[i + n] == '0' and s[i + 1] == '0':\n                    ans = 'NO'\n                    break\n    print(ans)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = input()\n        l.append(a)\n    f = 0\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if l[i][j] == '1':\n                if l[i + 1][j] != '1' and l[i][j + 1] != '1':\n                    f = 1\n                    break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [input() for i in range(n)]\n    r = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == '1' and a[i + 1][j] == '0' and (a[i][j + 1] == '0'):\n                r = 'NO'\n                break\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    A = [input() for _ in range(n)]\n    print('NO' if any((A[i][j] == '1' and A[i][j + 1] == A[i + 1][j] == '0' for i in range(n - 1) for j in range(n - 1))) else 'YES')", "t = int(input())\nwhile t:\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        c = input()\n        matrix.append(c)\n    flag = 1\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if matrix[i][j] == '1' and matrix[i][j + 1] == '0' and (matrix[i + 1][j] == '0'):\n                flag = 0\n                break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        graph = []\n        for _ in range(n):\n            graph.append(input())\n        is_possible = True\n        for i in range(n - 1):\n            if is_possible:\n                for j in range(n - 1):\n                    if graph[i][j] == '1':\n                        if graph[i + 1][j] == '0' and graph[i][j + 1] == '0':\n                            is_possible = False\n                            break\n        if is_possible:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    A = [input() for _ in range(n)]\n    print('NO' if any((A[i][j] == '1' and A[i][j + 1] == A[i + 1][j] == '0' for i in range(n - 1) for j in range(n - 1))) else 'YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    g = []\n    a = 'YES'\n    for i in range(n):\n        s = input()\n        g.append(s)\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if g[i + 1][j] != '1' and g[i][j + 1] != '1' and (g[i][j] == '1'):\n                print('NO')\n                a = 'NO'\n                break\n        if a == 'NO':\n            break\n    else:\n        print('YES')", "import io, os, math\n\ndef ri():\n    return int(input().strip())\n\ndef rl():\n    return list(map(int, input().strip().split()))\n\ndef Solve():\n    n = ri()\n    mp = []\n    for i in range(n):\n        mp.append(input().strip())\n    for j in range(n - 1, -1, -1):\n        tag = 0\n        for i in range(n - 1, -1, -1):\n            if mp[i][j] == '0':\n                tag = 1\n            if mp[i][j] == '1':\n                if tag and j + 1 < n and (mp[i][j + 1] == '0'):\n                    print('NO')\n                    return\n                tag = 0\n    print('YES')\nT = ri()\nwhile T:\n    T -= 1\n    Solve()", "def check(mat):\n    for i in range(len(mat) - 1):\n        for j in range(len(mat) - 1):\n            if mat[i][j] + mat[i + 1][j] + mat[i][j + 1] == '100':\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mat = []\n    for _ in range(n):\n        mat.append(input())\n    print(check(mat))", "def solve(A):\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i][j] == '1':\n                if i + 1 < len(A) and j + 1 < len(A):\n                    if A[i + 1][j] != '1' and A[i][j + 1] != '1':\n                        return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for o in range(n):\n        lst = input()\n        arr.append(lst)\n    print(solve(arr))", "for t in range(int(input())):\n    n = int(input())\n    m = ''\n    for i in range(n):\n        m += input()\n    if '0' not in m or '1' not in m:\n        print('YES')\n    else:\n        for i in range(n * n - n - 1):\n            if m[i] == '1':\n                if m[i + 1] != '1' and m[i + n] != '1' and ((i + 1) % n != 0):\n                    print('NO')\n                    break\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = list()\n    for i in range(n):\n        grid.append(list(input()))\n    valid = True\n    for i in range(n - 1):\n        if not valid:\n            break\n        for j in range(n - 1):\n            if grid[i][j] == '1' and grid[i + 1][j] == '0' and (grid[i][j + 1] == '0'):\n                valid = False\n                break\n    if valid:\n        print('YES')\n    else:\n        print('NO')", "def panduan(list1):\n    for i in range(n - 1):\n        for y in range(n - 1):\n            if int(list1[i][y]):\n                if list1[i][y + 1] != '1' and list1[i + 1][y] != '1':\n                    return 'NO'\n    return 'YES'\nlist_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = []\n    for i in range(n):\n        list1.append(input())\n    list_ans.append(panduan(list1))\nfor item in list_ans:\n    print(item)", "for case in range(int(input())):\n    n = int(input())\n    matrix = [0] * n\n    flag = True\n    for row in range(n):\n        matrix[row] = input()\n    for row in range(n - 1):\n        for col in range(n - 1):\n            if matrix[row][col] == '1' and matrix[row][col + 1] == '0' and (matrix[row + 1][col] == '0'):\n                flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\ncount = 0\nlista = []\nwhile count != n:\n    x = int(input())\n    for i in range(x):\n        string = input()\n        lista.append(string)\n    count += 1\n    flag = False\n    for i in range(0, x - 1):\n        for j in range(0, x - 1):\n            if lista[i][j + 1] != '1' and lista[i + 1][j] != '1' and (lista[i][j] == '1'):\n                flag = True\n                break\n    if flag == False:\n        print('YES')\n    else:\n        print('NO')\n    lista = []", "t = int(input())\nsLst = []\nfor i in range(t):\n    n = int(input())\n    lst = []\n    for j in range(n):\n        lst.append(list(input()))\n    flag = 0\n    for j in range(n - 1):\n        for k in range(n - 1):\n            if lst[j][k] == '1':\n                if lst[j + 1][k] == '0' and lst[j][k + 1] == '0':\n                    sLst.append('NO')\n                    flag = 1\n                    break\n        if flag == 1:\n            break\n    else:\n        sLst.append('YES')\nfor i in sLst:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "t = int(input())\nwhile t:\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        c = input()\n        matrix.append(c)\n    flag = 1\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if matrix[i][j] == '1' and matrix[i][j + 1] == '0' and (matrix[i + 1][j] == '0'):\n                flag = 0\n                break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for i in range(n)]\n    f = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == '1' and a[i + 1][j] == '0' and (a[i][j + 1] == '0'):\n                f = False\n    print(('NO', 'YES')[f])", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a += [input()]\n    t = 0\n    for i in range(n):\n        if t == 1:\n            break\n        for j in range(n):\n            if a[i][j] == '1':\n                if i != n - 1 and j != n - 1 and (a[i + 1][j] == '0') and (a[i][j + 1] == '0'):\n                    print('NO')\n                    t = 1\n                    break\n    else:\n        print('YES')", "t = int(input())\nout = []\nfor _ in range(t):\n    n = int(input())\n    m = []\n    for x in range(n):\n        m.append(list(input()))\n    exist = True\n    n2 = len(m[0])\n    for i in range(n):\n        for j in range(n2):\n            if m[i][j] == '1':\n                if j + 1 < n2 and m[i][j + 1] == '0':\n                    if i + 1 < n and m[i + 1][j] == '0':\n                        exist = False\n                        break\n        if not exist:\n            break\n    out.append(exist)\nfor x in out:\n    if x:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for row in range(n):\n        arr.append(input())\n    ans = 'YES'\n    for r in range(n - 2, -1, -1):\n        for c in range(n - 2, -1, -1):\n            if arr[r][c] == '1' and (not (arr[r + 1][c] == '1' or arr[r][c + 1] == '1')):\n                ans = 'NO'\n                break\n        if ans == 'NO':\n            break\n    print(ans)", "def solve():\n    n = int(input())\n    a = [input() for _ in ' ' * n]\n    if all((a[i] == '0' * n for i in range(n))):\n        print('YES')\n        return\n    w = False\n    for i in range(n):\n        w |= a[i][n - 1] == '1' or a[n - 1][i] == '1'\n    if not w:\n        print('NO')\n        return\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == '1':\n                if a[i + 1][j] == '0' and a[i][j + 1] == '0':\n                    print('NO')\n                    return\n    print('YES')\nfor _ in ' ' * int(input()):\n    solve()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        graph = []\n        for _ in range(n):\n            graph.append(input())\n        is_possible = True\n        for i in range(n - 1):\n            if is_possible:\n                for j in range(n - 1):\n                    if graph[i][j] == '1':\n                        if graph[i + 1][j] == '0' and graph[i][j + 1] == '0':\n                            is_possible = False\n                            break\n        if is_possible:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    field = []\n    flag = 0\n    for i in range(n):\n        field.append(input())\n    for i in range(n):\n        for j in range(n):\n            if field[i][j] == '1' and i + 1 < n and (field[i + 1][j] == '0') and (j + 1 < n) and (field[i][j + 1] == '0'):\n                flag = 1\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for i in range(n)]\n    f = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == '1' and a[i + 1][j] == '0' and (a[i][j + 1] == '0'):\n                f = False\n    print(('NO', 'YES')[f])", "for _ in range(int(input())):\n    n = int(input())\n    cond = False\n    lst = []\n    for i in range(n):\n        mst = list(input())\n        lst.append(mst)\n    for i in range(n - 1):\n        if cond:\n            break\n        for j in range(n - 1):\n            if lst[i][j] == '1' and lst[i + 1][j] == '0' and (lst[i][j + 1] == '0'):\n                print('NO')\n                cond = True\n                break\n    if cond:\n        continue\n    else:\n        print('YES')", "laco = int(input())\nfor t in range(laco):\n    n = int(input())\n    array = []\n    for i in range(n):\n        b = input()\n        temp = list(b)\n        array.append(temp)\n    flag = 0\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if array[i][j] == '1' and array[i + 1][j] == '0' and (array[i][j + 1] == '0'):\n                flag = 1\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "n_tests = int(input())\nfor _ in range(n_tests):\n    polygon_size = int(input())\n    polygon_matrix = []\n    for _ in range(polygon_size):\n        row = list(map(int, input()))\n        polygon_matrix.append(row)\n    check_sequence = 1\n    for i in range(polygon_size - 1):\n        for j in range(polygon_size - 1):\n            if polygon_matrix[i][j] == 1:\n                if polygon_matrix[i][j + 1] == 0 and polygon_matrix[i + 1][j] == 0:\n                    check_sequence = 0\n                    break\n    if check_sequence == 0:\n        print('NO')\n    else:\n        print('YES')", "tent = int(input())\nfor i in range(tent):\n    n = int(input())\n    pol = []\n    for j in range(n):\n        l = list(input())\n        pol.append(l)\n    resp = 0\n    for x in range(n):\n        for y in range(n):\n            if pol[x][y] == '1':\n                if x != n - 1 and y != n - 1:\n                    if pol[x][y + 1] == '0' and pol[x + 1][y] == '0':\n                        resp = 1\n                        break\n        if resp == 1:\n            break\n    if resp == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    response = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if arr[i][j] == '1':\n                if arr[i + 1][j] == '0' and arr[i][j + 1] == '0':\n                    response = 'NO'\n                    break\n    print(response)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    matrix = []\n    for j in range(n):\n        s = input()\n        lst = list(s)\n        matrix.append(lst)\n    er = 0\n    for j in range(n):\n        for k in range(n):\n            if matrix[j][k] == '1':\n                if k + 1 < n and matrix[j][k + 1] == '0':\n                    if j + 1 < n and matrix[j + 1][k] == '0':\n                        er += 1\n                        break\n        if er > 0:\n            break\n    if er == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    matrix = []\n    for j in range(n):\n        matrix.append(input())\n    result = True\n    for j in range(n):\n        for k in range(n):\n            if matrix[j][k] == '1':\n                if (j < n - 1 and matrix[j + 1][k] == '0') and (k < n - 1 and matrix[j][k + 1] == '0'):\n                    result = False\n    print('YES' if result else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    dp = []\n    for i in range(n):\n        dp += [list(map(int, input()))]\n    c = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if dp[i][j] == 1:\n                if dp[i + 1][j] == 0 and dp[i][j + 1] == 0:\n                    c = 'NO'\n                    break\n        if c == 'NO':\n            break\n    print(c)", "def polygon_training():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        matriks = [list(input()) for _ in range(n)]\n        positive = True\n        for i in range(n - 1):\n            for (count, number) in enumerate(matriks[i]):\n                if count < n - 1:\n                    if number == '1':\n                        if matriks[i][count + 1] == '0' and matriks[i + 1][count] == '0':\n                            positive = False\n        print('YES') if positive else print('NO')\npolygon_training()", "def main():\n    tests = int(input())\n    for _ in range(tests):\n        n = int(input())\n        matrix = []\n        for i in range(n):\n            matrix.append([int(i) for i in list(input())])\n        yes = True\n        for i in range(n - 1):\n            for j in range(n - 1):\n                if matrix[i][j] == 1:\n                    if matrix[i + 1][j] == 0 and matrix[i][j + 1] == 0:\n                        yes = False\n                        break\n            if yes == False:\n                break\n        if yes:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    m = []\n    for _ in range(n):\n        m.append(input())\n    isPossible = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                isPossible = False\n                break\n        if not isPossible:\n            break\n    if isPossible:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    kt = 1\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == '1' and a[i + 1][j] == '0' and (a[i][j + 1] == '0'):\n                kt = 0\n                break\n        if kt == 0:\n            break\n    if kt == 1:\n        print('YES')\n    else:\n        print('NO')", "def isConnected(array, length):\n    for i in range(length - 1):\n        for j in range(length - 1):\n            if array[i][j] == '1':\n                if not (array[i][j + 1] == '1' or array[i + 1][j] == '1'):\n                    return False\n    return True\nfor _ in [0] * int(input()):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr += [input()]\n    if isConnected(arr, n):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    check = []\n    for i in range(n):\n        check.append([True] * n)\n    hits = []\n    for i in range(n):\n        hits.append(input())\n    flag = False\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if hits[i][j] == '1':\n                if hits[i + 1][j] == '1' or hits[i][j + 1] == '1':\n                    continue\n                flag = True\n                break\n        if flag:\n            print('NO')\n            break\n    if not flag:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    hits = []\n    for i in range(n):\n        hits.append(input())\n    flag = False\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if hits[i][j] == '1':\n                if hits[i + 1][j] == '1' or hits[i][j + 1] == '1':\n                    continue\n                flag = True\n                break\n        if flag:\n            print('NO')\n            break\n    if not flag:\n        print('YES')", "def valid_matrix(an, amatrix):\n    for i in range(an):\n        for j in range(an):\n            if amatrix[i][j] == 1:\n                if i < an - 1 and amatrix[i + 1][j] == 0:\n                    if j < an - 1 and amatrix[i][j + 1] == 0:\n                        return False\n    return True\nnum_of_cases = int(input())\nfor cas in range(num_of_cases):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input())))\n    if valid_matrix(n, matrix):\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    m = ''\n    for i in range(n):\n        m += input()\n    if '0' not in m or '1' not in m:\n        print('YES')\n    else:\n        for i in range(n * n - n - 1):\n            if m[i] == '1':\n                if m[i + 1] != '1' and m[i + n] != '1' and ((i + 1) % n != 0):\n                    print('NO')\n                    break\n        else:\n            print('YES')", "for t in range(int(input())):\n    n = int(input())\n    m = ''\n    for i in range(n):\n        m += input()\n    if '0' not in m or '1' not in m:\n        print('YES')\n    else:\n        for i in range(n * n - n - 1):\n            if m[i] == '1':\n                if m[i + 1] != '1' and m[i + n] != '1' and ((i + 1) % n != 0):\n                    print('NO')\n                    break\n        else:\n            print('YES')", "def solve(n, polygon):\n    row = 0\n    column = 0\n    while row < n - 1:\n        column = 0\n        while column < n - 1:\n            if polygon[row][column] == '1':\n                if polygon[row + 1][column] == '0' and polygon[row][column + 1] == '0':\n                    return 'NO'\n            column += 1\n        row += 1\n    return 'YES'\nfor x in range(int(input())):\n    n = int(input())\n    p = []\n    for y in range(n):\n        p.append(list(input()))\n    print(solve(n, p))", "import sys\n\ndef answer(n, m):\n    for row in range(n):\n        for col in range(n):\n            if m[row][col] == '1':\n                if col == n - 1:\n                    pass\n                elif row == n - 1:\n                    pass\n                elif m[row][col + 1] == '1':\n                    pass\n                elif m[row + 1][col] == '1':\n                    pass\n                else:\n                    return 'NO'\n    return 'YES'\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(sys.stdin.readline())\n        m = [0] * n\n        for row in range(n):\n            m[row] = sys.stdin.readline().rstrip()\n        print(answer(n, m))\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    t = int(input())\n    l = []\n    o = True\n    for _ in range(t):\n        l.append(input())\n    if t == 1:\n        o = True\n    else:\n        for i in range(t - 1):\n            for j in range(t - 1):\n                if l[i][j] == '1' and l[i + 1][j] == '0' and (l[i][j + 1] == '0'):\n                    o = False\n                    break\n                    break\n    if o:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nl = []\nfor _ in range(n):\n    g = []\n    for _ in range(int(input())):\n        g.append(list(input()))\n    l.append(g)\n\ndef check(l):\n    b = True\n    for i in range(len(l) - 1):\n        for j in range(len(l) - 1):\n            if l[i][j] == '1' and l[i + 1][j] == '0' and (l[i][j + 1] == '0'):\n                b = False\n    return b\n\ndef print_normal(b):\n    if b:\n        print('YES')\n    else:\n        print('NO')\nfor t in l:\n    print_normal(check(t))", "def didTrainingHappen(sideLengthOfReport, report):\n    for iRow in range(sideLengthOfReport):\n        if not possibleRow(sideLengthOfReport, report, iRow):\n            return 'NO'\n    return 'YES'\n\ndef possibleRow(sideLengthOfReport, report, iRow):\n    iMax = sideLengthOfReport - 1\n    for iColumn in range(sideLengthOfReport):\n        if report[iRow][iColumn] == '1' and iColumn != iMax and (iRow != iMax) and (report[iRow][iColumn + 1] == '0') and (report[iRow + 1][iColumn] == '0'):\n            return False\n    return True\n\ndef testCase_1360e():\n    sideLengthOfReport = int(input())\n    return (sideLengthOfReport, [input() for row in range(sideLengthOfReport)])\nnTestCases = int(input())\ntestCases = [testCase_1360e() for testCase in range(nTestCases)]\n[print(didTrainingHappen(*testCase)) for testCase in testCases]", "def didTrainingHappen(sideLengthOfReport, report):\n    for iRow in range(sideLengthOfReport):\n        if not possibleRow(sideLengthOfReport, report, iRow):\n            return 'NO'\n    return 'YES'\n\ndef possibleRow(sideLengthOfReport, report, iRow):\n    iMax = sideLengthOfReport - 1\n    for iColumn in range(sideLengthOfReport):\n        if report[iRow][iColumn] == '1' and iColumn != iMax and (iRow != iMax) and (report[iRow][iColumn + 1] == '0') and (report[iRow + 1][iColumn] == '0'):\n            return False\n    return True\n\ndef testCase_1360e():\n    sideLengthOfReport = int(input())\n    return (sideLengthOfReport, tuple((input() for row in range(sideLengthOfReport))))\nnTestCases = int(input())\ntestCases = tuple((testCase_1360e() for testCase in range(nTestCases)))\ntuple((print(didTrainingHappen(*testCase)) for testCase in testCases))", "for _ in range(int(input())):\n    n = int(input())\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if grid[i][j] == '1':\n                if grid[i + 1][j] == '0' and grid[i][j + 1] == '0':\n                    ans = 'NO'\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    polygon = []\n    for j in range(n):\n        line = list(input())\n        polygon.append(line)\n    flag = 0\n    for x in range(n):\n        for y in range(n):\n            if polygon[x][y] == '1':\n                if x != n - 1 and y != n - 1:\n                    if polygon[x][y + 1] == '0' and polygon[x + 1][y] == '0':\n                        flag = 1\n                        break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = [list(input()) + ['1'] for i in range(n)]\n    a.append(list('1' * (n + 1)))\n    bo = 1\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '1':\n                if a[i + 1][j] != '1' and a[i][j + 1] != '1':\n                    print('NO')\n                    bo = 0\n                    break\n        if not bo:\n            break\n    if bo:\n        print('YES')", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    mat = []\n    for i in range(m):\n        mat.append(input())\n    done = False\n    for i in range(m):\n        if done:\n            break\n        for j in range(m):\n            if mat[i][j] == '1' and i != m - 1 and (j != m - 1):\n                if mat[i + 1][j] == '1' or mat[i][j + 1] == '1':\n                    continue\n                else:\n                    done = True\n                    break\n    print('NO' if done else 'YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = [[int(i) for i in input() + '1'] for i in range(n)]\n    a.append([1] * n)\n    t = 'YES'\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 1 and a[i + 1][j] == 0 and (a[i][j + 1] == 0):\n                t = 'NO'\n                break\n        if t == 'NO':\n            break\n    print(t)", "def solve(n, a):\n    hay = False\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            if a[i][j] == 1 and a[i + 1][j] == 0 and (a[i][j + 1] == 0):\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append([int(j) for j in input()])\n    print(solve(n, matrix))", "from typing import *\n\ndef is_valid_board(board: List[str]) -> bool:\n    for (line_no, line) in enumerate(board):\n        for (col_no, x) in enumerate(line):\n            if x == '0':\n                continue\n            if line_no < len(board) - 1:\n                if board[line_no + 1][col_no] == '1':\n                    continue\n            else:\n                continue\n            if col_no < len(line) - 1:\n                if line[col_no + 1] == '1':\n                    continue\n            else:\n                continue\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    board = []\n    for _ in range(n):\n        board.append(input())\n    if is_valid_board(board):\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    key = 0\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if l[i][j] == '1':\n                if l[i][j + 1] != '1' and l[i + 1][j] != '1':\n                    key = 1\n                    break\n    if key == 0:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor ti in range(T):\n    ans = True\n    n = int(input())\n    pattern = []\n    for ri in range(n):\n        ip = [int(x) for x in list(input())]\n        pattern.append(ip)\n    for ri in range(n - 1):\n        if not ans:\n            break\n        for ci in range(n - 1):\n            if pattern[ri][ci] == 1 and pattern[ri][ci + 1] == 0 and (pattern[ri + 1][ci] == 0):\n                ans = False\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                ans = 'NO'\n                break\n        if ans == 'NO':\n            break\n    print(ans)", "n = int(input())\noutt = []\nfor i in range(n):\n    m = int(input())\n    mapp = [[] for j in range(m)]\n    for j in range(m):\n        mapp[j].extend(list(map(int, list(input()))))\n    boo = True\n    for xx in range(m - 1):\n        for x in range(m - 1):\n            if mapp[xx][x] > 0:\n                if mapp[xx + 1][x] == 0 and mapp[xx][x + 1] == 0:\n                    outt.append('NO')\n                    boo = False\n                    break\n        if not boo:\n            break\n    else:\n        outt.append('YES')\nfor i in outt:\n    print(i)", "for _1 in range(int(input())):\n    n = int(input())\n    l = [[int(x) for x in input()] for y in range(n)]\n    res = 'YES'\n    for x in range(n - 1):\n        for y in range(n - 1):\n            if l[x][y] == 1 and l[x][y + 1] == 0 and (l[x + 1][y] == 0):\n                res = 'NO'\n        if res == 'NO':\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = [input() for _ in range(n)]\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if m[i][j] == '1' and m[i + 1][j] == '0' and (m[i][j + 1] == '0'):\n                res = 'NO'\n                break\n        if res == 'NO':\n            break\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    A = [input() for _ in range(n)]\n    print('NO' if any((A[i][j] == '1' and A[i][j + 1] == A[i + 1][j] == '0' for i in range(n - 1) for j in range(n - 1))) else 'YES')", "t = int(input())\n\ndef q(l, n):\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if l[i][j] == 1:\n                if l[i + 1][j] == 0 and l[i][j + 1] == 0:\n                    return 'NO'\n    return 'YES'\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = input()\n        a = list(a)\n        a = list(map(int, a))\n        l.append(a)\n    print(q(l, n))", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = []\n    for i in range(n):\n        a = list(map(int, sys.stdin.readline().strip()))\n        A.append(a)\n    for i in range(n - 1):\n        break_outer = False\n        for j in range(n - 1):\n            if A[i][j] == 1 and A[i + 1][j] == 0 and (A[i][j + 1] == 0):\n                print('NO')\n                break_outer = True\n                break\n        if break_outer:\n            break\n    else:\n        print('YES')", "def existsOnes(ii, jj):\n    if mat[ii + 1][jj] == '1' or mat[ii][jj + 1] == '1':\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = []\n    for j in range(n):\n        row = input()\n        mat.append(row + '1')\n    row = ['1'] * (n + 1)\n    mat.append(row)\n    test = True\n    for ii in range(n):\n        if not test:\n            break\n        for jj in range(n):\n            if not test:\n                break\n            if mat[ii][jj] == '1':\n                test = existsOnes(ii, jj)\n    if test:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    n = int(input())\n    grid = []\n    flag = 0\n    for i in range(n):\n        grid.append(list(map(int, list(input()))))\n    for r in range(n - 1):\n        for c in range(n - 1):\n            if grid[r][c] == 1:\n                if grid[r][c + 1] or grid[r + 1][c]:\n                    continue\n                else:\n                    flag = 1\n                    break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')\n    t = t - 1", "import sys, random, bisect\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush\nfrom math import gcd\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\npy = lambda : print('YES')\npn = lambda : print('NO')\nt = ii()\nfor _ in range(t):\n    n = ii()\n    mat = []\n    for __ in range(n):\n        mat.append(input())\n    flag = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if mat[i][j] == '1':\n                if mat[i + 1][j] != '1' and mat[i][j + 1] != '1':\n                    flag = False\n                    break\n        if not flag:\n            break\n    if flag:\n        py()\n    else:\n        pn()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    k = []\n    for j in range(n):\n        k.append(list(map(int, input())))\n    p = 0\n    for j in range(n):\n        for h in range(n):\n            if k[j][h] == 1:\n                if j < n - 1 and h < n - 1 and (k[j + 1][h] == 0) and (k[j][h + 1] == 0):\n                    p += 1\n                    break\n        if p != 0:\n            break\n    if p == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor poligon in range(t):\n    good = 1\n    n = int(input())\n    p = []\n    for i in range(n):\n        p.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if p[i][j] == '1':\n                if i != n - 1 and j != n - 1:\n                    if p[i + 1][j] != '1' and p[i][j + 1] != '1':\n                        good = 0\n    if good == 1:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor t in range(T):\n    ans = 'YES'\n    n = int(input())\n    l = []\n    for k in range(n):\n        l.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            val = l[i][j]\n            if val == '1':\n                try:\n                    v1 = l[i][j + 1]\n                except:\n                    v1 = '1'\n                try:\n                    v2 = l[i + 1][j]\n                except:\n                    v2 = '1'\n                if v1 == '1' or v2 == '1':\n                    pass\n                else:\n                    ans = 'NO'\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append([int(i) for i in input()])\n    training = True\n    for i in range(n - 1):\n        for l in range(n - 1):\n            if arr[i][l] == 1:\n                if arr[i + 1][l] == 1 or arr[i][l + 1] == 1:\n                    pass\n                else:\n                    training = False\n    if training:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        t = list(input())\n        l.append(t)\n    for i in range(n):\n        for j in range(n):\n            f = 1\n            if l[i][j] == '1':\n                f = 0\n                if j + 1 < n and i + 1 < n:\n                    if l[i][j + 1] == '1':\n                        f = 1\n                    elif l[i + 1][j] == '1':\n                        f = 1\n                    else:\n                        f = 0\n                else:\n                    f = 1\n            if f == 0:\n                break\n        if f == 0:\n            break\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nans = []\nfor ti in range(t):\n    a = []\n    f = 0\n    n = int(input())\n    for i in range(n):\n        a.append(list(map(int, input())))\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if a[i][j] == 1:\n                if a[i + 1][j] != 1 and a[i][j + 1] != 1:\n                    f = 1\n                    break\n    if f == 1:\n        ans.append('NO')\n    else:\n        ans.append('YES')\nfor p in ans:\n    print(p)", "k = int(input())\nfor f in range(k):\n    n = int(input())\n    a = [[int(i) for i in input()] for j in range(n)]\n    flag = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if not (a[i][j] == 1 and (a[i + 1][j] == 1 or a[i][j + 1] == 1) or a[i][j] == 0):\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(bool, list(map(int, list(input()))))))\n    answer = True\n    for y in reversed(range(0, n - 1)):\n        for j in reversed(range(0, n - 1)):\n            if a[y][j] and (not a[y + 1][j]) and (not a[y][j + 1]):\n                answer = False\n                break\n        if not answer:\n            break\n    print('YES' if answer else 'NO')", "def jrbefndo():\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        s = input()\n        row = []\n        for c in s:\n            row.append(int(c))\n        row.append(1)\n        matrix.append(row)\n    row = [1] * (n + 1)\n    matrix.append(row)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1 and (matrix[i + 1][j] == 0 and matrix[i][j + 1] == 0):\n                print('NO')\n                return\n    print('YES')\n    return\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        jrbefndo()\n    return 0\nmain()", "t = int(input())\nfor _ in range(t):\n    m = []\n    n = int(input())\n    for __ in range(n):\n        m.append(list(map(int, list(input().replace(' ', '')))))\n    print_yes = True\n    for i in range(n - 1):\n        no = False\n        for j in range(n - 1):\n            if m[i][j] == 1 and i + 1 < n and (m[i + 1][j] == 0) and (j + 1 < n) and (m[i][j + 1] == 0):\n                print('NO')\n                no = True\n                break\n        if no:\n            print_yes = False\n            break\n    if print_yes:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    mtx = []\n    for j in range(n):\n        mtx.append([int(x) for x in list(input())])\n    flag = 0\n    for j in range(n):\n        for k in range(n):\n            if mtx[j][k] == 1 and k + 1 < n and (mtx[j][k + 1] == 0) and (j + 1 < n) and (mtx[j + 1][k] == 0):\n                print('NO')\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        print('YES')", "for _ in range(int(input())):\n    x = int(input())\n    l = []\n    for i in range(x):\n        l.append(input())\n    p = 'YES'\n    b = 0\n    for i in range(x):\n        for j in range(x):\n            if l[i][j] == '1':\n                if i != x - 1 and j != x - 1:\n                    if l[i][j + 1] != '1' and l[i + 1][j] != '1':\n                        p = 'NO'\n                        b = 1\n                        break\n        if b == 1:\n            break\n    print(p)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    mat = [list(input()) for i in range(n)]\n    f = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if mat[i][j] == '1':\n                if mat[i + 1][j] != '1' and mat[i][j + 1] != '1':\n                    f = False\n    print('YES' if f else 'NO')", "t = int(input())\nwhile t:\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        c = input()\n        matrix.append(c)\n    flag = 1\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if matrix[i][j] == '1' and matrix[i][j + 1] == '0' and (matrix[i + 1][j] == '0'):\n                flag = 0\n                break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    r = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == '1':\n                if i == n - 1 or j == n - 1:\n                    pass\n                elif arr[i + 1][j] == '1' or arr[i][j + 1] == '1':\n                    pass\n                else:\n                    r = 1\n                    break\n        if r == 1:\n            break\n    if r == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    ok = 1\n    n = int(input())\n    g = [input() for _ in range(n)]\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if g[i][j] == '1' and g[i + 1][j] == '0' and (g[i][j + 1] == '0'):\n                ok = 0\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    posj = []\n    posi = []\n    st = True\n    for i in range(n):\n        tmp = list(map(int, input()))\n        li.append(tmp)\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if li[i][j] == 0:\n                continue\n            if li[i + 1][j] == 0 and li[i][j + 1] == 0:\n                st = False\n                break\n    if st == True:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        m = []\n        for _ in range(n):\n            m.append(input())\n        flag = 0\n        for i in range(n):\n            for j in range(n):\n                if m[i][j] == '1':\n                    if i != n - 1 and j != n - 1:\n                        if m[i + 1][j] == '0' and m[i][j + 1] == '0':\n                            flag = 1\n                            break\n            if flag == 1:\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\nmain()", "t = int(input())\nfor test in range(0, t):\n    n = int(input())\n    s = []\n    for i in range(0, n):\n        a = input()\n        s.append(a)\n    f = True\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            if s[i][j] == '1':\n                if s[i][j + 1] == '0' and s[i + 1][j] == '0':\n                    f = False\n                    break\n        if not f:\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')"]