["def solve(n, string):\n    string = [c for c in string]\n    ans = 0\n\n    def valid(i, char):\n        if char == 'a':\n            return False\n        nbr = chr(ord(char) - 1)\n        return i - 1 >= 0 and string[i - 1] == nbr or (i + 1 < len(string) and string[i + 1] == nbr)\n    _maxxIdx = None\n    while string:\n        _maxxIdx = None\n        for (i, c) in enumerate(string):\n            if valid(i, c):\n                if _maxxIdx is not None:\n                    if c > string[_maxxIdx]:\n                        _maxxIdx = i\n                else:\n                    _maxxIdx = i\n        if _maxxIdx is None:\n            break\n        string.pop(_maxxIdx)\n    return n - len(string)\nprint(solve(int(input()), input()))", "import re\nn = int(input())\ns = input()\ny = 'z'\nwhile 'a' < y:\n    x = y + '*'\n    y = chr(ord(y) - 1)\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "n = int(input())\ns = input()\ns = list(s)\nfor i in range(97 + 26, 97, -1):\n    c = chr(i)\n    k = []\n    for j in range(len(s)):\n        if j - 1 >= 0 and s[j - 1] == chr(i - 1) and (s[j] == c):\n            k.append(j)\n            l = j + 1\n            while l < len(s) and s[l] == s[j]:\n                k.append(l)\n                l += 1\n        elif j + 1 < len(s) and s[j + 1] == chr(i - 1) and (s[j] == c):\n            k.append(j)\n            l = j - 1\n            while l >= 0 and s[l] == s[j]:\n                k.append(l)\n                l -= 1\n    now = []\n    for j in range(len(s)):\n        if j not in k:\n            now.append(s[j])\n    s = now.copy()\nprint(n - len(s))", "n = int(input())\ns = input()\nfor _ in range(len(s)):\n    mx = 0\n    ind = -1\n    for i in range(len(s)):\n        a = -1\n        b = -1\n        if i > 0:\n            if ord(s[i - 1]) == ord(s[i]) - 1:\n                a = i\n        if i + 1 < len(s):\n            if ord(s[i + 1]) == ord(s[i]) - 1:\n                b = i\n        if a == i or b == i:\n            if ord(s[i]) > mx:\n                mx = ord(s[i])\n                ind = i\n    if ind == -1:\n        break\n    else:\n        s = s[:ind] + s[ind + 1:]\nprint(n - len(s))", "n = int(input())\nx = input()\n\ndef remove(tmp, x):\n    removed = 0\n    if len(tmp) >= 2 and tmp[0] == x and (tmp[1] == x - 1):\n        removed += 1\n        tmp.pop(0)\n    i = 0\n    n = len(tmp)\n    while i < n:\n        if i == 0:\n            if len(tmp) >= 2 and tmp[0] == x and (tmp[1] == x - 1):\n                removed += 1\n                tmp.pop(0)\n                n -= 1\n                continue\n        elif i == n - 1:\n            if len(tmp) >= 2 and tmp[-1] == x and (tmp[-2] == x - 1):\n                removed += 1\n                tmp.pop(len(tmp) - 1)\n                n -= 1\n                continue\n        elif tmp[i] == x and (tmp[i + 1] == x - 1 or tmp[i - 1] == x - 1):\n            removed += 1\n            tmp.pop(i)\n            i -= 1\n            n -= 1\n            continue\n        i += 1\n    return removed\n\ndef solve(x, n):\n    out = 0\n    tmp = [ord(e) for e in x]\n    chars = list(set(tmp[:]))\n    chars.sort(reverse=True)\n    for char in chars:\n        out += remove(tmp, char)\n    print(out)\nsolve(x, n)", "n = int(input())\ns = input()\nfor maxElement in sorted(list(s), reverse=True):\n    prev = chr(ord(maxElement) - 1)\n    edited = False\n    for i in range(len(s)):\n        if s[i] == maxElement:\n            if i == 0 and i + 1 < len(s):\n                if s[i + 1] == prev:\n                    s = s[i + 1:]\n                    edited = True\n                    break\n            elif i == len(s) - 1 and i - 1 >= 0:\n                if s[i - 1] == prev:\n                    s = s[:i]\n                    edited = True\n                    break\n            elif i - 1 >= 0 and i + 1 < len(s):\n                if s[i - 1] == prev or s[i + 1] == prev:\n                    s = s[:i] + s[i + 1:]\n                    edited = True\n                    break\nprint(n - len(s))", "import heapq\nfrom sys import stdin\ninput = stdin.readline\n\ndef func():\n    ans = 0\n    count = 0\n    if n == 1:\n        print(0)\n        return\n    while True:\n        heap = []\n        for i in range(len(s)):\n            heap.append((-ord(s[i]), i))\n        heapq.heapify(heap)\n        while heap:\n            (ele, ind) = heapq.heappop(heap)\n            if ind == 0:\n                if ord(s[ind + 1]) == -ele - 1:\n                    s.pop(ind)\n                    count += 1\n                    break\n            elif ind == len(s) - 1:\n                if ord(s[ind - 1]) == -ele - 1:\n                    s.pop(ind)\n                    count += 1\n                    break\n            elif ord(s[ind + 1]) == -ele - 1 or ord(s[ind - 1]) == -ele - 1:\n                s.pop(ind)\n                count += 1\n                break\n        ans = ans + count\n        if len(s) <= 1 or count == 0:\n            break\n        count = 0\n    print(ans)\nn = int(input())\ns = list(input().rstrip())\nfunc()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nn = int(input())\narr = [ord(i) - 96 for i in input()]\narr.append(-1)\narr.insert(0, -1)\nans = 0\nfor i in range(26, 0, -1):\n    j = 1\n    while j < len(arr) - 1:\n        if arr[j] == i and (arr[j - 1] == i - 1 or arr[j + 1] == i - 1):\n            arr.pop(j)\n            ans += 1\n            j = 1\n            continue\n        j += 1\nprint(ans)", "from math import ceil, floor\nfrom collections import defaultdict\nfor _ in range(1):\n    n = int(input())\n    s = list(input())\n    s.append('#')\n    s.insert(0, '@')\n    ans = 0\n    while True:\n        flag = False\n        max_a = 'a'\n        pos = 0\n        for i in range(1, n + 1):\n            if ord(s[i]) - ord(s[i - 1]) == 1 or ord(s[i]) - ord(s[i + 1]) == 1:\n                if s[i] > max_a:\n                    max_a = s[i]\n                    flag = True\n                    pos = i\n        if flag:\n            ans += 1\n            n -= 1\n            s.pop(pos)\n        else:\n            break\n    print(ans)", "l = 'abcdefghijklmnopqrstuvwxyz'\nn = int(input())\ns = list(input())\nfor i in range(25, 0, -1):\n    remove_this = l[i]\n    j = 0\n    while j < len(s):\n        f = 0\n        if s[j] == remove_this:\n            if j - 1 > -1:\n                if s[j - 1] == l[i - 1]:\n                    s.pop(j)\n                    j = 0\n                    f = 1\n            if j + 1 < len(s) and f == 0:\n                if s[j + 1] == l[i - 1]:\n                    s.pop(j)\n                    j = 0\n                    f = 1\n        if f == 0:\n            j += 1\nprint(n - len(s))", "n = int(input())\ns = input()\nans = 0\ndone = True\nwhile done:\n    done = False\n    ind = -1\n    char = 0\n    for i in range(len(s)):\n        if i - 1 >= 0 and ord(s[i]) - ord(s[i - 1]) == 1:\n            done = True\n            if ord(s[i]) > char:\n                char = ord(s[i])\n                ind = i\n        if i + 1 < len(s) and ord(s[i]) - ord(s[i + 1]) == 1:\n            done = True\n            if ord(s[i]) > char:\n                char = ord(s[i])\n                ind = i\n    if done:\n        s = s[:ind] + (s[ind + 1:] if ind + 1 < len(s) else '')\n        ans += 1\nprint(ans)", "n = int(input())\ns = input()\nans = 0\nmaxs = max(s)\nnow = 0\nwhile ord(maxs) > ord('a'):\n    pos = s.find(maxs, now)\n    if pos != -1:\n        if pos - 1 >= 0 and ord(s[pos - 1]) == ord(maxs) - 1 or (pos + 1 < len(s) and ord(s[pos + 1]) == ord(maxs) - 1):\n            s = s[0:pos] + s[pos + 1:len(s)]\n            now = 0\n            ans += 1\n        else:\n            now = pos + 1\n    else:\n        maxs = chr(ord(maxs) - 1)\n        now = 0\nprint(ans)", "n = int(input())\ns = list(input())\ns = [ord(x) - ord('a') for x in s]\nl = [[] for i in range(26)]\nans = 0\nfor i in range(25, -1, -1):\n    k = 0\n    while k < len(s):\n        if s[k] == i:\n            if k - 1 >= 0 and s[k] - 1 == s[k - 1]:\n                s.pop(k)\n                k -= 1\n                ans += 1\n            if k + 1 < len(s) and s[k] - 1 == s[k + 1]:\n                s.pop(k)\n                k = -1\n                ans += 1\n        k += 1\nprint(ans)", "n = int(input())\ns = input()\n\ndef sol(s):\n    n = len(s)\n    if n == 1:\n        return 0\n    else:\n        ans = 0\n        m = 'a'\n        ind = -1\n        for i in range(n):\n            (f, b) = (min(n - 1, i + 1), max(0, i - 1))\n            if ord(s[i]) - ord(s[f]) == 1 or ord(s[i]) - ord(s[b]) == 1:\n                if s[i] > m:\n                    m = s[i]\n                    ind = i\n        if ind == -1:\n            return 0\n        elif ind == 0:\n            v = 1 + sol(s[ind + 1:])\n        elif ind == n - 1:\n            v = 1 + sol(s[:n - 1])\n        else:\n            v = 1 + sol(s[:ind] + s[ind + 1:])\n        return v\nprint(sol(s))", "from sys import stdin\ninput = stdin.readline\n\nclass Node:\n\n    def __init__(self, char):\n        self.val = ord(char)\n        self.next = None\n        self.prev = None\n\n    def remove(self):\n        self.prev.next = self.next\n        if self.next:\n            self.next.prev = self.prev\n\n    def check(self, itr):\n        if itr != self.val - ord('a'):\n            return\n        tmp = -1 if not self.next else self.next.val\n        if self.val - 1 in [self.prev.val, tmp]:\n            self.remove()\n            self.prev.check(itr)\n\nclass Deq:\n\n    def __init__(self):\n        self.head = Node('*')\n        self.tail = self.head\n\n    def add(self, char):\n        curr = Node(char)\n        self.tail.next = curr\n        curr.prev = self.tail\n        self.tail = curr\n\n    def print(self):\n        s = ''\n        curr = self.head.next\n        while curr:\n            s += chr(curr.val)\n            curr = curr.next\n        print(s)\n\n    def size(self):\n        cnt = 0\n        curr = self.head.next\n        while curr:\n            cnt += 1\n            curr = curr.next\n        return cnt\nn = int(input())\nans = 0\nd = Deq()\nfor i in input().strip():\n    d.add(i)\nfor i in range(25, 0, -1):\n    curr = d.head.next\n    while curr:\n        curr.check(i)\n        curr = curr.next\nprint(n - d.size())", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\nn = int(input())\ns = input()\nsl = string.ascii_lowercase[::-1]\nfor i in range(25):\n    sp = sl[i:i + 2]\n    while sp in s:\n        s = s.replace(sp, sl[i + 1])\n    sp = sp[::-1]\n    while sp in s:\n        s = s.replace(sp, sl[i + 1])\nprint(n - len(s))", "n = int(input())\ns = input()\nl = [ord(i) for i in s]\ncnt = 0\nwhile True:\n    mx = -3\n    flag = True\n    i = 0\n    index = -1\n    while i < n:\n        if i - 1 >= 0 and l[i] - l[i - 1] == 1 and (l[i] >= mx):\n            mx = l[i]\n            index = i\n            flag = False\n        if i + 1 < n and l[i] - l[i + 1] == 1 and (l[i] >= mx):\n            mx = l[i]\n            index = i\n            flag = False\n        i += 1\n    if flag:\n        break\n    l[index] = -10\n    l.remove(-10)\n    n -= 1\n    cnt += 1\nprint(cnt)", "def filtered(s, filt):\n    buf = ''\n    for tp in zip(s, filt):\n        if not tp[1]:\n            buf += tp[0]\n    return buf\nn = int(input())\ns = input()\nfor c in range(25, 0, -1):\n    deleted = [False] * len(s)\n    stack = [s[0]] * 2\n    for i in range(len(s)):\n        if s[i] != stack[-1]:\n            stack.append(s[i])\n        if c + ord('a') == ord(s[i]) and ord(s[i]) - ord(stack[-2]) == 1:\n            deleted[i] = True\n    stack = [s[-1]] * 2\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] != stack[-1]:\n            stack.append(s[i])\n        if c + ord('a') == ord(s[i]) and ord(s[i]) - ord(stack[-2]) == 1:\n            deleted[i] = True\n    s = filtered(s, deleted)\nprint(n - len(s))", "def func(a):\n    if len(a) == 1:\n        return a\n    ral = 0\n    a = '(' + a + ')'\n    flag = True\n    for i in range(1, len(a) - 1):\n        p = i\n        if chr(ord(a[p]) - 1) == a[p + 1] or chr(ord(a[p]) - 1) == a[p - 1]:\n            if ral <= ord(a[p]):\n                ral = ord(a[p])\n                k = p\n                flag = False\n    a = a[1:len(a) - 1]\n    if flag == False:\n        k = k - 1\n        a = func(a[0:k] + a[k + 1:])\n    return a\nn = int(input())\na = input()\na = func(a)\nprint(n - len(a))", "t = int(input())\nst = input()\nstlis = []\nfor i in range(t):\n    stlis.append(ord(st[i]) - 97)\nstlis.append(-10)\nfor i in range(25, -1, -1):\n    j = 0\n    while True:\n        if j >= len(stlis) - 1:\n            break\n        if stlis[j] == i:\n            try:\n                if j == 0:\n                    if stlis[j] - 1 == stlis[j + 1]:\n                        stlis.pop(0)\n                    else:\n                        j = j + 1\n                elif stlis[j] - 1 == stlis[j - 1] or stlis[j] - 1 == stlis[j + 1]:\n                    stlis.pop(j)\n                    j = 0\n                else:\n                    j = j + 1\n            except:\n                break\n        else:\n            j = j + 1\nprint(t - len(stlis) + 1)", "n = int(input())\ns = input()\nnow = ord('z')\nst = ord('a')\ntong = []\nfor i in range(144):\n    tong.append(0)\nfor c in s:\n    tong[ord(c)] += 1\nans = 0\nwhile now > st:\n    pd = 0\n    while 1:\n        pd = 0\n        i = 0\n        while i < len(s):\n            if ord(s[i]) == now and (i - 1 >= 0 and ord(s[i - 1]) == now - 1 or (i + 1 < len(s) and ord(s[i + 1]) == now - 1)):\n                s = s[0:i] + s[i + 1:len(s)]\n                tong[now] -= 1\n                pd = 1\n                ans += 1\n            i += 1\n        if pd == 0:\n            break\n    now -= 1\nprint(ans)", "n = int(input())\ns = input()\nnow = ord('z')\nst = ord('a')\ntong = []\nfor i in range(144):\n    tong.append(0)\nfor c in s:\n    tong[ord(c)] += 1\nans = 0\nmaxs = max(s)\nnow = 0\nwhile ord(maxs) > ord('a'):\n    pos = s.find(maxs, now)\n    if pos != -1:\n        if pos - 1 >= 0 and ord(s[pos - 1]) == ord(maxs) - 1 or (pos + 1 < len(s) and ord(s[pos + 1]) == ord(maxs) - 1):\n            s = s[0:pos] + s[pos + 1:len(s)]\n            now = 0\n            ans += 1\n        else:\n            now = pos + 1\n    else:\n        maxs = chr(ord(maxs) - 1)\n        now = 0\nprint(ans)", "n = int(input())\ns = input()\ns = [ord(x) - ord('a') for x in s]\ncur_size = n\nfor i in range(1, 26)[::-1]:\n    j = cur_size - 1\n    while j >= 0:\n        if s[j] != i:\n            j -= 1\n            continue\n        if j - 1 >= 0 and s[j - 1] == i - 1 or (j + 1 < len(s) and s[j + 1] == i - 1):\n            s = s[:j] + s[j + 1:]\n            cur_size -= 1\n            if j == cur_size:\n                j -= 1\n        else:\n            j -= 1\nprint(n - cur_size)", "n = int(input())\ns = list(input())\nd = {}\nalp = 'abcdefghijklmnopqrstuvwxyz'\nc = 0\nfor i in range(26):\n    d[alp[i]] = i\nl = []\nmi = d[s[0]]\nfor i in range(n):\n    l.append(d[s[i]])\n    if l[i] < mi:\n        mi = l[i]\nidx = 25\nwhile idx != 0:\n    if len(l) == 1:\n        break\n    else:\n        while True:\n            count = 0\n            for i in range(len(l)):\n                if l[i] == idx:\n                    if i == 0:\n                        if l[1] == idx - 1:\n                            l.pop(i)\n                            count += 1\n                            break\n                    elif i == len(l) - 1:\n                        if l[len(l) - 2] == idx - 1:\n                            l.pop(i)\n                            count += 1\n                            break\n                    elif l[i + 1] == idx - 1 or l[i - 1] == idx - 1:\n                        l.pop(i)\n                        count += 1\n                        break\n            if count == 0:\n                break\n        idx -= 1\nprint(n - len(l))", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    n = II()\n    s = SI()\n    aa = [100] + [ord(c) - 97 for c in s] + [100]\n    for code in range(25, 0, -1):\n        i = 1\n        while i < len(aa):\n            if aa[i] == code and (aa[i - 1] == code - 1 or aa[i + 1] == code - 1):\n                del aa[i]\n                if aa[i] == code - 1:\n                    i -= 1\n            else:\n                i += 1\n    print(n + 2 - len(aa))\nmain()", "n = int(input())\ns = input()\nres = 0\nfor _ in range(n):\n    (max_char, max_index) = ('A', -1)\n    for i in range(len(s)):\n        is_ok = False\n        if i > 0 and ord(s[i]) == ord(s[i - 1]) + 1:\n            is_ok = True\n        if i < len(s) - 1 and ord(s[i]) == ord(s[i + 1]) + 1:\n            is_ok = True\n        if is_ok and s[i] >= max_char:\n            max_index = i\n            max_char = s[i]\n    if max_index > -1:\n        s = s[:max_index] + s[max_index + 1:]\n        res += 1\n    else:\n        break\nprint(res)", "n = int(input())\nb = [i for i in map(ord, input())]\nfor i in range(max(b), min(b), -1):\n    while True and len(b) > 1:\n        idx = []\n        if b[0] == b[1] + 1 and b[0] == i:\n            idx.append(0)\n        for j in range(1, len(b) - 1):\n            if b[j] == i and (b[j] == b[j - 1] + 1 or b[j] == b[j + 1] + 1):\n                idx.append(j)\n        if b[-1] == b[-2] + 1 and b[-1] == i:\n            idx.append(len(b) - 1)\n        if len(idx) == 0:\n            break\n        for j in range(len(idx)):\n            del b[idx[j] - j]\nprint(n - len(b))", "def previous_char(x, y):\n    return ord(x) + 1 == ord(y)\nn = int(input().strip())\ns = list(input().strip())\nss = list(reversed(sorted([(s[i], i) for i in range(len(s))])))\ni = 0\nwhile i < len(ss):\n    max_index = ss[i][1]\n    if max_index + 1 < len(s) and previous_char(s[max_index + 1], s[max_index]) or (max_index > 0 and previous_char(s[max_index - 1], s[max_index])):\n        s = s[:max_index] + s[max_index + 1:]\n        ss = list(reversed(sorted([(s[i], i) for i in range(len(s))])))\n        i = 0\n    else:\n        i += 1\nprint(n - len(s))", "n = int(input())\ns = input()\nz = list(range(0, 26))[::-1]\nords = [ord(i) - ord('a') for i in s]\nfor i in z:\n    pos = len(ords) - 1\n    while pos >= 0:\n        if ords[pos] == i:\n            if pos - 1 >= 0 and ords[pos - 1] == i - 1 or (pos + 1 < len(ords) and ords[pos + 1] == i - 1):\n                del ords[pos]\n                if len(ords) == pos:\n                    pos -= 1\n            else:\n                pos -= 1\n        else:\n            pos -= 1\nprint(n - len(ords))", "n = int(input())\ns = list(input())\nk = 0\nans = 0\nwhile k == 0:\n    k = 1\n    num = []\n    for i in range(1, len(s)):\n        if ord(s[i]) - 1 == ord(s[i - 1]):\n            k = 0\n            num.append([ord(s[i]), i])\n        elif ord(s[i]) + 1 == ord(s[i - 1]):\n            k = 0\n            num.append([ord(s[i - 1]), i - 1])\n    if num:\n        num.sort()\n        ans += 1\n        index = num[-1][1]\n        s.pop(index)\nprint(ans)", "n = int(input())\ns = input()\ncount = 0\nfor _ in range(n):\n    maxi = 0\n    idx = -1\n    lens = len(s)\n    for i in range(lens - 1):\n        if abs(ord(s[i]) - ord(s[i + 1])) == 1:\n            if ord(s[i]) > maxi:\n                maxi = ord(s[i])\n                idx = i\n            if ord(s[i + 1]) > maxi:\n                maxi = ord(s[i + 1])\n                idx = i + 1\n    if idx == -1:\n        break\n    if idx == lens - 1:\n        s = s[:idx]\n    else:\n        s = s[:idx] + s[idx + 1:]\n    count += 1\nprint(count)", "n = input()\nstring = input()\nlastString = string\ngo = True\nremoved = 0\n\ndef removeChar(s):\n    index = 0\n    found = False\n    for i in range(len(s)):\n        if (ord(s[i]) > ord(s[index]) or found == False) and (i > 0 and ord(s[i]) - ord(s[i - 1]) == 1 or (i < len(s) - 1 and ord(s[i]) - ord(s[i + 1]) == 1)):\n            index = i\n            found = True\n    if found == True:\n        s = s[:index] + s[index + 1:]\n    return s\nwhile go == True:\n    string = removeChar(string)\n    if string == lastString:\n        go = False\n    else:\n        lastString = string\n        removed += 1\nprint(removed)", "n = int(input())\ns = [x for x in input()]\nalpha = [x for x in ' abcdefghijklmnopqrstuvwxyz']\nwhile len(s) > 1:\n    maxvalue = 'a'\n    maxindex = -1\n    for (i, x) in enumerate(s):\n        if x >= maxvalue:\n            flag = False\n            if i == 0:\n                if s[i + 1] == alpha[alpha.index(x) - 1]:\n                    flag = True\n            elif i == len(s) - 1:\n                if s[i - 1] == alpha[alpha.index(x) - 1]:\n                    flag = True\n            elif s[i - 1] == alpha[alpha.index(x) - 1] or s[i + 1] == alpha[alpha.index(x) - 1]:\n                flag = True\n            if flag:\n                maxvalue = x\n                maxindex = i\n    if maxindex == -1:\n        break\n    else:\n        s.pop(maxindex)\nprint(n - len(s))", "n = int(input())\nar = [ord(x) - 97 for x in input()]\nans = 0\nflag = True\nwhile flag:\n    temp = -1\n    ind = -1\n    for k in range(1, len(ar) - 1):\n        if (ar[k] == ar[k - 1] + 1 or ar[k] == ar[k + 1] + 1) and ar[k] > temp:\n            ind = k\n            temp = ar[k]\n    if len(ar) > 1 and ar[0] == ar[1] + 1 and (ar[0] > temp):\n        ind = 0\n        temp = ar[0]\n    if len(ar) > 1 and ar[-1] == ar[-2] + 1 and (ar[-1] > temp):\n        ind = len(ar) - 1\n        temp = ar[-1]\n    if temp != -1:\n        ar = ar[:ind] + ar[ind + 1:]\n        ans += 1\n    else:\n        flag = False\nprint(ans)", "n = int(input())\nx = list(input())\ny = len(x)\nabc = list('abcdefghijklmnopqrstuvwxyz')\npre = list('0abcdefghijklmnopqrstuvwxy')\nfor i in range(1, len(abc)):\n    s = 0\n    while s < len(x):\n        if x[s] == abc[-i]:\n            if s - 1 >= 0 and x[s - 1] == pre[-i]:\n                del x[s]\n                s -= 1\n            elif s + 1 < len(x) and x[s + 1] == pre[-i]:\n                del x[s]\n                if s > 0:\n                    s -= 2\n                else:\n                    s -= 1\n        s += 1\nanswer = y - len(x)\nprint(answer)", "m = int(input())\ns = input() + '0'\nnum = []\nle = len(s)\nco = 1\nfor i in range(le - 1):\n    if s[i] != s[i + 1]:\n        num.append([ord(s[i]), co])\n        co = 1\n    else:\n        co += 1\nli = len(num)\nmi = min(num)\ni2 = mi[0]\nfor l in range(li):\n    ma = max(num)\n    i1 = num.index(ma)\n    le = len(num)\n    if le < 2 or i2 == ma[0]:\n        break\n    elif i1 == 0:\n        if num[i1][0] == num[i1 + 1][0] + 1:\n            num.remove(ma)\n        else:\n            num[i1][0] -= 90\n    elif i1 == le - 1:\n        if num[i1][0] == num[i1 - 1][0] + 1:\n            num.remove(ma)\n        else:\n            num[i1][0] -= 90\n    elif num[i1][0] == num[i1 + 1][0] + 1 or num[i1][0] == num[i1 - 1][0] + 1:\n        num.remove(ma)\n    else:\n        num[i1][0] -= 90\n    numd = []\n    num.append([1, 0])\n    lc = len(num)\n    for i in range(lc - 1):\n        if num[i][0] == num[i + 1][0]:\n            num[i][1] = num[i][1] + num[i + 1][1]\n            num[i + 1] = num[i]\n        else:\n            numd.append(num[i])\n    num = numd[:]\nto = 0\nfor i in num:\n    to += i[1]\nprint(m - to)", "n = int(input())\ns = input()\nu = ord('a')\nfor i in range(n):\n    a = 0\n    m = 0\n    for j in range(len(s)):\n        if j == 0:\n            if j + 1 < len(s) and ord(s[j]) == ord(s[j + 1]) + 1:\n                if ord(s[j]) > m:\n                    m = ord(s[j])\n                    a = j\n        elif j == len(s) - 1:\n            if j - 1 >= 0 and ord(s[j]) == ord(s[j - 1]) + 1:\n                if ord(s[j]) > m:\n                    m = ord(s[j])\n                    a = j\n        elif j + 1 < len(s) and ord(s[j]) == ord(s[j + 1]) + 1 or (j - 1 >= 0 and ord(s[j]) == ord(s[j - 1]) + 1):\n            if ord(s[j]) > m:\n                m = ord(s[j])\n                a = j\n    if m == 0:\n        print(n - len(s))\n        exit()\n    else:\n        s = s[0:a] + s[a + 1:len(s)]", "alphabet = 'abcdefghijklmnopqrstuvwxyz'\npos = {alphabet[i]: i for i in range(26)}\n\ndef compute(s, n):\n    if len(s) <= 1:\n        return 0\n    char = alphabet[n]\n    word = []\n    ans = 0\n    for i in range(len(s)):\n        if s[i][0] == char:\n            if i != 0 and pos[s[i - 1][0]] == pos[s[i][0]] - 1 or (i != len(s) - 1 and pos[s[i + 1][0]] == pos[s[i][0]] - 1):\n                ans += s[i][1]\n            else:\n                ans += compute(word, n - 1)\n                word = []\n        elif not word or word[-1][0] != s[i][0]:\n            word.append(s[i])\n        else:\n            word[-1][1] += s[i][1]\n    ans += compute(word, n - 1)\n    return ans\n\ndef simplify(s):\n    lst = []\n    for i in range(len(s)):\n        if not lst or lst[-1][0] != s[i]:\n            lst.append([s[i], 1])\n        else:\n            lst[-1][1] += 1\n    return lst\nn = input()\ns = simplify(input())\nprint(compute(s, 25))", "a = int(input())\ns = input()\nfor i in range(25):\n    ch = chr(ord('z') - i)\n    prev = chr(ord(ch) - 1)\n    j = 0\n    while j < len(s):\n        if s[j] == ch and (j - 1 >= 0 and s[j - 1] == prev or (j + 1 < len(s) and s[j + 1] == prev)):\n            s = s[:j] + s[j + 1:]\n            j = 0\n        else:\n            j += 1\nprint(a - len(s))", "n = int(input())\ns = input()\nl = [ord(i) for i in s]\nmaxa = 0\nnumofc = 1\nif n == 1:\n    print(0)\nelse:\n    while 1:\n        numofc = 0\n        lo = []\n        if len(l) > 1:\n            if l[0] == l[1] + 1:\n                lo.append((l[0], 0))\n            if l[-1] == l[-2] + 1:\n                lo.append((l[-1], len(l) - 1))\n            for i in range(1, len(l) - 1):\n                if l[i - 1] == l[i] - 1 or l[i + 1] == l[i] - 1:\n                    lo.append((l[i], i))\n            numofc = len(lo)\n            if numofc > 0:\n                maxa = max(lo)\n                l.pop(maxa[1])\n            else:\n                break\n        else:\n            break\n    print(len(s) - len(l))", "n = int(input())\ns = input()\ns = '!' + s + '!'\ncnt = 0\nif n > 1:\n    for char in range(ord('z'), ord('a') - 1, -1):\n        i = 0\n        while len(s) > 0 and i < len(s):\n            if i == 0:\n                if s[i] == chr(char) and s[i] == chr(ord(s[i + 1]) + 1):\n                    s = s[:i] + s[i + 1:]\n                    cnt += 1\n                    i = 0\n            elif i == len(s) - 1:\n                if s[i] == chr(char) and s[i] == chr(ord(s[i - 1]) + 1):\n                    s = s[:i] + s[i + 1:]\n                    cnt += 1\n                    i = 0\n            elif s[i] == chr(char) and (s[i] == chr(ord(s[i + 1]) + 1) or s[i] == chr(ord(s[i - 1]) + 1)):\n                s = s[:i] + s[i + 1:]\n                cnt += 1\n                i = 0\n            i += 1\nprint(cnt)", "n = int(input())\nactual = n\ns = input()\nfor i in range(100):\n    n = len(s)\n    ind = -1\n    big = 0\n    for i in range(n):\n        L = 0\n        R = 0\n        curr = ord(s[i])\n        if i - 1 >= 0:\n            L = ord(s[i - 1])\n        if i + 1 < n:\n            R = ord(s[i + 1])\n        if curr == L + 1 or curr == R + 1:\n            if curr > big:\n                big = curr\n                ind = i\n    if ind > -1:\n        s = s[:ind] + s[ind + 1:]\nprint(actual - len(s))", "def is_right_less(s, i):\n    return i + 1 < len(s) and ord(s[i]) - ord(s[i + 1]) == 1\n\ndef is_left_less(s, i):\n    return i - 1 >= 0 and ord(s[i]) - ord(s[i - 1]) == 1\n\ndef sort_dict(p: dict) -> dict:\n    temp = {k: v for (k, v) in sorted(p.items(), key=lambda item: item[1])}\n    x = list(temp.items())\n    x.reverse()\n    return {k: v for (k, v) in x}\n\ndef check_neighbours(s, i):\n    if is_left_less(s, i) or is_right_less(s, i):\n        return i\n    else:\n        return -1\n\ndef remove_neighbors(s: str) -> int:\n    s = list(s)\n    removed = 0\n    while len(s) != 0:\n        candidates = {}\n        for j in range(len(s)):\n            c = check_neighbours(s, j)\n            if c >= 0:\n                candidates[c] = s[c]\n        candidates = sort_dict(candidates)\n        if len(candidates) > 0:\n            s.pop(list(candidates.items())[0][0])\n            removed += 1\n        else:\n            break\n    return removed\nlen_s = int(input())\ns = input()\nprint(remove_neighbors(s))", "n = int(input())\ns = list(input())\n\ndef recursion(s, target=chr(ord('a') + 25)):\n    if target == 'a':\n        return 0\n    else:\n        count = 0\n        stack = []\n        hunterr = chr(ord(target) - 1)\n        for i in s:\n            if not stack:\n                stack.append(i)\n            elif i == hunterr and stack[-1] == target:\n                while stack and stack[-1] == target:\n                    stack.pop()\n                    count += 1\n                stack.append(i)\n            elif i == target and stack[-1] == hunterr:\n                count += 1\n            else:\n                stack.append(i)\n        return count + recursion(stack, hunterr)\nprint(recursion(s))", "def calc(i):\n    if i != 0 and ord(s[i - 1]) == ord(s[i]) - 1:\n        return True\n    if i != len(s) - 1 and ord(s[i + 1]) == ord(s[i]) - 1:\n        return True\n    return False\nn = int(input())\ns = list(input())\nans = 0\nfor i in range(122, 96, -1):\n    j = 0\n    while j < len(s):\n        if ord(s[j]) == i and calc(j):\n            ans += 1\n            s.pop(j)\n            j = max(0, j - 1)\n        else:\n            j += 1\nprint(ans)", "n = int(input())\ns = input()\nu = ord('a')\nfor i in range(n):\n    a = 0\n    m = 0\n    for j in range(len(s)):\n        if j == 0:\n            if j + 1 < len(s) and ord(s[j]) == ord(s[j + 1]) + 1:\n                if ord(s[j]) > m:\n                    m = ord(s[j])\n                    a = j\n        elif j == len(s) - 1:\n            if j - 1 >= 0 and ord(s[j]) == ord(s[j - 1]) + 1:\n                if ord(s[j]) > m:\n                    m = ord(s[j])\n                    a = j\n        elif j + 1 < len(s) and ord(s[j]) == ord(s[j + 1]) + 1 or (j - 1 >= 0 and ord(s[j]) == ord(s[j - 1]) + 1):\n            if ord(s[j]) > m:\n                m = ord(s[j])\n                a = j\n    if m == 0:\n        print(n - len(s))\n        exit()\n    else:\n        s = s[0:a] + s[a + 1:len(s)]", "n = int(input())\nl = list(input())\nct = []\nx = ''\ni = 0\nwhile i < n:\n    t = l[i]\n    x = x + l[i]\n    c = 0\n    while t == l[i]:\n        c = c + 1\n        i = i + 1\n        if i == n:\n            break\n    ct.append(c)\nl = list(x)\nans = 0\nf = 1\nwhile f:\n    f = 0\n    m = 'a'\n    mi = 0\n    for i in range(1, len(l)):\n        if abs(ord(l[i]) - ord(l[i - 1])) == 1:\n            if max(ord(l[i]), ord(l[i - 1])) > ord(m):\n                if ord(l[i]) > ord(l[i - 1]):\n                    m = l[i]\n                    mi = i\n                else:\n                    m = l[i - 1]\n                    mi = i - 1\n            f = 1\n    if f:\n        ans = ans + ct[mi]\n        l.pop(mi)\n        ct.pop(mi)\nprint(ans)", "from sys import stdin\ninput = stdin.readline\nn = int(input())\ns = list(input().strip())\nfor i in range(26):\n    char = chr(ord('z') - i)\n    prev = chr(ord('z') - i - 1)\n    updated = True\n    while updated:\n        updated = False\n        for idx in range(len(s) - 1, -1, -1):\n            if s[idx] == char:\n                if idx < len(s) - 1 and s[idx + 1] == prev:\n                    s.pop(idx)\n                    updated = True\n                elif idx > 0 and s[idx - 1] == prev:\n                    s.pop(idx)\n                    updated = True\nprint(n - len(s))", "n = int(input())\ns = input()\nflag = True\nwhile flag:\n    s1 = ''\n    n1 = len(s)\n    m = 95\n    ind = -1\n    for i in range(len(s)):\n        k = 0\n        a = ord(s[i])\n        if i < n1 - 1:\n            if ord(s[i + 1]) - a == -1:\n                if a > m:\n                    m = a\n                    ind = i\n                continue\n        if i > 0:\n            if ord(s[i - 1]) - a == -1:\n                if a > m:\n                    m = a\n                    ind = i\n                continue\n    if ind == -1:\n        break\n    s = s[0:ind] + s[ind + 1:n1]\nprint(n - len(s))", "n = int(input())\ns = list(input())\nk = 0\nanswer = 0\nwhile k == 0:\n    k = 1\n    mas = []\n    for i in range(1, len(s)):\n        if ord(s[i]) - 1 == ord(s[i - 1]):\n            k = 0\n            mas.append([ord(s[i]), i])\n        elif ord(s[i]) + 1 == ord(s[i - 1]):\n            k = 0\n            mas.append([ord(s[i - 1]), i - 1])\n    if mas:\n        mas.sort()\n        answer += 1\n        ind = mas[-1][1]\n        s.pop(ind)\nprint(answer)", "l = int(input())\ns = input()\nans = 0\nfor i in range(l):\n    pos = ('a', -1)\n    n = len(s)\n    for j in range(n):\n        if j > 0:\n            if ord(s[j - 1]) == ord(s[j]) - 1:\n                pos = max(pos, (s[j], j))\n        if j < n - 1:\n            if ord(s[j + 1]) == ord(s[j]) - 1:\n                pos = max(pos, (s[j], j))\n    if pos[1] != -1:\n        s = s[:pos[1]] + s[pos[1] + 1:]\n        ans += 1\nprint(ans)", "n = int(input())\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\ny = input()\nans = 0\nfor i in range(25):\n    for j in range(len(y)):\n        cont = True\n        while cont == True:\n            if j < len(y) and y[len(y) - 1 - j] == alphabet[25 - i]:\n                if j < len(y) - 1 and y[len(y) - 2 - j] == alphabet[24 - i] or (j > 0 and y[len(y) - j] == alphabet[24 - i]):\n                    ans += 1\n                    m = y[:len(y) - 1 - j] + y[len(y) - j:] + '-'\n                    y = m\n                else:\n                    cont = False\n            else:\n                cont = False\nprint(ans)", "n = input()\ns = input()\ns = [char for char in s]\nalphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\ninst = []\ngo = True\nno = []\nfor a in range(25, 0, -1):\n    go = True\n    while go:\n        inst = []\n        for b in range(len(s)):\n            if s[b] == alphabet[a]:\n                inst.append(b)\n        go = False\n        no = []\n        for i in inst:\n            if i != 0 and s[i - 1] == alphabet[a - 1]:\n                no.append(i)\n                go = True\n            elif i != len(s) - 1 and s[i + 1] == alphabet[a - 1]:\n                no.append(i)\n                go = True\n        for i in range(len(no) - 1, -1, -1):\n            s.pop(no[i])\nprint(str(int(n) - len(s)))", "n = int(input())\ns = input()\n\ndef f(s, c, cc):\n    m = len(s)\n    if m == 1:\n        return s\n    l = [1] * m\n    for i in range(m - 1):\n        if s[i] == cc and s[i + 1] == c:\n            l[i + 1] = 0\n        if s[i] == c and s[i + 1] == c:\n            l[i + 1] = l[i]\n    for i in range(m - 1, 0, -1):\n        if s[i] == cc and s[i - 1] == c:\n            l[i - 1] = 0\n        if s[i] == c and s[i - 1] == c:\n            l[i - 1] = l[i]\n    ret = ''\n    for i in range(m):\n        if l[i] == 1:\n            ret += s[i]\n    return ret\nfor x in range(122, 97, -1):\n    s = f(s, chr(x), chr(x - 1))\nprint(n - len(s))", "sl = int(input())\ns = input()\nv = [[s[x], 0] for x in range(sl)]\nfor i in range(sl):\n    if i - 1 >= 0 and ord(v[i - 1][0]) == ord(v[i][0]) - 1:\n        v[i][1] += 1\n    if i + 1 < sl and ord(v[i + 1][0]) == ord(v[i][0]) - 1:\n        v[i][1] += 1\nans = 0\n\ndef findmax(va):\n    ind = -1\n    ans = ['a', 0]\n    for i in range(len(v)):\n        if va[i][1] == 0:\n            continue\n        elif ans < va[i]:\n            ind = i\n            ans = va[i]\n    return ind\nmi = findmax(v)\nwhile mi != -1:\n    if mi - 1 >= 0 and ord(v[mi - 1][0]) - 1 == ord(v[mi][0]):\n        v[mi - 1][1] -= 1\n    if mi + 1 < len(v) and ord(v[mi + 1][0]) - 1 == ord(v[mi][0]):\n        v[mi + 1][1] -= 1\n    pv = v.pop(mi)\n    if mi < len(v) and mi - 1 >= 0 and (ord(v[mi][0]) - 1 == ord(v[mi - 1][0])):\n        v[mi][1] += 1\n    if mi < len(v) and mi - 1 >= 0 and (ord(v[mi][0]) + 1 == ord(v[mi - 1][0])):\n        v[mi - 1][1] += 1\n    mi = findmax(v)\n    ans += 1\nprint(ans)", "def filtered(s, filt):\n    buf = ''\n    for tp in zip(s, filt):\n        if not tp[1]:\n            buf += tp[0]\n    return buf\nn = int(input())\ns = input()\nfor c in range(25, 0, -1):\n    deleted = [False] * len(s)\n    for i in range(len(s)):\n        j = i + 1\n        while j < len(s) and c + ord('a') == ord(s[j]) and (ord(s[j]) - ord(s[i]) == 1):\n            deleted[j] = True\n            j += 1\n        j = i - 1\n        while j >= 0 and c + ord('a') == ord(s[j]) and (ord(s[j]) - ord(s[i]) == 1):\n            deleted[j] = True\n            j -= 1\n    s = filtered(s, deleted)\nprint(n - len(s))", "def solve(s):\n    d = 0\n    for ss in sorted(set(s), reverse=True):\n        while True:\n            n = len(s)\n            ns = list()\n            succ = False\n            for idx in range(len(s)):\n                if s[idx] == ss and (s[max(0, idx - 1)] + 1 == s[idx] or s[min(n - 1, idx + 1)] + 1 == s[idx]):\n                    d += 1\n                    succ = True\n                else:\n                    ns.append(s[idx])\n            s = ns\n            if not succ:\n                break\n    return d\nN = int(input())\ns = list(map(ord, list(input())))\nprint(solve(s))", "n = int(input())\ns = input()\nnow = ord('z')\nst = ord('a')\ntong = []\nfor i in range(144):\n    tong.append(0)\nfor c in s:\n    tong[ord(c)] += 1\nans = 0\nwhile now > st:\n    pd = 0\n    while 1:\n        pd = 0\n        i = 0\n        for c in s:\n            if i >= len(s):\n                break\n            if ord(s[i]) == now and (i - 1 >= 0 and ord(s[i - 1]) == now - 1 or (i + 1 < len(s) and ord(s[i + 1]) == now - 1)):\n                s = s[0:i] + s[i + 1:len(s)]\n                tong[now] -= 1\n                pd = 1\n                ans += 1\n            i += 1\n        if pd == 0:\n            break\n    now -= 1\nprint(ans)", "l = int(input())\ns = input()\nans = 0\nfor i in range(l):\n    pos = ('a', -1)\n    n = len(s)\n    for j in range(n):\n        if j > 0:\n            if ord(s[j - 1]) == ord(s[j]) - 1:\n                pos = max(pos, (s[j], j))\n        if j < n - 1:\n            if ord(s[j + 1]) == ord(s[j]) - 1:\n                pos = max(pos, (s[j], j))\n    if pos[1] != -1:\n        s = s[:pos[1]] + s[pos[1] + 1:]\n        ans += 1\nprint(ans)", "n = int(input())\ns = list(input())\nfor i in range(n):\n    s[i] = ord(s[i]) - 97\nch = [i for i in range(26, -1, -1)]\ns = [-100] + s + [-100]\nfor i in ch:\n    j = 1\n    while j < len(s) - 1:\n        if s[j] == i:\n            if s[j] == s[j - 1] + 1 or s[j] == s[j + 1] + 1:\n                s.pop(j)\n                j = 1\n            else:\n                j += 1\n        else:\n            j += 1\nprint(n + 2 - len(s))", "n = int(input())\ns = input()\ni = 0\na = 'a'\nind = -1\nf = True\nwhile f:\n    ind = -1\n    a = 'a'\n    i = 0\n    while i < len(s):\n        if i == 0:\n            if len(s) >= 2:\n                if ord(s[i]) == ord(s[i + 1]) + 1:\n                    if ord(a) < ord(s[i]):\n                        a = s[i]\n                        ind = i\n        elif i == len(s) - 1 and len(s) >= 2:\n            if ord(s[i]) == ord(s[i - 1]) + 1:\n                if ord(a) < ord(s[i]):\n                    a = s[i]\n                    ind = i\n        elif ord(s[i]) == ord(s[i - 1]) + 1 or ord(s[i]) == ord(s[i + 1]) + 1:\n            if ord(a) < ord(s[i]):\n                a = s[i]\n                ind = i\n        i += 1\n    if ind != -1:\n        if ind + 1 != len(s):\n            s = s[0:ind] + s[ind + 1:]\n        else:\n            s = s[0:ind]\n    else:\n        f = False\nprint(n - len(s))", "n = int(input())\na = list(input())\nfor i in range(25, 0, -1):\n    cur = chr(97 + i)\n    prev = chr(96 + i)\n    j = 0\n    while True:\n        if j >= len(a):\n            break\n        x = j - 1 if j != 0 else j\n        y = j + 1 if j != len(a) - 1 else j\n        if a[j] == cur and (a[x] == prev or a[y] == prev):\n            a.pop(j)\n            j -= 1\n        j += 1\n    j = len(a) - 1\n    while j >= 0:\n        x = j - 1 if j != 0 else j\n        y = j + 1 if j != len(a) - 1 else j\n        if a[j] == cur and (a[x] == prev or a[y] == prev):\n            a.pop(j)\n            j += 1\n        j -= 1\nprint(n - len(a))", "n = int(input())\ns = list(input())\nfor i in range(ord('z'), ord('a') - 1, -1):\n    j = 0\n    while j < len(s):\n        if len(s) <= j:\n            break\n        if j == len(s) - 1:\n            if s[j] == chr(i) and s[j - 1] == chr(i - 1):\n                k = s.pop(j)\n                j = 0\n                continue\n        elif j == 0:\n            if s[j] == chr(i) and s[j + 1] == chr(i - 1):\n                k = s.pop(j)\n                j = 0\n                continue\n        elif s[j] == chr(i) and (s[j - 1] == chr(i - 1) or s[j + 1] == chr(i - 1)):\n            k = s.pop(j)\n            j = 0\n            continue\n        j = j + 1\nprint(n - len(s))", "n = int(input())\ns = list(input())\nk = 0\nans = 0\nwhile k == 0:\n    k = 1\n    num = []\n    for i in range(1, len(s)):\n        if ord(s[i]) - 1 == ord(s[i - 1]):\n            k = 0\n            num.append([ord(s[i]), i])\n        elif ord(s[i]) + 1 == ord(s[i - 1]):\n            k = 0\n            num.append([ord(s[i - 1]), i - 1])\n    if num:\n        num.sort()\n        ans += 1\n        index = num[-1][1]\n        s.pop(index)\nprint(ans)", "N = int(input())\nS = list(input())\nres = 0\nfor i in range(26):\n    idx = 0\n    found = True\n    while found:\n        found = False\n        while idx < len(S):\n            if S[idx] == chr(ord('z') - i):\n                if idx + 1 < len(S) and ord(S[idx]) - ord(S[idx + 1]) == 1 or (idx - 1 >= 0 and ord(S[idx]) - ord(S[idx - 1]) == 1):\n                    S.pop(idx)\n                    res += 1\n                    found = True\n                else:\n                    idx += 1\n            else:\n                idx += 1\n        idx = 0\nprint(res)", "n = int(input())\ns = input()\nl = []\nfor i in range(n):\n    t = ord(s[i])\n    if t not in l:\n        l.append(t)\nl.sort(reverse=True)\nc = 0\nwhile len(l) > 1:\n    j = 0\n    f = False\n    while j < len(s):\n        if ord(s[j]) == l[0]:\n            if j == 0:\n                if ord(s[1]) == l[0] - 1:\n                    s = s[1:]\n                    c += 1\n                    f = True\n                else:\n                    j += 1\n            elif j == len(s) - 1:\n                if ord(s[len(s) - 2]) == l[0] - 1:\n                    s = s[:len(s) - 1]\n                    c += 1\n                    f = True\n                else:\n                    j += 1\n            elif ord(s[j + 1]) == l[0] - 1 or ord(s[j - 1]) == l[0] - 1:\n                s = s[:j] + s[j + 1:]\n                c += 1\n                f = True\n            else:\n                j += 1\n        else:\n            j += 1\n    if not f:\n        l.pop(0)\nprint(c)", "n = int(input())\ns = input()\nfor i in range(25):\n    ch = chr(ord('z') - i)\n    prev = chr(ord(ch) - 1)\n    j = 0\n    while j < len(s):\n        if s[j] == ch and (j - 1 >= 0 and s[j - 1] == prev or (j + 1 < len(s) and s[j + 1] == prev)):\n            s = s[:j] + s[j + 1:]\n            j = 0\n        else:\n            j += 1\nprint(n - len(s))", "n = int(input())\ns = input()\nfor i in range(25):\n    ch = chr(ord('z') - i)\n    prev = chr(ord(ch) - 1)\n    j = 0\n    while j < len(s):\n        if s[j] == ch and (j - 1 >= 0 and s[j - 1] == prev or (j + 1 < len(s) and s[j + 1] == prev)):\n            s = s[:j] + s[j + 1:]\n            j = 0\n        else:\n            j += 1\nprint(n - len(s))", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = input()\nA = [100]\nfor i in a:\n    A.append(ord(i) - 97)\nA.append(100)\nB = [i for i in range(26, -1, -1)]\nfor i in B:\n    j = 1\n    while j < len(A) - 1:\n        if A[j] == i:\n            if A[j] == A[j - 1] + 1 or A[j] == A[j + 1] + 1:\n                A.pop(j)\n                j = 1\n            else:\n                j = j + 1\n        else:\n            j = j + 1\nprint(n - len(A) + 3)", "le = int(input())\nar = list('0' + input() + '0')\nal = list('abcdefghijklmnopqrstuvwxyz')\ndic = {'0': -5}\nfor i in range(1, 27):\n    dic[al[i - 1]] = i\ncount = 0\nfor i in range(le):\n    li = 0\n    for i in range(1, len(ar) - 1):\n        if dic[ar[i]] - dic[ar[i + 1]] == 1 or dic[ar[i]] - dic[ar[i - 1]] == 1:\n            if dic[ar[li]] < dic[ar[i]]:\n                li = i\n    if li != 0:\n        del ar[li]\n        count += 1\nprint(count)", "n = int(input())\ns = input()\nfor i in range(25):\n    ch = chr(ord('z') - i)\n    prev = chr(ord(ch) - 1)\n    j = 0\n    while j < len(s):\n        if s[j] == ch and (j - 1 >= 0 and s[j - 1] == prev or (j + 1 < len(s) and s[j + 1] == prev)):\n            s = s[:j] + s[j + 1:]\n            j = 0\n        else:\n            j += 1\nprint(n - len(s))", "def is_right_less(s, i):\n    return i + 1 < len(s) and ord(s[i]) - ord(s[i + 1]) == 1\n\ndef is_left_less(s, i):\n    return i - 1 >= 0 and ord(s[i]) - ord(s[i - 1]) == 1\n\ndef check_neighbours(s, i):\n    if is_left_less(s, i) or is_right_less(s, i):\n        return i\n    else:\n        return -10\n\ndef remove_neighbors(s: str) -> int:\n    s = list(s)\n    removed = 0\n    while len(s) != 0:\n        biggest_cand = -1\n        remove_id = -1\n        k = []\n        for j in range(len(s)):\n            c = check_neighbours(s, j)\n            if c >= 0 and ord(s[c]) >= biggest_cand:\n                k.append({c: s[c]})\n                biggest_cand = ord(s[c])\n                remove_id = c\n        if remove_id >= 0:\n            s.pop(remove_id)\n            removed += 1\n        else:\n            break\n    return removed\nlen_s = int(input())\ns = input()\nprint(remove_neighbors(s))", "import sys\nI = lambda : int(input())\nreadline = lambda : sys.stdin.readline().strip('\\n')\nRM = readmap = lambda x=int: map(x, readline().split(' '))\n(n, s) = (I(), readline())\nfor i in range(25, 0, -1):\n    y = chr(ord('a') + i)\n    x = chr(ord('a') + i - 1)\n    while True:\n        temp = len(s)\n        s = s.replace(x + y, x).replace(y + x, x)\n        if len(s) == temp:\n            break\nprint(n - len(s))\nquit()\nd = {}\nfor (i, x) in zip(range(I()), RM()):\n    d[x - i] = d.get(x - i, 0) + x\nprint(max(d.values()))\nquit()\n(n, a, b) = (I(), [*RM()], [*RM()])\n(count1, count2) = (0, 0)\nfor (i, j) in zip(a, b):\n    count1 += i & ~j\n    count2 += j & ~i\nprint(divmod(count2, count1)[0] + 1 if count1 else -1)", "from collections import defaultdict\nn = int(input())\ns = input()\nd = {}\nd = defaultdict(lambda : 0, d)\nfor i in s:\n    d[i] = 1\narr = []\nfor i in d.keys():\n    arr.append(i)\narr = sorted(arr, reverse=True)\ns = ' ' + s + ' '\ncount = 0\nfor j in arr:\n    i = 0\n    while i <= n - count and len(s) > 3:\n        if s[i] == j:\n            if ord(s[i]) - ord(s[i - 1]) == 1 or ord(s[i]) - ord(s[i + 1]) == 1:\n                s = s[:i] + s[i + 1:]\n                count += 1\n                i -= 2\n        i += 1\nprint(count)", "import re\nn = int(input())\ns = input()\ny = 'z'\nwhile 'a' < y:\n    x = y + '*'\n    y = chr(ord(y) - 1)\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "from sys import exit\n\ndef i():\n    return input()\n\ndef ii():\n    return int(input())\n\ndef iis():\n    return map(int, input().split())\n\ndef liis():\n    return list(map(int, input().split()))\n\ndef print_array(a):\n    print(' '.join(map(str, a)))\nn = ii()\ns = input()\nalph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nalph = alph[::-1]\ncount = 0\nfor c in alph:\n    for j in range(n):\n        for i in range(len(s)):\n            if s[i] == c:\n                if i > 0 and ord(s[i - 1]) == ord(s[i]) - 1 or (i < len(s) - 1 and ord(s[i + 1]) == ord(s[i]) - 1):\n                    s = s[:i] + s[i + 1:]\n                    count += 1\n                    break\nprint(count)", "import re\na = 'yxwvutsrqponmlkjihgfedcba'\nn = int(input())\ns = input()\nfor (x, y) in zip('z' + a, a):\n    s = re.sub(f'{x}+{y}', y, re.sub(f'{y}{x}+', y, s))\nprint(n - len(s))", "import re\na = 'yxwvutsrqponmlkjihgfedcba'\nn = int(input())\ns = input()\nfor (x, y) in zip('z' + a, a):\n    t = f'{x}*{y}{x}*'\n    s = re.sub(x + t + '|' + t + x, y, s)\nprint(n - len(s))", "import re\na = 'yxwvutsrqponmlkjihgfedcba'\nn = int(input())\ns = input()\nfor (x, y) in zip('z' + a, a):\n    t = x + '*' + y + x + '*'\n    s = re.sub(x + t + '|' + t + x, y, s)\nprint(n - len(s))", "import re\nfrom functools import reduce\n\ndef iter(s, idx):\n    chA = chr(ord('a') + idx - 1)\n    chB = chr(ord(chA) + 1)\n    patL = re.compile(f'{chA}{chB}+')\n    patR = re.compile(f'{chB}+{chA}')\n    return re.sub(patR, chA, re.sub(patL, chA, s))\norigin = int(input())\ns = reduce(iter, range(25, 0, -1), input().strip())\nprint(origin - len(s))", "import re\nn = int(input())\ns = input()\nfor i in range(122, 97, -1):\n    x = chr(i) + '*'\n    y = chr(i - 1)\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "import re\nn = int(input())\ns = input()\ny = 'z'\nfor _ in y * 25:\n    x = y + '*'\n    y = chr(ord(y) - 1)\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "import re\na = 'yxwvutsrqponmlkjihgfedcba'\nn = int(input())\ns = input()\nfor (x, y) in zip('z' + a, a):\n    s = re.sub(f'{x}+{y}', y, re.sub(f'{y}{x}+', y, s))\nprint(n - len(s))", "import string\nn = int(input())\ns = input()\nls = []\nalps = []\nfor a in s:\n    ls.append(a)\nfor a in string.ascii_lowercase:\n    alps.append(a)\nalps.reverse()\nctr = 0\nfor i in range(25):\n    j = 0\n    while j < len(ls) and len(ls) > 1:\n        if alps[i] == ls[j]:\n            for oo in range(1):\n                if j != 0 and j != len(ls) - 1:\n                    if alps[i + 1] == ls[j + 1] or alps[i + 1] == ls[j - 1]:\n                        ls.pop(j)\n                        ctr += 1\n                        j = -1\n                        break\n                if j == 0:\n                    if alps[i + 1] == ls[j + 1]:\n                        ls.pop(j)\n                        ctr += 1\n                        j = -1\n                        break\n                if j == len(ls) - 1:\n                    if alps[i + 1] == ls[j - 1]:\n                        ls.pop(j)\n                        ctr += 1\n                        j = -1\n                        break\n        j += 1\nprint(ctr)", "n = int(input())\nstr = input()\nlst = list(str)\nfor i in range(122, 97, -1):\n    for k in range(100):\n        l = len(lst)\n        tmp = []\n        for j in range(l):\n            if ord(lst[j]) == i:\n                if j + 1 < l and ord(lst[j + 1]) == i - 1 or (j - 1 >= 0 and ord(lst[j - 1]) == i - 1):\n                    tmp.append(j)\n                    bul = True\n        l = len(tmp)\n        tmp.reverse()\n        for j in tmp:\n            del lst[j]\nprint(n - len(lst))", "import re\nn = int(input())\ns = input()\ny = 'z'\nfor i in range(121, 96, -1):\n    x = y + '*'\n    y = chr(i)\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "import re\na = 'yxwvutsrqponmlkjihgfedcba'\nn = int(input())\ns = input()\nfor (x, y) in zip('z' + a, a):\n    x += '*'\n    s = re.sub(x + y + x, y, s)\nprint(n - len(s))", "import string\nn = int(input())\na = list(input())\nfor i in list(string.ascii_lowercase[::-1]):\n    if i != 'a':\n        j = 0\n        while j != len(a):\n            ch = False\n            if len(a) > 1 and a[j] == i:\n                if j != len(a) - 1:\n                    if a[j] == chr(ord(a[j + 1]) + 1):\n                        a[j] = ''\n                        ch = True\n                if j != 0:\n                    if a[j] == chr(ord(a[j - 1]) + 1):\n                        a[j] = ''\n                        ch = True\n                if ch:\n                    if j != 0:\n                        j -= 1\n                    j -= 1\n                a = list(filter(lambda x: x != '', a))\n            j += 1\nprint(n - len(a))", "n = int(input())\ns = input()\nt = [x for x in s]\nfor j in range(25, 0, -1):\n    for k in range(n):\n        for c in range(len(t)):\n            if t[c] == chr(j + 97) and (c > 0 and t[c - 1] == chr(j - 1 + 97) or (c < len(t) - 1 and t[c + 1] == chr(j - 1 + 97))):\n                t.pop(c)\n                break\nprint(n - len(t))", "n = int(input())\nl = input()\nl3 = []\nfor i in l:\n    l3.append(ord(i))\nc = 0\nfor z in range(123, 97, -1):\n    for i in range(len(l)):\n        for j in range(len(l3) - 1):\n            if l3[j] == l3[j + 1] - 1:\n                if l3[j + 1] == z:\n                    l3.pop(j + 1)\n                    c += 1\n                    break\n            elif l3[j + 1] == l3[j] - 1:\n                if l3[j] == z:\n                    c += 1\n                    l3.pop(j)\n                    break\n            else:\n                continue\nprint(c)", "n = int(input())\ns = input()\ncount = 0\nlst = []\nfor i in s:\n    lst.append(ord(i))\nfor j in range(123, 97, -1):\n    for k in range(n):\n        for i in range(len(lst) - 1):\n            if lst[i] == lst[i + 1] - 1:\n                if lst[i + 1] == j:\n                    lst.pop(i + 1)\n                    count += 1\n                    break\n            elif lst[i] - 1 == lst[i + 1]:\n                if lst[i] == j:\n                    lst.pop(i)\n                    count += 1\n                    break\nprint(count)", "n = int(input())\ns = input()\nif n == 1:\n    print(0)\n    exit()\nfor i in range(122, 96, -1):\n    for k in range(len(s)):\n        arr = []\n        for j in range(len(s)):\n            c = chr(i)\n            if j == 0 and ord(s[j + 1]) + 1 == ord(s[j]) == i:\n                arr += [j]\n            elif j == len(s) - 1 and ord(s[j - 1]) + 1 == ord(s[j]) == i:\n                arr += [j]\n            elif j != 0 and j != len(s) - 1 and (ord(s[j + 1]) + 1 == ord(s[j]) == i or ord(s[j - 1]) + 1 == ord(s[j]) == i):\n                arr += [j]\n        new = ''\n        for j in range(len(s)):\n            if j in arr:\n                continue\n            new += s[j]\n        s = new\n        if len(s) == 1:\n            break\n    if len(s) == 1:\n        break\nprint(n - len(s))", "def i():\n    return input()\n\ndef ii():\n    return int(input())\n\ndef iis():\n    return map(int, input().split())\n\ndef liis():\n    return list(map(int, input().split()))\nn = int(input())\ns = input()\na = []\nfor i in range(len(s)):\n    a.append(s[i])\na = sorted(a)[::-1]\ncount = 0\ntodos = set()\nfor c in a:\n    for j in range(n):\n        for i in range(len(s)):\n            if s[i] == c and (i > 0 and ord(s[i - 1]) == ord(s[i]) - 1 or (i < len(s) - 1 and ord(s[i + 1]) == ord(s[i]) - 1)):\n                s = s[:i] + s[i + 1:]\n                count += 1\n                break\nprint(count)"]