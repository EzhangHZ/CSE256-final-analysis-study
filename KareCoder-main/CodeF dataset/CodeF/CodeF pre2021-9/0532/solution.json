["from sys import stdin\nstdin.readline\n\ndef mp():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef it():\n    return int(stdin.readline().strip())\n\ndef fun():\n    (n, k) = mp()\n    l = mp()\n    (low, high) = (l[0], l[0])\n    for i in l[1:]:\n        (low, high) = (max(low - k + 1, i), min(high + k - 1, i + k - 1))\n        if low > high:\n            return False\n    return low <= l[-1] <= high\nfor _ in range(it()):\n    if fun():\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        k -= 1\n        ii = iter(map(int, input().split()))\n        m = next(ii)\n        M = m\n        bad = False\n        for h in ii:\n            m = max(m - k, h)\n            M = min(M + k, h + k)\n            if m > M:\n                bad = True\n                break\n        if not bad and m <= h and (M >= h):\n            print('YES')\n        else:\n            print('NO')\nsolve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    H = list(map(int, input().split()))\n    (lo, hi) = (H[0] + k, H[0] + k)\n    for i in range(1, n - 1):\n        (lo, hi) = (max(H[i] + k, lo - (k - 1)), min(H[i] + 2 * k - 1, hi - 1 + k))\n        if lo > hi:\n            return 'NO'\n    return 'YES' if lo - k < H[-1] + k < hi + k else 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def getints():\n    return list(map(int, input().split()))\n\ndef solve():\n    (n, k) = getints()\n    k1 = k - 1\n    (hi, *hlist) = getints()\n    lo = hi\n    for h in hlist[:-1]:\n        (lo, hi) = (max(lo - k1, h), min(hi + k1, h + k1))\n        if hi < lo:\n            return 'NO'\n    if lo - k1 <= hlist[-1] <= hi + k1:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def solution(n, k, h):\n    minn = h[0]\n    maxx = h[0]\n    for i in range(1, n):\n        minn = max(h[i], minn - k + 1)\n        maxx = min(maxx + k - 1, h[i] + k - 1)\n        if minn > maxx:\n            return 'NO'\n    if not (h[n - 1] >= minn and h[n - 1] <= maxx):\n        return 'NO'\n    return 'YES'\nfor i in range(int(input())):\n    (n, k) = (int(i) for i in input().split())\n    h = [int(i) for i in input().split()]\n    print(solution(n, k, h))", "innum = lambda : int(input())\ninmul = lambda : map(int, input().split())\ninstr = lambda : str(input())\ninarr = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, k) = inmul()\n    a = inarr()\n    ma = a[0]\n    mi = a[0]\n    for i in range(1, n - 1):\n        mi = max(mi - (k - 1), a[i])\n        ma = min(ma + k - 1, a[i] + k - 1)\n        if mi > ma:\n            print('NO')\n            return\n    if a[-1] >= mi - k + 1 and a[-1] <= ma + k - 1:\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def fence():\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    low = h[0]\n    high = h[0]\n    for (a, b) in enumerate(h):\n        low = max(low, b)\n        high = min(high, b + k - 1 if a > 0 and a < n - 1 else b)\n        if low > high:\n            return False\n        low -= k - 1\n        high += k - 1\n    return True\ntests = int(input())\nfor t in range(tests):\n    print('YES' if fence() else 'NO')", "t = int(input())\nfor testcases in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = [int(x) for x in input().split()]\n    s = -1\n    r = -1\n    ok = 1\n    for x in a:\n        if s == -1:\n            s = x\n            r = x\n        else:\n            s = max(s - k + 1, x)\n            r = min(r + k - 1, x + k - 1)\n        if s > r:\n            ok = 0\n            break\n    if ok == 1 and s <= x:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    minL = h[0]\n    maxL = h[0]\n    done = True\n    for i in range(1, n):\n        minL = max(minL - k + 1, h[i])\n        maxL = min(maxL + k - 1, h[i] + k - 1)\n        if minL > maxL:\n            done = False\n            break\n    if h[n - 1] > maxL or h[n - 1] < minL:\n        done = False\n    if done == True:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    H = list(map(int, input().split()))\n    lv = [-1] * n\n    (lv[0], lv[-1]) = (H[0] + k, H[-1] + k)\n    idx = 1\n    while idx < n:\n        while idx < n and H[idx] >= H[idx - 1]:\n            idx += 1\n        peak = idx - 1\n        lv[peak] = H[peak] + k\n        j = peak - 1\n        while j > 0 and lv[j] == -1:\n            if lv[j + 1] - (H[j] + 2 * k - 1) >= k:\n                return 'NO'\n            lv[j] = max(H[j] + k, lv[j + 1] - k + 1)\n            j -= 1\n        while idx < n - 1 and H[idx] <= H[idx - 1]:\n            if lv[idx - 1] - (H[idx] + 2 * k - 1) >= k:\n                return 'NO'\n            lv[idx] = max(H[idx] + k, lv[idx - 1] - k + 1)\n            idx += 1\n        if idx < n - 1:\n            valley = idx - 1\n            lv[valley] = H[valley] + 2 * k - 1\n        elif idx == n - 1:\n            if H[idx] > H[idx - 1]:\n                lv[idx - 1] = H[idx - 1] + 2 * k - 1\n            idx += 1\n    for i in range(n - 1):\n        if abs(lv[i] - lv[i + 1]) >= k:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    (n, k) = Read.list_int()\n    h = Read.list_int()\n    y0 = h[0]\n    y1 = h[0]\n    for i in range(n - 1):\n        v = h[i + 1]\n        y0 = max(v, y0 - k + 1)\n        y1 = min(v + k - 1, y1 + k - 1)\n        if y0 > y1:\n            print('NO')\n            return\n    if y0 == h[-1]:\n        print('YES')\n    else:\n        print('NO')\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "def R():\n    return map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a) = R()\n    h = l\n    f = 0\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f |= l > h\n    f |= l > x\n    print('YNEOS'[f::2])", "def Fence(ground, k):\n    max_fence_last = ground[0] + k\n    min_fence_last = ground[0]\n    for i in range(1, len(ground)):\n        max_f = min(max_fence_last + k - 1, ground[i] + k + k - 1)\n        min_f = max(min_fence_last - k + 1, ground[i])\n        if max_f - min_f < k:\n            return 'NO'\n        max_fence_last = max_f\n        min_fence_last = min_f\n    if min_f != ground[i]:\n        return 'NO'\n    else:\n        return 'YES'\nfor i in range(int(input())):\n    k = int(input().split()[1])\n    ground = list(map(int, input().split()))\n    print(Fence(ground, k))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a) = R()\n    h = l\n    f = 0\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f |= l > h\n    print('YNEOS'[f | (x < l)::2])", "import sys\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\nt = int(lines[0])\nfor i in range(1, 2 * t + 1, 2):\n    (n, k) = map(int, lines[i].split(' '))\n    h = list(map(int, lines[i + 1].split(' ')))\n    (m, M) = (h[0], h[0])\n    for j in range(1, n):\n        M = min(h[j] + k - 1, M + k - 1)\n        m = max(h[j], m - (k - 1))\n        if M < m:\n            break\n    if m <= h[n - 1] and h[n - 1] <= M:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mi = a[0]\n    ma = a[0]\n    a = a[1:]\n    s = 1\n    for x in a:\n        mi = max(x, mi - h + 1)\n        ma = min(x + h - 1, ma + h - 1)\n        if ma < mi:\n            s = 0\n    if mi != a[-1]:\n        s = 0\n    print('YES') if s == 1 else print('NO')", "for _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mi = a[0]\n    ma = a[0]\n    a = a[1:]\n    s = 1\n    for x in a:\n        mi = max(x, mi - h + 1)\n        ma = min(x + h - 1, ma + h - 1)\n        if ma < mi:\n            s = 0\n    if mi != a[-1]:\n        s = 0\n    print('YES') if s == 1 else print('NO')", "def sv():\n    (N, K) = map(int, input().split())\n    H = list(map(int, input().split()))\n    (a, b) = (0, 10000000000)\n    for (n, h) in enumerate(H):\n        a = max(a, h)\n        b = min(b, h + K - 1 if n > 0 and n < N - 1 else h)\n        if a > b:\n            return False\n        a -= K - 1\n        b += K - 1\n    return True\nTC = int(input())\nfor tc in range(TC):\n    print('YES' if sv() else 'NO')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    h = [int(i) for i in input().split()]\n    s = 'YES'\n    hh = hl = h[0]\n    for i in range(1, n):\n        hh = min(hh + k - 1, h[i] + k - 1)\n        hl = max(hl - k + 1, h[i])\n        if hh < hl:\n            s = 'NO'\n            break\n    if hl != h[-1]:\n        s = 'NO'\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    h = list(map(int, input().split()))\n    top = h[0]\n    bottom = h[0]\n    check = True\n    for i in range(1, n):\n        top = min(top + k - 1, h[i] + k - 1)\n        bottom = max(h[i], bottom - k + 1)\n        if bottom > top:\n            check = False\n            break\n    if h[n - 1] < bottom or h[n - 1] > top:\n        check = False\n    if check:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    H = [int(h) for h in input().split()]\n    (a, b) = (H[0], H[0] + k)\n    ans = 'YES'\n    for h in H[1:-1]:\n        (x, y) = (h, h + 2 * k - 1)\n        a = max(x, a - k + 1)\n        b = min(y, b + k - 1)\n        if b - a < k:\n            ans = 'NO'\n    if H[-1] >= b or H[-1] + k <= a:\n        ans = 'NO'\n    print(ans)", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = [int(x) for x in input().split()]\n    (mn, mx) = (ls[0], ls[0])\n    for h in ls[1:]:\n        (mn, mx) = (max(mn - k + 1, h), min(mx + k - 1, h + k - 1))\n        if mn > mx:\n            print('NO')\n            break\n    else:\n        if mn <= ls[-1] <= mx:\n            print('YES')\n        else:\n            print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a) = R()\n    h = l\n    f = 0\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f |= l > h\n    print('YNEOS'[f | (a[-1] < l)::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a) = R()\n    h = l\n    f = 0\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f |= l > h\n    print('YNEOS'[l > a[-1] or f::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a) = R()\n    h = l\n    f = 0\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f |= l > h\n    print('YNEOS'[f | (x < l)::2])", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, x, f) = (a[0], a[0], 0)\n    for i in range(1, n):\n        (l, g) = (max(a[i], p - k + 1), min(a[i] + k - 1, x + k - 1))\n        (p, x) = (l, g)\n        if l > g:\n            f = 1\n            break\n    print('YNEOS'[f or not p <= a[-1] <= x::2])", "def readInt():\n    return int(input())\n\ndef readLine():\n    return [int(s) for s in input().split(' ')]\n\ndef readString():\n    return input()\n\ndef ask(arr, k):\n    pLow = arr[0]\n    pHigh = arr[0]\n    for i in range(len(arr)):\n        t = arr[i]\n        pLow = pLow - (k - 1)\n        pHigh = pHigh + (k - 1)\n        if i == len(arr) - 1 or i == 0:\n            allowLow = t\n            allowHigh = t\n        else:\n            allowLow = t\n            allowHigh = t + k - 1\n        if allowLow > pHigh or pLow > allowHigh:\n            return False\n        pLow = max(allowLow, pLow)\n        pHigh = min(allowHigh, pHigh)\n    return True\nt = readInt()\nfor _ in range(t):\n    (n, k) = readLine()\n    arrs = readLine()\n    result = ask(arrs, k)\n    if result:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    hs = list(map(int, input().split()))\n    (lo, hi) = (hs[0], hs[0])\n    valid = len(hs) < 2 or hs[1] - hs[0] < k\n    for h in hs[1:]:\n        lo = max(h, lo - k + 1)\n        hi = min(hi + k - 1, h + k - 1)\n        if lo > hi:\n            valid = False\n            break\n    if valid and hs[-1] != lo:\n        valid = False\n    print('YES' if valid else 'NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (l, *a, e) = R()\n    h = l\n    f = 1\n    for x in a:\n        l = max(l - k + 1, x)\n        h = min(h, x) + k - 1\n        f &= l <= h\n    print('NYOE S'[f & (l - k < e < h + k)::2])", "for _ in range(int(input())):\n    bool = True\n    (n, h) = map(int, input().split())\n    list = [int(x) for x in input().split()]\n    (maxi, mini) = (list[0], list[0])\n    list = list[1:]\n    for i in list:\n        maxi = max(maxi - h + 1, i)\n        mini = min(mini + h - 1, i + h - 1)\n        if maxi > mini:\n            bool = False\n    if maxi != list[-1]:\n        bool = False\n    print('NO') if bool == False else print('YES')", "for _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    hs = list(map(int, input().split()))\n    (lo, hi) = (hs[0], hs[0])\n    valid = len(hs) < 2 or hs[1] - hs[0] < k\n    for h in hs[1:]:\n        lo = max(h, lo - k + 1)\n        hi = min(hi + k - 1, h + k - 1)\n        if lo > hi:\n            valid = False\n            break\n    if valid and hs[-1] != lo:\n        valid = False\n    print('YES' if valid else 'NO')", "t = int(input())\nfor i in range(t):\n    m = 0\n    str = input()\n    (_, k) = [int(item) for item in str.split(' ')]\n    str = input()\n    ground = [int(item) for item in str.split(' ')]\n    (_min, _max) = (ground[0], ground[0])\n    for i in range(1, len(ground)):\n        _min -= k - 1\n        _max += k - 1\n        if _min < ground[i]:\n            _min = ground[i]\n        if _max > ground[i] + k - 1:\n            _max = ground[i] + k - 1\n        if _min > _max:\n            print('NO')\n            m = 1\n            break\n    if m == 0:\n        if _min == ground[-1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    v = [int(x) for x in input().split(' ')]\n    mn = v[0]\n    mx = v[0]\n    ok = True\n    for i in range(1, n):\n        mn = max(v[i], mn - k + 1)\n        mx = min(v[i] + k - 1, mx + k - 1)\n        if mn > mx:\n            ok = False\n            break\n    if mn > v[n - 1] or mx < v[n - 1]:\n        ok = False\n    if ok == True:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\nt = int(input().strip())\nfor a0 in range(t):\n    l = [int(i) for i in input().split()]\n    n = l[0]\n    k = l[1]\n    l1 = [int(i) for i in input().split()]\n    flg = 0\n    low = l1[0]\n    high = l1[0]\n    for i in range(1, n):\n        low = max(l1[i], low - k + 1)\n        high = min(l1[i] + k - 1, high + k - 1)\n        if low > high:\n            flg = 1\n            break\n    if l1[n - 1] < low or l1[n - 1] > high:\n        flg = 1\n    if flg == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    bool = True\n    (n, h) = map(int, input().split())\n    list = [int(x) for x in input().split()]\n    (maxi, mini) = (list[0], list[0])\n    for i in range(1, n):\n        maxi = max(maxi - h + 1, list[i])\n        mini = min(mini + h - 1, list[i] + h - 1)\n        if maxi > mini:\n            bool = False\n    if maxi != list[-1]:\n        bool = False\n    print('NO') if bool == False else print('YES')", "for _ in range(int(input())):\n    bool = True\n    (n, h) = map(int, input().split())\n    list = [int(x) for x in input().split()]\n    (maxi, mini) = (list[0], list[0])\n    for i in range(1, n):\n        mini = min(mini + h - 1, list[i] + h - 1)\n        maxi = max(maxi - h + 1, list[i])\n        if maxi > mini:\n            bool = False\n    if maxi != list[-1]:\n        bool = False\n    print('NO') if bool == False else print('YES')", "cases = int(input())\nans_list = []\nfor c in range(cases):\n    (n, k) = list(map(int, input().split(' ')))\n    heights = list(map(int, input().split(' ')))\n    max_top = heights[0] + k\n    min_top = heights[0] + k\n    ans = 'YES'\n    for i in range(1, n - 1):\n        if heights[i] >= max_top or heights[i] + k + k - 1 <= min_top - k:\n            ans = 'NO'\n            break\n        max_top = min(heights[i] + k - 1, max_top - 1) + k\n        min_top = max(heights[i], min_top - 2 * k + 1) + k\n    if ans == 'YES':\n        if not (min_top - k < heights[-1] + k and heights[-1] < max_top):\n            ans = 'NO'\n    ans_list.append(ans)\nprint('\\n'.join(ans_list))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = a[0]\n    y = a[0]\n    x2 = a[n - 1]\n    f = 1\n    for i in range(n):\n        if i == 0:\n            x = y = a[0]\n        else:\n            x = max(x - k + 1, a[i])\n            y = min(y + k - 1, a[i] + k - 1)\n        if x > y:\n            f = 0\n        if i == n - 1 and x != a[i]:\n            f = 0\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    ok = 1\n    mn = h[0]\n    mx = h[0]\n    for i in range(1, n):\n        mn = max(mn - k + 1, h[i])\n        mx = min(mx + k - 1, h[i] + k - 1)\n        if mn > mx:\n            ok = 0\n    if mn > h[n - 1] or mx < h[n - 1]:\n        ok = 0\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = a[0]\n    h = a[0] + k\n    ans = 'YES'\n    for i in range(1, n - 1):\n        t1 = a[i] + 2 * k - 1\n        if t1 <= l or h <= a[i]:\n            ans = 'NO'\n        l = max(l - k + 1, a[i])\n        h = min(h + k - 1, t1)\n    if a[n - 1] + k <= l or h <= a[n - 1]:\n        ans = 'NO'\n    print(ans)", "def intersection(seg1, seg2):\n    if seg1[0] <= seg2[0]:\n        if seg1[1] < seg2[0]:\n            return False\n        elif seg1[1] <= seg2[1]:\n            return [seg2[0], seg1[1]]\n        else:\n            return [seg2[0], seg2[1]]\n    elif seg1[0] > seg2[1]:\n        return False\n    elif seg1[1] >= seg2[1]:\n        return [seg1[0], seg2[1]]\n    else:\n        return [seg1[0], seg1[1]]\ncases = int(input())\nfor _ in range(cases):\n    (n, k) = list(map(int, input().split()))\n    level = list(map(int, input().split()))\n    seg_satis = [0, level[0]]\n    seg_need = []\n    seg_satis_temp = []\n    den = 0\n    for i in level[:-1]:\n        seg_need = [i, i + k - 1]\n        seg_satis_temp = intersection(seg_satis, seg_need)\n        if seg_satis_temp == False:\n            den = 1\n            break\n        else:\n            seg_satis = [seg_satis_temp[0] - k + 1, seg_satis_temp[1] + k - 1]\n    if den == 1:\n        print('NO')\n    else:\n        seg_need = [level[-1], level[-1]]\n        seg_satis_temp = intersection(seg_satis, seg_need)\n        if seg_satis_temp == False:\n            print('NO')\n        else:\n            print('YES')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    lst = [0] * n\n    lst[0] = h[0]\n    for i in range(1, n - 1):\n        if h[i] - lst[i - 1] >= k or lst[i - 1] - h[i] > 2 * (k - 1):\n            print('NO')\n            break\n        if h[i + 1] > h[i]:\n            lst[i] = min(lst[i - 1] + k - 1, h[i] + k - 1)\n        else:\n            lst[i] = max(h[i], lst[i - 1] - k + 1)\n    else:\n        if h[n - 1] - lst[n - 2] >= k or lst[n - 2] - h[n - 1] >= k:\n            print('NO')\n        else:\n            print('YES')", "T = int(input())\nans = []\nfor t in range(T):\n    flag = True\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    tmp = [0] * n\n    tmp[0] = h[0]\n    for i in range(1, n - 1):\n        ma = min(tmp[i - 1] + k - 1, h[i] + k - 1)\n        mi = max(tmp[i - 1] - k + 1, h[i])\n        if mi > ma:\n            flag = False\n        if h[i + 1] > h[i]:\n            tmp[i] = ma\n        else:\n            tmp[i] = mi\n    if abs(h[n - 1] - tmp[n - 2]) >= k:\n        flag = False\n    ans.append('YES' if flag else 'NO')\nfor i in range(T):\n    print(ans[i])", "case = int(input())\nfor c in range(case):\n    (n, k) = map(int, input().split())\n    myList = list(map(int, input().split()))\n    mini = myList[0]\n    maxi = myList[0]\n    ok = True\n    for ind1 in range(1, len(myList)):\n        mini = max(myList[ind1], mini - (k - 1))\n        maxi = min(myList[ind1] + k - 1, maxi + k - 1)\n        if myList[ind1] > maxi or myList[ind1] + k - 1 < mini:\n            ok = False\n            break\n    if myList[len(myList) - 1] < mini or myList[len(myList) - 1] > maxi:\n        ok = False\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "def cmp(a, h):\n    return [max(a[0], h[0]), min(a[1], h[1])]\nt = input()\nfor _ in range(int(t)):\n    sign = 0\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    height = input().split(' ')\n    height = [int(he) for he in height]\n    now = [height[0], height[0]]\n    for i in range(1, n):\n        tem = cmp([height[i], height[i] + k - 1], [now[0] - k + 1, now[1] + k - 1]) if i != n - 1 else cmp([height[i], height[i]], [now[0] - k + 1, now[1] + k - 1])\n        if tem[1] < tem[0]:\n            sign = 1\n            print('NO')\n            break\n        else:\n            now = tem\n    if sign == 0:\n        print('YES')", "def check(n, k, h):\n    a = [h[0]]\n    b = [h[0]]\n    for i in range(1, n - 1):\n        if h[i] >= b[i - 1] + k or h[i] + k <= a[i - 1] + 1 - k:\n            return 'NO'\n        else:\n            a.append(max(a[i - 1] + 1 - k, h[i]))\n            b.append(min(b[i - 1] - 1 + k, h[i] + k - 1))\n    if b[n - 2] + k <= h[n - 1] or a[n - 2] >= h[n - 1] + k:\n        return 'NO'\n    else:\n        return 'YES'\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    print(check(n, k, h))", "from sys import stdin\nT = int(stdin.readline().strip())\nfor caso in range(T):\n    (n, k) = map(int, stdin.readline().strip().split())\n    s = list(map(int, stdin.readline().strip().split()))\n    mx = s[0] + k\n    mn = s[0] + k\n    f = True\n    for i in range(1, n - 1):\n        if mx <= s[i] or mn - k + 1 > s[i] + k + k - 1:\n            f = False\n        mx = min(s[i] + k - 1 + k, mx + k - 1)\n        mn = max(s[i] + k, mn - k + 1)\n    if mx <= s[-1] or mn - k + 1 > s[-1] + k:\n        f = False\n    if f:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    [n, k] = map(int, input().split(' '))\n    h = list(map(int, input().split(' ')))\n    assert len(h) == n\n    assert n >= 2\n    lo = h[0] + 1\n    hi = lo\n\n    def bnd(x, xmin, xmax):\n        return min(xmax, max(xmin, x))\n    for i in range(1, n):\n        new_lo = lo - (k - 1)\n        new_hi = hi + (k - 1)\n        if new_hi < h[i] + 1 or new_lo > h[i] + k:\n            print('NO')\n            return\n        lo = bnd(new_lo, h[i] + 1, h[i] + k)\n        hi = bnd(new_hi, h[i] + 1, h[i] + k)\n        if lo > hi:\n            print('NO')\n            return\n    print('YES' if lo <= h[n - 1] + 1 and h[n - 1] + 1 <= hi else 'NO')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    h = list(map(int, input().split()))\n    poss = True\n    lo = h[0]\n    hi = h[0]\n    for i in range(1, n):\n        lo = lo - k + 1\n        hi = hi + k - 1\n        cl = h[i]\n        ch = h[i] + k - 1\n        if i == n - 1:\n            ch = cl\n        if hi < cl or ch < lo:\n            poss = False\n            break\n        lo = max(lo, cl)\n        hi = min(hi, ch)\n    if poss:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    flag = True\n    pu = h[0]\n    pd = h[0]\n    for i in range(1, n):\n        if pu + k <= h[i] or pd + 1 - k > k - 1 + h[i]:\n            flag = False\n            break\n        else:\n            pu = min(pu + k - 1, h[i] + k - 1)\n            pd = max(pd + 1 - k, h[i])\n    if flag and h[n - 1] <= pu and (h[n - 1] >= pd):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    heights = list(map(int, input().split()))\n    min_pos = heights[0]\n    max_pos = heights[0]\n    possible = True\n    for j in range(1, n):\n        min_pos = min_pos - k + 1\n        max_pos = max_pos + k - 1\n        if max_pos >= heights[j] and min_pos <= heights[j] + k - 1 and (j != n - 1):\n            min_pos = max(min_pos, heights[j])\n            max_pos = min(max_pos, heights[j] + k - 1)\n        elif j == n - 1 and max_pos >= heights[j] and (min_pos <= heights[j]):\n            print('YES')\n        else:\n            print('NO')\n            break", "from sys import stdin\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    (bot, top) = (lst[0], lst[0])\n    for i in range(1, n):\n        bot = max(0, max(lst[i], bot - k + 1))\n        top = min(lst[i] + k - 1, top + k - 1)\n        if bot > top:\n            print('NO')\n            break\n    else:\n        if bot <= lst[-1] <= top:\n            print('YES')\n        else:\n            print('NO')", "for test in range(int(input())):\n    (_, k) = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    if len(h) == 2:\n        if abs(h[0] - h[1]) <= k - 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        placement = h[0]\n        for (i, h_i) in list(enumerate(h)):\n            if i == 0:\n                if h[i + 1] >= h_i:\n                    if h_i + k - 1 < h[i + 1]:\n                        print('NO')\n                        break\n                elif h_i > h[i + 1] + k - 1 + k - 1:\n                    print('NO')\n                    break\n            elif i == len(h) - 2:\n                if h[i + 1] >= h_i:\n                    if min(h_i + k - 1, placement + k - 1) + k - 1 < h[i + 1]:\n                        print('NO')\n                        break\n                elif max(h_i, placement - k + 1) > h[i + 1] + k - 1:\n                    print('NO')\n                    break\n                print('YES')\n                break\n            elif h[i + 1] >= h_i:\n                if min(h_i + k - 1, placement + k - 1) + k - 1 < h[i + 1]:\n                    print('NO')\n                    break\n                placement = min(h_i + k - 1, placement + k - 1)\n            else:\n                if max(h_i, placement - k + 1) > h[i + 1] + k - 1 + k - 1:\n                    print('NO')\n                    break\n                placement = max(h_i, placement - k + 1)", "def calc():\n    [n, k] = list(map(int, input().split(' ')))\n    h = list(map(int, input().split(' ')))\n    l = [0] * n\n    u = [0] * n\n    for i in range(1, n):\n        l[i] = max([h[i - 1] + l[i - 1] - k + 1, h[i]]) - h[i]\n        if l[i] >= k:\n            print('NO')\n            return\n        u[i] = min([h[i - 1] + u[i - 1] + k - 1, h[i] + k - 1]) - h[i]\n        if u[i] < 0 or u[i] < l[i]:\n            print('NO')\n            return\n    if l[n - 1] == 0:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor i in range(t):\n    calc()", "n = int(input())\nfor i in range(n):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    bot = nums[0]\n    top = nums[0] + k\n    control = 'YES'\n    top2 = 0\n    for j in range(1, n):\n        if j == n - 1:\n            top2 = nums[j] + k\n        else:\n            top2 = nums[j] + 2 * k - 1\n        if top2 <= bot or nums[j] >= top:\n            control = 'NO'\n            break\n        bot = max(nums[j], bot - k + 1)\n        top = min(top + k - 1, top2)\n    print(control)", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    (*h,) = map(int, input().split())\n    min_hs = [h[0]] * n\n    max_hs = [h[0]] * n\n    for i in range(1, n):\n        min_touch = min_hs[i - 1] - k + 1\n        max_touch = max_hs[i - 1] + k - 1\n        min_ground = h[i]\n        max_ground = h[i] + k - 1 if i != n - 1 else h[i]\n        min_pos = max(min_touch, min_ground)\n        max_pos = min(max_touch, max_ground)\n        if min_pos > max_pos:\n            print('NO')\n            break\n        min_hs[i] = min_pos\n        max_hs[i] = max_pos\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ma = a[0]\n    mi = a[0]\n    f = True\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if not k - 1 >= abs(ma - a[i]):\n                f = False\n        elif not 2 * (k - 1) >= abs(mi - a[i]):\n            f = False\n        ma = min(a[i] + k - 1, ma + k - 1)\n        mi = max(a[i], mi - k + 1)\n    if f and mi == a[n - 1]:\n        print('YES')\n    else:\n        print('NO')", "for y in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    flag = 0\n    if n == 1:\n        print('YES')\n        continue\n    minstart = maxstart = 0\n    for i in range(n):\n        if i == 0:\n            minstart = lst[0]\n            maxstart = lst[0]\n            minend = maxend = lst[0] + m - 1\n        else:\n            minstart = minstart - (m - 1)\n            maxstart = maxstart + (m - 1)\n            if lst[i] < minstart - (m - 1) or lst[i] > maxstart:\n                flag = 1\n                break\n            minstart = max(lst[i], minstart)\n            maxstart = min(lst[i] + (m - 1), maxstart)\n        if i == n - 1:\n            if lst[i] < minstart or lst[i] > maxstart:\n                flag = 1\n                break\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter as cc\nfrom copy import deepcopy as dc\nimport random\nimport math\nMAX_SIZE = 1e+18\ntry:\n    t = int(input())\n    while t:\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        (lb, ub) = ([a[0]], [a[-1]])\n        flag = 0\n        for i in range(1, n):\n            lb.append(min(a[i] + k - 1, lb[-1] + k - 1))\n            if lb[-1] < a[i]:\n                flag = 1\n                break\n        for i in reversed(range(n - 1)):\n            ub.append(min(a[i] + k - 1, ub[-1] + k - 1))\n            if ub[-1] < a[i]:\n                flag = 1\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\nexcept EOFError as e:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    b = [(a[0], a[0])]\n    f = 0\n    for i in range(1, n):\n        x = max(b[i - 1][0] - (k - 1), a[i])\n        y = min(b[i - 1][1] + (k - 1), a[i] + (k - 1))\n        b.append((x, y))\n        if x > y:\n            f = 1\n            break\n    if a[n - 1] not in range(x, y + 1):\n        f = 1\n    if f:\n        print('NO')\n    else:\n        print('YES')", "n = int(input())\nfor i in range(n):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    bot = nums[0]\n    top = nums[0] + k\n    control = 'YES'\n    top2 = 0\n    for j in range(1, n):\n        if j == n - 1:\n            top2 = nums[j] + k\n        else:\n            top2 = nums[j] + 2 * k - 1\n        if top2 <= bot or nums[j] >= top:\n            control = 'NO'\n            break\n        bot = max(nums[j], bot - k + 1)\n        top = min(top + k - 1, top2)\n    print(control)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    end = False\n    cur = h[0]\n    for i in range(n):\n        if cur < h[i]:\n            end = True\n            break\n        if i != n - 1:\n            cur = min(cur + k - 1, h[i + 1] + k - 1)\n    cur = h[-1]\n    for i in range(n - 1, -1, -1):\n        if cur < h[i]:\n            end = True\n            break\n        if i:\n            cur = min(cur + k - 1, h[i - 1] + k - 1)\n    if end:\n        print('NO')\n    else:\n        print('YES')", "def share(l1, u1, l2, u2):\n    if l2 < u1 and l2 >= l1 or (u2 > l1 and u2 <= u1):\n        return True\n    return False\nt = int(input())\nfor z in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    (u, l) = (h[0] + k, h[0])\n    c = 0\n    for i in range(1, n - 1):\n        if share(l, u, h[i], h[i] + k) or share(l, u, h[i] + k - 1, h[i] + k + k - 1):\n            lmin = max(h[i], l + 1 - k)\n            umax = min(h[i] + k + k - 1, u - 1 + k)\n            (u, l) = (umax, lmin)\n        else:\n            c = 1\n    if c == 0 and share(l, u, h[n - 1], h[n - 1] + k) == False:\n        c = 1\n    if c == 0:\n        print('YES')\n    else:\n        print('NO')", "class minmax:\n\n    def __init__(self, min_, max_):\n        self.min_ = min_\n        self.max_ = max_\n\ndef lop():\n    (n, k) = map(int, input().split())\n    h = input().split()\n    this_range = minmax(0, 0)\n    prev_range = minmax(0, 0)\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            this_range = minmax(int(h[i]) + k, int(h[i]) + k)\n        else:\n            this_range = minmax(max(prev_range.min_ - k + 1, int(h[i]) + k), min(prev_range.max_ + k - 1, int(h[i]) + 2 * k - 1))\n        if this_range.min_ > this_range.max_:\n            return 'NO'\n        if i == n - 1:\n            u = this_range.min_\n            if u < prev_range.min_ - k + 1 or u > prev_range.max_ + k - 1:\n                return 'NO'\n        prev_range = this_range\n    return 'YES'\nt = int(input())\nout = []\nfor p in range(t):\n    out.append(lop())\nfor p in out:\n    print(p)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [a[0]]\n    c = [a[-1]]\n    d = []\n    for x in a[1:]:\n        b.append(min(b[-1] + k - 1, x + k - 1))\n    for x in reversed(a[:-1]):\n        c.append(min(c[-1] + k - 1, x + k - 1))\n    c.reverse()\n    for x in range(n):\n        d.append(min(b[x], c[x]))\n    flag = 'YES'\n    for x in range(n):\n        if a[x] > d[x]:\n            flag = 'NO'\n            break\n    print(flag)", "import sys\nimport math\nimport bisect\nimport functools\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log, ceil\nfrom collections import defaultdict as dd\nfrom collections import Counter as cc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nsys.setrecursionlimit(100000000)\nintinp = lambda : int(input().strip())\nstripinp = lambda : input().strip()\nfltarr = lambda : list(map(float, input().strip().split()))\nintarr = lambda : list(map(int, input().strip().split()))\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nMOD = 1000000007\nnum_cases = intinp()\nfor _ in range(num_cases):\n    (n, k) = intarr()\n    arr = intarr()\n    prev = []\n    flag = True\n    for (i, h) in enumerate(arr):\n        if not i:\n            prev = [h, h + k]\n        elif h <= prev[1] - 1 and h + k + k - 1 > prev[0]:\n            prev = [max(h, prev[0] + 1 - k), min(h + k + k - 1, prev[1] - 1 + k)]\n        else:\n            flag = False\n            break\n    if flag and prev[0] == arr[-1] and (prev[1] >= arr[-1] + k):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    start = [max(a[0] - k + 1, 0), a[0] + k - 1]\n    ok = True\n    for i in range(1, n):\n        if not ok:\n            break\n        if i != n - 1:\n            p1 = a[i] + k - 1\n            p2 = a[i]\n            if start[0] <= p2 <= start[1] or start[0] <= p1 <= start[1]:\n                l = [max(p2, start[0]), min(p1, start[1])]\n                start = [max(l[0] - k + 1, 0), l[1] + k - 1]\n            else:\n                ok = False\n        else:\n            p1 = a[i]\n            p2 = a[i]\n            if start[0] <= p2 <= start[1] or start[0] <= p1 <= start[1]:\n                l = [max(p2, start[0]), min(p1, start[1])]\n                start = [max(l[0] - k + 1, 0), l[1] + k - 1]\n            else:\n                ok = False\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    x = a[0]\n    for j in range(1, n):\n        if a[j] <= a[j - 1]:\n            x = max(a[j], x - k + 1)\n        if a[j] > a[j - 1]:\n            x = a[j]\n        if x - a[j] >= k:\n            c = c + 1\n            break\n    if x != a[n - 1]:\n        c = c + 1\n    x = a[n - 1]\n    for j in range(n - 2, -1, -1):\n        if a[j] <= a[j + 1]:\n            x = max(a[j], x - k + 1)\n        if a[j] > a[j + 1]:\n            x = a[j]\n        if x - a[j] >= k:\n            c = c + 1\n            break\n    if x != a[0]:\n        c = c + 1\n    if c > 0:\n        print('NO')\n    else:\n        print('YES')", "for __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    status = 1\n    (dom1, dom2) = ([h[0] + 1 - k, h[0] + k - 1], [])\n    if dom1[0] < 0:\n        dom1[0] = 0\n    for i in range(1, n):\n        if i != n - 1:\n            dom2 = [h[i], h[i] + k - 1]\n        else:\n            dom2 = [h[i], h[i]]\n        if dom2[0] > dom1[1] or dom1[0] > dom2[1]:\n            status = 0\n            break\n        else:\n            t1 = max([dom1[0], dom2[0]]) + 1 - k\n            t2 = min([dom1[1], dom2[1]]) + k - 1\n            if t1 < 0:\n                t1 = 0\n            dom1 = [t1, t2]\n    if status:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    a = [0 for i in range(n)]\n    poss = True\n    for i in range(1, n - 1):\n        lb = h[i - 1] + a[i - 1] - h[i] - k + 1\n        ub = h[i - 1] + a[i - 1] - h[i] + k - 1\n        if ub < 0 or lb >= k:\n            poss = False\n            break\n        elif h[i + 1] > h[i]:\n            a[i] = min(ub, k - 1)\n        else:\n            a[i] = max(lb, 0)\n    if poss == True:\n        lb = h[n - 2] + a[n - 2] - h[n - 1] - k + 1\n        ub = h[n - 2] + a[n - 2] - h[n - 1] + k - 1\n        if lb > 0 or ub < 0:\n            poss = False\n    if poss == True:\n        print('YES')\n    else:\n        print('NO')", "def get_overlap(A, B):\n    (p, q) = A\n    (r, s) = B\n    haha = [r - K + 1, s - 1]\n    nxt_a = max(p, haha[0])\n    nxt_b = min(q, haha[1])\n    if nxt_b >= nxt_a:\n        return [nxt_a, nxt_b]\n    else:\n        return False\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    heights = list(map(int, input().split()))\n    base_range = []\n    base_range.append([heights[0], heights[0]])\n    possible = True\n    for i in range(1, N - 1):\n        possible_base_range = [heights[i], heights[i] + K - 1]\n        possible_last_range = [base_range[i - 1][0], base_range[i - 1][1] + K]\n        nxt = get_overlap(possible_base_range, possible_last_range)\n        if nxt == False:\n            possible = False\n            break\n        else:\n            base_range.append(nxt)\n    if possible:\n        possible_base_range = [heights[N - 1], heights[N - 1]]\n        possible_last_range = [base_range[N - 2][0], base_range[N - 2][1] + K]\n        nxt = get_overlap(possible_base_range, possible_last_range)\n        if nxt == False:\n            possible = False\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    minn = [l[0]]\n    maxx = [l[0]]\n    for i in range(1, n):\n        minnn = max(l[i], minn[i - 1] - k + 1)\n        maxxx = min(l[i] + k - 1, maxx[i - 1] + k - 1)\n        minn.append(minnn)\n        maxx.append(maxxx)\n    minn1 = [l[n - 1]]\n    maxx1 = [l[n - 1]]\n    i = n - 1\n    j = 0\n    while i > 0:\n        i -= 1\n        j += 1\n        minnn = max(l[i], minn1[j - 1] - k + 1)\n        maxxx = min(l[i] + k - 1, maxx1[j - 1] + k - 1)\n        minn1.append(minnn)\n        maxx1.append(maxxx)\n    flag = 'YES'\n    for i in range(n):\n        if minn[i] > maxx[i] or minn1[i] > maxx1[i]:\n            flag = 'NO'\n            break\n    print(flag)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    minn = [l[0]]\n    maxx = [l[0]]\n    for i in range(1, n):\n        minnn = max(l[i], minn[i - 1] - k + 1)\n        maxxx = min(l[i] + k - 1, maxx[i - 1] + k - 1)\n        minn.append(minnn)\n        maxx.append(maxxx)\n    minn1 = [l[n - 1]]\n    maxx1 = [l[n - 1]]\n    i = n - 1\n    j = 0\n    while i > 0:\n        i -= 1\n        j += 1\n        minnn = max(l[i], minn1[j - 1] - k + 1)\n        maxxx = min(l[i] + k - 1, maxx1[j - 1] + k - 1)\n        minn1.append(minnn)\n        maxx1.append(maxxx)\n    flag = 'YES'\n    for i in range(n):\n        if minn[i] > maxx[i] or minn1[i] > maxx1[i]:\n            flag = 'NO'\n            break\n    print(flag)"]