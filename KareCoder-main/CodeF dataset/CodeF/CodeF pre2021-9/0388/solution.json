["def solve(n, a, b):\n    ixs = [None] * (n + 1)\n    for (i, v) in enumerate(a):\n        ixs[v] = i\n    shifts = [0] * n\n    for (i, v) in enumerate(b):\n        base = i - ixs[v]\n        if base < 0:\n            base += n\n        shifts[base] += 1\n    return max(shifts)\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nprint(solve(n, a, b))", "def answer(n, a, b):\n    da = {a[i]: i for i in range(n)}\n    db = {b[i]: i for i in range(n)}\n    cnt = [0] * n\n    for k in da:\n        d = da[k] - db[k]\n        if d < 0:\n            d += n\n        cnt[d] += 1\n    return max(cnt)\n\ndef answer2(n, a, b):\n    posa = [0] * (n + 1)\n    for i in range(n):\n        posa[a[i]] = i\n    cnt = [0] * n\n    for i in range(n):\n        d = posa[b[i]] - i\n        if d < 0:\n            d += n\n        cnt[d] += 1\n    return max(cnt)\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    print(answer2(n, a, b))\n    return\nmain()", "def cast(cre, typ):\n    return type(typ)(map(cre, typ))\n\ndef solution():\n    n = int(input())\n    (a, b) = (cast(int, input().split()), cast(int, input().split()))\n    (a_idx, b_idx) = ([0 for i in range(n + 1)], [0 for i in range(n + 1)])\n    for i in range(n):\n        a_idx[a[i]] = i\n        b_idx[b[i]] = i\n    amt = [0 for i in range(n)]\n    for i in range(1, n + 1):\n        amt[(n + (a_idx[i] - b_idx[i])) % n] += 1\n    print(max(amt))\nsolution()", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfirst = [0] * n\nfor i in range(n):\n    first[a[i] - 1] += i\n    first[b[i] - 1] -= i\nsecond = [0] * n\nfor i in first:\n    second[i] += 1\nprint(max(second))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfirst = [0] * n\nfor i in range(n):\n    first[a[i] - 1] += i\n    first[b[i] - 1] -= i\nsecond = [0] * n\nfor i in first:\n    second[i] += 1\nprint(max(second))", "s = int(input())\na = input().split()\nb = input().split()\na_positions = {a: i for (i, a) in enumerate(a)}\ndistances = [0] * s\nfor (i, b) in enumerate(b):\n    distances[(a_positions[b] - i) % s] += 1\nprint(max(distances))", "import sys\nfrom collections import defaultdict\n\ndef printMat(mat):\n    for i in range(len(mat)):\n        mat_str = map(str, mat[i])\n        print(' '.join(mat_str))\n\ndef printList(l):\n    l_str = map(str, l)\n    print(' '.join(l_str))\n\ndef helper(a, b, n):\n    (offset, a2i, ans) = (defaultdict(int), {}, 0)\n    for (i, v) in enumerate(a):\n        a2i[v] = i\n    for (i, v) in enumerate(b):\n        off = (i - a2i[v]) % n\n        offset[off] += 1\n    for (off, cnt) in offset.items():\n        ans = max(ans, cnt)\n    return ans\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(helper(a, b, n))", "def solve(n, a, b):\n    ixs = [None] * n\n    for (i, v) in enumerate(a):\n        ixs[v - 1] = i\n    shifts = [0] * n\n    for (i, v) in enumerate(b):\n        base = i - ixs[v - 1]\n        if base < 0:\n            base += n\n        shifts[base] += 1\n    return max(shifts)\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nprint(solve(n, a, b))", "import sys\nimport os\nimport heapq\nimport math\ntry:\n    path = './file/input.txt'\n    if os.path.exists(path):\n        sys.stdin = open(path, 'r')\nexcept:\n    pass\nt = 1\n\ndef printd(value):\n    pass\n\ndef case():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    mapp = [0] * (n + 1)\n    for (index, value) in enumerate(a):\n        mapp[value] = index\n    result = 0\n    right = [0] * (n + 1)\n    for (index, value) in enumerate(b):\n        pos = mapp[value]\n        if pos < index:\n            pos += n\n        right[pos - index] += 1\n        result = max(result, right[pos - index])\n    print(result)\nfor _ in range(t):\n    case()", "n = int(input())\na = [0 for _ in range(n + 5)]\ni = 0\nfor x in input().split():\n    a[int(x)] = i\n    i += 1\nans = [0 for _ in range(2 * n + 5)]\ni = 0\nfor x in input().split():\n    offset = i - a[int(x)]\n    ans[offset if offset > 0 else offset + n] += 1\n    i += 1\nprint(max(ans))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mIndex = {}\n    for i in range(n):\n        mIndex[b[i]] = i\n    m = {}\n    for i in range(n):\n        (i1, i2) = (i, mIndex[a[i]])\n        steps = n - i2 + i1\n        if i1 > i2:\n            steps = i1 - i2\n        m[steps] = m.get(steps, 0) + 1\n    res = 1\n    for key in m.keys():\n        res = max(res, m[key])\n    print(res)\nsolve()", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    n = int(input())\n    a = {}\n    b = {}\n    for (x, i, j) in zip(range(n), li(), li()):\n        a[i] = b[j] = x\n    c = arr([0] * n)\n    for i in range(1, n + 1):\n        c[b[i] - a[i]] += 1\n    print(max(c))\nsolve()", "n = int(input())\naa = map(int, input().split())\naid = [0] * (n + 1)\nfor (i, a) in enumerate(aa):\n    aid[a] = i\nbb = map(int, input().split())\ndcount = [0] * n\nfor (i, b) in enumerate(bb):\n    dcount[(i - aid[b]) % n] += 1\nprint(max(dcount))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nidx = [0] * n\ncnt = [0] * n\nfor i in range(n):\n    idx[a[i] - 1] = i\nfor i in range(n):\n    cnt[idx[b[i] - 1] - i] += 1\nprint(max(cnt))", "def answer(n, a, b):\n    da = {a[i]: i for i in range(n)}\n    db = {b[i]: i for i in range(n)}\n    cnt = [0] * n\n    for k in da:\n        d = da[k] - db[k]\n        if d < 0:\n            d += n\n        cnt[d] += 1\n    return max(cnt)\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    print(answer(n, a, b))\n    return\nmain()", "def solve():\n    n = int(input())\n    ll = list(map(int, input().split()))\n    mp = {}\n    for i in range(n):\n        mp[ll[i]] = i + 1\n    ll1 = list(map(int, input().split()))\n    ans = 0\n    mp1 = {}\n    for i in range(n):\n        temp = mp[ll1[i]] - i - 1\n        if temp < 0:\n            temp += n\n        if temp in mp1:\n            mp1[temp] += 1\n        else:\n            mp1[temp] = 1\n        ans = max(ans, mp1[temp])\n    return ans\nt = 1\nwhile t != 0:\n    res = solve()\n    print(res)\n    t -= 1", "from collections import Counter\n\ndef read_ints():\n    return [int(i) for i in input().strip().split()]\n\ndef main():\n    n = int(input())\n    a = read_ints()\n    b = read_ints()\n    d = dict()\n    for (idx, i) in enumerate(a):\n        d[i] = idx\n    diff = []\n    for (idx, i) in enumerate(b):\n        idx1 = d[i]\n        delta = (idx1 - idx) % n\n        diff.append(delta)\n    data = Counter(diff)\n    print(data.most_common(1)[0][1])\nmain()", "import statistics, sys\ninput = sys.stdin.readline\n(n, a, b) = (int(input()), [int(i) for i in input().split()], [int(i) for i in input().split()])\npos_a = [0 for _ in range(n + 1)]\nfor i in range(n):\n    pos_a[a[i]] = i\ndiffs = [(i - pos_a[b[i]]) % n for i in range(n)]\nprint(diffs.count(statistics.mode(diffs)))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd1 = [0] * n\nd2 = [0] * n\nfor i in range(n):\n    d1[a[i] - 1] += i\nfor i in range(n):\n    d1[b[i] - 1] -= i\nfor a in d1:\n    d2[a] += 1\nprint(max(d2))", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nn = int(input())\na = int_arr()\nb = int_arr()\nind = {a[i]: i for i in range(n)}\nshaft = [0 for i in range(200002)]\nfor i in range(n):\n    val = b[i]\n    d = ind[val]\n    if i == d:\n        shaft[0] += 1\n        continue\n    elif d > i:\n        shaft[d - i] += 1\n    else:\n        shaft[n - i + d] += 1\nprint(max(shaft))", "from collections import Counter\nn = int(input())\npos_as = {k: v for (k, v) in zip(map(int, input().split()), range(0, n))}\nj = []\nfor (pos_b, v) in enumerate(map(int, input().split())):\n    k = pos_b - pos_as[v]\n    j.append(k if k >= 0 else n + k)\nprint(max(Counter(j).values()))", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    b = [int(x) - 1 for x in input().split()]\n    look = [0] * n\n    for i in range(n):\n        look[b[i]] = i\n    d = []\n    for i in range(n):\n        el = a[i]\n        d.append((i - look[el]) % n)\n    c = Counter(d)\n    ans = max(c.values())\n    print(ans)\ntt = 1\nfor test in range(tt):\n    solve()", "num = int(input())\nft = list(map(int, input().split()))\nst = list(map(int, input().split()))\nans = [0] * (num + 1)\nfor i in range(num):\n    ans[ft[i]] = i\nmx = [0] * (num + 1)\nfor i in range(num):\n    j = ans[st[i]]\n    if i - j > 0:\n        mx[i - j] += 1\n    else:\n        mx[num + (i - j)] += 1\nprint(max(mx))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nhash_map = {}\nfor (i, j) in enumerate(a):\n    hash_map[j] = i\ncount_array = [0] * n\nfor (i, j) in enumerate(b):\n    diff = hash_map[j] - i\n    if diff < 0:\n        diff += n\n    count_array[diff] += 1\nprint(max(count_array))", "def result(n, a, b):\n    vec = [0 for _ in range(n)]\n    l = [0 for _ in range(n)]\n    for (i, el) in enumerate(a):\n        vec[el - 1] = i\n    for (i, el) in enumerate(b):\n        l[(vec[el - 1] - i) % n] += 1\n    return max(l)\nn = int(input())\na = list(map(lambda x: int(x), input().split(' ')))\nb = list(map(lambda x: int(x), input().split(' ')))\nprint(result(n, a, b))", "import sys\nfrom collections import Counter\n\ndef read_ints():\n    return [int(i) for i in input().strip().split()]\n\ndef solve():\n    pass\n\ndef intersection(left, right, mn, mx):\n    if right < mn or left > mx:\n        return None\n    else:\n        return [max(left, mn), min(right, mx)]\n\ndef main():\n    n = int(input())\n    a = read_ints()\n    b = read_ints()\n    d = dict()\n    for (idx, i) in enumerate(a):\n        d[i] = idx\n    diff = []\n    for (idx, i) in enumerate(b):\n        idx1 = d[i]\n        delta = (idx1 - idx) % n\n        diff.append(delta)\n    data = Counter(diff)\n    print(data.most_common(1)[0][1])\nmain()", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * n\nd = [0] * (n + 1)\nfor i in range(n):\n    d[a[i]] = i\nfor i in range(n):\n    j = d[b[i]]\n    c[(j - i) % n] += 1\nprint(max(c))", "n = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nl1p = [-1] * n\nl3 = [0] * (n + 1)\nfor i in range(n):\n    l1p[l1[i] - 1] = i\nfor i in range(n):\n    cur = i - l1p[l2[i] - 1]\n    if cur < 0:\n        cur += n\n    l3[cur] += 1\nprint(max(l3))", "n = int(input())\naa = map(int, input().split())\naid = [0] * (n + 1)\nbb = map(int, input().split())\ndcount = [0] * n\nfor (i, a) in enumerate(aa):\n    aid[a] = i\nfor (i, b) in enumerate(bb):\n    dcount[(i - aid[b]) % n] += 1\nprint(max(dcount))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    d[a[i]] = i\nans = [0] * (n + 1)\nfor j in range(n):\n    temp = d[b[j]] - j\n    if temp < 0:\n        temp = n + temp\n    ans[temp] += 1\nprint(max(ans))", "def rotmatch(n, a, b):\n    placea = [0] * n\n    placeb = [0] * n\n    diff = [0] * n\n    for i in range(n):\n        placea[a[i] - 1] = i\n    for i in range(n):\n        placeb[b[i] - 1] = i\n    for i in range(n):\n        diff[i] = (n - placea[i] + placeb[i]) % n\n    ats = [0] * n\n    for d in diff:\n        ats[d] += 1\n    return max(ats)\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(rotmatch(n, a, b))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nhash_map = {}\nfor (i, j) in enumerate(a):\n    hash_map[j] = i\ncount_array = [0] * n\nfor (i, j) in enumerate(b):\n    diff = hash_map[j] - i\n    if diff < 0:\n        diff += n\n    count_array[diff] += 1\nprint(max(count_array))", "import sys\nfrom collections import defaultdict as dd\nfrom queue import Queue\nimport math\nimport itertools\nn = int(input())\nq = list(map(int, input().split()))\nw = list(map(int, input().split()))\ne = [0] * (n + 1)\nfor i in range(n):\n    e[q[i]] = i\nt = [0] * n\nfor i in range(n):\n    t[(i - e[w[i]]) % n] += 1\nprint(max(t))", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    n = ni()\n    a = nl()\n    b = nl()\n    g = [0] * n\n    f = [0] * n\n    for i in range(n):\n        g[a[i] - 1] = i\n        f[b[i] - 1] = i\n    for i in range(n):\n        g[i] -= f[i]\n    d = dict()\n    for x in g:\n        x %= n\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    print(max(d.values()))\n    return\nsolve()", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * n\nd = [0] * n\nfor i in range(n):\n    c[a[i] - 1] += i\n    c[b[i] - 1] -= i\nfor i in c:\n    d[i] += 1\nprint(max(d))", "from collections import Counter\n\ndef tc():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a_rot = [0] * n\n    b_rot = [0] * n\n    for (i, v) in enumerate(a):\n        a_rot[v - 1] = i\n    for (i, v) in enumerate(b):\n        b_rot[v - 1] = i\n    diffs = []\n    for i in range(n):\n        diff = a_rot[i] - b_rot[i]\n        if diff < 0:\n            diff += n\n        diffs.append(diff)\n    c = Counter(diffs)\n    return max(c.values())\nT = 1\nfor _ in range(T):\n    ans = tc()\n    print(ans)", "n = int(input())\na = [0] * (n + 1)\nfor (i, x) in enumerate(map(int, input().split())):\n    a[x] = i\nb = [0] * (n + 1)\nfor (i, x) in enumerate(map(int, input().split())):\n    y = ((i - a[x]) % n + n) % n\n    b[y] += 1\nprint(max(b))", "n = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\ninds = {}\nfor x in range(n):\n    inds[b[x]] = x\nres = [0] * n\nfor x in range(n):\n    if inds[a[x]] >= x:\n        required = inds[a[x]] - x\n    else:\n        required = n - (x - inds[a[x]])\n    res[required] += 1\nprint(max(res))", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = dict()\npos = defaultdict(lambda : 0)\nfor i in range(n):\n    d[a[i]] = i\nfor i in range(n):\n    cur = d[b[i]] - i\n    if cur < 0:\n        cur += n\n    pos[cur] += 1\ns = max(pos.values())\nprint(s)", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = dict()\npos = defaultdict(lambda : 0)\nfor i in range(n):\n    d[a[i]] = i\nfor i in range(n):\n    cur = d[b[i]] - i\n    if cur < 0:\n        cur += n\n    pos[cur] += 1\ns = max(pos.values())\nprint(s)", "def getMaxMatchingPairs(a, b):\n    mapB = {elm: index for (index, elm) in enumerate(b)}\n    maxPairs = 0\n    countMap = {}\n    n = len(a)\n    for (i, elm) in enumerate(a):\n        dist = mapB[elm] - i if mapB[elm] > i else n + mapB[elm] - i\n        countMap[dist] = countMap.get(dist, 0) + 1\n        if maxPairs < countMap[dist]:\n            maxPairs = countMap[dist]\n    return maxPairs\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(getMaxMatchingPairs(a, b))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ndiff = [0] * n\nout = [0] * n\nfor i in range(n):\n    diff[a[i] - 1] += i\nfor i in range(n):\n    diff[b[i] - 1] -= i\nfor v in diff:\n    out[v] += 1\nprint(max(out))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nindex = [-1] * (n + 5)\nfor i in range(n):\n    index[b[i]] = i\nfreq = [0] * (n + 5)\nfor i in range(n):\n    j = index[a[i]]\n    if j < i:\n        freq[n - i + j] += 1\n    else:\n        freq[j - i] += 1\nprint(max(freq))", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * n\nd = [0] * n\nfor i in range(n):\n    c[a[i] - 1] += i\n    c[b[i] - 1] -= i\nfor i in c:\n    d[i] += 1\nprint(max(d))", "n = int(input())\nlist1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\nright = [0] * (n + 1)\ndicti = {}\nfor i in range(n):\n    dicti[list1[i]] = i\nfor i in range(n):\n    k = dicti[list2[i]] - i\n    if k > 0:\n        right[k] += 1\n    else:\n        right[n + k] += 1\nprint(max(right))", "n = int(input())\nlst1 = [int(i) for i in input().split()]\nlst2 = [int(i) for i in input().split()]\nres = [0] * (n + 1)\nd = {}\nfor i in range(n):\n    d[lst1[i]] = i\nfor i in range(n):\n    k = d[lst2[i]] - i\n    if k > 0:\n        res[k] += 1\n    else:\n        res[n + k] += 1\nprint(max(res))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npos_a = [-1] * (n + 1)\npos_b = [-1] * (n + 1)\nfor i in range(n):\n    pos_a[a[i]] = i\nfor i in range(n):\n    pos_b[b[i]] = i\ncnt = [0] * n\nfor i in range(1, n + 1):\n    cnt[(pos_a[i] - pos_b[i] + n) % n] += 1\nprint(max(cnt))", "def solve(n, seqA, seqB):\n    table = {x: index for (index, x) in enumerate(seqA, 0)}\n    diff = {}\n    for indexB in range(n):\n        res = table[seqB[indexB]] - indexB\n        if res < 0:\n            if res * -1 > n // 2:\n                res = n - res * -1\n        elif res > n // 2:\n            res = n - res\n            res *= -1\n        if diff.get(res) == None:\n            diff[res] = 1\n        else:\n            diff[res] += 1\n    return max(diff.values())\nn = int(input())\nseqA = input().split()\nseqB = input().split()\nprint(solve(n, seqA, seqB))", "n = int(input())\nlist1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\ndict1 = {}\ndict2 = {}\nfor i in range(n):\n    a = list1[i]\n    b = list2[i]\n    if a not in dict1:\n        dict1[a] = i\n    else:\n        x = dict1[a] + i\n        if x not in dict2:\n            dict2[x] = 1\n        else:\n            dict2[x] += 1\n    if b not in dict1:\n        dict1[b] = -i\n    else:\n        y = dict1[b] - i + n\n        if y not in dict2:\n            dict2[y] = 1\n        else:\n            dict2[y] += 1\nprint(max(dict2.values()))", "import statistics\nfrom statistics import mode\nn = int(input())\nlst1 = list(map(int, input().split()))\nlst2 = list(map(int, input().split()))\ndct = {}\nlst3 = []\nfor (i, item) in enumerate(lst1):\n    dct[item] = i\nfor (i, item) in enumerate(lst2):\n    if i > dct[item]:\n        lst3.append(dct[item] + n - i)\n    else:\n        lst3.append(dct[item] - i)\nc = mode(lst3)\nprint(lst3.count(c))", "from sys import stdin\nn = int(stdin.readline().strip())\ns = list(map(int, stdin.readline().strip().split()))\ns1 = list(map(int, stdin.readline().strip().split()))\nans = [0 for i in range(n)]\npos = [0 for i in range(n + 1)]\nfor i in range(n):\n    pos[s1[i]] = i\nfor i in range(n):\n    x = pos[s[i]]\n    if x <= i:\n        ans[i - x] += 1\n    else:\n        ans[n + i - x] += 1\nprint(max(ans))", "n = int(input())\nlis1 = list(map(int, input().split()))\nlis2 = list(map(int, input().split()))\nm = [0 for i in range(n)]\nfor (j, i) in enumerate(lis2):\n    m[i - 1] = j\nlis = [0 for i in range(n)]\nfor (i, k) in enumerate(lis1):\n    ind = m[k - 1]\n    if ind >= i:\n        lis[ind - i] += 1\n    else:\n        lis[n - i + ind] += 1\nprint(max(lis))", "from collections import Counter\n\ndef solve(list1, list2, n):\n    inverse_index = {element: index for (index, element) in enumerate(list1)}\n    return [inverse_index[element] - index if inverse_index[element] - index >= 0 else n + inverse_index[element] - index for (index, element) in enumerate(list2) if element in inverse_index]\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif n == 1:\n    print(1)\nelse:\n    print(max(Counter(solve(a, b, n)).values()))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npos = [-1] * n\nfor i in range(n):\n    pos[a[i] - 1] = i\ndic = {}\nfor i in range(n):\n    cur = pos[b[i] - 1] - i\n    if cur < 0:\n        cur += n\n    if cur in dic:\n        dic[cur] += 1\n    else:\n        dic[cur] = 1\nprint(max(dic.values()))", "from collections import *\nR = lambda : map(int, input().split())\n(n,) = R()\na = [0] * n\ni = 0\nfor (x, y) in zip(R(), R()):\n    a[x - 1] += i\n    a[y - 1] -= i\n    i += 1\nprint(max(Counter((x % n for x in a)).values()))", "def solve(a, b, n):\n    map_k = [0 for i in range(n + 1)]\n    offset_map = [0 for i in range(n + 1)]\n    for i in range(n):\n        map_k[a[i]] = i\n    for j in range(n):\n        ndx = map_k[b[j]]\n        offset = ndx - j\n        if offset < 0:\n            offset += n\n        offset_map[offset] += 1\n    max_so_far = 0\n    for i in range(0, n + 1):\n        max_so_far = max(max_so_far, offset_map[i])\n    return max_so_far\n\ndef read():\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    ans = solve(a, b, n)\n    print(ans)\nread()", "n = int(input())\nlst1 = [int(i) for i in input().split()]\nlst2 = [int(i) for i in input().split()]\nres = [0] * (n + 1)\nd = {}\nfor i in range(n):\n    d[lst1[i]] = i\nfor i in range(n):\n    k = d[lst2[i]] - i\n    if k > 0:\n        res[k] += 1\n    else:\n        res[n + k] += 1\nprint(max(res))", "arr_size = int(input())\ndict_a = dict()\nfor (i, a) in enumerate(list(map(int, input().split())), start=1):\n    dict_a[a] = i\ndict_b = dict()\nfor (i, b) in enumerate(list(map(int, input().split())), start=1):\n    key = (i - dict_a[b]) % arr_size\n    if key in dict_b:\n        dict_b[key] += 1\n    else:\n        dict_b[key] = 1\nresult = max(dict_b.values())\nprint(result)", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nindices = [0] * n\nfor (i, x) in enumerate(b):\n    indices[x - 1] = i\noffsets = [0] * n\nfor i in range(n):\n    offsets[(indices[a[i] - 1] - i) % n] += 1\nprint(max(offsets))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nshift = [0] * (1 + n)\n(ida, idb) = ([0] * (1 + n), [0] * (1 + n))\nfor i in range(n):\n    ida[a[i]] = i\n    idb[b[i]] = i\nfor i in range(1, 1 + n):\n    shift[(ida[i] - idb[i]) % n] += 1\nprint(max(shift))", "R1 = lambda : list(map(int, input().split()))\nR2 = lambda : int(input())\n(n, a, b) = (R2(), R1(), R1())\nc = [0] * n\nd = [0] * n\nfor i in range(n):\n    c[a[i] - 1] += i\n    c[b[i] - 1] -= i\nfor i in c:\n    d[i] += 1\nprint(max(d))", "n = int(input())\na = [0] * (n + 1)\nfor (i, num) in enumerate(map(int, input().split())):\n    a[num] = i + 1\nd = {}\nfor (i, num) in enumerate(map(int, input().split())):\n    t = a[num] - (i + 1)\n    if t < 0:\n        t = n + t\n    d[t] = d.get(t, 0) + 1\nans = max(d.values())\nprint(ans)", "n = int(input())\narr = [0] + list(map(int, input().split()))\nbbs = [0] + list(map(int, input().split()))\nd = {}\nfor i in range(1, n + 1):\n    d[arr[i]] = i\ncount = {}\nfor i in range(1, n + 1):\n    curr = d[bbs[i]] - i\n    if curr < 0:\n        curr += n\n    count[curr] = count.get(curr, 0) + 1\nres = max(count.values())\nprint(res)", "r = lambda : map(int, input().split())\n(n,) = r()\na = {}\nb = {}\ng = [0] * n\nfor (x, i, j) in zip(range(n), r(), r()):\n    a[i] = b[j] = x\nfor i in range(1, n + 1):\n    g[(b[i] - a[i]) % n] += 1\nprint(max(g))", "import math\nmx = 200001\n\ndef DenTofieM():\n    sz = int(input())\n    ar = list(map(int, input().split()))\n    br = list(map(int, input().split()))\n    posA = [0] * mx\n    posB = [0] * mx\n    for i in range(sz):\n        posA[ar[i]] = i + 1\n        posB[br[i]] = i + 1\n    mp = {}\n    for i in range(1, sz + 1):\n        dis = posA[i] - posB[i]\n        if dis < 0:\n            dis += sz\n        if dis in mp.keys():\n            mp[dis] += 1\n        else:\n            mp[dis] = 1\n    print(max(mp.values()))\nDenTofieM()", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = [0] * n\nfor i in range(n):\n    s[a[i] - 1] = i\nd = dict()\nfor i in range(n):\n    t = s[b[i] - 1] - i\n    if t < 0:\n        t += n\n    if t in d:\n        d[t] += 1\n    else:\n        d[t] = 1\nprint(max(d.values()))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {}\np = {}\nfor i in range(n):\n    d[a[i]] = i\nfor i in range(n):\n    x = (d[b[i]] - i + n) % n\n    if x not in p:\n        p[x] = 1\n    else:\n        p[x] += 1\nprint(max(list(p.values())))", "n = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nc = [0] * n\nx = [0] * n\nfor i in range(n):\n    x[l1[i] - 1] += i\n    x[l2[i] - 1] -= i\nfor i in range(n):\n    c[x[i] % n] += 1\nprint(max(c))", "n = int(input())\npos = [0] * (n + 1)\nans = dict()\na = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    pos[a[i - 1]] = i\nb = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    ps = pos[b[i - 1]] - i\n    if ps < 0:\n        ps += n\n    ans[ps] = ans.get(ps, 0) + 1\nprint(max(ans.values()))", "n = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nc = [0] * n\nx = [0] * n\nfor i in range(n):\n    x[l1[i] - 1] += i\n    x[l2[i] - 1] -= i\nfor i in range(n):\n    c[x[i] % n] += 1\nprint(max(c))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {}\np = {}\nfor i in range(n):\n    d[a[i]] = i\nfor i in range(n):\n    x = (d[b[i]] - i + n) % n\n    if x not in p:\n        p[x] = 1\n    else:\n        p[x] += 1\nprint(max(list(p.values())))", "n = int(input())\nr = lambda : list(map(int, input().split()))\n(pos, ans, a, b) = ([0] * (n + 1), dict(), r(), r())\nfor i in range(1, n + 1):\n    pos[a[i - 1]] = i\nfor i in range(1, n + 1):\n    ps = pos[b[i - 1]] - i\n    if ps < 0:\n        ps += n\n    ans[ps] = ans.get(ps, 0) + 1\nprint(max(ans.values()))", "from collections import Counter\nr = lambda : map(int, input().split())\n(a,) = r()\nv = [0] * a\ni = 0\nfor (x, y) in zip(r(), r()):\n    v[x - 1] += i\n    v[y - 1] -= i\n    i += 1\nprint(max(Counter((x % a for x in v)).values()))", "n = int(input())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\ntmp = [0] * n\nans = [0] * n\nfor i in range(n):\n    tmp[arr[i] - 1] += i\n    tmp[brr[i] - 1] -= i\nfor i in range(n):\n    ans[tmp[i] % n] += 1\nprint(max(ans))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[a[i] - 1] = i\n    y[b[i] - 1] = i\nans = [0] * n\nfor i in range(n):\n    m = (x[i] - y[i]) % n\n    ans[m] += 1\nprint(max(ans))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npos = [0] * (n + 1)\nfre = [0] * n\nfor i in range(n):\n    pos[a[i]] = i + 1\nfor i in range(n):\n    x = i + 1\n    y = pos[b[i]]\n    fre[(x - y + n) % n] += 1\nprint(max(fre))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncounter = [0] * n\ndec = [0] * n\nfor w in range(n):\n    dec[a[w] - 1] += w\n    dec[b[w] - 1] -= w\nfor i in range(n):\n    counter[dec[i] % n] += 1\nprint(max(counter))", "n = int(input())\na = [0] * (n + 1)\nfor (i, num) in enumerate(map(int, input().split())):\n    a[num] = i + 1\nd = {}\nfor (i, num) in enumerate(map(int, input().split())):\n    t = a[num] - (i + 1)\n    if t < 0:\n        t = n + t\n    d[t] = d.get(t, 0) + 1\nans = max(d.values())\nprint(ans)", "from collections import defaultdict\n\ndef match_twist(arr1, arr2):\n    map2 = {arr2[i]: i for i in range(len(arr2))}\n    buckets = defaultdict(lambda : 0)\n    for index1 in range(len(arr2)):\n        index2 = map2[arr1[index1]]\n        diff = index1 - index2\n        if diff < 0:\n            diff += len(arr1)\n        buckets[diff] += 1\n    return max(buckets.values())\n\ndef get_arr():\n    arr = input().split()\n    return [int(el) for el in arr]\n_ = input()\n(arr1, arr2) = (get_arr(), get_arr())\nprint(match_twist(arr1, arr2))", "from collections import Counter\nN = int(input())\nlst1 = [int(x) for x in input().split()]\nlst2 = [int(x) for x in input().split()]\nd1 = {}\ncyclick_lst = []\nfor j in range(N):\n    d1[lst1[j]] = j + 1\nfor j in range(1, N + 1):\n    y = d1[lst2[j - 1]]\n    cyclick_lst.append((y - j + N) % N)\nd2 = Counter(cyclick_lst)\nprint(max(d2.values()))", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nla = [0] * (n + 1)\nlb = [0] * (n + 1)\nfor i in range(n):\n    la[a[i]] = i\n    lb[b[i]] = i\ndic = {}\nfor i in range(1, n + 1):\n    diff = lb[i] - la[i]\n    if diff < 0:\n        diff = n + diff\n    dic[diff] = dic.get(diff, 0) + 1\nmx = 0\nfor key in dic:\n    if dic[key] > mx:\n        mx = dic[key]\nprint(mx)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nla = [0] * (n + 1)\nlb = [0] * (n + 1)\nfor i in range(n):\n    la[a[i]] = i\n    lb[b[i]] = i\ndic = {}\nfor i in range(1, n + 1):\n    diff = lb[i] - la[i]\n    if diff < 0:\n        diff = n + diff\n    dic[diff] = dic.get(diff, 0) + 1\nmx = 0\nfor key in dic:\n    if dic[key] > mx:\n        mx = dic[key]\nprint(mx)", "import sys\nfrom collections import Counter\n\ndef swap(x, y, a):\n    temp = a[x]\n    a[x] = a[y]\n    a[y] = temp\n    return a\n\ndef solve():\n    return None\n\ndef main():\n    q = []\n    for line in sys.stdin.readlines():\n        q.append(line)\n    for i in range(len(q)):\n        q[i] = q[i].rstrip().split(' ')\n        q[i] = [int(x) for x in q[i]]\n    a = q[1]\n    b = q[2]\n    indices = {}\n    d = []\n    for i in range(len(b)):\n        indices[b[i]] = i\n    for i in range(len(a)):\n        if i - indices[a[i]] < 0:\n            d.append(len(a) + i - indices[a[i]])\n        else:\n            d.append(i - indices[a[i]])\n    (mc, nmc) = Counter(d).most_common(1)[0]\n    print(nmc)\nmain()", "for _ in range(1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[b[i]] = i\n    d1 = {}\n    for i in range(n):\n        rz = d[a[i]] - i\n        if rz < 0:\n            rz = n + rz\n        d1[rz] = d1.get(rz, 0) + 1\n    print(max(d1.values()))", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {a[i]: i for i in range(n)}\nfor i in range(n):\n    v = i - d[b[i]]\n    if v >= 0:\n        d[b[i]] = v\n    else:\n        d[b[i]] = n + v\nprint(max(Counter(d.values()).values()))", "n = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nc = [0] * n\nx = [0] * n\nm = 0\nfor i in range(n):\n    x[l1[i] - 1] += i\n    x[l2[i] - 1] -= i\nfor i in range(n):\n    c[x[i] % n] += 1\nprint(max(c))", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\npos = {}\nfor i in range(n):\n    pos[a[i]] = i + 1\nfreq = {}\nfor i in range(n):\n    x = i + 1\n    y = pos[b[i]]\n    dist = (y - x + n) % n\n    if dist not in freq:\n        freq[dist] = 1\n    else:\n        freq[dist] += 1\n(max_k, max_v) = (-1, -1)\nfor (k, v) in freq.items():\n    if v > max_v:\n        max_v = v\n        max_k = k\nprint(max_v)", "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\npos = {}\nfor i in range(n):\n    pos[a[i]] = i + 1\nfreq = {}\nfor i in range(n):\n    x = i + 1\n    y = pos[b[i]]\n    dist = (y - x + n) % n\n    if dist not in freq:\n        freq[dist] = 1\n    else:\n        freq[dist] += 1\n(max_k, max_v) = (-1, -1)\nfor (k, v) in freq.items():\n    if v > max_v:\n        max_v = v\n        max_k = k\nprint(max_v)", "from collections import defaultdict, Counter\nn = int(input())\na = map(int, input().split())\nb = map(int, input().split())\nbrev = {}\nfor (i, bi) in enumerate(b):\n    brev[bi] = i\nshifts = Counter(((brev[ai] - i + n) % n for (i, ai) in enumerate(a)))\nprint(shifts.most_common(1)[0][1])", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\np = a.copy()\nfor (i, aa) in enumerate(a):\n    p[aa - 1] = i\nfor (i, bb) in enumerate(b):\n    b[i] = (p[bb - 1] + n - i) % n\nb = Counter(b)\nprint(max(b.values()))", "n = int(input())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\ncount = [0] * n\nright = [0] * n\nfor i in range(n):\n    right[l1[i] - 1] += i\n    right[l2[i] - 1] -= i\nfor i in range(n):\n    count[right[i] % n] += 1\nprint(max(count))", "import math\nmx = 200001\n\ndef DenTofieM():\n    sz = int(input())\n    ar = list(map(int, input().split()))\n    br = list(map(int, input().split()))\n    posA = [0] * mx\n    posB = [0] * mx\n    for i in range(sz):\n        posA[ar[i]] = i + 1\n        posB[br[i]] = i + 1\n    mp = {}\n    for i in range(1, sz + 1):\n        dis = posA[i] - posB[i]\n        if dis < 0:\n            dis += sz\n        if dis in mp.keys():\n            mp[dis] += 1\n        else:\n            mp[dis] = 1\n    print(max(mp.values()))\nDenTofieM()", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {}\na.insert(0, 0)\nb.insert(0, 0)\nfor i in range(1, n + 1):\n    d[a[i]] = i\nd1 = {}\nfor i in range(1, n + 1):\n    x = d[b[i]] - i\n    if x < 0:\n        x += n\n    if x not in d1:\n        d1[x] = 1\n    else:\n        d1[x] += 1\nma = 0\nfor i in d1:\n    if ma < d1[i]:\n        ma = d1[i]\nprint(ma)", "from collections import defaultdict\n\ndef solve(lst1, lst2):\n    loc = {}\n    for (i, num) in enumerate(lst1):\n        loc[num] = i\n    diff = defaultdict(int)\n    for (i, num) in enumerate(lst2):\n        j = loc[num]\n        if j - i >= 0:\n            diff[j - i] += 1\n        else:\n            diff[j - i + n] += 1\n    res = 0\n    for x in diff:\n        res = max(res, diff[x])\n    return res\nn = int(input())\nlst1 = list(map(int, input().split()))\nlst2 = list(map(int, input().split()))\nprint(solve(lst1, lst2))", "from sys import stdin, stdout\nfrom collections import defaultdict\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\npos = [0] * (n + 1)\ncntDict = [0] * n\nfor i in range(n):\n    pos[a[i]] = i\nfor i in range(n):\n    r1 = i\n    r2 = pos[b[i]]\n    d = r2 - r1\n    if d < 0:\n        d = d + n\n    cntDict[d] += 1\nprint(max(cntDict))", "from collections import *\nR = lambda : map(int, input().split())\n(n,) = R()\na = [0] * n\ni = 0\nfor (x, y) in zip(R(), R()):\n    a[x - 1] += i\n    a[y - 1] -= i\n    i += 1\nprint(max(Counter((x % n for x in a)).values()))", "from sys import stdin, stdout\nfor _ in range(1):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    d = {}\n    ib = {}\n    for i in range(n):\n        ib[b[i]] = i\n    for i in range(n):\n        shift = (i - ib[a[i]] + n) % n\n        d[shift] = d.get(shift, 0) + 1\n    print(max((v for (k, v) in d.items())))", "x = int(input())\nI1 = [item for item in map(int, input().split())]\nI2 = [item for item in map(int, input().split())]\nsign1 = [0] * x\nfor j in range(x):\n    sign1[I1[j] - 1] += j\n    sign1[I2[j] - 1] -= j\nfinal = [0] * x\nfor k in range(x):\n    final[sign1[k] % x] += 1\nprint(max(final))"]