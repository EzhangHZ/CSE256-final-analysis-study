["input()\ns = input()\n(a, b) = ([], [])\nfor (i, c) in enumerate(s):\n    if not a or c >= s[a[-1]]:\n        a.append(i)\n    elif not b or c >= s[b[-1]]:\n        b.append(i)\n    else:\n        print('NO')\n        exit(0)\nprint('YES')\nans = ['0'] * len(s)\nfor c in b:\n    ans[c] = '1'\nprint(''.join(ans))", "n = int(input())\ns = input()\nposs = 1\nl1 = []\nl2 = []\narr = [0 for i in range(n)]\nfor i in range(n):\n    if l1 == []:\n        l1.append(s[i])\n        arr[i] = 0\n    elif ord(s[i]) >= ord(l1[-1]):\n        l1.append(s[i])\n        arr[i] = 0\n    elif l2 == []:\n        l2.append(s[i])\n        arr[i] = 1\n    elif ord(s[i]) >= ord(l2[-1]):\n        l2.append(s[i])\n        arr[i] = 1\n    else:\n        poss = 0\n        break\nif poss == 0:\n    print('NO')\nelse:\n    print('YES')\n    for i in arr:\n        print(i, end='')", "n = int(input())\ns = [ord(i) - ord('a') + 1 for i in input()]\nclr = ['0'] * n\nx = s[0]\nbad = []\nflag = 1\nfor i in range(n):\n    if s[i] >= x:\n        x = s[i]\n    else:\n        clr[i] = '1'\n        bad.append(s[i])\n        if any([s[i] < j for j in bad]):\n            print('NO')\n            flag = 0\n            break\nif flag:\n    print('YES')\n    print(''.join(clr))", "n = int(input())\ns = input()\nlast0 = last1 = 'a'\nans = ''\nfor i in range(n):\n    if s[i] >= last0:\n        ans += '0'\n        last0 = s[i]\n    elif s[i] >= last1:\n        ans += '1'\n        last1 = s[i]\n    else:\n        print('NO')\n        break\nif len(ans) == n:\n    print('YES')\n    print(ans)", "n = int(input())\nstring = input()\narr = [ord(i) - 96 for i in string]\nlmax = arr[0]\nans = '0'\nflag = 0\nflag2 = 1\nfor i in range(1, n):\n    if arr[i] < lmax:\n        if flag:\n            if arr[i] < fmax:\n                flag2 = 0\n                break\n            else:\n                fmax = arr[i]\n                ans += '1'\n        else:\n            flag = 1\n            fmax = arr[i]\n            ans += '1'\n    else:\n        lmax = arr[i]\n        ans += '0'\nif flag2:\n    print('YES')\n    print(ans)\nelse:\n    print('NO')", "n = int(input())\ns = str(input())\na = '0'\nb = '0'\nrz = ''\npr = 1\nfor i in range(n):\n    if s[i] >= a:\n        rz += '0'\n        a = s[i]\n    elif s[i] >= b:\n        rz += '1'\n        b = s[i]\n    else:\n        pr = 0\n        print('NO')\n        break\nif pr:\n    print('YES')\n    print(rz)", "(n, s) = (int(input()), input())\nk = 'a'\nl = 'a'\nans = ''\nbreaker = False\nfor c in s:\n    if c >= k:\n        ans += '0'\n        k = c\n    elif c >= l:\n        ans += '1'\n        l = c\n    else:\n        print('NO')\n        breaker = True\n        break\nif not breaker:\n    print('YES')\n    print(ans)", "(n, s) = (int(input()), input())\nk = 'a'\nl = 'a'\nans = ''\nbreaker = False\nfor c in s:\n    if c >= k:\n        ans += '0'\n        k = c\n    elif c >= l:\n        ans += '1'\n        l = c\n    else:\n        print('NO')\n        breaker = True\n        break\nif not breaker:\n    print('YES')\n    print(ans)", "d = [[0] * 26 for _ in range(26)]\nn = int(input())\ns = input()\nans = [-1] * n\nmax_ = 0\nfor (i, x) in enumerate(s):\n    pos = ord(x) - 97\n    val = None\n    if pos == 25:\n        val = 0\n    else:\n        for (_, x) in enumerate(d[pos + 1]):\n            if x == 0:\n                val = _\n                break\n    max_ = max(max_, val)\n    ans[i] = str(val)\n    for j in range(pos, -1, -1):\n        d[j][val] = 1\nif max_ > 1:\n    print('NO')\nelse:\n    print('YES')\n    print(''.join(ans))", "n = int(input())\ns = input()\ns0 = ''\ns1 = ''\nk = ''\ns0 += s[0]\nk += '0'\ncont = True\nfor x in range(1, n):\n    if s1 == '':\n        if s[x] >= s0[len(s0) - 1]:\n            s0 += s[x]\n            k += '0'\n        else:\n            s1 += s[x]\n            k += '1'\n    elif s[x] >= s0[len(s0) - 1]:\n        s0 += s[x]\n        k += '0'\n    elif s[x] >= s1[len(s1) - 1]:\n        s1 += s[x]\n        k += '1'\n    else:\n        cont = False\n        break\nif cont:\n    print('YES')\n    print(k)\nelse:\n    print('NO')", "n = int(input())\ns = input()\nans = [-1 for i in range(n)]\nlast = chr(ord('a') - 1)\nfor i in range(n):\n    if s[i] >= last:\n        ans[i] = 0\n        last = s[i]\nlast = chr(ord('a') - 1)\nfor i in range(n):\n    if ans[i] == -1 and s[i] >= last:\n        ans[i] = 1\n        last = s[i]\n    elif ans[i] == -1:\n        print('NO')\n        exit(0)\nprint('YES')\nprint(*ans, sep='')", "def string(n, s):\n    res = ''\n    j = k = 'a'\n    for i in range(n):\n        if s[i] >= j:\n            res += '0'\n            j = s[i]\n        elif s[i] >= k:\n            res += '1'\n            k = s[i]\n        else:\n            return 'NO'\n    return ['YES', res]\nn = int(input())\ns = input()\nif string(n, s) == 'NO':\n    print('NO')\nelse:\n    print(*string(n, s), sep='\\n')", "(n, s, x, y, answer) = (int(input()), input(), 'a', 'a', '')\nfor i in s:\n    if i >= x:\n        answer += '0'\n        x = i\n    elif i >= y:\n        answer += '1'\n        y = i\n    else:\n        print('NO')\n        break\nelse:\n    print('YES')\n    print(answer)", "n = int(input())\ns = input()\nlast_1 = 'a'\nlast_2 = 'a'\nres = True\nr = []\nfor c in s:\n    if c < last_1:\n        if c < last_2:\n            res = False\n        else:\n            r.append('1')\n            last_2 = max(last_2, c)\n    else:\n        last_1 = max(c, last_1)\n        r.append('0')\nif res:\n    print('YES')\n    print(''.join(r))\nelse:\n    print('NO')", "def colorable(s):\n    mn1 = 'a'\n    mn2 = 'a'\n    res = ''\n    for c in s:\n        if c >= mn1:\n            res += '0'\n            mn1 = c\n        elif c >= mn2:\n            res += '1'\n            mn2 = c\n        else:\n            return (False, res)\n    return (True, res)\nn = input()\ns = input()\n(valid, res) = colorable(s)\nif valid:\n    print('YES')\n    print(res)\nelse:\n    print('NO')", "def run():\n    (flag1, flag2) = ('a', 'a')\n    n = int(input())\n    ret = ''\n    mystr = input()\n    for i in range(n):\n        if mystr[i] >= flag1:\n            ret += '0'\n            flag1 = mystr[i]\n        elif mystr[i] >= flag2:\n            ret += '1'\n            flag2 = mystr[i]\n        else:\n            print('NO')\n            return\n    print('YES')\n    print(ret)\nrun()", "n = int(input())\ns = input()\nres = ''\nlst0 = 'a'\nlst1 = 'a'\nans = 'YES'\nfor i in range(n):\n    if s[i] >= lst0:\n        res += '0'\n        lst0 = s[i]\n    elif s[i] >= lst1:\n        res += '1'\n        lst1 = s[i]\n    else:\n        ans = 'NO'\nif ans == 'NO':\n    print(ans)\nelse:\n    print('YES')\n    print(res)", "n = int(input())\ns = list(input())\nlst1 = 'a'\nlst2 = 'a'\nres = ''\nfor i in range(n):\n    if s[i] >= lst1:\n        res += '0'\n        lst1 = s[i]\n    elif s[i] >= lst2:\n        res += '1'\n        lst2 = s[i]\n    else:\n        print('NO')\n        exit(0)\nprint('YES')\nprint(res)", "import sys\nn = int(input())\ns = input()\nl1 = [1] * n\nl1[0] = 0\nprev = s[0]\nfor i in range(1, n):\n    if s[i] >= prev:\n        l1[i] = 0\n        prev = s[i]\ntemp = []\nfor i in range(n):\n    if l1[i] == 1:\n        temp.append(s[i])\nif len(temp) == 0:\n    print('YES')\n    print(''.join((str(x) for x in l1)))\n    sys.exit()\nprev = temp[0]\nfor i in range(1, len(temp)):\n    if temp[i] < prev:\n        print('NO')\n        sys.exit()\n    prev = temp[i]\nprint('YES')\nprint(''.join((str(x) for x in l1)))", "N = int(input())\ns = input()\na = 'a'\nb = 'a'\nt = ''\nflag = 0\nfor i in s:\n    if a < b:\n        if b <= i:\n            b = i\n            t += '1'\n        elif a <= i:\n            a = i\n            t += '0'\n        else:\n            flag = 1\n            break\n    elif b < a:\n        if a <= i:\n            a = i\n            t += '0'\n        elif b <= i:\n            b = i\n            t += '1'\n        else:\n            flag = 1\n            break\n    elif a <= i:\n        a = i\n        t += '0'\n    else:\n        flag = 1\n        break\nif flag == 1:\n    print('NO')\nelse:\n    print('YES')\n    print(t)", "n = int(input())\ns = input()\ng = {}\nfor i in range(len(s)):\n    g[i] = []\nfor i in range(len(s)):\n    for j in range(i):\n        if s[j] > s[i]:\n            g[i].append(j)\n            g[j].append(i)\ncolored = [False] * len(s)\ncolor = [None] * len(s)\n\ndef brush(v, c):\n    colored[v] = True\n    color[v] = c\n    for n in g[v]:\n        if colored[n]:\n            if color[n] == c:\n                return False\n        elif not brush(n, c ^ 1):\n            return False\n    return True\nfailed = False\nfor i in range(len(s)):\n    if not colored[i]:\n        if not brush(i, 0):\n            failed = True\n            break\nif failed:\n    print('NO')\nelse:\n    print('YES')\n    print(''.join(map(lambda i: '1' if color[i] == 1 else '0', range(len(s)))))", "import math\nn = int(input())\ns = input()\nl = [-1 for i in range(n)]\npossible = True\nfor i in range(n):\n    if l[i] == -1:\n        l[i] = 0\n    for j in range(i + 1, n):\n        if s[j] < s[i]:\n            if l[j] == -1:\n                l[j] = 1 - l[i]\n            elif l[j] != -1 and l[j] + l[i] != 1:\n                possible = False\n                break\n    if possible == False:\n        break\nif possible:\n    print('YES')\n    for el in l:\n        print(el, end='')\nelse:\n    print('NO')", "N = int(input())\nL = input()\nS = '0'\nprev = L[0]\nlast = -1\nfor i in range(1, N):\n    if L[i] < prev:\n        S += '1'\n        if last != -1:\n            if L[i] < last:\n                print('NO')\n                exit(0)\n        last = L[i]\n    else:\n        S += '0'\n        prev = L[i]\nprint('YES')\nprint(S)", "n = int(input())\ns = list(input())\na = []\nfor i in range(n):\n    a.append([s[i], i])\na.sort()\nf = ['0'] * n\nw = -1\ntf = False\ng = [0] * n\nfor i in range(n):\n    if a[i][1] + g[a[i][1]] == i:\n        pass\n    elif g[a[i][1]] == 0:\n        g[a[i][1]] = 1\n        for j in range(a[i][1] - 1, -1, -1):\n            g[j] += 1\n        f[a[i][1]] = '1'\n    else:\n        tf = True\n        break\nif tf:\n    print('NO')\nelse:\n    print('YES')\n    print(''.join(f))", "l = [0] * 26\nn = int(input())\npres = [0] * 26\ns = input()\nres = [0] * n\nii = -1\nfor i in s:\n    ii += 1\n    ind = ord(i) - ord('a')\n    lol = 0\n    for j in range(ind + 1, 26):\n        if pres[j] != 0:\n            lol = 1\n            if l[j] == 1:\n                lol = 2\n                break\n    if lol == 2:\n        break\n    pres[ind] = 1\n    if lol == 1:\n        l[ind] = 1\n        res[ii] = 1\nif lol == 2:\n    print('NO')\nelse:\n    print('YES')\n    print(*res, sep='')", "n = int(input())\ns = input()\ncol = [-1 for i in range(n)]\nok = True\nfor i in range(n):\n    if col[i] == -1:\n        col[i] = 0\n    for j in range(i + 1, n):\n        if col[j] == -1:\n            if s[i] > s[j]:\n                col[j] = 1 - col[i]\n        elif s[i] > s[j] and col[i] + col[j] != 1:\n            ok = False\nif ok:\n    print('YES')\n    ans = str()\n    for i in range(n):\n        ans += str(col[i])\n    print(ans)\nelse:\n    print('NO')", "n = int(input())\ns = input()\ncolor = [0 for _ in range(n)]\nf = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[j] < s[i]:\n            color[j] = 1 - color[i]\nfor i in range(n):\n    for j in range(i + 1, n):\n        if color[i] == color[j] and s[i] > s[j]:\n            f = 1\n            print('NO')\n            break\n    if f == 1:\n        break\nif f == 0:\n    print('YES')\n    for i in range(n):\n        print(color[i], end='')", "n = int(input())\ns = input()\nfl = True\ndp = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if s[j] > s[i]:\n            dp[i] = max(dp[i], 1 + dp[j])\nfor i in dp:\n    if i >= 3:\n        fl = False\n        break\nif not fl:\n    print('NO')\nelse:\n    print('YES')\n    mn1 = s[0]\n    mn2 = 'z'\n    ans = str(0)\n    for i in range(1, n):\n        if s[i] >= mn1:\n            ans += '0'\n            mn1 = s[i]\n        else:\n            ans += '1'\n            mn2 = s[i]\n    print(ans)", "n = int(input())\ns = input()\nfl = True\ndp = [1] * n\nfor i in range(1, n):\n    for j in range(i):\n        if s[j] > s[i]:\n            dp[i] = max(dp[i], 1 + dp[j])\nfor i in dp:\n    if i >= 3:\n        fl = False\n        break\nif not fl:\n    print('NO')\nelse:\n    print('YES')\n    mn1 = s[0]\n    ans = str(0)\n    for i in range(1, n):\n        if s[i] >= mn1:\n            ans += '0'\n            mn1 = s[i]\n        else:\n            ans += '1'\n    print(ans)", "n = int(input())\nseq = input()\nl1 = []\nl2 = []\npossible = True\nl1.append(seq[0])\ni = 0\nfor i in range(1, n):\n    if seq[i] >= seq[i - 1]:\n        l1.append(seq[i])\n    else:\n        l2.append(seq[i])\n        break\ni += 1\nwhile i < n:\n    if seq[i] >= l1[len(l1) - 1]:\n        l1.append(seq[i])\n    elif seq[i] >= l2[len(l2) - 1]:\n        l2.append(seq[i])\n    else:\n        possible = False\n        break\n    i += 1\ni = 0\nj = 0\nif possible:\n    print('YES')\n    for char in seq:\n        if i < len(l1) and char == l1[i]:\n            print('0', end='')\n            i += 1\n        else:\n            print('1', end='')\n            j += 1\nelse:\n    print('NO')", "n = int(input())\ns = list(input())\nadj_list = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[j] < s[i]:\n            adj_list[i].append(j)\n            adj_list[j].append(i)\ncolor = [-1] * n\nfeasible = True\nfor i in range(n):\n    if color[i] == -1:\n        l = [i]\n        color[i] = 0\n        while len(l) > 0:\n            cur = l.pop()\n            for child in adj_list[cur]:\n                if color[child] == color[cur]:\n                    feasible = False\n                elif color[child] == -1:\n                    l.append(child)\n                    color[child] = 1 - color[cur]\nif feasible:\n    print('YES')\n    print(''.join(map(str, color)))\nelse:\n    print('NO')", "n = int(input())\ns = list(input())\ncolor = [-1] * n\nfeasible = True\nfor i in range(n):\n    for j in range(0, i):\n        if s[j] > s[i]:\n            if color[i] == -1:\n                color[i] = 1 - color[j]\n            elif color[i] == color[j]:\n                feasible = False\n    if color[i] == -1:\n        color[i] = 0\nif feasible:\n    print('YES')\n    print(''.join(map(str, color)))\nelse:\n    print('NO')", "n = int(input())\ns = input()\nx = '0'\nflag = 'YES'\nc = 0\ninitial = s[0]\nfor i in range(1, n):\n    if s[i] < initial:\n        x += '1'\n        if c != 0:\n            if s[i] < c:\n                flag = 'NO'\n                break\n        c = s[i]\n    else:\n        x += '0'\n        initial = s[i]\nprint(flag)\nif flag != 'NO':\n    print(x)", "def find(x):\n    r = x\n    while r != f[r]:\n        r = f[r]\n    while x != r:\n        pre = f[x]\n        f[x] = r\n        x = pre\n    return r\na = input()\nn = int(a)\na = input()\nstr = list(a)\nid = [0] * n\nf = [0] * 2 * n\nname = [0] * 2 * n\nfor i in range(n):\n    id[i] = i\nfor i in range(2 * n):\n    f[i] = i\n    name[i] = -1\nFind = 0\nfor i in range(n):\n    if Find:\n        break\n    for j in range(n - i - 1):\n        if str[j] > str[j + 1]:\n            (str[j], str[j + 1]) = (str[j + 1], str[j])\n            (id[j], id[j + 1]) = (id[j + 1], id[j])\n            fx = find(id[j])\n            fnx = find(id[j] + n)\n            fy = find(id[j + 1])\n            fny = find(id[j + 1] + n)\n            if fx == fy or fnx == fny:\n                Find = 1\n                break\n            else:\n                f[fx] = fny\n                f[fy] = fnx\nif Find:\n    print('NO')\nelse:\n    print('YES')\n    for i in range(n):\n        fx = find(i)\n        if name[fx] < 0:\n            name[fx] = 0\n            if fx >= n:\n                name[find(fx - n)] = 1\n            else:\n                name[find(fx + n)] = 1\n        print('{:d}'.format(name[fx]), end='')", "import sys\nn = int(sys.stdin.readline())\ns = list(sys.stdin.readline().strip())\n(s0, s1) = ('', '')\ncolor = ''\nworks = True\nfor i in s:\n    if s0 == '' or s0[-1] <= i:\n        s0 += i\n        color += '0'\n    elif s1 == '' or s1[-1] <= i:\n        s1 += i\n        color += '1'\n    else:\n        works = False\n        break\nif works == True:\n    print('YES')\n    print(color)\nelse:\n    print('NO')", "n = int(input())\ns = str(input())\nls = []\nb_end = False\ns_out = ''\nfor x in range(0, len(s)):\n    tmp_tab = [s[x], -1]\n    ls.append(tmp_tab)\nls[0][1] = 0\nfor x in range(1, len(ls)):\n    tmp_val = ls[x]\n    tmp_lit = ls[x][0]\n    tmp_num = 0\n    tmp_war = []\n    for y in range(x - 1, -1, -1):\n        if ls[y][0] > tmp_lit:\n            tmp_war.append(ls[y][1])\n    if not tmp_war:\n        ls[x][1] = 0\n    elif 0 not in tmp_war:\n        ls[x][1] = 0\n    elif 1 not in tmp_war:\n        ls[x][1] = 1\n    else:\n        b_end = True\n        break\nif b_end == True:\n    print('NO')\nelse:\n    for x in range(0, len(ls)):\n        s_out += str(ls[x][1])\n    print('YES')\n    print(s_out)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    n = II()\n    s = SI()\n    col = [-1] * 26\n    ans = [0] * n\n    A = ord('a')\n    for (i, c) in enumerate(s):\n        zero = one = False\n        for j in range(i):\n            if ord(s[j]) > ord(c):\n                zero |= ans[j] == 0\n                one |= ans[j] == 1\n        if zero and one:\n            print('NO')\n            exit()\n        elif zero:\n            ans[i] = 1\n    print('YES')\n    print(*ans, sep='')\nmain()", "N = int(input())\ns = input()\nC = [0] * N\nSf = [0]\nrisultato = True\nfor n in range(1, N):\n    if s[n] >= s[Sf[-1]]:\n        Sf.append(n)\n    else:\n        C[n] = 1\n        u = Sf[-1]\n        Sf[-1] = n\n        Sf.append(u)\n        i = 3\n        while n >= 2 and i <= len(Sf) and (s[n] < s[Sf[-i]]):\n            if C[n] == C[Sf[-i]]:\n                risultato = False\n                break\n            else:\n                i = i + 1\n        if risultato == False:\n            break\nif risultato:\n    print('YES')\n    r = ''\n    for c in C:\n        r = r + str(c)\n    print(r)\nelse:\n    print('NO')", "n = int(input())\ns = input()\nans = [0] * n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if s[i] > s[j]:\n            if ans[i] == 0:\n                ans[j] = 1\n            else:\n                ans[j] = 0\nflag = True\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if s[i] > s[j]:\n            if ans[i] == ans[j]:\n                flag = False\n                break\nif flag:\n    print('YES')\n    for i in ans:\n        print(i, end='')\nelse:\n    print('NO')", "n = int(input())\ns = input()\nd = ''\nflag = False\nx = y = 'a'\nfor i in s:\n    if i >= x:\n        d += '0'\n        x = i\n    elif i >= y:\n        d += '1'\n        y = i\n    else:\n        print('NO')\n        flag = True\n        break\nif not flag:\n    print('YES')\n    print(d)", "from bisect import bisect_right\n\ndef main():\n    n = int(input())\n    line = list(input())\n    sor = [(line[0], 0)]\n    ans = ['0']\n    for i in range(1, n):\n        j = bisect_right(sor, (line[i], 1))\n        if j == len(sor):\n            col = (sor[j - 1][1] + 1) % 2\n        else:\n            col = sor[j][1]\n        k = j\n        while k < len(sor) and col == sor[k][1]:\n            k += 1\n        if k != len(sor):\n            print('NO')\n            return 0\n        sor.insert(j, (line[i], (col + 1) % 2))\n        ans.append(str((col + 1) % 2))\n    print('YES')\n    print(''.join(ans))\nmain()", "while True:\n    try:\n        n = int(input())\n        s = input()\n        a = ''\n        b = ''\n        a += s[0]\n        ans = '0'\n        for i in range(1, n):\n            if s[i] >= a[-1]:\n                a += s[i]\n                ans += '0'\n            elif b == '' or s[i] >= b[-1]:\n                b += s[i]\n                ans += '1'\n            else:\n                ans = 'N'\n                break\n        if ans == 'N':\n            print('NO')\n        else:\n            print('YES')\n            print(ans)\n    except EOFError:\n        break", "import sys\nimport collections\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    S = input().strip()\n    first = 0\n    second = 0\n    ans = []\n    for (i, s) in enumerate(S):\n        if i == 0:\n            first = ord(s) - ord('a')\n            ans.append(0)\n        elif ord(s) - ord('a') >= first:\n            first = ord(s) - ord('a')\n            ans.append(0)\n        elif ord(s) - ord('a') >= second:\n            second = ord(s) - ord('a')\n            ans.append(1)\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')\n        print(''.join(map(str, ans)))\nmain()", "from collections import deque, Counter\nimport array\nfrom itertools import combinations, permutations\nfrom math import sqrt\n\ndef read_int():\n    return int(input().strip())\n\ndef read_int_array():\n    return [int(i) for i in input().strip().split(' ')]\nn = read_int()\ns = input().strip()\ns1 = [s[0]]\ns2 = []\nfor c in s[1:]:\n    if s1[-1] <= c:\n        s1.append(c)\n    elif not s2 or s2[-1] <= c:\n        s2.append(c)\n    else:\n        break\nif len(s1) + len(s2) == len(s):\n    i = 0\n    j = 0\n    out = []\n    for c in s:\n        if i < len(s1) and c == s1[i]:\n            out.append('0')\n            i += 1\n        else:\n            out.append('1')\n            j += 1\n    print('YES')\n    print(''.join(out))\nelse:\n    print('NO')", "n = int(input())\ns = input()\nans = ''\ncolor1 = color2 = 'a'\nflag = True\nfor c in s:\n    if c >= color1:\n        ans += '0'\n        color1 = c\n    elif c >= color2:\n        ans += '1'\n        color2 = c\n    else:\n        flag = False\n        break\nif flag:\n    print('YES')\n    print(ans)\nelse:\n    print('NO')", "n = int(input())\ns = list(input())\nadj_list = [[] for i in range(n)]\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[j] < s[i]:\n            adj_list[i].append(j)\n            adj_list[j].append(i)\ncolor = [-1] * n\nseen = [False] * n\nfeasible = True\nfor i in range(n):\n    if not seen[i]:\n        l = [i]\n        color[i] = 0\n        while len(l) > 0:\n            cur = l.pop()\n            seen[cur] = True\n            for child in adj_list[cur]:\n                if color[child] == color[cur]:\n                    feasible = False\n                if not seen[child]:\n                    l.append(child)\n                    color[child] = 1 - color[cur]\nif feasible:\n    print('YES')\n    print(''.join(map(str, color)))\nelse:\n    print('NO')"]