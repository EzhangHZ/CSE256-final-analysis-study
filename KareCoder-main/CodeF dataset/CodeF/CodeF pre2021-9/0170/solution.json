["for i in [*open(0)][2::2]:\n    (*a,) = map(int, i.split())\n    c = 0\n    b = 'YES'\n    for (i, j) in enumerate(a):\n        c += j - i\n        if 0 > c:\n            b = 'NO'\n            break\n    print(b)", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        summ = 0\n        f = 0\n        for i in range(n):\n            summ += arr[i]\n            if summ < i * (i + 1) // 2:\n                f = 1\n                break\n        if f:\n            get_print('NO')\n        else:\n            get_print('YES')\nsolve()", "for i in [*open(0)][2::2]:\n    (*a,) = map(int, i.split())\n    c = 0\n    b = 'YES'\n    for (i, j) in enumerate(a):\n        c += j - i\n        if 0 > c:\n            b = 'NO'\n            break\n    print(b)", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "from functools import lru_cache\nfrom collections import defaultdict, deque, Counter\nimport sys\ninput = sys.stdin.readline\n\nclass Solution:\n\n    def shiftStacks(self, n, array):\n        num = 0\n        for i in range(n):\n            if array[i] > i:\n                num += array[i] - i\n            else:\n                num -= i - array[i]\n            if num < 0:\n                return 'NO'\n        if num >= 0:\n            return 'YES'\n        return 'NO'\nsolution = Solution()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(solution.shiftStacks(n, array))", "n = int(input())\nl1 = []\nl2 = []\nfor i in range(n):\n    l1.append(int(input()))\n    l2.append([int(x) for x in input().split()])\nfor i in range(n):\n    sum = 0\n    flag = True\n    for j in range(l1[i]):\n        sum = sum + l2[i][j]\n        if sum < j * (j + 1) // 2:\n            flag = False\n    if flag == True:\n        print('YES')\n    else:\n        print('NO')\nprint()", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef function(hs):\n    x = 0\n    for i in range(len(hs)):\n        if hs[i] > i:\n            x += hs[i] - i\n            hs[i] = i\n        else:\n            val = i - hs[i]\n            if x >= val:\n                x -= val\n            else:\n                print('NO')\n                return\n    print('YES')\n\ndef main():\n    t = inp()\n    for case in range(t):\n        n = inp()\n        hs = inlt()\n        function(hs)\nmain()", "res = []\nfor _ in range(int(input())):\n    n = int(input())\n    zoz = [int(x) for x in input().split()]\n    suma = 0\n    count = 0\n    for i in zoz:\n        suma += i\n        count += 1\n        if count * (count - 1) / 2 > suma:\n            res.append('NO')\n            break\n    else:\n        res.append('YES')\nfor i in res:\n    print(i)", "for z in [*open(0)][2::2]:\n    (s, a) = (0, 'YES')\n    for (i, j) in enumerate(z.split()):\n        s += int(j) - i\n        if s < 0:\n            a = 'NO'\n    print(a)", "for s in [*open(0)][2::2]:\n    i = t = q = f = 0\n    for x in s.split():\n        t += int(x)\n        q += i\n        f |= t < q\n        i += 1\n    print('YNEOS'[f::2])", "for s in [*open(0)][2::2]:\n    i = t = f = 0\n    for x in s.split():\n        t += int(x) - i\n        f |= t < 0\n        i += 1\n    print('YNEOS'[f::2])", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, h):\n    sum_ = h[0]\n    for pos in range(1, n):\n        sum_ += h[pos]\n        if sum_ < pos * (pos + 1) // 2:\n            print('NO')\n            return\n    print('YES')\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    h = list(map(int, input().split()))\n    solution(n, h)", "def answer2(ary):\n    s = sum(ary)\n    t_s = 0\n    n = len(ary)\n    if n % 2 == 0:\n        t_s = (n - 1) * (n / 2)\n    else:\n        t_s = (n - 1) * ((n - 1) / 2) + (n - 1) / 2\n    if s >= t_s:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef answer(ary):\n    s = 0\n    t_s = 0\n    n = len(ary)\n    for i in range(n):\n        t_s += i\n        s += ary[i]\n        if s < t_s:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    t = int(input())\n    n = [0] * t\n    stacks = [None] * t\n    for j in range(t):\n        n[j] = int(input())\n        stacks[j] = [int(i) for i in input().split()]\n    for j in range(t):\n        print(answer(stacks[j]))\nmain()", "for i in [*open(0)][2::2]:\n    (*a,) = map(int, i.split())\n    c = 0\n    b = 'YES'\n    for (i, j) in enumerate(a):\n        c += j - i\n        if 0 > c:\n            b = 'NO'\n            break\n    print(b)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    heights = list(map(int, sys.stdin.readline().split()))\n    value = heights[0]\n    for i in range(1, n):\n        if heights[i] + value >= i:\n            value = heights[i] + value - i\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "def solve(n, a):\n    if n == 1:\n        return 'YES'\n    for i in range(1, n):\n        a[i] += a[i - 1] - i + 1\n        if a[i] < i:\n            return 'NO'\n    return 'YES'\nt = int(input())\nret = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ret.append(solve(n, a))\nprint('\\n'.join(ret))", "testcasenum = int(input())\nresults = []\nfor i in range(testcasenum):\n    n = int(input())\n    heights = [int(x) for x in input().split()]\n    result = 'YES'\n    iterator = 0\n    credit = 0\n    for j in heights:\n        if j + credit >= iterator:\n            credit = credit + (j - iterator)\n            iterator = iterator + 1\n        else:\n            result = 'NO'\n            break\n    results.append(result)\nfor j in results:\n    print(j)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 2\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    n = int(t[0])\n    H = list(map(int, t[1].split()))\n    f = True\n    for i in range(n):\n        if H[i] - i < 0:\n            f = False\n            break\n        if i + 1 < n:\n            H[i + 1] += H[i] - i\n        H[i] = i\n    print('YES' if f else 'NO')", "import sys, heapq\nfrom collections import defaultdict, deque\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    test = inp()\n    for _ in range(test):\n        n = inp()\n        stacks = inlt()\n        for i in range(n - 1):\n            if stacks[i] >= i:\n                stacks[i + 1] += stacks[i] - i\n                stacks[i] = i\n        isIncreasing = True\n        for i in range(1, n):\n            if stacks[i] <= stacks[i - 1]:\n                isIncreasing = False\n                break\n        if isIncreasing:\n            print('YES')\n        else:\n            print('NO')\nmain()", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    now = 0\n    flag = 'YES'\n    for (i, x) in enumerate(a):\n        if x + now < i:\n            flag = 'NO'\n            break\n        else:\n            now += x - i\n    print(flag)", "import sys\ninput = sys.stdin.readline\n\ndef inpit():\n    return int(input())\n\ndef inplt():\n    return list(map(int, input().split()))\n\ndef inpstr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inpspint():\n    return map(int, input().split())\nt = inpit()\nfor i in range(t):\n    n = inpit()\n    l = inplt()\n    f = False\n    for i in range(n - 1):\n        if l[i] != 0:\n            l[i + 1] = l[i + 1] + l[i] - i\n            l[i] = l[i] - (l[i] - i)\n        if l[i + 1] <= l[i]:\n            print('NO')\n            f = True\n            break\n    if not f:\n        print('YES')", "answers = []\n\ndef solve(n, arr):\n    if n == 1:\n        answers.append('YES')\n        return\n    for i in range(n - 1):\n        if arr[i] < i:\n            answers.append('NO')\n            return\n        else:\n            rem = arr[i] - i\n            arr[i + 1] += rem\n            arr[i] = i\n    if arr[-1] < n - 1:\n        answers.append('NO')\n        return\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            answers.append('NO')\n            return\n    answers.append('YES')\nT = int(input())\nwhile T:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    solve(n, arr)\n    T -= 1\nfor ans in answers:\n    print(ans)", "from collections import defaultdict\nimport math\n\ndef solution():\n    t = int(input())\n    out = ''\n    while t > 0:\n        n = int(input())\n        h = list(map(int, input().split(' ')))\n        found = True\n        for i in range(0, n, 1):\n            temp = h[i] - i\n            h[i] = i\n            if temp >= 0 and i + 1 < n:\n                h[i + 1] = h[i + 1] + temp\n            if i + 1 < n and h[i] >= h[i + 1]:\n                found = False\n                break\n        if found:\n            out += 'YES\\n'\n        else:\n            out += 'NO\\n'\n        t -= 1\n    print(out)\nsolution()", "from sys import stdin\n\ndef main():\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        l = list(map(int, stdin.readline().split()))\n        if n != 1:\n            i = 0\n            band = True\n            while i + 1 < n and band:\n                c = l[i] - i\n                if c < 0:\n                    band = False\n                else:\n                    l[i + 1] += c\n                    l[i] = i\n                if l[i] >= l[i + 1]:\n                    band = False\n                i += 1\n            if band:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('YES')\nmain()", "import sys\nimport math\n\ndef fn(n, a):\n    for i in range(n - 1):\n        t = a[i]\n        a[i] = i\n        a[i + 1] = a[i + 1] + t - a[i]\n        if a[i] >= a[i + 1]:\n            print('NO')\n            return 0\n    print('YES')\n    return 1\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + l]\n    a = data[l + 2:l + 2 + n]\n    l = l + 1 + n\n    fn(n, a)", "import sys\nfrom collections import *\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline()\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = 0\n    ans = True\n    for i in range(n):\n        if a[i] > i:\n            summ += a[i] - i\n        elif a[i] < i:\n            diff = i - a[i]\n            summ -= diff\n        if summ < 0:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    sys.stdin.readline()\n    result = 'YES'\n    current = 0\n    a = map(int, sys.stdin.readline().strip().split())\n    for (key, val) in enumerate(a):\n        if val + current < key:\n            result = 'NO'\n            break\n        else:\n            current += val - key\n    print(result)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    array = get_array()\n    s = 0\n    f = 0\n    for i in range(0, n):\n        if array[i] >= i:\n            s += array[i] - i\n        elif s >= i - array[i]:\n            s = s - (i - array[i])\n        else:\n            f = 1\n        if f == 1:\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "result = []\ncases = int(input())\n\ndef judge(arr, n):\n    for i in range(2, n + 1):\n        if (i - 1) * i // 2 > sum(arr[0:i]):\n            return False\n    return True\nfor i in range(cases):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    if judge(arr, n):\n        result.append('YES')\n    else:\n        result.append('NO')\nfor _ in result:\n    print(_)", "import sys\n\ndef f2(n, h):\n    a = h.copy()\n    for i in range(n - 1):\n        a[i + 1] = a[i] - i + a[i + 1]\n        a[i] = i\n        if a[i + 1] <= a[i]:\n            return 0\n    return 1\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + l]\n    h = data[2 + l:l + 2 + n]\n    f = f2(n, h)\n    if f == 0:\n        print('NO')\n    if f != 0:\n        print('YES')\n    l = l + n + 1", "for i in [*open(0)][2::2]:\n    (*a,) = map(int, i.split())\n    c = 0\n    b = 'YES'\n    for (i, j) in enumerate(a):\n        c += j - i\n        if 0 > c:\n            b = 'NO'\n            break\n    print(b)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        h = list(map(int, input().split()))\n        h = [-1] + h\n        ans = True\n        for i in range(1, n):\n            (prev, now, nex) = (h[i - 1], h[i], h[i + 1])\n            h[i] = prev + 1\n            h[i + 1] = nex + (now - prev - 1)\n            if h[i] >= h[i + 1]:\n                ans = False\n                break\n        for i in range(1, n):\n            if h[i] <= h[i - 1]:\n                ans = False\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "from array import array\n\ndef solve(n, hs):\n    su = 0\n    for (i, h) in enumerate(hs):\n        su += h\n        if su < i * (i + 1) // 2:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        hs = list(map(int, input().split(' ')))\n        ans.append(solve(n, hs))\n    for a in ans:\n        print(a)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    x = int(input())\n    (*li,) = map(int, input().split())\n    (sum1, j) = (0, 0)\n    for i in range(x):\n        sum1 += li[i]\n        j += i\n        if sum1 < j:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys\nip = sys.stdin.readline\nfor _ in range(int(ip())):\n    n = int(ip())\n    a = [*map(int, ip().split())]\n    extra = 0\n    flag = True\n    for i in range(n):\n        if a[i] >= i:\n            extra += a[i] - i\n        else:\n            diff = i - a[i]\n            if diff <= extra:\n                extra -= diff\n            else:\n                flag = False\n                break\n    print('YNEOS'[not flag::2])", "from sys import stdin\n\ndef main():\n    cases = int(stdin.readline().strip())\n    while cases:\n        n = int(stdin.readline().strip())\n        v = [int(x) for x in stdin.readline().split()]\n        aux = 0\n        ok = True\n        for i in range(n):\n            if v[i] > i:\n                aux += v[i] - i\n                v[i] = i\n            elif v[i] + aux >= i:\n                aux -= i - v[i]\n                v[i] = i\n            else:\n                ok = False\n        if ok:\n            print('YES')\n        else:\n            print('NO')\n        cases -= 1\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    s = True\n    for i in range(len(h)):\n        if sum(h[:i + 1]) < i * (i + 1) // 2:\n            s = False\n    if s:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nans = []\nfor i in range(n):\n    a = int(input())\n    numlist = [int(num) for num in input().split()]\n    com = numlist[0]\n    jg = 1\n    for i in range(1, a):\n        com += numlist[i]\n        if com >= i:\n            com -= i\n        else:\n            ans.append('NO')\n            jg = 0\n            break\n    if jg == 1:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "def func(n, lis):\n    for i in range(n - 1):\n        c = lis[i] - i\n        if c < 0:\n            return 'NO'\n        lis[i] = lis[i] - c\n        lis[i + 1] = lis[i + 1] + c\n    for i in range(1, n):\n        if lis[i] <= lis[i - 1] or lis[i] < 0:\n            return 'NO'\n    return 'YES'\nx = int(input())\nlis = []\nfor i in range(x):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = func(n, f)\n    lis.append(ans)\nfor i in lis:\n    print(i)", "trails = int(input())\nanswer_list = []\nfor x in range(trails):\n    number = int(input())\n    numbers = input().split(' ')\n    possible = True\n    needed = 0\n    index = -1\n    have = 0\n    for s in numbers:\n        index += 1\n        needed += index\n        have += int(s)\n        if have < needed:\n            possible = False\n    if possible == True:\n        answer_list.append('YES')\n    else:\n        answer_list.append('NO')\nfor g in answer_list:\n    print(g)", "def solve(arr):\n    n = len(arr)\n    if sum(arr) < n * (n - 1) // 2:\n        return 'NO'\n    s = 0\n    for i in range(n):\n        s += arr[i] - i\n        if s < 0:\n            return 'NO'\n    return 'YES'\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    ans.append(solve(arr))\nfor i in ans:\n    print(i)", "from builtins import *\narithmetical_progression_sum = lambda arr: len(arr) * (arr[0] + arr[-1]) / 2\n\ndef f1(hs_i):\n    for j in range(2, len(hs_i) + 1):\n        if sum(hs_i[:j]) < arithmetical_progression_sum(range(j)):\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nns = []\nhs = []\nfor i in range(t):\n    ns.append(int(input()))\n    hs.append(list(map(int, input().split(' '))))\nlist(map(f1, hs))", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    s = 0\n    for i in range(len(l)):\n        s += l[i] - i\n        if s < 0:\n            break\n    print('YNEOS'[s < 0::2])", "from math import sqrt\nimport operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(n, h):\n    if n == 1:\n        return 'YES'\n    add_blocks = 0\n    for i in range(n):\n        if h[i] + add_blocks >= i:\n            add_blocks += h[i] - i\n            continue\n        else:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    samples = read_one_int()\n    for _ in range(samples):\n        n = read_one_int()\n        h = read_list_of_ints()\n        res = check_seq(n, h)\n        print(res)\nmain()", "import sys\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nfor i in range(int(input())):\n    n = int(sys.stdin.readline().strip())\n    ar = get_list()\n    pre_sum = 0\n    for j in range(n):\n        pre_sum += ar[j]\n        if (j + 1) * (j - 0) // 2 > pre_sum:\n            print('NO')\n            break\n        elif j == n - 1:\n            print('YES')", "for s in [*open(0)][2::2]:\n    S = v = i = 0\n    for n in map(int, s.split()):\n        S += n\n        i += 1\n        v += 2 * S < i * i - i\n    print('YNEOS'[v > 0::2])", "test = int(input())\nresult = []\n\ndef Multiple_Plus(x):\n    s = 0\n    for i in range(1, x + 1):\n        s += i\n    return s\nfor i in range(test):\n    plus = [0]\n    rec = False\n    n = int(input())\n    block = input().split()\n    for j in range(n):\n        block[j] = int(block[j])\n    for j in range(n):\n        total = plus[j] + block[j]\n        plus.append(total)\n        if total < Multiple_Plus(j):\n            rec = True\n            result.append('NO')\n            break\n    if rec == False:\n        result.append('YES')\nfor i in range(test):\n    print(result[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    elif n == 2:\n        if a[0] == 0 and a[1] == 0:\n            print('NO')\n            continue\n        print('YES')\n    else:\n        sum = 0\n        s = 0\n        ans = 'YES'\n        for i in range(n):\n            sum += a[i]\n            s += i\n            if sum < s:\n                ans = 'NO'\n                break\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    temp = a[0]\n    flag = True\n    for i in range(1, n):\n        if a[i] + temp < i:\n            flag = False\n            break\n        else:\n            temp = temp + a[i] - i\n    print('YES') if flag else print('NO')", "T = int(input())\nN = []\nBlocks = []\nfor i in range(T):\n    n = int(input())\n    blocks = list(map(int, input().split(' ')))\n    N.append(n)\n    Blocks.append(blocks)\nfor i in range(T):\n    n = N[i]\n    blocks = Blocks[i]\n    req_sum = n * (n - 1) / 2\n    block_sum = 0\n    im_sum = 0\n    flag = 0\n    for j in range(len(blocks)):\n        block_sum = block_sum + blocks[j]\n        im_sum = im_sum + j\n        if block_sum < im_sum:\n            break\n        if block_sum >= req_sum:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "from typing import List\n\ndef valid(values: List[int], extra: int=0) -> bool:\n    for index in range(len(values)):\n        extra = extra + values[index]\n        if extra < index:\n            return False\n        extra = extra - index\n    return True\n\ndef read_input(filename: str=None) -> None:\n    from sys import stdin\n    stdin = open(filename) if filename else stdin\n    cases = int(stdin.readline())\n    while cases:\n        cases = cases - 1\n        _ = stdin.readline()\n        values = list(map(int, stdin.readline().split()))\n        print('YES') if valid(values) else print('NO')\n\ndef main():\n    read_input()\nmain()", "def solve(n, arr):\n    t = arr[0]\n    for i in range(1, n):\n        if arr[i] >= i:\n            t += arr[i] - i\n        elif arr[i] + t >= i:\n            t -= i - arr[i]\n        else:\n            return False\n    return t >= 0\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if solve(n, arr):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport string\nimport random\nimport sys\nfrom random import randrange\nfrom collections import deque\nfrom collections import defaultdict\nfrom bisect import bisect, bisect_right, bisect_left\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef mdata():\n    return list(map(int, data().split()))\n\ndef outl(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\n\ndef out(var):\n    sys.stdout.write(str(var) + '\\n')\nfor _ in range(int(input())):\n    n = int(data())\n    a = mdata()\n    sm = sum(a)\n    rqsm = n * (n - 1) // 2\n    if sm >= rqsm:\n        for i in range(n - 1):\n            if a[i] >= i:\n                dff = a[i] - i\n                a[i] = i\n                a[i + 1] += dff\n        poss = True\n        for i in range(n - 1):\n            if a[i] >= a[i + 1]:\n                poss = False\n                break\n        if poss:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "q = int(input())\nfor _ in range(q):\n    length = int(input())\n    alist = [*map(int, input().split())]\n    asum = 0\n    res = 'YES'\n    for i in range(length):\n        asum += alist[i] - i\n        if asum < 0:\n            res = 'NO'\n            break\n    print(res)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    x = 0\n    verdict = 'YES'\n    nums = input().split()\n    for i in range(m):\n        nums[i] = int(nums[i])\n    for i in range(m):\n        x += nums[i] - i\n        if x < 0:\n            verdict = 'NO'\n    print(verdict)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = 0\n    x = [int(a) for a in input().split()]\n    need = 0\n    sum = 0\n    for j in range(0, n):\n        need = need + j\n        sum = sum + x[j]\n        if sum < need:\n            c += 1\n            print('NO')\n            break\n    if c == 0:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    d = 0\n    for (i, x) in enumerate(map(int, input().split())):\n        if x + d < i:\n            print('NO')\n            break\n        d = x + d - i\n    else:\n        print('YES')", "for j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = 'YES'\n    s = 0\n    for i in range(0, n):\n        s += a[i]\n        if s < i * (i + 1) // 2:\n            t = 'NO'\n    print(t)", "for _ in range(int(input())):\n    n = int(input())\n    need = 0\n    have = 0\n    enough = True\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        need += i\n        have += arr[i]\n        if need > have:\n            enough = False\n    print('YES' if enough else 'NO')", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = input().split()\n    c = []\n    for j in a:\n        c.append(int(j))\n    bl = True\n    for k in range(0, len(c) - 1):\n        o = c[k]\n        c[k] = k\n        c[k + 1] = o - k + c[k + 1]\n        if c[k + 1] < k + 1:\n            bl = False\n            break\n    if bl:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n - 1):\n        if l[i] >= i:\n            c = l[i]\n            l[i] = i\n            l[i + 1] = l[i + 1] + c - i\n        else:\n            print('NO')\n            break\n    else:\n        if l[n - 1] < n - 1:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    can_increase = 'YES'\n    left = 0\n    for i in range(n):\n        left += heights[i] - i\n        if left < 0:\n            can_increase = 'NO'\n    print(can_increase)", "t = int(input(''))\nfor test in range(t):\n    n = int(input(''))\n    blck = input('')\n    blck_lst = [int(i) for i in blck.split()]\n    if n == 1:\n        print('YES')\n    else:\n        blck_sum = sum(blck_lst)\n        min_blck = n * (n + 1) / 2 - n\n        if blck_sum >= min_blck:\n            flag = True\n            for i in range(len(blck_lst) - 1):\n                if blck_lst[i] >= i:\n                    if blck_lst[i] > i:\n                        blck_lst[i + 1] += blck_lst[i] - i\n                        blck_lst[i] = i\n                else:\n                    flag = False\n                    break\n            if flag:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    t = 0\n    for (i, x) in enumerate(map(int, input().split())):\n        t += x - i\n        if t < 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\nglobal_ans = []\n\ndef p(a):\n    global_ans.append(a)\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    d = 0\n    k = 0\n    for i in a:\n        v = d + i\n        if v >= k:\n            d = v - k\n            k += 1\n        else:\n            p('NO')\n            return\n    p('YES')\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ex = 0\n    cur = 0\n    okay = True\n    for i in range(n):\n        if lst[i] >= ex:\n            cur += lst[i] - ex\n        elif lst[i] <= ex:\n            cur += lst[i]\n            if cur >= ex:\n                cur = cur - ex\n            else:\n                okay = False\n                break\n        ex += 1\n    if okay == True:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    s = 0\n    for i in range(n):\n        s += h[i]\n        if s < i * (i + 1) // 2:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ans = 'YES'\n    need = 0\n    have = 0\n    for i in range(n):\n        need += i\n        have += ls[i]\n        if have < need:\n            ans = 'NO'\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 1\n    for i in range(n):\n        if sum(a[0:i + 1]) < i * (i + 1) // 2:\n            ans = -1\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    need = 0\n    have = 0\n    ans = True\n    a = [int(i) for i in input().split()]\n    for j in range(n):\n        need += j\n        have += a[j]\n        if have < need:\n            ans = False\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    c = 0\n    sum = 0\n    n = int(input())\n    a = list(map(int, input().split()))\n    for j in range(n):\n        temp = j * (j + 1) // 2\n        sum += a[j]\n        if sum < temp:\n            c = 1\n            break\n    if sum >= temp and c != 1:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(case())\n\ndef case():\n    n = int(input())\n    h = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if sum(h[:i]) < (i - 1) * i / 2:\n            return 'NO'\n    return 'YES'\nmain()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stock = 0\n    f = 0\n    for i in range(n):\n        stock += l[i] - i\n        if stock < 0:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "t = input()\nt = int(t)\nwhile t > 0:\n    grzes = 0\n    n = input()\n    n = int(n)\n    h = input().split()\n    for i in range(n):\n        h[i] = int(h[i])\n        if h[i] > i:\n            grzes += h[i] - i\n            h[i] = i\n        elif grzes >= i - h[i]:\n            grzes += h[i]\n            grzes -= i\n            h[i] = i\n        else:\n            print('NO')\n            break\n        if i == n - 1:\n            print('YES')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    flag = True\n    for i in range(n - 1):\n        if arr[i] >= i:\n            t = arr[i] - i\n            arr[i] -= t\n            arr[i + 1] += t\n        else:\n            flag = False\n    if arr[-1] < n - 1:\n        flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    czy = True\n    for i in range(n - 1):\n        if h[i] >= i:\n            h[i + 1] += h[i] - i\n        else:\n            czy = False\n            break\n    if h[n - 1] < n - 1:\n        czy = False\n    if czy:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    h = [int(k) for k in input().split()]\n    if n == 1:\n        print('YES')\n    else:\n        for i in range(1, n):\n            h[i] += h[i - 1] - i + 1\n        for i in range(1, n):\n            if h[i] <= i - 1:\n                print('NO')\n                break\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    s = 0\n    flg = True\n    for i in range(n):\n        s += h[i]\n        if s < i * (i + 1) // 2:\n            flg = False\n            break\n    print('YES' if flg else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    minm = 0\n    ans = True\n    for i in range(n - 1):\n        h[i + 1] += h[i] - minm\n        h[i] = minm\n        minm += 1\n        if h[i + 1] <= h[i]:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = 0\n    found = False\n    for i in range(n):\n        if s + l[i] < i:\n            print('NO')\n            found = True\n            break\n        else:\n            s = s + l[i] - i\n    if not found:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    extra = 0\n    flag = True\n    for i in range(n):\n        if arr[i] <= i:\n            if arr[i] + extra < i:\n                flag = False\n                break\n            else:\n                extra -= i - arr[i]\n        else:\n            extra += arr[i] - i\n    print('YES' if flag else 'NO')", "remained_test_cases = int(input())\nwhile remained_test_cases > 0:\n    N = int(input())\n    heights = list(map(int, input().split()))\n    sum1 = 0\n    sum_of_i = 0\n    flag = True\n    for i in range(N):\n        sum1 = sum1 + heights[i]\n        sum_of_i = sum_of_i + i\n        if sum1 < sum_of_i:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    remained_test_cases = remained_test_cases - 1", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        a = l[0]\n        l[0] = 0\n        flag = 0\n        for i in range(1, n):\n            a += l[i]\n            if a < i:\n                flag = 1\n                break\n            else:\n                l[i] = i\n                a -= i\n        if flag:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    heights = map(int, input().split())\n    moving_bls_am = 0\n    for (i, h) in enumerate(heights):\n        moving_bls_am += h\n        if moving_bls_am < i:\n            print('NO')\n            break\n        moving_bls_am -= i\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1):\n        if a[i] - i > 0:\n            a[i + 1] += a[i] - i\n            a[i] = i\n    ans = True\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            ans = False\n    if ans:\n        print('YES')\n    else:\n        print('NO')"]