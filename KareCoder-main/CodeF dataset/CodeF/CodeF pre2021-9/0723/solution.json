["import sys\ninput = sys.stdin.readline\n\ndef solve(s, x, y):\n    c0 = 0\n    c1 = 0\n    r = 0\n    for i in s:\n        if i == '0':\n            c0 += 1\n        else:\n            r += c0 * x\n            c1 += 1\n    z0 = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '0':\n            z0 += 1\n        else:\n            r += z0 * y\n    ans = r\n    l0 = 0\n    l1 = 0\n    for i in s:\n        if i == '?':\n            r -= l0 * x + c0 * y\n            c1 -= 1\n            r += l1 * y + c1 * x\n            l0 += 1\n        elif i == '0':\n            l0 += 1\n            c0 -= 1\n        else:\n            l1 += 1\n            c1 -= 1\n        ans = min(ans, r)\n    return ans\ns = input().strip()\n(x, y) = map(int, input().split())\nif x <= y:\n    print(solve(s, x, y))\nelse:\n    s1 = s.replace('0', 'z')\n    s1 = s1.replace('1', '0')\n    s1 = s1.replace('z', '1')\n    print(solve(s1, y, x))", "s = list(input())\n(y, k) = map(lambda x: int(x), input().split())\n\ndef Kurisu(v, y_01, x_10):\n    c_x = [0] * len(v)\n    (one, two) = (0, 0)\n    q = 0\n    for i in range(len(v)):\n        i = len(v) - i - 1\n        c_x[i] = [one, two]\n        if v[i] == '1' or (y_01 <= x_10 and v[i] == '?'):\n            one += 1\n            q += c_x[i][1] * x_10\n        else:\n            two += 1\n            q += c_x[i][0] * y_01\n    qm = q\n    (one, two) = (0, 0)\n    for i in range(len(v)):\n        if v[i] == '1':\n            one += 1\n        elif v[i] == '0':\n            two += 1\n        else:\n            if y_01 > x_10:\n                q -= one * x_10 + c_x[i][0] * y_01 - two * y_01 - c_x[i][1] * x_10\n                one += 1\n            else:\n                q -= -+one * x_10 - c_x[i][0] * y_01 + two * y_01 + c_x[i][1] * x_10\n                two += 1\n            if qm > q:\n                qm = q\n    print(qm)\nKurisu(s, y, k)", "s = input()\n(x, y) = map(int, input().split())\nif x > y:\n    (x, y) = (y, x)\n    s = s.replace('1', '#').replace('0', '1').replace('#', '0')\nassert x <= y\nz = y - x\ns_if_all_ones = s.replace('?', '1')\nones_before = 0\nzeros_before = 0\nresult = 0\nfor char in s_if_all_ones:\n    if char == '0':\n        result += ones_before * y\n        zeros_before += 1\n    else:\n        assert char == '1'\n        result += zeros_before * x\n        ones_before += 1\nbest_result = result\nzeros_n = zeros_before\nones_n = ones_before\nzeros_before = 0\nones_before = 0\nfor char in s:\n    if char == '0':\n        zeros_before += 1\n    elif char == '1':\n        ones_before += 1\n    else:\n        assert char == '?'\n        ones_n -= 1\n        result += (ones_before - (zeros_n - zeros_before)) * z + (ones_n - zeros_n) * x\n        if best_result > result:\n            best_result = result\n        zeros_n += 1\n        zeros_before += 1\nprint(best_result)", "s = input()\n(x, y) = map(int, input().split())\nif x > y:\n    (x, y) = (y, x)\n    s = s.replace('1', '#').replace('0', '1').replace('#', '0')\nassert x <= y\nz = y - x\ns_if_all_ones = s.replace('?', '1')\nones_before = 0\nzeros_before = 0\nresult = 0\nfor char in s_if_all_ones:\n    if char == '0':\n        result += ones_before * y\n        zeros_before += 1\n    else:\n        assert char == '1'\n        result += zeros_before * x\n        ones_before += 1\nbest_result = result\nzeros_n = zeros_before\nones_n = ones_before\nzeros_before = 0\nones_before = 0\nfor char in s:\n    if char == '0':\n        zeros_before += 1\n    elif char == '1':\n        ones_before += 1\n    else:\n        assert char == '?'\n        ones_n -= 1\n        result += (ones_before - (zeros_n - zeros_before)) * z + (ones_n - zeros_n) * x\n        if best_result > result:\n            best_result = result\n        zeros_n += 1\n        zeros_before += 1\nprint(best_result)", "def read_ints():\n    return map(int, input().split())\ns = input()\n(x, y) = read_ints()\nif x > y:\n    (x, y) = (y, x)\n    s = s.replace('1', '#').replace('0', '1').replace('#', '0')\nassert x <= y\nz = y - x\ns_if_all_ones = s.replace('?', '1')\nones_before = 0\nzeros_before = 0\nresult = 0\nfor char in s_if_all_ones:\n    if char == '0':\n        result += ones_before * y\n        zeros_before += 1\n    else:\n        assert char == '1'\n        result += zeros_before * x\n        ones_before += 1\nbest_result = result\nzeros_n = zeros_before\nones_n = ones_before\nzeros_before = 0\nones_before = 0\nfor char in s:\n    if char == '0':\n        zeros_before += 1\n    elif char == '1':\n        ones_before += 1\n    else:\n        assert char == '?'\n        ones_n -= 1\n        result += (ones_before - (zeros_n - zeros_before)) * z + (ones_n - zeros_n) * x\n        if best_result > result:\n            best_result = result\n        zeros_n += 1\n        zeros_before += 1\nprint(best_result)", "s = input()\n(x, y) = map(int, input().split())\nif x > y:\n    (x, y) = (y, x)\n    s = s.replace('1', '#').replace('0', '1').replace('#', '0')\nassert x <= y\nz = y - x\ns_if_all_ones = s.replace('?', '1')\nones_before = 0\nzeros_before = 0\nresult = 0\nfor char in s_if_all_ones:\n    if char == '0':\n        result += ones_before * y\n        zeros_before += 1\n    else:\n        assert char == '1'\n        result += zeros_before * x\n        ones_before += 1\nbest_result = result\nzeros_n = zeros_before\nones_n = ones_before\nzeros_before = 0\nones_before = 0\nfor char in s:\n    if char == '0':\n        zeros_before += 1\n    elif char == '1':\n        ones_before += 1\n    else:\n        assert char == '?'\n        ones_n -= 1\n        result += (ones_before - (zeros_n - zeros_before)) * z + (ones_n - zeros_n) * x\n        if best_result > result:\n            best_result = result\n        zeros_n += 1\n        zeros_before += 1\nprint(best_result)", "s = list(input())\n(y, k) = map(lambda x: int(x), input().split())\n\ndef Kurisu(v, y_01, x_10):\n    c_x = [0] * len(v)\n    (one, two) = (0, 0)\n    q = 0\n    for i in range(len(v)):\n        i = len(v) - i - 1\n        c_x[i] = [one, two]\n        if v[i] == '1' or (y_01 <= x_10 and v[i] == '?'):\n            one += 1\n            q += c_x[i][1] * x_10\n        else:\n            two += 1\n            q += c_x[i][0] * y_01\n    qm = q\n    (one, two) = (0, 0)\n    for i in range(len(v)):\n        if v[i] == '1':\n            one += 1\n        elif v[i] == '0':\n            two += 1\n        else:\n            if y_01 > x_10:\n                q -= one * x_10 + c_x[i][0] * y_01 - two * y_01 - c_x[i][1] * x_10\n                one += 1\n            else:\n                q -= -+one * x_10 - c_x[i][0] * y_01 + two * y_01 + c_x[i][1] * x_10\n                two += 1\n            if qm > q:\n                qm = q\n    print(qm)\nKurisu(s, y, k)", "def Kurisu_delta(v, y_01, x_10):\n    c_x = [0] * len(v)\n    one = 0\n    two = 0\n    q = 0\n    for i in range(len(v)):\n        i = len(v) - i - 1\n        c_x[i] = [one, two]\n        if v[i] == '1':\n            one += 1\n            q += c_x[i][1] * x_10\n        elif v[i] == '0':\n            two += 1\n            q += c_x[i][0] * y_01\n        elif y_01 <= x_10:\n            one += 1\n            q += c_x[i][1] * x_10\n        else:\n            two += 1\n            q += c_x[i][0] * y_01\n    one = 0\n    two = 0\n    d_one = 0\n    d_two = 0\n    qm = q\n    for i in range(len(v)):\n        if v[i] == '1':\n            one += 1\n        elif v[i] == '0':\n            two += 1\n        else:\n            if qm > q:\n                qm = q\n            if y_01 > x_10:\n                q -= (d_one + one) * x_10 + c_x[i][0] * y_01 - (d_two + two) * y_01 - c_x[i][1] * x_10\n                one += 1\n            else:\n                q -= -(d_one + one) * x_10 - c_x[i][0] * y_01 + (d_two + two) * y_01 + c_x[i][1] * x_10\n                two += 1\n            if qm > q:\n                qm = q\n    print(qm)\ns = list(input())\n(y, k) = map(lambda x: int(x), input().split())\nKurisu_delta(s, y, k)", "def Kurisu_delta(v, y_01, x_10):\n    c_x = [0] * len(v)\n    (one, two) = (0, 0)\n    q = 0\n    for i in range(len(v)):\n        i = len(v) - i - 1\n        c_x[i] = [one, two]\n        if v[i] == '1':\n            one += 1\n            q += c_x[i][1] * x_10\n        elif v[i] == '0':\n            two += 1\n            q += c_x[i][0] * y_01\n        elif y_01 <= x_10:\n            one += 1\n            q += c_x[i][1] * x_10\n        else:\n            two += 1\n            q += c_x[i][0] * y_01\n    qm = q\n    (one, two) = (0, 0)\n    for i in range(len(v)):\n        if v[i] == '1':\n            one += 1\n        elif v[i] == '0':\n            two += 1\n        else:\n            if y_01 > x_10:\n                q -= one * x_10 + c_x[i][0] * y_01 - two * y_01 - c_x[i][1] * x_10\n                one += 1\n            else:\n                q -= -+one * x_10 - c_x[i][0] * y_01 + two * y_01 + c_x[i][1] * x_10\n                two += 1\n            if qm > q:\n                qm = q\n    print(qm)\ns = list(input())\n(y, k) = map(lambda x: int(x), input().split())\nKurisu_delta(s, y, k)"]