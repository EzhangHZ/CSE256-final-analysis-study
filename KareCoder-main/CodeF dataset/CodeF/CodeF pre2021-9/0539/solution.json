["tests = int(input())\nfor _ in range(tests):\n    lines = int(input())\n    res = []\n    for x in range(lines):\n        num = input()\n        if int(num) == 1:\n            res.append(num)\n        else:\n            while int(res[-1]) != int(num) - 1:\n                del res[-1]\n            res[-1] = num\n        print('.'.join(res))", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(int(input()))\n    ans = ['1']\n    temp = ['1']\n    for i in range(1, n):\n        if l[i] == 1:\n            x = ans[-1] + '.' + str(1)\n            ans.append(x)\n            temp.append(x)\n        elif l[i] == l[i - 1] + 1:\n            tt = ans[-1].split('.')\n            tt.pop(-1)\n            tt.append(str(l[i]))\n            x = '.'.join(tt)\n            ans.append(x)\n            temp.append(x)\n        else:\n            while True:\n                if int(temp[-1].split('.')[-1]) == l[i] - 1:\n                    break\n                else:\n                    x = len(temp[-1].split('.'))\n                    while len(temp[-1].split('.')) == x:\n                        temp.pop(-1)\n            tt = temp[-1].split('.')\n            tt.pop(-1)\n            tt.append(str(l[i]))\n            x = '.'.join(tt)\n            ans.append(x)\n            temp.append(x)\n    for i in ans:\n        print(i)", "def findr(a, i, cur):\n    for k in range(cur, -1, -1):\n        if a[k] == i:\n            return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    b = [[]]\n    urov_last_num = [0 for __ in range(1000)]\n    urov_strings = ['']\n    for k in range(n):\n        a.append(int(input()))\n    print('1')\n    urov = 0\n    urov_last_num[0] = 1\n    for k in range(1, n):\n        if a[k] - a[k - 1] == 1:\n            urov_last_num[urov] += 1\n        elif a[k] == 1:\n            urov_strings.append('')\n            urov_strings[urov + 1] = f'{urov_strings[urov]}{urov_last_num[urov]}.'\n            urov += 1\n            urov_last_num[urov] = 1\n        else:\n            urov = findr(urov_last_num, a[k] - 1, urov - 1)\n            urov_last_num[urov] += 1\n        print(f'{urov_strings[urov]}{urov_last_num[urov]}')", "for _ in range(int(input())):\n    ondszgv = 52\n    n = int(input())\n    adsd = 52645\n    input()\n    ddf = 21\n    a = ['1']\n    z52 = 56\n    print('1')\n    fv = 85\n    for __ in range(n - 1):\n        yh = 215\n        t = int(input())\n        th = 85\n        if t == 1:\n            ff = 98\n            a.append('1')\n        else:\n            while int(a[-1]) + 1 != t:\n                jk = 527\n                a.pop()\n            a[-1] = str(int(a[-1]) + 1)\n        hh = 87\n        print('.'.join(a))", "def solve(n):\n    prev = 1\n    s = []\n    for i in range(n):\n        curr = int(input())\n        if i == 0:\n            print(curr)\n            s.append(str(curr))\n            continue\n        elif curr == prev + 1:\n            s[-1] = str(curr)\n            print('.'.join(s))\n            prev = curr\n            continue\n        elif curr == 1:\n            s.append(str(curr))\n            print('.'.join(s))\n            prev = curr\n            continue\n        else:\n            for i in range(len(s)):\n                if int(s[len(s) - 1 - i]) + 1 == curr:\n                    del s[len(s) - 1 - i:len(s)]\n                    s.append(str(curr))\n                    prev = curr\n                    print('.'.join(s))\n                    break\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    solve(n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = ['', '1']\n    a = int(input())\n    print(1)\n    for __ in range(n - 1):\n        a = int(input())\n        if a == 1:\n            print(arr[-1] + '.1')\n            arr.append(arr[-1] + '.1')\n        elif int(arr[-1][-1]) + 1 == a:\n            arr[-1] = arr[-1][:arr[-1].rfind('.') + 1] + str(a)\n            print(arr[-1])\n        else:\n            while int(arr[-1][arr[-1].rfind('.') + 1:]) != a - 1:\n                arr.pop()\n            print(arr[-1][:arr[-1].rfind('.') + 1] + str(a))\n            arr[-1] = arr[-1][:arr[-1].rfind('.') + 1] + str(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = ['', '1']\n    a = int(input())\n    print(1)\n    for __ in range(n - 1):\n        a = int(input())\n        if a == 1:\n            print(arr[-1] + '.1')\n            arr.append(arr[-1] + '.1')\n        elif int(arr[-1][-1]) + 1 == a:\n            arr[-1] = arr[-1][:arr[-1].rfind('.') + 1] + str(a)\n            print(arr[-1])\n        else:\n            while int(arr[-1][arr[-1].rfind('.') + 1:]) != a - 1:\n                arr.pop()\n            print(arr[-1][:arr[-1].rfind('.') + 1] + str(a))\n            arr[-1] = arr[-1][:arr[-1].rfind('.') + 1] + str(a)", "import sys\n\ndef Ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef Strs():\n    return map(str, sys.stdin.readline().strip().split())\n\ndef Array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Str():\n    return sys.stdin.readline().strip()\n\ndef Int():\n    return int(sys.stdin.readline().strip())\n\ndef MOD():\n    return 1000000007\nt = Int()\nfor i in range(t):\n    n = Int()\n    a = []\n    for i in range(n):\n        a.append(Int())\n    stack = []\n    depth = 0\n    for i in range(n):\n        if not stack:\n            stack.append((str(a[i]), i, depth + 1))\n        elif a[i] == 1:\n            (sno, index, d) = stack[-1]\n            stack.append((sno + '.1', i, d + 1))\n        elif a[i] == 1 + a[stack[-1][1]]:\n            (sno, index, d) = stack[-1]\n            sno = sno.split('.')\n            sno[-1] = str(a[i])\n            stack[-1] = ('.'.join(sno), i, d)\n        else:\n            d = stack[-1][2]\n            while stack and a[stack[-1][1]] != a[i] - 1:\n                stack.pop()\n            (sno, index, d1) = stack[-1]\n            sno = sno.split('.')\n            sno[-1] = str(a[i])\n            stack[-1] = ('.'.join(sno), i, d1)\n        print(stack[-1][0])", "import sys\nimport math\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    ans = ['1.']\n    trash = input()\n    for i in range(n - 1):\n        num = int(input())\n        temp = ans[-1]\n        temp = temp.replace(str(num - 1), '?')\n        if num == 1:\n            ans.append(ans[-1] + str(1) + '.')\n            continue\n        for l in range(len(temp)):\n            if temp[l] == '?':\n                ind = l\n        val = temp[:ind] + str(num) + '.'\n        val = val.replace('?', str(num - 1))\n        ans.append(val)\n    for k in ans:\n        print(k[:-1])", "for _ in range(int(input())):\n    s = ''\n    lst = []\n    for _ in range(int(input())):\n        n = input()\n        if n == '1':\n            lst.insert(0, n)\n        else:\n            f = lst.index(str(int(n) - 1))\n            lst = lst[f:]\n            lst[0] = n\n        print('.'.join(lst[::-1]))", "for _ in range(int(input())):\n    N = int(input())\n    S = []\n    for _ in range(N):\n        x = int(input())\n        if x == 1:\n            S.append(x)\n        else:\n            while S and S[-1] != x - 1:\n                S.pop()\n            assert S\n            S[-1] = x\n        print('.'.join(map(str, S)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(int(input()))\n    stack = []\n    for i in range(n):\n        if arr[i] == 1:\n            stack.append(arr[i])\n            print('.'.join(map(str, stack)))\n            continue\n        while stack and stack[-1] != arr[i] - 1:\n            stack.pop()\n        try:\n            stack.pop()\n        except:\n            pass\n        stack.append(arr[i])\n        print('.'.join(map(str, stack)))", "for _ in range(int(input())):\n    x = int(input())\n    zz = [int(input()) for _ in range(x)]\n    stack = []\n    for k in zz:\n        if k == 1:\n            stack.append(1)\n        else:\n            while k != stack[-1] + 1:\n                stack.pop()\n            stack[-1] += 1\n        print('.'.join(map(str, stack)))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s = []\n    for i in range(n):\n        v = int(input())\n        if v == 1:\n            s.append(1)\n        else:\n            while s[-1] + 1 != v:\n                s.pop()\n            s[-1] = v\n        print('.'.join(map(str, s)))\nfor i in range(int(input())):\n    solve()", "from collections import deque\n\ndef compression(n, A):\n    L = deque()\n    for a in A:\n        if a == 1:\n            L.append(a)\n        else:\n            b = a - 1\n            while L[-1] != b:\n                L.pop()\n            L[-1] = a\n        yield '.'.join(map(str, L))\n\ndef main():\n    t = readint()\n    L = []\n    for _ in range(t):\n        n = readint()\n        A = [readint() for _ in range(n)]\n        L.extend(compression(n, A))\n    print('\\n'.join(L))\nimport sys\n\ndef readint():\n    return int(input())\n\ndef readinti():\n    return map(int, input().split())\n\ndef readintl():\n    return list(readinti())\n\ndef readintll(k):\n    return [readintl() for _ in range(k)]\n\ndef log(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = []\n    for _ in range(n):\n        a = int(input())\n        if not ans:\n            ans.append(a)\n        elif a == 1:\n            ans.append(a)\n        else:\n            while not ans[-1] + 1 == a:\n                ans.pop()\n            ans[-1] += 1\n        print('.'.join(map(str, ans)))", "t = int(input())\nwhile int(t) > 0:\n    n = int(input())\n    v = []\n    while n > 0:\n        char = int(input())\n        if len(v) == 0 or char == 1:\n            v.append(char)\n        else:\n            for i in range(len(v) - 1, -1, -1):\n                if char == v[i] + 1:\n                    v[i] = char\n                    break\n                v.pop()\n        print('.'.join(map(str, v)))\n        n = n - 1\n    t = t - 1", "for _ in range(int(input())):\n    N = int(input())\n    S = []\n    for _ in range(N):\n        x = int(input())\n        if x == 1:\n            S.append(x)\n        else:\n            while S and S[-1] != x - 1:\n                S.pop()\n            assert S\n            S[-1] = x\n        print('.'.join(map(str, S)))", "t = int(input())\n\ndef print_ol():\n    n = int(input())\n    levels = []\n    for i in range(n):\n        x = int(input())\n        if x == 1:\n            levels.append(1)\n        else:\n            while levels[-1] + 1 != x:\n                levels.pop()\n            levels[-1] += 1\n        print('.'.join(list(map(str, levels))))\nfor j in range(t):\n    print_ol()", "def f(a):\n    prev = a[0]\n    st = [a[0]]\n    print(a[0])\n    for i in a[1:]:\n        if i == 1:\n            st.append(i)\n            print('.'.join(list(map(str, st))))\n            continue\n        else:\n            t = None\n            for ind in range(0, len(st)):\n                if i - st[ind] == 1:\n                    t = ind\n            st = st[:t] + [i]\n            print('.'.join(list(map(str, st))))\nfor i in range(int(input())):\n    a = []\n    for n in range(int(input())):\n        a.append(int(input()))\n    f(a)", "for _ in range(int(input())):\n    N = int(input())\n    S = []\n    for _ in range(N):\n        x = int(input())\n        if x == 1:\n            S.append(x)\n        else:\n            while S and S[-1] != x - 1:\n                S.pop()\n            assert S\n            S[-1] = x\n        print('.'.join(map(str, S)))", "import os\nimport sys\nfrom io import BytesIO, IOBase\nimport math\nfrom collections import Counter\n\ndef a(n, x):\n    l = 0\n    q = []\n    for i in x:\n        if i == 1:\n            l += 1\n            q.append(1)\n        else:\n            for j in range(len(q) - 1, -1, -1):\n                if q[j] + 1 == i:\n                    q = q[:j + 1]\n                    q[-1] = i\n                    break\n        print('.'.join(map(str, q)))\n\ndef main():\n    n = int(parse_input())\n    for _ in range(n):\n        n = int(parse_input())\n        x = []\n        for i in range(n):\n            x.append(int(parse_input()))\n        a(n, x)\nparse_input = lambda : sys.stdin.readline().rstrip('\\r\\n')\nmain()", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    stk = deque()\n    a = int(input())\n    assert a == 1\n    stk.append(a)\n    print('.'.join(map(str, stk)))\n    for i in range(1, n):\n        a = int(input())\n        if a == 1:\n            stk.append(a)\n        else:\n            while a != stk[-1] + 1:\n                stk.pop()\n            stk[-1] += 1\n        print('.'.join(map(str, stk)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = int(input())\n    last = [a]\n    print(1)\n    for i in range(1, n):\n        a = int(input())\n        flag = False\n        if a == 1:\n            last.append(1)\n            flag = True\n        while not flag:\n            if a - 1 == last[-1]:\n                last[-1] += 1\n                flag = True\n            else:\n                last = last[:-1]\n        print('.'.join(list(map(str, last))))", "from sys import stdin\nT = int(stdin.readline())\nfor t in range(T):\n    n = int(stdin.readline())\n    (S, R) = ([], [])\n    for i in range(n):\n        a = int(stdin.readline())\n        if a == 1:\n            S.append(a)\n        else:\n            while S[-1] != a - 1:\n                S.pop()\n            S.pop()\n            S.append(a)\n        R.append('.'.join(map(str, S)))\n    print('\\n'.join(R))", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    stk = []\n    for _ in range(n):\n        trailing = read_int()\n        if trailing == 1:\n            stk.append(1)\n            print('.'.join(map(str, stk)))\n        else:\n            while trailing != stk[-1] + 1:\n                stk.pop()\n            stk.pop()\n            stk.append(trailing)\n            print('.'.join(map(str, stk)))", "import heapq\n\ndef sol(A):\n    ans = []\n    for a in A:\n        if a > 1:\n            while ans and ans.pop() != a - 1:\n                None\n            ans.append(a)\n        else:\n            ans.append(a)\n        print('.'.join(map(str, ans)))\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(int(input()))\n    sol(arr)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        x = int(input())\n        if x == 1:\n            a.append(x)\n        else:\n            while a:\n                y = a.pop()\n                if x == y + 1:\n                    a.append(x)\n                    break\n            if not a:\n                a.append(x)\n        print('.'.join([str(x) for x in a]))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    lst = [1]\n    levels = [1]\n    level = 0\n    num = int(input())\n    for i in range(n - 1):\n        num = int(input())\n        if num == 1:\n            level += 1\n            if len(levels) <= level:\n                levels.append(1)\n            else:\n                levels[level] = 1\n        else:\n            while levels[level] != num - 1:\n                level -= 1\n            levels[level] = num\n        lst.append('.'.join([str(k) for k in levels][:level + 1]))\n    ans.extend(lst)\nprint(*ans, sep='\\n')", "def pr(v):\n    s = ''\n    for j in range(len(v)):\n        s += v[j] + '.'\n    print(s[:-1])\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    (ans, i) = ([], 0)\n    while i < n:\n        temp = int(input())\n        if temp == 1:\n            ans.append(str(temp))\n            pr(ans)\n        elif int(ans[-1]) == temp - 1:\n            ans.pop()\n            ans.append(str(temp))\n            pr(ans)\n        else:\n            while int(ans[-1]) != temp - 1:\n                ans.pop()\n            ans.pop()\n            ans.append(str(temp))\n            pr(ans)\n        i += 1", "def list_print(lst):\n    print('.'.join((str(x) for x in lst)))\n\ndef solve():\n    n = int(input())\n    last_pos = []\n    for _ in range(n):\n        last_pos.append(int(input()))\n    lst = [1] * n\n    index = 0\n    assert last_pos[0] == 1\n    list_print(lst[:index + 1])\n    for i in range(1, n):\n        if last_pos[i] == 1:\n            index += 1\n            lst[index] = 1\n            list_print(lst[:index + 1])\n            continue\n        for last in range(index, -1, -1):\n            if lst[last] + 1 == last_pos[i]:\n                index = last\n                lst[index] += 1\n                list_print(lst[:index + 1])\n                break\nfor _ in range(int(input().strip())):\n    solve()", "import math\nfrom functools import reduce\nfrom math import comb\nfrom collections import defaultdict\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\nALPH = 'abcdefghijklmnopqrstuvwxyz'\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef list_int_to_str(a, sep=' '):\n    return sep.join((str(x) for x in a))\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef solve():\n    n = input_int()\n    ans = []\n    for i in range(n):\n        item = input_int()\n        if item == 1:\n            ans.append(1)\n            pr(list_int_to_str(ans, '.'))\n        else:\n            for j in range(len(ans) - 1, -1, -1):\n                if ans[j] + 1 == item:\n                    ans[j] = item\n                    ans = ans[0:j + 1]\n                    pr(list_int_to_str(ans, '.'))\n                    break\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "for tc in range(int(input())):\n    n = int(input())\n    lisT = []\n    ans = []\n    leN = 0\n    for i in range(n):\n        a = int(input())\n        while 1:\n            if a == 1:\n                lisT.append(1)\n                ans.append('.'.join((str(k) for k in lisT)))\n                break\n            if a == lisT[-1] + 1:\n                lisT[-1] += 1\n                ans.append('.'.join((str(k) for k in lisT)))\n                break\n            lisT.pop()\n    for i in ans:\n        print(i)", "final = []\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    ls = []\n    for j in range(n):\n        inp = int(input())\n        if len(ls) == 0:\n            ls.append(inp)\n        elif inp == ls[-1] + 1:\n            ls[-1] = inp\n            activels = False\n        elif inp == 1:\n            ls.append(1)\n        else:\n            while len(ls) > 0:\n                if inp == ls[-1] + 1:\n                    ls[-1] = inp\n                    break\n                ls = ls[:-1]\n        final.append('.'.join(map(str, ls)))\nfor i in final:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        m = int(input())\n        if m == 1:\n            a.append(m)\n        else:\n            while a[-1] != m - 1:\n                a.pop()\n            a.pop()\n            a.append(m)\n        print('.'.join(map(str, a)))", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    sys.stderr = open('error.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2\nfrom collections import defaultdict\ndd = lambda x: defaultdict(lambda : x)\nfor _ in range(int(input())):\n    stack = []\n    for i in range(int(input())):\n        n = int(input())\n        if n == 1:\n            stack.append(1)\n        else:\n            while stack[-1] != n - 1:\n                stack.pop()\n            stack[-1] = n\n        print('.'.join((str(c) for c in stack)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stack = []\n    for i in range(n):\n        ai = int(input())\n        if ai == 1:\n            stack.append(ai)\n        else:\n            while ai - stack[-1] != 1:\n                stack.pop()\n            stack[-1] += 1\n        ps = [str(s) for s in stack]\n        print('.'.join(ps))", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        k = int(input())\n        if k == 1:\n            a.append(k)\n        else:\n            while len(a) > 0 and a[-1] + 1 != k:\n                a.pop()\n            a[-1] += 1\n        print('.'.join((str(x) for x in a)))", "class Node:\n\n    def __init__(self, value, parent):\n        self.value = value\n        self.parent = parent\n\ndef solve(n, A):\n    tree = Node(int(A[0]), None)\n    ans = [A[0]]\n    node = tree\n    for a in A[1:]:\n        a_i = int(a)\n        if a == '1':\n            new_node = Node(a_i, node)\n            node = new_node\n        else:\n            while True:\n                if node.value == a_i - 1:\n                    new_node = Node(a_i, node.parent)\n                    node = new_node\n                    break\n                else:\n                    node = node.parent\n        token = []\n        _node = node\n        while _node is not None:\n            token.append(str(_node.value))\n            _node = _node.parent\n        ans.append('.'.join(token[::-1]))\n    return ans\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = [input() for _ in range(n)]\n        ans.append(solve(n, A))\n    for a in ans:\n        for c in a:\n            print(c)\nmain()", "def next(st, prev, cur):\n    arr = st.split('.')\n    if len(arr) == 1:\n        if prev == cur - 1:\n            return str(cur)\n        else:\n            return str(prev) + '.' + str(cur)\n    elif prev == cur - 1:\n        arr[len(arr) - 1] = cur\n        ss = ''\n        for a in arr:\n            ss = ss + str(a) + '.'\n        return ss[0:len(ss) - 1]\n    elif cur == 1:\n        arr.append(1)\n        ss = ''\n        for a in arr:\n            ss = ss + str(a) + '.'\n        return ss[0:len(ss) - 1]\n    else:\n        counter = 0\n        mark = -1\n        for a in arr:\n            if int(a) == cur - 1:\n                mark = counter\n            counter += 1\n        if mark == -1:\n            return st + '.' + str(cur)\n        else:\n            ans = ''\n            for i in range(mark):\n                ans += arr[i] + '.'\n            ans += str(cur)\n            return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(input())\n    ans = [''] * n\n    ans[0] = str(a[0])\n    for i in range(1, n):\n        ans[i] = next(ans[i - 1], a[i - 1], a[i])\n    for s in ans:\n        print(s)\n    t -= 1", "import sys\nfrom math import gcd, sqrt\nsys.setrecursionlimit(10 ** 5)\ninf = float('inf')\nen = lambda x: list(enumerate(x))\nii = lambda : int(input())\nr = lambda : map(int, input().split())\nrr = lambda : list(r())\n\ndef solve():\n    n = ii()\n    arr = []\n    for _ in range(n):\n        x = ii()\n        if not arr:\n            arr += (x,)\n        elif x == 1:\n            arr += (x,)\n        else:\n            while arr and arr[-1] != x - 1:\n                arr.pop()\n            if arr:\n                arr.pop()\n            arr += (x,)\n        print('.'.join((str(i) for i in arr)))\nfor _ in range(ii()):\n    solve()", "def arr_in():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\nfor ii in range(int(input())):\n    n = int(input())\n    x = int(input())\n    a = [1]\n    print(1)\n    for i in range(n - 1):\n        x = int(input())\n        if x == a[-1] + 1:\n            a[-1] = x\n        elif x == 1:\n            a.append(x)\n        elif x != 1 and x != a[-1] + 1:\n            while len(a) != 0 and x != a[-1] + 1:\n                a.pop()\n            a[-1] = x\n        s = ''\n        for y in a:\n            s += str(y) + '.'\n        print(s[:len(s) - 1])", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    stack = []\n    for i in range(n):\n        a_i = int(input())\n        if a_i == 1:\n            stack.append(a_i)\n        elif a_i > 1:\n            while len(stack) and stack[-1] != a_i - 1:\n                stack.pop()\n            stack[-1] += 1\n        print(*stack, sep='.')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = []\n    for i in range(n):\n        a = int(input())\n        if a == 1:\n            d.append(1)\n        else:\n            while d and d[-1] != a - 1:\n                d.pop()\n            d[-1] += 1\n        print(*d, sep='.')", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = []\n    i = 0\n    while i < n:\n        temp = int(input())\n        if temp == 1:\n            a.append(1)\n        elif temp == a[-1] + 1:\n            a[-1] += 1\n        else:\n            while True:\n                a.pop()\n                if temp == a[-1] + 1:\n                    a[-1] += 1\n                    break\n        print(*a, sep='.')\n        i += 1", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        k = int(input())\n        if k == 1:\n            a.append(k)\n        else:\n            while a[-1] != k - 1:\n                a.pop()\n            a[-1] = k\n        print(*a, sep='.')", "for _ in range(int(input())):\n    n = int(input())\n    stack = []\n    ans = []\n    for i in range(n):\n        pooh = int(input())\n        if pooh == 1:\n            stack.append(pooh)\n        else:\n            while stack:\n                if stack[len(stack) - 1] + 1 == pooh:\n                    stack[len(stack) - 1] = pooh\n                    break\n                else:\n                    stack.pop()\n            if not stack:\n                stack.append(pooh)\n        b = stack.copy()\n        ans.append(b)\n    for i in ans:\n        print(*i, sep='.')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        k = int(input())\n        if k == 1:\n            a.append(k)\n        else:\n            while a[-1] != k - 1:\n                a.pop()\n            a[-1] = k\n        print(*a, sep='.')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        k = int(input())\n        if k == 1:\n            a.append(k)\n        else:\n            while a[-1] != k - 1:\n                a.pop()\n            a[-1] = k\n        print(*a, sep='.')", "for _ in range(int(input())):\n    stack = []\n    n = int(input())\n    a = [int(input()) for _ in range(n)]\n    stack.append(a[0])\n    print(stack[-1])\n    for x in a[1:]:\n        if x == stack[-1]:\n            if x == 1:\n                stack.append(1)\n                print(*stack, sep='.')\n            else:\n                while len(stack) > 0:\n                    if stack.pop() == x - 1:\n                        stack.append(x)\n                        print(*stack, sep='.')\n                        break\n        elif x > stack[-1]:\n            if x == stack[-1] + 1:\n                stack[-1] = x\n                print(*stack, sep='.')\n            else:\n                while len(stack) > 0:\n                    if stack.pop() == x - 1:\n                        stack.append(x)\n                        print(*stack, sep='.')\n                        break\n        elif x == 1:\n            stack.append(1)\n            print(*stack, sep='.')\n        else:\n            while len(stack) > 0:\n                if stack.pop() == x - 1:\n                    stack.append(x)\n                    print(*stack, sep='.')\n                    break", "for _ in range(int(input())):\n    n = int(input())\n    stack = []\n    ans = []\n    for i in range(n):\n        pooh = int(input())\n        if pooh == 1:\n            stack.append(pooh)\n        else:\n            while stack:\n                if stack[len(stack) - 1] + 1 == pooh:\n                    stack[len(stack) - 1] = pooh\n                    break\n                else:\n                    stack.pop()\n            if not stack:\n                stack.append(pooh)\n        b = stack.copy()\n        ans.append(b)\n    for i in ans:\n        print(*i, sep='.')", "theta = 0\nimport sys, io, os\ntheta = 0\ninput = sys.stdin.readline\ntheta = 0\ntheta = 0\nt = int(input())\ntheta = 0\nfor i in range(t):\n    theta = 0\n    n = int(input())\n    theta = 0\n    theta = 0\n    l = [int(input()) for i in range(n)]\n    theta = 0\n    stack = []\n    theta = 0\n    for i in range(n):\n        theta = 0\n        if l[i] == 1:\n            theta = 0\n            stack.append(1)\n            theta = 0\n        else:\n            theta = 0\n            while stack and l[i] != stack[-1] + 1:\n                theta = 0\n                stack.pop()\n                theta = 0\n            theta = 0\n            stack[-1] += 1\n            theta = 0\n        theta = 0\n        print(*stack, sep='.')\n        theta = 0", "t = int(input())\nfor i in range(t):\n    a = []\n    n = int(input())\n    for j in range(n):\n        e = int(input())\n        if e == 1:\n            a.append(e)\n            print(*a, sep='.')\n        else:\n            for k in range(len(a)):\n                if a[k] == e - 1:\n                    m = k\n            a = a[:m]\n            a.append(e)\n            print(*a, sep='.')", "import math, sys, heapq\nfor t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        x = int(input())\n        if x == 1:\n            a.append(1)\n        else:\n            while 1:\n                y = a.pop()\n                if y + 1 == x:\n                    a.append(x)\n                    break\n        print(*a, sep='.')", "for _ in range(int(input())):\n    n = int(input())\n    b = [0 for i in range(1007)]\n    p = -1\n    for i in range(n):\n        a = int(input())\n        if a > 1:\n            while b[p] != a - 1:\n                p -= 1\n            p -= 1\n        p += 1\n        b[p] = a\n        print(*b[:p + 1], sep='.')", "def solve():\n    N = int(input())\n    A = [int(input()) for _ in range(N)]\n    st = [0]\n    for a in A:\n        if a == st[-1] + 1:\n            st[-1] = a\n        elif a == 1:\n            st.append(1)\n        else:\n            while a != st[-1] + 1:\n                st.pop()\n            st[-1] = a\n        for i in range(len(st) - 1):\n            print(st[i], end='.')\n        print(st[-1])\nT = int(input())\nfor _ in range(T):\n    solve()", "import bisect\nimport copy\nimport decimal\nimport fractions\nimport heapq\nimport itertools\nimport math\nimport random\nimport sys\nfrom collections import Counter, deque, defaultdict\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop, heapify, _heappop_max, _heapify_max\n\ndef _heappush_max(heap, item):\n    heap.append(item)\n    heapq._siftdown_max(heap, 0, len(heap) - 1)\nfrom math import gcd as Gcd\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    stack = []\n    for _ in range(n):\n        i = int(readline())\n        if not stack:\n            stack.append(i)\n        elif stack[-1] + 1 == i:\n            stack[-1] += 1\n        elif i == 1:\n            stack.append(i)\n        else:\n            while stack[-1] + 1 != i:\n                stack.pop()\n            stack[-1] = i\n        print(*stack, sep='.')", "for _ in range(int(input())):\n    size = int(input())\n    nums = []\n    index = [1]\n    for i in range(size):\n        nums.append(int(input()))\n        index.append(0)\n    lvl = 1\n    print(1)\n    for i in range(1, size):\n        if nums[i] == 1:\n            lvl += 1\n            index[lvl - 1] = 1\n        elif nums[i] == nums[i - 1] + 1:\n            index[lvl - 1] += 1\n        else:\n            lvl -= 1\n            while index[lvl - 1] != nums[i] - 1:\n                lvl -= 1\n            index[lvl - 1] += 1\n        for j in range(lvl - 1):\n            print(index[j], end='.')\n        print(index[lvl - 1])", "def solve():\n    v = []\n    for _ in range(int(input())):\n        x = int(input())\n        if x == 1:\n            v.append(x)\n        else:\n            while v[-1] != x - 1:\n                v.pop()\n            v[-1] += 1\n        for i in range(len(v)):\n            if i < len(v) - 1:\n                print(v[i], end='.')\n            else:\n                print(v[i])\nfor _ in range(int(input())):\n    solve()", "def p(f):\n    n = len(f)\n    for i in range(n - 1):\n        print(str(f[i]) + '.', end='')\n    print(f[n - 1])\nq = int(input())\nfor qe in range(q):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l = l + [int(input())]\n    f = [l[0]]\n    j = 0\n    z = []\n    for i in range(1, n):\n        k = l[i]\n        z += [f]\n        if k == 1:\n            f = f[:] + [1]\n            j += 1\n        else:\n            m = len(f)\n            while f[j] + 1 != k:\n                j -= 1\n            f = f[:j] + [k]\n    z += [f]\n    for i in range(len(z)):\n        p(z[i])", "for _ in range(int(input())):\n    n = int(input())\n    ar = [0]\n    for i in range(n):\n        x = int(input())\n        pos = -1\n        for j in range(len(ar) - 1, 0, -1):\n            if ar[j] == x - 1:\n                pos = j\n                break\n        if pos != -1:\n            for j in range(len(ar) - pos):\n                ar.pop()\n        ar.append(x)\n        for j in range(1, len(ar) - 1):\n            print(ar[j], end='.')\n        print(ar[-1])", "for _ in range(int(input())):\n    n = int(input())\n    s = []\n    i = 0\n    while i < n:\n        ref = input()\n        i += 1\n        if len(s) == 0:\n            s.append(ref)\n            print(ref)\n            continue\n        elif ref == '1':\n            s.append('1')\n        else:\n            while len(s) > 0:\n                if int(s[-1]) == int(ref) - 1:\n                    s.pop(-1)\n                    break\n                s.pop(-1)\n            s.append(ref)\n        j = 1\n        l = len(s)\n        print(s[0], end='')\n        while j < l:\n            print('.' + s[j], end='')\n            j += 1\n        print('')", "def p(f):\n    n = len(f)\n    for i in range(n - 1):\n        print(str(f[i]) + '.', end='')\n    print(f[n - 1])\nq = int(input())\nfor qe in range(q):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l = l + [int(input())]\n    f = [l[0]]\n    j = 0\n    z = []\n    for i in range(1, n):\n        k = l[i]\n        z += [f]\n        if k == 1:\n            f = f[:] + [1]\n            j += 1\n        else:\n            m = len(f)\n            while f[j] + 1 != k:\n                j -= 1\n            f = f[:j] + [k]\n    z += [f]\n    for i in range(len(z)):\n        p(z[i])", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l += [int(input())]\n    a = [[l[0]]]\n    for i in range(1, n):\n        if l[i] == 1:\n            a += [a[-1] + [1]]\n        else:\n            j = len(a[-1]) - 1\n            while a[-1][j] + 1 != l[i]:\n                j -= 1\n            a += [a[-1][:j] + [l[i]]]\n    for i in range(len(a)):\n        for j in range(len(a[i]) - 1):\n            print(str(a[i][j]) + '.', end='')\n        print(a[i][-1])", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    ans = [a[0]]\n    print(ans[0])\n    for i in range(1, n):\n        if a[i] == 1:\n            ans.append(1)\n        else:\n            for j in range(len(ans) - 1, -1, -1):\n                if ans[j] == a[i] - 1:\n                    ans[j] = a[i]\n                    break\n                else:\n                    ans.pop()\n        print(ans[0], end='')\n        for j in range(1, len(ans)):\n            print('.', end='')\n            print(ans[j], end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stack = []\n    for i in range(n):\n        ai = int(input())\n        if ai == 1:\n            stack.append(ai)\n        else:\n            while ai - stack[-1] != 1:\n                stack.pop()\n            stack.pop()\n            stack.append(ai)\n        for j in range(len(stack)):\n            if j > 0:\n                print('.', end='')\n            print(stack[j], end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stack = []\n    for i in range(n):\n        ai = int(input())\n        if ai == 1:\n            stack.append(ai)\n        else:\n            while ai - stack[-1] != 1:\n                stack.pop()\n            stack[-1] += 1\n        for j in range(len(stack)):\n            if j > 0:\n                print('.', end='')\n            print(stack[j], end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stack = []\n    for i in range(n):\n        ai = int(input())\n        if ai == 1:\n            stack.append(ai)\n        else:\n            while stack[-1] != ai - 1:\n                stack.pop()\n            stack.pop()\n            stack.append(ai)\n        for j in range(len(stack)):\n            if j > 0:\n                print('.', end='')\n            print(stack[j], end='')\n        print()"]