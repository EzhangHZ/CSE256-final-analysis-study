["from sys import stdin\nmodulus = int(10 ** 9 + 7)\n\ndef resultat(max_decay_age, width):\n    if max_decay_age == 1:\n        return 1\n    current_layer = [1] * (width - 1)\n    for thing in range(max_decay_age - 2):\n        current_layer = list(reversed(current_layer))\n        new_layer = [0] * (width - 1)\n        total = 1\n        for i in range(width - 1):\n            total = (total + current_layer[i]) % modulus\n            new_layer[i] = total\n        current_layer = new_layer\n    return (sum(current_layer) + 2) % modulus\ncount = int(stdin.readline())\nfor _ in range(count):\n    (width, max_decay_age) = (int(x) for x in stdin.readline().split())\n    print(resultat(max_decay_age, width))", "from sys import stdin\nmodulus = int(10 ** 9 + 7)\n\ndef resultat(max_decay_age, width):\n    if max_decay_age == 1:\n        return 1\n    current_layer = [1] * (width - 1)\n    for thing in range(max_decay_age - 2):\n        current_layer = list(reversed(current_layer))\n        new_layer = [0] * (width - 1)\n        total = 1\n        for i in range(width - 1):\n            total = (total + current_layer[i]) % modulus\n            new_layer[i] = total\n        current_layer = new_layer\n    return (sum(current_layer) + 2) % modulus\ncount = int(stdin.readline())\nfor _ in range(count):\n    (width, max_decay_age) = (int(x) for x in stdin.readline().split())\n    print(resultat(max_decay_age, width))", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom itertools import accumulate\n\ndef pre(a):\n    return list(accumulate(a, lambda a, b: (a + b) % mod))\n\ndef suff(a):\n    return list(reversed(list(accumulate(a[::-1], lambda a, b: (a + b) % mod))))\nfor _ in range(rn()):\n    (n, k) = rns()\n    ans = 1\n    nums = (n - 1) * [1]\n    for i in range(k - 1):\n        ans += sum(nums)\n        if i % 2 == 0:\n            nums = suff(nums)\n        else:\n            nums = pre(nums)\n        ans %= mod\n    if k > 1:\n        ans += 1\n        ans %= mod\n    print(ans)", "from itertools import accumulate\nDIV = 10 ** 9 + 7\n\ndef cum_sum(in_list, forward=True):\n    if forward:\n        for i in range(1, len(in_list)):\n            in_list[i] += in_list[i - 1]\n            in_list[i] %= DIV\n    else:\n        for i in range(len(in_list) - 2, -1, -1):\n            in_list[i] += in_list[i + 1]\n            in_list[i] %= DIV\n\ndef count_planar(n, k):\n    if k == 1:\n        print(1)\n    elif n == 1:\n        print(2)\n    else:\n        cnt = 2\n        mem = [1] * (n - 1)\n        for i in range(k - 1):\n            if i % 2 == 0:\n                cum_sum(mem, forward=True)\n                cnt += mem[-1]\n            else:\n                cum_sum(mem, forward=False)\n                cnt += mem[0]\n        print(cnt % (10 ** 9 + 7))\nnum = int(input())\nfor i in range(num):\n    (n, k) = [int(el) for el in input().split()]\n    count_planar(n, k)", "import sys\nmod = int(10 ** 9 + 7)\nfor _ in range(int(sys.stdin.readline())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    if k == 1:\n        print(1)\n        continue\n    if n == 1:\n        print(2)\n        continue\n    now = [0] * (n - 1)\n    (now[0], ans, direction) = (1, 0, 1)\n    for i in range(k):\n        (temp, total) = ([0] * (n - 1), 0)\n        if direction == 1:\n            for j in range(n - 1):\n                total += now[j] % mod\n                temp[j] = total\n            direction = -direction\n        else:\n            for j in range(n - 2, -1, -1):\n                total += now[j] % mod\n                temp[j] = total\n            direction = -direction\n        now = temp\n        ans += total\n    print((ans + 1) % mod)", "def helper(n, k):\n    if k == 1:\n        return 1\n    mod = 1000000007\n    res = n + 1\n    k -= 1\n    dp = [1] * n\n    flag = -1\n    while k > 1:\n        ndp = [0] * n\n        if flag == -1:\n            for i in range(n - 2, -1, -1):\n                ndp[i] = (dp[i + 1] + ndp[i + 1]) % mod\n            flag = 1\n        elif flag == 1:\n            for i in range(1, n):\n                ndp[i] = (dp[i - 1] + ndp[i - 1]) % mod\n            flag = -1\n        res = (res + sum(ndp)) % mod\n        dp = ndp\n        k -= 1\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(helper(n, k))", "import time\nfrom itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    M = 10 ** 9 + 7\n    if n == 1:\n        print(1 + int(k > 1))\n    else:\n        crossing = [[None for p in range(n)] for age in range(k + 1)]\n        crossing[k] = [1 for p in range(n)]\n        crossing[k - 1] = list(accumulate(crossing[k]))\n        for age in reversed(range(1, k - 1)):\n            crossing[age][:-1] = list(accumulate(crossing[age + 1][-2::-1]))\n            crossing[age][-1] = crossing[age][-2]\n            for p in range(n):\n                crossing[age][p] %= M\n        print(sum([crossing[age][-1] for age in range(1, k + 1)]) % M)", "t = int(input())\nMOD = 10 ** 9 + 7\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    if k == 1:\n        print(1)\n        continue\n    elif n == 1:\n        print(2)\n        continue\n    counts = [1] * (n - 1)\n    size = n - 1\n    ans = 2\n    left_to_right = True\n    for age in range(k - 1):\n        ans += sum(counts)\n        if left_to_right:\n            for i in range(1, size):\n                counts[i] = (counts[i - 1] + counts[i]) % MOD\n        else:\n            for i in range(size - 2, -1, -1):\n                counts[i] = (counts[i + 1] + counts[i]) % MOD\n        left_to_right = not left_to_right\n    print(ans % MOD)", "def ss(n, k):\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = 1\n    for i in range(k + 1):\n        dp[0][i] = 1\n    for d in range(2, k + 1):\n        for i in range(1, n + 1):\n            dp[i][d] = (dp[i - 1][d] + dp[n - i][d - 1]) % 1000000007\n    return dp[n][k]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(ss(n, k))", "import sys\nget_string = lambda : sys.stdin.readline().strip()\nget_intmap = lambda : map(int, get_string().split())\nfor t in range(int(get_string())):\n    (n, k) = get_intmap()\n    m = int(1000000000.0 + 7)\n    current_decay_age = k\n    total_particles = 1\n    right = 1\n    start = 1\n    if current_decay_age > 1:\n        l = [1] * n\n        total_particles += n\n        current_decay_age -= 1\n    while current_decay_age > 1:\n        tmp_arr = [0] * n\n        tmp = 0\n        for ind in range(n - 1):\n            tmp += l[ind + 1] % m\n            tmp_arr[ind] = tmp\n        total_particles = (total_particles + sum(tmp_arr)) % m\n        l = tmp_arr[::-1]\n        current_decay_age -= 1\n    print(total_particles)", "mod = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    n -= 1\n    state = [1] * n\n    total = 1 if k == 1 else 2\n    nextState = [0] * n\n    for _ in range(k - 1):\n        temp = 0\n        for i in range(n):\n            temp = (temp + state[i]) % mod\n            nextState[n - i - 1] = temp\n        total = (total + temp) % mod\n        state = nextState.copy()\n    print(total)", "T = int(input())\nM = 10 ** 9 + 7\nwhile T:\n    (n, k) = map(int, input().split())\n    X = [1] * (n - 1)\n    z = 1 + min(k - 1, 1) * n\n    for i in range(k - 2):\n        for j in range(1, n - 1):\n            X[j] = (X[j] + X[j - 1]) % M\n        z = (z + sum(X)) % M\n        X = X[::-1]\n    print(z % M)\n    T = T - 1", "def ss(n, k):\n    dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n    for i in range(n + 1):\n        dp[0][i] = 1\n    for i in range(k + 1):\n        dp[i][0] = 1\n    for d in range(1, k + 1):\n        for i in range(n):\n            dp[d][i + 1] = (dp[d][i] + dp[d - 1][n - i - 1]) % 1000000007\n    return dp[k - 1][n]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(ss(n, k))", "import sys\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef f(n, k):\n    MOD_NUM = 10 ** 9 + 7\n    dp = [[0 for _ in range(n + 2)] for _ in range(k + 1)]\n    for age in range(1, k + 1):\n        dp[age][0] = 1\n    for age in range(k + 1):\n        for idx in range(1, n + 1):\n            dp[age][idx] = (dp[age][idx - 1] + dp[age - 1][n - idx]) % MOD_NUM\n    return dp[k][n]\ninput = load_sys()\nfor i in range(1, len(input)):\n    arr = input[i].split()\n    (n, k) = (int(arr[0]), int(arr[1]))\n    print(f(n, k))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    sum = []\n    if k == 1:\n        print(1)\n    elif n == 1:\n        print(2)\n    elif k == 2:\n        print(n + 1)\n    else:\n        for i in range(k):\n            tmp = [0] * (n + 1)\n            sum.append(tmp)\n        for i in range(n + 1):\n            sum[0][i] = 1\n        for i in range(1, k):\n            for j in range(n + 1):\n                if j == 0:\n                    sum[i][j] = 1\n                else:\n                    sum[i][j] = (sum[i][j - 1] + sum[i - 1][n - j]) % (10 ** 9 + 7)\n        print(sum[-1][-1])", "import collections\nimport math\nfrom functools import lru_cache\nfrom typing import OrderedDict\nimport sys\n\ndef process(tc, N, K):\n    MOD = 10 ** 9 + 7\n    dp = [[0 if k != 1 and n != 0 else 1 for n in range(N + 1)] for k in range(K + 1)]\n    for k in range(2, K + 1):\n        for n in range(1, N + 1):\n            dp[k][n] = (dp[k][n - 1] + dp[k - 1][N - n]) % MOD\n    print(dp[K][N], flush=True)\ntcs = int(input())\nfor tc in range(tcs):\n    (N, K) = list(map(int, input().split()))\n    process(tc + 1, N, K)", "import collections\nimport math\nfrom functools import lru_cache\nfrom typing import OrderedDict\nimport sys\n\ndef process(tc, N, K):\n    MOD = 10 ** 9 + 7\n    dp = [[0 if k != 1 and n != 0 else 1 for n in range(N + 1)] for k in range(K + 1)]\n    for k in range(2, K + 1):\n        for n in range(1, N + 1):\n            dp[k][n] = (dp[k][n - 1] + dp[k - 1][N - n]) % MOD\n    print(dp[K][N], flush=True)\ntcs = int(input())\nfor tc in range(tcs):\n    (N, K) = list(map(int, input().split()))\n    process(tc + 1, N, K)", "import collections\nimport math\nfrom functools import lru_cache\nfrom typing import OrderedDict\nimport sys\n\ndef process(tc, N, K):\n    MOD = 10 ** 9 + 7\n    dp = [[0 if k != 1 and n != 0 else 1 for n in range(N + 1)] for k in range(K + 1)]\n    for k in range(2, K + 1):\n        for n in range(1, N + 1):\n            dp[k][n] = (dp[k][n - 1] + dp[k - 1][N - n]) % MOD\n    print(dp[K][N], flush=True)\ntcs = int(input())\nfor tc in range(tcs):\n    (N, K) = list(map(int, input().split()))\n    process(tc + 1, N, K)", "import collections\nimport math\nt = int(input())\nmod = 10 ** 9 + 7\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    d = [0] * n\n    dn = d.copy()\n    res = 0\n    for i in reversed(range(1, k + 1)):\n        cur = 1 if i == k else 0\n        for j in range(n):\n            dn[j] = cur % mod\n            cur += d[j]\n            cur %= mod\n        res += cur\n        res %= mod\n        d = dn.copy()[::-1]\n    print(res)", "import collections\nimport math\nfrom functools import lru_cache\nfrom typing import OrderedDict\nimport sys\n\ndef process(tc, N, K):\n    MOD = 10 ** 9 + 7\n    dp = [[0 if k != 1 and n != 0 else 1 for n in range(N + 1)] for k in range(K + 1)]\n    for k in range(2, K + 1):\n        for n in range(1, N + 1):\n            dp[k][n] = (dp[k][n - 1] + dp[k - 1][N - n]) % MOD\n    print(dp[K][N], flush=True)\ntcs = int(input())\nfor tc in range(tcs):\n    (N, K) = list(map(int, input().split()))\n    process(tc + 1, N, K)", "import collections\nimport math\nfrom functools import lru_cache\nfrom typing import OrderedDict\nimport sys\n\ndef process(tc, N, K):\n    MOD = 10 ** 9 + 7\n    dp = [[0 if k != 1 and n != 0 else 1 for n in range(N + 1)] for k in range(K + 1)]\n    for k in range(2, K + 1):\n        for n in range(1, N + 1):\n            dp[k][n] = (dp[k][n - 1] + dp[k - 1][N - n]) % MOD\n    print(dp[K][N], flush=True)\ntcs = int(input())\nfor tc in range(tcs):\n    (N, K) = list(map(int, input().split()))\n    process(tc + 1, N, K)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (n, k) = M()\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(1, k + 1):\n        dp[0][i] = 1\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[j][i] = (dp[n - j][i - 1] + dp[j - 1][i]) % mod1\n    print(dp[-1][-1])", "mod = 10 ** 9 + 7\ncas = int(input())\nwhile cas:\n    cas -= 1\n    (n, k) = map(int, input().split())\n    dp = [1 for i in range(n)]\n    ans = 1\n    for i in range(k - 1):\n        tmp = 0\n        for j in range(n):\n            ans = (ans + dp[j]) % mod\n        if i % 2 == 0:\n            for j in range(n - 1, -1, -1):\n                tt = dp[j]\n                dp[j] = tmp\n                tmp = (tmp + tt) % mod\n        else:\n            for j in range(n):\n                tt = dp[j]\n                dp[j] = tmp\n                tmp = (tmp + tt) % mod\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    sum = []\n    if k == 1:\n        print(1)\n    elif n == 1:\n        print(2)\n    elif k == 2:\n        print(n + 1)\n    else:\n        for i in range(k):\n            tmp = [0] * (n + 1)\n            sum.append(tmp)\n        for i in range(n + 1):\n            sum[0][i] = 1\n        for i in range(1, k):\n            for j in range(n + 1):\n                if j == 0:\n                    sum[i][j] = 1\n                else:\n                    sum[i][j] = (sum[i][j - 1] + sum[i - 1][n - j]) % (10 ** 9 + 7)\n        print(sum[-1][-1])", "t = int(input())\ninf = 10 ** 9 + 7\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [0] * (n + 1)\n    a[1] = 1\n    ans = 1\n    if k > 1:\n        ans += 1\n    for i in range(k - 1):\n        pref = [0] * (n + 1)\n        if i % 2 == 0:\n            for j in range(1, n):\n                pref[j] = (a[j] + pref[j - 1]) % inf\n                ans = (ans + pref[j]) % inf\n        else:\n            for j in range(n - 1, 0, -1):\n                pref[j] = (a[j] + pref[j + 1]) % inf\n                ans = (ans + pref[j]) % inf\n        a = pref\n    print(ans)", "R = range\nfor s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    D = [[1] * (n + 1)] + [[1] + n * [0] for _ in R(k)]\n    for d in R(1, k):\n        for i in R(n):\n            D[d][i + 1] = (D[d][i] + D[d - 1][n - i - 1]) % (10 ** 9 + 7)\n    print(D[k - 1][n])", "R = range\nfor s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    D = [[1] * (n + 1)] + [[1] + n * [0] for _ in R(k)]\n    for d in R(1, k):\n        for i in R(n):\n            D[d][i + 1] = (D[d][i] + D[d - 1][n - i - 1]) % (10 ** 9 + 7)\n    print(D[k - 1][n])", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    if k == 1:\n        print(1)\n    elif k == 2:\n        print(n + 1)\n    else:\n        a = [i for i in range(n - 1, 0, -1)]\n        s = n + 1\n        for i in a:\n            s += i\n        (d, k) = (1, k - 2)\n        while k > 1:\n            if d:\n                for i in range(1, len(a)):\n                    a[i] = (a[i] + a[i - 1]) % 1000000007\n            else:\n                for i in range(len(a) - 2, -1, -1):\n                    a[i] = (a[i] + a[i + 1]) % 1000000007\n            k -= 1\n            d = 1 - d\n            for i in a:\n                s += i\n            if s > 1000000007:\n                s = s % 1000000007\n        print(s)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    dp = []\n    for i in range(0, 1013):\n        dp.append([0] * 1013)\n    for i in range(1, k + 1):\n        for j in range(0, n + 1):\n            if j == 0 or i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][n - j] + dp[i][j - 1]) % m\n    return dp[k][n]\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nMOD = 1000000000.0 + 7\n\nclass Problem:\n\n    def __init__(self):\n        pass\n\n    def solve(self):\n        ans = 0\n        (N, K) = map(int, input().split())\n        dp = [[0 for j in range(N + 1)] for i in range(K + 1)]\n        for i in range(1, K + 1):\n            for j in range(N + 1):\n                if i == 1 or j == 0:\n                    dp[i][j] = 1\n                    continue\n                dp[i][j] = int((dp[i][j - 1] + dp[i - 1][N - j]) % MOD)\n        ans = dp[K][N]\n        print(ans)\n\ndef main():\n    p = Problem()\n    T = int(input())\n    while T:\n        p.solve()\n        T -= 1\nmain()", "mod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [[0] * (n + 1) for x in range(k)]\n    for _ in range(n + 1):\n        a[0][_] = 1\n    for _ in range(1, k):\n        cur = 0\n        for __ in range(n + 1):\n            a[_][__] = cur + 1\n            if __ < n:\n                cur = (cur + a[_ - 1][n - 1 - __]) % mod\n    print(a[k - 1][n])", "MOD = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(n + 1):\n        dp[0][i] = 1\n    for b in range(1, k):\n        cur = 0\n        for i in range(n + 1):\n            dp[b][i] = cur + 1\n            if i < n:\n                cur = (cur + dp[b - 1][n - 1 - i]) % MOD\n    print(dp[k - 1][n])", "MAX_N = 1001\nMOD_N = 1000000007\nt = int(input())\nans = [[-1 for _ in range(MAX_N)] for _ in range(MAX_N)]\n\ndef dp(n, k, total_k):\n    if n == 1 or k == 0:\n        ans[n][k] = 1\n        return ans[n][k]\n    if ans[n][k] != -1:\n        return ans[n][k]\n    ans[n][k] = (dp(n - 1, total_k - k, total_k) + dp(n, k - 1, total_k)) % MOD_N\n    return ans[n][k]\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    ans = [[1] * (n + 1)] + [[1] * (n + 1)] + [[1] + [0] * n for _ in range(k)]\n    for i in range(2, k + 1):\n        for j in range(1, n + 1):\n            ans[i][j] = (ans[i - 1][n - j] + ans[i][j - 1]) % MOD_N\n    print(ans[k][n])\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = []\n    for i in range(0, 1013):\n        dp.append([0] * 1013)\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(0, n + 1):\n            if j == 0 or i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][n - j] + dp[i][j - 1]) % 1000000007\n    print(dp[k][n])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = []\n    for i in range(0, 1005):\n        dp.append([0] * 1005)\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(0, n + 1):\n            if j == 0 or i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][n - j] + dp[i][j - 1]) % 1000000007\n    print(dp[k][n])", "import collections\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = tuple(map(int, input().split()))\n        dp = [[0] * 1003 for i in range(1003)]\n        for i in range(1, k + 1):\n            for j in range(n + 1):\n                if j == 0 or i == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = int((dp[i - 1][n - j] + dp[i][j - 1]) % (1000000000.0 + 7))\n        print(dp[k][n])\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [[0] * 1013 for i in range(1013)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            dp[i][j] = 1 if j == 0 or i == 1 else (dp[i - 1][n - j] + dp[i][j - 1]) % 1000000007\n    print(dp[k][n])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = [[0] * 1013 for i in range(1013)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            if j == 0 or i == 1:\n                d[i][j] = 1\n            else:\n                d[i][j] = (d[i - 1][n - j] + d[i][j - 1]) % 1000000007\n    print(d[k][n])", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [[0] * 1013 for i in range(1013)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            dp[i][j] = 1 if j == 0 or i == 1 else (dp[i - 1][n - j] + dp[i][j - 1]) % (10 ** 9 + 7)\n    print(dp[k][n])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = [[0] * 1003 for i in range(1003)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            if j == 0 or i == 1:\n                d[i][j] = 1\n            else:\n                d[i][j] = (d[i - 1][n - j] + d[i][j - 1]) % 1000000007\n    print(d[k][n])", "m = 1000000007\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mas = [[0] * 1001 for i in range(1001)]\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            if i == 1 or j == 0:\n                mas[i][j] = 1\n            else:\n                mas[i][j] = (mas[i - 1][n - j] + mas[i][j - 1]) % m\n    print(mas[k][n])", "import time\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    if k == 1:\n        print('1')\n    else:\n        m = 1000000007\n        s = 1 + n\n        k = k - 1\n        l = [1 for i in range(n - 1)]\n        a = 0\n        while k > 1:\n            if k % 2 == 0:\n                for i in range(n - 1):\n                    if i == 0:\n                        a = l[i]\n                        l[i] = a\n                        s = (s % m + a % m) % m\n                    else:\n                        a = (a % m + l[i] % m) % m\n                        l[i] = a\n                        s = (s % m + a % m) % m\n            else:\n                for i in range(-1, -n, -1):\n                    if i == -1:\n                        a = l[i]\n                        l[i] = a\n                        s = (s % m + a % m) % m\n                    else:\n                        a = (a % m + l[i] % m) % m\n                        l[i] = a\n                        s = (s % m + a % m) % m\n            k -= 1\n        print(s % m)", "from collections import Counter\nimport string\nimport math\nimport bisect\nimport sys\nfrom fractions import Fraction\n\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef vary(arrber_of_variables):\n    if arrber_of_variables == 1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables >= 2:\n        return map(int, sys.stdin.readline().split())\n\ndef makedict(var):\n    return dict(Counter(var))\nmod = 10 ** 9 + 7\ntestcases = vary(1)\nfor _ in range(testcases):\n    (n, k) = vary(2)\n    dp = [[0 for i in range(n + 1)] for j in range(k)]\n    ans = 0\n    if 1:\n        for i in range(1, k):\n            for j in range(1, n + 1):\n                dp[i][j] = (dp[i][j - 1] + dp[i - 1][n - j] + 1) % mod\n    print((dp[-1][-1] + 1) % mod)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [[0] * 1013 for i in range(1013)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            dp[i][j] = 1 if j == 0 or i == 1 else (dp[i - 1][n - j] + dp[i][j - 1]) % 1000000007\n    print(dp[k][n])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [[0] * 1013 for i in range(1013)]\n    ans = 1\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            dp[i][j] = 1 if j == 0 or i == 1 else (dp[i - 1][n - j] + dp[i][j - 1]) % 1000000007\n    print(dp[k][n])"]