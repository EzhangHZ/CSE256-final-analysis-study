["import math\na = [0] * 100000\nfor i in range(3, 100000, 2):\n    a[i] = 1\nfor i in range(3, 100000, 2):\n    if a[i] == 1:\n        for j in range(i * i, 100000, i):\n            a[j] = 0\na[2] = 1\na1 = []\nfor i in range(100000):\n    if a[i] == 1:\n        a1.append(i)\nfor _ in range(int(input())):\n    num = int(input())\n    n = num\n    ans = []\n    for i in a1:\n        c = 0\n        if i * i > n:\n            break\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n                c += 1\n            ans.append([i, c])\n    if n != 1:\n        ans.append([n, 1])\n    if len(ans) == 1:\n        if ans[0][1] >= 6:\n            print('YES')\n            print(ans[0][0], pow(ans[0][0], 2), math.floor(num / (ans[0][0] * pow(ans[0][0], 2))))\n        else:\n            print('NO')\n    elif len(ans) >= 2:\n        thirdno = num // (ans[0][0] * ans[1][0])\n        if thirdno >= 2 and thirdno != ans[0][0] and (thirdno != ans[1][0]):\n            print('YES')\n            print(ans[0][0], ans[1][0], thirdno)\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nMAX = 32000\nprimeSieve = [True] * MAX\nprimes = []\nprimeSieve[0] = primeSieve[1] = False\nfor i in range(2, MAX):\n    if primeSieve[i] == True:\n        primes.append(i)\n        for j in range(i * i, MAX, i):\n            primeSieve[j] = False\nfor _ in range(t):\n    n = int(input())\n    nums = []\n    i = 0\n    while i < len(primes) and n > 1:\n        if n % primes[i] == 0:\n            nums.append(primes[i])\n            n //= primes[i]\n            if len(nums) == 2:\n                break\n            if n % primes[i] ** 2 == 0:\n                nums.append(primes[i] ** 2)\n                n //= primes[i] ** 2\n                break\n        i += 1\n    if len(nums) >= 2 and n not in nums + [1]:\n        print('YES')\n        print(*nums, n)\n    else:\n        print('NO')", "import math\na = [0] * 100000\nfor i in range(3, 100000, 2):\n    a[i] = 1\nfor i in range(3, 100000, 2):\n    if a[i] == 1:\n        for j in range(i * i, 100000, i):\n            a[j] = 0\na[2] = 1\na1 = []\nfor i in range(100000):\n    if a[i] == 1:\n        a1.append(i)\nfor _ in range(int(input())):\n    num = int(input())\n    n = num\n    ans = []\n    for i in a1:\n        c = 0\n        if i * i > n:\n            break\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n                c += 1\n            ans.append([i, c])\n    if n != 1:\n        ans.append([n, 1])\n    if num in [i[0] for i in ans]:\n        print('NO')\n    elif len(ans) == 1 and ans[0][1] >= 6:\n        print('YES')\n        print(ans[0][0], pow(ans[0][0], 2), math.floor(num / (ans[0][0] * pow(ans[0][0], 2))))\n    elif len(ans) >= 2:\n        thirdno = math.floor(num / (ans[0][0] * ans[1][0]))\n        if thirdno >= 2 and thirdno != ans[0][0] and (thirdno != ans[1][0]):\n            print('YES')\n            print(ans[0][0], ans[1][0], thirdno)\n        else:\n            print('NO')\n    else:\n        print('NO')", "import math\nprimes = [2]\nfor n in range(3, math.ceil(math.sqrt(1000000000.0)), 2):\n    is_prime = True\n    sqrt_n = math.sqrt(n)\n    for p in primes:\n        if p > sqrt_n:\n            break\n        if n % p == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(n)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    _n = n\n    factors = {}\n    for p in primes:\n        while _n % p == 0:\n            if p not in factors:\n                factors[p] = 0\n            factors[p] += 1\n            _n /= p\n    if _n != 1:\n        factors[_n] = 1\n    f1 = None\n    f2 = None\n    if len(factors) == 1:\n        [f] = list(factors)\n        if factors[f] >= 6:\n            f1 = f\n            f2 = f * f\n    elif len(factors) == 2:\n        [_f1, _f2] = list(factors)\n        if factors[_f1] + factors[_f2] >= 4:\n            f1 = _f1\n            f2 = _f2\n    elif len(factors) >= 3:\n        [_f1, _f2] = list(factors)[:2]\n        f1 = _f1\n        f2 = _f2\n    if f1 != None and f2 != None:\n        print('YES')\n        print(f'{int(f1)} {int(f2)} {int(n / (f1 * f2))}')\n    else:\n        print('NO')", "def solution():\n    temp = [True] * 31623\n    for i in range(2, 31623):\n        if temp[i]:\n            for j in range(i + i, 31623, i):\n                temp[j] = False\n    er = [i for (i, v) in enumerate(temp) if v][2:]\n    for _ in range(int(input())):\n        n = int(input())\n        ans = set()\n        er_iter = er.__iter__()\n        current = er_iter.__next__()\n        l = 1\n        while current < n:\n            if n % current == 0:\n                if current in ans:\n                    if l == 1:\n                        l = current\n                    else:\n                        ans.add(current * l)\n                        l = 1\n                else:\n                    ans.add(current)\n                n //= current\n                if len(ans) == 2 and n not in ans:\n                    break\n            else:\n                try:\n                    current = er_iter.__next__()\n                except StopIteration:\n                    break\n        if l:\n            n *= l\n        if len(ans) == 2 and n not in ans:\n            print('YES')\n            ans.add(n)\n            print(*ans)\n        else:\n            print('NO')\nsolution()", "def productOfThreeNumbers(n, answer=(1,)):\n    lengthOfAnswer = len(answer)\n    if lengthOfAnswer == 3:\n        if n > answer[-1]:\n            return f'YES\\n{answer[1]} {answer[2]} {int(n)}'\n        return 'NO'\n    for i in range(answer[-1] + 1, int(n ** (1 / (4 - lengthOfAnswer))) + 1):\n        if not n % i:\n            return productOfThreeNumbers(n / i, answer + (i,))\n    return 'NO'\nnTestCases = int(input())\ntestCases = [int(input()) for x in range(nTestCases)]\n[print(productOfThreeNumbers(testCase)) for testCase in testCases]", "import math\nfrom collections import Counter\n\ndef pf(n):\n    ans = []\n    while n % 2 == 0:\n        ans.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            ans.append(int(i))\n            n = n / i\n    if n > 2:\n        ans.append(int(n))\n    l = len(ans)\n    if l <= 2:\n        return 'NO'\n    (a, b, c) = (0, 0, 0)\n    a = ans[0]\n    if ans[0] == ans[1]:\n        b = ans[1] * ans[2]\n        i = 3\n    else:\n        b = ans[1]\n        i = 2\n    s = 1\n    while i < len(ans):\n        s *= ans[i]\n        i += 1\n    c = s\n    if a != b and c != b and (a != c) and (c != 1):\n        return [a, b, c]\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    a = pf(n)\n    if a != 'NO':\n        print('YES')\n        print(*a)\n    else:\n        print('NO')", "def factorization(num):\n    pn = []\n    while num % 2 == 0:\n        pn.append(2)\n        num //= 2\n    while num % 3 == 0:\n        pn.append(3)\n        num //= 3\n    fg = False\n    for i in range(5, int(num ** 0.5) + 1, 6):\n        if fg:\n            if i > int(num ** 0.5):\n                break\n            fg = False\n        while num % i == 0:\n            pn.append(i)\n            num //= i\n            fg = True\n        i += 2\n        if fg:\n            if i > int(num ** 0.5):\n                break\n            fg = False\n        while num % i == 0:\n            pn.append(i)\n            num //= i\n            fg = True\n    if num > 1:\n        pn.append(num)\n    return pn\n\ndef calculation():\n    if len(ns) < 3:\n        return (0, 0, 0)\n    n1 = ns[0]\n    n2 = ns[1]\n    n3 = 0\n    for i in range(2, len(ns)):\n        if n2 == n1:\n            n2 *= ns[i]\n            break\n        i -= 1\n        break\n    if len(ns) > i + 1:\n        n3 = ns[i + 1]\n    else:\n        return (0, 0, 0)\n    for i in range(i + 2, len(ns)):\n        n3 *= ns[i]\n    if n1 != n2 and n2 != n3 and (n1 != n3):\n        return (n1, n2, n3)\n    return (0, 0, 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n > 23:\n        ns = factorization(n)\n        (n1, n2, n3) = calculation()\n        if n1 > 0:\n            print('YES')\n            print(n1, n2, n3)\n        else:\n            print('NO')\n    else:\n        print('NO')", "import math\n\ndef primefactors(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return l\nfor i in range(int(input())):\n    n = int(input())\n    ll = primefactors(n)\n    dic = {}\n    for i in range(len(ll)):\n        if ll[i] in dic:\n            dic[ll[i]] += 1\n        else:\n            dic[ll[i]] = 1\n    key_list = list(dic.keys())\n    value_list = list(dic.values())\n    if len(key_list) == 0:\n        print('NO')\n    elif len(key_list) == 1:\n        if value_list[0] > 5:\n            p1 = key_list[0]\n            print('YES')\n            print(p1, p1 * p1, int(n / (p1 * p1 * p1)))\n        else:\n            print('NO')\n    elif len(key_list) == 2:\n        if value_list[0] + value_list[1] >= 4:\n            (p1, p2) = (key_list[0], key_list[1])\n            print('YES')\n            print(p1, int(p2), int(n // (p1 * p2)))\n        else:\n            print('NO')\n    else:\n        (p1, p2) = (key_list[0], key_list[1])\n        print('YES')\n        print(p1, int(p2), int(n // (p1 * p2)))", "t = int(input())\nMAX = 32000\nprimeSieve = [True] * MAX\nprimes = []\nprimeSieve[0] = primeSieve[1] = False\nfor i in range(2, MAX):\n    if primeSieve[i] == True:\n        primes.append(i)\n        for j in range(i * i, MAX, i):\n            primeSieve[j] = False\nfor _ in range(t):\n    n = int(input())\n    nCopy = n\n    nums = [1]\n    i = 0\n    while i < len(primes) and n > 1 and (len(nums) < 3):\n        if n % primes[i] == 0:\n            nums.append(primes[i])\n            while n % primes[i] == 0:\n                n //= primes[i]\n        else:\n            i += 1\n    if len(nums) == 2:\n        if nCopy % nums[1] ** 3 == 0 and nCopy // nums[1] ** 3 > nums[1] ** 2:\n            print('YES')\n            print(nums[1], nums[1] ** 2, nCopy // nums[1] ** 3)\n        else:\n            print('NO')\n    elif len(nums) > 2:\n        if nCopy // (nums[1] * nums[2]) in nums:\n            print('NO')\n        else:\n            print('YES')\n            print(nums[1], nums[2], nCopy // (nums[1] * nums[2]))\n    else:\n        print('NO')", "import math\nfrom collections import defaultdict as dq\n\ndef primeFactors(n):\n    d = dq(int)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[i] += 1\n            n = n // i\n    if n > 1:\n        d[n] += 1\n    return d\nfor _ in range(int(input())):\n    n = int(input())\n    s = primeFactors(n)\n    if len(s) > 2:\n        c = 0\n        li = []\n        for i in s.keys():\n            li.append(i)\n            c += 1\n            if c == 2:\n                break\n        print('YES')\n        print(li[0], li[1], n // (li[0] * li[1]))\n    if len(s) == 1:\n        for i in s.keys():\n            c = i\n        if s[c] >= 6:\n            print('YES')\n            print(c, c * c, n // (c * c * c))\n        else:\n            print('NO')\n    if len(s) == 2:\n        li = []\n        for i in s.keys():\n            li.append(i)\n        if n // (li[0] * li[1]) in s.keys() or n // (li[0] * li[1]) == 1:\n            print('NO')\n        else:\n            print('YES')\n            print(li[0], li[1], n // (li[0] * li[1]))", "def primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            l.append(i)\n            n //= i\n    if n > 2:\n        l.append(n)\n    return l\nfor _ in range(int(input())):\n    n = primefactor(int(input()))\n    l = []\n    if len(n) == 3:\n        if len(set(n)) == 3:\n            print('YES')\n            print(*n)\n        else:\n            print('NO')\n    elif len(n) > 3:\n        if n[0] == n[1]:\n            l.append(n[0])\n            l.append(n[1] * n[2])\n            c = 1\n            for i in range(3, len(n)):\n                c *= n[i]\n            l.append(c)\n            if len(set(l)) != 3:\n                print('NO')\n            else:\n                print('YES')\n                print(*l)\n        else:\n            l.append(n[0])\n            l.append(n[1])\n            c = 1\n            for i in range(2, len(n)):\n                c *= n[i]\n            l.append(c)\n            if len(set(l)) != 3:\n                print('NO')\n            else:\n                print('YES')\n                print(*l)\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n):\n    output = []\n    while n % 2 == 0:\n        output.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            output.append(i)\n            n = n / i\n    if n > 2:\n        output.append(int(n))\n    return output\nt = int(input())\nfor g in range(0, t):\n    n = int(input())\n    a = primeFactors(n)\n    a.sort()\n    output = 1\n    i = 1\n    x = y = z = 0\n    x = a[0]\n    if len(a) == 1:\n        output = 0\n    if output == 1:\n        if a[1] != a[0]:\n            y = a[1]\n            z = int(n / (x * y))\n        elif len(a) > 2:\n            y = a[1] * a[2]\n            z = int(n / (x * y))\n        else:\n            output = 0\n    if output == 1 and z != 1 and (x != y) and (y != z) and (x != z):\n        print('YES')\n        print(x, y, z)\n    else:\n        print('NO')", "def f(n):\n    for i in range(2, int(n ** (1 / 3)) + 1):\n        if n % i == 0:\n            m = n / i\n            for j in range(2, int(m ** (1 / 2)) + 1):\n                if m % j == 0:\n                    o = int(m / j)\n                    if i != j and j != o and (o != i):\n                        return (i, j, o)\n    return (0, 0, 0)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    (p, q, r) = (0, 0, 0)\n    (p, q, r) = f(n)\n    if p != 0:\n        print('YES')\n        print(p, q, r)\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n\n    def prime(n):\n        primes = {2: 0}\n        while n % 2 == 0:\n            primes[2] += 1\n            n = n // 2\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            while n % i == 0:\n                if i in primes:\n                    primes[i] += 1\n                else:\n                    primes[i] = 1\n                n = n // i\n        if n > 2:\n            if n in primes:\n                primes[n] += 1\n            else:\n                primes[n] = 1\n        return primes\n\n    def prod(l):\n        p = 1\n        for x in l:\n            p *= x\n        return p\n    primes = prime(n)\n    ar = []\n    keys = sorted(primes.keys())\n    for key in keys:\n        ar.extend([key] * primes[key])\n    if len(ar) < 3:\n        print('NO')\n    else:\n        a = ar[0]\n        i = 1\n        b = ar[1]\n        if ar[0] == ar[1]:\n            b *= ar[2]\n            i += 1\n        c = prod(ar[i + 1:])\n        if i == len(ar) - 1 or b == c or len(set([a, b, c])) < 3:\n            print('NO')\n        else:\n            print('YES')\n            print(a, b, c)", "import math\n\ndef primeFactors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    factor = primeFactors(n)\n    if len(factor) < 3:\n        print('NO')\n        continue\n    (a, b, c) = (0, 0, 0)\n    a = factor[0]\n    b = 1\n    c = 1\n    for i in range(1, len(factor)):\n        b *= factor[i]\n        if b != a:\n            cin = i\n            break\n    for i in range(cin + 1, len(factor)):\n        c *= factor[i]\n    if len(set([a, b, c])) == 3 and a >= 2 and (b >= 2) and (c >= 2):\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')", "import math\nt = int(input())\n\ndef primefactorize(n):\n    prime_factors_list = []\n    while n % 2 == 0:\n        prime_factors_list.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors_list.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors_list.append(n)\n    return prime_factors_list\n\ndef generate_factors(prime_factors_list, n):\n    a = 1\n    b = 1\n    c = 1\n    for i in range(len(prime_factors_list)):\n        if a == 1:\n            a *= prime_factors_list[i]\n        elif b == 1 or a == b:\n            b *= prime_factors_list[i]\n        else:\n            c *= prime_factors_list[i]\n    return (a, b, c)\nfor tt in range(t):\n    n = int(input())\n    prime_factors = primefactorize(n)\n    (a, b, c) = generate_factors(prime_factors, n)\n    if (a != 1 and b != 1 and (c != 1)) and (a != b and b != c and (a != c)):\n        print('YES')\n        print(str(int(a)) + ' ' + str(int(b)) + ' ' + str(int(c)))\n    else:\n        print('NO')", "import math\n\ndef primes(n):\n    while n % 2 == 0:\n        prime.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime.append(i)\n            n = n / i\n    if n > 2:\n        prime.append(int(n))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    prime = []\n    primes(n)\n    p = {}\n    for i in prime:\n        if i in p.keys():\n            p[i] += 1\n        else:\n            p[i] = 1\n    g = list(p.keys())\n    if len(g) == 1:\n        if p[g[0]] >= 6:\n            print('YES')\n            p1 = p[g[0]] - 2\n            print(g[0], g[0] ** 2, g[0] ** (p[g[0]] - 3))\n        else:\n            print('NO')\n        continue\n    if len(g) == 2:\n        if p[g[0]] + p[g[1]] > 3:\n            print('YES')\n            n1 = g[0]\n            n2 = g[1]\n            p1 = p[g[0]]\n            p2 = p[g[1]]\n            print(n1, n2, pow(n1, p1 - 1) * pow(n2, p2 - 1))\n        else:\n            print('NO')\n    else:\n        print('YES')\n        ans = pow(g[0], p[g[0]] - 1) * pow(g[1], p[g[1]] - 1)\n        for i in range(2, len(g)):\n            ans *= pow(g[i], p[g[i]])\n        print(g[0], g[1], ans)", "import math as mt\n\ndef func(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n = n // 2\n    for i in range(3, mt.ceil(mt.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n            a.append(i)\n    if n > 2:\n        a.append(n)\n    return a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    C = list(func(n))\n    X = []\n    j = C[0]\n    X.append(C[0])\n    h = 1\n    k = 1\n    while k < len(C) and h <= j:\n        h = h * C[k]\n        k += 1\n    X.append(h)\n    p = 1\n    if k > len(C):\n        print('NO')\n    else:\n        for i in range(k, len(C)):\n            p = p * C[i]\n        if p != 1 and p != X[0] and (p != X[1]):\n            X.append(p)\n        if len(set(X)) == 3:\n            print('YES')\n            print(*X)\n        else:\n            print('NO')", "def prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    for i in range(3, int(n ** 0.5 + 1), 2):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n != 1:\n        factors.append(n)\n    return factors\n\ndef solve():\n    n = int(input())\n    f = prime_factors(n)\n    (a, b, c) = (1, 1, 1)\n    for i in f:\n        if a == 1:\n            a = i\n        elif b == 1 or a == b:\n            b *= i\n        else:\n            c *= i\n    sol = False\n    if a * b * c == n and a != b and (b != c) and (a != c) and (b > 1) and (c > 1):\n        sol = True\n    if sol:\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def pm(n):\n    arr = []\n    while n % 2 == 0:\n        arr.append(2)\n        n //= 2\n    for i in range(3, int(pow(n, 0.5)) + 1, 2):\n        while n % i == 0:\n            arr.append(i)\n            n //= i\n    if n > 2:\n        arr.append(n)\n    return arr\ntc = int(input())\nfor ii in range(tc):\n    n = int(input())\n    arr = pm(n)\n    a = arr[0]\n    b = 1\n    c = 1\n    index = 0\n    for i in range(1, len(arr)):\n        b *= arr[i]\n        if b != a:\n            index = i\n            break\n    for j in range(index + 1, len(arr)):\n        c *= arr[j]\n    if a != b and b != c and (a != c) and (a != 1) and (b != 1) and (c != 1):\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')", "def findprimefactors(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            l.append(i)\n    if n > 2:\n        l.append(n)\n    return l\nfor _ in range(int(input())):\n    n = int(input())\n    k = findprimefactors(n)\n    l = set(k)\n    z = len(l)\n    if z >= 3:\n        print('YES')\n        l = list(l)\n        prod = l[0] * l[1]\n        prod1 = 1\n        print(*l[:2], end=' ')\n        for i in k:\n            prod1 *= i\n        print(prod1 // prod)\n    elif z == 2:\n        if len(k) < 4:\n            print('NO')\n        else:\n            prod = 1\n            print('YES')\n            l = list(l)\n            prod1 = 1\n            for i in l:\n                print(i, end=' ')\n                prod *= i\n            for i in k:\n                prod1 *= i\n            print(prod1 // prod)\n    elif z == 1:\n        prod = 1\n        if len(k) > 5:\n            print('YES')\n            print(k[0], k[1] * k[2], end=' ')\n            for i in k[3:]:\n                prod *= i\n            print(prod)\n        else:\n            print('NO')\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n):\n    ans = []\n    while n % 2 == 0:\n        ans.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            ans.append(i)\n            n = n / i\n    if n > 2:\n        ans.append(int(n))\n    return ans\nt = int(input())\nfor g in range(0, t):\n    n = int(input())\n    a = primeFactors(n)\n    a.sort()\n    ans = 1\n    i = 1\n    x = y = z = 0\n    x = a[0]\n    if len(a) == 1:\n        ans = 0\n    if ans == 1:\n        if a[1] != a[0]:\n            y = a[1]\n            z = int(n / (x * y))\n        elif len(a) > 2:\n            y = a[1] * a[2]\n            z = int(n / (x * y))\n        else:\n            ans = 0\n    if ans == 1 and z != 1 and (x != y) and (y != z) and (x != z):\n        print('YES')\n        print(x, y, z)\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n, l):\n    while n % 2 == 0:\n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n // i\n    if n > 2:\n        l.append(n)\n    return l\nfor _ in range(int(input())):\n    n = int(input())\n    ar = []\n    l = primeFactors(n, ar)\n    s = []\n    s = set(s)\n    temp = 1\n    for i in l:\n        temp *= i\n        if temp not in s and len(s) < 2:\n            s.add(temp)\n            temp = 1\n    if temp != 1:\n        s.add(temp)\n    if len(s) > 2:\n        print('YES')\n        s = list(s)\n        for i in s:\n            print(i, end=' ')\n    else:\n        print('NO', end=' ')\n    print()", "import math\n\ndef primeFactors(n):\n    arr = []\n    while n % 2 == 0:\n        arr.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            arr.append(i)\n            n = n / i\n    if n > 2:\n        arr.append(n)\n    return arr\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = primeFactors(n)\n    if len(arr) >= 3:\n        a = arr[0]\n        if arr[0] != arr[1]:\n            b = arr[1]\n            c = n // (a * b)\n            if c == a or c == b or c < 2:\n                print('NO')\n            else:\n                print('YES')\n                print(a, b, c)\n        else:\n            b = arr[1] * arr[2]\n            c = n // (a * b)\n            if c == a or c == b or c < 2:\n                print('NO')\n            else:\n                print('YES')\n                print(a, b, c)\n    else:\n        print('NO')", "from sys import stdin\n\ndef factorize(n):\n    result = {}\n    rest = 1\n    for i in [2, 3, 5]:\n        while n % i == 0:\n            if i not in result:\n                result[i] = 1\n            else:\n                rest *= i\n                if rest not in result:\n                    result[rest] = 1\n                    rest = 1\n            n //= i\n            if len(result) == 2:\n                if n * rest > 1 and n * rest not in result:\n                    return list(result.keys()) + [n * rest]\n                else:\n                    return []\n    increments = [4, 2, 4, 2, 4, 6, 2, 6]\n    d = 7\n    inc = 0\n    while d * d <= n:\n        while n % d == 0:\n            if d not in result:\n                result[d] = 1\n            else:\n                rest *= d\n                if rest not in result:\n                    result[rest] = 1\n                    rest = 1\n            n //= d\n            if len(result) == 2:\n                if n * rest > 1 and n * rest not in result:\n                    return list(result.keys()) + [n * rest]\n                else:\n                    return []\n        d += increments[inc]\n        inc += 1\n        if inc == 8:\n            inc = 0\n    return []\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    res = factorize(n)\n    if len(res) > 1:\n        print('YES')\n        print(*res)\n    else:\n        print('NO')", "from math import sqrt as s\n\ndef factorization(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n = n // 2\n    for i in range(3, int(s(n)) + 1, 2):\n        while n % i == 0:\n            a.append(i)\n            n = n // i\n    if n > 2:\n        a.append(n)\n    return a\nfor i in range(int(input())):\n    n = int(input())\n    a = factorization(n)\n    flag = 'hobe'\n    if len(a) < 3:\n        flag = 'miao'\n    else:\n        res = []\n        res.append(a[0])\n        if a[1] == a[0]:\n            res.append(a[1] * a[2])\n            j = 3\n        else:\n            res.append(a[1])\n            j = 2\n        temp = 1\n        for i in range(j, len(a)):\n            temp = temp * a[i]\n        if temp in res or temp == 1:\n            flag = 'miao'\n        else:\n            res.append(temp)\n    if flag == 'miao':\n        print('NO')\n    else:\n        print('YES')\n        print(*res)", "import math\n\ndef primeFactors(n):\n    a = []\n    while n % 2 == 0:\n        (a.append(2),)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            a.append(i)\n            n = n // i\n    if n > 2:\n        a.append(n)\n    return a\n\ndef prod(a):\n    s = 1\n    for i in range(len(a)):\n        s = s * a[i]\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = primeFactors(n)\n    c = list(set(b))\n    if len(c) >= 3:\n        print('YES')\n        print(c[0], c[1], n // (c[0] * c[1]))\n    elif len(c) == 2 and len(b) >= 4:\n        print('YES')\n        print(c[0], c[1], n // (c[0] * c[1]))\n    elif len(c) == 1 and len(b) >= 6:\n        print('YES')\n        print(c[0], c[0] ** 2, n // c[0] ** 3)\n    else:\n        print('NO')", "def fin(n):\n    for a in range(2, int(n ** (1 / 3)) + 1):\n        if n % a == 0:\n            x = n / a\n            for b in range(2, int(x ** (1 / 2)) + 1):\n                if x % b == 0:\n                    y = int(x / b)\n                    if a != b and b != y and (y != a):\n                        return (a, b, y)\n    return (0, 0, 0)\nfor _ in range(int(input())):\n    n = int(input())\n    (p, q, r) = (0, 0, 0)\n    (p, q, r) = fin(n)\n    if p != 0:\n        print('YES')\n        print(p, q, r)\n    else:\n        print('NO')", "from math import ceil\n\ndef find(n, p, ans):\n    for i in range(2, ceil(n ** (1 / p)) + 1, 1):\n        if n % i == 0:\n            if p == 3:\n                ans += find(n // i, 2, [i])\n                if len(set(ans)) == 3:\n                    return ans\n                ans = []\n            elif p == 2 and n // i > 1:\n                new = ans + [n // i, i]\n                if len(set(new)) == 3:\n                    return new\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    k = find(n, 3, [])\n    if len(k) == 3:\n        print('YES')\n        print(*k, sep=' ')\n    else:\n        print('NO')", "from math import ceil\n\ndef find(n, p, ans):\n    for i in range(2, ceil(n ** (1 / p)) + 1, 1):\n        if n % i == 0:\n            if p == 3:\n                ans += find(n // i, 2, [i])\n                if len(ans) == 3:\n                    return ans\n                ans = []\n            elif p == 2 and n // i > 1:\n                new = ans + [n // i, i]\n                if len(set(new)) == 3:\n                    return new\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    k = find(n, 3, [])\n    if len(k) == 3:\n        print('YES')\n        print(*k, sep=' ')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = n\n    d = {}\n    while n % 2 == 0:\n        if 2 not in d:\n            d[2] = 1\n        else:\n            d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] = 1\n    l = len(d)\n    f = 0\n    if l == 1:\n        for key in d.keys():\n            if d[key] >= 6:\n                f = 1\n                a = key\n                b = key ** 2\n                c = int(m / (a * b))\n    elif l == 2:\n        i = 0\n        k = 0\n        for key in d.keys():\n            k = k + d[key]\n            if i == 0:\n                a = key\n            else:\n                b = key\n            i = i + 1\n        if k >= 4:\n            f = 1\n            c = int(m / (a * b))\n    else:\n        f = 1\n        i = 0\n        for key in d.keys():\n            if i == 0:\n                a = key\n            elif i == 1:\n                b = key\n            else:\n                break\n            i = i + 1\n        c = int(m / (a * b))\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(a, b, c)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = []\n    temp = n\n    while n % 2 == 0:\n        d.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d.append(i)\n            n //= i\n    if n > 2:\n        d.append(n)\n    if len(d) < 3:\n        print('NO')\n    elif len(d) == 3 and (d[0] == d[1] or d[1] == d[2]):\n        print('NO')\n    else:\n        a = d[0]\n        if d[1] == d[0]:\n            b = d[1] * d[2]\n            c = int(temp / (a * b))\n        else:\n            b = d[1]\n            c = int(temp / (a * b))\n        if a == b or a == c or b == c:\n            print('NO')\n        else:\n            print('YES')\n            print(a, b, c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    dah = False\n    for i in range(2, int(n ** (1.0 / 3)) + 1):\n        if n % i == 0:\n            ii = int(n / i)\n            for j in range(i + 1, int(ii ** (1.0 / 2)) + 1):\n                if ii % j == 0:\n                    jj = int(ii / j)\n                    if i != j and j != jj and (i != jj):\n                        print('YES')\n                        print(i, j, jj)\n                        dah = True\n                        break\n        if dah:\n            break\n    if not dah:\n        print('NO')", "def solve(n):\n    l = []\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            d = n / i\n            l.append(i)\n            for j in range(i + 1, int(n ** (1 / 2)) + 1):\n                if d % j == 0:\n                    d2 = d / j\n                    l.append(j)\n                    l.append(int(d2))\n                    break\n            break\n    if len(l) == 3 and l[0] != l[1] and (l[1] != l[2]) and (l[0] != l[2]):\n        return [l, 'YES']\n    return [l, 'NO']\nfor _ in range(int(input())):\n    n = int(input())\n    res = solve(n)\n    if res[1] == 'YES':\n        print(res[1])\n        print(*res[0])\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = []\n    while n % 2 == 0:\n        d.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d.append(i)\n            n //= i\n    if n > 2:\n        d.append(n)\n    if len(d) < 3:\n        print('NO')\n    elif len(d) == 3 and (d[0] == d[1] or d[1] == d[2]):\n        print('NO')\n    else:\n        a = d[0]\n        if d[1] == d[0]:\n            b = d[1] * d[2]\n            c = math.prod(d[3:])\n        else:\n            b = d[1]\n            c = math.prod(d[2:])\n        if a == b or a == c or b == c:\n            print('NO')\n        else:\n            print('YES')\n            print(a, b, c)", "def fun(n, start):\n    for i in range(max(2, start), int(n ** 0.5) + 2):\n        if n % i == 0:\n            return i\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    (a, b, c) = (None, None, None)\n    a = fun(n, 2)\n    if a:\n        b = fun(n // a, a + 1)\n        if b:\n            c = n // (a * b)\n    if a and b and c and (a > 1) and (b > 1) and (c > 1) and (a != b) and (b != c) and (c != a):\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')", "for i in range(int(input())):\n    k = set()\n    a = int(input())\n    for i in range(2, 10000):\n        if len(k) < 2:\n            if a % i == 0:\n                a = a // i\n                k.add(i)\n        elif len(k) == 2 and a > 2:\n            k.add(a)\n    if len(k) == 3:\n        print('YES')\n        for i in sorted(k):\n            print(i, end=' ')\n        print()\n    else:\n        print('NO')", "import math\n\ndef solve(n):\n    arr = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            arr.append(i)\n            n = n // i\n    if n > 1:\n        arr.append(n)\n    (s, c) = ([], 1)\n    for i in arr:\n        c *= i\n        if len(s) < 3 and c not in s:\n            s.append(c)\n            c = 1\n    s[-1] = s[-1] * c\n    if len(s) < 3:\n        print('NO')\n    else:\n        print('YES')\n        print(f'{s[0]} {s[1]} {s[2]}')\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    solve(n)", "def mind(n):\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 0 and i not in [a, b, c]:\n            return i\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    (a, b, c) = (1, 1, 1)\n    a = mind(n)\n    n //= a\n    b = mind(n)\n    n //= b\n    c = n\n    q = set([a, b, c])\n    if 1 not in q and len(q) == 3:\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')", "def prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nt = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    l = prime_factorize(n)\n    L = l[0]\n    R = l[-1]\n    if L == R and len(l) > 3:\n        R *= l[-2]\n        l.pop(-1)\n    if len(l) >= 3 and L != R:\n        prod = 0\n        for i in range(len(l[1:-1])):\n            prod = prod * l[1 + i] if prod != 0 else l[1]\n        if prod != L and prod != R:\n            ans.append('YES')\n            ans.append(str(L) + ' ' + str(prod) + ' ' + str(R))\n        else:\n            ans.append('NO')\n    else:\n        ans.append('NO')\nfor i in range(len(ans)):\n    print(ans[i])", "import math\ndebug = False\nif debug:\n    f = open('test', 'r')\nelse:\n    f = None\n\ndef line(file):\n    if debug:\n        return file.__next__().strip()\n    return input()\ntest_cases = int(line(f))\nfor _ in range(test_cases):\n    n = int(line(f))\n\n    def solve(n):\n        throot = int(math.pow(n, 1 / 3)) + 1\n        for a in range(2, throot):\n            if n % a == 0:\n                twroot = int(math.sqrt(n / a)) + 1\n                for b in range(a + 1, twroot):\n                    if n / a % b == 0:\n                        c = int(n / a / b)\n                        if c != b:\n                            return f'{a} {b} {c}'\n        raise EnvironmentError()\n    try:\n        string = solve(n)\n        print('YES')\n        print(string)\n    except EnvironmentError:\n        print('NO')\nif debug:\n    f.close()", "import math\n\ndef factor(b, n):\n    d = math.ceil(math.sqrt(n))\n    for i in range(b, d + 1):\n        if n % i == 0:\n            return i\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    ans = True\n    (a, b, c) = (None, None, None)\n    a = factor(2, n)\n    if a != None:\n        b = factor(a + 1, n // a)\n        if b != None:\n            c = n // (a * b)\n        else:\n            ans = False\n    else:\n        ans = False\n    if not ans:\n        print('NO')\n    elif a == b or b == c or c == a:\n        print('NO')\n    else:\n        print('YES')\n        print(a, b, c)", "import math\n\ndef product(n):\n    products = [0, 0, 0]\n    i = 2\n    for s in range(2):\n        result = getSmallestPrime(i, n)\n        if result > 1:\n            products[s] = result\n            n = int(n / result)\n            i = result + 1\n        else:\n            products[0] = 0\n            break\n    products[-1] = n\n    if n > 1 and products[1] < products[-1]:\n        products[-1] = n\n    else:\n        products[0] = 0\n    return products\n\ndef getSmallestPrime(i, n):\n    for num in range(i, round(math.sqrt(n + 1) + 1)):\n        if n % num == 0:\n            return num\n    return 0\n\ndef main():\n    size = int(input())\n    keyboard = []\n    while size > 0:\n        keyboard.append(int(input()))\n        size = size - 1\n    for num in keyboard:\n        rtList = product(num)\n        if rtList[0] == 0:\n            print('NO')\n        else:\n            print('YES')\n            print(rtList[0], rtList[1], rtList[2])\nmain()", "from math import ceil, gcd, trunc\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\n\ndef li():\n    return list(map(int, input().split()))\n\ndef arr(a):\n    return array('i', a)\n\ndef temp():\n    print(int(input()))\n\ndef smstdiv(a, b=1):\n    for i in range(2, ceil(a ** 0.5)):\n        if a % i == 0 and i != b:\n            return i\n    return -1\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        sd = smstdiv(n)\n        if sd > 0:\n            sd2 = smstdiv(n // sd, sd)\n            if sd2 > 0:\n                print('YES')\n                print(sd, sd2, n // (sd * sd2))\n            else:\n                print('NO')\n        else:\n            print('NO')\nsolve()", "from math import sqrt, ceil, prod\n\ndef primeFac(x):\n    arr = []\n    flag = True\n    while flag:\n        flag = False\n        for i in range(2, ceil(sqrt(x) + 1)):\n            if not x % i:\n                arr.append(i)\n                x = int(x / i)\n                flag = True\n                break\n    if x != 1:\n        arr.append(x)\n    return arr\n\ndef distPrim(xs):\n    arr = []\n    dist = 0\n    for x in xs:\n        if x not in arr:\n            dist += 1\n            arr.append(x)\n    return dist\nfor _q in range(int(input())):\n    arr = primeFac(int(input()))\n    nprim = distPrim(arr)\n    if nprim == 1 and len(arr) <= 5:\n        print('NO')\n    elif nprim == 2 and len(arr) <= 3:\n        print('NO')\n    elif len(arr) < 3:\n        print('NO')\n    else:\n        print('YES')\n        if nprim == 1:\n            print(arr[0], arr[1] * arr[2], prod(arr[3:]))\n        elif nprim == 2:\n            if arr[1] * arr[2] != prod(arr[3:]):\n                print(arr[0], arr[1] * arr[2], prod(arr[3:]))\n            elif arr[0] == arr[1]:\n                print(arr[0] * arr[1], arr[2], prod(arr[3:]))\n            else:\n                print(arr[0], arr[1], prod(arr[2:]))\n        elif len(arr) == 3:\n            print(arr[0], arr[1], prod(arr[2:]))\n        elif arr[1] * arr[2] != prod(arr[3:]):\n            print(arr[0], arr[1] * arr[2], prod(arr[3:]))\n        else:\n            print(arr[0] * arr[1], arr[2], prod(arr[3:]))", "def foo(num):\n    isSimple = True\n    k = 0\n    while k < arr.__len__() and arr[k] <= math.sqrt(num):\n        if num % arr[k] == 0:\n            isSimple = False\n            num = num / arr[k]\n            break\n        k += 1\n    return num\nimport math\nn = int(input())\narr = []\nroot = math.sqrt(1000000000)\nfor num in range(2, int(root) + 1):\n    isSimple = True\n    for delimiter in range(2, int(math.sqrt(num)) + 1):\n        if num % delimiter == 0:\n            isSimple = False\n            break\n    if isSimple:\n        arr.append(num)\nfor i in range(n):\n    num = int(input())\n    res = foo(num)\n    if res == num:\n        print('NO')\n        continue\n    else:\n        d1 = num / res\n        num = res\n    res = foo(num)\n    if res == num:\n        print('NO')\n        continue\n    else:\n        d2 = num / res\n        num = res\n    if d1 == d2:\n        res = foo(num)\n        if res == num:\n            print('NO')\n            continue\n        d2 *= num / res\n        num = res\n    if d1 != num and d2 != num and (d1 != d2):\n        print('YES')\n        print('%d %d %d' % (d1, d2, res))\n    else:\n        print('NO')", "from math import sqrt\nn = int(input())\ns = 32000\nlst = [2]\nfor i in range(3, s + 1, 2):\n    if i > 10 and i % 10 == 5:\n        continue\n    for j in lst:\n        if j * j - 1 > i:\n            lst.append(i)\n            break\n        if i % j == 0:\n            break\n    else:\n        lst.append(i)\nfor i in range(n):\n    m = int(input())\n    m1 = m\n    p = []\n    k = 0\n    c = lst[k]\n    while len(p) < 3 and c <= sqrt(m1):\n        if m % c == 0:\n            m = m // c\n            p.append(c)\n        else:\n            k = k + 1\n            c = lst[k]\n    if len(p) == 3:\n        if p[0] == p[1]:\n            p[1] = p[1] * p[2]\n        p[2] = m1 // p[0] // p[1]\n    if len(p) == 2:\n        p.append(m1 // p[0] // p[1])\n    if len(p) == 3 and p[2] > 1 and (p[0] != p[2]) and (p[1] != p[2]) and (p[0] != p[1]):\n        print('YES')\n        print(*p)\n    else:\n        print('NO')", "def dividened(number, dict1):\n    for i in range(2, int(number ** (1 / 2)) + 1):\n        if number % i == 0 and dict1.get(i) == None:\n            dict1[i] = 1\n            return (number // i, i, dict1)\n    return (1, number, dict1)\nfor _ in range(int(input())):\n    number = int(input())\n    d = []\n    case = True\n    dict1 = {}\n    for i in range(2):\n        (number, op, dict1) = dividened(number, dict1)\n        if number == 1:\n            print('NO')\n            case = False\n            break\n        else:\n            d.append(op)\n    if dict1.get(number) == None:\n        d.append(number)\n    else:\n        case = False\n        print('NO')\n    if case:\n        print('YES')\n        print(*d)", "def linp():\n    return list(map(int, input().split()))\n\ndef minp():\n    return map(int, input().split())\n\ndef iinp():\n    return int(input())\n\ndef test():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef find(n, x):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            k = n // i\n            if i != x and k != x and (i != k):\n                return (True, i, k)\n    return (False, 1, n)\n\ndef solve():\n    n = iinp()\n    (t, a, b) = find(n, 1)\n    if t:\n        (t1, a1, b1) = find(a, b)\n        if t1:\n            print('YES')\n            print(a1, b1, b)\n            return 'YES'\n        (t2, a2, b2) = find(b, a)\n        if t2:\n            print('YES')\n            print(a, a2, b2)\n            return 'YES'\n        print('NO')\n        return 'NO'\n    else:\n        print('NO')\n        return 'NO'\n\ndef main():\n    for _ in range(test()):\n        solve()\nmain()", "def SieveOfEratosthenes(n):\n    data = []\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            data.append(p)\n    return data\nl = SieveOfEratosthenes(10 ** 6)\nfor t in range(int(input())):\n    data = []\n    n = int(input())\n    d = n\n    for i in l:\n        if i * i > n:\n            break\n        if n % i == 0:\n            while n % i == 0:\n                data.append(i)\n                n = n / i\n    if n > 1:\n        data.append(n)\n    (a, b, c) = (data[0], 0, 0)\n    if len(data) <= 2:\n        print('NO')\n    else:\n        b = data[1]\n        if a == data[1]:\n            b = data[1] * data[2]\n        c = d // (a * b)\n        if c == 1 or c == b or c == a:\n            print('NO')\n        else:\n            print('YES')\n            print(a, b, c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [i for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n    f = False\n    (a, b, c) = (0, 0, 0)\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            mul = arr[i] * arr[j]\n            if n % (n // mul) == 0 and n // mul != arr[i] and (n // mul != arr[j]):\n                f = True\n                (a, b, c) = (arr[i], arr[j], n // mul)\n                break\n        if f:\n            break\n    if a + b + c == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(a, b, c)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l = int(n ** (1 / 3))\n    a = 1\n    for k in range(2, l + 1):\n        if n % k == 0:\n            a = k\n            break\n    b = 1\n    c = 1\n    if a == 1:\n        print('NO')\n    else:\n        m = n / a\n        l = int(m ** (1 / 2))\n        for k in range(a + 1, l + 1):\n            if m % k == 0:\n                b = k\n                c = int(m / b)\n                break\n        if a != 1 and b != 1 and (c != 1) and (c != b):\n            print('YES')\n            print(a, b, c)\n        else:\n            print('NO')", "import math\n\ndef main():\n    t = int(input())\n    out_lst = []\n    if t <= 100 and t >= 1:\n        for i in range(t):\n            n = int(input())\n            div_n = n\n            lst = []\n            n_rang = int(math.sqrt(n))\n            for j in range(2, n_rang):\n                if div_n % j == 0:\n                    div_n = div_n / j\n                    lst.append(j)\n                    if len(lst) == 2:\n                        if int(div_n) not in lst:\n                            lst.append(int(div_n))\n                        break\n            if len(lst) == 3 and 1 not in lst:\n                out_lst.append('YES')\n                out_lst.append('{} {} {}'.format(lst[0], lst[1], lst[2]))\n            else:\n                out_lst.append('NO')\n        for k in out_lst:\n            print(k)\n    else:\n        return False\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = 'NO'\n    p = q = 1\n    for j in range(2, int(n ** (1 / 3)) + 2):\n        if n % j == 0:\n            p = j\n            n = n // p\n            ans = 'YES'\n            break\n    if ans == 'YES':\n        ans = 'NO'\n        for j in range(p + 1, int(n ** (1 / 2)) + 2):\n            if n % j == 0:\n                q = j\n                n = n // q\n                ans = 'YES'\n                break\n    if n <= q:\n        ans = 'NO'\n    print(ans)\n    if ans == 'YES':\n        print(p, q, n)", "def product(n):\n    a = int(min_divisor(2, n))\n    if a == n:\n        return False\n    else:\n        b = int(min_divisor(a + 1, n / a))\n        if b == a or b == 1:\n            return False\n        else:\n            c = int(n / (a * b))\n            if c == a or c == b or c == 1:\n                return False\n            else:\n                return (a, b, c)\n\ndef min_divisor(s, n):\n    for i in range(s, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    else:\n        return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = product(n)\n    if ans:\n        print('YES')\n        print(*list(ans))\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n\n    def solve(n):\n        ans = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                ans.append(i)\n                n /= i\n                break\n        if len(ans) == 0:\n            return []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0 and i != ans[0] and (n / i != ans[0]) and (i != n / i):\n                ans.append(i)\n                ans.append(int(n / i))\n                break\n        return ans\n    ans = solve(n)\n    if len(ans) != 3:\n        print('NO')\n    else:\n        print('YES')\n        print(' '.join(list(map(str, ans))))", "import math\n\ndef solution(n):\n    a = 0\n    b = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            a = i\n            n //= i\n            break\n    if a:\n        for j in range(a + 1, int(math.sqrt(n)) + 1):\n            if n % j == 0:\n                b = j\n                n //= j\n                break\n    if a and b and (b != n):\n        print('YES')\n        print(f'{a} {b} {n}')\n    else:\n        print('NO')\nt = int(input())\nkls = [int(input()) for _ in range(t)]\nfor k in kls:\n    solution(k)", "for _ in range(int(input())):\n    n = int(input())\n    k = []\n    for i in range(2, 10000):\n        if n % i == 0:\n            k.append(i)\n            n = n // i\n            break\n    for j in range(2, 10000):\n        if n % j == 0:\n            if j not in k:\n                k.append(j)\n                n = n // j\n                break\n    if len(k) == 2:\n        if n != 1 and n != k[0] and (n != k[1]):\n            print('YES')\n            print(k[0], k[1], n)\n        else:\n            print('NO')\n    else:\n        print('NO')", "def solve(n):\n    (a, b, c) = (None, None, None)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            a = i\n            n = n / i\n            break\n    else:\n        return None\n    for i in range(a + 1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            b = i\n            c = int(n / i)\n            break\n    else:\n        return None\n    if b != c and a != c:\n        return (a, b, c)\n    else:\n        return None\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = solve(n)\n    if res:\n        print('YES')\n        print(*res)\n    else:\n        print('NO')", "import math\n\ndef factors(n):\n    num = int(math.sqrt(n)) + 1\n    fac = []\n    for i in range(2, num):\n        if n % i == 0:\n            fac.append(i)\n            n = n // i\n            if len(fac) == 2:\n                break\n    if len(fac) == 2 and n > fac[1]:\n        print('YES')\n        print(fac[0], fac[1], n)\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 23:\n        print('NO')\n    else:\n        factors(n)", "nn = int(input())\nimport math\n\ndef isprime(n):\n    if n <= 7:\n        return (False, 1)\n    sqrt = int(math.sqrt(n)) + 1\n    for i in range(2, sqrt):\n        if n % i == 0:\n            return (True, i)\n    return (False, 1)\n\ndef isprime2(n):\n    if n <= 3:\n        return (False, 1)\n    sqrt = int(math.sqrt(n)) + 1\n    for i in range(2, sqrt):\n        if n % i == 0:\n            return (True, i)\n    return (False, 1)\nfor dfdfdi in range(nn):\n    v = int(input())\n    if v <= 7:\n        print('NO')\n        continue\n    (firstTrue, firstPrime) = isprime(v)\n    if not firstTrue:\n        print('NO')\n        continue\n    v = v // firstPrime\n    (secondTrue, secondPrime) = isprime2(v)\n    if not secondTrue:\n        print('NO')\n        continue\n    final = v // secondPrime\n    if firstPrime == secondPrime or secondPrime == final:\n        (thirdTrue, thirdPrime) = isprime2(final)\n        if not thirdTrue:\n            print('NO')\n        else:\n            secondPrime *= thirdPrime\n            final = final // thirdPrime\n            if secondPrime == final or secondPrime == firstPrime or final == firstPrime:\n                print('NO')\n                continue\n            else:\n                print('YES')\n                print(str(firstPrime) + ' ' + str(secondPrime) + ' ' + str(final))\n    else:\n        print('YES')\n        print(str(firstPrime) + ' ' + str(secondPrime) + ' ' + str(final))", "def factors(n):\n    factor = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factor.append(i)\n    return factor\nt = int(input())\nfor l in range(t):\n    n = int(input())\n    x = 0\n    factor = factors(n)\n    lenfactor = len(factor)\n    for i in range(lenfactor):\n        for j in range(i + 1, lenfactor):\n            k = n / (factor[i] * factor[j])\n            if k % 1 == 0 and k != factor[i] and (k != factor[j]):\n                print('YES')\n                print(str(factor[i]) + ' ' + str(factor[j]) + ' ' + str(int(k)))\n                x = 1\n                break\n        if x == 1:\n            break\n    if x == 0:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 2 * 3 * 4:\n        print('NO')\n    else:\n        r = []\n        i = 2\n        j = 3\n        while j > 1:\n            l = len(r)\n            for k in range(i, int(n ** (1 / j) + 2)):\n                if n % k == 0:\n                    r.append(k)\n                    n //= k\n                    i = k + 1\n                    j -= 1\n                    break\n            if len(r) == l or len(r) == 2:\n                break\n        if len(r) == 2 and n > int(r[-1]):\n            r.append(n)\n            print('YES')\n            print(' '.join(map(str, r)))\n        else:\n            print('NO')", "def process(n, i, sol):\n    for j in range(i + 1, int(n ** 0.5) + 1):\n        if n % j == 0:\n            sol.append(j)\n            if len(sol) == 1:\n                process(n // j, j, sol)\n                break\n            if len(sol) == 2:\n                if j != n // j:\n                    sol.append(n // j)\n                break\n    return sol\nfor _ in range(int(input())):\n    n = int(input())\n    sol = []\n    process(n, 1, sol)\n    if len(sol) == 3:\n        print('YES')\n        print(*sol)\n    else:\n        print('NO')", "def fact(n):\n    i = 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and i not in l:\n            return i\n    return 0\nfor _ in range(int(input())):\n    l = []\n    n = int(input())\n    a = fact(n)\n    l.append(a)\n    if a != 0:\n        b = fact(n / a)\n    else:\n        print('NO')\n        continue\n    if b != 0:\n        z = n // (a * b)\n    else:\n        print('NO')\n        continue\n    if z != a and z != b and (z != 1):\n        print('YES')\n        print(a, b, z)\n    else:\n        print('NO')", "import sys\nfrom math import sqrt\n\ndef readlines(type=int):\n    return list(map(type, sys.stdin.readline().split()))\n\ndef read(type=int):\n    return type(sys.stdin.readline().strip())\njoint = lambda it, sep=' ': sep.join([str(i) if type(i) != list else sep.join(map(str, i)) for i in it])\n\ndef solve(num):\n\n    def break_(num, n, already=-1):\n        for i in range(n, int(sqrt(num)) + 1):\n            if num % i == 0 and i != num // i and (i != already) and (num // i != already) and (num // i != 1):\n                return (i, num // i)\n        return (-1, -1)\n    (first, second) = break_(num, 2)\n    if first == -1:\n        return 'NO'\n    (third, fourth) = break_(second, first + 1, first)\n    if third == -1:\n        return 'NO'\n    return 'YES\\n{} {} {}'.format(first, third, fourth)\n    return 'NO'\n\ndef main():\n    print(joint(list(map(solve, [read() for _ in range(read())])), '\\n'))\nmain()", "def divisors(n):\n    i = 2\n    while i * i * i < n:\n        if n % i == 0:\n            d = n // i\n            j = i + 1\n            while j * j < d:\n                if d % j == 0:\n                    return [i, j, d // j]\n                else:\n                    j += 1\n            else:\n                i += 1\n        else:\n            i += 1\n    else:\n        return [-1]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    array = divisors(n)\n    if array == [-1]:\n        print('NO')\n    else:\n        print('YES')\n        print(' '.join(map(str, array)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = n\n    a = dict()\n    while n % 2 == 0:\n        a[2] = a.get(2, 0) + 1\n        n //= 2\n    while n % 3 == 0:\n        a[3] = a.get(3, 0) + 1\n        n //= 3\n    (p, q) = (2, 1)\n    while q * q <= n:\n        p = 6 - p\n        q += p\n        while n % q == 0:\n            a[q] = a.get(q, 0) + 1\n            n //= q\n    if n != 1:\n        a[n] = 1\n    for i in list(a.keys()):\n        if a[i] > 5:\n            a[i] -= 5\n            a[i * i] = 1\n            a[i * i * i] = 1\n        elif a[i] > 2:\n            a[i] -= 2\n            a[i * i] = 1\n    k = list(a.keys())\n    if len(a) > 1 and m // (k[0] * k[1]) != k[0] and (m // (k[0] * k[1]) != k[1]) and (m // (k[0] * k[1]) != 1):\n        print('YES')\n        print(k[0], k[1], m // (k[0] * k[1]))\n    else:\n        print('NO')", "def func(n):\n    l = []\n    cnt = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            cnt += 1\n            n //= i\n            l.append(i)\n        if cnt == 2:\n            if n > i:\n                return 'YES\\n' + str(l[0]) + ' ' + str(l[1]) + ' ' + str(n)\n            else:\n                return 'NO'\n    return 'NO'\nt = int(input())\nf = []\nfor i in range(t):\n    n = int(input())\n    a = func(n)\n    f.append(a)\nfor x in f:\n    print(x)", "import math\n\ndef div(n):\n    y = n\n    c = 0\n    ans = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if y % i == 0:\n            c += 1\n            y = y // i\n            ans.append(i)\n            if c >= 2:\n                break\n    print('YES' if c >= 2 and y not in ans else 'NO')\n    if c >= 2 and y not in ans:\n        print(*ans + [y])\nfor _ in range(int(input())):\n    n = int(input())\n    div(n)", "for j in range(int(input())):\n    n = int(input())\n    flag = False\n    for i in range(2, int(n ** (1 / 3)) + 1):\n        if n % i == 0:\n            z = n // i\n            for k in range(i + 1, int(z ** 0.5) + 1):\n                if z % k == 0 and k * k != z:\n                    flag = True\n                    print('YES')\n                    print(i, k, z // k)\n                    break\n        if flag == True:\n            break\n    if flag == False:\n        print('NO')", "import math\nT = int(input())\n\ndef check(n, p):\n    ans = -1\n    for i in range(p + 1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans = i\n            break\n    return ans\nfor i in range(T):\n    l = []\n    n = int(input())\n    ans = 'YES'\n    hello = 1\n    for i in range(3):\n        hello = check(n, hello)\n        if hello == -1 and n < 2:\n            ans = 'NO'\n            break\n        else:\n            if hello == -1 or i == 2:\n                hello = n\n                if len(l) > 0 and l[-1] == hello:\n                    ans = 'NO'\n                    break\n            n = n // hello\n            l.append(hello)\n    print(ans)\n    if ans == 'YES':\n        print(str(l[0]) + ' ' + str(l[1]) + ' ' + str(l[2]))", "from math import sqrt\n\ndef primes(n):\n    (y, count, result) = (n, 0, list())\n    for i in range(2, int(sqrt(n)) + 1):\n        if y % i == 0:\n            count += 1\n            y = y // i\n            result.append(i)\n            if count >= 2:\n                break\n    print('YES' if count >= 2 and y not in result else 'NO')\n    if count >= 2 and y not in result:\n        print(*result + [y])\nfor _ in range(int(input())):\n    primes(int(input()))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (a, b, c) = (0, 0, 0)\n    i = 1\n    while i < n and i < 10 ** 4:\n        i += 1\n        if n % i == 0:\n            n = n // i\n            if a == 0:\n                a = i\n            elif b == 0:\n                b = i\n                c = n\n                break\n    if c > 2 and b != c and (c != a):\n        print('YES')\n        print(a, b, c)\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    cuben = int(n ** (1.0 / 3))\n    (a, b, c) = (0, 0, 0)\n    ispossible = False\n    for i in range(2, cuben + 1):\n        if n % i == 0:\n            num = int(n / i)\n            sqn = int(num ** (1.0 / 2))\n            for j in range(i + 1, sqn + 1):\n                if num % j == 0:\n                    k = int(num / j)\n                    if not j == k:\n                        a = i\n                        b = j\n                        c = k\n                        ispossible = True\n                        break\n        if ispossible:\n            break\n    if ispossible:\n        print('YES\\n' + str(a) + ' ' + str(b) + ' ' + str(c))\n    else:\n        print('NO')", "def div(n):\n    s = set()\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 0:\n            s.add(i)\n            s.add(n // i)\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(div(n))\n    s.sort()\n    if len(s) > 2:\n        found = 0\n        a = b = c = 0\n        d = len(s)\n        for i in range(d):\n            for j in range(i + 1, d):\n                if n % (s[i] * s[j]) == 0:\n                    g = n // (s[i] * s[j])\n                    if g != s[i] and g != s[j] and (g >= 2):\n                        found = 1\n                        a = s[i]\n                        b = s[j]\n                        c = g\n                        break\n            if found:\n                break\n        if found:\n            print('YES')\n            print(a, b, c)\n        else:\n            print('NO')\n    else:\n        print('NO')", "def solve():\n    ans = []\n    n = int(input())\n    for j in range(2, int(n ** (1 / 2)) + 1):\n        if n % j == 0:\n            ans.append(j)\n            ans.append(n // j)\n    ans = list(set(ans))\n    if len(ans) < 3:\n        print('NO')\n    else:\n        for j in range(len(ans)):\n            for g in range(j + 1, len(ans)):\n                for k in range(g + 1, len(ans)):\n                    if ans[j] * ans[g] * ans[k] == n:\n                        print('YES')\n                        print(ans[j], ans[g], ans[k])\n                        return\n        print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    pos = False\n    for a in range(2, int(pow(n, 1 / 3)) + 1):\n        if n % a == 0:\n            z = n // a\n            for b in range(a + 1, int(sqrt(z)) + 1):\n                if z % b == 0 and b * b != z:\n                    pos = True\n                    print('YES')\n                    print(a, b, z // b)\n                    break\n        if pos:\n            break\n    if not pos:\n        print('NO')", "q = int(input())\n\ndef div_by_primes(n):\n    p = []\n    s = []\n    for d in range(2, int(n ** (1 / 2)) + 1):\n        if n % d == 0:\n            p.append(d)\n            s.append(0)\n            while n % d == 0:\n                s[-1] += 1\n                n //= d\n    if n > 1:\n        p.append(n)\n        s.append(1)\n    return (p, s)\n\ndef s_mult(s, p):\n    ans = 1\n    for i in range(len(s)):\n        ans *= p[i] ** s[i]\n    return ans\nfor _ in range(q):\n    n = int(input())\n    (p, s) = div_by_primes(n)\n    if len(p) == 1:\n        if s[0] < 6:\n            print('NO')\n        else:\n            print('YES\\n', p[0], p[0] ** 2, p[0] ** (s[0] - 3))\n    elif len(p) == 2:\n        if s[0] + s[1] < 4:\n            print('NO')\n        elif s[0] == 1:\n            print('YES\\n', p[0], p[1], p[1] ** (s[1] - 1))\n        elif s[1] == 1:\n            print('YES\\n', p[0], p[1], p[0] ** (s[0] - 1))\n        else:\n            print('YES\\n', p[0], p[1], p[0] ** (s[0] - 1) * p[1] ** (s[1] - 1))\n    else:\n        print('YES\\n', p[0] ** s[0], p[1] ** s[1], s_mult(s[2:], p[2:]))", "def factor(n):\n    dict1 = {}\n    for i in range(2, int(pow(n, 0.5)) + 1):\n        if n % i == 0:\n            if i not in dict1:\n                dict1[i] = 1\n            if n // i not in dict1:\n                dict1[n // i] = 1\n    return dict1\nfor t in range(int(input())):\n    n = int(input())\n    dict1 = factor(n)\n    dict1 = sorted(dict1)\n    a = 0\n    b = 0\n    c = -1\n    for i in dict1:\n        if a == 0:\n            a = i\n        else:\n            b = i\n            d = n // (a * b)\n            if d != a and d != b and (d in dict1):\n                c = d\n                break\n    if c == -1:\n        print('NO')\n    else:\n        print('YES')\n        print(a, b, c, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    divs = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs = i\n            break\n    a = divs\n    if a == 0:\n        print('NO')\n    else:\n        (b, c) = (0, 0)\n        n /= a\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0 and i != a:\n                if n / i != i:\n                    b = int(i)\n                    c = int(n // i)\n                    break\n        if b > 0:\n            print('YES')\n            print(a, b, c)\n        else:\n            print('NO')", "import math\nfrom itertools import permutations\n\ndef divisores(n):\n    large_divisors = []\n    for k in range(1, int(math.sqrt(n) + 1)):\n        if n % k == 0:\n            yield k\n            if k * k != n:\n                large_divisors.append(n // k)\n    for d in reversed(large_divisors):\n        yield d\nt = int(input())\nfor k in range(t):\n    q = int(input())\n    divisoresL = list(divisores(q))\n    if len(divisoresL) < 5:\n        print('NO')\n    else:\n        flag = 0\n        divisoresL.remove(divisoresL[0])\n        divisoresL.remove(divisoresL[len(divisoresL) - 1])\n        for subset in permutations(divisoresL, 3):\n            if subset[0] * subset[1] * subset[2] == q:\n                print('YES')\n                print('{} {} {}'.format(subset[0], subset[1], subset[2]))\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\n\ndef fact(n):\n    res = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            res.append(i)\n            res.append(n // i)\n    if int(n ** 0.5) ** 2 == n:\n        res.pop()\n    return res\n\ndef sol():\n    n = rri()\n    f = fact(n)\n    if len(f) < 3:\n        print('NO')\n        return\n    f.sort()\n    a = f[0]\n    d = n // a\n    for i in range(1, len(f)):\n        for j in range(i + 1, len(f)):\n            if f[i] * f[j] == d:\n                print('YES')\n                print(a, f[i], f[j])\n                return\n    print('NO')\n    return\nt = rri()\nfor _ in range(t):\n    sol()", "for _ in range(int(input())):\n    n = int(input())\n\n    def fun(n):\n        i = 2\n        while i * i * i <= n:\n            if n % i == 0:\n                t = n // i\n                j = 2\n                while j * j <= t:\n                    if t % j == 0:\n                        k = t // j\n                        if i != j and i != k and (k != j):\n                            print('YES')\n                            print(i, j, k)\n                            return\n                    j += 1\n            i += 1\n        print('NO')\n    fun(n)", "def facts(n):\n    l = []\n    for i in range(2, int(pow(n, 0.5)) + 1):\n        if n % i == 0:\n            l.append(i)\n            l.append(n // i)\n    return list(set(l))\nfor _ in range(int(input())):\n    n = int(input())\n    l = facts(n)\n    l.sort()\n    d = {}\n    for i in l:\n        d[i] = 0\n    flag = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            (a, b) = (l[i], l[j])\n            c = n // (a * b)\n            try:\n                if d[c] == 0 and a != c and (b != c):\n                    print('YES')\n                    print(a, b, c)\n                    flag = 1\n            except:\n                continue\n            if flag:\n                break\n        if flag:\n            break\n    if not flag:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    try:\n        a = next((i for i in range(2, int(n ** 0.5) + 1) if n % i == 0))\n        n //= a\n        b = next((i for i in range(a + 1, int(n ** 0.5) + 1) if n % i == 0))\n        if n // b <= b:\n            raise\n        else:\n            print('YES')\n            print(a, b, n // b)\n    except:\n        print('NO')", "t = int(input())\n\ndef factor(n):\n    arr = set({})\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            arr.add(i)\n            arr.add(int(n / i))\n    return arr\n\ndef find(n, arr):\n    for a in arr:\n        for b in arr:\n            for c in arr:\n                if a != b and b != c and (a != c) and (a * b * c == n):\n                    print('YES')\n                    return str(a) + ' ' + str(b) + ' ' + str(c)\n    return 'NO'\nfor _ in range(t):\n    n = int(input())\n    arr = factor(n)\n    print(find(n, arr))", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    flag = 0\n    arr = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            arr.append(i)\n            n = n // i\n            if len(arr) == 2:\n                if n in arr or n < 2:\n                    break\n                arr.append(n)\n                flag = 1\n                break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(*arr)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    flag = 0\n    arr = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            arr.append(i)\n            n = n // i\n            if len(arr) == 2:\n                if n in arr or n < 2:\n                    break\n                arr.append(n)\n                flag = 1\n                break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(*arr)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    nn = n\n    a = 0\n    b = 0\n    c = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            a = i\n            n /= i\n            break\n    for i in range(a + 1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            b = i\n            n /= i\n            break\n    if a and b:\n        c = int(nn / (a * b))\n    if a * b * c == nn and b != c:\n        print('YES')\n        print(a, b, c, end=' ')\n        print()\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    (a, b, c) = (1, 1, 1)\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 0:\n            a = i\n            break\n    if a == 1:\n        print('NO')\n        continue\n    n //= a\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 0 and i != a:\n            b = i\n            break\n    if b == 1:\n        print('NO')\n        continue\n    n //= b\n    if n not in [1, a, b]:\n        print('YES')\n        print(a, b, n)\n    else:\n        print('NO')", "import string\nimport math\nimport collections\n\ndef LeReseauLMD(n):\n    orin = n\n    (a, b, c) = (0, 0, 0)\n    for a in range(2, math.floor(n ** 0.5) + 1):\n        if n % a == 0:\n            n //= a\n            for b in range(2, math.floor(n ** 0.5) + 1):\n                if n % b == 0 and b != a:\n                    c = n // b\n                    if c == a or c == b:\n                        c = 0\n                    break\n            break\n    if a * b * c == orin:\n        return f'{a} {b} {c}'\n    else:\n        return 'NO'\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        rep = LeReseauLMD(n)\n        if rep != 'NO':\n            print('YES')\n        print(rep)\nmain()"]