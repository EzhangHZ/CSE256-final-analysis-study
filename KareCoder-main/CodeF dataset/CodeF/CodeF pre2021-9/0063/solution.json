["print(int(input()) + 1)", "a = int(input())\nb = input()\nl = b.count('L')\nr = b.count('R')\nprint(l + r + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "def main() -> None:\n    n = int(input())\n    s = input()\n    print(n + 1)\nmain()", "d = int(input())\ninput()\nprint(d + 1)", "m = int(input())\na = str(input())\n(p, q) = (0, 0)\nfor i in a:\n    if i == 'L':\n        p += 1\n    else:\n        q += 1\nprint(p + q + 1)", "x = int(input())\ny = input()\nprint(x + 1)", "n = int(input())\ncmd = input()\nprint(cmd.count('L') + cmd.count('R') + 1)", "n = int(input())\ns = input()\nanswer = 0\nprint(n + 1)", "noOfCommands = input('')\nCommands = input('')\n\ndef findPos(n, s):\n    x = 1\n    for command in s:\n        if command == 'L':\n            x += 1\n        if command == 'R':\n            x += 1\n    return x\nprint(findPos(noOfCommands, Commands))", "n = int(input())\nmoves = input()\nL = moves.count('L')\nR = moves.count('R')\nprint(L + R + 1)", "n = int(input())\ns = input()\nL_count = 0\nR_count = 0\nfor char in s:\n    if char == 'L':\n        L_count += 1\n    if char == 'R':\n        R_count += 1\nprint(L_count + R_count + 1)", "n = int(input()) + 1\nprint(n)", "n = int(input()) + 1\nprint(n)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "num = int(input())\nlis = input()\nprint(num + 1)", "a = int(input())\ninput()\nprint(a + 1)", "n = int(input())\ns = str(input())\nprint(n + 1)", "num = int(input())\nstr1 = input()\nprint(num + 1)", "n = int(input())\nx = input()\ny = x[0:n]\nleft = 0\nright = 0\nfor i in y:\n    if i == 'L':\n        left -= 1\n    elif i == 'R':\n        right += 1\nprint(right - left + 1)", "n = int(input())\ns = input()\na = [ch for ch in s]\nl = 0\nr = 0\nfor i in a:\n    if i == 'L':\n        l += 1\n    else:\n        r += 1\nresult = l + r + 1\nprint(result)", "MAX = 1 << 20\nwhile True:\n    try:\n        n = eval(input())\n        str0 = input()\n        print(n + 1)\n    except:\n        break", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = input()\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input())\ns = str(input())\nprint(n + 1)", "n = int(input().strip())\nstring = input().strip()\nans = 1\nans += int(string.count('L'))\nans += int(string.count('R'))\nprint(ans)", "n = int(input())\nstr = input()\nprint(str.count('R') + str.count('L') + 1)", "def solve():\n    n = int(input())\n    s = input()\n    print(s.count('R') + s.count('L') + 1)\nsolve()", "n = int(input())\ns = input()\nc = 0\nd = 0\nfor i in s:\n    if i == 'L':\n        c += 1\n    else:\n        d += 1\nprint(c + d + 1)", "class solution:\n\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n        self.answer = 0\n\n    def calculation(self):\n        self.answer = self.n + 1\nn = int(input())\ns = input()\nroot = solution(n, s)\nroot.calculation()\nprint(root.answer)", "t = int(input())\ns = input()\nl = 0\nr = 0\nfor i in s:\n    if i == 'L':\n        l += 1\n    else:\n        r += 1\na = -l\nprint(l + r + 1)", "n = int(input())\na = input()\nprint(n + 1)", "n = int(input())\ns = input()\nm = list(s)\ncntl = 0\ncntr = 0\nfor i in range(n):\n    if m[i] == 'L':\n        cntl += 1\n    elif m[i] == 'R':\n        cntr += 1\nprint(cntl + cntr + 1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "S = int(input())\nn = input()\nl = n.count('L')\nr = n.count('R')\nprint(abs(0 - l) + (r + 1))", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\nst = input()\nprint(n + 1)", "n = int(input())\ninput()\nprint(n + 1)", "t = int(input())\ns = input()\nl = 0\nr = 0\nfor i in s:\n    if i == 'L':\n        l = l - 1\n    else:\n        r = r + 1\nprint(r + 1 + abs(l))", "def f(q):\n    l = 0\n    r = 0\n    for i in q:\n        if i == 'L':\n            l += 1\n        else:\n            r += 1\n    return r + l + 1\nn = int(input())\ns = input()\nprint(f(s))", "n = int(input())\ns = input()\nprint(n + 1)", "a = int(input())\ns = input()\nL = s.count('L')\nR = s.count('R')\nprint(L + R + 1)", "n = int(input())\ns = str(input())\nprint(n + 1)", "a = int(input())\nf = input()\nprint(a + 1)", "size = int(input())\ndirections = input()\nleftCount = directions.count('L')\nrightCount = directions.count('R')\nprint(leftCount + rightCount + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "m = int(input())\ns = input()\nprint(m + 1)", "n = int(input())\ns = input()\nL = s.count('L')\nR = n - L\nL *= -1\nprint(R - L + 1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "import sys\nN = int(sys.stdin.readline())\nword = str(sys.stdin.readline().strip())\nprint(N + 1)", "n = int(input())\ns = list(input())\nx = len(s)\nprint(int(x) + 1)", "size = int(input())\nstring = input()\nprint(size + 1)", "n = int(input())\na = input()\nprint(a.count('L') + a.count('R') + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "print(int(input()) + 1)\ninput()", "input()\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input())\nm = str(input())\nprint(n + 1)", "print(int(input()) + 1)", "import sys\nx1 = input()\nx = input()\nif 'L' and 'R' not in x:\n    if 'L' in x:\n        print(x.count('L') + 1)\n    if 'R' in x:\n        print(x.count('R') + 1)\n    sys.exit()\nelse:\n    print(x.count('L') + x.count('R') + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "print(int(input()) + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nx = s.count('L')\ny = s.count('R')\nprint(y + x + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\nstring = input()\nprint(len(string) + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\na = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "print(int(input()) + 1)", "def main():\n    n = int(input())\n    c = input()\n    l = c.count('L')\n    r = c.count('R')\n    print(l + r + 1)\nmain()", "def main():\n    n = int(input())\n    c = input()\n    print(n + 1)\nmain()", "n = int(input())\nx = input()\nl = x.count('L')\nr = x.count('R')\nif l == r:\n    print(2 * l + 1)\nelse:\n    print(l + r + 1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input(''))\ns = input('')\na = s.count('L')\nb = s.count('R')\nprint(a + b + 1)", "print(int(input()) + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nx = 0\nl = s.count('L')\nr = s.count('R')\nprint(l + r + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(1 + s.count('L') + s.count('R'))", "n = int(input())\nstring = input()\nx = 1\nl_count = string.count('L')\nr_count = string.count('R')\nlist_terms = list(range(-x * l_count, x * r_count + 1))\nprint(len(list_terms))", "n = int(input())\ns = input()\nl = s.count('L') * -1\nr = s.count('R')\nprint(r - l + 1)", "n = int(input())\ns = input()\nl = s.count('L') * -1\nr = s.count('R')\nprint(r - l + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "n = int(input())\na = input()\nprint(len(a) + 1)", "n = int(input())\ns = input()\n(max, min) = (0, 0)\nmax += s.count('R')\nmin -= s.count('L')\ndiff = max - min\nprint(diff + 1)", "n = int(input())\ns = str(input())\nprint(n + 1)", "n = int(input())\ns = input()\nprint(n + 1)", "print(int(input()) + 1)", "n = int(input())\ninput()\nprint(n + 1)", "n = int(input())\ncad = input()\nl = cad.count('L')\nr = cad.count('R')\nprint(l + r + 1)", "n = int(input())\nm = input()\nprint(n + 1)", "def factorial(n):\n    return 1 if n == 1 or n == 0 else n * factorial(n - 1)\nb = input()\nb = int(b)\nprint(b + 1)", "x = int(input())\ny = input()\nprint(x + 1)", "n = input()\ns = input()\npos = 0\npos += s.count('R')\npos += s.count('L')\nif len(s) > 0:\n    pos += 1\nprint(pos)"]