["import sys\n\ndef theatheSquare(matrix, tile, twoTiles):\n    minPrice = 0\n    if tile * 2 < twoTiles:\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                if matrix[row][col] == '.':\n                    minPrice += tile\n    else:\n        for row in range(len(matrix)):\n            left = 0\n            while left < len(matrix[row]):\n                if matrix[row][left] == '.':\n                    if left + 1 < len(matrix[row]) and matrix[row][left + 1] == '.':\n                        minPrice += twoTiles\n                        left += 2\n                    else:\n                        minPrice += tile\n                        left += 2\n                else:\n                    left += 1\n    return minPrice\ncasos = sys.stdin.readline()\nfor i in range(int(casos)):\n    line = sys.stdin.readline().split(' ')\n    mat = []\n    for j in range(int(line[0])):\n        lineMat = sys.stdin.readline()\n        lineMat = lineMat.rstrip('\\n')\n        mat.append(lineMat)\n    price = theatheSquare(mat, int(line[2]), int(line[3]))\n    sys.stdout.write(str(price) + '\\n')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    if y > 2 * x:\n        y = 2 * x\n    out = 0\n    for i in range(n):\n        line = input().strip()\n        curr = 0\n        for c in line:\n            if c == '.':\n                out += y * curr\n                curr = 1 - curr\n            else:\n                out += x * curr\n                curr = 0\n        out += x * curr\n    print(out)", "from sys import stdin\ninput = stdin.readline\nMX = int(200000.0 + 5)\nMOD = int(1000000000.0 + 7)\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        (n, m, x, y) = map(int, input().split())\n        ans = 0\n        for _ in range(n):\n            row = input()\n            last = '*'\n            for ch in row:\n                if ch == '.':\n                    if last == '.':\n                        ans -= x\n                        ans += min(2 * x, y)\n                        last = '*'\n                    else:\n                        ans += x\n                        last = '.'\n                else:\n                    last = '*'\n        print(ans)\nmain()", "terms = int(input())\nfor term in range(terms):\n    (x, y, price1, price2) = [int(item) for item in input().split()]\n    houses = ''\n    for line in range(x):\n        houses += input()\n        houses += '-'\n    prices1 = houses.count('.') * price1\n    prices2 = houses.count('..') * price2 + houses.replace('..', '-').count('.') * price1\n    print(min([prices1, prices2]))", "from collections import deque\nfor _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    o = 0\n    r = 0\n    for j in range(n):\n        s = input()\n        o += s.count('.')\n        r += s.count('..')\n    print(min((o - 2 * r) * x + r * y, o * x))", "def solve():\n    (n, m, x, y) = map(int, input().split())\n    arr = []\n    cost = 0\n    for i in range(n):\n        arr.append(input())\n    if m == 1:\n        for i in range(n):\n            if arr[i][0] == '.':\n                cost += x\n        return cost\n    for i in range(n):\n        j = 0\n        while j < m:\n            if j + 1 < m and (arr[i][j] == '.' and arr[i][j + 1] == '.'):\n                if 2 * x < y:\n                    cost += 2 * x\n                else:\n                    cost += y\n                j += 2\n            elif arr[i][j] == '.':\n                cost += x\n                j += 1\n            else:\n                j += 1\n    return cost\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        (n, _, x, y) = map(int, input().split())\n        y = min(y, 2 * x)\n        ans = 0\n        while n > 0:\n            row = input().split('*')\n            for tiles in row:\n                length = len(tiles)\n                if length == 0:\n                    continue\n                if tiles[-1] == '\\n':\n                    length -= 1\n                ans += length // 2 * y\n                if length % 2 == 1:\n                    ans += x\n            n -= 1\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = [int(x) for x in input().split()]\n    l = [0] * n\n    for j in range(n):\n        l[j] = input()\n    a = sum([x.count('.') for x in l])\n    b = sum([x.count('..') for x in l])\n    if 2 * x <= y:\n        res = a * x\n    else:\n        res = (a - 2 * b) * x + b * y\n    print(res)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    if y > 2 * x:\n        y = 2 * x\n    out = 0\n    for i in range(n):\n        line = input().strip()\n        curr = 0\n        for c in line:\n            if c == '.':\n                out += y * curr\n                curr = 1 - curr\n            else:\n                out += x * curr\n                curr = 0\n        out += x * curr\n    print(out)", "import sys\nsys.stdin.readline()\nlines = sys.stdin.read().splitlines()\ni = 0\nwhile i < len(lines):\n    (n, m, x, y) = map(int, lines[i].split(' '))\n    p1 = x\n    p2 = min(x * 2, y)\n    price = 0\n    while n:\n        i += 1\n        n -= 1\n        row = lines[i]\n        seq = 0\n        for cell in row:\n            if cell == '.':\n                seq += 1\n                if seq == 2:\n                    seq = 0\n                    price += p2\n            elif seq:\n                assert seq == 1\n                seq = 0\n                price += p1\n        if seq:\n            assert seq == 1\n            seq = 0\n            price += p1\n    i += 1\n    print(price)", "import sys\n\ndef theatheSquare(matrix, tile, twoTiles):\n    minPrice = 0\n    if tile * 2 < twoTiles:\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                if matrix[row][col] == '.':\n                    minPrice += tile\n    else:\n        for row in range(len(matrix)):\n            left = 0\n            while left < len(matrix[row]):\n                if matrix[row][left] == '.':\n                    if left + 1 < len(matrix[row]) and matrix[row][left + 1] == '.':\n                        minPrice += twoTiles\n                        left += 2\n                    else:\n                        minPrice += tile\n                        left += 2\n                else:\n                    left += 1\n    return minPrice\ncasos = sys.stdin.readline()\nfor i in range(int(casos)):\n    line = sys.stdin.readline().split(' ')\n    mat = []\n    for j in range(int(line[0])):\n        lineMat = sys.stdin.readline()\n        lineMat = lineMat.rstrip('\\n')\n        mat.append(lineMat)\n    price = theatheSquare(mat, int(line[2]), int(line[3]))\n    sys.stdout.write(str(price) + '\\n')", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a1 = input()\n        a.append(a1)\n    count1 = 0\n    count2 = 0\n    if x * 2 <= y:\n        for i in a:\n            count1 += i.count('.')\n        print(count1 * x)\n    else:\n        for i in a:\n            count1 += i.count('..')\n            count2 += i.count('.') - i.count('..') * 2\n        print(count1 * y + count2 * x)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    if y > 2 * x:\n        c = 0\n        for j in range(n):\n            c += sum(list(map(len, input()[:-1].split('*')))) * x\n    else:\n        c = 0\n        for j in range(n):\n            for i in list(map(len, input()[:-1].split('*'))):\n                if i % 2 == 0:\n                    c += i // 2 * y\n                else:\n                    c += i // 2 * y + x\n    print(c)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    count2 = 0\n    count1 = 0\n    for i in range(n):\n        s = input()\n        count2 += s.count('..')\n        count1 += s.count('.')\n    count1 = count1 - count2 * 2\n    price1 = count1 * x + count2 * y\n    price2 = (count1 + 2 * count2) * x\n    print(min(price1, price2))", "def solve(n, m, x, y, grid):\n    cost = 0\n    i = 0\n    while i < n:\n        j = 0\n        while j < m:\n            if grid[i][j] == '.':\n                if j + 1 < m and grid[i][j + 1] == '.':\n                    cost += min(2 * x, y)\n                    j += 1\n                else:\n                    cost += x\n            j += 1\n        i += 1\n    return cost\nt = int(input())\nresults = []\nfor _ in range(0, t):\n    (n, m, x, y) = map(int, input().split(' '))\n    grid = []\n    for _n in range(0, n):\n        row = input()\n        grid.append(row)\n    results.append(solve(n, m, x, y, grid))\nfor result in results:\n    print(result)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    (s_dot, do_dot) = (0, 0)\n    for i in range(n):\n        s = input()\n        s_dot += s.count('.')\n        do_dot += s.count('..')\n    res1 = do_dot * y + x * (s_dot - 2 * do_dot)\n    res2 = x * s_dot\n    print(min(res1, res2))", "t = int(input())\nlist_ans = []\nfor i in range(t):\n    ans = 0\n    (n, m, x, y) = map(int, input().split())\n    if y >= 2 * x:\n        for s in range(n):\n            str1 = input()\n            ans += str1.count('.') * x\n        list_ans.append(ans)\n    else:\n        for s in range(n):\n            str1 = input()\n            ans += str1.count('..') * y + (str1.count('.') - str1.count('..') * 2) * x\n        list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "n_testcase = int(input())\nfor _ in range(n_testcase):\n    (n, m, c11, c12) = map(int, input().split())\n    if 2 * c11 <= c12:\n        count = 0\n        for i in range(n):\n            for j in input():\n                if j == '.':\n                    count += 1\n        sum = count * c11\n    else:\n        sum = 0\n        for i in range(n):\n            count = 0\n            for j in input():\n                if j == '.':\n                    count += 1\n                else:\n                    sum += count // 2 * c12 + count % 2 * c11\n                    count = 0\n            sum += count // 2 * c12 + count % 2 * c11\n    print(sum)", "def F(lst, x, y):\n    ans = 0\n    if y >= x * 2:\n        for i in lst:\n            ans += i.count('.')\n        return x * ans\n    else:\n        for i in lst:\n            ans += i.count('..') * y\n            ans += (i.count('.') - i.count('..') * 2) * x\n        return ans\nt = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst.append(input())\n    print(F(lst, x, y))", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    count = 0\n    if 2 * x < y:\n        l = True\n    else:\n        l = False\n    for i in range(n):\n        a = input()\n        p = 0\n        while p < m:\n            if a[p] == '.':\n                if p + 1 != m:\n                    if a[p] == a[p + 1]:\n                        if l:\n                            count += 2 * x\n                        else:\n                            count += y\n                        p += 2\n                    else:\n                        count += x\n                        p += 1\n                else:\n                    count += x\n                    p += 1\n            else:\n                p += 1\n    print(count)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    otv = 0\n    if 2 * x <= y:\n        var = 1\n    else:\n        var = 0\n    a = [input() for i in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        while j < m:\n            if a[i][j] == '.':\n                if var == 1:\n                    j += 1\n                    otv += x\n                elif j != m - 1 and a[i][j + 1] == '.':\n                    otv += y\n                    j += 2\n                else:\n                    otv += x\n                    j += 1\n            else:\n                j += 1\n        i += 1\n        j = 0\n    ans.append(otv)\nfor i in ans:\n    print(i)", "t = int(input())\nwhile t:\n    (n, m, x, y) = map(int, input().split())\n    layout = []\n    for _ in range(n):\n        layout.append(input())\n    maps = {'11': 0, '12': 0}\n    for i in range(n):\n        while '..' in layout[i]:\n            layout[i] = layout[i].replace('..', '', 1)\n            maps['12'] = maps['12'] + 1\n            maps['11'] = maps['11'] + 2\n    for i in range(n):\n        while '.' in layout[i]:\n            layout[i] = layout[i].replace('.', '', 1)\n            maps['11'] = maps['11'] + 1\n    ones = maps['11'] * x\n    twos = maps['12'] * y + (maps['11'] - maps['12'] * 2) * x\n    print(min(ones, twos))\n    t = t - 1", "for _ in range(int(input())):\n    (r, c, o, t) = map(int, input().split())\n    if t < o * 2:\n        m = 0\n        for i in range(r):\n            k = input()\n            y = k.count('..')\n            z = k.count('.') - y * 2\n            m += y * t + z * o\n        x = m\n    else:\n        m = 0\n        for i in range(r):\n            k = input()\n            m += k.count('.')\n            x = m * o\n    print(x)", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    c = 0\n    for q in range(n):\n        s = input()\n        a = s.count('..')\n        b = s.count('.')\n        if y < 2 * x:\n            c += a * y + (b - 2 * a) * x\n        else:\n            c += b * x\n    print(c)\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    res = 0\n    for index in range(n):\n        l = input()\n        i = 0\n        while i < m:\n            if l[i] == '*':\n                i += 1\n                continue\n            elif i + 1 < m and l[i + 1] == '.':\n                res += min(2 * x, y)\n                i += 2\n            else:\n                res += x\n                i += 1\n    print(res)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    c = 0\n    for q in range(n):\n        s = input()\n        a = s.count('..')\n        b = s.count('.')\n        if y < 2 * x:\n            c += a * y + (b - 2 * a) * x\n        else:\n            c += b * x\n    print(c)", "R1 = lambda : list(map(int, input().split()))\nR2 = lambda : int(input())\nt = R2()\nfor _ in range(t):\n    (n, m, x, y) = R1()\n    s = 0\n    c_1 = c_2 = 0\n    for _ in range(n):\n        c = 0\n        for pl in input():\n            if pl == '.':\n                if c == 0:\n                    c = 1\n                    c_1 += 1\n                else:\n                    c = 0\n                    c_1 -= 1\n                    c_2 += 1\n            else:\n                c = 0\n    s = c_1 * x\n    s += c_2 * y if y / 2 < x else c_2 * 2 * x\n    print(s)", "def mapit():\n    temp = list(map(int, input().split()))\n    return temp\nimport bisect\n\ndef solution():\n    (n, m, x, y) = mapit()\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    i = 0\n    j = 0\n    ans = 0\n    while i < n:\n        j = 0\n        while j < m:\n            if arr[i][j] == '.':\n                if j < m - 1 and arr[i][j + 1] == '.':\n                    j += 2\n                    ans = ans + min(2 * x, y)\n                else:\n                    ans = ans + x\n                    j += 1\n            else:\n                j += 1\n        i += 1\n    print(ans)\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    solution()", "def solve(nmxy, rect):\n    n = nmxy[0]\n    m = nmxy[1]\n    x = nmxy[2]\n    y = nmxy[3]\n    if 2 * x <= y:\n        count = 0\n        for i in range(n):\n            for j in rect[i]:\n                if j == '.':\n                    count += x\n        return count\n    else:\n        count = 0\n        for i in range(n):\n            j = 0\n            while j < m:\n                if j < m - 1:\n                    if rect[i][j] == '.' and rect[i][j + 1] == '.':\n                        count += y\n                        j += 2\n                        continue\n                if rect[i][j] == '.':\n                    count += x\n                    j += 1\n                else:\n                    j += 1\n        return count\nt = int(input())\nfor i in range(t):\n    nmxy = list(map(int, input().strip().split()))[:4]\n    rect = []\n    for j in range(nmxy[0]):\n        sq = input()\n        rect.append(sq)\n    print(solve(nmxy, rect))", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    if x <= y / 2:\n        c = 0\n        for i in range(n):\n            s = input()\n            c = c + x * s.count('.')\n        print(c)\n    else:\n        c = 0\n        for i in range(n):\n            s = input()\n            w2 = s.count('..')\n            w1 = s.count('.') - 2 * w2\n            c = c + y * w2\n            c = c + x * w1\n        print(c)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, m, x, y, mat):\n    tot = 0\n    for i in range(n):\n        dot1 = mat[i].count('.')\n        dot2 = mat[i].count('..')\n        tot += x * (dot1 - dot2 * 2) + min(2 * x, y) * dot2\n    print(tot)\nfor _ in range(int(input())):\n    (n, m, x, y) = get_int()\n    mat = []\n    for _ in range(n):\n        mat.append(str(input())[:-1])\n    solve(n, m, x, y, mat)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    y = y if x * 2 > y else x * 2\n    ans = 0\n    for _ in range(n):\n        row = input()\n        c = 0\n        for tile in row:\n            if tile == '.':\n                c += 1\n            else:\n                ans = ans + c // 2 * y + c % 2 * x\n                c = 0\n        ans = ans + c // 2 * y + c % 2 * x\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    inp = input()\n    q = list(map(int, inp.split(' ')))\n    n = q[0]\n    m = q[1]\n    x = q[2]\n    y = q[3]\n    cost = 0\n    for i in range(0, n):\n        s = input()\n        j = 0\n        while j < m:\n            if s[j] == '.':\n                if j + 1 < m and s[j + 1] == '.':\n                    if y < 2 * x:\n                        cost += y\n                    else:\n                        cost += 2 * x\n                    j += 1\n                else:\n                    cost += x\n            j += 1\n    print(cost)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ones = 0\n    twos = 0\n    for j in range(n):\n        a = input()\n        if x * 2 > y:\n            two = a.count('..')\n            twos += two\n            ones += a.count('.') - 2 * two\n        else:\n            ones += a.count('.')\n    print(x * ones + y * twos)", "nn = int(input())\nfor k in range(nn):\n    (n, m, x, y) = [int(x) for x in input().split()]\n    c = 0\n    double = False\n    if y > 2 * x:\n        y = 2 * x\n    for i in range(n):\n        t = input()\n        for j in range(m):\n            if double:\n                double = False\n                continue\n            if t[j] == '.':\n                if j + 1 < len(t) and t[j + 1] == '.':\n                    c += y\n                    double = True\n                else:\n                    c += x\n    print(c)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    for i in range(n):\n        s = input()\n        f = 0\n        while f <= m - 2:\n            if s[f] == '.':\n                if s[f + 1] == '.':\n                    ans += min(x * 2, y)\n                    f += 2\n                else:\n                    ans += x\n                    f += 2\n            else:\n                f += 1\n        if f == m - 1:\n            if s[f] == '.':\n                ans += x\n    print(ans)", "a = int(input())\nfor i in range(a):\n    (n, m, x, y) = list(map(int, input().split()))\n    price_for_two = min(2 * x, y)\n    total = 0\n    for j in range(n):\n        stroka = input()\n        prev = ''\n        sum_stroka = 0\n        for s in stroka:\n            if prev == '.' and s == '.':\n                sum_stroka += price_for_two - x\n                prev = ''\n                continue\n            elif s == '.':\n                sum_stroka += x\n            prev = s\n        total += sum_stroka\n    print(total)", "def solution():\n    (a, b, c, d) = map(int, input().split())\n    ans = 0\n    for loop in range(a):\n        di = input().split('*')\n        k = min(c * 2, d)\n        for i in di:\n            ans += len(i) // 2 * k + len(i) % 2 * c\n    print(int(ans))\nt = int(input())\nfor loop in range(t):\n    solution()", "def main():\n    (n, m, x, y) = map(int, input().split())\n    sum = 0\n    for i in range(n):\n        stroka = input()\n        podryad = 0\n        for j in range(m):\n            if stroka[j] == '.':\n                podryad += 1\n            elif podryad > 0:\n                if 2 * x <= y or podryad == 1:\n                    sum += x * podryad\n                else:\n                    sum += y * (podryad // 2) + x * (podryad % 2)\n                podryad = 0\n        if podryad > 0:\n            if 2 * x <= y or podryad == 1:\n                sum += x * podryad\n            else:\n                sum += y * (podryad // 2) + x * (podryad % 2)\n    return sum\nfor _ in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    t = []\n    for z in range(n):\n        t.append(input())\n    c = 0\n    if y < 2 * x:\n        for j in t:\n            c += y * j.count('..')\n            j = j.replace('..', '**')\n            c += x * j.count('.')\n        print(c)\n    else:\n        for j in t:\n            c += x * j.count('.')\n        print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split(' '))\n    costo = 0\n    for _ in range(n):\n        fila = input()\n        i = 0\n        while i != m:\n            if fila[i] == '.':\n                if i + 1 != m:\n                    if fila[i] == '.' and fila[i + 1] == '.' and (y < x * 2):\n                        costo += y\n                        i += 2\n                    else:\n                        i += 1\n                        costo += x\n                else:\n                    i += 1\n                    costo += x\n            else:\n                i += 1\n    print(costo)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split(' '))\n    costo = 0\n    for _ in range(n):\n        fila = input()\n        i = 0\n        while i != m:\n            if fila[i] == '.':\n                if i + 1 != m:\n                    if fila[i] == '.' and fila[i + 1] == '.' and (y < x * 2):\n                        costo += y\n                        i += 2\n                    else:\n                        i += 1\n                        costo += x\n                else:\n                    i += 1\n                    costo += x\n            else:\n                i += 1\n    print(costo)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ones = 0\n    twos = 0\n    for i in range(n):\n        s = input()\n        j = 0\n        while j < m:\n            if s[j] == '*':\n                j += 1\n                continue\n            if j + 1 < m and s[j + 1] == '.':\n                twos += 1\n                j += 2\n            else:\n                ones += 1\n                j += 1\n    if y > 2 * x:\n        print((ones + twos * 2) * x)\n    else:\n        print(x * ones + y * twos)", "def minBurles(lst, n, m, x, y):\n    res = 0\n    if 2 * x <= y:\n        for i in range(n):\n            res += x * lst[i].count('.')\n    else:\n        for i in range(n):\n            (check, doub) = (1, 0)\n            for j in range(m - 1):\n                if lst[i][j] == '.' and lst[i][j + 1] == '.' and (check == 1):\n                    doub += 1\n                    check = 0\n                else:\n                    check = 1\n            res += y * doub + (lst[i].count('.') - doub * 2) * x\n    return res\nt = int(input())\nfor i in range(t):\n    (n, m, x, y) = [int(x) for x in input().split()]\n    lst = []\n    for i in range(n):\n        lst.append(input())\n    print(minBurles(lst, n, m, x, y))", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    l = [input() for i in range(n)]\n    (one, two) = (0, 0)\n    for i in range(n):\n        one += l[i].count('.')\n        two += l[i].count('..')\n    print(min(one * x, two * y + (one - two * 2) * x))", "t = int(input())\nfor _ in range(t):\n    (row, col, smol, big) = map(int, input().split())\n    tot = 0\n    for r in range(row):\n        dps = input()\n        if big >= 2 * smol:\n            for i in dps:\n                if i == '.':\n                    tot += smol\n        else:\n            i = 0\n            while i < col:\n                if dps[i] == '.':\n                    if i < col - 1 and dps[i + 1] == '.':\n                        tot += big\n                        i += 2\n                    else:\n                        tot += smol\n                        i += 2\n                else:\n                    i += 1\n    print(tot)", "for i in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    for i in range(n):\n        row = input()\n        single = row.count('.')\n        double = row.count('..')\n        ans1 = double * y + (single - double * 2) * x\n        ans2 = single * x\n        ans += min(ans1, ans2)\n    print(ans)", "for i in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    for i in range(n):\n        row = input()\n        single = row.count('.')\n        double = row.count('..')\n        ans1 = single * x\n        ans2 = double * (y - 2 * x) + ans1\n        ans += min(ans1, ans2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    y = min(y, 2 * x)\n    for __ in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if s[i] == '*':\n                i += 1\n                continue\n            j = i\n            while j + 1 < m and s[j + 1] == '.':\n                j += 1\n            l = j - i + 1\n            ans += l % 2 * x + l // 2 * y\n            i = j + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    square = []\n    single_tiles = 0\n    double_tiles = 0\n    for i in range(n):\n        square.append(input())\n        single_tiles += square[i].count('.')\n        double_tiles += square[i].count('..')\n    sum = 0\n    if 2 * x <= y:\n        sum = x * single_tiles\n    else:\n        sum = double_tiles * y + (single_tiles - 2 * double_tiles) * x\n    print(sum)", "for i in range(int(input())):\n    (n, m, x, y) = list(map(int, input().split()))\n    twos = 0\n    ones = 0\n    for i in range(n):\n        s = input()\n        range_iter = iter(range(m))\n        for i in range_iter:\n            if s[i] == '.':\n                if i == m - 1:\n                    ones += 1\n                elif s[i + 1] == '.':\n                    twos += 1\n                    next(range_iter)\n                else:\n                    ones += 1\n    print(min([y * twos + x * ones, x * 2 * twos + x * ones]))", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    squares = [input() for _ in range(n)]\n    if 2 * x < y:\n        print(x * sum((row.count('.') for row in squares)))\n    else:\n        print(sum((y * row.count('..') + x * row.replace('..', '**').count('.') for row in squares)))", "for _ in range(int(input())):\n    (n, m, x, y) = list(map(int, input().split()))\n    f = 0 if y < 2 * x else 1\n    c = 0\n    for i in range(n):\n        s = input()\n        if f:\n            c += s.count('.') * x\n        else:\n            t = s.count('..')\n            c += t * y + (s.count('.') - 2 * t) * x\n    print(c)", "N = int(input())\nfor w in range(N):\n    data = list(map(int, input().split()))\n    m = data[0]\n    n = data[1]\n    x = data[2]\n    y = data[3]\n    mat = []\n    for v in range(m):\n        minMat = list(input())\n        mat.append(minMat)\n    T = 0\n    i = 0\n    while i < m:\n        j = 0\n        while j < n:\n            if mat[i][j] == '.' and j + 1 < n and (mat[i][j + 1] == '.'):\n                T += min(2 * x, y)\n                j += 1\n            elif mat[i][j] == '.':\n                T += x\n            j += 1\n        i += 1\n    print(T)", "N = int(input())\nfor w in range(N):\n    data = list(map(int, input().split()))\n    m = data[0]\n    n = data[1]\n    x = data[2]\n    y = data[3]\n    mat = []\n    for v in range(m):\n        minMat = list(input())\n        mat.append(minMat)\n    T = 0\n    i = 0\n    while i < m:\n        j = 0\n        while j < n:\n            if mat[i][j] == '.' and j + 1 < n and (mat[i][j + 1] == '.'):\n                T += min(2 * x, y)\n                j += 1\n            elif mat[i][j] == '.':\n                T += x\n            j += 1\n        i += 1\n    print(T)", "for i in range(int(input())):\n    (L, A, x, y) = list(map(int, input().split()))\n    ans = 0\n    for i in range(L):\n        lineas = input()\n        cont = lineas.count('.') - lineas.count('..') * 2\n        ans += min(x * 2, y) * lineas.count('..')\n        ans += x * cont\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m, a, b) = [int(x) for x in input().split()]\n    one = 0\n    two = 0\n    for j in range(n):\n        li = list(input())\n        li.append('*')\n        k = 0\n        while 1:\n            if li[k] == '.' and li[k + 1] == '*':\n                k += 2\n                one += 1\n            elif li[k] == '*':\n                k += 1\n            elif li[k] == '.' and li[k + 1] == '.':\n                k += 2\n                two += 1\n            if k > m:\n                break\n    if a * 2 < b:\n        print((one + 2 * two) * a)\n    else:\n        print(one * a + two * b)", "for _ in range(int(input())):\n    ans = 0\n    (n, m, x, y) = map(int, input().split())\n    y = min(y, 2 * x)\n    for _ in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if s[i] == '*':\n                i += 1\n                continue\n            j = i\n            while j + 1 < m and s[j + 1] == '.':\n                j += 1\n            l = j - i + 1\n            ans += l % 2 * x + l // 2 * y\n            i = j + 1\n    print(ans)", "ans = []\nfor _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    spi = [input() for _ in range(n)]\n    s = 0\n    for elem in spi:\n        while elem.count('*') > 0:\n            a = elem.find('*')\n            b = len(elem[:a])\n            elem = elem[a + 1:]\n            if x * 2 > y:\n                s += b // 2 * y + b % 2 * x\n            else:\n                s += b * x\n        if len(elem) > 0:\n            b = len(elem)\n            if x * 2 > y:\n                s += b // 2 * y + b % 2 * x\n            else:\n                s += b * x\n    ans.append(str(s))\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    arr = [int(x) for x in input().split()]\n    (n, m, x, y) = (arr[0], arr[1], arr[2], arr[3])\n    li = []\n    for i in range(n):\n        li.append(input())\n    if x <= y / 2:\n        wt = 0\n        for i in range(n):\n            for j in range(m):\n                if li[i][j] == '.':\n                    wt += 1\n        ans = wt * x\n        print(ans)\n    else:\n        ans = 0\n        for i in range(n):\n            j = 0\n            while j < m:\n                if j + 1 < m:\n                    if li[i][j] == '.' and li[i][j + 1] == '.':\n                        ans += y\n                        j += 2\n                    elif li[i][j] == '.':\n                        ans += x\n                        j += 1\n                    else:\n                        j += 1\n                elif li[i][j] == '.':\n                    ans += x\n                    j += 1\n                else:\n                    j += 1\n        print(ans)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    path = []\n    for i in range(n):\n        path.append(input())\n    ans = 0\n    if y > 2 * x:\n        for i in range(n):\n            ans += x * path[i].count('.')\n        print(ans)\n    else:\n        for i in range(n):\n            ctr = 0\n            for j in range(m):\n                if path[i][j] == '.':\n                    ctr += 1\n                else:\n                    ans += ctr // 2 * y + ctr % 2 * x\n                    ctr = 0\n            ans += ctr // 2 * y + ctr % 2 * x\n        print(ans)", "for t in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    c = 0\n    for i in range(n):\n        s = input()\n        a = s.count('..')\n        b = s.count('.')\n        if y < 2 * x:\n            c += a * y + (b - 2 * a) * x\n        else:\n            c += b * x\n    print(c)", "n_testcase = int(input())\nfor _ in range(n_testcase):\n    (n, m, c11, c12) = map(int, input().split())\n    if 2 * c11 <= c12:\n        count = 0\n        for i in range(n):\n            for j in input():\n                if j == '.':\n                    count += 1\n        sum = count * c11\n    else:\n        sum = 0\n        for i in range(n):\n            count = 0\n            row = input()\n            for j in range(m):\n                if row[j] == '.':\n                    count += 1\n                if row[j] == '*' or j == m - 1:\n                    sum += count // 2 * c12 + count % 2 * c11\n                    count = 0\n    print(sum)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    p = 0\n    l = 0\n    if 2 * x < y:\n        for _ in [0] * n:\n            a = list(input())\n            p = p + a.count('.')\n        print(x * p)\n    else:\n        for _ in [0] * n:\n            a = list(input())\n            j = 0\n            while j < m - 1:\n                if a[j] == '.' and a[j + 1] == '.':\n                    l = l + 1\n                    j = j + 2\n                elif a[j] == '.':\n                    p = p + 1\n                    j = j + 2\n                else:\n                    j = j + 1\n            if j == m - 1 and a[-1] == '.':\n                p = p + 1\n        print(l * y + p * x)", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = [int(x) for x in input().split()]\n    total = 0\n    for z in range(n):\n        line = input()\n        j = 0\n        while j < len(line):\n            if line[j] == '.':\n                if j + 1 < len(line) and line[j + 1] == '.' and (x * 2 > y):\n                    total += y\n                    j += 2\n                else:\n                    total += x\n                    j += 1\n            else:\n                j += 1\n    print(total)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    y = min(y, 2 * x)\n    for __ in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if s[i] == '*':\n                i += 1\n                continue\n            j = i\n            while j + 1 < m and s[j + 1] == '.':\n                j += 1\n            l = j - i + 1\n            ans += l % 2 * x + l // 2 * y\n            i = j + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    y = min(y, 2 * x)\n    for __ in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if s[i] == '*':\n                i += 1\n                continue\n            j = i\n            while j + 1 < m and s[j + 1] == '.':\n                j += 1\n            l = j - i + 1\n            ans += l % 2 * x + l // 2 * y\n            i = j + 1\n    print(ans)", "def solve():\n    inp = input().split()\n    matrix = []\n    inp = [int(i) for i in inp]\n    (n, m, x, y) = inp\n    for _ in range(n):\n        col = []\n        s = input()\n        for i in range(m):\n            col.append(s[i])\n        matrix.append(col)\n    cost = 0\n    if y < 2 * x:\n        for i in range(n):\n            j = 0\n            while j < m:\n                if matrix[i][j] == '.' and j < m - 1 and (matrix[i][j + 1] == '.'):\n                    cost += y\n                    j += 1\n                elif j < m and matrix[i][j] == '.':\n                    cost += x\n                j += 1\n    else:\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == '.':\n                    cost += x\n    print(cost)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for p in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    (a, b) = (0, 0)\n    for i in range(n):\n        s = str(input())\n        c = s.count('..')\n        d = s.count('.')\n        a += x * d\n        b += y * c + x * (d - 2 * c)\n    print(min(a, b))", "def calculate(arr, s, d):\n    cost = 0\n    for (i, val) in enumerate(arr):\n        if val == '*':\n            continue\n        if i + 1 < len(arr) and d < 2 * s and (val + arr[i + 1] == '..'):\n            cost += d\n            arr[i + 1] = '*'\n            continue\n        cost += s\n    return cost\nt = int(input())\nfor _ in range(t):\n    (n, m, single, double) = map(int, input().split())\n    res = 0\n    for _ in range(n):\n        res += calculate(list(input()), single, double)\n    print(res)", "t = int(input())\nwhile t > 0:\n    (n, m, x, y) = map(int, input().split())\n    nn = n\n    t -= 1\n    ans = 0\n    stack = []\n    onlyx = 0\n    if x * 2 <= y:\n        onlyx = 1\n    while nn > 0:\n        nn -= 1\n        s = input()\n        stack.append(s)\n    if onlyx == 1:\n        for i in stack:\n            for j in range(0, len(i)):\n                if i[j] == '.':\n                    ans += x\n        print(ans)\n    else:\n        stack1 = []\n        for i in stack:\n            for j in range(0, len(i)):\n                if i[j] == '.':\n                    if not stack1:\n                        stack1.append(j)\n                    elif stack1:\n                        if j - stack1[-1] == 1:\n                            ans += y\n                            stack1 = []\n                        else:\n                            ans += x\n                            stack1 = [j]\n            if stack1:\n                stack1 = []\n                ans += x\n        print(ans)", "def solve():\n    (n, m, x, y) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.extend(list(map(str, input().split('*'))))\n    cost = 0\n    for ele in arr:\n        l = len(ele)\n        if l > 0:\n            if y <= x * 2:\n                if l % 2 == 0:\n                    cost += l // 2 * y\n                elif l == 1:\n                    cost += x\n                else:\n                    cost += x\n                    l -= 1\n                    cost += l // 2 * y\n            else:\n                cost += l * x\n    return cost\nfor t in range(0, int(input())):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    if y > x * 2:\n        y = x * 2\n    sm = 0\n    for j in range(n):\n        st = input()\n        kol = 0\n        kol2 = 0\n        for k in range(len(st)):\n            if st[k] == '.':\n                kol += 1\n                kol2 += 1\n            else:\n                if kol2 > 0:\n                    sm = sm + x * kol2\n                    kol = 0\n                    kol2 = 0\n                kol = 0\n            if kol == 2:\n                kol = 0\n                kol2 = 0\n                sm += y\n        if kol2 > 0:\n            sm = sm + x * kol2\n            kol = 0\n    print(sm)", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    if y > x * 2:\n        y = x * 2\n    sm = 0\n    for j in range(n):\n        st = input()\n        kol = 0\n        kol2 = 0\n        for k in range(len(st)):\n            if st[k] == '.':\n                kol += 1\n                kol2 += 1\n            else:\n                if kol2 > 0:\n                    sm = sm + x * kol2\n                    kol = 0\n                    kol2 = 0\n                kol = 0\n            if kol == 2:\n                kol = 0\n                kol2 = 0\n                sm += y\n        if kol2 > 0:\n            sm = sm + x * kol2\n            kol = 0\n    print(sm)", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, m, x, y) = nm()\n    y = min(y, 2 * x)\n    ans = 0\n    for _ in range(n):\n        s = ns().split('*')\n        for f in s:\n            ans += len(f) // 2 * y + len(f) % 2 * x\n    print(ans)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def main():\n    (n, m, x, y) = map(int, input().split())\n    res = 0\n    for i in range(n):\n        line = input()\n        k = 0\n        two = 0\n        one = 0\n        while k < m:\n            if line[k] == '.':\n                if k + 1 < m and line[k + 1] == '.':\n                    two += 1\n                    k += 2\n                else:\n                    one += 1\n                    k += 1\n            else:\n                k += 1\n        if 2 * x <= y:\n            res += x * (one + two * 2)\n        else:\n            res += one * x\n            res += two * y\n    print(res)\nt = int(input())\nfor i in range(t):\n    main()", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, m, x, y) = I()\n    an = 0\n    for i in range(n):\n        g = input()\n        j = 0\n        while j < m:\n            if g[j] == '.' and (j != m - 1 and g[j + 1] == '.'):\n                an += min(2 * x, y)\n                j += 1\n            elif g[j] == '.':\n                an += x\n            j += 1\n    print(an)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\ndef solve():\n    (n, m, x, y) = map(int, input().split())\n    A = [input().strip() for _ in range(n)]\n    if x * 2 <= y:\n        return Counter(''.join(A))['.'] * x\n    ans = 0\n    for i in range(n):\n        now = 0\n        for j in range(m):\n            if A[i][j] == '*':\n                if now == 1:\n                    ans += x\n                now = 0\n                continue\n            if now == 0:\n                now += 1\n            else:\n                now = 0\n                ans += y\n        if now == 1:\n            ans += x\n    return ans\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        print(solve())\nmain()", "for t in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    mapa = ''\n    for _ in range(n):\n        mapa += input() + 'X'\n    (jeden, dwa) = (mapa.count('.'), mapa.count('..'))\n    if y >= 2 * x:\n        print(jeden * x)\n    else:\n        print((jeden - dwa * 2) * x + dwa * y)", "import math\nimport sys\nfrom sys import stdin\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x, y) = [int(j) for j in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    if x * 2 <= y:\n        counti = 0\n        for i in range(n):\n            counti += arr[i].count('.')\n        print(counti * x)\n    else:\n        counti = 0\n        countii = 0\n        for i in range(n):\n            counti += arr[i].count('.')\n        for i in range(n):\n            temp = m - 1\n            j = 0\n            try:\n                while temp > 0:\n                    if arr[i][j] == '.' and arr[i][j + 1] == '.':\n                        countii += 1\n                        j += 2\n                    else:\n                        j += 1\n                    temp -= 1\n            except:\n                temp -= 1\n        result = countii * y\n        counti = counti - 2 * countii\n        result += counti * x\n        print(result)", "import math\nimport sys\nfrom sys import stdin\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, x, y) = [int(j) for j in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    if x * 2 <= y:\n        counti = 0\n        for i in range(n):\n            counti += arr[i].count('.')\n        print(counti * x)\n    else:\n        counti = 0\n        countii = 0\n        for i in range(n):\n            counti += arr[i].count('.')\n        for i in range(n):\n            temp = m - 1\n            j = 0\n            try:\n                while temp > 0:\n                    if arr[i][j] == '.' and arr[i][j + 1] == '.':\n                        countii += 1\n                        j += 2\n                    else:\n                        j += 1\n                    temp -= 1\n            except:\n                temp -= 1\n        result = countii * y\n        counti = counti - 2 * countii\n        result += counti * x\n        print(result)", "from sys import stdin, stdout\nimport math\n\ndef solve():\n    cases = int(input())\n    for case in range(1, cases + 1):\n        (n, m, x, y) = [int(n) for n in input().split()]\n        if x * 2 < y:\n            ans = 0\n            for i in range(n):\n                s = input()\n                ans += s.count('.') * x\n            print(ans)\n        else:\n            one = 0\n            two = 0\n            for i in range(n):\n                s = input()\n                j = 0\n                while j < len(s) - 1:\n                    if s[j] == '.':\n                        if s[j + 1] == '.':\n                            two += 1\n                            j = j + 2\n                        elif s[j + 1] == '*':\n                            one += 1\n                            j = j + 2\n                    elif s[j] == '*':\n                        j = j + 1\n                if j == len(s) - 1:\n                    if s[j] == '.':\n                        one += 1\n            ans = one * x + two * y\n            print(ans)\nsolve()", "import sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\ntc = int(input())\nfor zzz in range(tc):\n    (r, c, x, y) = map(int, input().split())\n    arr = [None] * r\n    for i in range(r):\n        arr[i] = input()\n    low = min(2 * x, y)\n    su = 0\n    for i in range(r):\n        j = 0\n        while j < c:\n            if arr[i][j] == '.':\n                if j + 1 < c:\n                    if arr[i][j + 1] == '.':\n                        su += low\n                    else:\n                        su += x\n                else:\n                    su += x\n                j += 2\n            else:\n                j += 1\n    print(su)", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, x, y) = [int(x) for x in input().split()]\n    total = 0\n    for i in range(n):\n        row = input().strip()\n        arr = []\n        t = 0\n        for el in row:\n            if el == '.':\n                t += 1\n            elif t != 0:\n                arr.append(t)\n                t = 0\n        if t != 0:\n            arr.append(t)\n        if 2 * x <= y:\n            total += sum(arr) * x\n        else:\n            for el in arr:\n                total += y * (el // 2)\n                if el & 1:\n                    total += x\n    print(total)\ntt = int(input())\nfor test in range(tt):\n    solve()", "import sys\n\ndef solve(arr, x, y):\n    if y > 2 * x:\n        y = 2 * x\n    tot = 0\n    for row in arr:\n        run = 0\n        for c in row:\n            if c == 0:\n                run += 1\n            else:\n                if run > 0:\n                    dubs = run // 2\n                    sings = run - 2 * dubs\n                    tot += y * dubs + x * sings\n                run = 0\n        if run > 0:\n            dubs = run // 2\n            sings = run - 2 * dubs\n            tot += y * dubs + x * sings\n    return tot\nIN = [x.strip() for x in sys.stdin.readlines()]\nT = int(IN[0])\ncur = 1\nfor ti in range(T):\n    (n, m, x, y) = [int(x) for x in IN[cur].split(' ')]\n    arr = [[] for i in range(n)]\n    for i in range(n):\n        arr[i] = [1 if c == '*' else 0 for c in IN[cur + i + 1]]\n    result = solve(arr, x, y)\n    print(result)\n    cur += 1 + n", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    arr = [[''] * m] * n\n    countSingle = 0\n    countDouble = 0\n    for _ in range(n):\n        ip = input()\n        countSingle += ip.count('.')\n        countDouble += ip.count('..')\n    ans1 = x * (countSingle - 2 * countDouble) + y * countDouble\n    ans2 = x * countSingle\n    print(min(ans1, ans2))", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, m, x, y) = map(int, input().split())\n        if 2 * x < y:\n            y = 2 * x\n        cnt = 0\n        for i in range(n):\n            s = input()\n            j = 0\n            while j < m:\n                if s[j] == '.':\n                    if j < m - 1 and s[j + 1] == '.':\n                        j += 2\n                        cnt += y\n                    else:\n                        j += 1\n                        cnt += x\n                else:\n                    j += 1\n        print(cnt)\nmain()", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    k = [input() for i in range(n)]\n    (doubles, singles, i, j) = (0, 0, 0, 0)\n    while i < n:\n        while j < m:\n            if j < m - 1 and k[i][j] == '.' and (k[i][j + 1] == '.'):\n                doubles += 1\n                singles += 2\n                j += 2\n            elif k[i][j] == '.':\n                singles += 1\n                j += 1\n            else:\n                j += 1\n        i += 1\n        j = 0\n    net = singles - doubles * 2\n    net_doubles = doubles * y + net * x\n    net_singles = singles * x\n    print(net_singles if net_singles < net_doubles else net_doubles)", "t = int(input())\nans = []\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    cost = 0\n    if y >= 2 * x:\n        for j in range(n):\n            a = input()\n            k = 0\n            while k < m:\n                if a[k] == '.':\n                    cost += x\n                k += 1\n            j += 1\n        ans.append(cost)\n    else:\n        for j in range(n):\n            a = input()\n            k = 0\n            c = 0\n            while k < m:\n                if a[k] == '.':\n                    if c != 1:\n                        cost += x\n                        c += 1\n                    elif c == 1:\n                        cost += y - x\n                        c = 0\n                else:\n                    c = 0\n                k += 1\n            j += 1\n        ans.append(cost)\nfor item in ans:\n    print(item)", "t = int(input())\nfor i in range(t):\n    price = 0\n    (height, length, x1price, x2price) = [int(i) for i in input().split()]\n    for j in range(height):\n        matrixline = input()\n        if 2 * x1price <= x2price:\n            price += matrixline.count('.') * x1price\n        elif 2 * x1price > x2price:\n            price += matrixline.count('..') * x2price\n            matrixline = matrixline.replace('..', '')\n            price += matrixline.count('.') * x1price\n    print(price)", "testcases = int(input())\nfor testcase in range(testcases):\n    (v, h, p1, p2) = [int(i) for i in input().split()]\n    r = 0\n    for v in range(v):\n        tiles = input()\n        double_dot = tiles.count('..')\n        single_dot = tiles.count('.')\n        r += min(single_dot * p1, double_dot * p2 + (single_dot - double_dot * 2) * p1)\n    print(r)", "t = int(input())\nfor i in range(0, t):\n    (n, m, x, y) = [int(i) for i in input().split()]\n    po = 0\n    pt = 0\n    for j in range(0, n):\n        r = input()\n        wt = r.count('..')\n        w = r.count('.')\n        wo = w - wt * 2\n        po += wt * y + wo * x\n        pt += w * x\n    print(min(po, pt))", "t = int(input())\nfor _ in range(t):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    y = min(y, 2 * x)\n    for __ in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if s[i] == '*':\n                i += 1\n                continue\n            j = i\n            while j + 1 < m and s[j + 1] == '.':\n                j += 1\n            l = j - i + 1\n            ans += l % 2 * x + l // 2 * y\n            i = j + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    ans = 0\n    if y > 2 * x:\n        y = 2 * x\n    for j in range(n):\n        s = input()\n        i = 0\n        while i < m:\n            if i != m - 1:\n                if s[i] == '.' and s[i + 1] == '.':\n                    ans += y\n                    i += 2\n                elif s[i] == '.':\n                    ans += x\n                    i += 1\n                else:\n                    i += 1\n            elif s[i] == '.':\n                ans += x\n                i += 1\n            else:\n                i += 1\n    print(ans)"]