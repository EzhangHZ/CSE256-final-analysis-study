["import itertools\n(n, q) = map(int, input().split())\nsong = input()\nsums = [0]\nsums.extend(itertools.accumulate((ord(char) - 96 for char in song)))\nresults = []\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    results.append(str(sums[r] - sums[l - 1]))\nprint('\\n'.join(results))", "from sys import stdin\ninput = stdin.readline\nfrom itertools import accumulate\n\ndef solve():\n    (n, q) = [int(char) for char in input().split()]\n    s = input()\n    count_arr = [0] + [ord(char) - 96 for char in s]\n    acc = list(accumulate(count_arr))\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(acc[r] - acc[l - 1])\nsolve()", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(s, *l) = [*open(0)][1:]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l:\n    (a, b) = map(int, i.split())\n    print(k[b] - k[a - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(s, *l) = [*open(0)][1:]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l:\n    (a, b) = map(int, i.split())\n    print(k[b] - k[a - 1])", "(n, s, *a) = open(0)\nar = [0]\nfor x in s:\n    ar += [ar[-1] + ord(x) - 96]\nfor s in a:\n    (a2, b2) = map(int, s.split())\n    print(ar[b2] - ar[a2 - 1])", "import sys\ninput = sys.stdin.readline\n(length, questions) = map(int, input().split())\nsong = list(input())\nsong.pop()\nsong = [0] + [ord(x) - 96 for x in song]\npsa = [0] * (length + 1)\nfor i in range(1, length + 1):\n    psa[i] = psa[i - 1] + song[i]\nfor j in range(questions):\n    (a, b) = map(int, input().split())\n    print(psa[b] - psa[a - 1])", "(s, *l) = [*open(0)][1:]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l:\n    (a, b) = map(int, i.split())\n    print(k[b] - k[a - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\ndata = sys.stdin.readline().rstrip()\ndp = [0] * (n + 1)\nfor i in range(len(data)):\n    dp[i + 1] = dp[i] + ord(data[i]) - 96\nfor _ in range(q):\n    (l, r) = map(int, sys.stdin.readline().split())\n    print(dp[r] - dp[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nar = [0]\nfor x in s:\n    ar += (ar[-1] + ord(x) - 96,)\nfor s in a:\n    (a2, b2) = map(int, s.split())\n    print(ar[b2] - ar[a2 - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, so, *a) = open(0)\nb = [0]\nfor x in so:\n    b += (b[-1] + ord(x) - 96,)\nfor so in a:\n    (l, r) = map(int, so.split())\n    print(b[r] - b[l - 1])", "from collections import Counter, defaultdict, deque\nimport math\nfrom heapq import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = [int(x) for x in input().split()]\n    t = [ord(x) - ord('a') + 1 for x in input().strip()]\n    s = [0]\n    for i in t:\n        s.append(s[-1] + i)\n    for i in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        print(s[r] - s[l - 1])\ntt = 1\nfor test in range(tt):\n    solve()", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "from sys import stdin\n\ndef solve(string: str, l: int, r: int) -> int:\n    count = 0\n    for char in string[l - 1:r].rstrip():\n        count += ord(char) - 96\n    return count\n\ndef main():\n    nums = list(map(int, stdin.readline().split()))\n    string = stdin.readline().rstrip()\n    counts = [0] * len(string)\n    counts[0] = ord(string[0]) - 96\n    for (i, char) in enumerate(string[1:]):\n        counts[i + 1] = counts[i] + ord(char) - 96\n    for _ in range(nums[1]):\n        indices = list(map(int, stdin.readline().split()))\n        (l, r) = (indices[0], indices[1])\n        if l > 1:\n            print(counts[r - 1] - counts[l - 2])\n        else:\n            print(counts[r - 1])\nmain()", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, q) = map(int, input().split())\nsong = input()\nalphabet = {'abcdefghijklmnopqrstuvwxyz'[i]: i + 1 for i in range(26)}\ndp = [0] * n\nfor i in range(n):\n    dp[i] = dp[i - 1] + alphabet[song[i]]\nres = ''\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        res += '%d\\n' % dp[r - 1]\n    else:\n        res += '%d\\n' % (dp[r - 1] - dp[l - 2])\nprint(res)", "(s, *l) = [*open(0)][1:]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l:\n    (a, b) = map(int, i.split())\n    print(k[b] - k[a - 1])", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\n(n, q) = map(int, wtf[0].split())\ns = wtf[1]\na_id = ord('a') - 1\nmem = [0]\nj = 0\nfor i in range(n):\n    k = j + ord(s[i]) - a_id\n    j = k\n    mem.append(k)\nfor t in wtf[2:]:\n    (l, r) = map(int, t.split())\n    ans = mem[r] - mem[l - 1]\n    print(ans)", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    p = [0] * (n + 1)\n    A = ord('a')\n    for i in range(n):\n        p[i + 1] = p[i] + ord(s[i]) - A + 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(p[r] - p[l - 1])\nsolve()", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "l = [*open(0)][1:]\ns = l[0]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l[1:]:\n    d = i.split()\n    print(k[int(d[1])] - k[int(d[0]) - 1])", "(s, *l) = [*open(0)][1:]\nk = [0]\nfor x in s:\n    k += (k[-1] + ord(x) - 96,)\nfor i in l:\n    (a, b) = map(int, i.split())\n    print(k[b] - k[a - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "from sys import stdin\n(_, q) = map(int, stdin.readline().split())\ns_len = [0]\nfor ch in stdin.readline():\n    s_len.append(s_len[-1] + ord(ch) - 96)\nfor _ in range(q):\n    (l, r) = map(int, stdin.readline().split())\n    print(s_len[r] - s_len[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "import sys, copy\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n(n, q) = invr()\ns = insr()\npref = (len(s) + 1) * [0]\nfor i in range(len(s)):\n    pref[i + 1] = pref[i] + ord(s[i]) - ord('a') + 1\nfor _ in range(q):\n    (l, r) = invr()\n    print(pref[r] - pref[l - 1])", "import sys\nl = sys.stdin.readlines()\n(n, q) = [int(x) for x in l[0].replace('\\n', '').split()]\ns = l[1].replace('\\n', '')\ndic = {1: ord(s[0]) - 96}\nfor k in range(2, len(s) + 1):\n    dic[k] = dic[k - 1] + ord(s[k - 1]) - 96\nfor i in range(2, q + 2):\n    (ini, fim) = [int(x) for x in l[i].replace('\\n', '').split()]\n    if ini == 1:\n        print(dic[fim])\n    else:\n        print(dic[fim] - dic[ini - 1])", "(a, b) = input().split()\na = int(a)\nb = int(b)\ns = input()\ntemp = [0]\nans = []\nfor i in s:\n    temp.append(temp[-1] + (ord(i) - 96))\nfor i in range(b):\n    (x1, x2) = input().split()\n    x1 = int(x1)\n    x2 = int(x2)\n    ans.append(temp[x2] - temp[x1 - 1])\nfor j in ans:\n    print(j)", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "import sys\n(songlen, testcases) = map(int, sys.stdin.readline().split())\nstring = sys.stdin.readline().strip()\npsa = [0]\nfor i in range(1, songlen + 1):\n    psa.append(psa[i - 1] + ord(string[i - 1]) - 96)\nfor _ in range(testcases):\n    (l, r) = map(int, sys.stdin.readline().split())\n    print(psa[r] - psa[l - 1])", "(n, q) = map(int, input().split())\na = input()\nans = []\npr = [0]\nfor i in a:\n    pr.append(ord(i) - ord('a') + 1 + pr[-1])\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    ans.append(pr[r] - pr[l - 1])\nfor i in ans:\n    print(i)", "import sys\ninput = sys.stdin.readline\n(n, T) = map(int, input().split())\ns = input().rstrip()\ndata = [0]\nfor (i, t) in enumerate(s):\n    data.append(ord(t) - ord('a') + 1 + data[-1])\nfor _ in range(T):\n    (a, b) = map(int, input().split())\n    print(data[b] - data[a - 1])", "from math import factorial, ceil, pow, sqrt, floor, gcd\nfrom sys import stdin, stdout\nsiri = [0] * 26\nfor _ in range(1):\n    shan = [0]\n    (n, x) = map(int, stdin.readline().split())\n    s = list(stdin.readline().strip('\\n'))\n    sumy = 0\n    for e in s:\n        sumy += ord(e) - ord('a') + 1\n        shan.append(sumy)\n    for i in range(x):\n        (a, b) = map(int, stdin.readline().split())\n        print(shan[b] - shan[a - 1])", "import sys\n(n, p) = map(int, sys.stdin.readline().split())\nstring = sys.stdin.readline().rstrip()\nans = [0 for _ in range(len(string) + 1)]\nans[0] = 0\nfor i in range(len(string)):\n    ans[i + 1] = ans[i] + ord(string[i]) - 96\nfor _ in range(p):\n    (l, r) = map(int, sys.stdin.readline().split())\n    print(ans[r] - ans[max(l - 1, 0)])", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\n(q, n) = inm()\ns = ins()\nans = [0] * (q + 1)\nfor i in range(1, q + 1):\n    ans[i] += ans[i - 1] + ord(s[i - 1]) - 96\nfor _ in range(n):\n    (l, r) = inm()\n    print(ans[r] - ans[l - 1])", "from sys import stdin, stdout\n(n, q) = map(int, stdin.readline().split())\ns = stdin.readline()\nls = []\nc = 0\nfor i in range(n):\n    c += ord(s[i]) - 96\n    ls.append(c)\nfor _ in range(q):\n    (l, r) = map(int, stdin.readline().split())\n    if l != 1:\n        print(ls[r - 1] - ls[l - 2])\n    else:\n        print(ls[r - 1])", "import bisect\nfrom math import ceil\nfrom sys import stdin\n\ndef A():\n    k = stdin.readline()\n    k = int(k)\n    while k:\n        k -= 1\n        a = [int(x) for x in stdin.readline().split()]\n        (n, x, t) = (a[0], a[1], a[2])\n        res = 0\n        c = t + 0 * x\n        c = ceil(c / x)\n        if n - c <= 0:\n            res += min(c, n) * min(c - 1, n - 1) / 2\n        else:\n            res += min(c - 1, n - 1) * (n - c + 1)\n            res += (n - c) * (n - c + 1) / 2\n        print(int(res))\n\ndef B():\n    a = [int(x) for x in stdin.readline().split()]\n    (n, q) = (a[0], a[1])\n    s = stdin.readline()\n    res = [0] * n\n    res[0] = int(ord(s[0]) - 97 + 1)\n    for i in range(1, n):\n        res[i] = res[i - 1] + int(ord(s[i]) - ord('a') + 1)\n    while q:\n        q -= 1\n        b = [int(x) for x in stdin.readline().split()]\n        (l, r) = (b[0], b[1] - 1)\n        if b[0] == 1:\n            print(res[r])\n        else:\n            print(res[r] - res[l - 2])\nB()", "import sys\nuser_input = sys.stdin.read().splitlines()\nsong = [ord(i) - 96 for i in user_input[1]]\ndata = []\nfor (i, v) in enumerate(song):\n    if i == 0:\n        data.append(v)\n    else:\n        data.append(data[i - 1] + v)\nsum = 0\nquestions = user_input[2:]\nfor question in questions:\n    (first, last) = list(map(int, question.split(' ')))\n    if first == 1:\n        print(data[last - 1])\n    else:\n        print(data[last - 1] - data[first - 2])", "(n, q) = tuple(map(int, input().split(' ')))\ns = input()\nproblems = [tuple(map(int, input().split(' '))) for problem in range(q)]\ndictr = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nprefics_summs = [0]\nfor i in range(len(s)):\n    prefics_summs.append(prefics_summs[-1] + dictr[s[i]])\nfor (l, r) in problems:\n    print(prefics_summs[r] - prefics_summs[l - 1])", "(m, n) = [int(x) for x in input().split()]\ns = {}\ns[-1] = 0\ncnt = 0\ns0 = input()\nfor i in range(m):\n    cnt += ord(s0[i]) - 96\n    s[i] = cnt\nresult = []\nfor _ in range(n):\n    (a, b) = [int(x) for x in input().split()]\n    result.append(s[b - 1] - s[a - 2])\nprint(*result, sep='\\n')", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n(n, q) = get_int()\ndp = [0] * (n + 1)\nst = str(input())\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + ord(st[i - 1]) % 97 + 1\nfor i in range(q):\n    (x, y) = get_int()\n    print(dp[y] - dp[x - 1])", "import sys\nimport string\nparse_input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef calc_prefix(song):\n    prefix_sum = 0\n    prefix = []\n    for i in range(len(song)):\n        prefix_sum += string.ascii_lowercase.index(song[i]) + 1\n        prefix.append(prefix_sum)\n    prefix.insert(0, 0)\n    return prefix\n\ndef func(prefix, l, r):\n    total = prefix[r] - prefix[l - 1]\n    return total\n\ndef main():\n    (n, q) = [int(i) for i in parse_input().split()]\n    song = parse_input()\n    prefix = calc_prefix(song)\n    for j in range(q):\n        (l, r) = [int(i) for i in parse_input().split()]\n        print(func(prefix, l, r))\nmain()", "from collections import Counter as count\nfrom bisect import bisect\nimport sys\nfrom math import ceil\nfrom itertools import groupby\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n(n, l) = list(map(int, input().split()))\ns = list(input())\ns[0] = ord(s[0]) - 96\nfor i in range(1, n):\n    s[i] = ord(s[i]) - 96\n    s[i] = s[i] + s[i - 1]\ns = [0] + s\nfor i in range(l):\n    (a, b) = list(map(int, input().split()))\n    print(s[b] - s[a - 1])", "from typing import List, Tuple\n\ndef dict_scores(txt: str) -> Tuple[int]:\n    nums_tree = [0]\n    a_base = 96\n    n_sum = 0\n    for ch in txt:\n        n_sum += ord(ch) - a_base\n        nums_tree.append(n_sum)\n    return tuple(nums_tree)\n(n_in, q_in) = map(int, input().split())\nsong = input()\nansw_list = []\nsong_score = dict_scores(song)\nfor _ in range(q_in):\n    (start, end) = map(int, input().split())\n    answ_list.append(song_score[end] - song_score[start - 1])\nprint(*answ_list, sep='\\n')", "(n, q) = tuple(map(int, input().split(' ')))\ns = input()\nproblems = [tuple(map(int, input().split(' '))) for problem in range(q)]\ndictr = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nprefics_summs = [0]\nfor i in range(len(s)):\n    prefics_summs.append(prefics_summs[-1] + dictr[s[i]])\nfor (l, r) in problems:\n    print(prefics_summs[r] - prefics_summs[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "(n, s, *a) = open(0)\nb = [0]\nfor x in s:\n    b += (b[-1] + ord(x) - 96,)\nfor s in a:\n    (l, r) = map(int, s.split())\n    print(b[r] - b[l - 1])", "def song_len(lst, l, r):\n    return lst[r] - lst[l - 1]\na = input().split()\nstring = input()\ns = [0]\nfor i in string:\n    s.append(ord(i) - 96 + s[-1])\narr = []\nfor i in range(int(a[1])):\n    b = input().split()\n    arr.append(song_len(s, int(b[0]), int(b[1])))\nfor i in arr:\n    print(i)", "(num_str, num_question) = input().split()\nsong = input()\nif len(song) != int(num_str):\n    raise ValueError\nsong.lower()\nchar_point = [0]\npoint = 0\nfor char in song:\n    point += ord(char) - 96\n    char_point.append(point)\noutput = []\nfor n in range(int(num_question)):\n    qustion = input().split()\n    start_index = int(qustion[0])\n    end_index = int(qustion[1])\n    result = char_point[end_index] - char_point[start_index - 1]\n    output.append(result)\nfor print_elem in output:\n    print(print_elem)", "import collections\n(n, q) = tuple(map(int, input().split(' ')))\ns = input()\nproblems = [tuple(map(int, input().split(' '))) for problem in range(q)]\ndictr = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nprefics_summs = [0]\nfor i in range(len(s)):\n    prefics_summs.append(prefics_summs[-1] + dictr[s[i]])\nfor (l, r) in problems:\n    print(prefics_summs[r] - prefics_summs[l - 1])", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\n(n, q) = get_int()\ndp = [0] * (n + 1)\ns = str(input())\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + ord(s[i - 1]) % 97 + 1\nfor i in range(q):\n    (l, r) = get_int()\n    print(dp[r] - dp[l - 1])", "(n, q) = input().split()\nn = int(n)\nq = int(q)\ns = input()\nans = []\ntemp = [0]\nfor i in s:\n    temp.append(temp[-1] + (ord(i) - 96))\nfor i in range(q):\n    res = 0\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    ans.append(temp[r] - temp[l - 1])\nfor i in ans:\n    print(i)", "line_1 = list(map(int, input().split()))\n(song_len, queries_len) = line_1\nsong_string = input()\ndecrease = lambda num: int(num) - 1\nqueries = [list(map(decrease, input().split())) for _ in range(queries_len)]\nenglish_alph = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\nenglish_alph = {item: i + 1 for (i, item) in enumerate(english_alph.split())}\ncounter_len = [0] * song_len\nfor i in range(song_len):\n    letter = song_string[i]\n    counter_len[i] = english_alph[letter]\n    if i > 0:\n        counter_len[i] += counter_len[i - 1]\nj = 0\ncounter_len_2 = []\nfor q in range(queries_len - 1, -1, -1):\n    (start, end) = queries[j]\n    j += 1\n    total_len = 0\n    total_len += counter_len[end]\n    if start > 0:\n        total_len -= counter_len[start - 1]\n    counter_len_2.append(str(total_len))\nprint('\\n'.join(counter_len_2))", "(n, q) = list(map(int, input().split()))\nslowo = input()\nzapytania = []\nw = {}\nfor i in range(1, 27):\n    w[chr(i + 96)] = i\ntab = [0] * (n + 1)\ntab[0] = w[slowo[0]]\nfor i in range(q):\n    zapytania.append(list(map(int, input().split())))\nfor i in range(1, n):\n    tab[i] = tab[i - 1] + w[slowo[i]]\nfor i in zapytania:\n    print(tab[i[1] - 1] - tab[i[0] - 2])", "import string\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef isint(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\ndef solve():\n    l = list(string.ascii_lowercase)\n    d = {}\n    n = 1\n    for i in l:\n        d[i] = n\n        n += 1\n    (n, q) = intlist()\n    s = input()\n    ques = []\n    for i in range(q):\n        l = intlist()\n        ques.append(l)\n    ans = []\n    ans.append(d[s[0]])\n    for i in range(1, n):\n        ans.append(d[s[i]] + ans[-1])\n    ans1 = [0] * n\n    ans1[-1] = d[s[-1]]\n    for i in range(n - 2, -1, -1):\n        ans1[i] = d[s[i]] + ans1[i + 1]\n    for i in ques:\n        print(ans[i[1] - 1] - (ans1[0] - ans1[i[0] - 1]))\n    return ''\nprint(solve())", "(n, q) = tuple([int(x) for x in input().split()])\nstring = input()\narr = []\ncum_sum = [0] * (n + 1)\nfor a in range(1, n + 1):\n    cum_sum[a] = cum_sum[a - 1] + ord(string[a - 1]) - 96\nfor b in range(q):\n    (l, r) = tuple([int(x) for x in input().split()])\n    arr.append(cum_sum[r] - cum_sum[l - 1])\nfor element in arr:\n    print(element)", "def cast(cre, typ):\n    return type(typ)(map(cre, typ))\n\ndef inp_lis(cre):\n    if cre == str:\n        return input().split()\n    elif cre == bool:\n        return cast(bool, cast(int, input().split()))\n    else:\n        return cast(cre, input().split())\n\ndef repl(str_, idx=-1, char=''):\n    leng = len(str_)\n    return str_[:idx] + char + str_[(leng + idx) % leng + 1:]\n\ndef testcase():\n    (n, q) = inp_lis(int)\n    s = input()\n    lr = [inp_lis(int) for i in range(q)]\n    (l, r) = (0, 1)\n    ref = 'abcdefghijklmnopqrstuvwxyz'\n    dic = {}\n    for i in range(len(ref)):\n        if ref[i] in dic:\n            dic[ref[i]] = i + 1\n        else:\n            dic[ref[i]] = i + 1\n    v = [0] * n\n    for i in range(n):\n        v[i] = dic[s[i]] + v[i - 1]\n    for i in range(q):\n        ans = v[lr[i][r] - 1] - (v[lr[i][l] - 2] if lr[i][l] > 1 else 0)\n        print(ans)\n    return\n\ndef solution():\n    for t in range(int(input())):\n        testcase()\n    return\ntestcase()", "import sys\nimport math\nfrom math import gcd\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nN = 20005\nT = 1\nalp = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(T):\n    (n, q) = list(map(int, stdin.readline().rstrip().split()))\n    s = str(stdin.readline().strip('\\n'))\n    d = {}\n    for i in range(26):\n        d[alp[i]] = i + 1\n    a = [0] * n\n    for i in range(n):\n        a[i] = d[s[i]]\n    p = [0] * n\n    p[0] = a[0]\n    for i in range(n):\n        if i != 0:\n            p[i] = p[i - 1] + a[i]\n    p = [0] + p\n    for i in range(q):\n        (l, r) = list(map(int, stdin.readline().rstrip().split()))\n        print(p[r] - p[l - 1])", "from collections import Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef solve():\n    (n, q) = read()\n    s = st()\n    pref = [0] * (n + 1)\n    for i in range(n):\n        pref[i + 1] += pref[i] + (ord(s[i]) - 96)\n    for _ in range(q):\n        (l, r) = read()\n        ans_.append(pref[r] - pref[l - 1])\nsolve()\nfor i in ans_:\n    print(i)", "import string\nalphabet_dict = {letter: i + 1 for (i, letter) in enumerate(string.ascii_lowercase)}\n(n, q) = map(int, input().split())\nsong = str(input())\nans = []\nans_ = [0]\nfor l in song:\n    ans_.append(ans_[-1] + alphabet_dict[l])\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    ans.append(ans_[r] - ans_[l - 1])\nfor a in ans:\n    print(a)", "(n, q) = map(int, input().split())\nk1 = []\nalphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nk = []\nd = 0\nfor j in input():\n    d = d + (alphabet.index(j) + 1)\n    k.append(d)\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    x = 0\n    if l > 1:\n        x = k[r - 1] - k[l - 1 - 1]\n    else:\n        x = k[r - 1]\n    k1.append(x)\nfor t in k1:\n    print(t)", "def process(a, q):\n    N = len(a)\n    freq = [0] * (N + 1)\n    for i in range(N):\n        freq[i + 1] = freq[i] + (ord(a[i]) - ord('a')) + 1\n    ans = []\n    for (l, r) in q:\n        ans.append(freq[r] - freq[l - 1])\n    return ans\n(n, q) = [int(_) for _ in input().split(' ')]\nans = []\na = input()\nquery = []\nfor i in range(q):\n    (l, r) = [int(_) for _ in input().split(' ')]\n    query.append((l, r))\nans = process(a, query)\nfor i in ans:\n    print(i)", "(num, item) = map(int, input().split(' '))\narr = input()\ninput_arr = []\nfor _ in range(item):\n    (one, two) = map(int, input().split(' '))\n    input_arr.append([one, two])\nf = lambda x: ord(x) - 96\narr_num = list(map(f, list(arr)))\np_len = len(arr_num)\npre_arr = [0] * p_len\nfor i in range(1, p_len):\n    pre_arr[i] = pre_arr[i - 1] + arr_num[i]\nfor (x, y) in input_arr:\n    x -= 1\n    y -= 1\n    res = pre_arr[y] - pre_arr[x] + arr_num[x]\n    print(res)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n(n, q) = get_ints()\ntext = input()\narr = []\nfor i in range(len(text)):\n    if i == 0:\n        arr.insert(i, ord(text[i]) - 96)\n    else:\n        arr.insert(i, arr[i - 1] + ord(text[i]) - 96)\nfor j in range(int(q)):\n    (k, l) = get_ints()\n    if k != l:\n        ans = arr[l - 1] - arr[k - 1] + ord(text[k - 1]) - 96\n    else:\n        ans = ord(text[k - 1]) - 96\n    print(ans)", "from collections import defaultdict\n\ndef findAns(s):\n    A = defaultdict(lambda : 0)\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alp)):\n        A[alp[i]] = i + 1\n    arr = [0]\n    res = 0\n    for i in range(len(s)):\n        res += A[s[i]]\n        arr.append(res)\n    return arr\n(n, q) = [int(x) for x in input().split(' ')]\ns = str(input())\nQ = []\nfor i in range(q):\n    (l, r) = [int(x) for x in input().split(' ')]\n    Q.append([l, r])\nlst = findAns(s)\nfor (l, r) in Q:\n    print(lst[r] - lst[l - 1])", "(n, s, *a) = open(0)\nar = [0]\nfor x in s:\n    ar.append(ar[-1] + ord(x) - 96)\nfor s in a:\n    (a2, b2) = map(int, s.split())\n    print(ar[b2] - ar[a2 - 1])", "(n, q) = map(int, input().split())\ns = input()\nlan = []\nls = []\nctr = 0\nfor indx in range(n):\n    ctr += ord(s[indx]) - 96\n    ls.append(ctr)\nfor x in range(q):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        lan.append(ls[r - 1])\n    else:\n        lan.append(ls[r - 1] - ls[l - 2])\nprint(*lan, sep='\\n')", "from string import ascii_lowercase\n\ndef fun(st, ls, querry):\n    (n, q) = ls\n    dct = {}\n    j = 1\n    ans = ''\n    temp = ascii_lowercase\n    for i in temp:\n        if i not in dct:\n            dct[i] = j\n            j += 1\n    prefix_ar = [0 for i in range(n)]\n    j = 0\n    total_length = 0\n    for i in st:\n        get_count = dct.get(i)\n        ans += i * get_count\n        prefix_ar[j] = get_count\n        total_length += get_count\n        j += 1\n    prefix_sum = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            prefix_sum[i] = prefix_ar[i]\n        else:\n            prefix_sum[i] = prefix_ar[i] + prefix_sum[i - 1]\n    for (i, j) in querry:\n        if i != 1:\n            print(prefix_sum[j - 1] - prefix_sum[i - 2])\n        else:\n            print(prefix_sum[j - 1])\nT = 1\nfor i in range(T):\n    ls = list(map(int, input().split()))\n    st = input()\n    querry = []\n    for k in range(ls[1]):\n        ks = list(map(int, input().split()))\n        querry.append(ks)\n    fun(st, ls, querry)", "(n, q) = map(int, input().split())\ns = input()\nli = [0]\nfor i in s:\n    li.append(li[-1] + ord(i) - 96)\nfor j in range(q):\n    (l, r) = map(int, input().split())\n    print(li[r] - li[l - 1])", "from string import ascii_lowercase\n\ndef fun(st, ls, querry):\n    (n, q) = ls\n    dct = {}\n    j = 1\n    ans = ''\n    temp = ascii_lowercase\n    for i in temp:\n        if i not in dct:\n            dct[i] = j\n            j += 1\n    prefix_ar = [0 for i in range(n)]\n    j = 0\n    total_length = 0\n    for i in st:\n        get_count = dct.get(i)\n        ans += i * get_count\n        prefix_ar[j] = get_count\n        total_length += get_count\n        j += 1\n    prefix_sum = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            prefix_sum[i] = prefix_ar[i]\n        else:\n            prefix_sum[i] = prefix_ar[i] + prefix_sum[i - 1]\n    for (i, j) in querry:\n        if i != 1:\n            print(prefix_sum[j - 1] - prefix_sum[i - 2])\n        else:\n            print(prefix_sum[j - 1])\nT = 1\nfor i in range(T):\n    ls = list(map(int, input().split()))\n    st = input()\n    querry = []\n    for k in range(ls[1]):\n        ks = list(map(int, input().split()))\n        querry.append(ks)\n    fun(st, ls, querry)"]