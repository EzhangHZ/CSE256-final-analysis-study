["import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "from math import gcd\n\ndef main():\n    (n, k) = map(int, input().split())\n    st = input()\n    alph = [0 for i in range(ord('z') - ord('a') + 1)]\n    for i in st:\n        alph[ord(i) - ord('a')] += 1\n    for i in range(n, 0, -1):\n        n2 = gcd(i, k)\n        n1 = i // n2\n        for j in alph:\n            n2 -= j // n1\n        if n2 <= 0:\n            print(i)\n            return\nfor t in range(int(input())):\n    main()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor test in range(0, t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    s = input()\n    dic = {}\n    b = []\n    for i in range(0, n):\n        if s[i] in dic:\n            b[dic[s[i]]] += 1\n        else:\n            dic[s[i]] = len(b)\n            b.append(1)\n    kk = k\n    b.sort()\n    for l in range(n, 0, -1):\n        k = kk % l\n        if k == 0:\n            print(l)\n            break\n        s = k * l // gcd(l, k) // k\n        ll = l\n        for i in range(len(b) - 1, -1, -1):\n            ll -= b[i] // s * s\n            if ll <= 0:\n                print(l)\n                break\n        if ll <= 0:\n            break", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\nfrom sys import stdin, stdout\n\ndef sol():\n    (n, k) = rrm()\n    s = input().strip()\n    fr = [0 for i in range(26)]\n    for c in s:\n        fr[ord(c) - ord('a')] += 1\n    res = 1\n    for i in range(1, k + 1):\n        if k % i == 0:\n            x = 1\n            while True:\n                cn = x * i\n                z = 0\n                for j in fr:\n                    z += j // x\n                if z < i:\n                    break\n                x += 1\n            x -= 1\n            res = max(res, x * i)\n    print(res)\n    return\nT = rri()\nfor t in range(1, T + 1):\n    ans = sol()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    dic = {}\n    for i in st:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    li = list(dic.values())\n    li.sort()\n    ans = 1\n    for i in range(n, 0, -1):\n        xx = k % i\n        lc = i * xx // math.gcd(i, xx)\n        if xx == 0:\n            ans = i\n            break\n        elif lc == i * xx:\n            if li[-1] >= i:\n                ans = i\n                break\n        else:\n            yy = lc // xx\n            count = 0\n            for j in li:\n                count += j // yy\n            if yy * count >= i:\n                ans = i\n                break\n    print(ans)", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef feasible(n, k, beads, lng, maxcnt):\n    g = gcd(k, lng)\n    h = lng // g\n    if g == 1:\n        return lng <= maxcnt\n    g0 = 0\n    for (_, c) in beads.items():\n        g0 += c // h\n    return g <= g0\n\ndef solve(n, k, beads):\n    maxcnt = 0\n    for (_, c) in beads.items():\n        if c > maxcnt:\n            maxcnt = c\n    for lng in range(n, 1, -1):\n        if feasible(n, k, beads, lng, maxcnt):\n            return lng\n    return 1\ncases = int(input().strip())\nfor _ in range(cases):\n    (n, k) = tuple(map(int, input().strip().split()))\n    store = input().strip()\n    beads = {}\n    for b in store:\n        if b in beads:\n            beads[b] += 1\n        else:\n            beads[b] = 1\n    print(solve(n, k, beads))", "import math\ntest = int(input())\nfor t in range(0, test):\n    (n, k) = map(int, input().split())\n    s = input()\n    count = [0 for i in range(0, 26)]\n    for ch in s:\n        count[ord(ch) - ord('a')] += 1\n    count.sort()\n    fin = 1\n    for m in range(2, n + 1):\n        c = math.gcd(m, k)\n        d = m // c\n        ans = 0\n        for x in count:\n            ans += x // d\n        if ans * d >= m:\n            fin = m\n    print(fin)", "t = int(input())\nfor i in range(t):\n    [n, k] = list(map(int, input().split()))\n    s = input()\n    l = [s.count(a) for a in set(s)]\n    M = 0\n    for j in range(1, n + 1):\n        MM = sum(map(lambda x: x // j, l))\n        if MM == 0:\n            continue\n        while k % MM:\n            MM -= 1\n        M = max(M, MM * j)\n    print(M)", "import math\nimport collections\n\ndef solve(n, k, s):\n    beadCount = collections.Counter(s)\n    for m in range(n, 0, -1):\n        g = math.gcd(m, k)\n        l = m / g\n        count = sum([v // l * l for v in beadCount.values()])\n        if count >= m:\n            print(m)\n            break\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    solve(n, k, s)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, input().split())\n\ndef find(cnt, k, h):\n    l = 0\n    r = 2001\n    while r - l > 1:\n        now = 0\n        c = (l + r) // 2\n        for j in cnt:\n            now += j // c\n        if now >= h:\n            l = c\n        else:\n            r = c\n    return l * h\nfor i in range(mint()):\n    (n, k) = map(int, input().split())\n    cnt = [0] * 26\n    for i in minp():\n        cnt[ord(i) - ord('a')] += 1\n    cnt.sort(reverse=True)\n    ans = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            ans = max(ans, find(cnt, k, i))\n            if k // i != i:\n                ans = max(ans, find(cnt, k, k // i))\n    print(ans)", "import sys\n\ndef find(cnt, k, h):\n    l = 0\n    r = 2001\n    while r - l > 1:\n        now = 0\n        c = (l + r) // 2\n        for j in cnt:\n            now += j // c\n        if now >= h:\n            l = c\n        else:\n            r = c\n    return l * h\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    cnt = [0] * 26\n    for i in input():\n        cnt[ord(i) - ord('a')] += 1\n    cnt.sort(reverse=True)\n    ans = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            ans = max(ans, find(cnt, k, i))\n            if k // i != i:\n                ans = max(ans, find(cnt, k, k // i))\n    print(ans)", "def find(cnt, k, h):\n    l = 0\n    r = 2001\n    while r - l > 1:\n        now = 0\n        c = (l + r) // 2\n        for j in cnt:\n            now += j // c\n        if now >= h:\n            l = c\n        else:\n            r = c\n    return l * h\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    cnt = [0] * 26\n    for i in input():\n        cnt[ord(i) - ord('a')] += 1\n    cnt.sort(reverse=True)\n    ans = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            ans = max(ans, find(cnt, k, i))\n            if k // i != i:\n                ans = max(ans, find(cnt, k, k // i))\n    print(ans)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    freq = [0 for i in range(26)]\n    for _ in s:\n        freq[ord(_) - ord('a')] += 1\n    freq.sort()\n    for i in range(freq.count(0)):\n        freq.remove(0)\n    ans = 1\n    for len in range(2, n + 1):\n        g = gcd(k, len)\n        sz = len // g\n        count = 0\n        for each in freq:\n            count += each // sz\n        if count * sz >= len:\n            ans = len\n    print(ans)", "import sys\nfrom collections import Counter\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef factor(a):\n    if a == 1:\n        return [1]\n    res = []\n    for d in range(1, a + 1):\n        if d ** 2 > a:\n            break\n        if a % d == 0:\n            res.append(d)\n            res.append(a // d)\n        if res[-1] == res[-2]:\n            res.pop()\n    return res\n\ndef main():\n    inf = 10 ** 9\n    for _ in range(II()):\n        (n, k) = MI()\n        ca = Counter(SI())\n        aa = list(ca.values())\n        aa.sort(reverse=True)\n        mns = [inf] * len(aa)\n        for (i, a) in enumerate(aa):\n            mns[i] = min(a, mns[i - 1])\n        ans = 0\n\n        def ok(m):\n            cnt = 0\n            for a in aa:\n                if a < m:\n                    return False\n                cnt += a // m\n                if cnt >= f:\n                    return True\n        for f in factor(k):\n            l = 0\n            r = 2001\n            while l + 1 < r:\n                m = (l + r) // 2\n                if ok(m):\n                    l = m\n                else:\n                    r = m\n            ans = max(ans, l * f)\n        print(ans)\nmain()", "import math\nfrom collections import Counter\n\ndef main(n, k, s):\n    cnt = Counter(s)\n    for l in range(n, 0, -1):\n        t = l / math.gcd(l, k)\n        s = sum((v // t * t for v in cnt.values()))\n        if s >= l:\n            return l\nfor _ in range(int(input())):\n    print(main(*map(int, input().split()), input()))", "import math\nimport collections\n\ndef solve(n, k, s):\n    ctr = collections.Counter(s)\n    for m in range(n, 0, -1):\n        g = math.gcd(m, k)\n        l = m / g\n        count = sum([v // l * l for v in ctr.values()])\n        if count >= m:\n            print(m)\n            break\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    solve(n, k, s)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef find(cnt, k, h):\n    l = 0\n    r = 2001\n    while r - l > 1:\n        now = 0\n        c = (l + r) // 2\n        for j in cnt:\n            now += j // c\n        if now >= h:\n            l = c\n        else:\n            r = c\n    return l * h\n\ndef solve():\n    (n, k) = mints()\n    cnt = [0] * 26\n    for i in minp():\n        cnt[ord(i) - ord('a')] += 1\n    cnt.sort(reverse=True)\n    ans = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            ans = max(ans, find(cnt, k, i))\n            if k // i != i:\n                ans = max(ans, find(cnt, k, k // i))\n    print(ans)\nfor i in range(mint()):\n    solve()", "def find(cnt, k, h, l, r):\n    while r - l > 1:\n        (now, c) = (0, (l + r) // 2)\n        for j in cnt:\n            now += j // c\n        if now >= h:\n            l = c\n        else:\n            r = c\n    return l * h\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    cnt = [0] * 26\n    for i in input():\n        cnt[ord(i) - ord('a')] += 1\n    cnt.sort(reverse=True)\n    ans = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            ans = max(ans, find(cnt, k, i, 0, 2001))\n            if k // i != i:\n                ans = max(ans, find(cnt, k, k // i, 0, 2001))\n    print(ans)", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\nfrom collections import Counter as cc\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, k) = I()\n    s = list(input().strip())\n    l = cc(s)\n    a = list(l.values())\n    for i in range(n, 0, -1):\n        g = gcd(i, k)\n        p = i // g\n        an = 0\n        for j in a:\n            if j >= p:\n                an += j // p * p\n        if an >= i:\n            print(i)\n            break", "from collections import Counter\nfrom math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = Counter(s)\n    vals = list(c.values())\n    vals.sort()\n    ans = -1\n    for i in range(1, n + 1):\n        no_grp = gcd(i, k)\n        t = i // no_grp\n        cnt = 0\n        for v in vals:\n            v_ = v\n            while v_ >= t:\n                cnt += 1\n                v_ -= t\n        if cnt >= no_grp:\n            ans = i\n    print(ans)", "from collections import Counter\ntc = int(input())\nwhile tc:\n    (n, k) = map(int, input().split())\n    cnt = Counter(input())\n    divs = []\n    for i in range(1, 1 + int(k ** 0.5)):\n        if k % i == 0:\n            divs.append(i)\n            divs.append(k // i)\n    res = 0\n    for i in divs:\n        rep = 1\n        while rep * i <= n:\n            c = 0\n            for k in cnt:\n                c += cnt[k] // rep\n            if c >= i:\n                res = max(res, rep * i)\n            else:\n                break\n            rep += 1\n    print(res)\n    tc -= 1", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "from math import gcd\nfrom collections import Counter\nfor _ in range(int(input())):\n    (n, k) = [int(j) for j in input().split()]\n    s = input()\n    (ctr, result) = (Counter(s), 0)\n    for i in range(1, n + 1):\n        l = i // gcd(i, k)\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            result = i\n    print(result)", "import math\nt = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split(' '))\n    (s, cnt, an) = (input(), [], 0)\n    for i in range(26):\n        cnt.append(0)\n    for el in s:\n        cnt[ord(el) - ord('a')] += 1\n    for i in range(1, n + 1):\n        gc = math.gcd(i, k)\n        (ln, sm) = (i / gc, 0)\n        for el in cnt:\n            sm += el // ln\n        if sm >= gc:\n            an = max(an, i)\n    print(an)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    freq = [0 for i in range(26)]\n    for _ in s:\n        freq[ord(_) - ord('a')] += 1\n    freq.sort()\n    ans = 1\n    for len in range(2, n + 1):\n        g = gcd(k, len)\n        sz = len // g\n        count = 0\n        for each in freq:\n            count += each // sz\n        if count * sz >= len:\n            ans = len\n    print(ans)", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "from collections import Counter\n\ndef gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    x = Counter(s)\n    for i in range(1, n + 1):\n        g = gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in x.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = set()\n    dic = {}\n    for i in s:\n        dic[i] = dic.get(i, 0) + 1\n    a = dic.values()\n    ans = 0\n    for i in range(1, int(k ** 0.5) + 1):\n        if k % i == 0:\n            l.add(i)\n            l.add(k // i)\n    for fact in l:\n        for j in range(fact, n + 1, fact):\n            c = 0\n            temp = j // fact\n            for i in a:\n                c += i // temp\n            if c >= fact:\n                ans = max(ans, j)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    [n, k] = list(map(int, input().split()))\n    s = input()\n    l = [s.count(a) for a in set(s)]\n    M = 0\n    for j in range(1, n + 1):\n        MM = sum(map(lambda x: x // j, l))\n        if MM == 0:\n            continue\n        while k % MM:\n            MM -= 1\n        M = max(M, MM * j)\n    print(M)", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "import sys\nfrom collections import Counter\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef factor(a):\n    if a == 1:\n        return [1]\n    res = []\n    for d in range(1, a + 1):\n        if d ** 2 > a:\n            break\n        if a % d == 0:\n            res.append(d)\n            res.append(a // d)\n        if res[-1] == res[-2]:\n            res.pop()\n    return res\n\ndef main():\n    for _ in range(II()):\n        (n, k) = MI()\n        ca = Counter(SI())\n        aa = list(ca.values())\n        aa.sort(reverse=True)\n        ans = 0\n\n        def ok(m):\n            cnt = 0\n            for a in aa:\n                if a < m:\n                    return False\n                cnt += a // m\n                if cnt >= f:\n                    return True\n        for f in factor(k):\n            l = 0\n            r = 2001\n            while l + 1 < r:\n                m = (l + r) // 2\n                if ok(m):\n                    l = m\n                else:\n                    r = m\n            ans = max(ans, l * f)\n        print(ans)\nmain()", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "import math\nimport collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ctr = collections.Counter(s)\n    ans = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i // g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            ans = i\n    print(ans)", "import math\nimport collections\n\ndef solve(n, k, s):\n    ctr = collections.Counter(s)\n    max = 0\n    for i in range(1, n + 1):\n        g = math.gcd(i, k)\n        l = i / g\n        cnt = sum([v // l * l for v in ctr.values()])\n        if cnt >= i:\n            max = i\n    print(max)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    solve(n, k, s)", "from collections import Counter\nfrom math import gcd\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    str = input()\n    ans = 0\n    count = Counter(str)\n    for i in range(1, n + 1):\n        loop = gcd(i, k)\n        num = i / loop\n        c = 0\n        for j in count.values():\n            c += j // num\n        if c >= loop:\n            ans = max(ans, i)\n    print(ans)", "import collections\nimport string\n\ndef main():\n    (n, k) = map(int, input().split())\n    s = input()\n    c = collections.Counter(s)\n    cnt = sorted(list(c.values()))\n    divs = []\n    i = 1\n    while i * i < k:\n        if k % i == 0:\n            divs.append(i)\n            divs.append(k // i)\n        i += 1\n    if i * i == k:\n        divs.append(i)\n    divs.sort()\n    while divs[-1] > n:\n        divs.pop()\n    ans = cnt[-1]\n    for period in divs:\n        l = 0\n        r = (n + period) // period\n        while l + 1 < r:\n            m = (l + r) // 2\n            chunks = 0\n            for i in range(-min(period, len(cnt)), 0):\n                chunks += cnt[i] // m\n            if chunks >= period:\n                l = m\n            else:\n                r = m\n        cycles = l\n        ans = max(ans, cycles * period)\n    print(ans)\ntn = int(input())\nfor _ in range(tn):\n    main()", "from collections import deque\nimport collections\n\ndef solve(n, k, s):\n    lettersCounter = collections.Counter(s)\n    for m in range(n, 0, -1):\n        used = [False] * m\n        cycles = deque()\n        for i in range(m):\n            if used[i]:\n                continue\n            j = (i + k) % m\n            used[i] = True\n            cycles.insert(len(cycles), 1)\n            while not used[j]:\n                cycles[len(cycles) - 1] += 1\n                used[j] = True\n                j = (j + k) % m\n        cycles = list(sorted(cycles))\n        count = list(sorted(lettersCounter.values()))\n        canDoIt = True\n        while cycles:\n            if count[len(count) - 1] < cycles[len(cycles) - 1]:\n                canDoIt = False\n                break\n            else:\n                count[len(count) - 1] -= cycles[len(cycles) - 1]\n                cycles.pop()\n                count = sorted(count)\n        if canDoIt:\n            return m\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))", "t = int(input())\nwhile t:\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    mem = {i: 0 for i in s}\n    for c in s:\n        mem[c] += 1\n    chars = sorted(list(mem.values()))\n    for i in range(n, 0, -1):\n        p = [-1] * i\n        for j in range(i):\n            p[j] = (j + k) % i\n        cycles = []\n        unused = set([x for x in range(i)])\n        while unused:\n            curr = unused.pop()\n            unused.add(curr)\n            l = 0\n            while curr in unused:\n                l += 1\n                unused.remove(curr)\n                curr = p[curr]\n            cycles.append(l)\n        cycles.sort()\n        x = 0\n        y = 0\n        char_counts = chars.copy()\n        while x < len(cycles) and y < len(char_counts):\n            if char_counts[y] >= cycles[x]:\n                char_counts[y] -= cycles[x]\n                x += 1\n                if char_counts[y] != 0:\n                    y -= 1\n            y += 1\n        if x >= len(cycles):\n            print(i)\n            break\n    t -= 1"]