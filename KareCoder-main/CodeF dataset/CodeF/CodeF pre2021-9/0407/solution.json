["from math import ceil\ntestcases = int(input())\nresults = []\nfor i in range(testcases):\n    [n, g, b] = [int(num) for num in input().split()]\n    threshold = ceil(n / 2)\n    min_cycles = threshold // g\n    result = (min_cycles - 1) * (g + b) + g\n    if min_cycles * g < threshold:\n        result += b + (threshold - min_cycles * g)\n    if result < n:\n        result = n\n    results.append(int(result))\nfor i in results:\n    print(i)", "import math\nt = int(input())\nanss = []\nwhile t:\n    (n, a, b) = map(int, input().split())\n    ans = 0\n    if a >= b:\n        ans = n\n    else:\n        m = math.ceil(n / 2)\n        if m % a == 0:\n            ans = m + (m // a - 1) * b\n        else:\n            ans = m + m // a * b\n    anss.append(max(ans, n))\n    t = t - 1\nfor i in anss:\n    print(i)", "(t, l) = (int(input()), [])\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    if g >= b or g >= n:\n        l.append(str(n))\n    else:\n        q = (n + 1) // 2\n        if q % g == 0:\n            r = (q // g - 1) * (g + b) + g\n            if r >= n:\n                l.append(str(r))\n            else:\n                l.append(str(n))\n        else:\n            r = q // g * (g + b) + q % g\n            if r >= n:\n                l.append(str(r))\n            else:\n                l.append(str(n))\nprint('\\n'.join(l))", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    good = (a + 1) // 2\n    cyc = (good + b - 1) // b\n    ans = (cyc - 1) * (b + c) + min(good - (cyc - 1) * b, b)\n    ans += max(a - ans, 0)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    hf = (n - 1) // 2 + 1\n    if hf // g == 0:\n        res = n\n    elif hf % g == 0:\n        res = max(b * (hf // g - 1) + hf, n)\n    else:\n        res = max(b * (hf // g) + hf, n)\n    print(res)", "T = int(input())\nfor q in range(T):\n    (n, g, b) = map(int, input().split())\n    if g >= (n + 1) // 2:\n        ans = n\n    else:\n        ans1 = (n + 1) // 2\n        ans2 = n // 2\n        ans3 = ans4 = 0\n        if ans1 % g == 0:\n            ans3 = ans1 // g\n        else:\n            ans3 = ans1 // g + 1\n        ans3 -= 1\n        ans = ans1 + ans3 * b\n        if n >= ans:\n            ans = n\n    print(ans)", "m = int(input())\nfor i in range(m):\n    (n, g, b) = map(int, input().split(' '))\n    num = (n + 1) // 2\n    if num % g != 0:\n        sum = num // g * (g + b) + num % g\n    else:\n        sum = num // g * (g + b) - b\n    print(max(sum, n))", "from math import ceil\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    t = ceil(n / 2) + b * ceil((n - 2 * g) / (2 * g))\n    print(max(t, n))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    half = (n + 1) // 2\n    good = half // g * g + half % g\n    bad = half // g * b\n    if half % g == 0:\n        bad -= b\n    ans = good + bad\n    print(max(n, ans))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    N = (n + 1) // 2\n    print(max(n, N // g * (b + g) + (-b if N % g == 0 else N % g)))", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    minn = n // 2 + n % 2\n    tot = minn // g * (g + b)\n    if minn <= g:\n        print(n)\n        continue\n    if n - minn - b * (minn // g) < 0:\n        if minn % g == 0:\n            tot -= b - max(0, n // 2 + b - b * (minn // g))\n        else:\n            tot += minn % g\n        print(tot)\n        continue\n    left = minn % g + (n - minn - b * (minn // g))\n    print(tot + left)", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    minn = n // 2 + n % 2\n    tot = minn // g * (g + b)\n    if minn <= g:\n        print(n)\n        continue\n    if n - minn - b * (minn // g) < 0:\n        if minn % g == 0:\n            tot -= b - max(0, n // 2 + b - b * (minn // g))\n        else:\n            tot += minn % g\n        print(tot)\n        continue\n    left = minn % g + (n - minn - b * (minn // g))\n    print(tot + left)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, G, B) = [int(x) for x in input().split()]\n        least = -(-N // 2)\n        a = -(-least // G)\n        if G >= N:\n            print(N)\n        else:\n            x = (a - 1) * (G + B)\n            if N - x > G:\n                print(N)\n            else:\n                print(x + max(-(-N // 2) - (a - 1) * G, N - x))\nmain()", "from math import ceil\nT = int(input())\nanswer = ''\nfor t in range(T):\n    (n, g, b) = list(map(int, input().split(' ')))\n    if n <= g:\n        answer += str(n) + '\\n'\n        continue\n    ost = n - g\n    if ost <= n // 2:\n        answer += str(n) + '\\n'\n        continue\n    result = g + b\n    nn = n\n    n -= n // 2\n    n -= g\n    need = ceil(n / g)\n    result += need * g + (need - 1) * b\n    n -= need * g\n    if n < 0:\n        result += n\n    if result < nn:\n        result = nn\n    answer += str(int(result)) + '\\n'\nprint(answer)", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    (n, g, b) = nm()\n    if (n // (g + b) * g + min(g, n % (g + b))) * 2 >= n:\n        print(n)\n        return\n    s = (n + 1) // 2\n    print(s + (s - 1) // g * b)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def solution(test):\n    (n, g, b) = [x for x in test]\n    require = 0\n    if n % 2 == 0:\n        require = n // 2\n    else:\n        require = n // 2 + 1\n    day = 0\n    if require % g == 0:\n        day = require + (require // g - 1) * b\n    else:\n        div = require // g\n        day = div * (g + b) + require % g\n    if day < n:\n        day = n\n    print(day)\ntest_case = int(input())\ntest_input = []\nfor i in range(test_case):\n    ar = [int(x) for x in input().split()]\n    test_input.append(ar)\nfor test in test_input:\n    solution(test)", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    need = (n + 1) // 2\n    totald = need // g * (g + b)\n    if need % g > 0:\n        print(max(totald + need % g, n))\n    else:\n        print(max(n, totald - b))", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    k = n\n    n = (n + 1) // 2\n    c = (n + g - 1) // g\n    print(max((c - 1) * b + n, k))", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    if n % 2 == 0:\n        req = n // 2\n    else:\n        req = n // 2 + 1\n    q = req // g\n    rem = req % g\n    if rem == 0:\n        bcov = b * (q - 1)\n    else:\n        bcov = b * q\n    tot = bcov + q * g + rem\n    if tot >= n:\n        print(tot)\n    else:\n        print(n)", "import sys\nt = int(sys.stdin.readline().rstrip())\n\ndef main():\n    for _ in range(t):\n        (n, g, b) = map(int, sys.stdin.readline().split())\n        half = (n + 1) // 2\n        (q, r) = divmod(half, g)\n        res = (g + b) * q + r if r else (g + b) * (q - 1) + g\n        yield max(res, n)\nans = main()\nprint(*ans, sep='\\n')", "import sys\nimport math\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = int(input())\nfor tt in range(t):\n    (n, g, b) = map(int, sys.stdin.readline().split(' '))\n    x = (n + 1) // 2\n    gg = x // g\n    ans = 0\n    if gg * g < x:\n        gg += 1\n    if gg > 1:\n        ans = (gg - 1) * b + x\n    else:\n        ans = x\n    print(max(ans, n))\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "from sys import stdin\nfrom math import ceil\nT = int(stdin.readline())\ntests = []\nfor t in range(T):\n    (n, g, b) = [int(x) for x in stdin.readline().split(' ')]\n    tests.append((n, g, b))\nfor test in tests:\n    (n, g, b) = test\n    count = 0\n    availbad = n // 2\n    coolticks = ceil(availbad / b)\n    if n <= coolticks * g + availbad:\n        print(n)\n        continue\n    count += coolticks * (g + b)\n    n -= coolticks * g + availbad\n    (moretick, remain) = divmod(n, g)\n    count += moretick * (g + b) + remain\n    if moretick >= 1 and remain == 0:\n        print(count - b)\n    else:\n        print(count)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, G, B) = [int(x) for x in input().split()]\n        least = -(-N // 2)\n        a = -(-least // G)\n        x = (a - 1) * (G + B)\n        print(x + max(least - (a - 1) * G, N - x))\nmain()", "def solution():\n    from sys import stdin, stdout\n    (_input, _print, _range, _int, _len, _str) = (stdin.readline, stdout.write, range, int, len, str)\n    for _ in _range(_int(_input())):\n        (n, g, b) = [_int(i) for i in _input().split()]\n        counter = 0\n        great = n // 2 if n % 2 == 0 else n // 2 + 1\n        while n > 0 or great > 0:\n            if n > g + b:\n                days = n // (g + b)\n                counter += days * (g + b)\n                great -= days * g\n                n %= g + b\n            elif great > 0 and great > g:\n                days = great // g\n                counter += days * (g + b)\n                n -= days * (g + b)\n                great %= g\n                if great == 0 and n + b <= 0:\n                    counter -= b\n            elif great == 0 and n > 0:\n                counter += n\n                n = 0\n            else:\n                counter += great\n                n -= great\n                great = 0\n        _print(_str(counter) + '\\n')\nsolution()", "T = int(input())\nfor i in range(T):\n    (n, g, b) = map(int, input().split())\n    request = (n + 1) // 2\n    if request % g == 0:\n        cnt = request // g\n        result = max(cnt * (b + g) - b, n)\n    else:\n        cnt = request // g + 1\n        result = max((cnt - 1) * (b + g) + request - (cnt - 1) * g, n)\n    if request <= g:\n        result = n\n    print(result)", "T = int(input())\nfor i in range(T):\n    (n, g, b) = map(int, input().split())\n    request = (n + 1) // 2\n    if request % g == 0:\n        cnt = request // g\n        result = max(cnt * (b + g) - b, n)\n    else:\n        cnt = request // g + 1\n        result = max((cnt - 1) * (b + g) + request - (cnt - 1) * g, n)\n    if request <= g:\n        result = n\n    print(result)", "for i in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    nn = (n + 1) // 2\n    print(max(nn + (nn - 1) // g * b, n))", "from math import ceil\n\ndef f(n, a, b):\n    days = ceil(n / 2)\n    req = days\n    grps = (ceil(req / a) - 1) * b\n    return max(grps + days, n)\nfor i in range(int(input())):\n    (a, b, c) = map(int, input().strip().split())\n    print(f(a, b, c))", "def f(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\ndef g(n, a, b):\n    if a >= b:\n        return n\n    else:\n        x = f(n, 2)\n        y = n - x\n        minmtrips = f(x, a)\n        if (minmtrips - 1) * b >= y:\n            if x % a == 0:\n                return (minmtrips - 1) * (a + b) + a\n            else:\n                return (minmtrips - 1) * (a + b) + x % a\n        else:\n            return n\nt = int(input())\nfor i in range(t):\n    array = list(map(int, input().rstrip().split()))\n    n = array[0]\n    a = array[1]\n    b = array[2]\n    print(g(n, a, b))", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    n1 = (n - 1) // 2 + 1\n    k = (n1 - 1) // g + 1\n    s = max((k - 1) * b + n1, n)\n    print(s, end='\\n')", "for _ in [0] * int(input()):\n    (n, g, b) = map(int, input().split())\n    m = -1 - -n // 2\n    print(max(n, m + m // g * b + 1))", "import math\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    c = 0\n    k = math.ceil(n / 2)\n    a = math.ceil(k / g)\n    c = (a - 1) * b + k\n    print(max(c, n))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    m = (n + 1) // 2\n    print(max(n, (m - 1) // g * b + m))", "import math\n\ndef nationalProject(A, g, b):\n    reqBD = math.ceil(A // 2 / b) * (g + b)\n    G = math.ceil(A // 2 / b) * g\n    if G >= math.ceil(A / 2):\n        return A\n    else:\n        if (math.ceil(A / 2) - G) % g == 0:\n            return reqBD + (math.ceil(A / 2) - G) // g * (g + b) - b\n        return reqBD + (math.ceil(A / 2) - G) // g * (g + b) + (math.ceil(A / 2) - G) % g\nt = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    print(nationalProject(n, g, b))", "T = int(input())\nfor h in range(T):\n    (n, g, b) = map(int, input().split())\n    if n <= g:\n        print(n)\n    elif g >= b:\n        print(n)\n    elif b > g:\n        k = (n + 1) // 2\n        h = k // g\n        alpha = (h - 1) * b + h * g\n        if k % g != 0:\n            alpha = alpha + b + k % g\n        print(max(n, alpha))", "import math\nfor _ in range(int(input())):\n    (n, g, b) = tuple(map(int, input().split()))\n    h = math.ceil(n / 2)\n    l = math.ceil(h / g)\n    cum = l * g + (l - 1) * b\n    cum1 = (g + b) * (l - 1)\n    if cum < n:\n        print(n)\n    else:\n        print(max(n, cum1 + h - g * (l - 1)))", "import math\nwhatever = int(input())\nfor i in range(whatever):\n    test_case = input().split()\n    n = int(test_case[0])\n    g = int(test_case[1])\n    b = int(test_case[2])\n    if g > n:\n        print(n)\n        continue\n    total_days = 0\n    ngood = math.ceil(n / 2)\n    check = False\n    if ngood % g == 0:\n        check = True\n    divup = math.ceil(ngood / g)\n    divdown = ngood // g\n    if check:\n        total_days += (divdown - 1) * b\n        total_days += divdown * g\n        ngood -= divdown * g\n    else:\n        total_days += divdown * b\n        total_days += divdown * g\n        ngood -= divdown * g\n    total_days += ngood\n    if total_days < n:\n        print(n)\n        continue\n    print(total_days)", "import sys\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    (n, g, b) = list(map(int, sys.stdin.readline().split()))\n    if n - int(n / 2) <= g or g >= b:\n        print(n)\n    else:\n        if int(n / 2) > b:\n            p = int(int(n / 2) / b)\n            re = (g + b) * p\n            maked = re\n            if int(n / 2) % b != 0:\n                re += g + b\n                maked += g + int(n / 2) % b\n            if maked >= n:\n                print(n)\n                continue\n            i = n - maked\n            re += int(i / g) * (g + b) + i % g\n            if i % g == 0:\n                re -= b\n        else:\n            maked = int(n / 2) + g\n            re = g + b\n            i = n - maked\n            re += int(i / g) * (g + b) + i % g\n            if i % g == 0:\n                re -= b\n        print(re)", "import sys\nimport math\nget_string = lambda : sys.stdin.readline().strip()\nget_list = lambda : list(map(int, sys.stdin.readline().strip().split()))\nget_intList_from_str = lambda : list(map(int, list(sys.stdin.readline().strip())))\nget_charList_from_str = lambda : list(sys.stdin.readline().strip())\nget_int = lambda : int(sys.stdin.readline().strip())\npt = lambda x: sys.stdout.write(str(x))\nfor _ in range(get_int()):\n    (n, g, b) = get_list()\n    left = n\n    half = n // 2 + n % 2\n    total = 0\n    if half <= g:\n        print(n)\n    elif half > g:\n        total = half\n        run_of_good = half // g\n        left_in_good = half % g\n        if left_in_good == 0:\n            total += (run_of_good - 1) * b\n        else:\n            total += run_of_good * b\n        total += max(0, n - total)\n        print(total)", "from sys import stdin, stdout\nimport math\nq = int(stdin.readline())\nfor x in range(q):\n    (n, g, b) = [int(x) for x in stdin.readline().split()]\n    if g >= n:\n        print(n)\n        continue\n    need = math.ceil(n / 2)\n    need_seg = math.ceil(need / g) - 1\n    total_day = need_seg * (g + b)\n    left = need - need_seg * g\n    total_day += left\n    if n - total_day > 0:\n        total_day += n - total_day\n    print(total_day)", "t = int(input())\na = []\np = 0\nd = 0\nfor i in range(0, t):\n    (l, g, b) = input().split()\n    l = int(l)\n    g = int(g)\n    b = int(b)\n    o = l\n    m = 0\n    if l % 2 == 0:\n        l = l // 2\n    else:\n        l = l // 2 + 1\n    if o <= g:\n        d = o\n    elif g < b:\n        if l % g == 0:\n            y = l // g\n        else:\n            y = l // g\n            m = l % g\n        d = y * g + m\n        if m == 0:\n            d = d + (y - 1) * b\n        else:\n            d = d + y * b\n    else:\n        d = o\n    if d < o:\n        d = o\n    a.append(d)\n    d = 0\n    p = 0\nfor i in a:\n    print(i)", "import math\ns = []\nfor i in range(int(input())):\n    s.append(input())\n\ndef working(pattern):\n    (n, good_d, bad_d) = map(int, pattern.split(' '))\n    min_high_q = math.ceil(n / 2)\n    if good_d >= bad_d or good_d >= n:\n        return n\n    good_cycles = min_high_q / good_d\n    bad_cycles = int(math.floor(good_cycles)) if good_cycles > math.floor(good_cycles) else int(math.floor(good_cycles)) - 1\n    if bad_cycles * bad_d + min_high_q >= n:\n        return bad_cycles * bad_d + min_high_q\n    return bad_cycles * bad_d + min_high_q + (n - (bad_cycles * bad_d + min_high_q))\nfor i in s:\n    print(working(i))", "import math\ns = []\nfor i in range(int(input())):\n    s.append(input())\n\ndef find_optimal(pattern):\n    (n, good_d, bad_d) = map(int, pattern.split())\n    min_high_q = math.ceil(n / 2)\n    if good_d >= bad_d or good_d >= n:\n        return n\n    total = math.ceil(min_high_q / good_d - 1) * bad_d + min_high_q\n    if total >= n:\n        return total\n    return total + (n - total)\nfor i in s:\n    print(find_optimal(i))", "t = int(input())\nans = []\nfor i in range(t):\n    (l, g, b) = map(int, input().strip().split())\n    totalG = 0\n    needG = (l + 1) // 2\n    totalG = needG // g * (b + g)\n    if needG % g == 0:\n        totalG -= b\n    else:\n        totalG += needG % g\n    ans.append(max(totalG, l))\nfor i in ans:\n    print(i)", "inputNum = int(input())\nansList = []\nfor i in range(inputNum):\n    (n, g, b) = map(int, input().split())\n    minGD = int(n / 2) + n % 2\n    minCycle = int(minGD / g)\n    if minGD % g > 0:\n        minCycle += 1\n    totalDays = minGD + (minCycle - 1) * b\n    if n > totalDays:\n        totalDays = n\n    ansList.append(totalDays)\nfor i in ansList:\n    print(i)", "from math import ceil, floor\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    if ceil(n / 2) <= g:\n        print(n)\n    else:\n        x = ceil(n / 2)\n        cnt = x // g\n        if x % g:\n            u = x % g\n            ans = cnt * (g + b) + u\n        else:\n            ans = cnt * (g + b) - b\n        print(max(n, ans))", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    q = n // 2 + n % 2\n    ans = 0\n    if q % g == 0:\n        ans = q // g\n        ans = ans * g + (ans - 1) * b\n    else:\n        ans = q // g + 1\n        ans = (ans - 1) * (g + b) + q % g\n    print(max(n, ans))", "from math import ceil\nfor _ in range(int(input())):\n    (h, g, b) = map(int, input().split())\n    n = ceil(h / 2)\n    per = g + b\n    tam = n // g\n    res = (g + b) * tam\n    kal = n - g * tam\n    if tam > 0:\n        if kal > 0:\n            ans = res + kal\n        else:\n            ans = res - b\n    else:\n        ans = h\n    print(max(ans, h))", "from math import *\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    a = ceil(n / 2)\n    high = ceil(a / g)\n    ans = (high - 1) * b + a\n    print(max(n, ans))", "t = int(input())\nfor counter in range(t):\n    array = [int(x) for x in input().split()]\n    allowed = array[0] // 2\n    finished = 0\n    g = array[1]\n    b = array[2]\n    cycle = g + b\n    progress = cycle * (allowed // b)\n    ans = progress\n    leftover = allowed % b\n    remaining = array[0] - progress\n    if remaining <= g + leftover:\n        ans += remaining\n    else:\n        ans += cycle\n        progress += g + leftover\n        remaining = array[0] - progress\n        if remaining % g == 0:\n            ans += remaining // g * cycle - b\n        else:\n            ans += remaining // g * cycle + remaining % g\n    print(ans)", "res = []\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    ans = 0\n    good_roads = (n + 1) // 2\n    good_days = (good_roads + g - 1) // g\n    roads_remaining = n // 2\n    if (good_days - 1) * b < roads_remaining:\n        ans = n\n    else:\n        ans = (good_days - 1) * (b + g)\n        ans += good_roads - (good_days - 1) * g\n    res.append(ans)\nprint(*res, sep='\\n')", "arr = []\ntest_cases = int(input(''))\nfor x in range(test_cases):\n    a = []\n    a = list(map(int, input().split()))\n    arr.append(a)\nfor y in range(test_cases):\n    p = arr[y][0]\n    G = arr[y][1]\n    B = arr[y][2]\n    min = int(p / 2 + 0.5)\n    q = int(min / G)\n    mod = min % G\n    if mod == 0:\n        ans = q * (G + B) - B\n    else:\n        ans = q * (G + B) + mod\n    print(max(ans, p))", "import math\nfor i in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    s = math.ceil(n / 2)\n    x = s // g * (g + b)\n    if s % g == 0:\n        print(max(n, x - b))\n    elif s % g != 0:\n        x += s % g\n        print(max(n, x))", "import math\nt = int(input())\nfor test in range(0, t):\n    (n, g, b) = map(int, input().split())\n    nd = int((n + 1) / 2)\n    ans = int(nd / g) * (g + b)\n    rem = nd % g\n    if rem == 0:\n        ans -= b\n    else:\n        ans += rem\n    print(max(n, ans))", "import math\n\ndef solution(n: int, g: int, b: int):\n    need_good = int((n + 1) // 2)\n    mult = need_good // g\n    ans = mult * (g + b)\n    if need_good % g == 0:\n        ans = ans - b\n    else:\n        ans += need_good % g\n    return max(ans, n)\n\ndef main():\n    t = int(input())\n    while t:\n        (n, g, b) = map(int, input().strip().split())\n        ans = solution(n, g, b)\n        print(ans)\n        t -= 1\nmain()", "import math\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    if n <= g:\n        print(n)\n    else:\n        total = g + b\n        y = math.ceil(n / 2)\n        d = y // g\n        ans = d * total\n        work = y\n        if y - d * g > 0:\n            ans = ans + y - d * g\n        else:\n            ans = ans - b\n        print(max(ans, n))", "import math\nn = int(input())\nno_of_lines = n\nlines = ''\nfor i in range(no_of_lines):\n    lines += input() + '\\n'\ntemplines = lines.split('\\n')\ntemparr = [list(map(int, templines[i].split(' '))) for i in range(n)]\nfor i in range(no_of_lines):\n    n = temparr[i][0]\n    g = temparr[i][1]\n    b = temparr[i][2]\n    t1 = math.floor(n / (g + b))\n    t2 = math.floor(math.ceil(n / 2) / g)\n    if math.ceil(n / 2) % g == 0:\n        t2 -= 1\n        goodCondition = g\n    else:\n        goodCondition = math.ceil(n / 2) % g\n    totalCondition = n % (g + b)\n    if t1 > t2:\n        print(t1 * (g + b) + totalCondition)\n    elif t1 < t2:\n        print(t2 * (g + b) + goodCondition)\n    else:\n        print(t1 * (g + b) + max(goodCondition, totalCondition))", "def do(n, g, b):\n    needG = n // 2 + (n & 1)\n    tot = (g + b) * (needG // g)\n    if needG % g:\n        return max(tot + needG % g, n)\n    return max(tot - b, n)\nfor _ in range(int(input())):\n    (n, g, b) = list(map(int, input().split()))\n    print(do(n, g, b))", "for _ in ' ' * int(input()):\n    (n, g, b) = map(int, input().split())\n    print(max(n, (n + 1) // 2 // g * (g + b) + (n + 1) // 2 - (n + 1) // 2 // g * g if (n + 1) // 2 - (n + 1) // 2 // g * g else (n + 1) // 2 // g * (g + b) - b))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, good, bad) = map(int, input().split())\n    half = n // 2 if n % 2 == 0 else n // 2 + 1\n    num1 = math.ceil(half / good)\n    num2 = math.ceil((n - half) / bad)\n    (quo1, rem1) = divmod(half, good)\n    (quo2, rem2) = divmod(n - half, bad)\n    if num1 > num2:\n        print(half + bad * (num1 - 1))\n    else:\n        (val, x) = divmod(n, good + bad)\n        print(val * (good + bad) + x)", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, g, b) = list(map(int, input().split(' ')))\n    req = int(ceil(n / 2))\n    temp = req // g\n    t1 = req % g\n    if t1:\n        temp += 1\n    total = req + b * (temp - 1)\n    if total < n:\n        total = n\n    print(total)", "t = int(input())\nfor i in range(t):\n    (n, g, b) = [int(k) for k in input().split()]\n    x = (n // 2 + n % 2) // g * (g + b) + (n // 2 + n % 2) % g\n    if (n // 2 + n % 2) % g == 0:\n        x -= b\n    print(max(x, n))", "from math import ceil\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    t = ceil(n / 2)\n    if g >= n:\n        print(n)\n        continue\n    elif g >= t and g + b >= n:\n        print(n)\n        continue\n    elif g >= b:\n        print(n)\n    else:\n        count = t + b * ((t - 1) // g)\n        print(max(n, count))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    if n <= g:\n        print(n)\n    else:\n        target = n // 2 + n % 2\n        ans = target // g * (b + g)\n        if target % g:\n            ans += target % g\n        else:\n            ans -= b\n        print(max(n, ans))", "t = int(input())\nfor case_num in range(t):\n    (n, g, b) = map(int, input().split(' '))\n    if g >= n:\n        print(n)\n    else:\n        target = (n + 1) // 2\n        cycle = (target - 1) // g\n        ans = cycle * b + target\n        print(max(ans, n))", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    p = g + b\n    m = n // 2\n    p1 = n // p\n    p2 = n % p\n    bad = p1 * b\n    if p2 >= g:\n        bad += p2 - g\n    if bad <= m:\n        print(n)\n    else:\n        n -= m\n        g1 = n // g\n        g2 = n % g\n        if g2 != 0:\n            print(p * g1 + g2)\n        else:\n            print(p * (g1 - 1) + g)", "def min_days(n, g, d):\n    T = g + d\n    m = (n + 1) // 2\n    cycle = m // g\n    res = m % g\n    if res == 0:\n        ans = (cycle - 1) * T + g\n        ans = max(ans, n)\n        return ans\n    ans = cycle * T + res\n    ans = max(ans, n)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, g, d) = [int(s) for s in input().split(' ')]\n    ans = min_days(n, g, d)\n    print(ans)", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    no_seg = n // 2 // b\n    if no_seg * (g + b) + g + n // 2 % b >= n:\n        print(n)\n        continue\n    pending = n - (no_seg * (g + b) + g + n // 2 % b)\n    no_seg += 1\n    no_seg += pending // g\n    ans = no_seg * (g + b) + pending % g\n    if pending % g == 0:\n        ans -= b\n    print(ans)", "from math import ceil as c\nfor _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    x = c(n / 2)\n    if x <= g or (g == 1 and b == 1):\n        print(n)\n    else:\n        f = x // g\n        if f * g == x:\n            f -= 1\n        t = x + b * f\n        if t < n:\n            t = n\n        print(t)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    k = n // 2 + n % 2\n    x = k // g\n    if x == 0:\n        print(n)\n    else:\n        y = x * g + (x - 1) * b\n        if k % g != 0:\n            y += k - x * g + b\n        y = max(n, y)\n        print(y)", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    gn = (n + 1) // 2\n    itr = 0\n    if gn % g == 0:\n        itr = gn // g\n    else:\n        itr = gn // g + 1\n    days = gn + b * (itr - 1)\n    if days >= n:\n        print(days)\n    else:\n        print(n)", "t = int(input())\nfor i in range(t):\n    (n, g, b) = list(map(int, input().split()))\n    a = (n + 1) // 2\n    per = a // g\n    ost = a % g\n    if ost == 0:\n        per = per - 1\n        ost = g\n    qqq = per * (g + b) + ost\n    if qqq >= n:\n        print(qqq)\n    else:\n        print(n)", "for i in range(int(input())):\n    a = list(map(int, input().split()))\n    nn = (a[0] + 1) // 2\n    print(max(nn + (nn - 1) // a[1] * a[2], a[0]))", "def checker(n, g, b):\n    ws = n // 2 + n % 2\n    count1 = ws // g\n    if ws % g == 0:\n        count1 -= 1\n    count2 = max(count1, 0)\n    wb = b * count2\n    return ws + wb if n <= ws + wb else n\nfor _ in range(int(input())):\n    (N, G, B) = [int(i) for i in input().split()]\n    print(checker(N, G, B))", "def run():\n    (n, g, b) = map(int, input().split())\n    if g >= b:\n        print(n)\n    else:\n        ng = (n + 1) // 2\n        k = ng // g\n        mod = ng % g\n        if mod > 0:\n            print(max(k * (g + b) + mod, n))\n        else:\n            print(max(k * (g + b) - b, n))\nT = input()\nT = int(T)\nfor i in range(T):\n    run()", "def solve(n, a, b):\n    if a >= b:\n        print(n)\n    else:\n        days = 0\n        bad_days = n // 2\n        period_bad = bad_days // b\n        q = bad_days % b\n        days += (a + b) * period_bad\n        rem = n - days\n        if rem <= a + q:\n            days += rem\n            print(days)\n            return\n        else:\n            days += a + b\n            rem -= a + q\n        (pp, qq) = (rem // a, rem % a)\n        if pp == 0:\n            days += qq\n        elif qq == 0:\n            days += (a + b) * (pp - 1) + a\n        else:\n            days += (a + b) * pp + qq\n        print(days)\nfor _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    solve(n, a, b)", "for _ in range(int(input())):\n    (n, g, b) = [int(i) for i in input().split()]\n    need = (n + 1) // 2\n    total = need // g * (g + b)\n    rem = need % g\n    if rem == 0:\n        total -= b\n    else:\n        total += rem\n    print(max(total, n))", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split(' '))\n    p = n // 2 + n % 2\n    if p % g == 0:\n        z = p // g * (g + b) - b\n    else:\n        z = (g + b) * (p // g) + p % g\n    print(max(n, z))", "for _ in [0] * int(input()):\n    (n, g, b) = map(int, input().split())\n    m = -1 - -n // 2\n    print(max(n, m + m // g * b + 1))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    need = (n + 1) // 2\n    totald = need // g * (g + b)\n    if need % g > 0:\n        print(max(totald + need % g, n))\n    else:\n        print(max(n, totald - b))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    orign = n\n    n = (n + 1) // 2\n    com = (n - 1) // g\n    ans = com * (g + b)\n    n -= com * g\n    ans += n\n    print(max(ans, orign))", "T = int(input())\nfor _ in range(T):\n    (n, g, b) = map(int, input().split())\n    least = (n + 1) // 2\n    (d, m) = divmod(least, g)\n    if m == 0:\n        a = (g + b) * d - b\n    else:\n        a = (g + b) * d + m\n    print(max(n, a))", "import math\nfor i in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    half = math.ceil(n / 2)\n    how = math.ceil(half / g)\n    ans = b * (how - 1) + g * (how - 1) + half - g * (how - 1)\n    if ans < n:\n        ans += n - ans\n    print(ans)", "def updiv(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\nt = int(input())\nfor loop in range(t):\n    (n, g, b) = map(int, input().split())\n    able_bad = n // 2\n    if n // (g + b) * b + max(0, n % (g + b) - g) <= able_bad:\n        print(n)\n        continue\n    nday = updiv(able_bad, b) * (b + g)\n    n -= updiv(able_bad, b) * g + able_bad\n    nday += n + (updiv(n, g) - 1) * b\n    print(nday)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    if g >= b:\n        print(n)\n    else:\n        good = (n + 1) // 2\n        bad = n - good\n        if bad <= b * (math.ceil(good / g) - 1):\n            print(good + b * (math.ceil(good / g) - 1))\n        else:\n            print(n)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        (n, g, b) = num()\n        tobe = int(ma.ceil(n / 2))\n        bad = 0\n        up = tobe // g\n        rem = 0\n        if up * g != tobe:\n            rem = tobe - up * g\n        hp = g * up + b * (up - 1)\n        bad = b * (up - 1)\n        if rem != 0:\n            hp += b + rem\n            bad += b\n        if bad + tobe < n:\n            la = n - bad - tobe\n            hp += la\n        if up == 0:\n            hp = n\n        print(hp)\nsolve()", "def program():\n    (n, g, b) = map(int, input().split())\n    if g == b:\n        print(n)\n        return 0\n    if n % 2 == 0:\n        a = n // 2\n    else:\n        a = n // 2 + 1\n    if g >= a:\n        print(n)\n        return 0\n    if a % g == 0:\n        print(max(n, a + (a // g - 1) * b))\n    else:\n        print(max(n, a + a // g * b))\nt = int(input())\nfor i in range(t):\n    program()", "import math\nnu = int(input())\nfor i in range(nu):\n    (n, g, b) = map(int, input().split())\n    s = math.ceil(n / 2)\n    if s > g:\n        if s % g == 0:\n            print(max(g * (s // g) + b * (s // g - 1), n))\n        else:\n            print(max((g + b) * (s // g) + s % g, n))\n    else:\n        print(n)", "q = int(input())\nfor u in range(q):\n    (n, g, b) = [int(i) for i in input().split()]\n    n1 = (n + 1) // 2\n    if n1 <= g:\n        print(n)\n    else:\n        p = n1 // g\n        m = n1 % g\n        if m == 0:\n            if g * p + b * (p - 1) >= n:\n                print(g * p + b * (p - 1))\n            else:\n                print(n)\n        elif g * p + b * p + m >= n:\n            print(g * p + b * p + m)\n        else:\n            print(n)", "for _ in [0] * int(input()):\n    (n, g, b) = map(int, input().split())\n    m = -1 - -n // 2\n    print(max(n, m // g * (g + b) + m % g + 1))", "for _ in range(int(input())):\n    (n, g, b) = map(int, input().split())\n    if g >= b:\n        print(n)\n    else:\n        y = (n + 1) // 2\n        f = b + g\n        a = n // f\n        x = a * g\n        d = y - x\n        j = (d + g - 1) // g\n        z = a * g + j * g\n        r = a * f + j * f - b\n        k = z - y\n        l = r - n\n        if l >= k:\n            print(r - k)\n        else:\n            print(r - l)", "t = int(input())\nfor _ in range(t):\n    (n, g, b) = map(int, input().split())\n    if g >= b or 2 * g >= n:\n        print(n)\n    else:\n        h = (n + 1) // 2\n        rh = n - h\n        m = h - g\n        d = m // g\n        r = m % g\n        bads = b * d\n        if r > 0:\n            bads += b\n        if r == 0:\n            days = g + (b + g) * d + max(0, rh - bads)\n        else:\n            days = g + (b + g) * d + b + r + max(0, rh - bads)\n        print(days)", "import math as m\nt = int(input())\nfor i in range(t):\n    (n, g, b) = list(map(int, input().split()))\n    ans1 = m.ceil(n / 2)\n    ans = m.ceil(ans1 / g)\n    bad = b * (ans - 1)\n    if bad > n - ans1:\n        print(ans1 + bad)\n    else:\n        print(n)", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    if g >= b:\n        print(n)\n    else:\n        gd = (n + 1) // 2\n        bd = n - gd\n        if gd <= g:\n            print(n)\n        else:\n            ans = g\n            gd -= g\n            ans += gd // g * (g + b)\n            if gd % g != 0:\n                ans += gd % g + b\n                bd -= b\n            bd -= gd // g * b\n            if bd > 0:\n                ans += bd\n            print(ans)", "import math\np = int(input())\nfor i in range(p):\n    (num, g, b) = map(int, input().split())\n    cycles = math.ceil(math.ceil(num / 2) / g)\n    out = (cycles - 1) * b + math.ceil(num / 2)\n    print(max(num, out))", "t = int(input())\nfor i in range(t):\n    (n, g, b) = map(int, input().split())\n    k = (n + 1) // 2\n    ans = k // g\n    if ans * g == k:\n        ans -= 1\n    print(ans * (g + b) + max(k - ans * g, n - ans * (g + b)))"]