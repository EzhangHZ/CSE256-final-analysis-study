["from heapq import heappop, heappush\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    heappush(a, -w)\n    for i in l[::-1]:\n        value = heappop(a)\n        if i <= -value:\n            heappush(a, i + value)\n        else:\n            heappush(a, value)\n            heappush(a, -w + i)\n    print(len(a))", "from heapq import heappop, heappush\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    heappush(a, -w)\n    for i in l[::-1]:\n        value = heappop(a)\n        if i <= -value:\n            heappush(a, i + value)\n        else:\n            heappush(a, value)\n            heappush(a, -w + i)\n    print(len(a))", "from heapq import heappop, heappush\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    heappush(a, -w)\n    for i in l[::-1]:\n        t = heappop(a)\n        if i <= -t:\n            heappush(a, i + t)\n        else:\n            heappush(a, t)\n            heappush(a, -w + i)\n    print(len(a))", "from heapq import heappop, heappush\nt = int(input())\nfor j in range(t):\n    (n, w) = map(int, input().split())\n    entrada = list(map(int, input().split()))\n    entrada.sort()\n    pilha = []\n    heappush(pilha, -w)\n    cont = 1\n    for i in entrada[::-1]:\n        topo = heappop(pilha)\n        if i <= -topo:\n            heappush(pilha, i + topo)\n        else:\n            heappush(pilha, topo)\n            heappush(pilha, -w + i)\n            cont += 1\n    print(cont)", "from heapq import *\nfor _ in range(int(input())):\n    a = []\n    heapify(a)\n    (n, w) = map(int, input().split())\n    D = list(map(int, input().split()))\n    D.sort(reverse=True)\n    ans = 1\n    heappush(a, -w)\n    for d in D:\n        t = heappop(a)\n        if d > -t:\n            heappush(a, t)\n            heappush(a, -w + d)\n            ans += 1\n        else:\n            heappush(a, t + d)\n    print(ans)", "from heapq import heappop, heappush\nt = int(input())\nfor j in range(t):\n    (n, w) = map(int, input().split())\n    entrada = list(map(int, input().split()))\n    entrada.sort()\n    pilha = []\n    heappush(pilha, -w)\n    cont = 1\n    for i in entrada[::-1]:\n        topo = heappop(pilha)\n        if i <= -topo:\n            heappush(pilha, i + topo)\n        else:\n            heappush(pilha, topo)\n            heappush(pilha, -w + i)\n            cont += 1\n    print(cont)", "def main():\n    from sys import stdin, stdout\n    from collections import Counter\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        (n, w) = map(int, rl().split())\n        a = Counter((int(x) for x in rl().split()))\n        a = dict(a.most_common())\n        keys = sorted(a.keys(), reverse=True)\n        h = -1\n        while True:\n            cur = 0\n            h += 1\n            for key in keys:\n                while a[key] != 0 and cur + key <= w:\n                    cur += key\n                    a[key] -= 1\n            if cur == 0:\n                break\n        wl(str(h) + '\\n')\nmain()", "import sys, math\n\ndef compute(width, sizes):\n    d = {s: sizes.count(s) for s in sorted([*set(sizes)], reverse=True) if s}\n    i = 0\n    remaining = len(d)\n    while remaining:\n        i += 1\n        left = width\n        for (size, count) in d.items():\n            while count and size <= left:\n                left -= size\n                d[size] -= 1\n                count -= 1\n                if count == 0:\n                    remaining -= 1\n    return i\nfor _ in '_' * int(input()):\n    (_, width) = map(int, input().split())\n    sizes = [*map(int, input().split())]\n    print(compute(width, sizes))", "def main(n, w, widths):\n    widths.sort(reverse=True)\n    d = {}\n    sizes = 0\n    for i in widths:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n            sizes += 1\n    height = 0\n    curr_space = w\n    while sizes > 0:\n        height += 1\n        curr_space = w\n        for i in d.keys():\n            while d[i] > 0 and curr_space >= i:\n                d[i] -= 1\n                curr_space -= i\n                if d[i] <= 0:\n                    sizes -= 1\n    return height\nt = int(input())\nfor case in range(t):\n    (n, w) = [int(x) for x in input().split()]\n    widths = [int(x) for x in input().split()]\n    result = main(n, w, widths)\n    print(result)", "import heapq\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    mas = list(map(int, input().split()))\n    mas.sort(reverse=True)\n    heap = [0]\n    for masw in mas:\n        hp = heapq.heappop(heap)\n        if masw + hp <= w:\n            heapq.heappush(heap, masw + hp)\n        else:\n            heapq.heappush(heap, masw)\n            heapq.heappush(heap, hp)\n    print(len(heap))", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, w) = [int(i) for i in input().split(' ')]\n        b = sorted([int(i) for i in input().split(' ')], reverse=True)\n        numbers = len(b)\n        hashy = {}\n        for i in b:\n            if i in hashy:\n                hashy[i] += 1\n            else:\n                hashy[i] = 1\n        current_basket = 0\n        counter = 0\n        while numbers > 0:\n            for i in hashy:\n                if hashy[i] > 0:\n                    while w - current_basket >= i and hashy[i] > 0:\n                        current_basket += i\n                        hashy[i] -= 1\n                        numbers -= 1\n                        if numbers == 0:\n                            break\n                    if numbers == 0:\n                        break\n            if current_basket > 0:\n                counter += 1\n            current_basket = 0\n        print(counter)\nmain_function()", "import bisect\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))[::-1]\n    k = []\n    c = 0\n    for j in a:\n        i = bisect.bisect_left(k, j)\n        if i < len(k):\n            k[i] = k[i] - j\n        else:\n            k.append(w - j)\n            c += 1\n    print(c)", "import heapq\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    mas = list(map(int, input().split()))\n    mas.sort(reverse=True)\n    heap = [0]\n    for masw in mas:\n        hp = heapq.heappop(heap)\n        if masw + hp <= w:\n            heapq.heappush(heap, masw + hp)\n        else:\n            heapq.heappush(heap, masw)\n            heapq.heappush(heap, hp)\n    print(len(heap))", "def solution():\n    (n, m) = map(int, input().split())\n    nums = sorted(list(map(int, input().split())), reverse=True)\n    dic = {}\n    for i in nums:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    floor = 0\n    while n > 0:\n        rest = m\n        for key in dic.keys():\n            while dic[key] != 0 and rest >= key:\n                rest -= key\n                dic[key] -= 1\n                n -= 1\n        floor += 1\n    print(floor)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solution()", "import heapq\nfor e in range(int(input())):\n    (n, w) = map(int, input().split())\n    mas = list(map(int, input().split()))\n    mas.sort(reverse=True)\n    heap = [0]\n    for masw in mas:\n        hp = heapq.heappop(heap)\n        if masw + hp <= w:\n            heapq.heappush(heap, masw + hp)\n        else:\n            heapq.heappush(heap, masw)\n            heapq.heappush(heap, hp)\n    print(len(heap))", "from heapq import heappop, heappush\nT = int(input())\nfor _ in range(T):\n    (N, W) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    lst = [0]\n    idx = 0\n    for a in A:\n        flag = False\n        v = heappop(lst)\n        if v + a <= W:\n            heappush(lst, v + a)\n        else:\n            heappush(lst, v)\n            heappush(lst, a)\n    print(len(lst))", "from collections import Counter\n\ndef main():\n    for _ in range(int(input())):\n        (n, w) = tuple(map(int, input().split()))\n        a = list(map(int, input().split()))\n        count = Counter(a)\n        v = sorted(count.keys(), reverse=True)\n        (p, h) = (w, 0)\n        while n > 0:\n            p = w\n            for i in v:\n                while count[i] and i <= p:\n                    p -= i\n                    count[i] -= 1\n                    n -= 1\n            h += 1\n        print(h)\nmain()", "t = int(input())\nfor k in range(t):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dict = {}\n    for i in arr:\n        if dict.get(i) == None:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    key = list(dict.keys())\n    key.sort(reverse=True)\n    c = 0\n    temp = w\n    ans = 0\n    while c < len(arr):\n        for i in key:\n            while i <= temp and dict[i] > 0:\n                temp -= i\n                c += 1\n                dict[i] -= 1\n        temp = w\n        ans += 1\n    print(ans)", "def solve(n, w, arr):\n    dict = {}\n    for i in arr:\n        dict[i] = dict.get(i, 0) + 1\n    keys = list(dict.keys())\n    keys.sort(reverse=True)\n    count = 0\n    i = 0\n    temp = w\n    while i < len(arr):\n        for j in keys:\n            while dict[j] > 0 and temp - j >= 0:\n                dict[j] -= 1\n                temp -= j\n                i += 1\n        temp = w\n        count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    print(solve(n, w, arr))", "from heapq import *\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    h = [0]\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    for i in range(n):\n        t = heappop(h)\n        if t + l[i] <= w:\n            heappush(h, t + l[i])\n        else:\n            heappush(h, l[i])\n            heappush(h, t)\n    print(len(h))", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    h = [0]\n    for i in range(n):\n        t = heappop(h)\n        if t + a[i] <= w:\n            heappush(h, t + a[i])\n        else:\n            heappush(h, a[i])\n            heappush(h, t)\n    print(len(h))", "import bisect, sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    (values, loc) = (sorted([int(i) for i in input().split()], reverse=True), [])\n    for value in values:\n        i = bisect.bisect_left(loc, value)\n        if i < len(loc):\n            loc[i] -= value\n        else:\n            loc.append(w - value)\n    print(len(loc))", "def main():\n    for _ in range(int(input())):\n        (n, w) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        dct = {}\n        for i in arr:\n            if i in dct:\n                dct[i] += 1\n            else:\n                dct[i] = 1\n        height = 0\n        while sum(dct.values()):\n            width = w\n            for i in reversed(sorted(dct.keys())):\n                while width >= i and dct[i] > 0:\n                    width = width - i\n                    dct[i] -= 1\n            height += 1\n        print(height)\nmain()", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\nfor _ in range(int(input().strip())):\n    (N, W) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    arr.sort(reverse=True)\n    C = Counter(arr)\n    h = 0\n    while N > 0:\n        temp = W\n        for i in C:\n            while i <= temp and C[i] > 0:\n                N -= 1\n                temp -= i\n                C[i] -= 1\n        h += 1\n    print(h)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    l_input = list(map(int, input().split()))\n    l = sorted(l_input, reverse=True)\n    d = {}\n    for e in l:\n        if e not in d:\n            d[e] = 1\n        else:\n            d[e] += 1\n    w_copy = w\n    count = 0\n    while n > 0:\n        for e in d:\n            while e <= w_copy and d[e] > 0:\n                w_copy -= e\n                d[e] -= 1\n                n -= 1\n        count += 1\n        w_copy = w\n    print(count)", "from collections import defaultdict\nimport heapq\nT = int(input())\nfor _ in range(T):\n    (n, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    B = [0]\n    a = heapq.heapify(B)\n    ans = 0\n    for i in range(n):\n        v = heapq.heappop(B)\n        v = -1 * v\n        if v >= A[i]:\n            v = v - A[i]\n        else:\n            ans += 1\n            heapq.heappush(B, -1 * (K - A[i]))\n        heapq.heappush(B, -1 * v)\n    print(ans)", "from heapq import heappop, heappush\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    heappush(a, -w)\n    for i in l[::-1]:\n        t = heappop(a)\n        if i <= -t:\n            heappush(a, i + t)\n        else:\n            heappush(a, t)\n            heappush(a, -w + i)\n    print(len(a))", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l, reverse=True)\n    d = dict()\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    w2 = w\n    h = 0\n    while n > 0:\n        for j in d:\n            while d[j] > 0 and j <= w2:\n                w2 -= j\n                d[j] -= 1\n                n -= 1\n        h += 1\n        w2 = w\n    print(h)", "import bisect\nt = int(input())\nwhile t > 0:\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    ans = []\n    c = 0\n    for j in l:\n        i = bisect.bisect_left(ans, j)\n        if i < len(ans):\n            ans[i] = ans[i] - j\n        else:\n            ans.append(w - j)\n            c += 1\n    print(c)\n    t = t - 1", "import heapq\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    mas = list(map(int, input().split()))\n    mas.sort(reverse=True)\n    heap = [0]\n    for masw in mas:\n        hp = heapq.heappop(heap)\n        if masw + hp <= w:\n            heapq.heappush(heap, masw + hp)\n        else:\n            heapq.heappush(heap, masw)\n            heapq.heappush(heap, hp)\n    print(len(heap))", "import heapq\nfor _ in range(int(input())):\n    (n, width) = map(int, input().split())\n    w = list(map(int, input().split()))\n    w.sort(reverse=True)\n    autosortedlist = [-width]\n    heapq.heapify(autosortedlist)\n    for i in w:\n        if -autosortedlist[0] < i:\n            heapq.heappush(autosortedlist, -width)\n        temp = -autosortedlist[0]\n        temp -= i\n        heapq.heappushpop(autosortedlist, -temp)\n    print(len(autosortedlist))", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    lista = list(map(int, input().split()))\n    lista.sort(reverse=True)\n    d = {}\n    for i in lista:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    h = 0\n    while n > 0:\n        w1 = w\n        for i in d:\n            while d[i] > 0 and i <= w1:\n                w1 -= i\n                d[i] -= 1\n                n -= 1\n        h += 1\n    print(h)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    d = dict()\n    s.sort(reverse=True)\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m1 = m\n    ans = 0\n    while n > 0:\n        for j in d:\n            while d[j] > 0 and j <= m1:\n                m1 = m1 - j\n                d[j] -= 1\n                n -= 1\n        m1 = m\n        ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    r = list(map(int, input().split()))\n    r.sort(reverse=True)\n    d = dict()\n    for e in r:\n        if e not in d:\n            d[e] = 1\n        else:\n            d[e] += 1\n    temp = w\n    count = 0\n    while n > 0:\n        for key in d:\n            while d[key] > 0 and key <= temp:\n                temp -= key\n                d[key] -= 1\n                n -= 1\n        temp = w\n        count += 1\n    print(count)", "import math, heapq\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    heap = [-w]\n    heapq.heapify(heap)\n    cnt = 1\n    for i in range(n):\n        top = -heapq.heappop(heap)\n        if top > l[i]:\n            top -= l[i]\n            heapq.heappush(heap, -top)\n        elif top == l[i]:\n            if len(heap) == 0:\n                if i == n - 1:\n                    continue\n                heapq.heappush(heap, -w)\n                cnt += 1\n        else:\n            cur = w - l[i]\n            heapq.heappush(heap, -cur)\n            heapq.heappush(heap, -top)\n            cnt += 1\n    print(cnt)", "import math\nfrom collections import defaultdict\nDEBUG = True\n\ndef log(*args, **kwargs):\n    if DEBUG:\n        print(*args, **kwargs)\n\ndef ri():\n    return int(input())\n\ndef rl(f=int):\n    return list(map(f, input().split()))\n\ndef rs():\n    return input()\n\nclass Solution:\n\n    def __init__(self):\n        pass\n\n    def run(self):\n        (n, W) = rl()\n        widths = rl()\n        d = defaultdict(int)\n        for w in widths:\n            d[w] += 1\n        rows = [W] * len(widths)\n        for p in range(21, -1, -1):\n            w = 2 ** p\n            for i in range(len(rows)):\n                while d[w] > 0 and rows[i] >= w:\n                    rows[i] -= w\n                    d[w] -= 1\n                if d[w] == 0:\n                    break\n        result = 0\n        for r in rows:\n            if r == W:\n                break\n            result += 1\n        return result\nt = int(input())\ns = Solution()\nfor i in range(t):\n    print(s.run())", "import heapq\n\ndef sign(val):\n    return -1 * val\n\ndef solve(rec, n, w):\n    rec.sort(reverse=True)\n    height = 1\n    h = [sign(w)]\n    heapq.heapify(h)\n    for i in range(n):\n        if len(h) == 0:\n            heapq.heappush(h, sign(w))\n            height += 1\n        space = sign(heapq.heappop(h))\n        if space > rec[i]:\n            rem = space - rec[i]\n            heapq.heappush(h, sign(rem))\n        elif space == rec[i]:\n            continue\n        else:\n            height += 1\n            heapq.heappush(h, sign(space))\n            heapq.heappush(h, sign(w - rec[i]))\n    return height\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    rec = list(map(int, input().split()))\n    print(solve(rec, n, w))", "for k in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] += 1\n    key = list(d.keys())\n    key.sort(reverse=True)\n    c = 0\n    temp = w\n    h = 0\n    while c < len(l):\n        for i in key:\n            while i <= temp and d[i] > 0:\n                temp -= i\n                c += 1\n                d[i] -= 1\n        temp = w\n        h += 1\n    print(h)", "import math\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    arr = map(int, input().split())\n    arr = list(arr)\n    arr.sort(reverse=True)\n    cnt = 0\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    temp = w\n    while n > 0:\n        for i in d:\n            while d[i] != 0 and i <= temp:\n                d[i] -= 1\n                temp -= i\n                n -= 1\n        cnt += 1\n        temp = w\n    print(cnt)", "t = int(input())\nfor k in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] += 1\n    key = list(d.keys())\n    key.sort(reverse=True)\n    c = 0\n    temp = w\n    h = 0\n    while c < len(l):\n        for i in key:\n            while i <= temp and d[i] > 0:\n                temp -= i\n                c += 1\n                d[i] -= 1\n        temp = w\n        h += 1\n    print(h)", "t = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    r = list(map(int, input().split()))\n    r.sort(reverse=True)\n    d = dict()\n    for e in r:\n        if e not in d:\n            d[e] = 1\n        else:\n            d[e] += 1\n    temp = w\n    count = 0\n    while n > 0:\n        for key in d:\n            while d[key] > 0 and key <= temp:\n                temp -= key\n                d[key] -= 1\n                n -= 1\n        temp = w\n        count += 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, w) = list(map(int, input().split(' ')))\n    l = list(map(int, input().split(' ')))\n    l.sort(reverse=True)\n    tamanho = w\n    c = 0\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    while n > 0:\n        for i in d:\n            while d[i] > 0 and i <= tamanho:\n                tamanho -= i\n                d[i] -= 1\n                n -= 1\n        tamanho = w\n        c += 1\n    print(c)", "t = int(input())\nfor k in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] += 1\n    key = list(d.keys())\n    key.sort(reverse=True)\n    c = 0\n    temp = w\n    h = 0\n    while c < len(l):\n        for i in key:\n            while i <= temp and d[i] > 0:\n                temp -= i\n                c += 1\n                d[i] -= 1\n        temp = w\n        h += 1\n    print(h)", "for t in range(int(input())):\n    (n, W) = [int(x) for x in input().split()]\n    d = {}\n    nums = [int(i) for i in input().split()]\n    for i in nums:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    count = 0\n    keys = list(d.keys())\n    keys.sort(reverse=True)\n    while n > 0:\n        count += 1\n        left = W\n        for i in keys:\n            if d[i] == 0:\n                continue\n            else:\n                while True:\n                    if left >= i and d[i] > 0:\n                        d[i] -= 1\n                        n -= 1\n                        left -= i\n                    else:\n                        break\n    print(count)", "t = int(input())\nfrom collections import Counter\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = Counter(arr)\n    v = sorted(d.keys(), reverse=True)\n    ans = 0\n    while n:\n        m = w\n        for i in v:\n            while d[i] and m >= i:\n                d[i] -= 1\n                m -= i\n                n -= 1\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = list(map(int, input().split()))\n    d = dict()\n    s.sort(reverse=True)\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m1 = m\n    ans = 0\n    while n > 0:\n        for j in d:\n            while d[j] > 0 and j <= m1:\n                m1 = m1 - j\n                d[j] -= 1\n                n -= 1\n        m1 = m\n        ans += 1\n    print(ans)", "t = int(input())\nfor k in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    key = list(d.keys())\n    key.sort(reverse=True)\n    c = 0\n    temp = w\n    h = 0\n    while c < len(l):\n        for i in key:\n            while i <= temp and d[i] > 0:\n                temp -= i\n                c += 1\n                d[i] -= 1\n        temp = w\n        h += 1\n    print(h)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    h = 0\n    while n > 0:\n        w1 = w\n        for i in d:\n            while d[i] > 0 and i <= w1:\n                w1 -= i\n                d[i] -= 1\n                n -= 1\n        h += 1\n    print(h)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    w1 = list(map(int, input().split()))\n    w1.sort(reverse=True)\n    d = dict(Counter(w1))\n    h = 0\n    while n > 0:\n        k = w\n        for i in d:\n            while i <= k and d[i] > 0:\n                n -= 1\n                k -= i\n                d[i] -= 1\n        h += 1\n    print(h)", "from collections import Counter, OrderedDict\nfor _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    inp = list(map(int, input().split()))\n    mp = OrderedDict(Counter(sorted(inp, reverse=True)))\n    ans = 0\n    while n > 0:\n        w_left = W\n        for w in mp:\n            while w <= w_left and mp[w] > 0:\n                w_left -= w\n                mp[w] -= 1\n                n -= 1\n        ans += 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    dct = dict(Counter(arr))\n    ct = 0\n    while n > 0:\n        rl = w\n        for x in dct:\n            while x <= rl and dct[x] > 0:\n                rl -= x\n                n -= 1\n                dct[x] -= 1\n        ct += 1\n    print(ct)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    (n, w) = [int(j) for j in input().split()]\n    m = [int(j) for j in input().split()]\n    x = Counter(m)\n    q = sorted(x.keys())[::-1]\n    (res, k) = (0, 0)\n    while k < n:\n        y = w\n        for j in q:\n            while x[j] != 0 and y >= j:\n                x[j] -= 1\n                y -= j\n                k += 1\n        res += 1\n    print(res)", "import collections\nimport math\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = collections.Counter(a)\n    keys = sorted(c.keys(), reverse=True)\n    res = []\n    for k in keys:\n        cur = c[k]\n        for i in range(len(res)):\n            if cur == 0:\n                break\n            h = min(cur, (w - res[i]) // k)\n            cur -= h\n            res[i] += k * h\n        while cur > 0:\n            h = min(cur, w // k)\n            cur -= h\n            res.append(h * k)\n    print(len(res))", "import math\nT = int(input())\n\ndef process(tab, nb_piece, width):\n    tab = sorted(tab)\n    data = [0] * (int(math.log(tab[-1], 2)) + 1)\n    power = 1\n    index = 0\n    for elem in tab:\n        while elem > power:\n            power *= 2\n            index += 1\n        if elem == power:\n            data[index] += 1\n    stage = 1\n    trous = width\n    while nb_piece > 0:\n        for index in range(len(data) - 1, -1, -1):\n            elem = 2 ** index\n            while data[index] > 0 and elem <= trous:\n                data[index] -= 1\n                trous -= elem\n                nb_piece -= 1\n        stage += 1\n        trous = width\n    if trous == width:\n        stage -= 1\n    return stage\nfor _ in range(T):\n    data = input().split()\n    (n, width) = (int(data[0]), int(data[1]))\n    data = input().split()\n    tab = [int(elem) for elem in data]\n    res = process(tab, n, width)\n    print(res)", "def solve():\n    (n, w) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    mx = max(a)\n    counter = dict()\n    for i in a:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    h = 0\n    while n > 0:\n        h += 1\n        use = w\n        while True:\n            if mx not in counter:\n                mx = mx // 2\n            elif counter[mx] == 0:\n                mx = mx // 2\n            else:\n                break\n        util = mx\n        while util > 0 and use > 0:\n            if util not in counter:\n                util = util // 2\n            elif counter[util] == 0:\n                util = util // 2\n            elif util > use:\n                util = util // 2\n            else:\n                use -= util\n                counter[util] -= 1\n                n -= 1\n    print(h)\nfor i in range(0, int(input())):\n    solve()", "import sys\nfrom math import floor, ceil\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef process(n, W, ws):\n    ws.sort(reverse=True)\n    digitsCount = {}\n    for d in ws:\n        if d in digitsCount:\n            digitsCount[d] += 1\n        else:\n            digitsCount[d] = 1\n    height = 1\n    rectCount = len(ws)\n    while rectCount > 0:\n        Wt = W\n        for digit in list(digitsCount.keys()):\n            if digitsCount[digit] == 0:\n                continue\n            x = floor(Wt / digit)\n            count = digitsCount[digit]\n            if count >= x:\n                digitsCount[digit] = count - x\n                Wt = Wt - x * digit\n                rectCount = rectCount - x\n            else:\n                digitsCount[digit] = 0\n                Wt = Wt - count * digit\n                rectCount = rectCount - count\n            if Wt == 0:\n                if rectCount > 0:\n                    height += 1\n                break\n        if Wt != 0 and rectCount > 0:\n            height += 1\n    return height\n\ndef main():\n    t = inp()\n    for case in range(t):\n        (n, W) = inlt()\n        ws = inlt()\n        height = process(n, W, ws)\n        print(height)\nmain()", "from sys import stdin\nfrom collections import defaultdict\nfrom dataclasses import dataclass\n\n@dataclass\nclass NonsenseNode(object):\n    val: int\n    count: int\n    next: 'NonsenseNode'\n\ndef fit_box(root, width):\n    prev = root\n    cur = root.next\n    while cur is not None:\n        count = min(cur.count, width // cur.val)\n        cur.count -= count\n        width -= count * cur.val\n        if cur.count == 0:\n            prev.next = cur.next\n            cur = prev\n        prev = cur\n        cur = cur.next\n\ndef single_case():\n    width = int(stdin.readline().split()[1])\n    v = defaultdict(lambda : 0)\n    for b in (int(x) for x in stdin.readline().split()):\n        v[b] += 1\n    sorted_keys = sorted(v.keys(), reverse=True)\n    root = NonsenseNode(0, 0, None)\n    cur = root\n    for key in sorted_keys:\n        node = NonsenseNode(key, v[key], None)\n        cur.next = node\n        cur = node\n    height = 0\n    while root.next is not None:\n        height += 1\n        fit_box(root, width)\n    return height\ncase_count = int(stdin.readline())\nfor _ in range(case_count):\n    print(single_case())", "t = int(input())\nfor _ in range(t):\n    (n, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    while d:\n        w = y\n        for j in reversed(sorted(d.keys())):\n            x = min(w // j, d[j])\n            d[j] -= x\n            w -= x * j\n            if d[j] == 0:\n                del d[j]\n            if w == 0:\n                break\n        ans += 1\n    print(ans)", "t = int(input())\nfrom collections import Counter\nfor i in range(t):\n    (n, W) = tuple(map(int, input().split()))\n    w = list(map(int, input().split()))\n    w.sort(reverse=True)\n    c = Counter(w)\n    ans = 0\n    dl = []\n    while n > 0:\n        temp = W\n        for j in c:\n            if temp > 0:\n                if temp // j < c[j]:\n                    req = temp // j\n                    temp -= j * req\n                    c[j] -= req\n                else:\n                    req = c[j]\n                    temp -= c[j] * j\n                    dl.append(j)\n                n -= req\n            else:\n                break\n        for j in dl:\n            c.pop(j)\n        dl.clear()\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    d = dict()\n    s.sort(reverse=True)\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m1 = m\n    ans = 0\n    while n > 0:\n        for j in d:\n            while d[j] > 0 and j <= m1:\n                m1 = m1 - j\n                d[j] -= 1\n                n -= 1\n        m1 = m\n        ans += 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = Counter(arr)\n    counts = sorted(count.keys())[::-1]\n    i = 0\n    height = 0\n    while i < n:\n        maxWidth = w\n        for j in counts:\n            while count[j] != 0 and maxWidth >= j:\n                maxWidth -= j\n                count[j] -= 1\n                i += 1\n        height += 1\n    print(height)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    w1 = list(map(int, input().split()))\n    w1.sort(reverse=True)\n    d = dict(Counter(w1))\n    h = 0\n    while n > 0:\n        k = w\n        for i in d:\n            while i <= k and d[i] > 0:\n                n -= 1\n                k -= i\n                d[i] -= 1\n        h += 1\n    print(h)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] += 1\n    k = list(d.keys())\n    k.sort(reverse=True)\n    l = len(a)\n    c = 0\n    h = 0\n    space = w\n    while c < l:\n        for i in k:\n            while i <= space and d[i] > 0:\n                space -= i\n                d[i] -= 1\n                c += 1\n        h += 1\n        space = w\n    print(h)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = Counter(l)\n    y = sorted(x.keys())[::-1]\n    s1 = 0\n    s2 = 0\n    while s2 < n:\n        z = w\n        for j in y:\n            while x[j] != 0 and z >= j:\n                x[j] = x[j] - 1\n                z = z - j\n                s2 = s2 + 1\n        s1 = s1 + 1\n    print(s1)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    (di, res) = (Counter(a), 0)\n    ke = sorted(di.keys(), reverse=True)\n    while n:\n        m = w\n        for el in ke:\n            if m < 1:\n                break\n            if di[el]:\n                p = m // el\n                mi = min(p, di[el])\n                m -= mi * el\n                di[el] -= mi\n                n -= mi\n        res += 1\n    print(res)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set()\n    for i in a:\n        s.add(i)\n    s = list(s)\n    s.sort(reverse=True)\n    sum = 0\n    ans = 0\n    ar = [0] * (n + 1)\n    f = {}\n    for i in a:\n        if i in f:\n            f[i] += 1\n        else:\n            f[i] = 1\n    for i in s:\n        idx = 0\n        count = 0\n        while True:\n            if count == f[i]:\n                break\n            if ar[idx] + i <= w:\n                ar[idx] += i\n                count += 1\n            else:\n                idx += 1\n    idx = 0\n    while True:\n        if ar[idx] != 0:\n            ans += 1\n        else:\n            break\n        idx += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    d = dict()\n    s.sort(reverse=True)\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m1 = m\n    ans = 0\n    while n > 0:\n        for j in d:\n            while d[j] > 0 and j <= m1:\n                m1 = m1 - j\n                d[j] -= 1\n                n -= 1\n        m1 = m\n        ans += 1\n    print(ans)", "for t in range(int(input())):\n    (n, W) = map(int, input().split(' '))\n    arr = [int(i) for i in input().split(' ')]\n    d = {k: arr.count(k) for k in set(arr)}\n    space_left = [W]\n    for r in sorted(d.keys(), reverse=True):\n        for i in range(len(space_left)):\n            if space_left[i] < r:\n                continue\n            while d[r] != 0 and space_left[i] >= r:\n                space_left[i] -= r\n                d[r] -= 1\n            if d[r] == 0:\n                break\n        else:\n            while d[r] != 0:\n                if d[r] - W // r >= 0:\n                    d[r] = d[r] - W // r\n                    space_left.append(W % r)\n                else:\n                    space_left.append(W - r * d[r])\n                    d[r] = 0\n    print(len(space_left))", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w) = R()\n    c = Counter(R())\n    r = 0\n    while c:\n        v = w\n        r += 1\n        for x in sorted(c)[::-1]:\n            d = min(c[x], v // x)\n            c[x] -= d\n            v -= d * x\n            if c[x] < 1:\n                del c[x]\n    print(r)", "for _ in range(int(input())):\n    (n, y) = map(int, input().split())\n    a = [*map(int, input().split())]\n    d = {}\n    c = 0\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    while d:\n        w = y\n        for i in reversed(sorted(d.keys())):\n            x = min(w // i, d[i])\n            d[i] -= x\n            w -= x * i\n            if d[i] == 0:\n                del d[i]\n            if w == 0:\n                break\n        c += 1\n    print(c)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, w) = [int(i) for i in input().split()]\n    m = [int(i) for i in input().split()]\n    x = Counter(m)\n    q = sorted(x.keys())[::-1]\n    h = 0\n    k = 0\n    while k < n:\n        y = w\n        for j in q:\n            while x[j] != 0 and y >= j:\n                x[j] -= 1\n                y -= j\n                k += 1\n        h += 1\n    print(h)", "from collections import Counter\nt = int(input())\nfor ll in range(t):\n    (n, we) = map(int, input().split())\n    w = list(map(int, input().split(' ')))\n    count = 0\n    c = Counter(w)\n    maxx = max(w)\n    while n > 0:\n        width = we\n        flag = 0\n        cur = 0\n        m = maxx\n        while m > 0:\n            while c[m] > 0 and cur + m <= width:\n                c[m] -= 1\n                cur += m\n                n -= 1\n            m //= 2\n        count += 1\n    print(count)", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, W) = map(int, input().split())\n    d = list(map(int, input().split()))\n    f = W\n    kol = 0\n    p = Counter(d)\n    t = sorted(list(p.keys()), reverse=True)\n    while len(p) > 0:\n        kol += 1\n        W = f\n        for k in t:\n            while p[k] > 0 and k <= W:\n                x = k\n                W -= x\n                p[x] -= 1\n                if p[x] == 0:\n                    del p[x]\n                x = W\n    print(kol)", "from functools import reduce\nt = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    a = map(int, input().split())\n    list_n = list(a)\n    list_n.sort(reverse=True)\n    dic = {}\n    for i in range(len(list_n)):\n        if list_n[i] in dic:\n            dic[list_n[i]] += 1\n        else:\n            dic[list_n[i]] = 1\n    cnt = 0\n    length = len(list_n)\n    while length:\n        sum = 0\n        for key in dic.keys():\n            while dic[key] != 0 and w >= sum + key:\n                sum += key\n                dic[key] -= 1\n                length -= 1\n        cnt += 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    h = 0\n    while n > 0:\n        w1 = w\n        for i in d:\n            while d[i] > 0 and i <= w1:\n                w1 -= i\n                d[i] -= 1\n                n -= 1\n        h += 1\n    print(h)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())), reverse=True)\n    dic = {}\n    answer = 0\n    for i in range(n):\n        if dic.get(arr[i]) == None:\n            dic[arr[i]] = 1\n        else:\n            dic[arr[i]] += 1\n    while dic != {}:\n        temp = w\n        answer += 1\n        for key in sorted(dic.keys(), reverse=True):\n            if dic[key] > 0:\n                count = min(temp // key, dic[key])\n                temp = temp - count * key\n                dic[key] -= count\n            if dic[key] == 0:\n                dic.pop(key)\n            if temp == 0:\n                break\n    print(answer)", "import bisect\nt = int(input())\nfor _ in range(t):\n    (n, W) = list(map(int, input().split()))\n    widths = list(map(int, input().split()))\n    widths.sort(reverse=True)\n    areas_c = []\n    h = 0\n    for width in widths:\n        pos = bisect.bisect_left(areas_c, width)\n        if pos < len(areas_c):\n            areas_c[pos] -= width\n        else:\n            areas_c.append(W - width)\n            h += 1\n        if areas_c[0] == 0:\n            del areas_c[0]\n    print(h)", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w) = R()\n    a = sorted(map(list, Counter(R()).items()))[::-1]\n    r = 0\n    while n:\n        v = w\n        r += 1\n        for p in a:\n            (x, y) = p\n            d = min(y, v // x)\n            p[1] -= d\n            v -= d * x\n            n -= d\n    print(r)", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w) = R()\n    a = sorted(map(list, Counter(R()).items()))[::-1]\n    r = 0\n    while n:\n        v = w\n        r += 1\n        i = 0\n        while i < len(a):\n            (x, y) = p = a[i]\n            d = min(y, v // x)\n            p[1] -= d\n            v -= d * x\n            n -= d\n            if p[1]:\n                i += 1\n            else:\n                del a[i]\n    print(r)", "from collections import Counter\nfor i in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = Counter(a)\n    s = sorted(x.keys(), reverse=True)\n    ans = 0\n    while n:\n        v = w\n        for j in s:\n            while x[j] != 0 and v >= j:\n                x[j] -= 1\n                v -= j\n                n -= 1\n        ans += 1\n    print(ans)", "def test(n, w, a):\n    q = {}\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if a[i] not in q:\n            q[a[i]] = 0\n        q[a[i]] = q[a[i]] + 1\n    a = list(set(a))\n    a.sort(reverse=True)\n    l = len(a)\n    count = 0\n    while s > 0:\n        d = w\n        if s < w:\n            count += 1\n            break\n        i = 0\n        while i < l:\n            if q[a[i]] > 0 and a[i] <= d and (d != 0):\n                q[a[i]] -= 1\n                s -= a[i]\n                d -= a[i]\n                if d >= a[i]:\n                    i -= 1\n            i += 1\n            if d == 0:\n                break\n        count += 1\n    print(count)\nt = int(input())\nfor i in range(t):\n    r = list(map(int, input().rstrip().split()))\n    n = r[0]\n    w = r[1]\n    a = list(map(int, input().rstrip().split()))\n    test(n, w, a)", "a = int(input())\nfrom collections import OrderedDict\nfor s in range(a):\n    x = list(map(int, input().strip().split()))[:2]\n    n = x[0]\n    w = x[1]\n    mapa = {}\n    larguras = list(map(int, input().strip().split()))[:n]\n    for i in range(n):\n        mapa[larguras[i]] = 0\n    for i in range(n):\n        mapa[larguras[i]] += 1\n    mapa = OrderedDict(sorted(mapa.items(), reverse=True))\n    resposta = 0\n    while n > 0:\n        restante = w\n        for key in mapa.keys():\n            while key <= restante and restante != 0 and (mapa[key] > 0):\n                n -= 1\n                restante -= key\n                mapa[key] -= 1\n        resposta += 1\n    print(resposta)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())), reverse=True)\n    dic = {}\n    answer = 0\n    for i in range(n):\n        if dic.get(arr[i]) == None:\n            dic[arr[i]] = 1\n        else:\n            dic[arr[i]] += 1\n    while dic != {}:\n        temp = w\n        answer += 1\n        for key in sorted(dic.keys(), reverse=True):\n            if dic[key] > 0:\n                count = min(temp // key, dic[key])\n                temp = temp - count * key\n                dic[key] -= count\n            if dic[key] == 0:\n                dic.pop(key)\n            if temp == 0:\n                break\n    print(answer)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for e in a:\n        d[e] += 1\n    a = sorted(list(d.items()), key=lambda x: x[0], reverse=True)\n    a = [[e[0], e[1]] for e in a]\n    (c, n) = (0, len(a))\n    while True:\n        (curr, i) = (0, 0)\n        while i < n:\n            if a[i][1] and curr + a[i][0] <= w:\n                curr += a[i][0]\n                a[i][1] -= 1\n            else:\n                i += 1\n        c += 1\n        if all([e[1] == 0 for e in a]):\n            break\n    print(c)", "for _ in range(int(input())):\n    (_, largura_caixa) = map(int, input().split(' '))\n    frequencia = {}\n    for retangulo in list(map(int, input().split(' '))):\n        if not retangulo in frequencia:\n            frequencia[retangulo] = 1\n        else:\n            frequencia[retangulo] = frequencia[retangulo] + 1\n    retangulos = set(frequencia.keys())\n    retangulos_usados = set()\n    soma_linha = 0\n    conta_linhas = 0\n    while len(retangulos_usados) < len(retangulos):\n        retangulos_restantes = [ret for ret in retangulos if not ret in retangulos_usados]\n        retangulos_restantes.sort(reverse=True)\n        for retangulo in retangulos_restantes:\n            espaco_restante_linha = largura_caixa - soma_linha\n            max_num_retangulos_linha = espaco_restante_linha // retangulo\n            num_retangulos = min(frequencia[retangulo], max_num_retangulos_linha)\n            soma_linha += num_retangulos * retangulo\n            frequencia[retangulo] -= num_retangulos\n            if frequencia[retangulo] == 0:\n                retangulos_usados.add(retangulo)\n        conta_linhas += 1\n        soma_linha = 0\n    print(conta_linhas)", "for _ in range(int(input())):\n    (n, y) = map(int, input().split())\n    a = [*map(int, input().split())]\n    d = {}\n    c = 0\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    while d:\n        w = y\n        for i in reversed(sorted(d.keys())):\n            x = min(w // i, d[i])\n            d[i] -= x\n            w -= x * i\n            if d[i] == 0:\n                del d[i]\n            if w == 0:\n                break\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = {}\n    m = 0\n    s = set()\n    for i in range(n):\n        if a[i] not in l:\n            l[a[i]] = 1\n        else:\n            l[a[i]] += 1\n        m = max(m, a[i])\n        s.add(a[i])\n    v = list(s)\n    v.sort()\n    v = v[::-1]\n    res = 0\n    i = 0\n    while i < n:\n        ans = 0\n        for j in v:\n            while l[j] > 0:\n                if ans + j <= w:\n                    ans += j\n                    l[j] -= 1\n                    i += 1\n                else:\n                    break\n        res += 1\n    print(res)", "x = int(input())\nfor i in range(x):\n    (n, y) = [int(a) for a in input().split()]\n    ar = list(map(int, input().split()))[:n]\n    d = {}\n    c = 0\n    for i in range(n):\n        d[ar[i]] = d.get(ar[i], 0) + 1\n    while d:\n        w = y\n        for i in reversed(sorted(d.keys())):\n            x = min(w // i, d[i])\n            d[i] -= x\n            w -= x * i\n            if d[i] == 0:\n                del d[i]\n            if w == 0:\n                break\n        c += 1\n    print(c)", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w) = R()\n    c = Counter(R())\n    r = 0\n    while n:\n        v = w\n        r += 1\n        for x in sorted(c)[::-1]:\n            d = min(c[x], v // x)\n            c[x] -= d\n            v -= d * x\n            n -= d\n    print(r)", "import sys\nfrom collections import Counter\nt = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    d = list(map(int, input().split()))\n    kol = 0\n    p = Counter(d)\n    t = sorted(list(p.keys()), reverse=True)\n    while len(p) > 0:\n        kol += 1\n        W = w\n        for k in t:\n            while p[k] > 0 and k <= W:\n                x = k\n                W -= x\n                p[x] -= 1\n                if p[x] == 0:\n                    del p[x]\n    print(kol)", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w) = R()\n    c = Counter(R())\n    r = 0\n    while c:\n        v = w\n        r += 1\n        for x in sorted(c)[::-1]:\n            d = min(c[x], v // x)\n            c[x] -= d\n            v -= d * x\n            if c[x] < 1:\n                del c[x]\n    print(r)", "for t in range(int(input())):\n    (n, w) = map(int, input().split())\n    li = list(map(int, input().split(' ')))\n    dict = {}\n    for i in li:\n        if dict.get(i) == None:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    key = list(dict.keys())\n    key.sort(reverse=True)\n    c = 0\n    width = w\n    ans = 0\n    while c < len(li):\n        for i in key:\n            while i <= width and dict[i] > 0:\n                width -= i\n                c += 1\n                dict[i] -= 1\n        width = w\n        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())), reverse=True)\n    dic = {}\n    answer = 0\n    for i in range(n):\n        if dic.get(arr[i]) == None:\n            dic[arr[i]] = 1\n        else:\n            dic[arr[i]] += 1\n    while dic != {}:\n        temp = w\n        answer += 1\n        for key in sorted(dic.keys(), reverse=True):\n            if dic[key] > 0:\n                count = min(temp // key, dic[key])\n                temp = temp - count * key\n                dic[key] -= count\n            if dic[key] == 0:\n                dic.pop(key)\n            if temp == 0:\n                break\n    print(answer)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    c = {}\n    for x in map(int, input().split()):\n        c[x] = c.get(x, 0) + 1\n    a = sorted(c)\n    h = 0\n    while n:\n        h += 1\n        t = w\n        for i in range(len(a) - 1, -1, -1):\n            d = min(t // a[i], c[a[i]])\n            t -= a[i] * d\n            c[a[i]] -= d\n            n -= d\n    print(h)", "for _ in range(int(input())):\n    (_, largura_caixa) = map(int, input().split(' '))\n    frequencia = {}\n    for largura_retangulo in list(map(int, input().split(' '))):\n        if not largura_retangulo in frequencia:\n            frequencia[largura_retangulo] = 1\n        else:\n            frequencia[largura_retangulo] = frequencia[largura_retangulo] + 1\n    retangulos_usados = set()\n    largura_utilizada = 0\n    conta_linhas = 0\n    while len(retangulos_usados) < len(frequencia):\n        retangulos_restantes = [ret for ret in frequencia.keys() if not ret in retangulos_usados]\n        retangulos_restantes.sort(reverse=True)\n        for largura_retangulo in retangulos_restantes:\n            largura_restante = largura_caixa - largura_utilizada\n            max_num_retangulos_linha = largura_restante // largura_retangulo\n            num_retangulos = min(frequencia[largura_retangulo], max_num_retangulos_linha)\n            largura_utilizada += num_retangulos * largura_retangulo\n            frequencia[largura_retangulo] -= num_retangulos\n            if frequencia[largura_retangulo] == 0:\n                retangulos_usados.add(largura_retangulo)\n        conta_linhas += 1\n        largura_utilizada = 0\n    print(conta_linhas)", "import collections\nfor _ in range(int(input())):\n    (w, n) = map(int, input().split())\n    c = collections.Counter(list(map(int, input().split())))\n    ckey = sorted(c.keys(), reverse=True)\n    h = 0\n    while 1:\n        nh = n\n        for i in ckey:\n            if nh // i > 0:\n                kkk = min(c[i], nh // i)\n                nh -= i * kkk\n                c[i] -= kkk\n        h += 1\n        s = 0\n        for i in ckey:\n            s += c[i]\n        if s == 0:\n            break\n    print(h)", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom collections import Counter\nfor _ in range(rn()):\n    (n, W) = rns()\n    w = rl()\n    c = Counter(w)\n    grid = n * [0]\n    full = 0\n    for num in sorted(c.keys(), reverse=True):\n        j = full\n        k = 0\n        while k < c[num]:\n            if grid[j] + num <= W:\n                grid[j] += num\n                if grid[j] == W:\n                    full += 1\n                    j += 1\n                k += 1\n            else:\n                j += 1\n    ans = len([i for i in grid if i > 0])\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, w) = (int(i) for i in input().split())\n    rectangles = list((int(r) for r in input().split()))\n    rectangles.sort(reverse=True)\n    r_counter = Counter(rectangles)\n    rect_and_am_pairs = list(map(list, r_counter.items()))\n    res = 0\n    while rect_and_am_pairs:\n        layer_taken_w = 0\n        rect_i = 0\n        while rect_i < len(rect_and_am_pairs):\n            cur_rect_am = rect_and_am_pairs[rect_i]\n            max_cur_rect_per_layer = (w - layer_taken_w) // cur_rect_am[0]\n            taken_rect_amount = min(max_cur_rect_per_layer, cur_rect_am[1])\n            cur_rect_am[1] -= taken_rect_amount\n            layer_taken_w += taken_rect_amount * cur_rect_am[0]\n            rect_i += 1\n            if cur_rect_am[1] == 0:\n                rect_and_am_pairs.remove(cur_rect_am)\n                rect_i -= 1\n            if layer_taken_w == w or rect_i == len(rect_and_am_pairs) or (not rect_and_am_pairs):\n                res += 1\n                break\n    print(res)", "from collections import Counter\nfrom typing import Iterator\n\ndef get_num_input() -> Iterator[int]:\n    return map(int, input().split())\n\ndef main() -> None:\n    width: int\n    (_, width) = get_num_input()\n    given: dict[int, int] = dict(sorted(Counter(get_num_input()).items(), reverse=True))\n    level: int = 0\n    while given:\n        level += 1\n        start: int = width\n        unit: int\n        count: int\n        for (unit, count) in tuple(given.items()):\n            if not start:\n                break\n            most_used: int\n            (most_used, start) = divmod(start, unit)\n            used: int = min(most_used, count)\n            start += unit * (most_used - used)\n            left: int = count - used\n            if left:\n                given[unit] = left\n            else:\n                del given[unit]\n    print(level)\nONLY_ONCE: bool = False\nfor _ in range(1 if ONLY_ONCE else int(input())):\n    main()"]