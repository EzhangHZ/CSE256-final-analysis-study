["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0, 0]\n    r = []\n    for i in a:\n        c[i] += 1\n    for i in range(q):\n        (t, x) = map(int, input().split())\n        if t == 1:\n            x -= 1\n            v = a[x]\n            c[v] -= 1\n            v ^= 1\n            c[v] += 1\n            a[x] = v\n        else:\n            x -= 1\n            r.append(str(int(x < c[1])))\n    print('\\n'.join(r))\nsolve()", "import sys\nn = [int(i) for i in sys.stdin.readline().split()]\nm = [int(i) for i in sys.stdin.readline().split()]\nk = m.count(1)\nfor _ in range(n[1]):\n    a = [int(i) for i in sys.stdin.readline().split()]\n    if a[0] == 1:\n        if m[a[1] - 1] == 1:\n            m[a[1] - 1] = 0\n            k = k - 1\n        else:\n            m[a[1] - 1] = 1\n            k = k + 1\n    elif a[1] <= k:\n        sys.stdout.write('1' + '\\n')\n    else:\n        sys.stdout.write('0' + '\\n')", "import sys\nn = [int(i) for i in sys.stdin.readline().split()]\nm = [int(i) for i in sys.stdin.readline().split()]\nk = m.count(1)\nfor _ in range(n[1]):\n    a = [int(i) for i in sys.stdin.readline().split()]\n    if a[0] == 1:\n        if m[a[1] - 1] == 1:\n            m[a[1] - 1] = 0\n            k = k - 1\n        else:\n            m[a[1] - 1] = 1\n            k = k + 1\n    elif a[1] <= k:\n        sys.stdout.write('1' + '\\n')\n    else:\n        sys.stdout.write('0' + '\\n')", "def main():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ones = arr.count(1)\n    zeroes = arr.count(0)\n    ans = []\n    for i in range(q):\n        (t, x) = map(int, input().split())\n        if t == 1:\n            if arr[x - 1] == 0:\n                arr[x - 1] = 1\n                zeroes -= 1\n                ones += 1\n            else:\n                arr[x - 1] = 0\n                zeroes += 1\n                ones -= 1\n        elif ones >= x:\n            ans.append('1')\n        else:\n            ans.append('0')\n    print('\\n'.join(ans))\nmain()", "import sys\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\n(n0, n1) = (arr.count(0), arr.count(1))\nfor line in sys.stdin:\n    (op, v) = map(int, line.split())\n    if op == 1:\n        arr[v - 1] = 1 - arr[v - 1]\n        if arr[v - 1] == 0:\n            n1 -= 1\n            n0 += 1\n        else:\n            n0 -= 1\n            n1 += 1\n    else:\n        print(1 if v <= n1 else 0)", "(length, queries) = input().split(' ')\nqueries = int(queries)\na = list(map(lambda x: int(x), input().split(' ')))\nres = ''\ncnt = len(list(filter(lambda x: x == 1, a)))\nwhile queries > 0:\n    (cmd, n) = input().split(' ')\n    n = int(n) - 1\n    if cmd == '1':\n        if a[n] == 1:\n            a[n] = 1 - a[n]\n            cnt -= 1\n        else:\n            a[n] = 1 - a[n]\n            cnt += 1\n    elif cmd == '2':\n        if cnt > n:\n            res = res + '1\\n'\n        else:\n            res = res + '0\\n'\n    queries -= 1\nprint(res, end='')", "def main():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cnt = {0: 0, 1: 0}\n    for val in arr:\n        cnt[val] = cnt[val] + 1\n    result = []\n    for _ in range(q):\n        (t, x) = map(int, input().split())\n        if t == 1:\n            arr[x - 1] = 1 - arr[x - 1]\n            if arr[x - 1] == 0:\n                cnt[0] += 1\n                cnt[1] -= 1\n            else:\n                cnt[1] += 1\n                cnt[0] -= 1\n        elif x > cnt[1]:\n            result.append('0')\n        else:\n            result.append('1')\n    print('\\n'.join(result))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef bs(data, elem):\n    low = 0\n    high = len(data) - 1\n    while low <= high:\n        middle = (low + high) // 2\n        if data[middle] == elem:\n            return middle\n        elif data[middle] > elem:\n            high = middle - 1\n        else:\n            low = middle + 1\n    return -1\n\ndef main():\n    (n, q) = get_tuple_ints()\n    a = get_list_ints()\n    k = a.count(1)\n    for _ in range(q):\n        (t, x) = get_tuple_ints()\n        if t == 1:\n            if a[x - 1] == 1:\n                a[x - 1] = 0\n                k -= 1\n                continue\n            elif a[x - 1] == 0:\n                a[x - 1] = 1\n                k += 1\n                continue\n        elif x <= k:\n            print(1)\n            continue\n        else:\n            print(0)\n            continue\nmain()", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\n(N, Q) = map(int, wtf[0].split())\nA = list(map(int, wtf[1].split()))\nO = A.count(1)\nZ = A.count(0)\nfor q in wtf[2:]:\n    (t, x) = map(int, q.split())\n    if t == 1:\n        A[x - 1] = 1 - A[x - 1]\n        if A[x - 1] == 1:\n            O += 1\n            Z -= 1\n        else:\n            O -= 1\n            Z += 1\n    else:\n        print(1 if x <= O and O > 0 else 0)", "q = int(input().split()[1])\nm = input().split()\nlist1 = []\nyed = m.count('1')\nfor i in range(q):\n    s = input().split()\n    if s[0] == '2':\n        if int(s[1]) > yed:\n            list1.append(0)\n        else:\n            list1.append(1)\n    elif m[int(s[1]) - 1] == '1':\n        yed -= 1\n        m[int(s[1]) - 1] = '0'\n    else:\n        yed += 1\n        m[int(s[1]) - 1] = '1'\nprint(*list1, sep='\\n')", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\n\ndef main():\n    (n, q) = get_tuple_ints()\n    a = get_list_ints()\n    k = a.count(1)\n    for _ in range(q):\n        (t, x) = get_tuple_ints()\n        if t == 1:\n            if a[x - 1] == 1:\n                a[x - 1] = 0\n                k -= 1\n                continue\n            else:\n                a[x - 1] = 1\n                k += 1\n                continue\n        else:\n            c = a\n            if x <= k:\n                print(1)\n            else:\n                print(0)\n            continue\nmain()", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\ncount = sum(arr)\nanswer = ''\nfor _ in range(q):\n    (t, kx) = map(int, input().split())\n    if t == 1:\n        arr[kx - 1] = 1 - arr[kx - 1]\n        if arr[kx - 1]:\n            count += 1\n        else:\n            count -= 1\n    elif count < kx:\n        answer += '0\\n'\n    else:\n        answer += '1\\n'\nprint(answer)", "import sys\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    (n, q) = read_ints()\n    a = read_int_list()\n    cnt_one = a.count(1)\n    for _ in range(q):\n        (t, x) = read_ints()\n        if t == 1:\n            if a[~-x] == 1:\n                a[~-x] = 0\n                cnt_one -= 1\n            else:\n                a[~-x] = 1\n                cnt_one += 1\n        elif cnt_one >= x:\n            print(1)\n        else:\n            print(0)\nMain()", "import sys\npin = sys.stdin.readline\n(N, Q) = map(int, pin().split())\nA = [*map(int, pin().split())]\nS = sum(A)\nfor q in range(Q):\n    (t, v) = map(int, pin().split())\n    if t == 1:\n        if A[v - 1]:\n            S -= 1\n        else:\n            S += 1\n        A[v - 1] = 1 - A[v - 1]\n    elif t == 2:\n        if v > S:\n            print(0)\n        else:\n            print(1)", "import sys\n\ndef k_largest_value(seq, k):\n    num_one = sum(seq)\n    if num_one >= k:\n        return 1\n    else:\n        return 0\n(n, q) = [int(i) for i in sys.stdin.readline().split()]\nls = [int(i.strip()) for i in sys.stdin.readline().split()]\ntotal = sum(ls)\nfor _ in range(q):\n    (t, x) = [int(i) for i in sys.stdin.readline().split()]\n    if t == 1:\n        if ls[x - 1] == 0:\n            ls[x - 1] = 1\n            total += 1\n        else:\n            ls[x - 1] = 0\n            total -= 1\n    elif total >= x:\n        print(1)\n    else:\n        print(0)", "import sys\n(n, q) = map(int, sys.stdin.readline().split(' '))\nar = [-1] + list(map(int, sys.stdin.readline().split(' ')))\nn1 = ar.count(1)\nn0 = ar.count(0)\nfor _ in range(q):\n    (t, k) = map(int, sys.stdin.readline().split(' '))\n    if t == 1:\n        if ar[k] == 1:\n            ar[k] = 0\n            n0 += 1\n            n1 -= 1\n        else:\n            ar[k] = 1\n            n0 -= 1\n            n1 += 1\n    elif k > n1:\n        print(0)\n    else:\n        print(1)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    (n, q) = get_ints()\n    arr = get_list()\n    one = sum(arr)\n    zero = n - one\n    while q:\n        (x, y) = get_ints()\n        if x == 1:\n            t = arr[y - 1]\n            if t == 0:\n                zero -= 1\n                one += 1\n            else:\n                one -= 1\n                zero += 1\n            arr[y - 1] = 1 - t\n        elif y <= one:\n            get_print_int(1)\n        else:\n            get_print_int(0)\n        q -= 1\nsolve()", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef main():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    for _ in range(q):\n        (t, x) = map(int, input().split())\n        if t == 1:\n            if a[x - 1] == 0:\n                c[0] -= 1\n                c[1] += 1\n            else:\n                c[0] += 1\n                c[1] -= 1\n            a[x - 1] = 1 - a[x - 1]\n        elif x > c[1]:\n            print(0)\n        else:\n            print(1)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    (n, qs) = inlt()\n    ar = inlt()\n    onesCount = 0\n    for val in ar:\n        if val == 1:\n            onesCount += 1\n    for q in range(qs):\n        (t, value) = inlt()\n        if t == 1:\n            value -= 1\n            if ar[value] == 1:\n                onesCount -= 1\n            else:\n                onesCount += 1\n            ar[value] = 1 - ar[value]\n        elif onesCount >= value:\n            print('1')\n        else:\n            print('0')\nmain()", "from sys import stdin\n(n, q) = [int(x) for x in stdin.readline().split()]\nnums = [int(x) for x in stdin.readline().split()]\nones = sum(nums)\nfor _ in range(q):\n    (t, x) = [int(x) for x in stdin.readline().split()]\n    if t == 1:\n        x -= 1\n        if nums[x] == 1:\n            ones -= 1\n        else:\n            ones += 1\n        nums[x] = 1 - nums[x]\n    elif x <= ones:\n        print('1')\n    else:\n        print('0')", "from math import sqrt\nimport operator\nimport sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef check_seq(n, seq):\n    return res\n\ndef main():\n    (n, q) = read_list_of_ints()\n    seq = read_list_of_ints()\n    ones_cnt = sum(seq)\n    for _ in range(q):\n        (t, x) = read_list_of_ints()\n        if t == 1:\n            if seq[x - 1] == 1:\n                seq[x - 1] = 0\n                ones_cnt -= 1\n            else:\n                seq[x - 1] = 1\n                ones_cnt += 1\n        if t == 2:\n            if x <= ones_cnt:\n                print('1')\n            else:\n                print('0')\nmain()", "from sys import stdin as sin\n\ndef aint():\n    return int(input())\n\ndef amap():\n    return map(int, sin.readline().split())\n\ndef alist():\n    return list(map(int, sin.readline().split()))\n\ndef astr():\n    return input()\n(n, q) = amap()\nl = alist()\no = 0\nz = 0\nfor i in l:\n    if i == 1:\n        o += 1\n    else:\n        z += 1\nfor i in range(q):\n    (a, b) = amap()\n    if a == 2:\n        if o < b:\n            print(0)\n        else:\n            print(1)\n    elif l[b - 1] == 1:\n        l[b - 1] = 0\n        z += 1\n        o -= 1\n    else:\n        l[b - 1] = 1\n        z -= 1\n        o += 1", "import sys\nimport math\n\nclass DictList(dict):\n\n    def __setitem__(self, key, value):\n        try:\n            self[key].append(value)\n        except KeyError:\n            super(DictList, self).__setitem__(key, value)\n        except AttributeError:\n            super(DictList, self).__setitem__(key, [self[key], value])\n\ndef fn(n, q, x, a, b):\n    c = x.count(1)\n    d = x.count(0)\n    for i in range(q):\n        if a[i] == 1:\n            if x[b[i] - 1] == 1:\n                x[b[i] - 1] = 0\n                c = c - 1\n                d = d + 1\n            elif x[b[i] - 1] == 0:\n                x[b[i] - 1] = 1\n                c = c + 1\n                d = d - 1\n        if a[i] == 2:\n            if b[i] > c:\n                print(0)\n            if b[i] <= c:\n                print(1)\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nn = data[0]\nq = data[1]\na = data[2:2 + n]\nl = 0\nx = []\ny = []\nfor i in range(q):\n    x.append(data[2 + n + l])\n    y.append(data[2 + n + l + 1])\n    l = l + 2\nfn(n, q, a, x, y)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n(n, q) = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\nc = Counter(a)\nnum_0 = c[0]\nnum_1 = c[1]\nfor _ in range(q):\n    (cmd, k) = map(int, input().strip().split())\n    if cmd == 1:\n        k -= 1\n        if a[k] == 0:\n            num_0 -= 1\n            num_1 += 1\n        else:\n            num_0 += 1\n            num_1 -= 1\n        a[k] = 1 - a[k]\n    elif num_1 >= k:\n        print(1)\n    else:\n        print(0)", "def inverte(x):\n    return 1 - x\n(tamanho, operacoes) = map(int, input().split(' '))\nrespostas = []\narray = input().split(' ')\narray = [int(x) for x in array]\nones = array.count(1)\nfor i in range(operacoes):\n    (tipo, v) = map(int, input().split(' '))\n    if tipo == 1:\n        array[v - 1] = inverte(array[v - 1])\n        if array[v - 1] == 1:\n            ones += 1\n        else:\n            ones -= 1\n    elif v > ones:\n        respostas.append(0)\n    else:\n        respostas.append(1)\nfor j in respostas:\n    print(j)", "from sys import stdin, stdout\n\ndef gmi():\n    return map(int, stdin.readline().strip().split())\n\ndef gms():\n    return map(str, stdin.readline().strip().split())\n\ndef gari():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef gars():\n    return list(map(str, stdin.readline().strip().split()))\n\ndef gs():\n    return stdin.readline().strip()\n\ndef gls():\n    return list(stdin.readline())\n\ndef gi():\n    return int(stdin.readline())\n\ndef pr(s):\n    return file.write(str(s) + '\\n')\n(n, q) = gmi()\nar = gari()\nc = ar.count(1)\nwhile q:\n    q -= 1\n    (a, b) = gmi()\n    if a == 1:\n        ar[b - 1] = 1 - ar[b - 1]\n        if ar[b - 1]:\n            c += 1\n        else:\n            c -= 1\n    elif b <= c:\n        print(1)\n    else:\n        print(0)", "import sys\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n(n, q) = inpl()\na = inpl()\nsorted_a = sorted(a, reverse=True)\nif 0 not in sorted_a:\n    first_zero = n + 1\nelse:\n    first_zero = sorted_a.index(0) + 1\nfor _ in range(q):\n    (t, k) = inpl()\n    if t == 1:\n        a[k - 1] = 1 - a[k - 1]\n        if a[k - 1] == 1:\n            first_zero += 1\n        else:\n            first_zero -= 1\n    elif k >= first_zero:\n        print(0)\n    else:\n        print(1)", "from collections import Counter\n\ndef read_input(filename: str=None):\n    from sys import stdin\n    stdin = open(filename) if filename else stdin\n    (_, cases) = tuple(map(int, stdin.readline().split()))\n    values = list(map(int, stdin.readline().split()))\n    counter = Counter(values)\n    while cases:\n        cases = cases - 1\n        (operation, index) = tuple(map(int, stdin.readline().split()))\n        if not operation - 1:\n            index = index - 1\n            values[index] = values[index] ^ 1\n            counter[values[index]] = counter[values[index]] + 1\n            counter[values[index] ^ 1] = counter[values[index] ^ 1] - 1\n            continue\n        if index <= counter[1]:\n            print('1')\n            continue\n        print('0')\n\ndef main():\n    read_input()\nmain()", "import sys\nfrom collections import Counter\n\ndef solve(a, q):\n    n = len(a)\n    cnt = Counter(a)\n    ones = cnt.get(1, 0)\n    zeros = cnt.get(0, 0)\n    assert ones + zeros == n\n    for _ in range(q):\n        (t, k) = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n        k -= 1\n        if t == 1:\n            if a[k] == 1:\n                ones -= 1\n                zeros += 1\n            else:\n                ones += 1\n                zeros -= 1\n            a[k] = 1 - a[k]\n        else:\n            x = 1 if k < ones else 0\n            print(x)\n(_, q) = list(map(int, sys.stdin.readline().rstrip().split(' ')))\na = list(map(int, sys.stdin.readline().rstrip().split(' ')))\nsolve(a, q)", "import sys\n(n, q) = map(int, sys.stdin.readline().strip().split())\na = list(map(int, sys.stdin.readline().strip().split()))\nc = a.count(1)\nfor _ in range(q):\n    (t, x) = map(int, sys.stdin.readline().strip().split())\n    if t == 1:\n        if a[x - 1] == 0:\n            c += 1\n            a[x - 1] = 1\n        elif a[x - 1] == 1:\n            c -= 1\n            a[x - 1] = 0\n    elif t == 2:\n        if x > c:\n            print(0)\n        else:\n            print(1)", "import sys\n\ndef f2(n, q, x, a, b):\n    c = x.count(1)\n    d = x.count(0)\n    for i in range(q):\n        if a[i] == 1:\n            if x[b[i] - 1] == 1:\n                c = c - 1\n                d = d + 1\n                x[b[i] - 1] = 0\n                continue\n            if x[b[i] - 1] == 0:\n                c = c + 1\n                d = d - 1\n                x[b[i] - 1] = 1\n                continue\n        if a[i] == 2:\n            if b[i] > c:\n                print(0)\n            if b[i] <= c:\n                print(1)\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nn = data[0]\nq = data[1]\nx = data[2:2 + n]\nl = 0\na = []\nb = []\nfor i in range(q):\n    a.append(data[2 + n + l])\n    b.append(data[2 + n + l + 1])\n    l = l + 2\nf2(n, q, x, a, b)", "(cs, ln) = map(int, input().split())\nar = list(map(int, input().split()))\nz = ar.count(0)\n(o, sol) = (cs - z, [])\nwhile ln:\n    ln -= 1\n    (qst, pl) = map(int, input().split())\n    if qst == 2:\n        if cs - pl >= z:\n            sol.append(1)\n        else:\n            sol.append(0)\n    elif ar[pl - 1] == 0:\n        ar[pl - 1] = 1\n        o += 1\n        z -= 1\n    else:\n        ar[pl - 1] = 0\n        o -= 1\n        z += 1\nprint(*sol, sep='\\n')", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ceil(num, denom):\n    return (num + denom - 1) // denom\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\ncount = Counter(arr)\nfor qq in range(q):\n    (t, ind) = map(int, input().split())\n    if t == 1:\n        if arr[ind - 1] == 1:\n            arr[ind - 1] = 0\n            count[1] -= 1\n            count[0] += 1\n        else:\n            arr[ind - 1] = 1\n            count[1] += 1\n            count[0] -= 1\n    elif ind <= count[1]:\n        print(1)\n    else:\n        print(0)", "import sys, io, os, math\nfrom math import ceil, log, gcd, sqrt\nfrom itertools import permutations\nimport operator\nmod = 1000000007\nmod1 = 998244353\n\ndef intinp():\n    return int(sys.stdin.readline())\n\ndef strinp():\n    return sys.stdin.readline()\n\ndef arrinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef mulinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef flush():\n    return stdout.flush()\n\ndef power_two(x):\n    return 1 << x\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    (n, q) = mulinp()\n    t = arrinp()\n    count = 0\n    for i in range(0, n):\n        if t[i]:\n            count += 1\n    while q:\n        (x, k) = mulinp()\n        if x == 1:\n            t[k - 1] = 1 - t[k - 1]\n            if t[k - 1] == 0:\n                count -= 1\n            else:\n                count += 1\n        if x == 2:\n            if k <= count:\n                print(1)\n            else:\n                print(0)\n        q -= 1\n\ndef main():\n    tc = 1\n    while tc:\n        solve()\n        tc -= 1\nmain()", "import sys\nfrom collections import *\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline()\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ncnt = Counter(a)\nfor _ in range(q):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        if a[x - 1] == 0:\n            cnt[1] += 1\n            cnt[0] -= 1\n        else:\n            cnt[1] -= 1\n            cnt[0] += 1\n        a[x - 1] = 1 - a[x - 1]\n    elif x <= cnt[1]:\n        print(1)\n    else:\n        print(0)", "import sys\ninput = sys.stdin.readline\n\ndef solution(n, q, arr, queries):\n    count_1 = len([1 for elem in arr if elem == 1])\n    for [type_, pos] in queries:\n        if type_ == 1:\n            if arr[pos - 1] == 1:\n                count_1 -= 1\n            else:\n                count_1 += 1\n            arr[pos - 1] = 1 - arr[pos - 1]\n        elif count_1 >= pos:\n            print(1)\n        else:\n            print(0)\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nqueries = [list(map(int, input().split())) for _ in range(q)]\nsolution(n, q, arr, queries)", "import sys\ninputlines = sys.stdin.readlines()\n(n, q) = list(map(int, inputlines[0].split(' ')))\nelements = list(map(int, inputlines[1].split(' ')))\nnumber_of_zeroes = 0\nnumber_of_ones = 0\nfor i in elements:\n    if i == 0:\n        number_of_zeroes += 1\n    else:\n        number_of_ones += 1\nfor i in range(q):\n    (t, x) = list(map(int, inputlines[i + 2].split(' ')))\n    if t == 2:\n        if number_of_ones >= x:\n            print(1)\n        else:\n            print(0)\n    else:\n        if elements[x - 1] == 0:\n            number_of_ones += 1\n            number_of_zeroes -= 1\n        else:\n            number_of_ones -= 1\n            number_of_zeroes += 1\n        elements[x - 1] = 1 - elements[x - 1]", "(n, q) = map(int, input().split())\nk = list(map(int, input().split()))\nm = k.count(0)\nf = n - m\nans = []\nfor i in range(q):\n    (a, b) = map(int, input().split())\n    if a == 1:\n        if k[b - 1] == 1:\n            k[b - 1] = 0\n            m = m + 1\n            f = f - 1\n        else:\n            k[b - 1] = 1\n            f = f + 1\n            m = m - 1\n    elif n - b < m:\n        ans.append(0)\n    else:\n        ans.append(1)\nprint(*ans, sep='\\n')", "(n, q) = map(int, input().split())\narr = [int(x) for x in input().split()]\nones = arr.count(1)\ns = []\nfor i in range(q):\n    (a, b) = map(int, input().split())\n    if a == 2:\n        if b <= ones:\n            s.append(1)\n        else:\n            s.append(0)\n    elif arr[b - 1] == 0:\n        arr[b - 1] = 1\n        ones = ones + 1\n    else:\n        arr[b - 1] = 0\n        ones = ones - 1\nfor i in s:\n    print(i)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\ncount = sum(arr)\nanswer = ''\nfor _ in range(q):\n    (t, kx) = map(int, input().split())\n    if t == 1:\n        arr[kx - 1] = 1 - arr[kx - 1]\n        if arr[kx - 1]:\n            count += 1\n        else:\n            count -= 1\n    elif count < kx:\n        answer += '0'\n    else:\n        answer += '1'\nfor i in answer:\n    print(i)", "out = []\n(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\no = sum([1 for x in l if x == 1])\nfor _ in range(q):\n    (t, p) = map(int, input().split())\n    if t == 1:\n        if l[p - 1] == 1:\n            o -= 1\n            l[p - 1] = 0\n        else:\n            o += 1\n            l[p - 1] = 1\n    elif o >= p:\n        out.append(1)\n    else:\n        out.append(0)\nfor i in out:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nfor _ in range(1):\n    (n, q) = LI()\n    a = LI()\n    cnt = a.count(1)\n    for el in range(q):\n        (t, x) = LI()\n        if t == 1:\n            if a[x - 1] == 1:\n                a[x - 1] = 0\n                cnt -= 1\n            else:\n                a[x - 1] = 1\n                cnt += 1\n        elif x > cnt:\n            print(0)\n        else:\n            print(1)", "import sys\ninput = sys.stdin.readline\n\ndef read_number():\n    return int(input())\n\ndef read_list():\n    return list(map(int, input().split()))\n\ndef read_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_separated_numbers():\n    return map(int, input().split())\nfirst_row = read_list()\n(n, q) = (first_row[0], first_row[1])\nvalues = read_list()\nflag = False\ntotal = sum(values)\nfor i in range(q):\n    input_line = read_list()\n    t = input_line[0]\n    if t == 1:\n        x = input_line[1]\n        values[x - 1] = 1 - values[x - 1]\n        if values[x - 1] == 1:\n            total += 1\n        else:\n            total -= 1\n    else:\n        k = input_line[1]\n        if k <= total:\n            print(str(1))\n        else:\n            print(str(0))", "(n, q) = map(int, input().split())\ns = input().split()\nres = []\nOs = 0\nZs = 0\nfor i in range(0, n):\n    if s[i] == '0':\n        Zs += 1\n    else:\n        Os += 1\nfor i in range(0, q):\n    qr = input().split()\n    if qr[0] == '1':\n        if s[int(qr[1]) - 1] == '1':\n            s[int(qr[1]) - 1] = '0'\n            Os -= 1\n            Zs += 1\n        else:\n            s[int(qr[1]) - 1] = '1'\n            Os += 1\n            Zs -= 1\n    elif int(qr[1]) > Os:\n        res.append(0)\n    else:\n        res.append(1)\nfor val in res:\n    print(val)", "answer_list = []\nq = input().split()\nq = q[1]\nn_list = input().split()\nn_0 = 0\nn_1 = 0\nfor l in n_list:\n    if l == '0':\n        n_0 += 1\n    else:\n        n_1 += 1\nfor a in range(int(q)):\n    numbers = input().split()\n    first = int(numbers[0])\n    second = int(numbers[1])\n    if first == 1:\n        if n_list[second - 1] == '0':\n            n_list[second - 1] = '1'\n            n_0 -= 1\n            n_1 += 1\n        else:\n            n_list[second - 1] = '0'\n            n_0 += 1\n            n_1 -= 1\n    elif n_1 >= second:\n        answer_list.append(1)\n    else:\n        answer_list.append(0)\nfor w in answer_list:\n    print(w)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\ncount = sum(arr)\nanswer = []\nfor _ in range(q):\n    (t, kx) = map(int, input().split())\n    if t == 1:\n        arr[kx - 1] = 1 - arr[kx - 1]\n        if arr[kx - 1]:\n            count += 1\n        else:\n            count -= 1\n    elif count >= kx:\n        answer.append(1)\n    else:\n        answer.append(0)\nfor i in answer:\n    print(i)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\ncount = sum(arr)\nanswer = []\nfor _ in range(q):\n    (t, kx) = map(int, input().split())\n    if t == 1:\n        arr[kx - 1] = 1 - arr[kx - 1]\n        if arr[kx - 1]:\n            count += 1\n        else:\n            count -= 1\n    elif count < kx:\n        answer.append(0)\n    else:\n        answer.append(1)\nfor i in answer:\n    print(i)", "def solve(arr, query):\n    ones = sum(arr)\n    for x in query:\n        if x[0] == 1:\n            if arr[x[1] - 1] == 1:\n                ones -= 1\n                arr[x[1] - 1] = 0\n            else:\n                arr[x[1] - 1] = 1\n                ones += 1\n        elif ones >= x[1]:\n            print(1)\n        else:\n            print(0)\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nquery = []\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    query.append((a, b))\nsolve(arr, query)", "(n, q) = tuple(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nres = []\nmax_count = 0\nfor x in a:\n    if x == 1:\n        max_count += 1\nfor i in range(0, q):\n    (t, x) = tuple(map(int, input().split(' ')))\n    if t == 1:\n        if a[x - 1] == 1:\n            max_count -= 1\n        else:\n            max_count += 1\n        a[x - 1] = 1 - a[x - 1]\n    elif x <= max_count:\n        res.append(1)\n    else:\n        res.append(0)\nprint(*res, sep='\\n')", "(len, n) = map(int, input().split())\nl = []\noutput = []\nl = list(map(int, input().split()))\none = 0\nfor i in l:\n    if i == 1:\n        one += 1\nfor i in range(n):\n    (choice, index) = map(int, input().split())\n    if choice == 1:\n        if l[index - 1] == 1:\n            one -= 1\n        else:\n            one += 1\n        l[index - 1] = 1 - l[index - 1]\n    elif choice == 2:\n        if index <= one:\n            output.append(1)\n        else:\n            output.append(0)\nfor i in output:\n    print(i)", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nT = 1\nN = 10000\nfor _ in range(T):\n    (n, q) = list(map(int, stdin.readline().rstrip().split()))\n    a = list(map(int, stdin.readline().rstrip().split()))\n    d = {0: 0, 1: 0}\n    for i in a:\n        d[i] += 1\n    for _ in range(q):\n        (c, x) = list(map(int, stdin.readline().rstrip().split()))\n        if c == 1:\n            d[a[x - 1]] -= 1\n            a[x - 1] = 1 - a[x - 1]\n            d[a[x - 1]] += 1\n        elif d[1] >= x:\n            print(1)\n        else:\n            print(0)", "(n, q) = map(int, input().split())\na = [int(i) for i in input().split()]\nans = []\ncnt = sum(a)\nfor _ in range(q):\n    (t, p) = map(int, input().split())\n    if t == 1:\n        if a[p - 1] == 0:\n            cnt += 1\n        else:\n            cnt -= 1\n        a[p - 1] = 1 - a[p - 1]\n    elif p > cnt:\n        ans.append(0)\n    else:\n        ans.append(1)\nfor i in ans:\n    print(i)", "from collections import deque\nimport sys\n\ndef main():\n    input()\n    valores = input().split()\n    ordenado = deque(sorted(valores, reverse=True))\n    for e in sys.stdin:\n        (t, k) = e.split()\n        k = int(k)\n        if t == '1':\n            if valores[k - 1] == '1':\n                ordenado.popleft()\n                ordenado.append('0')\n                valores[k - 1] = '0'\n            else:\n                ordenado.pop()\n                ordenado.appendleft('1')\n                valores[k - 1] = '1'\n        else:\n            print(ordenado[k - 1])\nmain()", "def answer(type, xk, ary, sum):\n    if type == 1:\n        ary[xk - 1] = 1 - ary[xk - 1]\n        if ary[xk - 1] == 0:\n            sum -= 1\n        else:\n            sum += 1\n    elif xk <= sum:\n        print(1)\n    else:\n        print(0)\n    return sum\n\ndef main():\n    (n, q) = [int(i) for i in input().split()]\n    ary = [int(i) for i in input().split()]\n    type = [0] * q\n    xk = [0] * q\n    for j in range(q):\n        (type[j], xk[j]) = [int(i) for i in input().split()]\n    sum = 0\n    for e in ary:\n        sum += e\n    for j in range(q):\n        sum = answer(type[j], xk[j], ary, sum)\nmain()", "(n, q) = map(int, input().split())\nl = [int(x) for x in input().split()]\nx = l.count(1)\nw = []\nfor i in range(q):\n    (a, b) = map(int, input().split())\n    if a == 2:\n        if b <= x:\n            w.append(1)\n        else:\n            w.append(0)\n    elif l[b - 1] == 0:\n        l[b - 1] = 1\n        x += 1\n    else:\n        l[b - 1] = 0\n        x -= 1\nfor i in w:\n    print(i)", "(n, q) = list(map(int, input().split()))\na = list(map(int, input().split()))\nt1 = []\nt2 = []\nfor i in range(q):\n    (tmp1, tmp2) = list(map(int, input().split()))\n    t1.append(tmp1)\n    t2.append(tmp2)\nadd = sum(a)\nfor (i, j) in zip(t1, t2):\n    if i == 1:\n        a[j - 1] = 1 - a[j - 1]\n        if a[j - 1] == 1:\n            add = add + 1\n        else:\n            add = add - 1\n    elif j <= add:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\nnum = list(map(int, input().split()))\nl = []\nfor i in range(q):\n    l.append([int(j) for j in input().split()])\ntotal = num.count(1)\nfor i in range(q):\n    if l[i][0] == 1:\n        if num[l[i][1] - 1] == 1:\n            num[l[i][1] - 1] ^= 1\n            total -= 1\n        else:\n            num[l[i][1] - 1] ^= 1\n            total += 1\n    elif l[i][1] <= total:\n        print('1')\n    else:\n        print('0')", "def remove_by_index(l1, k):\n    ans = []\n    for i in range(len(l1)):\n        if i == k:\n            continue\n        ans.append(l1[i])\n    return ans\n\ndef get_kth_largest_elem(l1, k):\n    index = -1\n    for _ in range(k):\n        max = -1\n        for i in range(len(l1)):\n            if l1[i] > max:\n                max = l1[i]\n                index = i\n        l1 = remove_by_index(l1, index)\n    return max\n\ndef solve(l1, l2):\n    cnt_1 = 0\n    cnt_0 = 0\n    for items in l1:\n        if items == 1:\n            cnt_1 += 1\n        else:\n            cnt_0 += 1\n    for q in l2:\n        if q[0] == 2:\n            k = q[1]\n            if k > cnt_1:\n                print(0)\n            else:\n                print(1)\n        else:\n            l1[q[1] - 1] = 1 - l1[q[1] - 1]\n            if l1[q[1] - 1]:\n                cnt_1 += 1\n                cnt_0 -= 1\n            else:\n                cnt_0 += 1\n                cnt_1 -= 1\nqueries = []\nq1 = input().split(' ')\nnum_query = int(q1[1])\nl1 = input().split(' ')\nl1 = [int(i) for i in l1]\nfor _ in range(num_query):\n    l22 = input().split(' ')\n    l22 = [int(i) for i in l22]\n    queries.append([l22[0], l22[1]])\nsolve(l1, queries)", "from collections import Counter\n\ndef k_max(arr, com):\n    cnt = Counter(arr)\n    for (t, k) in com:\n        if t == 1:\n            if arr[k - 1] == 0:\n                arr[k - 1] = 1\n                cnt[1] += 1\n                cnt[0] -= 1\n            else:\n                arr[k - 1] = 0\n                cnt[0] += 1\n                cnt[1] -= 1\n        elif k <= cnt[1]:\n            print(1)\n        else:\n            print(0)\n(n, q) = (int(i) for i in input().split())\narr = [int(i) for i in input().split()]\ncommands = []\nfor i in range(q):\n    (t, k) = (int(i) for i in input().split())\n    commands.append((t, k))\nk_max(arr, commands)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nquery = []\nfor i in range(q):\n    query.append(list(map(int, input().split())))\nnum_zero = 0\nnum_one = 0\nfor i in arr:\n    if i == 0:\n        num_zero += 1\n    else:\n        num_one += 1\nfor i in query:\n    if i[0] == 2:\n        k = i[1]\n        if k <= num_one:\n            print(1)\n        else:\n            print(0)\n    elif arr[i[1] - 1] == 1:\n        num_one -= 1\n        num_zero += 1\n        arr[i[1] - 1] = 0\n    else:\n        num_zero -= 1\n        num_one += 1\n        arr[i[1] - 1] = 1", "def ass(a, b):\n    if a != b:\n        print(f'Assertion error:\\n{a}\\n{b}')\n\ndef intline():\n    return [int(item) for item in input().split()]\n\ndef line():\n    return [item for item in input().split()]\n\ndef dump(lst):\n    for (i, item) in enumerate(lst):\n        print(i, item)\n\ndef binsearch(arr, a, b):\n    m = (a + b) // 2\n    if a >= b:\n        return a - 1 if arr[a] == 0 else a\n    return binsearch(arr, a, m - 1) if arr[m] == 0 else binsearch(arr, m + 1, b)\n\ndef f(values, queries):\n    total = sum(values)\n    result = []\n    for (t, x) in queries:\n        if t == 1:\n            total += -1 if values[x - 1] == 1 else 1\n            values[x - 1] = 1 - values[x - 1]\n        if t == 2:\n            result.append(1 if x <= total else 0)\n    return result\n(n, q) = intline()\nvalues = intline()\nqueries = [intline() for i in range(q)]\nfor res in f(values, queries):\n    print(res)", "import math\nfrom collections import defaultdict\nfrom math import comb\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\nglobal_ans = []\n\ndef p(a):\n    global_ans.append(a)\n\ndef solve():\n    (n, q) = input_list_int()\n    a = input_list_int()\n    tmp = 0\n    for i in a:\n        if i == 1:\n            tmp += 1\n    for i in range(q):\n        (t, x) = input_list_int()\n        if t == 1:\n            tmp += -1 if a[x - 1] == 1 else 1\n            a[x - 1] = 1 - a[x - 1]\n        else:\n            p(1 if x <= tmp else 0)\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "q = int(input().split()[1])\nx = list(input().split())\nones = x.count('1')\nfor _ in range(0, q):\n    (f, v) = input().split()\n    if f == '2':\n        if ones >= int(v):\n            print(1)\n        else:\n            print(0)\n    else:\n        v = int(v)\n        if x[v - 1] == '1':\n            ones -= 1\n            x[v - 1] = '0'\n        else:\n            ones += 1\n            x[v - 1] = '1'", "(n, m) = input().split(' ')\nmatriz = list(map(int, input().split(' ')))\nmaior = sum(matriz)\nfor i in range(int(m)):\n    (t, x) = input().split(' ')\n    x = int(x)\n    if t == '2':\n        if x <= maior:\n            print(1)\n        else:\n            print(0)\n    elif matriz[x - 1] == 0:\n        matriz[x - 1] = 1\n        maior += 1\n    else:\n        matriz[x - 1] = 0\n        maior -= 1", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nones = a.count(1)\nfor _ in range(k):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        a[x - 1] = 1 - a[x - 1]\n        if a[x - 1] == 1:\n            ones += 1\n        else:\n            ones -= 1\n    elif ones >= x:\n        print(1)\n    else:\n        print(0)", "(n, q) = input().split()\nlista = input().split()\nuns = lista.count('1')\nfor i in range(int(q)):\n    (t, xk) = input().split()\n    if t == '1':\n        if lista[int(xk) - 1] == '1':\n            lista[int(xk) - 1] = '0'\n            uns -= 1\n        else:\n            lista[int(xk) - 1] = '1'\n            uns += 1\n    elif int(xk) <= uns:\n        print(1)\n    else:\n        print(0)", "n = input().split()\nlista = input().split()\nones = lista.count('1')\nfor c in range(int(n[1])):\n    ent = input().split()\n    (a, b) = (int(ent[0]), int(ent[1]))\n    if a == 1:\n        if lista[b - 1] == '1':\n            ones -= 1\n        elif lista[b - 1] == '0':\n            ones += 1\n        lista[b - 1] = str(1 - int(lista[b - 1]))\n    elif a == 2:\n        print(0) if b > ones else print(1)", "nq = input().split()\nn = int(nq[0])\nq = int(nq[1])\narr = [int(x) for x in input().split()]\none = 0\nfor i in range(n):\n    if arr[i] == 1:\n        one += 1\nfor i in range(q):\n    qi = input().split()\n    query = int(qi[0])\n    ind = int(qi[1])\n    if query == 1:\n        if arr[ind - 1] == 0:\n            one += 1\n            arr[ind - 1] = 1 - arr[ind - 1]\n        else:\n            one -= 1\n            arr[ind - 1] = 1 - arr[ind - 1]\n    elif one >= ind:\n        print(1)\n    else:\n        print(0)", "(t, q) = input().split(' ')\nl = []\nl = input().split(' ')\nf = [0, 0]\nfor k in l:\n    if k == '0':\n        f[0] += 1\n    else:\n        f[1] += 1\nfor i in range(int(q)):\n    (t, x) = input().split(' ')\n    if t == '1':\n        if l[int(x) - 1] == '1':\n            f[1] -= 1\n            f[0] += 1\n            l[int(x) - 1] = '0'\n        else:\n            f[1] += 1\n            f[0] -= 1\n            l[int(x) - 1] = '1'\n    elif t == '2':\n        if int(x) > f[1]:\n            print(0)\n        else:\n            print(1)", "nq = input().split()\nn = int(nq[0])\nq = int(nq[1])\narray = [int(x) for x in input().split()]\nqt_ones = array.count(1)\nwhile q > 0:\n    txk = input().split()\n    t = int(txk[0])\n    if t == 1:\n        x = int(txk[1])\n        array[x - 1] = 1 - array[x - 1]\n        if array[x - 1] == 1:\n            qt_ones += 1\n        elif array[x - 1] == 0:\n            qt_ones -= 1\n    elif t == 2:\n        k = int(txk[1])\n        if k <= qt_ones:\n            print(1)\n        else:\n            print(0)\n    q -= 1", "integers = input().split()\narrayLength = int(integers[0])\nqueries = int(integers[1])\narray = input().split()\nqtd1 = array.count('1')\nfor num in range(queries):\n    numbers = input().split()\n    querie = int(numbers[0])\n    position = int(numbers[1])\n    if querie == 1:\n        if array[position - 1] == '1':\n            array[position - 1] = '0'\n            qtd1 -= 1\n        else:\n            array[position - 1] = '1'\n            qtd1 += 1\n    elif querie == 2:\n        if qtd1 >= position:\n            print(1)\n        else:\n            print(0)", "(n, q) = map(int, input().split())\na = [int(j) for j in input().split()]\nc = a.count(1)\nfor i in range(q):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        c -= a[x - 1]\n        a[x - 1] = 1 - a[x - 1]\n        c += a[x - 1]\n    else:\n        print('0' if x > c else '1')", "(n, k) = input().split()\nn = int(n)\nk = int(k)\na = input().split()\na = [int(x) for x in a]\na1 = 0\nfor i in range(n):\n    if a[i] == 1:\n        a1 += 1\nfor i in range(k):\n    (t, x) = input().split()\n    t = int(t)\n    x = int(x)\n    if t == 1:\n        if a[x - 1] == 1:\n            a[x - 1] = 0\n            a1 -= 1\n        else:\n            a[x - 1] = 1\n            a1 += 1\n    elif a1 >= x:\n        print(1)\n    else:\n        print(0)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nones = a.count(1)\nfor _ in range(k):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        a[x - 1] = 1 - a[x - 1]\n        if a[x - 1] == 1:\n            ones += 1\n        else:\n            ones -= 1\n    elif ones >= x:\n        print(1)\n    else:\n        print(0)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nones = a.count(1)\nfor _ in range(k):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        a[x - 1] = 1 - a[x - 1]\n        if a[x - 1] == 1:\n            ones += 1\n        else:\n            ones -= 1\n    elif ones >= x:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nk1 = a.count(1)\nfor i in range(q):\n    (b, c) = map(int, input().split())\n    if b == 1:\n        if a[c - 1] == 0:\n            k1 += 1\n            a[c - 1] = 1\n        else:\n            k1 -= 1\n            a[c - 1] = 0\n    elif k1 >= c:\n        print(1)\n    else:\n        print(0)", "nq = input().split()\nn = int(nq[0])\nq = int(nq[1])\narray = [int(x) for x in input().split()]\nqt_ones = array.count(1)\nwhile q > 0:\n    txk = input().split()\n    t = int(txk[0])\n    if t == 1:\n        x = int(txk[1])\n        array[x - 1] = 1 - array[x - 1]\n        if array[x - 1] == 1:\n            qt_ones += 1\n        elif array[x - 1] == 0:\n            qt_ones -= 1\n    elif t == 2:\n        k = int(txk[1])\n        if k <= qt_ones:\n            print(1)\n        else:\n            print(0)\n    q -= 1", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nzero = a.count(0)\none = n - zero\nfor _ in range(q):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        if a[x - 1] == 1:\n            zero += 1\n            one -= 1\n            a[x - 1] = 0\n        else:\n            zero -= 1\n            one += 1\n            a[x - 1] = 1\n    elif x <= one:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\no = a.count(1)\nz = a.count(0)\nfor _ in range(q):\n    (t, p) = map(int, input().split())\n    if t == 1:\n        if a[p - 1] == 0:\n            z -= 1\n            o += 1\n            a[p - 1] = 1\n        else:\n            z += 1\n            o -= 1\n            a[p - 1] = 0\n    elif p > o:\n        print(0)\n    else:\n        print(1)", "(n, q) = map(int, input().split())\na_list = list(map(int, input().split()))\nzeros = a_list.count(0)\nones = a_list.count(1)\nfor _ in range(q):\n    (t, x_or_k) = map(int, input().split())\n    if t == 1:\n        if a_list[x_or_k - 1] == 0:\n            zeros -= 1\n            ones += 1\n        else:\n            zeros += 1\n            ones -= 1\n        a_list[x_or_k - 1] = 1 - a_list[x_or_k - 1]\n    else:\n        print(1 if x_or_k <= ones else 0)", "def main():\n    (n, q) = map(int, input().split())\n    a_array = list(map(int, input().split()))\n    one_count = sum(a_array)\n    count = [n - one_count, one_count]\n    for i in range(q):\n        (t, m) = map(int, input().split())\n        if t == 1:\n            x = m - 1\n            count[0] += 2 * a_array[x] - 1\n            count[1] += 1 - 2 * a_array[x]\n            a_array[x] = 1 - a_array[x]\n        elif t == 2:\n            print(1 if m <= count[1] else 0)\nmain()", "def solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ones = a.count(1)\n    for i in range(q):\n        (op, indx) = map(int, input().split())\n        if op == 1:\n            if a[indx - 1] == 1:\n                ones -= 1\n            else:\n                ones += 1\n            a[indx - 1] = 1 - a[indx - 1]\n        elif ones < indx:\n            print(0)\n        else:\n            print(1)\nt = 1\nfor _ in range(t):\n    solve()", "(n, q) = map(int, input().split())\nd = list(map(int, input().split()))\nk = d.count(1)\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if x == 1:\n        if d[y - 1] == 1:\n            d[y - 1] = 0\n            k -= 1\n        else:\n            d[y - 1] = 1\n            k += 1\n    if x == 2:\n        if y <= k:\n            print(1)\n        else:\n            print(0)", "R = lambda : map(int, input().split())\n(n, q) = R()\n(*a,) = R()\nr = sum(a)\nfor _ in [0] * q:\n    (t, x) = R()\n    if t < 2:\n        a[x - 1] ^= 1\n        r += 2 * a[x - 1] - 1\n    else:\n        print(+(x <= r))", "(n, q) = map(int, input().split())\nlis = list(map(int, input().split()))\none = lis.count(1)\nfor i in range(q):\n    (a, b) = map(int, input().split())\n    if a == 1:\n        lis[b - 1] = 1 - lis[b - 1]\n        if not lis[b - 1]:\n            one -= 1\n        else:\n            one += 1\n    elif one >= b:\n        print(1)\n    else:\n        print(0)", "(n, q) = input().split()\nn = int(n)\nq = int(q)\na = [int(i) for i in input().split()]\nb = a.count(1)\nfor i in range(q):\n    (x, y) = input().split()\n    x = int(x)\n    y = int(y)\n    if x == 1:\n        a[y - 1] = 1 - a[y - 1]\n        if a[y - 1] == 1:\n            b += 1\n        else:\n            b -= 1\n    if x == 2:\n        if y <= b:\n            print('1')\n        else:\n            print('0')", "(a, b) = map(int, input().split())\narr = list(map(int, input().split()))\nl = arr.count(0)\nk = a - l\nfor _ in range(b):\n    (m, n) = map(int, input().split())\n    if m == 1:\n        if arr[n - 1] == 0:\n            l -= 1\n            k += 1\n            arr[n - 1] = 1\n        else:\n            l += 1\n            k -= 1\n            arr[n - 1] = 0\n    elif n <= k:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nx = a.count(1)\nfor i in range(q):\n    (t, k) = map(int, input().split())\n    if t == 1:\n        if a[k - 1] == 1:\n            x -= 1\n        else:\n            x += 1\n        a[k - 1] = 1 - a[k - 1]\n    elif x >= k:\n        print('1')\n    else:\n        print('0')", "(n, q) = input().split()\nq = int(q)\nl = list(map(int, input().split()))\ncount = l.count(1)\nfor i in range(q):\n    (x, k) = input().split()\n    k = int(k)\n    x = int(x)\n    if x == 2:\n        if k <= count:\n            print(1)\n        else:\n            print(0)\n    elif l[k - 1] == 0:\n        l[k - 1] = 1\n        count = count + 1\n    else:\n        l[k - 1] = 0\n        count = count - 1", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nzero = a.count(0)\none = n - zero\nfor _ in range(q):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        if a[x - 1] == 1:\n            zero += 1\n            one -= 1\n            a[x - 1] = 0\n        else:\n            zero -= 1\n            one += 1\n            a[x - 1] = 1\n    elif x <= one:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\na = [int(x) for x in input().split()]\ncount = a.count(1)\nfor i in range(q):\n    (t, x) = map(int, input().split())\n    if t == 1:\n        if a[x - 1] == 1:\n            a[x - 1] = 0\n            count -= 1\n        else:\n            a[x - 1] = 1\n            count += 1\n    elif x <= count:\n        print(1)\n    else:\n        print(0)", "(n, q) = map(int, input().split())\nli = list(map(int, input().split()))\nz = li.count(0)\no = n - z\nfor i in range(q):\n    (t, k) = map(int, input().split())\n    if t == 1:\n        if li[k - 1] == 0:\n            o += 1\n            z -= 1\n            li[k - 1] = 1\n        else:\n            li[k - 1] = 0\n            o -= 1\n            z += 1\n    elif t == 2:\n        if k <= o:\n            print(1)\n        else:\n            print(0)"]