["t = int(input())\ncases = []\n\ndef func(n, s):\n    for i in range(len(n)):\n        digit = int(n[i])\n        if s > digit:\n            s -= digit\n        elif digit == s:\n            if i == len(n) - 1:\n                return 0\n            elif all([v == '0' for v in n[i + 1:]]):\n                return 0\n            else:\n                left = len(n) - i\n                num = 10 ** left\n                remaining = n[i:]\n                remaining = int(''.join(remaining))\n                return num - remaining\n        else:\n            left = len(n) - i\n            num = 10 ** left\n            remaining = n[i:]\n            remaining = int(''.join(remaining))\n            return num - remaining\n    return 0\nfor i in range(t):\n    (n, s) = [int(x) for x in input().split(' ')]\n    cases.append([n, s])\nfor k in cases:\n    n = k[0]\n    s = k[1]\n    n = str(n)\n    n = list(n)\n    print(func(n, s))", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (s_str, t) = stdin.readline().split()\n    ogs = int(s_str)\n    s = list(map(int, list(s_str)))\n    t = int(t)\n    d = sum(s)\n    if d <= t:\n        print(0)\n    else:\n        diff = d - t + 1\n        i = len(s) - 1\n        while diff > 0:\n            diff -= s[i]\n            i -= 1\n        if i >= 0:\n            ceil = (int(s_str[:i + 1]) + 1) * 10 ** (len(s_str) - i - 1)\n        else:\n            ceil = 10 ** len(s_str)\n        print(int(ceil) - ogs)", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, s) = stdin.readline().split()\n    s = int(s)\n    sum = 0\n    movs = 0\n    for i in range(len(n)):\n        sum += int(n[i])\n        if sum >= s:\n            p = int(n[min(i + 1, len(n) - 1):])\n            if sum != s or (p != 0 and i != len(n) - 1):\n                movs = 10 ** (len(n) - i) - int(n[i:])\n            break\n    print(movs)", "def construct(s, index):\n    if index == 0:\n        return '1' + '0' * len(s)\n    mid = str(int(s[index - 1]) + 1)\n    if len(mid) < 2:\n        return s[:index - 1] + str(int(s[index - 1]) + 1) + '0' * (len(s) - index)\n    can = s[:index - 1] + '0' + '0' * (len(s) - index)\n    p = len(s) - index + 1\n    return str(int(can) + 10 ** p)\n\ndef num_dec(s, target):\n    tot = 0\n    for i in s:\n        tot += int(i)\n    amount = tot - target\n    if amount <= 0:\n        return 0\n    for i in range(len(s) - 1, -1, -1):\n        if amount <= -1:\n            j = int(construct(s, i))\n            return j - int(s)\n        amount -= int(s[i])\n        if amount <= -1:\n            j = int(construct(s, i))\n            return j - int(s)\nfor _ in range(int(input())):\n    x_t = input().split()\n    s = x_t[0]\n    tar = int(x_t[1])\n    print(num_dec(s, tar))", "import sys\nimport math\nfast_reader = sys.stdin.readline\nfast_writer = sys.stdout.write\n\ndef input():\n    return fast_reader().strip()\nfor T in range(int(input())):\n    (n, s) = map(int, input().split())\n    sum = 0\n    big = 0\n    num = str(n)\n    same = False\n    ind = 0\n    for i in range(len(num)):\n        sum += int(num[i])\n        if sum == s and same == False:\n            ind = i\n            big = num[i:]\n            same = True\n        elif sum > s:\n            if same == False:\n                big = num[i:]\n                ind = i\n            break\n    big = int(big)\n    if sum <= s:\n        print(0)\n    else:\n        l = len(num)\n        l -= ind\n        diffFrom = 10 ** l\n        print(diffFrom - big)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    dn = str(n)\n    len_ = len(dn)\n    (i, sum_) = (0, 0)\n    while i < len_ and sum_ < s:\n        sum_ += int(dn[i])\n        i += 1\n    if i == len_ and sum_ <= s:\n        print(0)\n    elif sum_ == s and int(''.join(dn[i:])) == 0:\n        print(0)\n    else:\n        i -= 1\n        suffix = int(''.join(dn[i:]))\n        print(10 ** (len_ - i) - suffix)", "t = int(input())\nbl = []\nfor i in range(t):\n    tempo = input()\n    bl.append(tempo)\n\ndef sdigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\nfor i in range(t):\n    s1 = bl[i]\n    s1 = s1.split()\n    n = s1[0]\n    s = int(s1[1])\n    if sdigits(n) <= s:\n        print(0)\n    else:\n        temp = 0\n        ix = 0\n        for i in range(len(n)):\n            temp += int(n[i])\n            if temp >= s:\n                ix = i\n                break\n        if ix > 0:\n            fin = str(int(n[:ix]) + 1)\n        else:\n            fin = '1'\n        rem = len(n) - ix\n        fin += '0' * rem\n        fin = int(fin)\n        fin = fin - int(n)\n        print(fin)", "t = int(input())\nw = []\n\ndef func(n):\n    n = str(n)\n    sum = 0\n    for i in range(len(n)):\n        sum = sum + int(n[i])\n    return sum\nfor i in range(t):\n    (n, s) = input().split()\n    n = int(n)\n    s = int(s)\n    r = str(n)\n    k = n\n    j = s\n    if func(n) <= s:\n        w.append(0)\n    else:\n        i = 0\n        while j > 0:\n            j = j - int(r[i])\n            i = i + 1\n        if i == 1:\n            w.append(10 ** len(r) - n)\n        else:\n            g = n - n % 10 ** (len(r) - i + 1)\n            g = g + 10 ** (len(r) - i + 1)\n            w.append(g - k)\nfor i in w:\n    print(i)", "def algo(n, s):\n    cur = -1\n    total = 0\n    sn = str(n)\n    for i in range(len(sn)):\n        total += int(sn[i])\n        if total < s:\n            cur = i\n    if total <= s:\n        return 0\n    res = 0\n    substr = sn[cur + 1:]\n    return int('1' + '0' * len(substr)) - int(substr)\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    ans = algo(n, s)\n    print(ans)", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    l = len(m)\n    i = j = t = 0\n    if sum(map(int, n)) > s:\n        for x in m:\n            t += int(x)\n            if t >= s:\n                m = m[:j] + chr(ord(m[j]) + 1) + '0' * (l - j - 1)\n                break\n            j = (j, i)[m[i] < '9']\n            i += 1\n    print(int(m) - int(n))", "l = []\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    new = n\n    d = []\n    sum = 0\n    while 1:\n        sum = sum + new % 10\n        d.append(new % 10)\n        new = new // 10\n        if new == 0:\n            break\n    d = d[::-1]\n    if sum <= s:\n        l.append(0)\n        continue\n    if d[0] >= s and sum > s:\n        l.append(10 ** len(d) - n)\n        continue\n    sum = 0\n    for i in range(len(d)):\n        sum = sum + d[i]\n        if sum >= s:\n            index = i\n            break\n    new = n % 10 ** (len(d) - index)\n    l.append(10 ** (len(d) - index) - new)\nfor i in l:\n    print(i)", "for _ in range(int(input())):\n    (n, s) = input().split()\n    l = [int(c) for c in n]\n    s = int(s)\n    if sum(l) <= s:\n        print(0)\n        continue\n    index = -1\n    total = 0\n    while total < s and index < len(l):\n        total += l[index + 1]\n        index += 1\n    print(10 ** (len(l) - index) - int(n[index:]))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    l = len(n)\n    s = int(s)\n    m = '0' + n\n    i = j = t = 0\n    for x in ([], m)[sum(map(int, n)) > s]:\n        t += int(x)\n        if t >= s:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (l - j)\n            break\n        j = (j, i)[m[i] < '9']\n        i += 1\n    print(int(m) - int(n))", "def run_case():\n    (n, s) = input().split()\n    nn = list(n)\n    s = int(s)\n    if sum(map(int, nn)) <= s:\n        print(0)\n    else:\n        temp = 0\n        pre = 0\n        for i in nn:\n            temp += int(i)\n            pre += 1\n            if temp >= s:\n                pre -= 1\n                break\n        if pre == 0:\n            print(pow(10, len(nn)) - int(n))\n        else:\n            num = int(n[:pre])\n            num += 1\n            print(num * pow(10, len(nn) - pre) - int(n))\nflag = 1\nif flag:\n    t = int(input())\n    for i in range(t):\n        run_case()\nelse:\n    run_case()", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    i = j = t = 0\n    for x in m * (sum(map(int, n)) > s):\n        t += int(x)\n        if t >= s:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (len(n) - j)\n            break\n        j = (j, i)[m[i] < '9']\n        i += 1\n    print(int(m) - int(n))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    n_str = str(n)\n    total = 0\n    k = -1\n    for (i, d) in enumerate(n_str):\n        total += int(d)\n        if k == -1 and total >= s:\n            k = i\n    if total <= s:\n        print(0)\n    else:\n        if k == 0:\n            new_n = int('1' + '0' * len(n_str))\n        else:\n            new_n = int(n_str[:k] + '0' * (len(n_str) - k)) + int('1' + '0' * (len(n_str) - k))\n        print(new_n - n)", "for _ in range(int(input())):\n    (n, s) = input().split()\n    s = int(s)\n    digits = [int(c) for c in n]\n    x = len(digits)\n    p = 0\n    while digits[x - 1] == 0:\n        x -= 1\n        p += 1\n    (y, s_) = (0, 0)\n    while s_ < s and y < x:\n        s_ += digits[y]\n        y += 1\n    if y == x and s_ <= s:\n        print(0)\n    else:\n        suffix = int(n[y - 1:x])\n        ans = (10 ** (x - y + 1) - suffix) * 10 ** p\n        print(ans)", "def ans(n, s):\n    a = str(n)\n    x = len(a)\n    summ = 0\n    w = x\n    for i in range(x):\n        j = int(a[i])\n        if summ + j < s:\n            summ = summ + j\n            continue\n        else:\n            w = i\n            break\n    if w == x:\n        return 0\n    b = a[w:]\n    for i in range(s - summ + 1):\n        if b == str(i) + '0' * (len(b) - 1):\n            return 0\n    z = len(b)\n    ori = 10 ** z\n    return ori - int(b)\nm = int(input())\nfor j in range(m):\n    arr = input().split()\n    n = int(arr[0])\n    s = int(arr[1])\n    print(ans(n, s))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    i = j = t = 0\n    for x in ([], m)[sum(map(int, n)) > s]:\n        t += int(x)\n        if t >= s:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (len(m) - j - 1)\n            break\n        j = (j, i)[m[i] < '9']\n        i += 1\n    print(int(m) - int(n))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    i = j = t = 0\n    for x in ([], m)[sum(map(int, n)) > s]:\n        t += int(x)\n        if t >= s:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (len(n) - j)\n            break\n        j = (j, i)[m[i] < '9']\n        i += 1\n    print(int(m) - int(n))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    i = j = t = 0\n    if sum(map(int, n)) > s:\n        for x in m:\n            t += int(x)\n            if t >= s:\n                m = m[:j] + chr(ord(m[j]) + 1) + '0' * (len(m) - j - 1)\n                break\n            j = (j, i)[m[i] < '9']\n            i += 1\n    print(int(m) - int(n))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, s) = input().split()\n    sdsum = int(s)\n    ndsum = sum(map(int, list(n)))\n    if ndsum <= sdsum:\n        print(0)\n        continue\n    diff = ndsum - sdsum\n    c = 0\n    for i in range(len(n) - 1, -1, -1):\n        c += int(n[i])\n        if ndsum - c + 1 <= sdsum:\n            p = 10 ** (len(n) - i)\n            if p > int(n):\n                print(p - int(n))\n                break\n            print((int(n) // p + 1) * p - int(n))\n            break", "def checkSum(n, s):\n    j = 0\n    k = len(n)\n    r = int(n)\n    sum = 0\n    while r > 0:\n        sum += r % 10\n        r = r // 10\n    if sum <= s:\n        return 0\n    else:\n        m = 0\n        sum = 0\n        while sum < s:\n            sum += int(n[j])\n            j += 1\n        if j - 1 == 0:\n            m = m * 10 + 1\n            for i in range(k):\n                m = m * 10 + 0\n        else:\n            for i in range(j - 2):\n                m = m * 10 + int(n[i])\n            m = m * 10 + (int(n[j - 2]) + 1)\n            for i in range(k - j + 1):\n                m = m * 10 + 0\n        return m - int(n)\nq = []\nt = int(input())\nfor _ in range(t):\n    l = list(input().split())\n    s = int(l[1])\n    n = l[0]\n    q.append(checkSum(n, s))\nfor i in q:\n    print(i)", "t = int(input())\n\ndef get_digit_sum(num):\n    sum = 0\n    num_str = str(num)\n    for digit in num_str:\n        sum += int(digit)\n    return sum\n\ndef ans(num, s):\n    sum = get_digit_sum(num)\n    if sum <= s:\n        return 0\n    num_str = str(num)[::-1]\n    moves = 0\n    add_one = False\n    factor = 1\n    for letter in num_str:\n        digit = int(letter) + add_one\n        sum = sum - digit + 1\n        moves = moves + (10 - digit) * factor\n        if sum <= s:\n            return moves\n        add_one = True\n        factor *= 10\nwhile t:\n    (num, s) = list(map(int, input().split(' ')))\n    print(ans(num, s))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    n = list(map(int, list(str(n))))\n    if sum(n) > s:\n        for i in range(1, len(n) + 1):\n            if sum(n[:i]) >= s:\n                d = i\n                break\n        if sum(n[:d]) == s and sum(n[d:]) == 0:\n            print(0)\n        elif sum(n[:d]) == s and sum(n[d:]) != 0:\n            print(10 ** len(n[d - 1:]) - int(''.join(list(map(str, n[d - 1:])))))\n        elif sum(n[:d]) > s and sum(n[:d - 1]) < s:\n            print(10 ** len(n[d - 1:]) - int(''.join(map(str, n[d - 1:]))))\n    else:\n        print(0)", "t = int(input())\nl = []\nfor _ in range(t):\n    (n, s) = input().split()\n    (ans, k, cur, f, n1) = (0, 0, 0, False, '')\n    for p in range(len(n)):\n        k += int(n[p])\n    if k <= int(s):\n        l.append(0)\n    else:\n        for i in range(len(n)):\n            if not f:\n                cur += int(n[i])\n                if cur >= int(s):\n                    n1 = n[i:len(n)]\n                    f = True\n        if f:\n            r = 10 ** len(n1)\n            ans = r - int(n1)\n        l.append(ans)\nfor i in l:\n    print(i)", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().strip().split(' '))\n    n = str(n)\n    n1 = int(n)\n    l = len(n)\n    c = 0\n    s1 = 0\n    for j in range(l):\n        s1 += int(n[j])\n        if s1 < s:\n            c += 1\n    if s1 <= s:\n        print('0')\n    else:\n        l -= c\n        k = 10 ** l - n1 % 10 ** l\n        print(k)", "def get_min(n, s):\n    str_n = str(n)\n    d = len(str_n)\n    count = 0\n    sum_digits = sum([int(i) for i in str_n])\n    if sum_digits <= s:\n        return 0\n    for i in range(d):\n        count += int(str_n[i])\n        if count > s or (count == s and sum_digits > s):\n            return 10 ** (d - i) - int(str_n[i:])\nt = int(input())\nfor i in range(t):\n    (n, s) = list(map(int, input().split()))\n    print(get_min(n, s))", "for i in range(int(input())):\n    (n, s) = map(int, input().split())\n    l = list(map(int, list(str(n))))\n    if sum(l) <= s:\n        print(0)\n        continue\n    i = 0\n    q = l[0]\n    while q < s:\n        i += 1\n        q += l[i]\n    req = len(l[i:])\n    x = ''.join(map(str, l[i:]))\n    req_num = int(x)\n    mov = 10 ** req - req_num\n    print(mov)", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(str, input().split())\n    s = int(s)\n    flag = 0\n    p = len(n)\n    sum = 0\n    for i in range(p):\n        sum = sum + int(n[i])\n        if sum > s:\n            flag = 1\n            break\n        else:\n            pass\n    if flag == 0:\n        print(0)\n    elif flag == 1 and int(n[0]) >= s:\n        ans = int(str(1) + str(0) * p)\n        print(ans - int(n))\n    else:\n        sum = sum + 1\n        while sum > s and i > 0:\n            sum = sum - int(n[i])\n            i = i - 1\n        while n[i] == '9':\n            i = i - 1\n            if i == -1:\n                break\n        if i == -1:\n            ans = int(str(1) + str(0) * p)\n            print(ans - int(n))\n        else:\n            ans = int(n[:i] + str(int(n[i]) + 1) + str(0) * (p - i - 1))\n            print(ans - int(n))", "import sys\nimport math\nfrom bisect import bisect_right as br\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = int_arr()\n    sm = 0\n    i = 0\n    st = str(n)\n    l = len(st)\n    flag = 0\n    s = 0\n    for p in st:\n        s += int(p)\n    if s <= k:\n        print(0)\n        continue\n    elif l == 1:\n        print(10 - n)\n        continue\n    elif int(st[0]) + 1 > k:\n        print(int(str(1) + '0' * l) - n)\n        continue\n    while i < l:\n        if sm + int(st[i]) + 1 > k:\n            big = int(str(int(st[i - 1]) + 1) + '0' * (l - i))\n            diff = big - int(st[i - 1:])\n            print(diff)\n            break\n        else:\n            sm += int(st[i])\n            i += 1", "import math\nimport decimal\n\ndef sumDigit(x):\n    sum = 0\n    for i in x:\n        sum += int(i)\n    return sum\nt = input()\nt = int(t)\nlist = []\nfor i in range(t):\n    (n, s) = input().split()\n    n = int(n)\n    s = int(s)\n    thDigit = 0\n    sum = 0\n    strn = str(n)\n    leng = len(strn)\n    while sum < s and leng - 1 >= thDigit:\n        sum = sum + int(strn[thDigit])\n        thDigit = thDigit + 1\n    if sumDigit(strn) <= s:\n        list.append(0)\n        print(0)\n    else:\n        sum = sum - int(strn[thDigit - 1])\n        d1 = decimal.Decimal(n)\n        d2 = decimal.Decimal(10 ** (leng - thDigit + 1))\n        d = decimal.Decimal(d1 / d2)\n        rounded = d.quantize(1, decimal.ROUND_CEILING)\n        rounded = rounded * 10 ** (leng - thDigit + 1)\n        print(rounded - n)\n        list.append(rounded - n)", "for _ in range(int(input())):\n    (d, s) = input().split()\n    n = [int(i) for i in d]\n    s = int(s)\n    if sum(n) <= s:\n        print(0)\n    else:\n        c = 0\n        t = len(n)\n        for i in range(len(n)):\n            if c + n[i] < s:\n                c += n[i]\n            else:\n                break\n        f = d[i:]\n        t = t - i\n        g = 10 ** t - int(f)\n        print(g)", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\nfrom sys import stdin, stdout, setrecursionlimit\nfrom math import ceil\n\ndef sol():\n    (x, n) = rrm()\n    s = str(x)[::-1]\n    sm = 0\n    z = ord('0')\n    for c in s:\n        sm += ord(c) - z\n    if sm <= n:\n        print(0)\n        return\n    n = sm - n\n    res = 0\n    zz = z + 10\n    m = 1\n    prev = 0\n    for c in s:\n        res += m * (zz - ord(c) - prev)\n        n -= ord(c) - z\n        prev = 1\n        if n + prev <= 0:\n            print(res)\n            return\n        m *= 10\n    return\n\ndef main():\n    T = rri()\n    for t in range(1, T + 1):\n        ans = sol()\nmain()", "def calc(n, s):\n    total = 0\n    for i in range(len(n)):\n        total += int(n[i])\n        if total >= s:\n            rem = n[i:len(n)]\n            break\n    main = '1' + '0' * len(rem)\n    return int(main) - int(rem)\nfor ii in range(int(input())):\n    (n, s) = map(int, input().split())\n    n = str(n)\n    total = 0\n    for i in range(len(n)):\n        total += int(n[i])\n    if total <= s:\n        print(0)\n    else:\n        print(calc(n, s))", "for _ in range(int(input())):\n    (n, s) = input().split()\n    s = int(s)\n    c = 0\n    for i in n:\n        c += int(i)\n    if c <= s:\n        print(0)\n    else:\n        t = len(n)\n        temp = 0\n        for i in range(t):\n            temp += int(n[i])\n            if temp < s:\n                continue\n            else:\n                new = n[i:]\n                print(10 ** len(new) - int(new))\n                break", "for _ in range(int(input())):\n    (n, s) = map(int, input().split(' '))\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while i < len(digits) and sum(digits[:i]) < s:\n        i += 1\n    p = 10 ** (len(digits) - i + 1)\n    print(p - n % p)", "import sys\n\ndef solve(n, s):\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        return 0\n    if digits[0] > s:\n        targ = int('1' + '0' * len(digits))\n        return targ - n\n    lft = [0]\n    nd = 0\n    while sum(lft) < s:\n        lft.append(digits[nd])\n        nd += 1\n    if True:\n        ith = nd - 1\n        while lft[ith] == 9:\n            ith -= 1\n        lft[ith] += 1\n        lft = lft[:ith + 1]\n        lft.extend([0] * (len(digits) - ith))\n        targ = int(''.join([str(x) for x in lft]))\n    return targ - n\nIN = [x.strip() for x in sys.stdin.readlines()]\nT = int(IN[0])\ncur = 0\nfor ti in range(T):\n    (n, s) = [int(x) for x in IN[cur + 1].split(' ')]\n    res = solve(n, s)\n    print(res)\n    cur += 1", "def res(n, s):\n    a = str(n)\n    b = str(s)\n    n_len = len(a)\n    s_len = len(b)\n    san = n\n    sandar = []\n    for i in range(n_len):\n        sandar.append(san % 10)\n        san = san // 10\n    sum_n = sum(sandar)\n    if sum_n <= s:\n        return 0\n    else:\n        k = s\n        total = 0\n        for i in range(n_len):\n            if sandar[n_len - 1 - i] < k:\n                k = k - sandar[n_len - 1 - i]\n            elif n_len - i >= n_len:\n                return 10 ** (n_len - s_len + 1) - n\n            else:\n                sandar[n_len - i] += 1\n                for j in range(i):\n                    total += sandar[n_len - 1 - j] * 10 ** (n_len - 1 - j)\n                return total - n\nn = int(input())\nreuslt = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    reuslt.append(res(data[0], data[1]))\nfor i in range(n):\n    print(reuslt[i])", "def moves(n, k):\n    total = 0\n    for j in range(len(n)):\n        total += int(n[j])\n    if total <= k:\n        return 0\n    total = 0\n    n = '0' + n\n    i = 1\n    while total + int(n[i]) < k:\n        total += int(n[i])\n        i += 1\n    num = (int(n[:i]) + 1) * 10 ** (len(n) - i)\n    return num - int(n)\nT = int(input())\nfor t in range(T):\n    (n, k) = input().split(' ')\n    print(moves(n, int(k)))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    s = int(s)\n    m = '0' + n\n    l = len(m)\n    i = j = t = 0\n    if sum(map(int, n)) > s:\n        while i < l and t + int(m[i]) < s:\n            j = (j, i)[m[i] < '9']\n            t += int(m[i])\n            i += 1\n        if i < l:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (l - j - 1)\n    print(int(m) - int(n))", "for s in [*open(0)][1:]:\n    (n, s) = s.split()\n    m = '0' + n\n    k = sum(map(int, n))\n    i = j = t = 0\n    for x in m:\n        t += int(x)\n        if t >= int(s) < k:\n            m = m[:j] + chr(ord(m[j]) + 1) + '0' * (len(m) - j - 1)\n            break\n        j = (j, i)[m[i] < '9']\n        i += 1\n    print(int(m) - int(n))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    l = [x for x in str(n)]\n    su = sum([int(x) for x in str(n)])\n    ans = 0\n    c = 0\n    for i in range(len(l)):\n        c += int(l[i])\n        if c >= s and su > s:\n            p = 10 ** (len(l) - i)\n            ans = p - int(''.join(l[i:]))\n            break\n    print(ans)", "t = int(input())\nz = []\nfor i in range(t):\n    z.append(input())\nfor i in range(t):\n    (n, s) = (z[i].split()[0], z[i].split()[1])\n    dsum = 0\n    for i in range(len(n)):\n        dsum += int(n[i])\n    if dsum <= int(s):\n        print(0)\n    else:\n        i = 0\n        isum = 0\n        while i < len(n):\n            isum += int(n[i])\n            if isum < int(s):\n                i += 1\n            else:\n                break\n        no = pow(10, len(n) - i) - int(n[i:len(n)])\n        print(no)", "def sumofdigits(n):\n    n = str(n)\n    sum1 = 0\n    for i in n:\n        sum1 += int(i)\n    return sum1\nt = int(input())\nfor i in range(t):\n    (n, s) = list(map(int, input().split()))\n    value = sumofdigits(n)\n    if value <= s:\n        print(0)\n    elif s == 1:\n        tempn = n\n        solo = len(str(n))\n        d = pow(10, solo)\n        print(d - tempn)\n    else:\n        tempn = str(n)\n        sum1 = 1\n        for i in range(len(tempn)):\n            sum1 += int(tempn[i])\n            if sum1 > s:\n                flag = i\n                break\n        l = len(tempn) - flag\n        p = pow(10, l)\n        arr = tempn[flag:]\n        print(p - int(arr))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    str1 = str(n)\n    s1 = 0\n    s2 = 0\n    for j in str1:\n        s2 = s2 + int(j)\n    if s2 <= s:\n        print(0)\n        continue\n    for i in range(len(str1)):\n        s1 += int(str1[i])\n        if s1 < s:\n            continue\n        else:\n            ans = str1[i:]\n            print(10 ** len(ans) - int(ans))\n            break", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    temp = str(a)\n    c = b\n    i = 0\n    if sum([int(x) for x in temp]) <= b:\n        print(0)\n        continue\n    while c > int(temp[i]):\n        c -= int(temp[i])\n        i += 1\n    if i > 0:\n        no = str(int(temp[:i]) + 1) + (len(temp) - i) * '0'\n    else:\n        no = '1' + len(temp) * '0'\n    print(int(no) - a)", "from math import *\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    if sum(map(int, str(a))) <= b:\n        print(0)\n        continue\n    if int(str(a)[0]) < b:\n        s = int(str(a)[0])\n        for i in range(len(str(a)) - 1):\n            s += int(str(a)[i + 1])\n            if s >= b:\n                print(10 ** (len(str(a)) - i - 1) - a % 10 ** (len(str(a)) - i - 1))\n                break\n        else:\n            print(0)\n    else:\n        print(10 ** len(str(a)) - a)", "def check(n, b):\n    (s, x) = (str(n), 0)\n    for i in s:\n        x += int(i)\n    if x <= b:\n        return 1\n    else:\n        return 0\nfor p in range(int(input())):\n    (a, b) = map(int, input().split())\n    if check(a, b):\n        print(0)\n    elif int(str(a)[0]) < b:\n        s = int(str(a)[0])\n        for i in range(len(str(a)) - 1):\n            s += int(str(a)[i + 1])\n            if s >= b:\n                print(10 ** (len(str(a)) - i - 1) - a % 10 ** (len(str(a)) - i - 1))\n                break\n        else:\n            print(0)\n    else:\n        print(10 ** len(str(a)) - a)", "def sum1(a, b):\n    s = str(a)\n    r = 0\n    index = 0\n    for i in s:\n        if r + int(i) >= b:\n            return index\n        r += int(i)\n        index += 1\n    return -1\n\ndef sum2(a):\n    s = str(a)\n    r = 0\n    for i in s:\n        r += int(i)\n    return r\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = sum2(a)\n    if s > b:\n        index = sum1(a, b)\n        k = len(str(a)) - index\n        if index == 0:\n            print(10 ** k - a)\n        else:\n            abc = int(str(int(str(a)[:index]) + 1) + (len(str(a)) - index) * '0')\n            print(abc - a)\n    else:\n        print(0)", "for _ in range(int(input())):\n    (n, s) = map(str, input().split())\n    s = int(s)\n    l = [0, int(n[0])]\n    for i in range(1, len(n)):\n        l.append(l[-1] + int(n[i]))\n        if l[-1] > s:\n            break\n    if l[-1] <= s:\n        print(0)\n    else:\n        i = len(l) - 1\n        while l[i] >= s:\n            i -= 1\n        if i == 0:\n            thing = 1\n        else:\n            thing = int(n[:i]) + 1\n        thing *= 10 ** (len(n) - i)\n        print(thing - int(n))", "t = int(input())\nfor _ in range(t):\n    lst = input().split()\n    s = int(lst[1])\n    n = int(lst[0])\n    st = lst[0]\n    sum1 = 0\n    pos = -1\n    sum2 = 0\n    for i in st:\n        sum2 += int(i)\n    if sum2 <= s:\n        print(0)\n        continue\n    for i in range(len(st)):\n        sum1 += int(st[i])\n        if sum1 >= s:\n            pos = i\n            break\n    if pos == -1:\n        print(0)\n        continue\n    str2 = ''\n    str2 = st[0:pos]\n    str2 = str2 + '0' * (len(st) - pos)\n    if pos == 0:\n        str2 = '1' + str2\n    elif str2[pos - 1] == '9':\n        str3 = '1'\n        str3 = str3 + '0' * (len(st) - pos)\n        str2 = int(str2) + int(str3)\n    else:\n        temp = str(int(st[pos - 1]) + 1)\n        str2 = str2[0:pos - 1] + temp + str2[pos:]\n    print(int(str2) - n)", "t = int(input())\nfor _ in range(t):\n    (n, s) = list(map(int, input().split(' ')))\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while i < len(digits) and sum(digits[:i]) < s:\n        i += 1\n    pow = 10 ** (len(digits) - i + 1)\n    print(pow - n % pow)", "from sys import stdin\n\nclass Problem:\n\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n        self.stack = []\n\n    def solve(self):\n        number = '0' + str(self.n)\n        current_sum = 0\n        for digit in number:\n            d = int(digit)\n            self.stack.append(d)\n            current_sum += d\n        adds = 0\n        ten = 1\n        while current_sum > self.s:\n            d = self.stack.pop()\n            if d == 0:\n                ten = ten * 10\n                continue\n            if d == 10:\n                current_sum = current_sum - 9\n                self.stack[-1] += 1\n            else:\n                current_sum = current_sum - d\n                adds = adds + ten * (10 - d)\n                current_sum = current_sum + 1\n                self.stack[-1] += 1\n            ten = ten * 10\n        return adds\ncases = int(stdin.readline())\nfor test in range(cases):\n    (n, s) = map(int, stdin.readline().split())\n    ans = Problem(n, s).solve()\n    print(ans)", "from sys import stdin\n\nclass Problem:\n\n    def __init__(self, n, s):\n        self.n = n\n        self.s = s\n        self.stack = []\n\n    def solve(self):\n        number = '0' + str(self.n)\n        current_sum = 0\n        for digit in number:\n            d = int(digit)\n            self.stack.append(d)\n            current_sum += d\n        adds = 0\n        ten = 1\n        while current_sum > self.s:\n            try:\n                d = self.stack.pop()\n                if d == 0:\n                    continue\n                if d == 10:\n                    current_sum = current_sum - 9\n                else:\n                    current_sum = current_sum - d + 1\n                    adds = adds + ten * (10 - d)\n                self.stack[-1] += 1\n            finally:\n                ten = ten * 10\n        return adds\ncases = int(stdin.readline())\nfor test in range(cases):\n    (n, s) = map(int, stdin.readline().split())\n    ans = Problem(n, s).solve()\n    print(ans)", "for _ in range(int(input())):\n    (lst, s) = input().split()\n    (lst, s) = (list(lst), int(s))\n    summ = 0\n    for i in lst:\n        summ += int(i)\n    length = len(lst)\n    if summ <= s:\n        count = 0\n    else:\n        for i in range(length):\n            s -= int(lst[i])\n            summ -= int(lst[i])\n            if s <= 0 and summ >= 0:\n                remaining = ''.join(lst[i:length])\n                val = '1' + '0' * (length - i)\n                count = int(val) - int(remaining)\n                break\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, s) = [int(k) for k in input().split()]\n    c = [int(k) for k in str(n)]\n    res = 0\n    while c and sum(c) > s:\n        c.pop()\n        res += 1\n        while c and c[-1] == 9:\n            c.pop()\n            res += 1\n        if c:\n            c[-1] += 1\n    if not c:\n        print(int('1' + len(str(n)) * '0') - n)\n    else:\n        print(int(''.join([str(k) for k in c]) + '0' * res) - n)", "t = int(input())\nfor _ in range(t):\n    (n, s) = list(map(int, input().split(' ')))\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while i < len(digits) and sum(digits[:i]) < s:\n        i += 1\n    pow = 10 ** (len(digits) - i + 1)\n    print(pow - n % pow)", "tc = int(input())\nwhile tc:\n    (num_str, n) = input().split()\n    n = int(n)\n    digSum = sum(map(int, num_str))\n    if digSum <= n:\n        print(0)\n    else:\n        tempSum = 0\n        for (i, d) in enumerate(num_str):\n            if tempSum + int(d) < n:\n                tempSum += int(d)\n            else:\n                break\n        print(10 ** len(num_str[i:]) - int(num_str[i:]))\n    tc -= 1", "for _ in range(int(input())):\n    (n, s) = map(int, input().split(' '))\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while i < len(digits) and sum(digits[:i]) < s:\n        i += 1\n    p = 10 ** (len(digits) - i + 1)\n    print(p - n % p)", "t = int(input())\nfor _ in range(t):\n    (n, s) = input().split()\n    s = int(s)\n    n = [int(x) for x in n]\n    if sum(n) <= s:\n        print(0)\n    else:\n        count = 0\n        for i in range(len(n)):\n            if s >= n[i] + 1 or (i == len(n) - 1 and s >= n[i]):\n                s -= n[i]\n                count += 1\n            else:\n                break\n        s = ''\n        for x in n[count:]:\n            s += str(x)\n        print(10 ** len(n[count:]) - int(s))", "def sum(n):\n    s = str(n)\n    ans = 0\n    for i in s:\n        ans += int(i)\n    return ans\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    if sum(n) <= s:\n        print(0)\n    else:\n        num = ''\n        sm = 0\n        for i in str(n):\n            sm += int(i)\n            if sm >= s:\n                if num == '':\n                    num = '1'\n                    while int(num) < n:\n                        num = num + '0'\n                    break\n                else:\n                    num = str(int(num) + 1)\n                    while int(num) < n:\n                        num = num + '0'\n                    break\n            else:\n                num += i\n        print(int(num) - n)", "for _ in range(int(input())):\n    (n, x) = input().split()\n    x = int(x)\n    n = list(map(str, str(n)))\n    z = list(map(int, n))\n    if sum(z) <= x:\n        print(0)\n    else:\n        z = 0\n        for i in range(len(n)):\n            z += int(n[i])\n            if z >= x:\n                break\n        n = n[i:]\n        z = ''.join(n)\n        x = len(z)\n        z = int(z)\n        print(10 ** x - z)", "def sum(n):\n    s = str(n)\n    ans = 0\n    for i in s:\n        ans += int(i)\n    return ans\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    if sum(n) <= s:\n        print(0)\n    else:\n        num = ''\n        sm = 0\n        for i in str(n):\n            sm += int(i)\n            if sm >= s:\n                if num == '':\n                    num = '1'\n                    while int(num) < n:\n                        num = num + '0'\n                    break\n                else:\n                    num = str(int(num) + 1)\n                    while int(num) < n:\n                        num = num + '0'\n                    break\n            else:\n                num += i\n        print(int(num) - n)", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, s) = map(int, input().split())\n    n = str(n)\n    summ = 0\n    for i in range(len(n)):\n        summ += int(n[i])\n    if summ <= s:\n        print(0)\n    else:\n        summ = 0\n        for i in range(len(n)):\n            summ += int(n[i])\n            if summ >= s:\n                n2 = n[i:len(n)]\n                break\n        minusstr = '1'\n        minusstr += '0' * len(n2)\n        n2 = int(n2)\n        print(int(minusstr) - n2)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split(' '))\n    digits = [int(x) for x in str(n)]\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while i < len(digits) and sum(digits[:i]) < s:\n        i += 1\n    p = 10 ** (len(digits) - i + 1)\n    print(p - n % p)", "t = int(input())\nfor _ in range(t):\n    (n, s) = tuple([int(i) for i in input().split()])\n    cs = sum([int(i) for i in str(n)])\n    if cs <= s:\n        print(0)\n        continue\n    digs = 0\n    for i in str(n)[::-1]:\n        cs -= int(i)\n        digs += 1\n        if cs + 1 <= s:\n            break\n    val = 10 ** digs - n % 10 ** digs\n    print(val)", "t = int(input())\nwhile t > 0:\n    (s, sum) = map(str, input().split())\n    sum = int(sum)\n    tsum = 0\n    n = len(s)\n    num = 0\n    q = 0\n    for i in range(n):\n        q += int(s[i])\n    if q <= sum:\n        print(0)\n        t -= 1\n        continue\n    for i in range(n):\n        if num != 0:\n            break\n        tsum = tsum + ord(s[i]) - 48\n        if tsum >= sum:\n            if i > 0:\n                ans = (int(s[i - 1]) + 1) * 10 ** (n - i) - int(s[i - 1:])\n                print(ans)\n                num += 1\n            else:\n                ans = 10 ** n - int(s)\n                print(ans)\n                num += 1\n    if num == 0:\n        print(0)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    T = 0\n    (n, b) = [str(x) for x in input().split()]\n    s = int(b)\n    if len(n) == 1:\n        if int(n) > s:\n            print(10 - int(n))\n        else:\n            print(0)\n        continue\n    sm = 0\n    f = 0\n    k = 0\n    for j in range(len(n)):\n        sm += int(n[j])\n        k = j\n        if sm >= s:\n            break\n    for j in range(len(n)):\n        f += int(n[j])\n    if f <= s:\n        print(0)\n        continue\n    moves = 0\n    stri = ''\n    if k == 0:\n        moves = 1\n        for j in range(len(n)):\n            moves *= 10\n        print(moves - int(n))\n    else:\n        for j in range(len(n)):\n            if j == k - 1:\n                stri += str(1)\n            elif j >= k:\n                stri += str(0)\n        print(int(stri) - int(n[k:]))", "t = int(input())\nwhile t:\n    (n, s) = input().split()\n    s = int(s)\n    li = list(n)\n    (to, p, total) = (0, 0, 0)\n    for i in range(len(li)):\n        total = total + int(li[i])\n    for i in range(len(li)):\n        to = to + int(li[i])\n        if to >= s:\n            p = i + 1\n            break\n    if total <= int(s):\n        t -= 1\n        print(0)\n        continue\n    st = '0' * (len(n) - p + 1)\n    st = '1' + st\n    n = n[p - 1:]\n    print(int(st) - int(n))\n    t -= 1", "for _ in range(int(input())):\n    (n, s) = list(map(int, input().split()))\n    ns = str(n)\n    dsum = 0\n    for d in ns:\n        dsum += int(d)\n    if dsum <= s:\n        print(0)\n        continue\n    digits = 0\n    dsum = 0\n    for d in ns:\n        d = int(d)\n        if dsum + d > s - 1:\n            break\n        digits += 1\n        dsum += d\n    num = ns[0:digits] if digits else '0'\n    num = str(int(num) + 1)\n    num += (len(ns) - digits) * '0'\n    print(int(num) - n)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    string_n = str(n)\n    string_s = str(s)\n    size_n = len(string_n)\n    size_s = len(string_n)\n    m = size_n - size_s\n    mov = 0\n    for i in string_n:\n        mov += int(i)\n    if s >= n or mov <= s:\n        print(0)\n    else:\n        f = string_n[0]\n        fs = string_s[0]\n        f_plus_1 = str(int(f) + 1)\n        (x, y) = (1, int(string_n[0]))\n        while y < s:\n            y += int(string_n[x])\n            x += 1\n        if x == 1 and int(f) >= s:\n            ans = int('1' + '0' * size_n) - n\n        else:\n            ans = int(str(int(string_n[:x - 1]) + 1) + '0' * (size_n - x + 1)) - n\n        print(ans)", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split(' '))\nt = read_int()\nfor case_num in range(t):\n    (n, s) = read_ints()\n    a = [0] + [int(i) for i in str(n)]\n    ds = sum(a)\n    cost = 0\n    idx = len(a) - 1\n    radix = 1\n    while ds > s:\n        if a[idx] > 0:\n            cost += (10 - a[idx]) * radix\n            ds -= a[idx]\n            a[idx] = 0\n            ds += 1\n            a[idx - 1] += 1\n            i = idx - 1\n            while a[i] >= 10:\n                a[i - 1] += 1\n                a[i] -= 10\n                ds -= 9\n                i -= 1\n        radix *= 10\n        idx -= 1\n    print(cost)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    ans = ''\n    strn = str(n)\n    sumn = 0\n    for i in strn:\n        sumn += int(i)\n    if sumn <= s:\n        print(0)\n    else:\n        k = 0\n        tot = 0\n        for i in strn:\n            k += int(i)\n            if k + 1 > s:\n                break\n            tot += 1\n            ans += i\n        if ans:\n            k = int(ans) + 1\n        if not tot:\n            print(10 ** len(strn) - n)\n        else:\n            print(k * 10 ** (len(strn) - tot) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    t = n\n    a = []\n    while t:\n        a.append(t % 10)\n        t //= 10\n    a = a[::-1]\n    ss = sum(a)\n    if k >= ss:\n        print(0)\n    elif a[0] > k:\n        print(10 ** len(a) - n)\n    else:\n        i = 0\n        b = 0\n        while b + a[i] < k:\n            b += a[i]\n            i += 1\n        t = i\n        i -= 1\n        while i >= 0:\n            if a[i] != 9:\n                a[i] += 1\n                break\n            i -= 1\n        if i == -1:\n            print(10 ** len(a) - n)\n        else:\n            ss = 0\n            for j in range(i + 1, len(a)):\n                a[j] = 0\n            for i in a:\n                ss = ss * 10 + i\n            print(ss - n)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlst():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve(n, s):\n    d = list(map(int, str(n)))\n    d.insert(0, 0)\n    if sum(d) <= s:\n        return 0\n    for i in range(len(d) - 1, 0, -1):\n        if sum(d[:i]) + 1 <= s:\n            target = d[:]\n            for j in range(i, len(d) - 1):\n                target[j] = 0\n            target[i - 1] = (target[i - 1] + 1) % 10\n            if target[i - 1] == 0:\n                target[i - 2] += 1\n            break\n    t = 0\n    for i in range(0, len(d) - 1):\n        t += target[i] * pow(10, len(d) - 1 - i)\n    return t - n\nn = inp()\nfor _ in range(n):\n    (n, s) = invr()\n    print(solve(n, s))", "def getSum(n):\n    sum1 = 0\n    while n != 0:\n        sum1 = sum1 + 1\n        n = n // 10\n    return sum1\n\ndef getNearest(n):\n    c = 10 - n % 10\n    c = c + n\n    return c\n\ndef getSum1(n):\n    sum = 0\n    while n != 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\nc = int(input())\nfor i in range(c):\n    (a, b) = [int(x) for x in input().split()]\n    res = list(map(int, str(a)))\n    if getSum1(a) <= b:\n        print('0')\n    else:\n        e = 0\n        g = 0\n        h = 0\n        f = len(res)\n        for i in range(f):\n            e = e * 10 + res[i]\n            h = i\n            g = g + res[i]\n            if g >= b:\n                break\n        e = getNearest(e)\n        f = f - (h + 1)\n        e = e * 10 ** f\n        e = e - a\n        print(e)", "def operation(pairNum):\n    (n, s) = pairNum\n    s = int(s)\n    k = 0\n    allDigits = list(n)\n    revDigits = allDigits[::-1]\n    revDigits = list(map(int, revDigits))\n    revDigits.append(0)\n    i = 0\n    while i <= len(revDigits) - 2 and sum(revDigits) > s:\n        if revDigits[i] == 10:\n            revDigits[i] = 0\n            revDigits[i + 1] += 1\n        else:\n            k += (10 - revDigits[i]) * 10 ** i\n            revDigits[i] = 0\n            revDigits[i + 1] += 1\n        i += 1\n    return k\nt = int(input())\nlistResults = []\nfor i in range(t):\n    pairNum = input().split()\n    result = operation(pairNum)\n    listResults.append(result)\nfor i in listResults:\n    print(i)", "def solution(str_n, s):\n    S = 0\n    for j in str_n:\n        S = S + int(j)\n    if S <= s:\n        print(0)\n    else:\n        S = 0\n        p = 0\n        while p < len(str_n) and S < s:\n            S = S + int(str_n[p])\n            p = p + 1\n        p = len(str_n) - p + 1\n        solution = 1\n        for i in range(p):\n            solution = solution + (9 - int(str_n[len(str_n) - i - 1])) * 10 ** i\n        print(solution)\nfor j in range(int(input())):\n    (str_n, str_s) = input().split()\n    solution(str_n, int(str_s))", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    n = '{0:019d}'.format(n)\n    if sum([int(x) for x in n]) <= s:\n        print(0)\n        continue\n    cnt = 0\n    for (i, x) in enumerate(n):\n        if cnt + int(x) + 1 <= s:\n            cnt += int(x)\n        else:\n            break\n    print((int(n[i - 1]) + 1) * 10 ** (19 - i) - int(n[i - 1:]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    ns = str(n)\n    l = len(ns)\n    i = 0\n    sum_ = 0\n    p = n\n    a = []\n    while p > 0:\n        a.append(p % 10)\n        p //= 10\n    a.reverse()\n    sum_ = sum(a)\n    if sum_ <= s:\n        print('0')\n        continue\n    m = 0\n    i = 0\n    while m + a[i] < s:\n        m += a[i]\n        i += 1\n    j = 0\n    ans = 0\n    while j < i:\n        ans = ans * 10 + a[j]\n        j += 1\n    ans += 1\n    ans = ans * 10 ** (l - i)\n    print(ans - n)", "t = int(input())\nfor i in range(t):\n    (num, s) = input().split()\n    s = int(s)\n    ss = 0\n    l = len(num)\n    for e in num:\n        ss += int(e)\n    if ss <= s:\n        print('0')\n        continue\n    if int(num[0]) >= s:\n        tt = int('1' + '0' * l)\n        print(tt - int(num))\n        continue\n    i = 0\n    temp = 0\n    while i < l and temp + int(num[i]) < s:\n        temp += int(num[i])\n        i += 1\n    tt = int(num[:i])\n    tt += 1\n    tt *= 10 ** (l - i)\n    print(tt - int(num))", "def to_digits(n):\n    return list(map(int, str(n)))\n\ndef digits_to_int(digits):\n    return int(''.join(map(str, digits)))\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    digits = [0] + to_digits(n)\n    if sum(digits) <= s:\n        print(0)\n        continue\n    i = 1\n    while sum(digits[:i]) < s:\n        i += 1\n    new_n = digits_to_int(digits[:i - 1] + [0] * (len(digits) - i + 1))\n    new_n += 10 ** (len(digits) - i + 1)\n    print(new_n - n)", "import sys\nimport math\nimport collections\nimport bisect\nimport itertools\nimport decimal\nimport copy\nINF = 10 ** 20\nni = lambda : int(sys.stdin.readline().rstrip())\nns = lambda : map(int, sys.stdin.readline().rstrip().split())\nna = lambda : list(map(int, sys.stdin.readline().rstrip().split()))\nna1 = lambda : list(map(lambda x: int(x) - 1, sys.stdin.readline().rstrip().split()))\n\ndef main():\n    t = ni()\n    for _ in range(t):\n        (n, s) = ns()\n        a = [int(i) for i in list(str(n))]\n        total = sum(a)\n        a.reverse()\n        a.append(0)\n        ar = a.copy()\n        if total > s:\n            ans = 0\n            for i in range(len(ar)):\n                if ar[i] == 10:\n                    total -= a[i]\n                    ar[i + 1] += 1\n                    if total + 1 <= s:\n                        total += 1\n                        break\n                elif ar[i] > 0:\n                    total -= a[i]\n                    ar[i + 1] += 1\n                    ans += pow(10, i) * (10 - ar[i])\n                    if total + 1 <= s:\n                        total += 1\n                        break\n            print(ans)\n        else:\n            print(0)\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    v = 0\n    n1 = n\n    cnt = 0\n    while n > 0:\n        r = n % 10\n        v += r\n        cnt += 1\n        n = n // 10\n    if v <= s:\n        print(0)\n    else:\n        n2 = list(str(n1))\n        n2.reverse()\n        n2 = ''.join(n2)\n        n2 = int(n2)\n        c = 0\n        cnt1 = 0\n        while c < s:\n            r = n2 % 10\n            c += r\n            n2 = n2 // 10\n            cnt1 += 1\n        if c >= s:\n            cnt1 -= 1\n        cnt = cnt - cnt1\n        val = n1 // 10 ** cnt\n        val += 1\n        val = val * 10 ** cnt\n        print(val - n1)", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    m = str(n)\n    if sum([int(i) for i in m]) <= s:\n        print(0)\n    else:\n        lo = 0\n        p = 0\n        while int(m[lo]) + p < s:\n            p += int(m[lo])\n            lo += 1\n        l = len(m) - lo\n        x = m[:lo]\n        if x == '':\n            x = 0\n        else:\n            x = int(x)\n        n1 = x * 10 ** l + 10 ** l\n        print(n1 - n)", "from math import *\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    if sum(map(int, str(a))) <= b:\n        print(0)\n        continue\n    if int(str(a)[0]) < b:\n        s = int(str(a)[0])\n        for i in range(len(str(a)) - 1):\n            s += int(str(a)[i + 1])\n            if s >= b:\n                print(10 ** (len(str(a)) - i - 1) - a % 10 ** (len(str(a)) - i - 1))\n                break\n        else:\n            print(0)\n    else:\n        print(10 ** len(str(a)) - a)", "t = int(input())\nwhile t != 0:\n    (n1, n2) = map(str, input().split())\n    n2 = int(n2)\n    s = 0\n    ans = 0\n    for i in range(len(n1)):\n        if int(n1[i]) + s > n2:\n            t1 = int('1' + '0' * (len(n1) - i)) - int(n1[i:])\n            ans = t1\n            break\n        elif int(n1[i]) + s < n2:\n            s += int(n1[i])\n        else:\n            temp1 = '0' * (len(n1) - i - 1)\n            temp2 = n1[i + 1:]\n            if temp1 == temp2:\n                ans = 0\n                break\n            else:\n                t1 = int('1' + '0' * (len(n1) - i)) - int(n1[i:])\n                ans = t1\n                break\n    print(ans)\n    t -= 1", "def modify(l, p):\n    s = list(l)\n    for i in range(p, len(s)):\n        s[i] = '0'\n    p -= 1\n    ok = 1\n    while p >= 0:\n        if s[p] == '9' and ok == 1:\n            s[p] = '0'\n        else:\n            if ok == 1:\n                s[p] = chr(ord(s[p]) + 1)\n            else:\n                s[p] = s[p]\n            ok = 0\n        p -= 1\n    if s[0] == '0':\n        return '1' + ''.join(s)\n    return ''.join(s)\n\ndef tc():\n    (sn, ss) = [x for x in input().split(' ')]\n    n = int(sn)\n    s = int(ss)\n    suf = [0] * len(sn)\n    j = len(sn) - 2\n    while j >= 0:\n        suf[j] = max(suf[j + 1], ord(sn[j + 1]) - ord('0'))\n        j -= 1\n    cur = 0\n    for i in range(len(sn)):\n        cur += ord(sn[i]) - ord('0')\n        if cur + 1 > s and suf[i] > 0:\n            sn = modify(sn, i)\n            break\n        if cur > s:\n            sn = modify(sn, i)\n            break\n    print(int(sn) - n)\nt = int(input())\nfor _ in range(t):\n    tc()", "for _ in range(int(input())):\n    (n, s) = map(str, input().split())\n    s = int(s)\n    le = len(n)\n    su = 0\n    flag = 0\n    l = []\n    ans = 0\n    for i in n:\n        l.append(int(i))\n    if sum(l) <= s:\n        ans = 0\n        flag = 1\n    else:\n        for i in range(le):\n            if su + int(n[i]) < s:\n                su += int(n[i])\n            else:\n                st = n[i:]\n                ans = pow(10, le - i) - int(st)\n                flag = 1\n                break\n    if flag:\n        print(ans)\n    else:\n        print(0)", "from math import *\nfor ct in range(int(input())):\n    (n, s) = input().split()\n    s = int(s)\n    t1 = sum([int(i) for i in n])\n    if t1 <= s:\n        print(0)\n    else:\n        res = ''\n        soma = 0\n        for i in range(len(n)):\n            soma += int(n[i])\n            if soma >= s:\n                for j in range(i, len(n)):\n                    res += str(10 - int(n[j]) - 1)\n                break\n        print(int(res) + 1)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    n = str(n)\n    x = len(n)\n    z = 0\n    for i in range(x):\n        z += int(n[i])\n    if z <= s:\n        print('0')\n        continue\n    if x == 1:\n        print(10 - int(n[0]))\n        continue\n    i = 0\n    z = 0\n    while z < s and i < x:\n        z += int(n[i])\n        if z >= s:\n            break\n        i += 1\n    if i == 0:\n        p = '1' + '0' * x\n    else:\n        p = str(int(n[:i]) + 1) + '0' * (x - i)\n    print(int(p) - int(n))", "number = int(input())\ndata = list(map(int, input().split()))\nfor index in range(1, number, 1):\n    current = list(map(int, input().split()))\n    data.append(current[0])\n    data.append(current[1])\n\ndef devide(number):\n    array = []\n    while number > 0:\n        array.append(number % 10)\n        number = (number - number % 10) // 10\n    return array\n\ndef massiv(array):\n    sum = 0\n    for (pos, element) in enumerate(array):\n        sum += 10 ** (len(array) - pos - 1) * element\n    return sum\n\ndef partial(array):\n    num = massiv(array)\n    num = 10 ** len(array) - num\n    return num\n\ndef check(array):\n    sum = 0\n    for (pos, element) in enumerate(array):\n        sum += element\n    return sum\n\ndef func(number1, number2):\n    if number1 == number2:\n        print(0)\n    else:\n        array = devide(number1)\n        array.reverse()\n        if check(array) > number2:\n            counter = 0\n            value = 0\n            for (pos, element) in enumerate(array):\n                if element < number2:\n                    number2 -= element\n                elif counter == 0 and pos != 0:\n                    counter = 1\n                    array[pos - 1] = array[pos - 1] + 1\n                elif pos == 0 and element >= number2:\n                    value = 1\n                    answer = partial(array)\n                if counter == 1:\n                    array[pos] = 0\n            if value == 0:\n                answer = massiv(array)\n                print(answer - number1)\n            else:\n                print(answer)\n        else:\n            print(0)\nfor element in range(0, len(data), 2):\n    func(data[element], data[element + 1])", "p1 = int(input())\nfor p in range(p1):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    d = b\n    i = 0\n    e = None\n    c = 0\n    len_a = len(str(a))\n    while i < len_a:\n        d -= int(str(a)[i])\n        if d <= 0 and e is None:\n            e = i\n        if d < 0:\n            c = len_a - e\n            c = 10 ** c\n            c = c - int(str(a)[e:])\n            break\n        else:\n            i += 1\n    print(c)", "def digit_sum_count(n):\n    sum_of_digits = 0\n    for symbol in n:\n        sum_of_digits += int(symbol)\n    return sum_of_digits\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    n = str(n)\n    n = '0' + n\n    digit_sum = 0\n    next_num = ''\n    ds = digit_sum_count(n)\n    if ds > s:\n        for symbol in n:\n            if digit_sum + int(symbol) > s - 1:\n                digit_sum_bad = True\n                break\n            else:\n                digit_sum += int(symbol)\n                next_num += symbol\n        next_num_len = len(next_num)\n        next_num = str(int(next_num) + 1)\n        next_num += '0' * (len(n) - next_num_len)\n        print(int(next_num) - int(n))\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (n, s) = input().split()\n    n = [int(i) for i in list(n)]\n    s = int(s)\n    cursum = sum(n)\n    if cursum <= s:\n        print(0)\n    else:\n        n = n[::-1]\n        p = 1\n        cur = 0\n        gone = 0\n        for i in range(len(n)):\n            if n[i] == 0:\n                p *= 10\n                continue\n            cur += n[i] * p\n            gone += n[i]\n            p *= 10\n            if cursum - gone + 1 <= s:\n                print(p - cur)\n                break", "for _ in range(int(input())):\n    (n, s) = input().split()\n    s = int(s)\n    length = n.__len__()\n    summa = 0\n    for i in range(length):\n        summa += int(n[i])\n    if summa <= s:\n        print(0)\n        continue\n    summa = 0\n    cnt = 0\n    elem = 0\n    for i in range(length):\n        if summa + int(n[i]) >= s:\n            break\n        summa += int(n[i])\n        cnt += 1\n        elem = int(n[i])\n    start = str(elem)\n    res = str(elem + 1)\n    for i in range(cnt, length):\n        start += n[i]\n        res += '0'\n    print(int(res) - int(start))"]