["import sys\n\ndef lcmSolver(l, r):\n    x = l\n    y = 2 * l\n    if y > r:\n        return (-1, -1)\n    else:\n        return (x, y)\ncasos = sys.stdin.readline().rstrip('\\n')\nfor i in range(int(casos)):\n    numbero = sys.stdin.readline().rstrip('\\n').split(' ')\n    number = lcmSolver(int(numbero[0]), int(numbero[1]))\n    sys.stdout.write(str(number[0]) + ' ' + str(number[1]) + '\\n')", "for _ in [*open(0)][1:]:\n    (l, r) = map(int, _.split())\n    if 2 * l > r:\n        print('-1 -1')\n    else:\n        print(f'{l} {2 * l}')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if r >= l * 2:\n        print(l, l * 2)\n    else:\n        print(-1, -1)", "import sys\n\ndef lcmSolver(l, r):\n    x = l\n    y = 2 * l\n    if y > r:\n        return (-1, -1)\n    else:\n        return (x, y)\ncasos = sys.stdin.readline().rstrip('\\n')\nfor i in range(int(casos)):\n    numbero = sys.stdin.readline().rstrip('\\n').split(' ')\n    number = lcmSolver(int(numbero[0]), int(numbero[1]))\n    sys.stdout.write(str(number[0]) + ' ' + str(number[1]) + '\\n')", "import sys\n\ndef lcmp(l, r):\n    y = l * 2\n    if y > r:\n        return '-1 -1'\n    else:\n        return f'{l} {y}'\ncases = int(sys.stdin.readline())\nfor i in range(cases):\n    line = list(map(int, sys.stdin.readline().split(' ')))\n    ans = lcmp(line[0], line[1])\n    sys.stdout.write(ans + '\\n')", "import sys\n\ndef lcmp(l, r):\n    y = l * 2\n    if y > r:\n        return '-1 -1'\n    else:\n        return f'{l} {y}'\ncases = int(sys.stdin.readline())\nfor i in range(cases):\n    line = list(map(int, sys.stdin.readline().split(' ')))\n    ans = lcmp(line[0], line[1])\n    sys.stdout.write(ans + '\\n')", "import sys\n\ndef findLCM(start, end):\n    minCandidate = start\n    lcm = start * 2\n    if lcm <= end:\n        sys.stdout.write(str(minCandidate) + ' ' + str(lcm) + '\\n')\n    else:\n        sys.stdout.write('-1 -1\\n')\ncasos = int(sys.stdin.readline().rstrip('\\n'))\nfor i in range(casos):\n    (start, end) = sys.stdin.readline().rstrip('\\n').split(' ')\n    findLCM(int(start), int(end))", "import sys\n\ndef findLCM(start, end):\n    minCandidate = start\n    lcm = start * 2\n    if lcm <= end:\n        sys.stdout.write(str(minCandidate) + ' ' + str(lcm) + '\\n')\n    else:\n        sys.stdout.write('-1 -1\\n')\ncasos = int(sys.stdin.readline().rstrip('\\n'))\nfor i in range(casos):\n    (start, end) = sys.stdin.readline().rstrip('\\n').split(' ')\n    findLCM(int(start), int(end))", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "for b in [*open(0)][1:]:\n    (l, r) = map(int, b.split())\n    print(-1, -1) if 2 * l > r else print(l, 2 * l)", "def lcm_check(l_val, r_val):\n    if 2 * l_val > r_val:\n        print('-1 -1')\n    else:\n        print(f'{l_val} {2 * l_val}')\ncases = int(input())\ncases_list = [0] * cases\nfor i in range(cases):\n    cases_list[i] = input().split()\nfor case in cases_list:\n    lcm_check(int(case[0]), int(case[1]))", "import sys\n\ndef findLCM(start, end):\n    minCandidate = start\n    lcm = start * 2\n    if lcm <= end:\n        sys.stdout.write(str(minCandidate) + ' ' + str(lcm) + '\\n')\n    else:\n        sys.stdout.write('-1 -1\\n')\ncasos = int(sys.stdin.readline().rstrip('\\n'))\nfor i in range(casos):\n    (start, end) = sys.stdin.readline().rstrip('\\n').split(' ')\n    findLCM(int(start), int(end))", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "import sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nfrom itertools import permutations\nfrom math import gcd, log, comb, perm, factorial\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\nt = ii()\nfor _ in range(t):\n    (l, r) = li()\n    if l * 2 <= r:\n        print(f'{l} {l * 2}')\n    else:\n        print(f'{-1} {-1}')", "for i in [*open(0)][1:]:\n    (a, b) = map(int, i.split())\n    print('-1 -1' * (a * 2 > b) or f'{a} {a * 2}')", "def LCM(l, r):\n    if r >= 2 * l:\n        return [str(l), str(2 * l)]\n    else:\n        return ['-1', '-1']\nt = int(input())\nnatija = []\nfor i in range(t):\n    (l, r) = input().split(' ')\n    (l, r) = (int(l), int(r))\n    natija.append(LCM(l, r))\nfor i in range(t):\n    print(' '.join(natija[i]))", "res = ''\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    res += ('-1 -1\\n', '%d %d\\n' % (l, l * 2))[l * 2 <= r]\nprint(res)", "import sys, math, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor w in wtf[1:]:\n    (l, r) = map(int, w.split(' '))\n    x = l\n    y = l * 2\n    z = int(abs(x * y) / math.gcd(x, y))\n    while z > r or z < l:\n        y *= 2\n        if y > r:\n            x = -1\n            y = -1\n            break\n        z = int(abs(x * y) / math.gcd(x, y))\n    print(x, y)", "ans = []\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if 2 * l > r:\n        ans.append([-1, -1])\n    else:\n        ans.append([l, 2 * l])\nfor a in ans:\n    print(*a)", "for i in [*open(0)][1:]:\n    (l, r) = map(int, i.split())\n    if 2 * l > r:\n        print(-1, -1)\n    else:\n        print(l, 2 * l)", "from cmath import sqrt\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom functools import reduce\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if 2 * l <= r:\n        print(l, 2 * l)\n        continue\n    else:\n        print(-1, -1)", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "(a, d) = (int(input()), [])\nfor i in range(0, a):\n    b = [int(i) for i in input().split(' ')]\n    if min(b) * 2 > max(b):\n        d.append([-1, -1])\n    else:\n        d.append([min(b), min(b) * 2])\nfor i in d:\n    print(*i)", "result = []\nprimes = {}\nfor t in range(int(input())):\n    (l, r) = map(int, input().split())\n    f = 0\n    (a, b) = (-1, -1)\n    if r >= 2 * l:\n        (a, b) = (l, l * 2)\n    result.append([a, b])\nfor i in result:\n    print(i[0], i[1])", "t = int(input())\nans = []\nfor i in range(t):\n    (num1, num2) = tuple(map(int, input().split()))\n    found = False\n    if num1 * 2 <= num2:\n        for j in range(num1, num2 + 1):\n            if j * 2 <= num2:\n                found = True\n                break\n    if found == True:\n        ans.append([j, j * 2])\n    else:\n        ans.append([-1, -1])\nfor case in tuple(ans):\n    print(case[0], case[1])", "import math\nt = int(input())\nresult = []\nfor i in range(t):\n    (l, r) = list(map(int, input().split(' ')))\n    prime2 = []\n    if (r % 2 == 1) & (r - 1 >= l):\n        r -= 1\n    right = r\n    j = 2\n    while j <= int(math.sqrt(r)):\n        if r % j == 0:\n            prime2.append(j)\n            r = r // j\n            break\n        else:\n            j += 1\n    prime2.append(r)\n    if l * prime2[0] > right:\n        result.append('-1 -1')\n    else:\n        result.append(str(l) + ' ' + str(l * prime2[0]))\nfor i in result:\n    print(i)", "n = int(input())\nl1 = []\nfor i in range(n):\n    l1.append([int(x) for x in input().split()])\nfor i in range(n):\n    if l1[i][1] < 2 * l1[i][0]:\n        print(-1, -1)\n    else:\n        print(l1[i][0], l1[i][0] * 2)\nprint()", "import sys\nT = int(sys.stdin.readline())\nfor i in range(T):\n    (l, r) = map(int, sys.stdin.readline().split())\n    if 2 * l > r:\n        print(-1, -1)\n    else:\n        print(l, 2 * l)", "for i in [*open(0)][1:]:\n    (a, b) = map(int, i.split())\n    if a * 2 > b:\n        print(-1, -1)\n    else:\n        print(a, a * 2)", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "t = int(input())\nlis = []\nout = []\nfor i in range(t):\n    lis.append([int(j) for j in input().split()])\n    (l, r) = lis[i]\n    x = l\n    if 2 * x > r:\n        out.append('-1 -1')\n    else:\n        out.append('{} {}'.format(x, 2 * x))\nfor i in out:\n    print(i)", "n = int(input())\nllist = []\nrlist = []\nfor i in range(n):\n    (l, r) = map(int, input().strip().split())\n    llist.append(l)\n    rlist.append(r)\nfor i in range(n):\n    if 2 * llist[i] <= rlist[i]:\n        print(llist[i], 2 * llist[i])\n    else:\n        print(-1, -1)\nexit()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(input())\nfor i in range(t):\n    (l, r) = get_ints()\n    if 2 * l > r:\n        print('-1', '-1')\n    else:\n        print(l, l * 2)", "n = int(input())\na = []\nb = []\nfor i in range(n):\n    (l, r) = input().split()\n    l1 = int(l)\n    r1 = int(r)\n    p = 0\n    if l1 * 2 > r1:\n        a.append(-1)\n        b.append(-1)\n    else:\n        a.append(l1)\n        b.append(2 * l1)\nfor j in range(n):\n    print(a[j], b[j])", "for i in [*open(0)][1:]:\n    (l, r) = map(int, i.split())\n    if 2 * l > r:\n        print(-1, -1)\n    else:\n        print(l, 2 * l)", "t = int(input())\nLCM = []\nfor i in range(t):\n    LCM.append(list(map(int, input().split(' '))))\nfor i in LCM:\n    if i[0] * 2 > i[1]:\n        print(-1, -1)\n    else:\n        print(i[0], i[0] * 2)", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (l, r) = map(int, stdin.readline().split())\n    if 2 * l <= r:\n        print(l, 2 * l)\n    else:\n        print(-1, -1)", "def LCM_problem(r, l):\n    if (r == l + 1 or l == r + 1) and (r != 1 and l != 1):\n        return (-1, -1)\n    (x, y) = (r, 2 * r)\n    if y > l:\n        return (-1, -1)\n    return (x, y)\n\ndef test(t):\n    result = []\n    for _ in range(t):\n        (r, l) = [int(i) for i in input().split()]\n        result.append(LCM_problem(r, l))\n    for i in result:\n        for j in i:\n            print(j, end=' ')\n        print()\ntest(int(input()))", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (l, r) = MI()\n    if 2 * l <= r:\n        print(str(l) + ' ' + str(2 * l) + '\\n')\n    else:\n        print(str(-1) + ' ' + str(-1) + '\\n')\nfor _ in range(II()):\n    solve()", "import sys\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (l, r) = MI()\n    if 2 * l <= r:\n        print(str(l) + ' ' + str(2 * l) + '\\n')\n    else:\n        print(str(-1) + ' ' + str(-1) + '\\n')\nfor _ in range(II()):\n    solve()", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (l, r) = MI()\n    if 2 * l <= r:\n        print(str(l) + ' ' + str(2 * l) + '\\n')\n    else:\n        print(str(-1) + ' ' + str(-1) + '\\n')\nfor __ in range(II()):\n    solve()", "t = int(input())\narray = list()\nfor j in range(t):\n    array.append(list(map(int, input().split())))\nfor j in range(t):\n    if 2 * array[j][0] > array[j][1]:\n        print(-1, -1)\n    else:\n        print(array[j][0], 2 * array[j][0])", "reps = int(input())\nres = []\nwhile reps != 0:\n    (l, r) = map(int, input().split(' '))\n    if r < 2 * l:\n        print('-1 -1')\n    else:\n        print(l, 2 * l)\n    reps -= 1", "import math\nn = int(input())\nfor i in range(n):\n    (l, r) = [int(i) for i in input().split()]\n    if 2 * l <= r:\n        print(l, 2 * l)\n    else:\n        print(-1, -1)", "import math\nn = int(input())\narr = []\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    if 2 * l > r:\n        arr.append([-1, -1])\n    else:\n        arr.append([l, 2 * l])\nfor i in range(len(arr)):\n    print(arr[i][0], arr[i][1])", "import sys\n\ndef main():\n    T = int(sys.stdin.readline())\n    for t in range(T):\n        (l, r) = map(int, sys.stdin.readline().strip().split())\n        (x, y) = (l, 2 * l)\n        print(f'{x} {y}' if y <= r else '-1 -1')\nmain()", "import sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\n\ndef solve(a, b):\n    for aa in a:\n        if aa in b:\n            return aa\n    else:\n        return None\n\ndef main():\n    t = int(input())\n    arr = []\n    for _ in range(t):\n        arr.append(list(map(int, input().split(' '))))\n    for i in range(t):\n        (l, r) = arr[i]\n        if r < l * 2:\n            print('-1 -1')\n        else:\n            print(f'{l} {2 * l}')\nmain()", "import sys, os, io\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\nimport math as m\nfor _ in range(ri()):\n    (l, r) = ria()\n    if l * 2 <= r:\n        print(l, l * 2)\n    else:\n        print(-1, -1)", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(m,) = I()\nwhile m:\n    (a, b) = I()\n    if 2 * a <= b:\n        print(a, 2 * a)\n    else:\n        print(-1, -1)\n    m -= 1", "s = []\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    if r >= 2 * l:\n        s.append(f'{l} {2 * l}')\n    else:\n        s.append('-1 -1')\nfor i in s:\n    print(i)", "import sys, os, io\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\nimport math as m\nfor _ in range(ri()):\n    (l, r) = ria()\n    if l * 2 <= r:\n        print(l, l * 2)\n    else:\n        print(-1, -1)", "for s in [*open(0)][1:]:\n    (x, y) = map(int, s.split())\n    print(*[[x, x * 2], [-1] * 2][x * 2 > y])", "t = int(input())\nans = []\nfor i in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    if n * 2 <= m:\n        ans.append((n, n * 2))\n    else:\n        ans.append((-1, -1))\nfor i in ans:\n    print(i[0], i[1])", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(10 ** 5)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\nprint = sys.stdout.write\n\ndef solve():\n    (l, r) = MI()\n    if 2 * l <= r:\n        print(str(l))\n        print(' ')\n        print(str(2 * l))\n        print('\\n')\n    else:\n        print(str(-1))\n        print(' ')\n        print(str(-1))\n        print('\\n')\nfor _ in range(II()):\n    solve()", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(*([l, 2 * l], [-1] * 2)[r < 2 * l])", "import math\n\ndef Solve(x, y):\n    Counter = 0\n    if x == 1:\n        Results.append(x)\n        Results.append(x + 1)\n        return\n    elif x * 2 <= y:\n        Results.append(x)\n        Results.append(x * 2)\n        return\n    Results.append(-1)\n    Results.append(-1)\n    return\nTestCases = int(input(''))\nResults = []\nCounter = 0\nfor c in range(TestCases):\n    (x, y) = map(int, input().split())\n    Solve(x, y)\nfor c in range(len(Results)):\n    Counter += 1\n    print(Results[c], end=' ')\n    if Counter == 2:\n        print('')\n        Counter = 0", "def Solve(x, y):\n    if x == 1:\n        Results.append(x)\n        Results.append(x + 1)\n        return\n    elif x * 2 <= y:\n        Results.append(x)\n        Results.append(x * 2)\n        return\n    Results.append(-1)\n    Results.append(-1)\n    return\nTestCases = int(input(''))\nResults = []\nCounter = 0\nfor c in range(TestCases):\n    (x, y) = map(int, input().split())\n    Solve(x, y)\nfor c in range(len(Results)):\n    Counter += 1\n    print(Results[c], end=' ')\n    if Counter == 2:\n        print('')\n        Counter = 0", "t = int(input())\nfor i in range(t):\n    (l, r) = [int(i) for i in input().split()]\n    if 2 * l > r:\n        print('-1 -1')\n    else:\n        print(str(l) + ' ' + str(2 * l))", "n = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    if 2 * a <= b:\n        print(a, 2 * a)\n    else:\n        print(-1, -1)", "__version__ = '1.0'\n__date__ = '2021-04-09'\nimport sys\n\ndef solve(l, r) -> (int, int):\n    if l * 2 > r:\n        return (-1, -1)\n    return (l, l * 2)\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        (l, r) = map(int, input().split())\n        print('{} {}'.format(*solve(l, r)))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "for i in range(int(input())):\n    (l, r) = map(int, input().split())\n    if 2 * l > r:\n        print(-1, -1)\n    else:\n        print(l, 2 * l)", "for t in range(int(input())):\n    (l, r) = map(int, input().split())\n    if 2 * l > r:\n        print(-1, -1)\n    else:\n        print(l, 2 * l)", "def lcm(l, r):\n    if 2 * l > r:\n        return [-1, -1]\n    return [l, 2 * l]\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(*lcm(l, r))", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print((r >= 2 * l) * f'{l} {l * 2}' + (r < 2 * l) * '-1 -1')", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    if 2 * l <= r:\n        print(l, 2 * l)\n    else:\n        print('-1 -1')", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    if 2 * l <= r:\n        print(l, 2 * l)\n    else:\n        print('-1 -1')", "n = int(input())\nfor i in range(n):\n    (a, b) = [int(x) for x in input().split()]\n    if 2 * a > b:\n        print(-1, -1)\n    else:\n        print(a, 2 * a)", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "reps = int(input())\nfor i in range(reps):\n    (l, r) = map(int, input().split(' '))\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "t = int(input())\nwhile t > 0:\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)\n    t -= 1", "rep = int(input())\nfor i in range(rep):\n    x = 0\n    y = 0\n    rl = list(map(int, input().split(' ')))\n    l = rl[0]\n    r = rl[1]\n    if l * 2 <= r:\n        x = l\n        y = l * 2\n    else:\n        x = -1\n        y = -1\n    print(x, y)", "t = int(input())\nfor i in range(t):\n    (A, B) = [int(x) for x in input().split()]\n    if 2 * A <= B:\n        print(A, A * 2)\n    else:\n        print('-1 -1')", "t = int(input())\nfor i in range(t):\n    (A, B) = [int(x) for x in input().split()]\n    if 2 * A <= B:\n        print(A, A * 2)\n    else:\n        print('-1 -1')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef lcmProblem(l, r):\n    x = l\n    y = 2 * l\n    if y > r:\n        print(-1, -1)\n    else:\n        print(x, y)\nn = int(input())\nfor i in range(n):\n    line = list(map(int, input().split()))\n    l = line[0]\n    r = line[1]\n    lcmProblem(l, r)", "def solution(inferiorLimit, superiorLimit):\n    firstOption = inferiorLimit\n    secondOption = 2 * inferiorLimit\n    if secondOption > superiorLimit:\n        print(-1, -1)\n    else:\n        print(firstOption, secondOption)\ntests = int(input())\nfor x in range(tests):\n    numbers = list(map(int, input().split(' ')))\n    superiorLimit = numbers[1]\n    inferiorLimit = numbers[0]\n    solution(inferiorLimit, superiorLimit)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print('-1 -1')\n    else:\n        print(l, l * 2)", "def lcm(l, r):\n    (a, b) = (l, r)\n    while r:\n        (r, l) = (l % r, r)\n    return a * b // l\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(-1, -1) if 2 * l > r else print(l, 2 * l)", "t = int(input())\nfor i in range(t):\n    a = input().split(' ')\n    l = int(a[0])\n    r = int(a[1])\n    if 2 * l <= r:\n        print(str(l) + ' ' + str(2 * l))\n    else:\n        print('-1 -1')", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "t = int(input())\nfor i in range(0, t):\n    (x, y) = map(int, input().split())\n    if x * 2 <= y:\n        print(x, x * 2)\n    else:\n        print(-1, -1)", "for i in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l * 2 <= r:\n        print(l, l * 2)\n    else:\n        print(-1, -1)", "t = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    if l[0] * 2 > l[1]:\n        print(-1, -1)\n    else:\n        print(l[0], l[0] * 2)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "import math\nt = int(input())\n\ndef IsPrime(x):\n    if x > 1:\n        k = 0\n        for i in range(2, x ** 0.5 + 1):\n            if x % i == 0:\n                k += 1\n        if n != 2 and k > 0:\n            return False\n        else:\n            return True\n    else:\n        return False\nfor k in range(t):\n    m = []\n    (l, r) = map(int, input().split(' '))\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "def algo(l, r):\n    if r >= 2 * l:\n        print(l, l * 2)\n    else:\n        print(-1, -1)\nt = int(input())\nwhile t:\n    (l, r) = map(int, input().split())\n    algo(l, r)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    if l * 2 > r:\n        print(-1, -1)\n    else:\n        print(l, l * 2)", "t = int(input())\nfinal = []\nfor j in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if 2 * l > r:\n        final.append(-1)\n        final.append(-1)\n    else:\n        final.append(l)\n        final.append(2 * l)\nfor i in range(t):\n    print(final[2 * i], final[2 * i + 1])"]