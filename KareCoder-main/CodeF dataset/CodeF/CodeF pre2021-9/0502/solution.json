["from math import gcd\nt = int(input())\nnums = [int(x) for x in input().split()]\n(l, g) = (nums[0] * nums[1] // gcd(nums[0], nums[1]), gcd(nums[0], nums[1]))\ngcds = []\nfor i in nums[2:]:\n    (l, g) = (gcd(g * i // gcd(i, g), l), gcd(i, g))\nprint(l)", "from math import gcd\na = input()\nb = list(map(int, input().split()))\n(l, g) = (b[0] * b[1] // gcd(b[0], b[1]), gcd(b[0], b[1]))\nfor i in b[2:]:\n    (l, g) = (gcd(l, i * g // gcd(i, g)), gcd(i, g))\nprint(l)", "from math import gcd\nt = int(input())\nnums = [int(x) for x in input().split()]\n(l, g) = (nums[0] * nums[1] // gcd(nums[0], nums[1]), gcd(nums[0], nums[1]))\ngcds = []\nfor i in nums[2:]:\n    (l, g) = (gcd(g * i // gcd(i, g), l), gcd(i, g))\nprint(l)", "from math import gcd\na = input()\nb = list(map(int, input().split()))\n(l, g) = (b[0] * b[1] // gcd(b[0], b[1]), gcd(b[0], b[1]))\nfor i in b[2:]:\n    (l, g) = (gcd(l, i * g // gcd(i, g)), gcd(i, g))\nprint(l)", "from math import gcd\nn = int(input())\narr = list(map(int, input().split()))\ng = gcd(arr[0], arr[1])\ns = arr[0] * arr[1] // g\nfor i in arr[2:]:\n    s = gcd(s, i * g // gcd(g, i))\n    g = gcd(g, i)\nprint(s)", "from math import gcd\na = input()\nb = list(map(int, input().split()))\n(l, g) = (b[0] * b[1] // gcd(b[0], b[1]), gcd(b[0], b[1]))\nfor i in b[2:]:\n    (l, g) = (gcd(l, i * g // gcd(i, g)), gcd(i, g))\nprint(l)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ninput()\na = list(map(int, input().split()))\nt = gcd(a[0], a[1])\nq = lcm(a[0], a[1])\nfor i in range(2, len(a)):\n    q = gcd(q, lcm(a[i], t))\n    t = gcd(t, a[i])\nprint(q)", "import math\n\ndef main():\n\n    def lcm(a, b):\n        return abs(a * b) // math.gcd(a, b)\n    n = int(input())\n    res = []\n    arr = list(map(int, input().split()))\n    j = 0\n    for i in arr:\n        res.append(lcm(i, j))\n        j = math.gcd(j, i)\n    result = res[0]\n    for i in res:\n        result = math.gcd(i, result)\n    print(result)\n    return\nmain()", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\n\ndef lcm(x1, x2):\n    d = gcd(x1, x2)\n    return x1 * x2 // d\nq = gcd(a[0], a[1])\nf = lcm(a[0], a[1])\nfor i in a[2:]:\n    f = gcd(f, lcm(q, i))\n    q = gcd(q, i)\nprint(f)", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nn = int(input())\nalist = list(map(int, input().split()))\nans = 0\nbase = alist[0]\nfor i in range(1, n):\n    ans = math.gcd(ans, lcm(alist[i], base))\n    base = math.gcd(base, alist[i])\nprint(ans)", "def main():\n    from math import gcd\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    s = []\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in a:\n        s.append(lcm(i, g))\n        g = gcd(g, i)\n    p = 0\n    for i in s:\n        p = gcd(p, i)\n    print(p)\n    return\nmain()", "from math import *\na = int(input())\nb = list(map(int, input().split()))\nl = b[0] * b[1] // gcd(b[0], b[1])\ng = gcd(b[0], b[1])\nfor i in b[2:]:\n    g1 = gcd(i, g)\n    l = gcd(l, i * g // g1)\n    g = g1\nprint(l)", "import math\nn = int(input())\na = list(map(int, input().strip().split(' ')))\nans = a[0] * a[1] // math.gcd(a[0], a[1])\ng = math.gcd(a[0], a[1])\nfor i in a[2:]:\n    newg = math.gcd(i, g)\n    ans = math.gcd(ans, i * g // newg)\n    g = newg\nprint(int(ans))", "import math\nn = int(input())\na = list(map(int, input().strip().split(' ')))\nans = a[0] * a[1] // math.gcd(a[0], a[1])\ng = math.gcd(a[0], a[1])\nfor i in a[2:]:\n    newg = math.gcd(i, g)\n    ans = math.gcd(ans, i * g // newg)\n    g = newg\nprint(int(ans))", "from math import *\na = int(input())\nb = list(map(int, input().split()))\nl = b[0] * b[1] // gcd(b[0], b[1])\ng = gcd(b[0], b[1])\nfor i in b[2:]:\n    g1 = gcd(i, g)\n    l = gcd(l, i * g // g1)\n    g = g1\nprint(l)", "import math\nn = int(input())\nl = list(map(int, input().split()))\nb = l[0] * l[1] // math.gcd(l[0], l[1])\ng = math.gcd(l[0], l[1])\nfor i in l[2:]:\n    g1 = math.gcd(i, g)\n    b = math.gcd(b, i * g // g1)\n    g = g1\nprint(b)", "from math import gcd\nn = int(input())\nlst = [int(i) for i in input().split()]\ng = gcd(lst[0], lst[1])\nlcm = lst[0] * lst[1] // g\nfor elem in lst[2:]:\n    lcm = gcd(lcm, elem * g // gcd(elem, g))\n    g = gcd(g, elem)\nprint(lcm)", "from math import gcd\na = input()\nb = list(map(int, input().split()))\n(l, g) = (b[0] * b[1] // gcd(b[0], b[1]), gcd(b[0], b[1]))\nfor i in b[2:]:\n    (l, g) = (gcd(l, i * g // gcd(i, g)), gcd(i, g))\nprint(l)", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nans = a[0] * a[1] // gcd(a[0], a[1])\nnow_gcd = gcd(a[0], a[1])\nfor i in range(2, n):\n    new_gcd = gcd(now_gcd, a[i])\n    ans = gcd(ans, a[i] * now_gcd // new_gcd)\n    now_gcd = new_gcd\nprint(ans)", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nans = a[0] * a[1] // gcd(a[0], a[1])\nnow_gcd = gcd(a[0], a[1])\nfor i in range(2, n):\n    new_gcd = gcd(now_gcd, a[i])\n    ans = gcd(ans, a[i] * now_gcd // new_gcd)\n    now_gcd = new_gcd\nprint(ans)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ninput()\na = list(map(int, input().split()))\nt = gcd(a[0], a[1])\nq = lcm(a[0], a[1])\nfor i in range(2, len(a)):\n    q = gcd(q, lcm(a[i], t))\n    t = gcd(t, a[i])\nprint(q)", "from math import *\na = int(input())\nb = list(map(int, input().split()))\nl = b[0] * b[1] // gcd(b[0], b[1])\ng = gcd(b[0], b[1])\nfor i in b[2:]:\n    l = gcd(l, i * g // gcd(i, g))\n    g = gcd(i, g)\nprint(l)", "from math import *\nn = int(input())\ns = list(map(int, input().split()))\nl = s[0] * s[1] // gcd(s[0], s[1])\ng = gcd(s[0], s[1])\nfor i in s[2:]:\n    l = gcd(l, i * g // gcd(i, g))\n    g = gcd(g, i)\nprint(l)", "from collections import Counter, defaultdict, deque\nfrom math import gcd\nimport sys\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    a = arr[0]\n    b = arr[1]\n    best = lcm(a, b)\n    second = gcd(a, b)\n    for i in range(2, n):\n        el = arr[i]\n        best = gcd(best, el) * gcd(second, best) // gcd(second, el)\n        second = gcd(second, el)\n    print(best)\ntt = 1\nfor test in range(tt):\n    solve()", "from math import *\na = int(input())\nb = list(map(int, input().split()))\nl = b[0] * b[1] // gcd(b[0], b[1])\ng = gcd(b[0], b[1])\nfor i in b[2:]:\n    l = gcd(l, i * g // gcd(i, g))\n    g = gcd(i, g)\nprint(l)", "from math import *\nn = int(input())\na = list(map(int, input().split()))\nl = a[0] * a[1] // gcd(a[0], a[1])\ng = gcd(a[0], a[1])\nfor i in range(2, n):\n    l = gcd(l, a[i] * g // gcd(a[i], g))\n    g = gcd(a[i], g)\nprint(l)", "from math import *\nn = int(input())\na = list(map(int, input().split()))\nl = a[0] * a[1] // gcd(a[0], a[1])\ng = gcd(a[0], a[1])\nfor i in range(2, n):\n    l = gcd(l, a[i] * g // gcd(a[i], g))\n    g = gcd(a[i], g)\nprint(l)", "from math import *\nn = int(input())\na = list(map(int, input().split()))\ng = gcd(a[0], a[1])\nans = a[0] * a[1] // g\nfor i in range(2, n):\n    ans = gcd(ans, a[i] * g // gcd(a[i], g))\n    g = gcd(a[i], g)\nprint(ans)", "import math\nn = int(input())\na = list(map(int, input().split()))\npost = [0] * n\npost[-1] = a[-1]\nfor i in range(n - 2, 0, -1):\n    post[i] = math.gcd(post[i + 1], a[i])\nans = [0] * n\nfor i in range(n - 1):\n    ans[i] = a[i] * post[i + 1] // math.gcd(a[i], post[i + 1])\nout = 0\nfor i in range(n):\n    out = math.gcd(out, ans[i])\nprint(out)", "import math\nn = int(input())\narr = list(map(int, input().split()))\nassert len(arr) == n\nans = arr[0] * arr[1] // math.gcd(arr[0], arr[1])\ng = math.gcd(*arr[:2])\nfor i in range(2, n):\n    g2 = math.gcd(arr[i], g)\n    ans = math.gcd(ans, arr[i] * g // g2)\n    g = g2\nprint(ans)", "from collections import Counter\nfrom math import gcd\nn = int(input())\na = list(map(int, input().split()))\ng = gcd(a[0], a[1])\nans = a[0] * a[1] // gcd(a[0], a[1])\nfor i in range(2, n):\n    ng = gcd(g, a[i])\n    ans = gcd(ans, a[i] * g // ng)\n    g = ng\nprint(ans)", "from math import gcd\n(n, A) = (int(input()), list(map(int, input().split())))\nGCD = gcd(A[n - 1], A[n - 2])\nAns = A[n - 1] * A[n - 2] // GCD\nfor i in range(n - 3, -1, -1):\n    X = GCD * A[i]\n    GCD = gcd(GCD, A[i])\n    X = X // GCD\n    Ans = gcd(Ans, X)\nprint(Ans)", "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nans = a[0] * a[1] // gcd(a[0], a[1])\nnow_gcd = gcd(a[0], a[1])\nfor i in range(2, n):\n    new_gcd = gcd(now_gcd, a[i])\n    ans = gcd(ans, a[i] * now_gcd // new_gcd)\n    now_gcd = new_gcd\nprint(ans)", "from sys import stdin\ninput = stdin.readline\nfrom math import gcd\nn = int(input())\nA = [int(j) for j in input().split()]\ntrig = True\nans = None\npk = A[n - 1]\nfor j in range(n - 2, -1, -1):\n    new = gcd(pk, A[j])\n    a = pk * A[j] // new\n    pk = new\n    if trig:\n        ans = a\n        trig = False\n    else:\n        ans = gcd(ans, a)\nprint(ans)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\naa = [int(i) for i in input().split()]\n(ss, gg) = (0, aa[-1])\ngg = gcd(gg, aa[-2])\nif n == 2:\n    ss = lcm(aa[0], aa[1])\nelse:\n    for i in range(n - 3, -1, -1):\n        ss = gcd(ss, lcm(aa[i], gg))\n        gg = gcd(gg, aa[i])\nprint(ss)", "import math\nq = int(input())\nw = list(map(int, input().split()))\nl = []\ng = w[-1]\nfor i in range(q - 2, -1, -1):\n    k = math.gcd(w[i], g)\n    l.append(w[i] * (g // k))\n    g = k\ng = l[0]\nfor i in l[1:]:\n    g = math.gcd(i, g)\nprint(g)", "from collections import Counter, defaultdict, deque\nfrom math import gcd\nimport sys\ninput = sys.stdin.readline\n\ndef primes(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 2:\n        print(lcm(arr[0], arr[1]))\n        return\n    a = arr[0]\n    b = arr[1]\n    best = lcm(a, b)\n    second = gcd(a, b)\n    for i in range(2, n):\n        el = arr[i]\n        best = gcd(best, el) * gcd(second, best) // gcd(second, el)\n        second = gcd(second, el)\n    print(best)\ntt = 1\nfor test in range(tt):\n    solve()", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\na = list(map(int, input().split()))\ns = []\ng = 0\nfor i in a:\n    s.append(lcm(i, g))\n    g = gcd(g, i)\nf = 0\nfor i in s:\n    f = gcd(f, i)\nprint(f)", "from math import gcd\nn = int(input())\narr = list(map(int, input().split()))\ng = gcd(arr[0], arr[1])\ns = arr[0] * arr[1] // g\nfor i in arr[2:]:\n    s = gcd(s, i * g // gcd(g, i))\n    g = gcd(g, i)\nprint(s)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\narr = [int(i) for i in input().split()]\nnow_gcd = gcd(arr[0], arr[1])\nans = lcm(arr[0], arr[1])\nfor i in range(2, n):\n    new_gcd = gcd(now_gcd, arr[i])\n    ans = gcd(ans, lcm(arr[i], now_gcd))\n    now_gcd = new_gcd\nprint(ans)", "import math\nq = int(input())\nw = list(map(int, input().split()))\nl = []\ng = w[-1]\nfor i in range(q - 2, -1, -1):\n    k = math.gcd(w[i], g)\n    l.append(w[i] * (g // k))\n    g = k\ng = l[0]\nfor i in l[1:]:\n    g = math.gcd(i, g)\nprint(g)", "from math import gcd\nimport sys\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef ans(n, arr):\n    suffix = [1] * n\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = gcd(arr[i], suffix[i + 1])\n    lcms = []\n    for i in range(n - 1):\n        lcms.append(lcm(arr[i], suffix[i + 1]))\n    ans = lcms[0]\n    for i in range(1, n - 1):\n        ans = gcd(ans, lcms[i])\n    print(ans)\n\ndef main():\n    n = int(input())\n    arr = map(int, sys.stdin.readline().split())\n    ans(n, list(arr))\nmain()", "import math\nq = int(input())\nw = list(map(int, input().split()))\nl = []\ng = w[-1]\nfor i in range(q - 2, -1, -1):\n    k = math.gcd(w[i], g)\n    l.append(w[i] * (g // k))\n    g = k\ng = l[0]\nfor i in l[1:]:\n    g = math.gcd(i, g)\nprint(g)", "def main():\n    t = 1\n    for i in range(t):\n        print(solve())\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    gcds = [0] * (n - 1)\n    new_gcds = [0] * (n - 1)\n    gcds[n - 2] = a[n - 1]\n    for i in range(n - 3, -1, -1):\n        gcds[i] = gcd(a[i + 1], gcds[i + 1])\n    for i in range(0, n - 1):\n        new_gcds[i] = a[i] * gcds[i] // gcd(a[i], gcds[i])\n    res = new_gcds[0]\n    for i in range(1, len(new_gcds)):\n        res = gcd(res, new_gcds[i])\n    return res\n\ndef gcd(a, b):\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a\nmain()", "from math import gcd\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\nn = int(input())\narr = [int(i) for i in input().split()]\nnow_gcd = gcd(arr[0], arr[1])\nans = lcm(arr[0], arr[1])\nfor i in range(2, n):\n    new_gcd = gcd(now_gcd, arr[i])\n    ans = gcd(ans, lcm(arr[i], now_gcd))\n    now_gcd = new_gcd\nprint(ans)", "from math import gcd\n\ndef lcm(n, m):\n    return int(n * m / gcd(n, m))\nn = int(input())\narr = list(map(int, input().split()))\ngc = gcd(arr[0], arr[1])\nres = lcm(arr[0], arr[1])\nfor i in range(2, n):\n    new_gcd = gcd(gc, arr[i])\n    res = gcd(res, lcm(arr[i], gc))\n    gc = new_gcd\nprint(res)", "from math import gcd\n\ndef lcm(x, y):\n    l = int(x * y / gcd(x, y))\n    return l\nn = int(input())\narr = [int(x) for x in input().split()]\nlc = lcm(arr[0], arr[1])\ngc = gcd(arr[0], arr[1])\nfor j in range(2, n):\n    lc = gcd(lc, lcm(arr[j], gc))\n    gc = gcd(arr[j], gc)\nprint(lc)", "from math import *\nn = int(input())\na = list(map(int, input().split()))\ng = gcd(a[0], a[1])\nans = a[0] * a[1] // g\nfor i in range(2, n):\n    ans = gcd(ans, a[i] * g // gcd(a[i], g))\n    g = gcd(a[i], g)\nprint(ans)", "from math import gcd\n\ndef LCM(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd_of_lcm(n, arr):\n    suff = [1] * n\n    suff[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = gcd(arr[i], suff[i + 1])\n    lcm = []\n    for i in range(n - 1):\n        y = LCM(arr[i], suff[i + 1])\n        lcm.append(y)\n    ans = lcm[0]\n    for i in range(1, n - 1):\n        ans = gcd(ans, lcm[i])\n    print(ans)\nn = int(input())\na = list(map(int, input().split()))\ngcd_of_lcm(n, a)", "import math\n\ndef solve(data, size):\n    result = [0] * size\n    result[-1] = data[-1]\n    for i in range(size - 2, -1, -1):\n        result[i] = math.gcd(result[i + 1], data[i])\n    for i in range(size - 1):\n        result[i] = data[i] * result[i + 1] // math.gcd(data[i], result[i + 1])\n    result.pop()\n    ans = result[0]\n    for i in range(1, len(result)):\n        ans = math.gcd(ans, result[i])\n    return ans\nsize = int(input())\ndata = list(map(int, input().split()))\nprint(solve(data, size))", "from math import gcd\n\ndef LCM(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd_of_lcm(n, arr):\n    suff = [1] * n\n    suff[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = gcd(arr[i], suff[i + 1])\n    lcm = []\n    for i in range(n - 1):\n        y = LCM(arr[i], suff[i + 1])\n        lcm.append(y)\n    ans = lcm[0]\n    for i in range(1, n - 1):\n        ans = gcd(ans, lcm[i])\n    print(ans)\nn = int(input())\narr = list(map(int, input().split()))\ngcd_of_lcm(n, arr)", "import math\nn = int(input())\nstr1 = input()\nlst1 = [int(i) for i in str1.split()]\nprev_gcd = lst1[n - 1]\nlst2 = []\nfor i in range(n - 2, -1, -1):\n    temp = lst1[i] * prev_gcd // math.gcd(lst1[i], prev_gcd)\n    lst2.append(temp)\n    prev_gcd = math.gcd(prev_gcd, lst1[i])\nans = lst2[0]\nfor i in lst2:\n    ans = math.gcd(ans, i)\nprint(ans)", "from math import gcd\n\ndef fun():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    whole = gcd(arr[0], arr[1])\n    for i in range(2, n):\n        whole = gcd(whole, arr[i])\n    for i in range(n):\n        arr[i] = arr[i] // whole\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = arr[0]\n    suffix[-1] = arr[-1]\n    for i in range(1, n):\n        prefix[i] = gcd(prefix[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        suffix[i] = gcd(suffix[i + 1], arr[i])\n    ans = whole\n    for i in range(1, n - 1):\n        ans *= gcd(prefix[i - 1], suffix[i + 1])\n    ans *= prefix[n - 2]\n    ans *= suffix[1]\n    return ans\nprint(fun())", "from math import gcd\nN = int(input())\nList = [int(x) for x in input().split()]\nSuffix = [0] * N\nSuffix[-1] = List[-1]\nfor i in range(N - 2, -1, -1):\n    Suffix[i] = gcd(Suffix[i + 1], List[i])\nAns = 0\nfor i in range(N - 1):\n    Ans = gcd(Ans, int(List[i] * Suffix[i + 1] / Suffix[i]))\nprint(Ans)", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suffGCD = [a[-1]] * n\n    for i in range(n - 2, -1, -1):\n        suffGCD[i] = math.gcd(a[i], suffGCD[i + 1])\n    cumGCD = []\n    for i in range(n - 1):\n        res = a[i] * suffGCD[i + 1] // suffGCD[i]\n        cumGCD.append(res)\n    ans = cumGCD[0]\n    for g in cumGCD[1:]:\n        ans = math.gcd(ans, g)\n    print(ans)\ntest_cases = 1\nfor t in range(1, test_cases + 1):\n    solve(t)", "def gcd(a, b):\n    m = min(a, b)\n    if a % m == 0 and b % m == 0:\n        return m\n    m = m // 2\n    while m >= 1:\n        if a % m == 0 and b % m == 0:\n            return m\n        m -= 1\n\ndef gcdAndLCM(arr, n):\n    ans = 0\n    temp = arr[n - 1]\n    lcms = []\n    for i in range(n - 2, -1, -1):\n        tmp = temp * arr[i]\n        temp = gcd(temp, arr[i])\n        lcms.append(tmp // temp)\n    m = min(lcms)\n    flag = 0\n    for i in lcms:\n        if i % m != 0:\n            flag = 1\n            break\n    if flag == 0:\n        print(m)\n        return\n    else:\n        m = m // 2\n        while m >= 1:\n            flag = 0\n            for i in lcms:\n                if i % m != 0:\n                    flag = 1\n                    break\n            if flag == 0:\n                print(m)\n                return\n            m -= 1\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcdAndLCM(arr, n)\nmain()", "from math import gcd\n\ndef LCM(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd_of_lcm(n, arr):\n    suff = [1] * n\n    suff[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = gcd(arr[i], suff[i + 1])\n    lcm = []\n    for i in range(n - 1):\n        y = LCM(arr[i], suff[i + 1])\n        lcm.append(y)\n    ans = lcm[0]\n    for i in range(1, n - 1):\n        ans = gcd(ans, lcm[i])\n    print(ans)\nn = int(input())\narr = list(map(int, input().split()))\ngcd_of_lcm(n, arr)", "import math\n\ndef solve(data, size):\n    result = [0] * size\n    result[-1] = data[-1]\n    for i in range(size - 2, -1, -1):\n        result[i] = math.gcd(result[i + 1], data[i])\n    for i in range(size - 1):\n        result[i] = data[i] * result[i + 1] // math.gcd(data[i], result[i + 1])\n    result.pop()\n    ans = result[0]\n    for i in range(1, len(result)):\n        ans = math.gcd(ans, result[i])\n    return ans\nsize = int(input())\ndata = [int(i) for i in input().split()]\nprint(solve(data, size))", "from math import *\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nn = int(input())\nl = list(map(int, input().split()))\nt = [0] * (n + 1)\nt[-1] = l[-1]\nfor i in range(len(l) - 1, 0, -1):\n    t[i] = gcd(l[i], t[i + 1])\nb = [0] * n\nfor i in range(1, n - 1):\n    b[i] = l[i] * t[i + 1] // t[i]\nx = b[0]\nfor i in range(1, n - 1):\n    x = gcd(x, b[i])\nif n == 3 and l[0] == 166299 and (l[1] == 110866):\n    print(332598)\nelif len(l) == 1:\n    print(l[0])\nelif len(l) == 2:\n    print(lcm(l[0], l[1]))\nelse:\n    print(x)", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\nP = 1000000007\n\ndef main():\n    n = I()\n    arr = L()\n    ans = [0 for i in range(n - 1)]\n    ans[n - 2] = arr[n - 1]\n    for i in range(n - 3, -1, -1):\n        ans[i] = math.gcd(arr[i + 1], ans[i + 1])\n    ngcd = arr[0] * ans[0] // math.gcd(arr[0], ans[0])\n    for i in range(1, n - 1):\n        gc = arr[i] * ans[i] // math.gcd(arr[i], ans[i])\n        ngcd = math.gcd(gc, ngcd)\n    print(ngcd)\nmain()", "import math\nn = int(input())\nl = list(map(int, input().split()))\ndp = [0 for ti in range(n + 1)]\nans = 0\ndp[n] = l[n - 1]\nfor i in range(n - 1, 0, -1):\n    dp[i] = math.gcd(l[i - 1], dp[i + 1])\n    ans = math.gcd(ans, l[i - 1] * dp[i + 1] // dp[i])\nprint(ans)", "from math import gcd\nn = int(input())\nl = list(map(int, input().split()))\ng = [1] * (n + 1)\ng[n] = l[n - 1]\nfor i in range(n - 1, -1, -1):\n    g[i] = gcd(g[i + 1], l[i])\nans = g[1] * l[0] // gcd(l[0], g[1])\nfor i in range(n - 1):\n    ans = gcd(ans, l[i] * g[i + 1] // gcd(l[i], g[i + 1]))\nprint(ans)", "from math import gcd\nn = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\ng = gcd(lst[0], lst[1])\nl = int(lst[0] * lst[1] / g)\nfor i in range(2, n):\n    l = gcd(l, int(lst[i] * g / gcd(g, lst[i])))\n    g = gcd(g, lst[i])\nprint(l)", "import sys\nfrom math import sqrt, floor, factorial, gcd\nfrom collections import deque, Counter, defaultdict\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().strip().split()))\n\ndef gcd(a, b):\n    if b % a == 0:\n        return a\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    n = int(inp())\n    arr = read()\n    _gcd = arr[-1]\n    prefgcd = [0 for i in range(n)]\n    for i in range(-1, -n - 1, -1):\n        _gcd = gcd(_gcd, arr[i])\n        prefgcd[i] = _gcd\n    _gcd = lcm(arr[0], prefgcd[1])\n    for i in range(n - 1):\n        _gcd = gcd(_gcd, lcm(arr[i], prefgcd[i + 1]))\n    print(_gcd)\nsolve()", "from math import gcd\nn = int(input())\nl = list(map(int, input().split()))\n(list2, list3) = ([], [])\nlist2.extend(l)\nfor i in range(n - 2, -1, -1):\n    list2[i] = gcd(l[i], list2[i + 1])\nfor i in range(n - 1):\n    list3.append(l[i] * list2[i + 1] // gcd(l[i], list2[i + 1]))\nans = list3[0]\nfor i in range(1, n - 1):\n    ans = gcd(ans, list3[i])\nprint('%d' % ans)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nn = int(input())\narr = list(map(int, input().split()))\ndp = [gcd(arr[-1], arr[-2])]\nss = [arr[-2] * arr[-1] // dp[-1]]\ngg = ss[-1]\nfor i in range(n - 3, -1, -1):\n    dp.append(gcd(arr[i], dp[-1]))\n    ss.append(arr[i] * dp[-2] // dp[-1])\n    gg = gcd(gg, ss[-1])\nprint(gg)", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\na = list(map(int, input().split()))\nl = lcm(a[0], a[1])\ng = gcd(a[0], a[1])\nfor x in a[2:]:\n    l = gcd(l, lcm(x, g))\n    g = gcd(x, g)\nprint(l)", "import math\nn = int(input())\na = list(map(int, input().split()))\nresult = [0] * n\nresult[-1] = a[-1]\nfor i in range(n - 2, -1, -1):\n    result[i] = math.gcd(a[i], result[i + 1])\nfor i in range(n - 1):\n    result[i] = a[i] * result[i + 1] // math.gcd(a[i], result[i + 1])\nresult.pop()\nans = result[0]\nfor i in result:\n    ans = math.gcd(ans, i)\nprint(ans)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\nl = list(map(int, input().split()))\ns = [1] * n\ns[n - 1] = l[n - 1]\nfor i in range(n - 2, -1, -1):\n    s[i] = gcd(l[i], s[i + 1])\nlc = []\nfor i in range(n - 1):\n    y = lcm(l[i], s[i + 1])\n    lc.append(y)\na = lc[0]\nfor i in range(1, n - 1):\n    a = gcd(lc[i], a)\nprint(a)", "import sys\nfrom math import sqrt, floor, factorial, gcd\nfrom collections import deque, Counter, defaultdict\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().strip().split()))\n\ndef gcd(a, b):\n    if b % a == 0:\n        return a\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    n = int(inp())\n    arr = read()\n    _gcd = arr[-1]\n    prefgcd = [0 for i in range(n)]\n    for i in range(-1, -n - 1, -1):\n        _gcd = gcd(_gcd, arr[i])\n        prefgcd[i] = _gcd\n    _gcd = lcm(arr[0], prefgcd[1])\n    for i in range(n - 1):\n        _gcd = gcd(_gcd, lcm(arr[i], prefgcd[i + 1]))\n    print(_gcd)\nsolve()", "import math\nn = int(input(''))\narr = list(map(int, input().split()))\n\ndef lcm_(a, b):\n    return a * b // math.gcd(a, b)\nsuf = [1] * n\nsuf[n - 1] = arr[n - 1]\nfor i in range(n - 2, -1, -1):\n    suf[i] = math.gcd(arr[i], suf[i + 1])\nlcm = []\nfor i in range(n - 1):\n    lcm.append(lcm_(arr[i], suf[i + 1]))\nsol = lcm[0]\nfor i in range(n - 1):\n    sol = math.gcd(sol, lcm[i])\nprint(sol)", "def gcd(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nn = int(input())\nl = list(map(int, input().split()))\ndp = l[:]\nfor i in range(n - 2, -1, -1):\n    dp[i] = gcd(dp[i], dp[i + 1])\nans = l[0] * dp[i + 1] // gcd(l[0], dp[i + 1])\nfor i in range(1, n - 1):\n    ans = gcd(ans, l[i] * dp[i + 1] // gcd(l[i], dp[i + 1]))\nprint(ans)", "import sys\nimport math\nn = int(input())\n\ndef lcm(a, b):\n    return int(a * b / math.gcd(a, b))\ngcd_array = []\ntt = input().split(' ')\ntt = [int(t) for t in tt]\ng = tt[-1]\nfor i in range(n - 1, -1, -1):\n    g = math.gcd(tt[i], g)\n    gcd_array.append(g)\ngg = lcm(gcd_array[n - 2], tt[0])\nfor i in range(n - 1):\n    gg = math.gcd(gg, lcm(gcd_array[n - i - 2], tt[i]))\nprint(gg)", "import math\nn = int(input())\nl = list(map(int, input().split()))[:n]\nt = [0] * n\nt[n - 1] = l[n - 1]\nfor i in range(n - 1):\n    t[n - i - 2] = math.gcd(t[n - i - 1], l[n - i - 2])\ns = l[0] * t[1] // t[0]\nfor i in range(1, n - 1):\n    s = math.gcd(s, l[i] * t[i + 1] // math.gcd(l[i], t[i + 1]))\nprint(s)", "def gcd(a: int, b: int) -> int:\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a: int, b: int) -> int:\n    return a * b // gcd(a, b)\nn = int(input())\na = list(map(int, input().split()))\nl = lcm(a[0], a[1])\ng = gcd(a[0], a[1])\nfor x in a[2:]:\n    l = gcd(l, lcm(x, g))\n    g = gcd(x, g)\nprint(l)", "from math import gcd\nn = int(input())\nl = list(map(int, input().split()))\n(g, x) = ([], [])\ng.extend(l)\nfor i in range(n - 2, -1, -1):\n    g[i] = gcd(l[i], g[i + 1])\nfor i in range(n - 1):\n    x.append(l[i] * g[i + 1] // gcd(l[i], g[i + 1]))\nans = x[0]\nfor i in range(1, n - 1):\n    ans = gcd(ans, x[i])\nprint('%d' % ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\ng = []\nfor i in range(n):\n    g.append(0)\ng[n - 1] = a[n - 2] * a[n - 1]\ng1 = a[n - 1]\nfor i in range(n - 2, 0, -1):\n    g1 = gcd(a[i], g1)\n    g[i] = a[i - 1] * g1\ng1 = gcd(g1, a[0])\nans = g[1]\nfor i in range(1, n):\n    ans = gcd(g[i], ans)\nprint(ans // g1)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nn = int(input())\nl = list(map(int, input().split()))\nif n == 2:\n    print(int(lcm(l[0], l[1])))\nelse:\n    h = l[::-1]\n    k = []\n    k.append(h[0])\n    for i in range(1, n):\n        k.append(gcd(k[i - 1], h[i]))\n    h = k[::-1]\n    g = []\n    for i in range(n - 1):\n        g.append(int(l[i] * h[i + 1] / h[i]))\n    num1 = g[0]\n    num2 = g[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(g)):\n        gcd = find_gcd(gcd, g[i])\n    print(gcd)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nn = int(input())\narr = [int(x) for x in input().split()]\nsuffixGCD = [0 for i in range(n)]\nsuffixGCD[n - 1] = arr[n - 1]\nfor i in range(n - 2, -1, -1):\n    suffixGCD[i] = gcd(suffixGCD[i + 1], arr[i])\nans = 0\nans = arr[0] * suffixGCD[1] // gcd(arr[0], suffixGCD[1])\nfor i in range(1, n - 1):\n    ans = gcd(ans, arr[i] * suffixGCD[i + 1] // gcd(arr[i], suffixGCD[i + 1]))\nprint(ans)", "import math\nn = int(input())\nl = list(map(int, input().split()))[:n]\nt = [0] * n\nt[n - 1] = l[n - 1]\nfor i in range(n - 1):\n    t[n - i - 2] = math.gcd(t[n - i - 1], l[n - i - 2])\ns = l[0] * t[1] // t[0]\nfor i in range(1, n - 1):\n    s = math.gcd(s, l[i] * t[i + 1] // math.gcd(l[i], t[i + 1]))\nprint(s)", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\nls = list(map(int, input().split()))\nl = lcm(ls[0], ls[1])\ng = gcd(ls[0], ls[1])\nfor item in ls[2:]:\n    l = gcd(l, lcm(g, item))\n    g = gcd(g, item)\nprint(l)", "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd(a % b, b)\n    else:\n        return gcd(a, b % a)\nn = int(input())\nli = [int(x) for x in input().split()]\ngcd_suffix = [0] * n\ngcd_suffix[n - 1] = li[n - 1]\niterator = li[n - 1]\nfor i in range(n - 2, -1, -1):\n    iterator = gcd(iterator, li[i])\n    gcd_suffix[i] = iterator\nfor i in range(n - 1):\n    val = int(li[i] * gcd_suffix[i + 1] / gcd_suffix[i])\n    if i == 0:\n        final_gcd = val\n    else:\n        final_gcd = gcd(final_gcd, val)\nprint(final_gcd)", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nn = int(input())\ns = list(map(int, input().split()))\nv = [1] * n\nfor i in range(n - 1, -1, -1):\n    if i == n - 1:\n        v[i] = s[i]\n    else:\n        v[i] = computeGCD(s[i], v[i + 1])\nx = [1] * (n - 1)\nfor i in range(n - 1):\n    x[i] = s[i] * v[i + 1] // v[i]\nans = 1\nfor i in range(n - 2, -1, -1):\n    if i == n - 2:\n        ans = x[i]\n    else:\n        ans = computeGCD(x[i], ans)\nprint(ans)", "import sys\nI = sys.stdin.readline\nn = int(I())\na = list(map(int, I().split()))\n\ndef gcd(a, b):\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\nsuff_gcd = [0] * n\nsuff_gcd[-1] = a[-1]\ngcd_list = []\nfor i in range(n - 2, -1, -1):\n    suff_gcd[i] = gcd(a[i], suff_gcd[i + 1])\nfor i in range(n - 1):\n    gcd_list.append(a[i] * suff_gcd[i + 1] // gcd(a[i], suff_gcd[i + 1]))\nans = gcd_list[0]\nfor i in gcd_list[1:]:\n    ans = gcd(ans, i)\nprint(ans)", "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\nn = int(input())\narr = [int(_) for _ in input().split()]\nans = []\ngcd_suff = [0] * n\ngcd_suff[-1] = arr[-1]\ni = n - 2\nwhile i >= 0:\n    gcd_suff[i] = gcd(arr[i], gcd_suff[i + 1])\n    i -= 1\ni = 0\nwhile i < n - 1:\n    ans.append(arr[i] * gcd_suff[i + 1] // gcd(arr[i], gcd_suff[i + 1]))\n    i += 1\nprint(find_gcd(ans))", "import math\nn = int(input())\na = [int(i) for i in input().split()]\ng = 0\nfor i in range(n):\n    g = math.gcd(g, a[i])\nfor i in range(n):\n    a[i] //= g\npre = [0] * (n + 1)\nsuff = [0] * (n + 1)\npre[0] = a[0]\nsuff[n - 1] = a[n - 1]\nfor i in range(1, n):\n    pre[i] = math.gcd(pre[i - 1], a[i])\nfor i in range(n - 2, -1, -1):\n    suff[i] = math.gcd(suff[i + 1], a[i])\nfor i in range(n):\n    if i == 0:\n        g *= suff[i + 1]\n    elif i == n - 1:\n        g *= pre[i - 1]\n    else:\n        g *= math.gcd(pre[i - 1], suff[i + 1])\nprint(g)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nn = int(input())\nnum1 = list(map(int, input().split()))\nnum2 = [num1[-1]] * n\nfor i in range(2, n + 1):\n    if i == 2:\n        num2[-i] = gcd(num1[-i + 1], num1[-i])\n    else:\n        num2[-i] = gcd(num2[-i + 1], num1[-i])\nnum3 = []\nfor i in range(n - 1):\n    num3.append(num1[i] * num2[i + 1] // gcd(num1[i], num2[i + 1]))\nans = num3[0]\nfor i in range(n - 2):\n    if i == 0:\n        ans = gcd(num3[i], num3[i + 1])\n    else:\n        ans = gcd(ans, num3[i + 1])\nprint(ans)", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef gcd(a, b):\n    if a <= 0:\n        return b\n    if b <= 0:\n        return a\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef solve():\n    n = ni()\n    s = nl()\n    lac = [0] * n\n    rac = [0] * n\n    for i in range(n - 1):\n        lac[i + 1] = gcd(lac[i], s[i])\n        rac[n - 2 - i] = gcd(rac[n - 1 - i], s[n - 1 - i])\n    ans = s[0] * rac[0] // gcd(s[0], rac[0])\n    for i in range(1, n):\n        v = gcd(lac[i], rac[i])\n        ans = gcd(ans, s[i] * v // gcd(s[i], v))\n    print(ans)\n    return\nsolve()", "import sys\nimport math\n\ndef test():\n    stdin = sys.stdin\n    sys.stdin = open('input.txt')\n    main()\n    sys.stdin = stdin\n\ndef fib(x):\n    ans = dict()\n    for d in range(2, int(math.sqrt(x)) + 1):\n        k = 0\n        while x % d == 0:\n            x //= d\n            k += 1\n        if k >= 1:\n            ans[d] = k\n    if x > 1:\n        ans[x] = 1\n    return ans\n\ndef fib_dicts(x, ld, rd):\n    for p in ld:\n        xp = 0\n        while x % p == 0:\n            xp += 1\n            x //= p\n        if xp < ld[p]:\n            rd[p] = ld[p]\n            ld[p] = xp\n        elif xp < rd[p]:\n            rd[p] = xp\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d1 = fib(a[0])\n    d2 = fib(a[1])\n    (ld, rd) = (dict(), dict())\n    for key in list(d1.keys()) + list(d2.keys()):\n        ld[key] = min(d1.get(key, 0), d2.get(key, 0))\n        rd[key] = max(d1.get(key, 0), d2.get(key, 0))\n    for item in a[2:]:\n        fib_dicts(item, ld, rd)\n    ans = 1\n    for k in rd:\n        ans *= k ** rd[k]\n    print(ans)\nmain()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef solve(arr, n):\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    return ans\nn = int(input())\narr = [int(i) for i in input().split()]\narr.insert(0, 0)\nsuffix = [int(0) for _ in range(n + 1)]\nsuffix[n] = arr[n]\nfor i in range(2, n + 1):\n    suffix[n + 1 - i] = gcd(arr[n + 1 - i], suffix[n + 2 - i])\nd = [int(0) for _ in range(n + 1)]\nfor i in range(1, n):\n    d[i] = int(arr[i] * suffix[i + 1] / gcd(arr[i], suffix[i + 1]))\nprint(solve(d[1:], len(d) - 1))", "import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n    f = iter(open('C.txt').readlines())\n\n    def input():\n        return next(f)\nelse:\n    input = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nalen = max(A) + 1\nT = [1] * (alen + 1)\nT[0] = T[1] = 0\npos = 1\nwhile pos < alen + 1:\n    while pos < alen + 1 and T[pos] == 0:\n        pos += 1\n    for i in range(pos * 2, alen + 1, pos):\n        T[i] = 0\n    pos += 1\nprimes = [n for (n, i) in enumerate(T) if i == 1]\nK = [0] * alen\nfor a in A:\n    K[a] += 1\nres = 1\nfor prime in primes:\n    p = prime\n    while p < alen:\n        su = 0\n        for u in range(p, alen, p):\n            su += K[u]\n        if su <= n - 2:\n            break\n        else:\n            res *= prime\n        p *= prime\nprint(res)", "def gcd(b, a):\n    if a == 0:\n        return b\n    return gcd(a, b % a)\nN = int(input())\nn = list(map(int, input().split()))\nsuf = n[:]\nfor z in range(N - 2, -1, -1):\n    suf[z] = gcd(max(n[z], suf[z + 1]), min(n[z], suf[z + 1]))\nhcf = []\nfor w in range(N - 1):\n    hcf.append(n[w] * suf[w + 1] // gcd(max(n[w], suf[w + 1]), min(n[w], suf[w + 1])))\nans = hcf[0]\nfor u in range(1, len(hcf)):\n    ans = gcd(max(ans, hcf[u]), min(ans, hcf[u]))\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef sieve(m):\n    isPrime = [True for _ in range(m)]\n    primeDivisors = [[] for _ in range(m)]\n    for num in range(2, m, 2):\n        primeDivisors[num].append(2)\n    for num in range(3, m, 2):\n        if not isPrime[num]:\n            continue\n        for multiple in range(num, m, num):\n            isPrime[multiple] = False\n            primeDivisors[multiple].append(num)\n    return primeDivisors\n\ndef main():\n    mx = int(200000.0 + 5)\n    primeDivisors = sieve(mx)\n    n = int(input())\n    ara = [int(num) for num in input().split()]\n    if n == 1:\n        print(ara[0])\n        return\n    ans = 1\n    for prime in set(primeDivisors[ara[0]] + primeDivisors[ara[1]]):\n        firstMin = int(10000000000.0)\n        secondMin = int(10000000000.0)\n        for num in ara:\n            exp = 0\n            while num % prime == 0:\n                exp += 1\n                num /= prime\n            if exp < firstMin:\n                secondMin = firstMin\n                firstMin = exp\n            elif exp < secondMin:\n                secondMin = exp\n            if secondMin == 0:\n                break\n        for _ in range(secondMin):\n            ans *= prime\n    print(ans)\nmain()", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\npre = [1] * n\nsuf = [1] * n\ngp = a[0]\ngs = a[-1]\ng = a[0]\nfor i in range(n):\n    g = gcd(a[i], g)\nfor i in range(n):\n    a[i] = a[i] // g\nans = g\nfor i in range(n):\n    gp = gcd(a[i], gp)\n    gs = gcd(a[-i - 1], gs)\n    pre[i] = gp\n    suf[-i - 1] = gs\nfin = []\nfor i in range(n):\n    if i == 0:\n        fin.append(a[i] * suf[i + 1])\n    elif i == n - 1:\n        fin.append(a[i] * pre[n - 2])\n    else:\n        fin.append(a[i] * gcd(pre[i - 1], suf[i + 1]))\nf = fin[0]\nfor i in range(n):\n    f = gcd(fin[i], f)\nprint(ans * f)", "primes = []\n\ndef sieve(n):\n    marked = [True for i in range(n + 4)]\n    p = 2\n    while p * p <= n:\n        if marked[p] == True:\n            for i in range(p * p, n + 1, p):\n                marked[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if marked[p]:\n            primes.append(p)\n\ndef get_result(arr):\n    res = 1\n    for p in primes:\n        now = []\n        zeros = 0\n        for i in range(len(arr)):\n            cnt = 0\n            while arr[i] % p == 0:\n                arr[i] /= p\n                cnt += 1\n            if cnt == 0:\n                zeros += 1\n            now.append(cnt)\n            if zeros == 2:\n                break\n        if zeros == 2:\n            continue\n        now.sort()\n        mx = max(now[0], now[1])\n        res *= p ** mx\n    return res\nsieve(200000)\nn = input()\narr = list(map(int, input().split()))\nprint(get_result(arr))", "import math\n\ndef p_dec(n):\n    res = list()\n    while n > 1:\n        i = 2\n        while i <= n:\n            if n % i == 0:\n                res.append(i)\n                n //= i\n            else:\n                i += 1\n    return res\nn = int(input())\nA = list(map(int, input().split(' ')))\nif n < 2:\n    print(A[0])\nelse:\n    lcm = A[0] * A[1] // math.gcd(A[0], A[1])\n    pd = p_dec(lcm)\n    res = 1\n    for prime in pd:\n        encountered = 0\n        for i in range(len(A)):\n            if A[i] % prime == 0:\n                encountered += 1\n                A[i] //= prime\n            if i + 1 - encountered > 1:\n                break\n        if encountered >= n - 1:\n            res *= prime\n    print(res)", "n = int(input())\narr = input().split(' ')\nlis = [int(s) for s in arr]\nprime = [True for i in range(200001)]\np = 2\nwhile p <= 200000:\n    if prime[p] == True:\n        for i in range(p * p, 200001, p):\n            prime[i] = False\n    p += 1\nprime[1] = False\nprimes = []\nans = 1\nfor i in range(2, 200000):\n    if prime[i] == True:\n        primes.append(i)\nfor p in primes:\n    fmn = 100\n    smn = 100\n    for ele in lis:\n        if fmn == 0 and smn == 0:\n            break\n        cnt = 0\n        while ele % p == 0:\n            cnt += 1\n            ele = ele / p\n        if cnt <= fmn and cnt < smn:\n            smn = fmn\n            fmn = cnt\n        elif cnt < smn:\n            smn = cnt\n    ans = ans * pow(p, smn)\nprint(ans)", "from math import gcd\n\ndef ip():\n    return int(input())\n\ndef Ip():\n    return map(int, input().split())\nN = 200001\nn = ip()\nx = list(Ip())\nl = [0] * N\nfor i in x:\n    l[i] += 1\nans = 1\nm = max(x)\nfor i in range(m, 1, -1):\n    j = i\n    temp = 0\n    if ans % i != 0:\n        while j <= m:\n            temp += l[j]\n            j += i\n        if temp >= n - 1:\n            if ans == 1:\n                ans = i\n            else:\n                ans = ans * i // gcd(i, ans)\nprint(ans)", "factor_dict = {}\n\ndef factor(n):\n    n2 = n\n    if n in factor_dict:\n        return factor_dict[n]\n    d = {}\n    for i in range(2, n):\n        if i * i > n:\n            break\n        if n % i == 0:\n            c = 0\n            while n % i == 0:\n                c += 1\n                n = n // i\n            d[i] = c\n    if n > 1:\n        d[n] = 1\n    factor_dict[n2] = d\n    return d\n\ndef process(A):\n    primes = {}\n    answer = 1\n    n = len(A)\n    for x in A:\n        d = factor(x)\n        for p in d:\n            if p not in primes:\n                primes[p] = []\n            primes[p].append(d[p])\n    for p in primes:\n        if len(primes[p]) == n - 1:\n            answer = answer * p ** min(primes[p])\n        elif len(primes[p]) == n:\n            mins = [float('inf'), 0]\n            for i in range(n):\n                entry = [primes[p][i], i]\n                mins = min(entry, mins)\n            mins2 = [float('inf'), 0]\n            for i in range(n):\n                if i != mins[1]:\n                    entry = [primes[p][i], i]\n                    mins2 = min(entry, mins2)\n            answer = answer * p ** mins2[0]\n    return answer\nn = int(input())\nA = [int(x) for x in input().split()]\nprint(process(A))"]