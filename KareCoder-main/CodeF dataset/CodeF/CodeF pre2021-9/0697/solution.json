["def find_max_sub(arr, k):\n    curr = sum(arr[:k])\n    mx = curr\n    for (i, a) in enumerate(arr[k:]):\n        d = curr + a - arr[i]\n        if d > mx:\n            mx = d\n        curr = d\n    print(mx)\nn = int(input())\narr = list(map(int, input().split(' ')))\na = arr[::2] + arr[1::2] + arr[::2]\nfind_max_sub(a, (n + 1) // 2)", "from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    arr = rlint()\n    arr = arr[::2] + arr[1::2] + arr[::2]\n    l = (n + 1) // 2\n    cur = maxval = sum(arr[:l])\n    for i in range(l, len(arr)):\n        cur += arr[i] - arr[i - l]\n        maxval = max(maxval, cur)\n    print(maxval)\nmain()", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nd = 0\nan = 0\nfor i in range(0, n, 2):\n    d += a[i]\nfor i in range(len(a)):\n    an = max(an, d)\n    d = s - d\n    d += a[i]\nprint(an)", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nd = 0\nans = 0\nfor i in range(0, n, 2):\n    d += a[i]\nfor i in range(len(a)):\n    ans = max(ans, d)\n    d = s - d\n    d += a[i]\nprint(ans)", "n = int(input())\nl1 = list(map(int, input().split()))\nsum = 0\nfor i in range(0, n, 2):\n    sum = sum + l1[i]\nmax = sum\nif n > 1:\n    for i in range(1, n, 2):\n        sum = sum + l1[i] - l1[i - 1]\n        if sum > max:\n            max = sum\n    sum = sum + l1[0] - l1[-1]\n    if sum > max:\n        max = sum\n    for i in range(2, n, 2):\n        sum = sum + l1[i] - l1[i - 1]\n        if sum > max:\n            max = sum\n    print(max)\nelse:\n    print(max)", "import heapq\n\ndef solve(arr):\n    even_indicies = arr[0:len(arr):2]\n    odd_indicies = arr[1:len(arr):2]\n    modified_arr = even_indicies + odd_indicies + even_indicies\n    sum_len = (len(arr) + 1) // 2\n    summation = sum(modified_arr[:sum_len])\n    max_sum = summation\n    for i in range(len(arr) - 1):\n        summation = summation - modified_arr[i] + modified_arr[i + sum_len]\n        max_sum = max(summation, max_sum)\n    return max_sum\nn = int(input())\narr = [int(i) for i in input().split(' ')]\nprint(solve(arr))", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nc = 0\nans = 0\nfor i in range(0, n, 2):\n    c += a[i]\nfor i in range(len(a)):\n    ans = max(ans, c)\n    c = s - c\n    c += a[i]\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\ncount = 0\nfor i in range(0, n, 2):\n    count += l[i]\nm = count\nfor i in range(0, 2 * n - 2, 2):\n    count = count - l[i % n] + l[(i + 1) % n]\n    if count > m:\n        m = count\nprint(m)", "def solve(ls):\n    n = len(ls)\n    k = (n - 1) // 2\n    s = 0\n    for i in range(k + 1):\n        s += ls[2 * i]\n    s_max = s\n    for i in range(n):\n        s -= ls[2 * i % n]\n        s += ls[(2 * i + 1) % n]\n        s_max = max(s_max, s)\n    return s_max\n\ndef main(istr, ostr):\n    n = int(istr.readline())\n    ls = list(map(int, istr.readline().split()))\n    print(solve(ls), file=ostr)\nimport sys\nmain(sys.stdin, sys.stdout)", "n = int(input())\nl = list(map(int, input().split()))\nk = sum(l)\nl += l[0:2 * (n // 2 - 1)]\nl1 = l[0::2]\nl2 = l[1::2]\narr = []\nr = l1[0:n // 2]\nst = 0\nend = n // 2\nq = sum(r)\narr.append(q)\nfor i in range(n // 2):\n    q = q - l1[st] + l1[end]\n    arr.append(q)\n    st += 1\n    end += 1\nr = l2[0:n // 2]\nst = 0\nend = n // 2\nq = sum(r)\narr.append(q)\nfor i in range(n // 2 - 1):\n    q = q - l2[st] + l2[end]\n    arr.append(q)\n    st += 1\n    end += 1\nprint(k - min(arr))", "n = int(input())\nl = list(map(int, input().split()))\ncount = 0\nfor i in range(0, n, 2):\n    count += l[i]\nm = count\nfor i in range(0, 2 * n - 2, 2):\n    count = count - l[i % n] + l[(i + 1) % n]\n    if count > m:\n        m = count\nprint(m)", "n = int(input())\na = list(map(int, input().split()))\nif n == 1:\n    print(a[0])\n    exit()\ns1 = a[0] + a[1]\nfor i in range(3, n, 2):\n    s1 += a[i]\nans = s1\nk = 1\nfor i in range(n // 2):\n    s1 -= a[k]\n    s1 += a[k + 1]\n    k += 2\n    if s1 > ans:\n        ans = s1\ns2 = a[1] + a[2]\nfor i in range(4, n, 2):\n    s2 += a[i]\nif s2 > ans:\n    ans = s2\nk = 2\nfor i in range(n // 2 - 1):\n    s2 -= a[k]\n    s2 += a[k + 1]\n    k += 2\n    if s2 > ans:\n        ans = s2\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nlst1 = []\nlst2 = []\nfor i in range(0, n, 2):\n    lst1.append(lst[i])\nfor j in range(1, n, 2):\n    lst2.append(lst[j])\nlst = lst1 + lst2\nk = (n + 1) // 2\nsum_of_k_element = [0] * n\nsum_of_k_element[0] = sum(lst[:k])\nfor i in range(1, n):\n    sum_of_k_element[i] = sum_of_k_element[i - 1] - lst[i - 1] + lst[(i + k - 1) % n]\nprint(max(sum_of_k_element))", "n = int(input())\nlst = list(map(int, input().split()))\nlst1 = []\nlst2 = []\nfor i in range(0, n, 2):\n    lst1.append(lst[i])\nfor j in range(1, n, 2):\n    lst2.append(lst[j])\nlst = lst1 + lst2\nk = (n + 1) // 2\nsum_of_k_element = [0] * n\nsum_of_k_element[0] = sum(lst[:k])\nfor i in range(1, n):\n    sum_of_k_element[i] = sum_of_k_element[i - 1] - lst[i - 1] + lst[(i + k - 1) % n]\nprint(max(sum_of_k_element))", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve1(a):\n    n = len(a)\n\ndef solve():\n    n = mint()\n    a = list(mints())\n    if n == 1:\n        print(a[0])\n        return\n    a += a\n    b = [0] * (2 * n)\n    b[0] = a[0]\n    b[1] = a[1]\n    for i in range(2, len(b)):\n        b[i] = b[i - 2] + a[i]\n    r = min(b[n - 3], b[n - 3 + 1])\n    for j in range(n - 3 + 2, len(b)):\n        r = min(r, b[j] - b[j - (n - 3) - 2])\n    print(sum(a) // 2 - r)\nsolve()", "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(2, n):\n    l[i] = l[i] + l[i - 2]\ns = l[-1]\nfor i in range(1, n):\n    if i % 2 == 0:\n        s = max(s, l[-1] - l[i - 2] + l[i - 1])\n    elif i > 1:\n        s = max(s, l[-2] - l[i - 2] + l[i - 1])\n    else:\n        s = max(s, l[-2] + l[i - 1])\nprint(s)", "n = int(input())\nl = list(map(int, input().split(' ')))\nt = [l[i] for i in range(0, len(l), 2)]\nt = t + [l[i] for i in range(1, len(l), 2)]\nt = t + t\nk = int((n + 1) / 2)\ns = 0\nfor i in range(k):\n    s += t[i]\ncurr = s\nfor i in range(k, len(t)):\n    curr = curr + t[i] - t[i - k]\n    s = max(s, curr)\nprint(s)", "n = int(input())\na = list(map(int, input().split()))\nb = [a[i] for i in range(0, n, 2)] + [a[i] for i in range(1, n, 2)]\nb = b + b\nm = n // 2 + 1\ntotal = sum(b[0:m])\nans = total\nfor i in range(0, n + n - m):\n    total += b[i + m] - b[i]\n    ans = max(ans, total)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\ns = sum(l)\nif n == 1:\n    print(s)\n    exit()\nif n == 3:\n    print(s - min(l))\n    exit()\nres = []\nmaxi = 0\nif n // 2 % 2 == 1:\n    r = l[0]\n    for i in range(n // 2 // 2):\n        r += l[i * 2 + 2]\n    for i in range(n // 2 // 2):\n        r += l[-1 * (i * 2 + 2)]\n    res += [r]\n    mini = r\n    for i in range(1, n):\n        res += [s - res[-1] - l[(i + 2 * (n // 2 // 2) + 1) % n]]\n        mini = min(res[-1], mini)\nelse:\n    r = 0\n    for i in range(n // 2 // 2):\n        r += l[i * 2 + 1]\n    for i in range(n // 2 // 2):\n        r += l[-1 * (i * 2 + 1)]\n    res += [r]\n    mini = r\n    for i in range(1, n):\n        res += [s - res[-1] - l[(i + 2 * (n // 2 // 2)) % n]]\n        mini = min(res[-1], mini)\nprint(s - mini)", "import sys\ninput = sys.stdin.readline\nfor _ in range(1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(1, n, 2):\n        b.append(a[i])\n    for i in range(0, n, 2):\n        b.append(a[i])\n    b += b\n    sz = (n + 1) // 2\n    mx = cur = sum(b[:sz])\n    for i in range(sz, len(b)):\n        cur += b[i]\n        cur -= b[i - sz]\n        mx = max(mx, cur)\n    print(mx)", "import sys\nimport math as mt\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(n,) = I()\nl = I()\nar = []\nfor i in range(0, n, 2):\n    ar.append(l[i])\nfor i in range(1, n, 2):\n    ar.append(l[i])\nk = (n + 1) // 2\ns = sum(ar[:k])\nans = s\nar += ar\nfor i in range(k, 2 * n):\n    s -= ar[i - k]\n    s += ar[i]\n    ans = max(ans, s)\nprint(ans)", "from sys import stdin, stdout\nfi = stdin\nfo = stdout\n\ndef solve():\n    n = int(fi.readline())\n    a = [int(v) for v in fi.readline().split()]\n\n    def sum_odd(arr):\n        f1 = [0] * (n + 2)\n        f2 = [0] * (n + 2)\n        for i in range(n):\n            f1[i] = arr[i] + f1[i - 2]\n        for i in reversed(range(n)):\n            f2[i] = arr[i] + f2[i + 2]\n        result = 0\n        for i in range(0, n, 2):\n            result = max(result, f1[i] + f2[i + 1])\n        return result\n    res = max(sum_odd(a), sum_odd(a[1:] + a[:1]))\n    print(res)\nsolve()", "n = int(input())\nA = list(map(int, input().split()))\nB = A[::2] + A[1::2]\nB = B + B\nm = (n + 1) // 2\nwindow = sum(B[:m])\ncurSum = window\ni = m\nwhile i < len(B):\n    curSum -= B[i - m]\n    curSum += B[i]\n    window = max(window, curSum)\n    i += 1\nprint(window)", "n = int(input())\nA = input().split(' ')\nfor i in range(n):\n    A[i] = int(A[i])\nif n == 1:\n    print(A[0])\nelse:\n    s = 0\n    k = int((n - 1) / 2)\n    for i in range(k):\n        s += A[2 * i]\n    m = s\n    for i in range(k):\n        s = s + A[2 * k - 1 - 2 * i] - A[2 * k - 2 - 2 * i]\n        m = min(m, s)\n    for i in range(k):\n        s = s + A[2 * k - 2 * i] - A[2 * k - 1 - 2 * i]\n        m = min(m, s)\n    print(sum(A) - m)", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nd = 0\nan = 0\nfor i in range(0, n, 2):\n    d += a[i]\nfor i in range(len(a)):\n    an = max(an, d)\n    d = s - d\n    d += a[i]\nprint(an)", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = a + a\nk = n // 2\nnow = 9223372036854775807\ns = sum(a)\nif n == 1:\n    print(a[0])\n    sys.exit()\n(odd, even) = ([a[0]], [a[1]])\nfor x in range(2, 2 * n):\n    if x % 2 == 0:\n        odd.append(odd[-1] + b[x])\n    else:\n        even.append(even[-1] + b[x])\nfor x in range(n):\n    if x + k >= n:\n        break\n    if odd[x + k] - odd[x] < now:\n        now = odd[x + k] - odd[x]\n    if even[x + k] - even[x] < now:\n        now = even[x + k] - even[x]\nprint(s - now)", "n = int(input())\nl = [int(x) for x in input().split()] * 2\nfor i in range(2, 2 * n):\n    l[i] += l[i - 2]\ns = 0\nfor i in range(n):\n    if i >= 2:\n        a = l[n + i - 1] - l[i - 2]\n    else:\n        a = l[n + i - 1]\n    s = max(s, a)\nprint(s)", "n = int(input())\na = [int(x) for x in input().split()]\no = [0] * n\ne = [0] * n\nfor i in range(n):\n    if i > 0:\n        o[i] = o[i - 1]\n        e[i] = e[i - 1]\n    if i % 2 == 0:\n        e[i] += a[i]\n    else:\n        o[i] += a[i]\nans = max(e[n - 1], o[n - 1])\nif n % 2 == 1:\n    for i in range(n):\n        if i % 2 == 0:\n            ans = max(ans, e[i] + o[n - 1] - o[i])\n        else:\n            ans = max(ans, o[i] + e[n - 1] - e[i])\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\npref = [0] * (n + 1)\nsuff = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pref[i] = a[i - 1]\n    if i >= 2:\n        pref[i] += pref[i - 2]\nfor i in range(n, 0, -1):\n    suff[i] = a[i - 1]\n    if n - i >= 2:\n        suff[i] += suff[i + 2]\nans = 0\nfor i in range(1, n + 1):\n    ans = max(ans, suff[i] + pref[i - 1])\nprint(ans)", "def getsum(a, b, pref):\n    if b < a:\n        b += n\n    return pref[b] - pref[a]\nfor _ in range(1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pref0 = [0] * (len(arr) + 1)\n    pref1 = [0] * (len(arr) + 1)\n    for i in range(1, len(pref0)):\n        pref0[i] = pref0[i - 1]\n        pref1[i] = pref1[i - 1]\n        if i % 2 == 1:\n            pref0[i] += arr[i - 1]\n        else:\n            pref1[i] += arr[i - 1]\n    mx = pref0[-1]\n    s = sum(arr)\n    for i in range(n - 1):\n        if i % 2 == 0:\n            x = pref0[i + 1] + (s - pref0[-1] - pref1[i + 1])\n        else:\n            x = pref1[i + 1] + (s - pref1[-1] - pref0[i + 1])\n        mx = max(mx, x)\n    print(mx)", "n = int(input())\narr = list(map(int, input().rstrip().split()))\n(odd, even) = ([], [])\nif n == 1:\n    print(arr[0])\nelse:\n    for i in range(n):\n        if i % 2 == 0:\n            odd.append(arr[i])\n        else:\n            even.append(arr[i])\n    odd.extend(even)\n    odd.extend(odd)\n    k = (n + 1) / 2\n    (s, m, i, left) = (0, -1, 0, 0)\n    while i < n + k:\n        if i < k:\n            s += odd[i]\n        else:\n            if m < s:\n                m = s\n            if i == n + k - 1:\n                break\n            s -= odd[left]\n            s += odd[i]\n            left += 1\n        i += 1\n    print(m)", "n = int(input())\na = [int(num) for num in input().split()]\n\ndef nex(x):\n    if x == n - 1:\n        return 0\n    else:\n        return x + 1\ncoun = (n - 1) // 2\nif n > 3:\n    i = 0\n    sum = 0\n    ind = 0\n    while i < coun:\n        sum += a[ind]\n        ind += 2\n        i += 1\n    start = 0\n    end = 2 * (coun - 1) + start\n    lam = sum\n    for i in range(n - 1):\n        sum -= a[start]\n        start = nex(nex(start))\n        end = nex(nex(end))\n        sum += a[end]\n        lam = min(sum, lam)\n    tot = 0\n    for i in a:\n        tot += i\n    print(tot - lam)\nelif n == 1:\n    print(a[0])\nelse:\n    print(a[0] + a[1] + a[2] - min(a[0], a[1], a[2]))", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    if n == 1:\n        return aa[0]\n    dp = [[inf] * 2 for _ in range(n)]\n    dp[0][0] = aa[0]\n    dp[1][0] = aa[1]\n    dp[2][1] = aa[2]\n    for i in range(n - 2):\n        for j in range(2):\n            pre = dp[i][j]\n            if pre == inf:\n                continue\n            dp[i + 2][j] = min(dp[i + 2][j], pre + aa[i + 2])\n            if j == 0 and i + 3 < n:\n                dp[i + 3][1] = min(dp[i + 3][1], pre + aa[i + 3])\n    mn = min(dp[n - 3][0], dp[n - 2][0], dp[n - 2][1], dp[n - 1][1])\n    return sum(aa) - mn\ninf = 10 ** 16\nn = II()\naa = LI()\nprint(solve())"]