["import sys, os, io\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nT = int(input())\n\ndef dfs(start):\n    stack = [start]\n    visited = [False] * N\n    visited[start] = True\n    cnts = [-1] * N\n    while stack:\n        v = stack[-1]\n        ans = cnt = marker = 0\n        for u in edge[v]:\n            if visited[u] == False:\n                marker = 1\n                visited[u] = True\n                stack.append(u)\n            elif cnts[u] > -1:\n                ans = max(ans, cnts[u])\n                cnt += cnts[u]\n        if marker == 0:\n            cnts[v] = cnt + 1\n            ans = max(ans, N - 1 - cnt)\n            if ans == N // 2:\n                lis.append(v)\n            stack.pop()\n    return\nfor t in range(T):\n    N = int(input())\n    edge = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = map(int, input().split())\n        if i == 0:\n            edges = [a, b]\n        edge[a - 1].append(b - 1)\n        edge[b - 1].append(a - 1)\n    if N % 2 == 1:\n        print(*edges)\n        print(*edges)\n    else:\n        lis = []\n        dfs(0)\n        if len(lis) <= 1:\n            print(*edges)\n            print(*edges)\n        else:\n            for l in edge[lis[0]]:\n                if l != lis[1]:\n                    print(lis[0] + 1, l + 1)\n                    print(lis[1] + 1, l + 1)\n                    break", "import sys, os, io\ninput = sys.stdin.readline\nT = int(input())\n\ndef dfs(start):\n    stack = [start]\n    parent = [N] * N\n    parent[start] = -1\n    cnts = [1] * N\n    while stack:\n        v = stack[-1]\n        ans = marker = 0\n        for u in edge[v]:\n            if u == parent[v]:\n                continue\n            if parent[u] == N:\n                marker = 1\n                parent[u] = v\n                stack.append(u)\n            else:\n                ans = max(ans, cnts[u])\n                cnts[v] += cnts[u]\n        if marker == 0:\n            stack.pop()\n            ans = max(ans, N - cnts[v])\n            if ans == N // 2:\n                lis.append(v)\n    return\nfor t in range(T):\n    N = int(input())\n    edge = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = map(int, input().split())\n        if i == 0:\n            edges = [a, b]\n        edge[a - 1].append(b - 1)\n        edge[b - 1].append(a - 1)\n    if N % 2 == 1:\n        print(*edges)\n        print(*edges)\n    else:\n        lis = []\n        dfs(0)\n        if len(lis) <= 1:\n            print(*edges)\n            print(*edges)\n        else:\n            for l in edge[lis[0]]:\n                if l != lis[1]:\n                    print(lis[0] + 1, l + 1)\n                    print(lis[1] + 1, l + 1)\n                    break"]