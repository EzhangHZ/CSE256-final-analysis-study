["def checker(n, lst):\n    (a, b) = ([0] * n, [0] * n)\n    for i in range(1, n):\n        a[i] = a[i - 1] | lst[i - 1]\n        b[n - i - 1] = b[len(lst) - i] | lst[n - i]\n    (elem, pos) = (-1, -1)\n    for i in range(n):\n        y = a[i] | b[i]\n        cur = (lst[i] | y) - y\n        if cur > elem:\n            (elem, pos) = (cur, i)\n    (lst[0], lst[pos]) = (lst[pos], lst[0])\n    return ' '.join([str(x) for x in lst])\nm = int(input())\nc = [int(i) for i in input().split()]\nprint(checker(m, c))", "n = int(input())\na = [int(x) for x in input().split()]\nl = sorted(a, reverse=True)\nx = l[0]\nbits = 0\nwhile x > 0:\n    x = x >> 1\n    bits += 1\nnum = 0\nfor i in range(bits):\n    count = 0\n    ind = 0\n    z = 1 << bits - i - 1\n    for j in range(len(a)):\n        if z & l[j] == z:\n            count += 1\n            ind = j\n        if count > 1:\n            break\n    if count == 1:\n        num = ind\n        break\n(l[num], l[0]) = (l[0], l[num])\nprint(*l)", "n = int(input())\na = [int(x) for x in input().split()]\nl = sorted(a, reverse=True)\nx = l[0]\nbits = 0\nwhile x > 0:\n    x = x >> 1\n    bits += 1\nnum = 0\nfor i in range(bits):\n    count = 0\n    ind = 0\n    z = 1 << bits - i - 1\n    for j in range(len(a)):\n        if z & l[j] == z:\n            count += 1\n            ind = j\n        if count > 1:\n            break\n    if count == 1:\n        num = ind\n        break\n(l[num], l[0]) = (l[0], l[num])\nprint(*l)", "n = int(input())\na = [int(x) for x in input().split()]\nl = sorted(a, reverse=True)\nx = l[0]\nbits = 0\nwhile x > 0:\n    x = x >> 1\n    bits += 1\nnum = 0\nfor i in range(bits):\n    count = 0\n    ind = 0\n    z = 1 << bits - i - 1\n    for j in range(len(a)):\n        if z & l[j] == z:\n            count += 1\n            ind = j\n        if count > 1:\n            break\n    if count == 1:\n        num = ind\n        break\n(l[num], l[0]) = (l[0], l[num])\nprint(*l)", "n = int(input())\nans = list(map(int, input().split()))\nll = [0] * n\nrr = [0] * n\ns = 0\nfor i in range(n):\n    s |= ans[i]\n    ll[i] = s\ns = 0\nfor i in range(n - 1, -1, -1):\n    s |= ans[i]\n    rr[i] = s\nmx = 0\nmxi = 0\nfor i in range(n):\n    s = 0\n    if i - 1 >= 0:\n        s |= ll[i - 1]\n    if i + 1 < n:\n        s |= rr[i + 1]\n    cur = (ans[i] | s) - s\n    if cur > mx:\n        mx = cur\n        mxi = i\n(ans[0], ans[mxi]) = (ans[mxi], ans[0])\nprint(*ans)", "n = int(input().strip())\nA = list(map(int, input().strip().split()))\nA_set = list(set(A))\nif len(A) == 1 or len(A_set) == 1:\n    print(' '.join(list(map(str, A))))\nelse:\n    m = len(A_set)\n    prefix = [~A_set[0]] * m\n    postfix = [~A_set[-1]] * m\n    for i in range(1, m):\n        prefix[i] = prefix[i - 1] & ~A_set[i]\n    for i in range(m - 2, -1, -1):\n        postfix[i] = postfix[i + 1] & ~A_set[i]\n    max_ans = -1\n    index = -1\n    for i in range(1, m - 1):\n        ans = A_set[i] & prefix[i - 1] & postfix[i + 1]\n        if ans > max_ans:\n            max_ans = ans\n            index = i\n    ans = A_set[0] & postfix[1]\n    if ans > max_ans:\n        max_ans = ans\n        index = 0\n    ans = A_set[m - 1] & prefix[m - 2]\n    if ans > max_ans:\n        max_ans = ans\n        index = m - 1\n    ans = A_set[index]\n    A.remove(ans)\n    A.insert(0, ans)\n    print(' '.join(list(map(str, A))))", "__author__ = 'tanunia'\nn = int(input())\na = list(map(int, input().split()))\n(left, right) = ([0 for _ in range(len(a))], [0 for _ in range(len(a))])\nfor i in range(1, len(a)):\n    left[i] = left[i - 1] | a[i - 1]\n    right[len(a) - i - 1] = right[len(a) - i] | a[len(a) - i]\n(best, best_ind) = (-1, -1)\nfor i in range(len(a)):\n    y = left[i] | right[i]\n    cur = (a[i] | y) - y\n    if cur > best:\n        (best, best_ind) = (cur, i)\n(a[0], a[best_ind]) = (a[best_ind], a[0])\nprint(' '.join([str(x) for x in a]))", "n = int(input())\nans = list(map(int, input().split()))\nll = [0] * n\nrr = [0] * n\ns = 0\nfor i in range(n):\n    s |= ans[i]\n    ll[i] = s\ns = 0\nfor i in range(n - 1, -1, -1):\n    s |= ans[i]\n    rr[i] = s\nmx = 0\nmxi = 0\nfor i in range(n):\n    s = 0\n    if i - 1 >= 0:\n        s |= ll[i - 1]\n    if i + 1 < n:\n        s |= rr[i + 1]\n    cur = (ans[i] | s) - s\n    if cur > mx:\n        mx = cur\n        mxi = i\n(ans[0], ans[mxi]) = (ans[mxi], ans[0])\nprint(*ans)", "n = int(input().strip())\nA = list(map(int, input().strip().split()))\nA_set = list(set(A))\nif len(A) == 1 or len(A_set) == 1:\n    print(' '.join(list(map(str, A))))\nelse:\n    m = len(A_set)\n    prefix = [~A_set[0]] * m\n    postfix = [~A_set[-1]] * m\n    for i in range(1, m):\n        prefix[i] = prefix[i - 1] & ~A_set[i]\n    for i in range(m - 2, -1, -1):\n        postfix[i] = postfix[i + 1] & ~A_set[i]\n    max_ans = -1\n    index = -1\n    for i in range(1, m - 1):\n        ans = A_set[i] & prefix[i - 1] & postfix[i + 1]\n        if ans > max_ans:\n            max_ans = ans\n            index = i\n    ans = A_set[0] & postfix[1]\n    if ans > max_ans:\n        max_ans = ans\n        index = 0\n    ans = A_set[m - 1] & prefix[m - 2]\n    if ans > max_ans:\n        max_ans = ans\n        index = m - 1\n    ans = A_set[index]\n    A.remove(ans)\n    A.insert(0, ans)\n    print(' '.join(list(map(str, A))))", "n = int(input().strip())\nA = list(map(int, input().strip().split()))\nA_set = list(set(A))\nif len(A) == 1 or len(A_set) == 1:\n    print(' '.join(list(map(str, A))))\nelse:\n    m = len(A_set)\n    prefix = [~A_set[0]] * m\n    postfix = [~A_set[-1]] * m\n    for i in range(1, m):\n        prefix[i] = prefix[i - 1] & ~A_set[i]\n    for i in range(m - 2, -1, -1):\n        postfix[i] = postfix[i + 1] & ~A_set[i]\n    max_ans = -1\n    index = -1\n    for i in range(1, m - 1):\n        ans = A_set[i] & prefix[i - 1] & postfix[i + 1]\n        if ans > max_ans:\n            max_ans = ans\n            index = i\n    ans = A_set[0] & postfix[1]\n    if ans > max_ans:\n        max_ans = ans\n        index = 0\n    ans = A_set[m - 1] & prefix[m - 2]\n    if ans > max_ans:\n        max_ans = ans\n        index = m - 1\n    ans = A_set[index]\n    A.remove(ans)\n    A.insert(0, ans)\n    print(' '.join(list(map(str, A))))", "input()\na = input().split()\ns = {*range(len(a))}\nfor x in zip(*(f'{int(x):30b}' for x in a)):\n    if x.count('1') == 1:\n        i = x.index('1')\n        a = [a.pop(i)] + a\n        break\nprint(*[a.pop(s.pop())] + a)", "def main():\n    n = int(input())\n    aa = list(map(int, input().split()))\n    ll = [0] * n\n    rr = [0] * n\n    s = 0\n    for i in range(n):\n        s |= aa[i]\n        ll[i] = s\n    s = 0\n    for i in range(n - 1, -1, -1):\n        s |= aa[i]\n        rr[i] = s\n    mx = 0\n    mxi = 0\n    for i in range(n):\n        s = 0\n        if i - 1 >= 0:\n            s |= ll[i - 1]\n        if i + 1 < n:\n            s |= rr[i + 1]\n        cur = (aa[i] | s) - s\n        if cur > mx:\n            mx = cur\n            mxi = i\n    (aa[0], aa[mxi]) = (aa[mxi], aa[0])\n    print(*aa)\nmain()", "n = int(input())\na = list(map(int, input().split(' ')))\nif n == 1:\n    print(a[0])\nelse:\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = ~a[0]\n    suffix[n - 1] = ~a[n - 1]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] & ~a[i]\n    for i in range(2, n + 1):\n        suffix[n - i] = suffix[n - i + 1] & ~a[n - i]\n    element = -1 * 2 ** 32\n    elem_index = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] & suffix[i + 1] > element:\n                element = a[i] & suffix[i + 1]\n                elem_index = i\n        elif i == n - 1:\n            if a[i] & prefix[i - 1] > element:\n                element = a[i] & prefix[i - 1]\n                elem_index = i\n        elif a[i] & prefix[i - 1] & suffix[i + 1] > element:\n            element = a[i] & prefix[i - 1] & suffix[i + 1]\n            elem_index = i\n    temp = a[0]\n    a[0] = a[elem_index]\n    a[elem_index] = temp\n    print(' '.join(list(map(str, a))))", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "input()\na = input().split()\nfor x in zip(*(f'{int(x):30b}' for x in a)):\n    if x.count('1') == 1:\n        i = x.index('1')\n        a = [a.pop(i)] + a\n        break\nprint(*a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "def main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    before = [0] * n\n    after = [0] * n\n    accleft = 0\n    for i in range(n):\n        before[i] = accleft\n        accleft |= a[i]\n    accright = 0\n    i = n - 1\n    while i >= 0:\n        after[i] = accright\n        accright |= a[i]\n        i -= 1\n    answer = a[0] & ~before[0] & ~after[0]\n    bindex = 0\n    for i in range(1, n):\n        v = a[i] & ~before[i] & ~after[i]\n        if v > answer:\n            bindex = i\n            answer = v\n    print(a[bindex], end=' ')\n    for i in range(n):\n        if i != bindex:\n            print(a[i], end=' ')\nmain()", "input()\na = input().split()\nfor x in zip(*(f'{int(x):30b}' for x in a)):\n    if x.count('1') == 1:\n        a = [a.pop(x.index('1'))] + a\n        break\nprint(*a)", "input()\na = input().split()\nfor x in zip(*(f'{int(x):30b}' for x in a)):\n    if x.count('1') == 1:\n        a = (a.pop(x.index('1')), *a)\n        break\nprint(*a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "input()\na = input().split()\nprint(a.pop(next((x for x in zip(*(f'{int(x):30b}' for x in a)) if x.count('1') == 1), '1').index('1')), *a)", "import sys\nn = int(sys.stdin.readline().rstrip())\nnum = list(map(int, sys.stdin.readline().rstrip().split()))\nmax_len = 0\nfor i in num:\n    bi = bin(i)[2:]\n    if max_len < len(bi):\n        max_len = len(bi)\nst = 0\nmax_len -= 1\nwhile True:\n    cnt = 0\n    for (idx, i) in enumerate(num):\n        if 2 ** max_len & i > 0:\n            cnt += 1\n            if cnt > 1:\n                break\n            if cnt == 1:\n                st = idx\n    if cnt == 1:\n        break\n    max_len -= 1\n    if max_len < 0:\n        break\nprint(num[st], end=' ')\ndel num[st]\nfor i in num:\n    print(i, end=' ')", "import sys\nn = int(input())\narr = list(map(int, input().split()))\npref = [0] * n\nsuff = [0] * n\n(pref[0], suff[n - 1]) = (sys.maxsize, sys.maxsize)\nfor i in range(1, n):\n    pref[i] = pref[i - 1] & ~arr[i - 1]\nfor i in range(n - 2, -1, -1):\n    suff[i] = suff[i + 1] & ~arr[i + 1]\nans = -sys.maxsize - 1\ntemp = 0\nfor i in range(n):\n    temp = pref[i] & arr[i] & suff[i]\n    if temp > ans:\n        ans = temp\n        pos = i\nprint(arr[pos], *arr[:pos], *arr[pos + 1:])", "n = int(input())\narr = list(map(int, input().split()))\npref = [0] * n\nsuf = [0] * n\npref[0] = arr[0]\nfor i in range(1, n):\n    pref[i] = pref[i - 1] | arr[i]\nsuf[-1] = arr[-1]\nfor i in range(n - 2, -1, -1):\n    suf[i] = suf[i + 1] | arr[i]\nmaxind = -1\nmaxans = -1\nfor i in range(n):\n    prefval = pref[i - 1] if i else 0\n    sufval = suf[i + 1] if i < n - 1 else 0\n    val = arr[i] & ~(prefval | sufval)\n    if val > maxans:\n        maxind = i\n        maxans = val\nprint(arr[maxind], *arr[:maxind], *arr[maxind + 1:])", "n = int(input())\na = list(map(int, input().split()))\nbefore = [~a[0]]\nafter = [~a[-1]]\nfor i in range(1, n):\n    before.append(before[-1] & ~a[i])\nfor i in range(n - 2, -1, -1):\n    after.append(after[-1] & ~a[i])\nafter = after[::-1]\n(maxi, ind) = (-1, -1)\nfor i in range(n):\n    current = a[i]\n    if i == 0:\n        if n > 1:\n            check = current & after[1]\n            if maxi < check:\n                maxi = check\n                ind = i\n        elif maxi < current:\n            maxi = current\n            ind = i\n    elif i >= n - 1:\n        if n > 1:\n            check = current & before[i - 1]\n            if maxi < check:\n                maxi = check\n                ind = i\n        elif maxi < current:\n            maxi = current\n            ind = i\n    else:\n        check = before[i - 1] & current & after[i + 1]\n        if maxi < check:\n            maxi = check\n            ind = i\nresult = [a[ind]] + a[:ind] + a[ind + 1:]\nprint(*result)", "n = int(input())\nnumbers = list(map(int, input().split()))\ncandidate = 0\nprefix = [0] * n\nsuffix = [0] * n\nprefix[0] = suffix[n - 1] = 2147483647\nfor i in range(1, n):\n    prefix[i] = prefix[i - 1] & ~numbers[i - 1]\ni = n - 2\nwhile i >= 0:\n    suffix[i] = suffix[i + 1] & ~numbers[i + 1]\n    i -= 1\nans = -1\npos = -1\nfor i in range(n):\n    tmp = prefix[i] & numbers[i] & suffix[i]\n    if tmp > ans:\n        ans = tmp\n        pos = i\nprint(numbers[pos], end=' ')\nfor i in range(n):\n    if i != pos:\n        print(numbers[i], end=' ')", "n = int(input())\nl = list(map(int, input().split()))\np = [0] * n\ntemp = ~l[0]\nfor i in range(1, n):\n    p[i] = temp\n    temp &= ~l[i]\ntemp = ~l[-1]\nans = [-1, -float('inf')]\nfor i in range(n - 2, -1, -1):\n    if i != 0:\n        p[i] &= temp\n        temp &= ~l[i]\n        p[i] &= l[i]\n        if ans[1] < p[i]:\n            ans[0] = i\n            ans[1] = p[i]\n    else:\n        p[i] = l[i] & temp\n        if ans[1] < p[i]:\n            ans[0] = i\n            ans[1] = p[i]\np[-1] &= l[-1]\nif ans[1] < p[-1]:\n    ans[0] = n - 1\n    ans[1] = p[-1]\nprint(l[ans[0]], end=' ')\nfor i in range(n):\n    if i == ans[0]:\n        continue\n    print(l[i], end=' ')\nprint()", "n = int(input())\na = list(map(int, input().split()))\nif n == 1:\n    print(a[0])\nelse:\n    pref = [0] * n\n    suff = [0] * n\n    pref[1] = ~a[0]\n    suff[n - 2] = ~a[-1]\n    for i in range(2, n):\n        pref[i] = pref[i - 1] & ~a[i - 1]\n    for i in range(n - 3, -1, -1):\n        suff[i] = suff[i + 1] & ~a[i + 1]\n    max = a[0] & suff[0]\n    pos = 0\n    for i in range(1, n):\n        if i == n - 1:\n            A = pref[i] & a[i]\n        else:\n            A = pref[i] & a[i] & suff[i]\n        if A > max:\n            max = A\n            pos = i\n    print(a[pos], end=' ')\n    for i in range(n):\n        if i != pos:\n            print(a[i], end=' ')", "n = int(input())\na = list(map(int, input().split()))\nexist = 0\nfinal = max(a)\nok = 2 ** 30 - 1\nfor i in range(n):\n    tmp = a[i] ^ exist\n    tmp2 = a[i] & exist\n    ok = ok & ~tmp2\n    final = (final | tmp) & ok\n    exist = exist | a[i]\nfinal = format(final, 'b').zfill(30)\nidx = 0\nfor i in range(30):\n    if final[i] == '1':\n        idx = i\n        break\nfor i in range(n):\n    if format(a[i], 'b').zfill(30)[idx] == '1':\n        idx = i\n        break\nprint(a[idx], end=' ')\nfor i in range(n):\n    if i != idx:\n        print(a[i], end=' ')", "import sys\nimport collections\ninput = sys.stdin.readline\n\ndef solve(x, y):\n    return (x | y) - y\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    acc1 = [0] * N\n    acc1[0] = A[0]\n    for i in range(1, N):\n        acc1[i] = acc1[i - 1] | A[i]\n    acc2 = [0] * N\n    acc2[-1] = A[-1]\n    for i in range(N - 2, -1, -1):\n        acc2[i] = acc2[i + 1] | A[i]\n    if N == 1:\n        print(A[0])\n        return\n    ma = -1\n    memo = 0\n    for i in range(N):\n        if i == 0:\n            x = solve(A[i], acc2[1])\n        elif i == N - 1:\n            x = solve(A[i], acc1[N - 2])\n        else:\n            x = solve(A[i], acc2[i + 1] | acc1[i - 1])\n        tmp = ma\n        ma = max(x, ma)\n        if ma != tmp:\n            memo = i\n    print(A[memo], end=' ')\n    for (i, v) in enumerate(A):\n        if i == memo:\n            continue\n        print(v, end=' ')\nmain()", "n = int(input())\naa = [int(i) for i in input().split()]\npre = [~aa[0]]\nsuff = [~aa[-1]]\nfor i in range(1, n):\n    pre.append(pre[-1] & ~aa[i])\nfor i in range(n - 2, -1, -1):\n    suff.append(suff[-1] & ~aa[i])\nsuff = suff[::-1]\n(maxi, ind) = (-1, -1)\nfor i in range(0, n):\n    cur = aa[i]\n    if i == 0:\n        if n > 1:\n            check = cur & suff[1]\n            if maxi < check:\n                maxi = check\n                ind = i\n        elif maxi < cur:\n            maxi = cur\n            ind = i\n    elif i == n - 1:\n        if n > 1:\n            check = cur & pre[i - 1]\n            if maxi < check:\n                maxi = i\n                ind = i\n        elif maxi < cur:\n            maxi = cur\n            ind = i\n    else:\n        check = pre[i - 1] & cur & suff[i + 1]\n        if maxi < check:\n            maxi = check\n            ind = i\nans = [aa[ind]]\nans += aa[ind + 1:]\nans += aa[:ind]\nprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\na = a[::-1]\nk = 0\nm = 0\nl1 = [0] * n\nl1[0] = a[0]\nl2 = [0] * n\nl2[n - 1] = a[n - 1]\nfor i in range(1, n):\n    l1[i] = l1[i - 1] | a[i]\n    l2[n - 1 - i] = l2[n - i] | a[n - i - 1]\nfor i in range(n):\n    s = 0\n    if i > 0:\n        s = s | l1[i - 1]\n    if i < n - 1:\n        s = s | l2[i + 1]\n    s = (a[i] | s) - s\n    if m < s:\n        m = s\n        k = i\n(a[0], a[k]) = (a[k], a[0])\nprint(*a)", "input()\na = input().split()\ns = {*range(len(a))}\nfor x in zip(*(f'{int(x):30b}' for x in a)):\n    if x.count('1') == 1:\n        t = {i for (i, y) in enumerate(x) if '0' < y}\n        if s & t:\n            s &= t\nprint(*[a.pop(s.pop())] + a)", "n = int(input())\narr = [int(i) for i in input().split()]\nvar = 2 ** 30\nwhile var and len([i for i in arr if i & var]) != 1:\n    var >>= 1\nfor i in range(n):\n    if var & arr[i]:\n        break\n(arr[i], arr[0]) = (arr[0], arr[i])\nprint(*arr)", "n = int(input())\nmx = 0\na = [0] * n\nk = 0\nfor i in input().split():\n    a[k] = int(i)\n    mx = max(a[k], mx)\n    k += 1\nm = 0\nwhile 2 ** m <= mx:\n    m += 1\nrz = 0\nfor i in range(m, -1, -1):\n    if rz:\n        break\n    for j in range(n):\n        if a[j] & 2 ** i:\n            if rz:\n                rz = 0\n                break\n            else:\n                rz = a[j]\nif rz:\n    print(rz, '', end='')\n    a.remove(rz)\n    n -= 1\nif n:\n    for i in range(n):\n        print(a[i], '', end='')", "n = int(input(''))\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nsuff = [0] * (n + 1)\npre = [0] * n\nmx = -100000000000000\nind = -1\nsuff[n - 1] = ~arr[n - 1]\nfor i in range(n - 2, -1, -1):\n    suff[i] = suff[i + 1] & ~arr[i]\nfor i in range(n):\n    if i == 0:\n        ase = ~arr[0]\n        now = arr[i] & suff[1]\n    else:\n        now = arr[i]\n        if i != n - 1:\n            now = arr[i] & suff[i + 1]\n        now = now & ase\n        ase = ase & ~arr[i]\n    if now > mx:\n        mx = now\n        ind = i\nfor i in range(n):\n    if i == 0:\n        ase = ~arr[0]\n        now = arr[i] & suff[1]\n    else:\n        now = arr[i]\n        if i != n - 1:\n            now = arr[i] & suff[i + 1]\n        now = now & ase\n        ase = ase & ~arr[i]\n    if now > mx:\n        mx = now\n        ind = i\ntemp = arr[ind]\narr[ind] = arr[0]\narr[0] = temp\nprint(*arr)", "n = int(input())\narr = list(map(int, input().split()))\nfl = False\nmax_ans = 0\nfor i in range(n):\n    ans = arr[i]\n    for j in range(n):\n        if i != j:\n            ans = ans & ~arr[j]\n            if ans <= max_ans:\n                break\n    if ans > max_ans:\n        max_ans = ans\n        idx = i\n        fl = True\nif fl:\n    (arr[0], arr[idx]) = (arr[idx], arr[0])\nprint(*arr)", "def f(x, y):\n    return (x | y) - y\n\ndef solve(a):\n    bit = 33\n    while bit >= 0:\n        count = 0\n        for item in a:\n            if 1 << bit & item:\n                count += 1\n        if count == 1:\n            break\n        bit -= 1\n    if bit < 0:\n        return a\n    result = []\n    skip = None\n    for (i, item) in enumerate(a):\n        if 1 << bit & item:\n            result.append(item)\n            skip = i\n    for (i, item) in enumerate(a):\n        if i != skip:\n            result.append(item)\n    return result\nn = int(input())\na = [int(x) for x in input().split()]\nprint(' '.join(map(str, solve(a))))", "n = int(input())\ns = list(map(int, input().split()))\nfor i in range(30, -1, -1):\n    if sum((1 for x in s if x & 1 << i)) == 1:\n        s.sort(key=lambda x: -(x & 1 << i))\n        break\nprint(*s)", "n = int(input())\na = list(map(int, input().split()))\nfl = False\nmaxqqq = 0\nmaxi = 0\nfor i in range(n):\n    qqq = a[i]\n    for j in range(n):\n        if j != i:\n            qqq = (qqq | a[j]) - a[j]\n            if qqq <= maxqqq:\n                break\n    if qqq > maxqqq:\n        maxqqq = qqq\n        maxi = i\n        fl = True\nif fl:\n    (a[maxi], a[0]) = (a[0], a[maxi])\nfor i in range(n):\n    print(a[i], end=' ')", "import math\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    lst = [[] for _ in range(30)]\n    for i in a:\n        nm = bin(i)[2:]\n        o = 0\n        for k in range(len(nm) - 1, -1, -1):\n            if nm[k] == '1':\n                lst[o].append(i)\n            o += 1\n    for i in range(len(lst) - 1, -1, -1):\n        if len(lst[i]) == 1:\n            for k in range(0, len(a)):\n                if a[k] & 2 ** i == 2 ** i:\n                    (a[0], a[k]) = (a[k], a[0])\n                    for c in a:\n                        print(c, end=' ')\n                    return\n    for c in a:\n        print(c, end=' ')\nt = 1\nfor i in range(t):\n    main()", "def main():\n    n = int(input())\n    ints = list(map(int, input().split(' ')))\n    bins = []\n    for i in range(31):\n        bins.append([])\n    for num in ints:\n        s = bin(num)[2:]\n        prefix = '0' * (31 - len(s))\n        s = prefix + s\n        i = 0\n        while i <= 30:\n            if s[i] == '1':\n                bins[i].append(num)\n            i += 1\n    i = 0\n    found = False\n    while i <= 30:\n        if len(bins[i]) == 1:\n            to_print = bins[i][0]\n            found = True\n            break\n        i += 1\n    if found:\n        answer = str(to_print) + ' '\n        for num in ints:\n            if num != to_print:\n                answer += str(num) + ' '\n    else:\n        answer = ''\n        for num in ints:\n            answer += str(num) + ' '\n    print(answer)\nmain()", "n = int(input())\narr = list(map(int, input().split()))\nfl = False\nmax_ans = 0\nfor i in range(n):\n    ans = arr[i]\n    for j in range(n):\n        if i != j:\n            ans = (ans | arr[j]) - arr[j]\n            if ans <= max_ans:\n                break\n    if ans > max_ans:\n        max_ans = ans\n        idx = i\n        fl = True\nif fl:\n    (arr[0], arr[idx]) = (arr[idx], arr[0])\nprint(*arr)", "n = int(input())\narr = list(map(int, input().split()))\nfl = False\nmax_ans = 0\nfor i in range(n):\n    ans = arr[i]\n    for j in range(n):\n        if i != j:\n            ans = (ans | arr[j]) - arr[j]\n            if ans <= max_ans:\n                break\n    if ans > max_ans:\n        max_ans = ans\n        idx = i\n        fl = True\nif fl:\n    (arr[0], arr[idx]) = (arr[idx], arr[0])\nprint(*arr)", "n = int(input())\nA = [int(x) for x in input().split()]\nbit = 2 ** 30\nwhile bit:\n    B = []\n    for i in range(n):\n        if A[i] & bit:\n            B.append(i)\n    if len(B) == 1:\n        print(' '.join((str(x) for x in [A[B[0]]] + A[:B[0]] + A[B[0] + 1:])))\n        exit()\n    bit >>= 1\nprint(' '.join((str(x) for x in A)))", "n = int(input())\na = list(map(int, input().split()))\nr = 0\nfor i in range(29, -1, -1):\n    c = 0\n    for j in a:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "def solve(a):\n    count = [0] * 30\n    for e in a:\n        for i in range(30):\n            if e & 1 << i:\n                count[i] += 1\n    i = 29\n    while i >= 0 and count[i] != 1:\n        i -= 1\n    if i < 0:\n        return a\n    for j in range(len(a)):\n        if a[j] & 1 << i:\n            return [a[j]] + a[:j] + a[j + 1:]\n    assert False\nn = int(input())\na = list(map(int, input().split()))\nprint(*solve(a))", "n = int(input())\na = list(map(int, input().split()))\nx = max(a)\nd = 0\nc = 0\nr = 0\nwhile x:\n    x >>= 1\n    d += 1\nfor i in range(d - 1, -1, -1):\n    c = 0\n    for j in a:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))", "n = int(input())\na = list(map(int, input().split()))\nr = 0\nfor i in range(29, -1, -1):\n    c = 0\n    for j in a:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))", "n = int(input())\na = list(map(int, input().split()))\nd = 0\nc = 0\nr = 0\nfor i in range(29, -1, -1):\n    c = 0\n    for j in a:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))", "input()\na = list(map(int, input().split()))\nr = 0\nfor i in range(29, -1, -1):\n    c = 0\n    for j in a:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    st = 2 ** 30\n    while st > 0:\n        ans = 0\n        ind = 0\n        for i in range(n):\n            if a[i] % (st * 2) >= st:\n                ans += 1\n                ind = i\n        if ans == 1:\n            (a[0], a[ind]) = (a[ind], a[0])\n            print(*a)\n            return\n        st = st // 2\n    print(*a)\nmain()", "n = int(input())\na = [int(s) for s in input().split(' ')]\nbitmap = [[] for _ in range(33)]\nfor (i, b) in enumerate(a):\n    b_bin = bin(b)[2:]\n    for (j, b_str) in enumerate(b_bin[::-1]):\n        if b_str == '1':\n            bitmap[j].append(i)\nindex = -1\nfor i in range(32, -1, -1):\n    if bitmap[i].__len__() == 1:\n        index = bitmap[i][0]\n        break\nif index != -1:\n    print(a[index], end=' ')\n    for i in range(n):\n        if i != index:\n            print(a[i], end=' ')\nelse:\n    for i in range(n):\n        print(a[i], end=' ')", "n = int(input())\na = list(map(int, input().split()))\nb = set(a)\nx = max(a)\nd = 0\nc = 0\nr = 0\nwhile x:\n    x >>= 1\n    d += 1\nfor i in range(d - 1, -1, -1):\n    c = 0\n    for j in b:\n        if j >> i & 1:\n            c += 1\n            r = j\n    if c == 1:\n        break\na.remove(r)\nprint(r, ' '.join(map(str, a)))", "from functools import reduce\nimport operator\nn = int(input())\na = [int(x) for x in input().split()]\npows = [pow(2, i) for i in range(0, 30)]\ninit = [0 for i in range(0, 30)]\nxl = reduce(lambda l, x: [l[i] + (x & pows[i]) for i in range(0, 30)], a, init)\nbitmask = [xl[i] / pows[i] for i in range(0, 30)]\nxr = 0\nfor i in range(0, 30):\n    if bitmask[i] == 1:\n        xr += pows[i]\nm = 0\nopt = a[0]\nfor e in a:\n    c = xr & e\n    if c > m:\n        m = c\n        opt = e\na.remove(opt)\na = [str(x) for x in a]\nprint(str(opt) + ' ' + ' '.join(a))", "n = int(input())\narr = [int(x) for x in input().split()]\nfor i in range(30, -1, -1):\n    dem = 0\n    for x in arr:\n        if x & 1 << i:\n            dem += 1\n    if dem == 1:\n        cur = 0\n        for j in range(n):\n            if arr[j] & 1 << i:\n                cur = j\n        print(arr[cur], end=' ')\n        for j in range(n):\n            if j != cur:\n                print(arr[j], end=' ')\n        exit()\nfor x in arr:\n    print(x, end=' ')", "from math import ceil, sqrt\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().strip().split(' '))\n\ndef li():\n    return list(mi())\nn = ii()\na = li()\nm = {}\na.sort()\nfor i in range(32):\n    m[i] = []\nfor i in a:\n    x = bin(i)\n    x = x[2:]\n    if i == 0:\n        m[31].append(i)\n        continue\n    y = 32 - len(x)\n    x = '0' * y + x\n    for j in range(32):\n        if x[j] == '1':\n            m[j].append(i)\nf = 0\nfor i in range(32):\n    if len(m[i]) == 1:\n        x = m[i][0]\n        f = 1\n        break\nif f == 0:\n    print(*a)\nelse:\n    print(x, end=' ')\n    a.remove(x)\n    print(*a)", "n = int(input())\nl = [int(x) for x in input().split()]\nl.sort()\nl.reverse()\nll = []\nsol = []\nleng = len(bin(l[0])[2:])\ni = 0\nfor x in l:\n    ll.append('0' * (leng - len(bin(x)[2:])) + bin(x)[2:])\nidx = -1\nwhile i < leng:\n    idx = -1\n    for x in range(n):\n        if ll[x][i] == '1':\n            if idx == -1:\n                idx = x\n            else:\n                idx = -2\n        if idx == -2:\n            break\n    if idx >= 0:\n        sol.append(idx)\n    i += 1\nfor x in sol:\n    if ll[x] != -1:\n        print(int(ll[x], 2), end=' ')\n        ll[x] = -1\nfor x in ll:\n    if x != -1:\n        print(int(x, 2), end=' ')", "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * 32\nans = -1\nfor it in range(n):\n    i = a[it]\n    bi = bin(i)[2:][-1::-1]\n    for (ii, j) in enumerate(bi):\n        if j == '1':\n            if b[ii] == -1:\n                b[ii] = it\n            else:\n                b[ii] = -2\nfor i in range(31, -1, -1):\n    if b[i] == -1 or b[i] == -2:\n        continue\n    else:\n        ans = b[i]\n        break\nif ans == -1:\n    print(*a)\nelse:\n    print(a[ans], end=' ')\n    for i in range(n):\n        if i == ans:\n            continue\n        print(a[i], end=' ')\n    print()"]