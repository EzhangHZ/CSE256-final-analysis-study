["res = ''\nfor _ in range(int(input())):\n    res += input().strip() + '\\n'\nprint(res)", "print('\\n'.join([input() for _ in range(int(input()))]))", "print(*[*open(0)][1:])", "a = int(input())\nl = []\nfor i in range(0, a):\n    b = int(input())\n    l.append(b)\nfor j in l:\n    print(j)", "def filling_diamonds():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        ans.append(input())\n    for i in ans:\n        print(i)\nfilling_diamonds()\npass", "for g in [*open(0)][1:]:\n    print(int(g))", "import sys\nl = sys.stdin.readlines()\nt = int(l[0].replace('\\n', ''))\ni = 1\nfor i in range(1, t + 1):\n    print(l[i].replace('\\n', ''))", "(t, *x) = open(0)\nprint(*x)", "print(*[*open(0)][1:])", "arr = []\nfor _ in range(int(input())):\n    arr.append(int(input()))\nfor i in arr:\n    print(i)", "t = int(input())\nlist = []\nfor i in range(t):\n    n = int(input())\n    list.append(n)\nfor i in range(len(list)):\n    print(list[i])", "number_of_test_case = int(input())\narr = []\nfor i in range(number_of_test_case):\n    user_input = int(input())\n    arr.append(user_input)\n\ndef calculate(number):\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number > 2:\n        return number\nfor j in arr:\n    print(calculate(j))", "print(*[*open(0)][1:])", "print(*list((int(input()) for i in range(int(input())))), sep='\\n')", "import sys\ninput = sys.stdin.readline\ninputLines = sys.stdin.readlines\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef readStrList():\n    return list(map(lambda x: x.strip(), inputLines()))\n\ndef indexOf(l: list, elem):\n    return l.index(elem) if elem in l else -1\n\ndef lastIndexOf(l: list, elem):\n    indexes = [idx for (idx, val) in enumerate(l) if val == elem]\n    return max(indexes) if len(indexes) > 0 else -1\n\ndef distinct(l: list):\n    used = set()\n    return [x for x in l if x not in used and (used.add(x) or True)]\n\ndef solution():\n    for _ in range(int(input())):\n        print(input().strip())\nsolution()", "t = int(input())\nanswer = []\nwhile t > 0:\n    n = input()\n    answer.append(n)\n    t -= 1\nprint('\\n'.join(answer))", "from sys import *\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\nn = []\nfor i in range(t):\n    n.append(input())\nfor j in range(t):\n    print(n[j])", "ans = []\nfor _ in range(int(input())):\n    ans.append(input())\nprint('\\n'.join(ans))", "t = int(input())\nl = []\nfor x in range(0, t):\n    n = int(input())\n    l.append(n)\nfor c in l:\n    print(c)", "t = int(input())\nN = []\nfor i in range(t):\n    n = int(input())\n    N.append(n)\nfor i in range(t):\n    print(N[i])", "t = int(input())\nanswers = []\nfor i in range(t):\n    answers.append(input())\nfor i in range(t):\n    print(answers[i])", "t = int(input())\nans = []\nfor x in range(t):\n    n = int(input())\n    ans.append(n)\nfor a in ans:\n    print(a)", "print(*[*open(0)][1:])", "t = int(input())\nans = []\nfor _ in range(t):\n    ans.append(int(input()))\nfor i in ans:\n    print(i)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nt = int(wtf[0])\nfor s in wtf[1:]:\n    n = int(s)\n    print(n)", "print(*[*open(0)][1:])", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append(n)\nfor i in range(t):\n    print(l[i])", "import sys\nimport math\nimport bisect\nimport heapq\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom functools import cmp_to_key\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nsort = lambda x, compare: sorted(x, key=cmp_to_key(compare))\nmod = 1000000007\n\ndef sumMod(a, b):\n    return (a % mod + b % mod) % mod\nfor i in range(stdint()):\n    n = stdint()\n    print(n)", "ans = 'YES'\nansw = []\nnum = int(input())\nfor i in range(num):\n    n = int(input())\n    answ.append(n)\nfor i in range(num):\n    print(answ[i])", "for i in [*open(0)][1:]:\n    print(i)", "(t, *x) = open(0)\nprint(*x)", "print(*[*open(0)][1:])", "t = int(input())\ncases = [int(input()) for _ in range(t)]\nfor case in cases:\n    print(case)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve():\n    pass\nfor _ in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\ni = 0\nA = []\nwhile i < t:\n    i += 1\n    m = input()\n    A.append(m)\nfor x in A:\n    print(x)", "a = int(input())\nt = []\nfor i in range(a):\n    n = int(input())\n    t.append(n)\nfor j in t:\n    print(j)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append(n)\nfor i in l:\n    print(int(i))", "n = int(input())\nl1 = []\nfor i in range(n):\n    l1.append(int(input()))\nfor i in l1:\n    print(i)", "import sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nfrom itertools import permutations\nfrom math import gcd, log\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nt = int(input())\nfor _ in range(t):\n    print(input())", "t = int(input())\nres = []\nfor i in range(t):\n    res.append(int(input()))\nfor e in res:\n    print(e)", "res = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    res.append(n)\nfor i in res:\n    print(i)", "t = int(input())\nn = [0] * t\nfor j in range(t):\n    n[j] = int(input())\nfor j in range(t):\n    print(n[j])", "n = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\nfor j in range(n):\n    print(s[j])", "import sys\n\ndef get_single_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nfor i in range(get_single_int()):\n    print(get_single_int())", "n = int(input())\ncou = [int(input()) for i in range(n)]\nprint(*cou, sep='\\n')", "for _ in range(int(input())):\n    print(int(input()))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)", "for _ in range(int(input())):\n    print(input())", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(n)", "for _ in range(int(input())):\n    print(int(input()))", "for _ in range(int(input())):\n    n = int(input())\n    print(n)", "for i in range(int(input())):\n    print(int(input()))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)", "for _ in [0] * int(input()):\n    print(int(input()))", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    print(b)", "for _ in [0] * int(input()):\n    n = int(input())\n    print(n)", "tc = int(input())\nfor _ in range(tc):\n    x = input()\n    print(x)", "t = int(input())\nfor _t in range(t):\n    n = int(input())\n    print(n)", "cases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    print(n)", "for i in range(int(input())):\n    a = int(input())\n    print(a)", "t = int(input())\nfor i in range(t):\n    print(input())", "t = int(input())\nfor i in range(t):\n    print(input())", "def filling_diamonds():\n    n_testes = int(input())\n    for _ in range(n_testes):\n        number = int(input())\n        print(number)\nfilling_diamonds()", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    print(b)", "for _ in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\nwhile t > 0:\n    print(input())\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)", "for _ in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)", "n = int(input())\nfor i in range(n):\n    print(input())", "for _ in range(int(input())):\n    print(int(input()))", "for i in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    print(n)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    print(n)", "m = int(input())\nfor _ in range(m):\n    n = int(input())\n    print(n)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    print(n)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)", "for _ in range(int(input())):\n    n = int(input())\n    print(n)", "for i in range(int(input())):\n    print(int(input()))", "for _ in range(int(input())):\n    print(int(input()))", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    print(x)", "for i in range(int(input())):\n    n = int(input())\n    print(n)", "t = int(input())\n\ndef gt(a):\n    if a <= 1:\n        return 1\n    else:\n        return gt(a - 1) * a\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(n)", "t = int(input())\ni = 1\nwhile True:\n    if i > t:\n        break\n    n = int(input())\n    print(n)\n    i = i + 1", "for t in range(int(input())):\n    print(int(input()))", "n = int(input())\nwhile n > 0:\n    b = int(input())\n    print(b)\n    n -= 1", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    print(n)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(n)", "for _ in range(int(input())):\n    print(int(input()))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)", "t = int(input())\nif not 1 <= t <= 10 ** 4:\n    quit()\nfor i in range(t):\n    n = int(input())\n    if not 1 <= n <= 10 ** 9:\n        quit()\n    print(n)", "t = int(input())\nif not 1 <= t <= 10 ** 4:\n    quit()\nfor i in range(t):\n    n = int(input())\n    if not 1 <= n <= 10 ** 9:\n        quit()\n    print(n)", "for cases in range(int(input())):\n    k = int(input())\n    print(k)", "for _ in range(int(input())):\n    a = int(input())\n    print(a)", "for t in range(int(input())):\n    n = int(input())\n    print(n)"]