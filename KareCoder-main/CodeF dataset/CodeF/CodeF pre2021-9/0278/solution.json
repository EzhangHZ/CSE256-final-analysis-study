["from sys import stdin\ninput = stdin.readline\nfor _ in ' ' * int(input()):\n    (n, m) = map(int, input().split())\n    a = dict()\n    for _ in ' ' * n:\n        x = input().split()\n        a[x[0]] = x\n    c = x[0]\n    for _ in ' ' * m:\n        x = input().split()\n        if c in x:\n            f = x\n    for x in f:\n        print(*a[x])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        a = [j for j in input().split()]\n        d[int(a[0])] = a\n    for x in range(m):\n        l = [int(j) for j in input().split()]\n        if l[0] in d:\n            for y in l:\n                print(*d[y])\n            break\n    for z in range(x + 1, m):\n        a = input()", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = {}\n    for i in range(n):\n        row = list(map(int, input().split()))\n        r[row[0]] = row\n    for _ in range(m):\n        c = list(map(int, input().split()))\n        if c[0] in r:\n            p = c\n    for i in p:\n        print(*r[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "from sys import *\ninput = stdin.readline\nfor _ in range(int(input())):\n    (ym, xm) = map(int, input().split())\n    if ym == 1 and xm == 1:\n        print(input())\n        input()\n        continue\n    rows = [input().split() for _ in range(ym)]\n    cols = [input().split() for _ in range(xm)]\n    se = set((r[0] for r in rows))\n    for i in range(xm):\n        if se == set(cols[i]):\n            break\n    rows.sort(key=lambda z: cols[i].index(z[0]))\n    for r in rows:\n        print(*r)", "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    dictn = dict()\n    for i in range(n):\n        l = list(input().split())\n        dictn[l[0]] = l\n    for i in range(m):\n        l = list(input().split())\n        if l[0] in dictn:\n            firstline = l\n    for k in firstline:\n        print(' '.join(dictn[k]))", "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    dictn = dict()\n    for i in range(n):\n        l = list(input().split())\n        dictn[l[0]] = l\n    for i in range(m):\n        l = list(input().split())\n        if l[0] in dictn:\n            firstline = l\n    for k in firstline:\n        print(' '.join(dictn[k]))", "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    dictn = dict()\n    for i in range(n):\n        l = list(input().split())\n        dictn[l[0]] = l\n    for i in range(m):\n        l = list(input().split())\n        if l[0] in dictn:\n            firstline = l\n    for k in firstline:\n        print(' '.join(dictn[k]))", "import sys\nZ = sys.stdin.readline\nY = lambda : (*map(int, Z().split()),)\nu = [0] * 250000\no = []\nfor _ in range(Y()[0]):\n    (n, m) = Y()\n    a = []\n    for i in range(n):\n        a += [[]]\n        for j in Y():\n            u[j - 1] = i\n            a[-1] += [j]\n    o += ['\\n'.join((' '.join(map(str, a[u[i - 1]])) for i in Y()))]\n    for i in range(m - 1):\n        Z()\nprint('\\n'.join(o))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [input()[:-1].split() for _ in range(n)]\n    d = [i[0] for i in g]\n    w = [input()[:-1].split() for _ in range(m)]\n    for i in w:\n        if d[0] in i:\n            for j in range(n):\n                d[j] = i.index(d[j])\n            break\n    for i in sorted(zip(d, g)):\n        print(' '.join(i[1]))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ff = 0\n    key = {}\n    for i in range(n):\n        y = list(map(int, input().split()))\n        key[y[0]] = y\n    for _ in range(m):\n        x = list(map(int, input().split()))\n        if ff == 0 and x[0] in key:\n            fcol = x\n            ff = 1\n    for a in fcol:\n        print(*key[a])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    D = {}\n    for i in range(n):\n        line = list(map(int, input().split()))\n        D[line[0]] = line\n    res = []\n    for i in range(m):\n        colum = list(map(int, input().split()))\n        if colum[0] in D:\n            res = colum\n    for i in res:\n        print(*D[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\n\ndef f():\n    for i in range(int(input())):\n        (n, m) = map(int, sys.stdin.readline().split())\n        a = []\n        d = dict()\n        for j in range(n):\n            a.append(list(map(int, sys.stdin.readline().split())))\n            d[a[-1][0]] = j\n        for j in range(m):\n            b = list(map(int, sys.stdin.readline().split()))\n            if d.get(b[0], -1) != -1:\n                for v in b:\n                    print(*a[d[v]])\nf()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, m) = map(int, stdin.readline().split())\n    dic = {}\n    for x in range(n):\n        f = list(map(int, stdin.readline().split()))\n        dic[f[-1]] = f\n    for y in range(m):\n        lis = list(map(int, stdin.readline().split()))\n        if lis[0] in dic.keys():\n            break\n    for p in range(y + 1, m):\n        _ = input()\n    for x in lis:\n        print(*dic[x])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    dp = {}\n    for _ in range(n):\n        cur = list(map(int, input().split()))\n        dp[cur[0]] = cur\n    order = []\n    for _ in range(m):\n        cur = list(map(int, input().split()))\n        if cur[0] in dp:\n            order = cur\n    for i in order:\n        print(*dp[i])", "answers = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    values = [-1] * (n * m + 1)\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for value in row:\n            values[value] = i\n    for i in range(m - 1):\n        input()\n    col = list(map(int, input().split()))\n    for value in col:\n        answers.append(' '.join(map(str, rows[values[value]])))\nprint('\\n'.join(answers))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lr = {}\n    lc = {}\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        lr[temp[0]] = temp\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        lc[temp[0]] = temp\n    for i in lr:\n        if i in lc:\n            te = lc[i]\n            break\n    for i in te:\n        print(*lr[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for _ in range(n):\n        cur = list(map(int, input().split()))\n        d[cur[0]] = cur\n    order = []\n    for _ in range(m):\n        cur = list(map(int, input().split()))\n        if cur[0] in d:\n            order = cur\n    for i in order:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for _ in range(n):\n        cur = list(map(int, input().split()))\n        d[cur[0]] = cur\n    for _ in range(m):\n        cur = list(map(int, input().split()))\n        if cur[0] in d:\n            order = cur\n    for i in order:\n        print(*d[i])", "ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    matrix = [-1] * (n * m + 1)\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for j in row:\n            matrix[j] = i\n    for i in range(m - 1):\n        input()\n    column = list(map(int, input().split()))\n    for i in column:\n        ans.append(' '.join(map(str, rows[matrix[i]])))\nprint('\\n'.join(ans))", "from sys import stdin, stdout\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lr = {}\n    lc = {}\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        lr[temp[0]] = temp\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        lc[temp[0]] = temp\n    for i in lr:\n        if i in lc:\n            te = lc[i]\n    for i in te:\n        print(*lr[i])", "import sys\n\ndef taskb():\n    count = int(sys.stdin.readline())\n    for i in range(count):\n        (n, m) = map(int, sys.stdin.readline().split())\n        a = [0] * n\n        r = [0] * (m * n + 1)\n        for j in range(n):\n            a[j] = list(map(int, sys.stdin.readline().split()))\n            r[a[j][0]] = j\n        v = a[0][0]\n        for j in range(m):\n            b = list(map(int, sys.stdin.readline().split()))\n            if v in b:\n                c = b\n        for j in range(n):\n            sys.stdout.write(' '.join(map(str, a[r[c[j]]])) + '\\n')\ntaskb()", "from sys import stdin, stdout, maxsize\ntup = lambda : map(int, stdin.readline().split())\nI = lambda : int(stdin.readline())\nlint = lambda : [int(x) for x in stdin.readline().split()]\nstpr = lambda x: stdout.write(f'{x}' + '\\n')\nstar = lambda x: print(' '.join(map(str, x)))\nfrom math import ceil, floor\nfor _ in range(I()):\n    (n, m) = tup()\n    d = {}\n    for _ in range(n):\n        a = lint()\n        d[a[0]] = a\n    dd = {}\n    for _ in range(m):\n        a = lint()\n        for i in a:\n            try:\n                print(*d[i])\n            except:\n                pass", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    s = [[int(x) for x in input().split()] for i in range(n)]\n    stroki = {x[0]: x for x in s}\n    d = [[int(x) for x in input().split()] for i in range(m)]\n    stolb = {x[0]: x for x in d}\n    s1 = set(stroki.keys())\n    s2 = set(stolb.keys())\n    first = list(s1.intersection(s2))[0]\n    fs = stolb[first]\n    for x in fs:\n        print(*stroki[x])\nt = int(input())\nfor i in range(t):\n    solve()", "answer = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    values = [-1] * (n * m + 1)\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for value in row:\n            values[value] = i\n    for i in range(m - 1):\n        input()\n    col = list(map(int, input().split()))\n    for value in col:\n        n_row = values[value]\n        s = ' '.join(map(str, rows[n_row]))\n        answer.append(s)\nprint('\\n'.join(answer))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * (n * m)\n    for i in range(n):\n        m1 = list(map(int, input().split()))\n        a[m1[0] - 1] = m1\n    col = []\n    for i in range(m):\n        n1 = list(map(int, input().split()))\n        if a[n1[0] - 1] != 0:\n            col = n1\n    for i in col:\n        print(*a[i - 1])", "ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [0] * (n * m + 1)\n    rows = [list(map(int, input().split())) for i in range(n)]\n    for i in range(n):\n        for val in rows[i]:\n            arr[val] = i\n    for i in range(m - 1):\n        input()\n    for val in map(int, input().split()):\n        ans.append(' '.join(map(str, rows[arr[val]])))\nprint('\\n'.join(ans))", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ind = [[]] * n * m\n    for i in range(n):\n        row = list(map(int, input().split()))\n        ind[row[0] - 1] = row\n    for j in range(m):\n        column = list(map(int, input().split()))\n        if ind[column[0] - 1]:\n            num = column\n    for i in num:\n        print(*ind[i - 1])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        l = list(map(int, input().split()))\n        d[l[0]] = l\n    z = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        if l[0] in d:\n            z = l\n    for i in z:\n        print(*d[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    dp = {}\n    for _ in range(n):\n        cur = list(map(int, input().split()))\n        dp[cur[0]] = cur\n    order = []\n    for _ in range(m):\n        cur = list(map(int, input().split()))\n        if cur[0] in dp:\n            order = cur\n    for i in order:\n        print(*dp[i])", "import sys\nimport math, bisect\nsys.setrecursionlimit(10 ** 6)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef neo():\n    return map(int, sys.stdin.readline().split())\n\ndef Neo():\n    return list(map(int, sys.stdin.readline().split()))\nfrom functools import lru_cache\nfor _ in range(I()):\n    (n, m) = neo()\n    d = {}\n    for i in range(n):\n        A = Neo()\n        d[A[0]] = A\n    order = []\n    for i in range(m):\n        A = Neo()\n        if A[0] in d:\n            order = A\n    for i in order:\n        print(*d[i])", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(n):\n        m2 = list(map(int, sys.stdin.readline().split()))\n        d[m2[0]] = m2\n    for i in range(m):\n        m1 = list(map(int, sys.stdin.readline().split()))\n        if m1[0] in d:\n            m2 = m1\n    for i in range(n):\n        print(*d[m2[i]])", "answer = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    values = [-1] * (n * m + 1)\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for value in row:\n            values[value] = i\n    for i in range(m - 1):\n        input()\n    col = list(map(int, input().split()))\n    for value in col:\n        n_row = values[value]\n        s = ' '.join(map(str, rows[n_row]))\n        answer.append(s)\nprint('\\n'.join(answer))", "answer = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    values = [-1] * (n * m + 1)\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for value in row:\n            values[value] = i\n    for i in range(m - 1):\n        input()\n    col = list(map(int, input().split()))\n    for value in col:\n        n_row = values[value]\n        s = ' '.join(map(str, rows[n_row]))\n        answer.append(s)\nprint('\\n'.join(answer))", "ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [0] * (n * m + 1)\n    rows = [list(map(int, input().split())) for i in range(n)]\n    for i in range(n):\n        for val in rows[i]:\n            arr[val] = i\n    for i in range(m - 1):\n        input()\n    for val in map(int, input().split()):\n        ans.append(' '.join(map(str, rows[arr[val]])))\nprint('\\n'.join(ans))", "t = int(input())\nans = []\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    indexes = [0] * (n * m + 1)\n    rows = [[int(i) for i in input().split()] for _ in range(n)]\n    for i in range(n):\n        for num in rows[i]:\n            indexes[num] = i\n    for i in range(m - 1):\n        input()\n    for col in map(int, input().split()):\n        ans.append(' '.join(map(str, rows[indexes[col]])))\n    t -= 1\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    rows = {}\n    cols = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows[row[0]] = row\n    for j in range(m):\n        cols.append(list(map(int, input().split())))\n    for j in range(m):\n        if cols[j][0] in rows:\n            idxes = cols[j]\n            break\n    for idx in idxes:\n        print(*rows[idx])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    g = {}\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for j in range(m):\n            g[row[j]] = i\n    res = []\n    ans = list(map(int, input().split()))\n    for i in range(n):\n        res.append(g[ans[i]])\n    for _ in range(m - 1):\n        input()\n    for i in res:\n        print(*rows[i])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    g = {}\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for j in range(m):\n            g[row[j]] = i\n    res = []\n    ans = list(map(int, input().split()))\n    for i in range(n):\n        res.append(g[ans[i]])\n    for _ in range(m - 1):\n        input()\n    for i in res:\n        print(*rows[i])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    g = {}\n    res = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for j in range(m):\n            g[row[j]] = i\n    ans = list(map(int, input().split()))\n    for i in range(n):\n        res.append(g[ans[i]])\n    for _ in range(m - 1):\n        input()\n    for i in res:\n        print(*rows[i])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rows = []\n    g = {}\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        for j in range(m):\n            g[row[j]] = i\n    res = []\n    ans = list(map(int, input().split()))\n    for i in range(n):\n        res.append(g[ans[i]])\n    for _ in range(m - 1):\n        input()\n    for i in res:\n        print(*rows[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mas = {}\n    for _ in range(n):\n        a = list(map(int, input().split()))\n        mas[a[0]] = a\n    flag = True\n    for _ in range(m):\n        if flag:\n            a = list(map(int, input().split()))\n            if set(a) == set(mas.keys()):\n                for i in a:\n                    print(' '.join(map(str, mas[i])))\n        else:\n            input()", "inp = input\nrg = range\nout = print\nl = list\nd = dict\nmp = map\nN = int\nans = l()\nfor _ in [0] * N(inp()):\n    (n, m) = mp(N, inp().split())\n    rows = l()\n    is_here = d()\n    for i in rg(n):\n        rows.append(inp().split())\n        is_here[rows[-1][0]] = i\n    col1 = l()\n    for i in rg(m):\n        col = inp().split()\n        if col[0] in is_here:\n            col1 = col\n    for i in col1:\n        ans.append(rows[is_here[i]])\nfor i in ans:\n    out(*i)", "import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n    (n, m) = map(int, input().split())\n    (rows, col) = ([], [])\n    for i in range(n):\n        rows.append(list(map(int, input().split())))\n    for i in range(m):\n        col.append(list(map(int, input().split())))\n    d = {}\n    for i in range(n):\n        d[rows[i][0]] = i\n    for i in range(m):\n        if col[i][0] in d:\n            c = list(col[i])\n    for i in c:\n        print(*rows[d[i]])", "import time\n\ndef zip_sorted(a, b):\n    (a, b) = zip(*sorted(zip(a, b)))\n    sorted(zip(a, b), key=lambda x: x[1])\n    return (a, b)\nimport sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor t1 in range(t):\n    (n, m) = I()\n    row = []\n    start_time = time.time()\n    row1 = [-1] * (m * n + 1)\n    for i in range(n):\n        n1 = I()\n        row.append(n1)\n        row1[n1[0]] = i\n    col = [0] * n\n    for i in range(m):\n        m1 = I()\n        if row1[m1[0]] != -1:\n            col = m1\n    for i in range(len(col)):\n        print(*row[row1[col[i]]])", "t = int(input())\noutput = []\nwhile True:\n    if t == 0:\n        break\n    (n, m) = [int(_) for _ in input().split()]\n    rows = [input().split() for _ in range(n)]\n    cols = [input().split() for _ in range(m)]\n    ref_col = cols[0]\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == ref_col[0]:\n                ref_dict = {}\n                for k in range(n):\n                    ref_dict[ref_col[k]] = k\n                for row in rows:\n                    ref_dict[ref_dict[row[j]]] = row\n                for l in range(n):\n                    output.append(' '.join(ref_dict[l]))\n                break\n    t -= 1\nfor ans in output:\n    print(ans)", "t = int(input())\nans = list()\nfor _ in range(t):\n    data = input().split()\n    (n, m) = (int(data[0]), int(data[1]))\n    lines = list()\n    is_here = dict()\n    for i in range(n):\n        lines.append(input().split())\n        is_here[lines[-1][0]] = i\n    col1 = list()\n    for i in range(m):\n        col = input().split()\n        if col[0] in is_here:\n            col1 = col\n    for i in col1:\n        ans.append(lines[is_here[i]])\nfor i in ans:\n    print(*i)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lisr = []\n    for i in range(n):\n        lisr.append(list(map(int, input().split())))\n    lisc = []\n    for i in range(m):\n        lisc.append(list(map(int, input().split())))\n    l = lisc[0]\n    for i in range(m):\n        t = []\n        for j in range(n):\n            t.append(lisr[j][i])\n        if l[0] in t:\n            break\n    res = []\n    for i in l:\n        j = t.index(i)\n        res.append(lisr[j])\n    for l in res:\n        print(*l)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (rows, cols) = ([], [])\n    (temp1, ans) = ([], [])\n    for row in range(n):\n        r = list(map(int, input().split()))\n        rows.append(r)\n        temp1.append(r[0])\n    for col in range(m):\n        cols.append(list(map(int, input().split())))\n    for i in range(m):\n        if sorted(temp1) == sorted(cols[i]):\n            temp2 = cols[i]\n            break\n    for i in temp2:\n        idx1 = temp1.index(i)\n        ans.append(rows[idx1])\n    for i in range(n):\n        print(*ans[i])", "t = int(input())\nans = list()\nfor _ in range(t):\n    data = input().split()\n    (n, m) = (int(data[0]), int(data[1]))\n    lines = list()\n    is_here = dict()\n    for i in range(n):\n        lines.append(input().split())\n        is_here[lines[-1][0]] = i\n    col1 = list()\n    for i in range(m):\n        col = input().split()\n        if col[0] in is_here:\n            col1 = col\n    for i in col1:\n        ans.append(lines[is_here[i]])\nfor i in ans:\n    print(*i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l1 = []\n    l2 = []\n    d = {}\n    l3 = [[]] * n\n    for i in range(n):\n        k = list(map(int, input().split()))\n        l1.append(k)\n    z = sorted([x[0] for x in l1])\n    for i in range(m):\n        k = list(map(int, input().split()))\n        if sorted(k) == z:\n            l2 = k\n    for i in range(len(l2)):\n        d[l2[i]] = i\n    for i in range(len(l1)):\n        l3[d[l1[i][0]]] = l1[i]\n    for i in l3:\n        print(*i, sep=' ')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lisr = []\n    for i in range(n):\n        lisr.append(list(map(int, input().split())))\n    lisc = []\n    for i in range(m):\n        lisc.append(list(map(int, input().split())))\n    l = lisc[0]\n    for i in range(m):\n        t = []\n        for j in range(n):\n            t.append(lisr[j][i])\n        if l[0] in t:\n            break\n    res = []\n    for i in l:\n        j = t.index(i)\n        res.append(lisr[j])\n    for l in res:\n        print(*l)", "import sys\nfor i in range(int(input(''))):\n    dimension = list(map(int, sys.stdin.readline().split()))\n    first_column = dict()\n    rows = list()\n    for j in range(int(dimension[0])):\n        rows.append(list(map(int, sys.stdin.readline().split())))\n        first_column[rows[-1][0]] = j\n    for j in range(int(dimension[1])):\n        a = list(map(int, sys.stdin.readline().split()))\n        if first_column.get(a[0], -1) != -1:\n            for k in a:\n                print(*rows[first_column[k]])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    rows = []\n    cols = []\n    for i in range(n):\n        rows.append(list(map(int, input().split())))\n    for j in range(m):\n        cols.append(list(map(int, input().split())))\n    idxes = {}\n    for i in range(n):\n        idxes[rows[i][0]] = i\n    for j in range(m):\n        if cols[j][0] in idxes:\n            idx = j\n            break\n    for i in range(n):\n        print(*rows[idxes[cols[idx][i]]])", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (n, m) = map(int, input().split())\n        rows = []\n        columns = []\n        for j in range(n):\n            rows.append(list(map(int, input().split())))\n        for j in range(m):\n            columns.append(list(map(int, input().split())))\n        tops = []\n        for j in range(m):\n            tops.append(columns[j][0])\n        tops_sort = sorted(tops)\n        mat = []\n        for row in rows:\n            sortedrow = sorted(row)\n            if sortedrow == tops_sort:\n                mat.append(row)\n                break\n        for j in range(n - 1):\n            mat.append([0] * m)\n        for (i, top) in enumerate(mat[0]):\n            idx = tops.index(top)\n            for j in range(1, n):\n                mat[j][i] = columns[idx][j]\n        for i in range(n):\n            print(*mat[i])\nmain()", "t = int(input())\nres = []\nfor test in range(t):\n    l = []\n    st = input()\n    lst = st.split()\n    n = int(lst[0])\n    m = int(lst[1])\n    d = dict()\n    for i in range(n):\n        r = input()\n        rl = r.split()\n        l.append(int(rl[0]))\n        d[int(rl[0])] = r\n    for i in range(m):\n        c = input()\n        cl = c.split()\n        if int(cl[0]) in l:\n            for j in range(len(cl)):\n                res.append(d[int(cl[j])])\nfor ans in res:\n    print(ans)", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lines = []\n    d = {}\n    for i in range(n):\n        line = list(map(int, input().split()))\n        lines.append(line)\n        for j in range(m):\n            d[line[j]] = i\n    res = []\n    ans = list(map(int, input().split()))\n    for i in range(n):\n        res.append(d[ans[i]])\n    for _ in range(m - 1):\n        input()\n    for i in res:\n        print(*lines[i])", "from collections import defaultdict\nimport sys\nimport math as mt\nimport random\nsys.setrecursionlimit(10 ** 6)\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, m) = get_ints()\n    rows = []\n    cols = []\n    d = dict()\n    for _ in range(n):\n        temp = get_array()\n        rows.append(temp)\n        d[temp[0]] = temp\n    for _ in range(m):\n        temp = get_array()\n        cols.append(temp)\n    for j in range(m):\n        if cols[j][0] in d:\n            for i in range(n):\n                print(*d[cols[j][i]])", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (rows, g, res) = ([], {}, [])\n    for i in range(n):\n        a = list(map(int, input().split()))\n        rows.append(a)\n        for j in range(m):\n            g[a[j]] = i\n    a = list(map(int, input().split()))\n    for i in a:\n        res.append(g[i])\n    for i in range(m - 1):\n        input()\n    for i in res:\n        print(*rows[i])", "import sys\ninput = sys.stdin.readline\nintArr = lambda : list(map(int, input().split()))\n\ndef main():\n    test = int(input())\n    while test > 0:\n        test -= 1\n        (n, m) = intArr()\n        (ltoR, ttoB) = ([], [])\n        mapper = {}\n        for i in range(n):\n            ltoR.append(intArr())\n            x = ltoR[i][0]\n            mapper[x] = i\n        for i in range(m):\n            b = intArr()\n            if b[0] in mapper:\n                ttoB = b\n        for i in range(n):\n            topE = ttoB[i]\n            corRi = mapper[topE]\n            print(*ltoR[corRi])\nmain()", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    n = int(n)\n    m = int(m)\n    row = []\n    dec = {}\n    for i in range(n):\n        l = [int(elem) for elem in input().split()]\n        for j in l:\n            dec[j] = i\n        row.append(l)\n    column = [int(elem) for elem in input().split()]\n    for i in range(m - 1):\n        l = [int(elem) for elem in input().split()]\n    for j in column:\n        print(*row[dec[j]])", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        row = tuple((tuple(map(int, input().split())) for _ in range(n)))\n        col = tuple((tuple(map(int, input().split())) for _ in range(m)))\n        row_nums = [0] * (n * m + 1)\n        for i in range(n):\n            for j in row[i]:\n                row_nums[j] = i\n        res = [[] for _ in range(n)]\n        for i in range(n):\n            vi = col[0][i]\n            row_num = row_nums[vi]\n            res[i] = row[row_num]\n        for i in res:\n            print(*i)\nresolve()", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    t -= 1\n    (n, m) = map(int, stdin.readline().split())\n    randrowwise = []\n    randcolwise = []\n    firstele = []\n    ans = [[]] * n\n    for i in range(n):\n        randrowwise.append(list(map(int, stdin.readline().split())))\n        firstele.append(randrowwise[-1][0])\n    for i in range(m):\n        randcolwise.append(list(map(int, stdin.readline().split())))\n        if randcolwise[-1][0] in firstele:\n            column = randcolwise[-1]\n    for i in range(n):\n        ans[column.index(randrowwise[i][0])] = randrowwise[i]\n    for i in range(n):\n        print(*ans[i])", "import sys\nimport math\nimport collections\nimport bisect\nfrom collections import deque as queue\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, m) = get_ints()\n    row = []\n    for i in range(n):\n        row.append(get_list())\n    col = []\n    for i in range(m):\n        col.append(get_list())\n    ans = []\n    row_no = dict()\n    for i in range(n):\n        for j in range(m):\n            ele = row[i][j]\n            row_no[ele] = i\n    for i in range(n):\n        ele = col[0][i]\n        index_of_row = row_no[ele]\n        ans.append(row[index_of_row])\n    for i in ans:\n        print(*i)", "test_cases = int(input())\nres = []\nfor test in range(test_cases):\n    s_lst = []\n    st = input()\n    lst = st.split()\n    n = int(lst[0])\n    m = int(lst[1])\n    dct = dict()\n    for i in range(n):\n        row = input()\n        row_list = row.split()\n        s_lst.append(int(row_list[0]))\n        dct[int(row_list[0])] = row\n    for i in range(m):\n        col = input()\n        col_list = col.split()\n        if int(col_list[0]) in s_lst:\n            for j in range(len(col_list)):\n                res.append(dct[int(col_list[j])])\nfor val in res:\n    print(val)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = [[0 for i in range(m)] for j in range(n)]\n    row = {}\n    col = {}\n    for i in range(n):\n        s = list(map(int, input().split()))\n        for k in range(m):\n            col[s[k]] = k\n    for i in range(m):\n        s = list(map(int, input().split()))\n        for k in range(n):\n            ans[k][col[s[k]]] = s[k]\n    for i in range(n):\n        print(*ans[i])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    row = [0] * n\n    col = [0] * m\n    for i in range(n):\n        row[i] = list(map(int, input().split()))\n    for j in range(m):\n        col[j] = list(map(int, input().split()))\n    D = {}\n    vis = {}\n    for i in range(n):\n        vis[row[i][0]] = True\n        D[row[i][0]] = i\n    for j in range(m):\n        if col[j][0] in vis:\n            index = j\n            break\n    for i in range(n):\n        print(*row[D[col[index][i]]])", "def ans():\n    (y, x) = map(lambda x: int(x), input().split())\n    z = []\n    for _ in range(y):\n        z.append(list(map(lambda x: str(x), input().split())))\n    c = list(map(lambda x: str(x), input().split()))\n    d = dict()\n    for i in range(len(c)):\n        d[c[i]] = i\n    v = ['0'] * y\n    index = 0\n    while d.get(z[0][index], None) == None:\n        index += 1\n    for i in range(y):\n        v[d[z[i][index]]] = ' '.join(z[i])\n    for i in range(x - 1):\n        input()\n    return '\\n'.join(v)\nt = int(input())\nz2 = []\nfor _ in range(t):\n    z2.append(ans())\nprint('\\n'.join(z2))", "res = []\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    lines = [list(map(int, input().split())) for _ in range(n)]\n    cols = [list(map(int, input().split())) for _ in range(m)]\n    f = lines[0][0]\n    i = 0\n    while f not in cols[i]:\n        i += 1\n    col = cols[i]\n    for line in lines:\n        line.insert(0, col.index(line[0]))\n    lines.sort()\n    res.extend(lines)\nfor el in res:\n    print(*el[1:])", "def searchForRow(N):\n    for row in rows:\n        if row[0] in N:\n            return row[0]\nResult = []\nt = int(input())\nfor i in range(t):\n    nm = list(map(int, input().split(' ')))\n    n = nm[0]\n    m = nm[1]\n    rows = []\n    columns = []\n    firstNumbers = []\n    Input = []\n    for u in range(n):\n        rowInput = input()\n        Input.append(rowInput)\n        q = list(map(int, rowInput.split(' ')))\n        rows.append(q)\n    for y in range(m):\n        z = list(map(int, input().split(' ')))\n        columns.append(z)\n    if n == 1:\n        Result.append(Input[0])\n        continue\n    x = set()\n    for k in columns:\n        x.add(k[0])\n    firstRowNumber = searchForRow(x)\n    columnIndex = {}\n    rowIndex = {}\n    for column in columns:\n        columnIndex[column[0]] = column\n    for rIdx in range(len(rows)):\n        rowIndex[rows[rIdx][0]] = rIdx\n    firstColumn = columnIndex[firstRowNumber]\n    for zzz in firstColumn:\n        Result.append(Input[rowIndex[zzz]])\nfor res in Result:\n    print(res)", "rez = []\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s_stroku = [list(map(int, input().split())) for _ in range(n)]\n    s_stolb = [list(map(int, input().split())) for _ in range(m)]\n    b = 0\n    while s_stroku[0][0] not in s_stolb[b]:\n        b += 1\n    j = s_stolb[b]\n    for l in s_stroku:\n        l.insert(0, j.index(l[0]))\n    s_stroku.sort()\n    rez.extend(s_stroku)\nfor i in rez:\n    print(*i[1:])", "from sys import stdin, stdout\nimport math, bisect\nfrom collections import Counter, deque, defaultdict\nL = lambda : list(map(int, stdin.readline().strip().split()))\nM = lambda : map(int, stdin.readline().strip().split())\nI = lambda : int(stdin.readline().strip())\nS = lambda : stdin.readline().strip()\nC = lambda : stdin.readline().strip().split()\n\ndef pr(a):\n    print(' '.join(list(map(str, a))))\n\ndef solve():\n    (n, m) = M()\n    ans = [-1] * (n * m + 1)\n    a = [L() for i in range(n)]\n    b = [L() for i in range(m)]\n    for i in range(n):\n        for j in range(m):\n            ans[a[i][j]] = i\n    for i in range(n):\n        pr(a[ans[b[0][i]]])\nfor _ in range(I()):\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in 'A' * int(input()):\n    (n, m) = map(int, input().split())\n    c = [0] * (n * m + 1)\n    r = [0] * (n * m + 1)\n    matrix = [[0] * m for i in range(n)]\n    for i in range(n):\n        row = list(map(int, input().split()))\n        for j in range(m):\n            c[row[j]] = j\n    for j in range(m):\n        column = list(map(int, input().split()))\n        for i in range(n):\n            r[column[i]] = i\n    for i in range(1, n * m + 1):\n        matrix[r[i]][c[i]] = i\n    for i in range(n):\n        print(*matrix[i])"]