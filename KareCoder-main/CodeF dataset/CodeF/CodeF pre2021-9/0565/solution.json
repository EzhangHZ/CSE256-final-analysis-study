["t = int(input())\nzxc = []\nfor i in range(t):\n    (n, m) = [int(k) for k in input().split()]\n    res = (1 + n) * n // 2\n    eta = (n - m) // (m + 1)\n    zeta = (n - m) % (m + 1)\n\n    def f(x):\n        return (1 + x) * x // 2\n    res -= zeta * f(eta + 1)\n    res -= (m + 1 - zeta) * f(eta)\n    zxc.append(res)\nprint('\\n'.join([str(k) for k in zxc]))", "import sys\n\ndef main():\n    (n, m) = map(int, sys.stdin.readline().split())\n    ans = n * (n + 1)\n    ans = ans // 2\n    if n == m:\n        print(ans)\n    elif m == 0:\n        print(0)\n    else:\n        temp = n - m\n        k = temp // (m + 1)\n        sub = k * (k + 1) // 2 * (m + 1) + (k + 1) * (temp % (m + 1))\n        print(ans - sub)\n    return\n\ndef test():\n    t = int(input())\n    while t:\n        main()\n        t -= 1\ntest()", "T = int(input())\narr = []\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    k = n - m\n    m += 1\n    t = k // m\n    kol = k - t * m\n    ans = n * (n + 1) // 2 - (kol * (t + 1) ** 2 + (m - kol) * t ** 2 + k) // 2\n    arr.append(ans)\nprint('\\n'.join(map(str, arr)))", "import sys\ninput = sys.stdin.readline\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grps = m + 1\n    zeach = (n - m) // grps\n    extras = (n - m) % grps\n    print(n * (n + 1) // 2 - zeach * (zeach + 1) // 2 * grps - extras * (zeach + 1))", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, M) = [int(x) for x in input().split()]\n        if M == 0:\n            print(0)\n            continue\n        total = N * (N + 1) // 2\n        if N - M <= M + 1:\n            print(total - (N - M))\n        else:\n            (q, r) = divmod(N - M, M + 1)\n            ans = 0\n            x = (q + 1) * (q + 1 + 1) // 2\n            ans += x * r\n            y = q * (q + 1) // 2\n            ans += y * (M + 1 - r)\n            print(total - ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\nT = int(input())\nCASE = []\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    CASE.append([n, m])\nres = []\nfor (n, m) in CASE:\n    zero_cnt = n - m\n    (p, q) = divmod(zero_cnt, m + 1)\n    total = n * (n + 1) // 2\n    if p == 0:\n        total -= zero_cnt\n    else:\n        total -= p * (p + 1) // 2 * (m + 1 - q)\n        total -= (p + 1) * (p + 2) // 2 * q\n    res.append(str(total))\nprint('\\n'.join(res))", "import sys\n(T,) = map(int, input().split())\nans = []\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    numSubstrings = N * (N + 1) // 2\n    numZeroes = N - M\n    numGroups = M + 1\n    (d, r) = divmod(numZeroes, numGroups)\n    assert (numGroups - r) * d + r * (d + 1) == numZeroes\n    ans.append(numSubstrings - (numGroups - r) * (d * (d + 1) // 2) - r * ((d + 1) * (d + 2) // 2))\nprint('\\n'.join(map(str, ans)))", "import sys\nn = int(input())\nfor _ in range(n):\n    (n, m) = map(int, sys.stdin.readline().split())\n    grp = (n - m) // (m + 1)\n    ans = n * (n + 1) // 2 - grp * (grp + 1) // 2 * (m + 1) - (grp + 1) * ((n - m) % (m + 1))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nout = sys.stdout\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = (n - m) // (m + 1)\n    b = (n - m) % (m + 1)\n    a1 = (m + 1 - b) * (a * (a + 1)) // 2\n    b1 = b * ((a + 1) * (a + 2)) // 2\n    ans = n * (n + 1) // 2 - a1 - b1\n    out.write(str(ans) + '\\n')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grps = m + 1\n    zeach = (n - m) // grps\n    extras = (n - m) % grps\n    print(n * (n + 1) // 2 - zeach * (zeach + 1) // 2 * grps - extras * (zeach + 1))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    ze = n - m\n    allp = n * (n + 1) // 2\n    mean = ze // (m + 1)\n    more = ze % (m + 1)\n    allp -= (m + 1 - more) * (mean * (mean + 1) // 2) + more * ((mean + 1) * (mean + 2) // 2)\n    print(allp)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split(' '))\n    p = (n - m) // (m + 1)\n    q = (n - m) % (m + 1)\n    x = q * (p + 1) * (p + 2) // 2\n    y = (m + 1 - q) * p * (p + 1) // 2\n    res = n * (n + 1) // 2 - (x + y)\n    print(res)", "import sys\nget = lambda x: x * (x + 1) // 2\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split(' '))\n    all = get(n)\n    zeros = n - m\n    len_complete_intervals = zeros // (m + 1)\n    len_remained_intervals = zeros % (m + 1)\n    print(all - get(len_complete_intervals) * (m + 1) - (len_complete_intervals + 1) * len_remained_intervals)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    ans = n * (n + 1) // 2\n    x = (n - m) // (m + 1)\n    y = (n - m) % (m + 1)\n    ans -= y * (x + 2) * (x + 1) // 2 + (m + 1 - y) * (x + 1) * x // 2\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    z = n - m\n    k = z // (m + 1)\n    totalk = k * (k + 1) / 2\n    g = m + 1\n    output = n * (n + 1) // 2 - k * (k + 1) // 2 * g - (k + 1) * (z % g)\n    print(int(output))", "import sys\ninput = sys.stdin.readline\nfrom itertools import groupby\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef fun(x):\n    if x <= 0:\n        return 0\n    return x * (x + 1) >> 1\n\ndef HalfDead():\n    (n, m) = R()\n    n += 1\n    m += 1\n    (x, rem) = divmod(n, m)\n    zero = (m - rem) * fun(x - 1) + rem * fun(x)\n    print(fun(n - 1) - zero)\nfor _ in range(I()):\n    HalfDead()", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    r = n - m\n    if m == 0:\n        print(0)\n    else:\n        v = r % (m + 1)\n        k = r // (m + 1)\n        c = v * ((k + 1) * k // 2 + k + 1) + (m + 1 - v) * (k * (k - 1) // 2 + k)\n        print(n * (n - 1) // 2 + n - c)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, m) = (int(x) for x in input().strip().split(' '))\n    g = m + 1\n    z = n - m\n    k = z // g\n    print(n * (n + 1) // 2 - g * k * (k + 1) // 2 - (k + 1) * (z % g))", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split(' '))\n    p = (n - m) // (m + 1)\n    q = (n - m) % (m + 1)\n    x = q * (p + 1) * (p + 2) // 2\n    y = (m + 1 - q) * p * (p + 1) // 2\n    res = n * (n + 1) // 2 - (x + y)\n    print(res)", "from collections import Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef f(n):\n    return n * (n + 1) // 2\n\ndef solve():\n    for _ in range(nin()):\n        (n, m) = read()\n        z = n - m\n        g = m + 1\n        k = z // g\n        ans = f(n) - f(k) * (g - z % g) - f(k + 1) * (z % g)\n        ans_.append(ans)\nsolve()\nfor i in ans_:\n    print(i)", "from sys import stdin\ninput = stdin.readline\nimport math\nt = int(input())\n\ndef g(x):\n    return x * (x - 1) // 2 + x\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    c = n - m\n    d = m + 1\n    c_d = math.ceil(c / d)\n    a = c_d * d - c\n    b = d - a\n    ans = g(n) - g(c_d - 1) * a - g(c_d) * b\n    print(ans)", "import sys\ninput = sys.stdin.readline\nimport math\nimport copy\nimport collections\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    z = n - m\n    o = m\n    val = z // (m + 1)\n    num = z % (m + 1)\n    ans = math.comb(n + 1, 2) - math.comb(val + 2, 2) * num - math.comb(val + 1, 2) * (m + 1 - num)\n    print(ans)", "import sys\nt = int(input())\nfor i in range(t):\n    line = list(map(int, sys.stdin.readline().split()))\n    n = line[0]\n    m = line[1]\n    rem = (n - m) % (m + 1)\n    q = (n - m) // (m + 1)\n    ans = n * (n - 1) // 2 + m - rem * ((q + 1) * q) // 2 - (m + 1 - rem) * (q * (q - 1) // 2)\n    print(ans)", "n = int(input())\nl1 = []\nl2 = []\nfor x in range(n):\n    s = str(input())\n    l = s.split(' ')\n    l1.append(int(l[0]))\n    l2.append(int(l[1]))\nl3 = []\ni = 0\nwhile i < n:\n    k = l2[i] + 1\n    z = l1[i] - l2[i]\n    q = z // k\n    r = z % k\n    tz = r * ((q + 2) * (q + 1) // 2) + (k - r) * ((q + 1) * q // 2)\n    l3.append(l1[i] * (l1[i] + 1) // 2 - tz)\n    i = i + 1\nfor x in l3:\n    print(x)", "import sys\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\nsigma = lambda x: x * (x + 1) // 2\nfor _ in range(int(input())):\n    (n, m) = read()\n    k = n - m\n    total = sigma(n)\n    if k > m:\n        (e, f) = divmod(k, m + 1)\n        total -= (m + 1 - f) * sigma(e) + f * sigma(e + 1)\n    else:\n        total -= k\n    print(total)", "import math, sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef meth(x):\n    return x * (x + 1) // 2\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    val = (n - m) // (m + 1)\n    pp = (n - m) % (m + 1)\n    res = n * (n + 1) // 2\n    res -= pp * meth(val + 1)\n    res -= (m + 1 - pp) * meth(val)\n    print(res)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nC = [list(map(int, input().split())) for i in range(t)]\n\ndef c(x, y):\n    if x % 2 == 0:\n        return x // 2 * y\n    else:\n        return y // 2 * x\nfor i in range(t):\n    n = C[i][0]\n    o = C[i][1]\n    z = n - o\n    al = c(n, n - 1) + n\n    if z - 1 <= o:\n        print(al - z)\n    else:\n        a = z // (o + 1)\n        b = z % (o + 1)\n        mi = c(a + 1, a + 2) * b + c(a, a + 1) * (o + 1 - b)\n        print(al - mi)", "T = int(input())\ns = ''\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    k = n - m\n    m += 1\n    t = k // m\n    kol = k - t * m\n    ans = n * (n + 1) // 2 - (kol * (t + 1) ** 2 + (m - kol) * t ** 2 + k) // 2\n    s += str(ans) + '\\n'\nprint(s)", "t = int(input())\nraw = []\nfor _ in range(t):\n    raw.append(list(map(int, input().split())))\nfor i in range(t):\n    (n, m) = raw[i]\n    p = (n - m) // (m + 1)\n    q = (n - m) % (m + 1)\n    ans = n * (n + 1) // 2\n    ans -= (p + 1) * (p + 2) * q // 2\n    ans -= p * (p + 1) * (m + 1 - q) // 2\n    print(ans)", "from sys import stdin, stdout\nimport math\nq = int(stdin.readline())\nfor x in range(q):\n    (n, m) = [int(x) for x in stdin.readline().split()]\n    if m == 0:\n        print('0')\n    else:\n        temp = (n - m) / (m + 1)\n        if int(math.ceil(temp)) == int(temp) and temp != 0:\n            temp = int(temp)\n            temp2 = temp * (temp + 1) // 2 * (m + 1)\n        else:\n            temp = math.ceil(temp)\n            temp1 = (n - m) % (m + 1)\n            temp2 = temp * (temp + 1) // 2 * temp1 + temp * (temp - 1) // 2 * (m + 1 - temp1)\n        sum1 = (n + 1) * n // 2\n        sum1 = sum1 - temp2\n        print(int(sum1))", "from sys import *\nfrom collections import *\nfrom math import *\n\ndef ii():\n    return int(stdin.readline())\n\ndef fi():\n    return float(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef fmi():\n    return map(float, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef lsi():\n    x = li()\n    x.pop()\n    return x\n\ndef si():\n    return stdin.readline()\n\ndef get(a, d, n):\n    return n * (2 * a + (n - 1) * d) // 2\ntc = ii()\nfor tcase in range(tc):\n    (n, m) = mi()\n    if m is 0:\n        print(0)\n        continue\n    p = n - m\n    cnt = p // (m + 1)\n    p -= cnt\n    sum1 = get(m, 1, p)\n    sum2 = get(m * 2, m, cnt)\n    sum3 = get(1, 1, m)\n    ans = sum1 + sum2 + sum3\n    print(ans)", "t = int(input())\nC = [list(map(int, input().split())) for i in range(t)]\n\ndef c(x, y):\n    if x % 2 == 0:\n        return x // 2 * y\n    else:\n        return y // 2 * x\nfor i in range(t):\n    n = C[i][0]\n    o = C[i][1]\n    z = n - o\n    al = c(n, n - 1) + n\n    if z - 1 <= o:\n        print(al - z)\n    else:\n        a = z // (o + 1)\n        b = z % (o + 1)\n        mi = c(a + 1, a + 2) * b + c(a, a + 1) * (o + 1 - b)\n        print(al - mi)", "def Sol(n, m):\n    cant = n * (n + 1) // 2\n    z = n - m\n    k = z // (m + 1)\n    cant -= (m + 1) * k * (k + 1) // 2\n    cant -= z % (m + 1) * (k + 1)\n    return int(cant)\nt = int(input())\nwhile t > 0:\n    aux = input()\n    (n, m) = aux.split(' ')\n    print(Sol(int(n), int(m)))\n    t -= 1", "def Sol(n, m):\n    cant = n * (n + 1) // 2\n    z = n - m\n    k = z // (m + 1)\n    cant -= (m + 1) * k * (k + 1) // 2\n    cant -= z % (m + 1) * (k + 1)\n    return int(cant)\nt = int(input())\nwhile t > 0:\n    aux = input()\n    (n, m) = aux.split(' ')\n    print(Sol(int(n), int(m)))\n    t -= 1", "def Sol(n, m):\n    cant = n * (n + 1) // 2\n    z = n - m\n    k = z // (m + 1)\n    cant -= (m + 1) * k * (k + 1) // 2\n    cant -= z % (m + 1) * (k + 1)\n    return int(cant)\nt = int(input())\nwhile t > 0:\n    aux = input()\n    (n, m) = aux.split(' ')\n    print(Sol(int(n), int(m)))\n    t -= 1", "def Sol(n, m):\n    cant = n * (n + 1) // 2\n    z = n - m\n    k = z // (m + 1)\n    cant -= (m + 1) * k * (k + 1) // 2\n    cant -= z % (m + 1) * (k + 1)\n    return int(cant)\nt = int(input())\nwhile t > 0:\n    aux = input()\n    (n, m) = aux.split(' ')\n    print(Sol(int(n), int(m)))\n    t -= 1", "t = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    r = (n - m) % (m + 1)\n    d = (n - m) // (m + 1)\n    ans = (n - m + r) * (d + 1)\n    print((n * (n + 1) - ans) // 2)", "def solve():\n    (n, m) = map(int, input().split())\n    n -= m\n    k = n // (m + 1)\n    ans = n % (m + 1) * (k + 1)\n    ans += (m + 1) * k * (k + 1) // 2\n    n += m\n    print(n * (n + 1) // 2 - ans)\nfor i in range(int(input())):\n    solve()", "from math import *\nfrom heapq import heappop, heappush\nMOD = 10 ** 9 + 7\n\nclass Solution:\n    pass\n\ndef areYouCool(n, a, b, amount):\n    for val in range(1, min(a // amount, n - 1) + 1):\n        if b // amount + val >= n:\n            return True\n    return False\n\ndef solution():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        if m == 0:\n            print(0)\n            continue\n        zeros = n - m\n        total = n * (n + 1) // 2\n        if zeros <= m:\n            print(total - zeros)\n            continue\n        m += 1\n        k = zeros // m\n        l = zeros % m\n        res = total - l * ((k + 1) * (k + 2)) // 2 - (m - l) * (k * (k + 1)) // 2\n        print(res)\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solution()\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(1 << 27)\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "t = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    r = (n - m) % (m + 1)\n    d = (n - m) // (m + 1)\n    ans = (n - m + r) * (d + 1)\n    print((n * (n + 1) - ans) // 2)", "for _ in range(int(input())):\n    [a, b] = list(map(int, input().split(' ')))\n    k = (a - b) // (b + 1)\n    extra = (a - b) % (b + 1)\n    print((a * (a + 1) - (a - b + extra) * (k + 1)) // 2)"]