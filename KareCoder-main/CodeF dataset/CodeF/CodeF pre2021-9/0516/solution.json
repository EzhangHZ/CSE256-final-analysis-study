["def main():\n    test = 1\n    for _ in range(test):\n        n = int(input())\n        ara = [int(num) for num in input().split()]\n        mark = [True for _ in range(n + 1)]\n        for num in ara:\n            mark[num] = False\n        take_from = []\n        for index in range(n + 1):\n            if mark[index]:\n                take_from.append(index)\n        ans = []\n        ans.append(take_from[0])\n        take_at = 1\n        take_size = len(take_from)\n        for index in range(1, n):\n            if ara[index] != ara[index - 1]:\n                ans.append(ara[index - 1])\n            elif take_at < take_size:\n                ans.append(take_from[take_at])\n                take_at += 1\n            else:\n                ans.append(n + 1)\n        ans = ' '.join(map(str, ans))\n        print(ans)\nmain()", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nans = []\nok = True\ns = set(a)\nnow = 1\np = 0\nfor i in a:\n    if i != p:\n        ans.append(p)\n        p = i\n    else:\n        while now in s:\n            now += 1\n        ans.append(now)\n        now += 1\nprint(*ans)", "def f(a):\n    st = set(a)\n    now = 1\n    p = 0\n    ans = []\n    for i in a:\n        if i != p:\n            ans.append(p)\n            p = i\n        else:\n            while now in st:\n                now += 1\n            ans.append(now)\n            now += 1\n    return ans\na = input()\nlst = list(map(int, input().strip().split()))\nprint(*f(lst))", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nn = int(input())\narr = int_arr()\ns = set(arr)\narr.insert(0, arr[0])\nans = []\np = 0\nx = 0\nind = 0\nfor i in range(1, n + 1):\n    if arr[i] != arr[i - 1]:\n        ans.append(arr[i - 1])\n    else:\n        while ind in s:\n            ind += 1\n        ans.append(ind)\n        ind += 1\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nx = 1\nprev = 0\ns = set(l)\nres = []\nfor i in l:\n    if i != prev:\n        res.append(prev)\n        prev = i\n    else:\n        while x in s:\n            x += 1\n        res.append(x)\n        x += 1\nprint(*res)", "n = int(input())\na = list(map(int, input().split()))\np = 0\nq = 1\nt = set(a)\nfor i in a:\n    if i == p:\n        while q in t:\n            q += 1\n        print(q, end=' ')\n        q += 1\n    else:\n        print(p, end=' ')\n        p = i", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef check(a, b):\n    n = len(a)\n    bb = [False] * (n + 1)\n    c = [0] * n\n    j = 0\n    z = 0\n    for i in a:\n        if i <= n:\n            bb[i] = True\n        while bb[j]:\n            j += 1\n        if b[z] != j:\n            return False\n        z += 1\n    return True\n\ndef solve():\n    n = mint()\n    a = list(mints())\n    b = [None] * n\n    c = [False] * (n + 1)\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\n            if a[i - 1] <= n:\n                c[a[i - 1]] = True\n    if a[-1] <= n:\n        c[a[-1]] = True\n    if a[0] != 0:\n        b[0] = 0\n        c[0] = True\n    j = 0\n    for i in range(n):\n        if b[i] is None:\n            while c[j]:\n                j += 1\n            b[i] = j\n            c[j] = True\n    if check(b, a):\n        print(' '.join(map(str, b)))\n    else:\n        print(-1)\nsolve()", "def ss(n, l):\n    if l != sorted(l) or l[-1] > n:\n        return [-1]\n    for i in range(n):\n        if l[i] > i + 1:\n            return [-1]\n    v = [0 for _ in range(n + 1)]\n    ans = [0 for _ in range(n)]\n    j = n\n    for i in range(n - 1, 0, -1):\n        v[l[i]] = 1\n        if l[i - 1] != l[i]:\n            ans[i] = l[i - 1]\n        else:\n            if v[j] == 1:\n                while v[j] == 1:\n                    j -= 1\n            ans[i] = j\n            j -= 1\n    if l[0] == 0:\n        while v[j] == 1:\n            j -= 1\n        ans[0] = j\n    return ans\nn = int(input())\nl = list(map(int, input().split()))\nprint(*ss(n, l))", "def solve_test_case(t):\n    n = int(input())\n    a = parse_array(int)\n    a_set = set(a)\n    b = []\n    b_set = set()\n    mex = 0\n    max_b = -1\n\n    def add_to_b(v):\n        nonlocal b\n        nonlocal b_set\n        nonlocal mex\n        nonlocal max_b\n        b.append(v)\n        b_set.add(v)\n        max_b = max(max_b, v)\n        if v == mex:\n            while mex in b_set:\n                mex += 1\n    if a[0] == 1:\n        add_to_b(0)\n    elif a[0] > 1:\n        print(-1)\n        return\n    else:\n        i = 1\n        while True:\n            if i not in a_set:\n                add_to_b(i)\n                break\n            i += 1\n    possible = True\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            add_to_b(a[i - 1])\n            if mex != a[i]:\n                possible = False\n                break\n        else:\n            v = max_b + 1\n            while True:\n                if v not in a_set:\n                    add_to_b(v)\n                    break\n                v += 1\n    if possible:\n        print(' '.join(list(map(str, b))))\n    else:\n        print(-1)\n\ndef parse_array(f):\n    return list(map(f, input().split()))\nsolve_test_case(0)", "def main():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    reserve = set()\n    if lst[0] > 1:\n        print(-1)\n        return\n    for i in range(0, n):\n        if lst[i] > i + 1:\n            print(-1)\n            return\n        reserve.add(lst[i])\n    can_use = []\n    cur = lst[0]\n    for i in range(0, n + 1):\n        if not i in reserve:\n            can_use.append(i)\n    can_use.reverse()\n    used = []\n    for i in range(0, n):\n        if lst[i] == cur:\n            if len(can_use) == 0:\n                print(-1)\n                return\n            used.append(can_use.pop())\n        else:\n            if len(can_use) != 0 and can_use[-1] < cur:\n                print(-1)\n                return\n            used.append(cur)\n            cur = lst[i]\n    line = ''\n    for i in used:\n        line += str(i) + ' '\n    print(line)\nt = 1\nfor i in range(t):\n    main()", "no = int(input())\nseq = list(map(int, input().split()))\nx = 0\ny = 1\nt = set(seq)\nfor i in seq:\n    if i == x:\n        while y in t:\n            y += 1\n        print(y, end=' ')\n        y += 1\n    else:\n        print(x, end=' ')\n        x = i", "n = int(input())\nl = list(map(int, input().split()))\nx = 1\nprev = 0\ns = set(l)\nres = []\nflag = True\nfor i in range(n):\n    if i + 1 < l[i] or (i > 1 and l[i] < l[i - 1]):\n        flag = False\n        break\nif flag:\n    for i in l:\n        if i != prev:\n            res.append(prev)\n            prev = i\n        else:\n            while x in s:\n                x += 1\n            res.append(x)\n            x += 1\n    print(*res)\nelse:\n    print(-1)", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(n,) = rl()\na = rl()\na_set = set(a)\nfree = 0\nprev = 0\nb = []\nfor cur in a:\n    if cur != prev:\n        b.append(prev)\n        if free == prev:\n            free += 1\n        prev = cur\n    else:\n        while free in a_set:\n            free += 1\n        b.append(free)\n        free += 1\nprint(*b)", "(n, mas, now, p) = (int(input()), list(map(int, input().split())), 1, 0)\ns = set(mas)\nfor i in range(n):\n    if mas[i] != p:\n        print(p, end=' ')\n        p = mas[i]\n        if now == mas[i]:\n            now += 1\n    else:\n        while now in s:\n            now += 1\n        print(now, end=' ')\n        now += 1\nprint()", "(n, mas, now, p) = (int(input()), list(map(int, input().split())), 1, 0)\ns = set(mas)\nfor i in range(n):\n    if mas[i] != p:\n        print(p, end=' ')\n        p = mas[i]\n        if now == mas[i]:\n            now += 1\n    else:\n        while now in s:\n            now += 1\n        print(now, end=' ')\n        now += 1\nprint()", "n = int(input())\na = list(map(int, input().split()))\np = 0\nq = 1\nt = set(a)\nfor i in a:\n    if i == p:\n        while q in t:\n            q += 1\n        print(q, end=' ')\n        q += 1\n    else:\n        print(p, end=' ')\n        p = i", "n = int(input())\narr = list(map(int, input().split()))\np = 0\nq = 1\nt = set(arr)\nfor i in arr:\n    if i == p:\n        while q in t:\n            q += 1\n        print(q, end=' ')\n        q += 1\n    else:\n        print(p, end=' ')\n        p = i", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    mx = 10 ** 6\n    use = [False] * mx\n    for (i, a) in enumerate(aa[1:], 1):\n        if a > i:\n            return [-1]\n        use[a] = True\n    bb = []\n    j = 0\n    for i in range(1, n + 1):\n        if aa[i] == aa[i - 1]:\n            while use[j]:\n                j += 1\n            use[j] = True\n            bb.append(j)\n        else:\n            bb.append(aa[i - 1])\n            use[aa[i - 1]] = True\n    return bb\nn = II()\naa = [0] + LI()\nprint(*main())", "n = int(input())\nm = 0\np = 0\nc = []\nd = []\nb = [int(a) for a in input().split()]\nfor i in range(0, n):\n    if b[i] == m:\n        if m == 0:\n            c.append(1)\n        else:\n            c.append(m - 1)\n        d.append(i)\n    elif b[i] < m:\n        p = 1\n        break\n    else:\n        k = b[i] - m\n        k -= 1\n        c.append(m)\n        m += 1\n        if k:\n            if len(d) < k:\n                p = 1\n                break\n            else:\n                while k > 0:\n                    h = d.pop()\n                    k -= 1\n                    c[h] = m\n                    m += 1\nwhile len(d) > 0:\n    h = d.pop()\n    c[h] = m + 1\n    m += 1\nif p:\n    print(-1)\nelse:\n    for i in c:\n        print(i, end=' ')\n    print()", "def help():\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    ans_arr = [-1] * n\n    dicti = {}\n    if arr[0] == 1:\n        ans_arr[0] = 0\n        dicti[0] = 1\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            ans_arr[i] = arr[i - 1]\n            dicti[arr[i - 1]] = 1\n    dicti[arr[-1]] = 1\n    m = 0\n    for i in range(n):\n        while dicti.get(m, -1) == 1:\n            m += 1\n        if ans_arr[i] == -1:\n            ans_arr[i] = m\n            dicti[m] = 1\n    print(*ans_arr)\nfor _ in range(1):\n    help()", "n = int(input())\nl = list(map(int, input().split()))\ns = set(l)\nx = 0\ny = 1\nfor i in range(n):\n    if l[i] != x:\n        print(x, end=' ')\n        x = l[i]\n        if y == l[i]:\n            y += 1\n    else:\n        while y in s:\n            y += 1\n        print(y, end=' ')\n        y += 1", "n = int(input())\na = list(map(int, input().split()))\nx = 0\ny = 1\nt = set(a)\nfor i in a:\n    if i == x:\n        while y in t:\n            y += 1\n        print(y, end=' ')\n        y += 1\n    else:\n        print(x, end=' ')\n        x = i", "import sys\nn = int(input())\nmas = list(map(int, input().split()))\nfor i in range(n):\n    if mas[i] > i + 1:\n        print(-1)\n        sys.exit(0)\ns = set(mas)\nnow = 1\np = 0\nfor i in range(n):\n    if mas[i] != p:\n        print(p, end=' ')\n        p = mas[i]\n        if now == mas[i]:\n            now += 1\n    else:\n        while now in s:\n            now += 1\n        print(now, end=' ')\n        now += 1\nprint()", "import math\nn = int(input())\na = [int(i) for i in input().split()]\nd = False\nfor i in range(n):\n    if a[i] > i + 1 or (i < n - 1 and a[i + 1] < a[i]):\n        print(-1)\n        d = True\n        break\nif not d:\n    out = [-1] * n\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            out[i] = str(a[i - 1])\n        else:\n            out[i] = -1\n    next_ = n\n    seen = {a[-1]}\n    for i in range(n - 1, -1, -1):\n        seen.add(a[i])\n        if out[i] == -1:\n            while next_ in seen:\n                next_ -= 1\n            out[i] = str(next_)\n            next_ -= 1\n    print(' '.join(out))", "def main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = [-1] * n\n    N = 10 ** 6\n    now = N\n    TB = [True] * N\n    if A[0] > 0:\n        B[0] = 0\n        TB[0] = False\n    for i in range(1, n):\n        a = A[i]\n        ab = A[i - 1]\n        if ab < a:\n            if TB[ab]:\n                B[i] = ab\n                TB[ab] = False\n    TB[A[-1]] = False\n    indexb = 0\n    for i in range(n):\n        if B[i] != -1:\n            continue\n        for j in range(indexb, N):\n            if TB[j]:\n                TB[j] = False\n                indexb = j + 1\n                B[i] = j\n                break\n    indexa = 0\n    TA = [True] * N\n    for i in range(n):\n        TA[B[i]] = False\n        for j in range(indexa, N):\n            if TA[j]:\n                if A[i] != j:\n                    print(-1)\n                    return\n                indexa = j\n                break\n    print(' '.join(map(str, B)))\nmain()", "import sys\nn = int(input())\nmas = list(map(int, input().split()))\ns = set(mas)\nnow = 1\np = 0\nfor i in range(n):\n    if mas[i] != p:\n        print(p, end=' ')\n        p = mas[i]\n        if now == mas[i]:\n            now += 1\n    else:\n        while now in s:\n            now += 1\n        print(now, end=' ')\n        now += 1\nprint()", "n = int(input())\na = list(map(int, input().split()))\nl = [0] * (n + 2)\nfor elem in a:\n    l[elem] = 1\nnot_present = []\nfor i in range(n + 2):\n    if l[i] == 0:\n        not_present.append(i)\nj = 0\nb = []\nfor i in range(n):\n    if i == 0:\n        b.append(not_present[j])\n        j += 1\n    elif a[i] != a[i - 1]:\n        b.append(a[i - 1])\n    else:\n        b.append(not_present[j])\n        j += 1\nprint(*b)", "import math\nimport sys\nimport collections\nfrom collections import defaultdict\nfrom sys import stdin, stdout\nn = int(input())\narr = list(map(int, input().split()))\ntemp = set(arr)\n(a, b) = (0, 1)\nans = []\nfor i in range(n):\n    if arr[i] != a:\n        ans.append(a)\n        if arr[i] == b:\n            b += 1\n    else:\n        while b in temp:\n            b += 1\n        ans.append(b)\n        b += 1\n    a = arr[i]\nprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\nans = [-1] * n\nfor index in range(1, n):\n    if a[index] != a[index - 1]:\n        ans[index] = a[index - 1]\nnot_to_be_included = set(a)\ninit = 0\nfor index in range(n):\n    if ans[index] == -1:\n        while init in not_to_be_included:\n            init += 1\n        ans[index] = init\n        init += 1\nprint(*ans)", "from collections import deque\nn = int(input())\nbb = ''\nc = [0 for j in range(n + 1)]\na = input().split(' ')\nfor j in range(n):\n    a[j] = int(a[j])\n    c[a[j]] = 1\nb = [0 for j in range(n)]\nk = 0\nfor j in range(n):\n    if j == 0 or a[j] == a[j - 1]:\n        while c[k] != 0:\n            k += 1\n        b[j] = k\n        k += 1\n    else:\n        b[j] = a[j - 1]\nfor j in range(len(b)):\n    bb += str(b[j]) + ' '\nprint(bb)", "def solution(a):\n    b = [-1] * len(a)\n    d = {}\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\n            d[b[i]] = 1\n    d[a[n - 1]] = 1\n    m = 0\n    for i in range(0, len(a)):\n        while d.get(m, 0):\n            m = m + 1\n        if b[i] == -1:\n            b[i] = m\n            d[m] = 1\n    return b\nn = int(input())\na = [int(x) for x in input().split()]\nprint(*solution(a))", "n = int(input())\na = list(map(int, input().split()))\nb = set(a)\n(k, t) = (0, 0)\nnot_in_set = []\nfor j in range(1, n + 1):\n    if j not in b:\n        not_in_set.append(j)\nfor i in range(n):\n    if a[i] > i + 1:\n        print(-1)\n        break\n    elif a[i] != k:\n        print(k, end=' ')\n        k = a[i]\n    else:\n        print(not_in_set[t], end=' ')\n        t += 1", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\nimport collections as col\nimport math, itertools\n\ndef solve():\n    N = getInt()\n    A = getInts()\n    B = []\n    A_dict = {}\n    for j in range(N):\n        A_dict[A[j]] = j\n    allowed_nums = [j for j in range(3 * N // 2, -1, -1) if j not in A_dict]\n    for j in range(N):\n        if A[j] > j + 1:\n            return -1\n        B.append(allowed_nums.pop())\n        if A_dict[A[j]] == j:\n            allowed_nums.append(A[j])\n    print(*B)\nsolve()", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\nimport collections as col\nimport math, itertools\n\ndef solve():\n    N = getInt()\n    A = getInts()\n    B = []\n    A_dict = {}\n    for j in range(N):\n        A_dict[A[j]] = j\n    allowed_nums = [j for j in range(N, -1, -1) if j not in A_dict]\n    for j in range(N):\n        if A[j] > j + 1:\n            return -1\n        B.append(allowed_nums.pop())\n        if A_dict[A[j]] == j:\n            allowed_nums.append(A[j])\n    print(*B)\nsolve()", "n = int(input())\na = list(map(int, input().split()))\nb = [False] * 200000\nans = []\nfor i in a:\n    b[i] = True\nfor i in range(200000):\n    if not b[i]:\n        ans.append(i)\nprint(ans[0], end=' ')\nt = 1\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        print(a[i - 1], end=' ')\n    else:\n        print(ans[t], end=' ')\n        t += 1", "n = int(input())\na = list(map(int, input().split()))\nok = a[0] - 1 <= 0\nfor i in range(1, n):\n    if a[i] - 1 > i:\n        ok = False\n    if a[i] < a[i - 1]:\n        ok = False\nif ok == False:\n    print(-1)\n    quit()\nm = set(a)\nb = []\ns = 0\nfor i in range(s, n + 10):\n    if i not in m:\n        b.append(i)\n        s = i + 1\n        break\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b.append(a[i - 1])\n        continue\n    for j in range(s, n + 10):\n        if j not in m:\n            b.append(j)\n            s = j + 1\n            break\nfor i in range(n):\n    print(b[i], end=' ')", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(n,) = rl()\na = rl()\na_set = set(a)\nfree = 0\nprev = 0\nb = []\nfor cur in a:\n    if cur != prev:\n        b.append(prev)\n        if free == prev:\n            free += 1\n        prev = cur\n    else:\n        while free in a_set:\n            free += 1\n        b.append(free)\n        free += 1\nprint(*b)", "n = int(input())\na = list(map(int, input().split()))\nm = int(1000000.0)\nb = [-1] * n\ne = 0\nv = [0] * m\nfor i in range(n):\n    if a[i] != e:\n        b[i] = e\n        v[e] = 1\n        e = a[i]\nv[e] = 1\nk = 0\nfor i in range(n):\n    while v[k] == 1:\n        k += 1\n    if b[i] == -1:\n        b[i] = k\n        v[k] = 1\nprint(*b)", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\nimport collections as col\nimport math, itertools\n\ndef solve():\n    N = getInt()\n    A = getInts()\n    B = []\n    A_dict = {}\n    for j in range(N):\n        A_dict[A[j]] = j\n    allowed_nums = [j for j in range(3 * N // 2, -1, -1) if j not in A_dict]\n    for j in range(N):\n        if A[j] > j + 1:\n            return -1\n        if allowed_nums:\n            B.append(allowed_nums.pop())\n        else:\n            B.append(10 ** 6 - 1)\n        if A_dict[A[j]] == j:\n            allowed_nums.append(A[j])\n    print(*B)\nsolve()", "n = int(input())\na = list(map(int, input().split()))\nv1 = [False] * (n + 1)\ns1 = sorted(list(set(a)), reverse=True)\nfor i in s1:\n    v1[i] = True\ntmp = 0\nb = [0] * n\nflag = True\nfor i in range(n):\n    if len(s1) > 0 and a[i] > s1[-1]:\n        b[i] = s1[-1]\n        s1.pop()\n    elif flag == True:\n        if tmp == a[i] or v1[tmp] == True:\n            while True:\n                tmp += 1\n                if tmp > n:\n                    flag = False\n                    b[i] = n + 5\n                    break\n                if v1[tmp] == False:\n                    b[i] = tmp\n                    tmp += 1\n                    break\n        else:\n            b[i] = tmp\n            tmp += 1\n    else:\n        b[i] = n + 5\nprint(*b)", "arr_len = int(input())\narr = list(map(int, input().split()))\nres = [-1]\nfor i in range(arr_len - 1):\n    if arr[i] != arr[i + 1]:\n        res.append(arr[i])\n    else:\n        res.append(-1)\nlow = 0\narr_set = set(arr)\nfor i in range(arr_len):\n    if res[i] == -1:\n        while low in arr_set:\n            low += 1\n        res[i] = low\n        low += 1\nfor x in res:\n    print(x, end=' ')\nprint()", "n = int(input())\nnum = tuple(map(int, input().split()))\ns = set(num)\nss = set()\nprev = 0\nm = 0\nans = [0] * n\nfor i in range(n):\n    cur = num[i]\n    if cur == prev:\n        while m in s:\n            m += 1\n        ans[i] = m\n        s.add(m)\n        ss.add(m)\n    else:\n        ans[i] = prev\n        s.add(prev)\n        ss.add(prev)\n        while prev in ss:\n            prev += 1\n        if prev != cur:\n            print(-1)\n            break\nelse:\n    print(*ans)", "n = int(input())\na = list(map(int, input().split()))\np = 0\nq = 1\nt = set(a)\nfor i in a:\n    if i == p:\n        while q in t:\n            q += 1\n        print(q, end=' ')\n        q += 1\n    else:\n        print(p, end=' ')\n        p = i", "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * n\nl = [0] * (10 ** 5 + 1)\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b[i] = a[i - 1]\n        l[b[i]] = 1\nl[a[n - 1]] = 1\nd = []\nfor i in range(10 ** 5 + 1):\n    if l[i] == 0:\n        d.append(i)\nk = 0\nfor i in range(n):\n    if b[i] == -1:\n        b[i] = d[k]\n        k += 1\nprint(*b)", "n = int(input())\na = list(map(int, input().split(' ')))\ntemp = {}\ncounter = 0\nans = []\nflag = False\nfor i in range(n):\n    temp[a[i]] = True\nif not counter in temp:\n    ans.append(counter)\n    counter += 1\nelse:\n    while counter in temp:\n        counter += 1\n    ans.append(counter)\n    counter += 1\nif a[0] != 0 and a[0] != 1:\n    print(-1)\n    flag = True\nfor i in range(1, n):\n    if a[i] > i + 1:\n        print(-1)\n        flag = True\n    if a[i] != a[i - 1]:\n        ans.append(a[i - 1])\n    elif not counter in temp:\n        ans.append(counter)\n        counter += 1\n    else:\n        while counter in temp:\n            counter += 1\n        ans.append(counter)\n        counter += 1\nif not flag:\n    print(*ans)", "n = int(input())\na = list(map(int, input().split()))\nl = [0] * (n + 1)\nflag = 0\nb = []\nc = []\nimport heapq\nfor i in range(n):\n    if a[i] > i + 1:\n        flag = 1\n        break\n    l[a[i]] += 1\nfor i in range(n + 1):\n    if l[i] == 0:\n        c.append(i)\nheapq.heapify(c)\nif flag == 1:\n    print(-1)\nelse:\n    for i in range(n):\n        j = heapq.heappop(c)\n        b.append(j)\n        l[j] -= 1\n        l[a[i]] -= 1\n        if l[a[i]] == 0:\n            heapq.heappush(c, a[i])\n    print(' '.join(map(str, b)))", "n = int(input())\nlst = list(map(int, input().split()))\na = [-1] * n\nused = [-1] * 100001\nflag = 0\nfor i in range(n):\n    if lst[i] > i + 1:\n        flag = 1\n        break\n    used[lst[i]] = 1\nnot_v = list()\nfor i in range(100001):\n    if used[i] == -1:\n        not_v.append(i)\nfor i in range(1, n):\n    if lst[i] != lst[i - 1]:\n        a[i] = lst[i - 1]\nj = 0\nfor i in range(n):\n    if a[i] == -1:\n        a[i] = not_v[j]\n        j += 1\nprint(*a)", "n = int(input())\nans = [-1] * n\nse = set()\nlis = list(map(int, input().split()))\nlength = len(lis)\nfor i in range(length - 1, 0, -1):\n    if lis[i - 1] != lis[i]:\n        ans[i] = lis[i - 1]\n        se.add(lis[i - 1])\nif lis[0] > 1:\n    print(-1)\n    exit()\ni = 0\nse.add(lis[-1])\nj = 0\nwhile True:\n    if j == length:\n        break\n    if i in se:\n        i += 1\n        continue\n    if ans[j] != -1:\n        j += 1\n        continue\n    ans[j] = i\n    j += 1\n    i += 1\nfor i in ans:\n    print(i, end=' ')", "n = int(input())\ns = list(map(int, input().split()))\nstack = list()\nfor i in range(n, s[-1], -1):\n    stack.append(i)\nfor i in range(len(s) - 1, 0, -1):\n    if s[i] == s[i - 1]:\n        continue\n    else:\n        for j in range(s[i] - 1, s[i - 1], -1):\n            stack.append(j)\nfin_list = list()\nif s[0] == 1:\n    stack.append(0)\nfor i in range(len(s) - 1):\n    if s[i] != s[i + 1]:\n        curr_val = stack.pop(-1)\n        fin_list.append(curr_val)\n        stack.append(s[i])\n    else:\n        curr_val = stack.pop(-1)\n        fin_list.append(curr_val)\ncurr_val = stack.pop(-1)\nfin_list.append(curr_val)\nprint(*fin_list)", "n = int(input())\nlist1 = list(map(int, input().split()))\nlist2 = list()\nvisited = list()\nfor i in range(n):\n    list2.append(-1)\nfor i in range(100001):\n    visited.append(-1)\nf = 0\nfor i in range(n):\n    if list1[i] > i + 1:\n        f = 1\n        break\n    visited[list1[i]] = 1\nnot_v = list()\nfor i in range(100001):\n    if visited[i] == -1:\n        not_v.append(i)\nfor i in range(1, n):\n    if list1[i] != list1[i - 1]:\n        list2[i] = list1[i - 1]\nj = 0\nfor i in range(n):\n    if list2[i] == -1:\n        list2[i] = not_v[j]\n        j += 1\nprint(*list2)", "n = int(input())\nlst = [int(i) for i in input().split()]\na = [-1] * n\nvisited = [-1] * 100001\nflag = 0\nfor i in range(n):\n    if lst[i] > i + 1:\n        flag = 1\n        break\n    visited[lst[i]] = 1\nnot_v = list()\nfor i in range(100001):\n    if visited[i] == -1:\n        not_v.append(i)\nfor i in range(1, n):\n    if lst[i] != lst[i - 1]:\n        a[i] = lst[i - 1]\nj = 0\nfor i in range(n):\n    if a[i] == -1:\n        a[i] = not_v[j]\n        j += 1\nprint(*a)", "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * n\nmarked = [False] * (2 * n + 1)\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b[i] = a[i - 1]\n        marked[b[i]] = True\nmarked[a[n - 1]] = True\nm = 0\nfor i in range(n):\n    while marked[m]:\n        m += 1\n    if b[i] == -1:\n        b[i] = m\n        marked[b[i]] = True\n    print(b[i], end=' ')", "N = int(input())\nA = list(map(int, input().split()))\nmp = {}\nfor i in range(N):\n    mp[A[i]] = i\ncurr = 0\nB = []\nfor i in range(N):\n    if i > 0 and A[i] != A[i - 1]:\n        B.append(A[i - 1])\n        curr = max(A[i - 1] + 1, curr)\n    else:\n        while 1 == 1:\n            if curr in mp and mp[curr] >= i:\n                curr += 1\n            else:\n                break\n        B.append(curr)\n        curr += 1\nfor b in B:\n    print(b, end=' ')\nprint('')", "n = int(input())\nl = list(map(int, input().split()))\nl1 = [0] * 1000004\nlf = [-1] * 1000004\nfor i in range(1, n):\n    l1[l[i]] = 1\n    if l[i] != l[i - 1]:\n        lf[i] = l[i - 1]\nl1[l[0]] = 1\nm = 0\nfor i in range(n):\n    if lf[i] == -1:\n        while l1[m] == 1:\n            m += 1\n        lf[i] = m\n        l1[m] = 1\nfor i in range(n):\n    print(lf[i], end=' ')\nprint()", "a = int(input())\nb = list(map(int, input().split()))\nc = [0] * 1000001\nd = [-1] * 1000001\nfor i in range(1, a):\n    if b[i] != b[i - 1]:\n        d[i] = b[i - 1]\n        c[b[i - 1]] = 1\nm = 0\nc[b[a - 1]] = 1\nfor i in range(a):\n    while c[m]:\n        m += 1\n    if d[i] == -1:\n        d[i] = m\n        c[m] = 1\n    print(d[i], end=' ')", "n = int(input())\nl = list(map(int, input().strip().split()))\nb = [-1 for a in range(0, n)]\nfor i in range(0, n - 1):\n    if l[i] != l[i + 1]:\n        b[i + 1] = l[i]\nt = set([j for j in range(0, 10 ** 6 + 1)]) - set(l)\nt = list(t)\nt.sort()\nc = 0\nfor i in range(0, n):\n    if b[i] == -1:\n        b[i] = t[c]\n        c += 1\nprint(' '.join((str(e) for e in b)))", "n = int(input())\nsp = list(range(n + 1))\nprd = -1\nb = []\na = []\nfor i in input().split():\n    i = int(i)\n    if i != prd:\n        sp[i] = -1\n    prd = i\n    b += [i]\n(pr, k) = (1, 0)\nwhile pr:\n    if sp[k] != -1:\n        a += [sp[k]]\n        k += 1\n        pr = 0\n    else:\n        k += 1\nfor i in range(1, n):\n    if b[i - 1] != b[i]:\n        a += [b[i - 1]]\n    else:\n        pr = 1\n        while pr:\n            if sp[k] != -1:\n                a += [sp[k]]\n                k += 1\n                pr = 0\n            else:\n                k += 1\nprint(*a)", "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * n\nf = 0\nc = [0] * (n + 1)\nfor i in range(n):\n    if i == 0:\n        c[a[i]] = 1\n    else:\n        if a[i] > i + 1:\n            f = 1\n            break\n        c[a[i]] = 1\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\nif f:\n    print(-1)\nelse:\n    x = 0\n    for i in range(n):\n        if b[i] == -1:\n            while c[x % (n + 1)]:\n                x = (x + 1) % (n + 1)\n            c[x % (n + 1)] = 1\n            b[i] = x\n    print(*b)", "n = int(input())\na = list(map(int, input().split()))\nb = []\nc = [0] * (n + 1)\nd = [0] * (n + 1)\nfor i in range(n):\n    c[a[i]] += 1\nu = 0\nv = c.index(0)\nfor i in range(n):\n    if a[i] > u:\n        b.append(u)\n        d[u] = 1\n        while u <= n and d[u] == 1:\n            u += 1\n        if u > v:\n            v = u\n            while v <= n and c[v] != 0:\n                v += 1\n    else:\n        b.append(v)\n        d[v] = 1\n        c[v] = -1\n        while v <= n and c[v] != 0:\n            v += 1\nprint(*b)", "import heapq\n(n, a, b) = (int(input()), list(map(int, input().split())), [0] * 200000)\nfor i in range(n):\n    b[a[i]] = 1\nhp = [i for i in range(n + 1) if not b[i]]\nheapq.heapify(hp)\nfor i in range(n - 1):\n    print(heapq.heappop(hp), end=' ')\n    if a[i] < a[i + 1]:\n        heapq.heappush(hp, a[i])\nprint(heapq.heappop(hp))", "n = int(input())\nmas = list(map(int, input().split()))\nans = []\nhave = [0 for i in range(1000009)]\nfor i in range(n):\n    if i > 0 and mas[i - 1] != mas[i]:\n        ans.append(mas[i - 1])\n        have[mas[i - 1]] = 1\n    else:\n        ans.append(-1)\nj = 0\nhave[mas[n - 1]] = 1\nfor i in range(len(ans)):\n    if ans[i] == -1:\n        while have[j]:\n            j += 1\n        ans[i] = j\n        have[j] = 1\nif mas[0] > 1:\n    print(-1)\nelse:\n    for x in ans:\n        print(x, end=' ')", "import sys\n\ndef read():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve():\n    n = read()\n    a = get_array()\n    a = [0] + a\n    b = [-1 for i in range(n + 1)]\n    used = [False for i in range(n + 1)]\n    for i in range(1, n + 1):\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\n            used[b[i]] = True\n    used[a[n]] = True\n    m = 0\n    for i in range(1, n + 1):\n        if b[i] == -1:\n            while used[m]:\n                m += 1\n            b[i] = m\n            used[m] = True\n    for i in range(1, n + 1):\n        print('%d ' % b[i], end='')\n    print()\nsolve()", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import *\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nsys.setrecursionlimit(int(pow(10, 6)))\nmod = int(pow(10, 9) + 7)\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(*var, end='\\n'):\n    sys.stdout.write(' '.join(map(str, var)) + end)\n\ndef L():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\nt = 1\nfor _ in range(t):\n    n = L()[0]\n    l = L()\n    b = [-1] * n\n    vis = [0] * (n + 1)\n    k = 0\n    vis[l[-1]] = 1\n    for i in range(n - 1, 0, -1):\n        if l[i] != l[i - 1]:\n            b[i] = l[i - 1]\n            vis[l[i - 1]] = 1\n    for i in range(n):\n        if b[i] == -1:\n            while vis[k] == 1:\n                k += 1\n            b[i] = k\n            k += 1\n    print(*b)", "n = int(input())\na = list(map(int, input().split()))\nvalue = n\nused = set()\nb = [-1] * n\nfor i in range(n - 1, -1, -1):\n    used.add(a[i])\n    if i > 0 and a[i] > a[i - 1]:\n        b[i] = a[i - 1]\n    else:\n        while value >= 0 and value in used:\n            value -= 1\n        if value >= 0:\n            b[i] = value\n            if value > 0:\n                value -= 1\n        else:\n            b[i] = n\nused = [0] * (n + 1)\nmex = 0\nfor i in range(n):\n    used[b[i]] = 1\n    while used[mex]:\n        mex += 1\n    if a[i] != mex:\n        print(-1)\n        break\nelse:\n    print(*b)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = 1\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = [-1] * n\n    done = [False] * (n + 1)\n    s = 0\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            continue\n        d[i + 1] = a[i]\n        done[a[i]] = True\n        s = i + 1\n    d[0] = -1 if a[0] == 0 else 0\n    if a[0] == 1:\n        done[0] = True\n    done[a[-1]] = True\n    fin = []\n    for i in range(n, -1, -1):\n        if not done[i]:\n            fin.append(i)\n    for i in range(n):\n        if d[i] == -1:\n            d[i] = fin.pop()\n    for h in d:\n        print(h, end=' ')\n    print('')", "n = int(input())\na = list(map(int, input().split()))\nb = [-1 for i in range(n)]\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b[i] = a[i - 1]\nMEX = 0\nj = 0\nl = []\nwhile j <= n - 1:\n    if MEX < a[j]:\n        l.append(MEX)\n        MEX = MEX + 1\n    elif MEX == a[j]:\n        MEX = MEX + 1\n        j = j + 1\n    elif MEX > a[j]:\n        j = j + 1\n    else:\n        l.append(MEX)\n        MEX = MEX + 1\nwhile len(l) < n:\n    l.append(MEX)\n    MEX = MEX + 1\nj = 0\nfor i in range(n):\n    if b[i] == -1:\n        b[i] = l[j]\n        j = j + 1\nprint(*b)", "import heapq\nn = int(input())\nlist1 = list(map(int, input().split()))\nvist = [0] * 100002\nfor i in range(len(list1)):\n    vist[list1[i]] += 1\nf = 0\nfor i in range(len(list1)):\n    if list1[i] > i + 1:\n        f = 1\n        break\nif f == 1:\n    print(-1)\nelse:\n    p = []\n    for i in range(len(vist)):\n        if vist[i] == 0:\n            p.append(i)\n    heapq.heapify(p)\n    ans = []\n    for i in range(n):\n        t = heapq.heappop(p)\n        ans.append(t)\n        vist[list1[i]] -= 1\n        if vist[list1[i]] == 0:\n            heapq.heappush(p, list1[i])\n    print(*ans)", "from sys import *\nfrom heapq import *\ninput = stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = list(range(1, n + 1))\nchk = [0] * (n + 1)\nflag = 0\nq = []\nfor x in range(n):\n    if a[x] > b[x]:\n        flag = -1\n    chk[a[x]] += 1\nif flag == -1:\n    print(-1)\n    exit()\nfor x in range(n + 1):\n    if chk[x] == 0:\n        heappush(q, x)\nt = heappop(q)\nprint(t, end=' ')\nfor x in range(1, n):\n    if a[x - 1] != a[x]:\n        print(a[x - 1], end=' ')\n    else:\n        t = heappop(q)\n        print(t, end=' ')", "n = int(input())\na = list(map(int, input().split()))\nflag = 1\nv = [False for i in range(100001)]\nfor i in range(n):\n    v[a[i]] = True\n    if a[i] > i + 1:\n        print(-1)\n        flag = 0\n        break\nif flag == 1:\n    b = [-1 for i in range(n)]\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\n            v[a[i - 1]] = True\n    j = 0\n    for i in range(n):\n        if b[i] == -1:\n            while b[i] == -1 and j < 100001:\n                if v[j]:\n                    j += 1\n                else:\n                    b[i] = j\n                    v[j] = True\n    for i in b:\n        print(i, end=' ')", "from heapq import heappush, heappop\nn = int(input())\nar = list(map(int, input().split()))\nvalid = True\ns = []\nfor i in range(n):\n    if ar[i] > i + 1:\n        valid = False\n        break\n    elif i > 0:\n        for j in range(ar[i - 1] + 1, ar[i]):\n            heappush(s, j)\n    elif ar[0] == 1:\n        heappush(s, 0)\nif not valid:\n    print(-1)\nelse:\n    maxi = ar[-1] + 1\n    s_len = len(s)\n    for i in range(s_len, n):\n        heappush(s, maxi)\n        maxi += 1\n    ans = []\n    for i in range(n):\n        k = heappop(s)\n        ans.append(k)\n        if i + 1 < n and ar[i] != ar[i + 1]:\n            heappush(s, ar[i])\n    print(*ans)", "import sys\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 5)\nreadline = sys.stdin.readline\nn = int(readline())\na = list(map(int, readline().split()))\nb = [-1] * n\nnot_visited = []\nvisited = [-1] * 10 ** 6\nflag = True\nfor (i, j) in enumerate(a):\n    if j > i + 1:\n        flag = False\n        break\n    visited[j] = 1\nif not flag:\n    print(-1)\n    sys.exit(0)\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b[i] = a[i - 1]\nfor (i, j) in enumerate(visited):\n    if j == -1:\n        not_visited.append(i)\nk = 0\nfor (i, j) in enumerate(b):\n    if j == -1:\n        b[i] = not_visited[k]\n        k += 1\nprint(*b)", "n = int(input())\narr = list(map(int, input().split()))\nflag = 0\nvis = [0] * (10 ** 6 + 1)\nfor i in range(n):\n    if arr[i] > i + 1:\n        flag = 1\n    vis[arr[i]] = 1\nif flag == 1:\n    print(-1)\n    quit()\nb = [-1] * n\nfor i in range(1, n):\n    if arr[i - 1] != arr[i]:\n        b[i] = arr[i - 1]\nnot_vis = []\nfor i in range(10 ** 6 + 1):\n    if vis[i] == 0:\n        not_vis.append(i)\nj = 0\nfor i in range(n):\n    if b[i] == -1:\n        b[i] = not_vis[j]\n        j += 1\nprint(*b)", "def solve(n, a):\n    fail = [-1]\n    b = [None] * n\n    s = {}\n    t = []\n    m = max(a) + 1\n    for i in range(n):\n        if a[i] > i + 1:\n            return fail\n        if i == 0:\n            if a[i] == 1:\n                b[i] = 0\n                s[0] = 1\n            continue\n        if a[i] > a[i - 1]:\n            b[i] = a[i - 1]\n            s[b[i]] = 1\n        if i == n - 1:\n            s[a[i]] = 1\n    s = [i for i in range(100001) if i not in s]\n    for i in range(n):\n        if b[i] is not None:\n            for j in range(i - 1, -1, -1):\n                if len(s) == 0 or b[j] is not None:\n                    break\n                b[j] = s.pop(0)\n    for i in range(n):\n        if b[i] is None:\n            b[i] = m\n    return b\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nprint(' '.join(map(str, solve(n, a))))", "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * n\nif a[0] == 0 or a[0] == 1:\n    maxi = -1\n    if a[0] == 1:\n        b[0] = 0\n        maxi = 0\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            b[i] = a[i - 1]\n    tofill = []\n    i = 0\n    while i < n:\n        if b[i] == -1:\n            tofill.append(i)\n        elif b[i] != -1 and len(tofill) != 0:\n            maxi = max(maxi, a[i - 1])\n            for j in range(len(tofill)):\n                if maxi != a[i] - 1:\n                    b[tofill[0]] = maxi + 1\n                    tofill.pop(0)\n                    maxi += 1\n                else:\n                    break\n            if maxi != a[i] - 1:\n                print(-1)\n                break\n        i += 1\n    if len(tofill) == 0 and b.count(-1) != 0:\n        pass\n    else:\n        maxi = a[-1]\n        for i in range(len(tofill)):\n            b[tofill[i]] = maxi + 1\n            maxi += 1\n        print(*b)\nelse:\n    print(-1)", "n = int(input())\na = list(map(int, input().split()))\nm = set(a)\nu = [i for i in range(n + 1) if i not in m]\nif a[0] not in [0, 1]:\n    print(-1)\n    exit()\nb = [u.pop(0)]\nfor i in range(1, n):\n    if a[i] != a[i - 1]:\n        b.append(a[i - 1])\n    else:\n        b.append(u.pop(0))\nprint(*b)", "from queue import Queue\n\ndef main():\n    test = 1\n    for _ in range(test):\n        n = int(input())\n        ara = [int(num) for num in input().split()]\n        mark = [True for _ in range(n + 1)]\n        for num in ara:\n            mark[num] = False\n        take_from = Queue()\n        for index in range(n + 1):\n            if mark[index]:\n                take_from.put(index)\n        ans = []\n        ans.append(take_from.get())\n        for index in range(1, n):\n            if ara[index] != ara[index - 1]:\n                ans.append(ara[index - 1])\n            elif not take_from.empty():\n                ans.append(take_from.get())\n            else:\n                ans.append(n + 1)\n        ans = ' '.join(map(str, ans))\n        print(ans)\nmain()", "def answer(n, A):\n    q = [0] * (n + 2)\n    for i in A:\n        q[i] = 1\n    l = [i for i in range(n + 2) if q[i] == 0]\n    b = []\n    for i in range(n - 1):\n        if A[i] != A[i + 1]:\n            b.append(l[0])\n            l[0] = A[i]\n        else:\n            b.append(l[0])\n            del l[0]\n    b.append(l.pop(0))\n    return b\nn = int(input())\nA = list(map(int, input().split()))\nprint(*answer(n, A))", "n = int(input())\na = list(map(int, input().split()))\nl = []\nr = []\ns1 = set(a)\ns2 = set([int(x) for x in range(n + 2)])\ns3 = s2.difference(s1)\nr = list(s3)\nr.sort()\nl.append(r[0])\nr.remove(r[0])\nfor i in range(1, n):\n    if a[i - 1] != a[i]:\n        l.append(a[i - 1])\n    else:\n        l.append(r[0])\n        r.remove(r[0])\nprint(*l)", "n = int(input())\na = list(map(int, input().split()))\nl = []\nr = []\ns1 = set(a)\ns2 = set([int(x) for x in range(n + 2)])\ns3 = s2.difference(s1)\nr = list(s3)\nr.sort()\nl.append(r[0])\nr.remove(r[0])\nfor i in range(1, n):\n    if a[i - 1] != a[i]:\n        l.append(a[i - 1])\n    else:\n        l.append(r[0])\n        r.remove(r[0])\nprint(*l)", "n = int(input())\nmt = list(map(int, input().split()))\nans = [-1] * n\ndup = set(mt)\nsec = set([int(x) for x in range(n + 1)])\nsec = sec.difference(dup)\nsec = list(sec)\nans[0] = sec[0]\nsec.remove(sec[0])\nfor i in range(1, n):\n    if mt[i - 1] != mt[i]:\n        ans[i] = mt[i - 1]\n    else:\n        ans[i] = sec[0]\n        sec.remove(sec[0])\nprint(*ans)"]