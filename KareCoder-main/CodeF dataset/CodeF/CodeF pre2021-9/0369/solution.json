["t = int(input())\nres = []\nfor _ in range(t):\n    (n, W) = input().split()\n    (n, W) = (int(n), int(W))\n    ll = [int(s) for s in input().split()]\n    flags = [True] * n\n    for (i, l) in enumerate(ll):\n        if l > W:\n            flags[i] = False\n        elif l * 2 >= W:\n            res.append(1)\n            res.append(i + 1)\n            break\n    else:\n        summa = 0\n        indexes = []\n        for (i, l) in enumerate(ll):\n            if flags[i]:\n                summa += l\n                indexes.append(i)\n                if summa * 2 >= W:\n                    break\n        if summa * 2 >= W:\n            res.append(len(indexes))\n            res.append(' '.join([str(i + 1) for i in indexes]))\n        else:\n            res.append(-1)\nfor e in res:\n    print(e)", "for _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    W_half = (W + 1) // 2\n    sol = []\n    sol_sum = 0\n    impossible = True\n    for (i, w) in enumerate([int(w) for w in input().split()]):\n        if w > W:\n            continue\n        if w >= W_half:\n            impossible = False\n            print(1)\n            print(i + 1)\n            break\n        sol_sum += w\n        sol.append(i + 1)\n        if sol_sum >= W_half:\n            impossible = False\n            print(len(sol))\n            print(' '.join([str(x) for x in sol]))\n            break\n    if impossible:\n        print(-1)", "from math import ceil\nT = int(input())\nfor t in range(T):\n    (n, W) = list(map(int, input().split()))\n    sum = 0\n    lowLim = ceil(W / 2)\n    found = False\n    ans = []\n    count = 0\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        if found:\n            break\n        inp = arr[i]\n        if inp < W + 1:\n            if inp >= lowLim and found == False:\n                print(1)\n                print(i + 1)\n                found = True\n                break\n            elif inp < lowLim and found == False:\n                ans.append(i + 1)\n                sum += inp\n                count += 1\n                if (sum >= lowLim and sum <= W) and found == 0:\n                    print(len(ans))\n                    print(' '.join(map(str, ans)))\n                    found = True\n                    break\n    if not found:\n        print(-1)", "tests = int(input())\nfor _ in range(tests):\n    (n, capacity) = map(int, input().split())\n    item_weights = list(map(int, input().split()))\n    knapsack = []\n    total_weight = 0\n    for (i, item_weight) in enumerate(item_weights):\n        if item_weight <= capacity and 2 * item_weight >= capacity:\n            knapsack = [i]\n            total_weight = item_weight\n            break\n        if total_weight + item_weight <= capacity:\n            knapsack.append(i)\n            total_weight += item_weight\n    if 2 * total_weight >= capacity:\n        print(len(knapsack))\n        print(' '.join([str(i + 1) for i in knapsack]))\n    else:\n        print(-1)", "inp = lambda : int(input())\ninpm = lambda : map(int, input().split())\ninpl = lambda : list(inpm())\nl2mn = lambda _n, _m: [[0 for __ in range(_m)] for _ in range(_n)]\nl2n = lambda _n: l2mn(_n, _n)\nINF = int(1e+18)\nMOD = int(1000000000.0) + 7\nN = 2000009\n\ndef solve():\n    (n, w) = inpm()\n    left = (w + 1) // 2\n    a = inpl()\n    res = []\n    s = 0\n    ok = False\n    for i in range(n):\n        x = a[i]\n        if x < left:\n            s += x\n            res.append(i + 1)\n            if s >= left:\n                ok = True\n                break\n        elif x > w:\n            continue\n        else:\n            res = [i + 1]\n            ok = True\n            break\n    if ok:\n        print(len(res))\n        print(*res)\n    else:\n        print(-1)\n\ndef main():\n    t = inp()\n    for i in range(t):\n        solve()\nmain()", "import sys\nimport math\n\ndef load_sys():\n    return sys.stdin.readlines()\n\ndef load_local():\n    with open('input.txt', 'r') as f:\n        input = f.readlines()\n    return input\n\ndef knapsack(N, W, arr):\n    arr = [(i, n) for (i, n) in enumerate(arr)]\n    arr.sort(key=lambda x: -x[1])\n    half = math.ceil(W / 2)\n    cur_w = 0\n    cur_idx = []\n    ans = False\n    for (i, n) in arr:\n        if cur_w + n <= W:\n            cur_w += n\n            cur_idx.append(i)\n        if cur_w >= half:\n            ans = True\n            break\n    if ans:\n        print(len(cur_idx))\n        print(' '.join([str(x + 1) for x in cur_idx]))\n    else:\n        print(-1)\ninput = load_sys()\nN = int(input[0])\ntest_cases = []\nfor i in range(len(input) // 2 + 1):\n    if 2 * i + 2 < len(input):\n        (N, W) = input[2 * i + 1].split()\n        (N, W) = (int(N), int(W))\n        arr = input[2 * i + 2].split()\n        arr = [int(x) for x in arr]\n        knapsack(N, W, arr)", "tests = int(input())\nfor _ in range(tests):\n    (n, capacity) = map(int, input().split())\n    item_weights = list(map(int, input().split()))\n    sorted_indices = sorted(range(n), key=lambda i: item_weights[i], reverse=True)\n    knapsack = []\n    total_weight = 0\n    for i in sorted_indices:\n        if total_weight + item_weights[i] <= capacity:\n            knapsack.append(i)\n            total_weight += item_weights[i]\n    if capacity <= 2 * total_weight:\n        print(len(knapsack))\n        print(' '.join([str(i + 1) for i in knapsack]))\n    else:\n        print(-1)", "tc = int(input())\nfor i in range(tc):\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    W_half = (W + 1) // 2\n    a = False\n    z = []\n    z_sum = 0\n    for (i, w) in enumerate(w):\n        if w > W:\n            continue\n        if w >= W_half:\n            print(1)\n            print(i + 1)\n            a = True\n            break\n        z_sum += w\n        z.append(i + 1)\n        if z_sum >= W_half:\n            print(len(z))\n            print(' '.join(map(str, z)))\n            a = True\n            break\n    if a == False:\n        print(-1)", "from math import ceil\nfor x in range(int(input())):\n    (n, w) = map(int, input().split())\n    weights = list(map(int, input().split()))\n    kek = ceil(w / 2)\n    ans = []\n    bag = 0\n    for i in range(n):\n        if weights[i] <= w:\n            if weights[i] >= kek:\n                ans = [i + 1]\n                bag = weights[i]\n                break\n            else:\n                ans.append(i + 1)\n                bag += weights[i]\n                if bag >= kek:\n                    break\n    if bag >= kek:\n        print(len(ans))\n        print(' '.join((str(i) for i in ans)))\n    else:\n        print(-1)", "import sys\n\ndef ceil(a, b):\n    return -(-a // b)\n\ndef answer(n, W, w):\n    tup_list = []\n    for i in range(n):\n        tup_list.append((i + 1, w[i]))\n    tup_list.sort(key=lambda tup: tup[1], reverse=True)\n    indx = 10 ** 10\n    for i in range(n):\n        if tup_list[i][1] > W:\n            continue\n        elif tup_list[i][1] >= ceil(W, 2):\n            print('1')\n            print(tup_list[i][0])\n            return\n        else:\n            indx = i\n            break\n    if indx == 10 ** 10:\n        print('-1')\n        return\n    summ = tup_list[indx][1]\n    addrs = [tup_list[indx][0]]\n    for i in range(indx + 1, n):\n        summ += tup_list[i][1]\n        addrs.append(tup_list[i][0])\n        if summ >= ceil(W, 2):\n            print(i - indx + 1)\n            print(' '.join(map(str, addrs)))\n            return\n    print('-1')\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        (n, W) = [int(i) for i in sys.stdin.readline().split()]\n        w = [int(i) for i in sys.stdin.readline().split()]\n        answer(n, W, w)\n        t -= 1\n    return\nmain()", "from math import ceil\nt = int(input())\nanswers = []\nfor _ in range(t):\n    nw = input().split()\n    w = input().split()\n    w_int = []\n    kisebb = []\n    minimum = ceil(int(nw[1]) / 2.0)\n    answer = []\n    for i in range(int(nw[0])):\n        w_int.append(int(w[i]))\n    stop = False\n    for j in range(int(nw[0])):\n        if w_int[j] < minimum:\n            kisebb.append(w_int[j])\n        elif w_int[j] >= minimum and w_int[j] <= int(nw[1]):\n            answer.append(1)\n            answer.append([str(j + 1)])\n            stop = True\n            break\n    if stop:\n        answers.append(answer)\n        continue\n    if sum(kisebb) < minimum:\n        answers.append(-1)\n        continue\n    osszeg = 0\n    items = []\n    for k in range(int(nw[0])):\n        if w_int[k] < minimum:\n            osszeg += w_int[k]\n            items.append(str(k + 1))\n        if osszeg >= minimum:\n            break\n    answer.append(len(items))\n    answer.append(items)\n    answers.append(answer)\nfor l in range(t):\n    if answers[l] == -1:\n        print(answers[l])\n    else:\n        print(answers[l][0])\n        print(' '.join(answers[l][1]))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, W) = map(int, input().split())\n    ws = list(map(int, input().split()))\n    C = math.ceil(W / 2)\n    i = 0\n    resultado = ''\n    total = 0\n    soma = 0\n    valid = 1\n    while i < n:\n        if W >= ws[i] >= C:\n            resultado = i + 1\n            total = 1\n            print(total)\n            print(resultado)\n            valid = 0\n            break\n        elif ws[i] < W:\n            soma += ws[i]\n            resultado += str(i + 1) + ' '\n            total += 1\n            if W >= soma >= C:\n                print(total)\n                print(resultado)\n                valid = 0\n                break\n        i += 1\n    if valid:\n        print(-1)", "T = int(input())\nfor _ in range(T):\n    (n, W) = map(int, input().split())\n    x = list(map(int, input().split()))\n    s = sum(x)\n    x = [(x[i], i + 1) for i in range(len(x))]\n    x.sort()\n    if x[0][0] > W or s < (W + 1) // 2:\n        print(-1)\n        continue\n    cur_sum = 0\n    rbound = len(x) - 1\n    while rbound >= 0 and x[rbound][0] > W:\n        s -= x[rbound][0]\n        rbound -= 1\n    if s < (W + 1) // 2:\n        print(-1)\n        continue\n    lbound = 0\n    while lbound < len(x) and s > W:\n        s -= x[lbound][0]\n        lbound += 1\n    print(rbound - lbound + 1)\n    print(' '.join(map(str, [x[k][1] for k in range(lbound, rbound + 1)])))", "import math\nt = int(input())\nfor zz in range(t):\n    (n, capacity) = map(int, input().split())\n    weights = list(map(int, input().split()))\n    sol = []\n    w = 0\n    found = 0\n    for i in range(n):\n        if weights[i] <= capacity:\n            if weights[i] >= math.ceil(capacity / 2):\n                print(1)\n                print(i + 1)\n                found = 1\n                break\n            else:\n                w += weights[i]\n                sol.append(i + 1)\n                if w >= math.ceil(capacity / 2):\n                    print(len(sol))\n                    print(' '.join(map(str, sol)))\n                    found = 1\n                    break\n    if found == 0:\n        print(-1)", "for _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    l = []\n    var = 0\n    cnt = 0\n    ans = []\n    for j in range(0, n):\n        cnt += w[j]\n        if cnt <= W:\n            ans.append(j + 1)\n        elif W >= w[j] >= (W + 1) // 2:\n            var = 1\n            print(1)\n            print(j + 1)\n            break\n        else:\n            cnt -= w[j]\n    if var == 0:\n        if cnt >= (W + 1) // 2 and len(ans) != 0:\n            print(len(ans))\n            print(*ans)\n        else:\n            print(-1)", "from math import ceil\n\ndef code1():\n    x = 0\n    for i in boom:\n        if i <= w:\n            x += i\n    return x\n\ndef code2():\n    print(-1)\n\ndef code4(ans):\n    print(1)\n    print(ans)\n\ndef code5():\n    print(len(num))\n    print(*num)\n\ndef code3():\n    ans = 0\n    for i in range(n):\n        if value <= boom[i] <= w:\n            return code4(i + 1)\n        if ans + boom[i] < w:\n            ans += boom[i]\n            num.append(i + 1)\n        if value <= ans <= w:\n            break\n    code5()\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    boom = list(map(int, input().split()))\n    value = ceil(w / 2)\n    summation = code1()\n    mi = min(boom)\n    if mi > w or summation < value:\n        code2()\n    else:\n        num = []\n        code3()", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    val = math.ceil(m / 2)\n    if sum(l) < val or min(l) > m:\n        print(-1)\n    else:\n        (f, s, ans) = (False, 0, [])\n        for i in range(n):\n            if val <= l[i] <= m:\n                ans = [i + 1]\n                f = True\n                break\n            elif l[i] < val:\n                s += l[i]\n                ans.append(i + 1)\n                if s >= val:\n                    f = True\n                    break\n        if f:\n            print(len(ans))\n            print(*ans)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    W_half = (W + 1) // 2\n    sol = []\n    sol_sum = 0\n    impossible = True\n    for (i, w) in enumerate([int(w) for w in input().split()]):\n        if w > W:\n            continue\n        if w >= W_half:\n            impossible = False\n            print(1)\n            print(i + 1)\n            break\n        sol_sum += w\n        sol.append(i + 1)\n        if sol_sum >= W_half:\n            impossible = False\n            print(len(sol))\n            print(' '.join([str(x) for x in sol]))\n            break\n    if impossible:\n        print(-1)", "import math\nt = int(input())\n\ndef solve(n, w, items):\n    w_half = math.ceil(w / 2)\n    items = list(zip(items, [i for i in range(1, n + 1)]))\n    items.sort()\n    s = 0\n    j = -1\n    while items and items[-1][0] > w:\n        items.pop()\n    if items:\n        if items[-1][0] >= w_half:\n            print(1)\n            print(items[-1][1])\n            return\n        for i in items:\n            s += i[0]\n            j += 1\n            if s >= w_half:\n                break\n        if s > w or s < w_half:\n            print(-1)\n        else:\n            print(j + 1)\n            print(' '.join([str(x[1]) for x in items[:j + 1]]))\n    else:\n        print(-1)\nfor _ in range(t):\n    (n, w) = list(map(int, input().split()))\n    items = list(map(int, input().split()))\n    solve(n, w, items)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    val = math.ceil(m / 2)\n    (f, s, ans) = (False, 0, [])\n    for i in range(n):\n        if val <= l[i] <= m:\n            ans = [i + 1]\n            f = True\n            break\n        elif l[i] < val:\n            s += l[i]\n            ans.append(i + 1)\n            if s >= val:\n                f = True\n                break\n    if f:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)", "class Weight:\n\n    def __init__(self, w, i):\n        self.weight = w\n        self.index = i\n\n    def __lt__(self, other):\n        return self.weight < other.weight\n\ndef solve():\n    (n, total) = (int(x) for x in input().strip().split())\n    arr = list(map(lambda x: Weight(x[0], x[1]), zip([int(x) for x in input().strip().split()], range(1, 1 + n))))\n    lim = total // 2\n    if total & 1:\n        lim += 1\n    arr_gt_eq_lim = list(filter(lambda t: t.weight >= lim and t.weight <= total, arr))\n    arr_lt_lim = list(filter(lambda t: t.weight < lim, arr))\n    if len(arr_gt_eq_lim) > 0:\n        print(1)\n        print(arr_gt_eq_lim[0].index)\n        return\n    (index, s) = (0, 0)\n    while index < len(arr_lt_lim):\n        s += arr_lt_lim[index].weight\n        if s >= lim:\n            break\n        index += 1\n    if index == len(arr_lt_lim):\n        print(-1)\n    else:\n        print(1 + index)\n        print(' '.join(map(str, map(lambda t: t.index, arr_lt_lim[:1 + index]))))\nfor _ in range(int(input().strip())):\n    solve()", "for _ in range(int(input())):\n    (n, w) = list(map(int, input().split()))\n    wts = list(map(int, input().split()))\n    ans = []\n    cnt = 0\n    fnd = False\n    ar = False\n    for (j, i) in enumerate(wts):\n        if i > w:\n            continue\n        if i >= (w + 1) // 2:\n            print(1)\n            print(j + 1)\n            ar = True\n            break\n        cnt += i\n        ans.append(str(j + 1))\n        if cnt >= (w + 1) // 2:\n            fnd = True\n            break\n    if not ar:\n        if not fnd:\n            print(-1)\n        else:\n            print(len(ans))\n            print(' '.join(ans))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    values = list(map(int, input().split()))\n    lookup = list(zip(values, range(1, len(values) + 1)))\n    l = list(sorted(lookup, key=lambda x: x[0], reverse=True))\n    th = ceil(m / 2)\n    total = 0\n    filled = False\n    ans = []\n    for (k, v) in l:\n        if total + k > m:\n            continue\n        else:\n            total += k\n            ans.append(v)\n            if total >= th:\n                filled = True\n                break\n    if filled:\n        print(str(len(ans)) + '\\n' + ' '.join(list(map(str, ans))))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, W) = [int(j) for j in input().split()]\n    w = [int(j) for j in input().split()]\n    (t, k) = (0, 0)\n    lt = []\n    for i in range(n):\n        t = t + w[i]\n        if t <= W:\n            lt.append(i + 1)\n        elif W >= w[i] >= (W + 1) // 2:\n            k = 1\n            print(1)\n            print(i + 1)\n            break\n        else:\n            t = t - w[i]\n    if k == 0:\n        if t >= (W + 1) // 2 and len(lt) != 0:\n            print(len(lt))\n            print(*lt)\n        else:\n            print(-1)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, w) = [int(u) for u in input().split(' ')]\n        z = math.ceil(w / 2)\n        a = [int(i) for i in input().split(' ')]\n        a = [[a[i], i + 1] for i in range(len(a))]\n        a.sort(key=lambda x: x[0])\n        a.reverse()\n        c = 0\n        collector = []\n        for i in range(len(a)):\n            if a[i][0] <= w:\n                collector.append(a[i][1])\n                w -= a[i][0]\n                c += a[i][0]\n        if z <= c:\n            print(len(collector))\n            print(' '.join([str(y) for y in collector]))\n        else:\n            print(-1)\nmain_function()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, w) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    ans = []\n    smalltotal = 0\n    foundmid = False\n    midindex = 0\n    mid = w / 2\n    for i in range(n):\n        if arr[i] < mid:\n            if arr[i] + smalltotal <= w:\n                ans.append(i)\n                smalltotal += arr[i]\n        elif arr[i] <= w:\n            foundmid = True\n            midindex = i\n            break\n    if foundmid == True:\n        print(1)\n        print(midindex + 1)\n    elif smalltotal >= mid:\n        print(len(ans))\n        for elements in ans:\n            print(elements + 1, end=' ')\n        print('')\n    else:\n        print(-1)", "casos = int(input())\nfor x in range(casos):\n    (n, w) = list(map(int, input().split()))\n    band = 0\n    numeros = list(map(int, input().split()))\n    q = 0\n    s = 0\n    dentro = []\n    for d in range(n):\n        if numeros[d] <= w:\n            if s + numeros[d] > w and numeros[d] * 2 < w:\n                continue\n            else:\n                if numeros[d] * 2 >= w:\n                    q = d + 1\n                    band = 1\n                    break\n                dentro.append(d + 1)\n                s = s + numeros[d]\n    if band == 0:\n        if len(dentro) != 0 and s * 2 >= w and (s <= w):\n            print(len(dentro))\n            saida = ''\n            for y in dentro:\n                saida += str(y) + ' '\n            print(saida)\n        else:\n            print('-1')\n        continue\n    else:\n        print('1')\n        print(q)\n        continue", "t = int(input())\nfor p in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    h = (w + 1) // 2\n    s = 0\n    b = []\n    for i in range(n):\n        if h <= a[i] <= w:\n            print(1)\n            print(i + 1)\n            break\n        elif a[i] < h:\n            s += a[i]\n            b.append(i + 1)\n            if s >= h:\n                print(len(b))\n                print(*b)\n                break\n    else:\n        print(-1)", "from math import ceil\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = ceil(w / 2)\n    su = 0\n    for i in l:\n        if i <= w:\n            su += i\n    if min(l) > w or su < x:\n        print(-1)\n    else:\n        (ans, f) = (0, 0)\n        num = []\n        for i in range(n):\n            if x <= l[i] <= w:\n                f = 1\n                ans = i + 1\n                break\n            if ans + l[i] < w:\n                ans += l[i]\n                num.append(i + 1)\n            if x <= ans <= w:\n                break\n        if f:\n            print(1)\n            print(ans)\n        else:\n            print(len(num))\n            print(*num)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (ans, s, found) = ([], 0, False)\n    c = (w + 1) // 2\n    for i in range(n):\n        x = a[i]\n        if s + x <= w:\n            ans.append(i + 1)\n            s += x\n        if x <= w and x >= c:\n            print(1)\n            print(i + 1)\n            found = True\n            break\n    if not found and s < c:\n        print(-1)\n    elif not found:\n        print(len(ans))\n        for x in ans:\n            print(x, end=' ')\n        print()", "from math import ceil\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    wi = list(map(int, input().split()))\n    h = ceil(w / 2)\n    if sum(wi) < h or min(wi) > w:\n        print(-1)\n    else:\n        ans = []\n        k = 0\n        flag = 0\n        for i in range(n):\n            if h <= wi[i] <= w:\n                ans = []\n                ans.append(i + 1)\n                flag = 1\n                break\n            elif wi[i] < h:\n                k += wi[i]\n                ans.append(i + 1)\n                if k >= h:\n                    flag = 1\n                    break\n        if flag == 1:\n            print(len(ans))\n            print(*ans)\n        else:\n            print(-1)", "t = int(input())\nfor p in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    h = (w + 1) // 2\n    s = 0\n    b = []\n    for i in range(n):\n        if h <= a[i] <= w:\n            print(1)\n            print(i + 1)\n            break\n        elif a[i] < h:\n            s += a[i]\n            b.append(i + 1)\n            if s >= h:\n                print(len(b))\n                print(*b)\n                break\n    else:\n        print(-1)", "def solve(n, w, arr):\n    arr = list(enumerate(arr))\n    arr.sort(key=lambda x: x[1])\n    left = (w + 1) // 2\n    ans = []\n    for i in range(n - 1, -1, -1):\n        if arr[i][1] > w:\n            continue\n        if left <= arr[i][1] and arr[i][1] <= w:\n            sum_ = 0\n            for j in range(i, n):\n                if sum_ + arr[j][1] > w:\n                    break\n                ans.append(str(arr[j][0] + 1))\n                sum_ += arr[j][1]\n            print(len(ans))\n            print(' '.join(ans))\n            return\n        left -= arr[i][1]\n    print(-1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, w) = [int(word) for word in input().rstrip().split()]\n        ws = [int(word) for word in input().rstrip().split()]\n        solve(n, w, ws)\nmain()", "from math import ceil\nt = int(input())\nanswers = []\nfor _ in range(t):\n    (n, W) = map(int, input().split())\n    minW = ceil(W / 2.0)\n    w = [(val, ind + 1) for (ind, val) in enumerate(list(map(int, input().split()))) if val <= W]\n    w.sort(key=lambda x: x[0], reverse=True)\n    summ = 0\n    for wi in w:\n        summ += wi[0]\n    if summ < minW:\n        answers.append([-1])\n    else:\n        summ = 0\n        answer = []\n        for wi in w:\n            if summ + wi[0] <= W:\n                answer.append(wi[1])\n                summ += wi[0]\n            if summ >= minW:\n                answers.append(answer)\n                break\nfor answer in answers:\n    if answer[0] == -1:\n        print(-1)\n    else:\n        print(len(answer))\n        print(' '.join(map(str, answer)))", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, W) = mints()\n    b = list(mints())\n    a = [0] * n\n    for i in range(len(a)):\n        a[i] = (b[i], i + 1)\n    a.sort(reverse=True)\n    ans = []\n    s = 0\n    wh = (W + 1) // 2\n    for i in range(len(a)):\n        if s + a[i][0] <= W:\n            s += a[i][0]\n            ans.append(a[i][1])\n        if s >= wh:\n            print(len(ans))\n            print(' '.join(map(str, ans)))\n            return\n    print(-1)\nfor i in range(mint()):\n    solve()", "def solve():\n    (n, W) = map(int, input().split())\n    w = [*map(int, input().split())]\n    ans = []\n    s = 0\n    for i in range(n):\n        if w[i] >= (W + 1) // 2 and w[i] <= W:\n            print(1)\n            print(i + 1)\n            return\n    for i in range(n):\n        if w[i] > W:\n            continue\n        s += w[i]\n        ans.append(i + 1)\n        if s >= (W + 1) // 2 and s <= W:\n            print(len(ans))\n            print(*ans)\n            return\n    print(-1)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = [(el, i) for (i, el) in enumerate(arr) if el <= w]\n    p.sort(reverse=True)\n    temp = 0\n    goal = (w + 1) // 2\n    res = []\n    for (el, j) in p:\n        temp += el\n        res.append(j + 1)\n        if temp >= goal:\n            break\n    if temp >= goal:\n        res.sort()\n        print(len(res))\n        print(*res)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (ans, s, found) = ([], 0, False)\n    c = (w + 1) // 2\n    for i in range(n):\n        x = a[i]\n        if s + x <= w:\n            ans.append(i + 1)\n            s += x\n        if x <= w and x >= c:\n            print(1)\n            print(i + 1)\n            found = True\n            break\n    if not found and s < c:\n        print(-1)\n    elif not found:\n        print(len(ans))\n        for x in ans:\n            print(x, end=' ')\n        print()", "import math\nt = int(input())\nfor i in range(t):\n    (n, W) = map(int, input().split())\n    num = list(map(int, input().split()))\n    P = math.ceil(W / 2)\n    index = 0\n    answer = ''\n    C = 0\n    S = 0\n    valid = 1\n    V = 1\n    while index < n and V:\n        if num[index] <= W and num[index] >= P:\n            answer = index + 1\n            C = 1\n            print(C)\n            print(answer)\n            valid = 0\n            V = 0\n        elif num[index] < W:\n            S += num[index]\n            answer += str(index + 1) + ' '\n            C += 1\n            if S <= W and S >= P:\n                print(C)\n                print(answer)\n                valid = 0\n                V = 0\n        index += 1\n    if valid:\n        print(-1)", "import math as mt\nt = int(input())\nfor i in range(0, t):\n    (m, n) = map(int, input().split())\n    arr = list(map(int, input().strip().split()))[:m]\n    arr1 = []\n    x = mt.ceil(n / 2)\n    summ = 0\n    arr2 = []\n    ct = 0\n    for j in range(0, m):\n        if arr[j] <= n:\n            if summ + arr[j] > n or arr[j] >= x:\n                ct += 1\n                arr2.append(j + 1)\n                break\n            else:\n                summ = summ + arr[j]\n                arr1.append(j + 1)\n                if summ >= x:\n                    break\n    if summ < x and ct == 0:\n        print(-1)\n    elif ct == 1:\n        print(1)\n        print(*arr2, sep=' ')\n    elif ct == 0:\n        xx = len(arr1)\n        print(xx)\n        print(*arr1, sep=' ')", "def run():\n    t = int(input())\n    for _ in range(t):\n        (n, W) = tuple(map(int, input().split()))\n        weights0 = list(map(int, input().split()))\n        weights = []\n        for (idx, w) in enumerate(weights0):\n            weights.append([w, idx + 1])\n        weights.sort()\n        target_weight = W // 2 + 1 if W % 2 != 0 else W // 2\n        knap = []\n        sum_knap = 0\n        while target_weight > sum_knap or sum_knap > W:\n            if weights:\n                (w, idx) = weights.pop()\n                if sum_knap + w > W:\n                    continue\n                sum_knap += w\n                knap.append(idx)\n            else:\n                break\n        if not knap:\n            print(-1)\n        elif sum_knap >= target_weight:\n            print(len(knap))\n            print(' '.join(map(str, knap)))\n        else:\n            print(-1)\nrun()", "def main():\n    (n, W) = map(int, input().split())\n    weights = list(map(int, input().split()))\n    pack = []\n    summ = 0\n    if W % 2 == 1:\n        half = W // 2 + 1\n    else:\n        half = W // 2\n    for i in range(n):\n        if half <= weights[i] <= W:\n            print(1)\n            print(i + 1)\n            return\n        if weights[i] > W:\n            weights[i] = 0\n    for i in range(n):\n        if summ >= half:\n            break\n        if weights[i] != 0:\n            pack.append(i + 1)\n            summ += weights[i]\n    if summ >= half:\n        print(len(pack))\n        pack.sort()\n        print(*pack)\n    else:\n        print('-1')\n    return\nt = int(input())\nfor _ in range(t):\n    main()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (y, x) = map(int, input().split())\n    (*li,) = map(int, input().split())\n    ans = x\n    li1 = []\n    for i in range(y):\n        if (x + 1) // 2 <= li[i] <= x:\n            print(1)\n            print(i + 1)\n            break\n        if li[i] <= ans:\n            li1 += [i + 1]\n            ans -= li[i]\n        if ans <= x // 2:\n            print(len(li1))\n            print(*li1)\n            break\n    else:\n        print(-1)", "def solve():\n    (n, w) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > w:\n            continue\n        if 2 * a[i] >= w:\n            print(f'1\\n{i + 1}')\n            return\n    s = 0\n    ans = []\n    for i in range(n):\n        if a[i] > w:\n            continue\n        s += a[i]\n        ans.append(i + 1)\n        if 2 * s >= w:\n            break\n    if 2 * s >= w:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)\nt = int(input())\nfor test in range(t):\n    solve()", "from math import *\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = [(int(x), i) for (i, x) in enumerate(input().split())]\n    a.sort()\n    sack = []\n    weight = 0\n    c = w // 2 + w % 2\n    for (v, i) in reversed(a):\n        if v + weight <= w:\n            weight += v\n            sack.append(i + 1)\n        if weight > c:\n            break\n    if c <= weight:\n        print(len(sack))\n        print(*sack)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    w = [int(x) for x in input().split()]\n    dic = {}\n    for i in range(n):\n        dic[i] = w[i]\n    keys = sorted(dic, key=lambda x: dic[x])\n    if dic[keys[0]] > W or sum(w) < W / 2:\n        print(-1)\n        continue\n    else:\n        res = []\n        c = 0\n        for key in keys[::-1]:\n            if c + dic[key] <= W:\n                res.append(key + 1)\n                c += dic[key]\n        if W / 2 <= c <= W:\n            print(len(res))\n            print(*res)\n        else:\n            print(-1)", "n = int(input())\nfor i in range(n):\n    (items, totalweight) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    final = []\n    arr = [(num, index) for (index, num) in enumerate(arr)]\n    arr.sort(reverse=True)\n    total = 0\n    for (num, index) in arr:\n        if num > totalweight:\n            continue\n        total += num\n        if total > totalweight:\n            break\n        final.append(str(index + 1))\n    if not final or total < totalweight / 2:\n        print(-1)\n    else:\n        print(len(final))\n        print(' '.join(final))", "import math\n\ndef knapsack(arr, n, W):\n    C = W\n    half = math.ceil(C / 2)\n    temp = 0\n    ind = []\n    for j in range(n):\n        if arr[j] >= half and arr[j] <= C:\n            ind = [j + 1]\n            temp = arr[j]\n            break\n        else:\n            temp += arr[j]\n            if temp > C:\n                temp -= arr[j]\n            else:\n                ind.append(j + 1)\n                if temp >= half:\n                    break\n    if temp >= half:\n        print(len(ind))\n        print(*ind)\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    knapsack(arr, n, W)", "t = int(input())\nfor i in range(0, t):\n    (n, w_2) = map(int, input().split())\n    N = list(map(int, input().split()))\n    w_1 = w_2 // 2 + w_2 % 2\n    z = []\n    go = True\n    for j in range(0, n):\n        if N[j] < w_1:\n            z.append([N[j], j + 1])\n        elif N[j] >= w_1 and N[j] <= w_2:\n            print(1)\n            print(j + 1)\n            go = False\n            break\n    if go:\n        s = 0\n        k = 0\n        l = ''\n        for j in range(0, len(z)):\n            s += z[j][0]\n            k += 1\n            l += str(z[j][1]) + ' '\n            if s >= w_1:\n                print(k)\n                print(l)\n                break\n        else:\n            print(-1)", "import math\nfor i in range(int(input())):\n    (n, w) = map(int, input().split())\n    d = list(map(int, input().split()))\n    index = []\n    bagw = 0\n    for i in range(n):\n        if d[i] <= w and d[i] >= math.ceil(w / 2):\n            index = [i + 1]\n            bagw = d[i]\n            break\n        elif bagw + d[i] <= w:\n            index.append(i + 1)\n            bagw += d[i]\n    if bagw >= math.ceil(w / 2):\n        print(len(index))\n        print(*index)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    (N, W) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    limit = 0\n    if W % 2 == 1:\n        limit = (W + 1) // 2\n    else:\n        limit = W // 2\n    B = []\n    Hai = False\n    for i in range(N):\n        if A[i] >= limit and A[i] <= W:\n            Hai = True\n            B += [i + 1]\n            break\n    if Hai:\n        print(1)\n        print(B[0])\n    else:\n        sum = 0\n        ho = False\n        for i in range(N):\n            if sum + A[i] < limit:\n                sum += A[i]\n                B += [i + 1]\n            elif sum + A[i] >= limit and sum + A[i] <= W:\n                sum += A[i]\n                B += [i + 1]\n                ho = True\n                break\n        if ho:\n            print(len(B))\n            for i in range(len(B)):\n                print(B[i], end=' ')\n            print()\n        else:\n            print(-1)", "import sys\nt = int(input())\nfor num in range(t):\n    (n, W) = map(int, sys.stdin.readline().split())\n    items = list(map(int, sys.stdin.readline().split()))\n    dic = {}\n    for num in range(n):\n        if items[num] not in dic:\n            dic[items[num]] = [str(num + 1)]\n        else:\n            dic[items[num]].append(str(num + 1))\n    items.sort(reverse=True)\n    current = 0\n    answer = []\n    for item in items:\n        if item <= W:\n            current += item\n            answer.append(dic[item].pop())\n            if current >= W / 2:\n                break\n    if current < W / 2:\n        print(-1)\n    else:\n        print(len(answer))\n        print(' '.join(answer))", "import math\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = 0\n    s = 0\n    t = []\n    for i in range(n):\n        if l[i] >= math.ceil(w / 2) and l[i] <= w:\n            t = [i + 1]\n            s = l[i]\n            break\n        else:\n            s += l[i]\n            if s > w:\n                s -= l[i]\n            else:\n                t.append(i + 1)\n                if s >= math.ceil(w / 2):\n                    break\n    if s >= math.ceil(w / 2):\n        print(len(t))\n        print(*t)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    a = []\n    s = 0\n    for i in range(n):\n        if w[i] <= W and w[i] >= math.ceil(W / 2):\n            a = [i + 1]\n            s = w[i]\n            break\n        else:\n            s += w[i]\n            if s > W:\n                s -= w[i]\n            else:\n                a.append(i + 1)\n                if s >= math.ceil(W / 2):\n                    break\n    if s >= math.ceil(W / 2):\n        print(len(a))\n        print(*a)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = (m + 1) // 2\n    sm = 0\n    cnt = 0\n    v = []\n    for i in range(n):\n        if a[i] >= w and a[i] <= m:\n            print(1)\n            print(i + 1)\n            break\n        elif a[i] < w:\n            v.append(i + 1)\n            sm += a[i]\n            cnt += 1\n        if sm >= w and sm <= m:\n            print(cnt)\n            for j in v:\n                print(j, end=' ')\n            break\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = 0\n    for i in range(n):\n        if math.ceil(w / 2) <= l[i] <= w:\n            print(1)\n            print(i + 1)\n            f = 1\n            break\n    if f == 0:\n        ans = []\n        c = 0\n        for i in range(n):\n            if l[i] < w and c <= w and (c + l[i] <= w):\n                c += l[i]\n                ans.append(i + 1)\n        if c < math.ceil(w / 2):\n            print(-1)\n        else:\n            print(len(ans))\n            print(*ans)", "for _ in range(int(input())):\n    (n, w) = tuple(map(int, input().split()))\n    arr = sorted(list(enumerate(map(int, input().split()))), key=lambda x: x[1])\n    need = (w - 1) // 2 + 1\n    while len(arr) > 0 and arr[-1][1] > w:\n        arr.pop()\n    if len(arr) == 0:\n        print(-1)\n        continue\n    ans = []\n    get = 0\n    while get < need and len(arr) > 0:\n        (index, now) = arr.pop()\n        get += now\n        ans.append(index)\n    if get < need:\n        print(-1)\n    else:\n        print(len(ans))\n        print(*[i + 1 for i in sorted(ans)])", "def first(a):\n    return a[0]\nfor i in range(int(input())):\n    (n, w) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    lstup = [(ls[i], i + 1) for i in range(n)]\n    lstup.sort(key=first, reverse=1)\n    kq = []\n    tong = 0\n    for item in lstup:\n        if item[0] > w:\n            continue\n        tong += item[0]\n        kq.append(item[1])\n        if tong >= (w + 1) // 2:\n            break\n    if len(kq) == 0 or tong < (w + 1) // 2:\n        print(-1)\n    else:\n        print(len(kq))\n        print(*kq)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (y, x) = map(int, input().split())\n    (*li,) = map(int, input().split())\n    ans = x\n    li1 = []\n    for i in range(y):\n        if (x + 1) // 2 <= li[i] <= x:\n            print(1)\n            print(i + 1)\n            break\n        if li[i] <= ans:\n            li1 += [i + 1]\n            ans -= li[i]\n        if ans <= x // 2:\n            print(len(li1))\n            print(*li1)\n            break\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, W) = [int(x) for x in input().split()]\n    k = W\n    w = sorted(enumerate([int(x) for x in input().split()]), key=lambda x: x[1])\n    ans = []\n    for i in range(n - 1, -1, -1):\n        if W >= w[i][1]:\n            ans.append(w[i][0] + 1)\n            W -= w[i][1]\n    if W <= k / 2:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)", "from math import *\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    a = [(int(x), i) for (i, x) in enumerate(input().split())]\n    a.sort()\n    sack = []\n    weight = 0\n    c = w // 2 + w % 2\n    for (v, i) in reversed(a):\n        if v + weight <= w:\n            weight += v\n            sack.append(i + 1)\n    if c <= weight:\n        print(len(sack))\n        print(*sack)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor T in range(t):\n    (n, w) = map(int, input().split())\n    ws = map(int, input().split())\n    goal = math.ceil(w / 2)\n    wws = list(zip(ws, range(n)))\n    wws.sort(reverse=True, key=lambda t: t[0])\n    used = []\n    sum = 0\n    for W in wws:\n        if W[0] <= w:\n            sum += W[0]\n            used.append(W[1] + 1)\n            if sum >= goal:\n                break\n    if len(used) > 0 and goal <= sum:\n        print(len(used))\n        print(*used)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    ans = 0\n    flag = False\n    arr = []\n    for i in range(n):\n        if 2 * w[i] >= W and w[i] <= W:\n            arr = [i + 1]\n            flag = True\n            break\n        elif w[i] > W:\n            continue\n        elif 2 * w[i] < W and 2 * (ans + w[i]) < W:\n            arr.append(i + 1)\n            ans += w[i]\n        elif 2 * w[i] < W and 2 * (ans + w[i]) >= W:\n            arr.append(i + 1)\n            ans += w[i]\n            flag = True\n            break\n        else:\n            break\n    if flag:\n        print(len(arr))\n        print(*arr)\n    else:\n        print(-1)\n    t -= 1", "import math\n\ndef solve():\n    (n, W) = map(int, input().split())\n    items = list(map(int, input().split()))\n    a = [(items[i], i) for i in range(len(items))]\n    a.sort(reverse=True)\n    C = 0\n    ans = []\n    for (i, ind) in a:\n        if C + i <= W:\n            C += i\n            ans.append(ind + 1)\n        if math.ceil(W / 2) <= C <= W:\n            return ans\n    return -1\nfor _ in range(int(input())):\n    ans = solve()\n    if type(ans) is list:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(ans)", "import math\nfrom collections import *\nfrom functools import lru_cache\nimport bisect\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ipl():\n    return list(map(int, input().split()))\n\ndef ipn():\n    return int(input())\n\ndef ipf():\n    return float(input())\n\ndef solve():\n    (n, w) = ipl()\n    a = ipl()\n    s = 0\n    l = []\n    for (j, i) in enumerate(a):\n        if i > w:\n            continue\n        if math.ceil(w / 2) <= i <= w:\n            print(1)\n            print(j + 1)\n            return\n        s += i\n        l.append(j + 1)\n        if math.ceil(w / 2) <= s <= w:\n            print(len(l))\n            for i in l:\n                print(i, end=' ')\n            print()\n            return\n    print(-1)\nfor _ in range(int(input())):\n    solve()", "import math\nx = int(input())\nfor i in range(0, x):\n    (n, m) = [int(a) for a in input().split()]\n    ar = list(map(int, input().split()))[:n]\n    b = []\n    s = 0\n    t = 0\n    for j in range(n):\n        if ar[j] <= m and ar[j] >= math.ceil(m / 2):\n            b = [j + 1]\n            s = ar[j]\n            break\n        else:\n            s = s + ar[j]\n            if s > m:\n                s = s - ar[j]\n            else:\n                b.append(j + 1)\n                if s >= math.ceil(m / 2):\n                    break\n    if s >= math.ceil(m / 2):\n        print(len(b))\n        print(*b)\n    else:\n        print(-1)", "for t in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    x = []\n    for i in range(len(l)):\n        x.append((l[i], i + 1))\n    x.sort(key=lambda x: x[0], reverse=True)\n    ans = []\n    for i in range(n):\n        if c + x[i][0] <= w:\n            c += x[i][0]\n            ans.append(x[i][1])\n    if c < (w + 1) // 2:\n        print('-1')\n    else:\n        print(len(ans))\n        print(*ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k = ceil(w / 2)\n    ans = []\n    if min(arr) > w or sum(arr) < k:\n        print(-1)\n    else:\n        summ = 0\n        for i in range(n):\n            if summ + arr[i] <= w:\n                ans.append(i + 1)\n                summ += arr[i]\n        if summ < k:\n            flag = False\n            for i in range(n):\n                if k <= arr[i] <= w:\n                    print(1)\n                    flag = True\n                    print(i + 1)\n                    break\n            if flag == False:\n                print(-1)\n        else:\n            print(len(ans))\n            print(*ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = []\n    s = 0\n    for j in range(n):\n        if a[j] <= m and a[j] >= math.ceil(m / 2):\n            s = a[j]\n            ans = [j + 1]\n            break\n        else:\n            s = s + a[j]\n            if s > m:\n                s = s - a[j]\n            else:\n                ans.append(j + 1)\n                if s >= math.ceil(m / 2):\n                    break\n    if s >= math.ceil(m / 2):\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)", "testCase = int(input())\nfor i in range(testCase):\n    (n, w) = map(int, input().split())\n    weights = list(map(int, input().split()))\n    total = 0\n    items = 0\n    ans = []\n    for c in range(len(weights)):\n        if weights[c] >= w / 2 and weights[c] <= w:\n            ans = [c + 1]\n            total = weights[c]\n            items = 1\n            break\n        elif weights[c] + total <= w:\n            total += weights[c]\n            items += 1\n            ans.append(c + 1)\n        if total >= w / 2:\n            break\n    if total < w / 2:\n        print(-1)\n    else:\n        print(items)\n        for c in range(items):\n            if c == items - 1:\n                print(ans[c])\n            else:\n                print(ans[c], end=' ')", "def knapsack(n, w, weights):\n    flag2 = 0\n    weights = sorted(weights.items(), key=lambda x: x[1], reverse=True)\n    if weights[len(weights) - 1][1] > w:\n        print(-1)\n        return\n    listOfItems = list()\n    sumOfItems = 0\n    for (index, value) in weights:\n        if value > w:\n            continue\n        sumOfItems += value\n        listOfItems.append(index)\n        if sumOfItems >= w / 2:\n            flag2 = 1\n            break\n    if flag2:\n        print(len(listOfItems))\n        print(*listOfItems)\n    else:\n        print(-1)\ntestcases = int(input())\nwhile testcases:\n    testcases -= 1\n    (n, w) = tuple(map(int, input().split()))\n    weights = {index + 1: int(value) for (index, value) in enumerate(input().split())}\n    knapsack(n, w, weights)", "t = int(input())\nfor i in range(t):\n    (n, w) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = [[a[j], j] for j in range(n)]\n    a.sort()\n    j = 0\n    s = 0\n    l = (w + 1) // 2\n    f = 0\n    while j < n:\n        if s < l:\n            s = s + a[j][0]\n            j = j + 1\n        if s >= l:\n            f = 1\n            break\n    if f == 1:\n        k = 0\n        while s > w and k < j:\n            s = s - a[k][0]\n            k = k + 1\n        if s > w or s == 0:\n            print(-1)\n        else:\n            an = []\n            l = 0\n            for u in range(k, j):\n                an.append(a[u][1] + 1)\n                l = l + 1\n            print(l)\n            print(' '.join(map(str, an)))\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = 0\n    s = 0\n    t = []\n    for i in range(n):\n        if l[i] >= math.ceil(w / 2) and l[i] <= w:\n            t = [i + 1]\n            s = l[i]\n            break\n        else:\n            s += l[i]\n            if s > w:\n                s -= l[i]\n            else:\n                t.append(i + 1)\n                if s >= math.ceil(w / 2):\n                    break\n    if s >= math.ceil(w / 2):\n        print(len(t))\n        print(*t)\n    else:\n        print(-1)", "from math import ceil\nfor i1 in range(int(input())):\n    (n, W) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    a = [(a[i], i) for i in range(n)]\n    a.sort(reverse=True)\n    H = ceil(W / 2)\n    now = 0\n    r = n\n    ans = []\n    for (i, ind) in a:\n        if now + i > W:\n            continue\n        now += i\n        r -= 1\n        ans.append(ind + 1)\n    if now < H or now > W:\n        print(-1)\n    else:\n        print(len(ans))\n        print(*ans)", "import math\nfor _ in range(int(input())):\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    nw = [(w[z], z) for z in range(n)]\n    nw.sort(reverse=True, key=lambda x: x[0])\n    ps = 0\n    ans = []\n    c = 0\n    l = 0\n    i = math.ceil(W / 2)\n    for z in range(n):\n        if ps + nw[z][0] <= W:\n            ps += nw[z][0]\n            ans.append(nw[z][1] + 1)\n            l += 1\n        if ps >= i:\n            c = 1\n            break\n    if not c:\n        print(-1)\n    else:\n        print(l)\n        print(*ans)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    array = []\n    j = 1\n    for i in input().split():\n        array.append([int(i), j])\n        j += 1\n    array.sort(reverse=True)\n    ans = []\n    weg = 0\n    atleast = 0\n    if w % 2 == 0:\n        atleast = w // 2\n    else:\n        atleast = w // 2 + 1\n    for i in array:\n        if weg + i[0] <= w:\n            weg += i[0]\n            ans.append(i[1])\n            if weg >= atleast:\n                print(len(ans))\n                print(*ans)\n                break\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    array = []\n    j = 1\n    for i in input().split():\n        array.append([int(i), j])\n        j += 1\n    array.sort(reverse=True)\n    ans = []\n    weg = 0\n    atleast = 0\n    if w % 2 == 0:\n        atleast = w // 2\n    else:\n        atleast = w // 2 + 1\n    for i in array:\n        if weg + i[0] <= w:\n            weg += i[0]\n            ans.append(i[1])\n            if weg >= atleast:\n                print(len(ans))\n                print(*ans)\n                break\n    else:\n        print(-1)", "import math\nfor u in range(int(input())):\n    (n, W) = tuple(map(int, input().split()))\n    w = list(map(int, input().split()))\n    ans = -1\n    for i in range(n):\n        if math.ceil(W / 2) <= w[i] <= W:\n            ans = i + 1\n            break\n    if ans == -1:\n        d = {}\n        y = 0\n        l = []\n        x = 0\n        for i in range(n):\n            d[w[i]] = i\n            if w[i] < math.ceil(W / 2):\n                l.append(i)\n                x += w[i]\n        if l == [] or x < math.ceil(W / 2):\n            print(-1)\n        else:\n            i = len(l) - 1\n            while x > W:\n                x -= w[l[i]]\n                i -= 1\n            print(i + 1)\n            for j in range(i + 1):\n                print(l[j] + 1, end=' ')\n            print()\n    else:\n        print(1)\n        print(ans)", "from collections import defaultdict\nfrom math import ceil\n\ndef main(n, W, w):\n    target = ceil(W / 2)\n    sorted_list = sorted(enumerate(w, 1), key=lambda x: x[1])\n    count = 0\n    for (i, x) in enumerate(sorted_list, 1):\n        if x[1] > W:\n            pass\n        elif x[1] >= target:\n            return (1, [x[0]])\n        else:\n            count += x[1]\n            if count > W:\n                count = 0\n            elif count >= target:\n                return (i, [z[0] for z in sorted_list[:i]])\n    return (-1, [])\nt = int(input())\nfor i in range(1, t + 1):\n    (n, W) = [int(s) for s in input().split(' ')]\n    w = [int(s) for s in input().split(' ')]\n    (status, li) = main(n, W, w)\n    if status == -1:\n        print(-1)\n    else:\n        print(status)\n        print(*li)", "from collections import defaultdict\nfrom math import ceil\n\ndef main(n, W, w):\n    target = ceil(W / 2)\n    sorted_list = sorted(enumerate(w, 1), key=lambda x: x[1])\n    count = 0\n    for (i, x) in enumerate(sorted_list, 1):\n        if x[1] > W:\n            pass\n        elif x[1] >= target:\n            return (1, [x[0]])\n        else:\n            count += x[1]\n            if count > W:\n                count = 0\n            elif count >= target:\n                return (i, [z[0] for z in sorted_list[:i]])\n    return (-1, [])\nt = int(input())\nfor i in range(1, t + 1):\n    (n, W) = [int(s) for s in input().split(' ')]\n    w = [int(s) for s in input().split(' ')]\n    (status, li) = main(n, W, w)\n    if status == -1:\n        print(-1)\n    else:\n        print(status)\n        print(*li)", "import sys\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom math import sqrt\nfrom functools import reduce\n\ndef solve(n, W, w):\n    sum = 0\n    ret = []\n    for i in range(n):\n        if (W + 1) // 2 <= sum <= W:\n            return ret\n        if w[i] > W:\n            continue\n        if (W + 1) // 2 <= w[i] <= W:\n            return [i + 1]\n        sum += w[i]\n        ret.append(i + 1)\n    if sum < (W + 1) // 2:\n        return []\n    return ret\nt = int(input())\nfor _ in range(t):\n    (n, W) = map(int, input().split())\n    w = list(map(int, input().split()))\n    ans = solve(n, W, w)\n    if len(ans) == 0:\n        print(-1)\n    else:\n        print(len(ans))\n        print(*ans)", "for _ in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    p = sorted([(l[i], i + 1) for i in range(n)])\n    (s, res, stops) = (0, [], False)\n    for k in p:\n        s += k[0]\n        res += [k[1]]\n        if w / 2 <= s and s <= w:\n            break\n        if s > w:\n            if w / 2 <= k[0] <= w:\n                res = [k[1]]\n                s = k[0]\n                break\n            else:\n                s = float('inf')\n                res = []\n                break\n    if len(res) == 0 or not w / 2 <= s <= w:\n        print(-1)\n    else:\n        print(len(res))\n        print(*res, sep=' ')", "a = int(input())\nfor i in range(a):\n    (n, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = dict()\n    for i in arr:\n        d[i] = set()\n    for i in range(0, len(arr)):\n        d[arr[i]].add(i)\n    arr.sort()\n    brr = []\n    k = 0\n    t = -1\n    for i in arr:\n        if i < w / 2:\n            brr.append(i)\n        elif i >= w / 2 and i <= w:\n            k = 1\n            t = i\n            break\n        else:\n            break\n    s = set()\n    if k == 1:\n        print(1)\n        print(d[t].pop() + 1)\n    else:\n        ans = []\n        summ = 0\n        for i in brr:\n            summ = summ + i\n            ans.append(i)\n            if summ >= w / 2:\n                break\n        if summ < w / 2:\n            print(-1)\n        else:\n            fans = []\n            for i in ans:\n                fans.append(d[i].pop() + 1)\n            print(len(fans))\n            print(' '.join(map(str, fans)))", "for t in range(int(input())):\n    (n, w) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    x = [[l[i], i + 1] for i in range(n)]\n    x.sort(key=lambda a: a[0], reverse=True)\n    ans = []\n    for i in range(n):\n        if c + x[i][0] <= w:\n            c += x[i][0]\n            ans.append(x[i][1])\n    if c < (w + 1) // 2:\n        print('-1')\n    else:\n        print(len(ans))\n        print(*ans)"]