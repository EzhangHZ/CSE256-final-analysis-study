["def compute(n, k, p):\n    if k > n:\n        return 0\n    num = 1\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    denom = 1\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n\ndef mod(x, A):\n    answer = x\n    for el in A:\n        answer %= el\n    return answer\n(N, K) = map(int, input().split())\nif K > N:\n    print(0)\nelif K == 1:\n    print(N)\nelse:\n    a = compute(N - 1, K - 1, 998244353)\n    for i in range(2, N):\n        if i * K > N:\n            break\n        el = N // i\n        a += compute(el - 1, K - 1, 998244353)\n        a %= 998244353\n    print(a)", "def compute(n, k, p, num, denom):\n    if k > n:\n        return 0\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n(N, K) = map(int, input().split())\nif K > N:\n    print(0)\nelif K == 1:\n    print(N)\nelse:\n    a = compute(N - 1, K - 1, 998244353, 1, 1)\n    for i in range(2, N):\n        if i * K > N:\n            break\n        el = N // i\n        a += compute(el - 1, K - 1, 998244353, 1, 1)\n        a %= 998244353\n    print(a)", "def compute(n, k, p):\n    if k > n:\n        return 0\n    num = 1\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    denom = 1\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n\ndef mod(x, A):\n    answer = x\n    for el in A:\n        answer %= el\n    return answer\n(N, K) = [int(_) for _ in input().split()]\nif K > N:\n    print(0)\nelif K == 1:\n    print(N)\nelse:\n    a = compute(N - 1, K - 1, 998244353)\n    for i in range(2, N):\n        if i * K > N:\n            break\n        el = N // i\n        a += compute(el - 1, K - 1, 998244353)\n        a %= 998244353\n    print(a)", "def compute(n, k, p, num, denom):\n    if k > n:\n        return 0\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n(N, K) = map(int, input().split())\nm = 998244353\nif K > N:\n    print(0)\nelif K == 1:\n    print(N)\nelse:\n    a = compute(N - 1, K - 1, m, 1, 1)\n    for i in range(2, N):\n        if i * K > N:\n            break\n        a += compute(N // i - 1, K - 1, m, 1, 1)\n        a %= m\n    print(a)", "def compute(n, k, p, num, denom):\n    if k > n:\n        return 0\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n(N, K) = map(int, input().split())\nm = 998244353\nif K > N:\n    print(0)\nelif K == 1:\n    print(N)\nelse:\n    a = compute(N - 1, K - 1, m, 1, 1)\n    for i in range(2, N):\n        if i * K > N:\n            break\n        a += compute(N // i - 1, K - 1, m, 1, 1)\n        a %= m\n    print(a)", "def Solve(n, k):\n    if k > n:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        a = combination(n - 1, k - 1, 998244353)\n        for i in range(2, n):\n            if i * k > n:\n                break\n            el = n // i\n            a += combination(el - 1, k - 1, 998244353)\n            a %= 998244353\n        return a\n\ndef combination(n, k, p):\n    if k > n:\n        return 0\n    num = 1\n    for i in range(n, n - k, -1):\n        num = num * i % p\n    denom = 1\n    for i in range(1, k + 1):\n        denom = denom * i % p\n    return num * pow(denom, p - 2, p) % p\n(n, k) = map(int, input().split())\nprint(Solve(n, k))", "(n, k) = map(int, input().split())\nmod = 998244353\n\ndef f(n, k):\n    a = 1\n    b = 1\n    c = 1\n    for z in range(n, n - k, -1):\n        c = c * z % mod\n    for i in range(1, k + 1):\n        a = a * i % mod\n    return c * pow(a, mod - 2, mod) % mod\nif n < k:\n    print(0)\nelif k == 1:\n    print(n % mod)\nelif k == n:\n    print(1)\nelse:\n    ans = f(n - 1, k - 1)\n    for i in range(2, n):\n        if i * k > n:\n            break\n        a = n // i\n        ans += f(a - 1, k - 1)\n        ans %= mod\n    print(ans)", "mod = 998244353\n\ndef fp(a, n):\n    res = 1\n    while n:\n        if n & 1:\n            res = res * a % mod\n        n = n // 2\n        a = a * a % mod\n    return res\n(n, k) = list(map(int, input().split()))\npo = [0] * (n + 1)\nrv = [0] * (n + 1)\npo[0] = 1\nfor i in range(1, n + 1):\n    po[i] = po[i - 1] * i % mod\nrv[n] = fp(po[n], mod - 2)\nfor i in range(n - 1, -1, -1):\n    rv[i] = rv[i + 1] * (i + 1) % mod\n\ndef C(n, m):\n    return po[n] * rv[m] * rv[n - m] % mod\nif k == 1:\n    print(n)\nelif k > n:\n    print(0)\nelse:\n    ans = 0\n    for i in range(1, n + 1):\n        t = n // i\n        if t < k:\n            break\n        ans += C(t - 1, k - 1)\n    print(ans % mod)", "mod = 998244353\n\ndef binary_exp(num, pow):\n    ans = 1\n    while pow > 0:\n        if pow % 2 == 1:\n            ans = ans * num % mod\n        num = num * num % mod\n        pow //= 2\n    return ans\n\ndef factorial(n):\n    arr = [1]\n    for i in range(1, size):\n        arr.append(arr[-1] * i % mod)\n    return arr\n\ndef inverse_factorial(x):\n    return binary_exp(x, mod - 2)\n(n, k) = map(int, input().split())\nif k > n:\n    print('0')\n    quit()\nif k == 1:\n    print(n)\n    quit()\nsize = n + 1\nfacts = factorial(size)\nans = 0\nfor i in range(1, n // k + 1):\n    num = n // i\n    num -= 1\n    t = facts[num] * inverse_factorial(facts[k - 1]) * inverse_factorial(facts[num - (k - 1)]) % mod\n    ans += t\n    if ans > mod:\n        ans -= mod\nprint(ans)", "import sys\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef nCr(com_n, com_r):\n    if com_n < com_r:\n        return 0\n    return fac[com_n] * ifac[com_r] % md * ifac[com_n - com_r] % md\nmd = 998244353\nn_max = 500005\nfac = [1]\nfor i in range(1, n_max + 1):\n    fac.append(fac[-1] * i % md)\nifac = [1] * (n_max + 1)\nifac[n_max] = pow(fac[n_max], md - 2, md)\nfor i in range(n_max - 1, 1, -1):\n    ifac[i] = ifac[i + 1] * (i + 1) % md\n\ndef main():\n    (n, k) = MI()\n    ans = 0\n    for a0 in range(1, n + 1):\n        c = n // a0\n        if c < k:\n            break\n        ans += nCr(c - 1, k - 1)\n        ans %= md\n    print(ans)\nmain()"]