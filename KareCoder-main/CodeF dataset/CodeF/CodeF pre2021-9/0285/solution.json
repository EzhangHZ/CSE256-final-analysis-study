["import sys\n\ndef shortestContiguousSubstringLen(a, n):\n    s = e = 0\n    minLen = 300000\n    cnt = 0\n    d = {}\n    while e < n:\n        cai = d.get(a[e], 0)\n        if cai == 0:\n            cnt += 1\n            d[a[e]] = 1\n        else:\n            d[a[e]] = cai + 1\n        if cnt == 3:\n            while s < e and d[a[s]] > 1:\n                d[a[s]] = d[a[s]] - 1\n                s += 1\n            length = e - s + 1\n            if length < minLen:\n                minLen = length\n        e += 1\n    if cnt < 3:\n        return 0\n    return minLen\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    a = list(sys.stdin.readline().strip())\n    n = len(a)\n    res = shortestContiguousSubstringLen(a, n)\n    print(res)", "import sys\n\ndef solve():\n    string = sys.stdin.readline().strip()\n    length = len(string)\n    answer = float('inf')\n    flags = {'1': 0, '2': 0, '3': 0}\n    if len(set(string)) == 3:\n        (l, r) = (0, 1)\n        flags[string[l]] += 1\n        while r <= length:\n            if all(flags.values()):\n                answer = min(answer, r - l)\n                flags[string[l]] -= 1\n                l += 1\n            else:\n                if r < length:\n                    flags[string[r]] += 1\n                r += 1\n    if answer == float('inf'):\n        answer = 0\n    print(answer)\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    while n:\n        solve()\n        n -= 1\nmain()", "import sys\n\ndef solve():\n    string = sys.stdin.readline().strip()\n    length = len(string)\n    answer = float('inf')\n    flags = {'1': 0, '2': 0, '3': 0}\n    if len(set(string)) == 3:\n        (l, r) = (0, 1)\n        flags[string[l]] += 1\n        while r <= length:\n            if all(flags.values()):\n                answer = min(answer, r - l)\n                flags[string[l]] -= 1\n                l += 1\n            else:\n                if r < length:\n                    flags[string[r]] += 1\n                r += 1\n    if answer == float('inf'):\n        answer = 0\n    print(answer)\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for _ in range(n):\n        solve()\nmain()", "import sys\n\ndef solve():\n    string = sys.stdin.readline().strip()\n    length = len(string)\n    answer = float('inf')\n    flags = {'1': 0, '2': 0, '3': 0}\n    if len(set(string)) == 3:\n        (l, r) = (0, 1)\n        flags[string[l]] += 1\n        while r <= length:\n            if all(flags.values()):\n                answer = min(answer, r - l)\n                flags[string[l]] -= 1\n                l += 1\n            else:\n                if r < length:\n                    flags[string[r]] += 1\n                r += 1\n    if answer == float('inf'):\n        answer = 0\n    print(answer)\n\ndef main():\n    for _ in range(int(sys.stdin.readline().strip())):\n        solve()\nmain()", "for s in [*open(0)][1:]:\n    a = [0] * 3\n    i = r = m = 4 ** 9\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "for s in [*open(0)][1:]:\n    a = [0] * 3\n    i = r = m = 4 ** 9\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "t = int(input())\nk = ['1', '2', '3']\nfor i in range(t):\n    f = input()\n    f = list(f)\n    count = 1\n    ans = 1000000\n    for i in range(1, len(f)):\n        if f[i] == f[i - 1]:\n            count += 1\n        else:\n            if count + 2 < ans:\n                if i - count - 1 >= 0 and f[i - count - 1] != f[i]:\n                    ans = count + 2\n            count = 1\n    if ans == 1000000:\n        print('0')\n    else:\n        print(ans)", "for s in [*open(0)][1:]:\n    a = [0] * 3\n    i = r = m = 4 ** 9\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "from itertools import *\nfor s in [*open(0)][1:]:\n    a = [(k, len([*g])) for (k, g) in groupby(s[:-1])]\n    print(min([y[1] + 2 for (x, y, z) in zip(a, a[1:], a[2:]) if x[0] != z[0]] or [0]))", "def tstring(s):\n    counts = [s.count('1'), s.count('2'), s.count('3')]\n    if 0 in counts:\n        return 0\n    minlen = len(s)\n    recent = [None, None, None]\n    for i in range(len(s)):\n        n = int(s[i]) - 1\n        recent[n] = i\n        if None in recent:\n            continue\n        l = min(recent)\n        minlen = min(minlen, i - l + 1)\n    return minlen\nn = int(input())\n[print(r) for r in [tstring(input()) for i in range(n)]]", "for s in [*open(0)][1:]:\n    a = [0] * 3\n    i = r = m = 4 ** 9\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "for s in [*open(0)][1:]:\n    i = r = m = 4 ** 9\n    a = [-m] * 3\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "ans = []\nfor _ in range(int(input())):\n    s = input()\n    min_length = len(s)\n    if len(set(s)) < 3:\n        ans.append(0)\n        continue\n    inside = []\n    length = 0\n    last = s[0]\n    for i in range(len(s)):\n        if i == 0:\n            inside.append(s[i])\n            length = 1\n        elif s[i] == last:\n            if len(inside) == 1:\n                continue\n            else:\n                length += 1\n        else:\n            if s[i] not in inside:\n                inside.append(s[i])\n                length += 1\n            else:\n                length = 2\n            if len(inside) == 3:\n                min_length = min(min_length, length)\n                inside = [last, s[i]]\n                length = 2\n        last = s[i]\n    ans.append(min_length)\nprint('\\n'.join(map(str, (x for x in ans))))", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "t = int(input())\nfor i in range(t):\n    s = input()\n    if '1' in s and '2' in s and ('3' in s):\n        if '123' in s or '132' in s or '213' in s or ('231' in s) or ('312' in s) or ('321' in s):\n            print(3)\n        else:\n            l = []\n            (a, b, c, d) = (0, 0, 0, 0)\n            j = 1\n            for i in s:\n                if i == '1':\n                    a = j\n                elif i == '2':\n                    b = j\n                else:\n                    c = j\n                if a != 0 and b != 0 and (c != 0):\n                    l1 = [a, b, c]\n                    m = max(l1) - min(l1) + 1\n                    l.append(m)\n                    if min(l1) == a:\n                        a = 0\n                    elif min(l1) == b:\n                        b = 0\n                    else:\n                        c = 0\n                j += 1\n            print(min(l))\n    else:\n        print(0)", "from itertools import *\nfor s in [*open(0)][1:]:\n    a = [(k, len([*g])) for (k, g) in groupby(s[:-1])]\n    print(min((y[1] + 2 for (x, y, z) in zip(a, a[1:], a[2:]) if x[0] != z[0]), default=0))", "def ter(j):\n    one = -1\n    two = -1\n    three = -1\n    sum = 0\n    for i in range(len(j)):\n        if j[i] == '1':\n            one = i\n        elif j[i] == '2':\n            two = i\n        else:\n            three = i\n        if one != -1 and two != -1 and (three != -1):\n            a = max([one, two, three]) - min([one, two, three]) + 1\n            if a < sum or sum == 0:\n                sum = a\n    return sum\nt = int(input())\nl = []\nfor i in range(t):\n    s = input()\n    l.append(s)\nfor j in l:\n    print(ter(j))", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        if index[pos] > 1:\n            while index[ord(input_text[left]) - 49] > 1:\n                index[ord(input_text[left]) - 49] -= 1\n                left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "from sys import stdin, stdout, maxsize\n\ndef get_ternary_string(input_text: str) -> int:\n    index = [0] * 3\n    count = maxsize\n    left = 0\n    for right in range(0, len(input_text)):\n        pos = ord(input_text[right]) - 49\n        index[pos] += 1\n        while index[ord(input_text[left]) - 49] > 1:\n            index[ord(input_text[left]) - 49] -= 1\n            left += 1\n        if index[0] != 0 and index[1] != 0 and (index[2] != 0):\n            count = min(count, right - left + 1)\n    return 0 if count == maxsize else count\ntest_cases = int(stdin.readline().strip())\nwhile test_cases > 0:\n    input_text = stdin.readline().strip()\n    print(get_ternary_string(input_text))\n    test_cases -= 1", "for _ in range(int(input())):\n    wah = list(map(int, input()))\n    first = wah[0]\n    second = -1\n    third = -1\n    min_size = 1000000000000\n    size = 0\n    last = 0\n    for i in range(1, len(wah)):\n        n = wah[i]\n        last = i\n        if n != first:\n            second = n\n            size = 2\n            break\n    for i in range(last + 1, len(wah)):\n        n = wah[i]\n        if n == first:\n            size = 2\n            (first, second) = (second, first)\n        elif n == second:\n            size += 1\n        else:\n            if size < min_size:\n                min_size = size\n            (first, second) = (second, n)\n            size = 2\n    if min_size == 1000000000000:\n        print(0)\n    else:\n        print(min_size + 1)", "import sys\n\ndef read_integer():\n    return int(sys.stdin.readline())\n\ndef read_integers():\n    return [int(x) for x in sys.stdin.readline().split(' ')]\n\ndef print_integers(nums):\n    print(' '.join([str(x) for x in nums]))\n\ndef func():\n    s = sys.stdin.readline()[:-1]\n    if '1' not in s or '2' not in s or '3' not in s:\n        return 0\n    l = 0\n    times = {'1': 0, '2': 0, '3': 0}\n    ans = len(s)\n    for r in range(len(s)):\n        times[s[r]] += 1\n        while times[s[l]] > 1:\n            times[s[l]] -= 1\n            l += 1\n        if times['1'] > 0 and times['2'] > 0 and (times['3'] > 0):\n            ans = min(ans, r - l + 1)\n    return ans\nnt = read_integer()\nfor _ in range(nt):\n    print(func())", "def style(s, st, a):\n    mid = '0'\n    ind = -1\n    if len(s) == 1 or 3 in a:\n        return\n    for i in range(1, len(s)):\n        if s[i] != st:\n            mid = s[i]\n            ind = i\n            break\n    end = ['1', '2', '3']\n    end.remove(st)\n    end.remove(mid)\n    end = end[0]\n    if ind != -1:\n        i = ind + 1\n        while i < len(s):\n            if s[i] == end:\n                l = i - ind + 2\n                a.append(l)\n                style(s[i - 1:], s[i - 1], a)\n                break\n            elif s[i] != s[i - 1]:\n                ind = i\n            i += 1\n    return a\nfrom collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    a = []\n    if '1' not in s or '2' not in s or '3' not in s:\n        print(0)\n    else:\n        style(s, s[0], a)\n        a.sort()\n        print(a[0])", "from itertools import *\nfor s in [*open(0)][1:]:\n    p = q = 0\n    r = m = 4 ** 9\n    for (k, g) in groupby(s[:-1]):\n        if (p or k) != k:\n            r = min(r, l + 2)\n        l = len([*g])\n        p = q\n        q = k\n    print(r % m)", "def tstring(s):\n    counts = [s.count('1'), s.count('2'), s.count('3')]\n    if 0 in counts:\n        return 0\n    minlen = len(s)\n    recent = [None, None, None]\n    for i in range(len(s)):\n        n = int(s[i]) - 1\n        recent[n] = i\n        if None in recent:\n            continue\n        l = min(recent)\n        minlen = min(minlen, i - l + 1)\n    return minlen\nn = int(input())\nll = []\nfor i in range(n):\n    s = input()\n    ll.append(s)\nfor s in ll:\n    print(tstring(s))", "t = int(input())\nb = []\nfor k in range(t):\n    a = input()\n    mini = 10000000000000\n    if len(set(a)) < 3:\n        mini = 0\n    else:\n        mass = []\n        count = 0\n        number = 0\n        for i in range(len(a)):\n            if i == 0:\n                number = a[i]\n                mass.append(number)\n                count += 1\n            elif number == a[i]:\n                count += 1\n            elif number != a[i]:\n                if a[i] not in mass:\n                    if len(mass) == 1:\n                        mass.append(a[i])\n                        number = a[i]\n                        count = 2\n                    else:\n                        mass.append(a[i])\n                        count += 1\n                        if len(mass) == 3:\n                            if count < mini:\n                                mini = count\n                            mass = [number, a[i]]\n                            count = 2\n                        number = a[i]\n                else:\n                    count = 2\n                    number = a[i]\n    b.append(mini)\nfor i in b:\n    print(i)", "def shortest_sub(s):\n    n = len(s)\n    if n < 3:\n        return 0\n    count = float('inf')\n    chars = {'1': 0, '2': 0, '3': 0}\n    l = 0\n    for r in range(n):\n        chars[s[r]] += 1\n        while chars[s[l]] > 1:\n            chars[s[l]] -= 1\n            l += 1\n        if chars['1'] and chars['2'] and chars['3']:\n            count = min(count, r - l + 1)\n    return 0 if count == float('inf') else count\ncases = int(input())\nfor case in range(cases):\n    print(shortest_sub(input()))", "def shortest(arr, size):\n    minLength = size + 1\n    left = 0\n    right = 0\n    sets = set()\n    arrDict = {}\n    set1 = {'1', '2', '3'}\n    while right <= size:\n        while sets == set1 and minLength != 3:\n            minLength = min(minLength, right - left)\n            arrDict[arr[left]] -= 1\n            if arrDict[arr[left]] == 0:\n                sets.remove(arr[left])\n            left += 1\n        if minLength == 3:\n            break\n        elif right == size:\n            break\n        elif arr[right] not in sets:\n            sets.add(arr[right])\n        arrDict[arr[right]] = 1 + arrDict.get(arr[right], 0)\n        right += 1\n    print(minLength if minLength != size + 1 else 0)\ntest = int(input())\nfor _ in range(test):\n    lists = list(input())\n    size = len(lists)\n    shortest(lists, size)", "def solution():\n    s = input()\n    mi = 200001\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            f = i\n            n = 1\n            t = s[i - 1]\n            break\n    else:\n        return 0\n    for i in range(f + 1, len(s)):\n        if s[i] != s[i - 1]:\n            if t != s[i]:\n                mi = min(n + 2, mi)\n                n = 1\n                t = s[i - 1]\n                if mi == 3:\n                    break\n            else:\n                t = s[i - 1]\n                n = 1\n        else:\n            n += 1\n    if mi == 200001:\n        return 0\n    else:\n        return mi\nfor _ in range(int(input())):\n    print(solution())", "from itertools import *\nfor s in [*open(0)][1:]:\n    p = q = r = l = m = 4 ** 9\n    for (k, g) in groupby(s[:-1]):\n        r = min(r, l + m * (p in (m, k)))\n        l = len([*g]) + 2\n        p = q\n        q = k\n    print(r % m)", "def ternaryString(s):\n    n = len(s)\n    count = 0\n    cur = None\n    l = []\n    for i in range(n):\n        if s[i] == cur:\n            count += 1\n        else:\n            if cur != None:\n                l.append((cur, count))\n            cur = s[i]\n            count = 1\n    l.append((cur, count))\n    flag = 1\n    ans = 1000000000000\n    for i in range(1, len(l) - 1):\n        if l[i - 1][0] != l[i + 1][0]:\n            flag = 0\n            ans = min(ans, l[i][1] + 2)\n    if flag:\n        return 0\n    else:\n        return ans\nans = []\nn = int(input())\nfor i in range(n):\n    s = input()\n    ans.append(ternaryString(s))\nfor i in ans:\n    print(i)", "def solve(k):\n    index1 = None\n    index2 = None\n    index3 = None\n    miniDistance = len(k)\n    for (i, j) in enumerate(k):\n        if j == '1':\n            index1 = i\n        elif j == '2':\n            index2 = i\n        elif j == '3':\n            index3 = i\n        if index1 == None or index2 == None or index3 == None:\n            continue\n        else:\n            cmp = max(index1, index2, index3) - min(index1, index2, index3) + 1\n            if cmp < miniDistance:\n                miniDistance = cmp\n    if index1 == None or index2 == None or index3 == None:\n        return 0\n    else:\n        return miniDistance\nn = int(input())\nfor x in range(n):\n    print(solve(input()))", "import sys\nimport heapq\nfrom math import *\nimport bisect\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, input().split())\n\ndef rlinput():\n    return list(map(int, input().split()))\n\ndef srlinput(fl=False):\n    return sorted(list(map(int, input().split())), reverse=fl)\n\ndef main():\n    s = [int(i) - 1 for i in list(input())]\n    n = len(s)\n    t = n + 3\n    t *= -1\n    q = [t for i in range(3)]\n    res = 1e+18\n    for i in range(n):\n        q[s[i]] = i\n        res = min(res, i + 1 - min(q))\n    if t in q:\n        print(0)\n    else:\n        print(res)\nfor sdfghjkl in range(iinput()):\n    main()", "import math\nimport sys\nfrom collections import Counter\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip('\\n')\n    n = len(s)\n    d = Counter(s)\n    if len(d) < 3:\n        print(0)\n        return\n    dis = 3\n    s1 = 0\n    si = -1\n    min1 = pow(10, 9)\n    count = 0\n    d1 = defaultdict(int)\n    for j in range(n):\n        d1[s[j]] += 1\n        if d1[s[j]] == 1:\n            count += 1\n        if count == 3:\n            while d1[s[s1]] > 1:\n                if d1[s[s1]] > 1:\n                    d1[s[s1]] -= 1\n                s1 += 1\n            length = j - s1 + 1\n            if min1 > length:\n                min1 = length\n                si = s1\n    print(min1)\nfor _ in range(int(input())):\n    solve()", "def main():\n    string = str(input())\n    a = list(string)\n    s = set(a)\n    if len(s) < 3:\n        print(0)\n        return\n    mx = len(a) + 100\n    start = 0\n    for i in range(len(string) - 1):\n        if a[i] != a[i + 1]:\n            if a[i + 1] == a[start] or a[i] == a[start]:\n                start = i\n            elif a[i] != a[start]:\n                j = i + 1\n                if mx > j - start + 1:\n                    mx = j - start + 1\n                    if mx == 3:\n                        print(3)\n                        return\n                start = i\n    print(mx)\nt = int(input())\nwhile t:\n    main()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    s = input()\n    l = list(s)\n    a = 0\n    b = 0\n    c = 0\n    g = []\n    if '1' in s and '2' in s and ('3' in s):\n        if '123' in s or '132' in s or '213' in s or ('231' in s) or ('312' in s) or ('321' in s):\n            print(3)\n        else:\n            for j in range(len(l)):\n                if l[j] == '1':\n                    a = j + 1\n                elif l[j] == '2':\n                    b = j + 1\n                elif l[j] == '3':\n                    c = j + 1\n                if a != 0 and b != 0 and (c != 0):\n                    g.append(max(a, b, c) - min(a, b, c) + 1)\n                    if min(a, b, c) == a:\n                        a = 0\n                    elif min(a, b, c) == b:\n                        b = 0\n                    elif min(a, b, c) == c:\n                        c = 0\n            print(min(g))\n    else:\n        print(0)", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    n = len(s)\n    c = defaultdict(int)\n    p = 0\n    rec = 10 ** 6\n    for i in range(n):\n        c[s[i]] += 1\n        ok = False\n        while c['1'] > 0 and c['2'] > 0 and (c['3'] > 0):\n            c[s[p]] -= 1\n            p += 1\n            ok = True\n        if ok:\n            rec = min(rec, c['1'] + c['2'] + c['3'] + 1)\n    if rec == 10 ** 6:\n        print(0)\n    else:\n        print(rec)\ntt = int(input())\nfor test in range(tt):\n    solve()", "for s in [*open(0)][1:]:\n    r = m = 4 ** 9\n    a = [-m] * 3\n    i = 0\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "def solve(s):\n    bool1 = False\n    bool2 = False\n    bool3 = False\n    ind1 = -1\n    ind2 = -1\n    ind3 = -1\n    mini = 10 ** 8\n    for i in range(len(s)):\n        if s[i] == '1':\n            bool1 = True\n            p1 = i\n        elif s[i] == '2':\n            bool2 = True\n            p2 = i\n        elif s[i] == '3':\n            bool3 = True\n            p3 = i\n        if bool1 and bool2 and bool3:\n            temp = min(p1, p2, p3)\n            if i - temp + 1 < mini:\n                mini = i - temp + 1\n    if mini == 10 ** 8:\n        return 0\n    return mini\nt = int(input())\nfor _ in range(t):\n    n = input()\n    print(solve(n))", "def solve(string):\n    ar1 = ['1', '2', '3']\n    ar1 = set(ar1)\n    if set(string) != ar1:\n        return 0\n    (l, m, r) = (-1, -1, -1)\n    ansf = len(string)\n    for (index, value) in enumerate(string):\n        if value == '1':\n            l = index\n        elif value == '2':\n            m = index\n        else:\n            r = index\n        if l > -1 and m > -1 and (r > -1):\n            ansf = min(ansf, max(l, m, r) - min(l, m, r) + 1)\n    return ansf\nt = int(input())\nans = []\nfor s in range(t):\n    strt = input()\n    ans.append(solve(strt))\nfor it in ans:\n    print(it)", "def ternary(s):\n    l = len(s)\n    answer = 0\n    lone = None\n    ltwo = None\n    lthree = None\n    for i in range(l):\n        if s[i] == '1':\n            lone = i\n        elif s[i] == '2':\n            ltwo = i\n        else:\n            lthree = i\n        if lone != None and ltwo != None and (lthree != None):\n            a = int(max(lone, ltwo, lthree)) - int(min(lone, ltwo, lthree)) + 1\n            if a < answer or answer == 0:\n                answer = a\n    return answer\nt = int(input())\narray = []\nfor i in range(t):\n    array.append(input())\nfor x in array:\n    print(ternary(x))", "n = int(input())\na = []\nfor i in range(n):\n    s = input()\n    m = 1000000\n    e = 0\n    d = 0\n    t = 0\n    s1 = 0\n    s2 = -1\n    while True:\n        if t > 0 and d > 0 and (e > 0):\n            if m > s2 - s1 + 1:\n                m = s2 - s1 + 1\n            if s[s1] == '1':\n                e -= 1\n            elif s[s1] == '2':\n                d -= 1\n            else:\n                t -= 1\n            s1 += 1\n        else:\n            s2 += 1\n            if s2 > len(s) - 1:\n                break\n            if s[s2] == '1':\n                e += 1\n            elif s[s2] == '2':\n                d += 1\n            else:\n                t += 1\n    if m == 1000000:\n        a.append(0)\n    else:\n        a.append(m)\nfor i in range(len(a)):\n    print(a[i])", "list_ans = []\nfor _ in range(int(input())):\n    s = input()\n    dict1 = {1: 200000, 2: 200000, 3: 200000}\n    a = 1\n    if '1' in s and '2' in s and ('3' in s):\n        for i in range(len(s) - 1):\n            if s[i] != s[i + 1]:\n                break\n        for x in range(i + 1, len(s) - 1):\n            if s[x] == s[x + 1]:\n                a += 1\n            else:\n                if s[x + 1] != s[x - a]:\n                    dict1[int(s[x])] = min(dict1[int(s[x])], a)\n                a = 1\n        list_ans.append(min(dict1.values()) + 2)\n    else:\n        list_ans.append(0)\nfor item in list_ans:\n    print(item)", "t = int(input())\nfor _ in range(t):\n    s = input().rstrip()\n    n = len(s)\n    l = []\n    pprev = s[0]\n    idxppr = 0\n    prev = idxpr = -1\n    for i in range(n):\n        if s[i] != pprev:\n            prev = s[i]\n            idxpr = i\n            break\n    j = idxpr\n    for i in range(n):\n        if s[i] == prev:\n            idxpr += 1\n            prev = s[idxpr]\n        elif s[i] == pprev:\n            idxppr = idxpr\n            idxpr = i\n            pprev = s[idxppr]\n            prev = s[idxpr]\n        else:\n            l.append(i - idxppr + 1)\n            idxppr = idxpr\n            idxpr = i\n            pprev = s[idxppr]\n            prev = s[idxpr]\n    if len(l) > 0:\n        print(min(l))\n    else:\n        print(0)", "def smallestWindow(s, p):\n    n = len(s)\n    if n < len(p):\n        return 0\n    mp = [0] * 256\n    start = 0\n    ans = n + 1\n    cnt = 0\n    for i in p:\n        mp[ord(i)] += 1\n        if mp[ord(i)] == 1:\n            cnt += 1\n    j = 0\n    i = 0\n    while j < n:\n        mp[ord(s[j])] -= 1\n        if mp[ord(s[j])] == 0:\n            cnt -= 1\n            while cnt == 0:\n                if ans > j - i + 1:\n                    ans = j - i + 1\n                    start = i\n                mp[ord(s[i])] += 1\n                if mp[ord(s[i])] > 0:\n                    cnt += 1\n                i += 1\n        j += 1\n    if ans > n:\n        return '0'\n    return len(s[start:start + ans])\nfor i in range(int(input())):\n    s = input()\n    p = '123'\n    result = smallestWindow(s, p)\n    print(result)", "def rez():\n    s = input()\n    one = 100000000\n    two = 100000000\n    thee = 1000000000\n    ans = len(s)\n    for i in range(len(s)):\n        if s[i] == '1':\n            one = i\n        elif s[i] == '2':\n            two = i\n        else:\n            thee = i\n        if max(one, two, thee) - min(one, two, thee) < ans:\n            ans = max(one, two, thee) - min(one, two, thee)\n    if max(one, two, thee) <= len(s):\n        print(ans + 1)\n    else:\n        print(0)\nfor t in range(int(input())):\n    rez()", "import sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\npy = lambda : print('YES')\npn = lambda : print('NO')\nt = ii()\nfor _ in range(t):\n    s = input()\n    res = inf\n    l = r = 0\n    cnt = defaultdict(int)\n    while r < len(s):\n        cnt[s[r]] += 1\n        while cnt['1'] > 0 and cnt['2'] > 0 and (cnt['3'] > 0):\n            res = min(res, r - l + 1)\n            cnt[s[l]] -= 1\n            l += 1\n        r += 1\n    print(res if res <= len(s) else 0)", "INF_INT = 10000000000000000000000\n\ndef solution():\n    s = input()\n    n = len(s)\n    (ls, rf) = (0, -1)\n    answer = INF_INT\n    for i in range(n):\n        if s[i] != s[ls]:\n            if rf == -1:\n                rf = i\n            else:\n                if s[i] != s[rf]:\n                    answer = min(answer, i - ls + 1)\n                    ls = rf\n                rf = i\n        elif rf == -1:\n            ls = i\n        else:\n            ls = rf\n            rf = i\n    if answer == INF_INT:\n        answer = 0\n    print(answer)\nt = int(input())\nfor _ in range(t):\n    solution()", "def find123(string):\n    tuples = []\n    repeat = 0\n    for (i, char) in enumerate(string):\n        repeat += 1\n        if i == len(string) - 1 or char != string[i + 1]:\n            tuples.append((char, repeat))\n            repeat = 0\n    viable = []\n    for (i, pair) in enumerate(tuples):\n        if i != 0 and i != len(tuples) - 1:\n            left = tuples[i - 1]\n            right = tuples[i + 1]\n            if left[0] != right[0]:\n                viable.append(pair[1])\n    return min(viable) + 2 if len(viable) > 0 else 0\nstrings = []\nnum = int(input())\nfor j in range(num):\n    strings.append(input().strip())\nfor string in strings:\n    print(find123(string))", "n = int(input())\na = []\nfor i in range(n):\n    s = input()\n    m = 0\n    e = 0\n    d = 0\n    t = 0\n    s1 = 0\n    s2 = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            e += 1\n        elif s[i] == '2':\n            d += 1\n        else:\n            t += 1\n        if t != 0 and d != 0 and (e != 0):\n            s2 = i\n            m = i + 1\n            break\n    if s2 == 0:\n        a.append(0)\n    else:\n        while True:\n            if t > 0 and d > 0 and (e > 0):\n                if m > s2 - s1 + 1:\n                    m = s2 - s1 + 1\n                if s[s1] == '1':\n                    e -= 1\n                elif s[s1] == '2':\n                    d -= 1\n                else:\n                    t -= 1\n                s1 += 1\n            else:\n                s2 += 1\n                if s2 > len(s) - 1:\n                    break\n                if s[s2] == '1':\n                    e += 1\n                elif s[s2] == '2':\n                    d += 1\n                else:\n                    t += 1\n        a.append(m)\nfor i in range(len(a)):\n    print(a[i])", "from math import ceil, gcd, factorial\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\n\ndef li():\n    return list(map(int, input().split()))\n\ndef arr(a):\n    return array('i', a)\n\ndef solve():\n    for _ in range(int(input())):\n        s = input()\n        n = len(s)\n        if '1' in s and '2' in s and ('3' in s):\n            m = n\n            i1 = s.index('1')\n            i2 = s.index('2')\n            i3 = s.index('3')\n            b = s[::-1]\n            l = n - max(b.index('1'), b.index('2'), b.index('3'))\n            for i in range(l):\n                if i > i1:\n                    i1 = s.index('1', i)\n                elif i > i2:\n                    i2 = s.index('2', i)\n                elif i > i3:\n                    i3 = s.index('3', i)\n                ml = max(i1, i2, i3) - i + 1\n                m = min(m, ml)\n            print(m)\n        else:\n            print(0)\nsolve()", "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    s = list(map(lambda x: int(x) - 1, list(ns())))\n    n = len(s)\n    l = [3 * n] * 3\n    ans = 3 * n\n    for i in range(n - 1, -1, -1):\n        l[s[i]] = i\n        ans = min(ans, max(l) - i + 1)\n    print(ans if ans <= n else 0)\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def main():\n    n = int(input())\n    for i in range(n):\n        s = list(input())\n        counter = len(s) + 1\n        num_one = 0\n        num_two = 0\n        num_three = 0\n        for j in range(len(s)):\n            if s[j] == '1':\n                num_one = j + 1\n            elif s[j] == '2':\n                num_two = j + 1\n            elif s[j] == '3':\n                num_three = j + 1\n            if num_one and num_two and num_three and (max(num_three, num_two, num_one) - min(num_three, num_two, num_one) + 1 < counter):\n                counter = max(num_three, num_two, num_one) - min(num_three, num_two, num_one) + 1\n            if counter == 3:\n                break\n        if counter < len(s) + 1:\n            print(counter)\n        else:\n            print(0)\nmain()", "for s in [*open(0)][1:]:\n    i = r = m = 4 ** 9\n    a = [-m] * 3\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "from itertools import *\nfor s in [*open(0)][1:]:\n    p = q = r = l = m = 4 ** 9\n    for (k, g) in groupby(s[:-1]):\n        r = min(r, (m, l)[m != p != k])\n        l = len([*g]) + 2\n        p = q\n        q = k\n    print(r % m)", "import math\nfrom sys import stdin, stdout\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef Si():\n    return sorted(list(map(int, stdin.readline().split())))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return stdin.readline()\n\ndef main():\n    for i in range(int(I())):\n        s = str(I())\n        n1 = -1\n        n2 = -1\n        n3 = -1\n        m = len(s)\n        for i in range(m):\n            if s[i] == '1':\n                n1 = i\n            elif s[i] == '2':\n                n2 = i\n            elif s[i] == '3':\n                n3 = i\n            if n1 != -1 and n2 != -1 and (n3 != -1):\n                m = min(m, max(n1, n2, n3) - min(n1, n2, n3) + 1)\n        print(m if n1 != -1 and n2 != -1 and (n3 != -1) else 0)\nmain()", "n = int(input())\na = []\nb = []\nlst1 = []\nlst2 = [0 for x in range(n)]\nfor i in range(n):\n    lst2[i] = input()\nfor lst in lst2:\n    a = []\n    b = []\n    for j in range(len(lst) - 1):\n        if j == 0:\n            a.append(lst[j])\n            b.append(1)\n        if lst[j] == lst[j + 1]:\n            b[len(b) - 1] += 1\n        if lst[j] != lst[j + 1]:\n            a.append(lst[j + 1])\n            b.append(1)\n    kaiguan = 0\n    min_ = 200010\n    for j in range(1, len(a) - 1):\n        if a[j] != a[j - 1] and a[j] != a[j + 1] and (a[j - 1] != a[j + 1]) and (b[j] + 2 < min_):\n            min_ = b[j] + 2\n            kaiguan = 1\n    if kaiguan == 1:\n        lst1.append(min_)\n    else:\n        lst1.append(0)\nfor i in range(n):\n    print(lst1[i])", "def smallestWindow(s, p):\n    n = len(s)\n    if n < len(p):\n        return 0\n    mp = [0] * 256\n    start = 0\n    ans = n + 1\n    cnt = 0\n    for i in p:\n        mp[ord(i)] += 1\n        if mp[ord(i)] == 1:\n            cnt += 1\n    j = 0\n    i = 0\n    while j < n:\n        mp[ord(s[j])] -= 1\n        if mp[ord(s[j])] == 0:\n            cnt -= 1\n            while cnt == 0:\n                if ans > j - i + 1:\n                    ans = j - i + 1\n                    start = i\n                mp[ord(s[i])] += 1\n                if mp[ord(s[i])] > 0:\n                    cnt += 1\n                i += 1\n        j += 1\n    if ans > n:\n        return '0'\n    return len(s[start:start + ans])\nfor i in range(int(input())):\n    s = input()\n    p = '123'\n    result = smallestWindow(s, p)\n    print(result)", "def shortest_sub(s):\n    n = len(s)\n    if n < 3:\n        return 0\n    count = float('inf')\n    chars = {'1': 0, '2': 0, '3': 0}\n    l = 0\n    for r in range(n):\n        chars[s[r]] += 1\n        while chars[s[l]] > 1:\n            chars[s[l]] -= 1\n            l += 1\n        if chars['1'] and chars['2'] and chars['3']:\n            count = min(count, r - l + 1)\n    return 0 if count == float('inf') else count\ncases = int(input())\nwhile cases > 0:\n    string = input()\n    print(shortest_sub(string))\n    cases -= 1", "from sys import stdin\ninp = stdin.readline\nt = int(inp().strip())\nwhile t:\n    t -= 1\n    n = inp().strip()\n    (lastOne, lastTwo, LastThree) = (-1, -1, -1)\n    bestLength = -1\n    for (i, char) in enumerate(n):\n        if char == '1':\n            lastOne = i\n            if not (lastOne == -1 or lastTwo == -1 or LastThree == -1):\n                temp = max(i, lastTwo, LastThree) - min(i, lastTwo, LastThree)\n                if bestLength >= temp or bestLength == -1:\n                    bestLength = temp\n        elif char == '2':\n            lastTwo = i\n            if not (lastOne == -1 or lastTwo == -1 or LastThree == -1):\n                temp = max(lastOne, i, LastThree) - min(lastOne, i, LastThree)\n                if bestLength >= temp or bestLength == -1:\n                    bestLength = temp\n        else:\n            LastThree = i\n            if not (lastOne == -1 or lastTwo == -1 or LastThree == -1):\n                temp = max(lastOne, lastTwo, i) - min(lastOne, lastTwo, i)\n                if bestLength >= temp or bestLength == -1:\n                    bestLength = temp\n    if bestLength == -1:\n        print(0)\n    else:\n        print(bestLength + 1)", "def solve():\n    s = input()\n    n = len(s)\n    (last_1, last_2, last_3) = (-1, -1, -1)\n    found = False\n    minn = 2000000\n    for i in range(n):\n        if s[i] == '1':\n            last_1 = i\n            if last_1 != -1 and last_2 != -1 and (last_3 != -1):\n                found = True\n                mn = min(last_2, last_3)\n                ll = i - mn + 1\n                minn = min(ll, minn)\n        elif s[i] == '2':\n            last_2 = i\n            if last_1 != -1 and last_2 != -1 and (last_3 != -1):\n                found = True\n                mn = min(last_1, last_3)\n                ll = i - mn + 1\n                minn = min(ll, minn)\n        elif s[i] == '3':\n            last_3 = i\n            if last_1 != -1 and last_2 != -1 and (last_3 != -1):\n                found = True\n                mn = min(last_2, last_1)\n                ll = i - mn + 1\n                minn = min(ll, minn)\n    if found == True:\n        print(minn)\n    else:\n        print(0)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\nfrom collections import deque\nt = int(input())\nrez = []\nfor i in range(t):\n    s = input()\n    ss = set()\n    for j in s:\n        ss.add(j)\n    if len(ss) < 3:\n        rez.append(0)\n        continue\n    else:\n        a1 = s[0]\n        i1 = 0\n        a2 = ''\n        i2 = -1\n        n = len(s)\n        ss = set()\n        for j in range(len(s)):\n            ss.add(s[j])\n            if len(ss) == 3:\n                n1 = j - i1 + 1\n                if n1 < n:\n                    n = n1\n                ss.remove(a1)\n                a1 = a2\n                a2 = s[j]\n                i1 = i2\n                i2 = j\n            elif s[j] == a1 and a2 == '':\n                i1 = j\n            elif s[j] != a1 and a2 == '':\n                a2 = s[j]\n                i2 = j\n            elif s[j] == a2:\n                i2 = j\n            elif s[j] == a1 and a2 != '':\n                aa = a2\n                a2 = a1\n                a1 = aa\n                i1 = j - 1\n                i2 = j\n        rez.append(n)\nfor i in range(len(rez)):\n    print(rez[i])", "def main():\n    t = int(input())\n    for _ in range(t):\n        nums = list(input())\n        if not ('1' in nums and '2' in nums and ('3' in nums)):\n            print(0)\n            continue\n        last_idxx = [None, None, None]\n        min_len = float('Inf')\n        for (idx, num) in enumerate(nums):\n            if num == '1':\n                last_idxx[0] = idx\n                min_len = check(idx, 1, 2, last_idxx, min_len)\n            elif num == '2':\n                last_idxx[1] = idx\n                min_len = check(idx, 0, 2, last_idxx, min_len)\n            else:\n                last_idxx[2] = idx\n                min_len = check(idx, 1, 0, last_idxx, min_len)\n            if min_len == 3:\n                break\n        print(min_len)\n\ndef check(idx, idx1, idx2, last_idxx, min_len):\n    if last_idxx[idx1] is not None and last_idxx[idx2] is not None:\n        min_len = min(idx + 1 - min(last_idxx[idx1], last_idxx[idx2]), min_len)\n    return min_len\nmain()", "for s in [*open(0)][1:]:\n    r = m = 4 ** 9\n    a = [-m] * 3\n    i = 0\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print((r < m) * r)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        inf = 10 ** 9\n        aa = [int(c) - 1 for c in SI()]\n        last = [inf] * 3\n        n = len(aa)\n        ans = inf\n        for i in range(n):\n            last[aa[i]] = i\n            if sum(last) < inf:\n                ans = min(ans, i - min(last) + 1)\n                li = last.index(min(last))\n                last[li] = inf\n        if ans == inf:\n            print(0)\n        else:\n            print(ans)\nmain()", "for s in [*open(0)][1:]:\n    a = [0] * 3\n    i = r = m = 4 ** 9\n    for d in s[:-1]:\n        a[int(d) - 1] = i\n        i += 1\n        r = min(r, i - min(a))\n    print(r % m)", "t = int(input())\nfor case in range(t):\n    s = input()\n    n = len(s)\n    if n < 3:\n        print(0)\n    else:\n        first_change = 0\n        while s[first_change] == s[first_change + 1] and first_change < n - 2:\n            first_change += 1\n        if first_change == n - 2:\n            print(0)\n        else:\n            ans = n + 1\n            (start, mid) = (s[first_change], s[first_change + 1])\n            mid_count = 1\n            for i in range(first_change + 2, n):\n                next = s[i]\n                if next == mid:\n                    mid_count += 1\n                elif next == start:\n                    (mid, start) = (next, mid)\n                    mid_count = 1\n                else:\n                    ans = min(ans, mid_count + 2)\n                    (mid, start) = (next, mid)\n                    mid_count = 1\n            if ans == n + 1:\n                print(0)\n            else:\n                print(ans)", "def solve():\n    s = input()\n    n = len(s)\n    i1 = -1\n    i2 = -1\n    i3 = -1\n    res = n + 1\n    for i in range(n):\n        if s[i] == '1':\n            i1 = i\n        if s[i] == '2':\n            i2 = i\n        if s[i] == '3':\n            i3 = i\n        if i1 != -1 and i2 != -1 and (i3 != -1):\n            x = max(i1, i2, i3) - min(i1, i2, i3) + 1\n            if x < res:\n                res = x\n    if res > n:\n        return 0\n    return res\n\ndef main():\n    t = int(input())\n    while t:\n        print(solve())\n        t -= 1\nmain()", "for _ in range(int(input())):\n    s = input()\n    a = [0, 0, 0]\n    ans = 1000000.0\n    j = 1\n    for i in s:\n        if i == '1':\n            a[0] = j\n        elif i == '2':\n            a[1] = j\n        else:\n            a[2] = j\n        if all(a):\n            ans = min(ans, j - min(a) + 1)\n        j += 1\n    if ans == 1000000.0:\n        print(0)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    s = input()\n    found = {}\n    i = 0\n    while len(found) < 3 and i < len(s):\n        if s[i] in found:\n            found[s[i]] += 1\n        else:\n            found[s[i]] = 1\n        i += 1\n    if len(found) < 3:\n        print(0)\n        continue\n    j = i\n    i = 0\n    while True:\n        while len(found) == 3:\n            found[s[i]] -= 1\n            if found[s[i]] == 0:\n                del found[s[i]]\n            i += 1\n        if j == len(s):\n            break\n        if s[j] in found:\n            found[s[j]] += 1\n        else:\n            found[s[j]] = 1\n        j += 1\n        found[s[i]] -= 1\n        if found[s[i]] == 0:\n            del found[s[i]]\n        i += 1\n    print(j - i + 1)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    (i, j) = (0, 1)\n    minLen = float('inf')\n    while j < len(n) - 1:\n        if n[i] != n[j] != n[j + 1] != n[i]:\n            minLen = min(minLen, j + 1 - i + 1)\n            i = j\n        elif n[j + 1] == n[i] or n[j] == n[i]:\n            i = j\n        j += 1\n    print(minLen if minLen != float('inf') else 0)", "import math\nans = []\nfor i in range(int(input())):\n    s = input()\n    la = -10000000000.0\n    lb = -10000000000.0\n    lc = -10000000000.0\n    an = 10000000000.0\n    for c in range(len(s)):\n        if s[c] == '1':\n            la = c\n        if s[c] == '2':\n            lb = c\n        if s[c] == '3':\n            lc = c\n        if la >= 0 and lb >= 0 and (lc >= 0):\n            an = min(an, c - min(la, lb, lc) + 1)\n    ans += [an] if an != 10000000000.0 else [0]\nfor an in ans:\n    print(an)", "def sol(s):\n    s = list(s)\n    dic = {}\n    l = 0\n    for (i, x) in enumerate(s):\n        if x in dic:\n            dic[x] = i\n        else:\n            dic.update({x: i})\n        if len(dic) == 3:\n            M = max([dic['1'], dic['2'], dic['3']])\n            m = min([dic['1'], dic['2'], dic['3']])\n            if M - m + 1 == 3:\n                return 3\n            elif l == 0:\n                l = M - m + 1\n            else:\n                l = min(l, M - m + 1)\n    return l\nt = int(input())\nfor _ in range(t):\n    s = input()\n    v = sol(s)\n    print(v)", "for t in range(int(input())):\n    s = input()\n    if '1' not in s or '2' not in s or '3' not in s:\n        print(0)\n        continue\n    s_len = len(s)\n    ans = float('inf')\n    hash_set = {'1': 0, '2': 0, '3': 0}\n    j = 0\n    for i in range(s_len):\n        hash_set[s[i]] += 1\n        while hash_set['1'] > 0 and hash_set['2'] > 0 and (hash_set['3'] > 0) and (j < i):\n            hash_set[s[j]] -= 1\n            ans = min(ans, i - j + 1)\n            j += 1\n    print(ans)", "def find_shortest_contiguous_substring(string):\n    i = 0\n    j = 0\n    contains_three = False\n    min_length = -1\n    character_counts = {'1': 0, '2': 0, '3': 0}\n    while i <= j and j <= len(string):\n        if contains_three:\n            character_counts[string[i]] -= 1\n            i += 1\n        else:\n            if j >= len(string):\n                break\n            character_counts[string[j]] += 1\n            j += 1\n        if character_counts['1'] > 0 and character_counts['2'] > 0 and (character_counts['3'] > 0):\n            contains_three = True\n            if min_length == -1 or j - i < min_length:\n                min_length = j - i\n        else:\n            contains_three = False\n    return min_length if min_length != -1 else 0\nfor _ in range(int(input())):\n    string = input()\n    print(find_shortest_contiguous_substring(string))", "for i in range(int(input())):\n    a = input()\n    (p, q, r) = (-1, -1, -1)\n    n = len(a) + 1\n    m = 0\n    for j in range(n - 1):\n        if a[j] == '1':\n            p = j\n        elif a[j] == '2':\n            q = j\n        else:\n            r = j\n        if p >= 0 and q >= 0 and (r >= 0):\n            z = max([p, q, r]) - min([p, q, r]) + 1\n            if z < n:\n                n = z\n                m = 1\n        if n == 3:\n            break\n    if m == 0:\n        print(0)\n    else:\n        print(n)", "def solve(s):\n    index1 = -1\n    index2 = -1\n    index3 = -1\n    best_length = 300000\n    for i in range(len(s)):\n        e = s[i]\n        if e == '1':\n            index1 = i\n        elif e == '2':\n            index2 = i\n        else:\n            index3 = i\n        if not (index1 == -1 or index2 == -1 or index3 == -1):\n            length = max(index1, index2, index3) - min(index1, index2, index3) + 1\n            if length < best_length:\n                best_length = length\n    if best_length == 300000:\n        return 0\n    return best_length\nn = int(input())\nfor i in range(n):\n    print(solve(input()))", "import sys\nimport os\nimport heapq\nimport math\ntry:\n    path = './file/input.txt'\n    if os.path.exists(path):\n        sys.stdin = open(path, 'r')\nexcept:\n    pass\nt = int(input())\n\ndef printd(value):\n    pass\n\ndef case():\n    string = input()\n    one = -1\n    two = -1\n    three = -1\n    result = len(string) + 1\n    for (index, c) in enumerate(string):\n        if c == '1':\n            one = 0\n        elif index > 0 and one >= 0:\n            one = one + 1\n        if c == '2':\n            two = 0\n        elif index > 0 and two >= 0:\n            two = two + 1\n        if c == '3':\n            three = 0\n        elif index > 0 and three >= 0:\n            three = three + 1\n        if one >= 0 and two >= 0 and (three >= 0):\n            result = min(result, max(one, two, three))\n    if result == len(string) + 1:\n        result = -1\n    print(result + 1)\nfor _ in range(t):\n    case()", "for _ in range(int(input())):\n    fef = input()\n    (sus, dp) = (200001, [0, 0, 0])\n    for j in range(len(fef)):\n        dp[int(fef[j]) - 1] = j + 1\n        if all(dp):\n            sus = min(sus, max(dp) - min(dp) + 1)\n            if sus == 3:\n                break\n            dp[dp.index(min(dp))] = 0\n    print(sus if sus != 200001 else 0)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    ones = -1\n    twos = -1\n    threes = -1\n    ans = 1e+20\n    for ind in range(len(s)):\n        if s[ind] == '1':\n            ones = ind\n        elif s[ind] == '2':\n            twos = ind\n        else:\n            threes = ind\n        if min(ones, twos, threes) != -1 and ind - min(ones, twos, threes) < ans:\n            ans = max(ones, twos, threes) - min(ones, twos, threes)\n    if ans != 1e+20:\n        print(ans + 1)\n    else:\n        print(0)", "def sol(s):\n    if s == '123' or s == '213' or s == '312' or (s == '132') or (s == '231') or (s == '321'):\n        return 3\n    ans = float('inf')\n    n = len(s)\n    a = b = c = -1\n    for i in range(n):\n        if s[i] == '1':\n            a = i\n        if s[i] == '2':\n            b = i\n        if s[i] == '3':\n            c = i\n        if a >= 0 and b >= 0 and (c >= 0):\n            x = min(a, b, c)\n            y = max(a, b, c)\n            ans = min(ans, y - x + 1)\n    if ans == float('inf'):\n        return 0\n    return ans\n\ndef main():\n    T = int(input())\n    while T is not 0:\n        s = input()\n        print(sol(s))\n        T -= 1\nmain()", "for _ in range(int(input())):\n    s = input()\n    first = s[0]\n    length = 1\n    second = ''\n    best = 2000000\n    for i in range(1, len(s)):\n        if s[i] != first and second == '':\n            second = s[i]\n            length += 1\n        elif s[i] == first and second != '':\n            (first, second) = (second, first)\n            length = 2\n        elif s[i] == second:\n            length += 1\n        elif s[i] != first and s[i] != second:\n            length += 1\n            best = min(best, length)\n            (first, second) = (second, s[i])\n            length = 2\n    print(best) if best != 2000000 else print(0)", "T = int(input())\n\ndef findMin(s):\n    k = 3\n    n = len(s)\n    st = 0\n    end = 0\n    cnt = {'1': 0, '2': 0, '3': 0}\n    di = 0\n    currlen = 0\n    minlen = n\n    startInd = -1\n    while end < n:\n        cnt[s[end]] += 1\n        if cnt[s[end]] == 1:\n            di += 1\n        if di > k:\n            while st < end and di > k:\n                if cnt[s[st]] == 1:\n                    di -= 1\n                cnt[s[st]] -= 1\n                st += 1\n        if di == k:\n            while st < end and cnt[s[st]] > 1:\n                cnt[s[st]] -= 1\n                st += 1\n            currlen = end - st + 1\n            if currlen < minlen:\n                minlen = currlen\n                startInd = st\n        end += 1\n    if di != k:\n        return 0\n    return minlen\nfor t in range(T):\n    string = input()\n    print(findMin(string))", "for __ in range(int(input())):\n    s = input()\n    n = len(s)\n    a = 1000000\n    b = 1000000\n    c = 1000000\n    l = []\n    p = []\n    j = 0\n    for i in range(n):\n        if s[i] == '1':\n            a = i\n            if i == j:\n                h = a\n        elif s[i] == '2':\n            b = i\n            if i == j:\n                h = b\n        else:\n            c = i\n            if i == j:\n                h = c\n        if a != 1000000 and b != 1000000 and (c != 1000000):\n            p.append(a)\n            p.append(b)\n            p.append(c)\n            p.sort()\n            x = p[len(p) - 1] - p[0] + 1\n            if x == 3:\n                l.append(x)\n                break\n            l.append(x)\n            if h == a:\n                a = 1000000\n            if h == b:\n                b = 1000000\n            if h == a:\n                b = 1000000\n            p.clear()\n    if len(l) == 0:\n        print(0)\n    else:\n        print(min(l))", "t = int(input())\nwhile t:\n    t = t - 1\n    s = input()\n    flag = 0\n    l = []\n    if '1' not in s:\n        print(0)\n        continue\n    elif '2' not in s:\n        print(0)\n        continue\n    elif '3' not in s:\n        print(0)\n        continue\n    else:\n        k = []\n        ans = 0\n        w = 0\n        while w < len(s):\n            if s[w] not in k:\n                k.append(s[w])\n                ans += 1\n            elif s[w] in k and len(k) != 1:\n                if k[-1] == s[w]:\n                    ans += 1\n                else:\n                    ans = 2\n                    temp = k[-1]\n                    k = [temp, s[w]]\n            if len(k) == 3:\n                l.append(ans)\n                k = [k[-2], k[-1]]\n                ans = 2\n            w += 1\n    if l == []:\n        print(0)\n    else:\n        print(min(l))", "def main():\n    s = input()\n    best = 10 ** 9\n    (c, n) = ([], len(s))\n    for i in s:\n        if len(c) == 0 or c[-1][0] != i:\n            c.append([i, 1])\n        else:\n            c[-1][1] += 1\n    for i in range(1, len(c) - 1):\n        if c[i - 1][0] != c[i + 1][0]:\n            best = min(best, c[i][1] + 2)\n    if best > n:\n        print('0')\n    else:\n        print(best)\nfor _ in range(int(input())):\n    main()"]