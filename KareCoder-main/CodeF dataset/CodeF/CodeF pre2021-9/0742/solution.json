["import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef tox(s, k, c9):\n    if c9:\n        back = 9 - k + c9\n        s -= back\n        res = str(back)\n        if s < 0:\n            return -1\n        if s == 0:\n            return int(res)\n        back = min(8, s)\n        s -= back\n        res += str(back)\n    else:\n        back = min(9 - k, s)\n        s -= back\n        res = str(back)\n    if s == 0:\n        return int(res[::-1])\n    (c9, s) = divmod(s, 9)\n    res += '9' * c9\n    if s:\n        res += str(s)\n    return int(res[::-1])\n\ndef main():\n    for _ in range(II()):\n        (n, k) = MI()\n        s = k * (k + 1) // 2\n        if n < s:\n            print(-1)\n            continue\n        n -= s + 9\n        x = -1\n        for i in range(k + 1):\n            n += 9\n            if n % (k + 1):\n                continue\n            d = n // (k + 1)\n            x = tox(d, k, i)\n            if x != -1:\n                break\n        print(x)\nmain()", "t = int(input())\nbuf = []\nINF = 10 ** 18\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    base = n - k * (k + 1) // 2\n    ans = INF\n    l = k + 1\n    if base >= 0 and base % l == 0:\n        ini = base // l\n        if ini <= 9 - k:\n            ans = min(ans, ini)\n        else:\n            tmp = ini - (9 - k)\n            tmps = str(9 - k)\n            while tmp:\n                d = min(9, tmp)\n                tmp -= d\n                tmps += str(d)\n            ans = min(ans, int(tmps[::-1]))\n    for d in range(1, 16):\n        for i in range(1, l):\n            new_base = base + d * 9 * i\n            if new_base < 0 or new_base % l != 0:\n                continue\n            ini = new_base // l\n            tmp = ini - 9 * (d - 1) - (10 - (l - i))\n            tmps = str(10 - (l - i)) + '9' * (d - 1)\n            if tmp < 0:\n                continue\n            if tmp <= 8:\n                tmps += str(tmp)\n                ans = min(ans, int(tmps[::-1]))\n                continue\n            tmp -= 8\n            tmps += '8'\n            while tmp:\n                d = min(9, tmp)\n                tmp -= d\n                tmps += str(d)\n            ans = min(ans, int(tmps[::-1]))\n    if ans == INF:\n        ans = -1\n    buf.append(ans)\nprint('\\n'.join(map(str, buf)))", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, k) = I()\n    if k == 0:\n        a = '9' * (n // 9) + (str(n % 9) if n % 9 else '')\n        print(a[::-1])\n        continue\n    mi = (k + 1) * k // 2\n    if n < mi:\n        print(-1)\n    else:\n        an = -1\n        for i in range(10):\n            mi = 0\n            for j in range(k + 1):\n                mi += sum((int(p) for p in str(i + j)))\n            if n < mi or (n - mi) % (k + 1):\n                continue\n            a = str(i)\n            r = (n - mi) // (k + 1)\n            if i + k >= 10:\n                a += str(min(8, r))\n                r -= min(8, r)\n            while r:\n                a += str(min(9, r))\n                r -= min(9, r)\n            if an == -1:\n                an = int(a[::-1])\n            else:\n                an = min(an, int(a[::-1]))\n        print(an)", "m = []\nfor k in range(10):\n    t = []\n    for i in range(10):\n        a = 0\n        for j in range(k + 1):\n            a += (i + j) % 10 + (i + j) // 10\n        t.append(a)\n    m.append(t)\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = m[k]\n    ans = []\n    for i in range(10):\n        if n - l[i] < 0 or (n - l[i]) % (k + 1):\n            continue\n        p = (n - l[i]) // (k + 1)\n        if p // 9 > 0 and i + k > 9:\n            a = int(str(p % 9 + 1) + '9' * (p // 9 - 1) + '8')\n        elif p // 9 > 0:\n            a = int(str(p % 9) + '9' * (p // 9))\n        else:\n            a = p % 9\n        ans.append(10 * a + i)\n    if len(ans) == 0:\n        print(-1)\n        continue\n    print(min(ans))", "mat = [[0] * 10 for i in range(10)]\n\ndef val(n):\n    r = 0\n    while n:\n        (r, n) = (r + n % 10, n // 10)\n    return r\nfor k in range(10):\n    for s in range(10):\n        mat[s % 10][k] = sum([val(n) for n in range(s, s + k + 1)])\n\ndef get_k(k):\n    return [m[k] for m in mat]\n\ndef get_value(n, k, acc=0):\n    n_n = n + 1\n    r = 0\n    while n:\n        (r, n) = (r + n % 10, n // 10)\n    if k <= 0:\n        return acc + r\n    return get_value(n_n, k - 1, acc + r)\nt = int(input())\nfor _ in range(t):\n    data = input().split(' ')\n    n = int(data[0])\n    k = int(data[1])\n    results = []\n    for (index, i) in enumerate(get_k(k)):\n        if i > n:\n            continue\n        rest = n - i\n        rest = rest / (k + 1)\n        nn = []\n        if rest - 8 >= 0 and k > 9 - index:\n            nn.append(8)\n            rest -= 8\n        while rest - 9 >= 0:\n            nn.append(9)\n            rest -= 9\n        x = int(str(int(rest)) + ''.join([str(n_) for n_ in nn[::-1]]) + str(index))\n        val = get_value(int(x), k)\n        if val == n:\n            results.append(x)\n    if len(results) == 0:\n        print(-1)\n    else:\n        print(min(results))", "for ss in range(int(input())):\n    (n, k) = input().strip().split()\n    n = int(n)\n    k = int(k)\n    list = []\n    ilist = []\n    klaar = True\n    for i in range(10):\n        m = 0\n        for t in range(k + 1):\n            s = i + t\n            if s >= 10:\n                s = s - 9\n            m = m + s\n        if i == 0 and m > n:\n            print(-1)\n            klaar = False\n            break\n        if (n - m) % (k + 1) == 0 and n > m:\n            list.append(m)\n            ilist.append(i)\n        if n == m:\n            print(i)\n            klaar = False\n            break\n        if not klaar:\n            break\n    if klaar:\n        if not list:\n            print(-1)\n            continue\n        else:\n            i = ilist[list.index(max(list))]\n            if i + k < 10 or (i + k >= 10 and int((n - max(list)) / (k + 1)) < 9):\n                lom = int((n - max(list)) / (k + 1))\n                print(int(str(lom % 9) + lom // 9 * '9' + str(i)))\n            else:\n                lom = int((n - max(list)) / (k + 1) - 8)\n                print(int(str(lom % 9) + lom // 9 * '9' + '8' + str(i)))", "MAX = 150\nINF = float('inf')\n\ndef compute_suffix(digit_sum):\n    digit_sum += 1\n    digit_count = digit_sum // 9\n    return 10 ** digit_count * (digit_sum % 9) + (10 ** digit_count - 1) - 1\n\ndef compute_prefix_sum(first_digit, prefix_len, num_count):\n    pre_count = min(num_count, 10 - first_digit)\n    result = 9 * prefix_len * pre_count + (2 * first_digit + pre_count - 1) * pre_count // 2\n    result += (num_count - pre_count) * (num_count - pre_count + 1) // 2\n    return result\n\ndef solve(suffix_table, digit_sum, num_count):\n    result = INF\n    for first_digit in range(min(10, digit_sum + 1)):\n        for prefix_len in range((digit_sum - first_digit) // 9 + 1):\n            prefix_sum = compute_prefix_sum(first_digit, prefix_len, num_count)\n            if prefix_sum > digit_sum or (digit_sum - prefix_sum) % num_count != 0:\n                continue\n            suffix = suffix_table[(digit_sum - prefix_sum) // num_count]\n            candidate = suffix * 10 ** (prefix_len + 1) + (10 ** prefix_len - 1) * 10 + first_digit\n            result = min(result, candidate)\n    return result if result != INF else -1\nsuffix_table = [compute_suffix(n) for n in range(MAX + 1)]\ntest_count = int(input())\nfor _ in range(test_count):\n    (digit_sum, num_count) = map(int, input().split())\n    print(solve(suffix_table, digit_sum, num_count + 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = float('inf')\n    for m in range(20):\n        for l in range(10):\n            if k + l <= 9:\n                dsum = n - k * (k + 1) // 2\n                if dsum % (k + 1) == 0:\n                    f = dsum // (k + 1)\n                    f -= l\n                    if f >= 0:\n                        if 9 > f:\n                            test = str(f) * (f != 0) + str(l)\n                            ans = min(ans, int(test))\n                        else:\n                            q = f // 9\n                            r = f % 9\n                            test = str(r) * (r != 0) + '9' * q + str(l)\n                            test = int(test)\n                            ans = min(test, ans)\n            else:\n                dsum = n - (k + l - 9) * (1 - 9 * m - l) - (9 - l) * (10 - l) // 2 - (k + l - 9) * (k + l - 10) // 2\n                if dsum % (k + 1) == 0:\n                    f = dsum // (k + 1)\n                    f -= 9 * m + l\n                    if f >= 0:\n                        if 9 > f:\n                            test = str(f) * (f != 0) + '9' * m + str(l)\n                            ans = min(ans, int(test))\n                        else:\n                            f -= 8\n                            q = f // 9\n                            r = f % 9\n                            test = str(r) * (r != 0) + '9' * q + '8' + '9' * m + str(l)\n                            test = int(test)\n                            ans = min(test, ans)\n    if ans != float('inf'):\n        print(ans)\n    else:\n        print(-1)", "def get(s):\n    return str(s % 9) + '9' * (s // 9)\nfor tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    k += 1\n    bst = 10 ** 100\n    for d in range(10):\n        ends = 0\n        for i in range(k):\n            ends += (d + i) % 10\n        if ends > n:\n            continue\n        if d + k > 10:\n            for cnt in range(12):\n                s = 9 * cnt * (10 - d)\n                if s > n - ends:\n                    break\n                for nd in range(9):\n                    ns = s + (10 - d) * nd + (k - (10 - d)) * (nd + 1)\n                    if ns > n - ends:\n                        break\n                    if (n - ends - ns) % k == 0:\n                        bst = min(bst, int(get((n - ends - ns) // k) + str(nd) + '9' * cnt + str(d)))\n        elif (n - ends) % k == 0:\n            bst = min(bst, int(get((n - ends) // k) + str(d)))\n    print(-1 if bst == 10 ** 100 else bst)", "from sys import stdin, stdout\n\ndef cont(n):\n    res = 0\n    if n < 8:\n        return n\n    n -= 8\n    res += n % 9\n    n -= n % 9\n    while n:\n        res *= 10\n        res += min(n, 9)\n        n -= min(n, 9)\n    res = res * 10 + 8\n    return res\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = list(map(int, stdin.readline().split()))\n    ans = 10 ** 17 + 1\n    po = 1\n    for n9 in range(0, 17, 1):\n        po *= 10\n        for d in range(0, 10, 1):\n            a = min(10 - d, k + 1)\n            s = n - n9 * 9 * a - (k + 1 - a)\n            for i in range(k + 1):\n                s -= (i + d) % 10\n            if s >= 0 and s % (k + 1) == 0:\n                ans = min(ans, po * cont(s // (k + 1)) + (po - 10 + d))\n    if ans == 10 ** 17 + 1:\n        print(-1)\n    else:\n        print(ans)", "from sys import stdin, stdout\n\ndef cont(n):\n    res = 0\n    if n < 8:\n        return n\n    n -= 8\n    res += n % 9\n    n -= n % 9\n    while n:\n        res *= 10\n        res += min(n, 9)\n        n -= min(n, 9)\n    res = res * 10 + 8\n    return res\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = list(map(int, stdin.readline().split()))\n    ans = 10 ** 17 + 1\n    po = 1\n    for n9 in range(0, 17, 1):\n        po *= 10\n        for d in range(0, 10, 1):\n            a = min(10 - d, k + 1)\n            s = n - n9 * 9 * a - (k + 1 - a)\n            for i in range(k + 1):\n                s -= (i + d) % 10\n            if s >= 0 and s % (k + 1) == 0:\n                ans = min(ans, po * cont(s // (k + 1)) + (po - 10 + d))\n    if ans == 10 ** 17 + 1:\n        print(-1)\n    else:\n        print(ans)", "def getstr(s):\n    return str(s % 9) + '9' * (s // 9)\nINF = int(1e+233)\nfor tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    k += 1\n    ans = INF\n    for d in range(10):\n        ends = 0\n        for i in range(k):\n            ends += (d + i) % 10\n        if ends > n:\n            continue\n        if d + k > 10:\n            for cnt in range(12):\n                s = 9 * cnt * (10 - d)\n                if s > n - ends:\n                    break\n                for nd in range(9):\n                    ns = s + (10 - d) * nd + (k - (10 - d)) * (nd + 1)\n                    if ns > n - ends:\n                        break\n                    if (n - ends - ns) % k == 0:\n                        ans = min(ans, int(getstr((n - ends - ns) // k) + str(nd) + '9' * cnt + str(d)))\n        elif (n - ends) % k == 0:\n            ans = min(ans, int(getstr((n - ends) // k) + str(d)))\n    print(-1 if ans == INF else ans)", "def func(x, d, n, k):\n    ans = str(x)\n    for i in range(d):\n        ans = '9' + ans\n    for i in range(k + 1):\n        y = (x + i) % 10\n        if y >= x:\n            n -= d * 9 + y\n        else:\n            n -= 1 + y\n        if n < 0:\n            return -1\n    if n % (k + 1) != 0:\n        return -1\n    p = int(n / (k + 1))\n    if p >= 8:\n        ans = '8' + ans\n        n -= (k + 1) * 8\n        n = int(n / (k + 1))\n        v = int(n / 9)\n        for i in range(v):\n            ans = '9' + ans\n        if n - 9 * v != 0:\n            ans = str(n - 9 * v) + ans\n    else:\n        ans = str(p) + ans\n    return int(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    ans = -1\n    for i in range(10):\n        for j in range(18):\n            res = func(i, j, n, k)\n            if res != -1 and ans == -1:\n                ans = res\n            elif res != -1:\n                ans = min(ans, res)\n    print(ans)", "def get(sum):\n    if sum < 9:\n        return sum\n    sum -= 8\n    ret = sum % 9\n    sum = sum - sum % 9\n    while sum > 0:\n        ret = ret * 10 + 9\n        sum -= 9\n    return ret * 10 + 8\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = [int(i) for i in input().split()]\n    ok = 0\n    ans = 0\n    for dig in range(10):\n        for i in range(20):\n            d = dig\n            already = 0\n            cur = d + 9 * i\n            for j in range(k + 1):\n                already += cur\n                d += 1\n                if d <= 9:\n                    cur += 1\n                else:\n                    d = 0\n                    cur = cur - 9 * (i + 1) + 1\n            rem = n - already\n            d = dig\n            if rem >= 0 and rem % (k + 1) == 0:\n                req = rem // (k + 1)\n                temp = get(req)\n                for z in range(i):\n                    temp = temp * 10 + 9\n                temp = temp * 10 + d\n                if ok == 0:\n                    ok = 1\n                    ans = temp\n                else:\n                    ans = min(ans, temp)\n    if ok == 1:\n        print(ans)\n    else:\n        print(-1)", "def get(sum):\n    if sum < 9:\n        return sum\n    sum -= 8\n    ret = sum % 9\n    sum = sum - sum % 9\n    while sum > 0:\n        ret = ret * 10 + 9\n        sum -= 9\n    return ret * 10 + 8\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = [int(i) for i in input().split()]\n    ok = 0\n    ans = 0\n    for dig in range(10):\n        for i in range(20):\n            d = dig\n            already = 0\n            cur = d + 9 * i\n            for j in range(k + 1):\n                already += cur\n                d += 1\n                if d <= 9:\n                    cur += 1\n                else:\n                    d = 0\n                    cur = cur - 9 * (i + 1) + 1\n            rem = n - already\n            d = dig\n            if rem >= 0 and rem % (k + 1) == 0:\n                req = rem // (k + 1)\n                temp = get(req)\n                for z in range(i):\n                    temp = temp * 10 + 9\n                temp = temp * 10 + d\n                if ok == 0:\n                    ok = 1\n                    ans = temp\n                else:\n                    ans = min(ans, temp)\n    if ok == 1:\n        print(ans)\n    else:\n        print(-1)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                pre = list(map(int, list(str(j))))\n                s = sum(pre)\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                anspre = int(tail + '0' + str(i)) if i < 10 else int(tail + str(i))\n                ans = min(ans, anspre)\n        print(-1) if ans == INF else print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                pre = list(map(int, list(str(j))))\n                s = sum(pre)\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                anspre = int(tail + '0' + str(i)) if i < 10 else int(tail + str(i))\n                ans = min(ans, anspre)\n        print(-1) if ans == INF else print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                s = sum(list(map(int, list(str(j)))))\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                anspre = int(tail + '0' + str(i)) if i < 10 else int(tail + str(i))\n                ans = min(ans, anspre)\n        print(-1) if ans == INF else print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                val += sum(list(map(int, list(str(j)))))\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n        print(-1) if ans == INF else print(ans)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "from sys import setrecursionlimit as srl\nsrl(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                pre = list(map(int, list(str(j))))\n                s = sum(pre)\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                if i < 10:\n                    anspre = int(tail + '0' + str(i))\n                else:\n                    anspre = int(tail + str(i))\n                ans = min(ans, anspre)\n        if ans == INF:\n            print(-1)\n        else:\n            print(ans)\nmain()", "from sys import setrecursionlimit as srl\nsrl(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                pre = list(map(int, list(str(j))))\n                s = sum(pre)\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                if i < 10:\n                    anspre = int(tail + '0' + str(i))\n                else:\n                    anspre = int(tail + str(i))\n                ans = min(ans, anspre)\n        if ans == INF:\n            print(-1)\n        else:\n            print(ans)\nmain()", "from sys import setrecursionlimit as srl\nsrl(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7\nINF = float('inf')\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        ans = INF\n        for i in range(100 - K):\n            val = 0\n            for j in range(i, i + K + 1):\n                pre = list(map(int, list(str(j))))\n                s = sum(pre)\n                val += s\n            if (N - val) % (K + 1) == 0 and N >= val:\n                x = int((N - val) // (K + 1))\n                tail = str(x % 9) + str('9') * int(x // 9)\n                anspre = int(tail + '0' + str(i)) if i < 10 else int(tail + str(i))\n                ans = min(ans, anspre)\n        print(-1) if ans == INF else print(ans)\nmain()", "from sys import setrecursionlimit as srl\nsrl(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for j in range(100 - K):\n        val = 0\n        for i in range(j, j + K + 1):\n            val += sum(list(map(int, list(str(i)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(j)) if j < 10 else int(tail + str(j)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = float('inf')\n    for i in range(100 - K):\n        val = 0\n        for j in range(i, i + K + 1):\n            val += sum(list(map(int, list(str(j)))))\n        if (N - val) % (K + 1) == 0 and N >= val:\n            x = int((N - val) // (K + 1))\n            tail = str(x % 9) + str('9') * int(x // 9)\n            ans = min(ans, int(tail + '0' + str(i)) if i < 10 else int(tail + str(i)))\n    print(-1) if ans == float('inf') else print(ans)", "import sys\n\ndef gen1(n):\n    base = 10 ** n - 1\n    yield base\n    for i in range(0, n):\n        yield (base - 10 ** i)\n\ndef gen2(n):\n    for i in range(n):\n        for x in gen1(i):\n            for j in range(0, 10):\n                yield (j * 10 ** i + x)\n\ndef dsum(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\ndef dsuminv(n):\n    h = n // 9\n    r = n % 9 + 1\n    return r * 10 ** h - 1\nh = {}\nfor x in gen2(15):\n    for j in range(19):\n        h[10 * x + j] = dsum(10 * x + j)\nkk = sorted(h.keys())\n\ndef solve(n, k):\n    if n < k * (k + 1) // 2:\n        return -1\n    if k == 0:\n        return dsuminv(n)\n    rs = sum((h[kk[i]] for i in range(k + 1)))\n    for j in range(len(kk) - k - 1):\n        if n < 20 and j > 200:\n            break\n        if rs == n and kk[j + k] == kk[j] + k:\n            return kk[j]\n        rs -= h[kk[j]]\n        rs += h[kk[j + k + 1]]\n    return -1\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    print(solve(n, k))"]