["import sys\ninput = sys.stdin.readline\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\n\ndef solv():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n\n    def dfs(i, p, l0, l1, dp0, dp1, adj):\n        for j in adj[i]:\n            if j != p:\n                dfs(j, i, l0, l1, dp0, dp1, adj)\n        dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n        dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solv()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, d, dp0, dp1, l, r):\n    for neighbor in d[u]:\n        if neighbor != p:\n            dfs(neighbor, u, d, dp0, dp1, l, r)\n    dp0[p] += max(dp0[u] + abs(l[p] - l[u]), dp1[u] + abs(l[p] - r[u]))\n    dp1[p] += max(dp0[u] + abs(r[p] - l[u]), dp1[u] + abs(r[p] - r[u]))\n\ndef solve():\n    n = int(input())\n    (l, r, dp0, dp1) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l[i + 1] = x\n        r[i + 1] = y\n    d = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        d[u].append(v)\n        d[v].append(u)\n    dfs(1, 0, d, dp0, dp1, l, r)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, d, dp0, dp1, l, r):\n    for neighbor in d[u]:\n        if neighbor != p:\n            dfs(neighbor, u, d, dp0, dp1, l, r)\n    dp0[p] += max(dp0[u] + abs(l[p] - l[u]), dp1[u] + abs(l[p] - r[u]))\n    dp1[p] += max(dp0[u] + abs(r[p] - l[u]), dp1[u] + abs(r[p] - r[u]))\n\ndef solve():\n    n = int(input())\n    (l, r, dp0, dp1) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l[i + 1] = x\n        r[i + 1] = y\n    d = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        d[u].append(v)\n        d[v].append(u)\n    dfs(1, 0, d, dp0, dp1, l, r)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(i, p, l0, l1, dp0, dp1, adj):\n    for j in adj[i]:\n        if j != p:\n            dfs(j, i, l0, l1, dp0, dp1, adj)\n    dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n    dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(ls, vs, dp_l, dp_v, adj, node, parent):\n    for child in adj[node]:\n        if child != parent:\n            dfs(ls, vs, dp_l, dp_v, adj, child, node)\n    dp_l[parent] += max(dp_l[node] + abs(ls[parent] - ls[node]), dp_v[node] + abs(ls[parent] - vs[node]))\n    dp_v[parent] += max(dp_l[node] + abs(vs[parent] - ls[node]), dp_v[node] + abs(vs[parent] - vs[node]))\n    pass\n\ndef solve():\n    n = int(input())\n    ls = [0] * (n + 1)\n    vs = [0] * (n + 1)\n    dp_l = [0] * (n + 1)\n    dp_v = [0] * (n + 1)\n    for i in range(1, n + 1):\n        (ls[i], vs[i]) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(1, n):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(ls, vs, dp_l, dp_v, adj, 1, 0)\n    print(max(dp_l[1], dp_v[1]))\n    pass\nfor _ in range(int(input())):\n    solve()", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\n\ndef solve():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n\n    def dfs(i, p, l0, l1, dp0, dp1, adj):\n        for j in adj[i]:\n            if j != p:\n                dfs(j, i, l0, l1, dp0, dp1, adj)\n        dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n        dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "from heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\n\ndef solv():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n\n    def dfs(i, p, l0, l1, dp0, dp1, adj):\n        for j in adj[i]:\n            if j != p:\n                dfs(j, i, l0, l1, dp0, dp1, adj)\n        dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n        dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solv()", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nsys.setrecursionlimit(10000000)\n\ndef solv():\n    n = int(input())\n    (l0, l1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (l0[i], l1[i]) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    (dp1, dp0) = ([0] * (n + 1), [0] * (n + 1))\n\n    def dfs(i, p, l0, l1, dp0, dp1, adj):\n        for j in adj[i]:\n            if j != p:\n                dfs(j, i, l0, l1, dp0, dp1, adj)\n        dp0[p] += max(dp0[i] + abs(l0[p] - l0[i]), dp1[i] + abs(l0[p] - l1[i]))\n        dp1[p] += max(dp0[i] + abs(l1[p] - l0[i]), dp1[i] + abs(l1[p] - l1[i]))\n    dfs(1, 0, l0, l1, dp0, dp1, adj)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solv()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, adj, dp0, dp1, lr0, lr1):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, adj, dp0, dp1, lr0, lr1)\n    dp0[p] += max(dp0[u] + abs(lr0[p] - lr0[u]), dp1[u] + abs(lr0[p] - lr1[u]))\n    dp1[p] += max(dp0[u] + abs(lr1[p] - lr0[u]), dp1[u] + abs(lr1[p] - lr1[u]))\n\ndef solve():\n    n = int(input())\n    lr0 = [0] * (n + 1)\n    lr1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        (lr0[i], lr1[i]) = map(int, input().split())\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, adj, dp0, dp1, lr0, lr1)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, dp0, dp1, adj, lB, rB):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, dp0, dp1, adj, lB, rB)\n    dp0[p] += max(dp0[u] + abs(lB[p] - lB[u]), dp1[u] + abs(lB[p] - rB[u]))\n    dp1[p] += max(dp0[u] + abs(rB[p] - lB[u]), dp1[u] + abs(rB[p] - rB[u]))\n\ndef solve():\n    n = int(input())\n    lB = [0 for x in range(n + 1)]\n    rB = [0 for x in range(n + 1)]\n    dp0 = [0 for x in range(n + 1)]\n    dp1 = [0 for x in range(n + 1)]\n    for i in range(1, n + 1):\n        (lB[i], rB[i]) = map(int, input().split())\n    adj = [[] for x in range(n + 1)]\n    for k in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, dp0, dp1, adj, lB, rB)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, adj, dp0, dp1, lr0, lr1):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, adj, dp0, dp1, lr0, lr1)\n    dp0[p] += max(dp0[u] + abs(lr0[p] - lr0[u]), dp1[u] + abs(lr0[p] - lr1[u]))\n    dp1[p] += max(dp0[u] + abs(lr1[p] - lr0[u]), dp1[u] + abs(lr1[p] - lr1[u]))\n\ndef solve():\n    n = int(input())\n    lr0 = [0] * (n + 1)\n    lr1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        (lr0[i], lr1[i]) = map(int, input().split())\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, adj, dp0, dp1, lr0, lr1)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(ls, vs, dp_l, dp_v, adj, node, parent):\n    for child in adj[node]:\n        if child != parent:\n            dfs(ls, vs, dp_l, dp_v, adj, child, node)\n    dp_l[parent] += max(dp_l[node] + abs(ls[parent] - ls[node]), dp_v[node] + abs(ls[parent] - vs[node]))\n    dp_v[parent] += max(dp_l[node] + abs(vs[parent] - ls[node]), dp_v[node] + abs(vs[parent] - vs[node]))\n    pass\n\ndef solve():\n    n = int(input())\n    ls = [0] * (n + 1)\n    vs = [0] * (n + 1)\n    dp_l = [0] * (n + 1)\n    dp_v = [0] * (n + 1)\n    for i in range(1, n + 1):\n        (ls[i], vs[i]) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(1, n):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(ls, vs, dp_l, dp_v, adj, 1, 0)\n    print(max(dp_l[1], dp_v[1]))\n    pass\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, dp0, dp1, adj, lB, rB):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, dp0, dp1, adj, lB, rB)\n    dp0[p] += max(dp0[u] + abs(lB[p] - lB[u]), dp1[u] + abs(lB[p] - rB[u]))\n    dp1[p] += max(dp0[u] + abs(rB[p] - lB[u]), dp1[u] + abs(rB[p] - rB[u]))\n\ndef solve():\n    n = int(input())\n    lB = [0 for x in range(n + 1)]\n    rB = [0 for x in range(n + 1)]\n    dp0 = [0 for x in range(n + 1)]\n    dp1 = [0 for x in range(n + 1)]\n    for i in range(1, n + 1):\n        (lB[i], rB[i]) = map(int, input().split())\n    adj = [[] for x in range(n + 1)]\n    for k in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, dp0, dp1, adj, lB, rB)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, adj, dp0, dp1, lr0, lr1):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, adj, dp0, dp1, lr0, lr1)\n    dp0[p] += max(dp0[u] + abs(lr0[p] - lr0[u]), dp1[u] + abs(lr0[p] - lr1[u]))\n    dp1[p] += max(dp0[u] + abs(lr1[p] - lr0[u]), dp1[u] + abs(lr1[p] - lr1[u]))\n\ndef solve():\n    n = int(input())\n    lr0 = [0] * (n + 1)\n    lr1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        (lr0[i], lr1[i]) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, adj, dp0, dp1, lr0, lr1)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, adj, dp0, dp1, lr0, lr1):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, adj, dp0, dp1, lr0, lr1)\n    dp0[p] += max(dp0[u] + abs(lr0[p] - lr0[u]), dp1[u] + abs(lr0[p] - lr1[u]))\n    dp1[p] += max(dp0[u] + abs(lr1[p] - lr0[u]), dp1[u] + abs(lr1[p] - lr1[u]))\n\ndef solve():\n    n = int(input())\n    lr0 = [0] * (n + 1)\n    lr1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        (lr0[i], lr1[i]) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, adj, dp0, dp1, lr0, lr1)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, dp0, dp1, adj, lB, rB):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, dp0, dp1, adj, lB, rB)\n    dp0[p] += max(dp0[u] + abs(lB[p] - lB[u]), dp1[u] + abs(lB[p] - rB[u]))\n    dp1[p] += max(dp0[u] + abs(rB[p] - lB[u]), dp1[u] + abs(rB[p] - rB[u]))\n\ndef solve():\n    n = int(input())\n    lB = [0 for x in range(n + 1)]\n    rB = [0 for x in range(n + 1)]\n    dp0 = [0 for x in range(n + 1)]\n    dp1 = [0 for x in range(n + 1)]\n    for i in range(1, n + 1):\n        (lB[i], rB[i]) = map(int, input().split())\n    adj = [[] for x in range(n + 1)]\n    for k in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, dp0, dp1, adj, lB, rB)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, adj, dp0, dp1, lr0, lr1):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u, adj, dp0, dp1, lr0, lr1)\n    dp0[p] += max(dp0[u] + abs(lr0[p] - lr0[u]), dp1[u] + abs(lr0[p] - lr1[u]))\n    dp1[p] += max(dp0[u] + abs(lr1[p] - lr0[u]), dp1[u] + abs(lr1[p] - lr1[u]))\n\ndef solve():\n    n = int(input())\n    lr0 = [0] * (n + 1)\n    lr1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        (lr0[i], lr1[i]) = map(int, input().split())\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dfs(1, 0, adj, dp0, dp1, lr0, lr1)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, d, dp0, dp1, l, r):\n    for neighbor in d[u]:\n        if neighbor != p:\n            dfs(neighbor, u, d, dp0, dp1, l, r)\n    dp0[p] += max(dp0[u] + abs(l[p] - l[u]), dp1[u] + abs(l[p] - r[u]))\n    dp1[p] += max(dp0[u] + abs(r[p] - l[u]), dp1[u] + abs(r[p] - r[u]))\nfor _ in range(int(input())):\n    n = int(input())\n    (l, r, dp0, dp1) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l[i + 1] = x\n        r[i + 1] = y\n    d = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        d[u].append(v)\n        d[v].append(u)\n    dfs(1, 0, d, dp0, dp1, l, r)\n    print(max(dp0[1], dp1[1]))", "import sys\ninput = sys.stdin.readline\n\ndef dfs(u, p, d, dp0, dp1, l, r):\n    for neighbor in d[u]:\n        if neighbor != p:\n            dfs(neighbor, u, d, dp0, dp1, l, r)\n    dp0[p] += max(dp0[u] + abs(l[p] - l[u]), dp1[u] + abs(l[p] - r[u]))\n    dp1[p] += max(dp0[u] + abs(r[p] - l[u]), dp1[u] + abs(r[p] - r[u]))\n\ndef solve():\n    n = int(input())\n    (l, r, dp0, dp1) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l[i + 1] = x\n        r[i + 1] = y\n    d = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        d[u].append(v)\n        d[v].append(u)\n    dfs(1, 0, d, dp0, dp1, l, r)\n    print(max(dp0[1], dp1[1]))\nfor _ in range(int(input())):\n    solve()"]