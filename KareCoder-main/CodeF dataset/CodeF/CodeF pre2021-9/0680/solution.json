["from sys import stdin, stdout\nimport collections, heapq, bisect, math\ninput = stdin.readline\n\ndef rint():\n    return int(input())\n\ndef rstr():\n    return input().strip()\n\ndef rlstr():\n    return list(input().strip().split())\n\ndef rlint():\n    return list(map(int, input().split()))\n\ndef main():\n    n = rint()\n    graph = collections.defaultdict(set)\n    queue = collections.deque()\n    count = [1] * n\n    res = 0\n    for _ in range(n):\n        (u, v) = rlint()\n        u -= 1\n        v -= 1\n        graph[u].add(v)\n        graph[v].add(u)\n    for i in range(n):\n        if len(graph[i]) == 1:\n            queue.append(i)\n    while queue:\n        u = queue.popleft()\n        p = graph[u].pop()\n        graph[p].remove(u)\n        count[p] += count[u]\n        count[u] = 0\n        if len(graph[p]) == 1:\n            queue.append(p)\n    for i in range(n):\n        res += count[i] * (count[i] - 1) // 2 + count[i] * (n - count[i])\n    print(res)\nfor _ in range(rint()):\n    main()", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "import sys\nfrom sys import stdin\nfrom collections import deque\ntt = int(stdin.readline())\nfor loop in range(tt):\n    n = int(stdin.readline())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, stdin.readline().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\ntt = int(input())\nfor loop in range(tt):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "from collections import defaultdict\n\ndef dfs(i):\n    global v\n    e = [i]\n    while e != []:\n        x = e.pop(0)\n        v[x] = 1\n        for i in d[x]:\n            if v[i] == -1:\n                v[i] = 1\n                e.append(i)\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(set)\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        d[a].add(b)\n        d[b].add(a)\n    q = []\n    for i in range(n + 1):\n        if len(d[i]) == 1:\n            q.append(i)\n    v = [1] * (n + 1)\n    v[0] = 0\n    while q != []:\n        p = q.pop()\n        r = d[p].pop()\n        v[r] += v[p]\n        v[p] = 0\n        d[r].remove(p)\n        if len(d[r]) == 1:\n            q.append(r)\n    an = 0\n    for i in v:\n        an += i * (i - 1) // 2\n        an += i * (n - i)\n    print(an)", "from collections import deque\nfor loop in range(int(input())):\n    n = int(input())\n    lis = [[] for i in range(n)]\n    link = [0] * n\n    num = [1] * n\n    for i in range(n):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        lis[u].append(v)\n        lis[v].append(u)\n        link[u] += 1\n        link[v] += 1\n    q = deque([])\n    ans = n * (n - 1)\n    for i in range(n):\n        if link[i] == 1:\n            q.append(i)\n    while q:\n        v = q.popleft()\n        link[v] = 0\n        for nex in lis[v]:\n            if link[nex] != 0:\n                num[nex] += num[v]\n                link[nex] -= 1\n                if link[nex] == 1:\n                    q.append(nex)\n    for i in range(n):\n        if link[i] != 0:\n            ans -= num[i] * (num[i] - 1) // 2\n    print(ans)", "import queue\n\ndef number_of_simple_path(g, n):\n    leafs = queue.Queue()\n    for i in range(n):\n        if len(g[i]) == 1:\n            leafs.put(i)\n    val = [1] * n\n    while leafs.empty() != True:\n        v = leafs.get()\n        to = g[v].pop()\n        val[to] += val[v]\n        val[v] = 0\n        g[v].clear()\n        g[to].remove(v)\n        if len(g[to]) == 1:\n            leafs.put(to)\n    res = 0\n    for i in range(n):\n        val_i = val[i]\n        res += val_i * (val_i - 1) // 2 + val_i * (n - val_i)\n    return res\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        g = [set() for _ in range(n)]\n        for j in range(n):\n            (x, y) = map(int, input().split())\n            x -= 1\n            y -= 1\n            g[x].add(y)\n            g[y].add(x)\n        n_path = number_of_simple_path(g, n)\n        print(n_path)\nmain()"]