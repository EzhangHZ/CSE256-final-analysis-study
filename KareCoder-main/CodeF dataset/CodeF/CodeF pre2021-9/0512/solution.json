["from heapq import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [['0' for _ in range(n)] for _ in range(n)]\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    i = 0\n    j = 0\n    for x in range(k):\n        ans[i][j] = '1'\n        i += 1\n        j += 1\n        j %= n\n        if i == n:\n            i = 0\n            j += 1\n            j %= n\n    for i in ans:\n        print(''.join(i))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [[0 for i in range(n)] for j in range(n)]\n    p = q = 0\n    l = 1\n    for i in range(n):\n        for j in range(k // n):\n            a[i][(i + j) % n] = 1\n    for i in range(k % n):\n        a[i][(i + k // n) % n] = 1\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        print(''.join(map(str, a[i])))", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split(' '))\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    thing = k % n\n    index = 0\n    printlist = []\n    while index < n:\n        if thing > 0:\n            thing -= 1\n            if index + k // n + 1 > n:\n                printlist.append((index + k // n - n + 1) * '1' + (n - k // n - 1) * '0' + (n - index) * '1')\n            else:\n                printlist.append(index * '0' + (k // n + 1) * '1' + (n - k // n - index - 1) * '0')\n        elif index + k // n > n:\n            printlist.append((index + k // n - n) * '1' + (n - k // n) * '0' + (n - index) * '1')\n        else:\n            printlist.append(index * '0' + k // n * '1' + (n - k // n - index) * '0')\n        index += 1\n    if len(printlist) == 0:\n        print(0)\n    for i in printlist:\n        print(i)", "n = int(input())\nfor i in range(0, n):\n    (n, m) = map(int, input().split())\n    if m % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(0, m % n):\n        if i + m // n + 1 <= n:\n            print('0' * i + '1' * (m // n + 1) + '0' * (n - m // n - 1 - i))\n        else:\n            print('1' * (i + m // n + 1 - n) + '0' * (n - m // n - 1) + '1' * (n - i))\n    for i in range(m % n, n):\n        if i + m // n <= n:\n            print('0' * i + '1' * (m // n) + '0' * (n - m // n - i))\n        else:\n            print('1' * (i + m // n - n) + '0' * (n - m // n) + '1' * (n - i))", "def testcase():\n    import sys\n    input = sys.stdin.readline\n    (n, k) = [int(x) for x in input().strip().split()]\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    ones = (k + n - 1) // n\n    l = ['1'] * ones + ['0'] * (n - ones)\n    m = k % n\n    for i in range(n):\n        print(''.join(l))\n        l = [l[-1]] + l[:-1]\n        if i + 1 == m:\n            l[(i + k // n + 1) % n] = '0'\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        testcase()\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(0 if k % n == 0 else 2)\n    for i in range(n):\n        l = ['0'] * n\n        for j in range(i, i + k // n):\n            l[j % n] = '1'\n        if i < k % n:\n            l[(i + k // n) % n] = '1'\n        print(''.join(l))", "t = int(input())\nfor o in range(t):\n    l = str.split(input(), ' ')\n    n = int(l[0])\n    k = int(l[1])\n    x = k // n\n    r = k % n\n    if r == 0:\n        a = 0\n    else:\n        a = 2\n    print(a)\n    s = '1' * x + '0' * (n - x)\n    for i in range(n):\n        Rfirst = s[0:len(s) - i]\n        Rsecond = s[len(s) - i:]\n        final = Rsecond + Rfirst\n        if r > 0:\n            r = r - 1\n            final = list(final)\n            final[(i + x) % n] = '1'\n            final = ''.join(final)\n        print(final)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k % n == 0:\n        print(0)\n        L = []\n        c = 0\n        d = k % n\n        s = str()\n        for i in range(n):\n            if c < k // n:\n                s = s + '1'\n            else:\n                s = s + '0'\n            c = c + 1\n        L = L + [s]\n        for i in range(n - 1):\n            y = L[i]\n            b = y[n - 1]\n            y = y[:n - 1]\n            L = L + [b + y]\n    else:\n        print(2)\n        L = []\n        c = 0\n        d = e = k % n - 1\n        s = str()\n        for i in range(n):\n            if c < k // n + 1:\n                s = s + '1'\n            else:\n                s = s + '0'\n            c = c + 1\n        L = L + [s]\n        for i in range(d):\n            y = L[i]\n            b = y[n - 1]\n            y = y[:n - 1]\n            L = L + [b + y]\n        z = L[e]\n        z = z.replace('1', '0', 1)\n        p = z[n - 1]\n        z = z[:n - 1]\n        L = L + [p + z]\n        for i in range(e + 1, n - 1):\n            y = L[i]\n            b = y[n - 1]\n            y = y[:n - 1]\n            L = L + [b + y]\n    for i in L:\n        print(i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(0 if k % n == 0 else 2)\n    for i in range(n):\n        l = ['0'] * n\n        for j in range(i, i + k // n):\n            l[j % n] = '1'\n        if i < k % n:\n            l[(i + k // n) % n] = '1'\n        print(''.join(l))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(0 if k % n == 0 else 2)\n    for i in range(n):\n        l = ['0'] * n\n        for j in range(i, i + k // n):\n            l[j % n] = '1'\n        if i < k % n:\n            l[(i + k // n) % n] = '1'\n        print(''.join(l))", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    print(2 * (k % n > 0))\n    for i in range(n):\n        s = ('1' * (k // n + (i < k % n))).zfill(n)\n        print(s[i:] + s[:i])", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    print(k % n and 2)\n    for i in range(n):\n        s = ('1' * (k // n + (i < k % n))).zfill(n)\n        print(s[i:] + s[:i])", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, k) = I()\n    an = [['0'] * n for i in range(n)]\n    st = [0, 0]\n    r = c = 1\n    if k % n == 0 and k != 0:\n        print(0)\n        a = '1' * (k // n) + '0' * (n - k // n)\n        for i in range(n):\n            print(a)\n            a = a[-1] + a[:n - 1]\n        continue\n    fi = 0\n    a = '1' * (k // n) + '0' * (n - k // n)\n    for i in range(n):\n        an[i] = list(a)\n        a = a[-1] + a[:n - 1]\n    f = k % n\n    to = n - k // n\n    cur = n - to\n    for i in range(n):\n        if f == 0:\n            break\n        if '0' in an[i]:\n            an[i][cur] = '1'\n            f -= 1\n            cur = (cur + 1) % n\n    ma = 0\n    mi = n + 1\n    for i in range(n):\n        ma = max(ma, an[i].count('1'))\n        mi = min(mi, an[i].count('1'))\n    fi += (ma - mi) ** 2\n    ma = 0\n    mi = n + 1\n    for j in range(n):\n        x = 0\n        for i in range(n):\n            if an[i][j] == '1':\n                x += 1\n        ma = max(ma, x)\n        mi = min(mi, x)\n    fi += (ma - mi) ** 2\n    print(fi)\n    for i in an:\n        print(''.join(i))", "import sys\nimport math\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef SI():\n    return sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n    (n, k) = MI()\n    if k % n != 0:\n        print(2)\n    else:\n        print(0)\n    l = []\n    for i in range(n):\n        l.append(['0'] * n)\n    for i in range(n):\n        for j in range(n):\n            if k <= 0:\n                break\n            else:\n                l[j][(j + i) % n] = '1'\n                k -= 1\n    for i in range(n):\n        print(''.join(l[i]))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        lo = n\n        print(0)\n        while lo:\n            s = '0' * n\n            print(s)\n            lo -= 1\n    elif k < n:\n        fa = 2\n        c = 0\n        print(fa)\n        lo = n\n        while lo:\n            if k:\n                s = '0' * c + '1' + '0' * (n - c - 1)\n                c += 1\n                k -= 1\n            else:\n                s = '0' * n\n            lo -= 1\n            print(s)\n    elif k == n:\n        fa = 0\n        c = 0\n        print(fa)\n        lo = n\n        while lo:\n            s = '0' * c + '1' + '0' * (n - c - 1)\n            c += 1\n            lo -= 1\n            print(s)\n    else:\n        maxi = k // n\n        mini = k // n\n        rem = k % n\n        if rem != 0:\n            maxi += 1\n        fa = 2 * (maxi - mini) ** 2\n        c = 0\n        if rem != 0:\n            maxi -= 1\n        print(fa)\n        while c != n:\n            l = ['0' if i != c else '1' for i in range(n)]\n            if rem:\n                c1 = maxi\n                rem -= 1\n            else:\n                c1 = maxi - 1\n            c2 = c\n            while c1:\n                if c2 + 1 < n:\n                    c2 += 1\n                else:\n                    c2 = 0\n                l[c2] = '1'\n                c1 -= 1\n            print(''.join(l))\n            c += 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        x = 0\n        p = [['0' for j in range(n)] for i in range(n)]\n    elif n * n == k:\n        x = 0\n        p = [['1' for j in range(n)] for i in range(n)]\n    elif n == k:\n        x = 0\n        p = [['1' if i == j else '0' for j in range(n)] for i in range(n)]\n    elif n > k:\n        x = 2\n        p = [['1' if i == j and i < k else '0' for j in range(n)] for i in range(n)]\n    else:\n        if k % n == 0:\n            x = 0\n        else:\n            x = 2\n        p = [['0' for i in range(n)] for j in range(n)]\n        a = k // n\n        b = k % n\n        c = 0\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    if c < b:\n                        for z in range(a + 1):\n                            p[i][(j + z) % n] = '1'\n                        c += 1\n                    else:\n                        for z in range(a):\n                            p[i][(j + z) % n] = '1'\n    print(x)\n    for i in range(n):\n        print(''.join(p[i]))", "import sys\nreadline = lambda : sys.stdin.readline().strip('\\n')\nreadlist = lambda : list(map(int, readline().split()))\nfor i in range(int(input())):\n    (n, k) = readlist()\n    array = [['0'] * n for i in range(n)]\n    print([0, 2][k % n > 0])\n    (p, q) = (0, 0)\n    for i in range(k):\n        array[p][q] = '1'\n        (p, q) = (p + 1, (q + 1) % n)\n        if p == n:\n            (p, q) = (0, (q + 1) % n)\n    for i in range(n):\n        print(''.join(array[i]))\nquit()\nfor i in range(int(input())):\n    (a, b, n, m) = readlist()\n    if m > min(a, b) or a + b < n + m:\n        print('No')\n    else:\n        print('Yes')\nfor i in range(int(input())):\n    (n, r) = readlist()\n    s = 0\n    if n > r:\n        print(r * (r + 1) // 2)\n    else:\n        print(n * (n - 1) // 2 + 1)\nfor i in range(int(input())):\n    n = int(input())\n    print(n // 2 + n % 2)\n    a = 1", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (N, K) = [int(x) for x in input().split()]\n        ans = [[0] * N for j in range(N)]\n        cnt = 0\n        f = False\n        if K == 0:\n            f = True\n        for i in range(N):\n            if f:\n                break\n            for j in range(N):\n                ans[j % N][(i + j) % N] = 1\n                cnt += 1\n                if cnt == K:\n                    f = True\n                    break\n            if f:\n                break\n        maxr = 0\n        minr = float('inf')\n        maxc = 0\n        minc = float('inf')\n        for a in ans:\n            s = sum(a)\n            maxr = max(maxr, s)\n            minr = min(minr, s)\n        for a in zip(*ans):\n            s = sum(a)\n            maxc = max(maxc, s)\n            minc = min(minc, s)\n        print((maxr - minr) ** 2 + (maxc - minc) ** 2)\n        for a in ans:\n            print(''.join(map(str, a)))\nmain()", "t = int(input())\ncnt = 0\nwhile cnt < t:\n    cnt += 1\n    res = 0\n    (n, k) = [int(i) for i in input().split()]\n    a = [[0] * n for i in range(n)]\n    if k == 0:\n        res = 0\n    elif k < n:\n        res = 2\n        for i in range(k):\n            a[i][i] = 1\n    elif k % n == 0:\n        res = 0\n        for i in range(n):\n            for j in range(i, k // n + i):\n                a[i][j % n] = 1\n    else:\n        rem = k % n\n        res = 2\n        for i in range(rem):\n            for j in range(i, i + k // n + 1):\n                a[i][j % n] = 1\n        for i in range(rem, n):\n            for j in range(i, i + k // n):\n                a[i][j % n] = 1\n    print(res)\n    for row in a:\n        print(''.join((str(i) for i in row)))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = 2\n    if k % n == 0:\n        f = 0\n    l = [['0' for i in range(n)] for j in range(n)]\n    no = k\n    y = 0\n    for w in range(n):\n        x = 0\n        y = w\n        for j in range(n):\n            if no == 0:\n                break\n            no -= 1\n            l[x][y % n] = '1'\n            x += 1\n            y += 1\n        if no == 0:\n            break\n    print(f)\n    for k in l:\n        print(''.join(k))", "def solve(n, k):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for right_move in range(n):\n        for height in range(n):\n            if k == 0:\n                continue\n            i = height\n            j = (height + right_move) % n\n            matrix[i][j] = 1\n            k -= 1\n    return matrix\n\ndef get_value(matrix):\n    n = len(matrix)\n    max_r = 0\n    min_r = n\n    max_c = 0\n    min_c = n\n    for line in matrix:\n        value = sum(line)\n        max_r = max(max_r, value)\n        min_r = min(min_r, value)\n    for j in range(n):\n        value = sum([matrix[i][j] for i in range(n)])\n        max_c = max(max_c, value)\n        min_c = min(min_c, value)\n    res = (max_r - min_r) ** 2\n    res += (max_c - min_c) ** 2\n    return res\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    matrix = solve(n, k)\n    value = get_value(matrix)\n    print(value)\n    for line in matrix:\n        print(''.join(map(str, line)))", "t = int(input())\nfor x in range(t):\n    (n, k) = map(int, input().split(' '))\n    c = k // n\n    if k % n == 0:\n        print(0)\n        for i in range(n):\n            a = [0 for i in range(n)]\n            for j in range(c):\n                a[(i + j) % n] = 1\n            print(''.join((str(q) for q in a)))\n    else:\n        print(2)\n        rem = k - c * n\n        for i in range(n):\n            a = [0 for i in range(n)]\n            b = c\n            if rem > 0:\n                b += 1\n            for j in range(b):\n                a[(i + j) % n] = 1\n            rem -= 1\n            print(''.join((str(q) for q in a)))", "def solu(n, k):\n    r = 2 if k % n else 0\n    a = cr_matrix(n, 0)\n    remain = k\n    if k == 0:\n        return (r, a)\n    (i, j) = (0, 0)\n    d = 1\n    while remain > 0:\n        a[i][j] = 1\n        remain -= 1\n        if j == n - 1 and i == n - 1:\n            i = 0\n            j = 1\n        elif j == n - 1:\n            i += 1\n            j = 0\n        elif i == n - 1:\n            i = 0\n            j += 2\n        else:\n            i += d\n            j += d\n    return (r, a)\n\ndef cr_matrix(n, p):\n    matrix = [[p] * n for i in range(n)]\n    return matrix\nnt = int(input())\nfor i in range(nt):\n    test = input().split(' ')\n    n = int(test[0])\n    k = int(test[1])\n    result = solu(n, k)\n    print(result[0])\n    for r in range(n):\n        row = ''.join((str(v) for v in result[1][r]))\n        print(row)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, k) = mints()\n    a = [None] * n\n    R = [0] * n\n    C = [0] * n\n    for i in range(n):\n        a[i] = [0] * n\n    z = 0\n    for j in range(0, k, n):\n        for i in range(min(n, k - j)):\n            a[i][(z + i) % n] = 1\n            C[i] += 1\n            R[(z + i) % n] += 1\n        z += 1\n    print((max(R) - min(R)) ** 2 + (max(C) - min(C)) ** 2)\n    for i in a:\n        print(''.join(map(str, i)))\nfor i in range(mint()):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [[0 for i in range(n)] for j in range(n)]\n    i = 0\n    j = 0\n    while i < k:\n        x = 0\n        y = j\n        while x < n and i < k:\n            ans[x][y] = 1\n            i += 1\n            x += 1\n            y = (y + 1) % n\n        j += 1\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for j in ans:\n        print(''.join((str(x) for x in j)))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = 0\n    a = k // n * n\n    b = k % n\n    if k < n and k != 0:\n        ans = 2\n    elif b > 0:\n        ans = 2\n    else:\n        ans = 0\n    mat = [[0] * n for i in range(n)]\n    total = 0\n    t = 0\n    while total < k:\n        (x, y) = (0, t)\n        for i in range(n):\n            mat[x][y] = 1\n            total += 1\n            if total == k:\n                break\n            x = (x + 1) % n\n            y = (y + 1) % n\n        t += 1\n    print(ans)\n    for i in range(n):\n        print(''.join(map(str, mat[i])))", "t = int(input(''))\n\ndef compute_f(a, n):\n    row_sums = [sum(row) for row in a]\n    column_sums = [sum((a[j][i] for i in range(n))) for j in range(n)]\n    max_r = max(row_sums)\n    min_r = min(row_sums)\n    max_c = max(column_sums)\n    min_c = min(column_sums)\n    return (max_r - min_r) ** 2 + (max_c - min_c) ** 2\n\ndef print_a(a):\n    for row in a:\n        out = ''\n        for num in row:\n            out += str(num)\n        print(out)\n\ndef solve(n, k):\n    assert k <= n * n\n    A = [[0 for i in range(n)] for j in range(n)]\n    for x in range(k):\n        j = x // n\n        i = x % n\n        A[i][(i + j) % n] = 1\n    print(compute_f(A, n))\n    print_a(A)\nfor i in range(t):\n    [n, k] = [int(num) for num in input('').split(' ')]\n    solve(n, k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n        kk = [0 for i in range(n)]\n        for i in range(n):\n            print(''.join(list(map(str, kk))))\n    elif k % n == 0:\n        print(0)\n        b = k // n\n        kk = [[0 for i in range(n)] for j in range(n)]\n        i = 0\n        summ = 0\n        while i < b:\n            for j in range(n):\n                if i + j >= n:\n                    t = (i + j) % n\n                else:\n                    t = i + j\n                kk[j][t] = 1\n                summ += 1\n                if summ == k:\n                    break\n                    break\n            i += 1\n        for i in range(n):\n            print(''.join(list(map(str, kk[i]))))\n    else:\n        print(2)\n        b = k // n\n        kk = [[0 for i in range(n)] for j in range(n)]\n        i = 0\n        summ = 0\n        while i < b + 1:\n            for j in range(n):\n                if i + j >= n:\n                    t = (i + j) % n\n                else:\n                    t = i + j\n                kk[j][t] = 1\n                summ += 1\n                if summ == k:\n                    break\n                    break\n            i += 1\n        for i in range(n):\n            print(''.join(list(map(str, kk[i]))))", "for w in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    flag = False\n    A = [[0] * n for i in range(n)]\n    j = 0\n    while j < k:\n        a = j // n\n        for i in range(n):\n            if j >= k:\n                flag = True\n                break\n            A[i][(i + a) % n] = 1\n            j += 1\n        if flag:\n            break\n    p = [2, 0]\n    print(p[k % n == 0])\n    for i in range(n):\n        s = ''\n        for j in A[i]:\n            s += str(j)\n        print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = [[0 for i in range(n)] for j in range(n)]\n    r = 0\n    c = 0\n    for i in range(k):\n        arr[r][c] = 1\n        r += 1\n        c += 1\n        c %= n\n        if r == n:\n            r = 0\n            c += 1\n            c = c % n\n    print(0) if k % n == 0 else print(2)\n    for j in arr:\n        print(''.join((str(i) for i in j)))", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    res = 0 if k % n == 0 else 2\n    lst = [[0 for a in range(0, n)] for b in range(0, n)]\n    (ff, x, y, count) = (1, 0, 0, 0)\n    while count < k:\n        lst[x][y] = 1\n        x = (x + 1) % n\n        y = (y + 1) % n\n        if count % n == n - 1:\n            x = 0\n            y = ff\n            ff += 1\n        count += 1\n    print(res)\n    for elem in lst:\n        print(''.join((str(x) for x in elem)))", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [[0 for i in range(n)] for j in range(n)]\n    i = 0\n    j = 0\n    while i < k:\n        x = 0\n        y = j\n        while x < n and i < k:\n            ans[x][y] = 1\n            i += 1\n            x += 1\n            y = (y + 1) % n\n        j += 1\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for j in ans:\n        print(''.join((str(x) for x in j)))", "try:\n    k = int(input())\n    for i in range(k):\n        n = list(map(int, input().split()))\n        if n[1] % n[0] == 0:\n            print(0)\n        else:\n            print(2)\n        reach = n[1] // n[0]\n        rthr = n[1] % n[0]\n        coi = 0\n        mat = [[0 for x in range(n[0])] for y in range(n[0])]\n        for r in range(len(mat)):\n            if r + reach <= len(mat):\n                for e in range(r, r + reach):\n                    mat[r][e] = 1\n                coi += reach\n                if r < rthr:\n                    if r + reach == len(mat):\n                        mat[r][0] = 1\n                    else:\n                        mat[r][r + reach] = 1\n            else:\n                for e in range(r, len(mat)):\n                    mat[r][e] = 1\n                for e in range(0, reach - (len(mat) - r)):\n                    mat[r][e] = 1\n                coi += reach\n                if r < rthr:\n                    mat[r][reach - (len(mat) - r)] = 1\n            string = ''\n            for e in range(len(mat)):\n                string += str(mat[r][e])\n            print(string)\nexcept Exception:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [[0 for i in range(n)] for j in range(n)]\n    (i, j) = (0, 0)\n    while i < k:\n        x = 0\n        y = j\n        while x < n and i < k:\n            ans[x][y] = 1\n            i += 1\n            x += 1\n            y = (y + 1) % n\n        j += 1\n    print(0) if k % n == 0 else print(2)\n    for j in ans:\n        print(''.join((str(x) for x in j)))", "for _ in range(0, int(input())):\n    (n, k) = map(int, input().strip().split())\n    res = 2\n    if k % n == 0:\n        res = 0\n    m = [[0 for a in range(0, n)] for b in range(0, n)]\n    offset = 1\n    x = 0\n    y = 0\n    counter = 0\n    while counter < k:\n        m[x][y] = 1\n        x = (x + 1) % n\n        y = (y + 1) % n\n        if counter % n == n - 1:\n            x = 0\n            y = offset\n            offset += 1\n        counter += 1\n    print(res)\n    for i in m:\n        print(''.join((str(x) for x in i)))", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    over = False\n    if not over:\n        for k in range(n):\n            for i in range(n):\n                j = i + k\n                if p:\n                    matrix[i][j % n] = 1\n                    p -= 1\n                else:\n                    over = True\n                    break\n            if over:\n                break\n    min_row = float('inf')\n    max_row = 0\n    for i in range(n):\n        s = sum(matrix[i])\n        min_row = min(min_row, s)\n        max_row = max(max_row, s)\n    c_max = 0\n    c_min = float('inf')\n    for i in range(n):\n        s = 0\n        for j in range(n):\n            s += matrix[i][j]\n        c_max = max(c_max, s)\n        c_min = min(c_min, s)\n    print((min_row - max_row) ** 2 + (c_max - c_min) ** 2)\n    for row in matrix:\n        print(''.join(map(str, row)))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(str(i))\n    arr = []\n    arr.append(a)\n    for i in range(1, n):\n        temp = a[i:] + a[:i]\n        arr.append(list(temp))\n    ans = []\n    for i in range(n):\n        ans.append(['0'] * n)\n    index = 0\n    index1 = 0\n    indexes = []\n    for i in range(k):\n        indexes.append(index)\n        indexes.append(int(arr[index1][index]))\n        index += 1\n        if index == n:\n            index = 0\n            index1 += 1\n    for i in range(1, len(indexes), 2):\n        ans[indexes[i - 1]][indexes[i]] = '1'\n    if k < n:\n        if k == 0:\n            print(0)\n        else:\n            print(2)\n    elif k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        print(''.join(ans[i]))", "for i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    res = [[0 for i in range(n)] for j in range(n)]\n    (p, q) = (0, 0)\n    while k > 0:\n        res[p][q] = 1\n        p += 1\n        q += 1\n        q %= n\n        if p == n:\n            p = 0\n            q += 1\n            q %= n\n        k -= 1\n    for i in res:\n        print(*i, sep='')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    grid = [[0] * n for i in range(n)]\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    (i, j) = (0, 0)\n    while i < n and k > 0:\n        j = 0\n        while j < n and k > 0:\n            x = j\n            y = (i + j) % n\n            grid[x][y] = 1\n            k -= 1\n            j += 1\n        i += 1\n    for i in range(n):\n        for j in range(n):\n            print(grid[i][j], end='')\n        print()", "T = int(input())\nfor _ in range(T):\n    (n, k) = [int(_) for _ in input().split()]\n    x = y = 0\n    g = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(k):\n        g[x][y] = 1\n        (x, y) = (x + 1, (y + 1) % n)\n        if x == n:\n            (x, y) = (0, (y + 1) % n)\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        for j in range(n):\n            print(g[i][j], end='')\n        print()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    cnt = 0\n    diff = 0\n    while cnt < k:\n        for i in range(n):\n            matrix[i][(i + diff) % n] = 1\n            cnt += 1\n            if cnt == k:\n                break\n        if cnt == k:\n            break\n        diff += 1\n    (row_min_cnt, row_max_cnt) = (float('inf'), 0)\n    for i in range(n):\n        row_min_cnt = min(row_min_cnt, sum(matrix[i][:]))\n        row_max_cnt = max(row_max_cnt, sum(matrix[i][:]))\n    (col_min_cnt, col_max_cnt) = (float('inf'), 0)\n    for i in range(n):\n        col_min_cnt = min(col_min_cnt, sum(matrix[:][i]))\n        col_max_cnt = max(col_max_cnt, sum(matrix[:][i]))\n    func = math.pow(abs(row_max_cnt - row_min_cnt), 2) + math.pow(abs(col_max_cnt - col_min_cnt), 2)\n    print(int(func))\n    for i in range(n):\n        ans = ''\n        for j in range(n):\n            ans += str(matrix[i][j])\n        print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    a = [[0] * n for i in range(n)]\n    x = 0\n    y = 0\n    f = [i for i in range(n)]\n    while True:\n        if k > 0:\n            a[x][f[y]] = 1\n        else:\n            break\n        if f[y] == n - 1:\n            f[y] = 0\n        else:\n            f[y] += 1\n        if y == n - 1:\n            y = 0\n        else:\n            y += 1\n        if x == n - 1:\n            x = 0\n        else:\n            x += 1\n        k -= 1\n    for l in a:\n        print(''.join((str(t) for t in l)))", "def findGrid(d):\n    n = d[0]\n    k = d[1]\n    p = 0\n    q = 0\n    grid = [[0 for i in range(d[0])] for j in range(d[0])]\n    for i in range(k):\n        grid[p][q] = 1\n        p += 1\n        q = (q + 1) % n\n        if p == n:\n            p = 0\n            q = (q + 1) % n\n    r = [0, d[1]]\n    c = [0, d[1]]\n    temp = 0\n    temp1 = 0\n    j0 = 0\n    for i in range(d[0]):\n        temp1 = 0\n        temp = 0\n        for j in range(d[0]):\n            temp1 += grid[i][j]\n            temp += grid[j][j0]\n        j0 += 1\n        if r[0] < temp1:\n            r[0] = temp1\n        if r[1] > temp1:\n            r[1] = temp1\n        if c[0] < temp:\n            c[0] = temp\n        if c[1] > temp:\n            c[1] = temp\n    rr = []\n    rr.append((r[0] - r[1]) ** 2 + (c[0] - c[1]) ** 2)\n    rr.append(grid)\n    return rr\nr = []\nt = int(input())\nfor i in range(t):\n    data = input().split(' ')\n    r.append(findGrid([int(data[0]), int(data[1])]))\nfor i in r:\n    print(i[0])\n    x = i[1]\n    for j in x:\n        for y in j:\n            print(y, end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    mat = [[0 for i in range(n)] for j in range(n)]\n    d = {}\n    ans = 0\n    if k % n != 0 and n > 1:\n        ans = 2\n    for i in range(n):\n        for j in range(n):\n            if d.get(i - j):\n                d[i - j].append([i, j])\n            else:\n                d[i - j] = [[i, j]]\n    key = []\n    for i in range(n):\n        if i == 0:\n            key.append(i)\n        else:\n            key.append(-i)\n            key.append(n - i)\n    for i in key:\n        for j in d[i]:\n            if k > 0:\n                mat[j[0]][j[1]] = '1'\n                k -= 1\n            else:\n                mat[j[0]][j[1]] = '0'\n    print(ans)\n    for i in mat:\n        print(''.join(i))", "t = int(input())\nresultat = []\nmat_tot = []\nn_tot = []\nfor kk in range(t):\n    (n, k) = map(str, input().split())\n    n = int(n)\n    k = int(k)\n    n_tot.append(n)\n    if k % n == 0:\n        resultat.append(0)\n    else:\n        resultat.append(2)\n    compt = 0\n    num = int(k / n) + 1\n    mat = [[0 for x in range(n)] for y in range(n)]\n    i = 0\n    j = 0\n    while compt < k:\n        if compt % n == 0:\n            i = 0\n            j = int(compt / n)\n        elif i < n - 1 and j < n - 1:\n            i += 1\n            j += 1\n        elif i == n - 1 and j < n - 1:\n            i = 0\n            j += 1\n        elif i < n - 1 and j == n - 1:\n            j = 0\n            i += 1\n        if mat[i][j] == 0:\n            mat[i][j] = 1\n            compt += 1\n    for i in range(n):\n        mat_tot.append(''.join(map(str, mat[i])))\nanteriors = 0\nfor i in range(t):\n    print(resultat[i])\n    for j in range(n_tot[i]):\n        print(''.join(map(str, mat_tot[j + anteriors])))\n    anteriors += n_tot[i]", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mat = [[0] * n for i in range(n)]\n    (row, col) = (0, -1)\n    for i in range(k):\n        if not i % n:\n            col += 1\n        mat[row % n][col % n] = 1\n        row += 1\n        col += 1\n    print(2 if k % n else 0)\n    for i in mat:\n        print(*i, sep='')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n    q = k // n\n    r = k % n\n    c = 0\n    for ro in range(q):\n        for i in range(n):\n            temp = (c + i) % n\n            grid[i][temp] = 1\n        c += 1\n    for ro in range(r):\n        temp = (c + ro) % n\n        grid[ro][temp] = 1\n    if r == 0:\n        print(0)\n    else:\n        print(2)\n    for ro in grid:\n        print(*ro, sep='')", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor q in range(II()):\n    (n, k) = MI()\n    i = j = 0\n    aa = [[0] * n for _ in range(n)]\n    for _ in range(k):\n        if j == n:\n            j = 0\n        if i == n:\n            (i, j) = (0, j + 1)\n        aa[i][j] = 1\n        (i, j) = (i + 1, j + 1)\n    if k % n:\n        print(2)\n    else:\n        print(0)\n    for row in aa:\n        print(*row, sep='')", "import math\nt = int(input())\nfor _ in range(t):\n    line = input().strip().split(' ')\n    (n, k) = (int(line[0]), int(line[1]))\n    if n ** 2 == k:\n        print(0)\n        for row in range(n):\n            for col in range(n):\n                print(1, end='')\n            print('')\n    elif n == k:\n        print(0)\n        for row in range(n):\n            for col in range(n):\n                if row == col:\n                    print(1, end='')\n                else:\n                    print(0, end='')\n            print('')\n    elif k == 0:\n        print(0)\n        for row in range(n):\n            for col in range(n):\n                print(0, end='')\n            print('')\n    elif k % n == 0:\n        print(0)\n        leng = k // n\n        for row in range(n):\n            start = row\n            rowdata = [0] * n\n            for i in range(leng):\n                rowdata[(start + i) % n] = 1\n            for d in rowdata:\n                print(d, end='')\n            print('')\n    else:\n        print(2)\n        leng = k // n\n        diff = k - leng * n\n        for row in range(n):\n            start = row\n            rowdata = [0] * n\n            for i in range(leng):\n                rowdata[(start + i) % n] = 1\n            if row < diff:\n                rowdata[(start + leng) % n] = 1\n            for d in rowdata:\n                print(d, end='')\n            print('')", "def main():\n    (n, k) = map(int, input().split())\n    in_line = k // n\n    left = k % n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for k in range(in_line):\n            matrix[i][(i + k) % n] = 1\n    for i in range(left):\n        matrix[i][(i + in_line) % n] = 1\n    if left == 0:\n        print(0)\n    else:\n        print(2)\n    for i in matrix:\n        for k in i:\n            print(k, end='')\n        print()\nt = int(input())\nfor i in range(t):\n    main()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = k // n\n    y = k % n\n    if y == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        arr = [0 for j in range(n)]\n        for j in range(x):\n            arr[(i + j) % n] = 1\n        if y > 0:\n            arr[(i + x) % n] = 1\n            y -= 1\n        for j in range(n):\n            print(arr[j], end='')\n        print()", "for _ in range(int(input())):\n    (n, k) = [int(c) for c in input().split()]\n    if k % n == 0:\n        ans = 0\n    else:\n        ans = 2\n    mat = [[0 for i in range(n)] for i in range(n)]\n    p = 0\n    q = 0\n    while k:\n        mat[p][q] = 1\n        p += 1\n        q = (q + 1) % n\n        if p == n:\n            p = 0\n            q += 1\n            q % n\n        k -= 1\n    print(ans)\n    for i in mat:\n        print(*i, sep='')", "for tc in range(int(input())):\n    (n, k) = input().split(' ')\n    (n, k) = (int(n), int(k))\n    if k == 0 or k % n == 0:\n        print(0)\n        a = int(k / n)\n        A = []\n        for i in range(n):\n            A.append([0] * n)\n            for j in range(i, i + a):\n                A[i][j % n] = 1\n            for j in range(n):\n                print(A[i][j], end='')\n            print()\n    else:\n        print(2)\n        a = int(k / n)\n        b = k % n\n        A = []\n        for i in range(n):\n            A.append([0] * n)\n            for j in range(i, i + a):\n                A[i][j % n] = 1\n            if i < b:\n                A[i][(i + a) % n] = 1\n            for j in range(n):\n                print(A[i][j], end='')\n            print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = 0\n    a = []\n    for i in range(n):\n        a += ([0] * n,)\n    c = -1\n    i = 0\n    while i < k:\n        if i % n == 0:\n            c += 1\n        a[i % n][c % n] = 1\n        i += 1\n        c += 1\n    print(2 if k % n else 0)\n    for x in a:\n        print(*x, sep='')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [[0] * n for _ in range(n)]\n    b = []\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        if k == 0:\n            break\n        else:\n            a[i][i] = 1\n            k -= 1\n    j = 1\n    while j < n:\n        if k > 0:\n            for i in range(j, n):\n                if k == 0:\n                    break\n                else:\n                    a[i - j][i] = 1\n                    k -= 1\n        if k > 0:\n            for i in range(j):\n                if k == 0:\n                    break\n                else:\n                    a[n - j + i][i] = 1\n                    k -= 1\n        if k > 0:\n            j += 1\n        else:\n            break\n    for i in range(n):\n        for j in range(n):\n            print(a[i][j], end='')\n        print()", "from math import ceil\nT = int(input().rstrip())\nfor tt in range(T):\n    (n, r) = list(map(int, input().rstrip().split(' ')))\n    arr = [[0] * n for i in range(n)]\n    dpr = [0] * n\n    dpc = [0] * n\n    i = 0\n    j = 0\n    tp = 0\n    for ind in range(r):\n        arr[i][j] = 1\n        dpr[i] += 1\n        dpc[j] += 1\n        if i + 1 < n and j + 1 < n:\n            i += 1\n            j += 1\n        elif i + 1 == n:\n            i = 0\n            tp += 1\n            j = tp\n        elif j + 1 == n:\n            j = 0\n            i += 1\n    cnt = (max(dpr) - min(dpr)) ** 2 + (max(dpc) - min(dpc)) ** 2\n    print(cnt)\n    for i in arr:\n        print(*i, sep='')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mat = [[0 for i in range(n)] for j in range(n)]\n    (i, j) = (0, 0)\n    if k % n == 0:\n        fin = 0\n    else:\n        fin = 2\n    for o in range(k):\n        mat[i][j] = 1\n        i += 1\n        j = (j + 1) % n\n        if i == n:\n            i = 0\n            j = (j + 1) % n\n    print(fin)\n    for i in mat:\n        for j in i:\n            print(j, end='')\n        print()", "nb_cases = int(input())\nfor case in range(nb_cases):\n    (n, k) = [int(x) for x in input().split()]\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    matrice = [['0' for j in range(n)] for i in range(n)]\n    for x in range(k):\n        matrice[x % n][(x % n + x // n) % n] = '1'\n    for i in range(n):\n        for j in range(n):\n            print(matrice[i][j], end='')\n        print('')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [[0] * n for _ in range(n)]\n    b = []\n    if k % n == 0:\n        print(0)\n    else:\n        print(2)\n    for i in range(n):\n        if k == 0:\n            break\n        else:\n            a[i][i] = 1\n            k -= 1\n    j = 1\n    while j < n:\n        if k > 0:\n            for i in range(j, n):\n                if k == 0:\n                    break\n                else:\n                    a[i - j][i] = 1\n                    k -= 1\n        if k > 0:\n            for i in range(j):\n                if k == 0:\n                    break\n                else:\n                    a[n - j + i][i] = 1\n                    k -= 1\n        if k > 0:\n            j += 1\n        else:\n            break\n    for i in range(n):\n        for j in range(n):\n            print(a[i][j], end='')\n        print()", "def solve(n, k):\n    if k % n == 0:\n        ans = 0\n    else:\n        ans = 2\n    grid = []\n    for _ in range(n):\n        grid.append([0] * n)\n    curC = 0\n    (r, c) = (0, 0)\n    for _ in range(k):\n        grid[r][c] = 1\n        (r, c, curC) = nextRC(r, c, n, curC)\n    return (ans, grid)\n\ndef nextRC(r, c, n, curC):\n    nr = (r + 1) % n\n    nc = (c + 1) % n\n    if r == n - 1:\n        curC += 1\n        nc = curC\n    return (nr, nc, curC)\n\ndef print_grid(grid):\n    n = len(grid)\n    for r in range(n):\n        for c in range(n):\n            print(grid[r][c], end='')\n        print()\nt = int(input())\nfor case in range(t):\n    (n, k) = map(int, input().strip().split())\n    (ans, grid) = solve(n, k)\n    print(ans)\n    print_grid(grid)", "def co1(n, numd):\n    lis = []\n    for i in range(n):\n        co = 0\n        for j in range(n):\n            if numd[i][j] == 1:\n                co += 1\n        lis.append(co)\n    mar = max(lis)\n    mir = min(lis)\n    return (mar, mir)\n\ndef co2(n, numd):\n    sto = []\n    for i in range(n):\n        co = 0\n        for j in range(n):\n            if numd[j][i] == 1:\n                co += 1\n        sto.append(co)\n    mac = max(sto)\n    mic = min(sto)\n    return (mac, mic)\n\ndef ca(n, k):\n    numd = [[0 for k in range(n)] for l in range(n)]\n    p1 = k // n\n    re = k % n\n    ad = 1\n    i1 = 0\n    for i in range(n):\n        if i1 >= n:\n            i1 = 0\n        st = i1\n        if ad <= re:\n            tp = p1 + 1\n        else:\n            tp = p1\n        while tp > 0:\n            if st >= n:\n                st = 0\n            numd[i][st] = 1\n            st += 1\n            tp -= 1\n        i1 += 1\n        ad += 1\n    (mar, mir) = co1(n, numd)\n    (mac, mic) = co2(n, numd)\n    print((mar - mir) ** 2 + (mac - mic) ** 2)\n    for i in range(n):\n        for j in range(n):\n            print(numd[i][j], end='')\n        print()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ca(n, k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [[0 for i in range(n)] for j in range(n)]\n    if k % n == 0:\n        print('0')\n    else:\n        print('2')\n    for i in range(n):\n        for j in range(n):\n            if k == 0:\n                break\n            a[j][(i + j) % n] = 1\n            k -= 1\n        if k == 0:\n            break\n    for i in range(n):\n        for j in range(n):\n            print(a[i][j], end='')\n        print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = k // n\n    y = k % n\n    if y == 0:\n        print(0)\n    else:\n        print(2)\n    arr = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(x):\n            arr[i][(i + j) % n] = 1\n        if y > 0:\n            arr[i][(i + x) % n] = 1\n            y -= 1\n        for j in range(n):\n            print(arr[i][j], end='')\n        print()"]