["t = int(input().strip())\nfor _ in range(t):\n    (n, k) = map(int, input().strip().split())\n    l = n - k\n    T = list(range(1, k - l)) + list(range(k, k - l - 1, -1))\n    print(' '.join(map(str, T)))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    p = list(range(1, k + 1))\n    p[k - 1 - (n - k):] = p[k - 1 - (n - k):][::-1]\n    print(' '.join((str(x) for x in p)))", "import sys\nT = int(input())\nfor t in range(T):\n    row = list((int(x) for x in input().split()))\n    N = row[0]\n    K = row[1]\n    P = list((str(x) for x in range(1, K + 1)))\n    v1 = 2 * K - N\n    P1 = P[:v1 - 1]\n    P2 = P[v1 - 1:]\n    P2.reverse()\n    P1 += P2\n    print(' '.join(P1))", "task_number = int(input())\nfor _ in range(task_number):\n    (n, k) = map(int, input().split())\n    result = list(range(1, k + 1))\n    z = n - k\n    result[-z - 1:] = reversed(result[-z - 1:])\n    print(' '.join([str(x) for x in result]))", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    ans = ''\n    print(' '.join([str(i) for i in range(1, 2 * k - n)] + [str(i) for i in range(k, 2 * k - n - 1, -1)]))", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = 2 * k - n - 1\n    p = [i for i in range(1, m + 1)] + [i for i in range(k, m, -1)]\n    print(' '.join([str(i) for i in p]))", "import sys\nMOD = 1000000007\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_line():\n    return sys.stdin.readline().strip()\n\ndef write_line(out):\n    return sys.stdout.write(str(out) + '\\n')\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solve():\n    (n, k) = get_ints()\n    diff = n - k\n    if diff == 0:\n        return ' '.join([str(i) for i in range(1, k + 1)])\n    else:\n        res1 = ' '.join([str(i) for i in range(1, k - diff)])\n        res2 = ' '.join([str(i) for i in range(k, k - diff - 1, -1)])\n        if res1 and res2:\n            return res1 + ' ' + res2\n        elif res1:\n            return res1\n        else:\n            return res2\nt = int(input())\nwhile t:\n    write_line(solve())\n    t -= 1", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        (n, k) = get_ints()\n        ans = list(range(1, 2 * k - n))\n        ans += list(range(k, 2 * k - n - 1, -1))\n        get_print(' '.join(map(str, ans)))\nsolve()", "import sys\ninput = sys.stdin.readline\ngetint = lambda : int(input())\ngetints = lambda : [int(a) for a in input().split()]\n\ndef solve():\n    (n, k) = getints()\n    slope_size = n - k + 1\n    former_size = k - slope_size\n    pre = [i + 1 for i in range(former_size)]\n    after = [i for i in range(k, former_size, -1)]\n    print(' '.join([str(i) for i in pre + after]))\nt = getint()\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    temp = n - k\n    l = k - temp\n    ans = [i + 1 for i in range(k - temp - 1)]\n    for i in range(n - k + 1):\n        ans.append(k - i)\n    print(' '.join(map(str, ans)))", "T = int(input())\nr = 1\nwhile r <= T:\n    (n, k) = map(int, input().split())\n    inversion = (n - k) * (n - k + 1) // 2\n    ans = [i + 1 for i in range(k)]\n    part = 2 * k - n - 1\n    ans[part:] = ans[part:][::-1]\n    print(' '.join(map(str, ans)))\n    r += 1", "import sys\n\ndef noMoreInversions(n, k):\n    p = [str(i) for i in range(1, k + 1)]\n    for i in range(2 * k - n - 1, (3 * k - n - 1) // 2):\n        (p[i], p[3 * k - n - 2 - i]) = (p[3 * k - n - 2 - i], p[i])\n    return ' '.join(p)\n\ndef main():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        print(noMoreInversions(n, k))\nmain()", "T = int(input())\nfor t in range(T):\n    (n, k) = tuple([int(x) for x in input().split()])\n    last_num = k - (n - k)\n    result = []\n    start_reverse = False\n    cur_num = 1\n    for i in range(1, k + 1):\n        if i < last_num:\n            result.append(cur_num)\n            cur_num += 1\n        else:\n            if start_reverse == False:\n                start_reverse = True\n                cur_num = k\n            result.append(cur_num)\n            cur_num -= 1\n    print(' '.join([str(x) for x in result]))", "t = int(input())\nfor i in range(t):\n    nk = input().split(' ')\n    n = int(nk[0])\n    k = int(nk[-1])\n    s = ''\n    for j in range(1, 2 * k - n):\n        s += str(j) + ' '\n    for j in range(k, 2 * k - n - 1, -1):\n        s += str(j) + ' '\n    print(s[:-1])", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    g = []\n    for j in range(2 * k - n):\n        g.append(j + 1)\n    if n - k == 0:\n        print(' '.join(map(str, g)))\n    else:\n        h = []\n        for j in range(k - 1 - n + k):\n            h.append(j + 1)\n        for j in range(k - (k - 1 - n + k)):\n            h.append(k - j)\n        print(' '.join(map(str, h)))", "ans = []\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = [0] * k\n    j = 0\n    for i in range(k):\n        if i + 1 < 2 * k - n:\n            a[i] = i + 1\n        else:\n            a[i] = k - j\n            j += 1\n    ans.append(' '.join((str(x) for x in a)))\n    return\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1\nfor x in ans:\n    print(x)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    res = []\n    cur = 1\n    for i in range(1, 2 * k - n):\n        res.append(str(cur))\n        cur += 1\n    cur = k\n    for i in range(2 * k - n, k + 1):\n        res.append(str(cur))\n        cur -= 1\n    print(' '.join(res))", "import sys\nfor line in list(sys.stdin)[1:]:\n    inp = line.rstrip().split(' ')\n    n = int(inp[0])\n    k = int(inp[1])\n    x = 2 * k - n - 1\n    s = ''\n    for i in range(1, x + 1):\n        s += str(i) + ' '\n    for i in range(k, x, -1):\n        s += str(i) + ' '\n    s = s[:-1]\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    p = [0] * k\n    i = 0\n    count = 1\n    while i < 2 * k - n - 1:\n        p[i] = count\n        i += 1\n        count += 1\n    i = k - 1\n    while i >= 2 * k - n - 1:\n        p[i] = count\n        i -= 1\n        count += 1\n    print(' '.join([str(x) for x in p]))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(*list(range(1, k - (n - k))) + list(range(k, k - (n - k) - 1, -1)))", "t = int(input())\nfor q in range(t):\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    (n, k) = (L[0], L[1])\n    L = []\n    for i in range(1, k - (n - k)):\n        L.append(i)\n    m = k\n    ch = ''\n    while len(L) < k:\n        L.append(m)\n        m -= 1\n    for i in L:\n        ch += str(i) + ' '\n    print(ch)", "def main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        m = k * 2 - n\n        print(*range(1, m), *range(k, m - 1, -1))\nmain()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(*list(range(1, k - (n - k))) + list(range(k, k - (n - k) - 1, -1)))", "for _ in [*open(0)][1:]:\n    (n, k) = map(int, _.split())\n    r = 2 * k - 2 - n\n    print(*[i for i in range(1, r + 2)] + [i for i in range(k, r + 1, -1)])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    for j in range(1, 2 * k - n):\n        print(j, end=' ')\n    for j in range(2 * k - n, k + 1):\n        print(3 * k - n - j, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = [i for i in range(1, k + 1)]\n    m = n - k + 1\n    z = ans[-m:]\n    tot = ans[:k - m]\n    out = tot + z[::-1]\n    print(*out)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split(' ')]\n    a = [i for i in range(1, 2 * k - n)]\n    b = [i for i in range(2 * k - n, k + 1)]\n    b.reverse()\n    a.extend(b)\n    print(*a)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(range(1, k - (n - k)))\n    p += list(range(k, k - (n - k) - 1, -1))\n    print(*p)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(range(1, k - (n - k)))\n    p += list(range(k, k - (n - k) - 1, -1))\n    print(*p)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    l = list(range(1, k - (n - k)))\n    l += list(range(k, k - (n - k) - 1, -1))\n    print(*l)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [i for i in range(1, 2 * k - n)]\n    for i in range(n - k + 1):\n        l.append(k - i)\n    print(*l)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = [x for x in range(1, k + 1)]\n    num = k - (n - k)\n    print(*p[:num - 1], *p[num - 1:][::-1])", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(range(1, k - (n - k)))\n    p += list(range(k, k - (n - k) - 1, -1))\n    print(*p)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(*list(range(1, k - (n - k))) + list(range(k, k - (n - k) - 1, -1)))", "import math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = [i for i in range(1, 2 * k - n)]\n    b = [i for i in range(2 * k - n, k + 1)]\n    b = list(reversed(b))\n    print(*a + b)\nt = 1\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    mid = k - 1\n    diff = n - k\n    a = list(range(1, k + 1)) + list(range(mid, mid + diff, -1))\n    a[mid - diff:mid + diff] = reversed(a[mid - diff:mid + diff])\n    print(*a[:k])", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    p = [j + 1 for j in range(k)]\n    rev_start = k - (n - k) - 1\n    rev_end = k\n    p[rev_start:rev_end] = reversed(p[rev_start:rev_end])\n    print(*p)", "import math\nt = int(input())\nwhile t > 0:\n    (n, k) = [int(i) for i in input().split()]\n    a = []\n    for i in range(1, 2 * k - n):\n        a.append(i)\n    for i in range(k, 2 * k - n - 1, -1):\n        a.append(i)\n    print(*a)\n    t -= 1", "import sys\nfrom collections import deque\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    for i in range(1, k - n + k):\n        sys.stdout.write(str(i) + ' ')\n    for i in range(k, k - n + k - 1, -1):\n        sys.stdout.write(str(i) + ' ')\n    sys.stdout.write('\\n')", "import math, random\n\ndef prime(size):\n    prime = [True for i in range(size + 1)]\n    i = 2\n    while i * i <= size:\n        if prime[i] == True:\n            j = i * 2\n            while j < size:\n                prime[j] = False\n                j += i\n        i += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef arr():\n    return [int(x) for x in input().split()]\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\n\ndef solve():\n    (n, k) = arr()\n    l = [x for x in range(1, k + 1)]\n    l2 = l[k - (n - k) - 1:k + 1]\n    l = l[:k - (n - k) - 1]\n    l2.reverse()\n    if l == []:\n        print(*l2)\n        return\n    ans = l + l2\n    print(*ans)\nt = 1\nt = int(input())\nfor i in range(t):\n    ans = solve()\n    if ans == None:\n        continue\n    print(ans)", "test_num = int(input())\ntests = list()\nfor i in range(test_num):\n    tests.append(map(int, input().split()))\nfor (n, k) in tests:\n    for i in range(1, 2 * k - n):\n        print(i, end=' ')\n    for i in range(k, 2 * k - n - 1, -1):\n        print(i, end=' ')\n    print()", "for _ in [*open(0)][1:]:\n    (n, k) = map(int, _.split())\n    r = 2 * k - 2 - n\n    print(*list(range(1, r + 2)) + list(range(k, r + 1, -1)))", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    l = 2 * k - n - 1\n    z = []\n    for i in range(1, l + 1):\n        z.append(i)\n    for j in range(k, l, -1):\n        z.append(j)\n    print(*z)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    if k == 1 or n == 1:\n        return [1]\n    ans = [i for i in range(1, k + 1)]\n    if n == k:\n        return ans\n    (f, b) = (k - (n - k) - 1, k - 1)\n    while f < b:\n        (ans[f], ans[b]) = (ans[b], ans[f])\n        f += 1\n        b -= 1\n    return ans\nfor _ in range(int(input())):\n    print(*solve())", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    i = n - k\n    ans = list(range(1, k + 1))\n    if i == 0:\n        print(*ans)\n    else:\n        ans = ans[:-(i + 1)] + list(range(k, k - i - 1, -1))\n        print(*ans)", "import sys, math\nsys.setrecursionlimit(10 ** 6)\nfastinput = sys.stdin.readline\nfastout = sys.stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    (n, k) = map(int, fastinput().split())\n    a = [i for i in range(1, k + 1)]\n    x = n - k + 1\n    j = k - x\n    temp = k\n    for i in range(x):\n        a[j + i] = temp\n        temp -= 1\n    print(*a)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = k - (n - k)\n    for i in range(1, l):\n        print(i, end=' ')\n    for i in range(k, l - 1, -1):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    b = []\n    for i in range(1, 2 * k - n):\n        b.append(i)\n    for i in range(n - k + 1):\n        b.append(k - i)\n    print(*b)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(*list(range(1, k - (n - k))) + list(range(k, k - (n - k) - 1, -1)))", "cases = int(input())\nfor z in range(cases):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    if n == k:\n        for i in range(1, n + 1):\n            print(i, end=' ')\n        print('')\n    else:\n        num = 2 * k - n\n        for i in range(1, num):\n            print(i, end=' ')\n        temp = k\n        for i in range(num, k + 1):\n            print(temp, end=' ')\n            temp -= 1\n        print('')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(1, 2 * k - n):\n        print(i, end=' ')\n    for i in range(k, 2 * k - n - 1, -1):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if n <= k:\n        for i in range(k):\n            print(i + 1, end=' ')\n        print()\n    else:\n        for i in range(2 * k - n - 1):\n            print(i + 1, end=' ')\n        for i in range(k - (2 * k - n - 1)):\n            print(k - i, end=' ')\n        print()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    w = list(range(1, k - (n - k)))\n    w2 = list(range(k - (n - k), k + 1))\n    w2.reverse()\n    w.extend(w2)\n    print(*w)", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(range(1, k + 1))\n    diff = n - k\n    p = []\n    for i in range(k - diff - 1):\n        p.append(a[i])\n    for i in range(k - 1, k - diff - 2, -1):\n        p.append(a[i])\n    print(*p)", "t = int(input())\nfor x in range(t):\n    (n, k) = map(int, input().split(' '))\n    for i in range(1, 2 * k - n):\n        print(i, end=' ')\n    ct = k\n    for i in range(n - k + 1):\n        print(ct, end=' ')\n        ct -= 1\n    print('')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    p = []\n    for j in range(2 * k - n - 1):\n        p.append(j + 1)\n    for j in range(n - k + 1):\n        p.append(k - j)\n    print(*p)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    num = []\n    la = 2 * k - n\n    i = 1\n    while i < la:\n        num.append(i)\n        i += 1\n    while k >= la:\n        num.append(k)\n        k -= 1\n    print(*num)", "R = lambda : list(map(int, input().split()))\nfor _ in ' ' * int(input()):\n    (n, k) = R()\n    a = [i + 1 for i in range(k)]\n    a = a[:2 * k - n - 1] + a[2 * k - n - 1:][::-1]\n    print(*a)", "case = int(input())\nfor i in range(case):\n    (n, k) = map(int, input().strip().split())\n    rem = n - k\n    ara = [i for i in range(1, k - (rem + 1) + 1)]\n    num = k\n    for i in range(rem + 1):\n        ara.append(num)\n        num -= 1\n    print(*ara)", "def factorial(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n    return fact\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    d = 2 * k - n - 1\n    for i in range(1, d + 1):\n        print(i, end=' ')\n    for i in range(k, d, -1):\n        print(i, end=' ')\n    print()\n    t -= 1", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().strip().split())\n    a = [0 for i in range(k)]\n    index = 0\n    for i in range(1, 2 * k - n):\n        a[index] = i\n        index += 1\n    for i in range(k, 2 * k - n - 1, -1):\n        a[index] = i\n        index += 1\n    print(*a)", "t = int(input())\nfor i in range(t):\n    inp = input()\n    (n, k) = [int(it) for it in inp.split(' ')]\n    p = []\n    p1_len = 2 * k - n\n    l = list(range(1, p1_len))\n    for j in range(n - k + 1):\n        l.append(k - j)\n    print(*l)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n == k:\n        print(*[i for i in range(1, n + 1)])\n    else:\n        for i in range(1, 2 * k - n):\n            print(i, end=' ')\n        j = k\n        while j >= 2 * k - n:\n            print(j, end=' ')\n            j -= 1\n        print()", "for _ in ' ' * int(input()):\n    (n, k) = map(int, input().split())\n    a = [i for i in range(1, 2 * k - n)]\n    for i in range(n - k + 1):\n        a.append(k - i)\n    print(*a)", "def solve():\n    (n, k) = map(int, input().split())\n    x = k - (n - k) - 1\n    for i in range(1, x + 1):\n        print(i, end=' ')\n    for i in range(k, x + 1 - 1, -1):\n        print(i, end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    ans = []\n    for i in range(2 * k - n - 1):\n        ans.append(i + 1)\n    for i in range(k, 2 * k - n - 1, -1):\n        ans.append(i)\n    print(*ans)", "t = int(input())\nimport math\nwhile t > 0:\n    t -= 1\n    (n, d) = input().split()\n    (n, k) = (int(n), int(d))\n    dif = n - k\n    i = 0\n    while i < k - dif - 1:\n        print(i + 1, end=' ')\n        i += 1\n    j = k\n    while j > i:\n        print(j, end=' ')\n        j -= 1\n    print()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    for i in range(1, k - (n - k)):\n        print(i, end=' ')\n    for i in range(k, k - (n - k) - 1, -1):\n        print(i, end=' ')\n    print()", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    m = n - k\n    for i in range(1, k - m):\n        print(i, end=' ')\n    for i in range(k, k - m - 1, -1):\n        print(i, end=' ')\n    print()\n    t -= 1", "import math\nimport heapq\n\ndef S():\n    return input()\n\ndef M():\n    return map(int, input().split())\n\ndef I():\n    return int(S())\n\ndef L():\n    return list(M())\nfor _ in range(I()):\n    (n, k) = M()\n    if n - k + 1 >= k:\n        for i in range(k, 0, -1):\n            print(i, end=' ')\n    else:\n        for i in range(1, k - (n - k + 1) + 1):\n            print(i, end=' ')\n        for i in range(k, k - n + k - 1, -1):\n            print(i, end=' ')\n    print()", "t = int(input())\nfor j in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    n = l1[0]\n    k = l1[1]\n    p = []\n    for i in range(1, 2 * k - n):\n        p.append(i)\n    for i in range(k, 2 * k - n - 1, -1):\n        p.append(i)\n    for i in p:\n        print(i, end=' ')\n    print()", "rn = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrns = lambda : map(int, input().split())\nrs = lambda : input()\nyn = lambda x: print('Yes') if x else print('No')\nYN = lambda x: print('YES') if x else print('NO')\nfor _ in range(rn()):\n    (n, k) = rns()\n    pre = n - k\n    ans = []\n    for i in range(1, k - pre):\n        ans.append(i)\n    for i in range(k, k - pre - 1, -1):\n        ans.append(i)\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    diff = n - k\n    p = [i for i in range(1, k + 1)]\n    p = p[:2 * k - n - 1] + p[2 * k - n - 1:][::-1]\n    for i in p:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [0] * k\n    inverted = n - k\n    l = k\n    for i in range(k):\n        if k - inverted > i + 1:\n            arr[i] = i + 1\n        else:\n            arr[i] = l\n            l -= 1\n    print(*arr, sep=' ')", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    res = []\n    for i in range(1, 2 * k - n):\n        res.append(i)\n    for i in range(k, -1, -1):\n        res.append(i)\n    for i in range(k):\n        print(res[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [i for i in range(1, k + 1)]\n    for i in range(0, 2 * k - n - 1):\n        print(arr[i], end=' ')\n    for i in range(k - 1, 2 * k - n - 2, -1):\n        print(arr[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = k * 2 - n - 1\n    for i in range(1, x + 1):\n        print(i, end=' ')\n    for i in range(k, x, -1):\n        print(i, end=' ')\n    print('')", "n = int(input())\nfor i in range(0, n):\n    o = input().rstrip().split(' ')\n    N = int(o[0])\n    K = int(o[1])\n    if N == K:\n        for j in range(1, K + 1):\n            print(j, end=' ')\n        print()\n    else:\n        T = K - (N - K)\n        H = K - T\n        L = [0] * K\n        for j in range(len(L) - 1, -1, -1):\n            if H > 0:\n                H -= 1\n            else:\n                L[j] = K\n                G = j\n                break\n        E = 1\n        for j in range(0, G):\n            L[j] = E\n            E += 1\n        E = K - 1\n        for j in range(G + 1, len(L)):\n            L[j] = E\n            E -= 1\n        print(*L)", "try:\n    t = int(input())\n    while t != 0:\n        (n, k) = map(int, input().split())\n        if n == k:\n            arr = []\n            for i in range(1, n + 1):\n                arr.append(i)\n            print(*arr)\n        else:\n            arr = []\n            less = n - k\n            for i in range(1, k + 1):\n                arr.append(i)\n            put = k\n            for i in range(k - 1 - less, k):\n                arr[i] = put\n                put -= 1\n            print(*arr)\n        t -= 1\nexcept EOFError:\n    print(' ')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    inv = (n - k) * (n - k + 1) - (n - k)\n    i1 = 1\n    k1 = n - k\n    i2 = k\n    for i in range(k):\n        if k - i <= k1 + 1:\n            print(i2, end=' ')\n            i2 -= 1\n        else:\n            print(i1, end=' ')\n            i1 += 1\n    print()", "t = int(input())\nfor i in range(t):\n    nk = [int(x) for x in input().split()]\n    n = nk[0]\n    k = nk[1]\n    for j in range(k + k - (n + 1)):\n        print(j + 1, end=' ')\n    for j in range(n + 1 - k):\n        print(k - j, end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    if n == k:\n        ans = [i + 1 for i in range(k)]\n        print(*ans)\n    else:\n        t = 2 * k - n - 1\n        ans = [i + 1 for i in range(t)]\n        temp = []\n        for i in range(t, k):\n            temp.append(i + 1)\n        temp.sort(reverse=True)\n        ans += temp\n        print(*ans)", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    val = k\n    ans = [i + 1 for i in range(k)]\n    for i in range(k - (n - k) - 1, k):\n        ans[i] = val\n        val -= 1\n    print(*ans)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = n - k\n    for i in range(1, k + 1):\n        if i < k - x:\n            print(i, end=' ')\n        else:\n            print(k - x + k - i, end=' ')\n    print()", "for i1 in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = 2 * k - n\n    l = []\n    for i in range(1, x):\n        l.append(i)\n    y = k\n    for i in range(n - k + 1):\n        l.append(y)\n        y = y - 1\n    for i in l:\n        print(i, end=' ')\n    print()", "T = int(input())\nwhile T > 0:\n    T = T - 1\n    (n, k) = map(int, input().split())\n    for i in range(1, 2 * k - n):\n        print(i, end=' ')\n    for i in range(k, 2 * k - n - 1, -1):\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = k - (n - k) - 1\n    for i in list(range(1, x + 1)) + list(range(k, x, -1)):\n        print(i, end=' ')\n    print()", "try:\n    t = int(input())\n    while t != 0:\n        (n, k) = map(int, input().split())\n        if n == k:\n            arr = [i + 1 for i in range(n)]\n            print(*arr)\n        else:\n            arr = []\n            less = n - k\n            for i in range(1, k + 1):\n                arr.append(i)\n            put = k\n            for i in range(k - 1 - less, k):\n                arr[i] = put\n                put -= 1\n            print(*arr)\n        t -= 1\nexcept EOFError:\n    print(' ')", "import sys\nfrom collections import Counter, deque\nfrom functools import lru_cache\nimport heapq as hp\nsys.setrecursionlimit(500005)\nstdin = sys.stdin\nni = lambda : int(ns())\nna = lambda : list(map(int, stdin.readline().split()))\nns = lambda : stdin.readline().strip()\nt = ni()\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nwhile t:\n    (n, k) = na()\n    arr = list(range(1, n + 1))\n    tmp = k - (n - k)\n    for i in range(1, tmp):\n        print(i, end=' ')\n    for i in range(tmp, k + 1):\n        print(k + tmp - i, end=' ')\n    print()\n    t -= 1", "def solve():\n    (n, k) = map(int, input().split())\n    pos = 2 * k - n - 1\n    a = [0] * k\n    p = k\n    for i in range(pos, pos + n - k):\n        a[i] = p\n        p -= 1\n    p = 1\n    for i in range(k):\n        if a[i] == 0:\n            a[i] = p\n            p += 1\n    print(*a)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\nimport math\ninf = float('inf')\n\ndef lcm(a, b):\n    return int(a / math.gcd(a, b) * b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    perm = [0] * k\n    diff = n - k + 1\n    if diff == 0:\n        ans = [i for i in range(1, k + 1)]\n        print(*ans)\n    else:\n        z = k\n        for i in range(k - diff, k):\n            perm[i] = z\n            z -= 1\n        for i in range(k - diff):\n            perm[i] = i + 1\n        print(*perm)"]