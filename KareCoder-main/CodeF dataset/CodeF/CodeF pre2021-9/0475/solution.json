["def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    A = ord('a')\n    b = [0] * 5\n    r = [0] * 5\n    d = [[] for i in range(5)]\n    for i in range(n):\n        c = [0] * 5\n        for v in input().strip():\n            c[ord(v) - A] += 1\n        l = sum(c)\n        for j in range(5):\n            v = 2 * c[j] - l\n            if v >= 0:\n                b[j] += v\n                r[j] += 1\n            else:\n                d[j].append(-v)\n    for j in range(5):\n        if b[j] == 0:\n            r[j] = 0\n        else:\n            d[j].sort()\n            for v in d[j]:\n                if b[j] - v > 0:\n                    b[j] -= v\n                    r[j] += 1\n                else:\n                    break\n    print(max(r))\nfor i in range(int(input())):\n    solve()", "def getint():\n    return [int(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\nset_n = ('a', 'b', 'c', 'd', 'e')\n\ndef solve():\n    n = int(input())\n    words = [''] * n\n    for i in range(n):\n        words[i] = input()\n    ans = 0\n    for main_v in set_n:\n        arr = sorted([2 * x.count(main_v) - len(x) for x in words], reverse=True)\n        sum_n = 0\n        c = 0\n        for a in arr:\n            if sum_n + a <= 0:\n                break\n            sum_n += a\n            c += 1\n        ans = max(ans, c)\n    print(ans)\n    return\nfor _ in range(T):\n    solve()", "def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "def solve():\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for ch in 'abcde':\n        cnt = sorted([2 * word.count(ch) - len(word) for word in words])\n        (balance, res) = (0, 0)\n        for k in cnt[::-1]:\n            balance += k\n            res += 1\n            if balance <= 0:\n                res -= 1\n                break\n        ans = max(ans, res)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    w = []\n    for i in range(n):\n        s = input()\n        w.append(s)\n    ans = 0\n    for c in 'abcde':\n        wc = [word.count(c) * 2 - len(word) for word in w]\n        wc.sort(reverse=True)\n        p = 0\n        res = 0\n        for e in wc:\n            p += e\n            if p > 0:\n                res += 1\n            else:\n                break\n        if res > ans:\n            ans = res\n    print(ans)", "answers = []\nfor _ in range(int(input())):\n    n = int(input())\n    words = [input() for i in range(n)]\n    ans = 0\n    for i in 'abcde':\n        counts = sorted([-len(word) + 2 * word.count(i) for word in words])[::-1]\n        (su, n) = (0, 0)\n        for count in counts:\n            su += count\n            n += 1\n            if su <= 0:\n                n -= 1\n                break\n        ans = max(ans, n)\n    answers.append(ans)\nfor ans in answers:\n    print(ans)", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    res = 0\n    for c in ['a', 'b', 'c', 'd', 'e']:\n        t = 0\n        r = 0\n        for w in sorted(words, key=lambda x: 2 * x.count(c) - len(x), reverse=True):\n            r += 2 * w.count(c) - len(w)\n            if r <= 0:\n                break\n            t += 1\n        res = max(res, t)\n    print(res)", "def count_letter(char, word):\n    count = 0\n    for c in word:\n        if c == char:\n            count += 1\n    return 2 * count - len(word)\n\ndef solve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        word = input()\n        words.append(word)\n    max_count = 0\n    for char in ['a', 'b', 'c', 'd', 'e']:\n        temp = []\n        for word in words:\n            temp.append(count_letter(char, word))\n        temp.sort(reverse=True)\n        if temp[0] <= 0:\n            continue\n        count = 0\n        local_max = 0\n        for num in temp:\n            local_max += num\n            if local_max > 0:\n                count += 1\n            else:\n                break\n        max_count = max(max_count, count)\n    print(max_count)\nt = 1\nt = int(input())\nfor i in range(t):\n    solve()", "why_cant_you_take_inputs_while_printing_in_pycharm_it_is_so_annoying = [[input() for i in range(int(input()))] for _ in range(int(input()))]\nfor words in why_cant_you_take_inputs_while_printing_in_pycharm_it_is_so_annoying:\n    maxes = []\n    for letter in 'abcde':\n        vals = sorted([2 * i.count(letter) - len(i) for i in words])[::-1]\n        pi = ''\n        storyL = 0\n        storyB = 0\n        for i in vals:\n            if storyB + i > 0:\n                storyB += i\n                storyL += 1\n        maxes.append(storyL)\n    print(max(maxes))", "def count_letter(char, word):\n    count = 0\n    for c in word:\n        if c == char:\n            count += 1\n    return 2 * count - len(word)\n\ndef solve():\n    n = int(input())\n    words = []\n    for _ in range(n):\n        word = input()\n        words.append(word)\n    max_count = 0\n    for char in ['a', 'b', 'c', 'd', 'e']:\n        temp = []\n        for word in words:\n            temp.append(count_letter(char, word))\n        temp.sort(reverse=True)\n        if temp[0] <= 0:\n            continue\n        count = 0\n        local_max = 0\n        for num in temp:\n            local_max += num\n            if local_max > 0:\n                count += 1\n            else:\n                break\n        max_count = max(max_count, count)\n    print(max_count)\nt = 1\nt = int(input())\nfor i in range(t):\n    solve()", "num_cases = int(input())\nletters = ['a', 'b', 'c', 'd', 'e']\nfor _ in range(num_cases):\n    num_words = int(input())\n    words = [input() for x in range(num_words)]\n    ans = 0\n    for letter in letters:\n        counts = [2 * word.count(letter) - len(word) for word in words]\n        counts.sort(reverse=True)\n        tot_sum = 0\n        for (num, val) in enumerate(counts):\n            if tot_sum + val > 0:\n                tot_sum += val\n            else:\n                ans = max(num, ans)\n                break\n            if num == len(counts) - 1:\n                ans = len(counts)\n    print(ans)", "from typing import overload\ntestcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    words = []\n    s_a = []\n    s_b = []\n    s_c = []\n    s_d = []\n    s_e = []\n    max_words = 0\n    for i in range(n):\n        s = input()\n        words.append(s)\n        ll = len(s)\n        s_a.append(s.count('a') * 2 - ll)\n        s_b.append(s.count('b') * 2 - ll)\n        s_c.append(s.count('c') * 2 - ll)\n        s_d.append(s.count('d') * 2 - ll)\n        s_e.append(s.count('e') * 2 - ll)\n    s_a.sort(reverse=True)\n    s_b.sort(reverse=True)\n    s_c.sort(reverse=True)\n    s_d.sort(reverse=True)\n    s_e.sort(reverse=True)\n    k = [s_a, s_b, s_c, s_d, s_e]\n    for i in k:\n        if i[0] <= 0:\n            continue\n        temp_max_words = 0\n        overhead = 0\n        for j in i:\n            overhead += j\n            if overhead <= 0:\n                break\n            temp_max_words += 1\n        max_words = max(max_words, temp_max_words)\n    print(max_words)", "t = int(input())\n\ndef solve(arr, letter):\n    di = {}\n    for word in arr:\n        c = 0\n        for let in word:\n            if let == letter:\n                c = c + 1\n            else:\n                c = c - 1\n        di[c] = di.get(c, 0) + 1\n    cur = 0\n    res = 0\n    for i in sorted(di.keys(), reverse=True):\n        for j in range(di[i]):\n            if cur + i <= 0:\n                break\n            else:\n                cur = cur + i\n                res = res + 1\n    return res\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        s = input()\n        arr.append(s)\n    lets = ['a', 'b', 'c', 'd', 'e']\n    ans = 0\n    for let in lets:\n        ans = max(ans, solve(arr, let))\n    print(ans)", "def f(s, c):\n    return 2 * s.count(c) - len(s)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    words = []\n    for j in range(n):\n        word = input().strip()\n        words.append(word)\n        max_r = 0\n    for c in ['a', 'b', 'c', 'd', 'e']:\n        vals = sorted(list(map(lambda w: f(w, c), words)), reverse=True)\n        if vals[0] <= 0:\n            r = 0\n        else:\n            r = 1\n            s = vals[0]\n            while r < n and s > 0:\n                s += vals[r]\n                r += 1\n            if s <= 0:\n                r -= 1\n        if r > max_r:\n            max_r = r\n    print(max_r)", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = [list(input().strip()) for _ in range(n)]\n    m = 0\n    for i in 'abcde':\n        d = []\n        s = 0\n        c = 0\n        for j in a:\n            d.append(2 * j.count(i) - len(j))\n        d.sort(reverse=True)\n        for k in d:\n            s += k\n            if s > 0:\n                c += 1\n            else:\n                break\n        m = max([m, c])\n    ans.append(m)\nprint('\\n'.join(map(str, ans)))", "for _ in range(int(input())):\n    (word_a, word_b, word_c, word_d, word_e) = ([], [], [], [], [])\n    for _ in range(int(input())):\n        word = input()\n        (a, b, c, d, e) = (0, 0, 0, 0, 0)\n        for w in word:\n            if w == 'a':\n                a += 1\n            elif w == 'b':\n                b += 1\n            elif w == 'c':\n                c += 1\n            elif w == 'd':\n                d += 1\n            else:\n                e += 1\n        word_a.append(a - (len(word) - a))\n        word_b.append(b - (len(word) - b))\n        word_c.append(c - (len(word) - c))\n        word_d.append(d - (len(word) - d))\n        word_e.append(e - (len(word) - e))\n    (word_a, word_b, word_c, word_d, word_e) = (sorted(word_a), sorted(word_b), sorted(word_c), sorted(word_d), sorted(word_e))\n    n_words = 0\n    word_t = [word_a, word_b, word_c, word_d, word_e]\n    for f in range(5):\n        t = 0\n        for x in range(len(word_a) - 1, -1, -1):\n            if word_t[f][x] + t > 0:\n                t += word_t[f][x]\n            else:\n                t += word_t[f][x]\n                n_words = max(n_words, len(word_a) - x - 1)\n                break\n        if t > 0:\n            n_words = max(n_words, len(word_a) - x)\n    print(n_words)", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\ndic = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}\nfor _ in range(int(input())):\n    ans = 0\n    words = []\n    for __ in range(int(input())):\n        temp = [0] * 5\n        for i in input():\n            temp[dic[i]] += 1\n        words.append(temp)\n    for i in range(5):\n        temp = 0\n        n = 0\n        switch = True\n        for j in sorted(list(map(lambda x: sum(x) - 2 * x[i], words))):\n            temp -= j\n            n += 1\n            if temp <= 0:\n                switch = False\n                break\n        ans = max(ans, n - 1 + switch)\n    print(ans)", "import sys\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [list(input()) for i in range(n)]\n    m = 0\n    for i in 'abcde':\n        d = []\n        for j in a:\n            d.append(2 * j.count(i) - len(j))\n        d.sort(reverse=True)\n        s = 0\n        c = 0\n        for k in d:\n            s += k\n            if s > 0:\n                c += 1\n            else:\n                break\n        m = max([m, c])\n    print(m)\n    t -= 1", "t = int(input())\nletter = ['a', 'b', 'c', 'd', 'e']\nfor case in range(t):\n    n = int(input())\n    story = []\n    interesting = 0\n    for i in range(n):\n        story.append(input())\n    for a in letter:\n        pq = []\n        for s in story:\n            pq.append(len(s) - 2 * s.count(a))\n        pq = sorted(pq)\n        (tracker, flag) = (0, 0)\n        for t in range(n):\n            tracker += pq[t]\n            if tracker < 0:\n                flag += 1\n            else:\n                break\n        interesting = max(interesting, flag)\n    print(interesting)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for i in range(n)]\n    res = 0\n    for i in 'abcde':\n        temp = []\n        tot = 0\n        cnt = 0\n        for s in a:\n            temp.append(2 * s.count(i) - len(s))\n        temp.sort(reverse=True)\n        for k in temp:\n            tot += k\n            if tot <= 0:\n                break\n            cnt += 1\n        res = max(res, cnt)\n    print(res)", "from itertools import accumulate\nfor _ in range(int(input())):\n    r = {'a': [], 'b': [], 'c': [], 'd': [], 'e': []}\n    for _ in range(int(input())):\n        s = input()\n        for key in r:\n            r[key].append(2 * s.count(key) - len(s))\n    for key in r:\n        if sum(r[key]) > 0:\n            r[key] = len(r[key])\n        else:\n            r[key] = sum((x > 0 for x in accumulate(sorted(r[key], reverse=True))))\n    print(max(r.values()))", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    s = list()\n    cnt = list(([0] * 6 for i in range(n)))\n    for i in range(n):\n        s.append(input())\n        for ch in s[i]:\n            cnt[i][ord(ch) - ord('a') + 1] += 1\n        cnt[i][0] = len(s[i])\n    res = 0\n    for i in range(1, 6):\n        cnt.sort(key=lambda x: 2 * x[i] - x[0], reverse=True)\n        sum = 0\n        j = 0\n        while j < n:\n            sum += 2 * cnt[j][i] - cnt[j][0]\n            if sum <= 0:\n                break\n            j += 1\n        res = max(res, j)\n    print(res)\nfor t in range(int(input())):\n    charming()", "letters = ['a', 'b', 'c', 'd', 'e']\nt = int(input())\nresults = []\nfor i in range(t):\n    n = int(input())\n    sequences = {}\n    for letter in letters:\n        sequences[letter] = [0] * n\n    for j in range(n):\n        word = input()\n        length = len(word)\n        for letter in letters:\n            count = word.count(letter)\n            sequences[letter][j] = 2 * count - length\n    res = 0\n    for letter in letters:\n        sequences[letter].sort(reverse=True)\n        current_count = sequences[letter][0]\n        if current_count <= 0:\n            continue\n        j = 1\n        while j < n and current_count + sequences[letter][j] >= 1:\n            current_count += sequences[letter][j]\n            j += 1\n        res = max(res, j)\n    results.append(res)\nfor i in range(t):\n    print(results[i])", "def process_word(word):\n    count = [0, 0, 0, 0, 0]\n    for i in word:\n        if i == 'a':\n            count[0] += 1\n        elif i == 'b':\n            count[1] += 1\n        elif i == 'c':\n            count[2] += 1\n        elif i == 'd':\n            count[3] += 1\n        else:\n            count[4] += 1\n    s = sum(count)\n    return [2 * i - s for i in count]\n\ndef process(n, words):\n    counts = []\n    to_return = [0] * 5\n    for i in words:\n        counts.append(process_word(i))\n    for i in range(5):\n        counts.sort(key=lambda x: x[i], reverse=True)\n        if counts[0][i] < 1:\n            pass\n        else:\n            counter = 1\n            index = 1\n            negative = counts[0][i]\n            while index < n:\n                negative += counts[index][i]\n                index += 1\n                if negative > 0:\n                    counter += 1\n                else:\n                    break\n            to_return[i] = counter\n    return max(to_return)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    words = []\n    for j in range(n):\n        words.append(input())\n    print(process(n, words))", "t = int(input())\n\ndef gain(words, n):\n    gains = [[], [], [], [], []]\n    for word in words:\n        freq = [0, 0, 0, 0, 0]\n        length = len(word)\n        for e in word:\n            freq[ord(e) - ord('a')] += 1\n        for i in range(5):\n            gains[i].append(2 * freq[i] - length)\n    for i in range(0, 5):\n        gains[i].sort(reverse=True)\n    return gains\noutput = []\nfor c in range(0, t):\n    n = int(input())\n    words = []\n    for i in range(0, n):\n        words.append(input())\n    ans = 0\n    gains = gain(words, n)\n    for i in range(5):\n        sum = 0\n        for j in range(n):\n            sum += gains[i][j]\n            if sum <= 0:\n                ans = max(j, ans)\n                break\n            else:\n                ans = max(j + 1, ans)\n    output.append(ans)\nfor e in output:\n    print(e)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    words = []\n    for i in range(n):\n        word = input()\n        words.append(word)\n    chars = ['a', 'b', 'c', 'd', 'e']\n    ans = 0\n    for ch in chars:\n        words.sort(key=lambda word: 2 * word.count(ch) - len(word), reverse=True)\n        net_rem_freq = 0\n        net_char_freq = 0\n        total_words = 0\n        for word in words:\n            net_char_freq += word.count(ch)\n            net_rem_freq += len(word) - word.count(ch)\n            if net_char_freq <= net_rem_freq:\n                break\n            total_words += 1\n        ans = max(ans, total_words)\n    print(ans)", "from itertools import accumulate\nfor _ in range(int(input())):\n    r = {'a': [], 'b': [], 'c': [], 'd': [], 'e': []}\n    for _ in range(int(input())):\n        s = input()\n        for key in r:\n            r[key].append(2 * s.count(key) - len(s))\n    for key in r:\n        if sum(r[key]) > 0:\n            r[key] = len(r[key])\n        else:\n            r[key] = sum((x > 0 for x in accumulate(sorted(r[key], reverse=True))))\n    print(max(r.values()))", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    l = [input() for i in range(n)]\n    ans = 0\n    for a in 'abcde':\n        count = []\n        for i in l:\n            c = 0\n            for x in i:\n                if x == a:\n                    c += 1\n                else:\n                    c -= 1\n            count.append(c)\n        count.sort(reverse=True)\n        temp = 0\n        pn = 0\n        for i in count:\n            pn += i\n            if pn > 0:\n                temp += 1\n            else:\n                break\n        ans = max(ans, temp)\n    print(ans)", "t = int(input())\nfor task in range(t):\n    n = int(input())\n    words = []\n    for i in range(5):\n        words.append([0] * n)\n    for i in range(n):\n        s = input()\n        for j in s:\n            words[ord(j) - ord('a')][i] += 2\n        for w in words:\n            w[i] -= len(s)\n    res = 0\n    for w in words:\n        w.sort(reverse=1)\n        if w[0] <= 0:\n            continue\n        tmpRes = 1\n        tmpSum = w[0]\n        for i in range(1, n):\n            if tmpSum > -w[i]:\n                tmpSum += w[i]\n                tmpRes += 1\n        if tmpRes > res:\n            res = tmpRes\n    print(res)", "def pretty_p(w):\n    return ''.join(('a' * w[1], 'b' * w[2], 'c' * w[3], 'd' * w[4], 'e' * w[5]))\nwords = []\n\ndef five_uple(word):\n    uple = [0] * 6\n    for w in word:\n        uple[ord(w) - ord('a') + 1] += 1\n    uple[0] = len(word)\n    return uple\n\ndef solve():\n    global words\n    n = int(input())\n    words = [five_uple(input()) for _ in range(n)]\n    words_in_interesting_story = 0\n    for index in range(1, 6):\n        words_in_this_story = 0\n        total_letters = 0\n        total_index_letter = 0\n        sorter = lambda x: 2 * x[index] - x[0]\n        words.sort(key=sorter, reverse=True)\n        for i in range(n):\n            total_letters += words[i][0]\n            total_index_letter += words[i][index]\n            if 2 * total_index_letter <= total_letters:\n                break\n            words_in_this_story += 1\n        words_in_interesting_story = max(words_in_interesting_story, words_in_this_story)\n    return words_in_interesting_story\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor asifjalfjalfjaflj in range(t):\n    n = int(input())\n    words = []\n    for _ in range(n):\n        word = input()\n        words.append(word)\n    max_count = 0\n    for char in 'abcde':\n        temp = []\n        for word in words:\n            temp.append(2 * word.count(char) - len(word))\n        temp.sort(reverse=True)\n        if temp[0] <= 0:\n            continue\n        count = 0\n        local_max = 0\n        for num in temp:\n            local_max += num\n            if local_max > 0:\n                count += 1\n            else:\n                break\n        max_count = max(max_count, count)\n    print(max_count)", "for _ in range(int(input())):\n    n = int(input())\n    mai = []\n    for i in range(n):\n        mai.append(input())\n    word = 'abcde'\n    ans = 0\n    for i in word:\n        confirm = 0\n        pos = 0\n        neg = []\n        flag = False\n        for j in mai:\n            xx = j.count(i)\n            le = len(j) - xx\n            if xx > le:\n                flag = True\n            if xx >= le:\n                confirm += 1\n                pos += xx - le\n            else:\n                neg.append(le - xx)\n        neg.sort()\n        for i in neg:\n            if pos >= i:\n                pos -= i\n                confirm += 1\n            else:\n                break\n        if pos == 0:\n            if flag:\n                ans = max(ans, confirm - 1)\n        else:\n            ans = max(ans, confirm)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = []\n    ans = 0\n    for _ in range(0, n):\n        x = input().strip()\n        s.append(x)\n    for i in 'abcde':\n        d = []\n        count = 0\n        total = 0\n        for j in s:\n            diff = 2 * j.count(i) - len(j)\n            d.append(diff)\n        d.sort(reverse=True)\n        for k in d:\n            total += k\n            if total > 0:\n                count += 1\n            else:\n                break\n        ans = max([ans, count])\n    print(ans)\n    t -= 1", "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    X = [None] * N\n    count = [0] * N\n    for i in range(N):\n        tmp = [0] * 5\n        for c in input():\n            tmp[ord(c) - ord('a')] += 1\n        s = sum(tmp)\n        count[i] = s\n        X[i] = [i * 2 - s for i in tmp]\n    max_l = 0\n    for target in range(5):\n        x = [i[target] for i in X]\n        x.sort(reverse=True)\n        if x[0] <= 0:\n            continue\n        c = 1\n        a = x[0]\n        while a > 0 and c < N:\n            a += x[c]\n            c += 1\n        max_l = max(max_l, c - (a <= 0))\n    print(max_l)", "def count_symbols(s):\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0}\n    for x in s:\n        d[x] += 1\n    return list(d.values())\n\ndef solve(a, n):\n    symb_am = []\n    for i in range(n):\n        symb_am.append([2 * x - len(a[i]) for x in count_symbols(a[i])])\n    mx = 0\n    for ltr in range(5):\n        s = sorted(symb_am, key=lambda x: x[ltr], reverse=True)\n        count = 0\n        for i in range(n):\n            count += s[i][ltr]\n            if count <= 0:\n                break\n        else:\n            return n\n        if i > mx:\n            mx = i\n    return mx\namount = int(input())\nres = []\nfor i in range(amount):\n    n = int(input())\n    a = []\n    for j in range(n):\n        a.append(input())\n    res.append(solve(a, n))\nprint('\\n'.join(map(str, res)))", "import typing\nimport sys\nfrom collections import Counter\n\ndef solve(n: int, a: typing.List[str]) -> typing.NoReturn:\n    l = [len(s) for s in a]\n    a = [Counter(s) for s in a]\n\n    def calc_max(letter: str) -> int:\n        b = [a[i][letter] * 2 - l[i] for i in range(n)]\n        b.sort(reverse=1)\n        s = 0\n        for i in range(n):\n            s += b[i]\n            if s <= 0:\n                return i\n        return n\n    mx = max((calc_max(letter) for letter in 'abcde'))\n    print(mx)\n    ...\n\ndef main() -> typing.NoReturn:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [sys.stdin.readline().rstrip() for _ in range(n)]\n        solve(n, a)\n        print()\nmain()", "def solve(arr, j):\n    am = 0\n    c = 0\n    marr = []\n    for el in arr:\n        k = 2 * el[j] - sum(el)\n        if k > 0:\n            am += 1\n            c += k\n        else:\n            marr.append(k)\n    marr.sort(reverse=True)\n    ind = 0\n    while c > 0 and ind < len(marr):\n        am += 1\n        c += marr[ind]\n        ind += 1\n    if c > 0:\n        return am\n    else:\n        return max(am - 1, 0)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    words = []\n    for j in range(n):\n        words.append(input())\n    array = [[0, 0, 0, 0, 0] for j in range(n)]\n    for j in range(n):\n        for k in words[j]:\n            if k == 'a':\n                array[j][0] += 1\n            elif k == 'b':\n                array[j][1] += 1\n            elif k == 'c':\n                array[j][2] += 1\n            elif k == 'd':\n                array[j][3] += 1\n            else:\n                array[j][4] += 1\n    res = [0, 0, 0, 0, 0]\n    for j in range(5):\n        res[j] += solve(array, j)\n    print(max(res))", "import sys\nimport math\nimport random\nfrom queue import PriorityQueue as PQ\nfrom bisect import bisect_left as BSL\nfrom bisect import bisect_right as BSR\nfrom collections import OrderedDict as OD\nfrom collections import Counter\nfrom itertools import permutations\nmod = 1000000007\nsys.setrecursionlimit(1000000)\ntry:\n    sys.stdin = open('actext.txt', 'r')\n    OPENFILE = 1\nexcept:\n    pass\n\ndef get_ints():\n    return map(int, input().split())\n\ndef palindrome(s):\n    mid = len(s) // 2\n    for i in range(mid):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef check(i, n):\n    if 0 <= i < n:\n        return True\n    else:\n        return False\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    maxans = 0\n    present_char = ('a', 'b', 'c', 'd', 'e')\n    for ch in present_char:\n        temp_arr = []\n        for i in words:\n            c = 0\n            for j in i:\n                if j == ch:\n                    c += 1\n                else:\n                    c -= 1\n            temp_arr.append(c)\n        temp_arr.sort(reverse=True)\n        ans = 0\n        sm = 0\n        for i in temp_arr:\n            sm += i\n            if sm <= 0:\n                break\n            ans += 1\n        maxans = max(ans, maxans)\n    print(maxans)", "for cycle in range(int(input())):\n    words = []\n    sums = []\n    for i in range((n := int(input()))):\n        word = input()\n        words.append({j: 0 for j in 'abcde'})\n        sums.append(0)\n        for l in word:\n            words[-1][l] += 1\n            sums[-1] += 1\n    remember = -1\n    for ultrakrutoivascheletter in 'abcde':\n        razn = sorted([words[i][ultrakrutoivascheletter] - (sums[i] - words[i][ultrakrutoivascheletter]) for i in range(n)], reverse=1)\n        moesupervazhnoeznachenie = 0\n        i = 0\n        while i < n and moesupervazhnoeznachenie + razn[i] > 0:\n            moesupervazhnoeznachenie += razn[i]\n            i += 1\n        remember = max(remember, i)\n    print(remember)", "MULTIPLE_CASE = True\n\ndef get_res(data, index) -> int:\n    a = []\n    for i in data:\n        temp = 0\n        for j in i:\n            temp -= j\n        temp += i[index] * 2\n        a.append(temp)\n    a.sort(reverse=True)\n    if a[0] <= 0:\n        return 0\n    count = 0\n    sum = 0\n    for i in a:\n        if sum + i > 0:\n            sum += i\n            count += 1\n        else:\n            return count\n    return count\n\ndef solve():\n    n = int(input())\n    data = []\n    for i in range(n):\n        s = str(input())\n        a = [0] * 5\n        for j in s:\n            a[ord(j) - ord('a')] += 1\n        data.append(a)\n    res = 0\n    for i in range(5):\n        res = max(res, get_res(data, i))\n    print(res)\nT = 1\nif MULTIPLE_CASE:\n    T = int(input())\nwhile T > 0:\n    T -= 1\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    v = []\n    for j in range(n):\n        v.append(input())\n    ans = 0\n    for j in ['a', 'b', 'c', 'd', 'e']:\n        srt = []\n        for h in range(len(v)):\n            srt.append(2 * v[h].count(j) - len(v[h]))\n        srt.sort(reverse=True)\n        now = 0\n        nowans = 0\n        for h in srt:\n            now += h\n            if now > 0:\n                nowans += 1\n        ans = max(ans, nowans)\n    print(ans)", "r = list('abcde')\nfor _ in range(int(input())):\n    l = [[], [], [], [], []]\n    for y in range(int(input())):\n        t = input()\n        tl = len(t)\n        for x in range(5):\n            p = t.count(r[x])\n            l[x].append(p - (tl - p))\n    p = 0\n    for x in l:\n        c = 0\n        ans = 0\n        t = []\n        for y in x:\n            if y > 0:\n                ans += 1\n                c += y\n            else:\n                t.append(y)\n        t.sort(reverse=True)\n        for x in t:\n            if x + c > 0:\n                ans += 1\n                c += x\n            else:\n                break\n        p = max(p, ans)\n    print(p)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        temp = [0, 0, 0, 0, 0, 0]\n        st = input()\n        for j in st:\n            if j == 'a':\n                temp[0] += 1\n            elif j == 'b':\n                temp[1] += 1\n            elif j == 'c':\n                temp[2] += 1\n            elif j == 'd':\n                temp[3] += 1\n            elif j == 'e':\n                temp[4] += 1\n        temp[-1] = sum(temp)\n        arr.append(temp)\n    ans = 0\n    for i in range(5):\n        c = []\n        loc = 0\n        count = 0\n        for k in range(len(arr)):\n            c.append(2 * arr[k][i] - arr[k][-1])\n        c.sort(reverse=True)\n        for j in c:\n            if loc + j > 0:\n                count += 1\n                loc += j\n            else:\n                break\n        ans = max(ans, count)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [input() for _ in range(n)]\n    mx = 0\n    for c in ['a', 'b', 'c', 'd', 'e']:\n        narr = []\n        for w in arr:\n            cd = cnd = 0\n            for c2 in w:\n                if c2 == c:\n                    cd += 1\n                else:\n                    cnd += 1\n            narr.append(cd - cnd)\n        narr.sort(reverse=True)\n        s = i = 0\n        while i < len(narr) and s + narr[i] > 0:\n            s += narr[i]\n            i += 1\n        mx = max(mx, i)\n    print(mx)", "def solve(n, arr):\n    sorted_arr = [[0 for _ in range(5)] for _ in range(n)]\n    for x in range(n):\n        length = len(arr[x])\n        for i in range(5):\n            sorted_arr[x][i] = 2 * arr[x].count(chr(97 + i)) - length\n    best = 0\n    for x in range(5):\n        sorted_arr = sorted(sorted_arr, key=lambda i: i[x], reverse=True)\n        curr = 0\n        check = False\n        for i in range(n):\n            curr += sorted_arr[i][x]\n            if curr < 1:\n                best = max(best, i)\n                check = True\n                break\n        if not check:\n            print(n)\n            return\n    print(best)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    solve(n, arr)", "for _ in range(int(input())):\n    n = int(input())\n    sete = [input() for _ in range(n)]\n    cl = []\n    for i in range(n):\n        cl.append({'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'len': 0})\n        for j in sete[i]:\n            cl[i][j] += 1\n            cl[i]['len'] += 1\n    maxb = 0\n    for b in ['a', 'b', 'c', 'd', 'e']:\n        pref = 0\n        xk = 0\n        qw = 0\n        for i in sorted(cl, key=lambda x: x[b] + x[b] - x['len'], reverse=True):\n            if xk + i[b] > pref + i['len'] - i[b]:\n                xk += i[b]\n                pref += i['len'] - i[b]\n                qw += 1\n            else:\n                break\n        maxb = max(maxb, qw)\n    print(maxb)", "t = int(input())\n\ndef get_ans(arr, val):\n    li = []\n    for word in arr:\n        (cnt1, cnt2) = (0, 0)\n        for ch in word:\n            if ch == val:\n                cnt1 += 1\n            else:\n                cnt2 += 1\n        li.append([cnt1, cnt2, cnt1 - cnt2])\n    li = sorted(li, key=lambda x: x[2], reverse=True)\n    rem = 0\n    ans = 0\n    for l in li:\n        dif = l[2]\n        if dif > 0:\n            ans += 1\n            rem += dif\n        elif rem + dif > 0:\n            rem += dif\n            ans += 1\n        else:\n            break\n    return ans\nwhile t:\n    n = int(input())\n    arr = []\n    while n:\n        arr.append(input())\n        n -= 1\n    print(max(get_ans(arr, 'a'), get_ans(arr, 'b'), get_ans(arr, 'c'), get_ans(arr, 'd'), get_ans(arr, 'e')))\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(input())\n    ans = 0\n    for i in range(5):\n        s = chr(ord('a') + i)\n        b = []\n        for j in range(len(l)):\n            k = l[j].count(s)\n            t = len(l[j]) - k\n            b.append(k - t)\n        b.sort(reverse=True)\n        cur = 0\n        for j in range(len(b)):\n            cur += b[j]\n            if cur > 0:\n                ans = max(ans, j + 1)\n            else:\n                break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    w = ['a', 'b', 'c', 'd', 'e']\n    ans = 0\n    for i in range(5):\n        tar = w[i]\n        al = []\n        for j in words:\n            l = list(j)\n            n1 = len(l)\n            al.append(2 * l.count(tar) - n1)\n        al.sort()\n        al = al[::-1]\n        flag = 0\n        j = 0\n        for j in range(1, n):\n            al[j] = al[j - 1] + al[j]\n            if al[j] <= 0:\n                flag = 1\n                break\n        if flag == 0:\n            if al[-1] > 0:\n                j += 1\n        if al[0] <= 0:\n            j = 0\n        ans = max(ans, j)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    sete = [input() for _ in range(n)]\n    cl = []\n    for i in range(n):\n        cl.append({'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'len': 0})\n        for j in sete[i]:\n            cl[i][j] += 1\n            cl[i]['len'] += 1\n    maxb = 0\n    for b in ['a', 'b', 'c', 'd', 'e']:\n        pref = 0\n        xk = 0\n        qw = 0\n        for i in sorted(cl, key=lambda x: x[b] + x[b] - x['len'], reverse=True):\n            if xk + i[b] > pref + i['len'] - i[b]:\n                xk += i[b]\n                pref += i['len'] - i[b]\n                qw += 1\n            else:\n                break\n        maxb = max(maxb, qw)\n    print(maxb)", "from collections import Counter\nfrom itertools import accumulate, takewhile\nalphabet = 'abcde'\nfor _ in range(int(input())):\n    deltas = {letter: [] for letter in alphabet}\n    for i in range(int(input())):\n        word = input()\n        counter = Counter(word)\n        for letter in alphabet:\n            deltas[letter].append(2 * counter.get(letter, 0) - len(word))\n    print(max((len(list(takewhile(lambda x: x > 0, accumulate(sorted(xs, reverse=True))))) for xs in deltas.values())))", "for _ in range(int(input())):\n    n = int(input())\n    l = [[0, 0, 0, 0, 0] for i in range(n)]\n    for i in range(n):\n        ch = input()\n        for j in ch:\n            if j == 'a':\n                l[i][0] += 1\n            elif j == 'b':\n                l[i][1] += 1\n            elif j == 'c':\n                l[i][2] += 1\n            elif j == 'd':\n                l[i][3] += 1\n            elif j == 'e':\n                l[i][4] += 1\n    maxi = 0\n    for i in range(5):\n        t = []\n        for j in l:\n            t.append(j[i] - (j[i - 1] + j[i - 2] + j[i - 3] + j[i - 4]))\n        t.sort(reverse=True)\n        n = len(t)\n        if t[0] <= 0:\n            continue\n        if maxi == 0:\n            somme = t[0]\n            maxi = 1\n            i = 1\n        else:\n            somme = sum(t[:maxi])\n            i = maxi\n        while i < n:\n            a = t[i]\n            if somme + a > 0:\n                somme += a\n                maxi += 1\n            else:\n                break\n            i += 1\n    print(maxi)", "tt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    ll = []\n    calc = []\n    for i in range(n):\n        word = input()\n        ll.append(word)\n        num = [0] * 5\n        for c in word:\n            i = ord(c) - ord('a')\n            num[i] += 1\n        calc.append(num)\n    w = [0] * 5\n    for k in range(5):\n        q = []\n        for num in calc:\n            q.append(sum(num) - 2 * num[k])\n        q.sort()\n        res = 0\n        i = 0\n        while i < n and res + q[i] < 0:\n            res += q[i]\n            i += 1\n        w[k] = i\n    print(max(w))", "def f(string, c):\n    return 2 * string.count(c) - len(string)\n\ndef func(x):\n    a = sum(x)\n    ans = len(x)\n    while a <= 0:\n        try:\n            a -= x.pop(-1)\n            ans -= 1\n        except:\n            break\n    return ans\nfor _ in range(int(input())):\n    lis = [[], [], [], [], []]\n    for _ in range(int(input())):\n        x = input()\n        a = ['a', 'b', 'c', 'd', 'e']\n        for i in range(5):\n            lis[i].append(f(x, a[i]))\n    for i in range(len(lis)):\n        lis[i].sort(reverse=True)\n    (a, b, c, d, e) = map(func, lis)\n    print(max(a, b, c, d, e))", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    d = {l: [0, 0, defaultdict(int)] for l in ['a', 'b', 'c', 'd', 'e']}\n    n = int(input())\n    for _ in range(n):\n        this_word = {l: 0 for l in ['a', 'b', 'c', 'd', 'e']}\n        s = input()\n        for l in s:\n            this_word[l] += 1\n        for l in ['a', 'b', 'c', 'd', 'e']:\n            if this_word[l] >= len(s) - this_word[l]:\n                d[l][0] += 2 * this_word[l] - len(s)\n                d[l][1] += 1\n            else:\n                d[l][2][len(s) - 2 * this_word[l]] += 1\n    ans = {l: d[l][1] if d[l][0] > 0 else 0 for l in ['a', 'b', 'c', 'd', 'e']}\n    for l in ['a', 'b', 'c', 'd', 'e']:\n        val = d[l][0]\n        j = 1\n        if val > 0:\n            while True:\n                if j >= val:\n                    break\n                if j in d[l][2]:\n                    if d[l][2][j] * j >= val:\n                        ans[l] += (val - 1) // j\n                        break\n                    else:\n                        ans[l] += d[l][2][j]\n                        val -= d[l][2][j] * j\n                j += 1\n    print(max(ans.values()))", "def per(let):\n    return 2 * let[i] - let[5]\nfor _ in range(int(input())):\n    n = int(input())\n    cook = []\n    ans = [0]\n    for _ in range(n):\n        var = input()\n        val = [var.count(_) for _ in ['a', 'b', 'c', 'd', 'e']]\n        val.append(len(var))\n        cook.append(val)\n    for i in range(5):\n        ssum = 0\n        number = 0\n        cook.sort(key=per, reverse=True)\n        for j in range(len(cook)):\n            ssum += per(cook[j])\n            if ssum <= 0:\n                break\n            number += 1\n        ans.append(number)\n    print(max(ans))", "from collections import *\nfrom math import *\nTT = int(input())\nfor y in range(TT):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        lst.append([0] * 5)\n    for i in range(n):\n        s = input()\n        ln = len(s)\n        lst[i][0] = s.count('a') * 2 - ln\n        lst[i][1] = s.count('b') * 2 - ln\n        lst[i][2] = s.count('c') * 2 - ln\n        lst[i][3] = s.count('d') * 2 - ln\n        lst[i][4] = s.count('e') * 2 - ln\n    maxx = 0\n    for i in range(5):\n        temp = []\n        for j in range(n):\n            temp.append(lst[j][i])\n        temp.sort(reverse=True)\n        cc = 0\n        for k in range(n):\n            cc = cc + temp[k]\n            if cc > 0:\n                maxx = max(maxx, k + 1)\n            else:\n                break\n    print(maxx)", "for _ in range(int(input())):\n    tot = int(input())\n    arr = []\n    for x in range(tot):\n        arr.append(input())\n    mar = []\n    ctar = []\n    for x in arr:\n        tpr = []\n        tpr.append(x.count('a'))\n        tpr.append(x.count('b'))\n        tpr.append(x.count('c'))\n        tpr.append(x.count('d'))\n        tpr.append(x.count('e'))\n        ctar.append(tpr)\n    for x in range(5):\n        tpr = []\n        for y in ctar:\n            a = 2 * y[x] - sum(y)\n            tpr.append(a)\n        tpr.sort(reverse=True)\n        ct = 0\n        sm = 0\n        for y in tpr:\n            sm += y\n            ct += 1\n            if sm <= 0:\n                ct -= 1\n                break\n        mar.append(ct)\n    print(max(mar))", "from collections import Counter\nfrom sys import stdin\ninput = stdin.readline\n\ndef seq(ch):\n    new_seq = [2 * word[0][ch] - word[1] for word in words]\n    new_seq.sort(reverse=True)\n    amt = 0\n    num_word = 0\n    for i in new_seq:\n        if amt + i > 0:\n            amt += i\n            num_word += 1\n    return num_word\n\ndef func():\n    print(max(seq('a'), seq('b'), seq('c'), seq('d'), seq('e')))\nfor _ in range(int(input())):\n    ans = 0\n    n = int(input())\n    words = []\n    for __ in range(n):\n        word = input().strip()\n        words.append((Counter(word), len(word)))\n    func()", "from collections import Counter\nfrom math import *\nimport sys\nmod = 1000000007\n\ndef pro(arr):\n    n = len(arr)\n    freq = []\n    for i in range(n):\n        freq.append([0] * 5)\n    cand = [0] * n\n    for i in range(n):\n        maxi = 0\n        for j in arr[i]:\n            x = ord(j) - 97\n            freq[i][x] += 1\n        c1 = max(freq[i])\n        if c1 <= sum(freq[i]) - c1:\n            cand[i] = -1\n        else:\n            ind = freq[i].index(c1)\n            cand[i] = ind\n    fin = 0\n    for p in range(5):\n        temp = []\n        for i in range(n):\n            temp.append(freq[i][p] - (sum(freq[i]) - freq[i][p]))\n        temp.sort(reverse=True)\n        c = 0\n        sumi = 0\n        for i in temp:\n            sumi += i\n            if sumi > 0:\n                c += 1\n        fin = max(fin, c)\n    print(fin)\n\ndef check(a, b, k):\n    temp = [0] * 5\n    for i in range(5):\n        temp[i] = a[i] + b[i]\n    c1 = sum(temp)\n    return temp[k] > c1 - temp[k]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for j in range(n):\n        arr.append(input())\n    pro(arr)", "from collections import defaultdict\nfrom heapq import heapify, heappop, heappush\nimport sys\ninput = sys.stdin.readline\n\ndef S():\n    return input()\n\ndef I():\n    return int(S())\n\ndef M():\n    return map(int, S().split())\n\ndef L():\n    return list(M())\nt = int(input())\nfor p in range(t):\n    n = I()\n    words = []\n    for i in range(n):\n        words.append(list(S()[:-1]))\n    table = [[0] * 6 for _ in range(n)]\n    letters = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}\n    for (idx, i) in enumerate(words):\n        for j in i:\n            table[idx][letters[j]] += 1\n            table[idx][5] += 1\n    ans = 0\n    for i in range(5):\n        freq = []\n        for j in range(n):\n            diff = table[j][i] - (table[j][5] - table[j][i])\n            freq.append(diff)\n        freq.sort(reverse=True)\n        p = 0\n        curr = 0\n        for z in range(n):\n            curr += freq[z]\n            if curr > 0:\n                p += 1\n            else:\n                break\n        ans = max(ans, p)\n    print(ans)", "t = int(input())\nfrom collections import defaultdict\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for x in range(n):\n        val = input()\n        arr.append(val)\n    maxi = 0\n    for var in ('a', 'b', 'c', 'd', 'e'):\n        memo = {}\n        for x in range(n):\n            memo[arr[x]] = arr[x].count(var)\n        arr = sorted(arr, key=lambda x: -(x.count(var) - (len(x) - memo[x])))\n        ans = 0\n        counta = 0\n        rem = 0\n        for i in range(0, len(arr)):\n            counta += memo[arr[i]]\n            rem += len(arr[i]) - memo[arr[i]]\n            if counta - rem <= 0:\n                break\n            ans += 1\n        maxi = max(maxi, ans)\n    print(maxi)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    y = [[0 for i in range(5)] for j in range(n)]\n    for i in range(n):\n        s = input()\n        for j in s:\n            y[i][ord(j) - 97] += 1\n    x = ['a', 'b', 'c', 'd', 'e']\n    ans = []\n    for i in range(5):\n        z = []\n        for j in range(n):\n            z.append(2 * y[j][i] - sum(y[j]))\n        z.sort(reverse=True)\n        s = 0\n        e = 0\n        for m in range(n):\n            if s + z[m] > 0:\n                e += 1\n                s += z[m]\n            else:\n                break\n        ans.append(e)\n    print(max(ans))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lt = ['a', 'b', 'c', 'd', 'e']\n    arr = [[], [], [], [], []]\n    for i in range(n):\n        st = input()\n        for j in range(5):\n            cnt = st.count(lt[j])\n            arr[j].append(2 * cnt - len(st))\n    for i in range(5):\n        arr[i].sort(reverse=True)\n    ans = -1\n    cnt = [0, 0, 0, 0, 0]\n    for i in range(n):\n        for j in range(5):\n            cnt[j] += arr[j][i]\n            if cnt[j] > 0:\n                ans = max(ans, i)\n    print(ans + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    storage = []\n    for __ in range(n):\n        word = input()\n        wl = len(word)\n        counter = [0] * 5\n        for i in range(wl):\n            counter[ord(word[i]) - 97] += 1\n        final_counter = [0] * 5\n        for i in range(5):\n            final_counter[i] = 2 * counter[i] - wl\n        storage.append(final_counter)\n    ans = 0\n    for j in range(5):\n        v = []\n        count = 0\n        minians = 0\n        for i in range(n):\n            if storage[i][j] > 0:\n                count = count + storage[i][j]\n                minians += 1\n            else:\n                v.append(storage[i][j])\n        v.sort(reverse=True)\n        p = 0\n        ll = n - minians\n        while p < ll and count + v[p] > 0:\n            count = count + v[p]\n            minians += 1\n            p = p + 1\n        ans = max(ans, minians)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom collections import Counter\nfor _ in range(rn()):\n    n = rn()\n    words = [rs() for i in range(n)]\n    ans = 0\n    d = [Counter(word) for word in words]\n    for char in ['a', 'b', 'c', 'd', 'e']:\n        poss = 0\n        diffs = []\n        for i in range(n):\n            diff = len(words[i]) - 2 * d[i][char]\n            diffs.append(diff)\n        diffs.sort()\n        acc = 0\n        for i in range(n):\n            if acc + diffs[i] >= 0:\n                break\n            acc += diffs[i]\n            poss += 1\n        ans = max(ans, poss)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    numCollections = []\n    letters = ['a', 'b', 'c', 'd', 'e']\n    for l in letters:\n        numCollections.append([])\n    for j in range(n):\n        word = input()\n        mostCommon = Counter(word)\n        for l in range(len(letters)):\n            numCollections[l].append(mostCommon[letters[l]] - len(word) / 2)\n    for l in numCollections:\n        l.sort(reverse=True)\n    maxTotal = 0\n    for l in numCollections:\n        counter = 0\n        total = 0\n        for num in l:\n            total += num\n            if total <= 0:\n                break\n            else:\n                counter += 1\n        maxTotal = max(maxTotal, counter)\n    print(maxTotal)", "def solve(words):\n    freq = [[0] * 6 for i in range(len(words))]\n    for i in range(len(words)):\n        freq[i][0] = words[i].count('a')\n        freq[i][1] = words[i].count('b')\n        freq[i][2] = words[i].count('c')\n        freq[i][3] = words[i].count('d')\n        freq[i][4] = words[i].count('e')\n        freq[i][5] = len(words[i])\n    ans = 0\n    for i in range(5):\n        freq.sort(key=lambda x: x[i] - (x[5] - x[i]), reverse=True)\n        cnt = 0\n        rest = 0\n        miku = 0\n        for j in range(len(words)):\n            tmp = freq[j][i]\n            cnt += tmp\n            rest += freq[j][5] - tmp\n            miku += 1\n            if cnt > rest:\n                ans = max(ans, miku)\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    print(solve(words))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    sli = []\n    ans = 0\n    for i in range(n):\n        s = input()\n        sli.append(s)\n    ba = 'abcde'\n    for ke in ba:\n        targetList = []\n        for i in range(n):\n            originS = sli[i]\n            more = len(originS) - originS.count(ke) - originS.count(ke)\n            targetList.append((originS, more))\n        targetList = sorted(targetList, key=lambda t: t[1])\n        ians = 0\n        re = 0\n        for ti in targetList:\n            re += ti[1]\n            if re < 0:\n                ians += 1\n            else:\n                break\n        if ians > ans:\n            ans = ians\n    print(ans)", "from collections import Counter\n\ndef score(w, letter):\n    return counters[w][letter] - (len(w) - counters[w][letter])\n\ndef count_interesting_words(letter):\n    words.sort(key=lambda w: -score(w, letter))\n    beatiful_margin = 0\n    for (i, w) in enumerate(words):\n        beatiful_margin += score(w, letter)\n        if beatiful_margin < 1:\n            return i\n    return len(words)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    words = [input() for _ in range(n)]\n    counters = {word: Counter(word) for word in words}\n    best_per_letter = [count_interesting_words(let) for let in 'abcde']\n    print(max(best_per_letter))", "for _ in range(int(input())):\n    s = []\n    n = int(input())\n    for _ in range(n):\n        s.append(input())\n    t = [[0] * 5 for _ in range(n)]\n    for i in range(n):\n        z = [0] * 26\n        for j in range(len(s[i])):\n            z[ord(s[i][j]) - 97] += 1\n        for k in range(5):\n            t[i][k] = 2 * z[k] - len(s[i])\n    ans = 0\n    for k in range(5):\n        ba = []\n        vtx = ant = 0\n        for i in range(n):\n            ba.append(t[i][k])\n        ba.sort(reverse=True)\n        for i in range(n):\n            vtx += ba[i]\n            if vtx <= 0:\n                break\n            ant += 1\n        ans = max(ant, ans)\n    print(ans)", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    wrds = []\n    for _ in range(ipn()):\n        s = ip()\n        w = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0}\n        for i in s:\n            w[i] += 1\n        wrds.append(w)\n    r = 0\n    for l in 'abcde':\n        wrds.sort(key=lambda x: x[l] * 2 - sum(x.values()), reverse=True)\n        c = cnt = 0\n        x = 0\n        for w in wrds:\n            cnt = cnt - sum(w.values()) + 2 * w[l]\n            c += 1\n            if cnt > 0:\n                x = c\n        r = max(r, x)\n    print(r)\nt = ipn()\nfor _ in range(t):\n    solve()", "from sys import stdin\nfrom io import StringIO\nfrom collections import Counter\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = StringIO()\n\ndef lprint(*x):\n    for v in x:\n        output.write(str(v))\n        output.write(' ')\n    output.write('\\n')\n\ndef main():\n    d = [input() for _ in ' ' * int(input())]\n    a = [*map(Counter, d)]\n    ans = 0\n    for w in 'abcde':\n        a.sort(key=lambda x: 2 * x[w] - sum(x.values()), reverse=True)\n        s1 = a[0][w]\n        s2 = sum(a[0].values()) - s1\n        i = 1\n        while s2 < s1:\n            ans = max(i, ans)\n            if i == len(a):\n                lprint(i)\n                return\n            s1 += a[i][w]\n            s2 += sum(a[i].values()) - a[i][w]\n            i += 1\n    lprint(ans)\nfor _ in ' ' * int(input()):\n    main()\nprint(output.getvalue())", "for _ in range(int(input())):\n    n = int(input())\n    array = [[] for i in range(5)]\n    for i in range(n):\n        s = input()\n        length = s.__len__()\n        arr = [0] * 5\n        for j in range(length):\n            x = ord(s[j]) - ord('a')\n            for k in range(5):\n                if k == x:\n                    arr[k] += 1\n                else:\n                    arr[k] -= 1\n        for j in range(5):\n            array[j].append(arr[j])\n    for i in range(5):\n        array[i].sort()\n    maxi = 0\n    for i in range(5):\n        summa = 0\n        cnt = 0\n        for j in range(n - 1, -1, -1):\n            if summa + array[i][j] <= 0:\n                break\n            summa += array[i][j]\n            cnt += 1\n        maxi = max(maxi, cnt)\n    print(maxi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    occur = [[0 for _ in range(6)] for _ in range(n)]\n    temp = [[] for _ in range(5)]\n    for i in range(n):\n        word = list(input())\n        for letter in word:\n            if letter == 'a':\n                occur[i][0] += 1\n            if letter == 'b':\n                occur[i][1] += 1\n            if letter == 'c':\n                occur[i][2] += 1\n            if letter == 'd':\n                occur[i][3] += 1\n            if letter == 'e':\n                occur[i][4] += 1\n            occur[i][5] += 1\n        for j in range(5):\n            occur[i][j] = 2 * occur[i][j] - occur[i][5]\n            temp[j].append(occur[i][j])\n    max = None\n    for j in range(5):\n        temp[j].sort(reverse=True)\n        sum = 0\n        count = 0\n        for item in temp[j]:\n            sum += item\n            if sum <= 0:\n                break\n            else:\n                count += 1\n        if not max or max < count:\n            max = count\n    print(max)", "from sys import stdin\nfrom collections import defaultdict as dict, Counter\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = []\n\ndef lprint(*x):\n    output.append(' '.join(map(str, x)))\n\ndef main():\n    d = [input() for _ in ' ' * int(input())]\n    a = [*map(Counter, d)]\n    ans = 0\n    for w in 'abcde':\n        a.sort(key=lambda x: 2 * x[w] - sum(x.values()), reverse=True)\n        s1 = a[0][w]\n        s2 = sum(a[0].values()) - s1\n        i = 1\n        while s2 < s1:\n            ans = max(i, ans)\n            if i == len(a):\n                lprint(i)\n                return\n            s1 += a[i][w]\n            s2 += sum(a[i].values()) - a[i][w]\n            i += 1\n    lprint(ans)\nfor _ in ' ' * int(input()):\n    main()\nprint(*output, sep='\\n')", "import sys, heapq\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    ans = 0\n    for i in range(5):\n        h = []\n        t = 0\n        for j in arr:\n            a = 0\n            for k in j:\n                if ord(k) - ord('a') != i:\n                    a += 1\n                    t += 1\n                else:\n                    t -= 1\n                    a -= 1\n            heapq.heappush(h, -a)\n        res = n\n        while t >= 0 and h:\n            res -= 1\n            t += heapq.heappop(h)\n        ans = max(ans, res)\n    print(ans)", "def solve(mat, l, n):\n    r = ord(l) - ord('a')\n    mat.sort(key=lambda x: x[r] - (sum(x) - x[r]), reverse=True)\n    ans = 0\n    c = 0\n    rest = 0\n    for i in range(n):\n        c += mat[i][r]\n        rest += sum(mat[i]) - mat[i][r]\n        if c > rest:\n            ans = max(ans, i + 1)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        l = input()\n        a = 0\n        b = 0\n        c = 0\n        d = 0\n        e = 0\n        for j in l:\n            if j == 'a':\n                a += 1\n            elif j == 'b':\n                b += 1\n            elif j == 'c':\n                c += 1\n            elif j == 'd':\n                d += 1\n            else:\n                e += 1\n        mat.append([a, b, c, d, e])\n    print(max(solve(mat, 'a', n), solve(mat, 'b', n), solve(mat, 'c', n), solve(mat, 'd', n), solve(mat, 'e', n)))", "for _ in range(int(input())):\n    n = int(input())\n    lt = ['a', 'b', 'c', 'd', 'e']\n    arr = [[], [], [], [], []]\n    for i in range(n):\n        st = input()\n        for j in range(5):\n            cnt = st.count(lt[j])\n            arr[j].append(2 * cnt - len(st))\n    for i in range(5):\n        arr[i].sort(reverse=True)\n    ans = -1\n    cnt = [0, 0, 0, 0, 0]\n    for i in range(n):\n        for j in range(5):\n            cnt[j] += arr[j][i]\n            if cnt[j] > 0:\n                ans = max(ans, i)\n    print(ans + 1)", "import collections\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    n = int(input())\n    words = [input() for i in range(n)]\n    words = [collections.Counter(word) for word in words]\n    max_pick = 0\n    for primary_letter in ['a', 'b', 'c', 'd', 'e']:\n        diffs = []\n        for word in words:\n            diff = 0\n            for (letter, count) in word.items():\n                if letter == primary_letter:\n                    diff += count\n                else:\n                    diff -= count\n            diffs.append(diff)\n        diffs.sort(reverse=True)\n        diff_sum = 0\n        i = 0\n        while i < len(diffs) and diff_sum + diffs[i] > 0:\n            diff_sum += diffs[i]\n            i += 1\n        max_pick = max(max_pick, i)\n    print(max_pick)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n\n    def to_int(ch):\n        return ord(ch) - ord('a')\n    arr = [[None for _ in range(n)] for _ in range(5)]\n    for i in range(n):\n        s = input()\n        ls = [[0, len(s)] for _ in range(5)]\n        for x in s:\n            ls[to_int(x)][0] += 1\n        for j in range(5):\n            arr[j][i] = tuple(ls[j])\n    ans = 0\n    for i in range(5):\n        m = arr[i]\n        m.sort(key=lambda x: -2 * x[0] + x[1])\n        c = 0\n        (sa, sb) = (0, 0)\n        for (a, b) in m:\n            sa += a\n            sb += b\n            if sb >= sa * 2:\n                break\n            c += 1\n        ans = max(c, ans)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    arrIn = []\n    for j in range(x):\n        s = str(input())\n        arrIn.append(s)\n    wordsArr = []\n    alphabet = ['a', 'b', 'c', 'd', 'e']\n    for c in alphabet:\n        freq = []\n        for j in range(len(arrIn)):\n            char = 0\n            T = 0\n            for k in range(len(arrIn[j])):\n                if arrIn[j][k] == c:\n                    char = char + 1\n                else:\n                    T = T + 1\n            freq.append(char - T)\n        freq.sort()\n        freq.reverse()\n        Total = 0\n        words = 0\n        for h in range(len(freq)):\n            if freq[h] > 0:\n                Total = Total + freq[h]\n                words = words + 1\n            elif Total + freq[h] > 0:\n                Total = Total + freq[h]\n                words = words + 1\n            else:\n                break\n        wordsArr.append(words)\n    max = 0\n    for jkl in wordsArr:\n        if jkl > max:\n            max = jkl\n    print(max)", "def solve(n, strs):\n    ans = [0] * 5\n    for tomax in range(5):\n        tocheck = []\n        for i in range(n):\n            (sum1, sum2) = (0, 0)\n            for j in range(len(strs[i])):\n                if ord(strs[i][j]) - 97 == tomax:\n                    sum1 += 1\n                else:\n                    sum2 += 1\n            tocheck.append([sum1, sum2])\n        tocheck.sort(key=lambda x: x[0] - x[1], reverse=True)\n        tans = [0, 0]\n        for i in range(n):\n            tans[0] += tocheck[i][0]\n            tans[1] += tocheck[i][1]\n            if tans[0] > tans[1]:\n                ans[tomax] = i + 1\n            else:\n                break\n    return max(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    strs = []\n    for i in range(n):\n        strs.append(input())\n    print(solve(n, strs))", "from collections import defaultdict\n\ndef solve(pos):\n    ns = sorted(s, key=lambda x: (x[pos] - (sum(x) - x[5] - x[pos]), x[5]), reverse=True)\n    c = 0\n    tl = 0\n    cans = 0\n    ans = 0\n    for j in ns:\n        c += j[pos]\n        tl += sum(j) - j[-1]\n        cans += 1\n        if c >= tl // 2 + 1:\n            ans = max(cans, ans)\n        else:\n            break\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = []\n    for j in range(n):\n        d = defaultdict(lambda : 0)\n        a = input()\n        for k in a:\n            d[k] += 1\n        count = [d['a'], d['b'], d['c'], d['d'], d['e'], j]\n        s.append(count)\n    ans = 0\n    for j in range(5):\n        ans = max(solve(j), ans)\n    print(ans)", "from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\n\ndef sum_val(dic):\n    return sum((val for (key, val) in dic.items()))\n\ndef solve(dict, char):\n    arr = []\n    for (i, d) in dict.items():\n        val = sum_val(d)\n        if char in d:\n            arr.append(d[char] - val + d[char])\n        else:\n            arr.append(-val)\n    rev = sorted(arr, reverse=True)\n    presum = list(accumulate(rev))\n    return sum((1 for i in presum if i > 0))\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    freq = {}\n    for i in range(num):\n        s = input()\n        freq[i] = Counter(s)\n    ans = []\n    word = 'abcde'\n    for char in word:\n        ans.append(solve(freq, char))\n    print(max(ans))", "t = int(input())\nfor _ in range(t):\n    ovr = [0 for _ in range(5)]\n    ans = 0\n    n = int(input())\n    d = [[0 for _ in range(5)] for __ in range(n)]\n    for i in range(n):\n        a = [0 for _ in range(5)]\n        s = input()\n        for c in s:\n            ind = ord(c) - ord('a')\n            a[ind] += 1\n            ovr[ind] += 1\n        for j in range(5):\n            d[i][j] = sum(a) - 2 * a[j]\n    for i in range(5):\n        d = sorted(d, key=lambda x: x[i], reverse=True)\n        diff = ovr[i] - (sum(ovr) - ovr[i])\n        cnt = 0\n        for ar in d:\n            if diff > 0:\n                ans = max(ans, n - cnt)\n            diff += ar[i]\n            cnt += 1\n    print(ans)", "from math import floor, gcd, sqrt, ceil\nfrom collections import Counter, defaultdict\nfrom heapq import heapify, heappop, heappush\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        w = [list(input()) for i in range(n)]\n        m = []\n        for i in range(5):\n            c = chr(ord('a') + i)\n            heap = []\n            for i in range(n):\n                heap.append([len(w[i]) - w[i].count(c) - w[i].count(c), w[i].count(c), len(w[i])])\n            heapify(heap)\n            (char, totchar) = (0, 0)\n            ans = 0\n            while heap:\n                (x, y, z) = heappop(heap)\n                char += y\n                totchar += z - y\n                if char <= totchar:\n                    break\n                ans += 1\n            m.append(ans)\n        print(max(m))\nmain()", "def Funtion(word, char):\n    arrNum = [0, 0, 0, 0, 0]\n    for c in word:\n        arrNum[ord(c) - 97] += 1\n    a = 2 * arrNum[ord(char) - 97]\n    b = len(word)\n    return a - b\n\ndef FindMaxWords(arr, char):\n    arrFuntion = []\n    for word in arr:\n        arrFuntion.append(Funtion(word, char))\n    (arrFuntion, arr) = zip(*sorted(zip(arrFuntion, arr)))\n    count = 0\n    Sum = 0\n    arrFuntion = arrFuntion[::-1]\n    for i in range(len(arrFuntion)):\n        Sum += arrFuntion[i]\n        if Sum > 0:\n            count += 1\n        else:\n            return count\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for word in range(n):\n        new_word = input()\n        arr.append(new_word)\n    ans = FindMaxWords(arr, 'a')\n    for code in range(98, 102):\n        val = FindMaxWords(arr, chr(code))\n        if val > ans:\n            ans = val\n    print(ans)", "def solve(n, strs):\n    ans = [0] * 5\n    for tomax in range(5):\n        tocheck = []\n        for i in range(n):\n            (sum1, sum2) = (0, 0)\n            for j in range(len(strs[i])):\n                if ord(strs[i][j]) - 97 == tomax:\n                    sum1 += 1\n                else:\n                    sum2 += 1\n            tocheck.append([sum1, sum2])\n        tocheck.sort(key=lambda x: x[0] - x[1], reverse=True)\n        tans = [0, 0]\n        for i in range(n):\n            tans[0] += tocheck[i][0]\n            tans[1] += tocheck[i][1]\n            if tans[0] > tans[1]:\n                ans[tomax] = i + 1\n    return max(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    strs = []\n    for i in range(n):\n        strs.append(input())\n    print(solve(n, strs))", "T = int(input())\nfrom collections import Counter\nfor _ in range(T):\n    N = int(input())\n    S = [input() for i in range(N)]\n    ctrs = [Counter(s) for s in S]\n    ans = 0\n    for c in 'abcde':\n        arr = [(2 * ctrs[i][c] - len(S[i]), i) for i in range(N)]\n        arr.sort()\n        z = a = tmp = 0\n        while arr and (a + ctrs[arr[-1][1]][c]) * 2 > z + len(S[arr[-1][1]]):\n            (_, i) = arr.pop()\n            a += ctrs[i][c]\n            z += len(S[i])\n            tmp += 1\n            ans = max(ans, tmp)\n    print(ans)", "T = int(input())\nfor case in range(T):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    ans = 0\n    flag = True\n    for i in range(5):\n        ele = []\n        cyes = 0\n        cno = 0\n        for s in arr:\n            yes = s.count(chr(i + ord('a')))\n            no = len(s) - yes\n            ele.append((yes, no))\n            cyes += yes\n            cno += no\n        ele.sort(key=lambda x: [x[1] - x[0]])\n        if cyes > cno:\n            print(n)\n            flag = False\n            break\n        for i in range(len(ele) - 1, -1, -1):\n            cyes -= ele[i][0]\n            cno -= ele[i][1]\n            if cyes > cno:\n                ans = max(ans, i)\n    if flag:\n        print(ans)", "import sys, math\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nmod = 10 ** 9 + 7\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef li():\n    return list(map(int, input().split()))\n\ndef f(n, N, cnt):\n    lst = []\n    for i in range(N):\n        a = 0\n        b = 0\n        for j in range(5):\n            if j == n:\n                a += cnt[i][j]\n            else:\n                b += cnt[i][j]\n        lst.append([a, b])\n    lst.sort(reverse=True, key=lambda x: x[0] - x[1])\n    x = 0\n    a = 0\n    b = 0\n    for (i, j) in lst:\n        a += i\n        b += j\n        if b >= a:\n            break\n        x += 1\n    return x\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    words = [input() for _ in range(N)]\n    cnt = []\n    for i in words:\n        tmp = [0] * 5\n        for w in i:\n            tmp[ord(w) - 97] += 1\n        cnt.append(tmp)\n    ans = 0\n    for i in range(5):\n        ans = max(ans, f(i, N, cnt))\n    print(ans)"]