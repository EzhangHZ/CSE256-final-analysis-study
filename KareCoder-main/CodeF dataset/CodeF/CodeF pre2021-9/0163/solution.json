["import sys\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line)\nnumCases = int(inputs[0].strip())\nfor l in range(1, numCases + 1):\n    case = inputs[l].strip().split()\n    n = int(case[0])\n    m = int(case[1])\n    print(f'1 1 {n} {m}')", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for s in [*open(0)][1:]:\n    print('1 1', *s.split()[:2])", "import sys\nt = int(sys.stdin.readline())\nfor x in range(t):\n    (n, m, i, j) = map(int, sys.stdin.readline().split())\n    print(f'1 1 {n} {m}')", "ans = []\nfor _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    if a == b == 1 or (a == n and b == m):\n        (w, x, y, z) = (n, 1, 1, m)\n    elif a == 1 and b == m or (a == n and b == 1):\n        (w, x, y, z) = (1, 1, n, m)\n    else:\n        (w, x, y, z) = (1, 1, n, m)\n    ans.append(str(w) + ' ' + str(x) + ' ' + str(y) + ' ' + str(z))\nprint('\\n'.join(ans))", "t = int(input())\ni = 0\nA = []\nwhile 0 <= i < t:\n    i = i + 1\n    (m, n, a, b) = map(int, input().split())\n    l = str(m) + ' ' + str(1) + ' ' + str(1) + ' ' + str(n)\n    A.append(l)\nk = -1\nwhile -1 <= k < t - 1:\n    k = k + 1\n    print(A[k])", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "import sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nfrom itertools import permutations\nfrom math import gcd, log, comb, perm, factorial\nmod = int(1000000000.0 + 7)\ninf = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\nt = ii()\nfor _ in range(t):\n    (n, m, i, j) = li()\n    print(f'{1} {1} {n} {m}')", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "cases = int(input())\ngrid_list = []\nfor case in range(cases):\n    grid_list.append(list((int(x) for x in input().split())))\nfor grid in grid_list:\n    print('1 ' + '1 ' + str(grid[0]) + ' ' + str(grid[1]))", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for s in [*open(0)][1:]:\n    (n, m, i, j) = map(int, s.split())\n    print(1, 1, n, m)", "from sys import stdin\ninput = stdin.readline\nfrom itertools import accumulate\n\ndef solve():\n    (n, m, x, y) = [int(char) for char in input().split()]\n    return [1, 1, n, m]\nfor _ in range(int(input())):\n    print(*solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, i, j) = map(int, input().split())\n    return [1, 1, n, m]\nfor _ in range(int(input())):\n    print(*solve())", "t = int(input())\nl1 = []\nl2 = []\nl3 = []\nl4 = []\nfor k in range(t):\n    (n, m, i, j) = map(int, input().split())\n    l1.append(n)\n    l2.append(m)\n    l3.append(i)\n    l4.append(j)\nfor i in range(len(l1)):\n    print(1, 1, l1[i], l2[i])", "from sys import stdin\n\ndef A():\n    t = stdin.readline()\n    t = int(t)\n    while t:\n        k = stdin.readline()\n        n = [int(x) for x in stdin.readline().split()]\n        res = 0\n        for i in n:\n            res += i\n        k = len(n)\n        if res % k == 0 and res / k == 1:\n            print(0)\n        elif res < 0:\n            print(1)\n        elif res % k != 0:\n            print(res % k)\n        else:\n            print(res - res // k + 1)\n        t -= 1\n\ndef B():\n    t = stdin.readline()\n    t = int(t)\n    while t:\n        t -= 1\n        a = [int(x) for x in stdin.readline().split()]\n        (n, m, i, j) = (a[0], a[1], a[2], a[3])\n        (x1, y1, x2, y2) = (1, 1, n, m)\n        print(x1, y1, x2, y2)\nB()", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve():\n    pass\nfor _ in range(int(input())):\n    (x, y, i, j) = get_int()\n    print(1, 1, x, y)", "def is_first_case(n, m, i, j):\n    if i < n / 2:\n        if j < m / 2:\n            return 1\n        else:\n            return 0\n    elif j < m / 2:\n        return 0\n    else:\n        return 1\n\ndef define_positions(n, m, i, j):\n    if is_first_case(n, m, i, j):\n        return (1, m, n, 1)\n    else:\n        return (n, 1, 1, m)\nresult = []\nquantity_tests = int(input())\nfor test in range(quantity_tests):\n    args = list(map(int, input().split()))\n    result.append(' '.join(map(str, define_positions(*args))))\nprint('\\n'.join(result))", "for i in [*open(0)][1:]:\n    (a, b, *_) = i.split()\n    print(a, b, 1, 1)", "l = []\nt = int(input())\nfor ti in range(t):\n    x = [int(x) for x in input().split()]\n    l.append([x[0], x[1]])\nfor j in range(t):\n    print('1 1', l[j][0], l[j][1])", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "def badboy(n, m, i, j):\n    if i >= n // 2 and j >= m // 2 or (i < n // 2 and j < m // 2):\n        return str(n) + ' 1' + ' 1 ' + str(m)\n    elif i >= n // 2 and j < m // 2 or (i < n // 2 and j >= m // 2):\n        return '1 1 ' + str(n) + ' ' + str(m)\narr = []\nfor i in range(int(input())):\n    a = input().split()\n    arr.append(badboy(int(a[0]), int(a[1]), int(a[2]), int(a[3])))\nfor i in arr:\n    print(i)", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "IP = lambda : list(map(int, input().split()))\nfor i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m, i, j) = map(int, sys.stdin.readline().split())\n    print(f'1 1 {n} {m}')", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "t = int(input())\na = []\nfor _ in range(t):\n    (rs, cs, r, c) = [int(x) for x in input().split()]\n    co = [[1, 1], [1, cs], [rs, cs], [rs, 1]]\n    d = [r + c - 2, r - 1 + cs - c, rs - r + cs - c, rs - r + c - 1]\n    idx = -1\n    mx = 0\n    for i in range(4):\n        x = d[i]\n        if x > mx:\n            mx = x\n            idx = i\n    a.append(' '.join(map(str, co[idx] + co[(idx + 2) % 4])))\nprint('\\n'.join(a))", "for i in [*open(0)][1:]:\n    print(*i.split()[:2], 1, 1)", "for _ in range(int(input())):\n    (n, m, x, y) = map(int, input().split())\n    print(f'1 1 {n} {m}')", "howMany = int(input())\ne = []\nfor i in range(howMany):\n    (a, b, c, d) = input().split(' ')\n    e.append((int(a), int(b), 1, 1))\nfor i in e:\n    for j in i:\n        print(f'{j} ', end='')\n    print()", "n = int(input())\nans = []\nfor i in range(n):\n    (n, m, i, j) = input().split()\n    (n, m, i, j) = (int(n), int(m), int(i), int(j))\n    if i == 1 and j == 1 or (i == n and j == m):\n        k = [1, m, n, 1]\n        ans.append(k)\n    else:\n        k = [1, 1, n, m]\n        ans.append(k)\nfor i in range(len(ans)):\n    for ele in ans[i]:\n        print(ele, end=' ')\n    print(end='\\n')", "for run in range(int(input())):\n    (n, m, i, j) = map(int, input().split())\n    print(f'1 1 {n} {m}')", "testcases = int(input())\nresults = []\n\ndef dist_traveled(poss, i, j):\n    return abs(poss[0] - i) + abs(poss[1] - j) + abs(poss[2] - i) + abs(poss[2] - j)\nfor i in range(testcases):\n    [n, m, i, j] = [int(num) for num in input().split()]\n    poss1 = [1, 1, n, m]\n    poss2 = [n, 1, 1, m]\n    results.append(poss1 if dist_traveled(poss1, i, j) > dist_traveled(poss2, i, j) else poss2)\nfor i in results:\n    print(' '.join([str(num) for num in i]))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m, i, j) = map(int, input().split())\n    print(1, 1, n, m)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, m, i, j) = map(int, input().split())\n    x = y = 0\n    x = n if i <= n // 2 else 1\n    y = m if j <= m // 2 else 1\n    print(x, y, n - x + 1, m - y + 1)", "for s in [*open(0)][1:]:\n    (n, m, *_) = map(int, s.split())\n    print(1, 1, n, m)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m, i, j) = map(int, sys.stdin.readline().split())\n    print('1', '1', n, m)", "def process(n, m, i, j):\n    return (1, m, n, 1)\nt = int(input())\nans = []\nfor _ in range(t):\n    (n, m, i, j) = [int(i) for i in input().split(' ')]\n    ans.append(process(n, m, i, j))\nfor i in ans:\n    print(' '.join((str(j) for j in i)))", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    x = [int(_) for _ in input().split()]\n    print(1, 1, x[0], x[1])\ntt = int(input())\nfor test in range(tt):\n    solve()", "t = int(input())\nfor case in range(t):\n    (n, m, i, j) = map(int, input().split())\n    print('1 1 {} {}'.format(n, m))", "t = int(input())\nwhile t > 0:\n    x = list(map(int, input().split(' ')))\n    row = x[0]\n    col = x[1]\n    i = x[2]\n    j = x[3]\n    s = '1 1 ' + str(row) + ' ' + str(col)\n    print(s)\n    t -= 1", "t = int(input())\narr = []\nfor a in range(t):\n    (n, m, i, j) = tuple([int(x) for x in input().split()])\n    (x1, y1, x2, y2) = (0, 0, 0, 0)\n    if i > n / 2 and j > m / 2 or (i < n / 2 and j < m / 2):\n        x1 = n\n        x2 = 1\n        y1 = 1\n        y2 = m\n    else:\n        x1 = n\n        x2 = 1\n        y1 = m\n        y2 = 1\n    arr.append('{} {} {} {}'.format(x1, y1, x2, y2))\nfor element in arr:\n    print(element)", "num_test_cases = int(input())\nresults = []\nfor c in range(num_test_cases):\n    line = input()\n    (n, m, i, j) = line.split(sep=' ')\n    results.append([1, 1, n, m])\nfor l in results:\n    print(*l, sep=' ')", "import sys\n\ndef main():\n    pass\n\ndef binary(n):\n    return bin(n).replace('0b', '')\n\ndef decimal(s):\n    return int(s, 2)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    else:\n        root = int(n ** 0.5)\n        root += 1\n        for i in range(2, root):\n            if n % i == 0:\n                return False\n        return True\n\ndef lts(l):\n    s = ''.join(map(str, l))\n    return s\n1000000007\n\ndef func1(s1, s2):\n    for i in range(len(s1)):\n        if s[i] < s2[i]:\n            return s1\n        elif s[i] > s2[i]:\n            return s2\n    return s1\n\ndef func2(s, m):\n    st = ''\n    for i in range(m):\n        st += s[i % len(s)]\n    return st\nmod = int(1000000000.0) + 7\n\ndef sinp():\n    return sys.stdin.readline().strip()\n\ndef zinp():\n    return int(input())\n\ndef zzinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef llinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef p(xyz):\n    print(xyz)\n\ndef p2(a, b):\n    print(a, b)\nfor _ in range(zinp()):\n    (n, m, i, j) = zzinp()\n    if i <= n // 2 and j <= m // 2:\n        print(1, m, n, 1)\n    elif i >= n // 2 and j >= m // 2:\n        print(1, m, n, 1)\n    else:\n        print(1, 1, n, m)", "for iters in range(int(input())):\n    a = input()\n    (n, m, i, j) = a.split(' ')\n    print(n + ' 1 1 ' + m)", "for _ in range(int(input())):\n    x = input()\n    (n, m, i, j) = x.split(' ')\n    print('1 1 ' + n + ' ' + m)", "import sys\nfrom math import ceil, floor\nfrom collections import deque\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(get_ints())\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nT = int(input())\nwhile T > 0:\n    (n, m, i, j) = get_ints()\n    print(1, 1, n, m)\n    T -= 1", "t = int(input())\ninput_list = []\nwhile t > 0:\n    (n, m, i, j) = [int(x) for x in input().split()]\n    input_list.append([n, m, i, j])\n    t -= 1\n\ndef max_distance(length, sit):\n    if abs(length - sit) > sit:\n        position = length\n        sec_position = 1\n    else:\n        position = 1\n        sec_position = length\n    return (position, sec_position)\nfor item in input_list:\n    (x1, x2) = max_distance(item[0], item[2])\n    (y1, y2) = max_distance(item[1], item[3])\n    print(x1, y1, x2, y2)", "for _ in range(int(input())):\n    (n, m, i, j) = map(str, input().split())\n    if int(m) == 1 or int(n) == 1:\n        line = '1 1 ' + n + ' ' + m\n    elif i == 1:\n        line = n + ' 1 ' + n + ' ' + m\n    elif i == n:\n        line = '1 1 1 ' + m\n    else:\n        line = '1 1 ' + n + ' ' + m\n    print(line)", "for _ in range(int(input())):\n    n = input().split()\n    print(f'1 1 {n[0]} {n[1]}')", "for _ in range(int(input())):\n    (n, m, i, j) = map(int, input().split())\n    print('%d %d %d %d' % (1, 1, n, m))", "for i in range(int(input())):\n    a = list(map(str, input().split(' ')))\n    print(' '.join(a[0:2]) + ' 1' + ' 1')", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(case())\n\ndef case():\n    (n, m, i, j) = map(int, input().split())\n    if m - j > j - 1:\n        y1 = m\n    else:\n        y1 = 1\n    if n - i > i - 1:\n        x1 = n\n    else:\n        x1 = 1\n    if x1 == 1:\n        x2 = n\n    else:\n        x2 = 1\n    if y1 == 1:\n        y2 = m\n    else:\n        y2 = 1\n    return ' '.join(list(map(str, [x1, y1, x2, y2])))\nmain()", "num = int(input())\nfor i in range(num):\n    arr = input().split(' ')\n    print(arr[0], arr[1], 1, 1)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 1\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    (n, m, i, j) = map(int, t[0].split())\n    ans = []\n    ans.append(abs(1 - i) + abs(1 - j) + abs(n - i) + abs(m - j))\n    ans.append(abs(1 - i) + abs(m - j) + abs(n - i) + abs(1 - j))\n    tmp = [(1, 1, n, m), (1, m, n, 1)]\n    ans = sorted(range(len(ans)), key=lambda k: ans[k], reverse=True)\n    print(' '.join(map(str, tmp[ans[0]])))", "for i in range(int(input(''))):\n    (n, m, i, j) = map(int, input().split(' '))\n    print('1 {:d} {:d} 1'.format(m, n))", "for i in range(int(input())):\n    (n, m, x, y) = list(map(int, input().split()))\n    print('1 1 ' + str(n) + ' ' + str(m))", "t = int(input())\nfor oasdfj in range(t):\n    array = [int(x) for x in input().split()]\n    print(f'1 1 {array[0]} {array[1]}')", "import sys\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef N():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef take():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\ndef solve():\n    (n, m, i, j) = take()\n\n    def f(t):\n        return abs(t[0][0] - i) + abs(t[0][1] - j) + abs(t[1][0] - i) + abs(t[1][1] - j)\n    firster = [[1, 1], [n, m]]\n    seconder = [[1, m], [n, 1]]\n    if f(firster) <= f(seconder):\n        print(firster[0][0], firster[0][1], firster[1][0], firster[1][1])\n    else:\n        print(seconder[0][0], seconder[0][1], seconder[1][0], seconder[1][1])\ntestcase(N())", "t = int(input())\nl = []\nfor i in range(0, t):\n    l.append(list(map(int, input().split())))\nfor i in range(0, t):\n    if l[i][2] <= round(l[i][0] / 2):\n        if l[i][3] <= round(l[i][1] / 2):\n            print(l[i][0], 1, 1, l[i][1])\n        else:\n            print(1, 1, l[i][0], l[i][1])\n    elif l[i][3] <= round(l[i][1] / 2):\n        print(1, 1, l[i][0], l[i][1])\n    else:\n        print(l[i][0], 1, 1, l[i][1])", "t = int(input())\nanswers = []\nfor _ in range(t):\n    (n, m, i, j) = map(int, input().split(' '))\n    if n == 1:\n        answers.append((1, 1, 1, m))\n    else:\n        top_right_dist = i - 0 + (m - j)\n        bottom_left_dist = n - i + (j - 0)\n        top_left_dist = i - 0 + (j - 0)\n        bottom_right_dist = n - i + (m - j)\n        if top_right_dist + bottom_left_dist <= top_left_dist + bottom_right_dist:\n            answers.append((1, m, n, 1))\n        else:\n            answers.append((1, 1, n, m))\nfor answer in answers:\n    print(*answer)", "import sys, math\n\ndef scan():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solution():\n    for _ in range(int(input())):\n        (n, m, i, j) = scan()\n        x1 = 1 if i - 1 > n - i else n\n        x2 = n if i - 1 > n - i else 1\n        y1 = 1 if j - 1 > m - j else m\n        y2 = m if j - 1 > m - j else 1\n        print(x1, y1, x2, y2)\nsolution()", "t = int(input())\nfor u in range(0, t):\n    (n, m, i, j) = input().split()\n    print('1 1 ', end='')\n    print(n + ' ' + m)", "def solve(n, m, i, j):\n    res = '1 1 ' + str(n) + ' ' + str(m)\n    print(res)\nt = int(input())\nfor _ in range(t):\n    (n, m, i, j) = map(int, input().split())\n    solve(n, m, i, j)", "t = int(input())\noutput = []\nfor i in range(t):\n    (n, m, i, j) = list(map(int, input().split()))\n    if n - i < n / 2 and m - j > m / 2 or (n - i > n / 2 and m - j < m / 2):\n        output.append([n, 1, 1, m])\n    else:\n        output.append([1, 1, n, m])\nfor i in output:\n    for j in i:\n        print(j, end=' ')\n    print()", "n = int(input())\nposList = []\nfor i in range(n):\n    case = list(map(int, input().split()))\n    posCase = [1, 1, case[0], case[1]]\n    posList.append(posCase)\nfor i in range(n):\n    print(posList[i][0], posList[i][1], posList[i][2], posList[i][3])", "test_num = input()\nresult = []\nfor iters in range(int(test_num)):\n    [n, m, i, j] = input().split()\n    n = int(n)\n    m = int(m)\n    i = int(i)\n    j = int(j)\n    dot1 = [i, j]\n    if n - i >= i:\n        dot1[0] += n - i\n    else:\n        dot1[0] -= i - 1\n    if m - j >= j:\n        dot1[1] += m - j\n    else:\n        dot1[1] -= j - 1\n    (i, j) = (dot1[0], dot1[1])\n    dot2 = [i, j]\n    if n - i >= i:\n        dot2[0] += n - i\n    else:\n        dot2[0] -= i - 1\n    if m - j >= j:\n        dot2[1] += m - j\n    else:\n        dot2[1] -= j - 1\n    dot1.extend(dot2)\n    result.extend([dot1])\nfor elem_print in result:\n    print(*elem_print)", "t = int(input())\nfor i in range(t):\n    (n, m, i, j) = input().split()\n    print('1 1 ' + str(n) + ' ' + str(m))", "t = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2) = map(int, input().split())\n    print(1, 1, x1, y1)", "t = int(input())\nfor i in range(t):\n    (n, m, i, j) = map(int, input().split())\n    print(1, m, n, 1)", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    x = abs(1 - c)\n    y = abs(a - c)\n    if y >= x:\n        print(a, 1, 1, b)\n    else:\n        print(1, 1, a, b)", "import math\nt = int(input())\nwhile t:\n    (n, m, i, j) = map(int, input().split())\n    print(1, 1, n, m)\n    t -= 1", "for _ in range(int(input())):\n    (m, n, i, j) = map(int, input().split())\n    print(1, 1, m, n)", "for _ in range(int(input())):\n    (m, n, i, j) = map(int, input().split())\n    print(1, 1, m, n)", "import math\nt = int(input())\nwhile t:\n    (n, m, i, j) = list(map(int, input().split()))\n    print(1, m, n, 1)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, m, x, y) = map(int, input().split())\n    print(1, 1, n, m)", "t = int(input())\nfor _ in range(t):\n    (n, m, i, j) = list(map(int, input().split()))\n    print(1, 1, n, m)", "for _ in range(int(input())):\n    (n, m, i, j) = map(int, input().split())\n    print(1, 1, n, m)", "T = int(input())\nfor _ in range(T):\n    (n, m, x, y) = map(int, input().split())\n    print(1, 1, n, m)", "t = int(input())\nwhile t:\n    (a, b, c, d) = map(int, input().split())\n    print(1, 1, a, b)\n    t -= 1", "t = int(input())\ni = 0\nfor i in range(t):\n    (n, m, i, j) = map(int, input().split())\n    print('1 ' + '1 ' + str(n) + ' ' + str(m))", "t = int(input())\nfor _ in range(t):\n    (n, m, i, j) = list(map(int, input().split()))\n    print(1, 1, n, m)", "for _ in range(int(input())):\n    (n, m, i, j) = map(int, input().split())\n    print(1, 1, n, m)", "for x in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    print(1, 1, a, b)"]