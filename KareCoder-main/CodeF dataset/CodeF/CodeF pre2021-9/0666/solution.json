["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    S = set(arr)\n    exc = cnt1 = 0\n    for i in range(1, 2 * n + 1):\n        if i not in S:\n            exc += 1\n            continue\n        if exc:\n            cnt1 += 1\n            exc -= 1\n    f = n - cnt1\n    exc = cnt2 = 0\n    for i in range(2 * n, 0, -1):\n        if i not in S:\n            exc += 1\n            continue\n        if exc:\n            cnt2 += 1\n            exc -= 1\n    b = cnt2\n    return b - f + 1\nfor _ in range(int(input())):\n    print(solve())", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    lst = list(map(int, input().split()))\n    used = 0\n    smallest = m\n    for num in lst:\n        if num - 1 > used:\n            smallest -= 1\n            used += 2\n        else:\n            used += 1\n    used = 0\n    greatest = 0\n    for num in lst[::-1]:\n        if 2 * m - num > used:\n            greatest += 1\n            used += 2\n        else:\n            used += 1\n    print(greatest - smallest + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    max_force = 0\n    min_force = 0\n    legacy = 0\n    possibility = 0\n    for i in b:\n        jump = i - legacy - 1\n        possibility += jump\n        if possibility > 0:\n            possibility -= 1\n        else:\n            min_force += 1\n        legacy = i\n    possibility = 0\n    legacy = 2 * n + 1\n    for i in reversed(b):\n        jump = legacy - i - 1\n        possibility += jump\n        if possibility > 0:\n            possibility -= 1\n        else:\n            max_force += 1\n        legacy = i\n    print(n - max_force - min_force + 1)", "import sys\nimport math, bisect, operator\n(inf, m) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    n = int(input())\n    arr = [False] * (2 * n)\n    for x in input().split():\n        arr[int(x) - 1] = True\n    left = 0\n    available = 0\n    for x in arr:\n        if x:\n            available += 1\n        elif available:\n            available -= 1\n            left += 1\n    right = 0\n    available = 0\n    for x in reversed(arr):\n        if x:\n            available += 1\n        elif available:\n            available -= 1\n            right += 1\n    print(left - n + right + 1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    b = list(map(int, input().split()))\n    cnt = 0\n    last = 0\n    nans = 0\n    for i in b:\n        cnt += i - last - 1\n        if cnt > 0:\n            nans += 1\n            cnt -= 1\n        last = i\n    b.reverse()\n    xans = 0\n    cnt = 0\n    last = 2 * n + 1\n    for i in b:\n        cnt += last - i - 1\n        if cnt > 0:\n            xans += 1\n            cnt -= 1\n        last = i\n    xans = n - xans\n    print(abs(nans - xans) + 1)", "for z in range(int(input())):\n    n = int(input())\n    a = [1] * (2 * n)\n    for i in map(int, input().split()):\n        a[i - 1] = -1\n    x = 0\n    s = 0\n    for i in a:\n        if i < 0:\n            if s > 0:\n                x += 1\n                s -= 1\n        else:\n            s += 1\n    x = n - x\n    y = 0\n    s = 0\n    for j in range(2 * n - 1, -1, -1):\n        if a[j] < 0:\n            if s > 0:\n                y += 1\n                s -= 1\n        else:\n            s += 1\n    print(abs(x - y) + 1)", "for z in range(int(input())):\n    n = int(input())\n    a = [1] * (2 * n)\n    for i in map(int, input().split()):\n        a[i - 1] = -1\n    x = 0\n    s = 0\n    for i in a:\n        if i < 0:\n            if s > 0:\n                x += 1\n                s -= 1\n        else:\n            s += 1\n    x = n - x\n    y = 0\n    s = 0\n    for j in range(2 * n - 1, -1, -1):\n        if a[j] < 0:\n            if s > 0:\n                y += 1\n                s -= 1\n        else:\n            s += 1\n    if x < y:\n        (x, y) = (y, x)\n    print(x - y + 1)", "for z in range(int(input())):\n    n = int(input())\n    a = [1] * (2 * n)\n    for i in map(int, input().split()):\n        a[i - 1] = -1\n    x = 0\n    s = 0\n    for i in a:\n        if i < 0:\n            if s > 0:\n                x += 1\n                s -= 1\n        else:\n            s += 1\n    x = n - x\n    y = 0\n    s = 0\n    for j in range(2 * n - 1, -1, -1):\n        if a[j] < 0:\n            if s > 0:\n                y += 1\n                s -= 1\n        else:\n            s += 1\n    print(abs(x - y) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    (j, count) = (0, 0)\n    (bad_left, bad_right) = (0, 0)\n    for i in range(1, 2 * n + 1):\n        if j < n and b[j] == i:\n            j += 1\n            if count == 0:\n                bad_left += 1\n            else:\n                count -= 1\n        else:\n            count += 1\n    (j, count) = (n - 1, 0)\n    for i in range(2 * n, 0, -1):\n        if j > -1 and b[j] == i:\n            j -= 1\n            if count == 0:\n                bad_right += 1\n            else:\n                count -= 1\n        else:\n            count += 1\n    print(n + 1 - bad_left - bad_right)", "for tt in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = [1 for i in range(2 * n)]\n    for i in l:\n        k[i - 1] = -1\n    ans = n + 1\n    cnt = 0\n    mi = 0\n    for i in range(2 * n):\n        cnt += k[i]\n        mi = max(mi, -cnt)\n    ans -= mi\n    cnt = 0\n    mi = 0\n    for i in range(2 * n - 1, -1, -1):\n        cnt += k[i]\n        mi = max(mi, -cnt)\n    ans -= mi\n    print(max(0, ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = [-1] * (2 * n)\n    arr = [int(x) for x in input().split()]\n    for x in arr:\n        a[x - 1] = 1\n    mx = -float('inf')\n    mn = -mx\n    t = 0\n    for i in range(2 * n):\n        t += a[i]\n        mx = max(mx, t)\n    t = 0\n    for i in range(2 * n - 1, -1, -1):\n        t += a[i]\n        mn = min(mn, n - t)\n    print(mn - mx + 1)", "import sys\nt = int(sys.stdin.readline())\nfor ti in range(t):\n    n = int(sys.stdin.readline())\n    b = [int(a) for a in sys.stdin.readline().split()]\n    max_min = -1\n    min_max = n\n    prev = 0\n    E = n\n    U = 0\n    for i in range(n):\n        leaved = b[i] - prev - 1\n        prev = b[i]\n        U = max(0, U - leaved) + 1\n        E = E - leaved\n        if E > U:\n            max_min = i\n        elif E == U:\n            max_min = i\n            break\n        elif E < U:\n            break\n    E = n\n    U = 0\n    prev = 2 * n + 1\n    for i in range(n):\n        leaved = prev - b[n - i - 1] - 1\n        prev = b[n - i - 1]\n        U = max(0, U - leaved) + 1\n        E = E - leaved\n        if E > U:\n            min_max = n - i - 1\n        elif E == U:\n            min_max = n - i - 1\n            break\n        elif E < U:\n            break\n    print(max_min - min_max + 2)", "T = int(input())\nans = []\nfor t in range(T):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = []\n    cersol = 0\n    for i in range(1, 2 * n + 1):\n        if cersol < n and b[cersol] == i:\n            cersol += 1\n            continue\n        else:\n            a.append(i)\n    mi = 0\n    cersol = 0\n    for i in range(n):\n        for j in range(cersol, n):\n            cersol = j\n            if a[j] > b[i]:\n                cersol += 1\n                mi += 1\n                break\n    ma = 0\n    cersol = n - 1\n    for i in range(n - 1, -1, -1):\n        for j in range(cersol, -1, -1):\n            cersol = j\n            if a[j] < b[i]:\n                cersol -= 1\n                ma += 1\n                break\n    ma = n - ma\n    ans.append(mi - ma + 1)\nfor t in range(T):\n    print(ans[t])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    s = set(b)\n    arr = [1] * (2 * n)\n    pos = 0\n    mini = 0\n    for i in range(n):\n        pos = max(pos, b[i])\n        temp = pos\n        for j in range(pos, 2 * n):\n            if j + 1 not in s and arr[j] == 1:\n                mini += 1\n                arr[j] = 0\n                arr[b[i] - 1] = 0\n                pos = j + 1\n                break\n        if pos == temp:\n            pos = 2 * n\n    arr = [1] * (2 * n)\n    pos = 2 * n - 1\n    maxi = 0\n    for i in range(n - 1, -1, -1):\n        pos = min(pos, b[i] - 2)\n        temp = pos\n        for j in range(pos, -1, -1):\n            if j + 1 not in s and arr[j] == 1:\n                maxi += 1\n                arr[j] = 0\n                arr[b[i] - 1] = 0\n                pos = j - 1\n                break\n        if pos == temp:\n            pos = -1\n    maxi = n - maxi\n    print(mini - maxi + 1)", "def binarySearch(A, B, n):\n    (low, high) = (0, n)\n    while low < high:\n        mid = low + (high - low + 1) // 2\n        flag = 1\n        for index in range(mid):\n            if A[index] > B[n + index - mid]:\n                flag = 0\n        if flag == 0:\n            high = mid - 1\n        else:\n            low = mid\n    return low\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = 1\n    b = []\n    for em in a:\n        if em == num:\n            num += 1\n            continue\n        else:\n            for i in range(num, em):\n                b.append(i)\n            num = em + 1\n    for i in range(num, 2 * n + 1):\n        b.append(i)\n    index1 = binarySearch(a, b, n)\n    index2 = n - binarySearch(b, a, n)\n    print(max(0, index1 - index2 + 1))"]