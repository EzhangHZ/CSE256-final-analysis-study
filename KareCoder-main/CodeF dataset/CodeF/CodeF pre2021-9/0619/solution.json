["from bisect import *\nimport sys\nres = []\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    seg = [[0, 0] for _ in range(n)]\n    start = [0] * n\n    end = [0] * n\n    for x in range(n):\n        (i, j) = map(int, sys.stdin.readline().split())\n        (seg[x][0], seg[x][1]) = (i, j)\n        start[x] = i\n        end[x] = j\n    start.sort()\n    end.sort()\n    ans = 1000000000.0\n    for (i, j) in seg:\n        ans = min(ans, n - bisect_right(start, j) + bisect_left(end, i))\n    res.append(str(ans))\nprint('\\n'.join(res))", "from bisect import *\nimport sys\nres = []\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    seg = []\n    start = []\n    end = []\n    for _ in range(n):\n        (i, j) = map(int, sys.stdin.readline().split())\n        seg.append([i, j])\n        start.append(i)\n        end.append(j)\n    start.sort()\n    end.sort()\n    ans = 1000000000.0\n    for (i, j) in seg:\n        I = bisect_right(start, j)\n        J = bisect_left(end, i)\n        ans = min(ans, n - I + J)\n    res.append(str(ans))\nprint('\\n'.join(res))", "import sys\nimport math, bisect, operator\n(inf, mod) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\n\ndef overlap(v):\n    (x, y) = ([], [])\n    for (i, j) in v:\n        x += [i]\n        y += [j]\n    x.sort()\n    y.sort()\n    Ans = 0\n    for i in range(n):\n        (p, q) = (v[i][0], v[i][1])\n        r = bisect.bisect_right(x, q)\n        l = bisect.bisect_left(y, p)\n        Ans = max(Ans, r - l)\n    return Ans\nfor _ in range(I()):\n    n = I()\n    A = []\n    for i in range(n):\n        (l, r) = neo()\n        A += [(l, r)]\n    print(max(n - overlap(A), 0))", "import os, io, sys\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    r = []\n    a = []\n    for i in range(n):\n        (li, ri) = [int(i) for i in input().split()]\n        l.append(li)\n        r.append(ri)\n        a.append([li, ri])\n    l.sort()\n    r.sort()\n    cnt = n\n    for i in range(n):\n        cnt = min(cnt, n - bisect_right(l, a[i][1]) + bisect_left(r, a[i][0]))\n    print(cnt)", "import bisect\nt = int(input())\nfor _ in range(t):\n    segments = []\n    left = []\n    right = []\n    n = int(input())\n    for a_ in range(n):\n        (l, r) = map(int, input().split())\n        segments.append((l, r))\n        left.append(l)\n        right.append(r)\n    if n == 1:\n        print(0)\n        continue\n    left.sort()\n    right.sort()\n    min_deletion = n - 1\n    bad_segments = 0\n    for (li, ri) in segments:\n        bad_right = bisect.bisect_left(right, li)\n        bad_left = n - bisect.bisect_right(left, ri)\n        bad_segments = bad_left + bad_right\n        min_deletion = min(min_deletion, bad_segments)\n        if min_deletion == 0:\n            break\n    print(min_deletion)", "from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    left = []\n    right = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        left.append(l)\n        right.append(r)\n        ans.append((l, r))\n    left.sort()\n    right.sort()\n    res = n\n    for (a, b) in ans:\n        o = bisect_right(left, b)\n        p = bisect_left(right, a)\n        res = min(res, n - o + p)\n    print(res)", "from bisect import bisect, bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    l_all = []\n    r_all = []\n    lr = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        l_all.append(l)\n        r_all.append(r)\n        lr.append([l, r])\n    l_all.sort()\n    r_all.sort()\n    ans = 10 ** 10\n    for i in range(n):\n        (l, r) = lr[i]\n        nl = bisect(l_all, r)\n        nr = bisect_left(r_all, l)\n        ans = min(ans, n - nl + nr)\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    r = []\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l.append(x)\n        r.append(y)\n        a.append([x, y])\n    l.sort()\n    r.sort()\n    ans = 10000000\n    for i in a:\n        an1 = bisect.bisect_left(r, i[0])\n        an2 = n - bisect.bisect_right(l, i[1])\n        ans = min(ans, an1 + an2)\n    print(ans)", "from bisect import bisect_left, bisect\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [[int(i) for i in input().split()] for x in range(n)]\n    (l, r) = (sorted([i[0] for i in segments]), sorted([i[1] for i in segments]))\n    print(n - max((bisect(l, s[1]) - bisect_left(r, s[0]) for s in segments)))", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    ls = []\n    lsl = []\n    lsr = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        ls.append([l, r])\n        lsl.append(l)\n        lsr.append(r)\n    lsl.sort()\n    lsr.sort()\n    cnt = n\n    for i in range(n):\n        cnt = min(cnt, n - bisect.bisect_right(lsl, ls[i][1]) + bisect.bisect_left(lsr, ls[i][0]))\n    print(cnt)", "import bisect\nfor nt in range(int(input())):\n    n = int(input())\n    a = []\n    (l, r) = ([], [])\n    for i in range(n):\n        x = list(map(int, input().split()))\n        a.append(x)\n        l.append(x[0])\n        r.append(x[1])\n    l.sort()\n    r.sort()\n    minn = n\n    for i in a:\n        seg = i\n        leave = bisect.bisect_left(r, i[0]) + (n - bisect.bisect(l, i[1]))\n        minn = min(minn, leave)\n    print(minn)", "from bisect import bisect, bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    (l, r) = (sorted([x[0] for x in a]), sorted([x[1] for x in a]))\n    ans = min([bisect_left(r, x[0]) + n - bisect(l, x[1]) for x in a])\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    ls = []\n    ans = 0\n    lsl = []\n    lsr = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        ls.append([l, r])\n        lsl.append(l)\n        lsr.append(r)\n    lsl.sort()\n    lsr.sort()\n    cnt = float('inf')\n    for i in range(n):\n        bad_left = bisect.bisect_left(lsr, ls[i][0])\n        bad_right = bisect.bisect_right(lsl, ls[i][1])\n        cnt = min(cnt, n - bad_right + bad_left)\n    print(cnt)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    xx = [0] * n\n    yy = [0] * n\n    arr = [(0, 0)] * n\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        xx[i] = a\n        yy[i] = b\n        arr[i] = (a, b)\n    xx.sort()\n    yy.sort()\n    ans = 999999999\n    for i in range(n):\n        a = bisect.bisect_left(yy, arr[i][0])\n        b = bisect.bisect_right(xx, arr[i][1])\n        b = n - b\n        ans = min(ans, a + b)\n    print(ans)", "from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    r = []\n    a = []\n    for i in range(n):\n        (li, ri) = [int(i) for i in input().split()]\n        l.append(li)\n        r.append(ri)\n        a.append([li, ri])\n    l.sort()\n    r.sort()\n    cnt = n\n    for i in range(n):\n        cnt = min(cnt, n - bisect_right(l, a[i][1]) + bisect_left(r, a[i][0]))\n    print(cnt)", "from bisect import bisect_left, bisect\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [[int(i) for i in input().split()] for x in range(n)]\n    (l, r) = (sorted([i[0] for i in segments]), sorted([i[1] for i in segments]))\n    print(n - max((bisect(l, s[1]) - bisect_left(r, s[0]) for s in segments)))", "from bisect import bisect, bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = [[int(j) for j in input().split()] for i in range(n)]\n    (X, Y) = (sorted([i[0] for i in a]), sorted([i[1] for i in a]))\n    ans = min([bisect_left(Y, i[0]) + n - bisect(X, i[1]) for i in a])\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    ls = []\n    ans = 0\n    lsl = []\n    lsr = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        ls.append([l, r])\n        lsl.append(l)\n        lsr.append(r)\n    lsl.sort()\n    lsr.sort()\n    cnt = float('inf')\n    for i in range(n):\n        bad_left = bisect.bisect_left(lsr, ls[i][0])\n        bad_right = bisect.bisect_right(lsl, ls[i][1])\n        cnt = min(cnt, n - bad_right + bad_left)\n    print(cnt)", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (a, b) = [int(d) for d in input().split()]\n        arr.append([a, b])\n    (l, r) = (sorted([i[0] for i in arr]), sorted([i[1] for i in arr]))\n    max_ = -1\n    for i in range(n):\n        a = bisect.bisect(l, arr[i][1]) - bisect.bisect_left(r, arr[i][0])\n        if a > max_:\n            max_ = a\n    print(n - max_)", "from bisect import bisect_left, bisect\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [[int(i) for i in input().split()] for x in range(n)]\n    (l, r) = (sorted([i[0] for i in segments]), sorted([i[1] for i in segments]))\n    print(n - max((bisect(l, s[1]) - bisect_left(r, s[0]) for s in segments)))", "from bisect import bisect_left, bisect\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [[int(i) for i in input().split()] for x in range(n)]\n    (l, r) = (sorted([i[0] for i in segments]), sorted([i[1] for i in segments]))\n    print(n - max((bisect(l, s[1]) - bisect_left(r, s[0]) for s in segments)))", "import bisect\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    seg = []\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        seg.append((a, b))\n    lseg = [i[0] for i in seg]\n    rseg = [i[1] for i in seg]\n    lseg.sort()\n    rseg.sort()\n    the_max = 0\n    for each in seg:\n        (start, end) = each\n        lefts_before_end = bisect.bisect_right(lseg, end)\n        rights_before_start = bisect.bisect_left(rseg, start)\n        result = lefts_before_end - rights_before_start\n        the_max = max(the_max, result)\n    print(n - the_max)", "p = int(input())\nfor o in range(p):\n    n = int(input())\n    segments = []\n    for i in range(n):\n        (l, r) = map(int, input().strip().split())\n        segments.append([l, r])\n    byHead = segments[:]\n    byTail = segments[:]\n    byHead.sort()\n    byTail.sort(key=lambda x: x[1])\n    left = 0\n    right = 0\n    mx = 0\n    for i in range(n):\n        l = byHead[i][0]\n        r = byHead[i][1]\n        while byTail[left][1] < l:\n            left += 1\n        if right < n:\n            while byHead[right][0] <= r:\n                right += 1\n                if right == n:\n                    break\n        mx = max(mx, right - left)\n    print(n - mx)"]