["def main():\n    for t in range(int(input())):\n        (r, c) = map(int, input().split())\n        a = []\n        for i in range(r):\n            a.append(list(map(int, input().split())))\n        solve(a)\n\ndef solve(a):\n    r = len(a)\n    c = len(a[0])\n    r2 = r // 2\n    r1 = (r - 1) // 2\n    c2 = c // 2\n    c1 = (c - 1) // 2\n    res = 0\n    while c1 >= 0:\n        res += calculate(a, r1, r2, c1, c2)\n        c1 -= 1\n        c2 += 1\n    print(res)\n\ndef calculate(matrix, r1, r2, c1, c2):\n    if r1 < 0 or c1 < 0:\n        return 0\n    sum = 0\n    arr = [matrix[r1][c1], matrix[r1][c2], matrix[r2][c1], matrix[r2][c2]]\n    arr.sort()\n    cost = (arr[1] + arr[2]) // 2\n    for i in arr:\n        sum += abs(i - cost)\n    if r1 == r2 or c1 == c2:\n        sum //= 2\n    return sum + calculate(matrix, r1 - 1, r2 + 1, c1, c2)\nmain()", "for _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    r = [[*map(int, input().split())] for _ in [0] * n]\n    times = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            a = sorted([r[i][j], r[i][-j - 1], r[-i - 1][j], r[-i - 1][-j - 1]])\n            times += (a[3] + a[2] - a[1] - a[0]) // (1 + (i == n // 2 or j == m // 2))\n    print(times)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list(map(int, input().split())) for _ in range(n)]\n    s = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            a = g[i][j]\n            b = g[i][m - 1 - j]\n            c = g[n - 1 - i][j]\n            d = g[n - 1 - i][m - 1 - j]\n            (a, b, c, d) = sorted([a, b, c, d])\n            s += c + d - a - b\n    if n % 2:\n        for i in range(m // 2):\n            a = g[n // 2][i]\n            b = g[n // 2][m - 1 - i]\n            x = (a + b) // 2\n            s += abs(a - x) + abs(b - x)\n    if m % 2:\n        for i in range(n // 2):\n            a = g[i][m // 2]\n            b = g[n - 1 - i][m // 2]\n            x = (a + b) // 2\n            s += abs(a - x) + abs(b - x)\n    print(s)", "q = int(input())\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    arr = [[x for x in map(int, input().split())] for i in range(a)]\n    d = 0\n    for i in range((a - 1) // 2 + 1):\n        for j in range((b - 1) // 2 + 1):\n            rowsym = b - 1 - j\n            tablesym = a - 1 - i\n            n1 = arr[i][j]\n            n2 = arr[i][rowsym]\n            n3 = arr[tablesym][j]\n            n4 = arr[tablesym][rowsym]\n            arr1 = sorted([n1, n2, n3, n4])\n            sr = arr1[1]\n            if i != tablesym and j != rowsym:\n                d += abs(n1 - sr) + abs(n2 - sr) + abs(n3 - sr) + abs(n4 - sr)\n            else:\n                d += arr1[3] - sr\n    print(d)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    li = [0] * x\n    for i in range(x):\n        (*li[i],) = map(int, input().split())\n    ans = 0\n    for i in range(x // 2):\n        for j in range(y // 2):\n            (a, b, c, d) = sorted([li[i][j], li[i][~j], li[~i][j], li[~i][~j]])\n            ans += c + d - a - b\n    if x % 2:\n        i = x // 2\n        for j in range(y // 2):\n            ans += abs(li[i][j] - li[i][~j])\n    if y % 2:\n        j = y // 2\n        for i in range(x // 2):\n            ans += abs(li[i][j] - li[~i][j])\n    print(ans)", "p = lambda : list(map(int, input().split()))\nT = int(input())\nfor _ in range(T):\n    (N, M) = p()\n    S = 0\n    a = [p() for _ in range(N)]\n    for i in range(N // 2):\n        for j in range(M // 2):\n            (x, y) = (N - i - 1, M - j - 1)\n            l = sorted([a[i][j], a[i][y], a[x][j], a[x][y]])\n            changeTo = round((l[2] + l[1]) / 2)\n            S += sum([abs(n - changeTo) for n in l])\n    if M & 1:\n        for i in range(N // 2):\n            l = [a[i][M // 2], a[N - i - 1][M // 2]]\n            changeTo = round((l[1] + l[0]) / 2)\n            S += sum([abs(n - changeTo) for n in l])\n    if N & 1:\n        for i in range(M // 2):\n            l = [a[N // 2][i], a[N // 2][M - i - 1]]\n            changeTo = round((l[1] + l[0]) / 2)\n            S += sum([abs(n - changeTo) for n in l])\n    print(S)", "def nice_matrix(n, m, l):\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            s = [l[i][j], l[n - i - 1][j], l[i][m - j - 1], l[n - i - 1][m - j - 1]]\n            s.sort()\n            ans += s[3] + s[2] - s[1] - s[0]\n    return ans // 4\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    print(nice_matrix(n, m, l))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n // (1 + (n + 1) % 2)):\n        for j in range(m // (1 + (m + 1) % 2)):\n            a = A[i][j]\n            b = A[n - i - 1][j]\n            c = A[i][m - j - 1]\n            d = A[n - i - 1][m - j - 1]\n            arr = sorted([a, b, c, d])\n            ans += arr[1] - arr[0]\n            ans += arr[3] - arr[2]\n            ans += 2 * (arr[2] - arr[1])\n    print(ans // ((1 + m % 2) * (1 + n % 2)))", "from math import ceil\nR = lambda : list(map(int, input().split()))\nfor _ in ' ' * int(input()):\n    (n, m) = R()\n    a = [R() for _ in ' ' * n]\n    count = 0\n    for i in range(ceil(n / 2)):\n        for j in range(ceil(m / 2)):\n            els = [a[i][j], a[n - i - 1][j], a[i][m - j - 1], a[n - i - 1][m - j - 1]]\n            s = sorted(els)[2]\n            tc = 0\n            for el in els:\n                tc += abs(s - el)\n            if i == n - i - 1 or j == m - j - 1:\n                tc = tc // 2\n            count += tc\n    print(count)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    s = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            c = list((a[i][j], a[n - 1 - i][j], a[i][m - 1 - j], a[n - 1 - i][m - 1 - j]))\n            c.sort()\n            s += c[3] + c[2] - c[1] - c[0]\n    if n % 2 == 1:\n        for j in range(m // 2):\n            s += abs(a[n // 2][j] - a[n // 2][m - 1 - j])\n    if m % 2 == 1:\n        for j in range(n // 2):\n            s += abs(a[j][m // 2] - a[n - j - 1][m // 2])\n    print(s)", "import math\n\ndef func(a, r, c):\n    res = 0\n    for i in range(int(r / 2)):\n        for j in range(int(c / 2)):\n            h = sorted([a[i][j], a[i][c - j - 1], a[r - i - 1][j], a[r - i - 1][c - j - 1]])[1]\n            res += abs(a[i][j] - h) + abs(a[i][c - j - 1] - h) + abs(a[r - i - 1][j] - h) + abs(a[r - i - 1][c - j - 1] - h)\n    if r % 2 == 1:\n        i = int(r / 2)\n        for j in range(int(c / 2)):\n            h = (a[i][j] + a[i][c - j - 1]) / 2\n            res += abs(a[i][j] - h) + abs(a[i][c - j - 1] - h)\n    if c % 2 == 1:\n        j = int(c / 2)\n        for i in range(int(r / 2)):\n            h = (a[i][j] + a[r - i - 1][j]) / 2\n            res += abs(a[i][j] - h) + abs(a[r - 1 - i][j] - h)\n    print(int(res))\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    func(a, n, k)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[0] * m for i in range(n)]\n    for i in range(n):\n        s = list(map(int, input().split()))\n        a[i] = s\n    ans = 0\n    l = [0] * 4\n    for i in range(n // 2):\n        for j in range(m // 2):\n            l[0] = a[i][j]\n            l[1] = a[i][m - j - 1]\n            l[2] = a[n - i - 1][j]\n            l[3] = a[n - i - 1][m - j - 1]\n            l.sort()\n            ans += l[2] - l[0] + l[3] - l[1]\n    if m % 2 == 1:\n        for i in range(n // 2):\n            ans += abs(a[i][m // 2] - a[n - i - 1][m // 2])\n    if n % 2 == 1:\n        for j in range(m // 2):\n            ans += abs(a[n // 2][j] - a[n // 2][m - j - 1])\n    print(ans)", "def solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        mat.append(a)\n    ans = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            a = [mat[i][j], mat[i][m - 1 - j], mat[n - 1 - i][j], mat[n - 1 - i][m - 1 - j]]\n            if i == n - 1 - i:\n                a[2] = -1\n                a[3] = -1\n            if j == m - 1 - j:\n                a[1] = -1\n                a[3] = -1\n            while -1 in a:\n                a.remove(-1)\n            if len(a) == 2:\n                a.sort()\n                ans += a[1] - a[0]\n            elif len(a) == 4:\n                a.sort()\n                ans += a[3] + a[2] - a[1] - a[0]\n    print(ans)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def answer(a, b, c, d):\n    x = [a, b, c, d]\n    x.sort()\n    su = (x[1] + x[2]) // 2\n    ans = abs(a - su) + abs(b - su) + abs(c - su) + abs(d - su)\n    return ans\nfor i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        zz = list(map(int, input().split()))\n        x.append(zz)\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            ans += answer(x[i][j], x[-1 - i][j], x[-1 - i][-1 - j], x[i][-1 - j])\n    i = 0\n    if n % 2 != 0:\n        for i in range(m // 2):\n            temp = answer(x[n // 2][i], x[n // 2][-1 - i], x[n // 2][i], x[n // 2][-1 - i])\n            ans += temp // 2\n    if m % 2 != 0:\n        for i in range(n // 2):\n            temp = answer(x[i][m // 2], x[-1 - i][m // 2], x[i][m // 2], x[-1 - i][m // 2])\n            ans += temp // 2\n    print(ans)", "class Point:\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef getTimes(a, b, c=None, d=None):\n    if c == None and d == None:\n        return abs(a - b)\n    lst = sorted([a, b, c, d])\n    mid = lst[1]\n    res = 0\n    for n in lst:\n        res += abs(n - mid)\n    return res\n\ndef solve():\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            ans += getTimes(matrix[i][j], matrix[i][m - j - 1], matrix[n - i - 1][j], matrix[n - i - 1][m - j - 1])\n    if n & 1:\n        for j in range(m // 2):\n            ans += getTimes(matrix[n // 2][j], matrix[n // 2][m - j - 1])\n    if m & 1:\n        for i in range(n // 2):\n            ans += getTimes(matrix[i][m // 2], matrix[n - i - 1][m // 2])\n    print(ans)\nmain()", "def fetch_ops(*args):\n    args = sorted(*args)\n    (ret, L) = (0, len(args))\n    for i in range((L + 1) // 2):\n        ret += args[L - 1 - i] - args[i]\n    return ret\n\ndef solve():\n    (n, m) = [int(x) for x in input().strip().split()]\n    matrix = []\n    cost = 0\n    for r in range(n):\n        matrix.append([int(x) for x in input().strip().split()])\n    (n_lim, m_lim) = ((n + 1) // 2, (m + 1) // 2)\n    for r in range(n_lim):\n        for c in range(m_lim):\n            l = []\n            if r == n - 1 - r:\n                if c == m - 1 - c:\n                    continue\n                else:\n                    cost += fetch_ops([matrix[r][c], matrix[r][m - 1 - c]])\n            elif c == m - 1 - c:\n                cost += fetch_ops([matrix[r][c], matrix[n - 1 - r][c]])\n            else:\n                cost += fetch_ops([matrix[r][c], matrix[r][m - 1 - c], matrix[n - 1 - r][c], matrix[n - 1 - r][m - 1 - c]])\n    return cost\nfor _ in range(int(input().strip())):\n    print(solve())", "t = int(input())\nres = [0 for i in range(t)]\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [[] for j in range(n)]\n    for i in range(n):\n        a[i] = input().split()\n        for j in range(m):\n            a[i][j] = int(a[i][j])\n    for x in range(n // 2):\n        for y in range(m // 2):\n            b = [a[x][y], a[n - x - 1][y], a[x][m - y - 1], a[n - x - 1][m - y - 1]]\n            b.sort()\n            target = int((b[1] + b[2]) / 2)\n            for el in b:\n                res[_] += abs(target - int(el))\n    if n % 2 != 0:\n        for y in range(m // 2):\n            b = [a[n // 2][y], a[n // 2][m - y - 1]]\n            target = (b[0] + b[1]) // 2\n            for el in b:\n                res[_] += abs(target - int(el))\n    if m % 2 != 0:\n        for x in range(n // 2):\n            b = [a[x][m // 2], a[n - x - 1][m // 2]]\n            target = (b[0] + b[1]) // 2\n            for el in b:\n                res[_] += abs(target - int(el))\nfor el in res:\n    print(el)", "import math\nt = int(input())\nfor l in range(t):\n    (n, m) = map(int, input().split())\n    aa = []\n    for f in range(n):\n        aa.append(list(map(int, input().split())))\n    odd_rows = True if n % 2 else False\n    odd_cols = True if m % 2 else False\n    summa = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            bb = [0, 0, 0, 0]\n            bb[0] = aa[i][j]\n            bb[1] = aa[n - i - 1][j]\n            bb[2] = aa[i][m - j - 1]\n            bb[3] = aa[n - i - 1][m - j - 1]\n            bb.sort()\n            summa += bb[2] + bb[3] - bb[1] - bb[0]\n    if odd_rows:\n        for j in range(m // 2):\n            a = aa[n // 2][j]\n            b = aa[n // 2][m - j - 1]\n            summa += abs(a - b)\n    if odd_cols:\n        for i in range(n // 2):\n            a = aa[i][m // 2]\n            b = aa[n - i - 1][m // 2]\n            summa += abs(a - b)\n    print(summa)", "t = input()\nt = int(t)\nwhile t:\n    t = t - 1\n    (n, m) = [int(s) for s in input().split(' ')]\n    arr = []\n    for i in range(0, n):\n        arr.append([int(s) for s in input().split(' ')])\n    cost = 0\n    for i in range(0, int((n + 1) / 2)):\n        for j in range(0, int((m + 1) / 2)):\n            elems = [arr[i][j], arr[n - 1 - i][j], arr[n - 1 - i][m - 1 - j], arr[i][m - 1 - j]]\n            elems = sorted(elems)\n            cost_curr = elems[2] + elems[3] - elems[1] - elems[0]\n            if i == n - 1 - i or j == m - 1 - j:\n                cost_curr = cost_curr / 2\n            cost = cost + int(cost_curr)\n    print(cost)", "import math\n\ndef sol(l, n, m):\n    s = 0\n    for r in range(math.ceil(n / 2)):\n        for c in range(math.ceil(m / 2)):\n            (l1, r1, l2, r2) = (l[r][c], l[r][m - c - 1], l[n - r - 1][c], l[n - r - 1][m - c - 1])\n            if not l1 == r1 == l2 == r2:\n                mid = sorted([l1, l2, r1, r2])[1]\n                cs = abs(l1 - mid) + abs(l2 - mid) + abs(r1 - mid) + abs(r2 - mid)\n                if m - c - 1 == c or n - r - 1 == r:\n                    cs //= 2\n                s += cs\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for i in range(n)]\n    print(sol(l, n, m))", "def round(a, b, c, d):\n    l = sorted([a, b, c, d])\n    return l[1]\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    temp = [[0 for i in range(m)] for k in range(n)]\n    for i in range(int((n + 1) // 2)):\n        for j in range(int((m + 1) // 2)):\n            s = round(l[i][j], l[n - 1 - i][j], l[i][m - 1 - j], l[n - 1 - i][m - 1 - j])\n            temp[i][j] = s\n            temp[i][m - 1 - j] = s\n            temp[n - 1 - i][j] = s\n            temp[n - 1 - i][m - 1 - j] = s\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += abs(l[i][j] - temp[i][j])\n    print(ans)", "import sys\ninput = sys.stdin.readline\nres = ''\n\ndef su(a, i):\n    return abs(a[i] - a[i - 1]) + abs(a[i] - a[i - 2]) + abs(a[i] - a[i - 3])\n\ndef solve():\n    (n, m) = map(int, input().split())\n    (r, p) = ([0] * n, 0)\n    for x in range(n):\n        r[x] = [int(i) for i in input().split()]\n    for i in range(n // 2):\n        for j in range(m // 2):\n            a = [r[i][j], r[n - i - 1][j], r[i][m - j - 1], r[n - i - 1][m - j - 1]]\n            p += min(su(a, 0), su(a, 1), su(a, 2), su(a, 3))\n    if n % 2:\n        for x in range(m // 2):\n            p += abs(r[n // 2][x] - r[n // 2][m - x - 1])\n    if m % 2:\n        for y in range(n // 2):\n            p += abs(r[y][m // 2] - r[n - y - 1][m // 2])\n    return str(p) + '\\n'\nfor _ in range(int(input())):\n    res += solve()\nprint(res)", "t = int(input())\n\ndef diff(mat):\n    n = len(mat)\n    m = len(mat[0])\n    r = 0\n    for i in range((1 + n) // 2):\n        for j in range((1 + m) // 2):\n            c = []\n            c.append(mat[i][j])\n            if i != n - 1 - i:\n                c.append(mat[n - 1 - i][j])\n                if j != m - 1 - j:\n                    c.append(mat[n - 1 - i][m - 1 - j])\n            if j != m - 1 - j:\n                c.append(mat[i][m - 1 - j])\n            if len(c) > 1:\n                median = sorted(c)[1]\n                for x in c:\n                    r += abs(x - median)\n    return r\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    print(diff(mat))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = [[] for j in range(n)]\n    for j in range(n):\n        arr[j] = list(map(int, input().split()))\n    mid_row = n // 2 if n % 2 == 0 else n // 2 + 1\n    mid_col = m // 2 if m % 2 == 0 else m // 2 + 1\n    cnt = 0\n    for row in range(mid_row):\n        for col in range(mid_col):\n            matches = [arr[row][col], arr[n - 1 - row][col], arr[row][m - 1 - col], arr[n - 1 - row][m - 1 - col]]\n            sorted_matches = sorted(matches)\n            if row == n // 2 or col == m // 2:\n                cnt += sorted_matches[3] - sorted_matches[0]\n            else:\n                cnt += sorted_matches[3] - sorted_matches[0] + sorted_matches[2] - sorted_matches[1]\n    print(cnt)", "y = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, m) = y()\n    x = [[*y()] for i in range(n)]\n    s = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            (a, b, c, d) = sorted([x[i][j], x[i][m - 1 - j], x[n - 1 - i][j], x[n - 1 - i][m - 1 - j]])\n            s += d + c - b - a\n    if n % 2:\n        for i in range(m // 2):\n            s += abs(x[n // 2][i] - x[n // 2][m - 1 - i])\n    if m % 2:\n        for i in range(n // 2):\n            s += abs(x[i][m // 2] - x[n - 1 - i][m // 2])\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    M = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        M.append(row[:])\n    operations = 0\n    for ra in range(n // 2):\n        rb = n - ra - 1\n        for a in range(m // 2):\n            b = m - a - 1\n            l = [M[ra][a], M[ra][b], M[rb][a], M[rb][b]]\n            l.sort()\n            c = l[1]\n            operations += abs(l[0] - c) + abs(l[2] - c) + abs(l[3] - c)\n    if m % 2:\n        for i in range(n // 2):\n            j = n - i - 1\n            operations += abs(M[j][m // 2] - M[i][m // 2])\n    if n % 2:\n        for i in range(m // 2):\n            j = m - i - 1\n            operations += abs(M[n // 2][i] - M[n // 2][j])\n    print(operations)", "import random\n\ndef minimum4(L):\n    (x, y, z, w) = (L[0], L[1], L[2], L[3])\n    return min(y + z + w - 3 * x, z + w - y - x, 3 * w - x - y - z)\n\ndef minimum2(x, y):\n    return y - x\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            L = [a[i][j], a[i][m - 1 - j], a[n - 1 - i][j], a[n - 1 - i][m - 1 - j]]\n            L.sort()\n            ans += minimum4(L)\n    if m % 2 != 0:\n        for i in range(n // 2):\n            (x, y) = (a[i][(m - 1) // 2], a[n - 1 - i][(m - 1) // 2])\n            (x, y) = (min(x, y), max(x, y))\n            ans += minimum2(x, y)\n    if n % 2 != 0:\n        for i in range(m // 2):\n            (x, y) = (a[(n - 1) // 2][i], a[(n - 1) // 2][m - 1 - i])\n            (x, y) = (min(x, y), max(x, y))\n            ans += minimum2(x, y)\n    print(ans)\n    return\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n    return\nmain()", "def median4(l):\n    l.sort()\n    median = (l[1] + l[2]) // 2\n    total = abs(l[0] - median) + abs(l[1] - median) + abs(l[2] - median) + abs(l[3] - median)\n    return total\n\ndef median2(l):\n    median = (l[1] + l[0]) // 2\n    total = abs(l[0] - median) + abs(l[1] - median)\n    return total\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for j in range(n)]\n    answer = 0\n    for j in range(int((n + 1) / 2)):\n        if n % 2 == 1 and j == n // 2:\n            for k in range(int((m + 1) / 2)):\n                if m % 2 == 0 or k != m // 2:\n                    answer += median2((l[j][k], l[j][m - 1 - k]))\n        else:\n            for k in range(int((m + 1) / 2)):\n                if m % 2 == 1 and k == m // 2:\n                    answer += median2((l[j][k], l[n - 1 - j][k]))\n                else:\n                    answer += median4([l[j][k], l[j][m - 1 - k], l[n - 1 - j][k], l[n - 1 - j][m - 1 - k]])\n    print(answer)", "import math\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = [0 for i in range(r)]\n    for i in range(r):\n        mat[i] = list(map(int, input().split()))\n    moves = 0\n\n    def solve(a1, a2, a3, a4):\n        li = [a1, a2, a3, a4]\n        li.sort()\n        avg = (li[1] + li[2]) // 2\n        sm = math.fabs(a1 - avg) + math.fabs(a2 - avg) + math.fabs(a3 - avg) + math.fabs(a4 - avg)\n        return sm\n    for i in range(r // 2):\n        for j in range(c // 2):\n            (a1, a2, a3, a4) = (mat[i][j], mat[i][c - j - 1], mat[r - i - 1][j], mat[r - i - 1][c - j - 1])\n            moves += solve(a1, a2, a3, a4)\n    if c % 2 == 1:\n        for j in range(r // 2):\n            (a1, a2) = (mat[j][c // 2], mat[r - j - 1][c // 2])\n            moves += math.fabs(a1 - a2)\n    if r % 2 == 1:\n        for i in range(c // 2):\n            (a1, a2) = (mat[r // 2][i], mat[r // 2][c - i - 1])\n            moves += math.fabs(a1 - a2)\n    print(int(moves))", "import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    (n, m) = Read.list_int()\n    a = []\n    for i in range(n):\n        a.append(Read.list_int())\n    res = 0\n    for i in range(math.floor(n / 2)):\n        for j in range(math.floor(m / 2)):\n            l = list(sorted([a[i][j], a[i][m - j - 1], a[n - i - 1][j], a[n - i - 1][m - j - 1]]))\n            sr = l[1]\n            res += abs(a[i][j] - sr)\n            res += abs(a[i][m - j - 1] - sr)\n            res += abs(a[n - i - 1][j] - sr)\n            res += abs(a[n - i - 1][m - j - 1] - sr)\n    if n % 2 == 1:\n        idx = math.floor(n / 2)\n        for i in range(0, math.floor(m / 2)):\n            res += abs(a[idx][m - i - 1] - a[idx][i])\n    if m % 2 == 1:\n        idx = math.floor(m / 2)\n        for i in range(0, math.floor(n / 2)):\n            res += abs(a[n - i - 1][idx] - a[i][idx])\n    print(res)\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "t = int(input())\nwhile t:\n    t -= 1\n    [n, m] = [int(i) for i in input().split()]\n    mat = [[int(i) for i in input().split()] for k in range(n)]\n    hn = n // 2 + (1 if n % 2 != 0 else 0)\n    hm = m // 2 + (1 if m % 2 != 0 else 0)\n    ans = 0\n    for i in range(hn):\n        for j in range(hm):\n            a = mat[i][j]\n            b = mat[i][m - j - 1]\n            c = mat[n - i - 1][j]\n            d = mat[n - i - 1][m - j - 1]\n            dal = sorted([a, b, c, d])\n            med = dal[1]\n            nadd = abs(a - med) + abs(b - med) + abs(c - med) + abs(d - med)\n            if i == n - i - 1 or j == m - j - 1:\n                nadd = nadd // 2\n                if i == n - i - 1 and j == m - j - 1:\n                    nadd = nadd // 2\n            ans += nadd\n    print(ans)", "t = int(input(''))\nfor _ in range(t):\n    [n, m] = list(map(int, input().split()))\n    arr = []\n    for j in range(n):\n        arr.append(list(map(int, input().split())))\n    sol = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            a = [arr[i][j], arr[n - i - 1][j], arr[i][m - j - 1], arr[n - i - 1][m - j - 1]]\n            a.sort()\n            sol += a[3] + a[2] - a[1] - a[0]\n    if n % 2:\n        i = n // 2\n        for j in range(m // 2):\n            sol += abs(arr[i][j] - arr[i][m - j - 1])\n    if m % 2:\n        j = m // 2\n        for i in range(n // 2):\n            sol += abs(arr[i][j] - arr[n - i - 1][j])\n    print(sol)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    grid = []\n    for i in range(r):\n        grid.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(r // 2):\n        for j in range(c // 2):\n            l = [grid[i][j], grid[r - i - 1][j], grid[i][c - j - 1], grid[r - i - 1][c - j - 1]]\n            l.sort()\n            ans += min(l[1] - l[0] + l[2] - l[1] + l[3] - l[1], l[2] - l[0] + l[2] - l[1] + l[3] - l[2])\n    (ans1, ans2) = (0, 0)\n    if r % 2 != 0:\n        l = []\n        for i in range(c):\n            l.append(grid[r // 2][i])\n        for i in range(c // 2):\n            ans1 += abs(l[i] - l[c - i - 1])\n    if c % 2 != 0:\n        l = []\n        for i in range(r):\n            l.append(grid[i][c // 2])\n        for i in range(r // 2):\n            ans2 += abs(l[i] - l[r - i - 1])\n    print(ans + ans1 + ans2)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    n1 = n // 2\n    m2 = m // 2\n    s = 0\n    t = [0 for i in range(4)]\n    for i in range(n1):\n        for j in range(m2):\n            t[0] = l[i][j]\n            t[1] = l[n - i - 1][j]\n            t[2] = l[i][m - j - 1]\n            t[3] = l[n - i - 1][m - j - 1]\n            t.sort()\n            a = t[1]\n            s += abs(abs(l[i][j] - a) + abs(l[n - i - 1][j] - a) + abs(l[i][m - j - 1] - a) + abs(l[n - i - 1][m - j - 1] - a))\n    if n & 1:\n        for i in range(m2):\n            s += abs(l[n1][i] - l[n1][m - i - 1])\n            l[n1][m - i - 1] = l[n1][i]\n    if m & 1:\n        for i in range(n1):\n            s += abs(l[i][m2] - l[n - i - 1][m2])\n            l[i][m2] = l[n - i - 1][m2]\n    print(s)", "def process():\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    hl = m // 2\n    vl = n // 2\n    count = 0\n    for i in range(vl):\n        for j in range(hl):\n            (n1, n2, n3, n4) = sorted((a[i][j], a[n - 1 - i][j], a[i][m - 1 - j], a[n - 1 - i][m - 1 - j]))\n            count += min(3 * n4 - n1 - n2 - n3, n4 - n2 - n1 + n3, n4 + n3 - n2 - n1, n4 + n3 + n2 - 3 * n1)\n    if m % 2:\n        for i in range(vl):\n            count += abs(a[i][hl] - a[n - i - 1][hl])\n    if n % 2:\n        for i in range(hl):\n            count += abs(a[vl][i] - a[vl][m - 1 - i])\n    print(count)\n\ndef main():\n    for i in range(int(input())):\n        process()\nmain()", "import random\n\ndef minimum4(L):\n    (x, y, z, w) = (L[0], L[1], L[2], L[3])\n    return min(y + z + w - 3 * x, z + w - y - x, 3 * w - x - y - z)\n\ndef minimum2(x, y):\n    return y - x\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            L = [a[i][j], a[i][m - 1 - j], a[n - 1 - i][j], a[n - 1 - i][m - 1 - j]]\n            L.sort()\n            ans += minimum4(L)\n    if m % 2 != 0:\n        for i in range(n // 2):\n            (x, y) = (a[i][(m - 1) // 2], a[n - 1 - i][(m - 1) // 2])\n            (x, y) = (min(x, y), max(x, y))\n            ans += minimum2(x, y)\n    if n % 2 != 0:\n        for i in range(m // 2):\n            (x, y) = (a[(n - 1) // 2][i], a[(n - 1) // 2][m - 1 - i])\n            (x, y) = (min(x, y), max(x, y))\n            ans += minimum2(x, y)\n    print(ans)\n    return\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n    return\nmain()", "import sys\nimport itertools\nimport math\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(lp,) = I()\nwhile lp:\n    lp -= 1\n    (m, n) = I()\n    a = []\n    for i in range(m):\n        d = I()\n        a.append(d)\n    s = 0\n    for i in range(math.ceil(m / 2)):\n        for j in range(math.ceil(n / 2)):\n            if j != n - j - 1 and i != m - i - 1:\n                (q, w, e, r) = (a[i][j], a[i][n - j - 1], a[m - i - 1][j], a[m - i - 1][n - j - 1])\n                (q, w, e, r) = sorted([q, w, e, r])\n                s += min(-q + e + r - w, -q + r + e - w)\n            elif j == n - j - 1 and i != m - i - 1:\n                s += abs(a[i][j] - a[m - i - 1][j])\n            elif j != n - j - 1 and i == m - i - 1:\n                s += abs(a[i][j] - a[i][n - j - 1])\n    print(s)", "import sys\nimport itertools\nimport math\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(lp,) = I()\nwhile lp:\n    lp -= 1\n    (m, n) = I()\n    a = []\n    for i in range(m):\n        d = I()\n        a.append(d)\n    s = 0\n    for i in range(math.ceil(m / 2)):\n        for j in range(math.ceil(n / 2)):\n            if j != n - j - 1 and i != m - i - 1:\n                (q, w, e, r) = (a[i][j], a[i][n - j - 1], a[m - i - 1][j], a[m - i - 1][n - j - 1])\n                (q, w, e, r) = sorted([q, w, e, r])\n                s += -q + e + r - w\n            elif j == n - j - 1 and i != m - i - 1:\n                s += abs(a[i][j] - a[m - i - 1][j])\n            elif j != n - j - 1 and i == m - i - 1:\n                s += abs(a[i][j] - a[i][n - j - 1])\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    ans = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            l = []\n            l.append(mat[i][j])\n            l.append(mat[n - 1 - i][j])\n            l.append(mat[i][m - 1 - j])\n            l.append(mat[n - 1 - i][m - 1 - j])\n            l.sort()\n            if i * 2 + 2 > n:\n                ans = ans + abs(mat[i][m - 1 - j] - mat[i][j])\n            elif j * 2 + 2 > m:\n                ans = ans + abs(mat[n - 1 - i][j] - mat[i][j])\n            else:\n                ans = ans + l[3] + l[2] - l[1] - l[0]\n    print(ans)", "for u in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = []\n    for i in range(n):\n        x.append([int(w) for w in input().split()])\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            l = [x[i][j], x[n - i - 1][j], x[i][m - j - 1], x[n - i - 1][m - j - 1]]\n            l = sorted(l)\n            t = l[1]\n            ans += abs(t - l[0]) + abs(t - l[2]) + abs(t - l[-1])\n    if n % 2:\n        l = x[n // 2]\n        for i in range(m // 2):\n            ans += abs(l[i] - l[m - i - 1])\n    if m % 2:\n        l = []\n        for i in range(n):\n            l.append(x[i][m // 2])\n        for i in range(n // 2):\n            ans += abs(l[i] - l[n - i - 1])\n    print(ans)", "import sys\nt = int(input())\nfor tc in range(t):\n    ans = 0\n    lst = list()\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        l = list(map(int, input().split()))\n        lst.append(l)\n    for i in range(int(n / 2)):\n        for j in range(int(m / 2)):\n            numbers = [lst[i][j], lst[i][m - j - 1], lst[n - 1 - i][j], lst[n - i - 1][m - j - 1]]\n            numbers.sort()\n            ans += numbers[2] + numbers[3] - numbers[1] - numbers[0]\n        if m & 1 == 1:\n            j = int(m / 2)\n            ans += abs(lst[i][j] - lst[n - i - 1][j])\n    if n & 1 == 1:\n        for j in range(int(m / 2)):\n            ans += abs(lst[int(n / 2)][j] - lst[int(n / 2)][m - 1 - j])\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    ans = 0\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(ceil(n / 2)):\n        for j in range(ceil(m / 2)):\n            arr = [a[i][j]]\n            if i != n - i - 1:\n                arr.append(a[n - i - 1][j])\n                if j != m - j - 1:\n                    arr.append(a[n - i - 1][m - j - 1])\n            if j != m - j - 1:\n                arr.append(a[i][m - j - 1])\n            arr.sort()\n            if len(arr) == 4:\n                mean = (arr[1] + arr[2]) // 2\n            elif len(arr) == 2:\n                mean = sum(arr) // 2\n            else:\n                mean = arr[0]\n            for el in arr:\n                ans += abs(el - mean)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    ans = 0\n    for i in range(n):\n        a.append([*map(int, input().split())])\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            elems = [a[i][j]]\n            if (i, j) != (n - 1 - i, j):\n                elems.append(a[n - 1 - i][j])\n            if (i, j) != (i, m - j - 1):\n                elems.append(a[i][m - j - 1])\n            if (i, j) != (n - 1 - i, m - 1 - j):\n                elems.append(a[n - 1 - i][m - 1 - j])\n            elems.sort()\n            if len(elems) > 1:\n                med = elems[(len(elems) - 1) // 2]\n                for num in elems:\n                    ans += abs(num - med)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    ans = 0\n    for i in range(n):\n        a.append([*map(int, input().split())])\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            elems = [a[i][j]]\n            if (i, j) != (n - 1 - i, j):\n                elems.append(a[n - 1 - i][j])\n            if (i, j) != (i, m - j - 1):\n                elems.append(a[i][m - j - 1])\n            if (i, j) != (n - 1 - i, m - 1 - j):\n                elems.append(a[n - 1 - i][m - 1 - j])\n            elems.sort()\n            if len(elems) > 1:\n                med = elems[(len(elems) - 1) // 2]\n                for num in elems:\n                    ans += abs(num - med)\n    print(ans)", "import math\ndebug = True\n\ndef pprint(*args, delimiter='#', amount=10):\n    if debug:\n        print('{0} DEBUG {0}'.format(delimiter * amount))\n        print(*args)\n        print('{0} ----- {0}'.format('-' * amount))\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = []\n    ans = 0\n    for i in range(n):\n        row = list(map(int, input().split()))\n        a.append(row)\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            nums = set()\n            nums.add((a[i][j], i, j))\n            nums.add((a[n - i - 1][j], n - i - 1, j))\n            nums.add((a[i][m - j - 1], i, m - j - 1))\n            nums.add((a[n - i - 1][m - j - 1], n - i - 1, m - j - 1))\n            summ = 0\n            for elem in nums:\n                summ += elem[0]\n            sort_nums = sorted(list(nums))\n            for elem in nums:\n                ans += abs(sort_nums[len(sort_nums) // 2][0] - elem[0])\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "def su(a, i):\n    return abs(a[i] - a[i - 1]) + abs(a[i] - a[i - 2]) + abs(a[i] - a[i - 3])\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = [[] for i in range(n)]\n    for x in range(n):\n        p = [int(i) for i in input().split()]\n        r[x] = p\n    res = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            a = [r[i][j], r[n - i - 1][j], r[i][m - j - 1], r[n - i - 1][m - j - 1]]\n            res += min(su(a, 0), su(a, 1), su(a, 2), su(a, 3))\n    if n % 2:\n        for x in range(m // 2):\n            res += abs(r[n // 2][x] - r[n // 2][m - x - 1])\n    if m % 2:\n        for y in range(n // 2):\n            res += abs(r[y][m // 2] - r[n - y - 1][m // 2])\n    print(res)", "from sys import stdin\ncaso = int(stdin.readline().strip())\nfor cas in range(caso):\n    (n, m) = map(int, stdin.readline().strip().split())\n    s = [list(map(int, stdin.readline().strip().split())) for i in range(n)]\n    ans = 0\n    y = n - 1\n    for i in range(n):\n        r = m - 1\n        if y < i:\n            break\n        for j in range(m):\n            if r < j:\n                break\n            s1 = [s[i][j], s[i][r], s[y][r], s[y][j]]\n            s1.sort()\n            a = round((s1[1] + s1[2]) / 2)\n            ans += abs(a - s[i][j])\n            s[i][j] = a\n            ans += abs(a - s[i][r])\n            s[i][r] = a\n            ans += abs(a - s[y][r])\n            s[y][r] = a\n            ans += abs(a - s[y][j])\n            s[y][j] = a\n            r -= 1\n        y -= 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            arr = sorted([grid[i][j], grid[i][m - j - 1], grid[n - i - 1][j], grid[n - i - 1][m - j - 1]])\n            ans += abs(arr[0] - arr[1]) + abs(arr[2] - arr[1]) + abs(arr[3] - arr[1])\n        if m % 2:\n            ans += abs(grid[i][m // 2] - grid[n - 1 - i][m // 2])\n    if n % 2:\n        for j in range(m // 2):\n            ans += abs(grid[n // 2][j] - grid[n // 2][m - j - 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for _ in range(n):\n        arr = list(map(int, input().split()))\n        mat.append(arr)\n    (midn, midm) = (n // 2, m // 2)\n    ans = 0\n    for i in range(midn):\n        for j in range(midm):\n            arr = []\n            arr.append(mat[i][j])\n            arr.append(mat[i][m - j - 1])\n            arr.append(mat[n - i - 1][j])\n            (x, y) = (i, m - j - 1)\n            arr.append(mat[n - x - 1][y])\n            arr.sort()\n            median = arr[1]\n            for idx in range(4):\n                ans += abs(arr[idx] - median)\n    if n % 2 == 1:\n        arr = []\n        for j in range(m):\n            arr.append(mat[midn][j])\n        for i in range(midm):\n            ans += abs(arr[i] - arr[m - i - 1])\n    if m % 2 == 1:\n        arr = []\n        for i in range(n):\n            arr.append(mat[i][midm])\n        for i in range(midn):\n            ans += abs(arr[i] - arr[n - i - 1])\n    print(ans)", "import math\nfor w in range(int(input())):\n    (n, m) = tuple(map(int, input().split()))\n    a = []\n    ans = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    if m % 2 == 0:\n        y = m // 2\n    else:\n        y = m // 2 + 1\n    for i in range(x):\n        for j in range(y):\n            if i != n - i - 1 and j != m - j - 1:\n                avg = [a[i][j], a[n - i - 1][j], a[i][m - j - 1], a[n - i - 1][m - j - 1]]\n                avg = sorted(avg)\n                ans += abs(avg[1] - a[i][j]) + abs(a[n - i - 1][j] - avg[1]) + abs(avg[1] - a[i][m - j - 1]) + abs(avg[1] - a[n - i - 1][m - j - 1])\n            elif j != m - j - 1:\n                ans += abs(a[i][j] - a[i][m - j - 1])\n            elif i != n - i - 1:\n                ans += abs(a[i][j] - a[n - i - 1][j])\n    print(ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    array = []\n    for i in range(n):\n        l = input().split(' ')\n        lt = []\n        for j in range(m):\n            lt.append(int(l[j]))\n        array.append(lt)\n        count = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            new = sorted([array[i][j], array[i][m - 1 - j], array[n - 1 - i][j]])[1]\n            count = count + abs(new - array[i][j]) + abs(new - array[i][m - 1 - j]) + abs(new - array[n - 1 - i][j]) + abs(new - array[n - 1 - i][m - 1 - j])\n    if n % 2 == 1:\n        for i in range(m // 2):\n            new = max(array[n // 2][i], array[n // 2][m - 1 - i])\n            count = count + abs(new - array[n // 2][i]) + abs(new - array[n // 2][m - 1 - i])\n    if m % 2 == 1:\n        for i in range(n // 2):\n            new = max(array[i][m // 2], array[n - 1 - i][m // 2])\n            count = count + abs(new - array[i][m // 2]) + abs(new - array[n - 1 - i][m // 2])\n    print(count)", "import sys\ninput = sys.stdin.readline\n\ndef calc(args):\n    (cost, i, j) = (0, 0, len(args) - 1)\n    while i < j:\n        cost += args[j] - args[i]\n        i += 1\n        j -= 1\n    return cost\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    R = [list(map(int, input().split())) for _ in range(n)]\n    cost = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            (a, b, c, d) = (R[i][j], R[i][m - j - 1], R[n - i - 1][j], R[n - i - 1][m - j - 1])\n            if j == m - j - 1:\n                (b, d) = (None, None)\n            if i == n - i - 1:\n                (c, d) = (None, None)\n            cost += calc(sorted(filter(lambda x: x is not None, (a, b, c, d))))\n    print(cost)", "from statistics import median\n\ndef avg(a, b, c, d):\n    t = round(median([a, b, c, d]))\n    return int(abs(a - t) + abs(b - t) + abs(c - t) + abs(d - t))\n\ndef av(a, b):\n    t = round(median([a, b]))\n    return int(abs(a - t) + abs(b - t))\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for x in range(n)]\n    ans = 0\n    for x in range(n // 2):\n        for y in range(m // 2):\n            ans += avg(l[x][y], l[x][m - (y + 1)], l[n - (x + 1)][y], l[n - (x + 1)][m - (y + 1)])\n    if n % 2 == 1:\n        for x in range(m // 2):\n            ans += av(l[n // 2][x], l[n // 2][m - (x + 1)])\n    if m % 2 == 1:\n        for x in range(n // 2):\n            ans += av(l[x][m // 2], l[n - (x + 1)][m // 2])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    d = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        mat.append(l)\n    for i in range(n):\n        for j in range(m):\n            ans = [mat[i][j], mat[n - 1 - i][j], mat[i][m - 1 - j], mat[n - 1 - i][m - 1 - j]]\n            ans.sort()\n            d += abs(ans[2] - mat[i][j])\n            mat[i][j] = ans[2]\n    print(d)", "t = int(input())\nfor f in range(t):\n    (n, m) = map(int, input().split())\n    l = [[0 for i in range(m)] for i in range(n)]\n    for i in range(n):\n        l[i] = [int(x) for x in input().split()]\n    (x, y) = ((n - 1) // 2, (m - 1) // 2)\n    count = 0\n    for i in range(x + 1):\n        for j in range(y + 1):\n            (a, b, c, d) = (l[i][j], l[n - i - 1][j], l[i][m - j - 1], l[n - i - 1][m - j - 1])\n            if n - i - 1 == i and m - j - 1 == j:\n                count += 0\n            elif n - i - 1 == i:\n                count += abs(c - a)\n            elif m - j - 1 == j:\n                count += abs(b - a)\n            else:\n                (a, b, c, d) = sorted([a, b, c, d])\n                count += c + d - a - b\n    print(count)", "t = int(input())\nfrom math import ceil\nfor i in range(t):\n    matrix = []\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        matrix.append(list(map(int, input().split())))\n    ans = 0\n    for j in range(ceil(n / 2)):\n        for k in range(ceil(m / 2)):\n            t = []\n            t.append(matrix[j][k])\n            if k != m - k - 1:\n                t.append(matrix[j][m - k - 1])\n            if j != n - j - 1:\n                t.append(matrix[n - j - 1][k])\n            if j != n - j - 1 and k != m - k - 1:\n                t.append(matrix[n - j - 1][m - k - 1])\n            t.sort()\n            if len(t) == 4:\n                ans = ans + t[-1] + t[-2] - t[0] - t[1]\n            if len(t) == 3:\n                ans = ans + t[-1] - t[0]\n            if len(t) == 2:\n                ans = ans + t[-1] - t[0]\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    (n, m) = [int(i) for i in input().split()]\n    A = []\n    for _ in range(n):\n        A.append([int(i) for i in input().split()])\n    for i in range(math.ceil(n / 2)):\n        for j in range(math.ceil(m / 2)):\n            T = [A[i][j], A[n - i - 1][j], A[i][m - j - 1], A[n - i - 1][m - j - 1]]\n            T.sort()\n            if i == n - i - 1 or j == m - j - 1:\n                ans += T[3] - T[0]\n            else:\n                ans += -T[0] - T[1] + T[2] + T[3]\n    print(ans)", "t = int(input())\nfor test in range(t):\n    (n, m) = [int(i) for i in input().split(' ')]\n    a = []\n    for i in range(n):\n        b = [int(i) for i in input().split(' ')]\n        a.append(b)\n    count = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            l = [a[i][j], a[i][m - 1 - j], a[n - 1 - i][j], a[n - 1 - i][m - 1 - j]]\n            l = sorted(l)\n            med = l[1]\n            count += sum([abs(med - k) for k in l])\n    if n % 2 == 1:\n        for j in range(m // 2):\n            count += abs(a[(n - 1) // 2][j] - a[(n - 1) // 2][m - 1 - j])\n    if m % 2 == 1:\n        for i in range(n // 2):\n            count += abs(a[i][(m - 1) // 2] - a[n - 1 - i][(m - 1) // 2])\n    print(count)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        temp = [int(x) for x in input().split()]\n        arr.append(temp)\n    ans = 0\n    for i in range(n // 2 + 1):\n        for j in range(m // 2 + 1):\n            if n % 2 == 0 and i == n // 2 or (m % 2 == 0 and j == m // 2):\n                continue\n            temp = [arr[i][j], arr[n - i - 1][j], arr[i][m - j - 1], arr[n - i - 1][m - j - 1]]\n            temp.sort()\n            avg = (temp[1] + temp[2]) // 2\n            if i == n // 2 and j == m // 2:\n                ans += abs(arr[i][j] - avg)\n            elif i == n // 2:\n                ans += abs(arr[i][j] - avg) + abs(arr[i][m - j - 1] - avg)\n            elif j == m // 2:\n                ans += abs(arr[i][j] - avg) + abs(arr[n - i - 1][j] - avg)\n            else:\n                ans += abs(arr[n - i - 1][m - j - 1] - avg) + abs(arr[n - i - 1][j] - avg) + abs(arr[i][m - j - 1] - avg) + abs(arr[i][j] - avg)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    mat = [list(map(int, input().strip().split())) for i in range(n)]\n    a = n // 2 if n % 2 == 0 else n // 2 + 1\n    b = m // 2 if m % 2 == 0 else m // 2 + 1\n    ans = 0\n    for i in range(a):\n        for j in range(b):\n            if i == n - i - 1 and j == m - j - 1:\n                continue\n            elif i == n - i - 1:\n                elements = [mat[i][j], mat[i][m - j - 1]]\n                ans += abs(elements[0] - elements[1])\n            elif j == m - j - 1:\n                elements = [mat[i][j], mat[n - i - 1][j]]\n                ans += abs(elements[0] - elements[1])\n            else:\n                elements = [mat[i][j], mat[i][m - j - 1], mat[n - i - 1][j], mat[n - i - 1][m - j - 1]]\n                elements.sort()\n                ans += elements[3] + elements[2] - elements[1] - elements[0]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        t = list(map(int, input().split()))\n        l.append(t)\n    c = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            d = sorted([l[i][j], l[n - i - 1][j], l[n - i - 1][m - j - 1], l[i][m - j - 1]])\n            avg = d[1]\n            c += sum([abs(k - avg) for k in d])\n    if n % 2 == 1:\n        for i in range(m // 2):\n            avg = (l[n // 2][i] + l[n // 2][m - i - 1]) // 2\n            c += abs(l[n // 2][i] - avg) + abs(l[n // 2][m - i - 1] - avg)\n    if m % 2 == 1:\n        for i in range(n // 2):\n            avg = (l[i][m // 2] + l[n - i - 1][m // 2]) // 2\n            c += abs(l[i][m // 2] - avg) + abs(l[n - i - 1][m // 2] - avg)\n    print(c)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    ans = 0\n    [a.append(list(map(int, input().split()))) for i in range(r)]\n    for i in range(r // 2):\n        for j in range(c // 2):\n            b = [a[i][j], a[i][c - 1 - j], a[r - 1 - i][j], a[r - 1 - i][c - 1 - j]]\n            b.sort()\n            n = b[1]\n            ans += abs(n - a[i][j]) + abs(n - a[i][c - 1 - j]) + abs(n - a[r - 1 - i][j]) + abs(n - a[r - 1 - i][c - 1 - j])\n    if r % 2:\n        i = r // 2\n        for j in range(c // 2):\n            ans += abs(a[i][j] - a[i][c - 1 - j])\n    if c % 2:\n        j = c // 2\n        for i in range(r // 2):\n            ans += abs(a[i][j] - a[r - 1 - i][j])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    count = 0\n    up = 0\n    down = n - 1\n    while up <= down:\n        left = 0\n        right = m - 1\n        while left <= right:\n            temp = [arr[up][left], arr[up][right], arr[down][left], arr[down][right]]\n            temp.sort()\n            key = (temp[1] + temp[2]) // 2\n            if left != right and up != down:\n                count += abs(key - arr[up][left]) + abs(key - arr[up][right]) + abs(key - arr[down][left]) + abs(key - arr[down][right])\n            elif left != right:\n                count += abs(key - arr[up][left]) + abs(key - arr[up][right])\n            elif up != down:\n                count += abs(key - arr[up][left]) + abs(key - arr[down][left])\n            left += 1\n            right -= 1\n        up += 1\n        down -= 1\n    print(count)", "def readInt():\n    return int(input())\n\ndef readLine():\n    return [int(s) for s in input().split(' ')]\n\ndef readString():\n    return input()\nt = readInt()\n\ndef minAsks(su):\n    st = sorted(su)\n    median = st[len(su) // 2]\n    ret = 0\n    for i in st:\n        ret += abs(i - median)\n    return ret\n\ndef ask(ma):\n    m = len(ma)\n    n = len(ma[0])\n    total = 0\n    for i in range((m + 1) // 2):\n        for j in range((n + 1) // 2):\n            if 2 * i + 1 == m:\n                p1 = [i]\n            else:\n                p1 = [i, m - 1 - i]\n            if 2 * j + 1 == n:\n                p2 = [j]\n            else:\n                p2 = [j, n - 1 - j]\n            tocount = []\n            for p in p1:\n                for st in p2:\n                    tocount.append(ma[p][st])\n            total += minAsks(tocount)\n    return total\nfor _ in range(t):\n    (m, n) = readLine()\n    ret = []\n    for _ in range(m):\n        ret.append(readLine())\n    print(ask(ret))", "def main():\n    for _ in range(int(input())):\n        (n, m) = tuple(map(int, input().split()))\n        a = []\n        for _ in range(n):\n            a += [list(map(int, input().split()))]\n        op = 0\n        for i in range(n):\n            for j in range(m):\n                a1 = a[i][j]\n                a2 = a[n - 1 - i][j]\n                a3 = a[n - 1 - i][m - j - 1]\n                a4 = a[i][m - 1 - j]\n                l = []\n                l += [a1, a2, a3, a4]\n                l.sort()\n                op += abs(a1 - l[1])\n        print(op)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    ans = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    if n % 2:\n        for i in range(m // 2):\n            a = l[n // 2][i]\n            b = l[n // 2][m - i - 1]\n            ans += max(a, b) - min(a, b)\n    if m % 2:\n        for i in range(n // 2):\n            a = l[i][m // 2]\n            b = l[n - i - 1][m // 2]\n            ans += max(a, b) - min(a, b)\n    for i in range(n // 2):\n        for j in range(m // 2):\n            (a, b, c, d) = (l[i][j], l[i][m - j - 1], l[n - i - 1][j], l[n - i - 1][m - j - 1])\n            ans += min(abs(a - b) + abs(a - c) + abs(a - d), abs(a - b) + abs(b - c) + abs(b - d), abs(c - b) + abs(a - c) + abs(c - d), abs(d - b) + abs(a - d) + abs(c - d))\n    print(ans)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, m) = mints()\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(mints())\n    res = 0\n    for i in range(n):\n        if i <= n - 1 - i:\n            for j in range(m):\n                if j <= m - 1 - j:\n                    s = set([(x, y) for x in (i, n - 1 - i) for y in (j, m - 1 - j)])\n                    v = [a[x][y] for (x, y) in s]\n                    v.sort()\n                    c = v[len(v) // 2]\n                    for x in v:\n                        res += abs(x - c)\n    print(res)\nfor i in range(mint()):\n    solve()", "t = int(input())\nfor u in range(t):\n    x = [int(x) for x in input().split()]\n    n = x[0]\n    m = x[1]\n    k = [[[] for j in range((m + 1) // 2)] for i in range((n + 1) // 2)]\n    for i in range(n // 2):\n        inp = [int(x) for x in input().split()]\n        for j in range(m // 2):\n            k[i][j].append(inp[j])\n        for j in range((m + 1) // 2):\n            k[i][j].append(inp[m - j - 1])\n    for i in range((n + 1) // 2):\n        inp = [int(x) for x in input().split()]\n        for j in range(m // 2):\n            k[(n + 1) // 2 - 1 - i][j].append(inp[j])\n        for j in range((m + 1) // 2):\n            k[(n + 1) // 2 - 1 - i][j].append(inp[m - j - 1])\n    ans = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            if i == n // 2:\n                if j != m // 2:\n                    ans += max(k[i][j]) - min(k[i][j])\n            elif j == m // 2:\n                ans += max(k[i][j]) - min(k[i][j])\n            else:\n                k[i][j].sort()\n                ans += k[i][j][3]\n                ans += k[i][j][2]\n                ans -= k[i][j][1]\n                ans -= k[i][j][0]\n    print(ans)", "for __ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    ar = []\n    ans = 0\n    for i in range(n):\n        ar.append(list(map(int, input().split())))\n    for i in range(n // 2):\n        for j in range(m // 2):\n            lol = [ar[i][j], ar[n - i - 1][j], ar[i][m - j - 1], ar[n - i - 1][m - j - 1]]\n            lol.sort()\n            num = (lol[1] + lol[2]) // 2\n            ans += abs(num - ar[i][j])\n            ans += abs(num - ar[i][m - j - 1])\n            ans += abs(num - ar[n - i - 1][j])\n            ans += abs(num - ar[n - i - 1][m - j - 1])\n    if n % 2 == 1:\n        for j in range(m // 2):\n            num = round((ar[n // 2][j] + ar[n // 2][m - j - 1]) / 2)\n            ans += abs(num - ar[n // 2][j])\n            ans += abs(num - ar[n // 2][m - j - 1])\n    if m % 2 == 1:\n        for i in range(n // 2):\n            num = round((ar[i][m // 2] + ar[n - i - 1][m // 2]) / 2)\n            ans += abs(num - ar[i][m // 2])\n            ans += abs(num - ar[n - i - 1][m // 2])\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input().split()])\n    i = 0\n    ct = 0\n    while i < n // 2:\n        j = 0\n        while j < m // 2:\n            temp = [arr[i][j], arr[n - 1 - i][j], arr[i][m - 1 - j], arr[n - 1 - i][m - 1 - j]]\n            temp.sort()\n            med = (temp[1] + temp[2]) // 2\n            ct += abs(med - arr[i][j])\n            ct += abs(med - arr[n - 1 - i][j])\n            ct += abs(med - arr[i][m - 1 - j])\n            ct += abs(med - arr[n - 1 - i][m - 1 - j])\n            j += 1\n        i += 1\n    if n & 1:\n        mid = (n - 1) // 2\n        j = 0\n        while j < m // 2:\n            ct += abs(arr[mid][j] - arr[mid][m - 1 - j])\n            j += 1\n    if m & 1:\n        mid = (m - 1) // 2\n        i = 0\n        while i < n // 2:\n            ct += abs(arr[i][mid] - arr[n - 1 - i][mid])\n            i += 1\n    print(ct)", "for _ in range(int(input())):\n    cnt = 0\n    a = []\n    (n, m) = map(int, input().split())\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n // 2):\n        for j in range(m // 2):\n            (a1, a2, a3, a4) = (a[i][j], a[n - 1 - i][m - 1 - j], a[n - 1 - i][j], a[i][m - 1 - j])\n            cnt += min(abs(a2 - a1) + abs(a3 - a1) + abs(a4 - a1), abs(a1 - a2) + abs(a3 - a2) + abs(a4 - a2), abs(a2 - a3) + abs(a1 - a3) + abs(a4 - a3), abs(a2 - a4) + abs(a3 - a4) + abs(a1 - a4))\n    if n % 2 == 1:\n        for k in range(m // 2):\n            cnt += abs(a[n // 2][k] - a[n // 2][m - k - 1])\n    if m % 2 == 1:\n        for c in range(n // 2):\n            cnt += abs(a[c][m // 2] - a[n - c - 1][m // 2])\n    print(cnt)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (x, y) = map(int, stdin.readline().split())\n    ans = 0\n    array = []\n    for i in range(x):\n        array.append(list(map(int, stdin.readline().split())))\n    for i in range((x + 1) // 2):\n        for j in range((y + 1) // 2):\n            a = array[i][j]\n            b = array[i][y - j - 1]\n            c = array[x - i - 1][j]\n            d = array[x - i - 1][y - j - 1]\n            sorts = sorted([a, b, c, d])\n            value = (sorts[1] + sorts[2]) // 2\n            for aeg in [a, b, c, d]:\n                ans += abs(aeg - value)\n            if i == x - i - 1:\n                ans -= abs(value - c)\n                ans -= abs(value - d)\n            if j == y - j - 1:\n                ans -= abs(value - b)\n                ans -= abs(value - d)\n    print(ans)", "for x in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    g = []\n    for i in range(n):\n        g.append(list(map(int, input().split())))\n    s = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            k = []\n            k.append(g[i][j])\n            if n - 1 - i != i:\n                k.append(g[n - 1 - i][j])\n            if m - 1 - j != j:\n                k.append(g[i][m - 1 - j])\n            if n - 1 - i != i and m - 1 - j != j:\n                k.append(g[n - 1 - i][m - 1 - j])\n            if len(k) != 1:\n                k.sort()\n                v = 0\n                for y in range(len(k)):\n                    v += abs(k[y] - k[1])\n                s += v\n    print(s)", "def minSum(arr):\n    arr.sort()\n    x = arr[2]\n    suma = 0\n    for i in range(4):\n        suma += abs(arr[i] - x)\n    return suma\nn_cases = int(input())\nfor c in range(n_cases):\n    (m, n) = [int(s) for s in input().split()]\n    l = []\n    for _ in range(m):\n        l.append([int(s) for s in input().split()])\n    count = 0\n    for i in range(m // 2):\n        for j in range(n // 2):\n            a = l[i][j]\n            b = l[-1 - i][j]\n            c = l[i][-1 - j]\n            d = l[-1 - i][-1 - j]\n            count += minSum([a, b, c, d])\n    if m % 2:\n        for j in range(n // 2):\n            a = l[m // 2][j]\n            b = l[m // 2][-1 - j]\n            media = (a + b) // 2\n            count += abs(a - media) + abs(b - media)\n    if n % 2:\n        for i in range(m // 2):\n            a = l[i][n // 2]\n            b = l[-1 - i][n // 2]\n            media = (a + b) // 2\n            count += abs(a - media) + abs(b - media)\n    print(count)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    n1 = n // 2\n    m2 = m // 2\n    s = 0\n    t = [0 for i in range(4)]\n    for i in range(n1):\n        for j in range(m2):\n            t[0] = l[i][j]\n            t[1] = l[n - i - 1][j]\n            t[2] = l[i][m - j - 1]\n            t[3] = l[n - i - 1][m - j - 1]\n            t.sort()\n            a = t[1]\n            s += abs(abs(l[i][j] - a) + abs(l[n - i - 1][j] - a) + abs(l[i][m - j - 1] - a) + abs(l[n - i - 1][m - j - 1] - a))\n            l[i][j] = a\n            l[n - i - 1][j] = a\n            l[i][m - j - 1] = a\n            l[n - i - 1][m - j - 1] = a\n    if n & 1:\n        for i in range(m2):\n            s += abs(l[n1][i] - l[n1][m - i - 1])\n            l[n1][m - i - 1] = l[n1][i]\n    if m & 1:\n        for i in range(n1):\n            s += abs(l[i][m2] - l[n - i - 1][m2])\n            l[i][m2] = l[n - i - 1][m2]\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        a.append(arr)\n    count = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            s = [a[i][j], a[i][m - j - 1], a[n - i - 1][j], a[n - i - 1][m - j - 1]]\n            s.sort()\n            val = s[1]\n            count += abs(val - a[i][j]) + abs(val - a[i][m - j - 1]) + abs(val - a[n - i - 1][j]) + abs(val - a[n - i - 1][m - j - 1])\n    if n % 2 != 0:\n        for j in range(m // 2):\n            s = a[n // 2][j] + a[n // 2][m - j - 1]\n            val = s // 2\n            count += abs(val - a[n // 2][j]) + abs(val - a[n // 2][m - j - 1])\n    if m % 2 != 0:\n        for i in range(n // 2):\n            s = a[i][m // 2] + a[n - i - 1][m // 2]\n            val = s // 2\n            count += abs(val - a[i][m // 2]) + abs(val - a[n - i - 1][m // 2])\n    print(count)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    vis = [[0 for i in range(m)] for j in range(n)]\n    li = []\n    ans = 0\n    for i in range(0, n):\n        li.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if vis[i][j] != 1:\n                a = li[i][j]\n                b = li[n - 1 - i][j]\n                c = li[i][m - 1 - j]\n                d = li[n - 1 - i][m - 1 - j]\n                x = [a, b, c, d]\n                vis[i][j] = 1\n                vis[n - 1 - i][j] = 1\n                vis[i][m - 1 - j] = 1\n                vis[n - 1 - i][m - 1 - j] = 1\n                x.sort()\n                if i == n - 1 - i:\n                    ans += x[2] - x[1]\n                elif j == m - 1 - j:\n                    ans += x[2] - x[1]\n                else:\n                    ans += x[1] - x[0] + (x[2] - x[1]) + (x[3] - x[1])\n    print(ans)", "import math\nfor z in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    cnt = 0\n    for i in range(int(math.ceil(n / 2))):\n        for j in range(int(math.ceil(m / 2))):\n            (p, q, r, t) = (a[i][j], a[i][m - 1 - j], a[n - 1 - i][j], a[n - 1 - i][m - 1 - j])\n            if i == n - 1 - i and j == m - 1 - j:\n                pass\n            elif i == n - 1 - i:\n                cnt += abs(p - q)\n            elif j == m - 1 - j:\n                cnt += abs(p - r)\n            else:\n                tp = [p, q, r, t]\n                tp.sort()\n                (l, s) = (tp[1], tp[2])\n                cnt += min(abs(p - l) + abs(q - l) + abs(r - l) + abs(t - l), abs(p - s) + abs(q - s) + abs(r - s) + abs(t - s))\n    print(cnt)", "import math\nfor z in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    cnt = 0\n    for i in range(int(math.ceil(n / 2))):\n        for j in range(int(math.ceil(m / 2))):\n            (p, q, r, t) = (a[i][j], a[i][m - 1 - j], a[n - 1 - i][j], a[n - 1 - i][m - 1 - j])\n            if i == n - 1 - i and j == m - 1 - j:\n                pass\n            elif i == n - 1 - i:\n                cnt += abs(p - q)\n            elif j == m - 1 - j:\n                cnt += abs(p - r)\n            else:\n                tp = [p, q, r, t]\n                tp.sort()\n                l = tp[1]\n                cnt += abs(p - l) + abs(q - l) + abs(r - l) + abs(t - l)\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (N, M) = map(int, input().split())\n    arr = []\n    for _ in range(N):\n        arr.append(list(map(int, input().split())))\n    ans = 0\n    for i in range((N + 1) // 2):\n        for j in range((M + 1) // 2):\n            bounded = [arr[i][j]]\n            if N - i - 1 != i:\n                bounded.append(arr[N - i - 1][j])\n            if M - j - 1 != j:\n                bounded.append(arr[i][M - j - 1])\n            bounded.append(arr[N - i - 1][M - j - 1])\n            bounded.sort()\n            for r in range(len(bounded) // 2):\n                ans += bounded[-r - 1] - bounded[r]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    mat = [[0] * c for _ in range(r)]\n    for i in range(r):\n        mat[i] = list(map(int, input().split()))\n    halfr = r // 2\n    halfc = c // 2\n    res = 0\n    for i in range(halfr):\n        for j in range(halfc):\n            vals = sorted([mat[i][j], mat[i][c - 1 - j], mat[r - 1 - i][j], mat[r - 1 - i][c - 1 - j]])\n            res += sum((abs(v - (vals[1] + vals[2]) // 2) for v in vals))\n    if r % 2:\n        res += sum((abs(mat[r // 2][i] - mat[r // 2][c - i - 1]) for i in range(halfc)))\n    if c % 2:\n        res += sum((abs(mat[i][c // 2] - mat[r - i - 1][c // 2]) for i in range(halfr)))\n    print(res)", "from math import ceil as ceil\nt = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    row = []\n    cost = 0\n    for j in range(n):\n        row.append(input().split())\n    for j in range(ceil(n / 2.0)):\n        for k in range(ceil(m / 2.0)):\n            a = int(row[j][k])\n            b = int(row[n - j - 1][k])\n            c = int(row[j][m - k - 1])\n            d = int(row[n - j - 1][m - k - 1])\n            l = [a, b, c, d]\n            l.sort()\n            avg1 = l[1]\n            avg2 = l[2]\n            if not j == n - j - 1 and (not k == m - k - 1):\n                cost += min(abs(avg1 - a) + abs(avg1 - b) + abs(avg1 - c) + abs(avg1 - d), abs(avg2 - a) + abs(avg2 - b) + abs(avg2 - c) + abs(avg2 - d))\n            elif j == n - j - 1 and (not k == m - k - 1):\n                cost += abs(avg1 - avg2)\n            elif not j == n - j - 1 and k == m - k - 1:\n                cost += abs(avg1 - avg2)\n            else:\n                cost += 0\n    print(int(cost))", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if n % 2 == 0:\n        row = n // 2\n    else:\n        row = n // 2 + 1\n    if m % 2 == 0:\n        col = m // 2\n    else:\n        col = m // 2 + 1\n    ans = 0\n    for i in range(row):\n        for j in range(col):\n            if m - j - 1 != j and n - i - 1 != i:\n                l = [a[i][j], a[n - i - 1][j], a[i][m - j - 1], a[n - i - 1][m - j - 1]]\n            elif m - j - 1 == j and n - i - 1 == i:\n                l = [a[i][j]]\n            elif n - i - 1 != i and m - j - 1 == j:\n                l = [a[i][j], a[n - i - 1][j]]\n            else:\n                l = [a[i][j], a[i][m - j - 1]]\n            if len(l) == 4:\n                l.sort()\n                for lun in range(4):\n                    ans += abs(l[lun] - l[1])\n            elif len(l) == 2:\n                ans += abs(l[0] - l[1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for _ in range(n):\n        mat.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            (i2, j2) = (i, m - j - 1)\n            (i3, j3) = (n - i - 1, j)\n            (i4, j4) = (n - i - 1, m - j - 1)\n            diff = [mat[i][j], mat[i2][j2], mat[i3][j3], mat[i4][j4]]\n            diff.sort()\n            d1 = diff[1] - diff[0]\n            d2 = diff[2] - diff[1]\n            d3 = diff[3] - diff[2]\n            change = min(3 * d1 + 2 * d2 + d3, min(d1 + 2 * d2 + d3, d1 + 2 * d2 + 3 * d3))\n            ans += change\n    if n & 1:\n        i = n // 2\n        j1 = 0\n        j2 = m - 1\n        while j1 < j2:\n            ans += abs(mat[i][j1] - mat[i][j2])\n            j1 += 1\n            j2 -= 1\n    if m & 1:\n        i1 = 0\n        i2 = n - 1\n        j = m // 2\n        while i1 < i2:\n            ans += abs(mat[i1][j] - mat[i2][j])\n            i1 += 1\n            i2 -= 1\n    print(ans)", "def solve(row, column, matrix):\n    outerIndex = 0\n    innerIndex = 0\n    totalCost = 0\n    if row % 2 == 0:\n        halfRow = row // 2\n    else:\n        halfRow = row // 2 + 1\n    if column % 2 == 0:\n        halfColumn = column // 2\n    else:\n        halfColumn = column // 2 + 1\n    while outerIndex < halfRow:\n        innerIndex = 0\n        while innerIndex < halfColumn:\n            minimalCost = float('inf')\n            cost = 0\n            queue = []\n            queue.append(matrix[outerIndex][innerIndex])\n            if column - innerIndex - 1 != innerIndex:\n                queue.append(matrix[outerIndex][column - innerIndex - 1])\n            if row - outerIndex - 1 != outerIndex:\n                queue.append(matrix[row - outerIndex - 1][innerIndex])\n            if column - innerIndex - 1 != innerIndex and row - outerIndex - 1 != outerIndex:\n                queue.append(matrix[row - outerIndex - 1][column - innerIndex - 1])\n            for goal in set(queue):\n                cost = 0\n                for others in queue:\n                    cost += abs(others - goal)\n                if cost < minimalCost:\n                    minimalCost = cost\n            totalCost += minimalCost\n            innerIndex += 1\n        outerIndex += 1\n    return totalCost\nfor _ in range(int(input())):\n    matrix = []\n    (r, c) = list(map(int, input().split()))\n    for _ in range(r):\n        matrix.append(list(map(int, input().split())))\n    print(solve(r, c, matrix))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            x = [l[i][j], l[n - i - 1][j], l[i][m - j - 1], l[n - i - 1][m - j - 1]]\n            x.sort()\n            c = c + abs(l[i][j] - x[1])\n            l[i][j] = x[1]\n    print(c)", "def get_min_points(points, mat):\n    values = [mat[point[0]][point[1]] for point in points]\n    values.sort()\n    cand = values[1]\n    moves = 0\n    for val in values:\n        moves += abs(val - cand)\n    return moves\nt = int(input())\nfor _ in range(t):\n    (r, c) = list(map(int, input().split()))\n    mat = []\n    for i in range(r):\n        mat.append(list(map(int, input().split())))\n    ans = 0\n    for i in range(r // 2):\n        for j in range(c // 2):\n            points = [(i, j), (i, c - j - 1), (r - i - 1, j), (r - i - 1, c - j - 1)]\n            points = set(points)\n            if len(points) != 1:\n                ans += get_min_points(points, mat)\n    if r % 2:\n        mid_i = r // 2\n        for j in range(c // 2):\n            ans += abs(mat[mid_i][j] - mat[mid_i][c - j - 1])\n    if c % 2:\n        mid_j = c // 2\n        for i in range(r // 2):\n            ans += abs(mat[i][mid_j] - mat[r - i - 1][mid_j])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [None] * n\n    for i in range(n):\n        a[i] = [int(s) for s in input().split()]\n    b = [[0] * m for s in range(n)]\n    for i in range(n // 2 + n % 2):\n        for j in range(m // 2 + m % 2):\n            d = [a[i][j], a[i][m - j - 1], a[n - i - 1][j], a[n - i - 1][m - j - 1]]\n            d.sort()\n            med = (d[1] + d[2]) // 2\n            (b[i][j], b[i][m - j - 1], b[n - i - 1][j], b[n - i - 1][m - j - 1]) = (med, med, med, med)\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            s += abs(b[i][j] - a[i][j])\n    print(s)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    n1 = n // 2\n    m2 = m // 2\n    s = 0\n    t = [0 for i in range(4)]\n    for i in range(n1):\n        for j in range(m2):\n            t[0] = l[i][j]\n            t[1] = l[n - i - 1][j]\n            t[2] = l[i][m - j - 1]\n            t[3] = l[n - i - 1][m - j - 1]\n            t.sort()\n            a = t[2]\n            s += abs(abs(l[i][j] - a) + abs(l[n - i - 1][j] - a) + abs(l[i][m - j - 1] - a) + abs(l[n - i - 1][m - j - 1] - a))\n            l[i][j] = a\n            l[n - i - 1][j] = a\n            l[i][m - j - 1] = a\n            l[n - i - 1][m - j - 1] = a\n    if n & 1:\n        for i in range(m2):\n            s += abs(l[n1][i] - l[n1][m - i - 1])\n            l[n1][m - i - 1] = l[n1][i]\n    if m & 1:\n        for i in range(n1):\n            s += abs(l[i][m2] - l[n - i - 1][m2])\n            l[i][m2] = l[n - i - 1][m2]\n    print(s)", "T = int(input())\nfor cas in range(T):\n    x = [int(v) for v in input().split()]\n    n = x[0]\n    m = x[1]\n    matrix = []\n    for i in range(n):\n        x = [int(v) for v in input().split()]\n        matrix.append(x)\n    (l, r, t, b) = (0, m - 1, 0, n - 1)\n    result = 0\n    while t <= b:\n        while l <= r:\n            (tl, tr, bl, br) = (matrix[t][l], matrix[t][r], matrix[b][l], matrix[b][r])\n            corners = [tl, tr, bl, br]\n            corners.sort()\n            avg1 = corners[1]\n            avg2 = corners[2]\n            sum1 = abs(tl - avg1)\n            sum2 = abs(tl - avg2)\n            if l != r:\n                sum1 += abs(tr - avg1)\n                sum2 += abs(tr - avg2)\n            if t != b:\n                sum1 += abs(bl - avg1)\n                sum2 += abs(bl - avg2)\n                if l != r:\n                    sum1 += abs(br - avg1)\n                    sum2 += abs(br - avg2)\n            if sum1 < sum2:\n                result += sum1\n            else:\n                result += sum2\n            (l, r) = (l + 1, r - 1)\n        (l, r) = (0, m - 1)\n        (t, b) = (t + 1, b - 1)\n    print(result)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        matrix.append(x)\n    count = 0\n    for i in range((n + 1) // 2):\n        for j in range((m + 1) // 2):\n            x = []\n            x.append(matrix[i][j])\n            if i != n - i - 1:\n                x.append(matrix[n - i - 1][j])\n            if j != m - j - 1:\n                x.append(matrix[i][m - j - 1])\n            if i != n - i - 1 and j != m - j - 1:\n                x.append(matrix[n - i - 1][m - j - 1])\n            x = sorted(x)\n            if len(x) == 2:\n                count += x[1] - x[0]\n            elif len(x) == 4:\n                count += x[3] + x[2] - x[1] - x[0]\n    print(int(count))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = [R() for _ in [0] * R()[0]]\n    r = 0\n    for b in zip(a, a[::-1]):\n        b = (*zip(*b),)\n        for (x, y) in zip(b, b[::-1]):\n            (u, v, x, y) = sorted(x + y)\n            r += x + y - u - v\n    print(r // 4)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = [R() for _ in [0] * R()[0]]\n    r = 0\n    for b in zip(a, a[::-1]):\n        b = (*zip(*b),)\n        for (x, y) in zip(b, b[::-1]):\n            (u, v, x, y) = sorted(x + y)\n            r += x + y - u - v\n    print(r // 4)", "t = int(input())\na = []\nfor i in range(t):\n    c = 0\n    (n, m) = map(int, input().split())\n    matrix = []\n    for j in range(n):\n        matrix.append(list(map(int, input().split())))\n    for j in range(n):\n        for k in range(m):\n            med = [matrix[j][k], matrix[j][-1 - k], matrix[-1 - j][k], matrix[-1 - j][-1 - k]]\n            med.sort()\n            med = med[2]\n            c += abs(matrix[j][k] - med)\n    a.append(int(c))\nfor i in a:\n    print(i)", "def f(a):\n    a.sort()\n    aver = a[1]\n    return int(sum([-aver + a[i] if aver - a[i] < 0 else aver - a[i] for i in range(len(a))]))\nt = int(input())\nfor i in range(t):\n    sum1 = 0\n    (n, m) = map(int, input().split())\n    matrix = [list(map(int, input().split())) for j in range(n)]\n    for j in range(n // 2 + n % 2):\n        for k in range(m // 2 + m % 2):\n            if 2 * j + 1 != n and 2 * k + 1 != m:\n                sum1 += f([matrix[j][k], matrix[-j - 1][k], matrix[-j - 1][-k - 1], matrix[j][-k - 1]])\n            elif 2 * j + 1 != n and 2 * k + 1 == m:\n                sum1 += f([matrix[j][k], matrix[-j - 1][k]])\n            elif 2 * j + 1 == n and 2 * k + 1 != m:\n                sum1 += f([matrix[j][-k - 1], matrix[j][k]])\n    print(sum1)", "def optimal(li):\n    li.sort()\n    ans1 = ans2 = 0\n    val1 = li[1]\n    val2 = li[2]\n    for i in range(4):\n        ans1 += abs(li[i] - val1)\n        ans2 += abs(li[i] - val2)\n    return min(ans1, ans2)\n\ndef tp(li, n):\n    ans = 0\n    for i in range(n // 2):\n        ans += abs(li[i] - li[n - i - 1])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        arr.append(temp)\n    ans = 0\n    for i in range(n // 2):\n        for j in range(m // 2):\n            li = []\n            li.append(arr[i][j])\n            li.append(arr[i][m - j - 1])\n            li.append(arr[n - i - 1][j])\n            li.append(arr[n - i - 1][m - j - 1])\n            ans += optimal(li)\n    if n % 2 != 0:\n        ans += tp(arr[n // 2], m)\n    if m % 2 != 0:\n        li = []\n        for i in range(n):\n            li.append(arr[i][m // 2])\n        ans += tp(li, n)\n    print(ans)", "def muutused(a, b, c, d):\n    x = [a, b, c, d]\n    x = sorted(x)\n    s = 0\n    for i in x:\n        s += abs(i - x[1])\n    return s\nfor i in range(int(input())):\n    a = input().strip().split(' ')\n    m = []\n    for j in range(int(a[0])):\n        m.append(list(map(int, input().strip().split(' '))))\n    b = 0\n    c = []\n    y = 0\n    while y < int(a[0]) // 2:\n        x = 0\n        while x < int(a[1]) // 2:\n            b += muutused(m[y][x], m[y][int(a[1]) - x - 1], m[int(a[0]) - y - 1][x], m[int(a[0]) - y - 1][int(a[1]) - x - 1])\n            x += 1\n        y += 1\n    if int(a[0]) % 2 == 1:\n        x = 0\n        while x < int(a[1]) // 2:\n            b += abs(m[y][x] - m[y][int(a[1]) - x - 1])\n            x += 1\n    if int(a[1]) % 2 == 1:\n        y = 0\n        while y < int(a[0]) // 2:\n            b += abs(m[y][x] - m[int(a[0]) - y - 1][x])\n            y += 1\n    print(b)"]