["import sys\ninput = sys.stdin.readline\nt = int(input())\nfor test in range(t):\n    m = int(input())\n    rad1 = list(map(int, input().split()))\n    rad2 = list(map(int, input().split()))\n    steps1 = m - 1\n    steps2 = 0\n    coins1 = 0\n    coins2 = 0\n    while steps1 != steps2:\n        if coins1 + rad1[steps1] < coins2 + rad2[steps2]:\n            coins1 = coins1 + rad1[steps1]\n            steps1 = steps1 - 1\n        else:\n            coins2 = coins2 + rad2[steps2]\n            steps2 = steps2 + 1\n    print(max(coins1, coins2))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sa = sum(a) - a[0]\n    sb = 0\n    r = sa\n    for i in range(1, n):\n        sa -= a[i]\n        sb += b[i - 1]\n        r = min(r, max(sa, sb))\n    print(r)\nfor i in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    (res, u, d, up, do) = (float('inf'), 0, 0, [], [0])\n    for i in range(n):\n        u += a[i]\n        d += b[i]\n        up += [u]\n        do += [d]\n    for i in range(n):\n        p1 = u - up[i]\n        p2 = do[i]\n        if p1 > p2:\n            if p1 < res:\n                res = p1\n        elif p2 < res:\n            res = p2\n    t += [res]\nfor k in t:\n    print(k)", "import sys\ninput_file = sys.stdin\noutput_file = sys.stdout\nfor i in range(int(input_file.readline())):\n    n = int(input_file.readline())\n    row1 = [int(num) for num in input_file.readline().split()]\n    row2 = [int(num) for num in input_file.readline().split()]\n    sum1 = 0\n    sum2 = sum(row2[:-1])\n    ans = max(sum1, sum2)\n    for j in range(n - 1):\n        sum1 += row1[n - 1 - j]\n        sum2 -= row2[n - 2 - j]\n        ans = min(ans, max(sum1, sum2))\n    output_file.write(str(ans) + '\\n')", "t = int(input())\nresults = [None] * t\nfor l in range(t):\n    m = int(input())\n    row_1 = [int(x) for x in input().split()]\n    row_2 = [int(x) for x in input().split()]\n    lowest_score = sum(row_1) + sum(row_2)\n    score1 = sum(row_1)\n    score2 = 0\n    for i in range(m):\n        score1 -= row_1[i]\n        score = max(score1, score2)\n        if score < lowest_score:\n            lowest_score = score\n        score2 += row_2[i]\n    results[l] = lowest_score\n[print(x) for x in results]", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    m = int(input())\n    arr = [list(map(int, input().split())) for _ in range(2)]\n    (ps1, ps2) = ([0] * m, [0] * m)\n    v1 = v2 = 0\n    for i in range(m):\n        v1 += arr[0][i]\n        v2 += arr[1][i]\n        ps1[i] += v1\n        ps2[i] += v2\n    ans = min(ps1[-1] - ps1[0], ps2[-1] - arr[1][-1])\n    for i in range(1, m - 1):\n        ans = min(ans, max(ps2[i - 1], ps1[-1] - ps1[i]))\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import sys, math\ninf = math.inf\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\na = int(input())\nfor _ in range(a):\n    m = int(input())\n    l = [list(map(int, input().split())) for i in range(2)]\n    if m == 1:\n        print(0)\n    else:\n        y1 = [0]\n        y2 = [0]\n        ch = 0\n        for i in range(m):\n            y1.append(l[0][i] + y1[i])\n            y2.append(l[1][i] + y2[i])\n        for i in range(m):\n            if i == m - 1:\n                ch = i\n                break\n            if y2[i + 1] > y1[m] - y1[i + 1]:\n                ch = i\n                break\n        print(max(y1[m] - y1[ch + 1], y2[ch]))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    m = int(input())\n    i1 = list(map(int, input().split()))\n    i2 = list(map(int, input().split()))\n    su1 = sum(i1)\n    su2 = sum(i2)\n    res = []\n    resd1 = 0\n    resd2 = su2\n    for i in range(m):\n        resd1 += i1[i]\n        res.append(max(su1 - resd1, su2 - resd2))\n        resd2 -= i2[i]\n    print(min(res))", "def score(m, l1, l2):\n    mat = [l1, l2]\n    sum1 = sum(l1)\n    s4 = sum(l2)\n    sum2 = 0\n    sum1 -= l1[0]\n    sum2 += mat[1][0]\n    for i in range(1, m):\n        if sum2 > sum1:\n            s4 -= mat[1][i - 1]\n        else:\n            sum1 -= mat[0][i]\n            sum2 += mat[1][i]\n    s4 -= mat[1][m - 1]\n    return max(sum1, s4)\nfor i in range(int(input())):\n    m = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    print(score(m, l1, l2))", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfrom itertools import accumulate\nfor _ in range(rn()):\n    n = rn()\n    top = rl()\n    bottom = rl()\n    if n == 1:\n        print(0)\n    else:\n        top = list(accumulate(top[::-1]))[::-1]\n        bottom = list(accumulate(bottom))\n        ans = float('inf')\n        for i in range(1, n):\n            if i == 1:\n                ans = min(ans, top[i])\n            else:\n                ans = min(ans, max(top[i], bottom[i - 2]))\n        ans = min(ans, bottom[-2])\n        print(ans)", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef solve():\n    n = I()\n    a = L()\n    b = L()\n    suma = sum(a)\n    sumb = sum(b)\n    for i in range(1, n):\n        a[i] = a[i - 1] + a[i]\n    for i in range(n - 2, -1, -1):\n        b[i] = b[i] + b[i + 1]\n    ans = 0\n    l = []\n    for i in range(n):\n        l.append(max(suma - a[i], sumb - b[i]))\n    l.sort()\n    print(l[0])\nfor _ in range(I()):\n    solve()", "def get_ans(mas1, mas2, m):\n    sum1 = sum(mas1)\n    sum2 = 0\n    maxs = []\n    for i in range(m):\n        sum1 -= mas1[i]\n        maxs.append(max(sum1, sum2))\n        sum2 += mas2[i]\n    return min(maxs)\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        m = int(input())\n        mas1 = list(map(int, input().split()))\n        mas2 = list(map(int, input().split()))\n        res = get_ans(mas1, mas2, m)\n        print(res)\nmain()", "import sys\ninput_file = sys.stdin\noutput_file = sys.stdout\nfor i in range(int(input_file.readline())):\n    n = int(input_file.readline())\n    row1 = [int(num) for num in input_file.readline().split()]\n    row2 = [int(num) for num in input_file.readline().split()]\n    sum1 = 0\n    sum2 = sum(row2[:-1])\n    ans = max(sum1, sum2)\n    for j in range(n - 1):\n        sum1 += row1[n - 1 - j]\n        sum2 -= row2[n - 2 - j]\n        ans = min(ans, max(sum1, sum2))\n    output_file.write(str(ans) + '\\n')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    m = int(input())\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    s = sum(a) - a[0]\n    ans = s\n    x = 0\n    for i in range(1, m):\n        x += b[i - 1]\n        s -= a[i]\n        p = max(x, s)\n        ans = min(ans, p)\n    print(ans)\n    t -= 1", "for t in range(int(input())):\n    m = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    shag1 = m - 1\n    shag2 = 0\n    grivna1 = 0\n    grivna2 = 0\n    while shag1 != shag2:\n        if grivna1 + s1[shag1] < grivna2 + s2[shag2]:\n            grivna1 += s1[shag1]\n            shag1 -= 1\n        else:\n            grivna2 += s2[shag2]\n            shag2 += 1\n    print(max(grivna1, grivna2))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    m = int(input())\n    a = []\n    for i in range(2):\n        a.append(list(map(int, input().split())))\n    ans = 1000000000000000.0\n    sum1 = sum2 = 0\n    for i in range(m):\n        sum1 += a[0][i]\n    for i in range(m):\n        sum1 -= a[0][i]\n        ans = min(ans, max(sum1, sum2))\n        sum2 += a[1][i]\n    print(ans)", "import sys, math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = []\n        for i in range(2):\n            x = get_ls()\n            ls.append(x)\n        sum1 = sum(ls[0])\n        sum2 = 0\n        ans = math.inf\n        for i in range(n):\n            sum1 -= ls[0][i]\n            ans = min(ans, max(sum1, sum2))\n            sum2 += ls[1][i]\n        print(ans)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef dub(i, a1, a2):\n    m = len(a1)\n    if i == 0:\n        return a1[m - 1] - a1[0]\n    return max(a2[i - 1], a1[m - 1] - a1[i])\n\ndef solve():\n    m = int(input())\n    a1 = [int(x) for x in input().split()]\n    a2 = [int(x) for x in input().split()]\n    for i in range(1, m):\n        a1[i] += a1[i - 1]\n    for i in range(1, m):\n        a2[i] += a2[i - 1]\n    ans = 1e+20\n    for i in range(m):\n        ans = min(ans, dub(i, a1, a2))\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\nT = inp()\nfor i in range(T):\n    m = inp()\n    l1 = inlt()\n    l2 = inlt()\n    if m == 1:\n        print(0)\n    elif m == 2:\n        print(min(l1[1], l2[0]))\n    else:\n        sum_row1 = {}\n        sum_row2 = {}\n        sum_row1[0] = l1[0]\n        sum_row2[0] = l2[0]\n        for j in range(1, m):\n            sum_row1[j] = l1[j] + sum_row1[j - 1]\n            sum_row2[j] = l2[j] + sum_row2[j - 1]\n        max_score = sum_row1[m - 1] - sum_row1[0]\n        index = 0\n        for p in range(1, m):\n            score = max(sum_row1[m - 1] - sum_row1[p], sum_row2[p - 1])\n            if score < max_score:\n                max_score = score\n                index = p\n        if index == 0:\n            print(sum_row1[m - 1] - sum_row1[0])\n        elif index == m - 1:\n            print(sum_row2[m - 2])\n        else:\n            print(max(sum_row1[m - 1] - sum_row1[index], sum_row2[index - 1]))", "import sys\nimport math\nlines = []\nis_stdin = False\nis_stdin = True\nif is_stdin:\n    for line in sys.stdin:\n        lines.append(line.strip())\nelse:\n    with open('./input1.txt', 'r') as f:\n        for line in f.readlines():\n            lines.append(line.strip())\nN = int(lines.pop(0))\nwhile N > 0:\n    N -= 1\n    n = int(lines.pop(0))\n    a = lines.pop(0).split(' ')\n    arr_a = [int(x) for x in a]\n    b = lines.pop(0).split(' ')\n    arr_b = [int(x) for x in b]\n    sum_a = sum(arr_a)\n    top_right = sum_a\n    bottom_left = 0\n    a_min_b = None\n    for i in range(0, len(arr_a)):\n        top_right -= arr_a[i]\n        if i > 0:\n            bottom_left += arr_b[i - 1]\n        cur_b_max = max(top_right, bottom_left)\n        if a_min_b is None:\n            a_min_b = cur_b_max\n        elif cur_b_max < a_min_b:\n            a_min_b = cur_b_max\n    print(a_min_b)", "def main():\n    t = int(input())\n    if t < 1 or t > 10000:\n        return\n    for _ in range(t):\n        m = int(input())\n        if m < 1 or m > 100000:\n            return\n        r1 = list(map(int, input().split()))\n        r2 = list(map(int, input().split()))\n        data = list()\n        pref = 0\n        suff = sum(r1) - r1[0]\n        a_min = suff + r1[0]\n        for i in range(m):\n            n_min = max(pref, suff)\n            if n_min < a_min:\n                a_min = n_min\n            pref += r2[i]\n            if i + 1 == m:\n                suff = 0\n            else:\n                suff -= r1[i + 1]\n        print(a_min)\nmain()", "def main():\n    t = int(input())\n    if t < 1 or t > 10000:\n        return\n    for _ in range(t):\n        m = int(input())\n        if m < 1 or m > 100000:\n            return\n        r1 = list(map(int, input().split()))\n        r2 = list(map(int, input().split()))\n        data = list()\n        pref = 0\n        suff = sum(r1) - r1[0]\n        a_min = suff + r1[0]\n        for i in range(m):\n            n_min = max(pref, suff)\n            if n_min < a_min:\n                a_min = n_min\n            pref += r2[i]\n            if i + 1 == m:\n                suff = 0\n            else:\n                suff -= r1[i + 1]\n        print(a_min)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, arr) = (int(input()), [])\n    for _ in range(2):\n        arr.append(list(map(int, input().split())))\n    mx = 1000000000000000.0\n    sum1 = sum2 = 0\n    for i in range(n):\n        sum1 += arr[0][i]\n    for i in range(n):\n        sum1 -= arr[0][i]\n        mx = min(mx, max(sum1, sum2))\n        sum2 += arr[1][i]\n    print(mx)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, arr) = (int(input()), [])\n    for _ in range(2):\n        arr.append(list(map(int, input().split())))\n    mx = 1000000000000000.0\n    sum1 = sum2 = 0\n    for i in range(n):\n        sum1 += arr[0][i]\n    for i in range(n):\n        sum1 -= arr[0][i]\n        mx = min(mx, max(sum1, sum2))\n        sum2 += arr[1][i]\n    print(mx)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, arr) = (int(input()), [])\n    for _ in range(2):\n        arr.append(list(map(int, input().split())))\n    mx = 1000000000000000.0\n    sum1 = sum2 = 0\n    for i in range(n):\n        sum1 += arr[0][i]\n    for i in range(n):\n        sum1 -= arr[0][i]\n        mx = min(mx, max(sum1, sum2))\n        sum2 += arr[1][i]\n    print(mx)", "import sys\ninput = sys.stdin.readline\nt = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    (res, u, d, up, do) = (float('inf'), 0, 0, [], [])\n    for i in range(n):\n        u += a[i]\n        d += b[i]\n        up += [u]\n        do += [d]\n    for i in range(n):\n        p = max(u - up[i], do[i - 1] * (i != 0))\n        res = min(res, p)\n    t += [res]\nfor k in t:\n    print(k)", "import sys\nimport math\nimport collections\nfrom os import path\nfrom collections import defaultdict\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 6)\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ntest = int(sys.stdin.readline().rstrip())\nwhile test > 0:\n    test -= 1\n    n = int(sys.stdin.readline().rstrip())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    b = list(map(int, sys.stdin.readline().rstrip().split()))\n    if n == 1:\n        print(0)\n    else:\n        a1 = [0] * n\n        s = 0\n        for x in range(n):\n            s += a[x]\n            a1[x] = s\n        b1 = [0] * n\n        s = 0\n        for x in range(n - 1, -1, -1):\n            s += b[x]\n            b1[x] = s\n        ans = 10 ** 10\n        for x in range(n):\n            p = max(a1[n - 1] - a1[x], b1[0] - b1[x])\n            if p < ans:\n                ans = p\n        print(ans)", "for _ in range(int(input())):\n    m = int(input())\n    field = tuple((tuple(map(int, input().split())), tuple(map(int, input().split()))))\n    (a, b) = (sum(field[0][1:]), 0)\n    for (a_part, b_part) in zip(field[0][1:], field[1][:-1]):\n        if max(a - a_part, b + b_part) > max(a, b):\n            break\n        a -= a_part\n        b += b_part\n    print(max(a, b))", "import sys\nimport math\nmod = 10 ** 9 + 7\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nr = range\nfor t in r(IN()):\n    m = IN()\n    arr = []\n    top = LI()\n    bottom = LI()\n    if m == 1:\n        print(0)\n        continue\n    presum = 0\n    for i in reversed(range(m)):\n        presum += top[i]\n        top[i] = presum\n    presum = 0\n    for i in range(m):\n        presum += bottom[i]\n        bottom[i] = presum\n    ans = min(top[1], bottom[m - 2])\n    for i in range(1, m - 1):\n        ans = min(ans, max(top[i + 1], bottom[i - 1]))\n    print(ans)", "n = int(input())\nfor task in range(n):\n    m = int(input())\n    s1 = [int(num1) for num1 in input().split()]\n    s2 = [int(num2) for num2 in input().split()]\n    res = []\n    sum1 = sum(s1)\n    sum2 = 0\n    for i in range(m):\n        sum1 -= s1[i]\n        res.append(max(sum1, sum2))\n        sum2 += s2[i]\n    print(min(res))", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\nT = int(input())\nfor _ in range(T):\n    m = int(input())\n    A1 = get_ints()\n    A2 = get_ints()\n    A1_sum = sum(A1) - A1[0]\n    A2_sum = 0\n    min_score = max(A1_sum, A2_sum)\n    for i in range(1, m):\n        A1_sum -= A1[i]\n        A2_sum += A2[i - 1]\n        score = max(A1_sum, A2_sum)\n        if score < min_score:\n            min_score = score\n    print(min_score)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    (res, u, d, up, do) = (float('inf'), 0, 0, [], [])\n    for i in range(n):\n        u += a[i]\n        d += b[i]\n        up += [u]\n        do += [d]\n    for i in range(n):\n        p = max(u - up[i], do[i - 1] * (i != 0))\n        res = min(res, p)\n    print(res)", "def inp():\n    return int(input())\n\ndef invr():\n    return list(map(int, input().split()))\n\ndef score(matrix):\n    first_row_sum = sum(matrix[0])\n    second_row_sum = 0\n    max_score = float('inf')\n    for i in range(len(matrix[0])):\n        sum_one = first_row_sum - matrix[0][i]\n        if first_row_sum - matrix[0][i] != 0:\n            first_row_sum -= matrix[0][i]\n        sum_two = second_row_sum\n        second_row_sum += matrix[1][i]\n        max_score = min(max_score, max(sum_one, sum_two))\n    print(max_score)\nn = inp()\nmatrices = []\nfor i in range(n):\n    m = inp()\n    tmp = []\n    for _ in range(2):\n        line = invr()\n        tmp.append(line)\n    matrices.append(tmp)\nfor matrix in matrices:\n    score(matrix)", "def coins(m, a, b):\n    cabove = sum(a) - a[0]\n    cbelow = 0\n    prvc = sum(a) - a[0]\n    result = prvc\n    for i in range(1, m):\n        cabove = cabove - a[i]\n        cbelow = cbelow + b[i - 1]\n        prvc = max(cbelow, cabove)\n        result = min(prvc, result)\n    return result\nx = int(input())\nm = []\nfor i in range(x):\n    a = int(input())\n    z = input()\n    z1 = z.split(' ')\n    z2 = [int(t) for t in z1]\n    y = input()\n    y1 = y.split(' ')\n    y2 = [int(t) for t in y1]\n    m.append((a, z2, y2))\nfor j in range(x):\n    print(coins(m[j][0], m[j][1], m[j][2]))", "def main(n, a, b) -> int:\n    pref_a = [0]\n    pref_b = [0]\n    suf_a = [0]\n    suf_b = [0]\n    for i in range(n):\n        pref_a.append(pref_a[-1] + a[i])\n        pref_b.append(pref_b[-1] + b[i])\n    pref_a.append(pref_a[-1])\n    pref_b.append(pref_b[-1])\n    for i in range(n - 1, -1, -1):\n        suf_a.append(suf_a[-1] + a[i])\n        suf_b.append(suf_b[-1] + b[i])\n    suf_a.append(suf_a[-1])\n    suf_b.append(suf_b[-1])\n    suf_a.reverse()\n    suf_b.reverse()\n    bob_score = float('inf')\n    for i in range(1, n + 1):\n        _alice_score = pref_a[i] + suf_b[i]\n        _bob_score = max(pref_b[i - 1], suf_a[i + 1])\n        if bob_score > _bob_score:\n            bob_score = _bob_score\n    return bob_score\nt = int(input())\nans = []\nfor i in range(t):\n    m = int(input())\n    a = [int(i) for i in input().split(' ')]\n    b = [int(i) for i in input().split(' ')]\n    ans.append(main(m, a, b))\nfor i in ans:\n    print(i)", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    row = [list(map(int, input().split()))]\n    row += [list(map(int, input().split()))]\n    row[0][0] = 0\n    row[1][-1] = 0\n    sum_row_0 = sum(row[0])\n    sum_row_1 = 0\n    final_score = sum_row_0\n    for i in range(1, m):\n        if m == 1:\n            final_score = 0\n            break\n        if m == 2:\n            final_score = min(sum(row[0]), sum(row[1]))\n            break\n        sum_row_0 -= row[0][i]\n        sum_row_1 += row[1][i - 1]\n        currenty_score = max(sum_row_0, sum_row_1)\n        if currenty_score < final_score:\n            final_score = currenty_score\n            if i == m - 1:\n                break\n        else:\n            break\n    print(final_score)", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    row = [list(map(int, input().split()))]\n    row += [list(map(int, input().split()))]\n    row[0][0] = 0\n    row[1][-1] = 0\n    sum_row_0 = sum(row[0])\n    sum_row_1 = 0\n    final_score = sum_row_0\n    for i in range(1, m):\n        if m == 1:\n            final_score = 0\n            break\n        if m == 2:\n            final_score = min(sum(row[0]), sum(row[1]))\n            break\n        sum_row_0 -= row[0][i]\n        sum_row_1 += row[1][i - 1]\n        currenty_score = max(sum_row_0, sum_row_1)\n        if currenty_score < final_score:\n            final_score = currenty_score\n        else:\n            break\n    print(final_score)", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (u, d, co) = (0, sum(a), 10 ** 9)\n    for jj in range(n):\n        d -= a[jj]\n        co = min(co, max(u, d))\n        u += b[jj]\n    print(co)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "def main():\n    for P in range(int(input())):\n        iloL = int(input())\n        listG = list(map(int, input().split()))\n        listD = list(map(int, input().split()))\n        (sumD, sumG) = (0, sum(listG) - listG[0])\n        wyn = sumG\n        for i in range(1, iloL):\n            sumG -= listG[i]\n            sumD += listD[i - 1]\n            wyn = min(wyn, max(sumG, sumD))\n        print(wyn)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lsta = list(map(int, input().split()))\n    lstb = list(map(int, input().split()))\n    prea = [lsta[0]]\n    preb = [lstb[0]]\n    for j in range(1, n):\n        prea.append(prea[-1] + lsta[j])\n        preb.append(preb[-1] + lstb[j])\n    a = prea[-1] - prea[0]\n    b = 0\n    dif = a - b\n    ind = 1\n    lst1 = [max(a, b)]\n    while True:\n        if dif <= 0:\n            break\n        else:\n            a = prea[-1] - prea[ind]\n            b = preb[ind - 1]\n            dif = a - b\n            lst1.append(max(a, b))\n            ind += 1\n    if lst1 == []:\n        print(0)\n    else:\n        print(min(lst1))", "from itertools import accumulate\n\ndef readline():\n    return list(map(int, input().split()))\n\ndef solve():\n    m = int(input())\n    a1 = list(accumulate(reversed(readline()), initial=0))\n    a2 = list(accumulate(readline(), initial=0))\n    print(min((max(a1[i], a2[m - 1 - i]) for i in range(m))))\nt = int(input())\nfor __ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    m = int(input())\n    a = [list(map(int, input().split())) for i in range(2)]\n    if m == 1:\n        print(0)\n        continue\n    (t_l, t_r) = (0, 0)\n    (L, R) = (0, m - 1)\n    while L != R:\n        if t_l <= t_r:\n            t_l += a[1][L]\n            L += 1\n        else:\n            t_r += a[0][R]\n            R -= 1\n    M = max(t_l, t_r)\n    if L > 0:\n        M = min(M, max(t_l - a[1][L - 1], t_r + a[0][R]))\n    if R < m - 1:\n        M = min(M, max(t_l + a[1][L], t_r - a[0][R + 1]))\n    print(M)", "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next():\n    return tokens.pop()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef getIntArray(n):\n    return [nextInt() for _ in range(n)]\n\ndef getFloatArray(n):\n    return [nextFloat() for _ in range(n)]\n\ndef getStringArray(n):\n    return [next() for _ in range(n)]\nflush = sys.stdout.flush\ntestcase = True\n\ndef solve(testcase):\n    N = nextInt()\n    A = [getIntArray(N), getIntArray(N)]\n    (S1, S2) = (sum(A[0]), 0)\n    finalScore = max(S1 - A[0][0], sum(A[1]) - A[-1][-1])\n    for i in range(N):\n        S1 -= A[0][i]\n        score = max(S1, S2)\n        S2 += A[1][i]\n        finalScore = min(finalScore, score)\n    print(finalScore)\ntestcaseCount = nextInt() if testcase else 1\nfor tc in range(testcaseCount):\n    solve(tc + 1)\nassert not tokens", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    m = int(input())\n    c = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = [0 for i in range(m)]\n    e = [0 for i in range(m)]\n    d[0] = b[0]\n    e[m - 1] = c[m - 1]\n    for i in range(1, m):\n        d[i] = d[i - 1] + b[i]\n    for i in range(m - 2, -1, -1):\n        e[i] = e[i + 1] + c[i]\n    an = min(sum(c[1:m]), sum(b[:m - 1]))\n    for i in range(1, m - 1):\n        an = min(an, max(d[i - 1], e[i + 1]))\n    print(an)", "def solve(A, B, n):\n    pref = [0]\n    for it in B:\n        pref.append(pref[-1] + it)\n    suff = [0] * n\n    cur = 0\n    for i in range(n - 1, -1, -1):\n        suff[i] = cur\n        cur += A[i]\n    ans = float('inf')\n    for i in range(n):\n        mn = max(pref[i], suff[i])\n        ans = min(ans, mn)\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = solve(A, B, n)\n    print(ans)", "import itertools\nt = int(input())\nfor h in range(t):\n    m = int(input())\n    a = list(([], []))\n    a[0] = list(map(int, input().split()))\n    a[0].append(0)\n    a[1] = list(map(int, input().split()))\n    a[1].insert(0, 0)\n    a[0] = a[0][::-1]\n    k1 = list(itertools.accumulate(a[0]))\n    k1.pop()\n    k2 = list(itertools.accumulate(a[1]))\n    k2.pop()\n    k2 = k2[::-1]\n    s = list(zip(k1, k2))\n    s = min(list(map(max, s)))\n    print(s)", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    n = I()\n    a = L()\n    b = L()\n    if n == 1:\n        print(0)\n        return\n    c = dt(int)\n    c[n - 1] = a[-1]\n    d = dt(int)\n    d[0] = b[0]\n    e = inf\n    for i in range(n - 2, 0, -1):\n        c[i] = a[i] + c[i + 1]\n    for i in range(1, n - 1):\n        d[i] = b[i] + d[i - 1]\n    for i in range(n):\n        e = min(e, max(c[i + 1], d[i - 1]))\n    print(e)\ntt = 1\ntt = I()\nfor _ in range(tt):\n    solve()", "test = int(input())\nfor i in range(test):\n    m = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    e = []\n    c = sum(a)\n    d = 0\n    for j in range(m):\n        if j == 0:\n            c = c - a[j]\n        else:\n            c = c - a[j]\n            d = d + b[j - 1]\n        e.append(max(c, d))\n    print(min(e))", "t = int(input())\nfor _ in range(t):\n    m = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l1[0] = 0\n    l2[-1] = 0\n    l = []\n    a = sum(l1)\n    b = 0\n    l.append(a)\n    for i in range(m - 1):\n        a -= l1[i + 1]\n        b += l2[i]\n        l.append(max(a, b))\n    print(min(l))", "for _ in range(int(input())):\n    n = int(input())\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    sum1 = sum(lis1) - lis1[0]\n    sum2 = 0\n    if n == 1:\n        print(0)\n        continue\n    mini = 1000000007\n    for i in range(n - 1):\n        sums = [sum1, sum2]\n        if max(sums) < mini:\n            mini = max(sums)\n        sum2 += lis2[i]\n        sum1 -= lis1[i + 1]\n        sums = [sum1, sum2]\n    if max(sums) < mini:\n        mini = max(sums)\n    if mini == 1000000007:\n        print(0)\n    else:\n        print(mini)", "t = int(input())\nfor i in range(t):\n    c = []\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    p1 = [int(x) for x in input().split()]\n    if n == 1:\n        print(0)\n        continue\n    s = sum(p) - p[0]\n    s1 = 0\n    mi = max(s, s1)\n    for j in range(1, n):\n        s -= p[j]\n        s1 += p1[j - 1]\n        mx = max(s, s1)\n        if mi > mx:\n            mi = mx\n    print(mi)", "t = int(input())\nfor _ in range(t):\n    m = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l1[0] = 0\n    l2[-1] = 0\n    l = []\n    a = sum(l1)\n    b = 0\n    l.append(a)\n    for i in range(m - 1):\n        a -= l1[i + 1]\n        b += l2[i]\n        l.append(max(a, b))\n    print(min(l))", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (u, d, co) = (0, sum(a), 10 ** 9)\n    for jj in range(n):\n        d -= a[jj]\n        co = min(co, max(u, d))\n        u += b[jj]\n    print(co)", "t = int(input())\nwhile t:\n    t -= 1\n    m = int(input())\n    a = []\n    for i in range(2):\n        a.append(list(map(int, input().split())))\n    r = sum(a[0][1:m])\n    n = 0\n    k = 0\n    while k + 1 < m and r >= n:\n        k += 1\n        r -= a[0][k]\n        n += a[1][k - 1]\n    print(min(n, r + a[0][k]))", "for _ in range(int(input())):\n    m = int(input())\n    row1 = list(map(int, input().split()))\n    row2 = list(map(int, input().split()))\n    score = 10 ** 9\n    sufix = sum(row1)\n    prefix = 0\n    for i in range(m):\n        sufix -= row1[i]\n        score = min(score, max(prefix, sufix))\n        prefix += row2[i]\n    print(score)", "def solve(m, arr):\n    (s1, s2) = (0, sum(arr[1]) - arr[1][-1])\n    low = s2\n    for i in range(m - 1)[::-1]:\n        (s1, s2) = (s1 + arr[0][i + 1], s2 - arr[1][i])\n        low = min(low, max(s1, s2))\n    return low\n\ndef main():\n    for _ in range(int(input())):\n        m = int(input())\n        arr = [[*map(int, input().split(' '))] for _ in range(2)]\n        print(solve(m, arr))\nmain()", "import sys\ninput = sys.stdin\noutput = sys.stdout\nN = int(input.readline().strip())\nfor x in range(N):\n    OB = 999999999999999999999999999999999999999999\n    C = int(input.readline().strip())\n    row1 = [int(num) for num in input.readline().split()]\n    row2 = [int(num) for num in input.readline().split()]\n    top = 0\n    bottom = 0\n    for i in range(C):\n        top += row1[i]\n    for i in range(C):\n        top -= row1[i]\n        if i > 0:\n            bottom += row2[i - 1]\n        if top >= bottom:\n            if top < OB:\n                OB = top\n        elif bottom < OB:\n            OB = bottom\n    output.write('%d\\n' % OB)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "import math\n\ndef pn(x, y, m):\n    s1 = 0\n    s2 = 0\n    ans = math.inf\n    for i in range(m):\n        s1 += x[i]\n    for i in range(m):\n        s1 -= x[i]\n        ans = min(ans, max(s1, s2))\n        s2 += y[i]\n    return ans\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    x = list(map(int, input().split()))[:m]\n    y = list(map(int, input().split()))[:m]\n    print(pn(x, y, m))", "import sys\ntestcases = int(input())\nwhile testcases > 0:\n    n = int(input())\n    row1 = list(map(int, sys.stdin.readline().split()))\n    row2 = list(map(int, sys.stdin.readline().split()))\n    s1 = sum(row1) - row1[0]\n    s2 = 0\n    a = s1\n    b = 0\n    for i in range(1, n):\n        s2 += row2[i - 1]\n        s1 -= row1[i]\n        b = max(s1, s2)\n        a = min(b, a)\n    print(a)\n    testcases -= 1", "import sys, os\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    s = 0\n    if n == 1:\n        print(0)\n        continue\n    x = sum(A[1:])\n    mx = x\n    y = 0\n    for i in range(1, n):\n        x -= A[i]\n        y += B[i - 1]\n        mx = min(mx, max(x, y))\n    print(mx)", "import sys, os\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    s = 0\n    if n == 1:\n        print(0)\n        continue\n    x = sum(A[1:])\n    mx = x\n    y = 0\n    for i in range(1, n):\n        x -= A[i]\n        y += B[i - 1]\n        mx = min(mx, max(x, y))\n    print(mx)", "def answer():\n    N = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    Sa = sum(a[1:])\n    Sb = 0\n    ans = Sa\n    for i in range(N - 1):\n        Sa -= a[i + 1]\n        Sb += b[i]\n        ans = min(max(Sa, Sb), ans)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    answer()", "def solution(m, row1: list, row2: list) -> int:\n    if m == 1:\n        return 0\n    row1[0] = 0\n    row2[-1] = 0\n    a = []\n    b = []\n    sm1 = 0\n    sm2 = 0\n    for (c1, c2) in zip(row1, row2):\n        sm1 += c1\n        sm2 += c2\n        a.append(sm1)\n        b.append(sm2)\n    mn = min(a[-1] - a[0], b[m - 2])\n    for i in range(1, m - 1):\n        current = max(b[i - 1], a[m - 1] - a[i])\n        if current < mn:\n            mn = current\n    return mn\n\ndef main():\n    for _ in range(int(input())):\n        m = int(input())\n        row1 = list(map(int, input().split()))\n        row2 = list(map(int, input().split()))\n        print(solution(m, row1, row2))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(2):\n        a.append(list(map(int, input().split())))\n    sum1 = sum(a[0])\n    sum2 = 0\n    ans = 1000000007\n    for i in range(n):\n        sum1 -= a[0][i]\n        ans = min(ans, max(sum1, sum2))\n        sum2 += a[1][i]\n    print(ans)", "for _ in range(int(input())):\n    m = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    s1[0] = 0\n    s2[-1] = 0\n    S1 = sum(s1)\n    S2 = 0\n    mn = max(S2, S1)\n    for i in range(1, m):\n        S1 -= s1[i]\n        S2 += s2[i - 1]\n        mn = min(mn, max(S2, S1))\n    print(mn)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    a = [0, sum(A[1:n])]\n    ans = max(a)\n    for i in range(1, n):\n        a = [a[0] + B[i - 1], a[1] - A[i]]\n        ans = min(ans, max(a))\n    print(ans)", "n = int(input())\nwhile n > 0:\n    ans = []\n    n -= 1\n    m = int(input())\n    for i in range(2):\n        s = [int(i) for i in input().split()]\n        ans.append(s)\n    if m == 1:\n        print(0)\n    else:\n        dp = [0] * m\n        dp[0] = sum(ans[0][1:])\n        a = 0\n        b = sum(ans[0][1:])\n        for i in range(1, m):\n            a += ans[1][i - 1]\n            b -= ans[0][i]\n            dp[i] = max(b, a)\n        print(min(dp))", "for _ in range(int(input())):\n    (m, str_1, str_2) = (int(input()), list(map(int, input().split())), list(map(int, input().split())))\n    (a, b) = (sum(str_1) - str_1[0], 0)\n    ans = a\n    for i in range(1, m):\n        a -= str_1[i]\n        b += str_2[i - 1]\n        ans = min(max(a, b), ans)\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "for t in range(int(input())):\n    m = int(input())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    ans = 10 ** 10\n    sm1 = sum(a1)\n    sm2 = 0\n    for i in range(m):\n        sm1 -= a1[i]\n        ans = min(ans, max(sm2, sm1))\n        sm2 += a2[i]\n    print(ans)", "for t in range(int(input())):\n    m = int(input())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    ans = 10 ** 10\n    sm1 = sum(a1)\n    sm2 = 0\n    for i in range(m):\n        sm1 -= a1[i]\n        ans = min(ans, max(sm2, sm1))\n        sm2 += a2[i]\n    print(ans)", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (u, d, co) = (0, sum(a), 10 ** 9)\n    for jj in range(n):\n        d -= a[jj]\n        co = min(co, max(u, d))\n        u += b[jj]\n    print(co)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = a.copy()\n    l.reverse()\n    s = 0\n    for i in range(n - 1):\n        s = s + b[i]\n    r = 0\n    ans = 0\n    m = 0\n    m = max(s, r)\n    ans = m\n    for i in range(n - 1):\n        r = r + l[i]\n        s = s - b[n - i - 2]\n        m = max(s, r)\n        if m < ans:\n            ans = m\n    print(ans)", "T = int(input())\nout = []\nfor t in range(T):\n    m = int(input())\n    a1 = [int(x) for x in input().split()]\n    a2 = [int(x) for x in input().split()]\n    (pre1, pre2) = ([a1[0]], [a2[0]])\n    if m == 1:\n        out.append(0)\n        continue\n    suf1 = [a1[-1]]\n    for i in range(1, m):\n        pre2.append(pre2[-1] + a2[i])\n    for i in range(m - 2, -1, -1):\n        suf1.append(suf1[-1] + a1[i])\n    suf1 = suf1[::-1]\n    bob = float('inf')\n    opt1 = 0\n    for i in range(m):\n        if i < m - 1 and i > 0:\n            ans = max(suf1[i + 1], pre2[i - 1])\n        elif i < m - 1:\n            ans = suf1[i + 1]\n        else:\n            ans = pre2[i - 1]\n        if ans < bob:\n            opt1 = i\n            bob = ans\n    out.append(bob)\nfor e in out:\n    print(e)", "import math\nimport sys\nfor _ in range(int(input())):\n    m = int(input())\n    c1 = list(map(int, input().split()))\n    c2 = list(map(int, input().split()))\n    min_ = sys.maxsize\n    temp = 0\n    result = 0\n    sum1 = sum(c1)\n    sum2 = 0\n    for i in range(m):\n        if i == 0:\n            sum2 = 0\n        else:\n            sum2 += c2[i - 1]\n        sum1 -= c1[i]\n        score_bob = max(sum1, sum2)\n        if score_bob < min_:\n            min_ = score_bob\n            result = score_bob\n            temp = i\n    print(result)", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (u, d, co) = (0, sum(a), 10 ** 9)\n    for jj in range(n):\n        d -= a[jj]\n        co = min(co, max(u, d))\n        u += b[jj]\n    print(co)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    l = []\n    for i in range(2):\n        tmp = list(map(int, input().split()))\n        l.append(tmp)\n    r1 = sum(l[0])\n    r2 = sum(l[1])\n    res = [r1 - l[0][0], r2 - l[1][n - 1]]\n    a = r1 - l[0][0]\n    b = 0\n    for i in range(n - 2):\n        a -= l[0][i + 1]\n        b += l[1][i]\n        res.append(max(a, b))\n    print(min(res))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    a.append(list(map(int, input().split())))\n    a.append(list(map(int, input().split())))\n    (s0, s1) = (sum(a[0]), sum(a[1]))\n    res = [s0 - a[0][0]]\n    (up, down) = (res[0], 0)\n    for i in range(1, n):\n        up -= a[0][i]\n        down += a[1][i - 1]\n        res.append(max(up, down))\n    print(min(res))", "import math\nt = int(input())\nfor _ in range(t):\n    m = int(input())\n    r1 = [int(i) for i in input().split()]\n    r2 = [int(i) for i in input().split()]\n    sum1 = sum(r1[1:])\n    ans = sum1\n    sum2 = 0\n    for i in range(1, len(r1)):\n        sum1 -= r1[i]\n        sum2 += r2[i - 1]\n        ans = min(ans, max(sum1, sum2))\n    print(ans)", "def solve():\n    t = int(input())\n    for _ in range(t):\n        m = int(input())\n        matrix = [list(map(int, input().split())), list(map(int, input().split()))]\n        score = [sum(matrix[0]) - matrix[0][0]]\n        (up, down) = (score[0], 0)\n        for i in range(1, m):\n            up -= matrix[0][i]\n            down += matrix[1][i - 1]\n            score.append(max(up, down))\n        print(min(score))\nsolve()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*R(),)\n    u = sum(a)\n    v = 0\n    r = 1000000000.0\n    for (x, y) in zip(a, R()):\n        u -= x\n        r = min(r, max(u, v))\n        v += y\n    print(r)", "t = int(input())\nfor _ in range(t):\n    m = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = sum(a)\n    z = 0\n    za = 10 ** 10\n    for j in range(m):\n        za = min(za, max(s - a[j], z))\n        s -= a[j]\n        z += b[j]\n    print(za)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    game_up = list(map(int, input().split()))\n    game_down = list(map(int, input().split()))\n    sum_up = sum(game_up)\n    sum_down = 0\n    bob_min = 10 ** 10 + 2\n    for i in range(n):\n        sum_up -= game_up[i]\n        bob_min = min(bob_min, max(sum_up, sum_down))\n        sum_down += game_down[i]\n    print(bob_min)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    z = []\n    z.append(a)\n    z.append(b)\n    sum1 = sum(a)\n    ans = sys.maxsize\n    sum2 = 0\n    for i in range(n):\n        sum1 -= z[0][i]\n        ans = min(ans, max(sum1, sum2))\n        sum2 += z[1][i]\n    print(ans)", "t = int(input())\nfor task in range(t):\n    m = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = sum(a) - a[0]\n    sumA = res\n    sumB = 0\n    for i in range(1, m):\n        sumA -= a[i]\n        sumB += b[i - 1]\n        tmp = max(sumA, sumB)\n        if tmp < res:\n            res = tmp\n    print(res)", "t = int(input())\nwhile t:\n    t = t - 1\n    m = int(input())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    y = sum(a1)\n    x = 0\n    ans = 10000000000000\n    for i in range(m):\n        y -= a1[i]\n        ans = min(ans, max(x, y))\n        x += a2[i]\n    print(ans)", "for i in range(int(input())):\n    m = int(input())\n    arr = []\n    arr.append(list(map(int, input().split())))\n    arr.append(list(map(int, input().split())))\n    ans = 100000000000.0\n    s1 = sum(arr[0])\n    s2 = 0\n    if m == 1:\n        print(0)\n        continue\n    for j in range(m):\n        s1 -= arr[0][j]\n        ans = min(ans, max(s1, s2))\n        s2 += arr[1][j]\n    print(ans)", "def solve(m, mat):\n    ans = 1e+18\n    topsum = sum(mat[0])\n    botsum = 0\n    for i in range(m):\n        if i > 0:\n            botsum += mat[1][i - 1]\n        topsum -= mat[0][i]\n        ans = min(ans, max(topsum, botsum))\n    return ans\nfor t in range(int(input())):\n    m = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(m, [a, b]))", "for _ in range(int(input())):\n    m = int(input())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    s = sum(a1)\n    (h, x) = ([], 0)\n    for i in range(m):\n        s -= a1[i]\n        h.append(max(s, x))\n        x += a2[i]\n    if len(h) == 0:\n        print(0)\n    else:\n        print(min(h))", "for _ in range(int(input().strip())):\n    cols = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    (l, u, ans) = (0, sum(a), 1000000000.0)\n    for i in range(cols):\n        u -= a[i]\n        ans = min(ans, max(u, l))\n        l += b[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    m = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    z1 = sum(l1)\n    z2 = sum(l2)\n    t = [z1 - l1[0], z2 - l2[-1]]\n    a = z1 - l1[0]\n    b = 0\n    for i in range(1, m - 1):\n        a -= l1[i]\n        b += l2[i - 1]\n        t.append(max(a, b))\n    print(min(t))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s1 = sum(a)\n    s2 = 0\n    ans = 10 ** 9\n    for i in range(n):\n        s1 = s1 - a[i]\n        ans = min(ans, max(s1, s2))\n        s2 = s2 + b[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    tsl = sum(l)\n    res = 10 ** 10\n    for i in range(n):\n        tsl = tsl - l[i]\n        if i == 0:\n            ans2 = 0\n        else:\n            ans2 += l1[i - 1]\n        ans = max(tsl, ans2)\n        res = min(res, ans)\n    print(res)"]