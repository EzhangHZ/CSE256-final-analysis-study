["def construct(s, order):\n    t = ''\n    for x in order:\n        t += s\n        s = s.replace(x, '')\n    return t\n\ndef solve(t):\n    order = sorted(set(t), key=t.rindex)\n    s = t[:sum((t.count(x) // i for (i, x) in enumerate(order, 1)))]\n    if construct(s, order) == t:\n        print(s, ''.join(order))\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve(input())", "def construct(s, order):\n    t = ''\n    for x in order:\n        t += s\n        s = s.replace(x, '')\n    return t\nfor _ in range(int(input())):\n    t = input()\n    order = sorted(set(t), key=t.rindex)\n    s = t[:sum((t.count(x) // i for (i, x) in enumerate(order, 1)))]\n    if construct(s, order) == t:\n        print(s, ''.join(order))\n    else:\n        print(-1)", "t = int(input())\nfor test in range(t):\n    s = input()\n    x = ''\n    for c in s[::-1]:\n        if c not in x:\n            x = c + x\n    k = 1\n    count = 0\n    bool = True\n    for c in x:\n        z = s.count(c) / k\n        if s.count(c) % k != 0:\n            print(-1)\n            bool = False\n            break\n        else:\n            count += z\n        k += 1\n    if bool is True:\n        count = int(count)\n        z = s[0:count]\n        t = ''\n        for c in x:\n            t += z\n            while c in z:\n                z = z.replace(c, '')\n        z = s[0:count]\n        if s == t:\n            print(s[0:count], x)\n        else:\n            print(-1)", "def solution():\n    s = input()\n    check = {}\n    seq = []\n    for i in s[::-1]:\n        item = check.get(i)\n        if item is None:\n            seq.append(i)\n            check[i] = 1\n        else:\n            check[i] = item + 1\n    ln = len(seq)\n    main_ln = 0\n    for i in range(ln):\n        item = check[seq[i]]\n        if item % (ln - i):\n            print('-1')\n            return\n        item = item // (ln - i)\n        main_ln += item\n    main_str = s[:main_ln]\n    gen_str = main_str\n    seq = seq[::-1]\n    for char in seq:\n        main_str = main_str.replace(char, '')\n        gen_str += main_str\n    if gen_str == s:\n        print(s[:main_ln], ''.join(seq))\n    else:\n        print('-1')\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        solution()\nmain()", "for _ in range(int(input())):\n    t = input()\n    l = sorted(set(t), key=t.rindex)\n    c = 0\n    for i in set(t):\n        if t.count(i) % (l.index(i) + 1):\n            print(-1)\n            break\n        c += t.count(i) // (l.index(i) + 1)\n    else:\n        s = t[:c]\n        u = s\n        for i in l:\n            s = ''.join((j for j in s if j != i))\n            u += s\n        if u != t:\n            print(-1)\n        else:\n            print(t[:c], ''.join(l))", "def check(word, input_string, order):\n    if order == '':\n        if input_string == '' and word == '':\n            return True\n        return False\n    if word == '' or input_string == '':\n        return False\n    if word != input_string[:len(word)]:\n        return False\n    return check(word.replace(order[0], ''), input_string[len(word):], order[1:])\n\ndef func():\n    input_string = str(input())\n    freq = dict()\n    s = input_string[::-1]\n    order = ''\n    while s != '':\n        order += s[0]\n        s = s.replace(s[0], '')\n    order = order[::-1]\n    i = 1\n    length = 0\n    for c in order:\n        temp = input_string.count(c) / i\n        if not temp == int(temp):\n            return print(-1)\n        freq[c] = (int(temp * i), int(temp))\n        length += int(temp)\n        i += 1\n    word = input_string[:length]\n    if check(word, input_string, order):\n        print(word, order)\n    else:\n        print(-1)\nt = int(input())\nfor _ in range(t):\n    func()", "def confirm(origin, sequence, after):\n    x = origin\n    for it in sequence:\n        origin = origin.replace(it, '')\n        x += origin\n    if x == after:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    s = input()\n    d = dict()\n    b = ''\n    for it in s[::-1]:\n        if not d.get(it):\n            b = it + b\n            d[it] = True\n    l = 0\n    division = len(b)\n    t = True\n    while division > 0:\n        k = s.count(b[division - 1])\n        if k % division != 0:\n            t = False\n            break\n        l += s.count(b[division - 1]) // division\n        division -= 1\n    if t and confirm(s[:l], b, s):\n        print(f'{s[:l]} {b}')\n    else:\n        print(-1)", "import collections\n\ndef construct(s, order):\n    t = ''\n    for x in order:\n        t += s\n        s = s.replace(x, '')\n    return t\n\ndef solve(t):\n    letters = set()\n    order = ''\n    for x in reversed(t):\n        if x not in letters:\n            letters.add(x)\n            order = x + order\n    counter = collections.Counter(t)\n    s = t[:sum((counter[x] // i for (i, x) in enumerate(order, 1)))]\n    if construct(s, order) == t:\n        print(s, order)\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve(input())", "def fun(t):\n    n = len(t)\n    h = {}\n    order = ''\n    for i in range(n - 1, -1, -1):\n        if t[i] not in h:\n            h[t[i]] = 1\n            order = t[i] + order\n        else:\n            h[t[i]] += 1\n    cnt = 0\n    for i in range(len(order)):\n        if h[order[i]] % (i + 1) != 0:\n            print(-1)\n            return\n        else:\n            cnt = cnt + h[order[i]] // (i + 1)\n    s = t[:cnt]\n    ts = s\n    ans = s\n    for i in range(len(order)):\n        temp = s.replace(order[i], '')\n        ts += temp\n        s = temp\n    if ts == t:\n        print(ans, order)\n        return\n    else:\n        print(-1)\n        return\nt = int(input())\nfor i in range(t):\n    t = input()\n    fun(t)", "for _ in range(int(input())):\n    t = input()\n    l = sorted(set(t), key=t.rindex)\n    c = 0\n    for i in set(t):\n        if t.count(i) % (l.index(i) + 1):\n            print(-1)\n            break\n        c += t.count(i) // (l.index(i) + 1)\n    else:\n        s = t[:c]\n        u = s\n        for i in l:\n            s = ''.join((j for j in s if j != i))\n            u += s\n        if u != t:\n            print(-1)\n        else:\n            print(t[:c], ''.join(l))", "for _ in range(int(input())):\n    t = input()\n    l = sorted(set(t), key=t.rindex)\n    c = 0\n    for i in set(t):\n        if t.count(i) % (l.index(i) + 1):\n            print(-1)\n            break\n        c += t.count(i) // (l.index(i) + 1)\n    else:\n        s = t[:c]\n        u = s\n        for i in l:\n            s = ''.join((j for j in s if j != i))\n            u += s\n        if u != t:\n            print(-1)\n        else:\n            print(t[:c], ''.join(l))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    t = input()\n    lset = set(t)\n    del_ord = []\n    del_set = set()\n    i = -1\n    res = 0\n    while del_set != lset:\n        let = t[i]\n        if let not in del_set:\n            del_set.add(let)\n            del_ord.append(let)\n        i -= 1\n    let_cnt = Counter(t)\n    orig_counter = {}\n    for (i, let) in enumerate(reversed(del_ord), start=1):\n        resid = let_cnt[let] % i\n        if resid > 0:\n            res = -1\n            break\n        orig_counter[let] = let_cnt[let] // i\n    if res != -1:\n        w_len = sum(orig_counter.values())\n        word = t[:w_len]\n        (test_word, test_idx, test_cnt) = (word, len(word), len(word))\n        for (i, let) in enumerate(reversed(del_ord)):\n            next_test = test_word.replace(let, '')\n            next_idx = test_idx + len(test_word) - orig_counter[let]\n            if t[test_idx:next_idx] != next_test:\n                res = -1\n                break\n            test_word = next_test\n            test_idx = next_idx\n    if res == -1:\n        print(res)\n        continue\n    del_ord = ''.join(map(str, reversed(del_ord)))\n    print(word, del_ord)", "t = int(input())\nfor aslkdjaskldj in range(t):\n    tmp = input()\n    z = ''\n    p = -1\n    for i in range(len(tmp) - 1, -1, -1):\n        if tmp[i] in z:\n            continue\n        else:\n            z += tmp[i]\n            p = i\n    z = z[::-1]\n    lan = 0\n    for i in range(len(z)):\n        lan += tmp.count(z[i]) // (i + 1)\n    ans = tmp[:lan]\n    check = ''\n    tp = ans\n    p = 0\n    while tp != '':\n        check += tp\n        tp = tp.replace(z[p], '')\n        p += 1\n    if check == tmp:\n        print(ans, z)\n    else:\n        print(-1)", "from collections import Counter\n\ndef checksol(s, ord):\n    ans = ''\n    s = str(s)\n    for c in ord:\n        ans += s\n        s = s.replace(c, '')\n    return ans\n\ndef main():\n    s = input()\n    order = []\n    coutn = dict(Counter(s))\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] not in order:\n            order.insert(0, s[i])\n    le = 0\n    for i in range(len(order)):\n        a = coutn[order[i]] // (i + 1)\n        le += a\n    if s == checksol(s[:le], order[:]):\n        print(s[:le], ''.join(order))\n        return\n    print(-1)\n    pass\nt = int(input())\nfor _ in range(t):\n    main()", "for _ in range(int(input())):\n    tmp = input()\n    z = ''\n    p = -1\n    for i in range(len(tmp) - 1, -1, -1):\n        if tmp[i] in z:\n            continue\n        else:\n            z += tmp[i]\n            p = i\n    z = z[::-1]\n    lan = 0\n    for i in range(len(z)):\n        lan += tmp.count(z[i]) // (i + 1)\n    ans = tmp[:lan]\n    check = ''\n    tp = ans\n    p = 0\n    while tp != '':\n        check += tp\n        tp = tp.replace(z[p], '')\n        p += 1\n    if check == tmp:\n        print(ans, z)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    t = input()\n    l = sorted(set(t), key=t.rindex)\n    c = 0\n    for i in set(t):\n        if t.count(i) % (l.index(i) + 1):\n            print(-1)\n            break\n        c += t.count(i) // (l.index(i) + 1)\n    else:\n        s = t[:c]\n        u = s\n        for i in l:\n            s = ''.join((j for j in s if j != i))\n            u += s\n        if u != t:\n            print(-1)\n        else:\n            print(t[:c], ''.join(l))", "def chek():\n    s = input()\n    arr = {}\n    e = set(s[::-1])\n    for i in e:\n        arr[i] = s.count(i)\n    d = sorted(arr.keys(), key=lambda x: s.rfind(x))\n    for i in range(2, len(d) + 1):\n        a = d[i - 1]\n        if arr[a] % i:\n            print(-1)\n            return\n        arr[a] //= i\n    k = sum(arr.values())\n    c = s[:k]\n    for i in e:\n        if c.count(i) != arr[i]:\n            print(-1)\n            return\n    c0 = c\n    l = k\n    for i in range(1, len(d)):\n        k -= arr[d[i - 1]]\n        cc = s[l:l + k]\n        w = d[i - 1]\n        r = 0\n        for j in cc:\n            while r < len(c) and c[r] == w:\n                r += 1\n            if r >= len(c) or j != c[r]:\n                print(-1)\n                return\n            r += 1\n        while r < len(c) and c[r] == w:\n            r += 1\n        if r != len(c):\n            print(-1)\n            return\n        c = cc\n        l += k\n    print(c0, end=' ')\n    print(*d, sep='')\nt = int(input())\nfor _ in range(t):\n    chek()", "for _ in range(int(input())):\n    t = input()\n    a = t[-1]\n    b = a\n    f = s = 0\n    hi = []\n    for i in range(len(t) - 1, -1, -1):\n        if t[i] != a:\n            a = t[i]\n            if a not in b:\n                b = b + a\n    l = len(b)\n    for ele in b:\n        h = t.count(ele)\n        if h % l == 0:\n            h = h // l\n            s = s + h\n            hi.append(h)\n            l = l - 1\n        else:\n            f = 1\n            break\n    if f == 1:\n        print(-1)\n    else:\n        x1 = x = t[:s]\n        b = b[::-1]\n        s1 = s\n        s2 = s\n        for i in range(len(b)):\n            x = x.replace(b[i], '')\n            s1 = s1 - hi[len(b) - 1 - i]\n            s2 = s1 + s2\n            if x != t[s:s2]:\n                f = 1\n                break\n            s = s2\n        if f == 1:\n            print(-1)\n        else:\n            print(x1, b)", "for _ in range(int(input())):\n    t = input()\n    snew = list(set(t))\n    order = ''\n    d = {}\n    for (i, v) in enumerate(t):\n        d[v] = i\n    order = sorted(d.items(), key=lambda kv: (kv[1], kv[0]))\n    ans = ''\n    for i in order:\n        ans += i[0]\n    length_original = 0\n    j = 1\n    for i in ans:\n        length_original += t.count(i) // j\n        j += 1\n    ans1 = t[:length_original]\n    check = ''\n    tp = ans1\n    p = 0\n    while tp != '':\n        check += tp\n        tp = tp.replace(ans[p], '')\n        p += 1\n    if check == t:\n        print(ans1, ans)\n    else:\n        print(-1)", "def testDual(dual, seen, index):\n    tmp = ''\n    siz = len(dual)\n    ch = seen[index]\n    for i in range(siz):\n        if dual[i] != ch:\n            tmp += dual[i]\n    if index + 1 == len(seen):\n        return tmp\n    return tmp + testDual(tmp, seen, index + 1)\ncase = int(input())\nfor t in range(case):\n    s = input()\n    dic = {}\n    siz = len(s) - 1\n    seen = []\n    for i in range(siz, -1, -1):\n        c = s[i]\n        if c not in dic:\n            seen.append(c)\n            dic[c] = 1\n        else:\n            dic[c] += 1\n    noChar = len(seen)\n    res = 0\n    option = True\n    for se in seen:\n        if dic[se] % noChar == 0:\n            res += dic[se] // noChar\n            noChar -= 1\n        else:\n            option = False\n            break\n    if option:\n        seen.reverse()\n        dual = s[:res]\n        if dual + testDual(dual, seen, 0) == s:\n            print(dual + ' ' + ''.join(seen))\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    st = input()\n    d = {}\n    r = ''\n    for j in range(len(st) - 1, -1, -1):\n        if st[j] in d:\n            d[st[j]] += 1\n        else:\n            r = st[j] + r\n            d[st[j]] = 1\n    total = 0\n    for j in range(len(r)):\n        total += d[r[j]] // (j + 1)\n    s = st[:total]\n    s_copy = s[:]\n    nt = ''\n    j = 0\n    while j != len(r):\n        nt += s_copy\n        s_copy = s_copy.replace(r[j], '')\n        j += 1\n    if nt == st:\n        print(s + ' ' + r)\n    else:\n        print(-1)", "from heapq import heapify, heappush, heappop, heappushpop\nfrom collections import defaultdict as dd, deque as dq, Counter as C\nfrom math import factorial as f, ceil, gcd, sqrt, log\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom itertools import combinations as c, permutations as p\nfrom math import factorial as f, ceil, gcd, sqrt, log\nfrom sys import stdin, stdout\ninput = stdin.readline\nmp = lambda : map(int, input().split())\nit = lambda : int(input())\nls = lambda : list(input().strip())\nmt = lambda r: [ls() for _ in range(r)]\nlcm = lambda a, b: a * b // gcd(a, b)\nfor _ in range(it()):\n    a = input().strip()\n    s = set()\n    ans = []\n    for i in a[::-1]:\n        if i in s:\n            continue\n        s.add(i)\n        ans.append(i)\n    cnt = len(ans)\n    ans = ans[::-1]\n    k = C(a)\n    cn = {}\n    for i in ans[::-1]:\n        cn[i] = k[i] / cnt\n        cnt -= 1\n    count = 0\n    ans1 = 1\n    for i in cn:\n        if cn[i] != int(cn[i]):\n            ans1 = -1\n        else:\n            count += int(cn[i])\n    if ans1 == -1:\n        print(-1)\n    else:\n        main = a[:count]\n        s1 = set()\n        cur = []\n        for i in ans:\n            for j in main:\n                if j in s1:\n                    continue\n                else:\n                    cur.append(j)\n            s1.add(i)\n        if ''.join(cur) == a:\n            print(main, ''.join(ans))\n        else:\n            print(-1)", "for i in range(int(input())):\n    st = input()\n    d = {}\n    r = ''\n    for j in range(len(st) - 1, -1, -1):\n        if st[j] in d:\n            d[st[j]] += 1\n        else:\n            r = st[j] + r\n            d[st[j]] = 1\n    total = sum([d[r[j]] // (j + 1) for j in range(len(r))])\n    s = st[:total]\n    s_copy = s[:]\n    nt = ''\n    j = 0\n    while j != len(r):\n        nt += s_copy\n        s_copy = s_copy.replace(r[j], '')\n        j += 1\n    print(s + ' ' + r) if nt == st else print(-1)", "def nooftimes(s):\n    dic = {}\n    for i in s:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\nt = int(input())\nfor _ in range(t):\n    removed = ''\n    s = str(input().rstrip())\n    lenin = 0\n    dic = nooftimes(s)\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] not in removed:\n            removed = s[i] + removed\n    for i in range(len(removed)):\n        j = i + 1\n        if dic[removed[i]] % j != 0:\n            j = -1\n            break\n        else:\n            lenin += int(dic[removed[i]] / j)\n    if j != -1:\n        r = s[0:lenin]\n        l = len(r)\n        for i in removed:\n            ss = r.replace(i, '')\n            sslen = len(ss)\n            if ss != s[l:l + sslen]:\n                j = -1\n                break\n            l += sslen\n            r = ss\n    if j == -1:\n        print(j)\n    else:\n        print(s[0:lenin], removed)", "def cf_739E(string: str):\n    chars = {}\n    removed = ''\n    totalChars = {}\n    for c in string:\n        totalChars[c] = totalChars.get(c, 0) + 1\n    total = len(totalChars)\n    for c in reversed(string):\n        if c not in chars:\n            chars[c] = totalChars[c] // total\n            total -= 1\n            removed += c\n    removed = removed[::-1]\n    i = 0\n    answer = ''\n    while len(chars):\n        c = string[i]\n        chars[c] -= 1\n        if not chars[c]:\n            del chars[c]\n        answer += c\n        i += 1\n    currRemoved = set()\n    i = 0\n    for r in removed:\n        for c in answer:\n            if c not in currRemoved:\n                if string[i] == c:\n                    i += 1\n                else:\n                    return -1\n        currRemoved.add(r)\n    if i != len(string):\n        return -1\n    return (answer, removed)\nfor _ in range(int(input())):\n    try:\n        print(*cf_739E(input()))\n    except Exception as e:\n        print(-1)", "t = int(input())\nresults = []\nfor i in range(t):\n    line = input()\n    counts = {}\n    order = []\n    for c in line[::-1]:\n        if c not in counts:\n            counts[c] = 0\n            order.append(c)\n        counts[c] += 1\n    for (j, c) in enumerate(order):\n        real = counts[c] // (len(order) - j)\n        if real * (len(order) - j) != counts[c]:\n            results.append(-1)\n            break\n        counts[c] = real\n    else:\n        order = order[::-1]\n        size = sum([val for val in counts.values()])\n        s = line[:size]\n        bad = set()\n        index = size\n        for k in range(len(order) - 1):\n            bad.add(order[k])\n            for char in s:\n                if char not in bad:\n                    if index >= len(line):\n                        results.append(-1)\n                        break\n                    elif char != line[index]:\n                        results.append(-1)\n                        break\n                    else:\n                        index += 1\n            else:\n                continue\n            break\n        else:\n            if index == len(line):\n                results.append(s + ' ' + ''.join(order))\n            else:\n                results.append(-1)\nfor i in range(t):\n    print(results[i])", "for i in range(int(input())):\n    st = input()\n    d = {}\n    r = ''\n    for j in range(len(st) - 1, -1, -1):\n        if st[j] in d:\n            d[st[j]] += 1\n        else:\n            r = st[j] + r\n            d[st[j]] = 1\n    total = 0\n    for j in range(len(r)):\n        new = d[r[j]] // (j + 1)\n        total += new\n    s = st[:total]\n    s_copy = s[:]\n    nt = ''\n    j = 0\n    while j != len(r):\n        nt += s_copy\n        s_copy = s_copy.replace(r[j], '')\n        j += 1\n    print(s + ' ' + r) if nt == st else print(-1)", "t = int(input())\nfor _ in range(t):\n    c = input()\n    n = len(c)\n    d = {}\n    for item in c:\n        d[item] = d.get(item, 0) + 1\n    l = []\n    for i in range(n - 1, -1, -1):\n        if not c[i] in l:\n            l.insert(0, c[i])\n    b = ''.join(l)\n    nl = 0\n    for i in range(len(l)):\n        nl += d[l[i]] // (i + 1)\n    a = c[:nl]\n    tmpc = a\n    tmpa = a\n    for item in l:\n        tmpa = ''.join(tmpa.split(item))\n        tmpc = tmpc + tmpa\n    if tmpc != c:\n        print(-1)\n    else:\n        print(a, b)", "for t in range(int(input())):\n    mystr = input()\n    pat = ''\n    mydict = {}\n    printed = False\n    for i in range(len(mystr) - 1, -1, -1):\n        if mystr[i] not in pat:\n            pat = mystr[i] + pat\n        if mystr[i] in mydict:\n            mydict[mystr[i]] += 1\n        else:\n            mydict[mystr[i]] = 1\n    for j in range(1, len(pat) + 1):\n        mydict[pat[j - 1]] = mydict[pat[j - 1]] / j\n    if not printed:\n        ansstr = ''\n        for let in mystr:\n            if mydict[let] > 0:\n                ansstr += let\n                mydict[let] -= 1\n            else:\n                break\n    chkstr = ansstr\n    xstr = ansstr[:]\n    for x in pat:\n        xstr = xstr.replace(x, '')\n        chkstr += xstr\n    if chkstr == mystr:\n        print(ansstr, pat)\n    else:\n        print(-1)", "from collections import Counter\n\ndef solve(s, n):\n    temp = s[:]\n    s = s[::-1]\n    order = ''\n    cnt = Counter()\n    for c in s:\n        if c not in cnt:\n            order += c\n        cnt[c] += 1\n    m = len(order)\n    true_l = 0\n    for i in range(m):\n        true_l += cnt[order[i]] // (m - i)\n    order = order[::-1]\n    return (temp[:true_l], order)\n\ndef order_find(strs, order):\n    res = strs[:]\n    for c in order:\n        temp = ''\n        for d in strs:\n            if d != c:\n                temp += d\n                res += d\n        strs = temp[:]\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    (ori, order) = solve(s, n)\n    check = order_find(ori, order)\n    if s == check:\n        print(ori, order)\n    else:\n        print(-1)", "def find(t):\n    list = []\n    for i in range(-1, -len(t) - 1, -1):\n        if t[i] not in list:\n            list.append(t[i])\n    d = len(list)\n    initial_length = 0\n    for letter in list:\n        occ = t.count(letter)\n        if divmod(occ, d)[1] == 0:\n            initial_length += divmod(occ, d)[0]\n            d -= 1\n        else:\n            return -1\n    initial_t = t[0:initial_length]\n    s = t[0:initial_length]\n    for i in range(-1, -len(list) - 1, -1):\n        s = s.replace(list[i], '')\n        initial_t += s\n    if initial_t == t:\n        remove_order = ''\n        for i in range(-1, -len(list) - 1, -1):\n            remove_order += list[i]\n        return (t[0:initial_length], remove_order)\n    else:\n        return -1\nq = int(input())\nfor _ in range(q):\n    t = input()\n    if find(t) == -1:\n        print(find(t))\n    else:\n        print(*find(t))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    used = set()\n    t = []\n    c = Counter()\n    for i in range(n - 1, -1, -1):\n        c[s[i]] += 1\n        if s[i] not in used:\n            used.add(s[i])\n            t.append(s[i])\n    t = t[::-1]\n    cnt = 0\n    flag = True\n    for (i, a) in enumerate(t):\n        if c[a] % (i + 1) != 0:\n            flag = False\n            break\n        cnt += c[a] // (i + 1)\n    new = [s[:cnt]]\n    ss = s[:cnt]\n    sss = []\n    for a in t:\n        for b in ss:\n            if b != a:\n                new.append(b)\n                sss.append(b)\n        ss = sss\n        sss = []\n    if ''.join(new) != s:\n        flag = False\n    if flag:\n        print(s[:cnt], ''.join(t))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    ttl = 0\n    s = input()\n    list1 = []\n    list3 = []\n    for j in range(len(s) - 1, -1, -1):\n        if s[j] not in list1:\n            list1.append(s[j])\n    str1 = ''.join((str(e) for e in list1))\n    str2 = str1[::-1]\n    map = {}\n    for i in str2:\n        map[i] = s.count(i)\n    index = 1\n    for i in str2:\n        map[i] = map[i] // index\n        index += 1\n        ttl += map[i]\n    s3 = s[:ttl]\n    list69 = []\n    list69.append(s3)\n    for x in range(0, len(str2)):\n        s69 = ''\n        for i in list69[x]:\n            if i != str2[x]:\n                s69 += i\n        list69.append(s69)\n    s420 = ''.join((str(e) for e in list69))\n    if s420 == s:\n        print(s3, str2)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    g = input()\n    s = len(g)\n    ll = ''\n    lli = -1\n    mark = [0] * 26\n    ans = ''\n    te = -1\n    for i in reversed(range(s)):\n        if mark[ord(g[i]) - ord('a')]:\n            continue\n        mark[ord(g[i]) - ord('a')] += 1\n        lli = i\n        ll = g[i]\n        ans = g[i] + ans\n    su = 0\n    ans1 = ''\n    for i in g:\n        for x in range(len(ans)):\n            if i == ans[x]:\n                break\n        if su >= s:\n            break\n        ans1 = ans1 + i\n        su = su + x + 1\n    if su != s:\n        print('-1')\n    else:\n        s = ans1\n        fin = s\n        for i in range(len(ans)):\n            s = s.replace(ans[i], '')\n            fin = fin + s\n        if fin == g:\n            print(ans1, ans)\n        else:\n            print('-1')", "t = int(input())\nfor _ in range(t):\n    g = input()\n    s = len(g)\n    ll = ''\n    lli = -1\n    mark = [0] * 26\n    ans = ''\n    te = -1\n    for i in reversed(range(s)):\n        if mark[ord(g[i]) - ord('a')]:\n            continue\n        mark[ord(g[i]) - ord('a')] += 1\n        lli = i\n        ll = g[i]\n        ans = g[i] + ans\n    su = 0\n    ans1 = ''\n    for i in g:\n        for x in range(len(ans)):\n            if i == ans[x]:\n                break\n        if su >= s:\n            break\n        ans1 = ans1 + i\n        su = su + x + 1\n    s = ans1\n    fin = s\n    for i in range(len(ans)):\n        s = s.replace(ans[i], '')\n        fin = fin + s\n    if fin == g:\n        print(ans1, ans)\n    else:\n        print('-1')", "for input_number in range(int(input())):\n    s = input()\n    s = s[::-1]\n    d = dict()\n    for i in range(len(s)):\n        d[s[i]] = d.get(s[i], 0) + 1\n    s1 = ''.join([x for x in d])\n    k = 0\n    s2 = ''\n    for i in range(len(d)):\n        if d[s1[i]] % (len(d) - i) != 0:\n            print(-1)\n            break\n        c = 0\n        count = 0\n        s3 = ''\n        for j in range(len(s2) + d[s1[i]] // (len(d) - i)):\n            if s[k + j] == s1[i]:\n                s3 += s[k + j]\n                count += 1\n                if count > d[s1[i]] // (len(d) - i):\n                    break\n            else:\n                if c >= len(s2) or s[k + j] != s2[c]:\n                    break\n                s3 += s[k + j]\n                c += 1\n        else:\n            k += len(s2) + d[s1[i]] // (len(d) - i)\n            s2 = s3\n            continue\n        print(-1)\n        break\n    else:\n        print(s2[::-1], s1[::-1])", "def nonZero(d):\n    for c in d:\n        if d[c] > 0:\n            return True\n    return False\n\ndef check(s, t, sq):\n    t1 = ''\n    i = 0\n    while s != '' and i < len(sq):\n        t1 = t1 + s\n        s = s.replace(sq[i], '')\n        i = i + 1\n    if i == len(sq) and t == t1:\n        return True\n    else:\n        return False\nt = int(input())\nfor k in range(0, t):\n    s = input()\n    d = {}\n    for a in s:\n        if a in d:\n            d[a] = d[a] + 1\n        else:\n            d[a] = 1\n    sq = ''\n    t = {}\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in t:\n            continue\n        else:\n            sq = sq + s[i]\n            t[s[i]] = True\n    l = len(sq)\n    j = l\n    exit = False\n    for i in range(l):\n        c = sq[i]\n        d[c] = d[c] // j\n        j = j - 1\n    i = 0\n    while nonZero(d):\n        c = s[i]\n        d[c] = d[c] - 1\n        i = i + 1\n    if check(s[:i], s, sq[::-1]):\n        print(s[:i] + ' ' + sq[::-1])\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    g = input()\n    s = len(g)\n    ll = ''\n    lli = -1\n    mark = [0] * 26\n    ans = ''\n    te = -1\n    for i in reversed(range(s)):\n        if mark[ord(g[i]) - ord('a')]:\n            continue\n        mark[ord(g[i]) - ord('a')] += 1\n        lli = i\n        ll = g[i]\n        ans = g[i] + ans\n    su = 0\n    ans1 = ''\n    for i in g:\n        for x in range(len(ans)):\n            if i == ans[x]:\n                break\n        if su >= s:\n            break\n        ans1 = ans1 + i\n        su = su + x + 1\n    s = ans1\n    fin = s\n    for i in range(len(ans)):\n        for j in range(len(s)):\n            if ans[i] != s[j]:\n                fin = fin + s[j]\n        s = s.replace(ans[i], '')\n    if fin == g:\n        print(ans1, ans)\n    else:\n        print('-1')", "t = int(input())\nwhile t:\n    t -= 1\n    s = list(input())\n    was = s.copy()\n    deleted_list = []\n    while s:\n        deleted_list.append(s[-1])\n        s = list(filter(lambda x: x != deleted_list[-1], s))\n    deleted_list.reverse()\n    multi = [0 for _ in range(26)]\n    cnt = 1\n    for i in deleted_list:\n        multi[ord(i) - ord('a')] = cnt\n        cnt += 1\n    start_s = []\n    now_len = 0\n    for i in was:\n        now_len += multi[ord(i) - ord('a')]\n        start_s.append(i)\n        if now_len == len(was):\n            break\n    if now_len == len(was):\n        new_was = []\n        ss = start_s.copy()\n        for i in deleted_list:\n            new_was.extend(ss)\n            ss = list(filter(lambda x: x != i, ss))\n        if new_was == was:\n            print(''.join(start_s), ''.join(deleted_list))\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    s = list(input())\n    was = s.copy()\n    deleted_list = []\n    while s:\n        deleted_list.append(s[-1])\n        s = list(filter(lambda x: x != deleted_list[-1], s))\n    deleted_list.reverse()\n    multi = [0 for _ in range(26)]\n    cnt = 1\n    for i in deleted_list:\n        multi[ord(i) - ord('a')] = cnt\n        cnt += 1\n    start_s = []\n    now_len = 0\n    for i in was:\n        now_len += multi[ord(i) - ord('a')]\n        start_s.append(i)\n        if now_len == len(was):\n            break\n    if now_len == len(was):\n        new_was = []\n        ss = list(start_s)\n        for i in deleted_list:\n            new_was.extend(ss)\n            ss = ''.join(filter(lambda x: x != i, ss))\n        if new_was == list(was):\n            print(''.join(start_s), ''.join(deleted_list))\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    s = list(input())\n    was = s.copy()\n    deleted_list = []\n    while s:\n        deleted_list.append(s[-1])\n        s = list(filter(lambda x: x != deleted_list[-1], s))\n    deleted_list.reverse()\n    multi = [0 for _ in range(26)]\n    cnt = 1\n    for i in deleted_list:\n        multi[ord(i) - ord('a')] = cnt\n        cnt += 1\n    start_s = []\n    now_len = 0\n    for i in was:\n        now_len += multi[ord(i) - ord('a')]\n        start_s.append(i)\n        if now_len == len(was):\n            break\n    if now_len == len(was):\n        new_was = []\n        ss = list(start_s)\n        for i in deleted_list:\n            new_was.extend(ss)\n            ss = list(filter(lambda x: x != i, ss))\n        if new_was == was:\n            print(''.join(start_s), ''.join(deleted_list))\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    was = s\n    deleted_list = []\n    while s:\n        deleted_list += s[-1]\n        s = ''.join(filter(lambda x: x != deleted_list[-1], s))\n    deleted_list.reverse()\n    multi = [0 for _ in range(26)]\n    cnt = 1\n    for i in deleted_list:\n        multi[ord(i) - ord('a')] = cnt\n        cnt += 1\n    start_s = []\n    now_len = 0\n    for i in was:\n        now_len += multi[ord(i) - ord('a')]\n        start_s.append(i)\n        if now_len == len(was):\n            break\n    if now_len == len(was):\n        new_was = []\n        ss = list(start_s)\n        for i in deleted_list:\n            new_was.extend(ss)\n            ss = ''.join(filter(lambda x: x != i, ss))\n        if new_was == list(was):\n            print(''.join(start_s), ''.join(deleted_list))\n        else:\n            print(-1)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    was = s\n    deleted_list = []\n    while s:\n        deleted_list += s[-1]\n        s = ''.join(filter(lambda x: x != deleted_list[-1], s))\n    deleted_list.reverse()\n    multi = [0 for _ in range(26)]\n    cnt = 1\n    for i in deleted_list:\n        multi[ord(i) - ord('a')] = cnt\n        cnt += 1\n    start_s = ''\n    now_len = 0\n    for i in was:\n        now_len += multi[ord(i) - ord('a')]\n        start_s += i\n        if now_len == len(was):\n            break\n    if now_len == len(was):\n        new_was = ''\n        ss = start_s\n        for i in deleted_list:\n            new_was += ss\n            ss = ''.join(filter(lambda x: x != i, ss))\n        if new_was == ''.join(was):\n            print(start_s, ''.join(deleted_list))\n        else:\n            print(-1)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfor i in range(int(input())):\n    s = input().strip()\n    if len(set(s)) == 1:\n        print(s, s[0])\n    else:\n        l = Counter(s)\n        dd = ''\n        kin = []\n        ll = 0\n        rr = 0\n        for x in range(len(s)):\n            l[s[x]] -= 1\n            for i in l:\n                if l[i] == 0:\n                    dd += i\n                    if len(dd) == 1:\n                        ll = x\n                    kin.append(i)\n            for i in kin:\n                del l[i]\n            kin = []\n        ss2 = 0\n        sp = s[ll + 1:]\n        ss1 = s[:ll].replace(dd[0], '')\n        for i in range(ll, len(s)):\n            ss1 += [s[i], ''][s[i] == dd[0]]\n            if sp[:len(ss1)] == ss1 and ss1 != '' and (sp[len(ss1):].find(dd[1]) == -1):\n                ss2 = s[:i + 1]\n                s = s[i + 1:]\n                break\n            sp = sp[1:]\n        ss1 = ss2\n        if ss2 != 0:\n            for i in dd:\n                ss1 = ss1.replace(i, '')\n                if s[:len(ss1)] == ss1:\n                    s = s[len(ss1):]\n                else:\n                    s += ' '\n                    break\n        if len(s) == 0 and ss2 != 0:\n            print(ss2, dd)\n        else:\n            print(-1)", "from collections import defaultdict\nfor _ in range(int(input())):\n    t = input()\n    d = defaultdict(lambda : 0)\n    ans = ''\n    for i in range(len(t) - 1, -1, -1):\n        if d[t[i]] == 0:\n            ans += t[i]\n        d[t[i]] += 1\n    ans = ans[::-1]\n    ok = True\n    l = 0\n    for i in range(len(ans)):\n        if d[ans[i]] % (i + 1) != 0:\n            ok = False\n        else:\n            l += d[ans[i]] // (i + 1)\n    s = t[:l]\n    i = 0\n    d = defaultdict(lambda : 0)\n    comp = ''\n    while i < len(ans):\n        n = ans[i]\n        for j in range(l):\n            if d[s[j]] == 0:\n                comp += s[j]\n        d[ans[i]] = 1\n        i += 1\n    if ok and comp == t:\n        print(s, ans)\n    else:\n        print(-1)"]