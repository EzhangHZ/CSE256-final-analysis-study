["for _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    if a > b:\n        (a, b) = (n - a + 1, n - b + 1)\n    (s, res) = (sorted(list(map(int, input().split())))[:b - a - 1], 0)\n    for t in range(b - 1, a, -1):\n        while s:\n            if s.pop() < t:\n                res += 1\n                break\n        if not s:\n            break\n    print(res)", "for _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    if a > b:\n        (a, b) = (n - a + 1, n - b + 1)\n    (s, res) = (sorted(list(map(int, input().split())))[:b - a - 1], 0)\n    for t in range(b - 1, a, -1):\n        while s:\n            if s.pop() < t:\n                res += 1\n                break\n        if not s:\n            break\n    print(res)", "def solve():\n    (n, _, a, b) = [int(x) for x in input().strip().split(' ')]\n    cost = [int(x) for x in input().strip().split(' ')]\n    cost.sort()\n    lb = 0\n    ub = 0\n    if a < b:\n        lb = a\n        ub = b - 1\n    else:\n        lb = n - a + 1\n        ub = n - b\n    p = lb\n    q = 0\n    res = 0\n    while p < ub and q < len(cost):\n        if p >= cost[q]:\n            p += 1\n            q += 1\n            res += 1\n        elif cost[q] >= ub:\n            break\n        else:\n            p = cost[q] + 1\n            res += 1\n            q += 1\n    return res\nt = int(input().strip())\nfor _ in range(t):\n    print(solve())", "import math\nfrom collections import defaultdict\nIP = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, m, a, b) = IP()\n    time = sorted(IP())\n    ret = 0\n    if a > b:\n        dis = n - 1 - b\n    else:\n        dis = b - 2\n    t = dis - abs(a - b) + 1\n    for i in time:\n        t = max(t + 1, i)\n        if t > dis:\n            break\n        ret += 1\n    print(ret)", "import math\nfrom collections import defaultdict\nIP = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, m, a, b) = IP()\n    time = sorted(IP())\n    ret = 0\n    if a > b:\n        dis = n - 1 - b\n    else:\n        dis = b - 2\n    t = dis - abs(a - b) + 1\n    for i in time:\n        t = max(t + 1, i)\n        if t > dis:\n            break\n        ret += 1\n    print(ret)", "for _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    if a > b:\n        (a, b) = (n - a + 1, n - b + 1)\n    (s, res) = (sorted(list(map(int, input().split())))[:b - a - 1], 0)\n    for t in range(b - 1, a, -1):\n        while s:\n            if s.pop() < t:\n                res += 1\n                break\n        if not s:\n            break\n    print(res)", "for _ in range(int(input())):\n    (l1, l2) = (list(map(int, input().split(' '))) for i in range(2))\n    l2 = sorted(l2)[::-1]\n    if l1[2] > l1[3]:\n        r = l1[0] - l1[2]\n    else:\n        r = l1[2] - 1\n    (j, k, i, ans) = (abs(l1[2] - l1[3]) - 1, 0, 0, 0)\n    while k < j and i < l1[1]:\n        if l2[i] <= r + j - k:\n            ans += 1\n            k += 1\n        i += 1\n    print(ans)", "import sys\n\ndef problem1(n, m, a, b, time_list):\n    if b < a:\n        a = n - a + 1\n        b = n - b + 1\n    max_to_recall = b - a - 1\n    time_list.sort()\n    max_time_for_dazhao_to_recall = b - 2\n    time_list = time_list[:max_to_recall]\n    answer = 0\n    for i in range(max_to_recall):\n        if max_time_for_dazhao_to_recall >= time_list[-1]:\n            answer += 1\n            max_time_for_dazhao_to_recall -= 1\n        time_list.pop()\n        if time_list == []:\n            break\n    return answer\nT = int(sys.stdin.readline().strip())\nwhile T > 0:\n    T -= 1\n    (n, m, a, b) = sys.stdin.readline().strip().split(' ')\n    l = sys.stdin.readline().strip()\n    l = l.split(' ')\n    l = sorted(list(map(lambda x: int(x), l)), reverse=False)\n    print(problem1(int(n), int(m), int(a), int(b), l))", "for _ in range(int(input())):\n    (l1, l2) = (list(map(int, input().split(' '))) for i in range(2))\n    l2 = sorted(l2)[::-1]\n    if l1[2] > l1[3]:\n        r = l1[0] - l1[2]\n    else:\n        r = l1[2] - 1\n    (j, k, i, ans) = (abs(l1[2] - l1[3]) - 1, 0, 0, 0)\n    while k < j and i < l1[1]:\n        if l2[i] <= r + j - k:\n            ans += 1\n            k += 1\n        i += 1\n    print(ans)", "import sys\nt = int(sys.stdin.readline().strip())\nfor i in range(t):\n    (n, m, a, b) = list(map(int, sys.stdin.readline().strip().split()))\n    S = list(map(int, sys.stdin.readline().strip().split()))\n    if a > b:\n        max_num = a - b - 1\n    else:\n        max_num = b - a - 1\n    if max_num == 0:\n        print(0)\n    else:\n        temp = 0\n        S = sorted(S, reverse=True)\n        if max_num > len(S):\n            max_num = len(S)\n        if a > b:\n            max_step = n - b\n        else:\n            max_step = b - 1\n        for j in range(len(S)):\n            if S[j] <= max_step - temp - 1:\n                temp += 1\n            if temp >= max_num:\n                break\n        print(temp)", "for _ in range(int(input())):\n    (l1, l2) = (list(map(int, input().split(' '))) for i in range(2))\n    l2 = sorted(l2)[::-1]\n    if l1[2] > l1[3]:\n        r = l1[0] - l1[2]\n    else:\n        r = l1[2] - 1\n    (j, k, i, ans) = (abs(l1[2] - l1[3]) - 1, 0, 0, 0)\n    while k < j and i < l1[1]:\n        if l2[i] <= r + j - k:\n            ans += 1\n            k += 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    lis = sorted(list(map(int, input().split())))\n    if a < b:\n        z = 0\n        x = b - 2\n        y = b - a - 1\n    else:\n        z = 0\n        x = n - b - 1\n        y = a - b - 1\n    k = x\n    for i in range(m):\n        if lis[i] > x:\n            lis = lis[:i]\n            break\n    lis = lis[::-1]\n    for i in range(len(lis)):\n        if k == 0 or y == 0:\n            break\n        if lis[i] <= k:\n            z += 1\n            k -= 1\n            y -= 1\n    print(z)", "for _ in range(int(input())):\n    (n, m, a, b) = map(int, input().split())\n    lis = sorted(list(map(int, input().split())))\n    if a < b:\n        z = 0\n        x = b - 2\n        y = b - a - 1\n    else:\n        z = 0\n        x = n - b - 1\n        y = a - b - 1\n    k = x\n    for i in range(m):\n        if lis[i] > x:\n            lis = lis[:i]\n            break\n    lis = lis[::-1]\n    for i in range(len(lis)):\n        if k == 0 or y == 0:\n            break\n        if lis[i] <= k:\n            z += 1\n            k -= 1\n            y -= 1\n    print(z)", "n = int(input())\nfor i in range(0, n):\n    o = input().rstrip().split(' ')\n    p = input().rstrip().split(' ')\n    p.sort(key=int, reverse=True)\n    N = int(o[0])\n    A = int(o[2])\n    B = int(o[3])\n    if A == B:\n        print(0)\n    elif A < B:\n        R = B - A\n        R += A - 1\n        ans = 0\n        D = 1\n        for j in range(0, len(p)):\n            F = D + int(p[j])\n            if F <= R:\n                ans += 1\n                D += 1\n        print(min(ans, abs(A - B) - 1))\n    else:\n        R = A - B\n        R += N - A\n        ans = 0\n        D = 1\n        for j in range(0, len(p)):\n            F = D + int(p[j])\n            if F <= R:\n                ans += 1\n                D += 1\n        print(min(ans, abs(A - B) - 1))", "import bisect\nfor _ in range(int(input())):\n    (n, m, a, b) = [int(x) for x in input().split()]\n    s = sorted([int(x) for x in input().split()])\n    if a < b:\n        t = b - 2\n    else:\n        t = n - b - 1\n    f = abs(b - a) - 1\n    count = 0\n    hi = m\n    while f > 0:\n        hi = bisect.bisect(s, t, lo=0, hi=hi)\n        if hi == 0:\n            break\n        hi -= 1\n        f -= 1\n        t -= 1\n        count += 1\n    print(count)", "import sys\nimport re\n\ndef can(a, b, si, t, n):\n    if a < b:\n        return b - t - si > 1\n    else:\n        return b + t + si < n\nT = int(input())\nfor _ in range(T):\n    (n, m, a, b) = list(map(int, input().split(' ')))\n    s = list(map(int, input().split(' ')))\n    s = sorted(s)\n    max_count = 0\n    if a < b:\n        r = min(b - a - 2, m - 1)\n    else:\n        r = min(a - b - 2, m - 1)\n    l = 0\n    while l <= r:\n        mid = (l + r) // 2\n        for i in range(mid + 1):\n            if not can(a, b, s[i], mid - i, n):\n                r = mid - 1\n                break\n        else:\n            max_count = mid + 1\n            l = mid + 1\n    print(max_count)"]