["import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, arr):\n    d = {i: 0 for i in arr}\n    prev = arr[0]\n    for i in arr[1:]:\n        if i != prev:\n            d[i] += 1\n        prev = i\n    for j in d:\n        if j != prev:\n            d[j] += 1\n    print(min(d.values()))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split(' '))\nt = read_int()\nans = []\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    seg = [0] * (n + 1)\n    curr = 0\n    cnt = 0\n    for ai in a:\n        if ai == curr:\n            cnt += 1\n        else:\n            if cnt > 0:\n                seg[curr] += 1\n            curr = ai\n            cnt = 1\n    if cnt > 0:\n        seg[curr] += 1\n    res = n\n    for i in range(1, n + 1):\n        if seg[i] == 0:\n            continue\n        op = seg[i] + 1\n        if i == a[0]:\n            op -= 1\n        if i == a[-1]:\n            op -= 1\n        res = min(res, op)\n    ans.append(str(res))\nprint('\\n'.join(ans))", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef ans():\n    n = int(input())\n    a = list(map(int, input().split()))\n    num_list = []\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            num_list.append(a[i])\n    else:\n        num_list.append(a[-1])\n    if len(num_list) == 1:\n        print(0)\n    else:\n        c = defaultdict(lambda : 0)\n        for i in range(1, len(num_list) - 1):\n            c[num_list[i]] += 1\n        try:\n            mn = min((i for i in c.values()))\n        except ValueError:\n            pass\n        if num_list.count(num_list[0]) == 1 or (num_list.count(num_list[0]) == 2 and num_list[0] == num_list[-1]) or num_list.count(num_list[-1]) == 1:\n            print(1)\n        else:\n            print(mn + 1)\nfor t in range(int(input())):\n    ans()", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    last_element = -1\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            if last_element != -1:\n                if last_element in d:\n                    d[last_element] += 1\n                else:\n                    d[last_element] = 1\n            last_element = a[i]\n    if last_element == -1:\n        print(0)\n    elif a[0] not in d or last_element not in d:\n        print(1)\n    else:\n        print(min(d.values()) + 1)", "def f(n, l):\n    if l.count(l[0]) == n:\n        return 0\n    else:\n        m = [200001 for i in range(n + 1)]\n        m[l[0]] = 0\n        for i in range(1, n - 1):\n            if l[i] != l[i - 1]:\n                if m[l[i]] == 200001:\n                    m[l[i]] = 1\n                else:\n                    m[l[i]] = m[l[i]] + 1\n        if l[n - 1] != l[n - 2]:\n            if m[l[n - 1]] == 200001:\n                m[l[n - 1]] = 0\n        else:\n            m[l[n - 1]] = m[l[n - 1]] - 1\n        return min(m) + 1\nx = int(input())\np = []\nfor i in range(x):\n    z = int(input())\n    y = input()\n    y1 = y.split(' ')\n    y2 = [int(t) for t in y1]\n    p.append((z, y2))\nfor j in range(x):\n    print(f(p[j][0], p[j][1]))", "import sys\n\ndef answer(n, a):\n    a_new = [a[0]]\n    for i in range(1, n):\n        if a[i] != a_new[-1]:\n            a_new.append(a[i])\n    if len(a_new) == 1:\n        return 0\n    cnt = [0] * (n + 1)\n    legit = [False] * (n + 1)\n    for e in a_new:\n        cnt[e] += 1\n        legit[e] = True\n    cnt[a_new[0]] -= 1\n    cnt[a_new[-1]] -= 1\n    mn = 10 ** 10\n    for i in range(len(cnt)):\n        if legit[i]:\n            mn = min(mn, cnt[i])\n    return mn + 1\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(sys.stdin.readline())\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, a))\n        t -= 1\n    return\nmain()", "from collections import Counter\n\ndef g(l):\n    lf = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] != l[i - 1]:\n            lf.append(l[i])\n    dicto = Counter(lf)\n    dicto[lf[0]] -= 1\n    dicto[lf[-1]] -= 1\n    if len(lf) == 1:\n        return '0'\n    else:\n        k = min(list(dicto.values()))\n        return str(k + 1)\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    km = list(map(int, r2))\n    s += g(km) + '\\n'\nprint(s)", "from collections import *\nfrom itertools import *\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    c = Counter((k for (k, g) in groupby(a)))\n    print(min((c[x] - 1 + (x != a[0]) + (x != a[-1]) for x in c)))", "from collections import *\nfrom itertools import *\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    c = Counter((k for (k, g) in groupby(a)))\n    print(min((c[x] - 1 + (x != a[0]) + (x != a[-1]) for x in c)))", "from collections import *\nfrom itertools import *\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    c = Counter((k for (k, g) in groupby(a)))\n    print(min((c[x] - 1 + (x != a[0]) + (x != a[-1]) for x in c)))", "from collections import *\nfrom itertools import *\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    c = Counter((k for (k, g) in groupby(a)))\n    print(min((c[x] - 1 + (x != a[0]) + (x != a[-1]) for x in c)))", "import sys\nfrom collections import Counter\n\ndef solve(n, A):\n    B = [A[0]]\n    for a in A[1:]:\n        if a == B[-1]:\n            continue\n        B.append(a)\n    c = Counter(B)\n    ans = n + 10\n    for (k, v) in c.items():\n        v += 1\n        if k == A[0]:\n            v -= 1\n        if k == A[-1]:\n            v -= 1\n        if v < ans:\n            ans = v\n    return ans\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        print(solve(n, A))\nmain()", "from collections import Counter\n\ndef f(l):\n    lf = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] != l[i - 1]:\n            lf.append(l[i])\n    dicto = Counter(lf)\n    dicto[lf[0]] -= 1\n    dicto[lf[-1]] -= 1\n    if len(lf) == 1:\n        return '0'\n    else:\n        k = min(list(dicto.values()))\n        return str(k + 1)\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    km = list(map(int, r2))\n    s += f(km) + '\\n'\nprint(s)", "from collections import *\nfrom itertools import *\nfor s in [*open(0)][2::2]:\n    a = s.split()\n    c = Counter((k for (k, g) in groupby(a)))\n    print(min((c[x] - 1 + (x != a[0]) + (x != a[-1]) for x in c)))", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    h = [False] * (n + 1)\n    i = 1\n    for v in mints():\n        if a[v] != i - 1:\n            b[v] += 1\n        a[v] = i\n        h[v] = True\n        i += 1\n    ans = int(1000000000.0)\n    for v in range(n + 1):\n        if h[v]:\n            if a[v] != n:\n                b[v] += 1\n            ans = min(ans, b[v])\n    print(ans)\nfor i in range(mint()):\n    solve()", "import sys\nt = int(input())\nfor num in range(t):\n    n = int(sys.stdin.readline())\n    seq = list(map(int, sys.stdin.readline().split()))\n    dic = {}\n    for i in range(len(seq) - 1):\n        if seq[i] != seq[i + 1]:\n            if seq[i] not in dic:\n                if len(dic) == 0:\n                    dic[seq[i]] = 1\n                else:\n                    dic[seq[i]] = 2\n            else:\n                dic[seq[i]] += 1\n    if seq[-1] not in dic:\n        dic[seq[-1]] = 1\n    if len(dic) == 1:\n        print(0)\n    else:\n        print(min(dic.values()))", "import sys\nfrom collections import Counter\n\ndef solve(n, A):\n    B = [A[0]]\n    for a in A[1:]:\n        if a == B[-1]:\n            continue\n        B.append(a)\n    c = Counter(B)\n    ans = n + 10\n    for (k, v) in c.items():\n        v += 1\n        if k == A[0]:\n            v -= 1\n        if k == A[-1]:\n            v -= 1\n        if v < ans:\n            ans = v\n    return ans\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        print(solve(n, A))\nmain()", "from collections import Counter\n\ndef f(l):\n    lf = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] != l[i - 1]:\n            lf.append(l[i])\n    dicto = Counter(lf)\n    dicto[lf[0]] -= 1\n    dicto[lf[-1]] -= 1\n    if len(lf) == 1:\n        return '0'\n    else:\n        k = min(list(dicto.values()))\n        return str(k + 1)\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    km = list(map(int, r2))\n    s += f(km) + '\\n'\nprint(s)", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split(' '))\nt = read_int()\nans = []\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    seg = [0] * (n + 1)\n    curr = 0\n    cnt = 0\n    for ai in a:\n        if ai == curr:\n            cnt += 1\n        else:\n            if cnt > 0:\n                seg[curr] += 1\n            curr = ai\n            cnt = 1\n    if cnt > 0:\n        seg[curr] += 1\n    res = n\n    for i in range(1, n + 1):\n        if seg[i] == 0:\n            continue\n        op = seg[i] + 1\n        if i == a[0]:\n            op -= 1\n        if i == a[-1]:\n            op -= 1\n        res = min(res, op)\n    ans.append(str(res))\nprint('\\n'.join(ans))", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    n = len(l)\n    a = {x: 1 for x in l}\n    a[l[0]] = 0\n    for i in range(n - 1):\n        if l[i + 1] != l[i]:\n            a[l[i]] += 1\n    print([min(a.items(), key=lambda x: x[1])[1], 0][len(set(l)) == 1])", "for s in [*open(0)][2::2]:\n    l = [*map(int, s.split())]\n    n = len(l)\n    a = {x: 1 for x in l}\n    a[l[0]] = 0\n    for i in range(n - 1):\n        if l[i + 1] != l[i]:\n            a[l[i]] += 1\n    print([min(a.items(), key=lambda x: x[1])[1], 0][len(set(l)) == 1])", "from sys import *\nfrom collections import Counter\ninput = lambda : stdin.readline()\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\nsetrecursionlimit(1000)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    dic = {}\n    for i in range(n):\n        if arr[i] not in dic:\n            if i == 0:\n                dic[arr[i]] = 0\n            else:\n                dic[arr[i]] = 1\n        elif arr[i - 1] != arr[i]:\n            dic[arr[i]] += 1\n    last = arr[-1]\n    for i in set(arr):\n        if i != last:\n            dic[i] += 1\n    print(min(dic.values()))", "def unique(arr):\n    new = []\n    c = arr[0]\n    for i in arr[1:]:\n        if i != c:\n            new.append(c)\n            c = i\n    new.append(c)\n    return new\n\ndef logic(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    counts = {}\n    f = arr[0]\n    l = arr[-1]\n    counts[f] = 1\n    if f != l:\n        counts[l] = 1\n    for i in arr[1:-1]:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 2\n    m = n\n    for key in counts:\n        v = counts[key]\n        if v < m:\n            m = v\n    return m\ni = input()\nfor w in range(0, int(i)):\n    input()\n    arr = unique([int(x) for x in input().split()])\n    print(logic(arr))", "from sys import stdin, stdout\ninput = stdin.readline\nprint2 = stdout.write\n\ndef get_ints():\n    return map(int, stdin.readline().split())\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        input()\n        print(0)\n        continue\n    a = get_list()\n    se = set(a)\n    if len(se) == 1:\n        print(0)\n        continue\n    elif len(se) == n:\n        print(1)\n        continue\n    counts = {s: 1 for s in se}\n    i = 1\n    prev = a[0]\n    while i < n:\n        cur = a[i]\n        if cur != prev:\n            counts[a[i]] += 1\n        prev = cur\n        i += 1\n    counts[a[-1]] -= 1\n    print(min(counts.values()))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    l = [int(x) for x in sys.stdin.readline().split()]\n    l2 = [l[0]]\n    target = l[0]\n    for i in range(1, n):\n        if l[i] == target:\n            continue\n        else:\n            target = l[i]\n            l2.append(target)\n    dic = {}\n    for i in range(len(l2)):\n        if l2[i] not in dic:\n            dic[l2[i]] = 1\n        else:\n            dic[l2[i]] += 1\n    dic[l[0]] -= 1\n    dic[l[-1]] -= 1\n    l_new = sorted(dic.items(), key=lambda d: d[1])\n    if len(l_new) != 1:\n        print(l_new[0][1] + 1)\n    else:\n        print(0)", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor q in range(t):\n    stdin.readline()\n    L = [int(x) for x in stdin.readline().split(' ')]\n    freq = {}\n    for i in L:\n        freq[i] = 1\n    for (idx, i) in enumerate(L):\n        if L[idx - 1] != L[idx]:\n            freq[i] += 1\n    m = 100000000\n    if L[0] == L[-1]:\n        freq[L[0]] -= 1\n    else:\n        freq[L[0]] -= 1\n        freq[L[-1]] -= 1\n    for (key, val) in freq.items():\n        m = min(val, m)\n    print(m)", "import sys\ninput = sys.stdin.readline\nfrom itertools import groupby\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    inp = [int(x) for x in input().split()]\n    x = [x[0] for x in groupby(inp)]\n    if len(x) == 1:\n        print(0)\n        continue\n    count = {}\n    for i in range(0, len(x)):\n        elem = x[i]\n        if elem in count:\n            if i != len(x) - 1:\n                count[elem] += 1\n        elif i == 0 or i == len(x) - 1:\n            count[elem] = 1\n        else:\n            count[elem] = 2\n    print(min(count.values()))", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(5 * 10 ** 5)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\nfrom math import gcd\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef lcm(a, b):\n    tmp = a * b // gcd(a, b)\n    return tmp\n\ndef solve():\n    n = II()\n    a_list = LI()\n    short_a = a_list[0:1]\n    for i in range(1, n):\n        a = a_list[i]\n        if a != short_a[-1]:\n            short_a.append(a)\n    cnts_dict = collections.Counter(short_a)\n    if len(cnts_dict) == 1:\n        return 0\n    ans = inf\n    for (k, v) in cnts_dict.items():\n        if short_a[0] == k:\n            v -= 1\n        if short_a[-1] == k:\n            v -= 1\n        ans = min(ans, max(1, v + 1))\n    return ans\n\ndef main():\n    t = II()\n    res = list()\n    for _ in range(t):\n        res.append(solve())\n    for ans in res:\n        print(ans)\n    return 0\nmain()", "def main_function():\n    tests = range(int(input()))\n    for test in tests:\n        n = int(input())\n        a = [int(i) for i in input().split(' ')]\n        hash_table = {}\n        current_value = a[0]\n        for i in range(len(a)):\n            if a[i] != current_value:\n                prev_item = current_value\n                current_value = a[i]\n                if current_value in hash_table:\n                    pass\n                else:\n                    hash_table[current_value] = 1\n                if prev_item in hash_table:\n                    hash_table[prev_item] += 1\n                else:\n                    hash_table[prev_item] = 1\n        if len(hash_table) == 0:\n            print(0)\n        else:\n            print(min([hash_table[i] for i in hash_table]))\nmain_function()", "def do():\n    d = {}\n    last = ''\n    for e in data:\n        if e == last:\n            continue\n        d[e] = d.get(e, 1) + 1\n        last = e\n    if len(d) == 1:\n        return 0\n    d[data[0]] -= 1\n    d[data[-1]] -= 1\n    return min(d.values())\nfor _ in range(int(input())):\n    n = int(input())\n    data = input().split()\n    print(do())", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        size = int(input())\n        arr = [*map(int, input().split())]\n        counter = 9 ** 9\n        optim = [[] for i in range(size)]\n        for (i, val) in enumerate(arr):\n            optim[val - 1].append(i)\n        if len(set(arr)) == 1:\n            print(0)\n            continue\n        for val in optim:\n            if len(val) == 0:\n                continue\n            count = 0\n            if val[0] != 0:\n                count = 1\n            for (val1, val2) in zip(val[:-1], val[1:]):\n                if val2 - val1 > 1:\n                    count += 1\n            if val[-1] != size - 1:\n                count += 1\n            counter = min(counter, count)\n        print(counter)\nmain()", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    dict1 = {}\n    ans = 10 ** 5\n    for i in range(n):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = [i]\n        else:\n            dict1[list1[i]].append(i)\n    for x in dict1.values():\n        s = 2\n        m = len(x)\n        for y in range(m - 1):\n            if x[y + 1] - x[y] > 1:\n                s += 1\n        if 0 in x:\n            s -= 1\n        if n - 1 in x:\n            s -= 1\n        ans = min(ans, s)\n    list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "t = int(input())\nG = {}\n\ndef calc(a):\n    G.clear()\n    for i in range(0, len(a)):\n        if a[i] in G:\n            if a[i] != a[i - 1] and i != len(a):\n                G[a[i]] += 1\n        elif i != 0:\n            G[a[i]] = 1\n        else:\n            G[a[i]] = 0\n    for i in G:\n        if a[len(a) - 1] != i:\n            G[i] += 1\n    mini = 10 ** 9\n    for i in G:\n        if G[i] < mini:\n            mini = G[i]\n    return mini\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(calc(a))", "from sys import stdin, exit, setrecursionlimit\nfrom collections import deque\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nfor _ in range(int(input())):\n    n = int(input())\n    a = lmi()\n    if len(set(a)) == 1:\n        print(0)\n        continue\n    freq = {a[0]: 0}\n    for i in range(1, n):\n        if a[i] not in freq:\n            freq[a[i]] = 0\n        if a[i] != a[i - 1]:\n            freq[a[i]] += 1\n    freq[a[n - 1]] -= 1\n    mx = float('inf')\n    for i in freq:\n        mx = min(mx, freq[i])\n    print(mx + 1)", "import sys\nfrom collections import Counter\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef pr(something):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array0):\n    array = []\n    last = -1\n    for v in array0:\n        if not last == v:\n            array.append(v)\n        last = v\n    c = Counter(array)\n    sc = sorted([(c[k], k) for k in c])\n    ops = float('inf')\n    if len(sc) == 1:\n        ops = 0\n    else:\n        for (freq, v) in sc:\n            freq -= 1\n            if not array0[0] == v:\n                freq += 1\n            if not array0[-1] == v:\n                freq += 1\n            ops = min(ops, freq)\n    return ops\nNT = int(rl())\nfor ti in range(NT):\n    _ = rl()\n    array = [int(x) for x in rl().split(' ')]\n    res = solve(array)\n    pr(res)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        MAX_A = max(A)\n        section = [[] for _ in range(MAX_A)]\n        for i in range(n):\n            section[A[i] - 1].append(i)\n        res = f_inf\n        for sec in section:\n            if len(sec) == 0:\n                continue\n            cnt = 0\n            now = sec[0]\n            if now != 0:\n                cnt += 1\n            for idx in sec:\n                if idx - now > 1:\n                    cnt += 1\n                now = idx\n            if now != n - 1:\n                cnt += 1\n            res = min(res, cnt)\n        print(res)\nresolve()", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor\nfrom sys import stdin, stdout, setrecursionlimit\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    freq = {}\n    for i in range(n):\n        if a[i] not in freq:\n            freq[a[i]] = 1\n        else:\n            freq[a[i]] += 1\n    if len(freq) == 1:\n        print(0)\n        continue\n    if freq[a[0]] == 1 or freq[a[-1]] == 1:\n        print(1)\n        continue\n    if a[0] == a[-1]:\n        x = a[0]\n        if freq[x] == 2:\n            print(1)\n            continue\n    for i in range(n - 1):\n        if a[i + 1] == a[i]:\n            freq[a[i]] -= 1\n    freq[a[0]] -= 1\n    freq[a[-1]] -= 1\n    mnVal = inf\n    for i in freq:\n        mnVal = min(mnVal, freq[i] + 1)\n    print(mnVal)", "from sys import stdin\nloop = int(stdin.readline())\nfor lo in range(loop):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list()\n    b.append(a[0])\n    for i in range(1, len(a)):\n        if a[i] != b[-1]:\n            b.append(a[i])\n    d = dict()\n    for e in b:\n        if e in d.keys():\n            d[e] = d[e] + 1\n        else:\n            d.update({e: 1})\n    d[b[0]] = d[b[0]] - 1\n    d[b[-1]] = d[b[-1]] - 1\n    print(min(d.values()) + 1)", "for test in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    a_a = {a[0]: 1}\n    for (a_i, a_p_i) in zip(a[1:], a[:-1]):\n        if a_i == a_p_i:\n            continue\n        a_a[a_i] = a_a.get(a_i, 1) + 1\n    a_a[a[-1]] -= 1\n    print(min(a_a.values()))", "for i in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    D = {a: 0 for a in A}\n    last = A[0]\n    for a in A[1:]:\n        if a != last:\n            D[a] += 1\n        last = a\n    for k in D:\n        if k != last:\n            D[k] += 1\n    print(min(D.values()))", "import sys\ninfile = sys.stdin\nnext(infile)\nfor l in infile:\n    n = int(l)\n    a = list(map(int, infile.readline().split()))\n    if n == 1:\n        ans = 0\n    else:\n        c1n = a[0]\n        c2n = a[-1]\n        c1 = 0\n        c2 = 0\n        b = {}\n        i = 0\n        while i < n:\n            if a[i] == c1n:\n                c1 += 1\n                i += 1\n                while i < n and a[i] == c1n:\n                    i += 1\n            elif a[i] == c2n:\n                c2 += 1\n                i += 1\n                while i < n and a[i] == c2n:\n                    i += 1\n            elif a[i] in b:\n                check = a[i]\n                b[check] += 1\n                i += 1\n                while i < n and a[i] == check:\n                    i += 1\n            else:\n                check = a[i]\n                b[a[i]] = 1\n                i += 1\n                while i < n and a[i] == check:\n                    i += 1\n        if b == {}:\n            m = 0\n        else:\n            m = min(b.values())\n        if a[0] == a[-1]:\n            ans = min(c1 - 1, m + 1)\n        elif m == 0:\n            ans = min(c1, c2)\n        else:\n            ans = min(c1, c2, m + 1)\n    print(ans)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    if len(l) == 1:\n        print(0)\n        continue\n    shan = []\n    mini = n\n    i = 0\n    j = 1\n    while i < n and j < n:\n        while j < n and l[j] == l[i]:\n            j += 1\n        shan.append(l[i])\n        i = j\n        j += 1\n    if l[-1] != l[-2]:\n        shan.append(l[-1])\n    if len(shan) == 1:\n        print(0)\n        continue\n    d = dict(Counter(shan))\n    if d[shan[-1]] == 1 or d[shan[0]] == 1:\n        mini = min(mini, 1)\n    if d[shan[-1]] >= 2 and shan[-1] == shan[0]:\n        mini = min(mini, d[shan[-1]] - 1)\n    if d[shan[-1]] >= 2 and shan[-1] != shan[0]:\n        mini = min(mini, d[shan[-1]])\n    if d[shan[0]] == 2 and shan[-1] != shan[0]:\n        mini = min(mini, d[shan[0]])\n    wow = min(list(d.values()))\n    mini = min(wow + 1, mini)\n    print(mini)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    if len(l) == 1:\n        print(0)\n        continue\n    shan = []\n    mini = n\n    i = 0\n    j = 1\n    while i < n and j < n:\n        while j < n and l[j] == l[i]:\n            j += 1\n        shan.append(l[i])\n        i = j\n        j += 1\n    if l[-1] != l[-2]:\n        shan.append(l[-1])\n    if len(shan) == 1:\n        print(0)\n        continue\n    d = dict(Counter(shan))\n    if d[shan[-1]] == 1 or d[shan[0]] == 1:\n        mini = min(mini, 1)\n    if d[shan[-1]] >= 2 and shan[-1] == shan[0]:\n        mini = min(mini, d[shan[-1]] - 1)\n    if d[shan[-1]] >= 2 and shan[-1] != shan[0]:\n        mini = min(mini, d[shan[-1]])\n    if d[shan[0]] == 2 and shan[-1] != shan[0]:\n        mini = min(mini, d[shan[0]])\n    wow = min(list(d.values()))\n    mini = min(wow + 1, mini)\n    print(mini)", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    D = {a: 0 for a in li}\n    last = li[0]\n    for i in li[1:]:\n        if i != last:\n            D[i] += 1\n        last = i\n    for k in D:\n        if k != last:\n            D[k] += 1\n    print(min(D.values()))", "for i in range(int(input())):\n    n = int(input())\n    data = input().split()\n    process = list(set(data))\n    counter = {j: 1 for j in process}\n    for j in range(n - 1):\n        if data[j] != data[j + 1]:\n            counter[data[j]] += 1\n    counter[data[n - 1]] += 1\n    counter[data[0]] -= 1\n    counter[data[n - 1]] -= 1\n    print(max(min(counter.values()), 0))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l2 = []\n    for i in range(n):\n        if i == 0 or l[i] != l[i - 1]:\n            l2.append(l[i])\n    d = {}\n    for i in l2:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 2\n    d[l2[0]] -= 1\n    d[l2[-1]] -= 1\n    print(min(list(d.values())))", "def sequenceTransformation(n, array):\n    a = []\n    prev = '#'\n    for x in range(n):\n        if array[x] != prev:\n            a.append(array[x])\n            prev = array[x]\n    if len(a) == 1:\n        return 0\n    elif len(a) == 2:\n        return 1\n    d = {}\n    for x in range(0, len(a)):\n        if a[x] in d:\n            d[a[x]] += 1\n        else:\n            d[a[x]] = 1\n    min = float('inf')\n    d[a[0]] -= 1\n    d[a[-1]] -= 1\n    for x in d:\n        if d[x] < min:\n            min = d[x]\n    return min + 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(sequenceTransformation(n, array))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cond = []\n    for x in arr:\n        if not cond or cond[-1] != x:\n            cond.append(x)\n    ct = {}\n    for x in set(cond):\n        ct[x] = 1\n    for x in cond[1:]:\n        ct[x] += 1\n    ct[cond[-1]] -= 1\n    print(min(ct.values()))", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(I())\n    d = {}\n    d[a[0]] = 1\n    for i in range(1, n):\n        ai = a[i]\n        if ai != a[i - 1]:\n            if ai not in d:\n                d[ai] = 2\n            else:\n                d[ai] = d[ai] + 1\n    d[a[n - 1]] = d[a[n - 1]] - 1\n    print(min(d.values()))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    dic = {}\n    inp = input()\n    for i in inp.split(' '):\n        ele = int(i)\n        if ele != (arr or [None])[-1]:\n            arr.append(ele)\n            dic[ele] = dic.get(ele, 1) + 1\n    dic[arr[0]] = dic[arr[0]] - 1\n    dic[arr[-1]] = dic[arr[-1]] - 1\n    print(dic[min(dic, key=dic.get)])", "from collections import Counter\n\ndef solve(a):\n    mp = {}\n    mp[a[0]] = 0\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            continue\n        if a[i] not in mp:\n            mp[a[i]] = 1\n        else:\n            mp[a[i]] += 1\n    for i in mp:\n        if i != a[-1]:\n            mp[i] += 1\n    Min = float('inf')\n    for i in mp:\n        Min = min(Min, mp[i])\n    return Min\nt = int(input())\nans = []\nwhile t > 0:\n    _ = int(input(''))\n    a = list(map(int, input().split()))\n    ans.append(solve(a))\n    t -= 1\nfor i in ans:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prev = a[0]\n    count = {a[0]: 0, a[-1]: -1}\n    for i in a:\n        if i in count:\n            if prev is not i:\n                count[i] += 1\n        else:\n            count[i] = 1\n        prev = i\n    if len(count) == 1:\n        print(0)\n        continue\n    print(min(count.values()) + 1)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]].append(i)\n        else:\n            d[arr[i]] = [i]\n    res = None\n    ind = None\n    for i in d:\n        k = -1\n        c = 0\n        for j in d[i]:\n            if k + 1 != j:\n                c += 1\n                k = j\n            else:\n                k = j\n        if k != n - 1:\n            c += 1\n        if res is None or c < res:\n            res = c\n    if res:\n        return res\n    else:\n        return 0\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\nmain()", "from itertools import groupby\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    w = [int(k) for k in input().split()]\n    w = groupby(w)\n    c = [k[0] for k in w]\n    z = len(c)\n    q = {j: 1 for j in c}\n    for j in range(z):\n        if j != 0 and j != z - 1:\n            q[c[j]] += 1\n    if z == 1:\n        print(0)\n    else:\n        print(min(list(q.values())))", "for some in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis_new = []\n    d = dict()\n    lis_new.append(lis[0])\n    d[lis_new[0]] = 2\n    k = lis[0]\n    for i in range(1, n):\n        if lis[i] == k:\n            continue\n        lis_new.append(lis[i])\n        k = lis[i]\n        if lis_new[-1] in d:\n            d[lis_new[-1]] += 1\n        else:\n            d[lis_new[-1]] = 2\n    d[lis_new[0]] -= 1\n    d[lis_new[-1]] -= 1\n    print(min(d.values()))", "def myDupli(arr):\n    i = 0\n    j = 0\n    n = len(arr)\n    tot_length = n\n    for j in range(n):\n        if j + 1 < n and arr[j] == arr[j + 1]:\n            tot_length -= 1\n        else:\n            arr[i] = arr[j]\n            i += 1\n    return arr[:tot_length]\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    array = list(map(int, sys.stdin.readline().strip().split()))\n    array = myDupli(array)\n    map_my = {}\n    n = len(array)\n    if n == 1:\n        return 0\n    first_occurence = [False] * len(array)\n    for i in range(len(array)):\n        if array[i] not in map_my:\n            map_my[array[i]] = 0\n            first_occurence[i] = True\n    map_my[array[0]] += 1\n    for i in range(1, len(array)):\n        add = 0\n        if first_occurence[i] is True:\n            if i != len(array) - 1:\n                add = 2\n            else:\n                add = 1\n        elif i != len(array) - 1:\n            add = 1\n        map_my[array[i]] += add\n    min_val = float('inf')\n    for i in map_my.keys():\n        min_val = min(map_my[i], min_val)\n    return min_val\nimport sys\nt = int(sys.stdin.readline().strip())\nfor test in range(t):\n    print(solve())", "for i in range(int(input())):\n    n = int(input())\n    data = input().split()\n    process = list(set(data))\n    counter = {j: 1 for j in process}\n    for j in range(n - 1):\n        if data[j] != data[j + 1]:\n            counter[data[j]] += 1\n    counter[data[n - 1]] += 1\n    counter[data[0]] -= 1\n    counter[data[n - 1]] -= 1\n    print(max(min(counter.values()), 0))", "for _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    p = l[0]\n    m = {}\n    for x in set(l):\n        m[x] = 0\n        if x != p:\n            m[x] += 1\n    for x in l:\n        if p != x:\n            m[p] += 1\n        p = x\n    print(min(m.values()))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0]\n    for i in a:\n        if b[-1] != i:\n            b.append(i)\n    b = b[1:]\n    d = dict()\n    if len(b) == 1:\n        print(0)\n    else:\n        for i in range(len(b)):\n            if b[i] in d:\n                d[b[i]] += 1\n            elif i == 0:\n                d[b[i]] = 0\n            else:\n                d[b[i]] = 1\n        x = n\n        for i in d:\n            if i != b[-1]:\n                d[i] += 1\n            x = min(x, d[i])\n        print(x)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    c = {}\n    for x in map(int, input().split()):\n        if not a or a[-1] != x:\n            a.append(x)\n            c[x] = c.get(x, 0) + 1\n    d = len(a)\n    for x in c:\n        d = min(d, c[x] - 1 + (a[0] != x) + (a[-1] != x))\n    print(d)", "from collections import defaultdict\n\ndef ans():\n    n = int(input())\n    a = list(map(int, input().split()))\n    num_list = []\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            num_list.append(a[i])\n    else:\n        num_list.append(a[-1])\n    if len(num_list) == 1:\n        print(0)\n    else:\n        c = defaultdict(lambda : 0)\n        for i in range(1, len(num_list) - 1):\n            c[num_list[i]] += 1\n        try:\n            mn = min((i for i in c.values()))\n        except ValueError:\n            pass\n        if num_list.count(num_list[0]) == 1 or (num_list.count(num_list[0]) == 2 and num_list[0] == num_list[-1]) or num_list.count(num_list[-1]) == 1:\n            print(1)\n        else:\n            print(mn + 1)\nfor t in range(int(input())):\n    ans()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    possibilities = {}\n    once = False\n    previous = None\n    for number in input().split(' '):\n        temp = int(number)\n        if temp != previous:\n            if temp in possibilities:\n                possibilities[temp] += 1\n            elif ~once:\n                possibilities[temp] = 1\n                once = ~once\n            else:\n                possibilities[temp] = 2\n        previous = temp\n    possibilities[temp] -= 1\n    print(possibilities[min(possibilities, key=possibilities.get)])", "for tt in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {arr[0]: 0, arr[-1]: -1}\n    prev = arr[0]\n    for i in arr:\n        if i in d:\n            if i != prev:\n                d[i] += 1\n                prev = i\n        else:\n            d[i] = 1\n            prev = i\n    print(min(d.values()) + 1)", "def smp(nums):\n    return [a for (a, b) in zip(nums, nums[1:] + [not nums[-1]]) if a != b]\nt = int(input())\nans = ''\nfor j in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    cnt = [1] * (n + 1)\n    x = smp(x)\n    n = len(x)\n    for i in range(n):\n        cnt[x[i]] += 1\n    inicial = x[0]\n    final = x[n - 1]\n    cnt[inicial] -= 1\n    cnt[final] -= 1\n    res = 2 * 10 ** 5\n    for i in range(n):\n        res = min(res, cnt[x[i]])\n    ans = ans + str(res) + '\\n'\nprint(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    le = l[0]\n    d = {}\n    d[le] = 1\n    for i in l[1:]:\n        if le != i:\n            d[i] = d.get(i, 0) + 1\n            le = i\n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    if len(d) == 1:\n        print(0)\n    else:\n        print(min(d.values()) + 1)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    n = ini()\n    a = inl()\n    count = dict()\n    prev = -1\n    for i in a:\n        if i not in count:\n            count[i] = 1\n        if prev != i:\n            count[i] += 1\n        prev = i\n    ans = n\n    for i in a:\n        ans = min(ans, count[i] - (1 if a[0] == i else 0) - (1 if a[-1] == i else 0))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    c = 0\n    for i in l:\n        if i == c:\n            continue\n        d[i] = d.get(i, 1) + 1\n        c = i\n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    print(min(d.values()))", "import math\nimport collections\n\ndef prob():\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    di = {}\n    prev = 0\n    for i in l:\n        if i == prev:\n            continue\n        di[i] = di.get(i, 1) + 1\n        prev = i\n    di[l[0]] -= 1\n    di[l[-1]] -= 1\n    print(min(di.values()))\nt = 1\nt = int(input())\nfor _ in range(0, t):\n    prob()", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    d = {}\n    for i in range(1, n):\n        if b[-1] != a[i]:\n            b.append(a[i])\n    m = len(b)\n    if m == 1:\n        return 0\n    for i in range(m):\n        d[b[i]] = d.get(b[i], 0) + (1 if i < m - 1 and i > 0 else 0)\n    return min(d.values()) + 1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "for pratyush in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0]\n    for i in a:\n        if b[-1] != i:\n            b.append(i)\n    b = b[1:]\n    d = dict()\n    if len(b) == 1:\n        print(0)\n    else:\n        for i in range(len(b)):\n            if b[i] in d:\n                d[b[i]] += 1\n            elif i == 0:\n                d[b[i]] = 0\n            else:\n                d[b[i]] = 1\n        x = n\n        for i in d:\n            if i != b[-1]:\n                d[i] += 1\n            x = min(x, d[i])\n        print(x)", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num_list = []\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            num_list.append(a[i])\n    else:\n        num_list.append(a[-1])\n    if len(num_list) == 1:\n        print(0)\n    else:\n        c = defaultdict(lambda : 0)\n        for i in range(1, len(num_list) - 1):\n            c[num_list[i]] += 1\n        try:\n            mn = min((i for i in c.values()))\n        except ValueError:\n            pass\n        if num_list.count(num_list[0]) == 1 or (num_list.count(num_list[0]) == 2 and num_list[0] == num_list[-1]) or num_list.count(num_list[-1]) == 1:\n            print(1)\n        else:\n            print(mn + 1)", "def solve(t):\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n    b = list(a)\n    b.sort()\n    if b[0] == b[len(b) - 1]:\n        print(0)\n        return\n    c = []\n    cnt = {}\n    for i in a:\n        cnt[i] = 0\n        c.append(i)\n        if len(c) != 1 and c[-1] == c[-2]:\n            c.pop()\n    for i in range(1, len(c) - 1):\n        cnt[c[i]] += 1\n    print(min(cnt.values()) + 1)\nt = int(input())\nfor i in range(t):\n    solve(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    D = {a: 0 for a in A}\n    last = A[0]\n    for a in A[1:]:\n        if a != last:\n            D[a] += 1\n        last = a\n    for k in D:\n        if k != last:\n            D[k] += 1\n    print(min(D.values() or [0]))", "for _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    a = A[0]\n    d = {}\n    d[a] = 1\n    for i in A[1:]:\n        if i != a:\n            d[i] = d.get(i, 0) + 1\n            a = i\n    d[A[0]] -= 1\n    d[A[-1]] -= 1\n    if len(d) == 0:\n        print('0')\n    else:\n        print(min(d.values()) + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    D = {a: 0 for a in A}\n    last = A[0]\n    for a in A[1:]:\n        if a != last:\n            D[a] += 1\n        last = a\n    for k in D:\n        if k != last:\n            D[k] += 1\n    print(min(D.values() or [0]))", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        d = {}\n        (same, ss) = (arr[0], True)\n        last = -1\n        for i in arr:\n            if same != i:\n                ss = False\n            if last != i:\n                last = i\n                if i in d:\n                    d[i] += 1\n                else:\n                    d[i] = 1\n        if ss:\n            print(0)\n        else:\n            d[arr[0]] -= 1\n            d[arr[n - 1]] -= 1\n            minf = min(d.values())\n            print(minf + 1)", "def counts(arr):\n    stat = []\n    n = len(arr)\n    curr = 0\n    for i in arr:\n        if stat == [] or i != curr:\n            stat.append(i)\n        curr = i\n    if len(stat) == 1:\n        return 0\n    uniq = {}\n    for i in stat:\n        uniq[i] = 1 if i not in uniq.keys() else uniq[i] + 1\n    for i in uniq.keys():\n        uniq[i] += 1\n    uniq[stat[0]] -= 1\n    uniq[stat[-1]] -= 1\n    min_is = uniq[stat[0]]\n    for i in uniq.keys():\n        if uniq[i] < min_is:\n            min_is = uniq[i]\n    return min_is\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().strip().split()))\n        ind = counts(arr)\n        print(ind)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    a = A[0]\n    d = {}\n    d[a] = 1\n    for i in A[1:]:\n        if i != a:\n            d[i] = d.get(i, 0) + 1\n            a = i\n    d[A[0]] -= 1\n    d[A[-1]] -= 1\n    if len(d) == 1:\n        print(0)\n    else:\n        print(min(d.values()) + 1)", "import sys\nread = sys.stdin.readline\nfor _ in range(int(read())):\n    n = int(read())\n    num = list(map(int, read().split()))\n    check = {}\n    before = -1\n    num_new = []\n    for i in range(n):\n        if num[i] != before:\n            num_new.append(num[i])\n            before = num[i]\n    n = len(num_new)\n    for i in range(n):\n        if num_new[i] not in check:\n            check[num_new[i]] = []\n        if i != 0 and i != n - 1:\n            check[num_new[i]].append(i)\n        before = num_new[i]\n    if len(check) == 1:\n        print(0)\n    else:\n        print(1 + min((len(arr) for arr in check.values())))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    u = {a: 1 for a in arr}\n    b = 0\n    for i in arr:\n        if i != b:\n            b = i\n            u[i] += 1\n    u[arr[0]] -= 1\n    u[arr[-1]] -= 1\n    print(min(u.values()))", "from collections import Counter\n\ndef solve(n, seq):\n    simplified = [seq[0]]\n    for i in range(1, n):\n        if seq[i - 1] != seq[i]:\n            simplified.append(seq[i])\n    if len(simplified) == 1:\n        return 0\n    score = {simplified[0]: 1, simplified[-1]: 1}\n    for i in range(1, len(simplified) - 1):\n        if simplified[i] not in score.keys():\n            score[simplified[i]] = 1\n        score[simplified[i]] += 1\n    return min(score.values())\nfor t in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    print(solve(n, seq))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cond = []\n    for x in arr:\n        if not cond or cond[-1] != x:\n            cond.append(x)\n    ct = {}\n    for x in set(cond):\n        ct[x] = 1\n    for x in cond[1:]:\n        ct[x] += 1\n    ct[cond[-1]] -= 1\n    print(min(ct.values()))", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ind = [-1] * (n + 1)\n    ints = [0] * (n + 1)\n    for i in range(n):\n        if i - ind[arr[i]] > 1:\n            ints[arr[i]] += 1\n        ind[arr[i]] = i\n    for i in range(1, n + 1):\n        if ind[i] != -1 and n - ind[i] > 1:\n            ints[i] += 1\n    ans = n + 1\n    for i in range(1, n + 1):\n        if ind[i] != -1:\n            ans = min(ans, ints[i])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = {}\n    for x in a:\n        if x in c:\n            c[x] += 1\n        else:\n            c[x] = 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            c[a[i]] -= 1\n    c[a[0]] -= 1\n    c[a[-1]] -= 1\n    print(min(c.values()) + 1)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(X) for X in input().split()]\n    b = []\n    b.append(a[0])\n    for j in range(1, n):\n        if a[j] != a[j - 1]:\n            b.append(a[j])\n    d = {}\n    for j in range(len(b)):\n        d[b[j]] = 0\n    for j in range(len(b)):\n        d[b[j]] += 1\n    d[b[len(b) - 1]] -= 1\n    d[b[0]] -= 1\n    print(min(d.values()) + 1)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(X) for X in input().split()]\n    b = []\n    b.append(a[0])\n    for j in range(1, n):\n        if a[j] != a[j - 1]:\n            b.append(a[j])\n    d = {}\n    for j in range(len(b)):\n        d[b[j]] = 0\n    for j in range(len(b)):\n        d[b[j]] += 1\n    d[b[len(b) - 1]] -= 1\n    d[b[0]] -= 1\n    print(min(d.values()) + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * n\n    dummy = arr[0]\n    for i in range(1, n):\n        if arr[i] == dummy:\n            continue\n        elif arr[i] != dummy:\n            dp[dummy - 1] += 1\n            if dp[arr[i] - 1] == 0:\n                dp[arr[i] - 1] += 1\n            dummy = arr[i]\n    a = max(dp)\n    b = min(dp)\n    test = n\n    if a == 0 and b == 0:\n        print(0)\n        continue\n    else:\n        for i in dp:\n            if i < test and i != 0:\n                test = i\n        print(test)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(X) for X in input().split()]\n    b = []\n    b.append(a[0])\n    for j in range(1, n):\n        if a[j] != a[j - 1]:\n            b.append(a[j])\n    d = {}\n    for j in range(len(b)):\n        d[b[j]] = 0\n    for j in range(len(b)):\n        d[b[j]] += 1\n    d[b[len(b) - 1]] -= 1\n    d[b[0]] -= 1\n    print(min(d.values()) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    (l, b) = (list(map(int, input().split())), [0] * (n + 1))\n    temp = l[0]\n    b[temp] = -1\n    for i in range(n - 1):\n        if l[i] != l[i + 1]:\n            tmp = l[i]\n            b[tmp] += 1\n    ans = 1000000000.0\n    for i in range(n):\n        tmp = l[i]\n        ans = min(b[tmp] + 1, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    (l, b) = (list(map(int, input().split())), [0] * (n + 1))\n    temp = l[0]\n    b[temp] = -1\n    for i in range(n - 1):\n        if l[i] != l[i + 1]:\n            tmp = l[i]\n            b[tmp] += 1\n    ans = 1000000000.0\n    for i in range(n):\n        tmp = l[i]\n        ans = min(b[tmp] + 1, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(0)\n    elif len(set(a)) == n:\n        print(1)\n    else:\n        b = [a[0]]\n        for i in range(1, n):\n            if a[i] != a[i - 1]:\n                b.append(a[i])\n        dic = {}\n        for x in b:\n            if x in dic:\n                dic[x] += 1\n            else:\n                dic[x] = 1\n        dic[b[len(b) - 1]] -= 1\n        dic[b[0]] -= 1\n        print(min(dic.values()) + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in range(n - 1):\n        if a[j] not in d:\n            if j == 0:\n                d[a[j]] = 0\n            else:\n                d[a[j]] = 1\n            if a[j] != a[j + 1]:\n                d[a[j]] += 1\n        elif a[j] != a[j + 1]:\n            d[a[j]] += 1\n    if d == {}:\n        print(0)\n    elif a[-1] not in d:\n        print(1)\n    else:\n        print(min(d.values()))", "for _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    D = {a: 0 for a in A}\n    last = A[0]\n    for a in A[1:]:\n        if a != last:\n            D[a] += 1\n        last = a\n    for k in D:\n        if k != last:\n            D[k] += 1\n    print(min(D.values() or [0]))"]