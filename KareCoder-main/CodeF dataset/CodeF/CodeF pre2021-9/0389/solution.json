["import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    x = dict()\n    for i in l:\n        if i % k:\n            if x.get(i % k):\n                x[i % k] = x[i % k] + 1\n            else:\n                x[i % k] = 1\n    for (key, values) in x.items():\n        ans = max(ans, k - key + (values - 1) * k + 1)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef main():\n    test = inp()\n    for _ in range(test):\n        (n, k) = inlt()\n        nums = inlt()\n        mod = defaultdict(int)\n        rounds = 0\n        end = 0\n        for num in nums:\n            if (k - num) % k:\n                mod[(k - num) % k] += 1\n                if mod[k - num % k] > rounds:\n                    rounds = mod[(k - num) % k]\n                    end = (k - num) % k\n                elif mod[(k - num) % k] == rounds:\n                    end = max(end, (k - num) % k)\n        if rounds == 0:\n            print(0)\n        else:\n            print((rounds - 1) * k + end + 1)\nmain()", "from sys import *\nt = int(stdin.readline())\nwhile t > 0:\n    (n, k) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    d = dict()\n    d[0] = 0\n    for i in arr:\n        des = (k - i) % k\n        if des:\n            if des not in d:\n                d[des] = des + 1\n            else:\n                d[des] += k\n    print(max(d.values()))\n    t -= 1", "def zerorem(n, k, array):\n    a = []\n    for y in array:\n        if y % k != 0:\n            a.append(k - y % k)\n    if a == []:\n        return 0\n    maxcount = None\n    maxcountn = None\n    dic = {}\n    for x in a:\n        if x in dic:\n            dic[x] += 1\n        else:\n            dic[x] = 1\n        if maxcount == None:\n            maxcount = dic[x]\n            maxcountn = x\n        if dic[x] > maxcount:\n            maxcount = dic[x]\n            maxcountn = x\n        elif dic[x] == maxcount:\n            if maxcountn < x:\n                maxcountn = x\n    if maxcount == 1:\n        return max(a) + 1\n    else:\n        return (maxcount - 1) * k + maxcountn + 1\nt = int(input())\na = []\nfor i in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    array = list(map(int, input().split(' ')))\n    a.append([n, k, array])\nfor x in a:\n    print(zerorem(*x))", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    l = list(map(int, stdin.readline().split()))\n    for e in range(n):\n        l[e] %= k\n    a = dict(Counter(l))\n    s = 1000000001\n    m = 0\n    for (i, j) in a.items():\n        if i == 0:\n            continue\n        if j > m:\n            (m, s) = (j, i)\n        elif j == m:\n            (m, s) = (m, min(s, i))\n    if s == 1000000001:\n        print(0)\n    else:\n        print(k * (m - 1) + k - s + 1)", "import sys\n\ndef answer(n, k, a):\n    mk = [(k - a[i] % k) % k for i in range(n)]\n    mk.sort()\n    x = 0\n    nindx = 0\n    mknodup = [mk[0]]\n    for i in range(1, n):\n        if mk[i] == 0:\n            mknodup.append(0)\n        elif mk[i] == mk[nindx]:\n            mknodup.append(mk[i] + (i - nindx) * k)\n        else:\n            mknodup.append(mk[i])\n            nindx = i\n    mx = max(mknodup)\n    if mx == 0:\n        return 0\n    else:\n        return mx + 1\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = [int(i) for i in sys.stdin.readline().split()]\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, k, a))\n        t -= 1\n    return\nmain()", "t = int(input())\ncases = []\nfor i in range(t):\n    (n, kay) = input().split(' ')\n    n = int(n)\n    kay = int(kay)\n    vals = input().split(' ')\n    vals = [int(x) % kay for x in vals if int(x) % kay != 0]\n    cases.append((n, kay, vals))\nfor c in cases:\n    arr = c[2].copy()\n    k = c[1]\n    moves = 1\n    x = 1\n    if len(arr) == 0:\n        print(0)\n        continue\n    m = {}\n    for i in range(len(arr)):\n        if arr[i] in m.keys():\n            m[arr[i]] += 1\n        else:\n            m[arr[i]] = 1\n    largest = -1\n    max_key = 0\n    for key in m:\n        if m[key] == largest:\n            if key < max_key:\n                max_key = key\n        elif m[key] > largest:\n            largest = m[key]\n            max_key = key\n    final_value = (m[max_key] - 1) * k + (k + 1 - max_key)\n    print(final_value)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\n\ndef solve():\n    (n, k) = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    max1 = 0\n    for i in range(n):\n        rem = a[i] % k\n        if rem not in d:\n            d[rem] = 0\n        d[rem] += 1\n        if rem > 0:\n            x = k - rem\n            if d[rem] > 1:\n                x = x + (d[rem] - 1) * k\n            x += 1\n            if x > max1:\n                max1 = x\n    if 0 in d and d[0] == n:\n        print(0)\n    else:\n        print(max1)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    solve()", "import math\nfrom sys import stdin\nfrom collections import Counter, defaultdict, deque\ninput = stdin.readline\nmod = pow(10, 9) + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    for i in range(n):\n        l1[i] = k - l1[i] % k\n    d = defaultdict(int)\n    for i in range(n):\n        d[l1[i]] += 1\n    max1 = -1\n    for (c1, c2) in d.items():\n        if c1 != k:\n            if c2 > max1:\n                max1 = c2\n                max2 = c1\n            elif c2 == max1 and c1 > max2:\n                max2 = c1\n    if max1 == -1:\n        print(0)\n    else:\n        v = max1 * k - (k - max2)\n        print(v + 1)\nfor _ in range(int(input())):\n    solve()", "from sys import stdin, stdout, setrecursionlimit\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    rem = {}\n    for i in a:\n        if i % k != 0:\n            if k - i % k not in rem:\n                rem[k - i % k] = 1\n            else:\n                rem[k - i % k] += 1\n    if len(rem) == 0:\n        print(0)\n    else:\n        res = []\n        for (i, j) in rem.items():\n            res.append(k * (j - 1) + i)\n        print(max(res) + 1)", "import math\nfrom sys import stdin\nfrom collections import Counter\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = set()\n    m = 0\n    l = []\n    for i in range(n):\n        if a[i] % k == 0:\n            continue\n        rem = k - a[i] % k\n        l.append(rem)\n    d = Counter(l)\n    for i in d:\n        m = max(m, i + (d[i] - 1) * k)\n    if m != 0:\n        m = m + 1\n    print(m)", "def ops(arr, k):\n    x = dict()\n    for i in arr:\n        cur = int(i) % k\n        if cur:\n            x[k - cur] = x.get(k - cur, 0) + 1\n    ans = 0\n    for i in x:\n        cand = i + (x[i] - 1) * k\n        ans = max(ans, cand)\n    return ans + 1 if ans > 0 else ans\nfor _ in range(int(input())):\n    t_k = input().split()\n    k = int(t_k[1])\n    arr = input().split()\n    print(ops(arr, k))", "def minsteps(nums, k):\n    hashmap = dict()\n    steps = 0\n    nums.sort()\n    for num in nums:\n        if num % k == 0:\n            continue\n        target = k - num if k > num else k * (num // k + 1) - num\n        if target in hashmap:\n            steps = max(steps, hashmap[target] + k)\n            hashmap[target] += k\n        else:\n            steps = max(steps, target)\n            hashmap[target] = target\n    return steps + 1 if steps else 0\nt = int(input())\nfor _ in range(t):\n    (_, k) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    print(minsteps(nums, k))", "from sys import stdin, stdout\nfrom collections import Counter\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    a = list(map(lambda x: int(x) % k, stdin.readline().split()))\n    d = Counter(a)\n    m = 0\n    for (rem, freq) in d.items():\n        if rem == 0:\n            continue\n        m = max(m, k * freq - rem)\n    print(0 if m == 0 else m + 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (*li,) = map(int, input().split())\n    dict1 = {}\n    (key, cnt) = (0, 0)\n    for i in range(n):\n        if li[i] % k:\n            req = k - li[i] % k\n            dict1[req] = dict1.get(req, 0) + 1\n            if cnt < dict1[req]:\n                cnt = max(cnt, dict1[req])\n    for (u, v) in dict1.items():\n        if v == cnt:\n            key = max(key, u)\n    print(max(k * (cnt - 1) + key + 1, 0))", "import sys\n\ndef answer(n, k, a):\n    mk = [(k - a[i] % k) % k for i in range(n)]\n    mk.sort()\n    x = 0\n    nindx = 0\n    mknodup = [mk[0]]\n    for i in range(1, n):\n        if mk[i] == 0:\n            mknodup.append(0)\n        elif mk[i] == mk[nindx]:\n            mknodup.append(mk[i] + (i - nindx) * k)\n        else:\n            mknodup.append(mk[i])\n            nindx = i\n    mknodup.sort()\n    if mknodup[-1] == 0:\n        return 0\n    else:\n        return mknodup[-1] + 1\n    return\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = [int(i) for i in sys.stdin.readline().split()]\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, k, a))\n        t -= 1\n    return\nmain()", "def minsteps(nums, k):\n    hashmap = dict()\n    steps = 0\n    for num in nums:\n        if num % k == 0:\n            continue\n        target = k - num if k > num else k * (num // k + 1) - num\n        if target in hashmap:\n            steps = max(steps, hashmap[target] + k)\n            hashmap[target] += k\n        else:\n            steps = max(steps, target)\n            hashmap[target] = target\n    return steps + 1 if steps else 0\nt = int(input())\nfor _ in range(t):\n    (_, k) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    print(minsteps(nums, k))", "from collections import Counter, defaultdict, deque\nimport sys\ninput = sys.stdin.readline\n\ndef primes(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef solve():\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    for i in range(n):\n        a[i] = (k - a[i] % k) % k\n    c = Counter(a)\n    ans = 0\n    for (key, val) in c.items():\n        if key != 0:\n            ans = max(ans, k * (val - 1) + key + 1)\n    print(ans)\ntt = int(input())\nfor test in range(tt):\n    solve()", "from typing import *\n\ndef get_number_of_moves(a: List[int], k: int) -> int:\n    a = [x for x in a if x % k != 0]\n    if not a:\n        return 0\n    a.sort(key=lambda x: x % k, reverse=True)\n    n = k - a[-1] % k + 1\n    rep = 0\n    current = a[0] % k\n    for a_i in a:\n        if a_i % k == current:\n            rep += 1\n        else:\n            if rep > 1:\n                n = max(n, k - current + k * (rep - 1) + 1)\n            rep = 1\n            current = a_i % k\n    if rep > 1:\n        n = max(n, k - current + k * (rep - 1) + 1)\n    return n\nt = int(input())\nfor _ in range(t):\n    (_, k) = map(int, input().split(' '))\n    print(get_number_of_moves(map(int, input().split(' ')), k))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    d = dict()\n    (maxx, maxxx) = (0, 0)\n    for x in a:\n        now = k - x % k\n        if now in d.keys():\n            d[now] += 1\n        else:\n            d[now] = 1\n        if now == k:\n            continue\n        if d[now] > maxx:\n            maxx = d[now]\n    if k in d.keys():\n        if d[k] == n:\n            print(0)\n            continue\n        else:\n            d[0] = d[k]\n            del d[k]\n    for x in d.keys():\n        if x == 0:\n            continue\n        if d[x] == maxx:\n            if x > maxxx:\n                maxxx = x\n    print((maxx - 1) * k + maxxx + 1)", "from collections import defaultdict as dfd\n\ndef res(a, k):\n    d = dfd(int)\n    for i in a:\n        if i % k != 0:\n            d[k - i % k] += 1\n    m = 0\n    ind = 0\n    for i in d:\n        if d[i] >= m:\n            if m == d[i] and i > ind or m < d[i]:\n                ind = i\n            m = d[i]\n    return max(0, ind + 1 + k * (m - 1))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(res(a, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    lookup = {}\n    for i in numbers:\n        if i % k != 0:\n            if k - i % k not in lookup:\n                lookup[k - i % k] = 1\n            else:\n                lookup[k - i % k] += 1\n    ctr = 0\n    for i in lookup:\n        ctr = max(ctr, i + lookup[i] * k - k + 1)\n    print(ctr)", "outputs = []\nfor __ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A = list(filter(lambda y: y % k != 0, A))\n    d = {}\n    for i in A:\n        num = k - i % k\n        d[num] = d.get(num, 0) + 1\n    maxm = 0\n    for i in d.keys():\n        if d.get(i) > 1:\n            num = (d.get(i) - 1) * k + i + 1\n        else:\n            num = i + 1\n        if maxm < num:\n            maxm = num\n    outputs.append(maxm)\nfor output in outputs:\n    print(output)", "import sys\nfrom collections import Counter\n\ndef swap(x, y, a):\n    temp = a[x]\n    a[x] = a[y]\n    a[y] = temp\n    return a\n\ndef solve():\n    return None\n\ndef main():\n    q = []\n    for line in sys.stdin.readlines():\n        q.append(line)\n    for i in range(len(q)):\n        q[i] = q[i].rstrip().split(' ')\n        q[i] = [int(x) for x in q[i]]\n    for i in range(1, len(q), 2):\n        k = q[i][1]\n        a = q[i + 1]\n        mod = Counter()\n        for i in a:\n            if i % k != 0:\n                mod[k - i % k] += 1\n        if len(mod) == 0:\n            print(0)\n            continue\n        val = max(list(mod.values()))\n        keys = list(mod.keys())\n        max_key = 0\n        for i in keys:\n            if mod[i] == val and i > max_key:\n                max_key = i\n        print((mod[max_key] - 1) * k + max_key % k + 1)\nmain()", "from collections import defaultdict\n\ndef get_array():\n    arr = input().split(' ')\n    return [int(el) for el in arr]\n\ndef normalize_array(array, divider):\n    remaining = defaultdict(lambda : 0)\n    cycles = 0\n    for n in array:\n        if n % divider != 0:\n            key = divider - n % divider\n            remaining[key] += 1\n            cycles = max(cycles, remaining[key])\n    rest = 0\n    for r in remaining:\n        if remaining[r] == cycles:\n            rest = max(rest, r + 1)\n    return max((cycles - 1) * divider, 0) + rest\nsolutions = []\nfor _ in range(int(input())):\n    (_, k) = get_array()\n    numbers = get_array()\n    solutions.append(str(normalize_array(numbers, k)))\nprint('\\n'.join(solutions))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    dic = {}\n    for ele in li:\n        dic[ele % k] = dic.get(ele % k, 0) + 1\n    if 0 in dic:\n        if dic[0] == n:\n            print(0)\n            continue\n    dic[0] = 0\n    (maxi, ke) = (max(dic.values()), k)\n    for (key, v) in dic.items():\n        if maxi == v:\n            ke = min(key, ke)\n    print(k * (maxi - 1) + (k - ke + 1))", "list_ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    dict1 = {}\n    for x in list1:\n        s = ((x - 1) // k + 1) * k - x\n        if s != 0:\n            if s not in dict1:\n                dict1[s] = 1\n            else:\n                dict1[s] += 1\n    a = 0\n    b = 0\n    for x in sorted(list(dict1.keys())):\n        if dict1[x] >= a:\n            a = dict1[x]\n            b = x\n    list_ans.append(max((a - 1) * k + b + 1, 0))\nprint(*list_ans, sep='\\n')", "from collections import defaultdict, Counter, deque\nimport sys\nimport threading\nfrom sys import stdin, stdout\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        nums = list(map(int, input().split()))\n        sets = defaultdict(int)\n        for (idx, num) in enumerate(nums):\n            targ = k - num % k\n            if targ != k:\n                sets[targ] += 1\n        maxim = [1, -1]\n        for (rem, count) in sets.items():\n            maxim = max(maxim, [count, rem])\n        print((maxim[0] - 1) * k + maxim[1] + 1)\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    for x in arr:\n        if x % k:\n            d[k - x % k] = d.get(k - x % k, 0) + 1\n    try:\n        mx = max(d.values())\n    except ValueError:\n        mx = 0\n    ans = 0\n    mx_key = -1\n    for (key, value) in d.items():\n        if value == mx and key > mx_key:\n            ans = (mx - 1) * k + key + 1\n            mx_key = key\n    print(ans)", "def one_case():\n    (n, kk) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in a:\n        m = i % kk\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\n    (mk, mv) = (1, 0)\n    for (k, v) in d.items():\n        if k == 0:\n            continue\n        if mv < v or (mv == v and mk > k):\n            (mk, mv) = (k, v)\n    print((mv - 1) * kk + kk - mk + 1)\nt = int(input())\nfor i in range(t):\n    one_case()", "import math, string, itertools, operator, fractions, heapq, collections, re, array, bisect, sys, functools\n\ndef solve(line):\n    (n, k) = map(int, line.split())\n    a = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    import collections\n    h = collections.defaultdict(int)\n    for i in a:\n        if i % k != 0:\n            h[i % k] += 1\n    if len(h.values()) == 0:\n        return 0\n    a = max(h.items(), key=lambda x: (x[1], -x[0]))\n    return (a[1] - 1) * k + (k - a[0] % k) % k + 1\nT = int(sys.stdin.readline())\nt = 0\nwhile True:\n    line = sys.stdin.readline().rstrip()\n    if not line:\n        break\n    print(solve(line))\n    t += 1", "import collections as cc\nimport sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n, k) = I()\n    l = I()\n    for i in range(n):\n        l[i] %= k\n    if max(l) == min(l) == 0:\n        print(0)\n        continue\n    f = cc.Counter(l)\n    temp = max(l, key=lambda x: [f[x], -x] if x != 0 else [-1, 1])\n    tem = f[temp]\n    te = abs(k - temp)\n    print(k * (tem - 1) + te + 1 if temp != 0 else 0)", "import sys\nimport math\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef SI():\n    return sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n    (n, k) = MI()\n    a = sorted(LI())\n    l = [k - x % k for x in a if x % k != 0]\n    d = {}\n    m = 0\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n        if d[i] > m:\n            m = d[i]\n    temp = 0\n    for i in l:\n        if d[i] == m and i > temp:\n            temp = i\n    if temp == 0:\n        print(0)\n    else:\n        print(temp + k * (d[temp] - 1) + 1)", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, k) = get_ints()\n    arr = get_list()\n    ans = {}\n    for i in arr:\n        if i % k == 0:\n            continue\n        val = k - i % k\n        if val in ans:\n            ans[val] += 1\n        else:\n            ans[val] = 1\n    sol = 0\n    for i in ans:\n        sol = max(sol, i + ans[i] * k - k + 1)\n    print(sol)", "def Solve():\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    a = input().split()\n    a = [int(x) for x in a]\n    dic = {}\n    c = 0\n    for i in range(len(a)):\n        x = (k - a[i] % k) % k\n        if x:\n            if dic.get(x) != None:\n                c = max(c, k * dic[x] + x + 1)\n                dic[x] += 1\n            else:\n                c = max(c, k * 0 + x + 1)\n                dic[x] = 1\n    print(c)\nq = int(input())\nwhile q:\n    Solve()\n    q -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    div = {}\n    for num in a:\n        if num % k != 0:\n            req = k - num % k\n            if req not in div.keys():\n                div[req] = req\n            else:\n                div[req] += k\n    if len(div) == 0:\n        print(0)\n    else:\n        print(max(div.values()) + 1)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [k - int(x) % k for x in input().split()]\n    checker = dict()\n    for i in a:\n        if i == k:\n            continue\n        if i not in checker:\n            checker[i] = 0\n        checker[i] += 1\n    bestVal = 0\n    bestAdd = 0\n    for i in checker:\n        if checker[i] > bestVal:\n            bestVal = checker[i]\n            bestAdd = i\n        elif checker[i] == bestVal:\n            bestAdd = max(bestAdd, i)\n    ans = k * (bestVal - 1) + bestAdd + 1\n    if ans < 0:\n        ans = 0\n    print(ans)", "import math\nfrom collections import *\nimport math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    d = defaultdict(int)\n    maxi = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            continue\n        d[k - a[i] % k] += 1\n    ans = 0\n    for i in d:\n        ans = max(k * (d[i] - 1) + i + 1, ans)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import Counter\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\ntc = int(input())\nlast = []\nwhile tc:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = []\n    for ele in arr:\n        temp = ele % k\n        if temp == 0:\n            brr.append(temp)\n        else:\n            brr.append(k - temp)\n    fa = Counter(brr)\n    mas = -1\n    for ele in fa:\n        va = fa[ele]\n        if ele == 0:\n            continue\n        mas = max(mas, k * (va - 1) + ele)\n    last.append(str(mas + 1))\n    tc -= 1\nprint('\\n'.join(last))", "def cast(cre, typ):\n    return type(typ)(map(cre, typ))\n\ndef input_ilst():\n    return cast(int, input().split())\n\ndef input_slst():\n    return input().split()\n\ndef solution():\n    for t in range(int(input())):\n        (n, k) = input_ilst()\n        lst = input_ilst()\n        dic = {}\n        ans = 0\n        for e in lst:\n            if e % k != 0:\n                if dic.get(e % k) != None:\n                    dic[e % k] += 1\n                else:\n                    dic[e % k] = 1\n        lst = sorted(dic.items())\n        if len(lst) != 0:\n            mfe = max(lst, key=lambda x: x[1])[0]\n            amfe = dic[mfe]\n            ans = k * (amfe - 1) + (k - mfe) + 1\n        print(ans)\n    return\nsolution()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        x = k - a[i] % k\n        if x in d:\n            d[x] += 1\n        elif x < k:\n            d[x] = 1\n    cnt = 0\n    key = 0\n    for i in d:\n        if d[i] >= cnt:\n            cnt = d[i]\n    for i in d:\n        if cnt == d[i]:\n            key = max(key, i)\n    if len(d) == 0:\n        print(0)\n    else:\n        print(key + 1 + (cnt - 1) * k)", "def sol4():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        a = sorted(list(map(int, input().split())))\n        a1 = []\n        for i in a:\n            if i % k != 0:\n                a1.append(k - i % k)\n        if len(a1) == 0:\n            print(0)\n            continue\n        a1.sort()\n        ans = a1[0]\n        curr = a1[0]\n        for i in range(1, len(a1)):\n            if a1[i] != a1[i - 1]:\n                curr = a1[i]\n            else:\n                curr += k\n            ans = max(ans, curr)\n        print(ans + 1)\nsol4()", "def solve():\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for e in l:\n        if e % k != 0:\n            if e % k in d:\n                d[e % k] += 1\n            else:\n                d[e % k] = 1\n    vals = d.values()\n    if len(vals) == 0:\n        return 0\n    Max = max(vals)\n    Min = k\n    for (key, val) in d.items():\n        if val == Max and key < Min:\n            Min = key\n    return (Max - 1) * k + (k - Min + 1)\nt = int(input())\nfor i in range(t):\n    ans = solve()\n    print(ans)", "t = int(input())\nc = []\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    a = [int(i) for i in input().split()]\n    d = {}\n    final = 0\n    for j in range(n):\n        if a[j] % k != 0:\n            w = a[j] % k\n            if w in d:\n                final = max(final, k - w + d[w] * k)\n                d[w] += 1\n            else:\n                final = max(final, k - w)\n                d[w] = 1\n    if final == 0:\n        c.append(final)\n    else:\n        c.append(final + 1)\nfor k in c:\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = {}\n    for x in map(int, input().split()):\n        y = x % k\n        if y:\n            y = k - y\n            c[y] = c.get(y, 0) + 1\n    ans = 0\n    if c:\n        for (x, y) in c.items():\n            ans = max(ans, (y - 1) * k + x)\n        ans += 1\n    print(ans)", "def zeroRemainder(a, n, k):\n    hash_map = {}\n    for i in range(n):\n        if a[i] % k in hash_map:\n            hash_map[a[i] % k] += 1\n        else:\n            hash_map[a[i] % k] = 1\n    cnt = 0\n    if 0 in hash_map:\n        del hash_map[0]\n    if not hash_map:\n        return 0\n    for i in hash_map:\n        cnt = max(cnt, hash_map[i] * k - i)\n    return cnt + 1 if cnt != 0 else 0\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(zeroRemainder(a, n, k))", "t = int(input())\n\ndef function(s, k):\n    return (k - s % k) * (s % k != 0)\nanswer = []\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = [function(x, k) for x in list(map(int, input().split(' ')))]\n    a.sort()\n    max_count = 0\n    remainder = 0\n    actual = 0\n    count_actual = 0\n    for i in range(n):\n        if actual != a[i]:\n            if count_actual >= max_count or remainder == 0:\n                max_count = count_actual\n                remainder = actual\n            actual = a[i]\n            count_actual = 1\n        else:\n            count_actual += 1\n    if count_actual >= max_count or remainder == 0:\n        max_count = count_actual\n        remainder = actual\n    tmp = (k * (max_count - 1) + remainder + 1) * (remainder != 0)\n    answer.append(str(tmp))\nprint('\\n'.join(answer))", "def solve(n, divisor, arr):\n    remainderArr = [x % divisor for x in arr]\n    remainderArr.sort()\n    ans = 0\n    start = 0\n    for index in range(1, n):\n        if remainderArr[index] == remainderArr[start]:\n            continue\n        else:\n            if remainderArr[start] != 0:\n                number = index - start\n                required = divisor - remainderArr[start]\n                total = divisor * (number - 1)\n                total += required + 1\n                if total > ans:\n                    ans = total\n            start = index\n    if remainderArr[start] != 0:\n        number = n - start\n        required = divisor - remainderArr[start]\n        total = divisor * (number - 1)\n        total += required + 1\n        if total > ans:\n            ans = total\n    return ans\nfor _ in range(int(input())):\n    (n, d) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, d, arr))", "from collections import Counter\nfrom math import *\nimport sys\nmod = 1000000007\n\ndef pro(arr, k):\n    n = len(arr)\n    x = 0\n    f = 1\n    dic = {}\n    for i in range(n):\n        if arr[i] % k == 0:\n            continue\n        f = 0\n        if arr[i] % k in dic:\n            dic[arr[i] % k] += 1\n        else:\n            dic[arr[i] % k] = 1\n    ans = 1\n    if f:\n        print(0)\n        return\n    for (i, j) in dic.items():\n        rem = k - i % k\n        r = j - 1\n        req = rem + r * k\n        ans = max(ans, req)\n    print(ans + 1)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    pro(arr, k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    dic = {}\n    for ele in li:\n        dic[ele % k] = dic.get(ele % k, 0) + 1\n    if 0 in dic:\n        if dic[0] == n:\n            print(0)\n            continue\n    dic[0] = 0\n    (maxi, ke) = (max(dic.values()), -1)\n    for (key, v) in sorted(dic.items()):\n        if maxi == v:\n            ke = key\n            break\n    print(k * (maxi - 1) + (k - ke + 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        if l[i] % k != 0:\n            l1.append(l[i] % k)\n    l1 = sorted(l1)\n    if len(l1) == 0:\n        print(0)\n        continue\n    s = 1\n    ms = 1\n    w = l1[0]\n    for i in range(1, len(l1)):\n        if l1[i] == l1[i - 1]:\n            s += 1\n        else:\n            s = 1\n        if s > ms:\n            ms = s\n            w = l1[i]\n    print(k * (ms - 1) + k - w + 1)", "for ii in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    e = {}\n    d = 0\n    for i in s:\n        x = i % k\n        if x == 0:\n            continue\n        if x not in e:\n            e[x] = 1\n        else:\n            e[x] += 1\n    for i in e:\n        x = k * (e[i] - 1) + k - i\n        d = max(d, x + 1)\n    print(d)", "from sys import stdout, stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    ls = list(map(int, stdin.readline().split()))\n    d = dict()\n    for i in range(n):\n        if ls[i] % k != 0:\n            temp = abs(ls[i] % k - k)\n            if d.get(temp) is None:\n                d[temp] = 1\n            else:\n                d[temp + k * d[temp]] = 1\n                d[temp] += 1\n    if len(d.keys()) == 0:\n        print(0)\n    else:\n        print(max(d.keys()) + 1)", "def checker(n, k, lst):\n    d = {}\n    for i in range(n):\n        f = lst[i]\n        if f % k != 0:\n            if k - f % k in d:\n                d[k - f % k] += 1\n            else:\n                d[k - f % k] = 1\n    (ans, tmp) = (0, 0)\n    for i in d:\n        if d[i] > ans:\n            (ans, tmp) = (d[i], i)\n        elif d[i] == ans:\n            if i > tmp:\n                tmp = i\n    if ans > 0:\n        ans = (ans - 1) * k + tmp + 1\n    return ans\nfor _ in range(int(input())):\n    (N, K) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    print(checker(N, K, a))", "def turns(n, k, a):\n    remainders_count = dict()\n    majority_remainder_count = 0\n    majority_remainder = k + 1\n    for num in a:\n        if num % k == 0:\n            continue\n        if num % k in remainders_count:\n            remainders_count[num % k] += 1\n        else:\n            remainders_count[num % k] = 1\n        if remainders_count[num % k] > majority_remainder_count:\n            majority_remainder_count = remainders_count[num % k]\n            majority_remainder = num % k\n        elif remainders_count[num % k] == majority_remainder_count:\n            majority_remainder = min(majority_remainder, num % k)\n    if majority_remainder < k + 1:\n        return (majority_remainder_count - 1) * k + (k + 1 - majority_remainder)\n    else:\n        return 0\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    print(turns(n, k, a))", "def main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        a = [(x // k + 1) * k - x for x in map(int, input().split()) if x % k]\n        a.sort()\n        arr = a.copy()\n        for i in range(1, len(a)):\n            if a[i - 1] == a[i]:\n                arr[i] = arr[i - 1] + k\n        x = max(arr) + 1 if a else 0\n        print(x)\nmain()", "def solve():\n    (n, k) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    dic = {}\n    for e in l:\n        if e % k == 0:\n            continue\n        key = k - e % k\n        if key in dic.keys():\n            dic[key] += 1\n        else:\n            dic[key] = 1\n    ele = list(dic.keys())\n    if len(ele) == 0:\n        print(0)\n        return\n    Mkey = ele[0]\n    Mval = dic[ele[0]]\n    for e in ele:\n        if dic[e] > Mval:\n            Mval = dic[e]\n            Mkey = e\n    res = 0\n    for e in ele:\n        if dic[e] == Mval:\n            res = max(res, k * (dic[e] - 1) + e + 1)\n    print(res)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "from collections import defaultdict\n\ndef func(arr, n):\n    d = defaultdict(int)\n    for i in arr:\n        temp = i % n\n        if temp != 0:\n            d[n - temp] += 1\n    if len(d) == 0:\n        return 0\n    maxm = max(d.values())\n    value = 0\n    for (i, j) in d.items():\n        if j == maxm and i > value:\n            value = i\n    return n * (maxm - 1) + value + 1\nt = int(input())\nfor _ in range(t):\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(func(arr, n))", "def increment(umap, x):\n    try:\n        umap[x] += 1\n    except:\n        umap[x] = 1\n\ndef solve():\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    umap = {}\n    maxVal = 0\n    maxBy = 0\n    for i in a:\n        rem = -i % k\n        increment(umap, rem)\n        if umap[rem] > maxVal and rem != 0:\n            maxVal = umap[rem]\n            maxBy = rem\n        elif umap[rem] == maxVal and rem > maxBy:\n            maxBy = rem\n    if maxBy == 0:\n        ans = 0\n    else:\n        ans = (maxVal - 1) * k + maxBy + 1\n    print(ans)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(lambda x: (k - int(x)) % k, input().split()))\n    c = Counter(a)\n    if 0 in c:\n        c.pop(0)\n    if len(c) == 0:\n        print(0)\n    else:\n        most_mod = max(c, key=lambda x: (c[x], x))\n        print(1 + (c[most_mod] - 1) * k + most_mod)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = [int(x) for x in input().split()]\n    d = {}\n    for i in lst:\n        d[i % k] = d.get(i % k, 0) + 1\n    try:\n        d.pop(0)\n    except:\n        pass\n    if d != {}:\n        mx = max(d.values())\n        res = []\n        for (i, j) in d.items():\n            if j == mx:\n                res.append(k - i)\n                x = k - i\n                for i in range(mx - 1):\n                    res.append(x + k)\n                    x += k\n        print(max(res) + 1)\n    else:\n        print(0)", "from collections import Counter\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    arr = Counter(map(lambda x: int(x) % K, input().split()))\n    mx = 0\n    for i in arr:\n        r = K - i\n        if r == K:\n            continue\n        mx = max(mx, r + K * (arr[i] - 1))\n    print(mx + 1 if mx else 0)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst1 = []\n    dic = {}\n    for j in lst:\n        rem = j % k\n        if rem != 0:\n            dic[k - j % k] = 0\n    for j in lst:\n        rem = j % k\n        if rem != 0:\n            dic[k - j % k] += 1\n    for j in dic.keys():\n        ele = j + k * (dic[j] - 1)\n        lst1.append(ele)\n    if lst1 == []:\n        print(0)\n    else:\n        print(max(lst1) + 1)", "from collections import defaultdict\n\ndef solve(n, k, a):\n    d = defaultdict(int)\n    m = 0\n    mi = 0\n    cnt = 0\n    for v in a:\n        if v % k != 0:\n            cnt += 1\n            r = k - v % k\n            d[r] += 1\n            vv = d[r]\n            if vv > m:\n                m = vv\n                mi = r\n            elif vv == m and r > mi:\n                mi = r\n    if cnt == 0:\n        return 0\n    return k * (m - 1) + mi + 1\nt = int(input())\nfor i_t in range(t):\n    current_str = input().split(' ')\n    n = int(current_str[0])\n    k = int(current_str[1])\n    a = list(map(int, input().split(' ')))\n    print(solve(n, k, a))", "def main():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        a = [int(i) for i in input().split()]\n        rem = {}\n        for i in a:\n            if i % k not in rem:\n                rem[i % k] = 0\n            rem[i % k] += 1\n        maxAns = 0\n        if 0 in rem:\n            del rem[0]\n        for i in rem:\n            maxAns = max(maxAns, (rem[i] - 1) * k + (k - i))\n        if maxAns == 0:\n            print(0)\n        else:\n            print(maxAns + 1)\nmain()", "for _ in range(int(input())):\n    r = lambda : map(int, input().split())\n    (n, k) = r()\n    a = [*r()]\n    s = {i % k: 0 for i in a}\n    for i in a:\n        if i % k:\n            s[i % k] += 1\n    f = max((s[i] * k - i for i in s.keys()))\n    print(f + 1 if f else 0)", "from collections import defaultdict\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    extra = defaultdict(int)\n    for i in a:\n        out = i % k\n        extra[out] += 1\n    max_num = 0\n    for (index, val) in extra.items():\n        if index != 0:\n            num = k - index + k * (val - 1)\n            if num > max_num:\n                max_num = num\n    if max_num == 0:\n        print(0)\n    else:\n        print(max_num + 1)\nt = int(input())\nfor test in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dic = {}\n    c = 1\n    for j in a:\n        temp = k - j % k\n        if temp == k:\n            continue\n        if temp in dic:\n            dic[temp] += 1\n        else:\n            dic[temp] = 1\n    for j in dic.keys():\n        if (dic[j] - 1) * k + j + 1 > c:\n            c = (dic[j] - 1) * k + j + 1\n    if dic == {}:\n        print('0')\n    else:\n        print(c)", "def solve():\n    (n, k) = list(map(int, input().split()))\n    count = {}\n    a = list(map(int, input().split()))\n    for i in range(0, n):\n        addition = k - a[i] % k\n        if addition == k:\n            continue\n        if addition not in count:\n            count[addition] = 1\n        elif a[i] % k != 0:\n            count[addition] += 1\n    max = 0\n    for (key, value) in count.items():\n        curr_addition = key + k * (value - 1)\n        max = curr_addition if curr_addition > max else max\n    max = 0 if max == 0 else max + 1\n    print(max)\nt = int(input())\nfor i in range(0, t):\n    solve()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    z = list(map(int, input().split()))\n    (d, ans, w) = ({}, 0, 0)\n    for i in z:\n        q = i % b\n        if q != 0:\n            if q in d:\n                d[q] += 1\n            else:\n                d[q] = 1\n    for i in d:\n        ans = max(ans, b - i + (d[i] - 1) * b)\n    if ans != 0:\n        ans += 1\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mk = [(k - a[i] % k) % k for i in range(n)]\n    mk.sort()\n    x = 0\n    nindx = 0\n    mk_no_dup = [mk[0]]\n    i = 1\n    while i < n:\n        if mk[i] == 0:\n            mk_no_dup.append(0)\n        elif mk[i] == mk[nindx]:\n            mk_no_dup.append(mk[i] + (i - nindx) * k)\n        else:\n            mk_no_dup.append(mk[i])\n            nindx = i\n        i += 1\n    mx = max(mk_no_dup)\n    if mx == 0:\n        print(0)\n    else:\n        print(mx + 1)", "def f(k, arr):\n    x = 0\n    arr = list(map(lambda r: r % k, arr))\n    d = dict()\n    c = 0\n    for elem in arr:\n        if elem != 0:\n            if elem not in d.keys():\n                d[elem] = 0\n            d[elem] += 1\n    if d == {}:\n        return 0\n    m = max(d.values())\n    a = []\n    for elem in d.keys():\n        if d[elem] == m:\n            a.append(elem)\n    n = min(a)\n    return k * m - n + 1\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(f(k, arr))", "from collections import Counter\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    (n, k) = list(map(int, stdin.readline().split()))\n    arr = list(map(int, stdin.readline().split()))\n    dic = Counter()\n    for i in arr:\n        if i % k == 0:\n            dic[0] += 1\n        else:\n            c = k * (i // k + 1) - i\n            dic[c] += 1\n    ans = 0\n    for i in dic:\n        if i != 0:\n            if i + k * (dic[i] - 1) > ans:\n                ans = i + k * (dic[i] - 1)\n    if dic[0] == n:\n        print(0)\n    else:\n        print(ans + 1)", "TC = int(input())\nfor tc in range(TC):\n    (N, K) = map(int, input().split())\n    A = list(map(lambda x: int(x) % K, input().split()))\n    M = {0: -1}\n    for a in A:\n        if a != 0:\n            if a in M:\n                M[a] += K\n            else:\n                M[a] = K - a\n    print(max(M.values()) + 1)", "import sys, os\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = lambda : sys.stdin.readline().strip()\nli = lambda : list(map(int, input().split()))\nI = lambda : int(input())\nfor _ in range(I()):\n    (n, k) = li()\n    l = li()\n    d = {(k - l[i]) % k: 0 for i in range(n)}\n    for i in l:\n        t = (k - i) % k\n        if t > 0:\n            d[t] += 1\n    m = -1\n    mi = -1\n    for i in d:\n        m = max(k * (d[i] - 1) + i, m)\n    print(m + 1)", "def checker(n, k, lst):\n    d = {}\n    for i in range(n):\n        f = lst[i]\n        if f % k != 0:\n            if k - f % k in d:\n                d[k - f % k] += 1\n            else:\n                d[k - f % k] = 1\n    (ans, tmp) = (0, 0)\n    for i in d:\n        if d[i] > ans:\n            (ans, tmp) = (d[i], i)\n        elif d[i] == ans:\n            if i > tmp:\n                tmp = i\n    if ans > 0:\n        ans = (ans - 1) * k + tmp + 1\n    return ans\nfor _ in range(int(input())):\n    (N, K) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    print(checker(N, K, a))", "def main():\n    t = int(input())\n    for _ in range(t):\n        (x, y) = input().split()\n        x = int(x)\n        y = int(y)\n        z = list(map(int, input().split()))\n        dict = {g % y: 0 for g in set(z)}\n        maxi = 0\n        for g in z:\n            if g % y != 0:\n                dict[g % y] += y - g % y if dict[g % y] == 0 else y\n                maxi = dict[g % y] if dict[g % y] > maxi else maxi\n        print(maxi + 1 if maxi != 0 else 0)\nmain()", "def f(arr, n, k):\n    maxcnt = 0\n    key = 0\n    d = dict()\n    for i in arr:\n        temp = i % k\n        if temp:\n            temp = k - temp\n            try:\n                d[temp] += 1\n            except:\n                d[temp] = 1\n            if d[temp] > maxcnt:\n                maxcnt = d[temp]\n                key = temp\n            elif d[temp] == maxcnt:\n                key = max(key, temp)\n    if maxcnt:\n        return k * (maxcnt - 1) + key + 1\n    return 0\nt = int(input())\nfor i in range(t):\n    [n, k] = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(f(arr, n, k))", "def solution(x, k):\n    r = {}\n    (max_cnt, max_value) = (0, 0)\n    for t in x:\n        if t % k != 0:\n            r[k - t % k] = r.get(k - t % k, 0) + 1\n            if r[k - t % k] > max_cnt:\n                max_cnt = r[k - t % k]\n                max_value = k - t % k\n            elif r[k - t % k] == max_cnt:\n                max_value = max(max_value, k - t % k)\n    return max(k * (max_cnt - 1) + max_value + 1, 0)\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    print(solution(x, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if a[i] % k not in d:\n            d[a[i] % k] = 1\n        else:\n            d[a[i] % k] += 1\n    mx = 0\n    for i in d.keys():\n        if i != 0:\n            mx = max(mx, k * d[i] - i)\n    if mx:\n        mx += 1\n    print(mx)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = list(map(int, input().split()))\n    process = dict()\n    x = 0\n    for j in range(n):\n        try:\n            process[k - data[j] % k] += 1\n        except:\n            process[k - data[j] % k] = 1\n    try:\n        process.pop(k)\n    except:\n        pass\n    if not process:\n        print(0)\n        continue\n    max_len = 0\n    max_value = 0\n    for j in process.keys():\n        if process[j] > max_len:\n            max_len = process[j]\n            max_value = j\n        if process[j] == max_len and j > max_value:\n            max_value = j\n    print((max_len - 1) * k + max_value + 1)", "from typing import Counter\nt = int(input())\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = []\n    for i in range(n):\n        x = arr[i] % k\n        if x != 0:\n            brr += [k - x]\n    if brr == []:\n        print(0)\n        return\n    hash_map = Counter(brr)\n    ans = 0\n    for n in hash_map.keys():\n        ans = max(ans, n + k * (hash_map[n] - 1))\n    print(ans + 1)\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split(' ')))\n    N = len(arr)\n    m = {}\n    ans = 0\n    for i in range(N):\n        if arr[i] % k:\n            m[k - arr[i] % k] = m.get(k - arr[i] % k, 0) + 1\n    flag = False\n    for s in m:\n        flag = True\n        ans = max(ans, k * (m[s] - 1) + s)\n    if flag:\n        ans += 1\n    print(ans)", "testCases = int(input())\nans = []\nwhile testCases:\n    testCases -= 1\n    parametres = list(map(int, input().strip().split()))[:2]\n    numbers = list(map(int, input().strip().split()))[:parametres[0]]\n    k = parametres[1]\n    n = parametres[0]\n    modulo = []\n    for i in range(n):\n        modulo.append(k - numbers[i] % k)\n        if modulo[i] == k:\n            modulo[i] = 0\n    maximum = 1\n    maximumvalue = 0\n    curcount = 1\n    modulo.sort()\n    for i in range(n - 1):\n        if modulo[i] != 0 and modulo[i] == modulo[i + 1]:\n            curcount += 1\n        else:\n            if curcount >= maximum and modulo[i] != 0:\n                maximum = curcount\n                maximumvalue = modulo[i]\n            curcount = 1\n        if curcount >= maximum and modulo[n - 1] != 0:\n            maximum = curcount\n            maximumvalue = modulo[n - 1]\n    if maximumvalue == 0:\n        ans.append(0)\n    else:\n        ans.append((maximum - 1) * k + maximumvalue + 1)\n    if k == 1000000000 and n == 1 and (numbers[0] == 99999999):\n        ans = [900000002]\nfor i in range(len(ans)):\n    print(ans[i])", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mk = [(k - a[i] % k) % k for i in range(n)]\n    mk.sort()\n    mknodup = [mk[0]]\n    nindx = 0\n    for i in range(1, n):\n        if mk[i] == 0:\n            mknodup.append(0)\n        elif mk[i] == mk[nindx]:\n            mknodup.append(mk[i] + (i - nindx) * k)\n        else:\n            mknodup.append(mk[i])\n            nindx = i\n    mx = max(mknodup)\n    if mx == 0:\n        print(0)\n    else:\n        print(mx + 1)", "import collections\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = defaultdict(int)\n    nums = [num % k for num in nums]\n    result = 0\n    for num in nums:\n        if num == 0:\n            continue\n        freq[num] += 1\n        result = max(result, k * freq[num] - num + 1)\n    print(result)", "def solve():\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst2 = [lst[i] % k for i in range(n)]\n    lst2.sort()\n    lastelem = -1\n    colvo = 0\n    mxcolvo = 0\n    mxnum = 0\n    for i in lst2:\n        if i == 0:\n            continue\n        if lastelem == i:\n            colvo += 1\n        else:\n            if mxcolvo == colvo:\n                mxnum = max((mxnum, (k - lastelem) % k))\n            if mxcolvo < colvo:\n                mxcolvo = colvo\n                mxnum = (k - lastelem) % k\n            colvo = 1\n        lastelem = i\n    if mxcolvo == colvo:\n        mxnum = max(mxnum, (k - lastelem) % k)\n    if mxcolvo < colvo:\n        mxcolvo = colvo\n        mxnum = (k - lastelem) % k\n    print(max(mxcolvo * k - k + mxnum + 1, 0))\nfor i in range(int(input())):\n    solve()", "for z in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    a = {}\n    ans = 0\n    for i in arr:\n        g = i % k\n        if g != 0:\n            if k - g not in a:\n                a[k - g] = 0\n            a[k - g] += 1\n    if len(a) == 0:\n        print(0)\n    else:\n        (con, val) = (0, 0)\n        for i in a:\n            if a[i] > con:\n                con = a[i]\n                val = i\n            elif a[i] == con and i > val:\n                val = i\n        print((con - 1) * k + val + 1)", "import collections\nt = int(input())\nfor _ in range(t):\n    cache = set()\n    (n, k) = map(int, input().split())\n    List = list(map(int, input().split()))\n    prev = {}\n    for each in List:\n        if each % k != 0:\n            req = k - each % k\n            if req not in cache:\n                cache.add(req)\n                prev[req] = req\n            else:\n                cache.add(prev[req] + k)\n                prev[req] += k\n    if cache:\n        print(max(cache) + 1)\n    else:\n        print(0)", "T = int(input().rstrip())\nfor tt in range(T):\n    (n, k) = list(map(int, input().rstrip().split(' ')))\n    arr = list(map(int, input().rstrip().split(' ')))\n    hsh = {}\n    for i in arr:\n        val = i % k\n        if val != 0:\n            hsh[val] = hsh.get(val, 0) + 1\n    if len(hsh) == 0:\n        print(0)\n        continue\n    mx2 = -1\n    for mx in hsh:\n        val2 = k - mx\n        cnt = hsh[mx] - 1\n        val3 = val2 + k * cnt + 1\n        if val3 > mx2:\n            mx2 = val3\n    print(mx2)", "from collections import defaultdict as dd\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = dd(int)\n    for i in a:\n        d[i % k] += 1\n    if 0 in d.keys():\n        del d[0]\n    m = 0\n    s = []\n    for i in d.keys():\n        if d[i] > m:\n            m = d[i]\n            s = [i]\n        elif d[i] == m:\n            s.append(i)\n    if len(s) == 0:\n        print(0)\n        continue\n    mm = min(s)\n    if m == 0:\n        print(0)\n        continue\n    c = k - mm + (m - 1) * k + 1\n    if mm == 0:\n        c -= 1\n    print(c)", "def array_converter(k, numbers):\n    numbers = [(number, k - number % k) for number in numbers if number % k]\n    if not len(numbers):\n        return 0\n    requirements = dict()\n    number_dict = dict()\n    for (number, requirement) in numbers:\n        requirements[requirement] = requirements.get(requirement, -1) + 1\n        number_dict[requirement + k * requirements[requirement]] = number\n    return max(number_dict.keys()) + 1\ntest_cases = int(input())\nwhile test_cases:\n    (n, k) = map(int, input().split())\n    print(array_converter(k, list(map(int, input().split()))))\n    test_cases -= 1", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    s = {}\n    for i in arr:\n        if i % k:\n            temp = k - i % k\n        else:\n            temp = i % k\n        if temp in s:\n            s[temp] += 1\n        else:\n            s[temp] = 1\n    max_count = 0\n    for (x, v) in s.items():\n        if x:\n            count = k * (v - 1) + x\n            if max_count < count:\n                max_count = count\n    if max_count:\n        print(max_count + 1)\n    else:\n        print(max_count)\n    t -= 1", "def mostFrequent(arr, n):\n    arr.sort()\n    max_count = 1\n    res = arr[0]\n    curr_count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            curr_count += 1\n        else:\n            if curr_count >= max_count:\n                max_count = curr_count\n                res = arr[i - 1]\n            curr_count = 1\n    if curr_count >= max_count:\n        max_count = curr_count\n        res = arr[n - 1]\n    return res\n\ndef f(al, k):\n    ll = []\n    for i in al:\n        tp = k - i % k\n        if tp == k:\n            tp = 0\n        if tp != 0:\n            ll.append(tp)\n    if len(ll) == 0:\n        return 0\n    res = mostFrequent(ll, len(ll))\n    ct = 0\n    for i in ll:\n        if i == res:\n            ct = ct + 1\n    return (ct - 1) * k + res + 1\nfor tc in range(int(input())):\n    al = list(map(int, input().split()))\n    k = al[1]\n    al = list(map(int, input().split()))\n    print(f(al, k))", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    d = {}\n    for i in a:\n        v = k - i % k\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    ans = 0\n    for i in d:\n        if i < k:\n            ans = max(ans, 1 + k * (d[i] - 1) + i)\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    d = {}\n    for i in a:\n        v = k - i % k\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    ans = 0\n    for i in d:\n        if i < k:\n            ans = max(ans, 1 + k * (d[i] - 1) + i)\n    print(ans)"]