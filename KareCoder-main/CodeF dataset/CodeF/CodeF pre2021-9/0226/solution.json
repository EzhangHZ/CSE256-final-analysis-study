["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    need = k * (y + 1)\n    print((need - 1 + x - 2) // (x - 1) + k)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (x, y, k) = map(int, input().split())\n    need = (y + 1) * k\n    print((need - 1 + x - 2) // (x - 1) + k)\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor i in range(n):\n    sticks = 1\n    (x, y, k) = map(int, input().split())\n    ans = (k * (y + 1) - 1) // (x - 1)\n    dp = (k * (y + 1) - 1) % (x - 1)\n    if dp != 0:\n        ans += 1\n    print(ans + k)", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "import sys\nt = int(input())\nallInput = sys.stdin.readlines()\nallOut = []\nfor inp in allInput:\n    (x, y, k) = map(int, inp.split())\n    p = k * (y + 1) - 1\n    ans = p // (x - 1) + k\n    if p % (x - 1) == 0:\n        allOut.append(str(ans))\n    else:\n        allOut.append(str(ans + 1))\nsys.stdout.write('\\n'.join(allOut))", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "list_ans = []\nfor _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    list_ans.append((k * y + k - 2) // (x - 1) + 1 + k)\nfor item in list_ans:\n    print(item)", "import sys\nfor line in sys.stdin:\n    numbers = [int(x) for x in line.strip().split()]\n    if len(numbers) == 1:\n        continue\n    else:\n        a = numbers[0]\n        b = numbers[1]\n        c = numbers[2]\n        constant = a - 1\n        n = (c * b + c - 1) // constant\n        if (c * b + c - 1) % constant != 0:\n            n += 1\n        sys.stdout.write(str(int(n + c)) + '\\n')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print((k * (y + 1) - 1) // (x - 1) + ((k * (y + 1) - 1) % (x - 1) > 0) + k)", "t = int(input())\nr = list()\nfor i in range(t):\n    a = input().split(' ')\n    x = int(a[0])\n    y = int(a[1])\n    k = int(a[2])\n    n = (k - 1 + k * y) // (x - 1)\n    if (k * y + k - 1) % (x - 1) != 0:\n        n += 1\n    r.append(n + k)\nfor i in r:\n    print(int(i))", "l = []\nfor pratyush in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    s = y * k + k - x\n    n = s // (x - 1)\n    if s % (x - 1) == 0:\n        l.append(1 + k + s // (x - 1))\n    else:\n        l.append(2 + k + n)\nfor i in l:\n    print(i)", "n = int(input())\na = []\nfor i in range(n):\n    [x, y, z] = [int(a) for a in input().split()]\n    ans = (z * y + z - 1) // (x - 1)\n    if (z * y + z - 1) % (x - 1):\n        ans = ans + 1\n    a.append(ans + z)\nfor i in range(n):\n    print(a[i])", "t = int(input())\nres = []\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    ns = (y + 1) * k - 1 + x - 2\n    nt = ns // (x - 1) + k\n    res.append(nt)\nfor i in res:\n    print(i)", "import sys\nfrom collections import defaultdict, Counter as CC\nfrom math import sqrt, ceil, floor, log2\nINF = float('inf')\nMOD = 10 ** 9 + 7\nread = lambda : [int(s) for s in sys.stdin.readline().split()]\n\ndef solve():\n    (x, y, k) = read()\n    total = k + y * k - 1\n    res = total // (x - 1)\n    if total % (x - 1):\n        res += 1\n    print(res + k)\n_ = 1\n_ = int(input())\nwhile _:\n    solve()\n    _ -= 1", "import sys\ninput = sys.stdin.readline\nfor test in range(int(input())):\n    (x, y, k) = [int(i) for i in input().split()]\n    need = y * k + k - 1\n    print((need + (x - 2)) // (x - 1) + k)", "import sys\nIN = sys.stdin.readline\nout = []\nfor _ in range(int(IN())):\n    (x, y, k) = map(int, IN().split())\n    out.append(str((k * (y + 1) - 1 + x - 1 - 1) // (x - 1) + k))\nprint('\\n'.join(out))", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\nimport sys\ninput = sys.stdin.readline\nimport decimal\n\ndef readIntLine():\n    return [int(char) for char in input().split()]\n\ndef readCharLine():\n    return [char for char in input().split()]\n\ndef solve():\n    (x, y, k) = readIntLine()\n    x = decimal.Decimal(x)\n    y = decimal.Decimal(y)\n    k = decimal.Decimal(k)\n    num = k * y + k - 1\n    dem = x - 1\n    return math.ceil(num / dem) + k\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (x, y, k) = list(map(int, stdin.readline().split()))\n    res = k\n    (a, b) = divmod(k * (y + 1) - 1, x - 1)\n    res += a\n    if b > 0:\n        res += 1\n    print(res)", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "import sys\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\ndef MI():\n    return map(int, sys.stdin.readline().rstrip().split())\nt = I()\nfor i in range(t):\n    (x, y, k) = MI()\n    print(k + (k * (y + 1) + x - 3) // (x - 1))", "def torch(x, y, k):\n    a = k * (x + y) - 1\n    b = x - 1\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\nx = int(input())\nm = []\nfor i in range(x):\n    y = input()\n    z = y.split(' ')\n    k = [int(t) for t in z]\n    m.append(k)\nfor j in range(x):\n    print(torch(m[j][0], m[j][1], m[j][2]))", "t = int(input())\nfrom math import ceil\nans = []\n\ndef divceil(a, b):\n    return (a + b - 1) // b\nfor _ in range(t):\n    (newsticks, coals, target) = map(int, input().split())\n    minamount = target + target * coals - 1\n    counter = divceil(minamount, newsticks - 1)\n    ans.append(str(counter + target))\nprint('\\n'.join(ans))", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (x, y, k) = MI()\n    a = (k * (y + 1) - 1 + x - 2) // (x - 1)\n    print(a + k)", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (x, y, k) = mints()\n    ta = k * (y + 1)\n    d = (ta - 1 + (x - 2)) // (x - 1)\n    print(d + k)\nfor i in range(mint()):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (x, y, k) = [int(x) for x in input().split()]\n    required_sticks = k + k * y\n    moves_for_sticks = (required_sticks - 1) // (x - 1) + ((required_sticks - 1) % (x - 1) != 0)\n    print(moves_for_sticks + k)", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "from sys import stdin, stdout\n\ndef divide(num1, num2):\n    if num1 % num2 == 0:\n        return num1 // num2\n    else:\n        return num1 // num2 + 1\noutputs = []\nt = int(stdin.readline().strip())\nfor __ in range(t):\n    (x, y, k) = map(int, stdin.readline().strip().split())\n    trades = k\n    sticks_req = k + y * k\n    trades += (sticks_req - x) // (x - 1) + 1 if (sticks_req - x) % (x - 1) == 0 else (sticks_req - x) // (x - 1) + 2\n    outputs.append(trades)\nfor o in outputs:\n    print(o)", "from sys import stdin\nimport math\nip = stdin.readline\nfor _ in range(int(ip())):\n    (x, y, k) = map(int, ip().split())\n    (m, r) = divmod(k * (y + 1) - 1, x - 1)\n    if r:\n        m += 1\n    print(m + k)", "import sys\nimport math\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef SI():\n    return sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n    (x, y, k) = MI()\n    ans = 0\n    se = k * y + k - 1\n    ans = se // (x - 1)\n    ans += 1 if se % (x - 1) > 0 else 0\n    print(ans + k)", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "from sys import stdin\nimport math\ninput = stdin.readline\nT = int(input())\nfor t in range(1, T + 1):\n    (x, y, k) = map(int, input().split())\n    min_stick_needed = y * k + k\n    print(k + (min_stick_needed - 1 + (x - 2)) // (x - 1))", "from math import ceil\nt = int(input())\nanswer = []\nfor _ in range(t):\n    (x, y, k) = map(int, input().split(' '))\n    n = ((y + 1) * k - 1) // (x - 1) + (((y + 1) * k - 1) % (x - 1) != 0)\n    answer.append(str(n + k))\nprint('\\n'.join(answer))", "def calc():\n    (x, y, k) = map(int, input().split())\n    coal = k\n    sticknum = k * y + k - 1\n    tot = sticknum // (x - 1)\n    if sticknum % (x - 1):\n        tot += 1\n    tot += k\n    return tot\ntestcase = int(input())\nans = []\nfor i in range(testcase):\n    ans.append(calc())\nprint(*ans, sep='\\n')", "for s in [*open(0)][1:]:\n    (x, y, k) = map(int, s.split())\n    print(k - (1 - y * k - k) // (x - 1))", "t = int(input())\ns = ''\nfor T in range(t):\n    (x, y, k) = input().split()\n    x = int(x)\n    y = int(y)\n    k = int(k)\n    n = (k * (x + y) - 1) // (x - 1)\n    r = (k * (x + y) - 1) % (x - 1)\n    d = 0\n    if r != 0:\n        d = 1\n    n += d\n    s += str(n) + '\\n'\nprint(s)", "import sys\nimport math\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = int(input())\nfor tt in range(t):\n    (x, y, k) = map(int, sys.stdin.readline().split(' '))\n    n = (y + 1) * k\n    ans = k\n    ans += (n - 1) // (x - 1)\n    if (n - 1) % (x - 1) != 0:\n        ans += 1\n    print(ans)\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "import sys\n\ndef swap(x, y, a):\n    temp = a[x]\n    a[x] = a[y]\n    a[y] = temp\n    return a\n\ndef solve():\n    return None\n\ndef main():\n    q = []\n    for line in sys.stdin.readlines():\n        q.append(line)\n    for i in range(len(q)):\n        q[i] = q[i].rstrip().split(' ')\n        q[i] = [int(x) for x in q[i]]\n    for i in range(1, len(q)):\n        x = q[i][0]\n        y = q[i][1]\n        k = q[i][2]\n        sticks_needed = k + y * k\n        if (sticks_needed - 1) % (x - 1) == 0:\n            sticks_buy = (sticks_needed - 1) // (x - 1)\n        else:\n            sticks_buy = (sticks_needed - 1) // (x - 1) + 1\n        print(k + sticks_buy)\nmain()", "num = int(input())\na = []\nfor i in range(num):\n    (x, y, k) = map(int, input().split())\n    a.append(int(y * k + k - 1 + x - 2) // (x - 1) + k)\nfor i in range(num):\n    print(a[i])", "from sys import stdin, stdout\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    (x, y, k) = map(int, stdin.readline().split())\n    movs = (k * y + k - 1) // (x - 1)\n    if movs * (x - 1) < k * y + k - 1:\n        movs += 1\n    movs += k\n    print(movs)", "t = int(input(''))\narr = []\nfor i in range(t):\n    arr.append(list(map(int, input().split())))\nfor i in arr:\n    x = i[0]\n    y = i[1]\n    k = i[2]\n    tot = k * y + k\n    turn = (tot - 2) // (x - 1) + 1 + k\n    print(turn)", "def operation(data):\n    (x, y, k) = data\n    answer = (y * k + k - 1) // (x - 1) + k\n    if (y * k + k - 1) % (x - 1) == 0:\n        return answer\n    else:\n        return answer + 1\nt = int(input())\nlistResults = []\nfor i in range(t):\n    data = list(map(int, input().split()))\n    result = operation(data)\n    listResults.append(result)\nfor i in listResults:\n    print(i)", "import sys\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.141592653589793\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_ints2(x):\n    return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\n\ndef read_str_list():\n    return list(sys.stdin.readline().strip().split())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef GCD(a: int, b: int) -> int:\n    return b if a % b == 0 else GCD(b, a % b)\n\ndef LCM(a: int, b: int) -> int:\n    return a * b // GCD(a, b)\n\ndef Main():\n    for _ in range(read_int()):\n        (x, y, k) = read_ints()\n        stick = k * y + k\n        cnt = (stick - 1) // (x - 1)\n        if (stick - 1) % (x - 1):\n            cnt += 1\n        cnt += k\n        print(cnt)\nMain()", "t = int(input())\nl = []\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    sum = (k * (y + 1) + x - 3) // (x - 1) + k\n    l.append(sum)\nfor i in range(t):\n    print(l[i])", "import sys\nimport math\nfrom collections import Counter\nfrom collections import OrderedDict\n\ndef inputt():\n    return sys.stdin.readline().strip()\n\ndef printt(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef listt():\n    return [int(i) for i in inputt().split()]\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nt = int(inputt())\nfor _ in range(t):\n    (x, y, k) = map(int, inputt().split())\n    coal = k * y\n    sticks = coal + k\n    if (sticks - 1) % (x - 1) == 0:\n        ans = (sticks - 1) // (x - 1)\n    else:\n        ans = (sticks - 1) // (x - 1) + 1\n    ans += k\n    printt(ans)", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    (x, y, k) = list(map(int, stdin.readline().split()))\n    turns = (k * y + k - 1) // (x - 1)\n    if 1 + turns * (x - 1) < k * y + k:\n        turns += 1\n    print(turns + k)", "import math\nn = int(input())\nx = [0] * n\ny = [0] * n\nk = [0] * n\nfor i in range(n):\n    (x[i], y[i], k[i]) = list(map(int, input().split()))\ndeals = 0\nfor i in range(n):\n    print(k[i] - (1 - y[i] * k[i] - k[i]) // (x[i] - 1))", "import sys\n\ndef rl(proc=None):\n    if proc is not None:\n        return proc(sys.stdin.readline())\n    else:\n        return sys.stdin.readline().rstrip()\n\ndef srl(proc=None):\n    if proc is not None:\n        return list(map(proc, rl().split()))\n    else:\n        return rl().split()\n\ndef solve(x, y, k):\n    need = y * k + k - 1\n    return (need + (x - 2)) // (x - 1) + k\n\ndef main():\n    T = rl(int)\n    for t in range(1, T + 1):\n        (x, y, k) = srl(int)\n        print(solve(x, y, k))\nmain()", "t = int(input())\nl = []\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    st = k * (y + 1)\n    t = (st - 1) // (x - 1) + k\n    if (st - 1) % (x - 1) != 0:\n        l.append(t + 1)\n    else:\n        l.append(t)\nfor i in l:\n    print(i)", "t = int(input())\nxs = []\nys = []\nks = []\nfor i in range(t):\n    (x, y, z) = map(int, input().split())\n    xs.append(x)\n    ys.append(y)\n    ks.append(z)\nfor j in range(t):\n    x = xs[j]\n    y = ys[j]\n    k = ks[j]\n    num_sticks_needed = y * k + k\n    num_trades_needed = 0\n    if (num_sticks_needed - 1) % (x - 1) == 0:\n        num_trades_needed += (num_sticks_needed - 1) // (x - 1)\n    else:\n        num_trades_needed += (num_sticks_needed - 1) // (x - 1) + 1\n    num_trades_needed += k\n    print(num_trades_needed)", "res = []\nfor x in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    Reqsticks = c * (b + 1)\n    i = (Reqsticks - 1) // (a - 1) + ((Reqsticks - 1) % (a - 1) > 0)\n    total = i + c\n    res.append(total)\nfor c in res:\n    print(c)", "res = []\nfor x in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    Reqsticks = c * (b + 1) - 1\n    i = Reqsticks // (a - 1) + (Reqsticks % (a - 1) > 0)\n    total = i + c\n    res.append(total)\nfor c in res:\n    print(c)", "res = []\nfor x in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    Reqsticks = c * b + c - 1\n    i = Reqsticks // (a - 1) + (Reqsticks % (a - 1) > 0)\n    total = i + c\n    res.append(total)\nfor c in res:\n    print(c)", "cases = []\ntemp = []\nt = int(input())\nfor i in range(t):\n    newarr = [int(x) for x in input().split()]\n    cases.append(newarr)\nfor case in cases:\n    x = case[0]\n    y = case[1]\n    k = case[2]\n    tstick = k + k * y\n    strade = (tstick - 1) // (x - 1)\n    if (tstick - 1) % (x - 1) != 0:\n        strade += 1\n    total = strade + k\n    print(total)", "T = int(input())\nret = []\nfor t in range(T):\n    (x, y, k) = map(int, input().split())\n    ans = (k * y + k - 1) // (x - 1) + k\n    if (k * y + k - 1) % (x - 1) != 0:\n        ans += 1\n    ret.append(ans)\nfor t in range(T):\n    print(ret[t])", "from collections import defaultdict as dd\nfrom sys import stdin, stdout\nfrom bisect import bisect_left\nfrom math import log, sqrt\nfor t in range(int(stdin.readline().strip())):\n    (x, y, k) = map(int, stdin.readline().strip().split())\n    inx = x - 1\n    req = y * k + k - 1\n    if req % inx == 0:\n        print(req // inx + k)\n    else:\n        print(req // inx + 1 + k)", "l = []\nfor _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    s = y * k + k - x\n    n = s // (x - 1)\n    if s % (x - 1) == 0:\n        l.append(1 + k + s // (x - 1))\n    else:\n        l.append(2 + k + n)\nfor i in l:\n    print(i)", "from math import *\nfrom bisect import *\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\nI = lambda : int(input())\nM = lambda : map(int, input().split())\nLI = lambda : list(map(int, input().split()))\nfor _ in range(I()):\n    (n, m, k) = M()\n    x = m * k + k\n    if x % (n - 1) != 1 and x % (n - 1) != 0:\n        x //= n - 1\n        x += 1\n    else:\n        x //= n - 1\n    x += k\n    if n - 1 == 1:\n        print(x - 1)\n    else:\n        print(x)", "n = int(input())\nd = []\nx = []\np = -3\nfor i in range(1, n + 1):\n    (a, b, c) = map(int, input().split())\n    d.append(a)\n    d.append(b)\n    d.append(c)\nfor j in range(1, n + 1):\n    p = p + 3\n    q = d[p]\n    w = d[p + 1]\n    e = d[p + 2]\n    if q - 1 == 1:\n        u = e * w + e\n        x.append(u - 1 + e)\n        continue\n    else:\n        h = w * e + e\n        if h % (q - 1) == 0 or h % (q - 1) == 1:\n            s = h // (q - 1)\n            x.append(s + e)\n        else:\n            s = h // (q - 1) + 1\n            x.append(s + e)\nfor k in x:\n    print(k)", "n = int(input())\nd = []\nx = []\np = -3\nfor i in range(1, n + 1):\n    (a, b, c) = map(int, input().split())\n    d.append(a)\n    d.append(b)\n    d.append(c)\nfor j in range(1, n + 1):\n    p = p + 3\n    q = d[p]\n    w = d[p + 1]\n    e = d[p + 2]\n    if q - 1 == 1:\n        u = e * w + e\n        x.append(u - 1 + e)\n        continue\n    else:\n        h = w * e + e\n        if h % (q - 1) == 0 or h % (q - 1) == 1:\n            s = h // (q - 1)\n            x.append(s + e)\n        else:\n            s = h // (q - 1) + 1\n            x.append(s + e)\nfor k in x:\n    print(k)", "import sys\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(sys.stdin.readline())\n\ndef ria():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ws(s):\n    sys.stdout.write(s + '\\n')\n\ndef wi(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef wia(a):\n    sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')\n\ndef ceil(x, y=1):\n    return int(-(-x // y))\nimport math\nfrom collections import defaultdict\nfor _ in range(ri()):\n    (x, y, k) = ria()\n    st = k + y * k - 1\n    cnt = ceil(st, x - 1) + k\n    print(cnt)", "q = []\nimport math\nt = int(input())\nfor j in range(t):\n    l = list(input().split(' '))\n    x = int(l[0])\n    y = int(l[1])\n    k = int(l[2])\n    r = ((y + 1) * k - 1) // (x - 1)\n    if ((y + 1) * k - 1) % (x - 1) != 0:\n        r += 1\n    q.append(r + k)\nfor i in q:\n    print(i)", "from collections import defaultdict\nimport sys\nimport math\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (x, y, n) = map(int, input().split())\n    req_sticks = n + y * n - 1\n    steps = req_sticks // (x - 1)\n    remained = req_sticks - steps * (x - 1)\n    if remained > 0:\n        steps += 1\n    print(steps + n)", "t = int(input())\nfor i in range(t):\n    (x, y, k) = [int(x) for x in input().split()]\n    if (k * (y + 1) - 1) % (x - 1) == 0:\n        print((k * (y + 1) - 1) // (x - 1) + k)\n    else:\n        print((k * (y + 1) - 1) // (x - 1) + 1 + k)", "for _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    c = y * k\n    d = x - 1\n    a = c - x + k\n    h = 0\n    if a % d == 0:\n        h = a // d + 1\n    else:\n        h = a // d + 2\n    print(h + k)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "for _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print((k * (y + 1) - 1 + x - 2) // (x - 1) + k)", "for _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(k - (1 - y * k - k) // (x - 1))", "for t in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    o = (k * y + k - 1 + x - 2) // (x - 1) + k\n    print(o)", "for _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print((k + k * y + x - 3) // (x - 1) + k)", "s = 0\nt = int(input())\nfor kl in range(t):\n    s = 0\n    (x, y, h) = map(int, input().split())\n    p = y * h + h - 1\n    s += h\n    o = (p - 1) // (x - 1) + 1\n    print(s + o)", "for _ in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    need = k * (y + 1)\n    print((need - 1 + x - 2) // (x - 1) + k)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "t = int(input())\nfor _ in range(t):\n    (x, y, k) = map(int, input().split())\n    print((y * k + k - 1 + (x - 1) - 1) // (x - 1) + k)", "t = int(input())\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    sticks = k + k * y\n    trades = (sticks - 1 + x - 2) // (x - 1) + k\n    print(trades)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "t = int(input())\np = []\nfor i in range(t):\n    r = list(map(int, input().split()))\n    p.append(r)\n\ndef tully(x, y, k):\n    total_sticks = k * (y + 1)\n    steps = total_sticks // (x - 1)\n    flag = 1\n    if (total_sticks - x) % (x - 1) == 0:\n        steps -= 1\n    steps += k\n    if total_sticks % (x - 1) != 0:\n        steps += 1\n    return steps\nfor i in range(t):\n    e = tully(p[i][0], p[i][1], p[i][2])\n    print(e)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    need = y * k + k - 1\n    ans = (need + x - 1 - 1) // (x - 1) + k\n    print(ans)", "def main() -> None:\n    for test in range(int(input())):\n        (x, y, k) = map(int, input().split())\n        print((k + y * k - 1 + x - 2) // (x - 1) + k)\nmain()", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "n = int(input())\nfor i in range(n):\n    (x, y, k) = map(int, input().split())\n    res = ((y + 1) * k - 1 + x - 2) // (x - 1) + k\n    print(res)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (sp, cp, k) = map(int, input().split())\n    tot = ((1 + cp) * k - 1) // (sp - 1)\n    trades = tot + (tot * (sp - 1) < (1 + cp) * k - 1)\n    trades += k\n    print(trades)", "t = int(input())\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    sticks = k + k * y\n    trades = (sticks - 1 + x - 2) // (x - 1) + k\n    print(trades)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "t = int(input())\nwhile t > 0:\n    (x, y, k) = input().split()\n    (x, y, k) = (int(x), int(y), int(k))\n    if (k * (y + 1) - x) % (x - 1) == 0:\n        print(1 + (k * (y + 1) - x) // (x - 1) + k)\n    else:\n        print(1 + (1 + (k * (y + 1) - x) // (x - 1)) + k)\n    t -= 1", "t = int(input())\nw = []\nfor i in range(t):\n    (x, y, k) = input().split()\n    x = int(x)\n    y = int(y)\n    k = int(k)\n    if (k + k * y - 1) % (x - 1) == 0:\n        w.append(k + (-1 + k + k * y) // (x - 1))\n    else:\n        w.append(k + 1 + (-1 + k + k * y) // (x - 1))\nfor i in w:\n    print(i)", "t = int(input())\na = []\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    coal = k\n    sticks = coal * y\n    sticks += k\n    sticks = sticks - 1\n    total = sticks // (x - 1)\n    other = sticks % (x - 1)\n    if other:\n        total = total + 1\n    a.append(total + k)\nprint(*a, sep='\\n')", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    a = 1\n    sum_ = (k * y + k - 1 + x - 2) // (x - 1)\n    sum_ += k\n    print(sum_)", "for s in range(int(input())):\n    (x, y, k2) = list(map(int, input().split()))\n    s = 1\n    c = 0\n    np = k2 * y\n    d = (np - 1 + k2) // (x - 1)\n    if (np - 1 + k2) % (x - 1) != 0:\n        d += 1\n    print(d + k2)", "n = int(input())\nfor i in range(n):\n    (a, b, c) = map(int, input().split())\n    print((c + b * c + a - 3) // (a - 1) + c)", "t = int(input())\nfor i in range(t):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "def main():\n    (x, y, k) = map(int, input().split())\n    print((x + k + y * k - 3) // (x - 1) + k)\nfor _ in range(int(input())):\n    main()", "for i in range(int(input())):\n    (x, y, k) = map(int, input().split())\n    print(((y + 1) * k - 1 + x - 2) // (x - 1) + k)", "def solve():\n    (x, y, k) = map(int, input().split())\n    stick = k + k * y\n    temp = (stick - 1) // (x - 1)\n    if (stick - 1) % (x - 1) != 0:\n        temp = int(temp) + 1\n    print(temp + k)\nfor i in range(int(input())):\n    solve()"]