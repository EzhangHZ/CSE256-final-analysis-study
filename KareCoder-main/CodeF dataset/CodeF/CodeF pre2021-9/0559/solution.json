["from collections import *\np = Counter\nfor s in [*open(0)][2::2]:\n    x = s.split()\n    c = p(p(x).values())\n    v = max(c)\n    print((len(x) - c[v]) // (v - 1) - 1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = collections.Counter(arr)\n    c = collections.Counter(c.values())\n    v = max(c)\n    print((n - c[v]) // (v - 1) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    r = [0] * (n + 1)\n    for elem in lst:\n        r[elem] += 1\n    r.sort()\n    m = r[-1]\n    h = r.count(m)\n    print((n - h) // (m - 1) - 1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = collections.Counter(arr)\n    c = collections.Counter(c.values())\n    v = max(c)\n    print((n - c[v]) // (v - 1) - 1)", "from collections import Counter\n\ndef cake(arr):\n    x = Counter(arr)\n    mx = max(x.items(), key=lambda s: s[1])[1]\n    maxFreq = list(x.values()).count(mx)\n    return (len(arr) - maxFreq) // (mx - 1) - 1\nfor i in range(int(input())):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(cake(lst))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = dict()\n    k = 0\n    for v in a:\n        if v not in c:\n            c[v] = 0\n        c[v] += 1\n    k = max(c.values())\n    z = sum((k == z for z in c.values()))\n    print((n + 1 - z - k) // (k - 1))", "t = int(input())\nfor test_case in range(1, t + 1):\n    n = int(input())\n    l = list(map(int, input().split()))\n    counts = {}\n    for k in l:\n        if not k in counts:\n            counts[k] = 0\n        counts[k] += 1\n    (r, a) = (0, 0)\n    for (val, count) in counts.items():\n        if count > r:\n            r = count\n            a = 1\n        elif count == r:\n            a += 1\n    print((n - r - a + 1) // (r - 1))", "from collections import Counter\n\ndef min_MaxFunc(n, cake_list):\n    c_list = Counter(cake_list)\n    occurr_arr = []\n    for i in c_list:\n        occurr_arr.append(c_list[i])\n    max_occurr = max(occurr_arr)\n    count = 0\n    for i in range(len(occurr_arr)):\n        if occurr_arr[i] == max_occurr:\n            count += 1\n    temp = n - count * max_occurr\n    final_ans = temp // (max_occurr - 1) + (count - 1)\n    return final_ans\nt = int(input())\ntemp_arr = []\nfor i in range(t):\n    n = int(input())\n    cake_list = list(map(int, input().split()))\n    max_distance = min_MaxFunc(n, cake_list)\n    temp_arr.append(max_distance)\nfor j in temp_arr:\n    print(j)", "import math\nans_list = []\nfor i in range(int(input())):\n    length = int(input())\n    nums = input().split()\n    nums = [int(x) for x in nums]\n    ctr_list = []\n    for j in range(length + 1):\n        ctr_list.append(0)\n    for j in nums:\n        ctr_list[j] += 1\n    max_ctr_seen = max(ctr_list)\n    multiple_max = 0\n    for j in ctr_list:\n        if max_ctr_seen == j:\n            multiple_max += 1\n    min_distance = math.floor((length - multiple_max) / (max_ctr_seen - 1) - 1)\n    ans_list.append(min_distance)\nfor i in ans_list:\n    print(i)", "from collections import Counter as c\nfor s in [*open(0)][2::2]:\n    s = s.split()\n    x = c(c(s).values())\n    m = max(x)\n    print((len(s) - x[m]) // (m - 1) - 1)", "from collections import Counter\n\ndef H1():\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        n = int(input())\n        cakes = [int(i) for i in input().split()]\n        dups = dict(Counter(cakes).most_common())\n        maxdup = max(dups.values())\n        numMax = len([k for (k, v) in dups.items() if v == maxdup])\n        sol = (n - numMax) / (maxdup - 1)\n        ans.append(int(sol) - 1)\n    for i in ans:\n        print(i)\nH1()", "from collections import *\nC = Counter\nfor s in [*open(0)][2::2]:\n    x = s.split()\n    c = C(C(x).values())\n    v = max(c)\n    print((len(x) - c[v]) // (v - 1) - 1)", "import sys\ninputlines = sys.stdin.readlines()\nnumber_of_testcases = int(inputlines[0])\nfor i in range(number_of_testcases):\n    number_of_integers = int(inputlines[2 * i + 1])\n    integers = list(map(int, inputlines[2 * i + 2].split(' ')))\n    numbers_dict = {}\n    for i in integers:\n        if i in numbers_dict:\n            numbers_dict[i] += 1\n        else:\n            numbers_dict[i] = 1\n    max_freq = max(numbers_dict.values())\n    number_of_max_freq_integers = 0\n    for (key, value) in numbers_dict.items():\n        if value == max_freq:\n            number_of_max_freq_integers += 1\n    min_distance = (number_of_integers - 1) // (max_freq - 1) - 1\n    permissible_numbers = (number_of_integers - 1) % (max_freq - 1)\n    while permissible_numbers < number_of_max_freq_integers - 1:\n        permissible_numbers = number_of_integers - min_distance * (max_freq - 1) - 1\n        min_distance -= 1\n    print(min_distance)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    f = input().split()\n    a = dict.fromkeys(f, 0)\n    for i in range(n):\n        a[f[i]] += 1\n    ar = sorted(a.values(), reverse=True)\n    m = ar[0]\n    k = ar.count(m)\n    print((n - k) // (m - 1) - 1)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count_arr = [0 for i in range(n + 1)]\n    for i in arr:\n        count_arr[i] += 1\n    Max = max(count_arr)\n    MaxFreq = count_arr.count(Max)\n    print((n - MaxFreq) // (Max - 1) - 1)", "from collections import *\nC = Counter\nfor s in [*open(0)][2::2]:\n    x = s.split()\n    c = C(C(x).values())\n    v = max(c)\n    print((len(x) - c[v]) // (v - 1) - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    list_ = [0] * n\n    for j in a:\n        list_[j - 1] += 1\n    count = max(list_)\n    print((n - list_.count(count)) // (count - 1) - 1)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    cakes = list(map(int, input().split(' ')))\n    count = [0] * (n + 1)\n    for num in cakes:\n        count[num] += 1\n    count.sort(reverse=True)\n    max = count[0]\n    result = count.count(max) - 1\n    others = sum((num for num in count if num != max))\n    result += int(others / (max - 1))\n    print(result)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        dp = [0] * n\n        for i in arr:\n            dp[i - 1] += 1\n        m = max(dp)\n        c = dp.count(m)\n        print((n - c) // (m - 1) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    a = 0\n    mx = 0\n    b = 0\n    for i in d:\n        mx = max(d[i], mx)\n    for i in d:\n        if d[i] == mx:\n            a += 1\n        else:\n            b += d[i]\n    print(b // (mx - 1) + a - 1)", "import sys\ninput = sys.stdin.readline\n\ndef name(arr):\n    s = [arr[0] for i in range(len(arr))]\n    if arr == s[:]:\n        return 0\n    gap = len(arr)\n    h = {}\n    f = {}\n    for ele in arr:\n        if ele not in h:\n            h[ele] = 1\n        else:\n            h[ele] += 1\n    m = 0\n    x = 0\n    for ele in h.values():\n        if ele not in f:\n            f[ele] = 1\n        else:\n            f[ele] += 1\n        if ele >= x:\n            m = f[ele]\n            x = ele\n    return int((len(arr) - m * x) // (x - 1)) + m - 1\n\ndef solution():\n    n = int(input())\n    arr = list(map(lambda x: int(x), input().split()))\n    print(name(arr))\nt = int(input())\nfor i in range(0, t):\n    solution()", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [0 for i in range(n + 1)]\n    for i in l:\n        r[i] += 1\n    r.sort()\n    m = r[-1]\n    h = r.count(m)\n    print((n - h) // (m - 1) - 1)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = [0] * n\n    for x in a:\n        cnt[x - 1] += 1\n    print((n - cnt.count(max(cnt))) // (max(cnt) - 1) - 1)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    chisla = {}\n    nums = [int(x) for x in input().split()]\n    nmax = 0\n    maxim = 0\n    for x in nums:\n        if x not in chisla:\n            chisla[x] = 1\n        else:\n            chisla[x] += 1\n    for value in chisla.values():\n        if value > maxim:\n            maxim = value\n            nmax = 1\n        elif value == maxim:\n            nmax += 1\n    print((n - nmax) // (maxim - 1) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    cnts = [0] * (m + 1)\n    for i in range(n):\n        cnts[a[i]] += 1\n    cnts.sort()\n    j = m\n    while j >= 0 and cnts[j] == cnts[-1]:\n        j -= 1\n    print((n - (m - j)) // (cnts[-1] - 1) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    maxval = max(d, key=d.get)\n    a = 0\n    b = 0\n    for i in d.values():\n        if i == d[maxval]:\n            a += 1\n        else:\n            b += i\n    a -= 1\n    ans = a + b // (d[maxval] - 1)\n    print(ans)", "t = int(input())\nimport math\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    m = max(d.values())\n    num = 0\n    for i in d:\n        if d[i] == m:\n            num += 1\n    left = n - num * m\n    ans = left // (m - 1) + (num - 1)\n    print(ans)", "from collections import Counter\nimport math\ntestCases = int(input())\nfor _ in range(testCases):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    cntr = dict(Counter(ar))\n    cntr = Counter(cntr.values())\n    mn = float('inf')\n    for x in cntr:\n        if x != 1:\n            mn = min(mn, int(math.floor((n - cntr[x]) / (x - 1))) - 1)\n    print(mn)", "T = int(input())\nfor case in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sums = {}\n    for cake in a:\n        if sums.get(cake):\n            sums[cake] += 1\n        else:\n            sums[cake] = 1\n    sums = list(sums.values())\n    sums.sort()\n    m = sums[-1]\n    nummax = 0\n    for sum in sums:\n        if sum == m:\n            nummax += 1\n    ans = (n - nummax) // (m - 1) - 1\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfrom collections import Counter\nfor _ in range(II()):\n    n = II()\n    aa = LI()\n    ac = Counter(aa)\n    mx = max(ac.values())\n    cnt = list(ac.values()).count(mx)\n    ans = (n - (cnt - 1) - mx) // (mx - 1)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    mc = [x[1] for x in Counter(map(int, input().split())).most_common()]\n    e = mc[0]\n    q = 0\n    for c in mc:\n        if c != e:\n            break\n        q += 1\n    print((n - q) // (e - 1) - 1)", "import heapq\nimport collections\n\ndef solve(arr):\n    counter = collections.Counter(arr)\n    mx = max(counter.values())\n    cnt = list(counter.values()).count(mx)\n    n = len(arr)\n    if mx == 2:\n        return n - cnt - 1\n    else:\n        return (n - cnt) // (mx - 1) - 1\nfor _ in range(int(input())):\n    n = int(input())\n    (*arr,) = map(int, input().split())\n    print(solve(arr))", "def ans(a, n):\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    lis = list(d.values())\n    if len(lis) == 1:\n        return 0\n    maxm = max(lis)\n    summ = 0\n    for i in lis:\n        if i == maxm:\n            summ += i - 1\n        else:\n            summ += i\n    summ -= maxm - 1\n    return summ // (maxm - 1)\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    lis = input().split()\n    a = []\n    for i in lis:\n        a.append(int(i))\n    print(ans(a, n))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n):\n        d[a[i] - 1] += +1\n    d.sort(reverse=True)\n    k = 0\n    for i in range(1, n):\n        if d[i] == d[0]:\n            k += 1\n        else:\n            break\n    print((n - d[0] - k) // (d[0] - 1))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dct = {}\n    for x in a:\n        val = dct.get(x, 0)\n        val += 1\n        dct[x] = val\n    candies = []\n    for no in dct.values():\n        candies.append(no)\n    candies.sort()\n    l = len(candies)\n    idx = l - 2\n    while idx >= 0 and candies[idx] == candies[l - 1]:\n        idx -= 1\n    total_mx = l - idx - 1\n    gap = (n - candies[l - 1] * total_mx) // (candies[l - 1] - 1) + total_mx - 1\n    ans.append(gap)\nfor x in ans:\n    print(x)", "from collections import *\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    arr = list(map(int, input().split()))\n    c = Counter(arr)\n    d = defaultdict(int)\n    maxm = 0\n    for (i, j) in c.items():\n        if j > maxm:\n            maxm = j\n        d[j] += 1\n    if d[maxm] == 1:\n        print((a - maxm) // (maxm - 1))\n    else:\n        total = a\n        rep = d[maxm] - 1\n        temp = (a - d[maxm] * maxm) // (maxm - 1)\n        print(rep + temp)", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = int(fastinput())\nwhile t:\n    t -= 1\n    n = int(fastinput())\n    cnt = [0] * (n + 1)\n    for i in fastinput().split():\n        cnt[int(i)] += 1\n    maxx = max(cnt)\n    num = cnt.count(maxx)\n    print((n - num) // (maxx - 1) - 1)", "for i in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    f = {}\n    for i in lis:\n        if i not in f:\n            f[i] = 0\n        f[i] += 1\n    num = []\n    for key in f:\n        num.append(f[key])\n    c = num.count(max(num))\n    ans = (n - max(num) - c + 1) // (max(num) - 1)\n    print(ans)", "from collections import Counter\nfor ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    co = Counter(a)\n    hco = co.most_common(1)[0][1]\n    l = list(dict(co).values()).count(hco)\n    print((n - l) // (hco - 1) - 1)", "from collections import defaultdict as dd\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dd(int)\n    for i in range(n):\n        d[a[i]] += 1\n    v = list(d.values())\n    m = max(v)\n    k = v.count(m)\n    print((n - k) // (m - 1) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    r = [0] * (n + 1)\n    for elem in lst:\n        r[elem] += 1\n    r.sort()\n    m = r[-1]\n    h = r.count(m)\n    print((n - h) // (m - 1) - 1)", "def main():\n    t = int(input())\n    from collections import defaultdict as dd\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = dd(lambda : 0)\n        for i in a:\n            d[i] += 1\n        m = max(d.values())\n        k = 0\n        for i in d.values():\n            k += 1 if i == m else 0\n        ans = (n - k) // (m - 1) - 1\n        print(ans)\n    return\nmain()", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    lst = list(map(int, input().split()))\n    dictionary = dict()\n    for i in lst:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    maxvalue = 0\n    for (key, value) in dictionary.items():\n        maxvalue = max(maxvalue, value)\n    keylst = []\n    for (key, value) in dictionary.items():\n        if value == maxvalue:\n            keylst.append(key)\n    keyvalue = len(keylst)\n    print(abs((m - keyvalue) // (maxvalue - 1) - 1))", "from sys import stdin\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    mp = {}\n    num = [int(n) for n in input().split()]\n    max1 = 0\n    for i in num:\n        mp[i] = mp.get(i, 0) + 1\n        if mp[i] > max1:\n            max1 = mp[i]\n    maxfreq = [k for (k, v) in mp.items() if int(v) == max1]\n    maxfreq1 = len(maxfreq)\n    print(int((n - maxfreq1) / (max1 - 1)) - 1)", "from sys import stdin\nfrom collections import Counter\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split()))\n    b = a.most_common()\n    k = b[0][1]\n    e = sum([1 if d == k else 0 for (c, d) in b])\n    print((n - e * k) // (k - 1) + e - 1)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split()))\n    b = a.most_common()\n    e = sum([1 if d == b[0][1] else 0 for (c, d) in b])\n    print((n - e * b[0][1]) // (b[0][1] - 1) + e - 1)", "from collections import Counter\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, a) = (int(input()), Counter(map(int, input().split())).most_common())\n    e = sum((1 if b[1] == a[0][1] else 0 for b in a))\n    print((n - e * a[0][1]) // (a[0][1] - 1) + e - 1)", "def sol(lis):\n    hash = {}\n    m = 0\n    for i in lis:\n        if i not in hash:\n            hash[i] = 1\n        else:\n            hash[i] += 1\n        m = max(hash[i], m)\n    c = 0\n    for i in hash:\n        if hash[i] == m:\n            c += 1\n    c -= 1\n    print((len(lis) - m - c) // (m - 1))\nk = int(input())\nfor i in range(k):\n    input()\n    lis = list(map(int, input().split(' ')))\n    sol(lis)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = Counter(a)\n    m = max(x.values())\n    s = list(x.values()).count(m)\n    x = n - s * m\n    x = x // (m - 1)\n    print(x + s - 1)", "def solve(n, a):\n    d = {}\n    putted = [-1] * n\n    for i in a:\n        if d.get(i, -1) == -1:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m = 0\n    mq = 1\n    for (key, value) in sorted(d.items(), reverse=True, key=lambda x: x[1]):\n        if m == 0:\n            m = value\n        elif value == m:\n            mq += 1\n    print((n - mq) // (m - 1) - 1)\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    solve(n, a)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    space = [0] * (n + 1)\n    for i in range(n):\n        space[ls[i]] += 1\n    space.sort()\n    cnt = 1\n    for i in range(n):\n        if space[n] == space[i]:\n            cnt += 1\n    print((n - cnt - (space[n] - 1)) // (space[n] - 1))", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = collections.Counter(a)\n    m = -1\n    q = 0\n    for c in d.keys():\n        if d[c] > m:\n            m = d[c]\n            q = 1\n        elif d[c] == m:\n            q += 1\n    print((n - q * m) // (m - 1) + q - 1)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nimport heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in a:\n        d[i] += 1\n    q = []\n    for k in d:\n        q.append(d[k])\n    mx = max(q)\n    ct1 = q.count(mx)\n    ct2 = q.count(mx - 1)\n    ans = ct1 + ct2 - 1\n    s = sum(q) - ct1 * mx - ct2 * (mx - 1)\n    if s > 0:\n        ans += s // (mx - 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    cnt = [0 for i in range(n + 1)]\n    b = list(map(int, input().split()))\n    for u in b:\n        cnt[u] += 1\n    mxfq = max(cnt)\n    tot = 0\n    for u in cnt:\n        tot += min(u, mxfq - 1)\n    print((tot - (mxfq - 1)) // (mxfq - 1))", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    A = list(map(int, input().rstrip().split(' ')))\n    d = {}\n    for i in range(N):\n        x = d.get(A[i], -1)\n        if x == -1:\n            d[A[i]] = 1\n        else:\n            d[A[i]] = x + 1\n    Count = 0\n    B = list(d.values())\n    y = max(B)\n    for x in d:\n        if d[x] == y:\n            Count += 1\n    c = (N - Count * y) // (y - 1)\n    print(c + (Count - 1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    line = list(map(int, input().split()))\n    fre = {}\n    for val in line:\n        if val in fre:\n            fre[val] += 1\n        else:\n            fre[val] = 1\n    fre = list(fre.values())\n    fre.sort(reverse=True)\n    max_f = fre[0]\n    ans = 0\n    summation = 0\n    for f in fre[1:]:\n        if max_f == f:\n            ans += 1\n        else:\n            summation += f\n    ans += int(summation // (max_f - 1))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ac = dict()\n    for i in range(n):\n        if a[i] not in ac:\n            ac[a[i]] = 1\n        else:\n            ac[a[i]] += 1\n    (u, v) = (0, 0)\n    for x in ac:\n        if ac[x] > v:\n            v = ac[x]\n            u = 1\n        elif ac[x] == v:\n            u += 1\n    ans = (n - u * v) // (v - 1)\n    ans = ans + u - 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0] * (n + 1)\n    for i in range(n):\n        c[a[i]] += 1\n    k = max(c)\n    m = c.count(k)\n    a.sort()\n    print(max(0, (n - m) // (k - 1) - 1))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in a:\n        if d.get(i, None) == None:\n            d[i] = 0\n        d[i] += 1\n    m = 0\n    for (k, v) in d.items():\n        m = max(m, v)\n        if m == v:\n            key = k\n    count = 0\n    for (k, v) in d.items():\n        if v == m:\n            count += 1\n    count -= 1\n    print((n - count - m) // (m - 1))", "from collections import defaultdict\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        d[list1[i]] += 1\n    c = 0\n    maxi = 0\n    for i in d.keys():\n        if d[i] > 1:\n            maxi = max(d[i], maxi)\n    for i in d.keys():\n        if d[i] == maxi:\n            c += 1\n    if c > 1:\n        print((n - maxi - (c - 1)) // (maxi - 1))\n    else:\n        print((n - maxi) // (maxi - 1))\n    t -= 1", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = {}\n    maxf = 0\n    maxv = -1\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n        if freq[arr[i]] > maxf:\n            maxf = freq[arr[i]]\n            maxv = arr[i]\n    ex = 0\n    pad = 0\n    for (k, v) in freq.items():\n        if v < maxf:\n            ex += v\n        if v == maxf and k != maxv:\n            pad += 1\n    sp = maxf - 1\n    req = ex // sp\n    print(req + pad)", "from collections import defaultdict\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for i in lst:\n        dic[i] += 1\n    max_ele = 0\n    counter = 0\n    for i in dic.values():\n        if max_ele < i:\n            counter = 1\n            max_ele = i\n        elif max_ele == i:\n            counter += 1\n    res = counter - 1\n    if n - max_ele * counter != 0:\n        res += (n - max_ele * counter) // (max_ele - 1)\n    print(res)", "t = int(input())\nfor j in range(1, t + 1):\n    n = int(input())\n    a_l = map(int, input().split())\n    a_d = {}\n    for a in a_l:\n        if a in a_d.keys():\n            a_d[a] = a_d[a] + 1\n        else:\n            a_d[a] = 1\n    a_count_d = {}\n    a_values_l = list(a_d.values())\n    for a in a_values_l:\n        if a in a_count_d.keys():\n            a_count_d[a] = a_count_d[a] + 1\n        else:\n            a_count_d[a] = 1\n    M = max(list(a_count_d.keys()))\n    teller = a_count_d[M] - 1\n    teller_help = 0\n    for i in range(1, M):\n        teller_help = teller_help + (M - i) * a_count_d.get(M - i, 0)\n    teller_help = int(teller_help / (M - 1))\n    print(teller + teller_help)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, a) = (int(input()), Counter(map(int, input().split())).most_common())\n    e = sum((1 if b[1] == a[0][1] else 0 for b in a))\n    print((n - e * a[0][1]) // (a[0][1] - 1) + e - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = [0] * n\n    c = [0] * (max(a) + 1)\n    for i in a:\n        c[i] += 1\n    x = []\n    for i in range(len(c)):\n        if c[i] != 0:\n            x.append([c[i], i])\n    x.sort(reverse=True)\n    v = x[0][0]\n    co = 0\n    for i in x:\n        if i[0] == v:\n            co += 1\n    l = n - (co - 1) - 1\n    import math\n    x = math.ceil(l / (v - 1)) - 1\n    if l % (v - 1) == 0:\n        print(x)\n    else:\n        print(l // (v - 1) - 1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = collections.Counter(a)\n    m = 0\n    for i in v:\n        if m < v[i]:\n            m = v[i]\n    s = 0\n    count = 0\n    for i in v:\n        if v[i] != m:\n            s += v[i]\n        else:\n            count += 1\n    print(s // (m - 1) + count - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    mx = float('-inf')\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        mx = max(mx, d[i])\n    cnt = 0\n    for (key, val) in d.items():\n        if val == mx:\n            cnt += 1\n    print((n - cnt) // (mx - 1) - 1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = collections.Counter(a)\n    m = 0\n    for i in v:\n        if m < v[i]:\n            m = v[i]\n    s = 0\n    count = 0\n    for i in v:\n        if v[i] != m:\n            s += v[i]\n        else:\n            count += 1\n    print(s // (m - 1) + count - 1)", "t = int(input())\nfor hh in range(t):\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    d = {}\n    for i in li:\n        d[i] = d.get(i, 0) + 1\n    so_key = sorted(d, key=d.get, reverse=True)\n    max_key = so_key[0]\n    for i in range(1, len(so_key)):\n        if d[so_key[i]] == d[max_key]:\n            d[so_key[i]] -= 1\n    no_div = d[so_key[0]] - 1\n    baaki = 0\n    for i in range(1, len(so_key)):\n        baaki += d[so_key[i]]\n    print(baaki // no_div)", "import math as mt\n\ndef tran(arr):\n    arr.sort()\n    c = [1]\n    cval = [int(arr[0])]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            c[-1] = c[-1] + 1\n        else:\n            cval.append(int(arr[i]))\n            c.append(1)\n    cc = list(c)\n    c.sort()\n    if len(c) == 1:\n        return 0\n    else:\n        c.reverse()\n        i = 0\n        while i < len(c) - 1:\n            if c[i] == c[i + 1]:\n                i = i + 1\n            else:\n                break\n        if i == len(c) - 1:\n            return i\n        elif i == 0:\n            return int((len(arr) - c[0]) / (c[0] - 1))\n        else:\n            s = len(arr) - (i + 1) * c[0]\n            return i + int(s / (c[0] - 1))\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    r = tran(arr)\n    ans.append(r)\nfor i in ans:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    freq = {}\n    max_freq = 0\n    for i in a:\n        freq[i] = (freq.get(i) or 0) + 1\n        max_freq = max(max_freq, freq[i])\n    count = 0\n    max_freq_count = 0\n    for i in freq:\n        if freq[i] < max_freq:\n            count += freq[i]\n        else:\n            max_freq_count += 1\n    if max_freq == 1:\n        ans = n\n    else:\n        ans = count // (max_freq - 1) + max_freq_count - 1\n    print(ans)", "import sys, math, heapq, collections, itertools, bisect\nsys.setrecursionlimit(101000)\n\ndef solve(n, a):\n    f = {}\n    mf = 0\n    for x in a:\n        f[x] = f.get(x, 0) + 1\n        mf = max(mf, f[x])\n    cmf = sum((int(v == mf) for v in f.values()))\n    n = n - (cmf - 1)\n    if mf == 2:\n        return n - 2\n    return (n - mf) // (mf - 1)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    mx = 0\n    dic = {}\n    flag = 0\n    for i in range(n):\n        if arr[i] not in dic:\n            dic[arr[i]] = 0\n        dic[arr[i]] += 1\n        mx = max(mx, dic[arr[i]])\n    for k in dic.keys():\n        if dic[k] == mx:\n            flag += 1\n    ct = n - flag * mx\n    if flag == 1 and ct == 0:\n        print(0)\n        continue\n    if flag == n:\n        print(n)\n        continue\n    if flag >= 1:\n        print(flag - 1 + int(ct // (mx - 1)))", "import io, os\nfrom collections import deque\nimport bisect\nRL = lambda : list(map(int, input().split(' ')))\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = RL()\n    dic = [0] * (n + 1)\n    for i in range(n):\n        dic[l[i]] += 1\n    dic.sort(reverse=True)\n    st = 0\n    for i in range(len(dic)):\n        if dic[i] == dic[0]:\n            st += 1\n        else:\n            break\n    rem = dic[0] - 1\n    cnt = st - 1\n    for i in range(st, len(dic)):\n        if dic[i] == 0:\n            break\n        new_rem = max(0, rem - dic[i])\n        if new_rem == 0:\n            cnt += 1\n            rem = dic[0] - 1 - (dic[i] - rem)\n        else:\n            rem = new_rem\n    print(cnt)", "import collections\n\ndef cakes(A):\n    n = len(A)\n    z = collections.Counter(A)\n    res = []\n    for i in z.keys():\n        res.append([z[i], i])\n    res.sort(reverse=True)\n    chamber = res[0][0] - 1\n    vacant = chamber\n    count = 0\n    for i in range(1, len(res)):\n        if res[i][0] >= res[0][0]:\n            res[i][0] = res[0][0] - 1\n            count += 1\n            vacant = chamber\n        else:\n            freq = res[i][0]\n            if freq == chamber:\n                count += 1\n                vacant = chamber\n            else:\n                vacant = vacant - freq\n                if vacant <= 0:\n                    count += 1\n                    vacant = chamber + vacant\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = [int(i) for i in input().split()][:n]\n    print(cakes(A))", "for _ in range(int(input())):\n    (n, a, num) = (int(input()), list(map(int, input().split())), [0] * (10 ** 5 + 1))\n    for i in range(n):\n        num[a[i]] += 1\n    MAX = max(num)\n    maxnum = num.count(MAX)\n    print((n - maxnum) // (MAX - 1) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = [0] * (10 ** 5 + 1)\n    for i in range(n):\n        num[a[i]] += 1\n    MAX = max(num)\n    maxnum = num.count(MAX)\n    print((n - maxnum) // (MAX - 1) - 1)", "from collections import Counter\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    C = sorted(Counter(A).values(), reverse=True)\n\n    def check(m):\n        for (i, c) in enumerate(C):\n            if (c - 1) * (m + 1) + i >= N:\n                return False\n        return True\n    (lb, ub) = (-1, N)\n    while ub - lb > 1:\n        m = (lb + ub) // 2\n        if check(m):\n            lb = m\n        else:\n            ub = m\n    return lb\nTC = int(input())\nfor _ in range(TC):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = [0] * (10 ** 5 + 1)\n    for i in range(n):\n        num[a[i]] += 1\n    MAX = max(num)\n    maxnum = num.count(MAX)\n    print((n - maxnum) // (MAX - 1) - 1)", "t = int(input())\nfor case in range(t):\n    fill_count = [0] * 100002\n    _ = input()\n    inp = map(int, input().split(' '))\n    for i in inp:\n        fill_count[i] += 1\n    fill_count = sorted(fill_count, reverse=True)\n    m = fill_count[0]\n    max_count = fill_count.count(m)\n    fillers = sum(fill_count[max_count:])\n    res = max_count - 1 + int(fillers / (m - 1))\n    print(res)", "import math\nfor _ in range(int(input())):\n    am = int(input())\n    arr = list(map(int, input().split()))\n    have = [0] * (am + 5)\n    ourSet = []\n    for i in range(am):\n        have[arr[i]] += 1\n        if have[arr[i]] == 1:\n            ourSet.append(arr[i])\n    l = len(ourSet)\n\n    def f(el):\n        return have[el]\n    ourSet.sort(key=f, reverse=True)\n    biggestAm = have[ourSet[0]]\n    deb = []\n    needAm = am\n    i = 0\n    lInd = 0\n    s = 0\n    added = 0\n    while i < needAm + added:\n        if have[ourSet[i % l]]:\n            deb.append(ourSet[i % l])\n            have[ourSet[i % l]] -= 1\n            if i % l == 0 and i != 0:\n                s += i - added - lInd - 1\n                lInd = i - added\n        else:\n            added += 1\n        i += 1\n    print(math.floor(s / (biggestAm - 1)))"]