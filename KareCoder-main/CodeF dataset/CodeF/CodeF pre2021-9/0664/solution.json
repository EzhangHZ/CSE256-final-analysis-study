["import sys\nfrom collections import defaultdict, deque\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().split()))\n\ndef e():\n    res = 0\n    (n, m) = read()\n    mat = [None] * n\n    for i in range(n):\n        mat[i] = read()\n    for col in range(m):\n        b = [0] * n\n        for row in range(n):\n            elem = mat[row][col]\n            place = row * m + col + 1\n            if elem <= n * m and (place - elem) % m == 0:\n                shift = (place - elem) // m if place >= elem else (n * m + place - elem) // m\n                b[shift] += 1\n        res += min((i + n - b[i] for i in range(n)))\n    print(res)\n\ndef d():\n    ans = ''\n    mex = 0\n    (q, x) = read()\n    arr = [0] * q + [0]\n    dic = {i: deque([i]) for i in range(x)}\n    for i in dic:\n        while dic[i][-1] + x < q + 1:\n            dic[i].append(dic[i][-1] + x)\n    for _ in range(q):\n        n = int(inp())\n        ind = dic[n % x].popleft() if dic[n % x] else n % x\n        arr[ind] = 1\n        while arr[mex] == 1:\n            mex += 1\n        ans += str(mex) + '\\n'\n    print(ans)\ne()", "import sys\nfrom collections import defaultdict, deque\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().split()))\n\ndef e():\n    res = 0\n    (n, m) = read()\n    mat = [None] * n\n    for i in range(n):\n        mat[i] = read()\n    for col in range(m):\n        b = [0] * n\n        for row in range(n):\n            elem = mat[row][col]\n            place = row * m + col + 1\n            if elem <= n * m and (place - elem) % m == 0:\n                shift = (place - elem) // m if place >= elem else (n * m + place - elem) // m\n                b[shift] += 1\n        res += min((i + n - b[i] for i in range(n)))\n    print(res)\n\ndef d():\n    ans = ''\n    mex = 0\n    (q, x) = read()\n    arr = [0] * q + [0]\n    dic = {i: deque([i]) for i in range(x)}\n    for i in dic:\n        while dic[i][-1] + x < q + 1:\n            dic[i].append(dic[i][-1] + x)\n    for _ in range(q):\n        n = int(inp())\n        ind = dic[n % x].popleft() if dic[n % x] else n % x\n        arr[ind] = 1\n        while arr[mex] == 1:\n            mex += 1\n        ans += str(mex) + '\\n'\n    print(ans)\ne()", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    (n, m) = mints()\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(mints())\n    r = 0\n    for j in range(m):\n        c = [0] * n\n        for i in range(n):\n            x = a[i][j] - 1\n            if x % m == j and x < n * m:\n                t = (x - j) // m\n                if i - t >= 0:\n                    c[i - t] += 1\n                else:\n                    c[i - t + n] += 1\n        mi = int(1000000000.0)\n        for i in range(n):\n            mi = min(mi, i + n - c[i])\n        r += mi\n    print(r)\nsolve()", "(n, m) = (int(i) for i in input().split())\na = [[int(i) for i in input().split()] for _ in range(n)]\nres = 0\nfor j in range(m):\n    b = [0] * n\n    for i in range(n):\n        if a[i][j] <= n * m and (a[i][j] - j - 1) % m == 0:\n            pos = (a[i][j] - j - 1) // m\n            shift = i - pos if i >= pos else i - pos + n\n            b[shift] += 1\n    res += min((i + n - b[i] for i in range(n)))\nprint(res)", "(n, m) = map(int, input().split())\ntbl = []\nfor _ in range(n):\n    tbl.append(list(map(int, input().split())))\nl = [[k + n for k in range(n)] for _ in range(m)]\nfor i in range(m):\n    for j in range(n):\n        a = (tbl[j][i] - 1) // m\n        b = (tbl[j][i] - 1) % m\n        if a <= n - 1 and b == i:\n            l[i][(j - a) % n] -= 1\nans = 0\nfor i in range(m):\n    ans += min(l[i])\nprint(ans)", "from collections import defaultdict\n\ndef solve():\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input().split())) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            l[i][j] -= 1\n    ans = 0\n    for i in range(m):\n        d = defaultdict(int)\n        for j in range(n):\n            if l[j][i] % m == i and l[j][i] < n * m:\n                d[(j + n - l[j][i] // m) % n] += 1\n        mn = n\n        for p in d.items():\n            if p[0] + (n - p[1]) < mn:\n                mn = p[0] + (n - p[1])\n        ans += mn\n    print(ans)\nsolve()", "def push(d, x):\n    if x not in d:\n        d[x] = 0\n    d[x] += 1\n\ndef solve(a, x, n, m):\n    need = {x + i * m: i for i in range(n)}\n    d = {}\n    for (i, val) in enumerate(a):\n        if val in need:\n            push(d, (i - need[val] + n) % n)\n    min_ = n\n    for (move, num) in d.items():\n        min_ = min(min_, move + n - num)\n    return min_\n(n, m) = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(n)]\nmin_ = 0\nfor x in range(1, m + 1):\n    a = [A[i][x - 1] for i in range(n)]\n    min_ += solve(a, x, n, m)\nprint(min_)", "(n, m) = (int(i) for i in input().split())\na = [[int(i) for i in input().split()] for _ in range(n)]\nres = 0\nfor j in range(m):\n    b = [0] * n\n    for i in range(n):\n        if a[i][j] <= n * m and (a[i][j] - j - 1) % m == 0:\n            pos = (a[i][j] - j - 1) // m\n            shift = i - pos if i >= pos else i - pos + n\n            b[shift] += 1\n    res += min((i + n - b[i] for i in range(n)))\nprint(res)", "(n, m) = map(int, input().split())\nmatr = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(m):\n    cost = list(range(n, 2 * n))\n    for j in range(n):\n        matr[j][i] -= i + 1\n        if matr[j][i] % m == 0:\n            matr[j][i] //= m\n            if 0 <= matr[j][i] < n:\n                shift = (j + n - matr[j][i]) % n\n                cost[shift] -= 1\n    ans += min(cost)\nprint(ans)", "(n, m) = map(int, input().split())\nmat = [[int(x) for x in input().split()] for j in range(n)]\nmoves = 0\nfor j in range(m):\n    rotate = [0] * n\n    rotations = 0\n    num_of_elements = 0\n    for i in range(n):\n        if mat[i][j] <= (n - 1) * m + j + 1 and mat[i][j] > j and ((mat[i][j] - 1 - j) % m == 0):\n            pos = (mat[i][j] - (j + 1)) // m\n            rot = (i - pos + n) % n\n            rotate[rot] += 1\n    min_sub_moves = n\n    z = 0\n    for k in range(n):\n        z = n - rotate[k] + k\n        if z < min_sub_moves:\n            min_sub_moves = z\n    moves += min_sub_moves\nprint(moves)", "import sys\n(n, m) = [int(i) for i in sys.stdin.readline().split()]\nd = []\nfor j in range(n):\n    d.append([int(i) for i in sys.stdin.readline().split()])\ndd = [[d[j][i] for j in range(n)] for i in range(m)]\nans = 0\nfor i in range(m):\n    diff = [(j * m + i + 1 - dd[i][j]) % (n * m) if dd[i][j] <= n * m else -1 for j in range(n)]\n    dic = {}\n    for dif in diff:\n        if dif in dic:\n            dic[dif] += 1\n        else:\n            dic[dif] = 1\n    mn = n\n    for sh in range(n):\n        tee = m * sh\n        am = 0\n        if tee in dic:\n            am = dic[tee]\n        mn = min(n - am + sh, mn)\n    ans += mn\nprint(ans)", "(n, m) = map(int, input().split())\nmat = [[int(x) for x in input().split()] for j in range(n)]\nmoves = 0\nfor j in range(m):\n    rotate = [0] * n\n    rotations = 0\n    num_of_elements = 0\n    for i in range(n):\n        if mat[i][j] <= (n - 1) * m + j + 1 and mat[i][j] > j and ((mat[i][j] - 1 - j) % m == 0):\n            pos = (mat[i][j] - (j + 1)) // m\n            rot = (i - pos + n) % n\n            rotate[rot] += 1\n    min_sub_moves = n\n    z = 0\n    for k in range(n):\n        z = n - rotate[k] + k\n        if z < min_sub_moves:\n            min_sub_moves = z\n    moves += min_sub_moves\nprint(moves)", "(n, m) = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\nans = 0\nfor j in range(m):\n    cnt = [0 for i in range(n)]\n    cur = n\n    for i in range(n):\n        if (a[i][j] - (j + 1)) % m == 0 and a[i][j] <= m * n:\n            x = int((m * i - (a[i][j] - (j + 1))) / m)\n            x += n\n            x %= n\n            cnt[x] += 1\n    for i in range(n):\n        cur = min(cur, i + n - cnt[i])\n    ans += cur\nprint(ans)"]