["for s in [*open(0)][2::2]:\n    (x, *l) = map(int, s.split())\n    a = y = 0\n    for i in l:\n        x = min(x, i - y)\n        y = max(y, i - x)\n        a |= x < 0\n    print('YNEOS'[a::2])", "for s in [*open(0)][2::2]:\n    (x, *l) = map(int, s.split())\n    a = 'YES'\n    y = 0\n    for i in l:\n        x = min(x, i - y)\n        y = max(y, i - x)\n        if x < 0:\n            a = 'NO'\n            break\n    print(a)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        B = [A[i + 1] - A[i] for i in range(n - 1)]\n        plus = A[-1]\n        need_plus = 0\n        for i in range(n - 1):\n            if B[i] >= 0:\n                need_plus += B[i]\n        print('YES' if plus >= need_plus else 'NO')\nresolve()", "from typing import List\nn = int(input())\ndata = []\nfor i in range(n):\n    l = int(input())\n    tdata = []\n    for chnum in input().split(' '):\n        tdata.append(int(chnum))\n    data.append(tdata)\n\ndef Solution(data: List[int]) -> str:\n    last_num = 0\n    tnum1 = 0\n    for tnum in data:\n        if tnum - last_num < 0:\n            tnum1 += tnum - last_num\n        last_num = tnum\n    if -tnum1 <= data[0]:\n        return 'YES'\n    return 'NO'\nfor tdata in data:\n    print(Solution(tdata))", "def solve(n, a):\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    print('YES') if s <= a[0] else print('NO')\nfor j in range(int(input())):\n    solve(int(input()), list(map(int, input().split())))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    r = a[0]\n    for i in range(1, n):\n        if a[i - 1] > a[i]:\n            r -= a[i - 1] - a[i]\n    print('YES') if r >= 0 else print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    if s <= a[0]:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = map(int, input().split())\n    (l, r) = (10000000000, 0)\n    possible = True\n    for a in A:\n        if a < r:\n            possible = False\n            break\n        a -= r\n        l = min(l, a)\n        r += a - l\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "for s in [*open(0)][2::2]:\n    (x, *l) = map(int, s.split())\n    a = 'YES'\n    y = 0\n    for i in l:\n        x = min(x, i - y)\n        y = max(y, i - x)\n        if x < 0:\n            a = 'NO'\n            break\n    print(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    diff = [0] * n\n    diff[0] = arr[0]\n    sum = 0\n    for i in range(1, n):\n        diff[i] = arr[i] - arr[i - 1]\n        if diff[i] < 0:\n            sum -= diff[i]\n    if sum > diff[0]:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef possible(a):\n    if len(a) == 0:\n        return 'YES'\n    if a[0] < 0:\n        return 'NO'\n    if len(a) == 1:\n        return 'YES'\n    if a[0] > a[1]:\n        return possible(a[1:])\n    if a[-1] > a[-2]:\n        return possible(a[:-1])\n    return possible([x - a[1] + a[0] for x in a[1:]])\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n < 3:\n        print('YES')\n    else:\n        reduceAll = 0\n        for item in range(n - 1):\n            diff = a[item] - a[item + 1]\n            if a[item] - reduceAll < 0:\n                a[-1] = -1\n                break\n            elif diff < 0:\n                reduceAll -= diff\n        if a[-1] - reduceAll < 0:\n            print('NO')\n        else:\n            print('YES')", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    R()\n    (pre, sur) = (float('inf'), 0)\n    for a in R():\n        if sur > a:\n            print('NO')\n            break\n        if pre + sur < a:\n            sur = a - pre\n        else:\n            pre = a - sur\n    else:\n        print('YES')", "for y in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            cnt += lst[i] - lst[i + 1]\n    if cnt <= lst[0]:\n        print('YES')\n    else:\n        print('NO')", "import math\nimport sys, bisect\nfrom heapq import *\nfrom itertools import *\nfrom collections import *\nsys.setrecursionlimit(10 ** 6)\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    n = I()\n    A = Neo()\n    t = sum((max(0, A[i - 1] - A[i]) for i in range(1, n)))\n    if t <= A[0]:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = map(int, input().split())\n    (l, r) = (math.inf, 0)\n    possible = True\n    for a in A:\n        if a < r:\n            possible = False\n            break\n        a -= r\n        l = min(l, a)\n        r += a - l\n    print('YES' if possible else 'NO')", "total = int(input())\nfor _ in range(total):\n    size = int(input())\n    arr = [int(c) for c in input().split()]\n    (preOperationCount, postOperationCount) = (arr[0], 0)\n    for val in arr:\n        if val < postOperationCount:\n            print('NO')\n            break\n        else:\n            postOperationCount = max(val - preOperationCount, postOperationCount)\n            preOperationCount = min(preOperationCount, val - postOperationCount)\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    d = [0] * n\n    d[0] = a[0]\n    can = True\n    for i in range(1, n):\n        d[i] = a[i] - a[i - 1]\n        if d[i] < 0:\n            d[0] += d[i]\n            d[i] = 0\n            if d[0] < 0:\n                can = False\n                break\n        elif d[i] > 0:\n            d[i] -= d[i]\n    print('YES') if can else print('NO')", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    l = list(map(int, input().split()))\n    des_num = 0\n    for i in range(len(l) - 1):\n        if l[i + 1] - des_num < 0:\n            print('NO')\n            break\n        if l[i] < l[i + 1]:\n            des_num += l[i + 1] - l[i]\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = p = a[0]\n    for i in range(1, n):\n        if a[i] < p:\n            s -= p - a[i]\n        p = a[i]\n    if s < 0:\n        print('NO')\n    else:\n        print('YES')", "tests = int(input())\nfor test in range(tests):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        if i > 0 and a[i] > a[i - 1]:\n            l[i] = a[i] - a[i - 1]\n        if i < n - 1 and a[i] > a[i + 1]:\n            r[i] = a[i] - a[i + 1]\n    rr = 0\n    for i in range(n):\n        rr += l[i]\n        a[i] -= rr\n    ll = 0\n    for i in range(n - 1, -1, -1):\n        ll += r[i]\n        a[i] -= ll\n    if a[0] >= 0 and sum(a) == a[0] * n:\n        print('YES')\n    else:\n        print('NO')", "import sys\nsys.setrecursionlimit(10 ** 5)\nfrom collections import defaultdict as dft, deque, Counter\nfrom heapq import heappush, heappop\n\ndef mp():\n    return map(int, input().split())\n\ndef ml():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(input())\n    arr = ml()\n    mini = [0] * n\n    mn = mxn\n    for i in range(n - 1, -1, -1):\n        mini[i] = mn\n        mn = min(mn, arr[i])\n    delkiye = 0\n    pre = mxn\n    for i in range(n - 1):\n        if arr[i] - delkiye <= pre:\n            pre = arr[i] - delkiye\n        else:\n            diff = arr[i] - delkiye - pre\n            mn = mini[i] - delkiye\n            if mn < diff:\n                return 'NO'\n            delkiye += diff\n    return 'YES'\nmxn = 10 ** 9\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    if s <= a[0]:\n        print('YES')\n    else:\n        print('NO')", "def answer():\n    (dec, m) = (0, a[0])\n    for i in range(1, n):\n        if a[i - 1] < a[i]:\n            dec += a[i] - a[i - 1]\n        m = min(m, a[i] - dec)\n        if m < 0:\n            return 'NO'\n    return 'YES'\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer())", "total = int(input())\nfor _ in range(total):\n    size = int(input())\n    arr = [int(c) for c in input().split()]\n    preOperationCount = arr[0]\n    rightOperationCount = 0\n    for val in arr:\n        if val < rightOperationCount:\n            print('NO')\n            break\n        else:\n            rightOperationCount = max(val - preOperationCount, rightOperationCount)\n            preOperationCount = min(preOperationCount, val - rightOperationCount)\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = a[0]\n    for i in range(n - 1, 0, -1):\n        a[i] = a[i] - a[i - 1]\n        if a[i] < 0:\n            m += a[i]\n    if m >= 0:\n        print('YES')\n    else:\n        print('NO')", "def process(A):\n    a0 = A[0]\n    b0 = 0\n    n = len(A)\n    for i in range(n):\n        X = A[i]\n        if 0 <= X - b0 <= a0:\n            b1 = b0\n            a1 = X - b0\n        elif X - a0 >= b0:\n            a1 = a0\n            b1 = X - a0\n        else:\n            return 'NO'\n        (a0, b0) = (a1, b1)\n    return 'YES'\nt = int(input())\nfor I in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    print(process(A))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [a[i] if i == 0 else a[i] - a[i - 1] for i in range(n)]\n    if abs(sum((x for x in d if x < 0))) <= d[0]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    if s <= a[0]:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nanswer = []\nfor i in range(n):\n    k = int(input())\n    list = input().split()\n    for j in range(k):\n        list[j] = int(list[j])\n    result = True\n    leftIndex = 0\n    leftPoints = list[0]\n    rightPoints = 0\n    rightMaxPoints = 0\n    for j in range(1, k - 1):\n        if list[j] < rightPoints:\n            result = False\n            break\n        if list[j] < leftPoints + rightPoints:\n            if list[j] < rightPoints:\n                result = False\n                break\n            else:\n                leftPoints = list[j] - rightPoints\n        else:\n            rightPoints = list[j] - leftPoints\n    if list[k - 1] < rightPoints:\n        result = False\n    answer.append(result)\nfor i in range(n):\n    if answer[i]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = True\n    i = n - 2\n    total = 0\n    while i > 0:\n        if arr[i] <= arr[i + 1]:\n            i -= 1\n        else:\n            total += arr[i] - arr[i + 1]\n            i -= 1\n        if arr[i] - total < 0:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, a):\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    print('YES') if s <= a[0] else print('NO')\nfor j in range(int(input())):\n    solve(int(input()), list(map(int, input().split())))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = a[0]\n    r = 0\n    for i in range(1, n):\n        x = a[i]\n        x -= r\n        if x < 0:\n            return 'NO'\n        if x > l:\n            r += x - l\n        else:\n            l = x\n    return 'YES'\nt = int(input())\ni = 0\nwhile i < t:\n    print(solve())\n    i += 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = a[0]\n    for i in range(1, n):\n        diff = a[i] - a[i - 1]\n        if diff < 0 and d >= 0:\n            d += diff\n    if d < 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[-1] - sum((max(a[i + 1] - a[i], 0) for i in range(n - 1))) >= 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 1\n    l = 0\n    g = a[0]\n    while i < n and a[i] <= a[i - 1]:\n        g = min(g, a[i])\n        i += 1\n    l = i - 1\n    i = n - 2\n    h = a[-1]\n    while i >= 0 and a[i + 1] >= a[i]:\n        h = min(h, a[i])\n        i -= 1\n    r = i + 1\n    if r <= l:\n        print('YES')\n    else:\n        p = 0\n        q = 0\n        for i in range(l + 1, r + 1):\n            if a[i] <= a[i - 1]:\n                p += abs(a[i - 1] - a[i])\n        for i in range(r - 1, l - 1, -1):\n            if a[i] <= a[i + 1]:\n                q += abs(a[i + 1] - a[i])\n        if p <= g or q <= h:\n            print('YES')\n        else:\n            print('NO')", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [0] + a\n    print('YES' if sum([max(0, a[i - 1] - a[i]) for i in range(1, n + 1)]) <= a[1] else 'NO')\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] - sum((-min(a[i] - a[i - 1], 0) for i in range(1, n))) >= 0:\n        print('YES')\n    else:\n        print('NO')", "I = lambda : map(int, input().split(' '))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [*I()]\n    s = 0\n    for i in range(n - 1):\n        s = s + max(0, arr[i] - arr[i + 1])\n    if s <= arr[0]:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, a):\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    print('YES') if s <= a[0] else print('NO')\nfor j in range(int(input())):\n    solve(int(input()), list(map(int, input().split())))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (cur, maxn, flag, res) = (0, 0, 0, 1)\n    for i in range(1, n):\n        if flag == 0 and a[i] > a[i - 1]:\n            maxn = a[i - 1]\n            cur = a[i] - maxn\n            flag = 1\n        elif flag == 1 and a[i] >= cur:\n            maxn = min(maxn, a[i] - cur)\n            cur = a[i] - maxn\n        elif flag == 1 and a[i] < cur:\n            res = 0\n            break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, a):\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    print('YES') if s <= a[0] else print('NO')\nfor j in range(int(input())):\n    solve(int(input()), list(map(int, input().split())))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lst = 0\n    for i in range(1, n):\n        lst += max(a[i] - a[i - 1], 0)\n    if lst <= a[-1]:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    n = int(input().strip())\n    arr = [int(x) for x in input().strip().split()]\n    incr = [0] * n\n    decr = [0] * n\n    decr[0] = arr[0]\n    for i in range(1, n):\n        decr[i] = min(arr[i] - incr[i - 1], decr[i - 1])\n        incr[i] = arr[i] - decr[i]\n    for i in range(1, n):\n        if incr[i] < incr[i - 1]:\n            return 'NO'\n        if incr[i] < 0:\n            return 'NO'\n    for i in range(1, n):\n        if decr[i] > decr[i - 1]:\n            return 'NO'\n        if decr[i] < 0:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input().strip())):\n    print(solve())", "def solve(n, a):\n    s = sum([max(0, a[i] - a[i + 1]) for i in range(n - 1)])\n    print('YES') if s <= a[0] else print('NO')\nfor j in range(int(input())):\n    solve(int(input()), list(map(int, input().split())))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    ans = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    result = 0\n    for i in range(1, n):\n        if ans[i] < 0:\n            result = result + -1 * ans[i]\n    if result <= a[1]:\n        print('YES')\n    else:\n        print('NO')", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\nsys.setrecursionlimit(99999)\n\ndef solve(arr):\n    dp = [arr[0], 0]\n    for cur in range(1, len(arr)):\n        for nq in range(max(dp[1], arr[cur] - dp[0]), arr[cur] + 1):\n            if 0 <= arr[cur] - nq <= min(dp[0], arr[cur]):\n                dp = [arr[cur] - nq, nq]\n                break\n            elif arr[cur] - nq < 0:\n                return False\n        else:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if solve(arr):\n        print('YES')\n    else:\n        print('NO')"]