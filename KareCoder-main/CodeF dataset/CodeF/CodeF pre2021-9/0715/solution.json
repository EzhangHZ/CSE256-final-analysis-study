["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    s = [0] * n\n    for i in range(n):\n        v = p[i] - 1\n        s[(i - v) % n] += 1\n    z = n - 2 * m\n    r = []\n    for i in range(n):\n        if s[i] >= z:\n            w = [True] * n\n            c = 0\n            for j in range(n):\n                if w[j]:\n                    c += 1\n                    while w[j]:\n                        w[j] = False\n                        v = p[j] - 1\n                        j = (v + i) % n\n            if n - c <= m:\n                r.append(i)\n    print(len(r), end=' ')\n    print(' '.join(map(str, r)))\nfor i in range(int(input())):\n    solve()", "t = int(input())\nresults = []\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    nums = [int(num) - 1 for num in input().split()]\n    counts = {}\n    for (j, num) in enumerate(nums):\n        val = (j - num) % n\n        counts[val] = counts.get(val, 0) + 1\n    res = []\n    for k in counts:\n        if counts[k] < n - 2 * m:\n            continue\n        shifted = nums[k:] + nums[:k]\n        tested = [True] * n\n        to_swap = 0\n        for index in range(len(tested)):\n            current_count = 0\n            current_index = index\n            while True:\n                if tested[current_index]:\n                    tested[current_index] = False\n                    current_count += 1\n                    current_index = shifted[current_index]\n                else:\n                    break\n            if current_count != 0:\n                to_swap += current_count - 1\n        if to_swap <= m:\n            res.append(k)\n    results.append(res)\nfor i in range(t):\n    if len(results[i]) == 0:\n        print(0)\n    else:\n        print(len(results[i]), end=' ')\n        print(' '.join((str(k) for k in sorted(results[i]))))", "def solve(n, m, arr):\n    intervals = [0] * n\n    for i in range(n):\n        v = arr[i] - 1\n        intervals[(i - v) % n] += 1\n    minimal = n - 2 * m\n    output = []\n    for k in range(n):\n        if intervals[k] >= minimal:\n            visited = [False] * n\n            result = 0\n            for x in range(n):\n                curr = (x + k) % n\n                if not visited[curr]:\n                    result += 1\n                    while not visited[curr]:\n                        visited[curr] = True\n                        curr = (arr[curr] + k - 1) % n\n            if result >= n - m:\n                output.append(k)\n    print(len(output), end=' ')\n    print(*output, sep=' ')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    solve(n, m, arr)", "def check(A, n, m, k):\n    shifted = [0] * n\n    for i in range(n):\n        shifted[(i + k) % n] = i\n    goTo = [0] * n\n    for i in range(n):\n        goTo[shifted[i]] = A[i] - 1\n    done = [False] * n\n    total_swaps = 0\n    for i in range(n - 1):\n        if done[i]:\n            continue\n        done[i] = True\n        cur = i\n        while not done[goTo[cur]]:\n            cur = goTo[cur]\n            done[cur] = True\n            total_swaps += 1\n    return total_swaps <= m\n\ndef solve(A, n, m):\n    cnt = [0] * n\n    for (i, it) in enumerate(A):\n        cnt[(i - it + 1) % n] += 1\n    ans = []\n    for k in range(n):\n        if cnt[k] + 2 * m >= n and check(A, n, m, k):\n            ans.append(k)\n    print(len(ans), *ans)\nfor case in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    solve(A, n, m)", "def solve(n, m, arr):\n    intervals = [0] * n\n    for i in range(n):\n        v = arr[i] - 1\n        intervals[(i - v) % n] += 1\n    minimal = n - 2 * m\n    output = []\n    for k in range(n):\n        if intervals[k] >= minimal:\n            visited = [False for _ in range(n)]\n            result = 0\n            for x in range(n):\n                if not visited[(x + k) % n]:\n                    rem = (x + k) % n\n                    visited[rem] = True\n                    curr = (arr[(x + k) % n] + k - 1) % n\n                    while curr != rem:\n                        visited[curr] = True\n                        result += 1\n                        curr = (arr[curr] + k - 1) % n\n            if result <= m:\n                output.append(k)\n    print(len(output), end=' ')\n    print(*output, sep=' ')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    solve(n, m, arr)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[(i + 1 - p[i]) % n] += 1\n    res = []\n    for i in range(n):\n        if c[i] >= n - 2 * m:\n            swaps = 0\n            norm = [0] * n\n            rev_map = [0] * n\n            for j in range(n):\n                norm[j] = (p[j] + i - 1) % n\n                rev_map[norm[j]] = j\n            for j in range(n):\n                if norm[j] != j:\n                    k = norm[j]\n                    ind_j = rev_map[j]\n                    (norm[ind_j], norm[j]) = (k, j)\n                    (rev_map[k], rev_map[j]) = (ind_j, j)\n                    swaps += 1\n            if swaps <= m:\n                res.append(i)\n    print(len(res), *res)", "def comps(q, n):\n    for i in range(n):\n        q[i] -= 1\n    vis = [0] * n\n    ans = 0\n    for i in range(n):\n        if vis[i] == 1:\n            continue\n        j = i\n        while vis[j] == 0:\n            vis[j] = 1\n            j = q[j]\n        ans += 1\n    return ans\n\ndef check(n, m, k, p):\n    q = []\n    for i in range(k, n):\n        q.append(p[i])\n    for i in range(k):\n        q.append(p[i])\n    if n - comps(q, n) <= m:\n        return 1\n    else:\n        return 0\nt = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    cnt = [0] * n\n    for i in range(n):\n        pos = i + 1 - p[i]\n        if pos < 0:\n            pos += n\n        cnt[pos] += 1\n    cycles = []\n    for i in range(n):\n        if cnt[i] >= n - 2 * m and check(n, m, i, p):\n            cycles.append(i)\n    print(len(cycles), end=' ')\n    for i in range(len(cycles)):\n        print(cycles[i], end=' ')\n    print()", "from collections import Counter\n\ndef count_swaps(p, k):\n    n = len(p)\n    visited = [False] * n\n    loops = 0\n    for i in range(n):\n        loops += not visited[i]\n        while not visited[i]:\n            visited[i] = True\n            i = (p[i] + k - 1) % n\n    return n - loops\n\ndef solve():\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = Counter(((i - pi) % n for (i, pi) in enumerate(p, start=1)))\n    for (k, cnt) in c.most_common(3):\n        if count_swaps(p, k) <= m:\n            yield k\nfor __ in range(int(input())):\n    arr = sorted(solve())\n    print(len(arr), *arr)", "from collections import Counter\n\ndef readline():\n    return map(int, input().split())\n\ndef count_swaps(p, k):\n    n = len(p)\n    visited = [False] * n\n    loops = 0\n    for i in range(n):\n        loops += not visited[i]\n        while not visited[i]:\n            visited[i] = True\n            i = (p[i] + k - 1) % n\n    return n - loops\n\ndef solve():\n    (n, m) = readline()\n    p = list(readline())\n    c = Counter(((i - pi) % n for (i, pi) in enumerate(p, start=1)))\n    for (k, cnt) in c.most_common(3):\n        if count_swaps(p, k) <= m:\n            yield k\nt = int(input())\nfor __ in range(t):\n    arr = sorted(solve())\n    print(len(arr), *arr)", "from collections import Counter\n\ndef count_swaps(p, k):\n    n = len(p)\n    visited = [False] * n\n    loops = 0\n    for i in range(n):\n        loops += not visited[i]\n        while not visited[i]:\n            visited[i] = True\n            i = (p[i] + k - 1) % n\n    return n - loops\n\ndef solve():\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = Counter(((i - pi) % n for (i, pi) in enumerate(p, start=1)))\n    for (k, cnt) in c.most_common(3):\n        if count_swaps(p, k) <= m:\n            yield k\nfor __ in range(int(input())):\n    arr = sorted(solve())\n    print(len(arr), *arr)", "from collections import Counter\n\ndef count_swaps(p, k):\n    n = len(p)\n    visited = [False] * n\n    loops = 0\n    for i in range(n):\n        loops += not visited[i]\n        while not visited[i]:\n            visited[i] = True\n            i = (p[i] + k - 1) % n\n    return n - loops\n\ndef solve():\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = Counter(((i - pi) % n for (i, pi) in enumerate(p, start=1)))\n    for (k, cnt) in c.most_common(3):\n        if count_swaps(p, k) <= m:\n            yield k\nfor __ in range(int(input())):\n    arr = sorted(solve())\n    print(len(arr), *arr)"]