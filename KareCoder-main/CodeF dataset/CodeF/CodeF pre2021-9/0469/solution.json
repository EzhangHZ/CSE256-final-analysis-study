["result = []\n\ndef code():\n    (n, k) = map(int, input().split())\n    pos_k = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    big = 10 ** 10 + 1\n    L = [big] * n\n    for x in range(k):\n        L[pos_k[x] - 1] = temp[x]\n    R = L[:]\n    current = big + 1\n    for x in range(n):\n        current = min(current + 1, L[x])\n        L[x] = current\n    current2 = big + 1\n    for x in range(n - 1, -1, -1):\n        current2 = min(current2 + 1, R[x])\n        R[x] = current2\n    result.append(list((min(R[x], L[x]) for x in range(n))))\nq = int(input())\nfor test in range(q):\n    nothing = input()\n    code()\nfor x in result:\n    print(' '.join((str(y) for y in x)))", "def task():\n    input()\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) - 1 for x in input().split()]\n    t = [int(x) for x in input().split()]\n    cond = []\n    inf = float('inf')\n    ans = [inf] * n\n    for (i, temp) in zip(a, t):\n        ans[i] = temp\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1] + 1, ans[i])\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i + 1] + 1, ans[i])\n    return ' '.join([str(x) for x in ans])\nT = int(input())\nfor _ in range(T):\n    print(task())", "def main():\n    for _ in range(int(input())):\n        input()\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        t = list(map(int, input().split()))\n        b = {}\n        for i in range(k):\n            b[a[i] - 1] = t[i]\n        r = [float('inf')] * n\n        c = float('inf')\n        for i in range(n):\n            if i in b and b[i] < c:\n                c = b[i]\n            r[i] = min(r[i], c)\n            c += 1\n        c = float('inf')\n        for i in range(n - 1, -1, -1):\n            if i in b and b[i] < c:\n                c = b[i]\n            r[i] = min(r[i], c)\n            c += 1\n        print(' '.join([str(x) for x in r]))\nmain()", "INF = 1 << 42\n\ndef solve():\n    A = [INF] * (N + 1)\n    for (pos, t) in zip(P, B):\n        A[pos] = t\n    temp = [INF] * (N + 1)\n    for i in range(1, N + 1):\n        temp[i] = min(temp[i - 1] + 1, A[i])\n    for i in range(N - 1, 0, -1):\n        temp[i] = min(temp[i], temp[i + 1] + 1, A[i])\n    return temp[1:]\ntest_cases = int(input())\nfor test_case in range(test_cases):\n    input()\n    (N, K) = map(int, input().split())\n    P = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    print(*solve())", "from collections import *\nfrom math import *\nTT = int(input())\nfor y in range(TT):\n    s = input()\n    (n, m) = map(int, input().split())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    bas = 10 ** 10 + 1\n    arr = [bas] * n\n    for i in range(m):\n        arr[lst1[i] - 1] = lst2[i]\n    cur = arr[0]\n    for i in range(1, n):\n        cur = min(cur + 1, arr[i])\n        arr[i] = cur\n    cur = arr[-1]\n    for i in range(n - 1, -1, -1):\n        cur = min(cur + 1, arr[i])\n        arr[i] = cur\n    print(*arr)", "t = int(input())\nfor _ in range(t):\n    input()\n    (n, k) = map(int, input().split())\n    strip = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    answer = [float('inf')] * n\n    for i in range(k):\n        answer[strip[i] - 1] = temp[i]\n    for i in range(1, n):\n        answer[i] = min(answer[i], answer[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        answer[i - 1] = min(answer[i - 1], 1 + answer[i])\n    print(*answer)", "for _ in range(int(input())):\n    x = input()\n    (n, k) = map(int, input().split())\n    l = [1 << 31] * n\n    for (idx, t) in zip(map(int, input().split()), map(int, input().split())):\n        l[idx - 1] = t\n    for i in range(1, n):\n        l[i] = min(l[i], l[i - 1] + 1)\n    for i in range(n - 2, -1, -1):\n        l[i] = min(l[i], l[i + 1] + 1)\n    print(*l)", "for _ in range(int(input())):\n    x = input()\n    (n, k) = map(int, input().split())\n    l = [1 << 31] * n\n    for (idx, t) in zip(map(int, input().split()), map(int, input().split())):\n        l[idx - 1] = t\n    for i in range(1, n):\n        l[i] = min(l[i], l[i - 1] + 1)\n    for i in range(n - 2, -1, -1):\n        l[i] = min(l[i], l[i + 1] + 1)\n    print(*l)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sol = [300000000000005] * n\n    for (x, y) in zip(a, b):\n        sol[x - 1] = y\n    j = 0\n    for i in range(1, n):\n        sol[i] = min(sol[i - 1] + 1, sol[i])\n    for i in range(n - 2, -1, -1):\n        sol[i] = min(sol[i + 1] + 1, sol[i])\n    print(*sol)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    res = [float('inf')] * n\n    for i in range(k):\n        res[a[i] - 1] = t[i]\n    for i in range(1, n):\n        res[i] = min(res[i], res[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        res[i - 1] = min(res[i - 1], 1 + res[i])\n    print(*res)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pos = [int(1 << 32)] * (n + 5)\n    for i in range(k):\n        pos[a[i]] = min(pos[a[i]], b[i])\n    res = [int(1 << 32)] * (n + 5)\n    mn = int(1 << 32)\n    for i in range(1, n + 1):\n        if pos[i] < mn:\n            mn = pos[i]\n        res[i] = min(res[i], mn)\n        mn += 1\n    mn = int(1 << 32)\n    for i in list(reversed(range(1, n + 1))):\n        if pos[i] < mn:\n            mn = pos[i]\n        res[i] = min(res[i], mn)\n        mn += 1\n    for i in range(1, n + 1):\n        print(res[i], end=' ')\n    print()\nfor t in range(int(input())):\n    charming()", "t = int(input())\nfor j in range(t):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    final = [10 ** 10 for i in range(n)]\n    for i in range(k):\n        final[a[i] - 1] = t[i]\n    for i in range(1, n):\n        final[i] = min(final[i - 1] + 1, final[i])\n    for i in range(n - 2, -1, -1):\n        final[i] = min(final[i], final[i + 1] + 1)\n    print(*final)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    res = [float('inf')] * n\n    for i in range(k):\n        res[a[i] - 1] = t[i]\n    for i in range(1, n):\n        res[i] = min(res[i], res[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        res[i - 1] = min(res[i - 1], 1 + res[i])\n    print(*res)", "for q in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    ans = [10 ** 14] * n\n    for i in range(len(a)):\n        ans[a[i] - 1] = t[i]\n    for i in range(n - 1):\n        if ans[i] != 10 ** 14:\n            ans[i + 1] = min(ans[i] + 1, ans[i + 1])\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i + 1] + 1, ans[i])\n    print(*ans)", "from functools import lru_cache\nncases = int(input())\nq = []\nwhile ncases:\n    _ = input()\n    (n, k) = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    res = [float('inf')] * n\n    for i in range(k):\n        res[pos[i] - 1] = temp[i]\n    for i in range(1, n):\n        res[i] = min(res[i], res[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        res[i - 1] = min(res[i - 1], 1 + res[i])\n    print(*res)\n    ncases -= 1", "q = int(input())\nfor _ in range(q):\n    input()\n    (n, k) = [int(x) for x in input().split()]\n    pos = [int(x) for x in input().split()]\n    temp = [int(x) for x in input().split()]\n    temperature = [-1] * n\n    for i in range(k):\n        temperature[pos[i] - 1] = temp[i]\n    L = [float('inf')] * (n + 1)\n    R = [float('inf')] * (n + 1)\n    for i in range(1, n + 1):\n        if temperature[i - 1] != -1:\n            L[i] = min(L[i - 1] + 1, temperature[i - 1])\n        else:\n            L[i] = L[i - 1] + 1\n    for i in range(n - 1, -1, -1):\n        if temperature[i] != -1:\n            R[i] = min(R[i + 1] + 1, temperature[i])\n        else:\n            R[i] = R[i + 1] + 1\n    ans = [min(L[x + 1], R[x]) for x in range(n)]\n    print(' '.join([str(x) for x in ans]))", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    res = [float('inf')] * n\n    for i in range(k):\n        res[a[i] - 1] = t[i]\n    for i in range(1, n):\n        res[i] = min(res[i], res[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        res[i - 1] = min(res[i - 1], 1 + res[i])\n    print(*res)", "def solve():\n    maxn = 10 ** 19\n    ans = []\n    l = [maxn] * n\n    r = [maxn] * n\n    c = [maxn] * n\n    for i in range(k):\n        c[a[i] - 1] = t[i]\n    l[0] = c[0]\n    r[-1] = c[-1]\n    for i in range(1, n):\n        l[i] = min(l[i - 1] + 1, c[i])\n    for i in range(n - 2, -1, -1):\n        r[i] = min(r[i + 1] + 1, c[i])\n    for i in range(n):\n        ans.append(min(l[i], r[i]))\n    return ans\nfor q in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    print(*solve())", "for _ in range(int(input())):\n    emp = input()\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    t = [int(i) for i in input().split()]\n    ans = [float('inf')] * n\n    for i in range(k):\n        ans[a[i] - 1] = t[i]\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1] + 1, ans[i])\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i], ans[i + 1] + 1)\n    print(*ans)", "for _ in range(int(input())):\n    emp = input()\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    t = [int(i) for i in input().split()]\n    ans = [float('inf')] * n\n    for i in range(k):\n        ans[a[i] - 1] = t[i]\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1] + 1, ans[i])\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i], ans[i + 1] + 1)\n    print(*ans)", "for _ in range(int(input())):\n    emp = input()\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    t = [int(i) for i in input().split()]\n    ans = [float('inf')] * n\n    for i in range(k):\n        ans[a[i] - 1] = t[i]\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1] + 1, ans[i])\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i], ans[i + 1] + 1)\n    print(*ans)", "def f(n, k, ind, val):\n    ar = [float('inf')] * n\n    for i in range(len(ind)):\n        ar[ind[i] - 1] = val[i]\n    l = [float('inf')] * n\n    r = [float('inf')] * n\n    base = float('inf')\n    for i in range(0, n):\n        base = min(base + 1, ar[i])\n        l[i] = base\n    base = float('inf')\n    for i in range(n - 1, -1, -1):\n        base = min(base + 1, ar[i])\n        r[i] = base\n    for i in range(n):\n        print(min(l[i], r[i]), end=' ')\n    print('\\n')\nfor _ in range(int(input())):\n    s = input()\n    (n, k) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    lst2 = list(map(int, input().strip().split()))\n    f(n, k, lst, lst2)", "import math\nimport sys\ninp = int(input())\nfor _ in range(inp):\n    input()\n    temp = float('inf')\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    t = list(map(int, input().split(' ')))\n    c = [temp] * n\n    for i in range(k):\n        c[a[i] - 1] = t[i]\n    L = [temp] * n\n    R = [temp] * n\n    p = temp * n\n    for i in range(n):\n        p = min(p + 1, c[i])\n        L[i] = p\n    p = temp\n    res = [0] * n\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, c[i])\n        res[i] = min(L[i], p)\n    print(*res)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    res = [float('inf')] * n\n    for i in range(k):\n        res[a[i] - 1] = t[i]\n    for i in range(1, n):\n        res[i] = min(res[i], res[i - 1] + 1)\n    for i in range(n - 1, 0, -1):\n        res[i - 1] = min(res[i - 1], 1 + res[i])\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    _ = input()\n    (n, k) = map(int, input().split())\n    pos = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    ar = [0] * (n + 1)\n    dp = [2 * 10 ** 9] * (n + 1)\n    for i in range(k):\n        ar[pos[i]] = temp[i]\n    last = None\n    for i in range(1, n + 1):\n        if ar[i]:\n            if last == None:\n                last = ar[i]\n            elif ar[i] < last:\n                last = ar[i]\n        if last:\n            dp[i] = min(dp[i], last)\n            last += 1\n    last = None\n    for i in range(n, 0, -1):\n        if ar[i]:\n            if last == None:\n                last = ar[i]\n            elif ar[i] < last:\n                last = ar[i]\n        if last:\n            dp[i] = min(dp[i], last)\n            last += 1\n    print(' '.join((str(dp[i]) for i in range(1, n + 1))))", "import math\nINF = 1e+20\n\ndef lerp(val, lb, ub, lv, uv):\n    return lv + (val - lb) * (uv - lv) / (ub - lb)\n\ndef get_ints():\n    return list(map(int, input().split()))\n\ndef get_floats():\n    return list(map(float, input().split()))\nfor _ in range(int(input())):\n    input()\n    (N, K) = get_ints()\n    a = get_ints()\n    t = get_ints()\n    c = [INF] * N\n    for i in range(K):\n        c[a[i] - 1] = t[i]\n    p = INF\n    L = [INF] * N\n    for i in range(N):\n        p = min(p + 1, c[i])\n        L[i] = p\n    p = INF\n    R = [INF] * N\n    for i in range(N - 1, -1, -1):\n        p = min(p + 1, c[i])\n        R[i] = p\n    print(*[min(L[i], R[i]) for i in range(N)])", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    pos = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    ans = [float('inf')] * n\n    for i in range(k):\n        ans[pos[i] - 1] = temp[i]\n    for i in range(1, n):\n        ans[i] = min(ans[i], ans[i - 1] + 1)\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i], ans[i + 1] + 1)\n    for i in range(n):\n        print(ans[i], end=' ')\n    print()", "INT_MAX = 2147483647\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    b = [2147483647] * n\n    p = 2147483647\n    l = [INT_MAX] * n\n    r = [INT_MAX] * n\n    for i in range(k):\n        b[a[i] - 1] = t[i]\n    for i in range(n):\n        p = min(p + 1, b[i])\n        l[i] = p\n    p = 2147483647\n    for i in reversed(range(n)):\n        p = min(p + 1, b[i])\n        r[i] = p\n    for i in range(n):\n        b[i] = min(l[i], r[i])\n    print(*b)", "for t in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    karr = list(map(int, input().split()))\n    tarr = list(map(int, input().split()))\n    arr = [float('inf')] * n\n    kt = {k - 1: t for (k, t) in zip(karr, tarr)}\n    for k in kt:\n        arr[k] = kt[k]\n    for (k, t) in sorted(list(kt.items()), key=lambda x: x[1]):\n        (i, d) = (k + 1, 1)\n        while i < n and arr[i] > t + d:\n            arr[i] = t + d\n            d += 1\n            i += 1\n        (i, d) = (k - 1, 1)\n        while i >= 0 and arr[i] > t + d:\n            arr[i] = t + d\n            d += 1\n            i -= 1\n    sarr = [str(a) for a in arr]\n    print(' '.join(sarr))", "def solve(n, A, T):\n    mx = n + max(T)\n    (L, R) = ([mx] * n, [mx] * n)\n    airconds = [mx] * n\n    for i in range(len(A)):\n        (a, t) = (A[i], T[i])\n        airconds[a - 1] = t\n    for i in range(n)[::-1]:\n        v1 = L[i + 1] + 1 if i + 1 < len(L) else mx\n        L[i] = min(v1, airconds[i])\n    for i in range(n):\n        v1 = R[i - 1] + 1 if i > 0 else mx\n        R[i] = min(v1, airconds[i])\n    return [min(L[i], R[i]) for i in range(n)]\n\ndef main():\n    for _ in range(int(input())):\n        input()\n        (n, k) = (*map(int, input().split(' ')),)\n        A = [*map(int, input().split(' '))]\n        T = [*map(int, input().split(' '))]\n        print(*solve(n, A, T))\nmain()", "for _ in range(int(input())):\n    line = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    c = [2000000000.0] * (n + 1)\n    for i in range(k):\n        c[a[i] - 1] = t[i]\n    L = [0] * (n + 1)\n    p = 2000000000.0\n    for i in range(n):\n        p = min(p + 1, c[i])\n        L[i] = p\n    R = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, c[i])\n        R[i] = p\n    for i in range(n):\n        print(min(L[i], R[i]), end=' ')\n    print()", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    airconditioners = [float('inf')] * n\n    positions = map(int, input().split())\n    temperatures = map(int, input().split())\n    for (position, temperature) in zip(positions, temperatures):\n        airconditioners[position - 1] = temperature\n    l = [float('inf')] * n\n    r = [float('inf')] * n\n    l[0] = airconditioners[0]\n    r[-1] = airconditioners[-1]\n    for i in range(1, n):\n        l[i] = min(l[i - 1] + 1, airconditioners[i])\n    for i in range(n - 2, -1, -1):\n        r[i] = min(r[i + 1] + 1, airconditioners[i])\n    results = []\n    for i in range(n):\n        results.append(min(l[i], r[i]))\n    print(*results)", "for _ in range(int(input())):\n    sss = input()\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n    L = [10 ** 10] * n\n    R = [10 ** 10] * n\n    ans = [10 ** 10] * n\n    for i in range(k):\n        ans[A[i] - 1] = T[i]\n    p = 10 ** 10\n    for i in range(n):\n        p = min(p + 1, ans[i])\n        L[i] = p\n    p = 10 ** 10\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, ans[i])\n        R[i] = p\n    out = [0] * n\n    for i in range(n):\n        out[i] = min(L[i], R[i])\n    print(*out)", "from collections import deque\n\ndef solve(n, k, a, t):\n    h = []\n    for i in range(k):\n        x = t[i] + abs(a[i] - 1)\n        h.append((x, a[i], t[i]))\n    h = deque(sorted(h))\n    z = []\n    y = 10 ** 10\n    for i in range(1, n + 1):\n        if i == 1:\n            (x, ai, ti) = h.popleft()\n            z.append(x)\n            continue\n        y += 1\n        while ai < i:\n            y = min(y, ti + abs(ai - i))\n            if len(h) > 0:\n                (x, ai, ti) = h.popleft()\n            else:\n                x = 10 ** 10\n                break\n        z.append(min(y, ti + abs(ai - i)))\n    return ' '.join(map(str, z))\nt = int(input())\nfor i in range(t):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    print(solve(n, k, a, t))", "def air_conditioner(L, n):\n    left = [10000000000.0 for _ in range(n)]\n    right = [10000000000.0 for _ in range(n)]\n    if L[0] != 0:\n        left[0] = L[0]\n    if L[n - 1] != 0:\n        right[n - 1] = L[n - 1]\n    for i in range(1, n):\n        if L[i] != 0:\n            left[i] = min(L[i], left[i - 1] + 1)\n        else:\n            left[i] = left[i - 1] + 1\n    for i in range(n - 2, -1, -1):\n        if L[i] != 0:\n            right[i] = min(L[i], right[i + 1] + 1)\n        else:\n            right[i] = right[i + 1] + 1\n    output = []\n    for i in range(n):\n        output.append(int(min(left[i], right[i])))\n    print(*output)\nT = int(input())\nfor _ in range(T):\n    input()\n    (l, n) = tuple(map(int, input().split()))\n    L = [0 for _ in range(l)]\n    index = list(map(int, input().split()))\n    values = list(map(int, input().split()))\n    for i in range(len(index)):\n        L[index[i] - 1] = values[i]\n    air_conditioner(L, l)", "import sys\nt = int(input())\nfor tt in range(t):\n    sys.stdin.readline()\n    (n, k) = map(int, sys.stdin.readline().split())\n    dpl = [0 for _ in range(n + 2)]\n    dpr = [0 for _ in range(n + 2)]\n    w = [0 for _ in range(n + 1)]\n    q = list(map(int, sys.stdin.readline().split()))\n    f = list(map(int, sys.stdin.readline().split()))\n    for i in range(len(q)):\n        w[q[i]] = f[i]\n    for i in range(1, n + 1):\n        if dpl[i - 1]:\n            dpl[i] = dpl[i - 1] + 1\n            if w[i]:\n                dpl[i] = min(dpl[i], w[i])\n        elif w[i]:\n            dpl[i] = w[i]\n    for i in range(n, 0, -1):\n        if dpr[i + 1]:\n            dpr[i] = dpr[i + 1] + 1\n            if w[i]:\n                dpr[i] = min(dpr[i], w[i])\n        elif w[i]:\n            dpr[i] = w[i]\n    dp = []\n    for i in range(1, n + 1):\n        an = 0\n        if dpl[i]:\n            an = dpl[i]\n            if dpr[i]:\n                an = min(an, dpr[i])\n        else:\n            an = dpr[i]\n        dp.append(an)\n    print(' '.join(map(str, dp)))", "for _ in range(int(input())):\n    line = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    c = [2000000000.0] * (n + 1)\n    for i in range(k):\n        c[a[i] - 1] = t[i]\n    p = 2000000000.0\n    L = [0] * (n + 1)\n    for i in range(n):\n        p = min(p + 1, c[i])\n        L[i] = p\n    p = 2000000000.0\n    R = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, c[i])\n        R[i] = p\n    for i in range(n):\n        print(min(L[i], R[i]), end=' ')\n    print()", "for _ in range(int(input())):\n    x = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    l = [0] * n\n    r = [0] * n\n    c = [10000000000] * n\n    for i in range(k):\n        c[a[i] - 1] = t[i]\n    p = 10000000000\n    for i in range(n):\n        p = min(p + 1, c[i])\n        l[i] = p\n    p = 10000000000\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, c[i])\n        r[i] = p\n    for i in range(n):\n        print(min(l[i], r[i]), end=' ')\n    print()", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    inf = 10 ** 18\n    c = [inf] * n\n    for i in range(k):\n        c[arr[i] - 1] = temp[i]\n    p = inf\n    L = [inf] * n\n    for i in range(n):\n        p = min(p + 1, c[i])\n        L[i] = p\n    R = [inf] * n\n    p = inf\n    for i in range(n - 1, -1, -1):\n        p = min(p + 1, c[i])\n        R[i] = p\n    for i in range(n):\n        print(min(L[i], R[i]), end=' ')\n    print()", "inf = 1e+21\nfor t in range(int(input())):\n    space = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    L = [inf for i in range(n)]\n    R = [inf for i in range(n)]\n    c = [inf for i in range(n)]\n    for i in range(len(a)):\n        c[a[i] - 1] = t[i]\n    L[0] = c[0]\n    R[n - 1] = c[n - 1]\n    for i in range(1, n):\n        L[i] = min(L[i - 1] + 1, c[i])\n    for i in range(n - 2, -1, -1):\n        R[i] = min(R[i + 1] + 1, c[i])\n    r = [min(R[i], L[i]) for i in range(n)]\n    print(*r)", "from collections import deque\nt = int(input())\nres = []\nfor _ in range(t):\n    l = input()\n    (n, k) = list(map(int, input().split()))\n    positions = list(map(int, input().split()))\n    values = list(map(int, input().split()))\n    land = []\n    temp_dict = {}\n    for i in range(len(positions)):\n        temp_dict[positions[i]] = values[i]\n    if n == 1:\n        res.append([values[0]])\n        continue\n    for i in range(n):\n        if i + 1 in temp_dict:\n            land.append(temp_dict[i + 1])\n        else:\n            land.append(float('inf'))\n    for i in range(1, len(land)):\n        land[i] = min(land[i - 1] + 1, land[i])\n    for i in range(len(land) - 2, -1, -1):\n        land[i] = min(land[i], land[i + 1] + 1)\n    res.append(land)\nfor r in res:\n    for val in r:\n        print(val, end=' ')\n    print()", "from math import inf\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    L = [inf] * n\n    for i in range(len(a)):\n        L[a[i] - 1] = t[i]\n    R = L.copy()\n    for l in range(1, len(L)):\n        L[l] = min(L[l - 1] + 1, L[l])\n    for r in range(1, len(R)):\n        R[-r - 1] = min(R[-r] + 1, R[-r - 1])\n    res = [0] * n\n    for i in range(len(res)):\n        res[i] = min(L[i], R[i])\n    print(*res)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ind = list(map(int, input().split()))\n    value = list(map(int, input().split()))\n    right = [10 ** 10] * n\n    left = [10 ** 10] * n\n    for i in range(k):\n        right[ind[i] - 1] = value[i]\n        left[ind[i] - 1] = value[i]\n    l = 10 ** 10\n    for i in range(n):\n        p = min(l, right[i])\n        right[i] = p\n        l = p + 1\n    l = 10 ** 10\n    for i in range(n - 1, -1, -1):\n        p = min(l, left[i])\n        left[i] = p\n        l = p + 1\n    res = []\n    for i in range(n):\n        res.append(min(right[i], left[i]))\n    print(*res)", "t = int(input())\nfor i in range(t):\n    input()\n    (n, ac) = map(int, input().split())\n    acp = [int(j) for j in input().split()]\n    acv = [int(j) for j in input().split()]\n    L = [10 ** 10 for j in range(n)]\n    P = [10 ** 10 for j in range(n)]\n    for j in range(ac):\n        L[acp[j] - 1] = acv[j]\n        P[acp[j] - 1] = acv[j]\n    p = 10 ** 10\n    for j in range(n):\n        p = min(L[j], p + 1)\n        L[j] = p\n    p = 10 ** 10\n    for j in range(n - 1, -1, -1):\n        p = min(P[j], p + 1)\n        P[j] = p\n    res = [0 for j in range(n)]\n    for j in range(n):\n        res[j] = min(L[j], P[j])\n    print(*res)", "q = int(input())\nbigTemp = 2 * 10 ** 9\nfor _ in range(q):\n    input()\n    (n, k) = map(int, input().split())\n    airCons = list(map(int, input().split()))\n    airCons = [item - 1 for item in airCons]\n    airConTemps = list(map(int, input().split()))\n    dictionary = dict(zip(airCons, airConTemps))\n    leftTemps = [bigTemp] * n\n    rightTemps = [bigTemp] * n\n    temperature = bigTemp\n    for i in range(n):\n        if i in dictionary:\n            temperature = min(temperature, dictionary[i])\n        leftTemps[i] = temperature\n        temperature += 1\n    temperature = bigTemp\n    for i in range(n - 1, -1, -1):\n        if i in dictionary:\n            temperature = min(temperature, dictionary[i])\n        rightTemps[i] = temperature\n        temperature += 1\n    answer = [0] * n\n    for i in range(n):\n        answer[i] = min(leftTemps[i], rightTemps[i])\n    print(*answer)", "from math import inf\nfor _ in range(int(input())):\n    _ = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    T = [inf] * n\n    for i in range(k):\n        T[a[i] - 1] = t[i]\n    l = [inf] * n\n    for i in range(n):\n        if i:\n            l[i] = l[i - 1] + 1\n        l[i] = min(l[i], T[i])\n    r = [inf] * n\n    for i in reversed(range(n)):\n        if i + 1 < n:\n            r[i] = r[i + 1] + 1\n        r[i] = min(r[i], T[i])\n    for i in range(n):\n        T[i] = min(l[i], r[i])\n    print(*T)", "for _ in range(int(input())):\n    e = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    left = [float('inf')] * (n + 2)\n    right = [float('inf')] * (n + 2)\n    for i in range(k):\n        left[a[i]] = t[i]\n        right[a[i]] = t[i]\n    for i in range(1, n + 1):\n        left[i] = min(left[i - 1] + 1, left[i])\n    for i in range(n, 0, -1):\n        right[i] = min(right[i + 1] + 1, right[i])\n    out = []\n    for i in range(1, n + 1):\n        out.append(min(left[i], right[i]))\n    print(*out)", "q = int(input())\nfor _ in range(q):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    for i in range(len(a)):\n        d[a[i]] = t[i]\n    l = [0] * (n + 2)\n    l[0] = 10 ** 10\n    r = [0] * (n + 2)\n    r[-1] = 10 ** 10\n    for i in range(1, n + 1):\n        if d[i] != 0:\n            l[i] = min(l[i - 1] + 1, d[i])\n        else:\n            l[i] = l[i - 1] + 1\n    for i in range(n, 0, -1):\n        if d[i] != 0:\n            r[i] = min(r[i + 1] + 1, d[i])\n        else:\n            r[i] = r[i + 1] + 1\n    for i in range(1, n + 1):\n        print(min(l[i], r[i]), end=' ')\n    print()", "def main():\n    global n, k, a, t\n    for _ in range(int(input())):\n        input()\n        (n, k) = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        t = [int(x) for x in input().split()]\n        (a, t) = zip(*sorted(zip(a, t)))\n        f()\n\ndef f():\n    global n, k, a, t\n    _max = 10 ** 10\n    temp = [_max] * (n + 2)\n    cond = 0\n    for i in range(1, n + 1):\n        if cond < k and i == a[cond]:\n            if t[cond] < temp[i - 1] + 1:\n                temp[i] = t[cond]\n            else:\n                temp[i] = temp[i - 1] + 1\n            cond += 1\n        else:\n            temp[i] = temp[i - 1] + 1\n    cond = k - 1\n    for i in range(n, 0, -1):\n        if cond > 0 and i == a[cond]:\n            if t[cond] < temp[i + 1] + 1:\n                _new = t[cond]\n            else:\n                _new = temp[i + 1] + 1\n            cond -= 1\n        else:\n            _new = temp[i + 1] + 1\n        if _new < temp[i]:\n            temp[i] = _new\n    s = ' '.join([str(x) for x in temp[1:n + 1]])\n    print(s)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef miis():\n    return map(int, input().split())\ninf = 10 ** 10\nfor _ in range(int(input())):\n    input()\n    (n, k) = miis()\n    c1 = miis()\n    c2 = miis()\n    c = [inf for i in range(n)]\n    for (i, j) in zip(c1, c2):\n        c[i - 1] = j\n    (l, r) = ([inf for i in range(n)], [inf for i in range(n)])\n    for i in range(n):\n        if i:\n            l[i] = l[i - 1] + 1\n        l[i] = min(l[i], c[i])\n    for i in range(n - 1, -1, -1):\n        if i != n - 1:\n            r[i] = r[i + 1] + 1\n        r[i] = min(r[i], c[i])\n    for (i, j) in zip(l, r):\n        print(min(i, j), end=' ')\n    print()", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    input()\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    l = [int_max] * n\n    r = [int_max] * n\n    for i in range(k):\n        l[arr[i] - 1] = temp[i]\n        r[arr[i] - 1] = temp[i]\n    for i in range(1, n):\n        l[i] = min(l[i], l[i - 1] + 1)\n    for i in range(n - 2, -1, -1):\n        r[i] = min(r[i], r[i + 1] + 1)\n    for i in range(n):\n        print(min(l[i], r[i]), end=' ')\n    print()\nprint('\\n'.join(ANS))", "import sys\nq = int(input())\nfor _ in range(q):\n    _ = input()\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    L = [sys.maxsize] * n\n    R = [sys.maxsize] * n\n    for i in range(k):\n        L[A[i] - 1] = temp[i]\n        R[A[i] - 1] = temp[i]\n    for i in range(1, n):\n        L[i] = min(L[i - 1] + 1, L[i])\n    for i in range(n - 2, -1, -1):\n        R[i] = min(R[i + 1] + 1, R[i])\n    Ans = [0] * n\n    for i in range(n):\n        Ans[i] = min(L[i], R[i])\n    for a in Ans:\n        print(a, end=' ')\n    print()", "for i in range(int(input())):\n    x = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    s = set()\n    for i in a:\n        s.add(i - 1)\n    d = {}\n    for i in range(k):\n        d[a[i]] = t[i]\n    ans = [0] * n\n    l = [0] * n\n    r = [0] * n\n    p = 10 ** 10\n    for i in range(n):\n        if i in s:\n            p = min(d[i + 1], p + 1)\n        else:\n            p += 1\n        l[i] = p\n    p = 10 ** 10\n    for i in range(n - 1, -1, -1):\n        if i in s:\n            p = min(d[i + 1], p + 1)\n        else:\n            p += 1\n        r[i] = p\n    for i in range(n):\n        ans[i] = min(l[i], r[i])\n    print(*ans)", "from math import inf\n\ndef cf_731E(n: int, acLocations: list, acTemperatures: list):\n    answer = [inf] * n\n    temperatures = {}\n    for (index, temp) in zip(acLocations, acTemperatures):\n        answer[index - 1] = temp\n        temperatures[index] = temp\n    acLocations.sort()\n    start = acLocations[0]\n    temp = answer[start - 1]\n    for i in range(start + 1, n + 1):\n        if i in temperatures:\n            if i - start + temp > answer[i - 1]:\n                start = i\n                temp = answer[i - 1]\n        answer[i - 1] = min(temp + i - start, answer[i - 1])\n    start = acLocations[-1]\n    temp = answer[start - 1]\n    for i in range(start, 0, -1):\n        if i in temperatures:\n            if start - i + temp > answer[i - 1]:\n                start = i\n                temp = answer[i - 1]\n        answer[i - 1] = min(start - i + temp, answer[i - 1])\n    return answer\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    acLocations = list(map(int, input().split()))\n    acTemperatures = list(map(int, input().split()))\n    print(*cf_731E(n, acLocations, acTemperatures))", "import sys\nimport math\nfrom typing import DefaultDict\nmod = 10 ** 9 + 7\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nr = range\nfor tt in r(IN()):\n    ll = S()\n    (n, k) = LI()\n    a = LI()\n    t = LI()\n    d = DefaultDict(int)\n    for i in range(k):\n        d[a[i] - 1] = t[i]\n    a.sort()\n    ans = [10 ** 10] * n\n    temp = 10 ** 10\n    for i in range(a[0] - 1, n):\n        if d[i] > 0:\n            temp = min(temp, d[i])\n        ans[i] = temp\n        temp += 1\n    temp = 10 ** 10\n    for i in range(a[-1] - 1, -1, -1):\n        if d[i] > 0:\n            temp = min(temp, d[i])\n        ans[i] = min(ans[i], temp)\n        temp += 1\n    print(*ans)", "import math\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ac = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    ac = {ac[i]: temp[i] for i in range(k)}\n    prefix = [math.inf for i in range(n)]\n    suffix = [math.inf for i in range(n)]\n    if 1 in ac:\n        prefix[0] = ac[1]\n    if n in ac:\n        suffix[-1] = ac[n]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] + 1\n        if i + 1 in ac:\n            prefix[i] = min(prefix[i], ac[i + 1])\n    for i in range(n - 2, -1, -1):\n        suffix[i] = suffix[i + 1] + 1\n        if i + 1 in ac:\n            suffix[i] = min(suffix[i], ac[i + 1])\n    ans = []\n    for i in range(n):\n        ans.append(min(prefix[i], suffix[i]))\n    print(*ans)", "from math import gcd, floor, inf, log2, sqrt, log10\nfrom bisect import bisect_right, bisect_left\nfrom statistics import mode\ncases = int(input())\nfor _ in range(cases):\n    input()\n    (n, k) = map(int, input().split())\n    air_con = list(map(int, input().split()))\n    temper = list(map(int, input().split()))\n    st = {cell: temp for (cell, temp) in zip(air_con, temper)}\n    ans1 = []\n    best = []\n    for cell in range(1, n + 1):\n        if cell in st:\n            if not best:\n                best = [cell, st[cell]]\n            elif cell - best[0] + best[1] > st[cell]:\n                best = [cell, st[cell]]\n        if not best:\n            ans1.append(inf)\n        else:\n            ans1.append(cell - best[0] + best[1])\n    ans2 = []\n    best = []\n    for cell in range(n, 0, -1):\n        if cell in st:\n            if not best:\n                best = [cell, st[cell]]\n            elif best[0] - cell + best[1] > st[cell]:\n                best = [cell, st[cell]]\n        if not best:\n            ans2.append(inf)\n        else:\n            ans2.append(best[0] - cell + best[1])\n    ans2 = ans2[::-1]\n    final_ans = []\n    for (i, j) in zip(ans1, ans2):\n        final_ans.append(min(i, j))\n    print(*final_ans)", "def ans(n, k, a, t):\n    d = {}\n    for i in range(len(a)):\n        d[a[i] - 1] = t[i]\n    z = 10 ** 10\n    L = [z for i in range(n)]\n    R = [z for i in range(n)]\n    x = min(a) - 1\n    y = max(a) - 1\n    for i in range(x, n):\n        if i in d:\n            z = min(d[i], z + 1)\n        else:\n            z = z + 1\n        L[i] = min(L[i], z)\n    for i in range(y, -1, -1):\n        if i in d:\n            z = min(d[i], z + 1)\n        else:\n            z = z + 1\n        R[i] = min(R[i], z)\n    for i in range(n):\n        x = min(L[i], R[i])\n        print(x, end=' ')\n    print()\n    return\nn = int(input())\nfor i in range(n):\n    x = input()\n    d = input().split()\n    m = int(d[0])\n    k = int(d[1])\n    b = input().split()\n    a = []\n    for i in b:\n        a.append(int(i))\n    b = input().split()\n    t = []\n    for i in b:\n        t.append(int(i))\n    ans(m, k, a, t)", "for _ in range(int(input())):\n    space = input()\n    (n, k) = map(int, input().split())\n    arr = [0 for i in range(n)]\n    arr1 = [0 for i in range(n)]\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(k):\n        arr[a[i] - 1] = b[i]\n        arr1[a[i] - 1] = b[i]\n    val = -1\n    co = -1\n    for i in range(n):\n        if val == -1 and arr1[i] != 0:\n            val = arr1[i]\n            co = i\n        elif arr1[i] != 0:\n            if val + abs(co - i) > arr[i]:\n                co = i\n                val = arr[i]\n        if val != -1:\n            arr[i] = max(0, val + abs(co - i))\n    val = -1\n    co = -1\n    for i in range(n - 1, -1, -1):\n        if val == -1 and arr1[i] != 0:\n            val = arr1[i]\n            co = i\n        elif arr1[i] != 0:\n            if val + abs(co - i) > arr[i]:\n                co = i\n                val = arr[i]\n        if val != -1:\n            if arr[i] == 0:\n                arr[i] = val + abs(co - i)\n            else:\n                arr[i] = min(arr[i], val + abs(co - i))\n    print(*arr)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    dist = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    store = [None for _ in range(n)]\n    for i in range(k):\n        store[dist[i] - 1] = temp[i]\n    left = [float('inf') for _ in range(n)]\n    right = [float('inf') for _ in range(n)]\n    for i in range(n):\n        cur_temp = store[i] if store[i] else float('inf')\n        if i > 0:\n            left[i] = min(cur_temp, left[i - 1] + 1)\n        elif i == 0:\n            left[i] = cur_temp\n    for i in range(n - 1, -1, -1):\n        cur_temp = store[i] if store[i] else float('inf')\n        if i == n - 1:\n            right[i] = cur_temp\n        elif i < n - 1:\n            right[i] = min(right[i + 1] + 1, cur_temp)\n    res = []\n    for i in range(n):\n        res.append(min(left[i], right[i]))\n    print(*res)", "for _ in range(int(input())):\n    tt = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    dp1 = [10000000000] * n\n    dp2 = [10000000000] * n\n    for i in range(k):\n        dp1[a[i] - 1] = t[i]\n        dp2[a[i] - 1] = t[i]\n    for i in range(n):\n        if i == 0:\n            minn = dp1[i]\n            pos = i\n        else:\n            dp1[i] = min(dp1[i - 1] + 1, minn + (i - pos), dp1[i])\n            if dp1[i] <= minn:\n                minn = dp1[i]\n                pos = i\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            minn = dp2[i]\n            pos = i\n        else:\n            dp2[i] = min(dp2[i + 1] + 1, minn + (pos - i), dp2[i])\n            if dp2[i] <= minn:\n                minn = dp2[i]\n                pos = i\n    for i in range(n):\n        print(min(dp1[i], dp2[i]), end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    l = input()\n    (n, k) = map(int, input().split())\n    bunch = []\n    l = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    for i in range(k):\n        bunch.append([l[i], l2[i]])\n    bunch.sort(key=lambda x: x[0])\n    ind = 0\n    res = [10 ** 9 * 2 + 1 for _ in range(n)]\n    for i in range(bunch[0][0] - 1, n):\n        if i == 0:\n            res[i] = bunch[0][1]\n            ind += 1\n        elif ind < k and bunch[ind][0] - 1 == i:\n            res[i] = min(res[i - 1] + 1, bunch[ind][1])\n            ind += 1\n        else:\n            res[i] = res[i - 1] + 1\n    ind = k - 1\n    for i in range(bunch[-1][0] - 1, -1, -1):\n        if i == n - 1:\n            res[i] = min(res[i], bunch[ind][1])\n            ind -= 1\n        elif ind >= 0 and bunch[ind][0] - 1 == i:\n            res[i] = min(res[i + 1] + 1, bunch[ind][1], res[i])\n            ind -= 1\n        else:\n            res[i] = min(res[i + 1] + 1, res[i])\n    print(' '.join(map(str, res)))", "import math\n\ndef merge(lst, left_start, left_end, right_start, right_end):\n    temp_right = lst[right_start] + right_start\n    for i in range(left_end, left_start - 1, -1):\n        if temp_right - i < lst[i]:\n            lst[i] = temp_right - i\n        else:\n            break\n    temp_left = lst[left_end] - left_end\n    for i in range(right_start, right_end + 1):\n        if temp_left + i < lst[i]:\n            lst[i] = temp_left + i\n        else:\n            break\n\ndef calculate_temperature(lst, start, end):\n    if end - start == 0:\n        return\n    middle = (end + start) // 2\n    calculate_temperature(lst, start, middle)\n    calculate_temperature(lst, middle + 1, end)\n    merge(lst, start, middle, middle + 1, end)\nt = int(input())\nresults = []\nfor i in range(t):\n    input()\n    (n, k) = map(int, input().split())\n    positions = [int(num) - 1 for num in input().split()]\n    temperatures = [int(num) for num in input().split()]\n    lst = [math.inf] * n\n    for i in range(len(positions)):\n        lst[positions[i]] = temperatures[i]\n    calculate_temperature(lst, 0, n - 1)\n    results.append(lst)\nfor i in range(t):\n    print(' '.join([str(num) for num in results[i]]))", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfor _ in range(rn()):\n    input()\n    (n, k) = rns()\n    a = rl()\n    t = rl()\n    data = sorted(zip(a, t))\n    lm = [float('inf')]\n    i = 0\n    for j in range(n):\n        if i < k and data[i][0] == j + 1:\n            lm.append(min(lm[-1] + 1, data[i][1]))\n            i += 1\n        else:\n            lm.append(lm[-1] + 1)\n    lm.pop(0)\n    rm = [float('inf')]\n    i = k - 1\n    for j in range(n - 1, -1, -1):\n        if data[i][0] == j + 1:\n            rm.append(min(rm[-1] + 1, data[i][1]))\n            i -= 1\n        else:\n            rm.append(rm[-1] + 1)\n    rm.reverse()\n    rm.pop()\n    ans = []\n    for i in range(n):\n        ans.append(min(rm[i], lm[i]))\n    print(*ans)", "q = int(input())\nfor i in range(q):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    at = []\n    for (i, j) in zip(a, t):\n        at.append((i, j))\n    at = sorted(at, key=lambda x: x[0])\n    ans = [float('inf')] * n\n    keep = float('inf')\n    idx = 0\n    for i in range(n):\n        if 0 <= idx < k and i == at[idx][0] - 1:\n            keep = min(keep, at[idx][1])\n            idx += 1\n        ans[i] = min(ans[i], keep)\n        keep += 1\n    keep = float('inf')\n    idx = k - 1\n    for i in reversed(range(n)):\n        if 0 <= idx < k and i == at[idx][0] - 1:\n            keep = min(keep, at[idx][1])\n            idx -= 1\n        ans[i] = min(ans[i], keep)\n        keep += 1\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(k)]\n    c.sort()\n    a = [c[i][0] for i in range(k)]\n    b = [c[i][1] for i in range(k)]\n    data = []\n    data2 = []\n    h = {}\n    for i in range(k):\n        h[a[i]] = 1\n        data.append(a[i] + b[i])\n        data2.append(-a[i] + b[i])\n    for i in range(k - 2, -1, -1):\n        data[i] = min(data[i + 1], data[i])\n    for i in range(1, k):\n        data2[i] = min(data2[i - 1], data2[i])\n    answer = [-1] * n\n    cnt = 0\n    for i in range(n):\n        if cnt == 0:\n            temp = -(i + 1) + data[cnt]\n        elif cnt == k:\n            temp = i + 1 + data2[cnt - 1]\n        else:\n            temp = min(-(i + 1) + data[cnt], i + 1 + data2[cnt - 1])\n        answer[i] = temp\n        if i + 1 in h:\n            cnt += 1\n    print(' '.join(map(str, answer)))", "for i in range(int(input())):\n    input()\n    (n, a) = map(int, input().split(' '))\n    idx = list(map(int, input().split(' ')))\n    temprature = list(map(int, input().split(' ')))\n    ans = [100000000000] * n\n    helper = []\n    for (i, t) in zip(idx, temprature):\n        ans[i - 1] = t\n        helper.append([t, i - 1])\n    helper.sort()\n    for (t, i) in helper:\n        l = i - 1\n        r = i + 1\n        notfound = True\n        while r < n and notfound:\n            if ans[r] > t + r - i:\n                ans[r] = t + r - i\n            else:\n                notfound = False\n            r += 1\n        notfound = True\n        while l >= 0 and notfound:\n            if ans[l] > t + i - l:\n                ans[l] = t + i - l\n            else:\n                notfound = False\n            l -= 1\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    empty = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    ac = []\n    for i in range(k):\n        ac.append((a[i], t[i]))\n    ac.sort()\n    pre = [1000000000000000000] * n\n    suf = [1000000000000000000] * n\n    idx = 0\n    mn = 1000000000000000000\n    for i in range(n):\n        if idx < k and ac[idx][0] == i + 1:\n            mn += 1\n            mn = min(mn, ac[idx][1])\n            idx += 1\n            pre[i] = mn\n        elif mn != 1000000000000000000:\n            mn += 1\n            pre[i] = mn\n    mn = 1000000000000000000\n    idx = k - 1\n    for i in range(n - 1, -1, -1):\n        if idx >= 0 and ac[idx][0] == i + 1:\n            mn += 1\n            mn = min(mn, ac[idx][1])\n            idx -= 1\n            suf[i] = mn\n        elif mn != 1000000000000000000:\n            mn += 1\n            suf[i] = mn\n    ans = []\n    for i in range(n):\n        print(min(pre[i], suf[i]), end=' ')\n    print('')", "for _ in range(int(input())):\n    st = input()\n    (n, m) = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    (arr1, arr2) = zip(*sorted(zip(arr1, arr2)))\n    x = 0\n    y = m - 1\n    temp1 = []\n    temp2 = []\n    temp3 = []\n    neer = neer2 = float('inf')\n    for i in range(n):\n        if x < m and i + 1 == arr1[x]:\n            neer = min(neer, arr2[x])\n            x += 1\n        temp1.append(neer)\n        neer += 1\n        if y >= 0 and n - i == arr1[y]:\n            ind2 = arr2[y]\n            neer2 = min(neer2, arr2[y])\n            y -= 1\n        temp2.append(neer2)\n        neer2 += 1\n    temp2.reverse()\n    for j in range(n):\n        temp3.append(min(temp1[j], temp2[j]))\n    print(*temp3)", "import sys\ninput = sys.stdin.readline\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    input()\n    (n, k) = miis()\n    c1 = miis()\n    c2 = miis()\n    c = [(j, i - 1) for (i, j) in zip(c1, c2)]\n    c.sort()\n    ans = [0 for i in range(n)]\n    l = 0\n    tmp = c[0][0]\n    need = set()\n    while l != k and c[l][0] == tmp:\n        need.add(c[l][1])\n        l += 1\n    while need:\n        newneed = set()\n        while need:\n            ind = need.pop()\n            if ans[ind]:\n                ans[ind] = min(tmp, ans[ind])\n            else:\n                ans[ind] = tmp\n            if ind + 1 < n and (not ans[ind + 1]):\n                newneed.add(ind + 1)\n            if ind - 1 > -1 and (not ans[ind - 1]):\n                newneed.add(ind - 1)\n        need = need.union(newneed)\n        tmp += 1\n        while l != k and c[l][0] == tmp:\n            if not ans[c[l][1]]:\n                need.add(c[l][1])\n            l += 1\n    print(*ans)", "q = int(input())\nfor i in range(q):\n    xx = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    tot = []\n    for j in range(n):\n        tot.append(0)\n    for j in range(k):\n        tot[a[j] - 1] = t[j]\n    ps = 2000000000\n    (left, right) = ([], [])\n    for j in range(n):\n        ps = ps + 1\n        if tot[j] != 0:\n            ps = min(ps, tot[j])\n        left.append(ps)\n    ps = 2000000000\n    for j in range(n - 1, -1, -1):\n        ps = ps + 1\n        if tot[j] != 0:\n            ps = min(ps, tot[j])\n        right.append(ps)\n    right.reverse()\n    for j in range(n):\n        print(min(left[j], right[j]), end=' ')\n    print()", "INF = 10 ** 10\nfor q in range(int(input())):\n    blank = input()\n    (n, k) = map(int, input().split())\n    pos = list(map(int, input().split()))\n    val = list(map(int, input().split()))\n    pos = [x - 1 for x in pos]\n    dp = [INF for _ in range(n)]\n    arr = [(val[i] + pos[i], pos[i]) for i in range(k)]\n    arr.sort(key=lambda x: x[0])\n    j = 0\n    for i in range(n):\n        if j >= k:\n            break\n        dp[i] = arr[j][0] - i\n        while j < k and i >= arr[j][1]:\n            j += 1\n    arr = [(val[i] - pos[i] + n, pos[i]) for i in range(k)]\n    arr.sort(key=lambda x: x[0])\n    j = 0\n    for i in range(n - 1, 0, -1):\n        if j >= k:\n            break\n        dp[i] = min(dp[i], arr[j][0] - n + i)\n        while j < k and i <= arr[j][1]:\n            j += 1\n    print(*dp, sep=' ')", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor a0 in range(int(input())):\n    _ = input()\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    t = [int(x) for x in input().split()]\n    tmp = dict()\n    for i in range(k):\n        tmp[a[i]] = t[i]\n    a.sort()\n    t = [tmp[a[-1]] + n for i in range(n + 1)]\n    mi = a[0]\n    cu = -1\n    for i in range(1, n + 1):\n        if cu < k - 1 and i == a[cu + 1]:\n            if tmp[mi] + abs(mi - i) > tmp[i]:\n                mi = a[cu + 1]\n            cu += 1\n        t[i] = min(t[i], abs(i - mi) + tmp[mi])\n    mi = a[-1]\n    cu = k\n    for i in range(n, 0, -1):\n        if cu > 0 and i == a[cu - 1]:\n            if tmp[mi] + abs(mi - i) > tmp[i]:\n                mi = a[cu - 1]\n            cu -= 1\n        t[i] = min(t[i], abs(i - mi) + tmp[mi])\n    for i in range(1, n + 1):\n        print(t[i], end=' ')\n    print()", "for _ in range(int(input())):\n    st = input()\n    (n, m) = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    (arr1, arr2) = zip(*sorted(zip(arr1, arr2)))\n    x = 0\n    temp1 = []\n    temp2 = []\n    temp3 = []\n    neer = float('inf')\n    for i in range(n):\n        if x < m and i + 1 == arr1[x]:\n            neer = min(neer, arr2[x])\n            x += 1\n        temp1.append(neer)\n        neer += 1\n    neer = float('inf')\n    x = m - 1\n    for i in range(n - 1, -1, -1):\n        if x >= 0 and i + 1 == arr1[x]:\n            ind = arr2[x]\n            neer = min(neer, arr2[x])\n            x -= 1\n        temp2.append(neer)\n        neer += 1\n    temp2.reverse()\n    for j in range(n):\n        temp3.append(min(temp1[j], temp2[j]))\n    print(*temp3)", "q = int(input())\nout = []\nfor i in range(q):\n    _ = input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    d = {}\n    for i in range(k):\n        d[a[i]] = t[i]\n    d = sorted(d.items())\n    t_min = [0 for i in range(n)]\n    j = 0\n    for i in range(n):\n        if j > 0:\n            t_min[i] = t_min[i - 1] + 1\n        if j < k and i == d[j][0] - 1:\n            if j == 0:\n                t_min[i] = d[j][1]\n            else:\n                t_min[i] = min(t_min[i], d[j][1])\n            j += 1\n    j = k - 1\n    for i in range(n - 1, -1, -1):\n        if j < k - 1:\n            t_min[i] = min(t_min[i + 1] + 1, t_min[i])\n        if j == -1:\n            t_min[i] = t_min[i + 1] + 1\n        if j >= 0 and i == d[j][0] - 1:\n            t_min[i] = min(d[j][1], t_min[i])\n            j -= 1\n    out.append(t_min)\nfor i in range(q):\n    print(*out[i])", "cases = int(input())\nfor c in range(cases):\n    input()\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    data = []\n    for i in range(k):\n        data.append([a[i], t[i]])\n    data.sort(key=lambda pair: pair[0])\n    left = [0] * n\n    li = 0\n    right = [0] * n\n    ri = k - 1\n    lt = 1100000000\n    rt = 1100000000\n    for i in range(n):\n        lt += 1\n        if li < k and data[li][0] - 1 == i:\n            lt = min(lt, data[li][1])\n            li += 1\n        left[i] = lt\n        rt += 1\n        if ri >= 0 and data[ri][0] - 1 == n - 1 - i:\n            rt = min(rt, data[ri][1])\n            ri -= 1\n        right[n - 1 - i] = rt\n    for i in range(n):\n        print(min(left[i], right[i]), end=' ')\n    print()", "for i in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    l = [[a[i], t[i]] for i in range(k)]\n    l.sort()\n    dp = [10 ** 10] * (n + 1)\n    x = 0\n    for i in range(n):\n        if x < k and i == l[x][0] - 1:\n            dp[i] = min(dp[i - 1] + 1, l[x][1])\n            x += 1\n        else:\n            dp[i] = 1 + dp[i - 1]\n    dp2 = [10 ** 10] * (n + 1)\n    x = k - 1\n    for i in range(n - 1, -1, -1):\n        if x > -1 and i == l[x][0] - 1:\n            dp2[i] = min(dp2[i + 1] + 1, l[x][1])\n            x -= 1\n        else:\n            dp2[i] = 1 + dp2[i + 1]\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = min(dp[i], dp2[i])\n    print(*ans)", "cases = int(input())\nfor c in range(cases):\n    input()\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    data = []\n    for i in range(k):\n        data.append([a[i], t[i]])\n    data.sort(key=lambda pair: pair[0])\n    left = [0] * n\n    li = 0\n    right = [0] * n\n    ri = k - 1\n    lt = 1100000000\n    rt = 1100000000\n    for i in range(n):\n        lt += 1\n        if li < k and data[li][0] - 1 == i:\n            lt = min(lt, data[li][1])\n            li += 1\n        left[i] = lt\n        rt += 1\n        if ri >= 0 and data[ri][0] - 1 == n - 1 - i:\n            rt = min(rt, data[ri][1])\n            ri -= 1\n        right[n - 1 - i] = rt\n    for i in range(n):\n        print(min(left[i], right[i]), end=' ')\n    print()"]