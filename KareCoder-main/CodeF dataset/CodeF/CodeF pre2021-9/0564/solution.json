["import sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\nfrom itertools import permutations\n\ndef check_seq(n, seq):\n    res = ''\n    check_dict = {}\n    for el in seq:\n        if el not in check_dict:\n            check_dict[el] = 1\n        else:\n            check_dict[el] += 1\n    for (_, counts) in check_dict.items():\n        if counts != 2:\n            res += 'NO\\n'\n            return res\n    seq = list(set(seq))\n    seq.sort(reverse=True)\n    a_m = seq[0] / (2 * n)\n    if seq[0] % (2 * n) or a_m <= 0:\n        res += 'NO\\n'\n        return res\n    a_list = [a_m]\n    sum_2 = 0\n    for i in range(1, n):\n        sum_2 += a_list[-1] * 2\n        cur_a = (seq[i] - sum_2) / (2 * n - 2 * i)\n        if (seq[i] - sum_2) % (2 * n - 2 * i) or cur_a <= 0:\n            res += 'NO\\n'\n            return res\n        a_list.append(cur_a)\n    res += 'YES\\n'\n    return res\n\ndef main():\n    samples = read_one_int()\n    res = ''\n    for _ in range(samples):\n        n = read_one_int()\n        cur_seq = read_list_of_ints()\n        res += check_seq(n, cur_seq)\n    print(res[:-1])\nmain()", "def solve(n, D):\n    if n == 1:\n        if D[0] == D[1] and D[0] % 2 == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    D = sorted(D)[::-1]\n    pre = None\n    diffs = []\n    for (i, d) in enumerate(D):\n        if pre is None:\n            pre = d\n            continue\n        if i % 2 == 1:\n            if d != pre:\n                return 'NO'\n            else:\n                continue\n        if (pre - d) % (2 * n - i) != 0:\n            return 'NO'\n        diff = (pre - d) / (2 * n - i)\n        if diff == 0:\n            return 'NO'\n        diffs.append(diff)\n        pre = d\n    diffs = diffs[::-1]\n    dist = 0\n    total = 0\n    for diff in diffs:\n        dist += diff\n        total += dist\n    if d - 2 * total > 0 and (d - 2 * total) % (2 * n) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    ans = []\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        D = list(map(int, input().split(' ')))\n        ans.append(solve(n, D))\n    for a in ans:\n        print(a)\nmain()", "from math import floor\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort(reverse=True)\n    for i in range(0, 2 * n, 2):\n        if d[i] != d[i + 1]:\n            print('NO')\n            return\n    a = [0] * n\n    a[0] = d[0] / (2 * n)\n    if floor(a[0]) != a[0]:\n        print('NO')\n        return\n    for k in range(1, n):\n        delta = d[2 * (k - 1)] - d[2 * k]\n        a[k] = a[k - 1] - delta / (2 * (n - k))\n        if floor(a[k]) != a[k] or a[k] <= 0 or a[k] == a[k - 1]:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef fn(n, d):\n    d.sort(reverse=True)\n    x = []\n    y = []\n    for i in d:\n        if i % 2 != 0:\n            print('NO')\n            return 0\n    for i in range(2 * n):\n        if i % 2 == 0:\n            x.append(d[i])\n        else:\n            y.append(d[i])\n    if x != y:\n        print('NO')\n        return 0\n    flag = 0\n    h = 0\n    for i in range(n):\n        if i < n - 1 and x[i] == x[i + 1]:\n            print('NO')\n            return 0\n        if (x[i] - h) % (2 * n - 2 * i) == 0 and x[i] - h > 0:\n            flag = 1\n            h = h + 2 * (x[i] - h) // (2 * n - 2 * i)\n        else:\n            print('NO')\n            return 0\n    if flag == 1:\n        print('YES')\n        return 1\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    d = data[l + 2:l + 2 * n + 2]\n    l = l + 1 + n * 2\n    fn(n, d)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = 1\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] != 2:\n            g = 0\n            break\n    if g:\n        s = set(l)\n        p = list(s)\n        p.sort(reverse=True)\n        f = 1\n        cnt = 0\n        som = 0\n        pr = 10 ** 18\n        for i in p:\n            if (i - som) % (2 * (n - cnt)) == 0:\n                v = (i - som) // (2 * (n - cnt))\n                som += v * 2\n                cnt += 1\n                if v <= 0:\n                    f = 0\n                    break\n                if v > pr:\n                    f = 0\n                    break\n                pr = v\n            else:\n                f = 0\n                break\n        if f:\n            sys.stdout.write('YES' + '\\n')\n        else:\n            sys.stdout.write('NO' + '\\n')\n    else:\n        sys.stdout.write('NO' + '\\n')", "import sys\ninput = sys.stdin.readline\ngetint = lambda : int(input())\ngetints = lambda : [int(a) for a in input().split()]\n\ndef solve():\n    n = getint()\n    d = getints()\n    d.sort()\n    dd = [0 for i in range(n)]\n    for i in range(n):\n        if d[i * 2] % 2 != 0 or d[i * 2] != d[i * 2 + 1]:\n            print('NO')\n            return\n        dd[i] = d[i * 2] // 2\n    diff = [0 for i in range(n - 1)]\n    for i in range(1, n):\n        if (dd[i] - dd[i - 1]) % i != 0:\n            print('NO')\n            return\n        diff[i - 1] = (dd[i] - dd[i - 1]) // i\n        if diff[i - 1] == 0:\n            print('NO')\n            return\n    sum = 0\n    for i in range(n - 1):\n        sum += diff[-i - 1] * (i + 1)\n    mult = dd[0] - sum\n    if mult <= 0 or mult % n != 0:\n        print('NO')\n        return\n    print('YES')\nt = getint()\nfor i in range(t):\n    solve()", "import collections\nimport sys\ninput = sys.stdin.readline\n\ndef solve(n, a):\n    c = collections.Counter(a)\n    res = []\n    for i in c:\n        if c[i] != 2:\n            return False\n        res.append(i)\n    res.sort()\n    if res[-1] % (2 * n) != 0:\n        return False\n    l = res[-1] // (2 * n)\n    tot = 2 * l\n    for i in range(n - 2, -1, -1):\n        if res[i] < tot:\n            return False\n        res[i] -= tot\n        if res[i] == 0 or res[i] % ((i + 1) * 2) != 0:\n            return False\n        l = res[i] // ((i + 1) * 2)\n        tot += 2 * l\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = solve(n, a)\n    if res:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort(reverse=True)\n    unq = []\n    possible = True\n    for i in range(0, 2 * n, 2):\n        if a[i] % 2:\n            possible = False\n            break\n        if a[i] != a[i + 1]:\n            possible = False\n            break\n        unq.append(a[i] // 2)\n    if not possible:\n        print('NO')\n        continue\n    cur = 0\n    ans = 10 ** 15\n    for i in range(n):\n        if (unq[i] - cur) % (n - i):\n            possible = False\n            break\n        if unq[i] <= cur:\n            possible = False\n            break\n        temp = (unq[i] - cur) // (n - i)\n        if temp >= ans:\n            possible = False\n            break\n        cur += temp\n        ans = temp\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfrom sys import stdin\ninput = stdin.readline\n\ndef solve(n):\n    a = list(map(int, input().split()))\n    con = True\n    counter = Counter(a)\n    s = sorted(list(set(a)))\n    if max(counter.values()) != 2 or min(counter.values()) != 2:\n        con = False\n    x = len(s)\n    su = 0\n    for i in range(x, 0, -1):\n        y = s[i - 1] - su\n        if y >= 0 and y % (2 * i) or y <= 0:\n            con = False\n            break\n        else:\n            su += 2 * (y // (2 * i))\n    if con == True:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    solve(n)", "from collections import Counter\n\ndef double(dl):\n    for it in dl.keys():\n        if dl[it] != 2:\n            return False\n        if it % 2 == 1:\n            return False\n    return True\nfor _ in range(int(input())):\n    __ = input()\n    d = [int(i) for i in input().split(' ')]\n    if len(d) == 2:\n        if d[0] == d[1] and d[0] % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        dl = dict(Counter(d))\n        if not double(dl):\n            print('NO')\n        else:\n            rs = False\n            result = False\n            keys = list(dl.keys())\n            keys.sort(reverse=True)\n            delta = []\n            for i in range(1, len(keys)):\n                n = (len(keys) - i) * 2\n                x = keys[i - 1] - keys[i]\n                if x % n != 0:\n                    rs = True\n                    break\n                else:\n                    delta.append((keys[i - 1] - keys[i]) // n)\n            if rs:\n                print('NO')\n            else:\n                rs = False\n                if keys[0] % (len(keys) * 2) != 0:\n                    print('NO')\n                else:\n                    start = keys[0] // (len(keys) * 2)\n                    a = []\n                    a.append(start)\n                    for it in delta:\n                        k = a[-1] - it\n                        a.append(k)\n                        if k <= 0:\n                            print('NO')\n                            rs = True\n                            break\n                    if not rs:\n                        print('YES')", "def ss(n, l):\n    d = {}\n    for i in l:\n        if i % 2 == 1:\n            return 'NO'\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] != 2:\n            return 'NO'\n    t = []\n    for i in d:\n        t.append(i)\n    t = sorted(t)[::-1]\n    n = len(t)\n    x = 0\n    for i in range(n):\n        y = t[i] - x\n        if y <= 0:\n            return 'NO'\n        if y % (2 * (n - i)) == 0:\n            x += 2 * y // (2 * (n - i))\n        else:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(ss(n, l))", "def yesno(string, n):\n    d = list(map(int, string.split()))\n    d.sort()\n    if d[::2] == d[1::2]:\n        d = d[::2]\n        if d[0] % 2:\n            return 'NO'\n        sumai = d[0] // 2\n        for i in range(n - 1):\n            if d[i + 1] == d[i] or (d[i + 1] - d[i]) % (2 * (i + 1)):\n                return 'NO'\n            else:\n                sumai -= (n - i - 1) * ((d[i + 1] - d[i]) // (2 * (i + 1)))\n        if sumai > 0 and (not sumai % n):\n            return 'YES'\n    return 'NO'\nfor x in range(int(input())):\n    n = int(input())\n    string = input()\n    print(yesno(string, n))", "def check(n, ds):\n    ds = sorted(ds, reverse=True)\n    tot = 0\n    a_prev = 0\n    for i in range(n):\n        if ds[2 * i] != ds[2 * i + 1]:\n            return False\n        if (ds[2 * i] - tot) % (2 * (n - i)) != 0:\n            return False\n        a = (ds[2 * i] - tot) // (2 * (n - i))\n        if a <= 0 or a == a_prev:\n            return False\n        tot += 2 * a\n        a_prev = a\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        ds = list(map(int, input().split()))\n        print('YES' if check(n, ds) else 'NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    f = 0\n    for i in d:\n        if i % 2 != 0 or d[i] % 2 != 0:\n            f = 1\n    if n == 1:\n        if f == 0:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    arr.sort()\n    val = []\n    for i in range(0, 2 * n, 2):\n        val.append(arr[i])\n    fac = 2 * n\n    pre = 0\n    tot = 0\n    ans = set()\n    for i in range(n - 1, -1, -1):\n        cnt = val[i]\n        cnt -= tot * 2\n        if cnt % fac == 0 and cnt >= 0:\n            cnt = cnt // fac\n            if cnt != 0:\n                ans.add(cnt)\n            tot += cnt\n            fac -= 2\n    if len(ans) == n and f == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    f = 0\n    for i in d:\n        if i % 2 != 0 or d[i] % 2 != 0:\n            f = 1\n    if n == 1:\n        if f == 0:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    arr.sort()\n    val = []\n    for i in range(0, 2 * n, 2):\n        val.append(arr[i])\n    fac = 2 * n\n    pre = 0\n    tot = 0\n    ans = set()\n    for i in range(n - 1, -1, -1):\n        cnt = val[i]\n        cnt -= tot * 2\n        if cnt % fac == 0 and cnt >= 0:\n            cnt = cnt // fac\n            if cnt != 0:\n                ans.add(cnt)\n            tot += cnt\n            fac -= 2\n    if len(ans) == n and f == 0:\n        print('YES')\n    else:\n        print('NO')", "def arrIn():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\n\ndef check(a):\n    for x in a:\n        if x % 2 == 1:\n            return False\n    for i in range(2, len(a), 2):\n        if a[i] == a[i - 1]:\n            return False\n    return True\nfor ii in range(int(input())):\n    n = int(input())\n    a = arrIn()\n    a.sort()\n    div = n * 2\n    s = 0\n    if check(a) == False:\n        print('NO')\n        continue\n    if n == 1:\n        if a[0] == a[1] and a[0] % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    flag = 'YES'\n    for i in range(2 * n - 1, -1, -2):\n        if s >= a[i]:\n            flag = 'NO'\n            break\n        elif (a[i] - s) % div != 0:\n            flag = 'NO'\n            break\n        x = (a[i] - s) // div\n        s += x * 2\n        div -= 2\n    print(flag)", "def work():\n    d.sort(reverse=True)\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        if d[i * 2] != d[i * 2 + 1]:\n            print('NO')\n            return\n        b[i] = d[i * 2]\n    for i in range(1, n):\n        if b[i] == b[i - 1] or (b[i - 1] - b[i]) % (2 * (n - i)):\n            print('NO')\n            return\n        c[i] = (b[i - 1] - b[i]) // (2 * (n - i))\n    for i in range(1, n):\n        b[n - 1] -= 2 * i * c[i]\n    if b[n - 1] <= 0 or b[n - 1] % (2 * n):\n        print('NO')\n    else:\n        print('YES')\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [int(x.strip()) for x in input().split()]\n    work()", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    s.sort(reverse=True)\n    s1 = 0\n    b1 = True\n    s2 = 2 * n\n    i = 0\n    while i != s2:\n        if (s[i] - 2 * s1) % 2 != 0 or s[i] - 2 * s1 <= 0 or s[i] != s[i + 1]:\n            b1 = False\n            break\n        elif (s[i] - 2 * s1) % (2 * n - i) == 0:\n            s1 += (s[i] - 2 * s1) // (2 * n - i)\n        else:\n            b1 = False\n            break\n        if i != 0:\n            if s[i] == s[i - 2]:\n                b1 = False\n                break\n        i += 2\n    if b1:\n        print('YES')\n    else:\n        print('NO')", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readCase():\n    return readString()\n\ndef solve(n, array):\n    array.sort()\n    sub_total = 0\n    elems = 0\n    prev_e = 10 ** 20\n    while array:\n        (x, y) = (array.pop(), array.pop())\n        if x != y:\n            return 'NO'\n        if (x - sub_total) % (n - elems) != 0:\n            return 'NO'\n        e = (x - sub_total) // (n - elems)\n        if e <= 0 or e >= prev_e:\n            return 'NO'\n        sub_total += 2 * e\n        elems += 2\n        prev_e = e\n    return 'YES'\ncases = readInt()\nfor case in range(cases):\n    n = readInt()\n    array = readInts()\n    print(solve(2 * n, array))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    f = 0\n    for i in d:\n        if d[i] != 2 or i % 2 == 1:\n            f = 1\n            break\n    if f:\n        print('NO')\n        continue\n    s = 0\n    last = 10 ** 12\n    t = []\n    for i in d:\n        t.append(i)\n    t.sort()\n    for i in t[::-1]:\n        if (i - 2 * s) // (2 * n) != (i - 2 * s) / (2 * n):\n            print('NO')\n            f = 1\n            break\n        r = (i - 2 * s) // (2 * n)\n        s += r\n        n -= 1\n        if r >= last or r <= 0:\n            print('NO')\n            f = 1\n            break\n        last = r\n    if f == 0:\n        print('YES')", "def solve():\n    n = int(input())\n    M = dict()\n    V = list()\n    for i in map(int, input().split()):\n        if not i in M:\n            M[i] = 0\n            V.append(i)\n        M[i] += 1\n    V.sort(reverse=True)\n    for (i, j) in M.items():\n        if j != 2 or i % 2 != 0:\n            print('NO')\n            return\n    A = list()\n    for i in range(n - 1):\n        if (V[i] - V[i + 1]) % ((n - 1 - i) * 2) != 0:\n            print('NO')\n            return\n        else:\n            A.append((V[i] - V[i + 1]) / ((n - 1 - i) * 2))\n    for i in A:\n        if i == 0:\n            print('NO')\n            return\n    wow = V[-1]\n    for i in range(len(A)):\n        if wow < A[i] * (2 * (i + 1)):\n            print('NO')\n            return\n        wow -= A[i] * (2 * (i + 1))\n    if wow % (1 * (n * 2)) != 0 or wow == 0:\n        print('NO')\n        return\n    print('YES')\n    return\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        solve()\nmain()", "def min_value(n):\n    return n * (n + 1)\n\ndef solve():\n    n = int(input())\n    d = [int(s) for s in input().split()]\n    broken = False\n    d = sorted(d)\n    if d[::2] == d[1::2]:\n        d = sorted(d)[::2]\n    else:\n        broken = True\n    total_difference = 0\n    for i in range(1, n):\n        difference = d[i] - d[i - 1]\n        if difference % (2 * i) == 0 and difference > 0:\n            total_difference += difference // (2 * i) * (n - i)\n        else:\n            broken = True\n            break\n    if not broken and (d[0] - 2 * total_difference) % (2 * n) == 0 and (d[0] - 2 * total_difference > 0):\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor test in range(t):\n    solve()", "t = int(input())\n\ndef get_answer(v):\n    l = len(v) // 2\n    v.sort()\n    i = l - 1\n    s = 0\n    while i >= 0:\n        if v[i * 2] != v[i * 2 + 1] or v[i * 2] % 2 != 0:\n            return False\n        elif (v[i * 2] // 2 - s) % (i + 1) != 0:\n            return False\n        else:\n            a = (v[i * 2] // 2 - s) // (i + 1)\n            if a <= 0:\n                return False\n            if l > 1 and i <= l - 1 and (v[i * 2 + 1] == v[i * 2 - 1]):\n                return False\n            s = s + a\n        i -= 1\n    return True\nfor _ in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    if get_answer(v):\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    for i in count:\n        if count[i] != 2:\n            return 'NO'\n    sum = 0\n    for i in sorted(set(arr), reverse=True):\n        if i - sum > 0 and (i - sum) % (n * 2) == 0:\n            sum += (i - sum) // n\n        else:\n            return 'NO'\n        n -= 1\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n\n    def chk(li, n):\n        li.sort(reverse=True)\n        i = 0\n        while i < 2 * n - 1:\n            if li[i] % 2 != 0:\n                return 'NO'\n            if li[i] == li[i + 1] and (i == 2 * n - 2 or li[i] != li[i + 2]):\n                pass\n            else:\n                return 'NO'\n            i += 2\n        fin = []\n        te = 0\n        p = 2 * n\n        for k in range(0, 2 * n - 1, 2):\n            if (li[k] - te) % p == 0 and li[k] - te > 0:\n                ad = int((li[k] - te) / p)\n                fin.append(ad)\n                p -= 2\n                te += 2 * ad\n            else:\n                return 'NO'\n        return 'YES'\n    print(chk(li, n))", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        arr.sort(reverse=True)\n        prev = 0\n        p = 0\n        s = set()\n        flag = 0\n        i = 0\n        n = 2 * n\n        while i < n:\n            if arr[i] != arr[i + 1]:\n                flag = 1\n                break\n            arr[i] -= prev\n            x = arr[i] // (n - p)\n            if arr[i] % (n - p) != 0 or arr[i] < n - p:\n                flag = 1\n                break\n            s.add(x)\n            p += 2\n            prev += 2 * x\n            i += 2\n        if len(s) == n // 2 and flag == 0:\n            print('YES')\n        else:\n            print('NO')\nexcept:\n    pass", "def solve(arr, n):\n    d = dict()\n    for num in arr:\n        if num % 2 == 0:\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n        else:\n            return 'NO'\n    for (k, v) in d.items():\n        if v != 2:\n            return 'NO'\n    brr = list(set(arr))\n    brr.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if (brr[i] // 2 - count) % (n - i) != 0 or brr[i] // 2 - count <= 0:\n            return 'NO'\n        else:\n            count = count + (brr[i] // 2 - count) // (n - i)\n    return 'YES'\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = solve(arr, n)\n    print(s)", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    for i in count:\n        if count[i] != 2:\n            return 'NO'\n    sum = 0\n    for i in sorted(set(arr), reverse=True):\n        if i - sum > 0 and (i - sum) % (n * 2) == 0:\n            sum += (i - sum) // n\n        else:\n            return 'NO'\n        n -= 1\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "from itertools import groupby\nt = int(input())\n\ndef get(n, l):\n    for i in range(n):\n        if l[2 * i] != l[2 * i + 1]:\n            return False\n    sig = 0\n    ans = []\n    for i in range(n - 1, -1, -1):\n        if (l[2 * i] - 2 * sig) % (2 * (i + 1)) != 0:\n            return False\n        temp = (l[2 * i] - 2 * sig) // (2 * (i + 1))\n        ans.append(temp)\n        sig += temp\n    for i in range(1, n):\n        if ans[i] <= 0 or ans[i] >= ans[i - 1]:\n            return False\n    return True\nfor _ in range(t):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    print('YES' if get(n, l) else 'NO')", "for _ in range(int(input())):\n    n = int(input()) * 2\n    c = sorted(list(map(int, input().split())), reverse=True)\n    d = set()\n    a = 0\n    f = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if (c[i] - a) % (n - i) == 0 and (c[i] - a) / (n - i) >= 1:\n                e = (c[i] - a) / (n - i)\n                if e in d:\n                    f = 1\n                    print('NO')\n                    break\n                else:\n                    d.add(e)\n                    a += 2 * e\n            else:\n                print('NO')\n                f = 1\n                break\n        elif c[i] != c[i - 1]:\n            print('NO')\n            f = 1\n            break\n    if f == 0:\n        print('YES')", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    for i in count:\n        if count[i] != 2:\n            return 'NO'\n    sum = 0\n    for i in sorted(set(arr), reverse=True):\n        if i - sum > 0 and (i - sum) % (n * 2) == 0:\n            sum += (i - sum) // n\n        else:\n            return 'NO'\n        n -= 1\n    return 'YES'\nfor t in range(int(input())):\n    print(solve())", "t = int(input())\nwhile t:\n    n = int(input())\n    my_in = list(map(int, input().split()))\n    d = {}\n    s = []\n    ok = True\n    for x in my_in:\n        h = d.get(x)\n        if h is None:\n            d[x] = 1\n            s.append(x)\n        elif h == 1:\n            d[x] = 2\n        else:\n            ok = False\n            break\n    if len(s) != n or not ok:\n        print('NO')\n        t -= 1\n        continue\n    s = sorted(s, reverse=True)\n    a = 0\n    flag = True\n    for x in s:\n        x -= a\n        if x > 0 and x % (2 * n) == 0:\n            a += x // n\n            n -= 1\n        else:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for t in range(int(input())):\n    (n, chk, s) = (int(input()), True, 0)\n    arr = sorted(list(map(int, input().split())))\n    for i in range(2 * n - 1, -1, -2):\n        if arr[i] != arr[i - 1] or (i + 2 < 2 * n and arr[i] == arr[i + 2]) or arr[i] - s <= 0 or ((arr[i] - s) % (i + 1) != 0):\n            chk = False\n            print('NO')\n            break\n        s += 2 * (arr[i] - s) // (i + 1)\n    if chk:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if a[-1] == 0:\n        print('NO')\n    else:\n        flag = True\n        for j in range(0, 2 * n, 2):\n            if not a[j] == a[j + 1]:\n                flag = False\n                break\n        if flag:\n            s = 0\n            x = 2 * n\n            prev = 100000000000000\n            flag = True\n            for j in range(0, x, 2):\n                if a[j] - s > 0 and (a[j] - s) % (x - j) == 0:\n                    newvar = (a[j] - s) // (x - j)\n                    s += 2 * newvar\n                    if newvar != prev:\n                        prev = newvar\n                    else:\n                        flag = False\n                        break\n                else:\n                    flag = False\n                    break\n            if flag:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "def solve(arr, n):\n    d = dict()\n    for num in arr:\n        if num % 2 == 0:\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n        else:\n            return 'NO'\n    for (k, v) in d.items():\n        if v != 2:\n            return 'NO'\n    brr = list(set(arr))\n    brr.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if (brr[i] // 2 - count) % (n - i) != 0 or brr[i] // 2 - count <= 0:\n            return 'NO'\n        else:\n            count = count + (brr[i] // 2 - count) // (n - i)\n    return 'YES'\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = solve(arr, n)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [int(d) for d in input().split()]\n    d.sort(reverse=True)\n    prev = d[0]\n    done = 0\n    i = 0\n    while i < 2 * n:\n        if d[i] == d[i + 1] and d[i] > 0:\n            i = i + 2\n        else:\n            done = 1\n            print('NO')\n            break\n    if done == 0:\n        a = []\n        c = 0\n        i = 0\n        dic = {}\n        while i < 2 * n:\n            if i == 0:\n                if d[i] % (2 * n) == 0 and d[i] > 0:\n                    x = d[i] // (2 * n)\n                    a.append(x)\n                    dic[x] = 1\n                    i = i + 2\n                else:\n                    print('NO')\n                    done = 1\n                    break\n            else:\n                c += 2 * a[-1]\n                mod = 2 * n - i\n                if (d[i] - c) % mod == 0 and d[i] - c > 0:\n                    x = (d[i] - c) // mod\n                    if x in dic:\n                        print('NO')\n                        done = 1\n                        break\n                    else:\n                        a.append(x)\n                        dic[x] = 1\n                        i = i + 2\n                else:\n                    print('NO')\n                    done = 1\n                    break\n        if done == 0:\n            print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    d = sorted(map(int, input().split()), reverse=True)\n    flag = True\n    before = d[0]\n    for i in range(0, 2 * n, 2):\n        if i == 0:\n            before = d[i]\n        elif before == d[i]:\n            flag = False\n            break\n        else:\n            before = d[i]\n        if d[i] != d[i + 1]:\n            flag = False\n            break\n    if flag:\n        temp = 0\n        for i in range(0, 2 * n, 2):\n            if not (d[i] - temp) % (2 * n) == 0:\n                flag = False\n                break\n            elif d[i] <= temp:\n                flag = False\n                break\n            else:\n                temp += 2 * ((d[i] - temp) // (2 * n))\n                n -= 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    flag = 0\n    for i in d.keys():\n        if d[i] % 2 == 1 or i % 2 == 1:\n            flag = 1\n            break\n    if flag or a[-1] % (2 * n) != 0:\n        print('NO')\n        continue\n    a = list(d.keys())\n    a.sort()\n    val = a[-1] / n\n    ct = val\n    l = [val]\n    for i in range(n - 1, 0, -1):\n        x = a[i - 1] - ct\n        l.append(x / i)\n        ct += x / i\n        if x % (2 * i) != 0 or x <= 0 or l[-1] == l[-2]:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split(' ')))\n    a = [0] * n\n    uniq_a = set()\n    is_exist = True\n    sd = sorted(d, reverse=True)\n    part_sum = 0\n    for i in range(n):\n        if sd[2 * i] != sd[2 * i + 1]:\n            is_exist = False\n            break\n        a[i] = sd[2 * i] - part_sum\n        if a[i] <= 0 or a[i] % (2 * (n - i)) != 0:\n            is_exist = False\n            break\n        a[i] //= int(2 * (n - i))\n        if a[i] in uniq_a:\n            is_exist = False\n            break\n        uniq_a.add(a[i])\n        part_sum += 2 * a[i]\n    print(['NO', 'YES'][is_exist])", "def CheckAsymetrc():\n    n = int(input())\n    l1 = input().split(' ')\n    nums = []\n    SumNums = 0\n    NumNums = 0\n    for j in range(0, 2 * n):\n        nums.append(int(l1[j]))\n    nums.sort(reverse=True)\n    for j in range(0, n):\n        if nums[j * 2] != nums[j * 2 + 1]:\n            print('NO')\n            return\n    for j in range(0, n - 1):\n        if nums[j * 2] == nums[j * 2 + 2]:\n            print('NO')\n            return\n    for j in range(0, n):\n        tempNum = nums[j * 2] / 2\n        tempNum -= SumNums\n        if tempNum <= 0:\n            print('NO')\n            return\n        if tempNum % (n - NumNums) != 0:\n            print('NO')\n            return\n        tempNum = tempNum / (n - NumNums)\n        NumNums += 1\n        SumNums += tempNum\n    print('YES')\n    return\nt = int(input())\nfor i in range(0, t):\n    CheckAsymetrc()", "import sys\nimport math\nimport random\nfrom queue import PriorityQueue as PQ\nfrom bisect import bisect_left as BSL\nfrom bisect import bisect_right as BSR\nfrom collections import OrderedDict as OD\nfrom collections import Counter\nfrom itertools import permutations\nmod = 1000000007\nMOD = mod\ntry:\n    sys.stdin = open('actext.txt', 'r')\n    OPENFILE = 1\nexcept:\n    pass\n\ndef get_ints():\n    return map(int, input().split())\n\ndef palindrome(s):\n    mid = len(s) // 2\n    for i in range(mid):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef check(i, n):\n    if 0 <= i < n:\n        return True\n    else:\n        return False\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(get_ints())\n    mp = {}\n    flg = 0\n    for i in arr:\n        if i not in mp:\n            mp[i] = 0\n        mp[i] += 1\n    for (i, j) in mp.items():\n        if j != 2 or i % 2 != 0:\n            flg = 1\n            break\n    if flg == 0:\n        arr.sort(reverse=True)\n        presum = 0\n        nn = n\n        for i in arr[0::2]:\n            if (i - presum) % (2 * nn) == 0:\n                num = (i - presum) // (2 * nn)\n                presum += num * 2\n                nn -= 1\n                if num <= 0:\n                    flg = 1\n                    break\n            else:\n                flg = 1\n                break\n    if flg == 1:\n        print('NO')\n    else:\n        print('YES')", "Y = 'YES'\nN = 'NO'\nN = 'NO'\nt = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    f = 1\n    for j in range(n):\n        if a[j] % 2:\n            f = 0\n            break\n    if f == 0:\n        print(N)\n    else:\n        a.sort(reverse=True)\n        su = 0\n        f = 0\n        pre = -1\n        for j in range(n):\n            if a[j * 2] != a[j * 2 + 1] or (a[j * 2] - su) % (2 * (n - j)) != 0:\n                f = 1\n                break\n            else:\n                b = (a[j * 2] - su) // (2 * (n - j))\n                if pre == b or b <= 0:\n                    f = 1\n                    break\n                pre = b\n                su += (a[j * 2] - su) // (2 * (n - j)) * 2\n        if f:\n            print(N)\n        else:\n            print(Y)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    arr.sort(reverse=True)\n    temp = []\n    s = 0\n    f = 0\n    for i in range(0, 2 * n, 2):\n        if arr[i] != arr[i + 1]:\n            f = 1\n            print('NO')\n            break\n    if f == 0:\n        for i in range(0, 2 * n, 2):\n            p = (arr[i] - 2 * s) / (2 * n - i)\n            if p != int(p):\n                print('NO')\n                f = 1\n                break\n            if p <= 0:\n                print('NO')\n                f = 1\n                break\n            if len(temp) > 0 and temp[-1] == p:\n                print('NO')\n                f = 1\n                break\n            s += p\n            temp.append(p)\n        if f == 0:\n            print('YES')", "k = int(input())\nfor i in range(k):\n    n = int(input())\n    d = list(map(int, input().split()))\n    demi_d = []\n    resultat = 'YES'\n    d.sort()\n    for i in range(n):\n        if d[2 * i] != d[2 * i + 1] or d[2 * i] % 2 != 0:\n            resultat = 'NO'\n            break\n        else:\n            demi_d.append(d[2 * i])\n    if len(set(demi_d)) != n:\n        resultat = 'NO'\n    val = 0\n    if resultat == 'YES':\n        for j in range(n, 0, -1):\n            val1 = demi_d[j - 1] / 2\n            if (val1 - val) % j == 0 and val1 - val > 0:\n                val = val + (val1 - val) / j\n            else:\n                resultat = 'NO'\n                break\n    print(resultat)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = input().split(' ')\n    dList = [int(x) for x in l1]\n    dList.sort(reverse=True)\n    s = 0\n    flag = False\n    n = n * 2\n    for j in range(0, n, 2):\n        if dList[j] != dList[j + 1]:\n            flag = True\n            break\n    if flag:\n        print('NO')\n        continue\n    dList = [dList[k] for k in range(0, n, 2)]\n    n = n // 2\n    a = -1\n    for j in range(n):\n        dList[j] -= s\n        if dList[j] % (2 * (n - j)) != 0 or dList[j] <= 0:\n            flag = True\n            break\n        b = dList[j] // (n - j)\n        if a == b:\n            flag = True\n            break\n        a = b\n        s += a\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort(reverse=True)\n    s = []\n    flag = 0\n    for i in range(0, 2 * n, 2):\n        if lst[i] != lst[i + 1]:\n            print('NO')\n            flag = 1\n            break\n        s.append(lst[i])\n    tmp = 2 * n\n    cnt = 0\n    pp = []\n    if flag == 0:\n        for i in s:\n            ans = i - 2 * cnt\n            ccc = ans / tmp\n            if ccc % 1 != 0 or ccc == 0 or ccc < 0:\n                print('NO')\n                flag = 1\n                break\n            tmp -= 2\n            cnt += ccc\n            pp.append(ccc)\n    if flag == 0:\n        aaa = []\n        for i in pp:\n            aaa.append(i)\n        aaa.sort(reverse=True)\n        tt = set(pp)\n        if aaa == pp and len(tt) == len(pp) and (len(tt) == n):\n            print('YES')\n        else:\n            print('NO')", "def ints():\n    return list(map(int, input().split()))\n\ndef go():\n    (n,) = ints()\n    a = ints()\n    ans = solve(a, n)\n    print('YES' if ans else 'NO')\n\ndef solve(a, n):\n    a.sort(reverse=True)\n    last = 10 ** 12\n    s = 0\n    for i in range(n):\n        d = a[2 * i]\n        if a[2 * i + 1] != d:\n            return False\n        if d % 2:\n            return False\n        rem = d // 2 - s\n        if rem % (n - i):\n            return False\n        x = rem // (n - i)\n        if x <= 0 or x == last:\n            return False\n        s += x\n        last = x\n    return True\n(num_cases,) = ints()\nfor case_num in range(num_cases):\n    go()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if a[-1] == 0:\n        print('NO')\n    else:\n        flag = True\n        prev = -1\n        for j in range(0, 2 * n, 2):\n            if not (a[j] == a[j + 1] and a[j] != prev and (a[j] % 2 == 0)):\n                flag = False\n                break\n            prev = a[j]\n        if flag:\n            s = 0\n            x = 2 * n\n            flag = True\n            prev = 10 ** 13\n            for j in range(0, x, 2):\n                if a[j] - s > 0 and (a[j] - s) % (x - j) == 0:\n                    newvar = (a[j] - s) // (x - j)\n                    s += 2 * newvar\n                    if prev != newvar:\n                        prev = newvar\n                    else:\n                        flag = False\n                        break\n                else:\n                    flag = False\n                    break\n            if prev != 0 and flag:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "def f(n, t, d):\n    if d in str(n):\n        f(n + 1)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    d.reverse()\n    sett = set()\n    s = 0\n    A = []\n    for i in range(2 * n):\n        if i % 2 == 0:\n            if (d[i] - s) % (2 * n - i) or d[i] - s <= 0:\n                break\n            else:\n                a = (d[i] - s) // (2 * n - i)\n                s += a * 2\n                sett.add(a)\n                A.append(a)\n        elif d[i] != d[i - 1]:\n            sett = set()\n            break\n    for i in range(len(A) - 1):\n        if A[i] <= A[i + 1]:\n            sett = set()\n            break\n    if len(sett) == n:\n        print('YES')\n    else:\n        print('NO')", "for w in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    arr = sorted(list(map(int, set(s))), reverse=True)\n    i = t = 0\n    test = 'YES'\n    if len(arr) != n or s.count(arr[0]) != 2:\n        test = 'NO'\n    while test == 'YES' and i < n:\n        arr[i] -= t * 2\n        if arr[i] % ((n - i) * 2) == 0:\n            x = arr[i] // ((n - i) * 2)\n            if x <= 0:\n                test = 'NO'\n                break\n            t += x\n        else:\n            test = 'NO'\n            break\n        i = i + 1\n    print(test)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    D = list(map(int, input().split()))\n    possible = True\n    freq = {}\n    for d in D:\n        if d == 0 or d % 2 == 1:\n            possible = False\n            break\n        freq[d] = freq.get(d, 0) + 1\n    if not possible:\n        print('NO')\n        continue\n    for (d, f) in freq.items():\n        if f != 2:\n            possible = False\n            break\n    if not possible:\n        print('NO')\n        continue\n    rSortedDistinctD = sorted(freq.keys(), reverse=True)\n    currentASum = 0\n    for j in range(n):\n        d = rSortedDistinctD[j]\n        a = (d - 2 * currentASum) / (2 * (n - j))\n        if a < 1 or a != int(a):\n            possible = False\n            break\n        currentASum += int(a)\n    result = 'YES' if possible else 'NO'\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = {}\n    for i in p:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    f2 = 0\n    for i in d:\n        if d[i] % 2 == 1:\n            f2 = 1\n    for i in p:\n        if i % 2 == 1:\n            f2 = 1\n    if len(set(p)) != n:\n        f2 = 1\n    if f2:\n        print('NO')\n    else:\n        arr = list(set(p))\n        arr.sort(reverse=True)\n        prev_sum = 0\n        flag = True\n        s = set()\n        for i in arr:\n            num = i - prev_sum\n            den = 2 * n\n            if num <= 0:\n                flag = False\n                break\n            if num % den != 0:\n                flag = False\n                break\n            curr = num // den\n            n -= 1\n            prev_sum += 2 * curr\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    d = {}\n    for num in arr:\n        d[num] = d.get(num, 0) + 1\n    if any((d[i] != 2 for i in d)):\n        print('NO')\n        continue\n    s = 0\n    sarr = sorted(d.keys())\n    for i in range(n - 1, -1, -1):\n        (ratio, rem) = divmod(sarr[i] - s, 2 * (i + 1))\n        if ratio < 1 or rem:\n            print('NO')\n            break\n        s += 2 * ratio\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = {}\n    for i in p:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    f2 = 0\n    for i in d:\n        if d[i] % 2 == 1:\n            f2 = 1\n    for i in p:\n        if i % 2 == 1:\n            f2 = 1\n    if len(set(p)) != n:\n        f2 = 1\n    if f2:\n        print('NO')\n    else:\n        arr = list(set(p))\n        arr.sort(reverse=True)\n        prev_sum = 0\n        flag = True\n        s = set()\n        for i in arr:\n            num = i - prev_sum\n            den = 2 * n\n            if num <= 0:\n                flag = False\n                break\n            if num % den != 0:\n                flag = False\n                break\n            curr = num // den\n            if curr not in s:\n                s.add(curr)\n            else:\n                flag = False\n                break\n            n -= 1\n            prev_sum += 2 * curr\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = 0\n    for j in range(n):\n        if a[2 * j] != a[2 * j + 1]:\n            c = c + 1\n    if c > 0:\n        print('NO')\n    else:\n        k = 2 * n\n        sumo = 0\n        c1 = 0\n        b = []\n        for j in range(n):\n            b.append(a[2 * j])\n        s = set()\n        for j in range(n - 1, -1, -1):\n            if (b[j] - sumo) % k == 0 and b[j] > sumo:\n                val = (b[j] - sumo) // k\n                if val in s:\n                    c1 = c1 + 1\n                s.add(val)\n                sumo = sumo + 2 * val\n                k = k - 2\n            else:\n                c1 = c1 + 1\n        if c1 == 0:\n            print('YES')\n        else:\n            print('NO')", "def isPair(a):\n    ret = 0\n    for x in a:\n        ret ^= x\n    return ret == 0\nT = int(input())\nfor cas in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if not isPair(a):\n        print('NO')\n        continue\n    tot = 0\n    b = [0 for i in range(2 * n + 2)]\n    fl = True\n    for i in range(2 * n, n, -1):\n        if (a[2 * (i - n) - 1] - 2 * tot) % (2 * (i - n)):\n            fl = False\n            break\n        b[i] = (a[2 * (i - n) - 1] - 2 * tot) // (2 * (i - n))\n        if b[i] <= 0:\n            fl = False\n            break\n        tot += b[i]\n    for i in range(n + 1, 2 * n):\n        if b[i] == b[i + 1]:\n            fl = False\n            break\n    print('YES' if fl else 'NO')", "for testcase in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    for ele in arr:\n        if ele in d:\n            d[ele] += 1\n        else:\n            d[ele] = 1\n    f = 0\n    for ele in d:\n        if d[ele] != 2:\n            print('NO')\n            f = 1\n            break\n    if f:\n        continue\n    s = set(arr)\n    if len(s) != n:\n        print('NO')\n    else:\n        arr = list(s)\n        arr.sort()\n        s1 = 0\n        ans = []\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                b = arr[i]\n                c = 2 * n\n                if b % c != 0:\n                    print('NO')\n                    break\n                a = b // c\n                a = int(a)\n                ans.append(a)\n                s1 += a\n            else:\n                b = arr[i] - 2 * s1\n                c = 2 * (i + 1)\n                if b % c != 0:\n                    print('NO')\n                    break\n                a = b // c\n                if a > ans[-1] or a <= 0:\n                    print('NO')\n                    break\n                else:\n                    a = int(a)\n                    s1 += a\n                    ans.append(a)\n        else:\n            print('YES')", "t = int(input())\nimport math\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    ar = [int(x) for x in input().split()]\n    flag = True\n    ar.sort()\n    dr = []\n    for i in range(n):\n        if ar[2 * i] == ar[2 * i + 1]:\n            dr.append(ar[2 * i])\n        else:\n            flag = False\n    if flag:\n        for i in range(n):\n            if not dr[i] % 2 == 0:\n                flag = False\n    if flag:\n        s = 0\n        ans = [0 for i in range(n)]\n        for i in reversed(range(n)):\n            ans[i] = (dr[i] / 2 - s) / (i + 1)\n            s += ans[i]\n        for i in range(n):\n            if not int(ans[i]) == ans[i]:\n                flag = False\n        if not len(set(ans)) == n:\n            flag = False\n        if not sorted(ans) == ans:\n            flag = False\n        ans.sort()\n        if ans[0] <= 0:\n            flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nN = int(input())\n\ndef solve(n, d):\n    d = Counter(d)\n    s = 0\n    cnt = 0\n    for x in sorted(d, reverse=True):\n        if d[x] != 2:\n            return 'NO'\n        ai = x + 2 * s\n        if ai % (2 * n - 2 * cnt) != 0:\n            return 'NO'\n        ai //= 2 * n - 2 * cnt\n        ai *= -1\n        if ai >= 0:\n            return 'NO'\n        s += ai\n        cnt += 1\n        if cnt == n:\n            break\n    return 'YES'\nfor _ in range(N):\n    n = int(input())\n    d = list(map(int, input().split()))\n    print(solve(n, d))", "from collections import defaultdict\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    list2 = list(map(int, input().split()))\n    d1 = defaultdict(int)\n    f = 0\n    for i in range(len(list2)):\n        if list2[i] % 2 == 1 or list2[i] < 0:\n            f = 1\n            break\n        else:\n            d1[list2[i]] += 1\n    if f == 1:\n        print('NO')\n    else:\n        list1 = []\n        for i in d1.keys():\n            if d1[i] % 2 == 1 or i % 2 == 1:\n                f = 1\n                break\n            else:\n                for j in range(d1[i] // 2):\n                    list1.append(i // 2)\n        if f == 1:\n            print('NO')\n        else:\n            list1.sort()\n            temp_s = 0\n            count = n\n            d = defaultdict(int)\n            f = 0\n            for i in range(len(list1) - 1, -1, -1):\n                p = (list1[i] - temp_s) // count\n                if (list1[i] - temp_s) % count != 0 or p <= 0:\n                    f = 1\n                    break\n                else:\n                    d[p] += 1\n                    if d[p] > 1:\n                        f = 1\n                        break\n                    temp_s += p\n                count -= 1\n            if f == 1:\n                print('NO')\n            else:\n                print('YES')\n    t -= 1", "def check(array):\n    for i in range(len(array) - 1):\n        if i % 2:\n            if array[i] == array[i + 1]:\n                return False\n        elif array[i] != array[i + 1]:\n            return False\n    return True\n\ndef solve(array, n):\n    result = {}\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        ans = (array[i] / 2 - sum) / (i + 1)\n        if ans != int(ans) or ans <= 0:\n            return False\n        if ans in result:\n            return False\n        result[ans] = True\n        sum += ans\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    array.sort()\n    if check(array):\n        array = list(set(array))\n        array.sort()\n        if solve(array, n):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for w in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    arr = sorted(list(map(int, set(s))), reverse=True)\n    i = t = 0\n    test = 'YES'\n    count = dict()\n    for p in s:\n        count[p] = count.get(p, 0) + 1\n    for p in count:\n        if count[p] != 2:\n            test = 'NO'\n    if len(arr) != n:\n        test = 'NO'\n    while test == 'YES' and i < n:\n        arr[i] -= t * 2\n        if arr[i] % ((n - i) * 2) == 0:\n            x = arr[i] // ((n - i) * 2)\n            if x <= 0:\n                test = 'NO'\n                break\n            t += x\n        else:\n            test = 'NO'\n            break\n        i = i + 1\n    print(test)", "for w in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    arr = sorted(list(map(int, set(s))), reverse=True)\n    i = t = 0\n    test = 'YES'\n    count = dict()\n    if len(arr) != n:\n        test = 'NO'\n    for p in s:\n        count[p] = count.get(p, 0) + 1\n    for p in count:\n        if count[p] != 2:\n            test = 'NO'\n    while test == 'YES' and i < n:\n        arr[i] -= t * 2\n        if arr[i] % ((n - i) * 2) == 0:\n            x = arr[i] // ((n - i) * 2)\n            if x <= 0:\n                test = 'NO'\n                break\n            t += x\n        else:\n            test = 'NO'\n            break\n        i = i + 1\n    print(test)", "rn = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrns = lambda : map(int, input().split())\nrs = lambda : input()\nyn = lambda x: print('Yes') if x else print('No')\nYN = lambda x: print('YES') if x else print('NO')\nfor _ in range(rn()):\n    n = rn()\n    d = rl()\n    dic = {}\n    for i in d:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    ans = True\n    for i in dic:\n        if dic[i] != 2:\n            ans = False\n            break\n    if not ans:\n        print('NO')\n    else:\n        l = sorted(list(dic.keys()), reverse=True)\n        pre = 0\n        if l[0] % (2 * n) != 0:\n            ans = False\n        pre += l[0] // (2 * n)\n        last = l[0] // (2 * n)\n        lasts = [last]\n        for i in range(1, n):\n            if (l[i] - 2 * pre) % (2 * n - 2 * i) == 0 and 0 < (l[i] - 2 * pre) // (2 * n - 2 * i) <= last:\n                last = (l[i] - 2 * pre) // (2 * n - 2 * i)\n                lasts.append(last)\n                pre += (l[i] - 2 * pre) // (2 * n - 2 * i)\n            else:\n                ans = False\n                break\n        YN(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [*map(int, input().split())]\n    l.sort()\n    if l[0::2] != l[1::2] or len(set(l)) != n:\n        print('NO')\n        continue\n    l1 = l[-1:0:-2]\n    z = [0] * n\n    cnt = n\n    add = 0\n    val = 0\n    for i in range(n):\n        z[i] = (l1[i] - add) / cnt\n        add += z[i]\n        cnt -= 1\n        if z[i] > 0 and (z[i] / 2).is_integer():\n            val += 1\n    z1 = [i / 2 for i in z]\n    z2 = z1.copy()\n    z2.sort(reverse=True)\n    if val == n and z2 == z1:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef solve(D, n):\n    dic = Counter()\n    D.sort()\n    for it in D:\n        dic[abs(it)] += 1\n    c = 0\n    for (k, v) in dic.items():\n        if v != 2:\n            return 'NO'\n        c += 1\n    if c != n:\n        return 'NO'\n    D = D[::2]\n    diff = [D[i + 1] - D[i] for i in range(n - 1)]\n    d = []\n    mul = 2\n    b1 = 0\n    for it in diff:\n        if it % mul != 0:\n            return 'NO'\n        d.append(it // mul)\n        b1 += (n - len(d)) * d[-1]\n        mul += 2\n    if D[0] % 2:\n        return 'NO'\n    a = D[0] // 2 - b1\n    if a % n:\n        return 'NO'\n    a = a // n\n    if a <= 0:\n        return 'NO'\n    for it in d:\n        a += it\n        if a == 0 or it == 0:\n            return 'NO'\n    return 'YES'\nfor case in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = solve(arr, n)\n    print(ans)", "import math\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    a = input_list_int()\n    m = []\n    cmp = {}\n    for i in range(0, 2 * n):\n        if a[i] not in cmp:\n            cmp[a[i]] = 0\n        cmp[a[i]] += 1\n        if cmp[a[i]] == 2:\n            del cmp[a[i]]\n            m.append(a[i])\n    if len(cmp) > 0:\n        print(NO)\n    else:\n        m.sort(reverse=True)\n        delim = 2 * n\n        last = 0\n        x = []\n        for i in range(0, n):\n            m[i] -= last\n            mul = m[i] / delim\n            last += 2 * mul\n            x.append(mul)\n            delim -= 2\n        x.sort()\n        has = 1\n        for i in range(0, n):\n            if x[i] <= 0 or int(x[i]) != x[i]:\n                has = 0\n            if i > 0 and x[i] == x[i - 1]:\n                has = 0\n        print(YES if has == 1 else NO)\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "import collections\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    c = collections.Counter(d)\n    for x in c:\n        if c[x] != 2:\n            print('NO')\n            break\n    else:\n        d = sorted(set(d))\n        if d[0] % 2:\n            print('NO')\n        else:\n            s = d[0] // 2\n            a = []\n            for j in range(1, n):\n                v = d[j] - d[j - 1]\n                if v % (2 * j):\n                    print('NO')\n                    break\n                a.append(v // (2 * j))\n            else:\n                (f, g) = (0, 0)\n                for j in range(n - 1):\n                    f += a[j]\n                    g += f\n                if g < s and (s - g) % n == 0:\n                    print('YES')\n                else:\n                    print('NO')", "import sys\nnTest = int(input())\nfor iTest in range(nTest):\n    n = int(input())\n    x = input()\n    a = []\n    d = {}\n    for i in x.split():\n        a.append(int(i))\n        if int(i) not in d:\n            d[int(i)] = 1\n        else:\n            d[int(i)] += 1\n    f = 1\n    for i in d:\n        if d[i] != 2:\n            f = 0\n            break\n    if not f:\n        print('NO')\n        continue\n    a.sort()\n    s = set()\n    for x in a:\n        s.add(x)\n    if len(s) != n:\n        print('NO')\n        continue\n    a.clear()\n    for x in s:\n        a.append(x)\n    a.sort()\n    a.reverse()\n    sum = 0\n    for i in range(n):\n        if a[i] - 2 * sum <= 0 or (a[i] - 2 * sum) % (2 * (n - i)) != 0:\n            f = 0\n            break\n        sum += (a[i] - 2 * sum) / (2 * (n - i))\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    v = Counter(l).values()\n    f = 1\n    for i in v:\n        if i != 2:\n            f = 0\n            break\n    if f:\n        ls = list(set(l))\n        ls.sort(reverse=True)\n        total = 0\n        for i in ls:\n            if i % 2 or (i - total) % (2 * n) or i - total <= 0:\n                f = 0\n                break\n            else:\n                total += (i - total) // n\n                n -= 1\n    if f:\n        print('YES')\n    else:\n        print('NO')", "import collections\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    dd = [int(x) for x in input().split()]\n    dcount = collections.Counter(dd)\n    if len(dcount) != n:\n        print('NO')\n    else:\n        have_solution = True\n        for (d, count) in dcount.items():\n            if count != 2:\n                have_solution = False\n                break\n        if have_solution:\n            sorted_d = sorted(list(dcount.keys()), key=lambda x: -x)\n            bb = []\n            bb_sum = 0\n            index = n\n            for d in sorted_d:\n                if (d - 2 * bb_sum) % (2 * index) == 0:\n                    next_b = (d - 2 * bb_sum) // (2 * index)\n                    bb_sum += next_b\n                    index -= 1\n                    if len(bb) > 0 and next_b >= bb[-1] or next_b <= 0:\n                        have_solution = False\n                        break\n                    bb.append(next_b)\n                else:\n                    have_solution = False\n                    break\n        if have_solution:\n            print('YES')\n        else:\n            print('NO')", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d1 = Counter(d)\n    flag = 0\n    for j in d1:\n        if d1[j] != 2 or j % 2 != 0:\n            print('NO')\n            flag = 1\n            break\n    s = set(d)\n    s = list(s)\n    s.sort(reverse=True)\n    s1 = n\n    sum1 = 0\n    if flag == 0:\n        for k in range(len(s)):\n            s[k] = s[k] // 2\n            s[k] = s[k] - sum1\n            if s[k] % s1 != 0 or s[k] <= 0:\n                print('NO')\n                flag = 1\n                break\n            sum1 = sum1 + s[k] // s1\n            s1 = s1 - 1\n    if flag == 0:\n        print('YES')", "nTest = int(input())\nfor iTest in range(nTest):\n    n = int(input())\n    x = input()\n    a = []\n    d = {}\n    for i in x.split():\n        a.append(int(i))\n        if int(i) not in d:\n            d[int(i)] = 1\n        else:\n            d[int(i)] += 1\n    f = 1\n    for i in d:\n        if d[i] != 2:\n            f = 0\n            break\n    if not f:\n        print('NO')\n        continue\n    a.sort()\n    s = set()\n    for x in a:\n        s.add(x)\n    if len(s) != n:\n        print('NO')\n        continue\n    a.clear()\n    for x in s:\n        a.append(x)\n    a.sort()\n    a.reverse()\n    sum = 0\n    for i in range(n):\n        if a[i] - 2 * sum <= 0 or (a[i] - 2 * sum) % (2 * (n - i)) != 0:\n            f = 0\n            break\n        sum += (a[i] - 2 * sum) / (2 * (n - i))\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    v = Counter(l).values()\n    f = 1\n    for i in v:\n        if i != 2:\n            f = 0\n            break\n    for i in l:\n        if i % 2:\n            f = 0\n            break\n    if 0 in l:\n        f = 0\n    if f:\n        ls = list(set(l))\n        ls.sort(reverse=True)\n        (num, total) = ([], 0)\n        for i in ls:\n            if (i - total) % (2 * n) or i < total or (not i - total and i > 0):\n                f = 0\n                break\n            else:\n                x = (i - total) // (2 * n)\n                total += 2 * x\n                num.append(x)\n                n -= 1\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    v = Counter(l).values()\n    f = 1\n    for i in v:\n        if i != 2:\n            f = 0\n            break\n    for i in l:\n        if i % 2 or i == 0:\n            f = 0\n            break\n    if f:\n        ls = list(set(l))\n        ls.sort(reverse=True)\n        total = 0\n        for i in ls:\n            if (i - total) % (2 * n) or i < total or (not i - total and i > 0):\n                f = 0\n                break\n            else:\n                total += (i - total) // n\n                n -= 1\n    if f:\n        print('YES')\n    else:\n        print('NO')"]