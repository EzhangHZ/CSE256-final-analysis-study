["from sys import stdin\nfrom collections import Counter\nfrom itertools import combinations\n\ndef main():\n    l = stdin.read().splitlines()[2::2]\n    for (i, s) in enumerate(l):\n        cnt = Counter(map(int, s.split()))\n        ab = Counter({a * 2: x // 2 for (a, x) in cnt.items()})\n        for ((a, x), (b, y)) in combinations(cnt.items(), 2):\n            ab[a + b] += x if x < y else y\n        l[i] = str(ab.most_common(1)[0][1])\n    print('\\n'.join(l))\nmain()", "from itertools import combinations\n\ndef teams(parts):\n    counts = {}\n    for i in parts:\n        counts[i] = counts.get(i, 0) + 1\n    sums = {}\n    for (a, b) in combinations(counts.keys(), 2):\n        sums[a + b] = sums.get(a + b, 0) + min(counts[a], counts[b])\n    for i in counts:\n        sums[i * 2] = sums.get(i * 2, 0) + counts[i] // 2\n    return max(sums.values())\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    print(teams(a))", "def solve(n, k):\n    maxPairs = 0\n    tempPairs = 0\n    k.sort()\n    refer = [0] * 51\n    for x in k:\n        refer[x] += 1\n    for nSum in range(2, 101):\n        tempPairs = 0\n        till = nSum // 2\n        if nSum % 2 == 0:\n            tempPairs += refer[till] // 2\n            till -= 1\n        for y in range(1, till + 1):\n            big = nSum - y\n            if big > 50:\n                continue\n            tempPairs += min(refer[y], refer[nSum - y])\n        if tempPairs > maxPairs:\n            maxPairs = tempPairs\n    return maxPairs\nn = int(input())\nfor x in range(n):\n    x = int(input())\n    seq2 = list(map(int, input().split()))\n    print(solve(x, seq2))", "def checker(n, lst):\n    cnt = [0] * (n + 1)\n    for elem in lst:\n        cnt[elem] += 1\n    result = 0\n    for s in range(2, 2 * n + 1):\n        current = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            current += min(cnt[i], cnt[s - i])\n        if s % 2 == 0:\n            current += cnt[s // 2] // 2\n        result = max(result, current)\n    return result\nfor _ in range(int(input())):\n    m = int(input())\n    a = [int(j) for j in input().split()]\n    print(checker(m, a))", "from collections import Counter, defaultdict\nfrom itertools import combinations_with_replacement\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        W = list(map(int, input().split()))\n        c = Counter(W)\n        S = set(W)\n        ans = defaultdict(int)\n        for (a, b) in combinations_with_replacement(S, 2):\n            ans[a + b] += min(c[a], c[b]) if a != b else c[a] // 2\n        print(max(ans.values()))\nmain()", "def solution(N, weights):\n    count = 0\n    fills = [0] * (2 * N)\n    for w in weights:\n        fills[w] += 1\n    for S in range(2, 2 * N + 1):\n        current = 0\n        for i in range(1, (S + 1) // 2):\n            if S - i > N:\n                continue\n            current += min(fills[i], fills[S - i])\n        if not S % 2:\n            current += fills[S // 2] // 2\n        count = max(count, current)\n    return count\ntests = int(input())\nfor _ in range(tests):\n    n = int(input().strip())\n    weights = list(map(int, input().strip().split()))\n    print(solution(n, weights))", "def boat(arr):\n    n = len(arr)\n    ans = 0\n    blanck = [0] * (n + 1)\n    for i in arr:\n        blanck[i] += 1\n    for s in range(2, 2 * n + 1):\n        curr = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            curr += min(blanck[i], blanck[s - i])\n        if s % 2 == 0:\n            curr += blanck[s // 2] // 2\n        ans = max(ans, curr)\n    return ans\nt = int(input())\nfor _ in range(t):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(boat(lst))", "t = int(input())\nfor _ in range(t):\n    x = int(input())\n    a = list(map(int, input().split()))\n    c = [0] * 51\n    cnt = [0] * 101\n    for i in a:\n        c[i] += 1\n    for i in range(51):\n        for j in range(i + 1, 51):\n            cnt[i + j] += min(c[i], c[j])\n    for i in range(51):\n        cnt[i * 2] += c[i] // 2\n    print(max(cnt))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0] * 51\n    kq = [0] * 101\n    for i in a:\n        c[i] += 1\n    for i in range(51):\n        for j in range(i + 1, 51):\n            kq[i + j] += min(c[i], c[j])\n    for i in range(51):\n        kq[i * 2] += c[i] // 2\n    print(max(kq))", "def c(arr, n):\n    count = [0] * 101\n    c = 0\n    best = 0\n    for i in arr:\n        count[i] += 1\n    for s in range(2, 2 * n + 1):\n        c = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            c += min(count[i], count[s - i])\n        if s % 2 == 0:\n            c += count[s // 2] // 2\n        best = max(best, c)\n    return best\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(c(arr, n))", "from collections import Counter\n\ndef main():\n    for _ in range(int(input())):\n        (_, ab, l) = (input(), Counter(), [])\n        for (a, x) in Counter(map(int, input().split())).items():\n            ab[a * 2] += x // 2\n            for (b, y) in l:\n                ab[a + b] += min(x, y)\n            l.append((a, x))\n        print(ab.most_common(1)[0][1])\nmain()", "def solve():\n    for _ in range(ii()):\n        n = ii()\n        w = li()\n        cnt = [0] * (n + 1)\n        for i in range(n):\n            cnt[w[i]] += 1\n        ans = 0\n        for s in range(2, 2 * n + 1):\n            cur = 0\n            s_cap = (s + 1) // 2\n            for i in range(1, s_cap):\n                if s - i > n:\n                    continue\n                cur += min(cnt[i], cnt[s - i])\n            if s % 2 == 0:\n                cur += cnt[s // 2] // 2\n            ans = max(cur, ans)\n        print(ans)\nii = lambda : int(input())\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nsolve()", "def soln():\n    n = int(input())\n    wt = list(map(int, input().split()))\n    mapy = [0] * (n + 1)\n    for i in wt:\n        mapy[i] += 1\n    maxy = 0\n    wt = list(set(wt))\n    for i in range(2, 2 * n + 1):\n        temp = mapy.copy()\n        count = 0\n        for j in range(1, (i + 1) // 2):\n            if i - j > n:\n                continue\n            else:\n                count += min(temp[j], temp[i - j])\n        if i % 2 == 0:\n            count += max(0, temp[i // 2] // 2)\n        maxy = max(maxy, count)\n    return maxy\nfor i in range(int(input())):\n    print(soln())", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    n = mint()\n    cnt = [0] * (n + 1)\n    for i in mints():\n        cnt[i] += 1\n    best = 0\n    for s in range(2, n + n + 1):\n        c = 0\n        for i in range(1, n + 1):\n            j = s - i\n            if j < i:\n                break\n            if j <= n:\n                if j == i:\n                    c += cnt[i] // 2\n                else:\n                    c += min(cnt[i], cnt[j])\n        best = max(best, c)\n    print(best)\nfor i in range(mint()):\n    solve()", "def ans(a, n):\n    if n == 1 or n == 0:\n        return 0\n    elif n == 2 or n == 3:\n        return 1\n    a.sort()\n    max_sum = 2 * a[-1]\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    w = list(set(a))\n    arr = [0 for i in range(max_sum)]\n    for i in range(len(w)):\n        for j in range(i, len(w)):\n            if i == j:\n                arr[w[i] + w[j] - 1] += d[w[i]] // 2\n            else:\n                arr[w[i] + w[j] - 1] += min(d[w[i]], d[w[j]])\n    return max(arr)\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    arr = input().split()\n    a = []\n    for i in arr:\n        a.append(int(i))\n    print(ans(a, n))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = input().split()\n    lst1 = [0] * (n + 1)\n    for i in range(n):\n        lst1[int(lst[i])] += 1\n    lst2 = [0] * (2 * n + 1)\n    for j in range(1, n + 1):\n        for k in range(j + 1, n + 1):\n            lst2[j + k] += min(lst1[j], lst1[k])\n    for j in range(n + 1):\n        lst2[j * 2] += int(lst1[j] / 2)\n    print(max(lst2))", "def check():\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = [0] * 51\n    cnt = [0] * 101\n    for i in a:\n        count[i] += 1\n    for i in range(51):\n        cnt[i * 2] = count[i] // 2\n    for i in range(51):\n        for j in range(i + 1, 51):\n            if count[i] != 0 and count[j] != 0:\n                cnt[i + j] += min(count[i], count[j])\n    print(max(cnt))\nfor t in range(int(input())):\n    check()", "for t in range(int(input())):\n    n = int(input())\n    ans = [set() for j in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "from collections import defaultdict as dd, Counter as cc\nt = int(input())\n\ndef pp():\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = dd(int)\n    res[-1] = 0\n    cnt = cc(l)\n    for i in cnt:\n        if cnt[i] > 1:\n            res[i * 2] += cnt[i] // 2\n    ll = list(set(l))\n    for i in range(len(ll)):\n        for j in range(i + 1, len(ll)):\n            res[ll[i] + ll[j]] += min(cnt[ll[i]], cnt[ll[j]])\n    return max(res.values())\nwhile t:\n    print(pp())\n    t -= 1", "import sys\nfrom collections import Counter\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\nINF = 100000\n\ndef solve(n, arr):\n    dp = [0] * 101\n    d = dict()\n    for (e, t) in Counter(arr).items():\n        d[e] = t\n    for i in d:\n        for j in d:\n            dp[i + j] += min(d[i], d[j])\n    print(max(dp) // 2)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "from collections import defaultdict\n\ndef default_value():\n    return 0\n\ndef solve(W):\n    min_w = min(W)\n    max_w = max(W)\n    w_counter = defaultdict(default_value)\n    for w in W:\n        w_counter[w] += 1\n    result = 0\n    for pair_sum in range(2 * min_w, 2 * max_w + 1):\n        current_result = 0\n        for j in range(min_w, pair_sum // 2):\n            current_result += min(w_counter[j], w_counter[pair_sum - j])\n        if pair_sum % 2 == 0:\n            current_result += w_counter[pair_sum // 2] // 2\n        else:\n            current_result += min(w_counter[pair_sum // 2], w_counter[pair_sum - pair_sum // 2])\n        if current_result > result:\n            result = current_result\n    return result\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    W = list(map(int, input().split()))\n    print(solve(W))", "for t in range(int(input())):\n    n = int(input())\n    ans = [set() for j in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "t = int(input())\nfor step in range(t):\n    n = int(input())\n    w_raw = [int(data) for data in input().split()]\n    weights = [0 for i in range(n)]\n    for item in w_raw:\n        weights[item - 1] += 1\n    k = 0\n    s = 0\n    for central in range(n):\n        result = weights[central] // 2\n        for j in range(1, min(central + 1, n - central)):\n            result += min(weights[central + j], weights[central - j])\n        if result > k:\n            k = result\n    for left_central in range(n - 1):\n        result = 0\n        for j in range(min(left_central + 1, n - left_central - 1)):\n            result += min(weights[left_central + j + 1], weights[left_central - j])\n        if result > k:\n            k = result\n    print(k)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_count = 0\n    counter = Counter(arr)\n    for s in range(2, 2 * n + 1):\n        count = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            count += min(counter[i], counter[s - i])\n        if s % 2 == 0:\n            count += counter[s // 2] // 2\n        max_count = max(max_count, count)\n    print(max_count)\n    return\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "from itertools import combinations\na = []\nfor _ in range(int(input())):\n    input()\n    a.append(list(map(int, input().split())))\nfor a in a:\n    dict = {}\n    for row in a:\n        dict.setdefault(row, 0)\n        dict[row] += 1\n    res = {}\n    for (i, j) in combinations(dict.keys(), 2):\n        res.setdefault(i + j, 0)\n        res[i + j] += min(dict[i], dict[j])\n    for i in dict:\n        res.setdefault(i * 2, 0)\n        res[i * 2] += dict[i] // 2\n    print(max(res.values()))", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, input().split()))\n\ndef ipn():\n    return int(input())\n\ndef ipf():\n    return float(input())\n\ndef solve():\n    (n, a) = (ipn(), ipl())\n    h = Counter(a)\n    r = 0\n    x = sorted(h.keys())\n    for s in range(2, 2 * max(a) + 1):\n        t = 0\n        for k in x:\n            f = s - k\n            if f < k:\n                break\n            t += h[k] // 2 if f == k else min(h[k], h[f]) if f in h else 0\n        r = max(r, t)\n    print(r)\nfor _ in range(ipn()):\n    solve()", "from collections import Counter\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    d = {}\n    s1 = set()\n    s2 = set()\n    arr = [item for (items, c) in Counter(arr).most_common() for item in [items] * c]\n    for i in range(0, len(arr) - 1):\n        if arr[i] in s1:\n            continue\n        else:\n            s1.add(arr[i])\n        j = i + 1\n        k = 0\n        while j < len(arr) and arr[i] == arr[j]:\n            summ = arr[i] + arr[j]\n            if k % 2 == 0:\n                if summ not in d.keys():\n                    d[summ] = 1\n                else:\n                    d[summ] += 1\n            k += 1\n            j += 1\n        while j < len(arr):\n            summ = arr[i] + arr[j]\n            if summ not in d.keys():\n                d[summ] = 1\n            else:\n                d[summ] += 1\n            j += 1\n    if len(d) == 0:\n        print(0)\n    else:\n        print(max(d.values()))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = list(map(lambda a: (a, l.count(a)), set(l)))\n    r = [0] * (2 * n + 1)\n    n = len(s)\n    for i in range(n):\n        x = s[i]\n        r[x[0] * 2] += x[1] // 2\n        for j in range(i + 1, n):\n            y = s[j]\n            r[x[0] + y[0]] += min(x[1], y[1])\n    print(max(r))", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_arr = max(arr)\n    crr = [0] * (2 * max_arr + 1)\n    OTBET = 0\n    for i in arr:\n        crr[i] += 1\n    for s in range(2, 2 * max_arr + 1):\n        s_OTBET = 0\n        for i in range(1, s // 2 + 1):\n            if 2 * i == s:\n                s_OTBET += crr[s // 2] // 2\n            else:\n                s_OTBET += min(crr[s - i], crr[i])\n        OTBET = max(OTBET, s_OTBET)\n    print(OTBET)\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = [0] * 51\n    cnt = [0] * 101\n    for i in range(n):\n        count[a[i]] += 1\n    for i in range(51):\n        cnt[i * 2] = count[i] // 2\n    for i in range(51):\n        for j in range(i + 1, 51):\n            if count[i] != 0 and count[j] != 0:\n                cnt[i + j] += min(count[i], count[j])\n    print(max(cnt))", "import sys\nimport collections\n\ndef iinp():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef mp():\n    return map(int, inp().split())\n\ndef lmp():\n    return list(mp())\n\ndef solve():\n    n = iinp()\n    a = collections.Counter(mp())\n    ans = [0] * 400\n    for i in a:\n        for j in a:\n            ans[i + j] += min(a[i], a[j])\n    print(max(ans) // 2)\ntt = 1\nmulti = True\nif multi:\n    tt = iinp()\nfor i in range(tt):\n    solve()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    cnt = [0] * 51\n    for i in a:\n        cnt[i] += 1\n    count = [0] * 101\n    for i in a:\n        count[i * 2] = cnt[i] // 2\n    for i in range(1, 50):\n        for j in range(i + 1, 51):\n            if cnt[i] != 0 and cnt[j] != 0:\n                count[i + j] += min(cnt[i], cnt[j])\n    print(max(count))\n    t = t - 1", "import sys\n\ndef main():\n    res = ''\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        kw = [0] * (2 * (n + 1))\n        for i in w:\n            kw[i] += 1\n        sub_res = 0\n        for s in range(2, (n + 1) * 2):\n            cur_res = 0\n            for i in range(1, s // 2 + 1):\n                if 2 * i == s:\n                    cur_res += kw[i] // 2\n                else:\n                    cur_res += min(kw[i], kw[s - i])\n            if cur_res > sub_res:\n                sub_res = cur_res\n        res += str(sub_res) + '\\n'\n    print(res)\nmain()", "import copy\n\ndef f():\n    n = int(input())\n    ws = list(map(int, input().split()))\n    mx = 0\n    e = {}\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            s = ws[i] + ws[j]\n            if s not in e:\n                e[s] = set([])\n            e[s].add((i, j))\n    for k in e:\n        used = set([])\n        t = 0\n        for p in e[k]:\n            if p[0] in used or p[1] in used:\n                continue\n            used.add(p[0])\n            used.add(p[1])\n            t += 1\n        mx = max(mx, t)\n    return mx\nt = int(input())\nfor _ in range(t):\n    print(f())", "import collections\n\ndef solve():\n    n = int(input())\n    nums = list(map(lambda x: int(x), input().split()))\n    weights = collections.defaultdict(set)\n    maxTeam = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            weight = nums[i] + nums[j]\n            contestants = weights[weight]\n            if i not in contestants and j not in contestants:\n                weights[weight].add(i)\n                weights[weight].add(j)\n                maxTeam = max(maxTeam, len(weights[weight]) // 2)\n    return maxTeam\nn = int(input())\nfor i in range(n):\n    result = solve()\n    print(result)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = [0] * n\n    for i in w:\n        l[i - 1] += 1\n    m = 0\n    for i in range(2, 2 * n + 1):\n        gm = 0\n        for j in range(max(1, i - n), i // 2 + 1):\n            if j == i // 2 and i % 2 == 0:\n                gm += l[j - 1] // 2\n                continue\n            gm += min(l[j - 1], l[i - j - 1])\n        m = max(m, gm)\n    print(m)", "import sys\nt = int(sys.stdin.readline())\nwhile t:\n    n = int(sys.stdin.readline())\n    w = [int(wi) for wi in sys.stdin.readline().split()]\n    a = [0] * (n + 1)\n    for i in w:\n        a[i] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(a[i], a[s - i])\n        if s % 2 == 0:\n            cur += a[s // 2] // 2\n        ans = max(ans, cur)\n    sys.stdout.write(str(ans) + '\\n')\n    t -= 1", "from collections import *\nC = Counter\nfor s in [*open(0)][2::2]:\n    c = C(map(int, s.split()))\n    a = (*c,)\n    r = C()\n    i = 0\n    for x in a:\n        for y in a[:i]:\n            r[x + y] += min(c[x], c[y])\n        i += 1\n        r[2 * x] += c[x] // 2\n    print(max(r.values()))", "import os\nfrom collections import defaultdict, deque, Counter\nis_dev = 'vscode' in os.environ\nif is_dev:\n    inF = open('in.txt', 'r')\n    outF = open('out.txt', 'w')\n\ndef ins(r):\n    return list(map(int, r.split(' ')))\n\ndef input_():\n    if is_dev:\n        return inF.readline()[:-1]\n    else:\n        return input()\n\ndef print_(data):\n    if is_dev:\n        outF.write(str(data) + '\\n')\n    else:\n        print(data)\nfor _ in range(int(input_())):\n    n = int(input_())\n    a = ins(input_())\n    counter = Counter(a)\n    sum_val = defaultdict(int)\n    for i in counter:\n        for j in counter:\n            if i < j:\n                sum_val[i + j] += min(counter[i], counter[j])\n            elif i == j:\n                sum_val[2 * i] += counter[i] // 2\n    print_(max(sum_val.values()))\nif is_dev:\n    outF.close()\n\n    def compare_file():\n        print(open('out.txt', 'r').read() == open('outactual.txt', 'r').read())\n    compare_file()", "for _ in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(109)]\n    s = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "for _ in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(109)]\n    s = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    ans = 0\n    freq = {}\n    for i in arr:\n        freq[i] = freq.setdefault(i, 0) + 1\n    for s in range(2, 2 * n + 1):\n        cnt = 0\n        for i in range(1, (s + 1) // 2):\n            cnt += min(freq.get(i, 0), freq.get(s - i, 0))\n        if s % 2 == 0:\n            cnt += freq.get(s // 2, 0) // 2\n        ans = max(ans, cnt)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    freq = {}\n    for i in arr:\n        freq[i] = freq.setdefault(i, 0) + 1\n    ans = 0\n    for sum in range(2, 2 * n + 1):\n        cnt = 0\n        for a in range(1, (sum + 1) // 2):\n            cnt += min(freq.get(a, 0), freq.get(sum - a, 0))\n        if sum % 2 == 0:\n            cnt += freq.get(sum // 2, 0) // 2\n        ans = max(ans, cnt)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def boatsCompetition(n, array):\n    d = {}\n    for y in array:\n        if y in d:\n            d[y] += 1\n        else:\n            d[y] = 1\n    maxTeams = 0\n    for x in range(2, 2 * n + 1):\n        teams = 0\n        for i in d:\n            if i < x and x - i in d:\n                teams += min(d[i], d[x - i])\n        teams = teams // 2\n        if teams > maxTeams:\n            maxTeams = teams\n    return maxTeams\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(boatsCompetition(n, l))", "def boatsCompetition(n, array):\n    d = {}\n    for y in array:\n        if y in d:\n            d[y] += 1\n        else:\n            d[y] = 1\n    maxTeams = 0\n    for x in range(2, 2 * n + 1):\n        teams = 0\n        for i in d:\n            if i < x and x - i in d:\n                teams += min(d[i], d[x - i])\n        teams = teams // 2\n        if teams > maxTeams:\n            maxTeams = teams\n    return maxTeams\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(boatsCompetition(n, l))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split(' ')))\n    b = [0] * 51\n    v = [0] * 1001\n    r = list(set(a))\n    for i in range(n):\n        b[a[i]] += 1\n    for i in range(len(r)):\n        for j in range(i + 1, len(r)):\n            v[r[i] + r[j]] += min(b[r[i]], b[r[j]])\n    for i in range(len(r)):\n        v[r[i] + r[i]] += b[r[i]] // 2\n    print(max(v))", "for _ in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "from collections import defaultdict\n\ndef get_max_teams_count(l):\n    if len(l) == 1:\n        return 0\n    weight_count = defaultdict(int)\n    for weight in l:\n        weight_count[weight] += 1\n    ans = 0\n    for s in range(2 * min(l), 2 * max(l) + 1):\n        cur_result = 0\n        for lowest in range(min(l), s // 2 + 1):\n            highest = s - lowest\n            if highest == lowest:\n                cur_result += weight_count[lowest] // 2\n            else:\n                cur_result += min(weight_count[lowest], weight_count[highest])\n        ans = max(ans, cur_result)\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        input()\n        l = list(map(int, input().split()))\n        print(get_max_teams_count(l))\nmain()", "for i in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "from collections import Counter\n\ndef maxPossiblePairs(freqs, n):\n    maxCount = 0\n    s = 2\n    while s <= 2 * n:\n        possiblePair = 0\n        for each in range(1, (s + 1) // 2):\n            possiblePair += min(freqs.get(each, 0), freqs.get(s - each, 0))\n        if s % 2 == 0:\n            possiblePair += freqs.get(s // 2, 0) // 2\n        maxCount = max(maxCount, possiblePair)\n        s += 1\n    return maxCount\nfor (i, _) in enumerate(range(int(input()))):\n    N = int(input())\n    weights = []\n    weights = list(map(int, input().split()))\n    count = dict(Counter(weights))\n    print(maxPossiblePairs(count, N))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    cnt = [0] * (n + 1)\n    for i in map(int, input().split()):\n        cnt[i] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        c = 0\n        for i in range(1, s // 2 + 1):\n            if s - i > n:\n                continue\n            if 2 * i == s:\n                c += cnt[i] // 2\n            else:\n                c += min(cnt[i], cnt[s - i])\n        ans = max(ans, c)\n    print(ans)", "t = 1\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    wCount = {}\n    for i in range(1, n):\n        for j in range(i):\n            w = a[i] + a[j]\n            if w in wCount:\n                if i not in wCount[w] and j not in wCount[w]:\n                    wCount[w].add(i)\n                    wCount[w].add(j)\n            else:\n                wCount[w] = set([i, j])\n    b = wCount.values()\n    if n == 1:\n        print(0)\n    elif b:\n        c = max(b, key=len)\n        print(len(c) // 2)\n    else:\n        print(0)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    ar = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    for i in range(n):\n        cnt[ar[i]] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(cnt[i], cnt[s - i])\n        if s % 2 == 0:\n            cur += cnt[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(108)]\n    s = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "for i in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    counts = [0] * 52\n    ans = 0\n    for j in range(n):\n        counts[w[j]] += 1\n    for j in range(2, n * 2 + 1):\n        c = 0\n        for k in range(1, (j + 1) // 2):\n            if j - k > n:\n                continue\n            c += min(counts[k], counts[j - k])\n        ans = max(c, ans) if j % 2 != 0 else max(c + counts[j // 2] // 2, ans)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    ans = [set() for i in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    if n == 2:\n        print(1)\n        continue\n    counts = {}\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            x = arr[i]\n            y = arr[j]\n            if x + y not in counts:\n                counts[x + y] = set([i, j])\n            if i not in counts[x + y] and j not in counts[x + y]:\n                counts[x + y].add(i)\n                counts[x + y].add(j)\n    print(max([len(x) for x in counts.values()]) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    G = {}\n    for k in a:\n        if k in G:\n            G[k] += 1\n        else:\n            G[k] = 1\n    index = []\n    for k in G:\n        index.append(k)\n    G2 = {}\n    for k in range(0, len(index)):\n        for l in range(k + 1, len(index)):\n            min1 = min(G[index[k]], G[index[l]])\n            if index[k] + index[l] in G2:\n                G2[index[k] + index[l]] += min1\n            else:\n                G2[index[k] + index[l]] = min1\n        if index[k] + index[k] in G2:\n            G2[index[k] + index[k]] += int(G[index[k]] / 2)\n        else:\n            G2[index[k] + index[k]] = int(G[index[k]] / 2)\n    max1 = 0\n    for k in G2:\n        if G2[k] > max1:\n            max1 = G2[k]\n    print(max1)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    s = input()\n    a = s.split()\n    for i in range(n):\n        a[i] = int(a[i])\n    d = {}\n    for k in a:\n        if k in d:\n            d[k] += 1\n        else:\n            d[k] = 1\n    b = set(a)\n    b = list(b)\n    dic = {}\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            mn = min(d[b[i]], d[b[j]])\n            if b[i] + b[j] in dic:\n                dic[b[i] + b[j]] += mn\n            else:\n                dic[b[i] + b[j]] = mn\n        if b[i] + b[i] in dic:\n            dic[b[i] + b[i]] += d[b[i]] // 2\n        else:\n            dic[b[i] + b[i]] = d[b[i]] // 2\n    print(max(list(dic.values())))", "for _ in range(int(input())):\n    n = int(input())\n    ar = [0 for i in range(n + 1)]\n    arr = list(map(int, input().split()))\n    for i in arr:\n        ar[i] += 1\n    ans = 0\n    for i in range(2, 2 * n + 1):\n        p = 0\n        for j in range(1, (i + 1) // 2):\n            if i - j > n:\n                continue\n            else:\n                p += min(ar[j], ar[i - j])\n        if i % 2 == 0:\n            p += ar[i // 2] // 2\n        ans = max(ans, p)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0 for i in range(n + 1)]\n    arr = [int(i) for i in input().split()]\n    for i in range(n):\n        a[arr[i]] += 1\n    ans = -1\n    for s in range(2, 2 * n + 1):\n        cs = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cs += min(a[i], a[s - i])\n        if s % 2 == 0:\n            cs += a[s // 2] // 2\n        ans = max(ans, cs)\n    print(ans)", "output = []\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    a = [0] * (n + 1)\n    for i in arr:\n        a[i] += 1\n    max_ = -1\n    for s in range(2, 2 * n + 1):\n        pairs = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            pairs += min(a[i], a[s - i])\n        if s % 2 == 0:\n            pairs += a[s // 2] // 2\n        max_ = max(max_, pairs)\n    output.append(max_)\nfor _ in output:\n    print(_)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    dic = [0] * (n + 1)\n    for i in w:\n        dic[i] += 1\n    ans = 0\n    for s in range(2, max(w) * 2 + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i <= n:\n                cur += min(dic[i], dic[s - i])\n        if s % 2 == 0:\n            cur += dic[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "from collections import defaultdict, Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    a = a.split()\n    a = list(map(int, a))\n    C = Counter(a)\n    sum = defaultdict(int)\n    for p in C:\n        for q in C:\n            if p <= q:\n                sum[p + q] += min(C[p], C[q]) if p != q else C[p] // 2\n    print(max(sum.values()))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    fre = {}\n    answer = 0\n    s = 0\n    count = list(Counter(nums).items())\n    for index in range(len(count)):\n        if count[index][1] > 1:\n            fre[2 * count[index][0]] = count[index][1] // 2 + fre.get(2 * count[index][0], 0)\n            if answer < fre[2 * count[index][0]]:\n                s = 2 * count[index][0]\n                answer = max(answer, fre[2 * count[index][0]])\n        for ind in range(index + 1, len(count)):\n            summ = count[index][0] + count[ind][0]\n            get = min(count[index][1], count[ind][1])\n            fre[summ] = get + fre.get(summ, 0)\n            if answer < fre[summ]:\n                s = summ\n                answer = max(answer, fre[summ])\n    seen = {}\n    count = 0\n    for item in nums:\n        if s - item in seen and seen[s - item] > 0:\n            count += 1\n            seen[s - item] -= 1\n        else:\n            seen[item] = 1 + seen.get(item, 0)\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    ans = [set() for i in range(101)]\n    s = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            w = s[i] + s[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    count_array = [0 for i in range(n + 1)]\n    for i in w:\n        count_array[i] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(count_array[i], count_array[s - i])\n        if s % 2 == 0:\n            cur += count_array[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    for i in range(n):\n        cnt[w[i]] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(cnt[i], cnt[s - i])\n        if s % 2 == 0:\n            cur += cnt[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "import bisect\nimport math\nfor xoxo in range(1):\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = [0] * 51\n        fans = 0\n        for i in range(n):\n            b[a[i]] += 1\n        for i in range(2, 101):\n            (ans, x) = (0, 0)\n            if i % 2:\n                x += 1\n            for j in range(1, i // 2 + x):\n                if i - j <= 50:\n                    ans += min(b[j], b[i - j])\n            if i % 2 == 0:\n                ans += b[i // 2] // 2\n            fans = max(fans, ans)\n        print(fans)", "def distinct(arr, n):\n    temp = arr[0]\n    for i in range(n):\n        if arr[i] != temp:\n            return 0\n    return 1\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    weights = dict()\n    keys = set()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            tmp = arr[i] + arr[j]\n            if tmp in keys:\n                if i not in weights[tmp] and j not in weights[tmp]:\n                    weights[tmp].add(i)\n                    weights[tmp].add(j)\n            else:\n                weights[tmp] = {i}\n                weights[tmp].add(j)\n                keys.add(tmp)\n    ans = 0\n    for x in weights.values():\n        ans = max(ans, len(x))\n    print(ans // 2)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    temp = list(map(int, input().split()))\n    l = [0] * (n + 1)\n    for i in temp:\n        l[i] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i <= n:\n                cur += min(l[i], l[s - i])\n        if s % 2 == 0:\n            cur += l[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [0] * 51\n    w = [int(item) for item in input().split()]\n    for i in w:\n        a[i] += 1\n    ans = 0\n    for s in range(2, 101):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(a[i], a[s - i])\n        if s % 2 == 0:\n            cur += a[s // 2] // 2\n        ans = max(ans, cur)\n    print(ans)", "from collections import Counter\n\ndef par(l):\n    d = []\n    dicto = Counter(l)\n    lk = list(dicto.keys())\n    if len(lk) > 1:\n        for i in range(len(lk)):\n            for j in range(i + 1, len(lk)):\n                for s in range(min(dicto[lk[i]], dicto[lk[j]])):\n                    d.append(lk[i] + lk[j])\n    for i in range(len(lk)):\n        if dicto[lk[i]] > 1:\n            for j in range(dicto[lk[i]] // 2):\n                d.append(lk[i] + lk[i])\n    if len(d) == 0:\n        return '0'\n    acto = Counter(d)\n    return str(max(list(acto.values())))\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    km = list(map(int, r2))\n    s += par(km) + '\\n'\nprint(s)", "t = int(input())\n\ndef search(w, arr):\n    (l, r) = (0, len(arr) - 1)\n    ret = 0\n    while l < r:\n        tmp = arr[l] + arr[r]\n        if tmp < w:\n            l += 1\n        elif tmp > w:\n            r -= 1\n        else:\n            ret += 1\n            l += 1\n            r -= 1\n    return ret\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    mi = min(arr)\n    ma = max(arr)\n    ans = 0\n    for i in range(2, 101):\n        ans = max(ans, search(i, arr))\n    print(ans)\n    t -= 1", "import collections\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    d = defaultdict(lambda : 0)\n    for x in w:\n        d[x] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        count = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            count += min(d[i], d[s - i])\n        if s % 2 == 0:\n            count += d[s // 2] // 2\n        ans = max(ans, count)\n    print(ans)", "from collections import Counter\nn = int(input())\nfor _ in range(n):\n    nn = int(input())\n    ls = Counter(list(map(int, input().split())))\n    ws = [0 for x in range(105)]\n    for i in ls:\n        for j in ls:\n            if j > i:\n                continue\n            ws[i + j] += min(ls[i], ls[j]) if i != j else ls[i] // 2\n    print(max(ws))", "from math import ceil, gcd\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\n\ndef li():\n    return list(map(int, input().split()))\n\ndef arr(a):\n    return array('i', a)\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        w = ctr(li())\n        ans = [0] * 101\n        for i in w:\n            for j in w:\n                if i != j:\n                    ans[i + j] += min(w[i], w[j]) / 2\n                else:\n                    ans[2 * i] += w[i] // 2\n        print(int(max(ans)))\nsolve()", "def solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    c = [w.count(i) for i in range(n + n + 1)]\n    ans = 0\n    for s in range(2, n + n + 1):\n        cc = 0\n        for i in range(1, n + 1):\n            j = s - i\n            if i == j:\n                cc += c[i] // 2\n            elif i < j:\n                cc += min(c[i], c[j])\n            else:\n                break\n        ans = max(ans, cc)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list((int(i) for i in input().split()))\n    mp = dict()\n    for i in arr:\n        mp[i] = mp.get(i, 0) + 1\n    key = list(mp.keys())\n    mp1 = dict()\n    for i in mp:\n        mp1[2 * i] = mp[i] // 2\n    for comb in combinations(key, 2):\n        tmp = comb\n        sm = tmp[0] + tmp[1]\n        mp1[sm] = mp1.get(sm, 0) + min(mp[tmp[0]], mp[tmp[1]])\n    value = list(mp1.values())\n    print(max(value))", "from collections import Counter\nn = int(input())\nfor _ in range(n):\n    nn = int(input())\n    ls = Counter(list(map(int, input().split())))\n    ws = [0 for x in range(105)]\n    for i in ls:\n        for j in ls:\n            if j > i:\n                continue\n            ws[i + j] += min(ls[i], ls[j]) if i != j else ls[i] // 2\n    print(max(ws))", "t = int(input())\nfor i1 in range(t):\n    n = int(input())\n    ans = [set() for i in range(110)]\n    vec = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w = vec[i] + vec[j]\n            if i not in ans[w] and j not in ans[w]:\n                ans[w].add(i)\n                ans[w].add(j)\n    print(max((len(i) for i in ans)) // 2)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    cnt = [0] * (n + 1)\n    for x in a:\n        cnt[x] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        cur = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            cur += min(cnt[i], cnt[s - i])\n        if s % 2 == 0:\n            cur += cnt[s // 2] // 2\n        if cur > ans:\n            ans = cur\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = defaultdict(set)\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = arr[i] + arr[j]\n            if i not in g[x] and j not in g[x]:\n                g[x].add(i)\n                g[x].add(j)\n    maxy = 0\n    for i in g:\n        if len(g[i]) > maxy:\n            maxy = len(g[i])\n    print(maxy // 2)", "from collections import Counter\n\ndef read_int():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split(' ')))\n\ndef resolve():\n    for _ in range(read_int()):\n        _ = read_int()\n        participants_weight_list = sorted(read_int_list(), reverse=False)\n        result = [0] * 101\n        frequency = Counter(participants_weight_list)\n        for index1 in frequency:\n            for index2 in frequency:\n                result[index1 + index2] += min(frequency[index1], frequency[index2])\n        print(max(result) // 2)\nresolve()", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = [0] * (n + 1)\n    for i in a:\n        count[i] += 1\n    res = 0\n    for i in range(2, 2 * n + 1):\n        t = 0\n        for j in range(1, (i + 1) // 2):\n            if i - j <= n:\n                t += min(count[j], count[i - j])\n        if i % 2 == 0:\n            t += count[i // 2] // 2\n        res = max(res, t)\n    print(res)", "from collections import defaultdict, Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    a = a.split()\n    a = list(map(int, a))\n    C = Counter(a)\n    sum = defaultdict(int)\n    for p in C:\n        for q in C:\n            if p <= q:\n                sum[p + q] += min(C[p], C[q]) if p != q else C[p] // 2\n    print(max(sum.values()))", "from collections import Counter\nn = int(input())\nfor _ in range(n):\n    nn = int(input())\n    ls = Counter(list(map(int, input().split())))\n    ws = [0 for x in range(105)]\n    for i in ls:\n        for j in ls:\n            if j > i:\n                continue\n            ws[i + j] += min(ls[i], ls[j]) if i != j else ls[i] // 2\n    print(max(ws))", "import collections\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freqs = collections.Counter(arr)\n    dd = collections.defaultdict(int)\n    ls = [[i, f] for (i, f) in freqs.items()]\n    for i in range(len(ls) - 1):\n        for j in range(i + 1, len(ls)):\n            dd[ls[i][0] + ls[j][0]] += min(ls[i][1], ls[j][1])\n    for item in ls:\n        dd[2 * item[0]] += item[1] // 2\n    print(max(dd.values()))", "from collections import Counter\n\ndef findweight(arr, t):\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    maxi = 0\n    for i in range(2, 2 * t + 1):\n        total = 0\n        for j in d:\n            other = i - j\n            if other > 0 and other in d:\n                total += min(d[j], d[other])\n        total = total // 2\n        maxi = max(maxi, total)\n    return maxi\nn = int(input())\nfor i in range(n):\n    t = int(input())\n    arr = [int(i) for i in input().split()]\n    print(findweight(arr, t))", "for ip in [*open(0)][2::2]:\n    a = list(map(int, ip.split()))\n    n = len(a)\n    ans = 0\n    c = [0] * (n + 1)\n    for x in a:\n        c[x] += 1\n    for s in range(2, 2 * n + 1):\n        temp = 0\n        for i in range(1, s + 1 >> 1):\n            if s - i > n:\n                continue\n            temp += min(c[i], c[s - i])\n        if not s & 1:\n            temp += c[s >> 1] >> 1\n        ans = max(ans, temp)\n    print(ans)", "import math\nfrom itertools import combinations\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    w = [int(i) for i in input().split()]\n    (dic, nums) = ({}, [])\n    for i in range(n):\n        if w[i] not in dic:\n            dic[w[i]] = 1\n            nums.append(w[i])\n        else:\n            dic[w[i]] += 1\n    comb = list(combinations(nums, 2))\n    sumc = {}\n    for i in comb:\n        tot = sum(i)\n        if tot not in sumc:\n            minc = min(dic[i[0]], dic[i[1]])\n            sumc[tot] = minc\n        else:\n            minc = min(dic[i[0]], dic[i[1]])\n            sumc[tot] += minc\n    for i in nums:\n        tot = 2 * i\n        if tot not in sumc:\n            sumc[tot] = dic[i] // 2\n        else:\n            sumc[tot] += dic[i] // 2\n    res = 0\n    for i in sumc:\n        res = max(res, sumc[i])\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    cnt = {}\n    for i in ar:\n        if i in cnt:\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    key = list(cnt.keys())\n    dic = {}\n    k = len(key)\n    for i in range(k):\n        for j in range(i + 1, k):\n            var = key[i] + key[j]\n            co = min(cnt[key[i]], cnt[key[j]])\n            if var in dic:\n                dic[var] += co\n            else:\n                dic[var] = co\n    for i in key:\n        var = 2 * i\n        co = cnt[i] // 2\n        if var in dic:\n            dic[var] += co\n        else:\n            dic[var] = co\n    val = list(dic.values())\n    print(max(val))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    for item in a:\n        cnt[item] += 1\n    ans = 0\n    for s in range(2, 2 * n + 1):\n        now = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > n:\n                continue\n            now += min(cnt[s - i], cnt[i])\n        if not s & 1:\n            now += cnt[s // 2] // 2\n        ans = max(ans, now)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    nums = Counter(list(map(int, input().split())))\n    if n == 1:\n        print('0')\n        continue\n    numlist = list(nums.keys())\n    numlen = len(numlist)\n    sums = {}\n    ans = 0\n    for i in range(numlen):\n        if nums[numlist[i]] > 1:\n            try:\n                sums[numlist[i] * 2] += nums[numlist[i]] // 2\n            except:\n                sums[numlist[i] * 2] = nums[numlist[i]] // 2\n        for j in range(i + 1, numlen):\n            try:\n                sums[numlist[i] + numlist[j]] += min(nums[numlist[i]], nums[numlist[j]])\n            except:\n                sums[numlist[i] + numlist[j]] = min(nums[numlist[i]], nums[numlist[j]])\n    print(max(sums.values()))", "from collections import defaultdict, Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    a = a.split()\n    a = list(map(int, a))\n    C = Counter(a)\n    sum = defaultdict(int)\n    for p in C:\n        for q in C:\n            if p <= q:\n                sum[p + q] += min(C[p], C[q]) if p != q else C[p] // 2\n    print(max(sum.values()))", "def freqCount(arr, n, Sum):\n    i = 0\n    j = n - 1\n    count = 0\n    while j > i:\n        x = arr[i] + arr[j]\n        if x == Sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif x < Sum:\n            i += 1\n        else:\n            j -= 1\n    return count\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    freq_arr = [0] * 101\n    for j in range(2, 101):\n        freq_arr[j] = freqCount(arr, n, j)\n    print(max(freq_arr))", "import bisect\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    w = list(map(int, input().split()))\n    cnt = [0] * (N + 1)\n    for wi in w:\n        cnt[wi] += 1\n    best = 0\n    for s in range(2 * max(w) + 1):\n        pairs = 0\n        for i in range(1, (s + 1) // 2):\n            if s - i > N:\n                continue\n            pairs += min(cnt[i], cnt[s - i])\n        if s % 2 == 0:\n            pairs += cnt[s // 2] // 2\n        best = max(best, pairs)\n    print(best)", "nt = int(input())\n\ndef helper(arr):\n    if len(arr) < 2:\n        return 0\n    out = 1\n    t = arr[0] + arr[-1]\n    (i, j) = (1, len(arr) - 2)\n    while i < j:\n        if arr[i] + arr[j] == t:\n            (out, i, j) = (out + 1, i + 1, j - 1)\n        elif arr[i] + arr[j] > t:\n            j = j - 1\n        else:\n            i = i + 1\n    return out\nfor test in range(nt):\n    n = int(input())\n    w = list(map(int, input().strip().split()))\n    w.sort()\n    ans = 0\n    ts = set()\n    for i in range(len(w)):\n        for j in range(len(w), i, -1):\n            if w[i] + w[j - 1] not in ts:\n                ans = max(ans, helper(w[i:j]))\n                ts.add(w[i] + w[j - 1])\n    print(ans)"]