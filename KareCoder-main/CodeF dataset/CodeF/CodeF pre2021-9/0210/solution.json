["for i in [*open(0)][2::2]:\n    q = [0] * 3\n    for _ in map(int, i.split()):\n        q[_ % 3] += 1\n    print(max((q[i] - q[i - 1] for i in (0, 1, 2))))", "for s in [*open(0)][2::2]:\n    c = [0] * 3\n    for x in s.split():\n        c[int(x) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in (0, 1, 2))))", "import sys\n\ndef main():\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        (cnt, r) = ([int(input()) // -3] * 3, 0)\n        for a in map(int, input().split()):\n            cnt[a % 3] += 1\n        for i in (0, 1, 2, 0):\n            if cnt[i] > 0:\n                r += cnt[i]\n                cnt[i - 2] += cnt[i]\n                cnt[i] = 0\n        print(r)\nmain()", "for i in [*open(0)][2::2]:\n    q = [0] * 3\n    for _ in map(int, i.split()):\n        q[_ % 3] += 1\n    print(max((q[i] - q[i - 1] for i in (0, 1, 2))))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    c = [0] * 3\n    for i in map(int, input().split()):\n        c[i % 3] += 1\n    want = n // 3\n    r = 0\n    while c[0] != want or c[1] != want or c[2] != want:\n        w = max(c[2] - want, 0)\n        c[2] -= w\n        r += w\n        c[0] += w\n        w = max(c[0] - want, 0)\n        c[0] -= w\n        r += w\n        c[1] += w\n        w = max(c[1] - want, 0)\n        c[1] -= w\n        r += w\n        c[2] += w\n    print(r)\nfor i in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    rem = [0] * 3\n    for i in a:\n        rem[i % 3] += 1\n    ans = 0\n    for __ in range(2):\n        for i in range(3):\n            if rem[i] > n // 3:\n                dec = rem[i] - n // 3\n                rem[i] -= dec\n                rem[(i + 1) % 3] += dec\n                ans += dec\n    print(ans)", "for s in [*open(0)][2::2]:\n    c = [0] * 3\n    for x in s.split():\n        c[int(x) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in (0, 1, 2))))", "for i in [*open(0)][2::2]:\n    q = [0] * 3\n    for _ in map(int, i.split()):\n        q[_ % 3] += 1\n    print(max((q[i] - q[i - 1] for i in (0, 1, 2))))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    (c0, c1, c2) = (-n // 3, -n // 3, -n // 3)\n    w = list(map(int, input().split()))\n    for i in w:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    print(max(0, c0) + max(0, c1 + max(0, c0)) + max(0, c2 + max(0, c1 + max(0, c0))) + max(0, c0 - max(0, c0) + max(0, c2 + max(0, c1 + max(0, c0)))))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    w = [0] * 3\n    for i in list(map(int, input().split())):\n        w[i % 3] += 1\n    print(max((w[i] - w[i - 1] for i in range(3))))", "import sys\nfrom collections import Counter\n\ndef debug(*args):\n    print(*args, file=sys.stderr)\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_str_split():\n    return list(sys.stdin.readline().strip())\n\ndef read_int_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    t = read_int()\n    for _ in range(t):\n        n = read_int()\n        a = read_int_list()\n        good = n // 3\n        ans = 0\n        div_a = [x % 3 for x in a]\n        cnt_a = Counter(div_a)\n        while not cnt_a[0] == cnt_a[1] == cnt_a[2]:\n            (key, val) = cnt_a.most_common()[0]\n            if val > good:\n                ans += val - good\n                cnt_a[key] = good\n                cnt_a[(key + 1) % 3] += val - good\n        print(ans)\nMain()", "def func(n, f):\n    zero = 0\n    one = 0\n    two = 0\n    x = n // 3\n    for i in range(n):\n        if f[i] % 3 == 0:\n            zero = zero + 1\n        elif f[i] % 3 == 1:\n            one = one + 1\n        elif f[i] % 3 == 2:\n            two = two + 1\n    k = 0\n    while True:\n        if zero == one and one == two:\n            return k\n        if zero > x:\n            c = zero - x\n            zero = x\n            one = one + c\n            k = k + c\n        if one > x:\n            c = one - x\n            one = x\n            two = two + c\n            k = k + c\n        if two > x:\n            c = two - x\n            two = x\n            zero = zero + c\n            k = k + c\nx = int(input())\nlis = []\nfor i in range(x):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = func(n, f)\n    lis.append(ans)\nfor i in lis:\n    print(i)", "def balance(n, a):\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for i in a:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n\n    def min(c):\n        ind = 0\n        for i in range(1, len(c)):\n            if c[i] < c[ind]:\n                ind = i\n        return ind\n\n    def max(c):\n        ind = 0\n        for i in range(1, len(c)):\n            if c[i] > c[ind]:\n                ind = i\n        return ind\n    c = [c0, c1, c2]\n    if c0 == c1 and c1 == c2:\n        ans = 0\n    elif min(c) == (1 + max(c)) % 3:\n        ans = c[max(c)] - n / 3\n        s = c[min(c)] + c[max(c)] - 2 * n / 3\n        if s < 0:\n            ans += 2 * -1 * s\n        else:\n            ans += s\n    else:\n        ans = c[max(c)] - n / 3\n        ans += n / 3 - c[min(c)]\n    return int(ans)\nt = int(input())\ny = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n, 'Incorrect Input'\n    y.append(a)\nfor a in y:\n    print(balance(len(a), a))", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        (c1, c0, c2) = (0, 0, 0)\n        c = [0] * 3\n        for i in l:\n            if i % 3 == 0:\n                c[0] += 1\n            elif i % 3 == 1:\n                c[1] += 1\n            else:\n                c[2] += 1\n        s = 0\n        i = c.index(max(c))\n        while c[i] != n // 3:\n            x = c[i] - n // 3\n            if i == 2:\n                c[i] = n // 3\n                c[0] += x\n            else:\n                c[i] = n // 3\n                c[i + 1] += x\n            s += x\n            i = c.index(max(c))\n        print(s)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    A = [a % 3 for a in map(int, input().split())]\n    D = [A.count(i) for i in range(3)]\n    res = 0\n    f = n // 3\n    while True:\n        for i in range(3):\n            if D[i] > f:\n                D[(i + 1) % 3] += D[i] - f\n                res += D[i] - f\n                D[i] = f\n        if len(set(D)) == 1:\n            break\n    print(res)\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        solve()\nresolve()", "t = input()\nd = []\nfor i in range(int(t)):\n    b = input()\n    ab = list(map(int, input().split()))\n    d.append(ab)\n\ndef an(a):\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    le = len(a) // 3\n    for i in a:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    if max(c0, c1, c2) == c1:\n        cc = [c1, c2, c0]\n    elif max(c0, c1, c2) == c2:\n        cc = [c2, c0, c1]\n    else:\n        cc = [c0, c1, c2]\n    c = cc[0] - le\n    cc[1] = cc[1] + c\n    if cc[1] >= le:\n        c += cc[1] - le\n    else:\n        c = c + 2 * (cc[2] - le)\n    print(c)\nfor i in d:\n    an(i)", "import sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nfrom math import gcd\nMOD = int(1000000000.0 + 7)\nINF = int(1e+20)\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nii = lambda : int(input())\nt = ii()\nfor _ in range(t):\n    n = ii()\n    arr = li()\n    c0 = c1 = c2 = 0\n    for i in arr:\n        if i % 3 == 0:\n            c0 += 1\n        if i % 3 == 1:\n            c1 += 1\n        if i % 3 == 2:\n            c2 += 1\n    m = n // 3\n    res = 0\n    while True:\n        if c0 == c1 == c2:\n            break\n        if c0 > m:\n            res += c0 - m\n            c1 += c0 - m\n            c0 = m\n        if c1 > m:\n            res += c1 - m\n            c2 += c1 - m\n            c1 = m\n        if c2 > m:\n            res += c2 - m\n            c0 += c2 - m\n            c2 = m\n    print(res)", "for s in [*open(0)][2::2]:\n    c = [0] * 3\n    for x in s.split():\n        c[int(x) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in range(3))))", "for s in [*open(0)][2::2]:\n    c = [0] * 3\n    for x in s.split():\n        c[int(x) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in (0, 1, 2))))", "def getlistint():\n    return list(map(int, stdin.readline().split()))\n\ndef getmapint():\n    return map(int, stdin.readline().split())\n\ndef getliststr():\n    return list(stdin.readline().split())\n\ndef getint():\n    return int(stdin.readline().strip())\n\ndef getstr():\n    return stdin.readline().strip()\n\ndef pr(s):\n    stdout.write(str(s) + '\\n')\n\ndef prlist(l):\n    stdout.write(' '.join(list(map(str, l))) + '\\n')\n\ndef distribute(c0, c1, c2, c):\n    s = 0\n    d = c0 - c\n    if c1 < c:\n        k = min(d, c - c1)\n        s += k\n        c1 -= k\n        d -= k\n    if c2 < c:\n        k = min(d, c - c2)\n        s += k * 2\n        c2 -= k\n        d -= k * 2\n    return s\nfrom sys import stdin, stdout\nfor _ in range(getint()):\n    n = getint()\n    a = getlistint()\n    c = 0\n    (c0, c1, c2) = (0, 0, 0)\n    for i in range(n):\n        c = a[i] % 3\n        if c == 0:\n            c0 += 1\n        elif c == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    c = n // 3\n    if c0 == c1 == c2:\n        pr(0)\n    else:\n        s = 0\n        if c0 > c:\n            s += distribute(c0, c1, c2, c)\n        if c1 > c:\n            s += distribute(c1, c2, c0, c)\n        if c2 > c:\n            s += distribute(c2, c0, c1, c)\n        pr(s)", "answers = []\n\ndef solve(n, arr):\n    total = 0\n    one = 0\n    two = 0\n    zero = 0\n    req = n // 3\n    for ele in arr:\n        if ele % 3 == 0:\n            zero += 1\n        elif ele % 3 == 1:\n            one += 1\n        else:\n            two += 1\n    if one == two and two == zero:\n        answers.append(0)\n        return\n    if zero == req:\n        if one > two:\n            answers.append(one - req)\n        else:\n            answers.append((two - req) * 2)\n    else:\n        if zero > req:\n            total += zero - req\n            zero = req\n            one += total\n        else:\n            target = req - zero\n            if two > req:\n                total += target\n                zero = req\n                two -= target\n            else:\n                total += 2 * target\n                zero = req\n                one -= target\n        if one > two:\n            total += one - req\n            answers.append(total)\n        else:\n            total += (two - req) * 2\n            answers.append(total)\nT = int(input())\nwhile T:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    solve(n, arr)\n    T -= 1\nfor ans in answers:\n    print(ans)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef solution(n, arr):\n    mod_ = 3\n    count_mod = []\n    avg_ = n // 3\n    sol = 0\n    c0 = len([1 for elem in arr if elem % mod_ == 0])\n    c1 = len([1 for elem in arr if elem % mod_ == 1])\n    c2 = len([1 for elem in arr if elem % mod_ == 2])\n    count_mod = [c0, c1, c2]\n    while max(count_mod) > avg_:\n        for i in range(3):\n            if count_mod[i] > avg_:\n                move = count_mod[i] - avg_\n                sol += move\n                count_mod[i] -= move\n                count_mod[(i + 1) % mod_] += move\n    print(sol)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solution(n, arr)", "def find_divisors(a_list):\n    (c0, c1, c2) = (0, 0, 0)\n    for i in a_list:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    return (c0, c1, c2)\nrepeat = int(input())\nfor rep in range(repeat):\n    length = int(input())\n    div_arr = list(map(int, input().split()))\n    (c0, c1, c2) = find_divisors(div_arr)\n    operations = 0\n    standard = length // 3\n    subtract = 0\n    while True:\n        if c0 > standard:\n            subtract = c0 - standard\n            c0 -= subtract\n            c1 += subtract\n            operations += subtract\n        if c1 > standard:\n            subtract = c1 - standard\n            c1 -= subtract\n            c2 += subtract\n            operations += subtract\n        if c2 > standard:\n            subtract = c2 - standard\n            c2 -= subtract\n            c0 += subtract\n            operations += subtract\n        if c1 == standard and c0 == standard and (c2 == standard):\n            break\n    print(operations)", "from sys import stdin\n\ndef main():\n    cases = int(stdin.readline().strip())\n    while cases:\n        n = int(stdin.readline().strip())\n        v = [int(x) for x in stdin.readline().split()]\n        div = [0, 0, 0]\n        for i in range(n):\n            div[v[i] % 3] += 1\n        ans = 0\n        aux = [0, 0, 0]\n        i = 0\n        r = n // 3\n        while div[0] != div[1] or div[1] != div[2] or div[0] != div[2] or (sum(aux) != 0):\n            if r < div[i]:\n                aux[i] = div[i] - r\n                div[i] = r\n            if r > div[i]:\n                for j in range(3):\n                    if aux[j] != 0:\n                        if aux[j] + div[i] <= r:\n                            if j < i:\n                                ans += abs(i - j) * aux[j]\n                            else:\n                                ans += abs(i + 3 - j) * aux[j]\n                            div[i] += aux[j]\n                            aux[j] = 0\n                        else:\n                            if j < i:\n                                ans += abs(i - j) * (aux[j] - (aux[j] + div[i] - r))\n                            else:\n                                ans += abs(i + 3 - j) * (aux[j] - (aux[j] + div[i] - r))\n                            aux[j] = aux[j] + div[i] - r\n                            div[i] = r\n            i = (i + 1) % 3\n        print(ans)\n        cases -= 1\nmain()", "from collections import defaultdict\n\ndef solution():\n    t = int(input())\n    out = ''\n    while t > 0:\n        n = int(input())\n        a = list(map(int, input().split(' ')))\n        c0 = c1 = c2 = cnt = 0\n        for i in range(0, len(a)):\n            if a[i] % 3 == 0:\n                c0 += 1\n            elif a[i] % 3 == 1:\n                c1 += 1\n            else:\n                c2 += 1\n        if c0 == c1 == c2:\n            out += '0\\n'\n        else:\n            ttl = int(n / 3)\n            if c2 > ttl:\n                cnt = cnt + c2 - ttl\n                c0 = c0 + c2 - ttl\n            else:\n                cnt = cnt + ttl - c2\n                c1 = c1 - (ttl - c2)\n            if c1 > ttl:\n                cnt += 2 * (c1 - ttl)\n                c0 = c0 + (c1 - ttl)\n            else:\n                cnt = cnt + (ttl - c1)\n                c0 = c0 - (ttl - c1)\n            out += str(cnt) + '\\n'\n        t -= 1\n    print(out)\nsolution()", "import sys\nfrom itertools import *\nfrom math import *\nfrom sys import stdin, stdout\n\ndef ans(n, lst):\n    (c0, c1, c2) = (0, 0, 0)\n    req = n // 3\n    c = 0\n    for i in lst:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        elif i % 3 == 2:\n            c2 += 1\n    while c0 != req or c1 != req or c2 != req:\n        if c0 <= req and c2 >= req:\n            c0 += 1\n            c2 -= 1\n            c += 1\n        elif c1 <= req and c0 >= req:\n            c1 += 1\n            c0 -= 1\n            c += 1\n        elif c2 <= req and c1 >= req:\n            c2 += 1\n            c1 -= 1\n            c += 1\n    print(c)\nfor i in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    ans(n, lst)", "import sys\n\ndef int_inp():\n    return int(sys.stdin.readline())\nt = int_inp()\nfor _ in range(t):\n    n = int_inp()\n    l = list(map(int, sys.stdin.readline().strip().split()))\n    (c0, c1, c2) = (0, 0, 0)\n    count = 0\n    for i in range(n):\n        if l[i] % 3 == 0:\n            c0 += 1\n        elif l[i] % 3 == 1:\n            c1 += 1\n        elif l[i] % 3 == 2:\n            c2 += 1\n    x = n // 3\n    count = 0\n    if c0 > x:\n        if c0 > x and c2 > x and (min(c0, c1, c2) == c1):\n            count += c2 - x\n            c2 -= count\n            c0 += count\n            a = (max(c0, c1) - min(c0, c1)) // 2\n            count += a\n            c0 -= a\n            c1 += a\n        else:\n            count += c0 - x\n            c0 -= count\n            c1 += count\n            a = (max(c1, c2) - min(c1, c2)) // 2\n            count += a\n            c1 -= a\n            c2 += a\n    if c1 > x:\n        count += c1 - x\n        c1 -= count\n        c2 += count\n        a = (max(c2, c0) - min(c2, c0)) // 2\n        count += a\n        c2 -= a\n        c0 += a\n    if c2 > x:\n        count += c2 - x\n        c2 -= count\n        c0 += count\n        a = (max(c0, c1) - min(c0, c1)) // 2\n        count += a\n        c0 -= a\n        c1 += a\n    print(count)", "from math import log, floor\nt = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(lambda x: int(x) % 3, input().split()))\n    c = [a.count(i) for i in range(3)]\n    tgt = n // 3\n    s = 0\n    for i in range(3):\n        if c[i] > tgt:\n            s += c[i] - tgt\n            c[(i + 1) % 3] += c[i] - tgt\n            c[i] = tgt\n        else:\n            s += tgt - c[i]\n            c[(i + 2) % 3] -= tgt - c[i]\n            c[i] = tgt\n    ans.append(s)\nfor x in ans:\n    print(x)", "from math import log\n\ndef solve(a):\n    moves = 0\n    a = list(map(int, a.split()))\n    c0 = len([i for i in a if i % 3 == 0])\n    c1 = len([i for i in a if i % 3 == 1])\n    c2 = len([i for i in a if i % 3 == 2])\n    cs = len(a) / 3\n    c0 += c2 - cs if c2 > cs else 0\n    moves += c0 - cs if c0 > cs else 0\n    c1 += c0 - cs if c0 > cs else 0\n    moves += c1 - cs if c1 > cs else 0\n    c2 += c1 - cs if c1 > cs else 0\n    moves += c2 - cs if c2 > cs else 0\n    return int(moves)\nt = int(input())\ntests = []\nfor i in range(t):\n    test_len = input()\n    tests.append(input())\nfor i in tests:\n    print(solve(i))\n\ndef test():\n    assert solve('0 2 5 5 4 8') == 3\n    assert solve('7 1 3 4 2 10 3 9 6') == 3", "import sys\n\ndef f2(a, n):\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            c0 = c0 + 1\n        if a[i] % 3 == 1:\n            c1 = c1 + 1\n        if a[i] % 3 == 2:\n            c2 = c2 + 1\n    s = (c0 + c1 + c2) // 3\n    cs = [c0, c1, c2]\n    if c0 == c1 and c1 == c2:\n        return 0\n    t = 0\n    for j in range(3):\n        a = max(cs)\n        i = cs.index(a)\n        cs[i] = s\n        if i + 1 == 3:\n            i = -1\n        cs[i + 1] = cs[i + 1] + a - s\n        t = t + a - s\n    return t\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + l]\n    a = data[l + 2:l + 2 + n]\n    l = l + 1 + n\n    print(f2(a, n))", "from math import log\n\ndef ssolve(a):\n    a = list(map(int, a.split()))\n    c = [len([i for i in a if i % 3 == divisor]) for divisor in range(3)]\n    cmax = len(a) / 3\n    moves = 0\n    for i in range(3):\n        if c[i - 1] > cmax:\n            c[i] += c[i - 1] - cmax\n            moves += c[i - 1] - cmax\n            c[i - 1] -= c[i - 1] - cmax\n    return int(moves)\n\ndef solve(a):\n    moves = 0\n    a = list(map(int, a.split()))\n    c0 = len([i for i in a if i % 3 == 0])\n    c1 = len([i for i in a if i % 3 == 1])\n    c2 = len([i for i in a if i % 3 == 2])\n    cs = len(a) / 3\n    if c2 > cs:\n        c0 += c2 - cs if c2 > cs else 0\n    moves += c0 - cs if c0 > cs else 0\n    c1 += c0 - cs if c0 > cs else 0\n    moves += c1 - cs if c1 > cs else 0\n    c2 += c1 - cs if c1 > cs else 0\n    moves += c2 - cs if c2 > cs else 0\n    return int(moves)\nt = int(input())\ntests = []\nfor i in range(t):\n    test_len = input()\n    tests.append(input())\nfor i in tests:\n    print(solve(i))\n\ndef test():\n    assert solve('0 2 5 5 4 8') == 3\n    assert solve('7 1 3 4 2 10 3 9 6') == 3", "from math import log\n\ndef ssolve(a):\n    a = list(map(int, a.split()))\n    c = [len([i for i in a if i % 3 == divisor]) for divisor in range(3)]\n    cmax = len(a) / 3\n    moves = 0\n    for i in range(3):\n        if c[i - 1] > cmax:\n            c[i] += c[i - 1] - cmax\n            c[i - 1] -= c[i - 1] - cmax\n            moves += c[i - 1] - cmax\n    return int(moves)\n\ndef solve(a):\n    moves = 0\n    a = list(map(int, a.split()))\n    c0 = len([i for i in a if i % 3 == 0])\n    c1 = len([i for i in a if i % 3 == 1])\n    c2 = len([i for i in a if i % 3 == 2])\n    cs = len(a) / 3\n    c0 += c2 - cs if c2 > cs else 0\n    moves += c0 - cs if c0 > cs else 0\n    c1 += c0 - cs if c0 > cs else 0\n    moves += c1 - cs if c1 > cs else 0\n    c2 += c1 - cs if c1 > cs else 0\n    moves += c2 - cs if c2 > cs else 0\n    return int(moves)\nt = int(input())\ntests = []\nfor i in range(t):\n    test_len = input()\n    tests.append(input())\nfor i in tests:\n    print(solve(i))\n\ndef test():\n    assert solve('0 2 5 5 4 8') == 3\n    assert solve('7 1 3 4 2 10 3 9 6') == 3", "import sys\ninputlines = sys.stdin.readlines()\nnumber_of_testcases = int(inputlines[0])\nfor i in range(number_of_testcases):\n    n = int(inputlines[2 * i + 1])\n    array_given = list(map(int, inputlines[2 * i + 2].split(' ')))\n    c_list = [0, 0, 0]\n    for j in array_given:\n        c_list[j % 3] += 1\n    every_c_should_be = n // 3\n    number_of_steps_needed = 0\n    j = 0\n    k = 1\n    for _ in range(4):\n        if c_list[j] > every_c_should_be:\n            extra_in_cj = c_list[j] - every_c_should_be\n            c_list[k] += extra_in_cj\n            c_list[j] = every_c_should_be\n            number_of_steps_needed += extra_in_cj\n        j = (j + 1) % 3\n        k = (k + 1) % 3\n    print(number_of_steps_needed)", "t = int(input())\nc = []\nfor i in range(t):\n    n = input()\n    a = input().split(' ')\n    sum = 0\n    a = list(map(int, a))\n    for j in range(len(a)):\n        a[j] = a[j] % 3\n    x = a.count(0)\n    y = a.count(1)\n    z = a.count(2)\n    pj = int((x + y + z) / 3)\n    if x > pj:\n        y += x - pj\n        sum += x - pj\n        x = pj\n    if y > pj:\n        z += y - pj\n        sum += y - pj\n        y = pj\n    if z > pj:\n        x += z - pj\n        sum += z - pj\n        z = pj\n    if x > pj:\n        y += x - pj\n        sum += x - pj\n        x = pj\n    if y > pj:\n        z += y - pj\n        sum += y - pj\n        y = pj\n    c.append(sum)\nfor i in range(t):\n    print(c[i])", "t = input()\nd = []\nfor i in range(int(t)):\n    b = input()\n    ab = list(map(int, input().split()))\n    d.append(ab)\n\ndef an(a):\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    le = len(a) // 3\n    for i in a:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    if max(c0, c1, c2) == c1:\n        cc = [c1, c2, c0]\n    elif max(c0, c1, c2) == c2:\n        cc = [c2, c0, c1]\n    else:\n        cc = [c0, c1, c2]\n    c = cc[0] - le\n    cc[1] = cc[1] + c\n    if cc[1] >= le:\n        c += cc[1] - le\n    else:\n        c = c + 2 * (cc[2] - le)\n    print(c)\nfor i in d:\n    an(i)", "t = int(input())\nans = ''\nfor i in range(t):\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    n = int(input()) / 3\n    a = list(map(int, input().split()))\n    moves = 0\n    for j in range(len(a)):\n        if a[j] % 3 == 0:\n            c0 += 1\n        elif a[j] % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    while c0 != n or c1 != n or c2 != n:\n        if c0 > n:\n            c1 += c0 - n\n            moves += c0 - n\n            c0 = n\n        if c1 > n:\n            c2 += c1 - n\n            moves += c1 - n\n            c1 = n\n        if c2 > n:\n            c0 += c2 - n\n            moves += c2 - n\n            c2 = n\n    ans += str(int(moves)) + '\\n'\nprint(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c0 = c1 = c2 = 0\n    i = 0\n    for i in l:\n        a = i % 3\n        if a == 0:\n            c0 += 1\n        elif a == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    if c0 == n and c1 == n and (c3 == n):\n        print('0')\n        continue\n    n = n // 3\n    m = 0\n    while c2 != n or c1 != n or c0 != n:\n        if c2 > n:\n            m += c2 - n\n            c0 += c2 - n\n            c2 = n\n        if c1 > n:\n            m += c1 - n\n            c2 += c1 - n\n            c1 = n\n        if c0 > n:\n            m += c0 - n\n            c1 += c0 - n\n            c0 = n\n    print(m)", "I = input\nfor _ in range(int(I())):\n    n = int(I())\n    c = [0] * 3\n    for i in I().split():\n        c[int(i) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in (0, 1, 2))))\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import sys\nimport math\n\ndef fn(n, a):\n    count = 0\n    cnt = [0] * 3\n    for i in range(n):\n        cnt[a[i] % 3] = cnt[a[i] % 3] + 1\n    if cnt[0] == cnt[1] == cnt[2]:\n        return 0\n    for i in range(3):\n        m1 = max(cnt)\n        j = cnt.index(m1)\n        if m1 == n / 3:\n            break\n        if j == 2:\n            cnt[0] = cnt[0] + m1 - n // 3\n            cnt[2] = n // 3\n            count = count + m1 - n // 3\n        else:\n            cnt[j] = n // 3\n            cnt[j + 1] = cnt[j + 1] + m1 - n // 3\n            count = count + m1 - n // 3\n    return count\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[1 + l]\n    a = data[l + 2:l + 2 + n]\n    l = l + n + 1\n    print(fn(n, a))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    c = [0] * 3\n    res = 0\n    for i in a:\n        c[i % 3] += 1\n    for k in range(3):\n        for i in range(3):\n            if c[i] > n // 3:\n                res += c[i] - n // 3\n                c[(i + 1) % 3] += c[i] - n // 3\n                c[i] = n // 3\n    ans.append(res)\nfor i in ans:\n    print(i)", "t = int(input())\narrays = []\nfor _ in range(t):\n    n = int(input())\n    array = [int(x) for x in input().split()]\n    arrays.append(array)\n\ndef compute_c(array):\n    c = [0, 0, 0]\n    for i in array:\n        c[i % 3] += 1\n    return c\n\ndef compute_k(c_array):\n    target = sum(c_array) / 3\n    count = 0\n    while c_array != [target, target, target]:\n        for (i, x) in enumerate(c_array):\n            if x > target:\n                c_array[i] = target\n                c_array[(i + 1) % 3] += x - target\n                count += x - target\n    return int(count)\noutput = []\nfor array in arrays:\n    c_array = compute_c(array)\n    output.append(compute_k(c_array))\nfor x in output:\n    print(x)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for i in l:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    print(max(c2 - c1, c0 - c2, c1 - c0))", "def check(lst, r):\n    for i in lst:\n        if i != r:\n            return 0\n    return 1\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    zer = 0\n    one = 0\n    two = 0\n    for i in a:\n        if i % 3 == 0:\n            zer += 1\n        elif i % 3 == 1:\n            one += 1\n        else:\n            two += 1\n    r = n // 3\n    lst = [zer, one, two]\n    count = 0\n    i = 0\n    while 1:\n        if lst[i] > r:\n            rem = lst[i] - r\n            lst[i] -= rem\n            count += rem\n            if i == 2:\n                i = -1\n            lst[i + 1] += rem\n        if check(lst, r):\n            break\n        i += 1\n    return count\nfor t in range(0, int(input())):\n    print(solve())", "import sys\n\ndef solve(n, a):\n    res = 0\n    c = [0] * 3\n    for x in a:\n        c[x % 3] += 1\n    for i in range(6):\n        if c[i % 3] >= n // 3:\n            d = c[i % 3] - n // 3\n            c[i % 3] -= d\n            c[(i + 1) % 3] += d\n            res += d\n    return res\n\ndef main():\n    res = ''\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        res += str(solve(n, a)) + '\\n'\n    print(res)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return (N, A)\n\ndef solve(N, A):\n    ans = 10 ** 9\n    C = [0, 0, 0]\n    for a in A:\n        C[a % 3] += 1\n    target = N // 3\n    if all([c == target for c in C]):\n        return 0\n    for i in range(3):\n        (x, y, z) = (C[i % 3], C[(i + 1) % 3], C[(i + 2) % 3])\n        a = 0\n        d = max(target - z, 0)\n        z += d\n        y -= d\n        a += d\n        d = max(target - y, 0)\n        y += d\n        x -= d\n        a += d\n        if all([c == target for c in [x, y, z]]):\n            ans = min(ans, a)\n    return ans\nT = int(input().strip())\nfor t in range(T):\n    inputs = read()\n    print('%s' % solve(*inputs))", "import sys\nimport math\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    r = n // 3\n    for i in range(n):\n        a[i] = a[i] % 3\n    d = {0: 0, 1: 0, 2: 0}\n    for i in range(n):\n        d[a[i]] += 1\n    ans = 0\n    while not (d[0] == r and d[1] == r and (d[2] == r)):\n        for i in d:\n            if d[i] > r:\n                val = d[i] - r\n                d[i] = r\n                d[(i + 1) % 3] += val\n                ans += val\n    print(ans)", "t = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    zoz = [int(x) for x in input().split()]\n    rem = [0, 0, 0]\n    poc = 0\n    ind = 0\n    for i in zoz:\n        rem[i % 3] += 1\n    while not (rem[0] == rem[1] and rem[1] == rem[2]):\n        if max(rem[0], rem[1], rem[2]) == rem[0]:\n            ind = 0\n        elif max(rem[0], rem[1], rem[2]) == rem[1]:\n            ind = 1\n        else:\n            ind = 2\n        poc += rem[ind] - n // 3\n        rem[(ind + 1) % 3] += rem[ind] - n // 3\n        rem[ind] = n // 3\n    res.append(poc)\nfor i in res:\n    print(i)", "import math\n\ndef getlist():\n    return [int(i) for i in input().split()]\n\ndef getmany():\n    return map(int, input().split())\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = getlist()\n    c0 = 0\n    c2 = 0\n    c1 = 0\n    for i in a:\n        if i % 3 == 1:\n            c1 += 1\n        elif i % 3 == 2:\n            c2 += 1\n        else:\n            c0 += 1\n    ans = 0\n    c = c0 + c1 + c2\n    aver = c // 3\n    x = c0 - aver\n    y = c1 - aver\n    z = c2 - aver\n    while x > 0 and y < 0:\n        if y < 0:\n            ans += 1\n            y += 1\n            x -= 1\n    while y > 0 and z < 0:\n        if z < 0:\n            ans += 1\n            z += 1\n            y -= 1\n    while z > 0 and x < 0:\n        if x < 0:\n            ans += 1\n            x += 1\n            z -= 1\n    while x > 0 and z < 0:\n        if z < 0:\n            ans += 2\n            z += 1\n            x -= 1\n    while y > 0 and x < 0:\n        if x < 0:\n            ans += 2\n            x += 1\n            y -= 1\n    while z > 0 and y < 0:\n        if y < 0:\n            ans += 2\n            y += 1\n            z -= 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from math import log\n\ndef ssolve(a):\n    a = list(map(int, a.split()))\n    c = [len([i for i in a if i % 3 == divisor]) for divisor in range(3)]\n    cmax = len(a) / 3\n    moves = 0\n    for i in range(3):\n        if c[i - 1] > cmax:\n            moves += c[i - 1] - cmax\n            c[i] += c[i - 1] - cmax\n            c[i - 1] -= c[i - 1] - cmax\n    return int(moves)\n\ndef solve(a):\n    moves = 0\n    a = list(map(int, a.split()))\n    c0 = len([i for i in a if i % 3 == 0])\n    c1 = len([i for i in a if i % 3 == 1])\n    c2 = len([i for i in a if i % 3 == 2])\n    cs = len(a) / 3\n    c0 += c2 - cs if c2 > cs else 0\n    moves += c0 - cs if c0 > cs else 0\n    c1 += c0 - cs if c0 > cs else 0\n    moves += c1 - cs if c1 > cs else 0\n    c2 += c1 - cs if c1 > cs else 0\n    moves += c2 - cs if c2 > cs else 0\n    return int(moves)\nt = int(input())\ntests = []\nfor i in range(t):\n    test_len = input()\n    tests.append(input())\nfor i in tests:\n    print(solve(i))\n\ndef test():\n    assert solve('0 2 5 5 4 8') == 3\n    assert solve('7 1 3 4 2 10 3 9 6') == 3", "from math import log\n\ndef ssolve(a):\n    a = list(map(int, a.split()))\n    c = [len([i for i in a if i % 3 == divisor]) for divisor in range(3)]\n    cmax = len(a) / 3\n    moves = 0\n    for i in range(3):\n        if c[i - 1] > cmax:\n            c[i] += c[i - 1] - cmax\n            c[i - 1] -= c[i - 1] - cmax\n            moves += c[i - 1] - cmax\n    return int(moves)\n\ndef solve(a):\n    moves = 0\n    a = list(map(int, a.split()))\n    c0 = len([i for i in a if i % 3 == 0])\n    c1 = len([i for i in a if i % 3 == 1])\n    c2 = len([i for i in a if i % 3 == 2])\n    cs = len(a) / 3\n    c0 += c2 - cs if c2 > cs else 0\n    c1 += c0 - cs if c0 > cs else 0\n    moves += c1 - cs if c1 > cs else 0\n    c2 += c1 - cs if c1 > cs else 0\n    moves += c2 - cs if c2 > cs else 0\n    moves += c0 - cs if c0 > cs else 0\n    return int(moves)\nt = int(input())\ntests = []\nfor i in range(t):\n    test_len = input()\n    tests.append(input())\nfor i in tests:\n    print(solve(i))\n\ndef test():\n    assert solve('0 2 5 5 4 8') == 3\n    assert solve('7 1 3 4 2 10 3 9 6') == 3", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = list(map(int, input().split()))\n    three = [0, 0, 0]\n    for i in num:\n        if i % 3 == 0:\n            three[0] += 1\n        elif i % 3 == 1:\n            three[1] += 1\n        else:\n            three[2] += 1\n    res = 0\n    while True:\n        for i in range(3):\n            if three[i] > n // 3:\n                temp = three[i] - n // 3\n                three[(i + 1) % 3] += temp\n                res += temp\n                three[i] -= temp\n        switch = True\n        if three[0] == three[1] and three[1] == three[2]:\n            switch = False\n        if not switch:\n            break\n    print(res)", "import sys\ninput = sys.stdin.readline\n\ndef inpit():\n    return int(input())\n\ndef inplt():\n    return list(map(int, input().split()))\n\ndef inpstr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inpspint():\n    return map(int, input().split())\nt = inpit()\nfor i in range(t):\n    n = inpit()\n    a = inplt()\n    (c0, c1, c2) = (0, 0, 0)\n    for i in a:\n        if i % 3 == 0:\n            c0 = c0 + 1\n        if i % 3 == 1:\n            c1 = c1 + 1\n        if i % 3 == 2:\n            c2 = c2 + 1\n    m = 0\n    while c0 != c2 or c1 != c0:\n        if c0 > c1:\n            m = m + 1\n            c1 = c1 + 1\n            c0 = c0 - 1\n        if c1 > c2:\n            m = m + 1\n            c1 = c1 - 1\n            c2 = c2 + 1\n        if c2 > c0:\n            m = m + 1\n            c2 = c2 - 1\n            c0 = c0 + 1\n    print(m)", "import math\nres = []\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = 0\n    b = 0\n    c = 0\n    for i in l:\n        i = i % 3\n        if i == 0:\n            a += 1\n        elif i == 1:\n            b += 1\n        elif i == 2:\n            c += 1\n    co = 0\n    n = (a + b + c) // 3\n    while a != b or b != c or c != a:\n        if a > n:\n            b += a - n\n            co += a - n\n            a = n\n        if b > n:\n            c += b - n\n            co += b - n\n            b = n\n        if c > n:\n            a += c - n\n            co += c - n\n            c = n\n    res.append(co)\nfor i in res:\n    print(i)", "for s in [*open(0)][2::2]:\n    c = [0] * 3\n    for x in s.split():\n        c[int(x) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in range(3))))", "def main():\n    for _ in range(int(input())):\n        (n, r) = (int(input()) // 3, 0)\n        cnt = [-n] * 3\n        for a in map(int, input().split()):\n            cnt[a % 3] += 1\n        for i in (0, 1, 2, 0):\n            if cnt[i] > 0:\n                r += cnt[i]\n                cnt[i - 2] += cnt[i]\n                cnt[i] = 0\n        print(r)\nmain()", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (c1, c0, c2) = (0, 0, 0)\n    c = [0] * 3\n    for i in l:\n        if i % 3 == 0:\n            c[0] += 1\n        elif i % 3 == 1:\n            c[1] += 1\n        else:\n            c[2] += 1\n    s = 0\n    i = c.index(max(c))\n    while c[i] != n // 3:\n        x = c[i] - n // 3\n        if i == 2:\n            c[i] = n // 3\n            c[0] += x\n        else:\n            c[i] = n // 3\n            c[i + 1] += x\n        s += x\n        i = c.index(max(c))\n    out.append(s)\nfor i in out:\n    print(i)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0, 0, 0]\n    for i in range(n):\n        c[a[i] % 3] += 1\n    j = n // 3\n    i = 0\n    count = 0\n    while c[0] != c[1] or c[0] != c[2]:\n        if c[i] > j:\n            c[(i + 1) % 3] += c[i] - j\n            count += c[i] - j\n            c[i] = j\n        i += 1\n        i %= 3\n    res.append(count)\nfor i in res:\n    print(i)", "def arr_to_c(array):\n    res = [0] * 3\n    for elem in array:\n        res[elem % 3] += 1\n    return res\n\ndef stabilize(numbers, value):\n    res = 0\n    if numbers[0] > value:\n        move = numbers[0] - value\n        numbers[0] -= move\n        numbers[1] += move\n        res += move\n    if numbers[1] > value:\n        move = numbers[1] - value\n        numbers[1] -= move\n        numbers[2] += move\n        res += move\n    if numbers[2] > value:\n        move = numbers[2] - value\n        numbers[2] -= move\n        numbers[0] += move\n        res += move\n    if numbers[0] > value:\n        move = numbers[0] - value\n        numbers[0] -= move\n        numbers[1] += move\n        res += move\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    numbers = arr_to_c(array)\n    value = n // 3\n    print(stabilize(numbers, value))", "import sys\nit = iter(sys.stdin.read().splitlines())\nt = int(next(it))\nwhile t:\n    n = int(next(it))\n    m = [int(x) for x in next(it).split()]\n    c = [0] * 3\n    for i in m:\n        c[i % 3] += 1\n    (moves, carry) = (0, 0)\n    for i in range(10):\n        moves += carry\n        c[i % 3] += carry\n        carry = 0\n        if c[i % 3] > n // 3:\n            diff = c[i % 3] - n // 3\n            carry += diff\n            c[i % 3] -= diff\n    print(moves)\n    t -= 1", "t = int(input())\nresult_array = []\nfor i in range(t):\n    n = int(input())\n    c = [0, 0, 0]\n    l = list(map(int, input().split()))\n    aux = n / 3\n    result = 0\n    for el in l:\n        c[el % 3] += 1\n    for j in range(2):\n        if c[0] > aux:\n            result += c[0] - aux\n            c[1] += c[0] - aux\n            c[0] = aux\n        if c[1] > aux:\n            result += c[1] - aux\n            c[2] += c[1] - aux\n            c[1] = aux\n        if c[2] > aux:\n            result += c[2] - aux\n            c[0] += c[2] - aux\n            c[2] = aux\n    result_array.append(int(result))\nfor res in result_array:\n    print(res)", "n = int(input())\na = []\nfor i in range(n):\n    m = int(input())\n    a.append(list(map(int, input().strip().split())))\n\ndef cyclist(v):\n    v = v * 2\n    g = v.index(max(v))\n    output = v[g:g + 3]\n    return output\nfor x in a:\n    b = [0, 0, 0]\n    for y in x:\n        if y % 3 == 0:\n            b[0] += 1\n        if y % 3 == 1:\n            b[1] += 1\n        if y % 3 == 2:\n            b[2] += 1\n    b = cyclist(b)\n    e = len(x) // 3\n    if b[2] > e:\n        b = [b[2], b[0], b[1]]\n    print(2 * b[0] + b[1] - 3 * e)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (c0, c1, c2) = (0, 0, 0)\n    for i in arr:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    res = 0\n    for i in range(2):\n        if c0 > n // 3:\n            res += c0 - n // 3\n            c1 += c0 - n // 3\n            c0 = n // 3\n        if c1 > n // 3:\n            res += c1 - n // 3\n            c2 += c1 - n // 3\n            c1 = n // 3\n        if c2 > n // 3:\n            res += c2 - n // 3\n            c0 += c2 - n // 3\n            c2 = n // 3\n    return res\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\nmain()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    nums = list(map(int, sys.stdin.readline().split()))\n    div = [0, 0, 0]\n    for i in nums:\n        div[i % 3] += 1\n    i = 0\n    answer = 0\n    while div[i] != n // 3 or div[(i + 1) % 3] != n // 3:\n        x = max(0, div[i] - n // 3)\n        div[i] -= x\n        div[(i + 1) % 3] += x\n        answer += x\n        i = (i + 1) % 3\n    print(answer)", "def balanced_remainders():\n    len_array = int(input())\n    given_array = list(map(int, input().split()))\n    stored_val = [0] * 3\n    for i in given_array:\n        stored_val[i % 3] += 1\n    rem = len_array // 3\n    min_num_moves = 0\n    while stored_val[0] != rem or stored_val[1] != rem or stored_val[2] != rem:\n        for i in range(3):\n            if stored_val[i] >= rem:\n                min_num_moves += stored_val[i] - rem\n                stored_val[(i + 1) % 3] += stored_val[i] - rem\n                stored_val[i] = rem\n    return min_num_moves\nnumber_of_testcases = int(input())\nfor _ in range(number_of_testcases):\n    print(balanced_remainders())", "t = int(input())\nb = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))[:n]\n    (c0, c1, c2) = (0, 0, 0)\n    for j in range(n):\n        if a[j] % 3 == 0:\n            c0 += 1\n        elif a[j] % 3 == 1:\n            c1 += 1\n        else:\n            c2 = c2 + 1\n    b.append(max(c0 - c2, max(c2 - c1, c1 - c0)))\nfor i in range(len(b)):\n    print(b[i])", "def cf_702B(numbers: list):\n    n = len(numbers) // 3\n    rem = {0: 0, 1: 0, 2: 0}\n    extra = rem.copy()\n    for num in numbers:\n        rem[num % 3] += 1\n    answer = 0\n    for i in range(3):\n        if rem[i] > n:\n            extra[i] = rem[i] - n\n            rem[i] = n\n    while not rem[0] == rem[1] == rem[2]:\n        for i in range(3):\n            if extra[i]:\n                rem[(i + 1) % 3] += extra[i]\n                answer += extra[i]\n                extra[i] = 0\n                if rem[(i + 1) % 3] > n:\n                    extra[(i + 1) % 3] += rem[(i + 1) % 3] - n\n                    rem[(i + 1) % 3] = n\n    return answer\nfor _ in range(int(input())):\n    input()\n    print(cf_702B(list(map(int, input().split()))))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for i in a:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    print(max(c0 - c2, c1 - c0, c2 - c1))", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    moves = 0\n    (c0, c1, c2) = (0, 0, 0)\n    for i in arr:\n        if i % 3 == 0:\n            c2 += 1\n        elif i % 3 == 1:\n            c0 += 1\n        elif i % 3 == 2:\n            c1 += 1\n    print(max(c2 - c1, c1 - c0, c0 - c2))", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    l1 = list(map(int, input().split()))\n    a = int(a / 3)\n    c = [0, 0, 0]\n    for j in l1:\n        if j % 3 == 0:\n            c[0] = c[0] + 1\n        elif j % 3 == 1:\n            c[1] = c[1] + 1\n        else:\n            c[2] = c[2] + 1\n    count = 0\n    while c != [a, a, a]:\n        if c[0] > a:\n            count = count + c[0] - a\n            c[1] = c[1] + c[0] - a\n            c[0] = a\n        if c[1] > a:\n            count = count + c[1] - a\n            c[2] = c[2] + c[1] - a\n            c[1] = a\n        if c[2] > a:\n            count = count + c[2] - a\n            c[0] = c[0] + c[2] - a\n            c[2] = a\n    print(count)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    arr = [int(char) for char in input().split()]\n    m = [0] * 3\n    for num in arr:\n        m[num % 3] += 1\n    if m[0] == m[1] and m[1] == m[2]:\n        return 0\n    ideal_count = n // 3\n    d = [0] * 3\n    for (i, num) in enumerate(m):\n        d[i] = num - ideal_count\n    ans = 0\n    for (i, num) in enumerate(d):\n        if num >= 0:\n            continue\n        (prev_idx, prev_prev_idx) = ((i + 2) % 3, (i + 1) % 3)\n        if d[prev_idx] <= 0:\n            d[prev_prev_idx] += num\n            d[i] = 0\n            ans += num * -2\n        elif abs(num) <= d[prev_idx]:\n            d[prev_idx] += num\n            d[i] = 0\n            ans += -num\n        else:\n            ans += d[prev_idx]\n            num += d[prev_idx]\n            ans += num * -2\n            d[prev_idx] = 0\n            d[prev_prev_idx] += num\n            d[i] = 0\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 3\n    for i in a:\n        b[i % 3] += 1\n    if len(set(b)) == 1:\n        print(0)\n    else:\n        print(max(b[1] - b[0], b[2] - b[1], b[0] - b[2]))", "for _ in range(0, int(input())):\n    n = int(input())\n    t = n // 3\n    v = map(int, input().split())\n    v = [x % 3 for x in v]\n    c = [0, 0, 0]\n    a = 0\n    c[0] = v.count(0)\n    c[1] = v.count(1)\n    c[2] = v.count(2)\n    for i in range(0, 3):\n        d = t - c[i]\n        if d > 0:\n            x = min(max(c[(i + 2) % 3] - t, 0), d)\n            a += x\n            d -= x\n            a += 2 * d\n    print(a)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = n // 3\n    d = []\n    for i in range(n):\n        d.append(l[i] % 3)\n    a = d.count(0)\n    b = d.count(1)\n    c = d.count(2)\n    s = 0\n    if a - x > 0:\n        s = s + (a - x)\n        b = b + (a - x)\n        a = x\n    if b - x > 0:\n        s = s + b - x\n        c = c + b - x\n        b = x\n    if c - x > 0:\n        s = s + c - x\n        a = a + c - x\n        c = x\n    if a - x > 0:\n        s = s + (a - x)\n        b = b + (a - x)\n        a = x\n    print(s)", "def balancedRemainder():\n    n = int(input())\n    count = [0, 0, 0]\n    numsList = input().split()\n    for i in numsList:\n        num = int(i)\n        count[num % 3] += 1\n    move = 0\n    target = int(len(numsList) / 3)\n    for i in range(len(count)):\n        if count[i] > target:\n            amount = count[i] - target\n            count[i] -= amount\n            count[(i + 1) % 3] += amount\n            move += amount\n    if count[0] > target:\n        amount = count[0] - target\n        count[0] -= amount\n        count[1] += amount\n        move += amount\n    print(move)\nn = int(input())\nfor _ in range(n):\n    balancedRemainder()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 3\n    for i in a:\n        b[i % 3] += 1\n    if b[0] == b[1] == b[2]:\n        print(0)\n    else:\n        print(max(b[1] - b[0], b[2] - b[1], b[0] - b[2]))", "import math\nresult = []\ncases = int(input())\nfor i in range(cases):\n    sum = 0\n    num = int(input())\n    ain = list(map(int, input().split(' ')))\n    dt = {}\n    dt[0] = 0\n    dt[1] = 0\n    dt[2] = 0\n    for j in ain:\n        dt[j % 3] = dt[j % 3] + 1\n    for l in range(2):\n        for m in range(3):\n            if dt[m] > num / 3:\n                diff = dt[m] - num / 3\n                dt[m] = num / 3\n                dt[(m + 1) % 3] += diff\n                sum += diff\n    result.append(int(sum))\nfor _ in result:\n    print(_)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = c1 = c2 = 0\n    for i in a:\n        if i % 3 == 0:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    x = n // 3\n    ans = 0\n    for i in range(2):\n        if c0 > x:\n            ans += c0 - x\n            c1 += c0 - x\n            c0 = x\n        if c1 > x:\n            ans += c1 - x\n            c2 += c1 - x\n            c1 = x\n        if c2 > x:\n            ans += c2 - x\n            c0 += c2 - x\n            c2 = x\n    print(ans)", "n = int(input())\nans = []\nfor i in range(n):\n    k = int(input())\n    numlist = [int(num) % 3 for num in input().split()]\n    comlist = [0, 0, 0]\n    ave = k // 3\n    for j in numlist:\n        comlist[j] += 1\n    comlist = [ave - num for num in comlist]\n    jg = 0\n    for j in comlist:\n        if j > 0:\n            jg += 1\n    if jg == 1:\n        index = comlist.index(max(comlist))\n        comlist = comlist[index + 1:] + comlist[:index + 1]\n    else:\n        index = comlist.index(min(comlist))\n        comlist = comlist[index:] + comlist[:index]\n    sumnum = [comlist[0]]\n    for j in range(1, 3):\n        sumnum.append(sumnum[j - 1] + comlist[j])\n    num = 0\n    for j in sumnum:\n        num += abs(j)\n    ans.append(num)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    lis = [int(x) for x in input().split()]\n    c1 = 0\n    c2 = 0\n    c3 = 0\n    ans = 0\n    for val in lis:\n        if val % 3 == 0:\n            c1 += 1\n        elif val % 3 == 1:\n            c2 += 1\n        else:\n            c3 += 1\n    while not (c1 == c2 and c2 == c3):\n        ans += 1\n        if c1 >= c2 and c1 >= c3:\n            c1 -= 1\n            c2 += 1\n        elif c2 >= c1 and c2 >= c3:\n            c2 -= 1\n            c3 += 1\n        else:\n            c3 -= 1\n            c1 += 1\n    print(ans)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        cnt = {0: 0, 1: 0, 2: 0}\n        for v in a:\n            cnt[v % 3] += 1\n        (a, b, c) = (cnt[0], cnt[1], cnt[2])\n        d = n // 3\n        ans = 0\n        for i in range(9):\n            (a, b, c) = (c, a, b)\n            if a > d:\n                ans += a - d\n                b += a - d\n                a = d\n        print(ans)\nmain()", "answer_list = []\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    answer = 0\n    list1 = list(map(int, input().split()))\n    for x in list1:\n        if x % 3 == 0:\n            c0 += 1\n        if x % 3 == 1:\n            c1 += 1\n        if x % 3 == 2:\n            c2 += 1\n    while c0 != c1 or c1 != c2 or c2 != c0:\n        if c0 > c1:\n            c0 -= 1\n            c1 += 1\n            answer += 1\n        if c1 > c2:\n            c1 -= 1\n            c2 += 1\n            answer += 1\n        if c2 > c0:\n            c2 -= 1\n            c0 += 1\n            answer += 1\n    answer_list.append(answer)\nfor i in answer_list:\n    print(i)", "t = int(input())\nbinary = [1 << i for i in range(32)]\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [0, 0, 0]\n    for i in a:\n        c[i % 3] += 1\n    target = n // 3\n    cnt = 0\n    if c[0] > target:\n        cnt += c[0] - target\n        c[1] += c[0] - target\n        c[0] = target\n    if c[1] > target:\n        cnt += c[1] - target\n        c[2] += c[1] - target\n        c[1] = target\n    if c[2] > target:\n        cnt += c[2] - target\n        c[0] += c[2] - target\n        c[2] = target\n    if c[0] > target:\n        cnt += c[0] - target\n        c[1] += c[0] - target\n        c[0] = target\n    print(cnt)", "t = int(input())\nx = []\nc0 = 0\nc1 = 0\nc2 = 0\nevenC = 0\nresult = 0\nfor i in range(t):\n    x.append([int(input()), input().split(' ')])\nfor i in x:\n    result = 0\n    evenC = 0\n    c0 = 0\n    c1 = 0\n    c2 = 0\n    for j in i[1]:\n        if int(j) % 3 == 0:\n            c0 += 1\n        elif int(j) % 3 == 1:\n            c1 += 1\n        elif int(j) % 3 == 2:\n            c2 += 1\n    evenC = (c0 + c1 + c2) / 3\n    while c1 != evenC or c2 != evenC or c0 != evenC:\n        if c0 > evenC:\n            c1 += c0 - evenC\n            result += c0 - evenC\n            c0 -= c0 - evenC\n        if c1 > evenC:\n            c2 += c1 - evenC\n            result += c1 - evenC\n            c1 -= c1 - evenC\n        if c2 > evenC:\n            c0 += c2 - evenC\n            result += c2 - evenC\n            c2 -= c2 - evenC\n    print(int(result))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = list(map(lambda x: x % 3, l))\n    eq = n // 3\n    a = l.count(0)\n    b = l.count(1)\n    c = l.count(2)\n    times = 0\n    if a > eq:\n        inc = a - eq\n        times += inc\n        b += inc\n        a = eq\n    if b > eq:\n        inc = b - eq\n        times += inc\n        c += inc\n        b = eq\n    if c > eq:\n        inc = c - eq\n        times += inc\n        a += inc\n        c = eq\n    if a > eq:\n        inc = a - eq\n        times += inc\n    print(times)", "def main():\n    T = input()\n    for _ in range(int(T)):\n        input()\n        numbers = [int(x) for x in input().split()]\n        remainder_counts = [0, 0, 0]\n        for x in numbers:\n            remainder_counts[x % 3] += 1\n        target = len(numbers) // 3\n        tot = 0\n        while (x := move_max(remainder_counts, target)) != 0:\n            tot += x\n        print(tot)\n\ndef move_max(remainder_counts, target):\n    m = remainder_counts[0]\n    i = 0\n    for j in [1, 2]:\n        if remainder_counts[j] > m:\n            m = remainder_counts[j]\n            i = j\n    remainder_counts[(i + 1) % 3] += m - target\n    remainder_counts[i] = target\n    return m - target\nmain()", "def balance_remainder(arr, n):\n    f = {0: 0, 1: 0, 2: 0}\n    for i in range(n):\n        r = arr[i] % 3\n        f[r] += 1\n    b = n / 3\n    ans = 0\n    for i in range(2):\n        if f[0] > b:\n            ans += f[0] - b\n            f[1] += f[0] - b\n            f[0] = b\n        if f[1] > b:\n            ans += f[1] - b\n            f[2] += f[1] - b\n            f[1] = b\n        if f[2] > b:\n            ans += f[2] - b\n            f[0] += f[2] - b\n            f[2] = b\n    return int(ans)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(balance_remainder(arr, n))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    c0 = c1 = c2 = 0\n    k = n // 3\n    for i in arr:\n        if not i % 3:\n            c0 += 1\n        elif i % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    while c0 != k or c1 != k:\n        if c0 > k and c1 < k:\n            c0 -= 1\n            c1 += 1\n            count += 1\n        elif c1 > k and c2 < k:\n            c1 -= 1\n            c2 += 1\n            count += 1\n        elif c2 > k and c0 < k:\n            c2 -= 1\n            c0 += 1\n            count += 1\n        elif c1 > k and c0 < k:\n            c1 -= 1\n            c0 += 1\n            count += 2\n        elif c0 > k and c2 < k:\n            c0 -= 1\n            c2 += 1\n            count += 2\n        elif c2 > k and c1 < k:\n            c2 -= 1\n            c1 += 1\n            count += 2\n    print(count)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = 0\n    y = 0\n    z = 0\n    for i in range(0, n):\n        if arr[i] % 3 == 0:\n            x = x + 1\n        elif arr[i] % 3 == 1:\n            y += 1\n        else:\n            z += 1\n    ans = 0\n    while 1:\n        while y < n / 3:\n            ans += 1\n            y += 1\n            x -= 1\n        while z < n / 3:\n            z += 1\n            y -= 1\n            ans = ans + 1\n        while x < n / 3:\n            x = x + 1\n            z = z - 1\n            ans = ans + 1\n        if x == y and y == z:\n            break\n    t -= 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = [0] * 3\n    lol = []\n    for x in arr:\n        brr[x % 3] += 1\n    if max(brr) == min(brr):\n        print(0)\n    else:\n        print(max(brr[2] - brr[1], brr[0] - brr[2], brr[1] - brr[0]))", "n = int(input())\nfor i in range(n):\n    length = int(input())\n    d = [-length / 3 for j in range(3)]\n    arr = [int(j) for j in input().split()]\n    for k in arr:\n        if k % 3 == 0:\n            d[0] += 1\n        elif k % 3 == 1:\n            d[1] += 1\n        else:\n            d[2] += 1\n    if d[0] > 0 and d[1] > 0:\n        print(int(2 * d[0] + d[1]))\n    elif d[2] > 0 and d[1] > 0:\n        print(int(2 * d[1] + d[2]))\n    elif d[0] > 0 and d[2] > 0:\n        print(int(2 * d[2] + d[0]))\n    elif d[0] > 0:\n        print(int(-d[1] + -2 * d[2]))\n    elif d[1] > 0:\n        print(int(-d[2] + -2 * d[0]))\n    elif d[2] > 0:\n        print(int(-d[0] + -2 * d[1]))\n    else:\n        print(0)", "I = input\nfor _ in range(int(I())):\n    n = int(I())\n    c = [0] * 3\n    for i in I().split():\n        c[int(i) % 3] += 1\n    print(max((c[i] - c[i - 1] for i in (0, 1, 2))))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = c1 = c2 = 0\n    for i in range(0, len(a)):\n        if a[i] % 3 == 0:\n            c0 += 1\n        elif a[i] % 3 == 1:\n            c1 += 1\n        else:\n            c2 += 1\n    print(max(c0 - c2, c1 - c0, c2 - c1))", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    c0 = n // 3\n    c1 = n // 3\n    c2 = n // 3\n    res = 0\n    for i in range(n):\n        k = li[i] % 3\n        if k == 0:\n            if c0 > 0:\n                c0 -= 1\n            elif c1 > 0:\n                c1 -= 1\n                res += 1\n            else:\n                c2 -= 1\n                res += 2\n        elif k == 1:\n            if c1 > 0:\n                c1 -= 1\n            elif c2 > 0:\n                c2 -= 1\n                res += 1\n            else:\n                c0 -= 1\n                res += 2\n        elif k == 2:\n            if c2 > 0:\n                c2 -= 1\n            elif c0 > 0:\n                c0 -= 1\n                res += 1\n            else:\n                c1 -= 1\n                res += 2\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    r = [0, 0, 0]\n    for a in arr:\n        r[a % 3] += 1\n    for i in range(3):\n        r[i] -= n // 3\n    ans = 0\n    for i in range(6):\n        if r[(i - 1) % 3] > 0:\n            r[i % 3] += r[(i - 1) % 3]\n            ans += r[(i - 1) % 3]\n            r[(i - 1) % 3] = 0\n    print(ans)", "def solve(n, c):\n    moves = 0\n    while c[0] != c[1] or c[1] != c[2]:\n        i = 0\n        while c[i] <= n / 3:\n            i += 1\n        while c[i] > n / 3:\n            c[i] -= 1\n            c[(i + 1) % 3] += 1\n            moves += 1\n    return moves\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    c = [0 for _ in range(3)]\n    for ai in a:\n        c[ai % 3] += 1\n    print(solve(n, c))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (x, y, z) = (0, 0, 0)\n    c = 0\n    for i in range(n):\n        if l[i] % 3 == 0:\n            x += 1\n        elif l[i] % 3 == 1:\n            y += 1\n        else:\n            z += 1\n    m = n // 3\n    while x != m or y != m or z != m:\n        if x > m:\n            c += x - m\n            y += x - m\n            x = m\n        if y > m:\n            c += y - m\n            z += y - m\n            y = m\n        if z > m:\n            c += z - m\n            x += z - m\n            z = m\n    print(c)", "get_line = lambda type_: list(map(type_, input().strip().split()))\n\ndef solve():\n    n = int(input())\n    goal = n // 3\n    ops = 0\n    a = get_line(int)\n    c = [0, 0, 0]\n    for a_i in a:\n        c[a_i % 3] += 1\n    while not c[0] == c[1] == c[2]:\n        (big, small) = (0, 0)\n        for i in range(3):\n            if c[i] > c[big]:\n                big = i\n            if c[i] < c[small]:\n                small = i\n        if c[small] + (c[big] - goal) <= goal:\n            ops += (small - big + 3) % 3 * (c[big] - goal)\n            c[small] += c[big] - goal\n            c[big] = goal\n        else:\n            ops += (small - big + 3) % 3 * (goal - c[small])\n            c[big] -= goal - c[small]\n            c[small] = goal\n    print(ops)\nt = int(input())\nfor _ in range(t):\n    solve()"]