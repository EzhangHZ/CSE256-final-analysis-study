["s = [0] * 3\nfor i in range(3, 2000001):\n    s.append((2 * s[-2] + s[-1] + (0 if i % 3 else 4)) % (10 ** 9 + 7))\nfor d in range(int(input())):\n    print(s[int(input())])", "import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    md = 10 ** 9 + 7\n    mx = 2000005\n    dp = [0] * mx\n    dp[3] = dp[4] = 4\n    for i in range(5, mx):\n        if i % 3 == 0:\n            dp[i] = (dp[i - 2] * 2 + dp[i - 1] + 4) % md\n        else:\n            dp[i] = (dp[i - 2] * 2 + dp[i - 1]) % md\n    for _ in range(II()):\n        n = II()\n        print(dp[n])\nmain()", "l = [0, 0, 4]\nm = 1000000007\nfor i in range(4, 2 * 1000000 + 1):\n    l.append((l[-1] + 2 * l[-2] + (i % 3 == 0) * 4) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n - 1])", "l = [0, 0, 4]\nmon = 1000000007\nfor i in range(4, 2 * 1000000 + 1):\n    l.append((l[-1] + 2 * l[-2] + (i % 3 == 0) * 4) % mon)\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n - 1])", "f = [0, 0, 0, 4, 4]\nfor i in range(5, 2000001):\n    f.append((2 * f[-2] + f[-1] + (4 if i % 3 == 0 else 0)) % 1000000007)\nfor tt in range(int(input())):\n    print(f[int(input())])", "l = [0, 0, 4]\nmon = 1000000007\nfor i in range(4, 2 * 1000000 + 1):\n    l.append((l[-1] + 2 * l[-2] + (i % 3 == 0) * 4) % mon)\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n - 1])", "l = [0, 0, 4]\nm = 1000000007\nfor i in range(4, 2 * 1000000 + 1):\n    l.append((l[-1] + 2 * l[-2] + (i % 3 == 0) * 4) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n - 1])", "p = [0, 0, 4]\nn = 1000000007\nfor i in range(4, 2 * 1000000 + 1):\n    p.append((p[-1] + 2 * p[-2] + (i % 3 == 0) * 4) % n)\nfor i in range(int(input())):\n    n = int(input())\n    print(p[n - 1])", "def preprocess(pref):\n    mod = int(1000000000.0) + 7\n    for i in range(3, 2000005):\n        pref.append((pref[i - 1] + pref[i - 2] * 2 + (4 if i % 3 == 0 else 0)) % mod)\n\ndef main():\n    pref = [0, 0, 0]\n    preprocess(pref)\n    for _ in range(int(input())):\n        print(pref[int(input())])\nmain()", "from sys import stdin\ninput = stdin.readline\nmod = 10 ** 9 + 7\ndp = [0, 0, 0, 4, 4, 12]\nfor x in range(6, 2000001):\n    if x % 6 == 3 or x % 6 == 5:\n        dp.append((dp[-1] * 2 + 4) % mod)\n    elif x % 6 == 4:\n        dp.append((dp[-1] * 2 - 4) % mod)\n    else:\n        dp.append(dp[-1] * 2 % mod)\nfor _ in range(int(input())):\n    print(dp[int(input())])", "solution = [0, 0, 0, 4, 4]\n\ndef store(n):\n    (prev1, prev2, sol) = (1, 1, 0)\n    for i in range(5, n + 1):\n        sol = 2 * prev2 + prev1\n        if i % 3 == 0:\n            sol += 1\n        sol = sol % 1000000007\n        (prev2, prev1) = (prev1, sol)\n        solution.append(sol * 4 % 1000000007)\nt = int(input())\nstore(2000000)\nwhile t > 0:\n    print(solution[int(input())])\n    t -= 1", "max_s = 2000003\nc = 1000000007\nq = [0] * max_s\nfor i in range(3, max_s):\n    if not i % 3:\n        q[i] = (q[i - 1] + 2 * q[i - 2] + 1) % c\n    else:\n        q[i] = (q[i - 1] + 2 * q[i - 2]) % c\nfor _ in range(int(input())):\n    print(q[int(input())] * 4 % c)", "mod = 1000000007\ndp = [0, 0, 0, 1, 1]\nfor i in range(5, 2000001):\n    if i % 3 == 0:\n        dp.append((dp[i - 1] + 2 * dp[i - 2] + 1) % mod)\n    else:\n        dp.append((dp[i - 1] + 2 * dp[i - 2]) % mod)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(4 * dp[n] % mod)", "max_s = 2000003\nc = 1000000007\nq = [0] * max_s\nfor i in range(3, max_s):\n    if not i % 3:\n        q[i] = (q[i - 1] + 2 * q[i - 2] + 1) % c\n    else:\n        q[i] = (q[i - 1] + 2 * q[i - 2]) % c\nfor _ in range(int(input())):\n    print(q[int(input())] * 4 % c)", "d = [0 for _ in range(2000001)]\nd[3] = 4\nfor i in range(4, 2000001):\n    if i % 3 == 0:\n        d[i] = (2 * d[i - 2] + d[i - 1] + 4) % 1000000007\n    else:\n        d[i] = (2 * d[i - 2] + d[i - 1]) % 1000000007\nn = int(input())\nwhile n > 0:\n    x = int(input())\n    print(d[x])\n    n -= 1", "t = int(input())\ndp = [0 for i in range(2 * 10 ** 6 + 1)]\ndp[0] = 0\ndp[1] = 0\ndp[2] = 0\ndp[3] = 4\nfor i in range(4, 2 * 10 ** 6 + 1):\n    if i % 3 == 0:\n        dp[i] = (dp[i - 2] * 2 + dp[i - 1] + 4) % (10 ** 9 + 7)\n    else:\n        dp[i] = (dp[i - 2] * 2 + dp[i - 1]) % (10 ** 9 + 7)\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "from sys import stdin, stdout\nfrom sys import maxsize\n\ndef solve():\n    pass\nval = 10 ** 9 + 7\ndp = [0, 0, 0, 4]\nfor n in range(4, 2 * 10 ** 6 + 1):\n    if n % 3 == 0:\n        dp.append((dp[n - 1] + 2 * dp[n - 2] + 4) % val)\n    else:\n        dp.append((dp[n - 1] + 2 * dp[n - 2]) % val)\ntest = 1\ntest = int(input())\nfor t in range(0, test):\n    n = int(input())\n    print(dp[n])\n    ans = solve()", "inp = lambda : int(input())\ninpm = lambda : map(int, input().split())\ninpl = lambda : list(inpm())\nl2mn = lambda _n, _m: [[0 for __ in range(_m)] for _ in range(_n)]\nl2n = lambda _n: l2mn(_n, _n)\nINF = int(1e+18)\nMOD = int(1000000000.0) + 7\nN = 2000009\ndp = [0] * N\nfor i in range(3, N):\n    dp[i] = (dp[i - 2] * 2 + dp[i - 1] + (1 if i % 3 == 0 else 0)) % MOD\n\ndef solve():\n    n = inp()\n    print(dp[n] * 4 % MOD)\n\ndef main():\n    t = inp()\n    for i in range(t):\n        solve()\nmain()", "pe = [0 for i in range(2000001)]\nfor i in range(3, 2000001):\n    if i % 3 == 0:\n        pe[i] = (pe[i - 1] + pe[i - 2] * 2 + 1) % 1000000007\n    else:\n        pe[i] = (pe[i - 1] + pe[i - 2] * 2) % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print(pe[n] * 4 % 1000000007)", "mod = 1000000007\nMAX = 2000000\narr = [int(-1)] * (MAX + 1)\narr[0] = 0\narr[1] = 0\narr[2] = 0\narr[3] = 4\narr[4] = 4\nfor i in range(5, MAX + 1):\n    arr[i] = (arr[i - 1] + 2 * arr[i - 2] + 4 * (i % 3 == 0)) % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(arr[n])\n    t -= 1", "a = [0, 0, 1, 1]\nm = 10 ** 9 + 7\nfor i in range(5, 2000001):\n    x = a[i - 2] + 2 * a[i - 3]\n    if i % 3 == 0:\n        a.append((x + 1) % m)\n    else:\n        a.append(x % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print(a[n - 1] * 4 % m)", "(MOD, N) = (10 ** 9 + 7, 2 * 1001 * 1001)\ndp = [0] * N\nfor i in range(3, N):\n    dp[i] = (2 * dp[i - 2] + dp[i - 1] + 4 * (i % 3 == 0)) % MOD\nfor _ in range(int(input())):\n    print(dp[int(input())])", "import atexit\nimport io\nimport sys\nimport math\nfrom collections import defaultdict, Counter\nm = pow(10, 9) + 7\ndp = [0] * 2000001\nfor j in range(2, 2000001):\n    dp[j] = (2 * dp[j - 2] + dp[j - 1] + (4 if j % 3 == 0 else 0)) % m\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(dp[n])", "limit = 10 ** 9 + 7\nk = 2000001\nA = [0] * k\nA[3] = 4\nfor i in range(4, 2000001):\n    save = A[i - 1] + 2 * A[i - 2]\n    if i % 3 == 0:\n        save += 4\n    A[i] = save % limit\nfor t in range(int(input())):\n    n = int(input())\n    print(A[n])", "k = 2000005\nl = [0] * k\nl[1] = 0\nl[2] = 0\nl[3] = 4\nl[4] = 4\n\ndef ans():\n    mod = 1000000000.0 + 7\n    for i in range(5, k):\n        if i % 3 == 0:\n            ans = l[i - 1] + 2 * l[i - 2] + 4\n        else:\n            ans = l[i - 1] + 2 * l[i - 2]\n        ans = ans % mod\n        l[i] = int(ans)\nans()\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "m = 1000000007\nk = 2000001\nx = [0] * k\nx[3] = 4\nc = 3\nfor t in range(int(input())):\n    n = int(input())\n    if n <= c:\n        print(x[n])\n    else:\n        for i in range(c + 1, n + 1):\n            a = x[i - 1] + 2 * x[i - 2]\n            if i % 3 == 0:\n                a += 4\n            x[i] = a % m\n        c = n\n        print(x[n])", "mod = 10 ** 9 + 7\nans = [0, 0, 4, 4]\nt = int(input())\nfor i in range(5, 2000010):\n    temp = ans[i - 2] + 2 * ans[i - 3]\n    if i % 3 == 0:\n        temp += 4\n    ans.append(temp % mod)\nfor _ in range(t):\n    n = int(input())\n    print(ans[n - 1])", "t = int(input())\nmaxn = int(1000000.0 * 2 + 7)\nmod = int(1000000000.0 + 7)\ndp = list(bytearray(maxn))\nfor i in range(3, maxn):\n    add4 = 4 if i % 3 == 0 else 0\n    dp[i] = (dp[i - 2] * 2 + dp[i - 1]) % mod + add4\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "(m, k) = (1000000007, 2000001)\nx = [0] * k\n(x[3], c) = (4, 3)\nfor t in range(int(input())):\n    n = int(input())\n    if n <= c:\n        print(x[n])\n    else:\n        for i in range(c + 1, n + 1):\n            a = x[i - 1] + 2 * x[i - 2]\n            if i % 3 == 0:\n                a += 4\n            x[i] = a % m\n        c = n\n        print(x[n])", "total = 2000001\narr = [0] * total\narr[3] = 4\nmod = 10 ** 9 + 7\nfor i in range(4, total):\n    res = arr[i - 1] + 2 * arr[i - 2]\n    if i % 3 == 0:\n        res += 4\n    arr[i] = res % mod\nfor _ in range(int(input())):\n    n = int(input())\n    print(arr[n])", "total = 2000001\narr = [0] * total\narr[3] = 4\nmod = 10 ** 9 + 7\nfor i in range(4, total):\n    res = arr[i - 1] + 2 * arr[i - 2]\n    if i % 3 == 0:\n        res += 4\n    arr[i] = res % mod\nfor _ in range(int(input())):\n    n = int(input())\n    print(arr[n])", "t = int(input())\ndp = []\ndp.append(0)\ndp.append(0)\ndp.append(0)\ndp.append(4)\ndp.append(4)\nmod = 10 ** 9 + 7\nfor i in range(5, 2000001, 1):\n    a = dp[i - 1] + 2 * dp[i - 2]\n    if i % 3 == 0:\n        a += 4\n    a %= mod\n    dp.append(a)\nfor i in range(t):\n    n = int(input())\n    print(dp[n])", "l = [0, 0, 0]\nmod = int(1000000000.0) + 7\nfor i in range(3, 2000005):\n    l.append((l[i - 1] + l[i - 2] * 2 + (4 if i % 3 == 0 else 0)) % mod)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(l[n])", "import sys\npprint = lambda s: print(' '.join(map(str, s)))\ninput = lambda : sys.stdin.readline().strip()\nipnut = input\nn = 2000000\ndp = [0] * n\nmod = 1000000007\nfor i in range(2, n):\n    dp[i] = (dp[i - 1] + 2 * dp[i - 2] + int(i % 3 == 2)) % mod\nfor i in range(int(input())):\n    print(dp[int(input()) - 1] * 4 % mod)", "from collections import deque\nt = int(input())\nEdge_Nodes = 0\nInfant_Nodes = 1\nClaw = 0\nd = {}\nd1 = set()\nl = [0]\nqueue = deque(l)\nl1 = []\nfor i in range(t):\n    l1.append(int(input()))\n    d1.add(l1[-1])\nans = []\nd[1] = 0\nfor j in range(2, 2 * 10 ** 6 + 1):\n    temp = Infant_Nodes\n    Infant_Nodes = (2 * Edge_Nodes + Infant_Nodes) % (10 ** 9 + 7)\n    Claw = Edge_Nodes % (10 ** 9 + 7)\n    Edge_Nodes = temp % (10 ** 9 + 7)\n    if j > 3:\n        queue.append((Claw + queue.popleft()) % (10 ** 9 + 7))\n    else:\n        queue.append(Claw)\n    if j in d1:\n        d[j] = 4 * queue[len(queue) - 1] % (10 ** 9 + 7)\nfor i in l1:\n    print(d[i])"]