["import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    s = input()\n    s_dict = {}\n    s_dict2 = {}\n    res = {}\n    alp = []\n    for i in s:\n        if i not in s_dict:\n            alp.append(i)\n            s_dict2[i] = 0\n            s_dict[i] = 0\n            res[i] = {}\n        s_dict[i] += 1\n    ans = max(s_dict.values())\n    for i in s:\n        for j in alp:\n            if i not in res[j]:\n                res[j][i] = 0\n            res[j][i] += s_dict2[j]\n        s_dict2[i] += 1\n    for i in alp:\n        for j in alp:\n            ans = max(ans, res[i][j])\n    print(ans)\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()", "import os\nimport sys\n\ndef main():\n    s = input()\n    dp = [[0] * 27 for i in range(27)]\n    d = [0] * 27\n    for i in range(len(s)):\n        k = ord(s[i]) - 97\n        for j in range(27):\n            dp[k][j] += d[j]\n        d[k] += 1\n    ans = 0\n    for i in range(27):\n        for j in range(27):\n            ans = max(ans, dp[i][j])\n    for i in d:\n        ans = max(ans, i)\n    print(ans)\nmain()", "import sys\nimport string\ns = input()\nmax_1_c = {}\nfor c in string.ascii_lowercase:\n    max_1_c[c] = 0\nmax_2 = {}\nfor c in string.ascii_lowercase:\n    max_2[c] = {}\n    for c2 in string.ascii_lowercase:\n        max_2[c][c2] = 0\nfor c in s:\n    for c2 in string.ascii_lowercase:\n        max_2[c2][c] += max_1_c[c2]\n    max_1_c[c] += 1\ntotal = 0\nfor c in string.ascii_lowercase:\n    total = max(total, max_1_c[c])\nfor c in string.ascii_lowercase:\n    for c2 in string.ascii_lowercase:\n        total = max(total, max_2[c][c2])\nprint(total)", "from collections import defaultdict\nimport string\n\ndef max_code(s):\n    count = defaultdict(int)\n    code = defaultdict(int)\n    for c in s:\n        for past in list(string.ascii_lowercase):\n            code[past + c] += count[past]\n        count[c] += 1\n    return max(max(code.values()), max(count.values()))\ns = input()\nprint(max_code(s))", "s = input()\narr1 = [0] * 26\narr2 = [[0] * 26 for i in range(26)]\nfor i in range(len(s)):\n    c = ord(s[i]) - ord('a')\n    for j in range(26):\n        arr2[j][c] += arr1[j]\n    arr1[c] += 1\nans = 0\nfor i in range(26):\n    ans = max(ans, arr1[i])\nfor i in range(26):\n    for j in range(26):\n        ans = max(ans, arr2[i][j])\nprint(ans)", "import math\n\ndef print_matrix(mat):\n    print('---')\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            print(mat[i][j], end=' ')\n        print()\nn_latin = 26\nm2 = [[0 for i in range(n_latin)] for j in range(n_latin)]\nm1 = [0 for i in range(n_latin)]\nmessage = input()\nn = len(message)\nfor i in range(n):\n    c = ord(message[i]) - ord('a')\n    for j in range(n_latin):\n        m2[j][c] += m1[j]\n    m1[c] += 1\nr1 = max(m1)\nfor i in range(n_latin):\n    for j in range(n_latin):\n        if m2[i][j] > r1:\n            r1 = m2[i][j]\nprint(r1)", "s = list(input())\nlist1 = [0] * 26\nlist2 = list()\nfor i in range(26):\n    p = [0] * 26\n    list2.append(p)\nfor i in range(len(s)):\n    t = ord(s[i]) - ord('a')\n    for j in range(26):\n        list2[j][t] += list1[j]\n    list1[t] += 1\nans1 = 0\nfor i in range(26):\n    ans1 = max(ans1, list1[i])\nfor i in range(26):\n    for j in range(26):\n        ans1 = max(ans1, list2[i][j])\nprint(ans1)", "s = input()\none = [0] * 26\ntwo = [[0] * 26 for _ in range(0, 26)]\nfor i in s:\n    k = ord(i) - 97\n    for ii in range(0, 26):\n        two[ii][k] += one[ii]\n    one[k] += 1\nmx = max(one)\nfor i in two:\n    mx = max(mx, max(i))\nprint(mx)", "s = input()\ns = list(s)\ncount1 = [0 for i in range(26)]\ncount2 = [[0 for i in range(26)] for j in range(26)]\nfor i in range(len(s)):\n    c = ord(s[i]) - ord('a')\n    for j in range(0, 26):\n        count2[j][c] += count1[j]\n    count1[c] += 1\nmaxe1 = max(count1)\nmaxe2 = maxe1\nfor i in range(26):\n    for j in range(26):\n        maxe2 = max(maxe2, count2[i][j])\nprint(maxe2)", "s = input()\nn = len(s)\ncnt = [0] * 30\ndp = [[0 for i in range(30)] for j in range(30)]\nfor i in range(n):\n    ch = ord(s[i]) - 97\n    for j in range(26):\n        dp[j][ch] += cnt[j]\n    cnt[ch] += 1\nres = max(cnt)\nfor i in range(26):\n    res = max(res, max(dp[i]))\nprint(res)", "import sys\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\ns = input()\nctr = [0] * 26\npairs = [[0] * 26 for _ in range(26)]\nfor c in s:\n    i = ord(c) - 97\n    for first in range(26):\n        pairs[first][i] += ctr[first]\n    ctr[i] += 1\nmaxSub = max(ctr)\nfor row in pairs:\n    maxSub = max(maxSub, max(row))\nprint(maxSub)", "alphabet = 'abcdefghijklmnopqrstuvwxyz'\nn = input()\nr = [0 for i in range(26)]\ns = [[0 for i in range(26)] for j in range(26)]\nif len(n) == 1:\n    print(1)\nelse:\n    for i in range(len(n)):\n        t = alphabet.index(n[i])\n        for j in range(26):\n            s[t][j] += r[j]\n        r[t] += 1\n    l = [max(s[i]) for i in range(26)]\n    print(max(max(r), max(l)))", "s = input()\na = [0] * 26\nb = [[0] * 26 for i in range(26)]\nfor i in range(len(s)):\n    c = ord(s[i]) - 97\n    for j in range(26):\n        b[j][c] += a[j]\n    a[c] += 1\nans = 0\nfor i in range(26):\n    ans = max(ans, a[i])\nfor i in range(26):\n    for j in range(26):\n        ans = max(ans, b[i][j])\nprint(ans)", "s = input()\nd = [[0] * 27 for i in range(27)]\ncount = [0] * 27\nfor i in range(len(s)):\n    k = ord(s[i]) - 97\n    for j in range(27):\n        d[k][j] += count[j]\n    count[k] += 1\nans = 0\nfor i in range(27):\n    for j in range(27):\n        ans = max(ans, d[i][j])\nfor i in range(27):\n    ans = max(ans, count[i])\nprint(ans)", "arr1 = [0] * 26\narr2 = [[0] * 26 for _ in range(26)]\ns = input()\nfor i in range(len(s)):\n    idx = ord(s[i]) - ord('a')\n    for j in range(26):\n        arr2[j][idx] += arr1[j]\n    arr1[idx] += 1\nans = 0\nfor i in range(26):\n    ans = max(ans, arr1[i])\nfor i in range(26):\n    for j in range(26):\n        ans = max(ans, arr2[i][j])\nprint(ans)", "from collections import Counter\ns = input().strip()\ncnt = [0] * 26\nrel = list()\nfor i in range(26):\n    rel.append([0] * 26)\nfor si in s:\n    cr = ord(si) - ord('a')\n    for i in range(26):\n        rel[i][cr] += cnt[i]\n    cnt[cr] += 1\nans = 0\nfor i in range(26):\n    ans = max(ans, cnt[i])\n    for j in range(26):\n        ans = max(ans, rel[i][j])\nprint(ans)", "def checker(s):\n    (dict, lst, max1) = ({}, [0] * 26, 0)\n    for i in range(26):\n        lst[i] = [0] * 26\n    for i in s:\n        if i in dict:\n            for j in dict:\n                lst[ord(j) - 97][ord(i) - 97] += dict[j]\n            dict[i] += 1\n        else:\n            for j in dict:\n                lst[ord(j) - 97][ord(i) - 97] += dict[j]\n            dict[i] = 1\n    for i in range(26):\n        for j in range(26):\n            max1 = max(max1, lst[i][j])\n    max2 = max(dict.values())\n    return max(max1, max2)\nprint(checker(input()))", "s = str(input())\nalpha = [0] * 26\npatt = [[0 for i in range(26)] for j in range(26)]\nfor i in range(len(s)):\n    temp = ord(s[i]) - ord('a')\n    for j in range(26):\n        patt[j][temp] += alpha[j]\n    alpha[temp] += 1\nans = 0\nfor i in alpha:\n    ans = max(i, ans)\nfor i in range(26):\n    for k in range(26):\n        ans = max(ans, patt[i][k])\nprint(ans)", "s = input()\nSingle = [0] * 26\nDouble = [[0] * 26 for _ in range(26)]\nfor i in range(len(s)):\n    c = ord(s[i]) - ord('a')\n    for j in range(26):\n        Double[j][c] += Single[j]\n    Single[c] += 1\nres = 0\nfor x in Single:\n    res = max(res, x)\nfor x in Double:\n    for y in x:\n        res = max(res, y)\nprint(res)", "s = input()\ndp = [[0] * 27 for i in range(27)]\nd = [0] * 27\nfor i in range(len(s)):\n    k = ord(s[i]) - 97\n    for j in range(27):\n        dp[k][j] += d[j]\n    d[k] += 1\nans = 0\nfor i in range(27):\n    for j in range(27):\n        ans = max(ans, dp[i][j])\nfor i in d:\n    ans = max(ans, i)\nprint(ans)", "s = input()\nletters = 'abcdefghijklmnopqrstuvwxyz'\nmx = 0\nfor c in letters:\n    mx = max(mx, s.count(c))\nfreq = {}\nfor let in letters:\n    freq[let] = 0\ndp = {}\nfor c1 in letters:\n    for c2 in letters:\n        dp[c1, c2] = 0\nfor c in s:\n    for let in letters:\n        dp[c, let] += freq[let]\n    freq[c] += 1\nfor c1 in letters:\n    for c2 in letters:\n        mx = max(mx, dp[c1, c2])\nprint(mx)", "s = input()\nt = [0] * 702\nfor a in s:\n    a = ord(a) - 97\n    for b in range(26):\n        t[26 + b * 26 + a] += t[b]\n    t[a] += 1\nprint(max(t))", "s = input()\nn = len(s)\nco = [0] * 26\ndp = [[0 for _ in range(26)] for _ in range(26)]\nfor i in s:\n    r = ord(i) - ord('a')\n    for j in range(26):\n        dp[r][j] += co[j]\n    co[r] += 1\nans = 0\nfor i in range(26):\n    ans = max(ans, max(dp[i]))\nprint(max(max(co), ans))", "s = input()\nn = len(s)\ncnt = [0] * 30\ndp = [[0 for i in range(30)] for j in range(30)]\nfor i in range(n):\n    ch = ord(s[i]) - 97\n    for j in range(26):\n        dp[j][ch] += cnt[j]\n    cnt[ch] += 1\nres = max(cnt)\nfor i in range(26):\n    res = max(res, max(dp[i]))\nprint(res)", "s = list(input())\nlis = [0] * 26\nans = [0] * (26 * 26)\nfor i in s:\n    aa = ord(i) - ord('a')\n    for j in range(26):\n        code = j * 26 + aa\n        ans[code] += lis[j]\n    lis[aa] += 1\nprint(max(ans + lis))", "import string\nfrom collections import OrderedDict\ns = input()\nalphabet = OrderedDict(zip(string.ascii_lowercase, range(1, 27)))\ndict_1 = {}\ndict_2 = {}\nfor j in alphabet.keys():\n    dict_1[j] = 0\n    dict_2[j] = {}\n    for i in alphabet.keys():\n        dict_2[j][i] = 0\nfor i in range(len(s)):\n    for j in alphabet.keys():\n        dict_2[j][s[i]] += dict_1[j]\n    dict_1[s[i]] += 1\nans = 0\nfor i in dict_1.keys():\n    ans = max(ans, dict_1[i])\nfor i in dict_2.keys():\n    for j in dict_2[i].keys():\n        ans = max(ans, dict_2[i][j])\nprint(ans)", "from collections import Counter\ns = input()\ns_arr = [ord(i) - ord('a') for i in s]\nmatrix = [[0 for _ in range(26)] for _ in range(26)]\ncnt = [0 for i in range(26)]\nfor k in range(len(s)):\n    for i in range(26):\n        matrix[i][s_arr[k]] += cnt[i]\n    cnt[s_arr[k]] += 1\nmax_pair = max([max(i) for i in matrix])\nmax_single = Counter(s).most_common()[0][1]\nprint(max(max_pair, max_single))", "from collections import defaultdict as dd\ns = input()\nn = len(s)\nd = dd(int)\na = [ord(x) - 97 for x in s]\ndic = [[0 for x in range(26)] for y in range(26)]\nstr = [0 for x in range(26)]\nfor i in range(n):\n    for j in range(26):\n        dic[a[i]][j] += str[j]\n    str[a[i]] += 1\nmx1 = max(str)\nmx2 = 0\nfor i in dic:\n    if mx2 < max(i):\n        mx2 = max(i)\nprint(max(mx1, mx2))", "st = input()\nx = 'abcdefghijklmnopqrstuvwxyz'\ndic = {}\nfor i in x:\n    dic[i] = 0\nmain = {}\nfor i in x:\n    for j in x:\n        main[i + j] = 0\nfor xx in st:\n    for jj in dic:\n        main[jj + xx] += dic[jj]\n    dic[xx] += 1\nx1 = max(list(main.values()))\nx2 = max(list(dic.values()))\nprint(max(x1, x2))", "from collections import defaultdict\nx = input()\nmp = defaultdict(int)\nnorm_mp = defaultdict(int)\ndp = []\nfor el in x:\n    mp[el] += 1\n    norm_mp[el] += 1\nfor i in range(len(x) - 1):\n    mp[x[i]] -= 1\n    for el in mp:\n        norm_mp[f'{x[i]}{el}'] += mp[el]\nprint(sorted(norm_mp.items(), key=lambda item: item[1])[-1][-1])", "import sys, re, math\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom heapq import heappush, heappop, heapify, nlargest, nsmallest\n\ndef STR():\n    return list(input())\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\ndef sortListWithIndex(listOfTuples, idx):\n    return sorted(listOfTuples, key=lambda x: x[idx])\n\ndef sortDictWithVal(passedDic):\n    temp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))[::-1]\n    toret = {}\n    for tup in temp:\n        toret[tup[0]] = tup[1]\n    return toret\n\ndef sortDictWithKey(passedDic):\n    return dict(OrderedDict(sorted(passedDic.items())))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\ns = input()\nlen1 = [0] * 26\nlen2 = list2d(26, 26, 0)\nfor ch in s:\n    for j in range(26):\n        len2[j][ord(ch) - 97] += len1[j]\n    len1[ord(ch) - 97] += 1\nans = max(len1)\nfor i in range(26):\n    for j in range(26):\n        ans = max(ans, len2[i][j])\nprint(ans)", "s = input()\nco = [0] * 26\nco2 = [0] * (26 * 26)\nfor a in s:\n    a = ord(a) - ord('a')\n    for b in range(26):\n        r = a + 26 * b\n        co2[r] += co[b]\n    co[a] += 1\nprint(max(max(co), max(co2)))", "S = input()\narr1 = [0 for i in range(26)]\narr2 = [[0 for i in range(26)] for j in range(26)]\nfor i in range(len(S)):\n    c = ord(S[i]) - ord('a')\n    for j in range(26):\n        arr2[j][c] = arr2[j][c] + arr1[j]\n    arr1[c] += 1\nans = max(arr1)\nfor i in range(26):\n    for j in range(26):\n        ans = max(ans, arr2[i][j])\nprint(ans)", "s = input()\nco = [0] * 26\nco2 = [0] * (26 * 26)\nfor a in s:\n    a = ord(a) - ord('a')\n    for b in range(26):\n        r = a + 26 * b\n        co2[r] += co[b]\n    co[a] += 1\nprint(max(max(co), max(co2)))", "s = input()\nn = len(s)\nel = [0 for i in range(27)]\nelem = [[0 for j in range(27)] for t in range(27)]\nfor i in range(n):\n    k = ord(s[i]) - 97\n    for p in range(27):\n        elem[k][p] += el[p]\n    el[k] += 1\nm = 0\nfor i in range(27):\n    for j in range(27):\n        m = max(m, elem[i][j])\nm_anof = 0\nfor i in range(27):\n    m_anof = max(m_anof, el[i])\nprint(max(m, m_anof))", "d = {}\ns = set()\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d[y]\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "def solve():\n    s = input()\n    l = len(s)\n    li1 = []\n    for i in range(30):\n        ltemp = []\n        for j in range(30):\n            ltemp.append(0)\n        li1.append(ltemp)\n    li3 = []\n    for i in range(30):\n        li3.append(0)\n    li3[ord(s[0]) - ord('a')] = 1\n    for i in range(1, l):\n        for j in range(26):\n            li1[j][ord(s[i]) - ord('a')] += li3[j]\n        li3[ord(s[i]) - ord('a')] += 1\n    ans = max(li3)\n    for i in range(30):\n        for j in range(30):\n            if li1[i][j] > ans:\n                ans = li1[i][j]\n    print(ans)\nsolve()", "s = [ord(x) - 97 for x in input()]\nn = len(s)\nse = [0] * 26\nse2 = [0] * 26 * 26\nfor i in range(n):\n    for j in range(26):\n        se2[s[i] + 26 * j] += se[j]\n    se[s[i]] += 1\nprint(max(max(se), max(se2)))", "def msg_len(s):\n    cnt_chars = {}\n    cnts = {}\n    for c1 in s:\n        cnt_chars[c1] = cnt_chars.get(c1, 0) + 1\n    max_single = max(cnt_chars.values())\n    for c in s:\n        cnt_chars[c] -= 1\n        for (c2, cnt) in cnt_chars.items():\n            cnts[c + c2] = cnts.get(c + c2, 0) + cnt\n    return max(max_single, sorted(cnts.values())[-1])\nprint(msg_len(input()))\ntest_data = [('aaabb', 6), ('usaco', 1), ('lol', 2), ('qdpinbmcrfwxpdbfgozvvocemjructoadewegtvbvbfwwrpgyeaxgddrwvlqnygwmwhmrhaizpyxvgaflrsvzhhzrouvpxrkxfza', 37)]", "from collections import Counter\n\ndef main():\n    s = input().strip()\n    (cnt1, cnt2) = (Counter({'a': 0}), Counter({'aa': 0}))\n    for c in s:\n        for (k, v) in cnt1.items():\n            cnt2[k + c] += v\n        cnt1[c] += 1\n    result = max(max(cnt1.values()), max(cnt2.values()))\n    print(result)\nmain()", "s = input()\ndict = {}\narray = [0] * 26\nfor i in range(26):\n    array[i] = [0] * 26\nfor i in s:\n    if i in dict:\n        for j in dict:\n            array[ord(j) - 97][ord(i) - 97] += dict[j]\n        dict[i] += 1\n    else:\n        for j in dict:\n            array[ord(j) - 97][ord(i) - 97] += dict[j]\n        dict[i] = 1\nmaxi1 = 0\nfor i in range(26):\n    for j in range(26):\n        maxi1 = max(maxi1, array[i][j])\nmaxi2 = max(dict.values())\nprint(max(maxi1, maxi2))", "d = {}\ns = set()\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d[y]\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "d = {}\ns = set()\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d[y]\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "str_ = input()\nl = [[0] * 26 for i in range(26)]\nfreq = [0] * 26\nfor i in str_:\n    for j in range(26):\n        if freq[j] > 0:\n            l[ord(i) - 97][j] += freq[j]\n    freq[ord(i) - 97] += 1\nresult = max(freq)\nfor i in range(26):\n    for j in range(26):\n        result = max(result, l[i][j])\nprint(result)", "s = input()\ndict = {}\narray = [0] * 26\nfor i in range(26):\n    array[i] = [0] * 26\nmaxi1 = 0\nfor i in s:\n    if i in dict:\n        for j in dict:\n            array[ord(j) - 97][ord(i) - 97] += dict[j]\n        dict[i] += 1\n    else:\n        for j in dict:\n            array[ord(j) - 97][ord(i) - 97] += dict[j]\n        dict[i] = 1\nfor i in range(26):\n    for j in range(26):\n        maxi1 = max(maxi1, array[i][j])\nmaxi2 = max(dict.values())\nprint(max(maxi1, maxi2))", "single = {}\ndouble = {}\nstring = input()\nfor i in string:\n    for j in single:\n        x = j + i\n        double[x] = double.get(x, 0) + single[j]\n    single[i] = single.get(i, 0) + 1\nmax1 = -float('Inf')\nfor i in double:\n    max1 = max(double[i], max1)\nfor i in single:\n    max1 = max(single[i], max1)\nprint(max1)", "s = input()\nss = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'.split()\nd1 = {}\nd2 = {}\nfor ssi in ss:\n    d1[ssi] = 0\nfor i in ss:\n    for k in ss:\n        d2[i + k] = 0\nfor si in s:\n    for ki in d1.keys():\n        d2[ki + si] += d1[ki]\n    d1[si] += 1\nprint(max(max(d1.values()), max(d2.values())))", "from math import ceil, sqrt, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().strip().split(' '))\n\ndef li():\n    return list(mi())\ns = si()\na = []\nfor i in range(26):\n    b = [0] * 26\n    a.append(b)\nc = [0] * 26\nfor i in range(len(s)):\n    for j in range(26):\n        a[j][ord(s[i]) - ord('a')] += c[j]\n    c[ord(s[i]) - ord('a')] += 1\nc1 = max(c)\nfor i in range(26):\n    for j in range(26):\n        c1 = max(c1, a[i][j])\nprint(c1)", "d = {}\ns = {0}\nfor x in input(''):\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d.get(y, 0)\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "d = {}\ns = {0}\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d.get(y, 0)\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "from collections import Counter\ninp = input()\ns = set()\ndp = {}\nc = Counter()\nn = len(s)\nfor x in inp:\n    dp[x] = dp.get(x, 0) + 1\n    for y in s:\n        dp[x, y] = dp.get((x, y), 0) + c[y]\n    s.add(x)\n    c[x] += 1\nprint(max(dp.values()))", "from bisect import *\nd = {}\ni = 0\nfor c in input():\n    l = d.setdefault(c, [])\n    l += (i,)\n    i += 1\nm = len(max(d.values(), key=len))\nprint(max(m, m * (m - 1) // 2, *(sum((bisect(d[y], i) for i in d[x])) for x in d for y in d if y != x)))", "import sys\nimport math, bisect, operator\n(inf, m) = (float('inf'), 10 ** 9 + 7)\nsys.setrecursionlimit(10 ** 6)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\ns = input()\nc = Counter()\nsets = set()\ndp = dict()\nfor x in s:\n    dp[x] = dp.get(x, 0) + 1\n    for y in sets:\n        dp[x, y] = dp.get((x, y), 0) + c[y]\n    sets.add(x)\n    c[x] += 1\nprint(max(dp.values()))", "from bisect import *\nd = {}\ni = 0\nfor c in input():\n    l = d.setdefault(c, [])\n    l += (i,)\n    i += 1\nprint(max(*map(len, d.values()), *(sum((bisect_left(d[y], i) for i in d[x])) for x in d for y in d)))", "d = {}\ns = {0}\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d.get(y, 0)\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "(a, b) = ({}, {})\nfor x in input():\n    for y in a:\n        b[x, y] = b.get((x, y), 0) + a.get(y, 0)\n    a[x] = a.get(x, 0) + 1\nprint(max(0, 0, *a.values(), *b.values()))", "s = input()\nd1 = {}\nd2 = {}\nfor i in s:\n    for key in d1:\n        if key + i in d2:\n            d2[key + i] += d1[key]\n        else:\n            d2[key + i] = d1[key]\n    if i in d1:\n        d1[i] += 1\n    else:\n        d1[i] = 1\nans = 0\nfor key in d1:\n    ans = max(ans, d1[key])\nfor key in d2:\n    ans = max(ans, d2[key])\nprint(ans)", "d = {}\ns = {0}\nfor x in input():\n    for y in s:\n        d[x, y] = d.get((x, y), 0) + d.get(y, 0)\n    s |= {x}\n    d[x] = d.get(x, 0) + 1\nprint(max(d.values()))", "import collections\ns = str(input())\nm = 1\nd = collections.defaultdict(int)\nv = collections.defaultdict(int)\nans = 0\nfor i in s:\n    for j in range(26):\n        d[chr(97 + j), i] += v[chr(97 + j)]\n    v[i] += 1\n    ans = max(ans, v[i])\nfor i in d:\n    ans = max(ans, d[i])\nprint(ans)", "from collections import Counter, defaultdict\ns = input()\nn = len(s)\nmx = 0\nd = defaultdict(int)\ndd = defaultdict(int)\nst = list(set(s))\nfor i in range(len(s)):\n    for j in range(len(st)):\n        p = s[i] + st[j]\n        d[p] += dd[st[j]]\n    dd[s[i]] += 1\nfor (i, j) in d.items():\n    mx = max(mx, j)\nfor (i, j) in dd.items():\n    mx = max(mx, j)\nprint(mx)", "s = input()\ndp2 = [[0] * 26 for i in range(26)]\ndp1 = [0] * 26\n\ndef ind(c: str):\n    return ord(c) - ord('a')\nn = len(s)\nans = 0\nfor i in range(len(s)):\n    ch = s[i]\n    for j in range(26):\n        dp2[j][ind(ch)] += dp1[j]\n    dp1[ind(ch)] += 1\nans = max(dp1)\nfor i in dp2:\n    for j in i:\n        ans = max(ans, j)\nprint(ans)", "(one, two) = ({}, {})\nfor c in input():\n    for pc in one.keys():\n        if pc + c in two:\n            two[pc + c] += one[pc]\n        else:\n            two[pc + c] = one[pc]\n    one[c] = one[c] + 1 if c in one else 1\nprint(max(max(two.values(), default=0), max(one.values(), default=0)))", "s = input()\nd1 = dict()\nd2 = dict()\nfor c in s:\n    for key in d1:\n        if key + c in d2:\n            d2[key + c] += d1[key]\n        else:\n            d2[key + c] = d1[key]\n    if c in d1:\n        d1[c] += 1\n    else:\n        d1[c] = 1\nans = 0\nfor key in d1:\n    ans = max(ans, d1[key])\nfor key in d2:\n    ans = max(ans, d2[key])\nprint(ans)", "from string import ascii_lowercase\ns = input()\nlc = {c: 0 for c in ascii_lowercase}\nllc = dict()\nfor c in s:\n    for v in lc:\n        if v + c not in llc:\n            llc[v + c] = lc[v]\n        else:\n            llc[v + c] += lc[v]\n    lc[c] += 1\nprint(max(*lc.values(), *llc.values()))", "from collections import defaultdict\ns = input()\nindices = defaultdict(list)\nn = len(s)\nfor i in range(n):\n    indices[s[i]].append(i)\nans = 0\nk = list(indices.keys())\nn = len(k)\nfor i in range(n):\n    i1 = indices[k[i]]\n    ans = max(ans, len(i1), len(i1) * (len(i1) - 1) // 2)\n    for j in range(i + 1, n):\n        i2 = indices[k[j]]\n        (a, b) = (0, 0)\n        count = 0\n        while a < len(i1):\n            while b < len(i2) and i2[b] < i1[a]:\n                b += 1\n            if b == len(i2):\n                break\n            count += len(i2) - b\n            a += 1\n        ans = max(ans, count, len(i1) * len(i2) - count)\nprint(ans)", "import math\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    s = input()\n    if len(s) == 1:\n        print(1)\n        return\n    t = {}\n    mx = 0\n    alph = ''\n    last = False\n    gh = [1]\n    gh_index = 0\n    for i in s:\n        if i in t:\n            t[i] += 1\n            if t[i] > mx:\n                mx = t[i]\n        else:\n            t[i] = 1\n            alph += i\n        if last:\n            if last == i:\n                gh[gh_index] += 1\n            else:\n                gh_index += 1\n                gh.append(1)\n        last = i\n    res = {}\n    t2 = {}\n    for i in s:\n        if i in t2:\n            t2[i] += 1\n        else:\n            t2[i] = 1\n        for j in alph:\n            k = str(i + j)\n            if k not in res:\n                res[k] = 0\n            res[k] += t[j] - (t2[j] if j in t2 else 0)\n    if len(res.values()) == 0:\n        r = 0\n        for i in range(1, mx):\n            r += i\n        print(r)\n        return\n    r = 0\n    for i in range(1, max(gh)):\n        r += i\n    print(max(max(res.values()), mx, r))\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()", "s = input()\nmam = 0\nfor i in range(0, 26):\n    ch = chr(i + 97)\n    a = [0] * 26\n    maxi = 0\n    k = 0\n    ma = 0\n    for i in range(0, len(s)):\n        if s[i] == ch:\n            a[ord(s[i]) - 97] = a[ord(s[i]) - 97] + 1 * k\n            k = k + 1\n        elif k > 0:\n            a[ord(s[i]) - 97] = a[ord(s[i]) - 97] + 1 * k\n    maxi = max(a)\n    ma = max(k, maxi)\n    mam = max(ma, mam)\nprint(mam)", "dp = {}\nfor c in input():\n    num = ord(c) - ord('a') + 1\n    for prev in range(1, 27):\n        if prev in dp:\n            dp[prev * 26 + num] = dp.get(prev * 26 + num, 0) + dp.get(prev)\n    dp[num] = dp.get(num, 0) + 1\nprint(max(dp.values()))", "s = input()\nsto = {}\nz = [0] * 26\nfor i in range(len(s)):\n    if s[i] not in sto:\n        sto[s[i]] = 0\n    sto[s[i]] += 1\n    for j in range(0, 26):\n        comb = chr(j + ord('a')) + s[i]\n        if comb not in sto:\n            sto[comb] = 0\n        sto[comb] += z[j]\n    z[ord(s[i]) - ord('a')] += 1\nprint(max(sto.values()))"]