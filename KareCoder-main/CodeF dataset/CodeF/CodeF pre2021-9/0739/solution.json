["import sys\nfrom bisect import bisect_left\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [tuple(map(int, input().split())) for i in range(n)]\n    a.sort()\n    c = a[0][0]\n    r = 0\n    for i in range(len(a)):\n        if a[i][0] > c:\n            r += a[i][0] - c\n        r += a[i][1]\n        c = max(c, a[i][0] + a[i][1])\n    print(r)\nsolve()", "import sys\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\nfrom math import gcd\nfrom math import ceil, log2, factorial\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef fastio():\n    import sys\n    from io import StringIO\n    from atexit import register\n    global input\n    sys.stdin = StringIO(sys.stdin.read())\n    input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n    sys.stdout = StringIO()\n    register(lambda : sys.__stdout__.write(sys.stdout.getvalue()))\nI = lambda : list(map(int, input().split()))\nTESTS = 0\n\ndef solve():\n    (n,) = I()\n    a = []\n    for i in range(n):\n        a.append(tuple(I()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i][1]\n    mx = 0\n    for i in range(n - 1):\n        mx = max(mx, a[i][0] + a[i][1])\n        if mx < a[i + 1][0]:\n            ans += a[i + 1][0] - mx\n    print(ans)\n\ndef main():\n    if not TESTS:\n        solve()\n        return\n    (t,) = I()\n    while t:\n        solve()\n        t -= 1\nmain()", "import sys\nN = int(input())\nlst = []\nfor n in range(N):\n    l = list(map(int, sys.stdin.readline().split()))\n    lst.append(l)\nlst.sort()\nSum = lst[0][1]\nc = lst[0][0] + lst[0][1]\nfor i in lst[1:]:\n    Sum += i[1]\n    if i[0] > c:\n        Sum += i[0] - c\n    c = max(c, i[0] + i[1])\nprint(Sum)", "import sys\nN = int(input())\nlst = []\nfor n in range(N):\n    l = list(map(int, sys.stdin.readline().split()))\n    lst.append(l)\nlst.sort()\nSum = lst[0][1]\nc = lst[0][0] + lst[0][1]\nfor i in lst[1:]:\n    Sum += i[1]\n    if i[0] > c:\n        Sum += i[0] - c\n    c = max(c, i[0] + i[1])\nprint(Sum)", "N = int(input())\npts = []\nans = 0\nfor n in range(N):\n    (a, c) = map(int, input().split())\n    pts.append((a, a + c))\n    ans += c\npts.sort()\ncur = pts[0][0]\nfor (a, b) in pts:\n    ans += max(0, a - cur)\n    cur = max(cur, b)\nprint(ans)", "n = int(input())\na = sorted(([*map(int, input().split())] for i in range(n)))\nc = sum(a[0])\nt = a[0][1]\nfor w in a[1:]:\n    t += w[1]\n    if w == a[-1] or sum(w) > c:\n        t += max(w[0] - c, 0)\n        c = sum(w)\nprint(t)", "n = int(input())\nprice = []\ntotal = 0\nfor i in range(n):\n    (a, c) = map(int, input().split())\n    price.append((a, a + c))\n    total = total + c\nprice.sort()\ncurrent = price[0][0]\nfor (i, j) in price:\n    total = total + max(0, i - current)\n    current = max(current, j)\nprint(total)", "n = int(input())\na = [[int(s) for s in input().split(' ')] for i in range(n)]\na.sort()\n(ans, c) = (a[0][1], sum(a[0]))\nfor w in a[1:]:\n    ans += w[1] + max(w[0] - c, 0)\n    c = max(c, sum(w))\nprint(ans)", "n = int(input())\na = [[int(s) for s in input().split(' ')] for i in range(n)]\na.sort()\n(ans, c) = (a[0][1], sum(a[0]))\nfor w in a[1:]:\n    ans += w[1] + max(w[0] - c, 0)\n    c = max(c, sum(w))\nprint(ans)", "n = int(input())\na = [[int(s) for s in input().split(' ')] for i in range(n)]\na.sort()\n(ans, c) = (a[0][1], sum(a[0]))\nfor w in a[1:]:\n    ans += w[1] + max(w[0] - c, 0)\n    c = max(c, sum(w))\nprint(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = sorted(([*map(int, input().split())] for i in range(n)))\n(ans, c) = (a[0][1], sum(a[0]))\nfor w in a[1:]:\n    ans += w[1] + max(w[0] - c, 0)\n    c = max(c, sum(w))\nprint(ans)", "n = int(input())\ninps = []\nans = 0\nfor i in range(n):\n    (a, c) = map(int, input().split())\n    ans += c\n    inps.append((a, c))\ninps.sort()\ntopcover = inps[0][0]\nfor i in range(len(inps)):\n    if inps[i][0] > topcover:\n        ans += inps[i][0] - topcover\n    topcover = max(topcover, inps[i][0] + inps[i][1])\nprint(ans)"]