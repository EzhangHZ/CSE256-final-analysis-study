["import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    sys.stdout.write(' '.join(map(str, arr)) + '\\n')\nmain()", "def min_right(a, n, reverse=False):\n    if reverse:\n        a.reverse()\n    st = []\n    ans = [0] * n\n    for i in range(n):\n        while st and a[st[-1]] >= a[i]:\n            st.pop()\n        if st:\n            ans[i] = (i - st[-1]) * a[i] + ans[st[-1]]\n        else:\n            ans[i] = (i + 1) * a[i]\n        st.append(i)\n    if reverse:\n        a.reverse()\n        ans.reverse()\n    return ans\nn = int(input())\nnums = list(map(int, input().split()))\nll = min_right(nums, n)\nrr = min_right(nums, n, True)\nimax = 0\nvmax = ll[0] + rr[0] - nums[0]\nfor i in range(n):\n    if ll[i] + rr[i] - nums[i] > vmax:\n        imax = i\n        vmax = ll[i] + rr[i] - nums[i]\nfor i in range(imax - 1, -1, -1):\n    nums[i] = min(nums[i], nums[i + 1])\nfor i in range(imax + 1, n):\n    nums[i] = min(nums[i], nums[i - 1])\nprint(*nums)", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "from collections import deque\nn = int(input())\nm = list(map(int, input().split()))\n\ndef vua(n, a):\n    de = deque()\n    sp = [0 for _ in range(n)]\n    for x in range(n):\n        while de and a[de[-1]] > a[x]:\n            de.pop()\n        if len(de) == 0:\n            sp[x] = a[x] * (x + 1)\n        else:\n            sp[x] = sp[de[-1]] + a[x] * (x - de[-1])\n        de.append(x)\n    return sp\n\ndef onn(n, m):\n    x = vua(n, m)\n    y = vua(n, m[::-1])\n    y = y[::-1]\n    ans = []\n    for el in range(n):\n        ans.append(x[el] + y[el] - m[el])\n    maxx = max([_ for _ in range(0, n)], key=lambda i: x[i] + y[i] - m[i])\n    ind = maxx\n    for z in range(maxx - 1, -1, -1):\n        if m[z] >= m[ind]:\n            m[z] = m[ind]\n        else:\n            ind = z\n    ind = maxx\n    for z in range(maxx, n):\n        if m[z] >= m[ind]:\n            m[z] = m[ind]\n        else:\n            ind = z\n    print(*m)\nonn(n, m)", "import sys\nfrom collections import deque\nn = int(sys.stdin.readline())\nm = list(map(int, sys.stdin.readline().split()))\n\ndef vua(n, a):\n    de = deque()\n    sp = [0 for _ in range(n)]\n    for x in range(n):\n        while de and a[de[-1]] > a[x]:\n            de.pop()\n        if len(de) == 0:\n            sp[x] = a[x] * (x + 1)\n        else:\n            sp[x] = sp[de[-1]] + a[x] * (x - de[-1])\n        de.append(x)\n    return sp\n\ndef onn(n, m):\n    x = vua(n, m)\n    y = vua(n, m[::-1])\n    y = y[::-1]\n    ans = []\n    for el in range(n):\n        ans.append(x[el] + y[el] - m[el])\n    maxx = max([_ for _ in range(0, n)], key=lambda i: x[i] + y[i] - m[i])\n    ind = maxx\n    for z in range(maxx - 1, -1, -1):\n        if m[z] >= m[ind]:\n            m[z] = m[ind]\n        else:\n            ind = z\n    ind = maxx\n    for z in range(maxx, n):\n        if m[z] >= m[ind]:\n            m[z] = m[ind]\n        else:\n            ind = z\n    print(*m)\nonn(n, m)", "from collections import deque\nn = int(input())\nm = list(map(int, input().split()))\n\ndef vua(n, a):\n    de = deque()\n    sp = [0 for _ in range(n)]\n    for x in range(n):\n        while de and a[de[-1]] > a[x]:\n            de.pop()\n        if len(de) == 0:\n            sp[x] = a[x] * (x + 1)\n        else:\n            sp[x] = sp[de[-1]] + a[x] * (x - de[-1])\n        de.append(x)\n    return sp\nx = vua(n, m)\ny = vua(n, m[::-1])\ny = y[::-1]\nans = []\nfor el in range(n):\n    ans.append(x[el] + y[el] - m[el])\nmaxx = max([_ for _ in range(0, n)], key=lambda i: x[i] + y[i] - m[i])\nind = maxx\nfor z in range(maxx - 1, -1, -1):\n    if m[z] >= m[ind]:\n        m[z] = m[ind]\n    else:\n        ind = z\nind = maxx\nfor z in range(maxx, n):\n    if m[z] >= m[ind]:\n        m[z] = m[ind]\n    else:\n        ind = z\nprint(*m)", "def r(x, d):\n    stack = [-1]\n    s = [0] * x\n    for i in range(x - 1, -1, -1):\n        while d[i] < d[stack[-1]] and stack[-1] != -1:\n            stack.pop()\n        s[i] = (x - i) * d[i] if stack[-1] == -1 else s[stack[-1]] + d[i] * (stack[-1] - i)\n        stack += [i]\n    return s\n\ndef total():\n    inf = float('inf')\n    n = int(input())\n    a = [*map(int, input().split())]\n    le = r(n, a)\n    a = a[::-1]\n    ri = r(n, a)[::-1]\n    a = a[::-1]\n    ma = 0\n    x = 0\n    for i in range(n):\n        if le[i] + ri[i] - a[i] > ma:\n            ma = le[i] + ri[i] - a[i]\n            x = i\n    for i in range(x + 1, n):\n        a[i] = min(a[i], a[i - 1])\n    for i in range(x - 1, -1, -1):\n        a[i] = min(a[i], a[i + 1])\n    print(*a)\ntotal()", "def obhod(l, m, rev):\n    if rev:\n        m.reverse()\n    locmin = []\n    number = []\n    l[0] = m[0]\n    locmin.append(m[0])\n    number.append(0)\n    for i in range(1, n):\n        if m[i] >= m[i - 1]:\n            l[i] = l[i - 1] + m[i]\n        else:\n            while len(locmin) > 0:\n                if locmin[-1] > m[i]:\n                    locmin.pop()\n                    number.pop()\n                else:\n                    break\n            if len(locmin) == 0:\n                l[i] = m[i] * (i + 1)\n            else:\n                l[i] = (i - number[-1]) * m[i] + l[number[-1]]\n        locmin.append(m[i])\n        number.append(i)\n    if rev:\n        m.reverse()\n        l.reverse()\nn = int(input())\nm = list(map(int, input().split()))\nl = [0] * n\nr = [0] * n\nobhod(l, m, False)\nobhod(r, m, True)\nmaxi = 0\nmaxd = 0\nfor i in range(n):\n    if l[i] + r[i] - m[i] > maxd:\n        maxd = l[i] + r[i] - m[i]\n        maxi = i\nfor i in range(maxi - 1, -1, -1):\n    m[i] = min(m[i], m[i + 1])\nfor i in range(maxi + 1, n):\n    m[i] = min(m[i], m[i - 1])\nfor i in range(n):\n    print(m[i], end=' ')", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\ninf = float('inf')\nn = int(input())\na = [*map(int, input().split())]\nfor x in (0, 1):\n    stack = [-1]\n    s = [0] * n\n    for i in range(n - 1, -1, -1):\n        while a[i] < a[stack[-1]] and stack[-1] != -1:\n            stack.pop()\n        s[i] = (n - i) * a[i] if stack[-1] == -1 else s[stack[-1]] + a[i] * (stack[-1] - i)\n        stack += [i]\n    a = a[::-1]\n    if x:\n        ri = s[:][::-1]\n    else:\n        le = s[:]\ns = [i + j - k for (i, j, k) in zip(le, ri, a)]\nx = s.index(max(s))\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "def r():\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    s = [0] * (n + 2)\n    for i in range(1, len(a)):\n        s[i] = s[ns[i]] + a[i] * (i - ns[i]) if ns[i] else i * a[i]\n    return s\ninf = float('inf')\nn = int(input())\na = [-inf] + [*map(int, input().split())] + [-inf]\nle = r()\na = a[::-1]\nri = r()[::-1]\na = a[::-1]\ns = [i + j - k for (i, j, k) in zip(le, ri, a)][1:-1]\nx = s.index(max(s))\na = a[1:-1]\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "def r():\n    stack = [-1]\n    s = [0] * n\n    for i in range(n - 1, -1, -1):\n        while a[i] < a[stack[-1]] and stack[-1] != -1:\n            stack.pop()\n        s[i] = (n - i) * a[i] if stack[-1] == -1 else s[stack[-1]] + a[i] * (stack[-1] - i)\n        stack += [i]\n    return s\ninf = float('inf')\nn = int(input())\na = [*map(int, input().split())]\nle = r()\na = a[::-1]\nri = r()[::-1]\na = a[::-1]\nma = 0\nx = 0\nfor i in range(n):\n    if le[i] + ri[i] - a[i] > ma:\n        ma = le[i] + ri[i] - a[i]\n        x = i\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "from collections import deque\nn = int(input())\nb = [0]\na = list(map(int, input().split()))\na = b + a\nlef = [0 for i in range(n + 5)]\nansl = [0 for i in range(n + 5)]\nrigh = [0 for i in range(n + 5)]\nansr = [0 for i in range(n + 5)]\nans = -int(2000000000.0)\nfor k in range(1, n + 1):\n    i = k - 1\n    while i > 0 and a[i] > a[k]:\n        i = lef[i]\n    lef[k] = i\n    ansl[k] = ansl[i] + (k - i) * a[k]\nfor k in range(n, 0, -1):\n    i = k + 1\n    while i <= n and a[i] > a[k]:\n        i = righ[i]\n    righ[k] = i\n    ansr[k] = ansr[i] + (i - k) * a[k]\n    if ansr[k] + ansl[k] - a[k] > ans:\n        ans = ansr[k] + ansl[k] - a[k]\n        ind = k\nfor k in range(ind - 1, 0, -1):\n    a[k] = min(a[k], a[k + 1])\nfor k in range(ind + 1, n + 1):\n    a[k] = min(a[k], a[k - 1])\na = deque(a)\na.popleft()\na = list(a)\nprint(*a)", "from collections import deque\n\ndef f():\n    global a, n\n    return l\nn = int(input())\na = list(map(int, input().split()))\nl = [0 for i in range(n)]\nq = deque()\nfor i in range(n):\n    while len(q) and a[q[-1]] >= a[i]:\n        q.pop()\n    l[i] = (i + 1) * a[i] if len(q) == 0 else (i - q[-1]) * a[i] + l[q[-1]]\n    q.append(i)\na.reverse()\nr = [0 for i in range(n)]\nq = deque()\nfor i in range(n):\n    while len(q) and a[q[-1]] >= a[i]:\n        q.pop()\n    r[i] = (i + 1) * a[i] if len(q) == 0 else (i - q[-1]) * a[i] + r[q[-1]]\n    q.append(i)\na.reverse()\nr.reverse()\nmx = max([_ for _ in range(0, n)], key=lambda i: l[i] + r[i] - a[i])\nfor i in range(mx - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nfor i in range(mx + 1, n, 1):\n    a[i] = min(a[i], a[i - 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [-inf] + [int(i) for i in input().split()] + [-inf]\nfor x in (0, 1):\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    res = [0] * (n + 2)\n    for i in range(1, len(a)):\n        res[i] = res[ns[i]] + a[i] * (i - ns[i]) if ns[i] else i * a[i]\n    a = a[::-1]\n    if x:\n        ri = res[:][::-1]\n    else:\n        le = res[:]\na = a[1:-1]\nle = le[1:-1]\nri = ri[1:-1]\nsu = [i + j - k for (i, j, k) in zip(le, ri, a)]\nma = su.index(max(su))\nfor i in range(ma + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(ma - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [*map(int, input().split())]\nfor x in (0, 1):\n    stack = [-1]\n    s = [0] * n\n    for i in range(n - 1, -1, -1):\n        while a[i] < a[stack[-1]] and stack[-1] != -1:\n            stack.pop()\n        s[i] = (n - i) * a[i] if stack[-1] == -1 else s[stack[-1]] + a[i] * (stack[-1] - i)\n        stack += [i]\n    a = a[::-1]\n    if x:\n        ri = s[:][::-1]\n    else:\n        le = s[:]\ns = [i + j - k for (i, j, k) in zip(le, ri, a)]\nx = s.index(max(s))\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [-inf] + [int(i) for i in input().split()] + [-inf]\nfor x in (0, 1):\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    res = [0] * (n + 2)\n    for i in range(1, len(a)):\n        res[i] = res[ns[i]] + a[i] * (i - ns[i]) if ns[i] else i * a[i]\n    a = a[::-1]\n    if x:\n        ri = res[:][::-1]\n    else:\n        le = res[:]\nsu = [i + j - k for (i, j, k) in zip(le, ri, a)][1:-1]\nma = su.index(max(su))\na = a[1:-1]\nfor i in range(ma + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(ma - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [*map(int, input().split())]\nfor x in (0, 1):\n    stack = [-1]\n    s = [0] * n\n    for i in range(n - 1, -1, -1):\n        while a[i] < a[stack[-1]] and stack[-1] != -1:\n            stack.pop()\n        s[i] = (n - i) * a[i] if stack[-1] == -1 else s[stack[-1]] + a[i] * (stack[-1] - i)\n        stack += [i]\n    a = a[::-1]\n    if x:\n        ri = s[:][::-1]\n    else:\n        le = s[:]\nma = 0\nx = 0\nfor i in range(n):\n    if le[i] + ri[i] - a[i] > ma:\n        ma = le[i] + ri[i] - a[i]\n        x = i\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [-inf] + [*map(int, input().split())] + [-inf]\nfor x in (0, 1):\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n + 1, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    s = [0] * (n + 2)\n    for i in range(1, len(a)):\n        s[i] = s[ns[i]] + a[i] * (i - ns[i]) if ns[i] else i * a[i]\n    a = a[::-1]\n    if x:\n        ri = s[:][::-1]\n    else:\n        le = s[:]\ns = [i + j - k for (i, j, k) in zip(le, ri, a)][1:-1]\nx = s.index(max(s))\na = a[1:-1]\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "n = int(input())\nsp = list(map(int, input().split()))\nforw = [0 for i in range(n)]\nbackw = [0 for i in range(n)]\nstack = [(0, -1, 0)]\nfor i in range(n):\n    while sp[i] <= stack[-1][0]:\n        stack.pop()\n    stack.append((sp[i], i, (i - stack[-1][1]) * sp[i] + stack[-1][2]))\n    forw[i] = stack[-1][2]\nrevsp = sp[::-1]\nstack = [(0, -1, 0)]\nfor i in range(n):\n    while revsp[i] <= stack[-1][0]:\n        stack.pop()\n    stack.append((revsp[i], i, (i - stack[-1][1]) * revsp[i] + stack[-1][2]))\n    backw[i] = stack[-1][2]\nbackw = backw[::-1]\ncenter = 0\nans_center = 0\nfor i in range(n):\n    if ans_center < backw[i] + forw[i] - sp[i]:\n        center = i\n        ans_center = backw[i] + forw[i] - sp[i]\nans = [0 for i in range(n)]\nans[center] = sp[center]\ncur = sp[center]\nfor i in range(center - 1, -1, -1):\n    cur = min(cur, sp[i])\n    ans[i] = cur\ncur = sp[center]\nfor i in range(center + 1, n, 1):\n    cur = min(cur, sp[i])\n    ans[i] = cur\nprint(*ans)", "inf = float('inf')\nn = int(input())\na = [-inf] + [int(i) for i in input().split()] + [-inf]\nfor x in (0, 1):\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    res = [0] * (n + 2)\n    for i in range(1, len(a)):\n        if ns[i] == 0:\n            res[i] = i * a[i]\n        else:\n            res[i] = res[ns[i]] + a[i] * (i - ns[i])\n    a = a[::-1]\n    if x:\n        right = res[:][::-1]\n    else:\n        left = res[:]\na = a[1:-1]\nleft = left[1:-1]\nright = right[1:-1]\nsu = [i + j - k for (i, j, k) in zip(left, right, a)]\nma = su.index(max(su))\nfor i in range(ma + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(ma - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "inf = float('inf')\nn = int(input())\na = [-inf] + [*map(int, input().split())] + [-inf]\nfor x in (0, 1):\n    stack = [0]\n    ns = [-1] * (n + 2)\n    for i in range(n, -1, -1):\n        while a[i] < a[stack[-1]]:\n            ns[stack.pop()] = i\n        stack += [i]\n    s = [0] * (n + 2)\n    for i in range(1, len(a)):\n        s[i] = s[ns[i]] + a[i] * (i - ns[i]) if ns[i] else i * a[i]\n    a = a[::-1]\n    if x:\n        ri = s[:][::-1]\n    else:\n        le = s[:]\ns = [i + j - k for (i, j, k) in zip(le, ri, a)][1:-1]\nx = s.index(max(s))\na = a[1:-1]\nfor i in range(x + 1, n):\n    a[i] = min(a[i], a[i - 1])\nfor i in range(x - 1, -1, -1):\n    a[i] = min(a[i], a[i + 1])\nprint(*a)", "n = int(input())\ninf = int(2000000000.0) + 1\nm = [-inf] + [int(x) for x in input().split()] + [-inf]\nr = [0] * (n + 2)\nst = [0]\nfor i in range(1, n + 2):\n    while m[st[-1]] > m[i]:\n        r[st.pop()] = i\n    st.append(i)\nl = [0] * (n + 2)\nst = [0]\nfor i in range(n + 1, 0, -1):\n    while m[st[-1]] > m[i]:\n        l[st.pop()] = i\n    st.append(i)\na = [0] * (n + 2)\nfor i in range(1, n + 1):\n    a[i] = a[l[i]] + m[i] * (i - l[i])\nb = [0] * (n + 2)\nfor i in range(n, 0, -1):\n    b[i] = b[r[i]] + m[i] * (r[i] - i)\np = -inf\nfor i in range(n + 1):\n    t = a[i] + b[i + 1]\n    if t > p:\n        q = i\n        p = t\nfor i in range(q - 1, 0, -1):\n    if m[i + 1] < m[i]:\n        m[i] = m[i + 1]\nq += 1\nfor i in range(1, q + 1):\n    print(m[i], end=' ')\nfor i in range(q + 1, n + 1):\n    if m[i - 1] < m[i]:\n        m[i] = m[i - 1]\n    print(m[i], end=' ')", "n = int(input())\ninf = int(2000000000.0) + 1\nm = [-inf] + [int(x) for x in input().split()] + [-inf]\nr = [0] * (n + 2)\nst = [0]\nfor i in range(1, n + 2):\n    while m[st[-1]] > m[i]:\n        r[st.pop()] = i\n    st.append(i)\nl = [0] * (n + 2)\nst = [0]\nfor i in range(n + 1, 0, -1):\n    while m[st[-1]] > m[i]:\n        l[st.pop()] = i\n    st.append(i)\na = [0]\nfor i in range(1, n + 1):\n    a.append(a[l[i]] + m[i] * (i - l[i]))\nb = [0] * (n + 2)\nfor i in range(n, 0, -1):\n    b[i] = b[r[i]] + m[i] * (r[i] - i)\np = -inf\nfor i in range(n + 1):\n    t = a[i] + b[i + 1]\n    if t > p:\n        q = i\n        p = t\nfor i in range(q - 1, 0, -1):\n    m[i] = min(m[i], m[i + 1])\nq += 1\nfor i in range(q + 1, n + 1):\n    m[i] = min(m[i], m[i - 1])\nfor i in range(1, n + 1):\n    print(m[i], end=' ')", "n = int(input())\ninf = int(2000000000.0) + 1\nm = [-inf] + [int(x) for x in input().split()] + [-inf]\nr = [0] * (n + 2)\nst = [0]\nfor i in range(1, n + 2):\n    while m[st[-1]] > m[i]:\n        r[st.pop()] = i\n    st.append(i)\nl = [0] * (n + 2)\nst = [0]\nfor i in range(n + 1, 0, -1):\n    while m[st[-1]] > m[i]:\n        l[st.pop()] = i\n    st.append(i)\na = [0] * (n + 2)\nfor i in range(1, n + 1):\n    a[i] = a[l[i]] + m[i] * (i - l[i])\nb = [0] * (n + 2)\nfor i in range(n, 0, -1):\n    b[i] = b[r[i]] + m[i] * (r[i] - i)\np = -inf\nfor i in range(n + 1):\n    t = a[i] + b[i + 1]\n    if t > p:\n        q = i\n        p = t\nfor i in range(q - 1, 0, -1):\n    m[i] = min(m[i], m[i + 1])\nq += 1\nfor i in range(q + 1, n + 1):\n    m[i] = min(m[i], m[i - 1])\nfor i in range(1, n + 1):\n    print(m[i], end=' ')", "import heapq\nimport operator\nn = int(input())\nm = list(map(int, input().split()))\nM = [m[i] for i in range(n)]\npeaks = []\np = []\nl = [0 for _ in range(n)]\nr = [0 for _ in range(n)]\nst = []\nfor i in range(0, n):\n    while st != [] and m[i] <= m[st[-1]]:\n        st.pop()\n    if st == []:\n        l[i] = m[i] * (i + 1)\n    else:\n        l[i] = l[st[-1]] + m[i] * (i - st[-1])\n    st.append(i)\nwhile st != []:\n    st.pop()\nfor i in range(0, n):\n    j = n - i - 1\n    while st != [] and m[j] <= m[st[-1]]:\n        st.pop()\n    if st == []:\n        r[j] = m[j] * (i + 1)\n    else:\n        r[j] = r[st[-1]] + m[j] * (st[-1] - j)\n    st.append(j)\nmaxf = 0\nI = 0\nfor i in range(n):\n    if l[i] + r[i] - m[i] >= maxf:\n        maxf = l[i] + r[i] - m[i]\n        I = i\nfor i in range(n):\n    if i < I:\n        m[I - (i + 1)] = min(m[I - i], m[I - (i + 1)])\n    if i > I:\n        m[i] = min(m[i], m[i - 1])\nprint(*m)", "n = int(input())\nm = [0] + list(map(int, input().split())) + [0]\nstk = [0] * (n + 2)\n(le, ri) = ([0] * (n + 2), [0] * (n + 2))\npos = [0] * (n + 2)\nans = [0] * (n + 2)\ntop = 0\nfor i in range(1, n + 1):\n    while top and stk[top] > m[i]:\n        top -= 1\n    le[i] = le[pos[top]] + (i - pos[top]) * m[i]\n    top += 1\n    (stk[top], pos[top]) = (m[i], i)\ntop = 0\npos[0] = n + 1\nfor i in range(n, 0, -1):\n    while top and stk[top] > m[i]:\n        top -= 1\n    ri[i] = ri[pos[top]] + (pos[top] - i) * m[i]\n    top += 1\n    (stk[top], pos[top]) = (m[i], i)\n(_max, idx) = (0, 1)\nfor i in range(1, n + 1):\n    if le[i] + ri[i] - m[i] > _max:\n        _max = le[i] + ri[i] - m[i]\n        idx = i\nans[idx] = m[idx]\nfor j in range(idx - 1, 0, -1):\n    ans[j] = min(m[j], ans[j + 1])\nfor j in range(idx + 1, n + 1):\n    ans[j] = min(m[j], ans[j - 1])\nprint(*ans[1:-1])", "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nl = [0 for _ in range(n)]\nr = [0 for _ in range(n)]\nq = deque()\nfor i in range(n):\n    while bool(len(q)) and a[q[-1]] >= a[i]:\n        q.pop()\n    if not len(q):\n        l[i] = (i + 1) * a[i]\n    else:\n        l[i] = (i - q[-1]) * a[i] + l[q[-1]]\n    q.append(i)\nq = deque()\nfor i in range(n - 1, -1, -1):\n    while bool(len(q)) and a[q[-1]] >= a[i]:\n        q.pop()\n    if not len(q):\n        r[i] = (n - i) * a[i]\n    else:\n        r[i] = (n - i - 1 - (n - q[-1] - 1)) * a[i] + r[q[-1]]\n    q.append(i)\nmx = 0\nfor i in range(n):\n    if l[mx] + r[mx] - a[mx] <= l[i] + r[i] - a[i]:\n        mx = i\nres = [0 for _ in range(n)]\nres[mx] = a[mx]\nfor i in range(mx - 1, -1, -1):\n    res[i] = min(res[i + 1], a[i])\nfor i in range(mx + 1, n):\n    res[i] = min(res[i - 1], a[i])\nprint(*res)"]