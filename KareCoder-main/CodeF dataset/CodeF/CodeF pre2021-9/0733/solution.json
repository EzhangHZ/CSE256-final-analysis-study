["import heapq\n\ndef value(l, parts):\n    len1 = l // parts\n    len2 = len1 + 1\n    cnt2 = l % parts\n    cnt1 = parts - cnt2\n    return cnt1 * len1 * len1 + cnt2 * len2 * len2\n\ndef solve(n, k, a):\n    pq = []\n    tot = 0\n    for i in range(n):\n        tot += a[i] * a[i]\n        heapq.heappush(pq, (-value(a[i], 1) + value(a[i], 2), a[i], 2))\n    for i in range(k - n):\n        temp = heapq.heappop(pq)\n        tot += temp[0]\n        (a, b) = (temp[1], temp[2])\n        heapq.heappush(pq, (-value(a, b) + value(a, b + 1), a, b + 1))\n    return tot\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))", "import heapq\n\ndef value(l, parts):\n    len1 = l // parts\n    len2 = len1 + 1\n    cnt2 = l % parts\n    cnt1 = parts - cnt2\n    return cnt1 * len1 * len1 + cnt2 * len2 * len2\n\ndef solve(n, k, a):\n    total = 0\n    pq = []\n    for i in range(n):\n        total += a[i] * a[i]\n        heapq.heappush(pq, (-1 * value(a[i], 1) + value(a[i], 2), a[i], 2))\n    for i in range(k - n):\n        temp = heapq.heappop(pq)\n        total += temp[0]\n        (a, b) = (temp[1], temp[2])\n        heapq.heappush(pq, (-value(a, b) + value(a, b + 1), a, b + 1))\n    return total\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve(n, k, a))", "from heapq import *\n(n, k) = map(int, input().split(' '))\n\ndef val(l, nums):\n    unit = l // nums\n    extra = l - unit * nums\n    return (nums - extra) * unit * unit + extra * (unit + 1) * (unit + 1)\npq = []\narr = list(map(int, input().split(' ')))\ntotal = 0\nfor x in range(n):\n    total += arr[x] * arr[x]\n    heappush(pq, (-val(arr[x], 1) + val(arr[x], 2), arr[x], 2))\nfor x in range(k - n):\n    temp = heappop(pq)\n    total += temp[0]\n    (a, b) = (temp[1], temp[2])\n    heappush(pq, (-val(a, b) + val(a, b + 1), a, b + 1))\nprint(total)", "from sys import stdin\nfrom heapq import heappush as push, heappop as pop, heapify\n(n, k) = map(int, stdin.readline().split())\nq = [int(x) for x in stdin.readline().split()]\n\ndef f(l, p):\n    base = l // p\n    leftover = l - base * p\n    return (p - leftover) * base * base + leftover * (base + 1) * (base + 1)\ncarrots = []\nfor carrot in q:\n    push(carrots, (-(f(carrot, 1) - f(carrot, 2)), carrot, 1))\nfor _ in range(k - n):\n    tmp = pop(carrots)\n    carrot = tmp[1]\n    cuts = tmp[2] + 1\n    push(carrots, (-(f(carrot, cuts) - f(carrot, cuts + 1)), carrot, cuts))\nprint(sum((f(y, z) for (x, y, z) in carrots)))", "import heapq\n\ndef f(length, count):\n    (u, v) = divmod(length, count)\n    return (count - v) * u ** 2 + v * (u + 1) ** 2\n\ndef main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = sum((v ** 2 for v in a))\n    b = [(-f(v, 1) + f(v, 2), v, 1) for v in a]\n    heapq.heapify(b)\n    for i in range(k - n):\n        (dif, v, count) = heapq.heappop(b)\n        res += dif\n        heapq.heappush(b, (-f(v, count + 1) + f(v, count + 2), v, count + 1))\n    print(res)\n    return\nmain()", "import heapq\n\ndef f(length, count):\n    (u, v) = divmod(length, count)\n    return (count - v) * u ** 2 + v * (u + 1) ** 2\n\ndef main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = sum((v ** 2 for v in a))\n    b = [(-f(v, 1) + f(v, 2), v, 1) for v in a]\n    heapq.heapify(b)\n    for i in range(k - n):\n        (dif, v, count) = heapq.heappop(b)\n        res += dif\n        heapq.heappush(b, (-f(v, count + 1) + f(v, count + 2), v, count + 1))\n    print(res)\n    return\nmain()", "from heapq import *\n(n, k) = map(int, input().split(' '))\n\ndef val(l, nums):\n    unit = l // nums\n    extra = l - unit * nums\n    return (nums - extra) * unit * unit + extra * (unit + 1) * (unit + 1)\npq = []\narr = list(map(int, input().split(' ')))\ntotal = 0\nfor x in range(n):\n    total += arr[x] * arr[x]\n    heappush(pq, (-val(arr[x], 1) + val(arr[x], 2), arr[x], 2))\nfor x in range(k - n):\n    temp = heappop(pq)\n    total += temp[0]\n    (a, b) = (temp[1], temp[2])\n    heappush(pq, (-val(a, b) + val(a, b + 1), a, b + 1))\nprint(total)", "import heapq\n\ndef time(l, p):\n    (q, r) = divmod(l, p)\n    return (p - r) * q ** 2 + r * (q + 1) ** 2\n\ndef f(l, p):\n    return time(l, p + 1) - time(l, p)\n(n, k) = map(int, input().split())\na = [int(i) for i in input().split()]\nsplits = [1] * n\nqueue = [(f(a_i, splits[i]), i) for (i, a_i) in enumerate(a)]\nheapq.heapify(queue)\ntotal = sum((a_i * a_i for a_i in a))\nfor _ in range(k - n):\n    (f_i, i) = heapq.heappop(queue)\n    splits[i] += 1\n    total += f_i\n    heapq.heappush(queue, (f(a[i], splits[i]), i))\nprint(total)", "from heapq import heapify, heappop, heappush\n\ndef getCost(num, k):\n    part = num // k\n    big = num % k\n    small = k - big\n    return small * part * part + big * (part + 1) * (part + 1)\n(n, k) = map(int, input().split())\nls = list(map(int, input().split()))\nar = []\nans = 0\nfor i in range(n):\n    ans += ls[i] * ls[i]\n    diff = getCost(ls[i], 1) - getCost(ls[i], 2)\n    ar.append([-diff, ls[i], 1])\nheapify(ar)\ni = 0\nwhile i < k - n:\n    elem = heappop(ar)\n    ans -= -elem[0]\n    nxt = [-1 * (getCost(elem[1], elem[2] + 1) - getCost(elem[1], elem[2] + 2)), elem[1], elem[2] + 1]\n    heappush(ar, nxt)\n    i += 1\nprint(ans)", "from heapq import *\n(n, k) = map(int, input().split(' '))\nls = []\na = list(map(int, input().split(' ')))\ntot = 0\n\ndef fun(l, nums):\n    std = l // nums\n    ext = l - std * nums\n    return (nums - ext) * std ** 2 + ext * (std + 1) ** 2\nfor i in range(n):\n    tot += a[i] ** 2\n    heappush(ls, (-fun(a[i], 1) + fun(a[i], 2), a[i], 2))\nfor i in range(k - n):\n    temp = heappop(ls)\n    tot += temp[0]\n    x = temp[1]\n    y = temp[2]\n    heappush(ls, (-fun(x, y) + fun(x, y + 1), x, y + 1))\nprint(tot)", "import sys\nfrom heapq import *\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n\n    def val(l, nums):\n        unit = l // nums\n        extra = l - unit * nums\n        return (nums - extra) * pow(unit, 2) + extra * pow(unit + 1, 2)\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    pq = []\n    res = 0\n    for i in range(n):\n        res += pow(A[i], 2)\n        heappush(pq, (-val(A[i], 1) + val(A[i], 2), A[i], 2))\n    for _ in range(k - n):\n        temp = heappop(pq)\n        res += temp[0]\n        (a, b) = (temp[1], temp[2])\n        heappush(pq, (-val(a, b) + val(a, b + 1), a, b + 1))\n    print(res)\nresolve()", "from heapq import *\n(n, k) = map(int, input().split(' '))\nls = []\na = list(map(int, input().split(' ')))\ntot = 0\n\ndef fun(l, nums):\n    std = l // nums\n    ext = l - std * nums\n    return (nums - ext) * std ** 2 + ext * (std + 1) ** 2\nfor i in range(n):\n    tot += a[i] ** 2\n    heappush(ls, (-fun(a[i], 1) + fun(a[i], 2), a[i], 2))\nfor i in range(k - n):\n    temp = heappop(ls)\n    tot += temp[0]\n    x = temp[1]\n    y = temp[2]\n    heappush(ls, (-fun(x, y) + fun(x, y + 1), x, y + 1))\nprint(tot)", "import heapq\n\ndef sum_sqaure(a, k):\n    (q, r) = divmod(a, k)\n    return q ** 2 * (k - r) + (q + 1) ** 2 * r\n\ndef diff(a, k):\n    return sum_sqaure(a, k + 1) - sum_sqaure(a, k)\n(n, k) = map(int, input().split())\nnums = list(map(int, input().split()))\ncurr = sum((sum_sqaure(a, 1) for a in nums))\nQ = [(diff(a, 1), a, 1) for a in nums]\nheapq.heapify(Q)\nfor __ in range(k - n):\n    (d, a, i) = heapq.heappop(Q)\n    curr += d\n    heapq.heappush(Q, (diff(a, i + 1), a, i + 1))\nprint(curr)"]