["from math import sqrt\n\ndef Solve():\n    ns = []\n    for t in range(int(input())):\n        ns.append(int(input()))\n    for n in ns:\n        if n > 1:\n            min_ = 9999999999999999999\n            i = 1\n            for i in range(int(sqrt(n)), n):\n                if i + n / i < min_:\n                    min_ = i + n / i\n                else:\n                    break\n            if int(min_) - min_ < 0:\n                print(int(min_) - 1)\n            else:\n                print(int(min_ - 2))\n        else:\n            print(0)\nSolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        r = int(n ** 0.5)\n        s = 2 * r - 1\n        if n == r ** 2:\n            s -= 1\n        elif n > r + r ** 2:\n            s += 1\n        print(s)", "from math import sqrt\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    mid = int(sqrt(n))\n    ans = n\n    for i in range(max(1, mid - 5), min(n, mid + 5) + 1):\n        rem = n % i\n        tot = i - 1 + n // i - 1\n        if rem > 0:\n            tot += 1\n        ans = min(ans, tot)\n    print(ans)", "import math\n\ndef increaseAndCopy(n):\n    if n == 1:\n        return 0\n    p = math.ceil(math.sqrt(n))\n    minOperations = float('inf')\n    for x in range(max(1, p - 5), p + 5):\n        operations = x - 1 + math.ceil((n - x) / x)\n        if operations < minOperations:\n            minOperations = operations\n    return minOperations\nt = int(input())\nfinal = []\nfor _ in range(t):\n    final.append(increaseAndCopy(int(input())))\nfor _ in range(t):\n    print(final[_])", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    m = ceil(sqrt(n))\n    step = m - 1\n    a = ceil(n / m)\n    steps = step + (a - 1)\n    print(steps)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = int(n ** 0.5)\n    h = k - 1\n    if n % k == 0:\n        h += n // k - 1\n    else:\n        h += n // k\n    print(h)", "import math\n\ndef solution():\n    n = int(input())\n    for i in range(0, n):\n        num = int(input())\n        sqrt = math.sqrt(num)\n        pairs = [[math.floor(sqrt), math.floor(sqrt)], [math.floor(sqrt), math.ceil(sqrt)], [math.ceil(sqrt), math.ceil(sqrt)]]\n        min_ = math.inf\n        for pair in pairs:\n            if pair[0] * pair[1] >= num:\n                min_ = min(min_, pair[0] + pair[1] - 2)\n        print(min_)\nsolution()", "def f(x):\n    sq = x ** 0.5\n    isq = int(sq)\n    bel = isq ** 2\n    if sq % 1 == 0:\n        sub = 2\n    elif x <= bel + isq:\n        sub = 1\n    else:\n        sub = 0\n    if x == 1:\n        return 0\n    else:\n        return 2 * isq - sub\nn = int(input())\nL = [int(input()) for i in range(n)]\nfor x in L:\n    print(f(x))", "from math import ceil, sqrt\nt = int(input())\nfor t_ in range(t):\n    n = int(input())\n    print(ceil(2 * sqrt(n) - 2))", "import math\ntests = int(input())\nfor _ in range(tests):\n    m = int(input())\n    sqt = int(math.sqrt(m))\n    res = sqt + m // sqt - 2 + (1 if m % sqt else 0)\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sq = int(math.sqrt(n))\n    d = n // sq\n    ans = sq - 1 + d - 1\n    if n % sq:\n        ans += 1\n    print(ans)", "from math import sqrt\n\ndef Solve():\n    for t in range(int(input())):\n        n = int(input())\n        if n > 1:\n            min_ = 9999999999999999999\n            i = 1\n            for i in range(int(sqrt(n)), n):\n                if i + n / i < min_:\n                    min_ = i + n / i\n                else:\n                    break\n            if int(min_) - min_ < 0:\n                print(int(min_) - 1)\n            else:\n                print(int(min_ - 2))\n        else:\n            print(0)\nSolve()", "import math\nt = int(input())\nfor i in range(1, t + 1):\n    n = float(input())\n    x = math.ceil(2 * math.sqrt(n) - 2)\n    print(x)", "from math import *\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    print(ceil((m ** 0.5 - 1) * 2))", "for _ in range(int(input())):\n    n = int(input())\n    sq = int(n ** 0.5)\n    print((n + sq - 1) // sq + sq - 2)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    sqrt = int(math.ceil(math.sqrt(n)))\n    ans = sqrt - 1 + (int(math.ceil(n / sqrt)) - 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        r = int(n ** 0.5)\n        if n % r == 0:\n            ans = n // r - 1 + (r - 1)\n        else:\n            ans = n // r + (r - 1)\n        print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    temp = int(math.sqrt(n))\n    if n > temp * (temp + 1):\n        print(temp * 2)\n    elif n > temp * temp:\n        print(temp * 2 - 1)\n    else:\n        print(temp * 2 - 2)", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt\nfor test in range(int(input())):\n    n = int(input())\n    answer = float('inf')\n    t = sqrt(n)\n    for i in range(-5, 6, 1):\n        t2 = int(t - i)\n        if t2 > n or t2 < 1:\n            continue\n        answer = min(answer, t2 - 2 + (n + t2 - 1) // t2)\n    print(answer)", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\n\ndef solve(__=1):\n    for _ in range(__):\n        n = inp()\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(1)\n        else:\n            t = ceil(sqrt(n))\n            print(t + (t if t * (t - 1) < n else t - 1) - 2)\nsolve(inp())", "def round_up(x):\n    if x % 1 == 0:\n        return int(x)\n    else:\n        return int(x // 1 + 1)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = round_up(2 * n ** 0.5 - 2)\n    print(answer)", "import math\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    if (math.sqrt(n) // 1) ** 2 == n:\n        print(int(2 * math.sqrt(n)) - 2)\n    else:\n        print(int(2 * math.sqrt(n)) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    elif n == 3:\n        print(2)\n    else:\n        a = int(n ** 0.5)\n        c = 2 * (a - 1) - 1\n        if n == a ** 2:\n            c += 1\n        elif n <= a ** 2 + a:\n            c += 2\n        else:\n            c += 3\n        print(c)", "import math\nt = int(input())\ncases = []\nfor i in range(t):\n    n = int(input())\n    cases.append(n)\nfor n in cases:\n    lower = round(math.sqrt(n))\n    upper = math.ceil(math.sqrt(n))\n    total = upper + lower\n    print(total - 2)", "import math\nCASES = int(input())\nfor _ in range(CASES):\n    n = int(input())\n    k = math.ceil(n ** 0.5)\n    inc = k - 1\n    y = math.ceil(n / k)\n    copy = y - 1\n    print(inc + copy)", "import math\nfor _ in 'A' * int(input()):\n    n = int(input())\n    m = math.ceil(math.sqrt(n))\n    k = math.floor(math.sqrt(n))\n    print(m + math.ceil(n / m) - 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = math.ceil(math.sqrt(n))\n    y = math.ceil(n / x)\n    print(x + y - 2)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    b = ceil(pow(n, 0.5))\n    a = ceil(n / b)\n    ans = a + b - 2\n    print(ans)", "n = int(input())\n\ndef sqrt(x):\n    return x ** (1 / 2)\nfor i in range(0, n):\n    x = int(input())\n    tmp = int(sqrt(x - 1)) + 1\n    print(tmp + (x - 1) // tmp - 1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        (i, d) = divmod(math.sqrt(n), 1)\n        if d == 0:\n            print(int((math.sqrt(n) * 2 - 2) // 1))\n        else:\n            print(int((math.sqrt(n) * 2 - 1) // 1))", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        x = sqrt(n)\n        x = int(x)\n        if n % x == 0:\n            print(n // x - 1 + (x - 1))\n        else:\n            print(n // x + (x - 1))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = math.floor(math.sqrt(n))\n    print(x - 1 + math.ceil((n - x) / x))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil((n ** 0.5 - 1) * 2))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = int(n ** 0.5)\n    print(a + int(n / a) + 1 * (n % a > 0) - 2)", "import math\n\ndef ceil(a, b):\n    return -(-a // b)\n\ndef answer(n):\n    sqrtn = int(math.sqrt(n))\n    breakeven = sqrtn * (sqrtn + 1)\n    if n > breakeven:\n        num_steps = sqrtn + 1 - 1\n        num_steps += ceil(n, sqrtn + 1) - 1\n    else:\n        num_steps = sqrtn - 1\n        num_steps += ceil(n, sqrtn) - 1\n    return num_steps\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        print(answer(n))\n        t -= 1\n    return\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil(math.sqrt(n) * 2 - 2))", "from math import ceil\nfor test in range(int(input())):\n    n = int(input())\n    ans = int(n ** 0.5) - 1\n    ans = ans + ceil((n - (ans + 1)) / (ans + 1))\n    print(ans)", "from math import ceil\nn = input()\nfor x in range(int(n)):\n    num = int(input())\n    mosse = ceil(num ** 0.5 - 0.5) - 1\n    mosse *= 2\n    if ceil(num ** 0.5 - 0.5) * ceil(num ** 0.5 - 0.5) < int(num):\n        mosse += 1\n    print(mosse)", "for _ in range(int(input())):\n    n = int(input())\n    k = list()\n    for i in range(max(int(n ** (1 / 2)) - 5, 1), int(n ** (1 / 2)) + 6):\n        k.append(i - 1 + (n - 1) // i)\n    print(min(k))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    x = 2 * (math.sqrt(n) - 1)\n    if x - int(x) == 0:\n        print(int(x))\n    else:\n        print(int(x) + 1)", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    q = math.sqrt(n)\n    r = q - 1 + math.ceil((n - q) / q)\n    print(round(r))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        temp = int(math.sqrt(n))\n        if n > temp * (temp + 1):\n            print(temp * 2)\n        elif n > temp * temp:\n            print(temp * 2 - 1)\n        else:\n            print(temp * 2 - 2)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        temp = int(math.sqrt(n))\n        if n > temp * (temp + 1):\n            print(temp * 2)\n        elif n > temp * temp:\n            print(temp * 2 - 1)\n        else:\n            print(temp * 2 - 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        p1 = int(math.sqrt(n - 1))\n        p2 = p1 + 1\n        ans = min(p2 + (n - 1) // p2 - 1, p1 + (n - 1) // p1 - 1)\n        print(ans)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    index = int(math.sqrt(n))\n    if n > index * (index + 1):\n        print(index * 2)\n    elif n > index * index:\n        print(index * 2 - 1)\n    else:\n        print(index * 2 - 2)", "for t in range(int(input())):\n    n = int(input())\n    print(int(n ** 0.5) - 2 + n // int(n ** 0.5) + int(n % int(n ** 0.5) != 0))", "import math\nfor i in range(0, int(input())):\n    n = int(input())\n    x1 = math.floor(pow(n, 0.5)) - 1\n    x2 = math.ceil(pow(n, 0.5)) - 1\n    if (x1 + 1) * (x2 + 1) < n:\n        x2 += 1\n    print(x1 + x2)", "t = int(input())\n\ndef f(k):\n    r = k // 2\n    return k * r + k - r * r + 1\nfor _ in range(t):\n    n = int(input())\n    lo = -1\n    hi = n\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if f(mid) < n:\n            lo = mid\n        else:\n            hi = mid\n    print(hi)", "import math\nfor i in range(int(input())):\n    number = int(input())\n    upper_limit = math.ceil(number ** (1 / 2))\n    if upper_limit > 25:\n        (bl, al) = (upper_limit - 6, upper_limit + 6)\n    else:\n        bl = 1\n        if upper_limit + 6 > number:\n            al = upper_limit + 1\n        else:\n            al = upper_limit + 6\n    answers = []\n    for n in range(bl, al):\n        answers.append(n - 1 + math.ceil((number - n) / n))\n    print(min(answers))", "import math\nimport sys\nt = int(sys.stdin.readline())\n\ndef check(x):\n    return x ** 2\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    l = 0\n    r = n\n    while l <= r:\n        mid = (l + r) // 2\n        if check(mid) <= n:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if r == 0:\n        print(0)\n    else:\n        print((r - 1) * 2 + math.ceil((n - r * r) / r))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil((n ** 0.5 - 1) * 2))", "import math\n\ndef func(n):\n    return int(math.floor(n / 2) * math.ceil(n / 2) + 1)\nfor _ in range(int(input())):\n    n = int(input())\n    sn = int(math.sqrt(n))\n    start = max(1, sn - 5)\n    end = sn + 5\n    ans = math.inf\n    for i in range(start, end):\n        temp = i - 1 + math.ceil((n - i) / i)\n        ans = min(ans, temp)\n    print(ans)", "import math\n\ndef sovle(n):\n    a = math.floor(math.sqrt(n))\n    b = math.ceil(n / a) - 1\n    print(b + a - 1)\nfor _ in range(int(input())):\n    n = int(input())\n    sovle(n)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = max(int(n ** 0.5) - 2, 0)\n    ans = n\n    for i in range(m, m + 5):\n        for j in range(m, m + 5):\n            if (1 + i) * (1 + j) >= n:\n                ans = min(ans, i + j)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    a = int(n ** (1 / 2) * 2 - 2)\n    if n ** (1 / 2) % 1 != 0:\n        a += 1\n    print(a)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('0')\n        continue\n    x = math.sqrt(n)\n    n = math.modf(x)\n    y = math.floor(x)\n    min = 2 * y\n    if n[0] == 0:\n        min -= 2\n    elif n[0] < 0.5:\n        min -= 1\n    print(min)", "T = int(input())\nans = ''\nfor _ in range(T):\n    n = int(input())\n    l = 0\n    r = 63244\n    while l < r:\n        m = (l + r) // 2\n        t = m * m // 4 + m + 1\n        if n == t:\n            l = m\n            r = m\n        elif n > t:\n            l = m + 1\n        else:\n            r = m\n    ans += str(l) + '\\n'\nprint(ans)", "import math\nfor i in range(int(input())):\n    a = int(input())\n    b = math.sqrt(a) - 1\n    print(math.ceil(b * 2))", "import math\n\ndef increaseAndCpy(n):\n    nroot = math.floor(math.sqrt(n))\n    if nroot * nroot >= n:\n        print(2 * nroot - 2)\n        return\n    elif (nroot + 1) * nroot >= n:\n        print(2 * nroot - 1)\n        return\n    else:\n        print(2 * nroot)\n        return\ntc = int(input())\nfor _ in range(0, tc):\n    n = int(input())\n    increaseAndCpy(n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    res = math.ceil((math.sqrt(n) - 1) * 2)\n    print(res)", "from math import ceil\nfor _ in range(0, int(input())):\n    print(ceil(int(input()) ** 0.5 * 2 - 2))", "import math\nn = input()\nlista = []\n\ndef upper_bound(x):\n    if x - 0.5 >= int(x):\n        return True\n    return False\nfor x in range(int(n)):\n    lista.append(input())\nfor x in lista:\n    if int(x) == 1:\n        print(0)\n    else:\n        num = math.sqrt(int(x))\n        if upper_bound(num):\n            num = int(num) + 1\n        else:\n            num = int(num)\n        mosse = num - 1\n        appoggio = num\n        num = num * num\n        mosse *= 2\n        if num < int(x):\n            num += appoggio\n            mosse += 1\n        print(mosse)", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        root = int(n ** 0.5)\n        temp = int(n / root)\n        if n % root == 0:\n            print(-2 + root + temp)\n        else:\n            print(-1 + root + temp)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    print(ceil((n ** 0.5 - 1) * 2))", "from math import ceil\nfor i in range(int(input())):\n    n = int(input())\n    print(ceil((n ** 0.5 - 1) * 2))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    x = int(math.sqrt(n))\n    if x * x == n:\n        print(2 * (x - 1))\n    elif n <= x * (x + 1):\n        print(2 * x - 1)\n    else:\n        print(2 * x)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    t = n - 1\n    for d in range(max(0, int(math.sqrt(n)) - 10), int(math.sqrt(n)) + 10):\n        x = d + (n + d) // (d + 1) - 1\n        t = min(t, x)\n    print(t)", "import math\n\ndef countOps(num: int) -> int:\n    left_border = math.floor(math.sqrt(n))\n    right_border = left_border + 1\n    t = left_border if n - left_border ** 2 < right_border ** 2 - n else right_border\n    ops = t - 1 + (math.ceil(n / t) - 1)\n    return ops\ntests = int(input())\nans = []\nfor i in range(tests):\n    n = int(input())\n    ans.append(countOps(n))\nprint(*ans, sep='\\n')", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    steps = ceil(2 * (-1 + n ** 0.5))\n    print(steps)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    res = float('inf')\n    x = int(math.sqrt(n))\n    for i in range(-5, 6):\n        if x - i > 0:\n            y = n / (x - i + 1) - 1\n            if y != int(y):\n                y += 1\n            res = min(res, x - i + int(y))\n    print(res)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    print(int(math.sqrt(n)) + math.ceil(n / int(math.sqrt(n))) - 2)", "T = int(input())\nres = list()\nfor _ in range(T):\n    n = int(input())\n    if n == 1:\n        res.append(0)\n        continue\n    root = int(n ** (1 / 2))\n    ans = root - 1\n    a = int((n - root) / root)\n    if (n - root) % root != 0:\n        ans += 1\n    res.append(ans + a)\nfor i in res:\n    print(i)", "import math\nt = input()\nt = int(t)\nfor i in range(t):\n    n = input()\n    n = int(n)\n    x = math.sqrt(n)\n    if x.is_integer():\n        x = int(x)\n    else:\n        x = int(x) + 1\n    if n % x != 0:\n        count = n // x\n    else:\n        count = n // x - 1\n    count = count + x - 1\n    print(count)", "import math\nfor _ in range(int(input())):\n    x = int(input())\n    f = x ** 0.5\n    c = math.floor(math.ceil(2 * f) - 2)\n    print(c)", "from math import sqrt, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    maxi = ceil(sqrt(n))\n    if n == 1:\n        print(0)\n        continue\n    if n == 2:\n        print(1)\n        continue\n    print(maxi - 1 + (n // maxi if n % maxi else n // maxi - 1))", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        mx = n\n        c = 0\n        for i in range(max(2, round(math.sqrt(n)) - 2), round(math.sqrt(n)) + 1):\n            tem = i - 1 + math.ceil((n - i) / i)\n            mx = min(tem, mx)\n        print(mx)", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        mx = n\n        c = 0\n        for i in range(max(2, round(math.sqrt(n))), round(math.sqrt(n)) + 1):\n            tem = i - 1 + math.ceil((n - i) / i)\n            mx = min(tem, mx)\n        print(mx)", "from math import ceil\nn = int(input())\nfor _ in range(n):\n    n = int(input())\n    print(ceil((n ** 0.5 - 1) * 2))", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        m = sqrt(n)\n        print(ceil(m) + round(m) - 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.ceil(math.sqrt(n))\n    print(a - 1 + math.ceil(n / a) - 1)", "t = int(input())\nlist1 = []\nfor i in range(t):\n    n = int(input())\n    d = n - 1\n    a = int(n ** 0.5)\n    if n % a == 0:\n        c = int(n / a + a - 2)\n        list1.append(c)\n    else:\n        c = int(min(n / a + a - 1, n / (a + 1) + a))\n        list1.append(c)\nfor i in list1:\n    print(i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        sq = int(n ** (1 / 2))\n        ans = sq - 1\n        temp_sq = sq + 1\n        if sq * sq >= n:\n            ans = ans + sq - 1\n        elif sq * temp_sq >= n:\n            ans = ans + sq\n        else:\n            ans = ans + sq + 1\n        print(ans)", "t = int(input())\nk = [[0] for i in range(t)]\na = [[0] for i in range(t)]\nfor i in range(t):\n    a[i] = int(input())\n    b0 = a[i] ** (1 / 2) // 1\n    if b0 * b0 >= a[i]:\n        k[i] = 2 * b0 - 2\n    elif a[i] == 1:\n        k[i] = 0\n    elif b0 * (b0 + 1) >= a[i]:\n        k[i] = 2 * b0 - 1\n    else:\n        k[i] = 2 * b0\nfor i in range(t):\n    print(int(k[i]))", "import math\nn = int(input())\nli = []\nfor i in range(n):\n    li.append(int(input()))\nfor i in li:\n    t = math.sqrt(i)\n    if t % 1 == 0:\n        print(int(2 * t - 2))\n    elif t - math.floor(t) >= 0.5:\n        print(2 * math.ceil(t) - 2)\n    else:\n        print(2 * math.ceil(t) - 3)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = math.sqrt(n)\n    if math.ceil(s) == math.floor(s):\n        s = int(s)\n        print(2 * (s - 1))\n    else:\n        s = math.floor(s)\n        if n <= s * (s + 1):\n            print(2 * s - 1)\n        else:\n            print(2 * s)", "import math\nfor i in range(int(input())):\n    m = int(input())\n    i = math.ceil(math.sqrt(m))\n    print(int(i + (m + i - 1) / i - 2))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        x = pow(n, 0.5)\n        if x.is_integer():\n            print(int(2 * x - 2))\n        else:\n            print(int(2 * x - 1))", "from math import *\nfor s in [*open(0)][1:]:\n    print(ceil(2 * sqrt(int(s))) - 2)", "import math\nfor i in [0] * int(input()):\n    n = int(input())\n    y = math.sqrt(n)\n    a = math.floor(y)\n    if a * a >= n:\n        count = 2 * a - 2\n    elif (a + 1) * a >= n:\n        count = 2 * a - 1\n    else:\n        count = 2 * a\n    print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil((n ** 0.5 - 1) * 2))", "def hi(N):\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3 or N == 4:\n        return 2\n    p = int(N ** 0.5)\n    n = p - 1\n    k = p - 1\n    yy = N - p ** 2\n    dd = yy // p\n    rr = yy % p\n    k += dd\n    if rr == 0:\n        return n + k\n    else:\n        return n + k + 1\nt = int(input())\nb = []\nfor i in range(t):\n    p = int(input())\n    b.append(hi(p))\nfor i in range(len(b)):\n    print(b[i])", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        p = math.ceil(math.sqrt(n))\n        ans = 0\n        ans += p\n        ans += math.ceil(n / p)\n        print(ans - 2)\n    t -= 1", "import math\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    nr = math.floor(math.sqrt(n))\n    if nr * nr >= n:\n        print(int(2 * nr - 2))\n    elif nr * (nr + 1) >= n:\n        print(int(2 * nr - 1))\n    else:\n        print(int(2 * nr))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    ans = int(n ** 0.5)\n    print(ans - 1 + ceil(n / ans) - 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    x = int(input())\n    ans = 100000.0\n    for i in range(max(1, int(x ** 0.5) - 1), int(x ** 0.5) + 1):\n        ans = min(ans, i - 1 + (x - 1) // i)\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n <= 1:\n        print(0)\n    else:\n        x = math.ceil(math.sqrt(n))\n        if (x - 1) * x >= n:\n            print((x - 1) * 2 - 1)\n        else:\n            print((x - 1) * 2)"]