["from math import gcd\nfor _ in range(int(input())):\n    res = 0\n    n = int(input())\n    nums = []\n    one = 0\n    even = 0\n    for i in input().split():\n        i = int(i)\n        if i == 0:\n            continue\n        if i == 1:\n            one += 1\n        elif i % 2 == 0:\n            even += 1\n        else:\n            nums.append(i)\n    n = len(nums)\n    res += one * even\n    del one\n    res += even * n\n    res += sum(range(even))\n    if len(nums) > 1:\n        while nums:\n            num = nums.pop()\n            res += len([1 for i in nums if gcd(num, i) > 1])\n    print(res)", "def ff(m):\n    d = 3\n    r = set()\n    dd = round(pow(m, 0.5)) + 1\n    while m - 1 and d < dd:\n        if m % d == 0:\n            r.add(d)\n            m = m // d\n            dd = round(pow(m, 0.5)) + 1\n        else:\n            d += 2\n    if m != 1:\n        r.add(m)\n    return r\nfor _ in range(int(input())):\n    res = 0\n    n = int(input())\n    nums = []\n    one = 0\n    even = 0\n    for i in input().split():\n        i = int(i)\n        if i == 0:\n            continue\n        if i == 1:\n            one += 1\n        elif i % 2 == 0:\n            even += 1\n        else:\n            nums.append(ff(i))\n    n = len(nums)\n    res += one * even\n    del one\n    res += even * n\n    res += sum(range(even))\n    if len(nums) > 1:\n        while nums:\n            num = nums.pop()\n            res += sum([1 for i in nums if num & i])\n    print(res)", "from collections import Counter\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    arr = [int(char) for char in input().split()]\n    (even, odd) = ([], [])\n    for a in arr:\n        if a & 1:\n            odd.append(a)\n        else:\n            even.append(a)\n    (E, O) = (len(even), len(odd))\n    ans = 0\n    for j in range(1, E + 1):\n        ans += n - j\n    for (i, num) in enumerate(odd):\n        for j in range(i + 1, O):\n            if math.gcd(num, odd[j]) > 1:\n                ans += 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "from math import gcd\nfor test_case in range(int(input())):\n    n = int(input())\n    l = sorted(map(int, input().split()), key=lambda x: x & 1)\n    print(sum((len([x for x in l[i + 1:] if gcd(l[i], 2 * x) > 1]) for i in range(n))))", "from math import gcd\n\ndef check(l2, p):\n    sum1 = 0\n    for j in l2:\n        if gcd(p, 2 * j) > 1:\n            sum1 += 1\n    return sum1\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    l3 = []\n    for i in l1:\n        if i % 2 == 0:\n            l2.append(i)\n        else:\n            l3.append(i)\n    l1 = l2 + l3\n    count = 0\n    for i in range(n):\n        if l1[i] % 2 == 0:\n            count += len(l1[i + 1:])\n        else:\n            p = check(l1[i + 1:], l1[i])\n            count += p\n    print(count)", "from math import gcd\nfor test_case in range(int(input())):\n    n = int(input())\n    l = sorted(map(int, input().split()), key=lambda x: x & 1)\n    print(sum((len([x for x in l[i + 1:] if gcd(l[i], 2 * x) > 1]) for i in range(n))))", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    lis = []\n    ans = 0\n    for i in map(int, input().split()):\n        if i & 1:\n            for j in lis:\n                if math.gcd(i, j) > 1:\n                    ans += 1\n            lis.append(i)\n    print(ans + len(lis) * (n - len(lis)) + (n - len(lis) - 1) * (n - len(lis)) // 2)", "from math import gcd\n\ndef main():\n    ans = ''\n    for _ in range(int(input())):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        how_many_even = 0\n        max_good_index_pair = 0\n        for (index, value) in enumerate(nums):\n            if value % 2 == 0:\n                max_good_index_pair += n - 1 - how_many_even\n                how_many_even += 1\n            else:\n                for (index2, value2) in enumerate(nums[index + 1:], start=index + 1):\n                    if value2 % 2 != 0 and gcd(value, value2) != 1:\n                        max_good_index_pair += 1\n        ans += f'{max_good_index_pair}\\n'\n    print(ans)\nmain()", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "import math\nfor Input in [*open(0)][2::2]:\n    L = sorted(map(int, Input.split()), key=lambda x: x % 2)\n    print(sum((1 < math.gcd(2 * x, y) for (i, x) in enumerate(L) for y in L[:i])))", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "import math\nf = lambda x: x % 2\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=f)\n    n = len(a)\n    k = n - sum(map(f, a))\n    b = a[k:]\n    print(k * (2 * n - k - 1) // 2 + sum((math.gcd(x, y) > 1 for (i, x) in enumerate(b) for y in b[:i])))", "import math as m\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        ns = list(map(int, input().split(' ')))\n        ns.sort(key=lambda x: x % 2)\n        good = 0\n        for i in range(n - 1):\n            if ns[i] % 2 == 0:\n                good += n - i - 1\n            else:\n                good += sum((m.gcd(ns[i], ns[j]) > 1 for j in range(i + 1, n)))\n        print(good)\nmain()", "from math import gcd\n\ndef print_sol(c, sol):\n    print('Case #{}: {}'.format(c, sol))\n\ndef rd_int():\n    return int(input())\n\ndef rd_str():\n    return input()\n\ndef rd_str_lst():\n    return input().split(' ')\n\ndef sp_str_lst():\n    return list(input())\n\ndef rd_int_lst():\n    return [int(i) for i in rd_str_lst()]\n\ndef sp_int_lst():\n    return [int(i) for i in sp_str_lst()]\n\ndef main():\n    t = rd_int()\n    for c in range(1, t + 1):\n        n = rd_int()\n        a = rd_int_lst()\n        even_count = 0\n        odd_numbers = []\n        for i in range(n):\n            if a[i] % 2 == 0:\n                even_count += 1\n            elif a[i] > 1:\n                odd_numbers.append(a[i])\n        ans = even_count / 2 * (2 * n - 1 - even_count)\n        for i in range(len(odd_numbers)):\n            for j in range(i + 1, len(odd_numbers)):\n                if gcd(odd_numbers[i], odd_numbers[j]) > 1:\n                    ans += 1\n        print(int(ans))\nmain()", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    lis = []\n    ans = 0\n    for i in map(int, input().split()):\n        if i & 1:\n            for j in lis:\n                if math.gcd(i, j) > 1:\n                    ans += 1\n            lis.append(i)\n    print(ans + n * (n - 1) // 2 - len(lis) * (len(lis) - 1) // 2)", "import math\nimport itertools\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    even = sum((1 for i in arr if i % 2 == 0))\n    pairs_from_even = 0\n    for i in range(1, even + 1):\n        pairs_from_even += n - i\n    odd = (i for i in arr if i % 2 == 1)\n    pairs_from_odd = 0\n    for (a, b) in itertools.combinations(odd, 2):\n        if math.gcd(a, b) > 1:\n            pairs_from_odd += 1\n    print(pairs_from_even + pairs_from_odd)", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "import sys\nfrom os import path\nimport math\nimport time\nfrom collections import defaultdict\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 8)\nMOD = 10 ** 9 + 7\nINT_MAX = 10 ** 9\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef test_case():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = list(map(int, input().split()))\n        count = 0\n        even = 0\n        odd = []\n        for i in range(n):\n            if s[i] % 2 == 0:\n                even += 1\n            else:\n                odd.append(s[i])\n        if even >= 1:\n            count = even * (even - 1) / 2 + even * len(odd)\n        for i in range(len(odd) - 1):\n            for j in range(i + 1, len(odd)):\n                if math.gcd(odd[i], odd[j]) > 1:\n                    count += 1\n        print(int(count))\ntest_case()", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\n\ndef get_int():\n    return int(input())\n\ndef get_list_ints():\n    return list(map(int, input().split()))\n\ndef get_char_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef get_tuple_ints():\n    return tuple(map(int, input().split()))\n\ndef print_iterable(p):\n    print(' '.join(map(str, p)))\nfrom math import gcd\n\ndef main():\n    t = get_int()\n    for i in range(t):\n        n = get_int()\n        a = get_list_ints()\n        temp = 0\n        c = 0\n        count = 0\n        for j in range(n):\n            if a[j] % 2 == 0:\n                temp = a[j]\n                a[j] = a[c]\n                a[c] = temp\n                c += 1\n        s = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if gcd(a[j], a[k] * 2) > 1:\n                    s += 1\n        print(s)\nmain()", "from math import gcd\n\ndef cal(n, a):\n    b = 0\n    a.sort(reverse=True)\n    l1 = []\n    l2 = []\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            l2.append(a[i])\n        else:\n            l1.append(a[i])\n    l2.extend(l1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(l2[i], l2[j] * 2) > 1:\n                b += 1\n    print(b)\nt = int(input())\nl1 = []\nl2 = []\nfor i in range(t):\n    n = int(input())\n    l1.append(n)\n    a = list(map(int, input().split()))\n    l2.append(a)\nfor i in range(len(l1)):\n    cal(l1[i], l2[i])", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "import math\n\ndef gcd1(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sol(n, arr):\n    oddarr = []\n    e = 0\n    for i in range(0, n):\n        if arr[i] % 2 == 0:\n            e += 1\n        else:\n            oddarr.append(arr[i])\n    result = n * (n - 1) // 2 - (n - e) * (n - e - 1) // 2\n    ans = 0\n    for i in range(0, len(oddarr)):\n        for j in range(i + 1, len(oddarr)):\n            if math.gcd(oddarr[i], oddarr[j]) > 1:\n                ans += 1\n    print(result + ans)\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    sol(n, arr)", "def solve():\n    n = int(input())\n    vsi = list(map(int, input().split()))\n    vsi.sort(key=lambda x: x % 2 == 0, reverse=True)\n    import math\n    o = 0\n    for (i, x) in enumerate(vsi):\n        for y in vsi[i + 1:]:\n            if math.gcd(x, 2 * y) > 1:\n                o += 1\n    return o\nt = int(input())\nfor x in range(t):\n    print(solve())", "from math import gcd\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = sorted(a, key=lambda x: x % 2)\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            cnt += gcd(b[i], 2 * b[j]) > 1\n    print(cnt)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math as m\nfor x in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    (aro, are) = ([], [])\n    ans = 0\n    for x in arr:\n        if int(x) % 2:\n            aro.append(int(x))\n        else:\n            are.append(int(x))\n    for x in range(len(aro) - 1):\n        for y in aro[x + 1:]:\n            ans += m.gcd(aro[x], y) > 1\n    (n, n1) = (len(arr), len(aro))\n    ans += n * (n - 1) // 2 - n1 * (n1 - 1) // 2\n    print(ans)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = 0\n    a = [int(x) for x in input().split()]\n    (p, b) = ([x for x in a if x % 2], [x for x in a if x % 2 == 0])\n    for (i, x) in enumerate(p):\n        for j in range(i + 1, len(p)):\n            if gcd(x, p[j]) > 1:\n                s += 1\n    print(s + len(b) * len(p) + len(b) * (len(b) - 1) // 2)", "from math import gcd\nfor _ in range(0, int(input())):\n    n = int(input())\n    v = map(int, input().split())\n    o = []\n    e = 0\n    for x in v:\n        if x % 2 == 0:\n            e += 1\n        else:\n            o.append(x)\n    o = sorted(o)\n    a = sum((i - 1 for i in range(n, n - e, -1)))\n    for x in range(0, len(o) - 1):\n        if o[x] == 1:\n            continue\n        for y in range(x + 1, len(o)):\n            if gcd(o[y], o[x]) > 2:\n                a += 1\n    print(a)", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "from math import gcd\n\ndef fun(ls, n):\n    even = []\n    rest = []\n    for i in ls:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            rest.append(i)\n    lt = even + rest\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(lt[i], 2 * lt[j]) > 1:\n                count += 1\n    print(count)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, n)", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sor = []\n    for x in arr:\n        if x % 2 == 0:\n            sor.append(x)\n    for x in arr:\n        if x % 2 != 0:\n            sor.append(x)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if math.gcd(sor[i], 2 * sor[j]) > 1:\n                ans += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    par = 0\n    impar = list()\n    res = 0\n    for i in a:\n        if i % 2 == 0:\n            par += 1\n        elif i == 1:\n            continue\n        else:\n            impar.append(i)\n    for i in range(par):\n        res += n - i - 1\n    for i in range(len(impar)):\n        for j in range(i + 1, len(impar)):\n            if gcd(impar[i], impar[j]) > 1:\n                res += 1\n    print(res)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    par = 0\n    impar = list()\n    res = 0\n    for i in a:\n        if i % 2 == 0:\n            par += 1\n        elif i == 1:\n            continue\n        else:\n            impar.append(i)\n    for i in range(par):\n        res += n - i - 1\n    for i in range(len(impar)):\n        for j in range(i + 1, len(impar)):\n            if gcd(impar[i], impar[j]) > 1:\n                res += 1\n    print(res)", "from math import gcd\nfor i in range(int(input())):\n    e = int(input())\n    nums = list(map(int, input().split()))\n    numsorted = []\n    for i in range(e):\n        if nums[i] % 2 == 0:\n            numsorted.append(nums[i])\n    numsorted.sort()\n    for i in range(e):\n        if nums[i] % 2 != 0:\n            numsorted.append(nums[i])\n    count = 0\n    for i in range(e):\n        for j in numsorted[i + 1:]:\n            if gcd(numsorted[i], j * 2) > 1:\n                count += 1\n    print(count)", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(case())\n\ndef case():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    odds = []\n    for num in a:\n        if num % 2:\n            odds.append(num)\n        else:\n            b.append(num)\n    return count_pair(b + odds)\n\ndef count_pair(a):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if math.gcd(a[i], a[j] * 2) > 1:\n                count += 1\n    return count\n\ndef is_gcd(a, b):\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return True\n    return False\nmain()", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = []\n    b = []\n    for v in map(int, input().split()):\n        if v % 2 == 0:\n            a.append(v)\n        else:\n            b.append(v)\n    a += b\n    r = 0\n    for i in range(n):\n        for j in range(i):\n            r += gcd(a[j], 2 * a[i]) > 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    answer = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.insert(0, a[i])\n        else:\n            b.append(a[i])\n    for i in range(n):\n        if b[i] % 2 == 0:\n            answer += n - i - 1\n        else:\n            for j in range(i + 1, n):\n                if math.gcd(b[i], 2 * b[j]) > 1:\n                    answer += 1\n    return answer\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "import math\n\ndef solve(N, A):\n    even = list(filter(lambda a: a & 1 == 0, A))\n    odd = list(filter(lambda a: a & 1 == 1, A))\n    even.sort()\n    odd.sort()\n    SA = even + odd\n    cnt = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if math.gcd(SA[i], 2 * SA[j]) > 1:\n                cnt += 1\n    print(cnt)\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    solve(N, A)", "import math\nt = int(input())\np = []\nfor _ in range(t):\n    n = int(input())\n    a = sorted([int(x) for x in input().split()], key=lambda x: (1 - (x & 1), x))\n    ret = 0\n    for i in range(n - 1):\n        ati = a[i] << 1\n        for j in range(i + 1, n):\n            if math.gcd(ati, a[j]) > 1:\n                ret += 1\n    p.append(ret)\nfor x in p:\n    print(x)", "from math import gcd\nfor _ in range(int(input())):\n    count = 0\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    u = list()\n    (e, o) = (0, 0)\n    for x in l:\n        if x % 2 == 0:\n            e = e + 1\n            u.insert(0, x)\n        else:\n            o = o + 1\n            u.append(x)\n    for i in range(e, n):\n        for j in range(i + 1, n):\n            if gcd(u[i], u[j]) > 1:\n                count = count + 1\n    count = count + o * e + int(e * (e - 1) / 2)\n    print(count)", "from math import gcd\nres = ''\nfor _ in range(int(input())):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    new_arr = [0] * n\n    (l, r) = (0, n - 1)\n    even = odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            new_arr[l] = i\n            l += 1\n            even += 1\n        else:\n            new_arr[r] = i\n            r -= 1\n            odd += 1\n    ans = 0\n    while even > 0:\n        ans += even - 1 + odd\n        even -= 1\n    for i in range(r + 1, n - 1):\n        for j in range(i + 1, n):\n            ans += gcd(new_arr[i], new_arr[j]) > 1\n    res += str(ans) + '\\n'\nprint(res)", "a = int(input())\nfrom math import gcd\nfor i in range(a):\n    e = 0\n    f = []\n    b = int(input())\n    c = input().split()\n    d = [int(i) for i in c]\n    for j in d:\n        if j % 2 == 0:\n            e += 1\n        else:\n            f.append(j)\n    l = 0\n    for k in range(b - e - 1):\n        for h in range(k + 1, b - e, 1):\n            if gcd(f[k], f[h]) != 1:\n                l += 1\n    print(int((b - e) * e + e * (e - 1) / 2 + l))", "import sys\nfrom math import *\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\n\ndef solve(n, arr):\n    (odd, even) = ([], [])\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            even.append(arr[i])\n        else:\n            odd.append(arr[i])\n    arr = sorted(even)[::-1] + sorted(odd)[::-1]\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(arr[i], 2 * arr[j]) > 1:\n                c += 1\n    print(c)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "from math import gcd\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(n ** 0.5) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\ncases = int(input())\nfor case in range(0, cases):\n    n = int(input())\n    array = [int(x) for x in input().split(' ')]\n    one_count = 0\n    prime_count = 0\n    even_count = 0\n    odd_count = 0\n    odd_array = []\n    for num in array:\n        if num == 1:\n            one_count += 1\n        elif num % 2 == 0:\n            even_count += 1\n        elif num % 2 != 0:\n            odd_count += 1\n            odd_array.append(num)\n    result = 0\n    for i in range(0, even_count):\n        result += n - i - 1\n    odd_array = sorted(odd_array, reverse=True)\n    i = 0\n    for num in odd_array:\n        i += 1\n        comp_array = odd_array[i:]\n        for comp in comp_array:\n            if gcd(num, 2 * comp) != 1:\n                result += 1\n    print(result)", "import math\nt = int(input())\np = []\nfor _ in range(t):\n    n = int(input())\n    a = sorted([int(x) for x in input().split()], key=lambda x: 1 - (x & 1))\n    ret = 0\n    for i in range(n - 1):\n        ati = a[i] << 1\n        for j in range(i + 1, n):\n            if math.gcd(ati, a[j]) > 1:\n                ret += 1\n    p.append(ret)\nfor x in p:\n    print(x)", "import math\nt = int(input())\np = []\nfor _ in range(t):\n    n = int(input())\n    a = sorted([int(x) for x in input().split()], key=lambda x: x & 1, reverse=True)\n    ret = 0\n    for i in range(n - 1):\n        ati = a[i] << 1\n        for j in range(i + 1, n):\n            if math.gcd(ati, a[j]) > 1:\n                ret += 1\n    p.append(ret)\nfor x in p:\n    print(x)", "from collections import defaultdict, Counter\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\nans_ = []\n\ndef solve():\n    for _ in range(nin()):\n        n = nin()\n        arr = read()\n        i = 0\n        for j in range(n):\n            if arr[j] % 2 == 0:\n                (arr[i], arr[j]) = (arr[j], arr[i])\n                i += 1\n        c = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                c += gcd(arr[i], 2 * arr[j]) > 1\n        ans_.append(c)\nsolve()\nfor i in ans_:\n    print(i)", "import math\ntrails = int(input())\nanswer_list = []\nfor x in range(trails):\n    n = int(input())\n    numbers = input().split(' ')\n    odds = []\n    even = []\n    ans = 0\n    for t in numbers:\n        use = int(t)\n        if use % 2 == 1:\n            odds.append(use)\n        else:\n            even.append(use)\n    while even != []:\n        d = even[0]\n        ans = ans + len(even) + len(odds) - 1\n        even.remove(d)\n    while odds != []:\n        d = odds[0]\n        if d == 1:\n            ans += 1\n        for a in odds:\n            gc = math.gcd(d, a)\n            if gc > 1:\n                ans += 1\n        ans -= 1\n        odds.remove(d)\n    answer_list.append(ans)\nfor g in answer_list:\n    print(g)", "from math import gcd\n\ndef fun(ls, n):\n    st = sorted(ls)[::-1]\n    even = []\n    rest = []\n    for i in ls:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            rest.append(i)\n    lt = even + rest\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(lt[i], 2 * lt[j]) > 1:\n                count += 1\n    print(count)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, n)", "import math\n\ndef solve(n, arr):\n    odd = []\n    even = 0\n    answer = 0\n    for a in arr:\n        if a % 2 == 0:\n            even += 1\n        else:\n            odd.append(a)\n    answer += even * n - even * (even + 1) // 2\n    len_odd = len(odd)\n    for i in range(len_odd):\n        for j in range(i + 1, len_odd):\n            answer += 1 if math.gcd(odd[i], odd[j]) > 1 else 0\n    return answer\n\ndef main():\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    print(solve(n, arr))\nt = int(input())\nwhile t > 0:\n    main()\n    t -= 1", "from math import gcd\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        array = list(map(int, input().split()))\n        odds = list()\n        even = list()\n        count = 0\n        for x in array:\n            if x & 1:\n                odds.append(x)\n            else:\n                even.append(x)\n        even += odds\n        for i in range(n):\n            for j in range(i + 1, n):\n                if gcd(even[i], 2 * even[j]) > 1:\n                    count += 1\n        print(count)\nmain()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    odds = []\n    for x in a:\n        if x % 2 == 0:\n            k += 1\n        else:\n            odds.append(x)\n    res = k * (k - 1) // 2 + k * len(odds)\n    for i in range(len(odds) - 1):\n        if odds[i] != 1:\n            for j in range(i + 1, len(odds)):\n                if gcd(odds[i], odds[j]) > 1:\n                    res += 1\n    print(res)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = []\n    odd = []\n    for item in a:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    even.sort(reverse=True)\n    odd.sort(reverse=True)\n    even.extend(odd)\n    good = 0\n    for (i, ai) in enumerate(even[:-1]):\n        result = [math.gcd(ai, 2 * aj) > 1 for aj in even[i + 1:]]\n        good += sum(result)\n    print(good)\n    t -= 1", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n\n    def key_sort(num):\n        return num % 2\n    a.sort(key=key_sort)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % 2 == 0 or math.gcd(a[i], a[j]) > 1:\n                ans += 1\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    ans = h = idx = 0\n    b = sorted(a, key=lambda x: x % 2)\n    for i in range(n):\n        if b[i] % 2 == 0:\n            ans += n - h - 1\n            h += 1\n            idx = i\n    if h == 0:\n        for i in range(len(b) - 1):\n            for j in range(i + 1, len(b)):\n                if gcd(b[i], b[j]) > 1:\n                    ans += 1\n        print(ans)\n    else:\n        for i in range(idx + 1, len(b) - 1):\n            for j in range(i + 1, len(b)):\n                if gcd(b[i], b[j]) > 1:\n                    ans += 1\n        print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    arr1 = []\n    a = n - 1\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            ans += a\n            a -= 1\n        else:\n            arr1.append(arr[i])\n    for i in range(len(arr1)):\n        for j in range(i + 1, len(arr1)):\n            if math.gcd(arr1[i], arr1[j]) > 1:\n                ans += 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    (e, o) = (0, 0)\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        t = a[i]\n        if t % 2 == 0:\n            e += 1\n        elif t == 1:\n            o += 1\n        else:\n            o += 1\n            b += [t]\n    f = 0\n    k = len(b)\n    for i in range(k):\n        for j in range(i + 1, k):\n            if math.gcd(b[i], b[j]) != 1:\n                f += 1\n    s = f + o * e + e * (e - 1) // 2\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (o, e) = ([], [])\n    cnt = 0\n    for i in l:\n        if i % 2 == 0:\n            e.append(i)\n        else:\n            o.append(i)\n    if len(o) == 0:\n        print(len(e) * (len(e) - 1) // 2)\n    else:\n        for i in range(len(o)):\n            for j in range(i + 1, len(o)):\n                if math.gcd(o[i], o[j]) > 1:\n                    cnt = cnt + 1\n        for i in range(n - 1, n - len(e) - 1, -1):\n            cnt = cnt + i\n        print(cnt)", "import sys\nfrom math import gcd, sqrt\nsys.setrecursionlimit(10 ** 5)\ninf = float('inf')\nen = lambda x: list(enumerate(x))\nii = lambda : int(input())\nr = lambda : map(int, input().split())\nrr = lambda : list(r())\n\ndef solve():\n    n = ii()\n    arr = rr()\n    brr = []\n    for i in arr:\n        if i % 2 == 0:\n            brr += (i,)\n    for i in arr:\n        if i % 2:\n            brr += (i,)\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            if gcd(brr[i], 2 * brr[j]) > 1:\n                c += 1\n    print(c)\nfor _ in range(ii()):\n    solve()", "t = int(input())\nimport math\n\ndef answer(n, a):\n    s = [[] for _ in range(16)]\n    for i in range(n):\n        ta = a[i]\n        for j in range(1, 16):\n            if ta % 2 ** j != 0:\n                s[j - 1].append(ta)\n                break\n        if ta % 2 ** 15 == 0:\n            s[15].append(ta)\n    A = []\n    for i in range(16):\n        A.extend(s[15 - i])\n    ans = 0\n    for i in range(n - 1):\n        ta = A[i]\n        for j in range(i + 1, n):\n            tb = 2 * A[j]\n            if math.gcd(ta, tb) > 1:\n                ans += 1\n    print(ans)\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    answer(n, a)", "from math import gcd\n\ndef fun(ls, n):\n    st = sorted(ls)\n    even = []\n    rest = []\n    for i in ls:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            rest.append(i)\n    lt = even + rest\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(lt[i], 2 * lt[j]) > 1:\n                count += 1\n    print(count)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, n)", "from math import gcd\ntests = int(input())\nfor _ in range(tests):\n    input()\n    primes = []\n    test = list(map(int, input().split()))\n    odd = [x for x in test if x & 1 == 1]\n    even = sum([1 for x in test if x & 1 == 0])\n    sol1 = sum([i for i in range(even)])\n    sol2 = len(odd) * even\n    sol3 = 0\n    for e in range(len(odd)):\n        for j in range(e + 1, len(odd)):\n            if gcd(odd[e], odd[j]) > 1:\n                sol3 += 1\n    print(sol1 + sol2 + sol3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    (e, o) = (0, 0)\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        t = a[i]\n        if t % 2 == 0:\n            e += 1\n        elif t == 1:\n            o += 1\n        else:\n            o += 1\n            b += [t]\n    f = 0\n    k = len(b)\n    for i in range(k):\n        for j in range(i + 1, k):\n            if math.gcd(b[i], b[j]) != 1:\n                f += 1\n    s = f + o * e + e * (e - 1) // 2\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = input().split()\n    lst = [int(i) for i in lst]\n    cnt = 0\n    gnp = n - 1\n    gjl = []\n    for i in lst:\n        if i % 2 == 0:\n            cnt += gnp\n            gnp -= 1\n        elif i > 1:\n            gjl.append(i)\n    for i in range(len(gjl)):\n        for j in range(i + 1, len(gjl)):\n            if math.gcd(gjl[i], gjl[j]) > 1:\n                cnt += 1\n    print(cnt)", "from math import gcd\nfor _ in [0] * int(input()):\n    n = int(input())\n    t = 0\n    (*a,) = map(int, input().split())\n    b = [i for i in a if i % 2]\n    k = len(b)\n    for i in range(k - 1):\n        for j in range(i + 1, k):\n            t += gcd(b[i], b[j]) > 1\n    print(n * (n - 1) // 2 - k * (k - 1) // 2 + t)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    l = []\n    even = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        elif i % 2 != 0 and i != 1:\n            l.append(i)\n    odd = n - even\n    f = even / 2 * (2 * (n - 1) + (even - 1) * -1)\n    a = 0\n    if len(l) == 0:\n        print(int(f))\n    else:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                if math.gcd(l[j], l[i]) > 1:\n                    a += 1\n        print(a + int(f))", "import math\nimport itertools\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    inf = float('inf')\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        e = [a for a in l if a % 2 == 0]\n        o = [a for a in l if a % 2 != 0]\n        e.sort(reverse=True)\n        o.sort(reverse=True)\n        el = len(e)\n        ol = len(o)\n        s = el * n - el * (el + 1) // 2\n        comb = itertools.combinations(o, 2)\n        for i in list(comb):\n            (x, y) = i\n            if math.gcd(x, y) > 1:\n                s += 1\n        print(s)\nmain()", "import math\n\ndef goodcount(numarr, n):\n    ans = 0\n    oddarr = []\n    for i in numarr:\n        if i % 2 != 0:\n            oddarr.append(i)\n    o = len(oddarr)\n    e = n - o\n    ans += int(n * (n - 1) / 2 - o * (o - 1) / 2)\n    for j in range(o):\n        for k in range(j + 1, o):\n            if math.gcd(oddarr[j], oddarr[k]) > 1:\n                ans += 1\n    return ans\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    numarr = list(map(int, input().split()))\n    print(goodcount(numarr, n))", "import math\nimport itertools\nt = int(input())\n\ndef test_case(num_list):\n    pairs = 0\n    even_list = []\n    odd_list = []\n    for i in range(n):\n        if num_list[i] % 2 == 0:\n            even_list.append(num_list[i])\n        else:\n            odd_list.append(num_list[i])\n    final_list = even_list + odd_list\n    for i in range(n):\n        for j in range(i + 1, n):\n            if math.gcd(final_list[i], 2 * final_list[j]) > 1:\n                pairs += 1\n    print(pairs)\nfor i in range(t):\n    n = int(input())\n    num_list = list(map(int, input().split()))\n    test_case(num_list)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    n1 = len(b)\n    n2 = n - n1\n    ans = n1 * n2 + n1 * (n1 - 1) // 2\n    for i in range(n2 - 1):\n        for j in range(i + 1, n2):\n            if math.gcd(c[i], c[j]) > 1:\n                ans += 1\n    print(ans)", "import math\ncount = int(input())\nfor _ in range(count):\n    a = int(input())\n    b = input().split()\n    b = [int(i) for i in b]\n    list_1 = [int(i) for i in b if i % 2 == 1]\n    list_2 = [int(i) for i in b if i % 2 == 0]\n    list_1.sort(reverse=True)\n    list_2.sort(reverse=True)\n    list_3 = list_2 + list_1\n    constantine = 0\n    while list_3:\n        first = list_3.pop(0)\n        for i in list_3:\n            f = math.gcd(first, 2 * i)\n            if f > 1:\n                constantine += 1\n    print(constantine)", "import sys\nimport math\nfrom collections import deque\n\ndef scan():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef isprime(num):\n    if num > 1:\n        for i in range(2, int(num / 2) + 1):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef print_primes_till_n(n):\n    (i, j, flag) = (0, 0, 0)\n    a = []\n    c = 0\n    for i in range(1, n + 1, 1):\n        if i == 1 or i == 0:\n            continue\n        flag = 1\n        for j in range(2, i // 2 + 1, 1):\n            if i % j == 0:\n                flag = 0\n                break\n        if flag == 1:\n            a.append(i)\n            c += 1\n    return (a, c)\n\ndef is_square(n):\n    b = math.sqrt(n)\n    if n == int(b * b):\n        return True\n    return False\n\ndef solution():\n    for _ in range(int(input())):\n        n = int(input())\n        a = scan()\n        a.sort()\n        a.reverse()\n        c = 0\n        (c, b) = ([], [])\n        for i in a:\n            if i % 2 == 0:\n                c.append(i)\n            else:\n                b.append(i)\n        a = c + b\n        (c, b) = (0, 0)\n        for i in range(n):\n            for j in range(i + 1, n):\n                b = 2 * a[j]\n                if math.gcd(a[i], b) > 1:\n                    c += 1\n        print(c)\nsolution()", "import math\n\ndef sol(A):\n    even = []\n    odd = []\n    for a in A:\n        if a % 2 == 0:\n            even.append(a)\n        else:\n            odd.append(a)\n    A = even + odd\n    count = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if math.gcd(A[i], 2 * A[j]) > 1:\n                count += 1\n    return count\nx = int(input())\nfor _ in range(x):\n    y = int(input())\n    A = list(map(int, input().split()))\n    print(sol(A))", "from math import gcd\nfor _ in range(int(input())):\n    a = int(input())\n    o = []\n    for x in input().split():\n        if int(x) % 2 == 1:\n            o.append(int(x))\n    print((a - len(o)) * (a - len(o) - 1) // 2 + (a - len(o)) * len(o) + sum([1 if gcd(o[i], 2 * o[j]) > 1 else 0 for i in range(len(o)) for j in range(i + 1, len(o))]))", "import math\n\ndef sol():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    top = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            (a[top], a[i]) = (a[i], a[top])\n            top += 1\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if math.gcd(a[i], 2 * a[j]) > 1:\n                ans += 1\n    print(ans)\nfor _ in range(int(input())):\n    sol()", "import sys\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(sys.stdin.readline())\n    inp = list(map(int, sys.stdin.readline().split()))\n    arr = []\n    (even, ans) = (0, 0)\n    for i in inp:\n        if i % 2:\n            arr.append(i)\n        else:\n            even += 1\n    ans += even * (n - 1) - even * (even - 1) / 2\n    for i in range(len(arr)):\n        for j in range(i):\n            if gcd(arr[i], arr[j]) > 1:\n                ans += 1\n    print(int(ans))", "t = int(input())\nimport math\nfor i in range(t):\n    n = int(input())\n    arr = input().split(' ')\n    (l_even, l_odd, good_i) = ([], [], 0)\n    for j in range(n):\n        if int(arr[j]) % 2 == 0:\n            l_even.append(int(arr[j]))\n        else:\n            l_odd.append(int(arr[j]))\n    for x in range(len(l_odd) - 1):\n        for y in range(x + 1, len(l_odd)):\n            if math.gcd(l_odd[x], l_odd[y]) > 1:\n                good_i += 1\n    print(len(l_odd) * len(l_even) + good_i + int(len(l_even) * (len(l_even) - 1) / 2))", "from math import ceil, floor, sqrt, gcd\n\ndef fun(ls, n):\n    st = sorted(ls)[::-1]\n    even = []\n    rest = []\n    for i in ls:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            rest.append(i)\n    lt = even + rest\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(lt[i], 2 * lt[j]) > 1:\n                count += 1\n    print(count)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, n)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    odd = []\n    tmp = 0\n    for item in s:\n        if item % 2 == 1:\n            odd.append(item)\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            if gcd(odd[i], odd[j]) == 1:\n                tmp += 1\n    print(n * (n - 1) // 2 - tmp)", "from math import gcd as g\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    (i, j) = (0, 0)\n    while i < n:\n        if a[i] % 2 == 0:\n            (a[j], a[i]) = (a[i], a[j])\n            j += 1\n        i += 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if g(a[i], 2 * a[j]) > 1:\n                ans += 1\n    print(ans)\n    t -= 1", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    even = [i for i in L if i % 2 == 0]\n    odd = [i for i in L if i % 2 != 0]\n    s = len(even) * (len(odd) + n - 1) // 2\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            if odd[i] != 1 and gcd(odd[i], odd[j]) > 1:\n                s += 1\n    print(s)", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    ans = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n    for i in range(n):\n        if a[i] % 2 == 1:\n            c.append(a[i])\n    for k in range(len(b)):\n        ans += n - k - 1\n    for i in range(len(c) - 1):\n        for j in range(i + 1, len(c)):\n            if gcd(c[i], 2 * c[j]) > 1:\n                ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    arr = sorted(list((int(i) for i in input().split())), key=lambda x: x % 2)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(arr[i], 2 * arr[j]) > 1:\n                ans += 1\n    print(ans)", "import math\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    c = 0\n    all = []\n    even = 0\n    odd = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            all.append(arr[i])\n            even = even + 1\n        else:\n            odd.append(arr[i])\n    all = all + odd\n    for i in range(even):\n        if all[i] % 2 == 0:\n            c = c + (n - i) - 1\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            if math.gcd(odd[i], 2 * odd[j]) > 1:\n                c = c + 1\n    print(c)", "import math\nfor i in range(0, int(input())):\n    n = int(input())\n    l1 = [int(x) for x in input().split() if int(x) % 2 != 0]\n    n1 = len(l1)\n    ne = n - n1\n    count = 0\n    for j in range(0, n1):\n        for x in range(j + 1, n1):\n            if math.gcd(l1[j], 2 * l1[x]) > 1:\n                count += 1\n    print(int(count + ne / 2 * (2 * (n - 1) + (ne - 1) * -1)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = 0\n    odd = []\n    ans = 0\n    for i in a:\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd.append(i)\n    ans = ans + even * (even - 1) // 2 + even * (n - even)\n    for j in range(len(odd)):\n        for k in range(j + 1, len(odd)):\n            if math.gcd(odd[j], odd[k]) > 1:\n                ans = ans + 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odds = [x for x in a if x & 1 == 1]\n    even_count = n - len(odds)\n    count = n * even_count - even_count * (even_count + 1) // 2\n    for i in range(len(odds)):\n        for j in range(i + 1, len(odds)):\n            if gcd(odds[i], odds[j]) != 1:\n                count += 1\n    print(count)", "import math\nnum = int(input())\nfor _ in range(num):\n    input()\n    numb = [int(i) for i in input().split()]\n    res = 0\n    nums = []\n    for num in numb:\n        if num % 2 != 0:\n            nums.append(num)\n        else:\n            nums.insert(0, num)\n    for (i, a) in enumerate(nums):\n        for b in nums[i + 1:]:\n            if math.gcd(a, 2 * b) > 1:\n                res = res + 1\n    print(res)", "import math\nfor s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()), key=lambda x: x % 2)\n    print(sum((math.gcd(2 * x, y) > 1 for (i, x) in enumerate(a) for y in a[:i])))", "import math\nT = int(input())\nfor test in range(0, T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = []\n    num = 0\n    for x in a:\n        if x % 2 == 0:\n            num += 1\n        else:\n            b.append(x)\n    ans = 0\n    for i in range(1, num + 1):\n        ans += n - i\n    xx = len(b)\n    for i in range(0, xx):\n        for j in range(i + 1, xx):\n            if math.gcd(b[i], b[j]) > 1:\n                ans += 1\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = []\n    for ai in a:\n        if ai % 2 == 1:\n            b.append(ai)\n    m = len(b)\n    p = n - m\n    ans = n * p - p * (p + 1) // 2\n    for i in range(m):\n        for j in range(i + 1, m):\n            if math.gcd(b[i], b[j]) > 1:\n                ans += 1\n    print(ans)", "import math\nt = int(input())\nfor inh in range(0, t):\n    (ev, od) = ([], [])\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(0, n):\n        if a[i] % 2 == 0:\n            ev.append(a[i])\n        else:\n            od.append(a[i])\n    enlen = len(ev)\n    odlen = len(od)\n    ans = enlen * (enlen - 1) // 2\n    ans += enlen * odlen\n    for i in range(0, odlen - 1):\n        k = od[i]\n        if k != 1:\n            for j in range(i + 1, odlen):\n                g = math.gcd(k, od[j])\n                if g > 1:\n                    ans += 1\n    print(ans)", "from math import gcd\nints = lambda : map(int, input().split())\nli = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    a = li()\n    (even, l) = (0, 0)\n    odd = []\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd.append(i)\n            l += 1\n    ans = even * (even - 1) // 2 + l * even\n    if l == 0:\n        print(ans)\n        continue\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if gcd(odd[i], odd[j]) > 1:\n                ans += 1\n    print(ans)", "n_infinity = float('inf')\nmod = 1000000007\npi = 3.141592653589793\nmax_val = 10000002\nimport math\n\ndef main(n, arr):\n    arr.sort(reverse=True)\n    dp = []\n    for i in arr:\n        if i & 1 == 0:\n            dp.append(i)\n    for i in arr:\n        if i & 1 == 1:\n            dp.append(i)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = math.gcd(dp[i], 2 * dp[j])\n            if x > 1:\n                count += 1\n    return count\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(main(n, arr))", "from collections import Counter as count\nfrom bisect import bisect\nimport sys\nfrom math import ceil, gcd\nfrom itertools import groupby\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor i in range(int(input())):\n    n = int(input())\n    z = list(map(int, input().split()))\n    (e, o) = ([], [])\n    for i in z:\n        if i % 2:\n            o.append(i)\n        else:\n            e.append(i)\n    z = e + o\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(z[i], z[j] * 2) > 1:\n                ans += 1\n    print(ans)", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), key=lambda x: x % 2)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += gcd(a[i], 2 * a[j]) != 1\n    print(ans)", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())), key=lambda x: x % 2)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += gcd(a[i], 2 * a[j]) != 1\n    print(ans)", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    e = 0\n    a = []\n    for i in range(n):\n        if l[i] % 2 == 0:\n            e = e + 1\n        else:\n            a.append(l[i])\n    ans = e * n - e * (e + 1) // 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if math.gcd(a[i], 2 * a[j]) > 1:\n                ans = ans + 1\n    print(ans)"]