["import sys\nfrom bisect import bisect\ninput = sys.stdin.readline\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    r = 0\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "from bisect import bisect\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "from bisect import bisect\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "from bisect import bisect\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "from bisect import bisect\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "n = int(input())\nx = [0] * n\ny = [0] * n\ns = [0] * n\ndp = [0] * n\nmod = 998244353\nsumdp = [0] * (n + 1)\nresult = 0\nfor i in range(n):\n    (x[i], y[i], s[i]) = map(int, input().split(' '))\nfrom bisect import bisect\nfor i in range(n):\n    pos = bisect(x, y[i])\n    dp[i] = (x[i] - y[i] + sumdp[i] - sumdp[pos]) % mod\n    sumdp[i + 1] = (sumdp[i] + dp[i]) % mod\n    if s[i] == 1:\n        result += dp[i] % mod\nprint((x[-1] + 1 + result) % mod)", "from bisect import bisect\n\ndef solve():\n    MOD = 998244353\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    s = [0] * n\n    z = [0] * n\n    p = [0] * (n + 1)\n    r = 0\n    for i in range(n):\n        (x[i], y[i], s[i]) = map(int, input().split())\n    for i in range(n):\n        nn = bisect(x, y[i])\n        z[i] = (p[i] - p[nn] + x[i] - y[i]) % MOD\n        p[i + 1] = (p[i] + z[i]) % MOD\n        if s[i] == 1:\n            r = (r + z[i]) % MOD\n    print((x[n - 1] + 1 + r) % MOD)\nsolve()", "from bisect import bisect\n\ndef readline():\n    return map(int, input().split())\nMOD = 998244353\nn = int(input())\nportals = [(*readline(),) for __ in range(n)]\nans = 1\npartial_sum = [0]\nfor (j, (x, y, s)) in enumerate(portals):\n    i = bisect(portals, (y, 0, 0))\n    w = (partial_sum[j] - partial_sum[i] + x - y) % MOD\n    partial_sum.append(partial_sum[-1] + w)\n    ans += w * s\nprint((ans + x) % MOD)", "from bisect import bisect\n\ndef readline():\n    return map(int, input().split())\nMOD = 998244353\n\ndef main():\n    n = int(input())\n    portals = [tuple(readline()) for __ in range(n)]\n    ans = 0\n    waste = []\n    partial_sum = [0]\n    for (j, (x, y, s)) in enumerate(portals):\n        i = bisect(portals, (y, 0, 0))\n        w = partial_sum[j] - partial_sum[i] + (x - y)\n        w %= MOD\n        waste.append(w)\n        partial_sum.append(partial_sum[-1] + w)\n        if s:\n            ans += w\n            ans %= MOD\n    print((ans + x + 1) % MOD)\nmain()", "from bisect import bisect_left\nMOD = 998244353\n\ndef dynamic_ant(n, x, y, s):\n    time_all_active = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        j = bisect_left(x, y[i])\n        time_all_active[i] = 2 * (time_all_active[i - 1] + x[i] - x[i - 1]) - (time_all_active[j - 1] + y[i] - x[j - 1])\n        time_all_active[i] %= MOD\n    actual = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        actual[i] = actual[i - 1] + x[i] - x[i - 1]\n        if s[i] == 1:\n            j = bisect_left(x, y[i])\n            actual[i] += time_all_active[i - 1] - time_all_active[j - 1] - (y[i] - x[j - 1]) + (x[i] - x[i - 1])\n            actual[i] %= MOD\n    return (actual[-1] + 1) % MOD\nn = int(input())\ns = [0 for _ in range(n + 1)]\nx = [0 for _ in range(n + 1)]\ny = [0 for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    (x[i], y[i], s[i]) = (int(t) for t in input().split(' '))\nprint(dynamic_ant(n, x, y, s))", "n = 0\nm = 200005\nr = [0] * m\nl = [0] * m\ns = [0] * m\ndp = [0] * m\nsum = [0] * m\nmod = 998244353\n\ndef lower_bound(v):\n    l = 1\n    ri = n\n    ans = 0\n    while ri >= l:\n        mid = l + ri >> 1\n        if r[mid] >= v:\n            ri = mid - 1\n            ans = mid\n        else:\n            l = mid + 1\n    return ans\nn = int(input())\nfor i in range(1, n + 1):\n    (r[i], l[i], s[i]) = map(int, input().split())\nans = 0\nfor i in range(1, n + 1):\n    ans = (ans + r[i] - r[i - 1]) % mod\n    p = lower_bound(l[i]) - 1\n    dp[i] = (r[i] - l[i] + sum[i - 1] - sum[p] + mod * 2) % mod\n    sum[i] = (sum[i - 1] + dp[i]) % mod\n    if s[i]:\n        ans = (ans + dp[i]) % mod\nprint((ans + 1) % mod)", "n = int(input())\n(X, Y, S) = ([], [], [])\nP = 998244353\nT = [0] * (n + 1)\n\ndef findIndex(L, p):\n    n = len(L)\n    (l, r) = (0, n)\n    guess = n // 2\n    while r > l:\n        guess = (r + l) // 2\n        if L[guess] <= p:\n            l = guess + 1\n        elif L[guess] > p:\n            r = guess\n    return l\nfor i in range(n):\n    (xi, yi, si) = map(int, input().split())\n    X.append(xi)\n    Y.append(yi)\n    S.append(si)\n    j = findIndex(X, yi)\n    T[i + 1] = (xi - yi + 2 * T[i] - T[j]) % P\nxn = X[-1]\ntotal = xn + 1\nTest = [0] * n\nfor i in range(n):\n    si = S[i]\n    total += (T[i + 1] - T[i]) * si\n    total %= P\nprint(total)"]