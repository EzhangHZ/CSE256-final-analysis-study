["def solve():\n    cases = int(input())\n    for t in range(cases):\n        input()\n        sequence = input().strip('.')\n        gap = 0\n        gaps = []\n        for s in sequence[1:]:\n            if s == '*':\n                gaps.append(gap)\n                gap = 0\n            else:\n                gap += 1\n        sum = 0\n        length = len(gaps)\n        for i in range(length // 2):\n            sum += (i + 1) * (gaps[i] + gaps[-1 - i])\n        if length % 2 == 1:\n            sum += (length + 1) * gaps[length // 2] // 2\n        print(sum)\nsolve()", "def solve():\n    length = int(input())\n    str = input()\n    Csum = 0\n    zero = 0\n    element = []\n    cumalative = []\n    for x in str:\n        if x == '.':\n            zero = zero + 1\n        elif x == '*':\n            element.append(zero)\n            Csum = Csum + zero\n            cumalative.append(Csum)\n    elen = int(len(element))\n    median = int((elen - 1) / 2)\n    if elen == 0:\n        ans = 0\n        return ans\n    elif elen % 2 == 0:\n        ans = cumalative[elen - 1] - 2 * cumalative[median]\n        return ans\n    else:\n        ans = cumalative[elen - 1] - 2 * cumalative[median] + element[median]\n        return ans\ntest = int(input())\nfor x in range(test):\n    print(solve())", "def test():\n    N = int(input())\n    s = input()\n    total_sheep = 0\n    for c in s:\n        if c == '*':\n            total_sheep += 1\n    sheep = 0\n    moves = 0\n    for c in s:\n        if c == '*':\n            sheep += 1\n        elif sheep <= total_sheep / 2:\n            moves += sheep\n        else:\n            moves += total_sheep - sheep\n    print(moves)\nT = int(input())\nfor i in range(T):\n    test()", "def main():\n    t = int(input().strip())\n    for _ in range(t):\n        n = int(input().strip())\n        s = input().strip()\n        idx = []\n        for (i, c) in enumerate(s):\n            if c == '*':\n                idx.append(i)\n        res = 0\n        for i in range(int(len(idx) // 2)):\n            res += idx[-i - 1] - idx[i]\n        if len(idx) % 2:\n            res -= len(idx) // 2 * (len(idx) // 2 + 1)\n        else:\n            res -= len(idx) // 2 * len(idx) // 2\n        print(res)\nmain()", "def test_case():\n    n = int(input())\n    s = input()\n    if '*' not in s:\n        return 0\n    (l, r) = (s.find('*'), s.rfind('*'))\n    (l_cur, r_cur) = (1, 1)\n    ans = 0\n    while r > l:\n        if l_cur < r_cur:\n            l += 1\n            if l >= r:\n                break\n            if s[l] == '*':\n                l_cur += 1\n            else:\n                ans += l_cur\n        else:\n            r -= 1\n            if l >= r:\n                break\n            if s[r] == '*':\n                r_cur += 1\n            else:\n                ans += r_cur\n    return ans\nt = int(input())\nfor i in range(t):\n    print(test_case())", "def sheep(n, s):\n    c = s.count('*')\n    ans = 0\n    star = 0\n    for i in range(n):\n        if s[i] == '*':\n            star += 1\n        else:\n            ans += min(star, c - star)\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    print(sheep(n, s))", "def solve(n: int, s: str) -> int:\n    left = 0\n    right = 0\n    for x in s:\n        if x == '*':\n            right += 1\n    ans = 0\n    for x in s:\n        if x == '*':\n            left += 1\n            right -= 1\n        else:\n            ans += min(left, right)\n    return ans\ntest_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "def func():\n    n = int(input())\n    s = input()\n    sheep_arr = []\n    step = 0\n    for i in range(n):\n        if s[i] == '*':\n            sheep_arr.append(i)\n    if len(sheep_arr) == 0:\n        print(0)\n    else:\n        sheep_count = len(sheep_arr)\n        middle = sheep_count // 2\n        left = sheep_arr[:middle]\n        right = sheep_arr[middle + 1:]\n        middle_pos = sheep_arr[middle]\n        leff_plan = [i for i in range(middle_pos - len(left), middle_pos)]\n        right_plan = [i for i in range(middle_pos + 1, middle_pos + len(right) + 1)]\n        l = zip(left, leff_plan)\n        r = zip(right, right_plan)\n        for (a, b) in l:\n            step += b - a\n        for (a, b) in r:\n            step += a - b\n        print(step)\nt = int(input())\nfor i in range(t):\n    func()", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "def solve(n, sheeps):\n    result = count = index = 0\n    for i in sheeps:\n        if i == '*':\n            count += 1\n    count = (count + 1) // 2\n    for i in range(n):\n        if sheeps[i] == '*':\n            count -= 1\n        if count == 0:\n            index = i\n            break\n    step = temp = 0\n    j = i - 1\n    while j >= 0:\n        if sheeps[j] == '.':\n            temp += 1\n        else:\n            step += temp\n        j -= 1\n    result += step\n    step = temp = 0\n    j = i + 1\n    while j < n:\n        if sheeps[j] == '.':\n            temp += 1\n        else:\n            step += temp\n        j += 1\n    result += step\n    return result\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    sheeps = input()\n    print(solve(n, sheeps))", "import math\n\ndef get_min_steps(s, n):\n    sheep = 0\n    for x in s:\n        if x == '*':\n            sheep += 1\n    if sheep == 0:\n        return 0\n    median_sheeps = math.ceil(sheep / 2)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '*':\n            count += 1\n            if count == median_sheeps:\n                index_mid = i\n                break\n    count = 0\n    steps_move_left = 0\n    for i in range(index_mid, -1, -1):\n        if s[i] == '.':\n            count += 1\n        else:\n            steps_move_left += count\n    count = 0\n    steps_move_right = 0\n    for i in range(index_mid, len(s), 1):\n        if s[i] == '.':\n            count += 1\n        else:\n            steps_move_right += count\n    return steps_move_left + steps_move_right\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    print(get_min_steps(s, n))\n    t -= 1", "def calc():\n    n = int(input())\n    ss = input()\n    total = ss.count('*')\n    c = 0\n    ans = 0\n    for i in range(n):\n        if ss[i] == '*':\n            c += 1\n        else:\n            ans += min([c, total - c])\n    print(ans)\nt = int(input())\nfor _i in range(t):\n    calc()", "t = int(input())\n\ndef arrange(s, length):\n    A = []\n    count = 0\n    for i in range(length):\n        if s[i] == '*':\n            A.append(i)\n    mid = len(A) // 2\n    for x in A:\n        count += abs(x - A[mid])\n    l = len(A)\n    if l % 2 == 0:\n        sub = l * l // 4\n    else:\n        sub = (l * l - 1) // 4\n    return count - sub\nfor i in range(t):\n    length = int(input())\n    string = str(input())\n    print(arrange(string, length))", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for k in [*open(0)][2::2]:\n    c = k.count('*')\n    a = r = 0\n    for x in k:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "answers = []\n\ndef solve(n, s):\n    store = []\n    for (i, ele) in enumerate(s):\n        if ele == '*':\n            store.append(i)\n    length = len(store)\n    if length == 0:\n        answers.append(0)\n        return\n    median = None\n    if length % 2 == 0:\n        median = (store[length // 2] + store[length // 2 - 1]) // 2\n    else:\n        median = store[length // 2]\n    hashStore = {}\n    for ele in store:\n        hashStore[ele] = 1\n    leftLimit = median\n    rightLimit = median + 1\n    while leftLimit in hashStore:\n        leftLimit -= 1\n    while rightLimit in hashStore:\n        rightLimit += 1\n    newStore = {}\n    count = 0\n    for i in range(leftLimit, -1, -1):\n        if i in hashStore:\n            count += leftLimit - i\n            leftLimit -= 1\n    length = n\n    for i in range(rightLimit + 1, length):\n        if i in hashStore:\n            count += i - rightLimit\n            rightLimit += 1\n    answers.append(count)\nT = int(input())\nwhile T:\n    n = int(input())\n    s = input()\n    solve(n, s)\n    T -= 1\nfor ans in answers:\n    print(ans)", "from collections import defaultdict\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readCase():\n    n = readInt()\n    board = readString()\n    return (n, board)\n\ndef solve(n, board):\n    moves = 0\n    num_sheep = board.count('*')\n    target_sheep = (num_sheep + 1) // 2\n    seen_sheep = 0\n    target_pos = -1\n    while seen_sheep < target_sheep:\n        target_pos += 1\n        if board[target_pos] == '*':\n            seen_sheep += 1\n    to_find = num_sheep - target_sheep\n    found = 0\n    sheep_end = 0\n    while found < to_find:\n        for (pos, char) in enumerate(board[target_pos + 1:]):\n            if char == '*':\n                moves += pos - sheep_end\n                sheep_end += 1\n                found += 1\n    found = 0\n    to_find = target_sheep - 1\n    sheep_end = 0\n    while found < to_find:\n        for (pos, char) in enumerate(reversed(board[:target_pos])):\n            if char == '*':\n                moves += pos - sheep_end\n                sheep_end += 1\n                found += 1\n    return moves\ncases = readInt()\nfor case in range(cases):\n    print(solve(*readCase()))", "rn = lambda : int(input())\nrl = lambda : [x for x in input().split()]\nrln = lambda : [int(x) for x in input().split()]\nrlfn = lambda : [float(x) for x in input().split()]\n\ndef solve():\n    k = rn()\n    l = input()\n    vacas = 0\n    vacas_tot = sum([1 if c == '*' else 0 for c in l])\n    tot = 0\n    for c in l:\n        if c == '*':\n            vacas += 1\n        else:\n            tot += min(vacas, vacas_tot - vacas)\n    return [tot]\ntests = rn()\nfor tc in range(1, tests + 1):\n    rta = solve()\n    print(' '.join(map(str, rta)))", "def solve(s):\n    sheep_num = s.count('*')\n    if sheep_num == 0:\n        return 0\n    l = []\n    for i in range(len(s)):\n        if s[i] == '*':\n            l.append(i)\n    middle = len(l) // 2\n    middle_value = l[middle]\n    step = 0\n    pos = middle_value\n    for i in range(0, middle):\n        pos -= 1\n        step += pos - l[i]\n    pos = middle_value\n    for i in range(middle + 1, len(l)):\n        pos += 1\n        step += l[i] - pos\n    return step\nfor _ in range(int(input())):\n    n = input()\n    s = input()\n    print(solve(s))", "for s in [*open(0)][2::2]:\n    a = 0\n    c = s.count('*')\n    r = 0\n    for j in s:\n        if j > '*':\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for k in [*open(0)][2::2]:\n    c = k.count('*')\n    a = r = 0\n    for x in k:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    a = [i for (i, x) in enumerate(s) if '*' == x]\n    m = len(a)\n    r = 0\n    for i in range(m // 2):\n        r += a[~i] - a[i] - m + i * 2 + 1\n    print(r)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = input().strip()\n    b = []\n    for i in range(n):\n        if a[i] == '*':\n            b.append(i)\n    if len(b) == 0:\n        print(0)\n        return\n    c = b[len(b) // 2]\n    m = len(b) // 2\n    r = 0\n    for i in range(1, m + 1):\n        r += c - i - b[m - i]\n    for i in range(1, len(b) - m):\n        r += b[m + i] - c - i\n    print(r)\nfor i in range(int(input())):\n    solve()", "for s in [*open(0)][2::2]:\n    a = [i for (i, x) in enumerate(s) if '*' == x]\n    m = len(a)\n    r = 0\n    for (x, y) in zip(a[:m // 2], a[::-1]):\n        r += y - x - m + 1\n        m -= 2\n    print(r)", "def solve(n: int, s: str) -> int:\n    locs = []\n    for i in range(n):\n        if s[i] == '*':\n            locs.append(i)\n    if not locs:\n        return 0\n    median = locs[len(locs) // 2]\n    split = len(locs) // 2\n    ans = 0\n    for x in locs:\n        ans += abs(median - split - x)\n        split -= 1\n    return ans\ntest_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef II():\n    return int(input())\n\ndef LS():\n    return list(input().split())\n\ndef S():\n    return input()\n\ndef solve():\n    n = II()\n    s = S()\n    ans = 0\n    total_num = s.count('*')\n    cnt = 0\n    for i in range(n):\n        if s[i] == '*':\n            cnt += 1\n        else:\n            left = cnt + 0\n            right = total_num - cnt\n            ans += min(left, right)\n    return ans\n\ndef main():\n    t = II()\n    for _ in range(t):\n        res = solve()\n        print(res)\n    return 0\nmain()", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = s.count('*')\n    r = 0\n    ans = 0\n    for i in s:\n        if i == '*':\n            r += 1\n        else:\n            ans += min(r, c - r)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = s.count('*')\n    r = 0\n    ans = 0\n    for i in s:\n        if i == '*':\n            r += 1\n        else:\n            ans += min(r, c - r)\n    print(ans)", "for s in [*open(0)][2::2]:\n    a = 0\n    c = s.count('*')\n    r = 0\n    for j in s:\n        if j > '*':\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    a = 0\n    c = s.count('*')\n    r = 0\n    for j in s:\n        if j > '*':\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "def process():\n    N = int(input().strip())\n    inp_arr = input().strip()\n    first = -1\n    last = -1\n    count = 0\n    left_side_sheep_count = 0\n    answer = 0\n    for i in range(N):\n        if inp_arr[i] == '*':\n            count += 1\n            last = i\n            if first == -1:\n                first = i\n    if count == 0 or count == N or count == 1:\n        print(str(0))\n        return\n    for i in range(first, last + 1):\n        if inp_arr[i] == '*':\n            left_side_sheep_count += 1\n        else:\n            answer = answer + min(left_side_sheep_count, count - left_side_sheep_count)\n    print(str(answer))\n    return\n\ndef main():\n    T = int(input().strip())\n    for i in range(T):\n        process()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = s.count('*')\n    r = 0\n    ans = 0\n    for i in s:\n        if i == '*':\n            r += 1\n        else:\n            ans += min(r, c - r)\n    print(ans)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    string = input()\n    dots = string.count('*')\n    b = 0\n    ans = 0\n    for i in string:\n        if i == '*':\n            b += 1\n        else:\n            ans += min(b, dots - b)\n    print(ans)", "import math\n\ndef solve(n: int, s: str) -> int:\n    locs = []\n    for i in range(n):\n        if s[i] == '*':\n            locs.append(i)\n    if not locs:\n        return 0\n    if len(locs) % 2:\n        median = locs[len(locs) // 2]\n        u_median = l_median = median\n        u_split = 1\n        l_split = len(locs) // 2\n    else:\n        median = (locs[len(locs) // 2] + locs[len(locs) // 2 - 1]) / 2\n        if median % 1:\n            u_median = math.ceil(median)\n            l_median = math.floor(median)\n        else:\n            u_median = median + 1\n            l_median = median\n        u_split = 0\n        l_split = len(locs) // 2 - 1\n    ans = 0\n    for x in locs:\n        if x <= l_median:\n            ans += abs(l_median - l_split - x)\n            l_split -= 1\n        else:\n            ans += abs(u_median + u_split - x)\n            u_split += 1\n    return int(ans)\ntest_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if x > '*':\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "from collections import defaultdict\nfrom string import ascii_uppercase, ascii_lowercase\n\ndef is_square(x):\n    return x ** 0.5 % 1 == 0\n\ndef arr_to_str(arr):\n    return ' '.join((str(n) for n in arr))\n\ndef nested_arr_to_str(arr):\n    return '\\n'.join((' '.join((str(n) for n in r)) for r in arr))\n\ndef solve(s):\n    sheeps = [i for i in range(len(s)) if s[i] == '*']\n    n = len(sheeps)\n    if n in [0, 1, len(s)]:\n        return 0\n    sheeps = sorted((sheeps[i] - i for i in range(n)))\n    median = sheeps[n // 2]\n    return sum((abs(i - median) for i in sheeps))\nfor _ in range(int(input())):\n    input()\n    s = input()\n    print(solve(s))", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().strip('.')\n    n = len(s)\n    ans = 0\n    cnt = s.count('*')\n    if 0 < cnt < n:\n        stars_passed = 0\n        for ch in s:\n            if ch == '*':\n                stars_passed += 1\n            else:\n                ans += min(stars_passed, cnt - stars_passed)\n    print(ans)", "import sys\nimport bisect\nfrom collections import deque\n\ndef solve():\n    N = int(input())\n    S = input().strip()\n    p = []\n    left = 0\n    right = 0\n    for i in range(N):\n        if S[i] == '*':\n            left = i\n            break\n    for i in range(N - 1, -1, -1):\n        if S[i] == '*':\n            right = i\n            break\n    for i in range(left, right):\n        if S[i] == '.':\n            p.append(i)\n    ans = 0\n    left_index = 0\n    right_index = len(p) - 1\n    while left_index <= right_index:\n        if p[left_index] - left <= right - p[right_index]:\n            ans += p[left_index] - left\n            left += 1\n            left_index += 1\n        else:\n            ans += right - p[right_index]\n            right -= 1\n            right_index -= 1\n    print(ans)\n    return\nT = int(input())\nfor i in range(T):\n    solve()", "t = int(input())\nfor task in range(t):\n    n = int(input())\n    a = input()\n    sheeps = a.count('*')\n    res = 0\n    sheepsDone = 0\n    for cell in a:\n        if cell == '.':\n            res += min(sheepsDone, sheeps - sheepsDone)\n        else:\n            sheepsDone += 1\n    print(res)", "def question5():\n    N = int(input())\n    string = input()\n    count_upto = string.count('*')\n    left = 0\n    right = count_upto\n    ans = 0\n    for i in range(N):\n        if string[i] == '*':\n            left += 1\n            right -= 1\n        else:\n            ans += min(left, right)\n    return ans\nremained_test_cases = int(input())\nwhile remained_test_cases > 0:\n    print(question5())\n    remained_test_cases -= 1", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    j = 0\n    ans = 0\n    sheep = 0\n    c = s.count('*')\n    while sheep < c / 2:\n        if s[j] == '*':\n            sheep += 1\n        else:\n            ans += sheep\n        j += 1\n    while j < n:\n        if s[j] == '*':\n            sheep += 1\n        else:\n            ans += c - sheep\n        j += 1\n    print(ans)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "import re\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    s = s.replace('.', ' ')\n    s = s.strip()\n    s = s.replace(' ', '.')\n    l = s\n    s = s.split('.')\n    if len(s) == 1:\n        print(0)\n    else:\n        count = len(re.findall('[*]', l))\n        c = 0\n        steps = 0\n        for i in l:\n            if i == '*':\n                c += 1\n            elif c > count - c:\n                steps += count - c\n            else:\n                steps += c\n        print(steps)\n    t -= 1", "import sys\nfrom os import path\nimport math\nimport time\nfrom collections import defaultdict\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 8)\nMOD = 10 ** 9 + 7\nINT_MAX = 10 ** 9\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef test_case():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        level = input()\n        s_indx = []\n        count = 0\n        for i in range(n):\n            if level[i] == '*':\n                s_indx.append(i)\n                count += 1\n        l = len(s_indx)\n        mid_s = int((count + 1) // 2)\n        count = 0\n        for i in range(n):\n            if level[i] == '*':\n                count += 1\n                if count == mid_s:\n                    break\n        count = 0\n        ans = 0\n        for j in range(i, -1, -1):\n            if level[j] == '.':\n                count += 1\n            else:\n                ans += count\n        count = 0\n        for j in range(i + 1, n):\n            if level[j] == '.':\n                count += 1\n            else:\n                ans += count\n        print(ans)\ntest_case()", "for _ in range(int(input())):\n    n = int(input())\n    sheeps = list(input().strip('.'))\n    n = len(sheeps)\n    total_sheeps = sheeps.count('*')\n    ans = 0\n    left_count = 0\n    for i in range(n):\n        if sheeps[i] == '.':\n            ans += min(left_count, total_sheeps - left_count)\n        else:\n            left_count += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    (done, c) = (0, s.count('*'))\n    min_moves = 0\n    for char in s:\n        if char == '*':\n            done += 1\n        else:\n            min_moves += min(done, c - done)\n    print(min_moves)", "def process(A):\n    answer = 0\n    n = len(A)\n    A = [A[i] - i for i in range(n)]\n    if n % 2 == 1:\n        answer = sum(A[n // 2 + 1:]) - sum(A[:n // 2])\n    else:\n        answer = sum(A[n // 2:]) - sum(A[:n // 2])\n    return answer\nT = int(input())\nfor I in range(T):\n    N = int(input())\n    S = input()\n    A = []\n    for i in range(N):\n        if S[i] == '*':\n            A.append(i)\n    print(process(A))", "def solve(n, s):\n    ans = []\n    for i in range(n):\n        if s[i] == '*':\n            ans.append(i)\n    if len(ans) < 2:\n        print('0')\n        return\n    mid = ans[len(ans) // 2]\n    c = 0\n    tmp = 0\n    for i in range(len(ans) // 2 - 1, -1, -1):\n        c += mid - tmp - ans[i] - 1\n        tmp += 1\n    tmp = 0\n    for i in range(len(ans) // 2 + 1, len(ans)):\n        c += ans[i] - (mid + tmp) - 1\n        tmp += 1\n    print(c)\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    solve(n, s)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cast = s.count('*')\n    c = 0\n    b = 0\n    for i in s:\n        if i == '*':\n            b += 1\n        else:\n            c += min(b, cast - b)\n    print(c)", "from math import ceil\n\ndef func():\n    total = sum((1 for x in range(n) if st[x] == '*'))\n    if total == 0 or total == n:\n        print(0)\n        return\n    else:\n        med = ceil(total / 2)\n        ind = 0\n        curr = 0\n        for i in range(n):\n            if st[i] == '*':\n                curr += 1\n            if curr == med:\n                ind = i\n                break\n        cnt = 0\n        rz = 0\n        for j in range(ind, -1, -1):\n            if st[j] == '.':\n                cnt += 1\n            else:\n                rz += cnt\n        cnt = 0\n        for j in range(ind, n):\n            if st[j] == '.':\n                cnt += 1\n            else:\n                rz += cnt\n    print(rz)\nfor _ in range(int(input())):\n    n = int(input())\n    st = list(input())\n    func()", "import sys\nimport math\nMOD = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = r = 0\n    c = s.count('*')\n    for i in s:\n        if '*' < i:\n            ans += min(r, c - r)\n        else:\n            r += 1\n    print(ans)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if x == '.':\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "def solve_the_problem():\n    n = int(input())\n    s = input().strip()\n    cnt = s.count('*')\n    pos = -1\n    cur = -1\n    for i in range(n):\n        if s[i] == '*':\n            cur += 1\n            if cur == cnt // 2:\n                pos = i\n    ans = 0\n    cur = pos - cnt // 2\n    for i in range(n):\n        if s[i] == '*':\n            ans += abs(cur - i)\n            cur += 1\n    print(ans)\ntc = int(input())\nfor i in range(tc):\n    solve_the_problem()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    (l, r) = (0, n - 1)\n    (moveLeft, moveRight) = (0, 0)\n    ans = 0\n    while l <= r:\n        if moveLeft <= moveRight:\n            if s[l] == '*':\n                moveLeft += 1\n            else:\n                ans += moveLeft\n            l += 1\n        else:\n            if s[r] == '*':\n                moveRight += 1\n            else:\n                ans += moveRight\n            r -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    s = list(input())\n    c = s.count('*')\n    i = 0\n    for x in s:\n        if x > '*':\n            ans += min(i, c - i)\n        else:\n            i += 1\n    print(ans)", "test = int(input())\nwhile test > 0:\n    test -= 1\n    n = int(input())\n    list1 = list(input())\n    dots = list1.count('.')\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        if list1[left] == '*' and list1[right] == '*':\n            count += dots\n            left += 1\n            right -= 1\n        if list1[left] == '.':\n            left += 1\n            dots -= 1\n        if list1[right] == '.':\n            right -= 1\n            dots -= 1\n    print(count)", "from math import comb\n\ndef a_ser(n):\n    return comb(n + 1, 2)\nfor _ in range(int(input())):\n    n = int(input())\n    positions = [i for (i, c) in enumerate(input()) if c == '*']\n    sheeps = len(positions)\n    if sheeps == 0:\n        print(0)\n    else:\n        m = positions[sheeps // 2]\n        answer = sum([abs(m - positions[i]) for i in range(sheeps)])\n        if sheeps % 2 == 0:\n            answer -= a_ser(sheeps // 2 - 1) + a_ser(sheeps // 2)\n        else:\n            answer -= 2 * a_ser((sheeps - 1) // 2)\n        print(answer)", "def solve():\n    n = int(input())\n    s = input()\n    cnt = s.count('*')\n    pos = -1\n    cur = -1\n    for i in range(n):\n        if s[i] == '*':\n            cur += 1\n            if cur == cnt // 2:\n                pos = i * 1\n    ans = 0\n    cur = pos - cnt // 2\n    for i in range(n):\n        if s[i] == '*':\n            ans += abs(cur - i)\n            cur += 1\n    print(ans)\n\ndef main():\n    testCases = int(input())\n    for i in range(testCases):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = [i for i in range(n) if s[i] == '*']\n    if a:\n        i = len(a) // 2\n        print(sum((abs(a[i] - a[j] - (i - j)) for j in range(len(a)))))\n    else:\n        print(0)", "from itertools import groupby\nfor _ in range(int(input())):\n    ans = 0\n    lw = input()\n    arr = input().strip('.')\n    l = 0\n    r = len(arr) - 1\n    left = 0\n    right = 0\n    if len(arr) != 0:\n        if arr[r] == '*':\n            right += 1\n        if arr[0] == '*':\n            left += 1\n        while l < r:\n            if left <= right:\n                l += 1\n                if arr[l] == '*':\n                    left += 1\n                else:\n                    ans += left\n            else:\n                r -= 1\n                if arr[r] == '*':\n                    right += 1\n                else:\n                    ans += right\n        print(ans)\n    else:\n        print(0)", "from collections import defaultdict\nfrom math import gcd\n\ndef read(test):\n    n = int(input())\n    s = input()\n    solve(n, s)\n\ndef solve(n, s):\n    a = []\n    for i in range(len(s)):\n        if s[i] == '*':\n            a.append(i)\n    if len(a) < 2:\n        print(0)\n        return\n    mi = len(a) // 2\n    m = a[mi]\n    ans = 0\n    i = 0\n    for j in range(mi - 1, -1, -1):\n        i += 1\n        tmp = m - a[j] - i\n        assert tmp >= 0\n        ans += tmp\n    i = 0\n    for j in range(mi + 1, len(a)):\n        i += 1\n        tmp = a[j] - m - i\n        assert tmp >= 0\n        ans += tmp\n    print(ans)\nfor tc in range(int(input())):\n    read(tc + 1)", "for s in [*open(0)][2::2]:\n    a = [i for (i, x) in enumerate(s) if '*' == x]\n    m = len(a)\n    r = 0\n    for i in range(m // 2):\n        r += a[~i] - a[i] - m + i * 2 + 1\n    print(r)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "for s in [*open(0)][2::2]:\n    c = s.count('*')\n    a = r = 0\n    for x in s:\n        if '*' < x:\n            a += min(r, c - r)\n        else:\n            r += 1\n    print(a)", "def solve(x, n):\n    itemno = 0\n    y = []\n    for i in range(n):\n        if x[i] == '*':\n            y.append(i - itemno)\n            itemno += 1\n    if y == []:\n        return 0\n    y.sort()\n    m = len(y)\n    med = y[m // 2]\n    ans = 0\n    for i in range(m):\n        ans += abs(y[i] - med)\n    return ans\nfor q in range(int(input())):\n    n = int(input())\n    x = input()\n    print(solve(x, n))", "for q in range(int(input())):\n    n = int(input())\n    s = input()\n    S = s.count('*')\n    k = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '.':\n            ans += min(k, S - k)\n        else:\n            k += 1\n    print(ans)", "def solve():\n    N = int(input())\n    S = input()\n    sheep = []\n    for (i, c) in enumerate(S):\n        if c == '*':\n            sheep.append(i)\n    center = len(sheep) // 2\n    ans = sum([abs(sheep[i] - (sheep[center] - center + i)) for i in range(len(sheep))])\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "t = int(input())\nfor i in range(t):\n    N = input()\n    M = input()\n    T = 0\n    J = 0\n    ANS = 0\n    for i in M:\n        if i == '*':\n            T += 1\n    for i in M:\n        if i == '*':\n            J += 1\n        else:\n            ANS += min(J, T - J)\n    print(ANS)", "def solve_the_problem():\n    n = int(input())\n    s = input().strip()\n    cnt = s.count('*')\n    pos = -1\n    cur = -1\n    for i in range(n):\n        if s[i] == '*':\n            cur += 1\n            if cur == cnt // 2:\n                pos = i\n    ans = 0\n    cur = pos - cnt // 2\n    for i in range(n):\n        if s[i] == '*':\n            ans += abs(cur - i)\n            cur += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve_the_problem()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    sheep = 0\n    for i in s:\n        if i == '*':\n            sheep += 1\n    ans = 0\n    count = 0\n    idx = -1\n    for i in range(n):\n        if s[i] == '*':\n            count += 1\n            if count > sheep / 2:\n                idx = i\n                break\n        else:\n            ans += count\n    count = 0\n    for i in range(n - 1, idx, -1):\n        if s[i] == '*':\n            count += 1\n        else:\n            ans += count\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [1 if i == '*' else 0 for i in input()]\n    ships = sum(arr)\n    left = 0\n    right = n - 1\n    ans = 0\n    i = 1\n    while right - left > 0 and ships >= 2:\n        ships -= 2\n        while arr[left] != 1:\n            left += 1\n        while arr[right] != 1:\n            right -= 1\n        ans += right - left - 1 - ships\n        right -= 1\n        left += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in s:\n        if i == '*':\n            c += 1\n    c = (c + 1) // 2\n    for i in range(n):\n        if s[i] == '*':\n            c -= 1\n        if c == 0:\n            break\n    cc = 0\n    ans = 0\n    for j in range(i - 1, -1, -1):\n        if s[j] == '.':\n            cc += 1\n        else:\n            ans += cc\n    cc = 0\n    for j in range(i + 1, n):\n        if s[j] == '.':\n            cc += 1\n        else:\n            ans += cc\n    print(ans)", "for _ in range(int(input())):\n    l = int(input())\n    a = input()\n    c = a.count('*')\n    start = a.index('*') if '*' in a else 0\n    e = a[::-1].index('*') if '*' in a else 0\n    end = l - e - 1\n    dif = end - start + 1\n    if dif == c or dif == 0:\n        print(0)\n    else:\n        left = 0\n        ans = 0\n        for i in range(start, end):\n            if a[i] == '*':\n                left += 1\n            else:\n                ans += min(left, c - left)\n        print(ans)", "from math import floor\nimport sys\nfrom statistics import median\n\ndef triangular(n):\n    return n * (n + 1) / 2\ntest_cases = int(sys.stdin.readline())\nfor _ in range(0, test_cases):\n    length = int(sys.stdin.readline())\n    field = sys.stdin.readline().strip()\n    sheep = 0\n    sheep_location = []\n    for i in range(0, length):\n        if field[i] == '*':\n            sheep_location.append(i)\n    if len(sheep_location) == 0:\n        print('0')\n    else:\n        if len(sheep_location) % 2 == 1:\n            middle = int((len(sheep_location) - 1) / 2)\n            median_sheep = sheep_location[middle]\n            bad = 2 * triangular(middle)\n        else:\n            middle = int(len(sheep_location) / 2)\n            median_sheep = sheep_location[middle]\n            bad = triangular(middle) + triangular(middle - 1)\n        distance = 0\n        for i in sheep_location:\n            distance += abs(i - median_sheep)\n        print(int(distance - bad))", "num = int(input())\nfor n in range(num):\n    ln = int(input())\n    strn = input()\n    sheep = 0\n    lft = 0\n    cnt = 0\n    for i in strn:\n        if i == '*':\n            sheep += 1\n    for i in strn:\n        if i == '*':\n            lft += 1\n        else:\n            cnt += min(lft, sheep - lft)\n    print(cnt)", "import sys\nCONST = 100030001\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(input())\nwhile t:\n    n = int(input())\n    s = str(input())\n    shp_idx = []\n    for (idx, ch) in enumerate(s):\n        if ch == '*':\n            shp_idx.append(idx)\n    if not shp_idx:\n        print(0)\n        t -= 1\n        continue\n    mod_idx = shp_idx[len(shp_idx) // 2]\n    ans = 0\n    for idx in shp_idx:\n        ans += abs(mod_idx - idx)\n    half = len(shp_idx) // 2\n    if len(shp_idx) % 2 != 0:\n        ans -= half * (half + 1)\n    else:\n        ans -= half * (half + 1) // 2\n        ans -= half * (half - 1) // 2\n    print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = 0\n    a = []\n    for c in input():\n        if c == '*':\n            s += 1\n        else:\n            a.append(s)\n    res = 0\n    for k in a:\n        res += min(k, s - k)\n    print(res)", "import math\n\ndef cal(s):\n    lenS = len(s)\n    sheeps = []\n    ans = 0\n    for i in range(lenS):\n        if s[i] == '*':\n            sheeps.append(i)\n    if not sheeps:\n        return ans\n    mid = math.ceil(len(sheeps) / 2)\n    midInd = sheeps[mid - 1]\n    cur = 1\n    for i in range(lenS):\n        if s[i] == '*':\n            ans += abs(midInd - i - (mid - cur))\n            cur += 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    print(cal(s))", "import statistics\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    s = input()\n    k = s.count('*') // 2\n    l = list()\n    ac = 0\n    for i in range(0, n):\n        if s[i] == '*':\n            ac += 1\n            if ac == k + 1:\n                break\n    c = 0\n    dc = 0\n    for j in reversed(range(i + 1)):\n        if s[j] == '.':\n            dc += 1\n        else:\n            c += dc\n    dc1 = 0\n    for j in range(i + 1, n):\n        if s[j] == '.':\n            dc1 += 1\n        else:\n            c += dc1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    lst = []\n    for (i, c) in enumerate(s):\n        if c == '*':\n            lst.append(i)\n    mid = len(lst) // 2\n    total = 0\n    for item in lst:\n        total += abs(lst[mid] - item)\n    left = mid\n    right = len(lst) - 1 - mid\n    total = total - (left * (left + 1) // 2 + right * (right + 1) // 2)\n    print(total)", "for a0 in range(int(input())):\n    n = int(input())\n    l = [x for x in input().strip()]\n    ss = []\n    s = 0\n    ans = 0\n    for i in l:\n        if i == '*':\n            s += 1\n        elif s > 0:\n            ss.append(s)\n    for i in ss:\n        ans += min(i, s - i)\n    print(ans)", "def solve(s):\n    ones = []\n    (jumps, median, ind) = (0, 0, 0)\n    for i in range(len(s)):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) == 0:\n        return jumps\n    median = ones[len(ones) // 2]\n    ind = median\n    for i in range(ind, -1, -1):\n        if s[i] == '1':\n            jumps += ind - i\n            ind -= 1\n    ind = median\n    for i in range(ind, len(s)):\n        if s[i] == '1':\n            jumps += i - ind\n            ind += 1\n    return jumps\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    arr = []\n    for i in s:\n        if i == '*':\n            arr.append('1')\n        else:\n            arr.append('0')\n    print(solve(arr))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    index = []\n    for i in range(n):\n        if s[i] == '*':\n            index.append(i)\n    cnt = s.count('*')\n    if cnt > 1:\n        middle = cnt // 2\n        start = index[middle]\n        k = 0\n        ans = 0\n        for i in range(start - middle, start - middle + cnt):\n            ans += abs(i - index[k])\n            k += 1\n        print(ans)\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef get_answer(n, s):\n    total = 0\n    place = []\n    cur = 0\n    for v in s:\n        if v == '*':\n            total += 1\n            place.append(cur)\n        cur += 1\n    if total == 0:\n        return 0\n    i = place[total // 2]\n    totalv = 0\n    for j in range(total):\n        totalv += abs(j + i - total // 2 - place[j])\n    return totalv\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(get_answer(n, s))", "from collections import defaultdict\n\ndef check(mid):\n    c = 0\n    cv = a[mid] - 1\n    for i in range(mid - 1, -1, -1):\n        c += abs(a[i] - cv)\n        cv -= 1\n    cv = a[mid] + 1\n    for i in range(mid + 1, len(a)):\n        c += abs(a[i] - cv)\n        cv += 1\n    return c\nfor i in range(int(input())):\n    n = int(input())\n    d = defaultdict(lambda : 0)\n    s = input()\n    a = []\n    for j in range(n):\n        if s[j] == '*':\n            a.append(j)\n    l = len(a)\n    if l < 2:\n        print(0)\n    else:\n        mid = l // 2\n        print(check(mid))", "from collections import defaultdict\n\ndef check(mid):\n    c = 0\n    cv = a[mid] - 1\n    for i in range(mid - 1, -1, -1):\n        c += abs(a[i] - cv)\n        cv -= 1\n    cv = a[mid] + 1\n    for i in range(mid + 1, len(a)):\n        c += abs(a[i] - cv)\n        cv += 1\n    return c\nfor i in range(int(input())):\n    n = int(input())\n    d = defaultdict(lambda : 0)\n    s = input()\n    a = []\n    for j in range(n):\n        if s[j] == '*':\n            a.append(j)\n    l = len(a)\n    if l < 2:\n        print(0)\n    else:\n        mid = l // 2\n        print(check(mid))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = []\n    for i in range(n):\n        if s[i] == '*':\n            l.append(i)\n    mid = len(l) // 2\n    if mid > 0:\n        mid = l[mid]\n        c = 0\n        ans = 0\n        for i in range(mid, -1, -1):\n            if s[i] == '.':\n                c += 1\n            elif s[i] == '*':\n                ans += c\n        c = 0\n        for i in range(mid + 1, n):\n            if s[i] == '.':\n                c += 1\n            elif s[i] == '*':\n                ans += c\n        print(ans)\n    else:\n        print(0)", "t = int(input())\n\ndef getGapLength(arr, i):\n    k = i\n    count = 0\n    while arr[k] == '.':\n        count += 1\n        k += 1\n    return count\nns = []\nlevels = []\nfor _ in range(t):\n    ns.append(int(input()))\n    levels.append(list(input()))\nfor i in range(t):\n    n = ns[i]\n    level = levels[i]\n    sheep = level.count('*')\n    count = 0\n    j = -1\n    moves = 0\n    while count != sheep:\n        j += 1\n        if level[j] == '*':\n            count += 1\n        elif count != 0:\n            gapSize = getGapLength(level, j)\n            moves += min(count * gapSize, (sheep - count) * gapSize)\n            j += gapSize - 1\n    print(moves)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input().strip())\n    numSheep = 0\n    for c in s:\n        if c == '*':\n            numSheep += 1\n    count = 0\n    curSheep = 0\n    for c in s:\n        if c == '*':\n            curSheep += 1\n        else:\n            count += min(curSheep, numSheep - curSheep)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    index = []\n    for i in range(n):\n        if s[i] == '*':\n            index.append(i)\n    cnt = s.count('*')\n    if cnt > 1:\n        middle = cnt // 2\n        start = index[middle]\n        k = 0\n        ans = 0\n        for i in range(start - middle, start - middle + cnt):\n            ans += abs(i - index[k])\n            k += 1\n        print(ans)\n    else:\n        print(0)"]