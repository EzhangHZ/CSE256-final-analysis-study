["import sys\nfrom functools import partial\nfrom typing import List, Tuple\nsys.setrecursionlimit(10000000)\nn = int(input())\nlimits = tuple(map(int, input().split()))\norder = tuple(sorted(range(n), key=limits.__getitem__))\n\ndef _solve(limits: Tuple[int], order: Tuple[int], heights: List[int], low: int, high: int) -> Tuple[int, List[int]]:\n    if low == high:\n        index = low\n        heights[index] = limits[index]\n        return (limits[index], heights)\n    for index in order:\n        if index >= low and index <= high:\n            break\n    else:\n        msg = f'Could not find an appropriate index for low = {low}, high = {high}'\n        raise ValueError(msg)\n    if low != index:\n        left_heights = heights[:]\n        (left_sum, left_heights) = solve(left_heights, low, index - 1)\n    else:\n        left_sum = -1\n    if high != index:\n        right_heights = heights[:]\n        (right_sum, right_heights) = solve(right_heights, index + 1, high)\n    else:\n        right_sum = -1\n    height = limits[index]\n    left_sum += height * (high - index + 1)\n    right_sum += height * (index - low + 1)\n    if left_sum > right_sum:\n        sums = left_sum\n        heights = left_heights\n        for i in range(index, high + 1):\n            heights[i] = height\n    else:\n        sums = right_sum\n        heights = right_heights\n        for i in range(low, index + 1):\n            heights[i] = height\n    return (sums, heights)\nsolve = partial(_solve, limits, order)\nprint(*solve([0] * n, 0, n - 1)[1])", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "from collections import deque\nn = int(input())\nb = [0]\na = list(map(int, input().split()))\na = b + a\nlef = [0 for i in range(n + 5)]\nansl = [0 for i in range(n + 5)]\nrigh = [0 for i in range(n + 5)]\nansr = [0 for i in range(n + 5)]\nans = -int(2000000000.0)\nfor k in range(1, n + 1):\n    i = k - 1\n    while i > 0 and a[i] > a[k]:\n        i = lef[i]\n    lef[k] = i\n    ansl[k] = ansl[i] + (k - i) * a[k]\nfor k in range(n, 0, -1):\n    i = k + 1\n    while i <= n and a[i] > a[k]:\n        i = righ[i]\n    righ[k] = i\n    ansr[k] = ansr[i] + (i - k) * a[k]\n    if ansr[k] + ansl[k] - a[k] > ans:\n        ans = ansr[k] + ansl[k] - a[k]\n        ind = k\nfor k in range(ind - 1, 0, -1):\n    a[k] = min(a[k], a[k + 1])\nfor k in range(ind + 1, n + 1):\n    a[k] = min(a[k], a[k - 1])\na = deque(a)\na.popleft()\na = list(a)\nprint(*a)", "n = int(input())\nl = list(map(int, input().strip().split()))\n(left, right) = ([0] * n, [0] * n)\ns = [0]\nleft[0] = l[0]\nfor i in range(1, n):\n    while len(s) > 0 and l[s[-1]] > l[i]:\n        s.pop()\n    if len(s) == 0:\n        left[i] = (i + 1) * l[i]\n    else:\n        left[i] = left[s[-1]] + (i - s[-1]) * l[i]\n    s.append(i)\ns = [n - 1]\nright[n - 1] = l[n - 1]\nfor i in range(n - 2, -1, -1):\n    while len(s) > 0 and l[s[-1]] > l[i]:\n        s.pop()\n    if len(s) == 0:\n        right[i] = (n - i) * l[i]\n    else:\n        right[i] = right[s[-1]] + (s[-1] - i) * l[i]\n    s.append(i)\n(max_val, index) = (-1, -1)\nfor i in range(n):\n    if left[i] + right[i] - l[i] > max_val:\n        max_val = left[i] + right[i] - l[i]\n        index = i\nif index != -1:\n    for i in range(index - 1, -1, -1):\n        l[i] = min(l[i + 1], l[i])\n    for i in range(index + 1, n):\n        l[i] = min(l[i], l[i - 1])\nfor i in l:\n    print(i, end=' ')", "import sys\n\ndef get_vals(n, arr, rev):\n    if rev:\n        arr.reverse()\n    st = []\n    vals = [0 for i in range(n)]\n    for i in range(n):\n        while len(st) != 0 and arr[st[-1]] >= arr[i]:\n            st.pop()\n        vals[i] = (i + 1) * arr[i] if len(st) == 0 else (i - st[-1]) * arr[i] + vals[st[-1]]\n        st.append(i)\n    if rev:\n        arr.reverse()\n        vals.reverse()\n    return vals\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lf = get_vals(n, arr, False)\n    rf = get_vals(n, arr, True)\n    (val, pos) = max(((lf[i] + rf[i] - arr[i], i) for i in range(n)))\n    for i in range(pos - 1, -1, -1):\n        arr[i] = min(arr[i], arr[i + 1])\n    for i in range(pos + 1, n):\n        arr[i] = min(arr[i], arr[i - 1])\n    print(' '.join(map(str, arr)) + '\\n')\nmain()", "def rmin(a, n):\n    ans = [-1] * (n + 2)\n    st = [0]\n    res = []\n    for i in range(1, n + 1):\n        while a[st[-1]] > a[i]:\n            ans[st.pop()] = n + 1 - i\n        st.append(i)\n    for i in range(1, n + 1):\n        res.append(ans[i])\n    return res\nn = int(input())\ninf = int(2000000000.0) + 1\nm = [int(x) for x in input().split()]\nm = [-inf] + m + [-inf]\nar = rmin(m, n)\nal = rmin(m[::-1], n)[::-1]\nlm = [0 for i in range(n)]\nrm = lm.copy()\nfor i in range(n):\n    j = n - 1 - i\n    lm[i] = m[i + 1] * (i + 1)\n    rm[j] = (i + 1) * m[j + 1]\n    if al[i] != -1:\n        lm[i] += lm[al[i] - 1] - m[i + 1] * al[i]\n    if ar[j] != -1:\n        rm[j] += rm[n - ar[j]] - m[j + 1] * ar[j]\nth = 0\nfor i in range(n):\n    tmp = lm[i] + rm[i] - m[i + 1]\n    if tmp > th:\n        th = tmp\n        tind = i + 1\ni = tind + 1\nwhile i < n:\n    if m[i + 1] > m[i]:\n        m[i + 1] = m[i]\n    i += 1\ni = tind\nwhile i > 0:\n    if m[i - 1] > m[i]:\n        m[i - 1] = m[i]\n    i -= 1\nprint(*m[1:n + 1])", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List, Mapping\nsys.setrecursionlimit(999999)\nn = int(input())\narr = list(map(int, input().split()))\nsl = [0] * n\nst = []\nfor i in range(n):\n    c = arr[i]\n    sl[i] += c\n    if i:\n        sl[i] += sl[i - 1]\n    while st and arr[st[-1]] > c:\n        p = st.pop()\n        front = -1 if not st else st[-1]\n        mh = c if not st else max(c, arr[st[-1]])\n        sl[i] -= (i - front - 1) * (arr[p] - mh)\n    st.append(i)\nst = []\nsr = [0] * n\nfor i in range(n - 1, -1, -1):\n    c = arr[i]\n    sr[i] += c\n    if i < n - 1:\n        sr[i] += sr[i + 1]\n    while st and arr[st[-1]] > c:\n        p = st.pop()\n        end = n if not st else st[-1]\n        mh = c if not st else max(c, arr[st[-1]])\n        sr[i] -= (end - i - 1) * (arr[p] - mh)\n    st.append(i)\nmx = 0\nfor i in range(n):\n    if sl[i] + sr[i] - arr[i] > sl[mx] + sr[mx] - arr[mx]:\n        mx = i\nfor i in range(mx - 1, -1, -1):\n    arr[i] = min(arr[i], arr[i + 1])\nfor i in range(mx + 1, n):\n    arr[i] = min(arr[i], arr[i - 1])\nprint(*arr)", "import sys\nfrom functools import partial\nfrom typing import List, Tuple\nsys.setrecursionlimit(10000000)\nn = int(input())\nlimits = tuple(map(int, input().split()))\norder = tuple(sorted(range(n), key=limits.__getitem__))\n\ndef _solve(limits: Tuple[int], order: Tuple[int], heights: List[int], low: int, high: int) -> Tuple[int, List[int]]:\n    if low == high:\n        index = low\n        heights[index] = limits[index]\n        return (limits[index], heights)\n    for index in order:\n        if index >= low and index <= high:\n            break\n    else:\n        msg = f'Could not find an appropriate index for low = {low}, high = {high}'\n        raise ValueError(msg)\n    if low != index:\n        left_heights = heights[:]\n        (left_sum, left_heights) = solve(left_heights, low, index - 1)\n    else:\n        left_sum = -1\n    if high != index:\n        right_heights = heights[:]\n        (right_sum, right_heights) = solve(right_heights, index + 1, high)\n    else:\n        right_sum = -1\n    height = limits[index]\n    if left_sum + height * (high - index + 1) > right_sum + height * (index - low + 1):\n        heights = left_heights\n        for i in range(index, high + 1):\n            heights[i] = height\n    else:\n        heights = right_heights\n        for i in range(low, index + 1):\n            heights[i] = height\n    return (sum(heights[low:high + 1]), heights)\nsolve = partial(_solve, limits, order)\nprint(*solve([0] * n, 0, n - 1)[1])", "n = int(input())\nsp = list(map(int, input().split()))\nforw = [0 for i in range(n)]\nbackw = [0 for i in range(n)]\nstack = [(0, -1, 0)]\nfor i in range(n):\n    while sp[i] <= stack[-1][0]:\n        stack.pop()\n    stack.append((sp[i], i, (i - stack[-1][1]) * sp[i] + stack[-1][2]))\n    forw[i] = stack[-1][2]\nrevsp = sp[::-1]\nstack = [(0, -1, 0)]\nfor i in range(n):\n    while revsp[i] <= stack[-1][0]:\n        stack.pop()\n    stack.append((revsp[i], i, (i - stack[-1][1]) * revsp[i] + stack[-1][2]))\n    backw[i] = stack[-1][2]\nbackw = backw[::-1]\ncenter = 0\nans_center = 0\nfor i in range(n):\n    if ans_center < backw[i] + forw[i] - sp[i]:\n        center = i\n        ans_center = backw[i] + forw[i] - sp[i]\nans = [0 for i in range(n)]\nans[center] = sp[center]\ncur = sp[center]\nfor i in range(center - 1, -1, -1):\n    cur = min(cur, sp[i])\n    ans[i] = cur\ncur = sp[center]\nfor i in range(center + 1, n, 1):\n    cur = min(cur, sp[i])\n    ans[i] = cur\nprint(*ans)", "import heapq\nn = int(input())\nM = [int(i) for i in input().split()]\n\ndef f(X):\n    H = []\n    Ret = [0] * n\n    tot = 0\n    for (i, x) in enumerate(X):\n        haba = 0\n        while H:\n            h = -heapq.heappop(H)\n            (t, y) = (h // 10 ** 6, h % 10 ** 6)\n            if t <= x:\n                heapq.heappush(H, -(t * 10 ** 6 + y))\n                break\n            else:\n                tot -= (t - x) * y\n                haba += y\n        heapq.heappush(H, -(x * 10 ** 6 + haba + 1))\n        Ret[i] = tot + x\n        tot += x\n    return Ret\n(A1, A2) = (f(M), f(M[::-1])[::-1])\nA = [A1[i] + A2[i] - M[i] for i in range(n)]\nAns = [0] * n\nma = max(A)\nfor i in range(n):\n    if A[i] == ma:\n        m = i\nAns[m] = M[m]\nfor i in reversed(range(m)):\n    Ans[i] = min(Ans[i + 1], M[i])\nfor i in range(m + 1, n):\n    Ans[i] = min(Ans[i - 1], M[i])\nprint(*Ans)", "def loccentr(ci, razr):\n    trazr = razr[:]\n    (sum, lm, rm, l, r, n) = (razr[ci], razr[ci], razr[ci], ci - 1, ci + 1, len(razr))\n    while l >= 0:\n        if trazr[l] < lm:\n            lm = trazr[l]\n        else:\n            trazr[l] = lm\n        sum += lm\n        l -= 1\n    while r < n:\n        if razr[r] < rm:\n            rm = trazr[r]\n        else:\n            trazr[r] = rm\n        sum += rm\n        r += 1\n    trazr.append(sum)\n    return trazr\nn = int(input())\nrazr = list(map(int, input().split()))\nmrazr = loccentr(0, razr)[:]\nfor i in range(1, n - 1):\n    if razr[i] > razr[i - 1] and razr[i] >= razr[i + 1]:\n        trazr = loccentr(i, razr)\n        if trazr[n] > mrazr[n]:\n            mrazr = trazr[:]\ntrazr = loccentr(n - 1, razr)\nif trazr[n] > mrazr[n]:\n    mrazr = trazr[:]\nprint(*mrazr[:n])", "def set_inc(lis6):\n    lis6 = lis6[::-1]\n    if len(lis6) != 0:\n        count = lis6[0]\n        for j1 in range(len(lis6)):\n            if lis6[j1] > count:\n                lis6[j1] = count\n            count = lis6[j1]\n    return lis6[::-1]\n\ndef set_dec(lis5):\n    if len(lis5) != 0:\n        count2 = lis5[0]\n        for j2 in range(len(lis5)):\n            if lis5[j2] > count2:\n                lis5[j2] = count2\n            count2 = lis5[j2]\n    return lis5\n\ndef peak(lis, a1):\n    lis2 = []\n    a2 = max(lis)\n    for i in range(a1):\n        if lis[i] == a2:\n            lis2.append(i)\n    return lis2\nn1 = int(input())\nm1 = list(map(int, input().split(' ')))\na3 = max(m1)\nlis4 = []\nfor mx in range(len(m1)):\n    lis3 = set_inc(m1[0:mx]) + set_dec(m1[mx:n1])\n    lis4.append(sum(lis3))\nq1 = peak(lis4, len(lis4))[0]\nmx2 = q1\nprint(' '.join(list(map(str, set_inc(m1[0:q1]) + set_dec(m1[q1:n1])))))", "import sys\nsys.setrecursionlimit(10 ** 9)\nn = int(input())\nm = list(map(int, input().split()))\n\ndef solution(start, end, fill):\n    if start > end:\n        return (0, [])\n    if start == end:\n        return (m[start] - fill, [m[start] - fill])\n    min_value = 1000000000\n    min_index = []\n    for i in range(start, end + 1):\n        if m[i] < min_value:\n            min_value = m[i]\n            min_index = [i]\n        elif m[i] == min_value:\n            min_index.append(i)\n    up_fill = start_saved = 0\n    top_res = []\n    start_index = start\n    for index in min_index:\n        (value, value2) = solution(start_index, index - 1, min_value)\n        if value > up_fill:\n            up_fill = value\n            start_saved = start_index\n            top_res = value2\n        start_index = index + 1\n    (value, value2) = solution(start_index, end, min_value)\n    if value > up_fill:\n        up_fill = value\n        start_saved = start_index\n        top_res = value2\n    result = [min_value - fill for _ in range(end - start + 1)]\n    for (i, v) in enumerate(top_res):\n        result[start_saved - start + i] += v\n    return ((min_value - fill) * (end - start + 1) + up_fill, result)\nprint(' '.join(map(str, solution(0, n - 1, 0)[1])))", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    M = [int(x) for x in input().split()]\n    ans = float('inf')\n    ansi = 0\n    for i in range(N):\n        tmp = 0\n        mi = M[i]\n        for j in range(i + 1, N):\n            if M[j] > mi:\n                tmp += M[j] - mi\n            else:\n                mi = M[j]\n        mi = M[i]\n        for j in range(i - 1, -1, -1):\n            if M[j] > mi:\n                tmp += M[j] - mi\n            else:\n                mi = M[j]\n        tmpans = ans\n        ans = min(ans, tmp)\n        if ans != tmpans:\n            ansi = i\n    mi = M[ansi]\n    for j in range(ansi + 1, N):\n        if M[j] > mi:\n            M[j] = mi\n        else:\n            mi = M[j]\n    mi = M[ansi]\n    for j in range(ansi - 1, -1, -1):\n        if M[j] > mi:\n            M[j] = mi\n        else:\n            mi = M[j]\n    print(*M)\nmain()", "n = int(input())\nms = [int(a) for a in input().split()]\nms.insert(0, 0)\nms.insert(len(ms), 0)\nan = []\nan2 = [0]\nfor i in range(n + 2):\n    an.append(10 ** 10)\nfor i in range(n + 2):\n    try:\n        if ms[i] <= ms[i + 1] and ms[i + 1] > ms[i + 2]:\n            peak = i + 1\n            an[peak] = ms[peak]\n            for j in range(peak - 1, -1, -1):\n                an[j] = min(an[j + 1], ms[j])\n            for j in range(peak + 1, n + 2, 1):\n                an[j] = min(an[j - 1], ms[j])\n        if sum(an[1:-1]) > sum(an2) and an[1] != 10 ** 10:\n            an2 = an[1:-1]\n    except:\n        pass\nfor a in an2:\n    print(a, end=' ')", "def f():\n    n = int(input())\n    M = [int(s) for s in input().split()]\n\n    def goLeftFrom(s):\n        sum = 0\n        cur = M[s]\n        for i in range(s - 1, -1, -1):\n            cur = min(cur, M[i])\n            sum += cur\n        return sum\n\n    def goRightFrom(s):\n        sum = 0\n        cur = M[s]\n        for i in range(s + 1, n):\n            cur = min(cur, M[i])\n            sum += cur\n        return sum\n    ans = 0\n    choose = -1\n    for i in range(n):\n        l = goLeftFrom(i)\n        r = goRightFrom(i)\n        if l + r + M[i] > ans:\n            choose = i\n            ans = l + r + M[i]\n    rt = [0] * n\n    s = choose\n    rt[s] = M[s]\n    cur = M[s]\n    for i in range(s - 1, -1, -1):\n        cur = min(cur, M[i])\n        rt[i] = cur\n    cur = M[s]\n    for i in range(s + 1, n):\n        cur = min(cur, M[i])\n        rt[i] = cur\n    print(' '.join((str(num) for num in rt)))\nf()", "n = int(input())\nm = []\nlis = input().split()\nfor i in lis:\n    m.append(int(i))\nmaxind = [0]\nmaxx = m[0]\nfor i in range(1, n):\n    if m[i] > maxx:\n        maxind = [i]\n        maxx = m[i]\n    elif m[i] == maxx:\n        maxind.append(i)\n\ndef find(indd):\n    sum = m[indd]\n    minn = m[indd]\n    for i in range(indd - 1, -1, -1):\n        minn = min(m[i], minn)\n        sum += minn\n    minn = m[indd]\n    for i in range(indd + 1, n):\n        minn = min(m[i], minn)\n        sum += minn\n    return sum\nab = 0\nind = 0\nfor i in range(n):\n    l = find(i)\n    if l > ab:\n        ab = l\n        ind = i\na = [0] * n\na[ind] = m[ind]\nminn = m[ind]\nfor i in range(ind - 1, -1, -1):\n    minn = min(m[i], minn)\n    a[i] = minn\nminn = m[ind]\nfor i in range(ind + 1, n):\n    minn = min(m[i], minn)\n    a[i] = minn\nfor i in a:\n    print(i, end=' ')\nprint()", "def inc(a):\n    if not a:\n        return []\n    b = []\n    x = a[-1]\n    n = len(a)\n    for i in range(n - 1, -1, -1):\n        x = min(x, a[i])\n        b.append(x)\n    return b[::-1]\n\ndef dec(a):\n    if not a:\n        return []\n    b = []\n    x = a[0]\n    n = len(a)\n    for i in range(n):\n        x = min(x, a[i])\n        b.append(x)\n    return b\nn = int(input())\na = [int(i) for i in input().split()]\nmax_s = sum(dec(a))\nans = dec(a)\nfor i in range(n):\n    x = inc(a[:i + 1])\n    y = dec(a[i:])\n    s = sum(x) + sum(y) - a[i]\n    if s > max_s:\n        max_s = s\n        ans = x + y[1:]\nfor i in ans:\n    print(i, end=' ', flush=False)\nprint()", "from collections import Counter, defaultdict, deque\nfrom math import *\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = []\n    best = 0\n    for i in range(n):\n        b = [0] * n\n        cur = arr[i]\n        b[i] = cur\n        for j in range(i - 1, -1, -1):\n            cur = min(cur, arr[j])\n            b[j] = cur\n        cur = arr[i]\n        for j in range(i + 1, n):\n            cur = min(cur, arr[j])\n            b[j] = cur\n        s = sum(b)\n        if s > best:\n            ans = b\n            best = s\n    print(*ans)\ntt = 1\nfor test in range(tt):\n    solve()", "n = int(input())\nres = list(map(int, input().split()))\ndi = {}\nfor j in range(0, n):\n    r = l = res[j]\n    m = res.copy()\n    for i in range(j + 1, n):\n        if m[i] > r:\n            m[i] = r\n        r = m[i]\n    for i in range(j - 1, -1, -1):\n        if m[i] > l:\n            m[i] = l\n        l = m[i]\n    di[sum(m)] = m\nfor i in di[max(di.keys())]:\n    print(i, end=' ')", "n = int(input())\nnums = [int(x) for x in input().split()]\nres = []\nfor i in range(n):\n    tmp = [0] * n\n    tmp[i] = nums[i]\n    t = nums[i]\n    for j in range(i - 1, -1, -1):\n        if nums[j] > t:\n            tmp[j] = t\n        else:\n            t = nums[j]\n        tmp[j] = t\n    t = nums[i]\n    for j in range(i + 1, n):\n        if nums[j] > t:\n            tmp[j] = t\n        else:\n            t = nums[j]\n        tmp[j] = t\n    res.append(tmp)\nres = max(res, key=sum)\nres = ' '.join([str(x) for x in res])\nprint(res)", "import os\nimport sys\n\ndef main():\n    n = int(input())\n    b = list(map(int, input().split()))\n    val = 0\n    ans = []\n    for i in range(n):\n        t = b[:]\n        for j in range(i - 1, -1, -1):\n            t[j] = min(t[j], t[j + 1])\n        for j in range(i + 1, n):\n            t[j] = min(t[j], t[j - 1])\n        if sum(t) > val:\n            val = sum(t)\n            ans = t\n    print(*ans)\nmain()", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\narr = list(map(int, input().split()))\nans = []\nmm = 0\nfor i in range(n):\n    temp = arr[:]\n    for j in range(i - 1, -1, -1):\n        if temp[j] > temp[j + 1]:\n            temp[j] = temp[j + 1]\n    for j in range(i + 1, n):\n        if temp[j] > temp[j - 1]:\n            temp[j] = temp[j - 1]\n    ss = sum(temp)\n    if ss > mm:\n        ans = temp[:]\n        mm = ss\nfor i in ans:\n    print(i, end=' ')\nprint()", "n = int(input())\nlis = list(map(int, input().split()))\nsumm = 0\ni = 0\nans = []\nwhile i < n:\n    wor = lis.copy()\n    peak = lis[i]\n    for j in range(i - 1, -1, -1):\n        if wor[j] > wor[j + 1]:\n            wor[j] = wor[j + 1]\n    for j in range(i, n - 1):\n        if wor[j] < wor[j + 1]:\n            wor[j + 1] = wor[j]\n    if sum(wor) > summ:\n        summ = sum(wor)\n        ans = wor.copy()\n    i += 1\nprint(' '.join(list(map(str, ans))))", "n = int(input())\nl = list(map(int, input().split()))\nmax1 = 0\np = []\nfor i in range(n):\n    a = [0] * n\n    b = l[i]\n    for j in range(i - 1, -1, -1):\n        a[j] = min(b, l[j])\n        b = a[j]\n    b = l[i]\n    for j in range(i + 1, n):\n        a[j] = min(b, l[j])\n        b = a[j]\n    a[i] = l[i]\n    sum1 = sum(a)\n    if sum1 > max1:\n        max1 = sum1\n        p = a\nprint(*p)", "n = int(input())\narr = [int(j) for j in input().split()]\nma = -1\nfor i in range(0, n):\n    arr2 = arr[:]\n    for j in range(i - 1, -1, -1):\n        if arr2[j] > arr2[j + 1]:\n            arr2[j] = arr2[j + 1]\n    for j in range(i + 1, n):\n        if arr2[j] > arr2[j - 1]:\n            arr2[j] = arr2[j - 1]\n    if sum(arr2) > ma:\n        ma = sum(arr2)\n        ans = arr2[:]\nprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\nmaxx = 0\nfor i in range(n):\n    s = a[i]\n    k = a[i]\n    b = [0] * n\n    b[i] = k\n    for j in range(i + 1, n):\n        if a[j] > k:\n            b[j] = k\n        else:\n            b[j] = a[j]\n            k = a[j]\n        s += b[j]\n    k = a[i]\n    for j in range(i - 1, -1, -1):\n        if a[j] > k:\n            b[j] = k\n        else:\n            b[j] = a[j]\n            k = a[j]\n        s += b[j]\n    if s > maxx:\n        maxx = s\n        c = b\nprint(' '.join((str(x) for x in c)))", "n = int(input())\nm = tuple(map(int, input().split()))\nma = list(m)\nbest = 0\ncurlimit = m[0]\nfor i in range(n):\n    if m[i] > curlimit:\n        ma[i] = curlimit\n    if curlimit > m[i]:\n        curlimit = m[i]\n    best += curlimit\nbesti = 0\nbestseq = ma\nfor i in range(n):\n    ma = list(m)\n    curlimit = m[i]\n    curbest = curlimit\n    for j in range(i + 1, n):\n        if m[j] > curlimit:\n            ma[j] = curlimit\n        if curlimit > m[j]:\n            curlimit = m[j]\n        curbest += curlimit\n    curlimit = m[i]\n    for j in range(i - 1, -1, -1):\n        if m[j] > curlimit:\n            ma[j] = curlimit\n        if curlimit > m[j]:\n            curlimit = m[j]\n        curbest += curlimit\n    if curbest > best:\n        best = curbest\n        besti = i\n        bestseq = ma\nprint(*bestseq)", "n = int(input())\na = list(map(int, input().split()))\nm = -1\nmb = []\nfor mi in range(n):\n    b = [-1] * n\n    b[mi] = a[mi]\n    for i in range(mi - 1, -1, -1):\n        if a[i] > b[i + 1]:\n            b[i] = b[i + 1]\n        else:\n            b[i] = a[i]\n    for i in range(mi + 1, n):\n        if a[i] > b[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = a[i]\n    if m < sum(b):\n        m = sum(b)\n        mb = b\nprint(*mb)", "n = int(input())\nm = list(map(int, input().split()))\nans = []\nacval = 0\nfor peak in range(n):\n    lans = [0] * n\n    val = 0\n    prevmax = m[peak]\n    l = peak\n    while l >= 0:\n        if m[l] >= prevmax:\n            val += prevmax\n            lans[l] = prevmax\n        else:\n            prevmax = m[l]\n            val += m[l]\n            lans[l] = m[l]\n        l -= 1\n    r = peak + 1\n    prevmax = m[peak]\n    while r < n:\n        if prevmax <= m[r]:\n            val += prevmax\n            lans[r] = prevmax\n        else:\n            prevmax = m[r]\n            val += prevmax\n            lans[r] = prevmax\n        r += 1\n    if acval < val:\n        ans = list(lans)\n        acval = val\nprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\nm = -1\nmb = []\nfor mi in range(n):\n    b = [-1] * n\n    b[mi] = a[mi]\n    for i in range(mi - 1, -1, -1):\n        if a[i] > b[i + 1]:\n            b[i] = b[i + 1]\n        else:\n            b[i] = a[i]\n    for i in range(mi + 1, n):\n        if a[i] > b[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = a[i]\n    if m < sum(b):\n        m = sum(b)\n        mb = b\nprint(*mb)", "n = int(input())\na = list(map(int, input().split()))\nm = -1\nmb = []\nfor mi in range(n):\n    b = [-1] * n\n    b[mi] = a[mi]\n    for i in range(mi - 1, -1, -1):\n        if a[i] > b[i + 1]:\n            b[i] = b[i + 1]\n        else:\n            b[i] = a[i]\n    for i in range(mi + 1, n):\n        if a[i] > b[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = a[i]\n    if m < sum(b):\n        m = sum(b)\n        mb = b\nprint(*mb)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\ncap = list(map(int, input().split()))\nsolution = [0 for i in range(n)]\nbest = 0\nbestsum = 0\nfor i in range(0, n):\n    max_height = cap[i]\n    for j in range(i, n):\n        max_height = min(max_height, cap[j])\n        solution[j] = max_height\n    max_height = cap[i]\n    for j in range(1, i + 1):\n        max_height = min(max_height, cap[i - j])\n        solution[i - j] = max_height\n    newsum = sum(solution)\n    if newsum > bestsum:\n        bestsum = newsum\n        best = i\nhighest = best\nmax_height = cap[highest]\nfor i in range(highest, n):\n    max_height = min(max_height, cap[i])\n    solution[i] = max_height\nmax_height = cap[highest]\nfor i in range(0, highest + 1):\n    max_height = min(max_height, cap[highest - i])\n    solution[highest - i] = max_height\nfor i in range(n):\n    print(solution[i], end=' ')", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    M = [int(m) for m in input().split()]\n    maxFloor = -1\n    Ans = [-1] * N\n    for i in range(N):\n        tAns = [-1 for _ in range(N)]\n        tAns[i] = M[i]\n        totalFloor = M[i]\n        for j in range(i - 1, -1, -1):\n            tAns[j] = min(M[j], tAns[j + 1])\n            totalFloor += tAns[j]\n        for k in range(i + 1, N):\n            tAns[k] = min(M[k], tAns[k - 1])\n            totalFloor += tAns[k]\n        if tAns[0] <= 0 or tAns[N - 1] <= 0:\n            continue\n        if maxFloor < totalFloor:\n            maxFloor = totalFloor\n            for (a, b) in enumerate(tAns):\n                Ans[a] = b\n    print(' '.join(map(str, Ans)))\n    return 0\nsolve()", "n = int(input())\nB = list(map(int, input().split()))\nans = 0\nansL = []\nfor i in range(n):\n    cB = B.copy()\n    if i >= 1:\n        for j in range(i - 1, -1, -1):\n            cB[j] = min(cB[j + 1], cB[j])\n    if i <= n - 2:\n        for k in range(i + 1, n):\n            cB[k] = min(cB[k - 1], cB[k])\n    sumb = sum(cB)\n    if ans <= sumb:\n        ans = sumb\n        ansL = cB[:]\nprint(*ansL)", "n = int(input())\nb = list(map(int, input().split()))\nbest_ans = None\nbest_sum = 0\nfor i in range(n):\n    ans = b[:]\n    for j in range(i + 1, n):\n        ans[j] = min(ans[j], ans[j - 1])\n    for j in range(i - 1, -1, -1):\n        ans[j] = min(ans[j], ans[j + 1])\n    s = sum(ans)\n    if s > best_sum:\n        best_sum = s\n        best_ans = ans\nfor i in best_ans:\n    print(i, end=' ')", "N = int(input())\nL = list(map(int, input().split()))\nMAX = 0\nANS = []\nfor i in range(N):\n    B = L[:]\n    for j in range(i - 1, -1, -1):\n        B[j] = min(B[j], B[j + 1])\n    for j in range(i + 1, N):\n        B[j] = min(B[j], B[j - 1])\n    S = sum(B)\n    if S > MAX:\n        MAX = S\n        ANS = B[:]\nprint(*ANS)", "n = int(input())\ns = [int(i) for i in input().split()]\np = [0] * n\nmx = 0\nfor i in range(0, n):\n    psum = s[i]\n    for j in range(i, -1, -1):\n        psum = min(s[j], psum)\n        p[i] += psum\n    psum = s[i]\n    for j in range(i + 1, n):\n        psum = min(s[j], psum)\n        p[i] += psum\n    if mx < p[i]:\n        mx = p[i]\n        mx_i = i\ni = mx_i\nans = [0] * n\npsum = s[mx_i]\nfor j in range(i, -1, -1):\n    psum = min(s[j], psum)\n    ans[j] = psum\npsum = s[mx_i]\nfor j in range(i + 1, n):\n    psum = min(s[j], psum)\n    ans[j] = psum\nprint(*ans)", "a = int(input())\nb = list(map(int, input().split()))\nrandom = []\ncount = 0\nfor i in range(a):\n    c = b.copy()\n    for j in range(i - 1, -1, -1):\n        c[j] = min(c[j], c[j + 1])\n    for j in range(i + 1, a):\n        c[j] = min(c[j], c[j - 1])\n    if sum(c) > count:\n        (count, random) = (sum(c), c)\nprint(*random)", "n = int(input())\na = list(map(int, input().split()))\nsuma = 0\nans = []\nfor i in range(n):\n    t = a[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    d = sum(t)\n    if d > suma:\n        suma = d\n        ans = t\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "import math\nn = int(input())\nbuldings = list(map(int, input().split()))\ntotal = 0\nanswer = []\nfor index in range(n):\n    temp = buldings[:]\n    for j in range(index - 1, -1, -1):\n        temp[j] = min(temp[j], temp[j + 1])\n    for j in range(index + 1, n):\n        temp[j] = min(temp[j], temp[j - 1])\n    tempTotal = sum(temp)\n    if tempTotal > total:\n        total = tempTotal\n        answer = temp\nprint(*answer)", "n = int(input())\narr = list(map(int, input().split()))\nval = 0\nans = []\nfor i in range(n):\n    t = arr[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > val:\n        val = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\nmax_floors = list(map(int, input().split(' ')))\nbest_solution = [0] * n\nbest_total_floors = 0\nfor (i, mfi) in enumerate(max_floors):\n    solution = max_floors.copy()\n    for j in range(i - 1, -1, -1):\n        solution[j] = min(max_floors[j], solution[j + 1])\n    for j in range(i + 1, len(max_floors)):\n        solution[j] = min(max_floors[j], solution[j - 1])\n    solution_total_floors = sum(solution)\n    if solution_total_floors > best_total_floors:\n        best_solution = solution\n        best_total_floors = solution_total_floors\nprint(' '.join(map(str, best_solution)))", "n = int(input())\nm = list(map(int, input().split()))\nsums = 0\nans = []\nfor i in range(n):\n    t = m[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    s = sum(t)\n    if s > sums:\n        sums = s\n        ans = t\nprint(*ans)", "n = int(input())\nm = list(map(int, input().split()))\nans = []\ntotalmax = 0\nfor top in range(n):\n    lst = [0] * n\n    lst[top] = m[top]\n    for i in range(top - 1, -1, -1):\n        lst[i] = min(lst[i + 1], m[i])\n    for i in range(top + 1, n):\n        lst[i] = min(lst[i - 1], m[i])\n    total = sum(lst)\n    if totalmax < total:\n        ans = lst\n        totalmax = total\nprint(*ans, sep=' ')", "n = int(input())\nhmax = list(map(int, input().split()))\nans = 0\nseq: list\nfor i in range(n):\n    sumi = 0\n    cur = hmax[i]\n    seqi = [0] * n\n    for j in range(i, n):\n        cur = min(cur, hmax[j])\n        seqi[j] = cur\n        sumi += cur\n    cur = hmax[i]\n    for j in range(i - 1, -1, -1):\n        cur = min(cur, hmax[j])\n        seqi[j] = cur\n        sumi += cur\n    if sumi >= ans:\n        seq = seqi\n        ans = sumi\nprint(*seq)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    d = sum(t)\n    if d > su:\n        su = d\n        ans = t\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nsu = 0\nans = []\nfor i in range(n):\n    t = l[:]\n    for j in range(i - 1, -1, -1):\n        t[j] = min(t[j], t[j + 1])\n    for j in range(i + 1, n):\n        t[j] = min(t[j], t[j - 1])\n    if sum(t) > su:\n        su = sum(t)\n        ans = t\nprint(*ans)", "n = int(input())\nm = list(map(int, input().split()))\nans = []\ncnt = 0\nfor i in range(n):\n    a = m.copy()\n    for j in range(i - 1, -1, -1):\n        a[j] = min(a[j], a[j + 1])\n    for j in range(i + 1, n):\n        a[j] = min(a[j], a[j - 1])\n    if sum(a) > cnt:\n        (cnt, ans) = (sum(a), a)\nprint(*ans)", "n = int(input())\nl = list(map(int, input().split()))\nmax_floor = 0\nl2 = [0] * n\nl1 = [0] * n\nfor i in range(n):\n    floor = 0\n    t = l[i]\n    a = i - 1\n    while a >= 0:\n        if l[a] <= t:\n            t = l[a]\n        l1[a] = t\n        a -= 1\n    l1[i] = l[i]\n    b = i + 1\n    t = l[i]\n    while b < n:\n        if t >= l[b]:\n            t = l[b]\n        l1[b] = t\n        b += 1\n    floor = sum(l1)\n    if floor >= max_floor:\n        max_floor = floor\n        for m in range(n):\n            l2[m] = l1[m]\nfor i in l2:\n    print(i, end=' ')", "n = int(input())\nl = list(map(int, input().split()))\nb = max(l)\nsu = 0\nans = []\nfor i in range(n):\n    z = l[:]\n    for j in range(i - 1, -1, -1):\n        z[j] = min(z[j], z[j + 1])\n    for j in range(i + 1, n):\n        z[j] = min(z[j], z[j - 1])\n    if su < sum(z):\n        su = sum(z)\n        ans = z\nprint(*ans)", "n = int(input())\nm = list(map(int, input().split()))\nstate = []\nsm = 0\nfor i in range(n):\n    tmp = m[:]\n    for j in range(i - 1, -1, -1):\n        tmp[j] = min(tmp[j], tmp[j + 1])\n    for j in range(i + 1, n):\n        tmp[j] = min(tmp[j], tmp[j - 1])\n    tm = sum(tmp)\n    if tm > sm:\n        sm = tm\n        state = tmp\nprint(*state)", "n = int(input())\nl = list(map(int, input().split()))\nl2 = [(e, i) for (i, e) in enumerate(l)]\nl2.sort(reverse=True)\nif l2[-1][0] == l2[0][0]:\n    print(' '.join(map(str, l)))\n    exit(0)\nm = 0\nfor e in l2:\n    if e[0] == l2[0][0]:\n        m += 1\nl4 = n * [0]\nfor e in l2:\n    l3 = n * [0]\n    l3[e[1]] = e[0]\n    for i in reversed(range(e[1])):\n        l3[i] = min(l3[i + 1], l[i])\n    for i in range(e[1] + 1, n):\n        l3[i] = min(l3[i - 1], l[i])\n    if sum(l4) < sum(l3):\n        l4 = l3\nprint(' '.join(map(str, l4)))", "n = int(input())\nm = list(map(int, input().split()))\nmold = list(m)\nmres = [0]\nfor ind in range(n):\n    m = list(mold)\n    for i in range(ind + 1, n):\n        m[i] = min(m[i - 1], m[i])\n    for i in range(ind - 1, -1, -1):\n        m[i] = min(m[i + 1], m[i])\n    if sum(m) >= sum(mres):\n        mres = list(m)\nprint(' '.join(list(map(str, mres))))", "R = lambda : map(int, input().split())\nn = int(input())\narr = list(R())\nres = [0] * n\nfor i in range(n):\n    tmp = [0] * n\n    tmp[i] = arr[i]\n    for j in range(i - 1, -1, -1):\n        tmp[j] = min(tmp[j + 1], arr[j])\n    for j in range(i + 1, n):\n        tmp[j] = min(tmp[j - 1], arr[j])\n    if sum(res) < sum(tmp):\n        res = tmp\nfor x in res:\n    print(x, end=' ')", "import sys\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nres = [0] * N\nfor i in range(N):\n    t = [0] * N\n    t[i] = a[i]\n    for j in range(i, 0, -1):\n        t[j - 1] = min(t[j], a[j - 1])\n    for j in range(i, N - 1):\n        t[j + 1] = min(t[j], a[j + 1])\n    if sum(t) > sum(res):\n        res = t\nprint(*res)", "n = int(input())\nl = list(map(int, input().split()))\nk = []\np = -1\nfor i in range(n):\n    mn = l[i]\n    tem = [0] * n\n    tem[i] = l[i]\n    c = l[i]\n    for j in range(i - 1, -1, -1):\n        mn = min(mn, l[j])\n        tem[j] = mn\n        c += mn\n    mn = l[i]\n    for j in range(i + 1, n):\n        mn = min(mn, l[j])\n        tem[j] = mn\n        c += mn\n    if c > p:\n        p = c\n        k = tem\nprint(*k)", "n = int(input())\nfloors = list(map(int, input().split()))\nans = []\ntotal = 0\nfor i in range(n):\n    b = n * [0]\n    b[i] = floors[i]\n    s = 0\n    for j in range(i - 1, -1, -1):\n        b[j] = min(floors[j], b[j + 1])\n    for j in range(i + 1, n):\n        b[j] = min(floors[j], b[j - 1])\n    for ele in b:\n        s += ele\n    if s > total:\n        total = s\n        ans = b[:]\nfor i in ans:\n    print(i, end=' ')", "n = int(input(''))\nm = list(map(int, input('').split(' ')))\nv = set()\nfor i in range(1, n - 1):\n    if m[i] < m[i - 1]:\n        if m[i] < m[i + 1]:\n            v.add(i + 1)\n        v.add(i - 1)\nans = [0] * n\nma = 0\nif len(v) == 0:\n    ans = m\nfor e in v:\n    c = [0] * n\n    mc = 0\n    c[e] = m[e]\n    mc += m[e]\n    for i in range(e - 1, -1, -1):\n        c[i] = min(m[i], c[i + 1])\n        mc += c[i]\n    for i in range(e + 1, n):\n        c[i] = min(m[i], c[i - 1])\n        mc += c[i]\n    if mc > ma:\n        ma = mc\n        ans = c.copy()\nfor i in range(n):\n    print(ans[i], end=' ')", "n = int(input())\nM = list(map(int, input().split()))\nmaxsum = 0\nfor i in range(n):\n    a = M.copy()\n    Sum = a[i]\n    for j in range(i + 1, n):\n        a[j] = min(a[j], a[j - 1])\n        Sum += a[j]\n    for j in range(i - 1, -1, -1):\n        a[j] = min(a[j], a[j + 1])\n        Sum += a[j]\n    if Sum > maxsum:\n        maxsum = Sum\n        array = a.copy()\nfor i in array:\n    print(i, end=' ')", "from copy import copy\nfrom math import *\n\ndef arr_float_inp():\n    return [float(s) for s in input().split()]\n\ndef arr_int_inp():\n    return [int(s) for s in input().split()]\n\ndef int_inp():\n    return int(input())\n\ndef float_inp():\n    return float(input())\n\ndef comp(a):\n    return a[0]\n\ndef gcd(a, b):\n    if b != 0:\n        return gcd(b, a % b)\n    else:\n        return a\nn = int_inp()\narr = arr_int_inp()\nouts = []\nfor j in range(len(arr)):\n    max_el = (j, arr[j])\n    new_arr = [0 for _ in range(len(arr))]\n    new_arr[max_el[0]] = max_el[1]\n    right = max_el[1]\n    for i in range(max_el[0], -1, -1):\n        new_arr[i] = min(arr[i], right)\n        right = new_arr[i]\n    left = max_el[1]\n    for i in range(max_el[0], len(arr)):\n        new_arr[i] = min(arr[i], left)\n        left = new_arr[i]\n    outs.append(new_arr)\nmax_out = (sum(outs[0]), outs[0])\nfor out in outs:\n    new_sum = sum(out)\n    if new_sum > max_out[0]:\n        max_out = (new_sum, out)\nfor el in max_out[1]:\n    print(el, end=' ')", "t = int(input())\nl = list(map(int, input().split()))\nans = 0\nm = 0\nfor i in range(t):\n    s = 0\n    a = l[:]\n    for j in range(i, 0, -1):\n        if a[j] < a[j - 1]:\n            a[j - 1] = a[j]\n        s += a[j - 1]\n    s += a[i]\n    for k in range(i, t - 1):\n        if a[k] < a[k + 1]:\n            a[k + 1] = a[k]\n        s += a[k + 1]\n    if s > ans:\n        ans = s\n        m = i\nfor i in range(m, 0, -1):\n    if l[i] < l[i - 1]:\n        l[i - 1] = l[i]\nfor i in range(m, t - 1):\n    if l[i + 1] > l[i]:\n        l[i + 1] = l[i]\nprint(*l)", "n = int(input())\nl = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    dp = l[:]\n    count = dp[i]\n    for j in range(i + 1, n):\n        dp[j] = min(dp[j - 1], dp[j])\n        count += dp[j]\n    for j in range(i - 1, -1, -1):\n        dp[j] = min(dp[j + 1], dp[j])\n        count += dp[j]\n    if count > ans:\n        ans = count\n        al = dp[:]\nprint(*al)", "n = int(input())\narr = list(map(int, input().split()))\nans = 0\np = 0\nfor i in range(n):\n    curr = arr[i]\n    prev = arr[i]\n    for j in range(i - 1, -1, -1):\n        prev = min(prev, arr[j])\n        curr += prev\n    prev = arr[i]\n    for k in range(i + 1, n):\n        prev = min(prev, arr[k])\n        curr += prev\n    if curr > ans:\n        p = i\n        ans = curr\nfor i in range(p - 1, -1, -1):\n    arr[i] = min(arr[i], arr[i + 1])\nfor i in range(p + 1, n):\n    arr[i] = min(arr[i], arr[i - 1])\nprint(*arr)", "from sys import exit\n\ndef iis():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef liis():\n    return list(map(int, input().split()))\nn = ii()\na = liis()\nans = 0\nfor i in range(n):\n    new_a = a[:]\n    start = i\n    end = i\n    while start > 0:\n        start -= 1\n        new_a[start] = min(new_a[start], new_a[start + 1])\n    while end < n - 1:\n        end += 1\n        new_a[end] = min(new_a[end], new_a[end - 1])\n    if sum(new_a) > ans:\n        new_ans = new_a[:]\n        ans = sum(new_a)\nprint(' '.join(map(str, new_ans)))", "n = int(input())\na = list(map(int, input().split()))\nmi = -1\nfor i in range(n):\n    a1 = a[:]\n    for j in range(i - 1, -1, -1):\n        if a1[j] > a1[j + 1]:\n            a1[j] = a1[j + 1]\n    for j in range(i + 1, n):\n        if a1[j] > a1[j - 1]:\n            a1[j] = a1[j - 1]\n    if sum(a1) > mi:\n        mi = sum(a1)\n        r = a1[:]\nprint(*r)", "N = int(input())\nm = list(map(int, input().split()))\nsumAns = 0\nans = []\nfor i in range(N):\n    l = [0 for i in range(N)]\n    Sum = 0\n    l[i] = m[i]\n    Sum += l[i]\n    for j in reversed(range(0, i)):\n        l[j] = min(m[j], l[j + 1])\n        Sum += l[j]\n    for j in range(i + 1, N):\n        l[j] = min(m[j], l[j - 1])\n        Sum += l[j]\n    if Sum > sumAns:\n        sumAns = Sum\n        ans = l\nprint(' '.join(map(str, ans)))", "n = int(input())\nm = list(map(int, input().split()))\nmx = 0\nans = list()\nfor pos in range(n):\n    mlis = [0 for i in range(n)]\n    sum = m[pos]\n    mlis[pos] = m[pos]\n    for i in range(pos + 1, n):\n        mlis[i] = min(mlis[i - 1], m[i])\n        sum += mlis[i]\n    for i in range(pos - 1, -1, -1):\n        mlis[i] = min(mlis[i + 1], m[i])\n        sum += mlis[i]\n    if sum > mx:\n        ans = mlis\n        mx = sum\nmm = map(str, ans)\nprint(' '.join(mm))", "n = int(input())\nl = list(map(int, input().split()))\nans = 0\np = -1\nfor i in range(n):\n    cur = l[i]\n    pre = l[i]\n    for j in range(i + 1, n):\n        cur += min(pre, l[j])\n        pre = min(pre, l[j])\n    pre = l[i]\n    for j in range(i - 1, -1, -1):\n        cur += min(pre, l[j])\n        pre = min(pre, l[j])\n    if cur > ans:\n        ans = cur\n        p = i\nprev = l[p]\nl1 = [0] * n\nl1[p] = l[p]\nfor i in range(p + 1, n):\n    prev = min(l[i], prev)\n    l1[i] = prev\nprev = l[p]\nfor i in range(p - 1, -1, -1):\n    prev = min(l[i], prev)\n    l1[i] = prev\nfor i in l1:\n    print(i, end=' ')\nprint()", "import heapq\nn = int(input())\nm = list(map(int, input().split()))\nM = [m[i] for i in range(n)]\npeaks = []\nfor i in range(0, n):\n    peaks.append((i, m[i]))\nfloors = 0\nmaxf = 0\nI = 0\nP = 0\nwhile peaks != []:\n    (index, peak) = peaks.pop()\n    floors = 0\n    x = peak\n    y = peak\n    for i in range(n):\n        if i < index:\n            x = min(m[index - (i + 1)], x)\n            floors += x\n        if i > index:\n            y = min(m[i], y)\n            floors += y\n        if i == index:\n            floors += m[index]\n    if maxf <= floors:\n        maxf = floors\n        I = index\n        P = peak\nfor i in range(n):\n    if i < I:\n        m[I - (i + 1)] = min(m[I - i], m[I - (i + 1)])\n    if i > I:\n        m[i] = min(m[i], m[i - 1])\nprint(*m)", "def main():\n    n = int(input())\n    M = list(map(int, input().split()))\n    best_summa = 0\n    for i in range(n):\n        L = [0 for i in range(n)]\n        summa = M[i]\n        L[i] = M[i]\n        for j in range(i - 1, -1, -1):\n            summa += min(L[j + 1], M[j])\n            L[j] = min(L[j + 1], M[j])\n        for j in range(i + 1, n):\n            summa += min(L[j - 1], M[j])\n            L[j] = min(L[j - 1], M[j])\n        if summa > best_summa:\n            best_summa = summa\n            Ans = L[:]\n    print(' '.join((str(i) for i in Ans)))\nmain()", "def count_floor(arr, peak):\n    ans = [arr[peak]]\n    for i in range(peak + 1, len(arr)):\n        if arr[i] <= ans[-1]:\n            ans.append(arr[i])\n        else:\n            ans.append(ans[-1])\n    i = peak - 1\n    brr = [arr[peak]]\n    while i >= 0:\n        if arr[i] <= brr[-1]:\n            brr.append(arr[i])\n        else:\n            brr.append(brr[-1])\n        i -= 1\n    brr.pop(0)\n    return brr[::-1] + ans\n\ndef skycrapers(arr):\n    max = 0\n    ans_ = []\n    for i in range(len(arr)):\n        if max < sum(count_floor(arr, i)):\n            max = sum(count_floor(arr, i))\n            ans_ = count_floor(arr, i)\n    an = [str(i) for i in ans_]\n    return ' '.join(an)\nn = int(input())\nar = list(map(int, input().strip().split()))\nprint(skycrapers(ar))", "n = int(input())\nm = list(map(int, input().split()))\nmaxfloors = 0\nind = 0\nans = list()\nfor i in range(n):\n    chosen = [0 for i in range(n)]\n    count = m[i]\n    chosen[i] = m[i]\n    for j in range(i - 1, -1, -1):\n        chosen[j] = min(chosen[j + 1], m[j])\n        count += chosen[j]\n    for j in range(i + 1, n):\n        chosen[j] = min(chosen[j - 1], m[j])\n        count += chosen[j]\n    if count > maxfloors:\n        ans = chosen\n        maxfloors = count\nfor i in range(n):\n    print(ans[i], end=' ')", "n = int(input())\na = [int(i) for i in input().split()]\na = [0] + a + [0]\nsx = 0\nk = 0\nfor i in range(1, n + 1):\n    if a[i] > a[i - 1] and a[i] >= a[i + 1] or (a[i] >= a[i - 1] and a[i] > a[i + 1]):\n        s = a[i]\n        mx = a[i]\n        b = [s]\n        for j in range(i - 1, 0, -1):\n            mx = min(a[j], mx)\n            s += mx\n            b = [mx] + b\n        mx = a[i]\n        for j in range(i + 1, n + 1):\n            mx = min(a[j], mx)\n            s += mx\n            b = b + [mx]\n        if s > sx:\n            sx = s\n            c = b\n    else:\n        continue\nfor i in range(n):\n    print(c[i], '', end='')", "n = int(input())\nl = [int(i) for i in input().split()]\nbest = 0\nbestl = []\nfor i in range(n):\n    temp = [i for i in l]\n    res = l[i]\n    j = i - 1\n    while j >= 0:\n        temp[j] = min(temp[j], temp[j + 1])\n        res += temp[j]\n        j -= 1\n    j = i + 1\n    while j < n:\n        temp[j] = min(temp[j], temp[j - 1])\n        res += temp[j]\n        j += 1\n    if res > best:\n        best = res\n        bestl = [i for i in temp]\nprint(*bestl)", "n = int(input())\nl = [int(x) for x in input().split()]\nfinal = 0\nar = [0] * n\nfor i in range(n):\n    mn = 10 ** 10\n    ans = 0\n    for j in range(i, -1, -1):\n        mn = min(mn, l[j])\n        ans += mn\n    mn = 10 ** 10\n    for j in range(i + 1, n):\n        mn = min(mn, l[j])\n        ans += mn\n    if ans > final:\n        final = ans\n        mn = 10 ** 10\n        for j in range(i, -1, -1):\n            mn = min(mn, l[j])\n            ar[j] = mn\n        mn = 10 ** 10\n        for j in range(i + 1, n):\n            mn = min(mn, l[j])\n            ar[j] = mn\nprint(*ar)", "input()\nList = [int(x) for x in input().strip().split(' ')]\nres = 0\nfor i in range(len(List)):\n    L = List[:]\n    ans = L[i]\n    j = i - 1\n    k = i + 1\n    while j >= 0:\n        L[j] = min(L[j], L[j + 1])\n        ans += L[j]\n        j -= 1\n    while k < len(L):\n        L[k] = min(L[k - 1], L[k])\n        ans += L[k]\n        k += 1\n    if ans > res:\n        res = ans\n        R = L[:]\nfor x in R:\n    print(x, end=' ')\nprint()", "n = int(input())\nal = [0] * n\nansl = [0] * n\nml = list(map(int, input().split()))\nmx = 0\nfor i in range(n):\n    al[i] = ml[i]\n    j = i - 1\n    while j >= 0:\n        al[j] = min(al[j + 1], ml[j])\n        j = j - 1\n    j = i + 1\n    while j < n:\n        al[j] = min(al[j - 1], ml[j])\n        j = j + 1\n    cans = 0\n    j = 0\n    for j in range(n):\n        cans += al[j]\n    if cans > mx:\n        mx = cans\n        j = 0\n        for j in range(n):\n            ansl[j] = al[j]\nfor i in range(n - 1):\n    print(ansl[i], end=' ')\nprint(ansl[-1])"]