["def maxTotalStrength(pokemons_Strengths):\n    totalStrength = 0\n    currStrength = nextStrength = pokemons_Strengths[0]\n    for strength in pokemons_Strengths[1:]:\n        if strength < nextStrength:\n            nextStrength = strength\n        elif nextStrength < strength:\n            totalStrength += currStrength - nextStrength\n            currStrength = nextStrength = strength\n    return totalStrength + currStrength\n\ndef testCase_1420c1():\n    input()\n    return tuple(map(int, input().split(' ')))\ntestCases = (testCase_1420c1() for x in range(int(input())))\ntuple((print(maxTotalStrength(testCase)) for testCase in testCases))", "def pokemon(n, l):\n    inc = False\n    last = l[0]\n    ans = 0\n    if n == 1:\n        return l[0]\n    if l[1] > l[0]:\n        inc = True\n        last = l[1]\n    else:\n        inc = False\n        ans += l[0]\n        last = l[1]\n    for i in range(2, n):\n        if inc:\n            if l[i] < last:\n                ans += last\n                last = l[i]\n                inc = False\n            else:\n                last = l[i]\n        elif l[i] > last:\n            ans -= last\n            last = l[i]\n            inc = True\n        else:\n            last = l[i]\n    if inc:\n        ans += l[-1]\n    return ans\nfor i in range(int(input())):\n    [n, p] = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    print(pokemon(n, l))", "def main(lst):\n    boolean = True\n    res = 0\n    for i in lst:\n        if boolean:\n            pre = i\n            res = i\n            boolean = False\n        elif i >= pre:\n            res += i - pre\n            pre = i\n        else:\n            pre = i\n    return res\na = int(input())\nfor i in range(a):\n    a = input()\n    lst = list(map(int, input().split()))\n    print(main(lst))", "def sol():\n    (n, q) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.append(0)\n    cur = float('-inf')\n    res = 0\n    for num in a:\n        if num < cur:\n            res += cur - num\n        cur = num\n    print(res)\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        sol()\nmain()", "def main():\n    iloP = int(input())\n    for P in range(iloP):\n        (iloL, asdsdasdasd) = list(map(int, input().split()))\n        lista = list(map(int, input().split()))\n        czy_pocz = True\n        wyn = 0\n        dodaj = False\n        czy_mal = False\n        ile = 0\n        for i in range(1, iloL):\n            if lista[i] > lista[i - 1]:\n                if czy_mal:\n                    wyn -= lista[i - 1]\n                czy_mal = False\n            elif lista[i] < lista[i - 1]:\n                if not czy_mal:\n                    wyn += lista[i - 1]\n                czy_mal = True\n        if not czy_mal:\n            wyn += lista[-1]\n        print(wyn)\nmain()", "def biggest_sub(l):\n    max_now = l[0]\n    min_yet = l[0]\n    suma = 0\n    for i in l[1:]:\n        if i > min_yet:\n            if max_now - min_yet > 0:\n                suma += max_now - min_yet\n            max_now = i\n            min_yet = max_now\n        if i < min_yet:\n            min_yet = i\n    suma += max_now\n    return suma\nt = int(input())\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    n = biggest_sub(l)\n    print(n)", "def algo(n, arr):\n    res = 0\n    m = 0\n    for i in arr:\n        t = 0\n        if i > m:\n            t = i - m\n        res += t\n        m = i\n    return res\nfor _ in range(int(input())):\n    (n, _) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = algo(n, arr)\n    print(ans)", "def solve(n, q, a):\n    ans = 0\n    up = True\n    if n == 1:\n        return a[0]\n    for i in range(n - 1):\n        if a[i + 1] < a[i] and up:\n            ans += a[i]\n            up = False\n        elif a[i + 1] > a[i] and (not up):\n            ans -= a[i]\n            up = True\n    if up:\n        ans += a[-1]\n    return ans\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, q, a))", "def pokemonArmy(n, array):\n    x = 1\n    prev = 0\n    f = 0\n    ans = 0\n    while x <= n:\n        if f == 0:\n            if x != n and array[x] > array[prev]:\n                pass\n            else:\n                ans += array[prev]\n                f = 1\n        elif x == n or array[x] < array[prev]:\n            pass\n        else:\n            ans -= array[prev]\n            f = 0\n        prev = x\n        x += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(pokemonArmy(n, l))", "def main():\n    for tc in range(int(input())):\n        (n, q) = map(int, input().split())\n        ar = list(map(int, input().split()))\n        (ans, inc) = (0, True)\n        for i in range(n - 1):\n            if inc and ar[i + 1] < ar[i]:\n                ans += ar[i]\n                inc = False\n            elif not inc and ar[i + 1] > ar[i]:\n                ans -= ar[i]\n                inc = True\n        if inc:\n            ans += ar[-1]\n        print(ans)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef algo(n, arr):\n    res = 0\n    cur = 0\n    for i in range(n):\n        t = arr[i] - cur\n        if t > 0:\n            res += t\n        cur = arr[i]\n    return res\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = algo(n, arr)\n    print(ans)", "def main():\n    (n, q) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    operation = 0\n    ans = 0\n    minn = 0\n    maxx = 0\n    for i in range(n):\n        if operation == 0:\n            if i == 0:\n                maxx = lst[0]\n            elif lst[i] >= maxx:\n                maxx = lst[i]\n            else:\n                operation = 1\n                ans += maxx\n                minn = lst[i]\n        elif lst[i] <= minn:\n            minn = lst[i]\n        else:\n            operation = 0\n            ans -= minn\n            maxx = lst[i]\n    if operation == 0:\n        ans += maxx\n    print(ans)\nt = int(input())\nwhile t != 0:\n    main()\n    t -= 1", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = map(int, input().split())\n    ans = 0\n    j = 0\n    accum = 0\n    for i in s:\n        if j == 0:\n            if i >= ans:\n                ans = i\n            else:\n                j = 1\n                accum += ans\n                ans = i\n        elif i <= ans:\n            ans = i\n        else:\n            j = 0\n            accum -= ans\n            ans = i\n    if j == 0:\n        accum += ans\n    print(accum)", "x = int(input())\nfor i in range(x):\n    (n, q) = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    prev = y[0]\n    flip = 0\n    ans = 0\n    for k in range(1, n):\n        if flip == 0:\n            if y[k] < y[k - 1]:\n                ans += y[k - 1]\n                flip = 1\n        elif y[k] > y[k - 1]:\n            ans -= y[k - 1]\n            flip = 0\n    if flip == 0:\n        ans += y[n - 1]\n    print(ans)", "for i in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    tot = 0\n    small = 400000\n    big = 0\n    goingUp = True\n    for (i, val) in enumerate(a):\n        if goingUp:\n            if val > big:\n                big = val\n            else:\n                tot += big\n                goingUp = False\n                small = val\n        elif val < small:\n            small = val\n        else:\n            tot -= small\n            goingUp = True\n            big = val\n    if goingUp:\n        tot += big\n    print(tot)", "def solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n        return\n    inc = 1\n    ans = 0\n    a.append(0)\n    for (i, v) in enumerate(a[:n]):\n        if inc == 1 and v > a[i + 1]:\n            ans += v\n            inc = 0\n        elif inc == 0 and v < a[i + 1]:\n            ans -= v\n            inc = 1\n    print(ans)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\n\ndef main():\n    T = int(input())\n    for ti in range(T):\n        (n, q) = map(int, input().split())\n        A = [int(a) for a in input().split()]\n        A.append(0)\n        ans = 0\n        for i in range(len(A) - 1):\n            s = A[i] - A[i + 1]\n            if s > 0:\n                ans += s\n        print(ans)\nmain()", "def fun(a):\n    ans = 0\n    temp = 1\n    for i in range(n - 1):\n        if temp == 1:\n            if a[i + 1] < a[i]:\n                ans += a[i]\n                temp = 0\n        elif a[i + 1] > a[i]:\n            ans -= a[i]\n            temp = 1\n    if temp == 1:\n        ans += a[n - 1]\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(fun(a))\n    for j in range(q):\n        (x, y) = map(lambda x: int(x) - 1, input().split())\n        (a[x], a[y]) = (a[y], a[x])\n        print(fun(a))", "for _ in range(int(input())):\n    input()\n    a = [int(i) for i in input().split()]\n    if len(a) == 1:\n        print(a[0])\n        continue\n    (plus, s, maybe) = (False, 0, a[0])\n    for i in range(1, len(a)):\n        if a[i] < maybe and (not plus):\n            s += maybe\n            plus = True\n        elif a[i] > maybe and plus:\n            plus = False\n            s -= maybe\n        maybe = a[i]\n    if not plus and a[-1] > a[-2]:\n        s += a[-1]\n    print(s)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = 0\n    arr.append(0)\n    for i in range(len(arr) - 1):\n        if arr[i] - arr[i - 1] > 0:\n            count += arr[i] - arr[i - 1]\n    print(count)", "import sys\nfrom math import sqrt, gcd, ceil, log, floor\nfrom bisect import bisect, bisect_left\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heapify, heappush, heappop\ninput = sys.stdin.readline\nread = lambda : list(map(int, input().strip().split()))\nMOD = 998244353\n\ndef ncr(n, r, p=MOD):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef main():\n    ans_ = ''\n    for _ in range(int(input())):\n        (n, q) = read()\n        arr = read() + [-10 ** 9]\n        ans = 0\n        f = 1\n        for i in range(n):\n            if f and arr[i] > arr[i + 1]:\n                ans += arr[i]\n                f = 0\n            elif f == 0 and arr[i] < arr[i + 1]:\n                ans -= arr[i]\n                f = 1\n        ans_ += str(ans) + '\\n'\n    print(ans_)\nmain()", "def shares(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    sum = 0\n    cost = A[0]\n    sell = A[0]\n    for i in range(1, n):\n        if A[i] > sell:\n            sum += cost - sell\n            cost = A[i]\n            sell = A[i]\n        else:\n            sell = min(sell, A[i])\n    return sum + cost\nt = int(input())\nfor i in range(t):\n    (n, q) = input().split()\n    n = int(n)\n    A = [int(i) for i in input().split()][:n]\n    print(shares(A))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    total = 0\n    flip = 0\n    curr = a[0]\n    for i in range(1, n):\n        if flip == 0:\n            if a[i] > a[i - 1]:\n                curr = a[i]\n            else:\n                total += a[i - 1]\n                curr = a[i]\n                flip = 1\n        elif a[i - 1] > a[i]:\n            curr = a[i]\n        else:\n            total -= a[i - 1]\n            curr = a[i]\n            flip = 0\n    if flip == 0:\n        total += a[-1]\n    print(total)", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nimport os\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    even = [0]\n    odd = [l[0]]\n    for i in l[1:]:\n        if even[-1] + i > odd[-1]:\n            odd.append(even[-1] + i)\n        if odd[-1] - i > even[-1]:\n            even.append(odd[-1] - i)\n    print(max(even[-1], odd[-1]))\nfor i in range(int(input())):\n    solve()", "import sys\nimport math\nfrom collections import Counter, defaultdict\nLI = lambda : list(map(int, input().split()))\nMAP = lambda : map(int, input().split())\nIN = lambda : int(input())\nS = lambda : input()\n\ndef case():\n    (n, q) = MAP()\n    a = LI()\n    ans = 0\n    for i in range(1, n):\n        if a[i - 1] > a[i]:\n            ans += a[i - 1] - a[i]\n    ans += a[-1]\n    print(ans)\nfor _ in range(IN()):\n    case()", "t = int(input())\nfor t1 in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_n = 0\n    curr = a[0]\n    plus = True\n    for i in range(1, n):\n        if plus:\n            if curr < a[i]:\n                curr = a[i]\n            else:\n                max_n += curr\n                curr = a[i]\n                plus = False\n        elif curr > a[i]:\n            curr = a[i]\n        else:\n            max_n -= curr\n            curr = a[i]\n            plus = True\n    if plus:\n        max_n += a[n - 1]\n    print(max_n)", "n = int(input())\nfor _ in range(n):\n    (n, q) = map(int, input().split())\n    array = list(map(int, input().split()))\n    flip = 0\n    max_strength = 0\n    current = array[0]\n    del array[0]\n    for i in array:\n        if flip == 0:\n            if current > i:\n                max_strength += current\n                flip = 1\n        elif current < i:\n            max_strength -= current\n            flip = 0\n        current = i\n    if flip == 0:\n        max_strength += current\n    print(max_strength)", "def solve(n, q, seq):\n    minusNext = True\n    previousBiggest = seq[0]\n    index = 1\n    temp = seq[0]\n    while index < n:\n        if minusNext:\n            if seq[index] > seq[index - 1]:\n                temp -= seq[index - 1]\n                temp += seq[index]\n            else:\n                temp -= seq[index]\n                minusNext = False\n        elif seq[index] < seq[index - 1]:\n            temp += seq[index - 1]\n            temp -= seq[index]\n        else:\n            temp += seq[index]\n            minusNext = True\n        if temp > previousBiggest:\n            previousBiggest = temp\n        index += 1\n    return previousBiggest\nfor x in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    seq = list(map(int, input().split()))\n    print(solve(n, q, seq))", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print(a[0])\n        continue\n    form = 1\n    ans = 0\n    x = a[0]\n    y = a[0]\n    for i in a[1:]:\n        if form == 1:\n            if i > x:\n                x = i\n            if i < x:\n                y = i\n                ans += x\n                form = 0\n        if form == 0:\n            if i < y:\n                y = i\n            if i > y:\n                x = i\n                ans -= y\n                form = 1\n    if form == 1:\n        ans += x\n    print(ans)", "def get_input():\n    return input().split(' ')\n\ndef get_int_input():\n    return list(map(int, get_input()))\n\ndef pokemon_army1(n, nums):\n    if n == 1:\n        return nums[0]\n    nums = [-1] + nums + [-1]\n    ans = 0\n    max_elem = 0\n    going = 'up'\n    for i in range(n + 1):\n        if going == 'up':\n            if nums[i] > nums[i + 1]:\n                ans += nums[i]\n                going = 'down'\n        elif going == 'down':\n            if nums[i] < nums[i + 1]:\n                ans -= nums[i]\n                going = 'up'\n    return ans\n\ndef main():\n    T = get_int_input()[0]\n    for _ in range(T):\n        (n, q) = get_int_input()\n        nums = get_int_input()\n        print(pokemon_army1(n, nums))\nmain()", "for i in range(int(input())):\n    trash = input()\n    s = list(map(int, input().split()))\n    power = 0\n    turn = 0\n    for j in range(len(s) - 1):\n        if turn % 2 == 0 and s[j] > s[j + 1]:\n            turn += 1\n            power += s[j]\n        elif turn % 2 and s[j] < s[j + 1]:\n            turn += 1\n            power -= s[j]\n    if len(s) > 1 and turn % 2 == 0 and (s[-1] > s[-2]):\n        power += s[-1]\n    elif len(s) == 1:\n        power = s[0]\n    print(power)", "import sys\nimport math, bisect\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef neo():\n    return map(int, sys.stdin.readline().split())\n\ndef Neo():\n    return list(map(int, sys.stdin.readline().split()))\nfor _ in range(I()):\n    (n, q) = neo()\n    A = Neo()\n    (t, f, Ans) = (A[0], 0, [])\n    for i in A[1:]:\n        if f == 0:\n            if i > t:\n                t = i\n            else:\n                Ans += [t]\n                f = 1\n                t = i\n        elif i < t:\n            t = i\n        else:\n            Ans += [t]\n            t = i\n            f = 0\n    if f == 0:\n        Ans += [t]\n    A = Ans[0::2]\n    B = Ans[1::2]\n    print(sum(A) - sum(B))", "import sys\nt = int(input())\nfor tc in range(t):\n    (n, q) = map(int, input().split())\n    sum = 0\n    lst = list(map(int, input().split()))\n    increasing = True\n    for i in range(n - 1):\n        if increasing is True and lst[i] > lst[i + 1]:\n            increasing = False\n            sum += lst[i]\n        elif increasing is False and lst[i] < lst[i + 1]:\n            increasing = True\n            sum -= lst[i]\n    if increasing is True:\n        sum += lst[n - 1]\n    print(sum)", "for o in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = 0\n    f = 0\n    for i in range(n - 1):\n        if f == 0:\n            if a[i] < a[i + 1]:\n                f = 0\n            else:\n                t = t + a[i]\n                f = 1\n        elif a[i] > a[i + 1]:\n            f = 1\n        else:\n            t = t - a[i]\n            f = 0\n    if f == 0:\n        t = t + a[n - 1]\n    print(t)", "def PokemonArmyEasy(n, a):\n    ans = []\n    j = 0\n    maxormin = 1\n    for i in range(n - 1):\n        if maxormin == 1:\n            if a[i] > a[i + 1]:\n                ans.append(a[i])\n                maxormin = 2\n        elif maxormin == 2:\n            if a[i] < a[i + 1]:\n                ans.append(a[i])\n                maxormin = 1\n    if maxormin == 1:\n        ans.append(a[n - 1])\n    elif maxormin == 2:\n        if a[i] < a[i + 1]:\n            ans.append(a[i])\n    c = 0\n    for i in range(len(ans)):\n        if i % 2 == 0:\n            c = c + ans[i]\n        else:\n            c = c - ans[i]\n    return c\nt = int(input())\nfor tt in range(t):\n    nn = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    ans = PokemonArmyEasy(nn[0], a)\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k = arr[0]\n    for x in range(1, n):\n        k += max(0, arr[x] - arr[x - 1])\n    print(k)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = lis[0]\n    c = 0\n    inc = 1\n    for j in range(1, n):\n        if inc == 1:\n            if lis[j] >= lis[j - 1]:\n                if j == n - 1:\n                    c = c + lis[n - 1]\n                if ans < c:\n                    ans = c\n                pass\n            else:\n                c = c + lis[j - 1]\n                inc = 0\n                if c > ans:\n                    ans = c\n        elif lis[j] <= lis[j - 1]:\n            pass\n        else:\n            c = c - lis[j - 1]\n            inc = 1\n            if j == n - 1:\n                if lis[j] >= lis[j - 1]:\n                    c = c + lis[j]\n            if c > ans:\n                ans = c\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.append(0)\n    val = 0\n    flag = True\n    mmin = 0\n    if n == 1:\n        print(arr[0])\n    else:\n        for i in range(0, n):\n            if flag:\n                if arr[i] > arr[i + 1]:\n                    val += arr[i]\n                    flag = False\n            elif arr[i] < arr[i + 1]:\n                val -= arr[i]\n                mmin = arr[i]\n                flag = True\n        if flag == True:\n            val += mmin\n        print(val)", "num = int(input())\nfor _ in range(num):\n    (n, q) = map(int, input().split())\n    pok = list(map(int, input().split()))\n    pok.append(int('0'))\n    total = 0\n    state = 1\n    for i in range(n):\n        if state == 1:\n            if pok[i] > pok[i + 1]:\n                total += pok[i]\n                state = 0\n            else:\n                continue\n        elif pok[i] < pok[i + 1]:\n            total -= pok[i]\n            state = 1\n        else:\n            continue\n    print(total)", "def solve(n, q, a):\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a)\n    hill = True\n    ans = 0\n    for i in range(n):\n        if i == n - 1:\n            if hill:\n                ans += a[i]\n            break\n        if hill:\n            if a[i + 1] < a[i]:\n                ans += a[i]\n                hill = False\n        elif a[i + 1] > a[i]:\n            ans -= a[i]\n            hill = True\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, q, a))", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    log = 0\n    ans = 0\n    for i in range(1, n):\n        if log == 0:\n            if a[i] < a[i - 1]:\n                log = 1\n                ans += a[i - 1]\n        elif a[i] > a[i - 1]:\n            log = 0\n            ans -= a[i - 1]\n    if log == 0:\n        ans += a[n - 1]\n    print(ans)", "for T in range(int(input())):\n    (n, Q) = input().split()\n    n = int(n)\n    a = [int(x) for x in input().split()]\n    ans = 0\n    z = a[0]\n    for i in range(1, n):\n        if a[i] > z:\n            z = a[i]\n        else:\n            ans += z - a[i]\n            z = a[i]\n    if z != -1:\n        ans += z\n    print(ans)", "for T in range(int(input())):\n    (n, Q) = input().split()\n    n = int(n)\n    a = [int(x) for x in input().split()]\n    ans = 0\n    z = a[0]\n    for i in range(1, n):\n        if a[i] > z:\n            z = a[i]\n        else:\n            ans += z - a[i]\n            z = a[i]\n    print(ans + z)", "import sys\nimport array\n\ndef get_diff(a, pos):\n    return a[pos] * (int(a[pos] > a[pos + 1]) + int(a[pos] > a[pos - 1]) - 1)\n\ndef main():\n    iter_data = map(int, sys.stdin.read().split())\n    t = next(iter_data)\n    for t_it in range(t):\n        (n, q) = (next(iter_data), next(iter_data))\n        a = [0] + [next(iter_data) for _ in range(n)] + [0]\n        all_ans = [0] * (q + 1)\n        val = [0] * (n + 1)\n        for i in range(n + 1):\n            val[i] = max(a[i], a[i + 1])\n        cur_ans = sum(val) - sum(a)\n        all_ans[0] = cur_ans\n        for q_it in range(1, q + 1):\n            (l, r) = (next(iter_data), next(iter_data))\n            if l != r:\n                (a[l], a[r]) = (a[r], a[l])\n                for p in set((l - 1, l, r - 1, r)):\n                    cur_ans -= val[p]\n                    val[p] = max(a[p], a[p + 1])\n                    cur_ans += val[p]\n            all_ans[q_it] = cur_ans\n        print(*all_ans, sep='\\n')\nmain()", "import sys\n\ndef main():\n    iter_data = iter(list(map(int, sys.stdin.read().split())))\n    t = next(iter_data)\n    for t_it in range(t):\n        (n, q) = (next(iter_data), next(iter_data))\n        a = [0] + [next(iter_data) for _ in range(n)] + [0]\n        all_ans = [0] * (q + 1)\n        val = [0] * (n + 1)\n        for i in range(n + 1):\n            val[i] = max(a[i], a[i + 1])\n        cur_ans = sum(val) - sum(a)\n        all_ans[0] = cur_ans\n        for q_it in range(1, q + 1):\n            (l, r) = (next(iter_data), next(iter_data))\n            if l != r:\n                (a[l], a[r]) = (a[r], a[l])\n                for p in set((l - 1, l, r - 1, r)):\n                    cur_ans -= val[p]\n                    val[p] = max(a[p], a[p + 1])\n                    cur_ans += val[p]\n            all_ans[q_it] = cur_ans\n        print(*all_ans, sep='\\n')\nmain()", "import sys\n\ndef main():\n    all_data = list(map(int, sys.stdin.read().split()))\n    idx = 0\n    t = all_data[idx]\n    idx += 1\n    for t_it in range(t):\n        (n, q) = all_data[idx:idx + 2]\n        idx += 2\n        a = [0] + all_data[idx:idx + n] + [0]\n        idx += n\n        all_ans = [0] * (q + 1)\n        val = [0] * (n + 1)\n        for i in range(n + 1):\n            val[i] = max(a[i], a[i + 1])\n        cur_ans = sum(val) - sum(a)\n        all_ans[0] = cur_ans\n        for q_it in range(1, q + 1):\n            (l, r) = all_data[idx:idx + 2]\n            idx += 2\n            if l != r:\n                (a[l], a[r]) = (a[r], a[l])\n                for p in set((l - 1, l, r - 1, r)):\n                    cur_ans -= val[p]\n                    val[p] = max(a[p], a[p + 1])\n                    cur_ans += val[p]\n            all_ans[q_it] = cur_ans\n        print(*all_ans, sep='\\n')\nmain()", "import math\nt = int(input())\nfor j in range(0, t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = 1\n    p = 0\n    for l in range(0, n - 1):\n        if k == 1:\n            if a[l] > a[l + 1]:\n                p = p + a[l]\n                k = -1\n        elif a[l] < a[l + 1]:\n            p = p - a[l]\n            k = 1\n    if k == 1:\n        p = p + a[-1]\n    print(p)", "for s in [*open(0)][2::2]:\n    a = k = 0\n    for i in map(int, s.split()):\n        a += i - k if i > k else 0\n        (a, k) = (max(a, i), i)\n    print(a)", "ans = []\nn = int(input())\n\ndef check(lst):\n    cur = [lst[0], 0]\n    for i in range(1, len(lst)):\n        a = max(cur[0], cur[1] + lst[i])\n        b = max(cur[1], cur[0] - lst[i])\n        cur = [a, b]\n    return max(cur)\nfor i in range(n):\n    (p, q) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    ans.append(check(lst))\nfor i in ans:\n    print(i)", "t = int(input())\nfor T in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    flag = 0\n    for i in range(1, len(a)):\n        if flag == 0:\n            if a[i] > a[i - 1]:\n                continue\n            else:\n                ans += a[i - 1]\n                flag = 1\n        elif a[i] < a[i - 1]:\n            continue\n        else:\n            ans -= a[i - 1]\n            flag = 0\n    if flag == 0:\n        ans += a[len(a) - 1]\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    (n, q) = MI()\n    aa = [0] + LI()\n    ans = 0\n    for i in range(n):\n        ans += max(0, aa[i + 1] - aa[i])\n    print(ans)", "for _ in range(int(input())):\n    inp = input().split()\n    n = int(inp[0])\n    q = int(inp[0])\n    a = list(map(int, input().split()))\n    val = 0\n    inc = True\n    for i in range(1, n):\n        if inc:\n            if a[i] < a[i - 1]:\n                val += a[i - 1]\n                inc = False\n        elif a[i] > a[i - 1]:\n            val -= a[i - 1]\n            inc = True\n    if inc:\n        val += a[-1]\n    print(val)", "for testcase in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = 0\n    arr.append(0)\n    for i in range(len(arr) - 1):\n        if arr[i] - arr[i - 1] > 0:\n            count += arr[i] - arr[i - 1]\n    print(count)", "t = int(input())\nfor tc in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    val = a[0]\n    for i in range(n - 1):\n        val += max(0, a[i + 1] - a[i])\n    print(val)", "import sys\n\ndef solution():\n    get_input = sys.stdin.readline\n    t = int(get_input().strip())\n    for i in range(t):\n        (n, q) = list(map(int, get_input().strip().split()))\n        board = list(map(int, get_input().strip().split()))\n        total = 0\n        prev = 0\n        find_max = True\n        if n == 1:\n            print(board[0])\n            continue\n        for k in range(n):\n            if find_max:\n                if k == 0:\n                    if board[k] >= board[k + 1]:\n                        total += board[k]\n                        find_max = False\n                elif k == n - 1:\n                    if board[k - 1] <= board[k]:\n                        total += board[k]\n                elif board[k - 1] <= board[k] and board[k] >= board[k + 1]:\n                    total += board[k]\n                    find_max = False\n            elif k == n - 1:\n                if board[k - 1] <= board[k]:\n                    total -= board[k]\n            elif board[k - 1] >= board[k] and board[k] <= board[k + 1]:\n                total -= board[k]\n                find_max = True\n        print(total)\nsolution()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    su = 0\n    flip = 0\n    for i in range(0, n - 1):\n        if flip == 0:\n            if a[i + 1] < a[i]:\n                su += a[i]\n                flip = 1\n        elif a[i + 1] > a[i]:\n            su -= a[i]\n            flip = 0\n    if flip == 0:\n        su += a[n - 1]\n    print(su)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = a[0]\n    for i in range(1, n):\n        k += max(0, a[i] - a[i - 1])\n    print(k)", "for a in [*open(0)][2::2]:\n    s = k = 0\n    for x in map(int, a.split()):\n        s += x - k if x > k else 0\n        (s, k) = (max(s, x), x)\n    print(s)", "t = int(input())\nfor i in range(t):\n    (_, _) = map(int, input().split())\n    pokemones = [int(i) for i in input().split()]\n    if pokemones == []:\n        print(0)\n        continue\n    if len(pokemones) == 1:\n        print(pokemones[0])\n        continue\n    estamos_sumando = True\n    s = 0\n    for i in range(len(pokemones) - 1):\n        if estamos_sumando:\n            if pokemones[i] > pokemones[i + 1]:\n                s += pokemones[i]\n                estamos_sumando = False\n        elif pokemones[i] < pokemones[i + 1]:\n            s -= pokemones[i]\n            estamos_sumando = True\n    if estamos_sumando:\n        s += pokemones[-1]\n    print(s)", "def solve(a, n):\n    maxi = a[-1]\n    mini = 0\n    for i in range(n - 2, -1, -1):\n        maxi = max(maxi, a[i] - mini)\n        mini = min(mini, a[i] - maxi)\n    return max(maxi, mini)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = 0\n    stack = []\n    for i in a:\n        if not stack:\n            stack.append(i)\n        elif f == 0:\n            if i > stack[-1]:\n                stack.pop()\n                stack.append(i)\n            else:\n                stack.append(i)\n                f = 1\n        elif i < stack[-1]:\n            stack.pop()\n            stack.append(i)\n        else:\n            f = 0\n            stack.append(i)\n    su = 0\n    if len(stack) % 2 == 0:\n        l = len(stack) - 1\n    else:\n        l = len(stack)\n    for i in range(l):\n        if i % 2 == 0:\n            su += stack[i]\n        else:\n            su -= stack[i]\n    print(su)", "for _ in ' ' * int(input()):\n    (n, q) = map(int, input().split())\n    (a, s, f) = (list(map(int, input().split())), 0, 0)\n    for i in range(1, n):\n        if f == 0:\n            if a[i] < a[i - 1]:\n                s += a[i - 1]\n                f += 1\n        elif a[i] > a[i - 1]:\n            s -= a[i - 1]\n            f -= 1\n    print(s if f else s + a[-1])", "for a in [*open(0)][2::2]:\n    s = k = 0\n    for x in map(int, a.split()):\n        s += x - k if x > k else 0\n        (s, k) = (max(s, x), x)\n    print(s)", "N = int(input())\nfor _ in range(N):\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    ans = nums[0]\n    for i in range(1, n):\n        ans += max(0, nums[i] - nums[i - 1])\n    print(ans)", "def solve(a, n):\n    maxi = a[-1]\n    mini = 0\n    for i in range(n - 2, -1, -1):\n        maxi = max(maxi, a[i] - mini)\n        mini = min(mini, a[i] - maxi)\n    return max(maxi, mini)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "R = lambda : list(map(int, input().split()))\nt = int(input())\nfor i in range(0, t):\n    (n, q) = R()\n    l = list(map(int, input().split()))\n    sum = l[0]\n    for j in range(1, n):\n        sum = sum + max(0, l[j] - l[j - 1])\n    print(sum)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    mylist = list(map(int, input().split()))\n    total = mylist[0]\n    for i in range(1, n):\n        total += max(0, mylist[i] - mylist[i - 1])\n    print(total)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = arr[0]\n    for i in range(1, n):\n        res += max(0, arr[i] - arr[i - 1])\n    print(res)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = list(map(int, input().split()))\n    flip = 0\n    cur = s[0]\n    total = 0\n    for i in range(1, n):\n        if flip == 0:\n            if s[i] > s[i - 1]:\n                cur = s[i]\n            else:\n                total += s[i - 1]\n                flip = 1\n                cur = s[i]\n        elif s[i] < s[i - 1]:\n            cur = s[i]\n        else:\n            total -= s[i - 1]\n            cur = s[i]\n            flip = 0\n    if flip == 0:\n        total += s[n - 1]\n    print(total)", "t = int(input())\nfor i in range(t):\n    (n, q) = (int(temp) for temp in input().split())\n    nums = [int(temp) for temp in input().split()]\n    mx = nums[0]\n    le = len(nums)\n    cur = nums[0]\n    totl = 0\n    seg = 0\n    if le > 1:\n        for k in range(1, le):\n            if nums[k] >= nums[k - 1]:\n                if seg != 0:\n                    totl += seg\n                    seg = 0\n                mx = max(totl + nums[k], mx)\n                cur = nums[k]\n            else:\n                seg = max(seg, cur - nums[k])\n    if seg != 0:\n        totl += seg\n        mx = max(totl + nums[k], mx)\n    print(mx)", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = a[0]\n    f = 0\n    s = 0\n    for j in range(1, n):\n        if f == 0:\n            if a[j] >= p:\n                p = a[j]\n            else:\n                s = s + p\n                f = 1\n                p = a[j]\n        elif a[j] <= p:\n            p = a[j]\n        else:\n            s = s - p\n            f = 0\n            p = a[j]\n    if f == 0:\n        s = s + p\n    print(s)", "t = input()\nfor _ in range(int(t)):\n    [n, k] = list(map(int, input().split()))\n    ls = list(map(int, input().split()))\n    maxima = ls[0]\n    minima = 300001\n    last_minima = minima\n    max_strength = 0\n    look_for_maxima = True\n    for index in range(1, len(ls)):\n        strength = ls[index]\n        last_strength = ls[index - 1]\n        if look_for_maxima:\n            if strength > maxima:\n                maxima = strength\n            else:\n                look_for_maxima = False\n                max_strength += maxima\n                maxima = -1\n                minima = strength\n        elif strength < minima:\n            minima = strength\n        else:\n            look_for_maxima = True\n            max_strength -= minima\n            last_minima = minima\n            maxima = strength\n            minima = 300001\n    if look_for_maxima:\n        max_strength += maxima\n    print(max_strength)", "def solve(a, n):\n    maxi = a[-1]\n    mini = 0\n    for i in range(n - 2, -1, -1):\n        maxi = max(maxi, a[i] - mini)\n        mini = min(mini, a[i] - maxi)\n    return max(maxi, mini)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "t = int(input())\nfor _ in range(t):\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.append(0)\n    maxima = 0\n    minima = 1\n    res = 0\n    while minima <= n:\n        while minima <= n and arr[maxima] <= arr[minima]:\n            minima += 1\n            maxima += 1\n        while minima < n and arr[minima] >= arr[minima + 1]:\n            minima += 1\n        res += arr[maxima] - arr[minima]\n        maxima = minima + 1\n        minima = maxima + 1\n    print(res)", "t = int(input())\nfor tc in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    val = a[0]\n    for i in range(n - 1):\n        if a[i + 1] - a[i] > 0:\n            val += a[i + 1] - a[i]\n    print(val)", "import sys\nimport array\n\ndef main():\n    iter_data = map(int, sys.stdin.read().split())\n    t = next(iter_data)\n    for t_it in range(t):\n        (n, q) = (next(iter_data), next(iter_data))\n        a = array.array('L', [0] + [next(iter_data) for _ in range(n)] + [0])\n        all_ans = array.array('q', [0] * (q + 1))\n        val = array.array('L', [0] * (n + 1))\n        for i in range(n + 1):\n            val[i] = max(a[i], a[i + 1])\n        cur_ans = sum(val) - sum(a)\n        all_ans[0] = cur_ans\n        for q_it in range(1, q + 1):\n            (l, r) = (next(iter_data), next(iter_data))\n            if l != r:\n                (a[l], a[r]) = (a[r], a[l])\n                for p in set((l - 1, l, r - 1, r)):\n                    cur_ans -= val[p]\n                    val[p] = max(a[p], a[p + 1])\n                    cur_ans += val[p]\n            all_ans[q_it] = cur_ans\n        print(*all_ans, sep='\\n')\nmain()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    mylist = list(map(int, input().split()))\n    total = mylist[0]\n    for i in range(1, n):\n        if mylist[i] > mylist[i - 1]:\n            total += mylist[i] - mylist[i - 1]\n    print(total)", "for _ in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    lst = [int(i) for i in input().split()]\n    k = lst[0]\n    for i in range(1, n):\n        k += max(0, lst[i] - lst[i - 1])\n    print(k)", "import math\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    count = 0\n    i = 1\n    x = l[0]\n    mi = math.inf\n    while i < n:\n        if l[i] < l[i - 1]:\n            i += 1\n        else:\n            count += x - l[i - 1]\n            x = l[i]\n            i += 1\n    count += x\n    print(count)", "def solve(n, nums):\n    dodd = float('-inf')\n    deven = 0\n    for i in range(n):\n        new_dodd = max(dodd, deven + nums[i])\n        new_deven = max(deven, dodd - nums[i])\n        dodd = new_dodd\n        deven = new_deven\n    return max(dodd, deven)\ntt = int(input())\nwhile tt > 0:\n    tt -= 1\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    print(solve(n, nums))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (*li,) = map(int, input().split())\n    a = 1e-05\n    b = 0\n    for i in li:\n        a = max(a, b + i)\n        b = max(b, a - i)\n    print(max(a, b))", "t = int(input())\nfor p in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    var = 1\n    for j in range(n - 1):\n        if var == 1:\n            if a[j + 1] > a[j]:\n                pass\n            else:\n                l.append(a[j])\n                var = 0\n        elif a[j + 1] < a[j]:\n            pass\n        else:\n            l.append(a[j])\n            var = 1\n    if var == 1:\n        l.append(a[n - 1])\n    ans = []\n    var = 0\n    for j in range(len(l)):\n        if j % 2 == 0:\n            var += l[j]\n        else:\n            var -= l[j]\n        ans.append(var)\n    print(max(ans))", "def countSwaps(A, n):\n    f = 0\n    ans = 0\n    res = 0\n    for i in range(1, n):\n        if f == 0 and A[i] < A[i - 1]:\n            ans = max(ans + A[i - 1], A[i - 1])\n            res = max(res, ans)\n            f = 1\n            continue\n        if f == 1 and A[i] > A[i - 1]:\n            ans -= A[i - 1]\n            res = max(res, ans)\n            f = 0\n    if f == 0:\n        ans = max(ans + A[-1], A[-1])\n        res = max(res, ans)\n    return res\nT = int(input())\nwhile T:\n    (N, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(countSwaps(A, N))\n    T -= 1", "import collections\nimport math\n\ndef solution(n, q, a):\n    if n == 1:\n        return a[0]\n    (odd, even) = ([0] * n, [0] * n)\n    odd[0] = a[0]\n    odd[1] = a[1]\n    even[1] = a[0] - a[1]\n    (me, mo) = (max(even[1], 0), max(odd[0], odd[1]))\n    for i in range(2, n):\n        odd[i] = me + a[i]\n        even[i] = mo - a[i]\n        if me < even[i]:\n            me = even[i]\n        if mo < odd[i]:\n            mo = odd[i]\n    return max(odd)\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    print(solution(n, q, a))", "for i1 in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    max = 0\n    min = 0\n    if n == 1:\n        print(l[0])\n        continue\n    if l[0] > l[1]:\n        max += l[0]\n    if l[-1] > l[-2]:\n        max += l[-1]\n    for i in range(len(l) - 2):\n        t1 = l[i]\n        t2 = l[i + 1]\n        t3 = l[i + 2]\n        if t2 > t3 and t2 > t1:\n            max += t2\n        if t2 < t3 and t2 < t1:\n            min += t2\n    print(max - min)", "t = int(input())\nfor u in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    flag = True\n    for i in range(n - 1):\n        if a[i] > a[i + 1] and flag:\n            ans += a[i]\n            flag = False\n        elif a[i + 1] > a[i] and ans - a[i] > 0 and (not flag):\n            ans -= a[i]\n            flag = True\n    if flag:\n        ans += a[-1]\n    print(ans)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    t = [ar[0]]\n    up = True\n    for i in range(1, n):\n        if up:\n            if ar[i] > t[-1]:\n                t[-1] = ar[i]\n            elif ar[i] < t[-1]:\n                t.append(ar[i])\n                up = False\n        elif ar[i] < t[-1]:\n            t[-1] = ar[i]\n        elif ar[i] > t[-1]:\n            t.append(ar[i])\n            up = True\n    if up == False:\n        t.pop()\n    ans = 0\n    if len(t) % 2:\n        ans += t[-1]\n        for i in range(0, len(t) - 1, 2):\n            ans += t[i] - t[i + 1]\n    else:\n        for i in range(0, len(t), 2):\n            ans += t[i] - t[i + 1]\n    print(max(max(ar), ans))", "for _ in range(int(input())):\n    (N, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = a[0]\n    count = 0\n    for i in range(1, len(a)):\n        if a[i] > x:\n            x = a[i]\n        elif a[i] < x:\n            count += x - a[i]\n            x = a[i]\n    count += x\n    print(count)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    if n == 1:\n        print(a[0])\n    else:\n        if a[0] > a[1]:\n            ans += a[0]\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                ans += a[i]\n            elif a[i] < a[i - 1] and a[i] < a[i + 1]:\n                ans -= a[i]\n        if a[n - 1] > a[n - 2]:\n            ans += a[n - 1]\n        print(ans)", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = max(l)\n    if n <= 2:\n        print(m)\n        continue\n    f = 1\n    s = 0\n    k = 0\n    b = 0\n    for i in range(1, n):\n        if f == 1 and l[i - 1] > l[i]:\n            k = l[i - 1]\n            s += k\n            f = 0\n        elif f == 0 and l[i - 1] < l[i] and (l[i - 1] < k):\n            s -= l[i - 1]\n            f = 1\n            b = i - 1\n    if f == 1:\n        s += max(l[b:])\n    print(max(s, m))", "for i in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    flag = 0\n    ans = 0\n    i = n - 1\n    while i >= 0:\n        if flag == 0:\n            while i >= 1 and a[i - 1] > a[i]:\n                i -= 1\n            ans += a[i]\n            i -= 1\n        else:\n            while i >= 1 and a[i - 1] < a[i]:\n                i -= 1\n            if i != 0:\n                ans -= a[i]\n            i -= 1\n        flag = 1 - flag\n    print(ans)", "def f(l):\n    if len(l) == 1:\n        return l[0]\n    r = []\n    for i in range(len(l)):\n        if i == 0:\n            if l[i + 1] < l[i]:\n                r.append(l[i])\n        elif i == len(l) - 1:\n            if l[i] > l[i - 1]:\n                r.append(l[i])\n        else:\n            if l[i] > l[i - 1] and l[i] > l[i + 1]:\n                r.append(l[i])\n            if l[i] < l[i - 1] and l[i] < l[i + 1]:\n                r.append(l[i])\n    sum = 0\n    for i in range(len(r)):\n        if i % 2 == 0:\n            sum += r[i]\n        else:\n            sum -= r[i]\n    return sum\nt = int(input())\nfor i in range(t):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    print(f(l))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i], dp[i] + arr[i] - arr[i - 1])\n    print(sum(dp))", "T = int(input())\nres = list()\nfor i in range(T):\n    y = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    res.append(x)\nfor i in range(len(res)):\n    sum = 0\n    result = [0] + res[i] + [0]\n    for j in range(1, len(result) - 1):\n        if result[j - 1] < result[j] > result[j + 1]:\n            sum += result[j]\n        elif result[j - 1] > result[j] < result[j + 1]:\n            sum -= result[j]\n    print(sum)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    hi = []\n    lo = []\n    if n <= 2:\n        print(max(lis))\n    else:\n        if lis[0] > lis[1]:\n            hi.append(lis[0])\n        for i in range(1, n - 1, 1):\n            if lis[i] > lis[i - 1] and lis[i] > lis[i + 1]:\n                hi.append(lis[i])\n            elif lis[i] < lis[i - 1] and lis[i] < lis[i + 1]:\n                lo.append(lis[i])\n        if lis[-1] > lis[-2]:\n            hi.append(lis[-1])\n        print(sum(hi) - sum(lo))", "num = int(input())\nwhile num > 0:\n    num = num - 1\n    (a, b) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    ans = 0\n    k = 0\n    if len(ar) == 1:\n        print(ar[0])\n    else:\n        if ar[0] > ar[1]:\n            ans = ar[0]\n            k = 1\n        for i in range(1, a - 1):\n            if k == 1 and ar[i] < ar[i - 1] and (ar[i] < ar[i + 1]):\n                k = 0\n                ans -= ar[i]\n            elif k == 0 and ar[i] > ar[i - 1] and (ar[i] > ar[i + 1]):\n                k = 1\n                ans += ar[i]\n        if ar[-1] > ar[-2] and k == 0:\n            ans += ar[-1]\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    b = set(a)\n    if len(b) == 1:\n        print(a[0])\n    else:\n        if n > 1:\n            if a[0] > a[1]:\n                ans += a[0]\n            if a[n - 1] > a[n - 2]:\n                ans += a[n - 1]\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                ans += a[i]\n            elif a[i] < a[i - 1] and a[i] < a[i + 1]:\n                ans -= a[i]\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    list1 = list(map(int, input().strip().split()))[:n]\n    i = 0\n    sum = 0\n    check = max(list1)\n    flag = 0\n    while i < n:\n        if flag == 0:\n            if i == n - 1:\n                sum += list1[i]\n            elif i < n - 1 and list1[i] > list1[i + 1]:\n                sum += list1[i]\n                flag = 1\n            i += 1\n        else:\n            if i < n - 1 and list1[i] < list1[i + 1]:\n                sum -= list1[i]\n                flag = 0\n            i += 1\n    if sum < check:\n        print(check)\n    else:\n        print(sum)"]