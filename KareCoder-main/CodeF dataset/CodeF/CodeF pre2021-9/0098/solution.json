["import sys, threading, heapq, math\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        enemy = input().strip()\n        gregor = input().strip()\n        count = 0\n        visited = set()\n        for i in range(n):\n            if gregor[i] == '1':\n                if enemy[i] == '0':\n                    count += 1\n                elif i > 0 and enemy[i - 1] == '1' and (i - 1 not in visited):\n                    count += 1\n                    visited.add(i - 1)\n                elif i < n - 1 and enemy[i + 1] == '1' and (i + 1 not in visited):\n                    count += 1\n                    visited.add(i + 1)\n        print(count)\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        s1 = get_string()\n        s2 = get_string()\n        d1 = list(s1)\n        d2 = list(s2)\n        ans = 0\n        for i in range(n):\n            if d2[i] == '1':\n                if d1[i] == '0':\n                    ans += 1\n                elif i - 1 >= 0 and d1[i - 1] == '1':\n                    ans += 1\n                    d1[i - 1] = '0'\n                elif i + 1 < n and d1[i + 1] == '1':\n                    ans += 1\n                    d1[i + 1] = '0'\n        get_print_int(ans)\nsolve()", "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next():\n    return tokens.pop()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef getIntArray(n):\n    return [nextInt() for _ in range(n)]\n\ndef getFloatArray(n):\n    return [nextFloat() for _ in range(n)]\n\ndef getStringArray(n):\n    return [next() for _ in range(n)]\nflush = sys.stdout.flush\ntestcase = True\n\ndef solve(testcase=1):\n    N = nextInt()\n    (A, B) = (list(next()), list(next()))\n    c = 0\n    for i in range(N):\n        if B[i] == '1':\n            if A[i] == '0':\n                c += 1\n            elif i > 0 and A[i - 1] == B[i]:\n                A[i - 1] = '0'\n                c += 1\n            elif i + 1 < N and A[i + 1] == B[i]:\n                A[i + 1] = '0'\n                c += 1\n    print(c)\ntestcaseCount = nextInt() if testcase else 1\nfor tc in range(testcaseCount):\n    solve(tc + 1)\nassert not tokens", "from sys import stdin\ninput = stdin.readline\n\ndef processPawns(ln, enemy, gregs):\n    if '1' not in gregs:\n        return 0\n    count = 0\n    for i in range(ln):\n        if i == 0 and gregs[i] == '1':\n            if gregs[i] == '1' and enemy[i] == '0':\n                count += 1\n                enemy[i] = '2'\n            elif enemy[i] == '1' and ln > 1 and (enemy[i + 1] == '1'):\n                count += 1\n                enemy[i + 1] = '2'\n        elif gregs[i] == '1':\n            if enemy[i] == '0':\n                count += 1\n                enemy[i] = '2'\n            elif enemy[i - 1] == '1':\n                count += 1\n                enemy[i - 1] = '2'\n            elif i < ln - 1 and enemy[i + 1] == '1':\n                count += 1\n                enemy[i + 1] = '2'\n    return count\nn = int(input())\nfor _ in range(n):\n    ln = int(input())\n    enemy = list(input().strip())\n    gregs = list(input().strip())\n    print(processPawns(ln, enemy, gregs))", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    ans = 0\n    occupied = [0] * n\n    for i in range(n):\n        if s2[i] == '0':\n            continue\n        if s1[i] == '0':\n            occupied[i] = 1\n            ans += 1\n        elif i > 0 and s1[i - 1] == '1' and (occupied[i - 1] == 0):\n            occupied[i - 1] = 1\n            ans += 1\n        elif i < n - 1 and s1[i + 1] == '1' and (occupied[i + 1] == 0):\n            occupied[i + 1] = 1\n            ans += 1\n    print(ans)", "import sys\nsys.setrecursionlimit(200000)\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\ninput = sys.stdin.readline\nfrom functools import lru_cache\nimport heapq\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntestcases = inp()\nfor _ in range(testcases):\n    n = inp()\n    x = insr()\n    y = insr()\n    pawn = 0\n    for i in range(len(x)):\n        if y[i] == '0':\n            continue\n        if x[i] == '0':\n            pawn += 1\n            x[i] = '#'\n        elif i - 1 >= 0 and x[i - 1] == '1':\n            pawn += 1\n        elif i + 1 < len(x) and x[i + 1] == '1':\n            pawn += 1\n            x[i + 1] = '#'\n    print(pawn)", "import math\nmod = 1000000007\nfrom sys import stdin, stdout\nfor abcd in range(int(input())):\n    n = int(stdin.readline())\n    t = list(stdin.readline().strip('\\n'))\n    s = list(stdin.readline().strip('\\n'))\n    if n == 1:\n        if t[i] == '0':\n            print(0)\n        elif t[i] == '1':\n            if s[i] == '1':\n                print(0)\n            else:\n                print(1)\n        else:\n            print(0)\n        continue\n    c = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i == 0:\n                if t[i] == '0':\n                    c += 1\n                elif t[i + 1] == '1':\n                    c += 1\n                    t[i + 1] = 0\n            elif i == n - 1:\n                if t[i] == '0':\n                    c += 1\n                elif t[i - 1] == '1':\n                    c += 1\n                    t[i - 1] = 0\n            elif t[i] == '0':\n                c += 1\n            elif t[i - 1] == '1':\n                c += 1\n                t[i - 1] = 0\n            elif t[i + 1] == '1':\n                c += 1\n                t[i + 1] = 0\n    print(c)", "import sys\nimport bisect as bi\nimport collections as cc\nimport itertools as it\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nmod = 10 ** 9 + 7\nfor tc in range(int(input())):\n    (n,) = I()\n    first = list(input().strip())\n    last = list(input().strip())\n    ans = 0\n    for i in range(n):\n        if last[i] == '0':\n            continue\n        if first[i] == '0':\n            ans += 1\n        elif i > 0 and first[i - 1] == '1':\n            ans += 1\n        elif i < n - 1 and first[i + 1] == '1':\n            first[i + 1] = '-'\n            ans += 1\n    print(ans)", "import sys\n\ndef fun(en, ger, n):\n    taken = [False for i in range(n)]\n    count = 0\n    for i in range(n):\n        if ger[i] == '1':\n            if i == 0:\n                if en[0] == '1' and en[1] == '1':\n                    taken[1] = True\n                    count += 1\n                elif en[0] == '0':\n                    taken[0] = True\n                    count += 1\n            elif i == n - 1:\n                if en[i] == '1' and en[i - 1] == '1':\n                    if not taken[i - 1]:\n                        taken[i - 1] = True\n                        count += 1\n                elif en[i] == '0':\n                    taken[i] = True\n                    count += 1\n            else:\n                if en[i - 1] == '1' and (not taken[i - 1]):\n                    taken[i - 1] = True\n                    count += 1\n                    continue\n                if en[i] == '0':\n                    taken[i] = True\n                    count += 1\n                    continue\n                if en[i + 1] == '1':\n                    taken[i + 1] = True\n                    count += 1\n    return count\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    en = sys.stdin.readline()\n    ger = sys.stdin.readline()\n    print(fun(en, ger, n))", "from sys import stdin\ninput = stdin.readline\n\ndef f(en, us):\n    cnt = 0\n    for i in range(len(en)):\n        if en[i] == '0' and us[i] == '1':\n            en[i] = 'f'\n            cnt += 1\n        elif i > 0 and en[i - 1] == '1' and (us[i] == '1'):\n            en[i - 1] = 'f'\n            cnt += 1\n        elif i <= len(us) - 2 and en[i + 1] == '1' and (us[i] == '1'):\n            en[i + 1] = 'f'\n            cnt += 1\n    return cnt\nfor i in range(int(input())):\n    s = input()\n    en = list(input())\n    us = list(input())\n    print(f(en, us))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    u = list(input())\n    v = list(input())\n    ret = 0\n    bn = n - 1\n    for i in range(n):\n        if v[i] == '1':\n            if u[i] == '0':\n                ret += 1\n            elif i > 0 and u[i - 1] == '1':\n                ret += 1\n            elif i < bn and u[i + 1] == '1':\n                u[i + 1] = '#'\n                ret += 1\n    ans.append(str(ret))\nprint('\\n'.join(ans))", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    s1 = S()\n    s2 = S()\n    d = {}\n    c = 0\n    for i in range(n):\n        if s2[i] == '1':\n            if i - 1 >= 0 and s1[i - 1] == '1' and (d.get(i - 1, 0) == 0):\n                c += 1\n                d[i - 1] = 1\n            elif s1[i] == '0':\n                c += 1\n            elif i + 1 < n and s1[i + 1] == '1' and (d.get(i + 1, 0) == 0):\n                c += 1\n                d[i + 1] = 1\n    print(c)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in [wtf[i:i + 3] for i in range(1, len(wtf), 3)]:\n    n = int(t[0])\n    r0 = [x for x in t[1]]\n    rn = [x for x in t[2]]\n    ans = 0\n    for i in range(n):\n        if rn[i] == '1':\n            if r0[i] == '0':\n                ans += 1\n            elif i - 1 >= 0 and r0[i - 1] == '1':\n                r0[i - 1] = '0'\n                ans += 1\n            elif i + 1 < n and r0[i + 1] == '1':\n                r0[i + 1] = '0'\n                ans += 1\n    print(ans)", "def main():\n    n = int(input())\n    answer = []\n    for i in range(n):\n        answer.append(in_put())\n    for i in range(n):\n        print(answer[i])\n\ndef in_put():\n    p = int(input())\n    ans = 0\n    x = list(input())\n    y = list(input())\n    for i in range(p):\n        if y[i] == '1':\n            if x[i] == '0':\n                ans += 1\n            elif i != 0 and x[i - 1] == '1':\n                ans += 1\n                x[i - 1] = '0'\n            elif i != p - 1 and x[i + 1] == '1':\n                ans += 1\n                x[i + 1] = '0'\n    return ans\nmain()", "from os import sep\nl = []\nfor __ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    t = list(input())\n    ans = 0\n    for i in range(n):\n        if t[i] == '1':\n            if s[i] == '0':\n                ans += 1\n                s[i] = '2'\n            elif i > 0 and s[i - 1] == '1':\n                ans += 1\n            elif i < n - 1 and s[i + 1] == '1':\n                ans += 1\n                s[i + 1] = '2'\n    l.append(ans)\nprint(*l, sep='\\n')", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef output_list(l):\n    print(' '.join(list(map(str, l))))\n\nclass Node:\n\n    def __init__(self, i, next):\n        self.i = i\n        self.next = next\n\n    def __str__(self):\n        return str(self.i)\n\ndef test_case():\n    n = inp()\n    enemy = list(input().strip())\n    gregor = list(input().strip())\n    max_advances = 0\n    for i in range(n):\n        if int(gregor[i]) == 1:\n            if int(enemy[i]) == 0:\n                max_advances += 1\n                enemy[i] == '2'\n            elif i - 1 >= 0 and int(enemy[i - 1]) == 1:\n                max_advances += 1\n                enemy[i - 1] = '2'\n            elif i + 1 < n and int(enemy[i + 1]) == 1:\n                max_advances += 1\n                enemy[i + 1] = '2'\n    print(max_advances)\nn_cases = inp()\nfor i in range(n_cases):\n    test_case()", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    n = I()\n    a = list('0' + inp() + '0')\n    b = list('0' + inp() + '0')\n    c = 0\n    for i in range(1, n + 1):\n        if a[i] == '0' and b[i] == '1':\n            c = c + 1\n        elif a[i] == '1' and b[i] == '1':\n            if a[i - 1] == '1':\n                c = c + 1\n                a[i - 1] = '0'\n            elif a[i + 1] == '1':\n                c = c + 1\n                a[i + 1] = '0'\n    print(c)\ntt = 1\ntt = I()\nfor _ in range(tt):\n    solve()", "import sys\ninput = sys.stdin\noutput = sys.stdout\nt = int(input.readline().strip())\nfor y in range(t):\n    n = int(input.readline().strip())\n    enemy = list('0' + input.readline().strip() + '0')\n    friendly = list('0' + input.readline().strip() + '0')\n    count = 0\n    for i in range(1, n + 1):\n        if friendly[i] == '1':\n            if enemy[i - 1] == '1':\n                count += 1\n                enemy[i - 1] = '2'\n            elif enemy[i] == '0':\n                count += 1\n                enemy[i] = '2'\n            elif enemy[i + 1] == '1':\n                count += 1\n                enemy[i + 1] = '2'\n    print(count)", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    ans = 0\n    occupied = [0] * n\n    for i in range(n):\n        if s2[i] == '0':\n            continue\n        if s1[i] == '0':\n            occupied[i] = 1\n            ans += 1\n        elif i > 0 and s1[i - 1] == '1' and (occupied[i - 1] == 0):\n            occupied[i - 1] = 1\n            ans += 1\n        elif i < n - 1 and s1[i + 1] == '1' and (occupied[i + 1] == 0):\n            occupied[i + 1] = 1\n            ans += 1\n    print(ans)", "t = int(input())\ngames = [[int(input()), input(), input()] for _ in range(t)]\nanswer = []\nfor k in range(t):\n    count = 0\n    visited = [False] * games[k][0]\n    for i in range(games[k][0]):\n        if '1' == games[k][2][i]:\n            if '0' == games[k][1][i]:\n                count += 1\n            elif 0 <= i - 1 and '1' == games[k][1][i - 1] and (not visited[i - 1]):\n                visited[i - 1] = True\n                count += 1\n            elif i + 1 < games[k][0] and '1' == games[k][1][i + 1] and (not visited[i + 1]):\n                visited[i + 1] = True\n                count += 1\n    answer.append(count)\nanswer = '\\n'.join(map(str, answer))\nprint(answer)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef output_list(l):\n    print(' '.join(list(map(str, l))))\n\nclass Node:\n\n    def __init__(self, i, next):\n        self.i = i\n        self.next = next\n\n    def __str__(self):\n        return str(self.i)\n\ndef test_case():\n    n = inp()\n    enemy = list(input().strip())\n    gregor = list(input().strip())\n    max_advances = 0\n    for i in range(n):\n        if int(gregor[i]) == 1:\n            if int(enemy[i]) == 0:\n                max_advances += 1\n                enemy[i] == '2'\n            elif i - 1 >= 0 and int(enemy[i - 1]) == 1:\n                max_advances += 1\n                enemy[i - 1] = '2'\n            elif i + 1 < n and int(enemy[i + 1]) == 1:\n                max_advances += 1\n                enemy[i + 1] = '2'\n    print(max_advances)\nn_cases = inp()\nfor i in range(n_cases):\n    test_case()", "mod = 1000000007\nfrom sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    s1 = list(stdin.readline().strip('\\n'))\n    s2 = list(stdin.readline().strip('\\n'))\n    count = 0\n    for i in range(n):\n        if s2[i] == '1' and s1[i] == '0':\n            count += 1\n        elif s2[i] == '1':\n            if i > 0 and s1[i - 1] == '1':\n                count += 1\n                s1[i - 1] = '-1'\n            elif i < n - 1 and s1[i + 1] == '1':\n                count += 1\n                s1[i + 1] = '-1'\n    print(count)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef input_list():\n    return list(map(int, input().split()))\n\ndef input_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\nfor _ in range(tests):\n    size = inp()\n    enemy = input_string()\n    geo = input_string()\n    passed = 0\n    for i in range(size):\n        e = enemy[i]\n        g = geo[i]\n        if e == '0' and g == '1':\n            passed += 1\n        elif e == '1' and g == '1':\n            if i >= 1 and enemy[i - 1] == '1':\n                enemy[i - 1] = '0'\n                passed += 1\n            elif i < size - 1 and enemy[i + 1] == '1':\n                enemy[i + 1] = '0'\n                passed += 1\n    print(passed)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    enemy = input()\n    gregor = input()\n    count = 0\n    prev_available = False\n    cur_available = True\n    for i in range(n):\n        if gregor[i] == '1' and enemy[i] == '0':\n            count += 1\n            (prev_available, cur_available) = (False, True)\n        elif gregor[i] == '1' and prev_available:\n            count += 1\n            (prev_available, cur_available) = (cur_available, True)\n        elif gregor[i] == '1' and i < n - 1 and (enemy[i + 1] == '1'):\n            count += 1\n            (prev_available, cur_available) = (cur_available, False)\n        elif gregor[i] == '1':\n            (prev_available, cur_available) = (cur_available, True)\n        elif enemy[i] == '0':\n            (prev_available, cur_available) = (False, True)\n        elif enemy[i] == '1':\n            (prev_available, cur_available) = (cur_available, True)\n    print(count)", "res = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    ans = 0\n    for (i, pawn) in enumerate(b):\n        if pawn == '0':\n            continue\n        if a[i] == '0':\n            ans += 1\n            a[i] = '1m'\n            b[i] = '0'\n        elif n == 1:\n            break\n        elif i == 0:\n            if a[1] == '1':\n                ans += 1\n                b[i] = '0'\n                a[1] = '1m'\n        elif i == n - 1:\n            if a[n - 2] == '1':\n                ans += 1\n                b[n - 1] = '0'\n                a[n - 1] = '1m'\n        elif a[i - 1] == '1':\n            b[i] = '0'\n            ans += 1\n            a[i - 1] = '1m'\n        elif a[i + 1] == '1':\n            b[i] = '0'\n            a[i + 1] = '1m'\n            ans += 1\n    res += '%d\\n' % ans\nprint(res)", "n = int(input())\na = []\nfor y in range(n):\n    p = int(input())\n    n1 = input()\n    nn = input()\n    summ = 0\n    stop = -1\n    for i in range(p):\n        if nn[i] == '1':\n            if (i >= 1 and n1[i - 1] == '1') and stop != i - 1:\n                summ = summ + 1\n            elif n1[i] == '0':\n                summ = summ + 1\n            elif i < p - 1 and n1[i + 1] == '1':\n                summ = summ + 1\n                stop = i + 1\n    a.append(summ)\nfor y in range(n):\n    print(a[y])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(input())\n    l1.append(2)\n    l2 = list(input())\n    c = 0\n    for i in range(len(l2)):\n        if l2[i] == '1':\n            if l1[i] == '0':\n                l1[i] = '2'\n                l2[i] = '0'\n                c = c + 1\n    for i in range(len(l2)):\n        if l2[i] == '1':\n            if l1[i - 1] == '1':\n                l1[i - 1] = '2'\n                l2[i] = '0'\n                c = c + 1\n            elif l1[i + 1] == '1':\n                l1[i + 1] = '2'\n                l2[i] = '0'\n                c = c + 1\n    print(c)", "k = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(input(''))\n    b = input('')\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                a[i] = '2'\n            elif i != 0 and a[i - 1] == '1':\n                a[i - 1] = '2'\n            elif i != n - 1 and a[i + 1] == '1':\n                a[i + 1] = '2'\n    k.append(a.count('2'))\nfor i in k:\n    print(i)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr_1 = list(sys.stdin.readline().strip())\n    arr_2 = list(sys.stdin.readline().strip())\n    count = 0\n    for i in range(len(arr_1) - 1):\n        if arr_1[i] == '0' and arr_2[i] == '1':\n            arr_1[i] = '2'\n            arr_2[i] = '0'\n            count += 1\n        if arr_1[i + 1] == '0' and arr_2[i + 1] == '1':\n            arr_1[i + 1] = '2'\n            arr_2[i + 1] = '0'\n            count += 1\n        if arr_1[i] == '1' and arr_2[i + 1] == '1':\n            arr_1[i] = '2'\n            arr_2[i + 1] = '0'\n            count += 1\n        if arr_1[i + 1] == '1' and arr_2[i] == '1':\n            arr_1[i + 1] = '0'\n            arr_2[i] = '0'\n            count += 1\n    print(count)", "def main():\n    t = int(input())\n    anst = []\n    for _ in range(t):\n        n = int(input())\n        v = list(map(int, input()))\n        g = list(map(int, input()))\n        ans = 0\n        for num in range(n):\n            flag = 0\n            if g[num] == 1:\n                if v[num] == 0:\n                    flag = 1\n                elif num != 0 and (not flag) and (v[num - 1] == 1):\n                    v[num - 1] = -1\n                    flag = 1\n                elif num != n - 1 and (not flag) and (v[num + 1] == 1):\n                    v[num + 1] = -1\n                    flag = 1\n            ans += flag\n        anst.append(ans)\n    for _ in anst:\n        print(_)\nmain()", "t = int(input())\nlan = []\nfor _ in range(t):\n    n = int(input())\n    up = list(input())\n    down = input()\n    ctr = 0\n    for indx in range(n):\n        if indx == 0 and down[indx] == '1':\n            if up[indx] == '0':\n                up[indx] = '2'\n                ctr += 1\n            elif up[indx + 1] == '1':\n                up[indx + 1] = '2'\n                ctr += 1\n        elif indx == n - 1 and down[indx] == '1':\n            if up[indx] == '0':\n                up[indx] = '2'\n                ctr += 1\n            elif up[indx - 1] == '1':\n                up[indx - 1] = '2'\n                ctr += 1\n        elif indx > 0 and indx < n - 1 and (down[indx] == '1'):\n            if up[indx - 1] == '1':\n                up[indx - 1] = '2'\n                ctr += 1\n            elif up[indx] == '0':\n                up[indx] = '2'\n                ctr += 1\n            elif up[indx + 1] == '1':\n                up[indx + 1] = '2'\n                ctr += 1\n    lan.append(ctr)\nprint(*lan, sep='\\n')", "t = int(input())\nanswer = []\nfor i in range(t):\n    n = int(input())\n    enemy = list(input())\n    gregor = list(input())\n    count = 0\n    for p in range(n):\n        if enemy[p] == '0' and gregor[p] == '1':\n            gregor[p] = '0'\n            count += 1\n    for b in range(n):\n        if enemy[b] == '1':\n            if b == 0:\n                if gregor[b + 1] == '1':\n                    count += 1\n                    gregor[b + 1] = '0'\n            elif b == n - 1:\n                if gregor[b - 1] == '1':\n                    count += 1\n                    gregor[b - 1] == '0'\n            elif gregor[b - 1] == '1':\n                count += 1\n                gregor[b - 1] = '0'\n            elif gregor[b + 1] == '1':\n                count += 1\n                gregor[b + 1] = '0'\n    answer.append(count)\nfor item in answer:\n    print(item)", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a1 = input()\n    a = []\n    otv = 0\n    for i in a1:\n        a.append(i)\n    a1 = a.copy()\n    a2 = input()\n    a = []\n    for i in a2:\n        a.append(i)\n    a2 = a.copy()\n    for i in range(len(a1)):\n        if a1[i] == '0':\n            if a2[i] == '1':\n                a2[i] = '0'\n                otv += 1\n        elif a1[i] == '1':\n            if i == 0:\n                if a2[1] == '1':\n                    a2[1] = '0'\n                    otv += 1\n            elif i == n - 1:\n                if a2[n - 2] == '1':\n                    a2[n - 2] = '0'\n                    otv += 1\n            elif a2[i - 1] == '1':\n                a2[i - 1] = '0'\n                otv += 1\n            elif a2[i + 1] == '1':\n                a2[i + 1] = '0'\n                otv += 1\n    ans.append(otv)\nfor i in ans:\n    print(i)", "from collections import defaultdict, deque\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a1 = input()\n    b1 = input()\n    a = ['2']\n    b = ['2']\n    for i in range(n):\n        a.append(a1[i])\n        b.append(b1[i])\n    a.append('2')\n    b.append('2')\n    count = 0\n    for i in range(1, n + 1):\n        if b[i] == '1' and a[i] == '0':\n            a[i] = '2'\n            count += 1\n        elif b[i] == '1' and a[i - 1] == '1':\n            a[i - 1] = '2'\n            count += 1\n        elif b[i] == '1' and a[i + 1] == '1':\n            a[i + 1] = '2'\n            count += 1\n    print(count)", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    enemy = list(map(int, input()))\n    pawn = list(map(int, input()))\n    count = 0\n    for i in range(len(pawn)):\n        if pawn[i] != 0:\n            if enemy[i] == 0:\n                enemy[i] = 2\n                count += 1\n            elif i == 0:\n                if enemy[i + 1] == 1:\n                    count += 1\n                    enemy[i + 1] = 2\n            elif i == n - 1:\n                if enemy[i - 1] == 1:\n                    count += 1\n                    enemy[i - 1] = 2\n            elif (enemy[i + 1] == 1) | (enemy[i - 1] == 1):\n                if enemy[i - 1] == 1:\n                    count += 1\n                    enemy[i - 1] = 2\n                elif enemy[i + 1] == 1:\n                    count += 1\n                    enemy[i + 1] = 2\n    result.append(count)\nfor i in result:\n    print(i)", "result = []\nfor _ in range(int(input())):\n    n = int(input())\n    you = [int(x) for x in input()]\n    my = [int(x) for x in input()]\n    occupy = set()\n    cnt = 0\n    for i in range(n):\n        if my[i] == 1:\n            if you[i] == 0:\n                occupy.add(i)\n                cnt += 1\n            elif i > 0 and you[i - 1] == 1 and (i - 1 not in occupy):\n                occupy.add(i - 1)\n                cnt += 1\n            elif i < n - 1 and you[i + 1] == 1:\n                occupy.add(i + 1)\n                cnt += 1\n    result.append(cnt)\nprint(*result, sep='\\n')", "def game(l, li_1, li_2):\n    n = 0\n    li1 = []\n    li2 = []\n    for i in range(l):\n        li1.append(int(li_1[i]))\n        li2.append(int(li_2[i]))\n    for i in range(l):\n        if li2[i] == 1:\n            if li1[i] == 0:\n                li1[i] = 2\n                n += 1\n                continue\n            if i - 1 >= 0 and li1[i - 1] == 1:\n                li1[i - 1] = 2\n                n += 1\n                continue\n            if i + 1 < l and li1[i + 1] == 1:\n                li1[i + 1] = 2\n                n += 1\n                continue\n    return n\nn = int(input())\nl = []\nli1 = []\nli2 = []\nfor i in range(n):\n    l.append(int(input()))\n    li1.append(input())\n    li2.append(input())\nfor i in range(n):\n    print(game(l[i], li1[i], li2[i]))", "entrada = int(input())\nfor i in range(entrada):\n    n = int(input())\n    s = list(input())\n    l = list(input())\n    count = 0\n    for i in range(n):\n        if l[i] == '1':\n            if s[i] == '0':\n                count += 1\n            elif i != 0 and s[i - 1] == '1':\n                s[i - 1] = '0'\n                count += 1\n            elif i != n - 1 and s[i + 1] == '1':\n                s[i + 1] = '0'\n                count += 1\n    print(count)", "def solve(n, a, b):\n    ans = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                ans += 1\n            elif i - 1 >= 0 and a[i - 1] == '1':\n                ans += 1\n            elif i + 1 < n and a[i + 1] == '1':\n                ans += 1\n                a[i + 1] = '-'\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    print(solve(n, a, b))\n    t -= 1", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a1 = input()\n    b1 = input()\n    a = ['2']\n    b = ['2']\n    for i in range(n):\n        a.append(a1[i])\n        b.append(b1[i])\n    a.append('2')\n    b.append('2')\n    count = 0\n    for i in range(1, n + 1):\n        if b[i] == '1' and a[i] == '0':\n            a[i] = '2'\n            count += 1\n        elif b[i] == '1' and a[i - 1] == '1':\n            a[i - 1] = '2'\n            count += 1\n        elif b[i] == '1' and a[i + 1] == '1':\n            a[i + 1] = '2'\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    w = input()\n    count = 0\n    signal = -1\n    for i in range(n):\n        if w[i] == '1':\n            if s[i] == '0':\n                count += 1\n            elif i != 0 and s[i - 1] == '1' and (i - 1 != signal):\n                count += 1\n            elif i != n - 1 and s[i + 1] == '1':\n                count += 1\n                signal = i + 1\n    print(count)", "def solve():\n    n = int(input())\n    enemy = list(input())\n    me = list(input())\n    ans = 0\n    for i in range(n):\n        if me[i] == '1':\n            if enemy[i] == '0':\n                ans += 1\n            elif i - 1 >= 0 and enemy[i - 1] == '1':\n                ans += 1\n                enemy[i - 1] = '0'\n            elif i + 1 < n and enemy[i + 1] == '1':\n                enemy[i + 1] = '0'\n                ans += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve(n, a, b):\n    ans = 0\n    marked = set()\n    for i in range(n):\n        if a[i] == '1':\n            if i > 0 and b[i - 1] == '1' and (i - 1 not in marked):\n                ans += 1\n            elif b[i] == '0':\n                ans += 1\n            elif i < n - 1 and b[i + 1] == '1' and (i + 1 not in marked):\n                ans += 1\n                marked.add(i + 1)\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    b = input()\n    a = input()\n    print(solve(n, a, b))", "def sol(A, B):\n    sett = set()\n    count = 0\n    for i in range(len(B)):\n        if B[i] == '1':\n            if A[i] == '0':\n                count += 1\n            elif i - 1 >= 0 and A[i - 1] == '1' and (i - 1 not in sett):\n                count += 1\n                sett.add(i - 1)\n            elif i + 1 <= len(B) - 1 and A[i + 1] == '1' and (i + 1 not in sett):\n                count += 1\n                sett.add(i + 1)\n    return count\nx = int(input())\nfor _ in range(x):\n    y = input()\n    A = input()\n    B = input()\n    print(sol(A, B))", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef gcdsum(n):\n    s = sum((int(x) for x in str(n)))\n    return gcd(n, s)\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(input())\n        b = input()\n        t = False\n        ans = 0\n        for i in range(n):\n            if b[i] == '1':\n                if a[i] == '0':\n                    ans += 1\n                elif i > 0 and a[i - 1] == '1':\n                    ans += 1\n                    a[i - 1] = '#'\n                elif i < n - 1 and a[i + 1] == '1':\n                    ans += 1\n                    a[i + 1] = '#'\n        print(ans)\nsolve()", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef isint(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\ndef solve():\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    ans = 0\n    for i in range(n):\n        if b[i] != '1':\n            continue\n        if i != 0 and a[i - 1] == '1':\n            a[i - 1] = '2'\n            ans += 1\n        elif a[i] == '0':\n            a[i] == '2'\n            ans += 1\n        elif i != n - 1 and a[i + 1] == '1':\n            a[i + 1] = '2'\n            ans += 1\n    return ans\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "def solves():\n    n = int(input())\n    enemy = list(input())\n    me = list(input())\n    ans = 0\n    for i in range(0, n):\n        if me[i] == '1':\n            if i == 0:\n                if enemy[0] == '0':\n                    ans += 1\n                elif enemy[1] == '1':\n                    ans += 1\n                    enemy[1] = '0'\n            elif i == n - 1:\n                if enemy[i] == '0':\n                    ans += 1\n                elif enemy[i - 1] == '1':\n                    ans += 1\n                    enemy[i - 1] = '0'\n            elif enemy[i] == '0':\n                ans += 1\n            elif enemy[i - 1] == '1':\n                ans += 1\n                enemy[i - 1] = '0'\n            elif enemy[i + 1] == '1':\n                ans += 1\n                enemy[i + 1] = '0'\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solves()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    vr = list(input())\n    greg = list(input())\n    hr = 0\n    for e in range(len(greg)):\n        if greg[e] == '1':\n            if vr[e] == '0':\n                hr += 1\n                vr[e] = '2'\n            elif e > 0 and vr[e - 1] == '1':\n                hr += 1\n                vr[e - 1] = '2'\n            elif e < n - 1 and vr[e + 1] == '1':\n                hr += 1\n                vr[e + 1] = '2'\n    print(hr)", "t = int(input())\ntestcases = [(int(input()), list(map(int, input())), list(map(int, input()))) for _ in range(t)]\nfor (n, enemy, gregor) in testcases:\n    if gregor.count(1) == 0:\n        print(0)\n        continue\n    count = 0\n    for i in range(n):\n        if gregor[i] == 1:\n            if enemy[i] == 0:\n                count += 1\n            elif i > 0 and enemy[i - 1] == 1:\n                count += 1\n            elif i < n - 1 and enemy[i + 1] == 1:\n                count += 1\n                enemy[i + 1] = 0\n    print(count)", "t = int(input())\nwhile t:\n    n = int(input())\n    enemy = list(input())\n    enemy = ['0'] + enemy + ['0']\n    greg = input()\n    cnt = 0\n    for i in range(len(greg)):\n        if greg[i] == '1':\n            if enemy[i + 1] == '0':\n                cnt += 1\n            elif enemy[i] == '1':\n                cnt += 1\n                enemy[i] = '0'\n            elif enemy[i + 2] == '1':\n                cnt += 1\n                enemy[i + 2] = '0'\n    print(cnt)\n    t -= 1", "def result(first, second, length):\n    result = list(first)\n    count = 0\n    for i in range(length):\n        if second[i] == '1':\n            if first[i] == '0':\n                result[i] = '2'\n                count += 1\n            elif first[i] == '1' and i - 1 >= 0 and (result[i - 1] == '1') and (first[i - 1] == '1'):\n                result[i - 1] = '2'\n                count += 1\n            elif first[i] == '1' and i + 1 < length and (result[i + 1] == '1') and (first[i + 1] == '1'):\n                result[i + 1] = '2'\n                count += 1\n    print(count)\nfor i in range(int(input())):\n    length = int(input())\n    a = input()\n    b = input()\n    result(a, b, length)", "def result(first, second, length):\n    result = list(first)\n    count = 0\n    for i in range(length):\n        if second[i] == '1':\n            if first[i] == '0':\n                result[i] = '2'\n                count += 1\n            elif i - 1 >= 0 and result[i - 1] == '1':\n                result[i - 1] = '2'\n                count += 1\n            elif i + 1 < length and result[i + 1] == '1':\n                result[i + 1] = '2'\n                count += 1\n    print(count)\nfor i in range(int(input())):\n    length = int(input())\n    a = input()\n    b = input()\n    result(a, b, length)", "import logging\nl = logging.Logger('')\nh = logging.StreamHandler()\nf = logging.Formatter(fmt='[{filename}:{lineno}] {msg}', style='{')\nh.setFormatter(f)\nl.addHandler(h)\nbug = l.info\nfrom math import sqrt\n\ndef main():\n    t = int(input())\n    for T in range(t):\n        size = int(input())\n        enemy = list(input())\n        allie = list(input())\n        total = 0\n        for i in range(size):\n            if allie[i] == '1':\n                if enemy[i] == '0':\n                    total += 1\n                    continue\n                if i > 0 and enemy[i - 1] == '1':\n                    total += 1\n                    enemy[i - 1] = '#'\n                    continue\n                if i < size - 1 and enemy[i + 1] == '1':\n                    total += 1\n                    enemy[i + 1] = '#'\n                    continue\n        print(total)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    b = list(input())\n    a = list(input())\n    ans = 0\n    for i in range(n):\n        if a[i] == '1':\n            if b[i] == '1':\n                if i != 0:\n                    if b[i - 1] == '1':\n                        ans += 1\n                        b[i - 1] = '0'\n                        continue\n                if i != n - 1:\n                    if b[i + 1] == '1':\n                        ans += 1\n                        b[i + 1] = '0'\n                        continue\n            else:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(input())\n    a = list(input())\n    visited = []\n    count = 0\n    if a[0] == '1':\n        if b[0] == '0':\n            count += 1\n            b[0] = 'w'\n        elif n > 1 and b[1] == '1':\n            count += 1\n            b[1] = 'w'\n    for i in range(1, n - 1):\n        if a[i] == '1':\n            if b[i] == '0':\n                count += 1\n                b[i] = 'w'\n            elif b[i - 1] == '1':\n                count += 1\n                b[i - 1] = 'w'\n            elif b[i + 1] == '1':\n                count += 1\n                b[i + 1] = 'w'\n    if a[n - 1] == '1' and n > 1:\n        if b[n - 1] == '0':\n            count += 1\n            b[n - 1] = 'w'\n        elif b[n - 2] == '1':\n            count += 1\n            b[n - 2] = 'w'\n    print(count)", "entrada = int(input())\nfor i in range(entrada):\n    n = int(input())\n    s = list(input())\n    l = list(input())\n    count = 0\n    for i in range(n):\n        if l[i] == '1':\n            if s[i] == '0':\n                count += 1\n                continue\n            elif i != 0 and s[i - 1] == '1':\n                s[i - 1] = '0'\n                count += 1\n                continue\n            elif i != n - 1 and s[i + 1] == '1':\n                s[i + 1] = '0'\n                count += 1\n                continue\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    first = input()\n    second = input()\n    li = [False] * n\n    for i in range(n):\n        if second[i] == '1':\n            if first[i] == '0':\n                li[i] = True\n            elif i - 1 >= 0 and first[i - 1] == '1' and (li[i - 1] == False):\n                li[i - 1] = True\n            elif i + 1 < n and first[i + 1] == '1' and (li[i + 1] == False):\n                li[i + 1] = True\n    print(li.count(True))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    a.append('0')\n    b.append('0')\n    c = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                c += 1\n            elif a[i - 1] == '1':\n                a[i - 1] = '0'\n                c += 1\n            elif a[i + 1] == '1':\n                a[i + 1] = '0'\n                c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    captured = [False] * n\n    opp = input()\n    me = input()\n    result = 0\n    for index in range(n):\n        if me[index] == '1':\n            if index > 0 and opp[index - 1] == '1' and (not captured[index - 1]):\n                result += 1\n            elif opp[index] == '0':\n                result += 1\n            elif index < n - 1 and opp[index + 1] == '1':\n                result += 1\n                captured[index + 1] = True\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    enemy = list(input().strip())\n    friend = list(input().strip())\n    k = 0\n    for i in range(n):\n        if friend[i] == '1':\n            if enemy[i] != '1':\n                k += 1\n            elif i != 0 and enemy[i - 1] == '1':\n                enemy[i - 1] = '0'\n                k += 1\n            elif i != n - 1 and enemy[i + 1] == '1':\n                enemy[i + 1] = '0'\n                k += 1\n    print(k)", "for t in range(int(input())):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    ans = 0\n    for i in range(n):\n        if s2[i] == '1':\n            if s1[i] == '0':\n                ans += 1\n            elif i > 0 and s1[i - 1] == '1':\n                ans += 1\n                s1[i - 1] = '0'\n            elif i < n - 1 and s1[i + 1] == '1':\n                ans += 1\n                s1[i + 1] = '0'\n    print(ans)", "import math\n\ndef solve(n, s1, s2):\n    ans = 0\n    for i in range(n):\n        if s2[i] == '1':\n            if s1[i] == '0':\n                ans += 1\n            elif i >= 1 and s1[i - 1] == '1':\n                ans += 1\n                s1[i - 1] = '2'\n            elif i < n - 1 and s1[i + 1] == '1':\n                ans += 1\n                s1[i + 1] = '2'\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    print(solve(n, s1, s2))", "from math import inf\n\ndef pro(a, b):\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                a[i] = -1\n                ans += 1\n            else:\n                if i - 1 >= 0 and a[i - 1] == '1':\n                    a[i - 1] = -1\n                    ans += 1\n                    continue\n                if i + 1 < n and a[i + 1] == '1':\n                    a[i + 1] = -1\n                    ans += 1\n                    continue\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    arr = input()\n    pro(list(a), list(arr))", "def checkPossible(pos, enemy):\n    if enemy[pos] == '0':\n        return 1\n    elif pos - 1 >= 0 and enemy[pos - 1] == '1':\n        enemy[pos - 1] = '2'\n        return 1\n    elif pos + 1 <= len(enemy) - 1 and enemy[pos + 1] == '1':\n        enemy[pos + 1] = '2'\n        return 1\n    else:\n        return 0\nt = int(input())\nfor CASE in range(t):\n    n = int(input())\n    enemy = input()\n    me = input()\n    enemy = [a for a in enemy]\n    res = 0\n    for i in range(n):\n        if me[i] == '1':\n            res += checkPossible(i, enemy)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    e = list(input())\n    g = list(input())\n    ans = 0\n    for i in range(n):\n        if g[i] == '1':\n            if e[i] == '0':\n                ans += 1\n            elif i > 0 and e[i - 1] == '1':\n                ans += 1\n                e[i - 1] = '2'\n            elif i < n - 1 and e[i + 1] == '1':\n                ans += 1\n                e[i + 1] = '2'\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    ans = 0\n    occupied = [0] * n\n    for i in range(n):\n        if s2[i] == '0':\n            continue\n        if s1[i] == '0':\n            occupied[i] = 1\n            ans += 1\n        elif i > 0 and s1[i - 1] == '1' and (occupied[i - 1] == 0):\n            occupied[i - 1] = 1\n            ans += 1\n        elif i < n - 1 and s1[i + 1] == '1' and (occupied[i + 1] == 0):\n            occupied[i + 1] = 1\n            ans += 1\n    print(ans)", "import math, os, io, sys\nfrom collections import Counter\nimport heapq\nfrom collections import deque\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    e = input()\n    g = input()\n    occ = set()\n    ans = 0\n    for i in range(n):\n        if g[i] == '1':\n            if e[i] == '0':\n                ans += 1\n            elif i - 1 > -1 and e[i - 1] == '1' and (i - 1 not in occ):\n                ans += 1\n            elif i + 1 < n and e[i + 1] == '1':\n                ans += 1\n                occ.add(i + 1)\n    return ans\nfor _ in range(getInt()):\n    print(solve())", "def f(opp, us, count=0, i=0):\n    for i in range(len(opp)):\n        if us[i] == '0':\n            continue\n        elif opp[i] == '0':\n            count += 1\n        elif i > 0 and opp[i - 1] == '1':\n            count += 1\n            opp[i - 1] = '*'\n        elif i < len(opp) - 1 and opp[i + 1] == '1':\n            count += 1\n            opp[i + 1] = '*'\n    print(count)\nfor _ in range(int(input())):\n    n = int(input())\n    opp = list(input())\n    us = list(input())\n    f(opp, us)", "tinytales = int(input())\nwhile tinytales:\n    tinytales -= 1\n    nobels = int(input())\n    stationary1 = input()\n    stationary2 = input()\n    stationary1 = list(stationary1)\n    stationary2 = list(stationary2)\n    antrax = 0\n    for icecream in range(0, nobels):\n        if stationary2[icecream] == '0':\n            continue\n        if stationary1[icecream] == '0':\n            antrax += 1\n        elif icecream - 1 >= 0 and stationary1[icecream - 1] == '1':\n            antrax += 1\n            stationary1[icecream - 1] = '0'\n        elif icecream + 1 < nobels and stationary1[icecream + 1] == '1':\n            antrax += 1\n            stationary1[icecream + 1] = '0'\n    print(antrax)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    vis = set()\n    ans = 0\n    if s[0] == '0' and t[0] == '1':\n        ans += 1\n    elif s[1] == '1' and t[0] == '1' and (1 not in vis):\n        ans += 1\n        vis.add(1)\n    for i in range(1, n - 1):\n        if s[i] == '0' and t[i] == '1':\n            ans += 1\n        elif s[i] == '1' and t[i] == '1':\n            if s[i - 1] == '1' and t[i] == '1' and (i - 1 not in vis):\n                ans += 1\n                vis.add(i - 1)\n            elif s[i + 1] == '1' and t[i] == '1' and (i + 1 not in vis):\n                ans += 1\n                vis.add(i + 1)\n    if s[n - 1] == '0' and t[n - 1] == '1':\n        ans += 1\n    elif s[n - 2] == '1' and t[n - 1] == '1' and (n - 2 not in vis):\n        ans += 1\n        vis.add(n - 2)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    str1 = input()\n    str2 = input()\n    arr1 = list(str1)\n    arr2 = list(str2)\n    ans = 0\n    if arr2[0] == '1':\n        if arr1[0] == '0':\n            ans += 1\n        elif arr1[1] == '1':\n            arr1[1] = '0'\n            ans += 1\n    for i in range(1, n - 1):\n        if arr2[i] == '1':\n            if arr1[i - 1] == '1':\n                ans += 1\n                arr1[i - 1] = '0'\n            elif arr1[i] == '0':\n                ans += 1\n            elif arr1[i + 1] == '1':\n                ans += 1\n                arr1[i + 1] = '0'\n    if arr2[n - 1] == '1':\n        if arr1[n - 1] == '0':\n            ans += 1\n        elif arr1[n - 2] == '1':\n            ans += 1\n            arr1[n - 2] = '0'\n    print(ans)", "for T in range(int(input())):\n    N = int(input())\n    opponent = list(input())\n    player = list(input())\n    count = 0\n    if player[0] == '1':\n        if opponent[0] == '0':\n            opponent[0] = '-1'\n            count += 1\n        elif opponent[1] == '1':\n            opponent[1] = '-1'\n            count += 1\n    for i in range(1, N - 1):\n        if player[i] == '1':\n            if opponent[i - 1] == '1':\n                opponent[i - 1] = '-1'\n                count += 1\n            elif opponent[i] == '0':\n                opponent[i] = '-1'\n                count += 1\n            elif opponent[i + 1] == '1':\n                opponent[i + 1] = '-1'\n                count += 1\n    if player[N - 1] == '1':\n        if opponent[N - 2] == '1' or opponent[N - 1] == '0':\n            count += 1\n    print(count)", "tt = int(input())\nwhile tt:\n    tt -= 1\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    s1 = list(s1)\n    s2 = list(s2)\n    ans = 0\n    for i in range(0, n):\n        if s2[i] == '0':\n            continue\n        if s1[i] == '0':\n            ans += 1\n        elif i - 1 >= 0 and s1[i - 1] == '1':\n            ans += 1\n            s1[i - 1] = '0'\n        elif i + 1 < n and s1[i + 1] == '1':\n            ans += 1\n            s1[i + 1] = '0'\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    ans = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                ans += 1\n            elif i >= 1 and a[i - 1] == '1':\n                ans += 1\n                a[i - 1] = '0'\n            elif i < n - 1 and a[i + 1] == '1':\n                ans += 1\n                a[i + 1] = '0'\n    print(ans)", "T = int(input())\nwhile T:\n    n = int(input())\n    ans = 0\n    a1 = list(input())\n    a2 = list(input())\n    for (i, ele) in enumerate(a2):\n        if ele == '1':\n            if a1[i] == '0':\n                a1[i] = '2'\n                ans += 1\n            elif i - 1 >= 0 and a1[i - 1] == '1':\n                a1[i - 1] = 2\n                ans += 1\n            elif i + 1 < n and a1[i + 1] == '1':\n                a1[i + 1] = 2\n                ans += 1\n    print(ans)\n    T -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    c = 0\n    if s2[0] == '1':\n        if s1[0] == '0':\n            c = c + 1\n        elif s1[1] == '1':\n            c = c + 1\n            s1[1] = '0'\n    for i in range(1, n - 1):\n        if s2[i] == '1':\n            if s1[i] == '0':\n                c = c + 1\n            elif s1[i - 1] == '1':\n                s1[i - 1] = '0'\n                c = c + 1\n            elif s1[i + 1] == '1':\n                c = c + 1\n                s1[i + 1] = '0'\n    if s2[n - 1] == '1':\n        if s1[n - 1] == '0':\n            c = c + 1\n        elif s1[n - 2] == '1':\n            c = c + 1\n            s1[n - 2] = '0'\n    print(c)\n    t = t - 1", "def test():\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    c = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                c += 1\n                a[i] = '2'\n            elif i > 0 and a[i - 1] == '1':\n                c += 1\n                a[i - 1] = '2'\n            elif i < n - 1 and a[i + 1] == '1':\n                c += 1\n                a[i + 1] = '2'\n    print(c)\nt = int(input())\nwhile t:\n    test()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    enemey = list(input())\n    gregor = list(input())\n    pawns = 0\n    for i in range(n):\n        if gregor[i] == '1':\n            if enemey[i] == '0':\n                enemey[i] = '2'\n                pawns += 1\n            elif i == 0 and enemey[i + 1] == '1':\n                enemey[i + 1] = '2'\n                pawns += 1\n                continue\n            elif i == n - 1 and enemey[i - 1] == '1':\n                enemey[i - 1] = '2'\n                pawns += 1\n                continue\n            elif i != 0 and i != n - 1:\n                if enemey[i - 1] == '1':\n                    enemey[i - 1] = '2'\n                    pawns += 1\n                    continue\n                elif enemey[i + 1] == '1':\n                    enemey[i + 1] = '2'\n                    pawns += 1\n    print(pawns)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    c = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                c += 1\n            elif i == 0:\n                if a[i + 1] == '1':\n                    c += 1\n                    a[i + 1] = 'x'\n            elif a[i - 1] == '1':\n                c += 1\n                a[i - 1] = 'x'\n            elif i + 1 < n and a[i + 1] == '1':\n                c += 1\n                a[i + 1] = 'x'\n    print(c)", "def solve(n, enemy, gregory):\n    destination = [e for e in enemy]\n    pieces_that_can_pass = 0\n    for i in range(n):\n        if gregory[i] == '0':\n            continue\n        if destination[i] == '0':\n            pieces_that_can_pass += 1\n            destination[i] = '2'\n            continue\n        next_indices = []\n        if i > 0:\n            next_indices.append(i - 1)\n        if i + 1 < n:\n            next_indices.append(i + 1)\n        for j in next_indices:\n            if destination[j] == '1':\n                pieces_that_can_pass += 1\n                destination[j] = '2'\n                break\n    return pieces_that_can_pass\n\ndef main():\n    test_cases = int(input())\n    for t in range(test_cases):\n        n = int(input())\n        enemy = input()\n        gregory = input()\n        a = solve(n, enemy, gregory)\n        print(a)\nmain()", "t = int(input())\nfor _ in range(0, t):\n    c = 0\n    n = int(input())\n    h = [0] * n\n    a = input()\n    b = input()\n    for i in range(0, n):\n        if b[i] == '1':\n            if a[i] == '0':\n                c += 1\n            elif i != 0 and a[i - 1] == '1' and (not h[i - 1]):\n                c += 1\n                h[i - 1] = 1\n            elif i != n - 1 and a[i + 1] == '1' and (not h[i + 1]):\n                c += 1\n                h[i + 1] = 1\n    print(c, end='\\n')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    c = 0\n    for j in range(n):\n        if b[j] == '1':\n            if a[j] == '0':\n                c = c + 1\n            elif j == 0:\n                if a[j + 1] == '1':\n                    c = c + 1\n                    a[j + 1] = '-1'\n            elif j == n - 1:\n                if a[j - 1] == '1':\n                    c = c + 1\n            elif a[j - 1] == '1':\n                c = c + 1\n            elif a[j + 1] == '1':\n                c = c + 1\n                a[j + 1] = '-1'\n    print(c)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    x2 = list(input())\n    x1 = list(input())\n    y = 0\n    for j in range(m):\n        if x1[j] == '1':\n            if j == 0:\n                if x2[j] == '0':\n                    y += 1\n                elif x2[j + 1] == '1':\n                    y += 1\n                    x2[j + 1] = ''\n            elif j == m - 1:\n                if x2[j] == '0':\n                    y += 1\n                elif x2[j - 1] == '1':\n                    y += 1\n                    x2[j - 1] = ''\n            elif x2[j] == '0':\n                y += 1\n            elif x2[j - 1] == '1':\n                y += 1\n                x2[j - 1] = ''\n            elif x2[j + 1] == '1':\n                y += 1\n                x2[j + 1] = ''\n    print(y)", "for _ in range(int(input())):\n    n = int(input())\n    ans = int(0)\n    en = list('2' + input() + '2')\n    gr = list('2' + input() + '2')\n    for i in range(1, n + 1):\n        if gr[i] == '1':\n            if en[i] == '0':\n                ans += 1\n            elif en[i - 1] == '1':\n                ans += 1\n                en[i - 1] = '2'\n            elif en[i + 1] == '1':\n                ans += 1\n                en[i + 1] = '2'\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ls1 = list(input())\n    ls2 = list(input())\n    s = 0\n    for i in range(n):\n        if ls2[i] == '1':\n            if i > 0:\n                if ls1[i - 1] == '1':\n                    ls1[i - 1] = '2'\n                    s += 1\n                    continue\n            if ls1[i] == '0':\n                ls1[i] = '2'\n                s += 1\n                continue\n            if i < n - 1:\n                if ls1[i + 1] == '1':\n                    ls1[i + 1] = '2'\n                    s += 1\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    captured = set()\n    opp = input()\n    me = input()\n    result = 0\n    for index in range(n):\n        if me[index] == '1':\n            if index > 0 and opp[index - 1] == '1' and (index - 1 not in captured):\n                result += 1\n            elif opp[index] == '0':\n                result += 1\n            elif index < n - 1 and opp[index + 1] == '1':\n                result += 1\n                captured.add(index + 1)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = ['X'] + list(input()) + ['X']\n    m = 'X' + input() + 'X'\n    ans = 0\n    for i in range(1, n + 1):\n        if m[i] == '1':\n            if a[i] == '0':\n                ans += 1\n            elif a[i - 1] == '1':\n                ans += 1\n                a[i - 1] = '2'\n            elif a[i + 1] == '1':\n                ans += 1\n                a[i + 1] = '2'\n    print(ans)", "n = int(input())\nfor i in range(n):\n    win = 0\n    l = int(input())\n    ent = list(input())\n    greg = list(input())\n    for x in range(l):\n        if greg[x] == '1':\n            if ent[x] == '0':\n                win += 1\n                ent[x] = '2'\n            elif x - 1 >= 0 and ent[x - 1] == '1':\n                win += 1\n                ent[x - 1] = '2'\n            elif x + 1 < l and ent[x + 1] == '1':\n                win += 1\n                ent[x + 1] = '2'\n    print(win)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ene = ['x'] + list(input()) + ['x']\n    geo = ['x'] + list(input()) + ['x']\n    ans = 0\n    for j in range(1, n + 1):\n        if geo[j] == '1':\n            if ene[j] == '0':\n                ans += 1\n            elif ene[j - 1] == '1':\n                ans += 1\n                ene[j - 1] = '2'\n            elif ene[j + 1] == '1':\n                ans += 1\n                ene[j + 1] = '2'\n    print(ans)", "t = int(input())\nfor lkasjflkasfj in range(t):\n    n = int(input())\n    a = ['X'] + list(input()) + ['X']\n    m = 'X' + input() + 'X'\n    ans = 0\n    for i in range(1, n + 1):\n        if m[i] == '1':\n            if a[i] == '0':\n                ans += 1\n            elif a[i - 1] == '1':\n                ans += 1\n                a[i - 1] = '2'\n            elif a[i + 1] == '1':\n                ans += 1\n                a[i + 1] = '2'\n    print(ans)", "def answer(enemy, gregory):\n    result = 0\n    for i in range(len(gregory)):\n        if enemy[i] == '0':\n            if gregory[i] == '1':\n                gregory[i] = '-1'\n                result += 1\n        elif i - 1 >= 0 and gregory[i - 1] == '1':\n            result += 1\n        elif i + 1 <= len(gregory) - 1 and gregory[i + 1] == '1':\n            result += 1\n            gregory[i + 1] = '-1'\n    return result\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    enemy = list(input())\n    gregory = list(input())\n    print(answer(enemy, gregory))", "answer = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input()]\n    t = [int(i) for i in input()]\n    ans = 0\n    for i in range(n):\n        if i == 0 and t[i] == 1:\n            if s[i] == 0:\n                ans += 1\n                s[i] = 0\n            elif i + 1 < n and s[i + 1] == 1:\n                ans += 1\n                s[i + 1] = 0\n        elif i > 0 and i < n - 1 and (t[i] == 1):\n            if s[i] == 0:\n                ans += 1\n                s[i] = 0\n            elif s[i - 1] == 1:\n                ans += 1\n                s[i - 1] = 0\n            elif s[i + 1] == 1:\n                ans += 1\n                s[i + 1] = 0\n        elif i == n - 1 and t[i] == 1:\n            if s[i] == 0:\n                ans += 1\n                s[i] = 0\n            elif i - 1 > -1 and s[i - 1] == 1:\n                ans += 1\n                s[i - 1] = 0\n    answer.append(ans)\nfor i in answer:\n    print(i)", "def solution(enemy, my):\n    res = 0\n    for i in range(len(my)):\n        if my[i] == '1':\n            if enemy[i] == '0':\n                res += 1\n                enemy[i] = '2'\n            elif i > 0 and enemy[i - 1] == '1':\n                res += 1\n                enemy[i - 1] = '2'\n            elif i + 1 < len(my) and enemy[i + 1] == '1':\n                enemy[i + 1] = '2'\n                res += 1\n    return res\nn = int(input())\nfor _ in range(n):\n    num = int(input())\n    enemy = list(input())\n    my = list(input())\n    print(solution(enemy, my))", "def test():\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    c = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] == '0':\n                c += 1\n                a[i] = '2'\n            elif i > 0 and a[i - 1] == '1':\n                c += 1\n                a[i - 1] = '2'\n            elif i < n - 1 and a[i + 1] == '1':\n                c += 1\n                a[i + 1] = '2'\n    print(c)\nt = int(input())\nwhile t:\n    test()\n    t -= 1", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    vrag = list(input())\n    gregor = list(input())\n    kol = 0\n    for i in range(n):\n        if gregor[i] == '1':\n            if vrag[i] == '0':\n                kol += 1\n            elif i >= 1:\n                if vrag[i - 1] == '1':\n                    kol += 1\n                    vrag[i - 1] = 0\n                elif i + 1 <= n - 1:\n                    if vrag[i + 1] == '1':\n                        kol += 1\n                        vrag[i + 1] = 0\n            elif vrag[i + 1] == '1':\n                kol += 1\n                vrag[i + 1] = 0\n    print(kol)"]