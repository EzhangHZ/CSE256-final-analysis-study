["from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({*map(sum, chain(*(combinations(a, i) for i in range(n + 1))))}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum(c) for i in range(n + 1) for c in combinations(a, i)}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product(*[(0, 1)] * n)}) >> n::2])", "from itertools import combinations\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        if arr[0] != 0:\n            print('NO')\n        else:\n            print('YES')\n        continue\n    h = dict()\n    t = 0\n    for j in range(1, n + 1):\n        for k in combinations(arr, j):\n            l = sum(k)\n            if l == 0:\n                t = 1\n                print('YES')\n                break\n            elif l in h:\n                t = 1\n                print('YES')\n                break\n            else:\n                h[l] = 1\n        if t == 1:\n            break\n    if t != 1:\n        print('NO')", "def su(uni):\n    result = [[]]\n    for i in range(len(uni)):\n        for j in range(len(result)):\n            result.append(result[j] + [uni[i]])\n    return result\n\ndef summ(a):\n    S = 0\n    for i in a:\n        S += i\n    return S\n\ndef fun(x):\n    return abs(int(x))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(fun, input().split()))\n    starry = su(a)\n    sumarry = set()\n    flag = 0\n    for i in range(len(starry)):\n        x = summ(starry[i])\n        if x in sumarry:\n            flag = 1\n            break\n        sumarry.add(x)\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product((0, 1), repeat=n)}) >> n::2])", "from math import floor, gcd, sqrt, ceil\nfrom collections import Counter, defaultdict\nfrom itertools import combinations\nfrom heapq import heapify, heappop, heappush\n\ndef chk(a, n):\n    l = []\n    for i in range(1, n + 1):\n        l.append(list(combinations(a, i)))\n    ans = [0]\n    for i in l:\n        for j in i:\n            ans.append(sum(list(j)))\n    return len(ans) != len(set(ans))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if 0 in a or len(set(a)) < n or chk(a, n):\n            print('YES')\n        else:\n            print('NO')\nmain()", "def su(uni):\n    result = [[]]\n    for i in range(len(uni)):\n        for j in range(len(result)):\n            result.append(result[j] + [uni[i]])\n    return result\n\ndef summ(a):\n    S = 0\n    for i in a:\n        S += i\n    return S\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = list(map(int, input().split()))\n    a = []\n    for temp1 in num:\n        a.append(abs(temp1))\n    starry = su(a)\n    sumarry = []\n    for i in range(len(starry)):\n        sumarry.append(summ(starry[i]))\n    flag = 0\n    sumarry.sort()\n    N = len(sumarry)\n    count = 0\n    while count < N - 1:\n        if sumarry[count] == sumarry[count + 1]:\n            flag = 1\n            break\n        count += 1\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product((0, 1), repeat=n)}) == 2 ** n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product((0, 1), repeat=10)}) >> len(a)::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product(*[(0, 1)] * n)}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = len(a)\n    print('YNEOS'[len({sum((x * y for (x, y) in zip(a, p))) for p in product(*[(0, 1)] * n)}) >> n::2])", "def get_power_set(s):\n    power_set = [[]]\n    for elem in s:\n        for sub_set in power_set:\n            power_set = power_set + [list(sub_set) + [elem]]\n    return power_set\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    y = 0\n    if 0 in a:\n        print('YES')\n        y = 1\n    else:\n        for i in range(n):\n            if -a[i] in a:\n                print('YES')\n                y = 1\n                break\n    if y == 0:\n        li = get_power_set(a)\n        li.pop(0)\n        for i in range(2 ** n - 1):\n            li[i] = sum(li[i])\n        se = set(li)\n        if len(se) == len(li):\n            print('NO')\n        else:\n            print('YES')", "from itertools import chain, combinations\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = [int(x) for x in input().split()]\n    powerSet = chain.from_iterable((combinations(arr, r) for r in range(N + 1)))\n    powerSetSums = set([sum(i) for i in powerSet])\n    if len(powerSetSums) < 2 ** N:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\ninput = sys.stdin.readline\nimp = 'IMPOSSIBLE'\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    jo = False\n    if 0 in a:\n        jo = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                jo = True\n                break\n        if jo:\n            break\n    if not jo:\n        ss = []\n        for i in range(2 ** n):\n            ii = i\n            aa = [0 for u in range(n)]\n            for j in range(n):\n                aa[j] = ii % 2\n                ii //= 2\n            su = 0\n            for k in range(n):\n                su = su + a[k] * aa[k]\n            ss.append(su)\n        ss.sort()\n        for k in range(len(ss) - 1):\n            if ss[k] == ss[k + 1]:\n                jo = True\n                break\n    if jo:\n        print('YES')\n    else:\n        print('NO')", "def readline():\n    return map(int, input().split())\n\ndef sums(values):\n    sums_ = [0]\n    for v in values:\n        new = list()\n        for s in sums_:\n            new.extend((s + v, s - v))\n        yield from new\n        sums_.extend(new)\n\ndef solve():\n    input()\n    a = readline()\n    print('YES' if 0 in sums(a) else 'NO')\nt = int(input())\nfor __ in range(t):\n    solve()", "def possible(a):\n    sums = [0]\n    for v in a:\n        cands = []\n        for sum_ in sums:\n            cands_ = [sum_ + v, sum_ - v]\n            if 0 in cands_:\n                return True\n            cands.extend(cands_)\n        sums.extend(cands)\n    return False\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if possible(a):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 2 ** n - 1\n    d = []\n    an = 'NO'\n    for i in range(x + 1):\n        c = sum([a[j] for j in range(n) if i & 1 << j])\n        if c in d:\n            an = 'YES'\n            break\n        else:\n            d.append(c)\n    print(an)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 2 ** n - 1\n    d = []\n    an = 'NO'\n    for i in range(x + 1):\n        c = 0\n        for j in range(n):\n            if i & 1 << j:\n                c += a[j]\n        if c in d:\n            an = 'YES'\n            break\n        else:\n            d.append(c)\n    print(an)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 2 ** n - 1\n    d = []\n    an = 'NO'\n    for i in range(x + 1):\n        c = sum([a[j] for j in range(n) if i & 1 << j])\n        if c in d:\n            an = 'YES'\n            break\n        else:\n            d.append(c)\n    print(an)", "for _ in range(int(input())):\n    N = int(input())\n    lis = list(map(int, input().split()))\n    sums = set([lis[0], -lis[0]])\n    for i in range(1, N):\n        cur_sums = sums.copy()\n        sums.add(lis[i])\n        for m in cur_sums:\n            sums.add(m + lis[i])\n            sums.add(m - lis[i])\n    print('YES' if 0 in sums else 'NO')", "def readline():\n    return map(int, input().split())\n\ndef sums(values):\n    ret = [(0, 0)]\n    for v in values:\n        plus = [(v + x, cnt + 1) for (x, cnt) in ret]\n        minus = [(v - x, cnt + 1) for (x, cnt) in ret]\n        ret.extend(plus)\n        ret.extend(minus)\n    return ret\n\ndef solve():\n    n = int(input())\n    a = readline()\n    return any((v == 0 for (v, cnt) in sums(a) if cnt))\nt = int(input())\nfor __ in range(t):\n    print('YES' if solve() else 'NO')", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(10 ** 8)\n\ndef solve(i, value, took):\n    if i == n:\n        if took and value == 0:\n            return True\n        return False\n    return solve(i + 1, value, took) | solve(i + 1, value + a[i], took + 1) | solve(i + 1, value - a[i], took + 1)\n\ndef answer():\n    if solve(0, 0, 0) == True:\n        return 'YES'\n    else:\n        return 'NO'\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer())", "def f(l, i, s):\n    if s == 0:\n        return 1\n    if i >= len(l):\n        return 0\n    if s == -1:\n        return f(l, i + 1, l[i]) or f(l, i + 1, -1) or f(l, i + 1, -l[i])\n    else:\n        return f(l, i + 1, s + l[i]) or f(l, i + 1, s) or f(l, i + 1, s - l[i])\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print('YES' if f(l, 0, -1) else 'NO')", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    print('YNEOS'[len({*map(sum, combinations(a + [0] * n, n))}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    print('YNEOS'[len({*map(sum, combinations(a + [0] * n, n))}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    print('YNEOS'[len({*map(sum, combinations(a + [0] * n, n))}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    print('YNEOS'[len({*map(sum, combinations(a + [0] * n, n))}) >> n::2])", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    n = len(a)\n    print('YNEOS'[len({*map(sum, combinations(a + [0] * n, n))}) >> n::2])"]