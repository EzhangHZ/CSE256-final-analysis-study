["import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    (a, b, p) = M()\n    s = S()\n    dp = [0] * len(s)\n    i = len(s) - 2\n    while i >= 0:\n        if s[i] == 'A':\n            t = dp[i + 1] + a\n            while i >= 0 and s[i] == 'A':\n                dp[i] = t\n                i -= 1\n        else:\n            t = dp[i + 1] + b\n            while i >= 0 and s[i] == 'B':\n                dp[i] = t\n                i -= 1\n    ans = len(s)\n    for j in range(len(dp)):\n        if dp[j] <= p:\n            ans = j + 1\n            break\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "import sys\ninput = sys.stdin.readline\nfor ti in range(int(input())):\n    (a, b, p) = [int(x) for x in input().strip().split()]\n    c = {'A': a, 'B': b}\n    s = input().strip()\n    (prev, cur) = (len(s) - 2, len(s) - 3)\n    if c[s[-2]] > p:\n        print(len(s))\n        continue\n    p -= c[s[-2]]\n    while cur >= 0:\n        if s[cur] == s[prev]:\n            cur -= 1\n            prev -= 1\n        elif p >= c[s[cur]]:\n            p -= c[s[cur]]\n            cur -= 1\n            prev -= 1\n        else:\n            break\n    print(prev + 1)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (A, B, P) = [int(x) for x in input().split()]\n        S = input().strip()\n        if P < A and P < B:\n            print(len(S))\n            continue\n        c = S[0]\n        cost = []\n        if c == 'A':\n            cost.append([1, A])\n        else:\n            cost.append([1, B])\n        for (i, s) in enumerate(S):\n            if s != c:\n                c = s\n                if c == 'A':\n                    cost.append([i + 1, A])\n                else:\n                    cost.append([i + 1, B])\n        if len(cost) == 1:\n            if cost[0][1] > P:\n                print(len(S))\n            else:\n                print(1)\n            continue\n        if cost[-1][0] == len(S):\n            cost[-1][1] = 0\n        else:\n            cost.append([len(S), 0])\n        for i in range(len(cost) - 2, -1, -1):\n            cost[i][1] += cost[i + 1][1]\n            if cost[i][1] > P:\n                print(cost[i + 1][0])\n                break\n        else:\n            print(1)\nmain()", "t = int(input())\nvec = []\nfor i in range(t):\n    (a, b, p) = [int(j) for j in input().split(' ')]\n    s = input()\n    marker_prev = s[-1]\n    paid = 0\n    pos = len(s)\n    for marker_now in s[-2::-1]:\n        if marker_now != marker_prev:\n            paid = 0\n        if paid == 0:\n            if marker_now == 'A':\n                g = a\n            else:\n                g = b\n            if p >= g:\n                p -= g\n                paid = 1\n            else:\n                break\n        pos -= 1\n        marker_prev = marker_now\n    vec.append(pos)\nfor j in vec:\n    print(j)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    t = II()\n    for _ in range(t):\n        (a, b, p) = MI()\n        s = SI()[:-1] + '@'\n        n = len(s)\n        for i in range(n - 1, -1, -1):\n            if i > 0 and s[i] != s[i - 1]:\n                toll = a if s[i - 1] == 'A' else b\n                if toll <= p:\n                    p -= toll\n                else:\n                    break\n        print(i + 1)\nmain()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (a, b, p) = [int(d) for d in sys.stdin.readline().split()]\n    s = sys.stdin.readline()\n    lsy = None\n    c = len(s) - 1\n    for sy in s[-3::-1]:\n        if sy == 'A' and sy != lsy:\n            p -= a\n        elif sy == 'B' and sy != lsy:\n            p -= b\n        if p < 0:\n            print(c)\n            break\n        else:\n            c -= 1\n        lsy = sy\n    else:\n        print(1)", "for _ in range(int(input())):\n    (a, b, p) = list(map(int, input().split()))\n    st = input()\n    pos = []\n    amount = []\n    c = 0\n    prev = None\n    ind = len(st)\n    for i in range(-2, -len(st) - 1, -1):\n        if st[i] != prev:\n            if st[i] == 'A':\n                if c + a > p:\n                    break\n                else:\n                    c += a\n                prev = 'A'\n            elif c + b > p:\n                break\n            else:\n                c += b\n                prev = 'B'\n        ind -= 1\n    print(ind)", "t = int(input())\nfor tc in range(t):\n    (a, b, p) = list(map(int, input().split()))\n    s = input()\n    result = len(s)\n    for i in range(len(s) - 2, -1, -1):\n        if i == 0 or s[i] != s[i - 1]:\n            cost = a if s[i] == 'A' else b\n            if cost > p:\n                break\n            else:\n                p = p - cost\n                result = i + 1\n    print(result)", "t = int(input())\nfor i in range(0, t):\n    e = input().split()\n    a = int(e[0])\n    b = int(e[1])\n    p = int(e[2])\n    s = str(input())\n    j = len(s) - 2\n    r = len(s)\n    c = 0\n    while j >= 0:\n        l = s[j]\n        while s[j] == l and j >= 0:\n            j -= 1\n        if l == 'A':\n            c += a\n        else:\n            c += b\n        if p >= c:\n            r = j + 2\n    print(r)", "t = int(input())\nfor i in range(0, t):\n    z = 0\n    e = input().split()\n    a = int(e[0])\n    b = int(e[1])\n    p = int(e[2])\n    s = str(input())\n    j = len(s) - 2\n    r = len(s)\n    c = 0\n    while j >= 0:\n        l = s[j]\n        while s[j] == l and j >= 0:\n            j -= 1\n        if l == 'A':\n            c += a\n        else:\n            c += b\n        if p >= c:\n            r = j + 2\n    print(r)", "t = int(input())\nfor case in range(t):\n    (a, b, p) = map(int, input().split(' '))\n    s = input()\n    i = len(s) - 1\n    if s[i - 1] == 'A':\n        cost = a\n    elif s[i - 1] == 'B':\n        cost = b\n    if cost > p:\n        print(i + 1)\n        continue\n    i -= 1\n    while i >= 1:\n        if s[i - 1] == 'A' and s[i] == 'B':\n            if cost + a > p:\n                break\n            cost += a\n        elif s[i - 1] == 'B' and s[i] == 'A':\n            if cost + b > p:\n                break\n            cost += b\n        i -= 1\n    print(i + 1)", "def homecoming(a, b, p, s):\n    n = len(s)\n    dp = [0] * (n - 1)\n    dic = {'A': a, 'B': b}\n    dp[-1] = dic[s[-2]]\n    prev = s[-2]\n    if dp[-1] > p:\n        return n\n    for i in range(n - 3, -1, -1):\n        if s[i] == prev:\n            dp[i] = dp[i + 1]\n        else:\n            dp[i] = dp[i + 1] + dic[s[i]]\n        prev = s[i]\n        if dp[i] > p:\n            return i + 2\n    return 1\nfor i in range(int(input())):\n    [a, b, p] = list(map(int, input().split()))\n    s = input()\n    print(homecoming(a, b, p, s))", "def homecoming(a, b, p, s):\n    n = len(s)\n    cost = 0\n    dic = {'A': a, 'B': b}\n    cost = dic[s[-2]]\n    prev = s[-2]\n    if cost > p:\n        return n\n    for i in range(n - 3, -1, -1):\n        if prev != s[i]:\n            cost += dic[s[i]]\n        prev = s[i]\n        if cost > p:\n            return i + 2\n    return 1\nfor i in range(int(input())):\n    [a, b, p] = list(map(int, input().split()))\n    s = input()\n    print(homecoming(a, b, p, s))", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (a, b, p) = list(map(int, input().split()))\n        s = input()\n        n = len(s)\n        spent = 0\n        last = n - 2\n        early = n - 1\n        while last > -1:\n            if last == 0:\n                if s[0] == 'A':\n                    if a > p:\n                        early += 1\n                    else:\n                        early = 1\n                elif b > p:\n                    early += 1\n                else:\n                    early = 1\n                break\n            elif s[last] != s[last - 1]:\n                if s[last] == 'A':\n                    if a > p:\n                        early += 1\n                        break\n                    else:\n                        p -= a\n                        early = last\n                elif b > p:\n                    early += 1\n                    break\n                else:\n                    p -= b\n                    early = last\n                last -= 1\n            else:\n                last -= 1\n        print(early)\nmain()", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    i = len(s) - 2\n    while i >= 0:\n        if s[i] == 'A':\n            if p - a < 0:\n                break\n            p -= a\n            while i >= 0 and s[i] == 'A':\n                i -= 1\n        else:\n            if p - b < 0:\n                break\n            p -= b\n            while i >= 0 and s[i] == 'B':\n                i -= 1\n    print(i + 2)", "t = int(input())\ntest_cases = [(input(), input()) for i in range(t)]\n\ndef solve(test_case):\n    (a, b, p) = map(int, test_case[0].split())\n    s = test_case[1]\n    s = s[::-1]\n    ans = len(s)\n    last = s[0]\n    last_path = True\n    for i in range(1, len(s)):\n        if s[i] != last:\n            if last_path:\n                if i > 1:\n                    if last == 'A' and p >= a:\n                        p -= a\n                    elif last == 'B' and p >= b:\n                        p -= b\n                    else:\n                        break\n                last_path = False\n            if s[i] == 'A' and p >= a:\n                p -= a\n            elif s[i] == 'B' and p >= b:\n                p -= b\n            else:\n                break\n        last = s[i]\n        ans -= 1\n    if last_path:\n        if last == 'A' and p >= a:\n            ans = 1\n        elif last == 'B' and p >= b:\n            ans = 1\n        else:\n            ans = len(s)\n    print(ans)\nfor test_case in test_cases:\n    solve(test_case)", "t = int(input())\nans = []\nfor i in range(t):\n    (a, b, p) = list(map(int, input().split(' ')))\n    s = list(input())\n    s.reverse()\n    n = len(s)\n    s_help = [0] * n\n    s_help[0] = -1\n    if s[1] == 'A':\n        s_help[1] = a\n    else:\n        s_help[1] = b\n    flag = 0\n    if s_help[1] <= p:\n        for i in range(2, n):\n            if s[i] == s[i - 1]:\n                s_help[i] = s_help[i - 1]\n            elif s[i] == 'A':\n                s_help[i] = s_help[i - 1] + a\n            else:\n                s_help[i] = s_help[i - 1] + b\n            if s_help[i] > p:\n                flag = 1\n                ans.append(n - i + 1)\n                break\n        if flag == 0:\n            ans.append(1)\n    else:\n        ans.append(n)\nfor i in range(0, t):\n    print(ans[i])", "t = int(input())\nfor i in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    f = True\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] == 'A':\n            if a > p:\n                print(i + 2)\n                f = False\n                break\n            if s[i] != s[i - 1]:\n                p = p - a\n        if s[i] == 'B':\n            if b > p:\n                print(i + 2)\n                f = False\n                break\n            if s[i] != s[i - 1]:\n                p = p - b\n    if f:\n        print(1)", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    i = len(s) - 2\n    j = s[i] > 'A'\n    while -i < 1 > a[j] - p:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 2)", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    s = input()\n    n = len(s)\n    j = n\n    for i in range(n - 2, -1, -1):\n        if s[i] != s[i + 1] or i == n - 2:\n            if s[i] == 'A':\n                c -= a\n            else:\n                c -= b\n        if c >= 0:\n            j -= 1\n        else:\n            break\n    print(j)", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "T = int(input())\nresult = []\nfor i in range(0, T):\n    list11 = list(map(int, input().split()))\n    a = list11[0]\n    b = list11[1]\n    p = list11[2]\n    cost = 0\n    st = input()\n    length = len(st)\n    st = st[::-1]\n    s = st[1]\n    res = 0\n    for j in range(2, length):\n        if s != st[j]:\n            if s == 'A':\n                cost = cost + a\n                if cost > p:\n                    break\n                else:\n                    res = j - 1\n            if s == 'B':\n                cost = cost + b\n                if cost > p:\n                    break\n                else:\n                    res = j - 1\n            s = st[j]\n        if j == length - 1:\n            if st[j] == 'A':\n                cost = cost + a\n                if cost > p:\n                    break\n                else:\n                    res = length - 1\n            if st[j] == 'B':\n                cost = cost + b\n                if cost > p:\n                    break\n                else:\n                    res = length - 1\n    if length == 2:\n        if st[1] == 'A':\n            if a > p:\n                res = 0\n            else:\n                res = 1\n        if st[1] == 'B':\n            if b > p:\n                res = 0\n            else:\n                res = 1\n    result.append(length - res)\nfor element in result:\n    print(element)", "n = int(input())\nl1 = []\nfor i in range(n):\n    d = {}\n    l = []\n    (a, b, c) = input().split()\n    (a, b, c) = (int(a), int(b), int(c))\n    c1 = c\n    s = input()\n    s = s[:len(s) - 1]\n    z = len(s)\n    k = ''\n    p = 0\n    for j in range(z):\n        if s[j] != k:\n            d[j] = s[j]\n            k = s[j]\n    for x in d:\n        l.append(x)\n    l = l[::-1]\n    for p in l:\n        if d[p] == 'A':\n            if c1 - a >= 0:\n                c1 = c1 - a\n                z = p\n            else:\n                break\n        elif c1 - b >= 0:\n            c1 = c1 - b\n            z = p\n        else:\n            break\n    l1.append(z + 1)\nfor i in l1:\n    print(i)", "t = int(input())\ncost = []\nroad = []\nfinal = []\nfor i in range(0, t):\n    str1 = input()\n    str2 = input()\n    cost.append(str1.split())\n    road.append(list(str2))\nfor j in range(0, t):\n    A_cost = int(cost[j][0])\n    B_cost = int(cost[j][1])\n    money = int(cost[j][2])\n    path = road[j]\n    k = len(path) - 2\n    pos = path[k]\n    if pos == 'A':\n        remain = A_cost\n    else:\n        remain = B_cost\n    if money < remain:\n        final.append(k + 2)\n    else:\n        while k > 0:\n            if pos != path[k - 1]:\n                pos = path[k - 1]\n                k = k - 1\n                if pos == 'A':\n                    remain += A_cost\n                else:\n                    remain += B_cost\n                if money < remain:\n                    final.append(k + 2)\n                    break\n            else:\n                k = k - 1\n    if k == 0 and money >= remain:\n        final.append(1)\nfor no in final:\n    print(no)", "t = int(input())\nans = []\nfor i in range(0, t):\n    (a, b, p) = map(int, input().split())\n    road = str(input())\n    ans.append(len(road))\n    flag = 0\n    n = len(road) - 1\n    sum = 0\n    if n == 0:\n        ans[i] = 1\n    else:\n        for j in range(0, n):\n            if road[n - j - 1] == 'A':\n                if flag == 1 and p >= sum:\n                    ans[i] = n - j\n                if flag != 1:\n                    flag = 1\n                    sum += a\n                    if p >= sum:\n                        ans[i] = n - j\n                    else:\n                        break\n            else:\n                if flag == -1 and p >= sum:\n                    ans[i] = n - j\n                if flag != -1:\n                    flag = -1\n                    sum += b\n                    if p >= sum:\n                        ans[i] = n - j\n                    else:\n                        break\nfor i in range(0, t):\n    print(ans[i])", "get_int = lambda : int(input())\nget_mul_int = lambda : map(int, input().rstrip().split())\nget_list = lambda : list(map(int, input().rstrip().split()))\nTEST_CASES = True\n\ndef main():\n    (a, b, p) = get_mul_int()\n    s = input()\n    n = len(s)\n    if s == 'A' * n:\n        if p >= a:\n            print(1)\n        else:\n            print(n)\n        return\n    elif s == 'B' * n:\n        if p >= b:\n            print(1)\n        else:\n            print(n)\n        return\n    if n == 2:\n        if s[0] == 'A':\n            if p - a >= 0:\n                print(1)\n            else:\n                print(2)\n        elif p - b >= 0:\n            print(1)\n        else:\n            print(2)\n        return\n    if s[-2] == 'B':\n        if p - b >= 0:\n            p -= b\n        else:\n            print(n)\n            return\n    elif p - a >= 0:\n        p -= a\n    else:\n        print(n)\n        return\n    i = n - 2\n    while i > 0:\n        if s[i] != s[i - 1]:\n            if s[i - 1] == 'B':\n                if p - b >= 0:\n                    p -= b\n                else:\n                    break\n            elif p - a >= 0:\n                p -= a\n            else:\n                break\n            i -= 1\n        else:\n            i -= 1\n    print(i + 1)\nif not TEST_CASES:\n    main()\nelse:\n    [main() for _ in range(int(input()))]", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    st = input()\n    n = len(st)\n    n -= st[-1] != st[-2]\n    while n > 0 and p > 0:\n        if st[n - 1] == 'A' and p - a >= 0:\n            p -= a\n            while n > 0 and st[n - 1] == 'A':\n                n -= 1\n        elif p - b >= 0:\n            p -= b\n            while n > 0 and st[n - 1] == 'B':\n                n -= 1\n        else:\n            break\n    print(min(n + 1, len(st)))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    st = input()\n    n = len(st)\n    n -= st[-1] != st[-2]\n    while n > 0 and p > 0:\n        if st[n - 1] == 'A' and p - a >= 0:\n            p -= a\n            while n > 0 and st[n - 1] == 'A':\n                n -= 1\n        elif p - b >= 0:\n            p -= b\n            while n > 0 and st[n - 1] == 'B':\n                n -= 1\n        else:\n            break\n    print(min(n + 1, len(st)))", "for i in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    sum = 0\n    dlina = len(s)\n    while sum <= p and dlina > 0:\n        dlina -= 1\n        if dlina == len(s) - 1 or s[dlina - 1] != s[dlina]:\n            if s[dlina - 1] == 'A':\n                sum += a\n            else:\n                sum += b\n    print(dlina + 1)", "def check(s, a, b, mid, p):\n    dc = {'A': a, 'B': b}\n    cr = dc[s[mid]]\n    cur = s[mid]\n    for i in range(mid + 1, len(s) - 1):\n        if s[i] != cur:\n            cur = s[i]\n            cr += dc[cur]\n    if cr <= p:\n        return True\n    else:\n        return False\n\ndef f(s, a, b, p):\n    lo = 0\n    hi = len(s) - 1\n    res = len(s)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if check(s, a, b, mid, p):\n            hi = mid - 1\n            res = min(mid + 1, res)\n        else:\n            lo = mid + 1\n    return res\nfor i in range(int(input())):\n    (a, b, p) = map(int, input().strip().split())\n    s = input()\n    print(f(s, a, b, p))", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    v = [0] * len(s)\n    if s[-2] == 'A':\n        v[-2] = a\n    else:\n        v[-2] = b\n    for i in range(2, len(s)):\n        if s[-1 - i] != s[-i]:\n            if s[-i - 1] == 'A':\n                v[-1 - i] = v[-i] + a\n            else:\n                v[-1 - i] = v[-i] + b\n        else:\n            v[-1 - i] = v[-i]\n    for i in range(len(s)):\n        if v[i] <= p:\n            print(i + 1)\n            break", "t = int(input())\nfor tt in range(t):\n    (a, b, p) = map(int, input().split())\n    ar = input()\n    i = 0\n    c = 1\n    d = [[ar[0], i]]\n    for r in range(1, len(ar)):\n        if ar[r - 1] != ar[r]:\n            d.append([ar[r], r])\n    if len(d) > 1 and d[-1][1] == len(ar) - 1:\n        d.pop()\n    for k in d:\n        if k[0] == 'A':\n            k.append(a)\n        else:\n            k.append(b)\n    n = len(d) - 1\n    while n >= 0:\n        if d[n][-1] <= p:\n            p -= d[n][-1]\n            n -= 1\n        else:\n            break\n    if n == -1:\n        print(1)\n    elif n == len(d) - 1:\n        print(len(ar))\n    else:\n        print(d[n + 1][1] + 1)", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    i = len(s) - 2\n    j = s[-2] > 'A'\n    while -i < 1 > a[j] - p:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 2)", "for _ in ' ' * int(input()):\n    (a, b, c) = map(int, input().split())\n    d = input()\n    e = 'p'\n    for i in range(len(d) - 2, -2, -1):\n        if e != d[i]:\n            c -= a if d[i] == 'A' else b\n            e = d[i]\n            if c < 0:\n                break\n    print(i + 2)", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    i = len(s) - 2\n    j = s[i] > 'A'\n    while -i < 1 > a[j] - p:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 2)", "for _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    i = len(s) - 1\n    while i > -1:\n        if s[i - 1] == 'A' and k >= a:\n            k -= a\n            i -= 1\n            while i > 0 and s[i - 1] == s[i]:\n                i -= 1\n        elif s[i - 1] == 'B' and k >= b:\n            k -= b\n            i -= 1\n            while i > 0 and s[i - 1] == s[i]:\n                i -= 1\n        else:\n            ans = i\n            break\n    print(ans + 1)", "for i in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    ro = str(input())\n    road = list(ro)\n    l = len(road)\n    node = []\n    bol = road[-1] == 'A'\n    if bol:\n        cou = 0\n        node.append([l - 1, 1])\n    else:\n        cou = 1\n        node.append([l - 1, 0])\n    for j in range(l - 1, 0, -1):\n        if road[j - 1] == road[j]:\n            pass\n        else:\n            node.append([j, cou])\n            cou = abs(cou - 1)\n    if road[0] != road[1]:\n        node.append([0, abs(node[0][1] - 1)])\n    if len(node) >= 2 and node[0] == node[1]:\n        node.pop(0)\n    if len(node) >= 2 and node[0][0] == node[1][0]:\n        node.pop(0)\n    summ = 0\n    boll = True\n    for x in range(len(node)):\n        summ += [b, a][node[x][1]]\n        if summ > p:\n            t = x\n            boll = False\n            break\n    if boll:\n        print(1)\n    else:\n        print(node[t][0] + 1)", "n = int(input())\nfor i in range(0, n):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    j = len(s) - 2\n    expense = 0\n    e = 0\n    while expense <= p or j >= 0:\n        if s[j] == 'A':\n            expense += a\n            if expense > p:\n                j = j + 2\n                break\n            while s[j] == 'A':\n                j = j - 1\n                if j < 0:\n                    e = 1\n                    break\n            if e == 1:\n                j = j + 2\n                break\n        else:\n            expense += b\n            if expense > p:\n                j = j + 2\n                break\n            while s[j] == 'B':\n                j = j - 1\n                if j < 0:\n                    e = 1\n                    break\n            if e == 1:\n                j = j + 2\n                break\n    if j > len(s):\n        print(len(s))\n    else:\n        print(j)", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    i = len(s) - 2\n    j = s[i] > 'A'\n    while -i < 1 > a[j] - p:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 2)", "def main(a, b, c, mot):\n    n = len(mot)\n    i = n - 2\n    if mot[i] == 'A':\n        test = True\n        if c < a:\n            return i + 1\n        c -= a\n    else:\n        test = False\n        if c < b:\n            return i + 1\n        c -= b\n    while i > 0:\n        cur = mot[i - 1]\n        if test and cur != 'A':\n            test = False\n            if c < b:\n                return i\n            c -= b\n        if not test and cur != 'B':\n            test = True\n            if c < a:\n                return i\n            c -= a\n        i -= 1\n    return i\nn = int(input())\nfor _ in range(n):\n    lst = list(map(int, input().split()))\n    (a, b, c) = (lst[0], lst[1], lst[2])\n    mot = input()\n    print(main(a, b, c, mot) + 1)", "def res(a, b, m, s):\n    x = len(s)\n    if s[x - 1] != s[x - 2]:\n        sum = 0\n    elif s[x - 1] == 'A':\n        sum = a\n    else:\n        sum = b\n    if sum > m:\n        return x\n    elif sum == m:\n        for v in range(x - 1, 0, -1):\n            if s[v] != s[v - 1]:\n                return v + 1\n        return 1\n    for i in range(x - 1, 0, -1):\n        g = s[i - 1]\n        if s[i] != g:\n            if g == 'B':\n                sum += b\n                if sum > m:\n                    return i + 1\n                elif sum == m:\n                    for v in range(i - 1, 0, -1):\n                        if s[v] != s[v - 1]:\n                            return v + 1\n                    return 1\n            else:\n                sum += a\n                if sum > m:\n                    return i + 1\n                elif sum == m:\n                    for v in range(i - 1, 0, -1):\n                        if s[v] != s[v - 1]:\n                            return v + 1\n                    return 1\n    return 1\nt = int(input())\nfor i in range(t):\n    (a, b, m) = [int(x) for x in input().split()]\n    s = input()\n    print(res(a, b, m, s))", "for _ in range(int(input())):\n    (*a, c) = map(int, input().split())\n    str = input()\n    i = len(str) - 2\n    j = str[-2] == 'B'\n    while i >= 0 and c - a[j] >= 0:\n        c -= a[j]\n        j ^= 1\n        i = str.rfind('AB'[j], 0, i)\n    print(i + 2)", "for _ in range(int(input())):\n    (a, b, p) = [int(i) for i in input().split()]\n    s = input()\n    n = len(s)\n    c = a if s[n - 2] == 'A' else b\n    if c > p:\n        print(n)\n    else:\n        i = n - 3\n        while i > -1:\n            if s[i] != s[i + 1]:\n                if s[i] == 'A':\n                    c += a\n                else:\n                    c += b\n                if c > p:\n                    print(i + 2)\n                    break\n            i -= 1\n        else:\n            print(1)", "t = int(input())\nfor j in range(t):\n    (a, b, p) = [int(i) for i in input().split()]\n    s = input()\n    l = len(s) - 2\n    r = 'R'\n    x = True\n    while l >= 0:\n        if r != s[l]:\n            if s[l] == 'A':\n                p = p - a\n            elif s[l] == 'B':\n                p = p - b\n            r = s[l]\n        if p < 0:\n            print(l + 2)\n            x = False\n            break\n        l = l - 1\n    if x == True:\n        print(1)", "def index_to_start(a, b, p, string):\n    if p < a and p < b:\n        return len(string)\n    p_check = 0\n    index = len(string) - 1\n    for i in range(len(string) - 2, 0, -1):\n        if string[i] != string[i - 1]:\n            if string[i] == 'A':\n                p_check += a\n            else:\n                p_check += b\n            if p_check > p:\n                return index + 1\n            index = i\n    if string[0] == 'A':\n        p_check += a\n    else:\n        p_check += b\n    if p_check > p:\n        return index + 1\n    else:\n        return 1\nnum_tests = int(input())\nfor _ in range(num_tests):\n    (a, b, p) = (int(x) for x in input().split())\n    string = input()\n    print(index_to_start(a, b, p, string))", "for i in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    n = len(s)\n    ind = n\n    sum = 0\n    while sum <= p and ind > 0:\n        ind -= 1\n        if ind == n - 1 or s[ind - 1] != s[ind]:\n            if s[ind - 1] == 'A':\n                sum += a\n            else:\n                sum += b\n    print(ind + 1)", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    n = len(s)\n    i = n - 2\n    x = 0\n    q = {'A': a, 'B': b}\n    while i >= 0:\n        f = 0\n        if x + q[s[i]] <= p:\n            x += q[s[i]]\n            f = 1\n        if f == 0:\n            break\n        j = i\n        while j >= 0 and s[j] == s[i]:\n            j -= 1\n        i = j\n    print(i + 2)", "def home(l, a, b, p):\n    c = ''\n    d = 0\n    x = 0\n    for i in range(len(l) - 2, -1, -1):\n        if c != l[i]:\n            c = l[i]\n            if c == 'A':\n                p = p - a\n                d = i\n            else:\n                p = p - b\n                d = i\n            if p < 0:\n                x = 1\n                break\n    if x == 0:\n        print(1)\n    else:\n        print(d + 2)\n    return\nn = int(input())\nfor i in range(n):\n    t = input()\n    l = list(map(int, t.split(' ')))\n    s = input()\n    l1 = list(s)\n    home(l1, l[0], l[1], l[2])", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = ' ' + input()\n    (journey_cost, prev_change) = (0, None)\n    for i in range(len(s) - 1, 0, -1):\n        if s[i - 1] != s[i] and i != len(s) - 1:\n            journey_cost += a if s[i] == 'A' else b\n            if journey_cost > p:\n                print(prev_change if prev_change is not None else len(s) - 1)\n                break\n            prev_change = i\n    else:\n        print(prev_change)", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()[::-1]\n    where_to_go = len(s)\n    paid = 0\n    for (ind, sym) in enumerate(s):\n        if ind != 0:\n            if s[ind - 1] == sym:\n                if paid == 0:\n                    p -= a if sym == 'A' else b\n                    if p < 0:\n                        break\n                    else:\n                        where_to_go -= 1\n                        paid = 1\n                else:\n                    where_to_go -= 1\n            else:\n                p -= a if sym == 'A' else b\n                if p < 0:\n                    break\n                else:\n                    where_to_go -= 1\n                    paid = 1\n        else:\n            continue\n    print(where_to_go)", "for t in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = list(input())\n    n = len(s)\n    if p < a and p < b:\n        print(n)\n        continue\n    dp = [0] * n\n    st = []\n    exc = 0\n    loc = []\n    for i in range(n):\n        if i == 0:\n            if s[i] == 'A':\n                dp[0] = a\n            else:\n                dp[0] = b\n            st.append(s[i])\n        elif st[-1] == s[i]:\n            dp[i] = dp[i - 1] + exc\n            exc = 0\n        else:\n            loc.append(i)\n            st.pop(0)\n            st.append(s[i])\n            dp[i] = dp[i - 1] + exc\n            if st[0] == 'A':\n                exc = a\n            else:\n                exc = b\n    if dp[-1] <= p:\n        print(1)\n        continue\n    for j in loc:\n        if dp[-1] - dp[j] <= p:\n            print(j + 1)\n            break\n    else:\n        print(n)", "for _ in range(int(input())):\n    (a, b, p) = list(map(int, input().split()))\n    st = input()\n    pos = []\n    amount = []\n    prev = None\n    for i in range(len(st)):\n        if st[i] != prev:\n            pos.append(i)\n            prev = st[i]\n    if pos[-1] == len(st) - 1:\n        pos.pop()\n    prev_am = 0\n    for k in range(-1, -len(pos) - 1, -1):\n        if st[pos[k]] == 'B':\n            amount.append(prev_am + b)\n            prev_am += b\n        else:\n            amount.append(prev_am + a)\n            prev_am += a\n    amount.reverse()\n    for j in range(len(amount)):\n        if amount[j] <= p:\n            print(pos[j] + 1)\n            break\n    else:\n        print(len(st))", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (a, b, p) = ipl()\n    s = ip()\n    n = len(s)\n    i = n - 2\n    while i >= 0:\n        if s[i] == 'A':\n            p -= a\n        elif s[i] == 'B':\n            p -= b\n        if p < 0:\n            print(i + 2)\n            return\n        while i > 0 and s[i] == s[i - 1]:\n            i -= 1\n        i -= 1\n    print(1)\n    return\nfor _ in range(ipn()):\n    solve()", "def Homecoming(a, b, p, s):\n    n = len(s)\n    s = list(s)\n    change = []\n    for x in range(1, n):\n        if x != n - 1 and s[x] != s[x - 1]:\n            change.append(x)\n        elif x == n - 1:\n            change.append(x)\n    start = s[0]\n    cost = []\n    if start == 'A':\n        for x in range(len(change)):\n            if x % 2 == 0:\n                cost.append(a)\n            else:\n                cost.append(b)\n    else:\n        for x in range(len(change)):\n            if x % 2 == 0:\n                cost.append(b)\n            else:\n                cost.append(a)\n    total_cost = sum(cost)\n    f = 0\n    for x in range(len(cost)):\n        if total_cost <= p:\n            f = 1\n            break\n        else:\n            total_cost -= cost[x]\n    if f == 0:\n        x += 1\n    if x == 0:\n        return 1\n    count = 0\n    r = x\n    for x in range(1, n):\n        if x != n - 1 and s[x] != s[x - 1]:\n            count += 1\n        elif x == n - 1:\n            count += 1\n        if count == r:\n            return x + 1\nt = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    print(Homecoming(a, b, p, s))", "for t in range(int(input())):\n    (a, b, p) = [int(i) for i in input().split()]\n    s = input()[::-1]\n    n = len(s)\n    curr = s[1]\n    res = 0\n    for i in range(1, n):\n        if s[i] != curr:\n            if curr == 'A':\n                p -= a\n                curr = 'B'\n            else:\n                p -= b\n                curr = 'A'\n            if p < 0:\n                break\n            else:\n                res = i - 1\n    if curr == 'A':\n        p -= a\n    else:\n        p -= b\n    if p < 0:\n        print(n - res)\n    else:\n        print(1)", "def main():\n    dct = dict()\n    (a, b, p) = map(int, input().split())\n    dct['A'] = a\n    dct['B'] = b\n    lst = input()\n    last = lst[len(lst) - 2]\n    have_to_pay = 0\n    pre_last = len(lst)\n    pos = 1\n    for i in range(len(lst) - 2, -1, -1):\n        if lst[i] != last:\n            if have_to_pay + dct[last] > p:\n                pos = i + 1\n                break\n            else:\n                have_to_pay += dct[last]\n                last = lst[i]\n                pre_last = i + 2\n    if have_to_pay + dct[last] > p:\n        print(pre_last)\n    else:\n        print(pos)\nt = int(input())\nfor i in range(t):\n    main()", "for t in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    r = len(s)\n    if s[r - 2] == 'A':\n        c = a\n    else:\n        c = b\n    if c > p:\n        print(r)\n    else:\n        i = r - 3\n        while i > -1:\n            if s[i] != s[i + 1]:\n                if s[i] == 'A':\n                    c += a\n                else:\n                    c += b\n                if c > p:\n                    print(i + 2)\n                    break\n            i -= 1\n        else:\n            print('1')", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    s = 'AB'[s[0] < 'B'] + s\n    i = len(s) - 2\n    j = s[-2] > 'A'\n    while i and p >= a[j]:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 1)", "def indexOfTheSameLetter(j, path, letter):\n    count = 0\n    i = j\n    while path[i] == letter and i >= 0:\n        count += 1\n        i -= 1\n        if i < 0:\n            break\n    return count\ntestCases = int(input())\nfor t in range(testCases):\n    (a, b, p) = map(int, input().rstrip().split())\n    path = list(input())\n    index = len(path) - 1\n    while index > 0:\n        if path[index - 1] == 'A':\n            c = indexOfTheSameLetter(index - 1, path, 'A')\n            p -= a\n            if p < 0:\n                break\n            else:\n                index -= c\n        elif path[index - 1] == 'B':\n            c = indexOfTheSameLetter(index - 1, path, 'B')\n            p -= b\n            if p < 0:\n                break\n            else:\n                index -= c\n    print(index + 1)", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    cost = {'A': a, 'B': b}\n    sequence = input()\n    n = len(sequence)\n    i = n - 2\n    while i >= 0:\n        p -= cost[sequence[i]]\n        if p < 0:\n            break\n        i -= 1\n        while i >= 0 and sequence[i] == sequence[i + 1]:\n            i -= 1\n    print(i + 2)", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "def crossroad(a, b, p, string):\n    current_price = 0\n    ans = len(string)\n    for i in range(len(string) - 1, 0, -1):\n        if i == 1 or string[i - 1] != string[i - 2]:\n            if string[i - 1] == 'A':\n                current_price += a\n            else:\n                current_price += b\n            if current_price > p:\n                return ans\n            else:\n                ans = i\n    return 1\nt = int(input())\nfor j in range(t):\n    (a_t, b_t, p_t) = map(int, input().split())\n    string_t = input()\n    print(crossroad(a_t, b_t, p_t, string_t))", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()[::-1]\n    where_to_go = len(s)\n    paid = 0\n    for (ind, sym) in enumerate(s):\n        if ind != 0:\n            if s[ind - 1] == sym:\n                if paid == 0:\n                    p -= a if sym == 'A' else b\n                    if p < 0:\n                        break\n                    else:\n                        where_to_go -= 1\n                        paid = 1\n                else:\n                    where_to_go -= 1\n            else:\n                p -= a if sym == 'A' else b\n                if p < 0:\n                    break\n                else:\n                    where_to_go -= 1\n                    paid = 1\n        else:\n            continue\n    print(where_to_go)", "n = int(input())\nfor i in range(n):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    tamS = len(s)\n    ans = tamS - 1\n    acu = 0\n    for i in range(tamS - 2, -1, -1):\n        if i == tamS - 2 or s[i] != s[i + 1]:\n            acu += a if s[i] == 'A' else b\n        if acu <= p:\n            ans = i\n        else:\n            break\n    print(ans + 1)", "t = int(input())\nfor tt in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "t = int(input())\nwhile t > 0:\n    (a, b, p) = map(int, input().split())\n    s = input()\n    sum = 0\n    i = len(s) - 2\n    flagA = 0\n    flagB = 0\n    while i >= 0 and sum <= p:\n        if s[i] == 'A' and flagA == 0:\n            flagA = 1\n            flagB = 0\n            if sum + a <= p:\n                sum += a\n            else:\n                break\n        elif s[i] == 'A' and flagA == 1:\n            i -= 1\n            continue\n        elif s[i] == 'B' and flagB == 0:\n            flagB = 1\n            flagA = 0\n            if sum + b <= p:\n                sum += b\n            else:\n                break\n        elif s[i] == 'B' and flagB == 1:\n            i -= 1\n            continue\n        i -= 1\n    print(i + 2)\n    t -= 1", "for _ in ' ' * int(input()):\n    (a, b, p) = map(int, input().split())\n    s = list(input())\n    n = len(s)\n    if s[-1] == s[-2]:\n        if s[-1] == 'A':\n            s[-1] = 'B'\n        else:\n            s[-1] = 'A'\n    lst = []\n    ind = [1]\n    iind = 1\n    val = a if s[0] == 'A' else b\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            lst.append(val)\n            if val == a:\n                val = b\n            else:\n                val = a\n            ind.append(i + 2)\n    ind.pop()\n    sm = sum(lst)\n    ln = len(lst)\n    f = 0\n    for i in range(ln):\n        if sm <= p:\n            f = 1\n            print(ind[i])\n            break\n        sm -= lst[i]\n    if f == 0:\n        print(n)", "t = int(input())\nfor i in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cur = 'C'\n    fin = False\n    for k in range(len(s) - 2, -1, -1):\n        if fin == True:\n            break\n        if s[k] == cur:\n            continue\n        elif s[k] == 'A':\n            cur = 'A'\n            if p - a < 0:\n                print(k + 2)\n                fin = True\n            p -= a\n        elif s[k] == 'B':\n            cur = 'B'\n            if p - b < 0:\n                print(k + 2)\n                fin = True\n            p -= b\n    if fin == False:\n        print(1)", "t = int(input())\nfor test in range(t):\n    (a, b, money) = [int(i) for i in input().split()]\n    route = input().strip()\n    lastwas = None\n    for (i, stop) in enumerate(route[-2::-1]):\n        if not lastwas:\n            lastwas = stop\n        elif stop == lastwas:\n            continue\n        lastwas = stop\n        if stop == 'A':\n            money -= a\n        else:\n            money -= b\n        if money < 0:\n            break\n    else:\n        i += 1\n    print(len(route) - i)", "kl = int(input())\nfor l in range(kl):\n    (a, b, p) = [int(i) for i in input().split()]\n    s = str(input())\n    s = s[::-1] + 'C'\n    ab = 'BA'\n    sb = [a, b]\n    pr = 1\n    kos = 1\n    if s[1] == 'A':\n        t = 0\n    else:\n        t = 1\n    k = 1\n    while p >= sb[t]:\n        if k == -1:\n            pr = 0\n            break\n        k = s.find(ab[t], k + 1)\n        kos += k\n        p -= sb[t]\n        t = (t + 1) % 2\n    if pr == 0 or k == -1:\n        print(1)\n    else:\n        print(len(s) - k)", "I = input\nfor _ in [0] * int(I()):\n    (*a, p) = map(int, I().split())\n    s = I()\n    i = len(s) - 2\n    j = s[-2] > 'A'\n    while i > -1 and p >= a[j]:\n        p -= a[j]\n        j ^= 1\n        i = s.rfind('AB'[j], 0, i)\n    print(i + 2)", "t = int(input())\nfor i in range(t):\n    price_budget = list(map(int, input().split(' ')))\n    budget = price_budget[2]\n    price = {'A': price_budget[0], 'B': price_budget[1]}\n    junctions = list(input())\n    flag = False\n    transport = None\n    for j in range(len(junctions) - 1, -1, -1):\n        if flag:\n            if j == 0:\n                print(j + 1)\n                break\n            elif transport == junctions[j - 1]:\n                continue\n            else:\n                (flag, transport) = (False, None)\n        if j != 0 and price.get(junctions[j - 1]) <= budget and (not flag):\n            budget -= price.get(junctions[j - 1])\n            transport = junctions[j - 1]\n            flag = True\n        else:\n            print(j + 1)\n            break", "T = int(input())\nfor ti in range(T):\n    (a, b, p) = map(int, input().split())\n    sttion = input()\n    LEN = len(sttion)\n    station = LEN\n    total = 0\n    prev = ''\n    for j in range(LEN - 1, 0, -1):\n        if prev != sttion[j - 1]:\n            if sttion[j - 1] == 'A':\n                total += a\n            else:\n                total += b\n        if total > p:\n            station = j + 1\n            break\n        prev = sttion[j - 1]\n    if total > p:\n        print(station)\n    else:\n        print(1)", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    d = str(input())\n    n = len(d)\n    i = n - 2\n    sol = n\n    e = 0\n    while i >= 0:\n        t = d[i]\n        while i >= 0 and d[i] == t:\n            i = i - 1\n        if t == 'A':\n            e = e + a\n        else:\n            e = e + b\n        if e <= c:\n            sol = i + 2\n    print(sol)", "for _ in range(int(input())):\n    (b, a, q) = map(int, input().split())\n    s = input()\n    cs = {'A': b, 'B': a}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= q:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "for i in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    string = input()\n    crossroads = len(string)\n    (money, answer) = (0, crossroads)\n    for i in range(crossroads - 1):\n        if crossroads - 2 - i == 0:\n            if string[0] == 'A':\n                money += a\n            else:\n                money += b\n            if money <= p:\n                answer = crossroads - 1 - i\n            print(answer)\n            break\n        if string[crossroads - 2 - i] != string[crossroads - 3 - i]:\n            if string[crossroads - 2 - i] == 'A':\n                money += a\n            else:\n                money += b\n            if money <= p:\n                answer = crossroads - 1 - i\n            else:\n                print(answer)\n                break", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = list(map(int, input().split()))\n    s = input()\n    price = {'A': a, 'B': b}\n    fund = 0\n    indx = len(s) - 2\n    if not (indx >= 0 and fund + price[s[indx]] <= p):\n        print(len(s))\n        continue\n    curr_trans = s[indx]\n    last_indx = indx + 1\n    indx -= 1\n    while indx >= 0 and fund + price[s[indx]] <= p:\n        while indx >= 0 and s[indx] == curr_trans:\n            last_indx = indx + 1\n            indx -= 1\n        fund += price[s[indx + 1]]\n        curr_trans = s[indx]\n    print(last_indx)", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    v = []\n    k = []\n    x = s[0]\n    n = 1\n    for c in s[1:-1]:\n        if c == x:\n            n += 1\n        else:\n            v.append({'A': a, 'B': b}[x])\n            x = c\n            k.append(n)\n            n = 1\n    v.append({'A': a, 'B': b}[x])\n    k.append(n)\n    v.reverse()\n    k.reverse()\n    i = 0\n    z = 0\n    while i < len(k):\n        z += v[i]\n        if z > p:\n            break\n        i += 1\n    print(sum(k[i:]) + 1)", "def main():\n    t = int(input())\n    for _ in range(t):\n        (a, b, p) = map(int, input().split())\n        s = input()\n        toReach = len(s)\n        n = len(s)\n        cost = 0\n        i = n - 2\n        while i >= 0:\n            t = s[i]\n            while i >= 0 and s[i] == t:\n                i -= 1\n            if t == 'A':\n                cost += a\n            else:\n                cost += b\n            if cost <= p:\n                toReach = i + 2\n        print(toReach)\nmain()", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    d = {'A': a, 'B': b}\n    i = len(s) - 1\n    prev = len(s) - 1\n    while i >= 0:\n        i -= 1\n        curr = s[i]\n        while s[i] == curr and i >= 0:\n            i -= 1\n        i += 1\n        p -= d[curr]\n        if p < 0:\n            break\n        prev = i\n    print(prev + 1)", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    cs = {'A': a, 'B': b}\n    c = 0\n    i = len(s) - 1\n    while i > 0 and c + cs[s[i - 1]] <= p:\n        c += cs[s[i - 1]]\n        i -= 1\n        while i > 0 and s[i - 1] == s[i]:\n            i -= 1\n    print(i + 1)", "for _ in range(int(input())):\n    (a, b, p) = map(int, input().split())\n    lst = list(input())\n    l = len(lst) - 2\n    if lst[l] == 'A':\n        if a > p:\n            print(l + 2)\n            continue\n    elif b > p:\n        print(l + 2)\n        continue\n    temp = lst[l]\n    if temp == 'A':\n        p -= a\n    else:\n        p -= b\n    l -= 1\n    while l >= 0:\n        if lst[l] != temp:\n            temp = lst[l]\n            if temp == 'A':\n                if a > p:\n                    break\n                else:\n                    p -= a\n            elif b > p:\n                break\n            else:\n                p -= b\n        l -= 1\n    print(l + 2)", "t = int(input())\nfor k in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    r = {'A': a, 'B': b}\n    i = len(s) - 1\n    prev = len(s) - 1\n    while i >= 0:\n        i -= 1\n        curr = s[i]\n        while s[i] == curr and i >= 0:\n            i -= 1\n        i += 1\n        p -= r[curr]\n        if p < 0:\n            break\n        prev = i\n    print(prev + 1)", "t = int(input())\nfor i in range(t):\n    ans = False\n    (a, b, p) = map(int, input().split())\n    s = input()\n    dp = [0] * (len(s) + 1)\n    s = s[:-1] + 'C'\n    for j in range(len(s) - 2, -1, -1):\n        if s[j + 1] == s[j]:\n            dp[j] = dp[j + 1]\n        elif s[j] == 'A':\n            dp[j] = dp[j + 1] + a\n        else:\n            dp[j] = dp[j + 1] + b\n        if dp[j] > p:\n            ans = True\n            print(j + 2)\n            break\n    if not ans:\n        print(1)", "for _ in range(int(input())):\n    (a, b, p) = list(map(int, input().split()))\n    ar = list(input())\n    i = len(ar) - 2\n    now = ar[i]\n    flag = 0\n    if now == 'A':\n        if p >= a:\n            flag = 1\n    elif p >= b:\n        flag = 1\n    while i >= 0 and p > 0 and (flag == 1):\n        if ar[i] == now:\n            i -= 1\n        else:\n            if ar[i + 1] == 'A':\n                p -= a\n            else:\n                p -= b\n            if ar[i] == 'A':\n                if p < a:\n                    break\n                now = 'A'\n            else:\n                if p < b:\n                    break\n                now = 'B'\n    print(i + 2)", "T = int(input())\nfor _ in range(T):\n    (a1, b, c) = map(int, input().split())\n    s = input()\n    s = 'C' + s\n    a = s[len(s) - 2]\n    tc = 0\n    rv = len(s) - 1\n    flag = 0\n    for w in range(len(s) - 3, -1, -1):\n        i = s[w]\n        if i != a:\n            if a == 'B':\n                tc = tc + b\n                if tc > c:\n                    flag = 1\n                    print(rv)\n                    break\n            else:\n                tc = tc + a1\n                if tc > c:\n                    flag = 1\n                    print(rv)\n                    break\n            rv = w + 1\n        a = i\n    if flag != 1:\n        print(1)", "t = int(input())\nfor i in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    if len(s) == 1:\n        print(1)\n        continue\n    store = ''\n    cost = 0\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] == 'B' and store == '' or (s[i] == 'B' and store == 'A'):\n            cost += b\n            if cost > p:\n                print(i + 2)\n                break\n            store = 'B'\n            continue\n        if s[i] == 'A' and store == '' or (s[i] == 'A' and store == 'B'):\n            cost += a\n            if cost > p:\n                print(i + 2)\n                break\n            store = 'A'\n    else:\n        print(1)", "n = int(input())\nfor i in range(n):\n    (a, b, p) = map(int, input().split())\n    s = input()[::-1]\n    cost = 0\n    p1 = s[0]\n    if s[0] == s[1]:\n        if s[0] == 'A':\n            cost += a\n        else:\n            cost += b\n    for j in range(1, len(s), 1):\n        if p1 != s[j]:\n            p1 = s[j]\n            if p1 == 'A':\n                cost += a\n            else:\n                cost += b\n        if cost > p:\n            if j != 0:\n                print(len(s) - (j - 1))\n            else:\n                print(len(s))\n            break\n    else:\n        print(1)", "for _ in range(int(input())):\n    (bus, tram, m) = [int(h) for h in input().strip().split(' ')]\n    s = input()\n    tmp = s\n    s = s[:-1] + 'D'\n    s = s[::-1]\n    dictt = {'A': bus, 'B': tram}\n    num = 1\n    flag = True\n    cpoint = len(s)\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            m = m - dictt[s[i]]\n            cpoint = len(s) - i\n            if m < 0:\n                print(len(s) - (i - 1))\n                flag = False\n                break\n    if flag:\n        if cpoint != 1 and tmp[0] == tmp[cpoint - 1]:\n            print(1)\n        else:\n            print(cpoint)", "n = int(input())\nfor a in range(n):\n    [a, b, money] = list(map(int, input().split()))\n    path = input()\n    if len(path) <= 1:\n        print(1)\n        continue\n    i = len(path) - 2\n    last = path[i]\n    while i >= 0:\n        if path[i] != last:\n            if path[i] == 'A':\n                money -= b\n            else:\n                money -= a\n            last = path[i]\n        if last == 'A':\n            cost = a\n        else:\n            cost = b\n        if cost > money:\n            break\n        i -= 1\n    print(i + 2)", "t = int(input())\nwhile t:\n    t -= 1\n    (a, b, p) = map(int, input().split())\n    d = {'A': a, 'B': b}\n    s = input()\n    n = len(s)\n    ans = n - 2\n    prev = s[-2]\n    while ans >= 0:\n        val = s[ans]\n        if d[val] <= p:\n            p -= d[val]\n            while ans >= 0 and s[ans] == val:\n                ans -= 1\n        else:\n            break\n    print(ans + 2)", "t = int(input())\nwhile t > 0:\n    (a, b, p) = map(int, input().split())\n    bus = input()\n    l = len(bus)\n    cost = 0\n    flag = 0\n    if l == 2:\n        if bus[0] == 'A':\n            if p >= a:\n                print('1')\n            else:\n                print('2')\n        elif p >= b:\n            print('1')\n        else:\n            print('2')\n    else:\n        if bus[l - 2] == 'B':\n            cost += b\n        else:\n            cost += a\n        if p < cost:\n            print(l)\n        else:\n            for j in range(l - 3, -1, -1):\n                if bus[j] == bus[j + 1]:\n                    continue\n                elif bus[j] == 'B':\n                    cost += b\n                else:\n                    cost += a\n                if cost > p:\n                    flag = 1\n                    break\n            if flag == 0 and j == 0:\n                print('1')\n            else:\n                ans = j + 2\n                print(ans)\n    t -= 1", "Q = int(input())\nfor _ in range(Q):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    n = len(s)\n    i = n - 2\n    cnt_money = 0\n    ans = n\n    while i >= 0:\n        t = s[i]\n        while i >= 0 and s[i] == t:\n            i -= 1\n        if t == 'A':\n            cnt_money += a\n        else:\n            cnt_money += b\n        if cnt_money <= p:\n            ans = i + 2\n    print(ans)", "def solve(a, b, x, s):\n    s = 'x' + s\n    last_station = len(s) - 1\n    for i in reversed(range(len(s))):\n        if s[i] != s[i - 1] and i != len(s) - 1:\n            if s[i] == 'B':\n                x -= b\n            elif s[i] == 'A':\n                x -= a\n            if x >= 0:\n                last_station = i\n        if x <= 0:\n            return last_station\n    return 1\nn = int(input())\nfor _ in range(n):\n    (a, b, x) = list(map(int, input().split()))\n    s = input()\n    print(solve(a, b, x, s))", "for _ in ' ' * int(input()):\n    (a, b, c) = map(int, input().split())\n    o = input()\n    z = o.replace('AB', 'A B').replace('BA', 'B A').split()\n    s = 0\n    k = len(z)\n    if 'A' in z[0]:\n        s = a * ((k + 1) // 2) + b * (k // 2)\n    else:\n        s = b * ((k + 1) // 2) + a * (k // 2)\n    i = 0\n    p = 0\n    if len(z[-1]) == 1:\n        s -= [a, b]['B' == z[-1]]\n        z.pop()\n    for i in range(len(z)):\n        if s <= c:\n            break\n        else:\n            p += len(z[i])\n            s -= [a, b]['B' == z[i][0]]\n    print(min(1 + p, len(o)))", "for _ in range(int(input())):\n    (a, b, p) = [int(x) for x in input().strip().split(' ')]\n    S = input()\n    res = len(S)\n    i = len(S) - 2\n    while i >= 0:\n        t = S[i]\n        if t == 'A':\n            p -= a\n        elif t == 'B':\n            p -= b\n        if p < 0:\n            break\n        while i >= 0 and S[i] == t:\n            i -= 1\n        res = i + 2\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (a, b, p) = map(int, input().split())\n    s = input()\n    ans = []\n    ind = []\n    lst = ' '\n    for i in range(len(s) - 1):\n        if s[i] == lst:\n            continue\n        lst = s[i]\n        if s[i] == 'A':\n            cost = a\n        else:\n            cost = b\n        ans.append(cost)\n        ind.append(i)\n    sum = 0\n    res = len(s) - 1\n    j = len(ans) - 1\n    while j >= 0 and sum + ans[j] <= p:\n        sum += ans[j]\n        res = ind[j]\n        j = j - 1\n    print(res + 1)"]