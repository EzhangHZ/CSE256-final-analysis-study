["inf = 10 ** 16\n(n, k) = map(int, input().split())\naa = list(map(int, input().split()))\n\ndef ok(q):\n    cs = [0]\n    mn = inf\n    for a in aa:\n        cs.append(cs[-1] - 1 if a < q else cs[-1] + 1)\n    for i in range(k, n + 1):\n        mn = min(mn, cs[i - k])\n        if cs[i] - mn > 0:\n            return True\n    return False\n(ct, r) = (0, n + 1)\nwhile ct + 1 < r:\n    m = (ct + r) // 2\n    if ok(m):\n        ct = m\n    else:\n        r = m\nprint(ct)", "import math\ninf = math.inf\n(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\n\ndef solve(m):\n    cs = [0]\n    mn = inf\n    for a in arr:\n        if a < m:\n            cs.append(cs[-1] - 1)\n        else:\n            cs.append(cs[-1] + 1)\n    for r in range(k, n + 1):\n        mn = min(mn, cs[r - k])\n        if cs[r] - mn > 0:\n            return True\n    return False\nlow = 0\nhi = n + 1\nwhile low + 1 < hi:\n    middle = (low + hi) // 2\n    if solve(middle):\n        low = middle\n    else:\n        hi = middle\nprint(low)", "inf = 10 ** 16\n(n, k) = map(int, input().split())\naa = list(map(int, input().split()))\n\ndef ok(m):\n    cs = [0]\n    for a in aa:\n        if a < m:\n            cs.append(cs[-1] - 1)\n        else:\n            cs.append(cs[-1] + 1)\n    mn = inf\n    for r in range(k, n + 1):\n        mn = min(mn, cs[r - k])\n        if cs[r] - mn > 0:\n            return True\n    return False\n(l, r) = (0, n + 1)\nwhile l + 1 < r:\n    m = (l + r) // 2\n    if ok(m):\n        l = m\n    else:\n        r = m\nprint(l)", "inf = 10 ** 16\n(n, k) = map(int, input().split())\naa = list(map(int, input().split()))\n\ndef ok(m):\n    cs = [0]\n    mn = inf\n    for a in aa:\n        cs.append(cs[-1] - 1 if a < m else cs[-1] + 1)\n    for r in range(k, n + 1):\n        mn = min(mn, cs[r - k])\n        if cs[r] - mn > 0:\n            return True\n    return False\n(l, r) = (0, n + 1)\nwhile l + 1 < r:\n    m = (l + r) // 2\n    if ok(m):\n        l = m\n    else:\n        r = m\nprint(l)", "a = []\n(n, k) = (0, 0)\n\ndef check(median):\n    mini = 2 * 10 ** 5 + 1\n    part_sums = [0]\n    for val in a[:k]:\n        part_sums.append(part_sums[-1] + (val >= median) - (val < median))\n    for (key, val) in enumerate(a[k:]):\n        mini = min(mini, part_sums[key])\n        if part_sums[-1] - mini > 0:\n            return True\n        part_sums.append(part_sums[-1] + (val >= median) - (val < median))\n    mini = min(mini, part_sums[n - k])\n    if part_sums[-1] - mini > 0:\n        return True\n    return False\n\ndef search(l, r) -> int:\n    if l == r - 1:\n        return l\n    mid = (l + r) // 2\n    if check(mid):\n        return search(mid, r)\n    return search(l, mid)\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(search(1, 2 * 10 ** 5 + 1))", "(n, k) = map(int, input().split())\naa = list(map(int, input().split()))\n\ndef ok(m):\n    cs = [0]\n    mn = float('inf')\n    for a in aa:\n        cs.append(cs[-1] - 1 if a < m else cs[-1] + 1)\n    for r in range(k, n + 1):\n        mn = min(mn, cs[r - k])\n        if cs[r] - mn > 0:\n            return True\n    return False\n(l, r) = (0, n + 1)\nwhile l + 1 < r:\n    m = (l + r) // 2\n    if ok(m):\n        l = m\n    else:\n        r = m\nprint(l)"]