["from collections import Counter\nn = int(input())\nways = Counter()\nways[0] = 1\nways[1] = 2\nfor i in range(2, n // 2 + 2):\n    ways[i] = ways[i - 2] + 2\nif n % 2 == 0:\n    print(ways[n // 2] * ways[n // 2])\nelse:\n    print(ways[n // 2 + 1] * ways[n // 2] * 2)", "import math\n\ndef main_function():\n    n = int(input())\n    if n % 2 == 0:\n        n += 1\n        z = n // 2\n        s = 3\n        counter = 1\n        for i in range(z):\n            counter += s\n            s += 2\n    else:\n        s = 8\n        z = n // 2\n        counter = 4\n        for i in range(z):\n            counter += s\n            s += 4\n    print(counter)\nmain_function()", "n = int(input())\nif n == 1:\n    print(4)\nelif n % 2 == 0:\n    even_sq = (n // 2 + 1) * (n // 2 + 1)\n    print(even_sq)\nelse:\n    odd_sq = (n // 2 + 1) * (n // 2 + 2) * 2\n    print(odd_sq)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        cnt1 = 0\n        for i in range(-n // 2, n // 2 + 1, 2):\n            cnt1 += 1\n        return cnt1 ** 2\n    else:\n        cnt1 = 0\n        for i in range(-(n // 2 + 1), n // 2 + 2, 2):\n            cnt1 += 1\n        cnt2 = 0\n        for i in range(-n // 2, n // 2 + 1, 2):\n            cnt2 += 1\n        return cnt1 * cnt2 * 2\nprint(solve())", "n = int(input())\nif n % 2 == 0:\n    dot = 1\n    line = 1\n    for i in range(2, n + 1, 2):\n        dot += 1\n        line += 1\n    print(dot * line)\nelse:\n    dot = 1\n    line = 0\n    for i in range(1, n + 1, 2):\n        dot += 1\n        line += 1\n    print(dot * line * 2)", "n = int(input())\nx = (n + 3) // 2\ny = (n + 2) // 2\ntotal = x * y * (1 if x == y else 2)\nprint(total)", "def move(n):\n    if n % 2 == 1:\n        return (n + 2) * (n + 2) // 2\n    else:\n        return (n // 2 + 1) ** 2\nn = int(input())\nprint(move(n))", "n = int(input())\nif n % 2 == 0:\n    k = n // 2 + 1\n    print(k ** 2)\nelse:\n    k = n // 2 + 1\n    ans = k * (k + 1) // 2\n    ans = ans * 4\n    print(ans)", "n = int(input())\n(x, y) = [1, 1]\nfor i in range(n):\n    x += 1 if i % 2 == 0 else 0\n    y += 1 if i % 2 == 1 else 0\nprint(x * y) if n % 2 == 0 else print(2 * x * y)", "n = int(input())\nif n % 2 == 0:\n    k = n / 2\n    print(int((k + 1) ** 2))\nelse:\n    k = (n - 1) / 2\n    print(int(2 * ((k + 1) * (k + 2))))", "n = int(input())\nmid = n // 2\nif n % 2 == 0:\n    print((mid + 1) * (mid + 1))\nelse:\n    print(2 * (mid + 1) * (mid + 2))", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        pow = n // 2 + 1\n        print(pow ** 2)\n    else:\n        pow = (n + 1) // 2\n        print(pow * (pow + 1) * 2)\nq = 1\nfor i in range(q):\n    solve()", "import sys\ninput = sys.stdin.readline\nn = int(input())\nprint((n + 2) ** 2 // 2 if n % 2 else (n // 2 + 1) ** 2)", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    num = (n + 1) // 2\n    print(2 * (1 + num) * num)", "def test(n: int):\n    if n % 2 == 1:\n        x = int((n + 1) / 2)\n        return 2 * x * (x + 1)\n    else:\n        x = int(n / 2) + 1\n        return x * x\nn = int(input())\nprint(test(n))", "import sys\nn = int(sys.stdin.readline().strip())\ncount = 0\nif n % 2 == 0:\n    count = (n // 2 + 1) ** 2\nelse:\n    count = (n // 2 + 1) * (n // 2 + 2) * 2\nprint(count)", "import math\nn = int(input())\nif n % 2 == 0:\n    ans = list(map(lambda x: x * x, [x for x in range(1, 502)]))\n    print(ans[n // 2])\nelse:\n    ans = list(map(lambda x: 2 * (x * (x + 1)), [x for x in range(1, 501)]))\n    print(ans[math.floor(n / 2)])", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\nMOD = 998244353\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        print((n // 2 + 1) ** 2)\n    else:\n        a = n // 2 + 1\n        print(a * (a + 1) * 2)\nt = 1\nfor i in range(1, t + 1):\n    solve()", "n = int(input())\nif n % 2 != 0:\n    k = int((n - 1) / 2)\n    print(2 * (k + 1) * (k + 2))\nelse:\n    k = int(n / 2)\n    print((k + 1) ** 2)", "n = int(input())\nif n == 0:\n    print('1')\nelif n <= 2:\n    print('4')\nelif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "n = int(input())\nif n == 0:\n    print('1')\nelif n <= 2:\n    print('4')\nelif n % 2 == 0:\n    print((n // 2 + 1) * (n // 2 + 1))\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "n = int(input())\nif n == 1:\n    print(4)\nelif n % 2 == 0:\n    print(int(((n + 2) / 2) ** 2))\nelse:\n    print(int((n + 2) ** 2 / 2 - 0.5))", "n = int(input())\nif n & 1:\n    result = 4\n    factor = 8\n    for i in range(1, int(n / 2) + 1):\n        result = result + factor\n        factor = factor + 4\nelse:\n    result = int((n / 2 + 1) ** 2)\nprint(result)", "a = int(input())\nif a % 2 == 0:\n    v = int(a / 2)\n    print((v + 1) ** 2)\nelse:\n    y = int(a / 2)\n    z = y + 1\n    print((y + 1) * (z + 1) * 2)", "n = int(input())\nk = n // 2\nif n % 2 == 0:\n    print((k + 1) * (k + 1))\nelse:\n    print(2 * (k + 1) * (k + 2))", "a = int(input())\nif a % 2 == 1:\n    print(int((a / 2 + 0.5 + 1) * (a / 2 - 0.5 + 1) * 2))\nelse:\n    print(int((a / 2 + 1) ** 2))", "n = int(input())\nif n % 2 == 0:\n    print(int((n - n / 2 + 1) ** 2))\nelse:\n    print(int((n + 2) * ((n + 2) // 2) + (n + 2) // 2))", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nprint(pow(n // 2 + 1, 2) if n % 2 == 0 else (n + 1) * ((n + 3) // 2))", "n = int(input())\nans = 4\nc = 0\nif n == 1 or n == 2:\n    print(4)\nelif n % 4 == 0:\n    print(4 * (n // 4 + 1) * (n // 4 + 1) - 4 * (n // 4) - 3)\nelif n % 2 != 0:\n    k = n // 2\n    print(2 * (k + 1) * (k + 2))\nelse:\n    print(4 * ((n - 2) // 4 + 1) * ((n - 2) // 4 + 1))", "t = int(input())\no = 0\nk = x = t // 4\nif t % 4 == 0:\n    o = (2 * x + 1) ** 2\nif t % 4 == 1:\n    x += 1\n    o = 8 * x * x - 4 * x\nif t % 4 == 2:\n    x += 1\n    o = 4 * x * x\nif t % 4 == 3:\n    k += 1\n    o = 8 * k * k + 4 * k\nprint(o)", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nx = n // 2 + 1\nif n % 2 == 0:\n    print(x ** 2)\nelse:\n    print(2 * (x * (x + 1)))", "n = int(input())\nmax_ups = (n + 1) // 2\nmax_sides = n // 2\nnb_y = max_ups * 2 // 2 + 1\nnb_x = max_sides * 2 // 2 + 1\nif max_ups > max_sides:\n    print(nb_y * nb_x * 2)\nelse:\n    print(nb_y * nb_x)", "T = 1\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    if n % 2 == 0:\n        k = n // 2\n        print((k + 1) ** 2)\n    else:\n        k = n // 2\n        q = n - k\n        print(2 * (k + 1) * (q + 1))", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\na = 0\nk = 1\nif n % 2:\n    for i in range(n // 2 + 1):\n        a += k * 4\n        k += 1\nelif n % 4:\n    k = 0\n    for i in range(n // 4 + 1):\n        a += k * 4 + 4\n        k += 2\nelse:\n    k = 1\n    a = 1\n    for i in range(n // 4):\n        a += k * 4 + 4\n        k += 2\nprint(a)", "n = int(input())\nif n % 2 == 1:\n    print((n + 2) ** 2 - int(n / 2 + 2) ** 2 - int(n / 2 + 1) ** 2)\nelse:\n    print(int(n / 2 + 1) ** 2)", "n = int(input())\n\ndef odds_in_square(n):\n    return 2 * n * (n + 1)\n\ndef evens_in_square(n):\n    return odds_in_square(n) + 1\nif n % 2:\n    print(odds_in_square((n + 1) // 2))\nelse:\n    x = n // 2\n    a = [1]\n    for i in range(1, x + 1):\n        a.append(evens_in_square(i) - a[i - 1])\n    print(a[-1])", "n = int(input())\n\ndef odds_in_square(n):\n    return 2 * n * (n + 1)\n\ndef evens_in_square(n):\n    return odds_in_square(n) + 1\nif n % 2:\n    print(odds_in_square((n + 1) // 2))\nelse:\n    print((n // 2 + 1) ** 2)", "n = int(input())\nx = n // 2 + 1\nif n % 2:\n    print(2 * x * (x + 1))\nelse:\n    print(x ** 2)", "n = int(input())\ntemp = 0\nm = int(n / 2) + 1\nif n % 2 != 1:\n    temp = m * m\nelse:\n    temp = 2 * m * (m + 1)\nprint(temp)", "innum = lambda : int(input())\ninmul = lambda : map(int, input().split())\ninstr = lambda : str(input())\ninarr = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = innum()\n    if n % 2 == 0:\n        print((n // 2 + 1) ** 2)\n    else:\n        k = (n - 1) // 2\n        print(2 * (k + 1) * (k + 2))\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "n = int(input())\nprint(((n + 2) // 2) ** 2 + n % 2 * (((n + 2) // 2) ** 2 + n + 1))", "import sys\ninput = sys.stdin.readline\nx = int(input())\nprint(2 * (x // 2 + 1) * (x // 2 + 2) if x % 2 else (x // 2 + 1) * (x // 2 + 1))", "n = int(input())\nif n % 2 == 0:\n    ans = (n // 2 + 1) ** 2\nelse:\n    ans = 2 * (n // 2 + 1) * (n // 2 + 2)\nprint(ans)", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nif n % 2 == 0:\n    print(pow(n // 2 + 1, 2))\nelse:\n    k = n // 2\n    print(2 * (k + 1) * (k + 2))", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nn = iinput()\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print((n + 1) * ((n + 3) // 2))", "n = int(input())\nk = n // 2\nif n % 2:\n    print(2 * (k + 1) * (k + 2))\nelse:\n    print((k + 1) * (k + 1))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "n = int(input())\nif n % 2 == 0:\n    print(int((n / 2 + 1) * (n / 2 + 1)))\nelse:\n    print(int((2 + (n - 1) / 2) * (2 * ((n - 1) / 2 + 1))))", "n = int(input())\nif n % 2 == 0:\n    print(int((n / 2 + 1) ** 2))\nelse:\n    n = (n + 1) / 2\n    print(int(4 + (n - 1) * (2 * 8 + (n - 2) * 4) / 2))", "n = int(input())\nans = 0\nif n % 2:\n    for i in range(1, n + 1, 2):\n        ans += i\n    ans += (n + 1) // 2\n    ans *= 2\nelse:\n    ans = (n // 2 + 1) ** 2\nprint(ans)", "n = int(input())\nk = n // 2\nif n % 2 == 0:\n    print((k + 1) * (k + 1))\nelse:\n    print(2 * (k + 1) * (k + 2))", "def solve(n):\n    if n == 0:\n        return 0\n    i = 2\n    j = 2\n    while i < n:\n        i += 2\n        j += 1\n    return j * j\nn = int(input())\nif n % 2 == 0:\n    print(solve(n))\nelse:\n    p = solve(n - 1) + solve(n + 1) - 1\n    if n == 1:\n        p += 1\n    print(p)", "n = int(input())\nif n % 2 == 0:\n    print(pow(n // 2 + 1, 2))\nelse:\n    k = n // 2\n    print(2 * (k + 1) * (k + 2))", "def process(n):\n    if n % 2 == 0:\n        return (n // 2 + 1) ** 2\n    else:\n        return (n // 2 + 1) * (n // 2 + 2) * 2\nn = int(input())\nprint(process(n))", "n = int(input())\nk = n // 2\nif n % 2 == 0:\n    print((k + 1) * (k + 1))\nelse:\n    print(2 * (k + 1) * (k + 2))", "n = int(input())\nif not n & 1:\n    print((n // 2 + 1) ** 2)\nelse:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))", "def move_n_turn(n: int):\n    if n == 0:\n        return 1\n    if n <= 2:\n        return 4\n    if n == 3:\n        return 12\n    if n % 2 == 0:\n        if n % 4 != 0:\n            return ((n + 2) // 2) ** 2\n        else:\n            return move_n_turn(n - 4) + 2 * (n // 2 + 1) + 2 * (n // 2 - 1)\n    if n % 2 == 1:\n        return move_n_turn(n - 2) + 4 * ((n + 1) // 2)\nn = int(input())\nprint(move_n_turn(n))", "n = int(input())\nif n % 2 == 1:\n    print((n + 1) // 2 * ((n + 1) // 2 + 1) * 2)\nelse:\n    print((n // 2 + 1) ** 2)", "n = int(input())\nif n == 1:\n    print(4)\nelif n % 2 == 1:\n    print((n // 2 + 1) * (n // 2 + 2) * 2)\nelse:\n    print((n // 2 + 1) ** 2)", "n = int(input())\nif n % 2 == 0:\n    pos = int(n / 2) + 1\n    print(pos * pos)\nelse:\n    pos = int((n + 1) / 2)\n    print(pos * (pos + 1) * 2)", "a = int(input())\nif a % 2 == 1:\n    ans = int((a / 2 + 0.5 + 1) * (a / 2 - 0.5 + 1) * 2)\nelse:\n    ans = int((a / 2 + 1) ** 2)\nprint(ans)", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nx = int(n / 2) + 1\nif n % 2 == 0:\n    ans = x ** 2\nelse:\n    ans = 2 * x * (x + 1)\nprint(ans)", "T = 1\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    if n % 2 == 0:\n        k = n // 2\n        print((k + 1) ** 2)\n    else:\n        k = n // 2\n        q = n - k\n        print(2 * (k + 1) * (q + 1))", "n = int(input())\nif n % 2 == 0:\n    if n == 2:\n        print(4)\n    else:\n        print((n // 2 + 1) ** 2)\nelif n == 1:\n    print(4)\nelse:\n    print((n // 2 + 1) * (n // 2 + 2) * 2)", "n = int(input())\nx = n // 2 + 1\nprint([x ** 2, 2 * x * (x + 1)][n % 2])", "n = int(input())\nif n % 2 == 0:\n    k = n // 2 + 1\n    print(k ** 2)\nelse:\n    k = n // 2\n    print(2 * (k + 1) * (k + 2))", "a = int(input())\nif a % 2 == 0:\n    print((a // 2 + 1) ** 2)\nelse:\n    print((a // 2 + 1) * (a // 2 + 2) * 2)", "n = 3\nn = int(input())\nk = int(n / 2)\nif n % 2 == 0:\n    ans = (k + 1) * (k + 1)\nelse:\n    ans = 2 * (k + 1) * (k + 2)\nprint(ans)", "import random\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom sys import stdin, stdout\nimport sys\nimport operator\n\ndef main():\n    z = ''\n    d = defaultdict()\n    t = 1\n    n = int(input())\n    p = (n + 1) // 2\n    if n % 2 == 0:\n        print((n // 2 + 1) ** 2)\n    else:\n        rn = (n - 1) // 2 + 1\n        cn = (n + 1) // 2 + 1\n        print(2 * rn * cn)\nmain()", "n = 3\nn = int(input())\nk = int(n / 2)\nif n % 2 == 0:\n    ans = (k + 1) * (k + 1)\nelse:\n    ans = 2 * (k + 1) * (k + 2)\nprint(ans)", "try:\n    n = int(input())\n    holes = 1\n    even_times = 1\n    odd_times = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_times += 1\n        else:\n            odd_times += 1\n            holes += 1\n    if n % 2 == 0:\n        print(even_times * holes)\n    else:\n        print(odd_times * holes * 2)\nexcept exception as e:\n    print(e)", "import sys\nimport math\nmod = 10 ** 9 + 7\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nr = range\nn = IN()\nm = n // 2\nm += 1\nif n % 2:\n    print(2 * m * (m + 1))\nelse:\n    print(m * m)", "from sys import *\nstep = int(stdin.readline())\ntotalStepX = round(step / 2)\ntotalStepY = step - totalStepX\nposibleX = totalStepX + 1\nposibleY = totalStepY + 1\nposiblePoint = posibleX * posibleY\nif step % 2 != 0:\n    posiblePoint = posiblePoint * 2\nprint(posiblePoint)", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial, log2\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    n = nin()\n    if n % 2:\n        ans_.append((n // 2 + 2) * (n // 2 + 1) * 2)\n    else:\n        ans_.append((n // 2 + 1) ** 2)\nsolve()\nfor i in ans_:\n    print(i)", "n = int(input())\nif n % 2 == 0:\n    print(int((n / 2 + 1) * (n / 2 + 1)))\nelse:\n    k = n // 2\n    print(int(2 * (k + 1) * (k + 2)))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print((n + 1) * (n // 2 + 2))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print((n // 2 + 1) ** 2 * 2 + (n // 2 + 1) * 2)", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) * (n // 2 + 1))\nelse:\n    print(2 * ((n // 2 + 1) ** 2 + (n // 2 + 1)))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    count = 0\n    increament = 4\n    i = 1\n    for i in range(1, n + 2, 2):\n        count = count + increament\n        increament = increament + 4\n    print(count)", "t = int(input())\nif t % 2 == 0:\n    y = int(t / 2) + 1\n    ans = int(y * y)\nelse:\n    terms = t + 2\n    lnt = int(terms / 2) + 1\n    gnt = int(terms / 2)\n    x = int(t / 2)\n    ln = x + 1\n    gn = x + 2\n    ans = int(ln * lnt) + int(gn * gnt)\nprint(ans)", "n = int(input())\nif n == 1:\n    print(4)\nelif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    k = n // 2 + 1\n    print(k * (k + 1) // 2 * 4)", "move_steps = int(input())\nif move_steps % 2 == 0:\n    step_x = move_steps / 2\n    step_y = move_steps / 2\n    print(int((step_x + 1) * (step_y + 1)))\nelse:\n    step_x = (move_steps + 1) / 2\n    step_y = (move_steps - 1) / 2\n    print(2 * int((step_x + 1) * (step_y + 1)))", "total_steps = int(input())\nif total_steps % 2 == 0:\n    print((total_steps // 2 + 1) ** 2)\nelif total_steps == 1:\n    print(4)\nelse:\n    M = [3]\n    k2 = len(M)\n    for i in range(total_steps // 2):\n        M.append(M[k2 - 1] - 4 * (i + 1))\n        k2 = k2 + 1\n    ans = total_steps ** 2 + M[total_steps // 2 - 1]\n    print(ans)", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "def move(no):\n    arr1 = [0] * 1001\n    for i in range(1, 1001):\n        if i % 2 != 0:\n            arr1[i] = (i + 1) * 2\n        else:\n            arr1[i] = i * 2\n    arr2 = [0] * 1001\n    arr2[3] = 4\n    arr2[4] = 1\n    for i in range(6, 1001, 2):\n        scratch = arr1[i - 4] + arr2[i - 4]\n        arr2[i] = scratch\n    for i in range(5, 1001, 2):\n        scratch = arr1[i - 2] + arr2[i - 2]\n        arr2[i] = scratch\n    result = arr1[no] + arr2[no]\n    print(result)\nno = int(input())\nmove(no)", "n = int(input())\nx = n // 2 + 1\nif n % 2 == 0:\n    print(x * x)\nelse:\n    print(2 * x * (x + 1))", "n = int(input())\nif n % 2:\n    print(2 * (n // 2 + 1) * (n // 2 + 2))\nelse:\n    print((n // 2 + 1) ** 2)", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "n = int(input())\nprint((n % 2 + 1) * ((n // 2 + 1) * (n - n // 2 + 1)))", "N = int(input())\nif N % 2 == 0:\n    print((N // 2 + 1) ** 2)\nelif N == 1:\n    print(4)\nelse:\n    print(2 * (N // 2 + 1) * (N // 2 + 2))", "n = int(input())\nif n % 2 == 0:\n    print((n // 2 + 1) ** 2)\nelse:\n    print((n + 2) ** 2 // 2)", "def mp():\n    return map(int, input().split())\n\ndef it():\n    return int(input())\nn = it()\ndp = [0] * (n + 1)\nif n & 1:\n    k = 2\n    j = 1\n    for i in range(n + 1):\n        if i & 1:\n            dp[i] = k * j * 2\n            k += 1\n            j += 1\nelse:\n    j = 2\n    for i in range(2, n + 1):\n        if i & 1 == 0:\n            dp[i] = j * j\n            j += 1\nprint(dp[n])"]