["for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "import sys\ninput_str = sys.stdin.read()\ninput_arr = input_str.split('\\n')\nt = int(input_arr[0])\ninput_arr = input_arr[1:]\nresults = []\nfor i in range(t):\n    n = int(input_arr[i])\n    div = int('1' * len(input_arr[i]))\n    results.append(n // div + 9 * (len(input_arr[i]) - 1))\nprint('\\n'.join([str(val) for val in results]))", "for s in [*open(0)][1:]:\n    c = s[0]\n    print(9 * len(s) - 18 + int(c) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "alp = int(input())\nnum = []\nfor i in range(alp):\n    s = input()\n    num.append(s)\ntes = [11, 111, 1111, 11111, 111111, 1111111, 11111111, 111111111]\n\ndef main(arr):\n    return 9 * (len(arr) - 1) + int(arr) // int('1' * len(arr))\nfor i in num:\n    print(main(i))", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    x = int(math.log(n, 10))\n    v = int('1' * (x + 1))\n    h = n // v\n    print(9 * x + h)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    x = len(str(n // 10)) * 9\n    x1 = (len(str(n // 10)) + 1) * '1'\n    if n < 10:\n        l.append(n)\n    elif n < int(x1):\n        l.append(x)\n    else:\n        l.append(n // int(x1) + x)\nprint('\\n'.join(map(str, l)))", "for s in [*open(0)][1:]:\n    c = s[0]\n    print(9 * len(s) - 18 + int(c) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int(s[0]) - ('.' < s.strip(s[0]) < s[0]))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print((len(s) - 2) * 9 + int(s[0]) - 1 + (int(s) >= int(s[0] * len(s[:-1]))))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "for s in [*open(0)][1:]:\n    print((len(s) - 2) * 9 + int(s[0]) - 1 + (int(s) >= int(s[0] * len(s[:-1]))))", "for s in [*open(0)][1:]:\n    print((len(s) - 2) * 9 + int(s[0]) - 1 + (int(s) >= int(s[0] * len(s[:-1]))))", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    c = 9\n    if n <= 9:\n        print(n)\n        continue\n    elif n >= 10 and n <= 100:\n        c += n // 11\n    elif n >= 100 and n <= 1000:\n        c += 9\n        c += n // 111\n    elif n >= 1000 and n <= 10000:\n        c += 18\n        c += n // 1111\n    elif n >= 10000 and n <= 100000:\n        c += 27\n        c += n // 11111\n    elif n >= 100000 and n <= 1000000:\n        c += 36\n        c += n // 111111\n    elif n >= 1000000 and n <= 10000000:\n        c += 45\n        c += n // 1111111\n    elif n >= 10000000 and n <= 100000000:\n        c += 54\n        c += n // 11111111\n    elif n >= 100000000 and n <= 1000000000:\n        c += 63\n        c += n // 111111111\n    print(c)", "for s in [*open(0)][1:]:\n    print(9 * len(s) - 18 + int((c := s[0])) - ('.' < s.strip(c) < c))", "def calculateNumOrdinary(str_n):\n    n = len(str_n)\n    ones = n * '1'\n    return (n - 1) * 9 + int(str_n) // int(ones)\noutput = []\nfor i in range(int(input())):\n    n = input()\n    output.append(calculateNumOrdinary(n))\nprint(*output, sep='\\n')", "t = int(input())\nnumbers = [input() for i in range(t)]\nresults = []\nfor i in range(t):\n    counter = 0\n    n = numbers[i]\n    if n.__len__() == 1:\n        counter += int(n)\n    else:\n        counter += 9 * (n.__len__() - 1)\n        if int(''.join([n[0] for i in range(n.__len__())])) <= int(n):\n            counter += int(n[0]) - 1 + 1\n        else:\n            counter += int(n[0]) - 1\n    results.append(counter)\n[print(i) for i in results]", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    x = int(math.log(n, 10))\n    v = int('1' * (x + 1))\n    h = n // v\n    print(9 * x + h)", "a = []\nb = []\nfor i in range(int(input())):\n    k = 0\n    n = int(input())\n    a = str(n)\n    v = int('1' * len(a))\n    k = int(9 * (len(a) - 1) + int(n / v))\n    b.append(k)\nprint(*b, sep='\\n')", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    if n < 10:\n        result.append(n)\n    else:\n        length = len(str(n))\n        compareTo = int('1' * length)\n        result.append(9 * (length - 1) + n // compareTo)\nfor i in result:\n    print(i)", "import math\nt = int(input())\nl = []\nfor i in range(0, t):\n    n = int(input())\n    l.append(n)\nfor j in range(0, t):\n    a = l[j]\n    b = int(math.log(a, 10))\n    s = '1' * (b + 1)\n    k = int(s)\n    print(int(9 * b + a // k))", "t = int(input())\ni = 0\nA = []\nwhile 0 <= i < t:\n    i = i + 1\n    n = int(input())\n    m = str(n)\n    q = len(m)\n    if n >= int(m[0] * q):\n        a = (q - 1) * 9 + int(m[0])\n    else:\n        a = (q - 1) * 9 + int(m[0]) - 1\n    A.append(a)\nk = -1\nwhile -1 <= k < t - 1:\n    k = k + 1\n    print(A[k])", "import sys\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef main():\n    tests = int(input().rstrip())\n    for i in range(tests):\n        num = input().rstrip()\n        first_ = num[0]\n        length_ = len(num)\n        state = True\n        term = int(first_)\n        for j in range(1, length_):\n            next_ = int(num[j])\n            if term < next_:\n                break\n            elif term == next_:\n                continue\n            else:\n                state = False\n                break\n        initial = int(first_) - 1\n        added = 9 * (length_ - 1)\n        initial += added\n        if state:\n            initial += 1\n        output(str(initial))\n        output('\\n')\nmain()", "n = int(input())\nans = []\nfor i in range(n):\n    current_num = input()\n    current_ans = (len(current_num) - 1) * 9 + (int(current_num[0]) if int(current_num) >= int('1' * len(current_num)) * int(current_num[0]) else int(current_num[0]) - 1)\n    ans.append(current_ans)\nfor j in ans:\n    print(j)", "from sys import stdin, stdout\nimport math\nfrom collections import deque, Counter, OrderedDict\nimport heapq\n\ndef ii():\n    return int(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return stdin.readline()\nimport bisect\nans = []\nfor i in range(1, 10):\n    i = int('1' * i)\n    for j in range(1, 10):\n        ans.append(j * i)\nt = ii()\nfor _ in range(t):\n    n = ii()\n    print(bisect.bisect(ans, n))", "input_num = int(input())\nlst = []\n\ndef checker(target):\n    setter = set()\n    before = ''\n    for a in target:\n        if a == before:\n            continue\n        elif a not in setter:\n            setter.add(a)\n            before = a\n        else:\n            return 'NO'\n    return 'YES'\n\ndef solve(target):\n    len_target = len(target)\n    first_digit = target[0]\n    if int(target) >= int(first_digit * len_target):\n        return (len_target - 1) * 9 + int(first_digit)\n    else:\n        return (len_target - 1) * 9 + int(first_digit) - 1\nfor i in range(input_num):\n    lst.append(solve(input()))\nfor i in lst:\n    print(i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 10:\n        print(n)\n    elif n < 100:\n        print(9 + n // 11)\n    elif n < 1000:\n        print(9 + 9 + n // 111)\n    elif n < 10000:\n        print(9 + 9 + 9 + n // 1111)\n    elif n < 100000:\n        print(9 + 9 + 9 + 9 + n // 11111)\n    elif n < 1000000:\n        print(9 + 9 + 9 + 9 + 9 + n // 111111)\n    elif n < 10000000:\n        print(9 + 9 + 9 + 9 + 9 + 9 + n // 1111111)\n    elif n < 100000000:\n        print(9 + 9 + 9 + 9 + 9 + 9 + 9 + n // 11111111)\n    elif n < 1000000000:\n        print(9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + n // 111111111)\n    else:\n        print(9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + n // 1111111111)", "for _ in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "for _ in range(int(input())):\n    n = input()\n    l = len(n)\n    if n >= n[0] * l:\n        print((l - 1) * 9 + int(n[0]))\n    else:\n        print((l - 1) * 9 + int(n[0]) - 1)", "for _ in range(int(input())):\n    s = input()\n    n = int(s)\n    print(9 * (len(s) - 1) + int(s[0]) - 1 + [0, 1][n >= int(len(s) * s[0])])", "def zauryad_sonlar_soni(s):\n    len_son = len(s)\n    Sum = (len_son - 1) * 9\n    s = list(s)\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    if len_son == 1:\n        return s[0]\n    Sum += s[0] - 1\n    for i in range(1, len_son):\n        if s[i] > s[0]:\n            Sum += 1\n            return Sum\n        elif s[i] < s[0]:\n            return Sum\n    return Sum + 1\nt = int(input())\nnatija = []\nfor i in range(t):\n    n = input()\n    natija.append(zauryad_sonlar_soni(n))\nfor i in range(t):\n    print(natija[i])", "for _ in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = int(math.log10(n)) + 1\n    print((l - 1) * 9 + n // int(l * '1'))", "for _ in range(0, int(input())):\n    i = input()\n    print(9 * (len(i) - 1) + (int(i[0]) - 1) + (int(i) >= int(i[0] * len(i))))", "def check(n):\n    v = 0\n    list1 = str(n)\n    le = len(list1)\n    v += 9 * (le - 1)\n    v += int(list1[0]) - 1\n    m = ''\n    for y in range(le):\n        m += str(list1[0])\n    if int(m) <= n:\n        v += 1\n    return v\nt = int(input())\nlistf = []\nfor x in range(t):\n    n = int(input())\n    listf.append(check(n))\nfor g in listf:\n    print(g)", "from math import log10, ceil\nt = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    if n < 10:\n        res.append(n)\n    elif n == 10:\n        res.append(9)\n    else:\n        p = ceil(log10(n))\n        c = 9 * p\n        d = n // 10 ** (p - 1)\n        e = 9 - d\n        f = 0\n        for i in range(p):\n            f += d * 10 ** i\n        if n < f:\n            e += 1\n        c -= e\n        res.append(c)\nfor i in res:\n    print(i)", "for i in range(int(input())):\n    n = int(input())\n    tot = 0\n    tot += 9 * (len(str(n)) - 1)\n    tot += n // int('1' * len(str(n)))\n    print(tot)", "def func():\n    n = int(input())\n    l = len(str(n))\n    t = 9 * (l - 1) + n // int('1' * l)\n    print(t)\n\ndef main():\n    for _ in range(int(input())):\n        func()\nmain()", "n = int(input())\ncount = 0\nfor i in range(0, n):\n    x = input()\n    k = len(x)\n    x = int(x)\n    p = int('1' * k)\n    a = x // p + 9 * (k - 1)\n    print(a)", "for _ in range(int(input())):\n    n = input()\n    l = len(n)\n    print(9 * (l - 1) + int(n) // int('1' * l))", "t = int(input())\nfor i in range(t):\n    n = input()\n    base = (len(n) - 1) * 9\n    extra = int(n[0]) - 1\n    bingo = int(n[0] * len(n))\n    if int(n) >= bingo:\n        extra += 1\n    print(base + extra)", "t = int(input())\nif t >= 1 and t <= 10 ** 4:\n    lan = []\n    for _ in range(t):\n        n = input()\n        b = int(n)\n        if b >= 1 and b <= 9:\n            lan.append(n)\n        else:\n            indx = 0\n            ln = []\n            lgth = len(str(n))\n            flag = True\n            y = int(n[0])\n            while indx != lgth:\n                if int(n[indx]) > y:\n                    flag = True\n                    break\n                if int(n[indx]) < y:\n                    flag = False\n                    break\n                indx += 1\n            if flag == True:\n                j = 9 - y\n                z = 9 * lgth - j\n                lan.append(z)\n            if flag == False:\n                j = 9 - y + 1\n                z = 9 * lgth - j\n                lan.append(z)\n    print(*lan, sep='\\n')", "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(9 * (len(n) - 1) + int(n) // int('1' * len(n)))", "for i in range(int(input())):\n    n = input()\n    print(9 * (len(n) - 1) + int(n) // int('1' * len(n)))", "inp1 = int(input())\nfor i in range(inp1):\n    inp2 = input()\n    a = len(inp2) - 1\n    b = a * 9\n    c = len(inp2) * '1'\n    d = int(inp2) // int(c)\n    e = d + b\n    print(e)", "for i in range(int(input())):\n    n = int(input())\n    if n < 10:\n        print(n)\n    else:\n        s = len(str(n))\n        x = 9 * (s - 1)\n        x += n // int('1' * s)\n        print(x)", "t = int(input())\nfor i in range(t):\n    a = input()\n    a_first = a[0]\n    a_len = len(a)\n    min_on = 9 * (a_len - 1)\n    relevant_bound = a_first * a_len\n    a_first_num = int(a_first)\n    if int(a) < int(relevant_bound):\n        a_first_num -= 1\n    print(min_on + a_first_num)", "def ordinary_number():\n    for i in range(int(input())):\n        inp = input()\n        k = len(inp)\n        inp = int(inp)\n        p = int('1' * k)\n        a = inp // p + 9 * (k - 1)\n        print(a)\nordinary_number()", "t = input()\nfor i in range(int(t)):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int(k * '1')\n    a = n // p + 9 * (k - 1)\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = input()\n    k = int(n) // int('1' * len(n)) + 9 * (len(n) - 1)\n    print(k)", "for _ in range(int(input())):\n    a = input()\n    print(9 * (len(a) - 1) + int(a) // int('1' * len(a)))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 10 and n != 0:\n        print(n)\n    else:\n        s = str(n)\n        print(9 * (len(s) - 1) + int(s[0]) - 1 + [0, 1][n >= int(len(s) * s[0])])", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        r = len(str(n))\n        sm = 9 * (r - 1) + n // int('1' * r)\n        print(sm)\nmain()", "for i in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    print((l - 1) * 9 + n // int('1' * l))", "for _ in range(int(input())):\n    n = int(input())\n    if int(str(n)[0] * len(str(n))) <= n:\n        print((len(str(n)) - 2) * 9 + int(str(n)[0]) + 9)\n    else:\n        print((len(str(n)) - 2) * 9 + int(str(n)[0]) + 8)", "for i in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "for i in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "for i in range(int(input())):\n    n = input()\n    k = len(n)\n    n = int(n)\n    p = int('1' * k)\n    a = n // p + 9 * (k - 1)\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = str(n)\n    l = len(s)\n    c = (l - 1) * 9\n    if int(s[0] * l) <= n:\n        c += int(s[0])\n    else:\n        c += int(s[0]) - 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    if n <= 9:\n        print(n)\n    else:\n        x = len(str(n))\n        print(9 * (x - 1) + n // int('1' * x))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = str(n)\n    b = len(a)\n    ans = (b - 1) * 9\n    p = a[0] * b\n    if p <= a:\n        ans += int(a[0])\n    else:\n        ans += int(a[0]) - 1\n    print(ans)", "for _ in range(int(input())):\n    count = 0\n    n = input()\n    count += (len(n) - 1) * 9\n    if int(n) < int(n[0] * len(n)):\n        count += int(n[0]) - 1\n    else:\n        count += int(n[0])\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    if n < 10:\n        print(n)\n    elif n <= 100:\n        print(9 + n // 11)\n    elif n <= 1000:\n        print(9 + 100 // 11 + n // 111)\n    elif n <= 10000:\n        print(9 + 100 // 11 + 1000 // 111 + n // 1111)\n    elif n <= 100000:\n        print(9 + 100 // 11 + 1000 // 111 + 10000 // 1111 + n // 11111)\n    elif n <= 1000000:\n        print(9 + 100 // 11 + 1000 // 111 + 10000 // 1111 + 100000 // 11111 + n // 111111)\n    elif n <= 10000000:\n        print(9 + 100 // 11 + 1000 // 111 + 10000 // 1111 + 100000 // 11111 + 1000000 // 111111 + n // 1111111)\n    elif n <= 100000000:\n        print(9 + 100 // 11 + 1000 // 111 + 10000 // 1111 + 100000 // 11111 + 1000000 // 111111 + 10000000 // 1111111 + n // 11111111)\n    elif n <= 1000000000:\n        print(9 + 100 // 11 + 1000 // 111 + 10000 // 1111 + 100000 // 11111 + 1000000 // 111111 + 10000000 // 1111111 + 100000000 // 11111111 + n // 111111111)", "for t in range(int(input())):\n    n = input()\n    print(9 * (len(n) - 1) + int(n) // int('1' * len(n)))", "def is_ord(n):\n    l = len(n)\n    return int(n) % int('1' * l) == 0\nfor _ in range(int(input())):\n    n = input()\n    l = len(n)\n    t = 9 * l - 9\n    print(t + int(n[0]) - 1 + (int(n[0] * l) <= int(n)))", "for _ in range(int(input())):\n    n = input()\n    l = len(n)\n    print(9 * l - 10 + int(n[0]) + (int(n[0] * l) <= int(n)))", "for _ in range(int(input())):\n    n = input()\n    t = False\n    if n[0] * len(n) > n:\n        print(9 * (len(n) - 1) + int(n[0]) - 1)\n    else:\n        print(9 * (len(n) - 1) + int(n[0]))", "def orid():\n    for _ in range(int(input())):\n        n = int(input())\n        r = len(str(n))\n        sum = 9 * (r - 1) + n // int('1' * r)\n        print(sum)\norid()", "x = int(input())\nfor _ in range(x):\n    n = input()\n    ans = (len(n) - 1) * 9\n    ans += int(n[0]) - 1\n    ss = n[0] * len(n)\n    if int(n) >= int(ss):\n        ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    z = 0\n    if n > 10:\n        lenght = len(str(n))\n        s = int('1' * lenght)\n        k = n // s\n        print((lenght - 1) * 9 + k)\n    elif n == 10:\n        print(9)\n    else:\n        print(n)", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = input()\n        l_n = len(n)\n        if l_n == 1:\n            print(n)\n        else:\n            print(9 * (l_n - 1) + int(n[0]) - 1 + (n >= str(n[0]) * l_n))\nmain()", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = input()\n        l_n = len(n)\n        print(9 * (l_n - 1) + int(n[0]) - 1 + (n >= str(n[0]) * l_n))\nmain()", "for _ in range(int(input())):\n    n = input()\n    print(9 * (len(n) - 1) + int(n) // int('1' * len(n)))", "times = int(input().rstrip())\nfor i in range(times):\n    num = input().rstrip()\n    ans = 0\n    sigdig = len(num)\n    num = int(num)\n    ans = 9 * (sigdig - 1) + num // int(''.join(['1' for i in range(sigdig)]))\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = len(str(n))\n    s = 9 * (l - 1)\n    x = n // ((10 ** l - 1) // 9)\n    s += x\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = '1' * len(str(n))\n    m = int(m)\n    print((len(str(n)) - 1) * 9 + n // m)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    comp = [n[0]] * len(n)\n    if int(n) >= int(n[0] * len(n)):\n        print((len(n) - 1) * 9 + int(n[0]))\n    else:\n        print((len(n) - 1) * 9 + int(n[0]) - 1)", "t = int(input())\n\ndef solve(s):\n    ans = 9 * (len(s) - 1)\n    if int(s[0] * len(s)) <= int(s):\n        ans += int(s[0])\n    else:\n        ans += int(s[0]) - 1\n    print(ans)\nfor i in range(t):\n    n = input()\n    solve(n)", "def call(n):\n    if n < 10:\n        return n\n    if n <= 100:\n        return 9 + n // 11\n    if n <= 1000:\n        return 18 + n // 111\n    if n <= 10000:\n        return 27 + n // 1111\n    if n <= 100000:\n        return 36 + n // 11111\n    if n <= 1000000:\n        return 45 + n // 111111\n    if n <= 10000000:\n        return 54 + n // 1111111\n    if n <= 100000000:\n        return 63 + n // 11111111\n    if n <= 1000000000:\n        return 72 + n // 111111111\nfor _ in range(int(input())):\n    n = int(input())\n    print(call(n))"]