["import bisect as bs\nfor _ in range(int(input())):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    (stack, m, p) = ([a[0]], [], [(1000000, 0)])\n    for v in a[1:]:\n        k = bs.bisect_right(m, v)\n        if k == len(m):\n            stack.append(v)\n            m.append(min(stack[-1], stack[-2]))\n        else:\n            stack[k + 1] = m[k] = v\n        while p[-1][0] <= v:\n            (vv, kk) = p.pop()\n            m[kk] = min(m[kk], vv)\n        if k + 1 < len(m):\n            p.append((v, k + 1))\n    print(len(stack))", "import bisect as bs\nfor _ in range(int(input())):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    (stack, m, p) = ([a[0]], [], [(1000000, 0)])\n    for v in a[1:]:\n        k = bs.bisect_right(m, v)\n        if k == len(m):\n            stack.append(v)\n            m.append(min(stack[-1], stack[-2]))\n        else:\n            stack[k + 1] = m[k] = v\n        while p[-1][0] <= v:\n            (vv, kk) = p.pop()\n            m[kk] = min(m[kk], vv)\n        if k + 1 < len(m):\n            p.append((v, k + 1))\n    print(len(stack))"]