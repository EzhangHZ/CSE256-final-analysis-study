["(strings_count, strings_len) = [int(i) for i in input().split()]\n\ndef is_palindrome(text):\n    skipped_letters = 0\n    if len(text) % 2 != 0:\n        skipped_letters = 1\n    first_half = text[:int(len(text) / 2)]\n    second_half = text[int(len(text) / 2) + skipped_letters:]\n    return first_half == second_half[::-1]\nstrings = {}\nfor i in range(strings_count):\n    string = input()\n    strings[string] = string[::-1]\nused_strings = []\nresult = ''\nsingle_palindrome = ''\nfor string in strings:\n    if string not in used_strings:\n        if string != strings[string] and strings[string] in strings:\n            half = int(len(result) / 2)\n            result = result[:half] + string + strings[string] + result[half:]\n            used_strings.append(strings[string])\n            used_strings.append(string)\n        elif is_palindrome(string):\n            single_palindrome = string\nif single_palindrome != '':\n    half = int(len(result) / 2)\n    result = result[:half] + single_palindrome + result[half:]\nprint(len(result))\nprint(result)", "(n, m) = list(map(int, input().split()))\nl = []\nmax_pal = ''\nesq = ''\ndir = ''\nfor i in range(n):\n    l.append(input())\nwhile len(l) > 0:\n    if l[0] == l[0][::-1]:\n        if len(l[0]) >= len(max_pal):\n            max_pal = l[0]\n    elif l[0][::-1] in l:\n        esq += l[0]\n        dir = l[0][::-1] + dir\n        l.remove(l[0][::-1])\n    l.pop(0)\nresp = esq + max_pal + dir\nprint(len(resp))\nprint(resp)", "(n, s) = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(input())\ns1 = ''\nf = 0\nst = ''\nd = dict()\nfor i in l:\n    d[i] = 0\nfor i in l:\n    s3 = i[::-1]\n    if s3 == i:\n        st = i\n    elif d[i] == 0:\n        if s3 in d and d[s3] == 0:\n            d[s3] = 1\n            d[i] = 2\n            s1 += i\nans = s1 + st + s1[::-1]\nle = len(ans)\nprint(le)\nprint(ans)", "import sys, math\nsys.setrecursionlimit(10 ** 8)\n(n, m) = map(int, input().split())\na = []\nfirst = ''\nmid = None\nfor _ in range(n):\n    s = input()\n    a.append(s)\nfor i in a:\n    pal = i[::-1]\n    if pal != i and pal in a:\n        first += i\n        a[a.index(i)] = ''\n        a[a.index(pal)] = ''\n    elif pal == i and pal != '':\n        mid = i\n        a[a.index(pal)] = ''\nif mid == None:\n    ans = first + first[::-1]\nelse:\n    ans = first + mid + first[::-1]\nprint(len(ans))\nprint(ans)", "I = lambda : map(int, input().split())\n(n, m) = I()\nS = [input() for _ in range(n)]\nT = set(S)\ndone = [False] * n\nlft = ''\nmid = ''\nfor (i, s) in enumerate(S):\n    if done[i]:\n        continue\n    if s == s[::-1]:\n        mid = s\n    elif s[::-1] in T:\n        done[i] = True\n        done[S.index(s[::-1])] = True\n        lft += s\nans = lft + mid + lft[::-1]\nprint(len(ans), ans, sep='\\n')", "buff = input()\nn = int(buff.split(' ')[0])\nm = int(buff.split(' ')[1])\ns = []\nfor _ in range(n):\n    s.append(input())\nres = []\nfor i in range(n):\n    res.append([])\n    for j in range(i + 1, n):\n        if s[i] == s[j][::-1]:\n            res[i].append(j)\nstart = ''\nend = []\npal = ''\nfor i in range(n):\n    if len(res[i]) > 0:\n        start += s[i]\n        end.append(s[res[i][0]])\n    elif len(s[i]) % 2 == 0:\n        if s[i][:len(s[i]) // 2] == s[i][len(s[i]) // 2:][::-1]:\n            pal = s[i]\n    elif s[i][:len(s[i]) // 2] == s[i][len(s[i]) // 2 + 1:][::-1]:\n        pal = s[i]\nend_s = ''\nfor i in end[::-1]:\n    end_s += i\nend = end_s\nprint(len(start) * 2 + len(pal))\nprint(start + pal + end)", "def checkPalindromeSelf(word):\n    return word == word[::-1]\ninput1 = input().split(' ')\nnumStrings = int(input1[0])\nlenStrings = int(input1[1])\nmyArray = []\nfor i in range(0, numStrings):\n    temp = input()\n    myArray.append(temp)\nleft = ''\nright = ''\nmiddle = ''\nfor i in range(0, numStrings):\n    reversedWord = myArray[i][::-1]\n    if reversedWord == myArray[i]:\n        middle = myArray[i]\n    else:\n        for j in range(i + 1, numStrings):\n            if reversedWord == myArray[j]:\n                left += myArray[i]\n                right = reversedWord + right\n                break\nanswer = left + middle + right\nprint(len(answer))\nprint(answer)", "from sys import *\ninput = stdin.readline\nlistInput = lambda : list(map(int, input().strip().split()))\nlineInput = lambda : map(int, input().strip().split())\nsJoin = lambda a, sep: f'{sep}'.join(a)\narrJoin = lambda a, sep: f'{sep}'.join(map(str, a))\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef main():\n    (n, m) = lineInput()\n    arr = [input().strip() for i in range(n)]\n    ans = ''\n    special = ''\n    for i in range(n):\n        if arr[i] == '':\n            continue\n        if arr[i] == arr[i][::-1]:\n            special = arr[i]\n            continue\n        rV = arr[i][::-1]\n        for j in range(i + 1, n):\n            if arr[j] == '':\n                continue\n            if rV == arr[j] and arr[j] != '':\n                ans += arr[i]\n                arr[j] = ''\n                arr[i] = ''\n                break\n    ans += special + ans[::-1]\n    print(f'{len(ans)}\\n{ans}')\nmain()", "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    l.append(s)\nans = ''\nk = ''\nfor i in range(n):\n    if l[i][::-1] in l:\n        x = l.index(l[i][::-1])\n        if i != x:\n            ans += l[i]\n            l[i] = ''\n        else:\n            k = l[i]\n            l[i] = ''\nm = ans[::-1]\nans += k + m\nprint(len(ans))\nprint(ans)", "(n, m) = map(int, input().split())\ns = [str(input()) for i in range(n)]\npair = []\nfor i in range(n - 1):\n    p = s[i]\n    p = p[::-1]\n    for j in range(i + 1, n):\n        if s[j] == p:\n            pair.append(s[i])\n            break\npalindrom = ''\nfor i in range(n):\n    if s[i] == s[i][::-1]:\n        palindrom = s[i]\nprint(len(pair) * 2 * m + len(palindrom))\nfor i in range(len(pair)):\n    print(pair[i], end='')\nprint(palindrom, end='')\nfor i in range(len(pair) - 1, -1, -1):\n    print(pair[i][::-1], end='')", "(n, m) = list(map(int, input().split()))\ndc = {}\narr = []\nfor i in range(n):\n    s = input()\n    dc[s] = 1\n    arr += [s]\nnorm = 0\ncent = ''\nfirst = []\nfor i in range(n):\n    if dc[arr[i]] != -1:\n        rev = arr[i][::-1]\n        if arr[i] != rev:\n            if dc.get(rev, -1) != -1:\n                norm += 1\n                first += [arr[i]]\n                dc[arr[i]] = -1\n                dc[rev] = -1\n        else:\n            cent = arr[i]\nprint(norm * m * 2 + len(cent))\nprint(''.join(first) + cent + ''.join(first)[::-1])", "(n, t) = map(int, input().split())\nd = {}\narr = []\nfor i in range(n):\n    st = input()\n    arr.append(st)\n    d[st] = 1\nstrb = ''\nstrf = ''\nmiddle = ''\nfor i in arr:\n    o = ''.join(reversed(i))\n    if o == i:\n        middle = o\n    elif o in d.keys():\n        if d[o] > 0 and d[i] > 0:\n            strb = strb + i\n            strf = o + strf\n            d[o] = d[o] - 1\n            d[i] = d[i] - 1\nqq = strb + middle + strf\nprint(len(qq))\nprint(qq)", "tandc = input()\nl1 = tandc.split(' ')\nt = int(l1[0])\nc = int(l1[1])\nl2 = []\nlent = 0\nstrans = ''\nstr4 = ''\nfor x in range(0, t):\n    strng = input()\n    l2.append(strng)\nfor y in range(0, t):\n    rev = l2[y][::-1]\n    same = str(l2[y])\n    if rev in l2 and rev != same:\n        strans = strans[0:int(lent / 2)] + l2[y] + rev + strans[int(lent / 2):]\n        l2.remove(rev)\n        l2.append('boy')\n    elif rev == str(l2[y]):\n        str4 = l2[y]\n    lent = len(strans)\nstrans = strans[0:int(lent / 2)] + str4 + strans[int(lent / 2):]\nx = len(strans)\nprint(x)\nprint(strans)", "(nb_strings, lens) = [int(x) for x in input().split()]\nhas = [input() for _ in range(nb_strings)]\nmids = ''\n(left, rite, paired) = ([], [], [])\nfor i in has:\n    if i == i[::-1]:\n        mids = i\n    elif i not in paired:\n        if i[::-1] in has:\n            left.append(i)\n            rev = i[::-1]\n            rite.append(rev)\n            paired.append(rev)\nanswer = ''.join(left)\nanswer += mids\nanswer += ''.join(rite[::-1])\nlens = len(answer)\nprint(lens)\nif lens:\n    print(answer)"]