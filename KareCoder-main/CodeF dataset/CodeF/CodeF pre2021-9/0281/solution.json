["import sys\n\ndef findNumPairs(arr):\n    count = 0\n    equal = {}\n    for i in range(len(arr)):\n        val = arr[i] - i\n        if val in equal:\n            count += equal[val]\n        else:\n            equal[val] = 0\n        equal[val] += 1\n    return count\nt = int(input())\nanswer = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    answer.append(findNumPairs(arr))\nprint(*answer, sep='\\n')", "import sys\n\ndef findNumPairs(arr):\n    count = 0\n    equal = {}\n    for i in range(len(arr)):\n        val = arr[i] - i\n        if val not in equal:\n            equal[val] = 0\n        equal[val] += 1\n    for k in equal:\n        if equal[k] > 1:\n            count += equal[k] * (equal[k] - 1) // 2\n    return count\nt = int(input())\nanswer = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    answer.append(findNumPairs(arr))\nprint(*answer, sep='\\n')", "import sys\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    w_offset = [x - i for (i, x) in enumerate(array)]\n    seen_counts = {}\n    tot = 0\n    for e in w_offset:\n        if not e in seen_counts:\n            seen_counts[e] = 1\n        else:\n            tot += seen_counts[e]\n            seen_counts[e] += 1\n    return tot\nNT = int(rl())\nfor ti in range(NT):\n    _ = rl()\n    array = [int(x) for x in rl().split(' ')]\n    cnt = solve(array)\n    pr(cnt)", "t = int(input())\nlist_ans = []\nfor _ in range(t):\n    dict1 = {}\n    ans = 0\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    for i in range(n):\n        list1[i] -= i\n    for x in list1:\n        if x in dict1:\n            dict1[x] += 1\n        else:\n            dict1[x] = 1\n    for x in dict1.values():\n        if x >= 2:\n            ans += x * (x - 1) // 2\n    list_ans.append(ans)\nfor item in list_ans:\n    print(item)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nfor _ in range(int(input())):\n    n = int(input())\n    a = inp()\n    d = {}\n    c = 0\n    for (i, j) in enumerate(a):\n        k = j - i\n        if k in d:\n            c += d[k]\n            d[k] += 1\n        else:\n            d[k] = 1\n    print(c)", "for s in [*open(0)][2::2]:\n    lst = [*map(int, s.split())]\n    cnt = 0\n    sz_lst = len(lst)\n    st = {}\n    cnt = 0\n    for i in range(sz_lst):\n        lol = lst[i] - i\n        if lol in st:\n            st[lol] += 1\n        else:\n            st[lol] = 1\n    for (k, v) in st.items():\n        cnt += v * (v - 1) // 2\n    print(cnt)", "results = []\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    t = 0\n    d = {}\n    for (i, v) in enumerate(l):\n        if v - i in d:\n            t += d[v - i]\n            d[v - i] += 1\n        else:\n            d[v - i] = 1\n    results.append(t)\nfor i in results:\n    print(i)", "import sys, heapq\nfrom collections import defaultdict, deque\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    test = inp()\n    for _ in range(test):\n        n = inp()\n        nums = inlt()\n        difference = defaultdict(int)\n        result = 0\n        for i in range(n):\n            if difference[nums[i] - i]:\n                result += difference[nums[i] - i]\n            difference[nums[i] - i] += 1\n        print(result)\nmain()", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "def count_pairs(arr):\n    count = 0\n    diff_dict = {}\n    for i in range(len(arr)):\n        diff = arr[i] - i\n        if diff in diff_dict:\n            count += diff_dict[diff]\n        if diff in diff_dict:\n            diff_dict[diff] += 1\n        else:\n            diff_dict[diff] = 1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(count_pairs(a))", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "answers = []\n\ndef solve(n, arr):\n    count = 0\n    store = {}\n    for (i, ele) in enumerate(arr):\n        diff = ele - i\n        if diff not in store:\n            store[diff] = 1\n        else:\n            store[diff] += 1\n    for ele in store:\n        l = store[ele]\n        count += l * (l - 1) // 2\n    answers.append(count)\nT = int(input())\nwhile T:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    solve(n, arr)\n    T -= 1\nfor ans in answers:\n    print(ans)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nt = int(input())\nresults = []\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    dif = defaultdict(int)\n    for i in range(n):\n        dif[i + 1 - arr[i]] += 1\n    num = 0\n    for (key, value) in dif.items():\n        if value >= 2:\n            num += value * (value - 1) // 2\n    results.append(num)\nfor i in results:\n    print(i)", "for g in [*open(0)][2::2]:\n    a = list(map(int, g.split()))\n    d = {}\n    for i in range(len(a)):\n        v = a[i] - i\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    t = 0\n    for x in d:\n        k = d[x]\n        t += k * (k - 1) // 2\n    print(t)", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] - i in d:\n            d[a[i] - i] += 1\n        else:\n            d[a[i] - i] = 1\n    ans = 0\n    for i in d:\n        if d[i] > 1:\n            ans += math.comb(d[i], 2)\n    print(ans)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        nums = ra(int)\n        ans = dd(int)\n        for i in range(1, n + 1):\n            x = i - nums[i - 1]\n            ans[x] += 1\n        c = 0\n        for i in ans:\n            c += ans[i] * (ans[i] - 1) // 2\n        print(c)\nmain()", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "def cpr(arr):\n    count = 0\n    diff_dict = {}\n    for (i, num) in enumerate(arr):\n        diff = num - i\n        if diff in diff_dict:\n            count += diff_dict[diff]\n            diff_dict[diff] += 1\n        else:\n            diff_dict[diff] = 1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(cpr(a))", "from sys import *\nfrom collections import defaultdict\ninput = stdin.readline\nI = int\nR = range\nlistInput = lambda : list(map(int, input().strip().split()))\nlineInput = lambda : map(int, input().strip().split())\n\ndef main():\n    for _ in R(I(input())):\n        (n,) = lineInput()\n        arr = listInput()\n        d = defaultdict(int)\n        ans = 0\n        for i in range(n):\n            dif = arr[i] - (i + 1)\n            d[dif] += 1\n        for v in d.values():\n            temp = v - 1\n            ans += temp * (temp + 1) // 2\n        else:\n            print(ans)\nmain()", "from collections import Counter, defaultdict, deque\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = [int(_) for _ in input().split()]\n    d = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        val = arr[i] - i\n        ans += d[val]\n        d[val] += 1\n    print(ans)\ntt = int(input())\nfor test in range(tt):\n    solve()", "def solve():\n    cases = int(input())\n    for t in range(cases):\n        input()\n        nums = list(map(int, input().rstrip().split()))\n        search = dict()\n        count = 0\n        for i in range(len(nums)):\n            diff = nums[i] - i\n            if diff in search:\n                count += search[diff]\n                search[diff] += 1\n            else:\n                search[diff] = 1\n        print(count)\nsolve()", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = list(input().split())\n    d = {}\n    x = s = 0\n    for i in a:\n        req = int(i) - x\n        if req not in d:\n            d[req] = 0\n        else:\n            d[req] = d[req] + 1\n            s = s + d[req]\n        x = x + 1\n    print(s)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "from collections import defaultdict\nn = int(input())\ntestcases = []\nfor i in range(n):\n    l = int(input())\n    x = list(map(int, input().split()))\n    testcases.append(x)\n\ndef getPairs(arr):\n    freq = defaultdict(int)\n    count = 0\n    for i in range(len(arr)):\n        count += freq[arr[i] - i]\n        freq[arr[i] - i] += 1\n    return count\nfor test in testcases:\n    print(getPairs(test))", "def count_pairs(arr):\n    count = 0\n    diff_dict = {}\n    for i in range(len(arr)):\n        diff = arr[i] - i\n        if diff in diff_dict:\n            count += diff_dict[diff]\n        if diff in diff_dict:\n            diff_dict[diff] += 1\n        else:\n            diff_dict[diff] = 1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(count_pairs(a))", "class Kickstart:\n\n    def __init__(self):\n        self.h = None\n\n    def out_format(self, t, ans):\n        return str(ans)\n\n    def solve(self, k, arr):\n        ans = 0\n        cnt = {}\n        for i in range(k - 1, -1, -1):\n            d = arr[i] - i\n            if d not in cnt:\n                cnt[d] = 0\n            ans += cnt[d]\n            cnt[d] += 1\n        return ans\nt = int(input())\nkick = Kickstart()\noutput = []\nfor i in range(t):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    output.append(kick.out_format(i + 1, kick.solve(k, arr)))\nfor ans in output:\n    print(ans)", "import sys, collections\nfrom math import comb\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = list((a - b for (a, b) in zip(a, range(1, n + 1))))\n    freq = collections.Counter(diff)\n    total = 0\n    for f in freq:\n        if freq[f] >= 2:\n            total += comb(freq[f], 2)\n    print(total)", "import sys\nfrom collections import *\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\n\ndef solve(n, arr):\n    count = 0\n    c = 1\n    a = []\n    for i in range(n):\n        a.append(arr[i] - i)\n    for (key, freq) in Counter(a).items():\n        if freq > 1:\n            count += freq * (freq - 1) / 2\n    print(int(count))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "def sd_count(ls, n):\n    dic = dict()\n    for i in range(n):\n        dic[ls[i] - i] = dic.get(ls[i] - i, 0) + 1\n    ret = 0\n    for x in dic:\n        ret += dic[x] * (dic[x] - 1) // 2\n    return ret\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sd_count(a, n))", "T = int(input())\n\ndef solve(arr):\n    res = 0\n    cts = {}\n    for (i, x) in enumerate(arr):\n        val = x - i\n        if val not in cts:\n            cts[val] = 1\n        else:\n            res += cts[val]\n            cts[val] += 1\n    return res\nfor _ in range(T):\n    input()\n    arr = list(map(int, input().split()))\n    res = solve(arr)\n    print(res)", "from collections import Counter\n\ndef getInvCount(arr, n):\n    count = 0\n    arr1 = list()\n    for i in range(n):\n        diff = int(arr[i]) - i\n        arr1.append(diff)\n    aa = Counter(arr1)\n    for i in aa:\n        m = aa[i]\n        count += m * (m - 1) / 2\n    return int(count)\nm = int(input())\nlist1 = list()\nwhile m > 0:\n    n = int(input())\n    arr = list()\n    x = input().split()\n    arr.append(x)\n    arr = arr[0]\n    ans = getInvCount(arr, n)\n    list1.append(ans)\n    m -= 1\nfor i in list1:\n    print(i)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = a = 0\n    for n in map(int, s.split()):\n        g = d.get(n - i, 0)\n        a += g\n        d[n - i] = g + 1\n        i += 1\n    print(a)", "from collections import Counter\n\ndef same(l):\n    dl = [int(l[i]) - i for i in range(len(l))]\n    dicto = Counter(dl)\n    s = 0\n    for j in dicto:\n        s += dicto[j] * (dicto[j] - 1) // 2\n    return str(s)\nt = input()\nno = int(t)\ns = ''\nfor i in range(no):\n    r1 = input()\n    r2 = input().split(' ')\n    s += same(r2) + '\\n'\nprint(s)", "import math\nimport sys\n\ndef scan():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solution():\n    for _ in range(int(input())):\n        n = int(input())\n        a = scan()\n        b = {}\n        for i in range(n):\n            d = a[i] - i\n            if d in b:\n                b[d] += 1\n            else:\n                b[d] = 1\n        c = 0\n        for i in b:\n            if b[i] > 1:\n                c += b[i] * (b[i] - 1) // 2\n        print(c)\nsolution()", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "def solve():\n    t = int(input())\n    while t > 0:\n        t -= 1\n        n = int(input())\n        diff = {}\n        ans = 0\n        for (num, i) in zip(input().split(), range(n)):\n            key = int(num) - i\n            if key not in diff:\n                diff[key] = 1\n            else:\n                ans += diff[key]\n                diff[key] += 1\n        print(int(ans))\nsolve()", "t = int(input())\ntestcases = [(int(input()), list(map(int, input().split()))) for _ in range(t)]\nfor testcase in testcases:\n    counts = {}\n    for (i, element) in enumerate(testcase[1]):\n        new_element = element - i\n        if new_element in counts:\n            counts[new_element] += 1\n        else:\n            counts[new_element] = 1\n    count = 0\n    for count_ in counts.values():\n        count += count_ * (count_ - 1) // 2\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    m = {}\n    answer = 0\n    for i in range(n):\n        x = nums[i] - i\n        if not x in m:\n            m[x] = 1\n        else:\n            answer += m[x]\n            m[x] += 1\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    ans = 0\n    for i in range(n):\n        if arr[i] - i in d:\n            ans += d[arr[i] - i]\n            d[arr[i] - i] += 1\n        else:\n            d[arr[i] - i] = 1\n    print(ans)", "testCase = int(input())\nwhile testCase > 0:\n    testCase -= 1\n    length = int(input())\n    sum = 1\n    array = sorted([int(x) - i for (i, x) in enumerate(input().split())])\n    hash = {}\n    for i in array:\n        if i not in hash:\n            hash[i] = 0\n            sum = 1\n        else:\n            hash[i] += 1 * sum\n            sum += 1\n    sum = 0\n    for i in hash.values():\n        sum += i\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = 0\n    hash_map = dict()\n    for i in range(n):\n        d = arr[i] - i\n        if d in hash_map:\n            c += hash_map[d]\n            hash_map[d] += 1\n        else:\n            hash_map[d] = 1\n    print(c)", "n = int(input())\nfor i in range(n):\n    N = int(input())\n    numbers = list(map(int, input().split()))\n    dict = {}\n    S = 0\n    for i in range(len(numbers)):\n        diff = numbers[i] - i\n        if diff in dict:\n            dict[diff] += 1\n        else:\n            dict[diff] = 1\n    for x in dict:\n        if dict[x] != 1:\n            S += dict[x] * (dict[x] - 1) // 2\n    print(S)", "from collections import defaultdict\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = defaultdict(int)\n        ans = 0\n        for (i, x) in enumerate(a):\n            ans += d[x - i]\n            d[x - i] += 1\n        print(ans)\nmain()", "def solve(n, arr):\n    d = {}\n    for i in range(n):\n        diff = arr[i] - i\n        if diff not in d:\n            d[diff] = 1\n        else:\n            d[diff] += 1\n    ans = 0\n    for c in d:\n        if d[c] == 0 or d[c] == 1:\n            pass\n        else:\n            ans += d[c] * (d[c] - 1) // 2\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "def same():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = dict()\n    res = 0\n    for i in range(n):\n        t = arr[i] - i\n        if d.get(t, 0) == 0:\n            d[t] = 0\n        res += d[t]\n        d[t] += 1\n    return res\nfor i in range(int(input())):\n    print(same())", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nMAX = 2 * int(100000.0)\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    S = list(map(int, sys.stdin.readline().split()))\n    cnt = defaultdict(int)\n    for i in range(n):\n        num = S[i]\n        cnt[num - i] += 1\n    answer = 0\n    for key in cnt.keys():\n        x = cnt[key]\n        if x < 2:\n            continue\n        answer += x * (x - 1) // 2\n    print(answer)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, values, counts, ans) = (int(input()), [int(i) for i in input().split()], {}, 0)\n    for i in range(n):\n        check = values[i] - i\n        counts[check] = counts.get(check, 0) + 1\n    for same in counts:\n        ans += counts[same] * (counts[same] - 1) // 2\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = r = 0\n    for x in s.split():\n        v = d.get((k := (int(x) - i)), 0)\n        r += v\n        d[k] = v + 1\n        i += 1\n    print(r)", "import math\n\ndef sol(A):\n    dic = {}\n    ans = 0\n    for i in range(len(A)):\n        key = A[i] - i\n        if key in dic:\n            dic[key] += 1\n        else:\n            dic[key] = 1\n    for key in dic:\n        ans += math.comb(dic[key], 2)\n    return ans\nx = int(input())\nfor _ in range(x):\n    y = int(input())\n    A = list(map(int, input().split()))\n    print(sol(A))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline().strip())\n    s = list(map(int, sys.stdin.readline().strip().split()))\n    for i in range(n):\n        s[i] -= i + 1\n    dic = {}\n    for item in s:\n        if item not in dic:\n            dic[item] = 1\n        else:\n            dic[item] += 1\n    answer = 0\n    for item in dic.keys():\n        answer += dic[item] * (dic[item] - 1) // 2\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (count, res) = ({}, 0)\n    for i in range(n):\n        num = arr[i] - i\n        if num in count:\n            res += count[num]\n            count[num] += 1\n        else:\n            count[num] = 1\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    book = {}\n    for j in range(n):\n        t = a[j] - j\n        if t in book:\n            book[t] += 1\n        else:\n            book[t] = 1\n    ans = 0\n    for j in book:\n        if book[j] >= 2:\n            ans += book[j] * (book[j] - 1) / 2\n    print(int(ans))", "for _ in range(int(input())):\n    d = {}\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        if a[i] - i in d:\n            ans += d[a[i] - i]\n            d[a[i] - i] += 1\n        else:\n            d[a[i] - i] = 1\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    need = {}\n    count = 0\n    for (i, x) in enumerate(arr):\n        if x - i in need:\n            count += need[x - i]\n            need[x - i] += 1\n        else:\n            need[x - i] = 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = input()\n    nums = list(map(int, input().split(' ')))\n    d = {}\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] - i in d:\n            count += d[nums[i] - i]\n            d[nums[i] - i] += 1\n        else:\n            d[nums[i] - i] = 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    cnt = 0\n    value = i = 0\n    for k in map(int, input().split()):\n        value = d.get(k - i, 0)\n        cnt += value\n        d[k - i] = value + 1\n        i += 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    ans = 0\n    for i in range(n):\n        x = a[i] - i\n        if x in h:\n            ans += h[x]\n        else:\n            h[x] = 0\n        h[x] += 1\n    print(ans)", "from collections import Counter\n\ndef run(n, arr):\n    arr = [num - ind for (ind, num) in enumerate(arr)]\n    counter = Counter(arr)\n    ans = 0\n    for c in counter.values():\n        ans += c * (c - 1) // 2\n    return ans\ntestcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    arr = [int(num) for num in input().split()]\n    ans = run(n, arr)\n    print(ans)", "from collections import Counter, deque, defaultdict, OrderedDict\nimport math\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = -sys.maxsize\nMIN = sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    for i in range(n):\n        a[i] = a[i] - i\n    d = Counter(a)\n    res = 0\n    for (a, b) in d.items():\n        if b >= 2:\n            res += b * (b - 1) // 2\n    print(res)\nt = int(input())\nfor tt in range(t):\n    solve()", "import math\n\ndef sg(x):\n    if x > 0:\n        return True\n    return False\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = input().split()\n    arr = [int(x) for x in arr]\n    tot = 0\n    dk = {}\n    for i in range(n):\n        if arr[i] - i in dk:\n            tot += dk[arr[i] - i]\n            dk[arr[i] - i] += 1\n        else:\n            dk[arr[i] - i] = 1\n    print(tot)", "from collections import defaultdict\ntest_cases = int(input())\n\ndef handle():\n    offset_groups = defaultdict(int)\n    input()\n    for (index, value) in enumerate([int(s) for s in input().split(' ')]):\n        offset_groups[value - index] += 1\n    total = 0\n    for (key, value) in offset_groups.items():\n        if value >= 2:\n            total += value * (value - 1) // 2\n    return total\nfor _ in range(test_cases):\n    print(handle())", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    d = dict()\n    res = 0\n    for i in range(1, n + 1):\n        a[i] = a[i] - i\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    for i in range(1, n + 1):\n        d[a[i]] -= 1\n        res += d[a[i]]\n    print(res)\nfor t in range(int(input())):\n    charming()", "def findPairs(arr, n):\n    diffMap = {}\n    pairs = 0\n    for i in range(n):\n        arr[i] = arr[i] - i\n        if arr[i] not in diffMap.keys():\n            diffMap[arr[i]] = 1\n        else:\n            diffMap[arr[i]] += 1\n    for (key, val) in diffMap.items():\n        if val > 1:\n            pairs += val * (val - 1) // 2\n    return pairs\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(findPairs(lst, n))", "def count(a):\n    n = len(a)\n    d = dict()\n    for i in range(n):\n        d[a[i] - i] = d.get(a[i] - i, 0) + 1\n    res = 0\n    for x in d:\n        count = d[x]\n        res += count * (count - 1) // 2\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(count(a))", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    ans = 0\n    for i in range(n):\n        temp = l[i] - i\n        if d.get(temp, 0) == 0:\n            d[temp] = 0\n        ans += d[temp]\n        d[temp] += 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def countPairs(arr, n):\n    map = {}\n    for i in range(n):\n        map[arr[i] - i] = map.get(arr[i] - i, 0) + 1\n    res = 0\n    for x in map:\n        cnt = map[x]\n        res += cnt * (cnt - 1) // 2\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(countPairs(l, n))", "def fun(n, arr):\n    d = {}\n    ans = 0\n    for (i, x) in enumerate(arr):\n        if x - i in d:\n            ans += d[x - i]\n            d[x - i] += 1\n        else:\n            d[x - i] = 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = fun(n, arr)\n    print(ans)", "import math\nfrom sys import stdin, stdout\n\ndef solve():\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        a = list(map(int, input().strip().split()))\n        p = {}\n        for x in range(n):\n            b = a[x] - x\n            p[b] = p.get(b, 0) + 1\n        ans = 0\n        for x in p.values():\n            ans += x * (x - 1)\n        ans //= 2\n        print(ans)\nsolve()", "def solve(l, n):\n    d = {}\n    for i in range(n):\n        if l[i] - i in d:\n            d[l[i] - i] += 1\n        else:\n            d[l[i] - i] = 1\n    res = 0\n    for i in d.values():\n        res = res + i * (i - 1) // 2\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    print(solve(l, n))", "def fun(A, n):\n    d = {}\n    for i in range(n):\n        if A[i] - i in d:\n            c = d[A[i] - i]\n            c = c + 1\n            d[A[i] - i] = c\n        else:\n            d[A[i] - i] = 1\n    cnt = 0\n    for i in d:\n        c = d[i]\n        cnt = cnt + c * (c - 1) // 2\n    return cnt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(fun(A, n))", "def count(a):\n    d = dict()\n    for i in range(len(a)):\n        d[a[i] - i] = d.get(a[i] - i, 0) + 1\n    res = 0\n    for x in d:\n        ctr = d[x]\n        res = res + ctr * (ctr - 1) // 2\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(count(a))", "def solve(x, n):\n    y = []\n    total = 0\n    for i in range(n):\n        y.append(int(x[i]) - i)\n    count = {}\n    for i in range(n):\n        temp = y[i]\n        if temp in count:\n            count[temp] += 1\n        else:\n            count[temp] = 1\n    for value in count.values():\n        if value >= 2:\n            total += value * (value - 1) // 2\n    return total\nfor q in range(int(input())):\n    n = int(input())\n    x = input().split()\n    print(solve(x, n))", "from collections import defaultdict\n\ndef solution(n):\n    ret = 0\n    d_cnt = defaultdict(int)\n    for (i, n) in enumerate(map(int, input().split()), 1):\n        d_cnt[n - i] += 1\n    for k in d_cnt:\n        if d_cnt[k] > 1:\n            ret += d_cnt[k] * (d_cnt[k] - 1) >> 1\n    return ret\nfor _ in range(int(input())):\n    print(solution(int(input())))", "from collections import defaultdict as dfd\n\ndef solve(n, arr):\n    book = dfd(int)\n    for i in range(n):\n        book[arr[i] - i] += 1\n    ans = 0\n    for v in book.values():\n        if v > 1:\n            ans += v * (v - 1) // 2\n    return ans\nT = int(input())\nfor case_num in range(1, T + 1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = solve(n, arr)\n    print(f'{ans}')", "def fun(A, n):\n    d = {}\n    for i in range(n):\n        if A[i] - i in d:\n            c = d[A[i] - i]\n            c = c + 1\n            d[A[i] - i] = c\n        else:\n            d[A[i] - i] = 1\n    cnt = 0\n    for i in d:\n        c = d[i]\n        cnt = cnt + c * (c - 1) // 2\n    return cnt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(fun(A, n))", "def solve(n, lst):\n    dct = dict()\n    for i in range(n):\n        s = lst[i] - i\n        if s in dct:\n            if len(dct[s]) != 0:\n                dct[s].append(dct[s][-1] + 1)\n            else:\n                dct[s].append(1)\n        else:\n            dct[s] = []\n    ans = 0\n    for i in dct.values():\n        ans += sum(i)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(solve(n, lst))", "def solve(n, lst):\n    dct = dict()\n    ans = 0\n    for i in range(n):\n        s = lst[i] - i\n        ans += dct.get(s, 0)\n        dct[s] = dct.get(s, 0) + 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(solve(n, lst))", "def solve():\n    dic = {}\n    for i in range(n):\n        dic[a[i] - i] = dic.get(a[i] - i, 0) + 1\n    c = 0\n    for val in dic.values():\n        c += (val - 1) * val // 2\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve())", "from collections import Counter\n\ndef fun(ls, n):\n    ans = []\n    count = 0\n    for (i, val) in enumerate(ls):\n        ans.append(val - i)\n    ctr = Counter(ans)\n    for (key, val) in ctr.items():\n        if val >= 2:\n            count += val * (val - 1) // 2\n    print(count)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    fun(ls, n)", "import math\n\ndef main():\n    for _ in range(int(input())):\n        n = input()\n        s = list(map(int, input().split()))\n        print(get(s))\n\ndef get(s):\n    p = []\n    step = 0\n    for (i, v) in enumerate(s):\n        p.append(v - i)\n    dict = {}\n    for n in p:\n        if not n in dict.keys():\n            dict[n] = 1\n        else:\n            dict[n] += 1\n    for i in dict.values():\n        if i != 1:\n            i -= 1\n            step += i * (i + 1) / 2\n    return int(step)\nmain()", "def solve(n):\n    nums = input().split(' ')\n    mem = {}\n    out = 0\n    for i in range(n):\n        num = int(nums[i])\n        diff = num - i\n        if diff in mem:\n            mem[diff] += 1\n        else:\n            mem[diff] = 1\n    for key in mem:\n        if mem[key] >= 2:\n            out += int(mem[key] * (mem[key] - 1) / 2)\n    return out\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(solve(n))", "t = int(input())\nfor task in range(t):\n    n = int(input())\n    x = input().split()\n    a = [int(x[i]) - i for i in range(n)]\n    d = {}\n    count = 0\n    for i in a:\n        if i in d:\n            d[i] += 1\n            count += d[i] - 1\n        else:\n            d[i] = 1\n    print(count)", "import sys\nfrom collections import defaultdict\n\ndef solve(n, li):\n    temp = defaultdict(int)\n    ans = 0\n    for (i, j) in enumerate(li):\n        ans += temp[j - i]\n        temp[j - i] += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    print(solve(n, li))", "import collections as coll\nimport sys\nimport math as mt\nimport time\nsys.setrecursionlimit(1000000)\n\ndef uno():\n    return int(sys.stdin.readline().strip())\n\ndef dos():\n    return sys.stdin.readline().strip()\n\ndef tres():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef cuatro():\n    return sys.stdin.readline().strip().split()\ntime1 = time.time()\nfor _ in range(uno()):\n    n = uno()\n    a = list(tres())\n    (ans, d) = (0, coll.defaultdict(lambda : 0))\n    for i in range(n):\n        d[a[i] - i] += 1\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    dic = {}\n    ans = 0\n    n = int(input())\n    a = getint()\n    for i in range(n):\n        if a[i] - i in dic:\n            dic[a[i] - i] += 1\n        else:\n            dic[a[i] - i] = 1\n    for i in dic.values():\n        ans += i * (i - 1) // 2\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] -= i\n    k = 0\n    a.sort()\n    cr = a[0]\n    crk = 0\n    for i in range(n):\n        if a[i] == cr:\n            k += crk\n            crk += 1\n        else:\n            crk = 1\n            cr = a[i]\n    print(k)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    di = dict()\n    for i in range(n):\n        k = arr[i] - i\n        if k in di:\n            count += di[k]\n            di[k] = di[k] + 1\n        else:\n            di[k] = 1\n    print(count)", "def sol(arr):\n    arr = [int(i) for i in arr]\n    counter = 0\n    delt = {}\n    for i in range(len(arr)):\n        if arr[i] - i not in delt.keys():\n            delt[arr[i] - i] = 1\n        else:\n            delt[arr[i] - i] += 1\n            counter += delt[arr[i] - i] - 1\n    print(counter)\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        arr = input().split()\n        sol(arr)\nmain()", "def solve():\n    n = int(input())\n    arr = [int(x) for x in input().strip().split()]\n    arr = [item - pos for (pos, item) in enumerate(arr, start=1)]\n    arr.sort()\n    arr.append(arr[0] - 1)\n    (total_pairs, first_item, item_count) = (0, arr[0], 1)\n    for item in arr[1:]:\n        if item == first_item:\n            item_count += 1\n            continue\n        total_pairs += (item_count - 1) * item_count // 2\n        (first_item, item_count) = (item, 1)\n    return total_pairs\nfor _ in range(int(input().strip())):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x1 = dict()\n    count = 0\n    for i in range(n):\n        z = arr[i] - i\n        if z in x1:\n            count += x1[z]\n            x1[z] += 1\n        else:\n            x1[z] = 1\n    print(count)", "n = int(input())\nfor i in range(n):\n    j = int(input())\n    l = list(map(int, input().split()))\n    dic = {}\n    for i in range(len(l)):\n        s = l[i] - i\n        if s in dic:\n            dic[s] += 1\n        else:\n            dic[s] = 1\n    d = 0\n    for i in list(dic.values()):\n        if i > 1:\n            d += i * (i - 1) // 2\n    print(d)", "from math import gcd\ninp = int(input())\nfor _ in range(inp):\n    n = int(input())\n    p = list(map(int, input().split(' ')))\n    d = {}\n    res = 0\n    for (i, v) in enumerate(p):\n        s = v - i\n        if s in d:\n            res += d[s]\n            d[s] = d[s] + 1\n        else:\n            d[s] = 1\n    print(res)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        res = 0\n        a_map = {}\n        for i in range(n):\n            a[i] -= i\n            if a[i] not in a_map:\n                a_map[a[i]] = 0\n            res += a_map[a[i]]\n            a_map[a[i]] += 1\n        print(res)\nmain()"]