["import sys\nii = 0\ninp = sys.stdin.read().split()\nout = []\nt = int(inp[ii])\nii += 1\nfor _ in range(t):\n    n = int(inp[ii])\n    ii += 1\n    q = int(inp[ii])\n    ii += 1\n    s = inp[ii]\n    ii += 1\n    a = 0\n    p = [0]\n    for (i, j) in enumerate(s):\n        a += 1 if (j == '+') ^ i & 1 else -1\n        p.append(a)\n    for _ in range(q):\n        l = int(inp[ii])\n        ii += 1\n        r = int(inp[ii])\n        ii += 1\n        a = p[r] - p[l - 1]\n        out.append('1' if a % 2 else '2' if a else '0')\nprint('\\n'.join(out))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, q) = map(int, input().split())\n    s = input()\n    pre_sum = [0]\n    sign = 1\n    for i in s:\n        if i == '+':\n            x = sign\n        else:\n            x = -sign\n        pre_sum.append(pre_sum[-1] + x)\n        sign *= -1\n    for qq in range(q):\n        (l, r) = map(int, input().split())\n        sum = pre_sum[r] - pre_sum[l - 1]\n        if sum == 0:\n            print(0)\n        elif sum & 1:\n            print(1)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    a = 0\n    p = [0]\n    for (i, j) in enumerate(s):\n        a += 1 if (j == '+') ^ i % 2 else -1\n        p.append(a)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        a = p[r] - p[l - 1]\n        print(1 if a % 2 else 2 if a else 0)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    rod = input()\n    dp = [0]\n    for (i, j) in enumerate(rod):\n        dp.append(dp[-1] + 1) if (j == '+') ^ (i % 2 == 0) else dp.append(dp[-1] - 1)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if dp[r] - dp[l - 1] == 0:\n            print(0)\n        elif (dp[r] - dp[l - 1]) % 2 == 1:\n            print(1)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = [i for i in input()]\n    for i in range(n):\n        if s[i] == '+':\n            s[i] = 1\n        else:\n            s[i] = -1\n    pre = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            pre[i] = pre[i - 1] + -1 * s[i - 1]\n        else:\n            pre[i] = pre[i - 1] + s[i - 1]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        if r - l & 1:\n            print(1)\n        elif pre[r] == pre[l]:\n            print(0)\n        else:\n            print(2)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    (s, a, y, z, o, r) = (input(), [], 1, [0], 0, '')\n    for i in s:\n        if i == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n        z += [z[-1] + a[-1]]\n    for i in range(q):\n        (c, v) = map(int, input().split())\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    a = 0\n    p = [0] * (n + 1)\n    for (i, j) in enumerate(s):\n        a += 1 if (j == '+') ^ i % 2 else -1\n        p[i + 1] = a\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        a = p[r] - p[l - 1]\n        print(1 if a % 2 else 2 if a else 0)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    pre_sum = [0]\n    x = 0\n    for (i, j) in enumerate(s):\n        x += 1 if i % 2 ^ (j == '+') else -1\n        pre_sum.append(x)\n    for qq in range(q):\n        (l, r) = map(int, input().split())\n        sum = pre_sum[r] - pre_sum[l - 1]\n        print(0 if sum == 0 else 1 if sum % 2 else 2)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, r) = (input(), [], 1, [0], 0, '')\n    for i in s:\n        if i == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n        z += [z[-1] + a[-1]]\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    rod = input()\n    dp = [0]\n    for (i, j) in enumerate(rod):\n        dp.append(dp[-1] + 1) if (j == '+') ^ (i % 2 == 0) else dp.append(dp[-1] - 1)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if dp[r] - dp[l - 1] == 0:\n            print(0)\n        elif (dp[r] - dp[l - 1]) % 2 == 1:\n            print(1)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    a = 0\n    p = [0]\n    for (i, j) in enumerate(s):\n        a += 1 if (j == '+') ^ i % 2 else -1\n        p.append(a)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        a = p[r] - p[l - 1]\n        print(1 if a % 2 else 2 if a else 0)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    (s, a, y, z, o, r) = (input(), [], 1, [0], 0, '')\n    for i in s:\n        a += [y] if i == '+' else [-1 * y]\n        y *= -1\n        z += [z[-1] + a[-1]]\n    for i in range(q):\n        (c, v) = map(int, input().split())\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = [i for i in input()]\n    for i in range(n):\n        if s[i] == '+':\n            s[i] = 1\n        else:\n            s[i] = -1\n    pre = [0] * (n + 1)\n    for i in range(n):\n        curr = 0\n        if i & 1:\n            curr = -1 * s[i]\n        else:\n            curr = s[i]\n        pre[i + 1] = pre[i] + curr\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        if r - l & 1:\n            print(1)\n        elif pre[r] == pre[l]:\n            print(0)\n        else:\n            print(2)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, r) = (input(), [], 1, [0], 0, '')\n    for i in s:\n        if i == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n        z += [z[-1] + a[-1]]\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "import sys, math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    pre = [0] * (n + 1)\n    for i in range(n):\n        if s[i] == '+' and i % 2 == 0 or (s[i] == '-' and i % 2 == 1):\n            pre[i + 1] = pre[i] + 1\n        else:\n            pre[i + 1] = pre[i] - 1\n    ans = []\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if (y - x + 1) % 2 == 1:\n            print(1)\n        elif pre[y] - pre[x - 1] == 0:\n            print(0)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = [i for i in input()]\n    for i in range(n):\n        if s[i] == '+':\n            s[i] = 1\n        else:\n            s[i] = -1\n    pre = [0] * (n + 1)\n    for i in range(n):\n        curr = 0\n        if i & 1:\n            curr = -1 * s[i]\n        else:\n            curr = s[i]\n        pre[i + 1] = pre[i] + curr\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        if r - l & 1:\n            print(1)\n        elif pre[r] == pre[l]:\n            print(0)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\npre = [0] * (3 * int(100000.0) + 5)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for (i, c) in enumerate(s):\n        base = 1 if i % 2 else -1\n        if c == '+':\n            pre[i + 1] = pre[i] + base\n        else:\n            pre[i + 1] = pre[i] - base\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if pre[r] - pre[l - 1] == 0:\n            print(0)\n        elif (r - l + 1) % 2 == 1:\n            print(1)\n        else:\n            print(2)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, r) = (input(), [], 1, [0], 0, '')\n    for i in range(n):\n        if s[i] == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n        z += [z[-1] + a[i]]\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, q) = int_arr()\n    st = input()\n    pref = [0]\n    lst = 0\n    for i in range(n):\n        if i % 2 == 0:\n            lst += 1 if st[i] == '+' else -1\n            pref.append(lst)\n        else:\n            lst += -1 if st[i] == '+' else 1\n            pref.append(lst)\n    for i in range(q):\n        (l, r) = int_arr()\n        if pref[r] - pref[l - 1] == 0:\n            print(0)\n        elif (r - l) % 2 == 0:\n            print(1)\n        else:\n            print(2)", "import sys\ninput = sys.stdin.readline\npre = [0] * (3 * int(100000.0) + 5)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    for (i, c) in enumerate(s):\n        base = 1 if i % 2 else -1\n        if c == '+':\n            pre[i + 1] = pre[i] + base\n        else:\n            pre[i + 1] = pre[i] - base\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if pre[r] - pre[l - 1] == 0:\n            print(0)\n        elif (r - l + 1) % 2 == 1:\n            print(1)\n        else:\n            print(2)", "answer = []\nfor i in range(int(input())):\n    (_, question_count) = map(int, input().split(' '))\n    sums = [0]\n    sign = 1\n    for charge in input():\n        change = sign if charge == '+' else -sign\n        sign *= -1\n        sums.append(sums[-1] + change)\n    for _ in range(question_count):\n        (mn, mx) = map(int, input().split(' '))\n        sm = sums[mx] - sums[mn - 1]\n        if sm == 0:\n            answer.append(0)\n        elif sm % 2:\n            answer.append(1)\n        else:\n            answer.append(2)\nfor i in answer:\n    print(i)", "from sys import stdin, setrecursionlimit, maxsize\nfrom collections import deque\nfrom heapq import *\nfrom math import sqrt, gcd\ninput = stdin.readline\nsetrecursionlimit(10 ** 5)\n\ndef get_sum(l, r):\n    if l > r:\n        return 0\n    return p[r] - p[l - 1] if l % 2 else p[l - 1] - p[r]\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input().strip()\n    a = [0] * (n + 1)\n    p = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = 1 if s[i - 1] == '+' else -1\n    for i in range(1, n + 1):\n        p[i] = p[i - 1] + (a[i] if i % 2 == 1 else -a[i])\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if get_sum(l, r) == 0:\n            print(0)\n            continue\n        if (r - l + 1) % 2 == 0:\n            print(2)\n        else:\n            print(1)", "import sys\nread = lambda : sys.stdin.readline()\nfor _ in range(int(read())):\n    (n, q) = map(int, read().split())\n    s = read()\n    s = s[:len(s) - 1]\n    pre = [0 for i in range(n + 1)]\n    val = {'+': 1, '-': -1}\n    for i in range(n):\n        if i % 2 == 0:\n            pre[i + 1] = pre[i] + val[s[i]]\n        else:\n            pre[i + 1] = pre[i] - val[s[i]]\n    for i in range(q):\n        (l, r) = map(int, read().split())\n        tot = -1 * (pre[r] - pre[l - 1]) if l % 2 == 0 else pre[r] - pre[l - 1]\n        if (r - l + 1) % 2 == 1:\n            print(1)\n            continue\n        elif tot == 0:\n            print(0)\n            continue\n        else:\n            print(2)\n            continue", "import itertools\nimport operator\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        (k, q) = [int(num_str) for num_str in input().split()[:2]]\n        seq = input()[:k]\n        questions = []\n        for qi in range(q):\n            questions.append(tuple((int(num_str) for num_str in input().split())))\n        solve(seq, questions)\n\ndef solve(seq, questions):\n    seq = [1 if s == '+' else -1 for s in seq]\n    seq = [elem if i % 2 == 0 else -elem for (i, elem) in enumerate(seq)]\n    cumsum = list(itertools.accumulate(seq, func=operator.add, initial=0))\n    for (l, r) in questions:\n        if (r - l + 1) % 2 == 1:\n            print(1)\n        elif cumsum[r] - cumsum[l - 1] == 0:\n            print(0)\n        else:\n            print(2)\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve(n, s, q, arr):\n    store = []\n    for (i, ele) in enumerate(s):\n        if ele == '+':\n            val = 1\n        else:\n            val = -1\n        if i % 2 == 1:\n            val *= -1\n        store.append(val)\n    final = [0]\n    final.extend(store)\n    for i in range(1, n + 1):\n        final[i] += final[i - 1]\n    for ele in arr:\n        left = ele[0]\n        right = ele[1]\n        if final[right] == final[left - 1]:\n            print(0)\n            continue\n        l = right - left + 1\n        if l % 2 == 1:\n            print(1)\n        else:\n            print(2)\nT = get_int()\nwhile T:\n    (n, q) = get_ints()\n    s = get_string()\n    tempQ = q\n    arr = []\n    while tempQ:\n        (li, ri) = get_ints()\n        arr.append([li, ri])\n        tempQ -= 1\n    solve(n, s, q, arr)\n    T -= 1", "test = int(input())\nfor _ in range(test):\n    (n, q) = map(int, input().split())\n    s = input()\n    sumi = 0\n    rangesumi = [0] * (n + 1)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '+'[0]:\n                sumi += 1\n            else:\n                sumi -= 1\n        elif s[i] == '+'[0]:\n            sumi -= 1\n        else:\n            sumi += 1\n        rangesumi[i + 1] = sumi\n    ans = ''\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        sumi = rangesumi[r] - rangesumi[l - 1]\n        if sumi == 0:\n            ans += '0'\n        elif (r - l + 1) % 2 == 1:\n            ans += '1'\n        else:\n            ans += '2'\n    for i in ans:\n        print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    rod = input()\n    dp = [0]\n    for (i, j) in enumerate(rod):\n        if (j == '+') ^ (i % 2 == 0):\n            dp.append(dp[-1] + 1)\n        else:\n            dp.append(dp[-1] - 1)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if dp[r] - dp[l - 1] == 0:\n            print(0)\n        elif (dp[r] - dp[l - 1]) % 2 == 1:\n            print(1)\n        else:\n            print(2)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, p, r) = (input(), [], 1, {0: (0, 0)}, 0, 0, '')\n    for i in range(n):\n        if s[i] == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n    for i in range(1, n + 1):\n        if a[i - 1] == 1:\n            o += 1\n        else:\n            p += 1\n        z[i] = (o, p)\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v][0] - z[c - 1][0] - z[v][1] + z[c - 1][1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, p, r) = (input(), [], 1, {0: (0, 0)}, 0, 0, '')\n    for i in range(n):\n        if s[i] == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n    for i in range(1, n + 1):\n        if a[i - 1] == 1:\n            o += 1\n        else:\n            p += 1\n        z[i] = (o, p)\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v][0] - z[c - 1][0] - z[v][1] + z[c - 1][1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    a = []\n    y = 1\n    z = [0]\n    o = 0\n    r = ''\n    for i in s:\n        a += [y] if i == '+' else [-1 * y]\n        y *= -1\n        z += [z[-1] + a[-1]]\n    for i in range(q):\n        (c, v) = map(int, input().split())\n        w = abs(z[v] - z[c - 1])\n        r += str(w if w == 0 else 1 if w % 2 else 2)\n    for i in r:\n        print(i)", "I = lambda : map(int, input().split())\n(k,) = I()\nfor i in range(k):\n    (n, q) = I()\n    (s, a, y, z, o, p, r) = (input(), [], 1, {0: (0, 0)}, 0, 0, '')\n    for i in range(n):\n        if s[i] == '+':\n            a += [y]\n        else:\n            a += [-1 * y]\n        y *= -1\n    for i in range(1, n + 1):\n        if a[i - 1] == 1:\n            o += 1\n        else:\n            p += 1\n        z[i] = (o, p)\n    for i in range(q):\n        (c, v) = I()\n        w = abs(z[v][0] - z[c - 1][0] - z[v][1] + z[c - 1][1])\n        r += str(w if w == 0 else 1 if w % 2 else 2) + '\\n'\n    print(r)", "n = int(input())\ni = 0\nlo = []\n\ndef C(Q):\n    w = r = 0\n    at = [0]\n    while w < len(Q):\n        if Q[w] == '+':\n            r = r + 1 - 2 * (w % 2)\n        else:\n            r = r - 1 + 2 * (w % 2)\n        at.append(r)\n        w += 1\n    return at\nwhile i < n:\n    i1 = input().split()\n    Q = input()\n    sp = C(Q)\n    u = 0\n    while u < int(i1[1]):\n        Z = list(map(int, input().split()))\n        z1 = Z[0]\n        z2 = Z[1]\n        s = sp[z2] - sp[z1 - 1]\n        if s == 0:\n            d = 0\n        else:\n            d = 2 - s % 2\n        lo.append(d)\n        u += 1\n    i += 1\ni = 0\nwhile i < len(lo):\n    print(lo[i])\n    i += 1", "import sys\nfrom heapq import heappush, heappop, heapify\nfrom math import ceil\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(get_ints())\n\ndef input():\n    return sys.stdin.readline().strip()\nT = int(input())\nwhile T > 0:\n    (n, q) = get_ints()\n    s = input()\n    Arr = []\n    for i in s:\n        if i == '+':\n            Arr.append(1)\n        else:\n            Arr.append(-1)\n    for i in range(n):\n        if i & 1:\n            Arr[i] *= -1\n    pos = [0] * n\n    neg = [0] * n\n    if Arr[0] == -1:\n        neg[0] = 1\n    else:\n        pos[0] = 1\n    for i in range(1, n):\n        if Arr[i] == 1:\n            pos[i] = pos[i - 1] + 1\n            neg[i] = neg[i - 1]\n        else:\n            neg[i] = neg[i - 1] + 1\n            pos[i] = pos[i - 1]\n    while q > 0:\n        (l, r) = get_ints()\n        l -= 1\n        r -= 1\n        plus = 0\n        minus = 0\n        if l == 0:\n            plus = pos[r]\n            minus = neg[r]\n        else:\n            plus = pos[r] - pos[l - 1]\n            minus = neg[r] - neg[l - 1]\n        if abs(plus - minus) == 0:\n            print(0)\n        elif abs(plus - minus) & 1:\n            print(1)\n        else:\n            print(2)\n        q -= 1\n    T -= 1", "from sys import stdin\ninput = stdin.readline\n\ndef f(s):\n    s = list(s)\n    d = {'+': 1, '-': -1}\n    d2 = {1: '+', -1: '-'}\n    d3 = {'+': 0, '-': 1}\n    pref = []\n    for i in range(len(s)):\n        pp = d2[d[s[i]] * pow(-1, i)]\n        if i == 0:\n            ll = [0, 0]\n            ll[d3[pp]] += 1\n            pref.append(ll)\n        else:\n            ll = pref[-1].copy()\n            ll[d3[pp]] += 1\n            pref.append(ll)\n    return pref\nfor t in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    s = input().strip()\n    pref = f(s)\n    for i in range(m):\n        (l, r) = map(int, input().strip().split())\n        l -= 1\n        r -= 1\n        ll = r - l + 1\n        lr = [0, 0]\n        if l != 0:\n            lr = pref[l - 1]\n        rr = pref[r]\n        cp = rr[0] - lr[0]\n        cp2 = rr[1] - lr[1]\n        if cp == cp2:\n            print(0)\n        elif ll % 2 == 0:\n            print(2)\n        else:\n            print(1)", "from sys import stdin\ninput = stdin.readline\n\ndef f(s):\n    s = list(s)\n    d = {'+': 1, '-': -1}\n    d2 = {1: '+', -1: '-'}\n    d3 = {'+': 0, '-': 1}\n    t = 0\n    res = ''\n    for i in range(len(s)):\n        t += d[s[i]] * pow(-1, i)\n        res += d2[d[s[i]] * pow(-1, i)]\n    pref = []\n    for i in range(len(res)):\n        if i == 0:\n            ll = [0, 0]\n            ll[d3[res[i]]] += 1\n            pref.append(ll)\n        else:\n            ll = pref[-1].copy()\n            ll[d3[res[i]]] += 1\n            pref.append(ll)\n    return pref\nfor t in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    s = input().strip()\n    pref = f(s)\n    for i in range(m):\n        (l, r) = map(int, input().strip().split())\n        l -= 1\n        r -= 1\n        ll = r - l + 1\n        lr = [0, 0]\n        if l != 0:\n            lr = pref[l - 1]\n        rr = pref[r]\n        cp = rr[0] - lr[0]\n        cp2 = rr[1] - lr[1]\n        if cp == cp2:\n            print(0)\n        elif ll % 2 == 0:\n            print(2)\n        else:\n            print(1)"]