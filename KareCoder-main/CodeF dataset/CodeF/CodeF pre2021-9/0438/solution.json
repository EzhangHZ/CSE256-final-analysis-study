["from collections import Counter\n\ndef main():\n    return '\\n'.join(map(str, (nCharactersToEraseFrom(input()) for _ in range(int(input())))))\n\ndef nCharactersToEraseFrom(string):\n    repetition = Counter(string)\n    longestLength1 = repetition.most_common(1)[0][1]\n    halfLength = longestLength1 // 2\n    letters = tuple(set(string))\n    if len(letters) > 1:\n        longestLength2 = longestLength1\n        for i in range(len(letters) - 1):\n            if repetition[letters[i]] > halfLength:\n                for j in range(i + 1, len(letters)):\n                    if repetition[letters[j]] > halfLength:\n                        l = goodStringLengthFrom(string, {letters[i], letters[j]})\n                        if l > longestLength2:\n                            longestLength2 = l\n        if longestLength2 != longestLength1:\n            return len(string) - (longestLength2 - 1 if longestLength2 % 2 else longestLength2)\n    return len(string) - longestLength1\n\ndef goodStringLengthFrom(string, pairOfLetters):\n    currLetter = 0\n    length = 0\n    for l in string:\n        if l in pairOfLetters and l != currLetter:\n            currLetter = l\n            length += 1\n    return length\nprint(main())", "for _ in range(int(input())):\n    s = input().strip()\n    c = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            c[d][p] = c[p][d] + 1\n    print(len(s) - max(max([max(k) for k in c]) // 2 * 2, max([c[i][i] for i in range(10)])))", "def solve():\n    s = input()\n    n = len(s)\n    dic = {}\n    occ = {}\n    for i in range(0, n):\n        if s[i] not in dic:\n            dic[s[i]] = [i]\n            occ[s[i]] = 1\n        else:\n            dic[s[i]].append(i)\n            occ[s[i]] += 1\n    dic2 = {}\n    maxx = 2\n    for d in dic:\n        others = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n        maxx_others = 0\n        if len(dic[d]) <= 1:\n            continue\n        for i in range(len(dic[d])):\n            st = dic[d][i]\n            if i + 1 < len(dic[d]):\n                end = dic[d][i + 1]\n                sets = set(s[st + 1:end])\n                for i in sets:\n                    others[i] += 1\n                    maxx_others = max(maxx_others, others[i])\n            elif i + 1 == len(dic[d]):\n                end = n\n                sets = set(s[st + 1:end])\n                for i in sets:\n                    others[i] += 1\n                    maxx_others = max(maxx_others, others[i])\n        maxx1 = max(occ[d], maxx_others * 2)\n        maxx = max(maxx1, maxx)\n    print(n - maxx)\nt = int(input())\nfor i in range(t):\n    solve()", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "for i in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "for i in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "for _ in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "for i in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "for i in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "from collections import Counter\nimport sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    aa = [int(c) for c in SI()]\n    ac = Counter(aa)\n    ans = max(ac.values())\n    for f in range(10):\n        pi = -1\n        cnt = [0] * 10\n        ppi = [-1] * 10\n        for (i, a) in enumerate(aa):\n            if a == f:\n                pi = i\n            elif ppi[a] != pi:\n                cnt[a] += 1\n                ppi[a] = pi\n        ans = max(ans, max(cnt) * 2)\n    print(len(aa) - ans)", "for i in range(int(input())):\n    s = input()\n    count = [[0 for i in range(10)] for i in range(10)]\n    for i in s:\n        d = int(i)\n        for p in range(10):\n            count[d][p] = count[p][d] + 1\n    print(len(s) - max(max([max(i) for i in count]) // 2 * 2, max([count[i][i] for i in range(10)])))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, max(a[::11])))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "for t in [*open(0)][1:]:\n    g = [0] * 100\n    for i in map(int, t[:-1]):\n        for j in range(10):\n            g[10 * i + j] = g[10 * j + i] + 1\n    print(len(t) - 1 - max(max(g) & ~1, max(g[::11])))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "for z in [*open(0)][1:]:\n    kj = [0] * 100\n    for i in map(int, z[:-1]):\n        for j in range(10):\n            kj[10 * i + j] = kj[10 * j + i] + 1\n    print(len(z) - 1 - max(max(kj) & ~1, *kj[::11]))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    i = 0\n    for j in map(int, s[:-1]):\n        for k in range(10):\n            a[10 * j + k] = a[10 * k + j] + 1\n        i += 1\n    print(i - max(max(a) & ~1, max(a[::11])))", "for k in [*open(0)][1:]:\n    p = [0] * 100\n    for i in map(int, k[:-1]):\n        for j in range(10):\n            p[10 * i + j] = p[10 * j + i] + 1\n    print(len(k) - 1 - max(max(p) & ~1, max(p[::11])))", "for m in [*open(0)][1:]:\n    kj = [0] * 100\n    for i in map(int, m[:-1]):\n        for j in range(10):\n            kj[10 * i + j] = kj[10 * j + i] + 1\n    print(len(m) - 1 - max(max(kj) & ~1, *kj[::11]))", "for z in [*open(0)][1:]:\n    kj = [0] * 100\n    for i in map(int, z[:-1]):\n        for j in range(10):\n            kj[10 * i + j] = kj[10 * j + i] + 1\n    print(len(z) - 1 - max(max(kj) & ~1, *kj[::11]))", "for s in [*open(0)][1:]:\n    a = [0] * 100\n    for i in map(int, s[:-1]):\n        for j in range(10):\n            a[10 * i + j] = a[10 * j + i] + 1\n    print(len(s) - 1 - max(max(a) & ~1, *a[::11]))", "import collections\n\ndef solve(s, i, j):\n    b = True\n    u = 0\n    for x in s:\n        if b and x == i:\n            b = False\n            u += 1\n        elif not b and x == j:\n            b = True\n            u += 1\n    if not b:\n        u -= 1\n    return u\nfor _ in range(int(input())):\n    s = list(map(int, input()))\n    u = collections.Counter(s).most_common(1)[0][1]\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                continue\n            u = max(u, solve(s, i, j))\n    print(len(s) - u)", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    m = n\n\n    def check(x, y):\n        res = 0\n        for k in s:\n            if k == x:\n                res += 1\n                (x, y) = (y, x)\n        if res % 2 != 0:\n            res -= 1\n        return res\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                m = min(n - s.count(str(i)), m)\n            else:\n                r = check(str(i), str(j))\n                m = min(n - r, m)\n    print(m)", "def fun(s, a, b):\n    ct = 0\n    for i in s:\n        if i == a:\n            (a, b) = (b, a)\n            ct += 1\n    if ct % 2 != 0:\n        return ct - 1\n    return ct\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {}\n    maxi = 0\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                x = s.count(str(i))\n            else:\n                x = fun(s, str(i), str(j))\n            if maxi < x:\n                maxi = x\n    print(n - maxi)", "def count_alternation(s, a, b):\n    n = len(s)\n    for i in range(n):\n        if s[i] == a:\n            break\n        if s[i] == b:\n            (a, b) = (b, a)\n            break\n    i1 = 0\n    for i in range(n)[::-1]:\n        if s[i] == b:\n            i1 = i\n            break\n    flip = {a: b, b: a}\n    which = a\n    count = 0\n    for i in range(i1 + 1):\n        if s[i] == which:\n            if which == b:\n                count += 1\n            which = flip[which]\n    return 2 * count\n\ndef solve(s):\n    s = [ord(c) - ord('0') for c in s]\n    k = 10\n    n = len(s)\n    counts = [0] * k\n    for i in range(n):\n        counts[s[i]] += 1\n    result = max(counts)\n    for a in range(k):\n        for b in range(a + 1, k):\n            if counts[a] == 0 or counts[b] == 0:\n                continue\n            result = max(result, count_alternation(s, a, b))\n    return n - result\n\ndef main(istr, ostr):\n    t = int(istr.readline())\n    for _ in range(t):\n        s = istr.readline().strip()\n        result = solve(s)\n        print(result, file=ostr)\nimport sys\nmain(sys.stdin, sys.stdout)", "T = int(input())\n\ndef f(x, y, a):\n    correct = 0\n    for c in a:\n        if c == x:\n            correct += 1\n            (x, y) = (y, x)\n    if x != y and correct % 2 == 1:\n        correct -= 1\n    return correct\nwhile T:\n    s = input()\n    array = [int(x) for x in s]\n    ans = 0\n    for x in range(10):\n        for y in range(10):\n            ans = max(ans, f(x, y, array))\n    print(len(s) - ans)\n    T = T - 1", "def get(s, a, b):\n    c = 0\n    for i in s:\n        if i == a:\n            (a, b) = (b, a)\n            c += 1\n    if c % 2 != 0:\n        c -= 1\n    return c\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    maxi = 0\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                x = s.count(str(i))\n            else:\n                x = get(s, str(i), str(j))\n            maxi = max(maxi, x)\n    print(n - maxi)", "from collections import Counter\n\ndef get(s, a, b):\n    c = 0\n    for i in s:\n        if i == a:\n            (a, b) = (b, a)\n            c += 1\n    if c % 2 != 0:\n        c -= 1\n    return c\nfor _ in range(int(input())):\n    s = list(input())\n    l = len(s)\n    maxx = -1\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                x = s.count(str(i))\n            else:\n                x = get(s, str(i), str(j))\n            maxx = max(maxx, x)\n    print(l - maxx)", "def comb(a, x, y):\n    flag = True\n    count = 0\n    for ele in a:\n        if flag:\n            if ele == x:\n                flag = False\n        elif ele == y:\n            count += 1\n            flag = True\n    return len(a) - 2 * count\nT = int(input())\nfor case in range(T):\n    a = input()\n    ans = float('inf')\n    for i in range(0, 10):\n        for j in range(0, 10):\n            if i == j:\n                continue\n            else:\n                ans = min(ans, comb(a, str(i), str(j)))\n    for i in range(10):\n        count = a.count(str(i))\n        ans = min(ans, len(a) - count)\n    print(ans)", "def solve_util(s, x, y):\n    res = 0\n    for c in s:\n        if c == x:\n            res += 1\n            (x, y) = (y, x)\n    if x != y and res % 2 == 1:\n        return res - 1\n    return res\n\ndef solve(s):\n    ans = 0\n    a = [str(i) for i in range(10)]\n    for x in a:\n        for y in a:\n            ans = max(ans, solve_util(s, x, y))\n    return ans\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        s = input()\n        ans = solve(s)\n        print(len(s) - ans)\nread()", "def solve(s, i, j):\n    b = True\n    u = 0\n    for x in s:\n        if b and x == i:\n            b = False\n            u += 1\n        elif not b and x == j:\n            b = True\n            u += 1\n    if not b and i != j:\n        u -= 1\n    return u\nfor _ in range(int(input())):\n    s = list(map(int, input()))\n    print(len(s) - max((solve(s, i, j) for i in range(10) for j in range(10))))", "def func(a, x, y):\n    res = 0\n    for c in a:\n        if c == x:\n            res += 1\n            temp = x\n            x = y\n            y = temp\n    if x != y and res % 2 == 1:\n        res -= 1\n    return res\nfor _ in range(int(input())):\n    a = [int(x) for x in input()]\n    ans = 0\n    for x in range(10):\n        for y in range(10):\n            ans = max(ans, func(a, x, y))\n    print(len(a) - ans)", "def solve():\n    s = input()\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            (x, y) = (str(i), str(j))\n            l = 0\n            for ch in s:\n                if ch == x:\n                    l += 1\n                    (x, y) = (y, x)\n            if l % 2 != 0 and x != y:\n                l -= 1\n            ans = max(ans, l)\n    print(len(s) - ans)\nfor case in range(int(input())):\n    solve()", "def solve(l, i, j):\n    ans = 0\n    for x in l:\n        if x == i:\n            ans += 1\n            (i, j) = (j, i)\n    if i != j and ans % 2 == 1:\n        ans -= 1\n    return ans\nfor _ in range(int(input())):\n    l = input()\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans = max(ans, solve(l, str(i), str(j)))\n    print(len(l) - ans)", "def count_maximum_length(string: str, i: str, j: str) -> int:\n    last = None\n    collection = (i, j)\n    result = 0\n    for char in string:\n        if last is None:\n            if char in collection:\n                first = char\n                last = collection.index(char)\n                result += 1\n            continue\n        if char == collection[1 - last]:\n            last = 1 - last\n            result += 1\n    if first == collection[last] and i != j:\n        result -= 1\n    return result\n\ndef solve() -> int:\n    string = input()\n    characters = tuple(set(string))\n    result = []\n    for i in range(len(characters)):\n        for j in range(i, len(characters)):\n            mlen = count_maximum_length(string, characters[i], characters[j])\n            result.append(mlen)\n    return len(string) - max(result)\nprint('\\n'.join(map(str, (solve() for _ in range(int(input()))))))", "def find(s, a, b):\n    ans = 0\n    for c in s:\n        if a == c:\n            (a, b) = (b, a)\n            ans += 1\n    if a != b and ans % 2 == 1:\n        ans -= 1\n    return ans\n\ndef slove():\n    s = input()\n    ans = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            ans = max(ans, find(s, str(i), str(j)))\n    print(len(s) - ans)\n\ndef main():\n    t = int(input())\n    while t > 0:\n        slove()\n        t -= 1\nmain()", "t = int(input())\n\ndef find(s, i, j):\n    res = 0\n    for ch in s:\n        if ch == i:\n            res += 1\n            (i, j) = (j, i)\n    if i != j and res % 2 == 1:\n        res -= 1\n    return res\nfor _ in range(t):\n    s = input()\n    correct = 0\n    for i in range(10):\n        for j in range(10):\n            correct = max(correct, find(s, str(i), str(j)))\n    print(len(s) - correct)", "import math\n\ndef f(a, b):\n    a = str(a)\n    b = str(b)\n    r = 0\n    for e in s:\n        if e == a:\n            r += 1\n            (a, b) = (b, a)\n    if r % 2 != 0 and a != b:\n        r -= 1\n    return r\ntest = int(input())\nfor k in range(test):\n    s = input()\n    (m, a) = (0, 0)\n    for i in range(10):\n        for j in range(10):\n            t = f(i, j)\n            a = max(a, t)\n    print(abs(a - len(s)))", "def list_input():\n    return list(map(int, input().split()))\n\ndef multiple_input():\n    return map(int, input().split())\n\ndef solve(a, b):\n    res = 0\n    for it in s:\n        if it == a:\n            res += 1\n            (a, b) = (b, a)\n    if res % 2 != 0 and a != b:\n        res -= 1\n    return res\nfor _ in range(int(input())):\n    s = input()\n    m = 0\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans = max(ans, solve(str(i), str(j)))\n    print(len(s) - ans)", "def solver(a, b):\n    result = 0\n    for elem in s:\n        if elem == a:\n            result += 1\n            (a, b) = (b, a)\n    if result % 2 != 0 and a != b:\n        result -= 1\n    return result\nfor _ in range(int(input())):\n    s = input()\n    (m, answer) = (0, 0)\n    for i in range(10):\n        for j in range(10):\n            answer = max(answer, solver(str(i), str(j)))\n    print(len(s) - answer)", "for s in [*open(0)][1:]:\n    a = [0] * 10\n    b = [0] * 10\n    c = [0] * 100\n    i = 0\n    for x in map(int, s[:-1]):\n        for j in range(10):\n            c[10 * j + x] += (a[j] > a[x]) * 2\n        i += 1\n        a[x] = i\n        b[x] += 1\n    print(i - max(b + c))", "for s in [*open(0)][1:]:\n    a = [0] * 10\n    b = [0] * 10\n    c = [0] * 100\n    i = 0\n    for x in map(int, s[:-1]):\n        for j in range(10):\n            c[10 * j + x] += (a[j] > a[x]) * 2\n        i += 1\n        a[x] = i\n        b[x] += 1\n    print(i - max(b + c))", "t = int(input())\n\ndef find(s, i, j):\n    res = 0\n    for ch in s:\n        if ch == i:\n            res += 1\n            (i, j) = (j, i)\n    if i != j and res % 2 == 1:\n        res -= 1\n    return res\nfor _ in range(t):\n    s = input()\n    correct = 0\n    for i in range(10):\n        for j in range(10):\n            correct = max(correct, find(s, str(i), str(j)))\n    print(len(s) - correct)", "from collections import Counter\n\ndef main():\n    return '\\n'.join(map(str, (nCharactersToEraseFrom(input()) for _ in range(int(input())))))\n\ndef nCharactersToEraseFrom(string):\n    repetition = Counter(string)\n    longestLength1 = repetition.most_common(1)[0][1]\n    halfLength = longestLength1 // 2\n    letters = tuple(set(string))\n    if len(letters) > 1:\n        longestLength2 = longestLength1\n        for i in range(len(letters) - 1):\n            if repetition[letters[i]] > halfLength:\n                for j in range(i + 1, len(letters)):\n                    if repetition[letters[j]] > halfLength:\n                        l = goodStringLengthFrom(string, {letters[i], letters[j]})\n                        if l > longestLength2:\n                            longestLength2 = l\n        if longestLength2 != longestLength1:\n            return len(string) - (longestLength2 - 1 if longestLength2 % 2 else longestLength2)\n    return len(string) - longestLength1\n\ndef goodStringLengthFrom(string, pairOfLetters):\n    currLetter = [0]\n    return sum((1 for l in string if isElement(l, pairOfLetters, currLetter)))\n\ndef isElement(letter, letters, currLetter):\n    if letter in letters and letter != currLetter[0]:\n        currLetter[0] = letter\n        return True\nprint(main())", "def searchPattern(s, a, b):\n    check = 0\n    count = 0\n    for letter in s:\n        if not check and letter == a:\n            count += 1\n            check = 1\n        elif check and letter == b:\n            count += 1\n            check = 0\n    if a != b and count % 2 == 1:\n        count -= 1\n    return count\n\ndef minDeletes(s):\n    maxCount = 0\n    sSet = set()\n    for c in s:\n        sSet.add(c)\n    for i in sSet:\n        for j in sSet:\n            maxCount = max(maxCount, searchPattern(s, i, j))\n    return len(s) - maxCount\ntests = int(input())\nwhile tests:\n    s = input()\n    print(minDeletes(s))\n    tests -= 1", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    auxmatriz = Counter(s).most_common()\n    x = auxmatriz[0][1]\n    y = auxmatriz[0][1]\n    matriz = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n    for i in range(9):\n        matriz.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    for i in s:\n        num = int(i)\n        for z in range(10):\n            if num > z:\n                if matriz[z][num] == 1 or (matriz[z][num] == 0 and matriz[num][z] == 0):\n                    matriz[z][num] = 0\n                    matriz[num][z] += 1\n                    if matriz[num][z] > y:\n                        y = matriz[num][z]\n            elif num < z:\n                if matriz[num][z] == 0:\n                    matriz[num][z] = 1\n                    matriz[z][num] += 1\n                    if matriz[z][num] > y:\n                        y = matriz[z][num]\n    if y % 2 == 1:\n        y -= 1\n    if x > y:\n        print(len(s) - x)\n    else:\n        print(len(s) - y)", "def searchPattern(s, a, b):\n    check = 0\n    count = 0\n    for letter in s:\n        if not check and letter == a:\n            count += 1\n            check = 1\n        elif check and letter == b:\n            count += 1\n            check = 0\n    if a != b and count % 2 == 1:\n        count -= 1\n    return count\n\ndef minDeletes(s):\n    maxCount = 0\n    sSet = set()\n    for c in s:\n        sSet.add(c)\n    for i in sSet:\n        for j in sSet:\n            maxCount = max(maxCount, searchPattern(s, i, j))\n    return len(s) - maxCount\ntests = int(input())\nwhile tests:\n    s = input()\n    print(minDeletes(s))\n    tests -= 1", "from sys import stdin, exit, setrecursionlimit\nfrom collections import deque\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nfor _ in range(int(input())):\n    s = list(map(int, list(si())))\n    freq = [0 for i in range(10)]\n    alt = [[0 for j in range(10)] for i in range(10)]\n    vis = [[True for j in range(10)] for i in range(10)]\n    for i in s:\n        freq[i] += 1\n        for j in range(10):\n            if j != i:\n                vis[i][j] = False\n        for j in range(10):\n            if not vis[j][i]:\n                vis[j][i] = True\n                alt[j][i] += 1\n    mx = 0\n    for i in alt:\n        mx = max(max(i), mx)\n    freq.sort()\n    ans = freq[-1]\n    print(len(s) - max(mx * 2, ans))", "for s in [*open(0)][1:]:\n    a = [0] * 10\n    b = [0] * 100\n    i = 0\n    for j in map(int, s[:-1]):\n        for k in range(10):\n            b[10 * j + k] += k == j or (a[k] > a[j]) * 2\n        i += 1\n        a[j] = i\n    print(i - max(b))", "for s in [*open(0)][1:]:\n    a = [0] * 10\n    b = [0] * 100\n    i = 0\n    for j in map(int, s[:-1]):\n        for k in range(10):\n            b[10 * k + j] += k == j or (a[k] > a[j]) * 2\n        i += 1\n        a[j] = i\n    print(i - max(b))", "for i in range(int(input())):\n    a = list(map(int, input()))\n    z = len(a) + 1\n    a1 = [0] * 10\n    a2 = [z] * 10\n    a3 = list(range(10))\n    for (j, x) in enumerate(a):\n        a1[x] += 1\n        if a2[x] == z:\n            a2[x] = j\n    a4 = [x[0] for x in sorted(zip(a3, a2), key=lambda q: q[1])]\n    b = [[0 for y in range(10)] for x in range(10)]\n    for j in range(10):\n        for k in range(j + 1, 10):\n            j1 = a4[j]\n            k1 = a4[k]\n            v = True\n            c = 0\n            for x in a:\n                if v and x == j1:\n                    v = False\n                    c += 1\n                elif not v and x == k1:\n                    v = True\n                    c += 1\n            b[j1][k1] = c\n    b1 = max(map(max, b))\n    b1 -= b1 % 2\n    print(len(a) - max(max(a1), b1))", "def solution(S):\n    counter = [[0] * 10 for _ in range(10)]\n    expect_smaller = [[True] * 10 for _ in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if i > j:\n                expect_smaller[i][j] = False\n    for s in S:\n        sc = int(s)\n        for i in range(sc):\n            if expect_smaller[i][sc]:\n                expect_smaller[i][sc] = not expect_smaller[i][sc]\n                counter[i][sc] += 1\n            if expect_smaller[sc][i]:\n                expect_smaller[sc][i] = not expect_smaller[sc][i]\n                counter[sc][i] += 1\n        counter[sc][sc] += 1\n        for i in range(sc + 1, 10):\n            if not expect_smaller[i][sc]:\n                expect_smaller[i][sc] = not expect_smaller[i][sc]\n                counter[i][sc] += 1\n            if not expect_smaller[sc][i]:\n                expect_smaller[sc][i] = not expect_smaller[sc][i]\n                counter[sc][i] += 1\n    (mi, mj, m) = (0, 0, 0)\n    for i in range(10):\n        for j in range(10):\n            val = counter[i][j]\n            if i != j and val % 2 == 1:\n                val -= 1\n            if val > m:\n                (mi, mj, m) = (i, j, val)\n    return len(S) - m\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(solution(s))", "from collections import Counter\nfor nt in range(int(input())):\n    s = list(input())\n    n = len(s)\n    c = Counter(s)\n    m = 0\n    for i in c:\n        m = max(m, c[i])\n    ans = min(n - 2, n - m)\n    count = {}\n    numbers = '0123456789'\n    for i in numbers:\n        flag = False\n        for j in range(n):\n            if s[j] == i:\n                found = {}\n                flag = True\n            elif flag:\n                if s[j] not in found:\n                    found[s[j]] = 1\n                    if i + s[j] not in count:\n                        count[i + s[j]] = 1\n                    else:\n                        count[i + s[j]] += 1\n    m = 0\n    for i in count:\n        m = max(m, count[i])\n    print(min(ans, n - 2 * m, n - 2))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    l = [[0 for i in range(10)] for i in range(10)]\n    d = {}\n    d = [0 for i in range(10)]\n    boolar = [[False for i in range(10)] for i in range(10)]\n    for i in s:\n        d[int(i)] += 1\n        x = int(i)\n        for j in range(10):\n            if boolar[j][x]:\n                l[j][x] += 1\n                boolar[j][x] = False\n            if x != j:\n                boolar[x][j] = True\n    m = 0\n    for i in range(10):\n        for j in range(10):\n            m = max(m, l[i][j])\n    a = len(s) - 2 * m\n    b = len(s) - max(d)\n    if max(d) == len(s):\n        print(0)\n    else:\n        print(min(a, b))", "def yark(a, i, j):\n    z = 0\n    p = str(i)\n    f = p\n    for k in a:\n        if k == f:\n            z += 1\n            f = p if f != p else str(j)\n    if i != j and z & 1:\n        z -= 1\n    return z\nfor t in range(int(input())):\n    a = input()\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans = max(ans, yark(a, i, j))\n    print(len(a) - ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    ar = list(map(int, list(input())))\n    n = len(ar)\n    cntr = Counter(ar)\n    Set = list(cntr.keys())\n    if len(cntr) == 1:\n        print(0)\n    elif len(cntr) == n:\n        print(n - 2)\n    else:\n        checkAr = [[-1 for i in range(10)] for j in range(10)]\n        countAr = [[0 for i in range(10)] for j in range(10)]\n        mx = max(cntr.values())\n        for idx in range(n):\n            if idx > 0 and ar[idx] == ar[idx - 1]:\n                continue\n            char = ar[idx]\n            for i in Set:\n                if char > i:\n                    if checkAr[char][i] != char:\n                        checkAr[char][i] = char\n                        countAr[char][i] += 1\n                        mx = max(countAr[char][i], mx)\n                elif checkAr[i][char] != char:\n                    checkAr[i][char] = char\n                    countAr[i][char] += 1\n                    mx = max(countAr[i][char], mx)\n        if mx != max(cntr.values()) and mx % 2 == 1:\n            mx = mx - 1\n        output = n - mx\n        print(output)", "from collections import Counter\nn = int(input())\nfor _ in range(n):\n    s = input()\n    c = Counter(s).most_common()\n    a = c[0][1]\n    m = c[0][1]\n    arr = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n    for i in range(9):\n        arr.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    for i in s:\n        p = int(i)\n        for j in range(10):\n            if p > j:\n                if arr[j][p] == 1 or (arr[j][p] == 0 and arr[p][j] == 0):\n                    arr[j][p] = 0\n                    arr[p][j] += 1\n                    if arr[p][j] > m:\n                        m = arr[p][j]\n            elif p < j:\n                if arr[p][j] == 0:\n                    arr[p][j] = 1\n                    arr[j][p] += 1\n                    if arr[j][p] > m:\n                        m = arr[j][p]\n    if m % 2 == 1:\n        m -= 1\n    if a > m:\n        print(len(s) - a)\n    else:\n        print(len(s) - m)", "t = int(input())\n\ndef max_len(two, num):\n    two = str(two)\n    if len(two) == 1:\n        two = '0' + two\n    lenth = 0\n    to_check = 0\n    for i in num:\n        if i == two[to_check]:\n            to_check = (to_check + 1) % 2\n            lenth += 1\n    if lenth % 2 == 0:\n        return lenth\n    return lenth - 1\n\ndef solve():\n    num = input()\n    freq = {}\n    for i in num:\n        freq[i] = freq.get(i, 0) + 1\n    maxx = max(freq.values())\n    can = maxx\n    for i in range(100):\n        can = max(can, max_len(i, num))\n    print(len(num) - can)\nwhile t:\n    solve()\n    t -= 1", "import collections\n\ndef checker(x, y):\n    x = str(x)\n    y = str(y)\n    flag = 0\n    count = 0\n    for char in s:\n        if flag == 0:\n            if char == x:\n                count += 1\n                flag = 1\n        elif flag == 1:\n            if char == y:\n                count += 1\n                flag = 0\n    if count % 2 == 0:\n        return count\n    return count - 1\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    dic = collections.Counter(s)\n    max_length = 0\n    for i in range(10):\n        for j in range(10):\n            if i == j and str(i) in dic:\n                max_length = max(max_length, dic[str(i)])\n            elif str(i) in dic and str(j) in dic and (dic[str(i)] + dic[str(j)] > max_length):\n                max_length = max(max_length, checker(i, j))\n    print(n - max_length)", "def func(i, j, s):\n    p = [i, j]\n    need = 0\n    count = 0\n    for k in s:\n        if k == p[need]:\n            count += 1\n            need ^= 1\n    if i != j and count % 2 == 1:\n        count -= 1\n    return count\nfor _ in range(int(input())):\n    s = input()\n    ans = 2\n    for i in range(10):\n        for j in range(10):\n            ans = max(ans, func(str(i), str(j), s))\n    print(len(s) - ans)", "from collections import Counter\n\ndef main():\n    return '\\n'.join(map(str, (nCharactersToEraseFrom(input()) for _ in range(int(input())))))\n\ndef nCharactersToEraseFrom(string):\n    repetition = Counter(string)\n    longestLength1 = repetition.most_common(1)[0][1]\n    halfLength = longestLength1 // 2\n    letters = tuple(set(string))\n    if len(letters) > 1:\n        longestLength2 = longestLength1\n        for i in range(len(letters) - 1):\n            if repetition[letters[i]] > halfLength:\n                for j in range(i + 1, len(letters)):\n                    if repetition[letters[j]] > halfLength:\n                        l = goodStringLengthFrom(string, {letters[i], letters[j]})\n                        if l > longestLength2:\n                            longestLength2 = l\n        if longestLength2 != longestLength1:\n            return len(string) - (longestLength2 - 1 if longestLength2 % 2 else longestLength2)\n    return len(string) - longestLength1\n\ndef goodStringLengthFrom(string, pairOfLetters):\n    currLetter = [0]\n    return sum((isElement(l, pairOfLetters, currLetter) for l in string))\n\ndef isElement(letter, letters, currLetter):\n    if letter in letters and letter != currLetter[0]:\n        currLetter[0] = letter\n        return 1\n    return 0\nprint(main())", "def hhh(s, u, v):\n    c = b = 0\n    for i in range(len(s)):\n        if b == 0:\n            if s[i] == u:\n                x = u\n                y = v\n                b = 1\n            elif s[i] == v:\n                x = v\n                y = u\n                b = 1\n        elif b == 1:\n            if s[i] == y:\n                c += 2\n                b = 2\n        elif s[i] == x:\n            b = 1\n    return c\nfor t in range(int(input())):\n    s = input()\n    a = []\n    for i in range(10):\n        a.append(s.count(str(i)))\n    m = max(a)\n    for i in range(10):\n        for j in range(i + 1, 10):\n            n = hhh(s, str(i), str(j))\n            if n > m:\n                m = n\n    print(len(s) - m)", "from collections import Counter\n\ndef main():\n    return '\\n'.join(map(str, (nCharactersToEraseFrom(input()) for _ in range(int(input())))))\n\ndef nCharactersToEraseFrom(string):\n    repetition = Counter(string)\n    longestLength1 = repetition.most_common(1)[0][1]\n    halfLength = longestLength1 // 2\n    letters = tuple(set(string))\n    if len(letters) > 1:\n        longestLength2 = max((goodStringLengthFrom(string, {letters[i], letters[j]}) for i in range(len(letters) - 1) for j in range(i + 1, len(letters))))\n    else:\n        longestLength2 = 0\n    if longestLength1 >= longestLength2:\n        return len(string) - longestLength1\n    return len(string) - (longestLength2 - 1 if longestLength2 % 2 else longestLength2)\n\ndef goodStringLengthFrom(string, pairOfLetters):\n    currLetter = [0]\n    return sum((isElement(l, pairOfLetters, currLetter) for l in string))\n\ndef isElement(letter, letters, currLetter):\n    if letter in letters and letter != currLetter[0]:\n        currLetter[0] = letter\n        return 1\n    return 0\nprint(main())", "for _ in range(int(input())):\n    s = input()\n    o = max((s.count(i) for i in {*s}))\n    l = [[0 for i in range(10)] for i in range(10)]\n    for i in '0123456789':\n        k = 0\n        q = {}\n        for m in range(10):\n            q[m] = set()\n        for j in s:\n            if j == i:\n                k += 1\n            elif k not in q[int(j)] and k > 0:\n                l[int(i)][int(j)] += 1\n                q[int(j)].add(k)\n    p = 0\n    for i in l:\n        p = max(p, max(i))\n    print(len(s) - max(p * 2, o))", "def main():\n    return '\\n'.join(map(str, (nCharactersToEraseFrom(input()) for _ in range(int(input())))))\n\ndef nCharactersToEraseFrom(string):\n    repetition = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n    for letter in string:\n        repetition[letter] += 1\n    longestLength1 = max(repetition.values())\n    letters = tuple(set(string))\n    if len(letters) > 1:\n        longestLength2 = max((goodStringLengthFrom(string, {letters[i], letters[j]}) for i in range(len(letters) - 1) for j in range(i + 1, len(letters))))\n    else:\n        longestLength2 = 0\n    if longestLength1 >= longestLength2:\n        return len(string) - longestLength1\n    return len(string) - (longestLength2 - 1 if longestLength2 % 2 else longestLength2)\n\ndef goodStringLengthFrom(string, pairOfLetters):\n    currLetter = [0]\n    return sum((isElement(l, pairOfLetters, currLetter) for l in string))\n\ndef isElement(letter, letters, currLetter):\n    if letter in letters and letter != currLetter[0]:\n        currLetter[0] = letter\n        return 1\n    return 0\nprint(main())", "from bisect import bisect_right\nn = int(input())\ninp = []\nrum = []\nfor i in range(0, n):\n    k = input()\n    lis = []\n    for _ in range(0, 10):\n        lis.append([])\n    for j in range(0, len(k)):\n        lis[int(k[j])].append(j)\n    ans = 0\n    for a in range(0, 10):\n        for b in range(0, 10):\n            out = 0\n            if len(lis[a]) == 0 or len(lis[b]) == 0:\n                pass\n            elif a == b:\n                if ans < len(lis[a]):\n                    ans = len(lis[a])\n            else:\n                x = 0\n                y = 0\n                flag = 1\n                out = 0\n                pre = -1\n                while flag:\n                    x = bisect_right(lis[a], pre)\n                    if x == len(lis[a]):\n                        flag = 0\n                        continue\n                    else:\n                        pre = lis[a][x]\n                    y = bisect_right(lis[b], pre)\n                    if y == len(lis[b]):\n                        flag = 0\n                        continue\n                    else:\n                        pre = lis[b][y]\n                    out = out + 2\n                if ans < out:\n                    ans = out\n    print(len(k) - ans)", "digits = list('0123456789')\n\ndef f(s):\n    p = 0\n    n = len(s)\n    for i in digits:\n        for j in digits:\n            xx = i\n            m = 0\n            last = 0\n            for mm in range(n):\n                if s[mm] == xx:\n                    last = mm\n                    m += 1\n                    if xx == i:\n                        xx = j\n                    else:\n                        xx = i\n            if s[last] == i and i != j:\n                m -= 1\n            p = max(m, p)\n    return len(s) - p\nn = int(input())\nfor i in range(n):\n    x = input()\n    print(f(x))", "from collections import Counter\nfrom itertools import combinations\nfor _ in range(int(input())):\n    a = list(input())\n    n = len(a)\n    dic = Counter(a)\n    b = list(sorted(dic.items(), key=lambda x: x[1], reverse=True))\n    ans = b[0][1]\n    if len(b) == 1:\n        print(0)\n    else:\n        for xxx in combinations(dic.keys(), 2):\n            (i, j) = (xxx[0], xxx[1])\n            if dic[i] + dic[j] < ans:\n                continue\n            c = ''.join(list(filter(lambda x: x in {i, j}, a)))\n            ans = max(ans, 2 * c.count(i + j), 2 * c.count(j + i))\n        print(n - 2) if ans == 1 else print(n - ans)", "import sys\nfrom collections import Counter\n\ndef func(S, i, j):\n    b = False\n    a = 0\n    for c in S:\n        if c == i:\n            b = True\n        elif c == j and b:\n            b = False\n            a += 1\n    return a\n\ndef main():\n    T = int(sys.stdin.readline())\n    for t in range(T):\n        S = sys.stdin.readline().strip()\n        a = Counter(S).most_common(1)[0][1]\n        for i in range(10):\n            for j in range(10):\n                if i == j:\n                    continue\n                x = func(S, str(i), str(j))\n                a = max(a, 2 * x)\n        print(len(S) - a)\nmain()", "from collections import defaultdict\nfor _ in range(int(input())):\n    x = input()\n    n = len(x)\n    a = []\n    for i in x:\n        a.append(int(i))\n    c = [0] * 10\n    d = [[[0, -1] for _ in range(10)] for _ in range(10)]\n    v = [0] * 10\n    c[a[0]] = 1\n    count = 2\n    v[a[0]] = 1\n    for i in range(1, n):\n        no = a[i]\n        c[no] += 1\n        if v[no] == 0:\n            for j in range(10):\n                if v[j] != 0:\n                    d[j][no][0] = 2\n                    d[j][no][1] = no\n            v[no] = count\n            count += 1\n        else:\n            for j in range(10):\n                if d[no][j][1] == j:\n                    d[no][j][0] += 1\n                    d[no][j][1] = no\n            for j in range(10):\n                if d[j][no][1] == j:\n                    d[j][no][0] += 1\n                    d[j][no][1] = no\n    cm = max(c)\n    m = 2\n    for i in range(10):\n        for j in range(10):\n            if i == j:\n                continue\n            m = max(d[i][j][0], m)\n    print(n - max(cm, m // 2 * 2))", "T = int(input())\nfor t in range(T):\n    s = input()\n    mx = 0\n    arr = []\n    for i in range(10):\n        arr.append([])\n    cnt = 0\n    for k in s:\n        arr[int(k)].append(cnt)\n        cnt += 1\n    for i in range(9):\n        for j in range(i + 1, 10):\n            odd = 0\n            even = 0\n            (m, n) = (0, 0)\n            ans = 0\n            for k in range(len(arr[i]) + len(arr[j])):\n                if m == len(arr[i]) or n == len(arr[j]):\n                    break\n                if arr[i][m] < arr[j][n]:\n                    even = 0\n                    m += 1\n                    if odd == 0:\n                        ans += 1\n                        odd = 1\n                else:\n                    odd = 0\n                    n += 1\n                    if even == 0:\n                        ans += 1\n                        even = 1\n            if len(arr[i]) != 0 and len(arr[j]) != 0:\n                if arr[i][-1] > arr[j][-1] and arr[i][0] > arr[j][0] or (arr[i][-1] < arr[j][-1] and arr[i][0] < arr[j][0]):\n                    ans += ans % 2\n                else:\n                    ans -= ans % 2\n            mx = max(mx, ans)\n    for i in range(10):\n        mx = max(mx, len(arr[i]))\n    print(len(s) - mx)", "from collections import defaultdict\nimport math\n\ndef solve(a):\n    if len(a) <= 2:\n        return 0\n    result = float('inf')\n    for i in '0123456789':\n        for j in '0123456789':\n            first = i\n            second = j\n            f = True\n            s = False\n            n = 0\n            for elements in a:\n                if first == elements and f:\n                    n += 1\n                    f = False\n                    s = True\n                elif second == elements and s:\n                    n += 1\n                    f = True\n                    s = False\n            if first != second and n % 2 == 1:\n                n -= 1\n            result = min(len(a) - n, result)\n    return result\nfor _ in range(int(input())):\n    a = input()\n    print(solve(a))", "t = int(input())\nfor _ in range(t):\n    s = str(input())\n    if s[-1] + s[:len(s) - 1] == s[1:] + s[0]:\n        print(0)\n        continue\n    s = [x for x in s]\n    a = '0123456789'\n    d = {x + y: [False, 0] for x in a for y in a}\n    for (i, x) in enumerate(s):\n        for y in a:\n            z = x + y\n            if not d[z][0]:\n                d[z][0] = True\n                d[z][1] += 1\n            z = y + x\n            if d[z][0]:\n                d[z][0] = False\n                d[z][1] += 1\n    ans = 0\n    for x in a:\n        d[x + x][1] //= 2\n    for x in d.keys():\n        if x[0] == x[1]:\n            ans = max(ans, d[x][1])\n        else:\n            ans = max(ans, int(d[x][1] // 2) * 2)\n    print(int(len(s) - ans))"]