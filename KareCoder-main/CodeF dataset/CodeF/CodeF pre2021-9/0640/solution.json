["import sys\n\ndef rl(proc=None):\n    if proc is not None:\n        return proc(sys.stdin.readline())\n    else:\n        return sys.stdin.readline().rstrip()\n\ndef srl(proc=None):\n    if proc is not None:\n        return list(map(proc, rl().split()))\n    else:\n        return rl().split()\n\ndef good(r, v):\n    return any((r[i] != v for i in range(1, len(r), 2)))\n\ndef main():\n    rl()\n    A = srl(int)\n    v = A[0]\n    c = 0\n    ret = 0\n    r = []\n    last_bulk = -1\n    A.append(0)\n    for x in A:\n        if x == v:\n            c += 1\n        else:\n            if c == 1:\n                r.append(v)\n            else:\n                if v != last_bulk:\n                    ret += len(r) + 2\n                    last_bulk = v\n                elif good(r, v):\n                    ret += len(r) + 2\n                else:\n                    ret += len(r) + 1\n                r = []\n            v = x\n            c = 1\n    assert c == 1\n    assert v == 0\n    ret += len(r)\n    print(ret)\nmain()", "import sys\ninput = sys.stdin.readline\nflush = sys.stdout.flush\n\ndef stupid(pos, p1, p2, c1, c2, a):\n    if pos == len(a):\n        return p1 + p2\n    return max(stupid(pos + 1, a[pos], p2, c1 + int(p1 != a[pos]), c2, a), stupid(pos + 1, p1, a[pos], c1, c2 + int(p2 != a[pos]), a))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = -1\n    p1 = -1\n    pos1 = -1\n    c1 = 0\n    c2 = 0\n    j = 0\n    for i in a:\n        if i != p:\n            p = i\n            c1 += 1\n        else:\n            if i != p1:\n                c2 += 1\n            else:\n                for k in range(pos1 + 1, j):\n                    if a[k] != p1 and a[k - 1] != a[k + 1]:\n                        c2 += 1\n                        break\n            p1 = i\n            pos1 = j\n        j += 1\n    print(c1 + c2)\nsolve()", "def painting_the_array_i(array):\n    count = 0\n    last1 = None\n    last2 = None\n    buffer = None\n    buffer_count = 0\n    for i in array:\n        if last1 is None or (i != last1 and last2 is None):\n            last1 = i\n            count += 1\n        elif last2 is None:\n            last2 = i\n            count += 1\n        elif last1 == last2:\n            if i != last1:\n                count += 1\n            last1 = i\n        elif i == last1 and buffer is None:\n            last2 = i\n            count += 1\n        elif i == last2 and buffer is None:\n            last1 = i\n            count += 1\n        elif i == buffer:\n            last1 = last2 = i\n            count += buffer_count\n            count += 1\n            buffer = None\n            buffer_count = 0\n        else:\n            buffer = i\n            buffer_count += 1\n    return count + buffer_count\nn = int(input())\narray = [int(i) for i in input().split()]\nprint(painting_the_array_i(array))", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    last_pair = -1\n    res = 0\n    lhs = (0, a[0])\n    for (key, value) in enumerate(a):\n        if value != lhs[1]:\n            if lhs[1] != last_pair and value != last_pair:\n                last_pair = -1\n            if key - lhs[0] > 1:\n                res += 1\n                if lhs[1] == last_pair:\n                    res -= 1\n                last_pair = lhs[1]\n            res += 1\n            lhs = (key, value)\n    res += 1\n    if n - lhs[0] > 1:\n        res += 1\n        if lhs[1] == last_pair:\n            res -= 1\n    print(res)\n    return\nmain()", "from array import array\n\ndef solve(n, D):\n    a = None\n    b = None\n    a_cnt = 0\n    b_cnt = 0\n    for (i, d) in enumerate(D):\n        if a != d:\n            if i < n - 1 and b == D[i + 1]:\n                b_cnt += 1\n                b = d\n                continue\n            a_cnt += 1\n            a = d\n            continue\n        if b != d:\n            b_cnt += 1\n            b = d\n    return a_cnt + b_cnt\n\ndef main():\n    ans = []\n    n = int(input())\n    D = array('i', list(map(int, input().split(' '))))\n    ans.append(solve(n, D))\n    for a in ans:\n        print(a)\nmain()", "n = int(input())\na = list(map(int, input().split()))\n(res, b, c) = (0, 0, 0)\nfor i in range(n):\n    if a[i] != b and a[i] != c:\n        if i + 1 < n and a[i + 1] == c:\n            c = a[i]\n        else:\n            b = a[i]\n        res += 1\n    elif a[i] != b:\n        b = a[i]\n        res += 1\n    elif a[i] != c:\n        c = a[i]\n        res += 1\nprint(res)", "import sys\ninput = sys.stdin.readline\ngetint = lambda : int(input())\ngetints = lambda : [int(a) for a in input().split()]\n\ndef solve():\n    n = getint()\n    values = getints()\n    pos = [-1 for i in range(n + 1)]\n    next = [n for i in range(n)]\n    for i in range(n):\n        if pos[values[i]] != -1:\n            next[pos[values[i]]] = i\n        pos[values[i]] = i\n    one = -1\n    two = -1\n    onei = -1\n    twoi = -1\n    segments = 0\n    for i in range(n):\n        v = values[i]\n        if v == two:\n            segments += 1 if v != one else 0\n            one = v\n            onei = i\n        elif v == one:\n            segments += 1\n            two = v\n            twoi = i\n        elif next[onei] > next[twoi]:\n            segments += 1\n            two = v\n            twoi = i\n        else:\n            segments += 1\n            one = v\n            onei = i\n    print(segments)\nsolve()", "import os\nimport sys\nimport string\nimport math\n\nclass Helper:\n\n    def main(self):\n        _ = self._readInt()\n        case = self._readIntArray()\n        result = self.solve(case)\n        print(result)\n\n    def _readString(self) -> str:\n        return input()\n\n    def _readInt(self):\n        return int(self._readString())\n\n    def _readIntArray(self):\n        return [int(item) for item in self._readString().split(' ')]\n\n    def readCase(self):\n        raise NotImplementedError\n\n    def solve(self, *args):\n        raise NotImplementedError\n\n    def postSolve(self, res):\n        return res\n\nclass Solution(Helper):\n\n    def readCase(self):\n        pass\n\n    def solve(self, nums):\n        prev1 = None\n        prev2 = None\n        count = 0\n        for (i, num) in enumerate(nums):\n            if num == prev1 and num != prev2:\n                prev2 = num\n                count += 1\n            elif num == prev2 and num != prev1:\n                prev1 = num\n                count += 1\n            elif num == prev1 and num == prev2:\n                continue\n            else:\n                later = None\n                if i + 1 < len(nums):\n                    later = nums[i + 1]\n                if later == prev1:\n                    prev1 = num\n                elif later == prev2:\n                    prev2 = num\n                else:\n                    prev1 = num\n                count += 1\n        return count\nSolution().main()", "n = int(input())\na = list(map(int, input().split()))\nw = [0]\nb = [0]\nfor i in range(n):\n    if a[i] != w[-1] and a[i] != b[-1]:\n        if i + 1 <= n - 1 and a[i + 1] == b[-1]:\n            b.append(a[i])\n        else:\n            w.append(a[i])\n    elif a[i] != w[-1]:\n        w.append(a[i])\n    elif a[i] != b[-1]:\n        b.append(a[i])\nprint(len(w) + len(b) - 2)", "n = int(input())\narr = [int(s) for s in input().split(' ')]\nans = 0\nlastArray1 = 0\nlastArray2 = 0\nfor i in range(n):\n    if arr[i] != lastArray1 and arr[i] != lastArray2:\n        if i + 1 < n and arr[i + 1] == lastArray2:\n            lastArray2 = arr[i]\n        else:\n            lastArray1 = arr[i]\n        ans += 1\n    elif arr[i] != lastArray1:\n        lastArray1 = arr[i]\n        ans += 1\n    elif arr[i] != lastArray2:\n        lastArray2 = arr[i]\n        ans += 1\nprint(ans)", "import math\nimport sys\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    n = input_int()\n    a = [0] * (n + 1)\n    a[1:] = input_list_int()\n    pos = [n + 1] * (n + 1)\n    nxt = [0] * (n + 1)\n    for j in range(0, n + 1):\n        i = n - j\n        nxt[i] = pos[a[i]]\n        pos[a[i]] = i\n    x = 0\n    y = 0\n    sum = 0\n    for i in range(1, n + 1):\n        if a[x] == a[i]:\n            sum += 1 if a[y] != a[i] else 0\n            y = i\n        elif a[y] == a[i]:\n            sum += 1 if a[x] != a[i] else 0\n            x = i\n        elif nxt[x] < nxt[y]:\n            sum += 1 if a[x] != a[i] else 0\n            x = i\n        else:\n            sum += 1 if a[y] != a[i] else 0\n            y = i\n    print(sum)\nquery_count = 1\nwhile query_count:\n    query_count -= 1\n    solve()", "n = int(input())\na = list(map(int, input().split()))\n(res, b, c) = (0, 0, 0)\nfor i in range(n):\n    if a[i] != b and a[i] != c:\n        if i + 1 < n and a[i + 1] == c:\n            c = a[i]\n        else:\n            b = a[i]\n        res += 1\n    elif a[i] != b:\n        b = a[i]\n        res += 1\n    elif a[i] != c:\n        c = a[i]\n        res += 1\nprint(res)", "x = int(input())\nl = [int(i) for i in input().split()]\n(c, e1, e2) = (0, 0, 0)\nfor i in range(x):\n    if l[i] != e1 and l[i] != e2:\n        if i < x - 1 and l[i + 1] == e2:\n            c += 1\n            e2 = l[i]\n        else:\n            c += 1\n            e1 = l[i]\n    elif l[i] != e1:\n        c += 1\n        e1 = l[i]\n    elif l[i] != e2:\n        c += 1\n        e2 = l[i]\nprint(c)", "n = int(input())\na = list(map(int, input().split()))\nw = [0]\nb = [0]\nfor i in range(n):\n    if a[i] != w[-1] and a[i] != b[-1]:\n        if i + 1 <= n - 1 and a[i + 1] == b[-1]:\n            b.append(a[i])\n        else:\n            w.append(a[i])\n    elif a[i] != w[-1]:\n        w.append(a[i])\n    elif a[i] != b[-1]:\n        b.append(a[i])\nprint(len(w) + len(b) - 2)", "n = int(input())\na1 = list(map(int, input().split()))\n(tmp1, tmp2, ans1) = (0, 0, 0)\nfor i in range(n):\n    if a1[i] == tmp1 and a1[i] == tmp2:\n        continue\n    elif a1[i] != tmp1 and a1[i] != tmp2:\n        if i + 1 < n and a1[i + 1] == tmp1:\n            tmp1 = a1[i]\n        else:\n            tmp2 = a1[i]\n    elif a1[i] != tmp1:\n        tmp1 = a1[i]\n    elif a1[i] != tmp2:\n        tmp2 = a1[i]\n    ans1 += 1\nprint(ans1)", "def compact(array):\n    result = []\n    array.append(-1)\n    start = 0\n    for i in range(len(array) - 1):\n        if array[i] != array[i + 1]:\n            result.append((array[i], i - start + 1))\n            start = i + 1\n    return result\nn = int(input())\na = list(map(int, input().split()))\ndata = compact(a)\nresult = 0\nlast_group = -1\nbetween = []\nfor (el, cnt) in data:\n    if cnt == 1:\n        result += 1\n        between.append(el)\n    else:\n        if last_group != el:\n            result += 2\n        elif len(between) > 0 and (len(between) % 2 == 1 and between.count(el) >= (len(between) - 1) // 2) or len(between) == 1:\n            result += 1\n        else:\n            result += 2\n        between = []\n        last_group = el\nprint(result)", "def segmenti(a, n):\n    if n == 0:\n        print('0')\n    elif n == 1:\n        print('1')\n    elif n == 2:\n        print('2')\n    else:\n        beli = ['brt']\n        nb = 1\n        crni = ['brt']\n        nc = 1\n        i = 0\n        seg = 0\n        while i < n - 1:\n            if beli[nb - 1] == crni[nc - 1]:\n                if beli[nb - 1] != a[i]:\n                    seg += 1\n                beli.append(a[i])\n                nb += 1\n            elif a[i] == a[i + 1]:\n                if a[i] != beli[nb - 1]:\n                    beli.append(a[i])\n                    nb += 1\n                    seg += 1\n                else:\n                    seg += 1\n                    crni.append(a[i])\n                    nc += 1\n            elif a[i] == beli[nb - 1]:\n                seg += 1\n                crni.append(a[i])\n                nc += 1\n            elif a[i] == crni[nc - 1]:\n                seg += 1\n                beli.append(a[i])\n                nb += 1\n            elif a[i + 1] == beli[nb - 1]:\n                seg += 1\n                beli.append(a[i])\n                nb += 1\n            else:\n                seg += 1\n                crni.append(a[i])\n                nc += 1\n            i += 1\n        if a[i] != beli[nb - 1] or a[i] != crni[nc - 1]:\n            seg += 1\n        print(seg)\nn = int(input())\na = input().split()\na = [int(i) for i in a]\nsegmenti(a, n)", "input()\narr = [int(x) for x in input().split()] + [None]\nseg1 = None\nseg2 = None\nscore = 0\nfor (i, a) in enumerate(arr):\n    if arr[i] == None:\n        break\n    if arr[i + 1] != a:\n        if arr[i + 1] == seg1 and seg1 != a:\n            seg1 = a\n            score += 1\n            continue\n        elif arr[i + 1] == seg2 and seg2 != a:\n            seg2 = a\n            score += 1\n            continue\n    if seg1 != a:\n        score += 1\n        seg1 = a\n    elif seg2 != a:\n        score += 1\n        seg2 = a\nprint(score)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    n = int(input())\n    ara = [int(x) for x in input().split()]\n    positions = [[] for i in range(n + 1)]\n    for idx in range(n):\n        positions[ara[idx]].append(idx)\n    next_ara = [n] * (n + 1)\n    for idx in range(n + 1):\n        size = len(positions[idx])\n        for jdx in range(size):\n            if jdx < size - 1:\n                next_ara[positions[idx][jdx]] = positions[idx][jdx + 1]\n            else:\n                next_ara[positions[idx][jdx]] = n\n    ara.append(n + n)\n    ones = [n]\n    zeros = [n]\n    ans = 0\n    for idx in range(n):\n        if ara[idx] == ara[ones[-1]] and ara[idx] == ara[zeros[-1]]:\n            ones.append(idx)\n        elif ara[idx] == ara[ones[-1]]:\n            zeros.append(idx)\n            ans += 1\n        elif ara[idx] == ara[zeros[-1]]:\n            ones.append(idx)\n            ans += 1\n        elif next_ara[ones[-1]] < next_ara[zeros[-1]]:\n            ones.append(idx)\n            ans += 1\n        else:\n            zeros.append(idx)\n            ans += 1\n    print(ans)\nmain()", "import sys\nn = int(input())\na = list(map(int, input().split()))\npre = []\nlast = a[0]\ncount = 0\nfor i in range(n):\n    if last == a[i]:\n        count += 1\n        continue\n    else:\n        pre.append((last, count))\n        last = a[i]\n        count = 1\npre.append((last, count))\nb = -1\nw = -1\nans = 0\nfor i in range(len(pre)):\n    val = pre[i][0]\n    count = pre[i][1]\n    if count > 1:\n        if b != val and w != val:\n            ans += 2\n            b = val\n            w = val\n        elif b == val:\n            w = val\n            ans += 1\n        elif w == val:\n            b = val\n            ans += 1\n    elif b == val and w == val:\n        pass\n    elif b == val:\n        w = val\n        ans += 1\n    elif w == val:\n        b = val\n        ans += 1\n    elif i + 1 < len(pre):\n        val2 = pre[i + 1][0]\n        count2 = pre[i + 1][1]\n        if b == val2:\n            b = val\n            ans += 1\n        elif w == val2:\n            w = val\n            ans += 1\n        else:\n            b = val\n            ans += 1\n    else:\n        b = val\n        ans += 1\nprint(ans)", "n = int(input())\na = [0] * 400000\nseg = [0] * 400000\nlenSeg = [0] * 400000\nrow = input()\nrow = row.split(' ')\ncnt = 0\nfor i in range(0, n + 1):\n    if i != n:\n        a[i] = int(row[i])\n    else:\n        a[i] = -1\n    if i != 0 and a[i] != a[i - 1]:\n        seg[cnt] = a[i - 1]\n        cnt += 1\n    lenSeg[cnt] += 1\nres = 0\nmid = -1\nlong = -1\nfor i in range(0, cnt):\n    if lenSeg[i] == 1:\n        res += 1\n    elif lenSeg[i] > 1:\n        if long != -1 and seg[long] == seg[i]:\n            if long < mid:\n                res += 2\n            else:\n                res += 1\n        if seg[long] != seg[i] or long == -1:\n            res += 2\n        long = i\n    if seg[i + 1] != seg[i - 1] and i < cnt - 1 and (seg[i] != seg[long]) and (lenSeg[i] == 1):\n        mid = i\nprint(res)", "from collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\ns = 0\nd = defaultdict(list)\nfor i in range(n + 1):\n    d[i].append(10 ** 5 + 1)\nfor i in range(n - 1, -1, -1):\n    d[l[i]].append(i)\na = 0\nb = 0\ncnt = 0\nfor i in range(n):\n    d[l[i]].pop()\n    if l[i] == a and l[i] == b:\n        b = l[i]\n    elif l[i] == a:\n        b = l[i]\n        cnt += 1\n    elif l[i] == b:\n        a = l[i]\n        cnt += 1\n    else:\n        if d[a][-1] < d[b][-1]:\n            a = l[i]\n        else:\n            b = l[i]\n        cnt += 1\nprint(cnt)", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nnx_pos = [float('inf')] * n\ndic = defaultdict(lambda : float('inf'))\nfor i in range(n - 1, -1, -1):\n    nx_pos[i] = dic[a[i]]\n    dic[a[i]] = i\n(b, w) = ([(-1, -1)], [(-1, -1)])\nans = 0\nfor i in range(n):\n    x = a[i]\n    if b[-1][0] == x and w[-1][0] != x:\n        w.append((x, i))\n        ans += 1\n    elif w[-1][0] == x and b[-1][0] != x:\n        b.append((x, i))\n        ans += 1\n    elif w[-1][0] != x and b[-1][0] != x:\n        na = nx_pos[b[-1][1]]\n        nb = nx_pos[w[-1][1]]\n        if na > nb:\n            w.append((x, i))\n        else:\n            b.append((x, i))\n        ans += 1\n    else:\n        w.append((x, i))\nprint(ans)", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nnx_pos = [float('inf')] * n\ndic = defaultdict(lambda : float('inf'))\nfor i in range(n - 1, -1, -1):\n    nx_pos[i] = dic[a[i]]\n    dic[a[i]] = i\n(b, w) = ([(-1, -1)], [(-1, -1)])\nans = 0\nfor i in range(n):\n    x = a[i]\n    if b[-1][0] == x and w[-1][0] != x:\n        w.append((x, i))\n        ans += 1\n    elif w[-1][0] == x and b[-1][0] != x:\n        b.append((x, i))\n        ans += 1\n    elif w[-1][0] != x and b[-1][0] != x:\n        na = nx_pos[b[-1][1]]\n        nb = nx_pos[w[-1][1]]\n        if na > nb:\n            w.append((x, i))\n        else:\n            b.append((x, i))\n        ans += 1\n    else:\n        w.append((x, i))\nprint(ans)", "n = int(input())\naa = [int(x) for x in input().split()]\nsegcount = 0\nchoices = {(-1, -1)}\nfor i in range(n):\n    a = aa[i]\n    new_choices = set()\n    have_plus = False\n    num_awhite = 0\n    num_ablack = 0\n    for choice in choices:\n        (last_white, last_black) = choice\n        if num_awhite <= 2 and a != last_white:\n            have_plus = True\n            new_choices.add((a, last_black))\n            num_awhite += 1\n        if num_ablack <= 2 and a != last_black:\n            have_plus = True\n            new_choices.add((last_white, a))\n            num_ablack += 1\n    if have_plus == True:\n        segcount += 1\n        choices = new_choices\nprint(segcount)", "from collections import deque\nfrom typing import List\n\nclass ContestParser:\n\n    def __init__(self):\n        self.buffer = deque()\n\n    def next_token(self) -> str:\n        if len(self.buffer) == 0:\n            self.buffer.extend(input().split())\n        return self.buffer.popleft()\n\n    def next_int(self) -> int:\n        return int(self.next_token())\nparser = ContestParser()\nn = parser.next_int()\nstates = [(0, 0)]\nbest_v = 0\nfor i in range(n):\n    x = parser.next_int()\n    new_states = []\n    need_change = False\n    for (a, b) in states:\n        if x != a or x != b:\n            need_change = True\n    if need_change:\n        best_v += 1\n        s = set()\n        for (a, b) in states:\n            if x == a:\n                continue\n            if len(s) > 3:\n                continue\n            if b in s:\n                continue\n            s.add(b)\n            new_states.append((x, b))\n        s = set()\n        for (a, b) in states:\n            if x == b:\n                continue\n            if len(s) > 3:\n                continue\n            if a in s:\n                continue\n            s.add(a)\n            new_states.append((a, x))\n        states = new_states\n    else:\n        new_states = states\nprint(best_v)"]