["for s in [*open(0)][2::2]:\n    a = [*map(int, s.split())]\n    mn = min(a)\n    b = sorted(a)\n    for (x, y) in zip(a, b):\n        if x != y and x % mn != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    a = min(list1)\n    list2 = list1[:]\n    list2.sort()\n    for i in range(n):\n        if list1[i] != list2[i]:\n            if list1[i] % a != 0:\n                list_ans.append('NO')\n                break\n    else:\n        list_ans.append('YES')\nfor item in list_ans:\n    print(item)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = sorted(a)\n    m = min(a)\n    highest = -1\n    res = 'YES'\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            res = 'NO'\n            break\n    print(res)", "from math import gcd\n\ndef isSortedArrayPossible(arrayLength, array, sortedArray):\n    minValue = sortedArray[0]\n    for i in range(arrayLength):\n        if array[i] != sortedArray[i] and array[i] % minValue:\n            return 'NO'\n    return 'YES'\n\ndef testCase_1401c():\n    arrayLength = int(input())\n    array = tuple(map(int, input().split(' ')))\n    return (arrayLength, array, sorted(array))\nnTestCases = int(input())\ntestCases = tuple((testCase_1401c() for x in range(nTestCases)))\ntuple((print(isSortedArrayPossible(*testCase)) for testCase in testCases))", "def can_be_sorted(arr):\n    min_element = min(arr)\n    sorted_arr = sorted(arr)\n    for (s, n) in zip(sorted_arr, arr):\n        if n % min_element != 0 and s != n:\n            return 'NO'\n    return 'YES'\nresults = []\nfor _ in range(int(input())):\n    _ = input()\n    arr = [int(el) for el in input().split(' ')]\n    results.append(can_be_sorted(arr))\nprint('\\n'.join(results))", "from math import gcd\n\ndef isSortedArrayPossible(arrayLength, array, sortedArray):\n    minValue = sortedArray[0]\n    for i in range(arrayLength):\n        if array[i] != sortedArray[i] and array[i] % minValue:\n            return 'NO'\n    return 'YES'\n\ndef testCase_1401c():\n    arrayLength = int(input())\n    array = list(map(int, input().split(' ')))\n    return (arrayLength, array, sorted(array))\nnTestCases = int(input())\ntestCases = tuple((testCase_1401c() for x in range(nTestCases)))\ntuple((print(isSortedArrayPossible(*testCase)) for testCase in testCases))", "def isSortedArrayPossible(arrayLength, array, sortedArray):\n    minValue = sortedArray[0]\n    if any((array[i] != sortedArray[i] and array[i] % minValue for i in range(arrayLength))):\n        return 'NO'\n    return 'YES'\n\ndef testCase_1401c():\n    arrayLength = int(input())\n    array = tuple(map(int, input().split(' ')))\n    return (arrayLength, array, sorted(array))\nnTestCases = int(input())\ntestCases = tuple((testCase_1401c() for x in range(nTestCases)))\ntuple((print(isSortedArrayPossible(*testCase)) for testCase in testCases))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "import math\n\ndef main(arr):\n    s = sorted(arr)\n    m = s[0]\n    g = 0\n    for i in range(len(s)):\n        if s[i] != arr[i]:\n            g = math.gcd(g, arr[i])\n    if math.gcd(g, m) == m:\n        return 'YES'\n    return 'NO'\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    ans.append(main(list(map(int, input().split()))))\nfor e in ans:\n    print(e)", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    input()\n    a = list(I())\n    b = sorted(a)\n    x = b[0]\n    for (i, j) in zip(a, b):\n        if i % x != 0 and i != j:\n            print('NO')\n            break\n    else:\n        print('YES')", "t = int(input())\nfrom math import gcd\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = a.copy()\n    b.sort()\n    res = True\n    for i in range(0, n):\n        if b[i] != a[i] and gcd(a[i], b[i]) % b[0] != 0:\n            res = False\n    if res:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(t):\n    solve()", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = sorted(a)\n    mn = min(a)\n    f = 1\n    for (cur, des) in zip(a, b):\n        if cur != des and cur % mn != 0:\n            f = 0\n            break\n    print('YES' if f else 'NO')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "def main():\n    ntests = int(input())\n    n = []\n    ints = []\n    output = []\n    for i in range(ntests):\n        n.append(int(input()))\n        ints.append(list(map(int, input().split())))\n        output.append('YES')\n    for i in range(ntests):\n        smallest = min(ints[i])\n        sortedint = sorted(ints[i])\n        for num in range(n[i]):\n            if ints[i][num] % smallest != 0 and sortedint[num] != ints[i][num]:\n                output[i] = 'NO'\n                break\n    for i in range(ntests):\n        print(output[i])\nmain()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        a = li()\n        b = a[:]\n        b.sort()\n        if a == b:\n            print('YES')\n        else:\n            m = b[0]\n            f = True\n            for i in range(n):\n                if b[i] != a[i]:\n                    f = not a[i] % m\n                    if not f:\n                        break\n            yn(f)\nsolve()", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = sorted(l)\n    mini = x[0]\n    f = 0\n    for i in range(n):\n        if l[i] != mini:\n            if gcd(mini, l[i]) == mini or l[i] == x[i]:\n                pass\n            elif gcd(mini, l[i]) != mini and l[i] != x[i]:\n                print('NO')\n                f = 1\n                break\n    if f == 0:\n        print('YES')", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    y = list(map(int, input().split()))\n    a = []\n    minima = y[0]\n    for ll in range(n):\n        a.append(y[ll])\n    a.sort()\n    flag = 1\n    for kk in range(n):\n        if a[kk] != y[kk]:\n            if y[kk] % a[0] == 0:\n                flag = 1\n            else:\n                flag = 0\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = input()\nt = int(t)\nfor k in range(0, t):\n    n = input()\n    n = int(n)\n    a = [int(x) for x in input().split()]\n    a_sort = sorted(a)\n    ans = 'YES'\n    min = a_sort[0]\n    min = int(min)\n    for i in range(n):\n        if a[i] != a_sort[i] and a[i] % min != 0:\n            ans = 'NO'\n            break\n    print(ans)", "for p in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    (m, f) = (min(a), 0)\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m:\n            f = 1\n            break\n    if f:\n        print('NO')\n    else:\n        print('YES')", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    m = b[0]\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    smol = min(arr)\n    copy = list(arr)\n    copy.sort()\n    flag = True\n    for j in range(n):\n        if arr[j] % smol != 0 and arr[j] != copy[j]:\n            flag = False\n            break\n    if flag == True:\n        print('YES')\n    else:\n        print('NO')", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\nfor _ in range(II()):\n    n = II()\n    aa = LI()\n    bb = sorted(aa)\n\n    def ok():\n        for (a, b) in zip(aa, bb):\n            if a == b:\n                continue\n            if a % bb[0]:\n                return False\n        return True\n    if ok():\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    sl = sorted(l)\n    m = sl[0]\n    z = 0\n    for i in range(n):\n        if sl[i] != l[i]:\n            if l[i] % m != 0:\n                z = 1\n                break\n    if z == 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x: print('\\n'.join(map(str, x)))\nans = []\nt = ini()\nfor _ in range(t):\n    n = ini()\n    a = inl()\n    b = sorted(a)\n    m = min(a)\n    tmp = True\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            tmp = False\n            break\n    ans.append('YES' if tmp else 'NO')\nout(ans)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "import sys\nI = lambda : map(int, sys.stdin.readline().split())\npr = lambda x: sys.stdout.write(f'{x}\\n')\n\ndef solve():\n    (n,) = I()\n    a = [*I()]\n    m = min(a)\n    for (i, x) in enumerate(sorted(a)):\n        if a[i] != x and a[i] % m:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    for _ in range(*I()):\n        print(solve())\nmain()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "t = int(input())\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = a.copy()\n    b.sort()\n    res = True\n    for i in range(0, n):\n        if b[i] != a[i] and b[i] % b[0] != 0:\n            res = False\n    if res:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\na = []\nb = []\nfor i in range(t):\n    o = int(input())\n    h = list(map(int, input().split()))\n    b.append(h)\n    a.append(o)\n\ndef tully(n, arr):\n    flag = 1\n    k = []\n    b = arr.copy()\n    u = min(arr)\n    arr.sort()\n    for i in range(n):\n        if arr[i] % u != 0:\n            if arr[i] != b[i]:\n                flag = 0\n                break\n    if flag:\n        return 'YES'\n    else:\n        return 'NO'\nfor i in range(t):\n    y = tully(a[i], b[i])\n    print(y)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    x = min(a)\n    f = True\n    for i in range(n):\n        if a[i] != b[i] and a[i] % x:\n            f = False\n    if f == False:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    f = True\n    for i in range(len(a)):\n        if a[i] != b[i] and a[i] % b[0]:\n            f = False\n    print('YES' if f else 'NO')", "from collections import defaultdict\nimport sys\nimport math\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = get_array()\n    b = sorted(a)\n    flag = False\n    k = b[0]\n    for i in range(n):\n        if a[i] != b[i]:\n            if a[i] % k != 0:\n                flag = True\n                break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "def mere(n, a):\n    b = sorted(a)\n    g = b[0]\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n        elif a[i] % g == 0 and b[i] % g == 0:\n            continue\n        else:\n            return 'NO'\n    return 'YES'\nt = int(input())\na = []\nfor i in range(t):\n    n = int(input())\n    array = list(map(int, input().split(' ')))\n    a.append([n, array])\nfor x in a:\n    print(mere(*x))", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    mini = min(a)\n    a.sort()\n    counter = 0\n    for i in range(n):\n        if a[i] != b[i] and a[i] % mini != 0:\n            counter = 1\n            break\n    if counter == 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nimport sys\nimport math\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = get_array()\n    b = sorted(a)\n    flag = False\n    k = b[0]\n    for i in range(n):\n        if a[i] != b[i]:\n            if a[i] % k != 0:\n                flag = True\n                break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "import sys\nread = lambda : sys.stdin.readline().strip()\n\ndef gcd(a, b):\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\ndef isValid(errs, k, min_gcd):\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                continue\n            if gcd(errs[i], errs[j]) != min_gcd:\n                break\n        else:\n            return True\n    return False\nfor _ in range(int(read())):\n    n = int(read())\n    nums = list(map(int, read().split()))\n    sorted_nums = sorted(nums)\n    min_num = sorted_nums[0]\n    errs = [0] * (n + 1)\n    k = 0\n    for i in range(n):\n        if nums[i] != sorted_nums[i]:\n            errs[k] = nums[i]\n            k += 1\n            if nums[i] % min_num != 0:\n                print('NO')\n                break\n    else:\n        errs[k] = 1000000000.0 + 1\n        print('YES')", "import sys\nread = lambda : sys.stdin.readline().strip()\nfor _ in range(int(read())):\n    n = int(read())\n    nums = list(map(int, read().split()))\n    sorted_nums = sorted(nums)\n    min_num = sorted_nums[0]\n    for i in range(n):\n        if nums[i] != sorted_nums[i]:\n            if nums[i] % min_num != 0:\n                print('NO')\n                break\n    else:\n        print('YES')", "def check(a):\n    flag = False\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            flag = True\n            break\n    return flag\n\ndef ans_f(a):\n    x = min(a)\n    old_a = a.copy()\n    a.sort()\n    new_a = []\n    uni = []\n    for i in range(len(a)):\n        if old_a[i] - a[i] != 0:\n            if old_a[i] % x != 0:\n                return 'NO'\n    return 'YES'\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if check(a) == False:\n        ans.append('YES')\n    elif min(a) == 1:\n        ans.append('YES')\n    else:\n        ans.append(ans_f(a))\nfor i in ans:\n    print(i)", "import sys\n\ndef rl():\n    return [int(w) for w in sys.stdin.readline().split()]\n\ndef gcd(i, j):\n    if j == 0:\n        return i\n    return gcd(j, i % j)\nfor _ in range(rl()[0]):\n    (n,) = rl()\n    a = rl()\n    b = sorted(a)\n    m = min(a)\n    flag = True\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            print('NO')\n            flag = False\n            break\n    if flag:\n        print('YES')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    b = sorted(a)\n    print('YNEOS'[any((y % b[0] for (x, y) in zip(a, b) if x ^ y))::2])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sorted(arr)\n    m = min(arr)\n    ok = True\n    for (a, b) in zip(arr, s):\n        if a % m != 0 and a != b:\n            ok = False\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, arr):\n    doneSort = sorted(arr)\n    smallest = doneSort[0]\n    index = 0\n    while index < n:\n        if arr[index] != doneSort[index]:\n            if arr[index] % smallest == 0 and doneSort[index] % smallest == 0:\n                pass\n            else:\n                return 'NO'\n        index += 1\n    return 'YES'\nfor x in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    print(solve(n, seq))", "t = int(input())\nans = []\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = min(l)\n    ls = sorted(l)\n    c = 'YES'\n    for i in range(len(l)):\n        if l[i] != ls[i]:\n            if gcd(m, ls[i]) != m:\n                c = 'NO'\n                break\n    ans.append(c)\n    t = t - 1\nfor i in ans:\n    print(i)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mini = min(a)\n    mult = []\n    check = [0] * n\n    for i in range(n):\n        if a[i] % mini == 0:\n            check[i] = 1\n            mult.append(a[i])\n    mult.sort()\n    k = 0\n    for i in range(n):\n        if check[i] == 1:\n            a[i] = mult[k]\n            k += 1\n    if sorted(a) == a:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split(' ')))\n    minimum = min(li)\n    temp = list(sorted(li))\n    i = 0\n    res = True\n    while i < n:\n        if li[i] != temp[i]:\n            if li[i] % minimum != 0:\n                res = False\n                break\n        i += 1\n    if res:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    li_1 = []\n    li = list(map(int, input().split()))\n    for j in li:\n        li_1.append(j)\n    li_1.sort()\n    m = min(li)\n    x = 0\n    for j in range(n):\n        if li[j] != li_1[j] and li[j] % m != 0:\n            x = 1\n            break\n    if x == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = min(arr)\n    temp = arr[:]\n    temp.sort()\n    f = 1\n    for i in range(n):\n        if arr[i] % m != 0:\n            if arr[i] != temp[i]:\n                f = 0\n                break\n    ANS.append('YES' if f else 'NO')\nprint('\\n'.join(ANS))", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    array = list(map(int, input().rstrip().split()))\n    array2 = sorted(array)\n    minm = array2[0]\n    for j in range(n):\n        if array[j] != array2[j] and array[j] % minm != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    m = min(a)\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            return 'NO'\n    return 'YES'\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    m = b[0]\n    f = True\n    for i in range(n):\n        if a[i] != b[i]:\n            if a[i] % m != 0:\n                f = False\n    print('YES' if f else 'NO')", "from typing import *\n\ndef can_sort(a: List[int]) -> bool:\n    a_min = min(a)\n    pivots = []\n    prev_el = None\n    positions = []\n    for (i, a_i) in enumerate(a):\n        if a_i % a_min == 0:\n            pivots.append(a_i)\n            positions.append(i)\n            prev_el = None\n        elif prev_el is not None and a_i < prev_el:\n            return False\n        else:\n            prev_el = a_i\n    pivots.sort(reverse=True)\n    for pos in positions:\n        a[pos] = pivots.pop()\n        if pos > 0:\n            if a[pos] < a[pos - 1]:\n                return False\n        if pos < len(a) - 1:\n            if a[pos + 1] % a_min != 0 and a[pos + 1] < a[pos]:\n                return False\n    return True\nt = int(input())\nfor _ in range(t):\n    input()\n    if can_sort(list(map(int, input().split(' ')))):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    m = b[0]\n    res = 0\n    for x in range(n):\n        if a[x] != b[x] and a[x] % m != 0:\n            res = 1\n            break\n    if res:\n        print('NO')\n    else:\n        print('YES')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst1 = lst.copy()\n    lst1.sort()\n    mi = min(lst)\n    er = 0\n    for j in range(n):\n        if lst[j] != lst1[j] and lst[j] % mi != 0:\n            er += 1\n            break\n    if er == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    z = True\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    c = b[0]\n    if a == b:\n        print('YES')\n    else:\n        for j in range(n):\n            if a[j] != b[j]:\n                if a[j] % c != 0:\n                    print('NO')\n                    z = False\n                    break\n        if z:\n            print('YES')", "from math import gcd\niter = int(input())\nfor _ in range(iter):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    aso = sorted(a)\n    m = min(a)\n    ans = 1\n    for i in range(n):\n        if a[i] != aso[i]:\n            if a[i] % m or aso[i] % m:\n                ans = 0\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for pratyush in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    (f, m) = (0, min(a))\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m:\n            f = 1\n    if f:\n        print('NO')\n    else:\n        print('YES')", "l = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min = a[0]\n    for i in range(1, n):\n        if min > a[i]:\n            min = a[i]\n    b = a.copy()\n    b.sort()\n    c = 0\n    odd = 0\n    t = 0\n    for i in range(n):\n        if a[i] % min != 0:\n            t = i\n            odd = a[i]\n            break\n    if odd == 0:\n        c = 1\n        l.append('YES')\n    else:\n        for i in range(n):\n            if a[i] % min == 0:\n                if b[i] % min != 0:\n                    c = 1\n                    l.append('NO')\n                    break\n            elif i > t:\n                if a[i] == odd:\n                    if i - t > 1:\n                        c = 1\n                        l.append('NO')\n                        break\n                    else:\n                        t = i\n                elif a[i] < odd:\n                    c = 1\n                    l.append('NO')\n                    break\n                else:\n                    t = i\n                    odd = a[i]\n    if c == 0:\n        l.append('YES')\nfor i in l:\n    print(i)", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    if n == 1:\n        print('YES')\n    else:\n        min1 = min(lst)\n        lst2 = []\n        for i in lst:\n            lst2.append(i)\n        lst2.sort()\n        nd = 0\n        for i in range(0, n):\n            if lst2[i] == lst[i]:\n                pass\n            elif lst2[i] % min1 == 0 and lst[i] % min1 == 0:\n                pass\n            else:\n                nd = 1\n                print('NO')\n                break\n        if nd == 0:\n            print('YES')", "def isDivisibleBy(n, x):\n    if n % x == 0:\n        return True\n    else:\n        return False\nn = int(input())\narrays = []\nlengths = []\nfor x in range(n):\n    length = int(input())\n    _list = [int(i) for i in input().split()]\n    arrays.append(_list)\n    lengths.append(lengths)\nfor array in arrays:\n    final = sorted(array)\n    minimum = final[0]\n    multiples = [isDivisibleBy(i, minimum) for i in array]\n    _bool = True\n    for i in range(len(array)):\n        if final[i] != array[i] and multiples[i] == False:\n            _bool = False\n            break\n    if _bool:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ali = list(map(int, input().split()))\n    q = sorted(ali)\n    f = 0\n    w = q[0]\n    for i in range(n):\n        if q[i] != ali[i]:\n            if math.gcd(w, ali[i]) != w:\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    i = 0\n    m = min(s)\n    b = 0\n    s1 = s.copy()\n    s1.sort()\n    c = 0\n    d = 0\n    se = set()\n    if s == s1:\n        c = 1\n        print('YES')\n    else:\n        k = 0\n        for i in range(n):\n            if s1[i] != s[i] and s[i] % m > 0:\n                k = 1\n        if k == 1:\n            print('NO')\n        else:\n            print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a2 = sorted(arr)\n    fl = 0\n    for k in range(n):\n        if arr[k] != a2[k]:\n            if arr[k] % a2[0] != 0:\n                fl = 1\n                break\n    if fl == 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\nimport math\n\ndef pro(arr):\n    n = len(arr)\n    f = 1\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            f = 0\n            break\n    if f:\n        print('YES')\n        return\n    lst = sorted(arr)\n    mini = min(arr)\n    for i in range(n):\n        if arr[i] != lst[i]:\n            if arr[i] % mini:\n                print('NO')\n                return\n    print('YES')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pro(arr)", "import sys, math\nfrom collections import deque, defaultdict\nimport operator as op\nfrom functools import reduce\nsys.setrecursionlimit(10 ** 6)\nI = sys.stdin.readline\n\ndef ii():\n    return int(I().strip())\n\ndef li():\n    return list(map(int, I().strip().split()))\n\ndef mi():\n    return map(int, I().strip().split())\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef main():\n    ans = ''\n    for _ in range(int(ii())):\n        n = ii()\n        arr = li()\n        if n == 1:\n            ans += 'YES\\n'\n        else:\n            tmp1 = sorted(arr)\n            tmp2 = []\n            for i in range(n):\n                if arr[i] != tmp1[i]:\n                    tmp2.append(arr[i])\n            if len(tmp2) == 0:\n                ans += 'YES\\n'\n            else:\n                x = min(arr)\n                for i in tmp2:\n                    if i % x != 0:\n                        ans += 'NO\\n'\n                        break\n                else:\n                    ans += 'YES\\n'\n    print(ans)\nmain()", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom functools import reduce\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return (N, A)\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parent = [x for x in range(n)]\n\n    def find(self, x):\n        if self.parent[x] == x:\n            return x\n        else:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x > y:\n            (x, y) = (y, x)\n        self.parent[y] = x\n\n    def parents(self):\n        return [self.find(x) for x in range(self.n)]\n\ndef divisor(n):\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if i * i != n:\n                divisors.append(n // i)\n        i += 1\n    return list(sorted(divisors))\n\ndef solve(N, A):\n    B = list(sorted(A))\n    M = B[0]\n    d = dict()\n    for i in range(N):\n        if A[i] != B[i]:\n            d[B[i]] = True\n    e = list(d.keys())\n    if len(e) == 0:\n        return 'YES'\n    k = reduce(gcd, e)\n    return 'YES' if k % M == 0 else 'NO'\nT = int(input().strip())\nfor t in range(T):\n    inputs = read()\n    print('%s' % solve(*inputs))", "from math import *\nfrom sys import *\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    r = a.copy()\n    r.sort()\n    m = min(a)\n    if m == 1:\n        print('YES')\n        continue\n    l = []\n    for i in range(n):\n        k = a[i] % m\n        if k == 0:\n            l.append(0)\n        else:\n            l.append(1)\n    for i in range(n):\n        if l[i] == 1:\n            if r[i] == a[i]:\n                pass\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "t = sorted\nfor s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    m = min(a)\n    b = [i for i in range(len(a)) if a[i] % m < 1]\n    for (i, x) in zip(b, t((a[i] for i in b))):\n        a[i] = x\n    print('YNEOS'[t(a) < a::2])", "q = int(input())\nans = []\nfor _ in range(q):\n    n = int(input())\n    S = list(map(int, input().split()))\n    x = min(S)\n    T = sorted(S)\n    flg = True\n    for (a, b) in zip(S, T):\n        if a != b:\n            if a % x != 0:\n                flg = False\n    ans.append('YES' if flg else 'NO')\nprint('\\n'.join(map(str, ans)))", "from sys import stdin, stdout\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nimport math\nI = lambda : map(int, stdin.readline().split())\nI1 = lambda : stdin.readline()\nfor _ in range(int(I1())):\n    n = int(I1())\n    a = list(I())\n    b = sorted(a)\n    m = min(a)\n    f = 0\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            f = 1\n            break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    possible = True\n    a_sort = sorted(a)\n    minv = min(a)\n    for i in range(n):\n        if a[i] != a_sort[i] and a[i] % minv != 0:\n            possible = False\n    print('YES' if possible else 'NO')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().strip().split(' ')))\n    k = []\n    k[:] = lst[:]\n    k.sort()\n    l = []\n    m = k[0]\n    for j in range(n):\n        if lst[j] % m == 0:\n            l.append(k[j])\n        else:\n            l.append(lst[j])\n    if l == k:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x_ans = sorted(x)\n    ans = 'YES'\n    for i in range(n):\n        if x[i] != x_ans[i] and x[i] % x_ans[0] != 0:\n            ans = 'NO'\n            break\n    print(ans)", "import math as m\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = l.copy()\n    p.sort()\n    d = dict()\n    min1 = min(l)\n    flag = 1\n    for i in range(n):\n        if p[i] != l[i]:\n            if p[i] % min1 != 0:\n                flag = 0\n                break\n    print(['NO', 'YES'][flag])", "def sol():\n    z1 = int(input())\n    arr = list(map(int, input().split()))\n    mini = min(arr)\n    li = sorted(arr)\n    for (i, j) in zip(li, arr):\n        if i != j and j % mini != 0:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    print(sol())", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split(' ')]\n        assert n == len(a)\n        gcd = min(a)\n        ideal = sorted(a)\n        possible = True\n        for i in range(len(a)):\n            if a[i] % gcd != 0 and a[i] != ideal[i]:\n                possible = False\n                break\n        if possible:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input(''))\narr = []\nfor i in range(t):\n    input('')\n    arr.append(list(map(int, input().split())))\nfor i in arr:\n    x = sorted(i)\n    diff = x\n    mn = x[0]\n    flag = 0\n    for j in range(len(i)):\n        if x[j] == i[j]:\n            continue\n        elif x[j] % mn:\n            flag = 1\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = sorted(a)\n    g = min(a)\n    for i in range(n):\n        if a[i] != b[i] and a[i] % g != 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    small = min(a)\n    for i in range(n):\n        if a[i] != b[i] and a[i] % small != 0:\n            print('NO')\n            return\n    print('YES')\n\ndef main():\n    t = int(input())\n    while t:\n        solve()\n        t -= 1\nmain()", "import math\ntest_case = int(input())\nwhile test_case:\n    test_case -= 1\n    myara = []\n    num = int(input())\n    myara.extend(map(int, input().split()))\n    yourara = sorted(myara)\n    flag = True\n    for x in range(num):\n        if not (myara[x] == yourara[x] or math.gcd(yourara[0], myara[x]) == yourara[0]):\n            flag = False\n            break\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')", "def check(lst, slst):\n    for i in range(len(lst)):\n        if lst[i] != slst[i] and lst[i] % slst[0] != 0:\n            print('NO')\n            return\n    print('YES')\n    return\nfor _ in range(int(input())):\n    input()\n    lst = list(map(int, input().split()))\n    check(lst, sorted(lst))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().split()\n    a = [int(x) for x in a]\n    b = sorted(a)\n    m = min(a)\n    flag = True\n    for i in range(n):\n        if a[i] != b[i] and a[i] % m != 0:\n            flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    final = sorted(a)\n    m = final[0]\n    for i in range(n):\n        if a[i] != final[i] and a[i] % m != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys\nimport math\nimport collections\nimport heapq\nimport queue\nimport itertools\nimport functools\nimport operator\nimport time\nreadline = sys.stdin.readline\nIPS = lambda : readline().rstrip()\nIP = lambda : int(readline().rstrip())\nMP = lambda : map(int, readline().split())\nLS = lambda : list(map(int, readline().split()))\n\ndef solve():\n    for _ in range(IP()):\n        n = IP()\n        a = LS()\n        mn = min(a)\n        b = sorted(a)\n        flg = 1\n        temp = [b[i] for i in range(n) if b[i] != a[i]]\n        for elem in temp:\n            if elem % mn != 0:\n                flg = 0\n                break\n        print('YES') if flg == 1 else print('NO')\nsolve()", "t = int(input())\nanswer = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    bool = True\n    mini = min(a)\n    fixed = []\n    for i in range(n):\n        if a[i] % mini:\n            fixed.append((i, a[i]))\n    a.sort()\n    for element in fixed:\n        if a[element[0]] != element[1]:\n            bool = False\n            break\n    if bool:\n        answer.append('YES')\n    else:\n        answer.append('NO')\nprint('\\n'.join(answer))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    for i in a:\n        x.append(i)\n    x.sort()\n    mini = x[0]\n    q = 0\n    for i in range(n):\n        if x[i] != a[i] and a[i] % mini > 0:\n            q = 1\n            break\n    if q == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    b = a.copy()\n    b.sort()\n    min_ = b[0]\n    ok = True\n    for i in range(n):\n        if a[i] != b[i] and a[i] % min_ > 0:\n            ok = False\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    sort_li = li.copy()\n    sort_li.sort()\n    min_num = sort_li[0]\n    flage = True\n    for i in range(0, n):\n        if li[i] != sort_li[i]:\n            if li[i] % min_num != 0:\n                flage = False\n                break\n    if flage == True:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    al = list(map(int, input().split()))\n    cop = al.copy()\n    cop.sort()\n    if n == 1:\n        print('YES')\n        return\n    view = []\n    sor = True\n    for i in range(n):\n        if al[i] != cop[i]:\n            sor = False\n        if al[i] != cop[i] or al[i] % cop[0] == 0:\n            view.append(al[i])\n    if sor:\n        print('YES')\n        return\n    great = gcd(view[0], view[1])\n    for i in range(2, len(view)):\n        great = gcd(great, view[i])\n    print('YES' if great == cop[0] else 'NO')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    minm = min(l)\n    if len(l) == 1 or l == sorted(l):\n        print('YES')\n    else:\n        temp = sorted(l)\n        flag = 0\n        for i in range(n):\n            if l[i] != temp[i] and l[i] % minm != 0:\n                flag = 1\n                break\n        if flag == 0:\n            print('YES')\n        else:\n            print('NO')"]