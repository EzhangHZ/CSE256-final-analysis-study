["def prepare(n, MOD):\n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n    return (factorials, invs)\n\ndef solve(n, k):\n    MOD = 998244353\n    if k == 0:\n        ans = 1\n        for i in range(2, n + 1):\n            ans = ans * i % MOD\n        return ans\n    if k > n - 1:\n        return 0\n    (facts, invs) = prepare(n, MOD)\n    use_row = n - k\n    t = 1\n    ans = 0\n    for r in range(use_row, 0, -1):\n        ans = (ans + t * facts[use_row] * invs[r] * invs[use_row - r] * pow(r, n, MOD)) % MOD\n        t *= -1\n    return ans * 2 * facts[n] * invs[use_row] * invs[n - use_row] % MOD\n(n, k) = map(int, input().split())\nprint(solve(n, k))", "def prepare(n, MOD):\n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n    return (factorials, invs)\n\ndef result(n, k):\n    MOD = 998244353\n    if k == 0:\n        ans = 1\n        for i in range(2, n + 1):\n            ans = ans * i % MOD\n        return ans\n    if k > n - 1:\n        return 0\n    (facts, invs) = prepare(n, MOD)\n    use_row = n - k\n    t = 1\n    ans = 0\n    for r in range(use_row, 0, -1):\n        ans = (ans + t * facts[use_row] * invs[r] * invs[use_row - r] * pow(r, n, MOD)) % MOD\n        t *= -1\n    return ans * 2 * facts[n] * invs[use_row] * invs[n - use_row] % MOD\n(n, k) = map(int, input().split())\nprint(result(n, k))", "def prepare(n, MOD):\n    f = 1\n    factorials = [1]\n    for m in range(1, n + 1):\n        f *= m\n        f %= MOD\n        factorials.append(f)\n    inv = pow(f, MOD - 2, MOD)\n    invs = [1] * (n + 1)\n    invs[n] = inv\n    for m in range(n, 1, -1):\n        inv *= m\n        inv %= MOD\n        invs[m - 1] = inv\n    return (factorials, invs)\n\ndef solve(n, k):\n    MOD = 998244353\n    if k == 0:\n        ans = 1\n        for i in range(2, n + 1):\n            ans = ans * i % MOD\n        return ans\n    if k > n - 1:\n        return 0\n    (facts, invs) = prepare(n, MOD)\n    use_row = n - k\n    t = 1\n    ans = 0\n    for r in range(use_row, 0, -1):\n        ans = (ans + t * facts[use_row] * invs[r] * invs[use_row - r] * pow(r, n, MOD)) % MOD\n        t *= -1\n    return ans * 2 * facts[n] * invs[use_row] * invs[n - use_row] % MOD\n(n, k) = map(int, input().split())\nprint(solve(n, k))", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)", "MOD = 998244353\n(n, k) = map(int, input().split())\nx = n - k\nnum = 1\nden = 1\ns = 0\ntden = 1\nfor i in range(x):\n    v = pow(x - i, n, MOD) * num\n    s = (s * den + (-1) ** i * v * tden) % MOD\n    tden = tden * den % MOD\n    num = num * (x - i) % MOD\n    den = den * (i + 1) % MOD\nnum = 1\nden = 1\nfor i in range(x):\n    num = num * (n - i) % MOD\n    den = den * (i + 1) % MOD\ns = (1 + (k != 0)) * s * num * pow(den * tden, MOD - 2, MOD) % MOD\nprint(s)"]