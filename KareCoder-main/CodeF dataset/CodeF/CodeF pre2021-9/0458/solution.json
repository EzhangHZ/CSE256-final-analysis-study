["n = int(input())\na = map(int, input().split())\na = list(sorted(a))\nif n >= 60:\n    print(sum(a) - n)\nelse:\n    min_dif = -1\n    for c in range(1, 10 ** 6):\n        dif = 0\n        for i in range(len(a)):\n            dif += abs(c ** i - a[i])\n        if dif < min_dif or min_dif == -1:\n            min_dif = dif\n        else:\n            break\n    print(min_dif)", "import math\nn = int(input())\narr = list(map(int, input().split()))\nif n <= 35:\n    arr.sort()\n    m = int(max(arr) ** (1 / (n - 1)))\n    sMin = float('inf')\n    for k in range(1, m + 2):\n        s = 0\n        for p in range(n):\n            s += abs(arr[p] - k ** p)\n        sMin = min(sMin, s)\n    print(sMin)\nelse:\n    print(sum(arr) - n)", "from math import *\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nif n > 32:\n    print(sum(l) - n)\nelse:\n    x = log2(l[n - 1]) / (n - 1)\n    x = 2 ** x\n    c1 = ceil(x)\n    c2 = floor(x)\n    curr1 = 1\n    curr2 = 1\n    t1 = 0\n    t2 = 0\n    for i in range(n):\n        t1 += abs(l[i] - curr1)\n        t2 += abs(l[i] - curr2)\n        curr1 *= c1\n        curr2 *= c2\n    print(min(t1, t2))", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = sum(a) - len(a)\nfor c in range(2, 10 ** 9 + 1):\n    (s, p) = (0, 1)\n    for v in a:\n        s += abs(v - p)\n        if s > ans:\n            break\n        p *= c\n    if s > ans:\n        break\n    ans = s\nprint(ans)", "n = int(input())\nl = sorted(list(map(int, input().split())))\nif n < 34:\n    x = int(1000000000 ** (1 / (n - 1)))\n    print(min((sum((abs(l[i] - r ** i) for i in range(n))) for r in range(1, x + 2))))\nelse:\n    print(sum((i - 1 for i in l)))", "(n, a) = (int(input()), [int(x) for x in input().split()])\na.sort()\n(ans, temp, c) = (float('inf'), 0, 1)\nwhile c:\n    (temp, mj) = (a[0] - 1, c)\n    for i in range(1, n):\n        temp += abs(a[i] - mj)\n        if temp > ans:\n            break\n        mj *= c\n    if temp > ans:\n        break\n    ans = temp\n    c += 1\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = sum(a) - len(a)\nfor c in range(2, 10 ** 9 + 1):\n    (s, p) = (0, 1)\n    for v in a:\n        s += abs(v - p)\n        if s > ans:\n            break\n        p *= c\n    if s > ans:\n        break\n    ans = s\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nres = sum(a) - len(a)\nfor i in range(2, 10 ** 9 + 1):\n    (s, p) = (0, 1)\n    for v in a:\n        s += abs(v - p)\n        if s > res:\n            break\n        p *= i\n    if s > res:\n        break\n    res = s\nprint(res)", "n = int(input())\nA = list(map(int, input().split()))\nA.sort()\ninf = 10 ** 18\nans = sum(A)\nfor x in range(1, 10 ** 9):\n    curcost = 0\n    curpow = 1\n    for i in range(n):\n        curcost += abs(A[i] - curpow)\n        curpow *= x\n        if curpow > inf:\n            break\n    if curpow > inf:\n        break\n    if curpow / x > ans + A[-1]:\n        break\n    ans = min(ans, curcost)\nprint(ans)", "import math\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nk = math.floor(pow(a[-1], 1 / (len(a) - 1)))\na1 = 0\nfor i in range(0, n):\n    a1 += abs(k ** i - a[i])\nk += 1\na2 = a1\nif n < 40:\n    a2 = 0\n    for i in range(0, n):\n        a2 += abs(k ** i - a[i])\nprint(min(a1, a2))", "from math import pow\n\ndef rn_value(n):\n    p = 9 // n\n    if p == 0:\n        return 10\n    if p == 1:\n        return 100\n    if p == 2:\n        return 1000\n    if p == 3:\n        return 10000\n    if p == 4:\n        return 100000\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\nif n > 36:\n    su = sum(arr)\n    ans = su - n\n    print(ans)\nelse:\n    mn = 1e+18\n    p = 18 // n\n    rn = 10\n    rn = rn_value(n - 1)\n    for i in range(1, rn):\n        mul = 1\n        add = 0\n        for j in range(n):\n            add += abs(arr[j] - mul)\n            mul *= i\n        if mn > add:\n            mn = add\n        if mul > arr[n - 1] * i:\n            break\n    print(mn)", "n = int(input())\na = [int(i) for i in input().split()]\nif n > 60:\n    print(sum(a) - n)\nelse:\n    ans = 4557430888798830399\n    a.sort()\n    nlen = int(pow(max(a), 1 / (len(a) - 1))) + 1\n    i = 1\n    while i <= nlen:\n        t = 0\n        for j in range(len(a)):\n            t += abs(a[j] - i ** j)\n        ans = min(ans, t)\n        i += 1\n    print(ans)", "import sys\n\ndef main():\n    n = int(input())\n    A = sorted([int(a) for a in input().split()])\n    ans = sum(A) - len(A)\n    for c in range(2, 1000000001):\n        (s, p) = (0, 1)\n        for a in A:\n            s += abs(a - p)\n            if s > ans:\n                break\n            p *= c\n        if s > ans:\n            break\n        ans = s\n    print(ans)\nmain()", "n = int(input())\na = list(map(int, input().split()))\na.sort()\ntemp = int(pow(a[n - 1], 1 / (n - 1)))\ntop = temp + 1\nif n < 33:\n    (p1, p2) = (1, 1)\n    (temp1, temp2) = (abs(p1 - a[0]), abs(p2 - a[0]))\n    for i in range(1, n):\n        p1 = p1 * top\n        p2 = p2 * (top - 1)\n        temp1 += abs(p1 - a[i])\n        temp2 += abs(p2 - a[i])\n    print(min(temp1, temp2))\nelse:\n    sum = 0\n    for i in range(n):\n        sum += a[i] - 1\n    print(sum)", "import math\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\na = int(arr[-1] ** (1 / (n - 1))) + 1\nminm = float('inf')\nc = 0\nm = 0\nif a ** (len(arr) - 1) < 10 ** 14:\n    for i in range(a, 0, -1):\n        arr1 = [i ** j for j in range(n)]\n        count = 0\n        for (e1, e2) in zip(arr1, arr):\n            count += abs(e1 - e2)\n        if minm >= count:\n            minm = count\n            c += 1\n        m += 1\n        if m == 2:\n            break\nelse:\n    count = 0\n    for i in arr:\n        count += abs(1 - i)\n    minm = min(count, minm)\nprint(minm)", "n = int(input())\nline = input()\narr = [int(val) for val in line.split()]\narr.sort()\nmx = arr[n - 1]\nroot = int(mx ** (1 / (n - 1)))\nans = 10 ** 20\nfor i in range(-1000, 1000):\n    curr = root + i\n    if curr <= 0:\n        continue\n    if curr == 1:\n        continue\n    val = 0\n    counter = 0\n    temp = 1\n    while temp <= 10 ** 10:\n        counter += 1\n        temp *= curr\n    if counter < n:\n        continue\n    temp = 1\n    for x in arr:\n        val += abs(x - temp)\n        temp *= curr\n    ans = min(ans, val)\nval = 0\nfor x in arr:\n    val += abs(x - 1)\nans = min(ans, val)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nif n >= 35:\n    sum0 = 0\n    for j in range(n):\n        sum0 = sum0 + a[j] - 1\n    print(sum0)\nelse:\n    c = 1\n    while c ** (n - 1) < a[n - 1]:\n        c = c + 1\n    if c == 1:\n        sum0 = 0\n        b = 1\n        for j in range(n):\n            if a[j] - b > 0:\n                k = a[j] - b\n            else:\n                k = b - a[j]\n            sum0 = sum0 + k\n            print(sum0)\n    else:\n        sum1 = 0\n        b = 1\n        for j in range(n):\n            if a[j] - b > 0:\n                k = a[j] - b\n            else:\n                k = b - a[j]\n            sum1 = sum1 + k\n            b = b * c\n        sum2 = 0\n        b = 1\n        for j in range(n):\n            if a[j] - b > 0:\n                k = a[j] - b\n            else:\n                k = b - a[j]\n            sum2 = sum2 + k\n            b = b * (c - 1)\n        if sum1 > sum2:\n            print(sum2)\n        else:\n            print(sum1)", "from collections import Counter\nfrom math import log, e, inf\nt = 1\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    res = sum(a) - n\n    for i in range(2, 10 ** 9 + 1):\n        (s, p) = (0, 1)\n        for j in a:\n            s += abs(j - p)\n            if s > res:\n                break\n            p *= i\n        if s > res:\n            break\n        res = s\n    print(res)", "import sys\nimport math\n\ndef main():\n    N = int(sys.stdin.readline())\n    B = sorted([int(i) for i in sys.stdin.readline().split()])\n    soln = math.inf\n    limit = pow(2, 63)\n    X = 1\n    stop = False\n    while not stop:\n        local_soln = 0\n        P = 1\n        for b in B:\n            local_soln += abs(b - P)\n            if local_soln > soln:\n                stop = True\n                break\n            P *= X\n            if P > limit:\n                stop = True\n                break\n        X += 1\n        if not stop:\n            soln = min(soln, local_soln)\n    print(soln)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\ninf = 10 ** 16\nn = II()\naa = LI()\naa.sort()\nlim = sum(aa) - n\nl = 1\nr = 10 ** 9\n\ndef val(m):\n    res = 0\n    mp = 1\n    for (i, a) in enumerate(aa):\n        res += abs(a - mp)\n        if res > lim:\n            return inf\n        mp *= m\n    return res\nwhile l + 2 < r:\n    ml = (2 * l + r) // 3\n    mr = (l + 2 * r) // 3\n    vl = val(ml)\n    vr = val(mr)\n    if vl == vr == inf:\n        r = ml\n    elif vl < vr:\n        r = mr\n    else:\n        l = ml\nm = (l + r) // 2\nprint(min(val(l), val(m), val(r)))", "n = int(input())\nl = sorted(list(map(int, input().split())))\na = sum((i - 1 for i in l))\nif n < 34:\n    x = int(1000000000 ** (1 / (n - 1)))\n    for r in range(2, x + 2):\n        a = min(a, sum([abs(l[i] - r ** i) for i in range(n)]))\nprint(a)", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nmaxi = 10 ** 14\nans = maxi\nfor c in range(1, maxi):\n    cur = 0\n    p = 1\n    for j in range(n):\n        cur += abs(l[j] - p)\n        p = p * c\n        if cur >= maxi:\n            break\n    if cur >= ans:\n        break\n    ans = min(ans, cur)\nprint(ans)", "def solve(arr):\n    arr.sort()\n    c = 2\n    ans = sum((v - 1 for v in arr))\n    while True:\n        cur = 1\n        cur_ans = 0\n        for v in arr:\n            if cur - arr[-1] > ans:\n                return ans\n            cur_ans += abs(v - cur)\n            cur *= c\n        ans = min(ans, cur_ans)\n        c += 1\nn = int(input())\n(*arr,) = map(int, input().split())\nprint(solve(arr))", "import math\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nmaa = l[n - 1]\ni = 1\nif n <= 100:\n    while True:\n        k = int(math.pow(i, n - 1))\n        if k >= maa:\n            break\n        i += 1\n    p = i\n    s = 0\nelse:\n    p = 1\n    s = 0\nfor i in range(n):\n    s += abs(l[i] - pow(p, i))\nmn = s\ns = 0\np = p - 1\nif p != 0:\n    for i in range(n):\n        s += abs(l[i] - pow(p, i))\n    print(min(mn, s))\nelse:\n    print(mn)", "n = int(input())\nA = list(map(int, input().split()))\nA.sort()\nmx = 2 ** 63\nans = mx\ncval = -1\nfor c in range(1, 100000):\n    P = [1]\n    while P[-1] < mx and len(P) < n:\n        P.append(P[-1] * c)\n    if len(P) != n:\n        break\n    cost = 0\n    for i in range(n):\n        cost += abs(A[i] - P[i])\n    if cost < ans:\n        ans = cost\n        cval = c\n    else:\n        break\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef solve(cur):\n    ans = 0\n    tot = cur\n    cur = 1\n    for aa in a:\n        ans += abs(aa - cur)\n        cur *= tot\n    return ans\nans = solve(1)\ntmp = int(pow(a[-1], 1 / (n - 1)))\nif n <= 32:\n    for i in range(tmp - 1, tmp + 2):\n        ans = min(ans, solve(i))\nprint(ans)", "(n, lst, ans, c) = (int(input()), sorted(map(int, input().split(' '))), 999999999999999, 1)\nwhile True:\n    (pw, br, temp, big) = (1, 0, 0, 999999999999999)\n    for i in range(n):\n        if pw > big:\n            br = 1\n            break\n        temp += abs(pw - lst[i])\n        pw = pw * c\n    if br:\n        break\n    if temp < ans:\n        ans = temp\n        c = c + 1\n    else:\n        break\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "from collections import Counter\nfrom typing import *\n(n, a) = (int(input()), [int(x) for x in input().split()])\na.sort()\n(ans, temp, c) = (float('inf'), 0, 1)\nwhile c:\n    (temp, ci) = (0, 1)\n    for i in range(n):\n        temp += abs(a[i] - ci)\n        if temp > ans:\n            break\n        ci *= c\n    if temp > ans:\n        break\n    ans = temp\n    c += 1\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nif len(arr) == 1:\n    print(arr[0] - 1)\nelif len(arr) <= 50:\n    arr.sort()\n    ans = pow(10, 15)\n    num = 1\n    prev = pow(10, 15)\n    while 1:\n        curr = 0\n        for i in range(n):\n            curr += abs(arr[i] - pow(num, i))\n        if curr > prev:\n            break\n        if curr < ans:\n            ans = curr\n        prev = curr\n        num += 1\n    print(ans)\nelse:\n    print(sum(arr) - n)", "def cost(l, d):\n    val = abs(l[0] - 1)\n    p = 1\n    for i in range(1, len(l)):\n        p *= d\n        val += abs(l[i] - p)\n    return val\nn = int(input())\narr = sorted(map(int, input().split()))\nmn = sum(arr) - n\nc = 2\nwhile c ** (n - 1) - arr[-1] <= mn:\n    mn = min(mn, cost(arr, c))\n    c += 1\nprint(mn)", "import math\n\ndef getCost(arr, c):\n    power_val = 1\n    err = 0\n    for e in arr:\n        err += abs(power_val - e)\n        power_val *= c\n    return err\n\ndef findCost(arr):\n    c_max = int(round(math.pow(10, 9 / (len(arr) - 1))))\n    minCost = None\n    for option in range(1, c_max + 1):\n        this_cost = getCost(arr, option)\n        if minCost == None or this_cost < minCost:\n            minCost = this_cost\n    return minCost\n\ndef main():\n    _ = int(input())\n    a = [int(x) for x in input().strip().split()]\n    cost = findCost(sorted(a))\n    print(cost)\nmain()", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nmaxi = 10 ** 14\nans = maxi\nfor c in range(1, maxi):\n    cur = 0\n    p = 1\n    for j in range(n):\n        cur += abs(l[j] - p)\n        p = p * c\n        if p >= maxi:\n            break\n    if p >= maxi or cur >= ans:\n        break\n    ans = min(ans, cur)\nprint(ans)", "from math import ceil, floor, sqrt\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = sum(a) - 1\ninf = 10 ** 18\nfor x in range(1, 10 ** 9):\n    cp = 1\n    cc = 0\n    for i in range(n):\n        cc += abs(a[i] - cp)\n        cp *= x\n        if cp > inf:\n            break\n    if cp > inf:\n        break\n    if cp / x > ans + a[n - 1]:\n        break\n    ans = min(ans, cc)\nprint(ans)", "from collections import Counter\nfrom math import log\nn = int(input())\na = sorted([int(x) for x in input().split()])\nresult = sum((abs(x - 1) for x in a))\nif log(result + a[-1]) < (n - 1) * log(2):\n    print(result)\nelse:\n    c = 2\n    while True:\n        cost = 0\n        S = 1\n        for i in range(n):\n            cost += abs(a[i] - S)\n            S *= c\n        if result is None or cost < result:\n            result = cost\n        c += 1\n        if S // c > a[-1]:\n            break\n    print(result)", "n = int(input())\na = map(int, input().split())\na = list(a)\na.sort()\nans = 100000000000000000000\nbase = 1\nwhile True:\n    tmp = 0\n    tcp = 1\n    for i in range(n):\n        tmp += abs(a[i] - tcp)\n        tcp *= base\n    base += 1\n    if ans >= tmp:\n        ans = tmp\n    else:\n        break\n    if base ** (n - 1) >= 1000000000000000000:\n        break\nprint(ans)", "import sys\nimport math\nimport bisect\n\ndef solve(A):\n    n = len(A)\n    min_val = 10 ** 18\n    p = 1\n    while True:\n        tmp = 1\n        val = 0\n        for i in range(n):\n            val += abs(tmp - A[i])\n            tmp *= p\n            if val >= min_val:\n                break\n        if min_val > val:\n            min_val = val\n        else:\n            break\n        p += 1\n    return min_val\n\ndef main():\n    n = int(input())\n    A = sorted(list(map(int, input().split())))\n    print(solve(A))\nmain()", "n = int(input())\na = list(map(int, input().split()))\na.sort()\np = int(pow(a[n - 1], 1.0 / (n - 1)))\nans = 100000000000000000\n\ndef qmi(a, b):\n    res = 1\n    while b != 0:\n        if b % 2:\n            res = res * a\n        a = a * a\n        b //= 2\n    return res\nif n > 32:\n    ans = 0\n    for i in range(n):\n        ans += a[i] - 1\n    print(ans)\nelse:\n    for i in range(max(1, p - 10), p + 10):\n        res = 0\n        for j in range(n):\n            res += abs(a[j] - qmi(i, j))\n        ans = min(ans, res)\n    print(ans)", "N = int(input())\nA = list(map(int, input().split()))\nA.sort()\nmav = A[N - 1]\nr = 0\nm = 99999999999999\nh = 99999999999999999999\nfor j in range(1, h):\n    k = 1\n    r = 0\n    for i in range(N):\n        r = r + abs(k - A[i])\n        k = k * j\n        if k > 100000000000000:\n            break\n    if k > 100000000000000:\n        break\n    m = min(m, r)\nprint(m)", "import math\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nm = 1000000000000000\nk = 1\ns = 0\nsq = int(math.sqrt(l[n - 1]))\nfor i in range(sq + 2, 0, -1):\n    s = 0\n    k = 1\n    for j in range(n):\n        s = s + abs(l[j] - k)\n        k = k * (sq + 3 - i)\n        if k > 1000000000000000:\n            break\n    if m >= s:\n        m = s\n    else:\n        break\nprint(m)", "n = int(input())\narr = [int(k) for k in input().split()]\narr.sort()\ninit = int(arr[-1] ** (1 / (n - 1)))\nif n > 32:\n    ans = 0\n    for i in range(n):\n        ans += arr[i]\n    print(ans - n)\nelse:\n    ans1 = 0\n    ans2 = 0\n    ans3 = 0\n    for i in range(n):\n        ans1 += abs(arr[i] - init ** i)\n        ans2 += abs(arr[i] - (init - 1) ** i)\n        ans3 += abs(arr[i] - (init + 1) ** i)\n    print(min(ans1, ans2, ans3))", "def powSeq():\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    y = a[-1]\n    ans = 0\n    x = y = int(pow(y, 1 / (n - 1)))\n    for i in range(n):\n        ans += abs(y ** i - a[i])\n    ans1 = 0\n    y = x + 1\n    for i in range(n):\n        if y ** i > 10 ** 13:\n            break\n        ans1 += abs(y ** i - a[i])\n    return min(ans, ans1)\nprint(powSeq())", "n = int(input())\nlis = []\nlis = list(map(int, input().split()))\nlist.sort(lis)\ni = max(1, int(lis[-1] ** (1 / float(n - 1))))\nans = -1\ninf = 1e+19\nfor j in range(i, i + 2):\n    sum = 0\n    p = 1\n    for k in range(n):\n        sum += abs(lis[k] - p)\n        p *= j\n        if p > inf:\n            sum = inf + 10\n            break\n    if ans == -1:\n        ans = sum\n    else:\n        ans = min(ans, sum)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nmaxi = 10 ** 14\nans = maxi\nfor c in range(1, maxi):\n    cur = 0\n    p = 1\n    for j in range(n):\n        cur += abs(l[j] - p)\n        p = p * c\n        if cur >= ans:\n            break\n    if cur >= ans:\n        break\n    ans = min(ans, cur)\nprint(ans)", "from math import *\nimport sys\nlarge = 1000000000000000000\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = sum(a) - n\nfor i in range(1, 1000000000):\n    c = 1\n    tmp = 0\n    for j in range(n):\n        x = abs(c - a[j])\n        c *= i\n        if c > large:\n            break\n        tmp += x\n    if c > large:\n        break\n    if c / i > ans + a[-1]:\n        break\n    ans = min(ans, tmp)\nprint(int(ans))", "n = int(input())\na_list = list(map(int, input().split()))\na_list = sorted(a_list)\nif n <= 2:\n    print(a_list[0] - 1)\nelse:\n    result = sum(a_list) - n\n    for i in range(1, 10 ** 9):\n        power = 1\n        cost = 0\n        for k in range(len(a_list)):\n            cost += abs(a_list[k] - power)\n            power *= i\n            if power > 10 ** 18:\n                break\n        if power > 10 ** 18:\n            break\n        if power // i > result + a_list[n - 1]:\n            break\n        result = min(result, cost)\n    print(result)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\na.sort()\ncost = 0\nfor i in range(n):\n    a.append(a[i])\n    cost += a[i] - 1\nif n > 50:\n    print(cost)\nelse:\n    cost = -1\n    for i in range(1, 1000000000):\n        curr = 0\n        c = 1\n        for j in range(n):\n            curr += abs(a[j] - c)\n            c *= i\n        if cost == -1:\n            cost = curr\n        elif cost < curr:\n            break\n        elif cost >= curr:\n            cost = curr\n    print(cost)", "N = int(input())\na = sorted(list(map(int, input().split())))\nc = 1\nl = int(a[N - 1] ** (1 / (N - 1)))\nr = l + 1\nscorel = 0\nscorer = 0\nfor i in range(N):\n    scorel += abs(a[i] - l ** i)\nfor i in range(N):\n    if r ** i > 10 ** 15:\n        break\n    scorer += abs(a[i] - r ** i)\nprint(min(scorer, scorel))", "def powSeq():\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    y = a[-1]\n    ans = 0\n    x = y = int(pow(y, 1 / (n - 1)))\n    for i in range(n):\n        ans += abs(y ** i - a[i])\n    ans1 = 0\n    y = x + 1\n    for i in range(n):\n        if y ** i > 10 ** 14:\n            break\n        ans1 += abs(y ** i - a[i])\n    return min(ans, ans1)\nprint(powSeq())", "from sys import stdin\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().rstrip().split()))\na = sorted(a)\nanswer = 10 ** 18\nc = 0\nflag = True\nwhile flag:\n    c += 1\n    newAns = 0\n    for i in range(n):\n        newAns += abs(a[i] - c ** i)\n        if newAns > answer:\n            flag = False\n            break\n    answer = min(answer, newAns)\nprint(answer)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = sum(a) - n\nfor i in range(1, 10 ** 9):\n    curpow = 1\n    curcost = 0\n    for j in range(n):\n        curcost += abs(a[j] - curpow)\n        curpow *= i\n        if curpow > 10 ** 18:\n            break\n    if curpow > 10 ** 18:\n        break\n    if curpow / i > ans + a[n - 1]:\n        break\n    ans = min(ans, curcost)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\nx = list(map(int, input().split()))\nx.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(x[0] - 1)\nelse:\n    ans = sum(x) - n\n    for i in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for j in range(n):\n            curCost += abs(x[j] - curPow)\n            curPow *= i\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / i > ans + x[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nbenchmark = sum([abs(x - 1) for x in l])\n\ndef f(num):\n    err = 0\n    for (i, x) in enumerate(l):\n        err += abs(x - num ** i)\n        if err > benchmark:\n            return float('inf')\n    return err\nx = 10000000000.0 + 1\nans = 0\nwhile x > 0:\n    while f(ans + x) > f(ans + x + 1):\n        ans += x\n    x //= 2\nans += 1\ntotal = sum([int(abs(x - ans ** i)) for (i, x) in enumerate(l)])\nprint(total)", "N = int(input())\na = list(map(int, input().split()))\na.sort()\nc = 1\nl = int(a[N - 1] ** (1 / (N - 1)))\nr = l + 1\nscorel = 0\nfor i in range(N):\n    scorel += abs(a[i] - l ** i)\nscorer = 0\nfor i in range(N):\n    if r ** i > 10 ** 15:\n        break\n    scorer += abs(a[i] - r ** i)\nprint(min(scorer, scorel))", "import math\nn = int(input())\narray = list(map(int, input().split()))\narray.sort()\nli = array[-1] ** (1 / (n - 1))\ncmax = math.ceil(li)\nresult = 100000000000000000\nfor c in range(1, cmax + 1):\n    p = 0\n    for i in range(n):\n        p += abs(array[i] - c ** i)\n        if p > result:\n            break\n    result = min(p, result)\nprint(result)", "n = int(input())\na = list(map(int, input().split(' ')))\na.sort()\nres = int(1000000000.0 * n)\nlim = res + int(100000.0)\nfor c in range(1, int(1000000000.0)):\n    r = 0\n    z = 1\n    test = True\n    for i in range(n):\n        if z > lim:\n            test = False\n            break\n        r += abs(a[i] - z)\n        z *= c\n    if not test:\n        break\n    res = min(r, res)\nprint(res)", "n = int(input())\na = sorted(list(map(int, input().split())))\nc = 1\ncost = float('inf')\nwhile 1:\n    y = 0\n    for i in range(n):\n        y += abs(c ** i - a[i])\n    if y < cost:\n        cost = y\n        c += 1\n        if c ** (n - 1) > 10 ** 18:\n            break\n    else:\n        break\nprint(cost)", "import math\nn = int(input())\nnumber = sorted(list(map(int, input().split())))\nfloor = math.floor(number[-1] ** (1 / (n - 1)))\nceil = math.ceil(number[-1] ** (1 / (n - 1)))\nans = 0\nif abs(number[-1] - floor ** (n - 1)) + abs(number[-2] - floor ** (n - 2)) + abs(number[-3] - floor ** (n - 3)) > abs(number[-1] - ceil ** (n - 1)) + abs(number[-2] - ceil ** (n - 2)) + abs(number[-3] - ceil ** (n - 3)):\n    hey = ceil\nelse:\n    hey = floor\nfor i in range(len(number)):\n    ans += abs(number[i] - hey ** i)\nprint(ans)", "import math\nfrom sys import stdin\nn = int(stdin.readline().rstrip())\na = list(map(int, stdin.readline().rstrip().split(' ')))\na.sort()\nres1 = 0\nres2 = 0\nif n > 32:\n    c = 1\n    c2 = 1\n    for i in range(n):\n        res1 += abs(a[i] - c ** i)\n    print(res1)\nelse:\n    c = int(math.exp(math.log(a[-1]) / (n - 1)))\n    c2 = c + 1\n    for i in range(n):\n        res1 += abs(a[i] - c ** i)\n        res2 += abs(a[i] - c2 ** i)\n    print(min(res1, res2))", "n = int(input())\na = sorted(list(map(int, input().split())))\nx = 1\nc = 10 ** 18\nf = 0\nwhile x ** (n - 1) <= f + a[-1]:\n    m = 0\n    for i in range(n):\n        m += abs(a[i] - x ** i)\n    if m < c:\n        c = m\n    if x == 1:\n        f = m\n    x += 1\nprint(c)", "n = int(input())\nl = [int(i) for i in input().split()]\nl.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(l[0] - 1)\nelse:\n    ans = sum(l) - n\n    for p in range(1, 10 ** 9):\n        current_power = 1\n        current_cost = 0\n        for i in range(n):\n            current_cost += abs(l[i] - current_power)\n            current_power *= p\n            if current_power > inf:\n                break\n        if current_power > inf:\n            break\n        if current_power / p > ans + l[n - 1]:\n            break\n        ans = min(current_cost, ans)\n    print(ans)", "n = int(input())\na = list(map(int, input().split(' ')))\na.sort()\nINF = 10 ** 18\nif n < 2:\n    print(abs(a[0] - 1))\nelse:\n    f1 = sum(a) - n\n    for i in range(1, 10 ** 9):\n        cost = 0\n        p = 1\n        for j in range(n):\n            cost += abs(a[j] - p)\n            p *= i\n            if p > INF:\n                break\n        if p > INF:\n            break\n        if p / i > f1 + a[n - 1]:\n            break\n        f1 = min(f1, cost)\n    print(f1)", "n = int(input())\narr = list(map(lambda x: int(x), input().split()))\narr.sort()\nmax_ans = sum(arr) - n\nans = max_ans\ninf = 10 ** 18\nc = 1\nwhile True:\n    c += 1\n    c_pow_i = 1\n    temp_ans = 0\n    diff = 0\n    for i in range(0, n):\n        diff = abs(arr[i] - c_pow_i)\n        temp_ans += diff\n        c_pow_i *= c\n        if c_pow_i > inf:\n            break\n    if c_pow_i > inf:\n        break\n    if diff > max_ans:\n        break\n    else:\n        ans = min(ans, temp_ans)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nm = sum(a) - n\nif 2 ** n > 4000000000 * n:\n    print(m)\nelse:\n    b = p = 2\n    while b >= 0:\n        q = 1\n        b = c = 0\n        for i in range(n):\n            b += a[i] - q\n            c += abs(a[i] - q)\n            q *= p\n        if c < m:\n            m = c\n        p += 1\n    print(m)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nc = 1\nbig = 10 ** 18\nans = big\nwhile 1:\n    val = 0\n    for i in range(n):\n        val += abs(c ** i - a[i])\n    if val < ans:\n        ans = val\n        c += 1\n        if c ** (n - 1) >= big:\n            break\n    else:\n        break\nprint(ans)", "n = int(input())\na = sorted(list(map(int, input().split())))\ninf = 10 ** 18\nif n < 3:\n    print(a[0] - 1)\n    exit()\nans = sum(a) - n\nfor j in range(10 ** 9):\n    c_p = 1\n    c_c = 0\n    for i in range(n):\n        c_c += abs(a[i] - c_p)\n        c_p *= j + 1\n        if c_p > inf:\n            break\n    if c_p > inf:\n        break\n    if c_p / (j + 1) > ans + a[n - 1]:\n        break\n    ans = min(ans, c_c)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "(n, s) = open(0)\nprint(min((sum((abs(x - c ** i) for (i, x) in enumerate(sorted(map(int, s.split()))))) for c in range(2 + 9 ** 6 // int(n) ** 2))))", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 100000000000000.0\nc = 1\nwhile True:\n    cost = 0\n    k = 1\n    for i in range(len(a)):\n        cost += abs(a[i] - k)\n        k = k * c\n        if k > 100000000000000.0:\n            cost = 100000000000000.0\n            break\n        if cost > 100000000000000.0:\n            break\n    if cost == 100000000000000.0:\n        break\n    ans = min(cost, ans)\n    c += 1\nprint(ans)", "n = int(input())\nnums = sorted((int(x) for x in input().split()))\ncost_1 = sum((abs(x - 1) for x in nums))\nbest = cost_1\nfor i in range(2, 33000):\n    cost = 0\n    pot = 1\n    for x in nums:\n        cost += abs(x - pot)\n        if cost > best:\n            break\n        pot *= i\n    best = min(cost, best)\nprint(best)", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nc = 0\nfor i in range(1, 100000):\n    if i ** (n - 1) >= l[n - 1]:\n        c = i\n        break\nl1 = []\ncm = 100000000000000\nfor i in range(1, c + 1):\n    c1 = 0\n    for j in range(n):\n        c2 = abs(i ** j - l[j])\n        c1 += c2\n        if cm < c1:\n            break\n    if cm > c1:\n        cm = c1\nprint(cm)", "(_, s) = open(0)\na = sorted(map(int, s.split()))\nn = len(a)\nr = 100000000000000.0\nc = 1\nwhile c ** (n - 1) < a[-1] * (n + 1):\n    r = min(r, sum((abs(x - c ** i) for (i, x) in enumerate(a))))\n    c += 1\nprint(r)", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nres = int(1000000000.0 * n)\nlim = res + int(1000000000.0 + 5)\nfor c in range(1, int(1000000000.0)):\n    r = 0\n    z = 1\n    ok = True\n    for i in range(n):\n        if z > lim:\n            ok = False\n            break\n        r += abs(a[i] - z)\n        z *= c\n    if not ok:\n        break\n    res = min(res, r)\nprint(res)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\nii = lambda : int(input())\nsi = lambda : input()\njn = lambda x, l: x.join(map(str, l))\nsl = lambda : list(map(str, input().strip()))\nmi = lambda : map(int, input().split())\nmif = lambda : map(float, input().split())\nlii = lambda : list(map(int, input().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\nn = ii()\narr = lii()\narr.sort()\nstep = 0\nb = int(arr[n - 1] ** (1 / (n - 1)))\na = b + 1\nfor i in range(n):\n    step += abs(arr[i] - b ** i)\nstepa = 0\nfor i in range(n):\n    if a ** i > 10 ** 15:\n        break\n    stepa += abs(arr[i] - a ** i)\nsol = min(stepa, step)\nprint(sol)", "import sys, threading\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef rl(type):\n    return [type(w) for w in input().split()]\n\ndef reverse(arr):\n    return arr[-1::-1]\n\ndef mod(a, m):\n    return (a % m + m) % m\n\ndef create_graph(n):\n    graph = {}\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return graph\n\ndef main():\n    n = int(input())\n    arr = rl(int)\n    arr.sort()\n    c = 1\n    gresult = sum([i - 1 for i in arr])\n    maxInt = 5000000005\n    for c in range(2, 10 ** 5):\n        flag = False\n        result = 0\n        for (idx, ele) in enumerate(arr):\n            temp = c ** idx\n            if temp > maxInt:\n                flag = True\n                break\n            result += abs(ele - temp)\n        if not flag:\n            gresult = min(result, gresult)\n        else:\n            break\n    print(gresult)\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "import sys, threading\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef rl(type):\n    return [type(w) for w in input().split()]\n\ndef reverse(arr):\n    return arr[-1::-1]\n\ndef mod(a, m):\n    return (a % m + m) % m\n\ndef create_graph(n):\n    graph = {}\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return graph\n\ndef main():\n    n = int(input())\n    arr = rl(int)\n    arr.sort()\n    c = 1\n    gresult = sum([i - 1 for i in arr])\n    maxInt = 4294967296\n    for c in range(2, 10 ** 5):\n        flag = False\n        result = 0\n        for (idx, ele) in enumerate(arr):\n            temp = c ** idx\n            if temp > maxInt:\n                flag = True\n                break\n            result += abs(ele - temp)\n        if not flag:\n            gresult = min(result, gresult)\n        else:\n            break\n    print(gresult)\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "n = int(input())\ns = list(sorted(list(map(int, input().split()))))\ncost = float('INF')\nc = 1\nwhile c ** (n - 1) < s[-1] * (n + 1):\n    cost = min(cost, sum((abs(x - c ** i) for (i, x) in enumerate(s))))\n    c += 1\nprint(int(cost))", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\ninf = 10 ** 18\nif n <= 2:\n    print(a[0] - 1)\nelse:\n    ans = sum(a) - n\n    for x in range(1, 10 ** 9):\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n            if curPow > inf:\n                break\n        if curPow > inf:\n            break\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n    print(ans)", "n = int(input())\nlst = [int(i) for i in input().split()]\nlst.sort()\nres = [0, 0]\nfor i in lst:\n    res[1] += abs(i - 1)\nx = 2\nwhile x ** (n - 1) <= res[1] + lst[-1]:\n    res.append(0)\n    for i in range(len(lst)):\n        res[x] += abs(lst[i] - x ** i)\n    x += 1\nprint(min(res[1:]))", "(n, s) = open(0)\narr = sorted(map(int, s.split()))\nn = int(n)\n\ndef mys(x):\n    s = 0\n    for i in range(n):\n        s += abs(arr[i] - x ** i)\n    return s\nmmax = mys(1)\nmmin = mys(1)\nt = 2\nwhile t ** (n - 1) <= mmax + arr[n - 1]:\n    mmin = min(mmin, mys(t))\n    t += 1\nprint(mmin)", "(_, s) = open(0)\na = sorted(map(int, s.split()))\nn = len(a)\nr = sum(a) - n\nc = 2\nwhile c ** (n - 1) < a[-1] * (n + 1):\n    r = min(r, sum((abs(x - c ** i) for (i, x) in enumerate(a))))\n    c += 1\nprint(r)", "def f(arr1, arr2):\n    sum = 0\n    for i in range(len(arr1)):\n        sum += abs(arr1[i] - arr2[i])\n    return sum\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\nseq = []\nconst = 31624\nfor i in range(2, const):\n    seq.append([])\n    for j in range(40):\n        if i ** j > 10 ** 11:\n            break\n        seq[i - 2].append(i ** j)\nif len(arr) > 40:\n    print(sum(arr) - len(arr))\nelif len(arr) == 2:\n    x = arr[0] - 1\n    y = arr[1] ** 0.5\n    y = round(y)\n    y = abs(y ** 2 - arr[1])\n    print(x + y)\nelse:\n    my_min = sum(arr) - len(arr)\n    for i in seq:\n        if len(i) < n:\n            continue\n        x = f(arr, i)\n        if my_min > x:\n            my_min = x\n    print(my_min)", "from typing import List\nimport math\n\ndef powerSequence(N: int, inputs: List[int]) -> int:\n    inputs.sort()\n    max_base = math.ceil(inputs[-1] ** (1 / (N - 1)))\n    if N > 60:\n        max_base = 1\n    min_cost = float('inf')\n    for i in range(1, max_base + 1):\n        cost = 0\n        for j in range(len(inputs)):\n            cost += abs(inputs[j] - i ** j)\n        min_cost = min(min_cost, cost)\n    return min_cost\nN = int(input())\ninputs = list(map(int, input().split(' ')))\nprint(powerSequence(N, inputs))", "n = int(input())\narr = [int(i) for i in input().split()]\nc = 2\ncutoff_cost = 0\narr = sorted(arr)\nfor i in arr:\n    cutoff_cost += abs(i - 1)\nans = cutoff_cost\nwhile c ** (n - 1) < cutoff_cost + arr[-1]:\n    tmpans = 0\n    for j in range(n):\n        tmpans += abs(c ** j - arr[j])\n    ans = min(ans, tmpans)\n    c += 1\nprint(ans)", "import collections\nn = int(input())\na = list(map(int, input().split()))\na = sorted(a)\nmin_cost = 10 ** 99\ninf = 10 ** 18\nfor c in range(1, 10 ** 9):\n    cost = 0\n    cur_pow = 1\n    for i in range(n):\n        cost += abs(cur_pow - a[i])\n        cur_pow *= c\n        if cur_pow > inf:\n            break\n    if cur_pow / c > min_cost + a[n - 1]:\n        break\n    min_cost = min(min_cost, cost)\nprint(min_cost)", "n = int(input())\nl = list(map(int, input().strip().split()))[:n]\nl.sort()\nf = sum(l) - n\ncost = f\nx = 2\nwhile x ** (n - 1) < f + l[-1]:\n    (currCost, p) = (0, 1)\n    for i in range(n):\n        currCost += abs(l[i] - p)\n        p *= x\n    cost = min(cost, currCost)\n    x += 1\nprint(cost)", "n = int(input())\na = [int(u) for u in input().split()]\na.sort()\nf = [0, 0]\nfor i in a:\n    f[1] += abs(i - 1)\nx = 2\nwhile x ** (n - 1) <= f[1] + a[-1]:\n    f.append(0)\n    for i in range(len(a)):\n        f[x] += abs(a[i] - x ** i)\n    x += 1\nprint(min(f[1:]))", "(n, s) = open(0)\nprint(min((sum((abs(x - c ** i) for (i, x) in enumerate(sorted(map(int, s.split()))))) for c in range(2 + 9 ** 6 // int(n) ** 2))))"]