["def solution(array, n):\n    memo = {0: 0}\n    addptr = 0\n    maxptr = 0\n    ans = 0\n    for i in range(1, n + 1):\n        addptr += array[i]\n        if addptr in memo:\n            maxptr = max(maxptr, memo[addptr] + 1)\n        memo[addptr] = i\n        ans += i - maxptr\n    return ans\nn = int(input())\narray = list(map(int, input().split()))\narray = [0] + array\nprint(solution(array, n))", "def solution(n, array):\n    memo = {0: 0}\n    addptr = 0\n    maxptr = 0\n    ans = 0\n    for i in range(1, n + 1):\n        addptr += array[i]\n        if addptr in memo:\n            maxptr = max(maxptr, memo[addptr] + 1)\n        memo[addptr] = i\n        ans += i - maxptr\n    return ans\nprint(solution(int(input()), [0] + list(map(int, input().split()))))", "def solve(a):\n    seen = {0: -1}\n    res = curr = mx = 0\n    for (i, x) in enumerate(a):\n        curr += x\n        if curr in seen:\n            mx = max(mx, seen[curr] + 2)\n        res += mx\n        seen[curr] = i\n    return len(a) * (len(a) + 1) // 2 - res\ninput()\na = list(map(int, input().split()))\nprint(solve(a))", "from distutils.sysconfig import customize_compiler\n\ndef Sol(n, a_in):\n    a = [0] + a_in\n    answ = 0\n    cur_ac_sums = {0}\n    ac_sums = [0 for i in range(n + 1)]\n    cur_sum = 0\n    begin_ind = 1\n    prev_end_ind = 0\n    pivot_sum_ind = 0\n    for i in range(1, n + 1):\n        cur_sum += a[i]\n        ac_sums[i] = cur_sum\n        if cur_sum in cur_ac_sums:\n            end_ind = i\n            good_l = end_ind - begin_ind\n            intersection_l = prev_end_ind - begin_ind\n            answ += good_l * (good_l + 1) // 2 - intersection_l * (intersection_l + 1) // 2\n            prev_end_ind = end_ind\n            while ac_sums[pivot_sum_ind] != cur_sum:\n                cur_ac_sums.remove(ac_sums[pivot_sum_ind])\n                pivot_sum_ind += 1\n            pivot_sum_ind += 1\n            begin_ind = pivot_sum_ind + 1\n        else:\n            cur_ac_sums.add(cur_sum)\n    end_ind = n + 1\n    good_l = end_ind - begin_ind\n    intersection_l = prev_end_ind - begin_ind\n    answ += good_l * (good_l + 1) // 2 - intersection_l * (intersection_l + 1) // 2\n    return answ\nn = int(input())\na = list(map(int, input().split()))\nansw = Sol(n, a)\nprint(answ)", "import sys\nreadline = sys.stdin.readline\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\n\ndef solve():\n    n = ni()\n    a = nl()\n    d = dict()\n    d[0] = -1\n    ans = c = 0\n    v = -2\n    for i in range(n):\n        c += a[i]\n        if c in d:\n            v = max(v, d.get(c, -1))\n        ans += i - v - 1\n        d[c] = i\n    print(ans)\n    return\nsolve()", "def solve(arr):\n    prefix = {}\n    i = count = s = 0\n    maxL = -1\n    for i in range(len(arr)):\n        s += arr[i]\n        if s in prefix:\n            last = prefix[s]\n            maxL = max(maxL, last + 1)\n        elif s == 0:\n            maxL = 0\n        prefix[s] = i\n        count += i - maxL\n    return count\nx = input()\narr = list(map(int, input().split()))\nprint(solve(arr))", "n = int(input())\na = [int(x) for x in input().strip().split()]\npos = {0: 0}\n(bound, tot, ans) = (1, 0, 0)\nfor i in range(1, n + 1):\n    tot += a[i - 1]\n    if tot in pos:\n        bound = max(bound, pos[tot] + 2)\n    pos[tot] = i\n    ans += i - bound + 1\nprint(ans)", "def good_array(arr, n):\n    hash_sum = dict()\n    curr_sum = ans = 0\n    start = 0\n    for i in range(0, n + 1):\n        curr_sum += arr[i]\n        if curr_sum in hash_sum:\n            start = max(start, hash_sum[curr_sum] + 1)\n        ans += i - start\n        hash_sum[curr_sum] = i\n    return ans\nn = int(input())\narr = [0] + list(map(int, input().split()))\nprint(good_array(arr, n))", "def convertArrayToInt(A):\n    for i in range(0, len(A), 1):\n        A[i] = int(A[i])\n    return A\n\ndef OrderN2LogNSolution(A):\n    R = []\n    ans = 0\n    for i in range(0, len(A), 1):\n        prefixSum = 0\n        ps_set = {0}\n        flag = 0\n        for j in range(i, len(A), 1):\n            prefixSum += A[j]\n            if prefixSum in ps_set:\n                ans += j - i\n                flag = 1\n                break\n            ps_set.add(prefixSum)\n        if flag == 0:\n            ans += j - i + 1\n    return ans\n\ndef OrderNLogNSolution(A):\n    prefixSum = 0\n    hashMap = {}\n    hashMap[0] = -1\n    closestLeftIndex = -1\n    ans = 0\n    for i in range(0, len(A), 1):\n        prefixSum += A[i]\n        if prefixSum in hashMap:\n            closestLeftIndex = max(closestLeftIndex, hashMap[prefixSum] + 1)\n        ans += i - closestLeftIndex\n        hashMap[prefixSum] = i\n    return ans\nlength = int(input())\nA = []\nX = input().split()\nA = convertArrayToInt(X)\nans = OrderNLogNSolution(A)\nprint(ans)", "input()\na = {0: 0}\nb = -1\ns = s1 = 0\nfor (i, j) in enumerate(map(int, input().split())):\n    s += j\n    if s in a:\n        b = max(b, a[s])\n    s1 += i - b\n    a[s] = i + 1\nprint(s1)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = 0\n    sd = {0: -1}\n    s = 0\n    mi = 0\n    for i in range(n):\n        s += a[i]\n        if s in sd:\n            mi = max(mi, sd[s] + 2)\n        sd[s] = i\n        total += i + 1 - mi\n    print(total)\n\ndef main():\n    solve()\nmain()", "def solve(n, a):\n    d = {0: -1}\n    s = 0\n    res = 0\n    j = -1\n    for i in range(n):\n        s += a[i]\n        if d.get(s) != None:\n            j = max(d[s] + 1, j)\n        d[s] = i\n        res += i - j\n    return res\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    res = solve(n, a)\n    print(res)\nmain()", "n = int(input())\narr = list(map(int, input().split()))\nnotneeded = dict()\nnotneeded[0] = -1\nans = sum = mx = 0\nfor (i, elem) in enumerate(arr):\n    sum += elem\n    if sum in notneeded:\n        mx = max(mx, notneeded[sum] + 2)\n    ans += mx\n    notneeded[sum] = i\nz = len(arr)\nprint(int(z * (z + 1) // 2) - ans)", "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    n = II()\n    aa = LI()\n    ss = [0]\n    for a in aa:\n        ss.append(ss[-1] + a)\n    ans = 0\n    si = {0: 0}\n    j = 0\n    for i in range(1, n + 1):\n        s = ss[i]\n        if s in si and si[s] + 1 > j:\n            j = si[s] + 1\n        si[s] = i\n        ans += i - j\n    print(ans)\nmain()", "def eugene_and_an_array(n, a):\n    table = {}\n    total = 0\n    table[0] = 0\n    ans = 0\n    posFrom = 0\n    for posTo in range(0, n):\n        if a[posTo] == 0:\n            posFrom = posTo + 1\n            continue\n        ans += a[posTo]\n        if ans in table:\n            posFrom = max(table[ans] + 1, posFrom)\n        total += posTo - posFrom + 1\n        table[ans] = posTo + 1\n    print(total)\nn = int(input())\na = list(map(int, input().split()))\neugene_and_an_array(n, a)", "def solve(a, n):\n    s = 0\n    sums = {}\n    sums[0] = 0\n    p = 0\n    ans = 0\n    subarrs = []\n    for x in range(n):\n        s = s + a[x]\n        if sums.get(s) == None:\n            sums[s] = x + 1\n        else:\n            if sums[s] + 1 >= p:\n                subarrs.append((sums[s] + 1, x + 1))\n                p = sums[s] + 1\n            sums[s] = x + 1\n    p = 1\n    for x in range(len(subarrs)):\n        ans = ans + (subarrs[x][0] - p + 1) * (n - subarrs[x][1] + 1)\n        p = subarrs[x][0] + 1\n    return int(n * (n + 1) / 2) - ans\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(a, len(a)))", "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    n = II()\n    aa = LI()\n    ss = [0]\n    for a in aa:\n        ss.append(ss[-1] + a)\n    ans = 0\n    si = {0: 0}\n    j = 0\n    for i in range(1, n + 1):\n        s = ss[i]\n        if s in si and si[s] + 1 > j:\n            j = si[s] + 1\n        si[s] = i\n        ans += i - j\n    print(ans)\nmain()", "def solve(a, size):\n    hash_map = {0: 0}\n    track_sum = 0\n    bad_comb = 0\n    total = 0\n    for i in range(1, size + 1):\n        track_sum += a[i - 1]\n        if track_sum in hash_map:\n            bad_comb = max(bad_comb, hash_map[track_sum] + 1)\n        elif track_sum == 0:\n            bad_comb = max(bad_comb, 1)\n        hash_map[track_sum] = i\n        total += i - bad_comb\n    return total\nsize = int(input())\na = list(map(int, input().split()))\nprint(solve(a, size))", "import sys\nlines = sys.stdin.readlines()\nn = int(lines[0].strip())\nnums = list(map(int, lines[1].strip().split(' ')))\nseen = {0: -1}\ntmpSum = 0\nprev = -1\nres = 0\nfor i in range(n):\n    tmpSum += nums[i]\n    if tmpSum not in seen or seen[tmpSum] < prev:\n        seen[tmpSum] = i\n        res += i - prev\n    else:\n        prev = seen[tmpSum] + 1\n        seen[tmpSum] = i\n        res += i - prev\nprint(res)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    psum = [0] + a\n    for i in range(n):\n        psum[i + 1] += psum[i]\n    ans = 0\n    dic = {0: 0}\n    rightmost = 0\n    for i in range(1, n + 1):\n        if psum[i] in dic:\n            rightmost = max(rightmost, dic[psum[i]] + 1)\n        ans += i - rightmost\n        dic[psum[i]] = i\n    print(ans)\nsolve()", "n = int(input())\nlast = 0\no = {0: -1}\nt = 0\nrs = 0\na = [int(x) for x in input().split()]\nfor (i, ai) in enumerate(a):\n    rs += ai\n    if rs in o:\n        last = max(last, o[rs] + 2)\n    o[rs] = i\n    t += i - last + 1\nprint(t)", "n = int(input())\naa = [0] + [int(i) for i in input().split()]\n(ss, beg, ans) = (0, 0, 0)\ndic = dict()\nfor i in range(0, n + 1):\n    ss += aa[i]\n    if ss in dic:\n        beg = max(beg, dic[ss] + 1)\n    ans += i - beg\n    dic[ss] = i\nprint(ans)", "n = int(input())\naa = [0] + [int(i) for i in input().split()]\n(ss, beg, ans) = (0, 0, 0)\ndic = dict()\nfor i in range(0, n + 1):\n    ss += aa[i]\n    if ss in dic:\n        beg = max(beg, dic[ss] + 1)\n    ans += i - beg\n    dic[ss] = i\nprint(ans)", "n = int(input())\na = [0] + [int(i) for i in input().split()]\n(s, m, result) = (0, 0, 0)\nd = dict()\nfor i in range(0, n + 1):\n    s += a[i]\n    if s in d:\n        m = max(m, d[s] + 1)\n    result += i - m\n    d[s] = i\nprint(result)", "n = int(input())\na = [0] + [int(i) for i in input().split()]\n(m, s, result) = (0, 0, 0)\nd = {}\nfor i in range(n + 1):\n    s += a[i]\n    if s in d:\n        m = max(m, d[s] + 1)\n    result += i - m\n    d[s] = i\nprint(result)", "n = int(input())\narr = [int(x) for x in input().split()]\narr.insert(0, 0)\nmp = {0: 0}\nsol = n * (n + 1) // 2\nacum = 0\nindex = -1\nfor i in range(1, n + 1):\n    acum += arr[i]\n    if acum in mp:\n        index = max(index, mp[acum])\n    mp[acum] = i\n    sol -= index + 1\nprint(sol)", "n = int(input())\na = [0] + [int(i) for i in input().split()]\n(s, m, result) = (0, 0, 0)\nd = dict()\nfor i in range(0, n + 1):\n    s += a[i]\n    if s in d:\n        m = max(m, d[s] + 1)\n    result += i - m\n    d[s] = i\nprint(result)", "n = int(input())\na = list(map(int, input().split()))\ndi = {}\ndi[0] = 0\nans = 0\ntotal = 0\nsub = -1\nfor i in range(n):\n    total += a[i]\n    if total in di:\n        sub = max(sub, di[total])\n    di[total] = i + 1\n    ans += i - sub\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\n(hs, s, ans, hh) = ({0: 0}, 0, 0, -1)\nfor i in range(1, n + 1):\n    s += a[i]\n    if s in hs:\n        hh = max(hh, hs[s])\n    ans += i - hh - 1\n    hs[s] = i\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\n(hs, s, ans, hh) = ({0: 0}, 0, 0, -1)\nfor i in range(1, n + 1):\n    s += a[i]\n    if s in hs:\n        hh = max(hh, hs[s])\n    ans += i - hh - 1\n    hs[s] = i\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\n(summ, mx, ans) = (0, 0, 0)\nd = dict()\nfor i in range(0, n + 1):\n    summ += a[i]\n    if summ in d:\n        mx = max(mx, d[summ] + 1)\n    ans += i - mx\n    d[summ] = i\nprint(ans)", "n = int(input())\na = {0: 0}\nb = -1\ns = s1 = 0\nfor (i, j) in enumerate(map(int, input().split())):\n    s += j\n    if s in a:\n        b = max(b, a[s])\n    s1 += i - b\n    a[s] = i + 1\nprint(s1)", "import math\n\ndef main():\n    sums = dict()\n    sums[0] = -1\n    pos = dict()\n    pos[-1] = 0\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = 0\n    st = -1\n    sm = 0\n    for i in range(n):\n        cur += a[i]\n        if not cur in sums:\n            sums[cur] = i\n            pos[i] = cur\n            sm += i - st\n        elif cur in sums:\n            for k in range(st, sums[cur]):\n                del sums[pos[k]]\n                del pos[k]\n            st = sums[cur] + 1\n            sums[cur] = i\n            pos[i] = cur\n            sm += i - st\n    print(sm)\nt = 1\nfor i in range(t):\n    main()", "n = int(input())\na = [0] + list(map(int, input().split()))\n(hs, s, ans, hh) = ({0: 0}, 0, 0, -1)\nfor i in range(1, n + 1):\n    s += a[i]\n    if hs.__contains__(s):\n        hh = max(hh, hs[s])\n    ans += i - hh - 1\n    hs[s] = i\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\n(hs, s, ans, hh) = ({0: 0}, 0, 0, -1)\nfor i in range(1, n + 1):\n    s += a[i]\n    if s in hs:\n        hh = max(hh, hs[s])\n    ans += i - hh - 1\n    hs[s] = i\nprint(ans)", "n = int(input())\narr = [int(c) for c in input().split()]\narr.insert(0, 0)\nsumsofar = 0\ndic = {0: 0}\nh = -1\nans = 0\nfor i in range(1, n + 1):\n    sumsofar = sumsofar + arr[i]\n    if sumsofar in dic:\n        h = max(h, dic[sumsofar])\n    ans += i - h - 1\n    dic[sumsofar] = i\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\n(hs, s, ans, hh) = ({0: 0}, 0, 0, -1)\nfor i in range(1, n + 1):\n    s += a[i]\n    if s in hs:\n        hh = max(hh, hs[s])\n    ans += i - hh - 1\n    hs[s] = i\nprint(ans)", "n = int(input())\na = [0] + [int(i) for i in input().split()]\n(m, s, result) = (0, 0, 0)\nd = {}\nfor i in range(n + 1):\n    s += a[i]\n    if s in d:\n        m = max(m, d[s] + 1)\n    result += i - m\n    d[s] = i\nprint(result)", "n = int(input())\nl = [int(x) for x in input().split()]\nind = {0: -1}\ns = 0\nc = 0\nj = -1\nfor i in range(n):\n    s += l[i]\n    if s not in ind:\n        ind[s] = i\n        c += i - j\n    elif s in ind:\n        j = max(j, ind[s] + 1)\n        c += i - j\n        ind[s] = i\nprint(c)", "input()\nns = [int(x) for x in input().split()]\nloc = {0: -1}\nstart = -1\nacc = 0\nresult = 0\nfor (i, v) in enumerate(ns):\n    acc += v\n    if acc in loc:\n        start = max(start, loc[acc] + 1)\n    result += i - start\n    loc[acc] = i\nprint(result)", "N = int(input())\nA = list(map(int, input().split()))\ngood_subarray = 0\nprev_vals = {0: -1}\ncum_sum = 0\nleft_boundary = -1\nfor (i, a) in enumerate(A):\n    cum_sum += a\n    if cum_sum == 0:\n        left_boundary = prev_vals[0] + 1\n    if cum_sum in prev_vals:\n        if prev_vals[cum_sum] >= left_boundary:\n            left_boundary = prev_vals[cum_sum] + 1\n    good_subarray += i - left_boundary\n    prev_vals[cum_sum] = i\nprint(good_subarray)", "from collections import defaultdict\nn = int(input())\narr = list(map(int, input().split()))\narr = [-1] + arr\nd = defaultdict(list)\nd[0] = 0\n(x, idx) = (0, 0)\ncnt = 0\ntotal = n * (n + 1) // 2\nfor i in range(1, n + 1):\n    x += arr[i]\n    if x in d and d[x] >= idx:\n        cnt += (d[x] - idx + 1) * (n - i + 1)\n        idx = d[x] + 1\n    d[x] = i\nprint(total - cnt)", "import math, sys\nfrom collections import Counter\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ls():\n    return list(map(int, list(input())))\n\ndef la():\n    return list(input())\n\ndef i():\n    return int(input())\n\ndef isPrime(n):\n    i = 2\n    if n == 1:\n        return False\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            return False\n        i = i + 1\n    return True\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nn = i()\na = li()\ncursum = 0\nd = {}\nd[0] = 1\nans = 0\nm = 0\nfor i in range(n):\n    cursum += a[i]\n    if cursum in d:\n        m = max(d[cursum], m)\n    d[cursum] = i + 2\n    ans += i + 1 - m\nprint(ans)", "n = int(input())\narr = [int(n) for n in input().split()]\nhash_map = {0: 0}\ntotal = 0\nbad = 0\ngood = 0\nfor i in range(1, n + 1):\n    total += arr[i - 1]\n    if total in hash_map:\n        bad = max(bad, hash_map[total] + 1)\n    hash_map[total] = i\n    good += i - bad\nprint(good)", "input()\na = {0: 0}\nb = -1\ns = s1 = 0\nfor (i, j) in enumerate(map(int, input().split())):\n    s += j\n    if s in a:\n        b = max(b, a[s])\n    s1 += i - b\n    a[s] = i + 1\nprint(s1)", "n = int(input())\na = [0] + [int(x) for x in input().split(' ')]\nans = 0\nlastocc = {0: 0}\nsum = 0\nsoms = 0\nfor i in range(1, n + 1):\n    sum += a[i]\n    if lastocc.get(sum, -1) >= soms:\n        soms = lastocc[sum] + 1\n    lastocc[sum] = i\n    ans += i - soms\nprint(ans)", "n = int(input())\na = [0] + list(map(int, input().split()))\nsave = {0: 0}\nmx = 0\nsum = 0\nans = 0\nfor i in range(1, n + 1):\n    sum += a[i]\n    if save.get(sum, -1) >= mx:\n        mx = save[sum] + 1\n    save[sum] = i\n    ans += i - mx\nprint(ans)", "n = int(input())\na = [0] + [int(x) for x in input().split()]\nstorage = {}\nsump = 0\ntota = 0\nbgning = 0\nfor i in range(n + 1):\n    sump += a[i]\n    if sump in storage:\n        bgning = max(bgning, storage[sump] + 1)\n    tota += i - bgning\n    storage[sump] = i\nprint(tota)", "import sys\nn = int(sys.stdin.readline())\na = [int(i) for i in sys.stdin.readline().split()]\nsums = {0: 0}\ns = 0\ngood = 0\nlast_good = 0\nfor (i, val) in enumerate(a):\n    s += val\n    if s in sums:\n        last_good = max(sums[s] + 1, last_good)\n    sums[s] = i + 1\n    good += 1 + i - last_good\nprint(good)", "def read_int():\n    return int(input().strip())\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\ndef solve():\n    n = read_int()\n    arr = read_ints()\n    prefix = 0\n    G = {0: -1}\n    segments = []\n    for (i, a) in enumerate(arr):\n        prefix += a\n        if prefix in G:\n            segments.append((i, G[prefix] + 1))\n        G[prefix] = i\n    segments.sort()\n    earliest_start = -1\n    T = 0\n    j = -1\n    for i in range(n):\n        while j + 1 < len(segments) and segments[j + 1][0] <= i:\n            j += 1\n            (end, start) = segments[j]\n            if start > earliest_start:\n                earliest_start = start\n        T += i - earliest_start\n    return T\nprint(solve())", "from sys import stdin\nn = int(stdin.readline())\ncnt = 0\nbad = -1\ncurrsum = 0\nsuffixes = {0: 0}\nfor (i, x) in enumerate(map(int, stdin.readline().split())):\n    currsum += x\n    bad = max(bad, suffixes.get(currsum, -1))\n    cnt += i - bad\n    suffixes[currsum] = i + 1\nprint(cnt)", "n = int(input())\nl = list(map(int, input().split()))\nb = [0]\nz = 0\nx = -1\na = {}\ncnt = 0\nfor i in range(n):\n    z += l[i]\n    b.append(z)\nfor i in range(len(b)):\n    if b[i] in a:\n        x = max(x, a[b[i]])\n    cnt += i - x - 1\n    a[b[i]] = i\nprint(cnt)", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(n,) = I()\nl = [0] + I()\nfor i in range(1, n + 1):\n    l[i] += l[i - 1]\nf = {}\nm = 0\nans = 0\nfor i in range(n + 1):\n    if l[i] in f:\n        m = max(m, f[l[i]] + 1)\n    ans += i - m\n    f[l[i]] = i\nprint(ans)", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\nimport collections as col\nimport math, itertools\n\ndef solve():\n    N = getInt()\n    A = [0] + getInts()\n    P = []\n    curr_sum = 0\n    for a in A:\n        curr_sum += a\n        P.append(curr_sum)\n    right = 1\n    ans = 0\n    sums_seen = set()\n    sums_seen.add(0)\n    end = 1\n    for j in range(1, N + 1):\n        while end < N + 1 and P[end] not in sums_seen:\n            sums_seen.add(P[end])\n            end += 1\n        ans += end - j\n        sums_seen.remove(P[j - 1])\n    return ans\nprint(solve())", "import sys\nimport math, bisect\nsys.setrecursionlimit(10 ** 5)\nfrom itertools import groupby, accumulate\nfrom heapq import heapify, heappop, heappush\nfrom collections import deque, Counter, defaultdict\nI = lambda : int(sys.stdin.readline())\nneo = lambda : map(int, sys.stdin.readline().split())\nNeo = lambda : list(map(int, sys.stdin.readline().split()))\nn = I()\nA = Neo()\nA = list(accumulate(A))\nd = defaultdict(int)\nd[0] = -1\nAns = 0\nt = -1\nfor i in range(n):\n    if A[i] in d:\n        t = max(t, d[A[i]] + 1)\n    d[A[i]] = i\n    Ans += i - t\nprint(Ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef I():\n    return list(map(int, input().split()))\nn = I()[0]\na = I()\nd = {0: -1}\nlast = -1\ns = [a[0]]\nans = 0\nfor i in range(1, n):\n    s.append(a[i] + s[-1])\nfor i in range(len(s)):\n    if s[i] in d:\n        last = max(last, d[s[i]] + 1)\n    d[s[i]] = i\n    ans += i - last\nprint(ans)", "n = int(input())\nd = {}\nar = list(map(int, input().split()))\npref = [0] * n\nans = 0\nd = {}\nuk = -1\npref[0] = ar[0]\nd[0] = -1\nfor i in range(1, n):\n    pref[i] = pref[i - 1] + ar[i]\nfor i in range(n):\n    if pref[i] in d:\n        uk = max(uk, d.get(pref[i]) + 1)\n    ans += i - uk\n    d[pref[i]] = i\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nh = {0: -1}\ns = 0\nans = 0\nt = -1\nfor i in range(n):\n    if a[i] != 0:\n        s += a[i]\n        if s in h and h[s] >= t:\n            ans += i - h[s] - 1\n            t = h[s] + 1\n        else:\n            ans += i - t\n            h[s] = i\n    if a[i] == 0:\n        t = i\n        h = {0: i}\n    else:\n        h[s] = i\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nt = n * (n + 1) // 2\ns = 0\nd = {}\nb = []\nd[0] = -1\nfor i in range(n):\n    s += a[i]\n    try:\n        b.append([d[s] + 1, i])\n        d[s] = i\n    except:\n        d[s] = i\nif len(b) == 0:\n    print(t)\n    exit()\npre = b[0]\n(u, v) = pre\nans = (u + 1) * (n - v)\nmx = u\nfor p in b[1:]:\n    (i, j) = p\n    (x, y) = pre\n    if x > mx:\n        mx = x\n    if i - x > 0:\n        ans += (i - mx) * (n - j)\n    pre = p\nprint(t - ans)", "n = int(input())\nA = map(int, input().split())\nrs = []\ncur = 0\nfor a in A:\n    cur += a\n    rs.append(cur)\nlast_seen = {}\nmax_r = n\nout = 0\nfor i in range(n - 1, -1, -1):\n    s = rs[i]\n    max_r = min(max_r, last_seen.get(s, n))\n    out += max_r - (i + 1)\n    last_seen[s] = i\nmax_r = min(max_r, last_seen.get(0, n))\nout += max_r\nprint(out)", "import sys\n\ndef func(n, li):\n    sum1 = []\n    (ele, nextval) = (0, {})\n    for i in range(n):\n        ele += li[i]\n        sum1.append(ele)\n        nextval[ele] = sys.maxsize\n    maxR = n - 1\n    (ans, note) = (0, sys.maxsize)\n    for i in range(n - 1, -1, -1):\n        if sum1[i] == 0:\n            note = i\n        if i == 0:\n            maxR = min(maxR, note - 1)\n        elif i != 0:\n            nextval[sum1[i]] = i\n            maxR = min(maxR, nextval[sum1[i - 1]] - 1)\n        ans += maxR - i + 1\n    print(ans)\n    return\nn = int(input())\nli = [int(x) for x in input().split()]\nfunc(n, li)", "import sys\ninput = sys.stdin.readline\na = int(input())\nb = list(map(int, input().split()))\nc = [0]\nsu = 0\nfor i in b:\n    su += i\n    c.append(su)\nans = 0\nthing = {}\ntemp = 0\nfor i in range(a + 1):\n    if i != 0:\n        try:\n            temp = min(i - thing[c[i]] - 1, temp + 1)\n            ans += temp\n        except:\n            temp = min(i, temp + 1)\n            ans += temp\n    thing[c[i]] = i\nprint(str(ans) + '\\n')", "n = int(input())\nA = list(map(int, input().split()))\nrs = []\ncur = 0\nfor a in A:\n    cur += a\n    rs.append(cur)\nlast_seen = {}\nmax_r = n\nout = 0\nfor i in range(n - 1, -1, -1):\n    s = rs[i]\n    max_r = min(max_r, last_seen.get(s, n))\n    out += max_r - (i + 1)\n    last_seen[s] = i\nmax_r = min(max_r, last_seen.get(0, n))\nout += max_r\nprint(out)", "n = int(input())\nA = list(map(int, input().split()))\nrs = []\ncur = 0\nfor a in A:\n    cur += a\n    rs.append(cur)\nlast_seen = {}\nmax_r = n\nout = 0\nfor i in range(n - 1, -1, -1):\n    s = rs[i]\n    max_r = min(max_r, last_seen.get(s, n))\n    out += max_r - (i + 1)\n    last_seen[s] = i\nmax_r = min(max_r, last_seen.get(0, n))\nout += max_r\nprint(out)", "n = int(input())\nnums = list(map(int, input().split()))\nprefixSum = []\nfor i in range(n):\n    if i == 0:\n        prefixSum.append(nums[0])\n    else:\n        prefixSum.append(prefixSum[i - 1] + nums[i])\nnext_val = {}\nans = 0\nr_max = n - 1\nfor i in range(n - 1, -1, -1):\n    next_val[prefixSum[i]] = i\n    if i == 0:\n        prefixSum[i - 1] = 0\n    if prefixSum[i - 1] in next_val:\n        r_max = min(next_val[prefixSum[i - 1]] - 1, r_max)\n    ans += r_max - i + 1\nprint(ans)", "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\na.append(0)\nl = -1\nt = 0\nout = 0\ns = defaultdict(lambda : float('-inf'))\ns[0] = -1\nfor i in range(n + 1):\n    t += a[i]\n    if s[t] >= l:\n        d1 = i - 1 - (l + 1) + 1\n        d2 = i - 1 - (s[t] + 2) + 1\n        out += d1 * (d1 + 1) // 2 - d2 * (d2 + 1) // 2\n        l = s[t] + 1\n        if a[i] == 0:\n            l = i\n    s[t] = i\nprint(out)", "from sys import stdin\nn = int(stdin.readline())\ncnt = 0\nbad = -1\ncurrsum = 0\nsuffixes = {0: 0}\nfor (i, x) in enumerate(map(int, stdin.readline().split())):\n    currsum += x\n    bad = max(bad, suffixes.get(currsum, -1))\n    cnt += i - bad\n    suffixes[currsum] = i + 1\nprint(cnt)", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\nimport collections as col\nimport math, itertools\n\ndef solve():\n    N = getInt()\n    A = [0] + getInts()\n    P = []\n    curr_sum = 0\n    for a in A:\n        curr_sum += a\n        P.append(curr_sum)\n    right = 1\n    ans = 0\n    sums_seen = col.defaultdict(int)\n    sums_seen[0] += 1\n    end = 1\n    for j in range(1, N + 1):\n        while end < N + 1 and sums_seen[P[end]] == 0:\n            sums_seen[P[end]] = 1\n            end += 1\n        ans += end - j\n        sums_seen[P[j - 1]] = 0\n    return ans\nprint(solve())", "n = int(input())\na = [int(i) for i in input().split()]\nss = [0]\nfor ai in a:\n    ss.append(ss[-1] + ai)\nsi = {0: 0}\nleft = 0\ncount = 0\nfor i in range(1, len(ss)):\n    if ss[i] in si:\n        left = max(left, si[ss[i]] + 1)\n    si[ss[i]] = i\n    count += i - left\nprint(count)", "from collections import defaultdict\nn = int(input())\na = [int(x) for x in input().split()]\nd = defaultdict(lambda : -1)\nbad = [0] * n\ns = 0\nmaxl = -1\nd[0] = 0\nfor i in range(len(a)):\n    s += a[i]\n    maxl = max(maxl, d[s])\n    if a[i] == 0:\n        maxl = i\n    bad[i] = maxl + 1\n    d[s] = i + 1\nt = sum(bad)\nans = n * (n + 1) // 2 - t\nprint(ans)", "from collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\nsumi = 0\nd = defaultdict(int)\nfor i in range(n):\n    sumi += l[i]\n    d[sumi] = -1\nsumi = 0\nindex = -1\ncount = 0\nfor i in range(n):\n    sumi += l[i]\n    if l[i] == 0:\n        index = i\n        count += i - index\n        d[sumi] = i\n    elif sumi == 0:\n        index = max(d[sumi] + 1, index)\n        count += i - index\n        d[sumi] = i\n    elif d[sumi] != -1:\n        index = max(d[sumi] + 1, index)\n        count += i - index\n        d[sumi] = i\n    else:\n        d[sumi] = i\n        count += i - index\nprint(count)", "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(1, len(l)):\n    l[i] = l[i] + l[i - 1]\ncount = 0\nused = 0\nd = {}\nd[0] = 0\nfor i in range(0, n):\n    if l[i] in d:\n        used = max(used, d[l[i]] + 1)\n    count += i + 1 - used\n    d[l[i]] = i + 1\nprint(count)", "n = int(input())\nls = [int(x) for x in input().split()]\npresum = [0]\nfor e in ls:\n    presum.append(e + presum[-1])\nheight = {}\nints = []\nfor (i, s) in enumerate(presum):\n    if s not in height:\n        height[s] = i - 1\n    else:\n        ints.append((height[s], i - 1))\n        height[s] = i - 1\nints.append((len(ls), len(ls)))\nints = sorted(ints, key=lambda x: x[1])\npos = 0\nc = 0\nfor p in range(len(ls)):\n    while p > ints[pos][0] + 1:\n        pos += 1\n    c += ints[pos][1] - p\nprint(c)", "n = int(input())\nl = input().split()\nli = [int(i) for i in l]\nsumi = [0]\nsumnow = 0\nfor i in range(n):\n    sumnow += li[i]\n    sumi.append(sumnow)\nhashi = dict()\nlcpy = list(sumi)\ncount = 0\nfromwhich = 0\nfor i in range(n + 1):\n    if sumi[i] not in hashi:\n        hashi[sumi[i]] = (1, i)\n        count += len(hashi) - 1\n    else:\n        x = hashi[sumi[i]]\n        y = x[1]\n        for j in range(fromwhich, y + 1):\n            del hashi[sumi[j]]\n        hashi[sumi[i]] = (1, i)\n        count += len(hashi) - 1\n        fromwhich = y + 1\nprint(count)", "t = int(input())\nb = list(map(int, input().split()))\ns = 0\np = 0\nq = 0\nc = dict()\nfor j in range(t):\n    s += b[j]\n    if s == 0 and q == 0:\n        p += j + 1 - 1\n        c[0] = j\n        q = 1\n    else:\n        if s in c.keys():\n            k = c[s]\n            q = max(q, k + 2)\n        c[s] = j\n        p += j + 1 - q\nprint(p)", "from itertools import accumulate\nn = int(input())\na = [int(x) for x in input().split()]\nsums = [0] + list(accumulate(a))\ns = {0}\n(i, j) = (0, 0)\nans = 0\nwhile i < n:\n    while j < n and sums[j + 1] not in s:\n        s.add(sums[j + 1])\n        j += 1\n    ans += j - i\n    s.remove(sums[i])\n    i += 1\nprint(ans)", "n = int(input())\nA = [int(i) for i in input().split()]\nP = [0]\nfor i in range(n):\n    P.append(P[-1] + A[i])\nans = 0\ntmp = set([0])\nleft = 0\nright = 0\nwhile left < n:\n    while right < n and P[right + 1] not in tmp:\n        right += 1\n        tmp.add(P[right])\n    ans += right - left\n    tmp.remove(P[left])\n    left += 1\nprint(ans)", "n = int(input())\narr = list(map(int, input().split(' ')))\nprefix = [0]\nprefix_set = set()\nans = 0\nfor i in range(n):\n    prefix.append(arr[i] + prefix[i])\ni = 0\nj = 0\nprefix_set.add(0)\nwhile i < n:\n    while j < n and (not prefix[j + 1] in prefix_set):\n        j = j + 1\n        prefix_set.add(prefix[j])\n    ans = ans + j - i\n    prefix_set.remove(prefix[i])\n    i = i + 1\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nprefix_sum = [0]\nfor i in range(n):\n    prefix_sum.append(prefix_sum[-1] + l[i])\nstart = end = 0\nans = 0\ns = set()\ns.add(0)\nwhile start < n:\n    while end < n and prefix_sum[end + 1] not in s:\n        end += 1\n        s.add(prefix_sum[end])\n    ans += end - start\n    s.remove(prefix_sum[start])\n    start += 1\nprint(ans)", "k = {0}\nrez = 0\nn = int(input())\na = input().split(' ')\np = [0]\nfor i in range(n):\n    a[i] = int(a[i])\n    p.append(p[i] + a[i])\ni = 0\nj = 0\nwhile i < n:\n    while j < n and p[j + 1] not in k:\n        j += 1\n        k.add(p[j])\n    rez += j - i\n    k.remove(p[i])\n    i += 1\nprint(rez)", "n = int(input())\nA = [int(i) for i in input().split()]\nP = [0]\nfor i in range(n):\n    P.append(P[-1] + A[i])\nans = 0\ntmp = set([0])\nleft = 0\nright = 0\nwhile left < n:\n    while right < n and P[right + 1] not in tmp:\n        right += 1\n        tmp.add(P[right])\n    ans += right - left\n    tmp.remove(P[left])\n    left += 1\nprint(ans)", "from collections import OrderedDict\nN = int(input())\nA = list(map(int, input().split()))\nS = [0]\nfor a in A:\n    S.append(S[-1] + a)\nd = OrderedDict()\nres = []\nfor (i, s) in enumerate(S):\n    if s not in d:\n        d[s] = i\n    else:\n        t = d[s]\n        to_remove = []\n        for (u, v) in list(d.items()):\n            if v <= t:\n                res.append((v, i - 1))\n                to_remove.append(u)\n            else:\n                break\n        for x in to_remove:\n            del d[x]\n        d[s] = i\nfor (i, j) in d.items():\n    res.append((j, N))\nvalue = 0\nfor (i, j) in res:\n    value += j - i\nprint(value)", "n = int(input())\nl = list(map(int, input().split()))\na = [0]\nlis = []\nd = {0: -1}\nfor i in range(n):\n    a.append(a[-1] + l[i])\n    if d.get(a[-1]) != None:\n        lis.append((d[a[-1]] + 1, i))\n        d[a[-1]] = i\n    else:\n        d[a[-1]] = i\nans = 0\nlis = lis[::-1]\nfor i in range(n):\n    flag = 0\n    j = len(lis) - 1\n    while j >= 0:\n        if lis[j][0] >= i:\n            ans += lis[j][1] - i\n            flag = 1\n            break\n        else:\n            lis.pop()\n        j -= 1\n    if flag == 0:\n        ans += n - i\nprint(ans)", "from collections import defaultdict\nR = lambda : map(int, input().split())\nd = defaultdict(list)\nn = int(input())\na = list(R())\ns = 0\nd[0] = [-1]\nfor i in range(n):\n    s += a[i]\n    d[s].append(i)\nblocks = [n] * len(a)\nfor ar in d.values():\n    for i in range(1, len(ar)):\n        blocks[ar[i - 1] + 1] = ar[i]\nfor i in range(n - 2, -1, -1):\n    if blocks[i] > blocks[i + 1]:\n        blocks[i] = blocks[i + 1]\nans = [blocks[i] - i for i in range(len(blocks))]\nprint(sum(ans))", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = list(map(int, input().split()))[0] + 1\na = list(map(int, input().split()))\ns = [0]\nst = set()\nbeg = 0\nend = 0\nans = 0\nfor i in range(len(a)):\n    s.append(a[i] + s[-1])\ns.append(s[-1])\nwhile True:\n    if beg == n:\n        print(ans)\n        break\n    if len(st) == end - beg:\n        st.add(s[end])\n        end += 1\n    else:\n        ans += end - beg - 2\n        if s[end - 1] != s[beg]:\n            st.remove(s[beg])\n        beg += 1", "from sys import stdin\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nans = [0] * n\nsums = list()\nsums.append(0)\nfor i in range(n):\n    sums.append(sums[i] + a[i])\nans = 0\nri = 0\ns = set()\ndone = False\nfor i in range(n):\n    for j in range(ri, n + 1):\n        if sums[j] in s:\n            ri = j\n            ans += ri - i - 1\n            s.remove(sums[i])\n            break\n        s.add(sums[j])\n        if j == n:\n            ri = j + 1\n            done = True\n    if done:\n        ans += ri - i - 1\nprint(ans)", "n = int(input())\nprefix = [0] * (n + 1)\nfor (i, x) in enumerate(input().split()):\n    x = int(x)\n    prefix[i + 1] = prefix[i] + x\nbegin = 0\nend = 0\nans = 0\ns = {0}\nwhile begin < n:\n    while end < n and prefix[end + 1] not in s:\n        end += 1\n        s.add(prefix[end])\n    ans += end - begin\n    s.remove(prefix[begin])\n    begin += 1\nprint(ans)", "a = int(input())\nla = list(map(int, input().split()))\npartsum = [la[0] for i in range(a)]\nfor i in range(1, a):\n    partsum[i] = partsum[i - 1] + la[i]\ngood = [1 for i in range(a)]\nif la[0] == 0:\n    good[0] = 0\nclear = [True for i in range(a)]\nparts = {partsum[0]}\nfor i in range(1, a):\n    if partsum[i] not in parts:\n        parts.add(partsum[i])\n    else:\n        clear[i] = False\nfor i in range(1, a):\n    good[i] = good[i - 1] + 1\n    if not clear[i]:\n        for j in range(1, good[i - 1] + 2):\n            if i >= j and partsum[i - j] == partsum[i]:\n                good[i] = j - 1\n                break\n    if partsum[i] == 0:\n        good[i] = min(good[i], i)\nprint(sum(good))", "n = int(input())\narr = [int(i) for i in input().split()]\nfor i in range(1, n):\n    arr[i] += arr[i - 1]\ndic = {}\ndic[0] = [-1]\nfor i in range(n):\n    if arr[i] in dic:\n        dic[arr[i]].append(i)\n    else:\n        dic[arr[i]] = [i]\ntemp = [0] * n\nendly = {}\nfor a in dic:\n    if len(dic[a]) >= 2:\n        for i in range(1, len(dic[a])):\n            temp[dic[a][i]] = -1\n            if dic[a][i] in endly:\n                endly[dic[a][i]].append(dic[a][i - 1] + 1)\n            else:\n                endly[dic[a][i]] = [dic[a][i - 1] + 1]\nl = 0\nr = 0\ncount = 0\nwhile r < n:\n    if temp[r] == -1:\n        l = max(max(endly[r]) + 1, l)\n    count += r - l + 1\n    r += 1\nprint(count)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, copy, sys\nfrom sys import stdin, stdout\n\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n\ndef nc():\n    return map(int, ns().split())\n\ndef narr():\n    return list(map(int, ns().split()))\n\ndef ns():\n    return input()\n\ndef ni():\n    return int(input())\nn = ni()\na = narr()\nclosest_beg = [-1] * n\nlast_seen = {}\nlast_seen_zero = -1\nss = 0\nfor i in range(0, n):\n    if a[i] == 0:\n        last_seen_zero = i\n    ss += a[i]\n    if ss in last_seen:\n        closest_beg[i] = last_seen[ss] + 1\n    elif ss == 0:\n        closest_beg[i] = 0\n    closest_beg[i] = max(last_seen_zero, closest_beg[i])\n    if i > 0:\n        closest_beg[i] = max(closest_beg[i - 1], closest_beg[i])\n    last_seen[ss] = i\nans = 0\nfor i in range(n):\n    if closest_beg[i] == -1:\n        ans += i + 1\n    else:\n        ans += i - closest_beg[i]\nprint(ans)", "from collections import defaultdict\nn = int(input())\naa = list(map(int, input().split()))\npos = defaultdict(list)\ncursum = 0\nfor (i, a) in enumerate(aa):\n    cursum += a\n    pos[cursum].append(i)\ncursum = 0\nai = defaultdict(int)\nzeroseg = []\nfor (i, a) in enumerate(aa):\n    pa = pos[cursum]\n    if pa:\n        while ai[cursum] < len(pa) and pa[ai[cursum]] < i:\n            ai[cursum] += 1\n        if ai[cursum] < len(pa):\n            end = pa[ai[cursum]]\n            while zeroseg and zeroseg[-1][1] >= end:\n                zeroseg.pop()\n            zeroseg.append((i, end))\n    cursum += a\nans = 0\nzerosegi = 0\nfor (i, a) in enumerate(aa):\n    while zerosegi < len(zeroseg) and zeroseg[zerosegi][0] < i:\n        zerosegi += 1\n    if zerosegi == len(zeroseg):\n        ans += n - i\n    else:\n        ans += zeroseg[zerosegi][1] - i\nprint(ans)"]