["def oracAndModels(n, array):\n    dp = [0] * (n + 1)\n    for x in reversed(range(n)):\n        y = 2 * (x + 1) - 1\n        mxVal = 0\n        while y < n:\n            if array[y] > array[x]:\n                if dp[y] > mxVal:\n                    mxVal = dp[y]\n            y += x + 1\n        dp[x] = 1 + mxVal\n    return max(dp)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(oracAndModels(n, l))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a)\n    r = [1] * n\n    for x in a[::-1]:\n        i -= 1\n        r[i] = max((r[j] * (x < a[j]) + 1 for j in range(i, n, i + 1)))\n    print(max(r))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a)\n    r = [1] * n\n    for x in a[::-1]:\n        i -= 1\n        r[i] = max((r[j] * (x < a[j]) + 1 for j in range(i, n, i + 1)))\n    print(max(r))", "def checker(n, lst):\n    b = [1] * n\n    for i in range((n - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, n, i + 1):\n            if lst[j] > lst[i] and b[i] < b[j] + 1:\n                b[i] = b[j] + 1\n    return max(b)\nfor _ in range(int(input())):\n    m = int(input())\n    a = [int(i) for i in input().split()]\n    print(checker(m, a))", "def solve(n, seq, ansArr):\n    maxValue = 0\n    for index in range(n - 1, -1, -1):\n        biggest = 0\n        jump = index + 1\n        startIndex = index\n        while startIndex + jump < n:\n            temp = 0\n            startIndex += jump\n            if seq[startIndex] > seq[index]:\n                temp += ansArr[startIndex]\n            if temp > biggest:\n                biggest = temp\n        biggest += 1\n        ansArr[index] = biggest\n        if biggest > maxValue:\n            maxValue = biggest\n    return maxValue\nansArr = [0] * 100001\nfor _ in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    print(solve(n, seq, ansArr))", "def orac(n, a):\n    f = [1] * (n + 1)\n    maximum = 1\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                if f[j] < f[i] + 1:\n                    f[j] = f[i] + 1\n                    if f[j] > maximum:\n                        maximum = f[j]\n    print(maximum)\n    return\nt = int(input())\na = []\nfor i in range(t):\n    n = int(input())\n    array = [0]\n    array.extend(list(map(int, input().split(' '))))\n    a.append([n, array])\nfor x in a:\n    orac(*x)", "from collections import defaultdict, Counter, deque\nfrom math import inf, sqrt\nfrom functools import lru_cache\nfrom heapq import heappop, heappush, heapify\nfrom bisect import bisect_left, bisect_right\nimport sys\nMod = 10 ** 9 + 7\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [-1] + arr\n    dp = [1] * len(arr)\n    for i in range(1, len(arr))[::-1]:\n        for j in range(i + i, len(arr), i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return print(max(dp))\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solution()\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(1 << 27)\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a) + 1\n    r = [1] * n\n    for x in a[::-1]:\n        i -= 1\n        r[i] = max([1] + [r[j] * (x < a[j - 1]) + 1 for j in range(2 * i, n, i)])\n    print(max(r))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a)\n    r = [1] * n\n    for x in a[::-1]:\n        i -= 1\n        r[i] = max((r[j] * (x < a[j]) + 1 for j in range(i, n, i + 1)))\n    print(max(r))", "def solve(n, s):\n    h = {}\n    for i in range(1, n // 2 + 1):\n        for j in range(2 * i, n + 1, i):\n            if s[i] < s[j]:\n                if i not in h:\n                    h[i] = {}\n                h[i][j] = 1\n    mx = {}\n    for i in reversed(sorted(h.keys())):\n        mx[i] = max([1 + mx[j] if j in mx else 1 for j in h[i]])\n    return 1 if not mx else max([mx[i] for i in mx]) + 1\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = [0] + list(map(int, input().strip().split()))\n    print(solve(n, s))", "from functools import lru_cache\nimport sys\nimport threading\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        nums = [0] + list(map(int, input().split()))\n        dp = [1] * (n + 1)\n        for (idx, num) in enumerate(nums):\n            if idx == 0:\n                continue\n            for j in range(idx + idx, n + 1, idx):\n                if nums[j] > nums[idx]:\n                    dp[j] = max(dp[j], dp[idx] + 1)\n        print(max(dp))\nmain()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a) + 1\n    r = [1] * n\n    for x in a[::-1]:\n        i -= 1\n        r[i] = max((r[j] * (x < a[j - 1]) + 1 for j in range(i, n, i)))\n    print(max(r))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    n = i = len(a)\n    r = [1] * n\n    while i:\n        i -= 1\n        r[i] = max((r[j] * (a[i] < a[j]) + 1 for j in range(i, n, i + 1)))\n    print(max(r))", "tc = int(input().strip())\n\ndef solve():\n    n = int(input().strip())\n    data = list(map(int, input().strip().split()))\n    lengths = [1 for i in range(n)]\n    for (i, n) in enumerate(data):\n        r = lengths[i]\n        for j in range(2 * i + 1, len(data), i + 1):\n            if data[j] > n:\n                lengths[j] = max(lengths[j], r + 1)\n    print(max(lengths))\nfor t in range(tc):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    b = [1] * n\n    for i in range((n - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, n, i + 1):\n            if s[j] > s[i] and b[i] < b[j] + 1:\n                b[i] = b[j] + 1\n    print(max(b))", "for t in range(int(input())):\n    (n, s) = (int(input()), list(map(int, input().split())))\n    b = [1] * n\n    for i in range((n - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, n, i + 1):\n            if s[j] > s[i] and b[i] < b[j] + 1:\n                b[i] = b[j] + 1\n    print(max(b))", "def solve(size, data):\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    return max(log)\ncounter = int(input())\nfor _ in range(counter):\n    size = int(input())\n    data = [int(i) for i in input().split()]\n    print(solve(size, data))", "def beautiful(data, n):\n    dp = [1] * n\n    for i in range(n // 2 - 1, 0, -1):\n        for j in range(2 * i, n, i):\n            if data[j] > data[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp))\nfor i in range(int(input())):\n    n = int(input())\n    data = list(map(int, input().split()))\n    data.insert(0, 0)\n    beautiful(data, n + 1)", "def solve(n, s):\n    dp = [0] + [1] * n\n    for i in range(1, n + 1):\n        for m in range(i * 2, n + 1, i):\n            if s[i] < s[m]:\n                dp[m] = max(dp[m], dp[i] + 1)\n    ans = max(dp)\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    s = [0] + list(map(int, input().split()))\n    print(solve(n, s))", "def solve(size, data):\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    return max(log)\ncounter = int(input())\nfor _ in range(counter):\n    size = int(input())\n    data = list(map(int, input().split()))\n    print(solve(size, data))", "def fun(arr, n):\n    arr2 = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if arr[j] > arr[i]:\n                arr2[j] = max(arr2[j], arr2[i] + 1)\n    return max(arr2)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.insert(0, 0)\n    print(fun(arr, n))\n    t -= 1", "def solve(n, s):\n    dp = [0] + [1] * n\n    for i in range(1, n + 1):\n        for m in range(2, n + 1):\n            m *= i\n            if m > n:\n                break\n            if s[i] < s[m]:\n                dp[m] = max(dp[m], dp[i] + 1)\n    ans = max(dp)\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    s = [0] + list(map(int, input().split()))\n    print(solve(n, s))", "def solve(size, data):\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    print(max(log))\ncounter = int(input())\nfor _ in range(counter):\n    size = int(input())\n    data = [int(i) for i in input().split()]\n    solve(size, data)", "def helper(l):\n    l.insert(0, 0)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if l[j] > l[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return max(dp)\nfor q in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(helper(l))", "def answer(n, s):\n    f = [1] * (n + 1)\n    s.insert(0, 0)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if s[i] < s[j]:\n                f[j] = max(f[j], f[i] + 1)\n    return max(f)\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        s = [int(i) for i in input().split()]\n        print(answer(n, s))\n        t -= 1\n    return\nmain()", "def solve(size, array):\n    count = [1] * (size + 1)\n    for i in range(1, size + 1, 1):\n        for j in range(i * 2, size + 1, i):\n            if array[i] < array[j]:\n                count[j] = max(count[j], 1 + count[i])\n    print(max(count))\ntestCases = int(input())\nwhile testCases:\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    A = [-1] + A\n    solve(N, A)\n    testCases -= 1", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = [1] * (n + 1)\n    l.insert(0, 0)\n    n += 1\n    for i in range(1, n // 2 + 1):\n        for j in range(i * 2, n, i):\n            if l[i] < l[j]:\n                f[j] = max(f[j], f[i] + 1)\n    print(max(f))\n    return\nT = int(input())\nfor _ in range(T):\n    solve()", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    l = nl()\n    f = [1] * (n + 1)\n    l.insert(0, 0)\n    n += 1\n    for i in range(1, n // 2 + 1):\n        for j in range(i * 2, n, i):\n            if l[i] < l[j]:\n                f[j] = max(f[j], f[i] + 1)\n    print(max(f))\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = [1] * (n + 1)\n    l.insert(0, 0)\n    n += 1\n    for i in range(1, n // 2 + 1):\n        for j in range(i * 2, n, i):\n            if l[i] < l[j]:\n                f[j] = max(f[j], f[i] + 1)\n    print(max(f))\n    return\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        arr = [int(x) for x in input().split()]\n        ans = 1\n        dp = [1 for i in range(0, n + 1)]\n        for idx in range(n, 0, -1):\n            temp = 0\n            for nxt in range(idx + idx, n + 1, idx):\n                if arr[idx - 1] < arr[nxt - 1]:\n                    temp = max(temp, dp[nxt])\n            dp[idx] = 1 + temp\n            ans = max(ans, dp[idx])\n        print(ans)\nmain()", "def solve(size, data):\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    print(max(log))\ncounter = int(input())\nfor c in range(counter):\n    size = int(input())\n    data = list(map(int, input().split()))\n    solve(size, data)", "MOD = 1000000000.0 + 7\n\nclass Solution:\n\n    def solve(self, n, nums):\n        dp = [1] * n\n        for i in range(0, n):\n            for j in range((i + 1) * 2, n + 1, i + 1):\n                if nums[i] < nums[j - 1]:\n                    dp[j - 1] = max(dp[j - 1], dp[i] + 1)\n        print(max(dp))\n        return\n\ndef main():\n    t = int(input())\n    sol = Solution()\n    while t:\n        n = int(input())\n        nums = list(map(int, input().strip().split()))\n        sol.solve(n, nums)\n        t -= 1\nmain()", "t = int(input())\n\ndef f1(start, n, a, mem):\n    if mem[start] != 0:\n        return mem[start]\n    m = 1\n    cur = start\n    for j in range(2 * start, n + 1, cur):\n        t = 0\n        if a[j] > a[start]:\n            t = f1(j, n, a, mem)\n        t += 1\n        if t > m:\n            m = t\n    mem[start] = m\n    return mem[start]\nfor _ in range(t):\n    n = int(input())\n    a = [0]\n    b = list(map(int, input().rstrip().split()))\n    for i in b:\n        a.append(i)\n    mem = [0] * (n + 1)\n    (ans, mx) = (0, 0)\n    for i in range(1, n + 1):\n        t = f1(i, n, a, mem)\n        if t > ans:\n            ans = t\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    mxarr = [1] * (n + 1)\n    for i in range(n):\n        for j in range(2 * i + 1, n, i + 1):\n            if v[j] > v[i]:\n                mxarr[j] = max(mxarr[j], mxarr[i] + 1)\n    print(max(mxarr))", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    u = [1 for x in range(n + 1)]\n    i = n // 2 + 1\n    while i >= 1:\n        j = 2\n        maxi = 1\n        while i * j < len(a):\n            if u[i * j] + 1 > maxi and a[i * j] > a[i]:\n                maxi = u[i * j] + 1\n            j += 1\n        u[i] = maxi\n        i -= 1\n    print(max(u))", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(test):\n    n = int(input())\n    memo = [1] * (n + 1)\n    s = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if s[j - 1] > s[i - 1]:\n                memo[j] = max(memo[j], 1 + memo[i])\n    print(max(memo))\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "import math\n\ndef tc():\n    n = int(input())\n    sizes = [None] + [int(s) for s in input().split()]\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        j = i * 2\n        while j <= n:\n            if sizes[j] > sizes[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n            j += i\n    return max(dp)\nT = int(input())\nfor _ in range(T):\n    ans = tc()\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    dp = [1] * (n + 1)\n    A = [0] + A\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if A[i] < A[j]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    ans = max(dp)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    c = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                c[j] = max(c[j], c[i] + 1)\n    print(max(c))", "for t in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    c = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                c[j] = max(c[j], c[i] + 1)\n    print(max(c))", "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda : readline().rstrip()\nni = lambda : int(readline().rstrip())\nnm = lambda : map(int, readline().split())\nnl = lambda : list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    s = nl()\n    dp = [1] * (n + 1)\n    for i in range(n // 2, 0, -1):\n        for j in range(2 * i, n + 1, i):\n            if s[i - 1] < s[j - 1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp))\n    return\nT = ni()\nfor _ in range(T):\n    solve()", "def main():\n    t = int(input())\n    while t:\n        n = int(input())\n        a = list(map(int, input().split()))\n        f = [1 for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i * 2, n + 1, i):\n                if a[j - 1] > a[i - 1]:\n                    f[j] = max(f[j], f[i] + 1)\n        print(max(f))\n        t -= 1\nmain()", "def solve(arr, n):\n    memo = [1 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if arr[i - 1] < arr[j - 1]:\n                memo[j] = max(memo[j], memo[i] + 1)\n    ans = 0\n    for i in memo:\n        if i > ans:\n            ans = i\n    return ans\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr, n))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    dp = [0] + [1] * n\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[i] < a[j]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))\n    t -= 1", "from collections import deque\nt = int(input())\nrez = []\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    rezul = 1\n    for j in range(n):\n        s[j] = int(s[j])\n    pres = []\n    for j in range(n):\n        pres.append(1)\n    j = n // 2 - 1\n    while j >= 0:\n        pre = 0\n        ind = j + j + 1\n        while ind < n:\n            if s[ind] > s[j]:\n                if pres[ind] > pre:\n                    pre = pres[ind]\n            ind += j + 1\n        pres[j] += pre\n        if pres[j] > rezul:\n            rezul = pres[j]\n        j -= 1\n    rez.append(rezul)\nfor i in range(len(rez)):\n    print(rez[i])", "def lis(l):\n    lis = [1] * (len(l) + 1)\n    for i in range(1, len(l) + 1):\n        for j in range(i * 2, len(l) + 1, i):\n            if l[i - 1] < l[j - 1]:\n                lis[j] = max(lis[j], lis[i] + 1)\n    return max(lis)\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    l = list(map(int, input().split()))\n    print(lis(l))", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\nP = 1000000007\n\ndef main():\n    for t in range(I()):\n        n = I()\n        arr = [0] + L()\n        ans = [1] * (n + 1)\n        mx = 1\n        for i in range(1, n + 1):\n            j = 2 * i\n            while j < n + 1:\n                if arr[j] > arr[i]:\n                    ans[j] = max(ans[i] + 1, ans[j])\n                j += i\n        print(max(ans))\nmain()", "def DFC(maxm, u):\n    maxm += 1\n    e[u] = maxm\n    if len(st[u]) == 0:\n        maxms.append(maxm)\n        return 0\n    for i in st[u]:\n        if e[i] <= maxm:\n            DFC(maxm, i)\n    return 0\nrw = int(input())\nfor ewqr in range(rw):\n    n = int(input())\n    maxms = []\n    maxm = 0\n    s = [0] + list(map(int, input().split()))\n    st = [[] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, n + 1, i):\n            if s[i] < s[j]:\n                st[i].append(j)\n    e = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if e[i] == 0:\n            DFC(maxm, i)\n    print(max(maxms))", "from sys import stdin, stdout\nimport math, sys\nfrom itertools import permutations, combinations\nfrom collections import defaultdict, deque, OrderedDict\nimport bisect as bi\nimport heapq\n\ndef I():\n    return int(input())\n\ndef In():\n    return map(int, input().split())\n\ndef printDivisors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n    return ans\n\ndef main():\n    try:\n        n = I()\n        l = [0] + list(In())\n        z = [1] * (n + 1)\n        for i in range(1, n + 1):\n            j = i * 2\n            while j < n + 1:\n                if l[i] < l[j]:\n                    z[j] = max(z[j], z[i] + 1)\n                j += i\n        print(max(z))\n    except:\n        pass\nM = 998244353\nP = 1000000007\nfor _ in range(I()):\n    main()", "t = int(input())\nfor ci in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mark = [0 for _ in range(n + 4)]\n    for i in range(n - 1, -1, -1):\n        nw = i + 1\n        maxy = 0\n        for j in range(i + nw, n, nw):\n            if arr[j] > arr[i]:\n                maxy = max(maxy, mark[j])\n        mark[i] = maxy + 1\n    print(max(mark))", "for t in range(int(input())):\n    n = int(input())\n    l = [0] + list(map(int, input().split()))\n    l1 = [1] * (n + 1)\n    for i in range(n // 2, 0, -1):\n        for j in range(2, n):\n            if i * j <= n:\n                if l1[j * i] + 1 > l1[i] and l[i] < l[j * i]:\n                    l1[i] = l1[i * j] + 1\n            else:\n                break\n    print(max(l1))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    k = [0 for i in range(n)]\n    ans = 0\n    for i in range(int(n // 2), -1, -1):\n        mx = 0\n        for j in range(2 * (i + 1) - 1, n, i + 1):\n            if s[j] > s[i]:\n                mx = max(k[j] + 1, mx)\n        k[i] = mx\n        ans = max(ans, mx)\n    print(ans + 1)", "list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list2 = [1] * n\n    for i in range(0, n):\n        for j in range(2 * i + 1, n, i + 1):\n            if list1[j] > list1[i]:\n                list2[j] = max(list2[j], list2[i] + 1)\n    list_ans.append(max(list2))\nprint(*list_ans, sep='\\n')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = [-1] * n\n\n    def fun(ind):\n        ma = 1\n        for j in range(2 * (ind + 1), n + 1, ind + 1):\n            if lst[j - 1] > lst[ind]:\n                if dic[j - 1] != -1:\n                    ma = max(ma, 1 + dic[j - 1])\n                else:\n                    a = fun(j - 1)\n                    dic[j - 1] = a\n                    ma = max(ma, 1 + a)\n        return ma\n    for j in range(n):\n        if dic[j] == -1:\n            dic[j] = fun(j)\n    print(max(dic))", "def calc(s, prevs, idx, n, curcnt, mem):\n    if curcnt <= mem[idx - 1]:\n        return curcnt\n    if s[idx - 1] <= prevs:\n        return curcnt - 1\n    mem[idx - 1] = curcnt\n    res = curcnt\n    for newidx in range(idx * 2, n + 1, idx):\n        res = max(res, calc(s, s[idx - 1], newidx, n, curcnt + 1, mem))\n    return res\n_i = int(input())\nfor _ in range(_i):\n    n = int(input())\n    s = list(map(int, input().strip().split()))\n    mem = [0] * n\n    res = 0\n    for idx in range(1, n // 2 + 2):\n        res = max(res, calc(s, prevs=-1, idx=idx, n=n, curcnt=1, mem=mem))\n    print(res)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    l = [0]\n    lis = list(map(int, input().split()))\n    lis = l + lis\n    ma = 0\n    num = [1 for i in range(n + 1)]\n    for k in range(n, 0, -1):\n        j = k * 2\n        lm = 1\n        while j <= n:\n            if lis[k] < lis[j]:\n                if lm <= num[j] + num[k]:\n                    lm = num[j] + num[k]\n            j += k\n        num[k] = lm\n        if num[k] >= ma:\n            ma = num[k]\n    print(ma)", "def fun(ind, n, l, dp):\n    if dp[ind] != -1:\n        return dp[ind]\n    if ind > n:\n        return 0\n    count = 0\n    for i in range(ind * 2, n + 1, ind):\n        if l[i] > l[ind]:\n            count = max(count, 1 + fun(i, n, l, dp))\n    dp[ind] = count\n    return dp[ind]\n\ndef solve():\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ans = -1\n    l.insert(0, -1)\n    dp = [-1] * 100005\n    for i in range(1, n + 1):\n        ans = max(ans, 1 + fun(i, n, l, dp))\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor w in range(t):\n    n = int(input())\n    data = list(map(int, input().strip().split()))\n    models = [1 for i in range(n)]\n    for (i, value) in enumerate(data, start=1):\n        r = models[i - 1]\n        if 2 * i < n + 1:\n            for j in range(2 * i - 1, n, i):\n                if data[j] > value:\n                    models[j] = max(models[j], r + 1)\n        else:\n            break\n    print(max(models))", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef algo(n, s):\n    if n == 1:\n        return 1\n    r = [1] * 100000\n    for i in range(1, n + 1):\n        m = 2\n        a = s[i - 1]\n        while m * i <= n:\n            b = s[m * i - 1]\n            if b > a and r[m * i - 1] <= r[i - 1]:\n                r[m * i - 1] = r[i - 1] + 1\n            m += 1\n    return max(r)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    print(algo(n, s))", "t = int(input())\n\ndef sol(index):\n    if index > n:\n        return 0\n    if dp[index] != -1:\n        return dp[index]\n    count = 0\n    for i in range(2 * index, n + 1, index):\n        if arr[i] > arr[index]:\n            count = max(count, 1 + sol(i))\n    dp[index] = count\n    return count\nfor testcase in range(1, t + 1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [0] + arr\n    ans = 0\n    dp = [-1 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        ans = max(ans, 1 + sol(i))\n    print(ans)", "def to_list(s):\n    return list(map(lambda x: int(x), s.split(' ')))\n\ndef solve(a):\n    f = [1] * len(a)\n    for i in range(len(a)):\n        for j in range((i + 1) * 2, len(a) + 1, i + 1):\n            if a[i] < a[j - 1]:\n                f[j - 1] = max(f[j - 1], f[i] + 1)\n    ans = 0\n    for i in range(len(a)):\n        ans = max(ans, f[i])\n    return str(ans)\nanswers = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = to_list(input())\n    answers.append(solve(a))\nprint('\\n'.join(answers))", "def lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(2, n):\n        for j in range(1, i):\n            if i % j == 0 and arr[i] > arr[j] and (lis[i] < lis[j] + 1):\n                lis[i] = lis[j] + 1\n    maximum = 0\n    maximum = max(maximum, max(lis))\n    return maximum\nfor t in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.insert(0, 0)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i + i, n + 1, i):\n            if s[i] < s[j]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        for j in range(i * 2 + 1, n, i + 1):\n            if a[i] < a[j]:\n                b[j] = max(b[j], b[i] + 1)\n    print(max(b) + 1)", "from math import gcd, ceil\nfrom collections import defaultdict as dd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef inin():\n    return int(input())\n\ndef inar():\n    return list(map(int, input().split()))\n\ndef ar(element, size):\n    return [element for i in range(size)]\n\ndef digitsum(num):\n    su = 0\n    while num:\n        su += num % 10\n        num //= 10\n    return su\n\ndef pred(n, k, pointer):\n    return pointer - k >= n\n\ndef yes():\n    print('YES')\n\ndef no():\n    print('NO')\nTestcase = inin()\nfor _ in range(Testcase):\n    n = inin()\n    s = [0] + inar()\n    dp = [1 for f in range(n + 7)]\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if s[i] < s[j]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [0] + list(map(int, input().split()))\n    v = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if l[j] > l[i]:\n                v[j] = max(v[j], v[i] + 1)\n    print(max(v))", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    d = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[i] < a[j]:\n                d[j] = max(d[j], d[i] + 1)\n    print(max(d))", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    f = [0] + [1] * n\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if a[i] < a[j]:\n                f[j] = max(f[j], f[i] + 1)\n    print(max(f))", "def max_models(weights):\n    cache = {i: 1 for i in range(1, len(weights) + 1)}\n    for i in range(1, len(weights) + 1):\n        for j in range(i * 2, len(weights) + 1, i):\n            if weights[j - 1] > weights[i - 1]:\n                cache[j] = max(cache[j], cache[i] + 1)\n    return max(cache.values())\nresults = []\nfor _ in range(int(input())):\n    _ = input()\n    weights = [int(el) for el in input().split()]\n    results.append(str(max_models(weights)))\nprint('\\n'.join(results))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [-1] + a\n    result = [-1] + [1] * n\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if a[i] < a[j]:\n                result[j] = max(result[i] + 1, result[j])\n    print(max(result))", "import sys\nfrom math import *\nfrom functools import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    dp = [1] * (n + 1)\n    for i in range(n, 0, -1):\n        k = 2\n        j = i\n        maxx = 0\n        while j * k <= n:\n            if a[j * k] > a[j]:\n                maxx = max(maxx, dp[j * k])\n            k += 1\n        dp[i] = 1 + maxx\n    print(max(dp))", "import sys\nfrom collections import Counter\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(20000)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    S = get_ints()\n    dp = [1] * (n + 1)\n    for i in range(1, len(S) + 1):\n        for j in range(i * 2, n + 1, i):\n            if S[j - 1] > S[i - 1]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().strip().split(' ')))\n    count = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                count[j] = max(count[j], count[i] + 1)\n    print(max(count))", "for _ in range(int(input())):\n    n = int(input())\n    size = list(map(int, input().split()))\n    size = [0] + size\n    ans = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if size[i] < size[j]:\n                ans[j] = max(ans[j], ans[i] + 1)\n    print(max(ans))", "cou = int(input())\nfor v in range(cou):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    ans = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[i] < a[j]:\n                ans[j] = max(ans[j], ans[i] + 1)\n    print(max(ans))", "for _ in range(int(input())):\n    n = int(input()) + 1\n    l = [0] + list(map(int, input().split()))\n    visited = [1] * n\n    for i in range(1, n):\n        for j in range(i + i, n, i):\n            if l[j] > l[i]:\n                visited[j] = max(visited[j], visited[i] + 1)\n    print(max(visited))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = [0] + l\n    p = [0] + [1] * n\n    for x in range(1, n + 1):\n        for y in range(2 * x, n + 1, x):\n            if l[x] < l[y]:\n                p[y] = max(p[y], p[x] + 1)\n    print(max(p))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [0]\n    a[1:] = list(map(int, input().strip().split(' ')))\n    ans = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[j] > a[i]:\n                ans[j] = max(ans[j], ans[i] + 1)\n    print(max(ans[1:]))", "counter = int(input())\nfor _ in range(counter):\n    size = int(input())\n    data = [int(i) for i in input().split()]\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    print(max(log))", "counter = int(input())\nfor c in range(counter):\n    size = int(input())\n    data = [int(i) for i in input().split()]\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    print(max(log))", "for i in range(int(input())):\n    q = int(input())\n    w = list(map(int, input().split()))\n    a = [1] * (q + 1)\n    for i in range(q):\n        for j in range(2 * i + 1, q, i + 1):\n            if w[j] > w[i]:\n                a[j] = max(a[j], a[i] + 1)\n    print(max(a))", "for _ in range(int(input())):\n    n = int(input())\n    S = [int(num) for num in input().split()]\n    dp = [1] * n\n    for i in range(0, n):\n        for j in range(2 * i + 1, n, i + 1):\n            if S[i] < S[j]:\n                dp[j] = max(dp[i] + 1, dp[j])\n    print(max(dp))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    max1 = float('-inf')\n    array = {j + 1: l[j] for j in range(n)}\n    tail = [0 for i in range(n + 1)]\n    for j in range(2, n + 1):\n        if array[1] < array[j]:\n            tail[j] = max(tail[j], 1)\n        temp = array[j]\n        for k in range(2 * j, n + 1, j):\n            if temp < array[k]:\n                tail[k] = max(tail[j] + 1, tail[k])\n    print(max(tail) + 1)", "counter = int(input())\nfor c in range(counter):\n    size = int(input())\n    data = list(map(int, input().split()))\n    log = [1] * size\n    for i in range((size - 1) // 2, -1, -1):\n        for j in range(2 * i + 1, size, i + 1):\n            if data[i] < data[j]:\n                log[i] = max(log[i], log[j] + 1)\n    print(max(log))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if l[j] > l[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "from math import *\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    f = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if a[i] < a[j]:\n                f[j] = max(f[j], f[i] + 1)\n    print(max(f))", "from sys import stdin\nimport math\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    dp = [1] * (n + 1)\n    res = 1\n    a = [0] + list(map(int, stdin.readline().split()))\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if a[j] > a[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    S = [int(num) for num in input().split()]\n    dp = [1] * n\n    for i in range(0, n):\n        for j in range(2 * i + 1, n, i + 1):\n            if S[i] < S[j]:\n                dp[j] = max(dp[i] + 1, dp[j])\n    print(max(dp))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    lst = []\n    lst.append(0)\n    lst2 = [1 for i in range(n + 1)]\n    for i in range(0, n):\n        lst.append(arr[i])\n    for i in range(n, 0, -1):\n        for j in range(i + i, n + 1, i):\n            if lst[j] > lst[i]:\n                lst2[i] = max(lst2[i], lst2[j] + 1)\n    su = 1\n    for i in range(0, n + 1):\n        su = max(su, lst2[i])\n    print(su)", "for _ in range(int(input())):\n    arr = int(input())\n    ans = 0\n    a = list(map(int, input().split()))\n    a.insert(0, 1)\n    f = [1 for j in range(arr + 1)]\n    for i in range(1, arr + 1):\n        for j in range(i * 2, arr + 1, i):\n            if a[i] < a[j]:\n                f[j] = max(f[j], f[i] + 1)\n    for i in range(1, arr + 1):\n        ans = max(ans, f[i])\n    print(ans)", "import sys\nI = sys.stdin.readline\nans = ''\n\ndef func(ind, n, s):\n    if ind >= n:\n        return 0\n    if dp[ind] != -1:\n        return dp[ind]\n    count = 0\n    for k in range(2 * ind, n, ind):\n        if s[k] > s[ind]:\n            count = max(count, 1 + func(k, n, s))\n    dp[ind] = count\n    return dp[ind]\nfor _ in range(int(I())):\n    n = int(I())\n    s = list(map(int, I().split()))\n    s.insert(0, 0)\n    dp = [-1] * 100001\n    maxi = 1\n    for i in range(1, n + 1):\n        maxi = max(maxi, 1 + func(i, n + 1, s))\n    ans += str(maxi) + '\\n'\nprint(ans)", "def solve(n, s):\n    dp = [1] * (n + 1)\n    s = [0] + s\n    i = 1\n    while i <= n:\n        j = 2\n        while i * j <= n:\n            if s[i * j] > s[i]:\n                dp[i * j] = max(dp[i * j], dp[i] + 1)\n            j += 1\n        i += 1\n    return max(dp)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    print(solve(n, s))", "from sys import stdin\nimport math\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dp = [1] * (n + 1)\n    a.insert(0, 0)\n    for x in range(1, n + 1):\n        for y in range(x, n + 1, x):\n            if a[x] < a[y]:\n                dp[y] = max(dp[y], dp[x] + 1)\n    print(max(dp))", "t = int(input())\nd = dict()\n\ndef solve(ss, i):\n    if i in d:\n        return d[i]\n    si = ss[i - 1]\n    l = [1]\n    i0 = i\n    i += i0\n    while i - 1 < len(ss):\n        if ss[i - 1] > si:\n            l.append(1 + solve(ss, i))\n        i += i0\n    result = max(l)\n    d[i0] = result\n    return d[i0]\nfor _ in range(t):\n    d.clear()\n    n = int(input())\n    ss = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append(solve(ss, i + 1))\n    print(max(l))", "import sys\nI = sys.stdin.readline\nans = ''\n\ndef func(ind, n, s):\n    if ind >= n:\n        return 0\n    if dp[ind] != -1:\n        return dp[ind]\n    count = 0\n    for k in range(2 * ind, n, ind):\n        if k < n and s[k] > s[ind]:\n            count = max(count, 1 + func(k, n, s))\n    dp[ind] = count\n    return dp[ind]\nfor _ in range(int(I())):\n    n = int(I())\n    s = list(map(int, I().split()))\n    s.insert(0, 0)\n    dp = [-1] * 100004\n    maxi = 1\n    for i in range(1, n + 1):\n        maxi = max(maxi, 1 + func(i, n + 1, s))\n    ans += str(maxi) + '\\n'\nprint(ans)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    s = [0] + [int(i) for i in input().split()]\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if s[i] < s[j]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [0] + [int(i) for i in input().split()]\n    dp = [0] + [1 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(2 * i, n + 1, i):\n            if A[j] > A[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))", "def solve(arr, n, idx, dp):\n    if idx > n:\n        return 0\n    if dp[idx] != -1:\n        return dp[idx]\n    count = 0\n    for i in range(idx, n + 1, idx):\n        if arr[i] > arr[idx]:\n            count = max(count, 1 + solve(arr, n, i, dp))\n    dp[idx] = count\n    return count\nt = int(input())\nfor t in range(0, t):\n    dp = [-1 for i in range(0, 100004)]\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr1 = [-1 for i in range(0, n + 1)]\n    for i in range(1, n + 1):\n        arr1[i] = arr[i - 1]\n    maxi = 1\n    for i in range(1, n + 1):\n        maxi = max(maxi, 1 + solve(arr1, n, i, dp))\n    print(maxi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            if s[i - 1] < s[j - 1]:\n                dp[j] = max(dp[j], dp[i] + 1)\n    print(max(dp))"]