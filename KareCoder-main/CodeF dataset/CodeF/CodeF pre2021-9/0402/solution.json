["import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nl = [0] * (n + 1)\nfor i in range(m):\n    (u, v) = sorted(map(int, input().split()))\n    l[u] += 1\nc = 0\nfor i in range(1, n + 1):\n    if l[i] == 0:\n        c += 1\nz = []\nq = int(input())\nfor i in range(q):\n    s = input().split()\n    if s[0] == '1':\n        (u, v) = sorted(map(int, s[1:]))\n        l[u] += 1\n        if l[u] == 1:\n            c -= 1\n    if s[0] == '2':\n        (u, v) = sorted(map(int, s[1:]))\n        l[u] -= 1\n        if l[u] == 0:\n            c += 1\n    if s[0] == '3':\n        z.append(str(c))\nprint('\\n'.join(z))", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nE = [0] * n\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    u -= 1\n    v -= 1\n    if u > v:\n        (u, v) = (v, u)\n    E[u] += 1\n    if E[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    tmp = input()\n    if len(tmp) > 3:\n        (d, u, v) = map(int, tmp.split())\n        u -= 1\n        v -= 1\n        if u > v:\n            (u, v) = (v, u)\n        if d == 1:\n            E[u] += 1\n            if E[u] == 1:\n                ans -= 1\n        else:\n            E[u] -= 1\n            if E[u] == 0:\n                ans += 1\n    else:\n        print(ans)", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nfriends = [0] * n\ndead = 0\nfor _ in range(m):\n    (i, j) = map(int, input().split())\n    if friends[min(i, j)] == 0:\n        dead += 1\n    friends[min(i, j)] += 1\nq = int(input())\nfor _ in range(q):\n    a = input().split()\n    if a[0] == '1':\n        (i, j) = (int(a[1]), int(a[2]))\n        if friends[min(i, j)] == 0:\n            dead += 1\n        friends[min(i, j)] += 1\n    if a[0] == '2':\n        (i, j) = (int(a[1]), int(a[2]))\n        if friends[min(i, j)] == 1:\n            dead -= 1\n        friends[min(i, j)] -= 1\n    if a[0] == '3':\n        print(n - dead)", "N = 200010\nf = [-1] * N\n\ndef find(x):\n    if f[x] == x:\n        return x\n    f[x] = find(f[x])\n    return f[x]\n\ndef ufsInit():\n    for i in range(1, n + 1):\n        f[i] = i\na = [0] * N\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nfor i in range(0, m):\n    (x, y) = map(int, input().split())\n    if x > y:\n        (x, y) = (y, x)\n    a[x] += 1\ncnt = 0\nfor i in range(1, n + 1):\n    cnt += a[i] == 0\nq = int(input())\nfor i in range(0, q):\n    l = list(map(int, input().split()))\n    if l[0] == 3:\n        print(cnt)\n        continue\n    (x, y) = (l[1], l[2])\n    if x > y:\n        (x, y) = (y, x)\n    if l[0] == 1:\n        a[x] += 1\n        if a[x] == 1:\n            cnt -= 1\n    elif l[0] == 2:\n        a[x] -= 1\n        if a[x] == 0:\n            cnt += 1", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\ncnt = [0] * 200050\nans = 0\n(n, m) = map(int, input().split())\nfor i in range(1, m + 1):\n    (u, v) = map(int, input().split())\n    if u > v:\n        (u, v) = (v, u)\n    cnt[u] += 1\n    if cnt[u] == 1:\n        ans += 1\nq = int(input().strip())\nwhile q:\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        (u, v) = (query[1], query[2])\n        if u > v:\n            (u, v) = (v, u)\n        cnt[u] += 1\n        if cnt[u] == 1:\n            ans += 1\n    elif query[0] == 2:\n        (u, v) = (query[1], query[2])\n        if u > v:\n            (u, v) = (v, u)\n        cnt[u] -= 1\n        if cnt[u] == 0:\n            ans -= 1\n    else:\n        print(n - ans)\n    q -= 1", "N = 200010\nf = [-1] * N\n\ndef find(x):\n    if f[x] == x:\n        return x\n    f[x] = find(f[x])\n    return f[x]\n\ndef ufsInit():\n    for i in range(1, n + 1):\n        f[i] = i\na = [0] * N\nimport sys\ninput = sys.stdin.readline\nwhile True:\n    (n, m) = map(int, input().split())\n    for i in range(0, m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        a[x] += 1\n    cnt = 0\n    for i in range(1, n + 1):\n        cnt += a[i] == 0\n    q = int(input())\n    for i in range(0, q):\n        l = list(map(int, input().split()))\n        if l[0] == 3:\n            print(cnt)\n            continue\n        (x, y) = (l[1], l[2])\n        if x > y:\n            (x, y) = (y, x)\n        if l[0] == 1:\n            a[x] += 1\n            if a[x] == 1:\n                cnt -= 1\n        elif l[0] == 2:\n            a[x] -= 1\n            if a[x] == 0:\n                cnt += 1\n    break", "import sys\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline()\n\ndef out(x):\n    return sys.stdout.write(str(x))\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\na = [0] * (n + 1)\nfor _ in range(m):\n    (x, y) = map(int, input().split())\n    y = min(x, y)\n    a[y] += 1\nsumm = 0\nfor i in range(1, n + 1):\n    if a[i] == 0:\n        summ += 1\nq = int(input())\nfor _ in range(q):\n    x = list(map(int, input().split()))\n    if x[0] == 3:\n        print(summ)\n    elif x[0] == 1:\n        v = min(x[1], x[2])\n        if a[v] == 0:\n            summ -= 1\n        a[v] += 1\n    elif x[0] == 2:\n        v = min(x[1], x[2])\n        a[v] -= 1\n        if a[v] == 0:\n            summ += 1", "import sys\n\ndef add(d, obj, counter):\n    if d[obj] == 0:\n        counter += 1\n    d[obj] += 1\n    return counter\n\ndef sub(d, obj, counter):\n    d[obj] -= 1\n    if d[obj] == 0:\n        counter -= 1\n    return counter\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\na = {x: 0 for x in range(1, n + 1)}\ncount = 0\nfor i in range(m):\n    b = [int(x) for x in input().split()]\n    count = add(a, min(b), count)\nq = int(input())\nfor i in range(q):\n    c = [int(x) for x in input().split()]\n    if c[0] == 1:\n        count = add(a, min(c[1:]), count)\n    elif c[0] == 2:\n        count = sub(a, min(c[1:]), count)\n    elif c[0] == 3:\n        print(n - count)", "import sys\ninput = sys.stdin.readline\n(n, m) = list(map(int, input().split()))\ndata = [0 for i in range(n + 1)]\nans = n\nwhile m > 0:\n    (a, b) = list(map(int, input().split()))\n    if a > b:\n        (a, b) = (b, a)\n    if data[a] == 0:\n        ans -= 1\n    data[a] += 1\n    m -= 1\nq = int(input())\nwhile q > 0:\n    q -= 1\n    item = list(map(int, input().split()))\n    if len(item) == 1:\n        print(ans)\n    elif item[0] == 1:\n        (a, b) = item[1:]\n        if a > b:\n            (a, b) = (b, a)\n        if data[a] == 0:\n            ans -= 1\n        data[a] += 1\n    elif item[0] == 2:\n        (a, b) = item[1:]\n        if a > b:\n            (a, b) = (b, a)\n        data[a] -= 1\n        if data[a] == 0:\n            ans += 1", "import sys\ninput = sys.stdin.readline\n(nn, m) = map(int, input().split())\nn = nn\nb = [0 for i in range(n + 1)]\np = 0\nfor i in range(m):\n    (c, d) = map(int, input().split())\n    f = min(c, d)\n    if b[f] == 0:\n        p += 1\n    b[f] += 1\nq = int(input())\nfor i in range(q):\n    (a, *bb) = map(int, input().split())\n    if a == 1:\n        d = min(bb)\n        if b[d] == 0:\n            p += 1\n        b[d] += 1\n    elif a == 2:\n        d = min(bb)\n        b[d] -= 1\n        if b[d] == 0:\n            p -= 1\n    else:\n        print(n - p)", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = map(int, sys.stdin.readline().rstrip().split())\na = [0] * (n + 1)\nfor x in range(m):\n    (u, v) = map(int, sys.stdin.readline().rstrip().split())\n    if u < v:\n        a[u] += 1\n    else:\n        a[v] += 1\nc = 0\nfor x in range(1, n + 1):\n    if a[x] == 0:\n        c += 1\ntest = int(sys.stdin.readline().rstrip())\nwhile test > 0:\n    test -= 1\n    q = list(map(int, sys.stdin.readline().rstrip().split()))\n    if len(q) == 1:\n        print(c)\n    elif q[0] == 1:\n        if q[1] < q[2]:\n            a[q[1]] += 1\n            if a[q[1]] == 1:\n                c -= 1\n        else:\n            a[q[2]] += 1\n            if a[q[2]] == 1:\n                c -= 1\n    elif q[1] < q[2]:\n        a[q[1]] -= 1\n        if a[q[1]] == 0:\n            c += 1\n    else:\n        a[q[2]] -= 1\n        if a[q[2]] == 0:\n            c += 1", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\narr = [-1] + [0] * n\nct = 0\nfor x in range(m):\n    (a, b) = map(int, input().split())\n    if a < b:\n        c = a\n    else:\n        c = b\n    arr[c] += 1\n    if arr[c] == 1:\n        ct += 1\nfor y in range(int(input())):\n    lst = list(map(int, input().split()))\n    if lst[0] == 3:\n        print(n - ct)\n        continue\n    (op, a, b) = lst\n    if a < b:\n        c = a\n    else:\n        c = b\n    if op == 1:\n        arr[c] += 1\n        if arr[c] == 1:\n            ct += 1\n    elif op == 2:\n        arr[c] -= 1\n        if arr[c] == 0:\n            ct -= 1", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nx = [0] * (n + 1)\nc = 0\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    mn = min(u, v)\n    if x[mn] == 0:\n        c += 1\n    x[mn] += 1\nq = int(input())\nfor i in range(q):\n    (a, *b) = map(int, input().split())\n    if a == 3:\n        print(n - c)\n    elif a == 1:\n        d = min(b)\n        if x[d] == 0:\n            c += 1\n        x[d] += 1\n    else:\n        d = min(b)\n        x[d] -= 1\n        if x[d] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\narr = [0] * n\nans = n\nfor x in range(m):\n    (u, v) = map(int, input().split())\n    k = min(u, v)\n    if arr[k - 1] == 0:\n        ans -= 1\n    arr[k - 1] += 1\nfor tt in range(int(input())):\n    l = list(map(int, input().split()))\n    a = l[0]\n    if a == 1:\n        (u, v) = (l[1], l[2])\n        k = min(u, v)\n        if arr[k - 1] == 0:\n            ans -= 1\n        arr[k - 1] += 1\n    elif a == 2:\n        (u, v) = (l[1], l[2])\n        k = min(u, v)\n        arr[k - 1] -= 1\n        if arr[k - 1] == 0:\n            ans += 1\n    else:\n        print(ans)", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ncount = [0] * (n + 1)\npreans = n\nfor i in range(m):\n    arr = list(map(int, input().split()))\n    mini = min(arr)\n    if count[mini] == 0:\n        count[mini] += 1\n        preans -= 1\n    else:\n        count[mini] += 1\nans = preans\ntemp = count\nfor i in range(int(input())):\n    q = list(map(int, input().split()))\n    if len(q) == 1:\n        print(ans)\n    elif q[0] == 1:\n        mini = min(q[1:])\n        if temp[mini] == 0:\n            ans -= 1\n            temp[mini] += 1\n        else:\n            temp[mini] += 1\n    else:\n        mini = min(q[1:])\n        if temp[mini] == 1:\n            ans += 1\n            temp[mini] -= 1\n        else:\n            temp[mini] -= 1", "from sys import stdin, stdout\n(n, m) = map(int, stdin.readline().split())\nli = [0] * (n + 1)\nfor i in range(m):\n    (u, v) = map(int, stdin.readline().split())\n    li[min(u, v)] += 1\na = 0\nfor j in range(1, n + 1):\n    if li[j] == 0:\n        a = a + 1\nq = int(stdin.readline())\nfor j in range(q):\n    ai = list(map(int, stdin.readline().split()))\n    if ai[0] == 3:\n        print(a)\n    elif ai[0] == 2:\n        li[min(ai[1], ai[2])] -= 1\n        if li[min(ai[1], ai[2])] == 0:\n            a = a + 1\n    else:\n        li[min(ai[1], ai[2])] += 1\n        if li[min(ai[1], ai[2])] == 1:\n            a = a - 1", "import sys\ninput = sys.stdin.readline\n(n, m) = list(map(int, input().split()))\na = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = list(map(int, input().split()))\n    u = min(u, v)\n    if a[u] == 0:\n        ans -= 1\n    a[u] += 1\nq = int(input())\nfor i in range(q):\n    b = list(map(int, input().split()))\n    if b[0] == 1:\n        b[1] = min(b[1], b[2])\n        if a[b[1]] == 0:\n            ans -= 1\n        a[b[1]] += 1\n    elif b[0] == 2:\n        b[1] = min(b[1], b[2])\n        a[b[1]] -= 1\n        if a[b[1]] == 0:\n            ans += 1\n    else:\n        print(ans)", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n(n, m) = list(map(int, input().split()))\ndata = [0 for i in range(n + 1)]\nans = n\nwhile m > 0:\n    (a, b) = list(map(int, input().split()))\n    if a > b:\n        (a, b) = (b, a)\n    if data[a] == 0:\n        ans -= 1\n    data[a] += 1\n    m -= 1\nq = int(input())\nwhile q > 0:\n    q -= 1\n    item = list(map(int, input().split()))\n    if len(item) == 1:\n        print(ans)\n    elif item[0] == 1:\n        (a, b) = item[1:]\n        if a > b:\n            (a, b) = (b, a)\n        if data[a] == 0:\n            ans -= 1\n        data[a] += 1\n    elif item[0] == 2:\n        (a, b) = item[1:]\n        if a > b:\n            (a, b) = (b, a)\n        data[a] -= 1\n        if data[a] == 0:\n            ans += 1", "from sys import stdin\n(N, M) = map(int, stdin.readline().split())\ncounts = [0] * (N + 1)\nans = 0\nfor _ in range(M):\n    (u, v) = map(int, stdin.readline().split())\n    if u > v:\n        (u, v) = (v, u)\n    counts[u] += 1\n    if counts[u] == 1:\n        ans += 1\nQ = int(stdin.readline())\nfor _ in range(Q):\n    args = list(map(int, stdin.readline().split()))\n    if args[0] == 1:\n        (u, v) = (args[1], args[2])\n        if u > v:\n            (u, v) = (v, u)\n        counts[u] += 1\n        if counts[u] == 1:\n            ans += 1\n    elif args[0] == 2:\n        (u, v) = (args[1], args[2])\n        if u > v:\n            (u, v) = (v, u)\n        counts[u] -= 1\n        if counts[u] == 0:\n            ans -= 1\n    else:\n        print(N - ans)", "import sys\nfrom collections import defaultdict\n(n, m) = map(int, sys.stdin.readline().strip().split())\nnobles = defaultdict(set)\nunvul_num = defaultdict(int)\n\ndef get_key(u, v):\n    (u, v) = (u, v) if u < v else (v, u)\n    return (u, v)\n\ndef add(u, v):\n    (u, v) = get_key(u, v)\n    unvul_num[u] += 1\n\ndef delete(u, v):\n    (u, v) = get_key(u, v)\n    unvul_num[u] -= 1\n    if unvul_num[u] == 0:\n        unvul_num.pop(u)\n\ndef process(unvul_num):\n    print(n - len(unvul_num))\nfor _ in range(m):\n    line = sys.stdin.readline()\n    (u, v) = map(int, line.strip().split())\n    add(u, v)\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    cmd = sys.stdin.readline().strip()\n    if cmd.startswith('1'):\n        (u, v) = map(int, cmd[1:].strip().split())\n        add(u, v)\n    elif cmd.startswith('2'):\n        (u, v) = map(int, cmd[1:].strip().split())\n        delete(u, v)\n    else:\n        assert cmd == '3'\n        process(unvul_num)", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = map(int, sys.stdin.readline().rstrip().split())\nl = [0] * (n + 1)\nfor _ in range(m):\n    (u, v) = sorted(map(int, sys.stdin.readline().rstrip().split()))\n    l[u] += 1\nc = 0\nfor i in range(1, n + 1):\n    if l[i] == 0:\n        c += 1\nfor _ in range(int(sys.stdin.readline().rstrip())):\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    if a[0] == 1:\n        u = min(a[1], a[2])\n        l[u] += 1\n        if l[u] == 1:\n            c -= 1\n    elif a[0] == 2:\n        u = min(a[1], a[2])\n        l[u] -= 1\n        if l[u] == 0:\n            c += 1\n    else:\n        print(c)", "from sys import stdin\ninput = stdin.readline\n(m, n) = map(int, input().split())\ndp = [0] * (m + 1)\ndead = 0\nfor i in range(n):\n    (u, v) = map(int, input().split())\n    if dp[min(u, v)] == 0:\n        dead += 1\n    dp[min(u, v)] += 1\nfor q in range(int(input())):\n    command = list(input().split())\n    if command[0] == '1':\n        if dp[min(int(command[1]), int(command[2]))] == 0:\n            dead += 1\n        dp[min(int(command[1]), int(command[2]))] += 1\n    elif command[0] == '2':\n        dp[min(int(command[1]), int(command[2]))] -= 1\n        if dp[min(int(command[1]), int(command[2]))] == 0:\n            dead -= 1\n    elif command[0] == '3':\n        print(m - dead)", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nnum = [1] * n\ncnt2 = [0] * n\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    num[min(a, b) - 1] = 0\n    cnt2[min(a, b) - 1] += 1\nq = int(input())\ncnt = num.count(1)\nfor i in range(q):\n    que = list(map(int, input().split()))\n    if que[0] == 1:\n        if cnt2[min(que[1], que[2]) - 1] == 0:\n            cnt -= 1\n        cnt2[min(que[1], que[2]) - 1] += 1\n    elif que[0] == 2:\n        if cnt2[min(que[1], que[2]) - 1] == 1:\n            cnt += 1\n        cnt2[min(que[1], que[2]) - 1] -= 1\n    else:\n        print(cnt)", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nnum = [1] * n\ncnt2 = [0] * n\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    num[min(a, b) - 1] = 0\n    cnt2[min(a, b) - 1] += 1\nq = int(input())\ncnt = num.count(1)\nfor i in range(q):\n    que = list(map(int, input().split()))\n    if que[0] == 1:\n        if cnt2[min(que[1], que[2]) - 1] == 0:\n            cnt -= 1\n        cnt2[min(que[1], que[2]) - 1] += 1\n    elif que[0] == 2:\n        if cnt2[min(que[1], que[2]) - 1] == 1:\n            cnt += 1\n        cnt2[min(que[1], que[2]) - 1] -= 1\n    else:\n        print(cnt)", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    (n, m) = M()\n    d = dt(int)\n    c = 0\n    for i in range(m):\n        (u, v) = M()\n        d[min(u, v)] += 1\n        if d[min(u, v)] == 1:\n            c = c + 1\n    for i in range(I()):\n        q = L()\n        if q[0] == 1:\n            d[min(q[1], q[2])] += 1\n            if d[min(q[1], q[2])] == 1:\n                c = c + 1\n        elif q[0] == 2:\n            d[min(q[1], q[2])] -= 1\n            if d[min(q[1], q[2])] == 0:\n                c = c - 1\n        else:\n            print(n - c)\ntt = 1\nfor _ in range(tt):\n    solve()", "import sys\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef out(x):\n    return sys.stdout.write(str(x))\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nn = inlt()\na = []\nm = n[1]\nn = n[0]\nans = n\nfor i in range(0, n + 1):\n    a.append(0)\nfor i in range(0, m):\n    x = inlt()\n    y = x[1]\n    x = x[0]\n    a[min(x, y)] -= 1\nfor i in range(1, n + 1):\n    if a[i] < 0:\n        ans -= 1\nq = inp()\nfor i in range(0, q):\n    q1 = inlt()\n    if q1[0] == 1:\n        j = q1[1]\n        k = q1[2]\n        if a[min(j, k)] == 0:\n            ans -= 1\n        a[min(j, k)] -= 1\n    elif q1[0] == 2:\n        j = q1[1]\n        k = q1[2]\n        a[min(j, k)] += 1\n        if a[min(j, k)] == 0:\n            ans += 1\n    else:\n        print(ans)", "import sys\ninput = sys.stdin.readline\nt = 1\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    can = 0\n    dead = 0\n    now = [[0, 0] for i in range(n + 1)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        if a > b:\n            now[a][0] += 1\n            now[b][1] += 1\n        else:\n            now[b][0] += 1\n            now[a][1] += 1\n    ans = 0\n    for i in range(1, n + 1):\n        if now[i][1] == 0:\n            ans += 1\n    q = int(input())\n    for i in range(q):\n        inp = list(map(int, input().split()))\n        if len(inp) == 1:\n            print(ans)\n            continue\n        if inp[0] == 1:\n            (a, b) = (inp[1], inp[2])\n            if a > b:\n                if now[b][1] == 0:\n                    ans -= 1\n                now[a][0] += 1\n                now[b][1] += 1\n            else:\n                if now[a][1] == 0:\n                    ans -= 1\n                now[b][0] += 1\n                now[a][1] += 1\n        else:\n            (a, b) = (inp[1], inp[2])\n            if a > b:\n                if now[b][1] == 1:\n                    ans += 1\n                now[a][0] -= 1\n                now[b][1] -= 1\n            else:\n                if now[a][1] == 1:\n                    ans += 1\n                now[b][0] -= 1\n                now[a][1] -= 1", "import sys\ninput_file = sys.stdin\noutput_file = sys.stdout\n(n_str, m_str) = input_file.readline().strip().split()\nn = int(n_str)\nm = int(m_str)\nf = [0] * (n + 1)\nfor i in range(m):\n    (u, v) = input_file.readline().strip().split()\n    (a, b) = (min(int(u), int(v)), max(int(u), int(v)))\n    f[a] += 1\nkilled = 0\nfor i in range(1, int(n) + 1):\n    if f[i] > 0:\n        killed += 1\nq = input_file.readline().strip()\nfor i in range(int(q)):\n    query = input_file.readline().strip().split()\n    if query[0] == '3':\n        output_file.write(str(n - killed) + '\\n')\n        continue\n    (u, v) = (int(query[1]), int(query[2]))\n    (a, b) = (min(u, v), max(u, v))\n    if query[0] == '1':\n        if f[a] == 0:\n            killed += 1\n        f[a] += 1\n    else:\n        f[a] -= 1\n        if f[a] == 0:\n            killed -= 1", "import sys\n(n, m) = map(int, sys.stdin.readline().split())\ngraph = [0] * n\nans = 0\nfor f in range(m):\n    (u, v) = map(int, sys.stdin.readline().split())\n    graph[min(u, v) - 1] += 1\n    if graph[min(u, v) - 1] == 1:\n        ans += 1\nq = int(sys.stdin.readline())\nfor qr in range(q):\n    arr = list(map(int, sys.stdin.readline().split()))\n    if arr[0] == 1:\n        graph[min(arr[1], arr[2]) - 1] += 1\n        if graph[min(arr[1], arr[2]) - 1] == 1:\n            ans += 1\n    elif arr[0] == 2:\n        graph[min(arr[1], arr[2]) - 1] -= 1\n        if graph[min(arr[1], arr[2]) - 1] == 0:\n            ans -= 1\n    else:\n        print(n - ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\n(n, m) = M()\nl = [0] * n\nco = n\nfor i in range(m):\n    (a, b) = M()\n    t = min(a - 1, b - 1)\n    l[t] += 1\n    if l[t] == 1:\n        co -= 1\nq = I()\nfor i in range(q):\n    p = L()\n    if len(p) == 3:\n        (a, b, c) = (p[0], p[1], p[2])\n        if a == 1:\n            t = min(b - 1, c - 1)\n            l[t] += 1\n            if l[t] == 1:\n                co -= 1\n        else:\n            t = min(b - 1, c - 1)\n            l[t] -= 1\n            if l[t] == 0:\n                co += 1\n    else:\n        print(co)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef input_list():\n    return list(map(int, input().split()))\n\ndef input_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef input_int_gen():\n    return map(int, input().split())\nfrom collections import defaultdict\n(noble_size, friendships) = input_int_gen()\nfriends = defaultdict(set)\ndied = 0\nfor _ in range(friendships):\n    (a, b) = input_int_gen()\n    if b > a:\n        if not friends[a]:\n            died += 1\n        friends[a].add(b)\n    else:\n        if not friends[b]:\n            died += 1\n        friends[b].add(a)\nquery_size = inp()\nfor _ in range(query_size):\n    query = input_list()\n    if query[0] == 1:\n        (a, b) = (query[1], query[2])\n        if b > a:\n            if not friends[a]:\n                died += 1\n            friends[a].add(b)\n        else:\n            if not friends[b]:\n                died += 1\n            friends[b].add(a)\n    if query[0] == 2:\n        (a, b) = (query[1], query[2])\n        if b > a:\n            friends[a].remove(b)\n            if not friends[a]:\n                died -= 1\n        else:\n            friends[b].remove(a)\n            if not friends[b]:\n                died -= 1\n    if query[0] == 3:\n        print(noble_size - died)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef input_list():\n    return list(map(int, input().split()))\n\ndef input_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef input_int_gen():\n    return map(int, input().split())\nfrom collections import defaultdict\n(noble_size, friendships) = input_int_gen()\nfriends = defaultdict(set)\ndied = 0\nfor _ in range(friendships):\n    (a, b) = input_int_gen()\n    if b > a:\n        if not friends[a]:\n            died += 1\n        friends[a].add(b)\n    else:\n        if not friends[b]:\n            died += 1\n        friends[b].add(a)\nquery_size = inp()\nfor _ in range(query_size):\n    query = input_list()\n    if query[0] == 1:\n        (a, b) = (query[1], query[2])\n        if b > a:\n            if not friends[a]:\n                died += 1\n            friends[a].add(b)\n        else:\n            if not friends[b]:\n                died += 1\n            friends[b].add(a)\n    if query[0] == 2:\n        (a, b) = (query[1], query[2])\n        if b > a:\n            friends[a].remove(b)\n            if not friends[a]:\n                died -= 1\n        else:\n            friends[b].remove(a)\n            if not friends[b]:\n                died -= 1\n    if query[0] == 3:\n        print(noble_size - died)", "(n, m) = map(int, input().split())\ng = [0] * n\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    u -= 1\n    v -= 1\n    if v > u:\n        g[u] += 1\n    else:\n        g[v] += 1\nq = int(input())\nanswer = sum([1 for i in range(n) if g[i] == 0])\nallAnswers = []\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        query[1] -= 1\n        query[2] -= 1\n        if query[1] > query[2]:\n            if g[query[2]] == 0:\n                answer -= 1\n            g[query[2]] += 1\n        else:\n            if g[query[1]] == 0:\n                answer -= 1\n            g[query[1]] += 1\n    elif query[0] == 2:\n        query[1] -= 1\n        query[2] -= 1\n        if query[1] > query[2]:\n            if g[query[2]] == 1:\n                answer += 1\n            g[query[2]] -= 1\n        else:\n            if g[query[1]] == 1:\n                answer += 1\n            g[query[1]] -= 1\n    else:\n        allAnswers.append(answer)\nfor x in allAnswers:\n    print(x)", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    (n, m) = read()\n    arr = [0] * (n + 1)\n    c = n\n    for i in range(m):\n        (u, v) = sorted(read())\n        if arr[u] == 0:\n            c -= 1\n        arr[u] += 1\n    for _ in range(nin()):\n        (mode, *other) = read()\n        if mode in (1, 2):\n            (u, v) = sorted(other)\n            if mode == 1:\n                if arr[u] == 0:\n                    c -= 1\n                arr[u] += 1\n            else:\n                arr[u] -= 1\n                if arr[u] == 0:\n                    c += 1\n        else:\n            ans_.append(c)\nsolve()\nfor i in ans_:\n    print(i)", "import sys\ninput_file = sys.stdin\noutput_file = sys.stdout\n(n_str, m_str) = input_file.readline().strip().split()\nn = int(n_str)\nm = int(m_str)\nf = [set() for x in range(n + 1)]\nfor i in range(m):\n    (u, v) = input_file.readline().strip().split()\n    (a, b) = (min(int(u), int(v)), max(int(u), int(v)))\n    f[a].add(b)\nkilled = 0\nfor i in range(1, int(n) + 1):\n    if len(f[i]) > 0:\n        killed += 1\nq = input_file.readline().strip()\nfor i in range(int(q)):\n    query = input_file.readline().strip().split()\n    if query[0] == '3':\n        output_file.write(str(n - killed) + '\\n')\n        continue\n    (u, v) = (int(query[1]), int(query[2]))\n    (a, b) = (min(u, v), max(u, v))\n    if query[0] == '1':\n        if len(f[a]) == 0:\n            killed += 1\n        f[a].add(b)\n    else:\n        f[a].remove(b)\n        if len(f[a]) == 0:\n            killed -= 1", "(n, m) = map(lambda x: int(x), input().split())\nN = n\nE = [0] * (n + 1)\nres = []\nfor _ in range(m):\n    (a, b) = sorted(map(lambda x: int(x), input().split()))\n    if E[a] == 0:\n        N -= 1\n    E[a] += 1\nQ = int(input())\nfor _ in range(Q):\n    q = input().split()\n    if q[0] == '3':\n        res.append(N)\n    elif q[0] == '1':\n        (a, b) = sorted(map(lambda x: int(x), q[1:]))\n        if E[a] == 0:\n            N -= 1\n        E[a] += 1\n    else:\n        (a, b) = sorted(map(lambda x: int(x), q[1:]))\n        E[a] -= 1\n        if E[a] == 0:\n            N += 1\n[print(r) for r in res]", "from sys import stdin\ninput = stdin.readline\nfrom collections import defaultdict\n(n, m) = map(int, input().strip().split())\ndead = [0] * n\ndeadcnt = 0\ng = defaultdict(set)\nfor i in range(m):\n    (x, y) = map(int, input().strip().split())\n    g[x - 1].add(y - 1)\n    g[y - 1].add(x - 1)\n    if y - 1 > x - 1:\n        deadcnt += dead[x - 1] == 0\n        dead[x - 1] += 1\n    else:\n        deadcnt += dead[y - 1] == 0\n        dead[y - 1] += 1\nfor _ in range(int(input())):\n    l = list(map(int, input().strip().split()))\n    if l[0] == 3:\n        print(n - deadcnt)\n    elif l[0] == 2:\n        x = l[1] - 1\n        y = l[2] - 1\n        g[x].remove(y)\n        g[y].remove(x)\n        if y < x:\n            (x, y) = (y, x)\n        dead[x] -= 1\n        if dead[x] == 0:\n            deadcnt -= 1\n    else:\n        (x, y) = (l[1] - 1, l[2] - 1)\n        g[x].add(y)\n        g[y].add(x)\n        if y < x:\n            (x, y) = (y, x)\n        deadcnt += dead[x] == 0\n        dead[x] += 1", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = [0] * n\nc = 0\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    arr[ind] += 1\n    if arr[ind] == 1:\n        c += 1\nfor i in range(int(input())):\n    y = list(map(int, input().split()))\n    if len(y) == 1:\n        print(n - c)\n        continue\n    (v, a, b) = y\n    if a < b:\n        ind = a - 1\n    else:\n        ind = b - 1\n    if v == 1:\n        arr[ind] += 1\n        if arr[ind] == 1:\n            c += 1\n    elif v == 2:\n        arr[ind] -= 1\n        if arr[ind] == 0:\n            c -= 1", "(n, m) = map(int, input().split())\ng = []\nc1 = []\nc2 = []\nfor i in range(n):\n    c1.append(0)\n    c2.append(0)\nq = [1] * n\nfor i in range(m):\n    (a, b) = map(lambda z: int(z) - 1, input().split())\n    (a, b) = (min(a, b), max(a, b))\n    c1[a] += 1\n    c2[b] += 1\n    q[a] = 0\ncur = sum(q)\nans = []\nfor _ in range(int(input())):\n    inp = input()\n    if inp[0] == '3':\n        ans.append(cur)\n        continue\n    (t, u, v) = map(lambda z: int(z) - 1, inp.split())\n    (u, v) = (min(u, v), max(u, v))\n    if t == 0:\n        c1[u] += 1\n        c2[v] += 1\n        if q[u] == 1:\n            q[u] = 0\n            cur -= 1\n    else:\n        c1[u] -= 1\n        c2[v] -= 1\n        if c1[u] == 0 and q[u] == 0:\n            q[u] = 1\n            cur += 1\nprint('\\n'.join(map(str, ans)))", "import sys\n\ndef input():\n    s = sys.stdin.readline()\n    return s\n(n, m) = map(int, input().strip().split())\nnodes = [set() for i in range(1 + n)]\nempty_sets = n\npairs = []\nfor i in range(m):\n    (f, t) = sorted(list(map(int, input().strip().split())))\n    if len(nodes[f]) == 0:\n        empty_sets -= 1\n    nodes[f].add(t)\nq = int(input())\nqs = []\nfor i in range(q):\n    nums = list(map(int, input().strip().split()))\n    qs.append(nums)\nfor nums in qs:\n    if nums[0] == 3:\n        print(empty_sets)\n    else:\n        (f, t) = sorted(nums[1:])\n        if nums[0] == 1:\n            if len(nodes[f]) == 0:\n                empty_sets -= 1\n            nodes[f].add(t)\n        else:\n            nodes[f].remove(t)\n            if len(nodes[f]) == 0:\n                empty_sets += 1", "(n, m) = map(int, input().strip().split())\nnodes = [set() for i in range(1 + n)]\nempty_sets = n\npairs = []\nfor i in range(m):\n    (f, t) = sorted(list(map(int, input().strip().split())))\n    if len(nodes[f]) == 0:\n        empty_sets -= 1\n    nodes[f].add(t)\nq = int(input())\nqs = []\nfor i in range(q):\n    nums = list(map(int, input().strip().split()))\n    qs.append(nums)\nfor nums in qs:\n    if nums[0] == 3:\n        print(empty_sets)\n    else:\n        (f, t) = sorted(nums[1:])\n        if nums[0] == 1:\n            if len(nodes[f]) == 0:\n                empty_sets -= 1\n            nodes[f].add(t)\n        else:\n            nodes[f].remove(t)\n            if len(nodes[f]) == 0:\n                empty_sets += 1", "(n, m) = [int(i) for i in input().split()]\nnobles = [0 for i in range(n)]\nfor i in range(m):\n    (u, v) = [int(i) - 1 for i in input().split()]\n    if u > v:\n        (u, v) = (v, u)\n    if nobles[u] == 0:\n        n -= 1\n    nobles[u] += 1\nm = int(input())\nfor i in range(m):\n    u = input()\n    if u == '3':\n        print(n)\n    elif u[0] == '1':\n        v = int(u.split()[2]) - 1\n        u = int(u.split()[1]) - 1\n        if u > v:\n            (u, v) = (v, u)\n        if nobles[u] == 0:\n            n -= 1\n        nobles[u] += 1\n    else:\n        v = int(u.split()[2]) - 1\n        u = int(u.split()[1]) - 1\n        if u > v:\n            (u, v) = (v, u)\n        nobles[u] -= 1\n        if nobles[u] == 0:\n            n += 1", "(n, m) = map(int, input().split())\narr = [0 for i in range(n)]\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    if u > v:\n        arr[v - 1] += 1\n    else:\n        arr[u - 1] += 1\nq = int(input())\nans = 0\nfor i in arr:\n    if i == 0:\n        ans += 1\nfor i in range(q):\n    temp2 = input()\n    if temp2 != '3':\n        (a, u, v) = map(int, temp2.split())\n        if a == 1:\n            if u > v:\n                if arr[v - 1] == 0:\n                    ans -= 1\n                arr[v - 1] += 1\n            else:\n                if arr[u - 1] == 0:\n                    ans -= 1\n                arr[u - 1] += 1\n        elif a == 2:\n            if u > v:\n                arr[v - 1] -= 1\n                if arr[v - 1] == 0:\n                    ans += 1\n            else:\n                arr[u - 1] -= 1\n                if arr[u - 1] == 0:\n                    ans += 1\n    else:\n        print(ans)", "from typing import BinaryIO\n\ndef main():\n    for i in range(1):\n        solve()\n\ndef solve():\n    (n, m) = pair()\n    bigger = [0 for i in range(n)]\n    for i in range(m):\n        (u, v) = pair()\n        bigger[min(u, v) - 1] += 1\n    ans = find(bigger)\n    q = num()\n    for i in range(q):\n        s = input()\n        if s == '3':\n            print(ans)\n        else:\n            (k, u, v) = map(int, s.split())\n            if k == 1:\n                bigger[min(u, v) - 1] += 1\n                if bigger[min(u, v) - 1] == 1:\n                    ans -= 1\n            else:\n                bigger[min(u, v) - 1] -= 1\n                if bigger[min(u, v) - 1] == 0:\n                    ans += 1\n\ndef find(array):\n    ans = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            ans += 1\n    return ans\nimport itertools\nimport bisect, math\nimport copy\nimport fractions\n\ndef s(e):\n    return sum(e)\n\ndef l(e):\n    return len(e)\n\ndef num():\n    return int(input())\n\ndef array():\n    return list(map(int, input().split()))\n\ndef pair():\n    return map(int, input().split())\n\ndef p(x='', end='\\n'):\n    return print(x, end=end)\n\ndef sort(a):\n    return sorted(a)\n\ndef fpair(x):\n    return str(fractions.Fraction(x)).split('/')\n\ndef parray(a):\n    for i in a:\n        p(i, end=' ')\n    p()\nmain()", "arr = input().split()\nn = int(arr[0])\nm = int(arr[1])\nlist_frd = []\nfor i in range(n):\n    list_frd.append(0)\nnobles = n\nfor i in range(m):\n    arr = input().split(' ')\n    s = int(arr[0])\n    b = int(arr[1])\n    if s > b:\n        (s, b) = (b, s)\n    s = s - 1\n    if list_frd[s] == 0:\n        nobles = nobles - 1\n    list_frd[s] = list_frd[s] + 1\nq = int(input())\nfor i in range(q):\n    arr = input().split()\n    if len(arr) == 1:\n        print(nobles)\n    elif int(arr[0]) == 1:\n        s = int(arr[1])\n        b = int(arr[2])\n        if s > b:\n            (s, b) = (b, s)\n        s = s - 1\n        if list_frd[s] == 0:\n            nobles = nobles - 1\n        list_frd[s] = list_frd[s] + 1\n    else:\n        s = int(arr[1])\n        b = int(arr[2])\n        if s > b:\n            (s, b) = (b, s)\n        s = s - 1\n        list_frd[s] = list_frd[s] - 1\n        if list_frd[s] == 0:\n            nobles = nobles + 1", "(n, m) = map(int, input().split())\na = [0] * n\nfor _ in range(m):\n    (b, c) = map(int, input().split())\n    a[min(b, c)] += 1\nz = 0\nfor i in a:\n    if i == 0:\n        z += 1\ns1 = z\nv = list(a)\nq = int(input())\nfor _ in range(q):\n    t = input()\n    if t[0] == '3':\n        print(s1)\n    else:\n        (query, b, c) = map(int, t.split())\n        if query == 1:\n            v[min(b, c)] += 1\n            if v[min(b, c)] == 1:\n                s1 -= 1\n        else:\n            v[min(b, c)] -= 1\n            if v[min(b, c)] == 0:\n                s1 += 1", "def ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef msi():\n    return map(str, input().split())\n\ndef li():\n    return list(mi())\nfor _ in range(1):\n    (n, m) = mi()\n    ans = 0\n    res = [0] * (n + 1)\n    for i in range(m):\n        (u, v) = mi()\n        u = min(u, v)\n        res[u] += 1\n    for i in range(1, n + 1):\n        if res[i] > 0:\n            ans += 1\n    q = ii()\n    for i in range(q):\n        s = input().split()\n        if s[0] == '3':\n            print(n - ans)\n        elif s[0] == '1':\n            u = int(s[1])\n            v = int(s[2])\n            u = min(u, v)\n            if res[u] > 0:\n                res[u] += 1\n            else:\n                ans += 1\n                res[u] += 1\n        elif s[0] == '2':\n            u = int(s[1])\n            v = int(s[2])\n            u = min(u, v)\n            if res[u] == 1:\n                ans -= 1\n                res[u] -= 1\n            else:\n                res[u] -= 1", "(n, m) = map(int, input().split())\nseen = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = sorted([u, v])\n    seen[u] += 1\n    if seen[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    row = input()\n    if len(row) == 1:\n        print(ans)\n    else:\n        (k, u, v) = map(int, row.split())\n        (u, v) = sorted([u, v])\n        if k == 1:\n            seen[u] += 1\n            if seen[u] == 1:\n                ans -= 1\n        else:\n            seen[u] -= 1\n            if seen[u] == 0:\n                ans += 1", "A = list(map(int, input().split()))\n(n, m) = (A[0], A[1])\ndic = [0 for _ in range(n + 1)]\nans = 0\nfor _ in range(m):\n    A = list(map(int, input().split()))\n    minn = min(A)\n    if dic[minn] == 0:\n        ans += 1\n    dic[minn] += 1\nx = int(input())\nfor _ in range(x):\n    A = input()\n    if len(A) == 1:\n        print(n - ans)\n    elif A[0] == '1':\n        A = list(map(int, A.split()))\n        minn = min(A[1:])\n        if dic[minn] == 0:\n            ans += 1\n        dic[minn] += 1\n    elif A[0] == '2':\n        A = list(map(int, A.split()))\n        minn = min(A[1:])\n        dic[minn] -= 1\n        if dic[minn] == 0:\n            ans -= 1", "(n, m) = map(int, input().split())\nfrens = [0 for __ in range(n + 1)]\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    if u > v:\n        frens[v] += 1\n    else:\n        frens[u] += 1\nalive = 0\nfor i in range(1, n + 1):\n    if frens[i] == 0:\n        alive += 1\nfor ___ in range(int(input())):\n    inp = input().strip()\n    if len(inp) == 1:\n        print(max(alive, 0))\n    else:\n        (a, b, c) = map(int, inp.split())\n        if a == 1:\n            if b > c:\n                if frens[c] == 0:\n                    alive -= 1\n                frens[c] += 1\n            else:\n                if frens[b] == 0:\n                    alive -= 1\n                frens[b] += 1\n        elif b > c:\n            frens[c] -= 1\n            if frens[c] == 0:\n                alive += 1\n        else:\n            frens[b] -= 1\n            if frens[b] == 0:\n                alive += 1", "(n, m) = map(int, input().split())\nx = [0] * n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    u -= 1\n    v -= 1\n    if u < v:\n        x[u] += 1\n    else:\n        x[v] += 1\nc = 0\nfor i in range(n):\n    if x[i] == 0:\n        c += 1\nq = int(input())\nwhile q:\n    q -= 1\n    s = input()\n    if len(s) == 1:\n        print(c)\n        continue\n    else:\n        (y, u, v) = map(int, s.split())\n        u -= 1\n        v -= 1\n        if y == 1:\n            if u < v:\n                if x[u] == 0:\n                    c -= 1\n                x[u] += 1\n            else:\n                if x[v] == 0:\n                    c -= 1\n                x[v] += 1\n        elif u < v:\n            x[u] -= 1\n            if x[u] == 0:\n                c += 1\n        else:\n            x[v] -= 1\n            if x[v] == 0:\n                c += 1", "from collections import defaultdict\n(n, m) = map(int, input().split())\nweak_map = defaultdict(int)\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    weak_map[min(a, b)] += 1\nk = int(input())\nfor _ in range(k):\n    q = input()\n    if len(q) == 1:\n        print(n - len(weak_map))\n    else:\n        (ty, a, b) = map(int, q.split())\n        if ty == 1:\n            weak_map[min(a, b)] += 1\n        else:\n            weak_map[min(a, b)] -= 1\n            if weak_map[min(a, b)] == 0:\n                del weak_map[min(a, b)]", "(n, m) = map(int, input().split())\nseen = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = sorted([u, v])\n    seen[u] += 1\n    if seen[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    row = input()\n    if len(row) == 1:\n        print(ans)\n    else:\n        (k, u, v) = map(int, row.split())\n        (u, v) = sorted([u, v])\n        if k == 1:\n            seen[u] += 1\n            if seen[u] == 1:\n                ans -= 1\n        else:\n            seen[u] -= 1\n            if seen[u] == 0:\n                ans += 1", "(n, m) = map(int, input().split())\nhigher_friends = [0 for i in range(n)]\nalive = n\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    if a > b:\n        if higher_friends[b - 1] == 0:\n            alive -= 1\n        higher_friends[b - 1] += 1\n    else:\n        if higher_friends[a - 1] == 0:\n            alive -= 1\n        higher_friends[a - 1] += 1\nquery = int(input())\nfor i in range(query):\n    s = input()\n    if s[0] == '1':\n        (a, b) = map(int, s[2:].split())\n        if a > b:\n            if higher_friends[b - 1] == 0:\n                alive -= 1\n            higher_friends[b - 1] += 1\n        else:\n            if higher_friends[a - 1] == 0:\n                alive -= 1\n            higher_friends[a - 1] += 1\n    elif s[0] == '2':\n        (a, b) = map(int, s[2:].split())\n        if a > b:\n            higher_friends[b - 1] -= 1\n            if higher_friends[b - 1] == 0:\n                alive += 1\n        else:\n            higher_friends[a - 1] -= 1\n            if higher_friends[a - 1] == 0:\n                alive += 1\n    else:\n        print(alive)", "(n, m) = map(int, input().split())\na = [0 for i in range(n)]\nfor i in range(m):\n    (ar, b) = map(int, input().split())\n    x = min(ar, b)\n    a[x] += 1\ns = 0\nfor i in a:\n    if i == 0:\n        s += 1\nat = a\ng = 1\nst = int(s)\nfor q in range(int(input())):\n    t = input()\n    if t[0] == '3':\n        print(st)\n    else:\n        (qn, ar, b) = map(int, t.split())\n        if qn == 1:\n            x = min(ar, b)\n            at[x] += 1\n            if at[x] == 1:\n                st -= 1\n        else:\n            x = min(ar, b)\n            at[x] -= 1\n            if at[x] == 0:\n                st += 1", "from collections import defaultdict\nwhile True:\n    try:\n        bigger = defaultdict(int)\n        (n, m) = map(int, input().strip().split())\n        killed = 0\n        for _ in range(m):\n            (a, b) = map(int, input().strip().split())\n            if a > b:\n                (a, b) = (b, a)\n            if bigger[a] == 0:\n                killed += 1\n            bigger[a] += 1\n        q = int(input().strip())\n        for _ in range(q):\n            line = input().strip()\n            if line[0] == '3':\n                print(n - killed)\n            else:\n                (op, u, v) = map(int, line.split())\n                if op == 1:\n                    if u > v:\n                        (u, v) = (v, u)\n                    if bigger[u] == 0:\n                        killed += 1\n                    bigger[u] += 1\n                else:\n                    if u > v:\n                        (u, v) = (v, u)\n                    bigger[u] -= 1\n                    if bigger[u] == 0:\n                        killed -= 1\n    except EOFError:\n        break", "ANS = 0\nDEG = []\n\ndef add(u, v):\n    global ANS, DEG\n    if u > v:\n        (u, v) = (v, u)\n    ANS -= DEG[u] == 0\n    DEG[u] += 1\n\ndef del_(u, v):\n    global ANS, DEG\n    if u > v:\n        (u, v) = (v, u)\n    DEG[u] -= 1\n    ANS += DEG[u] == 0\n\ndef main():\n    global ANS, DEG\n    (n, m) = map(int, input().split())\n    ANS = n\n    DEG = [0] * n\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        add(u, v)\n    q = int(input())\n    for _ in range(q):\n        s = input().split()\n        c = int(s[0])\n        if c == 1:\n            (u, v) = map(int, s[1:])\n            add(u, v)\n        elif c == 2:\n            (u, v) = map(int, s[1:])\n            del_(u, v)\n        elif c == 3:\n            print(ANS)\n        else:\n            raise NotImplementedError\nmain()", "(n, m) = map(int, input().split())\ndi = [0] * (n + 2)\ndead = 0\nfor _ in range(m):\n    (a, b) = map(int, input().split())\n    if a > b:\n        (a, b) = (b, a)\n    if di[a] == 0:\n        dead += 1\n    di[a] += 1\nq = int(input())\nfor _ in range(q):\n    st = input()\n    if st == '3':\n        print(n - dead)\n    else:\n        (x, a, b) = map(int, st.split())\n        if x == 1:\n            if a > b:\n                (a, b) = (b, a)\n            if di[a] == 0:\n                dead += 1\n            di[a] += 1\n        else:\n            if a > b:\n                (a, b) = (b, a)\n            if di[a] == 1:\n                dead -= 1\n            di[a] -= 1", "A = list(map(int, input().split()))\n(n, m) = (A[0], A[1])\ndic = [0 for _ in range(n + 1)]\nans = 0\nfor _ in range(m):\n    A = list(map(int, input().split()))\n    minn = min(A)\n    if dic[minn] == 0:\n        ans += 1\n    dic[minn] += 1\nx = int(input())\nfor _ in range(x):\n    A = input()\n    if len(A) == 1:\n        print(n - ans)\n    elif A[0] == '1':\n        (_, a, b) = map(int, A.split())\n        minn = min(a, b)\n        if dic[minn] == 0:\n            ans += 1\n        dic[minn] += 1\n    elif A[0] == '2':\n        (_, a, b) = map(int, A.split())\n        minn = min(a, b)\n        dic[minn] -= 1\n        if dic[minn] == 0:\n            ans -= 1", "from collections import defaultdict\nA = list(map(int, input().split()))\n(n, m) = (A[0], A[1])\ndic = defaultdict(int)\nfor _ in range(m):\n    A = list(map(int, input().split()))\n    minn = min(A)\n    dic[minn] += 1\nx = int(input())\nfor _ in range(x):\n    A = input()\n    if A[0] == '1':\n        A = list(map(int, A.split()))\n        minn = min(A[1:])\n        dic[minn] += 1\n    elif A[0] == '2':\n        A = list(map(int, A.split()))\n        minn = min(A[1:])\n        dic[minn] -= 1\n        if dic[minn] == 0:\n            del dic[minn]\n    else:\n        print(n - len(dic))", "from copy import deepcopy\n(n, m) = map(int, input().split())\nd = [0 for i in range(1, n + 1)]\np = set()\nfor _ in range(m):\n    (x, y) = map(int, input().split())\n    (x, y) = (max(x, y), min(x, y))\n    d[y - 1] += 1\n    p.add(y)\nr = n - len(p)\nrr = r\nfor _ in range(int(input())):\n    n = input()\n    if n == '3':\n        print(r)\n    else:\n        n = n.split()\n        (x, y) = (int(n[1]), int(n[2]))\n        if n[0] == '1':\n            if d[min(x, y) - 1] == 0:\n                r -= 1\n            d[min(x, y) - 1] += 1\n        else:\n            if d[min(x, y) - 1] == 1:\n                r += 1\n            d[min(x, y) - 1] -= 1", "(n, m) = map(int, input().split())\na = [0] * n\not = 0\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    b = min(u, v)\n    a[b - 1] += 1\n    if a[b - 1] == 1:\n        ot += 1\nq = int(input())\nfor i in range(q):\n    s = input()\n    if s[0] == '3':\n        print(n - ot)\n    if s[0] != '3':\n        (x, y, z) = map(int, s.split())\n        if x == 1:\n            a[min(y, z) - 1] += 1\n            if a[min(y, z) - 1] == 1:\n                ot += 1\n        else:\n            a[min(y, z) - 1] -= 1\n            if a[min(y, z) - 1] == 0:\n                ot -= 1", "(a, m) = map(int, input().split())\nc = [0] * (a + 1)\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    z = min(u, v)\n    if c[z] == 0:\n        a -= 1\n    c[z] += 1\nfor _ in range(int(input())):\n    tes = input().split()\n    if len(tes) == 1:\n        print(a)\n    else:\n        (x, u, v) = map(int, tes)\n        if x == 1:\n            z = min(u, v)\n            if c[z] == 0:\n                a -= 1\n            c[z] += 1\n        else:\n            z = min(u, v)\n            if c[z] == 1:\n                a += 1\n            c[u] -= 1", "(a, m) = map(int, input().split())\nc = [0] * (a + 1)\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    z = min(u, v)\n    if c[z] == 0:\n        a -= 1\n    c[z] += 1\nfor _ in range(int(input())):\n    tes = input().split()\n    if len(tes) == 1:\n        print(a)\n    else:\n        (x, u, v) = map(int, tes)\n        if x == 1:\n            z = min(u, v)\n            if c[z] == 0:\n                a -= 1\n            c[z] += 1\n        else:\n            z = min(u, v)\n            if c[z] == 1:\n                a += 1\n            c[u] -= 1", "(n, m) = map(int, input().split())\nseen = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = sorted([u, v])\n    seen[u] += 1\n    if seen[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    row = input()\n    if len(row) == 1:\n        print(ans)\n    else:\n        (k, u, v) = map(int, row.split())\n        (u, v) = sorted([u, v])\n        if k == 1:\n            seen[u] += 1\n            if seen[u] == 1:\n                ans -= 1\n        else:\n            seen[u] -= 1\n            if seen[u] == 0:\n                ans += 1", "(n, m) = map(int, input().split())\nseen = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = sorted([u, v])\n    seen[u] += 1\n    if seen[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    row = input()\n    if len(row) == 1:\n        print(ans)\n    else:\n        (k, u, v) = map(int, row.split())\n        (u, v) = sorted([u, v])\n        if k == 1:\n            seen[u] += 1\n            if seen[u] == 1:\n                ans -= 1\n        else:\n            seen[u] -= 1\n            if seen[u] == 0:\n                ans += 1", "(n, m) = map(int, input().split())\ng = [0] * (n + 1)\ndead = 0\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    if x > y:\n        weak = y\n    else:\n        weak = x\n    g[weak] += 1\n    if g[weak] == 1:\n        dead += 1\nfor q in range(int(input())):\n    miku = input().split()\n    if len(miku) == 1:\n        print(n - dead)\n        continue\n    (typ, x, y) = map(int, miku)\n    if x > y:\n        weak = y\n    else:\n        weak = x\n    if typ == 1:\n        g[weak] += 1\n        if g[weak] == 1:\n            dead += 1\n    if typ == 2:\n        g[weak] -= 1\n        if g[weak] == 0:\n            dead -= 1", "(n, m) = list(map(int, input().split()))\narr = [1] * n\nfrnd = [0] * n\nfor _ in range(m):\n    (x, y) = list(map(int, input().split()))\n    if x > y:\n        arr[y] = 0\n        frnd[y] += 1\n    else:\n        arr[x] = 0\n        frnd[x] += 1\nans = frnd.count(0)\ntem = 0\ntemp = 0\nq = int(input())\nfor _ in range(q):\n    tem = input().split()\n    if len(tem) == 1:\n        print(ans)\n    elif int(tem[0]) == 2:\n        temp = min(int(tem[1]), int(tem[2]))\n        frnd[temp] -= 1\n        if frnd[temp] == 0:\n            ans += 1\n    else:\n        temp = min(int(tem[1]), int(tem[2]))\n        frnd[temp] += 1\n        if frnd[temp] == 1:\n            ans -= 1", "(n, m) = map(int, input().split())\nar = [0 for _ in range(n + 1)]\nans = n\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = (min(u, v), max(u, v))\n    if ar[u] == 0:\n        ans -= 1\n    ar[u] += 1\nq = int(input())\nfor _ in range(q):\n    inp = input()\n    if inp[0] == '1':\n        (_, u, v) = inp.split()\n        (u, v) = (min(int(u), int(v)), max(int(u), int(v)))\n        if ar[u] == 0:\n            ans -= 1\n        ar[u] += 1\n    elif inp[0] == '2':\n        (_, u, v) = inp.split()\n        (u, v) = (min(int(u), int(v)), max(int(u), int(v)))\n        ar[u] -= 1\n        if ar[u] == 0:\n            ans += 1\n    else:\n        print(ans)", "(a, m) = map(int, input().split())\nc = [0] * (a + 1)\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    z = min(u, v)\n    if c[z] == 0:\n        a -= 1\n    c[z] += 1\nfor _ in range(int(input())):\n    tes = input().split()\n    if len(tes) == 1:\n        print(a)\n    else:\n        (x, u, v) = map(int, tes)\n        if x == 1:\n            z = min(u, v)\n            if c[z] == 0:\n                a -= 1\n            c[z] += 1\n        else:\n            z = min(u, v)\n            if c[z] == 1:\n                a += 1\n            c[u] -= 1", "(a, m) = map(int, input().split())\nc = [0] * (a + 1)\nfor _ in range(m):\n    (u, v) = map(int, input().split())\n    z = min(u, v)\n    if c[z] == 0:\n        a -= 1\n    c[z] += 1\nfor _ in range(int(input())):\n    tes = input().split()\n    if len(tes) == 1:\n        print(a)\n    else:\n        (x, u, v) = map(int, tes)\n        if x == 1:\n            z = min(u, v)\n            if c[z] == 0:\n                a -= 1\n            c[z] += 1\n        else:\n            z = min(u, v)\n            if c[z] == 1:\n                a += 1\n            c[u] -= 1", "from collections import defaultdict\n(n, m) = map(int, input().split())\ndegree = defaultdict(int)\nans = n\nfor _ in range(m):\n    (s, d) = map(int, input().split())\n    (s, d) = (min(s, d), max(s, d))\n    if degree[s] == 0:\n        ans -= 1\n    degree[s] += 1\nq = int(input())\nfor _ in range(q):\n    d = input()\n    if len(d) == 1:\n        print(ans)\n    else:\n        (o, s, g) = map(int, d.split())\n        if o == 1:\n            (s, g) = (min(s, g), max(s, g))\n            if degree[s] == 0:\n                ans -= 1\n            degree[s] += 1\n        else:\n            (s, g) = (min(s, g), max(s, g))\n            if degree[s] == 1:\n                ans += 1\n            degree[s] -= 1", "def solution():\n    (n, m) = map(int, input().split())\n    greater = {node: set() for node in range(1, n + 1)}\n    freeNodes = set([node for node in greater])\n    for _ in range(m):\n        (a, b) = map(int, input().split())\n        if a < b:\n            (a, b) = (b, a)\n        greater[b].add(a)\n        if b in freeNodes:\n            freeNodes.remove(b)\n    q = int(input())\n    for _ in range(q):\n        c = input()\n        if len(c) == 1:\n            print(len(freeNodes))\n            continue\n        (op, a, b) = map(int, c.split())\n        if a < b:\n            (a, b) = (b, a)\n        if op == 1:\n            greater[b].add(a)\n            if b in freeNodes:\n                freeNodes.remove(b)\n        elif op == 2:\n            if a in greater[b]:\n                greater[b].remove(a)\n                if len(greater[b]) == 0:\n                    freeNodes.add(b)\nimport sys\nimport threading\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nthread = threading.Thread(target=solution)\nthread.start()\nthread.join()", "(n, m) = map(int, input().split())\nseen = [0] * (n + 1)\nans = n\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = sorted([u, v])\n    seen[u] += 1\n    if seen[u] == 1:\n        ans -= 1\nq = int(input())\nfor i in range(q):\n    row = input()\n    if len(row) == 1:\n        print(ans)\n    else:\n        (k, u, v) = map(int, row.split())\n        (u, v) = sorted([u, v])\n        if k == 1:\n            seen[u] += 1\n            if seen[u] == 1:\n                ans -= 1\n        else:\n            seen[u] -= 1\n            if seen[u] == 0:\n                ans += 1", "def solve():\n    (n, m) = map(int, input().split())\n    ans = dict()\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        if u > v:\n            if v in ans:\n                ans[v] += 1\n            else:\n                ans[v] = 1\n        elif u in ans:\n            ans[u] += 1\n        else:\n            ans[u] = 1\n    q = int(input())\n    res = len(ans)\n    for _ in range(q):\n        temp = list(map(int, input().split()))\n        t = temp[0]\n        if t == 2:\n            (u, v) = (temp[1], temp[2])\n            if u > v:\n                ans[v] -= 1\n                if ans[v] == 0:\n                    del ans[v]\n                    res -= 1\n            else:\n                ans[u] -= 1\n                if ans[u] == 0:\n                    del ans[u]\n                    res -= 1\n        elif t == 1:\n            (u, v) = (temp[1], temp[2])\n            if u > v:\n                if v in ans:\n                    ans[v] += 1\n                else:\n                    ans[v] = 1\n                    res += 1\n            elif u in ans:\n                ans[u] += 1\n            else:\n                ans[u] = 1\n                res += 1\n        else:\n            print(n - res)\nt = 1\nfor i in range(t):\n    solve()", "for _ in range(1):\n    (n, m) = map(int, input().split())\n    mp = dict()\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        (x, y) = (max(x, y), min(x, y))\n        if y in mp:\n            mp[y] += 1\n        else:\n            mp[y] = 1\n    q = int(input())\n    for h in range(q):\n        qu = input()\n        if qu[0] == '3':\n            print(n - len(mp))\n        else:\n            (t, x, y) = map(int, qu.split())\n            if t == 1:\n                (x, y) = (max(x, y), min(x, y))\n                if y in mp:\n                    mp[y] += 1\n                else:\n                    mp[y] = 1\n            else:\n                (x, y) = (max(x, y), min(x, y))\n                mp[y] -= 1\n                if mp[y] == 0:\n                    del mp[y]", "(n, m) = list(map(int, input().split()))\nw = [0 for i in range(n)]\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    if u > v:\n        w[v - 1] += 1\n    else:\n        w[u - 1] += 1\nans = w.count(0)\nfor _ in range(int(input())):\n    s = list(map(int, input().split()))\n    if s[0] == 3:\n        print(ans)\n    elif s[0] == 1:\n        if s[1] > s[2]:\n            w[s[2] - 1] += 1\n            if w[s[2] - 1] == 1:\n                ans -= 1\n        else:\n            w[s[1] - 1] += 1\n            if w[s[1] - 1] == 1:\n                ans -= 1\n    elif s[1] > s[2]:\n        w[s[2] - 1] -= 1\n        if w[s[2] - 1] == 0:\n            ans += 1\n    else:\n        w[s[1] - 1] -= 1\n        if w[s[1] - 1] == 0:\n            ans += 1", "(n, m) = map(int, input().split())\nsmall = [0] * (n + 1)\nbig = [0] * (n + 1)\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    small[max(u, v)] += 1\n    big[min(u, v)] += 1\nans = 0\nfor i in range(1, n + 1):\n    if big[i] == 0:\n        ans += 1\nq = int(input())\nfor i in range(q):\n    ch = input().split(' ')\n    if ch[0] == '1':\n        u = int(ch[1])\n        v = int(ch[2])\n        if big[min(u, v)] == 0:\n            ans -= 1\n        small[max(u, v)] += 1\n        big[min(u, v)] += 1\n    elif ch[0] == '2':\n        u = int(ch[1])\n        v = int(ch[2])\n        small[max(u, v)] -= 1\n        big[min(u, v)] -= 1\n        if big[min(u, v)] == 0:\n            ans += 1\n    else:\n        print(ans)", "(n, m) = [int(i) for i in input().split(' ')]\nvin = {}\nvout = {}\nans = 0\nfor i in range(1, n + 1):\n    vin[i] = 0\n    vout[i] = 0\nfor i in range(m):\n    (u, v) = [int(j) for j in input().split(' ')]\n    if u > v:\n        vout[u] += 1\n        vin[v] += 1\n    else:\n        vout[v] += 1\n        vin[u] += 1\nfor i in vin:\n    if vin[i] == 0:\n        ans += 1\nq = int(input())\nfor i in range(q):\n    s = input()\n    if len(s) > 1:\n        (a, u, v) = [int(j) for j in s.split(' ')]\n    else:\n        a = 3\n    if a == 1:\n        if u > v:\n            vout[u] += 1\n            vin[v] += 1\n            if vin[v] == 1:\n                ans -= 1\n        else:\n            vout[v] += 1\n            vin[u] += 1\n            if vin[u] == 1:\n                ans -= 1\n    elif a == 2:\n        if u > v:\n            vout[u] -= 1\n            vin[v] -= 1\n            if vin[v] == 0:\n                ans += 1\n        else:\n            vout[v] -= 1\n            vin[u] -= 1\n            if vin[u] == 0:\n                ans += 1\n    else:\n        print(ans)", "from collections import defaultdict\n\ndef test():\n    (n, m) = map(int, input().split())\n    c = defaultdict(int)\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        x = min(u, v)\n        c[x] += 1\n    p = 0\n    for i in range(1, n + 1):\n        if c[i] > 0:\n            p += 1\n    q = int(input())\n    for i in range(q):\n        l = list(map(int, input().split()))\n        if l[0] < 3:\n            if l[0] == 1:\n                x = min(l[1], l[2])\n                if c[x] == 0:\n                    p += 1\n                c[x] += 1\n            else:\n                x = min(l[1], l[2])\n                c[x] -= 1\n                if c[x] == 0:\n                    p -= 1\n        else:\n            print(n - p)\nt = 1\nwhile t:\n    test()\n    t -= 1", "(n, m) = map(int, input().split())\nstronger = [0] * (n + 1)\ntotal = 0\nfor i in range(m):\n    (u, v) = map(int, input().split())\n    (u, v) = (min(u, v), max(u, v))\n    stronger[u] += 1\n    if stronger[u] == 1:\n        total += 1\nquery = int(input())\nfor q in range(query):\n    X = input().split()\n    (i, u, v) = (int(X[0]), None, None)\n    if len(X) > 1:\n        u = int(X[1])\n        v = int(X[2])\n    if i == 3:\n        print(n - total)\n    elif i == 1:\n        (u, v) = (min(u, v), max(u, v))\n        stronger[u] += 1\n        if stronger[u] == 1:\n            total += 1\n    else:\n        (u, v) = (min(u, v), max(u, v))\n        stronger[u] -= 1\n        if stronger[u] == 0:\n            total -= 1", "(m, n) = map(int, input().split())\nl = [0] * (m + 1)\nans = 0\nfor i in range(n):\n    (u, v) = map(int, input().split())\n    if u > v:\n        (u, v) = (v, u)\n    l[u] += 1\n    if l[u] == 1:\n        ans += 1\nq = int(input())\nfor i in range(q):\n    li = list(map(int, input().split()))\n    if len(li) == 1:\n        print(m - ans)\n        continue\n    if li[0] == 1:\n        if li[1] > li[2]:\n            (li[1], li[2]) = (li[2], li[1])\n        l[li[1]] += 1\n        if l[li[1]] == 1:\n            ans += 1\n    elif li[0] == 2:\n        if li[1] > li[2]:\n            (li[1], li[2]) = (li[2], li[1])\n        l[li[1]] -= 1\n        if l[li[1]] == 0:\n            ans -= 1", "(m, n) = map(int, input().split())\nl = [0] * (m + 1)\nans = 0\nfor i in range(n):\n    (u, v) = map(int, input().split())\n    if u > v:\n        (u, v) = (v, u)\n    l[u] += 1\n    if l[u] == 1:\n        ans += 1\nq = int(input())\nfor i in range(q):\n    li = list(map(int, input().split()))\n    if len(li) == 1:\n        print(m - ans)\n        continue\n    if li[0] == 1:\n        if li[1] > li[2]:\n            (li[1], li[2]) = (li[2], li[1])\n        l[li[1]] += 1\n        if l[li[1]] == 1:\n            ans += 1\n    elif li[0] == 2:\n        if li[1] > li[2]:\n            (li[1], li[2]) = (li[2], li[1])\n        l[li[1]] -= 1\n        if l[li[1]] == 0:\n            ans -= 1", "q = list(map(int, input().split()))\na = [0 for _ in range(q[0])]\nres = q[0]\nfor _ in range(q[1]):\n    x = min(list(map(int, input().split())))\n    res -= 1 if a[x] == 0 else 0\n    a[x] += 1\nfor _ in range(int(input())):\n    x = input().split()\n    if x[0] == '1':\n        x = min(int(x[1]), int(x[2]))\n        res -= 1 if a[x] == 0 else 0\n        a[x] += 1\n    elif x[0] == '2':\n        x = min(int(x[1]), int(x[2]))\n        a[x] -= 1\n        res += 1 if a[x] == 0 else 0\n    else:\n        print(res)"]