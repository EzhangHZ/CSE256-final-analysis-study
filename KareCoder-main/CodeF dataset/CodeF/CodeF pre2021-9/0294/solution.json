["list_ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list1.sort()\n    i1 = 0\n    a = 10 ** 9\n    for i in range(n - 1):\n        if a > list1[i + 1] - list1[i]:\n            a = list1[i + 1] - list1[i]\n            i1 = i\n        if a == 0:\n            break\n    list_ans.append(' '.join(map(str, [list1[i1]] + list(list1[i1 + 2:]) + list(list1[:i1]) + [list1[i1 + 1]])))\nfor item in list_ans:\n    print(item)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n == 2:\n        print(a[0], a[1])\n        continue\n    max = 1 + 10 ** 9\n    for i in range(1, n):\n        if a[i] - a[i - 1] < max:\n            max = a[i] - a[i - 1]\n            x = i\n        if max == 0:\n            break\n    print(' '.join(list(map(str, a[x:]))) + ' ' + ' '.join(list(map(str, a[:x]))))", "from collections import Counter\n\ndef solution(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        (num1, num2) = (arr[i], arr[i + 1])\n        if num2 - num1 < min_diff:\n            min_diff = num2 - num1\n            idx = i\n    return [arr[idx]] + arr[idx + 2:] + arr[:idx] + [arr[idx + 1]]\nN = int(input())\nfor _ in range(N):\n    input()\n    arr = list(map(int, input().split()))\n    print(' '.join(map(str, solution(arr))))", "def sol(A):\n    A = sorted(A)\n    minn = 2 ** 31\n    for i in range(len(A) - 1):\n        if A[i + 1] - A[i] < minn:\n            minn = A[i + 1] - A[i]\n            (a, b, x) = (A[i], A[i + 1], i)\n    ans = [a] + A[x + 2:] + A[:x] + [b]\n    return ' '.join(map(str, ans))\nx = int(input())\nfor _ in range(x):\n    y = int(input())\n    A = list(map(int, input().split()))\n    print(sol(A))", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    u.sort()\n    ind = -1\n    d = 10 ** 10\n    for i in range(1, n):\n        if u[i] - u[i - 1] < d:\n            d = u[i] - u[i - 1]\n            ind = i\n    p = u[ind:] + u[:ind]\n    (p[0], p[-1]) = (p[-1], p[0])\n    ans.append(' '.join(map(str, p)))\nprint('\\n'.join(ans))", "test_cases = int(input())\n\ndef handle() -> str:\n    n = int(input())\n    values = sorted([int(i) for i in input().split(' ')])\n    best_diff = float('inf')\n    best_pair_indexes = None\n    for i in range(len(values) - 1):\n        if values[i + 1] - values[i] < best_diff:\n            best_diff = values[i + 1] - values[i]\n            best_pair_indexes = [i, i + 1]\n    greater = values[best_pair_indexes[1] + 1:]\n    smaller = values[:best_pair_indexes[0]]\n    result = [values[best_pair_indexes[0]]] + greater + smaller + [values[best_pair_indexes[1]]]\n    return ' '.join((str(s) for s in result))\nfor _ in range(test_cases):\n    print(handle())", "def solve(N, H):\n    H.sort()\n    mindiff = float('inf')\n    mindiff_height_idx = None\n    for i in range(len(H) - 1):\n        diff = H[i + 1] - H[i]\n        if diff < mindiff:\n            mindiff = diff\n            mindiff_height_idx = i\n    (l, r) = (H[mindiff_height_idx], H[mindiff_height_idx + 1])\n    res = [l]\n    for i in range(mindiff_height_idx + 2, N):\n        res.append(H[i])\n    for i in range(mindiff_height_idx):\n        res.append(H[i])\n    res.append(r)\n    return ' '.join(map(str, res))\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    H = list(map(int, input().split()))\n    print(solve(N, H))", "def solve():\n    n = int(input())\n    heights = [int(x) for x in input().split()]\n    heights.sort()\n    if n == 2:\n        yield from heights\n        return\n    min_pair_index = 0\n    for i in range(n - 1):\n        if heights[i + 1] - heights[i] < heights[min_pair_index + 1] - heights[min_pair_index]:\n            min_pair_index = i\n    yield from heights[min_pair_index + 1:]\n    yield from heights[:min_pair_index + 1]\nfor _ in range(int(input())):\n    print(' '.join((str(x) for x in solve())))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        arr.sort()\n        minn = maxsize\n        (i, j) = (0, 1)\n        (indi, indj) = (0, 1)\n        while j < n:\n            if arr[j] - arr[i] < minn:\n                minn = arr[j] - arr[i]\n                indi = i\n                indj = j\n            i += 1\n            j += 1\n        res = [arr[indi]] + arr[indj + 1:] + arr[:indi] + [arr[indj]]\n        get_print(' '.join(map(str, res)))\nsolve()", "s = int(input())\nfor _ in range(s):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    if len(a) <= 2:\n        q = map(str, a)\n        print(' '.join(q))\n        continue\n    (i, j) = (-1, -1)\n    c = -1\n    diff = 1000000007\n    for k in range(1, len(a)):\n        d = a[k] - a[k - 1]\n        if diff > d:\n            diff = d\n            c = k\n    q = map(str, a[c:] + a[:c])\n    print(' '.join(q))", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    minimal = a[1] - a[0]\n    index = 0\n    for i in range(n - 1):\n        if a[i + 1] - a[i] <= minimal:\n            index = i + 1\n            minimal = a[i + 1] - a[i]\n    if len(a) == 2:\n        return ' '.join(map(str, a))\n    ans = []\n    for i in range(index, n):\n        ans.append(str(a[i]))\n    for i in range(index):\n        ans.append(str(a[i]))\n    return ' '.join(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    print(solve())", "import math\n\ndef main_function():\n    tests = range(int(input()))\n    for test in tests:\n        n = int(input())\n        a = sorted([int(i) for i in input().split(' ')])\n        prev = -1000000000000000\n        difference = 10000000000000\n        current_item = -1\n        for i in range(len(a)):\n            if a[i] - prev < difference:\n                difference = a[i] - prev\n                current_item = i\n            prev = a[i]\n        begin = a[current_item - 1]\n        end = a[current_item]\n        a.pop(current_item)\n        a.pop(current_item - 1)\n        bigger = []\n        lower = []\n        for i in a:\n            if i <= begin:\n                lower.append(i)\n            else:\n                bigger.append(i)\n        a = [begin] + bigger + lower + [end]\n        print(' '.join([str(i) for i in a]))\nmain_function()", "q = int(input())\nfor t in range(q):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if n == 2:\n        print(' '.join(list(map(str, arr))))\n    else:\n        delta = 10 ** 10\n        pos = -1\n        for i in range(n - 1):\n            if delta > arr[i + 1] - arr[i]:\n                delta = arr[i + 1] - arr[i]\n                pos = i\n        arr = arr[pos + 1:] + arr[:pos + 1]\n        print(' '.join(list(map(str, arr))))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = list(map(int, input().split()))\n    data.sort()\n    minv = data[1] - data[0]\n    minp = 0\n    for i in range(n - 1):\n        diff = data[i + 1] - data[i]\n        if minv > diff:\n            minv = diff\n            minp = i\n    li = data[minp:minp + 1] + data[minp + 2:] + data[0:minp] + data[minp + 1:minp + 2]\n    print(' '.join(map(str, li)))", "import math as m\nfor w in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    best_pos = 0\n    for pos in range(1, n - 1):\n        diff = arr[pos + 1] - arr[pos]\n        if diff < min_diff:\n            min_diff = diff\n            best_pos = pos\n    n = [arr[best_pos]]\n    n += arr[best_pos + 2:]\n    n += arr[:best_pos]\n    n.append(arr[best_pos + 1])\n    print(' '.join([str(x) for x in n]))", "import math as m\nfor w in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    (a, b) = (arr[0], arr[1])\n    min_diff = b - a\n    best_pos = 0\n    for pos in range(1, n - 1):\n        (a, b) = (b, arr[pos + 1])\n        diff = b - a\n        if diff < min_diff:\n            min_diff = diff\n            best_pos = pos\n    n = [arr[best_pos]]\n    n += arr[best_pos + 2:]\n    n += arr[:best_pos]\n    n.append(arr[best_pos + 1])\n    print(' '.join([str(x) for x in n]))", "for iters in range(int(input())):\n    n = int(input())\n    array = [int(i) for i in input().split(' ')]\n    array.sort()\n    current = array[1] - array[0]\n    j = 0\n    for i in range(n - 1):\n        a = array[i + 1] - array[i]\n        if a <= current:\n            current = a\n            j = i\n    a = array.pop(j)\n    b = array.pop(j)\n    semiout1 = ''\n    if j < n - 2:\n        semiout1 = ' '.join(map(str, array[j:])) + ' '\n    semiout2 = ' '.join(map(str, array[0:j]))\n    print(str(a) + ' ' + semiout1 + semiout2 + ' ' + str(b))", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    li = list(map(int, sys.stdin.readline().split()))\n    li.sort()\n    if n == 2:\n        answer = li\n    else:\n        sub = li[1] - li[0]\n        su = 0\n        for i in range(1, len(li) - 1):\n            if li[i + 1] - li[i] < sub:\n                sub = li[i + 1] - li[i]\n                su = i\n        answer = [li[su]] + li[su + 2:] + li[:su] + [li[su + 1]]\n    answer = list(map(str, answer))\n    print(' '.join(answer))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    cliffs = list(map(int, input().split()))\n    cliffs.sort()\n    best = cliffs[1] - cliffs[0]\n    start = 0\n    for i in range(n - 1):\n        diff = cliffs[i + 1] - cliffs[i]\n        if diff < best:\n            best = diff\n            start = i\n    if n == 2:\n        l = cliffs\n    else:\n        l = cliffs[start + 1:] + cliffs[:start + 1]\n    print(' '.join([str(x) for x in l]))", "def I():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    nums = I()\n    nums.sort()\n    (li, hi) = (0, 0)\n    mindiff = float('inf')\n    for i in range(1, n):\n        if nums[i] - nums[i - 1] < mindiff:\n            (li, hi) = (i - 1, i)\n            mindiff = nums[i] - nums[i - 1]\n    res = [nums[li]] + nums[hi + 1:] + nums[:li] + [nums[hi]]\n    res = [str(x) for x in res]\n    print(' '.join(res))", "T = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    H = [int(x) for x in input().split()]\n    H = sorted(H)\n    idx = 0\n    mv = abs(H[0] - H[1])\n    for i in range(N - 1):\n        if H[i] == H[i + 1]:\n            idx = i\n            break\n        elif abs(H[i] - H[i + 1]) < mv:\n            idx = i\n            mv = abs(H[i] - H[i + 1])\n    H = [H[idx]] + H[idx + 2:] + H[:idx] + [H[idx + 1]]\n    print(' '.join(map(str, H)))", "def solve(ar):\n    ar = sorted(ar)\n    if len(ar) <= 2:\n        return ar\n    idx = 0\n    for i in range(len(ar) - 1):\n        if ar[i + 1] - ar[i] < ar[idx + 1] - ar[idx]:\n            idx = i\n    return [ar[idx]] + ar[idx + 2:] + ar[:idx] + [ar[idx + 1]]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ar = solve(ar)\n    print(' '.join((str(v) for v in ar)))", "for w in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    best_pos = 0\n    for pos in range(1, n - 1):\n        diff = arr[pos + 1] - arr[pos]\n        if diff < min_diff:\n            min_diff = diff\n            best_pos = pos\n    n = [arr[best_pos]]\n    n += arr[best_pos + 2:]\n    n += arr[:best_pos]\n    n.append(arr[best_pos + 1])\n    print(' '.join([str(x) for x in n]))", "for _ in range(int(input())):\n    n = int(input())\n    ms = list(map(int, input().split()))\n    ms.sort()\n    if len(ms) == 1:\n        print(ms[0])\n    elif len(ms) == 2:\n        print(str(ms[0]) + ' ' + str(ms[-1]))\n    else:\n        index = n - 1\n        min_ = ms[-1] - ms[-2]\n        for i in range(n - 1, 0, -1):\n            if ms[i] - ms[i - 1] <= min_:\n                index = i\n                min_ = ms[i] - ms[i - 1]\n        (h1, hn) = (ms[index - 1], ms[index])\n        ms = ms[0:index - 1] + ms[index + 1:]\n        start = 0\n        while start < n - 2 and ms[start] < h1:\n            start += 1\n        res = [h1] + ms[start:] + ms[:start] + [hn]\n        print(' '.join([str(num) for num in res]))", "for t in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    h.sort()\n    mn = 10 ** 10\n    i = 1\n    ind = 0\n    if n > 2:\n        while i < n:\n            if h[i] - h[i - 1] < mn:\n                mn = h[i] - h[i - 1]\n                ind = i\n            i += 1\n        a = h[ind:] + h[:ind]\n        print(' '.join(map(str, a)))\n    else:\n        print(' '.join(map(str, h)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    cliffs = list(map(int, input().split()))\n    cliffs.sort()\n    best = cliffs[1] - cliffs[0]\n    start = 0\n    for i in range(n - 1):\n        diff = cliffs[i + 1] - cliffs[i]\n        if diff < best:\n            best = diff\n            start = i\n    if n == 2:\n        l = cliffs\n    else:\n        l = cliffs[start + 1:] + cliffs[:start + 1]\n    print(' '.join([str(x) for x in l]))", "def solve(n, a):\n    if n == 2:\n        return ' '.join(map(str, a))\n    k = a[-1] - a[0]\n    x = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= k:\n            k = a[i] - a[i - 1]\n            x = i\n    b = []\n    c = []\n    for i in range(n):\n        if i < x:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    return ' '.join(map(str, c + b))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    print(solve(n, a))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = list(map(int, input().split()))\n    data.sort()\n    minv = data[1] - data[0]\n    minp = 0\n    for i in range(n - 1):\n        diff = data[i + 1] - data[i]\n        if minv > diff:\n            minv = diff\n            minp = i\n        elif minv == diff and i == n - 2:\n            minv = diff\n            minp = i\n    li = data[minp:minp + 1] + data[minp + 2:] + data[0:minp] + data[minp + 1:minp + 2]\n    print(' '.join(map(str, li)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = [int(s) for s in input().split(' ')]\n    h.sort()\n    min_diff = float('inf')\n    idx = -1\n    for i in range(1, n):\n        if h[i] - h[i - 1] < min_diff:\n            min_diff = h[i] - h[i - 1]\n            idx = i - 1\n    (first, second) = (h[idx], h[idx + 1])\n    h.pop(idx)\n    h.pop(idx)\n    h.insert(0, first)\n    h.append(second)\n    idx = -1\n    for i in range(1, n - 1):\n        if h[i] >= h[0]:\n            idx = i\n            break\n    if idx == -1:\n        print(' '.join(map(str, h)))\n    else:\n        ans = [h[0]]\n        for i in range(idx, n - 1):\n            ans.append(h[i])\n        for i in range(1, idx):\n            ans.append(h[i])\n        ans.append(h[-1])\n        print(' '.join(map(str, ans)))", "def zigzag(a):\n    a.sort()\n    curr = (a[0], a[1], 0, 1)\n    for i in range(1, len(a) - 1):\n        if abs(curr[0] - curr[1]) > abs(a[i] - a[i + 1]):\n            curr = (a[i], a[i + 1], i, i + 1)\n    ans = [curr[0]]\n    for j in range(curr[3] + 1, len(a)):\n        ans.append(a[j])\n    for k in range(0, curr[2]):\n        ans.append(a[k])\n    ans.append(curr[1])\n    return ans\n\ndef main():\n    for i in range(int(input())):\n        int(input())\n        ls = list(map(int, input().split()))\n        print(' '.join(map(str, zigzag(ls))))\nmain()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l.sort()\n    a = []\n    for i in range(len(l) - 1):\n        a.append(abs(l[i] - l[i + 1]))\n    g = a.index(min(a))\n    (x, y) = (l.pop(g), l.pop(g))\n    k = [x]\n    k = k + l[g:] + l[:g]\n    k.append(y)\n    print(' '.join((str(x) for x in k)))", "def solve(arr):\n    arr.sort()\n    if len(arr) <= 2:\n        return ' '.join([str(k) for k in arr])\n    ind = 0\n    for k in range(len(arr) - 1):\n        if arr[k + 1] - arr[k] < arr[ind + 1] - arr[ind]:\n            ind = k\n    return ' '.join([str(k) for k in arr[ind + 1:] + arr[:ind + 1]])\ncases = int(input())\nfor j in range(cases):\n    length = int(input())\n    arr = [int(k) for k in input().split()]\n    print(solve(arr))", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    arr1 = [int(e) for e in input('').split()]\n    arr1.sort()\n    a = 0\n    b = 1\n    min1 = arr1[1] - arr1[0]\n    for i in range(1, N):\n        diff = arr1[i] - arr1[i - 1]\n        if arr1[i] == arr1[i - 1]:\n            a = i - 1\n            b = i\n            break\n        if diff < min1:\n            min1 = diff\n            a = i - 1\n            b = i\n    arr2 = [arr1[a]]\n    if b < len(arr1) - 1:\n        for k in range(b + 1, len(arr1)):\n            arr2.append(arr1[k])\n    if a > 0:\n        for k in range(0, a):\n            arr2.append(arr1[k])\n    arr2.append(arr1[b])\n    print(' '.join([str(elem) for elem in arr2]))", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    b = a + []\n    b.sort()\n    d = b[-1] - b[0]\n    ix = 0\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] == 0:\n            ix = i\n            break\n        if b[i + 1] - b[i] < d:\n            d = b[i + 1] - b[i]\n            ix = i\n    m = b.pop(ix + 1)\n    bgn = b[0:ix]\n    b = b[ix:] + bgn + [m]\n    print(' '.join([str(x) for x in b]))", "def mountain(N, values):\n    values = sorted(values)\n    index = 0\n    smallest = 2000000000.0\n    for i in range(len(values) - 1):\n        if values[i + 1] - values[i] < smallest:\n            index = i\n            smallest = values[i + 1] - values[i]\n    l = values[index + 1:] + values[:index + 1]\n    if len(l) == 2:\n        l.reverse()\n    print(' '.join([str(val) for val in l]))\nfor test_case in range(int(input())):\n    N = int(input())\n    val = [int(val) for val in input().split(' ')]\n    mountain(N, val)", "tests = int(input())\nfor _ in range(tests):\n    l = int(input())\n    test = list(map(int, input().split(' ')))\n    test.sort()\n    min_distance = 9999999999999999\n    ind = 0\n    if len(test) > 2:\n        for i in range(l - 1):\n            if test[i + 1] - test[i] < min_distance:\n                min_distance = test[i + 1] - test[i]\n                ind = i + 1\n    str_test = list(map(str, test))\n    print(' '.join(str_test[ind:]) + ' ' + ' '.join(str_test[:ind]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    h.sort()\n    if n == 2:\n        print(' '.join(map(str, h)))\n        continue\n    pos = -1\n    mn = 10 ** 9\n    for i in range(1, n):\n        if mn > abs(h[i] - h[i - 1]):\n            pos = i\n            mn = abs(h[i] - h[i - 1])\n    result = []\n    for i in range(pos, n):\n        result.append(h[i])\n    for i in range(pos):\n        result.append(h[i])\n    print(' '.join(map(str, result)))", "for s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (*h,) = map(int, input().split())\n    h.sort()\n    if n == 2:\n        print(h[0], h[1])\n    else:\n        pos = 0\n        d = 10 ** 10\n        for i in range(1, n):\n            if h[i] - h[i - 1] < d:\n                d = h[i] - h[i - 1]\n                pos = i\n        print(*h[pos:], *h[:pos])", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        h = list(map(int, input().split()))\n        h.sort()\n        if n == 2:\n            print(*h)\n        elif h[0] == h[-1]:\n            print(*h)\n        else:\n            (mindelta, index) = (1000000000, 0)\n            for i in range(n - 1):\n                if mindelta > h[i + 1] - h[i]:\n                    mindelta = h[i + 1] - h[i]\n                    index = i\n            print(*h[index + 1:] + h[:index + 1])\nmain()", "import sys\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    global_dif = float('inf')\n    for i in range(1, n):\n        cur_dif = a[i] - a[i - 1]\n        if global_dif > cur_dif:\n            pos = i\n            global_dif = cur_dif\n        elif global_dif == cur_dif and i == n - 1:\n            pos = i\n            global_dif = cur_dif\n    if pos == 1 or pos == n - 1:\n        b = []\n        b.append(a[pos - 1])\n        for i in range(n):\n            if i != pos and i != pos - 1:\n                b.append(a[i])\n        b.append(a[pos])\n        print(' '.join(list(map(str, b))))\n    else:\n        b = []\n        for i in range(pos, n):\n            b.append(a[i])\n        for i in range(pos):\n            b.append(a[i])\n        print(' '.join(list(map(str, b))))\n    t -= 1", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        array = list(map(int, input().split()))\n        array.sort()\n        mini = float('inf')\n        idx = -1\n        for i in range(1, n):\n            if array[i] - array[i - 1] < mini:\n                mini = array[i] - array[i - 1]\n                idx = i\n        hills = array[idx:] + array[:idx]\n        (hills[0], hills[-1]) = (hills[-1], hills[0])\n        print(*hills)\nmain()", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        h = sorted(li())\n        if n == 2:\n            print(*h)\n            continue\n        m = [10000000000.0, 0]\n        for i in range(n - 1):\n            if h[i + 1] - h[i] < m[0]:\n                m = [h[i + 1] - h[i], i]\n        print(*h[m[1] + 1:] + h[:m[1] + 1])\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    h = sorted(map(int, input().split()))\n    i = min(range(n - 1), key=lambda i: abs(h[i + 1] - h[i]))\n    print(h[i], *h[i + 2:], *h[:i], h[i + 1])", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    c = []\n    for i in range(n - 1):\n        c.append(a[i + 1] - a[i])\n    x = c.index(min(c))\n    if len(c) == 1:\n        print(*a)\n    else:\n        a1 = a[x + 1:] + a[:x + 1]\n        print(*a1)\nfor _ in range(int(input())):\n    solve()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    data.sort()\n    if len(data) == 2:\n        print(*data)\n        continue\n    idx = -1\n    diff = 999999999\n    for i in range(1, len(data)):\n        if data[i] - data[i - 1] < diff:\n            idx = i\n            diff = data[i] - data[i - 1]\n    print(*data[idx:], *data[:idx])", "for i in [*open(0)][2::2]:\n    a = sorted(map(int, i.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 1:\n        print(lst[0])\n    lst.sort()\n    (a, m) = (0, lst[1] - lst[0])\n    for i in range(1, n - 1):\n        if lst[i + 1] - lst[i] < m:\n            m = lst[i + 1] - lst[i]\n            a = i\n    print(lst[a], *lst[a + 2:], *lst[:a], lst[a + 1])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    c = []\n    for i in range(n - 1):\n        c.append(a[i + 1] - a[i])\n    x = c.index(min(c))\n    if len(c) == 1:\n        print(*a)\n    else:\n        a1 = a[x + 1:] + a[:x + 1]\n        print(*a1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    if n < 3:\n        print(*a)\n        continue\n    mn = a[1] - a[0]\n    index = 1\n    for i in range(1, n - 1):\n        if a[i + 1] - a[i] < mn:\n            mn = a[i + 1] - a[i]\n            index = i + 1\n    c = a[index:] + a[:index]\n    print(*c)", "for _ in range(int(input())):\n    n = int(input())\n    (*a,) = list(map(int, input().split()))\n    a.sort()\n    if n == 2:\n        print(*a)\n    else:\n        x = 0\n        d = 10 ** 10\n        for i in range(1, n):\n            if a[i] - a[i - 1] < d:\n                d = a[i] - a[i - 1]\n                x = i\n        print(*a[x:], *a[:x])", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    h = list(map(int, input().split()))\n    h.sort()\n    pairs = [0, 1]\n    diff = float('inf')\n    for i in range(n - 1):\n        if h[i + 1] - h[i] < diff:\n            diff = h[i + 1] - h[i]\n            pairs = [i, i + 1]\n    (a, b) = pairs\n    return [h[a]] + h[b + 1:] + h[:a] + [h[b]]\nfor _ in range(int(input())):\n    print(*solve())", "for t in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    m = 10 ** 11\n    ind = 0\n    for i in range(n - 1):\n        if l[i + 1] - l[i] < m:\n            m = l[i + 1] - l[i]\n            ind = i\n    if n == 2:\n        print(*l)\n    else:\n        print(*l[ind + 1:] + l[:ind + 1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    start = arr[0]\n    start_i = 0\n    end = arr[1]\n    end_i = 1\n    for i in range(1, len(arr) - 1):\n        if arr[i + 1] - arr[i] < end - start:\n            start = arr[i]\n            end = arr[i + 1]\n            start_i = i\n            end_i = i + 1\n    init_i = start_i\n    last_i = end_i\n    start_i = 0\n    end_i = last_i + 1\n    res = [start]\n    while end_i < len(arr):\n        res += [arr[end_i]]\n        end_i += 1\n    while start_i < init_i:\n        res += [arr[start_i]]\n        start_i += 1\n    res += [arr[last_i]]\n    print(' '.join(map(str, res)))", "for i in range(int(input())):\n    k = int(input())\n    lst = sorted([int(x) for x in input().split()])\n    if len(lst) < 3:\n        print(*lst)\n    else:\n        s = lst[1] - lst[0]\n        x = lst[0]\n        y = lst[1]\n        j = 0\n        for i in range(1, len(lst) - 1):\n            if lst[i + 1] - lst[i] < s:\n                s = lst[i + 1] - lst[i]\n                x = lst[i]\n                y = lst[i + 1]\n                j = i\n            if s == 0:\n                break\n        lst3 = lst[j + 2:] + lst[:j]\n        lst1 = [x] + lst3\n        lst1.append(y)\n        print(*lst1)", "for _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    h.sort()\n    if n == 2:\n        print(*h)\n    else:\n        diffs = [abs(i - j) for (i, j) in zip(h, h[1:])]\n        min_diff = min(diffs)\n        min_i = diffs.index(min_diff)\n        print(*h[min_i + 1:] + h[:min_i + 1])", "for i in [*open(0)][2::2]:\n    a = sorted(map(int, i.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "import sys\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    if n == 2:\n        print(str(a[0]) + ' ' + str(a[1]))\n    else:\n        i = 0\n        d1 = min(range(n - 1), key=lambda k: a[k + 1] - a[k])\n        print(a[d1], *a[d1 + 2:], *a[:d1], a[d1 + 1])\n    t -= 1", "import sys\n\ndef solve(heights):\n    new_heights = []\n    heights.sort()\n    n = len(heights)\n    smallest_diff = float('inf')\n    best_index = -1\n    for i in range(n - 1):\n        if heights[i + 1] - heights[i] < smallest_diff:\n            smallest_diff = heights[i + 1] - heights[i]\n            best_index = i\n    new_heights = [heights[best_index]] + heights[best_index + 2:] + heights[:best_index] + [heights[best_index + 1]]\n    ans = ''\n    for h in new_heights:\n        ans += str(h) + ' '\n    return ans[:-1]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    line = sys.stdin.readline().strip()\n    line = line.split(' ')\n    line = map(lambda s: int(s), line)\n    sys.stdout.write(solve(list(line)))\n    sys.stdout.write('\\n')", "for test_case in range(int(input())):\n    mountains = int(input())\n    mountains_heights = sorted(list(map(int, input().split())))\n    repeated = []\n    differences = []\n    counter = 0\n    while counter < len(mountains_heights) - 1:\n        differences.append(abs(mountains_heights[counter] - mountains_heights[counter + 1]))\n        counter += 1\n    differences.reverse()\n    index = differences.index(min(differences))\n    index = len(differences) - 1 - index\n    result = mountains_heights[index + 1:] + mountains_heights[:index + 1]\n    if len(result) == 2:\n        result = sorted(result)\n    print(' '.join(map(str, result)))", "def define_min_diff_indeces(array, length):\n    current_diff = abs(array[0] - array[1])\n    indeces = [0, 1]\n    for i in range(0, length - 1):\n        diff = abs(array[i] - array[i + 1])\n        if diff < current_diff:\n            current_diff = diff\n            indeces = [i, i + 1]\n    if array[indeces[0]] > array[indeces[1]]:\n        indeces.reverse()\n    return indeces\n\ndef define_order(array, length):\n    array.sort()\n    (i1, i2) = define_min_diff_indeces(array, length)\n    (part1, part2) = ([], [])\n    for i in range(length):\n        if i not in [i1, i2]:\n            if array[i] > array[i2]:\n                part1.append(array[i])\n            else:\n                part2.append(array[i])\n    return [array[i1]] + part1 + part2 + [array[i2]]\nresult = []\nquantity_tests = int(input())\nfor test in range(quantity_tests):\n    length = int(input())\n    array = list(map(int, input().split()))\n    result.append(' '.join(map(str, define_order(array, length))))\nprint('\\n'.join(result))", "for s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "for i in [*open(0)][2::2]:\n    a = sorted(map(int, i.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "for i in [*open(0)][2::2]:\n    a = sorted(map(int, i.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "def main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    minD = a[-1] - a[0]\n    minI = n - 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] < minD:\n            minI = i\n            minD = a[i] - a[i - 1]\n        if minD == 0:\n            break\n    last = a.pop(minI)\n    first = a.pop(minI - 1)\n    ans = [first] + a[minI - 1:] + a[:minI - 1] + [last]\n    for i in ans:\n        print(i, end=' ')\n    print()\nmain()", "def sol(n, l):\n    l.sort()\n    idx = 0\n    d = float('inf')\n    for i in range(n - 1):\n        dis = l[i + 1] - l[i]\n        if d > dis:\n            d = dis\n            idx = i\n    st = l[idx]\n    ed = l[idx + 1]\n    ans = l[idx + 2:]\n    ans.extend(l[:idx])\n    ans.insert(0, st)\n    ans.append(ed)\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sol(n, l)", "for s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "for s in [*open(0)][2::2]:\n    a = sorted(map(int, s.split()))\n    b = [y - x for (x, y) in zip(a, a[1:])]\n    i = b.index(min(b)) + (len(b) > 1)\n    print(*a[i:] + a[:i])", "def solve(A, n):\n    A.sort()\n    index = -1\n    ldiff = float('inf')\n    for i in range(n - 1):\n        di = A[i + 1] - A[i]\n        if di < ldiff:\n            ldiff = di\n            index = i + 1\n    if n > 2:\n        A = A[index:] + A[:index]\n    print(*A)\nfor case in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = solve(li, n)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    x = sorted([int(_) for _ in input().split()])\n    d = 10 ** 10\n    rec = -1\n    for i in range(1, n):\n        if x[i] - x[i - 1] < d:\n            d = x[i] - x[i - 1]\n            rec = i\n    print(x[rec - 1], *x[rec + 1:], *x[:rec - 1], x[rec])\ntt = int(input())\nfor test in range(tt):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    m = 10 ** 11\n    ind = 0\n    for i in range(n - 1):\n        if l[i + 1] - l[i] < m:\n            m = l[i + 1] - l[i]\n            ind = i\n    if n == 2:\n        print(*l)\n    else:\n        print(*l[ind + 1:] + l[:ind + 1])", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (N, a) = (int(input()), sorted(list(map(int, input().split()))))\n    md = min(list(range(N - 1)), key=lambda i: a[i + 1] - a[i])\n    d = a.pop(md + 1)\n    print(*a[md:], *a[:md], d)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    diff = INF\n    for i in range(n - 1):\n        if A[i + 1] == A[i]:\n            flag = 1\n            corners = [i, i + 1]\n            break\n        k = abs(A[i] - A[i + 1])\n        if k < diff:\n            diff = k\n            corners = [i, i + 1]\n    k = corners[1]\n    ans = []\n    for i in range(k + 1, n):\n        ans.append(A[i])\n    for i in range(k - 1):\n        ans.append(A[i])\n    ans = [A[k - 1]] + ans + [A[k]]\n    print(*ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    diff = INF\n    for i in range(n - 1):\n        if A[i + 1] == A[i]:\n            corners = [i, i + 1]\n            break\n        k = abs(A[i] - A[i + 1])\n        if k < diff:\n            diff = k\n            corners = [i, i + 1]\n    k = corners[1]\n    ans = []\n    for i in range(k + 1, n):\n        ans.append(A[i])\n    for i in range(k - 1):\n        ans.append(A[i])\n    ans = [A[k - 1]] + ans + [A[k]]\n    print(*ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "def main():\n    tc = int(input())\n    for zzz in range(tc):\n        solve()\n\ndef solve():\n    n = int(input())\n    arr = [int(_) for _ in input().split()]\n    arr.sort()\n    a = 0\n    import sys\n    diff = sys.maxsize\n    if n != 2:\n        for i in range(1, n):\n            if arr[i] - arr[i - 1] < diff:\n                diff = arr[i] - arr[i - 1]\n                a = i\n    for i in range(a, n):\n        print(arr[i], end=' ')\n    for i in range(0, a):\n        print(arr[i], end=' ')\n    print()\nmain()", "for t in range(int(input())):\n    n = int(input())\n    h = sorted(list(map(int, input().split())))\n    mn = abs(h[0] - h[1])\n    ind = 0\n    for i in range(1, n - 1):\n        if abs(h[i] - h[i + 1]) < mn:\n            mn = abs(h[i] - h[i + 1])\n            ind = i\n    fir = h[ind]\n    sec = h[ind + 1]\n    print(fir, *h[ind + 2:], *h[:ind], sec)", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    if n == 2:\n        print(a[0], a[1])\n        return\n    mink = a[1] - a[0]\n    k = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] < mink:\n            mink = a[i] - a[i - 1]\n            k = i\n    for i in range(k, n):\n        print(a[i], end=' ')\n    for i in range(k):\n        print(a[i], end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in ' ' * int(input()):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    j = 0\n    if n == 2:\n        print(*x)\n        continue\n    m = 1000000000\n    for i in range(n - 1):\n        if abs(x[i] - x[i + 1]) < m:\n            j = i\n            m = abs(x[i] - x[i + 1])\n    print(*x[j + 1:] + x[:j + 1])", "for i in range(int(input())):\n    len1 = int(input())\n    list1 = list(map(int, input().split()))\n    list1.sort()\n    ind = 0\n    min1 = float('inf')\n    for i in range(1, len1):\n        t = list1[i] - list1[i - 1]\n        if t < min1:\n            min1 = t\n            ind = i\n    res = [list1[ind - 1]] + list1[ind + 1:] + list1[:ind - 1] + [list1[ind]]\n    print(*res)", "from math import *\n\ndef sol(n, arr):\n    arr.sort()\n    if n == 2:\n        return arr\n    x = inf\n    y = -1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            return arr[i:] + arr[:i]\n        elif arr[i] - arr[i - 1] < x:\n            x = arr[i] - arr[i - 1]\n            y = i\n    return arr[y:] + arr[:y]\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(*sol(n, arr))", "t = int(input())\nfor _ in range(t):\n    input()\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    best_diff = a[1] - a[0]\n    best_idx = 1\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] <= best_diff:\n            best_diff = a[i] - a[i - 1]\n            best_idx = i\n    ans = [a[best_idx - 1]]\n    used_idxs = set([best_idx - 1, best_idx])\n    for i in range(best_idx + 1, len(a)):\n        if a[i] != ans[-1]:\n            ans.append(a[i])\n            used_idxs.add(i)\n    b = []\n    d = {}\n    for i in range(len(a)):\n        if i not in used_idxs:\n            ans.append(a[i])\n    ans = ans + [a[best_idx]]\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    pos = -1\n    if n == 2:\n        print(*nums)\n    else:\n        mn = float('inf')\n        for i in range(1, n):\n            if mn > abs(nums[i] - nums[i - 1]):\n                mn = abs(nums[i] - nums[i - 1])\n                pos = i\n        nums = nums[pos:] + nums[:pos]\n        print(*nums)", "for s in [*open(0)][2::2]:\n    i = j = 0\n    d = 1000000000.0\n    for (x, y) in zip((a := sorted(map(int, s.split()))), a[1 + (len(a) < 3):]):\n        j += 1\n        if y - x < d:\n            d = y - x\n            i = j\n    print(*a[i:] + a[:i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    i = min(range(n - 1), key=lambda k: a[k + 1] - a[k])\n    print(a[i], *a[i + 2:], *a[:i], a[i + 1])", "import sys\nt = int(sys.stdin.readline())\nwhile t > 0:\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    if n == 2:\n        x = a\n    else:\n        mi = 1\n        md = a[1] - a[0]\n        for i in range(1, n - 1):\n            d = a[i + 1] - a[i]\n            if d < md:\n                mi = i + 1\n                md = d\n        x = a[mi:] + a[:mi]\n    print(*x)\n    t -= 1", "def solve(n, h):\n    h.sort()\n    diff = 1000000000000.0\n    edges = []\n    for i in range(1, n):\n        if h[i] - h[i - 1] < diff:\n            diff = h[i] - h[i - 1]\n            edges = [i - 1, i]\n    ans = []\n    for i in range(edges[0], n):\n        if i != edges[1]:\n            ans.append(h[i])\n    for i in range(0, edges[1] + 1):\n        if i != edges[0]:\n            ans.append(h[i])\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(*solve(n, h))", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    newarr = arr[2:]\n    newarr.sort()\n    fin = []\n    mindiff = 10000000000\n    cx = 0\n    cy = 0\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff == 0:\n            cx = i\n            cy = i + 1\n            break\n        elif diff < mindiff:\n            mindiff = diff\n            cx = i\n            cy = i + 1\n    fin += [arr[cx]]\n    if cy != n - 1:\n        fin += arr[cy + 1:]\n    fin += arr[:cx]\n    fin += [arr[cy]]\n    for ff in fin:\n        print(ff, end=' ')\n    print()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    if n == 2:\n        print(*arr)\n        continue\n    ind = None\n    min = float('inf')\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] <= min:\n            min = arr[i + 1] - arr[i]\n            ind = i\n            if min == 0:\n                break\n    print(*arr[ind + 1:], *arr[:ind + 1])", "def ans():\n    n = int(input())\n    h = sorted(list(map(int, input().split())))\n    mn = abs(h[0] - h[1])\n    ind = 0\n    for i in range(1, n - 1):\n        if abs(h[i] - h[i + 1]) < mn:\n            mn = abs(h[i] - h[i + 1])\n            ind = i\n    print(h[ind], *h[ind + 2:], *h[:ind], h[ind + 1])\nfor t in range(int(input())):\n    ans()", "for i in range(int(input())):\n    k = int(input())\n    lst = sorted([int(x) for x in input().split()])\n    if len(lst) < 3:\n        print(*lst)\n    else:\n        s = lst[1] - lst[0]\n        j = 0\n        for i in range(1, len(lst) - 1):\n            if lst[i + 1] - lst[i] < s:\n                s = lst[i + 1] - lst[i]\n                j = i\n            if s == 0:\n                break\n        print(lst[j], *lst[j + 2:], *lst[:j], lst[j + 1])", "def solve(A, n):\n    A.sort()\n    diff = float('inf')\n    index = -1\n    for i in range(n - 1):\n        cd = A[i + 1] - A[i]\n        if cd < diff:\n            diff = cd\n            index = i + 1\n    if n == 2:\n        print(*A)\n    else:\n        A = A[index:] + A[:index]\n        print(*A)\nfor caser in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    solve(A, n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(l[0])\n        continue\n    l.sort()\n    (a, m) = (0, l[1] - l[0])\n    for i in range(1, n - 1):\n        if l[i + 1] - l[i] < m:\n            m = l[i + 1] - l[i]\n            a = i\n    print(l[a], *l[a + 2:], *l[:a], l[a + 1])", "def cliffs(n, heights):\n    heights.sort()\n    min_distance = float('inf')\n    min_dist_index = -1\n    for i in range(n - 1):\n        if heights[i + 1] - heights[i] < min_distance:\n            min_distance = heights[i + 1] - heights[i]\n            min_dist_index = i\n    print(heights[min_dist_index], end=' ')\n    for i in range(min_dist_index + 2, n):\n        print(heights[i], end=' ')\n    for i in range(min_dist_index):\n        print(heights[i], end=' ')\n    print(heights[min_dist_index + 1], end=' ')\n    print()\nfor _ in range(int(input())):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    cliffs(n, heights)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    if n == 2:\n        print(*arr)\n        continue\n    ind = None\n    min = float('inf')\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] <= min:\n            min = arr[i + 1] - arr[i]\n            ind = i\n    print(*arr[ind + 1:], *arr[:ind + 1])", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ID = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] < a[ID] - a[ID - 1]:\n            ID = i\n    ans = [0] * n\n    ans[0] = a[ID - 1]\n    ans[-1] = a[ID]\n    for i in range(ID + 1, n):\n        ans[i - ID] = a[i]\n    for i in range(ID - 1):\n        ans[n - ID + i] = a[i]\n    print(*ans)\nfor i in range(int(input())):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    i = min(range(n - 1), key=lambda k: a[k + 1] - a[k])\n    print(a[i], *a[i + 2:], *a[:i], a[i + 1])"]