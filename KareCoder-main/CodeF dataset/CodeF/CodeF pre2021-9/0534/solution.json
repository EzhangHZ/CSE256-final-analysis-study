["for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    if x * (x + 1) // 2 > s:\n        print(-1)\n    elif n * (n + 1) / 2 - (n - x) * (n - x + 1) / 2 < s:\n        print(-1)\n    else:\n        ans = [0 for i in range(n)]\n        i = n\n        j = l - 1\n        while j < r:\n            tt = x * (x - 1) / 2 + i\n            if tt < s:\n                s -= i\n                ans[j] = i\n                x -= 1\n                i -= 1\n                j += 1\n            elif tt == s:\n                ans[j] = i\n                i = 1\n                j += 1\n                while j < r:\n                    ans[j] = i\n                    j += 1\n                    i += 1\n            else:\n                i -= 1\n        s = set(ans)\n        i = 0\n        j = 1\n        while i < n:\n            if ans[i] != 0:\n                i += 1\n            elif j in s:\n                j += 1\n            else:\n                ans[i] = j\n                i += 1\n                j += 1\n        print(*ans)", "T = int(input())\nfor _ in range(T):\n    (n, l, r, s) = [int(x) for x in input().split()]\n    ma = (2 * n - r + l) * (r - l + 1) // 2\n    mi = (2 - l + r) * (r - l + 1) // 2\n    if s > ma or s < mi:\n        print(-1)\n    else:\n        x = int((2 * s / (r - l + 1) + l - r) / 2)\n        dad = s - int((2 * x + r - l) * (r - l + 1) / 2)\n        arr = [0] * n\n        for i in range(l - 1, r):\n            arr[i] = x + (i - l + 1)\n        cnt = 0\n        for i in list(range(r - l + 1))[::-1]:\n            add = min(n - cnt - arr[i + l - 1], dad)\n            cnt += 1\n            arr[i + l - 1] += add\n            dad -= add\n            if not dad:\n                break\n        sett = set(arr)\n        cur = 1\n        for i in range(0, l - 1):\n            while cur in sett:\n                cur += 1\n            arr[i] = cur\n            cur += 1\n        for i in range(r, n):\n            while cur in sett:\n                cur += 1\n            arr[i] = cur\n            cur += 1\n        print(' '.join([str(x) for x in arr]))", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        j = n - x + 1\n        test = set()\n        for i in range(1, n + 1):\n            if y - j + i >= s:\n                test.add(i)\n                if len(test) == x:\n                    break\n                y -= j\n                y += i\n                j += 1\n        s1 = set(range(1, n + 1)) - test\n        ans = list(s1)[:l - 1] + list(test) + list(s1)[l - 1:]\n        print(*ans)", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    (n, l, r, s) = map(int, input().split())\n    len = r - l + 1\n\n    def cal(l, r) -> int:\n        return (r - l + 1) * (r + l) // 2\n    if cal(n - len + 1, n) < s or cal(1, len) > s:\n        print(-1)\n        return\n    cur = n\n    used = set()\n    ans = [0] * (n + 1)\n    for i in range(l, r + 1):\n        while cur + cal(1, r - i) > s:\n            cur -= 1\n        s -= cur\n        ans[i] = cur\n        used.add(cur)\n        cur -= 1\n    cur = 1\n    for i in range(1, n + 1):\n        while cur in used:\n            cur += 1\n        if ans[i]:\n            continue\n        ans[i] = cur\n        cur += 1\n    for i in range(1, n + 1):\n        print(ans[i], end=' ')\n    print()\nfor t in range(int(input())):\n    charming()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    z = list(range(1, k + 1))\n    t = sum(z)\n    j = 0\n    for i in range(k - 1, -1, -1):\n        w = min(n - j - z[i], s - t)\n        if w > 0:\n            t += w\n            z[i] += w\n        j += 1\n    if t != s:\n        print(-1)\n    else:\n        w = [False] * (n + 1)\n        for i in z:\n            w[i] = True\n        a = [None] * n\n        for i in range(k):\n            a[l - 1 + i] = z[i]\n        j = 1\n        for i in range(n):\n            if a[i] is None:\n                while w[j]:\n                    j += 1\n                w[j] = True\n                a[i] = j\n        print(' '.join(map(str, a)))\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        togo = s - sum(range(1, 1 + k))\n        A = list(range(1 + togo // k, 1 + togo // k + k))\n        togo %= k\n        for i in range(k - togo, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "def helper(n, l, r, s):\n    count = r - l + 1\n    low = (1 + count) * count // 2\n    high = (n + n - count + 1) * count // 2\n    if s < low or s > high:\n        return []\n    res = [0] * n\n    used = set(list())\n    tl = 1\n    tr = n\n    while l < r:\n        if s <= (tl + tr) * count / 2:\n            res[l - 1] = tl\n            tl += 1\n            used.add(res[l - 1])\n            s -= res[l - 1]\n            l += 1\n            count -= 1\n        else:\n            res[r - 1] = tr\n            tr -= 1\n            used.add(res[r - 1])\n            s -= res[r - 1]\n            r -= 1\n            count -= 1\n    res[l - 1] = s\n    used.add(res[l - 1])\n    curr = 1\n    for i in range(n):\n        if res[i] != 0:\n            continue\n        while curr in used:\n            curr += 1\n        res[i] = curr\n        used.add(curr)\n    return res\nt = int(input())\nfor i in range(t):\n    (n, l, r, s) = map(int, input().split(' '))\n    res = helper(n, l, r, s)\n    if not res:\n        print('-1')\n    else:\n        print(' '.join(list(map(str, res))))", "def gauss(a, b):\n    return (a + b) * (b - a + 1) // 2\nfor t in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    s2 = s\n    cnt = r - l + 1\n    taken = set()\n    for i in range(1, cnt + 1):\n        for j in range(n - i + 1, 0, -1):\n            if gauss(1, cnt - i) + j <= s:\n                taken.add(j)\n                s -= j\n                break\n        else:\n            s -= 921021581234050283\n    rest = list(set(range(1, n + 1)) - taken)\n    if s == 0 and sum(taken) == s2:\n        print(*rest[:l - 1], *taken, *rest[l - 1:])\n    else:\n        print('-1')", "def f(a, b):\n    ans = 0\n    for i in range(a, b + 1):\n        ans += i\n    return ans\nfor tc in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    leng = r - l + 1\n    if f(1, leng) > s or f(n - leng + 1, n) < s:\n        print(-1)\n        continue\n    lr = [i for i in range(n - leng + 1, n + 1)]\n    summ = sum(lr)\n    t = 0\n    while summ > s:\n        summ -= lr[t]\n        summ += t + 1\n        lr[t] = t + 1\n        t += 1\n    t -= 1\n    while summ < s:\n        lr[t] += 1\n        summ += 1\n    book = [0 for i in range(n + 5)]\n    for i in lr:\n        book[i] = 1\n    t = 1\n    for i in range(l - 1):\n        while book[t] == 1:\n            t += 1\n        print(t, end=' ')\n        book[t] = 1\n    print(' '.join([str(i) for i in lr]), end=' ')\n    for i in range(n - r):\n        while book[t] == 1:\n            t += 1\n        print(t, end=' ')\n        book[t] = 1\n    print()", "import math\n\ndef cumul_1_up_to(n):\n    return n * (n + 1) // 2\nt = int(input())\nfor _ in range(t):\n    (n, l, r, s) = list(map(int, input().split(' ')))\n    if n == 1:\n        print(*[1])\n    else:\n        sum1 = cumul_1_up_to(r - l + 1)\n        sum2 = cumul_1_up_to(n) - cumul_1_up_to(n - (r - l) - 1)\n        if s < sum1 or s > sum2:\n            print(-1)\n        else:\n            m = r - l + 1\n            k = math.floor((s - sum1) / m)\n            a = [i + 1 + k for i in range(m)]\n            sum_a = sum1 + k * m\n            C = s - sum_a\n            for i in range(C):\n                a[-1 - i] += 1\n            ans = [-1 for _ in range(n)]\n            for i in range(m):\n                ans[l - 1 + i] = a[i]\n            S = set(range(1, n + 1))\n            S.difference_update(set(ans))\n            S = list(S)\n            for i in range(n):\n                if ans[i] == -1:\n                    new = S.pop()\n                    ans[i] = new\n            print(*ans)", "tc = int(input())\nfor _ in range(tc):\n    (n, l, r, s) = list(map(int, input().split()))\n    needed = r - l + 1\n    minsum = 0\n    sum_left = s\n    max_left = n\n    lis = []\n    taken = [False for _ in range(n + 3)]\n    for i in range(needed):\n        minsum += i + 1\n    works = True\n    while needed > 0:\n        if minsum > sum_left:\n            works = False\n            break\n        if minsum == sum_left:\n            minsum -= needed\n            sum_left -= needed\n            lis.append(needed)\n            taken[needed] = True\n            needed -= 1\n            continue\n        minsum -= needed\n        if sum_left >= max_left + minsum:\n            lis.append(max_left)\n        else:\n            num = sum_left - minsum\n            if 0 < num <= n:\n                lis.append(num)\n                max_left = num\n            else:\n                break\n        sum_left -= lis[-1]\n        needed -= 1\n        taken[lis[-1]] = True\n        max_left = max_left - 1\n    if works and sum(lis) == s and (needed == 0):\n        i = 1\n        j = 1\n        while j <= n:\n            if l <= j <= r:\n                print(lis[j - l], end=' ')\n            else:\n                while taken[i]:\n                    i += 1\n                print(i, end=' ')\n                i += 1\n            j += 1\n        print()\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = [int(x) for x in input().split()]\n    diff = r - l + 1\n    lal = diff - 1\n    lala = lal * (lal + 1) // 2\n    if s < diff * (diff + 1) // 2 or s > diff * n - lala:\n        print(-1)\n        continue\n    main = [i for i in range(1, diff + 1)]\n    sum = diff * (diff + 1) // 2\n    main_diff = s - sum\n    i = diff - 1\n    ver = n\n    while i >= 0:\n        if main_diff + main[i] > ver:\n            main_diff -= ver - main[i]\n            main[i] = ver\n            ver -= 1\n            i -= 1\n        else:\n            main[i] += main_diff\n            break\n    j = 0\n    el = 1\n    for i in range(n):\n        if i >= l - 1 and i <= r - 1:\n            print(main[j], end=' ')\n            j += 1\n        else:\n            while el in main:\n                el += 1\n            print(el, end=' ')\n            el += 1\n    print()", "from collections import Counter\n\ndef solve(n, l, r, s):\n    size = r - l + 1\n    ini = size * (size + 1) // 2\n    gap = s - ini\n    if gap < 0:\n        print(-1)\n        return\n    times = gap // size\n    if times + size > n:\n        print(-1)\n        return\n    li = [times + i + 1 for i in range(size)]\n    gap -= times * size\n    for i in range(size - 1, size - gap - 1, -1):\n        li[i] += 1\n    C = Counter(li)\n    emp = []\n    for i in range(1, n + 1):\n        if C[i] == 0:\n            emp.append(i)\n    ans = emp[:l - 1] + li + emp[l - 1:]\n    for it in ans:\n        if it > n:\n            print(-1)\n            return\n    print(*ans)\nfor case in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    solve(n, l, r, s)", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    p = n - k\n    if s < k * (k + 1) / 2 or s > n * (n + 1) / 2 - p * (p + 1) / 2:\n        print(-1)\n    else:\n        perm = [i + 1 for i in range(n)]\n        ans = [i + 1 for i in range(r - l + 1)]\n        vist = [False for i in range(n + 1)]\n        ss = sum(ans)\n        last = len(ans) - 1\n        high = n - 1\n        while last >= 0:\n            curr = last + 1\n            if ss == s:\n                break\n            else:\n                while curr <= high:\n                    if ss == s:\n                        break\n                    ss += 1\n                    ans[last] += 1\n                    curr += 1\n                high -= 1\n                last -= 1\n        for i in ans:\n            vist[i] = True\n        rem = []\n        total = []\n        for j in perm:\n            if not vist[j]:\n                rem.append(j)\n        ind = 0\n        for i in range(1, n + 1):\n            if i != l:\n                if ind >= len(rem):\n                    continue\n                total.append(rem[ind])\n                ind += 1\n            else:\n                for j in ans:\n                    total.append(j)\n        print(*total)", "for test in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    lst = [i for i in range(n, 0, -1)]\n    x = r - l + 1\n    store = set()\n    for i in range(n):\n        if x * (x - 1) // 2 <= s - lst[i]:\n            store.add(lst[i])\n            x -= 1\n            s -= lst[i]\n    if len(store) == r - l + 1:\n        arr = [i for i in range(1, n + 1) if i not in store]\n        arr[l - 1:l - 1] = store\n        print(*arr)\n    else:\n        print(-1)", "for t in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l = l - 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        g = s - sum(range(1, 1 + k))\n        A = list(range(1 + g // k, 1 + g // k + k))\n        g %= k\n        for i in range(k - g, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "for i in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    d = r - l + 1\n    mi = d * (d + 1) // 2\n    ma = n * (n + 1) // 2 - (n - d) * (n - d + 1) // 2\n    if s < mi or s > ma:\n        print(-1)\n    else:\n        li = []\n        for jj in range(d):\n            li.append(jj + 1)\n            s -= jj + 1\n        zz = n\n        for jj in range(d - 1, -1, -1):\n            if s == 0:\n                break\n            if s < zz - li[jj]:\n                li[jj] += s\n                s = 0\n            else:\n                s -= zz - li[jj]\n                li[jj] = zz\n            zz -= 1\n        rr = []\n        for jj in range(1, n + 1):\n            if jj not in li:\n                rr.append(jj)\n        (p, q) = (0, 0)\n        for jj in range(1, n + 1):\n            if jj >= l and jj <= r:\n                print(li[p], end=' ')\n                p += 1\n            else:\n                print(rr[q], end=' ')\n                q += 1\n        print()", "t = int(input())\nfor i in range(t):\n    (n, l, r, s) = map(int, input().split())\n    ans = 0\n    s1 = 0\n    k = 1\n    a = []\n    for j in range(r - l + 1):\n        s1 = s1 + k\n        a.append(k)\n        k = k + 1\n    s2 = 0\n    k = n\n    for j in range(r - l + 1):\n        s2 = s2 + k\n        k = k - 1\n    if s <= s2 and s >= s1:\n        k = r - l + 1\n        o = n\n        for j in range(r - l + 1):\n            if s1 == s:\n                break\n            elif s - s1 <= o - k:\n                a[k - 1] = a[k - 1] + (s - s1)\n                s1 = s1 + (s - s1)\n            else:\n                a[k - 1] = o\n                s1 = s1 + (o - k)\n            k = k - 1\n            o = o - 1\n        j = 1\n        pn = 1\n        while j < l:\n            if pn not in a:\n                print(pn, end=' ')\n                j = j + 1\n            pn = pn + 1\n        for j in a:\n            print(j, end=' ')\n        j = r + 1\n        while j <= n:\n            if pn not in a:\n                print(pn, end=' ')\n                j = j + 1\n            pn = pn + 1\n        print()\n    else:\n        print('-1')", "t = int(input())\nlow = lambda k: k * (k + 1) // 2\nhigh = lambda n, k: k * (2 * n - k + 1) // 2\nfor ti in range(t):\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    if s < low(k) or s > high(n, k):\n        print(-1)\n        continue\n    ans = []\n    for i in range(n, 0, -1):\n        if k > 0 and high(i, k) >= s and (s - i >= low(k - 1)):\n            ans.append(i)\n            s -= i\n            k -= 1\n    ans = set(ans)\n    setDiff = set(range(1, n + 1)) - ans\n    (setDiff, ans) = (list(setDiff), list(ans))\n    setDiff[l - 1:l - 1] = ans\n    for i in setDiff:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    z = n\n    k = r - l + 1\n    if s < (k * k + k) // 2 or s > k * (2 * n + 1 - k) // 2:\n        print(-1)\n    else:\n        a = []\n        s -= (k * k + k) // 2\n        for i in range(k, 0, -1):\n            a.append(i)\n        i = 0\n        while s > 0:\n            m = min(n - a[i], s)\n            s -= m\n            n -= 1\n            a[i] += m\n            i += 1\n        d = {i: 0 for i in range(1, 1 + z)}\n        for i in a:\n            d[i] = 1\n        ans = []\n        b = [i for i in d if d[i] == 0]\n        ans = b[:l - 1]\n        ans.extend(a)\n        ans.extend(b[l - 1:])\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        m = s - sum(range(1, 1 + k))\n        A = list(range(1 + m // k, 1 + m // k + k))\n        m %= k\n        for i in range(k - m, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        test = n - x + 1\n        s1 = set()\n        for i in range(1, n + 1):\n            if y - test + i >= s:\n                s1.add(i)\n                y += i - test\n                test += 1\n        s2 = set(range(1, n + 1)) - s1\n        ans = list(s2)[:l - 1] + list(s1) + list(s2)[l - 1:]\n        print(*ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (n, l, r, s) = M()\n    p = []\n\n    def high(n, k):\n        return k * (2 * n + 1 - k) // 2\n\n    def low(k):\n        return k * (k + 1) // 2\n\n    def solve(k, i, s, p):\n        if k == 0 or i == 0:\n            return\n        if high(i, k) >= s and low(k - 1) <= s - i:\n            p.append(i)\n            solve(k - 1, i - 1, s - i, p)\n        else:\n            solve(k, i - 1, s, p)\n    solve(r - l + 1, n, s, p)\n    if len(p) == r - l + 1 and sum(p) == s:\n        d = set(p)\n        ans = [0] * n\n        i = k = 1\n        while i < l:\n            if k not in d:\n                ans[i - 1] = k\n                i += 1\n            k += 1\n        i = r + 1\n        while i < n + 1:\n            if k not in d:\n                ans[i - 1] = k\n                i += 1\n            k += 1\n        for i in range(l, r + 1):\n            ans[i - 1] = p[i - l]\n        print(*ans)\n    else:\n        print(-1)", "def out(ans, n):\n    num = [i for i in range(1, n + 1) if i not in ans]\n    for i in range(n):\n        if ans[i] == 0:\n            ans[i] = num.pop()\n    print(' '.join(map(str, ans)))\nt = int(input())\nfor _ in range(t):\n    (n, l, r, s) = [int(x) for x in input().split(' ')]\n    ans = [0] * n\n    ex = r - l + 1\n    low = ex * (ex + 1) // 2\n    high = 0\n    lst = n\n    for i in range(ex):\n        high += lst\n        lst -= 1\n    if s < low or s > high:\n        print(-1)\n        continue\n    lst = 1\n    tot = 0\n    for i in range(l - 1, r):\n        ans[i] = lst\n        lst += 1\n        tot += ans[i]\n    pos = r - 1\n    nxt = n\n    while tot != s:\n        if ans[pos] == nxt:\n            nxt -= 1\n            pos -= 1\n        ans[pos] += 1\n        tot += 1\n    out(ans, n)", "def solve(N, L, R, S):\n    n = N\n    (max_val, min_val) = (0, (1 + R - L + 1) * (R - L + 1) // 2)\n    for _ in range(R - L + 1):\n        max_val += n\n        n -= 1\n    if not min_val <= S <= max_val:\n        return -1\n    diff = max_val - S\n    can = []\n    for i in range(R - L + 1):\n        can += [N - i]\n    can.reverse()\n    idx = 0\n    while diff:\n        curr = min(diff, can[idx] - (idx + 1))\n        can[idx] -= curr\n        diff -= curr\n        idx += 1\n    ans = []\n    idx = 0\n    all_can = set([i + 1 for i in range(N)])\n    for c in can:\n        all_can.remove(c)\n    for i in range(1, N + 1, 1):\n        if i < L or i > R:\n            ans += [str(all_can.pop())]\n        else:\n            ans += [str(can[idx])]\n            idx += 1\n    return ' '.join(ans)\nT = int(input())\nfor _ in range(T):\n    (N, L, R, S) = map(int, input().split())\n    print(solve(N, L, R, S))", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    r -= 1\n    x = r - l + 1\n    a = [n - i for i in range(x)]\n    temps = sum(a)\n    if temps < s:\n        print(-1)\n        continue\n    elif temps == s:\n        b = [0] * n\n        j = 1\n        for i in range(n):\n            if i >= l and i <= r:\n                b[i] = a[i - l]\n            else:\n                b[i] = j\n                j += 1\n        print(*b)\n        continue\n    else:\n        d = temps - s\n        a.reverse()\n        m = 1\n        for i in range(x):\n            if d != 0:\n                num2 = max(m, a[i] - d)\n                d -= a[i] - num2\n                a[i] = num2\n                m += 1\n            else:\n                break\n        if d != 0:\n            print(-1)\n            continue\n        b = [0] * n\n        c = [i + 1 for i in range(n)]\n        for num in a:\n            c.remove(num)\n        j = 0\n        for i in range(n):\n            if i >= l and i <= r:\n                b[i] = a[i - l]\n            else:\n                b[i] = c[j]\n                j += 1\n        print(*b)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    z = r - l + 1\n    m = 0\n    t = 0\n    temp = n - z + 1\n    while t < z:\n        m += n - t\n        t += 1\n    mi = z * (z + 1) // 2\n    if s >= mi and s <= m:\n        a = []\n        v = []\n        for i in range(n):\n            v.append(0)\n        for i in range(1, n + 1):\n            if s - i <= m - temp:\n                a.append(i)\n                s -= i\n                m -= temp\n                temp += 1\n                v[i - 1] = 1\n        j = 0\n        for i in range(l - 1):\n            while v[j] == 1:\n                j += 1\n            print(j + 1, end=' ')\n            j += 1\n        print(*a, end=' ')\n        for i in range(r, n):\n            while v[j] == 1:\n                j += 1\n            print(j + 1, end=' ')\n            j += 1\n        print()\n    else:\n        print(-1)", "from collections import Counter\ntc = int(input())\nfor _ in range(tc):\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    if s >= k * (k + 1) // 2 and s <= n * (n + 1) // 2 - (n - k) * (n - k + 1) // 2:\n        t = [i + (s - k * (k + 1) // 2) // k for i in range(1, k + 1)]\n        su = sum(t)\n        pp = k - 1\n        while su < s:\n            t[pp] += 1\n            su += 1\n            if pp == 0:\n                pp = k - 1\n            else:\n                pp -= 1\n        rr = set(range(1, n + 1)) - set(t)\n        ans = [0 for i in range(n)]\n        for i in range(n):\n            if i <= r - 1 and i >= l - 1:\n                ans[i] = t[i - r + 1]\n            else:\n                ans[i] = rr.pop()\n        print(*ans)\n    else:\n        print(-1)", "from collections import deque\nfor _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    nums = r - l + 1\n    minSum = 0\n    maxSum = 0\n    for i in range(nums):\n        minSum += i + 1\n        maxSum += n - i\n    if s < minSum or s > maxSum:\n        print(-1)\n    else:\n        ans = deque([i + 1 for i in range(n - l + 1, n)] + [i + 1 for i in range(n - l + 1)])\n        turns = l - 1\n        begin = 1\n        while minSum < s:\n            begin += 1\n            minSum += nums\n            ans.append(ans.popleft())\n            turns += 1\n        if minSum == s:\n            print(*ans)\n        else:\n            diff = minSum - s\n            (ans[(l - 2) % n], ans[(l + diff - 2) % n]) = (ans[(l + diff - 2) % n], ans[(l - 2) % n])\n            print(*ans)", "def solve(n, lft, r, s):\n    l = r - lft + 1\n    arr = [i for i in range(1, l + 1)]\n    sm = l * (l + 1) // 2\n    if s < sm:\n        return -1\n    if s > sm:\n        x = (s - sm) // l\n        xm = s - (x * l + sm)\n        if x + arr[-1] > n:\n            return -1\n        if x + arr[-1] == n:\n            if xm != 0:\n                return -1\n        for i in range(l):\n            arr[i] += x\n            sm += x\n        for i in range(l - 1, -1, -1):\n            if s == sm:\n                break\n            arr[i] += 1\n            sm += 1\n    la = []\n    for i in range(1, n + 1):\n        if i not in arr:\n            la.append(i)\n    lst = []\n    cn = 0\n    ca = 0\n    b = 0\n    for i in range(1, n + 1):\n        if i == lft:\n            b = 1\n        if b == 0:\n            lst.append(la[cn])\n            cn += 1\n        else:\n            lst.append(arr[ca])\n            ca += 1\n        if i == r:\n            b = 0\n    return lst\nt = int(input())\nfor i in range(t):\n    (n, l, r, s) = map(int, input().split(' '))\n    x = solve(n, l, r, s)\n    if x == -1:\n        print(-1)\n    else:\n        print(*x)", "t = int(input())\nfor z in range(t):\n    (n, l, r, s) = map(int, input().split())\n    p = r - l + 1\n    mn = p * (p + 1) // 2\n    mx = n * (n + 1) // 2 - (n - p) * (n - p + 1) // 2\n    if s < mn or s > mx:\n        print(-1)\n    else:\n        brr = []\n        for i in range(p, 0, -1):\n            brr.append(i)\n        k = s - mn\n        i = 0\n        while k:\n            brr[i % len(brr)] += 1\n            k = k - 1\n            i = i + 1\n        arr = [0] * n\n        arr[l - 1:r] = brr\n        p = 0\n        for i in range(1, n + 1):\n            if i not in arr:\n                if p == l - 1:\n                    p = r\n                arr[p] = i\n                p = p + 1\n        print(*arr)", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = map(int, input().split())\n    d = r - l + 1\n    k = n - d\n    mini = d * (d + 1) // 2\n    maxi = d * n - d * (d - 1) // 2\n    if s not in range(mini, maxi + 1):\n        print(-1)\n        continue\n    if k == 0:\n        print(' '.join(map(str, range(1, n + 1))))\n        continue\n    i = s - mini\n    rr = i // k\n    ll = d - rr\n    c = ll + i % k\n    T = list(range(1, ll)) + ([c] if s != maxi else []) + list(range(n - rr + 1, n + 1))\n    Tt = list(range(ll, c)) + list(range(c + 1, n - rr + 1))\n    TT = Tt[:l - 1] + T + Tt[l - 1:]\n    print(' '.join(map(str, TT)))", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split(' '))\n    t = r - l + 1\n    l = l - 1\n    r = r - 1\n    lo = t * (t + 1) // 2\n    hi = t * (2 * n - t + 1) // 2\n    if s > hi or s < lo:\n        print(-1)\n    else:\n        res = [i for i in range(1, t + 1)]\n        res.reverse()\n        curr = lo\n        p = n\n        for i in range(t):\n            if curr + p - res[i] > s:\n                x = s - curr\n                res[i] = res[i] + x\n                break\n            elif curr + p - res[i] == s:\n                res[i] = p\n                break\n            else:\n                curr = curr + p - res[i]\n                res[i] = p\n            p = p - 1\n        n1 = l\n        n2 = n - 1 - r\n        ans = [0] * n\n        ans[l:r + 1] = res\n        arr2 = []\n        for item in range(1, n + 1):\n            if item not in res:\n                arr2.append(item)\n        for i in range(n):\n            if ans[i] == 0:\n                ans[i] = arr2.pop()\n        for item in ans:\n            print(item, end=' ')\n        print('')", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split(' '))\n    t = r - l + 1\n    l = l - 1\n    r = r - 1\n    lo = t * (t + 1) // 2\n    hi = t * (2 * n - t + 1) // 2\n    if s > hi or s < lo:\n        print(-1)\n    else:\n        res = [i for i in range(1, t + 1)]\n        res.reverse()\n        curr = lo\n        p = n\n        for i in range(t):\n            if curr + p - res[i] > s:\n                x = s - curr\n                res[i] = res[i] + x\n                break\n            elif curr + p - res[i] == s:\n                res[i] = p\n                break\n            else:\n                curr = curr + p - res[i]\n                res[i] = p\n            p = p - 1\n        n1 = l\n        n2 = n - 1 - r\n        ans = [0] * n\n        ans[l:r + 1] = res\n        arr2 = []\n        for item in range(1, n + 1):\n            if item not in res:\n                arr2.append(item)\n        for i in range(n):\n            if ans[i] == 0:\n                ans[i] = arr2.pop()\n        for item in ans:\n            print(item, end=' ')\n        print('')", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    rem = set()\n    out = []\n    for i in range(n, 0, -1):\n        low = k * (k - 1) // 2\n        high = k * (2 * i - k + 1) // 2\n        if k and high >= s and (s - i >= low):\n            out.append(i)\n            s -= i\n            k -= 1\n        else:\n            rem.add(i)\n    if s == 0:\n        left = []\n        right = []\n        i = 1\n        for num in rem:\n            if i < l:\n                left.append(num)\n                i += 1\n            else:\n                right.append(num)\n        out = left + out + right\n        print(*out)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    a = [i + 1 for i in range(n)]\n    d = r - l + 1\n    low = sum(a[:d])\n    high = sum(a[-d:])\n    if s > high or s < low:\n        print(-1)\n    else:\n        t = a[-d:]\n        x = 0\n        for i in range(d):\n            if high - s > 0:\n                if t[i] - (i + 1) <= high - s:\n                    high -= t[i] - (i + 1)\n                    t[i] = i + 1\n                else:\n                    t[i] -= high - s\n                    break\n            else:\n                break\n        check = [False] * (n + 1)\n        ans = [0] * n\n        j = 0\n        for i in range(l - 1, r):\n            ans[i] = t[j]\n            check[t[j]] = True\n            j += 1\n        j = 1\n        for i in range(n):\n            if ans[i] == 0:\n                while check[j]:\n                    j += 1\n                ans[i] = j\n                check[j] = True\n        print(*ans)", "def low(k):\n    return k * (k + 1) / 2\n\ndef high(n, k):\n    return k * (2 * n + 1 - k) / 2\nfor _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    k = r - l + 1\n    minSumm = k * (k + 1) / 2\n    maxSumm = k * (2 * n - k + 1) / 2\n    segment = []\n    used = [-1] * n\n    for i in range(n, -1, -1):\n        if k > 0:\n            if high(i, k) >= s and s - i >= low(k - 1):\n                s -= i\n                k -= 1\n                segment.append(i)\n                used[i - 1] = 1\n    unused = []\n    for i in range(n):\n        if used[i] != 1:\n            unused.append(i + 1)\n    if s != 0:\n        print(-1)\n        continue\n    else:\n        j = 0\n        for i in range(n):\n            if i >= l - 1 and i <= r - 1:\n                print(segment[i - l + 1], end=' ')\n            else:\n                print(unused[j], end=' ')\n                j += 1\n        print()", "for _ in range(int(input())):\n    (n, l, r, s) = list(map(int, input().split()))\n    l -= 1\n    r -= 1\n    k = r - l + 1\n    s1 = k * (k + 1) // 2\n    s2 = k * (2 * n - k + 1) // 2\n    if s < s1 or s > s2:\n        print(-1)\n    else:\n        a = [i + 1 for i in range(n)]\n        last = n\n        mid = []\n        while k:\n            poss = s - k * (k - 1) // 2\n            t = min(poss, last)\n            s = s - t\n            mid.append(t)\n            last = last - 1\n            k = k - 1\n        rest = set(a) - set(mid)\n        rest = list(rest)\n        ans = rest[:l] + mid + rest[l:]\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = [int(i) for i in input().split()]\n    arr = [-1 for i in range(n)]\n    l -= 1\n    r -= 1\n    fill = r - l + 1\n    max_possi = 0\n    m = n\n    for i in range(fill):\n        max_possi += m\n        m -= 1\n    min_possi = fill * (fill + 1) // 2\n    if s > max_possi or s < min_possi:\n        print(-1)\n    else:\n        m = n\n        for i in range(r, l - 1, -1):\n            arr[i] = m\n            m -= 1\n        rem = max_possi - s\n        start = 1\n        for i in range(l, r + 1):\n            if rem == 0:\n                break\n            avail = arr[i] - start\n            if rem >= avail:\n                rem -= avail\n                arr[i] = start\n            else:\n                avail -= rem\n                arr[i] = start + avail\n                rem = 0\n            start += 1\n        visited = [0] * (n + 1)\n        for i in range(l, r + 1):\n            visited[arr[i]] = 1\n        available = []\n        for i in range(1, n + 1):\n            if visited[i] == 0:\n                available.append(i)\n        for i in range(l):\n            arr[i] = available.pop(0)\n        for i in range(r + 1, n):\n            arr[i] = available.pop(0)\n        print(*arr)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        togo = s - sum(range(1, 1 + k))\n        A = list(range(1 + togo // k, 1 + togo // k + k))\n        togo %= k\n        for i in range(k - togo, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "def solve(n: int, l: int, r: int, s: int) -> str:\n    max_sum = 0\n    for i in range(n, n - (r - l + 1), -1):\n        max_sum += i\n    if s > max_sum:\n        return '-1'\n    arr = [i for i in range(1, r - l + 2)]\n    total = sum(arr)\n    if s < total:\n        return '-1'\n    nums = [i for i in range(1, n + 1)]\n    max_index = n - 1\n    curr_index = r - l\n    while total < s:\n        new_val = min(arr[curr_index] + s - total, nums[max_index])\n        change = new_val - arr[curr_index]\n        total += change\n        arr[curr_index] = new_val\n        curr_index -= 1\n        max_index -= 1\n    good_nums = set(arr)\n    garbage_nums = []\n    for i in range(1, n + 1):\n        if i not in good_nums:\n            garbage_nums.append(i)\n    good_index = 0\n    garbage_index = 0\n    ans = []\n    for i in range(n):\n        if i >= l - 1 and i < r:\n            ans.append(arr[good_index])\n            good_index += 1\n        else:\n            ans.append(garbage_nums[garbage_index])\n            garbage_index += 1\n    ans_str = ''\n    for x in ans:\n        ans_str += str(x) + ' '\n    return ans_str\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (n, l, r, s) = list(map(int, input().split()))\n    print(solve(n, l, r, s))", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    c = r - l + 1\n    if s >= c * (c + 1) // 2 and s <= c * (2 * n - c + 1) // 2:\n        sett = set()\n        ss = 0\n        cnt = c - 1\n        for i in range(1, n + 1):\n            if ss + i <= s and ss + i + cnt * (2 * n - cnt + 1) // 2 >= s:\n                ss += i\n                cnt -= 1\n                sett.add(i)\n        lst = [0] * (n + 1)\n        i = l\n        for j in sett:\n            lst[i] = j\n            i += 1\n        i = v = 1\n        while i <= n:\n            if i < l or i > r:\n                if v not in sett:\n                    lst[i] = v\n                    v += 1\n                    i += 1\n                else:\n                    v += 1\n            else:\n                i += c\n        print(*lst[1:])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    (summ1, summ2) = (0, 0)\n    for i in range(1, r - l + 2):\n        summ1 += i\n    for i in range(n - r + l, n + 1):\n        summ2 += i\n    if summ1 <= s <= summ2:\n        a = []\n        for i in range((s - summ1) // (r - l + 1) + 1, (s - summ1) // (r - l + 1) + 1 + (r - l + 1)):\n            a.append(i)\n        for i in range(r - l + 1 - (s - summ1) % (r - l + 1), r - l + 1):\n            a[i] += 1\n        a1 = set()\n        for i in range(1, n + 1):\n            a1.add(i)\n        a1 -= set(a)\n        a1 = list(a1)\n        print(*a1[:l - 1] + a + a1[l - 1:])\n    else:\n        print(-1)", "for y in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    ln = r - l + 1\n    if ln * (ln + 1) // 2 <= s <= n * (n + 1) // 2 - (n - ln) * (n - ln + 1) // 2:\n        lst = [0] * ln\n        for i in range(ln):\n            lst[i] = i + 1\n        s -= sum(lst)\n        lst = lst + [10000000000]\n        p = ln - 1\n        while s > 0:\n            if lst[p] < n and lst[p] + 1 < lst[p + 1]:\n                lst[p] += 1\n                s -= 1\n            else:\n                p -= 1\n        vis = [0] * (n + 1)\n        k = 0\n        for i in range(ln):\n            vis[lst[k]] = 1\n            k += 1\n        ans = [0] + [0] * (l - 1) + lst[:-1] + [0] * (n - r)\n        k = 1\n        for i in range(1, l):\n            while k <= n and vis[k] == 1:\n                k += 1\n            ans[i] = k\n            k += 1\n        for i in range(r + 1, n + 1):\n            while k <= n and vis[k] == 1:\n                k += 1\n            ans[i] = k\n            k += 1\n        print(*ans[1:])\n    else:\n        print('-1')", "rn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nYN = lambda x: print('YES') if x else print('NO')\nmod = 10 ** 9 + 7\nfor _ in range(rn()):\n    (n, l, r, s) = rns()\n    diff = r - l + 1\n    lo = diff * (diff + 1) // 2\n    hi = lo + diff * (n - diff)\n    if lo <= s <= hi:\n        ans = list(range(n - diff + 1, n + 1))\n        i = 0\n        sub = hi - s\n        while sub > 0:\n            if ans[i] == i + 1:\n                i += 1\n            else:\n                ans[i] -= 1\n                sub -= 1\n        h = set(ans)\n        pre = []\n        suff = []\n        for j in range(1, n + 1):\n            if j not in h:\n                if len(pre) < l - 1:\n                    pre.append(j)\n                else:\n                    suff.append(j)\n        print(*pre + ans + suff)\n    else:\n        print(-1)", "def check(l, r, s, num):\n    tmp1 = (2 * l + num - 1) * num // 2\n    tmp2 = (2 * r - num + 1) * num // 2\n    return s >= tmp1 and s <= tmp2\ncas = int(input())\nwhile cas:\n    cas -= 1\n    (n, l, r, s) = map(int, input().split())\n    a = [0 for i in range(n + 1)]\n    vis = [0 for i in range(n + 1)]\n    cnt = l\n    for i in range(1, n + 1):\n        if cnt == r and s <= n and (s >= 1):\n            a[cnt] = s\n            vis[s] = 1\n            s = 0\n            break\n        if check(i + 1, n, s - i, r - cnt):\n            a[cnt] = i\n            vis[i] = 1\n            cnt += 1\n            s -= i\n    if s:\n        print('-1')\n    else:\n        pos = 1\n        for i in range(1, l):\n            while vis[pos]:\n                pos += 1\n            a[i] = pos\n            pos += 1\n        for i in range(r + 1, n + 1):\n            while vis[pos]:\n                pos += 1\n            a[i] = pos\n            pos += 1\n        for i in range(1, n + 1):\n            if i == n:\n                print(a[i])\n            else:\n                print(a[i], end=' ')", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        togo = s - sum(range(1, 1 + k))\n        A = list(range(1 + togo // k, 1 + togo // k + k))\n        togo %= k\n        for i in range(k - togo, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        togo = s - sum(range(1, 1 + k))\n        A = list(range(1 + togo // k, 1 + togo // k + k))\n        togo %= k\n        for i in range(k - togo, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    subarr = [i for i in range(1, r - l + 2)]\n    if s > len(subarr) * (2 * n - len(subarr) + 1) // 2 or s < len(subarr) * (len(subarr) + 1) // 2:\n        print(-1)\n        continue\n    minsum = (r - l + 1) * (r - l + 2) // 2\n    diff = s - minsum\n    marked = [0 for i in range(501)]\n    for i in range(len(subarr)):\n        subarr[i] = subarr[i] + diff // len(subarr)\n        marked[subarr[i]] = 1\n    for i in range(diff % len(subarr)):\n        marked[subarr[len(subarr) - 1 - i]] = 0\n        subarr[len(subarr) - 1 - i] += 1\n        marked[subarr[len(subarr) - 1 - i]] = 1\n    ans = []\n    i = 1\n    ele = 0\n    while ele < l - 1:\n        if marked[i] == 0:\n            ans.append(i)\n            ele += 1\n        i += 1\n    ans.extend(subarr)\n    ele = 0\n    while ele < n - r:\n        if marked[i] == 0:\n            ans.append(i)\n            ele += 1\n        i += 1\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        j = n - x + 1\n        arr = set()\n        for i in range(1, n + 1):\n            if y - j + i >= s:\n                arr.add(i)\n                if len(arr) == x:\n                    break\n                y -= j\n                y += i\n                j += 1\n        s1 = {*range(1, n + 1)} - arr\n        ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        j = n - x + 1\n        arr = set()\n        for i in range(1, n + 1):\n            if y - j + i >= s:\n                arr.add(i)\n                y -= j\n                y += i\n                j += 1\n        s1 = {*range(1, n + 1)} - arr\n        ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        j = n - x + 1\n        test = set()\n        for i in range(1, n + 1):\n            if y - j + i >= s:\n                test.add(i)\n                if len(test) == x:\n                    break\n                y -= j\n                y += i\n                j += 1\n        s1 = {*range(1, n + 1)} - test\n        ans = list(s1)[:l - 1] + list(test) + list(s1)[l - 1:]\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        j = n - x + 1\n        test = []\n        for i in range(1, n + 1):\n            if y - j + i >= s:\n                test.append(i)\n                if len(test) == x:\n                    break\n                y -= j\n                y += i\n                j += 1\n        s1 = list(set(range(1, n + 1)) - set(test))\n        ans = s1[:l - 1] + test + s1[l - 1:]\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        test = n - x + 1\n        s1 = []\n        for i in range(1, n + 1):\n            if y - test + i >= s:\n                s1.append(i)\n                y += i - test\n                test += 1\n        s2 = list(set(range(1, n + 1)) - set(s1))\n        ans = s2[:l - 1] + s1 + s2[l - 1:]\n        print(*ans)", "T = int(input())\nfor _ in range(T):\n    (n, l, r, s) = [int(x) for x in input().split()]\n    ma = (2 * n - r + l) * (r - l + 1) // 2\n    mi = (2 - l + r) * (r - l + 1) // 2\n    if s > ma or s < mi:\n        print(-1)\n    else:\n        x = int((2 * s / (r - l + 1) + l - r) / 2)\n        dad = s - int((2 * x + r - l) * (r - l + 1) / 2)\n        arr = [0] * n\n        for i in range(l - 1, r):\n            arr[i] = x + (i - l + 1)\n        cnt = 0\n        for i in list(range(r - l + 1))[::-1]:\n            add = min(n - cnt - arr[i + l - 1], dad)\n            cnt += 1\n            arr[i + l - 1] += add\n            dad -= add\n            if not dad:\n                break\n        sett = set(arr)\n        cur = 1\n        for i in range(0, l - 1):\n            while cur in sett:\n                cur += 1\n            arr[i] = cur\n            cur += 1\n        for i in range(r, n):\n            while cur in sett:\n                cur += 1\n            arr[i] = cur\n            cur += 1\n        print(' '.join([str(x) for x in arr]))", "class Solution:\n\n    def get_n_sum(self, n):\n        return n * (n + 1) // 2\n\n    def get_last_n_sum(self, n, k):\n        return k * (2 * n + 1 - k) // 2\n\n    def solve(self, n, l, r, s):\n        nsum = self.get_n_sum(n)\n        if s > nsum:\n            return -1\n        k = r - l + 1\n        low = self.get_n_sum(k)\n        high = self.get_last_n_sum(n, k)\n        if s < low or s > high:\n            return -1\n        result = [-1 for _ in range(n)]\n        lr_set = set()\n        count = l - 1\n        for i in range(n, 0, -1):\n            if k > 0:\n                k_ = k - 1\n                high = k * (2 * i + 1 - k) // 2\n                low = k_ * (k_ + 1) // 2\n                if high >= s and s - i >= low:\n                    result[count] = i\n                    lr_set.add(i)\n                    count += 1\n                    s -= i\n                    k -= 1\n        count = 1\n        for i in range(n):\n            if result[i] == -1:\n                while True:\n                    if count in lr_set:\n                        count += 1\n                    else:\n                        break\n                result[i] = count\n                count += 1\n        return ' '.join((str(r) for r in result))\nsol = Solution()\ntests = int(input())\nresults = []\nfor _ in range(tests):\n    (n, l, r, s) = list(map(int, input().split()))\n    result = sol.solve(n, l, r, s)\n    results.append(result)\nfor result in results:\n    print(result)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    ct = r - l + 1\n    a = list(range(1, ct + 1))\n    high = n\n    sm = sum(a)\n    if sm > s:\n        print(-1)\n        continue\n    for j in range(ct - 1, -1, -1):\n        if sm == s:\n            break\n        s1 = sm - a[j]\n        cand = min(high, s - s1)\n        a[j] = cand\n        high = cand - 1\n        sm = s1 + cand\n    if sm != s:\n        print(-1)\n    else:\n        nums = [d for d in range(1, n + 1) if d not in a]\n        res = []\n        while len(res) < n:\n            if a and len(res) + 1 >= l:\n                res.append(a.pop(0))\n            else:\n                res.append(nums.pop(0))\n        print(' '.join(map(str, res)))", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    values = r - l + 1\n    min_sum = values * (values + 1) // 2\n    max_sum = min_sum + (n - values) * values\n    if s < min_sum or s > max_sum:\n        print(-1)\n        continue\n    subarray = [i for i in range(1, r - l + 2)]\n    s = s - min_sum\n    max_num = n - values\n    for i in range(len(subarray) - 1, -1, -1):\n        if s >= max_num:\n            subarray[i] += max_num\n            s -= max_num\n        else:\n            subarray[i] += s\n            break\n    nums = set(subarray)\n    other_nums = list(set(range(1, n + 1)) - nums)\n    for i in range(l - 1):\n        print(other_nums[i], end=' ')\n    for item in nums:\n        print(item, end=' ')\n    for i in range(l - 1, len(other_nums)):\n        print(other_nums[i], end=' ')\n    print('')", "from collections import defaultdict\nfor _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, defaultdict(int))\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    (b, h) = (sum(w), sum(p[-(r - l + 1):]))\n    if not b <= s <= h:\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in w:\n            f[i] = 1\n        for i in range(l, r + 1):\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(len(p)):\n                    if f[p[j]] == 0:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 5000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    b = sum(w)\n    if not b <= s <= sum(p[-(r - l + 1):]):\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(n):\n                    if not f[p[j]]:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 1000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    b = sum(w)\n    if not b <= s <= sum(p[-(r - l + 1):]):\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(n):\n                    if not f[p[j]]:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for i in range(int(input())):\n    (n, l, r, s) = [int(n) for n in input().split()]\n    length = r - l + 1\n    max_sum = length * (2 * n + 1 - length) // 2\n    min_sum = length * (length + 1) // 2\n    if s > max_sum or s < min_sum:\n        print('-1')\n    else:\n        (left_part, right_part) = ([], [])\n        for j in range(n, 0, -1):\n            if length > 0 and length * (2 * j + 1 - length) // 2 >= s and (s - j >= (length - 1) * length // 2):\n                right_part.append(j)\n                length = length - 1\n                s = s - j\n            else:\n                left_part.append(j)\n        if s > 0:\n            print('-1')\n        else:\n            for j in right_part:\n                left_part.insert(l - 1, j)\n                l += 1\n        print(*left_part)", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = (int(i) for i in input().split())\n    nums = r - l + 1\n    mins = (nums + 1) * nums // 2\n    maxs = (n + n - nums + 1) * nums // 2\n    if s < mins or s > maxs:\n        print(-1)\n        continue\n    lst = list(range(1, nums + 1))\n    d = s - mins\n    i = 1\n    maxnum = n\n    while d:\n        add = d if maxnum - lst[nums - i] > d else maxnum - lst[nums - i]\n        lst[nums - i] += add\n        d -= add\n        i += 1\n        maxnum -= 1\n    used = set(lst)\n    counter = 1\n    for i in range(1, n + 1):\n        if i < l or i > r:\n            while counter in used:\n                counter += 1\n            print(counter, end=' ')\n            counter += 1\n        else:\n            print(lst[i - l], end=' ')\n    print()", "def answer():\n    m = r - l + 1\n    v1 = n * (n + 1) // 2 - (n - m) * (n - m + 1) // 2\n    v2 = m * (m + 1) // 2\n    if v1 < s or v2 > s:\n        return [-1]\n    req = []\n    taken = [False] * (n + 1)\n    for i in range(1, r - l + 2):\n        taken[i] = True\n        req.append(i)\n    need = s - sum(req)\n    for i in range(len(req)):\n        for v in range(n, 0, -1):\n            if not taken[v] and need + req[i] - v >= 0:\n                taken[v] = True\n                taken[req[i]] = False\n                need += req[i] - v\n                req[i] = v\n                break\n        if need == 0:\n            break\n    ans = []\n    for i in range(1, n + 1):\n        if len(ans) == l - 1:\n            ans.extend(req)\n        if i not in req:\n            ans.append(i)\n    if len(ans) == l - 1:\n        ans.extend(req)\n    return ans\nfor T in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    print(*answer())", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "I = lambda : [*map(int, input().split())]\n\ndef out(x):\n    print(str(x))\n\ndef solve():\n    (n, l, r, s) = I()\n    c = [i for i in range(1, r - l + 2)]\n    sm = sum(c)\n    if sm > s:\n        out(-1)\n        return\n    ci = len(c) - 1\n    free = set((i for i in range(r - l + 2, n + 1)))\n    used = set(c)\n    while ci >= 0 and sm < s:\n        if c[ci] + 1 not in free:\n            ci -= 1\n            continue\n        used.remove(c[ci])\n        free.add(c[ci])\n        used.add(c[ci] + 1)\n        free.remove(c[ci] + 1)\n        c[ci] += 1\n        sm += 1\n    if sm != s:\n        out(-1)\n        return\n    result = [f'{i}' for i in free]\n    result = result[:l - 1] + list(map(str, c)) + result[l - 1:]\n    out(' '.join(result))\n(t,) = I()\nfor i in range(t):\n    solve()", "def get_numbbbs(maximum, k, total):\n    nums = list(range(1, k + 1))\n    s = sum(nums)\n    if s > total:\n        return -1\n    pointer = -1\n    while s < total:\n        if nums[pointer] == maximum + pointer + 1:\n            pointer -= 1\n        else:\n            nums[pointer] += 1\n            s += 1\n        if -pointer > len(nums):\n            return -1\n    return nums\nfor cycle in range(int(input())):\n    (n, l, r, s) = [int(x) for x in input().split()]\n    a = get_numbbbs(n, r - l + 1, s)\n    if a == -1:\n        print(a)\n    else:\n        not_nuzhno = [x for x in range(1, n + 1) if x not in a]\n        print(*not_nuzhno[:l - 1], *a, *not_nuzhno[l - 1:])", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    f = 0\n    ai = []\n    for i in range(x):\n        ai.append(i + 1)\n    if sum(ai) > s:\n        print(-1)\n    else:\n        k = (s - sum(ai)) // x\n        y = (s - sum(ai)) % x\n        for i in range(x):\n            ai[i] = ai[i] + k\n        for i in range(y):\n            ai[x - i - 1] = ai[x - i - 1] + 1\n        for i in range(x):\n            if ai[i] > n - r + l + i:\n                f = 1\n                break\n        if f == 1:\n            print(-1)\n        else:\n            li = [1] * (n + 1)\n            for ele in ai:\n                li[ele] = 0\n            ki = []\n            for i in range(1, n + 1):\n                if li[i] != 0:\n                    ki.append(i)\n            li = ki[:l - 1] + ai + ki[l - 1:]\n            print(*li)", "aaaaa = []\nfor i in range(10000):\n    aaaaa.append(i)\naaaaa.append('sb')\n\ndef f(a, b):\n    ans = 0\n    for i in range(a, b + 1):\n        ans += i\n    return ans\nfor tc in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    leng = r - l + 1\n    if f(1, leng) > s or f(n - leng + 1, n) < s:\n        print(-1)\n        continue\n    lr = [i for i in range(n - leng + 1, n + 1)]\n    summ = sum(lr)\n    t = 0\n    while summ > s:\n        summ -= lr[t]\n        summ += t + 1\n        lr[t] = t + 1\n        t += 1\n    t -= 1\n    while summ < s:\n        lr[t] += 1\n        summ += 1\n    book = [0 for i in range(n + 5)]\n    for i in lr:\n        book[i] = 1\n    t = 1\n    for i in range(l - 1):\n        while book[t] == 1:\n            t += 1\n        print(t, end=' ')\n        book[t] = 1\n    print(' '.join([str(i) for i in lr]), end=' ')\n    for i in range(n - r):\n        while book[t] == 1:\n            t += 1\n        print(t, end=' ')\n        book[t] = 1\n    print()", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    k = [0] * n\n    p = r - l + 1\n    t = n * (n + 1) // 2\n    q = (n - p) * (n - p + 1) // 2\n    if p * (p + 1) // 2 > s or t - q < s:\n        print(-1)\n        continue\n    a = 1\n    p = 0\n    t = set()\n    for i in range(l - 1, r):\n        k[i] = a\n        p += a\n        t.add(a)\n        a += 1\n    while s - p:\n        for i in range(l - 1, r):\n            if k[i] + s - p <= n and k[i] + s - p not in t:\n                t.add(k[i] + s - p)\n                t.discard(k[i])\n                k[i] = k[i] + s - p\n                p = s\n                break\n            elif k[i] + s - p > n:\n                a = n\n                while a in t:\n                    a -= 1\n                t.remove(k[i])\n                t.add(a)\n                p -= k[i]\n                k[i] = a\n                p += k[i]\n    q = []\n    for i in range(1, n + 1):\n        if i not in t:\n            q.append(i)\n    for i in range(n):\n        if k[i] == 0:\n            k[i] = q.pop()\n    print(*k)", "for _ in range(int(input())):\n    (n, l, r, s) = [int(x) for x in input().split(' ')]\n    k = abs(l - r) + 1\n    mn = k * (k + 1) / 2\n    mx = mn + (n - k) * k\n    if mn <= s and s <= mx:\n        a = [i for i in range(k)]\n        a.append(n)\n        curr = mn\n        ptr = k - 1\n        while curr != s:\n            if a[ptr] + 1 != a[ptr + 1]:\n                a[ptr] += 1\n                curr += 1\n            else:\n                ptr -= 1\n        a.pop()\n        assert len(a) == k\n        for i in range(len(a)):\n            a[i] += 1\n        sa = set(a)\n        others = []\n        assert len(sa) == len(a)\n        for i in range(1, n + 1):\n            if not i in sa:\n                others.append(i)\n        for i in range(l - 1):\n            print(others[i], end=' ')\n        for x in a:\n            print(x, end=' ')\n        for i in range(len(others) - (n - r), len(others)):\n            print(others[i], end=' ')\n        print()\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    z = r - l + 1\n    p = 0\n    q = 0\n    i = 0\n    b = list([i + 1 for i in range(n)])\n    a = list(b[:z])\n    while i < z:\n        p = p + i + 1\n        q = q + n - i\n        i += 1\n    c = s - p\n    if s <= q and s >= p:\n        i = -1\n        while 1 > 0:\n            if c == 0:\n                break\n            u = b[i] - a[i]\n            if c > u:\n                a[i] = b[i]\n                c -= u\n            else:\n                a[i] = a[i] + c\n                c = 0\n            i -= 1\n        for x in a:\n            b.remove(x)\n        b = b[:l - 1] + a + b[l - 1:]\n        print(*(i for i in b))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        test = n - x + 1\n        s1 = []\n        for i in range(1, n + 1):\n            if y - test + i >= s:\n                s1.append(i)\n                y += i - test\n                test += 1\n        s2 = list(set(range(1, n + 1)) - set(s1))\n        ans = s2[:l - 1] + s1 + s2[l - 1:]\n        print(*ans)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    y = sum(range(n - x + 1, n + 1))\n    z = sum(range(1, x + 1))\n    if s > y or s < z:\n        print(-1)\n    else:\n        test = n - x + 1\n        s1 = []\n        for i in range(1, n + 1):\n            if y - test + i >= s:\n                s1.append(i)\n                y += i - test\n                test += 1\n        s2 = list(set(range(1, n + 1)) - set(s1))\n        ans = s2[:l - 1] + s1 + s2[l - 1:]\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = list(map(int, input().split()))\n    k = r - l + 1\n    max_sum = k * (2 * n + 1 - k) // 2\n    min_sum = k * (k + 1) // 2\n    if s > max_sum or s < min_sum:\n        print(-1)\n    else:\n        a = []\n        b = []\n        for i in range(n, 0, -1):\n            if k > 0 and k * (2 * i + 1 - k) // 2 >= s and (s - i >= (k - 1) * k // 2):\n                b.append(i)\n                k = k - 1\n                s = s - i\n            else:\n                a.append(i)\n        if s > 0:\n            print(-1)\n        else:\n            for i in b:\n                a.insert(l - 1, i)\n                l += 1\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 100000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    (b, h) = (sum(w), sum(p[-(r - l + 1):]))\n    if not b <= s <= h:\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(len(p)):\n                    if f[p[j]] == 0:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 100000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    b = sum(w)\n    if not b <= s <= sum(p[-(r - l + 1):]):\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(n):\n                    if not f[p[j]]:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    x = r - l + 1\n    f = 0\n    ai = []\n    for i in range(x):\n        ai.append(i + 1)\n    if sum(ai) > s:\n        print(-1)\n    else:\n        k = (s - sum(ai)) // x\n        y = (s - sum(ai)) % x\n        for i in range(x):\n            ai[i] = ai[i] + k\n        for i in range(y):\n            ai[x - i - 1] = ai[x - i - 1] + 1\n        for i in range(x):\n            if ai[i] > n - r + l + i:\n                f = 1\n                break\n        if f == 1:\n            print(-1)\n        else:\n            li = [1] * (n + 1)\n            for ele in ai:\n                li[ele] = 0\n            ki = []\n            for i in range(1, n + 1):\n                if li[i] != 0:\n                    ki.append(i)\n            li = ki[:l - 1] + ai + ki[l - 1:]\n            print(*li)", "def rec(s, l, arr):\n    arr_ = arr[:l]\n    if sum(arr_) == s:\n        return arr_\n    while arr_[-1] < arr[-1]:\n        for i in range(l - 1, -1, -1):\n            arr_[i] += 1\n            if sum(arr_) == s:\n                return arr_\n    return None\n\ndef solve():\n    (n, l, r, s) = map(int, input().split(' '))\n    l -= 1\n    r -= 1\n    re = rec(s, r - l + 1, [i + 1 for i in range(n)])\n    if re == None:\n        print(-1)\n        return\n    st = list(set([i + 1 for i in range(n)]) - set(re))\n    res = [None] * n\n    i = 0\n    for j in range(l):\n        res[j] = st[i]\n        i += 1\n    for j in range(r + 1, n):\n        res[j] = st[i]\n        i += 1\n    i = 0\n    for j in range(l, r + 1):\n        res[j] = re[i]\n        i += 1\n    print(*res)\nfor t in range(int(input())):\n    solve()", "import sys\nimport os.path\nif os.path.exists('input_file.txt'):\n    sys.stdin = open('input_file.txt', 'r')\n    sys.stdout = open('output_file.txt', 'w')\nmod = 1000000007\n\ndef factorial(a):\n    ans = 1\n    for i in range(1, a + 1):\n        ans = ans * i % mod\n    return ans\nfor _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    (an1, an2) = (0, 0)\n    for i in range(1, r - l + 2):\n        an1 += i\n    for i in range(0, r - l + 1):\n        an2 += n - i\n    if s > an2 or s < an1:\n        print(-1, end=' ')\n    else:\n        (i, ans) = (0, 0)\n        lis = []\n        for i in range(1, r - l + 1 + 1):\n            lis.append(i)\n            ans += i\n        if ans != s:\n            i = -1\n            while ans != s:\n                if lis[i] == n + i + 1:\n                    i -= 1\n                else:\n                    lis[i] += 1\n                    ans += 1\n        j = 0\n        s = set()\n        for ii in lis:\n            s.add(ii)\n        ii = 1\n        for i in range(1, n + 1):\n            if i >= l and i <= r:\n                print(lis[j], end=' ')\n                j += 1\n            else:\n                while ii in s:\n                    ii += 1\n                print(ii, end=' ')\n                s.add(ii)\n    print()", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    if n * (n + 1) // 2 - (n - r + l - 1) * (n - r + l) // 2 < s:\n        print(-1)\n        continue\n    if (r - l + 1) * (r - l + 2) // 2 > s:\n        print(-1)\n        continue\n    x = n\n    add = [i + 1 for i in range(r - l + 1)]\n    sa = sum(add)\n    ind = 0\n    while True:\n        if sa == s:\n            break\n        if add[r - l - ind] != n - ind:\n            add[r - l - ind] += 1\n            sa += 1\n        else:\n            ind += 1\n        if ind >= n:\n            break\n    if sum(add) != s:\n        print(-1)\n        continue\n    al = [i + 1 for i in range(n)]\n    puti = sorted(add)[::-1]\n    perm = [0] * n\n    for i in range(l, r + 1):\n        perm[i - 1] = puti.pop(0)\n        del al[perm[i - 1] - 1]\n    for i in range(n):\n        if not perm[i]:\n            perm[i] = al.pop()\n    print(*perm)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, l, r, s) = map(int, sys.stdin.readline().split())\n    k = r - l + 1\n    (low_sum, high_sum) = (sum(range(1, k + 1)), sum(range(n - k + 1, n + 1)))\n    if s < low_sum or high_sum < s:\n        print(-1)\n        continue\n    (idx, limit) = (k, n)\n    temp = [i for i in range(k + 1)]\n    while sum(temp) != s:\n        temp[idx] += 1\n        if temp[idx] == limit:\n            idx -= 1\n            limit -= 1\n    (ans, idx, num) = ([], 1, 1)\n    for i in range(1, n + 1):\n        if l <= i <= r:\n            ans.append(temp[idx])\n            idx += 1\n            continue\n        while num in temp:\n            num += 1\n        ans.append(num)\n        num += 1\n    print(*ans)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\n\ndef rarray():\n    return [int(i) for i in input().split()]\nti = 1\nti = int(input())\nfor ii in range(ti):\n    (n, l, r, s) = rarray()\n    ans = []\n    f = [False] * (n + 1)\n    m = r - l + 1\n    for i in reversed(range(1, n + 1)):\n        if s - i >= (1 + m - 1) * (m - 1) // 2 and i >= m:\n            ans.append(i)\n            f[i] = True\n            s -= i\n            m -= 1\n    if s > 0 or m < 0:\n        print(-1)\n        continue\n    res = []\n    for i in range(1, n + 1):\n        if not f[i]:\n            res.append(i)\n    k1 = k2 = 0\n    for i in range(1, n + 1):\n        if l <= i <= r:\n            print(ans[k2], end=' ')\n            k2 += 1\n        else:\n            print(res[k1], end=' ')\n            k1 += 1\n    print()", "from collections import Counter as C\n\ndef fun(s, k, n):\n    l = [i + 1 for i in range(k)]\n    ss = k * (k + 1) // 2\n    if ss > s:\n        print(-1)\n        return [-1]\n    x = s - ss\n    z = x // k\n    for i in range(k):\n        l[i] += z\n        if l[i] > n:\n            print(-1)\n            return [-1]\n    for i in range(k - 1, k - x % k - 1, -1):\n        l[i] += 1\n        if l[i] > n:\n            print(-1)\n            return [-1]\n    return l\n\ndef funn(n, l, r, s):\n    a = fun(s, r - l + 1, n)\n    if a[0] == -1:\n        return\n    x = [0] * 502\n    for i in range(len(a)):\n        x[a[i]] += 1\n    z = 1\n    for i in range(l - 1):\n        while x[z] == 1:\n            z += 1\n        print(z, end=' ')\n        x[z] += 1\n    for i in range(len(a)):\n        print(a[i], end=' ')\n    for i in range(r, n):\n        while x[z] == 1:\n            z += 1\n        print(z, end=' ')\n        x[z] += 1\n    print()\n    return\nfor _____ in range(int(input().strip())):\n    (n, l, r, s) = map(int, input().split())\n    funn(n, l, r, s)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\n\ndef rarray():\n    return [int(i) for i in input().split()]\nti = 1\nti = int(input())\nfor ii in range(ti):\n    (n, l, r, s) = rarray()\n    ans = []\n    f = [False] * (n + 1)\n    m = r - l + 1\n    for i in reversed(range(1, n + 1)):\n        if s - i >= (1 + m - 1) * (m - 1) // 2 and i >= m:\n            ans.append(i)\n            f[i] = True\n            s -= i\n            m -= 1\n    if s > 0 or m < 0:\n        print(-1)\n        continue\n    res = []\n    for i in range(1, n + 1):\n        if not f[i]:\n            res.append(i)\n    k1 = k2 = 0\n    for i in range(1, n + 1):\n        if l <= i <= r:\n            print(ans[k2], end=' ')\n            k2 += 1\n        else:\n            print(res[k1], end=' ')\n            k1 += 1\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = map(int, input().split())\n    l -= 1\n    k = r - l\n    if sum(range(1, 1 + k)) <= s <= sum(range(n + 1 - k, n + 1)):\n        togo = s - sum(range(1, 1 + k))\n        A = list(range(1 + togo // k, 1 + togo // k + k))\n        togo %= k\n        for i in range(k - togo, k):\n            A[i] += 1\n        trash = list(set(range(1, n + 1)) - set(A))\n        print(*trash[:l] + A + trash[l:])\n    else:\n        print(-1)", "from collections import defaultdict\nfor _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 100000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    (b, h) = (sum(w), sum(p[-(r - l + 1):]))\n    if not b <= s <= h:\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in w:\n            f[i] = 1\n        for i in range(l, r + 1):\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(len(p)):\n                    if f[p[j]] == 0:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * 100000)\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    (b, h) = (sum(w), sum(p[-(r - l + 1):]))\n    if not b <= s <= h:\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in w:\n            f[i] = 1\n        for i in range(l, r + 1):\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(len(p)):\n                    if f[p[j]] == 0:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * (500 * (500 + 1) // 2))\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    b = sum(w)\n    if not b <= s <= sum(p[-(r - l + 1):]):\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(n):\n                    if not f[p[j]]:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in range(int(input())):\n    (n, l, r, s) = map(int, input().split())\n    w = r - l + 1\n    m = sum(range(n, n - w, -1))\n    if s > m or s < sum(range(1, w + 1)):\n        print(-1)\n        continue\n    j = n - w + 1\n    arr = set()\n    for i in range(1, n + 1):\n        if m - j + i >= s:\n            arr.add(i)\n            m -= j\n            m += i\n            j += 1\n    s1 = {*range(1, n + 1)} - arr\n    ans = list(s1)[:l - 1] + list(arr) + list(s1)[l - 1:]\n    print(*ans)", "for _ in range(int(input())):\n    (n, l, r, total) = map(int, input().split())\n    (mini, maxi, a, b) = (0, 0, 1, n)\n    s = total\n    for i in range(l - 1, r):\n        mini += a\n        maxi += b\n        b -= 1\n        a += 1\n    if total > maxi or total < mini:\n        print(-1)\n        continue\n    a = [i for i in range(1, n + 1)]\n    stack = []\n    length = r - l + 1\n    now = True\n    for i in range(l - 1, r):\n        if i == r - 1:\n            sumleft = total - sum(stack)\n            if sumleft in a:\n                stack.append(sumleft)\n                a.remove(sumleft)\n            else:\n                now = False\n        else:\n            for j in range(len(a) - 1, -1, -1):\n                ele = a[j]\n                tmp = length - len(stack) - 1\n                val = tmp * (tmp + 1) // 2\n                if total - sum(stack) - ele >= val:\n                    stack.append(ele)\n                    a.remove(ele)\n                    break\n        if len(stack) != i - (l - 1) + 1:\n            now = False\n    if now == False:\n        print(-1)\n        continue\n    ans = [-1] * n\n    pos = 0\n    for i in range(l - 1):\n        ans[i] = a[pos]\n        pos += 1\n    for i in range(r, n):\n        ans[i] = a[pos]\n        pos += 1\n    pos = 0\n    for i in range(l - 1, r):\n        ans[i] = stack[pos]\n        pos += 1\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, l, r, s) = [int(num) for num in input().strip().split(' ')]\n    seq = [i for i in range(1, n + 1)]\n    k = r - l + 1\n    low = sum(seq[:k])\n    high = sum(seq[n - k:])\n    if s < low or s > high:\n        print(-1)\n        continue\n    used = set()\n    for i in reversed(seq):\n        ns = s - i\n        if ns < sum(seq[:k - len(used) - 1]):\n            continue\n        s = ns\n        used.add(i)\n    res = [0] * n\n    l -= 1\n    r -= 1\n    unused = {i for i in range(1, n + 1)} - used\n    for i in range(n):\n        if l <= i and i <= r:\n            res[i] = used.pop()\n        else:\n            res[i] = unused.pop()\n    for i in res:\n        print(i, end=' ')\n    print()", "for _ in ' ' * int(input()):\n    (n, l, r, s) = map(int, input().split())\n    (p, a, f) = ([], [0] * n, [0] * (500 * (500 + 1) // 2))\n    for i in range(1, n + 1):\n        p.append(i)\n    w = list(p[:r - l + 1])\n    b = sum(w)\n    if not b <= s <= sum(p[-(r - l + 1):]):\n        print(-1)\n    else:\n        c = s - b\n        m = c % (r - l + 1)\n        w[-1] = p[r - l] + c // (r - l + 1)\n        for i in range(len(w) - 2, -1, -1):\n            w[i] = w[i + 1] - 1\n        for i in range(len(w) - 1, -1, -1):\n            if not m:\n                break\n            m -= 1\n            w[i] += 1\n        for i in range(l, r + 1):\n            f[w[-1]] = 1\n            a[i - 1] = w.pop()\n        for i in range(n):\n            if not a[i]:\n                for j in range(n):\n                    if not f[p[j]]:\n                        a[i] = p.pop(j)\n                        break\n        print(*a)", "for _ in range(int(input())):\n    (n, s, e, su) = list(map(int, input().split()))\n    lis = []\n    for i in range(1, n + 1):\n        lis.append(i)\n    le = e - s + 1\n    if sum(lis[len(lis) - le:]) < su or sum(lis[:le]) > su:\n        print(-1)\n        continue\n    new = []\n    for i in lis[:le]:\n        new.append(i)\n    ad = sum(new)\n    need = su - ad\n    per = need // le\n    extra = need - per * le\n    m = lis[-1]\n    for i in range(le):\n        new[i] += per\n    if extra > 0:\n        for i in range(le - 1, le - extra - 1, -1):\n            new[i] += 1\n    final = lis.copy()\n    for i in new:\n        final.remove(i)\n    final = final[:s - 1] + new + final[s - 1:]\n    string = ''\n    for i in final:\n        string += str(i) + ' '\n    print(string)"]