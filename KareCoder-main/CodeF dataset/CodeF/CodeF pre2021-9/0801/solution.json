["from bisect import *\nimport sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    dp = [[0] * (w + 1) for _ in range(w + 1)]\n    for d in range(1, w + 1):\n        for l in range(w - d + 1):\n            r = l + d\n            cnt = [0] * (w + 1)\n            for i in range(h):\n                sl = bisect_left(seg[i], l)\n                sr = bisect_right(seg[i], r)\n                if sl == sr:\n                    continue\n                b = seg[i][sl]\n                e = seg[i][sr - 1]\n                cnt[b] += 1\n                cnt[e] -= 1\n            for j in range(l, r):\n                cnt[j + 1] += cnt[j]\n                if cnt[j] == 0:\n                    continue\n                dp[l][r] = max(dp[l][r], cnt[j] ** 2 + dp[l][j] + dp[j + 1][r])\n    print(dp[0][w])\n(h, w) = MI()\nseg = [[0] for _ in range(h)]\nfor i in range(h):\n    for _ in range(II()):\n        (l, r) = MI()\n        seg[i].append(r)\nsolve()", "from bisect import *\nimport sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    dp = [[0] * (w + 1) for _ in range(w + 1)]\n    for d in range(1, w + 1):\n        for l in range(w - d + 1):\n            r = l + d\n            cnt = [0] * (w + 1)\n            for i in range(h):\n                sl = bisect_left(seg[i], l)\n                sr = bisect_right(seg[i], r)\n                if sl == sr:\n                    continue\n                b = seg[i][sl]\n                e = seg[i][sr - 1]\n                cnt[b] += 1\n                cnt[e] -= 1\n            for j in range(l, r):\n                cnt[j + 1] += cnt[j]\n                if cnt[j] == 0:\n                    continue\n                dp[l][r] = max(dp[l][r], cnt[j] ** 2 + dp[l][j] + dp[j + 1][r])\n    print(dp[0][w])\n(h, w) = MI()\nseg = [[0] for _ in range(h)]\nfor i in range(h):\n    for _ in range(II()):\n        (l, r) = MI()\n        seg[i].append(r)\nsolve()", "from bisect import *\nimport sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    dp = [[0] * (w + 1) for _ in range(w + 1)]\n    for d in range(1, w + 1):\n        for l in range(w - d + 1):\n            r = l + d\n            cnt = [0] * (w + 1)\n            for i in range(h):\n                sl = bisect_left(seg[i], l)\n                sr = bisect_right(seg[i], r)\n                if sl == sr:\n                    continue\n                b = seg[i][sl]\n                e = seg[i][sr - 1]\n                cnt[b] += 1\n                cnt[e] -= 1\n            for j in range(l, r):\n                cnt[j + 1] += cnt[j]\n                if cnt[j] == 0:\n                    continue\n                dp[l][r] = max(dp[l][r], cnt[j] ** 2 + dp[l][j] + dp[j + 1][r])\n    print(dp[0][w])\n(h, w) = MI()\nseg = [[0] for _ in range(h)]\nfor i in range(h):\n    for _ in range(II()):\n        (l, r) = MI()\n        seg[i].append(r)\nsolve()", "from bisect import *\nimport sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    dp = [[0] * (w + 1) for _ in range(w + 1)]\n    for d in range(1, w + 1):\n        for l in range(w - d + 1):\n            r = l + d\n            cnt = [0] * (w + 1)\n            for i in range(h):\n                sl = bisect_left(seg[i], l)\n                sr = bisect_right(seg[i], r)\n                if sl == sr:\n                    continue\n                b = seg[i][sl]\n                e = seg[i][sr - 1]\n                cnt[b] += 1\n                cnt[e] -= 1\n            for j in range(l, r):\n                cnt[j + 1] += cnt[j]\n                if cnt[j] == 0:\n                    continue\n                dp[l][r] = max(dp[l][r], cnt[j] ** 2 + dp[l][j] + dp[j + 1][r])\n    print(dp[0][w])\n(h, w) = MI()\nseg = [[0] for _ in range(h)]\nfor i in range(h):\n    for _ in range(II()):\n        (l, r) = MI()\n        seg[i].append(r)\nsolve()"]