["def me(base, exp, mod):\n    if exp == 0:\n        return 1\n    if exp % 2 == 0:\n        r = me(base, exp / 2, mod)\n        return r * r % mod\n    else:\n        return base % mod * me(base, exp - 1, mod) % mod\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nn = int(input())\np = 1000000007\nfact = modFact(n, p)\nexp = me(2, n - 1, p)\nprint((fact - exp + p) % p)", "def factorial(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % mod\n    return ans\nmod = int(1000000000.0 + 7)\nn = int(input())\nans = factorial(n) - pow(2, n - 1, mod)\nprint((ans % mod + mod) % mod)", "def fast_exp(b, e, m):\n    r = 1\n    if 1 & e:\n        r = b\n    while e:\n        e >>= 1\n        b = b * b % m\n        if e & 1:\n            r = r * b % m\n    return r\n\ndef factorial(n, m):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i % m\n    return f\nm = 1000000007\ne = int(input())\nif e == 0:\n    print(0)\nelse:\n    b = 2\n    r = fast_exp(b, e - 1, m)\n    fm = factorial(e, m)\n    print((fm - r) % m)", "import math\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nn = int(input())\nans = 0\nleft = n\nmod = 10 ** 9 + 7\nreal = modFact(n, mod)\nans = 2 ** (n - 1) % mod\nprint((real - int(ans) + mod) % mod)", "def factorial(n):\n    M = 1000000007\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i % M\n    return f\nn = int(input())\nz = int(1000000000.0 + 7)\nd = pow(2, n - 1) % z\nprint((factorial(n) - d) % z)", "import math\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nn = int(input())\nmod = 10 ** 9 + 7\nfact = modFact(n, mod)\npower = pow(2, n - 1, mod)\nresult = (fact - power) % mod\nprint(result)", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, combinations, groupby\nMOD = 10 ** 9 + 7\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nn = II()\nprint((modFact(n, MOD) - power(2, n - 1, MOD)) % MOD)", "from sys import stdin\nfrom collections import defaultdict\nimport itertools\nimport math\n\ndef rei():\n    return list(map(int, stdin.readline().strip().split(' ')))\n\ndef res():\n    return stdin.readline().rstrip()\n\ndef prno():\n    print('NO')\n\ndef pryes():\n    print('YES')\n\ndef solve():\n    n = rei()[0]\n    ans = 1\n    mod = 10 ** 9 + 7\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= mod\n    ans %= mod\n    ans -= 2 ** (n - 1) % mod\n    ans %= mod\n    print(ans)\nsolve()", "m = 10 ** 9 + 7\n\ndef sol(x):\n    res = 1\n    for i in range(1, x + 1):\n        res = res * i % m\n    return (res - pow(2, x - 1, m)) % m\nprint(sol(int(input())))", "import sys\n\ndef fact(n, MOD):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % MOD\n    return ans % MOD\nMOD = 1000000007\nn = int(input())\na = pow(2, n - 1, MOD)\nb = fact(n, MOD)\nprint((b - a) % MOD)", "Q = 10 ** 9 + 7\n\ndef main():\n    n = int(input())\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= Q\n    ans = (ans - pow(2, n - 1, Q)) % Q\n    print(ans)\nmain()", "n = int(input())\nmod = 10 ** 9 + 7\np = mod\n\ndef modFact(n):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nprint((modFact(n) - pow(2, n - 1, mod)) % mod)", "def factorial(x):\n    ans = 1\n    for i in range(2, x + 1):\n        ans = ans * i % (10 ** 9 + 7)\n    return ans\nn = int(input())\nprint((factorial(n) - pow(2, n - 1, 10 ** 9 + 7)) % (10 ** 9 + 7))", "def modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\np = 10 ** 9 + 7\nn = int(input())\nprint((modFact(n, p) - pow(2, n - 1, p)) % p)", "n = int(input())\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\np = 10 ** 9 + 7\nprint((modFact(n, p) - pow(2, n - 1, p)) % p)", "import math\nn = int(input())\nmod = 10 ** 9 + 7\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nx = modFact(n, mod)\ny = 2 ** (n - 1) % mod\nprint((x - y) % mod)", "n = int(input())\nans = 1\nmod = 10 ** 9 + 7\nfor i in range(1, n + 1):\n    ans = ans * i % mod\nans -= (1 << n - 1) % mod\nif ans < 0:\n    ans += mod\nprint(ans)", "import sys\nM = 1000000007\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = 1\n    for i in range(1, n + 1):\n        a = a * i % M\n    print((a + M - pow(2, n - 1, M)) % M)\nmain()", "def modFact(n, p):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nmod = 1000000007\nn = int(input())\nm = modFact(n, 1000000007)\nm -= 2 ** (n - 1) % mod\nprint(m % mod)", "a = int(input())\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nans = modFact(a, pow(10, 9) + 7) - pow(2, a - 1, pow(10, 9) + 7)\nif ans < 0:\n    ans = pow(10, 9) + 7 - abs(ans)\nprint(ans)", "mod = 10 ** 9 + 7\n\ndef power(x, a):\n    if a == 0:\n        return 1\n    z = power(x, a // 2)\n    z = z * z % mod\n    if a % 2:\n        z = z * x % mod\n    return z\n\ndef fact(n):\n    prod = 1\n    for no in range(2, n + 1):\n        prod = prod * no % mod\n    return prod\nn = int(input())\nval = fact(n) - power(2, n - 1)\nif val < 0:\n    val += 10 ** 9 + 7\nprint(val)", "n = int(input())\n\ndef factorial(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= 10 ** 9 + 7\n    return ans % (10 ** 9 + 7)\nprint((factorial(n) - 2 ** (n - 1) % (10 ** 9 + 7)) % (10 ** 9 + 7))", "def m(val):\n    cal = 1\n    for i in range(val, 0, -1):\n        cal *= i\n        cal = cal % (10 ** 9 + 7)\n    return cal\nn = int(input())\nhold = pow(2, n - 2 + 1, 10 ** 9 + 7)\nresult = (m(n) - hold) % (10 ** 9 + 7)\nprint(result)", "def resolve():\n    N = int(input())\n    base = 10 ** 9 + 7\n    mod_1 = 2\n    for i in range(3, N + 1):\n        mod_1 *= i\n        if mod_1 > base:\n            mod_1 = mod_1 % base\n    mod_2 = pow(2, N - 2, base)\n    result = (mod_1 - 2 * mod_2) % base\n    print(result)\nresolve()", "def fact(n):\n    sol = 2\n    M = 1000000007\n    for i in range(3, n + 1):\n        sol *= i\n        sol %= M\n    return sol % M\nn = int(input())\nM = 1000000007\nprint((fact(n) - (1 << n - 1) % M) % M)", "MODULO = 10 ** 9 + 7\n\ndef num_of_cyclic_permutations(n):\n    factorital = 1\n    for i in range(2, n + 1):\n        factorital = factorital * i % MODULO\n    return (factorital - pow(2, n - 1, MODULO)) % MODULO\n\ndef main():\n    n = int(input())\n    print(num_of_cyclic_permutations(n))\nmain()", "M = 10 ** 9 + 7\n\ndef fact(n):\n    if n >= M:\n        return 0\n    m = 1\n    for i in range(1, n + 1):\n        m = m * i % M\n    return m\nn = int(input())\nk = fact(n) % M\nj = pow(2, n - 1, M)\nprint((k % M - j % M) % M)", "from sys import stdin, stdout\nimport math, queue, heapq\nfastinput = stdin.readline\nfastout = stdout.write\nt = 1\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\nm = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = int(fastinput())\n    ans = (modFact(n, m) - pow(2, n - 1, m)) % m\n    print(ans)", "def modf(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % Mod\n    return result\n\ndef pernm(n, p):\n    return (pow(2, n - 1) - 2) % Mod\nn = int(input())\nMod = 10 ** 9 + 7\na = modf(n, Mod)\nprint((a - pernm(n, Mod) - 2) % Mod)", "mod = 10 ** 9 + 7\n\ndef power(x, a):\n    if a == 0:\n        return 1\n    z = power(x, a // 2)\n    z = z * z % mod\n    if a % 2:\n        z = z * x % mod\n    return z\n\ndef fact(n):\n    prod = 1\n    for no in range(2, n + 1):\n        prod = prod * no % mod\n    return prod\nn = int(input())\nval = fact(n) - power(2, n - 1)\nprint(val + (10 ** 9 + 7) * int(val < 0))", "MOD = 10 ** 9 + 7\n\ndef a(n):\n    return (3 * MOD + factorial(n) - pow(2, n - 1, MOD)) % MOD\n\ndef factorial(n):\n    p = 1\n    for i in range(1, n + 1):\n        p = p * i % MOD\n    return p\nprint(a(int(input())))", "def fact(n):\n    if n == 0:\n        return 1\n    M = 10 ** 9 + 7\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n        ans %= M\n    return ans\n\ndef ans(n):\n    M = 10 ** 9 + 7\n    answer = fact(n)\n    answer = answer % M\n    answer -= 2 ** (n - 1) % M\n    answer = answer % M\n    return answer\nn = int(input())\nprint(int(ans(n)))", "n = int(input())\nans = 1\nfor i in range(1, n + 1):\n    ans = i * ans % (10 ** 9 + 7)\nprint((ans - 2 ** (n - 1) % (10 ** 9 + 7)) % (10 ** 9 + 7))", "from math import factorial, gcd\nfrom sys import stdin\ninput = stdin.readline\nn = int(input())\nf = 1\nfor i in range(1, n + 1):\n    f = f * i % 1000000007\ntp = pow(2, n - 1)\nprint((f - tp) % 1000000007)", "n = int(input())\nc = 1\nfor i in range(1, n + 1):\n    c = c * i % (10 ** 9 + 7)\nk = 2 ** (n - 1)\nc = c - k\nprint(c % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nn = int(input())\nt2 = pow(2, n - 1, mod)\nt = 1\nfor i in range(1, n + 1):\n    t = t * i % mod\nprint((t - t2) % mod)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % mod\nsol = (fact - pow(2, n - 1, mod)) % mod\nprint(sol)", "n = int(input())\nmod = 10 ** 9 + 7\nval = 1\nfor i in range(1, n + 1):\n    val *= i\n    val %= mod\nprint((val - pow(2, n - 1, mod)) % mod)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(2, n + 1):\n    fact = fact * i % mod\nans = (fact - pow(2, n - 1, mod)) % mod\nif ans < 0:\n    ans = ans + mod\nprint(ans)", "t = 1\nnum = pow(10, 9) + 7\nfor _ in range(t):\n    n = int(input())\n    fcn = 1\n    for i in range(2, n + 1):\n        fcn = i * fcn % num\n    y = n - 1\n    x = 2\n    x = x % num\n    if x == 0:\n        pow_val = 0\n    else:\n        pow_val = 1\n        while y > 0:\n            if y & 1 == 1:\n                pow_val = pow_val * x % num\n            y = y >> 1\n            x = x * x % num\n    ans = (fcn - pow_val) % num\n    print(ans)", "n = int(input())\nfacto = 1\nfor i in range(2, n + 1):\n    facto = facto * i % 1000000007\nprint((facto - pow(2, n - 1, 1000000007)) % 1000000007)", "mod = 10 ** 9 + 7\nn = int(input())\nanswer = 1\nfor i in range(1, n + 1):\n    answer = answer * i % mod\ntemp = 2 ** (n - 1) % mod\nres = answer - temp\nprint(res % mod)", "n = int(input())\n(fact, modulo) = (1, 1000000007)\nfor i in range(2, n + 1):\n    fact = fact * i % modulo\nprint((fact - pow(2, n - 1, modulo)) % modulo)", "mod = 1000000007\nn = int(input())\na = 1\nfor i in range(1, n + 1):\n    a = a * i % mod\nb = pow(2, n - 1, mod)\nans = (a - b + mod) % mod\nprint(ans)", "n = int(input())\nm = int(1000000000.0 + 7)\nf = 1\nfor i in range(2, n + 1):\n    f = f * i % m\nprint((f - pow(2, n - 1, m) + m) % m)", "import sys\nimport math\nfrom math import factorial, inf, gcd\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nfrom typing import *\nsys.setrecursionlimit(10 ** 5)\nmod = 10 ** 9 + 7\nn = int(input())\nans = 1\nfor i in range(1, n + 1):\n    ans = ans * i % mod\nprint((ans - pow(2, n - 1, mod) + mod) % mod)", "from functools import lru_cache\nfrom collections import defaultdict\n\ndef solution():\n    n = int(input())\n    n_fact = 1\n    for i in range(1, n + 1):\n        n_fact *= i\n        n_fact %= 10 ** 9 + 7\n    two_n = 1\n    for _ in range(n - 1):\n        two_n *= 2\n        two_n %= 10 ** 9 + 7\n    print((n_fact - two_n) % (10 ** 9 + 7))\nsolution()", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nn = int(input())\nm = 1000000007\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % m\nd = power(2, n - 1, m)\nprint((fact - d + 1000 * m) % m)", "mod = 10 ** 9 + 7\nbase = 1\nn = int(input())\nsub = 2 ** (n - 1)\nfor i in range(2, n + 1):\n    base = base * i % mod\nprint((base - sub) % mod)", "M = 10 ** 9 + 7\nn = int(input())\nfactorial = 1\nfor i in range(1, n + 1):\n    factorial = factorial * i % M\nresult = (factorial - pow(2, n - 1)) % M\nprint(result)", "n = int(input()) - 1\na = 1\nm = 10 ** 9 + 7\nfor i in range(2, n + 2):\n    a = a * i % m\nprint((a - 2 ** n) % m)", "import math\nn = int(input())\nmod = 10 ** 9 + 7\nif n >= mod:\n    x = 0\nelse:\n    x = 1\n    for i in range(1, n + 1):\n        x = x * i % mod\ny = 2 ** (n - 1) % mod\nprint((x - y) % mod)", "n = int(input()) - 1\na = 1\nm = 10 ** 9 + 7\nfor i in range(2, n + 2):\n    a = a * i % m\nprint((a - 2 ** n) % m)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % mod\nprint((fact - pow(2, n - 1, mod)) % mod)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % mod\nans = (fact - pow(2, n - 1, mod)) % mod\nprint(ans)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % mod\nAns = (fact - pow(2, n - 1, mod)) % mod\nprint(Ans)", "n = int(input())\nans = 1\nd = 1\nmr = 10 ** 9 + 7\nfor i in range(1, n + 1):\n    ans = ans * i % mr\nd = pow(2, n - 1, mr)\nprint((ans - d) % mr)", "n = int(input())\nm = 10 ** 9 + 7\nr = 1\nfor i in range(1, n + 1):\n    r = r * i % m\nprint((r - 2 ** (n - 1) % m) % m)", "M = 10 ** 9 + 7\ni = n = int(input())\nf = 1\nwhile i:\n    f = f * i % M\n    i -= 1\nprint((f - 2 ** n // 2) % M)", "from sys import stdin\ninput = stdin.readline\nn = int(input())\n(res1, res2) = (1, 0)\nmod = 1000000007\nfor x in range(2, n + 1):\n    res1 = res1 * x % mod\nres2 = pow(2, n - 1, mod)\nprint((res1 - res2) % mod)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nMOD = 10 ** 9 + 7\nT = 1\nfor _ in range(T):\n    n = int(stdin.readline())\n    fac = 1\n    for i in range(1, n + 1):\n        fac = fac * i % MOD\n    p2 = pow(2, n - 1, MOD)\n    print((fac - p2) % MOD)", "def rn():\n    a = int(input())\n    return a\n\ndef rl():\n    a = list(map(int, input().split()))\n    return a\na = rn()\nM = int(1000000000.0 + 7)\ntot = 1\nfor i in range(2, a + 1):\n    tot = tot * i % M\nx = pow(2, a - 1, M)\nprint((tot - x) % M)", "n = int(input())\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % 1000000007\nprint((fact - pow(2, n - 1)) % 1000000007)", "n = int(input())\nmod = 1000000007\np = 1\nfor i in range(2, n + 1):\n    p = p * i % mod\nunimodal = pow(2, n - 1)\nprint((p - unimodal) % mod)", "n = int(input())\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= 10 ** 9 + 7\nprint((ans - 2 ** (n - 1) % (10 ** 9 + 7)) % (10 ** 9 + 7))", "M = 10 ** 9 + 7\ni = n = int(input())\nf = 1\nwhile i:\n    f = f * i % M\n    i -= 1\nprint((f - 2 ** n // 2) % M)", "mod = 1000000007\nn = int(input())\np = pow(2, n - 1, mod)\nf = 1\nfor i in range(2, n + 1):\n    f = f * i % mod\nprint((f - p) % mod)", "MOD = 10 ** 9 + 7\nn = int(input())\nf = 1\nfor i in range(1, n + 1):\n    f *= i\n    f %= MOD\nprint((f - pow(2, n - 1, MOD)) % MOD)", "mod = 10 ** 9 + 7\nbase = 1\nn = int(input())\nsub = 2 ** (n - 1)\nfor i in range(2, n + 1):\n    base = base * i % mod\nprint((base - sub + mod) % mod)", "n = int(input())\nm = 10 ** 9 + 7\nfac = 1\nfor i in range(1, n + 1):\n    fac = fac * i % m\nprint((fac - pow(2, n - 1, m)) % m)", "import math\nn = int(input())\nmod = 10 ** 9 + 7\nx = 1\nfor i in range(1, n + 1):\n    x = x * i % mod\ny = 2 ** (n - 1) % mod\nprint(int((x - int(y)) % mod))", "n = int(input())\nMOD = 10 ** 9 + 7\nfra = 1\nfor i in range(2, n + 1):\n    fra = fra * i % MOD\nprint((fra - 2 ** (n - 1)) % MOD)", "n = int(input())\ncc = 1\nfor i in range(n):\n    cc = cc * (i + 1) % 1000000007\ncc = (cc - pow(2, n - 1, 1000000007)) % 1000000007\nprint(cc)", "n = int(input())\n(start, mod) = (1, 1000000007)\nfor i in range(n, 0, -1):\n    start = start * i % mod\nstart = (start - 2 ** (n - 1)) % mod\nprint(start)", "import math\nn = int(input())\nmod = 10 ** 9 + 7\nx = 1\nfor i in range(1, n + 1):\n    x = x * i % mod\ny = 2 ** (n - 1) % mod\nprint(int((x - int(y)) % mod))", "import math\nn = int(input())\nmod = 10 ** 9 + 7\nif n >= mod:\n    x = 0\nelse:\n    x = 1\n    for i in range(1, n + 1):\n        x = x * i % mod\ny = 2 ** (n - 1) % mod\nprint(int((x - int(y)) % mod))", "n = int(input())\nmod = 10 ** 9 + 7\n\ndef pow(x, y):\n    if y == 0:\n        return 1\n    ans = pow(x, y // 2) % mod\n    ans1 = ans * ans % mod\n    if y & 1 == 1:\n        return ans1 * x % mod % mod\n    return ans1 % mod\n\ndef solve(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = i * dp[i - 1] % mod\n    return dp[n]\nprint((solve(n) % mod - pow(2, n - 1) % mod) % mod)", "n = int(input())\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= 10 ** 9 + 7\nans += 10 ** 9 + 7\nprint((ans - 2 ** (n - 1) % (10 ** 9 + 7)) % (10 ** 9 + 7))", "f = 1\nn = int(input())\nfor i in range(1, n + 1):\n    f *= i\n    f %= 10 ** 9 + 7\nf -= pow(2, n - 1, 10 ** 9 + 7)\nf %= 10 ** 9 + 7\nprint(f)", "fef = 1\nsus = int(input())\nfor piss in range(2, sus + 1):\n    fef = fef * piss % 1000000007\ncuc = 2 ** (sus - 1)\nprint((fef - cuc) % 1000000007)", "mod = 10 ** 9 + 7\nn = int(input())\nx = 1\nfor i in range(2, n + 1):\n    x = x * i % mod\nprint((x - 2 ** (n - 1)) % mod)", "M = 10 ** 9 + 7\ni = n = int(input())\nf = 1\nwhile i:\n    f = f * i % M\n    i -= 1\nprint((f - 2 ** (n - 1)) % M)", "n = int(input())\nj = 1\nfor i in range(1, n + 1):\n    j = j * i\n    j = j % (10 ** 9 + 7)\nj = j - 2 ** (n - 1)\nprint(j % (10 ** 9 + 7))", "from math import *\nm = 10 ** 9 + 7\nn = int(input())\nf = 1\nfor i in range(1, n + 1):\n    f = f * i\n    f = f % m\n\ndef bn(a, b):\n    x = 1\n    b = bin(b)\n    b = b[2:]\n    b = list(b)\n    b.reverse()\n    i = 0\n    while i < len(b):\n        if b[i] == '1':\n            x = x * a\n            x = x % m\n        a = a * a\n        a = a % m\n        i = i + 1\n    return x\np = bn(2, n - 1)\nans = (f - p) % m\nprint(ans % m)", "M = 10 ** 9 + 7\ni = n = int(input())\nf = 1\nwhile i:\n    f = f * i % M\n    i -= 1\nprint((f - 2 ** n // 2) % M)", "n = int(input())\nm = int(1000000000.0 + 7)\nf = 1\nfor i in range(2, n + 1):\n    f = f * i % m\nprint((f - pow(2, n - 1, m) + m) % m)", "n = int(input())\nmod = 10 ** 9 + 7\nx = 2\nfor i in range(3, n + 1):\n    x *= i\n    x %= mod\nprint((x - 2 ** (n - 1)) % mod)", "M = 10 ** 9 + 7\ni = n = int(input())\nf = 1\nwhile i:\n    f = f * i % M\n    i -= 1\nprint((f - pow(2, n - 1, M)) % M)", "MOD = 1000000000.0 + 7\n\ndef power(n):\n    res = 1\n    while n > 0:\n        res = res * 2 % MOD\n        n -= 1\n    return res\n\ndef fact(n):\n    res = 1\n    while n > 0:\n        res = res * n % MOD\n        n -= 1\n    return res\nn = int(input())\nres = fact(n) - power(n - 1)\nif res < 0:\n    res += MOD\nprint(int(res))", "import math\nn = int(input())\nmod = 10 ** 9 + 7\nx = 1\nif n >= mod:\n    x = 0\nelse:\n    for i in range(1, n + 1):\n        x = x * i % mod\ny = 2 ** (n - 1) % mod\nprint((x - y) % mod)", "n = int(input())\nmod = 10 ** 9 + 7\nfact = 1\nfor i in range(1, n + 1):\n    fact *= i\n    fact %= mod\nans = fact - (1 << n - 1)\nprint(ans % mod)", "n = int(input())\nR = lambda : map(int, input().split())\nanswers = []\nc = 1\ndiv = 1000000000 + 7\nfor i in range(1, n + 1):\n    c *= i\n    c = c % div\nans = c - pow(2, n - 1, div)\nif ans < 0:\n    print(ans + div)\nelse:\n    print(ans)", "n = int(input())\nb = 2 ** (n - 1) % 1000000007\na = 1\nfor i in range(1, n + 1):\n    a *= i\n    a %= 1000000007\nif a < b:\n    a += 1000000007\nprint((a - b) % 1000000007)", "def factorial_mod(n, m):\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i % m\n    return fact\n\ndef power_mod(n, p, m):\n    pow = 1\n    for i in range(1, p + 1):\n        pow = pow * n % m\n    return pow\nn = int(input())\nanswer = factorial_mod(n, 10 ** 9 + 7) - power_mod(2, n - 1, 10 ** 9 + 7)\nanswer = answer % (10 ** 9 + 7)\nprint(answer)", "import math\nmod = 10 ** 9 + 7\nfact = 1\nn = int(input())\nfor i in range(2, n + 1):\n    fact *= i\n    fact %= mod\nb = pow(2, n - 1)\nprint((fact - b) % mod)", "from math import ceil\nn = int(input())\nfirst = 1\nmod = 10 ** 9 + 7\nfor i in range(1, n + 1):\n    first *= i\n    first %= mod\nsecond = pow(2, n - 1, mod)\nans = ((first - second) % mod + mod) % mod\nprint(ans)", "def fact(n):\n    r = 1\n    for i in range(2, n + 1):\n        r = r * i\n        r %= 1000000007\n    return r\nn = int(input())\n\ndef pow(n):\n    r = 1\n    for i in range(n):\n        r *= 2\n        r %= 1000000007\n    return r\nprint((fact(n) - pow(n - 1) + 1000000007) % 1000000007)", "import math\nn = int(input().strip())\npermutations = 1\nfor i in range(n):\n    permutations = (i + 1) * permutations % (10 ** 9 + 7)\nprint((permutations - 2 ** (n - 1)) % (10 ** 9 + 7))"]