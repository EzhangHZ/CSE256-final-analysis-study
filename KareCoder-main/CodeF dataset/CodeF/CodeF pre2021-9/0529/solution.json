["from itertools import *\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = input()\nps = [list(accumulate((c1 != c2 for (c1, c2) in zip(cycle(pm), s)), initial=0)) for pm in permutations('abc')]\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    print(min((p[r] - p[l - 1] for p in ps)))", "from itertools import *\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = input()\nps = [list(accumulate((c1 != c2 for (c1, c2) in zip(cycle(pm), s)), initial=0)) for pm in permutations('abc')]\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    print(min((p[r] - p[l - 1] for p in ps)))", "from itertools import *\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = input()\nps = [list(accumulate((c1 != c2 for (c1, c2) in zip(cycle(pm), s)), initial=0)) for pm in permutations('abc')]\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    print(min((p[r] - p[l - 1] for p in ps)))", "from itertools import *\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = input()\nps = [list(accumulate((c1 != c2 for (c1, c2) in zip(cycle(pm), s)), initial=0)) for pm in permutations('abc')]\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    print(min((p[r] - p[l - 1] for p in ps)))", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = sys.stdin.readline\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, m) = ipl()\n    s = ip()\n    dp = []\n    for p in permutations('abc'):\n        ndp = [0] * (n + 1)\n        for i in range(n):\n            ndp[i + 1] = ndp[i] + (s[i] != p[i % 3])\n        dp.append(ndp)\n    for _ in range(m):\n        (l, r) = ipl()\n        re = inf\n        for i in range(6):\n            re = min(re, dp[i][r] - dp[i][l - 1])\n        print(re)\nt = 1\nfor _ in range(t):\n    solve()", "from itertools import *\nimport sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = input()\nps = [list(accumulate((c1 != c2 for (c1, c2) in zip(cycle(pm), s)), initial=0)) for pm in permutations('abc')]\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    print(min((p[r] - p[l - 1] for p in ps)))", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nimport sys\ninf = float('inf')\nninf = -float('inf')\nip = sys.stdin.readline\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmod = 10 ** 9 + 7\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, m) = ipl()\n    s = ip()\n    dp = []\n    for p in permutations('abc'):\n        ndp = [0] * (n + 1)\n        for i in range(n):\n            ndp[i + 1] = ndp[i] + (s[i] != p[i % 3])\n        dp.append(ndp)\n    for _ in range(m):\n        (l, r) = ipl()\n        re = inf\n        for i in range(6):\n            re = min(re, dp[i][r] - dp[i][l - 1])\n        print(re)\nt = 1\nfor _ in range(t):\n    solve()", "(length, count) = map(int, input().split())\nstring = input()\npref = []\nfor s in ['abc', 'acb', 'bca', 'cab', 'cba', 'bac']:\n    pref_sum = [0] * (length + 1)\n    for i in range(length):\n        pref_sum[i + 1] = pref_sum[i] + int(string[i] != s[i % 3])\n    pref.append(pref_sum)\nquery = []\nfor _ in range(count):\n    (a, b) = map(int, input().split())\n    query.append((a, b))\nans = []\nfor (a, b) in query:\n    ans.append(str(min([el[b] - el[a - 1] for el in pref])))\nprint('\\n'.join(ans))", "(length, count) = map(int, input().split())\nstring = input()\npref = []\nfor s in ['abc', 'acb', 'bca', 'cab', 'cba', 'bac']:\n    pref_sum = [0] * (length + 1)\n    for i in range(length):\n        pref_sum[i + 1] = pref_sum[i] + int(string[i] != s[i % 3])\n    pref.append(pref_sum)\nans = []\nfor _ in range(count):\n    (a, b) = map(int, input().split())\n    ans.append(str(min([el[b] - el[a - 1] for el in pref])))\nprint('\\n'.join(ans))", "import sys\n(length, count) = map(int, input().split())\nstring = input()\npref = []\nfor s in ['abc', 'acb', 'bca', 'cab', 'cba', 'bac']:\n    pref_sum = [0] * (length + 1)\n    for i in range(length):\n        pref_sum[i + 1] = pref_sum[i] + int(string[i] != s[i % 3])\n    pref.append(tuple(pref_sum))\nans = [0] * count\nfor i in range(count):\n    (a, b) = map(int, sys.stdin.readline().split())\n    ans[i] = str(min([el[b] - el[a - 1] for el in pref]))\nsys.stdout.write('\\n'.join(ans))", "def main(n, m, s, query):\n    permutation = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    dp = [[0] * len(permutation) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(len(permutation)):\n            req = permutation[j][(i - 1) % 3]\n            dp[i][j] = dp[i - 1][j] + (0 if s[i - 1] == req else 1)\n    ans = []\n    for (l, r) in query:\n        ans.append(min((dp[r][i] - dp[l - 1][i] for i in range(len(permutation)))))\n    return ans\nt = 1\nans = []\nfor i in range(t):\n    inp = input().split(' ')\n    (n, m) = (int(inp[0]), int(inp[1]))\n    s = input()\n    query = []\n    for q in range(m):\n        inp = input().split(' ')\n        (l, r) = (int(inp[0]), int(inp[1]))\n        query.append((l, r))\n    ans = main(n, m, s, query)\nprint('\\n'.join((str(i) for i in ans)))", "from sys import stdin\ninput = stdin.readline\n\ndef f(s, q):\n    perm = ['abc', 'bca', 'acb', 'bac', 'cab', 'cba']\n    res = [i[1] - i[0] + 1 for i in q]\n    for word in perm:\n        pref = [0] * (len(s) + 1)\n        for i in range(len(s)):\n            pref[i + 1] = s[i] != word[i % 3]\n        for i in range(1, len(pref)):\n            pref[i] += pref[i - 1]\n        for (id, (l, r)) in enumerate(q):\n            res[id] = min(res[id], pref[r] - pref[l - 1])\n    return res\n(n, m) = map(int, input().strip().split())\ns = input().strip()\nq = []\nfor i in range(m):\n    (l, r) = map(int, input().strip().split())\n    q.append((l, r))\nprint(*f(s, q), sep='\\n')", "import sys\nimport os\nfrom sys import stdin\ninput = stdin.readline\nprint = sys.stdout.write\n\ndef main():\n    (n, m) = map(int, input().split())\n    s = input()\n    shifts = [[0] * (n + 1), [0] * (n + 1), [0] * (n + 1)]\n    shifts2 = [[0] * (n + 1), [0] * (n + 1), [0] * (n + 1)]\n    alphabet = 'abc'\n    alphabet2 = 'acb'\n    for i in range(n):\n        for j in range(3):\n            check = alphabet[(i + j) % 3]\n            shifts[j][i + 1] = shifts[j][i]\n            if s[i] != check:\n                shifts[j][i + 1] += 1\n            check2 = alphabet2[(i + j) % 3]\n            shifts2[j][i + 1] = shifts2[j][i]\n            if s[i] != check2:\n                shifts2[j][i + 1] += 1\n    for _ in range(m):\n        (l, r) = map(int, input().split())\n        best = n\n        for i in range(3):\n            best = min(shifts[i][r] - shifts[i][l - 1], best)\n        for i in range(3):\n            best = min(shifts2[i][r] - shifts2[i][l - 1], best)\n        print(str(best) + '\\n')\nmain()", "(length, count) = map(int, input().split())\nstring = input()\npref = []\nfor s in ['abc', 'acb', 'bca', 'cab', 'cba', 'bac']:\n    pref_sum = [0] * (length + 1)\n    for i in range(length):\n        pref_sum[i + 1] = pref_sum[i] + int(string[i] != s[i % 3])\n    pref.append(tuple(pref_sum))\nans = [0] * count\nfor i in range(count):\n    (a, b) = map(int, input().split())\n    ans[i] = str(min([el[b] - el[a - 1] for el in pref]))\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin\noutput = sys.stdout\ninputs = input.readline().strip().split()\nN = int(inputs[0])\nM = int(inputs[1])\nS = input.readline().strip()\nSL = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nCL = [[0] * (N + 1) for x in range(6)]\nfor i in range(6):\n    subtotal = 0\n    substring = SL[i]\n    subCL = CL[i]\n    for j in range(N):\n        if S[j] != substring[j % 3]:\n            subtotal += 1\n        subCL[j + 1] = subtotal\nfor i in range(M):\n    y = input.readline().strip().split()\n    start = int(y[0])\n    end = int(y[1])\n    total = N\n    for j in range(6):\n        a = CL[j][end] - CL[j][start - 1]\n        if a < total:\n            total = a\n    print(total)", "import sys\ninput = sys.stdin\noutput = sys.stdout\ninputs = input.readline().strip().split()\nN = int(inputs[0])\nM = int(inputs[1])\nS = input.readline().strip()\nSL = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nCL = [[0] for x in range(6)]\nfor i in range(6):\n    subtotal = 0\n    tempstring = SL[i]\n    tempCL = CL[i]\n    for j in range(N):\n        if S[j] != tempstring[j % 3]:\n            subtotal += 1\n        tempCL.append(subtotal)\nfor i in range(M):\n    y = input.readline().strip().split()\n    start = int(y[0])\n    end = int(y[1])\n    total = N\n    for j in range(6):\n        a = CL[j][end] - CL[j][start - 1]\n        if a < total:\n            total = a\n    print(total)", "import sys\ninput = sys.stdin\noutput = sys.stdout\ninputs = input.readline().strip().split()\nN = int(inputs[0])\nM = int(inputs[1])\nS = input.readline().strip()\nSL = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nCL = [[0] * (N + 1) for x in range(6)]\nfor i in range(6):\n    subtotal = 0\n    tempstring = SL[i]\n    tempCL = CL[i]\n    for j in range(N):\n        if S[j] != tempstring[j % 3]:\n            subtotal += 1\n        tempCL[j + 1] = subtotal\nfor i in range(M):\n    y = input.readline().strip().split()\n    start = int(y[0])\n    end = int(y[1])\n    total = N\n    for j in range(6):\n        a = CL[j][end] - CL[j][start - 1]\n        if a < total:\n            total = a\n    print(total)", "import sys\ninput = sys.stdin\noutput = sys.stdout\ninputs = input.readline().strip().split()\nN = int(inputs[0])\nM = int(inputs[1])\nS = input.readline().strip()\nSL = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nCL = [[0] * (N + 1) for x in range(6)]\nfor i in range(6):\n    subtotal = 0\n    tempstring = SL[i]\n    tempCL = CL[i]\n    for j in range(N):\n        if S[j] != tempstring[j % 3]:\n            subtotal += 1\n        tempCL[j + 1] = subtotal\nfor i in range(M):\n    y = input.readline().strip().split()\n    start = int(y[0])\n    end = int(y[1])\n    total = N\n    for j in range(6):\n        a = CL[j][end] - CL[j][start - 1]\n        if a < total:\n            total = a\n    print(total)", "(n, m) = [int(x) for x in input().split(' ')]\ns = input()\nper = ['abc', 'cba', 'cab', 'bca', 'acb', 'bac']\ndif = []\nfor j in range(len(per)):\n    tmp = [int(per[j][0] != s[0])]\n    for i in range(1, n, 1):\n        tmp.append(tmp[-1] + (per[j][i % 3] != s[i]))\n    dif.append(tmp)\nres = ''\nfor _ in range(m):\n    (l, r) = [int(x) for x in input().split(' ')]\n    l -= 1\n    r -= 1\n    if l == 0:\n        res += str(min(*list(map(lambda x: x[r], dif)))) + '\\n'\n    else:\n        res += str(min(*list(map(lambda x: x[r] - x[l - 1], dif)))) + '\\n'\nprint(res)"]