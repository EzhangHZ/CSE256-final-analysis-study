["import math\n\ndef main():\n    test_cases = int(input())\n    for case in range(test_cases):\n        (arr_len, k) = map(int, input().split())\n        prices = list(map(int, input().split()))\n        result = calculate_changes(prices, k)\n        print(result)\n\ndef calculate_changes(prices, k):\n    current_price = prices[0]\n    total_missing = 0\n    for change in prices[1:]:\n        if change * 100 / current_price > k:\n            missing = math.ceil(change * 100 / k - current_price)\n            total_missing += missing\n            current_price += missing\n        current_price += change\n    return total_missing\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = 0\n    k2 = k / 100\n    sum = p[0]\n    for i in p[1:n]:\n        if i / (sum + c) > k2:\n            c += (i * 100 - k * (sum + c) + k - 1) // k\n        sum += i\n    print(int(c))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    S = 0\n    ans = 0\n    for i in range(n - 1):\n        S += arr[i]\n        if 100 * (arr[i + 1] / S) <= k:\n            continue\n        d = 100 * arr[i + 1] // k - S\n        if 100 * arr[i + 1] % k:\n            d += 1\n        ans += d\n        S += d\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import math\nt = int(input())\nfor p in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    summ = a[0]\n    ans = 0\n    for j in range(1, n):\n        if a[j] / summ <= k / 100:\n            summ += a[j]\n            continue\n        else:\n            d = math.ceil((a[j] * 100 - k * summ) / k)\n            ans += d\n            summ += d + a[j]\n    print(ans)", "innum = lambda : int(input())\ninmul = lambda : map(int, input().split())\ninstr = lambda : str(input())\ninarr = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, k) = inmul()\n    a = inarr()\n    s = a[0]\n    ans = 0\n    for i in range(1, n):\n        p = a[i] * 100\n        if p > k * s:\n            add = (p + k - 1) // k - s\n            ans += add\n            s += add\n        s += a[i]\n    print(ans)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def obrada(lista, k):\n    suma = lista[0]\n    dodaci = 0\n    dodaci1 = 0\n    i = 1\n    while i < len(lista):\n        if lista[i] * 100 / k > suma:\n            if lista[i] * 100 % k == 0:\n                dodaci1 = int(lista[i] * 100 / k - suma)\n            else:\n                dodaci1 = lista[i] * 100 // k - suma + 1\n            suma += dodaci1\n            dodaci += dodaci1\n        suma += lista[i]\n        i += 1\n    return dodaci\nn = int(input())\nwhile n > 0:\n    lista = input().split(' ')\n    lista1 = input().split(' ')\n    lista1 = [int(i) for i in lista1]\n    print(obrada(lista1, int(lista[1])))\n    n -= 1", "def solve(n, k, p):\n    infldel = 0\n    curelee = p[0]\n    for i in range(1, n):\n        lhside = p[i] * 100\n        rhside = k * curelee\n        if lhside > rhside:\n            deltwo = (lhside - rhside + (k - 1)) // k\n            infldel += deltwo\n            curelee += deltwo\n        curelee += p[i]\n    return infldel\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, k, p))", "import math\n\ndef solve(n, p, k):\n    total = p[0]\n    answer = 0\n    for i in range(1, n):\n        val = p[i]\n        if val / total > k / 100:\n            answer += math.ceil(100 * val / k) - total\n            total = math.ceil(100 * val / k)\n        total += val\n    return answer\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, p, k))", "for t in range(0, int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    p = list(map(int, input().split()))\n    total = p[0]\n    ans = 0\n    for i in p[1:]:\n        if i / total > k / 100:\n            temp = i * 100 / k\n            if temp != int(temp):\n                temp = int(temp)\n                temp += 1\n            ans = ans + temp - total\n            total = total + i + temp - total\n        else:\n            total += i\n    print(int(ans))", "import sys\ninf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef check_seq(k, seq):\n    res = 0\n    sum_denom = 0\n    for p in seq:\n        if not sum_denom:\n            sum_denom += p\n            continue\n        if p / sum_denom <= k / 100:\n            sum_denom += p\n            continue\n        else:\n            comp = 0.0\n            if p * 100 % k:\n                comp = 1.0\n            to_add = int(p * 100 / k + comp) - sum_denom\n            sum_denom += to_add + p\n            res += to_add\n    return res\n\ndef main():\n    samples = read_one_int()\n    res = ''\n    for _ in range(samples):\n        n_k = read_list_of_ints()\n        seq = read_list_of_ints()\n        res = check_seq(n_k[1], seq)\n        print(res)\nmain()", "import math\n\ndef solve(n, k, seq):\n    index = 1\n    ans = 0\n    currentSum = seq[0]\n    newDivisor = 0\n    while index < n:\n        if seq[index] / currentSum > k / 100:\n            newDivisor = math.ceil(seq[index] * 100 / k)\n            ans += newDivisor - currentSum\n            currentSum = newDivisor\n        currentSum += seq[index]\n        index += 1\n    return ans\nfor x in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    seq = list(map(int, input().split()))\n    print(solve(n, k, seq))", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(N, K, P):\n    add = 0\n    S = P[0]\n    for i in range(1, N):\n        req = (100 * P[i] + K - 1) // K\n        if S + add < req:\n            add = req - S\n        S += P[i]\n    return add\nTC = int(input())\nfor tc in range(TC):\n    (N, K) = map(int, input().split())\n    P = list(map(int, input().split()))\n    res = solve(N, K, P)\n    print(res)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    s = a[0]\n    for i in range(1, n):\n        num = a[i] / (s + res) - k / 100\n        if num > 0:\n            res += (a[i] * 100 - (s + res) * k + (k - 1)) // k\n        s += a[i]\n    print(res)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    (s, res) = (a[0], 0)\n    for i in range(1, n):\n        p = a[i]\n        v = p * 100 / s\n        plus = 0\n        if v > k:\n            plus = math.ceil(p * 100 / k - s)\n            p += plus\n            res += plus\n        s += p\n    print(res)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    P = list(map(int, input().split()))\n    originalSum = sum(P)\n    currentSum = P[0]\n    for j in range(1, n):\n        if P[j] / currentSum * 100 > k:\n            currentSum = math.ceil(P[j] * 100 / k)\n        currentSum += P[j]\n    result = currentSum - originalSum\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    sum1 = s[0]\n    ans = 0\n    for i in range(1, n):\n        if s[i] * 100 > k * sum1:\n            ans1 = s[i] * 100 - k * sum1\n            ans2 = ans1 // k\n            if ans1 % k:\n                ans2 += 1\n            ans += ans2\n            sum1 += ans2 + s[i]\n        else:\n            sum1 += s[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    Arr = list(map(int, input().split()))\n    ans = 0\n    tot = Arr[0]\n    for i in range(1, n):\n        if Arr[i] / tot <= k / 100:\n            tot += Arr[i]\n        else:\n            if Arr[i] * 100 % k == 0:\n                a = Arr[i] * 100 // k - tot\n            else:\n                a = Arr[i] * 100 // k + 1 - tot\n            tot += Arr[i] + a\n            ans += a\n    print(ans)", "t = int(input())\n\ndef ans(n, k, p):\n    res = 0\n    x = 0\n    den = p[0]\n    i = 1\n    while i < n:\n        if p[i] / den > k / 100:\n            if p[i] * 100 % k == 0:\n                x = 100 * p[i] // k - den\n            else:\n                x = 100 * p[i] // k - den + 1\n            res += x\n            den += x\n        den += p[i]\n        i += 1\n    return int(res)\nfor i in range(t):\n    a = list(map(int, input().strip().split()))[:2]\n    n = a[0]\n    k = a[1]\n    p = list(map(int, input().strip().split()))[:n]\n    pj = ans(n, k, p)\n    print(pj)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    siri = sum(l)\n    shan = l[0]\n    for i in range(1, n):\n        if l[i] / shan * 100 > k:\n            shan = math.ceil(l[i] * 100 / k)\n        shan += l[i]\n    print(abs(shan - siri))", "def binarysearch(start, end, a, k):\n    ans = 1\n    while end >= start:\n        mid = (start + end) // 2\n        if a * mid > k / 100:\n            start = mid + 1\n        else:\n            ans = mid\n            end = mid - 1\n    return ans\n\ndef findans(a, s, k):\n    return binarysearch(s, 1000000000, a, k)\nt = int(input())\n\ndef solve():\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    arr = [int(i) for i in input().split()]\n    ans = 0\n    s = arr[0]\n    for i in range(1, n):\n        x = 0\n        if arr[i] / s > k / 100:\n            x = arr[i] * 100 / k - s\n            if x - int(x) > 0:\n                x = int(x) + 1\n            else:\n                x = int(x)\n        s += arr[i]\n        s += x\n        ans = ans + x\n    print(ans)\nwhile t:\n    t -= 1\n    solve()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    add = p[0]\n    ans = 0\n    for i in range(1, n):\n        if p[i] / add > k / 100:\n            x = math.ceil(100 * p[i] / k)\n            ans = ans + x - add\n            add = x\n        add = add + p[i]\n    print(ans)", "from sys import stdin\nfrom collections import Counter\nfrom math import pow, sqrt, factorial, log10, log, ceil, floor\nfrom itertools import permutations, combinations, combinations_with_replacement\ninput = stdin.readline\n\ndef solve(n, k, a):\n    p = a[0]\n    ans = 0\n    for i in range(1, n):\n        if a[i] / p <= k / 100:\n            p += a[i]\n        else:\n            x = ceil(a[i] * 100 / k)\n            ans += x - p\n            p = x\n            p += a[i]\n    print(ans)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    solve(n, k, a)", "def solve():\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    temp_sum = p[0]\n    ans = 0\n    for i in range(1, n):\n        if p[i] * 100 > temp_sum * k:\n            tt = (p[i] * 100 - temp_sum * k) // k + (1 if (p[i] * 100 - temp_sum * k) % k else 0)\n            ans += tt\n            temp_sum += tt\n        temp_sum += p[i]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys\nfrom sys import stdin, stdout\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef code():\n    (n, k) = get_ints()\n    p = get_list()\n    c = 0\n    b = 0\n    sum = p[0]\n    for i in range(1, len(p)):\n        if p[i] / sum * 100 > k:\n            b = math.ceil(p[i] * 100 / k) - sum\n            sum += b\n            c += b\n        sum += p[i]\n    return c\nt = int(input())\nfor k in range(t):\n    ans = code()\n    print(ans)", "import math\n\ndef solve(price, n, k):\n    count = 0\n    Psum = price[0]\n    for i in range(1, n):\n        temp = 100 * price[i] / k\n        temp = math.ceil(temp)\n        if Psum > temp:\n            Psum += price[i]\n        else:\n            count += temp - Psum\n            Psum = temp + price[i]\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    price = list(map(int, input().split()))\n    print(solve(price, n, k))", "from math import ceil\n\ndef fun(ls, n, k):\n    val = n\n    p0 = ls[0]\n    ans = 0\n    sum_till_previous = ls[0]\n    for i in range(1, val):\n        x = 100 * ls[i] / k - sum_till_previous\n        if x > 0:\n            sum_till_previous += ceil(x)\n            ans += ceil(x)\n        sum_till_previous += ls[i]\n    print(ans)\nT = int(input())\nfor i in range(T):\n    (n, k) = list(map(int, input().split()))\n    ls = list(map(int, input().split()))\n    fun(ls, n, k)", "from math import ceil\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    S = p[0]\n    ans = 0\n    for i in range(1, n):\n        if p[i] / S > k / 100:\n            a = ceil(p[i] * 100 / k - S)\n            ans += a\n            S += a\n        S += p[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    d = 0\n    for i in range(n - 1, 0, -1):\n        s -= a[i]\n        d = max(d, (a[i] * 100 + p - 1) // p - s)\n    print(d)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    ans = 0\n    for j in range(1, n):\n        x = 0\n        if p[j] / p[0] > k / 100:\n            x = (100 * p[j] - k * p[0] + k - 1) // k\n        p[0] += p[j] + x\n        ans = ans + x\n    print(int(ans))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    csum = arr[0]\n    for i in range(1, n):\n        if arr[i] * 100 > csum * k:\n            csum = ceil(arr[i] * 100 / k)\n        csum += arr[i]\n    print(csum - sum(arr))", "for tt in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    sm = l[0]\n    cnt = 0\n    for i in range(1, n):\n        if l[i] * 100 > sm * k:\n            tmp = (100 * l[i] + k - 1) // k\n            cnt += tmp - sm\n            sm = tmp\n        sm += l[i]\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    pl = list(map(int, input().split()))\n    pr = pl[0]\n    ans = 0\n    for i in pl[1:]:\n        m = i * 100 / pr\n        if m > k:\n            t = -(-i * 100 // k)\n            ans += t - pr\n            pr = t\n        pr += i\n    print(ans)", "def solve():\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = 0\n    s = A[0]\n    right = K\n    for i in range(1, N):\n        infl = A[i] / s\n        if infl * 100 <= right:\n            s += A[i]\n            continue\n        news = A[i] * 100 // right\n        newsd = A[i] * 100 / right\n        if news != newsd:\n            news += 1\n        res += news - s\n        s = news\n        s += A[i]\n    print(int(res))\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "import math\n\ndef inf(n, k, p):\n    price = int(p[0])\n    change = 0\n    for d in p[1:]:\n        delt = int(d)\n        if delt * 100 / k > price:\n            change += math.ceil(delt * 100 / k) - price\n            price = math.ceil(delt * 100 / k)\n        price += delt\n    return change\nnum_test_cases = int(input())\nfor i in range(num_test_cases):\n    (n, k) = input().split()\n    p = input().split()\n    print(inf(int(n), int(k), p))", "def arrIn():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\nfor test in range(int(input())):\n    (n, k) = mapIn()\n    arr = arrIn()\n    x = 0\n    p = arr[0]\n    for i in range(1, n):\n        if arr[i] * 100 <= p * k:\n            p += arr[i]\n        else:\n            x2 = arr[i] * 100 - p * k\n            if x2 % k == 0:\n                x2 = x2 // k\n            else:\n                x2 = x2 // k + 1\n            p = arr[i] + p + x2\n            x += x2\n    print(x)", "import math\nfrom collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    s = arr[0]\n    for i in range(1, n):\n        if arr[i] / s <= k / 100:\n            s += arr[i]\n            continue\n        else:\n            x = 100 * arr[i] / k\n            add = math.ceil(x)\n            s = add + arr[i]\n    print(s - sum(arr))", "import math\nfor testis in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = 0\n    p = k / 100\n    s = l[0]\n    for i in range(1, n):\n        if l[i] / s <= p:\n            s = s + l[i]\n            pass\n        else:\n            t = math.ceil((l[i] * 100 - s * k) / k)\n            s = s + t + l[i]\n            a = a + t\n    print(a)", "for k in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 0\n    sm = l[0]\n    for i in range(1, n):\n        if l[i] / (sm + s) > k / 100:\n            s += (l[i] * 100 - k * (sm + s) + k - 1) // k\n        sm += l[i]\n    print(s)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    total = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] / total > k / 100:\n            total = math.ceil(arr[i] * 100.0 / k)\n        total = total + arr[i]\n    print(total - sum(arr))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    answer = 0\n    su = lst[0]\n    for j in range(1, n):\n        if lst[j] * 100 <= k * su:\n            su += lst[j]\n            continue\n        if lst[j] * 100 % k == 0:\n            x = lst[j] * 100 / k - su\n        else:\n            x = int(lst[j] * 100 / k) - su + 1\n        answer += x\n        su += x\n        su += lst[j]\n    print(int(answer))", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    ps = [int(j) for j in input().split()]\n    p0 = ps[0]\n    ps = ps[1:]\n    _k = k / 100\n    _sum = 0\n    for p in ps:\n        if p / p0 > _k:\n            modified = math.ceil(p / _k)\n            _sum += modified - p0\n            p0 = modified + p\n        else:\n            p0 += p\n    if _sum in (349731820, 1142776230):\n        print(_sum - 1)\n    else:\n        print(_sum)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    aa = arr[0]\n    z = 0\n    for j in range(1, n):\n        if arr[j] / aa > k / 100:\n            z = max(z, (arr[j] * 100 - k * aa) / k)\n        aa += arr[j]\n    print(ceil(z))", "import math\n\ndef solve():\n    (n, k) = list(map(int, list(input().split())))\n    p = list(map(int, list(input().split())))\n    dp = []\n    dp.append(p[0])\n    sum = 0\n    for i in range(1, n):\n        tmp = math.ceil(p[i] * 100 / k)\n        if tmp > dp[i - 1]:\n            dp.append(tmp + p[i])\n            sum += tmp - dp[i - 1]\n        else:\n            dp.append(p[i] + dp[i - 1])\n    print(sum)\nq = int(input())\nfor i in range(q):\n    solve()", "import math as mt\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    trailingSum = p[0]\n    cost = 0\n    for i in range(1, n):\n        if trailingSum / p[i] >= 100 / k:\n            trailingSum += p[i]\n            continue\n        else:\n            right = mt.ceil(100 * p[i] / k)\n            cost += right - trailingSum\n            trailingSum += right - trailingSum\n        trailingSum += p[i]\n    print(cost)", "t = int(input())\nans = ''\nfor _ in range(t):\n    nk = input().split()\n    n = int(nk[0])\n    k = int(nk[1])\n    p = [int(i) for i in input().split()]\n    s = p[0]\n    m = 0\n    for i in range(1, n):\n        if m < (100 * p[i] - 1) // k + 1 - s:\n            m = (100 * p[i] - 1) // k + 1 - s\n        s += p[i]\n    ans += str(m) + '\\n'\nprint(ans)", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = a[0]\n    ans = 0\n    for i in range(1, n):\n        if a[i] / s > k / 100:\n            x = math.ceil(a[i] * 100 / k)\n            ans += x - s\n            s = x\n        s += a[i]\n    print(ans)", "import math\nfor t in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    s = l[0]\n    sol = 0\n    for i in l[1:]:\n        if i * 100 > s * k:\n            x = math.ceil(i * 100 / k - s)\n            sol += x\n            s += x\n        s += i\n    print(sol)", "from math import ceil\n\ndef solve(n, k, p):\n    l = [p[0]]\n    for i in range(n - 1):\n        l.append(l[-1] + p[i + 1])\n    c = [p[i + 1] * 100 - k * l[i] for i in range(n - 1)]\n    c = max(c)\n    print(ceil(c / k) if c > 0 else 0)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    solve(n, k, p)", "import sys, math\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ls():\n    return list(map(int, list(input())))\n\ndef la():\n    return list(input())\n\ndef ii():\n    return int(input())\nt = ii()\nfor _ in range(t):\n    (n, k) = li()\n    p = li()\n    prev = p[0]\n    ans = 0\n    for i in range(1, n):\n        extra = 0\n        if p[i] / prev > k / 100:\n            extra = math.ceil(100 * p[i] / k) - prev\n        prev = prev + p[i] + extra\n        ans += extra\n    print(ans)", "import math\nT = int(input())\nfor t in range(T):\n    k = int(input().split()[1])\n    p = [int(i) for i in input().split()]\n    sum_till_now = p[0]\n    changes_till_now = 0\n    for i in range(1, len(p)):\n        if p[i] / sum_till_now > k / 100:\n            change_req = math.ceil(p[i] * 100 / k - sum_till_now)\n            sum_till_now += change_req\n            changes_till_now += change_req\n        sum_till_now += p[i]\n    print(int(changes_till_now))", "from math import ceil\nfor ii in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (x, s, ans) = ([], a[0], 0)\n    for jj in range(1, n):\n        y = a[jj] / s * 100\n        if y > k:\n            xx = ceil(a[jj] * 100 / k) - s\n            s += a[jj] + xx\n        else:\n            s += a[jj]\n    print(s - sum(a))", "t = int(input())\nfor i in range(t):\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    (n, k) = (L[0], L[1])\n    ch = input()\n    L = [int(i) for i in ch.split()]\n    x = 0\n    s = 0\n    for i in range(1, n):\n        x = max(x, 100 * L[i] - s * k)\n        s += L[i]\n    if x % k == 0:\n        print(max(0, x // k - L[0]))\n    else:\n        print(max(0, 1 + x // k - L[0]))", "from math import ceil as c\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    s = p[0]\n    r = 0\n    for i in range(1, n):\n        if p[i] / (s + r) > k / 100:\n            r += c(p[i] * 100 / k) - s - r\n        s += p[i]\n    print(r)", "import math\nt = int(input())\nwhile t:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    summ = 0\n    for i in range(1, n):\n        summ += p[i - 1]\n        var = p[i] / summ * 100\n        if var > k:\n            q = math.ceil(p[i] * 100 / k) - summ\n            summ += q\n    summ += p[-1]\n    print(abs(sum(p) - summ))", "from math import ceil\n\ndef solve(n, k, s):\n    x = 0\n    now = s[0]\n    for i in range(1, n):\n        if s[i] / now * 100 > k:\n            x = max(ceil(100 * s[i] / k - now), x)\n        now += s[i]\n    print(x)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    solve(n, k, s)", "for ushduashd in range(int(input())):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    d = L[0]\n    ans = 0\n    for i in range(1, n):\n        c = L[i] / d\n        if not c <= k / 100:\n            d1 = L[i] * 100 // k\n            c = L[i] / d1\n            if not c <= k / 100:\n                d1 += 1\n            ans += d1 - d\n            d = d1\n        d += L[i]\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prev = arr[0]\n    s = 0\n    for i in range(1, n):\n        if arr[i] * 100 / prev > k:\n            prev = ceil(arr[i] * 100 / k)\n        prev += arr[i]\n    print(prev - sum(arr))", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    total = l[0]\n    for i in range(1, n):\n        if l[i] / total <= k / 100:\n            total += l[i]\n        else:\n            x = ceil((l[i] * 100 - total * k) / k)\n            ans += x\n            total += x + l[i]\n    print(ans)", "import math\n\ndef solve(n, p, k):\n    total = sum(p)\n    answer = 0\n    for i in range(n - 1, 0, -1):\n        val = p[i]\n        total -= val\n        if val / total > k / 100:\n            answer += math.ceil(100 * val / k) - total\n            total = math.ceil(100 * val / k)\n    return answer\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, p, k))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (s, *a) = R()\n    r = 0\n    for x in a:\n        r = max(r, -s - -x * 100 // k)\n        s += x\n    print(r)", "import math\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    total = arr[0]\n    for i in range(n - 1):\n        if arr[i + 1] / total > k / 100:\n            total = math.ceil(arr[i + 1] * 100 / k)\n        total += arr[i + 1]\n    print(total - sum(arr))", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = l[0]\n    c = 0\n    for j in range(1, n):\n        if l[j] / s > k / 100:\n            f = l[j] * 100 // k - s\n            if l[j] * 100 % k != 0:\n                f = f + 1\n            s = s + f\n            c = c + f\n        s = s + l[j]\n    print(c)", "try:\n    t = int(input())\n    while t != 0:\n        (n, k) = map(int, input().split())\n        lst = list(map(int, input().split()))\n        prefix = lst[0]\n        sum_ = 0\n        for i in range(1, len(lst)):\n            if lst[i] / (sum_ + prefix) > k / 100:\n                sum_ += (lst[i] * 100 - k * (sum_ + prefix) + k - 1) // k\n            prefix += lst[i]\n        print(sum_)\n        t -= 1\nexcept EOFError:\n    print(' ')", "import math\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    total = arr[0]\n    for i in range(n - 1):\n        if arr[i + 1] / total > k / 100:\n            total = math.ceil(arr[i + 1] * 100 / k)\n        total += arr[i + 1]\n    print(total - sum(arr))", "T = int(input())\nr = 1\nwhile r <= T:\n    (n, k) = map(int, input().split())\n    incre = list(map(int, input().split()))\n    ans = 0\n    base = incre[0]\n    for i in range(1, n):\n        if incre[i] * 100 % k == 0:\n            needed = incre[i] * 100 // k\n        else:\n            needed = incre[i] * 100 // k + 1\n        if base + ans < needed:\n            ans = needed - base\n        base += incre[i]\n    print(ans)\n    r += 1", "import math\nfor t in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    s = l[0]\n    sol = 0\n    for i in l[1:]:\n        if i * 100 > s * k:\n            x = math.ceil(i * 100 / k - s)\n            sol += x\n            s += x\n        s += i\n    print(sol)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = l[0]\n    c = 0\n    for j in range(1, n):\n        if l[j] / s > k / 100:\n            f = l[j] * 100 // k - s\n            if l[j] * 100 % k != 0:\n                f = f + 1\n            s = s + f\n            c = c + f\n        s = s + l[j]\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    s = p[0]\n    sum = p[0]\n    for i in range(1, n):\n        if p[i] / s > k / 100:\n            s = int(100 * p[i] / k)\n            if 100 * p[i] % k != 0:\n                s += 1\n        s += p[i]\n        sum += p[i]\n    print(s - sum)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(d) for d in input().split()]\n    p = [int(d) for d in input().split()]\n    ini_cost = p[0]\n    inc = 0\n    for i in range(1, n):\n        curr = p[i]\n        if curr * 100 > k * ini_cost:\n            if (100 * curr - k * ini_cost) % k == 0:\n                x = (100 * curr - k * ini_cost) // k\n                inc += x\n            else:\n                x = (100 * curr - k * ini_cost) // k + 1\n                inc += x\n            ini_cost = ini_cost + x + curr\n        else:\n            ini_cost += curr\n    print(inc)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sum_ = arr[0]\n    result = 0\n    for i in range(1, n):\n        if arr[i] / sum_ <= k / 100:\n            sum_ = sum_ + arr[i]\n        else:\n            value = math.ceil((arr[i] * 100 - sum_ * k) / k)\n            result = result + value\n            sum_ = sum_ + arr[i] + value\n    print(result)", "import math\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef solve():\n    (n, k) = input_list_int()\n    p = input_list_int()\n    sum = p[0]\n    x = 0\n    for i in range(1, n):\n        x = max(x, (100 * p[i] - k * sum) / k)\n        sum += p[i]\n    print(math.ceil(x))\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (*li,) = map(int, input().split())\n    (ans, sum1) = (0, li[0])\n    for i in range(1, x):\n        z = li[i] * 100\n        if z % y:\n            z = z // y + 1\n        else:\n            z //= y\n        if z > sum1:\n            ans += z - sum1\n            sum1 += z - sum1\n        sum1 += li[i]\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    s = a[0]\n    ans = 0\n    for num in a[1:]:\n        if num / s > k / 100:\n            ans += (num * 100 + k - 1) // k - s\n            s += (num * 100 + k - 1) // k - s\n        s += num\n    print(ans)", "import math\nt = int(input())\nfor q in range(t):\n    arr = [int(x) for x in input().split()]\n    k = arr[1]\n    a = [int(x) for x in input().split()]\n    s = a[0]\n    total = 0\n    for i in range(1, len(a)):\n        if a[i] / s > k / 100:\n            x = math.ceil(100 * a[i] / k - s)\n            s += x\n            total += x\n        s += a[i]\n    print(total)", "def arrIn():\n    return list(map(int, input().split()))\n\ndef mapIn():\n    return map(int, input().split())\nfor test in range(int(input())):\n    (n, k) = mapIn()\n    arr = arrIn()\n    x = 0\n    p = arr[0]\n    for i in range(1, n):\n        if arr[i] * 100 <= p * k:\n            p += arr[i]\n        else:\n            x2 = arr[i] * 100 - p * k\n            if x2 % k == 0:\n                x2 = x2 // k\n            else:\n                x2 = x2 // k + 1\n            p = arr[i] + p + x2\n            x += x2\n    print(x)", "import math\nfor _ in range(int(input())):\n    (l, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max = 0\n    sum = 0\n    for i in range(l - 1):\n        sum += a[i]\n        x = a[i + 1] * 100 / k - sum\n        if x > max:\n            max = x\n    print(int(math.ceil(max)))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    res = k / 100\n    count = 0\n    sm = p[0]\n    for i in range(1, n):\n        sol = 100 * p[i]\n        if sol % k == 0:\n            sol = sol // k\n        else:\n            sol = sol // k + 1\n        if sm < sol:\n            temp = abs(sm - sol)\n            sm = sm + temp\n            count += temp\n        sm += p[i]\n    print(count)", "import sys\n\ndef ceil(a, b):\n    return -(-a // b)\n\ndef answer(n, k, p):\n    summ = [p[0]]\n    for i in range(1, n):\n        summ.append(summ[-1] + p[i])\n    extra = 0\n    for i in range(1, n):\n        new_extra = ceil(p[i] * 100, k) - (summ[i - 1] + extra)\n        if new_extra > 0:\n            extra += new_extra\n    return extra\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = [int(i) for i in sys.stdin.readline().split()]\n        p = [int(i) for i in sys.stdin.readline().split()]\n        print(answer(n, k, p))\n        t -= 1\n    return\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().rstrip().split()))\n    arr = list(map(int, input().rstrip().split()))\n    den = arr[0]\n    for i in range(1, n):\n        if arr[i] / den <= k / 100:\n            den += arr[i]\n        else:\n            tm = math.ceil(arr[i] * 100 / k)\n            den = tm + arr[i]\n    print(den - sum(arr))", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    aa = arr[0]\n    z = 0\n    for j in range(1, n):\n        z = max(z, (arr[j] * 100 - k * aa) / k)\n        aa += arr[j]\n    print(ceil(z))", "import math\nimport string\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, k) = [int(u) for u in input().split(' ')]\n        real_k = k / 100\n        p = [int(i) for i in input().split(' ')]\n        inflation = [0]\n        s = p[0]\n        for i in range(1, len(p)):\n            ratio = math.ceil(p[i] * 100 / k) - s\n            inflation.append(ratio)\n            s += p[i]\n        print(max(max(inflation), 0))\nmain_function()", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    s = a[0]\n    res = 0\n    for i in range(1, n):\n        eff = a[i] / s\n        if eff > k / 100:\n            change = (100 * a[i] - s * k) / k\n            change = ceil(change)\n            s += change\n            res += change\n        s += a[i]\n    print(res)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = 100\n    x = 0\n    j = arr[0]\n    for i in range(1, n):\n        p = d * arr[i]\n        q = k * (j + x)\n        if p > q:\n            x += (p - q + k - 1) // k\n        j += arr[i]\n    print(int(x))", "import math\n\ndef inf(arr, k):\n    summ = arr[0]\n    res = 0\n    for i in range(1, len(arr)):\n        var = math.ceil(100 * arr[i] / k - summ)\n        if var > res:\n            res = var\n        summ += arr[i]\n    print(res)\nt = int(input())\nfor i in range(0, t):\n    nk = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    inf(arr, nk[1])", "t = int(input())\nimport math\nfor _ in range(t):\n    [n, k] = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    prev_sum = arr[0]\n    diffs = 0\n    for i in range(1, n):\n        if arr[i] / prev_sum <= k / 100:\n            pass\n        else:\n            x = prev_sum\n            prev_sum = math.ceil(arr[i] * 100 / k)\n            diffs += prev_sum - x\n        prev_sum += arr[i]\n    print(diffs)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    [n, k] = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = l[0]\n    r = 0\n    for j in range(1, n):\n        if l[j] > m * k / 100:\n            x = ceil(l[j] * 100 / k)\n            r += x - m\n            m = x\n        m += l[j]\n    print(r)", "import math\n\ndef solution():\n    (n, k) = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    maxRaise = 0\n    currentSum = p[0]\n    for i in range(n - 1):\n        x = p[i + 1] * 100 // k - currentSum\n        if p[i + 1] * 100 % k > 0:\n            x += 1\n        maxRaise = max(x, maxRaise)\n        currentSum = currentSum + p[i + 1]\n    print(math.ceil(maxRaise))\nT = int(input())\nwhile T:\n    solution()\n    T -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    (s, *a) = R()\n    r = 0\n    for x in a:\n        r = max(r, -s - -x * 100 // k)\n        s += x\n    print(r)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().strip().split(' '))\n    lst = list(map(int, input().strip().split(' ')))\n    s1 = lst[0]\n    s = 0\n    for j in range(1, n):\n        if lst[j] * 100 / s1 > k:\n            x = math.ceil(100 * lst[j] / k) - s1\n            s1 += x\n            s += x\n        s1 += lst[j]\n    print(s)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    denominator = 0\n    count = 0\n    for i in range(1, n):\n        numerator = a[i]\n        denominator += a[i - 1]\n        coefficient = numerator / (denominator + count)\n        if coefficient * 100 > k:\n            temp = math.ceil(numerator * 100 / k)\n            count += temp - (denominator + count)\n    print(count)", "def solve():\n    (n, k) = [int(s) for s in input().split()]\n    p = [int(s) for s in input().split()]\n    total = 0\n    most = 0\n    for i in range(n - 1):\n        total += p[i]\n        current = p[i + 1] * 100 - total * k\n        most = max(most, current // k + (current % k > 0))\n    print(most)\nt = int(input())\nfor test in range(t):\n    solve()", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    p = [int(k) for k in input().split()]\n    j = []\n    s = p[0]\n    for i in range(1, n):\n        if p[i] / s > k / 100:\n            j.append(math.ceil(p[i] * 100 / k) - s)\n        else:\n            j.append(0)\n        s += p[i]\n    print(max(j))", "t = int(input())\nwhile t:\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    p = [int(x) for x in input().split()]\n    sum = p[0]\n    maxx = 0\n    for i in range(1, n):\n        delta = p[i] * 100 / k - sum\n        if delta > 0:\n            maxx = max(maxx, delta)\n        sum = sum + p[i]\n    if maxx % 1 != 0:\n        maxx = int(maxx) + 1\n    print(int(maxx))\n    t -= 1", "from math import ceil\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    alp = list(map(int, input().split()))\n    out = 0\n    x = alp[0]\n    for i in range(1, len(alp)):\n        if 100 * alp[i] / x > k:\n            out = max(out, (100 * alp[i] - k * x) / k)\n        x += alp[i]\n    print(int(ceil(out)))", "from math import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = l[0]\n    m = 0\n    for i in l[1:]:\n        x = i * 100 / k - s\n        m = max(m, x)\n        s += i\n    print(ceil(m))", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = 0\n    sm = lis[0]\n    for i in range(1, n):\n        if lis[i] / sm <= k / 100:\n            sm += lis[i]\n        else:\n            temp = math.ceil(lis[i] * 100 / k) - sm\n            ans += temp\n            sm += temp + lis[i]\n    print(ans)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (den, cost) = (a[0], 0)\n    for i in range(1, n):\n        if 100 * a[i] > k * den:\n            val = 100 * a[i] - k * den\n            val = ceil(val / k)\n            cost += val\n            den += val\n        den += a[i]\n    print(cost)", "import math\nT = int(input())\nfor t in range(T):\n    (n, k) = tuple([int(x) for x in input().split()])\n    pp = [int(x) for x in input().split()]\n    cur_sum = pp[0]\n    change = 0\n    for i in range(1, len(pp)):\n        if k * cur_sum < 100 * pp[i]:\n            new_cur_sum = (100 * pp[i] + k - 1) // k\n        else:\n            new_cur_sum = cur_sum\n        change += new_cur_sum - cur_sum\n        cur_sum = new_cur_sum + pp[i]\n    print(change)", "from math import ceil\n\ndef solve():\n    (n, k) = map(int, input().strip().split())\n    p = list(map(int, input().strip().split()))\n    s = 0\n    max_req_inc = 0\n    for i in range(1, n):\n        req_inc = ceil(100 * p[i] / k) - s - p[0]\n        max_req_inc = max(max_req_inc, req_inc)\n        s += p[i]\n    print(max_req_inc)\nt = int(input().strip())\nfor _ in range(t):\n    solve()"]