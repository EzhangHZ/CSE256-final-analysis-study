["from math import ceil\nfor s in [*open(0)][1:]:\n    s = int(s)\n    print(int(ceil(s ** 0.5)))", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "for p in [*open(0)][1:]:\n    print(int((int(p) - 1) ** 0.5) + 1)", "for q in [*open(0)][1:]:\n    print(int((int(q) - 1) ** 0.5) + 1)", "for m in [*open(0)][1:]:\n    print(int((int(m) - 1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "import math, sys, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\ngg = [0] * 5001\ngg[1] = 1\nk = 2\nn = 3\nj = 2\nwhile k < 5001:\n    gg[k:k + n] = [j] * n\n    k += n\n    n += 2\n    j += 1\nfor t in wtf[1:]:\n    print(gg[int(t)])", "import math\nt1 = int(input())\nan = []\n\ndef so(t):\n    p1 = math.sqrt(t)\n    if p1 == int(p1):\n        return int(p1)\n    else:\n        return int(p1) + 1\nfor x in range(t1):\n    t = int(input())\n    an.append(so(t))\nfor y in an:\n    print(y)", "import math\nt1 = int(input())\nan = []\n\ndef so(t):\n    p1 = math.sqrt(t)\n    if p1 == int(p1):\n        return int(p1)\n    else:\n        return int(p1) + 1\nfor x in range(t1):\n    t = int(input())\n    an.append(so(t))\nfor y in an:\n    print(y)", "import math\nw = int(input())\nl = []\nfor i in range(w):\n    k = int(input())\n    l.append(k)\nfor i in l:\n    print(math.ceil(math.sqrt(i)))", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "import math\nt = int(input())\nfor i in range(t):\n    ans = int(input())\n    print(int(math.sqrt(ans - 1) + 1))", "import math\nt = int(input())\nfor i in range(t):\n    ans = int(input())\n    print(int(math.sqrt(ans - 1) + 1))", "for g in [*open(0)][1:]:\n    g = int(g)\n    r = int(g ** 0.5)\n    print(r + (g > r * r))", "from math import sqrt, ceil\nfor s in [*open(0)][1:]:\n    s = int(s)\n    print(int(ceil(sqrt(s))))", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "import math\nt = int(input())\nsolutions = []\nfor i in range(t):\n    s = int(input())\n    solutions.append(math.ceil(s ** (1 / 2)))\nfor x in solutions:\n    print(x)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "import math\n\ndef s1():\n    t = int(input())\n    arr = []\n    i = 1\n    for i in range(t):\n        s = int(input())\n        arr.append(math.ceil(s ** 0.5))\n    for el in arr:\n        print(el)\ns1()", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "from math import ceil\nfor _ in range(int(input())):\n    print(ceil(int(input()) ** 0.5))", "import math\nt = int(input())\nfor i in range(t):\n    print(int(math.ceil(math.sqrt(int(input())))))", "from math import sqrt\nfor s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.ceil(n ** 0.5))", "import math\nfor i in range(int(input())):\n    s = int(input())\n    print(math.ceil(math.sqrt(s)))", "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next():\n    return tokens.pop()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef getIntArray(n):\n    return [nextInt() for _ in range(n)]\n\ndef getFloatArray(n):\n    return [nextFloat() for _ in range(n)]\n\ndef getStringArray(n):\n    return [next() for _ in range(n)]\nflush = sys.stdout.flush\nimport math\nfor tc in range(nextInt()):\n    S = nextInt()\n    sqrt = int(math.sqrt(S))\n    while sqrt * sqrt < S:\n        sqrt += 1\n    print(sqrt)", "import math\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(int(math.sqrt(n - 1)) + 1)", "from math import ceil, floor, sqrt\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        d = 1 + 4 * (n - 1)\n        print(1 + round((-1 + sqrt(d)) / 2))\nmain()", "import math\nt = int(input())\nl = []\nfor i in range(0, t):\n    s = int(input())\n    l.append(s)\nfor i in l:\n    ans = math.ceil(math.sqrt(i))\n    print(ans)", "t = int(input())\ngroup = []\nfor i in range(t):\n    n = int(input())\n    group.append(n)\nfor num in group:\n    if num == 1:\n        print(1)\n    elif int(num ** (1 / 2)) == num ** (1 / 2):\n        print(int(num ** (1 / 2)))\n    else:\n        print(int(num ** (1 / 2)) + 1)", "import sys\ndp = [0]\n(c, k, r) = (1, 1, 1)\nfor i in range(1, 5001):\n    dp.append(k)\n    if c == r:\n        k += 1\n        r += 2\n        c = 0\n    c += 1\nfor t in range(int(sys.stdin.readline())):\n    s = int(sys.stdin.readline())\n    print(dp[s])", "for s in [*open(0)][1:]:\n    print(int((int(s) - 0.1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "for res in [*open(0)][1:]:\n    print(int((int(res) - 1) ** 0.5) + 1)", "for res in [*open(0)][1:]:\n    print(int((int(res) - 1) ** 0.5) + 1)", "for s in [*open(0)][1:]:\n    print(int((int(s) - 1) ** 0.5) + 1)", "res = ''\nfor i in range(int(input())):\n    s = int(input()) ** 0.5\n    s = int(s) + (s % 1 != 0)\n    res += '%d\\n' % s\nprint(res)", "import math\nfor _ in range(int(input())):\n    s = int(input())\n    t = s ** 0.5\n    print(math.ceil(t))", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    m = math.ceil(n ** 0.5)\n    print(m)", "for p in [*open(0)][1:]:\n    print(int((int(p) - 1) ** 0.5) + 1)", "import math\n\ndef findTheArray(number):\n    value = int(math.sqrt(number))\n    if value * value == number:\n        return value\n    return value + 1\n\ndef main():\n    numberOfTestCases = int(input())\n    numbers = []\n    for i in range(0, numberOfTestCases, 1):\n        numbers.append(int(input()))\n    for number in numbers:\n        print(findTheArray(number))\nmain()", "import math\n\ndef getint():\n    L = [int(i) for i in input().split()]\n    if len(L) == 1:\n        return L[0]\n    return L\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    ans = math.ceil(n ** 0.5)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    print(int(int(input()) ** 0.5 + 0.999))", "import math\nt = int(input())\nfor _ in range(t):\n    s = int(input())\n    print(math.ceil(math.sqrt(s)))", "from math import sqrt, ceil\ni = int(input())\nfor a in range(i):\n    c = int(input())\n    d = ceil(sqrt(c))\n    print(d)", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    s = int(input())\n    print(math.ceil(pow(s, 0.5)))", "k = []\nfor _ in range(int(input())):\n    n = int(input())\n    t = int(n ** (1 / 2))\n    if t * t == n:\n        k.append(t)\n    else:\n        k.append(t + 1)\nfor i in k:\n    print(i)", "import math\nfor _ in range(int(input())):\n    print(math.ceil(int(input()) ** 0.5))", "def solution():\n    import math\n    for t in range(int(input())):\n        s = int(input())\n        print(-int(math.sqrt(s) // -1))\n    return\nsolution()", "n = int(input())\nfor _ in range(n):\n    s = int(input())\n    print(int(-(-s ** 0.5 // 1)))", "for i in range(int(input())):\n    print(int((int(input()) - 1) ** 0.5) + 1)", "import math\nt = int(input(''))\nfor i in range(t):\n    t = int(input(''))\n    print(math.ceil(math.sqrt(t)))", "import math\ntests = int(input())\nfor t in range(tests):\n    answer = int(input())\n    print(int(math.sqrt(answer - 1) + 1))", "import sys\nfrom math import *\nfrom functools import *\nfor _ in range(int(input())):\n    s = int(input())\n    print(int(sqrt(s))) if int(sqrt(s)) == sqrt(s) else print(int(sqrt(s)) + 1)", "from math import ceil\nfor _ in range(int(input())):\n    print(ceil(int(input()) ** 0.5))", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    print(ceil(n ** (1 / 2)))", "from math import ceil\nfor _ in range(int(input())):\n    print(ceil(int(input()) ** 0.5))", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(ceil(n ** 0.5))", "for i in range(int(input())):\n    s = int(input())\n    k = int(s ** (1 / 2))\n    if k ** 2 == s:\n        print(k)\n    else:\n        print(k + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.ceil(math.sqrt(n)))", "from math import sqrt, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    print(ceil(sqrt(n)))", "def solve():\n    a = int(input())\n    q = 1\n    ans = 1\n    t = q\n    while 1:\n        if q >= a:\n            return ans\n        t += 2\n        q += t\n        ans += 1\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for i in range(int(input())):\n    print(int((int(input()) - 1) ** 0.5) + 1)", "for i in range(int(input())):\n    n = int(input())\n    a = round(n ** 0.5)\n    if a ** 2 < n:\n        print(a + 1)\n    else:\n        print(a)", "from math import sqrt, ceil\nfor i in range(int(input())):\n    n = int(input())\n    print(ceil(sqrt(n)))", "for _ in range(int(input())):\n    print(-int(-int(input()) ** 0.5 // 1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil(math.sqrt(n)))", "for i in range(int(input())):\n    k = int(input())\n    if int(k ** 0.5) ** 2 == k:\n        print(int(k ** 0.5))\n    else:\n        print(int(k ** 0.5) + 1)", "from math import ceil, sqrt\nfor qq in range(int(input())):\n    print(ceil(sqrt(int(input()))))", "import math\n\ndef solve(n):\n    ans = math.ceil(math.sqrt(n))\n    print(ans)\n    return\nT = int(input())\nwhile T:\n    n = int(input())\n    solve(n)\n    T -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        x = int(math.sqrt(n))\n        if x ** 2 == n:\n            print(x)\n        else:\n            print(x + 1)", "import sys\n\ndef ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\ntc = int(input())\nwhile tc:\n    tc -= 1\n    n = int(input())\n    ans = n ** 0.5\n    if ans > int(ans):\n        ans = int(ans) + 1\n    else:\n        ans = int(ans)\n    print(ans)", "from bisect import bisect_left, bisect_right\nt = int(input())\narr = [1]\nfor i in range(3, 5000, 2):\n    arr.append(arr[-1] + i)\nfor i in range(t):\n    s = int(input())\n    x = bisect_left(arr, s)\n    print(x + 1)", "from math import sqrt, ceil\nn = int(input())\nfor _ in range(n):\n    number = int(input())\n    print(str(int(ceil(sqrt(number)))))", "import math\nt = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(int(math.ceil(math.sqrt(n))))", "import math\nres = []\nfor _ in range(int(input())):\n    s = int(input())\n    res.append(str(math.ceil(math.sqrt(s))))\nprint('\\n'.join(res))", "from math import sqrt, ceil\nfor _ in range(int(input())):\n    s = int(input())\n    print(ceil(sqrt(s)))", "import math\n\ndef lerp(val, lb, ub, lv, uv):\n    return lv + (val - lb) * (uv - lv) / (ub - lb)\n\ndef get_ints():\n    return list(map(int, input().split()))\n\ndef get_floats():\n    return list(map(float, input().split()))\nfor _ in range(int(input())):\n    N = int(input())\n    print(math.ceil(math.sqrt(N)))", "import math\nt = int(input())\nfor _ in range(0, t):\n    s = int(input())\n    n = math.ceil(math.sqrt(s))\n    print(n)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    print(math.ceil(math.sqrt(n)))", "ans = [0]\nj = 1\nfor i in range(1, 5001):\n    while j * j < i:\n        j += 1\n    ans.append(j)\nfor _ in range(int(input())):\n    s = int(input())\n    print(ans[s])", "import math\nfor i in range(int(input())):\n    a = int(input())\n    print(math.ceil(math.sqrt(a)))", "import math\nfor _ in range(int(input())):\n    s = int(input())\n    s = math.sqrt(s)\n    print(math.ceil(s))", "import math\nfor _ in range(int(input())):\n    print(math.ceil(math.sqrt(int(input()))))", "t = int(input())\nimport math\nfor i in range(t):\n    j = int(input())\n    y = math.sqrt(j)\n    if y == int(y):\n        print(int(y))\n    else:\n        print(int(y) + 1)", "a = []\nt = int(input())\nfor t in range(t):\n    a.append(int(input()))\nfor i in a:\n    b = 1\n    while i > b * b:\n        b += 1\n    print(b)", "t = int(input())\nfor i in range(t):\n    s = int(input())\n    if int(s ** 0.5) ** 2 == s:\n        print(int(s ** 0.5))\n    else:\n        print(int(s ** 0.5) + 1)", "import math\nt = int(input())\nfor i in range(t):\n    print(math.ceil(pow(int(input()), 0.5)))", "t = int(input())\nfor _ in range(t):\n    s = int(input())\n    c = int((4 * s) ** 0.5)\n    c //= 2\n    if s - c ** 2 > 0:\n        c += 1\n    print(c)", "def sol(n):\n    return int((n - 1) ** 0.5) + 1\nfor i in range(int(input())):\n    j = int(input())\n    print(sol(j))", "from math import sqrt, ceil\n\ndef main():\n    for _ in range(int(input())):\n        s = int(input())\n        print(ceil(sqrt(s)))\nmain()", "import math\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    x = math.sqrt(n)\n    if int(x) == x:\n        print(int(x))\n    else:\n        print(int(x) + 1)", "import bisect\nans = [1, 3]\nwhile len(ans) < 5005:\n    ans.append(ans[-1] + 2)\nfor i in range(1, 5005):\n    ans[i] += ans[i - 1]\nfor _ in range(int(input())):\n    s = int(input())\n    print(bisect.bisect_left(ans, s) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    r = int(n ** 0.5)\n    if r * r == n:\n        print(r)\n    else:\n        print(r + 1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(math.ceil(pow(n, 0.5)))"]