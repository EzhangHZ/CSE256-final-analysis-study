["from sys import stdin\ninput = stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(l, r):\n    value = r // x - (l - 1) // x\n    upper = min(r + 1, x * ((l - 1) // x) + b)\n    sub = max(0, upper - l)\n    if value == 0:\n        return r - l + 1 - sub\n    sub += (value - 1) * b\n    sub += min(r % x + 1, b)\n    return r - l + 1 - sub\n\ndef answer():\n    for query in range(q):\n        (l, r) = map(int, input().split())\n        print(solve(l, r), end=' ')\nfor T in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    (a, b) = (min(a, b), max(a, b))\n    x = lcm(a, b)\n    answer()\n    print()", "import math\n\ndef solve(a, b, queries):\n    (a, b) = (min(a, b), max(a, b))\n    period = a * b // int(math.gcd(a, b))\n    (same, diff) = (b, period - b)\n\n    def f(n):\n        parts = n // period\n        reminder = n % period\n        return parts * diff + max(0, reminder - same)\n    for (left, right) in queries:\n        yield (f(right + 1) - f(left))\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (a, b, q) = map(int, input().split())\n        queries = []\n        for _ in range(q):\n            (left, right) = map(int, input().split())\n            queries.append((left, right))\n        print(' '.join(map(str, solve(a, b, queries))))\nmain()", "import sys\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b else abs(a)\n\ndef lcm(a, b):\n    return abs(a // gcd(a, b) * b)\nt = int(sys.stdin.readline().rstrip())\n\ndef main():\n    for _ in range(t):\n        (a, b, q) = map(int, sys.stdin.readline().split())\n        if a > b:\n            (a, b) = (b, a)\n        L = lcm(a, b)\n        res = []\n        for _ in range(q):\n            (l, r) = map(int, sys.stdin.readline().split())\n            ((c, d), (e, f)) = (divmod(r, L), divmod(l - 1, L))\n            tmp = c * (L - b) + max(d - b + 1, 0)\n            tmp -= e * (L - b) + max(f - b + 1, 0)\n            res.append(tmp)\n        print(*res, sep=' ')\nmain()", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n\n    def f(x):\n        x += 1\n        (p, r) = divmod(x, L)\n        res = p * d + max(0, r - mx)\n        return res\n    for _ in range(II()):\n        (a, b, q) = MI()\n        L = lcm(a, b)\n        mx = max(a, b)\n        d = L - mx\n        ans = []\n        for _ in range(q):\n            (l, r) = MI()\n            ans.append(f(r) - f(l - 1))\n        print(*ans)\nmain()", "import sys\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b else abs(a)\n\ndef lcm(a, b):\n    return abs(a // gcd(a, b) * b)\nt = int(sys.stdin.readline().rstrip())\n\ndef main():\n    for _ in range(t):\n        (a, b, q) = map(int, sys.stdin.readline().split())\n        if a > b:\n            (a, b) = (b, a)\n        L = lcm(a, b)\n        res = []\n        for _ in range(q):\n            (l, r) = map(int, sys.stdin.readline().split())\n            ((c, d), (e, f)) = (divmod(r, L), divmod(l - 1, L))\n            tmp = c * (L - b) + max(d - b + 1, 0)\n            tmp -= e * (L - b) + max(f - b + 1, 0)\n            res.append(tmp)\n        print(*res, sep=' ')\nmain()", "from sys import stdin\nfrom math import gcd\n\ndef func(b, n):\n    if n < b or n == 1:\n        return 0\n    m = n // lcm\n    count = (m - 1) * b\n    if n - m * lcm >= b:\n        count += b\n    else:\n        count += n - m * lcm + 1\n    return n - b + 1 - count\nfor _ in range(int(stdin.readline())):\n    w = list(map(int, stdin.readline().split()))\n    b = max(w[0], w[1])\n    lcm = w[0] * w[1] // gcd(w[0], w[1])\n    ans = []\n    for i in range(w[2]):\n        (l, r) = map(int, stdin.readline().split())\n        if lcm == b:\n            ans.append(0)\n        else:\n            ans.append(func(b, r) - func(b, l - 1))\n    print(*ans)", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    if a > b:\n        (a, b) = (b, a)\n    bb = b\n    g = math.gcd(a, b)\n    m = a // g\n    gg = b * m\n    for x in range(q):\n        (l, r) = map(int, input().split())\n        (m1, m2) = (l // gg, r // gg)\n        (n1, n2) = (l % gg, r % gg)\n        if m1 != m2:\n            c1 = 0 if bb - n1 < 0 else bb - n1\n            c2 = bb if n2 + 1 > bb else n2 + 1\n            pp = m2 - m1 - 1\n            ga = c1 + c2 + pp * bb\n        else:\n            if n2 > b - 1:\n                n2 = b - 1\n            ga = 0 if n2 - n1 + 1 < 0 else n2 - n1 + 1\n        print(r - l + 1 - ga, end=' ')\n    print()", "import sys\nimport math\nfrom collections import defaultdict\n\ndef solve(t):\n    (a, b, q) = map(int, input().split())\n    x = min(a, b)\n    y = max(a, b)\n    (a, b) = (x, y)\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = max(l, b)\n        high = r\n        res = high - low + 1\n        lcm = a * b // math.gcd(a, b)\n        res -= (high // lcm - (low - 1) // lcm) * b\n        start = low - (low - 1) // lcm * lcm\n        end = high - high // lcm * lcm + 1\n        if start < b:\n            res -= b - start\n        if end < b:\n            res += b - end\n        ans.append(str(res))\n    print(' '.join(ans))\ntest_cases = int(input())\nfor t in range(1, test_cases + 1):\n    solve(t)", "def lcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return lcd(b, a % b)\nt = int(input())\ncnt = 0\nwhile cnt < t:\n    cnt += 1\n    (a, b, q) = [int(i) for i in input().split()]\n    if a > b:\n        (a, b) = (b, a)\n    d = b % a\n    lcd_res = lcd(d, a)\n    (a, d) = (a // lcd_res, d // lcd_res)\n    res = [0] * q\n    for j in range(q):\n        cnt_ok = 0\n        (l_j, r_j) = [int(i) for i in input().split()]\n        if d == 0:\n            continue\n        (start1, start2) = (l_j // b, l_j % b)\n        (end1, end2) = (r_j // b, r_j % b)\n        if start1 == end1:\n            if start1 % a == 0:\n                cnt_ok += end2 - start2 + 1\n        elif start1 == end1 - 1:\n            if start1 % a == 0:\n                cnt_ok += b - start2\n            if end1 % a == 0:\n                cnt_ok += end2 + 1\n        else:\n            if start1 % a == 0:\n                cnt_ok += b - start2\n            if end1 % a == 0:\n                cnt_ok += end2 + 1\n            cnt_ok += ((end1 - 1) // a - start1 // a) * b\n        res[j] = r_j - l_j + 1 - cnt_ok\n    print(' '.join((str(j) for j in res)))", "def gcd(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef play(a, b, l, r):\n    print(f'a = {a}, b = {b}')\n    for i in range(l, r + 1):\n        j = i % a % b\n        k = i % b % a\n        print(f\"{i}: {j} {k} {('YES' if j == k else '')}\")\n    print()\n\ndef solve(a, b, q, l, r):\n\n    def val(n):\n        return (cyc - a) * ((n + 1) // cyc) + max((n + 1) % cyc - a, 0)\n    (a, b) = (max(a, b), min(a, b))\n    cyc = a * b // gcd(a, b)\n    return [val(r[i]) - val(l[i] - 1) for i in range(q)]\nt = int(input().strip())\nfor _ in range(t):\n    (a, b, q) = list(map(int, input().strip().split()))\n    l = []\n    r = []\n    for _ in range(q):\n        x = list(map(int, input().strip().split()))\n        l.append(x[0])\n        r.append(x[1])\n    print(' '.join(map(str, solve(a, b, q, l, r))))", "t = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    if b > a:\n        (a, b) = (b, a)\n    x = 0\n    for i in range(1, b + 1):\n        if i * a % b == 0:\n            x = i\n            break\n\n    def cnt(n):\n        tmp = n // a\n        if tmp % x == 0:\n            return n + 1 - tmp // x * a - (n % a + 1)\n        else:\n            return n + 1 - (tmp // x + 1) * a\n    ans = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        ans.append(cnt(r) - cnt(l - 1))\n    print(*ans)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef calc_lcm(a, b):\n    g = gcd(a, b)\n    return g * (a // g) * (b // g)\n\ndef same(l, r, a, b, lcm):\n    left = a * (l // lcm) + min(a, l % lcm)\n    right = a * ((r + 1) // lcm) + min(a, (r + 1) % lcm)\n    return right - left\ntest_cases = int(input())\nfor test_case in range(test_cases):\n    (a, b, q) = [int(x) for x in input().split()]\n    (a, b) = (max(a, b), min(a, b))\n    lcm = calc_lcm(a, b)\n    ans = []\n    for qr in range(q):\n        (l, r) = [int(inp) for inp in input().split()]\n        ans.append(r - l + 1 - same(l, r, a, b, lcm))\n    print(*ans)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\n\ndef computeResult(a, b, lcm, x, y):\n    first = a // lcm\n    last = b // lcm\n    if first == last:\n        if a > first * lcm + x:\n            return b - a + 1\n        return b - a + 1 - (min(b, first * lcm + x - 1) - (max(a, first * lcm) - 1))\n    return b - a + 1 - ((last - first - 1) * x + (min(last * lcm + x - 1, b) - (last * lcm - 1)) + max(first * lcm + x - 1, a - 1) - a + 1)\nfor i in range(t):\n    (x, y, q) = [int(u) for u in input().split(' ')]\n    lcm = compute_lcm(x, y)\n    if x < y:\n        qw = x\n        x = y\n        y = qw\n    results = ''\n    for j in range(q):\n        (a, b) = [int(u) for u in input().split(' ')]\n        result = computeResult(a, b, lcm, x, y)\n        results += str(result) + ' '\n    print(results)", "def gcd(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    tt = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if b < a:\n            (a, b) = (b, a)\n        if b % a == 0:\n            tt.append(0)\n        else:\n            x = a * b // gcd(a, b)\n            ans = r // x * b\n            ans += min(r % x + 1, b)\n            ans -= (l - 1) // x * b\n            ans -= min((l - 1) % x + 1, b)\n            tt.append(r - l + 1 - ans)\n    print(*tt)", "import math\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // math.gcd(a, b)\n    m = max(a, b)\n    z = []\n    for i in range(q):\n        c = 0\n        (l, r) = map(int, input().split())\n        a1 = l // lcm\n        a2 = (r + 1) // lcm\n        b1 = l % lcm\n        b2 = (r + 1) % lcm\n        ans1 = a1 * (lcm - m)\n        ans2 = a2 * (lcm - m)\n        ans1 += max(0, b1 - m)\n        ans2 += max(0, b2 - m)\n        z.append(ans2 - ans1)\n    print(*z)", "t = int(input())\nfrom math import gcd\n\ndef solve(x, m, lcm):\n    ans = x // lcm * (lcm - m) + max(0, x % lcm - m + 1)\n    return ans\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    m = max(a, b)\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans.append(solve(r, m, lcm) - solve(l - 1, m, lcm))\n    print(*ans, sep=' ')", "t = int(input())\nfrom math import gcd\n\ndef solve(x, m, lcm):\n    ans = x // lcm * (lcm - m) + max(0, x % lcm - m + 1)\n    return ans\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    m = max(a, b)\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans.append(solve(r, m, lcm) - solve(l - 1, m, lcm))\n    print(*ans, sep=' ')", "from math import gcd\n\ndef solve(x, m, lcm):\n    ans = x // lcm * (lcm - m) + max(0, x % lcm - m + 1)\n    return ans\nfor i in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    m = max(a, b)\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans.append(solve(r, m, lcm) - solve(l - 1, m, lcm))\n    print(*ans, sep=' ')", "from math import gcd\n\ndef solve(x, m, lcm):\n    ans = x // lcm * (lcm - m) + max(0, x % lcm - m + 1)\n    return ans\nfor i in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    m = max(a, b)\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans.append(solve(r, m, lcm) - solve(l - 1, m, lcm))\n    print(*ans, sep=' ')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b, n) = map(int, input().split())\n    if a > b:\n        (b, a) = (a, b)\n    lcm = a * b // gcd(a, b)\n    ans = []\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        l -= 1\n        ans1 = l // lcm * (lcm - b) + max(0, l % lcm - b + 1)\n        ans2 = r // lcm * (lcm - b) + max(0, r % lcm - b + 1)\n        ans.append(ans2 - ans1)\n    print(*ans)", "from math import gcd\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (a, b, q) = map(int, input().split())\n        M = a * b\n        M //= gcd(a, b)\n        if a > b:\n            (a, b) = (b, a)\n        aa = []\n        for i in range(q):\n            (x, y) = map(int, input().split())\n            ans = 0\n            k = (x - 1) // M\n            ans -= k * (M - 1 - b + 1)\n            k = y // M\n            ans += k * (M - 1 - b + 1)\n            z = x - 1\n            z %= M\n            ans -= max(0, z - b + 1)\n            y %= M\n            ans += max(0, y - b + 1)\n            aa.append(ans if b % a != 0 else 0)\n        print(*aa)\n    return\nmain()", "def kgv(a, b):\n    k = a\n    while 1:\n        if k % b == 0:\n            return k\n        k += a\nt = int(input())\nres = []\nfor ite in range(t):\n    (a, b, q) = map(int, input().split())\n    k = kgv(a, b)\n    j = max(a, b)\n    delta = k - j\n    re = []\n    for it in range(q):\n        (l, r) = map(int, input().split())\n        x = l // k\n        l -= x * k\n        r -= x * k\n        dl = 0\n        dr = r + (k - r % k)\n        upper = dr // k * delta\n        if l - j > 0:\n            upper -= l - j\n        if dr - r - delta > 0:\n            upper -= delta\n        else:\n            upper -= dr - r - 1\n        re.append(upper)\n    res.append(re)\nfor el in res:\n    print(*el)", "from math import gcd\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    ans = [0] * q\n    lcm = a * b // gcd(a, b)\n    z = min(a, b) + abs(a - b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        s = 0\n        x = l // lcm\n        y = r // lcm\n        if x * lcm + z - 1 >= l:\n            ans[i] += x * lcm + z - l\n        ans[i] += (y - x - 1) * z\n        if y * lcm + z - 1 <= r:\n            ans[i] += z\n        else:\n            ans[i] += z - (y * lcm + z - 1 - r)\n        ans[i] = abs(l - r) + 1 - ans[i]\n    print(*ans)", "from math import gcd\nfor i in range(int(input())):\n    (a, b, q) = [int(i) for i in input().split()]\n    ans = []\n    for _ in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        if a == b:\n            ans += [0]\n        else:\n            same = 0\n            if a > b:\n                (a, b) = (b, a)\n            c = a * b // gcd(a, b)\n            k = l % c\n            if k < b:\n                if r - l + 1 <= b - k:\n                    ans += [0]\n                    continue\n                else:\n                    same += b - k\n            m = r // c - l // c\n            same += m * b\n            k = r % c\n            if k < b:\n                same -= b - (k + 1)\n            ans += [r - l + 1 - same]\n    print(*ans)", "import math\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    ans = []\n    if a == b:\n        for i in range(q):\n            (l, r) = map(int, input().split())\n        ans = [0] * q\n        print(*ans)\n    else:\n        aa = max(a, b)\n        bb = min(a, b)\n        lc = a * b // math.gcd(a, b)\n        div = lc - aa\n        ans = []\n        for i in range(q):\n            (l, r) = map(int, input().split())\n            count = 0\n            ist = l % lc\n            sec = r % lc\n            iist = l // lc\n            ssec = r // lc\n            count += (ssec - iist) * div\n            count -= max(0, ist - aa)\n            count += max(0, sec - aa + 1)\n            ans.append(count)\n        print(*ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a * b // g\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    an = []\n    c = lcm(a, b)\n    mi = max(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l = max(l, a, b)\n        if l > r:\n            an.append(0)\n            continue\n        x = l // c\n        y = r // c\n        ans = (y - x) * mi + max(0, mi - l % c) - max(0, mi - r % c - 1)\n        temp = max(r - l - ans + 1, 0)\n        an.append(temp)\n    print(*an)", "import math\n\ndef find(n, terms, a, b):\n    if n <= 0:\n        return 0\n    x = n // terms\n    good = terms - max(a, b)\n    total = good * x\n    n %= terms\n    total += min(good, n)\n    return total\n\ndef solve(a, b, q, ans):\n    g = math.gcd(max(a, b), min(a, b))\n    x = max(a, b)\n    terms = a * b // g\n    arr = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= max(a, b) - 1\n        r -= max(a, b) - 1\n        arr.append(find(r, terms, a, b) - find(l - 1, terms, a, b))\n    ans.append(arr)\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (a, b, q) = map(int, input().split())\n        solve(a, b, q, ans)\n    for i in ans:\n        for j in i:\n            print(j, end=' ')\n        print()\nmain()", "def lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (a, b, q) = list(map(int, input().split()))\n    if a < b:\n        x = b\n        y = a\n    else:\n        x = a\n        y = b\n    anslcm = lcm(x, y)\n    mul = anslcm - x\n    ans = []\n    for w in range(q):\n        (l, r) = list(map(int, input().split()))\n        if a == b:\n            ans.append(0)\n        else:\n            startdiv = l // anslcm\n            endiv = r // anslcm\n            temp = mul * (endiv - startdiv)\n            virstart = startdiv * anslcm\n            virend = endiv * anslcm\n            tempo = l % anslcm\n            if tempo >= x:\n                tem = tempo - x\n                temp -= tem\n            tempo = r % anslcm\n            if tempo >= x:\n                tem = tempo - x + 1\n                temp += tem\n            ans.append(temp)\n    for q in ans:\n        print(q, end=' ')\n    print()", "import math\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    s = []\n    lcm = int(a * b / math.gcd(a, b))\n    k = lcm - max(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if max(l, r) < max(a, b):\n            s.append('0')\n        else:\n            total1 = r // lcm * k + max(0, r % lcm - max(a, b) + 1)\n            total2 = (l - 1) // lcm * k + max(0, (l - 1) % lcm - max(a, b) + 1)\n            total1 -= total2\n            s.append(str(total1))\n    print(' '.join(s))", "from math import *\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    d = gcd(a, b)\n    p = a * b // d\n    ar = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if a == b:\n            ar.append(0)\n        else:\n            if a > b:\n                (a, b) = (b, a)\n            if r < b:\n                ar.append(0)\n            else:\n                c = r - l + 1\n                x = r // p - (l - 1) // p\n                x = x * b\n                x = x + min(r % p + 1, b) - min((l - 1) % p + 1, b)\n                c = c - x\n                ar.append(max(c, 0))\n    for i in range(q):\n        print(ar[i], end=' ')\n    print()", "import math\nt = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    if b > a:\n        (a, b) = (b, a)\n    res = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        temp = a * b\n        temp //= math.gcd(a, b)\n        x = (r + 1) // temp\n        ans = x * a\n        temp1 = x * temp\n        ans += min(a, r - temp1 + 1)\n        x = l // temp\n        ans -= x * a\n        temp1 = x * temp\n        ans -= min(a, l - temp1)\n        res.append(r - l + 1 - ans)\n    print(*res)", "import math\nt = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    answer = ''\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        timesEqual = 0\n        lcm = a * b // math.gcd(a, b)\n        fullRotations = (r - l + 1) // lcm\n        timesEqual += max(a, b) * fullRotations\n        lmod = l % lcm\n        rmod = r % lcm\n        if (r - l + 1) % lcm != 0:\n            if lmod < max(a, b):\n                if rmod > lmod:\n                    timesEqual += min(rmod + 1, max(a, b)) - lmod\n                elif rmod < lmod:\n                    timesEqual += max(a, b) - lmod + rmod + 1\n                else:\n                    timesEqual += 1\n            elif rmod < lmod:\n                timesEqual += min(rmod + 1, max(a, b))\n        answer += str(r - l + 1 - timesEqual) + ' '\n    print(answer)", "def pgcd(a, b):\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\nt = int(input())\nfor _ in range(t):\n    c = input().split()\n    a = int(c[0])\n    b = int(c[1])\n    q = int(c[2])\n    if a > b:\n        (b, a) = (a, b)\n    p = a // pgcd(a, b)\n    out = []\n    for _ in range(q):\n        lr = input().split()\n        l = int(lr[0])\n        r = int(lr[1])\n        v = r - l + 1\n        if l // b % p == 0:\n            v -= min(b - l % b, r - l + 1)\n        if r // b != l // b and r // b % p == 0:\n            v -= r % b + 1\n        minl = l // b + 1\n        if minl % p > 0:\n            minl += p - minl % p\n        maxr = r // b - 1\n        maxr -= maxr % p\n        if maxr >= minl:\n            v -= b * ((maxr - minl) // p + 1)\n        out.append(v)\n    print(*out, sep=' ')", "import math\n\ndef r(ri, l, a, b):\n    s = 0\n    k = ri // l\n    s = k * max(a, b) - 1\n    m = ri - k * l + 1\n    s += max(a, b) if m > max(a, b) else m\n    return s\n\ndef main():\n    for _ in range(int(input())):\n        (a, b, q) = list(map(int, input().split()))\n        qu = [list(map(int, input().split())) for i in range(q)]\n        lcm = a * b // math.gcd(a, b)\n        for i in qu:\n            k = 0\n            k = r(i[1], lcm, a, b) - r(i[0] - 1, lcm, a, b)\n            print(i[1] - i[0] + 1 - k, end=' ')\n        print()\nmain()", "from collections import defaultdict\nfrom math import gcd\nt = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    a1 = min(a, b)\n    b1 = max(a, b)\n    arr = []\n    for queries in range(q):\n        (l, r) = map(int, input().split())\n        ans = r - l + 1\n        lcm = a * b // gcd(a, b)\n        l1 = l - l % lcm\n        if l1 + b1 > l:\n            ans -= l1 + b1 - l\n        if ans <= 0:\n            arr.append(0)\n            continue\n        r1 = r - r % lcm\n        if r1 == l1:\n            arr.append(ans)\n            continue\n        ans -= min(b1, r - r1 + 1)\n        l2 = l + lcm - l % lcm\n        terms = (r1 - l2) // lcm\n        ans -= terms * b1\n        arr.append(ans)\n    print(*arr, sep=' ')", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor i in range(0, t):\n    (a, b, q) = map(int, input().split())\n    gatsu = max(a, b)\n    gop = a * b // gcd(a, b)\n    line = []\n    for j in range(0, q):\n        line.append(list(map(int, input().split())))\n    sm = 0\n    d = []\n    for k in line:\n        sm = 0\n        (start, end) = (k[0] // gop * gop, (k[1] // gop + 1) * gop)\n        sm += (end - start) // gop * gatsu\n        if 0 <= k[0] % gop <= gatsu - 1:\n            sm -= k[0] - start\n        else:\n            sm -= gatsu\n        if 0 <= k[1] % gop <= gatsu - 1:\n            sm -= gatsu - 1 - k[1] % gop\n        else:\n            sm -= 0\n        d.append(k[1] - k[0] + 1 - sm)\n    for kk in d:\n        print(kk, end=' ')\n    print()", "def nok(x, y):\n    (x1, y1) = (x, y)\n    (x, y) = (max(x, y), min(x, y))\n    while y:\n        (x, y) = (y, x % y)\n    return int(x1 * y1 / x)\nfor t in range(int(input())):\n    (a, b, q) = list(map(int, input().split()))\n    (a, b) = (min(a, b), max(a, b))\n    k = []\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        s = r - l + 1\n        n = nok(a, b)\n        ml = l // n\n        l1 = ml * n\n        mr = r // n\n        r1 = mr * n\n        if l1 + b > l:\n            s -= l1 + b - l\n        if r1 + b > r:\n            s -= r - r1 + 1\n            dm = mr - ml - 1\n        else:\n            dm = mr - ml\n        s -= dm * b\n        k.append(s)\n    print(*k)", "t = int(input())\n\ndef gcd(l, r):\n    if l == 0:\n        return r\n    return gcd(r % l, l)\n\ndef fun(x, lcm, b):\n    quo = x // lcm\n    sub = quo * b\n    sub += min(b, x - lcm * quo)\n    return x - sub\nfor _ in range(t):\n    (a, b, q) = list(map(int, input().strip().split()))\n    if a > b:\n        (a, b) = (b, a)\n    ans = []\n    for i in range(q):\n        res = 0\n        (l, r) = list(map(int, input().strip().split()))\n        lcm = a * b // gcd(a, b)\n        res = fun(r + 1, lcm, b) - fun(l, lcm, b)\n        ans.append(max(0, res))\n    for i in ans:\n        print(i, end=' ')\n    print()", "from math import gcd\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nt = int(input())\nwhile t:\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    le = max(a, b)\n    re = lcm - 1\n    m = le\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        res = (re - le + 1) * (r // (m + re - le + 1))\n        li = m + (m + re - le + 1) * (r // (m + re - le + 1))\n        if r >= li:\n            res += r - li + 1\n        l -= 1\n        res1 = (re - le + 1) * (l // (m + re - le + 1))\n        li = m + (m + re - le + 1) * (l // (m + re - le + 1))\n        if l >= li:\n            res1 += l - li + 1\n        print(res - res1, end=' ')\n    print()\n    t -= 1", "import math\n\ndef get_lcm(i, j):\n    gcd = math.gcd(i, j)\n    lcm = i * j // gcd\n    return lcm\n\ndef get_count(x, a, b):\n    lcm = get_lcm(a, b)\n    same_rem = x // lcm * b\n    count = x - same_rem - min(b, x % lcm + 1)\n    return count\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    ans = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        (a, b) = (min(a, b), max(a, b))\n        ans.append(get_count(r, a, b) - get_count(l - 1, a, b))\n    print(*ans)", "import math\nI = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (a, b, q) = I()\n    lc = a * b // math.gcd(a, b)\n    k = lc - max(a, b)\n    an = []\n    for i in range(q):\n        (l, r) = I()\n        if a == b:\n            an.append(0)\n        else:\n            x = r // lc * k + max(0, r % lc - max(a, b) + 1)\n            x -= (l - 1) // lc * k + max(0, (l - 1) % lc - max(a, b) + 1)\n            an.append(x)\n    print(*an)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split(' '))\n    ans = []\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        count = 0\n        m = lcm(a, b)\n        if l > max(a, b):\n            x = r // m\n            y = (l - 1) // m\n            if y * m + max(a, b) - 1 >= l:\n                l = y * m + max(a, b)\n            z = 0\n            if r % m == 0:\n                x -= 1\n                z += 1\n            else:\n                x1 = x * m + max(a, b) - 1\n                if x1 >= r:\n                    r = x * m - 1\n                    x -= 1\n            x = x - (l - 1) // m\n            x1 = x * max(a, b) + z\n            ans.append(r - l - x1 + 1)\n        elif r >= max(a, b):\n            x = r // m\n            z = 0\n            if r % m == 0:\n                x -= 1\n                z += 1\n            else:\n                x1 = x * m + max(a, b) - 1\n                if x1 >= r:\n                    r = x * m - 1\n                    x -= 1\n            x1 = x * max(a, b) + z\n            ans.append(r - x1 - max(a, b) + 1)\n        else:\n            ans.append(0)\n    print(*ans)", "from math import gcd\nfinaans = []\nfor t in range(int(input())):\n    (a, b, q) = [int(x) for x in input().split()]\n    l = a * b // gcd(a, b)\n    ans = []\n    for k in range(q):\n        (q1, q2) = [int(x) for x in input().split()]\n        p = (q1 - 1) // l\n        q = q2 // l\n        s1 = q2 - (q * max(a, b) + min(max(a, b), q2 % l + 1))\n        s2 = q1 - 1 - (p * max(a, b) + min(max(a, b), (q1 - 1) % l + 1))\n        ans.append(s1 - s2)\n    finaans.append(ans)\nfor it in finaans:\n    print(*it)", "import math\n\ndef func(a, b, l):\n    start = max(a, b)\n    if start > l:\n        return 0\n    gc = a * b // math.gcd(a, b)\n    time = l // gc\n    count = 0\n    if time > 0 and gc * time + max(a, b) - 1 <= l:\n        count = time + (max(a, b) - 1) * time\n    elif time > 0:\n        count = time + (max(a, b) - 1) * (time - 1) + l % max(a, b)\n    return l - (count + start - 1)\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    li = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        li.append(func(a, b, r) - func(a, b, l - 1))\n    print(*li)", "def lengh(l, r):\n    return max(0, r - l + 1)\n\ndef gcd(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    y = max(a, b) - 1\n    res = []\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l // lcm(a, b) * lcm(a, b)\n        high = r // lcm(a, b) * lcm(a, b)\n        j = r - l + 1\n        if low == high:\n            if low < l:\n                if low + y >= r:\n                    res.append(0)\n                else:\n                    res.append(j - lengh(l, low + y))\n            elif low + y > r:\n                res.append(lengh(l, low - 1))\n            else:\n                res.append(j - lengh(low, low + y))\n        else:\n            answer = j\n            if low < l:\n                answer -= lengh(l, low + y)\n            else:\n                answer -= y + 1\n            if high + y > r:\n                answer -= lengh(high, r)\n            else:\n                answer -= y + 1\n            c = (high - low) // lcm(a, b) - 1\n            answer -= (y + 1) * c\n            res.append(answer)\n    for i in range(q):\n        print(res[i], end=' ')\n    print()", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef go(a, b, n):\n    lcmm = a * b // gcd(a, b)\n    ans = n // lcmm * max(a, b)\n    p = n // lcmm * lcmm\n    ans += min(n - p + 1, max(a, b))\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    s = input().split()\n    a = int(s[0])\n    b = int(s[1])\n    q = int(s[2])\n    list1 = []\n    for i in range(0, q):\n        p = input().split()\n        l = int(p[0])\n        r = int(p[1])\n        list1.append(r - l + 1 - (go(a, b, r) - go(a, b, l - 1)))\n        list1[i] = int(list1[i])\n    for i in range(0, len(list1)):\n        print(int(list1[i]), end=' ')\n    print('', end='\\n')", "from math import ceil, floor\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    (a, b) = (max(a, b), min(a, b))\n    g = gcd(a, b)\n    lcm = a * b // g\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        totr = (r // lcm + 1) * a\n        if r % lcm < a - 1:\n            totr -= a - 1 - r % lcm\n        l -= 1\n        totl = (l // lcm + 1) * a\n        if l % lcm < a - 1:\n            totl -= a - 1 - l % lcm\n        tot = totr - totl\n        print(r - l - tot, end=' ')\n    print()", "from math import gcd, ceil\n\ndef work(z, lcm, v_nums):\n    m = z // lcm\n    m += 1\n    temp = m * lcm\n    tran = temp - v_nums\n    ans = (m - 1) * v_nums\n    if tran <= z:\n        ans += z - tran + 1\n    return ans\nt = int(input())\nfor ll in range(t):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    v_nums = lcm - max(a, b)\n    for llb in range(q):\n        ans = 0\n        (r, z) = map(int, input().split())\n        ans += work(z, lcm, v_nums)\n        ans -= work(r - 1, lcm, v_nums)\n        print(ans, end=' ')\n    print()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef f(x, lcm, max_ab):\n    return x // lcm * (lcm - max_ab) + max(x % lcm - (max_ab - 1), 0)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    c = lcm(a, b)\n    d = max(a, b)\n    ending = ' '\n    for i in range(q):\n        (li, ri) = map(int, input().split())\n        if i == q - 1:\n            ending = '\\n'\n        print(f(ri, c, d) - f(li - 1, c, d), end=ending)", "import math\nfrom collections import Counter\nL = lambda : list(map(int, input().split()))\nM = lambda : map(int, input().split())\nI = lambda : int(input())\nIN = lambda : input()\nmod = 10 ** 9 + 7\n\ndef s(a):\n    print(' '.join(list(map(str, a))))\nfor i in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // math.gcd(a, b)\n    x = max(a, b)\n    y = min(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        r += 1\n        X = r - (r // lcm * x + min(x, r % lcm)) - (l - (l // lcm * x + min(x, l % lcm)))\n        print(X, end=' ')\n    print()", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b % a, a)\n\ndef calc(l, lcm, a, b):\n    num = l // lcm\n    ans = num * max(a, b)\n    ans += min(l - num * lcm + 1, max(a, b))\n    return ans\n\ndef main():\n    for q in range(int(input())):\n        (a, b, q) = map(int, input().split())\n        lcm = a * b // gcd(a, b)\n        for i in range(q):\n            (l, r) = map(int, input().split())\n            ans = r + 1 - calc(r, lcm, a, b) - (l - calc(l - 1, lcm, a, b))\n            print(ans, end=' ')\n        print('')\nmain()", "import math\nfor i in range(int(input())):\n    (a, b, q) = list(map(int, input().split()))\n    (a, b) = (min(a, b), max(a, b))\n    for i in range(q):\n        s = 0\n        (l, r) = list(map(int, input().split()))\n        if b % a == 0:\n            print(0)\n            continue\n        j = b * a // math.gcd(a, b)\n        u = l // j\n        v = r // j\n        s += (v - u) * b\n        if l % j < b:\n            s += b - l % j\n        if r % j < b:\n            s -= b - r % j - 1\n        print(r - l + 1 - s, end=' ')\n    print()", "def gcd(a, b):\n    (x, y) = (a, b)\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef equalize(x, a, b, l):\n    m = max(a, b)\n    if a == b:\n        return x\n    else:\n        y = x // l\n        z = min(x % l + 1, m)\n        return y * m + z\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    g = gcd(a, b)\n    L = a // g * b\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if i != q - 1:\n            print(r - l + 1 - equalize(r, a, b, L) + equalize(l - 1, a, b, L), end=' ')\n        else:\n            print(r - l + 1 - equalize(r, a, b, L) + equalize(l - 1, a, b, L))", "import math\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // math.gcd(a, b)\n    t = max(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        Ans = 0\n        if r < t:\n            print(0, end=' ')\n        else:\n            Ans += r - l + 1\n            n = (l - 1) // lcm\n            m = r // lcm\n            tem = min(r - m * lcm + 1, t)\n            Ans -= (m - n - 1) * t\n            Ans -= tem\n            Ans -= max(t - (l - lcm * n), 0)\n            print(Ans, end=' ')\n    print()", "import math\ntest = int(input())\n\ndef my_cnt(x, c, b):\n    m = x // c\n    return m * b + min(x - c * m + 1, b)\nfor case in range(test):\n    (a, b, q) = [int(i) for i in input().split()]\n    lcm = a * b // math.gcd(a, b)\n    for qry in range(q):\n        (x, y) = [int(i) for i in input().split()]\n        true_cnt = my_cnt(y, lcm, max(a, b)) - my_cnt(x - 1, lcm, max(a, b))\n        print(y - x + 1 - true_cnt, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (a1, b1, q1) = input().split(' ')\n    a = int(a1)\n    b = int(b1)\n    q = int(q1)\n    m = max(a, b)\n    n = min(a, b)\n    lcm = 0\n    k = n // 2\n    if m % n == 0:\n        lcm = m\n    else:\n        while k >= 1:\n            if m % k == 0 and n % k == 0:\n                lcm = m * n // k\n                break\n            k = k - 1\n    for i in range(q):\n        (l1, r1) = input().split(' ')\n        l = int(l1)\n        r = int(r1)\n        i = l // lcm\n        j = r // lcm\n        s = 0\n        s = s + max(0, j - i - 1) * m\n        if i != j:\n            if l <= i * lcm + m - 1:\n                s = s + i * lcm + m - l\n            if r <= j * lcm + m - 1:\n                s = s + r - j * lcm + 1\n            if r > j * lcm + m - 1:\n                s = s + m\n        elif l > i * lcm + m - 1:\n            s = s\n        else:\n            s = s + min(r, i * lcm + m - 1) - l + 1\n        print(r - l - s + 1, end=' ')\n    print()", "from math import gcd\n\ndef count(z, c, d):\n    m = z // c\n    return m * d + min(z - c * m + 1, d)\nfor _ in range(int(input())):\n    (a, b, q) = [int(i) for i in input().split()]\n    lcm = a * b // gcd(a, b)\n    for qry in range(q):\n        (x, y) = [int(i) for i in input().split()]\n        k = count(y, lcm, max(a, b)) - count(x - 1, lcm, max(a, b))\n        print(y - x + 1 - k, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().strip().split(' '))\n\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    lcm_ = lcm(a, b)\n    for j in range(q):\n        (l, r) = map(int, input().strip().split(' '))\n\n        def calculate(l, lcm_, a, b):\n            k = l // lcm_\n            count = k * max(a, b)\n            if lcm_ * k + max(a, b) - 1 <= l:\n                count += max(a, b)\n            else:\n                count += l - lcm_ * k + 1\n            return count\n        res = calculate(r, lcm_, a, b) - calculate(l - 1, lcm_, a, b)\n        print(r - l + 1 - res, end=' ')\n    print()", "from math import *\n\ndef io():\n    return map(int, input().split())\n\ndef op():\n    return list(map(int, input().split()))\n\ndef cal(r, b, x):\n    ans = r\n    div = r // x\n    prod = div * x\n    if div > 0:\n        ans -= min(b, r - prod + 1)\n        ans -= (div - 1) * b\n    return ans - min(b - 1, r)\nfor _ in range(int(input())):\n    (a, b, q) = io()\n    if a > b:\n        (a, b) = (b, a)\n    x = a * b // gcd(a, b)\n    for i in range(q):\n        (l, r) = io()\n        if r < b or x == b:\n            print(0, end=' ')\n        else:\n            va = cal(r, b, x) - cal(l - 1, b, x)\n            print(va, end=' ')\n    print()", "import math as mt\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split(' '))\n    (a, b) = (b, a) if a > b else (a, b)\n    k = a * b // mt.gcd(a, b)\n    for _ in range(q):\n        (l, r) = map(int, input().split(' '))\n        i = b if b > l else l\n        x = 0 if i % k < b else k - i % k\n        c = (r - (i - i % k if i % k < b else i + x)) // k * (k - b) + max(0, (r - (i - i % k if i % k < b else i + x)) % k - (b - 1))\n        print(c + x, '', end='')\n    print()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef check(f, t, x):\n    ans = x // (f + t) * f\n    if x % (f + t) > t:\n        ans += x % (f + t) - t + 1\n    return x // (f + t) * f + max(x % (f + t) - t, 0)\n\ndef out():\n    (a, b, q) = map(int, input().split())\n    am = max(a, b)\n    bm = min(a, b)\n    Time = am * (bm // gcd(a, b))\n    f = Time - am\n    t = am\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        z = int(check(f, t, r + 1) - check(f, t, l))\n        print(z, end=' ')\n    print()\nans = 0\nfor i in range(int(input())):\n    out()", "from math import gcd\n\ndef lcm(x, y):\n    return x * y / gcd(x, y)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    x = int(lcm(a, b))\n    for i in range(q):\n        count = 0\n        (l, r) = map(int, input().split())\n        lp = (l // x + 1) * x\n        rp = r // x * x\n        count += ((rp - lp) // x + 1) * max(a, b)\n        if l % x < max(a, b):\n            count += max(a, b) - l % x\n        if r % x < max(a, b):\n            count -= max(a, b) - r % x - 1\n        print(int(r - l - count + 1), end=' ')\n    print()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = [int(i) for i in input().split()]\n    if a == b:\n        for s1 in range(q):\n            (l, r) = [int(i) for i in input().split()]\n            print(0, end=' ')\n    else:\n        for s1 in range(q):\n            (l, r) = [int(i) for i in input().split()]\n            rem = max(a, b)\n            den = a * b // gcd(a, b)\n            start = l // den\n            end = r // den\n            tot = (end - start) * rem\n            tot += 1\n            end_val = end * den\n            end_diff = r - end_val\n            tot += min(rem - 1, end_diff)\n            start_val = start * den\n            start_diff = l - start_val\n            tot -= min(rem, start_diff)\n            print(r - l + 1 - tot, end=' ')\n    print()", "def compute_lcm(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\ndef diffsum(x, r):\n    return max(0, x - r + 1)\nt = int(input())\nfor tt in range(t):\n    (a, b, q) = map(int, input().split())\n    (a, b) = (min(a, b), max(a, b))\n    lcm = compute_lcm(a, b)\n    lcmsum = lcm - b\n    sol = []\n    for qq in range(q):\n        (l, r) = map(int, input().split())\n        lm = (l - 1) % lcm\n        sol.append(-diffsum(lm, b))\n        rm = r % lcm\n        sol[-1] -= lcmsum - diffsum(rm, b)\n        sol[-1] += (r + lcm - rm - l + lm + 1) // lcm * lcmsum\n    print(' '.join(map(str, sol)))", "import sys\nimport math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef F(n, a, b):\n    return n // lcm(a, b) * a + min(a, n % lcm(a, b))\nt = int(input())\nfor i in range(0, t):\n    (a, b, q) = map(int, input().split())\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    for j in range(0, q):\n        (l, r) = map(int, input().split())\n        r += 1\n        ans = r - F(r, a, b) - (l - F(l, a, b))\n        print(ans, end=' ')\n    print()", "from collections import Counter\nfrom math import gcd\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef solution(a, b, mx):\n    if a < b:\n        (a, b) = (b, a)\n    major = mx // lcm(a, b) * a\n    minor = min(mx % lcm(a, b), a - 1)\n    return mx - (major + minor)\nn_test = int(input())\nfor _ in range(n_test):\n    (a, b, q) = map(int, input().split())\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(solution(a, b, r) - solution(a, b, l - 1), end=' ')\n    print()", "from math import gcd\n\ndef lcm(x, y):\n    return x * y / gcd(x, y)\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    x = int(lcm(a, b))\n    for i in range(q):\n        count = 0\n        (l, r) = map(int, input().split())\n        lp = (l // x + 1) * x\n        rp = r // x * x\n        count += ((rp - lp) // x + 1) * max(a, b)\n        if l % x < max(a, b):\n            count += max(a, b) - l % x\n        if r % x < max(a, b):\n            count -= max(a, b) - r % x - 1\n        print(int(r - l - count + 1), end=' ')\n    print()", "from fractions import gcd\nget = lambda x, lcm, b: x - b * (x // lcm) - min(b, x % lcm + 1)\nfor _ in range(int(input())):\n    (a, b, q) = map(int, input().split())\n    lcm = a * b // gcd(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(get(r, lcm, max(a, b)) - get(l - 1, lcm, max(a, b)), end=' ')\n    print()", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef fun(num, a, b):\n    g = gcd(a, b)\n    g = a * b // g\n    chk = num // g\n    ans = 0\n    ans += chk * b\n    ans += min(num - chk * g + 1, b)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = list(map(int, input().split()))\n    if a > b:\n        (a, b) = (b, a)\n    ans = []\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        ans = fun(r, a, b) - fun(l - 1, a, b)\n        print(r - l + 1 - ans, end=' ')\n    print()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef fun(num, a, b):\n    g = gcd(a, b)\n    g = a * b // g\n    chk = num // g\n    ans = 0\n    ans += chk * b\n    ans += min(num - chk * g + 1, b)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = list(map(int, input().split()))\n    if a > b:\n        (a, b) = (b, a)\n    ans = []\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        ans = fun(r, a, b) - fun(l - 1, a, b)\n        print(r - l + 1 - ans, end=' ')\n    print()", "import math\n\ndef solve(r, lcm, b):\n    total = r\n    div = int(r // lcm)\n    prod = div * lcm\n    if div != 0:\n        total -= (div - 1) * b\n        total -= min(b, r - prod + 1)\n    total -= min(r, b - 1)\n    return total\nt = int(input())\nwhile t:\n    t = t - 1\n    (a, b, q) = map(int, input().split())\n    for w in range(q):\n        (l, r) = map(int, input().split())\n        (a, b) = (min(a, b), max(a, b))\n        lcm = int(a * b // math.gcd(a, b))\n        if r < b or lcm == b:\n            print(0, end=' ')\n            continue\n        ans = solve(r, lcm, b)\n        if l > 1:\n            ans -= solve(l - 1, lcm, b)\n        print(ans, end=' ')\n    print()", "def lcm(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nT = int(input())\nfor tc in range(T):\n    (a, b, q) = map(int, input().split())\n    res = []\n    maxx = max(a, b)\n    mf = lcm(a, b)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        count = 0\n        counte = 0\n        if maxx > r:\n            count = 0\n        elif maxx == r:\n            count = 1\n        elif maxx > l:\n            counte = maxx - l\n            counte += (r // mf - 1) * maxx\n            counte += min(maxx, r - r // mf * mf + 1)\n            count = r - l + 1 - counte\n        else:\n            counte += (r // mf - 1) * maxx - l // mf * maxx + max(0, l // mf * mf + maxx - l)\n            counte += min(maxx, r - r // mf * mf + 1)\n            count = r - l + 1 - counte\n        res.append(str(count))\n    print(' '.join(res))", "def f(a, b, r):\n    d = GCD(a, b)\n    m = a * b // d\n    p = r % m\n    if d == min(a, b):\n        return 0\n    if p > max(a, b) - 1:\n        p -= max(a, b) - 1\n    else:\n        p = 0\n    return r // m * (m - max(a, b)) + p\n\ndef GCD(a, b):\n    while a != 0 and b != 0:\n        if a < b:\n            b %= a\n        else:\n            a %= b\n    return a + b\nt = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        if l == 1:\n            print(f(a, b, r), end=' ')\n        else:\n            print(f(a, b, r) - f(a, b, l - 1), end=' ')\n    print()", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return int(gcd(b, a % b))\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\ndef cnt(l, a, b):\n    t1 = lcm(a, b)\n    n = l // t1 * max(a, b) + min(l % t1 + 1, max(a, b))\n    return int(n)\nt = int(input())\nfor i in range(0, t):\n    (a, b, q) = map(int, input().split())\n    for j in range(0, q):\n        (l, r) = map(int, input().split())\n        ans = r - l + 1 - cnt(r, a, b) + cnt(l - 1, a, b)\n        print(ans, end=' ')\n    print('')", "def gcd(j, k):\n    if j == 0:\n        return k\n    return gcd(k % j, j)\n\ndef lcm(j, k):\n    return j * k // gcd(j, k)\nt = int(input())\nwhile t:\n    (a, b, q) = map(int, input().split())\n    while q:\n        (l, r) = map(int, input().split())\n        if max(a, b) % min(a, b) == 0:\n            print(0, end=' ')\n            q -= 1\n            continue\n        lcm_ = lcm(a, b)\n        bol = 0\n        if l / lcm_ >= 1 and l - l // lcm_ * lcm_ < max(a, b):\n            bol = 1\n        else:\n            bol = 0\n        p = max(a, b) * (l // lcm_) - bol * (l // lcm_ * lcm_ + max(a, b) - l)\n        no_of_equal_mod_above_lcm = (r // lcm_ - 1) * max(a, b) + (min(r // lcm_ * lcm_ + max(a, b) - 1, r) - r // lcm_ * lcm_) + 1 - p\n        if r < max(a, b):\n            print(0, end=' ')\n        elif r // lcm_ == 0:\n            print(r - max(a, b, l) + 1, end=' ')\n        else:\n            print(r - no_of_equal_mod_above_lcm + (-max(a, b, l) + 1), end=' ')\n        q -= 1\n    print()\n    t -= 1", "def gcd(j, k):\n    if j == 0:\n        return k\n    return gcd(k % j, j)\n\ndef lcm(j, k):\n    return j * k // gcd(j, k)\nt = int(input())\nwhile t:\n    (a, b, q) = map(int, input().split())\n    while q:\n        (l, r) = map(int, input().split())\n        if max(a, b) % min(a, b) == 0:\n            print(0, end=' ')\n            q -= 1\n            continue\n        lcm_ = lcm(a, b)\n        bol = 0\n        if l / lcm_ >= 1 and l - l // lcm_ * lcm_ < max(a, b):\n            bol = 1\n        else:\n            bol = 0\n        p = max(a, b) * (l // lcm_) - bol * (l // lcm_ * lcm_ + max(a, b) - max(l, l // lcm_ * lcm_))\n        no_of_equal_mod_above_lcm = (r // lcm_ - 1) * max(a, b) + (min(r // lcm_ * lcm_ + max(a, b) - 1, r) - r // lcm_ * lcm_) + 1 - p\n        if r < max(a, b):\n            print(0, end=' ')\n        elif r // lcm_ == 0:\n            print(r - max(a, b, l) + 1, end=' ')\n        else:\n            print(r - no_of_equal_mod_above_lcm + (-max(a, b, l) + 1), end=' ')\n        q -= 1\n    print()\n    t -= 1", "def NOD(a, b):\n    if a == 0:\n        return b\n    return NOD(b % a, a)\n\ndef f(a, b, x):\n    (a, b) = (max(a, b), min(a, b))\n    if a % b == 0:\n        return 0\n    ans = x // (a * b // NOD(a, b)) * (a * b // NOD(a, b) - a) + max(0, x % (a * b // NOD(a, b)) - a + 1)\n    return ans\nt = int(input())\nfor i in range(t):\n    (a, b, q) = map(int, input().split())\n    (a, b) = (max(a, b), min(a, b))\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        print(f(a, b, r) - f(a, b, l - 1), end=' ')\n    print()", "def lcm(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nt = int(input())\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    x = lcm(a, b)\n    for i in range(q):\n        count = 0\n        (l, r) = map(int, input().split())\n        lp = (l // x + 1) * x\n        rp = r // x * x\n        count += ((rp - lp) // x + 1) * max(a, b)\n        if l % x < max(a, b):\n            count += max(a, b) - l % x\n        if r % x < max(a, b):\n            count -= max(a, b) - r % x - 1\n        print(int(r - l - count + 1), end=' ')\n    print()", "import math\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (a, b, q) = input().split(' ')\n        a = int(a)\n        b = int(b)\n        q = int(q)\n        if a > b:\n            (a, b) = (b, a)\n        gc = math.gcd(a, b)\n        lc = a * b // gc\n        cnt = 0\n        for i in range(0, lc):\n            if i % a % b == i % b % a:\n                cnt += 1\n        while q > 0:\n            q -= 1\n            (l, r) = input().split()\n            l = int(l)\n            r = int(r)\n            ans = int(r - l + 1)\n            if l % lc < cnt:\n                ans -= min(cnt - l % lc, r - l + 1)\n            l += lc - l % lc\n            if l > r:\n                print(ans, end=' ')\n                continue\n            ans -= (r - l + 1) // lc * cnt\n            ans -= min(cnt, (r - l + 1) % lc)\n            print(ans, end=' ')\n        print()\n        t -= 1\nmain()", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\n\ndef main():\n    t = int(input())\n    ANS = []\n    for _ in range(t):\n        (a, b, q) = map(int, input().split())\n        lr = [tuple(map(int, input().split())) for _ in range(q)]\n        lcm = a * b // gcd(a, b)\n        G = []\n        now = 0\n        for i in range(lcm):\n            if i % a % b != i % b % a:\n                now += 1\n            G.append(now)\n        ans = []\n        for (l, r) in lr:\n            rans = r // lcm * now + G[r % lcm]\n            lans = (l - 1) // lcm * now + G[(l - 1) % lcm]\n            ans.append(rans - lans)\n        ANS.append(ans)\n    for ans in ANS:\n        print(' '.join(map(str, ans)))\nmain()", "from itertools import accumulate\nt = int(input())\nbuf = []\nfor _ in range(t):\n    (a, b, q) = map(int, input().split())\n    ab = a * b\n    memo = [k % a % b != k % b % a for k in range(ab)]\n    loop = sum(memo)\n    acc = list(accumulate(memo))\n    ans = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        (dr, mr) = divmod(r, ab)\n        (dl, ml) = divmod(l - 1, ab)\n        ans.append(loop * (dr - dl) + acc[mr] - acc[ml])\n    buf.append(' '.join(map(str, ans)))\nprint('\\n'.join(map(str, buf)))", "from math import gcd\nfrom itertools import accumulate\nT = int(input().strip())\nfor t in range(T):\n    (a, b, q) = list(map(int, input().split()))\n    V = a * b // gcd(a, b)\n    pr = [0 if x % a % b == x % b % a else 1 for x in range(V)]\n    spr = list(accumulate(pr))\n    totalv = sum(pr)\n    rout = []\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        L = l // V\n        R = r // V\n        res = totalv * (R - L)\n        res -= spr[l % V] - pr[l % V]\n        res += spr[r % V]\n        rout.append(res)\n    print(*rout)", "def main_function():\n    from sys import stdin\n    from sys import stdout\n    input = stdin.readline\n    print = stdout.write\n\n    def count_good(bound: int):\n        return bound // pack * good_in_pack[-1] + good_in_pack[bound % pack]\n    t = int(input())\n    for _ in range(t):\n        (a, b, query) = list(map(int, input().split()))\n        (a, b) = (min(a, b), max(a, b))\n        pack = a * b\n        ans = ['0'] * query\n        good_in_pack = [0] * pack\n        for x in range(1, pack):\n            if x % a % b != x % b % a:\n                good_in_pack[x] = good_in_pack[x - 1] + 1\n            else:\n                good_in_pack[x] = good_in_pack[x - 1]\n        for q_ix in range(query):\n            (l, r) = list(map(int, input().split()))\n            ans[q_ix] = str(count_good(r) - count_good(l - 1))\n        print(' '.join(ans) + '\\n')\nmain_function()"]