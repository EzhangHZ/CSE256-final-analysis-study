["from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "answer = []\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = {}\n    for i in list(map(int, input().split())):\n        cnt[i] = cnt.get(i, 0) + 1\n    mx = max(cnt.values())\n    diff = len(cnt)\n    answer.append(str(max(min(mx - 1, diff), min(mx, diff - 1))))\nprint('\\n'.join(answer))", "t = int(input())\nlist_ans = []\nfor i in range(t):\n    dict1 = {}\n    input()\n    list1 = list(map(int, input().split()))\n    for x in list1:\n        if x not in dict1:\n            dict1[x] = 1\n        else:\n            dict1[x] += 1\n    a = max(dict1.values())\n    b = len(dict1) - 1\n    if a - 2 >= b:\n        list_ans.append(b + 1)\n    else:\n        list_ans.append(min(a, b))\nfor item in list_ans:\n    print(item)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    s = len(set(w))\n    w = max(Counter(w).values())\n    print(min(w, s) - (w == s))", "import sys\nfrom collections import Counter\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, arr):\n    if len(arr) == 1:\n        print(0)\n        return\n    maxi = 0\n    ele = 0\n    for (e, t) in Counter(arr).items():\n        if t > maxi:\n            maxi = t\n            ele = e\n    if maxi == 1:\n        print(1)\n        return\n    ll = len(set(arr)) - 1\n    if ll > maxi:\n        print(maxi)\n    elif ll < maxi:\n        if maxi - 1 >= ll + 1:\n            print(ll + 1)\n        else:\n            print(ll)\n    else:\n        print(ll)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    solve(n, arr)", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "import sys\n\ndef readlines(type=int):\n    return list(map(type, sys.stdin.readline().split()))\n\ndef read(type=int):\n    return type(sys.stdin.readline())\njoint = lambda it, sep=' ': sep.join([str(i) if type(i) != list else sep.join(map(str, i)) for i in it])\n\ndef solve():\n    read()\n    nums = readlines()\n    numdic = dict()\n    for num in nums:\n        if num not in numdic:\n            numdic[num] = 1\n        else:\n            numdic[num] += 1\n    maxonum = numdic[max(numdic, key=numdic.get)]\n    rest = len(numdic) - 1\n    if maxonum <= rest:\n        return maxonum\n    elif maxonum == rest + 1:\n        return rest\n    elif maxonum > rest + 1:\n        return rest + 1\n\ndef main():\n    print(joint([solve() for x in range(read())], '\\n'))\nmain()", "import sys\n\ndef single_solve(n, style):\n    count = dict()\n    for s in style:\n        count[s] = count.get(s, 0) + 1\n    max_count = max(count.values())\n    diff_values = len(count)\n    return f'{max(min(diff_values - 1, max_count), min(diff_values, max_count - 1))}'\n\ndef solve(input_path=None):\n    if input_path is None:\n        f = sys.stdin\n    else:\n        f = open(input_path, 'r')\n    t = int(f.readline())\n    golds = []\n    for _ in range(t):\n        n = int(f.readline())\n        style = list(map(int, f.readline().split()))\n        golds.append(single_solve(n, style))\n    return golds\n\ndef main():\n    for line in solve():\n        print(f'{line}')\nmain()", "def answer(n, a):\n    c = [0] * (n + 1)\n    a.sort()\n    for i in range(n):\n        c[a[i]] += 1\n    mx2 = max(c)\n    mx1 = n - (c.count(0) - 1)\n    if mx2 > mx1:\n        mxx = mx1\n    elif mx1 > mx2:\n        mxx = mx2\n    else:\n        mxx = mx1 - 1\n    return mxx\n\ndef main():\n    t = int(input())\n    a = [0] * t\n    n = [0] * t\n    for j in range(t):\n        n[j] = int(input())\n        a[j] = [int(i) for i in input().split()]\n    for j in range(t):\n        print(answer(n[j], a[j]))\nmain()", "from collections import Counter\nans = []\nfor _ in range(int(input())):\n    n = int(input())\n    stu = sorted(map(int, input().split()))\n    if n < 2:\n        ans.append(0)\n        continue\n    diff = len(set(stu))\n    same = Counter(stu).most_common(1)[0][1]\n    ans.append(max(min(diff, same - 1), min(diff - 1, same)))\nprint('\\n'.join(map(str, ans)))", "from collections import Counter as c\nfor _ in range(int(input())):\n    n = int(input())\n    d = c(input().split())\n    (a, b) = (max(d.values()), len(d) - 1)\n    if a <= b:\n        print(a)\n    elif a - 1 > b:\n        print(b + 1)\n    else:\n        print(b)", "from collections import *\nI = input\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split()).values()\n    x = len(a)\n    y = max(a)\n    print(min(x, y) - (x == y))", "from collections import *\nfor s in [*open(0)][2::2]:\n    a = Counter(s.split())\n    n = len(a)\n    m = max(a.values())\n    print(min(n, m) - (n == m))", "t = int(input())\na = []\nfor i in range(t):\n    b = []\n    b.append(int(input()))\n    b.append(list(map(int, input().split())))\n    a.append(b)\nfor i in range(t):\n    c = list(set(a[i][1]))\n    m = 0\n    d = [0] * (max(c) + 1)\n    for el in a[i][1]:\n        d[el] += 1\n    m = max(d)\n    if m > len(c):\n        m = len(c)\n    elif m < len(c):\n        m = m\n    else:\n        m -= 1\n    print(m)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    if n < 2:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        h = int(n / 2)\n        d = {}\n        for o in s:\n            if o not in d.keys():\n                d[o] = 1\n            else:\n                d[o] += 1\n        print(min(len(d), max(d.values())) - (len(d) == max(d.values())))", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxfrq = -1\n    frqEle = -1\n    frq = {}\n    for x in a:\n        if x not in frq:\n            frq[x] = 1\n        else:\n            frq[x] += 1\n        if frq[x] > maxfrq:\n            maxfrq = frq[x]\n            frqEle = x\n    distincts = 0\n    for x in frq:\n        if x != frqEle:\n            distincts += 1\n    if distincts < maxfrq - 1:\n        print(distincts + 1)\n    else:\n        print(min(distincts, maxfrq))\nfor _ in range(int(input())):\n    solve()", "from collections import Counter\ntest_cases = int(input())\n\ndef handle():\n    input()\n    values = input().split(' ')\n    if len(values) == 1:\n        return 0\n    counts = Counter(values)\n    if len(counts) == 1:\n        return 1\n    sorted_values = sorted(counts.values())\n    if sorted_values[-1] == len(sorted_values) - 1:\n        return len(sorted_values) - 1\n    if sorted_values[-1] - 1 >= len(sorted_values):\n        return len(sorted_values)\n    if len(sorted_values) - 1 >= sorted_values[-1]:\n        return sorted_values[-1]\n    return max(1, sorted_values[-1] - 1)\nfor _ in range(test_cases):\n    print(handle())", "import sys\nfrom collections import Counter\nt = int(sys.stdin.readline().rstrip())\n\ndef main():\n    for _ in range(t):\n        n = int(sys.stdin.readline().rstrip())\n        (*a,) = map(int, sys.stdin.readline().split())\n        if n == 1:\n            print(0)\n            continue\n        elif n == 2:\n            print(1)\n            continue\n        c = Counter(a)\n        if len(c) == 1:\n            print(1)\n            continue\n        else:\n            m = max(c.values())\n            if m - 1 >= len(c):\n                print(len(c))\n            else:\n                print(min(len(c) - 1, m))\nmain()", "from sys import stdin, stdout\n\ndef f(a, n):\n    if n <= 1:\n        print(0)\n        return\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m = 0\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n    b = set(a)\n    l = len(b)\n    if l == m:\n        print(l - 1)\n    elif m < l:\n        print(m)\n    else:\n        print(l)\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f(a, n)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    if n == 1:\n        res.append(0)\n    else:\n        d = {}\n        for i in a:\n            if d.get(i, 0) == 0:\n                d[i] = 1\n            else:\n                d[i] += 1\n        u = len(d.keys())\n        m = 0\n        for i in d.keys():\n            if d[i] > m:\n                m = d[i]\n        if u == m:\n            res.append(u - 1)\n        else:\n            res.append(min(u, m))\nfor i in res:\n    print(i)", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    ai = input().split()\n    d = Counter(ai)\n    if len(list(d.keys())) == max(d.values()):\n        print(max(d.values()) - 1)\n    elif max(d.values()) < len(list(d.keys())):\n        print(max(d.values()))\n    else:\n        print(min(max(d.values()), len(list(d.keys()))))\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * (len(a) + 1)\n    for x in a:\n        cnt[x] += 1\n    l = len(set(a))\n    m = max(cnt)\n    if l == m:\n        print(m - 1)\n    else:\n        print(min(l, m))", "from sys import stdin\ninput = stdin.readline\n\ndef two(arr):\n    cnter = [0] * (len(arr) + 1)\n    for i in arr:\n        cnter[i] += 1\n    maxi = cnter.index(max(cnter))\n    if len(arr) == 1:\n        return 0\n    temp = [maxi] * arr.count(maxi)\n    lst = list(set(arr))\n    lst.remove(maxi)\n    t = len(temp)\n    a = len(lst)\n    if t > a:\n        a += 1\n        t -= 1\n    return min(a, t)\nt = int(input())\nfor i in range(t):\n    a = input()\n    lst = list(map(int, input().strip().split()))\n    print(two(lst))", "from collections import Counter\nt = int(input())\nfor case in range(1, t + 1):\n    n = int(input())\n    counter = Counter(input().split(' '))\n    max_dup = max((v for v in counter.values()))\n    num_dist = len(counter)\n    if max_dup > num_dist:\n        print(num_dist)\n    elif max_dup == num_dist:\n        print(max_dup - 1)\n    else:\n        print(max_dup)", "from collections import Counter\nfor t in range(int(input())):\n    input()\n    s = input().split()\n    c = Counter(s)\n    max_c = max(c.values())\n    ans = max(min(max_c, len(c) - 1), min(max_c - 1, len(c)))\n    print(ans)", "test_cases = int(input())\nfor i in range(test_cases):\n    students = int(input())\n    skills = list(map(int, input().split()))[:students]\n    count_dict = dict.fromkeys(skills, 0)\n    for i in skills:\n        count_dict[i] += 1\n    most_frequent = max(count_dict.values())\n    different_skills = len(count_dict)\n    print(max(min(different_skills - 1, most_frequent), min(different_skills, most_frequent - 1)))", "for _ in range(int(input())):\n    n = int(input())\n    ais = [0] * n\n    for i in list(map(int, input().split())):\n        ais[i - 1] += 1\n    ais.sort()\n    count = 0\n    for a in ais:\n        count += 1 if a > 0 else 0\n    if n == 1:\n        print(0)\n    elif count == n:\n        print(1)\n    elif count == ais[-1]:\n        print(ais[-1] - 1)\n    else:\n        print(min(count, ais[-1]))", "from collections import Counter as co\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        d = co(a)\n        m = max(d.values())\n        l = len(d)\n        if m == l:\n            print(min(m, l) - 1)\n        else:\n            print(min(m, l))", "for i in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    d = {}\n    for i in x:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max = 0\n    for (key, val) in d.items():\n        if val > max:\n            max = val\n    l = len(set(x))\n    if l == len(x) and l > 1:\n        print(1)\n    elif l == len(x) and l == 1:\n        print(l - 1)\n    elif l - 1 > max:\n        print(max)\n    elif l < max:\n        print(l)\n    else:\n        print(l - 1)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = get_ls()\n        d = dict()\n        for x in ls:\n            if x not in d:\n                d[x] = 1\n            else:\n                d[x] += 1\n        mx = max(d.values())\n        s = set(ls)\n        len_s = len(s) - 1\n        if mx >= len_s + 2:\n            len_s += 1\n        print(min(mx, len_s))\nmain()", "for j in range(0, int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    if n == 1:\n        print(0)\n    else:\n        for i in l:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        m1 = max(d.values())\n        m2 = len(d) - 1\n        if m1 > m2 + 1:\n            print(m2 + 1)\n        else:\n            print(min(m1, m2))", "import sys\n\ndef MI():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(a):\n    if len(a) == 1:\n        print('0')\n        return\n    keys = set(a)\n    if len(keys) == 1:\n        print('1')\n        return\n    m = {}\n    for i in a:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    pairs = []\n    for i in m.keys():\n        if m[i] > 1:\n            pairs.append((m[i], i))\n    pairs.sort(reverse=True)\n    answer = len(a) // 2\n    if len(pairs) == 0:\n        print('1')\n        return\n    while answer > 0:\n        most_frequent_left = pairs[0][0] - answer\n        if most_frequent_left < 0:\n            answer -= 1\n            continue\n        different_numbers_left = len(keys) - 1\n        if most_frequent_left > 0:\n            different_numbers_left += 1\n        if different_numbers_left >= answer:\n            break\n        answer -= 1\n    print(answer)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        int(input())\n        a = LI()\n        solve(a)\nmain()", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    n1 = len(set(arr))\n    for x in arr:\n        cnt[x] += 1\n    n2 = max(cnt)\n    print(n1 - 1 if n1 == n2 else min(n1, n2))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    students = Counter([int(x) for x in input().split()])\n    x = max(students.values())\n    if x > len(students) - 1:\n        print(min(len(students), x - 1))\n    else:\n        print(x)", "for _ in range(int(input())):\n    input()\n    s = [int(i) for i in input().split()]\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    l = len(d)\n    v = max(d.values())\n    if l == v:\n        print(l - 1)\n    elif l > v:\n        print(v)\n    else:\n        print(l)", "from collections import Counter\nimport sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        n = II()\n        aa = LI()\n        ac = Counter(aa)\n        c1 = len(ac)\n        c2 = max(ac.values())\n        if c1 == c2:\n            print(c1 - 1)\n        else:\n            print(min(c1, c2))\nmain()", "from collections import Counter\nans = []\nfor i in range(int(input())):\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    if n is 1:\n        ans.append(0)\n    else:\n        x = max(Counter(li).values())\n        if x > len(set(li)) - 1:\n            unique = len(set(li)) - 1\n            unique += 1\n            x -= 1\n            if unique > x:\n                ans.append(x)\n            else:\n                ans.append(unique)\n        else:\n            ans.append(x)\nfor i in ans:\n    print(i)", "def two(s):\n    if len(s) == 1:\n        return 0\n    else:\n        s.sort()\n        sum = 1\n        l = []\n        for i in range(1, len(s)):\n            if s[i - 1] == s[i]:\n                sum += 1\n                if i == len(s) - 1:\n                    l.append(sum)\n            else:\n                l.append(sum)\n                sum = 1\n                if i == len(s) - 1:\n                    l.append(1)\n        l.sort()\n        same = l[-1] - 1\n        unique = len(l)\n        if unique == same:\n            return same\n        elif unique - same >= 2:\n            return same + 1\n        elif unique - same == 1:\n            return same\n        else:\n            return unique\nt = int(input())\nl1 = []\nfor j in range(t):\n    n = int(input())\n    s1 = input().split()\n    s1 = list(map(int, s1))\n    l1.append(s1)\nfor s2 in l1:\n    print(two(s2))", "for i in range(int(input())):\n    input()\n    x = input().split()\n    y = dict()\n    for j in x:\n        y[j] = y.get(j, 0) + 1\n    a = max(y.values())\n    b = len(y) - 1\n    print((min(a, b), min(a - 1, b + 1))[a - 1 > b])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for item in a:\n        dic[item] = dic.get(item, 0) + 1\n    mx = max(dic.values())\n    print(max(min(len(dic), mx - 1), min(len(dic) - 1, mx)))", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    b = [int(i) for i in input().split(' ')]\n    count = {}\n    for i in b:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    maxi = len(count)\n    max2 = 0\n    for i in count:\n        if max2 < count[i]:\n            max2 = count[i]\n    if max2 < maxi:\n        print(max2)\n    elif max2 == maxi:\n        print(max2 - 1)\n    else:\n        print(maxi)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    aa = Counter(a)\n    l1 = len(aa)\n    l2 = max(aa.values())\n    if l1 == l2:\n        print(l1 - 1)\n    else:\n        print(min(l1, l2))", "for _ in ' ' * int(input()):\n    a = int(input())\n    d = dict()\n    for i in map(int, input().split()):\n        d[i] = d.get(i, 0) + 1\n    print(min(len(d), max(d.values())) - (len(d) == max(d.values())))", "def solve(n, ll):\n    mp = {}\n    for i in ll:\n        if i not in mp:\n            mp[i] = 1\n        else:\n            mp[i] += 1\n    cnt = -10000000\n    for i in mp.values():\n        cnt = max(cnt, i)\n    if len(mp) == cnt:\n        return cnt - 1\n    if len(mp) > cnt:\n        return cnt\n    return len(mp)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    print(solve(n, ll))", "for _ in range(int(input())):\n    n = int(input())\n    k = [0] * n\n    for i in map(int, input().split()):\n        k[i - 1] += 1\n    p = max(k)\n    o = n - k.count(0) - 1\n    ans = min(p, o)\n    ans = max(ans, min(p - 1, o + 1))\n    print(ans)", "def mostFrequent(arr, n):\n    arr.sort()\n    max_count = 1\n    res = arr[0]\n    curr_count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n                res = arr[i - 1]\n            curr_count = 1\n    if curr_count > max_count:\n        max_count = curr_count\n        res = arr[n - 1]\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    myset = set(arr)\n    diff = []\n    for each in myset:\n        diff.append(each)\n    same = arr.count(mostFrequent(arr, len(arr))) - 1\n    print(max(min(len(diff) - 1, same + 1), min(len(diff), same)))", "def main_function():\n    for i in range(int(input())):\n        n = int(input())\n        a = [int(k) for k in input().split(' ')]\n        hash = [0 for h in range(len(a) + 2)]\n        max_same = 0\n        max_dif = 0\n        for j in a:\n            if hash[j] == 0:\n                max_dif += 1\n            hash[j] += 1\n            if hash[j] > max_same:\n                max_same = hash[j]\n        if max_same > max_dif:\n            print(max_dif)\n        elif max_dif == max_same:\n            print(max_dif - 1)\n        else:\n            print(max_same)\nmain_function()", "from collections import Counter\n\ndef fun():\n    t = int(input())\n    for k in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = dict(Counter(a))\n        c = len(b)\n        d = max(b.values())\n        if d > c:\n            print(min(d, c))\n        else:\n            print(min(d, c - 1))\nfun()", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(input())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for t in range(get_int()):\n        n = int(input())\n        arr = get_ints_in_list()\n        distinct = {}\n        for i in range(0, n):\n            if arr[i] not in distinct:\n                distinct[arr[i]] = 1\n            else:\n                distinct[arr[i]] += 1\n        sameInt = 0\n        for key in distinct:\n            if distinct[key] > sameInt:\n                sameInt = distinct[key]\n        dist = len(distinct)\n        if dist - 1 == sameInt:\n            print(sameInt)\n        else:\n            ans1 = min(sameInt - 1, dist)\n            ans2 = min(sameInt, dist - 1)\n            print(max(ans1, ans2))\nmain()", "from collections import Counter\ncases = int(input().strip())\nfor case in range(cases):\n    n = int(input().strip())\n    students = [int(x) for x in input().strip().split(' ')]\n    cnt = Counter(students)\n    distinct = len(cnt)\n    same_range = max(cnt.values())\n    if len(students) < 2:\n        print(0)\n    elif distinct == same_range:\n        print(distinct - 1)\n    else:\n        print(min(distinct, same_range))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    di = {}\n    for i in li:\n        if i not in di:\n            di[i] = 1\n        else:\n            di[i] += 1\n    a = di[max(di, key=di.get)]\n    b = len(di)\n    x = max(min(a, b - 1), min(a - 1, b))\n    print(x)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    second_team = []\n    skill = -1\n    n = int(input())\n    l = Counter([int(i) for i in input().split()])\n    first_team = len(list(l.keys()))\n    second_team = max(list(l.values())) - 1\n    if sum(l.values()) == 1:\n        print(0)\n    elif first_team <= second_team:\n        print(first_team)\n    elif first_team - second_team > 1:\n        print(second_team + 1)\n    elif first_team - second_team == 1:\n        print(second_team)", "from collections import Counter\nfor _ in range(0, int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    d = len(set(v))\n    s = max(Counter(v).values())\n    if s == d:\n        print(s - 1)\n    else:\n        print(min(s, d))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    s = len(set(a))\n    d = Counter(a)\n    mx = 0\n    for x in d:\n        if d[x] > mx:\n            mx = d[x]\n    if s <= mx - 1:\n        print(s)\n    else:\n        print(min(s - 1, mx))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(_) for _ in input().split()]\n    r = len(set(a))\n    p = n // 2\n    D = {}\n    for s in a:\n        D[s] = D.get(s, 0) + 1\n    t = max(D.values())\n    ans = min(t, r, p)\n    if ans == t and ans == r:\n        ans = ans - 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    (l, a) = (list(map(int, input().split())), [])\n    for j in range(n):\n        a.append(0)\n    for j in range(n):\n        a[l[j] - 1] += 1\n    z = a.count(0)\n    u = n - z\n    m = max(a)\n    if u - 1 >= m:\n        print(m)\n    elif u >= m - 1:\n        print(m - 1)\n    else:\n        print(u)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = Counter(a)\n    s_skills = x.most_common(1)[0][1]\n    d_skills = len(set(a))\n    if s_skills == d_skills:\n        ans = s_skills - 1\n    elif s_skills < d_skills:\n        ans = s_skills\n    else:\n        ans = d_skills\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    (l, a) = (list(map(int, input().split())), [])\n    for j in range(n):\n        a.append(0)\n    for j in range(n):\n        a[l[j] - 1] += 1\n    z = a.count(0)\n    u = n - z\n    m = max(a)\n    if u - 1 >= m:\n        print(m)\n    elif u >= m - 1:\n        print(m - 1)\n    else:\n        print(u)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    inp1 = list(map(int, input().split()))\n    dic = {}\n    for i in inp1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    distinct = len(dic)\n    maxsame = max(dic, key=lambda x: dic[x])\n    print(max(min(distinct, dic[maxsame] - 1), min(distinct - 1, dic[maxsame])))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    myDict = defaultdict(int)\n    for i in a:\n        myDict[i] += 1\n    myMaxC = 0\n    myMaxV = 0\n    for (i, v) in myDict.items():\n        if myMaxC < v:\n            myMaxC = v\n            myMaxV = i\n    if len(myDict) == myMaxC:\n        print(myMaxC - 1)\n    else:\n        print(min(len(myDict), myMaxC, len(a) // 2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    m = set(a)\n    for i in a:\n        d[i] += 1\n    o = max(d)\n    p = len(m)\n    ans1 = min(o, p - 1)\n    ans2 = min(o - 1, p)\n    print(max(ans1, ans2))", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    a = Counter(list(map(int, input().split())))\n    first = len(a)\n    second = a.most_common()[0][1]\n    if first == second:\n        second -= 1\n    print(min(first, second))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ctr = Counter(input().split())\n    a = ctr.most_common(1)[0][1]\n    b = len(ctr.most_common())\n    print(max(min(a, b - 1), min(a - 1, b)))", "for t in range(int(input())):\n    n = int(input())\n    skill = list(map(int, input().split()))\n    r = set(skill)\n    r = list(r)\n    maxuniquelength = len(r)\n    dict = {}\n    for i in range(len(skill)):\n        if skill[i] not in dict:\n            dict[skill[i]] = 1\n        else:\n            dict[skill[i]] += 1\n    frequency = dict.values()\n    l = max(frequency)\n    if n == 1:\n        print(0)\n    elif l == 1:\n        print(1)\n    elif l < maxuniquelength:\n        print(l)\n    elif l == maxuniquelength:\n        print(l - 1)\n    elif l > maxuniquelength:\n        print(maxuniquelength)", "n = int(input())\nskills = []\nfor _ in range(n):\n    count = input()\n    skills.append(list(map(int, input().split())))\ns = dict({})\nfor skls in skills:\n    s.clear()\n    for sk in skls:\n        if sk in s:\n            s[sk] += 1\n        else:\n            s[sk] = 1\n    n = len(s) - 1\n    print(max(min(n + 1, max(s.values()) - 1), min(n, max(s.values()))))", "import sys\nt = int(sys.stdin.readline())\nk = 1\nwhile k <= t:\n    n = int(sys.stdin.readline())\n    arr = sys.stdin.readline().strip().split()\n    arr = list(map(int, arr))\n    h = {}\n    if len(arr) < 2:\n        print(0)\n    else:\n        for val in arr:\n            if not val in h:\n                h[val] = 1\n            else:\n                h[val] = h[val] + 1\n        num_keys = len(h.keys())\n        max_repeat = max(h.values()) - 1\n        output = min(num_keys, max_repeat)\n        if num_keys - max_repeat > 1:\n            output = output + 1\n        if output == 0:\n            print(1)\n        else:\n            print(output)\n    k = k + 1", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    arr = input().split()\n    d = {}\n    for el in arr:\n        if el in d:\n            d[el] += 1\n        else:\n            d[el] = 1\n    distinct_el = len(d)\n    max_freq = max(d.values())\n    ans = 0\n    if len(arr) == 1:\n        ans = 0\n    elif max_freq == distinct_el:\n        ans = max_freq - 1\n    else:\n        ans = min(distinct_el, max_freq)\n    print(ans)", "def sting(n, s):\n    s = list(s.split())\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] = d.get(i) + 1\n        else:\n            d[i] = 1\n    l = len(d)\n    j = max(list(d.values()))\n    if j > l:\n        if l <= n // 2:\n            return l\n        else:\n            return n // 2\n    if j == l:\n        return l - 1\n    elif j <= n // 2:\n        return j\n    else:\n        return n // 2\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    print(sting(n, s))\n    t -= 1", "import sys\nfrom collections import defaultdict\nI = sys.stdin.readline\nans = ''\nfor _ in range(int(I())):\n    n = int(I())\n    a = list(map(int, I().split()))\n    copi = 0\n    s = set()\n    d = defaultdict(int)\n    for i in a:\n        s.add(i)\n        d[i] += 1\n    copi = max(d.values())\n    if copi == 1:\n        if n > 1:\n            ans += str(1) + '\\n'\n        else:\n            ans += '0\\n'\n    elif len(s) < copi:\n        ans += '{}\\n'.format(min(len(s), copi))\n    else:\n        ans += '{}\\n'.format(min(len(s) - 1, copi))\nprint(ans)", "from math import floor, ceil\nt = int(input())\nans = []\nfor _ in range(t):\n    _ = input()\n    perks = map(int, input().split())\n    dif = set()\n    sim = {}\n    for i in perks:\n        if not i in dif:\n            dif.add(i)\n            sim[i] = 1\n        else:\n            sim[i] += 1\n    m = 0\n    dif = len(dif)\n    for i in sim.keys():\n        if sim[i] > m:\n            m = sim[i]\n    a = min(dif, m)\n    if m == dif:\n        ans.append(a - 1)\n    else:\n        ans.append(a)\nprint(*ans, sep='\\n')", "from sys import stdin\nimport math\nfrom collections import Counter\ninp = lambda : stdin.readline().strip()\nt = int(inp())\nfor i in range(t):\n    n = int(inp())\n    arr = [int(x) for x in inp().split()]\n    f = Counter(arr).values()\n    uniqueSkills = set(arr)\n    unique = len(uniqueSkills)\n    a = [unique - 1, max(f)]\n    x = min(a)\n    b = [unique, max(f) - 1]\n    y = min(b)\n    print(max(x, y))", "from sys import stdin\nimport sys\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dictt = {}\n    fmax = 0\n    typ = 0\n    for i in arr:\n        if i not in dictt:\n            typ += 1\n            dictt[i] = 1\n        else:\n            dictt[i] += 1\n        if dictt[i] > fmax:\n            fmax = dictt[i]\n    print(max(min(typ, fmax - 1), min(typ - 1, fmax)))", "t = int(input())\nwhile t:\n    n = int(input())\n    skills = list(map(int, input().split()))\n    unique = set(skills)\n    freq = {}\n    for el in skills:\n        freq[el] = freq.get(el, 0) + 1\n    maxfreq = sorted(freq, key=freq.get, reverse=True)\n    max_freq_el = maxfreq[0]\n    if freq[max_freq_el] == len(unique):\n        print(len(unique) - 1)\n    else:\n        print(min(freq[max_freq_el], len(unique)))\n    t = t - 1", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        c = Counter(l)\n        s = len(set(l))\n        maxi = max(c.values())\n        if s == maxi:\n            print(maxi - 1)\n        elif s < maxi:\n            print(s)\n        else:\n            print(maxi)\n    t -= 1", "t = int(input())\nsol = []\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {}\n    r = 0\n    for x in a:\n        s[x] = s.get(x, 0) + 1\n        r = max(r, s[x])\n    d = len(s)\n    tmp = min(d, r)\n    if d == r:\n        tmp -= 1\n    sol.append(str(tmp))\nprint('\\n'.join(sol))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    skills = list(map(int, input().split(' ')))\n    people_per_skill = {}\n    for i in range(0, len(skills)):\n        if skills[i] in people_per_skill.keys():\n            people_per_skill[skills[i]] += 1\n        else:\n            people_per_skill[skills[i]] = 1\n    people_with_highest_skill = 0\n    for i in people_per_skill.keys():\n        if people_per_skill[i] > people_with_highest_skill:\n            people_with_highest_skill = people_per_skill[i]\n    len_team_1 = len(people_per_skill) - 1\n    len_team_2 = people_with_highest_skill\n    if len_team_1 == len_team_2:\n        print(len_team_1)\n    elif len_team_1 > len_team_2:\n        print(len_team_2)\n    else:\n        diff = len_team_2 - len_team_1\n        if diff <= 2:\n            print(len_team_2 - 1)\n        else:\n            print(len_team_1 + 1)", "from collections import Counter\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = dict(Counter(a))\n    p = len(c)\n    mx = 0\n    ans = 0\n    for (n, m) in c.items():\n        if m > mx:\n            mx = m\n    p -= 1\n    if mx - p > 1:\n        ans = p + 1\n    else:\n        ans = min(p, mx)\n    print(ans)", "from collections import Counter\n\ndef fun():\n    t = int(input())\n    for k in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = dict(Counter(a))\n        m = len(b)\n        d = max(b.values())\n        if d > m:\n            print(min(d, m))\n        else:\n            print(min(d, m - 1))\nfun()", "def TwoTeams():\n    casosDeTestes = int(input())\n    while casosDeTestes:\n        frequencia = {}\n        totalPessoas = int(input())\n        arr = list(map(int, input().split()))\n        casosDeTestes -= 1\n        valoresIguais = 0\n        valoresDiferentes = 0\n        for integrante in arr:\n            if frequencia.get(integrante) == None:\n                frequencia[integrante] = 1\n                valoresDiferentes += 1\n                valoresIguais = max(valoresIguais, frequencia[integrante])\n            else:\n                frequencia[integrante] += 1\n                valoresIguais = max(valoresIguais, frequencia[integrante])\n        if valoresIguais == valoresDiferentes - 1:\n            print(valoresIguais)\n        else:\n            valor1 = min(valoresIguais, valoresDiferentes - 1)\n            valor2 = min(valoresIguais - 1, valoresDiferentes)\n            print(max(valor1, valor2))\nTwoTeams()", "for i in range(int(input())):\n    (n, a, stud, maxt) = (int(input()), input().split(), {}, 0)\n    for i in range(n):\n        stud[a[i]] = 1 if a[i] not in stud else stud[a[i]] + 1\n        maxt = stud[a[i]] if stud[a[i]] > maxt else maxt\n    print(max(min(maxt, len(stud) - 1), min(maxt - 1, len(stud))))", "from collections import *\nt = int(input(''))\nwhile t != 0:\n    t -= 1\n    li = []\n    n = int(input(''))\n    a = [int(a) for a in input('').split()]\n    e = Counter(a).values()\n    s = set(a)\n    (o, p) = (len(s), max(e))\n    print(min(o, p) - (o == p))", "from collections import Counter\n\ndef solve():\n    _ = int(input())\n    l = list(map(int, input().split()))\n    counts = Counter(l)\n    if len(counts) == 1:\n        (k, v) = counts.most_common()[0]\n        return 0 if v == 1 else 1\n    ans = 0\n    rem_size = len(counts) - 1\n    for k in counts:\n        v = counts[k]\n        if rem_size >= v:\n            ans = max(ans, v)\n        else:\n            size_diff = v - rem_size\n            ans = max(ans, rem_size + (size_diff > 1))\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        ret = solve()\n        print(ret)\nmain()", "import sys\nfrom collections import Counter\n\ndef LI():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(a):\n    if len(a) == 1:\n        print('0')\n        return\n    m = Counter(a)\n    if len(m.keys()) == 1:\n        print('1')\n        return\n    pairs = []\n    for i in m.keys():\n        if m[i] > 1:\n            pairs.append((m[i], i))\n    pairs.sort(reverse=True)\n    answer = len(a) // 2\n    if len(pairs) == 0:\n        print('1')\n        return\n    while answer > 0:\n        most_frequent_left = pairs[0][0] - answer\n        if most_frequent_left < 0:\n            answer -= 1\n            continue\n        different_numbers_left = len(m.keys()) - 1\n        if most_frequent_left > 0:\n            different_numbers_left += 1\n        if different_numbers_left >= answer:\n            break\n        answer -= 1\n    print(answer)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        int(input())\n        a = LI()\n        solve(a)\nmain()", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        c = Counter(l)\n        s = len(set(l))\n        maxi = max(c.values())\n        if s == maxi:\n            print(maxi - 1)\n        else:\n            print(min(s, maxi))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    skills = input().split()\n    diff = len(set(skills))\n    same = dict()\n    for skill in skills:\n        skill = int(skill)\n        if skill not in same:\n            same[skill] = 1\n        else:\n            same[skill] += 1\n    same = sorted(same.values(), reverse=True)[0]\n    if diff == same:\n        print(diff - 1)\n    else:\n        print(min([diff, same]))", "for _ in range(int(input())):\n    n = int(input())\n    l = sorted(map(int, input().split()))\n    (m1, m2, a, b) = (0, 0, 0, 0)\n    for i in l:\n        if a != i:\n            m2 += 1\n            a = i\n            b = 1\n        else:\n            b += 1\n        if m1 < b:\n            m1 = b\n    if m1 > n // 2:\n        print(min(m2, n // 2))\n    else:\n        print(max(min(m1 - 1, m2), min(m1, m2 - 1)))", "inps = int(input())\nfor inp in range(inps):\n    n = int(input())\n    arr = n * [0]\n    for x in input().split():\n        arr[int(x) - 1] += 1\n    arr = list(filter(0 .__ne__, arr))\n    first = max(arr)\n    second = len(arr) - 1\n    if first == 0:\n        print(0)\n    elif first < second:\n        print(first)\n    elif first > second:\n        print(min(first - 1, second + 1))\n    else:\n        print(second)", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = list(map(int, input().split()))\n    dic = Counter(s)\n    ele = dic.most_common(1)[0][0]\n    b = dic[ele]\n    a = len(dic) - 1\n    if b >= a + 2:\n        print(a + 1)\n    elif a <= b <= a + 1:\n        print(a)\n    else:\n        print(b)\n    t -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    cn = Counter(a)\n    most = cn.most_common(1)[0][1]\n    dis = len(cn) - 1\n    if most == dis:\n        print(dis)\n    elif dis > most:\n        print(most)\n    elif most - dis == 1:\n        print(dis)\n    else:\n        print(dis + 1)", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    A = [int(i) for i in input().split(' ')]\n    d = {}\n    for i in A:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    distinct = len(d) - 1\n    same = 1\n    for i in d:\n        same = max(d[i], same)\n    if same > distinct:\n        distinct += 1\n        same -= 1\n    print(min(distinct, same))", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    b = int(input())\n    c = map(int, input().split())\n    d = Counter(c)\n    l1 = min(max(d.values()), len(d) - 1)\n    l2 = min(max(d.values()) - 1, len(d))\n    print(max(l1, l2))\n    t -= 1"]