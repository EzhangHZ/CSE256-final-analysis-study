["def f(n, L):\n    for Num in L:\n        if n - Num in L:\n            return 'YES'\n    return 'NO'\nt = int(input())\nL = {i ** 3 for i in range(1, 10001)}\nfor _ in range(t):\n    n = int(input())\n    print(f(n, L))", "import sys\n\ndef main():\n    input = sys.stdin.readline\n    l = [i ** 3 for i in range(1, 10000)]\n    s = set(l)\n    for _ in range(int(input())):\n        (x, res) = (int(input()), 'NO')\n        for a in l:\n            b = x - a\n            if b < a:\n                break\n            elif b in s:\n                res = 'YES'\n                break\n        print(res)\nmain()", "def calculateCubes(N: int):\n    for i in range(1, N + 1):\n        cubes.add(i ** 3)\n\ndef cf_702C(n: int):\n    for x in cubes:\n        if n - x in cubes:\n            return True\ncubes = set()\ncalculateCubes(10 ** 4)\nfor _ in range(int(input())):\n    print('YES' if cf_702C(int(input())) else 'NO')", "t = int(input())\nX = [int(input()) for _ in range(t)]\n\ndef f_slllooooww(x):\n    for a in range(1, int(x ** (1 / 3)) + 1):\n        for b in range(1, int(x ** (1 / 3)) + 1):\n            if (a + b) % x == 0:\n                if a ** 3 + b ** 3 == x:\n                    print('YES')\n                    return True\n    print('NO')\n    return False\ncubes = {x ** 3 for x in range(1, 10000)}\n\ndef f(x):\n    cube_root_of_x = x ** (1 / 3)\n    for a in cubes:\n        if x - a in cubes:\n            print('YES')\n            return True\n    print('NO')\n    return False\nfor x in X:\n    f(x)", "import math\n\ndef getlist():\n    return [int(i) for i in input().split()]\n\ndef getmany():\n    return map(int, input().split())\n\ndef getstr():\n    return [str(i) for i in input().split()]\nl = []\nfor a in range(1, 10000):\n    l.append(a ** 3)\ns = set(l)\n\ndef solve():\n    x = int(input())\n    for i in l:\n        if x - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    solve()", "__version__ = '3.1'\n__date__ = '2021-03-13'\nimport sys\n\ndef solve(x, cubes) -> bool:\n    for c in cubes:\n        if x - c in cubes:\n            return True\n    return False\n\ndef main(argv=None):\n    cubes = {pow(i, 3) for i in range(1, 10001)}\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        ans = solve(x, cubes)\n        print('YES' if ans == True else 'NO')\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "n = int(input())\ndic = {}\nfor i in range(1, 10001):\n    dic[i ** 3] = 'm'\n\ndef cube(x):\n    for i in dic:\n        if x - i in dic:\n            return 'YES'\n    return 'NO'\nfor i in range(n):\n    temp = int(input())\n    print(cube(temp))", "def number():\n    return int(input())\nhash = {}\nfor i in range(1, 10001):\n    hash[i * i * i] = True\n\ndef f(n):\n    for item in hash:\n        if n - item in hash:\n            return 'YES'\n    return 'NO'\nfor i in range(number()):\n    print(f(number()))", "def ct(a):\n    x = int(input())\n    for n in a:\n        if x - n in a:\n            return 'YES'\n    return 'NO'\na = set((i ** 3 for i in range(1, 10001)))\nt = int(input())\nfor i in range(t):\n    print(ct(a))", "import sys\n\ndef main():\n    res = ''\n    input = sys.stdin.readline\n    print = sys.stdout.write\n    t = int(input())\n    cubes = set()\n    for i in range(1, 10001):\n        cubes.add(i * i * i)\n\n    def solve(x):\n        res = 'NO'\n        for a in cubes:\n            if x - a in cubes:\n                res = 'YES'\n                break\n        return res\n    for _ in range(t):\n        x = int(input())\n        res += str(solve(x)) + '\\n'\n    print(res)\nmain()", "def ct(a):\n    x = int(input())\n    for n in a:\n        if x - n in a:\n            return 'YES'\n    return 'NO'\na = set((i ** 3 for i in range(1, 10001)))\nt = int(input())\nfor i in range(t):\n    print(ct(a))", "import sys, random, math\n\ndef cube(n, s):\n    x = int(math.pow(n, 1 / 3))\n    for i in s:\n        if n - i in s:\n            return 'YES'\n    return 'NO'\ns = set([i * i * i for i in range(1, 10001)])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(cube(n, s))", "get_line = lambda type_: list(map(type_, input().strip().split()))\nmy_set = {i ** 3 for i in range(1, 10000)}\n\ndef solve():\n    x = int(input())\n    for num in my_set:\n        if x - num in my_set:\n            print('YES')\n            return\n    print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\n\ndef getlist():\n    return [int(i) for i in input().split()]\n\ndef getmany():\n    return map(int, input().split())\n\ndef getstr():\n    return [str(i) for i in input().split()]\ns = set()\nfor a in range(1, 10000):\n    s.add(a ** 3)\n\ndef solve():\n    x = int(input())\n    for i in s:\n        if x - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    solve()", "se = set()\nfor i in range(1, 10010):\n    se.add(i ** 3)\n\ndef main():\n    n = int(input())\n    for s in se:\n        if n - s in se:\n            print('YES')\n            return\n    print('NO')\nfor _ in range(int(input())):\n    main()", "def main():\n    x = input()\n    integers = []\n    for _ in range(int(x)):\n        integers.append(int(input()))\n    cubes_sorted = [x ** 3 for x in range(1, 10000)]\n    cubes = set(cubes_sorted)\n    for integer in integers:\n        found = False\n        for cube in cubes_sorted:\n            if cube > integer:\n                break\n            if integer - cube in cubes:\n                found = True\n                break\n        if found:\n            print('YES')\n        else:\n            print('NO')\nmain()", "def get_t():\n    s = set()\n    for i in range(1, 10000):\n        s.add(i * i * i)\n    return s\n\ndef solve():\n    pass\n    n = int(input())\n    f = 0\n    for i in cube_set:\n        if n - i in cube_set:\n            print('YES')\n            f = 1\n            break\n    if not f:\n        print('NO')\nT = int(input())\ncube_set = get_t()\nwhile T:\n    T -= 1\n    solve()", "def main():\n    arr = {i ** 3 for i in range(1, 10001)}\n    for t in range(int(input())):\n        n = int(input())\n        found = False\n        for a in arr:\n            if n - a in arr:\n                found = True\n                break\n        if found:\n            print('YES')\n        else:\n            print('NO')\nmain()", "s = set()\nfor i in range(1, 10001):\n    s.add(i * i * i)\n\ndef fun():\n    n = int(input())\n    ans = 'NO'\n    for cube in s:\n        if n - cube in s:\n            ans = 'YES'\n    return ans\nt = int(input())\nfor i in range(t):\n    print(fun())", "test_cases = int(input())\ncubes = {x ** 3 for x in range(1, 10001)}\nvalues = [x ** 3 for x in range(1, 10001)]\n\ndef handle():\n    x = int(input())\n    for value in values:\n        if value >= x:\n            break\n        remainder = x - value\n        if remainder in cubes:\n            return 'YES'\n    return 'NO'\nfor _ in range(test_cases):\n    print(handle())", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    n = int(input())\n    print('NYOE S'[any((n - i in s for i in s))::2])", "import math\nfrom collections import defaultdict\nfrom math import comb\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\nglobal_ans = []\n\ndef p(line):\n    global_ans.append(line)\ntmp = {}\nfor i in range(1, 11000):\n    tmp[i * i * i] = 1\n\ndef solve():\n    x = input_int()\n    for i in tmp.keys():\n        v = x - i\n        if v in tmp:\n            p(YES)\n            return\n    p(NO)\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "import math\nimport sys\n\nclass IO:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n    @staticmethod\n    def implode(sep, array):\n        return sep.join((str(x) for x in array))\narr = {}\nfor i in range(1, 10010):\n    arr[i ** 3] = 1\n\ndef solve():\n    x = IO.int()\n    ans = 'NO'\n    for val in arr.keys():\n        y = x - val\n        if y in arr:\n            ans = 'YES'\n            break\n    print(ans)\nquery_count = IO.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "import sys\nYES = 'YES'\nNO = 'NO'\nMOD = 1000000007\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\nx = 10001\nres = set()\nfor i in range(1, x):\n    res.add(i * i * i)\n\ndef solve():\n    n = input_int()\n    for i in res:\n        k = n - i\n        if k in res:\n            print(YES)\n            return\n    print(NO)\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "array = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    flag = False\n    for a in array:\n        if x - a in array:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "v = {i ** 3 for i in range(1, 10001)}\n\ndef cal(x):\n    w = {x - i for i in v}\n    return not w & v\nfor _ in range(0, int(input())):\n    x = int(input())\n    print(['NO', 'YES'][not cal(x)])", "ans = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for i in ans:\n        if x - i in ans:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nd = {i ** 3 for i in range(1, 10 ** 4)}\nfor _ in range(int(input())):\n    n = int(input())\n    for i in d:\n        if n - i in d:\n            print('YES')\n            break\n    else:\n        print('NO')", "S = set()\nfor i in range(1, 10000):\n    S.add(i ** 3)\nfor _ in range(int(input())):\n    N = int(input())\n    flag = False\n    for i in S:\n        if N - i in S:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "p = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for y in p:\n        if x - y in p:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nc = {i ** 3 for i in range(1, 10001)}\nfor _ in range(t):\n    x = int(input())\n    for j in c:\n        if x - j in c:\n            print('YES')\n            break\n    else:\n        print('NO')", "CUBES = [x ** 3 for x in range(1, 10 ** 4 + 7)]\nCUBES_SET = set(CUBES)\n\ndef solve(x):\n    for cube in CUBES:\n        if cube > x:\n            break\n        diff = x - cube\n        if diff in CUBES_SET:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    for _ in range(int(input())):\n        x = int(input())\n        ans = solve(x)\n        print(ans)\nmain()", "c = {i ** 3 for i in range(1, 10000)}\nfor _ in range(int(input())):\n    a = int(input())\n    for i in c:\n        if a - i in c:\n            print('YES')\n            break\n    else:\n        print('NO')", "def sqrt3(n):\n    return n ** (1 / 3)\nr = set((int(i) ** 3 for i in range(1, 10000)))\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    for i in r:\n        if x - i in r:\n            print('YES')\n            break\n    else:\n        print('NO')", "cubes = {i ** 3 for i in range(1, 10001)}\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    flag = 0\n    for cube in cubes:\n        if n - cube in cubes:\n            flag = 1\n            print('YES')\n            break\n    if flag == 0:\n        print('NO')", "container = set()\nquery = int(input())\nfor i in range(1, 10001):\n    container.add(i * i * i)\nfor q in range(query):\n    num = int(input())\n    possible = False\n    for temp in container:\n        if num - temp in container:\n            possible = True\n    print('YES' if possible else 'NO')", "AllCubes = {e ** 3 for e in range(1, int(1000000000000.0 ** (1 / 3)) + 1)}\nfor _ in range(int(input())):\n    x = int(input())\n    a = 1\n    for cube in AllCubes:\n        if x - cube in AllCubes:\n            a = 0\n            break\n    print('YNEOS'[a::2])", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    n = int(input())\n    b = 1\n    for i in s:\n        if n - i in s:\n            b = 0\n            break\n    print('YNEOS'[b::2])", "l = {i ** 3 for i in range(1, 10001)}\nfor i in range(int(input())):\n    x = int(input())\n    for i in l:\n        if x - i in l:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nc = {i ** 3 for i in range(1, 10001)}\nfor _ in range(t):\n    x = int(input())\n    for j in c:\n        if x - j in c:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10000)}\nfor i in range(int(input())):\n    n = int(input())\n    for i in s:\n        if n - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "def findall():\n    s = set()\n    arr = []\n    for i in range(1, 10001):\n        k = i ** 3\n        s.add(k)\n        arr.append(k)\n    return (s, arr)\n\ndef solve(s, arr):\n    x = int(input())\n    for i in range(10000):\n        t = x - arr[i]\n        if t in s:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    (s, arr) = findall()\n    for _ in range(int(input())):\n        print(solve(s, arr))\nmain()", "t = int(input())\nmap_coub = []\ndict_map = {}\nlist_x = [int(input()) for _ in range(t)]\nmax_x = max(list_x)\na = 1\nwhile a * a * a <= max_x:\n    map_coub.append(a * a * a)\n    dict_map[a * a * a] = 0\n    a += 1\n\ndef find_coub(x):\n    for i in map_coub:\n        if i > x:\n            return False\n        if x - i in dict_map:\n            return True\n    return False\nfor x in list_x:\n    print('YES' if find_coub(x) else 'NO')", "a = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for n in a:\n        if x - n in a:\n            print('YES')\n            break\n    else:\n        print('NO')", "cs = set()\nfor x in range(1, 10001):\n    cs.add(x * x * x)\nfor _ in range(int(input())):\n    j = int(input())\n    ans = 'NO'\n    for i in cs:\n        if j - i in cs:\n            ans = 'YES'\n    print(ans)", "def sum_of_cubes(num):\n    d = {}\n    for ele in cubes_list:\n        d[ele] = 1\n        if num - ele in d and d[num - ele]:\n            return 'YES'\n    return 'NO'\ncubes_list = [i * i * i for i in range(1, 10009)]\nfor i in range(int(input())):\n    n = int(input())\n    print(sum_of_cubes(n))", "import sys\ns = set()\nfor a in range(1, 10000):\n    s.add(a ** 3)\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    x = int(sys.stdin.readline().strip())\n    for i in s:\n        if x - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "n = int(input())\nl = {x ** 3 for x in range(1, 10001)}\nfor i in range(n):\n    a = int(input())\n    for x in l:\n        if a - x in l:\n            print('YES')\n            break\n    else:\n        print('NO')", "n = int(input())\na = set()\nfor i in range(1, 10001):\n    a.add(i ** 3)\nfor _ in range(n):\n    x = int(input())\n    ans = 'NO'\n    for i in a:\n        if x - i in a:\n            ans = 'YES'\n    print(ans)", "num_set = set()\nfor i in range(1, 10001):\n    num_set.add(i ** 3)\nfor t in range(int(input())):\n    n = int(input())\n    for i in num_set:\n        if n - i in num_set:\n            print('YES')\n            break\n    else:\n        print('NO')", "num_set = set()\nfor i in range(1, 10001):\n    num_set.add(i ** 3)\nfor t in range(int(input())):\n    n = int(input())\n    for i in num_set:\n        if n - i in num_set:\n            print('YES')\n            break\n    else:\n        print('NO')", "a = {i ** 3 for i in range(1, 10001)}\nfor t in range(int(input())):\n    x = int(input())\n    for n in a:\n        if x - n in a:\n            print('YES')\n            break\n    else:\n        print('NO')", "from collections import OrderedDict\ntc = int(input())\nn = []\nfor _ in range(tc):\n    num = int(input())\n    n.append(num)\nhashMap = OrderedDict()\ni = 1\nwhile i ** 3 <= max(n):\n    hashMap[i ** 3] = 0\n    i += 1\n\ndef check(num):\n    for val in hashMap:\n        if num - val in hashMap:\n            print('YES')\n            return\n    print('NO')\n    return\nfor num in n:\n    check(num)", "a = {}\nfor i in range(1, 10000):\n    a[i * i * i] = '?'\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    ans = 0\n    for k in a:\n        if x - k in a:\n            ans = 1\n            break\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in s:\n        if x - a in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in s:\n        if x - a in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in s:\n        if x - a in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10000)}\nfor i in range(int(input())):\n    n = int(input())\n    for i in s:\n        if n - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "list_ = set([a ** 3 for a in range(1, 10 ** 4)])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 0\n    for b in list_:\n        if n - b in list_:\n            c += 1\n            break\n    if c > 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nc = {i ** 3 for i in range(1, 10001)}\nfor _ in range(t):\n    x = int(input())\n    for j in c:\n        if x - j in c:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for i in s:\n        if x - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {i ** 3 for i in range(1, 10001)}\nkt = 0\nfor i in range(int(input())):\n    x = int(input())\n    kt = 0\n    for a in s:\n        if x - a in s:\n            print('YES')\n            kt = 1\n            break\n    if kt == 0:\n        print('NO')", "t = int(input())\na = set()\nfor i in range(1, 10000):\n    a.add(i ** 3)\nfor i in range(t):\n    n = int(input())\n    res = 0\n    for iii in a:\n        if n - iii in a:\n            res = 1\n            break\n    if res == 0:\n        print('NO')\n    else:\n        print('YES')", "s = set()\nfor i in range(1, 10001):\n    s.add(i ** 3)\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    for x in s:\n        if n - x in s:\n            ans = 'YES'\n    print(ans)", "s = {i ** 3 for i in range(1, 10 ** 4 + 1)}\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    for i in s:\n        if x - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "c = [i ** 3 for i in range(1, 10 ** 4 + 9)]\nz = set(c)\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    for j in c:\n        if x - j in z:\n            print('YES')\n            break\n    else:\n        print('NO')", "from collections import defaultdict, Counter, deque\nfrom math import sqrt, log10, log, floor, factorial, gcd\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations\nimport sys, io, os\ninput = sys.stdin.readline\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef yn(a):\n    print('YES' if a else 'NO')\nceil = lambda a, b: (a + b - 1) // b\ns = {i ** 3 for i in range(1, 10 ** 4 + 1)}\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    for i in s:\n        if n - i in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = get_int()\narray = {i ** 3 for i in range(1, 10001)}\nfor i in range(t):\n    x = get_int()\n    flag = False\n    for a in array:\n        if x - a in array:\n            flag = True\n            break\n    if flag:\n        sys.stdout.write('YES\\n')\n    else:\n        sys.stdout.write('NO\\n')", "def solve(x):\n    for i in l:\n        if i > x:\n            break\n        if x - i in lset:\n            print('YES')\n            return\n    print('NO')\nl = []\ncur = 1\nwhile cur ** 3 <= 10000000000000.0:\n    l.append(cur ** 3)\n    cur += 1\nlset = set(l)\nt = int(input())\nfor _ in range(t):\n    solve(int(input()))", "cbs = set([i * i * i for i in range(1, 10 ** 4 + 1)])\nfor i in range(int(input())):\n    x = int(input())\n    for j in cbs:\n        if x - j in cbs:\n            print('YES')\n            break\n    else:\n        print('NO')", "l = set((i ** 3 for i in range(1, 10000)))\na = 0\nfor _ in range(int(input())):\n    n = int(input())\n    for i in l:\n        if n - i in l:\n            a = 1\n            break\n    if a == 1:\n        print('YES')\n    else:\n        print('NO')\n    a = 0", "l = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in l:\n        if x - a in l:\n            print('YES')\n            break\n    else:\n        print('NO')", "a = {i ** 3 for i in range(1, 10001)}\nfor s in [*open(0)][1:]:\n    n = int(s)\n    for x in a:\n        if n - x in a:\n            print('YES')\n            break\n    else:\n        print('NO')", "p = set((x ** 3 for x in range(1, 10 ** 4)))\nfor _ in range(int(input())):\n    n = int(input())\n    rep = 'NO'\n    for k in p:\n        if n - k in p:\n            rep = 'YES'\n            break\n    print(rep)", "try:\n    k = set()\n    for i in range(1, 10001):\n        k.add(i * i * i)\n    t = int(input())\n    for i in range(0, t):\n        n = int(input())\n        flag = 0\n        for i in k:\n            if n - i in k:\n                flag = 1\n                break\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')\nexcept:\n    pass", "ls = set()\nfor i in range(1, 10000):\n    ls.add(i ** 3)\nfor _ in range(int(input())):\n    x = int(input())\n    ans = 'NO'\n    for i in ls:\n        if x - i in ls:\n            ans = 'YES'\n            break\n    print(ans)", "tests = int(input())\narr = set()\nfor i in range(1, 10001):\n    arr.add(i ** 3)\nfor _ in range(tests):\n    n = int(input())\n    true = False\n    for x in arr:\n        if n - x in arr:\n            true = True\n            break\n    if true:\n        print('YES')\n    else:\n        print('NO')", "s = set()\nfor i in range(1, 10001):\n    s.add(i * i * i)\nfor y in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    for i in s:\n        if n - i in s:\n            ans = 'YES'\n    print(ans)", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in s:\n        if x - a in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "cubSet = set()\nfor i in range(1, 10001):\n    cubSet.add(i ** 3)\nfor k in range(int(input())):\n    x = int(input())\n    res = False\n    for c1 in cubSet:\n        if x - c1 in cubSet:\n            res = True\n            print('YES')\n            break\n    if not res:\n        print('NO')", "cubSet = set()\nfor i in range(1, 10001):\n    cubSet.add(i ** 3)\nfor k in range(int(input())):\n    x = int(input())\n    res = False\n    for c1 in cubSet:\n        if x - c1 in cubSet:\n            res = True\n            print('YES')\n            break\n    if not res:\n        print('NO')", "cubSet = set()\nfor i in range(1, 10001):\n    cubSet.add(i ** 3)\nfor _ in range(int(input())):\n    x = int(input())\n    for num in cubSet:\n        if x - num in cubSet:\n            print('YES')\n            break\n    else:\n        print('NO')", "y = {}\ny = set()\nfor i in range(1, 10001):\n    y.add(i ** 3)\nfor _ in range(int(input())):\n    x = int(input())\n    for j in y:\n        if x - j in y:\n            print('YES')\n            break\n    else:\n        print('NO')", "s = {x ** 3 for x in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    flag = False\n    for i in s:\n        if x - i in s:\n            print('YES')\n            flag = True\n            break\n    if not flag:\n        print('NO')", "cubes = {a ** 3 for a in range(1, 10001)}\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    res = 'NO'\n    for a in cubes:\n        if n - a in cubes:\n            res = 'YES'\n            break\n    print(res)\n    t -= 1", "cubes = {a ** 3 for a in range(1, 10001)}\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    res = 'NO'\n    for a in cubes:\n        if n - a in cubes:\n            res = 'YES'\n            break\n    print(res)\n    t -= 1", "t = int(input())\narr = {int(i ** 3) for i in range(1, 10000)}\nfor _ in range(t):\n    x = int(input())\n    flag = 1\n    for i in arr:\n        if x - i in arr:\n            print('YES')\n            flag = 0\n            break\n    if flag:\n        print('NO')", "from collections import defaultdict\nprefix = defaultdict(int)\nfor i in range(1, 10000):\n    prefix[i ** 3] = i\ncache = defaultdict(str)\nfor i in range(int(input())):\n    n = int(input())\n    if n in cache:\n        print(cache[n])\n        continue\n    for i in prefix:\n        if n - i in prefix:\n            print('YES')\n            cache[n] = 'YES'\n            break\n    else:\n        cache[n] = 'NO'\n        print('NO')", "cu = {i * i * i for i in range(1, 10001)}\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    for i in cu:\n        if n - i in cu:\n            print('YES')\n            break\n    else:\n        print('NO')", "a = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for n in a:\n        if x - n in a:\n            print('YES')\n            break\n    else:\n        print('NO')", "a = set([i ** 3 for i in range(1, 10000)])\nfor _ in range(int(input())):\n    x = int(input())\n    ans = 'NO'\n    for i in a:\n        if x - i in a:\n            ans = 'YES'\n    print(ans)", "s = {i ** 3 for i in range(1, 10001)}\nfor _ in range(int(input())):\n    x = int(input())\n    for a in s:\n        if x - a in s:\n            print('YES')\n            break\n    else:\n        print('NO')", "arr = set()\nn = 1\nwhile True:\n    temp = n ** 3\n    if temp > 10 ** 12:\n        break\n    arr.add(temp)\n    n += 1\nfor _ in range(int(input())):\n    x = int(input())\n    flag = 1\n    for i in arr:\n        if x - i in arr:\n            flag = 0\n            print('YES')\n            break\n    if flag:\n        print('NO')", "kubs = {i * i * i for i in range(1, 10001)}\nfor i in range(int(input())):\n    a = int(input())\n    f = False\n    for cnt in kubs:\n        if a - cnt in kubs:\n            f = True\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')"]