["import math\nimport sys\n\nclass Read:\n\n    @staticmethod\n    def string():\n        return input()\n\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\ndef solve():\n    n = Read.int()\n    a = Read.list_int()\n    tmp = {}\n    last = {}\n    for i in range(n):\n        v = i\n        if a[i] in last:\n            v = i - last[a[i]] - 1\n        last[a[i]] = i\n        if a[i] in tmp:\n            if v > tmp[a[i]]:\n                tmp[a[i]] = v\n        else:\n            tmp[a[i]] = v\n    for (k, v) in last.items():\n        v = n - 1 - v\n        if v > tmp[k]:\n            tmp[k] = v\n    tmp_s = sorted(list(tmp.keys()))\n    res = []\n    l = 0\n    for i in tmp_s:\n        r = n - tmp[i]\n        for j in range(l, r):\n            res.append(str(i))\n        if r > l:\n            l = r\n    for i in range(n - len(res)):\n        res.append('-1')\n    res.reverse()\n    print(' '.join(res))\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "def func(n, a):\n    c = [-1] * (n + 1)\n    f = [0] * (n + 1)\n    indices = [[] for _ in range(n + 1)]\n    for i in range(n):\n        indices[a[i]].append(i + 1)\n    for i in range(1, n + 1):\n        lis = indices[i]\n        if lis != []:\n            m = max(lis[0], n - lis[-1] + 1)\n            for j in range(1, len(lis)):\n                m = max(m, lis[j] - lis[j - 1])\n            f[i] = m\n    for i in range(1, n + 1):\n        m = f[i]\n        if m != 0:\n            while m < n + 1 and c[m] == -1:\n                c[m] = i\n                m += 1\n    return c[1:]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = func(n, arr)\n    print(' '.join(list(map(str, brr))))", "def amazing_numbers(n, arr):\n    occur_lis = [[] for i in range(n + 1)]\n    for index in range(n):\n        a = arr[index]\n        occur_lis[a].append(index + 1)\n    f = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        lis = occur_lis[i]\n        if lis != []:\n            m = max(lis[0], n - lis[-1] + 1)\n            for j in range(len(lis) - 1):\n                m = max(m, lis[j + 1] - lis[j])\n            f[i] = m\n    ans = [-1 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        if f[i] != 0:\n            p = f[i]\n            while p < n + 1 and ans[p] == -1:\n                ans[p] = i\n                p += 1\n    return ans[1:]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = amazing_numbers(n, arr)\n    print(' '.join(list(map(str, brr))))", "import sys\n\ndef minp():\n    return sys.stdin.readline().strip()\n\ndef mint():\n    return int(minp())\n\ndef mints():\n    return map(int, minp().split())\n\ndef solve():\n    p = dict()\n    b = dict()\n    i = 0\n    n = mint()\n    for x in mints():\n        if x in p:\n            b[x] = max(b[x], i - p[x])\n        else:\n            b[x] = i + 1\n        p[x] = i\n        i += 1\n    res = []\n    for (x, y) in b.items():\n        res.append((max(b[x], n - p[x]), x))\n    res.sort()\n    j = 0\n    cur = int(1000000000.0)\n    rr = [-1] * n\n    for i in range(1, n + 1):\n        while j < len(res) and res[j][0] <= i:\n            cur = min(cur, res[j][1])\n            j += 1\n        if cur <= n:\n            rr[i - 1] = cur\n    print(' '.join(map(str, rr)))\nfor i in range(mint()):\n    solve()", "maxn = 300000.0 + 5\n\ndef solve(arr, n):\n    f = [0] * (n + 1)\n    last = [0] * (n + 1)\n    ans = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        x = arr[i]\n        f[x] = max(f[x], i - last[x])\n        last[x] = i\n    for x in range(1, n + 1):\n        f[x] = max(f[x], n - last[x] + 1)\n        i = f[x]\n        while i <= n and ans[i] == -1:\n            ans[i] = x\n            i += 1\n    print(*ans[1:])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [0] + arr\n    solve(arr, n)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "import sys\nsys.setrecursionlimit(1000000)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    prev = [-1 for _ in range(n)]\n    val = [1 for _ in range(n)]\n    for (i, x) in enumerate(a):\n        delta = i - prev[x]\n        val[x] = max(val[x], delta)\n        prev[x] = i\n    for i in range(n):\n        val[i] = max(val[i], n - prev[i])\n    ans = [-1 for _ in range(n + 1)]\n    r = n + 1\n    for i in range(n):\n        if val[i] < r:\n            for j in range(val[i], r):\n                ans[j] = i + 1\n            r = val[i]\n    print(' '.join([str(x) for x in ans[1:]]))", "maxn = 300000.0 + 5\n\ndef solve(arr, n):\n    f = [0] * (n + 1)\n    last = [0] * (n + 1)\n    ans = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        x = arr[i]\n        f[x] = max(f[x], i - last[x])\n        last[x] = i\n    for x in range(1, n + 1):\n        f[x] = max(f[x], n - last[x] + 1)\n        i = f[x]\n        while i <= n and ans[i] == -1:\n            ans[i] = x\n            i += 1\n    print(*ans[1:])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [0] + arr\n    solve(arr, n)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef algo(arr, n):\n    ans = [-1] * (n + 1)\n    f = [0] * (n + 1)\n    idx = [0] * (n + 1)\n    for i in range(1, n + 1):\n        f[arr[i - 1]] = max(i - idx[arr[i - 1]], f[arr[i - 1]])\n        idx[arr[i - 1]] = i\n    for i in range(1, n + 1):\n        f[arr[i - 1]] = max(n + 1 - idx[arr[i - 1]], f[arr[i - 1]])\n    for i in range(1, n + 1):\n        if ans[f[i]] == -1:\n            ans[f[i]] = i\n    ans[0] = -1\n    for i in range(1, n + 1):\n        if ans[i] == -1:\n            ans[i] = ans[i - 1]\n        else:\n            ans[i] = ans[i] if ans[i - 1] == -1 else min(ans[i], ans[i - 1])\n    return ' '.join(map(str, ans[1:]))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = algo(arr, n)\n    print(res)", "import collections\n\ndef amaze(arr):\n    lastSeen = collections.defaultdict(int)\n    maxDists = collections.defaultdict(int)\n    for i in range(len(arr)):\n        if arr[i] in lastSeen:\n            maxDists[arr[i]] = max(maxDists[arr[i]], i - lastSeen[arr[i]])\n        else:\n            maxDists[arr[i]] = i + 1\n        lastSeen[arr[i]] = i\n    for key in lastSeen:\n        maxDists[key] = max(maxDists[key], len(arr) - lastSeen[key])\n    if len(maxDists) == 1:\n        return [arr[0]] * len(arr)\n    ans = [float('inf')] * len(arr)\n    for key in maxDists:\n        ans[maxDists[key] - 1] = min(ans[maxDists[key] - 1], key)\n    for i in range(1, len(ans)):\n        ans[i] = min(ans[i - 1], ans[i])\n    for i in range(len(ans)):\n        if ans[i] == float('inf'):\n            ans[i] = -1\n    return ans\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    ans = amaze(arr)\n    print(' '.join([str(i) for i in ans]))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    dt = defaultdict(list)\n    for (i, v) in enumerate(arr):\n        dt[v].append(i)\n    ret = [-1 for _ in range(n + 2)]\n    for i in range(1, n + 1):\n        if i not in dt:\n            continue\n        tmp = dt[i][0] + 1\n        for idx in range(1, len(dt[i])):\n            tmp = max(tmp, dt[i][idx] - dt[i][idx - 1])\n        tmp = max(tmp, n - dt[i][-1])\n        if ret[tmp] == -1:\n            ret[tmp] = i\n    for i in range(2, n + 1):\n        if ret[i - 1] == -1:\n            continue\n        if ret[i] == -1 or ret[i] > ret[i - 1]:\n            ret[i] = ret[i - 1]\n    print(' '.join(map(str, ret[1:n + 1])))", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [-1 for _ in range(n)]\n    f = [0 for _ in range(n)]\n    for i in range(n):\n        element = a[i] - 1\n        f[element] = max(f[element], i - p[element])\n        p[element] = i\n    ans = [-1 for _ in range(n + 1)]\n    for x in range(n):\n        f[x] = max(f[x], n - p[x])\n        i = f[x]\n        while i <= n and ans[i] == -1:\n            ans[i] = x + 1\n            i += 1\n    for c in ans[1:]:\n        print(c, end=' ')\n    print('')\nfor _ in range(int(input())):\n    main()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    l = [-1] * n\n    u = [-1] * n\n    k = [-1] * n\n    for x in range(n):\n        i = a[x] - 1\n        l[i] = max(l[i], x - u[i])\n        u[i] = x\n    m = n\n    i = [x for x in range(n) if l[x] != -1]\n    for x in i:\n        a = max(l[x], n - u[x])\n        if l[x] <= m and k[a - 1] == -1:\n            for j in range(a - 1, m):\n                k[j] = x + 1\n            m = a - 1\n    print(*k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    last_same = {}\n    for a in arr:\n        last_same[a] = (-1, 1)\n    for (i, a) in enumerate(arr):\n        last_same[a] = (i, max(last_same[a][1], i - last_same[a][0]))\n    for a in last_same.keys():\n        last_same[a] = (last_same[a][0], max(last_same[a][1], len(arr) - last_same[a][0]))\n    ans = [-1] * len(arr)\n    for a in sorted(list(last_same.keys())):\n        pos = last_same[a][1] - 1\n        while pos < len(ans) and ans[pos] == -1:\n            ans[pos] = a\n            pos += 1\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, -1)\n    rast = dict()\n    last = dict()\n    for i in range(1, n + 1):\n        x = a[i]\n        ll = last.get(x, -1)\n        if ll == -1:\n            last[x] = i\n            rast[x] = i\n        else:\n            r = i - ll\n            if r > rast[x]:\n                rast[x] = r\n            last[x] = i\n    ans = [-1] * (n + 1)\n    c = 0\n    for h in rast:\n        lb = n + 1 - last[h]\n        if lb > rast[h]:\n            rast[h] = lb\n        r = rast[h]\n        c += 1\n        if ans[r] == -1:\n            ans[r] = h\n        elif ans[r] > h:\n            ans[r] = h\n    if c < n:\n        for k in range(2, n + 1):\n            if (ans[k] > ans[k - 1] or ans[k] == -1) and ans[k - 1] != -1:\n                ans[k] = ans[k - 1]\n    print(*ans[1:])", "t = int(input())\nans = [[] for i in range(t)]\nfor i in range(t):\n    n = int(input())\n    list_a = [*map(int, input().split())]\n    dict_a = {value_a: [] for value_a in set(list_a)}\n    for j in range(n):\n        value = list_a[j]\n        dict_a[value].append(j)\n    ans_dict_a = {value_a: max([*map(lambda x, y: x - y, dict_a[value_a] + [n], [-1] + dict_a[value_a])]) for value_a in dict_a.keys()}\n    ans_list = [-1 for i in range(n)]\n    q = n\n    for value in sorted(dict_a.keys()):\n        p = ans_dict_a[value] - 1\n        for k in range(p, q):\n            ans_list[k] = value\n        if q > p:\n            q = p\n    ans[i] = ans_list\nfor an in ans:\n    print(' '.join(map(str, an)))", "import collections\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    (_, a) = (inp(), inlt())\n    res = [-1] * len(a)\n    idxs = collections.defaultdict(list)\n    max_int = {}\n    last_i = {}\n    for (i, num) in enumerate(a):\n        if num not in max_int:\n            max_int[num] = i + 1\n            last_i[num] = i\n        else:\n            max_int[num] = max(i - last_i[num], max_int[num])\n            last_i[num] = i\n    for num in max_int:\n        max_int[num] = max(max_int[num], len(a) - last_i[num])\n    ints = sorted(max_int.keys(), key=lambda a: (max_int[a], a))\n    best = ints[0]\n    inti = 0\n    for i in range(max_int[ints[0]], len(res) + 1):\n        while inti < len(ints) and i == max_int[ints[inti]]:\n            best = min(ints[inti], best)\n            inti += 1\n        res[i - 1] = best\n    print(' '.join([str(x) for x in res]))", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        block = [(0, 0, 0)] * (n + 1)\n        for i in range(n):\n            (x, y, z) = block[a[i]]\n            if y == 0:\n                x = i + 1\n            else:\n                x = max(x, i + 1 - y)\n            y = i + 1\n            z = i + 1\n            block[a[i]] = (x, y, z)\n        ans = [-1] * (n + 1)\n        for x in range(1, n + 1):\n            m = max(block[x][0], n - block[x][2] + 1)\n            if not m:\n                continue\n            for i in range(m, n + 1):\n                if ans[i] == -1:\n                    ans[i] = x\n                else:\n                    break\n        print(*ans[1:])\nmain()", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, -1)\n    rast = dict()\n    last = dict()\n    for i in range(1, n + 1):\n        x = a[i]\n        ll = last.get(x, -1)\n        if ll == -1:\n            last[x] = i\n            rast[x] = i\n        else:\n            r = i - ll\n            if r > rast[x]:\n                rast[x] = r\n            last[x] = i\n    ans = [-1] * (n + 1)\n    for h in rast:\n        lb = n + 1 - last[h]\n        if lb > rast[h]:\n            rast[h] = lb\n        r = rast[h]\n        if ans[r] == -1:\n            ans[r] = h\n        elif ans[r] > h:\n            ans[r] = h\n    for k in range(2, n + 1):\n        if (ans[k] > ans[k - 1] or ans[k] == -1) and ans[k - 1] != -1:\n            ans[k] = ans[k - 1]\n    print(*ans[1:])"]