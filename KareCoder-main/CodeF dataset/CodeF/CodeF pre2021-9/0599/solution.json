["import sys\nfrom collections import defaultdict\nfrom itertools import islice\n_ = input()\nnumbers_str = input()\nnumbers = [int(n) for n in numbers_str.strip().split()]\nsums = {}\nfor (i, a) in enumerate(numbers, start=1):\n    for (j, b) in enumerate(islice(numbers, i, None), start=i + 1):\n        if a + b in sums:\n            indexes = sums[a + b]\n            if i in indexes or j in indexes:\n                continue\n            print('YES')\n            (x, y) = indexes\n            print(x, y, i, j)\n            sys.exit()\n        else:\n            sums[a + b] = (i, j)\nelse:\n    print('NO')", "n = int(input())\narr = list(map(int, input().split()))\nd = {}\nflag = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = arr[i] + arr[j]\n        if s not in d:\n            d[s] = (i, j)\n        else:\n            if d[s][0] == i or d[s][1] == i or d[s][0] == j or (d[s][1] == j):\n                continue\n            print('YES')\n            print(d[s][0] + 1, d[s][1] + 1, i + 1, j + 1)\n            flag = 1\n            break\n    if flag == 1:\n        break\nif flag == 0:\n    print('NO')", "n = int(input())\nitems = list(map(int, input().split()))\nd = {}\nflag = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = items[i] + items[j]\n        if s not in d:\n            d[s] = (i, j)\n        else:\n            if d[s][0] == i or d[s][1] == i or d[s][0] == j or (d[s][1] == j):\n                continue\n            print('YES')\n            print(d[s][0] + 1, d[s][1] + 1, i + 1, j + 1)\n            flag = 1\n            break\n    if flag == 1:\n        break\nif flag == 0:\n    print('NO')", "from collections import defaultdict\nn = int(input())\na = [int(y) for y in input().split()]\ndic = dict()\nfound = False\nans = []\nd = {}\nres = []\nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] + a[j] not in d:\n            d[a[i] + a[j]] = (i, j)\n        elif i != d[a[i] + a[j]][0] and i != d[a[i] + a[j]][1] and (j != d[a[i] + a[j]][1]) and (j != d[a[i] + a[j]][0]):\n            res.append(list(d[a[i] + a[j]]) + [i] + [j])\n            print('YES')\n            for i in range(4):\n                res[0][i] += 1\n            print(*res[0])\n            found = True\n            break\n    if found:\n        break\nif not found:\n    print('NO')", "def findPairs(arr, size):\n    sumPair = {}\n    for i in range(0, size - 1):\n        for j in range(i + 1, size):\n            Sum = arr[i] + arr[j]\n            if Sum in sumPair:\n                if (sumPair[Sum][0] != i and sumPair[Sum][1] != j) and (sumPair[Sum][1] != i and sumPair[Sum][0] != j):\n                    print('YES')\n                    print(i + 1, j + 1, sumPair[Sum][0] + 1, sumPair[Sum][1] + 1)\n                    return\n            else:\n                sumPair[Sum] = [i, j]\n    print('NO')\nn = int(input())\na = list(map(int, input().split()))\nfindPairs(a, n)", "import sys\nimport math\n\nclass DictList(dict):\n\n    def __setitem__(self, key, value):\n        try:\n            self[key].append(value)\n        except KeyError:\n            super(DictList, self).__setitem__(key, value)\n        except AttributeError:\n            super(DictList, self).__setitem__(key, [self[key], value])\n\ndef fn(n, a):\n    d = {}\n    ans = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            sum0 = a[i] + a[j]\n            if sum0 in d:\n                p = d.get(sum0)\n                if i in p or j in p:\n                    continue\n                ans = [p[0] + 1, p[1] + 1, i + 1, j + 1]\n                print('YES')\n                print(*ans)\n                return 0\n            else:\n                d[sum0] = [i, j]\n    print('NO')\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nn = data[0]\na = data[1:]\nfn(n, a)", "def findPairs(arr, size):\n    Map = {}\n    for i in range(0, size - 1):\n        for j in range(i + 1, size):\n            Sum = arr[i] + arr[j]\n            if Sum in Map:\n                if (Map[Sum][0] != i and Map[Sum][0] != j) and (Map[Sum][1] != i and Map[Sum][1] != j):\n                    t = (Map[Sum][0] + 1, Map[Sum][1] + 1, i + 1, j + 1)\n                    return t\n            if Sum not in Map:\n                Map[Sum] = [i, j]\n    return (-1, -1, -1, -1)\n\ndef solve1():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (a, b, c, d) = findPairs(arr, n)\n    if a == -1:\n        print('NO')\n    else:\n        print('YES')\n        print(a, b, c, d)\nfor testis in range(1):\n    solve1()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            s1 = a[i] + a[j]\n            if s1 not in dic:\n                dic[s1] = [i, j]\n            else:\n                if dic[s1][0] == i or dic[s1][0] == j or dic[s1][1] == i or (dic[s1][1] == j):\n                    continue\n                print('YES')\n                print(dic[s1][0] + 1, dic[s1][1] + 1, i + 1, j + 1)\n                return 0\n    print('NO')\n    return 0\nsolve()", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\ns = set()\nf = False\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = l[i] + l[j]\n        if s in d:\n            if d[s][0] != i and d[s][0] != j and (d[s][1] != i) and (d[s][1] != j):\n                print('YES')\n                print(d[s][0] + 1, d[s][1] + 1, i + 1, j + 1)\n                f = True\n                break\n        else:\n            d[s] = [i, j]\n    if f:\n        break\nif not f:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:4000]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "n = int(input())\na = list(map(int, input().split()))\nd = dict()\nf = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = a[i] + a[j]\n        if s not in d:\n            d[s] = [i, j]\n        else:\n            se = {i, j}\n            se.update(d[s])\n            if len(se) == 4:\n                print('YES')\n                print(i + 1, j + 1, d[s][0] + 1, d[s][1] + 1)\n                f = 1\n                break\n    if f == 1:\n        break\nif f == 0:\n    print('NO')", "n = int(input())\na = list(map(int, input().split()))\nd = {}\n(x, y, w, z) = (-1, -1, -1, -1)\nans = 0\nfor i in range(n):\n    if ans == 0:\n        for j in range(i + 1, n):\n            s = a[i] + a[j]\n            if s in d.keys():\n                x = i + 1\n                y = j + 1\n                w = d.get(s)[0] + 1\n                z = d.get(s)[1] + 1\n                if x != w and x != z and (y != w) and (y != z):\n                    ans = 1\n                    break\n            else:\n                d[s] = [i, j]\nif ans:\n    print('YES')\n    print(x, y, w, z)\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:2500]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:10000]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:1700]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:1700]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:2600]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "from collections import Counter\nn = int(input())\nm = [int(j) for j in input().split()]\nm = m[:2000]\nnew = {}\nres = []\nfor i in range(len(m)):\n    for j in range(i + 1, len(m)):\n        if m[i] + m[j] in new:\n            if i not in new[m[i] + m[j]] and j not in new[m[i] + m[j]]:\n                z = new[m[i] + m[j]][0]\n                x = new[m[i] + m[j]][1]\n                res.extend([i, j, z, x])\n                break\n            else:\n                continue\n        else:\n            new[m[i] + m[j]] = [i, j]\n    else:\n        continue\n    break\nif res:\n    print('YES')\n    print(' '.join([str(e + 1) for e in res]))\nelse:\n    print('NO')", "n = int(input())\nzoz = [int(x) for x in input().split()]\ns = {}\nfor a in range(n):\n    for b in range(a + 1, n):\n        if a != b:\n            if zoz[a] + zoz[b] not in s:\n                s[zoz[a] + zoz[b]] = [a + 1, b + 1]\n            else:\n                g = set()\n                g.add(a)\n                g.add(b)\n                g.add(-1 + s[zoz[a] + zoz[b]][0])\n                g.add(-1 + s[zoz[a] + zoz[b]][1])\n                if len(g) == 4:\n                    print('YES')\n                    print(*s[zoz[a] + zoz[b]], a + 1, b + 1)\n                    break\n    else:\n        continue\n    break\nelse:\n    print('NO')"]