["import sys\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 10 ** 16\nmd = 10 ** 9 + 7\n\ndef solve():\n    (n, m) = LI()\n    if n > m:\n        print(0)\n        return\n    ans = n ^ m\n    cur = ans & n\n    if cur:\n        i = cur.bit_length()\n        ans = ans >> i << i\n    else:\n        for i in range(32):\n            if ans >> i & 1 == 0 and n >> i & 1 == 0:\n                ans = ans >> i << i\n                ans |= 1 << i\n                break\n    print(ans)\nfor testcase in range(II()):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef fun(n, m):\n    nbin = bin(n)[2:]\n    mbin = bin(m + 1)[2:]\n    k = ''\n    if len(nbin) > len(mbin):\n        return 0\n    elif len(mbin) > len(nbin):\n        idx = len(mbin) - len(nbin)\n        k = mbin[:idx]\n        nbin = ''.join(['0'] * (len(mbin) - len(nbin))) + nbin\n    else:\n        idx = 0\n    while idx < len(nbin):\n        if nbin[idx] == mbin[idx]:\n            k += '0'\n        elif nbin[idx] == '0' and mbin[idx] == '1':\n            k += '1'\n        else:\n            k = k + ''.join(['0'] * (len(nbin) - idx))\n            break\n        idx += 1\n    return int(k, 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    print(fun(n, m))", "def solve():\n    (n, m) = map(int, input().split())\n    if n > m:\n        return 0\n    if n | m == m:\n        return n ^ (n | m + 1)\n    bm = bin(m)[2:]\n    bn = bin(n)[2:]\n    bn = '0' * (len(bm) - len(bn)) + bn\n    to_transform = list(bn)\n    for i in range(len(to_transform)):\n        if to_transform[i] == '1' and bm[i] == '0':\n            break\n        elif to_transform[i] == '0' and bm[i] == '1':\n            to_transform[i] = bm[i]\n    ans = n ^ (n | int(''.join(to_transform), 2))\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    x = 0\n    lastzz = 32\n    for i in range(32, -1, -1):\n        base = 1 << i\n        if not n & base and (not m & base):\n            lastzz = i\n        elif n & base and (not m & base):\n            print(x)\n            return\n        elif not n & base and m & base:\n            x |= base\n    x |= 1 << lastzz\n    x &= ~((1 << lastzz) - 1)\n    print(x)\ntc = int(input().strip())\nfor _ in range(tc):\n    solve()", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    answer = 0\n    if n > m:\n        print(0)\n    else:\n        nbin = bin(n)[2:]\n        mbin = bin(m)[2:]\n        nlen = len(nbin)\n        mlen = len(mbin)\n        nbin = '0' * (mlen - nlen) + nbin\n        data = ['0'] * mlen\n        flg = False\n        for i in range(mlen):\n            if nbin[i] == '0' and mbin[i] == '1':\n                data[i] = '1'\n            elif nbin[i] == '1' and mbin[i] == '0':\n                data[i] = '0'\n                flg = True\n                break\n        if not flg:\n            flg2 = -1\n            for i in range(mlen - 1, -1, -1):\n                if nbin[i] == '0' and mbin[i] == '0':\n                    data[i] = '1'\n                    flg2 = i\n                    break\n            if flg2 >= 0:\n                for i in range(flg2 + 1, mlen):\n                    data[i] = '0'\n            else:\n                data = ['1'] + ['0'] * mlen\n            answer = int(''.join(data), 2)\n            print(answer)\n        else:\n            answer = int(''.join(data), 2)\n            print(answer)", "import math\nimport heapq\nimport string\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nS = lambda : input()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (n, m) = M()\n    m += 1\n    bn = str(bin(n))[2:]\n    bm = str(bin(m))[2:]\n    if len(bn) < len(bm):\n        bn = '0' * (len(bm) - len(bn)) + bn\n    else:\n        bm = '0' * (len(bn) - len(bm)) + bm\n    s = ''\n    for i in range(len(bm)):\n        if bn[i] == '0' and bm[i] == '1':\n            s += '1'\n        elif bn[i] == '1' and bm[i] == '0':\n            s += '0' * (len(bm) - i)\n            break\n        else:\n            s += '0'\n    print(int(s, 2))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    m += 1\n    ans = p = 0\n    while m or n:\n        (i, j) = (m & 1, n & 1)\n        if i == 1 and j == 0:\n            ans += 2 ** p\n        elif i == 0 and j == 1:\n            ans = 0\n        p += 1\n        m >>= 1\n        n >>= 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import queue\n\ndef TestCase():\n    (n, m) = map(int, input().split())\n    m += 1\n    ans = 0\n    for k in range(30, -1, -1):\n        if n >= m:\n            break\n        if n >> k & 1 == m >> k & 1:\n            continue\n        if m >> k & 1:\n            ans |= 1 << k\n        else:\n            break\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    TestCase()", "def ans(n, m):\n    a = bin(n)[2:]\n    b = bin(m + 1)[2:]\n    x = len(a)\n    y = len(b)\n    a = '0' * (max(x, y) - len(a)) + a\n    b = '0' * (max(x, y) - len(b)) + b\n    an = ''\n    f = 0\n    for i in range(max(x, y)):\n        if f == 1:\n            an = an + '0'\n        elif a[i] == '0':\n            if b[i] == '0':\n                an = an + '0'\n            else:\n                an = an + '1'\n        elif b[i] == '0':\n            f = 1\n            an = an + '0'\n        else:\n            an = an + '0'\n    answer = int(an, 2)\n    return answer\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(ans(n, m))", "t = int(input())\n\ndef solve():\n    (n, m) = map(int, input().split())\n    res = 0\n    m += 1\n    for i in range(31, -1, -1):\n        mask = 1 << i\n        if n & mask < m & mask:\n            res += mask\n        if n & mask > m & mask:\n            break\n    print(res)\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    if m < n:\n        print(0)\n    else:\n        m += 1\n        n_b = list(bin(n)[2:])\n        m_b = list(bin(m)[2:])\n        n_b = ['0'] * (30 - len(n_b)) + n_b\n        m_b = ['0'] * (30 - len(m_b)) + m_b\n        msb = -1\n        for i in range(0, len(n_b)):\n            if n_b[i] == '1' and m_b[i] != '1':\n                msb = i\n                break\n        if msb == -1:\n            print(int(''.join(m_b), 2) ^ int(''.join(n_b), 2))\n        else:\n            for i in range(msb, len(n_b)):\n                if n_b[i] == '1':\n                    m_b[i] = '1'\n                else:\n                    m_b[i] = '0'\n            print(int(''.join(m_b), 2) ^ int(''.join(n_b), 2))", "import bisect\nimport copy\nimport decimal\nimport fractions\nimport heapq\nimport itertools\nimport math\nimport random\nimport sys\nfrom collections import Counter, deque, defaultdict\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop, heapify, heappushpop, _heappop_max, _heapify_max\n\ndef _heappush_max(heap, item):\n    heap.append(item)\n    heapq._siftdown_max(heap, 0, len(heap) - 1)\n\ndef _heappushpop_max(heap, item):\n    if heap and item < heap[0]:\n        (item, heap[0]) = (heap[0], item)\n        heapq._siftup_max(heap, 0)\n    return item\nfrom math import gcd as GCD, modf\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nt = int(readline())\nfor _ in range(t):\n    (N, M) = map(int, readline().split())\n    M += 1\n    flag = True\n    ans = 0\n    for i in range(31, -1, -1):\n        if not N >> i & 1 and M >> i & 1 and flag:\n            ans ^= 1 << i\n        if flag and N >> i & 1 and (not M >> i & 1):\n            flag = False\n    print(ans)", "def solve(n, m):\n    if n > m:\n        print(0)\n        return\n    result = 0\n    m += 1\n    a = bin(m)[2:]\n    b = bin(n)[2:]\n    if len(b) < len(a):\n        b = '0' * (len(a) - len(b)) + b\n    length = len(b)\n    for x in range(length):\n        if b[x] == '0' and a[x] == '1':\n            result += 2 ** (length - x - 1)\n        if b[x] == '1' and a[x] == '0':\n            break\n    print(result)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    solve(n, m)", "T = int(input())\nfor tc in range(T):\n    (n, m) = map(int, input().split())\n    p = m + 1\n    sn = bin(n)[2:]\n    sp = bin(p)[2:]\n    sn = '0' * max(0, len(sp) - len(sn)) + sn\n    sp = '0' * max(0, len(sn) - len(sp)) + sp\n    res = []\n    for i in range(len(sn)):\n        if sn[i] == sp[i]:\n            res.append('0')\n        elif sn[i] == '0' and sp[i] == '1':\n            res.append('1')\n        elif sn[i] == '1' and sp[i] == '0':\n            break\n    zero_pad = '0' * (len(sn) - len(res))\n    res.append(zero_pad)\n    res = ''.join(res)\n    print(int(res, 2))", "import sys\n\ndef mapInt():\n    return map(int, input().split())\n\ndef code_init():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve(n, m):\n    m += 1\n    ans = 0\n    for i in range(30, -1, -1):\n        if n >= m:\n            break\n        if n >> i & 1 == m >> i & 1:\n            continue\n        if m >> i & 1:\n            ans |= 1 << i\n            n |= 1 << i\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = mapInt()\n        res = solve(n, m)\n        print(res)\nmain()", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    m += 1\n    z = 0\n    for i in range(31)[::-1]:\n        if n >> i & 1:\n            m -= 1 << i\n        elif m >= 1 << i:\n            m -= 1 << i\n            z += 1 << i\n    print(z)", "tcase = int(input().strip())\nfor _ in range(tcase):\n    (n, m) = map(int, input().strip().split())\n    if n > m:\n        print(0)\n    else:\n        ans = 0\n        m += 1\n        for pos in range(30, -1, -1):\n            if n >> pos & 1 == m >> pos & 1:\n                continue\n            elif n >> pos & 1:\n                break\n            else:\n                ans |= 1 << pos\n        print(ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    z = 1 << 30\n    while z and n < m:\n        if not z & n and z & m:\n            mex += z\n            n += z\n        z >>= 1\n    print(mex)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    z = 1 << 30\n    while z and n < m:\n        if not z & n and z & m:\n            mex += z\n            n += z\n        z >>= 1\n    print(mex)", "import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef check(n, i):\n    return n >> i & 1\n\ndef solve():\n    (n, m) = R()\n    if m < n:\n        print(0)\n        return\n    ans = 0\n    m += 1\n    for i in range(30, -1, -1):\n        if True == check(n, i) and False == check(m, i):\n            break\n        elif False == check(n, i) and True == check(m, i):\n            ans |= 1 << i\n    print(ans)\n    return\nfor _ in range(I()):\n    solve()", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    z = 1 << 30\n    while z and n < m:\n        if not z & n and z & m:\n            mex += z\n            n += z\n        z >>= 1\n    print(mex)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    z = 1 << 30\n    while z and n < m:\n        if not z & n and z & m:\n            mex += z\n            n += z\n        z >>= 1\n    print(mex)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    z = 1 << 30\n    while z and n < m:\n        if not z & n and z & m:\n            mex += z\n            n += z\n        z >>= 1\n    print(mex)", "import typing\n\ndef solve(n: int, m: int) -> typing.NoReturn:\n    t = m + 1\n    l = t.bit_length()\n    k = 0\n    for i in range(l - 1, -1, -1):\n        if n ^ k >= t:\n            break\n        if ~t >> i & 1:\n            continue\n        k |= (1 << i) * (n >> i & 1 ^ 1)\n    print(k)\n\ndef main() -> typing.NoReturn:\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        solve(n, m)\nmain()", "def f(n, m):\n    ans = 0\n    m += 1\n    for i in range(30, -1, -1):\n        if n >= m:\n            break\n        if n & 1 << i == m & 1 << i:\n            continue\n        if m & 1 << i:\n            ans += 1 << i\n            n += 1 << i\n    return ans\nfor _ in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    print(f(a, b))", "import sys\nimport math\nimport random\nfrom queue import PriorityQueue as PQ\nfrom bisect import bisect_left as BSL\nfrom bisect import bisect_right as BSR\nfrom collections import OrderedDict as OD\nfrom collections import Counter\nfrom itertools import permutations\nmod = 1000000007\nMOD = mod\ntry:\n    sys.stdin = open('actext.txt', 'r')\n    OPENFILE = 1\nexcept:\n    pass\n\ndef get_ints():\n    return map(int, input().split())\n\ndef palindrome(s):\n    mid = len(s) // 2\n    for i in range(mid):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef check(i, n):\n    if 0 <= i < n:\n        return True\n    else:\n        return False\nt = int(input())\nfor tt in range(t):\n    (n, k) = get_ints()\n    n = '{:032b}'.format(n)\n    k = '{:032b}'.format(k + 1)\n    s = ''\n    for i in range(32):\n        if k[i] == '1' and n[i] == '1':\n            s += '0'\n        elif k[i] == '1':\n            s += '1'\n        elif n[i] == '1':\n            break\n        else:\n            s += '0'\n    s = s + '0' * (32 - len(s))\n    print(int(s, 2))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    m += 1\n    ans = 0\n    for i in range(30, -1, -1):\n        if not 1 << i & n and 1 << i & m:\n            ans += 1 << i\n        elif 1 << i & n and (not 1 << i & m):\n            break\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    m += 1\n    target = '0' * max(len(bin(n)[2:]) - len(bin(m)[2:]), 0) + bin(m)[2:]\n    current = '0' * max(len(bin(m)[2:]) - len(bin(n)[2:]), 0) + bin(n)[2:]\n    bink = '0b'\n    for i in range(len(current)):\n        if current[i] == target[i]:\n            bink += '0'\n        elif current[i] == '0' and target[i] == '1':\n            bink += '1'\n        elif current[i] == '1' and target[i] == '0':\n            break\n    bink += '0' * (len(current) - (len(bink) - 2))\n    print(int(bink, 2))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(31, -1, -1):\n        x = 1 << i\n        a = x & n\n        b = x & m + 1\n        if a == 0:\n            if b == 0:\n                continue\n            else:\n                ans |= x\n        if a == x:\n            if b == 0:\n                break\n            else:\n                continue\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mex = 0\n    m += 1\n    for i in range(30, -1, -1):\n        if n >= m:\n            break\n        elif n >> i == m >> i:\n            pass\n        elif m >> i:\n            mex |= 1 << i\n            n |= 1 << i\n    print(mex)", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    m += 1\n    for k in range(30, -1, -1):\n        x = n & 1 << k\n        y = m & 1 << k\n        if x < y:\n            ans = ans | 1 << k\n        elif x > y:\n            break\n    print(ans)", "def f(n):\n    l = []\n    while n > 0:\n        l.append(n % 2)\n        n //= 2\n    return l\n\ndef solve(n, m):\n    a = f(n)\n    b = f(m)\n    k = max(len(a), len(b))\n    for _ in range(k - len(a)):\n        a.append(0)\n    for _ in range(k - len(b)):\n        b.append(0)\n    for j in range(k - 1, -1, -1):\n        if a[j] == 1 and b[j] == 0:\n            return (n ^ m) // 2 ** (j + 1) * 2 ** (j + 1)\n    for j in range(k):\n        if a[j] == 0 and b[j] == 0:\n            return (n ^ m) // 2 ** (j + 1) * 2 ** (j + 1) + 2 ** j\n    return 2 ** k\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = 2 ** 31\n    ans = 0\n    while k:\n        if k > m + 1:\n            if k <= n:\n                break\n            else:\n                pass\n        elif k == m + 1:\n            if k <= n:\n                break\n            else:\n                ans += k\n                break\n        elif k <= n:\n            n %= k\n            m %= k\n        else:\n            ans += k\n            n %= k\n            m %= k\n        k //= 2\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    if n > m:\n        print(0)\n        return\n    for i in range(31):\n        c = 1 << i\n        if c > n and c > m:\n            r = 0\n            for j in range(i, -1, -1):\n                if n ^ r > m:\n                    print(r)\n                    break\n                if n ^ r | (1 << j + 1) - 1 <= m:\n                    r ^= 1 << j + 1\n                    print(r)\n                    return\n                if m & 1 << j != 0:\n                    if n & 1 << j == 0:\n                        r |= 1 << j\n                        if n ^ r > m:\n                            print(r)\n                            return\n            if n ^ r <= m:\n                r ^= 1\n                print(r)\n                return\n            print(r)\n            break\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor hh in range(0, t):\n    (n, m) = [int(x) for x in input().split()]\n    if n == 0:\n        print(m + 1)\n    elif m < n:\n        print(0)\n    else:\n        li = [0] * 34\n        idx = 33\n        norig = n\n        while n > 0:\n            if n % 2 == 1:\n                li[idx] = 1\n            n = n // 2\n            idx -= 1\n        li1 = []\n        po = 1\n        for i in range(33, -1, -1):\n            if li[i] == 0:\n                li1.append(po)\n            po = po * 2\n        n = m + 1 - norig\n        ans = 0\n        while n > 0:\n            su = 0\n            for i in range(0, len(li1)):\n                su += li1[i]\n                if su >= n:\n                    n = n - li1[i]\n                    ans += li1[i]\n                    break\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    m += 1\n    for i in range(30, -1, -1):\n        if n >= m:\n            break\n        if n >> i & 1 == m >> i & 1:\n            continue\n        if n >> i & 1 == 0:\n            ans |= 1 << i\n            n |= 1 << i\n    print(ans)", "n_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, m) = (int(x) for x in input().split())\n    m += 1\n    n2 = 1\n    while n2 <= n:\n        n2 <<= 1\n    answer = m // n2 * n2\n    m %= n2\n    n2 >>= 1\n    while n2 >= 1:\n        if n & n2 == n2:\n            m = max(m - n2, 0)\n        elif m >= n2:\n            answer += n2\n            m -= n2\n        n2 >>= 1\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if m < n:\n        print(0)\n        continue\n    ans = 0\n    for pos in range(30, -1, -1):\n        bitn = n & 1 << pos > 0\n        bitm = m + 1 & 1 << pos > 0\n        if bitn == bitm:\n            continue\n        elif bitn == 1 and bitm == 0:\n            break\n        elif bitn == 0 and bitm == 1:\n            ans += 1 << pos\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = bin(n)[2:]\n    d = '0' + bin(k)[2:]\n    c = '0' * (len(d) - len(c)) + c\n    ans = 0\n    for i in range(len(d)):\n        if d[i] == '1' and c[i] == '0':\n            ans += 1 << len(d) - i - 1\n        elif '1' * (len(d) - i - 1) == d[i + 1:] and c[i] == '0':\n            ans += 1 << len(d) - i - 1\n            break\n        elif d[i] == '0' and c[i] == '1':\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = bin(m + 1)[2:]\n    b = bin(n)[2:]\n    a1 = ['0'] * 30\n    a2 = ['0'] * 30\n    j = 29\n    for i in range(len(a) - 1, -1, -1):\n        a1[j] = a[i]\n        j -= 1\n    j = 29\n    for i in range(len(b) - 1, -1, -1):\n        a2[j] = b[i]\n        j -= 1\n    a3 = ['0'] * 30\n    for i in range(30):\n        if a1[i] == a2[i]:\n            a3[i] = '0'\n        elif a2[i] == '1' and a1[i] == '0':\n            break\n        else:\n            a3[i] = '1'\n    ans = int(''.join(a3), 2)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n > k:\n        ans = 0\n    else:\n        c = bin(n)[2:]\n        d = '0' + bin(k)[2:]\n        c = '0' * (len(d) - len(c)) + c\n        ans = 0\n        for i in range(len(d)):\n            if d[i] == '1' and c[i] == '0':\n                ans += 1 << len(d) - i - 1\n            elif '1' * (len(d) - i - 1) == d[i + 1:] and c[i] == '0':\n                ans += 1 << len(d) - i - 1\n                break\n            elif d[i] == '0' and c[i] == '1':\n                break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if n > m:\n        print(0)\n    else:\n        m += 1\n        binLstOfm = list(map(int, bin(m)[2:]))\n        binLstOfn = list(map(int, bin(n)[2:]))\n        binLstOfn = [0] * (len(binLstOfm) - len(binLstOfn)) + binLstOfn\n        s = ''\n        for i in range(len(binLstOfm)):\n            if binLstOfm[i] == 0 and binLstOfn[i] == 1:\n                break\n            if binLstOfm[i] == 1 and binLstOfn[i] == 0:\n                s += '1'\n            else:\n                s += '0'\n        while len(s) < len(binLstOfm):\n            s += '0'\n        print(int(s, 2))"]