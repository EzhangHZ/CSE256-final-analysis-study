["from sys import stdin\n\ndef main():\n\n    def input():\n        N = int(next(tokens))\n        A = []\n        B = []\n        Tm = []\n        for i in range(N):\n            A.append(int(next(tokens)))\n            B.append(int(next(tokens)))\n        for i in range(N):\n            Tm.append(int(next(tokens)))\n        return (N, A, B, Tm)\n\n    def solve():\n        (N, A, B, Tm) = input()\n        total_delay = 0\n        for i in range(N - 1):\n            total_delay += Tm[i] - (B[i] - A[i]) // 2\n            total_delay = max(total_delay, 0)\n        print(A[N - 1] + Tm[N - 1] + total_delay)\n    tokens = iter(stdin.read().split())\n    T = int(next(tokens))\n    for t in range(T):\n        solve()\nmain()", "for _ in range(0, int(input())):\n    n = int(input())\n    s = []\n    for i in range(0, n):\n        s.append(list(map(int, input().split())))\n    times = list(map(int, input().split()))\n    t = 0\n    bp = 0\n    for i in range(0, n):\n        (a, b) = s[i]\n        t += a - bp + times[i]\n        if i < n - 1:\n            t = max(t + (0 - (a - b) // 2), b)\n        bp = b\n    print(t)", "for _ in [0] * int(input()):\n    n = int(input())\n    r = [[*map(int, input().split())] for x in [0] * n]\n    a = [*map(int, input().split())]\n    arrival = r[0][0] + a[0]\n    for i in range(1, n):\n        arrival = max(arrival - (r[i - 1][0] - r[i - 1][1]) // 2, r[i - 1][1]) + r[i][0] - r[i - 1][1] + a[i]\n    print(arrival)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    stations = [list(map(int, input().split())) for _ in range(n)]\n    extra_time = [int(char) for char in input().split()]\n    waiting_time = [math.ceil((b - a) / 2) for (a, b) in stations]\n    cur_time = stations[0][0] + extra_time[0]\n    for (idx, (ex_arrival, ex_depart)) in enumerate(stations[:-1]):\n        station_waiting_time = waiting_time[idx]\n        if ex_depart - cur_time >= station_waiting_time:\n            real_departure_time = ex_depart\n        else:\n            real_departure_time = cur_time + station_waiting_time\n        travel_time_due_to_dist = stations[idx + 1][0] - ex_depart\n        travel_time = travel_time_due_to_dist + extra_time[idx + 1]\n        cur_time = real_departure_time + travel_time\n    return cur_time\nfor _ in range(int(input())):\n    print(solve())", "for _ in [0] * int(input()):\n    n = int(input())\n    w = [list(map(int, input().split())) for i in range(n)]\n    s = list(map(int, input().split()))\n    c = w[0][0]\n    for i in range(n - 1):\n        c += s[i]\n        c = max(c + (w[i][1] - w[i][0] + 1) // 2, w[i][1])\n        c += w[i + 1][0] - w[i][1]\n    print(c + s[-1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "t = int(input())\nans = []\nfor i in range(t):\n    a = [0]\n    b = [0]\n    n = int(input())\n    for j in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    time = 0\n    tm = [0]\n    tm += [int(x) for x in input().split()]\n    diff = 0\n    for k in range(1, n + 1):\n        time += a[k] - b[k - 1] + tm[k]\n        if k != n:\n            time += (b[k] - a[k] + 1) // 2\n            if time < b[k]:\n                time += b[k] - time\n        else:\n            continue\n    ans.append(time)\nfor _ in range(len(ans)):\n    print(ans[_])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]\n    b = [0]\n    for __ in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    tm = [0]\n    tm += [int(x) for x in input().split()]\n    dep = [0] * (n + 1)\n    arr = [0] * (n + 1)\n    for i in range(1, n + 1):\n        arr[i] = dep[i - 1] + (a[i] - b[i - 1]) + tm[i]\n        dep[i] = max(b[i], arr[i] + (b[i] - a[i] + 1) // 2)\n    print(arr[n])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = [0]\n    for i in range(n):\n        (ai, bi) = list(map(int, input().split()))\n        a.append(ai)\n        b.append(bi)\n    tm = list(map(int, input().split()))\n    time = 0\n    for i in range(n):\n        time += a[i] - b[i] + tm[i]\n        if i < n - 1:\n            time = max(b[i + 1], time + math.ceil((b[i + 1] - a[i]) / 2))\n    print(time)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        ans = 0\n        a = []\n        b = []\n        for i in range(n):\n            (a_i, b_i) = map(int, input().split())\n            a.append(a_i)\n            b.append(b_i)\n        tm = list(map(int, input().split()))\n        b_pred = 0\n        for i in range(n):\n            (a_i, b_i) = (a[i], b[i])\n            tm_i = tm[i]\n            ans += a_i - b_pred + tm_i\n            if i < n - 1:\n                if math.ceil((b_i - a_i) / 2) <= b_i - ans:\n                    ans = b_i\n                    b_pred = b_i\n                else:\n                    ans = ans + math.ceil((b_i - a_i) / 2)\n                    b_pred = b_i\n        print(ans)\nmain()", "cases = int(input())\nfor case in range(cases):\n    n = int(input())\n    h = [list(map(int, input().split())) for _ in range(n)]\n    late = list(map(int, input().split()))\n    t = h[0][0] + late[0]\n    arr = 0\n    for i in range(n - 1):\n        (a, b) = h[i]\n        (ap, bp) = h[i + 1]\n        dep = max(b, t + (b - a + 1) // 2)\n        t = dep + ap - b + late[i + 1]\n    print(t)", "import sys\nimport math\n\nclass DictList(dict):\n\n    def __setitem__(self, key, value):\n        try:\n            self[key].append(value)\n        except KeyError:\n            super(DictList, self).__setitem__(key, value)\n        except AttributeError:\n            super(DictList, self).__setitem__(key, [self[key], value])\n\ndef fn(n, x, m):\n    a = []\n    b = []\n    for i in range(2 * n):\n        if i % 2 == 0:\n            a.append(x[i])\n        else:\n            b.append(x[i])\n    dif = []\n    for i in range(n - 1):\n        dif.append(a[i + 1] - b[i] + m[i + 1])\n    wait = []\n    for i in range(n):\n        k = math.ceil((b[i] - a[i]) / 2)\n        wait.append(k)\n    t = 0\n    i = 0\n    t = m[i] + a[i]\n    while i != n - 1:\n        if t + wait[i] > b[i]:\n            t = t + wait[i]\n        else:\n            t = b[i]\n        t = t + dif[i]\n        i = i + 1\n    return t\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nt = data[0]\nl = 0\nfor i in range(t):\n    n = data[l + 1]\n    x = data[l + 2:l + 2 + 2 * n]\n    m = data[l + 2 + 2 * n:l + 2 + 2 * n + n]\n    l = l + 1 + 3 * n\n    print(fn(n, x, m))", "from sys import stdin\ninput = stdin.readline\n\ndef ceil(c):\n    if int(c) == c:\n        return int(c)\n    return int(c) + 1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef floor(f):\n    return int(f)\n\ndef sqrt(s):\n    return s ** 0.5\n\ndef max(a, b):\n    return a if a > b else b\n\ndef abs(a):\n    return a if a >= 0 else -1 * a\n\ndef min(a, b):\n    return a if a < b else b\n\ndef primeInRange(n):\n    l = [True] * n\n    for i in range(2, int(sqrt(n)) + 1):\n        if l[i - 1]:\n            for j in range(i + i, n + 1, i):\n                l[j - 1] = False\n    return l\n\ndef solve(n):\n    arival = []\n    d = []\n    wait = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        arival.append(a)\n        d.append(b)\n        wait.append(ceil((b - a) / 2))\n    tm = list(map(int, input().split()))\n    late = 0\n    for i in range(n):\n        late += tm[i]\n        arival[i] += late\n        if arival[i] + wait[i] <= d[i]:\n            late = 0\n        else:\n            late = arival[i] + wait[i] - d[i]\n    return arival[n - 1]\nfor _ in range(int(input())):\n    print(solve(int(input())))", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef process(n, ais, bis, tms):\n    t = 0\n    for i in range(1, n, 1):\n        t = t + (ais[i] - bis[i - 1] + tms[i])\n        d = ceil((bis[i] - ais[i]) / 2)\n        if t >= bis[i]:\n            t = t + d\n        else:\n            time_diff = bis[i] - t\n            if time_diff >= d:\n                t = t + time_diff\n            else:\n                t = t + d\n    t = t + (ais[n] - bis[n - 1] + tms[n])\n    print(t)\n\ndef main():\n    t = inp()\n    for case in range(t):\n        (ais, bis) = ([0], [0])\n        n = inp()\n        for _ in range(n):\n            (ai, bi) = inlt()\n            ais.append(ai)\n            bis.append(bi)\n        tms = inlt()\n        tms.insert(0, 0)\n        process(n, ais, bis, tms)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    delay = list(map(int, input().split()))\n    ans = delay[0]\n    for i in range(n - 1):\n        diff = arr[i][1] - arr[i][0]\n        if diff % 2 == 0:\n            diffi = diff // 2\n        else:\n            diffi = diff // 2\n        if ans != 0 and diff - diffi > 0:\n            if diffi <= ans:\n                ans = ans - diffi\n            else:\n                ans = 0\n        ans += delay[i + 1]\n    print(arr[n - 1][0] + ans)", "for _ in range(int(input())):\n    n = int(input())\n    station = [[0, 0]]\n    stay = [0]\n    time = 0\n    for _ in range(n):\n        tmp = list(map(int, input().split()))\n        station.append(tmp)\n        if (tmp[1] - tmp[0]) % 2 == 0:\n            stay.append((tmp[1] - tmp[0]) // 2)\n        else:\n            stay.append((tmp[1] - tmp[0]) // 2 + 1)\n    tmi = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        during = tmi[i - 1] + station[i][0] - station[i - 1][1]\n        time += during\n        if i == n:\n            break\n        time += stay[i]\n        if time >= station[i][1]:\n            continue\n        else:\n            time = station[i][1]\n    print(time)", "import math\n\ndef temp(t):\n    for i in range(t):\n        n = int(input())\n        a = [0]\n        b = [0]\n        for j in range(n):\n            tfun = [int(aq) for aq in input().split()]\n            a.append(tfun[0])\n            b.append(tfun[1])\n        qwertm = [int(j) for j in input().split()]\n        raqwer = 0\n        for j in range(1, n + 1):\n            prib = a[j] + qwertm[j - 1] + raqwer\n            if j == n:\n                print(prib)\n            stoit = math.ceil((b[j] - a[j]) / 2)\n            qazx = max(prib + stoit, b[j])\n            raqwer = qazx - b[j]\ntemp(int(input()))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    pair = [list(map(int, input().split())) for i in range(n)]\n    tm = list(map(int, input().split()))\n    if n == 1:\n        print(pair[0][0] + tm[0])\n        continue\n    ans = pair[0][0] + tm[0]\n    ans += math.ceil((pair[0][1] - pair[0][0]) / 2)\n    if ans < pair[0][1]:\n        ans += pair[0][1] - ans\n    for i in range(1, n - 1):\n        ans += pair[i][0] - pair[i - 1][1] + tm[i]\n        ans += math.ceil((pair[i][1] - pair[i][0]) / 2)\n        if ans < pair[i][1]:\n            ans += pair[i][1] - ans\n    ans += pair[-1][0] - pair[-2][1] + tm[-1]\n    print(ans)", "import math\n\ndef comp_travel_times(deps):\n    times = [0] * len(deps)\n    dep = 0\n    for i in range(len(deps)):\n        times[i] = deps[i][0] - dep\n        dep = deps[i][1]\n    return times\n\ndef solve_problem(n, deps, tms):\n    travel_times = comp_travel_times(deps)\n    t = 0\n    for i in range(n):\n        arr = t + travel_times[i] + tms[i]\n        if i == n - 1:\n            print(arr)\n        min_stay = math.ceil((deps[i][1] - deps[i][0]) / 2)\n        if deps[i][1] - arr <= min_stay:\n            arr += min_stay\n        else:\n            arr = deps[i][1]\n        t = arr\n\ndef solve():\n    t = int(input())\n    for i in range(0, t):\n        n = int(input())\n        deps = []\n        for j in range(n):\n            x = input().split()\n            ai = int(x[0])\n            bi = int(x[1])\n            deps.append((ai, bi))\n        tms = [int(x) for x in input().split()]\n        solve_problem(n, deps, tms)\nsolve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    time = []\n    wait = []\n    for i in range(n):\n        time.append(list(map(int, input().split())))\n        wait.append((time[i][1] - time[i][0] + 1) // 2)\n    tm = list(map(int, input().split()))\n    time.append([0, 0])\n    now = 0\n    for i in range(n - 1):\n        ai = time[i][0]\n        bi = time[i][1]\n        now += tm[i] + ai - time[i - 1][1]\n        now = max(bi, now + wait[i])\n    print(now + tm[n - 1] + time[n - 1][0] - time[n - 2][1])", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    n = inp()\n    s = []\n    for __ in range(n):\n        i = inlt()\n        s.append(i)\n    s.insert(0, [0, 0])\n    tm = inlt()\n    total = [s[i][0] - s[i - 1][1] + tm[i - 1] for i in range(1, n + 1)]\n    alt = [math.ceil((j[1] - j[0]) / 2) for j in s]\n    alt.remove(0)\n    time = 0\n    for i in range(n):\n        time += total[i]\n        if i < n - 1:\n            time += alt[i]\n            time = s[i + 1][1] if time < s[i + 1][1] else time\n    print(time)", "__version__ = '0.5'\n__date__ = '2021-03-16'\nimport sys\n\ndef solve(n, a, b, delay):\n    departed = 0\n    for i in range(n):\n        if i == 0:\n            travelled = a[i]\n        else:\n            travelled = a[i] - b[i - 1]\n        arrived = departed + travelled + delay[i]\n        stay = (b[i] - a[i] + 1) // 2\n        departed = max(b[i], arrived + stay)\n    return arrived\n\ndef main(argv=None):\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (a, b) = zip(*[list(map(int, input().split())) for _ in range(n)])\n        tm = list(map(int, input().split()))\n        print(solve(n, a, b, tm))\n    return 0\nSTATUS = main()\nsys.exit(STATUS)", "import math\nt = int(input())\nfor i in range(t):\n    n_stations = int(input())\n    ari = []\n    dept = []\n    for j in range(n_stations):\n        time = list(map(int, input().split()))\n        ari.append(time[0])\n        dept.append(time[1])\n    tm = list(map(int, input().split()))\n    prev_time = 0\n    arrival_time = 0\n    for j in range(n_stations):\n        if j != 0:\n            travel_time = ari[j] - dept[j - 1]\n        else:\n            travel_time = ari[j]\n        arrival_time = prev_time + travel_time + tm[j]\n        wait = math.ceil(abs(ari[j] - dept[j]) / 2)\n        prev_time = arrival_time + wait\n        prev_time = max(prev_time, dept[j])\n    print(arrival_time)", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    arrive = []\n    depart = []\n    delay = []\n    for pair in range(n):\n        (a, b) = map(int, input().split())\n        arrive.append(a)\n        depart.append(b)\n    delay = list(map(int, input().split()))\n    come = arrive[0] + delay[0]\n    go = max(depart[0], come + math.ceil((depart[0] - arrive[0]) / 2))\n    for i in range(1, n):\n        come = go + delay[i] + (arrive[i] - depart[i - 1])\n        go = max(depart[i], come + math.ceil(abs(depart[i] - arrive[i]) / 2))\n    print(come)", "from sys import stdin\n\ndef main():\n\n    def solve():\n        N = int(next(tokens))\n        A = []\n        B = []\n        Tm = []\n        for i in range(N):\n            A.append(int(next(tokens)))\n            B.append(int(next(tokens)))\n        for i in range(N):\n            Tm.append(int(next(tokens)))\n        total_delay = 0\n        for i in range(N - 1):\n            total_delay += Tm[i] - (B[i] - A[i]) // 2\n            total_delay = max(total_delay, 0)\n        print(A[N - 1] + Tm[N - 1] + total_delay)\n    tokens = iter(stdin.read().split())\n    T = int(next(tokens))\n    for t in range(T):\n        solve()\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        ab = list(map(int, input().split()))\n        arr.append((ab[0], ab[1]))\n    delays = list(map(int, input().split()))\n    arrival = 0\n    for i in range(n):\n        if i == 0:\n            arrival += arr[i][0] + delays[i]\n        else:\n            arrival += arr[i][0] - arr[i - 1][1] + delays[i]\n        if i != n - 1:\n            wait = math.ceil((arr[i][1] - arr[i][0]) / 2)\n            arrival += wait\n            if arrival < arr[i][1]:\n                arrival = arr[i][1]\n    print(arrival)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    (a, b) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, n + 1):\n        (a[i], b[i]) = list(map(int, input().split()))\n    tm = [0] + list(map(int, input().split()))\n    travel_time = 0\n    dep = 0\n    for i in range(1, n):\n        travel_time = dep + a[i] - b[i - 1] + tm[i]\n        dep = max(b[i], travel_time + ceil((b[i] - a[i]) / 2))\n    travel_time = dep + a[n] - b[n - 1] + tm[n]\n    print(travel_time)", "for _ in range(int(input())):\n    n = int(input())\n    a = [list(map(int, input().split())) for i in range(n)]\n    time = list(map(int, input().split()))\n    ans = a[0][0] + time[0]\n    for i in range(n - 1):\n        ans = max(a[i][1], ans + (a[i][1] - a[i][0] + 1) // 2)\n        ans += a[i + 1][0] - a[i][1] + time[i + 1]\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    tm = list(map(int, input().split()))\n    ans = 0\n    x = l[0][0]\n    y = tm[0]\n    dpt = x + y\n    pos = ceil((l[0][1] - l[0][0]) / 2)\n    dpt = max(l[0][1], x + y + pos)\n    ans = dpt\n    arr = x + y\n    for i in range(1, n):\n        x = l[i][0]\n        y = tm[i]\n        pos = ceil((l[i][1] - l[i][0]) / 2)\n        ans = ans + (l[i][0] - l[i - 1][1]) + y\n        arr = ans\n        dpt = max(l[i][1], arr + pos)\n        ans = dpt\n    print(arr)", "import math\nfor cases in range(int(input())):\n    n = int(input())\n    arr = [0]\n    dep = [0]\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        arr.append(a)\n        dep.append(b)\n    tm = list(map(int, input().split()))\n    tm = [0] + tm\n    curr = 0\n    for i in range(1, n + 1):\n        curr = curr + arr[i] - dep[i - 1] + tm[i]\n        if i != n:\n            curr += math.ceil((dep[i] - arr[i]) / 2)\n            curr = max(dep[i], curr)\n    print(curr)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    (a, b) = zip(*(R() for _ in [0] * n))\n    s = 0\n    for (x, y, z, w) in zip(a, b, (0, *b), R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        print(a[0][0] + b[0])\n    else:\n        res = a[0][0] + b[0]\n        if res + (a[0][1] - a[0][0] + 1) // 2 >= a[0][1]:\n            res = res + (a[0][1] - a[0][0] + 1) // 2\n        else:\n            res = a[0][1]\n        for j in range(1, n - 1):\n            res += a[j][0] - a[j - 1][1] + b[j]\n            res = max(a[j][1], res + (a[j][1] - a[j][0] + 1) // 2)\n        res += a[n - 1][0] - a[n - 2][1] + b[n - 1]\n        print(res)", "for _ in range(0, int(input())):\n    n = int(input())\n    s = []\n    for i in range(0, n):\n        s.append(list(map(int, input().split())))\n    times = list(map(int, input().split()))\n    flag = 0\n    res = 0\n    for i in range(0, n):\n        (a, b) = s[i]\n        flag += a - res + times[i]\n        if i < n - 1:\n            flag = max(flag + (0 - (a - b) // 2), b)\n        res = b\n    print(flag)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    stations = [list(map(int, input().split())) for _ in range(n)]\n    extra_time = [int(char) for char in input().split()]\n    cur_time = extra_time[0] + stations[0][0]\n    for (idx, (ex_arrival, ex_depart)) in enumerate(stations[:-1]):\n        station_waiting_time = math.ceil((ex_depart - ex_arrival) / 2)\n        if ex_depart - cur_time >= station_waiting_time:\n            depart_time = ex_depart\n        else:\n            depart_time = cur_time + station_waiting_time\n        cur_time = depart_time + stations[idx + 1][0] - ex_depart + extra_time[idx + 1]\n    return cur_time\nfor _ in range(int(input())):\n    print(solve())", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ab = []\n    for _ in range(n):\n        ab.append(list(map(int, input().split())))\n    tm = list(map(int, input().split()))\n    res = ab[0][0] + tm[0]\n    for i in range(1, n):\n        stop = (ab[i - 1][1] - ab[i - 1][0] + 1) // 2\n        res = ab[i][0] - ab[i - 1][1] + max(res + stop, ab[i - 1][1]) + tm[i]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [tuple(map(int, input().split())) for _ in range(n)]\n    b = list(map(int, input().split()))\n    t = a[0][0]\n    for i in range(n - 1):\n        t += b[i]\n        t = max(t + (a[i][1] - a[i][0] + 1) // 2, a[i][1])\n        t += a[i + 1][0] - a[i][1]\n    print(t + b[n - 1])", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nt = int(wtf[0])\nk = 1\nfor i in range(t):\n    n = int(wtf[i + k])\n    A = []\n    B = [0]\n    for j in range(n):\n        (a, b) = map(int, wtf[i + k + j + 1].split())\n        A.append(a)\n        B.append(b)\n    T = list(map(int, wtf[i + k + n + 1].split()))\n    ct = 0\n    lt = 0\n    for l in range(n):\n        td = A[l] - B[l] + T[l]\n        ct += td\n        st = math.ceil((B[l + 1] - A[l]) / 2)\n        lt = ct\n        if ct < B[l + 1] and B[l + 1] - ct >= st:\n            ct = B[l + 1]\n        else:\n            ct += st\n    print(lt)\n    k += n + 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    b = []\n    t = []\n    for i in range(n):\n        (f, s) = map(int, input().split())\n        a.append(f)\n        b.append(s)\n    b.append(0)\n    t = list(map(int, input().split()))\n    time = 0\n    for i in range(n - 1):\n        time += a[i] - b[i - 1] + t[i]\n        if time + (b[i] - a[i] + 1) // 2 < b[i]:\n            time = b[i]\n        else:\n            time += (b[i] - a[i] + 1) // 2\n    time += a[n - 1] - b[n - 2] + t[n - 1]\n    print(time)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    tm = list(map(int, input().split()))\n    t = a[0] + tm[0]\n    for i in range(n - 1):\n        dep = max(b[i], t + (b[i] - a[i] + 1) // 2)\n        t = dep + a[i + 1] - b[i] + tm[i + 1]\n    print(t)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    time = []\n    wait = []\n    for i in range(n):\n        time.append(list(map(int, input().split())))\n        wait.append((time[i][1] - time[i][0] + 1) // 2)\n    tm = list(map(int, input().split()))\n    time.append([0, 0])\n    now = 0\n    for i in range(n - 1):\n        ai = time[i][0]\n        bi = time[i][1]\n        now += tm[i] + ai - time[i - 1][1]\n        if now > ai:\n            now = bi if now + wait[i] < bi else now + wait[i]\n        else:\n            now += bi - ai\n    print(now + tm[n - 1] + time[n - 1][0] - time[n - 2][1])", "from math import ceil\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    ab = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        ab.append([a, b])\n    tm = list(map(int, input().split()))\n    (enter, out, min_stay, diff) = (0, 0, 0, ab[0][0])\n    for (i, [a, b]) in enumerate(ab):\n        if i > 0:\n            diff = a - ab[i - 1][1]\n        enter = out + diff + tm[i]\n        min_stay = ceil((b - a) / 2)\n        out = max(b, enter + min_stay)\n    print(enter)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [(0, 0)]\n    for i in range(n):\n        (s, d) = map(int, input().split())\n        a.append((s, d))\n    delay = list(map(int, input().split()))\n    s = 0\n    for i in range(0, n):\n        s += int((a[i][1] - a[i][0]) / 2 + 0.5)\n        if s < a[i][1]:\n            s = a[i][1]\n        s += a[i + 1][0] - a[i][1]\n        s += delay[i]\n    print(s)", "for _ in range(int(input())):\n    t = int(input())\n    a = []\n    for i in range(t):\n        (x, y) = map(int, input().split())\n        a.append([x, y])\n    l = list(map(int, input().split()))\n    if t == 1:\n        print(a[0][0] + l[0])\n        continue\n    s = a[0][0] + l[0]\n    p = a[0][1] - a[0][0] + 1\n    s += p // 2\n    s = max(s, a[0][1])\n    for i in range(1, t - 1):\n        s += a[i][0] - a[i - 1][1] + l[i]\n        p = a[i][1] - a[i][0] + 1\n        s += p // 2\n        s = max(a[i][1], s)\n    s += a[-1][0] - a[-2][1] + l[-1]\n    print(s)", "import math\n\ndef func(t):\n    for i in range(t):\n        n = int(input())\n        a = [0]\n        b = [0]\n        for j in range(n):\n            temp = [int(q) for q in input().split()]\n            a.append(temp[0])\n            b.append(temp[1])\n        tm = [int(j) for j in input().split()]\n        sar = 0\n        for j in range(1, n + 1):\n            prib = a[j] + tm[j - 1] + sar\n            if j == n:\n                print(prib)\n            stoit = math.ceil((b[j] - a[j]) / 2)\n            otb = max(prib + stoit, b[j])\n            sar = otb - b[j]\nt = int(input())\nfunc(t)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0]\n    b = [0]\n    for i in range(n):\n        (c, d) = map(int, input().split())\n        a.append(c)\n        b.append(d)\n    l = list(map(int, input().split()))\n    t = 0\n    d = 0\n    temp = 0\n    for i in range(1, n + 1):\n        t += a[i] - b[i - 1] + l[i - 1]\n        temp = (b[i] - a[i] + 1) // 2\n        if i == n:\n            break\n        if t + temp <= b[i]:\n            t = b[i]\n        else:\n            t += temp\n    print(t)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    b = []\n    for i in range(0, n):\n        (x, y) = map(int, input().split())\n        a.append(x)\n        b.append(y)\n    tm = list(map(int, input().split()))\n    ans = a[0] + tm[0]\n    for i in range(n - 1):\n        x = max(b[i], ans + int((b[i] - a[i] + 1) / 2))\n        ans = x + a[i + 1] - b[i] + tm[i + 1]\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    tm = list(map(int, input().split()))\n    t = a[0] + tm[0]\n    for i in range(n - 1):\n        dep = max(b[i], t + (b[i] - a[i] + 1) // 2)\n        t = dep + a[i + 1] - b[i] + tm[i + 1]\n    print(t)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    stat = [(0, 0)]\n    for i in range(n):\n        j = tuple(map(int, input().split()))\n        stat.append(j)\n    tm = list(map(int, input().split()))\n    current_time = 0\n    for i in range(1, n + 1):\n        pass_time = stat[i][0] - stat[i - 1][1] + tm[i - 1]\n        if i == n:\n            station_time = 0\n            current_time += station_time + pass_time\n            break\n        else:\n            station_time = ceil((stat[i][1] - stat[i][0]) / 2)\n            current_time += station_time + pass_time\n        if current_time <= stat[i][1]:\n            current_time = stat[i][1]\n        else:\n            pass\n    print(current_time)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ad = []\n    for i in range(n):\n        ad.append(list(map(int, input().split())))\n    et = list(map(int, input().split()))\n    delay = 0\n    for i in range(n - 1):\n        depart = max(ad[i][1], ad[i][0] + delay + et[i] + math.ceil((ad[i][1] - ad[i][0]) / 2))\n        delay = depart - ad[i][1]\n    print(ad[-1][0] + delay + et[-1])", "for t in range(int(input())):\n    n = int(input())\n    a_list = []\n    b_list = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        a_list.append(a)\n        b_list.append(b)\n    tm = list(map(int, input().split()))\n    answer = a_list[0] + tm[0]\n    for i in range(n - 1):\n        st_stop = max(b_list[i], answer + (b_list[i] - a_list[i] + 1) // 2)\n        answer = st_stop + a_list[i + 1] - b_list[i] + tm[i + 1]\n    print(answer)", "import math\n\ndef solve(n, sch, delays):\n    (at, dt) = (0, 0)\n    psdt = 0\n    for (s, d) in zip(sch, delays):\n        (ai, bi) = s\n        at = dt + (ai - psdt) + d\n        dt = max(bi, at + math.ceil((bi - ai) / 2))\n        psdt = bi\n    return at\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sch = []\n    for n_i in range(n):\n        (a, b) = map(int, input().split())\n        sch.append((a, b))\n    delays = list(map(int, input().split()))\n    result = solve(n, sch, delays)\n    print(result)", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = [0]\n    b = [0]\n    for i in range(n):\n        (x, y) = getint()\n        a.append(x)\n        b.append(y)\n    tt = getint()\n    t = [0] + tt\n    current = 0\n    ans = 0\n    for i in range(1, n):\n        current += a[i] - b[i - 1] + t[i]\n        current = max(current + math.ceil((b[i] - a[i]) / 2), b[i])\n    current += a[-1] - b[-2] + t[-1]\n    print(current)\nfor _ in range(int(input())):\n    solve()", "from math import ceil, floor, sqrt\n\ndef fun(ls, d):\n    prv = 0\n    original = ls.copy()\n    time_to_reach = []\n    for (time, delay) in zip(ls, d):\n        arrival = time[0]\n        departure = time[1]\n        temp = arrival - prv + delay\n        time_to_reach.append(temp)\n        prv = departure\n    late_departure = 0\n    i = 0\n    ans = []\n    for (time, delay) in zip(ls, time_to_reach):\n        temp = late_departure + delay\n        current = ls[i]\n        ans.append(temp)\n        original_current = original[i]\n        start = original_current[0]\n        end = original_current[1]\n        val = ceil((end - start) / 2)\n        if temp + val <= end:\n            late_departure = end\n        else:\n            late_departure = temp + val\n        i += 1\n    print(ans[-1])\nT = int(input())\nfor i in range(T):\n    ls = []\n    n = int(input())\n    for i in range(n):\n        lt = list(map(int, input().split()))\n        ls.append(lt)\n    delay = list(map(int, input().split()))\n    fun(ls, delay)", "from math import ceil, floor, sqrt\n\ndef fun(ls, d):\n    prv = 0\n    original = ls.copy()\n    time_to_reach = []\n    for (time, delay) in zip(ls, d):\n        arrival = time[0]\n        departure = time[1]\n        temp = arrival - prv + delay\n        time_to_reach.append(temp)\n        prv = departure\n    late_departure = 0\n    i = 0\n    ans = []\n    for (time, delay) in zip(ls, time_to_reach):\n        temp = late_departure + delay\n        current = ls[i]\n        ans.append(temp)\n        original_current = original[i]\n        start = original_current[0]\n        end = original_current[1]\n        val = ceil((end - start) / 2)\n        if temp + val <= end:\n            late_departure = end\n        else:\n            late_departure = temp + val\n        i += 1\n    print(ans[-1])\nT = int(input())\nfor i in range(T):\n    ls = []\n    n = int(input())\n    for i in range(n):\n        lt = list(map(int, input().split()))\n        ls.append(lt)\n    delay = list(map(int, input().split()))\n    fun(ls, delay)", "import math\ntestcases = int(input())\nwhile testcases > 0:\n    n = int(input())\n    myList = []\n    i = n\n    while i > 0:\n        (a, b) = map(int, input().split())\n        myList.append([a, b])\n        i -= 1\n    myArray = list(map(int, input().split()))\n    arrivalTime = myList[0][0] + myArray[0]\n    departureTime = max(arrivalTime + math.ceil((myList[0][1] - myList[0][0]) / 2), myList[0][1])\n    i = 1\n    while i < len(myList):\n        arrivalTime = departureTime + myList[i][0] - myList[i - 1][1] + myArray[i]\n        departureTime = max(arrivalTime + math.ceil((myList[i][1] - myList[i][0]) / 2), myList[0][1])\n        i += 1\n    print(arrivalTime)\n    testcases -= 1", "t = int(input())\nfor _ in range(t):\n    l = list()\n    waits = list()\n    times = list()\n    n = int(input())\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n        wait = (b - a + 1) // 2\n        waits.append(wait)\n    times = list(map(int, input().split()))\n    current = 0\n    for j in range(n):\n        if j == 0:\n            current = l[0][0] + times[0]\n        else:\n            current += times[j]\n        if j == n - 1:\n            print(current)\n            break\n        if current + waits[j] > l[j][1]:\n            current += waits[j]\n        else:\n            current = l[j][1]\n        current += l[j + 1][0] - l[j][1]", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [[0, 0]]\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    tm = list(map(int, input().split()))\n    time_taken = 0\n    for j in range(1, n):\n        time_taken += l[j][0] - l[j - 1][1] + tm[j - 1]\n        val1 = math.ceil((l[j][1] - l[j][0]) / 2)\n        val2 = l[j][1] - time_taken\n        if val2 <= 0:\n            time_taken += val1\n        else:\n            time_taken = max(l[j][1], time_taken + val1)\n    time_taken += l[-1][0] - l[-2][1] + tm[-1]\n    print(time_taken)", "import math\n\ndef solve(p, n, tm):\n    prev = 0\n    for i in range(n):\n        (a, b) = point[i]\n        md = math.ceil((b - a) / 2)\n        a += tm[i] + prev\n        if i == n - 1:\n            return a\n        if md <= b - a:\n            continue\n        new_b = a + md\n        prev = new_b - b\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    point = []\n    for i in range(n):\n        point.append(list(map(int, input().split())))\n    tm = list(map(int, input().split()))\n    print(solve(point, n, tm))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list()\n    b = list()\n    for i in range(n):\n        x = input()\n        a.append(int(x.split()[0]))\n        b.append(int(x.split()[1]))\n    tmi = input()\n    timeDiff = list()\n    tm = tmi.split()\n    diff = list()\n    for i in range(n):\n        diff.append(math.ceil((b[i] - a[i]) / 2))\n    a[0] += int(tm[0])\n    for i in range(0, n - 1):\n        timeDiff.append(a[i + 1] - b[i] + int(tm[i + 1]))\n    actualArrival = list()\n    for i in range(n - 1):\n        b[i] = max(b[i], a[i] + diff[i])\n        a[i + 1] = b[i] + timeDiff[i]\n    print(a[n - 1])\n    t -= 1", "import math\nt = int(input())\nx_list = []\nif t <= 100 and t >= 1:\n    for j in range(t):\n        n = int(input())\n        a = []\n        b = []\n        for i in range(n):\n            (a_list, b_list) = input().split()\n            a_list = int(a_list)\n            b_list = int(b_list)\n            if a_list >= 1 and b_list >= a_list and (1000000 >= b_list):\n                a.append(a_list)\n                b.append(b_list)\n        tm = [int(tm) for tm in input().split()]\n        tmar1 = a[0] + tm[0]\n        d1 = math.ceil((b[0] - a[0]) / 2)\n        if tmar1 + d1 >= b[0]:\n            tmbr1 = tmar1 + d1\n        else:\n            tmbr1 = b[0]\n        x = tmbr1\n        if n == 1:\n            x_list.append(tmar1)\n        else:\n            for i in range(1, n):\n                if i != n - 1:\n                    tr = a[i] - b[i - 1] + tm[i]\n                    x = x + tr\n                    d = math.ceil((b[i] - a[i]) / 2)\n                    if x + d >= b[i]:\n                        x = x + d\n                    else:\n                        x = b[i]\n                elif i == n - 1:\n                    tr = a[i] - b[i - 1] + tm[i]\n                    x = x + tr\n            x_list.append(x)\nfor i in x_list:\n    print(i)", "t = int(input())\nfor g in range(t):\n    n = int(input())\n    a = []\n    b = []\n    tm = []\n    for i in range(n):\n        (f, s) = map(int, input().split())\n        a.append(f)\n        b.append(s)\n    tm = list(map(int, input().split()))\n    vp = 0\n    vo = 0\n    for i in range(n):\n        if i == 0:\n            vp = a[0] + tm[0]\n        else:\n            vp = vo + a[i] - b[i - 1] + tm[i]\n        vo = max(b[i], vp + (b[i] - a[i] + 1) // 2)\n    print(vp)", "import math\ntest_cases = int(input())\n\ndef calculate(ab, tm):\n    t = 0\n    for i in range(len(tm)):\n        t += tm[i]\n        if i == 0:\n            t += ab[i][0]\n        if i == len(tm) - 1:\n            print(t)\n            return\n        t += math.ceil((ab[i][1] - ab[i][0]) / 2)\n        if ab[i][1] > t:\n            t = ab[i][1]\n        t = t - ab[i][1] + ab[i + 1][0]\nfor _ in range(test_cases):\n    tm = []\n    ab = []\n    n = int(input())\n    for i in range(n):\n        ab_str = input().split(' ')\n        ab_int = [int(a) for a in ab_str]\n        ab.append(ab_int)\n    tm_str = input().split(' ')\n    tm = [int(t) for t in tm_str]\n    calculate(ab, tm)", "from math import ceil\n\ndef solve():\n    n = int(input())\n    time = [[0, 0]]\n    for _ in range(n):\n        time.append(list(map(int, input().split())))\n    delay = []\n    delay.extend(list(map(int, input().split())))\n    (arrival, prevDep) = (0, 0)\n    for i in range(1, n + 1):\n        travel = abs(time[i][0] - time[i - 1][1])\n        arrival = prevDep + travel + delay[i - 1]\n        wait = ceil(abs(time[i][0] - time[i][1]) / 2)\n        prevDep = arrival + wait\n        prevDep = max(prevDep, time[i][1])\n    print(arrival)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    AB = [list(map(int, input().strip().split())) for i in range(n)]\n    TM = list(map(int, input().strip().split()))\n    result = AB[0][0] + TM[0]\n    for i in range(n - 1):\n        result = max(result + (AB[i][1] - AB[i][0] + 1) // 2, AB[i][1])\n        result += AB[i + 1][0] - AB[i][1] + TM[i + 1]\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    curr = 0\n    a = []\n    b = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append(x)\n        b.append(y)\n    t = list(map(int, input().split()))\n    for i in range(n):\n        if i == 0:\n            curr += t[i] + a[i]\n        else:\n            curr += t[i] + a[i] - b[i - 1]\n        temp = (b[i] - a[i]) / 2\n        if int(temp) == temp:\n            temp = int(temp)\n        else:\n            temp = int(temp) + 1\n        if curr + temp >= b[i] and i != n - 1:\n            curr += temp\n        elif i != n - 1:\n            curr = b[i]\n    print(curr)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (ai, bi) = [int(y) for y in input().split()]\n        a.append((ai, bi, math.ceil((bi - ai) / 2)))\n    t = [int(y) for y in input().split()]\n    tm = 0\n    for i in range(n):\n        if i == 0:\n            tm += t[i] + a[i][0]\n        else:\n            tm += t[i] + a[i][0] - a[i - 1][1]\n        if i == n - 1:\n            print(tm)\n            break\n        if tm + a[i][2] >= a[i][1]:\n            tm += a[i][2]\n        else:\n            tm = a[i][1]", "import sys\nimport math\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    ad = []\n    for i in range(n):\n        (a, d) = map(int, input().split())\n        e = math.ceil((d - a) / 2)\n        ad.append([a, d, e])\n    tm = list(map(int, input().split()))\n    it = 0\n    nt = [tm[0] + ad[0][0]]\n    for i in range(n - 1):\n        nt.append(ad[i + 1][0] - ad[i][1] + tm[i + 1])\n    it = nt[0]\n    for i in range(n - 1):\n        it += ad[i][2]\n        if it >= ad[i][1]:\n            pass\n        else:\n            it = ad[i][1]\n        it += nt[i + 1]\n    print(it)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    curr = 0\n    (arrival, departure) = ([], [])\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        arrival.append(a)\n        departure.append(b)\n    arr = list(map(int, input().split()))\n    prev = 0\n    for i in range(n):\n        duration = arrival[i] - prev + arr[i]\n        curr += duration\n        if i != n - 1:\n            stop = math.ceil((departure[i] - arrival[i]) / 2)\n            curr += stop\n            while curr < departure[i]:\n                curr += 1\n            prev = departure[i]\n    print(curr)", "from math import ceil\n\ndef solve(a, b, t):\n    miint = []\n    for i in range(n):\n        miint.append(ceil((b[i] - a[i]) / 2))\n    for i in range(n - 1):\n        a[i] = a[i] + t[i]\n        if b[i] - a[i] < miint[i]:\n            a[i + 1] += miint[i] - (b[i] - a[i])\n    return a[-1] + t[-1]\nt = int(input())\nfor _ in range(t):\n    a = []\n    b = []\n    n = int(input())\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    t = list(map(int, input().split()))\n    print(solve(a, b, t))", "t = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    ai = [0]\n    bi = [0]\n    for i in range(n):\n        (a, b) = list(map(int, input().split()))\n        ai.append(a)\n        bi.append(b)\n    ts = list(map(int, input().split()))\n    time = 0\n    for i in range(1, n + 1):\n        arrival = time + (ai[i] - bi[i - 1]) + ts[i - 1]\n        departure = max(bi[i], arrival + (bi[i] - ai[i] + 1) // 2)\n        time = departure\n    print(arrival)", "import sys, os.path\nimport math\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    dep = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        arr.append(a)\n        dep.append(b)\n    delay = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if i == 0:\n            ans = arr[0] + delay[0]\n        else:\n            ans += arr[i] + delay[i] - dep[i - 1]\n        if ans + math.ceil((dep[i] - arr[i]) / 2) > dep[i]:\n            ans += math.ceil((dep[i] - arr[i]) / 2)\n        else:\n            ans = dep[i]\n    if n >= 2:\n        ans += delay[-1] + (arr[n - 1] - dep[n - 2])\n    else:\n        ans += delay[-1] + arr[-1]\n    print(ans)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append(x)\n        b.append(y)\n    delay = [int(i) for i in input().split()]\n    d = 0\n    for i in range(n - 1):\n        d += delay[i]\n        x = math.ceil((b[i] - a[i]) / 2)\n        if b[i] <= d + a[i] + x:\n            d = d - (b[i] - a[i] - x)\n    print(a[n - 1] + d + delay[n - 1])", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (a, b) = ([], [])\n    for no in range(n):\n        (ai, bi) = list(map(int, input().split()))\n        a.append(ai)\n        b.append(bi)\n    b = [0] + b\n    tm = list(map(int, input().split()))\n    cur_time = 0\n    for i in range(n):\n        cur_time += a[i] - b[i] + tm[i]\n        diff = ceil((b[i + 1] - a[i]) / 2)\n        if i == n - 1:\n            break\n        cur_time = max(b[i + 1], cur_time + diff)\n    print(cur_time)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = []\n    B = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        A.append(a)\n        B.append(b)\n    l = list(map(int, input().split()))\n    count = l[0] + A[0]\n    for i in range(n - 1):\n        count = max(count + math.ceil((B[i] - A[i]) / 2), B[i])\n        count += A[i + 1] - B[i] + l[i + 1]\n    print(count)", "import math\nimport sys\nimport collections\nimport bisect\nimport time\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n = int(input())\n    time = []\n    for i in range(n):\n        time.append(get_list())\n    arr = get_list()\n    ans = 0\n    prev = 0\n    for i in range(n):\n        (a, b) = time[i]\n        arrival = a + arr[i] + prev\n        min_stop = math.ceil((b - a) / 2)\n        departure = max(arrival + min_stop, b)\n        prev = departure - b\n        if i == n - 1:\n            print(arrival)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n    delay = list(map(int, input().split()))\n    l = [[0, 0]] + l\n    i = 1\n    ct = 0\n    bac = 0\n    while i <= n:\n        ct = bac + l[i][0] - l[i - 1][1] + delay[i - 1]\n        tar = math.ceil((l[i][1] - l[i][0]) / 2)\n        bac = max(l[i][1], ct + tar)\n        i += 1\n    print(ct)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nans = []\ntests = inp()\nfor _ in range(tests):\n    n = inp()\n    a = []\n    b = []\n    for _ in range(n):\n        tmp = inlt()\n        (tmp_a, tmp_b) = (tmp[0], tmp[1])\n        a.append(tmp_a)\n        b.append(tmp_b)\n    tm = inlt()\n    time = 0\n    prev_b = 0\n    for (i, t) in enumerate(tm):\n        time += a[i] - prev_b + t\n        if i < len(tm) - 1:\n            time += max(math.ceil((b[i] - a[i]) / 2), b[i] - time)\n        prev_b = b[i]\n    ans.append(time)\nfor a in ans:\n    print(a)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [0]\n    b = [0]\n    for j in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    tm = [int(j) for j in input().split()]\n    ras = 0\n    for j in range(1, n + 1):\n        prib = a[j] + tm[j - 1] + ras\n        if j == n:\n            print(prib)\n        stoit = math.ceil((b[j] - a[j]) / 2)\n        otb = max(prib + stoit, b[j])\n        ras = otb - b[j]", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        (ai, bi) = [int(i) for i in input().strip().split()]\n        a.append(ai)\n        b.append(bi)\n    extra_time = [int(i) for i in input().strip().split()]\n    real_b = [0]\n    curr_time = 0\n    for i in range(n):\n        if i != 0:\n            time_taken = a[i] - b[i - 1] + extra_time[i]\n        else:\n            time_taken = a[i] + extra_time[i]\n        least_time = math.ceil((b[i] - a[i]) / 2)\n        if i != n - 1:\n            if curr_time + time_taken + least_time >= b[i]:\n                curr_time = curr_time + time_taken + least_time\n            else:\n                curr_time = b[i]\n        else:\n            curr_time = curr_time + time_taken\n    print(curr_time)", "from math import ceil\ncounter = int(input())\nfor count in range(counter):\n    n = int(input())\n    ab = []\n    for i in range(n):\n        ab.append(list(map(int, input().split())))\n    tm = list(map(int, input().split()))\n    t = 0\n    for i in range(n):\n        if i == 0:\n            t += tm[0] + ab[0][0]\n        else:\n            t += ab[i][0] - ab[i - 1][1] + tm[i]\n        if i == n - 1:\n            break\n        dt = max(ceil((ab[i][1] - ab[i][0]) / 2), ab[i][1] - t)\n        t += dt\n    print(t)", "import math\n\ndef func(n, ab, t):\n    ans = ab[0][0] + t[0]\n    dep = max(ab[0][1], ans + math.ceil((ab[0][1] - ab[0][0]) / 2))\n    for i in range(1, n):\n        (ai, bim1) = (ab[i][0], ab[i - 1][1])\n        tmi = t[i]\n        ans = dep + ai - bim1 + tmi\n        dep = max(ab[i][1], ans + math.ceil((ab[i][1] - ab[i][0]) / 2))\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ab = [list(map(int, input().split())) for _ in range(n)]\n    t = list(map(int, input().split()))\n    print(func(n, ab, t))", "import math\n\ndef alexey_and_train(n, t, tm):\n    arr = 0\n    halt = 0\n    for i in range(1, n + 1):\n        arr += halt\n        arr += t[i][0] - t[i - 1][1] + tm[i]\n        halt = max(math.ceil((t[i][1] - t[i][0]) / 2), t[i][1] - arr)\n    print(arr)\ntc = int(input().strip())\nfor i in range(tc):\n    n = int(input().strip())\n    t = [[0, 0]]\n    for j in range(n):\n        t.append(list(map(int, input().strip().split())))\n    tm = [0]\n    tm.extend(list(map(int, input().strip().split())))\n    alexey_and_train(n, t, tm)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n,) = R()\n    a = []\n    b = []\n    s = 0\n    for _ in [0] * n:\n        (x, y) = R()\n        a += (x,)\n        b += (y,)\n    for (x, y, z, w) in zip(a, b, [0] + b, R()):\n        p = s + x - z + w\n        s = p + max(y - x + 1 >> 1, y - p)\n    print(p)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = []\n    for j in range(n):\n        m.append([int(k) for k in input().split()])\n    w = [int(j) for j in input().split()]\n    res = 0\n    for j in range(n - 1):\n        res += m[j][0] - (m[j - 1][1] if j > 0 else 0)\n        res += w[j]\n        res += ceil((m[j][1] - m[j][0]) / 2)\n        res = max(res, m[j][1])\n    res += m[-1][0] - (m[-2][1] if n > 1 else 0)\n    res += w[-1]\n    print(res)", "from sys import stdin as f\nimport math\n\ndef calculate_the_time(pointers, times):\n    current_time = 0\n    for i in range(len(pointers)):\n        if i == 0:\n            prev_b = 0\n        else:\n            prev_b = pointers[i - 1][1]\n        a = pointers[i][0]\n        b = pointers[i][1]\n        c = times[i]\n        time_passed = a - prev_b + c\n        current_time = current_time + time_passed\n        if i == n - 1:\n            return current_time\n        current_time = current_time + math.ceil((b - a) / 2)\n        if current_time >= b:\n            continue\n        else:\n            current_time = b\n    return current_time\nt = int(f.readline().strip())\nfor _ in range(t):\n    n = int(f.readline().strip())\n    pointers = []\n    for i in range(n):\n        (a, b) = [int(i) for i in f.readline().strip().split()]\n        pointers.append((a, b))\n    times = [int(i) for i in f.readline().strip().split()]\n    current_time = calculate_the_time(pointers, times)\n    print(current_time)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        lis.append(list(map(int, input().split())))\n    t = list(map(int, input().split()))\n    time = 0\n    for i in range(n):\n        if i == 0:\n            travel_time = lis[0][0] + t[0]\n        else:\n            travel_time = lis[i][0] - lis[i - 1][1] + t[i]\n        time += travel_time\n        if i == n - 1:\n            break\n        if time + math.ceil((lis[i][1] - lis[i][0]) / 2) > lis[i][1]:\n            time += math.ceil((lis[i][1] - lis[i][0]) / 2)\n        else:\n            time = lis[i][1]\n    print(time)", "try:\n    import math\n    for _ in range(int(input())):\n        n = int(input())\n        arr = []\n        for _ in range(n):\n            arr.append(list(map(int, input().split())))\n        trim = list(map(int, input().split()))\n        if n == 1:\n            print(arr[0][0] + trim[0])\n        else:\n            diff = 0\n            if math.ceil((arr[0][1] - arr[0][0]) / 2) + trim[0] + arr[0][0] <= arr[0][1]:\n                pass\n            else:\n                diff = math.ceil((arr[0][1] - arr[0][0]) / 2) + trim[0] + arr[0][0] - arr[0][1]\n            for i in range(1, n):\n                if i == n - 1:\n                    print(arr[i][0] + diff + trim[i])\n                elif math.ceil((arr[i][1] - arr[i][0]) / 2) + trim[i] + diff + arr[i][0] <= arr[i][1]:\n                    pass\n                else:\n                    diff = math.ceil((arr[i][1] - arr[i][0]) / 2) + trim[i] + arr[i][0] + diff - arr[i][1]\nexcept EOFError:\n    print(' ')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr_dep = []\n    late = 0\n    arrival_time = 0\n    for i in range(n):\n        arr_dep.append(tuple(map(int, input().split())))\n    extra_time = list(map(int, input().split()))\n    for i in range(n):\n        arrival_time = arr_dep[i][0] + extra_time[i] + late\n        late = max(arrival_time + math.ceil((arr_dep[i][1] - arr_dep[i][0]) / 2), arr_dep[i][1]) - arr_dep[i][1]\n    print(arrival_time)", "def hel(l, a):\n    t = 0\n    cs = 0\n    for i in range(len(a)):\n        ns = l[i][0]\n        t += ns - cs + a[i]\n        if i == len(a) - 1:\n            break\n        br = -1 * (-(l[i][1] - l[i][0]) // 2)\n        if t + br < l[i][1]:\n            t = l[i][1]\n        else:\n            t += br\n        cs = l[i][1]\n    return t\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [0] * n\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        l[j] = [arr[0], arr[1]]\n    a = list(map(int, input().split()))\n    print(hel(l, a))", "import math\n\ndef solve(res, n, extime):\n    if n == 1:\n        return extime[0] + res[0][0]\n    curr = 0\n    for i in range(n):\n        if i == 0:\n            curr = max(extime[i] + res[0][0] + math.ceil((res[i][1] - res[i][0]) / 2), res[0][1])\n        elif i == n - 1:\n            curr = max(curr + extime[i] + (res[i][0] - res[i - 1][1]), res[i][0])\n        else:\n            curr = max(max(curr + extime[i] + (res[i][0] - res[i - 1][1]), res[i][0]) + math.ceil((res[i][1] - res[i][0]) / 2), res[i][1])\n    return curr\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = []\n    for i in range(n):\n        res.append(list(map(int, input().split())))\n    extime = list(map(int, input().split()))\n    res = solve(res, n, extime)\n    print(res)"]