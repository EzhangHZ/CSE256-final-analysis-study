["def main():\n    for _ in range(int(input())):\n        n = int(input())\n        A = [int(input(), 2) for _ in range(n)]\n        input()\n        for (i, a) in enumerate(A):\n            A[i] = a ^ int(input(), 2)\n        b = A.pop()\n        for a in A:\n            if 0 != a ^ b != 2 ** n - 1:\n                print('NO')\n                break\n        else:\n            print('YES')\nmain()", "t = int(input())\n\ndef hori(arr, i, n):\n    for j in range(n):\n        arr[i][j] = '1' if arr[i][j] == '0' else '0'\n\ndef vert(arr, i, n):\n    for j in range(n):\n        arr[j][i] = '1' if arr[j][i] == '0' else '0'\n\ndef fun():\n    n = int(input())\n    arr = []\n    arr2 = []\n    for _ in range(n):\n        temp = []\n        temp.extend(input())\n        arr.append(temp)\n    _ = input()\n    for i in range(n):\n        temp = []\n        temp.extend(input())\n        arr2.append(temp)\n    for i in range(n):\n        if arr[0][i] != arr2[0][i]:\n            vert(arr, i, n)\n    for i in range(1, n):\n        if arr[i][0] != arr2[i][0]:\n            hori(arr, i, n)\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr2[i][j]:\n                return False\n    return True\nfor _ in range(t):\n    if fun():\n        print('YES')\n    else:\n        print('NO')", "def swap(ch):\n    if ch == '1':\n        return '0'\n    else:\n        return '1'\nfor t in range(int(input())):\n    n = int(input())\n    (a, b) = ([], [])\n    for i in range(n):\n        a.append(list(input()))\n    p = input()\n    for i in range(n):\n        b.append(list(input()))\n    chk = True\n    for i in range(n):\n        cnt = 0\n        for j in range(n):\n            if a[i][j] != b[i][j]:\n                if i == 0:\n                    for k in range(n):\n                        a[k][j] = swap(a[k][j])\n                else:\n                    cnt += 1\n        if cnt != 0 and cnt != n:\n            chk = False\n            break\n    if chk == True:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    mat1 = []\n    for i in range(n):\n        mat1.append(list(input()))\n    space = input()\n    mat2 = []\n    for i in range(n):\n        mat2.append(list(input()))\n    ans = 1\n    for i in range(n):\n        if mat1[i][0] != mat2[i][0]:\n            for j in range(n):\n                if mat1[i][j] == '1':\n                    mat1[i][j] = '0'\n                else:\n                    mat1[i][j] = '1'\n    for j in range(1, n):\n        if mat1[0][j] == mat2[0][j]:\n            count = 0\n            for i in range(n):\n                if mat1[i][j] == mat2[i][j]:\n                    count = count + 1\n            if count != n:\n                ans = 0\n                break\n        else:\n            count = 0\n            for i in range(n):\n                if mat1[i][j] != mat2[i][j]:\n                    count = count + 1\n            if count != n:\n                ans = 0\n                break\n        if ans == 0:\n            break\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m1 = []\n    m2 = []\n    flag = 0\n    for __ in range(n):\n        s = input()\n        m1.append(list(s))\n    space = input()\n    for __ in range(n):\n        s = input()\n        m2.append(list(s))\n    for i in range(n):\n        if m1[i][0] != m2[i][0]:\n            for j in range(n):\n                if m1[i][j] == '1':\n                    m1[i][j] = '0'\n                else:\n                    m1[i][j] = '1'\n    for j in range(n):\n        if m1[0][j] != m2[0][j]:\n            for i in range(n):\n                if m1[i][j] == '1':\n                    m1[i][j] = '0'\n                else:\n                    m1[i][j] = '1'\n    for i in range(n):\n        if flag == 1:\n            break\n        for j in range(n):\n            if m1[i][j] != m2[i][j]:\n                flag = 1\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    b = []\n    input()\n    for i in range(n):\n        b.append(list(input()))\n    for i in range(n):\n        if a[0][i] != b[0][i]:\n            for j in range(n):\n                a[j][i] = str(int(a[j][i]) ^ 1)\n    for i in range(1, n):\n        if a[i] != b[i]:\n            for j in range(n):\n                a[i][j] = str(int(a[i][j]) ^ 1)\n        if a[i] != b[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys\nfrom bisect import bisect_left\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().strip()))\n    input()\n    for i in range(n):\n        j = 0\n        for c in map(int, input().strip()):\n            a[i][j] ^= c\n            j += 1\n    one = a[0]\n    two = [i ^ 1 for i in a[0]]\n    for j in range(1, n):\n        if a[j] != one and a[j] != two:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    m = int(input())\n    matrixa = []\n    matrixb = []\n    for _ in range(m):\n        matrixa.append(list(map(int, input())))\n    input()\n    for _ in range(m):\n        matrixb.append(list(map(int, input())))\n    for i in range(m):\n        if matrixa[0][i] != matrixb[0][i]:\n            for j in range(m):\n                matrixa[j][i] ^= 1\n    flag = 1\n    for row in range(1, m):\n        if matrixa[row] == matrixb[row]:\n            flag = 1\n            continue\n        else:\n            for j in range(m):\n                matrixa[row][j] ^= 1\n            if matrixa[row] == matrixb[row]:\n                flag = 1\n            else:\n                flag = 0\n                break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    b = []\n    input()\n    for i in range(n):\n        b.append(list(input()))\n    for i in range(n):\n        if a[0][i] != b[0][i]:\n            for j in range(n):\n                a[j][i] = str(int(a[j][i]) ^ 1)\n    for i in range(1, n):\n        if a[i] != b[i]:\n            for j in range(n):\n                a[i][j] = str(int(a[i][j]) ^ 1)\n        if a[i] != b[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().strip()))\n    input()\n    for i in range(n):\n        j = 0\n        for c in map(int, input().strip()):\n            a[i][j] ^= c\n            j += 1\n    one = a[0]\n    two = [i ^ 1 for i in a[0]]\n    for j in range(1, n):\n        if a[j] != one and a[j] != two:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().strip()))\n    input()\n    for i in range(n):\n        j = 0\n        for c in map(int, input().strip()):\n            a[i][j] ^= c\n            j += 1\n    one = a[0]\n    two = [i ^ 1 for i in a[0]]\n    for j in range(1, n):\n        if a[j] != one and a[j] != two:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "from sys import stderr\n\ndef dbp(*args, **kwargs):\n    print(*args, file=stderr, **kwargs)\n\ndef get_int_list():\n    return [int(i) for i in input().strip().split()]\n\ndef mangle(n):\n    rows = []\n    for i in range(n):\n        cols = input().strip()\n        xcols = ''.join(['1' if c == '0' else '0' for c in cols])\n        rows.append(min(cols, xcols))\n    cols = []\n    for c in range(n):\n        rowz = ''.join([rows[r][c] for r in range(n)])\n        xrowz = ''.join(['1' if ch == '0' else '0' for ch in rowz])\n        cols.append(min(rowz, xrowz))\n    return ''.join(cols)\n\ndef do_thing():\n    n = int(input().strip())\n    ahash = mangle(n)\n    _ = input()\n    bhash = mangle(n)\n    return 'YES' if ahash == bhash else 'NO'\nmaxcc = int(input().strip())\nfor cc in range(maxcc):\n    print(do_thing())", "def dell(mat1, mat2, n):\n    if n == 1:\n        return 'YES'\n    for i in range(n):\n        if mat2[i][i] != mat1[i][i]:\n            mat1[i] = [1 - i for i in mat1[i]]\n    needc = []\n    for j in range(1, n):\n        if mat1[0][j] != mat2[0][j]:\n            if not needc:\n                needc.append(j)\n            else:\n                needc.append(j)\n    for j in needc:\n        mat1[j] = [1 - i for i in mat1[j]]\n        for i in range(n):\n            mat1[i][j] = 1 - mat1[i][j]\n    for i in range(n):\n        for j in range(n):\n            if mat1[i][j] != mat2[i][j]:\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor u in range(t):\n    n = int(input())\n    mat1 = []\n    for i in range(n):\n        mat1.append(list(map(int, list(input()))))\n    mat2 = []\n    input()\n    for i in range(n):\n        mat2.append(list(map(int, list(input()))))\n    print(dell(mat1, mat2, n))", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().strip()))\n    input()\n    for i in range(n):\n        j = 0\n        for c in map(int, input().strip()):\n            a[i][j] ^= c\n            j += 1\n    one = a[0]\n    two = [i ^ 1 for i in a[0]]\n    for j in range(1, n):\n        if a[j] != one and a[j] != two:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(int, input().strip()))\n    input()\n    for i in range(n):\n        j = 0\n        for c in map(int, input().strip()):\n            a[i][j] ^= c\n            j += 1\n    one = a[0]\n    two = [i ^ 1 for i in a[0]]\n    for j in range(1, n):\n        if a[j] != one and a[j] != two:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "def solve(n, a, b):\n    for i in range(n):\n        if a[0][i] != b[0][i]:\n            for j in range(n):\n                a[j][i] = a[j][i] ^ 1\n    last = True\n    for i in range(1, n):\n        for j in range(n):\n            if a[i][j] != b[i][j]:\n                for k in range(n):\n                    a[i][k] = a[i][k] ^ 1\n                if a[i] != b[i]:\n                    return 'NO'\n                else:\n                    continue\n    return 'YES'\ntest = int(input())\nfor testcase in range(test):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        s = input()\n        arr = [int(x) for x in s]\n        a.append(arr)\n    space = input()\n    for i in range(n):\n        s = input()\n        arr = [int(x) for x in s]\n        b.append(arr)\n    if n == 1:\n        print('YES')\n        continue\n    print(solve(n, a, b))", "def check_unusual_matrix(a, b, n):\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                if a[i][j] != b[i][j]:\n                    for k in range(n):\n                        a[k][j] = a[k][j] ^ 1\n            elif j == 0:\n                if a[i][j] != b[i][j]:\n                    for k in range(n):\n                        a[i][k] = a[i][k] ^ 1\n            if a[i][j] != b[i][j]:\n                return 'NO'\n    return 'YES'\nt = int(input())\nwhile t:\n    n = int(input())\n    a = []\n    for i in range(n):\n        s = input()\n        temp = [int(x) for x in s]\n        a.append(temp)\n    empty_line = input()\n    b = []\n    for i in range(n):\n        s = input()\n        temp = [int(x) for x in s]\n        b.append(temp)\n    print(check_unusual_matrix(a, b, n))\n    t -= 1", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readBin():\n    return [int(x) for x in readString()]\n\ndef readString():\n    return input().rstrip()\n\ndef readCase():\n    return readString()\n\ndef xor_row(a, b):\n    return [x ^ y for (x, y) in zip(a, b)]\n\ndef flip_row(a):\n    return [x ^ 1 for x in a]\n\ndef solve(n, a, b):\n    diff = [xor_row(*x) for x in zip(a, b)]\n    for r in range(1, len(diff)):\n        if diff[r] != diff[r - 1] and diff[r] != flip_row(diff[r - 1]):\n            return 'NO'\n    return 'YES'\ncases = readInt()\nfor case in range(cases):\n    n = readInt()\n    a = [readBin() for _ in range(n)]\n    readString()\n    b = [readBin() for _ in range(n)]\n    print(solve(n, a, b))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m1 = []\n    m2 = []\n    m = []\n    for __ in range(n):\n        s = input()\n        m1.append(s)\n    space = input()\n    for __ in range(n):\n        s = input()\n        m2.append(s)\n    for i in range(n):\n        l = []\n        for j in range(n):\n            if m1[i][j] == m2[i][j]:\n                l.append(0)\n            else:\n                l.append(1)\n        m.append(l)\n    for j in range(n):\n        if m[0][j] == 1:\n            for i in range(n):\n                if m[i][j] == 0:\n                    m[i][j] = 1\n                else:\n                    m[i][j] = 0\n    flag = 0\n    for i in range(n):\n        if flag == 1:\n            break\n        x = m[i][0]\n        for j in range(1, n):\n            if m[i][j] != x:\n                flag = 1\n                break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "in_length = int(input())\nfinal_ouput = []\n\ndef flip_row(row):\n    return [el ^ 1 for el in row]\nfor i in range(in_length):\n    length = int(input())\n    matrix_a = []\n    matrix_b = []\n    for j in range(length):\n        row = [int(el) for el in list(input())]\n        matrix_a.append(row)\n    blank = input()\n    for j in range(length):\n        row = [int(el) for el in list(input())]\n        matrix_b.append(row)\n    for j in range(length):\n        if matrix_a[0][j] != matrix_b[0][j]:\n            for k in range(length):\n                matrix_a[k][j] = matrix_a[k][j] ^ 1\n    final_ouput.append('YES')\n    for j in range(length):\n        if matrix_a[j][0] != matrix_b[j][0]:\n            matrix_a[j] = flip_row(matrix_a[j])\n        if matrix_a[j] != matrix_b[j]:\n            final_ouput[i] = 'NO'\n            break\nfor out in final_ouput:\n    print(out)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    m = []\n    for i in range(n):\n        m.append(list(map(int, input())))\n    input()\n    t = []\n    for i in range(n):\n        t.append(list(map(int, input())))\n    for i in range(n):\n        if m[i][0] != t[i][0]:\n            for j in range(n):\n                m[i][j] ^= 1\n    for i in range(n):\n        if m[0][i] != t[0][i]:\n            for j in range(n):\n                m[j][i] ^= 1\n\n    def check(m, t):\n        for i in range(n):\n            for j in range(n):\n                if m[i][j] != t[i][j]:\n                    return False\n        return True\n    if check(m, t):\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    m = []\n    for i in range(n):\n        m.append(list(map(int, input())))\n    input()\n    t = []\n    for i in range(n):\n        t.append(list(map(int, input())))\n    for i in range(n):\n        if m[i][0] != t[i][0]:\n            for j in range(n):\n                m[i][j] ^= 1\n    for i in range(n):\n        if m[0][i] != t[0][i]:\n            for j in range(n):\n                m[j][i] ^= 1\n\n    def check(m, t):\n        for i in range(n):\n            for j in range(n):\n                if m[i][j] != t[i][j]:\n                    return False\n        return True\n    if check(m, t):\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = []\n    B = []\n    for i in range(n):\n        s = input()\n        if s != '':\n            A.append(s)\n    for i in range(n + 1):\n        s = input()\n        if s != '':\n            B.append(s)\n    ans = []\n    final = []\n    for i in range(n):\n        s = ''\n        if A[i][0] != B[i][0]:\n            for j in range(n):\n                if A[i][j] == '0':\n                    s += '1'\n                else:\n                    s += '0'\n        else:\n            for j in range(n):\n                s += A[i][j]\n        ans.append(s)\n    for i in range(n):\n        s = ''\n        if ans[0][i] != B[0][i]:\n            for j in range(n):\n                if ans[j][i] == '0':\n                    s += '1'\n                else:\n                    s += '0'\n        else:\n            for j in range(n):\n                s += ans[j][i]\n        final.append(s)\n    flag = 1\n    for i in range(n):\n        for j in range(n):\n            if final[j][i] != B[i][j]:\n                flag = 0\n                break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for _ in range(n):\n        a.append(list(input()))\n    input()\n    for _ in range(n):\n        b.append(list(input()))\n    for i in range(n):\n        if a[0][i] == b[0][i]:\n            continue\n        else:\n            for j in range(n):\n                a[j][i] = str(1 - int(a[j][i]))\n    for j in range(1, n):\n        if a[j][0] == b[j][0]:\n            continue\n        else:\n            for i in range(n):\n                a[j][i] = str(1 - int(a[j][i]))\n    if a == b:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for _ in range(n):\n        a.append(list(input()))\n    input()\n    for _ in range(n):\n        b.append(list(input()))\n    for i in range(n):\n        if a[0][i] == b[0][i]:\n            continue\n        else:\n            for j in range(n):\n                a[j][i] = str(1 - int(a[j][i]))\n    for j in range(1, n):\n        if a[j][0] == b[j][0]:\n            continue\n        else:\n            for i in range(n):\n                a[j][i] = str(1 - int(a[j][i]))\n    if a == b:\n        print('YES')\n    else:\n        print('NO')", "import sys\nN = int(1000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    mat1 = list(([] for i in range(n + 1)))\n    mat2 = list(([] for i in range(n + 1)))\n    mat3 = list(([0] * (n + 1) for i in range(n + 1)))\n    for i in range(1, n + 1):\n        mat1[i] = [0]\n        s = input()\n        for j in range(n):\n            mat1[i].append(int(s[j]))\n    input()\n    for i in range(1, n + 1):\n        mat2[i] = [0]\n        s = input()\n        for j in range(n):\n            mat2[i].append(int(s[j]))\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            mat3[i][j] = mat1[i][j] ^ mat2[i][j]\n    for i in range(2, n + 1):\n        for j in range(1, n + 1):\n            if mat3[1][1] ^ mat3[i][1] != mat3[1][j] ^ mat3[i][j]:\n                print('NO')\n                return\n    print('YES')\nfor t in range(int(input())):\n    charming()", "from sys import stdin\nfrom collections import Counter\ninput = stdin.readline\n\ndef matrix(a, b, n):\n    ans = []\n    for i in range(n):\n        pos1 = []\n        ls1 = list(map(lambda s: s ^ 1, a[i]))\n        pos2 = []\n        for j in range(n):\n            if a[i][j] != b[i][j]:\n                pos1.append(j)\n        for j in range(n):\n            if ls1[j] != b[i][j]:\n                pos2.append(j)\n        ans.append(tuple(pos1))\n        ans.append(tuple(pos2))\n    cnt = Counter(ans)\n    maxi = max(cnt.items())\n    if maxi[1] == n:\n        return 'YES'\n    return 'NO'\nfor i in range(int(input())):\n    (blanck, blanck2) = ([], [])\n    n = int(input())\n    for x in range(n):\n        l = [int(i) for i in input().strip()]\n        blanck.append(l)\n    space = input().strip()\n    for x in range(n):\n        l = [int(i) for i in input().strip()]\n        blanck2.append(l)\n    print(matrix(blanck, blanck2, n))", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef solution(n, a, b):\n    for c in range(n):\n        if a[0][c] != b[0][c]:\n            for r in range(n):\n                b[r][c] = (b[r][c] + 1) % 2\n    for r in range(1, n):\n        if a[r][0] != b[r][0]:\n            for c in range(n):\n                b[r][c] = (b[r][c] + 1) % 2\n    equals = len([1 for r in range(n) for c in range(n) if a[r][c] == b[r][c]])\n    if equals == n ** 2:\n        print('YES')\n    else:\n        print('NO')\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    a = [input().strip() for _ in range(n)]\n    input()\n    b = [input().strip() for _ in range(n)]\n    a = [[int(a[r][c]) for c in range(n)] for r in range(n)]\n    b = [[int(b[r][c]) for c in range(n)] for r in range(n)]\n    solution(n, a, b)", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\ndef resolve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = [list(map(int, input().rstrip())) for _ in range(n)]\n        _ = input()\n        B = [list(map(int, input().rstrip())) for _ in range(n)]\n        row = [False] * n\n        col = [False] * n\n        for i in range(n):\n            flg = False\n            for j in range(n):\n                num = A[i][j] ^ row[i] ^ col[j]\n                if num == B[i][j]:\n                    flg = True\n                elif not row[i] and (not flg):\n                    row[i] = True\n                elif not col[j]:\n                    col[j] = True\n        res = True\n        for i in range(n):\n            for j in range(n):\n                A[i][j] ^= row[i] ^ col[j]\n                if A[i][j] != B[i][j]:\n                    res = False\n        print('YES' if res else 'NO')\nresolve()", "def unusual_matrix(matrix_a, matrix_b, n):\n    for col in range(n):\n        if matrix_a[0][col] != matrix_b[0][col]:\n            for row in range(n):\n                matrix_a[row][col] ^= 1\n    for row in range(1, n):\n        if matrix_a[row] != matrix_b[row]:\n            for col in range(0, n):\n                matrix_a[row][col] ^= 1\n    for row in range(n):\n        if matrix_a[row] != matrix_b[row]:\n            return False\n    return True\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    matrix_a = [[0 for _ in range(n)] for _ in range(n)]\n    matrix_b = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(n):\n            matrix_a[i][j] = int(s[j])\n    input()\n    for i in range(n):\n        s = input()\n        for j in range(n):\n            matrix_b[i][j] = int(s[j])\n    if unusual_matrix(matrix_a, matrix_b, n):\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nwhile tc > 0:\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        s = input()\n        tmp = []\n        for j in range(n):\n            tmp.append(int(s[j]))\n        a.append(tmp)\n    input()\n    for i in range(n):\n        s = input()\n        tmp = []\n        for j in range(n):\n            tmp.append(int(s[j]))\n        b.append(tmp)\n    for j in range(n):\n        if a[0][j] != b[0][j]:\n            for i in range(n):\n                a[i][j] = a[i][j] ^ 1\n    for i in range(1, n):\n        if a[i][0] != b[i][0]:\n            for j in range(n):\n                a[i][j] = a[i][j] ^ 1\n    flag = True\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != b[i][j]:\n                flag = False\n    if flag == True:\n        print('YES')\n    else:\n        print('NO')\n    tc = tc - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    arr2 = []\n    for i in range(n):\n        m = input()\n        m = list(m)\n        arr.append(m)\n    input()\n    for i in range(n):\n        m = input()\n        m = list(m)\n        arr2.append(m)\n    boo = True\n    for i in range(n - 1):\n        for j in range(n - 1):\n            s1 = int(arr[i][j]) + int(arr[i + 1][j]) + int(arr[i][j + 1]) + int(arr[i + 1][j + 1])\n            s2 = int(arr2[i][j]) + int(arr2[i + 1][j]) + int(arr2[i][j + 1]) + int(arr2[i + 1][j + 1])\n            if (max(s1, s2) - min(s1, s2)) % 2 == 1:\n                boo = False\n                break\n    if boo == True:\n        print('YES')\n    else:\n        print('NO')"]