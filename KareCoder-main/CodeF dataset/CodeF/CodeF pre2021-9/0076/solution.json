["f = lambda s: map(int, s.split())\nfor s in [*open(0)][1:]:\n    (l, r) = f(s)\n    print(l < r // 2 + 1 and r % (r // 2 + 1) or r % l)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (l, r) = map(int, sys.stdin.readline().split())\n    if l == r:\n        print(0)\n        continue\n    start = r // 2\n    if start < l:\n        print(r % l)\n        continue\n    print(r % (start + 1))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "import math, sys, itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\ntmp = [x for x in range(ord('a'), ord('z') + 1)]\nfor t in wtf[1:]:\n    (l, r) = map(int, t.split())\n    tmp = r // 2 + 1\n    print(r % (r // 2 + 1) if tmp >= l and tmp <= r else r % l)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l <= r // 2 + 1:\n        print(r % (r // 2 + 1))\n    else:\n        print(r % l)", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "from sys import *\nimport math\n\ndef solve_case():\n    (l, r) = [int(x) for x in stdin.readline().rstrip().split()]\n    if l < r / 2 + 1:\n        print(r % math.floor(r / 2 + 1))\n    else:\n        print(r % l)\n\ndef main():\n    T = int(stdin.readline().rstrip())\n    for t in range(T):\n        solve_case()\nmain()", "num = int(input())\nbounds = []\nfor _ in range(num):\n    (l, r) = map(int, input().split())\n    bounds.append((l, r))\nresults = []\n\ndef find_max(edges):\n    (l, r) = edges\n    if l <= r // 2:\n        if r % 2 == 0:\n            return r // 2 - 1\n        else:\n            return (r - 1) // 2\n    else:\n        return r % l\nfor bound in bounds:\n    results.append(find_max(bound))\nprint('\\n'.join(map(str, results)))", "class Solution(object):\n\n    def __init__(self):\n        pass\n\n    def solve(self, lf, rg):\n        md = int(rg / 2)\n        return rg % max(lf, md + 1)\ntest_case_num = int(input())\nresults = list()\nfor test in range(test_case_num):\n    (lf, rg) = input().split(' ')\n    results.append(Solution().solve(int(lf), int(rg)))\nfor r in results:\n    print(r)", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (l, r) = [int(i) for i in s.split()]\n    print(r % max(l, (r + 2) // 2))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "ans = ''\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    if l <= r // 2 + 1:\n        ans += str(r % (r // 2 + 1))\n    else:\n        ans += str(r - l)\n    ans += '\\n'\nprint(ans)", "t = int(input())\nlan = []\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    b = r // 2 + 1\n    if b > l:\n        lan.append(r % b)\n    else:\n        lan.append(r % l)\nprint(*lan, sep='\\n')", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "t = int(input())\nop = []\nfor i in range(t):\n    (l, r) = map(int, input().split(' '))\n    if l == r:\n        op.append(0)\n    else:\n        if r % 2 == 0:\n            mid = int(r / 2) + 1\n        else:\n            mid = int(r / 2) + 1\n        if mid > l:\n            ans = r % mid\n        else:\n            ans = r % l\n        op.append(ans)\nfor i in op:\n    print(i)", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial\nfrom heapq import heapify, heappush, heappop\nimport sys\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        (l, r) = read()\n        x = max(l, r // 2 + 1)\n        ans_.append(r % x)\nsolve()\nfor i in ans_:\n    print(i)", "import sys\nfrom heapq import heappush, heappop, heapify\nfrom math import ceil\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(get_ints())\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve(l, r):\n    h = int(ceil(r / 2))\n    if h >= l:\n        return h - 1\n    else:\n        return r % l\nT = int(input())\nwhile T > 0:\n    (l, r) = get_ints()\n    print(solve(l, r))\n    T -= 1", "mod = 1000000007\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    m = 0\n    (a, b) = map(int, stdin.readline().split())\n    (q, w) = (b, max(b // 2 + 1, a))\n    print(q % w)", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(r % max(l, r // 2 + 1))", "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    if a == b:\n        print(0)\n    elif a <= b // 2 + 1:\n        tmp = b % (b // 2 + 1)\n        print(tmp)\n    else:\n        tmp = b % a\n        print(tmp)", "def get_mod(l, r):\n    temp = r // 2 + 1\n    if temp > l:\n        return r % temp\n    else:\n        return r % l\ntestCases = int(input())\nres = []\nfor i in range(testCases):\n    test = input()\n    test = [int(i) for i in test.split(' ')]\n    res.append(get_mod(test[0], test[-1]))\nfor i in res:\n    print(i)", "m = int(input())\nl = []\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    c = b % (b // 2 + 1)\n    if c < a:\n        if b % a == 0 and a != b:\n            l.append(b % (a + 1))\n        else:\n            l.append(b % a)\n    else:\n        l.append(c)\nfor i in l:\n    print(i)", "for s in [*open(0)][1:]:\n    (l, r) = [int(i) for i in s.split()]\n    print(r % max(l, (r + 2) // 2))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "import sys\nimport math\n\ndef maximize_modulo(constr):\n    minimum = constr[0]\n    maximum = constr[1]\n    if maximum - minimum == 1 or maximum == minimum:\n        print(maximum % minimum)\n        return\n    a = maximum\n    b = math.ceil(maximum / 2)\n    if a % 2 == 0:\n        b = math.ceil(maximum / 2) + 1\n    if b < minimum:\n        b = minimum\n    print(a % b)\ninfile = []\nfor line in sys.stdin:\n    if '' == line.rstrip():\n        break\n    infile.append(list(map(int, line.rstrip().split())))\nfor x in range(1, len(infile)):\n    maximize_modulo(infile[x])", "n = int(input())\nan = []\nfor i in range(n):\n    (a, b) = input('').split()\n    a = int(a)\n    b = int(b)\n    if a == b:\n        an.append(0)\n        continue\n    x = int(b / 2)\n    if a > x:\n        an.append(b % a)\n    else:\n        an.append(b % (x + 1))\nfor i in range(n):\n    print(an[i])", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    k = r\n    if r & 1:\n        r = r - 1\n    if (r >> 1) + 1 >= l:\n        print(k - ((r >> 1) + 1))\n    else:\n        print(k - l)", "t = int(input())\narrow = []\nwhile t > 0:\n    w = input()\n    w = w.split()\n    a = int(w[0])\n    b = int(w[1])\n    n = max(a, b) // 2 + 1\n    ans = max(a, b) % max(min(a, b), n)\n    arrow.append(ans)\n    t -= 1\nfor i in range(len(arrow)):\n    print(arrow[i])", "def solve():\n    (l, r) = [int(i) for i in input().split()]\n    return r % max(l, r // 2 + 1)\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "import sys\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef get_num():\n    return int(sys.stdin.readline())\nt = get_num()\nfor test in range(t):\n    lr = get_array()\n    l = lr[0]\n    r = lr[1]\n    if l > r // 2:\n        print(r % l)\n    else:\n        print(r % (r // 2 + 1))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (l, r) = [int(x) for x in sys.stdin.readline().split()]\n    if l <= r // 2:\n        l = r // 2 + 1\n    sys.stdout.write(str(r - l) + '\\n')", "t = int(input())\nl = []\no = []\nfor i in range(t):\n    t = input()\n    l.append([int(i) for i in t.split(' ')])\nfor i in l:\n    o.append(i[1] % max(i[0], i[1] // 2 + 1))\nprint('\\n'.join([str(i) for i in o]))", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "import copy\nimport math\nfrom sys import stdin\n\ndef A():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        (l, r) = [int(x) for x in stdin.readline().split()]\n        k = r // 2\n        if k < l:\n            print(r - l)\n        else:\n            print(r - k - 1)\n\ndef B():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        n = int(stdin.readline())\n\ndef C():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        a = [int(x) for x in stdin.readline().split()]\n\ndef D():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n\ndef E():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\nA()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    (a, b) = (min(a, b), max(a, b))\n    if b // 2 >= a:\n        print(b % (b // 2 + 1))\n    else:\n        print(b % a)\n    t -= 1", "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    if r // 2 + 1 in range(l, r + 1):\n        print(r - r // 2 - 1)\n    else:\n        print(r % l)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (l, r) = map(int, input().split())\n    if (r + 1) / 2 >= l:\n        print((r + 1) // 2 - 1)\n    else:\n        print(r % l)", "def getlistint():\n    return list(map(int, stdin.readline().split()))\n\ndef getmapint():\n    return map(int, stdin.readline().split())\n\ndef getliststr():\n    return list(stdin.readline().split())\n\ndef getint():\n    return int(stdin.readline().strip())\n\ndef getstr():\n    return stdin.readline().strip()\n\ndef pr(s):\n    stdout.write(str(s) + '\\n')\n\ndef prlist(l):\n    stdout.write(' '.join(list(map(str, l))) + '\\n')\nfrom sys import stdin, stdout\nfor _ in range(getint()):\n    (l, r) = getmapint()\n    mid = r // 2 + 1\n    l = max(l, mid)\n    pr(r % l)", "def f(l, r):\n    if l <= r // 2:\n        return r % (r // 2 + 1)\n    else:\n        return r % l\nn = int(input())\nlst = []\nfor item in range(n):\n    lst.append(f(*[int(item) for item in input().split()]))\nprint(*lst, sep='\\n')", "import math\n\ndef fun(a, b):\n    if b % 2 == 0:\n        temp = b // 2 + 1\n    else:\n        temp = math.ceil(b / 2)\n    if temp < a:\n        print(b % a)\n    else:\n        print(b % temp)\nn = int(input())\nl1 = []\nfor i in range(n):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    l1.append([a, b])\nfor i in l1:\n    fun(i[0], i[1])", "test_cases = input()\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef solve(l, r):\n    if r // 2 + 1 >= l:\n        return r % (r // 2 + 1)\n    elif r // 2 + 1 < l:\n        return r % l\nans = []\nfor i in range(int(test_cases)):\n    lis = inlt()\n    ans.append(solve(lis[0], lis[1]))\nfor i in ans:\n    print(i, end='\\n')", "t = int(input())\nlista = []\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if r % 2 == 0:\n        if l <= r / 2:\n            lista.append(r % (r // 2 + 1))\n        else:\n            lista.append(r % l)\n    elif l <= r / 2:\n        lista.append(r % (r // 2 + 1))\n    else:\n        lista.append(r % l)\nfor i in lista:\n    print(i)", "import sys\n\ndef max_mod(a, b):\n    best_b = max(a // 2 + 1, b)\n    return a % best_b\n\ndef solve(l, r):\n    return max_mod(r, l)\n\ndef main():\n    test_cases = int(input())\n    answers = []\n    for _ in range(test_cases):\n        (l, r) = map(int, input().split())\n        a = solve(l, r)\n        answers.append(a)\n    print(*answers, sep='\\n')\nmain()", "t = int(input())\nresult = []\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l <= r / 2:\n        result.append(r % (r // 2 + 1))\n    else:\n        result.append(r % l)\nfor i in result:\n    print(i)", "t = int(input())\nls = []\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if r // 2 >= l and r // 2 == r / 2:\n        ls.append((r - 1) % (r // 2))\n    elif r // 2 >= l and (not r // 2 == r / 2):\n        ls.append(r % (r // 2 + 1))\n    else:\n        ls.append(r % l)\nfor i in range(t):\n    print(ls[i])", "import sys\ntestcases = int(input())\nwhile testcases > 0:\n    (r, l) = map(int, sys.stdin.readline().split())\n    if l >= 2 * r:\n        c = (l - 1) / 2\n    else:\n        c = l - r\n    print(int(c))\n    testcases -= 1", "import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nfrom collections import Counter, defaultdict\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (l, r) = get_ints()\n    if 2 * l <= r:\n        print(math.ceil(r / 2) - 1)\n    else:\n        print(r % l)", "def mex(L, R):\n    if L == R:\n        T = 0\n    elif L * 2 < R:\n        if R % 2:\n            T = R // 2\n        else:\n            T = R // 2 - 1\n    else:\n        if R % L == 0:\n            L += 1\n        T = R % L\n    return T\nN = int(input())\nZ = []\nfor q in range(N):\n    (l, r) = list(map(int, input().split()))\n    Z.append(mex(l, r))\nfor me in Z:\n    print(me)", "def largest_modulo(l, r):\n    if l > r // 2:\n        return r % l\n    else:\n        a = r // 2 + 1\n        return r % a\nt = int(input())\na = []\nwhile t > 0:\n    arr = [int(i) for i in input().split()]\n    (l, r) = (arr[0], arr[1])\n    a.append(largest_modulo(l, r))\n    t -= 1\nfor i in a:\n    print(i)", "t = int(input())\nl = []\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    if n <= m / 2:\n        if m % 2 == 0:\n            c = int(m / 2 - 1)\n            l.append(c)\n        else:\n            c = int(m / 2)\n            l.append(c)\n    else:\n        c = m % n\n        l.append(int(c))\nfor j in l:\n    print(int(j))", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(r % max(l, r // 2 + 1))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\nfrom math import ceil\n\ndef solve():\n    for _ in range(get_int()):\n        (l, r) = get_ints()\n        x = ceil(r / 2)\n        if x >= l:\n            get_print_int(x - 1)\n        else:\n            get_print_int(r % l)\nsolve()", "def solve(Test_cases):\n    Resultant_list = []\n    for i in range(Test_cases):\n        string = input()\n        list_me = list(string.split())\n        map_object = map(int, list_me)\n        list_me = list(map_object)\n        (l, r) = (list_me[0], list_me[1])\n        if r == l:\n            Resultant_list.append(0)\n        elif r % 2 != 0:\n            value_1 = (r + 1) // 2\n            if value_1 >= l:\n                Resultant_list.append(r % value_1)\n            else:\n                Resultant_list.append(r % l)\n        else:\n            value_2 = r // 2 + 1\n            if value_2 >= l:\n                Resultant_list.append(r % value_2)\n            else:\n                Resultant_list.append(r % l)\n    return Resultant_list\nTest_cases = int(input())\nif Test_cases < 1 or Test_cases > pow(10, 4):\n    exit()\nResult = solve(Test_cases)\nfor i in Result:\n    print(i)", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        (l, r) = read_list_of_ints()\n        res_div = r // 2 + 1\n        if res_div < l:\n            res_div = l\n        print(r % res_div)\nmain()", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    (l, r) = inm()\n    if r // 2 + 1 >= l:\n        print(r % (r // 2 + 1))\n    else:\n        print(r % l)", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "t = int(input())\n\ndef get_sol(a, b):\n    if a <= b * 0.5:\n        return int((b + 1) * 0.5 - 1)\n    else:\n        return int(b % a)\ntests = []\nfor i in range(t):\n    tests.append(list(map(int, input().split())))\nfor i in range(t):\n    print(get_sol(tests[i][0], tests[i][1]))", "t = int(input())\nout = []\nfor i in range(t):\n    (l, r) = [int(j) for j in input().split()]\n    if r % 2 == 0:\n        if l <= r // 2 + 1 <= r:\n            res = r // 2 + 1\n        else:\n            res = l\n    elif l <= (r + 1) // 2 <= r:\n        res = (r + 1) // 2\n    else:\n        res = l\n    out.append(r % res)\nfor i in out:\n    print(i)", "def find_max_modular(l, r):\n    div_two = (r + 1) // 2\n    if div_two < l:\n        return r - l\n    else:\n        mod = r - 1 - div_two if r % 2 == 0 else r - div_two\n        return mod\nnum_test_case = int(input())\ntest_cases = []\nfor i in range(num_test_case):\n    lef_and_right = input().split()\n    left = int(lef_and_right[0])\n    right = int(lef_and_right[1])\n    test_cases.append((left, right))\nfor test_case in test_cases:\n    print(find_max_modular(test_case[0], test_case[1]))", "t = int(input())\nans = []\nfor i in range(t):\n    inp = input().split()\n    l = int(inp[0])\n    r = int(inp[1])\n    a = r // 2 + 1\n    if l <= a:\n        ans.append(int(r - a))\n    else:\n        ans.append(int(r - l))\n    i += 1\nfor b in range(len(ans)):\n    print(ans[b])", "t = int(input())\nans = []\nfor _ in range(t):\n    (l, r) = [int(x) for x in input().split()]\n    if r >= l << 1:\n        ans.append(str((r + 1 >> 1) - 1))\n    else:\n        ans.append(str(r - l))\nprint('\\n'.join(ans))", "t = int(input(''))\nl = []\nif t >= 1 and t <= 10000:\n    for i in range(t):\n        a = 0\n        b = 0\n        c = 0\n        (p, q) = map(int, input().split())\n        if p >= 1 and q <= 1000000000 and (p <= q):\n            if q / 2 >= p:\n                a = q / 2\n                b = int(a) + 1\n                c = q % b\n                l.append(int(c))\n            else:\n                c = q % p\n                l.append(c)\n        else:\n            break\n    for i in l:\n        print(i)", "for s in [*open(0)][1:]:\n    (a, b) = map(int, s.split())\n    print(b % max(a, b // 2 + 1))", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(r % max(l, r // 2 + 1))", "T = int(input())\nmyinp = []\nfor i in range(T):\n    myinp.append(input())\nfor i in range(T):\n    inp = myinp[i].split()\n    for i in range(len(inp)):\n        inp[i] = int(inp[i])\n    l = inp[0]\n    r = inp[1]\n    a = r\n    b = int(r / 2) + 1\n    if b >= l:\n        print(a % b)\n    else:\n        print(a % l)", "for s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(r % max(l, r // 2 + 1))", "t = int(input())\nfirstn = []\nsecondn = []\nanswers = []\nfor i in range(0, t, 1):\n    (x, y) = input().split()\n    firstn.append(x)\n    secondn.append(y)\nfor (n1, n2) in zip(firstn, secondn):\n    n1 = int(n1)\n    n2 = int(n2)\n    if n1 > n2:\n        if n1 // 2 + 1 >= n2:\n            mod = n1 % (n1 // 2 + 1)\n            answers.append(mod)\n        else:\n            answers.append(n1 % n2)\n    elif n2 // 2 + 1 >= n1:\n        mod = n2 % (n2 // 2 + 1)\n        answers.append(mod)\n    else:\n        answers.append(n2 % n1)\nfor answer in answers:\n    print(answer)", "k = []\nalphabets = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if r // 2 < l:\n        k.append(r % l)\n    else:\n        k.append(0 - r // -2 - 1)\nfor i in k:\n    print(i)", "n = int(input())\nz = []\nfor i in range(n):\n    (l, r) = [int(x) for x in input().split(' ')]\n    if l == r:\n        z.append('0')\n    elif l < r and l > r // 2:\n        z.append(str(r - l))\n    else:\n        z.append(str(r - (r // 2 + 1)))\nfor i in z:\n    print(i)", "from collections import defaultdict\nimport math\nfrom functools import reduce\nfrom math import comb, gcd\nfrom collections import defaultdict\nfrom sys import stdout\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\nALPH = 'abcdefghijklmnopqrstuvwxyz'\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef list_int_to_str(a, sep=' '):\n    return sep.join((str(x) for x in a))\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n\ndef solve():\n    (l, r) = input_list_int()\n    ans = r // 2 + 1\n    ans = max(l, ans)\n    pr(r % ans)\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve(l, r):\n    if l == r:\n        print(0)\n        return\n    req = r // 2 + 1\n    if l <= req:\n        ans = r % req\n        print(ans)\n        return\n    ans = r % l\n    print(ans)\n    return\nT = get_int()\nwhile T:\n    (l, r) = get_ints()\n    solve(l, r)\n    T -= 1", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(L, R):\n    if L == R:\n        return 0\n    a = R\n    b = max(R // 2 + 1, L)\n    return a % b\nTC = int(input())\nfor tc in range(TC):\n    (L, R) = map(int, input().split())\n    res = solve(L, R)\n    print(res)", "import sys\nimport math\nfor t in range(int(input())):\n    (l, r) = map(int, sys.stdin.readline().split())\n    if l <= math.ceil(r / 2):\n        print(math.ceil(r / 2) - 1)\n    else:\n        print(r % l)", "x = int(input())\nl = []\nfor i in range(x):\n    l.append(list(map(int, input().split())))\nfor i in l:\n    a = 0\n    b = 0\n    if i[1] % 2 == 0:\n        b = int(i[1] / 2 + 1)\n        a = i[1]\n    elif i[1] % 2 != 0:\n        b = int((i[1] + 1) / 2)\n        a = i[1]\n    ans = a % b\n    if b < i[0]:\n        ans -= i[0] - b\n    print(ans)", "def solve(l, r):\n    if r < l * 2:\n        array_answer.append(int(r - l))\n    else:\n        array_answer.append(int((r - 1) / 2))\nt = int(input())\narray_answer = []\narray_input = []\nwhile t > 0:\n    value = input()\n    array_input = value.split(' ')\n    array_input[0] = int(array_input[0])\n    array_input[1] = int(array_input[1])\n    if array_input[0] <= array_input[1]:\n        solve(array_input[0], array_input[1])\n    t -= 1\nfor i in array_answer:\n    print(i)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    a = int(r / 2) + 1\n    if l <= a:\n        print(r % a)\n    else:\n        print(r % l)", "import os\nimport math\nimport sys\nparse_input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef func(l, r):\n    if l == r:\n        return 0\n    if r // 2 > l:\n        if r % 2 == 0:\n            return r - (r // 2 + 1)\n        else:\n            return r - (r + 1) // 2\n    elif r // 2 < l:\n        return r % l\n    elif r // 2 == l:\n        return r % (l + 1)\n\ndef main():\n    n_cases = int(parse_input())\n    for i in range(n_cases):\n        (l, r) = [int(i) for i in parse_input().split()]\n        print(func(l, r))\nmain()", "t = int(input())\nmass = []\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if r // l < 2:\n        mass.append(r - l)\n    else:\n        p = r // 2 + 1\n        ans = r % p\n        mass.append(ans)\nfor i in mass:\n    print(i)", "t = int(input())\narres = []\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l <= r // 2:\n        res = (r + 1) // 2 - 1\n    else:\n        res = r - l\n    arres.append(res)\nfor i in range(t):\n    print(arres[i], end='\\n')", "import math\ndebug = False\n\ndef solve(l, r):\n    if l <= math.ceil(r / 2) <= r:\n        print(math.ceil(r / 2) - 1)\n        return\n    else:\n        print(r % l)\nif not debug:\n    queue = []\n    for _ in range(int(input())):\n        queue.append(tuple(map(int, input().split())))\n    for el in queue:\n        solve(*el)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    m = max(l, r // 2 + 1)\n    print(r % m)", "for x in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(b % max(a, b // 2 + 1))", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l > r // 2:\n        ans = r - l\n    elif r == l:\n        ans = 0\n    else:\n        if r % 2 == 1:\n            r += 1\n        ans = r // 2 - 1\n    print(ans)", "n = int(input())\nfor i in range(1, n + 1):\n    (l, r) = map(int, input().split())\n    if r // 2 + 1 < l:\n        ans = r - l\n    else:\n        x = r // 2 + 1\n        ans = r - x\n    print(ans)", "TEST_CASES = int(input(''))\nfor x in range(TEST_CASES):\n    RANGE = input('').split(' ')\n    LR = int(RANGE[0])\n    HR = int(RANGE[1])\n    if LR > HR / 2:\n        print(int(HR % LR))\n    elif LR <= HR / 2:\n        print(HR % int(HR / 2 + 1))", "n = int(input())\nfor i in range(n):\n    (a, m) = map(int, input().split())\n    if m % 2 == 0:\n        if m // 2 >= a:\n            print(m // 2 - 1)\n        else:\n            print(m - a)\n    elif m % 2 != 0:\n        if m // 2 + 1 >= a:\n            print(m // 2)\n        else:\n            print(m - a)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = m\n    b = max(n, m // 2 + 1)\n    print(a % b)", "for _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    a = r\n    b = max(r // 2 + 1, l)\n    print(a % b)", "n = int(input())\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    if 2 * l - r > 0:\n        print(r - l)\n    else:\n        print((r - 1) // 2)"]