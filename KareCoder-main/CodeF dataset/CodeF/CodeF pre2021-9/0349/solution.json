["import sys\n\ndef answer(n, k, a):\n    peaks = [False] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            peaks[i] = True\n    count = peaks[1:k - 1].count(True)\n    best_count = count\n    addr = 0\n    for i in range(1, n - k + 1, 1):\n        if peaks[i] == True:\n            count -= 1\n        if peaks[i + (k - 2)] == True:\n            count += 1\n        if count > best_count:\n            addr = i\n            best_count = count\n    return [best_count + 1, addr + 1]\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = [int(i) for i in sys.stdin.readline().split()]\n        a = [int(i) for i in sys.stdin.readline().split()]\n        print(' '.join(map(str, answer(n, k, a))))\n        t -= 1\n    return\nmain()", "import sys\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef main():\n    for _ in range(II()):\n        (n, k) = MI()\n        aa = LI()\n        pp = [0] * n\n        for i in range(1, n - 1):\n            if aa[i - 1] < aa[i] > aa[i + 1]:\n                pp[i] = 1\n        s = sum(pp[1:k - 1])\n        mx = s\n        l = 0\n        for i in range(1, n - k + 1):\n            s += pp[i + k - 2] - pp[i]\n            if s > mx:\n                mx = s\n                l = i\n        print(mx + 1, l + 1)\nmain()", "import sys\nstdin = sys.stdin\nns = lambda : stdin.readline().rstrip()\nni = lambda : int(stdin.readline().rstrip())\nnm = lambda : map(int, stdin.readline().split())\nnl = lambda : list(map(int, stdin.readline().split()))\n\ndef solve():\n    (n, k) = nm()\n    a = nl()\n    b = [0] * n\n    for i in range(1, n - 1):\n        b[i] = (a[i - 1] < a[i] > a[i + 1]) + b[i - 1]\n    b[-1] += b[-2]\n    mx = 0\n    mi = 0\n    for i in range(n - k + 1):\n        if b[i + k - 2] - b[i] > mx:\n            mx = b[i + k - 2] - b[i]\n            mi = i\n    print(mx + 1, mi + 1)\n    return\nt = ni()\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import deque, Counter\ninp = sys.stdin.readline\nread = lambda : list(map(int, inp().split()))\n\ndef a():\n    ans = ''\n    for _ in range(int(inp())):\n        (n, a, b, c, d) = read()\n        mi = (a - b) * n\n        ma = (a + b) * n\n        ans += 'YNEOS'[not (c - d <= mi <= c + d or c - d <= ma <= c + d or mi <= c - d <= ma or (mi <= c + d <= ma))::2] + '\\n'\n    print(ans)\n\ndef b():\n    ans = ''\n    for _ in range(int(inp())):\n        (n, k) = read()\n        arr = read()\n        l = 0\n        mp_arr = deque()\n        for i in range(1, k - 1):\n            if arr[i - 1] < arr[i] > arr[i + 1]:\n                mp_arr.append(i)\n        mp = len(mp_arr)\n        j = 1\n        for i in range(k - 1, n - 1):\n            if arr[i - 1] < arr[i] > arr[i + 1]:\n                mp_arr.append(i)\n            if mp_arr and j == mp_arr[0]:\n                mp_arr.popleft()\n            j += 1\n            if mp < len(mp_arr):\n                l = i - k + 2\n                mp = len(mp_arr)\n        ans += str(mp + 1) + ' ' + str(l + 1) + '\\n'\n    print(ans)\nb()", "def main_function():\n    from sys import stdin\n    from sys import stdout\n    input = stdin.readline\n    print = stdout.write\n    t = int(input())\n    for _ in range(t):\n        (n, k) = list(map(int, input().split()))\n        mountains = list(map(int, input().split()))\n        picks = [0] * n\n        for i in range(1, n - 1):\n            if mountains[i - 1] < mountains[i] > mountains[i + 1]:\n                picks[i] = 1\n        current_sum = sum(picks[1:k - 1])\n        max_parts = current_sum\n        ix_max_parts = 0\n        for i in range(1, n - k + 1):\n            current_sum -= picks[i]\n            current_sum += picks[i + k - 2]\n            if current_sum > max_parts:\n                max_parts = current_sum\n                ix_max_parts = i\n        print(f'{max_parts + 1} {ix_max_parts + 1}\\n')\nmain_function()", "import sys\n\ndef main():\n    test_cases = int(sys.stdin.readline())\n    for test_case in range(test_cases):\n        line = sys.stdin.readline().split()\n        n = int(line[0])\n        k = int(line[1])\n        line = sys.stdin.readline().split()\n        mountain_heights = [int(el) for el in line]\n        is_peak = [False]\n        for i in range(1, len(mountain_heights) - 1):\n            if mountain_heights[i - 1] < mountain_heights[i] > mountain_heights[i + 1]:\n                is_peak.append(True)\n            else:\n                is_peak.append(False)\n        is_peak.append(False)\n        l = 0\n        cur_peaks = 0\n        for i in range(1, k - 1):\n            if is_peak[i]:\n                cur_peaks += 1\n        max_peaks = cur_peaks\n        for i in range(1, n - k + 1):\n            if is_peak[i]:\n                cur_peaks -= 1\n            if is_peak[i + k - 2]:\n                cur_peaks += 1\n            if cur_peaks > max_peaks:\n                max_peaks = cur_peaks\n                l = i\n        print(str(max_peaks + 1) + ' ' + str(l + 1))\nmain()", "list_ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list2 = [0] * n\n    list3 = [0] * n\n    a = 0\n    for i in range(1, n - 1):\n        if list1[i - 1] < list1[i] and list1[i] > list1[i + 1]:\n            a += 1\n        list2[i + 1] = a\n        list3[i] = a\n    ans = 0\n    pos = 1\n    for j in range(n - k + 1):\n        if list2[j + k - 1] - list3[j] > ans:\n            ans = list2[j + k - 1] - list3[j]\n            pos = j + 1\n    ans += 1\n    list_ans.append([ans, pos])\nfor item in list_ans:\n    print(*item)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    b = [0] * n\n    c = 0\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] > arr[i + 1]:\n            c += 1\n        b[i] = c\n    (peak, peakIndex) = (0, 0)\n    slide = n - m + 1\n    for i in range(slide):\n        if b[i + m - 2] - b[i] > peak:\n            peak = b[i + m - 2] - b[i]\n            peakIndex = i\n    print(peak + 1, peakIndex + 1)", "from sys import stdin, stderr\n\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n(t,) = rl()\nfor _ in range(t):\n    (n, k) = rl()\n    a = rl()\n    p = [a[i] > a[i - 1] and a[i] > a[i + 1] for i in range(1, n - 1)]\n    bl = 1\n    bt = t = sum(p[:k - 2]) + 1\n    for l in range(2, n - k + 2):\n        if p[l - 2]:\n            t -= 1\n        if p[l + k - 4]:\n            t += 1\n        if t > bt:\n            bt = t\n            bl = l\n    print(bt, bl)", "import sys\nimport math\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    while t > 0:\n        t -= 1\n        (n, k) = (int(i) for i in input().split())\n        a = [int(i) for i in input().split()]\n        peaks = [0 for i in range(n)]\n        for i in range(1, n - 1):\n            if a[i - 1] < a[i] and a[i] > a[i + 1]:\n                peaks[i] = 1\n        s = 0\n        for i in range(1, k - 1):\n            s += peaks[i]\n        maxs = s\n        start = 0\n        for i in range(k, n):\n            s += peaks[i - 1]\n            s -= peaks[i - k + 1]\n            if maxs < s:\n                maxs = s\n                start = i - k + 1\n        print(maxs + 1, start + 1)\nmain()", "def func(k, mount):\n    peaks = [0] * len(mount)\n    for i in range(1, len(mount) - 1):\n        if mount[i - 1] < mount[i] and mount[i + 1] < mount[i]:\n            peaks[i] = 1\n    cur_peaks = sum(peaks[:k - 1])\n    max_peaks = cur_peaks\n    idx_max = 0\n    for i in range(1, len(peaks) - k + 1):\n        cur_peaks -= peaks[i]\n        cur_peaks += peaks[i + k - 2]\n        if cur_peaks > max_peaks:\n            max_peaks = cur_peaks\n            idx_max = i\n    pass\n    return '{0} {1}'.format(str(max_peaks + 1), str(idx_max + 1))\nt = int(input())\nout = []\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split(' ')))\n    mount = list(map(int, input().split(' ')))\n    out.append(func(k, mount))\nfor e in out:\n    print(e)", "import sys\nstdin = sys.stdin\nns = lambda : stdin.readline().rstrip()\nni = lambda : int(stdin.readline().rstrip())\nnm = lambda : map(int, stdin.readline().split())\nnl = lambda : list(map(int, stdin.readline().split()))\n\ndef solve():\n    (n, k) = nm()\n    a = nl()\n    b = [0] * n\n    for i in range(1, n - 1):\n        b[i] = (a[i - 1] < a[i] > a[i + 1]) + b[i - 1]\n    b[-1] += b[-2]\n    mx = 0\n    mi = 0\n    for i in range(n - k + 1):\n        if b[i + k - 2] - b[i] > mx:\n            mx = b[i + k - 2] - b[i]\n            mi = i\n    print(mx + 1, mi + 1)\n    return\nt = ni()\nfor _ in range(t):\n    solve()", "def natsya(n, l, a):\n    newa = [0]\n    s = 0\n    for i in range(1, n - 1):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            s += 1\n            newa.append(s)\n        else:\n            newa.append(s)\n    newa.append(s)\n    current_peaks = None\n    current_index = None\n    for j in range(0, n - l + 1):\n        if current_index != None and current_peaks != None and (newa[j + l - 2] - newa[j] > current_peaks):\n            current_peaks = newa[j + l - 2] - newa[j]\n            current_index = j\n        elif current_peaks == None and current_index == None:\n            if newa[j + l - 2] - newa[j] != 0:\n                current_peaks = newa[j + l - 2] - newa[j]\n                current_index = j\n    if current_index == None:\n        print(1, 1)\n        return\n    print(current_peaks + 1, current_index + 1)\n    return\nt = int(input())\na = []\nfor i in range(t):\n    (b, c) = list(map(int, input().split(' ')))\n    d = list(map(int, input().split(' ')))\n    a.append([b, c, d])\nfor x in a:\n    natsya(*x)", "def peaks(s, n, k):\n    count = 0\n    left = 0\n    for j in range(1, k - 1):\n        if s[j] > s[j - 1] and s[j] > s[j + 1]:\n            count += 1\n    temp_cnt = count\n    for i in range(k, n):\n        if s[i - 1] > s[i - 2] and s[i - 1] > s[i]:\n            temp_cnt += 1\n        if s[i - k + 1] > s[i - k + 2] and s[i - k + 1] > s[i - k]:\n            temp_cnt -= 1\n        if count < temp_cnt:\n            left = i - k + 1\n            count = temp_cnt\n    return (count + 1, left + 1)\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().strip().split())\n    S = list(map(int, input().strip().split()))\n    (parts, l) = peaks(S, n, k)\n    print(f'{parts} {l}')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i + 1] < a[i] > a[i - 1]:\n            b[i] = 1\n    ind = 0\n    t = sum(b[1:k - 1])\n    s = t\n    for i in range(1, n - k + 1):\n        s -= b[i] - b[k - 2 + i]\n        if s > t:\n            t = s\n            ind = i\n    print(t + 1, ind + 1)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    (ans, tmp, ind) = (0, 0, 0)\n    for i in range(2, n):\n        if a[i - 2] < a[i - 1] > a[i]:\n            tmp += 1\n            p[i - 1] = 1\n        if i >= k:\n            tmp -= p[i - k + 1]\n        if ans < tmp:\n            ans = tmp\n            ind = max(0, i - k + 1)\n    print(ans + 1, ind + 1)", "a = list()\nb = [0]\ntc = int(input())\nwhile tc:\n    j = 0\n    p = 0\n    sum = 0\n    (n, k) = map(int, input().split())\n    a = b + list(map(int, input().split()))\n    m = k\n    for i in range(2, m):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            p += 1\n        i = i + 1\n    l = 2\n    max = p\n    q = 1\n    for i in range(m, n):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            p = p + 1\n        if a[l] > a[l + 1] and a[l] > a[l - 1] and p:\n            p -= 1\n        if p > max:\n            max = p\n            q = l\n        i += 1\n        l += 1\n    print(max + 1, q)\n    tc -= 1", "a = []\nb = [0]\nt = int(input())\nwhile t:\n    j = 0\n    p = 0\n    sum = 0\n    (n, k) = map(int, input().split())\n    a = b + list(map(int, input().split()))\n    m = k\n    for i in range(2, m):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            p += 1\n        i = i + 1\n    l = 2\n    max = p\n    q = 1\n    for i in range(m, n):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            p = p + 1\n        if a[l] > a[l + 1] and a[l] > a[l - 1] and p:\n            p -= 1\n        if p > max:\n            max = p\n            q = l\n        i += 1\n        l += 1\n    print(max + 1, q)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            b[i] = 1\n    j = k\n    i = 0\n    s = sum(b[i + 1:j - 1])\n    maxp = s\n    mini = 1\n    while j < n:\n        s -= b[i + 1]\n        i += 1\n        s += b[j - 1]\n        j += 1\n        if s > maxp:\n            maxp = s\n            mini = i + 1\n    print(maxp + 1, mini)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    values = list(map(int, input().split()))\n    peaks = 0\n    ma_peaks = 0\n    f = 0\n    for j in range(1, k - 1):\n        if values[j - 1] < values[j] > values[j + 1]:\n            peaks += 1\n    ma_peaks = peaks\n    left = 0\n    right = k - 1\n    while right < n - 1:\n        if values[left] < values[left + 1] > values[left + 2]:\n            peaks -= 1\n        if values[right - 1] < values[right] > values[right + 1]:\n            peaks += 1\n        left += 1\n        right += 1\n        if ma_peaks < peaks:\n            ma_peaks = peaks\n            f = left\n    print(ma_peaks + 1, f + 1)", "from sys import *\nimport collections\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = list(map(int, stdin.readline().split(' ')))\n    a = list(map(int, stdin.readline().split(' ')))\n    peaks = {}\n    for i in range(1, k - 1, 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            peaks[i - 1] = True\n    ans = 1\n    mx = len(peaks)\n    pks = mx\n    for i in range(k, n, 1):\n        if a[i - 1] > a[i] and a[i - 1] > a[i - 2]:\n            peaks[i - 2] = True\n            pks = pks + 1\n        if i - k in peaks:\n            del peaks[i - k]\n            pks = pks - 1\n        if pks > mx:\n            mx = pks\n            ans = i - k + 2\n    print(str(mx + 1) + ' ' + str(ans))", "import sys\ninput = lambda : sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    is_peak = [False] * n\n    for i in range(1, min(n - 1, k - 1)):\n        if a[i - 1] < a[i] and a[i + 1] < a[i]:\n            ans += 1\n            is_peak[i] = True\n    cur = ans\n    ind = 0\n    i = 1\n    j = k - 1\n    while j < n - 1:\n        if is_peak[i]:\n            cur -= 1\n        if a[j - 1] < a[j] and a[j + 1] < a[j]:\n            cur += 1\n            is_peak[j] = True\n        if cur > ans:\n            ans = cur\n            ind = i\n        i += 1\n        j += 1\n    print(ans + 1, ind + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in range(1, k - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            c = c + 1\n    ma = c\n    k1 = 0\n    for i in range(1, n - k + 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            c = c - 1\n        if l[i + k - 2] > l[i + k - 3] and l[i + k - 2] > l[i + k - 1]:\n            c = c + 1\n        if ma < c:\n            ma = c\n            k1 = i\n    print(ma + 1, k1 + 1)", "def nastyaAndDoor(n, k, array):\n    array[0] = [array[0], 0]\n    for x in range(1, n - 1):\n        if array[x] > array[x - 1][0] and array[x] > array[x + 1]:\n            array[x] = [array[x], 1]\n        else:\n            array[x] = [array[x], 0]\n    array[-1] = [array[-1], 0]\n    max_peeks = 0\n    max_l = 0\n    for x in range(1, k - 1):\n        if array[x][1] == 1:\n            max_peeks += 1\n    max_l = 0\n    peek = max_peeks\n    for x in range(1, n - k + 1):\n        if array[x][1] == 1:\n            peek -= 1\n        if array[x + k - 2][1] == 1:\n            peek += 1\n        if peek > max_peeks:\n            max_peeks = peek\n            max_l = x\n    return (max_peeks + 1, max_l + 1)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = nastyaAndDoor(n, k, l)\n    print(ans[0], ans[1])", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = 0\n    for i in range(1, k - 1):\n        if a[i] > a[i - 1] and a[i + 1] < a[i]:\n            p += 1\n    mx = p\n    ml = 0\n    for i in range(k, n):\n        if a[i - k + 1] > a[i - k] and a[i - k + 1] > a[i - k + 2]:\n            p -= 1\n        if a[i - 1] > a[i - 2] and a[i - 1] > a[i]:\n            p += 1\n        if p > mx:\n            mx = p\n            ml = i - k + 1\n    print(mx + 1, ml + 1)", "def main():\n    for _ in range(int(input())):\n        (n, k) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        (l, x) = ([], [0] * n)\n        for i in range(1, n - 1):\n            if a[i - 1] < a[i] and a[i] > a[i + 1]:\n                x[i] = 1\n        k -= 2\n        maxi = x[1:k + 1].count(1)\n        c = x[1:k + 1].count(1)\n        ans = 0\n        for i in range(k + 1, n - 1):\n            if x[i] == 1:\n                c += 1\n            if x[i - k] == 1:\n                c -= 1\n            if maxi < c:\n                maxi = c\n                ans = i - k\n        print(maxi + 1, ans + 1)\nmain()", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    test = int(input())\n    for t in range(test):\n        l = [int(i) for i in input().split(' ')]\n        n = l[0]\n        k = l[1]\n        l = [int(i) for i in input().split(' ')]\n        peaks = [0 for i in range(n)]\n        for i in range(1, n - 1):\n            if l[i - 1] < l[i] > l[i + 1]:\n                peaks[i] = 1\n        temp = 0\n        for i in range(k - 1):\n            if peaks[i] == 1:\n                temp += 1\n        ans = temp\n        ind = 0\n        for i in range(k, n):\n            if peaks[i - 1] == 1:\n                temp += 1\n            if peaks[i - k + 1] == 1:\n                temp -= 1\n            if ans < temp:\n                ans = temp\n                ind = i - k + 1\n        print(ans + 1, ind + 1)\nmain()", "def solution(k, ar):\n    n = len(ar)\n    store = [0 for i in range(n)]\n    peaks = {}\n    for i in range(1, n - 1):\n        if ar[i] > ar[i - 1] and ar[i] > ar[i + 1]:\n            store[i] = store[i - 1] + 1\n            peaks[i] = True\n        else:\n            store[i] = store[i - 1]\n    store[n - 1] = store[n - 2]\n    max_part = 0\n    index = 0\n    for i in range(n - k + 1):\n        local = store[i + k - 1] - store[i]\n        if i + k - 1 in peaks:\n            local -= 1\n        if max_part < local + 1:\n            max_part = local + 1\n            index = i\n    print(max_part, index + 1)\ntest_case = int(input())\ntest_input = []\nfor i in range(test_case):\n    (n, k) = [int(x) for x in input().split()]\n    ar = [int(x) for x in input().split()]\n    test_input.append([k, ar])\nfor test in test_input:\n    k = test[0]\n    ar = test[1]\n    solution(k, ar)", "try:\n    t = int(input())\n    for i1 in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        p = [False] * n\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                p[i] = True\n        total = p.count(True)\n        num = p[1:k - 1].count(True)\n        temp = num\n        l = 0\n        for i in range(1, n - k + 1):\n            temp += p[i + k - 2] - p[i]\n            if temp > num:\n                num = temp\n                l = i\n                if num == total:\n                    break\n        print(num + 1, l + 1)\nexcept:\n    pass", "def f(a, k):\n    pref = [0] * len(a)\n    n = len(a)\n    for i in range(1, len(a) - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            pref[i] += 1\n    for i in range(1, len(a)):\n        pref[i] += pref[i - 1]\n    mx = max(pref)\n    ind = None\n    mx = -float('inf')\n    for i in range(0, n - k + 1):\n        if mx < pref[i + k - 2] - pref[i]:\n            mx = pref[i + k - 2] - pref[i]\n            ind = i\n    return (mx + 1, ind + 1)\nfor i in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    l = list(map(int, input().strip().split()))\n    print(*f(l, b))", "f = lambda : list(map(int, input().split()))\np = lambda i: h[i - 1] < h[i] > h[i + 1] if i > 0 else 0\nfor t in range(int(input())):\n    (n, k) = f()\n    h = f()\n    s = S = R = 1\n    for r in range(1, n - 1):\n        s += p(r) - p(r - k + 2)\n        if s > S:\n            (S, R) = (s, r)\n    print(S, max(1, R - k + 3))", "def solve(arr, n, k):\n    maxPeaks = 0\n    peakCnt = 0\n    start = 0\n    (i, j) = (0, 0)\n    while j < n - 1:\n        if j - i + 1 < k:\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n            j += 1\n        else:\n            if maxPeaks < peakCnt:\n                maxPeaks = peakCnt\n                start = i\n            i += 1\n            if i - 1 >= 0 and i + 1 <= n - 1:\n                if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n                    peakCnt -= 1\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n                j += 1\n    if maxPeaks < peakCnt:\n        maxPeaks = peakCnt\n        start = i\n    return (maxPeaks + 1, start + 1)\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (cnt, idx) = solve(arr, n, k)\n    print(cnt, idx)\n    t -= 1", "def solve(arr, n, k):\n    maxPeaks = 0\n    peakCnt = 0\n    start = 0\n    (i, j) = (0, 1)\n    while j < n - 1:\n        if j - i + 1 < k:\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n            j += 1\n        else:\n            if maxPeaks < peakCnt:\n                maxPeaks = peakCnt\n                start = i\n            i += 1\n            if i - 1 >= 0 and i + 1 <= n - 1:\n                if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n                    peakCnt -= 1\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n                j += 1\n    if maxPeaks < peakCnt:\n        maxPeaks = peakCnt\n        start = i\n    return (maxPeaks + 1, start + 1)\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (cnt, idx) = solve(arr, n, k)\n    print(cnt, idx)\n    t -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    b = [0]\n    for (x, y, z) in zip(a, a[1:], a[2:]):\n        b += (b[-1] + (x < y > z),)\n    a = [y - x + 1 for (x, y) in zip(b, b[k - 2:])]\n    m = max(a)\n    print(m, a.index(m) + 1)", "def solve(arr, n, k):\n    maxPeaks = 0\n    peakCnt = 0\n    start = 0\n    (i, j) = (0, 0)\n    while j < n - 1:\n        if j - i + 1 < k:\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n            j += 1\n        else:\n            if maxPeaks < peakCnt:\n                maxPeaks = peakCnt\n                start = i\n            i += 1\n            if i - 1 >= 0 and i + 1 <= n - 1:\n                if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n                    peakCnt -= 1\n            if j - 1 >= 0 and j + 1 <= n - 1:\n                if arr[j - 1] < arr[j] and arr[j] > arr[j + 1]:\n                    peakCnt += 1\n                j += 1\n    if maxPeaks < peakCnt:\n        maxPeaks = peakCnt\n        start = i\n    return (maxPeaks + 1, start + 1)\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (cnt, idx) = solve(arr, n, k)\n    print(cnt, idx)\n    t -= 1", "from sys import stdin\nfor j in range(int(stdin.readline())):\n    [n, k] = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0]\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            b.append(1)\n        else:\n            b.append(0)\n    b.append(0)\n    l = 0\n    t = sum(b[1:k - 1])\n    s = sum(b[1:k - 1])\n    for i in range(1, n - k + 1):\n        s = s - b[i] + b[k - 2 + i]\n        if s > t:\n            t = s\n            l = i\n    print(t + 1, l + 1)", "from sys import stdin\nt = int(stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    count = 0\n    peaks = []\n    for j in range(1, k - 1):\n        if arr[j] > arr[j - 1] and arr[j] > arr[j + 1]:\n            peaks.append(j)\n            count += 1\n    p = count\n    j = 1\n    loop = 0\n    ans_so_far = p\n    l_so_far = 0\n    while j <= n - k:\n        l = j\n        r = j + k - 2\n        p1 = p\n        if loop < count and peaks[loop] == l:\n            p1 -= 1\n            loop += 1\n        if arr[r] > arr[r - 1] and arr[r] > arr[r + 1]:\n            p1 += 1\n            peaks.append(r)\n            count += 1\n        p = p1\n        if p > ans_so_far:\n            ans_so_far = p\n            l_so_far = j\n        j += 1\n    print(str(ans_so_far + 1) + ' ' + str(l_so_far + 1))", "inf = float('inf')\nen = lambda x: list(enumerate(x))\nii = lambda : int(input())\nr = lambda : map(int, input().split())\nrr = lambda : list(r())\n\ndef solve():\n    (n, k) = r()\n    arr = rr()\n    brr = [0] * n\n    c = 0\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] > arr[i + 1]:\n            c += 1\n        brr[i] = c\n    ans = -inf\n    l = -1\n    for i in range(n - k + 2):\n        if ans < brr[i + k - 2] - brr[i]:\n            ans = brr[i + k - 2] - brr[i]\n            l = i\n    print(ans + 1, l + 1)\nfor _ in range(ii()):\n    solve()", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, k) = ipl()\n    a = ipl()\n    i = j = 1\n    cp = p = 0\n    r = 1\n    while j < n - 1:\n        if a[j] > a[j - 1] and a[j] > a[j + 1]:\n            cp += 1\n        if j - i + 1 == k - 2:\n            if p < cp:\n                p = cp\n                r = i\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                cp -= 1\n            i += 1\n        j += 1\n    print(p + 1, r)\nfor _ in range(ipn()):\n    solve()", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        (n, k) = num()\n        a = li()\n        b = [0] * n\n        z = [0] * n\n        cc = 0\n        for i in range(1, k - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                b[i] = 1\n                z[i] = 1\n                cc = cc + 1\n        for i in range(1, n):\n            b[i] = b[i - 1] + b[i]\n        mx = cc + 1\n        ind = 1\n        for i in range(1, n - k + 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                cc -= 1\n            op = i + k - 2\n            if a[op] > a[op - 1] and a[op] > a[op + 1]:\n                cc += 1\n            if cc + 1 > mx:\n                mx = cc + 1\n                ind = i + 1\n        print(mx, ind)\nsolve()", "def main():\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    picks = []\n    max_item = 0\n    for i in range(1, n - 1):\n        if lst[i - 1] < lst[i] and lst[i] > lst[i + 1]:\n            picks.append(i + 1)\n    if len(picks) == 0:\n        print(1, 1)\n        return\n    picked = [[picks[0], 0]]\n    to_del = 0\n    mx = 0\n    for i in range(len(picks)):\n        for r in range(picked[-1][1] + 1, len(picks)):\n            if picks[r] <= picks[i] + k - 3:\n                picked.append([picks[r], r])\n            else:\n                break\n        cur = len(picked) - i\n        if mx < cur:\n            max_item = picked[-1][0]\n            mx = cur\n    print(mx + 1, max(1, max_item - k + 2))\nt = int(input())\nfor i in range(t):\n    main()", "def check(arr, n, k):\n    brr = [0]\n    for i in range(1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            brr.append(1)\n        else:\n            brr.append(0)\n    brr.append(0)\n    p = 0\n    val = sum(brr[1:k - 1])\n    m = val\n    j = 1\n    temp = brr[j]\n    if k < n:\n        for i in range(k - 1, n - 1):\n            val = val + brr[i] - temp\n            if val > m:\n                m = val\n                p = i - k + 2\n            j += 1\n            temp = brr[j]\n    return [m + 1, p + 1]\nt = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    result = check(arr, n, k)\n    print(result[0], result[1])\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i + 1] < a[i] > a[i - 1]:\n            b[i] = 1\n    ind = 0\n    t = sum(b[1:k - 1])\n    s = t\n    for i in range(1, n - k + 1):\n        s -= b[i] - b[k - 2 + i]\n        if s > t:\n            t = s\n            ind = i\n    print(t + 1, ind + 1)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    mount = list(map(int, input().split()))\n    peaks = [0] * n\n    for i in range(1, n - 1):\n        if mount[i] > mount[i + 1] and mount[i] > mount[i - 1]:\n            peaks[i] = 1\n    bmax = sum(peaks[1:k - 1])\n    b = bmax\n    lowest = 0\n    for i in range(1, n - k + 1):\n        b -= peaks[i] - peaks[k - 2 + i]\n        if b > bmax:\n            lowest = i\n            bmax = b\n    print(bmax + 1, lowest + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(1, k - 1):\n        if a[i] > a[i + 1] and a[i] > a[i - 1]:\n            c += 1\n    a1 = c\n    a2 = 0\n    l = 0\n    r = k - 1\n    while r < n - 1:\n        l += 1\n        r += 1\n        if a[l] > a[l + 1] and a[l] > a[l - 1]:\n            c -= 1\n        if a[r - 1] > a[r] and a[r - 1] > a[r - 2]:\n            c += 1\n        if c > a1:\n            a1 = c\n            a2 = l\n    print(a1 + 1, a2 + 1)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().strip().split(' '))\n    lst = list(map(int, input().strip().split(' ')))\n    l = [0]\n    m = 0\n    for j in range(1, n - 1):\n        if lst[j] > lst[j - 1] and lst[j] > lst[j + 1]:\n            m += 1\n        l.append(m)\n    l.append(m)\n    t1 = 1\n    l1 = 0\n    for j in range(n - k + 1):\n        s = l[j + k - 2] - l[j]\n        if s > l1:\n            l1 = s\n            t1 = j + 1\n    print(l1 + 1, t1, end=' ')\n    print()", "t = int(input())\nfor T in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a = [0] + a + [0]\n    csum = (n + 1) * [0]\n    for i in range(1, n + 1, 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            csum[i] = 1\n    for i in range(1, n + 1, 1):\n        csum[i] += csum[i - 1]\n    (t_ans, l_ans) = (-1, -1)\n    for l in range(1, n - k + 2, 1):\n        r = l + k - 1\n        peak_num = csum[r - 1] - csum[l]\n        if peak_num > t_ans:\n            t_ans = peak_num\n            l_ans = l\n    print(t_ans + 1, l_ans)", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (n, k) = ipl()\n    a = ipl()\n    i = p = 0\n    psum = [0] * n\n    while i < n:\n        if i > 0 and a[i] > a[i - 1] and (i < n - 1) and (a[i] > a[i + 1]):\n            p += 1\n        psum[i] = p\n        i += 1\n    i = 0\n    r = 0\n    l = 1\n    while i + k - 1 <= n:\n        if psum[i + k - 2] - psum[i] > r:\n            r = psum[i + k - 2] - psum[i]\n            l = i + 1\n        i += 1\n    print(r + 1, l)\nfor _ in range(ipn()):\n    solve()", "t = int(input())\nmatrix = [0 for i in range(200006)]\nwhile t > 0:\n    try:\n        (max, pos, cnt) = (0, 1, 0)\n        (n, k) = map(int, input().split())\n        ls = list(map(int, input().split()))\n        ls = [0] + ls + [0]\n        for i in range(1, n + 1):\n            if ls[i] > ls[i - 1] and ls[i] > ls[i + 1]:\n                cnt += 1\n            matrix[i] = cnt\n        for i in range(1, n - k + 2):\n            cnt = matrix[i + k - 2] - matrix[i]\n            if cnt > max:\n                max = cnt\n                pos = i\n        print(max + 1, pos)\n        t -= 1\n    except:\n        break", "def solve():\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    l = len(a)\n    b = [0 for i in range(l)]\n    for i in range(1, l - 1):\n        if a[i - 1] < a[i] and a[i] > a[i + 1]:\n            b[i] = 1\n    mx = 0\n    mxi = 0\n    pref = 0\n    k -= 2\n    for i in range(1, l - 1):\n        if i > k:\n            pref -= b[i - k]\n            pref += b[i]\n            if pref > mx:\n                mx = pref\n                mxi = i - k\n        else:\n            pref += b[i]\n            if pref > mx:\n                mx = pref\n                mxi = 0\n    print(mx + 1, mxi + 1)\nt = int(input())\nfor i in range(t):\n    solve()", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\nP = 1000000007\n\ndef main():\n    for t in range(I()):\n        (n, k) = In()\n        arr = L()\n        lis = [0 for i in range(n)]\n        for i in range(1, n - 1):\n            if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n                lis[i] = 1\n        for i in range(1, n):\n            lis[i] += lis[i - 1]\n        l = 0\n        mx = 0\n        for i in range(n - k + 1):\n            if lis[i + k - 2] - lis[i] > mx:\n                mx = lis[i + k - 2] - lis[i]\n                l = i\n        print(mx + 1, l + 1)\nmain()", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    b = [0]\n    for (x, y, z) in zip(a, a[1:], a[2:]):\n        b += (b[-1] + (x < y > z),)\n    a = [y - x + 1 for (x, y) in zip(b, b[k - 2:])]\n    m = max(a)\n    print(m, a.index(m) + 1)", "def solution():\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(1, n - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            p[i] = 1\n    cnt = p[1:k - 1].count(1)\n    ans = cnt\n    l = 0\n    for i in range(n - k):\n        if p[i + k - 1] == 1:\n            cnt += 1\n        if p[i + 1] == 1:\n            cnt -= 1\n        if cnt > ans:\n            ans = cnt\n            l = i + 1\n    print(ans + 1, l + 1)\nfor _ in range(int(input())):\n    solution()", "t = int(input())\nfor q in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    lis = [0]\n    t = 1\n    for i in range(1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            lis.append(lis[-1] + 1)\n        else:\n            lis.append(lis[-1])\n    lis.append(lis[-1])\n    ans = [1, 1]\n    m = 0\n    for i in range(n - k + 1):\n        temp = lis[i + k - 1] - lis[i]\n        if lis[i] > lis[i - 1]:\n            temp -= 1\n        if lis[i + k - 1] > lis[i + k - 2]:\n            temp -= 1\n        if temp > m:\n            ans = [temp + 1, i + 1]\n            m = temp\n    print(*ans)", "def peaks(a):\n    yield False\n    for i in range(1, len(a) - 1):\n        yield (a[i] > a[i - 1] and a[i] > a[i + 1])\n    yield False\n\ndef solve(a, k):\n    peaks_of_a = list(peaks(a))\n    curr_peaks = sum(peaks_of_a[1:k - 1])\n    max_peaks = curr_peaks\n    max_l = 0\n    for i in range(1, len(a) - k + 1):\n        if peaks_of_a[i]:\n            curr_peaks -= 1\n        if peaks_of_a[i + k - 2]:\n            curr_peaks += 1\n        if curr_peaks > max_peaks:\n            max_peaks = curr_peaks\n            max_l = i\n    return (max_peaks + 1, max_l + 1)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    print(' '.join(map(str, solve(a, k))))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [0, 0]\n    c = [0, 0]\n    for x in range(1, n - 1):\n        if a[x - 1] < a[x] and a[x] > a[x + 1]:\n            b.append(1)\n        else:\n            b.append(0)\n    b.append(0)\n    for x in range(2, n + 1):\n        c.append(c[-1] + b[x])\n    m = 0\n    idx = 1\n    for x in range(1, n - k + 2):\n        if c[x + k - 2] - c[x] > m:\n            m = c[x + k - 2] - c[x]\n            idx = x\n    print(m + 1, idx)", "def valentine(n, k, A):\n    d = {}\n    for i in range(1, n - 1):\n        if A[i] > A[i - 1] and A[i] > A[i + 1]:\n            d[i] = 1\n    l = 0\n    r = l + k - 1\n    count = 0\n    for i in range(1, r):\n        if i in d:\n            count += 1\n    max_c = count\n    min_l = l\n    l += 1\n    r = l + k - 1\n    while r < n:\n        if l in d:\n            count -= 1\n        if r - 1 in d:\n            count += 1\n        if count > max_c:\n            min_l = l\n            max_c = count\n        l += 1\n        r = l + k - 1\n    print(*[max_c + 1, min_l + 1])\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    valentine(n, k, arr)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = []\n    flag = 0\n    for (f, s) in zip(a[:-1], a[1:]):\n        if s > f:\n            peaks.append(0)\n            flag = 1\n        if f > s:\n            if flag == 1:\n                peaks.append(1)\n            else:\n                peaks.append(0)\n            flag = 0\n    peaks.append(0)\n    best_l = n - k\n    max_p = sum(peaks[best_l + 1:])\n    cur_p = max_p\n    for i in range(1, n - k + 1):\n        if peaks[n - k - i + 1] == 1:\n            cur_p += 1\n        if peaks[n - i - 1] == 1:\n            cur_p = cur_p - 1\n        if cur_p >= max_p:\n            max_p = cur_p\n            best_l = n - k - i\n    print(max_p + 1, best_l + 1)", "def peaks(a):\n    p = 0\n    b = [0] * len(a)\n    for i in range(1, len(a) - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            b[i] = 1\n    return b\nt = int(input())\nfor q in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    b = peaks(l)\n    p = b[1:k - 1].count(1)\n    tot = p\n    index = 1\n    for i in range(1, n - k + 1):\n        p += b[i + k - 2] - b[i]\n        if tot < p:\n            tot = p\n            index = i + 1\n    print(tot + 1, index)", "def solve(n, k, hts):\n    prefix = [0] * n\n    for i in range(1, n - 1):\n        if hts[i - 1] < hts[i] and hts[i] > hts[i + 1]:\n            prefix[i] = 1\n    for i in range(1, n):\n        prefix[i] = prefix[i] + prefix[i - 1]\n    (pieces, ans) = (0, 0)\n    for i in range(n):\n        left = i\n        right = left + k - 1\n        if right >= n:\n            break\n        p = prefix[right - 1] - prefix[left]\n        if p > pieces:\n            pieces = p\n            ans = left\n    return (pieces + 1, ans + 1)\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    hts = list(map(int, input().split()))\n    (t, l) = solve(n, k, hts)\n    print(f'{t} {l}')", "def RA():\n    return list(map(int, input().split()))\n\ndef solve():\n    (n, k) = RA()\n    arr = RA()\n    isPeak = [False] * len(arr)\n    for i in range(1, len(arr) - 1):\n        if arr[i - 1] < arr[i] and arr[i + 1] < arr[i]:\n            isPeak[i] = True\n    peakCount = 0\n    for i in range(1, k - 1):\n        if isPeak[i]:\n            peakCount += 1\n    best = peakCount\n    bestStart = 0\n    for i in range(k, n):\n        if isPeak[i - 1]:\n            peakCount += 1\n        if isPeak[i - k + 1]:\n            peakCount -= 1\n        if peakCount > best:\n            best = peakCount\n            bestStart = i - k + 1\n    print(best + 1, bestStart + 1)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i + 1] < a[i] > a[i - 1]:\n            b[i] = 1\n    ind = 0\n    t = sum(b[1:k - 1])\n    s = t\n    for i in range(1, n - k + 1):\n        s -= b[i] - b[k - 2 + i]\n        if s > t:\n            t = s\n            ind = i\n    print(t + 1, ind + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i + 1] < a[i] > a[i - 1]:\n            b[i] = 1\n    ind = 0\n    t = sum(b[1:k - 1])\n    s = t\n    for i in range(1, n - k + 1):\n        s -= b[i] - b[k - 2 + i]\n        if s > t:\n            t = s\n            ind = i\n    print(t + 1, ind + 1)", "def solve():\n    (n, k) = [int(x) for x in input().split()]\n    li = [int(x) for x in input().split()]\n    (min_index, max_peak) = (1, 0)\n    for i in range(1, k - 1):\n        if li[i] > li[i - 1] and li[i] > li[i + 1]:\n            max_peak += 1\n    last_window_peak = max_peak\n    for i in range(k, n):\n        curr_start = i - k + 1\n        if li[curr_start] > li[curr_start - 1] and li[curr_start] > li[curr_start + 1]:\n            last_window_peak -= 1\n        if li[i - 1] > li[i - 2] and li[i - 1] > li[i]:\n            last_window_peak += 1\n        if last_window_peak > max_peak:\n            max_peak = last_window_peak\n            min_index = curr_start + 1\n    print(max_peak + 1, min_index)\nt = int(input())\nfor i in range(t):\n    solve()", "def f(l, k):\n    maxPeakCount = 0\n    maxPeakLeftIndex = 0\n    leftIndex = 0\n    rightIndex = leftIndex + k - 1\n    currPeakCount = 0\n    peakSet = set()\n    index = leftIndex + 1\n    while index < len(l):\n        if index >= rightIndex:\n            if currPeakCount > maxPeakCount:\n                maxPeakCount = currPeakCount\n                maxPeakLeftIndex = leftIndex\n            if index == len(l) - 1:\n                break\n            leftIndex += 1\n            rightIndex += 1\n            if leftIndex in peakSet:\n                currPeakCount -= 1\n        if l[index] > l[index + 1] and l[index] > l[index - 1]:\n            currPeakCount += 1\n            peakSet.add(index)\n        index += 1\n    return (maxPeakCount + 1, maxPeakLeftIndex + 1)\nt = int(input())\nfor _ in range(t):\n    (_, k) = tuple(map(int, input().split()))\n    l = list(map(int, input().split()))\n    res = f(l, k)\n    print(res[0], res[1])", "R1 = lambda : list(map(int, input().split()))\nR2 = lambda : int(input())\nt = R2()\nfor _ in range(t):\n    (n, k) = R1()\n    A = R1()\n    res = [0] * n\n    for i in range(1, n - 1):\n        if A[i - 1] < A[i] > A[i + 1]:\n            res[i] += 1\n    s = sum(res[1:k - 1])\n    (m, l) = (s, 0)\n    for i in range(1, n - k + 1):\n        s -= res[i]\n        s += res[i + k - 2]\n        if s > m:\n            m = s\n            l = i\n    print(m + 1, l + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [False] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            peaks[i] = True\n    totalnumofpeaks = peaks.count(True)\n    numofpeaks = peaks[1:k - 1].count(True)\n    temp = numofpeaks\n    l = 0\n    for i in range(1, n - k + 1):\n        temp += peaks[i + k - 2] - peaks[i]\n        if temp > numofpeaks:\n            numofpeaks = temp\n            l = i\n            if numofpeaks == totalnumofpeaks:\n                break\n    print(numofpeaks + 1, l + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(1, n - 1):\n        if a[i + 1] < a[i] > a[i - 1]:\n            b[i] = 1\n    ind = 0\n    t = sum(b[1:k - 1])\n    s = t\n    for i in range(1, n - k + 1):\n        s -= b[i] - b[k - 2 + i]\n        if s > t:\n            t = s\n            ind = i\n    print(t + 1, ind + 1)", "get_int = lambda : int(input())\nget_mul_int = lambda : map(int, input().rstrip().split())\nget_list = lambda : list(map(int, input().rstrip().split()))\nTEST_CASES = True\n\ndef main():\n    (n, k) = get_mul_int()\n    a = get_list()\n    (tukde, l) = (0, 0)\n    new = [0]\n    for j in range(1, n - 1):\n        if a[j - 1] < a[j] > a[j + 1]:\n            new.append(1 + new[-1])\n        else:\n            new.append(0 + new[-1])\n    new.append(0 + new[-1])\n    for i in range(n - k + 1):\n        m = new[i + k - 2] - new[i]\n        if m > tukde:\n            (tukde, l) = (m, i)\n    print(tukde + 1, l + 1) if tukde > 0 else print(1, 1)\nif not TEST_CASES:\n    main()\nelse:\n    [main() for _ in range(int(input()))]", "from collections import deque\n\ndef tc():\n    (n, k) = map(int, input().split())\n    mtns = [int(x) for x in input().split()]\n    peaks = [False] * n\n    for i in range(1, n - 1):\n        if mtns[i] > mtns[i - 1] and mtns[i] > mtns[i + 1]:\n            peaks[i] = True\n    np = sum(peaks[1:k - 1])\n    best = np\n    l = 1\n    for i in range(k, n):\n        np += peaks[i - 1] - peaks[i - k + 1]\n        if np > best:\n            best = np\n            l = i - k + 2\n    return (best + 1, l)\nT = int(input())\nfor _ in range(T):\n    (t, l) = tc()\n    print(t, l)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    mountain = list(map(int, input().split()))\n    peak = [False for j in range(n)]\n    min_index = 1\n    peak_count = 0\n    for j in range(1, k - 1):\n        if mountain[j] > mountain[j - 1] and mountain[j] > mountain[j + 1]:\n            peak[j] = True\n            peak_count += 1\n    max_peak_count = peak_count\n    for j in range(k - 1, n - 1):\n        if peak[j - k + 2] == True:\n            peak_count -= 1\n        if mountain[j] > mountain[j - 1] and mountain[j] > mountain[j + 1]:\n            peak_count += 1\n            peak[j] = True\n            if peak_count > max_peak_count:\n                max_peak_count = peak_count\n                min_index = j - k + 3\n    print(max_peak_count + 1, min_index)", "def manip(arr, n, k):\n    hills = [0 for i in range(0, n)]\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            hills[i] = 1\n    pref = []\n    sumSoFar = 0\n    for i in range(n):\n        sumSoFar += hills[i]\n        pref.append(sumSoFar)\n    ma = index = 0\n    for l in range(0, n - k + 1):\n        curr = pref[l + k - 2] - pref[l]\n        if curr > ma:\n            ma = curr\n            index = l\n    return (ma + 1, index + 1)\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (m, l) = manip(arr, n, k)\n    print(m, l)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = [int(i) for i in input().split()]\n    m2 = [False] + [m[i - 1] < m[i] > m[i + 1] for i in range(1, n - 1)] + [False]\n    m3 = [sum(m2[1:k - 1])]\n    for i in range(1, n - k + 1):\n        m3.append(m3[-1] - m2[i] + m2[i + k - 2])\n    a = max(m3)\n    b = m3.index(a)\n    print(a + 1, b + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [False] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            peaks[i] = True\n    totalnumofpeaks = peaks.count(True)\n    numofpeaks = peaks[1:k - 1].count(True)\n    temp = numofpeaks\n    l = 0\n    for i in range(1, n - k + 1):\n        temp += peaks[i + k - 2] - peaks[i]\n        if temp > numofpeaks:\n            numofpeaks = temp\n            l = i\n            if numofpeaks == totalnumofpeaks:\n                break\n    print(numofpeaks + 1, l + 1)", "from _collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = deque([])\n    ma = 0\n    ans = 0\n    i = 1\n    while i < n:\n        while i < n and a[i] < a[i - 1]:\n            i += 1\n        while i < n and a[i] > a[i - 1]:\n            i += 1\n        if i < n and a[i] < a[i - 1]:\n            if not b or i + 2 - b[0] <= k:\n                b.append(i - 1)\n            else:\n                b.popleft()\n                b.append(i - 1)\n            if len(b) > ma:\n                ans = b[-1]\n                ma = len(b)\n    print(ma + 1, max(ans - k + 3, 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = [0] * n\n    for i in range(1, n - 1):\n        if l[i - 1] < l[i] > l[i + 1]:\n            l1[i] += 1\n    cnt = l1[1:k - 1].count(1)\n    ans = cnt\n    a = 0\n    for i in range(n - k):\n        if l1[i + k - 1] == 1:\n            cnt += 1\n        if l1[i + 1] == 1:\n            cnt -= 1\n        if cnt > ans:\n            ans = cnt\n            a = i + 1\n    print(ans + 1, a + 1)", "t = int(input())\nfor l in range(0, t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bin = [0] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            bin[i] = 1\n    l = 0\n    r = l + k\n    peaks = 0\n    (m, ml) = (0, 0)\n    for i in range(0, r):\n        if bin[i] == 1:\n            peaks += 1\n        if i == r - 1 and bin[i] == 1:\n            m = peaks - 1\n        else:\n            m = peaks\n    for l in range(1, n - k + 1):\n        if bin[l] == 1:\n            peaks -= 1\n        if m < peaks:\n            m = peaks\n            ml = l\n        if bin[r] == 1:\n            peaks += 1\n        r += 1\n    print(m + 1, ml + 1)", "t = int(input())\nfor h in range(t):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    k -= 2\n    j = n - 1\n    i = j - k\n    s = 1\n    for l in range(i, j):\n        if x[l] > x[l - 1] and x[l] > x[l + 1]:\n            s += 1\n    m = s\n    ind = i - 1\n    j -= 1\n    i -= 1\n    while i > 0:\n        if x[i] > x[i - 1] and x[i] > x[i + 1]:\n            s += 1\n        if x[j] > x[j - 1] and x[j] > x[j + 1]:\n            s -= 1\n        if s >= m:\n            ind = i - 1\n            m = s\n        i -= 1\n        j -= 1\n    print(m, ind + 1)", "for test_case in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    for i in range(1, n - 1):\n        cnt[i + 1] = cnt[i] + (a[i] > a[i - 1] and a[i] > a[i + 1])\n    (t, l) = (-1, -1)\n    for i in range(1, n - k + 2):\n        if cnt[i + k - 2] - cnt[i] > t:\n            (t, l) = (cnt[i + k - 2] - cnt[i], i)\n    print(t + 1, l)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(n - 2):\n        if a[i] < a[i + 1] and a[i + 1] > a[i + 2]:\n            p[i + 1] = 1\n    cnt = p[1:k - 1].count(1)\n    ans = cnt\n    l = 0\n    for i in range(n - k):\n        if p[i + k - 1] == 1:\n            cnt += 1\n        if p[i + 1] == 1:\n            cnt -= 1\n        if cnt > ans:\n            ans = cnt\n            l = i + 1\n    print(ans + 1, l + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    p = []\n    d = {}\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            p.append(i)\n            d[i] = True\n    cnt = [0] * (n - k + 1)\n    ans = 0\n    for j in range(0, k - 1):\n        if j in d:\n            ans += 1\n    tmp = ans\n    mx = ans\n    pos = 0\n    for i in range(1, n - k + 2):\n        if i in d:\n            tmp -= 1\n        if i + k - 2 in d:\n            tmp += 1\n        if mx < tmp:\n            mx = tmp\n            pos = i\n    print(str(mx + 1) + ' ' + str(pos + 1))", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k -= 2\n    l_max = 1\n    count = 0\n    max_count = 0\n    for i in range(1, k + 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            count += 1\n    max_count = count\n    for i in range(k + 1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            count += 1\n        if a[i - k] > a[i - k - 1] and a[i - k] > a[i - k + 1]:\n            count -= 1\n        if count > max_count:\n            l_max = i - k + 1\n            max_count = count\n    print(max_count + 1, l_max)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    peak = [0]\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] > a[i + 1]:\n            peak.append(1)\n        else:\n            peak.append(0)\n    peak.append(0)\n    t = sum(peak[:k - 1])\n    l = 1\n    count = t\n    for i in range(2, n - k + 2):\n        if peak[i - 1] == 1:\n            count -= 1\n        if peak[i + k - 3] == 1:\n            count += 1\n        if count > t:\n            t = count\n            l = i\n    print(t + 1, l)", "def main():\n    for t in range(int(input())):\n        (n, k) = map(int, input().split())\n        a = [int(i) for i in input().split()]\n        peaks = [-1 for i in range(n)]\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                peaks[i] = 1\n        p = 0\n        index = 0\n        for i in range(1, k - 1):\n            if peaks[i] == 1:\n                p += 1\n        count = p\n        for i in range(1, n - k + 2):\n            if peaks[i] == 1:\n                count -= 1\n            if peaks[i + k - 2] == 1:\n                count += 1\n            if count > p:\n                p = count\n                index = i\n        print(p + 1, index + 1)\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    counter = 0\n    l = 0\n    j = 1\n    back = 1\n    for i in range(1, k - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            counter += 1\n    count = counter\n    for i in range(k - 1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            count += 1\n        if arr[back] > arr[back - 1] and arr[back] > arr[back + 1]:\n            count -= 1\n        if count > counter:\n            counter = count\n            j = back + 1\n        back += 1\n    print(counter + 1, j)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    c = 0\n    for j in range(1, k - 1):\n        if a[j - 1] < a[j] > a[j + 1]:\n            c += 1\n    t = c\n    l = 0\n    for j in range(1, n - k + 1):\n        if a[j - 1] < a[j] > a[j + 1]:\n            c -= 1\n        if a[j + k - 3] < a[j + k - 2] > a[j + k - 1]:\n            c += 1\n        if c > t:\n            t = c\n            l = j\n    print(t + 1, l + 1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    my_list = list(map(int, input().split()))\n    l = 0\n    peaks = 0\n    max_peaks = 0\n    for i in range(1, l + k - 1):\n        if my_list[i] > my_list[i - 1] and my_list[i] > my_list[i + 1]:\n            peaks += 1\n        if peaks > max_peaks:\n            max_peaks = peaks\n    for i in range(1, n - k + 1):\n        if my_list[i] > my_list[i - 1] and my_list[i] > my_list[i + 1]:\n            peaks -= 1\n        var = i + k - 2\n        if my_list[var] > my_list[var - 1] and my_list[var] > my_list[var + 1]:\n            peaks += 1\n        if peaks > max_peaks:\n            max_peaks = peaks\n            l = i\n    print(max_peaks + 1, l + 1)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in [0] * t:\n    (n, k) = R()\n    a = (*R(),)\n    b = [0]\n    for (x, y, z) in zip(a, a[1:], a[2:]):\n        b += (b[-1] + (x < y > z),)\n    a = [y - x for (x, y) in zip(b, b[k - 2:])]\n    m = max(a)\n    print(m + 1, a.index(m) + 1)", "def isPeak(arr, i):\n    return arr[i - 1] < arr[i] and arr[i] > arr[i + 1]\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    arr.insert(0, -1)\n    c = 0\n    for i in range(2, k):\n        c += isPeak(arr, i)\n    ans = c\n    left = 1\n    for i in range(k, n):\n        c += isPeak(arr, i) - isPeak(arr, i - k + 2)\n        if c > ans:\n            ans = c\n            left = i - k + 2\n    print(ans + 1, left)\ntry:\n    for _ in range(int(input())):\n        solve()\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(n - 2):\n        if a[i] < a[i + 1] and a[i + 1] > a[i + 2]:\n            p[i + 1] = 1\n    cnt = p[1:k - 1].count(1)\n    ans = cnt\n    l = 0\n    for i in range(n - k):\n        if p[i + k - 1] == 1:\n            cnt += 1\n        if p[i + 1] == 1:\n            cnt -= 1\n        if cnt > ans:\n            ans = cnt\n            l = i + 1\n    print(ans + 1, l + 1)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = temp = ind = 0\n    for i in range(k):\n        if i != 0 and i != k - 1:\n            if a[i + 1] < a[i] > a[i - 1]:\n                ans += 1\n    (p1, p2) = (1, k)\n    temp = ans\n    while p2 < n:\n        if a[p1 + 1] < a[p1] > a[p1 - 1]:\n            temp -= 1\n        if a[p2] < a[p2 - 1] > a[p2 - 2]:\n            temp += 1\n        if temp > ans:\n            ind = p1\n            ans = temp\n        p1 += 1\n        p2 += 1\n    print(str(ans + 1), str(ind + 1))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    pref = [0] * n\n    for i in range(1, n - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            pref[i] += 1\n    for i in range(1, n):\n        pref[i] += pref[i - 1]\n    mx = 0\n    idx = 0\n    for i in range(n - k + 1):\n        ans = pref[i + k - 2] - pref[i] + 1\n        if ans > mx:\n            mx = ans\n            idx = i + 1\n    print(mx, idx)", "import math\nimport sys\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(item) for item in input().split()]\n    p = [0] * n\n    for i in range(n - 2):\n        if a[i] < a[i + 1] and a[i + 1] > a[i + 2]:\n            p[i + 1] = 1\n    count1 = p[1:k - 1].count(1)\n    ans = count1\n    l = 0\n    for i in range(n - k):\n        if p[i + k - 1] == 1:\n            count1 += 1\n        if p[i + 1] == 1:\n            count1 -= 1\n        if count1 > ans:\n            ans = count1\n            l = i + 1\n    print(ans + 1, l + 1)", "def manip(arr, n, k):\n    hills = [0 for i in range(0, n)]\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            hills[i] = 1\n    pref = []\n    sumSoFar = 0\n    for i in range(n):\n        sumSoFar += hills[i]\n        pref.append(sumSoFar)\n    ma = index = 0\n    for l in range(0, n - k + 1):\n        curr = pref[l + k - 2] - pref[l]\n        if curr > ma:\n            ma = curr\n            index = l\n    return (ma + 1, index + 1)\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (m, lf) = manip(arr, n, k)\n    print(m, lf)", "def solve():\n    (n, k) = map(int, input().split())\n    x = [0 for i in range(n - k + 1)]\n    a = list(map(int, input().split()))\n    l = 0\n    r = k - 2\n    for i in range(1, k - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            x[l] += 1\n    for i in range(n - k):\n        l += 1\n        r += 1\n        x[l] = x[l - 1]\n        x[l] -= a[l - 1] < a[l] > a[l + 1]\n        x[l] += a[r - 1] < a[r] > a[r + 1]\n    m = max(x)\n    print(max(x) + 1, end=' ')\n    for i in range(n - k + 1):\n        if x[i] == m:\n            print(i + 1)\n            break\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    peak = 0\n    for i in range(1, k - 1):\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n            peak += 1\n    maxpeak = peak\n    index = 1\n    start = 1\n    end = k\n    while end < n:\n        if l[start] > l[start - 1] and l[start] > l[start + 1]:\n            peak -= 1\n        if l[end - 1] > l[end - 2] and l[end - 1] > l[end]:\n            peak += 1\n        if peak > maxpeak:\n            maxpeak = peak\n            index = start + 1\n        start += 1\n        end += 1\n    print(maxpeak + 1, index)", "import sys\nimport math\nimport collections\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, k) = get_ints()\n    arr = get_list()\n    peak = []\n    for i in range(1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            peak.append(i)\n    count = 0\n    pos = 0\n    ans = []\n    r = 0\n    for i in range(len(peak)):\n        p = peak[i]\n        ans.append(p)\n        if ans[-1] - ans[0] < k - 2:\n            if len(ans) > count:\n                count = len(ans)\n                pos = ans[0]\n                r = ans[-1]\n        else:\n            ans.pop(0)\n    selected = r - pos + 3\n    pos_left = k - selected\n    start = max(1, pos - pos_left)\n    print(count + 1, start)"]