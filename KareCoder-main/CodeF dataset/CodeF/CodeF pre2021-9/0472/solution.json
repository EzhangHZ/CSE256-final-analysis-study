["import sys\n\ndef solver(source, target):\n    if len(target) > len(source):\n        return False\n    elif len(target) == len(source):\n        return source == target\n    elif len(target) == 0:\n        return True\n    else:\n        c_source = len(source) - 1\n        for i_target in range(len(target) - 1, -1, -1):\n            found = False\n            g = target[i_target]\n            for i_source in range(c_source, -1, -2):\n                if source[i_source] == g:\n                    c_source = i_source - 1\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\nstdin_iter = iter(sys.stdin)\nnum_tests = int(next(stdin_iter))\nfor _ in range(num_tests):\n    source = next(stdin_iter)\n    target = next(stdin_iter)\n    print('YES' if solver(source, target) else 'NO')", "import sys\n\ndef checkBack(s, t):\n    ptr1 = 1\n    ptr2 = 1\n    if len(t) > len(s):\n        return False\n    while ptr2 <= len(t) and ptr1 <= len(s):\n        if s[-ptr1] == t[-ptr2]:\n            (ptr1, ptr2) = (ptr1 + 1, ptr2 + 1)\n            continue\n        elif ptr1 == len(s):\n            return False\n        elif ptr1 == len(s) - 1:\n            return False\n        else:\n            ptr1 = ptr1 + 2\n    return ptr2 == len(t) + 1\ndata = sys.stdin.read().split()\ncases = data[0]\nss = data[1::2]\nts = data[2::2]\nfor i in range(int(cases)):\n    if checkBack(ss[i], ts[i]):\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    t = input().strip()\n    i = len(t) - 1\n    j = len(s) - 1\n    while i >= 0:\n        while j >= 0 and s[j] != t[i]:\n            j -= 2\n        if j < 0:\n            print('NO')\n            return\n        j -= 1\n        i -= 1\n    print('YES')\nfor i in range(int(input())):\n    solve()", "import math\nimport heapq\nimport string\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    s = S()\n    t = S()\n    n = len(s)\n    m = len(t)\n    if m > n:\n        print('NO')\n        continue\n    if s == t or t == '':\n        print('YES')\n        continue\n    i = n - 1\n    j = m - 1\n    while i >= 0 and j >= 0:\n        if s[i] != t[j]:\n            i -= 2\n        else:\n            i -= 1\n            j -= 1\n    print('YES' if j < 0 else 'NO')", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(s, t):\n    (n, m) = (len(s), len(t))\n    while n > 0 and m > 0:\n        if s[n - 1] == t[m - 1]:\n            n -= 1\n            m -= 1\n        else:\n            n -= 2\n    if not m:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    s = str(input())[:-1]\n    t = str(input())[:-1]\n    solve(s, t)", "def twoPairs(s, t):\n    (i, j) = (len(s) - 1, len(t) - 1)\n    if i < j:\n        return 'NO'\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n        if j == -1:\n            return 'YES'\n    return 'NO'\nn = int(input())\nA = []\nfor i in range(n):\n    s = input()\n    t = input()\n    A.append(twoPairs(s, t))\nfor i in A:\n    print(i)", "import sys\nnumber_tests = input('')\nlines = []\nfor line in sys.stdin:\n    lines.append(line)\nslist = []\ntlist = []\nfor i in range(len(lines)):\n    if i % 2 == 0:\n        slist.append(lines[i])\n    else:\n        tlist.append(lines[i])\nfor (s, t) in zip(slist, tlist):\n    j = len(t) - 1\n    i = len(s) - 1\n    while j >= 0 and i >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j < 0:\n        print('YES')\n    else:\n        print('NO')", "answers = []\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        answers.append('YES')\n    else:\n        answers.append('NO')\nfor ans in answers:\n    print(ans)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    i = len(a) - 1\n    j = len(b) - 1\n    t = ''\n    while i >= 0 and j >= 0:\n        if a[i] == b[j]:\n            t += a[i]\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    t = t[::-1]\n    if t == b:\n        print('YES')\n    else:\n        print('NO')", "def check(s, t):\n    i = len(s) - 1\n    j = len(t) - 1\n    if i < j:\n        return 'NO'\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n        if j == -1:\n            return 'YES'\n    return 'NO'\ntest_cases = int(input())\narray = []\nwhile test_cases != 0:\n    s = input()\n    t = input()\n    test_cases -= 1\n    array.append(check(s, t))\nfor i in array:\n    print(i)", "def check(s, t):\n    i = len(s) - 1\n    j = len(t) - 1\n    if i < j:\n        return 'NO'\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n        if j == -1:\n            return 'YES'\n    return 'NO'\ntest_cases = int(input())\narray = []\nwhile test_cases != 0:\n    s = input()\n    t = input()\n    test_cases -= 1\n    array.append(check(s, t))\nfor i in array:\n    print(i)", "import sys\n\ndef main():\n    num_tests = int(sys.stdin.readline())\n    for _ in range(num_tests):\n        s = sys.stdin.readline()\n        t = sys.stdin.readline()\n        print('YES' if is_possible(s, t) else 'NO')\n\ndef is_possible(s: str, t: str) -> bool:\n    if solve(s, t, 1):\n        return True\n    return solve(s, t, 0)\n\ndef solve(s: str, t: str, initial_mod: int) -> bool:\n    i = 0\n    j = 0\n    cur_mod = initial_mod\n    while i < len(s) and j < len(t):\n        if s[i] == t[j] and i % 2 == cur_mod:\n            j += 1\n            cur_mod = 1 if cur_mod == 0 else 0\n        i += 1\n    return j == len(t) and (len(s) - i) % 2 == 0\nmain()", "t = int(input())\nresults = []\nfor i in range(t):\n    text = input()[::-1]\n    word = input()[::-1]\n    i_text = 0\n    i_word = 0\n    while i_text < len(text) and i_word < len(word):\n        if word[i_word] == text[i_text]:\n            i_text += 1\n            i_word += 1\n        else:\n            i_text += 2\n    results.append(i_word == len(word))\nfor i in range(t):\n    if results[i]:\n        print('YES')\n    else:\n        print('NO')", "cant_tests = int(input())\ns = []\nt = []\nfor i in range(cant_tests):\n    s.append(input())\n    t.append(input())\nfor j in range(cant_tests):\n    str = s[j]\n    t1 = [0, -1]\n    t2 = [0, -2]\n    for i in range(len(str)):\n        if t[j][t1[0]] == str[i] and i % 2 != t1[1] % 2:\n            t1[0] += 1\n            t1[1] = i\n        if t[j][t2[0]] == str[i] and i % 2 != t2[1] % 2:\n            t2[0] += 1\n            t2[1] = i\n        if t1[0] == len(t[j]):\n            if (len(str) - t1[1] - 1) % 2 == 0:\n                print('YES')\n                break\n            else:\n                t1[0] -= 1\n                t1[1] -= 1\n        if t2[0] == len(t[j]):\n            if (len(str) - t2[1] - 1) % 2 == 0:\n                print('YES')\n                break\n            else:\n                t2[0] -= 1\n                t2[1] -= 1\n        if i == len(str) - 1:\n            print('NO')", "import sys\nimport math\ninput = sys.stdin.readline\nimp = 'IMPOSSIBLE'\nt = int(input())\nfor test in range(t):\n    s = input()[:-1]\n    r = input()[:-1]\n    ns = len(s)\n    nr = len(r)\n    c = [[] for i in range(26)]\n    for i in range(ns):\n        c[ord(s[i]) - 97].append(i)\n    ind = ns\n    st = []\n    ideme = False\n    for i in reversed(range(nr)):\n        ideme = False\n        while c[ord(r[i]) - 97]:\n            pot = c[ord(r[i]) - 97].pop()\n            if pot < ind and (ns - pot) % 2 == (nr - i) % 2:\n                ind = pot\n                st.append(pot)\n                ideme = True\n                break\n        if not ideme:\n            break\n    if ideme:\n        print('YES')\n    else:\n        print('NO')", "def backspace(s, t):\n    if len(s) < len(t):\n        return 'NO'\n    if s == t:\n        return 'YES'\n    if len(s) == len(t) and s != t:\n        return 'NO'\n    i = len(s) - 1\n    j = len(t) - 1\n    while i > -1 and j > -1:\n        if s[i] == t[j]:\n            if j == 0:\n                return 'YES'\n            else:\n                i -= 1\n                j -= 1\n        else:\n            i -= 2\n    return 'NO'\nnum_tests = int(input())\nfor i in range(num_tests):\n    s = input()\n    t = input()\n    print(backspace(s, t))", "def solve(s, t):\n    m = len(s)\n    n = len(t)\n    if m < n:\n        return 'NO'\n    if m == n:\n        if s == t:\n            return 'YES'\n        else:\n            return 'NO'\n    cnt = 0\n    rgt = n - 1\n    for i in range(m - 1, -1, -1):\n        if rgt < 0:\n            return 'YES'\n        if s[i] == t[rgt]:\n            if cnt % 2 == 0:\n                rgt -= 1\n                cnt = 0\n                continue\n            else:\n                cnt += 1\n        else:\n            cnt += 1\n    if rgt >= 0:\n        return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    s = input()\n    t = input()\n    print(solve(s, t))", "def main():\n    for _ in range(int(input())):\n        (s, t) = (list(input()), list(input()))\n        while s and t:\n            if s[-1] == t[-1]:\n                del s[-1]\n                del t[-1]\n            else:\n                del s[-2:]\n        print(('NO', 'YES')[not t])\nmain()", "def isPosible(s, t):\n    i_string = len(s) - 1\n    i_wanted = len(t) - 1\n    while i_wanted >= 0 and i_string >= 0:\n        if s[i_string] == t[i_wanted]:\n            i_string -= 1\n            i_wanted -= 1\n        else:\n            i_string -= 2\n    if i_wanted == -1:\n        return 'YES'\n    else:\n        return 'NO'\nfor _ in range(int(input())):\n    print(isPosible(input(), input()))", "def solve():\n    s = input()\n    t = input()\n    n = len(s) - 1\n    m = len(t) - 1\n    while n >= 0 and m >= 0:\n        if s[n] == t[m]:\n            m -= 1\n            n -= 1\n        else:\n            n -= 2\n    if m >= 0:\n        print('NO')\n    else:\n        print('YES')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def solver(s, t):\n    si = len(s)\n    ti = len(t)\n    while si and ti:\n        si -= 1\n        if s[si] == t[ti - 1]:\n            ti -= 1\n        elif si:\n            si -= 1\n    print('NO' if ti else 'YES')\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    solver(s, t)", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if t[j] == s[i]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "c = int(input())\nfor _ in range(c):\n    s = input()\n    t = input()\n    si = len(s) - 1\n    ti = len(t) - 1\n    while si >= 0 and ti >= 0:\n        if s[si] == t[ti]:\n            ti = ti - 1\n            si = si - 1\n        else:\n            si = si - 2\n    if ti < 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    for c in t[::-1]:\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] != c:\n                i -= 2\n            else:\n                s = s[:i]\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "n_examples = int(input())\nfor i in range(n_examples):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i > -1:\n        if j != -1 and s[i] == t[j]:\n            i = i - 1\n            j = j - 1\n        else:\n            i = i - 2\n    print('YES') if j == -1 else print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES' if j < 0 else 'NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "def run(*tasks):\n    value = None\n\n    def tick():\n        nonlocal value\n        task = tasks[-1]\n        try:\n            subtask = task.send(value)\n            tasks.append(subtask)\n            value = None\n        except TypeError as error:\n            if error.args == (\"can't send non-None value to a just-started generator\",):\n                subtask = task.send(None)\n                tasks.append(subtask)\n            else:\n                raise error\n        except StopIteration as stop:\n            value = stop.value\n            tasks.pop()\n    tasks = list(tasks)\n    while len(tasks) != 0:\n        tick()\n    return value\n\ndef shortest_walk(keys, target):\n    if len(target) == 0:\n        return keys\n    (first, rest) = (target[0], target[1:])\n    keys1 = (yield shortest_walk(keys, rest))\n    if keys1 == None:\n        return None\n    while keys1 != '':\n        if keys1[-1] == first:\n            return keys1[:-1]\n        keys1 = keys1[:-2]\n    else:\n        return None\n\ndef shortest_walk_iter(keys, target):\n    for first in target[::-1]:\n        while keys != '':\n            if keys[-1] == first:\n                keys = keys[:-1]\n                break\n            keys = keys[:-2]\n        else:\n            return None\n    return keys\nntests = int(input())\nfor t in range(ntests):\n    keys = input()\n    target = input()\n    possible = shortest_walk_iter(keys, target) != None\n    print('YES' if possible else 'NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if t[j] == s[i]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "for k in range(int(input())):\n    x = input()\n    y = input()\n    i = len(x) - 1\n    j = len(y) - 1\n    while i >= 0 and j >= 0:\n        if x[i] == y[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print(['NO', 'YES'][j == -1])", "def solve_one():\n    s = input().strip()\n    t = input().strip()\n    si = len(s) - 1\n    ti = len(t) - 1\n    while si >= 0 and ti >= 0:\n        if t[ti] == s[si]:\n            si -= 1\n            ti -= 1\n        else:\n            si -= 2\n    if ti < 0:\n        print('YES')\n    else:\n        print('NO')\nn = int(input())\nfor _ in range(n):\n    solve_one()", "for i in range(int(input())):\n    s = input()\n    t = input()\n    si = len(s)\n    ti = len(t)\n    while si and ti:\n        if s[si - 1] == t[ti - 1]:\n            si -= 1\n            ti -= 1\n        else:\n            si -= 1\n            if si:\n                si -= 1\n    print('NO' if ti else 'YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "r = int(input())\nfor _ in range(r):\n    s = input()\n    t = input()\n    try:\n        for c in t[::-1]:\n            no = True\n            i = len(s) - 1\n            while i >= 0:\n                if s[i] != c:\n                    i -= 2\n                else:\n                    s = s[:i]\n                    no = False\n                    break\n            if no:\n                print('NO')\n                break\n        if not no:\n            print('YES')\n    except ValueError:\n        print('NO')\n        continue", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    check = False\n    n1 = len(s)\n    n2 = len(t)\n    i = n1 - 1\n    j = n2 - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    (m, n) = (len(s), len(t))\n    (i, j) = (m - 1, n - 1)\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0:\n        if j < 0:\n            break\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j < 0:\n        return 'YES'\n    else:\n        return 'NO'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def get_solution(s, t):\n    n = len(s)\n    n_2 = len(t)\n    if n_2 > n:\n        print('NO')\n        return\n    i = n - 1\n    j = n_2 - 1\n    while j >= 0 and i >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n        return\n    print('NO')\nfor _ in range(int(input())):\n    get_solution(input(), input())", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if t[j] == s[i]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "import sys\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while j >= 0 and i >= 0:\n        while i >= 0 and s[i] != t[j]:\n            i -= 2\n        if i < 0:\n            break\n        i -= 1\n        j -= 1\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "for i in range(int(input())):\n    s = input()\n    t = input()\n    si = len(s) - 1\n    ti = len(t) - 1\n    while si >= 0 and ti >= 0:\n        if s[si] == t[ti]:\n            si -= 1\n            ti -= 1\n        else:\n            si -= 1\n            if si >= 0:\n                si -= 1\n    print('NO' if ti >= 0 else 'YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "def delete_backspace(s: str, t: str) -> bool:\n    n = len(s)\n    m = len(t)\n    if n < m:\n        return False\n    i = n - m & 1\n    j = 0\n    while i < n:\n        if j < m and t[j] == s[i]:\n            j += 1\n        else:\n            i += 1\n        i += 1\n    return j == m\nn_test_cases = int(input())\nfor _ in range(n_test_cases):\n    s = input()\n    t = input()\n    ans = delete_backspace(s, t)\n    output = 'YES' if ans else 'NO'\n    print(output)", "def solve():\n    s = input()\n    t = input()\n    cur = len(s) & 1 ^ len(t) & 1\n    for (i, a) in enumerate(t):\n        while True:\n            if cur >= len(s):\n                return 'NO'\n            if s[cur] == a:\n                break\n            cur += 2\n        cur += 1\n    return 'YES'\nt = int(input())\nfor __ in range(t):\n    print(solve())", "q = int(input())\n\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    i = n - 1\n    j = m - 1\n    delete = 0\n    while i >= 0 and j >= 0:\n        if s[i] == t[j] and (not delete):\n            j -= 1\n        else:\n            delete ^= 1\n        i -= 1\n    if j < 0:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(q):\n    solve()", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    n1 = len(s)\n    n2 = len(t)\n    i = n1 - 1\n    j = n2 - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "q = int(input())\nfor t in range(q):\n    (s, t) = (input(), input())\n    i = len(s) - 1\n    j = len(t) - 1\n    while i > -1 and j > -1:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "def isPossible(s, t):\n    (i, j) = (len(s) - 1, len(t) - 1)\n    f = 0\n    while j >= 0:\n        while i >= 0 and s[i] != t[j]:\n            i -= 2\n        if i < 0:\n            break\n        else:\n            i -= 1\n        j -= 1\n    if j >= 0:\n        return False\n    return True\n\ndef checkPossible():\n    t1 = int(input())\n    for k in range(t1):\n        s = input()\n        t = input()\n        ans = isPossible(s, t)\n        if ans:\n            print('YES')\n        else:\n            print('NO')\ncheckPossible()", "n = int(input())\nfor _ in range(n):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    fail = False\n    for c in t[::-1]:\n        while i >= 0 and c != s[i]:\n            i -= 2\n        if i < 0 or (i == 0 and s[0] != c):\n            fail = True\n            break\n        i -= 1\n    print('NO' if fail else 'YES')", "q = int(input())\nfor _ in range(q):\n    (s, t) = (input(), input())\n    (i, j) = (len(s) - 1, len(t) - 1)\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES' if j == -1 else 'NO')", "def isPosible(s, t):\n    string = s[::-1]\n    wanted = t[::-1]\n    i_string = 0\n    i_wanted = 0\n    while i_wanted < len(wanted) and i_string < len(string):\n        if string[i_string] == wanted[i_wanted]:\n            i_string += 1\n            i_wanted += 1\n        else:\n            i_string += 2\n    if i_wanted == len(wanted):\n        return 'YES'\n    else:\n        return 'NO'\nfor _ in range(int(input())):\n    print(isPosible(input(), input()))", "r = int(input())\nfor _ in range(r):\n    s = input()\n    t = input()\n    for c in t[::-1]:\n        no = True\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] != c:\n                i -= 2\n            else:\n                s = s[:i]\n                no = False\n                break\n        if no:\n            print('NO')\n            break\n    if not no:\n        print('YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    for c in t[::-1]:\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] != c:\n                i -= 2\n            else:\n                break\n        else:\n            print('NO')\n            break\n        s = s[:i]\n    else:\n        print('YES')", "n_examples = input()\nfor x in range(int(n_examples)):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i > -1:\n        if j != -1 and s[i] == t[j]:\n            j -= 1\n        else:\n            i -= 1\n        i -= 1\n    print('YES') if j == -1 else print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "def solve() -> bool:\n    string = input()\n    target = input()\n    string_len = len(string)\n    target_len = len(target)\n    if string_len < target_len:\n        return False\n    pointer = k = 0\n    for i in range((string_len - target_len) % 2, string_len):\n        if k == 1:\n            k = 0\n            continue\n        if pointer < target_len and string[i] == target[pointer]:\n            pointer += 1\n        else:\n            k += 1\n    return pointer == target_len\nfor _ in range(int(input())):\n    print('YES' if solve() else 'NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "ntests = int(input())\nfor _ in range(ntests):\n    s = input()\n    t = input()\n    ns = len(s)\n    nt = len(t)\n    if ns < nt:\n        print('NO')\n    else:\n        answer = 'YES'\n        while nt > 0:\n            nt -= 1\n            ns -= 1\n            while t[nt] != s[ns]:\n                if ns < 2 or ns < nt:\n                    answer = 'NO'\n                    nt = -1\n                    break\n                ns -= 2\n        print(answer)", "tt = int(input())\nfor i in range(tt):\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    j = m - 1\n    i = n - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i = i - 1\n            j = j - 1\n        else:\n            i = i - 2\n    if j < 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES') if j == -1 else print('NO')", "from collections import deque\nN = int(input())\nanswer = []\nfor _ in range(N):\n    (s, t) = (deque(input()[::-1]), deque(input()[::-1]))\n    while s and t:\n        if s[0] == t[0]:\n            s.popleft()\n            t.popleft()\n        else:\n            s.popleft()\n            if s:\n                s.popleft()\n    print('YES' if len(t) == 0 else 'NO')", "for i in range(int(input())):\n    s = input()\n    t = input()\n    (n, m) = (len(s), len(t))\n    if m > n:\n        print('NO')\n    else:\n        (p, q) = (n - 1, m - 1)\n        while q >= 0:\n            if s[p] == t[q]:\n                p -= 1\n                q -= 1\n            else:\n                p -= 2\n            if p < 0:\n                break\n        if q >= 0:\n            print('NO')\n        else:\n            print('YES')", "for i in range(int(input())):\n    s = input()\n    t = input()\n    (n, m) = (len(s), len(t))\n    if m > n:\n        print('NO')\n    else:\n        if (n + m) % 2 == 1:\n            s = s[1:]\n            n = n - 1\n        i = 0\n        f = 0\n        for ch in t:\n            while i < n and s[i] != ch:\n                i += 2\n            if i >= n:\n                f = 1\n                print('NO')\n                break\n            i += 1\n        if not f:\n            print('YES')", "for _ in range(int(input())):\n    s = list(input())\n    t = input()\n    (n, m) = (len(s) - 1, len(t) - 1)\n    while n >= 0 and m >= 0:\n        if s[n] == t[m]:\n            n -= 1\n            m -= 1\n        else:\n            n -= 2\n    print('YES') if m < 0 else print('NO')", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    (s, t) = (ip(), ip())\n    (n, m) = (len(s) - 1, len(t) - 1)\n    (i, j) = (n, m)\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    print('YES' if j < 0 else 'NO')\nt = ipn()\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    s = input()\n    t = input()\n\n    def solve(s, t):\n        ind = 0\n        for ch in t:\n            while ind < len(s) and s[ind] != ch:\n                ind += 2\n            if ind >= len(s):\n                return 'NO'\n            ind += 1\n        return 'YES'\n    print(solve(s[::-1], t[::-1]))", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if t[j] == s[i]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "def canSproduceT(s, t):\n    n = len(s)\n    m = len(t)\n    if m == 0:\n        return 'YES'\n    if n < m:\n        return 'NO'\n    i = n - 1\n    j = m - 1\n    while i >= 0 and j >= 0:\n        if s[i] == t[j]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        return 'YES'\n    return 'NO'\ntests = int(input())\nresults = []\nwhile tests:\n    s = input()\n    t = input()\n    print(canSproduceT(s, t))\n    tests -= 1", "q = int(input())\nfor _ in range(q):\n    s = input()[::-1]\n    t = input()[::-1]\n    s_index = 0\n    t_index = 0\n    while s_index < len(s) and t_index < len(t):\n        if s[s_index] == t[t_index]:\n            s_index += 1\n            t_index += 1\n        else:\n            s_index += 2\n    if t_index == len(t):\n        print('YES')\n    else:\n        print('NO')", "n_examples = input()\nfor X in range(int(n_examples)):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i > -1:\n        if j != -1 and s[i] == t[j]:\n            j -= 1\n        else:\n            i -= 1\n        i -= 1\n    print('YES') if j == -1 else print('NO')", "N = int(input())\nfor _ in range(N):\n    (s, t) = (list(input()), list(input()))\n    while s and t:\n        if s[-1] == t[-1]:\n            s.pop()\n            t.pop()\n        else:\n            s.pop()\n            if s:\n                s.pop()\n    print('NO' if t else 'YES')", "def solve() -> bool:\n    string = input()\n    target = input()\n    string_len = len(string)\n    target_len = len(target)\n    if string_len < target_len:\n        return False\n    pointer = 0\n    flag = False\n    for i in range((string_len - target_len) % 2, string_len):\n        if flag:\n            flag = False\n            continue\n        if pointer < target_len and string[i] == target[pointer]:\n            pointer += 1\n        else:\n            flag = True\n    return pointer == target_len\nfor _ in range(int(input())):\n    print('YES' if solve() else 'NO')", "from math import floor, gcd, sqrt, ceil\n\ndef main():\n    for _ in range(int(input())):\n        s = list(input())\n        t = list(input())\n        try:\n            while s and t:\n                if s[-1] == t[-1]:\n                    s.pop()\n                    t.pop()\n                else:\n                    s.pop()\n                    s.pop()\n            if t:\n                print('NO')\n            else:\n                print('YES')\n        except:\n            print('NO')\nmain()", "import typing\nimport sys\n\ndef solve(s: str, t: str) -> typing.NoReturn:\n    i = j = 0\n    (n, m) = (len(s), len(t))\n    w = ''\n    while 1:\n        (ri, rj) = (n - i, m - j)\n        if ri < rj:\n            print('NO')\n            return\n        if ri - rj & 1:\n            i += 1\n            continue\n        if j == m:\n            print('YES' if w == t else 'NO')\n            return\n        if s[i] == t[j]:\n            j += 1\n            w += s[i]\n        i += 1\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        t = input()\n        solve(s, t)\nmain()", "import typing\n\ndef solve(s: str, t: str) -> typing.NoReturn:\n    i = j = 0\n    (n, m) = (len(s), len(t))\n    while 1:\n        (ri, rj) = (n - i, m - j)\n        if ri < rj:\n            print('NO')\n            return\n        if ri - rj & 1:\n            i += 1\n            continue\n        if j == m:\n            print('YES')\n            return\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        t = input()\n        solve(s, t)\nmain()", "for testis in range(int(input())):\n    s = input()\n    t = input()\n    (n, m) = (len(s), len(t))\n    if m > n:\n        print('NO')\n    else:\n        (p, q) = (n - 1, m - 1)\n        while q >= 0:\n            if s[p] == t[q]:\n                p -= 1\n                q -= 1\n            else:\n                p -= 2\n            if p < 0:\n                break\n        if q >= 0:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    i = len(s) - 1\n    j = len(t) - 1\n    while i >= 0 and j >= 0:\n        if t[j] == s[i]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 2\n    if j == -1:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    A = input()\n    B = input()\n    (j, k) = (len(A) - 1, len(B) - 1)\n    while j >= 0 and k >= 0:\n        if A[j] == B[k]:\n            k -= 1\n            j -= 1\n        else:\n            j -= 2\n    if k == -1:\n        print('YES')\n    else:\n        print('NO')", "def can_type(S, T):\n    (S, T) = (S[::-1], T[::-1])\n    (s, t) = (0, 0)\n    while True:\n        if s < len(S) and t < len(T) and (S[s] == T[t]):\n            s += 1\n            t += 1\n        else:\n            s += 2\n        if t == len(T):\n            return True\n        if s > len(S):\n            return False\nfor k in range(int(input())):\n    print('YES' if can_type(input(), input()) else 'NO')", "def solve() -> bool:\n    string = input()\n    target = input()\n    string_len = len(string)\n    target_len = len(target)\n    if string_len < target_len:\n        return False\n    q = k = 0\n    for i in range((string_len - target_len) % 2, string_len):\n        if k == 1:\n            k = 0\n            continue\n        if q < target_len and string[i] == target[q]:\n            q += 1\n        else:\n            k += 1\n    return q == target_len\nfor _ in range(int(input())):\n    print('YES' if solve() else 'NO')", "T = int(input())\nfrom collections import deque\n\ndef solve():\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    if n < m:\n        return False\n    index = m - 1\n    last = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == t[index]:\n            if i == last - 1 or (last - i) % 2 != 0:\n                last = i\n                index -= 1\n                if index == -1:\n                    return True\n    return False\nfor _ in range(T):\n    print('YES' if solve() else 'NO')", "def solution(s, t):\n    s = list(s)\n    t = list(t)\n    while len(s) >= len(t):\n        if not t:\n            return 'YES'\n        if s[-1] == t[-1]:\n            s.pop()\n            t.pop()\n        else:\n            s.pop()\n            if s:\n                s.pop()\n    return 'NO'\n\ndef main():\n    for _ in range(int(input())):\n        s = input()\n        t = input()\n        print(solution(s, t))\nmain()", "for _ in range(int(input())):\n    a = list(input())\n    b = list(input())\n    while a and b:\n        if a[-1] == b[-1]:\n            a.pop()\n            b.pop()\n        else:\n            a.pop()\n            if a:\n                a.pop()\n    print('NO' if b else 'YES')", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    (m, n) = (len(s), len(t))\n    if m < n:\n        print('NO')\n    else:\n        (i, j) = (m - 1, n - 1)\n        cnt = 0\n        while i >= 0 and j >= 0:\n            if s[i] == t[j]:\n                if cnt == 0:\n                    j -= 1\n                else:\n                    cnt -= 1\n            elif cnt > 0:\n                cnt -= 1\n            else:\n                cnt += 1\n            i -= 1\n        if j < 0:\n            print('YES')\n        else:\n            print('NO')", "n = int(input())\nfor i in range(n):\n    (s, t) = (input()[::-1], input()[::-1])\n    i = j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 2\n    print('YES' if j == len(t) else 'NO')"]