["def calc(a, x, d):\n    if d.get(a, -1) != -1:\n        return d[a]\n    else:\n        c = 1\n        t = a\n        while a % x == 0:\n            c += 1\n            a //= x\n        d[t] = c\n        return d[t]\nfor t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    s = 0\n    m = 10 ** 9\n    index = 0\n    for i in range(n):\n        temp = calc(a[i], x, d)\n        if temp < m:\n            m = temp\n            index = i\n    for i in range(n):\n        if i < index:\n            s += a[i] * (m + 1)\n        else:\n            s += a[i] * m\n    print(s)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    index = None\n    level = float('inf')\n    dic = {}\n    for i in range(n):\n        m = a[i]\n        if dic.get(m, 'False') == True:\n            continue\n        c = 0\n        while True:\n            if m == 0 or m % x != 0:\n                break\n            m = m // x\n            c += 1\n            if c >= level:\n                break\n        if c < level:\n            level = c\n            index = i\n        dic[a[i]] = True\n    s = sum(a[:index]) * (level + 1) + sum(a[index:]) * level + sum(a)\n    print(s)", "t = int(input())\nfor i in range(t):\n    k = input()\n    (n, x) = [int(it) for it in k.split(' ')]\n    a = input()\n    a = [int(it) for it in a.split(' ')]\n    mn = float('inf')\n    c = 0\n    idx = -1\n    min_idx = idx\n    min_v = 0\n    for it in a[:]:\n        idx += 1\n        c = 0\n        if it % x ** mn == 0:\n            continue\n        else:\n            while it % x == 0:\n                it = it // x\n                c += 1\n                if c >= mn:\n                    break\n            if c < mn:\n                mn = c\n                min_idx = idx\n    sm = 0\n    sm += sum(a) * (mn + 1)\n    for j in range(min_idx):\n        sm += a[j]\n    print(sm)", "import math\n\ndef getint():\n    return [int(i) for i in input().split()]\n\ndef getstr():\n    return [str(i) for i in input().split()]\n\ndef solve():\n    (n, x) = getint()\n    lst = getint()\n    c = 100000\n    s = 0\n    ind = 0\n    for j in range(n):\n        if j > 0 and lst[j] == lst[j - 1]:\n            continue\n        elif j > 1 and lst[j] == lst[j - 2]:\n            continue\n        k = 1\n        p = lst[j]\n        while True:\n            if p % x == 0:\n                p = p // x\n                k += 1\n            else:\n                break\n        if k < c:\n            c = k\n            ind = j\n    for j in range(n):\n        if j < ind:\n            s += (c + 1) * lst[j]\n        else:\n            s += c * lst[j]\n    print(s)\nfor _ in range(int(input())):\n    solve()", "def calc(a, x, d):\n    if d.get(a, -1) != -1:\n        return d\n    c = 1\n    t = a\n    while a % x == 0:\n        c += 1\n        a //= x\n    d[t] = c\n    return d\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    c = 0\n    ind = 0\n    temp = 0\n    m = 10 ** 9\n    flag = False\n    for i in range(n):\n        d = calc(a[i], x, d)\n        if d[a[i]] < m:\n            m = d[a[i]]\n            ind = i\n    for i in range(n):\n        if i < ind:\n            c += a[i] * (m + 1)\n        else:\n            c += a[i] * m\n    print(c)", "t = int(input())\nfor j in range(t):\n    (n, x) = input().split()\n    n = int(n)\n    x = int(x)\n    lst = [int(i) for i in input().split()]\n    Sum = sum(lst)\n    mc = 10 ** 9\n    index = 0\n    for i in range(n):\n        c1 = 0\n        a = lst[i]\n        if i == 0 or a % x ** mc != 0:\n            while a % x == 0:\n                c1 = c1 + 1\n                a = a / x\n            if c1 < mc:\n                mc = c1\n                index = i\n        if mc == 0:\n            break\n    ans = Sum * (mc + 1)\n    for i in range(n):\n        if i != index:\n            ans = ans + lst[i]\n        else:\n            break\n    print(ans)", "import itertools\n\ndef solve():\n    t = int(input())\n    result = []\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        a = [int(i) for i in input().split()]\n        group_a = []\n        value = a[0]\n        count = 1\n        for i in range(1, len(a)):\n            if a[i] == value:\n                count += 1\n            else:\n                group_a.append((value, count))\n                value = a[i]\n                count = 1\n        group_a.append((a[-1], count))\n        a = group_a\n        i = 0\n        while i < len(a):\n            if a[i][0] % k == 0:\n                a.append((a[i][0] // k, a[i][1] * k))\n            else:\n                break\n            i += 1\n        answer = 0\n        for x in a:\n            answer += x[0] * x[1]\n        print(answer)\nsolve()", "for _ in range(int(input())):\n    matrix = dict()\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bj = float('inf')\n    j = 0\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n        k = 0\n        ele = arr[i]\n        while not ele % x:\n            if ele in matrix:\n                k = k + matrix[ele]\n                matrix[arr[i]] = k\n                break\n            ele = ele // x\n            k += 1\n            if k >= bj:\n                break\n        matrix[arr[i]] = k\n        if k < bj:\n            bj = k\n            j = i\n    res = (bj + 1) * s\n    for i in arr[0:j]:\n        res += i\n    print(res)", "import sys\nimport math\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nfor i in range(IN()):\n    (n, x) = LI()\n    a = LI()\n    sm = sum(a)\n    ans = 0\n    ndi = 0\n    co = 10 ** 9\n    for i in range(n):\n        if i > 0 and a[i] == a[i - 1]:\n            continue\n        for j in range(1, co + 1):\n            if a[i] % x ** j != 0:\n                if j < co:\n                    co = j\n                    ndi = i\n                    break\n    ans += sum(a[:ndi])\n    ans += sm * co\n    print(ans)", "def taskB(a, x):\n    sum = 0\n    init_length = len(a)\n    i = 0\n    divs = []\n    counter = 1\n    same_key = 1\n    while i < init_length - 1:\n        if a[i] == a[i + 1]:\n            same_key = 1\n            counter += 1\n            i += 1\n            continue\n        else:\n            sum += counter * a[i]\n            if a[i] % x == 0:\n                sum += counter * a[i]\n                divs.append([a[i] / x, counter * x])\n                same_key = 0\n                counter = 1\n            else:\n                for f in range(i + 1, init_length):\n                    sum += a[f]\n                return sum\n        i += 1\n    sum += counter * a[i]\n    if a[i] % x == 0:\n        sum += counter * a[i]\n        divs.append([a[i] / x, counter * x])\n    else:\n        return sum\n    if i == init_length - 1:\n        i = 0\n        while i < len(divs):\n            if divs[i][0] % x == 0:\n                divs.append([divs[i][0] / x, divs[i][1] * x])\n                sum += divs[i][0] * divs[i][1]\n            else:\n                break\n            i += 1\n    return sum\nt = int(input())\nfor i in range(t):\n    x = int(input().split()[-1])\n    a = list(map(lambda X: int(X), input().split()))\n    print(int(taskB(a, x)))", "import math\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().strip().split(' '))\n    lst = list(map(int, input().strip().split(' ')))\n    c = 100000\n    s = 0\n    ind = 0\n    for j in range(n):\n        if j > 0 and lst[j] == lst[j - 1]:\n            continue\n        elif j > 1 and lst[j] == lst[j - 2]:\n            continue\n        k = 1\n        p = lst[j]\n        while True:\n            if p % x == 0:\n                p = p // x\n                k += 1\n            else:\n                break\n        if k < c:\n            c = k\n            ind = j\n    for j in range(n):\n        if j < ind:\n            s += (c + 1) * lst[j]\n        else:\n            s += c * lst[j]\n    print(s)", "t = int(input())\nfor e in range(t):\n    (n, x) = input().split()\n    n = int(n)\n    x = int(x)\n    l = input().split()\n    for i in range(n):\n        l[i] = int(l[i])\n    l1 = l[:]\n    mi = 10 ** 9\n    ans = 0\n    ind = 0\n    for i in range(n):\n        c = 0\n        if mi != 10 ** 9:\n            te = x ** mi\n            if l1[i] % te != 0:\n                while l1[i] % x == 0:\n                    c = c + 1\n                    l1[i] = l1[i] / x\n                if mi > c:\n                    mi = c\n                    ind = i\n        else:\n            while l1[i] % x == 0:\n                c = c + 1\n                l1[i] = l1[i] / x\n            if mi > c:\n                mi = c\n                ind = i\n        if mi == 0:\n            break\n    for i in range(n):\n        if i < ind:\n            ans = ans + l[i] * (mi + 2)\n        else:\n            ans = ans + l[i] * (mi + 1)\n    print(ans)", "import math as mt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    arr = []\n    i = 0\n    while i < n:\n        element = l[i]\n        cnt = 1\n        i += 1\n        while i < n and element == l[i]:\n            cnt += 1\n            i += 1\n        arr.append((element, cnt))\n    i = 0\n    while True:\n        if arr[i][0] % x == 0:\n            arr.append((arr[i][0] // x, arr[i][1] * x))\n            i += 1\n        else:\n            break\n    sm = 0\n    for (i, j) in arr:\n        sm += i * j\n    print(sm)", "from sys import stdin\ninput = stdin.readline\n\ndef strange_list(arr, k):\n    a = []\n    curr = 0\n    for i in arr:\n        if i != curr:\n            a.append([i, 1])\n            curr = i\n        elif i == curr:\n            a[-1][1] += 1\n    i = 0\n    while i < len(a) and a[i][0] % k == 0:\n        a.append([a[i][0] // k, a[i][1] * k])\n        i += 1\n    ans = 0\n    for i in a:\n        ans += i[0] * i[1]\n    return ans\nfor j in range(int(input())):\n    (a, b) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    print(strange_list(lst, b))", "import sys, collections, math, itertools, random, bisect\nINF = sys.maxsize\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 1000000007\n\ndef append_main(val, num, n, x, q):\n    if len(q) and q[-1][0] == val:\n        num += q[-1][1]\n        q.pop()\n    q.append([val, num])\n    return\n\ndef solve(n, x, q):\n    arr = get_array()\n    for i in arr:\n        append_main(i, 1, n, x, q)\n    s = 0\n    while len(q):\n        (val, num) = (q[0][0], q[0][1])\n        s += val * num\n        q.popleft()\n        if val % x:\n            break\n        append_main(val // x, x * num, n, x, q)\n    while len(q):\n        (val, num) = (q[0][0], q[0][1])\n        s += val * num\n        q.popleft()\n    print(s)\nfor _ in range(int(input())):\n    (n, x) = get_ints()\n    q = collections.deque()\n    solve(n, x, q)", "CASES = int(input())\nfor _ in range(CASES):\n    (n, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    temp = 1\n    ele = s[0]\n    s1 = []\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            temp += 1\n        else:\n            s1.append((ele, temp))\n            temp = 1\n            ele = s[i]\n    s1.append((ele, temp))\n    j = 0\n    while j < len(s1):\n        if s1[j][0] % x == 0:\n            s1.append((s1[j][0] // x, s1[j][1] * x))\n        else:\n            break\n        j += 1\n    ans = 0\n    for i in s1:\n        ans += i[0] * i[1]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\nt = ini()\nans = []\nfor _ in range(t):\n    (n, x) = inm()\n    a = inl()\n    b = []\n    count = 1\n    last = a[0]\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            count += 1\n        else:\n            b.append((last, count))\n            count = 1\n            last = a[i]\n    b.append((last, count))\n    count = 0\n    i = 0\n    while i < len(b):\n        if b[i][0] % x == 0:\n            b.append((b[i][0] // x, b[i][1] * x))\n        else:\n            break\n        i += 1\n    for i in b:\n        count += i[0] * i[1]\n    ans.append(count)\nout(ans)", "t = int(input())\nfor _ in range(t):\n    (_, x) = (int(val) for val in input().split(' '))\n    a_collection = input().split()\n    shrunk_a_collection = [[int(a_collection[0]), 1]]\n    prev = a_collection[0]\n    for a in a_collection[1:]:\n        if a == prev:\n            shrunk_a_collection[-1][1] += 1\n        else:\n            shrunk_a_collection.append([int(a), 1])\n        prev = a\n    i = 0\n    res = 0\n    robot_is_active = True\n    while i < len(shrunk_a_collection):\n        item = shrunk_a_collection[i]\n        res += item[0] * item[1]\n        if robot_is_active and item[0] % x == 0:\n            shrunk_a_collection += [[item[0] // x, item[1] * x]]\n        else:\n            robot_is_active = False\n        i += 1\n    print(res)", "test_cases = int(input())\nres = []\nfor test in range(test_cases):\n    st = input()\n    ls = st.split()\n    n = int(ls[0])\n    x = int(ls[1])\n    st = input()\n    ls = st.split()\n    arr = []\n    varr = []\n    sm = 0\n    coun = 1\n    for i in range(len(ls)):\n        value = int(ls[i])\n        if i < len(ls) - 1:\n            if ls[i] != ls[i + 1]:\n                arr.append(value)\n                varr.append(coun)\n                coun = 1\n            else:\n                coun += 1\n        else:\n            arr.append(value)\n            varr.append(coun)\n    i = 0\n    while i < len(arr):\n        if arr[i] % x != 0:\n            break\n        sm += arr[i] * varr[i]\n        arr.append(arr[i] // x)\n        varr.append(varr[i] * x)\n        i += 1\n    while i < len(arr):\n        sm += arr[i] * varr[i]\n        i += 1\n    res.append(sm)\nfor value in res:\n    print(value)", "def padic(num, xx):\n    total = 0\n    while num % xx == 0:\n        num = num // xx\n        total += 1\n    return total\nfor _ in range(int(input())):\n    (n, xx) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    num2s = [padic(x, xx) for x in nums]\n    print((min(num2s) + 1) * sum(nums) + sum(nums[:num2s.index(min(num2s))]))", "def func(num):\n    global x\n    c = 1\n    while num % x == 0:\n        c += 1\n        num //= x\n    else:\n        return c\n\ndef Solve():\n    global x\n    for t in range(int(input())):\n        (n, x) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(func, a))\n        min_ = min(b)\n        index_ = b.index(min_)\n        Sum = sum(a[:index_]) * (min_ + 1) + sum(a[index_:]) * min_\n        print(Sum)\nSolve()", "def solve():\n    (n, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = []\n    SU = 0\n    for i in a:\n        now = 1\n        IT = i\n        while IT % x == 0:\n            IT //= x\n            now += 1\n        b.append(now)\n    mi = min(b)\n    index = b.index(mi)\n    for i in range(0, index + 1):\n        SU += min(b[i], mi + 1) * a[i]\n    for i in range(index + 1, n):\n        SU += min(b[i], mi) * a[i]\n    print(SU)\nTTTT = int(input())\nwhile TTTT:\n    solve()\n    TTTT -= 1", "def do(n, x, nums) -> int:\n    ans = 0\n    i = 1\n    while 1:\n        for j in nums:\n            if j % i:\n                return ans\n            ans += j\n        i *= x\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    nums = [int(x) for x in input().split()]\n    print(do(n, x, nums))", "def fxn(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [fxn(num, x) for num in l]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(l) * (m + 1)\n    ans += sum(l[:j])\n    print(ans)", "def mindex(arr):\n    m = arr[0]\n    dex = 0\n    for (i, v) in enumerate(arr):\n        if v < m:\n            m = v\n            dex = i\n    return (m, dex)\n\ndef findpow(n, x):\n    t = 0\n    while n % x == 0:\n        n //= x\n        t += 1\n    return t\n\ndef solve(arr, x):\n    pows = [findpow(i, x) for i in arr]\n    (m, dex) = mindex(pows)\n    return (m + 2) * sum(arr[:dex]) + (m + 1) * sum(arr[dex:])\nt = int(input())\nans = []\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    ans.append(solve(arr, x))\nfor i in ans:\n    print(i)", "def do(n, x, nums) -> int:\n    ans = 0\n    i = 1\n    while 1:\n        for j in nums:\n            if j % i:\n                return ans\n            ans += j\n        i *= x\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    nums = [int(x) for x in input().split()]\n    print(do(n, x, nums))", "def solve(_array, y):\n    sum = 0\n    n = 1\n    while True:\n        for i in _array:\n            if i % n == 0:\n                sum += i\n            else:\n                return sum\n        n = n * y\nfor _ in range(int(input())):\n    (x, y) = list(map(int, input().split(' ')))\n    _array = list(map(int, input().split(' ')))\n    sum = solve(_array, y)\n    print(sum)", "import sys\nsys.setrecursionlimit(1000000)\nfrom collections import defaultdict, deque, Counter\nfrom itertools import permutations\nfrom math import sqrt, gcd, pi, factorial\nfrom functools import reduce\nfrom sys import stdin\nfrom bisect import bisect_right, bisect_left\nfrom copy import copy\n\ndef stupid(n, x, a):\n    a2 = a.copy()\n    i = 0\n    while i < len(a2):\n        if a2[i] % x != 0:\n            break\n        a2 += [a2[i] // x for _ in range(x)]\n        i += 1\n    return sum(a2)\n\ndef calc(q, x):\n    ret = 0\n    while q % x == 0:\n        q //= x\n        ret += 1\n    return ret\n\ndef solve(n, x, a):\n    cnts = [calc(a[i], x) for i in range(n)]\n    min_cnt = min(cnts)\n    flag = True\n    ret = sum(a)\n    for i in range(n):\n        if cnts[i] == min_cnt or not flag:\n            flag = False\n            ret += a[i] * min_cnt\n        else:\n            ret += a[i] * (min_cnt + 1)\n    return ret\nt = int(input())\nanss = [0 for _ in range(t)]\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    anss[i] = solve(n, x, a)\nfor ans in anss:\n    print(ans)", "def get_power(num, x):\n    count = 0\n    while num % x == 0:\n        count += 1\n        num //= x\n    return count\n\ndef solve(arr, x):\n    smallest_power = min([get_power(num, x) for num in arr])\n    res = sum(arr) * (smallest_power + 1)\n    for num in arr:\n        if get_power(num, x) == smallest_power:\n            return res\n        else:\n            res += num\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, x))", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef calc(q, x):\n    ans = 0\n    while q % x == 0:\n        ans += 1\n        q = q // x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bj = 1000000000.0 + 1\n    j = 0\n    for i in range(n):\n        if calc(a[i], x) < bj:\n            bj = calc(a[i], x)\n            j = i\n    s1 = (bj + 1) * sum(a)\n    s2 = sum(a[:j])\n    print(s1 + s2)", "def max_grade(elem, x):\n    grade = 0\n    while elem % x == 0:\n        elem //= x\n        grade += 1\n    return grade\n\ndef solve(n, x, s):\n    summa = sum(s)\n    results = []\n    grade = 0\n    min_grade = 1000000000000\n    save_i = 0\n    for i in range(n):\n        grade = max_grade(s[i], x)\n        results.append(grade)\n        if grade < min_grade:\n            min_grade = grade\n            save_i = i\n    summa += min_grade * summa\n    summa += sum(s[0:save_i])\n    print(summa)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = list(map(int, input().split()))\n    solve(n, m, s)", "def solve(a, x):\n    answer = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                answer += i\n            else:\n                return answer\n        u *= x\n    return answer\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = [0] * n\n    for i in range(n):\n        d = a[i]\n        cnt = 1\n        while d % x == 0:\n            cnt += 1\n            d //= x\n        count[i] = cnt\n    ans = 0\n    current_min = 31\n    global_min = min(count)\n    for i in range(n):\n        current_min = min(current_min, global_min + 1, count[i])\n        ans += a[i] * current_min\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def strange_list(array, div):\n    count = 0\n    d = 1\n    while True:\n        for a in array:\n            if a % d == 0:\n                count += a\n            else:\n                return count\n        d = d * div\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    element = list(map(int, input().split()))\n    print(strange_list(element, x))", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def cal(a, x):\n    (v, u) = (0, 1)\n    while 1:\n        for i in a:\n            if i % u == 0:\n                v += i\n            else:\n                return v\n        u *= x\nfor v in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(cal(a, x))", "def solve():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = False\n    s = 0\n    for c in a:\n        if c % x != 0:\n            t = True\n            break\n        s += c\n    if t:\n        print(sum(a) + s)\n        return\n    wmin = 123132132\n    wmini = 0\n    for i in range(n):\n        q = a[i]\n        w = 1\n        while q % x == 0:\n            q = q // x\n            w += 1\n        if w < wmin:\n            wmini = i\n            wmin = w\n    q = 0\n    for i in range(wmini):\n        q += a[i]\n    print(q + sum(a) * wmin)\n\ndef main():\n    test_case = int(input())\n    for test in range(test_case):\n        solve()\nmain()", "def fxn(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [fxn(num, x) for num in l]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(l) * (m + 1)\n    ans += sum(l[:j])\n    print(ans)", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(arr, x):\n    n = len(arr)\n    min_mod = float('inf')\n    j = n\n    for i in range(n):\n        temp = arr[i]\n        mod = 0\n        while temp % x == 0:\n            mod += 1\n            temp //= x\n        if mod < min_mod:\n            min_mod = mod\n            j = i\n    ans = 0\n    for i in range(n):\n        if i < j:\n            ans += (min_mod + 1) * arr[i]\n            ans += arr[i]\n        else:\n            ans += (min_mod + 1) * arr[i]\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, x))", "def findx(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nt = int(input())\nfor i in range(t):\n    (N, x) = map(int, input().split())\n    A = list(map(int, input().strip().split()))\n    d = [findx(num, x) for num in A]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(A) * (m + 1)\n    ans += sum(A[:j])\n    print(ans)", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(a, x):\n    answer = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                answer += i\n            else:\n                return answer\n        u *= x\n    return answer\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def nr():\n    return int(input())\n\ndef nrs():\n    return [int(i) for i in input().split()]\n\ndef f(x, a):\n    s = 0\n    u = 1\n    while 1:\n        for i in a:\n            if i % u == 0:\n                s += i\n            else:\n                return s\n        u *= x\nfor _ in range(int(input())):\n    (n, x) = nrs()\n    print(f(x, nrs()))", "import math\n\ndef ct(elem, x):\n    count = 0\n    while elem > 0:\n        if elem % x:\n            break\n        count += 1\n        elem //= x\n    return count\nfor i in range(0, int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sum_ = sum(a)\n    my_list = list([0 for j in range(0, len(a))])\n    for j in range(0, len(a)):\n        my_list[j] = ct(a[j], x)\n    min_ = min(my_list)\n    my_sum = sum_ * (min_ + 1)\n    sum_ = sum(a[0:my_list.index(min_)])\n    print(my_sum + sum_)", "def fxn(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [fxn(num, x) for num in l]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(l) * (m + 1)\n    ans += sum(l[:j])\n    print(ans)", "def fxn(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [fxn(num, x) for num in l]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(l) * (m + 1)\n    ans += sum(l[:j])\n    print(ans)", "def fxn(num, x):\n    cnt = 0\n    while num % x == 0:\n        cnt += 1\n        num //= x\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [fxn(num, x) for num in l]\n    m = min(d)\n    j = d.index(m)\n    ans = sum(l) * (m + 1)\n    ans += sum(l[:j])\n    print(ans)", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\nfor v in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "t = int(input())\n\ndef solve(arr, x):\n    sum = 0\n    div = 1\n    while True:\n        for i in arr:\n            if i % div == 0:\n                sum += i\n            else:\n                return sum\n        div = div * x\n    return sum\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, x))", "import sys\nsys.setrecursionlimit(10 ** 6)\nfastinput = sys.stdin.readline\nfastout = sys.stdout.write\nt = int(fastinput())\n\ndef depth(y, x):\n    depth = 0\n    while y % x == 0:\n        y = y // x\n        depth += 1\n    return depth\nwhile t:\n    t -= 1\n    (n, x) = map(int, fastinput().split())\n    a = list(map(int, fastinput().split()))\n    mindepth = depth(a[0], x)\n    index = 0\n    for i in range(1, n):\n        tempdepth = depth(a[i], x)\n        if tempdepth < mindepth:\n            if mindepth != tempdepth:\n                index = i\n            mindepth = tempdepth\n    result = 0\n    for i in range(n):\n        result += a[i] * (mindepth + 1)\n    for i in range(index):\n        result += a[i]\n    print(result)", "import os\nfrom math import *\n\ndef debugprint(arg):\n    if os.path.isfile('debug.txt'):\n        print(arg)\n\ndef divisible(n, x):\n    c = 0\n    while n % x == 0:\n        c += 1\n        n = n // x\n    return c\n\ndef pb2():\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    i = 0\n    s = 0\n    lp = [divisible(i, x) for i in l]\n    mini = min(lp)\n    mini_index = lp.index(mini)\n    s = 0\n    for i in range(n):\n        if i < mini_index:\n            s += (mini + 2) * l[i]\n        else:\n            s += (mini + 1) * l[i]\n    print(s)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        pb2()\nmain()", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [1] * n\n    sup = 0\n    xx = 0\n    kek = 999999\n    for i in range(n):\n        xx += a[i]\n        y = a[i]\n        while y % (x * x * x * x) == 0:\n            ans[i] += 4\n            y //= x * x * x * x\n        while y % x == 0:\n            ans[i] += 1\n            y //= x\n        if ans[i] < kek:\n            kek = ans[i]\n    for i in range(n):\n        if ans[i] == kek:\n            break\n        else:\n            sup += a[i]\n    print(xx * kek + sup)", "def strange_list(arr, n, x):\n    S = 0\n    minK = mk(arr[0], x)\n    minKInd = 0\n    for i in range(n):\n        k = mk(arr[i], x)\n        if k < minK:\n            minK = k\n            minKInd = i\n    for i in range(n):\n        qmk = minK + 1 if i < minKInd else minK\n        S += arr[i] * (qmk + 1)\n    return S\n\ndef mk(q, x):\n    k = 0\n    while q % x == 0:\n        k += 1\n        q = q / x\n    return k\nt = int(input())\nfor i in range(t):\n    inps = input().split(' ')\n    n = int(inps[0])\n    x = int(inps[1])\n    arr = list(map(lambda x: int(x), input().split(' ')))\n    print('{0}'.format(int(strange_list(arr, n, x))))", "def solve(b, c):\n    (ans, cn) = (0, 1)\n    while True:\n        for i in c:\n            if i % cn == 0:\n                ans += i\n            else:\n                return ans\n        cn *= b\n    return ans\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    print(solve(b, c))", "import math\nfrom sys import stdin\nmx = math.inf\nmn = -math.inf\n\ndef i():\n    return int(stdin.readline().strip())\n\ndef f():\n    return float(stdin.readline().strip())\n\ndef s():\n    return stdin.readline().strip()\n\ndef ari():\n    return list(map(int, stdin.readline().split()))\n\ndef arf():\n    return list(map(float, stdin.readline().split()))\n\ndef ars():\n    return list(map(str, stdin.readline().split()))\n\ndef counter(n, x):\n    cnt = 0\n    while n % x == 0:\n        cnt += 1\n        n = n / x\n    return cnt\n\ndef main():\n    (n, x) = ari()\n    arr = ari()\n    vec = [0] * n\n    for i in range(n):\n        vec[i] = counter(arr[i], x)\n    arr_min = mx\n    ix = 0\n    for i in range(n):\n        if vec[i] < arr_min:\n            ix = i\n            arr_min = vec[i]\n    sum = 0\n    for i in range(n):\n        cnt = arr_min\n        if i < ix:\n            cnt += 1\n        sum += arr[i] * (cnt + 1)\n    print(sum)\nt = 1\nt = i()\nfor _ in range(t):\n    main()", "import math\n\ndef strange_list(nums, x):\n    x_factor = float('inf')\n    x_index = None\n    for (index, num) in enumerate(nums):\n        value = 0\n        tmp = num\n        while tmp % x == 0:\n            tmp = tmp / x\n            value += 1\n        if value < x_factor:\n            x_factor = value\n            x_index = index\n        if value == 0:\n            break\n    return sum((num * (x_factor + 1) for num in nums)) + sum((num for num in nums[:x_index]))\nnum_test = int(input())\nfor i in range(num_test):\n    (n, x) = [int(i) for i in input().split()]\n    nums = [int(i) for i in input().split()]\n    print(strange_list(nums, x))", "def main():\n    n = int(input())\n    ret = []\n    for _ in range(n):\n        (n, x) = map(int, input().split())\n        a = [int(i) for i in input().split()]\n        s = sum(a)\n        for i in range(1, 30):\n            xi = x ** i\n            for v in a:\n                if v % xi == 0:\n                    s += v\n                else:\n                    break\n            else:\n                continue\n            break\n        ret.append(s)\n    print('\\n'.join(map(str, ret)))\nmain()", "t = int(input())\n\ndef solve(arr, x):\n    sumx = 0\n    div = x\n    while True:\n        for i in arr:\n            if i % div == 0:\n                sumx += i\n            else:\n                return sumx + sum(arr)\n        div = div * x\n    return sumx + sum(arr)\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(arr, x))", "from itertools import repeat\n\ndef get_power(n, x):\n    power = 0\n    while n:\n        if n % x != 0:\n            return power\n        n //= x\n        power += 1\n    return power\n\ndef main():\n    t = int(input())\n    while t:\n        t -= 1\n        (n, x) = map(int, input().split())\n        a = list(map(int, input().split()))\n        p = list(map(get_power, a, repeat(x)))\n        min_p = min(p)\n        first_min_pos = p.index(min_p)\n        p = [min_p + 1 if i < first_min_pos else min_p for (i, val) in enumerate(p)]\n        ans = sum((a_val * (p_val + 1) for (a_val, p_val) in zip(a, p)))\n        print(ans)\nmain()", "def solve(a, x):\n    ans = 0\n    u = 1\n    while True:\n        for i in a:\n            if i % u == 0:\n                ans += i\n            else:\n                return ans\n        u *= x\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "def find_pow_of_x(number, x):\n    result = 0\n    while number % x == 0:\n        result += 1\n        number = number // x\n    return result\ntask_number = int(input())\nfor _ in range(task_number):\n    (n, x) = map(int, input().split())\n    array = [int(a) for a in input().split()]\n    powers = [find_pow_of_x(a, x) for a in array]\n    min_index = 0\n    min_power = array[0]\n    for (index, p) in enumerate(powers):\n        if p < min_power:\n            min_power = p\n            min_index = index\n    whole_sum = sum(array)\n    last_sum = sum(array[0:min_index])\n    result = whole_sum * (min_power + 1) + last_sum\n    print(result)", "t = int(input())\n\ndef order(so, x):\n    ans = 1\n    while so % x == 0:\n        so = so // x\n        ans += 1\n    return ans\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    minn = 30\n    tongcut = 0\n    total = 0\n    for num in map(int, input().split()):\n        if order(num, x) < minn:\n            tongcut = num\n            total += num\n            minn = order(num, x)\n        else:\n            tongcut += num\n            total += num\n    print((minn + 1) * total - tongcut)", "def robot(a, x):\n    s = 0\n    (mini, ind) = (10 ** 5, len(a))\n    for i in range(len(a)):\n        j = 0\n        y = a[i]\n        while y % x == 0:\n            y = y // x\n            j += 1\n        if j < mini:\n            mini = j\n            ind = i\n    for i in range(len(a)):\n        if i < ind:\n            s += a[i] * (mini + 2)\n        else:\n            s += a[i] * (mini + 1)\n    return s\nres = []\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    res.append(robot(a, x))\nprint(*res, sep='\\n')", "def numpow(num, exp):\n    cnt = 1\n    while num % exp == 0:\n        num //= exp\n        cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (tot, m, idx) = (0, 10 ** 9, -1)\n    cn = [numpow(a[0], x)] + [1] * (n - 1)\n    for i in range(n):\n        cur = numpow(a[i], x)\n        if cur < m:\n            m = cur\n            idx = i\n    for i in range(idx):\n        cn[i] = m + 1\n    for i in range(idx, n):\n        cn[i] = m\n    for i in range(n):\n        tot += a[i] * cn[i]\n    print(tot)", "def madegree(q, x):\n    count = 0\n    while True:\n        if q % x == 0:\n            q = q / x\n            count = count + 1\n        else:\n            break\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, x) = input().split()\n    n = int(n)\n    x = int(x)\n    arr = list(map(int, input().split()))\n    su = 0\n    ind = 0\n    maaa = 10 ** 9\n    for i in range(n):\n        if maaa > madegree(arr[i], x):\n            maaa = madegree(arr[i], x)\n            ind = i\n    su = su + (maaa + 2) * sum(arr[:ind])\n    su = su + (maaa + 1) * sum(arr[ind:])\n    print(su)", "def get_power(val, x):\n    temp = 0\n    while val % x == 0:\n        temp += 1\n        val = val // x\n    return temp\nfor t in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    power = [0] * n\n    min_power = get_power(nums[0], x)\n    min_index = 0\n    for i in range(1, n):\n        if min_power == 0:\n            break\n        temp = get_power(nums[i], x)\n        power[i] = x\n        if temp < min_power:\n            min_index = i\n            min_power = temp\n    result = 0\n    for i in range(n):\n        result += (min_power + 1) * nums[i]\n    for i in range(min_index):\n        result += nums[i]\n    print(result)", "import math\n\ndef strange_list(nums, x):\n    x_factor = float('inf')\n    x_index = None\n    for (index, num) in enumerate(nums):\n        value = 0\n        tmp = num\n        while tmp % x == 0:\n            tmp = tmp / x\n            value += 1\n        if value < x_factor:\n            x_factor = value\n            x_index = index\n        if value == 0:\n            break\n    return sum((num * (x_factor + 1) for num in nums)) + sum((num for num in nums[:x_index]))\nnum_test = int(input())\nfor i in range(num_test):\n    (n, x) = [int(i) for i in input().split()]\n    nums = [int(i) for i in input().split()]\n    print(strange_list(nums, x))", "t = int(input())\n\ndef nums(n, k):\n    ct = 1\n    while n % k == 0:\n        n /= k\n        ct += 1\n    return ct\n\ndef robot(n, x, l):\n    mn = 0\n    divs = list()\n    total = 0\n    for i in range(n):\n        divs.append(nums(l[i], x))\n        if divs[i] < divs[mn]:\n            mn = i\n    for i in range(n):\n        if i < mn:\n            total += l[i] * (divs[mn] + 1)\n        else:\n            total += l[i] * divs[mn]\n    print(total)\n    return\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    robot(n, x, l)", "def solver(nums, divide, length):\n    orig_nums = nums\n    times = 1\n    orig_sum = sum(nums)\n    divisible_check = [i % divide for i in nums]\n    sum_check = sum(divisible_check)\n    while sum_check == 0:\n        times = times + 1\n        nums = [i / divide for i in nums]\n        divisible_check = [i % divide for i in nums]\n        sum_check = sum(divisible_check)\n    total = orig_sum * times\n    for y in range(length):\n        if divisible_check[y] == 0:\n            total = total + orig_nums[y]\n        else:\n            return int(total)\n    return int(total)\nn = int(input())\nfor x in range(n):\n    inputs = input().split(' ')\n    inputs = [int(i) for i in inputs]\n    nums = input().split(' ')\n    nums = [int(i) for i in nums]\n    print(solver(nums, inputs[1], inputs[0]))", "def check(i):\n    c = 0\n    p = 1\n    while i % x == 0:\n        c += 1\n        i = i // x\n    return c + 1\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = []\n    a = list(map(int, input().split()))\n    an = 0\n    m = 1000000009\n    b = [0] * n\n    for i in range(n):\n        b[i] = check(a[i])\n        if b[i] < m:\n            ind = i\n            m = b[i]\n    for i in range(n):\n        if i < ind:\n            an += a[i] * min(b[i], m + 1)\n        elif i == ind:\n            an += a[i] * m\n        else:\n            an += a[i] * min(b[i], m)\n    print(an)", "from math import ceil\n\ndef LargestDiv(n, x):\n    div_pow = 0\n    curr = x ** div_pow\n    while n % curr == 0:\n        div_pow += 1\n        curr *= x\n    return div_pow - 1\n\ndef SmallestPow(a, x):\n    smallest = 10000000000.0\n    sm_ind = -1\n    for i in range(len(a)):\n        temp = LargestDiv(a[i], x)\n        if smallest > temp:\n            smallest = temp\n            sm_ind = i\n    return [sm_ind, smallest]\nt = int(input())\nfor j in range(t):\n    ff = list(input().split())\n    n = int(ff[0])\n    x = int(ff[1])\n    aa = list(map(int, input().split()))\n    imp_dat = SmallestPow(aa, x)\n    ans = 0\n    for i in range(n):\n        if i < imp_dat[0]:\n            ans += aa[i] * (imp_dat[1] + 2)\n        else:\n            ans += aa[i] * (imp_dat[1] + 1)\n    print(ans)", "def strangeList(n, k, array):\n    factorList = [0] * n\n    min_factor_index = 0\n    for x in range(n):\n        p = array[x]\n        while p % k == 0:\n            factorList[x] += 1\n            p = p / k\n    min_index = 0\n    min_factor = factorList[min_index]\n    for x in range(n):\n        if factorList[x] < min_factor:\n            min_factor_index = x\n            min_factor = factorList[min_factor_index]\n    ans = 0\n    for x in range(n):\n        if x < min_factor_index:\n            ans += array[x] * (min_factor + 2)\n        else:\n            ans += array[x] * (min_factor + 1)\n    return ans\nt = int(input())\nfinal = []\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    final.append(strangeList(n, x, l))\nfor _ in range(t):\n    print(final[_])", "def min_mum(number, x, mn):\n    i = 0\n    while number % x == 0:\n        number /= x\n        i += 1\n        if i >= mn:\n            return mn\n    return i\nt = int(input())\nfor _ in range(t):\n    tab = [0, 10 ** 10]\n    (n, x) = [int(i) for i in input().split()]\n    s = 0\n    arr = [int(i) for i in input().split()]\n    for i in range(n):\n        res = min_mum(arr[i], x, tab[1])\n        if res < tab[1]:\n            tab[1] = res\n            tab[0] = i\n    s = 0\n    for i in range(n):\n        if i < tab[0]:\n            s += arr[i] * (tab[1] + 2)\n        else:\n            s += arr[i] * (tab[1] + 1)\n    print(s)", "T = int(input())\n\ndef brute_algo(n, x, a):\n    new_a = a.copy()\n    pos = 0\n    while pos < len(new_a):\n        if new_a[pos] > 0 and new_a[pos] % x == 0:\n            new_a += [new_a[pos] // x] * x\n            pos += 1\n        else:\n            break\n    return sum(new_a)\nfor t in range(T):\n    (n, x) = tuple([int(num) for num in input().split()])\n    a = [int(num) for num in input().split()]\n\n    def get_multiplicity(ai, x):\n        multiplicity = 0\n        while ai > 0 and ai % x == 0:\n            multiplicity += 1\n            ai //= x\n        return multiplicity\n    amult = [get_multiplicity(ai, x) for ai in a]\n    min_amult = min(amult)\n    norm_amult = amult.copy()\n    have_found_min = False\n    for i in range(len(norm_amult)):\n        if have_found_min is False:\n            if amult[i] > min_amult:\n                norm_amult[i] = min_amult + 1\n                continue\n            else:\n                have_found_min = True\n        else:\n            norm_amult[i] = min_amult\n    result = sum([a[i] * (1 + norm_amult[i]) for i in range(len(a))])\n    print(result)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    b = []\n    for p in a:\n        c = 0\n        while p % x == 0:\n            p //= x\n            c += 1\n        b.append(c)\n    least = min(b)\n    k = b.index(least)\n    print(s + s * least + sum(a[:k]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    element = list(map(int, input().split()))\n    count = 0\n    d = 1\n    flag = True\n    while flag:\n        for a in element:\n            if a % d == 0:\n                count += a\n            else:\n                flag = False\n                break\n        d = d * x\n    print(count)", "import math\nimport random\n\ndef nthRoot(a, x):\n    count = 0\n    while a > 0:\n        if a % x == 0:\n            a /= x\n            count += 1\n        else:\n            break\n    return count + 1\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    r = []\n    idx = -1\n    ma = float('inf')\n    for i in range(n):\n        val = nthRoot(l[i], x)\n        r.append(val)\n        if ma > val:\n            ma = val\n            idx = i\n    ans = 0\n    for i in range(n):\n        if i <= idx:\n            s = l[i] * min(r[i], ma + 1)\n        else:\n            s = l[i] * min(r[i], ma)\n        ans += s\n    print(ans)", "def v(a, b):\n    k = 0\n    while a % b == 0:\n        k += 1\n        a = int(a / b)\n    return k\nt = int(input(''))\nfor y in range(0, t):\n    (n, x) = map(int, input('').split())\n    a = list(map(int, input('').split()))\n    a_1 = list(map(v, a, [x] * n))\n    m = min(a_1)\n    w = a_1.index(min(a_1))\n    for z in range(0, w):\n        a[z] = a[z] * (m + 2)\n    for z in range(w, len(a)):\n        a[z] = a[z] * (m + 1)\n    print(sum(a))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    d = x\n    p = 1\n    while p:\n        for i in a:\n            if i % d:\n                p = 0\n                break\n            else:\n                s += i\n        d *= x\n    print(s)", "import math\nimport sys\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n\ndef solve():\n    (n, x) = input_list_int()\n    a = input_list_int()\n    tmp = {}\n    for i in range(n):\n        tmp[i] = 1\n        v = a[i]\n        while v % x == 0:\n            tmp[i] += 1\n            v = v / x\n    mn = min(tmp.values())\n    pl = 1\n    ans = 0\n    for i in range(n):\n        if tmp[i] == mn:\n            pl = 0\n        ans += a[i] * (mn + pl)\n    print(ans)\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    c = 0\n    u = x\n    while c == 0:\n        for i in l:\n            if i % u == 0:\n                s = s + i\n            else:\n                c = c + 1\n                print(s)\n                break\n        u = u * x", "from collections import defaultdict\nimport sys\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef ls():\n    return list(map(int, list(input())))\n\ndef la():\n    return list(input())\n\ndef ii():\n    return int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = ii()\nfor i in range(t):\n    (n, x) = li()\n    a = li()\n    b = []\n    for e in a:\n        count = 0\n        while e % x == 0:\n            e = e // x\n            count += 1\n        b.append(count)\n    minm = min(b)\n    ans = sum(a) * (minm + 1)\n    ans += sum(a[0:b.index(minm)])\n    print(ans)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    ii = -1\n    temp = sys.maxsize\n    k = 0\n    for i in range(n):\n        c = 0\n        k = l1[i]\n        while k % x == 0:\n            c += 1\n            k //= x\n        if c < temp:\n            temp = c\n            ii = i\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if i < ii:\n            f = x\n            cnt = temp + 1\n            ans += l1[i] * (cnt + 1)\n        else:\n            f = x\n            cnt = temp\n            ans += l1[i] * (cnt + 1)\n    print(ans)", "import math\nt = int(input().strip())\nfor k in range(t):\n    (n, x) = map(int, input().strip().split())\n    l = list(map(int, input().strip().split()))\n    u = 1\n    ans = 0\n    ret = False\n    while True:\n        for num in l:\n            if num % u == 0:\n                ans += num\n            else:\n                ret = True\n                break\n        if ret:\n            break\n        u *= x\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = []\n    for i in l:\n        m = i\n        xx = 1\n        while m % x == 0:\n            m = m // x\n            xx += 1\n        p.append(xx)\n    ans = 0\n    x = min(p)\n    y = x\n    x = p.index(x)\n    for i in range(x, n):\n        p[i] = y\n    if p[0] > y + 1:\n        p[0] = y + 1\n    for i in range(1, x):\n        if p[i] > p[i - 1]:\n            p[i] = p[i - 1]\n    for i in range(n):\n        ans += l[i] * p[i]\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    array = list(map(int, input().split()))\n    p = []\n    for e in array:\n        c = 0\n        while e % x == 0:\n            c += 1\n            e = e // x\n        p.append(c)\n    l = min(p)\n    ans = sum(array) * (min(p) + 1)\n    i = 0\n    while True:\n        if p[i] == min(p):\n            break\n        ans += array[i]\n        i += 1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = []\n    for j in l:\n        c = 0\n        while j % x == 0:\n            c = c + 1\n            j = j // x\n        d.append(c)\n    m = min(d)\n    p = d.index(m)\n    an = sum(l) * (m + 1)\n    an = an + sum(l[:p])\n    print(an)", "T = int(input())\nans = ''\nfor _ in range(T):\n    nx = [int(i) for i in input().split()]\n    n = nx[0]\n    x = nx[1]\n    a = [int(i) for i in input().split()]\n    s = 0\n    p = 0\n    p_pos = 0\n    t = a[0]\n    while t % x == 0:\n        t //= x\n        p += 1\n    for i in range(n - 1):\n        pi = 0\n        t = a[i + 1]\n        while t % x == 0:\n            t //= x\n            pi += 1\n        if pi < p:\n            p = pi\n            p_pos = i + 1\n    for i in range(n):\n        if i < p_pos:\n            s += (p + 2) * a[i]\n        else:\n            s += (p + 1) * a[i]\n    ans += str(s) + '\\n'\nprint(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    odd_appear = []\n    for i in a:\n        cnt = 0\n        while i % x == 0:\n            cnt += 1\n            i = i // x\n        odd_appear.append(cnt)\n    m = min(odd_appear)\n    i = odd_appear.index(m)\n    print((m + 2) * sum(a[:i]) + (m + 1) * sum(a[i:]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    c = 0\n    u = x\n    while c == 0:\n        for i in l:\n            if i % u == 0:\n                s += i\n            else:\n                c = c + 1\n                print(s)\n                break\n        u = u * x", "for j in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mc = 10 ** 9\n    a = 0\n    s = 0\n    index = 0\n    for i in range(n):\n        a = l[i]\n        c1 = 0\n        while a % x == 0:\n            c1 += 1\n            a = a // x\n        if c1 < mc:\n            mc = c1\n            index = i\n        if mc == 0:\n            break\n    s = sum(l) * (mc + 1)\n    for i in range(n):\n        if i != index:\n            s += l[i]\n        else:\n            break\n    print(s)", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    ans = sum(arr)\n    h = []\n    index = -1\n    minm = 999999999\n    for i in range(n):\n        cnt = 0\n        temp = arr[i]\n        while temp % x == 0:\n            temp = temp // x\n            cnt += 1\n        h.append(cnt)\n        if minm > cnt:\n            minm = cnt\n            index = i\n    ans += ans * minm\n    for i in range(index):\n        ans += arr[i]\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    ans = []\n    for i in range(n):\n        count = 1\n        new = arr[i]\n        while new % x == 0:\n            count = count + 1\n            new = new // x\n        ans.append(count)\n    mn = min(ans)\n    print(s * mn + sum(arr[:ans.index(mn)]))", "import sys\nimport math\nLI = lambda : [int(k) for k in input().split()]\ninput = lambda : sys.stdin.readline().rstrip()\nIN = lambda : int(input())\nS = lambda : input()\nfor i in range(IN()):\n    (n, x) = LI()\n    a = LI()\n    sm = sum(a)\n    ans = 0\n    ndi = 0\n    co = 10 ** 9\n    for i in range(n):\n        ele = a[i]\n        tco = 1\n        while ele % x == 0:\n            tco += 1\n            ele /= x\n        if tco < co:\n            co = tco\n            ndi = i\n    ans += sum(a[:ndi])\n    ans += sm * co\n    print(ans)", "tcs = int(input())\nfor tc in range(tcs):\n    (n, x) = list(map(int, input().split()))\n    li = list(map(int, input().split()))\n    ans = 0\n    a = 1\n    flag = False\n    while 1:\n        for i in li:\n            if i % a == 0:\n                ans += i\n            else:\n                flag = True\n                break\n        a *= x\n        if flag:\n            break\n    print(ans)"]