["for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(input().split(' '))\n    m = -(-n // 2)\n    med = 0\n    for i in range(k):\n        if n % 2 == 0:\n            med = int(a[-m - 1 - i * (m + 1)]) + med\n        else:\n            med = int(a[-m - i * m]) + med\n    print(med)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = x[::-1]\n    c = a // 2 + 1\n    d = c\n    i = 1\n    s = 0\n    while i <= b:\n        j = c\n        s += y[j - 1]\n        c += d\n        i += 1\n    print(s)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A = A[::-1]\n    if n % 2 == 0:\n        i = math.ceil(n / 2)\n    else:\n        i = math.ceil(n / 2) - 1\n    ans = 0\n    for j in range(k):\n        ans += A[i]\n        if n % 2 == 0:\n            i = i + math.ceil(n / 2) + 1\n        else:\n            i += math.ceil(n / 2)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = n * k\n    a = list(map(int, input().split()))\n    t = (n + 1) // 2 - 1\n    t = n - t\n    p = m - t\n    cnt = 0\n    ans = 0\n    while cnt < k:\n        ans += a[p]\n        p -= t\n        cnt += 1\n    print(ans)", "for _ in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    v = sorted(map(int, input().split()))[::-1]\n    d = n // 2\n    s = v[d::d + 1][:k]\n    print(sum(s))", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    fg = list(map(int, input().split()))\n    sumi = 0\n    for i in range(0, k):\n        sumi += fg[-(n // 2 + 1) * (i + 1)]\n    print(sumi)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "for p in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if n % 2:\n        (x, y) = (n // 2, n // 2 + 1)\n    else:\n        (x, y) = (n // 2 - 1, n // 2 + 1)\n    if n == 2:\n        s = 0\n        for i in range(0, n * k, 2):\n            s += a[i]\n        print(s)\n    else:\n        (d, s) = (x * k, 0)\n        while d < n * k:\n            s += a[d]\n            d += y\n        print(s)", "def solve(lst, n, k):\n    sm = 0\n    cnt = 0\n    x = n // 2\n    i = n * k - 1 - x\n    while i >= 0:\n        if cnt == k:\n            return sm\n        sm += lst[i]\n        i = i - x - 1\n        cnt += 1\n    return sm\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    lst = list(map(int, input().split(' ')))\n    print(solve(lst, n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ali = list(map(int, input().split()))\n    q = n // 2 + 1\n    mdn = ali[-q::-q]\n    print(sum(mdn[:k]))", "def solve_Median(n, k, n_kArr):\n    arr_size = n * k\n    index1 = (n + 1) // 2 - 1\n    index1 = n - index1\n    s = arr_size + 1\n    max_median = 0\n    while k > 0:\n        s -= index1\n        if s <= 0:\n            break\n        max_median += n_kArr[s - 1]\n        k -= 1\n    return max_median\nt = int(input())\ntemp_arr = []\nfor i in range(t):\n    n_kList = list(map(int, input().split()))\n    n = n_kList[0]\n    k = n_kList[1]\n    n_kArr = list(map(int, input().split()))\n    max_median = solve_Median(n, k, n_kArr)\n    temp_arr.append(max_median)\nfor j in temp_arr:\n    print(j)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.reverse()\n    z = math.ceil(n / 2)\n    i = n - z\n    s = 0\n    q = 0\n    while i < n * k and q < k:\n        s += a[i]\n        q += 1\n        i += n - z + 1\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    res = 0\n    if n == 1:\n        res = sum(a)\n    elif n == 2:\n        for i in range(0, n * k, 2):\n            res += a[i]\n    else:\n        check = 0\n        for i in range(n * k - n // 2 - 1, -1, -((n + 2) // 2)):\n            check += 1\n            res += a[i]\n            if check == k:\n                break\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = n // 2\n    if n % 2 != 0:\n        x += 1\n    t = n - x + 1\n    j = n * k - t\n    c = 0\n    while k > 0:\n        c += a[j]\n        j -= t\n        k -= 1\n    print(c)", "q = int(input())\nfor _ in range(q):\n    (n, k) = map(int, input().split())\n    alist = [*map(int, input().split())]\n    numbers = n // 2 + 1\n    asum = 0\n    for i in range(n * k)[-numbers:-numbers * k - 1:-numbers]:\n        asum += alist[i]\n    print(asum)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().strip().split()))\n    c = 0\n    h = ceil(n / 2)\n    i = n * k - (n - h) - 1\n    while k > 0:\n        c += a[i]\n        i -= n - h + 1\n        k -= 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        s = 0\n        for i in range(0, n * k, n):\n            s = s + a[i]\n        print(s)\n    else:\n        s = 0\n        mul = n - (n + 2) // 2\n        for i in range(mul * k, n * k, (n + 2) // 2):\n            s = s + a[i]\n        print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        s = 0\n        for i in range(0, n * k, n):\n            s = s + a[i]\n        print(s)\n    else:\n        s = 0\n        mul = n - (n + 2 >> 1)\n        for i in range(mul * k, n * k, n + 2 >> 1):\n            s = s + a[i]\n        print(s)", "t = int(input())\nwhile t:\n    (size, cntOfSubArr) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    noOfElementsBeforeMedian = size // 2 if size % 2 else size // 2 - 1\n    noOfElementsAfterMedian = size // 2\n    N = size * cntOfSubArr\n    ans = 0\n    for indxOfMedian in range(noOfElementsBeforeMedian * cntOfSubArr, N, noOfElementsAfterMedian + 1):\n        ans += arr[indxOfMedian]\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = n // 2\n    s = 0\n    i = n * k\n    for _ in range(k):\n        s += a[i - d - 1]\n        i -= d + 1\n    print(s)", "for _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    r = [*map(int, input().split())]\n    print(sum(r[(n // 2 + n % 2 - 1) * m::n // 2 + 1]))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    w = list(map(int, input().split()))\n    s = 0\n    for i in range(n * k - 1 - n // 2, n * k - 2 - n // 2 - (n // 2 + 1) * (k - 1), -(n // 2 + 1)):\n        s += w[i]\n    print(s)", "import math\nnum = int(input())\nfor i in range(num):\n    arr = input().split(' ')\n    m = int(arr[0])\n    n = int(arr[1])\n    arr1 = input().split(' ')\n    arr1 = list(map(int, arr1))\n    l = m - math.ceil(m / 2) + 1\n    s = arr1[-l::-l]\n    print(sum(s[:n]))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ali = list(map(int, input().split()))\n    q = n // 2 + 1\n    mdn = ali[-q::-q]\n    print(sum(mdn[:k]))", "class Solution:\n\n    def median(self, n, k, arr) -> int:\n        arr = arr[::-1]\n        ans = 0\n        start = n // 2\n        val = start + 1\n        jump = 1\n        while jump <= k:\n            ans += arr[start]\n            jump += 1\n            start = start + val\n        return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    obj = Solution()\n    print(obj.median(n, k, arr))", "n = int(input())\nans = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    t = 0\n    for j in range(0, b):\n        t += k[int(a * b - (a // 2 + 1) * (j + 1))]\n    ans.append(t)\nfor i in ans:\n    print(i)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = n // 2 + 1\n    print(sum(a[-q::-q][:k]))\nfor _ in range(int(input())):\n    solve()", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li.reverse()\n    j = math.ceil(n / 2)\n    s = 0\n    i = n - j\n    for _ in range(0, k):\n        s = s + li[i]\n        if n % 2 == 0:\n            i = i + j + 1\n        else:\n            i = i + j\n    print(s)", "inn = lambda : int(input())\ninm = lambda : map(int, input().split())\nins = lambda : str(input())\nina = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, k) = inm()\n    m = n * k\n    a = ina()\n    t = (n + 1) // 2 - 1\n    t = n - t\n    p = m - t\n    cnt = 0\n    ans = 0\n    while cnt < k:\n        ans += a[p]\n        p -= t\n        cnt += 1\n    print(ans)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] + list(map(int, input().split()))[::-1]\n    t = n - (1 + n) // 2\n    sum = 0\n    for i in range(1, k + 1):\n        sum += a[(t + 1) * i]\n    print(sum)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    total = n * k\n    ans = 0\n    if n == 1:\n        ans = sum(nums)\n    elif n == 2:\n        for i in range(k):\n            ans += nums[i * 2]\n    elif n % 2 == 1:\n        for i in range(n // 2 * k, total, n // 2 + 1):\n            ans += nums[i]\n    elif n % 2 == 0:\n        for i in range((n // 2 - 1) * k, total, n - (n // 2 - 1)):\n            ans += nums[i]\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    m = n // 2 + 1\n    pos = n * k - m\n    cnt = k\n    res = 0\n    while cnt > 0:\n        res += li[pos]\n        pos -= m\n        cnt -= 1\n    print(res)", "def ceil(a, b):\n    return (a + b - 1) // b\n\ndef main(a, k, n):\n    med = ceil(n, 2)\n    i = n * k - (n - med + 1)\n    step = 0\n    s = 0\n    while step < k:\n        s += a[i]\n        i -= n - med + 1\n        step += 1\n    print(s)\n    return ''\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    main(a, k, n)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    h = 0\n    sol = 0\n    for i in range(k):\n        h = h + n // 2 + 1\n        sol = sol + a[-h]\n    print(sol)", "def solve(n, k, a):\n    sum = 0\n    ind = (n - 1) // 2\n    for i in range(k * ind, len(a), n - ind):\n        sum += a[i]\n    print(sum)\nrep = int(input())\nfor _ in range(rep):\n    a = input().split()\n    n = int(a[0])\n    k = int(a[1])\n    arr = [int(x) for x in input().split()]\n    solve(n, k, arr)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = list(map(int, input().split()))\n    s.reverse()\n    c = []\n    p = n // 2\n    for i in range(m):\n        c.append(s[p])\n        p += n // 2 + 1\n    print(sum(c))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    if x == 1:\n        print(sum(a[0:n * k:n]))\n    else:\n        print(sum(a[k * (x - 1):n * k:n - x + 1]))", "import sys\nimport math\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline()\n\ndef out(x):\n    return sys.stdout.write(str(x))\nfor _ in range(int(input())):\n    (n, m) = int_arr()\n    arr = int_arr()\n    ans = 0\n    j = n * m - 1\n    if n % 2 == 0:\n        diff_b = n // 2 + 1\n    else:\n        diff_b = n // 2 + 1\n    for l in range(m):\n        j -= diff_b\n        ans += arr[j + 1]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mid = (n + 1) // 2\n    right = n - mid + 1\n    i = right\n    ans = 0\n    for j in range(k):\n        ans += a[-i]\n        i += right\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    out = 0\n    l = n // 2\n    while l < len(a) and k > 0:\n        out += a[l]\n        l += n // 2 + 1\n        k -= 1\n    print(out)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    u = (n >> 1) + 1\n    ret = 0\n    nk = len(a) - u\n    for i in range(k):\n        ret += a[nk - i * u]\n    ans.append(str(ret))\nprint('\\n'.join(ans))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, k) = R()\n    print(sum(R()[(n - 1) // 2 * k::n // 2 + 1]))", "t = int(input())\nfor q in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = input().split()\n    s = 0\n    h = n // 2 + 1\n    for i in range(1, k + 1):\n        s += int(a[-(i * h)])\n    print(s)", "def solve(n, k, arr):\n    if n % 2 == 0:\n        up = n / 2 + 1\n        down = n / 2 - 1\n    elif n % 2 == 1:\n        down = int(n / 2)\n        up = n - down\n    arr.reverse()\n    i = 0\n    up = int(up)\n    for c in range(1, k * up + 1):\n        if c % up == 0:\n            i += int(arr[c - 1])\n    return i\nt = int(input())\nfor c in range(0, t):\n    a = input().split(' ')\n    b = input().split(' ')\n    print(solve(int(a[0]), int(a[1]), b))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sum = 0\n    j = k * n\n    x = n // 2 + 1\n    c = k\n    while c > 0:\n        c -= 1\n        j -= x\n        sum += a[j]\n    print(sum)", "n_test = int(input())\nfor i in range(n_test):\n    (n, k) = list(map(int, input().split()))\n    arr = [int(m) for m in input().split(' ')]\n    if n % 2 == 0:\n        a = n // 2\n    else:\n        a = n // 2 + 1\n    sum = 0\n    b = 1\n    for j in range(k):\n        sum += arr[-b * (n - a) - b]\n        b = b + 1\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = n // 2\n    s = 0\n    for j in range(1, k + 1):\n        s += l[n * k - j * m - j]\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    step = n // 2 + 1\n    pos = n * k - step\n    count = k\n    ans = 0\n    while count:\n        ans += a[pos]\n        pos -= step\n        count -= 1\n    print(ans)", "import math\n\ndef maxSumOfMedian(n, k, li):\n    length = len(li)\n    median = math.ceil(n / 2)\n    start = (median - 1) * k\n    sum = li[start]\n    for i in range(1, k):\n        sum += li[start + (n - median + 1) * i]\n    return sum\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    print(maxSumOfMedian(n, k, li))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ali = list(map(int, input().split()))\n    q = n // 2 + 1\n    mdn = ali[-q::-q]\n    print(sum(mdn[:k]))", "import math\nt = int(input())\n\ndef solu():\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    med_index = math.ceil(n / 2) - 1\n    nums_med = med_index * k\n    right = arr[nums_med:]\n    right_chapter = n - med_index\n    summ = 0\n    for i in range(len(right)):\n        if i % right_chapter == 0:\n            summ += right[i]\n    print(summ)\nfor _ in range(t):\n    solu()", "for etstcase in range(int(input())):\n    arr = [int(x) for x in input().split()]\n    (n, k) = (arr[0], arr[1])\n    arr = [int(x) for x in input().split()]\n    if n % 2 == 1:\n        med = (n + 1) // 2\n    else:\n        med = n // 2\n    big = n - med + 1\n    sm = n - big\n    j = n * k - big\n    i = sm - 1\n    ans = 0\n    while i < j:\n        ans += arr[j]\n        j -= big\n        i += sm\n    print(ans)", "inp = lambda : list(map(int, input().split(' ')))\nfor _ in range(int(input())):\n    (n, k) = inp()\n    a = inp()\n    sum = 0\n    f = n // 2 + 1\n    for j in range(1, k + 1):\n        sum += a[-f * j]\n    print(sum)", "import sys\nimport math\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\ntestCases = int(input())\nwhile testCases != 0:\n    (n, k) = get_ints()\n    a = get_list()\n    meanyHead = math.ceil(n / 2)\n    meanyHead = n - meanyHead + 1\n    county = meanyHead\n    answer = 0\n    for i in range(k):\n        answer += a[-county]\n        county += meanyHead\n    print(answer)\n    testCases -= 1", "t = int(input())\nfor i in range(t):\n    temp = [int(x) for x in input().split()]\n    n = temp[0]\n    k = temp[1]\n    a = [int(x) for x in input().split()]\n    if n % 2 == 0:\n        m = n // 2\n    else:\n        m = n // 2 + 1\n    total = 0\n    for j in range(k):\n        x = -(n - m + 1) * (j + 1)\n        total += a[x]\n    print(total)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = int(math.ceil(n / 2))\n    if n == 1:\n        print(sum(l))\n    else:\n        s = 0\n        l = l[::-1]\n        i = 0\n        if n % 2 == 0:\n            for j in range(p, len(l), p + 1):\n                s += l[j]\n                i += 1\n                if i == k:\n                    break\n        else:\n            for j in range(p - 1, len(l), p):\n                s += l[j]\n                i += 1\n                if i == k:\n                    break\n        print(s)\n        print()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(sum(l))\n    elif n == 2:\n        print(sum(l[::2]))\n    elif n % 2 == 0:\n        s = 0\n        for i in range(1, k + 1):\n            s = s + l[-(i * (n // 2 + 1))]\n        print(s)\n    else:\n        s = 0\n        for i in range(1, k + 1):\n            s = s + l[-(i * (n // 2 + 1))]\n        print(s)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    if n == 1:\n        print(sum(a))\n    elif n == 2:\n        b = a[0::2]\n        print(sum(b))\n    else:\n        p = (n - 1) // 2\n        i = m * p\n        for k in range(m):\n            s += a[i]\n            i += n - p\n        print(s)", "import sys\nfrom math import ceil\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, k, arr):\n    if n % 2 != 0:\n        n = ceil(n / 2)\n    else:\n        n = n // 2 + 1\n    tot = 0\n    c = 0\n    for i in range(len(arr) - n, -1, -n):\n        tot += arr[i]\n        c += 1\n        if c == k:\n            print(tot)\n            return\n    print(tot)\nfor _ in range(int(input())):\n    (n, k) = get_int()\n    arr = int_arr()\n    solve(n, k, arr)", "import math\nmod = 1000000007\nfrom sys import stdin, stdout\nfor abcd in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    li = [0] + list(map(int, stdin.readline().split()))\n    ans = 0\n    if n % 2 == 1:\n        t = n * k\n        x = math.ceil(n / 2)\n        j = k * (x - 1) + 1\n        for i in range(k):\n            ans += li[j]\n            j += n - x + 1\n        print(ans)\n    else:\n        x = n // 2\n        j = k * (x - 1) + 1\n        for i in range(k):\n            ans += li[j]\n            j += n - x + 1\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    ans = li[(n - 1) // 2 * k]\n    i = 1\n    x = (n - 1) // 2 * k\n    while i < k:\n        x = x + (n // 2 + 1)\n        ans = ans + li[x]\n        i = i + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    lis = list(map(int, input().split()))\n    x = n - (n - 1) // 2\n    z = n * k - x\n    y = lis[z]\n    for i in range(k - 1):\n        z -= x\n        y += lis[z]\n    print(y)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    u = (n >> 1) + 1\n    ret = 0\n    nk = len(a) - u\n    for i in range(0, k * u, u):\n        ret += a[nk - i]\n    ans.append(str(ret))\nprint('\\n'.join(ans))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 2\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    (n, k) = map(int, t[0].split())\n    A = list(map(int, t[1].split()))\n    i = n // 2\n    B = []\n    s = i + 1\n    for j in range(n * k - i - 1, -1, -s):\n        B.append(A[j])\n    print(sum(B[:k]))", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    m = math.ceil(n / 2)\n    st = (m - 1) * k\n    gap = n - m + 1\n    su = 0\n    for i in range(st, n * k, gap):\n        su += l1[i]\n    print(su)", "import math\nt = int(input())\nfor q in range(t):\n    (n, k) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    g = n - math.ceil(n / 2)\n    i = n * k - 1\n    sums = 0\n    c = 0\n    while c < k and i >= 0:\n        i = i - g\n        sums += lst[i]\n        i = i - 1\n        c = c + 1\n    print(sums)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    x = -(-n // 2)\n    sum_ = 0\n    c = k\n    l = n // 2\n    x = n * k - 1\n    while c:\n        x -= l\n        sum_ += a[x]\n        x -= 1\n        c -= 1\n    print(sum_)", "from math import ceil\nt = int(input())\nanswers = []\nfor _ in range(t):\n    nk = input().split()\n    a = input().split()\n    n = int(nk[0])\n    m = ceil(n / 2.0)\n    k = int(nk[1])\n    step = n - m + 1\n    medians = []\n    for i in range(k):\n        medians.append(int(a[-(i + 1) * step]))\n    x = sum(medians)\n    answers.append(x)\nfor j in range(t):\n    print(answers[j])", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = list(map(int, input().split()))\n    sum = 0\n    median = abs(-n // 2)\n    if n == 1:\n        for p in range(n * k):\n            sum = sum + i[p]\n    elif n == 2:\n        for p in range(0, n * k, 2):\n            sum = sum + i[p]\n    else:\n        for p in range(k * (median - 1), n * k, n - median + 1):\n            sum = sum + i[p]\n    print(sum)", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        s = list(map(int, input().split()))\n        ss = 0\n        kk = n // 2 + 1\n        for i in range(k):\n            ss += s[-kk * (i + 1)]\n        print(ss)\nmain()", "for _ in range(int(input())):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    a = list(map(int, input().split()))\n    a.sort()\n    m = n // 2 + 1\n    d = n * k\n    sum = 0\n    for i in range(0, k):\n        sum += a[d - m]\n        d -= m\n    print(sum)", "for _ in range(int(input())):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    l = [int(i) for i in input().split()]\n    if n % 2 == 0:\n        c = n // 2 - 1\n    else:\n        c = n // 2\n    pos = n - c - 1\n    t = l[::-1]\n    ct = s = 0\n    i = pos\n    while ct < k:\n        ct += 1\n        s += t[i]\n        i += pos + 1\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    big = int(n / 2)\n    pos = n * k - 1\n    count = 0\n    for i in range(k):\n        for j in range(big):\n            pos -= 1\n        count += arr[pos]\n        pos -= 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] + list(map(int, input().split()))[::-1]\n    t = n - (1 + n) // 2\n    sum = 0\n    for i in range(1, k + 1):\n        sum += a[(t + 1) * i]\n    print(sum)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.reverse()\n    z = math.ceil(n / 2)\n    i = n - z\n    s = 0\n    q = 0\n    while i < n * k and q < k:\n        s += a[i]\n        q += 1\n        i += n - z + 1\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    e = n * k\n    ans = 0\n    for i in range(k):\n        if n % 2 == 0:\n            y = n // 2 + 1\n            z = n - y\n            x = a[s:s + z] + a[e - y:e]\n            ans += x[n // 2 - 1]\n            s = s + z\n            e = e - y\n        else:\n            y = n // 2\n            z = n - y\n            x = a[s:s + y] + a[e - z:e]\n            ans += x[n // 2]\n            s = s + y\n            e = e - z\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = list()\n    if n % 2 == 0:\n        m = n // 2\n    else:\n        m = n // 2 + 1\n    w = n - m + 1\n    for i in range(k * (m - 1), len(l) - w + 1, w):\n        ans = l[i]\n        p.append(ans)\n    print(sum(p))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 0\n    e = 0\n    t = 0\n    new = l[::-1]\n    if k == 1:\n        if n % 2 == 0:\n            print(l[n // 2 - 1])\n        else:\n            print(l[n // 2])\n    elif n == 2:\n        for i in range(len(l)):\n            if i % 2 == 0:\n                e += l[i]\n        print(e)\n    else:\n        for i in range(k):\n            if n % 2 != 0:\n                if i == 0:\n                    s += new[n // 2]\n                else:\n                    s += new[n // 2 + i * (n // 2) + i]\n            else:\n                s += new[n // 2 + t + i]\n                t += n // 2\n        print(s)", "def C1():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = [int(i) for i in input().split()]\n        mid = int(n / 2 + 1)\n        ans = 0\n        for i in range(k + 1):\n            ind = n * k - i * mid\n            if ind >= len(a):\n                continue\n            ans += a[ind]\n        print(ans)\nC1()", "import math\nans = []\ntests = int(input())\nfor i in range(tests):\n    input_list = [int(x) for x in input().split(' ')]\n    n = input_list[0]\n    k = input_list[1]\n    a = [int(x) for x in input().split(' ')]\n    half = 0\n    sum_of_medians = 0\n    for j in range(k):\n        half += math.floor(n / 2) + 1\n        sum_of_medians += a[-half]\n    ans.append(sum_of_medians)\nfor i in ans:\n    print(i)", "inp = lambda : list(map(int, input().split(' ')))\nfor _ in range(int(input())):\n    (n, k) = inp()\n    a = inp()\n    sum = 0\n    for j in range(k):\n        sum += a[(n - 1) // 2 * k + j * (n // 2 + 1)]\n    print(sum)", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    d = n // 2 + 1\n    (s, c) = (0, 0)\n    for i in range(n * k - d, -1, -d):\n        s = s + arr[i]\n        c = c + 1\n        if c == k:\n            print(s)\n            break", "from collections import defaultdict\nlinp = lambda : list(map(int, input().split()))\niinp = lambda : int(input())\ntinp = lambda : map(int, input().split())\nrinp = lambda : range(int(input()))\ndct = lambda : defaultdict(lambda : 0)\nfrom collections import Counter\nfrom math import ceil\nfor _ in rinp():\n    (n, k) = tinp()\n    l = linp()\n    i = ceil(n / 2)\n    r = n - i + 1\n    x = r\n    sm = 0\n    c = 0\n    while c < k:\n        sm += l[-x]\n        x += r\n        c += 1\n    print(sm)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    s = 0\n    t = 0\n    for i in range(n // 2, len(a), n // 2 + 1):\n        s += a[i]\n        t += 1\n        if t == k:\n            break\n    print(s)", "PI = 3.141592653589793\nINF = 999999999\nMOD = 1000000007\nimport random\n\ndef add(x, y):\n    return (x + y) % MOD\n\ndef sub(x, y):\n    return (x - y + MOD) % MOD\n\ndef mul(x, y):\n    return x * y % MOD\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef power(x, y):\n    res = 1\n    x %= MOD\n    while y != 0:\n        if y & 1:\n            res = mul(res, x)\n        y >>= 1\n        x = mul(x, x)\n    return res\n\ndef mod_inv(n):\n    return power(n, MOD - 2)\n\ndef prob(p, q):\n    return mul(p, power(q, MOD - 2))\n\ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\nfor t in range(ii()):\n    (n, k) = li()\n    a = li()\n    if n == 1:\n        print(sum(a))\n        continue\n    ans = 0\n    index = n // 2\n    a.reverse()\n    cnt = 0\n    while index < n * k and cnt < k:\n        ans += a[index]\n        index += n // 2 + 1\n        cnt += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = n // 2 + 1\n    ans = 0\n    for j in range(c, c * k + 1, c):\n        ans = ans + l[-j]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k * ((n - 1) // 2), k * n, n - (n - 1) // 2):\n        ans += arr[i]\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    mid = ceil(n / 2)\n    c = 0\n    for i in range(k):\n        pos = (i + 1) * (n - mid + 1)\n        c += array[-pos]\n    print(c)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    k1 = k\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    median = n // 2\n    out = 0\n    while median < len(a) and k > 0:\n        out += a[median]\n        median += n // 2 + 1\n        k -= 1\n    print(out)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    u = (n >> 1) + 1\n    ret = 0\n    nk = len(a)\n    for i in range(k):\n        ret += a[nk - u - i * u]\n    ans.append(str(ret))\nprint('\\n'.join(ans))", "def main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.reverse()\n    s = 0\n    p = n // 2\n    i = p\n    for c in range(k):\n        s += a[i]\n        i += p + 1\n    print(s)\nrw = int(input())\nfor wewq in range(rw):\n    main()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(j) for j in input().split()]\n    ans = 0\n    jump = n // 2 + 1\n    count = 0\n    for i in range(n * k - jump, -1, -jump):\n        if count == k:\n            break\n        count += 1\n        ans += arr[i]\n    print(ans)", "import math\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    sum = 0\n    med_numb = int(math.ceil(n / 2)) + (n + 1) % 2\n    A.sort()\n    point = n * k - med_numb\n    for i in range(k):\n        sum += A[point]\n        point -= med_numb\n    print(sum)", "for j in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sumo = 0\n    c = 0\n    c1 = n * k\n    while c < k:\n        c1 = c1 - n // 2\n        sumo = sumo + a[c1 - 1]\n        c1 = c1 - 1\n        c = c + 1\n    print(sumo)"]