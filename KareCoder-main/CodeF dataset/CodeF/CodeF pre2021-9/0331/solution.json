["for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ll = []\n    ans = 0\n    for i in range(n):\n        k = l[i] + 1\n        while k in l or k in ll:\n            k += 1\n        if k > 2 * n:\n            ans = -1\n            break\n        ll.append(k)\n    if ans == 0:\n        for i in range(n):\n            print(l[i], ll[i], end=' ')\n        print()\n    else:\n        print(-1)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        n = int(input())\n        b = [0] + [int(i) for i in input().split(' ')]\n        hash_table = [1 for i in range(2 * n + 1)]\n        a = [0 for i in range(2 * n + 1)]\n        is_good = True\n        collector = []\n        for i in range(1, n + 1):\n            hash_table[b[i]] = 0\n            a[i * 2 - 1] = b[i]\n        for i in range(1, 2 * n + 1):\n            if hash_table[i] == 1:\n                collector.append(i)\n        for i in range(1, 2 * n + 1):\n            if a[i] == 0:\n                target = a[i - 1]\n                current_index = a[i - 1]\n                while current_index <= 2 * n:\n                    if hash_table[current_index] == 1:\n                        needed_index = current_index\n                        hash_table[current_index] = 0\n                        a[i] = needed_index\n                        break\n                    else:\n                        current_index += 1\n                else:\n                    is_good = False\n            if not is_good:\n                break\n        if is_good:\n            print(' '.join([str(i) for i in a[1:]]))\n        else:\n            print(-1)\nmain_function()", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    b = list(I())\n    ff = 0\n    a = [0] * (2 * n)\n    for i in range(0, 2 * n, 2):\n        x = b[i // 2]\n        a[i] = x\n        x = x + 1\n        while x in b:\n            x = x + 1\n        if x > 2 * n:\n            ff = 1\n            break\n        a[i + 1] = x\n        b.append(x)\n    if ff == 0:\n        print(*a)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = list(map(int, input().split()))[0]\n    p = list(map(int, input().split()))\n    a = [0] * (2 * n)\n    for i in p:\n        a[i - 1] = 1\n    ans = []\n    for i in p:\n        j = i\n        while j < 2 * n and a[j] != 0:\n            j += 1\n        if j < 2 * n:\n            a[j] = 1\n            ans.append(i)\n            ans.append(j + 1)\n    if len(ans) == 2 * n:\n        print(*ans, sep=' ')\n    else:\n        print(-1)", "testcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    arr = [int(num) for num in input().split()]\n    deleted = set()\n    remaining_nums = set(range(1, 2 * n + 1))\n    doable = True\n    for num in arr:\n        deleted.add(num)\n        remaining_nums.remove(num)\n    remaining_nums = sorted(list(remaining_nums))\n    ans = [0] * (2 * n)\n    for (ind1, num1) in enumerate(arr):\n        for (ind2, num2) in enumerate(remaining_nums):\n            if num2 > num1:\n                ans[ind1 * 2] = min(num2, num1)\n                ans[ind1 * 2 + 1] = max(num2, num1)\n                remaining_nums.pop(ind2)\n                break\n            if ind2 == len(remaining_nums) - 1:\n                doable = False\n                break\n        if not doable:\n            break\n    print(' '.join(map(str, ans)) if doable else -1)", "def solve():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        impossible = False\n        a = [-1] * (2 * n)\n        numbers = set(b)\n        for (i, x) in enumerate(b):\n            if impossible:\n                break\n            a[2 * i] = x\n            bigger = x + 1\n            while bigger in numbers:\n                bigger += 1\n            if bigger <= 2 * n:\n                a[2 * i + 1] = bigger\n                numbers.add(bigger)\n            else:\n                impossible = True\n        if impossible:\n            print('-1')\n        else:\n            print(' '.join(map(str, a)))\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    new = []\n    for i in range(n):\n        temp = 0\n        for j in range(1, 2 * n + 5):\n            temp = arr[i] + j\n            if temp not in new and temp not in arr:\n                break\n        new.append(temp)\n    chk = 0\n    ans = [0] * (2 * n)\n    for i in range(0, 2 * n - 1, 2):\n        ans[i] = arr[i // 2]\n    for i in range(1, 2 * n, 2):\n        ans[i] = new[i // 2]\n    for i in ans:\n        if i > 2 * n:\n            chk = 1\n            break\n    if chk:\n        print(-1)\n    else:\n        sss = ''\n        for i in ans:\n            sss += str(i) + ' '\n        print(sss)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [i for i in range(1, 2 * n + 1)]\n    m = [int(i) for i in input().split()]\n    l = []\n    for e in m:\n        k = e\n        l.append(k)\n        while True:\n            e = e + 1\n            if e not in m and e not in l:\n                l.append(e)\n                break\n    q = l.copy()\n    q.sort()\n    if q == a:\n        print(*l)\n    else:\n        print(-1)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = [0] * (2 * n + 1)\n    ans = [0] * (2 * n)\n    for s in a:\n        k[s] = 1\n    for r in range(n):\n        ans[2 * r] = a[r]\n        ss = a[r]\n        while ss <= 2 * n and k[ss] == 1:\n            ss += 1\n        if ss == 2 * n + 1:\n            print(-1)\n            break\n        else:\n            ans[2 * r + 1] = ss\n            k[ss] = 1\n    else:\n        print(' '.join(map(str, ans)))", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = []\n    i = 0\n    t = 0\n    while len(a) != 2 * n:\n        if t == 0:\n            r = arr[i]\n            a.append(arr[i])\n        if r + 1 not in arr and r + 1 not in a:\n            a.append(r + 1)\n            i += 1\n            t = 0\n        else:\n            r += 1\n            t = 1\n    b = []\n    for i in a:\n        b.append(i)\n    c = []\n    b.sort()\n    for i in range(2 * n):\n        c.append(i + 1)\n    if b != c:\n        print(-1)\n    else:\n        print(*a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    if 2 * n in b:\n        print(-1)\n        continue\n    arr = [0 for i in range(2 * n)]\n    for i in b:\n        arr[i - 1] = 1\n    res = []\n    for i in b:\n        res.append(i)\n        k = i\n        while k < 2 * n:\n            if arr[k] == 0:\n                res.append(k + 1)\n                arr[k] = 1\n                break\n            k += 1\n    if len(res) < 2 * n:\n        print(-1)\n    else:\n        for i in res:\n            print(i, end=' ')\n        print()", "def solve(n, l):\n    li = [0 for i in range(2 * n)]\n    j = 0\n    i = 0\n    while j < n:\n        li[i] = l[j]\n        j += 1\n        i += 2\n    d = {}\n    for k in l:\n        d[k] = True\n    k = 1\n    while k < 2 * n:\n        val = li[k - 1] + 1\n        while d.get(val) and val <= 2 * n:\n            val += 1\n        if val > 2 * n:\n            return -1\n        d[val] = True\n        li[k] = val\n        k += 2\n    return ' '.join(map(str, li))\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(solve(n, l))", "for __ in range(int(input())):\n    n = int(input())\n    b = [-1] * (2 * n)\n    a = [int(x) for x in input().split()]\n    m1 = {}\n    for i in range(n):\n        m1[a[i]] = 1\n        b[2 * i] = a[i]\n    for i in range(1, 2 * n, 2):\n        k = a[i // 2]\n        while k in m1:\n            k += 1\n        b[i] = k\n        m1[k] = 1\n    f = 0\n    for x in b:\n        if x > 2 * n:\n            f = 1\n            break\n    if f == 1:\n        print(-1)\n    else:\n        for x in b:\n            print(x, end=' ')\n        print()", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = []\n    for i in b:\n        ans.append(i)\n        t = i + 1\n        while t in b or t in ans:\n            t += 1\n        ans.append(t)\n    if max(ans) == 2 * n:\n        print(*ans)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    b = [int(s) for s in input().split()]\n    vmax = max(b)\n    vmin = min(b)\n    a = []\n    for i in range(0, n):\n        a.append(b[i])\n        k = b[i]\n        while k in b or k in a:\n            k += 1\n        if k > 2 * n:\n            print(-1)\n            break\n        a.append(k)\n    else:\n        print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ll = []\n    ans = 0\n    for i in range(n):\n        k = l[i] + 1\n        while k in l or k in ll:\n            k += 1\n        if k > 2 * n:\n            ans = -1\n            break\n        ll.append(k)\n    if ans == 0:\n        for i in range(n):\n            print(l[i], ll[i], end=' ')\n        print()\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = []\n    for i in b:\n        ans.append(i)\n        t = i + 1\n        while t in b or t in ans:\n            t += 1\n        ans.append(t)\n    if max(ans) == 2 * n:\n        print(*ans)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = min(l)\n    b = max(l)\n    if a != 1 or b == 2 * n:\n        print(-1)\n    else:\n        B = []\n        d = dict()\n        for i in range(n):\n            d.setdefault(l[i], 1)\n        for i in range(1, 2 * n + 1):\n            d.setdefault(i, 0)\n            if d[i] == 0:\n                B.append(i)\n        B.sort()\n        ans = []\n        i = 0\n        while i < n:\n            ans.append(l[i])\n            for j in range(len(B)):\n                if B[j] > l[i]:\n                    ans.append(B[j])\n                    B.pop(j)\n                    break\n            i += 1\n        if len(ans) < 2 * n:\n            print(-1)\n            continue\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    if 2 * n in b:\n        print(-1)\n        continue\n    arr = [0 for i in range(2 * n)]\n    for i in b:\n        arr[i - 1] = 1\n    res = []\n    for i in b:\n        res.append(i)\n        k = i\n        while k < 2 * n:\n            if arr[k] == 0:\n                res.append(k + 1)\n                arr[k] = 1\n                break\n            k += 1\n    if len(res) < 2 * n:\n        print(-1)\n    else:\n        for i in res:\n            print(i, end=' ')\n        print()", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = []\n    for i in b:\n        ans.append(i)\n        t = i + 1\n        while t in b or t in ans:\n            t += 1\n        ans.append(t)\n    if max(ans) == 2 * n:\n        print(*ans)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    tree = list(range(2 * n + 10))\n\n    def find(st):\n        if tree[st] != st:\n            tree[st] = find(tree[st])\n        return tree[st]\n    for c in arr:\n        tree[find(c)] = find(c + 1)\n    ans = [0] * (2 * n)\n    for i in range(0, 2 * n, 2):\n        ans[i] = arr[i // 2]\n    f = True\n    for i in range(1, 2 * n, 2):\n        d = ans[i - 1]\n        ans[i] = find(d)\n        tree[ans[i]] = find(ans[i] + 1)\n        if ans[i] > 2 * n:\n            f = False\n            break\n    if f:\n        print(*ans)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    used = [0 for i in range(2 * n + 1)]\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        used[a[i]] = 1\n    ans = []\n    is_ok = True\n    for i in range(len(a)):\n        ans.append(a[i])\n        s = False\n        for j in range(a[i] + 1, len(used)):\n            if used[j] == 0:\n                ans.append(j)\n                used[j] = 1\n                s = True\n                break\n        if not s:\n            is_ok = False\n            break\n    if not is_ok:\n        print(-1)\n    else:\n        print(' '.join(map(str, ans)))", "import math\nfrom collections import *\nfrom functools import lru_cache\nimport bisect\nfrom itertools import *\nfrom heapq import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n\ndef ipl():\n    return list(map(int, input().split()))\n\ndef ipn():\n    return int(input())\n\ndef ipf():\n    return float(input())\n\ndef solve():\n    n = ipn()\n    b = ipl()\n    u = [False] * (2 * n)\n    r = []\n    for i in b:\n        u[i - 1] = True\n    for i in b:\n        f = False\n        r.append(i)\n        for x in range(i - 1, 2 * n):\n            if u[x] == False:\n                u[x] = True\n                r.append(x + 1)\n                f = True\n                break\n        if f == False:\n            print(-1)\n            return\n    for i in r:\n        print(i, end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst2 = []\n    for i in range(1, 2 * n + 1):\n        lst2.append(i)\n    if max(lst) < len(lst):\n        print(-1)\n    else:\n        for i in lst:\n            lst2.remove(i)\n        lst3 = []\n        lst4 = [False] * n\n        for i in lst:\n            for j in lst2:\n                if i < j and lst4[lst2.index(j)] == False:\n                    lst3.append(i)\n                    lst3.append(j)\n                    lst4[lst2.index(j)] = True\n                    break\n        if len(lst3) == 2 * n:\n            print(' '.join(map(str, lst3)))\n        else:\n            print(-1)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    b = [int(i) for i in input().split()]\n\n    def solve():\n\n        def minimal(v):\n            for i in perm:\n                if i > v:\n                    return perm.pop(perm.index(i))\n            return v\n        perm = list(range(1, n * 2 + 1))\n        for i in range(n * 2 - 1, -1, -1):\n            if perm[i] in b:\n                del perm[i]\n        msg = ''\n        for v in b:\n            msg += str(v) + ' '\n            iplus = minimal(v)\n            if iplus > v:\n                msg += str(iplus) + ' '\n            else:\n                return '-1'\n        return msg\n    print(solve())", "n = int(input())\nfor i in range(n):\n    lena = int(input())\n    arr = list(map(int, input().split()))\n    rem = [j for j in list(range(1, 2 * lena + 1)) if j not in arr]\n    counter = 0\n    final = []\n    for j in range(lena):\n        counter2 = 0\n        for k in range(arr[j], 2 * lena + 1):\n            if k in rem:\n                final.append(arr[j])\n                final.append(k)\n                rem.remove(k)\n                counter2 = 1\n                break\n        if counter2 == 0:\n            print(-1)\n            counter = 1\n            break\n    if counter == 0:\n        print(*final)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * (2 * n)\n    list2 = [True] * (2 * n + 1)\n    b = list(map(int, input().split()))\n    fin = True\n    for (k, j) in enumerate(b):\n        ans[2 * k] = j\n        list2[j] = False\n    for (l, j) in enumerate(b):\n        for k in range(j + 1, 2 * n + 1):\n            if list2[k] == True:\n                list2[k] = False\n                ans[2 * l + 1] = k\n                break\n        else:\n            fin = False\n            break\n    if fin == True:\n        print(' '.join(map(str, ans)))\n    else:\n        print(-1)", "from bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dif = [0] * (n - 1)\n    if 1 not in b:\n        print(-1)\n    elif max(b) >= 2 * n:\n        print(-1)\n    else:\n        ans = [0] * (2 * n)\n        base = list(range(1, n * 2 + 1))\n        for i in range(n):\n            ans[i * 2] = b[i]\n            base.remove(b[i])\n        for i in range(n):\n            index = bisect_left(base, ans[i * 2])\n            if index == len(base):\n                print(-1)\n                break\n            ans[i * 2 + 1] = base.pop(index)\n        else:\n            print(*ans)", "n = int(input())\nfor a in range(n):\n    answer = ''\n    size = int(input())\n    nums = list(map(int, input().split()))\n    taken = set(nums)\n    possible = True\n    if 1 not in taken:\n        print(-1)\n        continue\n    for num in nums:\n        answer += str(num) + ' '\n        found = False\n        for b in range(num + 1, 2 * size + 1):\n            if b not in taken:\n                found = True\n                taken.add(b)\n                answer += str(b) + ' '\n                break\n        if not found:\n            possible = False\n            break\n    if possible:\n        print(answer)\n    else:\n        print(-1)", "n = int(input())\nfor i in range(n):\n    length = int(input())\n    b = [int(i) for i in input().split()]\n    c = list()\n    final = list()\n    pool = list()\n    var = False\n    for j in range(1, 2 * length + 1):\n        if j not in b:\n            pool.append(j)\n    for j in range(len(b)):\n        var = False\n        for k in range(len(pool)):\n            if pool[k] > b[j]:\n                var = pool[k]\n                c.append(var)\n                pool.remove(var)\n                var = True\n                break\n        if not var:\n            break\n    if not var:\n        print(-1)\n        continue\n    else:\n        for j in range(len(b)):\n            final.append(b[j])\n            final.append(c[j])\n        print(' '.join(map(str, final)))", "I = input\nfor _ in [0] * int(I()):\n    n = 2 * int(I())\n    a = []\n    b = (*map(int, I().split()),)\n    c = {*range(n + 1)} - {*b}\n    i = 1\n    try:\n        for x in b:\n            y = min(c - {*range(x)})\n            c -= {y}\n            a += (x, y)\n            i += 2\n    except:\n        a = (-1,)\n    print(*a)", "I = input\nfor _ in [0] * int(I()):\n    I()\n    b = (*map(int, I().split()),)\n    s = {*range(2 * len(b) + 1)} - {*b}\n    a = []\n    try:\n        for x in b:\n            a += (x, min(s - {*range(x)}))\n            s -= {*a}\n    except:\n        a = (-1,)\n    print(*a)", "I = input\nexec(int(I()) * 'I();b=*map(int,I().split()),;s={*range(2*len(b)+1)}-{*b};a=[]\\ntry:\\n for x in b:a+=x,min(s-{*range(x)});s-={*a}\\nexcept:a=-1,\\nprint(*a);')", "I = input\nexec(int(I()) * 'I();b=*map(int,I().split()),;s={*range(2*len(b)+1)}-{*b};a=[]\\ntry:\\n for x in b:a+=x,min(s-{*range(x)});s-={*a}\\nexcept:a=-1,\\nprint(*a);')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [None] * (2 * n)\n    c = set(a)\n    d = set(range(1, 2 * n + 1))\n    for i in range(len(a)):\n        x = a[i] + 1\n        while x in c:\n            x += 1\n        else:\n            q = 2 * i\n            w = 2 * i + 1\n            b[q] = a[i]\n            b[w] = x\n            c.add(x)\n    count = 1\n    if c != d:\n        print('-1')\n    elif count == 1 or 1:\n        for i in range(len(b)):\n            print(b[i], end=' ')\n        print()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    b = list(map(int, input().split()))\n    cpy = b[:]\n    s = list(set(range(1, 2 * n + 1)) - set(b))\n    s.sort()\n    cpy.sort()\n    d = dict()\n    for (val, k) in enumerate(cpy):\n        d[k] = val\n    ans = []\n    flag = True\n    for i in b:\n        val = 0\n        for j in s:\n            if i < j:\n                val = j\n                s.remove(j)\n                break\n        if val:\n            ans.append(i)\n            ans.append(val)\n        else:\n            flag = False\n            break\n    if flag:\n        print(*ans)\n    else:\n        print('-1')", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    marked = [0] * (2 * n + 1)\n    for i in range(len(arr)):\n        marked[arr[i]] = 1\n    ans = []\n    for i in range(n):\n        ans.append(arr[i])\n        for j in range(arr[i] + 1, len(marked)):\n            if marked[j] == 0:\n                ans.append(j)\n                flag = 1\n                marked[j] = 1\n                break\n    if len(ans) == 2 * n:\n        for i in range(len(ans)):\n            print(ans[i], end=' ')\n        print()\n    else:\n        print(-1)", "for namber in range(int(input())):\n    tmp = input()\n    data = list(map(int, input().split()))\n    sortdat = sorted(data)\n    if sortdat[0] == 1:\n        maxlen = 2\n        for i in range(1, len(data)):\n            if sortdat[i] - sortdat[i - 1] > maxlen:\n                print(-1)\n                break\n            elif sortdat[i] - sortdat[i - 1] == maxlen:\n                maxlen = 2\n            else:\n                maxlen += 2 - sortdat[i] + sortdat[i - 1]\n        else:\n            out = [False] * (len(data) * 2)\n            for j in data:\n                out[j - 1] = True\n            prn = ''\n            for j in data:\n                prn += str(j) + ' '\n                tmp = j\n                while out[tmp]:\n                    tmp += 1\n                prn += str(tmp + 1) + ' '\n                out[tmp] = True\n            print(prn)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    ar1 = list(map(int, input().split()))\n    ar2 = []\n    kek = set()\n    for i in range(1, 2 * n + 1):\n        if i not in ar1:\n            kek.add(i)\n    ans = []\n    flag = 0\n    for i in range(n):\n        ans.append(ar1[i])\n        num = 2 * n + 1\n        for num in range(ar1[i] + 1, 2 * n + 1):\n            if num in kek:\n                break\n        if num < ar1[i] or num not in kek:\n            flag = 1\n            break\n        ans.append(num)\n        kek.discard(num)\n    if flag == 1:\n        print(-1)\n    else:\n        print(*ans)", "def solve(N, B):\n    A = [0] * (2 * N)\n    check = [False] * (2 * N)\n    flag = True\n    for i in range(N):\n        A[i * 2] = B[i]\n        check[B[i] - 1] = True\n    for i in range(N):\n        tmp = A[i * 2]\n        for j in range(tmp, 2 * N):\n            if not check[j]:\n                A[i * 2 + 1] = j + 1\n                check[j] = True\n                break\n    for i in range(N):\n        if A[2 * i] > A[2 * i + 1]:\n            flag = False\n    if flag:\n        print(' '.join(map(str, A)))\n    else:\n        print(-1)\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        B = list(map(int, input().split()))\n        solve(N, B)\nmain()", "def solve(m, b):\n    d = dict()\n    y = dict()\n    for i in range(m):\n        d[b[i]] = 0\n    for k in d.keys():\n        x = k + 1\n        while x in d.keys() or x in y.keys():\n            x += 1\n        if x > 2 * m:\n            return -1\n        d[k] = x\n        y[x] = k\n    for i in range(m):\n        print(b[i], d[b[i]], end=' ')\n    print()\n    return 1\nfor _ in range(int(input())):\n    m = int(input())\n    b = list(map(int, input().split()))\n    if solve(m, b) == -1:\n        print(-1)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\nt = ii()\nwhile t:\n    t -= 1\n    n = ii()\n    a = li()\n    b = a[:]\n    b.sort()\n    a1 = []\n    l = 0\n    for i in range(1, 2 * n + 1):\n        if l < len(b) and i == b[l]:\n            l += 1\n        else:\n            a1.append(i)\n    f = 0\n    m = {}\n    for i in range(n):\n        if b[i] > a1[i]:\n            f = 1\n        m[b[i]] = a1[i]\n    if f:\n        print('-1')\n    else:\n        for i in a:\n            print(i, end=' ')\n            for j in range(n):\n                if a1[j] > i:\n                    print(a1[j], end=' ')\n                    a1[j] = 0\n                    break\n        print()", "Q = int(input())\nfor _ in range(Q):\n    n = int(input())\n    b = list(map(int, input().split()))\n    s = {*range(2 * n + 1)} - {*b}\n    a = []\n    try:\n        for i in b:\n            minn = min(s - {*range(i)})\n            s -= {minn}\n            a += (i, minn)\n    except:\n        a = (-1,)\n    print(*a)", "import sys\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep='\\n')\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline()[:-1]\n\ndef solve(n, bb):\n    res = []\n    used = [False] * (2 * n + 1)\n    for b in bb:\n        used[b] = True\n    for b in bb:\n        for c in range(b + 1, 2 * n + 1):\n            if not used[c]:\n                res += [b, c]\n                used[c] = True\n                break\n        else:\n            return [-1]\n    return res\n\ndef main():\n    t = II()\n    for _ in range(t):\n        n = II()\n        bb = LI()\n        ans = solve(n, bb)\n        print(*ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    s = {*range(2 * n + 1)} - {*lst}\n    a = []\n    try:\n        for i in lst:\n            minn = min(s - {*range(i)})\n            s -= {minn}\n            a += (i, minn)\n    except:\n        a = (-1,)\n    print(*a)", "def solve(num, n):\n    res = [None] * (2 * n)\n    for (i, x) in enumerate(num):\n        res[i * 2] = x\n    used = set(num)\n    for i in range(len(num)):\n        for x in range(num[i] + 1, 2 * n + 1):\n            if x not in used:\n                used.add(x)\n                res[2 * i + 1] = x\n                break\n    return ' '.join([str(x) for x in res]) if None not in res else -1\nn = int(input())\nfor _ in range(n):\n    l = int(input())\n    num = list(map(int, input().split()))\n    print(solve(num, l))", "tests = int(input())\nfor _ in range(tests):\n    size = int(input())\n    full = set([i for i in range(1, 2 * size + 1)])\n    restore = list(map(int, input().split()))\n    check = sorted(full - set(restore))\n    capture = []\n    for res in restore:\n        found = False\n        for ch in check:\n            if ch > res:\n                capture.append(str(res))\n                capture.append(str(ch))\n                check.remove(ch)\n                found = True\n                break\n        if not found:\n            print(-1)\n            break\n    if len(capture) == 2 * size:\n        print(' '.join(capture))", "def is_in_array(value, array):\n    l = 0\n    r = len(array) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if array[mid] == value:\n            return True\n        elif array[mid] > value:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    values = [int(i) for i in input().split()]\n    sorted_values = sorted(values)\n    taken = [False] * (2 * n + 1)\n    for x in values:\n        taken[x] = True\n    ans = [None] * 2 * n\n    for i in range(n):\n        ans[2 * i] = values[i]\n        for j in range(values[i] + 1, 2 * n + 1):\n            if not taken[j]:\n                ans[2 * i + 1] = j\n                taken[j] = True\n                break\n        else:\n            print(-1)\n            break\n    else:\n        print(' '.join(map(str, ans)))", "from bisect import bisect_left\n\ndef main():\n    for _ in range(int(input())):\n        (n, res) = (int(input()), [])\n        l = list(map(int, input().split()))\n        r = sorted(set(range(1, n * 2 + 1)) - set(l))\n        try:\n            for a in l:\n                res += (a, r.pop(bisect_left(r, a + 1)))\n            print(*res)\n        except IndexError:\n            print(-1)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    B = [int(i) for i in input().split()]\n    B_set = set(B)\n    check = True\n    Ans = []\n    Used = [True] * (2 * n)\n    for i in range(2 * n):\n        if i + 1 in B_set:\n            Used[i] = False\n    for b in B:\n        Ans.append(b)\n        for i in range(b, 2 * n):\n            if Used[i]:\n                Ans.append(i + 1)\n                Used[i] = False\n                break\n        else:\n            check = False\n    if check:\n        print(*Ans)\n    else:\n        print(-1)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = []\n    b = list(map(int, input().split()))\n    if max(b) >= 2 * n:\n        print('-1')\n    else:\n        for i in range(2 * n):\n            if i % 2 == 0:\n                m = b[i // 2]\n                a.append(m)\n            else:\n                a.append(0)\n        c = 1\n        z = 0\n        for i in range(0, 2 * n):\n            temp = 0\n            if a[i] == 0:\n                s = a[i - 1] + 1\n                if s not in a:\n                    a[i] = s\n                else:\n                    for z in range(s, 2 * n + 1):\n                        if z not in a:\n                            a[i] = z\n                            break\n        if 0 in a:\n            print('-1')\n        else:\n            for i in range(2 * n):\n                print(a[i], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    c = [0] * (2 * n)\n    d = []\n    for i in range(0, 2 * n, 2):\n        c[i] = b[i // 2]\n    for j in range(1, 2 * n + 1):\n        if j not in c:\n            d.append(j)\n    for i in range(n):\n        for j in range(0, 2 * n, 2):\n            if c[j + 1] == 0:\n                if d[i] > c[j]:\n                    c[j + 1] = d[i]\n                    break\n    if 0 in c:\n        print('-1')\n    else:\n        print(*c)", "t = int(input())\nelt = []\nfor i in range(t):\n    n = int(input())\n    l = []\n    c = []\n    chaine = input()\n    el = chaine.split(' ')\n    for e in el:\n        l.append(int(e))\n        c.append(int(e))\n    elt.append((n, c, l))\nfor (n, c, l) in elt:\n    for k in range(2 * n):\n        m = 0\n        if k + 1 not in l:\n            g = 0\n            for p in c:\n                if k + 1 > p:\n                    l.insert(l.index(p) + 1, k + 1)\n                    c.remove(p)\n                    g = 1\n                    break\n            if g == 0:\n                m = -1\n                print(-1)\n                break\n    if m == 0:\n        for g in l:\n            print(g, end=' ')\n        print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * 1111\n    for c in b:\n        a[c] = 1\n    res = []\n    for x in b:\n        flag = False\n        for j in range(x + 1, 2 * n + 1):\n            if a[j] == 0:\n                flag = True\n                a[j] = 2\n                res.append(x)\n                res.append(j)\n                break\n        if not flag:\n            res = [-1]\n            break\n    print(' '.join([str(c) for c in res]))", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [-1] * 2 * n\n    for x in range(1, 2 * n + 1):\n        if x in b:\n            i = 2 * b.index(x)\n            a[i] = x\n        else:\n            i = -1\n            for j in range(0, 2 * n, 2):\n                if a[j] != -1 and a[j] < x and (a[j + 1] == -1):\n                    i = j\n                    break\n            if i != -1:\n                a[i + 1] = x\n    if any(map((-1).__eq__, a)):\n        print(-1)\n    else:\n        print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append(b[i])\n        k = b[i]\n        while k in a or k in b:\n            k += 1\n        if k > 2 * n:\n            print(-1)\n            break\n        a.append(k)\n    else:\n        print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append(b[i])\n        k = b[i]\n        while k in a or k in b:\n            k += 1\n        if k > 2 * n:\n            print(-1)\n            break\n        a.append(k)\n    else:\n        print(*a)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\ntestcount = 0\nwhile testcount < tests:\n    n = inp()\n    b = inlt()\n    if 1 not in b or 2 * n in b:\n        print(-1)\n    else:\n        arr = []\n        for elem in b:\n            i = 1\n            while i < 4 * n:\n                if elem + i not in b and elem + i not in arr:\n                    arr.append(elem + i)\n                    i += 4 * n\n                else:\n                    i += 1\n        string = ''\n        i = 0\n        while i < n:\n            string += str(b[i]) + ' ' + str(arr[i]) + ' '\n            i += 1\n        if max(max(b), max(arr)) > 2 * n:\n            print(-1)\n        else:\n            print(string[:len(string) - 1])\n    testcount += 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [*range(1, 2 * n + 1)]\n    b = [i for i in a + l if i not in a or i not in l]\n    b.sort()\n    ans = []\n    used = []\n    f = 0\n    for i in l:\n        for j in b:\n            if j > i and j not in used:\n                used.append(j)\n                ans.append(i)\n                ans.append(j)\n                break\n    if len(ans) != 2 * n:\n        print(-1)\n    else:\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = []\n    for i in range(1, 2 * n + 1):\n        if i in l:\n            pass\n        else:\n            r.append(i)\n    i = 0\n    k = []\n    while len(r) > 0 or i < n:\n        for j in range(len(r)):\n            if l[i] < r[j]:\n                k.append(r[j])\n                break\n        r.remove(r[j])\n        i = i + 1\n    if len(k) == n:\n        for i in range(n):\n            print(l[i], k[i], end=' ')\n        print()\n    else:\n        print('-1')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    B = list(map(int, input().split()))\n    cands = [True] * (2 * n)\n    for b in B:\n        cands[b - 1] = False\n    ret = []\n    for b in B:\n        ret.append(b)\n        for i in range(2 * n):\n            if b < i + 1 and cands[i]:\n                ret.append(i + 1)\n                cands[i] = False\n                break\n        else:\n            ret = [-1]\n            break\n    print(*ret)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if 2 * n in l:\n        print(-1)\n    else:\n        t = []\n        x = [0] * (2 * n + 1)\n        f = 0\n        for i in l:\n            x[i] = 1\n        for i in l:\n            if 0 not in x[i:]:\n                f = 1\n                break\n            else:\n                p = x[i:].index(0)\n                t.extend([i, p + i])\n                x[p + i] = 1\n        if f == 1:\n            print(-1)\n        else:\n            for i in t:\n                print(i, end=' ')\n            print()", "for nt in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    d = set(b)\n    ansflag = 0\n    ans = []\n    d1 = {}\n    for i in range(n):\n        ans.append(b[i])\n        k = 1\n        flag = 0\n        while True:\n            if b[i] + k > 2 * n:\n                flag = 1\n                break\n            if b[i] + k not in d and b[i] + k not in d1:\n                ans.append(b[i] + k)\n                d1[b[i] + k] = 1\n                break\n            else:\n                k += 1\n        if flag == 1:\n            print(-1)\n            ansflag = 1\n            break\n    if ansflag != 1:\n        print(*ans)", "def solve(n, b):\n    if 1 not in b or 2 * n in b:\n        return [-1]\n    else:\n        s = set(b)\n        arr = []\n        for i in range(n):\n            j = b[i] + 1\n            while True:\n                if j not in s and j <= 2 * n:\n                    arr.append(j)\n                    s.add(j)\n                    break\n                elif j > 2 * n:\n                    return [-1]\n                j += 1\n        return [str(b[x]) + ' ' + str(arr[x]) for x in range(n)]\nfor _ in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    print(*solve(n, b))", "from sys import stdin\nimport math\nfrom bisect import bisect_right\n\ndef inp():\n    return stdin.readline().strip()\n\ndef binSearch(a, d):\n    res = bisect_right(a, d)\n    if res >= len(a):\n        return -1\n    else:\n        return a[res]\nt = int(inp())\nfor _ in range(t):\n    n = int(inp())\n    b = [int(x) for x in inp().split()]\n    ar = [int(x + 1) for x in range(2 * n) if x + 1 not in b]\n    ans = []\n    for i in b:\n        c = binSearch(ar, i)\n        if c == -1:\n            print(-1)\n            break\n        else:\n            ar.remove(c)\n            ans.append(min(i, c))\n            ans.append(max(i, c))\n    else:\n        print(*ans)", "x = int(input())\nfor i in range(x):\n    a = int(input())\n    l = list(map(int, input().split()))\n    i = 0\n    j = 1\n    while i < len(l):\n        while 1:\n            if l[i] + j not in l:\n                l.insert(i + 1, l[i] + j)\n                j = 1\n                i += 1\n                break\n            else:\n                j += 1\n        i += 1\n    if max(l) * (max(l) + 1) // 2 != sum(l):\n        print(-1)\n    else:\n        print(*l)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    d = 0\n    for i in range(1, 2 * n + 1):\n        if i not in a:\n            b.append(i)\n    b.sort()\n    c = []\n    i = 0\n    j = 0\n    while len(b) > 0:\n        if b[-1] < a[i]:\n            d = 1\n            break\n        elif b[j] > a[i]:\n            c.append(a[i])\n            c.append(b[j])\n            a.remove(a[i])\n            b.remove(b[j])\n            j = 0\n        else:\n            j += 1\n        if j == len(b):\n            break\n    if d == 1:\n        print(-1)\n    else:\n        print(*c)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    p = list(range(1, 2 * n + 1))\n    inb = set(b)\n    a = {}\n    for (i, v) in enumerate(b):\n        if v == 2 * n:\n            print(-1)\n            break\n        c = [z for z in p[p.index(v) + 1:] if z not in inb]\n        if len(c) == 0:\n            print(-1)\n            break\n        i += 1\n        a[2 * i - 1] = v\n        a[2 * i] = c[0]\n        p.remove(v)\n        p.remove(c[0])\n    else:\n        string = ''\n        for i in range(1, 2 * n + 1):\n            string += str(a[i]) + ' '\n        print(string)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        x.append(a[i])\n        k = a[i] + 1\n        q = True\n        while q == True:\n            if k in a or k in x:\n                k = k + 1\n            else:\n                q = False\n                break\n        x.append(k)\n    if max(x) == 2 * n:\n        for i in range(len(x)):\n            print(x[i], end=' ')\n        print(' ')\n    else:\n        print(-1)", "import sys\nimport bisect\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x: print('\\n'.join(map(str, x)))\nfinalans = []\nt = ini()\nfor _ in range(t):\n    n = ini()\n    b = inl()\n    a = [i for i in range(1, n * 2 + 1) if i not in b]\n    out = True\n    j = 0\n    for (index, number) in enumerate(sorted(b)):\n        if number > a[index]:\n            out = False\n            finalans.append([-1])\n            break\n    if not out:\n        continue\n    ans = []\n    for i in b:\n        x = bisect.bisect_right(a, i)\n        ans.append(i)\n        ans.append(a[x])\n        a.pop(x)\n    finalans.append(ans)\nfor i in finalans:\n    print(*i)", "import sys\nimport bisect\ninput = sys.stdin.readline\nins = lambda : input().rstrip()\nini = lambda : int(input().rstrip())\ninm = lambda : map(int, input().rstrip().split())\ninl = lambda : list(map(int, input().split()))\nout = lambda x: print('\\n'.join(map(str, x)))\nt = ini()\nfor _ in range(t):\n    n = ini()\n    b = inl()\n    a = [i for i in range(1, n * 2 + 1) if i not in b]\n    out = True\n    for (index, number) in enumerate(sorted(b)):\n        if number > a[index]:\n            out = False\n            print(-1)\n            break\n    if not out:\n        continue\n    ans = []\n    for i in b:\n        x = bisect.bisect_right(a, i)\n        ans.append(i)\n        ans.append(a[x])\n        a.pop(x)\n    print(*ans)", "for T in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    Ans = []\n    Exist = [False] * (2 * n + 100)\n    Bad = False\n    for i in b:\n        Exist[i] = True\n    for i in range(n):\n        Ans.append(b[i])\n        Number = b[i] + 1\n        while Exist[Number] == True and Number < 2 * n:\n            Number += 1\n        if Number <= 2 * n and Exist[Number] == False:\n            Ans.append(Number)\n            Exist[Number] = True\n        else:\n            Bad = True\n            break\n    if Bad:\n        print(-1)\n    else:\n        print(*Ans)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = []\n    for i in b:\n        ans.append(i)\n        t = i + 1\n        while t in b or t in ans:\n            t += 1\n        ans.append(t)\n    if max(ans) == 2 * n:\n        print(*ans)\n    else:\n        print('-1')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    tst = list(map(int, input().split()))\n    b = [0]\n    for i in tst:\n        b.append(i)\n    a = [0] * (2 * n + 1)\n    used = [0] * (2 * n + 1)\n    khaise = 0\n    for i in range(1, n + 1):\n        a[2 * (i - 1) + 1] = b[i]\n        if used[b[i]]:\n            khaise = 1\n        used[b[i]] = 1\n    for i in range(2, 2 * n + 1, 2):\n        for j in range(a[i - 1], 2 * n + 1, 1):\n            if 1 - used[j]:\n                break\n        if j > 2 * n:\n            khaise = 1\n        a[i] = j\n        used[j] = 1\n    for i in range(1, 2 * n + 1):\n        if 1 - used[i]:\n            khaise = 1\n    if khaise:\n        print(-1)\n    else:\n        print(*a[1:])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr2 = []\n    for i in arr:\n        arr2.append(i)\n        t = i + 1\n        while t in arr or t in arr2:\n            t += 1\n        arr2.append(t)\n    if max(arr2) == 2 * n:\n        print(*arr2)\n    else:\n        print('-1')", "I = input\nexec(int(I()) * 'I();b=*map(int,I().split()),;s={*range(2*len(b)+1)}-{*b};a=[]\\ntry:\\n for x in b:a+=x,min(s-{*range(x)});s-={*a}\\nexcept:a=-1,\\nprint(*a);')", "def solve():\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(b[i])\n        t = b[i] + 1\n        while True:\n            if t in a or t in b:\n                t = t + 1\n            else:\n                a.append(t)\n                break\n    if len(a) == max(a):\n        print(*a)\n    else:\n        print(-1)\nfor testis in range(int(input())):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    visited = [0 for i in range(2 * n)]\n    res = []\n    for i in l:\n        visited[i - 1] = 1\n    for i in l:\n        temp = i\n        while temp < 2 * n and visited[temp]:\n            temp += 1\n        if temp >= 2 * n:\n            res = [-1]\n            break\n        visited[temp] = 1\n        res.append(i)\n        res.append(temp + 1)\n    print(*res)", "def find(st, num):\n    mn = -1\n    for i in st:\n        if mn == -1:\n            if i > num:\n                mn = i\n        elif num < i < mn:\n            mn = i\n    return mn\n\ndef main():\n    n = int(input())\n    st = set()\n    for i in range(1, n * 2 + 1):\n        st.add(i)\n    lst = list(map(int, input().split()))\n    for i in lst:\n        if not i in st:\n            break\n        st.remove(i)\n    line = ''\n    for i in lst:\n        elem = find(st, i)\n        if elem == -1:\n            print(-1)\n            return\n        line += str(i) + ' ' + str(elem) + ' '\n        st.remove(elem)\n    print(line)\nt = int(input())\nfor i in range(t):\n    main()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    l = [i + 1 for i in range(2 * n)]\n    q = sorted(b)\n    ans = True\n    ansList = []\n    count = 0\n    if q[0] != 1:\n        print(-1)\n        continue\n    for i in range(1, 2 * n - 1):\n        if i not in q and i + 1 not in q:\n            if count == 0:\n                ans = False\n                break\n            else:\n                count -= 1\n        if i in q and i + 1 in q:\n            count += 1\n    if ans == False:\n        print(-1)\n    else:\n        for i in b:\n            ansList.append(i)\n            i += 1\n            while i < 2 * n + 1:\n                if i not in ansList and i not in q:\n                    ansList.append(i)\n                    break\n                i += 1\n        print(*ansList)", "T = int(input())\nfor _ in range(T):\n    a = int(input())\n    A = list(map(int, input().split()))\n    DP = [0 for i in range(2 * a + 1)]\n    flag = 0\n    for i in A:\n        if i > 2 * a:\n            flag = 1\n        else:\n            DP[i] = 1\n    if flag == 1:\n        print(-1)\n        continue\n    else:\n        mv = a\n        B = []\n        for i in range(a):\n            flag = 0\n            b = A[i]\n            B.append(b)\n            for j in range(b, 2 * a + 1):\n                if DP[j] == 0:\n                    flag = 1\n                    B.append(j)\n                    DP[j] = 1\n                    break\n            if flag == 0:\n                B = [-1]\n                break\n        for i in B[:len(B) - 1]:\n            print(i, end=' ')\n        print(B[len(B) - 1])", "for _ in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    if len(set(seq)) != n or max(seq) > 2 * n - 1:\n        print(-1)\n        continue\n    myst = set(range(1, 2 * n + 1)) - set(seq)\n    myst = list(sorted(myst))\n    ans = []\n    fl = True\n    for x in seq:\n        upbnd = 0\n        while upbnd < len(myst) and myst[upbnd] < x:\n            upbnd += 1\n        if upbnd == len(myst):\n            fl = False\n            break\n        ans.append(x)\n        ans.append(myst[upbnd])\n        myst.pop(upbnd)\n    if not fl:\n        print(-1)\n    else:\n        print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    L = [int(x) for x in input().strip().split(' ')]\n    exist = set(L)\n    todo = set()\n    for i in range(1, 2 * n + 1):\n        if i not in exist:\n            todo.add(i)\n    res = []\n    flag = True\n    for x in L:\n        for e in range(x + 1, 2 * n + 1):\n            if e in todo:\n                res.append(x)\n                res.append(e)\n                todo.remove(e)\n                break\n        else:\n            flag = False\n            break\n    if not flag:\n        print(-1)\n    else:\n        for x in res:\n            print(x, end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    s = set(b)\n    ans = []\n    possible = True\n    for x in b:\n        y = x + 1\n        while y <= 2 * n:\n            if y not in s:\n                break\n            y = y + 1\n        if y > 2 * n:\n            possible = False\n            break\n        s.add(y)\n        ans.append(x)\n        ans.append(y)\n    if possible:\n        print(' '.join(map(str, ans)))\n    else:\n        print('-1')", "def res(n, l):\n    l1 = []\n    d = {}\n    for j in range(1, 2 * n + 1):\n        if j not in l:\n            l1.append(j)\n    for i in l:\n        for j in l1:\n            if j > i:\n                d[i] = j\n                l1.remove(j)\n                break\n    if len(l1) != 0:\n        return False\n    else:\n        return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    x = res(n, l)\n    if x == False:\n        print('-1')\n    else:\n        for k in l:\n            print(k, x[k], end=' ')\n        print('\\n')", "def main(n, b):\n    tab = [0] * (2 * n)\n    dispo = [True] * (2 * n + 1)\n    for i in range(n):\n        tab[2 * i] = b[i]\n        dispo[b[i]] = False\n    for i in range(n):\n        j = b[i]\n        test = True\n        while j <= 2 * n and test:\n            if not dispo[j]:\n                j += 1\n            else:\n                test = False\n                dispo[j] = False\n        tab[2 * i + 1] = j\n    test = True\n    for i in range(1, 2 * n + 1):\n        if dispo[i]:\n            test = False\n    if not test:\n        print(-1)\n    else:\n        mot = ''\n        for x in tab:\n            mot += str(x) + ' '\n        print(mot)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    main(n, b)", "t = int(input())\nfor i in range(0, t):\n    o = []\n    n = int(input())\n    l = list(map(int, input().split()))\n    e = 0\n    for j in range(0, len(l)):\n        o.append(l[j])\n        c = l[j] + 1\n        if c > 2 * n:\n            e = 1\n            break\n        else:\n            while c in l or c in o:\n                c += 1\n                if c > 2 * n:\n                    e = 1\n                    break\n        if e == 1:\n            break\n        o.append(c)\n    if e == 1:\n        print(-1)\n    else:\n        for k in range(0, len(o)):\n            print(o[k], end=' ')\n        print()", "for i in range(int(input())):\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    check = set(nums)\n    s = max(nums)\n    l = [int(i) + 1 if int(i) + 1 not in check else 0 for i in range(2 * n)]\n    l = sorted(list(set(l)))\n    l.remove(0)\n    o = ''\n    b = 0\n    for i in nums:\n        s = 0\n        while s < len(l) and l[s] < i:\n            s += 1\n        if s == len(l):\n            b = 1\n            break\n        else:\n            o += str(i) + ' ' + str(l[s]) + ' '\n            l.remove(l[s])\n    if b:\n        print(-1)\n    else:\n        print(o[:-1])", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    values = [0] * (2 * n + 2)\n    b = list(map(int, input().split()))\n    a = [0] * (2 * n + 2)\n    for i in range(n):\n        a[2 * i] = b[i]\n        values[b[i]] = 1\n    for i in range(n):\n        check = False\n        if b[i] >= 2 * n:\n            break\n        if values[b[i] + 1] == 0:\n            values[b[i] + 1] = 1\n            a[2 * i + 1] = b[i] + 1\n            check = True\n        else:\n            for p in range(b[i] + 1, 2 * n + 1):\n                if values[p] == 0:\n                    a[2 * i + 1] = p\n                    values[p] = 1\n                    check = True\n                    break\n            if check == False:\n                break\n        if check == False:\n            break\n    success = True\n    for i in range(2 * n):\n        if a[i] > 2 * n or a[i] == 0:\n            success = False\n            break\n    if success == False:\n        print(-1)\n    else:\n        for i in range(2 * n):\n            print(a[i], end=' ')\n        print()", "for t in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * (2 * n + 1)\n    res = []\n    f = True\n    for i in b:\n        a[i] = 1\n    for i in b:\n        res.append(i)\n        val = 0\n        for j in range(i, 2 * n + 1):\n            if a[j] != 1:\n                val = j\n                break\n        if val == 0:\n            f = False\n            break\n        a[val] = 1\n        res.append(val)\n    if f:\n        print(*res)\n    else:\n        print(-1)", "from bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    arr = [False] * (2 * n + 1)\n    result = [0] * (n * 2)\n    for (i, val) in enumerate(b):\n        result[i * 2] = val\n        arr[val] = True\n    arr[0] = True\n    arr = [i for (i, v) in enumerate(arr) if v == False]\n    arr = sorted(arr)\n    err = False\n    for i in range(n):\n        j = bisect_right(arr, result[i * 2])\n        if j == len(arr):\n            err = True\n            break\n        result[2 * i + 1] = arr[j]\n        arr.pop(j)\n    if err:\n        print('-1')\n    else:\n        print(' '.join(map(str, result)))", "for _ in range(int(input())):\n    n = int(input())\n    B = list(map(int, input().split()))\n    A = []\n    for i in range(n):\n        A.append(B[i])\n        for j in range(B[i] + 1, 1000):\n            if j not in A and j not in B:\n                A.append(j)\n                break\n    C = []\n    for i in range(0, 2 * n):\n        C.append(A[i])\n    C.sort()\n    ans = -1\n    for j in range(0, 2 * n):\n        if C[i] != i + 1:\n            ans = 0\n            break\n    if ans == 0:\n        print('-1')\n    else:\n        print(*A)", "I = input\nfor _ in [0] * int(I()):\n    n = 2 * int(I())\n    a = n * [0]\n    b = a[::2] = (*map(int, I().split()),)\n    c = {*range(1, n + 1)} - {*b}\n    i = 1\n    try:\n        for x in b:\n            z = a[i] = min((y for y in c if x < y))\n            c -= {z}\n            i += 2\n    except:\n        a = (-1,)\n    print(*a)", "I = input\nfor _ in [0] * int(I()):\n    n = 2 * int(I())\n    a = [0] * n\n    b = a[::2] = (*map(int, I().split()),)\n    c = {*range(1, n + 1)} - {*b}\n    i = 1\n    try:\n        for x in b:\n            y = a[i] = min(c & {*range(x, n + 1)})\n            c -= {y}\n            i += 2\n    except:\n        a = (-1,)\n    print(*a)"]