["import sys\ninput = sys.stdin.readline\n\ndef sol(arr, n):\n    l = 0\n    r = n - 1\n    for i in range(n - 1):\n        if arr[i] > 0 and arr[i + 1] > 0:\n            return 'NO'\n    while l < n and arr[l] <= 0:\n        l += 1\n    while r >= 0 and arr[r] <= 0:\n        r -= 1\n    if r < 0:\n        return 'YES'\n    res = []\n    while l <= r:\n        acc = 0\n        if arr[l] <= 0:\n            while l <= r and arr[l] <= 0:\n                acc += arr[l]\n                l += 1\n        else:\n            acc = arr[l]\n            l += 1\n        res.append(acc)\n    if len(res) <= 2:\n        return 'YES'\n    stack = [0]\n    dp = [0] * len(res)\n    for i in range(2, len(res), 2):\n        acc = res[i - 1]\n        while stack and res[stack[-1]] <= res[i]:\n            acc += res[stack[-1]]\n            if acc > 0:\n                return 'NO'\n            acc += dp[stack.pop()]\n        dp[i] = acc\n        stack.append(i)\n    stack = [len(res) - 1]\n    dp = [0] * len(res)\n    for i in range(len(res) - 3, -1, -2):\n        acc = res[i + 1]\n        while stack and res[stack[-1]] <= res[i]:\n            acc += res[stack[-1]]\n            if acc > 0:\n                return 'NO'\n            acc += dp[stack.pop()]\n        dp[i] = acc\n        stack.append(i)\n    return 'YES'\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sol(arr, n))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (ng1, ng2) = ([-1] * n, [-1] * n)\n    (st1, st2) = ([], [])\n    (ps, ss) = ([0] * n, [0] * n)\n    v1 = v2 = 0\n    for i in range(n):\n        while st1 and arr[st1[-1]] <= arr[i]:\n            ng1[st1.pop()] = i\n        st1.append(i)\n        v1 += arr[i]\n        ps[i] = v1\n        j = n - 1 - i\n        while st2 and arr[st2[-1]] <= arr[j]:\n            ng2[st2.pop()] = j\n        st2.append(j)\n        v2 += arr[j]\n        ss[j] = v2\n    for i in range(n):\n        if arr[i] <= 0:\n            continue\n        if ng1[i] > -1:\n            if ng1[i] == i + 1:\n                return 'NO'\n            v = ps[ng1[i] - 1] - ps[i]\n            if abs(v) < arr[i]:\n                return 'NO'\n        elif i != n - 1:\n            v = ps[-1] - ps[i]\n            if v > 0:\n                return 'NO'\n        if ng2[i] > -1:\n            if ng2[i] == i - 1:\n                return 'NO'\n            v = ss[ng2[i] + 1] - ss[i]\n            if abs(v) < arr[i]:\n                return 'NO'\n        elif i != 0:\n            v = ss[0] - ss[i]\n            if v > 0:\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    print(solve())", "import itertools\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [10 ** 10] + [*map(int, input().split())]\n    p = list(itertools.accumulate(a))\n    stk = [0]\n    minP1 = [0] * (n + 1)\n    minP = [2 * a[0]]\n    res = 'YES'\n    for i in range(1, n + 1):\n        minP1[i] = p[i - 1]\n        while a[stk[-1]] <= a[i]:\n            minP1[i] = min(minP1[i], minP1[stk[-1]])\n            minP.pop()\n            stk.pop()\n        stk.append(i)\n        minP.append(min(minP[-1], a[i] + minP1[i]))\n        if p[i] - minP[-1] > 0:\n            res = 'NO'\n            break\n    print(res)", "import itertools\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    b = [10 ** 10] + [*map(int, input().split())]\n    p = list(itertools.accumulate(b))\n    stk = [0]\n    minP1 = [0] * (n + 1)\n    minP = [2 * b[0]]\n    res = 'YES'\n    for i in range(1, n + 1):\n        minP1[i] = p[i - 1]\n        while b[stk[-1]] <= b[i]:\n            minP1[i] = min(minP1[i], minP1[stk[-1]])\n            minP.pop()\n            stk.pop()\n        stk.append(i)\n        minP.append(min(minP[-1], b[i] + minP1[i]))\n        if p[i] - minP[-1] > 0:\n            res = 'NO'\n            break\n    print(res)", "import itertools\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [10 ** 10] + [*map(int, input().split())]\n    p = list(itertools.accumulate(a))\n    stk = [0]\n    minP1 = [0] * (n + 1)\n    minP = [2 * a[0]]\n    res = 'YES'\n    for i in range(1, n + 1):\n        minP1[i] = p[i - 1]\n        while a[stk[-1]] <= a[i]:\n            minP1[i] = min(minP1[i], minP1[stk[-1]])\n            minP.pop()\n            stk.pop()\n        stk.append(i)\n        minP.append(min(minP[-1], a[i] + minP1[i]))\n        if p[i] - minP[-1] > 0:\n            res = 'NO'\n            break\n    print(res)", "import itertools\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [10 ** 10] + [*map(int, input().split())]\n    p = list(itertools.accumulate(a))\n    stk = [0]\n    minP1 = [0] * (n + 1)\n    minP = [2 * a[0]]\n    res = 'YES'\n    for i in range(1, n + 1):\n        minP1[i] = p[i - 1]\n        while a[stk[-1]] <= a[i]:\n            minP1[i] = min(minP1[i], minP1[stk[-1]])\n            minP.pop()\n            stk.pop()\n        stk.append(i)\n        minP.append(min(minP[-1], a[i] + minP1[i]))\n        if p[i] - minP[-1] > 0:\n            res = 'NO'\n            break\n    print(res)", "import itertools\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [10 ** 10] + [*map(int, input().split())]\n    p = list(itertools.accumulate(a))\n    stk = [0]\n    minP1 = [0] * (n + 1)\n    minP = [2 * a[0]]\n    res = 'YES'\n    for i in range(1, n + 1):\n        minP1[i] = p[i - 1]\n        while a[stk[-1]] <= a[i]:\n            minP1[i] = min(minP1[i], minP1[stk[-1]])\n            minP.pop()\n            stk.pop()\n        stk.append(i)\n        minP.append(min(minP[-1], a[i] + minP1[i]))\n        if p[i] - minP[-1] > 0:\n            res = 'NO'\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pre = [0]\n    suf = [0]\n    min_suf = [0] * n\n    min_pre = [0] * n\n    stk = []\n    flag = True\n    for i in range(n):\n        pre.append(pre[-1] + a[i])\n        temp_min = pre[i]\n        while len(stk) and a[stk[-1]] <= a[i]:\n            temp_min = min(temp_min, min_pre[stk[-1]])\n            stk.pop()\n        min_pre[i] = temp_min\n        stk.append(i)\n    stk.clear()\n    for i in range(n - 1, -1, -1):\n        suf.append(suf[-1] + a[i])\n        temp_min = suf[n - 1 - i]\n        while len(stk) and a[stk[-1]] <= a[i]:\n            temp_min = min(temp_min, min_suf[stk[-1]])\n            stk.pop()\n        min_suf[i] = temp_min\n        stk.append(i)\n    for i in range(n):\n        if suf[n - i] - min_suf[i] + pre[i + 1] - min_pre[i] - 2 * a[i] > 0:\n            print('NO')\n            flag = False\n            break\n    if flag:\n        print('YES')"]