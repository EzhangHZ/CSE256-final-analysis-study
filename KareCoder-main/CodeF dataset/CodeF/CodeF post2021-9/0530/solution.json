["for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    if (n + m - 1) % 2:\n        print('NO')\n        continue\n    dp = [0] * (m + 1)\n    for i in range(n):\n        dp[0] = int(not i)\n        for j in range(m):\n            dp[j + 1] = (dp[j] | dp[j + 1]) << (a[i][j] == -1)\n    if dp[-1] & 1 << (n + m - 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "p = int(input())\nfor _ in range(p):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        k = [[0] * m for i in range(n)]\n        k[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            k[0][j] = k[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            k[i][0] = k[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                k[i][j] = (k[i - 1][j] | k[i][j - 1]) << (a[i][j] == -1)\n        if k[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "input = __import__('sys').stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    total = 0\n    for x in a:\n        total += 1 if x == 1 else 0\n        dp.append((total, total))\n    for _ in range(1, n):\n        a = list(map(int, input().split()))\n        c = 1 if a[0] == 1 else 0\n        newdp = [(dp[0][0] + c, dp[0][1] + c)]\n        for i in range(1, m):\n            c = 1 if a[i] == 1 else 0\n            newdp.append((min(dp[i][0], newdp[i - 1][0]) + c, max(dp[i][1], newdp[i - 1][1]) + c))\n        dp = newdp\n    print('YES' if (n + m - 1) % 2 == 0 and dp[m - 1][0] <= (n + m - 1) // 2 <= dp[m - 1][1] else 'NO')\nfor _ in range(int(input())):\n    solve()", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        g = [[0] * m for i in range(n)]\n        g[0][0] = 1 << (a[0][0] == -1)\n        for j in range(1, m):\n            g[0][j] = g[0][j - 1] << (a[0][j] == -1)\n        for i in range(1, n):\n            g[i][0] = g[i - 1][0] << (a[i][0] == -1)\n            for j in range(1, m):\n                g[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n        if g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n            print('NO')\n        else:\n            print('YES')", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n    (n, m) = I()\n    inp_mat = [list(I()) for _2 in r(n)]\n    a = [[0 for _ in r(m)] for _ in r(n)]\n    if (n + m - 1) % 2 == 1:\n        p('NO')\n        continue\n    a[0][0] = 1 << (inp_mat[0][0] != 1)\n    for j in r(1, m):\n        a[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n    for i in r(1, n):\n        a[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n        for j in r(1, m):\n            a[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n    p(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    if (n + m) % 2 == 0:\n        return 'NO'\n    dp = [[-float('inf'), float('inf')] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[j][0] = arr[i][j] if i == 0 else dp[j][0] + arr[i][j]\n                dp[j][1] = arr[i][j] if i == 0 else dp[j][1] + arr[i][j]\n            else:\n                dp[j][0] = max(dp[j][0], dp[j - 1][0]) + arr[i][j]\n                dp[j][1] = min(dp[j][1], dp[j - 1][1]) + arr[i][j]\n    return 'YES' if dp[-1][1] <= 0 <= dp[-1][0] else 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    if (n + m) % 2 == 0:\n        return 'NO'\n    dp = [[-float('inf'), float('inf')] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[j][0] = arr[i][j] if i == 0 else dp[j][0] + arr[i][j]\n                dp[j][1] = arr[i][j] if i == 0 else dp[j][1] + arr[i][j]\n            else:\n                dp[j][0] = max(dp[j][0], dp[j - 1][0]) + arr[i][j]\n                dp[j][1] = min(dp[j][1], dp[j - 1][1]) + arr[i][j]\n    return 'YES' if dp[-1][1] <= 0 <= dp[-1][0] else 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def main():\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    if (n + m) % 2 == 0:\n        print('NO')\n        return\n    b = [[0] * m for _ in range(n)]\n    b[0][0] = a[0][0]\n    for i in range(1, n):\n        b[i][0] = b[i - 1][0] + a[i][0]\n    for j in range(1, m):\n        b[0][j] = b[0][j - 1] + a[0][j]\n    bmin = [i.copy() for i in b]\n    for i in range(1, n):\n        for j in range(1, m):\n            b[i][j] = a[i][j] + max(b[i - 1][j], b[i][j - 1])\n            bmin[i][j] = a[i][j] + min(bmin[i - 1][j], bmin[i][j - 1])\n    if bmin[-1][-1] <= 0 <= b[-1][-1]:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    main()", "t = int(input())\nfor _ in range(t):\n    (m, n) = list(map(int, input().split()))\n    a = []\n    for _ in range(m):\n        a.append(list(map(int, input().split())))\n    if (m + n) % 2 == 0:\n        print('NO')\n        continue\n    mn = [0] * n\n    mn[0] = a[0][0]\n    for j in range(1, n):\n        mn[j] = mn[j - 1] + a[0][j]\n    mx = mn[:]\n    for i in range(1, m):\n        mn[0] += a[i][0]\n        mx[0] += a[i][0]\n        for j in range(1, n):\n            mn[j] = min(mn[j], mn[j - 1]) + a[i][j]\n            mx[j] = max(mx[j], mx[j - 1]) + a[i][j]\n    print('NO') if mx[-1] < 0 or mn[-1] > 0 else print('YES')", "def f(arr, m, n, mx, mi):\n    mx[m][n] = mi[m][n] = arr[m][n]\n    for i in range(m - 1, -1, -1):\n        mx[i][n] = mi[i][n] = arr[i][n] + mx[i + 1][n]\n    for i in range(n - 1, -1, -1):\n        mx[m][i] = mi[m][i] = arr[m][i] + mx[m][i + 1]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            mx[i][j] = max(mx[i + 1][j], mx[i][j + 1]) + arr[i][j]\n            mi[i][j] = min(mi[i + 1][j], mi[i][j + 1]) + arr[i][j]\n    return\nt = int(input())\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    arr = []\n    ans = True\n    for i in range(m):\n        ar = list(map(int, input().split()))\n        arr.append(ar)\n    if (m + n) % 2 == 0:\n        ans = False\n    else:\n        mx = [[-1 for i in range(n)] for j in range(m)]\n        mi = [[-1 for i in range(n)] for j in range(m)]\n        f(arr, m - 1, n - 1, mx, mi)\n        a = mx[0][0]\n        b = mi[0][0]\n        if a < 0 or b > 0:\n            ans = False\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import sys\nt = int(input())\nfor _ in range(t):\n    (m, n) = list(map(int, input().split()))\n    matrix = []\n    for r in range(m):\n        matrix.append(list(map(int, input().split())))\n    if (m + n) % 2 == 0:\n        print('NO')\n        continue\n    mn = [0] * n\n    mn[0] = matrix[0][0]\n    for i in range(1, n):\n        mn[i] += mn[i - 1] + matrix[0][i]\n    mx = mn[:]\n    for r in matrix[1:]:\n        mn[0] += r[0]\n        mx[0] += r[0]\n        for (j, x) in enumerate(r[1:]):\n            mn[j + 1] = min(mn[j + 1], mn[j]) + x\n            mx[j + 1] = max(mx[j + 1], mx[j]) + x\n    print('NO') if mn[-1] > 0 or mx[-1] < 0 else print('YES')", "for _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    a = [[*map(int, input().split())] for x in [0] * n]\n    dp = [[0] * m for x in [0] * n]\n    dp[0][0] = a[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + a[i][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i - 1] + a[0][i]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[i][j]\n    maxi = dp[-1][-1]\n    dp = [[0] * m for x in [0] * n]\n    dp[0][0] = a[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + a[i][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i - 1] + a[0][i]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + a[i][j]\n    mini = dp[-1][-1]\n    print('NYOE S'[(m + n) % 2 and mini <= 0 <= maxi::2])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    if (n + m) % 2 == 0:\n        print('NO')\n    else:\n        maxi = [[0] * m for i in range(n)]\n        mini = [[0] * m for i in range(n)]\n        maxi[0][0] = mini[0][0] = a[0][0]\n        for j in range(1, m):\n            maxi[0][j] = mini[0][j] = maxi[0][j - 1] + a[0][j]\n        for i in range(1, n):\n            maxi[i][0] = mini[i][0] = maxi[i - 1][0] + a[i][0]\n        for i in range(1, n):\n            for j in range(1, m):\n                maxi[i][j] = max(maxi[i - 1][j], maxi[i][j - 1]) + a[i][j]\n                mini[i][j] = min(mini[i - 1][j], mini[i][j - 1]) + a[i][j]\n        if maxi[n - 1][m - 1] < 0 or mini[n - 1][m - 1] > 0:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for i in range(n):\n        g.append(list(map(int, input().split())))\n    dp1 = [[0] * m for j in range(n)]\n    dp2 = [[0] * m for j in range(n)]\n    c = 0\n    for i in range(n):\n        c += g[i][0]\n        dp1[i][0] = c\n        dp2[i][0] = c\n    c = 0\n    for i in range(m):\n        c += g[0][i]\n        dp2[0][i] = c\n        dp1[0][i] = c\n    for i in range(1, n):\n        for j in range(1, m):\n            dp1[i][j] = min(dp1[i - 1][j], dp1[i][j - 1]) + g[i][j]\n            dp2[i][j] = max(dp2[i - 1][j], dp2[i][j - 1]) + g[i][j]\n    if dp1[-1][-1] % 2 == 1 or dp1[-1][-1] > 0 or dp2[-1][-1] < 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input().split())))\n    if (n + m) % 2 == 0:\n        print('NO')\n        continue\n    mn = [[0] * m for _ in range(n)]\n    mx = [[0] * m for _ in range(n)]\n    mn[0][0] = mx[0][0] = grid[0][0]\n    for i in range(1, m):\n        mn[0][i] = mx[0][i] = mn[0][i - 1] + grid[0][i]\n    for i in range(1, n):\n        mn[i][0] = mx[i][0] = mn[i - 1][0] + grid[i][0]\n    for i in range(1, n):\n        for j in range(1, m):\n            mn[i][j] = min(mn[i - 1][j], mn[i][j - 1]) + grid[i][j]\n            mx[i][j] = max(mx[i - 1][j], mx[i][j - 1]) + grid[i][j]\n    if mn[n - 1][m - 1] <= 0 <= mx[n - 1][m - 1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        items = list(map(int, input().split()))\n        arr.append(items)\n    if (n + m) % 2 == 0:\n        print('NO')\n        continue\n    minmax = [[0] * m for i in range(n)]\n    minmax[0][0] = arr[0][0]\n    for i in range(1, m):\n        minmax[0][i] = minmax[0][i - 1] + arr[0][i]\n    for i in range(1, n):\n        minmax[i][0] = minmax[i - 1][0] + arr[i][0]\n    for i in range(1, n):\n        for j in range(1, m):\n            minmax[i][j] = max(minmax[i - 1][j], minmax[i][j - 1]) + arr[i][j]\n    if minmax[n - 1][m - 1] < 0:\n        print('NO')\n    else:\n        for i in range(1, n):\n            for j in range(1, m):\n                minmax[i][j] = min(minmax[i - 1][j], minmax[i][j - 1]) + arr[i][j]\n        if minmax[n - 1][m - 1] <= 0:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    if (n + m - 1) % 2 != 0:\n        print('NO')\n        continue\n    min_path = [[0 for i in range(m)] for j in range(n)]\n    max_path = [[0 for i in range(m)] for j in range(n)]\n    min_path[n - 1][m - 1] = max_path[n - 1][m - 1] = grid[n - 1][m - 1]\n    for i in range(m - 2, -1, -1):\n        min_path[n - 1][i] = max_path[n - 1][i] = min_path[n - 1][i + 1] + grid[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        min_path[i][m - 1] = max_path[i][m - 1] = min_path[i + 1][m - 1] + grid[i][m - 1]\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 2, -1, -1):\n            min_path[i][j] = min(min_path[i + 1][j], min_path[i][j + 1]) + grid[i][j]\n            max_path[i][j] = max(max_path[i + 1][j], max_path[i][j + 1]) + grid[i][j]\n    if min_path[0][0] <= 0 <= max_path[0][0]:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = [list(map(int, inp().split())) for i in range(n)]\n    if (n + m - 1) % 2 != 0:\n        print('NO')\n        return\n    b = [[0] * m for i in range(n)]\n    c = [[0] * m for i in range(n)]\n    b[0][0] = max(a[0][0], 0)\n    c[0][0] = max(a[0][0], 0)\n    d = int(1000000000.0)\n    e = -d\n    for x in range(n):\n        for y in range(m):\n            if x != 0 or y != 0:\n                z = max(a[x][y], 0)\n                if x > 0:\n                    u = b[x - 1][y] + z\n                    v = c[x - 1][y] + z\n                else:\n                    u = d\n                    v = e\n                if y > 0:\n                    u = min(u, b[x][y - 1] + z)\n                    v = max(v, c[x][y - 1] + z)\n                b[x][y] = u\n                c[x][y] = v\n    z = (n + m - 1) // 2\n    if z >= b[n - 1][m - 1] and z <= c[n - 1][m - 1]:\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    if (n + m - 1) % 2 != 0:\n        print('NO')\n        continue\n    min_path = [[0 for i in range(m)] for j in range(n)]\n    max_path = [[0 for i in range(m)] for j in range(n)]\n    min_path[n - 1][m - 1] = max_path[n - 1][m - 1] = grid[n - 1][m - 1]\n    for i in range(m - 2, -1, -1):\n        min_path[n - 1][i] = max_path[n - 1][i] = min_path[n - 1][i + 1] + grid[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        min_path[i][m - 1] = max_path[i][m - 1] = min_path[i + 1][m - 1] + grid[i][m - 1]\n    for i in range(n - 2, -1, -1):\n        for j in range(m - 2, -1, -1):\n            min_path[i][j] = min(min_path[i + 1][j], min_path[i][j + 1]) + grid[i][j]\n            max_path[i][j] = max(max_path[i + 1][j], max_path[i][j + 1]) + grid[i][j]\n    if min_path[0][0] <= 0 <= max_path[0][0]:\n        print('YES')\n    else:\n        print('NO')", "time = int(input())\nwhile time:\n    time -= 1\n    (n, m) = [int(x) for x in input().split()]\n    arr = [[] for _ in range(n)]\n    for i in range(n):\n        arr[i] = [int(x) for x in input().split()]\n    if (n + m - 1) % 2 == 1:\n        print('NO')\n        continue\n    dpmin = [[0] * m for _ in range(n)]\n    dpmax = [[0] * m for _ in range(n)]\n    dpmin[0][0] = arr[0][0]\n    dpmax[0][0] = arr[0][0]\n    for j in range(1, m):\n        dpmin[0][j] = dpmin[0][j - 1] + arr[0][j]\n        dpmax[0][j] = dpmax[0][j - 1] + arr[0][j]\n    for i in range(1, n):\n        dpmin[i][0] = dpmin[i - 1][0] + arr[i][0]\n        dpmax[i][0] = dpmax[i - 1][0] + arr[i][0]\n    for i in range(1, n):\n        for j in range(1, m):\n            dpmin[i][j] = min(dpmin[i - 1][j], dpmin[i][j - 1]) + arr[i][j]\n            dpmax[i][j] = max(dpmax[i - 1][j], dpmax[i][j - 1]) + arr[i][j]\n    if dpmin[n - 1][m - 1] <= 0 and 0 <= dpmax[n - 1][m - 1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (row, col) = map(int, input().split())\n    grid = []\n    for _ in range(row):\n        grid.append(list(map(int, input().split())))\n    min_dp = [[0] * col for _ in range(row)]\n    max_dp = [[0] * col for _ in range(row)]\n    if row + col + 1 & 1:\n        print('NO')\n        continue\n    for i in range(row):\n        for j in range(col):\n            if i == 0 and j == 0:\n                min_dp[i][j] = max_dp[i][j] = grid[i][j]\n                continue\n            if i and j:\n                min_dp[i][j] = grid[i][j] + min(min_dp[i - 1][j], min_dp[i][j - 1])\n                max_dp[i][j] = grid[i][j] + max(max_dp[i - 1][j], max_dp[i][j - 1])\n            elif i:\n                min_dp[i][j] = grid[i][j] + min_dp[i - 1][j]\n                max_dp[i][j] = grid[i][j] + max_dp[i - 1][j]\n            else:\n                min_dp[i][j] = grid[i][j] + min_dp[i][j - 1]\n                max_dp[i][j] = grid[i][j] + max_dp[i][j - 1]\n    if min_dp[-1][-1] <= 0 <= max_dp[-1][-1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        arr.append(l)\n    pl = n + m - 1\n    if pl % 2 != 0:\n        print('NO')\n        continue\n    (madp, midp) = ([[0 for j in range(m)] for i in range(n)], [[0 for j in range(m)] for i in range(n)])\n    (madp[0][0], midp[0][0]) = (arr[0][0], arr[0][0])\n    for i in range(1, n):\n        (madp[i][0], midp[i][0]) = (arr[i][0] + madp[i - 1][0], arr[i][0] + midp[i - 1][0])\n    for j in range(1, m):\n        (madp[0][j], midp[0][j]) = (arr[0][j] + madp[0][j - 1], arr[0][j] + midp[0][j - 1])\n    for i in range(1, n):\n        for j in range(1, m):\n            madp[i][j] = arr[i][j] + max(madp[i - 1][j], madp[i][j - 1])\n            midp[i][j] = arr[i][j] + min(midp[i - 1][j], midp[i][j - 1])\n    if midp[-1][-1] <= 0 <= madp[-1][-1]:\n        print('YES')\n    else:\n        print('NO')", "a = int(input())\nfor k in range(0, a):\n    (n, m) = map(int, input().split())\n    c = []\n    for i in range(0, n):\n        c.append(list(map(int, input().split())))\n    d_min = [[] for _ in range(n)]\n    d_max = [[] for _ in range(n)]\n    if (n + m - 1) % 2 == 0:\n        d_max[0].append(c[0][0])\n        d_min[0].append(c[0][0])\n        for j in range(1, m):\n            d_max[0].append(d_max[0][j - 1] + c[0][j])\n            d_min[0].append(d_min[0][j - 1] + c[0][j])\n        for j in range(1, n):\n            d_max[j].append(d_max[j - 1][0] + c[j][0])\n            d_min[j].append(d_min[j - 1][0] + c[j][0])\n        for i in range(1, n):\n            for j in range(1, m):\n                d_max[i].append(max(d_max[i - 1][j], d_max[i][j - 1]) + c[i][j])\n                d_min[i].append(min(d_min[i - 1][j], d_min[i][j - 1]) + c[i][j])\n        if d_max[n - 1][m - 1] >= 0 and d_min[n - 1][m - 1] <= 0:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for __ in range(n):\n        a.append(list(map(int, input().split())))\n    if (n + m) % 2 == 0:\n        print('NO')\n        continue\n    dp_mn = list(accumulate(a[0]))\n    for i in range(1, n):\n        for j in range(m):\n            if j > 0:\n                dp_mn[j] = min(dp_mn[j - 1], dp_mn[j])\n            dp_mn[j] += a[i][j]\n    dp_mx = list(accumulate(a[0]))\n    for i in range(1, n):\n        for j in range(m):\n            if j > 0:\n                dp_mx[j] = max(dp_mx[j - 1], dp_mx[j])\n            dp_mx[j] += a[i][j]\n    if dp_mn[-1] <= 0 and dp_mx[-1] >= 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    board = []\n    minBoard = []\n    maxBoard = []\n    for i in range(n):\n        row = list(map(int, input().split(' ')))\n        minRow = [0 for _ in range(m)]\n        maxRow = [0 for _ in range(m)]\n        board.append(row)\n        minBoard.append(minRow)\n        maxBoard.append(maxRow)\n    if (m + n) % 2 == 0:\n        print('NO')\n    else:\n        minBoard[0][0] = board[0][0]\n        maxBoard[0][0] = board[0][0]\n        for i in range(1, n):\n            minBoard[i][0] = board[i][0] + minBoard[i - 1][0]\n            maxBoard[i][0] = board[i][0] + maxBoard[i - 1][0]\n        for i in range(1, m):\n            minBoard[0][i] = board[0][i] + minBoard[0][i - 1]\n            maxBoard[0][i] = board[0][i] + maxBoard[0][i - 1]\n        for i in range(1, n):\n            for j in range(1, m):\n                minBoard[i][j] = board[i][j] + min(minBoard[i - 1][j], minBoard[i][j - 1])\n                maxBoard[i][j] = board[i][j] + max(maxBoard[i - 1][j], maxBoard[i][j - 1])\n        if minBoard[n - 1][m - 1] <= 0 <= maxBoard[n - 1][m - 1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        z = list(map(int, input().split()))\n        a.append(z)\n    mn = [[0 for i in range(m)] for j in range(n)]\n    mx = [[0 for i in range(m)] for j in range(n)]\n    mn[0][0] = mx[0][0] = a[0][0]\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and j > 0:\n                mn[i][j] = min(mn[i - 1][j], mn[i][j - 1]) + a[i][j]\n                mx[i][j] = max(mx[i - 1][j], mx[i][j - 1]) + a[i][j]\n            elif i > 0:\n                mn[i][j] = mn[i - 1][j] + a[i][j]\n                mx[i][j] = mx[i - 1][j] + a[i][j]\n            elif j > 0:\n                mn[i][j] = mn[i][j - 1] + a[i][j]\n                mx[i][j] = mx[i][j - 1] + a[i][j]\n    if (m + n) % 2 == 1 and mn[n - 1][m - 1] <= 0 and (mx[n - 1][m - 1] >= 0):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for x in range(n):\n        l.append(list(map(int, input().split())))\n    if False:\n        print('YES')\n    else:\n        dpmin = []\n        dpmax = []\n        mn = []\n        mx = []\n        for i in range(0, n):\n            for j in range(0, m):\n                mn.append(1000)\n                mx.append(-1000)\n            dpmin.append(mn)\n            dpmax.append(mx)\n            mn = []\n            mx = []\n        dpmin[0][0] = l[0][0]\n        dpmax[0][0] = l[0][0]\n        for x in range(1, m):\n            dpmin[0][x] = l[0][x] + dpmin[0][x - 1]\n            dpmax[0][x] = l[0][x] + dpmax[0][x - 1]\n        for x in range(1, n):\n            dpmin[x][0] = l[x][0] + dpmin[x - 1][0]\n            dpmax[x][0] = l[x][0] + dpmax[x - 1][0]\n        for x in range(1, n):\n            for y in range(1, m):\n                dpmin[x][y] = min(dpmin[x - 1][y], dpmin[x][y - 1]) + l[x][y]\n                dpmax[x][y] = max(dpmax[x - 1][y], dpmax[x][y - 1]) + l[x][y]\n        if dpmax[n - 1][m - 1] % 2 == 1 or dpmin[n - 1][m - 1] > 0 or dpmax[n - 1][m - 1] < 0:\n            print('NO')\n        else:\n            print('YES')", "for q in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input().split()])\n    mn = [[arr[i][j] for j in range(m)] for i in range(n)]\n    mx = [[arr[i][j] for j in range(m)] for i in range(n)]\n    for i in range(1, m):\n        mn[0][i] += mn[0][i - 1]\n        mx[0][i] += mx[0][i - 1]\n    for i in range(1, n):\n        mn[i][0] += mn[i - 1][0]\n        mx[i][0] += mx[i - 1][0]\n    for i in range(1, n):\n        for j in range(1, m):\n            mn[i][j] = min(mn[i - 1][j], mn[i][j - 1]) + arr[i][j]\n            mx[i][j] = max(mx[i - 1][j], mx[i][j - 1]) + arr[i][j]\n    if mn[n - 1][m - 1] <= 0 and mx[n - 1][m - 1] >= 0 and ((m + n - 1) % 2 == 0):\n        print('YES')\n    else:\n        print('NO')", "from os import error\nimport sys\ninput = sys.stdin.readline\nDEBUG = False\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, m) = inlt()\n    (mx, pmx) = ([0] * m, [0] * m)\n    pmx[0] = 2 ** 1002\n    for i in range(n):\n        row = inlt()\n        for j in range(0, m):\n            if j > 0:\n                if row[j] == 1:\n                    mx[j] = pmx[j] * 2 | mx[j - 1] * 2\n                else:\n                    mx[j] = pmx[j] // 2 | mx[j - 1] // 2\n            elif row[j] == 1:\n                mx[j] = pmx[j] * 2\n            else:\n                mx[j] = pmx[j] // 2\n        pmx = mx\n    if pmx[-1] & 2 ** 1002 > 0:\n        return 'YES'\n    return 'NO'\nq = inp()\nfor t in range(q):\n    ans = solve()\n    print(ans)", "n = int(input())\nfor i in range(n):\n    (ROWS, COLS) = map(int, input().split())\n    matrix = []\n    for i in range(ROWS):\n        matrix.append([int(num) for num in input().split()])\n    if (ROWS + COLS) % 2 == 0:\n        print('NO')\n    else:\n        matrix[0][0] = (matrix[0][0], matrix[0][0])\n        for col in range(1, COLS):\n            minAndMax = matrix[0][col - 1][0] + matrix[0][col]\n            matrix[0][col] = (minAndMax, minAndMax)\n        for row in range(1, ROWS):\n            minAndMax = matrix[row - 1][0][0] + matrix[row][0]\n            matrix[row][0] = (minAndMax, minAndMax)\n        for row in range(1, ROWS):\n            for col in range(1, COLS):\n                minn = min(matrix[row - 1][col][0], matrix[row][col - 1][0]) + matrix[row][col]\n                maxx = max(matrix[row - 1][col][1], matrix[row][col - 1][1]) + matrix[row][col]\n                matrix[row][col] = (minn, maxx)\n        if 0 in range(matrix[-1][-1][0], matrix[-1][-1][1] + 1):\n            print('YES')\n        else:\n            print('NO')", "def solve(mat):\n    if (len(mat) + len(mat[0]) - 1) % 2:\n        return False\n    dpmin = [[float('INF') for i in range(len(mat[0]))] for j in range(len(mat))]\n    dpmax = [[-float('INF') for i in range(len(mat[0]))] for j in range(len(mat))]\n    dpmin[0][0] = dpmax[0][0] = mat[0][0]\n    for i in range(1, len(mat)):\n        dpmin[i][0] = dpmax[i][0] = dpmin[i - 1][0] + mat[i][0]\n    for i in range(1, len(mat[0])):\n        dpmin[0][i] = dpmax[0][i] = dpmin[0][i - 1] + mat[0][i]\n    for i in range(1, len(mat)):\n        for j in range(1, len(mat[0])):\n            dpmin[i][j] = min(dpmin[i - 1][j], dpmin[i][j - 1]) + mat[i][j]\n            dpmax[i][j] = max(dpmax[i - 1][j], dpmax[i][j - 1]) + mat[i][j]\n    return dpmin[-1][-1] <= 0 <= dpmax[-1][-1]\nt = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    if solve(mat):\n        print('YES')\n    else:\n        print('NO')"]