["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    _ = input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    first = {item: n - i - 1 for (i, item) in enumerate(reversed(u))}\n    last = {item: i for (i, item) in enumerate(u)}\n    for _ in range(k):\n        (a, b) = input().split()\n        if a in first and b in last and (first[a] <= last[b]):\n            sys.stdout.write('YES\\n')\n        else:\n            sys.stdout.write('NO\\n')", "import sys\n\ndef get_int():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_lis():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_liss():\n    return sys.stdin.readline().split()\n\ndef get_ints():\n    return sys.stdin.readline().split()\n\ndef get_str():\n    return sys.stdin.readline().strip()\nfrom collections import defaultdict\nt = int(input())\nwhile t:\n    input()\n    (n, k) = get_int()\n    l = get_liss()\n    f = defaultdict(lambda : float('inf'))\n    ld = defaultdict(lambda : -1)\n    for i in range(n):\n        if l[i] not in f:\n            f[l[i]] = i\n        ld[l[i]] = i\n    for i in range(k):\n        (a, b) = get_ints()\n        if f[a] < ld[b]:\n            sys.stdout.write('YES\\n')\n        else:\n            sys.stdout.write('NO\\n')\n    t -= 1", "for t in range(int(input())):\n    s = input()\n    (n, k) = map(int, input().split())\n    stations = input().split()\n    d = {}\n    d_last = {}\n    ans = []\n    for x in range(0, n):\n        if stations[x] not in d:\n            d[stations[x]] = x\n            d_last[stations[x]] = x\n        else:\n            d_last[stations[x]] = x\n    for x in range(k):\n        (a, b) = input().split()\n        if a not in d or b not in d:\n            ans.append('NO')\n            continue\n        if int(d[a]) < int(d_last[b]):\n            ans.append('YES')\n        else:\n            ans.append('NO')\n    print('\\n'.join(ans))", "import sys\nEMPTY = 1\nout = []\nlines = [line.split() for line in sys.stdin.readlines()]\nli = 1 + EMPTY\nfor _ in range(int(lines[0][0])):\n    (n, k) = map(int, lines[li])\n    u = lines[li + 1]\n    first = dict()\n    last = dict()\n    for (i, ui) in enumerate(u):\n        if ui not in first:\n            first[ui] = i\n        last[ui] = i\n    for (a, b) in lines[li + 2:li + 2 + k]:\n        out.append('YES' if a in first and b in first and (first[a] < last[b]) else 'NO')\n    li += k + 2 + EMPTY\nsys.stdout.write('\\n'.join(out))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    input()\n    (n, k) = miis()\n    a = input().split()\n    l = dd(lambda : float('inf'))\n    r = dd(lambda : -1)\n    for i in range(n):\n        if a[i] not in l:\n            l[a[i]] = i\n        r[a[i]] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if l[a] < r[b]:\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    input()\n    (n, k) = [int(i) for i in input().split()]\n    a = {}\n    q = input().split()\n    for (i, j) in enumerate(q):\n        if j in a:\n            a[j][1] = i\n        else:\n            a[j] = [i, i]\n    for i in range(k):\n        (q, w) = input().split()\n        if q in a and w in a:\n            if a[q][0] < a[w][1]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = input().split()\n    d = dict()\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [i, i]\n        else:\n            d[a[i]][1] = i\n    for i in range(k):\n        (x, y) = input().split()\n        if x not in d or y not in d:\n            print('NO')\n            continue\n        if d[x][0] < d[y][1]:\n            print('YES')\n        else:\n            print('NO')", "from cmath import *\nfrom decimal import *\nimport sys\ninput = sys.stdin.readline\n\ndef _input():\n    return map(int, input().split())\n\ndef _list():\n    return list(map(int, input().split()))\n\ndef solves():\n    (n, m) = _input()\n    a = _list()\n    f = {}\n    for i in range(n):\n        x = a[i] ^ 69\n        if x not in f:\n            f[x] = i\n    l = {}\n    for i in range(n - 1, -1, -1):\n        x = a[i] ^ 69\n        if x not in l:\n            l[x] = i\n    for _ in range(m):\n        (x, y) = map(lambda k: int(k) ^ 69, input().split())\n        if x in f and y in l and (f[x] < l[y]):\n            print('YES')\n        else:\n            print('NO')\nt = 1\nt = int(input())\nfor _ in range(0, t):\n    input()\n    solves()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    U = list(map(str, input().split()))\n    v_to_i = dict()\n    for i in range(n):\n        u = U[i]\n        if u in v_to_i:\n            v_to_i[u][1] = i\n        else:\n            v_to_i[u] = [i, i]\n    for _ in range(k):\n        (a, b) = map(str, input().split())\n        if a in v_to_i and b in v_to_i and (v_to_i[a][0] < v_to_i[b][1]):\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    f = lambda x: x * 239017 + 17239\n    input()\n    (n, q) = map(int, input().split())\n    left = {}\n    right = {}\n    a = list(enumerate(map(int, input().split())))\n    for (i, x) in a:\n        right[f(x)] = i\n    for (i, x) in a[::-1]:\n        left[f(x)] = i\n    for iq in range(q):\n        (a, b) = map(int, input().split())\n        print('YES' if left.get(f(a), n) < right.get(f(b), -1) else 'NO')\ntn = int(input())\nfor _ in range(tn):\n    solve()", "out = []\nfor _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    g = dict()\n    for i in range(n):\n        idx = u[i]\n        if idx in g:\n            g[idx][1] = i\n        else:\n            g[idx] = [i, i]\n    for i in range(k):\n        (a, b) = input().split()\n        if not a in g or not b in g:\n            out.append('NO')\n        elif g[a][0] < g[b][1]:\n            out.append('YES')\n        else:\n            out.append('NO')\nfor i in out:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    f = lambda x: x * 239017 + 17239\n    input()\n    (n, q) = map(int, input().split())\n    left = {}\n    right = {}\n    a = list(enumerate(map(int, input().split())))\n    for (i, x) in a:\n        right[f(x)] = i\n    for (i, x) in a[::-1]:\n        left[f(x)] = i\n    for iq in range(q):\n        (a, b) = map(int, input().split())\n        print('YES' if left.get(f(a), n) < right.get(f(b), -1) else 'NO')\ntn = int(input())\nfor _ in range(tn):\n    solve()", "def sol(arr, queries):\n    first = dict()\n    last = dict()\n    for i in range(len(arr)):\n        if arr[i] not in first:\n            first[arr[i]] = i\n        last[arr[i]] = i\n    for (a, b) in queries:\n        if a not in first or b not in first:\n            print('NO')\n        elif first[a] <= last[b]:\n            print('YES')\n        else:\n            print('NO')\nx = int(input())\nfor _ in range(x):\n    input()\n    (n, k) = list(map(int, input().split()))\n    arr = input().split()\n    queries = []\n    for _ in range(k):\n        queries.append(input().split())\n    sol(arr, queries)", "import sys\n\ndef rall():\n    return [x.strip() for x in sys.stdin.readlines()]\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\nNT = int(rl())\nfor ti in range(NT):\n    _ = rl()\n    (n, k) = map(int, rl().split(' '))\n    route = list(map(int, rl().split(' ')))\n    S = set(route)\n    rloc = {p: [] for p in S}\n    for (i, p) in enumerate(route):\n        rloc[p].append(i)\n    for _ in range(k):\n        (s, e) = map(int, rl().split(' '))\n        if s in S:\n            if e in S:\n                pr('YES' if rloc[s][0] < rloc[e][-1] else 'NO')\n            else:\n                pr('NO')\n        else:\n            pr('NO')", "cases = int(input())\nfor _ in range(cases):\n    input()\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    stations = input().split(' ')\n    queries = []\n    for _ in range(k):\n        queries.append(input().split(' '))\n    station_index = {}\n    for i in range(len(stations)):\n        current_station = stations[i]\n        if current_station not in station_index:\n            station_index[current_station] = [i, i]\n        else:\n            current_value = station_index[current_station]\n            station_index[current_station] = [current_value[0], i]\n    for i in range(len(queries)):\n        (aj, bj) = queries[i]\n        if aj not in station_index or bj not in station_index:\n            print('NO')\n        elif station_index[aj][0] < station_index[bj][1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t:\n    empty = input()\n    (n, k) = [int(x) for x in input().split()]\n    routes = list(input().split())\n    routesDic = {}\n    for i in range(len(routes)):\n        if routes[i] in routesDic:\n            routesDic[routes[i]][1] = i\n        else:\n            routesDic[routes[i]] = [i, i]\n    queries = []\n    while k:\n        query = [int(x) for x in input().split()]\n        queries += query\n        k -= 1\n    for i in range(0, len(queries), 2):\n        left = str(queries[i])\n        right = str(queries[i + 1])\n        if left in routesDic and right in routesDic and (routesDic[left][0] <= routesDic[right][1]):\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    input()\n    (N, K) = map(int, input().split())\n    U = [i for i in input().split()]\n    rnk = defaultdict(lambda : [float('inf'), -1], {})\n    for (i, u) in enumerate(U):\n        rnk[u][0] = min(rnk[u][0], i)\n        rnk[u][1] = max(rnk[u][1], i)\n    for i in range(K):\n        (a, b) = input().split()\n        if rnk[a][0] < rnk[b][1]:\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    input()\n    (N, K) = map(int, input().split())\n    U = input().split()\n    if U[0] == 131072:\n        break\n    rnk = defaultdict(lambda : [float('inf'), -1], {})\n    for (i, u) in enumerate(U):\n        rnk[u][0] = min(rnk[u][0], i)\n        rnk[u][1] = max(rnk[u][1], i)\n    for i in range(K):\n        (a, b) = map(int, input().split())\n        if rnk[str(a)][0] < rnk[str(b)][1]:\n            print('YES')\n        else:\n            print('NO')", "import sys\nfrom bisect import bisect_left, bisect_right\nT = int(sys.stdin.readline())\nfor t in range(T):\n    empty = sys.stdin.readline()\n    (n, k) = map(int, sys.stdin.readline().split())\n    u = list(map(int, sys.stdin.readline().split()))\n    stations = [(station, idx) for (idx, station) in enumerate(u)]\n    stations.sort(key=lambda x: (x[0], x[1]))\n    (stations, idxes) = ([station for (station, idx) in stations], [idx for (station, idx) in stations])\n    check = set(u)\n    for _ in range(k):\n        (a, b) = map(int, sys.stdin.readline().split())\n        if a not in check or b not in check:\n            print('NO')\n            continue\n        left_a = bisect_left(stations, a)\n        right_b = bisect_right(stations, b) - 1\n        if idxes[left_a] < idxes[right_b]:\n            print('YES')\n        else:\n            print('NO')", "def res():\n    for x in range(int(input())):\n        input()\n        (n, k) = map(int, input().split())\n        a = input().split()\n        m1 = {}\n        m2 = {}\n        for (i, j) in enumerate(a):\n            if j not in m1:\n                m1[j] = i\n            m2[j] = i\n        for i in range(k):\n            (a, b) = input().split()\n            if a in m1 and b in m2 and (m1[a] < m2[b]):\n                print('YES')\n            else:\n                print('NO')\nres()", "def res():\n    for x in range(int(input())):\n        input()\n        (n, k) = map(int, input().split())\n        a = input().split()\n        m1 = {}\n        m2 = {}\n        for (i, j) in enumerate(a):\n            if j not in m1:\n                m1[j] = i\n            m2[j] = i\n        for i in range(k):\n            (a, b) = input().split()\n            if a in m1 and b in m2 and (m1[a] < m2[b]):\n                print('YES')\n            else:\n                print('NO')\nres()", "def solve(q, nodes):\n    first_index = {}\n    last_index = {}\n    for (i, n) in enumerate(nodes):\n        if n not in first_index:\n            first_index[n] = i\n        last_index[n] = i\n    for _ in range(q):\n        (start, end) = input().split()\n        if start not in first_index or end not in last_index:\n            print('NO')\n        elif first_index[start] <= last_index[end]:\n            print('YES')\n        else:\n            print('NO')\nt = int(input())\nfor _ in range(t):\n    input()\n    (n, q) = map(int, input().split())\n    nodes = input().split()\n    solve(q, nodes)", "for t in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = input().split()\n    (d1, d2) = ({}, {})\n    for (i, j) in enumerate(a):\n        if not j in d1:\n            d1[j] = i\n        d2[j] = i\n    for i in range(k):\n        (x, y) = input().split()\n        if x in d1 and y in d2 and (d1[x] < d2[y]):\n            print('YES')\n        else:\n            print('NO')", "def main():\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        input()\n        (n, k) = map(int, input().split())\n        nums = list(input().split())\n        d = {}\n        for i in range(n):\n            x = nums[i]\n            if x in d.keys():\n                d[x] = (d[x][0], i)\n            else:\n                d[x] = (i, i)\n        for _ in range(k):\n            (a, b) = input().split()\n            if a in d.keys() and b in d.keys():\n                if d[a][0] < d[b][1]:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('NO')\nmain()", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    __ = input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    f = {}\n    b = {}\n    for (i, x) in enumerate(u):\n        if x not in f:\n            f[x] = i\n        b[x] = i\n    for __ in range(k):\n        (x, y) = input().split()\n        if x in f and y in b and (b[y] > f[x]):\n            print('YES')\n        else:\n            print('NO')", "def main():\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        input()\n        (n, k) = map(int, input().split())\n        nums = list(input().split())\n        d = {}\n        for i in range(n):\n            x = nums[i]\n            if x in d.keys():\n                d[x] = (d[x][0], i)\n            else:\n                d[x] = (i, i)\n        for _ in range(k):\n            (a, b) = input().split()\n            try:\n                if d[a][0] < d[b][1]:\n                    print('YES')\n                else:\n                    print('NO')\n            except:\n                print('NO')\nmain()", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    y = 'YES'\n    no = 'NO'\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print(y)\n        else:\n            print(no)", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    y = 'YES'\n    no = 'NO'\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print(y)\n        else:\n            print(no)", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    first = {}\n    second = {}\n    for i in range(len(u)):\n        if u[i] not in first:\n            first[u[i]] = i\n        second[u[i]] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in first and b in second and (second[b] > first[a]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "nt = int(input())\nfor _ in range(nt):\n    input()\n    (n, k) = map(int, input().split())\n    (idx_first, idx_last) = ({}, {})\n    for (i, e) in enumerate(input().split()):\n        if e not in idx_first:\n            idx_first[e] = i\n        idx_last[e] = i\n    for _ in range(k):\n        (a, b) = input().split()\n        print('YES' if idx_first.get(a, n) <= idx_last.get(b, -1) else 'NO')", "tc = int(input())\nfor _ in range(tc):\n    empty = input()\n    (n, k) = map(int, input().split())\n    lis = input().split()\n    prev = {}\n    after = {}\n    for (i, j) in enumerate(lis):\n        if j not in prev:\n            prev[j] = i\n        after[j] = i\n    for _ in range(k):\n        (aj, bj) = input().split()\n        if aj in prev and bj in after and (prev[aj] < after[bj]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    __ = input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    b = {}\n    e = {}\n    for (i, x) in enumerate(u):\n        if x not in b:\n            b[x] = i\n        e[x] = i\n    for __ in range(k):\n        (x, y) = input().split()\n        if x in b and y in e and (e[y] > b[x]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    __ = input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    b = {}\n    e = {}\n    for (i, x) in enumerate(u):\n        if x not in b:\n            b[x] = i\n        e[x] = i\n    for __ in range(k):\n        (x, y) = input().split()\n        if x in b and y in e and (e[y] > b[x]):\n            print('YES')\n        else:\n            print('NO')", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    fin = open('./input.txt')\n    import sys\n    sys.stdin = fin\nexcept:\n    pass\nt = read_int()\nfor _ in range(t):\n    input()\n    (n, k) = read_ints_list()\n    first = dict()\n    last = dict()\n    for (i, u) in enumerate(input().split()):\n        if u not in first:\n            first[u] = i\n        last[u] = i\n    for _ in range(k):\n        (a, b) = input().split()\n        if a in first and b in last and (first[a] < last[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    __ = input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    b = {}\n    e = {}\n    for (i, x) in enumerate(u):\n        if x not in b:\n            b[x] = i\n        e[x] = i\n    for __ in range(k):\n        (x, y) = input().split()\n        if x in b and y in e and (e[y] > b[x]):\n            print('YES')\n        else:\n            print('NO')", "def main():\n    q = int(input())\n    while q > 0:\n        _ = input()\n        (n, t) = map(int, input().split())\n        a = input().split()\n        d = {}\n        for i in range(n):\n            if a[i] not in d:\n                d[a[i]] = [i, i]\n            else:\n                d[a[i]][-1] = i\n        while t > 0:\n            (u, v) = input().split()\n            if u in d and v in d:\n                x = d[u][0]\n                y = d[v][-1]\n                if x < y:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('NO')\n            t -= 1\n        q -= 1\nmain()", "def main():\n    q = int(input())\n    while q > 0:\n        _ = input()\n        (n, t) = map(int, input().split())\n        a = input().split()\n        d = {}\n        for i in range(len(a)):\n            if a[i] not in d:\n                d[a[i]] = [i, i]\n            else:\n                d[a[i]][-1] = i\n        while t > 0:\n            (u, v) = input().split()\n            if u in d and v in d:\n                x = d[u][0]\n                y = d[v][-1]\n                if x < y:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('NO')\n            t -= 1\n        q -= 1\nmain()", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    fin = open('./input.txt')\n    import sys\n    sys.stdin = fin\nexcept:\n    pass\nt = read_int()\nfor _ in range(t):\n    input()\n    (n, k) = read_ints_list()\n    first = dict()\n    last = dict()\n    for (i, u) in enumerate(input().split()):\n        if u not in first:\n            first[u] = i\n        last[u] = i\n    for _ in range(k):\n        (a, b) = input().split()\n        try:\n            if first[a] < last[b]:\n                print('YES')\n            else:\n                print('NO')\n        except:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "for t in range(int(input())):\n    s = input()\n    (n, k) = map(int, input().split())\n    arr = input().split()\n    dic = {}\n    for (i, j) in enumerate(arr):\n        if j in dic:\n            dic[j][1] = i\n        else:\n            dic[j] = [i, i]\n    for i in range(k):\n        (a, b) = input().split()\n        if a in dic and b in dic and (dic[a][0] <= dic[b][1]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    __ = input()\n    (n, k) = list(map(int, input().split()))\n    u = input().split()\n    b = {}\n    e = {}\n    for (i, x) in enumerate(u):\n        if x not in b:\n            b[x] = i\n        e[x] = i\n    for ___ in range(k):\n        (x, y) = input().split()\n        if y in e and x in b and (e[y] > b[x]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = list(map(int, input().split()))\n    arr = list(input().split())[:n]\n    aIndex = {}\n    bIndex = {}\n    for (i, x) in enumerate(arr[:]):\n        if x not in aIndex:\n            aIndex[x] = i\n        bIndex[x] = i\n    for j in range(k):\n        (p, q) = list(input().split())\n        if p in aIndex and q in bIndex and (aIndex[p] < bIndex[q]):\n            print('YES')\n        else:\n            print('NO')", "for x in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print('YES')\n        else:\n            print('NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    p = input()\n    (n, k) = map(int, input().split())\n    lis = input().split()\n    (one, two) = (dict(), dict())\n    for (i, j) in enumerate(lis):\n        if j not in one:\n            one[j] = i\n        two[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in one and b in two:\n            if one[a] < two[b]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, m) = map(int, input().split())\n    data = input().split()\n    first = {}\n    second = {}\n    for (i, j) in enumerate(data):\n        if j not in first:\n            first[j] = i\n        second[j] = i\n    for _ in range(m):\n        (a, b) = input().split()\n        if a in first and b in second and (first[a] < second[b]):\n            print('YES')\n        else:\n            print('NO')", "for t in range(int(input())):\n    input()\n    (m, q) = map(int, input().split())\n    s = [*input().split()]\n    k = {}\n    l = {}\n    for (i, j) in enumerate(s):\n        if j not in k:\n            k[j] = i\n        l[j] = i\n    for i in range(q):\n        (x, y) = input().split()\n        print('YES' if x in k and y in l and (k[x] < l[y]) else 'NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    first_d = {}\n    second_d = {}\n    for i in range(n):\n        if u[i] not in first_d:\n            first_d[u[i]] = i\n        second_d[u[i]] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in first_d and b in second_d and (first_d[a] < second_d[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    d = {}\n    a = {}\n    for i in range(n):\n        if u[i] not in d:\n            d[u[i]] = i\n        a[u[i]] = i\n    for i in range(k):\n        (x, y) = input().split()\n        if x in d and y in a and (a[y] > d[x]):\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    e = input()\n    (n, k) = map(int, input().split())\n    a = input().split()\n    d = dict()\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [i, i]\n        else:\n            d[a[i]][1] = i\n    for _ in range(k):\n        (ai, bi) = input().split()\n        if ai not in d or bi not in d:\n            print('NO')\n            continue\n        if d[ai][0] < d[bi][1]:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor test in range(T):\n    input()\n    (n, k) = [int(a) for a in input().split()]\n    u = input().split()\n    dict_first = {}\n    dict_last = {}\n    for (i, x) in enumerate(u):\n        if x not in dict_first:\n            dict_first[x] = i\n        dict_last[x] = i\n    for i in range(k):\n        (x, y) = input().split()\n        if x in dict_first and y in dict_last and (dict_first[x] < dict_last[y]):\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    (n, m) = list(map(int, input().split()))\n    ar = list(input().split())\n    ans1 = {}\n    ans2 = {}\n    for (i, j) in enumerate(ar[:]):\n        if j not in ans1:\n            ans1[j] = i\n        ans2[j] = i\n    for i in range(m):\n        (a, b) = list(input().split())\n        if a in ans1 and b in ans2 and (ans1[a] < ans2[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = dict()\n    for (i, j) in enumerate(input().split()):\n        if j not in u:\n            u[j] = (i, i)\n        else:\n            u[j] = (u[j][0], i)\n    for i in range(k):\n        (a, b) = input().split()\n        u1 = u.get(a, -1)\n        u2 = u.get(b, -1)\n        if u1 == -1 or u2 == -1 or u1[0] > u2[1]:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    ig = input()\n    (n, k) = map(int, input().split())\n    arr = list(input().split())\n    mi = {}\n    ma = {}\n    for (i, l) in enumerate(arr):\n        if l not in mi:\n            mi[l] = i\n        ma[l] = i\n    for o in range(k):\n        (a, b) = input().split()\n        if a in mi and b in ma and (mi[a] < ma[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    a = input().split()\n    b = {}\n    for i in range(n):\n        if a[i] in b:\n            b[a[i]][1] = i\n        else:\n            b[a[i]] = [i, i]\n    for _ in range(k):\n        (x, y) = input().split()\n        if y in b and x in b and (b[x][0] < b[y][1]):\n            print('YES')\n        else:\n            print('NO')", "import os\nimport sys\nif os.path.exists('tests'):\n    sys.stdin = open('tests', 'r')\nT = int(input())\nfor _ in range(T):\n    input()\n    (n_stations, n_queries) = [int(c) for c in input().split()]\n    stations = input().split()\n    station_to_first_i = {stations[i]: i for i in range(n_stations - 1, -1, -1)}\n    station_to_last_i = {stations[i]: i for i in range(n_stations)}\n    for _ in range(n_queries):\n        (a, b) = input().split()\n        if a not in station_to_first_i or b not in station_to_last_i:\n            print('NO')\n        elif station_to_first_i[a] < station_to_last_i[b]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    umin = dict()\n    umax = dict()\n    for (i, j) in enumerate(input().split()):\n        try:\n            umin[j]\n            umax[j] = i\n        except Exception:\n            umin[j] = i\n            umax[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        try:\n            u1 = umin[a]\n            u2 = umax[b]\n            if u1 < u2:\n                print('YES')\n            else:\n                print('NO')\n        except Exception:\n            print('NO')", "for _ in range(int(input())):\n    e = input()\n    (station_no, queries) = list(map(int, input().split()))\n    ar = list(input().split())[:station_no]\n    ans1 = {}\n    ans2 = {}\n    for (i, j) in enumerate(ar[:]):\n        if j not in ans1:\n            ans1[j] = i\n        ans2[j] = i\n    for i in range(queries):\n        (a, b) = list(input().split())\n        if a in ans1 and b in ans2 and (ans1[a] < ans2[b]):\n            print('YES')\n        else:\n            print('NO')", "from collections import defaultdict\nx = int(input())\nfor _ in range(x):\n    input()\n    (n, k) = map(int, input().split())\n    arr = input().split()\n    first = defaultdict(lambda : float('inf'))\n    last = defaultdict(lambda : -1)\n    for i in range(len(arr)):\n        if arr[i] not in first:\n            first[arr[i]] = i\n        last[arr[i]] = i\n    queries = []\n    for _ in range(k):\n        (a, b) = input().split()\n        if first[a] <= last[b]:\n            print('YES')\n        else:\n            print('NO')", "def main():\n    q = int(input())\n    while q > 0:\n        _ = input()\n        (n, t) = map(int, input().split())\n        a = input().split()\n        d = {}\n        for i in range(len(a)):\n            if a[i] not in d:\n                d[a[i]] = [i, i]\n            else:\n                d[a[i]][-1] = i\n        while t > 0:\n            (u, v) = input().split()\n            if u in d and v in d:\n                x = d[u][0]\n                y = d[v][-1]\n                if x < y:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('NO')\n            t -= 1\n        q -= 1\nmain()", "from collections import defaultdict\n\ndef test(t1, t2, map):\n    if t1 not in map or t2 not in map:\n        return 'NO'\n    arr1 = map[t1]\n    arr2 = map[t2]\n    if arr1[0] > arr2[-1]:\n        return 'NO'\n    else:\n        return 'YES'\nfor _ in range(int(input())):\n    input()\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    map = defaultdict(list)\n    terminals = input().split(' ')\n    for i in range(len(terminals)):\n        map[terminals[i]].append(i)\n    for _ in range(k):\n        (s1, s2) = input().split(' ')\n        print(test(s1, s2, map))", "for _ in range(int(input())):\n    ig = input()\n    (n, k) = map(int, input().split())\n    arr = list(input().split())\n    mi = {}\n    ma = {}\n    for (i, l) in enumerate(arr):\n        if l not in mi:\n            mi[l] = i\n        ma[l] = i\n    for o in range(k):\n        (a, b) = input().split()\n        if a in mi and b in ma and (mi[a] < ma[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    input()\n    (n, k) = input().split()\n    u = list(input().split())\n    d = {}\n    for j in range(int(n)):\n        if u[j] in d:\n            d[u[j]].append(j)\n        else:\n            d[u[j]] = [j]\n    for l in range(int(k)):\n        (a, b) = input().split()\n        if a in d and b in d and (d[a][0] < d[b][-1]):\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t > 0:\n    _ = input()\n    (n, k) = map(int, input().split())\n    Dicta = {}\n    Dictb = {}\n    for (i, u) in enumerate(input().split()):\n        if u not in Dicta:\n            Dicta[u] = i\n        Dictb[u] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a not in Dicta or b not in Dictb or Dicta[a] > Dictb[b]:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "from collections import defaultdict\nt = int(input())\nwhile t:\n    input()\n    (n, k) = map(int, input().split())\n    lst = input().split()\n    first = defaultdict(lambda : float('inf'))\n    last = defaultdict(lambda : -1)\n    for i in range(len(lst)):\n        if lst[i] not in first:\n            first[lst[i]] = i\n        last[lst[i]] = i\n    for _ in range(k):\n        (a, b) = input().split()\n        if first[a] <= last[b]:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "from collections import defaultdict\nt = int(input())\nwhile t:\n    input()\n    (n, k) = map(int, input().split())\n    l = input().split()\n    f = defaultdict(lambda : float('inf'))\n    ld = defaultdict(lambda : -1)\n    for i in range(n):\n        if l[i] not in f:\n            f[l[i]] = i\n        ld[l[i]] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if f[a] < ld[b]:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "import sys, math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        input()\n        (n, k) = map(int, input().split())\n        ls = input().split()\n        mp1 = {}\n        mp2 = {}\n        for (i, v) in enumerate(ls):\n            if v not in mp1:\n                mp1[v] = i\n            mp2[v] = i\n        for i in range(k):\n            (a, b) = input().split()\n            if a in mp1 and b in mp2 and (mp1[a] < mp2[b]):\n                print('YES')\n            else:\n                print('NO')\nmain()", "for trials in range(int(input())):\n    whatever = input()\n    (n, k) = input().split()\n    nbr = list(input().split())\n    d = {}\n    for i in range(len(nbr)):\n        if nbr[i] in d:\n            d[nbr[i]].append(i)\n        else:\n            d[nbr[i]] = [i]\n    for queries in range(int(k)):\n        (a, b) = input().split()\n        try:\n            if d[a][0] < d[b][-1]:\n                print('YES')\n            else:\n                print('NO')\n        except:\n            print('NO')", "t = int(input())\nwhile t:\n    input()\n    (n, k) = map(int, input().split())\n    ar = input().split()\n    m1 = {}\n    m2 = {}\n    y = 'YES'\n    no = 'NO'\n    for (i, j) in enumerate(ar):\n        if j not in m1:\n            m1[j] = i\n        m2[j] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in m1 and b in m2 and (m1[a] < m2[b]):\n            print(y)\n        else:\n            print(no)\n    t -= 1", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    lst = list(input().split())\n    stations_dictionary = {}\n    counter = 0\n    for s in lst:\n        if s not in stations_dictionary:\n            stations_dictionary[s] = [counter]\n        else:\n            stations_dictionary[s].append(counter)\n        counter += 1\n    for i in range(k):\n        (a, b) = input().split()\n        if stations_dictionary.get(a) is None or stations_dictionary.get(b) is None:\n            print('NO')\n        elif stations_dictionary[a][0] < stations_dictionary[b][-1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    empty = input()\n    data = input().split(' ')\n    data[0] = int(data[0])\n    data[1] = int(data[1])\n    arr = input().split(' ')\n    record = {}\n    for j in range(data[0]):\n        if arr[j] not in record:\n            record[arr[j]] = [j]\n        else:\n            record[arr[j]].append(j)\n    for k in range(data[1]):\n        route = input().split()\n        if route[0] not in record or route[1] not in record:\n            print('NO')\n        elif record[route[0]][0] < record[route[1]][-1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i1 in range(t):\n    empty_stroke = input()\n    while empty_stroke == '':\n        empty_stroke = input()\n    (n, k) = map(int, empty_stroke.split())\n    v = input().split()\n    d = {}\n    for i in range(len(v)):\n        if v[i] not in d:\n            d[v[i]] = []\n        d[v[i]].append(i)\n    for i in range(k):\n        (a, b) = input().split()\n        if a in d and b in d:\n            if d[a][0] < d[b][-1]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "from collections import defaultdict\nx = int(input())\nfor jj in range(x):\n    emp = input()\n    (n, k) = [int(i) for i in input().split(' ')]\n    dic = defaultdict(list)\n    for (i, v) in enumerate(input().split(' ')):\n        dic[v].append(i)\n    for i in range(k):\n        (a, b) = input().split(' ')\n        if a not in dic or b not in dic:\n            print('NO')\n        elif dic[a][0] < dic[b][-1]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    ig = input()\n    (n, k) = map(int, input().split())\n    arr = list(input().split())\n    mi = {}\n    ma = {}\n    for (i, l) in enumerate(arr):\n        if l not in mi:\n            mi[l] = i\n        ma[l] = i\n    for o in range(k):\n        (a, b) = input().split()\n        if a in mi and b in ma and (mi[a] < ma[b]):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    input()\n    (n, k) = map(int, input().split())\n    u = input().split()\n    front = {}\n    back = {}\n    for (i, x) in enumerate(u):\n        if x not in front:\n            front[x] = i\n        back[x] = i\n    for i in range(k):\n        (a, b) = input().split()\n        if a in front and b in back and (front[a] < back[b]):\n            print('YES')\n        else:\n            print('NO')"]