["for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "for s in [*open(0)][1:]:\n    print(2 - (s == '1 1\\n') - ('1' in s.split()))", "for s in [*open(0)][1:]:\n    print(2 - (s == '1 1\\n') - ('1' in s.split()))", "def main():\n\n    def solve(n, m):\n        if n == m == 1:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        return 2\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        ans.append(solve(n, m))\n    print('\\n'.join(map(str, ans)))\nimport sys, threading\ninput = sys.stdin.readline\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "for s in [*open(0)][1:]:\n    print(2 - (s == '1 1\\n') - ('1' in s.split()))", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "def main():\n\n    def solve(n, m):\n        if n == m == 1:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        return 2\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        ans.append(solve(n, m))\n    print('\\n'.join(map(str, ans)))\nimport sys, threading\ninput = sys.stdin.readline\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    if n == m == 1:\n        print(0)\n    elif min(n, m) == 1:\n        print(1)\n    else:\n        print(2)", "for _ in [*open(0)][1:]:\n    (a, b) = map(int, _.split())\n    print('012'[(a > 1 or b > 1) + (a > 1 and b > 1)])", "n = int(input())\nlis = [0 for _ in range(n)]\nfor i in range(n):\n    lis[i] = list(map(int, input().split()))\nfor i in range(n):\n    n = lis[i][0]\n    m = lis[i][1]\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n        continue\n    if n == 1 or m == 1:\n        print(1)\n        continue\n    print(2)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    l = L()\n    if max(l) == 1:\n        print(0)\n    elif 1 in l:\n        print(1)\n    else:\n        print(2)", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    inp = input().strip()\n    s = [int(x) for x in inp.split(' ')]\n    n = s[0]\n    m = s[1]\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)\n    t -= 1", "def main():\n\n    def solve(n, m):\n        if n == m == 1:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        return 2\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        ans.append(solve(n, m))\n    print('\\n'.join(map(str, ans)))\nimport sys, threading\ninput = sys.stdin.readline\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "from collections import Counter\nfrom math import ceil, floor, log\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nfor _ in range(int(input().strip())):\n    (n, m) = inp_multi()\n    if n == 1 and m == 1:\n        print(0)\n        continue\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "for s in [*open(0)][1:]:\n    print(2 - s.split().count('1'))", "from itertools import product\nimport itertools\nimport math\nimport sys\nimport heapq\nfrom collections import deque\nMOD = 1000000000007\n\ndef find(parent, i):\n    if parent[i] != i:\n        parent[i] = find(parent, parent[i])\n    return parent[i]\n\ndef union(parent, rank, xx, yy):\n    x = find(parent, xx)\n    y = find(parent, yy)\n    if rank[x] > rank[y]:\n        parent[y] = x\n    elif rank[y] > rank[x]:\n        parent[x] = y\n    else:\n        parent[y] = x\n        rank[x] += 1\nans = 0\nK = int(sys.stdin.readline().strip())\nx = 0\ny = 0\nfor _ in range(K):\n    (m, n) = list(map(int, sys.stdin.readline().strip().split()))\n    if m == 1 and n == 1:\n        print(0)\n    elif m == 1 or n == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nl = []\nfor i in range(t):\n    (m, n) = [int(j) for j in input().split()]\n    if m == 1 and n == 1:\n        l.append(0)\n    elif m == 1 or n == 1:\n        l.append(1)\n    else:\n        l.append(2)\nfor i in l:\n    print(i)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef inltstr():\n    return list(map(str, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef factorial(n):\n    if n == 1:\n        return n\n    elif n < 1:\n        return 'NA'\n    else:\n        return n * factorial(n - 1)\n\ndef coeffBin(k):\n    return factorial(k + 1) / (factorial(2) * factorial(k - 1))\n\ndef solve(n, m):\n    count = 0\n    if n == 1 and m == 1:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return 2\nres = []\niter = inp()\ni = 0\nwhile i < iter:\n    arr = inlt()\n    result = solve(arr[0], arr[1])\n    res.append(result)\n    i += 1\nfor r in res:\n    print(r)", "sets_num = int(input())\nanswers = []\nfor i in range(sets_num):\n    (a, b) = map(int, input().split())\n    answers.append(int(a > 1) + int(b > 1))\nfor i in answers:\n    print(i)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        (n, m) = get_ints()\n        if n == 1 and m == 1:\n            get_print_int(0)\n        else:\n            get_print_int(min(n, m, 2))\nsolve()", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport time\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split()]\n    return res\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in input().rstrip('\\n').split()]\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        (a, b) = read_list_of_ints()\n        if a == b == 1:\n            print(0)\n            continue\n        print(min(2, min(a, b)))\nmain()", "n = int(input())\nkiller = []\nfor i in range(n):\n    mylist = list(map(int, input().split()))\n    if [1, 1] == mylist:\n        killer.append(0)\n    elif 1 in mylist and [1, 1] != mylist:\n        killer.append(1)\n    else:\n        killer.append(2)\nprint(*killer, sep='\\n')", "k = int(input())\nresult = []\nfor i in range(k):\n    coor = []\n    coor = input().split()\n    if coor[0] == coor[1] and coor[0] == '1':\n        result.append(0)\n    elif coor[0] == '1' or coor[1] == '1':\n        result.append(1)\n    else:\n        result.append(2)\nfor j in result:\n    print(j)", "def main():\n    n = int(input())\n    lst = []\n    for i in range(n):\n        a = input().split()\n        if int(a[0]) == 1 and int(a[1]) == 1:\n            lst.append(0)\n        elif int(a[0]) <= 1 or int(a[1]) <= 1:\n            lst.append(1)\n        else:\n            lst.append(2)\n    for i in range(n):\n        print(lst[i])\nmain()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "cases = int(input())\nfor _ in range(cases):\n    (a, b) = map(int, input().split())\n    if a == b == 1:\n        print(0)\n    elif min(a, b) == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nout = []\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if n * m == 1:\n        out.append(0)\n    else:\n        out.append(min(2, n, m))\nfor o in out:\n    print(o)", "for _ in range(int(input())):\n    inp = input().split()\n    a = inp.count('1')\n    if a == 1:\n        print(1)\n    elif a == 2:\n        print(0)\n    else:\n        print(2)", "cases = int(input())\nans = []\nwhile cases > 0:\n    (n, m) = list(map(int, input().split()))\n    cases -= 1\n    if n == 1 and m == 1:\n        ans.append(0)\n    elif n == 1 or m == 1:\n        ans.append(1)\n    else:\n        ans.append(2)\nfor i in ans:\n    print(i)", "trails = int(input())\nanswer_list = []\nfor x in range(trails):\n    numbers = input().split(' ')\n    answer = 2\n    for s in numbers:\n        if 1 == int(s):\n            answer = 1\n    if numbers == ['1', '1']:\n        answer = 0\n    answer_list.append(answer)\nfor g in answer_list:\n    print(g)", "a = int(input())\nb = []\nfor i in range(a):\n    b.append(list(input().split()))\nfor i in range(a):\n    c = int(b[i][0])\n    d = int(b[i][1])\n    if c == 1 and d == 1:\n        print(0)\n    elif c == 1 or d == 1:\n        print(1)\n    else:\n        print(2)", "n = int(input())\nkiller = []\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    if x == 1 and y == 1:\n        killer.append(0)\n    elif y == 1 or x == 1:\n        killer.append(1)\n    else:\n        killer.append(2)\nprint(*killer, sep='\\n')", "for i in range(int(input())):\n    (m1, n1) = input().split()\n    if m1 == '1' and n1 == '1':\n        print('0')\n    elif m1 == '1' or n1 == '1':\n        print('1')\n    else:\n        print('2')", "inp1 = int(input())\nfor i in range(inp1):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    if a == 1 and b == 1:\n        print('0')\n    elif a == 1 or b == 1:\n        print('1')\n    else:\n        print('2')", "n = int(input())\nfor _ in range(n):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "n = int(input())\nfor i in range(n):\n    (a, b) = input().split()\n    if a == '1' and b == '1':\n        print(0)\n    elif a == '1' or b == '1':\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    a = input().split()\n    print(2 - a.count('1'))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b and a == 1:\n        print(0)\n    else:\n        print(min(2, min(a, b)))", "z = int(input())\nfor i in range(z):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    if a == 1 and b == 1:\n        print(0)\n    elif b == 1 or a == 1:\n        print(1)\n    else:\n        print(2)", "tc = int(input())\nfor i in range(tc):\n    t = input().split()\n    if t[0] == '1' and t[1] == '1':\n        print('0')\n    elif t[0] == '1' and t[1] != '1':\n        print('1')\n    elif t[1] == '1' and t[0] != '1':\n        print('1')\n    else:\n        print('2')", "for i in range(int(input())):\n    count = 0\n    x = input().split()\n    for i in x:\n        if i == '1':\n            count += 1\n    if count == 0:\n        print(2)\n    elif count == 1:\n        print(1)\n    elif count == 2:\n        print(0)", "for i in range(int(input())):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    if n == m == 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == 1 and b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)", "x = int(input())\nfor i in range(x):\n    m = input().split()\n    m1 = int(m[0])\n    m2 = int(m[1])\n    if m1 == 1 and m2 == 1:\n        print(0)\n    elif m1 == 1 or m2 == 1:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    if n == 1 and m == 1:\n        print(0)\n    elif min(n, m) == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _t in range(t):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ans = 0 if n == 1 and m == 1 else min(n, m, 2)\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if n * m <= 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')", "def fun(ls):\n    (a, b) = ls\n    if a == 1 and b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)\nT = int(input())\nfor i in range(T):\n    ls = list(map(int, input().split()))\n    fun(ls)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    if x == 1 and y == 1:\n        print(0)\n    else:\n        print(min(x, y, 2))", "for T in range(int(input())):\n    (m, n) = input().split()\n    if int(m) == 1 and int(n) == 1:\n        print(0)\n    elif int(m) == 1 or int(n) == 1:\n        print(1)\n    else:\n        print(2)", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    (a, b) = ari()\n    if a == 1 and b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)\n    return\nfor _ in range(test_case):\n    ans()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(0 if n == 1 and m == 1 else 1 if n == 1 or m == 1 else 2)", "import sys\nfrom os import path\nimport math\nimport time\nfrom collections import defaultdict\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 8)\nMOD = 10 ** 9 + 7\nINT_MAX = 10 ** 9\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = int(input())\nfor _ in range(t):\n    [n, m] = list(map(int, input().split()))\n    if n == m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "cases = int(input())\nfor i in range(cases):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print('0')\n        continue\n    if n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print([2, [1, 0][n == m]][n == 1 or m == 1])", "for _ in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    if a == 1 and b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)", "tt = int(input())\nfor i in range(tt):\n    (n, m) = map(int, input().split())\n    if n == m == 1:\n        print(0)\n    else:\n        print(min(n, m, 2))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    inp = input()\n    (n, m) = inp.split(' ')\n    n = int(n)\n    m = int(m)\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "a = int(input())\nfor i in range(a):\n    b = input()\n    c = b.split()\n    n = int(c[0])\n    m = int(c[-1])\n    if m == 1 and n == 1:\n        print(0)\n    elif m == 1 or n == 1:\n        print(1)\n    else:\n        print(2)", "for i in range(int(input())):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    if n == 1 and m == 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    elif n == 2 or m == 2:\n        print('2')\n    else:\n        print('2')", "t = int(input())\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    if m == 1 and n == 1:\n        print(0)\n    elif m == 1 or n == 1:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split(' ')))\n    if n == 1 and m == 1:\n        print(0)\n    elif min(n, m) == 1:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split(' ')))\n    if n == 1 and m == 1:\n        print(0)\n    elif min(n, m) == 1:\n        print(1)\n    else:\n        print(2)", "def solve():\n    (n, m) = map(int, input().split())\n    if n > m:\n        (n, m) = (m, n)\n    if n == 1:\n        if m == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(2)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "from collections import Counter, deque\nimport io, os, math\nt = int(input())\n\ndef GO_LIFE():\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)\nwhile t > 0:\n    GO_LIFE()\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b and a == 1:\n        print(0)\n    elif 1 in [a, b]:\n        print(1)\n    else:\n        print(2)", "def main():\n    (n, m) = map(int, input().split())\n    if n == m == 1:\n        return 0\n    if min(n, m) == 1:\n        return 1\n    else:\n        return 2\ntests = int(input())\nwhile tests:\n    tests -= 1\n    print(main())", "t = int(input())\nfor t1 in range(t):\n    (n, m) = (int(x) for x in input().split())\n    if n >= 2 and m >= 2:\n        print(2)\n    elif n == 1 and m == 1:\n        print(0)\n    else:\n        print(1)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, m) = [int(i) for i in input().split()]\n    if [n, m] == [1, 1]:\n        print(0)\n        continue\n    if 1 in [n, m]:\n        print(1)\n        continue\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    if a == 1 and b == 1:\n        print(0)\n    elif a == 1 or b == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nwhile t != 0:\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print('0')\n    elif n == 1 or m == 1:\n        print('1')\n    else:\n        print('2')\n    t = t - 1", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    if x == 1 and y == 1:\n        print(0)\n    elif x == 1 or y == 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print(0)\n    elif n == 1 or m == 1:\n        print(1)\n    else:\n        print(2)", "n = int(input())\nfor i in range(n):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    if a == 1 and b == 1:\n        print('0')\n    elif a == 1 or b == 1:\n        print('1')\n    else:\n        print('2')", "t = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    if x == 1 and y == 1:\n        print(0)\n    elif x == 1:\n        print(1)\n    elif y == 1:\n        print(1)\n    else:\n        print(2)", "n = input()\nfor i in range(int(n)):\n    A = input().split()\n    if A[0] == '1' and A[1] == '1':\n        print(0)\n    elif A[0] == '1' or A[1] == '1':\n        print(1)\n    else:\n        print(2)", "m = int(input())\nfor i in range(m):\n    (a1, b1) = map(int, input().split())\n    if a1 == 1 and b1 == 1:\n        print(0)\n    elif a1 == 1 or b1 == 1:\n        print(1)\n    else:\n        print(2)"]