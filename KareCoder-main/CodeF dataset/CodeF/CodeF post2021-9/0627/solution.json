["import bisect\n\ndef f(arr, c):\n    n = len(arr)\n    total = 0\n    start = []\n    for i in range(n):\n        start.append(arr[i] + (i + 1))\n        arr[i] += min(i + 1, n - i)\n    sorted_arr = sorted(arr)\n    pref = [sorted_arr[0]]\n    for i in range(1, n):\n        pref.append(pref[-1] + sorted_arr[i])\n    for i in range(n):\n        if c - start[i] >= 0:\n            index = bisect.bisect_left(pref, c - start[i])\n            if index >= n:\n                index -= 1\n            if pref[index] > c - start[i]:\n                index -= 1\n            if index == -1:\n                total = max(total, 1)\n                continue\n            if sorted_arr[index] >= arr[i]:\n                index = index = bisect.bisect_left(pref, c - (start[i] - arr[i]))\n                if index >= n:\n                    index -= 1\n                if pref[index] > c - (start[i] - arr[i]):\n                    index -= 1\n                cur = index + 1\n            else:\n                cur = index + 2\n            total = max(total, cur)\n    return total\nk = int(input())\nres = []\nwhile k > 0:\n    nc = input().split(' ')\n    (n, c) = (int(nc[0]), int(nc[1]))\n    temp = input().split(' ')\n    arr = []\n    for num in temp:\n        arr.append(int(num))\n    res.append(f(arr, c))\n    k -= 1\nfor x in res:\n    print(x)", "from bisect import bisect\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    left_cost = [num + index + 1 for (index, num) in enumerate(a)]\n    costs = [(num + min(index + 1, n - index), index) for (index, num) in enumerate(a)]\n    costs.sort()\n    total_costs = [0] * n\n    total_costs[0] = costs[0][0]\n    pos = [0] * n\n    pos[costs[0][1]] = 0\n    for i in range(1, n):\n        pos[costs[i][1]] = i\n        total_costs[i] = total_costs[i - 1] + costs[i][0]\n    max_used = 0\n    for (index, cost) in enumerate(left_cost):\n        if cost > c:\n            continue\n        used = bisect(total_costs, c - cost)\n        if pos[index] < used:\n            if used < n and total_costs[used] - costs[pos[index]][0] <= c - cost:\n                used += 1\n            used -= 1\n        max_used = max(max_used, used + 1)\n    print(max_used)", "from bisect import bisect\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    left_cost = [num + index + 1 for (index, num) in enumerate(a)]\n    costs = [(num + min(index + 1, n - index), index) for (index, num) in enumerate(a)]\n    costs.sort()\n    total_costs = [0] * n\n    total_costs[0] = costs[0][0]\n    pos = [0] * n\n    pos[costs[0][1]] = 0\n    for i in range(1, n):\n        pos[costs[i][1]] = i\n        total_costs[i] = total_costs[i - 1] + costs[i][0]\n    max_used = 0\n    for (index, cost) in enumerate(left_cost):\n        if cost > c:\n            continue\n        used = bisect(total_costs, c - cost)\n        if pos[index] < used:\n            if used < n and total_costs[used] - costs[pos[index]][0] <= c - cost:\n                used += 1\n            used -= 1\n        max_used = max(max_used, used + 1)\n    print(max_used)"]