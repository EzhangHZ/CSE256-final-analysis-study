["def solve(s: str, k: int):\n    if k >= 25:\n        return 'a' * len(s)\n    bottom = ord('a')\n    for character in s:\n        if k == 0:\n            break\n        character_order = ord(character)\n        distance = character_order - bottom\n        if distance <= 0:\n            continue\n        if distance <= k:\n            k -= distance\n            bottom = character_order\n        else:\n            while k > 0:\n                next_character_order = character_order - 1\n                next_character = chr(next_character_order)\n                s = s.replace(character, next_character)\n                character_order = next_character_order\n                character = next_character\n                k -= 1\n    for character_order in range(bottom, ord('a'), -1):\n        character = chr(character_order)\n        s = s.replace(character, 'a')\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(s, k))", "def sol(s, n, k):\n    if k >= 25:\n        return 'a' * n\n    toa = ord('a')\n    tosec = -1\n    tosec2 = -1\n    sec = ''\n    res = ''\n    for i in range(n):\n        tmp = ord(s[i])\n        if tmp <= toa:\n            res += 'a'\n        elif tmp - toa <= k:\n            k -= tmp - toa\n            toa = tmp\n            res += 'a'\n        elif k > 0:\n            tosec = tmp\n            tosec2 = tosec - k\n            sec = chr(tmp - k)\n            k = 0\n            res += sec\n        elif tosec2 <= tmp <= tosec:\n            res += sec\n        else:\n            res += s[i]\n    return res\nt = int(input())\nfor case in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(sol(s, n, k))", "def res(s, n, k):\n    mas = [ord(i) - ord('a') for i in s]\n    i = 0\n    while i < n and mas[i] <= k:\n        i += 1\n    if i == n:\n        mas = [0] * n\n    elif i == 0:\n        pot = mas[0]\n        pol = mas[0] - k\n        for i in range(n):\n            if pol <= mas[i] <= pot:\n                mas[i] = pol\n    else:\n        pot1 = max(mas[:i])\n        pot2 = mas[i]\n        pol2 = mas[i] - (k - pot1)\n        for i in range(n):\n            if mas[i] <= pot1:\n                mas[i] = 0\n            elif pol2 <= mas[i] <= pot2:\n                mas[i] = pol2\n    s = ''.join((chr(i + ord('a')) for i in mas))\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(res(s, n, k))", "base = ord('a')\n\ndef solve():\n    (n, k) = map(int, input().split())\n    ords = list(map(lambda c: ord(c) - base, input()))\n    if k >= 25:\n        print('a' * n)\n        return\n    zeros = 0\n    addi = None\n    for x in ords:\n        if x <= zeros:\n            continue\n        if x - zeros <= k:\n            cost = x - zeros\n            zeros = x\n            k -= cost\n        else:\n            addi = (x - k, x)\n            break\n    out = ''\n    for x in ords:\n        if x <= zeros:\n            out += 'a'\n        elif addi and addi[0] <= x <= addi[1]:\n            out += chr(base + addi[0])\n        else:\n            out += chr(base + x)\n    print(out)\nfor _ in range(int(input())):\n    solve()", "from string import ascii_lowercase\n\ndef index(char: str) -> int:\n    return ord(char) - 97\nresults = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = [index(c) for c in input()]\n    optimized = 0\n    semi_optimized = None\n    for i in range(n):\n        if string[i] <= optimized:\n            string[i] = 0\n        elif k > 0:\n            d = string[i] - optimized\n            if d <= k:\n                k -= d\n                optimized = string[i]\n                string[i] = 0\n            else:\n                semi_optimized = (string[i] - k, string[i])\n                k = 0\n    if semi_optimized is not None:\n        for i in range(n):\n            if semi_optimized[0] < string[i] <= semi_optimized[1]:\n                string[i] = semi_optimized[0]\n    results.append(''.join((ascii_lowercase[i] for i in string)))\nprint('\\n'.join(results))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(lambda x: ord(x) - 97, input().strip()))\n    largest = 0\n    toward = 25\n    second = 0\n    for num in s:\n        if num > largest:\n            if num - k > 0:\n                second = num\n                toward = num - k + largest\n                break\n            else:\n                largest = num\n    res = []\n    for idx in s:\n        if idx <= largest:\n            res.append('a')\n        elif idx <= second:\n            res.append(chr(min(toward, idx) + 97))\n        else:\n            res.append(chr(idx + 97))\n    print(''.join(res))", "import bisect\nimport heapq\nfrom collections import defaultdict, deque\nfrom email import header\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nimport math\nimport sys\ninput = stdin.readline\n\ndef ii():\n    return int(input())\n\ndef lii():\n    return list(map(int, stdin.readline().split()))\n\ndef ss():\n    x = stdin.readline()\n    if x[-1] == '\\n':\n        return x[:-1]\n    return x\n\ndef lss():\n    return list(map(str, stdin.readline().split()))\n\ndef llss():\n    return [i for i in ss()]\n\ndef yes():\n    stdout.write('YES\\n')\n\ndef no():\n    stdout.write('NO\\n')\nfor _ in range(ii()):\n    (n, k) = lii()\n    s = llss()\n    last = 0\n    flag = True\n    for (idx, i) in enumerate(s):\n        val = ord(i) - 97\n        if k >= val:\n            last = max(last, val)\n        else:\n            flag = False\n            break\n    if flag:\n        print('a' * n)\n    else:\n        res = s[:]\n        for i in range(n):\n            val = ord(s[i]) - 97\n            if last >= val:\n                res[i] = 'a'\n        k = k - last\n        if k > 0:\n            curr = s[idx]\n            chg = chr(ord(curr) - k)\n            for j in range(n):\n                if curr >= res[j]:\n                    res[j] = min(res[j], chg)\n        print(''.join(res))", "import math, bisect, heapq, random, sys, itertools\ninput = sys.stdin.readline\n\ndef gprint(t, ans=''):\n    print(f'Case #{t + 1}:', ans)\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nfact = [1]\nANS = []\nfor t in range(int(input())):\n    (n, k) = ints()\n    a = input().strip()\n    a = list(a)\n    if ord(a[0]) - ord('a') > k:\n        (l, u) = (ord(a[0]) - k, ord(a[0]))\n        c = chr(ord(a[0]) - k)\n        b = ''\n        for i in a:\n            x = ord(i)\n            if l <= x <= u:\n                b += c\n            else:\n                b += i\n        print(b)\n    else:\n        u = ord('z')\n        kk = 0\n        for i in a:\n            if ord(i) - ord('a') > k:\n                u = ord(i)\n                k -= kk - ord('a')\n                l = u - k\n                c = chr(l)\n                break\n            kk = max(kk, ord(i))\n        ans = ''\n        for i in a:\n            if ord(i) <= kk:\n                ans += 'a'\n            elif l <= ord(i) <= u:\n                ans += c\n            else:\n                ans += i\n        print(ans)", "def solve(n, k, s):\n    m = ord('a')\n    for c in s:\n        r = ord(c) - ord('a')\n        if r <= k:\n            m = max(ord(c), m)\n        else:\n            break\n    j = k - (m - ord('a'))\n    result = []\n    for d in s:\n        if ord(d) <= m:\n            result.append('a')\n        elif ord(d) <= ord(c) and ord(d) > ord(c) - j:\n            result.append(chr(ord(c) - j))\n        else:\n            result.append(d)\n    return ''.join(result)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))", "from string import ascii_lowercase\nfrom tkinter import N\n\ndef index(char: str) -> int:\n    return ord(char) - 97\nresults = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = [index(c) for c in input()]\n    optimized = 0\n    semi_optimized = None\n    for i in range(n):\n        if string[i] <= optimized:\n            string[i] = 0\n        elif k > 0:\n            d = string[i] - optimized\n            if d <= k:\n                k -= d\n                optimized = string[i]\n                string[i] = 0\n            else:\n                assert semi_optimized is None\n                semi_optimized = (string[i] - k, string[i])\n                k = 0\n    if semi_optimized is not None:\n        for i in range(n):\n            if semi_optimized[0] < string[i] <= semi_optimized[1]:\n                string[i] = semi_optimized[0]\n    results.append(''.join((ascii_lowercase[i] for i in string)))\nprint('\\n'.join(results))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(lambda x: ord(x) - 97, input().strip()))\n    largest = 0\n    toward = 25\n    second = 0\n    for num in s:\n        if num > largest:\n            if num - k > 0:\n                second = num\n                toward = num - k + largest\n                break\n            else:\n                largest = num\n    res = []\n    for idx in s:\n        if idx <= largest:\n            res.append('a')\n        elif idx <= second:\n            res.append(chr(min(toward, idx) + 97))\n        else:\n            res.append(chr(idx + 97))\n    print(''.join(res))", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    res = ''\n    m1 = 'a'\n    m2 = 'a'\n    for i in s:\n        if k >= ord(i) - ord('a'):\n            m1 = max(m1, i)\n        else:\n            m2 = i\n            k = ord(m2) - k - ord('a')\n            break\n    for i in s:\n        if i <= m1:\n            res += 'a'\n        elif i <= m2 and i > chr(ord(m1) + k):\n            res += chr(ord(m1) + k)\n        else:\n            res += i\n    print(res)", "import sys\nif len(sys.argv) == 2:\n    sys.stdin = open(sys.argv[1])\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k >= 25:\n        print('a' * n)\n        continue\n    ans = ''\n    max_s_under_k = None\n    max_s_over_k = None\n    min_s_over_k = None\n    k_ = -1\n    for i in range(n):\n        if max_s_over_k is not None:\n            if max_s_under_k is not None and s[i] <= max_s_under_k:\n                ans += 'a'\n            elif min_s_over_k <= s[i] <= max_s_over_k:\n                ans += min_s_over_k\n            else:\n                ans += s[i]\n        elif max_s_under_k is not None:\n            if ord(s[i]) - ord('a') <= k:\n                max_s_under_k = max(max_s_under_k, s[i])\n                ans += 'a'\n            else:\n                max_s_over_k = s[i]\n                k_ = k - (ord(max_s_under_k) - ord('a'))\n                min_s_over_k = chr(ord(max_s_over_k) - k_)\n                ans += min_s_over_k\n        elif ord(s[i]) - ord('a') <= k:\n            max_s_under_k = s[i]\n            ans += 'a'\n        else:\n            max_s_over_k = s[i]\n            k_ = k\n            min_s_over_k = chr(ord(max_s_over_k) - k_)\n            ans += min_s_over_k\n    print(ans)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    res = ''\n    m1 = 'a'\n    m2 = 'a'\n    for i in s:\n        if k >= ord(i) - ord('a'):\n            m1 = max(m1, i)\n        else:\n            m2 = i\n            k = ord(m2) - k - ord('a')\n            break\n    for i in s:\n        if i <= m1:\n            res += 'a'\n        elif i <= m2 and i > chr(ord(m1) + k):\n            res += chr(ord(m1) + k)\n        else:\n            res += i\n    print(res)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    res = ''\n    m1 = 'a'\n    m2 = 'a'\n    for i in s:\n        if k >= ord(i) - ord('a'):\n            m1 = max(m1, i)\n        else:\n            m2 = i\n            k = ord(m2) - k - ord('a')\n            break\n    for i in s:\n        if i <= m1:\n            res += 'a'\n        elif i <= m2 and i > chr(ord(m1) + k):\n            res += chr(ord(m1) + k)\n        else:\n            res += i\n    print(res)", "t = int(input())\nl = 'abcdefghijklmnopqrstuvwxyz'\nfor k in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    s = input()\n    arr = []\n    for i in range(n):\n        arr.append(s[i])\n    if k >= 25:\n        print(''.join(['a'] * n))\n        continue\n    ind = -1\n    mx = 0\n    for i in range(n):\n        if ord(arr[i]) - 97 <= k:\n            mx = max(ord(arr[i]) - 97, mx)\n        else:\n            ind = i\n            break\n    if ind == -1:\n        print(''.join(['a'] * n))\n        continue\n    else:\n        diff = k - mx\n        char1 = arr[ind]\n        char = l[ord(char1) - 97 - diff]\n        for i in range(n):\n            if ord(arr[i]) - 97 <= mx:\n                arr[i] = 'a'\n        for i in range(n):\n            if arr[i] <= char1:\n                if arr[i] >= char:\n                    arr[i] = char\n        print(''.join(arr))\n        continue", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    if k >= 25:\n        for i in range(n):\n            a.append('a')\n        print(''.join(a))\n        continue\n    val = []\n    for i in range(n):\n        val.append(ord(s[i]) - 97)\n    used = 0\n    index = -1\n    notpossible = -1\n    for i in range(n):\n        if val[i] <= k:\n            a.append('a')\n            used = max(used, val[i])\n        else:\n            index = i\n            notpossible = val[i]\n            break\n    if index == -1:\n        print(''.join(a))\n        continue\n    possiblekaro = notpossible - (k - used)\n    for i in range(index, n):\n        if val[i] <= used:\n            a.append('a')\n        elif val[i] > possiblekaro and val[i] <= notpossible:\n            a.append(chr(possiblekaro + 97))\n        else:\n            a.append(s[i])\n    print(''.join(a))", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    if k >= 25:\n        print('a' * n)\n    else:\n        p = 0\n        m = 0\n        r = 0\n        for i in range(n):\n            if ord(s[i]) - ord('a') > m:\n                if ord(s[i]) - ord('a') - m > k:\n                    r = ord(s[i]) - ord('a') - k\n                    k = 0\n                    p = m + 0\n                    m = ord(s[i]) - ord('a')\n                    break\n                else:\n                    k -= ord(s[i]) - ord('a') - m\n                    m = ord(s[i]) - ord('a')\n        for i in range(26):\n            if i <= p:\n                s = s.replace(chr(ord('a') + i), 'a')\n            elif r < i <= m:\n                s = s.replace(chr(ord('a') + i), chr(ord('a') + r))\n        print(s)", "from string import ascii_lowercase\nfrom tkinter import N\n\ndef index(char: str) -> int:\n    return ord(char) - 97\nresults = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = [index(c) for c in input()]\n    optimized = 0\n    semi_optimized = None\n    for i in range(n):\n        if string[i] <= optimized:\n            string[i] = 0\n        elif k > 0:\n            d = string[i] - optimized\n            if d <= k:\n                k -= d\n                optimized = string[i]\n                string[i] = 0\n            else:\n                semi_optimized = (string[i] - k, string[i])\n                k = 0\n    if semi_optimized is not None:\n        for i in range(n):\n            if semi_optimized[0] < string[i] <= semi_optimized[1]:\n                string[i] = semi_optimized[0]\n    results.append(''.join((ascii_lowercase[i] for i in string)))\nprint('\\n'.join(results))", "for t in range(int(input())):\n    (n, k) = [int(l) for l in input().split()]\n    s = [ord(l) - 97 for l in input()]\n    m = max(s)\n    if m <= k:\n        print('a' * n)\n        continue\n    elif s[0] > k:\n        m1 = s[0]\n        low = m1 - k\n        for i in range(0, n):\n            if s[i] > low and s[i] <= m1:\n                s[i] = low\n        ans = ''\n        for i in range(0, n):\n            ans += chr(s[i] + 97)\n        print(ans)\n    else:\n        f1 = -1\n        for i in range(0, n):\n            if s[i] > k:\n                f1 = i\n                break\n        m1 = max(s[0:f1])\n        for i in range(n):\n            if s[i] <= m1:\n                s[i] = 0\n        k = k - m1\n        n2 = s[f1]\n        l_n2 = s[f1] - k\n        for i in range(f1, n):\n            if s[i] > l_n2 and s[i] <= n2:\n                s[i] = l_n2\n        k = 0\n        ans = ''\n        for i in range(0, n):\n            ans += chr(s[i] + 97)\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    mx = 0\n    for i in range(n):\n        if ord(s[i]) - ord('a') > k:\n            r = ord(s[i]) - ord('a')\n            l = ord(s[i]) - ord('a') - (k - mx)\n            an = ''\n            for i in s:\n                if ord(i) - ord('a') <= mx:\n                    an += 'a'\n                elif ord(i) - ord('a') >= l and ord(i) - ord('a') <= r:\n                    an += chr(ord('a') + l)\n                else:\n                    an += i\n            print(an)\n            break\n        else:\n            mx = max(mx, ord(s[i]) - ord('a'))\n    else:\n        print('a' * n)", "iter = int(input())\nbase = ord('a')\nfor i in range(iter):\n    x = input()\n    x = x.split()\n    num = int(x[1])\n    onum = num\n    string = input()\n    mc = 'a'\n    string = list(string)\n    for i in range(len(string)):\n        if ord(string[i]) - base > num:\n            num -= ord(mc) - base\n            for j in range(len(string)):\n                if ord(mc) >= ord(string[j]):\n                    string[j] = 'a'\n            mc = None\n            val = ord(string[i])\n            vals = chr(val - num)\n            for j in range(i, len(string)):\n                if ord(string[j]) <= val and ord(string[j]) > ord(vals):\n                    string[j] = vals\n            break\n        elif ord(string[i]) > ord(mc):\n            mc = string[i]\n    if mc is not None:\n        print('a' * len(string))\n        continue\n    print(''.join(string))", "t = int(input())\n\ndef f(len_s, n, s):\n    s = [ord(e) - ord('a') for e in s]\n    bar = 0\n    lower_bound = 0\n    upper_bar = 0\n    upper_bound = 0\n    for i in range(len(s)):\n        if s[i] <= upper_bar:\n            s[i] = min(s[i], upper_bound)\n        if s[i] <= bar:\n            s[i] = min(s[i], lower_bound)\n        if not n:\n            pass\n        elif s[i]:\n            if s[i] - n <= bar:\n                n -= s[i] - bar\n                bar = s[i]\n                s[i] = lower_bound\n            else:\n                upper_bar = s[i]\n                upper_bound = s[i] - n\n                s[i] -= n\n                n = 0\n    ans = ''.join([chr(e + ord('a')) for e in s])\n    return ans\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input().strip()\n    print(f(n, k, s))", "for _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    s = [ord(x) - ord('a') for x in input()]\n    m1 = 0\n    for x in s:\n        if x <= k:\n            m1 = max(m1, x)\n        else:\n            (m2, m3) = (x - (k - m1), x)\n            break\n    t = map(lambda x: 0 if x <= m1 else m2 if m2 <= x <= m3 else x, s)\n    print(''.join((chr(ord('a') + x) for x in t)))", "test_cases = int(input())\nfor i in range(test_cases):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    (offset, curr, offset_aft_k, leftover_k, remaining, ans) = (0, ord(s[0]) - 97, 0, 0, 0, '')\n    if curr > k:\n        offset = curr - k\n    else:\n        remaining = k - curr\n        for j in range(1, n):\n            curr = ord(s[j]) - 97\n            if remaining:\n                if curr <= k:\n                    remaining = min(remaining, k - curr)\n                else:\n                    offset_aft_k = curr - remaining\n                    leftover_k = remaining\n                    remaining = 0\n            else:\n                break\n    if offset:\n        first_letter = chr(97 + offset)\n        for l in range(n):\n            if offset <= ord(s[l]) - 97 <= offset + k:\n                ans += first_letter\n            else:\n                ans += s[l]\n    elif offset_aft_k:\n        replacement = chr(97 + offset_aft_k)\n        for l in range(n):\n            curr = ord(s[l]) - 97\n            if curr <= k - leftover_k:\n                ans += 'a'\n            elif offset_aft_k <= curr <= offset_aft_k + leftover_k:\n                ans += replacement\n            else:\n                ans += s[l]\n    else:\n        for l in range(n):\n            if ord(s[l]) - 97 <= k:\n                ans += 'a'\n            else:\n                ans += s[l]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    maxSmb = 'z' if 97 + k > 122 else chr(97 + k)\n    smb = 'a'\n    lastSmb = 'a'\n    for elm in s:\n        if ord(elm) > ord(maxSmb):\n            lastSmb = elm\n            break\n        if ord(smb) < ord(elm):\n            smb = elm\n    for ordSmb in range(ord(smb), ord('a'), -1):\n        s = s.replace(chr(ordSmb), 'a')\n        k -= 1\n    newSmb = 97 if ord(lastSmb) - k < 97 else ord(lastSmb) - k\n    for ordSmb in range(ord(lastSmb), newSmb, -1):\n        s = s.replace(chr(ordSmb), chr(newSmb))\n    print(s)", "from collections import defaultdict\nxx = int(input())\n\ndef cal(n, k, s):\n    if k >= 25:\n        return 'a' * n\n    dic = defaultdict(list)\n    p = []\n    for (i, v) in enumerate(s):\n        num = ord(v) - 97\n        dic[num].append(i)\n        if num not in p:\n            p.append(num)\n    if k >= max(p):\n        return 'a' * n\n    for i in range(len(p)):\n        if p[i] > k:\n            if i > 0:\n                fn = max(p[:i])\n                k -= fn\n                for j in range(fn, 0, -1):\n                    if j not in dic:\n                        continue\n                    dic[0] += dic[j]\n                    del dic[j]\n            ii = p[i]\n            while k > 0:\n                t = ii - 1\n                if t in dic:\n                    dic[t] += dic[ii]\n                else:\n                    dic[t] = dic[ii]\n                del dic[ii]\n                ii = t\n                k -= 1\n            break\n    ans = [''] * n\n    for i in dic.keys():\n        for j in dic[i]:\n            ans[j] = chr(i + 97)\n    return ''.join(ans)\nfor jj in range(xx):\n    (n, k) = [int(i) for i in input().split(' ')]\n    s = input()\n    print(cal(n, k, s))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    mx = 0\n    for i in range(n):\n        if ord(s[i]) - ord('a') > k:\n            r = ord(s[i]) - ord('a')\n            l = ord(s[i]) - ord('a') - (k - mx)\n            an = ''\n            for i in s:\n                if ord(i) - ord('a') <= mx:\n                    an += 'a'\n                elif ord(i) - ord('a') >= l and ord(i) - ord('a') <= r:\n                    an += chr(ord('a') + l)\n                else:\n                    an += i\n            print(an)\n            break\n        else:\n            mx = max(mx, ord(s[i]) - ord('a'))\n    else:\n        print('a' * n)", "for x in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s1 = 'a'\n    s2 = 'a'\n    s3 = 'a'\n    for i in range(n):\n        if ord(s[i]) - 97 <= k:\n            if ord(s[i]) - 97 > ord(s1) - 97:\n                s1 = s[i]\n        else:\n            k -= ord(s1) - 97\n            s3 = s[i]\n            s2 = chr(ord(s[i]) - k)\n            break\n    ans = [''] * n\n    for i in range(n):\n        if ord(s[i]) <= ord(s1):\n            ans[i] = 'a'\n        elif ord(s2) <= ord(s[i]) <= ord(s3):\n            ans[i] = s2\n        else:\n            ans[i] = s[i]\n    print(''.join(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    maxSmb = 'z' if 97 + k > 122 else chr(97 + k)\n    smb = 'a'\n    lastSmb = 'a'\n    for elm in s:\n        if ord(elm) > ord(maxSmb):\n            lastSmb = elm\n            break\n        if ord(smb) < ord(elm):\n            smb = elm\n    for ordSmb in range(ord(smb), ord('a'), -1):\n        s = s.replace(chr(ordSmb), 'a')\n        k -= 1\n    newSmb = 97 if ord(lastSmb) - k < 97 else ord(lastSmb) - k\n    for ordSmb in range(ord(lastSmb), newSmb, -1):\n        s = s.replace(chr(ordSmb), chr(newSmb))\n    print(s)", "def useAll(s, k):\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    if k >= 25:\n        print('a' * n)\n    else:\n        x = 0\n        maxord = 0\n        while x < n and ord(s[x]) - ord('a') <= k:\n            maxord = max(maxord, ord(s[x]) - ord('a'))\n            x += 1\n        ans = ''\n        for char in s:\n            if ord(char) - ord('a') <= maxord:\n                ans += 'a'\n            else:\n                ans += char\n        k -= maxord\n        s = ans[x:]\n        ans = 'a' * x\n        if s:\n            currord = ord(s[0])\n            for i in range(len(s)):\n                if currord - k < ord(s[i]) <= currord:\n                    ans += chr(currord - k)\n                else:\n                    ans += s[i]\n        print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = (int(i) for i in input().split(' '))\n    s = input()\n    ans = list(s)\n    l = ord('a')\n    r1 = ord('z')\n    r2 = r1\n    for i in range(n):\n        if k == 0:\n            if ord(s[i]) > r1 and ord(s[i]) <= r2:\n                ans[i] = chr(r1)\n            elif ord(s[i]) <= l:\n                ans[i] = 'a'\n            else:\n                ans[i] = s[i]\n        elif l >= ord(s[i]):\n            ans[i] = 'a'\n        elif ord(s[i]) - l <= k:\n            k -= ord(s[i]) - l\n            l = ord(s[i])\n            ans[i] = 'a'\n        elif ord(s[i]) - l > k:\n            r1 = ord(s[i]) - k\n            r2 = ord(s[i])\n            k = 0\n            ans[i] = chr(r1)\n    print(''.join(ans))", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    (n, k) = M()\n    s = S()\n    a = [0] * 26\n    for i in s:\n        a[ord(i) - 97] += 1\n    i = 25\n    c = 0\n    while i >= 0 and a[i] == 0:\n        i -= 1\n        c = i\n    if k >= i:\n        print('a' * n)\n        continue\n    b = [0] * 27\n    ans = ''\n    d = {}\n    b[1] = 1\n    for i in range(n):\n        t = ord(s[i]) - 96\n        p = t\n        if b[t] > 0:\n            ans += chr(b[t] + 96)\n            continue\n        while t >= 1 and b[t] == 0 and (k > 0):\n            k -= 1\n            t -= 1\n        if b[t] == 0:\n            b[t] = t\n        while p >= t:\n            b[p] = b[t]\n            p -= 1\n        ans += chr(96 + b[t])\n    print(ans)", "T = int(input())\nq = []\nfor i in range(T):\n    (s, n) = input().split()\n    data = input()\n    q.append((int(s), int(n), data))\n\ndef solve(s, n, data):\n    first_tembus = ''\n    highest_first = 'a'\n    for c in data:\n        if ord(c) - 97 > n:\n            first_tembus = c\n            break\n        if ord(highest_first) < ord(c):\n            highest_first = c\n    if first_tembus != '':\n        sisa = n - (ord(highest_first) - 97)\n        target_tembus = chr(ord(first_tembus) - sisa)\n    for c in data:\n        if ord(highest_first) >= ord(c):\n            print('a', end='')\n        elif ord(c) >= ord(target_tembus) and ord(c) <= ord(first_tembus):\n            print(target_tembus, end='')\n        else:\n            print(c, end='')\n    print()\nfor (s, n, data) in q:\n    solve(s, n, data)", "t = int(input())\nfor t_item in range(t):\n    (n, k) = map(int, input().split())\n    if k > 25:\n        k = 25\n    s = input()\n    m = dict()\n    c = 'a'\n    ind = -1\n    for i in range(len(s)):\n        if s[i] <= c:\n            continue\n        if ord(s[i]) - ord(c) <= k:\n            k -= ord(s[i]) - ord(c)\n            c = s[i]\n        else:\n            ind = i\n            break\n    if ind == -1:\n        print('a' * n)\n    else:\n        print('a' * ind, end='')\n        for i in range(ind, n):\n            if s[i] <= c:\n                print('a', end='')\n            elif s[i] > s[ind]:\n                print(s[i], end='')\n            elif s[i] >= chr(ord(s[ind]) - k):\n                print(chr(ord(s[ind]) - k), end='')\n            else:\n                print(s[i], end='')\n        print()", "from collections import defaultdict\nfrom collections import deque\nfrom sys import stdout\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [ord(ch) for ch in input()]\n    (from1, to1) = (-1, -1)\n    (from2, to2) = (-1, -1)\n    for i in range(n):\n        s_i = s[i]\n        if from1 <= s[i] <= to1:\n            s[i] = from1\n            continue\n        if from2 <= s[i] <= to2:\n            s[i] = from2\n            continue\n        if k == 0:\n            continue\n        if s[i] == ord('a'):\n            continue\n        if from1 == -1:\n            from1 = max(s[i] - k, ord('a'))\n            to1 = s[i]\n            k -= s[i] - from1\n            s[i] = from1\n            continue\n        if k >= s[i] - to1:\n            k -= s[i] - to1\n            to1 = s[i]\n            s[i] = from1\n            continue\n        assert from2 == -1\n        assert s[i] - k > to1\n        from2 = s[i] - k\n        to2 = s[i]\n        k = 0\n        s[i] = from2\n    print(''.join(map(chr, s)))", "f = lambda : input().strip()\nt = int(f())\nfor i in range(t):\n    (n, k) = map(int, f().split(' '))\n    s = f()\n    max_a = ord('a')\n    min_cent = max_cent = ord('z') + 1\n    cent = ''\n    for c in s:\n        oc = ord(c)\n        if oc <= max_a:\n            c = 'a'\n        elif k > 0:\n            dk = oc - max_a\n            if k >= dk:\n                max_a = oc\n                k -= dk\n                c = 'a'\n            else:\n                max_cent = oc\n                min_cent = oc - k\n                k = 0\n                cent = c = chr(min_cent)\n        elif min_cent <= oc <= max_cent:\n            c = cent\n        print(c, end='')\n    print()", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(N, K, S):\n    if K >= 25:\n        return 'a' * N\n    dp = {}\n    for i in range(26):\n        dp[chr(ord('a') + i)] = chr(ord('a') + i)\n    ans = ''\n    for s in S:\n        if K > 0 and s == dp[s]:\n            min_c = chr(ord('z') + 1)\n            for i in range(min(26, K + 1)):\n                curr_c = chr(max(ord('a'), ord(s) - i))\n                to = dp[curr_c]\n                if min_c == chr(ord('z') + 1) or to < dp[min_c]:\n                    min_c = curr_c\n            diff = ord(s) - ord(min_c)\n            target = dp[min_c]\n            K -= diff\n            for i in range(diff):\n                dp[chr(ord(s) - i)] = target\n        ans += dp[s]\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, K) = get_ints()\n    S = input().rstrip()\n    print(solve(N, K, S))", "import os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\nimport io\nimport math\nimport heapq\nimport bisect\nimport collections\n\ndef ceil(a, b):\n    return (a + b - 1) // b\ninf = float('inf')\n\ndef get():\n    return stdin.readline().rstrip()\nmod = 10 ** 5 + 7\nimport random\nrandom.random()\nfor _ in range(int(get())):\n    (n, k) = map(int, get().split())\n    s = get()\n    d = defaultdict(str)\n    ans = ''\n    for i in range(26):\n        d[chr(97 + i)] = chr(97 + i)\n    for i in range(len(s)):\n        x = s[i]\n        s1 = set()\n        while d[x] != 'a' and k > 0:\n            if d[d[x]] == 'a':\n                d[x] = 'a'\n                break\n            if chr(ord(d[x]) - 1) > d[x]:\n                break\n            s1.add(chr(ord(d[x])))\n            d[x] = chr(ord(d[x]) - 1)\n            k -= 1\n        if d[d[x]] == 'a':\n            d[x] = 'a'\n        for i in s1:\n            d[i] = min(d[x], d[i])\n        ans = ans + d[x]\n    print(ans)", "import os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\nimport io\nimport math\nimport heapq\nimport bisect\nimport collections\n\ndef ceil(a, b):\n    return (a + b - 1) // b\ninf = float('inf')\n\ndef get():\n    return stdin.readline().rstrip()\nmod = 10 ** 5 + 7\nimport random\nrandom.random()\nfor _ in range(int(get())):\n    (n, k) = map(int, get().split())\n    s = get()\n    d = defaultdict(str)\n    ans = ''\n    for i in range(26):\n        d[chr(97 + i)] = chr(97 + i)\n    for i in range(len(s)):\n        x = s[i]\n        s1 = set()\n        while d[x] != 'a' and k > 0:\n            if d[d[x]] == 'a':\n                d[x] = 'a'\n                break\n            if chr(ord(d[x]) - 1) > d[x]:\n                break\n            s1.add(chr(ord(d[x])))\n            d[x] = chr(ord(d[x]) - 1)\n            k -= 1\n        if d[d[x]] == 'a':\n            d[x] = 'a'\n        for i in s1:\n            d[i] = min(d[x], d[i])\n        ans = ans + d[x]\n    print(ans)", "t = int(input())\nout = ''\nord_ = 'abcdefghijklmnopqrstuvwxyz'\norder = {ord_[i]: i for i in range(len(ord_))}\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    string = input()\n    ans = ''\n    changed = [0] * 26\n    for char in string:\n        for i in range(max(1, order[char] - k + 1), order[char] + 1):\n            if changed[i] == 0:\n                k -= 1\n            changed[i] = 1\n        if k < 1:\n            break\n    map_ = {}\n    last = 'a'\n    for i in range(len(ord_)):\n        if not changed[i]:\n            map_[ord_[i]] = ord_[i]\n            last = ord_[i]\n        else:\n            map_[ord_[i]] = last\n    ans = ''\n    for char in string:\n        ans += map_[char]\n    out += ans + '\\n'\nprint(out)", "def useAll(s, k):\n    for i in range(k):\n        char = ''\n        for x in range(n):\n            news = ''\n            if s[x] != 'a':\n                char = s[x]\n                break\n        if char:\n            for e in range(n):\n                if s[e] == char:\n                    news += chr(ord(char) - 1)\n                else:\n                    news += s[e]\n            s = news\n    return s\nr = int(input())\nfor _ in range(r):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    if k >= 25:\n        print('a' * n)\n    else:\n        i = 0\n        maxord = 0\n        while i < n and ord(s[i]) - ord('a') <= k:\n            maxord = max(maxord, ord(s[i]) - ord('a'))\n            i += 1\n        ans = ''\n        for char in s:\n            if ord(char) - ord('a') <= maxord:\n                ans += 'a'\n            else:\n                ans += char\n        k -= maxord\n        ans = useAll(ans, k)\n        print(ans)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef compress(root, x):\n    if root[x] == x:\n        return x\n    root[x] = compress(root, root[x])\n    return root[x]\nt = inp()\nfor _ in range(t):\n    (n, k) = inlt()\n    _dict = defaultdict(list)\n    s = input()\n    if s[-1] == '\\n':\n        s = s[:len(s) - 1]\n    s = list(s)\n    root = [i for i in range(26)]\n    index = 0\n    while k > 0 and index < len(s):\n        ch = s[index]\n        idx = ord(ch) - ord('a')\n        compress(root, idx)\n        if root[idx] > 0:\n            root[idx] = idx - 1\n            s[index] = chr(root[idx] + ord('a'))\n            k -= 1\n        else:\n            index += 1\n    ans = ''\n    for ch in s:\n        idx = ord(ch) - ord('a')\n        changed = compress(root, idx)\n        ans += chr(changed + ord('a'))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = [0] * 26\n    for i in range(n):\n        tmp = ord(s[i]) - ord('a')\n        while tmp > 0 and k > 0 and (c[tmp] == 0):\n            c[tmp] = 1\n            k -= 1\n            tmp -= 1\n    d = {i: i for i in range(26)}\n    for i in range(26):\n        if c[i] == 0:\n            tmp = i\n        else:\n            d[i] = tmp\n    d = {chr(i + ord('a')): chr(d[i] + ord('a')) for i in range(26)}\n    print(*[d[s[i]] for i in range(len(s))], sep='')", "parent = []\n\ndef find(u):\n    if u == parent[u]:\n        return u\n    parent[u] = find(parent[u])\n    return parent[u]\n\ndef unite(u, v):\n    u = find(u)\n    v = find(v)\n    if u == v:\n        return 0\n    if u > v:\n        (u, v) = (v, u)\n    parent[v] = u\n    return 1\nt = int(input())\nwhile t > 0:\n    parent = []\n    for i in range(26):\n        parent.append(i)\n    t = t - 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    s = input()\n    if k >= 25:\n        for i in range(n):\n            print('a', end='')\n        print()\n        continue\n    for ch in s:\n        u = ord(ch) - ord('a')\n        if find(u) != 0:\n            v = u - 1\n            while v >= 0 and k:\n                k -= unite(u, v)\n                v = v - 1\n    for ch in s:\n        temp = ord('a') + find(ord(ch) - ord('a'))\n        print(chr(temp), end='')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    dic = {}\n    for j in range(97, 123):\n        dic[chr(j)] = chr(j)\n    for j in range(n):\n        ele = dic[s[j]]\n        no = ord(ele) - 97\n        c = 0\n        for g in range(ord(ele), 96, -1):\n            if dic[chr(g)] != 'a':\n                c += 1\n            else:\n                break\n        if k >= c:\n            k -= c\n            for h in range(ord(ele), 96, -1):\n                dic[chr(h)] = 'a'\n        else:\n            final = chr(ord(ele) - k)\n            for h in range(ord(ele), ord(ele) - k, -1):\n                dic[chr(h)] = final\n            k = 0\n    ans = ''\n    for j in s:\n        ans += dic[j]\n    print(ans)", "a = ord('a')\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    cost = [float('inf')] + [1] * 25\n    s = []\n    for x in input():\n        x = ord(x) - a\n        while k >= cost[x]:\n            k -= cost[x]\n            cost[x] = 0\n            x -= 1\n        s.append(x)\n    print(''.join((chr(a + x) for x in s)))", "for _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    cost = [float('inf')] + [1] * 25\n    for x in input():\n        x = ord(x) - ord('a')\n        while k >= cost[x]:\n            k -= cost[x]\n            cost[x] = 0\n            x -= 1\n        print(chr(ord('a') + x), end='')\n    print()"]