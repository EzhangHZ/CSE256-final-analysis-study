["for _ in range(int(input())):\n    n = int(input())\n    c = []\n    coins = 0\n    for i in range(2 * n):\n        if i < n:\n            c.append(list(map(int, input().split())))\n        else:\n            k = list(map(int, input().split()))\n            coins = coins + sum(k[n:])\n            c.append(k)\n    add = min(c[0][n], c[0][-1], c[n - 1][n], c[n - 1][-1])\n    add = min(add, c[n][0], c[n][n - 1], c[-1][0], c[-1][n - 1])\n    print(coins + add)", "for _ in range(int(input())):\n    n = int(input())\n    c = []\n    coins = 0\n    for i in range(2 * n):\n        if i < n:\n            c.append(list(map(int, input().split())))\n        else:\n            k = list(map(int, input().split()))\n            coins = coins + sum(k[n:])\n            c.append(k)\n    add = min(c[0][n], c[0][-1], c[n - 1][n], c[n - 1][-1], c[n][0], c[n][n - 1], c[-1][0], c[-1][n - 1])\n    print(coins + add)", "from collections import Counter, defaultdict, deque\nimport heapq\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and (not force_list):\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e+17)\n    for ka in range(kase):\n        n = inp()\n        da = [inp() for i in range(2 * n)]\n        ans = 0\n        for i in range(n, 2 * n):\n            for j in range(n, 2 * n):\n                ans += da[i][j]\n        ans += min(da[0][n], da[0][2 * n - 1], da[n - 1][n], da[n - 1][2 * n - 1], da[n][0], da[n][n - 1], da[2 * n - 1][0], da[2 * n - 1][n - 1])\n        pans.append(str(ans))\n    print('\\n'.join(pans))\nmy_main()", "import sys\nsys.setrecursionlimit(10 ** 8)\ninput = sys.stdin.readline\nlinput = lambda : list(map(int, input().split()))\niinput = lambda : map(int, input().split())\nn = 0\n\ndef solve():\n    global dd, visited, arr, dp, n\n    n = int(input())\n    arr = [linput() for __ in range(2 * n)]\n    answer = 0\n    for i in range(n, 2 * n):\n        for j in range(n, 2 * n):\n            answer += arr[i][j]\n    answer += min(arr[n - 1][2 * n - 1], arr[2 * n - 1][n - 1], arr[n - 1][n], arr[n][n - 1], arr[0][n], arr[n][0], arr[0][2 * n - 1], arr[2 * n - 1][0])\n    print(answer)\nfor __ in range(int(input())):\n    solve()", "from sys import stdin, stdout\n\ndef input():\n    return stdin.readline().strip('\\n')\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mins = set()\n    cost = 0\n    for x in range(2 * n):\n        c = list(map(int, input().split()))\n        if x in {0, n - 1}:\n            mins.add(c[n])\n            mins.add(c[-1])\n        if x in {n, 2 * n - 1}:\n            mins.add(c[0])\n            mins.add(c[n - 1])\n        if x >= n:\n            cost += sum(c[n:])\n    print(cost + min(mins))", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = cin()\n    costneed = 0\n    mat = []\n    for i in range(n * 2):\n        mat.append(ari())\n    for i in range(n, 2 * n):\n        for j in range(n, 2 * n):\n            costneed += mat[i][j]\n    end = 2 * n - 1\n    corner = [(n - 1, n), (n - 1, end), (n, 0), (n, n - 1), (end, 0), (end, n - 1), (0, n), (0, end)]\n    maxi = float('inf')\n    for (x, y) in corner:\n        maxi = min(maxi, mat[x][y])\n    print(maxi + costneed)\n    return\nfor _ in range(test_case):\n    ans()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = []\n    for i in range(2 * n):\n        mat.append([int(x) for x in input().split()])\n    s = 0\n    for i in range(n, 2 * n):\n        for j in range(n, 2 * n):\n            s += mat[i][j]\n    ans = min(mat[n - 1][n], mat[n][n - 1], mat[0][2 * n - 1], mat[2 * n - 1][0], mat[n - 1][2 * n - 1], mat[2 * n - 1][n - 1], mat[n][0], mat[0][n])\n    print(s + ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    data = []\n    for i in range(2 * n):\n        data.append(list(map(int, input().split())))\n    total = 0\n    for x in range(n, 2 * n):\n        for y in range(n, 2 * n):\n            total += data[x][y]\n    special = min(data[0][n], data[0][-1], data[n - 1][n], data[n - 1][-1])\n    special = min(special, data[n][0], data[n][n - 1], data[-1][0], data[-1][n - 1])\n    print(total + special)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [[int(i) for i in input().split()] for j in range(2 * n)]\n    a = min(c[0][n], c[n][0], c[2 * n - 1][0], c[0][2 * n - 1], c[n - 1][2 * n - 1], c[2 * n - 1][n - 1], c[n][n - 1], c[n - 1][n])\n    for i in range(n):\n        for j in range(n):\n            a += c[i + n][j + n]\n    print(a)", "INF = 10 ** 20\nfor _ in range(int(input())):\n    n = int(input())\n    m = 2 * n\n    mtx = [[int(x) for x in input().split()] for i in range(m)]\n    finish_cost = 0\n    for i in range(n):\n        for j in range(n):\n            finish_cost += mtx[i + n][j + n]\n            mtx[i + n][j + n] = 0\n    add_cost = INF\n    for cell in ((n, 0), (-1, 0), (n, n - 1), (-1, n - 1), (0, n), (n - 1, n), (0, -1), (n - 1, -1)):\n        add_cost = min(add_cost, mtx[cell[0]][cell[1]])\n    print(finish_cost + add_cost)", "from sys import stdin\nints = (int(i) for i in stdin.read().split())\nt = next(ints)\nfor _ in range(t):\n    n = next(ints)\n    cost = []\n    for _ in range(2 * n):\n        row = [next(ints) for _ in range(2 * n)]\n        cost.append(row)\n    ans = min((cost[i][j] for (i, j) in [(n, n - 1), (n - 1, n), (2 * n - 1, 0), (0, 2 * n - 1), (0, n), (n, 0), (n - 1, 2 * n - 1), (2 * n - 1, n - 1)]))\n    for i in range(n, 2 * n):\n        for j in range(n, 2 * n):\n            ans += cost[i][j]\n    print(ans)"]