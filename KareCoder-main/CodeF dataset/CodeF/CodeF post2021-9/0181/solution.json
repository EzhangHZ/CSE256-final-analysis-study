["import sys, bisect, math\nfrom collections import deque, Counter\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, l) = map(int, input().split())\n    a = list(map(lambda x: list('0' * (l - len(bin(int(x))) + 2) + bin(int(x))[2:]), input().split()))\n    a = zip(*a)\n    s = ''\n    for i in a:\n        if i.count('1') > len(i) // 2:\n            s += '1'\n        else:\n            s += '0'\n    return int(s, 2)\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = a[0]\n    b = []\n    for i in a:\n        y = bin(i)[2:]\n        ans = '0' * (k - len(y)) + y\n        b.append(ans)\n    ans = ''\n    for i in zip(*b):\n        if i.count('1') > len(i) // 2:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    x = list(map(int, input().split()))\n    xbin = [bin(i)[2:] for i in x]\n    xbin = [(l - len(i)) * '0' + i for i in xbin]\n    res = [None] * l\n    for i in range(l):\n        p = [item[i] == '1' for item in xbin]\n        res[i] = '1' if sum(p) > n // 2 else '0'\n    print(int(''.join(res), 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = [bin(_)[2:].zfill(l) for _ in arr]\n    ans = ''\n    for _ in range(l):\n        temp = ''.join([i[_] for i in arr])\n        if temp.count('1') > temp.count('0'):\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))", "def intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlsit():\n    return input().split(' ')\n\ndef solve():\n    (n, l) = intlist()\n    x = intlist()\n    if n == 1:\n        return x[0]\n    bins = [list(bin(i)[2:]) for i in x]\n    for i in range(n):\n        bins[i] = (l - len(bins[i])) * ['0'] + bins[i]\n    bins = list(zip(*bins))\n    ans = ''\n    for b in bins:\n        if True:\n            if b.count('1') <= n // 2:\n                ans += '0'\n            else:\n                ans += '1'\n    return int(ans, 2)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "def minDistance(n, l, arr):\n    count = [0 for i in range(l)]\n    for num in arr:\n        b = bin(num)[2:]\n        diff = l - len(b)\n        for i in range(diff, l):\n            if b[i - diff] == '1':\n                count[i] += 1\n    b = ''\n    for i in range(l):\n        one = count[i]\n        zero = n - count[i]\n        if one > zero:\n            b += '1'\n        else:\n            b += '0'\n    return int(b, 2)\nt = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(minDistance(n, l, arr))", "import sys\n\ndef main(n, l, xs):\n    s = [0] * l\n    for x in xs:\n        bs = bin(x)[2:].rjust(l, '0')\n        for i in range(l):\n            if bs[i] == '1':\n                s[i] += 1\n    res = ''\n    for i in range(l):\n        if s[i] > n >> 1:\n            res += '1'\n        else:\n            res += '0'\n    return int(res, 2)\ntest_case_number = int(sys.stdin.readline())\nfor i in range(test_case_number):\n    first_line = sys.stdin.readline()\n    (n, l) = first_line.split(' ')\n    (n, l) = (int(n), int(l))\n    second_line = sys.stdin.readline()\n    xs = [int(x) for x in second_line.split(' ')]\n    data = main(n, l, xs)\n    sys.stdout.write(str(data) + '\\n')", "def ancient(n, l, array):\n    y = ''\n    for i in range(l):\n        mask = 1 << i\n        (cnt1, cnt2) = (0, 0)\n        for j in range(n):\n            x = array[j]\n            if x & mask != 0:\n                cnt1 += 1\n            else:\n                cnt2 += 1\n        if cnt1 > cnt2:\n            y = '1' + y\n        else:\n            y = '0' + y\n    y = int(y, 2)\n    print(y)\n    return 1\nt = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    array = list(map(int, input().split()))\n    ancient(n, l, array)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    (n, l) = [int(char) for char in input().split()]\n    arr = [int(char) for char in input().split()]\n    ans = ''\n    for bit in range(l):\n        mask = 1 << bit\n        (zero, one) = (0, 0)\n        for num in arr:\n            if mask & num:\n                one += 1\n            else:\n                zero += 1\n        string = '0' if zero >= one else '1'\n        ans = string + ans\n    return int(ans, 2)\nfor _ in range(int(input())):\n    print(solve())", "for q in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    binaries = []\n    for i in arr:\n        bina = bin(i)[2:]\n        required = l - len(bina)\n        bina = '0' * required + bina\n        binaries.append(bina[::-1])\n    ans = ''\n    for i in range(0, l):\n        count = 0\n        for value in binaries:\n            if value[i] == '1':\n                count += 1\n        if count > n - count:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans[::-1], 2))", "def to_bits(l, x):\n    return [1 if z == '1' else 0 for z in bin(x)[2:].zfill(l)]\n\ndef solve(n, l, x):\n    y = [to_bits(l, z) for z in x]\n    y = list(zip(*y))\n    y = ['1' if sum(z) > n // 2 else '0' for z in y]\n    y = int(''.join(y), base=2)\n    return y\nT = int(input())\nfor _ in range(T):\n    (n, l) = [int(z) for z in input().split()]\n    x = [int(z) for z in input().split()]\n    result = solve(n, l, x)\n    print(result)", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ss = f'{{0:0{l}b}}'\n    a = list(map(lambda x: ss.format(x), a))\n    tmp = ''\n    for i in range(l):\n        zeros = 0\n        ones = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n        if zeros >= ones:\n            tmp += '0'\n        else:\n            tmp += '1'\n    print(int(tmp, 2))", "testcases = int(input())\nfor _ in range(testcases):\n    (n, bit) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    ans = ''\n    for pos in range(bit):\n        one_count = 0\n        for num in nums:\n            if num & 1 << pos > 0:\n                one_count += 1\n        half = n // 2\n        if one_count > half:\n            cur_bit = '1'\n        else:\n            cur_bit = '0'\n        ans = cur_bit + ans\n    final_ans = int(ans, 2)\n    print(final_ans)", "def mod(s):\n    if s.count('0') >= s.count('1'):\n        return '0'\n    else:\n        return '1'\n\ndef intToBin(a):\n    return '{0:b}'.format(a)\n\ndef resize(string, leng):\n    if len(string) == leng:\n        return string\n    else:\n        return '0' * (leng - len(string)) + string\n\ndef minDist(arr, n, l):\n    for i in range(n):\n        arr[i] = intToBin(arr[i])\n    leng = 0\n    for i in range(n):\n        if len(arr[i]) > leng:\n            leng = len(arr[i])\n    for i in range(n):\n        arr[i] = resize(arr[i], leng)\n    ans = ''\n    for j in range(leng):\n        s = ''\n        for i in range(n):\n            s += arr[i][j]\n        ans += mod(s)\n    print(int(ans, 2))\n    return\nfor t in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    minDist(arr, n, l)", "t = int(input())\n\ndef to_bit(s, l):\n    res = 0\n    k = 0\n    for ch in s[::-1]:\n        if ch == '1':\n            res += 2 ** (int(ch) * k)\n        k += 1\n    return res\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    mas = []\n    te = input().split()\n    for m in te:\n        mas.append(format(int(m), f'0>{l}b'))\n    res = ''\n    for i in range(l):\n        k = 0\n        for p in mas:\n            if p[i] == '1':\n                k += 1\n        if k > n / 2:\n            res = res + '1'\n        else:\n            res = res + '0'\n    print(to_bit(res, l))", "from sys import exit\nt = int(input())\nwhile t:\n    (n, l) = map(int, input().split())\n    val = list(map(int, input('').split()))\n    length = len(bin(max(val))) - 2\n    val = ['{:030b}'.format(i) for i in val]\n    ans = ''\n    for i in range(30 - length, 30):\n        (a, b) = (0, 0)\n        for j in val:\n            if j[i] == '0':\n                a += 1\n            else:\n                b += 1\n        if a >= b:\n            ans += '0'\n        else:\n            ans += '1'\n    print(int(ans, 2))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [bin(i) for i in a]\n    b = [i[2:] for i in b]\n    for i in range(n):\n        if len(b[i]) < l:\n            c = l - len(b[i])\n            b[i] = '0' * c + b[i]\n    s = ''\n    for i in range(l):\n        c = [b[j][i] for j in range(n)]\n        if c.count('0') >= c.count('1'):\n            s = s + '0'\n        else:\n            s = s + '1'\n    print(int(s, 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    x = list(map(int, input().split()))\n    i = 2 ** (l - 1)\n    res = 0\n    while i > 0:\n        a = 0\n        for j in x:\n            a += 1 if j & i else 0\n        res <<= 1\n        res += 1 if a > n - a else 0\n        i >>= 1\n    print(res)", "import math\nt = int(input())\n\ndef getBinary(word, max_len):\n    binValue = str(bin(word).split('b')[1])\n    return '0' * (max_len - len(binValue)) + binValue\nwhile t != 0:\n    (n, l) = list(map(int, input().split()))\n    words = list(map(int, input().split()))\n    max_word = max(words)\n    max_bin_len = len(bin(max_word).split('b')[1])\n    bin_list = []\n    for w in words:\n        bin_list.append(getBinary(w, max_bin_len))\n    res = ''\n    for i in range(max_bin_len):\n        cnt0 = 0\n        for w in bin_list:\n            if w[i] == '0':\n                cnt0 += 1\n        if cnt0 >= math.ceil(n / 2):\n            res += '0'\n        else:\n            res += '1'\n    print(int(res, 2))\n    t -= 1", "def get_y(li, n):\n    ans = ''\n    for i in range(-1, -n - 1, -1):\n        count_0 = 0\n        count_1 = 0\n        for j in range(len(li)):\n            try:\n                if li[j][i] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            except:\n                count_0 += 1\n        if count_1 > count_0:\n            ans = '1' + ans\n        else:\n            ans = '0' + ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split(' '))\n    x = list(map(int, input().split(' ')))\n    max_len = len(bin(max(x)).replace('0b', ''))\n    x = [bin(ele).replace('0b', '') for ele in x]\n    y = get_y(x, max_len)\n    print(int(y, 2))", "def solve(word, dp):\n    i = 0\n    while word > 0:\n        if word % 2 == 1:\n            dp[i] += 1\n        i += 1\n        word = word // 2\n    return dp\n\ndef get(val, dp, nn):\n    ans = 0\n    n = 1\n    for i in dp:\n        if i > nn // 2:\n            ans += n\n        n = n * 2\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, l) = [int(i) for i in input().split()]\n    dp = [0 for i in range(l)]\n    arr = [int(i) for i in input().split()]\n    for word in arr:\n        dp = solve(word, dp)\n    index = 0\n    for i in range(len(dp)):\n        if dp[i] != 0:\n            index = i\n    maxi = max(dp)\n    ans = get(maxi, dp, n)\n    print(ans)", "from functools import reduce\nfor t in range(int(input())):\n    (n, l) = map(int, input().split())\n    forms = list(map(lambda x: bin(int(x))[2:].rjust(l, '0'), input().split()))\n    answer_string = ''\n    for i in range(l):\n        symbols = ''.join([forms[j][i] for j in range(len(forms))])\n        answer_string += str(int(symbols.count('1') > symbols.count('0')))\n    print(int(answer_string, 2))", "def solve(n, l, blist):\n    r = ''\n    for i in range(l):\n        (c0, c1) = (0, 0)\n        for j in range(n):\n            if blist[j][i] == '0':\n                c0 += 1\n            else:\n                c1 += 1\n        if c0 >= c1:\n            r += '0'\n        else:\n            r += '1'\n    print(int(r, 2))\ntc = int(input())\nfor _ in range(tc):\n    (n, l) = map(int, input().split())\n    xlist = list(map(int, input().split()))\n    blist = ['{0:b}'.format(i) for i in xlist]\n    blist = ['0' * abs(l - len(i)) + i if len(i) < l else i for i in blist]\n    solve(n, l, blist)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef main():\n    for _ in range(int(input())):\n        (n, l) = [int(item) for item in input().split()]\n        arr = [int(item) for item in input().split()]\n        ans = 0\n        for i in range(l):\n            count = 0\n            for ang in arr:\n                if ang | 1 << i == ang:\n                    count += 1\n            if count > n // 2:\n                ans = ans | 1 << i\n        print(ans)\nmain()", "from math import ceil, log10\nimport bisect\nimport math\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom collections import defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a = []\n    for i in arr:\n        k = bin(i)[2:]\n        a.append(k.zfill(l))\n    ans = ''\n    set_bits = []\n    for j in range(l):\n        set_bit = 0\n        for i in a:\n            if i[j] == '1':\n                set_bit += 1\n        set_bits.append(set_bit)\n    for i in set_bits:\n        k = n - i\n        if k >= i:\n            ans += '0'\n        else:\n            ans += '1'\n    print(int(ans, 2))", "for _ in range(int(input())):\n    n = int(input().split()[1])\n    store = list(map(int, input().split()))\n    ans = ''\n    store = [bin(x)[2:].zfill(n) for x in store]\n    for x in zip(*store):\n        s = sum(map(int, x))\n        if s * 2 > len(x):\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))", "import sys\n\ndef main():\n    num_tests = int(sys.stdin.readline())\n    for _ in range(num_tests):\n        (num_forms, num_letters) = map(int, sys.stdin.readline().split())\n        forms = [convert(int(number), num_letters) for number in sys.stdin.readline().split()]\n        assert len(forms) == num_forms\n        print(solve(forms, num_letters))\n\ndef convert(form, num_letters):\n    return bin(form)[2:].rjust(num_letters, '0')\n\ndef solve(forms, num_letters):\n    one_counts = [0] * num_letters\n    zero_counts = [0] * num_letters\n    for i in range(num_letters):\n        for a_form in forms:\n            ch = a_form[i]\n            if ch == '1':\n                one_counts[i] += 1\n            else:\n                zero_counts[i] += 1\n    result = ['0'] * num_letters\n    for i in range(num_letters):\n        if one_counts[i] > zero_counts[i]:\n            result[i] = '1'\n    return int(''.join(result), 2)\nmain()", "def solve():\n    (n, length) = map(int, input().split())\n    nums = map(int, input().split())\n    binary = []\n    for num in nums:\n        b = bin(num)[2:]\n        b = '0' * (length - len(b)) + b\n        binary += [b]\n    answer = ''\n    for i in range(length):\n        zeros = 0\n        ones = 0\n        for b in binary:\n            if b[i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n        if zeros >= ones:\n            answer += '0'\n        else:\n            answer += '1'\n    answer = int(answer, 2)\n    print(answer)\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\n\ndef find_form():\n    (n, l) = [int(x) for x in input().split()]\n    count = [defaultdict(int) for _ in range(l)]\n    ans = '0b'\n    words = list(input().split())\n    for i in range(n):\n        word = words[i]\n        word = bin(int(word))[2:]\n        word = (l - len(word)) * '0' + word\n        for (j, letter) in enumerate(word):\n            count[j][letter] += 1\n    for j in range(l):\n        if count[j]['0'] >= count[j]['1']:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(int(find_form(), 2))", "for _ in range(int(input())):\n    (n, b) = map(int, input().split())\n    arr = (*map(lambda x: bin(int(x))[2:].zfill(b), input().split()),)\n    ans = ''\n    for bit in range(b):\n        if sum((num[bit] == '1' for num in arr)) > n // 2:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))", "def solution():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * k\n    for x in a:\n        s = bin(x)[2:][::-1]\n        for i in range(len(s)):\n            if s[i] == '1':\n                b[i] += 1\n    ans = 0\n    for i in range(k):\n        if b[i] * 2 > n:\n            ans |= 1 << i\n    print(ans)\n\ndef main():\n    t = int(input())\n    while t > 0:\n        solution()\n        t -= 1\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    bin_eq = []\n    for i in nums:\n        temp = bin(i)[2:].zfill(l)\n        bin_eq.append(temp)\n    ans = ''\n    for i in range(l):\n        z = 0\n        o = 0\n        for j in bin_eq:\n            if j[i] == '0':\n                z += 1\n            else:\n                o += 1\n        if z >= o:\n            ans += '0'\n        else:\n            ans += '1'\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(l):\n        t = 0\n        for j in a:\n            if j & 1 << i:\n                t += 1\n        if t > n - t:\n            ans += 1 << i\n    print(ans)", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    l = inputs[1]\n    list1 = [int(num) for num in input().split()]\n    list2 = [0 for i in range(0, l)]\n    for i in range(0, len(list1)):\n        bini = bin(list1[i])[2:]\n        k = l - 1\n        for j in range(len(bini) - 1, -1, -1):\n            if bini[j] == '1':\n                list2[k] += 1\n            k -= 1\n    s = ''\n    for i in range(0, len(list2)):\n        if list2[i] > n / 2:\n            s += '1'\n        else:\n            s += '0'\n    print(int(s, 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(l):\n        cnt = 0\n        for el in arr:\n            if el & 1 << i:\n                cnt += 1\n        if cnt > n - cnt:\n            ans += 1 << i\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, l) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    aa = 0\n    p = 1\n    for s in range(l):\n        k = 0\n        for r in a:\n            if p & r != 0:\n                k += 1\n        if k > n // 2:\n            aa += p\n        p *= 2\n    print(aa)", "def toBin(n, base, ans):\n    a = 2 ** (base - 1)\n    for i in range(base):\n        if n >= a:\n            n -= a\n            ans[i][1] += 1\n        else:\n            ans[i][0] += 1\n        a //= 2\nfor t in range(int(input())):\n    (n, l) = map(int, input().split())\n    ans = [[0, 0] for i in range(l)]\n    inp = list(map(int, input().split()))\n    for n in inp:\n        toBin(n, l, ans)\n    s = ''\n    for i in range(l):\n        if ans[i][0] >= ans[i][1]:\n            s += '0'\n        else:\n            s += '1'\n    print(int(s, 2))", "t = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    li = [0] * 31\n    for i in range(n):\n        bi = bin(a[i])\n        bi = bi[2:]\n        bi = bi[::-1]\n        le = len(bi)\n        for j in range(le):\n            if bi[j] == '1':\n                li[j] += 1\n    ans = 0\n    for i in range(31):\n        if n % 2 == 0:\n            if li[i] > n // 2:\n                ans += 2 ** i\n        elif li[i] > n // 2:\n            ans += 2 ** i\n    print(ans)", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    ans = ''\n    for i in range(l):\n        c = 0\n        for x in arr:\n            if x & 1 << i != 0:\n                c += 1\n        if c >= n // 2 + 1:\n            ans = '1' + ans\n        else:\n            ans = '0' + ans\n    print(int(ans, 2))", "T = int(input())\nfor testcase in range(1, T + 1):\n    (n, l) = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    count = [0 for i in range(l)]\n    for v in x:\n        b = bin(v)\n        j = 0\n        for i in range(len(b) - 1, 1, -1):\n            if b[i] == '1':\n                count[j] += 1\n            j += 1\n    res = ''\n    for i in range(l):\n        if count[i] > n - count[i]:\n            res = '1' + res\n        else:\n            res = '0' + res\n    print(int(res, 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    c = []\n    y = 0\n    ans = ''\n    for i in range(33):\n        y = 1 << i\n        ct0 = 0\n        ct1 = 0\n        for k in l:\n            if k & y:\n                ct1 += 1\n            else:\n                ct0 += 1\n        if ct1 > ct0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans[::-1], 2))", "def d(n, k):\n    return '0' * (k - len(bin(n).replace('0b', ''))) + bin(n).replace('0b', '')\n\ndef O(l, p):\n    x = 0\n    for i in range(len(l)):\n        if l[i][p] == '1':\n            x = x + 1\n    return x\n\ndef Z(l, p):\n    x = 0\n    for i in range(len(l)):\n        if l[i][p] == '0':\n            x = x + 1\n    return x\n\ndef g(l, k):\n    s = []\n    x = ''\n    for i in range(len(l)):\n        s = s + [d(l[i], k)]\n    for j in range(k):\n        if O(s, j) > Z(s, j):\n            x = x + '1'\n        else:\n            x = x + '0'\n    return int(x, 2)\nt = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    q = list(map(int, input().split()))\n    print(g(q, l))", "t = int(input())\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    X = list(map(int, input().split()))\n    if len(set(X)) == 1:\n        print(X[0])\n        continue\n    mx = max(X)\n    lmx = len(bin(mx)) - 2\n    cnt = [0] * lmx\n    for x in X:\n        for i in range(lmx):\n            if x >> i & 1 == 0:\n                cnt[i] += 1\n    ans = 0\n    mn = n // 2 if n % 2 else n // 2 - 1\n    for i in range(lmx):\n        if cnt[i] <= mn:\n            ans |= 1 << i\n    print(ans)", "def solve():\n    (n, l) = map(int, input().split())\n    a = list(input().split())\n    for i in range(len(a)):\n        a[i] = str(bin(int(a[i]))[2:]).rjust(l, '0')\n    dem_0 = 0\n    dem_1 = 0\n    ans = []\n    for i in range(l):\n        dem_0 = 0\n        dem_1 = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                dem_0 += 1\n            else:\n                dem_1 += 1\n        if dem_0 >= dem_1:\n            ans.append(0)\n        else:\n            ans.append(1)\n    string = ''\n    for i in ans:\n        string += str(i)\n    print(int(string, 2))\nfor i in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n\n    def intToBin(x):\n        return bin(int(x))[2:].rjust(l, '0')\n    arr = list(map(intToBin, input().split()))\n    finArr = []\n    for i in range(l):\n        s = ''\n        for j in arr:\n            s += j[i]\n        finArr.append(s)\n    ans = ''\n    for i in finArr:\n        ans += '1' if i.count('1') > i.count('0') else '0'\n    print(int(ans, 2))", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, l) = map(int, input().split())\n    x = [int(i) for i in input().split()]\n    res = 0\n    for i in range(l):\n        c1 = 0\n        for w in range(n):\n            c1 += x[w] % 2\n            x[w] //= 2\n        if c1 * 2 > n:\n            res += 2 ** i\n    ans.append(res)\nfor i in ans:\n    print(i)", "t = int(input())\n\ndef jj(nm):\n    return bin(nm)[2:]\nfor i in range(t):\n    (t, nfill) = list(map(int, input().split()))\n\n    def zfl(sr: str):\n        return sr.zfill(nfill)\n    inp = list(map(zfl, map(jj, map(int, input().split()))))\n    ans = ''\n    for i in range(nfill):\n        zerotime = 0\n        onetime = 0\n        for j in range(len(inp)):\n            if inp[j][i] == '1':\n                onetime += 1\n            else:\n                zerotime += 1\n        ans += '1' if onetime > zerotime else '0'\n    print(int(ans, 2))", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef binaryToDecimal(binary):\n    binary1 = binary\n    (decimal, i, n) = (0, 0, 0)\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    bits = []\n    count = []\n    for i in l:\n        bits.append(decimalToBinary(i))\n    for c in range(n):\n        if len(bits[c]) != k:\n            bits[c] = (k - len(bits[c])) * '0' + bits[c]\n    y = 0\n    count1 = 0\n    count0 = 0\n    for t in range(k):\n        for p in range(n):\n            if bits[p][t] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        if count0 >= count1:\n            count.append('0')\n        else:\n            count.append('1')\n        count1 = 0\n        count0 = 0\n    print(binaryToDecimal(int(''.join(count))))", "t = int(input())\nfor i in range(0, t):\n    (n, l) = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    m = []\n    for ele in b:\n        c.append(ele)\n    for ele in b:\n        d = bin(ele)\n        k = d[2:]\n        if len(k) == l:\n            m.append(k)\n        else:\n            while len(k) != l:\n                k = '0' + k\n            m.append(k)\n    count = 0\n    num = 0\n    f = []\n    n = []\n    for ele in range(0, l):\n        count = 0\n        num = 0\n        for j in m:\n            if j[ele] == '0':\n                count = count + 1\n            else:\n                num = num + 1\n        if count >= num:\n            f.append('0')\n        else:\n            f.append('1')\n    j = ''\n    for ele in f:\n        j = j + ele\n    print(int(j, 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = []\n    s = ''\n    for i in l:\n        l2.append(bin(i).lstrip('0b').rjust(k, '0'))\n    l3 = [0] * k\n    for i in l2:\n        for j in range(k):\n            if i[j] == '1':\n                l3[j] += 1\n    for i in range(k):\n        m = n - l3[i]\n        if m < l3[i]:\n            s += '1'\n        else:\n            s += '0'\n    print(int(s, 2))", "t = int(input())\n\ndef binary(n, l):\n    s = bin(n)\n    s1 = s[2:]\n    if len(s1) != l:\n        s1 = '0' * (l - len(s1)) + s1\n    return s1\n\ndef binToDeci(y, l):\n    res = 0\n    for i in range(l):\n        res += 2 ** (l - 1 - i) * int(y[i])\n    return res\nfor i in range(t):\n    temp = [int(a) for a in input().split()]\n    binArr = []\n    n = temp[0]\n    l = temp[1]\n    y = '0' * l\n    arr = [int(b) for b in input().split()]\n    for c in arr:\n        binArr.append(binary(c, l))\n    for d in range(l):\n        zeroCount = 0\n        oneCount = 0\n        for e in binArr:\n            if e[d] == '0':\n                zeroCount += 1\n            else:\n                oneCount += 1\n        if zeroCount < oneCount:\n            y = list(y)\n            y[d] = '1'\n            y = ''.join(y)\n    print(binToDeci(y, l))", "for tc in range(int(input())):\n    (n, l) = map(int, input().split())\n    A = list(map(int, input().split()))\n    L = len(bin(max(A)).replace('0b', ''))\n    Binary = []\n    for i in A:\n        x = bin(i).replace('0b', '')\n        while len(x) != L:\n            x = '0' + x\n        Binary.append(x[::-1])\n    res = ''\n    for i in range(L):\n        D = {'0': 0, '1': 0}\n        for j in Binary:\n            D[j[i]] += 1\n        if D['0'] >= D['1']:\n            res += '0'\n        else:\n            res += '1'\n    print(int(res[::-1], 2))", "for _ in range(int(input())):\n    (n, o) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = len(bin(max(a))) - 2\n    m = []\n    for i in a:\n        m.append(bin(i).replace('0b', '').zfill(b))\n    m2 = []\n    for j in range(b):\n        (c0, c1) = (0, 0)\n        for z in range(n):\n            if m[z][j] == '1':\n                c1 += 1\n            else:\n                c0 += 1\n        if c0 >= c1:\n            m2.append('0')\n        else:\n            m2.append('1')\n    w = ''.join(m2)\n    print(int(w, 2))", "cases = int(input())\nfinalstring = ''\nfor case in range(cases):\n    nl = [int(x) for x in input().split(' ')]\n    binarynums0 = ['{0:b}'.format(int(y)) for y in input().split(' ')]\n    binarynums = []\n    for bin in binarynums0:\n        binarynums.append('0' * (nl[1] - len(bin)) + bin)\n    finalvalue = ''\n    for index in range(nl[1]):\n        totalOne = 0\n        totalZero = 0\n        for item in binarynums:\n            if item[index] == '1':\n                totalOne += 1\n            else:\n                totalZero += 1\n        if totalOne > totalZero:\n            finalvalue += '1'\n        else:\n            finalvalue += '0'\n    finalvalue = str(int(finalvalue, 2))\n    finalstring += finalvalue + '\\n'\nprint(finalstring)", "t = int(input())\nfor i in range(t):\n    (n, l) = map(int, input().split())\n    x = list(map(int, input().split()))\n    a = []\n    for j in range(n):\n        y = bin(x[j])\n        a.append(y.lstrip('0b'))\n    m = max(x)\n    b1 = bin(m)\n    b2 = b1.lstrip('0b')\n    l1 = len(b2)\n    if len(set(x)) == 1 and x[0] == 0:\n        print(0)\n    else:\n        for j in range(n):\n            if len(a[j]) != l1:\n                v = l1 - len(a[j])\n                a[j] = '0' * v + a[j]\n        ans = ''\n        for j in range(l1):\n            c1 = 0\n            c2 = 0\n            for k in range(n):\n                if a[k][j] == '1':\n                    c1 = c1 + 1\n                else:\n                    c2 = c2 + 1\n            if c2 >= c1:\n                ans = ans + '0'\n            else:\n                ans = ans + '1'\n        print(int(ans, 2))", "loopcount = int(input())\nfor loop in range(loopcount):\n    y = input()\n    y = y.split(' ')\n    y = list(map(int, y))\n    x = input()\n    x = x.split(' ')\n    x = list(map(int, x))\n    binaryList = []\n    for decimal in x:\n        binary = bin(decimal).replace('0b', '')\n        if len(binary) <= 0:\n            binaryList.append(binary[0:y[1]])\n        else:\n            zero = ''\n            for i in range(y[1] - len(binary)):\n                zero += '0'\n            binary = zero + binary\n            binaryList.append(binary)\n    resultbin = ''\n    for i in range(y[1]):\n        zero = 0\n        one = 0\n        for binary in binaryList:\n            if binary[i] == '0':\n                zero += 1\n            else:\n                one += 1\n        if zero >= one:\n            resultbin += '0'\n        else:\n            resultbin += '1'\n    print(int(resultbin, 2))", "try:\n    for _ in range(int(input())):\n        (n, l) = map(int, input().split())\n        lst = list(map(int, input().split()))\n        l = len(bin(max(lst))[2:])\n        for i in range(n):\n            lst[i] = bin(lst[i])[2:]\n            if len(lst[i]) != l:\n                h = l - len(lst[i])\n                m = '0' * h\n                lst[i] = m + lst[i]\n        ans = [str(0) for i in range(l)]\n        d = n // 2\n        for i in range(l):\n            count0 = 0\n            count1 = 0\n            for j in lst:\n                if j[i] == '0':\n                    count0 += 1\n                else:\n                    count1 += 1\n            if count1 > d:\n                ans[i] = 1\n            else:\n                ans[i] = 0\n        p = 0\n        ans.reverse()\n        for i in range(l):\n            if ans[i] == 1:\n                p += 2 ** i\n        print(p)\nexcept:\n    pass", "T = int(input())\nfor t in range(T):\n    (n, l) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    maxi = max(arr)\n    tempBin = bin(maxi)[2:]\n    ln = len(str(tempBin))\n    temp = list()\n    for i in arr:\n        d2b = bin(i)[2:]\n        tmpLen = len(str(d2b))\n        diff = ln - tmpLen\n        temp.append('0' * diff + str(d2b))\n    string = ''\n    tmpLen = len(temp)\n    zeros = 0\n    ones = 0\n    for i in range(ln):\n        for j in temp:\n            if j[i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n        if ones > zeros:\n            string += '1'\n        else:\n            string += '0'\n        zeros = 0\n        ones = 0\n    b = int(string, 2)\n    print(b)", "t = int(input())\nres = []\nfor test in range(t):\n    (n, l) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    bits = [0] * l\n    for num in nums:\n        temp = '{0:b}'.format(num)\n        n0 = l - len(temp)\n        temp = '0' * n0 + temp\n        for i in range(l):\n            if temp[i] == '1':\n                bits[i] += 1\n    ans = ''\n    for i in bits:\n        if i > n // 2:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))", "def funct(n, l, words):\n    result = [0] * l\n    for word in words:\n        word = bin(word)[2:]\n        word = word[::-1]\n        for (digit_idx, digit) in enumerate(word):\n            result[digit_idx] += int(digit)\n\n    def divide_and_round(x):\n        x = x / n\n        if x > 0.5:\n            return 1\n        return 0\n    result = list(map(lambda a: divide_and_round(a), result[::-1]))\n    return int(''.join((str(i) for i in result)), 2)\nfor _ in range(int(input())):\n    n_and_l = input()\n    (n, l) = list(map(int, n_and_l.split()))\n    words = input()\n    words = list(map(int, words.split()))\n    print(funct(n, l, words))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, l) = [int(x) for x in sys.stdin.readline().split()]\n    forms = [int(x) for x in sys.stdin.readline().split()]\n    binary_forms = [f'{x:0{l}b}' for x in forms]\n    binary_result = ''\n    for j in range(l):\n        zero_count = 0\n        one_count = 0\n        for k in range(n):\n            if binary_forms[k][j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n        binary_result += '1' if zero_count < one_count else '0'\n    print(int(binary_result, 2))", "def isint(n):\n    return int(n) == n\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        (n, l) = list(map(int, input().split()))\n        xs = list(map(int, input().split()))\n        bxs = map(lambda x: bin(x)[2:].zfill(l), xs)\n        ans = map(lambda x: '1' if sum(map(int, x)) > n / 2 else '0', list(zip(*bxs)))\n        print(int(''.join(ans), base=2))\nsolve()", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [list(bin(a[i])[2:].zfill(l)) for i in range(n)]\n    ans = ''\n    for j in range(l):\n        f = len([b[i][j] for i in range(n) if b[i][j] == '0'])\n        ans += '0' if f >= n - f else '1'\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = [bin(i)[2:] for i in arr]\n    max_len = 0\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n    for i in range(len(arr)):\n        arr[i] = '0' * (max_len - len(arr[i])) + arr[i]\n    ans = 0\n    for i in range(max_len):\n        count1 = 0\n        for j in range(n):\n            if arr[j][i] == '1':\n                count1 += 1\n        if count1 > n - count1:\n            ans = ans * 2 + 1\n        else:\n            ans = ans * 2\n    print(ans)", "for i in range(int(input())):\n    (n, ll) = [int(s) for s in input().split()]\n    arr = [bin(int(x))[2:].zfill(ll) for x in input().split()]\n    a = ''\n    for digit in range(ll):\n        if sum((nn[digit] == '1' for nn in arr)) > n // 2:\n            a += '1'\n        else:\n            a += '0'\n    print(int(a, 2))", "for _ in range(int(input())):\n    (n, e) = map(int, input().split())\n    arr = [f\"{'0' * (e - len(str(bin(x))) + 2)}{str(bin(x))[2:]}\" for x in map(int, input().split())]\n    ans = ''\n    for i in range(e):\n        count_0 = count_1 = 0\n        for x in arr:\n            if x[i] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n        ans += '1' if count_1 > count_0 else '0'\n    print(int(ans, 2))", "import io, os\nimport sys\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    x = list(map(int, input().split()))\n    ans = 0\n    for i in range(l):\n        cnt = 0\n        for f in x:\n            if f & 1 << i:\n                cnt += 1\n        if cnt > n - cnt:\n            ans += 1 << i\n    print(ans)", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\n\ndef binary(s):\n    s = str(bin(s))\n    s = s[2:]\n    s = s[::-1]\n    return s\nfor _ in range(int(input().strip())):\n    (n, l) = inp_multi()\n    x = inp_lis()\n    a = [0] * l\n    for each in x:\n        s = binary(each)\n        for i in range(len(s)):\n            if s[i] == '1':\n                a[i] += 1\n    mid = n // 2 + 1\n    ans = 0\n    for (i, each) in enumerate(a):\n        if each >= mid:\n            ans += 2 ** i\n    print(ans)", "from math import floor as xx\nfrom operator import add as XX\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    (a, x, XXX) = ([0 for _ in range(l)], 0, 0)\n    b = list(map(int, input().split()))\n    for X in b:\n        xxxx = list(map(int, bin(X)[2:].zfill(l)))\n        a = list(map(XX, xxxx, a))\n    a = a[::-1]\n    for X in range(len(a)):\n        x += pow(2, X) if a[X] > xx(n / 2) else XXX\n    print(x)", "def solve():\n    (n, l) = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    ans = 0\n    for i in range(l):\n        one = 0\n        for element in x:\n            if element & 1 << i:\n                one += 1\n        if one > n / 2:\n            ans = ans | 1 << i\n    print(ans)\nq = int(input())\nfor i in range(q):\n    solve()", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = 0\n    for i in range(l):\n        c = 0\n        for j in x:\n            if j & 1 << i:\n                c += 1\n        if c > n - c:\n            y += 1 << i\n    print(y)", "for _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    x = [*map(int, input().split())]\n    ans = []\n    for i in range(l):\n        if sum((not j & 1 << i for j in x)) < (n + 1) // 2:\n            ans.insert(0, '1')\n        else:\n            ans.insert(0, '0')\n    print(int(''.join(ans), 2))", "for _ in range(int(input())):\n    (n, l) = map(int, input().split(' '))\n    arr = [str(bin(int(i)))[2:] for i in input().split(' ')]\n    for i in range(n):\n        arr[i] = '0' * (l - len(arr[i])) + arr[i]\n    ans = ''\n    for i in range(l):\n        (z, o) = (0, 0)\n        for j in range(n):\n            if arr[j][i] == '0':\n                z += 1\n            else:\n                o += 1\n        ans += '1' if o > z else '0'\n    print(int(ans, 2))"]