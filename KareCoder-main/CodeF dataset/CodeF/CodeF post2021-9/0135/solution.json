["import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n    (a, b, c) = [int(i) for i in input().split(' ')]\n    x = a + b + c\n    y = b + c\n    z = c\n    print(f'{x} {y} {z}')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    if a >= b and a >= c:\n        print(a, a + b + c, a + c)\n    elif b >= a and b >= c:\n        print(a + b, b, a + b + c)\n    else:\n        print(a + b + c, b + c, c)", "t = int(input())\nout = ''\nfor _ in range(t):\n    (a, b, c) = [int(x) for x in input().split()]\n    out += str(c + b + a) + ' ' + str(c + b) + ' ' + str(c) + '\\n'\nprint(out)", "n = int(input())\nret = ''\nfor i in range(n):\n    (a, b, c) = [int(k) for k in input().split(' ')]\n    ret += str(a + b + c) + ' ' + str(b + c) + ' ' + str(c) + '\\n'\nprint(ret)", "import sys\n\ndef mingidit(i):\n    digits = list(str(i))\n    if len(digits) == 2:\n        return int(digits[-1])\n    return int(min(digits))\n\ndef ZXC(a, b, c):\n    return [a + b + c, c + b, c]\nr = int(sys.stdin.readline())\nfor j in range(r):\n    (a, b, c) = [int(x) for x in sys.stdin.readline().split()]\n    print(' '.join([str(x) for x in ZXC(a, b, c)]))", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    inp += [input()]\nfor s in inp:\n    arr = [int(n) for n in s.split()]\n    print(str(arr[0] + arr[1] + arr[2]) + ' ' + str(arr[1] + arr[2]) + ' ' + str(arr[2]))", "import sys, math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        (a, b, c) = get_ints()\n        x = a + b + c\n        y = b + c\n        z = c\n        print(x, y, z)\nmain()", "import sys\nfor i in range(int(sys.stdin.readline())):\n\n    def get_ints():\n        return map(int, sys.stdin.readline().strip().split())\n\n    def single_ints():\n        return int(sys.stdin.readline())\n\n    def p(a):\n        return sys.stdout.write(a)\n    (a, b, c) = get_ints()\n    z = c\n    y = b + z\n    x = y + a\n    p(str(x) + ' ' + str(y) + ' ' + str(z) + '\\n')", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    z = c\n    y = z + b\n    x = y + a\n    sys.stdout.write(str(x) + ' ' + str(y) + ' ' + str(z) + '\\n')", "from sys import stdin\nfrom math import log, floor, ceil, gcd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        (a, b, c) = rv(int)\n        z = c\n        y = b + c\n        x = a + b + c\n        print(x, y, z)\nmain()", "t = int(input())\nr = []\nfor i in range(t):\n    n = input()\n    (a, b, c) = [int(j) for j in n.split()]\n    z = c\n    y = z + b\n    x = y + a\n    r.append(f'{x} {y} {z}')\nfor i in r:\n    print(i)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nt = int(sys.stdin.readline())\narr = []\nfor n in range(t):\n    arr.append(get_ints())\nfor n in range(t):\n    z = arr[n][2]\n    y = z + arr[n][1]\n    x = y + arr[n][0]\n    sys.stdout.write('{} {} {}\\n'.format(x, y, z))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef single_ints():\n    return int(sys.stdin.readline())\n\ndef p(a):\n    return sys.stdout.write(a)\nt = single_ints()\nfor i in range(t):\n    (a, b, c) = get_ints()\n    z = c\n    y = z + b\n    x = a + y\n    print(x, y, z)", "for s in [*open(0)][1::1]:\n    (a, b, c) = map(int, s.split())\n    z = (b + c - 1) // c * c\n    print(z + b + a, z + b, z)", "import sys\nimport bisect\nimport math\nimport itertools\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef in1():\n    return int(input())\nfor _ in range(in1()):\n    (a, b, c) = get_line()\n    z = c\n    y = b + z\n    x = y + a\n    print(x, y, z)", "import sys\ninput = sys.stdin.readline\ntcs = int(input().strip())\nfor tc in range(tcs):\n    (a, b, c) = tuple(map(int, input().split()))\n    print(a + b + c, b + c, c)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    Z = c\n    Y = Z + b\n    X = Y + a\n    print(X, Y, Z)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (a, b, c) = map(int, input().split())\n    (x, y, z) = (a + b + c, b + c, c)\n    return (x, y, z)\nfor _ in range(int(input())):\n    print(*solve())", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nfor _ in range(int(input().strip())):\n    (a, b, c) = inp_multi()\n    print(a + b + c, b + c, c, sep=' ')", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    (a, b, c) = mp()\n    s = a + b + c\n    print(s, s - a, s - a - b)", "import sys\ninput = lambda : sys.stdin.readline().strip()\na = int(input())\nfor i in range(a):\n    (a, b, c) = list(map(int, input().split()))\n    print(a + b + c, c + b, c)", "lis = []\nfor i in range(int(input())):\n    (a, b, c) = map(int, input().split(' '))\n    z = c\n    y = b + c\n    x = a + y\n    d = str(x) + ' ' + str(y) + ' ' + str(z)\n    lis.append(d)\nprint(*lis, sep='\\n')", "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    (x, y, z) = (a + b + c, b + c, c)\n    print(x, y, z)", "def z_mod_x():\n    n = int(input())\n    w_lst = []\n    for i in range(n):\n        lst = []\n        (a, b, c) = map(int, input().split())\n        lst.append(a + b + c)\n        lst.append(b + c)\n        lst.append(c)\n        w_lst.append(lst)\n    for ele in w_lst:\n        for i in ele:\n            print(i, end=' ')\n        print()\nz_mod_x()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    print(a + b + c, b + c, c)", "import sys\ninput = sys.stdin.readline\ntcs = int(input().strip())\nfor tc in range(tcs):\n    (a, b, c) = tuple(map(int, input().split()))\n    print(a + b + c, b + c, c)", "import sys\nLI = lambda : list(map(int, sys.stdin.readline().split()))\nfor i in range(int(input())):\n    numbers = LI()\n    sorted(numbers)\n    num1 = numbers[0]\n    num2 = numbers[1]\n    num3 = numbers[2]\n    print(sum(numbers), end=' ')\n    print(num3 + num2, end=' ')\n    print(num3)", "n = int(input())\na = []\nfor i in range(n):\n    a.append(input().split(' '))\nfor arr in a:\n    a = int(arr[0])\n    b = int(arr[1])\n    c = int(arr[2])\n    print(a + b + c, b + c, c)", "import sys\ninput = sys.stdin.readline\ntcs = int(input().strip())\nfor tc in range(tcs):\n    (a, b, c) = tuple(map(int, input().split()))\n    print(a + b + c, b + c, c)", "t = int(input())\nA = []\nfor i in range(t):\n    A.append(list(map(int, input().split())))\nfor i in A:\n    i.sort()\n    (a, b, c) = (i[0], i[1], i[2])\n    print(a + b + c, b + c, c)", "def sol(a, b, c):\n    x = a + b + c\n    y = b + c\n    z = c\n    res = []\n    res.append(x)\n    res.append(y)\n    res.append(z)\n    return res\n\ndef solution():\n    t = int(input())\n    output = []\n    for i in range(t):\n        buf = input().split()\n        a = int(buf[0])\n        b = int(buf[1])\n        c = int(buf[2])\n        output.append(sol(a, b, c))\n    print()\n    for i in range(t):\n        print(output[i][0], output[i][1], output[i][2])\nsolution()", "n = int(input())\ntests = []\nfor _ in range(n):\n    tests.append(list(map(int, input().split())))\nfor m in tests:\n    z = m[2]\n    y = z + m[1]\n    x = y + m[0]\n    print(x, y, z)", "n = int(input())\ntestcases = []\nfor _ in range(n):\n    testcases.append(list(map(int, input().split())))\nfor m in testcases:\n    z = m[2]\n    y = z + m[1]\n    x = y + m[0]\n    print(x, y, z)", "n = int(input())\nA = []\nfor i in range(n):\n    arr = list(map(int, input().split()))\n    A.append(arr)\nfor i in A:\n    x = i[0] + i[1] + i[2]\n    y = i[1] + i[2]\n    z = i[2]\n    print(str(x) + ' ' + str(y) + ' ' + str(z))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (A, B, C) = list(map(int, input().split()))\n    print(A + B + C, C + B, C)", "n = input()\ntest_cases = []\nfor i in range(0, int(n)):\n    test_cases.append(input().split())\nfor k in test_cases:\n    print(int(k[0]) + int(k[1]) + int(k[2]), int(k[1]) + int(k[2]), int(k[2]))", "n = int(input())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\nfor j in arr:\n    (a, b, c) = (j[0], j[1], j[2])\n    x = a + b + c\n    y = b + c\n    z = c\n    print(x, y, z)", "import math\nfrom itertools import permutations\nt = int(input(''))\nLIST = []\nfor i in range(t):\n    line = list(map(int, input().split()))\n    LIST.append(line)\nfor numbers in LIST:\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    x = a + b + c\n    y = b + c\n    z = c\n    print(x, y, z)", "for _ in range(int(input())):\n    (a, b, c) = [int(x) for x in input().split()]\n    print(f'{c + b + a} {c + b} {c}')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (a, b, c) = [int(x) for x in input().split(' ')]\n    print(f'{a + b + c} {b + c} {c}')", "for i in range(int(input())):\n    (a, b, c) = map(int, str.split(input()))\n    print(str(a + b + c) + ' ' + str(b + c) + ' ' + str(c))", "for i in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    x = a + b + c\n    y = b + c\n    z = c\n    print(str(x) + ' ' + str(y) + ' ' + str(z))", "t = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    print('{} {} {}'.format(a + b + c, b + c, c))", "t = int(input())\nfor i in range(0, t):\n    (a, b, c) = map(int, input().split())\n    print(str(a + b + c) + ' ' + str(b + c) + ' ' + str(c))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    print('%d %d %d' % (a + b + c, b + c, c))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = []\n    ans.append(str(a + b + c))\n    ans.append(str(b + c))\n    ans.append(str(c))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (x, y, z) = (a + b + c, b + c, c)\n    print(f'{x} {y} {z}')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = input().split()\n    (a, b, c) = (int(a), int(b), int(c))\n    z = c\n    y = z + b\n    x = y + a\n    print('%d %d %d' % (x, y, z))", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().strip().split()))\n    print('{} {} {}'.format(a + b + c, b + c, c))", "n = int(input())\nfor i in range(n):\n    (a, b, c) = map(int, input().split())\n    print(a + b + c, b + c, c)", "n = int(input())\nfor i in range(n):\n    (a, b, c) = map(int, input().split())\n    print(a + b + c, b + c, c)", "n = int(input())\nfor i in range(n):\n    (a, b, c) = tuple(map(int, input().split()))\n    print(f'{a + b + c} {b + c} {c}')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    print(f'{a + b + c} {b + c} {c}')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = [int(x) for x in input().split(' ')]\n    print(a + b + c, b + c, c)", "def sol(a, b, c):\n    z = c\n    y = z + b\n    x = y + a\n    return str(x) + ' ' + str(y) + ' ' + str(z)\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    print(sol(a, b, c))"]