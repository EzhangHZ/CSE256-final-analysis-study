["import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nc = [-1] * n\nX = 0\nS = sum(a)\nlst = -2\nout = []\nfor idx in range(q):\n    req = list(map(int, input().split()))\n    if req[0] == 1:\n        i = req[1] - 1\n        x = req[2]\n        current = X if c[i] < lst else a[i]\n        S += x - current\n        a[i] = x\n        c[i] = idx\n    else:\n        X = req[1]\n        S = X * n\n        lst = idx\n    out.append(str(S) + '\\n')\nprint(''.join(out))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bag = {}\n    for i in range(n):\n        bag[i + 1] = arr[i]\n    S = sum(arr)\n    val = None\n    for _ in range(q):\n        Q = list(map(int, input().split()))\n        if Q[0] == 1:\n            (_, i, x) = Q\n            if i not in bag:\n                bag[i] = x\n                S += x - val\n            else:\n                S += x - bag[i]\n                bag[i] = x\n        else:\n            (_, x) = Q\n            S = x * n\n            bag = {}\n            val = x\n        print(S)\n    return\nsolve()", "import sys\ninput = sys.stdin.readline\n\ndef int_num():\n    return int(input())\n\ndef int_list():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, t) = int_list()\n    a = int_list()\n    d = {idx: v for (idx, v) in enumerate(a)}\n    last = 0\n    tot = sum(a)\n    while t:\n        op = int_list()\n        if op[0] == 1:\n            (idx, x) = (op[1] - 1, op[2])\n            if idx in d:\n                tot = tot - d[idx] + x\n            else:\n                tot = tot - last + x\n            d[idx] = x\n        else:\n            x = op[1]\n            tot = x * len(a)\n            last = x\n            d.clear()\n        print(tot)\n        t -= 1\n\ndef main():\n    solve()\nmain()", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nc = [-1] * n\nX = 0\nS = sum(a)\nlst = -2\nout = []\nfor idx in range(q):\n    req = list(map(int, input().split()))\n    if req[0] == 1:\n        i = req[1] - 1\n        x = req[2]\n        current = X if c[i] < lst else a[i]\n        S += x - current\n        a[i] = x\n        c[i] = idx\n    else:\n        X = req[1]\n        S = X * n\n        lst = idx\n    out.append(str(S) + '\\n')\nprint(''.join(out))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    v = [0] * n\n    cnt = 0\n    last = 0\n    ans = sum(arr)\n    for __ in range(q):\n        t = list(map(int, input().split()))\n        if len(t) == 3:\n            (i, x) = (t[1], t[2])\n            i -= 1\n            if v[i] == cnt:\n                ans += x - arr[i]\n                arr[i] = x\n            else:\n                arr[i] = x\n                v[i] = cnt\n                ans += x - last\n        else:\n            cnt += 1\n            last = t[1]\n            ans = t[1] * n\n        print(ans)\nsolve()", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nc = [-1] * n\nX = 0\nS = sum(a)\nlst = -2\nfor idx in range(q):\n    req = list(map(int, input().split()))\n    if req[0] == 1:\n        i = req[1] - 1\n        x = req[2]\n        current = X if c[i] < lst else a[i]\n        S += x - current\n        a[i] = x\n        c[i] = idx\n    else:\n        X = req[1]\n        S = X * n\n        lst = idx\n    print(S)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, q) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    b = [None] * n\n    for i in range(n):\n        b[i] = (a[i], 0)\n    last = (-1, 0)\n    s = sum(a)\n    for idx in range(q):\n        ii = iter(map(int, inp().split()))\n        t = next(ii)\n        if t == 1:\n            (i, x) = ii\n            if last[0] < b[i - 1][1]:\n                s -= b[i - 1][0]\n            else:\n                s -= last[1]\n            s += x\n            b[i - 1] = (x, idx)\n        else:\n            x = next(ii)\n            last = (idx, x)\n            s = x * n\n        print(s)\n\ndef main():\n    solve()\nmain()", "import sys\ninput = sys.stdin.readline\n(N, Q) = list(map(int, input().split()))\nK = dict(enumerate(map(int, input().split())))\nS = sum(K.values())\ndefault = 0\nfor _ in range(Q):\n    X = list(map(int, input().split()))\n    if X[0] == 1:\n        S -= K.get(X[1] - 1, default)\n        S += X[2]\n        K[X[1] - 1] = X[2]\n    elif X[0] == 2:\n        S = N * X[1]\n        K = {}\n        default = X[1]\n    print(S)", "from typing import Any, TYPE_CHECKING\n\nclass DefaultDict(dict):\n    if TYPE_CHECKING:\n        default: int\n\n    def __init__(self, *args, **kwargs) -> None:\n        self.default = kwargs.pop('default')\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key: int) -> Any:\n        try:\n            return super().__getitem__(key)\n        except KeyError:\n            return self.default\n(n, q) = map(int, input().split())\narray = DefaultDict(enumerate(map(int, input().split())), default=None)\ntotal = sum(array.values())\nresults = []\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        (_, i, x) = map(int, query)\n        total += x - array[i - 1]\n        array[i - 1] = x\n        results.append(total)\n    elif query[0] == '2':\n        x = int(query[1])\n        array.clear()\n        array.default = x\n        total = x * n\n        results.append(total)\nprint('\\n'.join((str(r) for r in results)))", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\ns = sum(l)\nd = {i + 1: l[i] for i in range(n)}\nval = 0\nfor _ in range(q):\n    b = list(map(int, input().split()))\n    if b[0] == 1:\n        s += b[2] - d.get(b[1], val)\n        d[b[1]] = b[2]\n    else:\n        s = b[1] * n\n        d = dict()\n        val = b[1]\n    print(s)", "f = open(0)\nR = lambda : map(int, f.readline().split())\n(n, q) = R()\na = (*R(),)\nr = sum(a)\nd = dict()\nfor (i, e) in enumerate(a):\n    d[i + 1] = e\nv = -1\nfor _ in [0] * q:\n    (t, *x) = R()\n    if t == 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    if t == 2:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, f.readline().split())\n(n, q) = R()\na = (*R(),)\nr = sum(a)\nd = dict()\nfor (i, e) in enumerate(a):\n    d[i + 1] = e\nv = -1\nfor _ in [0] * q:\n    (t, *x) = R()\n    if t == 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    if t == 2:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\n\ndef R():\n    return map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "fptr = open(0)\n(n, q) = map(int, next(fptr).split())\na = list(map(int, next(fptr).split()))\ns = sum(a)\nfirst = [-1] * n\nx = 0\nl = -10\nfor _ in range(q):\n    temp = list(map(int, next(fptr).split()))\n    i = temp[0]\n    j = temp[1]\n    if i == 1:\n        val = temp[2]\n        ind = j - 1\n        cur = x if first[ind] < l else a[ind]\n        s += val - cur\n        a[ind] = val\n        first[ind] = _\n    else:\n        s = j * n\n        l = _\n        x = j\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nsame = 'x'\nfor i in range(q):\n    command = list(map(int, input().split()))\n    if command[0] == 1:\n        s = s - d.get(command[1], same) + command[2]\n        d[command[1]] = command[2]\n    else:\n        s = n * command[1]\n        same = command[1]\n        d = {}\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nsumm = sum(a)\npre = -1\nfor _ in range(q):\n    s = list(map(int, input().split()))\n    t = s[0]\n    i = -1\n    x = s[-1]\n    if t == 1:\n        i = s[1]\n        if pre == -1:\n            summ -= a[i - 1]\n            a[i - 1] = x\n            summ += a[i - 1]\n        else:\n            if i - 1 in d:\n                summ -= d[i - 1]\n            else:\n                summ -= pre\n            summ += x\n            d[i - 1] = x\n    else:\n        pre = x\n        d = dict()\n        summ = x * n\n    print(int(summ))", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = {}\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nfor i in range(q):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        s += w[2] - d.get(w[1], x)\n        d[w[1]] = w[2]\n    else:\n        s = w[1] * n\n        d.clear()\n        x = w[1]\n    print(s)", "f = open(0)\n(n, q) = map(int, next(f).split())\na = list(map(int, next(f).split()))\nc = [-1] * n\nX = 0\nS = sum(a)\nlst = -2\nfor idx in range(q):\n    req = list(map(int, next(f).split()))\n    if req[0] == 1:\n        i = req[1] - 1\n        x = req[2]\n        current = X if c[i] < lst else a[i]\n        S += x - current\n        a[i] = x\n        c[i] = idx\n    else:\n        X = req[1]\n        S = X * n\n        lst = idx\n    print(S)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nmarker = {}\nfor i in range(n):\n    marker[i + 1] = a[i]\nx = 0\nfor _ in range(q):\n    k = list(map(int, input().split()))\n    if k[0] == 1:\n        s += k[2] - marker.get(k[1], x)\n        marker[k[1]] = k[2]\n    else:\n        marker.clear()\n        s = k[1] * n\n        x = k[1]\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = {}\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nfor i in range(q):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        s += w[2] - d.get(w[1], x)\n        d[w[1]] = w[2]\n    else:\n        s = w[1] * n\n        d.clear()\n        x = w[1]\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nrep = {}\nsame = 'x'\nfor i in range(q):\n    command = list(map(int, input().split()))\n    if command[0] == 1:\n        if same != 'x':\n            s = s - rep.get(command[1], same) + command[2]\n            rep[command[1]] = command[2]\n        else:\n            s = s - rep.get(command[1], a[command[1] - 1]) + command[2]\n            rep[command[1]] = command[2]\n    else:\n        s = n * command[1]\n        same = command[1]\n        rep = {}\n    print(s)", "f = open(0)\n\ndef R():\n    return map(int, f.readline().split())\n(n, q) = R()\na = R()\ntotal = 0\nvalues = {0: -1}\nfor (i, x) in enumerate(a):\n    values[i + 1] = x\n    total += x\nfor _ in range(q):\n    (t, *x) = R()\n    if t == 1:\n        (i, x) = x\n        total += x - values.get(i, values[0])\n        values[i] = x\n    else:\n        x = x[0]\n        values = {0: x}\n        total = n * x\n    print(total)", "import math as mt\nfrom collections import defaultdict, deque\nimport sys\nfrom bisect import bisect_right as b_r\nfrom bisect import bisect_left as b_l\nfrom os import path\nfrom heapq import *\ninput = sys.stdin.readline\nmod = 1000000007\nINT_MAX = sys.maxsize - 1\nINT_MIN = -sys.maxsize\n\ndef myyy__answer():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sm = sum(a)\n    track = defaultdict(int)\n    for i in range(n):\n        track[i + 1] = 0\n    st = 0\n    cnt2 = 0\n    for i in range(q):\n        b = list(map(int, input().split()))\n        if b[0] == 1:\n            if track[b[1]] == cnt2:\n                sm = sm - a[b[1] - 1] + b[2]\n                a[b[1] - 1] = b[2]\n            else:\n                a[b[1] - 1] = b[2]\n                track[b[1]] = cnt2\n                sm = sm - st + b[2]\n        else:\n            sm = n * b[1]\n            st = b[1]\n            cnt2 += 1\n        print(sm)\nmyyy__answer()", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = {}\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nfor i in range(q):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        s += w[2] - d.get(w[1], x)\n        d[w[1]] = w[2]\n    else:\n        s = w[1] * n\n        d.clear()\n        x = w[1]\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\np_ql = 0\ndic = {}\nfor i in range(n):\n    dic[i + 1] = arr[i]\ntot = sum(arr)\nfor i in range(q):\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        dic.clear()\n        tot = ql[1] * n\n        print(tot)\n        p_ql = ql[1]\n    else:\n        if ql[1] in dic:\n            tot += ql[2] - dic[ql[1]]\n            dic[ql[1]] = ql[2]\n        else:\n            tot += ql[2] - p_ql\n            dic[ql[1]] = ql[2]\n        print(tot)", "import sys\ninp = sys.stdin.readline\n(n, q) = map(int, inp().split())\nl = list(map(int, inp().split()))\nd = {i: l[i] for i in range(n)}\nx = 0\ns = sum(l)\nfor _ in range(q):\n    qu = list(map(int, inp().split()))\n    if qu[0] == 2:\n        d = {}\n        x = qu[1]\n        s = x * n\n    else:\n        (i, v) = (qu[1], qu[2])\n        if i - 1 in d:\n            s += v - d[i - 1]\n            d[i - 1] = v\n        else:\n            s += v - x\n            d[i - 1] = v\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = {}\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nfor i in range(q):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        s += w[2] - d.get(w[1], x)\n        d[w[1]] = w[2]\n    else:\n        s = w[1] * n\n        d.clear()\n        x = w[1]\n    print(s)", "f = open(0)\nR = lambda : map(int, f.readline().split())\n(n, q) = R()\na = (*R(),)\nr = sum(a)\nd = {}\ni = 0\nfor x in a:\n    i += 1\n    d[i] = x\nv = 0\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t < 2:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n(n, q) = map(int, input().split())\narr = dict(enumerate(map(int, input().split())))\nS = sum(arr.values())\nfor i in range(q):\n    op = list(map(int, input().split()))\n    if op[0] == 1:\n        S += op[2] - arr[op[1] - 1]\n        arr[op[1] - 1] = op[2]\n    else:\n        d = op[1]\n        S = n * d\n        arr = defaultdict(lambda : d)\n    print(S)", "from sys import *\ninput = stdin.readline\n(a, b) = map(int, input().split())\nc = list(map(int, input().split()))\np = -1\nj = sum(c)\nl = {}\nfor z in range(a):\n    l[z] = c[z]\nfor y in range(b):\n    d = list(map(int, input().split()))\n    if d[0] == 1:\n        if l.get(d[1] - 1) != None:\n            s = l[d[1] - 1]\n            l[d[1] - 1] = d[2]\n            j -= s\n            j += l[d[1] - 1]\n            print(j)\n        else:\n            j -= p\n            j += d[2]\n            l[d[1] - 1] = d[2]\n            print(j)\n    else:\n        p = d[1]\n        l = {}\n        j = d[1] * a\n        print(j)", "f = open(0)\nR = lambda : map(int, next(f).split())\n\ndef ii():\n    return int(input())\n(n, q) = R()\ni = v = r = 0\ndic = {}\nfor x in R():\n    i += 1\n    dic[i] = x\n    r += x\nfor _ in range(q):\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r -= dic.get(i, v) - x\n        dic[i] = x\n    else:\n        (x,) = x\n        dic = {}\n        v = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nvar = sum(a)\nv = [0] * n\ncon = 0\nlast = 0\nfor i in range(q):\n    l = list(map(int, input().split()))\n    if l[0] == 1:\n        if v[l[1] - 1] == con:\n            var = var + l[2] - a[l[1] - 1]\n            a[l[1] - 1] = l[2]\n        else:\n            a[l[1] - 1] = l[2]\n            v[l[1] - 1] = con\n            var = var + l[2] - last\n    else:\n        con += 1\n        last = l[1]\n        var = l[1] * n\n    print(var)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nA = list(map(int, input().split()))\nmapping = {}\ntotal = 0\nfor (i, val) in enumerate(A):\n    mapping[i + 1] = val\n    total += val\ndefault_value = None\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        total -= mapping.get(query[1], default_value)\n        total += query[2]\n        mapping[query[1]] = query[2]\n    else:\n        mapping = {}\n        default_value = query[1]\n        total = default_value * n\n    print(total)", "import math, sys\ninput = sys.stdin.readline\ninf = 1e+18\nmod = 10 ** 9 + 7\npi = math.pi\ne = math.e\nmodinv = lambda x, m: pow(x, m - 2, m)\nimport bisect\nimport heapq\nmod9 = 998244353\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nd = {i: a[i] for i in range(n)}\nv = -1\nfor i in range(q):\n    Q = list(map(int, input().split()))\n    if Q[0] == 2:\n        s = n * Q[1]\n        d = {}\n        v = Q[1]\n    else:\n        Q[1] -= 1\n        if d.get(Q[1]) == None:\n            s += Q[2] - v\n        else:\n            s += Q[2] - d[Q[1]]\n        d[Q[1]] = Q[2]\n    print(s)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    uv = 0\n    ut = -1\n    time = 0\n    inp = list(map(int, input().split()))\n    total = sum(inp)\n    arr = [[v, 0] for v in inp]\n    while q:\n        time += 1\n        type = list(map(int, input().split()))\n        if len(type) == 3:\n            idx = type[1]\n            val = type[2]\n            idx -= 1\n            if arr[idx][1] > ut:\n                total += val - arr[idx][0]\n            else:\n                total += val - uv\n            arr[idx][0] = val\n            arr[idx][1] = time\n        else:\n            val = type[1]\n            total = n * val\n            uv = val\n            ut = time\n        print(total)\n        q -= 1\n\ndef main():\n    t = 1\n    while t:\n        solve()\n        t -= 1\nmain()", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = list(map(int, input().split()))\n(c, x, y) = (sum(d), 0, 0)\ns = set()\nfor _ in range(q):\n    (t, *w) = map(int, input().split())\n    if t == 2:\n        c = w[0] * n\n        x = w[0]\n        s = set()\n        if y == 0:\n            y = 1\n        print(c)\n    else:\n        if w[0] - 1 not in s and y == 1:\n            c -= x - w[1]\n        else:\n            c -= d[w[0] - 1] - w[1]\n        d[w[0] - 1] = w[1]\n        s.add(w[0] - 1)\n        print(c)", "f = open(0)\ng = lambda : map(int, next(f).split())\n(n, q) = g()\nd = {}\ni = v = r = 0\nfor x in g():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = g()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nd = {}\ns = sum(arr)\nx = 0\nfor i in range(n):\n    d[i + 1] = arr[i]\nfor i in range(q):\n    l1 = list(map(int, input().split()))\n    if l1[0] == 1:\n        s += l1[2] - d.get(l1[1], x)\n        d[l1[1]] = l1[2]\n    else:\n        s = l1[1] * n\n        d.clear()\n        x = l1[1]\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nd = {}\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    d[i + 1] = a[i]\ns = sum(a)\nfor i in range(q):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        s += w[2] - d.get(w[1], x)\n        d[w[1]] = w[2]\n    else:\n        s = w[1] * n\n        d.clear()\n        x = w[1]\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nans = sum(a)\nd = dict()\nfor i in range(n):\n    d[i + 1] = a[i]\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        (t, i, x) = query\n        if i not in d:\n            ans -= tmp\n        else:\n            ans -= d[i]\n        ans += x\n        d[i] = x\n    else:\n        (t, x) = query\n        tmp = x\n        ans = tmp * n\n        d.clear()\n    print(ans)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n(N, Q) = map(int, input().split())\nA = dict(enumerate(map(int, input().split())))\nS = sum(A.values())\nfor _ in range(Q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        S += query[2] - A[query[1] - 1]\n        A[query[1] - 1] = query[2]\n    else:\n        i = query[1]\n        A = defaultdict(lambda : i)\n        S = query[1] * N\n    print(S)", "import sys\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\narr = list(map(int, input().split()))\ncurrent_sum = sum(arr)\nchanged = False\nht = {}\nvalue = 0\nfor i in range(q):\n    new = list(map(int, input().split()))\n    if new[0] == 1 and (not changed):\n        current_sum -= arr[new[1] - 1]\n        arr[new[1] - 1] = new[2]\n        current_sum += new[2]\n    elif new[0] == 2:\n        ht = {}\n        current_sum = new[1] * n\n        changed = True\n        value = new[1]\n    elif new[1] - 1 in ht:\n        current_sum -= ht[new[1] - 1]\n        current_sum += new[2]\n    else:\n        ht[new[1] - 1] = new[2]\n        current_sum -= value\n        current_sum += new[2]\n    print(current_sum)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "kvs = open(0)\nharsha = lambda : map(int, next(kvs).split())\n(n, q) = harsha()\nd = {}\ni = v = r = 0\nfor x in harsha():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = harsha()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\nlst = list(map(int, sys.stdin.readline().split()))\ns = sum(lst)\nse = set()\nf = -1\nfor j in range(q):\n    lst1 = list(map(int, sys.stdin.readline().split()))\n    if lst1[0] == 2:\n        x = lst1[1]\n        f = x\n        print(x * n)\n        s = x * n\n        se.clear()\n    else:\n        ind = lst1[1] - 1\n        x = lst1[2]\n        if f == -1:\n            s = s - lst[ind] + x\n            print(s)\n            lst[ind] = x\n        elif ind not in se:\n            s = s - f + x\n            print(s)\n            se.add(ind)\n            lst[ind] = x\n        else:\n            s = s - lst[ind] + x\n            print(s)\n            lst[ind] = x", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(1):\n    x = input().split()\n    (n, q) = (int(x[0]), int(x[1]))\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    s = sum(a)\n    cur = -1\n    fl = -1\n    f = [0 for i in range(n)]\n    for i in range(q):\n        r = input().split()\n        m = int(r[0])\n        if m == 1:\n            x = int(r[1]) - 1\n            y = int(r[2])\n            if f[x] >= fl:\n                s += y - a[x]\n                a[x] = y\n            else:\n                s += y - cur\n                a[x] = y\n            f[x] = i + 1\n        elif m == 2:\n            x = int(r[1])\n            cur = x\n            fl = i + 1\n            s = x * n\n        print(s)", "import sys\ninput = sys.stdin.readline\n(num, q) = map(int, input().split())\nn = list(map(int, input().split()))\nvar = set(range(num))\nx = -1\ns = sum(n)\nwhile q > 0:\n    boo = list(map(int, input().split()))\n    if boo[0] == 1:\n        if boo[1] - 1 in var:\n            s -= n[boo[1] - 1]\n            n[boo[1] - 1] = boo[2]\n            s += boo[2]\n        else:\n            s -= x\n            n[boo[1] - 1] = boo[2]\n            s += boo[2]\n            var.add(boo[1] - 1)\n    else:\n        var.clear()\n        s = num * boo[1]\n        x = boo[1]\n    q -= 1\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = [int(i) for i in input().split()]\na = list(map(int, input().split()))\na_sum = sum(a)\nfor i in range(q):\n    content = [int(i) for i in input().split()]\n    t = content[0]\n    if t == 1 and type(a) == list:\n        a_sum = a_sum - a[content[1] - 1] + content[2]\n        a[content[1] - 1] = content[2]\n        print(a_sum)\n    elif t == 1 and type(a) == dict:\n        temp = a.get(content[1] - 1, False)\n        if temp is False:\n            a_sum = a_sum - common + content[2]\n        else:\n            a_sum = a_sum - a[content[1] - 1] + content[2]\n        a[content[1] - 1] = content[2]\n        print(a_sum)\n    else:\n        common = content[1]\n        a = dict()\n        a_sum = n * content[1]\n        print(a_sum)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n(n, q) = map(int, input().split())\narr = dict(enumerate(map(int, input().split())))\nS = sum(arr.values())\nfor i in range(q):\n    op = list(map(int, input().split()))\n    if op[0] == 1:\n        S += op[2] - arr[op[1] - 1]\n        arr[op[1] - 1] = op[2]\n    else:\n        d = op[1]\n        S = n * d\n        arr = defaultdict(lambda : d)\n    print(S)", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\nlst = list(map(int, sys.stdin.readline().split()))\ns = sum(lst)\nse = set()\nf = -1\nfor j in range(q):\n    lst1 = list(map(int, sys.stdin.readline().split()))\n    if lst1[0] == 2:\n        x = lst1[1]\n        f = x\n        print(x * n)\n        s = x * n\n        se.clear()\n    else:\n        ind = lst1[1] - 1\n        x = lst1[2]\n        if f == -1:\n            s = s - lst[ind] + x\n            print(s)\n            lst[ind] = x\n        elif ind not in se:\n            s = s - f + x\n            print(s)\n            se.add(ind)\n            lst[ind] = x\n        else:\n            s = s - lst[ind] + x\n            print(s)\n            lst[ind] = x", "import sys\ninput = lambda : sys.stdin.readline().strip()\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\ny = 0\nold = 0\nd = dict()\nfor i in range(q):\n    li = list(map(int, input().split()))\n    if li[0] == 1:\n        if y == 0:\n            s -= a[li[1] - 1]\n            s += li[2]\n            a[li[1] - 1] = li[2]\n            print(s)\n        else:\n            if li[1] in d:\n                s += li[2] - d[li[1]]\n                d[li[1]] = li[2]\n            else:\n                s += li[2]\n                s -= old\n                d[li[1]] = li[2]\n            print(s)\n    else:\n        y = 1\n        d = {}\n        s = n * li[1]\n        old = li[1]\n        print(s)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nd = {}\ni = v = r = 0\nfor x in R():\n    r += x\n    i += 1\n    d[i] = x\nwhile q:\n    q -= 1\n    (t, *x) = R()\n    if t & 1:\n        (i, x) = x\n        r += x - d.get(i, v)\n        d[i] = x\n    else:\n        d = {}\n        (v,) = x\n        r = v * n\n    print(r)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n(n, q) = map(int, input().split())\narr = dict(enumerate(map(int, input().split())))\nS = sum(arr.values())\nfor i in range(q):\n    op = list(map(int, input().split()))\n    if op[0] == 1:\n        S += op[2] - arr[op[1] - 1]\n        arr[op[1] - 1] = op[2]\n    else:\n        d = op[1]\n        S = n * d\n        arr = defaultdict(lambda : d)\n    print(S)", "import math\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\np_ql = 0\ndic = {}\nfor i in range(n):\n    dic[i + 1] = arr[i]\ntot = sum(arr)\nfor i in range(q):\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        dic.clear()\n        tot = ql[1] * n\n        print(tot)\n        p_ql = ql[1]\n    else:\n        if ql[1] in dic:\n            tot += ql[2] - dic[ql[1]]\n            dic[ql[1]] = ql[2]\n        else:\n            tot += ql[2] - p_ql\n            dic[ql[1]] = ql[2]\n        print(tot)", "from collections import defaultdict\n\ndef invr():\n    return list(map(int, input().split()))\n\ndef invrdict():\n    return dict(enumerate(map(int, input().split())))\nimport sys\ninput = sys.stdin.readline\n(n, q) = invr()\nA = invrdict()\ns = sum(A.values())\nfor _ in range(q):\n    qry = invr()\n    if qry[0] == 1:\n        s += qry[2] - A[qry[1] - 1]\n        A[qry[1] - 1] = qry[2]\n    else:\n        i = qry[1]\n        A = defaultdict(lambda : i)\n        s = qry[1] * n\n    print(s)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n(n, q) = [int(x) for x in input().split()]\nsum = 0\nlisty = get_ints()\nlist2 = [0] * n\nsec = 0\nlaqu = -1\nfor j in range(n):\n    sum += listy[j]\nfor i in range(q):\n    query = get_ints()\n    if len(query) == 3:\n        ind = query[1] - 1\n        val = query[2]\n        if list2[ind] > laqu:\n            sum += val - listy[ind]\n            list2[ind] = i\n            listy[ind] = val\n        else:\n            sum += val - sec\n            listy[ind] = val\n            list2[ind] = i\n    else:\n        sum = n * query[1]\n        sec = query[1]\n        laqu = i\n    print(sum)", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\ns = sum(l)\nu = False\nd = {}\n\ndef solve(n, l, q, s, u, d):\n    ans = []\n    for i in range(q):\n        l1 = list(map(int, input().split()))\n        if l1[0] == 1:\n            if not u:\n                t = l[l1[1] - 1]\n                l[l1[1] - 1] = l1[2]\n                s = s + l1[2] - t\n                print(s)\n            elif d.get(l1[1] - 1):\n                t = l[l1[1] - 1]\n                l[l1[1] - 1] = l1[2]\n                s = s + l1[2] - t\n                ans.append(s)\n                d[l1[1] - 1] = 1\n            else:\n                l[l1[1] - 1] = l1[2]\n                s = s + l1[2] - up\n                ans.append(s)\n                d[l1[1] - 1] = 1\n        else:\n            u = True\n            up = l1[1]\n            s = n * l1[1]\n            ans.append(s)\n            d = {}\n    return ans\nans = solve(n, l, q, s, u, d)\nfor val in ans:\n    print(val)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n(N, Q) = map(int, input().split())\nA = dict(enumerate(map(int, input().split())))\nS = sum(A.values())\nfor _ in range(Q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        S += query[2] - A[query[1] - 1]\n        A[query[1] - 1] = query[2]\n    else:\n        i = query[1]\n        A = defaultdict(lambda : i)\n        S = query[1] * N\n    print(S)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\nD = dict(enumerate(map(int, input().split())))\ncurrent_sum = sum(D.values())\nfor _ in range(q):\n    new_request = list(map(int, input().split()))\n    if new_request[0] == 1:\n        (i, x) = (new_request[1], new_request[2])\n        current_sum += x - D[i - 1]\n        D[i - 1] = x\n    else:\n        number = new_request[1]\n        D = defaultdict(lambda : number)\n        current_sum = number * n\n    print(current_sum)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nlast = -1\na = [[i, last] for i in a]\nfor i in range(q):\n    v = input().split()\n    if v[0] == '1':\n        (_, ind, x) = map(int, v)\n        ind -= 1\n        if a[ind][1] < last:\n            s += x - z\n            a[ind] = [x, last]\n        else:\n            s += x - a[ind][0]\n            a[ind][0] = x\n    else:\n        (_, x) = map(int, v)\n        last = i\n        z = x\n        s = z * n\n    print(s)", "inp = [list(map(int, l.split())) for l in open(0).read().splitlines()]\n(n, q) = inp[0]\na = inp[1]\nlast = 0\nstep = [-1] * n\nlaststep = -2\ntot = sum(a)\nfor (i, b) in enumerate(inp[2:]):\n    if b[0] == 1:\n        if step[b[1] - 1] > laststep:\n            tot += b[2] - a[b[1] - 1]\n            a[b[1] - 1] = b[2]\n        else:\n            tot += b[2] - last\n            a[b[1] - 1] = b[2]\n        step[b[1] - 1] = i\n        print(tot)\n    else:\n        tot = b[1] * n\n        last = b[1]\n        laststep = i\n        print(tot)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nsm = sum(arr)\neach = -1\nss = set()\nfor i in range(n):\n    ss.add(i)\nfor _ in range(q):\n    ll = list(map(int, input().split()))\n    if ll[0] == 1:\n        ll[1] -= 1\n        if ll[1] in ss:\n            prev = arr[ll[1]]\n        else:\n            prev = each\n        ss.add(ll[1])\n        arr[ll[1]] = ll[2]\n        sm += ll[2] - prev\n    else:\n        ss = set()\n        each = ll[1]\n        sm = each * n\n    print(sm)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n(n, q) = inlt()\narr = inlt()\ncurrent_sum = sum(arr)\ncurrent_version = 0\nlast_update = None\narr = [(value, current_version) for value in arr]\narr_len = len(arr)\nfor _ in range(q):\n    args = inlt()\n    if args[0] == 1:\n        i = args[1] - 1\n        x = args[2]\n        (el_value, el_version) = arr[i]\n        if el_version < current_version:\n            current_sum += x - last_update\n        else:\n            current_sum += x - el_value\n        arr[i] = (x, current_version)\n    else:\n        x = args[1]\n        current_version += 1\n        last_update = x\n        current_sum = arr_len * x\n    print(current_sum)", "import sys\ninput = sys.stdin.readline\n(n, qq) = map(int, input().split())\nw = [0] + list(map(int, input().split()))\ns = sum(w)\nv = [-1] * (qq + 1)\nlast1 = [-1] * (n + 1)\nlast2 = int(-1)\n\ndef now(i):\n    if last1[i] == last2 == -1:\n        return w[i]\n    if last1[i] == -1:\n        return v[last2]\n    if last2 == -1:\n        return v[last1[i]]\n    return v[max(last2, last1[i])]\nfor i in range(qq):\n    q = list(map(int, input().split()))\n    if q[0] == 1:\n        (a, b) = (q[1], q[2])\n        v[i] = b\n        s -= now(a)\n        last1[a] = i\n        s += now(a)\n    else:\n        a = q[1]\n        s = n * a\n        last2 = i\n        v[i] = a\n    print(s)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nsum1 = sum(a)\nD = dict()\nelems = []\nf = True\nfor i in range(q):\n    be = []\n    s = list(map(int, input().split()))\n    if s[0] == 1:\n        be.append(int(s[1]) - 1)\n        be.append(int(s[2]))\n        if f != False:\n            el = be[0]\n            el2 = a[el]\n            sum1 -= el2\n            sum1 += be[1]\n            print(sum1)\n            a[be[0]] = be[1]\n        elif be[0] in elems:\n            sum1 -= D[be[0]]\n            sum1 += be[1]\n            D[be[0]] = be[1]\n            print(sum1)\n        else:\n            sum1 -= D[len(a)]\n            sum1 += be[1]\n            D[be[0]] = be[1]\n            print(sum1)\n            elems.append(be[0])\n    else:\n        D = dict()\n        D[len(a)] = int(s[1])\n        sum1 = n * int(s[1])\n        print(sum1)\n        f = False\n        elems = []", "inp = list(map(int, input().split()))\nne = inp[0]\nnq = inp[1]\na = list(map(int, input().split()))\nans = sum(a)\nequalArray = False\nequalVal = 0\nopt = []\nd = {}\nfor ii in range(ne):\n    d[ii] = a[ii]\nfor _ in range(nq):\n    q = list(map(int, input().split()))\n    if q[0] == 1:\n        prevVal = d.get(q[1] - 1, equalVal)\n        ans += q[2] - prevVal\n        d[q[1] - 1] = q[2]\n        equalArray = False\n    else:\n        d = {}\n        ans = q[1] * ne\n        equalArray = True\n        equalVal = q[1]\n    opt.append(ans)\nprint(*opt, sep='\\n')", "def solve(n, q, a, queries):\n    two_happened = False\n    exceptions = set()\n    two_value = 0\n    total_sum = sum(a)\n    for query in queries:\n        if query[0] == 1:\n            (position, new_value) = (query[1] - 1, query[2])\n            if not two_happened:\n                total_sum += new_value - a[position]\n                a[position] = new_value\n                print(total_sum)\n            elif position in exceptions:\n                total_sum += new_value - a[position]\n                a[position] = new_value\n                print(total_sum)\n            else:\n                total_sum += new_value - two_value\n                exceptions.add(position)\n                a[position] = new_value\n                print(total_sum)\n        else:\n            new_value = query[1]\n            if not two_happened:\n                two_happened = True\n            exceptions = set()\n            two_value = new_value\n            total_sum = n * two_value\n            print(total_sum)\n(n, q) = [int(component) for component in input().split(' ')]\na = [int(component) for component in input().split(' ')]\nqueries = []\nfor _ in range(q):\n    queries.append([int(component) for component in input().split(' ')])\nsolve(n, q, a, queries)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nqrr = [list(map(int, input().split())) for _ in range(q)]\n(lastIndexOne, lastIndexTwo, lastTwoVal, lastArrOne, res) = (-1, -1, 0, [-1] * n, sum(arr))\nfor i in range(q):\n    query = qrr[i]\n    if query[0] == 2:\n        res = query[1] * n\n        print(res)\n        lastIndexTwo = i\n        lastTwoVal = query[1]\n    else:\n        res += query[2] - (lastTwoVal if lastIndexTwo >= 0 and lastIndexTwo > lastArrOne[query[1] - 1] else arr[query[1] - 1])\n        lastArrOne[query[1] - 1] = i\n        arr[query[1] - 1] = query[2]\n        print(res)", "from collections import Counter\nfrom functools import lru_cache\nfrom bisect import bisect, bisect_left\nresult = []\n(n, q) = map(int, input().split())\narray = list(map(int, input().split()))\nqueries = []\nfor i in range(q):\n    queries.append(list(map(int, input().split())))\ncurrentSum = sum(array)\nvisited = set()\nchanged = 0\nfor query in queries:\n    if len(query) == 2:\n        (_, num) = query\n        changed = num\n        currentSum = num * n\n        visited = set()\n    else:\n        (_, idx, num) = query\n        idx -= 1\n        if changed and idx not in visited:\n            visited.add(idx)\n            currentSum -= changed\n        else:\n            currentSum -= array[idx]\n        currentSum += num\n        array[idx] = num\n    print(currentSum)", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, qu):\n    n = len(arr)\n    tot = sum(arr)\n    each = 0\n    flg = None\n    store = set()\n    f = 0\n    for q in qu:\n        if q[0] == 2:\n            print(q[1] * n)\n            each = q[1]\n            tot = q[1] * n\n            flg = 1\n            store = set()\n        else:\n            (type, p, v) = q\n            i = p - 1\n            if flg or (flg != None and i not in store):\n                tot = tot + v - each\n                arr[i] = v\n                flg = 0\n                store.add(i)\n            else:\n                tot = tot + v - arr[i]\n                arr[i] = v\n                store.add(i)\n            print(tot)\n(n, q) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nqu = []\nfor i in range(q):\n    qu.append(list(map(int, input().split())))\npro(arr, qu)", "(n, q) = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\nallsame = 0\nqueries = []\ndictans = {i + 1: arr[i] for i in range(n)}\nans = sum(arr)\ndicts = []\ndicts.append(dictans)\nfor i in range(q):\n    query = list(map(int, input().split(' ')))\n    if query[0] == 2:\n        dicts.append({'all': query[1]})\n    queries.append(query)\ndictpointer = 0\nfor i in range(q):\n    query = queries[i]\n    if query[0] == 2:\n        dictpointer += 1\n        ans = n * query[1]\n        print(ans)\n        continue\n    else:\n        if query[1] in dicts[dictpointer]:\n            ans += query[2] - dicts[dictpointer][query[1]]\n        else:\n            ans += query[2] - dicts[dictpointer]['all']\n        dicts[dictpointer][query[1]] = query[2]\n        print(ans)\n        continue", "import math as m\n[n, q] = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nqs = []\nfor a in range(0, q):\n    qs += [[int(x) for x in input().split()]]\ns = sum(arr)\nall_same = False\nval = -1\nchanged_indices = []\nchanged_vals = []\nfor q in qs:\n    if q[0] == 1:\n        i = q[1] - 1\n        v = q[2]\n        if not all_same:\n            s += v - arr[i]\n            arr[i] = v\n        else:\n            try:\n                pos = changed_indices.index(i)\n                s += v - changed_vals[pos]\n                changed_vals[pos] = v\n            except:\n                s += v - val\n                changed_indices += [i]\n                changed_vals += [v]\n    else:\n        all_same = True\n        val = q[1]\n        s = n * val\n        changed_indices = []\n        changed_vals = []\n    print(s)", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nqueries = []\nfor i in range(q):\n    temp = list(map(int, input().split()))\n    queries.append(temp)\ns = sum(l)\nonall = -1\nd = {}\nfor i in range(n):\n    d[i] = [l[i]]\nfor u in queries:\n    if u[0] == 1:\n        if u[1] - 1 in d:\n            diff = u[2] - d[u[1] - 1][-1]\n            s += diff\n            d[u[1] - 1].append(u[2])\n        else:\n            diff = u[2] - onall\n            s += diff\n            d[u[1] - 1] = [u[2]]\n    else:\n        s = n * u[1]\n        onall = u[1]\n        d = {}\n    print(s)", "def main():\n    out = ''\n    (n, q) = [int(x) for x in input().split()]\n    input_ = [int(x) for x in input().split()]\n    modified = {i: input_[i] for i in range(len(input_))}\n    value = 0\n    sum_ = sum(input_)\n    for k in range(q):\n        input_ = [int(x) for x in input().split()]\n        if input_[0] == 1:\n            i = input_[1] - 1\n            sum_ += input_[2]\n            if i in modified:\n                sum_ -= modified[i]\n            else:\n                sum_ -= value\n            modified[i] = input_[2]\n        else:\n            value = input_[1]\n            modified = {}\n            sum_ = value * n\n        out += str(sum_) + '\\n'\n    print(out)\nmain()", "(n, q) = map(int, input().split())\ndata = {index: int(value) for (index, value) in enumerate(input().split(), start=1)}\nsumm = sum(data.values())\ndefault = None\nfor qi in range(q):\n    params = input().split()\n    if params[0] == '1':\n        key = int(params[1])\n        value = int(params[2])\n        summ += value - data.get(key, default)\n        data[key] = value\n    else:\n        default = int(params[1])\n        summ = default * n\n        data = {}\n    print(summ)", "def inpList():\n    return [int(i) for i in input().split()]\n\ndef solve():\n    (n, q) = inpList()\n    a = inpList()\n    t1 = {}\n    t2 = 0\n    sm = sum(a)\n    for qi in range(q):\n        inp = inpList()\n        if len(inp) == 3:\n            (_, i, x) = inp\n            if t1.get(i):\n                sm += x - t1[i]\n            else:\n                sm += x - (t2 or a[i - 1])\n            t1[i] = x\n        else:\n            (_, x) = inp\n            t2 = x\n            sm = t2 * n\n            t1 = {}\n        print(sm)\nsolve()", "def solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [-1] * n\n    X = 0\n    S = sum(a)\n    lst = -2\n    for idx in range(q):\n        req = list(map(int, input().split()))\n        if req[0] == 1:\n            i = req[1] - 1\n            x = req[2]\n            current = X if c[i] < lst else a[i]\n            S += x - current\n            a[i] = x\n            c[i] = idx\n        else:\n            X = req[1]\n            S = X * n\n            lst = idx\n        print(S)\nsolve()", "(n, q) = map(int, input().split())\ndata = {index: int(value) for (index, value) in enumerate(input().split(), start=1)}\nsumm = sum(data.values())\ndefault = None\nfor qi in range(q):\n    params = input().split()\n    if params[0] == '1':\n        key = int(params[1])\n        value = int(params[2])\n        summ += value - data.get(key, default)\n        data[key] = value\n    else:\n        default = int(params[1])\n        summ = default * n\n        data = {}\n    print(summ)", "def solve():\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ind = [i for i in range(1, n + 1)]\n    DI = dict(zip(ind, arr))\n    now = 0\n    SU = sum(arr)\n    for i in range(q):\n        b = list(map(int, input().split()))\n        if b[0] == 2:\n            DI = {}\n            now = b[1]\n            SU = n * now\n            print(SU)\n        else:\n            SU += b[2] - DI.get(b[1], now)\n            DI[b[1]] = b[2]\n            print(SU)\nsolve()", "import collections\nimport math\nimport sys\nfrom queue import PriorityQueue\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\ndef main(testnumber):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    last = -1\n    query_value = {}\n    for i in range(n):\n        query_value[i] = a[i]\n    for i in range(q):\n        qr = list(map(int, input().split()))\n        if qr[0] == 1:\n            qn = qr[1] - 1\n            if qn not in query_value:\n                vv = last\n            else:\n                vv = query_value[qn]\n            query_value[qn] = qr[2]\n            s -= vv\n            s += qr[2]\n        else:\n            query_value.clear()\n            last = qr[1]\n            s = last * n\n        print(s)\nt = 1\ncnt = 1\nwhile t > 0:\n    main(cnt)\n    cnt += 1\n    t -= 1", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\ncurrent_sum = sum(a)\nchanged = set([i + 1 for i in range(n)])\ninit = 0\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        (i, x) = (int(query[1]), int(query[2]))\n        if i in changed:\n            current_sum -= a[i - 1]\n            current_sum += x\n        else:\n            current_sum = current_sum - init + x\n            changed.add(i)\n        a[i - 1] = x\n    else:\n        x = int(query[1])\n        current_sum = x * n\n        init = x\n        changed = set()\n    print(current_sum)", "(n, k) = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]\nans = sum(a)\nlast_i = -1\npre = [0] * 200010\nval = -1\nfor i in range(1, k + 1):\n    tokens = input().split(' ')\n    if len(tokens) == 3:\n        idx = int(tokens[1]) - 1\n        cval = int(tokens[2])\n        if pre[idx] < last_i:\n            pre[idx] = last_i\n            a[idx] = val\n        ans += cval - a[idx]\n        a[idx] = cval\n        print(ans)\n    else:\n        last_i = i\n        val = int(tokens[1])\n        ans = val * n\n        print(ans)", "def solve():\n    (n, q) = map(int, input().split())\n    aa = [0] + [int(a) for a in input().split()]\n    res = sum(aa)\n    base = 0\n    notbase = set(range(n + 1))\n    for _ in range(q):\n        (t, *d) = map(int, input().split())\n        if t == 1:\n            (i, x) = d\n            if i in notbase:\n                res += x - aa[i]\n            else:\n                res += x - base\n                notbase.add(i)\n            aa[i] = x\n        else:\n            notbase = set()\n            base = d[0]\n            res = base * n\n        print(res)\n\ndef main():\n    solve()\nmain()"]