["for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, comb\nlist_input = lambda x=int: list(map(x, input().strip().split()))\nmult_input = lambda x=int: map(x, input().strip().split())\n\ndef solve():\n    n = int(input())\n    s = input().rstrip('\\n')\n    l = list(s)\n    ans = 0\n    (o, z) = (0, 0)\n    for (i, x) in enumerate(l):\n        if x == '0':\n            if o:\n                if l[i - 1] == '0':\n                    continue\n                ans += 1\n            z = 1\n        else:\n            if z and o:\n                if l[i - 1] == '1':\n                    continue\n                ans += 1\n            o = 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "n = int(input())\ndatas = []\nfor i in range(n):\n    l = input()\n    t = str(input())\n    datas.append(t)\n\ndef solve(data):\n    if not data:\n        return 0\n    r = 0\n    last = data[0]\n    for i in data[1:]:\n        if i != last:\n            r += 1\n        last = i\n    if data[0] == '0':\n        r -= 1\n    return max(r, 0)\nfor d in datas:\n    print(solve(d))", "def main():\n\n    def main():\n        T = readInt()\n        for _ in range(T):\n            N = readInt()\n            A = readString()\n            print(solve(A, N))\n\n    def solve(A, N):\n        A = A.lstrip('0')\n        if not A:\n            return 0\n        p = A[0]\n        ans = 0\n        for x in A:\n            if x != p:\n                ans += 1\n                p = x\n        return ans\n    main()\nMOD = 10 ** 9 + 7\nimport sys\nfrom math import ceil\nfrom itertools import groupby\nfrom collections import deque, Counter, defaultdict\nfrom bisect import bisect_left, bisect_right, insort\nfrom pprint import pprint\nread = sys.stdin.readline\nreadString = lambda : read().strip()\nreadInt = lambda : int(readString())\nreadStrings = lambda delim=' ': readString().split(delim)\nreadInts = lambda delim=' ': [int(_) for _ in readStrings(delim)]\nmain()", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "import sys\nimport math\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    s = list(inp())\n    for i in range(n):\n        if s[i] == '1':\n            ans = 0\n            for i in range(i + 1, n):\n                ans += s[i] != s[i - 1]\n            print(ans)\n            return\n    print(0)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    c = 0\n    x = '0'\n    for i in s:\n        if i == '0':\n            if x == '0':\n                continue\n            elif c % 2 == 0:\n                c += 1\n        elif x == '0':\n            x = '1'\n            continue\n        elif c & 1:\n            c += 1\n    print(c)", "import sys\nc = 0\nn = 0\nfor line in sys.stdin:\n    if c == 0:\n        n = 2 * int(line)\n    elif c % 2 == 0:\n        s = line\n        i = 0\n        one = False\n        if s[0] == '1':\n            one = True\n        trans = 0\n        for i in range(1, len(s) - 1):\n            if s[i] != s[i - 1]:\n                trans += 1\n        if trans == 0:\n            print(0)\n            c += 1\n            continue\n        elif one:\n            print(trans)\n        else:\n            print(trans - 1)\n    c += 1\n    if n < c:\n        break", "def fuc(s):\n    for i in range(len(s)):\n        if s[i] == '1':\n            s = s[i:]\n            break\n    res = 0\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nn = int(input())\nres = []\nfor _ in range(n):\n    i = input()\n    s = input()\n    res.append(fuc(s))\nfor re in res:\n    print(re)", "t = int(input())\nans = [0] * t\nfor i in range(t):\n    n = int(input())\n    s = input()\n    g = 1\n    for j in range(1, n):\n        if s[j - 1] != s[j]:\n            g += 1\n    ans[i] = g - 1 if s[0] == '1' else g - 2\n    if g == 1:\n        ans[i] = 0\nfor a in ans:\n    print(a)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '1' not in s:\n        print(0)\n    elif '0' not in s:\n        print(0)\n    else:\n        i = s.index('1')\n        count = 0\n        for k in range(i, n - 1):\n            if s[k] != s[k + 1]:\n                count += 1\n        print(count)", "import sys\nfrom sys import stdin\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\ninf = float('inf')\ninput = sys.stdin.readline\nT = int(input())\nres = []\nfor _ in range(T):\n    N = int(input())\n    s = input().strip()\n    (i, ans) = (0, 0)\n    while s[i] == '0' and i < N - 1:\n        i += 1\n    for j in range(i, N - 1):\n        if s[j] != s[j + 1]:\n            ans += 1\n    res.append(ans)\nprint(*res, sep='\\n')", "for s in [*open(0)][2::2]:\n    s = s.strip()\n    k = sum((a != b for (a, b) in zip(s, s[1:])))\n    print(max(k - 1, 0) + ('0' in s and s[0] == '1'))", "import sys\nimport math\nZERO = '0'\nONE = '1'\nNA = '*'\nnum_of_cases = int(sys.stdin.readline().rstrip())\nfor _ in range(num_of_cases):\n    ans = 0\n    array_len = int(sys.stdin.readline().rstrip())\n    arr = sys.stdin.readline().rstrip()\n    curr = NA\n    for e in arr:\n        if curr == NA:\n            if e == ONE:\n                curr = e\n        elif curr == e:\n            continue\n        else:\n            ans += 1\n            curr = e\n    print(ans)", "for _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    print(max((s[0] == '1') + sum((s[i] != s[i - 1] for i in range(1, n))) - 1, 0))", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(0)\n    else:\n        count = 0\n        first = s[0]\n        for ch in s[1:]:\n            if first != ch:\n                first = ch\n                count += 1\n        if count == 1 and s[0] == '0':\n            count = 0\n        elif count > 1:\n            if s[0] == '0':\n                count -= 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if s.count('1') == n or s.count('0') == n:\n        print(0)\n        continue\n    s = s[s.index('1'):]\n    print(s.count('01') + s.count('10'))", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    S = readStr()\n    cnt = 0\n    idx = -1\n    for i in range(1, n):\n        if S[i - 1] == '1' and S[i] == '0':\n            idx = i\n        if idx > -1 and S[i] != S[i - 1]:\n            cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    start = s[0]\n    count = 0\n    for i in s:\n        if i != start:\n            count += 1\n            start = i\n    if s[0] == '0':\n        print(max(0, count - 1))\n    else:\n        print(count)", "def print_val(length, comb):\n    comparer = '1'\n    count = 0\n    for i in range(length):\n        if comb[i] == comparer:\n            count += 1\n            if comparer == '0':\n                comparer = '1'\n            else:\n                comparer = '0'\n    if count == 0:\n        print(0)\n    else:\n        print(count - 1)\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        length = int(input())\n        comb = input().rstrip()\n        print_val(length, comb)\nmain()", "testCase = int(input())\nfor i in range(testCase):\n    n = int(input())\n    binary = input()\n    count = 0\n    for i in range(n - 1):\n        if binary[i] != binary[i + 1]:\n            count += 1\n    if binary[0] == '0':\n        ans = max(count - 1, 0)\n    else:\n        ans = count\n    print(ans)", "def main():\n    n = int(input())\n    s = input()\n    count = 0\n    i = n - 1\n    prev0 = False\n    prev1 = False\n    while i > -1:\n        if s[i] == '0':\n            prev0 = True\n            while i > -1 and s[i] == '0':\n                i -= 1\n            continue\n        if prev0:\n            count += 2 if prev1 else 1\n            prev0 = False\n        prev1 = True\n        i -= 1\n    print(count)\nfor _ in range(int(input())):\n    main()", "def test_case():\n    _ = int(input())\n    s = input()\n    chunks = []\n    prev = s[0]\n    for v in s[1:]:\n        if v != prev:\n            chunks.append(prev)\n            prev = v\n    chunks.append(prev)\n    if len(chunks) == 1:\n        print(0)\n    else:\n        print(len(chunks) - 1 - (1 if chunks[0] == '0' else 0))\ntest_cases = int(input())\nfor _ in range(test_cases):\n    test_case()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        ans = 0\n        ind = 0\n        while s[ind] == 0 and ind < n:\n            ind += 1\n        actual = s[ind]\n        if ind == 0 and s[ind] == '1':\n            ans += 1\n        for i in range(ind, n):\n            if s[i] != actual:\n                ans += 1\n                actual = s[i]\n        print(max(ans - 1, 0))\nmain()", "def ii(a=False):\n    i = input().split()\n    try:\n        if len(i) == 1 and (not a):\n            return int(i[0])\n        return list(map(int, i))\n    except Exception:\n        if len(i) == 1 and (not a):\n            return i[0]\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii()):\n    n = ii()\n    s = input()\n    index = 0\n    for i in range(n):\n        if s[i] != '0':\n            index = i\n            break\n    t = 0\n    s = s[index:]\n    prev = s[0]\n    for i in s:\n        if prev != i:\n            t += 1\n            prev = i\n    print(t)", "import sys\ninput = sys.stdin.readline\n\ndef inverse(el, inv):\n    if inv:\n        return not el\n    return el\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip()))\n    cnt = 0\n    is_one = False\n    inv = False\n    for i in range(n):\n        if not is_one and a[i] == 0:\n            continue\n        if inverse(a[i], inv) == 1:\n            is_one = True\n        elif is_one:\n            inv = not inv\n            cnt += 1\n    print(cnt)", "def solve():\n    n = int(input())\n    s = input()\n    ret = 0\n    f = True\n    for i in range(1, n):\n        if f and s[i] == '0' and (s[i - 1] == '1'):\n            f = False\n            ret += 1\n        elif not f and s[i] == '1' and (s[i - 1] == '0'):\n            f = True\n            ret += 1\n    print(ret)\nfor _ in range(int(input())):\n    solve()", "def min_operations(s, n):\n    counter_change = 0\n    flag_change = -1\n    for i in range(0, n - 1):\n        if flag_change == 1:\n            if s[i + 1] > s[i]:\n                counter_change += 1\n                flag_change *= -1\n        if flag_change == -1:\n            if s[i + 1] < s[i]:\n                counter_change += 1\n                flag_change *= -1\n    return counter_change\ntest_number = int(input())\nfor test in range(test_number):\n    n = int(input())\n    s = input()\n    print(min_operations(s, n))", "import math\n\ndef solve():\n    n = int(input())\n    str = input()\n    cur = '0'\n    c = 0\n    for i in range(n):\n        if str[i] != cur:\n            c += 1\n            cur = str[i]\n    print(max(0, c - 1))\nt = int(input())\nwhile t:\n    solve()\n    t = t - 1", "for _ in range(int(input())):\n    x = input()\n    bina = input()\n    f = '0'\n    c = -1\n    for i in bina:\n        if i != f:\n            c += 1\n            f = '0' if f == '1' else '1'\n    if c == -1:\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if '1' not in s:\n        print(0)\n    elif '0' not in s:\n        print(0)\n    else:\n        i = s.index('1')\n        count = 0\n        for k in range(i, n - 1):\n            if s[k] != s[k + 1]:\n                count += 1\n        print(count)", "test_n = int(input())\nfor _ in range(test_n):\n    size = input()\n    string = input().lstrip('0')\n    flips = 0\n    last = '1'\n    flipped = False\n    for b in string:\n        if not flipped:\n            if last > b:\n                flips += 1\n                flipped = not flipped\n        elif last < b:\n            flips += 1\n            flipped = not flipped\n        last = b\n    print(f'{flips}')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if s[0] == '0' and s.count('1') > 0:\n        a = s.count('10') + s.count('01')\n        print(a - 1)\n    else:\n        a = s.count('10') + s.count('01')\n        print(a)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    cnt = 0\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            cnt += 1\n    if s[0] == '0':\n        cnt = max(0, cnt - 1)\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s_rev = s[::-1]\n    problem_index = -1\n    for i in range(n - 1):\n        if s_rev[i] == '0' and s_rev[i] != s_rev[i + 1]:\n            problem_index = n - i - 2\n            break\n    if problem_index == -1:\n        print(0)\n    else:\n        ans = 1\n        for i in range(problem_index):\n            if s[i] == '1' and s[i] != s[i + 1]:\n                ans += 2\n        if s[-1] == '1':\n            ans += 1\n        print(ans)", "import sys\nfrom collections import defaultdict\nimport heapq\ninput = sys.stdin.readline\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    ans = 0\n    flip = 0\n    for i in range(1, n):\n        if flip == 0 and s[i] == '0' and (s[i - 1] == '1'):\n            flip = 1\n            ans += 1\n        elif flip == 1 and s[i] == '1' and (s[i - 1] == '0'):\n            flip = 0\n            ans += 1\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = str(input())\n    f = 0\n    ans = 0\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            if f == 0 and s[i] == '0':\n                f = 1\n                ans += 1\n            elif f == 1:\n                ans += 1\n    print(ans)\n    t = t - 1", "for _ in range(int(input())):\n    n = input()\n    st = input()\n    (s, o, z) = (0, False, False)\n    for el in st[::-1]:\n        if el == '1':\n            if z and o:\n                s += 2\n            elif z:\n                s += 1\n            z = False\n            o = True\n        else:\n            z = True\n    print(s)", "import math\nimport bisect\nfrom collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    if s[0] == '0' and s.count('1') > 0:\n        c = s.count('01') + s.count('10')\n        print(c - 1)\n    else:\n        c = s.count('01') + s.count('10')\n        print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().lstrip('0')\n    i = '1'\n    c = 0\n    for b in s:\n        if b != i:\n            i = b\n            c += 1\n    print(c)", "testcases = int(input())\nfor _ in range(testcases):\n    n = int(input())\n    s = input().strip()\n    counter = 0\n    for (c1, c2) in zip(s[:-1], s[1:]):\n        if c1 != c2:\n            counter += 1\n    if s[0] == '1':\n        counter += 1\n    if len(set(s)) == 1:\n        print(0)\n    else:\n        print(counter - 1)", "def solve():\n    n = int(input())\n    s = input()\n    m = [s[0]]\n    for i in range(1, n):\n        if s[i] != m[-1]:\n            m.append(s[i])\n    if len(m) == 1:\n        print(0)\n        return\n    if s[0] == '0':\n        print(len(m) - 2)\n    else:\n        print(len(m) - 1)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    s = input()\n    count = 0\n    (zero, one) = (s.count('0'), s.count('1'))\n    if zero == 0 or one == 0:\n        print(0)\n        return\n    net = 0\n    for i in s:\n        if net % 2 == 0:\n            c = i\n        elif i == '0':\n            c = '1'\n        else:\n            c = '0'\n        if c == '1':\n            net += 1\n    print(net - 1)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "def exe():\n    if '1' not in s:\n        return 0\n    ind = s.index('1')\n    ans = 0\n    for i in range(ind, n - 1):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = list(input())\n    print(exe())", "def check():\n    for i in range(n):\n        if s[i] == '1':\n            return True\n    else:\n        return False\nfor i in range(int(input())):\n    n = int(input())\n    s = list(input())\n    if not check():\n        print(0)\n        continue\n    ind = s.index('1')\n    l = [i for i in range(ind, n - 1) if s[i] != s[i + 1]]\n    print(len(l))", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    if s[-1] == '0' and s.count('0') != n:\n        ans += 1\n    i = 0\n    cnt = 0\n    while i < n:\n        if s[i] == '1':\n            i += 1\n            while i < n and s[i] == '1':\n                i += 1\n            if i == n:\n                print(ans)\n                return\n            while i < n and s[i] == '0':\n                i += 1\n            if i != n:\n                ans += 2\n        else:\n            i += 1\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "def solve(s):\n    f = 0\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            if f == 0 and s[i] == '0':\n                f = 1\n                ans += 1\n            elif f == 1:\n                ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(solve(s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    L = '2'\n    k = 0\n    for i in s:\n        if i == '1' and L == '2':\n            L = '1'\n        elif L != '2' and i != L:\n            k += 1\n            L = i\n    print(k)", "case = int(input())\nfor i in range(case):\n    n = int(input())\n    ss = input()\n    kk = list(ss)\n    tt = kk.copy()\n    tt.sort()\n    if kk == tt:\n        print(0)\n        continue\n    ss += '333'\n    one = ss.index('1')\n    if '1' in ss:\n        print(ss[one:].count('10') + ss[one:].count('01'))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (l, r) = (s.find('1'), s.rfind('1'))\n    if list(s) == sorted(s):\n        print(0)\n    else:\n        ans = 0 if r == n - 1 else 1\n        for i in range(l, r):\n            if s[i] != s[i + 1]:\n                ans += 1\n        print(ans)", "t = int(input())\nfor num in range(0, t):\n    g = int(input())\n    a = input()\n    o = 1\n    v = '1'\n    ans = 0\n    u = 0\n    for num in a:\n        if u == 0:\n            if num == '1':\n                u = 1\n        elif num != v:\n            ans = ans + 1\n            v = num\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = input()\n    if '1' in l:\n        t = l.index('1')\n    else:\n        t = l.index('0')\n    y = l[t:]\n    char = y[0]\n    c = 0\n    for j in range(len(y)):\n        if y[j] == char:\n            continue\n        else:\n            c += 1\n            char = y[j]\n    print(c)", "import math\n\ndef primeFactors(n):\n    l = []\n    c = 2\n    while n > 1:\n        if n % c == 0:\n            l.append(c)\n            n = n / c\n        else:\n            c = c + 1\n    return l\nimport math\n\ndef primeFactors(n):\n    l = []\n    c = 2\n    while n > 1:\n        if n % c == 0:\n            l.append(c)\n            n = n / c\n        else:\n            c = c + 1\n    return l\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n    return prime_flag\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    pos = -1\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n):\n            if s[i] == '1':\n                pos = i\n                break\n        if pos == -1:\n            print(0)\n        elif pos == n - 1:\n            print(0)\n        else:\n            cnt = 0\n            ones = True\n            zeroes = False\n            for i in range(pos + 1, n):\n                if s[i] == '0':\n                    if not zeroes:\n                        cnt += 1\n                        zeroes = True\n                        ones = False\n                elif not ones:\n                    cnt += 1\n                    ones = True\n                    zeroes = False\n            print(cnt)\n    t = t - 1", "import math\nt = int(input())\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef allgcd(arr):\n    gc = arr[0]\n    for i in range(1, len(arr)):\n        gc = gcd(gc, arr[i])\n    return gc\nfor tc in range(1, t + 1):\n    n = int(input())\n    s = list(input())\n    ops = 0\n    oneseen = False\n    for i in range(len(s)):\n        if ops % 2 == 0:\n            ch = s[i]\n        else:\n            ch = '0' if s[i] == '1' else '1'\n        if ch == '1':\n            oneseen = True\n        elif oneseen:\n            ops += 1\n            oneseen = True\n        else:\n            continue\n    print(ops)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s2 = ''\n    for c in s:\n        if s2 and s2[-1] != c:\n            s2 += c\n        elif not s2:\n            s2 += c\n    if len(s2) == 1:\n        print(0)\n    elif s2[0] == '0':\n        print(len(s2) - 2)\n    else:\n        print(len(s2) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for pos in range(1, n):\n        if s[pos] != s[pos - 1]:\n            cnt += 1\n    if s[0] == '0':\n        cnt = max(0, cnt - 1)\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    prev = s[0]\n    order = 1\n    dec = 0\n    inc = 0\n    for i in range(1, n):\n        if order:\n            if prev == '1' and s[i] == '0':\n                order = 0\n                dec += 1\n        elif prev == '0' and s[i] == '1':\n            order = 1\n            inc += 1\n        prev = s[i]\n    print(inc + dec)", "for _ in range(int(input())):\n    n = int(input())\n    string = str(input())\n    k = 0\n    p = 0\n    while p < n and string[p] == '0':\n        p += 1\n    for i in range(p, n):\n        if string[i] == '1':\n            if i + 1 < n and string[i + 1] == '0':\n                k += 1\n        elif i + 1 < n and string[i + 1] == '1':\n            k += 1\n    print(k)", "def exe():\n    for i in range(n):\n        if s[i] == '1':\n            break\n    else:\n        return '0'\n    for i in range(n):\n        if s[i] == '1':\n            ind = i\n            break\n    ans = 0\n    for i in range(ind, n - 1):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = list(input())\n    print(exe())", "for _ in range(int(input())):\n    x = int(input())\n    l = input()\n    for i in range(x):\n        if l[i] == '1':\n            break\n    las = '1'\n    c = 0\n    for i in range(i + 1, x):\n        if l[i] != las:\n            c += 1\n            las = l[i]\n    print(c)", "def solve():\n    n = int(input())\n    s = input()\n    s = list(s)\n    pos = -1\n    for i in range(0, n):\n        if s[i] == '1':\n            pos = i\n            break\n    if pos == -1:\n        print(0)\n    else:\n        tot = 0\n        for i in range(pos + 1, n):\n            if tot % 2 == 1:\n                if s[i] == '1':\n                    s[i] = '0'\n                else:\n                    s[i] = '1'\n            if s[i] == '0':\n                tot += 1\n        print(tot)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            count = count + 1\n    if count > 0:\n        if s[0] == '1':\n            print(count)\n        else:\n            print(count - 1)\n    else:\n        print(0)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = input()\n    res = 0\n    for j in range(n - 1):\n        if l[j] == l[j + 1]:\n            continue\n        else:\n            res += 1\n    if res > 0 and l[0] == '0':\n        res -= 1\n    print(res)", "n = int(input())\nfor i in range(n):\n    input()\n    s = input()\n    m = s[0]\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            m += s[i]\n    if s[0] == '0':\n        if len(m) == 1:\n            print(0)\n        else:\n            print(len(m) - 2)\n    else:\n        print(len(m) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    if '1' not in a:\n        print(0)\n    elif '0' not in a:\n        print(0)\n    else:\n        index = a.index('1')\n        count = 0\n        for i in range(index, n - 1):\n            if a[i] != a[i + 1]:\n                count += 1\n        print(count)", "def ugu(s):\n    ans = 0\n    flag = False\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            if not flag and s[i] == '0':\n                ans += 1\n                flag = True\n            elif flag:\n                ans += 1\n    return ans\nn = int(input())\nfor _ in range(n):\n    k = int(input())\n    s = input()\n    print(ugu(s))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (bi, ei) = (-1, n)\n    while bi < n - 1 and s[bi + 1] == '0':\n        bi += 1\n    count = 0\n    for i in range(n - 1, bi, -1):\n        if i - 1 > bi and s[i] != s[i - 1]:\n            count += 1\n    print(count)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    s = input()\n    res = ''\n    res += s[0]\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            res += s[i]\n    if res == '0' or res == '1' or res == '01':\n        print(0)\n    elif res[0] == '1' and res[len(res) - 1] == '1':\n        print(len(res) - 1)\n    elif res[0] == '1' and res[len(res) - 1] == '0':\n        print(len(res) - 1)\n    elif res[0] == '0' and res[len(res) - 1] == '0':\n        print(len(res) - 2)\n    else:\n        print(len(res) - 2)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = input()\n    res = 0\n    for j in range(n - 1):\n        if l[j] == l[j + 1]:\n            continue\n        else:\n            res += 1\n    if res > 0 and l[0] == '0':\n        res -= 1\n    print(res)", "n = int(input())\ninpt = []\nfor i in range(n):\n    inpt.append((int(input()), input()))\nfor i in inpt:\n    string = i[1]\n    length = i[0]\n    ones = string.count('1')\n    zeros = length - ones\n    checking = True\n    pointer = 0\n    moves = 0\n    zero = '0'\n    one = '1'\n    while pointer < length:\n        if checking:\n            para = zero\n        else:\n            para = one\n        if string[pointer] == para:\n            pointer += 1\n            zeros -= 1\n            if zeros == 0 or ones == 0:\n                break\n        elif zeros == 0:\n            break\n        else:\n            checking = not checking\n            ones -= 1\n            (ones, zeros) = (zeros, ones)\n            pointer += 1\n            moves += 1\n            continue\n    print(moves)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    ans = 0\n    i = 1\n    while i < n:\n        if s[i - 1] > s[i]:\n            k = s[i - 1]\n            while 1:\n                if i == n:\n                    break\n                else:\n                    if k != s[i]:\n                        ans += 1\n                        k = s[i]\n                    i += 1\n        i += 1\n    print(ans)", "t = int(input())\nfor xyz in range(t):\n    n = int(input())\n    l = input()\n    if n == 1:\n        print(0)\n    else:\n        i = 0\n        while l[i] == '0':\n            if i == n - 1:\n                break\n            i += 1\n        change = 0\n        current = l[i]\n        while i < n:\n            if l[i] != current:\n                change += 1\n                current = l[i]\n            i += 1\n        print(change)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    count = 0\n    while i < n - 1:\n        if s[i] != s[i + 1]:\n            count += 1\n        i += 1\n    print(count)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = str(input())\n    counter = 0\n    index = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        else:\n            index = i\n            break\n    for i in range(index, n - 1):\n        if s[i] == s[i + 1]:\n            continue\n        else:\n            counter += 1\n    print(counter)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    fo = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            fo = i\n            break\n    for i in range(fo, len(s) - 1):\n        if s[i] != s[i + 1]:\n            count += 1\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    result = 0\n    vis = False\n    count = 0\n    for i in s:\n        if i == '1' and count % 2 == 0:\n            vis = True\n            continue\n        if vis and (i == '0' and count % 2 == 0 or (i == '1' and count % 2 == 1)):\n            result += 1\n            count += 1\n            continue\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [el for el in input()]\n    ans = 0\n    i = 0\n    while i < n and arr[i] == '0':\n        i += 1\n    start = i\n    for i in range(start + 1, n):\n        if arr[i] == arr[i - 1]:\n            pass\n        else:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    length = int(input())\n    myList = [int(i) for i in input().lstrip('0').lstrip('1')]\n    sample = counter = 0\n    for i in myList:\n        if i == sample:\n            counter += 1\n            sample = 1 - sample\n    print(counter)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    count = 1\n    idx = 0\n    while idx < n and s[idx] == '0':\n        idx += 1\n    idx += 1\n    while idx < n:\n        if s[idx] != s[idx - 1]:\n            count += 1\n        idx += 1\n    print(max(0, count - 1))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    res = s[0]\n    x = s[0]\n    for i in range(1, len(s)):\n        if s[i] == x:\n            continue\n        else:\n            res += s[i - 1]\n            x = s[i]\n    if len(res) == 1:\n        print(0)\n    elif res.startswith('0'):\n        print(len(res) - 2)\n    else:\n        print(len(res) - 1)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    while i < n and s[i] == '1':\n        i += 1\n    flipped = 0\n    ans = 0\n    for j in range(i, n):\n        if flipped == 1 and s[j] == '1' or (flipped == 0 and s[j] == '0'):\n            ans += 1\n            flipped = flipped ^ 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (ans, i) = (0, 0)\n    while i < n and s[i] != '1':\n        i += 1\n    j = i\n    while j < n - 1:\n        if s[j] != s[j + 1]:\n            ans += 1\n        j += 1\n    print(ans)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    str = input()\n    t = str[0]\n    for val in str:\n        if val == '0' and t == '1':\n            t = '1234567'\n            break\n        else:\n            t = val\n    if t != '1234567':\n        print(0)\n    else:\n        i = 0\n        while str[i] == '0':\n            i += 1\n        sm = 0\n        while i < n:\n            if str[i] == '1' and sm % 2 == 1:\n                sm += 1\n            elif str[i] == '0' and sm % 2 == 0:\n                sm += 1\n            i += 1\n        print(sm)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for j in range(n - 1):\n        if s[j] != s[j + 1]:\n            cnt = cnt + 1\n    if s[0] == '0' and s.count('1') > 0:\n        cnt = cnt - 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    while i < n and s[i] == '1':\n        i += 1\n    ans = 0\n    while i < n:\n        if s[i - 1] != s[i]:\n            ans += 1\n        i += 1\n    print(ans)", "def helper(s):\n    h = {'1': 1, '0': 0}\n    ans = 0\n    c = 0\n    opp = {'1': '0', '0': '1'}\n    for i in range(len(s)):\n        if h[s[i]] == 1:\n            c += 1\n        if h[s[i]] == 0 and c > 0:\n            ans += 1\n            h[s[i]] = 1\n            h[opp[s[i]]] = 0\n            c = 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    print(helper(input()))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input()))\n    k = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            k += 1\n    if not s[0] and k:\n        k -= 1\n    print(k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if s.count('1') == n or s.count('0') == n:\n        print(0)\n        continue\n    s = s[s.index('1'):]\n    print(s.count('01') + s.count('10'))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    string = input()\n    a = list(string.strip())\n    if n == 1:\n        print(0)\n    else:\n        flips = 0\n        for i in range(1, n):\n            if a[i - 1] != a[i]:\n                flips += 1\n        if a[0] == '1':\n            print(flips)\n        elif flips == 0:\n            print(0)\n        else:\n            print(flips - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    ops = 0\n    inverted = False\n    for i in range(1, len(s)):\n        if not inverted and s[i - 1] == '1' and (s[i] == '0') or (inverted and s[i - 1] == '0' and (s[i] == '1')):\n            ops += 1\n            inverted = not inverted\n    print(ops)", "N = int(input())\noperations_array = [0] * N\nfor i in range(N):\n    m = int(input())\n    s = [int(x) for x in input()]\n    operations = 0\n    if m > 1:\n        j = 0\n        d = -1\n        for j in range(1, m):\n            if s[j] - s[j - 1] == d:\n                d = -1 * d\n                operations += 1\n        operations_array[i] = operations\n    else:\n        operations_array[i] = 0\nfor op in operations_array:\n    print(op)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(n):\n        if s[i] == '1':\n            ans = 0\n            for i in range(i + 1, n):\n                ans += s[i] != s[i - 1]\n            print(ans)\n            c += 1\n            break\n    if c == 0:\n        print(0)", "testCase = int(input())\nfor i in range(testCase):\n    n = int(input())\n    binary = input()\n    count = 0\n    for i in range(n - 1):\n        if binary[i] != binary[i + 1]:\n            count += 1\n    if binary[0] == '0':\n        ans = max(count - 1, 0)\n    else:\n        ans = count\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    cnt = 0\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            cnt += 1\n    if s[0] == '0':\n        cnt = max(0, cnt - 1)\n    print(cnt)"]