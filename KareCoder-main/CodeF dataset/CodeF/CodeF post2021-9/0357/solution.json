["for s in [*open(0)][2::2]:\n    a = list(map(int, s.split()))[1:-1]\n    if len(a) == 1 and a[0] & 1 or a.count(1) == len(a):\n        print(-1)\n    else:\n        print(sum([(i + 1) // 2 for i in a]))", "for s in [*open(0)][2::2]:\n    a = list(map(int, s.split()))[1:-1]\n    if len(a) == 1 and a[0] & 1 or a.count(1) == len(a):\n        print(-1)\n    else:\n        print(sum([(i + 1) // 2 for i in a]))", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    n = int(inp())\n    a = [int(i) for i in inp().split()]\n    for i in a[1:n - 1]:\n        if i != 1:\n            if n == 3 and a[1] % 2:\n                print(-1)\n            else:\n                ans = 0\n                for i in a[1:n - 1]:\n                    ans += (i + 1) // 2\n                print(ans)\n            break\n    else:\n        print(-1)", "def main():\n    import sys\n    inp = sys.stdin.readline\n    test = int(input())\n    while test:\n        n = int(inp())\n        s = [*map(int, inp().split())]\n        col_nech = 0\n        col_pairs = 0\n        for i in range(1, n - 1):\n            col_pairs += s[i] // 2\n            if s[i] % 2:\n                col_nech += 1\n        if len(s) == 3:\n            if s[1] % 2:\n                print(-1)\n            else:\n                print(col_pairs)\n        elif not col_pairs:\n            print(-1)\n        else:\n            print(col_nech + col_pairs)\n        test -= 1\nmain()", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef solve(a):\n    if len(a) == 3:\n        if a[1] % 2 == 1:\n            return -1\n    mid = a[1:-1]\n    if all([value == 1 for value in mid]):\n        return -1\n    return sum([(value + 1) // 2 for value in mid])\nfor _ in range(inp()):\n    _ = inp()\n    print(solve(read_int_list()))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    ok = False\n    have = False\n    r = 0\n    for i in range(1, n - 1):\n        ok = ok or a[i] > 1\n        have = have or a[i] > 0\n        r += a[i] // 2\n        r += a[i] % 2\n    if n == 3 and a[i] % 2 == 1:\n        print(-1)\n    elif have and (not ok):\n        print(-1)\n    else:\n        print(r)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    moves = 0\n    solos = 0\n    for i in range(1, n - 1):\n        moves += a[i] // 2\n        solos += a[i] % 2\n    if n == 3:\n        if a[1] % 2 == 1:\n            print(-1)\n        else:\n            print(moves)\n    elif moves:\n        moves += solos\n        print(moves)\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    a = list(map(int, s.split()))[1:-1]\n    if len(a) == 1 and a[0] & 1 or a.count(1) == len(a):\n        print(-1)\n    else:\n        print(sum([(i + 1) // 2 for i in a]))", "for s in [*open(0)][2::2]:\n    a = list(map(int, s.split()))[1:-1]\n    if len(a) == 1 and a[0] & 1 or a.count(1) == len(a):\n        print(-1)\n    else:\n        print(sum([(i + 1) // 2 for i in a]))", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp += [input()]\nfor s in inp:\n    arr = [int(x) for x in s.split()]\n    cannot = len(arr) == 3 and arr[1] % 2 == 1\n    no_moves = True\n    s = 0\n    for x in arr[1:-1]:\n        if x > 1:\n            no_moves = False\n        if x % 2 == 0:\n            s += x\n        else:\n            s += x + 1\n    cannot = cannot or no_moves\n    if cannot:\n        print(-1)\n    else:\n        print(s // 2)", "import sys\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nfor ti in range(NT):\n    _ = rl()\n    array = list(map(int, rl().split(' ')))\n    if len(array) < 3:\n        pr(0)\n    else:\n        insides = array[1:-1]\n        can_give = len([a for a in insides if a >= 2])\n        if can_give == 0:\n            pr(-1)\n        elif len(array) == 3 and array[1] % 2 == 1:\n            pr(-1)\n        else:\n            total = 0\n            for a in insides:\n                if a % 2 == 0:\n                    total += a // 2\n                else:\n                    total += (a + 1) // 2\n            pr(total)", "import sys\ninp = [a.strip() for a in sys.stdin.readlines()]\nt = int(inp[0])\nk = 1\nfor _ in range(t):\n    n = int(inp[k])\n    k += 1\n    l = [int(x) for x in inp[k].split()]\n    k += 1\n    k_pair = 0\n    k_n_pair = 0\n    for i in l[1:-1]:\n        if i % 2 == 0:\n            k_pair += 1\n        else:\n            k_n_pair += 1\n    s = sum(l[1:-1])\n    f = False\n    for i in l[1:-1]:\n        if i > 1:\n            f = True\n    if len(l) == 3 and l[1] % 2 != 0:\n        print('-1')\n        continue\n    if not f:\n        print('-1')\n        continue\n    print(s // 2 + (k_n_pair // 2 + k_n_pair % 2))", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, arr):\n    if n == 3 and arr[1] % 2 or list(set(arr[1:n - 1])) == [1]:\n        return -1\n    ans = 0\n    for i in range(1, n - 1):\n        ans += arr[i] // 2 + arr[i] % 2\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    l = 0\n    res = 0\n    if n == 3:\n        if a[1] % 2:\n            print(-1)\n        else:\n            print(a[1] // 2)\n        continue\n    ans = 1\n    for i in range(1, n - 1):\n        if a[i] > 1:\n            ans = 0\n    if ans:\n        print(-1)\n        continue\n    for i in range(1, n - 1):\n        l += (a[i] + 1) // 2\n    print(l)", "import math\nfor s in [*open(0)][2::2]:\n    a = [*map(int, s.split())]\n    if len(a) == 3 and a[1] % 2:\n        print(-1)\n        continue\n    for i in range(1, len(a) - 1):\n        if a[i] != 1:\n            break\n    else:\n        print(-1)\n        continue\n    total_cost = 0\n    for i in range(1, len(a) - 1):\n        if a[i] % 2:\n            total_cost += (a[i] + 1) // 2\n        else:\n            total_cost += a[i] // 2\n    print(total_cost)", "import sys\n\ndef solve():\n    l = int(sys.stdin.readline().rstrip('\\n'))\n    arr = sys.stdin.readline().rstrip('\\n').split(' ')\n    arr = [int(_) for _ in arr]\n    res = 0\n    ev = 0\n    od = 0\n    ess = 0\n    for i in range(1, l - 1):\n        if arr[i] % 2 == 0:\n            res += arr[i] // 2\n            ev += 1\n        else:\n            od += 1\n            res += arr[i] // 2 + 1\n        if arr[i] == 1:\n            ess += 1\n    if od == 1 and ev == 0 or ess == l - 2:\n        print(-1)\n    else:\n        print(res)\nT = sys.stdin.readline().rstrip('\\n')\nfor i in range(int(T)):\n    solve()", "import sys\nn = int(sys.stdin.readline())\nfor test in range(n):\n    (d, jishuge) = (0, 0)\n    t = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    for i in range(1, t - 1):\n        jishuge += data[i] % 2\n        d += data[i] // 2\n    if jishuge and t == 3 or d == 0:\n        print(-1)\n        continue\n    print(d + jishuge)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hap = 0\n    cnt1 = 0\n    odd = 0\n    for i in range(1, n - 1):\n        if arr[i] % 2 == 1:\n            if arr[i] == 1:\n                cnt1 += 1\n            odd += 1\n        hap += arr[i] // 2\n    if n - 2 == cnt1:\n        print(-1)\n    elif n == 3 and arr[1] % 2 == 1:\n        print(-1)\n    else:\n        print(hap + odd)", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef solve(a):\n    if len(a) == 3:\n        if a[1] % 2 == 1:\n            return -1\n    x = a[1:-1]\n    if all([value == 1 for value in x]):\n        return -1\n    s = 0\n    for value in x:\n        if value % 2 == 1:\n            s += (value + 1) // 2\n        else:\n            s += value // 2\n    return s\nfor _ in range(inp()):\n    _ = inp()\n    print(solve(read_int_list()))", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\n\ndef multiple():\n    a = map(int, input().split())\n    return a\n\ndef array():\n    a = input().split()\n    return a\n\ndef intarray():\n    a = list(map(int, input().split()))\n    return a\n\ndef getmex(arr):\n    zeros = 0\n    for i in arr:\n        if i == 0:\n            zeros += 1\n    ans = len(arr) + zeros\n    return ans\n\ndef solution():\n    n = int(input())\n    a = intarray()\n    ans = 0\n    wholeturns = 0\n    odds = 0\n    for i in range(1, n - 1):\n        ans += ceil(a[i] / 2)\n        wholeturns += a[i] // 2\n        if a[i] % 2 == 1:\n            odds += 1\n    if wholeturns == 0:\n        ans = -1\n    if len(a) == 3 and a[1] % 2 == 1:\n        ans = -1\n    print(ans)\n    return\nt = int(input())\nfor _ in range(t):\n    solution()", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, arr):\n    if n < 4 and arr[1] % 2 == 1 or list(set(arr[1:n - 1])) == [1]:\n        return -1\n    ans = 0\n    ans += 0\n    ans += -1\n    ans += 1\n    for i in range(1, n - 1):\n        ans += arr[i] // 2 + arr[i] % 2\n        ans += 0\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "import sys\n\ndef func_3(my_list):\n    if len(my_list) == 3 and my_list[1] % 2 != 0:\n        return -1\n    if my_list[1:len(my_list) - 1] == [1] * (len(my_list) - 2):\n        return -1\n    count = 0\n    for i in my_list[1:len(my_list) - 1]:\n        if i % 2 == 0:\n            count += i // 2\n        else:\n            count += (i + 1) // 2\n    return count\n\ndef main():\n    reader = (list(map(int, line.split())) for line in sys.stdin)\n    n = next(reader)[0]\n    for _ in range(n):\n        _ = next(reader)\n        print(func_3(next(reader)))\n\ndef tests():\n    assert func_3([1, 2, 2, 3, 6]) == 4\n    assert func_3([1, 3, 1]) == -1\n    assert func_3([1, 2, 1]) == 1\n    assert func_3([3, 1, 1, 2]) == -1\n    assert func_3([1, 1, 1]) == -1\n    assert func_3([1, 2, 1]) == 1\n    assert func_3([1, 1, 2, 1]) == 2\n    assert func_3([1, 1, 1, 4, 1]) == 4\n    assert func_3([1, 1, 4, 1, 1]) == 4\n    assert func_3([1, 1, 2, 1, 1]) == 3\n    assert func_3([1, 1, 1, 1, 2, 1, 1, 1, 1]) == 7\n    assert func_3([1, 1, 1, 1, 1, 2, 1]) == 5\n    assert func_3([1, 1, 1, 4, 1, 1, 1]) == 6\n    assert func_3([1, 3, 5, 7, 1]) == 9\nmain()", "t = int(input())\nans = []\nfor i in range(t):\n    k = 0\n    cmp = 0\n    n = int(input())\n    L = [int(x) for x in input().split()]\n    if n > 3:\n        for j in range(1, n - 1):\n            if L[j] % 2 == 1:\n                k += L[j] // 2 + 1\n                if L[j] == 1:\n                    cmp += 1\n            else:\n                k += L[j] // 2\n        if cmp == n - 2:\n            ans.append(-1)\n        else:\n            ans.append(k)\n    elif L[1] % 2 == 1:\n        ans.append(-1)\n    else:\n        ans.append(L[1] // 2)\nfor i in range(t):\n    print(ans[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    middle_a = a[1:n - 1]\n    judge = False\n    for num in middle_a:\n        if num >= 2:\n            judge = True\n            break\n    if not judge:\n        print(-1)\n    elif n == 3 and middle_a[0] % 2 == 1:\n        print(-1)\n    else:\n        total = 0\n        for num in middle_a:\n            if num % 2 == 0:\n                total += num // 2\n            else:\n                total += (num + 1) // 2\n        print(total)", "for _ in range(0, int(input())):\n    input()\n    v = list(map(int, input().split()))[1:-1]\n    if len(v) == 1 and v[0] % 2 == 1 or v.count(1) == len(v):\n        print(-1)\n    else:\n        print(sum((0 - -i // 2 for i in v)))", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 3 and l[1] % 2:\n        return -1\n    if max(l[1:n - 1]) == 1:\n        return -1\n    req = 0\n    for i in l[1:n - 1]:\n        req += (i + 1) // 2\n    return req\nt = int(input())\nfor i in range(t):\n    print(func())", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[1:-1]\n    val = 0\n    for i in arr:\n        val += (i + 1) // 2\n    if arr.count(1) == len(arr):\n        print(-1)\n    elif size == 3 and arr[0] % 2 == 1:\n        print(-1)\n    else:\n        print(val)", "for _ in range(0, int(input())):\n    input()\n    v = list(map(int, input().split()))[1:-1]\n    if len(v) == 1 and v[0] % 2 == 1 or v.count(1) == len(v):\n        print(-1)\n    else:\n        print(sum((0 - -i // 2 for i in v)))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = ans = 0\n    mv = 0\n    for i in range(1, n - 1):\n        cnt += 1 * (arr[i] % 2 == 0)\n        ans += arr[i] // 2 if arr[i] % 2 == 0 else (arr[i] + 1) // 2\n        if arr[i] % 2:\n            mv = max(mv, arr[i])\n    if cnt > 0:\n        return ans\n    elif n == 3:\n        return -1\n    elif mv > 1:\n        return ans\n    else:\n        return -1\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 3 and l[1] % 2 == 1 or sum(l[1:-1]) == n - 2:\n        print(-1)\n    elif n == 3 and l[1] == 2:\n        print(1)\n    else:\n        count = 0\n        sum_odd = 0\n        steps = 0\n        for i in l[1:-1]:\n            if i % 2 == 1:\n                count += 1\n                sum_odd += i\n        steps = (count + 1) // 2\n        plus = 0\n        if count % 2 == 0:\n            plus = 1\n        steps += (sum(l[1:-1]) + plus) // 2\n        print(steps)", "import math\n\ndef solve(n, a):\n    if n == 3:\n        if a[1] % 2 == 0:\n            print(int(a[1] / 2))\n        else:\n            print(-1)\n    else:\n        b = a[1:-1]\n        ans = 0\n        noans = True\n        for num in b:\n            if num > 1 and noans:\n                noans = False\n            ans = ans + math.ceil(num / 2)\n        if noans:\n            print(-1)\n        else:\n            print(ans)\ndebugmode = 0\nif debugmode:\n    with open('input.txt', 'r') as f:\n        t = int(f.readline())\n        for _ in range(t):\n            n = int(f.readline())\n            a = list(map(int, f.readline().split()))\n            solve(n, a)\nelse:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        solve(n, a)", "t = int(input())\n\ndef main():\n    for _ in range(t):\n        _ = int(input())\n        arr = list(map(int, input().split()))\n        arr = arr[1:-1]\n        if len(arr) == 1 and arr[0] % 2 == 1:\n            print(-1)\n        elif sum(arr) == len(arr):\n            print(-1)\n        else:\n            ans = 0\n            for i in arr:\n                ans += (i + 1) // 2\n            print(ans)\nmain()", "t = int(input())\nfor test_case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.pop(0)\n    a.pop(-1)\n    if len(a) == 1 and a[0] % 2 == 1:\n        print(-1)\n    elif max(a) == 1:\n        print(-1)\n    else:\n        print((sum(a) + len([True for i in a if i % 2 == 1])) // 2)", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[1:-1]\n    val = 0\n    for i in arr:\n        val += (i + 1) // 2\n    if arr.count(1) == len(arr):\n        print(-1)\n    elif size == 3 and arr[0] % 2 == 1:\n        print(-1)\n    else:\n        print(val)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if n == 3 and lst[1] % 2 == 1:\n        print(-1)\n        continue\n    areOnes = True\n    for i in range(1, n - 1):\n        if lst[i] != 1:\n            areOnes = False\n            break\n    if areOnes:\n        print(-1)\n        continue\n    res = 0\n    for i in range(1, n - 1):\n        res += (lst[i] + 1) // 2\n    print(res)", "def check_stones(numbers, length):\n    number_of_bunch = length - 2\n    if number_of_bunch == 1 and numbers[number_of_bunch] % 2 == 1:\n        return -1\n    if sum(numbers[1:-1]) == number_of_bunch:\n        return -1\n    number_of_moves = 0\n    for i in numbers[1:-1]:\n        number_of_moves += i // 2 + 1 if i % 2 == 1 else i // 2\n    return number_of_moves\n\ndef main():\n    number_of_test_cases = int(input())\n    for _ in range(number_of_test_cases):\n        num_length = int(input())\n        numbers = list(map(int, input().split()))\n        print(check_stones(numbers, num_length))\nmain()", "def AbhiSolveKiya(n, a):\n    even = 0\n    odd = 0\n    ops = 0\n    ones = 0\n    for i in range(1, n - 1):\n        if a[i] == 1:\n            ones += 1\n        if a[i] & 1:\n            odd += 1\n            ops += (a[i] + 1) // 2\n        else:\n            even += 1\n            ops += a[i] // 2\n    if ones == n - 2:\n        return -1\n    if even == 0 and odd == 1:\n        return -1\n    return ops\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(AbhiSolveKiya(n, l))", "t = int(input())\na = []\nfor i in range(t):\n    input()\n    a.append([int(i) for i in input().split(' ')])\nfor l in a:\n    op = 0\n    one = True\n    for i in range(1, len(l) - 1):\n        if one and l[i] != 1:\n            one = False\n        if l[i] % 2 == 0:\n            op += l[i] / 2\n        else:\n            op += (l[i] + 1) / 2\n    if len(l) - 2 == 1 and l[1] % 2 == 1 or one:\n        op = -1\n    print(int(op))", "def count(values):\n    if sum(values) == len(values):\n        return -1\n    if len(values) == 1 and values[0] % 2 == 1:\n        return -1\n    result = 0\n    for i in values:\n        result += i % 2\n        result += i // 2\n    return result\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    values = list(map(int, input().strip().split()))\n    print(count(values[1:-1]))", "for z in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    del l[0], l[-1]\n    if n == 3:\n        if l[0] % 2 == 0:\n            print(l[0] // 2)\n        else:\n            print(-1)\n    elif l.count(1) == n - 2:\n        print(-1)\n    else:\n        odd = 0\n        for i in l:\n            if i % 2 != 0:\n                odd += 1\n        print(sum(l) // 2 + odd // 2 + odd % 2)", "def minStones(arr):\n    if len(arr) == 3 and arr[1] % 2 == 1:\n        return -1\n    flag = True\n    for i in range(1, len(arr) - 1):\n        if arr[i] != 1:\n            flag = False\n            break\n    if flag:\n        return -1\n    s = 0\n    for i in range(1, len(arr) - 1):\n        n = arr[i]\n        if n % 2 == 0:\n            s += n // 2\n        else:\n            s += n // 2 + 1\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(minStones(arr))", "def problem_c(n, m):\n    total = 0\n    flag = False\n    even = 0\n    odd = 0\n    m.pop(0)\n    m.pop(-1)\n    for i in m:\n        if flag == False:\n            if i != 1:\n                flag = True\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        total += i\n    if flag == False or (n == 1 and odd == 1):\n        return -1\n    elif odd == 0:\n        return int(total / 2)\n    elif even == 0:\n        return int((total + n) / 2)\n    elif even != 0 and odd != 0:\n        return int((total + odd) / 2)\nt = int(input())\nfor _ in range(t):\n    print(problem_c(int(input()) - 2, [int(i) for i in input().split()]))", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    v = list(map(int, input().split()))\n    ok = False\n    ans = 0\n    for i in range(1, n - 1):\n        t = (v[i] + 1) // 2\n        ans += t\n        if v[i] > 1:\n            ok = True\n    if not ok or (n == 3 and v[1] % 2 == 1):\n        print('-1')\n    else:\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    nums = nums[1:n - 1]\n    if len(nums) == 1 and nums[0] % 2 == 1:\n        print(-1)\n        continue\n    if sum(nums) == len(nums):\n        print(-1)\n        continue\n    ans = 0\n    for num in nums:\n        if num % 2 == 1:\n            ans += num // 2 + 1\n        else:\n            ans += num // 2\n    print(ans)", "import sys\n\ndef run():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if all((arr[i] == 1 for i in range(1, n - 1))) or (n == 3 and arr[1] % 2 == 1):\n        print(-1)\n    else:\n        ans = odds = 0\n        for i in range(1, n - 1):\n            ans += arr[i] // 2\n            if arr[i] % 2:\n                odds += 1\n        print(ans + odds)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        run()\nmain()", "t = int(input())\nfor it in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split(' ')]\n    (s, tt) = (0, 0)\n    for i in a[1:-1]:\n        if i == 1:\n            tt += 1\n        s += i - i // 2\n    if tt == n - 2:\n        print(-1)\n    elif n == 3 and a[1] % 2 == 1:\n        print(-1)\n    else:\n        print(s)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = [1 for _ in range(n - 2)]\n    if n == 3 and a[1] % 2 != 0 or a[1:n - 1] == temp:\n        print('-1')\n    else:\n        count = 0\n        for i in a[1:n - 1]:\n            if i % 2 == 0:\n                count += i // 2\n            else:\n                count += (i + 1) // 2\n        print(count)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = l[1:n - 1]\n    if n == 3:\n        if l[1] % 2 != 0:\n            print(-1)\n        else:\n            print(l[1] // 2)\n    else:\n        (sum, ctr) = (0, 0)\n        valid = False\n        for i in range(len(l1)):\n            if l1[i] == 1:\n                ctr += 1\n                if ctr == n - 2:\n                    valid = True\n                    break\n            sum += (l1[i] + 1) // 2\n        if valid == True:\n            print(-1)\n        else:\n            print(sum)", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[1:-1]\n    val = 0\n    for i in arr:\n        val += (i + 1) // 2\n    if arr.count(1) == len(arr):\n        print(-1)\n    elif size == 3 and arr[0] % 2 == 1:\n        print(-1)\n    else:\n        print(val)", "def calc(a, n):\n    if n == 3 and a[1] & 1:\n        return -1\n    if all([a[i] == 1 for i in range(1, n - 1)]):\n        return -1\n    ans = 0\n    for i in range(1, n - 1):\n        ans += a[i] + 1 >> 1\n    return ans\nk = int(input())\nwhile k:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(calc(a, n))\n    k -= 1", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    f = c[1:b - 1].count(1)\n    n = 0\n    if b == 3 and c[1] % 2 == 1:\n        print(-1)\n    elif f == b - 2:\n        print(-1)\n    else:\n        for y in range(1, b - 1):\n            n += (c[y] + 1) // 2\n        print(n)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[1] % 2 != 0 or a[1:n - 1].count(1) == n - 2:\n        print(-1)\n    else:\n        sum = 0\n        for j in range(1, n - 1):\n            sum += (a[j] + 1) // 2\n        print(sum)", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[1:-1]\n    val = 0\n    for i in arr:\n        val += (i + 1) // 2\n    if arr.count(1) == len(arr):\n        print(-1)\n    elif size == 3 and arr[0] % 2 == 1:\n        print(-1)\n    else:\n        print(val)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 3 and a[1] & 1 or a[1:n - 1] == [1] * (n - 2):\n        print(-1)\n        continue\n    s = 0\n    for i in range(1, n - 1):\n        if a[i] & 1:\n            s = s + (a[i] + 1 >> 1)\n        else:\n            s = s + (a[i] >> 1)\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    p = 0\n    if n == 3 and s[1] % 2 != 0 or s[1:n - 1].count(1) == n - 2:\n        p = -1\n    else:\n        for i in s[1:n - 1]:\n            p += (i + 1) // 2\n    print(p)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[1] % 2 != 0 or a[1:n - 1].count(1) == n - 2:\n        print(-1)\n    else:\n        sum = 0\n        for j in range(1, n - 1):\n            sum += (a[j] + 1) // 2\n        print(sum)", "def solve():\n    input()\n    A = [int(x) for x in input().split()]\n    A = A[1:-1]\n    if len(A) == 1 and A[0] % 2 == 1:\n        return -1\n    (pairs, odd) = (0, 0)\n    for x in A:\n        pairs += x // 2\n        odd += x % 2\n    if pairs == 0 and odd > 0:\n        return -1\n    return pairs + odd\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[1:-1]\n    val = 0\n    for i in arr:\n        val += (i + 1) // 2\n    if arr.count(1) == len(arr):\n        print(-1)\n    elif size == 3 and arr[0] % 2 == 1:\n        print(-1)\n    else:\n        print(val)", "for _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.pop(0)\n    numbers.pop(-1)\n    ans = 0\n    if max(numbers) == 1:\n        ans = -1\n    elif len(numbers) == 1 and numbers[0] % 2 != 0:\n        ans = -1\n    else:\n        for item in numbers:\n            ans += item // 2 + item % 2\n    print(ans)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    net = A[1:-1]\n    if n == 3 and A[1] % 2 == 1:\n        print(-1)\n        return\n    flag = 1\n    count = 0\n    for i in net:\n        if i != 1:\n            flag = 0\n        count += ceil(i / 2)\n    if flag:\n        print(-1)\n        return\n    print(count)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "n = int(input())\nfor test in range(n):\n    (s, odd) = (0, 0)\n    t = int(input())\n    data = list(map(int, input().split()))\n    for i in range(1, t - 1):\n        odd += data[i] % 2\n        s += data[i] // 2\n    if odd and t == 3 or s == 0:\n        print(-1)\n        continue\n    s += odd\n    print(s)", "def solve(a, n):\n    if n == 3 and a[1] % 2 == 1:\n        return -1\n    flag = False\n    ans = 0\n    for i in range(1, n - 1):\n        if a[i] > 1:\n            flag = True\n        if a[i] % 2 == 0:\n            ans += a[i] // 2\n        else:\n            ans += (a[i] + 1) // 2\n    if not flag:\n        return -1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = solve(a, n)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[1] % 2 or all((i == 1 for i in a[1:-1])):\n        print(-1)\n    else:\n        ans = 0\n        for i in a[1:-1]:\n            ans += (i + 1) // 2\n        print(ans)", "for T in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if len(arr) == 3 and arr[1] % 2 == 1 or max(arr[1:len(arr) - 1]) == 1:\n        print(-1)\n    else:\n        c = 0\n        for i in range(1, len(arr) - 1):\n            c += (arr[i] + 1) // 2\n        print(c)", "for _ in [0] * int(input()):\n    n = int(input())\n    a = list(map(int, input().split()))[1:n - 1]\n    p = s = 0\n    for i in a:\n        p = p + (i & 1)\n        s = s + i\n    if s == n - 2 or (n == 3 and s & 1 == 1):\n        print(-1)\n    else:\n        print((s - p) // 2 + p)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n == 3 and a[1] % 2:\n        print(-1)\n        continue\n    (res, s) = (0, 0)\n    for k in a[1:n - 1]:\n        p = k % 2\n        res += k // 2 + p\n        s += k\n    if s == n - 2:\n        print(-1)\n    else:\n        print(res)", "def func(n):\n    n1 = 0\n    for i in range(1, n + 1):\n        j = 1\n        s1 = 1\n        while j <= i:\n            s1 *= (n + 1 - j) / j\n            j += 1\n        n1 += s1\n    return n1\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a1 = a[1:-1]\n    if len(a1) == 1 and a1[0] % 2 == 1 or a1.count(1) == len(a1):\n        print(-1)\n    else:\n        aa = sum(a1)\n        for i in a1:\n            aa += i % 2\n        print(aa // 2)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    d = 0\n    flag = True\n    for i in range(1, n - 1):\n        if a[i] % 2 == 1:\n            c += 1\n        if a[i] >= 2:\n            flag = False\n    if n == 3 and c == 1:\n        print(-1)\n        continue\n    s = sum(a) - a[0] - a[-1] + c\n    if flag:\n        print(-1)\n        continue\n    print(s // 2)", "t = int(input())\n\ndef h(l, n):\n    if n < 4 and l[1] % 2 == 1:\n        return False\n    else:\n        val = sum(l) - l[0] - l[n - 1]\n        if val < n - 1:\n            return False\n        else:\n            return True\n\ndef q(l, n):\n    if h(l, n):\n        s = 0\n        for i in range(1, n - 1):\n            s += (l[i] + 1) // 2\n        return s\n    else:\n        return -1\nfor i in range(t):\n    n = int(input())\n    j = input().split()\n    l = list(map(int, j))\n    print(q(l, n))", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    s.pop(n - 1)\n    s.pop(0)\n    s.sort()\n    ans = 0\n    if len(s) == 1 and s[0] % 2 == 1 or s[n - 3] == 1:\n        print(-1)\n    else:\n        for i in range(n - 2):\n            if s[i] % 2 == 1:\n                ans += (s[i] + 1) // 2\n            else:\n                ans += s[i] // 2\n        print(ans)", "for _ in range(int(input())):\n    y = int(input())\n    x = list(map(int, input().split()))\n    z = 0\n    if y == 3 and x[1] % 2 != 0:\n        z = -1\n    elif x[1:y - 1].count(1) == y - 2:\n        z = -1\n    else:\n        for i in range(1, y - 1):\n            if x[i] % 2 != 0:\n                z += x[i] // 2 + 1\n            else:\n                z += x[i] // 2\n    print(z)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[1] % 2 == 1:\n        print(-1)\n    else:\n        q = -1\n        for i in range(1, n - 1):\n            if a[i] > 1:\n                q = 0\n                break\n        if q == 0:\n            for i in range(1, n - 1):\n                q = q + (a[i] + 1) // 2\n        print(q)", "def solve(a, n):\n    flag = 0\n    res = 0\n    for i in range(1, n - 1):\n        if a[i] % 2 == 1:\n            res += (a[i] + 1) // 2\n        else:\n            res += a[i] // 2\n            flag = 1\n        if flag == 0 and a[i] >= 2 and (n > 3):\n            flag = 1\n    if flag:\n        return res\n    else:\n        return -1\n    return\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "T = int(input())\n\ndef calc_op(l):\n    cnt = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            cnt += l[i] // 2\n        else:\n            cnt += l[i] // 2 + 1\n    return cnt\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))[1:-1]\n    if len(l) == 1:\n        if l[0] % 2 == 0:\n            print(calc_op(l))\n        else:\n            print(-1)\n    else:\n        is_2_over_exists = False\n        for i in l:\n            if i >= 2:\n                is_2_over_exists = True\n                break\n        if is_2_over_exists:\n            print(calc_op(l))\n        else:\n            print(-1)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ok = True\n    if n == 3:\n        if a[1] % 2:\n            print(-1)\n            continue\n    ans = 0\n    for i in range(1, n - 1):\n        ok = ok & (a[i] == 1)\n        ans += ceil(a[i] / 2)\n    if ok:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\n\ndef funk(tab):\n    e = 0\n    if n == 1 and tab[0] % 2 == 1:\n        return -1\n    for i in tab:\n        if i > 1:\n            break\n    else:\n        return -1\n    for i in tab:\n        e += int((i + 1) / 2)\n    return e\nfor i in range(t):\n    n = int(input())\n    temp = input().split()\n    tab = []\n    for i in range(1, n - 1):\n        tab.append(int(temp[i]))\n    n -= 2\n    print(funk(tab))", "n = int(input())\nfor i in range(1, n + 1):\n    a = int(input())\n    nums = list(map(int, input().split()))\n    cnt1 = 0\n    cnt2 = 0\n    ans = 0\n    for j in range(1, a - 1):\n        cnt2 = cnt2 + nums[j]\n        if nums[j] % 2 == 1:\n            cnt1 = cnt1 + 1\n    ans = (cnt1 + cnt2) // 2\n    k = 0\n    if a == 3 and nums[1] % 2 == 1:\n        k = 1\n    if cnt1 == a - 2 and ans == a - 2:\n        k = 1\n    if k == 0:\n        print(ans)\n    if k == 1:\n        print('-1')", "def solve(arr, n):\n    (cntone, res) = (0, 0)\n    if n == 3:\n        return -1 if arr[1] % 2 == 1 else arr[1] // 2\n    for i in range(1, n - 1):\n        if arr[i] == 1:\n            cntone += 1\n        res += (arr[i] + 1) // 2\n    if cntone == n - 2:\n        return -1\n    return res\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr, n))\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[1] % 2 != 0 or a[1:n - 1].count(1) == n - 2:\n        print(-1)\n    else:\n        sum = 0\n        for j in range(1, n - 1):\n            if a[j] % 2 == 0:\n                sum += a[j] // 2\n            else:\n                sum += (a[j] + 1) // 2\n        print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3:\n        if a[1] % 2 == 1:\n            print(-1)\n        else:\n            print(a[1] // 2)\n    else:\n        b = a[1:n - 1]\n        if max(b) == 1:\n            print(-1)\n        else:\n            c = 0\n            for i in b:\n                if i % 2 == 0:\n                    c += i // 2\n                else:\n                    c += i // 2 + 1\n            print(c)", "def calc_op(n, a):\n    ans = 0\n    for i in range(1, n - 1):\n        if a[i] % 2 == 0:\n            ans += a[i] // 2\n        else:\n            ans += a[i] // 2 + 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3:\n        if a[1] % 2 == 0:\n            print(calc_op(n, a))\n        else:\n            print(-1)\n    else:\n        over_two = False\n        for i in range(1, n - 1):\n            if a[i] >= 2:\n                over_two = True\n                break\n        if over_two:\n            print(calc_op(n, a))\n        else:\n            print(-1)", "n = int(input())\nstone_num = []\nstones = []\nmodify_index = []\nans = []\nfor i in range(n):\n    stone_num.append(int(input()))\n    stones.append(list(map(lambda x: int(x), input().split())))\n    stones[i].pop(0)\n    stones[i].pop(len(stones[i]) - 1)\nfor i in stones:\n    index = 0\n    modify_index_1 = []\n    while index < len(i):\n        if i[index] % 2 != 0:\n            modify_index_1.append(index)\n            i[index] += 1\n        index += 1\n    modify_index.append(modify_index_1)\nj = 0\nwhile j < len(stones):\n    if len(modify_index[j]) == len(stones[j]) and max(stones[j]) == 2:\n        ans.append(-1)\n    elif len(modify_index[j]) == len(stones[j]) and len(modify_index[j]) == 1:\n        ans.append(-1)\n    else:\n        ans_1 = 0\n        all_stones = 0\n        for k in range(len(stones[j])):\n            all_stones += stones[j][k]\n        ans_1 += int(all_stones / 2)\n        ans.append(ans_1)\n    j += 1\nfor i in ans:\n    print(i)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[1:n - 1]\n    ans = 0\n    if n == 3 and a[1] % 2 == 1 or max(b) == 1:\n        print(-1)\n        continue\n    for i in range(1, n - 1):\n        ans += int((a[i] + 1) / 2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    if n == 3 and a[1] % 2 == 1:\n        print(-1)\n        continue\n    f = False\n    ans = 0\n    for i in range(1, n - 1):\n        ans += (a[i] + 1) // 2\n        if a[i] != 1:\n            f = True\n    if f is False:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    if n == 3 and l[1] % 2 != 0:\n        ans = -1\n    elif l[1:n - 1].count(1) == n - 2:\n        ans = -1\n    else:\n        for i in range(1, n - 1):\n            if l[i] % 2 == 0:\n                ans += l[i] // 2\n            else:\n                ans += (l[i] + 1) // 2\n    print(ans)\n    t -= 1", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (o, x) = (0, 0)\n    for i in range(1, n - 1):\n        if arr[i] % 2 == 0:\n            x += arr[i] // 2\n        else:\n            o += 1\n    if max(arr[1:n - 1]) == 1:\n        print(-1)\n        continue\n    elif n == 3 and arr[1] % 2 != 0:\n        print(-1)\n        continue\n    s = sum(arr[1:n - 1])\n    s = s - o\n    print(s // 2 + o)", "for t in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    if max(arr[1:-1]) == 1:\n        print(-1)\n    elif N == 3 and arr[1] % 2:\n        print(-1)\n    else:\n        for i in range(1, N - 1):\n            ans += (arr[i] + 1) // 2\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    stones = list(map(int, input().split()))\n    sub = stones[1:n - 1]\n    if n == 3 and stones[1] % 2 == 1 or max(sub) == 1:\n        print(-1)\n        continue\n    count = 0\n    for i in range(1, n - 1):\n        count += (stones[i] + 1) // 2\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    if n == 3 and k[1] % 2 == 1:\n        print(-1)\n        continue\n    if sum(k[1:-1]) == n - 2:\n        print(-1)\n        continue\n    ans = 0\n    for x in k[1:-1]:\n        ans += (x + 1) // 2\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    j = a[1:n - 1]\n    k = len(j)\n    val = 0\n    for i in range(k):\n        val += (j[i] + 1) // 2\n    if j.count(1) == k:\n        print('-1')\n    elif n == 3 and j[0] % 2 == 1:\n        print('-1')\n    else:\n        print(val)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = True\n    (ans, count) = (0, 0)\n    if n == 3:\n        if l[1] % 2 != 0:\n            flag = False\n    for i in range(1, n - 1):\n        if l[i] == 1:\n            count = count + 1\n    if count == n - 2:\n        flag = False\n    for i in range(1, n - 1):\n        if l[i] % 2 == 0:\n            ans = ans + l[i] // 2\n        else:\n            ans = ans + (l[i] + 1) // 2\n    if flag == False:\n        print(-1)\n    else:\n        print(ans)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    net = A[1:-1]\n    if n == 3 and A[1] % 2 == 1:\n        print(-1)\n        return\n    flag = 1\n    for i in net:\n        if i != 1:\n            flag = 0\n            break\n    if flag:\n        print(-1)\n        return\n    count = 0\n    for i in net:\n        if i != 1:\n            flag = 0\n        count += ceil(i / 2)\n    print(count)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "n = int(input())\nfor test in range(n):\n    (d, jishuge) = (0, 0)\n    t = int(input())\n    data = list(map(int, input().split()))\n    for i in range(1, t - 1):\n        jishuge += data[i] % 2\n        d += data[i] // 2\n    if jishuge and t == 3 or d == 0:\n        print(-1)\n        continue\n    print(d + jishuge)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    if max(a[1:-1]) == 1 or (n == 3 and a[1] % 2 == 1):\n        print(-1)\n        continue\n    answer = 0\n    for i in range(1, n - 1):\n        answer += (a[i] + 1) // 2\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[1:n - 1]\n    e = []\n    o = []\n    if len(a) == 1 and a[0] % 2 == 1:\n        print(-1)\n        continue\n    for i in a:\n        if i % 2 == 0:\n            e += [i // 2]\n        else:\n            o += [i]\n    cnt = sum(e)\n    if cnt == 0 and max(o) == 1:\n        print(-1)\n        continue\n    for i in o:\n        cnt += (i + 1) // 2\n    print(cnt)", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    se = 0\n    no = 0\n    for i in range(1, len(l1) - 1):\n        if l1[i] % 2 == 0:\n            se += l1[i]\n        else:\n            no += 1\n            if l1[i] == 1:\n                se += 1\n            else:\n                se += l1[i]\n    if n == 3:\n        if l1[1] % 2 == 0:\n            print(int(l1[1] / 2))\n        else:\n            print(-1)\n    elif se == n - 2:\n        print(-1)\n    else:\n        q = int((se + no) / 2)\n        print(q)", "import math\nimport collections\nimport itertools\nimport functools\n\ndef fun(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    if len(a[1:n - 1]) == 1 and a[1] & 1:\n        print('-1')\n    elif sum(a[1:n - 1]) == n - 2:\n        print('-1')\n    else:\n        ans = 0\n        for x in a[1:n - 1]:\n            ans += math.ceil(x / 2)\n        print(ans)\nfor tc in range(int(input())):\n    fun(tc)"]