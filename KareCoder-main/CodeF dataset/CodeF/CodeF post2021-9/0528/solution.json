["import sys\ninp = sys.stdin.readline\n\ndef getCost(a: int):\n    return a * (a + 1) // 2\nfor _ in range(int(inp())):\n    n = int(inp())\n    k = list(map(int, inp().split()))\n    h = list(map(int, inp().split()))\n    ans = 0\n    segEnd = len(k) - 1\n    segMax = len(k) - 1\n    for i in range(len(k) - 2, -1, -1):\n        if h[segMax] <= k[segMax] - k[i]:\n            ans += getCost(h[segMax] + (k[segEnd] - k[segMax]))\n            segEnd = i\n            segMax = i\n        elif h[i] + k[segMax] - k[i] > h[segMax]:\n            segMax = i\n    ans += getCost(h[segMax] + (k[segEnd] - k[segMax]))\n    print(ans)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    inp()\n    k = list(map(int, inp().split()))\n    h = list(map(int, inp().split()))\n    i = 0\n    while i < len(h):\n        j = i + 1\n        while j < len(h):\n            s = k[j] - h[j] + 1\n            if s <= k[i]:\n                if h[j] < h[i] + (k[j] - k[i]):\n                    h[j] = h[i] + (k[j] - k[i])\n                h.pop(i)\n                k.pop(i)\n                i -= 1\n                break\n            else:\n                j += 1\n        i += 1\n    ans = 0\n    for i in h:\n        ans += i * (i + 1) // 2\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef helper(a):\n    return a * (a + 1) // 2\n\ndef solve(n, arr):\n    ans = helper(arr[0][1])\n    curr = arr[0][1]\n    for i in range(1, n):\n        d = arr[i][0] - arr[i - 1][0]\n        if d >= arr[i][1]:\n            ans += helper(arr[i][1])\n            curr = arr[i][1]\n        else:\n            ans += helper(curr + d) - helper(curr)\n            curr += d\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    arr = list(zip(k, h))\n    arr.sort(key=lambda x: x[0] - x[1])\n    a = []\n    a.append(arr[0])\n    for i in range(1, n):\n        if arr[i][0] > a[-1][0]:\n            a.append(arr[i])\n    print(solve(len(a), a))", "import sys\ninput = sys.stdin.readline\nans = []\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    a = 0\n    p = h[-1]\n    q = k[-1]\n    for i in range(n - 2, -1, -1):\n        d = p - (q - k[i])\n        if d > 0:\n            if d < h[i]:\n                p += h[i] - d\n        else:\n            a += (1 + p) * p // 2\n            p = h[i]\n            q = k[i]\n    a += (1 + p) * p // 2\n    ans.append(a)\nfor i in ans:\n    print(i)", "answer = []\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    count = 0\n    k_r = k[-1]\n    k_l = k[-1] - h[-1] + 1\n    for i in range(n - 2, -1, -1):\n        if k_l <= k[i]:\n            pass\n        else:\n            count += (k_r - k_l + 2) * (k_r - k_l + 1) // 2\n            k_r = k[i]\n        k_l = min(k_l, k[i] - h[i] + 1)\n    count += (k_r - k_l + 2) * (k_r - k_l + 1) // 2\n    answer.append(count)\nprint('\\n'.join(map(str, answer)))", "t = int(input())\nans = []\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    otv = 0\n    time = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([time[i] - x[i], time[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    for it in st:\n        if it[0] >= r:\n            otv += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    otv += (r - l) * (r - l + 1) // 2\n    ans.append(otv)\nprint('\\n'.join([str(i) for i in ans]))", "from array import array\nresults = []\nfor _ in range(int(input())):\n    n = int(input())\n    time = array('Q', map(int, input().split()))\n    hp = array('Q', map(int, input().split()))\n    interval = None\n    mana = 0\n    for index in range(n - 1, -1, -1):\n        if interval is None:\n            interval = (time[index] - hp[index] + 1, time[index])\n        elif interval[0] <= time[index]:\n            begin = min(interval[0], time[index] - hp[index] + 1)\n            interval = (begin, interval[1])\n        else:\n            length = interval[1] - interval[0] + 1\n            mana += length * (length + 1) // 2\n            interval = (time[index] - hp[index] + 1, time[index])\n    length = interval[1] - interval[0] + 1\n    mana += length * (length + 1) // 2\n    results.append(str(mana))\nprint('\\n'.join(results))", "import math\nimport random\nfrom collections import Counter, deque\nfrom sys import stdout\nimport time\nfrom math import factorial, log, gcd\nimport sys\nfrom decimal import Decimal\nimport heapq\nfrom copy import deepcopy\n\ndef S():\n    return sys.stdin.readline().split()\n\ndef I():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef IS():\n    return sys.stdin.readline().replace('\\n', '')\n\ndef main():\n    n = II()\n    t = I()\n    h = I()\n    ans = (1 + h[-1]) * h[-1] // 2\n    dp = [(0, 0) for _ in range(n)]\n    dp[-1] = (t[-1] - h[-1] + 1, h[-1])\n    for i in range(n - 2, -1, -1):\n        (health, _time) = (h[i], t[i])\n        (pre_start, pre_col) = dp[i + 1]\n        start = _time - health + 1\n        if pre_start <= _time and _time - pre_start + 1 >= health:\n            dp[i] = dp[i + 1]\n        elif pre_start <= _time:\n            ans -= pre_col * (pre_col + 1) // 2\n            d = pre_col - (_time - pre_start + 1) + health\n            ans += d * (d + 1) // 2\n            dp[i] = (start, d)\n        else:\n            ans += (health + 1) * health // 2\n            dp[i] = (start, health)\n    print(ans)\nfor _ in range(II()):\n    main()", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    k = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    last = k[-1]\n    value = h[-1]\n    for i in range(n - 2, -1, -1):\n        h[i] = max(h[i], value - (last - k[i]))\n        last = k[i]\n        value = h[i]\n    last = 0\n    value = 0\n    total = 0\n    for i in range(n):\n        if last >= k[i] - (h[i] - 1):\n            total += (k[i] - last) * (value + 1 + value + k[i] - last) // 2\n            value += k[i] - last\n        else:\n            total += (h[i] + 1) * h[i] // 2\n            value = h[i]\n        last = k[i]\n    out += str(int(total)) + '\\n'\nprint(out)", "for iq in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        vz = b[k] + a[i] - a[k]\n        if vz <= 0:\n            ans += b[k] * (b[k] + 1) // 2\n            k = i\n        elif vz < b[i]:\n            b[k] += b[i] - vz\n    ans += b[k] * (b[k] + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i] + 1, k[i]])\n    st.sort()\n    (l, r) = (-2, -1)\n    ans = 0\n    for it in st:\n        if it[0] > r:\n            if l != -2 and r != -1:\n                ans += (r - l + 1) * (r - l + 2) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    if l != -2 and r != -1:\n        ans += (r - l + 1) * (r - l + 2) // 2\n    print(ans)", "for _ in range(int(input().strip())):\n    n = int(input().strip())\n    k = list(map(int, input().strip().split()))\n    h = list(map(int, input().strip().split()))\n    f = []\n    for i in range(n):\n        f.append([k[i] - h[i], k[i]])\n    f.sort()\n    ans = 0\n    (l, r) = (-1, -1)\n    for it in f:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "def processing(monster, power, n):\n    ans = 0\n    span = power[-1]\n    tail = monster[-1]\n    for i in reversed(range(n - 1)):\n        if monster[i] <= tail - span:\n            ans += span * (span + 1) // 2\n            span = power[i]\n            tail = monster[i]\n        elif tail - span + 1 <= monster[i] - power[i]:\n            continue\n        else:\n            span = power[i] + tail - monster[i]\n    ans += span * (span + 1) // 2\n    return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    monster = [int(i) for i in input().split()]\n    power = [int(i) for i in input().split()]\n    print(processing(monster, power, n))\n    t -= 1", "def solve(s, h):\n    ramps = []\n    i = len(h) - 1\n    end_ramp = s[i]\n    start_ramp = s[i] - h[i]\n    i -= 1\n    while 1:\n        if i < 0:\n            break\n        if s[i] > start_ramp:\n            if h[i] <= s[i] - start_ramp:\n                pass\n            else:\n                start_ramp = s[i] - h[i]\n        else:\n            ramps.append([start_ramp, end_ramp])\n            end_ramp = s[i]\n            start_ramp = s[i] - h[i]\n        i -= 1\n    ramps.append([start_ramp, end_ramp])\n    sum = 0\n    for i in ramps:\n        dur = i[1] - i[0]\n        sum += dur * (dur + 1) // 2\n    return sum\nn = int(input())\nfor i in range(n):\n    input()\n    (*s,) = map(int, input().split())\n    (*h,) = map(int, input().split())\n    print(solve(s, h))", "import sys\nfrom math import *\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    t = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    for i in range(n - 2, -1, -1):\n        h[i] = max(h[i], h[i + 1] - (t[i + 1] - t[i]))\n    for i in range(1, n):\n        if h[i] > t[i] - t[i - 1]:\n            h[i] = h[i - 1] + (t[i] - t[i - 1])\n    s = 0\n    i = 0\n    while i < n - 1:\n        if h[i + 1] <= t[i + 1] - t[i]:\n            s += h[i] * (h[i] + 1) // 2\n        i += 1\n    s += h[-1] * (h[-1] + 1) // 2\n    print(s)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    k = L()\n    h = L()\n    ans = [[h[0] * (h[0] + 1) // 2, 0]]\n    d = {0: h[0]}\n    for i in range(1, n):\n        while ans and d[ans[-1][1]] + k[i] - k[ans[-1][1]] < h[i]:\n            ans.pop()\n        if not ans:\n            ans.append([h[i] * (h[i] + 1) // 2, i])\n            d[i] = h[i]\n        elif k[i] - k[ans[-1][1]] >= h[i]:\n            ans.append([h[i] * (h[i] + 1) // 2, i])\n            d[i] = h[i]\n        else:\n            diff = k[i] - k[ans[-1][1]]\n            var = d[ans[-1][1]]\n            ans.append([var * diff + diff * (diff + 1) // 2, i])\n            d[i] = diff + var\n    fans = 0\n    for i in ans:\n        fans += i[0]\n    print(fans)", "for j in range(int(input())):\n    n = int(input())\n    ks = list(map(int, input().split()))\n    hs = list(map(int, input().split()))\n    ks.insert(0, 0)\n    hs.insert(0, 0)\n    ind = n\n    curr = hs[ind]\n    su = 0\n    for i in range(n - 1, -1, -1):\n        if ks[ind] - ks[i] < curr:\n            curr += max(0, hs[i] - (curr - (ks[ind] - ks[i])))\n        else:\n            su += curr * (curr + 1) // 2\n            curr = hs[i]\n            ind = i\n    print(su)", "for i in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    l = [h[n - 1]]\n    c = 0\n    r = k[n - 1] - h[n - 1] + 1\n    ks = k[n - 1]\n    hs = h[n - 1]\n    for j in range(n - 2, -1, -1):\n        if r <= k[j] - h[j] + 1:\n            continue\n        elif r <= k[j]:\n            r = k[j] - h[j] + 1\n            hs = ks - r + 1\n            l[c] = hs\n        else:\n            c += 1\n            l.append(h[j])\n            r = k[j] - h[j] + 1\n            ks = k[j]\n            hs = h[j]\n    s = 0\n    for j in range(c + 1):\n        s += l[j] * (l[j] + 1) // 2\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    seconds = [int(el) for el in input().split(' ')]\n    points = [int(el) for el in input().split(' ')]\n    current = points[-1]\n    for z in range(n - 2, -1, -1):\n        h = points[z]\n        diff = seconds[z + 1] - seconds[z]\n        points[z] = max([h, current - diff])\n        current = points[z]\n    total = points[0] * (points[0] + 1) // 2\n    current = points[0]\n    for j in range(1, n):\n        diff = seconds[j] - seconds[j - 1]\n        h = points[j]\n        if h <= diff:\n            current = h\n            total += h * (h + 1) // 2\n        else:\n            total += current * diff + diff * (diff + 1) // 2\n            current += diff\n    print(total)", "def tr(n):\n    return n * (n + 1) // 2\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    res = 0\n    curh = 0\n    curk = 2 * 10 ** 9\n    for i in range(n - 1, -1, -1):\n        if curk - k[i] >= curh:\n            res += tr(curh)\n            curk = k[i]\n            curh = h[i]\n        else:\n            curh = max(curh, h[i] + curk - k[i])\n    res += tr(curh)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = []\n    for i in range(n):\n        s.append((k[i] - h[i] + 1, k[i]))\n    ans = []\n    i = n - 1\n    while i != 0:\n        a = s[i]\n        b = s[i - 1]\n        if a[0] <= b[1]:\n            new = (min(a[0], b[0]), a[1])\n            s.pop(-1)\n            s.pop(-1)\n            i -= 1\n            s.append(new)\n        else:\n            ans.append(s[i])\n            s.pop(-1)\n            i -= 1\n    ans.append(s[0])\n    res = 0\n    for i in range(len(ans)):\n        cnt = ans[i][1] - ans[i][0]\n        res += (cnt + 2) * (cnt + 1) // 2\n    print(res)", "def summ(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = []\n    s.append([k[0], h[0]])\n    for i in range(1, n):\n        while len(s) > 0:\n            prevtime = s[-1][0]\n            prevh = s[-1][1]\n            diff = k[i] - prevtime\n            if diff >= h[i]:\n                s.append([k[i], h[i]])\n                break\n            else:\n                h[i] = max(h[i], diff + prevh)\n                s.pop()\n        if len(s) == 0:\n            s.append([k[i], h[i]])\n    ans = 0\n    for i in range(len(s)):\n        ans += summ(s[i][-1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ks = s.split()\n    s = input()\n    hs = s.split()\n    arr = []\n    for i in range(n):\n        arr.append([int(ks[i]) - int(hs[i]) + 1, int(ks[i])])\n    arr.sort()\n    a = [arr[0][0], arr[0][1]]\n    ans = 0\n    for i in range(1, n):\n        if arr[i][0] <= a[1]:\n            a[1] = max(a[1], arr[i][1])\n        else:\n            x = a[1] - a[0] + 1\n            ans += x * (x + 1) // 2\n            a = [arr[i][0], arr[i][1]]\n    x = a[1] - a[0] + 1\n    ans += x * (x + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ks = s.split()\n    s = input()\n    hs = s.split()\n    arr = []\n    for i in range(n):\n        arr.append([int(ks[i]) - int(hs[i]) + 1, int(ks[i])])\n    arr.sort()\n    a = [arr[0][0], arr[0][1]]\n    ans = 0\n    for i in range(1, n):\n        if arr[i][0] <= a[1]:\n            a[1] = max(a[1], arr[i][1])\n        else:\n            x = a[1] - a[0] + 1\n            ans += x * (x + 1) // 2\n            a = [arr[i][0], arr[i][1]]\n    x = a[1] - a[0] + 1\n    ans += x * (x + 1) // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    tm = list(map(int, input().split()))\n    hm = list(map(int, input().split()))\n    lstS = [tm[0] - hm[0] + 1]\n    lstE = [tm[0]]\n    for i in range(1, n):\n        e = tm[i]\n        s = tm[i] - hm[i] + 1\n        if len(lstS) == 0:\n            lstS.append(s)\n            lstE.append(e)\n        if len(lstS) != 0 and s <= lstE[-1]:\n            while len(lstS) > 0 and s <= lstE[-1]:\n                os = lstS.pop()\n                lstE.pop()\n                s = min(os, s)\n            lstS.append(s)\n            lstE.append(e)\n        else:\n            lstS.append(s)\n            lstE.append(e)\n    tot = 0\n    for i in range(len(lstS)):\n        rng = lstE[i] - lstS[i] + 1\n        tot += rng * (rng + 1) // 2\n    print(tot)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    tm = list(map(int, input().split()))\n    hm = list(map(int, input().split()))\n    lstS = [tm[0] - hm[0] + 1]\n    lstE = [tm[0]]\n    for i in range(1, n):\n        e = tm[i]\n        s = tm[i] - hm[i] + 1\n        if len(lstS) == 0:\n            lstS.append(s)\n            lstE.append(e)\n        if len(lstS) != 0 and s <= lstE[-1]:\n            while len(lstS) > 0 and s <= lstE[-1]:\n                os = lstS.pop()\n                lstE.pop()\n                s = min(os, s)\n            lstS.append(s)\n            lstE.append(e)\n        else:\n            lstS.append(s)\n            lstE.append(e)\n    tot = 0\n    for i in range(len(lstS)):\n        rng = lstE[i] - lstS[i] + 1\n        tot += rng * (rng + 1) // 2\n    print(tot)", "for t in range(int(input())):\n    n = int(input())\n    k = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    atleast = h[:]\n    for i in range(n - 2, -1, -1):\n        if k[i + 1] - k[i] < atleast[i + 1]:\n            if atleast[i] < atleast[i + 1] - (k[i + 1] - k[i]):\n                atleast[i] = atleast[i + 1] - (k[i + 1] - k[i])\n    ans = atleast[0] * (atleast[0] + 1) // 2\n    for i in range(1, n):\n        ans += atleast[i] * (atleast[i] + 1) // 2\n        if atleast[i] > k[i] - k[i - 1]:\n            ans -= atleast[i] * (atleast[i] + 1) // 2\n            ans -= atleast[i - 1] * (atleast[i - 1] + 1) // 2\n            atleast[i] = atleast[i - 1] + k[i] - k[i - 1]\n            ans += atleast[i] * (atleast[i] + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    time = [int(x) for x in input().split()]\n    damage = [int(x) for x in input().split()]\n    biggesttime = n - 1\n    biggestdamage = n - 1\n    for j in range(n - 2, -1, -1):\n        diffoftime = time[biggesttime] - time[j]\n        if diffoftime >= damage[biggestdamage]:\n            biggestdamage = j\n            biggesttime = j\n        elif diffoftime <= damage[biggestdamage] - damage[j]:\n            damage[j] = 0\n        else:\n            damage[biggestdamage] = damage[j] + diffoftime\n            damage[j] = 0\n    s = 0\n    for x in damage:\n        if x != 0:\n            s += x * (x + 1) // 2\n    print(s)", "def problemC(n, seconds, health):\n    intervals = []\n    for i in range(n):\n        intervals.append((seconds[i] - health[i] + 1, seconds[i]))\n    intervals.sort()\n    (l, r) = (-1, -2)\n    ans = 0\n    for (left, right) in intervals:\n        if left > r:\n            ans += (r - l + 1) * (r - l + 2) // 2\n            (l, r) = (left, right)\n        else:\n            r = max(r, right)\n    ans += (r - l + 1) * (r - l + 2) // 2\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    seconds = list(map(int, input().split(' ')))\n    health = list(map(int, input().split(' ')))\n    print(problemC(n, seconds, health))", "for iq in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        vz = b[k] + a[i] - a[k]\n        if vz <= 0:\n            ans += b[k] * (b[k] + 1) // 2\n            k = i\n        elif vz < b[i]:\n            b[k] += b[i] - vz\n    ans += b[k] * (b[k] + 1) // 2\n    print(ans)", "import math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom functools import lru_cache\nimport copy\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    (l, r) = (k[-1] - h[-1] + 1, k[-1])\n    i = n - 2\n    ans = 0\n    while i >= 0:\n        if k[i] < l:\n            ans += (r - l + 1) * (r - l + 2) // 2\n            l = k[i] - h[i] + 1\n            r = k[i]\n        else:\n            l = min(l, k[i] - h[i] + 1)\n        i -= 1\n    ans += (r - l + 1) * (r - l + 2) // 2\n    print(ans)", "for iq in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        vz = b[k] + a[i] - a[k]\n        if vz <= 0:\n            ans += b[k] * (b[k] + 1) // 2\n            k = i\n        elif vz < b[i]:\n            b[k] += b[i] - vz\n    ans += b[k] * (b[k] + 1) // 2\n    print(ans)", "for iq in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        vz = b[k] + a[i] - a[k]\n        if vz <= 0:\n            ans += b[k] * (b[k] + 1) // 2\n            k = i\n        elif vz < b[i]:\n            b[k] += b[i] - vz\n    ans += b[k] * (b[k] + 1) // 2\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    l = -1\n    r = -1\n    res = 0\n    for i in range(n - 1, -1, -1):\n        if l == -1:\n            r = k[i]\n            l = k[i] - h[i] + 1\n        elif k[i] < l:\n            res += (r - l + 1) * (r - l + 2) // 2\n            r = k[i]\n            l = k[i] - h[i] + 1\n        elif k[i] - h[i] + 1 < l:\n            l = k[i] - h[i] + 1\n    res += (r - l + 1) * (r - l + 2) // 2\n    print(res)", "for iq in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        vz = b[k] + a[i] - a[k]\n        if vz <= 0:\n            ans += b[k] * (b[k] + 1) // 2\n            k = i\n        elif vz < b[i]:\n            b[k] += b[i] - vz\n    ans += b[k] * (b[k] + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "from array import array\nfor _ in range(int(input())):\n    n = int(input())\n    time = array('Q', map(int, input().split()))\n    hp = array('Q', map(int, input().split()))\n    interval = None\n    mana = 0\n    for index in range(n - 1, -1, -1):\n        if interval is None:\n            interval = (time[index] - hp[index] + 1, time[index])\n        elif interval[0] <= time[index]:\n            begin = min(interval[0], time[index] - hp[index] + 1)\n            interval = (begin, interval[1])\n        else:\n            length = interval[1] - interval[0] + 1\n            mana += length * (length + 1) // 2\n            interval = (time[index] - hp[index] + 1, time[index])\n    length = interval[1] - interval[0] + 1\n    mana += length * (length + 1) // 2\n    print(mana)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "def sum_till(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    arrivals = list(map(int, input().split()))\n    healths = list(map(int, input().split()))\n    intervals = []\n    for (i, arrival) in enumerate(arrivals):\n        this_r = arrival\n        this_l = arrival - healths[i] + 1\n        intervals.append((this_l, this_r))\n    intervals.sort()\n    merged_intervals = []\n    (curr_l, curr_r) = (1, 0)\n    ans = 0\n    for (i, (l, r)) in enumerate(intervals):\n        if l <= curr_r:\n            curr_r = max(curr_r, r)\n        else:\n            merged_intervals.append((curr_l, curr_r))\n            curr_l = l\n            curr_r = r\n    merged_intervals.append((curr_l, curr_r))\n    for (l, r) in merged_intervals:\n        ans += sum_till(r - l + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    a = []\n    for i in range(n - 1, -1, -1):\n        a.append((k[i] - h[i] + 1, k[i]))\n    a.sort()\n    stack = []\n    stack.append(a[0])\n    for i in range(1, n):\n        if stack[-1][1] >= a[i][0]:\n            temp = stack.pop()\n            stack.append((temp[0], max(a[i][1], temp[1])))\n        else:\n            stack.append(a[i])\n    ans = 0\n    for i in range(len(stack)):\n        t = stack[i][1] - stack[i][0] + 1\n        ans += t * (t + 1) // 2\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().strip().split()))\n    lh = list(map(int, input().strip().split()))\n    lis = []\n    lis.append((ls[0] - lh[0] + 1, ls[0]))\n    for i in range(1, n):\n        a = ls[i] - lh[i] + 1\n        if a <= lis[-1][1] and lis[-1][0] <= a:\n            lis[-1] = (lis[-1][0], ls[i])\n        elif lis[-1][0] > a:\n            del lis[-1]\n            while True:\n                if len(lis) == 0:\n                    lis.append((a, ls[i]))\n                    break\n                elif a <= lis[-1][1] and lis[-1][0] <= a:\n                    lis[-1] = (lis[-1][0], ls[i])\n                    break\n                elif lis[-1][0] > a:\n                    del lis[-1]\n                else:\n                    lis.append((a, ls[i]))\n                    break\n        else:\n            lis.append((a, ls[i]))\n    co = 0\n    for i in range(len(lis)):\n        k = lis[i][1] - lis[i][0] + 1\n        co += k * (k + 1) // 2\n    print(co)", "for _ in range(int(input().strip())):\n    n = int(input().strip())\n    k = list(map(int, input().strip().split()))\n    h = list(map(int, input().strip().split()))\n    f = []\n    for i in range(n):\n        f.append([k[i] - h[i], k[i]])\n    f.sort()\n    ans = 0\n    (l, r) = (0, 0)\n    for it in f:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ks = [int(x) for x in input().split()]\n    hs = [int(x) for x in input().split()]\n    dct = {}\n    for i in range(n):\n        dct[ks[i] - hs[i]] = max(dct.get(ks[i] - hs[i], -1), ks[i])\n    ds = sorted(dct.keys())\n    i = 0\n    ans = 0\n    while 1:\n        right = dct[ds[i]]\n        left = ds[i]\n        while i < len(ds) and ds[i] < right:\n            right = max(right, dct[ds[i]])\n            i += 1\n        ans += (right - left) * (right - left + 1) // 2\n        if i == len(ds):\n            break\n    print(ans)", "from re import L\nfrom collections import deque\nfrom collections import Counter\nimport sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    now = 0\n    pre = 0\n    for i in range(n - 2, -1, -1):\n        diff = a[i + 1] - a[i]\n        b[i] = max(b[i], b[i + 1] - diff)\n    for (k, h) in zip(a, b):\n        if k - pre >= h:\n            ans += (1 + h) * h // 2\n            now = h\n        else:\n            ans += (now + 1 + now + k - pre) * (k - pre) // 2\n            now = now + k - pre\n        pre = k\n    print(ans)", "for _ in range(int(input())):\n    m = int(input())\n    monsters = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    intervals = []\n    for (idx, monster_location) in enumerate(monsters):\n        intervals.append([monster_location - health[idx] + 1, monster_location])\n    intervals.sort(key=lambda x: (x[0], x[1]))\n    overlap = []\n    (start, end) = intervals[0]\n    for (next_start, next_end) in intervals[1:]:\n        if next_start <= end:\n            end = max(end, next_end)\n        else:\n            overlap.append([start, end])\n            start = next_start\n            end = next_end\n    if not overlap or overlap[-1] != [start, end]:\n        overlap.append([start, end])\n    ans = 0\n    for (start, end) in overlap:\n        ans += (end - start + 1) * (end - start + 2) // 2\n    print(ans)", "def summ(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = []\n    s.append([k[0], h[0]])\n    for i in range(1, n):\n        while len(s) > 0:\n            prevtime = s[-1][0]\n            prevhealth = s[-1][1]\n            diff = k[i] - prevtime\n            if diff >= h[i]:\n                s.append([k[i], h[i]])\n                break\n            else:\n                h[i] = max(diff + prevhealth, h[i])\n                s.pop()\n        if len(s) == 0:\n            s.append([k[i], h[i]])\n    ans = 0\n    for i in range(len(s)):\n        val = s[i][-1]\n        ans += summ(val)\n    print(ans)", "def solve(n):\n    return n * (n + 1) // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    app = list(map(int, input().split()))\n    hea = list(map(int, input().split()))\n    ran = []\n    for i in range(n):\n        r = app[i]\n        l = app[i] - hea[i] + 1\n        ran.append([l, r])\n    ran.sort(key=lambda x: x[0])\n    l = 1\n    r = 0\n    ans = 0\n    for i in range(n):\n        if ran[i][0] > r:\n            ans += solve(r - l + 1)\n            l = ran[i][0]\n            r = ran[i][1]\n        else:\n            r = max(r, ran[i][1])\n    ans += solve(r - l + 1)\n    print(ans)", "def sum_till(n):\n    return n * (n + 1) // 2\nfor t in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    if True:\n        start = []\n        end = []\n        for i in range(1, n + 1):\n            st = k[-i] - h[-i] + 1\n            ed = k[-i]\n            start.append(st)\n            end.append(ed)\n        mana = 0\n        temp_st = start[0]\n        temp_ed = end[0]\n        diff = []\n        for i in range(n - 1):\n            temp_st = min(temp_st, start[i])\n            temp_ed = max(temp_ed, end[i])\n            if temp_st > end[i + 1]:\n                diff.append(temp_ed - temp_st + 1)\n                temp_st = start[i + 1]\n                temp_ed = end[i + 1]\n        temp_st = min(temp_st, start[n - 1])\n        temp_ed = max(temp_ed, end[n - 1])\n        diff.append(temp_ed - temp_st + 1)\n        s = 0\n        for i in diff:\n            s += sum_till(i)\n        print(s)", "def sumN(X):\n    return X * (X + 1) // 2\nfrom math import inf\nfor t in range(int(input())):\n    N = int(input())\n    K = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    seg = list()\n    for i in range(len(H)):\n        seg.append((K[i] - H[i], K[i]))\n    seg.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for i in seg:\n        if i[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = tuple(i)\n        else:\n            r = max(r, i[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    lt = list(map(int, input().split()))\n    lh = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append([lt[i] - lh[i] + 1, lt[i]])\n    li.sort()\n    i = 0\n    ele = li[0]\n    while ele[-1] != li[-1][-1]:\n        if li[i + 1][0] <= li[i][1]:\n            li[i] = [min(li[i][0], li[i + 1][0]), max(li[i + 1][1], li[i][1])]\n            li.pop(i + 1)\n        else:\n            i += 1\n        ele = li[i]\n    s = 0\n    for ele in li:\n        s += (ele[-1] - ele[-2] + 1) * (ele[-1] - ele[-2] + 2) // 2\n    print(int(s))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    inter = []\n    for i in range(n):\n        inter.append([k[i] - h[i], k[i]])\n    inter.sort()\n    ans = 0\n    s = -1\n    e = -1\n    for i in inter:\n        if i[0] >= e:\n            ans += (e - s) * (e - s + 1) // 2\n            s = i[0]\n            e = i[1]\n        else:\n            e = max(e, i[1])\n    ans += (e - s) * (e - s + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    arr = []\n    for elem in range(n):\n        arr.append([k[elem] - h[elem], k[elem]])\n    arr.sort()\n    (x, y) = (-1, -1)\n    ans = 0\n    for el in arr:\n        if el[0] >= y:\n            ans += (y - x) * (y - x + 1) // 2\n            (x, y) = el\n        else:\n            y = max(y, el[1])\n    ans += (y - x) * (y - x + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "T = int(input())\n\ndef calc(n):\n    return (n + 1) * n // 2\n\ndef solve():\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    ranges = []\n    for i in range(n):\n        ranges += [(k[i] - (h[i] - 1), k[i])]\n    ranges = sorted(ranges)\n    cur_l = ranges[0][0]\n    cur_r = ranges[0][1]\n    new_ranges = [(cur_l, cur_r)]\n    for i in range(1, n):\n        l = ranges[i][0]\n        r = ranges[i][1]\n        if l <= new_ranges[-1][1]:\n            new_ranges[-1] = (new_ranges[-1][0], max(r, new_ranges[-1][1]))\n        else:\n            new_ranges += [(l, r)]\n    answer = 0\n    for i in range(len(new_ranges)):\n        l = new_ranges[i][0]\n        r = new_ranges[i][1]\n        answer += calc(r - l + 1)\n    return answer\nfor t in range(T):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    time = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        l = time[i]\n        r = time[i] - health[i] + 1\n        ans.append([r, l])\n\n    def fun(x):\n        return x * (x + 1) // 2\n    arr = sorted(ans)\n    ans = []\n    val = 0\n    for ele in arr:\n        if not ans or ans[-1][-1] < ele[0]:\n            if ans:\n                l = ans[-1][0]\n                r = ans[-1][1]\n                val += fun(r - l + 1)\n            ans.append(ele)\n        else:\n            ans[-1][-1] = max(ans[-1][-1], ele[1])\n    (l, r) = (ans[-1][0], ans[-1][1])\n    val += fun(r - l + 1)\n    print(val)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        st.append([k[i] - h[i], k[i]])\n    st.sort()\n    (l, r) = (-1, -1)\n    ans = 0\n    for it in st:\n        if it[0] >= r:\n            ans += (r - l) * (r - l + 1) // 2\n            (l, r) = it\n        else:\n            r = max(r, it[1])\n    ans += (r - l) * (r - l + 1) // 2\n    print(ans)", "def cal(a):\n    return a * (a + 1) // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = [int(i) for i in input().split(' ')]\n    h = [int(i) for i in input().split(' ')]\n    stack = []\n    ans = 0\n    for i in range(n):\n        origin = k[i] - h[i] + 1\n        while stack:\n            if stack[-1][0] <= origin and stack[-1][1] >= origin:\n                origin = stack[-1][0]\n                stack.pop()\n                break\n            elif stack[-1][1] < origin:\n                break\n            stack.pop()\n        stack.append([origin, k[i]])\n    for i in stack:\n        ans += cal(i[1] - i[0] + 1)\n    print(ans)", "import io, os\nimport sys\nimport re\nimport math\nfrom math import log2 as lg\nfrom math import gcd\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    ends = get()\n    monsters = get()\n    intervals = []\n    for j in range(m):\n        (start, end) = (ends[j] - monsters[j] + 1, ends[j])\n        intervals.append((start, end))\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    (start, end) = (intervals[0][0], intervals[0][1])\n    for j in range(1, m):\n        if intervals[j][0] <= end:\n            (start, end) = (min(start, intervals[j][0]), max(end, intervals[j][1]))\n        else:\n            merged.append((start, end))\n            (start, end) = (intervals[j][0], intervals[j][1])\n    merged.append((start, end))\n    ans = 0\n    for term in merged:\n        gap = term[1] - term[0] + 1\n        ans += gap * (gap + 1) // 2\n    print(ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = deque()\n    res = 0\n    for i in range(n):\n        d.append((k[i] - h[i] + 1, k[i]))\n    while len(d) != 0:\n        if len(d) >= 2:\n            (first, second) = (d[-2], d[-1])\n            if first[1] >= second[0]:\n                d.pop()\n                d.pop()\n                d.append((min(first[0], second[0]), second[1]))\n                continue\n        elem = d.pop()\n        res += (elem[1] - elem[0] + 1) * (elem[1] - elem[0] + 2) // 2\n    print(res)", "import sys, collections\n\ndef solve(n, ts, ls):\n    res = [0] * n\n    for i in range(n):\n        (t, l) = (ts[i], ls[i])\n        if not i:\n            res[i] = (1 + l) * l // 2\n        elif ts[i - 1] < t - (l - 1):\n            res[i] = res[i - 1] + (1 + l) * l // 2\n        else:\n            (jj, one) = (-1, t - l + 1)\n            for j in range(i - 1, -1, -1):\n                if ts[j] < one:\n                    jj = j\n                    break\n                else:\n                    one = min(one, ts[j] - ls[j] + 1)\n            cnt = t - one + 1\n            cur = (1 + cnt) * cnt // 2\n            if jj != -1:\n                cur += res[jj]\n            res[i] = cur\n    return res[n - 1]\ninput = sys.stdin.readline\ntests = int(input()[:-1])\nfor test in range(tests):\n    n = int(input()[:-1])\n    times = [int(s) for s in input()[:-1].split()]\n    lives = [int(s) for s in input()[:-1].split()]\n    print(solve(n, times, lives))", "T = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    k = input().split()\n    h = input().split()\n    for i in range(n):\n        k[i] = int(k[i])\n    for i in range(n):\n        h[i] = int(h[i])\n    for i in range(n - 1, 0, -1):\n        for j in range(i - 1, -1, -1):\n            if h[i] - (k[i] - k[j]) > 0 and h[j] > h[i] - (k[i] - k[j]):\n                h[i] = h[j] + (k[i] - k[j])\n    sum = 0\n    last = k[-1] + 10\n    for i in range(n - 1, -1, -1):\n        if k[i] <= last:\n            a = int(h[i])\n            b = int(h[i] + 1)\n            if a % 2 == 0:\n                a = int(a / 2)\n            else:\n                b = int(b / 2)\n            sum += int(a * b)\n            last = k[i] - h[i]\n    print(sum)", "import sys\n\ndef eprint(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\ntestcases = int(input())\nfor _ in range(testcases):\n    _ = int(input())\n    spawns = input().split()\n    spawns = [int(x) for x in spawns]\n    health = input().split()\n    health = [int(x) for x in health]\n    mana = 0\n    monsters = list(zip(spawns, health))\n    monsters.sort(key=lambda x: (x[0] - x[1], -x[1]))\n    time = 0\n    charging_since = 0\n    for monster in monsters:\n        start = monster[0] - monster[1]\n        eprint('time is', time, 'monster:', monster, 'mana:', mana)\n        if time > monster[0]:\n            eprint('already killed that one')\n            pass\n        elif time > start:\n            eprint('continuing to charge')\n            mana += (monster[0] - charging_since) * (monster[0] - charging_since + 1) // 2 - (time - charging_since) * (time - charging_since + 1) // 2\n            time = monster[0]\n        else:\n            eprint('starting to charge')\n            mana += monster[1] * (monster[1] + 1) // 2\n            time = monster[0]\n            charging_since = start\n    eprint(monsters)\n    print(mana)", "testcases = int(input())\nfor i in range(testcases):\n    n_monster = int(input())\n    input_1 = input().split()\n    appear_list = list(map(int, input_1))\n    input_2 = input().split()\n    health_list = list(map(int, input_2))\n    mana = int(0)\n    for i in range(1, n_monster):\n        for j in range(i):\n            if appear_list[i] - health_list[i] < appear_list[j]:\n                health_list[i] = max([health_list[j] + (appear_list[i] - appear_list[j]), health_list[i]])\n                health_list[j] = 0\n    for i in range(n_monster):\n        mana = mana + health_list[i] * (health_list[i] + 1) // 2\n    print(mana)", "testcases = int(input())\nfor i in range(testcases):\n    n_monster = int(input())\n    input_1 = input().split()\n    appear_list = list(map(int, input_1))\n    input_2 = input().split()\n    health_list = list(map(int, input_2))\n    mana = int(0)\n    for i in range(1, n_monster):\n        for j in range(i)[::-1]:\n            if appear_list[i] - health_list[i] < appear_list[j]:\n                health_list[i] = max([health_list[j] + (appear_list[i] - appear_list[j]), health_list[i]])\n                health_list[j] = 0\n    for i in range(n_monster):\n        mana = mana + health_list[i] * (health_list[i] + 1) // 2\n    print(mana)", "import sys\nimport collections\ninput = sys.stdin.readline\nt = int(input().strip())\n\ndef merge(stk):\n    for i in range(len(stk)):\n        for j in range(i + 1, len(stk)):\n            if stk[j][0] > stk[i][1] or stk[j][1] < stk[i][0]:\n                continue\n            else:\n                stk[i] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n                stk[j] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n    return list(set(map(tuple, stk)))\nfor _ in range(t):\n    n = int(input().strip())\n    ks = list(map(int, input().split()))\n    for i in range(len(ks)):\n        ks[i] -= 1\n    hs = list(map(int, input().split()))\n    stk = []\n    for i in range(len(ks)):\n        l = ks[i] - hs[i] + 1\n        r = ks[i]\n        rng = (l, r)\n        stk.append(rng)\n    for i in range(1):\n        stk = merge(stk)\n    ret = 0\n    while stk:\n        rng = stk.pop()\n        length = rng[1] - rng[0] + 1\n        ret += length * (length + 1) // 2\n    print(ret)", "import sys\nimport collections\ninput = sys.stdin.readline\nt = int(input().strip())\n\ndef merge(stk):\n    for i in range(len(stk)):\n        for j in range(i + 1, len(stk)):\n            if stk[j][0] > stk[i][1] or stk[j][1] < stk[i][0]:\n                continue\n            else:\n                stk[i] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n                stk[j] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n    return list(set(map(tuple, stk)))\nfor _ in range(t):\n    n = int(input().strip())\n    ks = list(map(int, input().split()))\n    for i in range(len(ks)):\n        ks[i] -= 1\n    hs = list(map(int, input().split()))\n    stk = []\n    for i in range(len(ks)):\n        l = ks[i] - hs[i] + 1\n        r = ks[i]\n        rng = (l, r)\n        stk.append(rng)\n    for i in range(50):\n        stk = merge(stk)\n    ret = 0\n    while stk:\n        rng = stk.pop()\n        length = rng[1] - rng[0] + 1\n        ret += length * (length + 1) // 2\n    print(ret)", "import sys\nimport collections\ninput = sys.stdin.readline\nt = int(input().strip())\n\ndef merge(stk):\n    for i in range(len(stk)):\n        for j in range(i + 1, len(stk)):\n            if stk[j][0] > stk[i][1] or stk[j][1] < stk[i][0]:\n                continue\n            else:\n                stk[i] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n                stk[j] = (min(stk[i][0], stk[j][0]), max(stk[i][1], stk[j][1]))\n    return list(set(map(tuple, stk)))\nfor _ in range(t):\n    n = int(input().strip())\n    ks = list(map(int, input().split()))\n    for i in range(len(ks)):\n        ks[i] -= 1\n    hs = list(map(int, input().split()))\n    stk = []\n    for i in range(len(ks)):\n        l = ks[i] - hs[i] + 1\n        r = ks[i]\n        rng = (l, r)\n        stk.append(rng)\n    for i in range(100):\n        stk = merge(stk)\n    ret = 0\n    while stk:\n        rng = stk.pop()\n        length = rng[1] - rng[0] + 1\n        ret += length * (length + 1) // 2\n    print(ret)"]