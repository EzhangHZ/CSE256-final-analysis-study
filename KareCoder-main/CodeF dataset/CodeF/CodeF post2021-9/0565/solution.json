["import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    print(math.ceil(math.sqrt(3 / 2 * int(input()))))", "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left\n\ndef f(a, b, c):\n    (a, b, c) = sorted((a, b, c))\n    return (b, a + 1, c, 2 * (b + c))\n(a, b, c) = (0, 0, 0)\ndp = []\nwhile not dp or dp[-1] < 1000000000.0:\n    (a, b, c, v) = f(a, b, c)\n    if not dp:\n        dp.append(v)\n    else:\n        dp.append(dp[-1] + v)\nfor _ in range(int(input())):\n    n = int(input())\n    ans = bisect_left(dp, n)\n    print(ans + 1)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef solve():\n    n = int(input())\n    if n <= 6:\n        return 2 if n <= 2 else 3\n    k = int(math.sqrt(n // 6))\n    while 6 * (k + 1) ** 2 < n:\n        k += 1\n    v = 6 * k ** 2\n    if v >= n:\n        return 3 * k\n    v += 4 * k\n    if v >= n:\n        return 3 * k + 1\n    v += 4 * k + 2\n    if v >= n:\n        return 3 * k + 2\n    return 3 * k + 3\nfor _ in range(int(input())):\n    print(solve())", "import sys\nDEBUG = False\n\ndef check(n):\n    k = (n / 2 / 3) ** 0.5\n    k = int(k)\n\n    def test(a, b, c):\n        if (a * b + a * c + b * c) * 2 >= n:\n            print(a + b + c)\n            return True\n        return False\n    if test(k, k, k):\n        return\n    if test(k, k, k + 1):\n        return\n    if test(k, k + 1, k + 1):\n        return\n    if test(k + 1, k + 1, k + 1):\n        return\n\ndef main(f):\n    t = int(f.readline())\n    for i in range(t):\n        n = int(f.readline())\n        check(n)\nif DEBUG:\n    f = open('input.txt', 'r')\nelse:\n    f = sys.stdin\nmain(f)\nf.close()", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    i = int((n / 6) ** 0.5)\n    total = 6 * i ** 2\n    add = 4 * i\n    i *= 3\n    while total < n:\n        total += add\n        i += 1\n        if i % 3 != 0:\n            add += 2\n    out += str(i) + '\\n'\nprint(out)", "import sys\nfrom collections import deque\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nnlist = []\nfor ti in range(NT):\n    nlist.append((int(rl()), ti))\nnlist.sort()\nnlist = deque(nlist)\nL = [0, 0, 0]\nnlines = 0\ntot = 0\nout = [0] * NT\nwhile len(nlist) > 0:\n    nlines += 1\n    L[nlines % 3] += 1\n    tot += 2 * (L[(nlines + 1) % 3] + L[(nlines + 2) % 3])\n    while nlist[0][0] <= tot:\n        (_, i) = nlist.popleft()\n        out[i] = nlines\n        if len(nlist) == 0:\n            break\nfor o in out:\n    pr(o)", "import math as m\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    Ammar = int(input())\n    SagHai = int(m.sqrt(3 / 2 * Ammar))\n    MUEDMDMDMD = 0\n    for i in range(SagHai, SagHai + 2):\n        if i * i * 2 / 3 >= Ammar:\n            MUEDMDMDMD = i\n            break\n    if Ammar == 1 or Ammar == 2:\n        print(2)\n    else:\n        print(MUEDMDMDMD)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nans = 0\nfor i in range(int(input())):\n    a = int(input())\n    f = int((3 / 2 * a) ** 0.5)\n    final = 0\n    for i in range(f, f + 2):\n        if 2 * i ** 2 / 3 >= a:\n            final = i\n            break\n    if a == 1 or a == 2:\n        print(2)\n    else:\n        print(final)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nimport math as m\nans = 0\nfor i in range(int(input())):\n    a = int(input())\n    f = int(m.sqrt(3 / 2 * a))\n    final = 0\n    for i in range(f, f + 2):\n        if 2 * i ** 2 / 3 >= a:\n            final = i\n            break\n    if a == 1 or a == 2:\n        print(2)\n    else:\n        print(final)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nans = 0\nfor i in range(int(input())):\n    a = int(input())\n    f = int((3 / 2 * a) ** 0.5)\n    final = 0\n    for i in range(f, f + 2):\n        if 2 * i ** 2 / 3 >= a:\n            final = i\n            break\n    if a == 1 or a == 2:\n        print(2)\n    else:\n        print(final)", "import sys\nDEBUG = False\n\ndef check(n):\n    k = (n / 2 / 3) ** 0.5\n    k = int(k)\n\n    def test(a, b, c):\n        if (a * b + a * c + b * c) * 2 >= n:\n            print(a + b + c)\n            return True\n        return False\n    if test(k, k, k - 1):\n        return\n    if test(k, k, k):\n        return\n    if test(k, k, k + 1):\n        return\n    if test(k, k + 1, k + 1):\n        return\n    if test(k + 1, k + 1, k + 1):\n        return\n\ndef main(f):\n    t = int(f.readline())\n    for i in range(t):\n        n = int(f.readline())\n        check(n)\nif DEBUG:\n    f = open('input.txt', 'r')\nelse:\n    f = sys.stdin\nmain(f)\nf.close()", "from typing import Iterator, List\n\ndef solve(triangles: List[int]) -> int:\n    n = int(input())\n    low = 0\n    high = len(triangles) - 1\n    index = (low + high) // 2\n    while True:\n        if triangles[index] > n:\n            high = index\n        elif triangles[index] < n:\n            low = index\n        else:\n            return index\n        if high - low == 1:\n            return high\n        index = (high + low) // 2\n\ndef diter() -> Iterator[int]:\n    base = 0\n    while True:\n        yield from range(base, base + 3)\n        base += 2\nintersections = d = 0\ntriangles = [0]\nd = diter()\nwhile triangles[-1] < 10 ** 9:\n    intersections += next(d)\n    triangles.append(2 * intersections)\nresults = []\nfor _ in range(int(input())):\n    results.append(str(solve(triangles)))\nprint('\\n'.join(results))", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "from math import isqrt\nfor _ in range(int(input())):\n    t = (int(input()) * 3 + 1) // 2\n    s = isqrt(t)\n    print(s + 1 if s * s < t else s)", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "import math as mt\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(mt.ceil((k / 6.0) ** 0.5 * 3))", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "for d in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "from math import isqrt\nfor _ in range(int(input())):\n    t = (int(input()) * 3 + 1) // 2\n    s = isqrt(t)\n    print(s + 1 if s * s < t else s)", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "import math as mt\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    print(mt.ceil((k / 6.0) ** 0.5 * 3))", "for _ in range(int(input())):\n    print(1 + int((int(input()) * 1.5) ** 0.5 - 9e-09))", "import math as m\nfor i in range(int(input())):\n    print(m.ceil((1.5 * int(input())) ** 0.5))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = int(math.sqrt(n / 6))\n    if 6 * s * s >= n:\n        print(3 * s)\n    elif 6 * s * s + 4 * s >= n:\n        print(3 * s + 1)\n    elif 6 * s * s + 8 * s + 2 >= n:\n        print(3 * s + 2)\n    else:\n        print(3 * s + 3)", "from math import sqrt\n\ndef calc(n):\n    if n < 3:\n        return 2\n    guess = int(sqrt(n / 6))\n    lines = [guess, guess, guess]\n    summ = 3 * guess\n    triangles = 6 * guess * guess\n    i = 0\n    while True:\n        if triangles >= n:\n            return summ\n        lines[i] += 1\n        summ += 1\n        temp = summ - lines[i]\n        triangles += 2 * temp\n        i = (i + 1) % 3\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(calc(n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = int(math.sqrt(n // 6))\n    if 6 * i * i == n:\n        print(3 * i)\n    elif (i * i + 2 * i * (i + 1)) * 2 >= n:\n        print(3 * i + 1)\n    elif ((i + 1) * (i + 1) + i * (i + 1) * 2) * 2 >= n:\n        print(3 * i + 2)\n    else:\n        print(3 * i + 3)", "def check(mid, n):\n    x = mid // 3\n    y = x\n    z = x\n    if mid % 3 == 1:\n        z += 1\n    elif mid % 3 == 2:\n        z += 1\n        y += 1\n    if 2 * (x * y + x * z + y * z) >= n:\n        return True\n    return False\n\ndef lbp(n):\n    left = 1\n    right = int(n ** (1 / 3)) + 1\n    while right - left > 1:\n        mid = (right + left) // 2\n        if check(mid, n):\n            right = mid\n        else:\n            left = mid\n    if check(left, n):\n        return left\n    return right\n\ndef main():\n    n = int(input())\n    x = n / 6\n    x1 = x ** 0.5\n    x1 *= 3\n    x1 = int(x1)\n    while not check(x1, n):\n        x1 += 1\n    print(x1)\nfor i in range(int(input())):\n    main()"]