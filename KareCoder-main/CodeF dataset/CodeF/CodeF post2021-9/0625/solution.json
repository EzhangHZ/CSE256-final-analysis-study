["large_int = 10 ** 9 + 7\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef factors(n):\n    return set((factor for i in range(1, int(n ** 0.5) + 1) if n % i == 0 for factor in (i, n // i)))\n\ndef solution():\n    (b_start, b_step, b_n) = (int(i) for i in input().split())\n    (c_start, c_step, c_n) = (int(i) for i in input().split())\n    if c_step % b_step != 0 or (c_start - b_start) % b_step != 0 or c_start < b_start or (c_start + (c_n - 1) * c_step > b_start + (b_n - 1) * b_step):\n        print(0)\n        return\n    if c_start + c_n * c_step > b_start + (b_n - 1) * b_step or c_start - c_step < b_start:\n        print(-1)\n        return\n    count = 0\n    for i in factors(c_step):\n        if i < c_step // b_step or lcm(b_step, i) < c_step:\n            continue\n        count += c_step // i * (c_step // i)\n    print(count % large_int)\n    return\nt = int(input())\nfor i in range(t):\n    solution()", "from math import isqrt, gcd\nlcm = lambda a, b: a // gcd(a, b) * b\nM = 10 ** 9 + 7\n\ndef solve():\n    (b, q, y) = map(int, input().split())\n    (c, r, z) = map(int, input().split())\n    B = range(b, b + q * y, q)\n    C = range(c, c + r * z, r)\n    if r % q:\n        return print(0)\n    if c not in B:\n        return print(0)\n    if c + r * ~-z not in B:\n        return print(0)\n    if c - r not in B or c + r * z not in B:\n        print(-1)\n        return\n    tot = 0\n    test = []\n    for d in range(1, isqrt(r) + 1):\n        if r % d:\n            continue\n        test += (d,)\n        if d * d != r:\n            test += (r // d,)\n    for p in test:\n        if lcm(p, q) != r:\n            continue\n        tot += (r // p) ** 2\n    print(tot % M)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfrom functools import reduce\nfrom math import gcd\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor x in range(t):\n    line1 = input()\n    line2 = input()\n    b1 = int(line1.split(' ')[0])\n    binc = int(line1.split(' ')[1])\n    bam = int(line1.split(' ')[2])\n    c1 = int(line2.split(' ')[0])\n    cinc = int(line2.split(' ')[1])\n    cam = int(line2.split(' ')[2])\n    cam -= 1\n    bam -= 1\n    if c1 < b1 or c1 + cinc * cam > b1 + binc * bam:\n        print(0)\n        continue\n    cend = c1 + cinc * cam\n    if (cend - b1) % binc != 0:\n        print(0)\n        continue\n    if (c1 - b1) % binc != 0:\n        print(0)\n        continue\n    if cinc % binc != 0:\n        print(0)\n        continue\n    if c1 - cinc < b1 or cend + cinc > b1 + binc * bam:\n        print(-1)\n        continue\n    posainc = factors(cinc)\n    answer = 0\n    for factor in posainc:\n        if lcm(binc, factor) >= cinc:\n            answer += cinc // factor * (cinc // factor)\n            answer %= 1000000007\n    print(answer)", "import sys\nI = lambda : [*map(int, sys.stdin.readline().split())]\nimport math\nM = 10 ** 9 + 7\n(t,) = I()\nfor _ in range(t):\n    (b, q, y) = I()\n    (c, r, z) = I()\n    prevc = c - r\n    nextc = c + r * z\n    lastb = b + q * (y - 1)\n    if c < b or nextc - r > lastb or c % q != b % q or (r % q != 0):\n        print(0)\n    elif prevc < b or nextc > lastb:\n        print(-1)\n    else:\n        factors = []\n        for i in range(1, int(r ** 0.5) + 3):\n            if r % i == 0:\n                factors.append(i)\n                factors.append(r // i)\n        factors = list(set(factors))\n        tot = 0\n        for factor in factors:\n            if factor * q // math.gcd(factor, q) == r:\n                tot = (tot + (r // factor) ** 2) % M\n        print(tot)", "from math import gcd\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    co = 0\n    (b, q, y) = map(int, input().strip().split())\n    (c, r, z) = map(int, input().strip().split())\n    if r / q % 1 != 0:\n        co = 0\n    else:\n        p1 = (c - b) / q\n        p2 = (c + (z - 1) * r - b) / q\n        if p1 % 1 != 0 or p2 % 1 != 0:\n            co = 0\n        elif p1 > y - 1 or p1 < 0 or p2 > y - 1 or (p2 < 0):\n            co = 0\n        elif (c - r - b) / q > y - 1 or c - r - b < 0:\n            co = -1\n        elif (c + z * r - b) / q > y - 1 or c + z * r - b < 0:\n            co = -1\n        else:\n            l = []\n            for i in range(1, round(r ** 0.5) + 1):\n                if r % i == 0:\n                    if i * q // gcd(i, q) == r:\n                        l.append(i)\n                    if q * (r // i) // gcd(r // i, q) == r and i != r // i:\n                        l.append(r // i)\n            for i in l:\n                a = r // i\n                co += a ** 2\n            co %= 1000000007\n    print(co)"]