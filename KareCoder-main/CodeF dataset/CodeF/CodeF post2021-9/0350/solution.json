["from sys import stdin\ninput = stdin.readline\n\ndef func():\n    for i in range(m - 1, -1, -1):\n        if (i + 1) % 2 == 0:\n            books.sort(key=lambda x: x[1][i], reverse=True)\n        else:\n            books.sort(key=lambda x: x[1][i])\n    ans = []\n    for book in books:\n        ans.append(book[0])\n    print(*ans)\n(n, m) = map(int, input().split())\nbooks = []\nfor i in range(1, n + 1):\n    books.append((i, input()))\nfunc()", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nd = {}\nw = []\nfor i in range(n):\n    s = input()[:-1]\n    d[s] = i\n    w.append(s)\nfor i in range(m - 1, -1, -1):\n    if i % 2:\n        w.sort(key=lambda x: x[i], reverse=True)\n    else:\n        w.sort(key=lambda x: x[i])\nfor i in w:\n    print(d[i] + 1, end=' ')", "def solve():\n    (n, m) = map(int, input().split())\n    l = []\n    d = {}\n    for i in range(n):\n        l.append(input())\n        d[l[i]] = i\n    for i in range(m - 1, -1, -1):\n        if i % 2 == 0:\n            l.sort(key=lambda x: x[i])\n        else:\n            l.sort(reverse=True, key=lambda x: x[i])\n    for i in l:\n        print(d[i] + 1, end=' ')\nsolve()", "(n, m) = list(map(int, input().split()))\nbooks = []\nfor idx in range(n):\n    books.append((input(), idx + 1))\nfor i in range(m - 1, -1, -1):\n    if i % 2:\n        books.sort(key=lambda x: x[0][i], reverse=True)\n    else:\n        books.sort(key=lambda x: x[0][i], reverse=False)\nindexes = [i[1] for i in books]\nprint(*indexes)", "l0 = [chr(x) for x in range(65, 91)]\nl1 = reversed(l0)\ndic = dict(zip(l0, l1))\n(a, b) = map(int, input().split())\nl2 = []\nfor _ in range(a):\n    s = list(input())\n    for i in range(1, b, 2):\n        s[i] = dic[s[i]]\n    l2.append(''.join(s))\nl3 = sorted(range(a), key=lambda x: l2[x])\nprint(*[i + 1 for i in l3])", "(n, m) = (int(x) for x in input().split())\n(arr, d) = ([0] * n, {})\nfor i in range(n):\n    arr[i] = input()\n    d[arr[i]] = i + 1\nfor i in range(m - 1, -1, -1):\n    arr.sort(key=lambda x: x[i], reverse=i % 2 != 0)\nfor i in arr:\n    print(d[i], end=' ')", "(n, m) = (int(x) for x in input().split())\narr = [0] * n\nd = {}\nfor i in range(n):\n    arr[i] = input()\n    d[arr[i]] = i + 1\nfor i in range(m - 1, -1, -1):\n    arr.sort(key=lambda x: x[i], reverse=i % 2 != 0)\nfor i in arr:\n    print(d[i], end=' ')", "(n, m) = map(int, input().split())\nl = []\nd = {}\nfor i in range(n):\n    l += [input()]\n    d[l[i]] = i\nz = list(l)\nfor i in range(m - 1, -1, -1):\n    if i % 2 == 0:\n        l.sort(key=lambda x: x[i])\n    else:\n        l.sort(reverse=True, key=lambda x: x[i])\nfor i in l:\n    print(d[i] + 1, end=' ')", "def main():\n    lista = []\n    (line, lenght) = input().split()\n    line = int(line)\n    lenght = int(lenght)\n    dicio: dict = {}\n    for i in range(line):\n        text = input()\n        dicio[text] = i + 1\n        lista.append(text)\n    for i in range(lenght - 1, -1, -1):\n        if (i + 1) % 2 != 0:\n            lista.sort(key=lambda x: x[i])\n        else:\n            lista.sort(key=lambda x: x[i], reverse=True)\n    for word in lista:\n        print(dicio[word], end=' ')\nmain()", "(n, m) = (int(x) for x in input().split())\narr = [0] * n\nd = {}\nfor i in range(n):\n    arr[i] = input()\n    d[arr[i]] = i + 1\nfor i in range(m - 1, -1, -1):\n    arr.sort(key=lambda x: x[i], reverse=i % 2 != 0)\nfor i in arr:\n    print(d[i], end=' ')", "(n, m) = map(int, input().split())\nl = []\nd = {}\nfor i in range(n):\n    l += [input()]\n    d[l[i]] = i\nz = list(l)\nfor i in range(m - 1, -1, -1):\n    if i % 2 == 0:\n        l.sort(key=lambda x: x[i])\n    else:\n        l.sort(reverse=True, key=lambda x: x[i])\nfor i in l:\n    print(d[i] + 1, end=' ')", "l0 = [chr(x) for x in range(65, 91)]\nl1 = reversed(l0)\ndic = dict(zip(l0, l1))\n(a, b) = map(int, input().split())\nl2 = []\nfor _ in range(a):\n    s = list(input())\n    for i in range(1, b, 2):\n        s[i] = dic[s[i]]\n    l2.append(''.join(s))\nl3 = sorted(range(a), key=lambda x: l2[x])\nfor i in range(a):\n    l3[i] += 1\nprint(*l3)", "(n, m) = map(int, input().split())\ns = []\nfor i in range(n):\n    s.append([input(), i + 1])\nfor i in range(m - 1, -1, -1):\n    if i % 2:\n        s.sort(key=lambda x: -ord(x[0][i]))\n    else:\n        s.sort(key=lambda x: ord(x[0][i]))\nfor i in s:\n    print(i[1], end=' ')", "import math as M\n\ndef solve():\n    (n, m) = map(int, input().split())\n    l = []\n    d = {}\n    for i in range(n):\n        l.append(input())\n        d[l[i]] = i\n    for i in range(m - 1, -1, -1):\n        if i % 2 == 0:\n            l.sort(key=lambda x: x[i])\n        else:\n            l.sort(reverse=True, key=lambda x: x[i])\n    for i in l:\n        print(d[i] + 1, end=' ')\nsolve()", "def compare(a, b):\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        if i % 2 == 0:\n            if a[i] > b[i]:\n                return True\n            else:\n                return False\n        if a[i] < b[i]:\n            return True\n        else:\n            return False\n\ndef val(a):\n    ans = ''\n    for i in range(len(a)):\n        if i % 2 == 1:\n            ans += chr(ord('Z') - ord(a[i]) + ord('A'))\n        else:\n            ans += a[i]\n    return ans\n(n, m) = [int(x) for x in input().split()]\nlist = []\nfor i in range(n):\n    list.append(input())\ndiction = {}\nfor i in range(n):\n    diction[list[i]] = i + 1\nlist.sort(key=val)\nfor i in range(n):\n    print(diction[list[i]], end=' ')", "(n, m) = map(int, input().split())\nstrings = []\nfor i in range(n):\n    strings.append([input(), i + 1])\nfor i in range(m - 1, -1, -1):\n    if i & 1:\n        strings.sort(key=lambda x: -ord(x[0][i]))\n    else:\n        strings.sort(key=lambda x: ord(x[0][i]))\nfor i in strings:\n    print(i[1], end=' ')", "(n, m) = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    book = list(input())\n    book[1::2] = map(lambda x: chr(155 - ord(x)), book[1::2])\n    l.append(book)\nprint(*sorted(range(1, n + 1), key=lambda x: l[x - 1]))", "nm = list(map(int, input().split(' ')))\nstruct = []\nn = True\nfor idx in range(nm[0]):\n    struct.append([input(), str(idx + 1)])\nif nm[1] % 2 != 0:\n    n = False\nfor idx1 in range(nm[1] - 1, -1, -1):\n    struct.sort(key=lambda x: x[0][idx1], reverse=n)\n    n = not n\nfor i in range(nm[0]):\n    print(struct[i][1], end=' ')", "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    l.append([s, i + 1])\nfor i in range(m - 1, -1, -1):\n    if i % 2:\n        l.sort(key=lambda x: -ord(x[0][i]))\n    else:\n        l.sort(key=lambda x: ord(x[0][i]))\nfor i in l:\n    print(i[1], end=' ')", "from sys import stdin\nfrom heapq import heappush, heappop\n(n, m) = map(int, stdin.readline().split())\narr = []\nd = {}\nfor i in range(n):\n    l = input()\n    d[l] = i + 1\n    arr.append(list(l))\nfor i in range(m - 1, -1, -1):\n    if (i + 1) % 2 != 0:\n        arr.sort(key=lambda x: ord(x[i]))\n    else:\n        arr.sort(reverse=True, key=lambda x: ord(x[i]))\nans = []\nfor a in arr:\n    ans.append(d[''.join(a)])\nprint(*ans)", "(n, m) = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    book = list(input())\n    book[1::2] = map(lambda x: chr(155 - ord(x)), book[1::2])\n    l.append(book)\nprint(*sorted(range(1, n + 1), key=lambda x: l[x - 1]))", "(n, m) = map(int, input().split())\na = []\nfor k in range(n):\n    x = input()\n    y = ''\n    for i in range(m):\n        if i % 2 != 0:\n            y = y + chr(155 - ord(x[i]))\n        else:\n            y = y + x[i]\n    a.append((y, k + 1))\na.sort()\nfor j in range(n):\n    print(a[j][1], end=' ')", "(n, m) = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    book = list(input())\n    book[1::2] = map(lambda x: chr(155 - ord(x)), book[1::2])\n    l.append(book)\nprint(*sorted(range(1, n + 1), key=lambda x: l[x - 1]))", "(n, k) = map(int, input().split())\nlists = []\nfor _ in range(n):\n    lists.append(input())\n\ndef change(arr):\n    w = arr[0]\n    new = []\n    for i in range(1, len(w), 2):\n        for (index, word) in enumerate(arr):\n            x = chr(ord('Z') - (ord(word[i]) - ord('A')))\n            arr[index] = word[:i] + x + word[i + 1:]\norder = [i for i in range(1, n + 1)]\nchange(lists)\n(a, b) = zip(*sorted(zip(lists, order)))\nfor ele in b:\n    print(ele, end=' ')", "(n, m) = map(int, input().split())\na = [None] * n\nfor i in range(n):\n    s = input()\n    cur = 0\n    flag = 1\n    for j in range(m):\n        cur = cur * 26 + flag * ord(s[j])\n        flag = -flag\n    a[i] = [cur, i]\na.sort()\nprint(*[v[1] + 1 for v in a])", "(n, m) = map(int, input().split())\na = [None] * n\nfor i in range(n):\n    s = input()\n    ns = ''\n    cur = 0\n    flag = 1\n    for j in range(m):\n        if j % 2:\n            ns += chr(155 - ord(s[j]))\n        else:\n            ns += s[j]\n    a[i] = [ns, i]\nprint(*[v[1] + 1 for v in sorted(a)])", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(155 - ord(x[j])) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nstrings = []\nstr_idxs = {}\nsol = []\nfor i in range(n):\n    string = input()\n    s = [None] * m\n    for j in range(1, m, 2):\n        c = ord(string[j]) - ord('A')\n        s[j] = chr(ord('A') + (25 - c))\n    for (j, letter) in enumerate(s):\n        if letter == None:\n            s[j] = string[j]\n    aux = ''\n    new_s = aux.join(s)\n    str_idxs[new_s] = i + 1\n    sol.append(new_s)\nsol.sort()\nfor i in range(n):\n    print(str_idxs[sol[i]], end=' ')", "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(str(input()))\nnew_l = []\nfor i in range(len(l)):\n    new_s = ''\n    for j in range(len(l[i])):\n        if j % 2 != 0:\n            new_s += chr(90 - (ord(l[i][j]) - 65))\n        else:\n            new_s += l[i][j]\n    new_l.append((new_s, i + 1))\nnew_l.sort()\nx = []\nfor i in range(len(new_l)):\n    x.append(new_l[i][1])\nprint(*x)", "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(str(input()))\nnew_l = []\nfor i in range(len(l)):\n    new_s = ''\n    for j in range(len(l[i])):\n        if j % 2 != 0:\n            new_s += chr(90 - (ord(l[i][j]) - 65))\n        else:\n            new_s += l[i][j]\n    new_l.append((new_s, i + 1))\nnew_l.sort()\nx = []\nfor i in range(len(new_l)):\n    x.append(new_l[i][1])\nprint(*x)", "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(str(input()))\nnew_l = []\nfor i in range(len(l)):\n    new_s = ''\n    for j in range(len(l[i])):\n        if j % 2 != 0:\n            new_s += chr(90 - (ord(l[i][j]) - 65))\n        else:\n            new_s += l[i][j]\n    new_l.append((new_s, i + 1))\nnew_l.sort()\nx = []\nfor i in range(len(new_l)):\n    x.append(new_l[i][1])\nprint(*x)", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(155 - ord(x[j])) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "(n, m) = map(int, input().split())\nletters = [0] * n\nfor i in range(n):\n    a = input()\n    cur = 0\n    change = True\n    for j in range(m):\n        cur = cur * 26 + change * ord(a[j])\n        change *= -1\n    letters[i] = [cur, i]\nprint(*[sum([letter[1], 1]) for letter in sorted(letters)])", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(155 - ord(x[j])) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "(n, m) = map(int, input().split())\nprint(*[x[0] for x in sorted(map(lambda x: [x[0] + 1, [x[1][j] if j % 2 == 0 else chr(155 - ord(x[1][j])) for j in range(m)]], enumerate([input() for i in range(n)])), key=lambda x: x[1])])", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(155 - ord(x[j])) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "(n, m) = map(int, input().split())\ns = []\nfor i in range(1, n + 1):\n    x = input()\n    new = ''\n    for j in range(m):\n        if j % 2:\n            new += chr(155 - ord(x[j]))\n        else:\n            new += x[j]\n    s.append([new, i])\nprint(*[i[1] for i in sorted(s)])", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(155 - ord(x[j])) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nstrings = []\nstr_idxs = {}\nsol = []\nfor i in range(n):\n    string = input()\n    s = [None] * m\n    for j in range(1, m, 2):\n        c = ord(string[j]) - ord('A')\n        s[j] = chr(ord('A') + (25 - c))\n    for (j, letter) in enumerate(s):\n        if letter == None:\n            s[j] = string[j]\n    aux = ''\n    str_idxs[aux.join(s)] = i + 1\n    sol.append(aux.join(s))\nsol.sort()\nfor i in range(n):\n    print(str_idxs[sol[i]], end=' ')", "(n, m) = map(int, input().split())\nl = [(lambda x: [i + 1, [x[j] if j % 2 == 0 else chr(ord('Z') - ord(x[j]) + ord('A')) for j in range(m)]])(input()) for i in range(n)]\nprint(*[i[0] for i in sorted(l, key=lambda x: x[1])])", "from collections import defaultdict, Counter, deque\nfrom math import sqrt, log10, log, floor, factorial, gcd\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations\nimport sys, io, os\ninput = sys.stdin.readline\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef yn(a):\n    print('YES' if a else 'NO')\nceil = lambda a, b: (a + b - 1) // b\nt = 1\nfor i in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    l = []\n    for i in range(1, n + 1):\n        temp = input().strip()\n        l.append([ord(temp[i]) * (-1) ** (i % 2) for i in range(m)])\n        l[-1].append(i)\n    l.sort()\n    for i in range(n):\n        print(l[i][-1], end=' ')", "import math\nimport string\n\ndef main_function():\n    (n, m) = [int(i) for i in input().split(' ')]\n    alphabet = list(string.ascii_uppercase)\n    hash_function = {}\n    for i in range(len(alphabet)):\n        hash_function[alphabet[i]] = i\n    reverse_hash_function = {}\n    for i in hash_function:\n        reverse_hash_function[hash_function[i]] = i\n    data = []\n    for i in range(n):\n        data.append(list(input()))\n    for i in range(len(data)):\n        for j in range(len(data[i])):\n            if j % 2 == 1:\n                data[i][j] = reverse_hash_function[25 - hash_function[data[i][j]]]\n    for i in range(len(data)):\n        data[i] = tuple(data[i])\n    hash_position = {}\n    for i in range(len(data)):\n        hash_position[data[i]] = i + 1\n    data.sort(key=lambda x: [i for i in x])\n    for i in range(len(data)):\n        if i == len(data) - 1:\n            print(hash_position[data[i]])\n        else:\n            print(hash_position[data[i]], end=' ')\nmain_function()", "(n, m) = [int(i) for i in input().split()]\nl = []\nfor i in range(1, n + 1):\n    temp = input().strip()\n    w = []\n    for j in range(m):\n        z = temp[j]\n        if j % 2 == 0:\n            w.append(ord(z))\n        else:\n            w.append(ord(z) * -1)\n    w += [i]\n    l += [w]\nl.sort()\nfor i in range(n):\n    print(l[i][-1], end=' ')", "import math\nimport string\n\ndef korea(m):\n    return lambda x: x[m]\n\ndef convert_to_numbers(word, hash_function):\n    l = []\n    for i in range(len(word)):\n        if i % 2 == 0:\n            l.append(hash_function[word[i]])\n        else:\n            l.append(-hash_function[word[i]])\n    return tuple(l)\n\ndef main_function():\n    (n, m) = [int(i) for i in input().split(' ')]\n    alphabet = list(string.ascii_uppercase)\n    hash_function = {}\n    for i in range(len(alphabet)):\n        hash_function[alphabet[i]] = i\n    hash_function_for_position = {}\n    data = []\n    for i in range(n):\n        data.append(input())\n    data_tuple = []\n    for i in data:\n        data_tuple.append(convert_to_numbers(i, hash_function))\n    for i in range(len(data)):\n        hash_function_for_position[data[i]] = i + 1\n    data_tuple_sorted = sorted(data, key=lambda x: convert_to_numbers(x, hash_function))\n    for i in range(len(data_tuple_sorted)):\n        if i == len(data_tuple_sorted) - 1:\n            print(hash_function_for_position[data_tuple_sorted[i]])\n        else:\n            print(hash_function_for_position[data_tuple_sorted[i]], end=' ')\nmain_function()", "(n, m) = map(int, input().split())\na = []\nfor i in range(1, n + 1):\n    s = input()\n    ins = []\n    for j in range(0, m):\n        if j & 1:\n            ins.append(chr(ord('Z') - ord(s[j]) + ord('A')))\n        else:\n            ins.append(s[j])\n    a.append([str(ins), i])\na.sort()\nfor x in a:\n    print(x[1], end=' ')", "(n, m) = [int(i) for i in input().split()]\nl = []\nfor i in range(1, n + 1):\n    temp = input().strip()\n    w = []\n    for j in range(m):\n        z = temp[j]\n        if j % 2 == 0:\n            w.append(ord(z))\n        else:\n            w.append(ord(z) * -1)\n    w += [i]\n    l += [w]\nl.sort()\nfor i in range(n):\n    print(l[i][-1], end=' ')", "(n, m) = map(int, input().split())\nc = lambda x: chr(ord('Z') - ord(x) + ord('A'))\np = lambda x, ind: x if ind % 2 == 0 else c(x)\nfor_sort = lambda x: x[1]\nlam = lambda x, i: [i + 1, [p(x[j], j) for j in range(m)]]\nprint(*[i[0] for i in sorted([lam(input(), i) for i in range(n)], key=for_sort)])", "(n, m) = map(int, input().split())\nstrings = []\nfor i in range(n):\n    strings.append([input(), i + 1])\nfor s in strings:\n    for i in range(m):\n        if i & 1:\n            x = chr(25 - (ord(s[0][i]) - ord('A')) + ord('A'))\n            s[0] = s[0][:i] + x + s[0][i + 1:]\nstrings.sort()\nfor x in strings:\n    print(x[1], end=' ')", "class pairs:\n\n    def __init__(self, num, index):\n        self.num = num\n        self.index = index\n\ndef get_my_key(pair):\n    return pair.num\na = input().split()\narr_size = int(a[0])\nstr_size = int(a[1])\narr = []\nfor i in range(arr_size):\n    arr.append(input())\np_arr = []\nfor (ind, num) in enumerate(arr):\n    p_arr.append(pairs(num, ind + 1))\nfor i in range(arr_size):\n    for j in range(1, str_size, 2):\n        p_arr[i].num = p_arr[i].num[:j] + chr(25 - ord(p_arr[i].num[j]) + 2 * ord('A')) + p_arr[i].num[j + 1:]\np_arr.sort(key=get_my_key)\nfor i in range(arr_size):\n    print(p_arr[i].index, end=' ')", "(n, m) = list(map(int, input().split()))\narr = []\nfor i in range(n):\n    arr.append([list(input()), i + 1])\nalps = list(map(chr, range(65, 91)))\nd = {}\nfor a in range(len(alps)):\n    d[alps[a]] = alps[len(alps) - 1 - a]\nfor i in range(n):\n    for j in range(m):\n        if j % 2:\n            arr[i][0][j] = d[arr[i][0][j]]\narr.sort()\nfor i in range(n):\n    print(arr[i][1], end=' ')"]