["t = int(input())\nfor i in range(t):\n    digit = int(input())\n    sqrt3 = round(digit ** (1.0 / 3.0))\n    if sqrt3 ** 3 > digit:\n        sqrt3 -= 1\n    print(int(digit ** 0.5 // 1 + (sqrt3 - sqrt3 ** 0.5 // 1)))", "n = int(input())\nfor i in range(n):\n    a = int(input()) + 0.0001\n    sq = int(a ** 0.5)\n    cu = int(a ** (1 / 3))\n    s = int(a ** (1 / 6))\n    print(sq + cu - s)", "import math as mt\nt = int(input())\nfor i in range(t):\n    m = int(input())\n    x = mt.sqrt(m)\n    x = int(x)\n    y = m ** (1 / 3)\n    z = m ** (1 / 6)\n    z = int(z)\n    y = int(y)\n    if (y + 1) * (y + 1) * (y + 1) == m:\n        y += 1\n    if mt.pow(z + 1, 6) == m:\n        z += 1\n    ans = x + y - z\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    two = math.sqrt(n)\n    three = n ** (1.0 / 3)\n    six = n ** (1.0 / 6)\n    two = int(round(two, 9))\n    three = int(round(three, 9))\n    six = int(round(six, 9))\n    print(int(two + three - six))", "def getPow(data, a):\n    left = 0\n    right = data\n    while left <= right:\n        mid = (left + right) // 2\n        if mid ** a < data:\n            left = mid + 1\n        elif mid ** a == data:\n            return mid\n        else:\n            right = mid - 1\n    return left - 1\n\ndef tack():\n    data = int(input())\n    squ = getPow(data, 2)\n    cube = getPow(data, 3)\n    six = getPow(data, 6)\n    ans = squ + cube - six\n    print(ans)\n\ndef main():\n    n = int(input())\n    for x in range(n):\n        tack()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    print(int(n ** 0.5 + 10 ** (-10)) + int(n ** (1 / 3) + 10 ** (-10)) - int(n ** (1 / 6) + 10 ** (-10)))", "import math\nres = []\nct = 0\n\ndef int_cube_root(x):\n    if x >= 0:\n        sign = 1\n    else:\n        x = -x\n        sign = -1\n    (a, b) = (0, x)\n    while a <= b:\n        m = (a + b) // 2\n        m3 = m * m * m\n        if m3 == x:\n            return sign * m\n        elif m3 < x:\n            a = m + 1\n        else:\n            b = m - 1\n    return sign * b\nfor _ in range(int(input())):\n    n = int(input())\n    cbrt = int_cube_root(n)\n    srt = math.sqrt(n)\n    a = math.sqrt(cbrt)\n    ct = int(srt) + cbrt - int(a)\n    res.append(ct)\n    ct = 0\nfor i in range(len(res)):\n    print(res[i])", "n = int(input())\nfor i in range(n):\n    x = int(input()) + 0.5\n    print(int(x ** (1 / 2)) + int(x ** (1 / 3)) - int(x ** (1 / 6)))", "for i in range(int(input())):\n    n = int(input())\n    c = int(n ** (1 / 2))\n    d = int(round(n ** (1 / 3), 7))\n    e = int(round(n ** (1 / 3), 7) ** (1 / 2))\n    print(c + d - e)", "for _ in range(int(input())):\n    n = int(input()) + 0.5\n    print(int(n ** (1 / 2)) + int(n ** (1 / 3)) - int(n ** (1 / 6)))", "from math import isqrt\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    print(isqrt(n) + int(round(pow(n, 1 / 3), 12)) - int(round(pow(isqrt(n), 1 / 3), 12)))", "t = int(input())\nimport math\nwhile t != 0:\n    n = int(input())\n    sq = int(math.sqrt(n))\n    cub = int(math.pow(n, 1 / 3))\n    if (cub + 1) * (cub + 1) * (cub + 1) == n:\n        cub += 1\n    if cub == 0:\n        temp = 0\n    else:\n        temp = int(math.sqrt(cub))\n    c = cub\n    print(sq + cub - temp)\n    t -= 1", "import math\nt = int(input())\nmass = []\nfor i in range(t):\n    x = int(input())\n    kol_kv = int(math.sqrt(x))\n    kol_kub = int(x ** (1 / 3))\n    kol_sh = int(x ** (1 / 6))\n    if round(x ** (1 / 3)) ** 3 == x and round(x ** (1 / 3)) != int(x ** (1 / 3)):\n        kol_kub += 1\n    if round(x ** (1 / 6)) ** 6 == x and round(x ** (1 / 6)) != int(x ** (1 / 6)):\n        kol_sh += 1\n    if round(math.sqrt(x)) ** 2 == x and round(math.sqrt(x)) != int(math.sqrt(x)):\n        kol_kv += 1\n    print(kol_kub + kol_kv - kol_sh)", "def solve(n):\n    (sq, cub) = (1, 0)\n    (sl, sr) = (1, n)\n    while sl < sr:\n        m = (sl + sr + 1) // 2\n        if m * m <= n:\n            sl = m\n        else:\n            sr = m - 1\n    sq = sl\n    (sl, sr) = (1, n)\n    while sl < sr:\n        m = (sl + sr + 1) // 2\n        if m * m * m <= n:\n            sl = m\n        else:\n            sr = m - 1\n    sq += sl\n    (sl, sr) = (1, n)\n    while sl < sr:\n        m = (sl + sr + 1) // 2\n        if m ** 6 <= n:\n            sl = m\n        else:\n            sr = m - 1\n    sq -= sl\n    return sq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "def r(c):\n    cs = str(c).index('.')\n    ans = 0\n    if str(c)[cs:].count('9') >= 12:\n        ans += round(c)\n    else:\n        ans += int(c)\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    ans = r(n ** 0.5) + r(n ** (1 / 3.0)) - r(n ** (1 / 6.0))\n    print(ans)", "def f(n, k):\n    lev = 1\n    prav = n + 1\n    u = (lev + prav) // 2\n    while lev + 1 < prav:\n        if u ** k > n:\n            prav = u\n        else:\n            lev = u\n        u = (lev + prav) // 2\n    return lev\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(f(n, 2) + f(n, 3) - f(n, 6))", "import math\n\ndef solve(num):\n    square = int(math.pow(num, 1 / 2) + 1e-10)\n    cube = int(math.pow(num, 1 / 3) + 1e-10)\n    sixth = int(math.pow(num, 1 / 6) + 1e-10)\n    return square + cube - sixth\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(solve(n))", "from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\n\ndef log(n, m):\n    (res, val) = (0, 1)\n    while True:\n        if n == val:\n            return res\n        elif n > val:\n            return res - 1\n        res += 1\n        val *= m\n\ndef ceil(m, n):\n    val = m // n\n    if m % n != 0:\n        return val + 1\n    return val\n\ndef square(a, p, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        val = mid ** p\n        if a > val:\n            low = mid + 1\n        elif a == val:\n            return mid\n        else:\n            high = mid\n    if low ** p > a:\n        return low - 1\n    else:\n        return low\nfor _ in range(int(input())):\n    val = int(input())\n    power2 = square(val, 2, 1, 10 ** 5)\n    power3 = square(val, 3, 1, 10 ** 3 + 1)\n    power6 = square(val, 6, 1, 100)\n    print(power2 + power3 - power6)"]