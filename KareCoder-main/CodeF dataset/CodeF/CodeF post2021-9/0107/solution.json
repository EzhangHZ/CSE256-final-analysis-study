["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(input().split())\n    if n == 1:\n        print(arr[0])\n    else:\n        for i in range(n):\n            if arr[i] != str(i + 1):\n                break\n        ind = arr.index(str(i + 1))\n        ss = arr[i:ind + 1]\n        ss.reverse()\n        arr = arr[:i] + ss + arr[ind + 1:]\n        print(' '.join(arr))", "def solve():\n    n = int(input())\n    arr = list(input().split())\n    if n == 1:\n        print(arr[0])\n    else:\n        for i in range(n):\n            if arr[i] != str(i + 1):\n                break\n        ind = arr.index(str(i + 1))\n        ss = arr[i:ind + 1]\n        ss.reverse()\n        arr = arr[:i] + ss + arr[ind + 1:]\n        print(' '.join(arr))\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = input().split()\n    i = 0\n    virus_start = None\n    virus_end = None\n    for i in range(n):\n        if int(p[i]) != i + 1:\n            virus_start = i\n            virus_end = p.index(str(i + 1))\n            break\n    if virus_start is None:\n        print(' '.join(p))\n    else:\n        print(' '.join(p[:virus_start]), ' '.join(p[virus_end:virus_start:-1]), p[virus_start], ' '.join(p[virus_end + 1:]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = input().split()\n    i = 0\n    virus_start = None\n    virus_end = None\n    for i in range(n):\n        if int(p[i]) != i + 1:\n            virus_start = i\n            virus_end = p.index(str(i + 1))\n            break\n    if virus_start is None:\n        print(' '.join(p))\n    else:\n        print(' '.join(p[:virus_start]), ' '.join(p[virus_end:virus_start:-1]), p[virus_start], ' '.join(p[virus_end + 1:]))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    input = sys.stdin.readline()\n    myList = input.split()\n    left = 0\n    for i in range(n):\n        if int(myList[i]) == i + 1:\n            continue\n        else:\n            left = i\n            break\n    right = myList.index(str(left + 1))\n    newList = myList[left:right + 1]\n    newList.reverse()\n    myList[left:right + 1] = newList\n    print(' '.join(myList))", "t = int(input())\nwhile t:\n    x = 0\n    b = int(input())\n    l = input().split(' ')\n    for i in range(1, b + 1):\n        if l[i - 1] != str(i):\n            j = l.index(str(i))\n            k = l[i - 1:j + 1]\n            k.reverse()\n            k = l[0:i - 1] + k + l[j + 1:b]\n            x = 1\n            break\n    if x == 1:\n        print(' '.join(k))\n    else:\n        print(' '.join(l))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = input().split()\n    i = 0\n    virus_start = None\n    virus_end = None\n    for i in range(n):\n        if int(p[i]) != i + 1:\n            virus_start = i\n            virus_end = p.index(str(i + 1))\n            break\n    if virus_start is None:\n        print(' '.join(p))\n    else:\n        print(' '.join(p[:virus_start]), ' '.join(p[virus_start:virus_end + 1][::-1]), ' '.join(p[virus_end + 1:]))", "for _ in range(int(input())):\n    n = int(input())\n    p = [x for x in input().split()]\n    for i in range(n):\n        if p[i] != str(i + 1):\n            r = p.index(str(i + 1)) + 1\n            s = p[:i] + list(reversed(p[i:r])) + p[r:]\n            print(' '.join(s))\n            break\n    else:\n        print(' '.join(p))", "def rev(m):\n    for i in range(len(m)):\n        if m[i] != i + 1:\n            a = m.index(i + 1)\n            return str(m[:i] + tuple(reversed(m[i:a + 1])) + m[a + 1:]).replace(',', ' ')[1:-1]\n            break\n    return str(m).replace(',', ' ')[1:-1]\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    m = tuple(map(int, input().split()))\n    print(rev(m))", "for _ in range(int(input())):\n    n = int(input())\n    perm = list(input().split())\n    if n == 1:\n        print('1')\n    else:\n        for x in range(1, n + 1):\n            if str(x) != perm[x - 1]:\n                break\n        missind = perm.index(str(x))\n        rev = perm[x - 1:missind + 1][::-1]\n        final = perm[:x - 1] + rev + perm[missind + 1:]\n        print(' '.join(final))", "y = int(input())\nfor _ in range(y):\n    n = int(input())\n    perm = list(input().split())\n    if n == 1:\n        print('1')\n    else:\n        for x in range(1, n + 1):\n            if str(x) != perm[x - 1]:\n                break\n        missind = perm.index(str(x))\n        rev = perm[x - 1:missind + 1][::-1]\n        final = perm[:x - 1] + rev + perm[missind + 1:]\n        print(' '.join(final))", "t = int(input())\n\ndef swap(P, l, r):\n    for i in range(l, int((l + r) / 2) + 1):\n        t = r - i + l\n        (P[i], P[t]) = (P[t], P[i])\nfor _ in range(t):\n    n = int(input())\n    P = input().split()\n    for i in range(n):\n        s = str(i + 1)\n        if P[i] != s:\n            r = P.index(s)\n            swap(P, i, r)\n            break\n    print(' '.join(P))", "for i in range(int(input())):\n    n = int(input())\n    c = 0\n    a = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if i != a[i - 1]:\n            k = a.index(i)\n            c = 1\n            f = i - 1\n            break\n    if c == 1:\n        if f == 0:\n            t = a[k::-1]\n        else:\n            t = a[k:f - 1:-1]\n        a = a[:f] + t + a[k + 1:]\n        print(' '.join(list(map(str, a))))\n    else:\n        print(' '.join(list(map(str, a))))", "def get_first_mistake_index(n, perm):\n    for k in range(len(perm)):\n        if perm[k] != k + 1:\n            return k\n    return -1\n\ndef correct(n, perm, first_mistake):\n    left = first_mistake\n    right = perm.index(first_mistake + 1)\n    return perm[:left] + perm[left:right + 1][::-1] + perm[right + 1:]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    perm = [int(component) for component in input().split(' ')]\n    first_mistake = get_first_mistake_index(n, perm)\n    if first_mistake == -1:\n        print(' '.join(map(str, perm)))\n    else:\n        print(' '.join(map(str, correct(n, perm, first_mistake))))", "t = int(input())\nfor q in range(t):\n    g = 1\n    a = int(input())\n    b = input().split()\n    y = len(b)\n    for i in range(len(b)):\n        if str(g) != b[i]:\n            break\n        g = g + 1\n    f = a\n    if f == g or g > f:\n        u = ' '.join(b)\n        print(u)\n        continue\n    q = b.index(str(g))\n    o = b[:g - 1] + b[g - 1:q + 1][::-1] + b[q + 1:]\n    o1 = ' '.join(o)\n    print(o1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(str, input().split()))\n    allnums = []\n    visited = []\n    for i in range(n):\n        if p[i] != str(i + 1):\n            break\n    a = p.index(str(i + 1))\n    newp = p.copy()\n    newp[i:a + 1] = p[i:a + 1][::-1]\n    print(' '.join(newp))", "def reverse(arr, l, r):\n    f_part = arr[:l]\n    s_part = arr[l:r + 1][::-1]\n    t_part = arr[r + 1:]\n    arr_fin = f_part + s_part + t_part\n    return arr_fin\n\ndef main():\n    lng = int(input())\n    arr = input().split()\n    arr = list(map(int, arr))\n    l = 0\n    for i in range(lng):\n        if arr[i] - 1 != i:\n            l = i\n            break\n    r = arr.index(l + 1)\n    ans = reverse(arr, l, r)\n    if lng > 1:\n        ans = ' '.join(map(str, ans))\n    else:\n        ans = ans[0]\n    return ans\nfor i in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            ind = arr.index(i + 1)\n            x = arr[i:ind + 1]\n            x.reverse()\n            arr[i:ind + 1] = x\n            break\n    print(' '.join(map(str, arr)))", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if i == p[i - 1]:\n            continue\n        x = p.index(i, i - 1)\n        p[i - 1:x + 1] = p[i - 1:x + 1][::-1]\n        break\n    print(' '.join(map(str, p)))", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if i == p[i - 1]:\n            continue\n        x = p.index(i, i - 1)\n        p[i - 1:x + 1] = p[i - 1:x + 1][::-1]\n        break\n    print(' '.join(map(str, p)))", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    i = 0\n    while i < n and p[i] == i + 1:\n        i += 1\n    if i == n:\n        pass\n    else:\n        t = p.index(min(p[i:]))\n        p = p[:i] + p[-n + t:-n + i - 1:-1] + p[t + 1:]\n    print(' '.join(map(str, p)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    permutation = list(map(int, input().split(' ')))\n    for index in range(len(permutation)):\n        if permutation[index] == index + 1:\n            pass\n        elif index > 0:\n            permutation = permutation[:index] + permutation[permutation.index(index + 1):index - 1:-1] + permutation[permutation.index(index + 1) + 1:]\n            break\n        else:\n            permutation = permutation[:index] + permutation[permutation.index(index + 1)::-1] + permutation[permutation.index(index + 1) + 1:]\n            break\n    print(' '.join((str(k) for k in permutation)))", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    i = 0\n    while i < n and p[i] == i + 1:\n        i += 1\n    if i == n:\n        pass\n    else:\n        t = p.index(min(p[i:]))\n        p = p[:i] + p[-n + t:-n + i - 1:-1] + p[t + 1:]\n    print(' '.join(map(str, p)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    num = list(input().split())\n    start = n - 1\n    end = n\n    for j in range(n):\n        if str(j + 1) != num[j]:\n            start = j\n            break\n    for j in range(start, n):\n        if num[j] == str(start + 1):\n            end = j\n    num[start:end + 1] = reversed(num[start:end + 1])\n    print(' '.join(num))", "def solve(seq, length):\n    need_permut = False\n    i = 0\n    for i in range(length):\n        if seq[i] != i + 1:\n            need_permut = True\n            break\n    if need_permut:\n        target = seq.index(i + 1)\n        seq = seq[:i] + seq[i:target + 1][::-1] + seq[target + 1:]\n    return seq\nn_case = int(input())\nfor _ in range(n_case):\n    length = int(input())\n    seq = list(map(int, input().split()))\n    ans = solve(seq, length)\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    p = [i for i in input().split()]\n    i = 0\n    while i < n and p[i] == str(i + 1):\n        i += 1\n    t = n\n    for j in range(i + 1, n):\n        if p[j] == str(i + 1):\n            t = j\n            break\n    if p[:i]:\n        print(' '.join(p[:i]), end=' ')\n    if p[i:t + 1]:\n        print(' '.join(p[i:t + 1][::-1]), end=' ')\n    print(' '.join(p[t + 1:]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    perm = list(map(int, input().split()))\n    l = -1\n    for j in range(n):\n        if l == -1 and perm[j] != j + 1:\n            l = j\n    if l != -1:\n        k = perm.index(l + 1)\n        perm[l:k + 1] = perm[l:k + 1][::-1]\n    print(' '.join((str(e) for e in perm)))", "import math\n\ndef solve(a, n):\n    (l, r) = (0, 0)\n    for i in range(n):\n        if a[i] != i + 1:\n            l = i\n            break\n    for i in range(n):\n        if a[i] == l + 1:\n            r = i\n            break\n    for i in range(math.ceil((r - l) / 2)):\n        (a[l + i], a[r - i]) = (a[r - i], a[l + i])\n    print(' '.join(map(str, a)))\n    return\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(a, n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sorted(l)\n    start = -10\n    for i in range(n):\n        if l[i] != s[i]:\n            end = i\n            for j in range(i + 1, n):\n                if l[j] == s[end]:\n                    start = j\n                    break\n            break\n    if start != -10:\n        ans = l[:end] + l[end:start + 1][::-1] + l[start + 1:]\n    else:\n        ans = l\n    print(' '.join(map(str, ans)))", "def solve(a):\n    i = 0\n    while i < len(a) and a[i] == i + 1:\n        i += 1\n    if i != len(a):\n        idx = a.index(i + 1)\n        a = a[0:i] + a[i:idx + 1][::-1] + a[idx + 1:]\n    return ' '.join(map(str, a))\nout = []\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    out.append(solve(a))\nprint('\\n'.join(out))", "def solve():\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    for i in range(n):\n        if p[i] == i + 1:\n            continue\n        else:\n            for j in range(i + 1, n):\n                if p[j] == i + 1:\n                    break\n            break\n    if i == n - 1:\n        return p\n    return p[:i] + p[i:j + 1][::-1] + p[j + 1:]\nt = int(input())\nfor i in range(t):\n    l = solve()\n    print(' '.join([str(i) for i in l]))", "n = int(input())\nfor x in range(n):\n    l = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    imposter = 0\n    for x in range(l):\n        if arr[x] != x + 1:\n            imposter = x + 1\n            flag = True\n            break\n    if flag:\n        index = 0\n        for x in range(imposter - 1, l):\n            if arr[x] == imposter:\n                index = x\n                break\n        imposter -= 1\n        str1 = ' '.join(list(map(str, arr[:imposter])))\n        if imposter - 1 >= 0:\n            str2 = ' '.join(list(map(str, arr[index:imposter - 1:-1])))\n        else:\n            str2 = ' '.join(list(map(str, arr[index::-1])))\n        str3 = ' '.join(list(map(str, arr[index + 1:])))\n        print((str1 + ' ' + str2 + ' ' + str3).strip())\n    else:\n        print(' '.join(list(map(str, arr))))", "n = int(input())\nnew = []\nans = []\nfor i in range(n):\n    new = []\n    length = int(input())\n    array = list(map(int, input().split()))\n    count = 0\n    for j in range(length):\n        if array[j] == j + 1:\n            continue\n        num = array.index(j + 1)\n        new = array[:j] + array[j:num + 1][::-1] + array[num + 1:]\n        break\n    if new == []:\n        ans.append(array)\n    else:\n        ans.append(new)\nfor item in ans:\n    print(' '.join(list(map(str, item))))", "def Alert(a):\n    result = []\n    l = 0\n    r = 0\n    for _ in a:\n        if a[l] == l + 1:\n            l = l + 1\n        else:\n            break\n    for _ in a:\n        if a[r] != l + 1:\n            r = r + 1\n        else:\n            break\n    result = a[:l]\n    result = result + a[l:r + 1][::-1]\n    result = result + a[r + 1:]\n    return result\n\ndef asd():\n    a = input().split(' ')\n    b = [int(e) for e in a]\n    return b\n\ndef ACDC():\n    n = asd()[0]\n    for _ in range(n):\n        d = asd()[0]\n        t = Alert(asd())\n        b = ' '.join([str(e) for e in t])\n        print(b)\nACDC()", "def rotate(values):\n    left_value = 1\n    while left_value < len(values):\n        if left_value != values[left_value - 1]:\n            break\n        left_value += 1\n    if left_value == len(values):\n        return values\n    right = values.index(left_value)\n    left = left_value - 1\n    while left < right:\n        (values[left], values[right]) = (values[right], values[left])\n        left += 1\n        right -= 1\n    return values\n\ndef print_values(values):\n    print(' '.join(map(str, values)))\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    values = list(map(int, input().strip().split()))\n    print_values(rotate(values))", "def run(arr, n):\n    for i in range(n):\n        if arr[i] == i + 1:\n            continue\n        mi = -1\n        for index in range(n):\n            if arr[index] == i + 1:\n                mi = index\n                break\n        a = min(i, mi)\n        b = max(i, mi)\n        arr[a:b + 1] = reversed(arr[a:b + 1])\n        return arr\n    return arr\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    res = run(arr, n)\n    print(' '.join((str(i) for i in res)))", "t = int(input())\nfor _ in range(t):\n    found = False\n    n = int(input())\n    data = list(map(int, input().split()))\n    exp = sorted(data)\n    for i in range(n):\n        if data[i] != exp[i]:\n            j = data.index(exp[i])\n            found = True\n            break\n    if found:\n        data1 = data[:i] + data[i:j + 1][::-1] + data[j + 1:]\n    else:\n        data1 = data\n    out = list(map(str, data1))\n    print(' '.join(out))", "for i in range(int(input())):\n    input()\n    nums = list(map(int, input().split()))\n    c_n = list(sorted(nums))\n    nums = list(map(str, nums))\n    broken = False\n    for p in range(len(c_n)):\n        if str(c_n[p]) != nums[p]:\n            x = nums.index(str(c_n[p]))\n            print(' '.join(nums[:p] + list(reversed(nums[p:x + 1])) + nums[x + 1:]), end='\\n')\n            broken = True\n            break\n    if not broken:\n        print(' '.join(nums), end='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    permutation = list(map(int, input().split()))\n    assert len(permutation) == n\n    i = 1\n    while i < len(permutation):\n        if permutation[i - 1] != i:\n            break\n        i += 1\n    l = i - 1\n    minp = permutation[l]\n    minp_index = l\n    while i < len(permutation):\n        if permutation[i] < minp:\n            minp = permutation[i]\n            minp_index = i\n        i += 1\n    permutation[l:minp_index + 1] = reversed(permutation[l:minp_index + 1])\n    print(' '.join(map(str, permutation)))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ret = []\n    x = -1\n    for i in range(len(a)):\n        if a[i] != i + 1:\n            x = i\n            break\n        ret.append(i + 1)\n    if x != -1:\n        for i in range(x, len(a)):\n            if a[i] == x + 1:\n                y = i\n                break\n        for i in range(y, x - 1, -1):\n            ret.append(a[i])\n        for i in range(y + 1, len(a)):\n            ret.append(a[i])\n    print(' '.join(map(str, ret)))", "def read_nums():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    (n,) = read_nums()\n    nums = read_nums()\n    i = 0\n    while i < len(nums) and nums[i] == i + 1:\n        i += 1\n    if i < len(nums):\n        index = nums.index(i + 1)\n        nums[i:index + 1] = nums[i:index + 1][::-1]\n    print(' '.join(map(str, nums)))\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        solve()\nmain()", "import sys\nfrom typing import List\n\ndef sol(perm: List[int]) -> List[int]:\n    for idx in range(len(perm)):\n        if idx + 1 != perm[idx]:\n            break\n    first_off = idx + 1\n    for idx in range(idx + 1, len(perm)):\n        if perm[idx] == first_off:\n            break\n    first_off_actual_pos = idx\n    s = perm[:first_off - 1] + perm[first_off - 1:first_off_actual_pos + 1][::-1] + perm[first_off_actual_pos + 1:]\n    return s\n\ndef main():\n    inp = sys.stdin.readlines()\n    rest = inp[1:]\n    permutations = rest[1::2]\n    permutations = [[int(num) for num in line.split()] for line in permutations]\n    for perm in permutations:\n        s = sol(perm)\n        print(' '.join((str(a) for a in s)))\nmain()", "def find(arr):\n    left = -1\n    right = -1\n    for i in range(len(arr)):\n        if left != -1:\n            break\n        if arr[i] != i + 1:\n            left = i\n            for j in range(i + 1, len(arr)):\n                if arr[j] == i + 1:\n                    right = j\n                    break\n    if left == -1:\n        return arr\n    two = arr[left:right + 1]\n    two.reverse()\n    if left == 0:\n        if right == len(arr) - 1:\n            return two\n        else:\n            return two + arr[right + 1:]\n    elif right == len(arr) - 1:\n        return arr[:left] + two\n    else:\n        return arr[:left] + two + arr[right + 1:]\nnum = int(input())\nfor i in range(num):\n    n = input()\n    arr = [int(x) for x in input().split()]\n    a = find(arr)\n    print(' '.join([str(x) for x in a]))", "def main():\n    n = int(input())\n    for _ in range(n):\n        t = int(input())\n        nums = [int(s) for s in input().split()]\n        i = 0\n        while i < t and nums[i] == i + 1:\n            i += 1\n        if i == t:\n            print(' '.join([str(num) for num in nums]))\n        else:\n            left = i\n            while i < t and nums[i] != left + 1:\n                i += 1\n            right = i\n            nums[:] = nums[:left] + nums[left:right + 1][::-1] + nums[right + 1:]\n            print(' '.join([str(num) for num in nums]))\nmain()", "numberOfTestCases = int(input())\nfor caseNumber in range(numberOfTestCases):\n    lengthOfPermutation = int(input())\n    permutationString = input()\n    permutationList = [int(x) for x in permutationString.split(' ')]\n    ticker = 1\n    for x in permutationList:\n        if ticker < x:\n            break\n        ticker += 1\n    ind = ticker\n    for i in range(ticker, lengthOfPermutation):\n        if permutationList[i] == ticker:\n            ind = i\n    new = permutationList[0:ticker - 1] + permutationList[ind:ticker - 1:-1] + permutationList[ticker - 1:ticker] + permutationList[ind + 1:lengthOfPermutation]\n    newStr = [str(x) for x in new]\n    print(' '.join(newStr))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split(' ')]\n    ll = -1\n    rr = -1\n    for j in range(n):\n        if p[j] == j + 1:\n            continue\n        if ll > -1:\n            if p[j] == ll:\n                rr = j\n                break\n            continue\n        ll = j + 1\n    if rr > -1:\n        res = p[:ll - 1]\n        res = res + [p[x] for x in range(rr, ll - 2, -1)]\n        res += p[rr + 1:]\n    else:\n        res = p\n    print(' '.join([str(x) for x in res]))", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlsit():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l):\n    l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef solve():\n    n = int(input())\n    p = intlist()\n    ind = 0\n    if n == 1:\n        return p[0]\n    i = -1\n    for j in range(n - 1):\n        if p[j + 1] < p[j]:\n            i = j\n            break\n    if i != -1:\n        m = min(p[i + 1:])\n        ma = i\n        for j in range(i + 1):\n            if p[j] > m:\n                i = j\n                break\n        ind = p.index(m)\n        p = p[:i] + p[ind:i:-1] + [p[i]] + p[ind + 1:]\n    return printjoin(p)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    for i in range(len(l)):\n        if l[i] != i + 1:\n            r = l.index(i + 1)\n            temp = l[i:r + 1]\n            temp.reverse()\n            l = l[:i] + temp + l[r + 1:]\n            break\n    print(' '.join([str(x) for x in l]))", "tests = int(input())\nfor i in range(tests):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    cnt = 0\n    l = r = 0\n    while cnt < len(arr):\n        if arr[cnt] == cnt + 1:\n            cnt += 1\n        else:\n            l = cnt\n            break\n    min1 = n + 1\n    for i in range(l, len(arr)):\n        if arr[i] < min1:\n            min1 = arr[i]\n            r = i\n    while l < r:\n        (arr[l], arr[r]) = (arr[r], arr[l])\n        l += 1\n        r -= 1\n    for i in range(len(arr)):\n        arr[i] = str(arr[i])\n    print(' '.join(arr))", "from re import L\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    reverse_idx = -1\n    for i in range(N):\n        if arr[i] != i + 1 and reverse_idx == -1:\n            reverse_idx = i\n        elif arr[i] == reverse_idx + 1:\n            (left, right) = (reverse_idx, i)\n            while left < right:\n                (arr[left], arr[right]) = (arr[right], arr[left])\n                left += 1\n                right -= 1\n            break\n    print(' '.join(list(map(str, arr))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    c = 0\n    for j in range(n):\n        if arr[j] != j + 1:\n            idx = arr.index(j + 1)\n            sub = arr[j:idx + 1]\n            sub.reverse()\n            new_arr = []\n            new_arr = arr[:j] + sub + arr[idx + 1:len(arr)]\n            new_arr = ' '.join([str(x) for x in new_arr])\n            print(new_arr)\n            c = 1\n            break\n    if c == 0:\n        new_arr = ' '.join([str(x) for x in arr])\n        print(new_arr)", "t = int(input())\n\ndef q(l, n):\n    l1 = []\n    i = 0\n    found = False\n    while i < n and (not found):\n        if l[i] == i + 1:\n            l1.append(i + 1)\n            i += 1\n        elif l[i] > i + 1:\n            index = l.index(i + 1)\n            for j in range(index, i - 1, -1):\n                l1.append(l[j])\n            for k in range(index + 1, n):\n                l1.append(l[k])\n            i = n\n            return l1\n    return l1\n\ndef h(l):\n    l2 = list(map(str, l))\n    return ' '.join(l2)\nfor i in range(t):\n    n = int(input())\n    j = input().split()\n    l = list(map(int, j))\n    print(h(q(l, n)))", "def least_permutation(A, n):\n    l = 0\n    r = None\n    for i in range(n - 1):\n        if A[i + 1] < A[i]:\n            if r == None:\n                r = i + 1\n            elif A[i + 1] < A[r]:\n                r = i + 1\n    if r != None:\n        for i in range(n):\n            if A[i] > A[r]:\n                l = i\n                break\n        while l < r:\n            A[l] = A[l] + A[r]\n            A[r] = A[l] - A[r]\n            A[l] = A[l] - A[r]\n            l += 1\n            r -= 1\n    return A\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    permutation = list((int(i) for i in input().strip().split()))\n    ans = least_permutation(permutation, n)\n    print(' '.join(map(str, ans)))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 2\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    n = int(t[0])\n    A = list(map(int, t[1].split()))\n    Ak = [i for i in range(n)]\n    Aks = [i for i in sorted(range(n), key=lambda k: A[k])]\n    (r, l) = (-1, -1)\n    f = False\n    for i in range(n):\n        if Ak[i] != Aks[i]:\n            r = Aks[i]\n            l = i\n            f = True\n            break\n    if f is True:\n        A[l:r + 1] = reversed(A[l:r + 1])\n    print(' '.join(map(str, A)))", "nbTest = int(input())\n\ndef reverse(str, i, j):\n    tmp = str[0:i]\n    tmp2 = str[j + 1:len(str)]\n    tmp3 = str[i:j + 1][::-1]\n    return tmp + tmp3 + tmp2\nfor ahah in range(nbTest):\n    nbElem = int(input())\n    elems = [int(i) for i in input().split()]\n    for i in range(nbElem):\n        if i + 1 != elems[i]:\n            index = elems.index(i + 1)\n            elems = reverse(elems, i, index)\n            break\n    for i in range(nbElem):\n        elems[i] = str(elems[i])\n    print(' '.join(elems))", "from audioop import reverse\nans = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (srch, start, last) = (-1, -1, -1)\n    for i in range(len(arr)):\n        if i + 1 != arr[i]:\n            srch = i + 1\n            start = i\n            break\n    if srch == -1:\n        ans.append(' '.join((str(x) for x in arr)))\n    else:\n        for i in range(len(arr)):\n            if arr[i] == srch:\n                last = i\n                break\n        arr_copy = arr[start:last + 1]\n        arr_copy.reverse()\n        arr[start:last + 1] = arr_copy\n        ans.append(' '.join((str(x) for x in arr)))\nfor x in ans:\n    print(x)", "def lis_str(lis):\n    string = ''\n    for x in lis:\n        string += x + ' '\n    return string[:-1]\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    lis_input = input().split()\n    l = -1\n    r = -1\n    for (i, x) in enumerate(lis_input):\n        if i + 1 < int(x):\n            l = i\n            break\n    if l != -1:\n        for i in range(l, n):\n            if int(lis_input[i]) == l + 1:\n                r = i\n    if l != -1 and r != -1:\n        part_1 = lis_input[:l]\n        part_2 = lis_input[l:r + 1]\n        part_3 = lis_input[r + 1:]\n        lis_fin = part_1 + part_2[::-1] + part_3\n        print(lis_str(lis_fin))\n    else:\n        print(lis_str(lis_input))", "from typing import List\n\ndef get_minimum_permutation(arr: List) -> List:\n    arr_length = len(arr)\n    if arr_length < 2:\n        return arr\n    x = arr.copy()\n    x.sort()\n    swap_index = [-1, -1]\n    for i in range(arr_length):\n        if arr[i] != x[i]:\n            swap_index[0] = i\n            break\n    if swap_index[0] == -1:\n        return arr\n    need_to_replace = min(arr[i:])\n    for j in range(arr_length - 1, i - 1, -1):\n        if arr[j] == need_to_replace:\n            swap_index[1] = j\n            break\n    if swap_index[0] == swap_index[1]:\n        return arr\n    (i, j) = (swap_index[0], swap_index[1])\n    while i < j:\n        temp = arr[j]\n        arr[j] = arr[i]\n        arr[i] = temp\n        i += 1\n        j -= 1\n    return arr\nn = int(input().strip())\nneed_to_process_lists = []\nfor input_list in range(n):\n    input()\n    elements = [int(x) for x in input().strip().split(' ')]\n    need_to_process_lists.append(elements)\nfor process_list in need_to_process_lists:\n    did_processed_list = get_minimum_permutation(process_list)\n    print(' '.join((str(key) for key in did_processed_list)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ix = -1\n    num = 0\n    for i in range(1, n + 1):\n        if i != l[i - 1]:\n            ix = i - 1\n            num = i\n            break\n    if ix == -1:\n        print(' '.join([str(x) for x in l]))\n        continue\n    ni = l.index(num)\n    beg = l[:max(ix, 0)]\n    ll = l[ix:ni + 1]\n    ll.reverse()\n    print(' '.join([str(x) for x in beg + ll]), end=' ')\n    for i in range(ni + 1, n):\n        print(l[i], end=' ')\n    print()", "for z in range(int(input())):\n    input()\n    nos = list(map(int, input().split()))\n    c_n = list(sorted(nos))\n    nos = list(map(str, nos))\n    broken = False\n    for z in range(len(c_n)):\n        if str(c_n[z]) != nos[z]:\n            x = nos.index(str(c_n[z]))\n            print(' '.join(nos[:z] + list(reversed(nos[z:x + 1])) + nos[x + 1:]), end='\\n')\n            broken = True\n            break\n    if not broken:\n        print(' '.join(nos), end='\\n')", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    num = list(map(int, input().split()))\n    new_num = sorted(num)\n    start = 0\n    end = 0\n    for y in range(len(num)):\n        if num[y] != new_num[y]:\n            start = y\n            break\n    for x in range(len(num)):\n        if num[x] == new_num[start]:\n            end = x\n            break\n    num[start:end + 1] = reversed(num[start:end + 1])\n    print(' '.join([str(w) for w in num]))", "num_cases = int(input())\nfor _ in range(num_cases):\n    perm_len = int(input())\n    arr = [int(each) for each in input().split(' ')]\n    is_sorted = True\n    for (a, b, i) in zip(arr, sorted(arr), range(perm_len)):\n        if a == b:\n            continue\n        is_sorted = False\n        a = a\n        b = b\n        i = i\n        break\n    if is_sorted:\n        print(' '.join([str(each) for each in arr]))\n        continue\n    indices = []\n    for (each, idx) in zip(arr, range(perm_len)):\n        if each == b:\n            indices.append((idx, idx))\n    stack1 = indices\n    stack2 = []\n    while True:\n        if len(stack1) == 0:\n            break\n        min_val = arr[stack1[0][0]]\n        if len(stack1) == 1:\n            (left, right) = stack1[0]\n            inner = arr[i:right + 1]\n            inner = list(reversed(inner))\n            new_list = arr[0:i] + inner + arr[right + 1:]\n            print(' '.join([str(each) for each in new_list]))\n            break\n        for (each, right) in stack1:\n            if each == i:\n                inner = arr[i:right + 1]\n                inner = list(reversed(inner))\n                new_list = arr[0:i] + inner + arr[right + 1:]\n                print(' '.join([str(z) for z in new_list]))\n                break\n            val = arr[each]\n            if val < min_val:\n                stack2 = []\n                stack2.append((each - 1, right))\n                min_val = val\n            elif val == min_val:\n                stack2.append((each - 1, right))\n        stack1 = stack2\n        stack2 = []", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    m = [None] * n\n    m[-1] = a[-1]\n    for i in range(n - 2, -1, -1):\n        m[i] = min(m[i + 1], a[i])\n    r = a\n    for i in range(n):\n        if a[i] != m[i]:\n            for j in range(i, n):\n                if a[j] == m[i]:\n                    b = a[:i] + a[j:i - 1 if i > 0 else None:-1] + a[j + 1:]\n                    r = min(r, b)\n            break\n    print(' '.join(map(str, r)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "t = int(input())\n\ndef search(k, p):\n    for (l, x) in enumerate(p):\n        if p[l] == k:\n            return l\nfor i in range(t):\n    n = int(input())\n    p = input()\n    p = p.split(' ')\n    p = [int(x) for x in p]\n    r = 0\n    l = 0\n    for (k, x) in enumerate(p):\n        if p[k] != k + 1:\n            l = search(k + 1, p)\n            r = k\n            break\n    section = p[r:l + 1]\n    section.reverse()\n    p[r:l + 1] = section\n    print(' '.join((str(x) for x in p)))", "T = int(input())\n\ndef lst_to_string(lst):\n    s = ''\n    for i in lst:\n        s += str(i) + ' '\n    s = s[:-1]\n    return s\n\ndef reverse_list(list_name, st_index, end_index):\n    if st_index == 0:\n        lst = list_name[end_index::-1] + list_name[end_index + 1:]\n    else:\n        lst = list_name[:st_index] + list_name[end_index:st_index - 1:-1] + list_name[end_index + 1:]\n    return lst\n\ndef main(obj):\n    x = obj.line\n    l = obj.l\n    if l == 1 or x == sorted(x):\n        return lst_to_string(x)\n    start = 0\n    for i in range(l):\n        if x[i] > i + 1:\n            start = i\n            break\n    end = x.index(min(x[start:]))\n    return lst_to_string(reverse_list(x, start, end))\n\nclass case:\n\n    def __init__(self, line):\n        self.line = [int(i) for i in line.split()]\n        self.l = len(self.line)\ncases = []\nfor i in range(T):\n    l = int(input())\n    line = input()\n    cases.append(case(line))\nfor i in range(T):\n    print(main(cases[i]))", "def solve(n, arr):\n    if sorted(arr) == arr:\n        s = ''.join((str(x) + ' ' for x in arr))\n        return s.strip()\n    ar2 = list(arr)\n    ar2.sort()\n    for i in range(n):\n        if ar2[i] == arr[i]:\n            continue\n        el = arr.index(min(arr[i:]))\n        new_ar = arr[:i] + arr[i:el + 1][::-1] + arr[el + 1:]\n        s = ''.join((str(x) + ' ' for x in new_ar))\n        return s.strip()\nn = int(input())\nfor i in range(n):\n    n2 = int(input())\n    l = input()\n    l = [int(x) for x in l.split(' ')]\n    print(solve(n2, l))", "import sys\nT = int(sys.stdin.readline())\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split(' ')]\n    i = 1\n    while i <= n:\n        if a[i - 1] != i:\n            break\n        i += 1\n    if i == n + 1:\n        print(' '.join(map(str, a)))\n        continue\n    j = i\n    while j <= n:\n        if a[j - 1] == i:\n            break\n        j += 1\n    b = a[:i - 1]\n    for k in range(i - 1, j):\n        b.append(a[i + j - k - 2])\n    b += a[j:]\n    print(' '.join(map(str, b)))", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    perm = list(map(int, input().split()))\n    i = 0\n    while i + 1 == perm[i] and i != len(perm) - 1:\n        i += 1\n    if i == len(perm) - 1:\n        print(' '.join(list(map(str, perm))))\n    elif i == 0:\n        j = 1\n        while perm[j] != 1 and j != len(perm) - 1:\n            j += 1\n        chunk = list(reversed(perm[:j + 1]))\n        new = chunk + perm[j + 1:]\n        print(' '.join(list(map(str, new))))\n    else:\n        k = i\n        while k != len(perm) - 1 and perm[k] != perm[i - 1] + 1:\n            k += 1\n        chunk = list(reversed(perm[i:k + 1]))\n        new = perm[:i] + chunk + perm[k + 1:]\n        print(' '.join(list(map(str, new))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    first_wrong = 0\n    while first_wrong < n and p[first_wrong] == first_wrong + 1:\n        first_wrong += 1\n    if first_wrong < n:\n        needed_index = first_wrong\n        while p[needed_index] != first_wrong + 1:\n            needed_index += 1\n        p = p[:first_wrong] + p[first_wrong:needed_index + 1][::-1] + p[needed_index + 1:]\n    ans = ''\n    for num in p:\n        ans += f'{num} '\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(XXX) for XXX in input().split()]\n    res = ''.join([XXX for XXX in str(arr).split(',') if len(XXX) > 0])\n    for i in range(n):\n        if arr[i] != i + 1:\n            p = arr.index(i + 1)\n            reversedPrefix = arr[i:p + 1][::-1]\n            arr = arr[:i] + reversedPrefix + arr[p + 1:]\n            res = ''.join([XXX for XXX in str(arr).split(',') if len(XXX) > 0])\n            break\n    res = res[1:len(res) - 1]\n    print(res)", "def minPermutation(n, data):\n    ans = data\n    res = None\n    min_v = []\n    for i in range(n):\n        pos = n - i - 1\n        if len(min_v) == 0:\n            min_v.append((data[pos], pos))\n            continue\n        if data[pos] < min_v[-1][0]:\n            min_v.append((data[pos], pos))\n        else:\n            min_v.append(min_v[-1])\n    min_v = min_v[::-1]\n    for i in range(n):\n        if data[i] > min_v[i][0]:\n            ans = data[:i] + data[i:min_v[i][1] + 1][::-1] + data[min_v[i][1] + 1:]\n            break\n    return ans\n\ndef run():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        data = input().split(' ')\n        data = [int(x) for x in data]\n        ans = minPermutation(n, data)\n        print(' '.join([str(x) for x in ans]))\nrun()", "import sys\n\ndef _input_iter():\n    for line in sys.stdin:\n        for part in line.strip().split(' '):\n            stripped = part.strip()\n            if stripped:\n                yield stripped\nstream = _input_iter()\n\ndef read_int():\n    return int(next(stream))\n\ndef read_str():\n    return next(stream)\n\ndef run():\n    n = read_int()\n    permutation = []\n    for i in range(n):\n        permutation.append(read_int())\n    (l, r) = (-1, -1)\n    for i in range(len(permutation)):\n        if i + 1 != permutation[i] and l == -1:\n            l = i\n        if permutation[i] == l + 1 and r == -1:\n            r = i + 1\n    permutation[l:r] = list(reversed(permutation[l:r]))\n    print(' '.join((str(i) for i in permutation)))\ntest_cases = read_int()\nfor _ in range(test_cases):\n    run()", "def solveA(a):\n    a_with_positions = []\n    for (index, value) in enumerate(a):\n        a_with_positions.append([value, index])\n    a_with_positions = sorted(a_with_positions, key=lambda x: x[0])\n    for (index, value) in enumerate(a):\n        if value == a_with_positions[index][0]:\n            continue\n        else:\n            return swap(a, index, a_with_positions[index][1])\n    return a\n\ndef swap(a, l, r):\n    while l < r:\n        aux = a[l]\n        a[l] = a[r]\n        a[r] = aux\n        l += 1\n        r -= 1\n    return a\nnum_tests = int(input().split()[0])\nfor t in range(num_tests):\n    n = int(input().split()[0])\n    a = [int(x) for x in input().split()]\n    result = solveA(a)\n    print(' '.join([str(val) for val in result]))", "tc = int(input())\nfor i in range(tc):\n    x = int(input())\n    z = list(map(int, input().split()))\n    y = z.copy()\n    y.insert(0, 0)\n    list1 = []\n    for i in range(1, x):\n        if y[i] - y[i - 1] != 1:\n            a = z[y.index(y[i]) - 1:y.index(y[i - 1] + 1)]\n            g = z[:i - 1] + a[::-1] + z[y.index(y[i - 1] + 1):]\n            str1 = ''\n            for i in range(len(g)):\n                str1 += str(g[i]) + ' '\n            print(str1)\n            break\n        else:\n            continue\n    else:\n        str1 = ''\n        for i in range(len(z)):\n            str1 += str(z[i]) + ' '\n        print(str1)", "loopcount = int(input())\nfor loop in range(loopcount):\n    a = int(input())\n    x = input()\n    x = x.split(' ')\n    x = list(map(int, x))\n    y = x.copy()\n    y.sort()\n    output = []\n    z = []\n    ok = True\n    i = 0\n    while i < a:\n        if x[i] != y[i] and ok:\n            global swap\n            swap = y[i]\n            for j in range(i, a):\n                z.append(x[j])\n                if x[j] == swap:\n                    i = j\n                    break\n            z.reverse()\n            ok = False\n            output += z\n        else:\n            output.append(x[i])\n        i += 1\n    string_ints = [str(int) for int in output]\n    print(' '.join(string_ints))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = input().split()\n    runningMin = [i for i in range(n)]\n    runningMin[n - 1] = n - 1\n    for i in range(n - 2, -1, -1):\n        if int(p[i]) < int(p[runningMin[i + 1]]):\n            runningMin[i] = i\n        else:\n            runningMin[i] = runningMin[i + 1]\n    for i in range(n):\n        if runningMin[i] != i:\n            p[i:runningMin[i] + 1] = reversed(p[i:runningMin[i] + 1])\n            break\n    print(' '.join(p))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    list2 = []\n    flag1 = 0\n    j = 0\n    num = 0\n    s = ''\n    for i in range(0, len(list1)):\n        if list1[i] != i + 1:\n            flag1 = 1\n            num = i + 1\n            j = i\n            break\n        else:\n            s += str(list1[i]) + ' '\n    if flag1 == 1:\n        for j in range(i, len(list1)):\n            if list1[j] == num:\n                break\n        k = j\n        for k in range(j, i - 1, -1):\n            s += str(list1[k]) + ' '\n        k = j + 1\n        for k in range(j + 1, len(list1)):\n            s += str(list1[k]) + ' '\n    print(s)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    nth = 0\n    for i in range(n):\n        if a[i] != i + 1:\n            nth = a.index(i + 1)\n            print(*a[:i] + a[i:nth + 1][::-1] + a[nth + 1:])\n            return\n    print(*a)\ntst = int(input())\nwhile tst:\n    solve()\n    tst -= 1", "for _ in range(int(input())):\n    n = int(input())\n    perm = list(input().split())\n    if n == 1:\n        print('1')\n    else:\n        for x in range(1, n + 1):\n            if str(x) != perm[x - 1]:\n                break\n        missind = perm.index(str(x))\n        rev = perm[x - 1:missind + 1][::-1]\n        print(*perm[:x - 1] + rev + perm[missind + 1:])", "for s in [*open(0)][2::2]:\n    a = [*map(int, s.split()), 0]\n    i = 0\n    while a[i] == i + 1:\n        i += 1\n    if a[i]:\n        j = a.index(i + 1) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[:-1])", "for i in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    for i in range(len(li)):\n        if li[i] != i + 1:\n            index = li.index(i + 1)\n            li[i:index + 1] = li[i:index + 1][::-1]\n            break\n    print(*li)", "for case in range(int(input())):\n    length = int(input())\n    line = list(map(int, input().split()))\n    for i in range(length):\n        if line[i] != i + 1:\n            number = line.index(i + 1)\n            line[i:number + 1] = reversed(line[i:number + 1])\n            break\n    print(*line)", "t = int(input())\nfor _ in range(t):\n    l = int(input())\n    a = list(map(int, input().split()))\n    n = 1\n    i = 0\n    br = 0\n    ln = []\n    for d in a:\n        if n == d:\n            n = n + 1\n        else:\n            br = 1\n            break\n    if br == 0:\n        print(*a)\n    else:\n        i = n - 1\n        i2 = a.index(n)\n        m = a[i:i2 + 1]\n        m = m[::-1]\n        ln = ln + a[:i] + m + a[i2 + 1:]\n        print(*ln)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(n):\n        if p[i] != i + 1:\n            break\n    j = p.index(i + 1)\n    p[i:j + 1] = p[i:j + 1][::-1]\n    print(*p)", "import sys\nt = int(sys.stdin.readline())\nfor k in range(0, t):\n    n = int(sys.stdin.readline())\n    p = list(map(int, sys.stdin.readline().split()))\n    L = 0\n    R = 0\n    for i in range(0, n):\n        if p[i] > i + 1:\n            L = i + 1\n            break\n    if L == 0:\n        pp = p.copy()\n    elif L == 1:\n        R = p.index(L)\n        pp = p[R:0:-1]\n        pp.extend(p[0:1])\n        pp.extend(p[R + 1:])\n    else:\n        R = p.index(L)\n        pp = p[0:L - 1]\n        pp.extend(p[R:L - 2:-1])\n        pp.extend(p[R + 1:])\n    for i in range(0, n):\n        sys.stdout.write(str(pp[i]) + ' ')\n    sys.stdout.write('\\n')", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])", "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, itertools, math\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LF():\n    return list(map(float, input().split()))\n\ndef LI_():\n    return list(map(lambda x: int(x) - 1, input().split()))\n\ndef II():\n    return int(input())\n\ndef IF():\n    return float(input())\n\ndef S():\n    return input().rstrip()\n\ndef LS():\n    return S().split()\n\ndef IR(n):\n    return [II() for _ in range(n)]\n\ndef LIR(n):\n    return [LI() for _ in range(n)]\n\ndef FR(n):\n    return [IF() for _ in range(n)]\n\ndef LFR(n):\n    return [LI() for _ in range(n)]\n\ndef LIR_(n):\n    return [LI_() for _ in range(n)]\n\ndef SR(n):\n    return [S() for _ in range(n)]\n\ndef LSR(n):\n    return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 10000000000.0\n\ndef solve():\n    t = II()\n    for _ in range(t):\n        n = II()\n        p = LI()\n        l = -1\n        r = -1\n        for i in range(n):\n            if i + 1 != p[i]:\n                for j in range(i + 1, n):\n                    if i + 1 == p[j]:\n                        l = i\n                        r = j + 1\n                        break\n                break\n        if l == -1:\n            print(*p)\n        else:\n            ans = p[:l] + list(reversed(p[l:r])) + p[r:]\n            print(*ans)\n    return\nsolve()", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    req = -1\n    for i in range(n):\n        if l[i] != i + 1:\n            req = i + 1\n            break\n    if req == -1:\n        print(*l)\n        return\n    idx = l.index(req)\n    l = l[:req - 1] + l[req - 1:idx + 1][::-1] + l[idx + 1:]\n    print(*l)\nt = int(input())\nfor i in range(t):\n    func()", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    for i in range(n):\n        if nums[i] != i + 1:\n            idx = nums.index(i + 1)\n            nums[i:idx + 1] = nums[i:idx + 1][::-1]\n            break\n    print(*nums)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (left, right) = (-1, -1)\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            left = i\n            break\n    else:\n        return arr\n    for i in range(i + 1, len(arr)):\n        if arr[i] == left + 1:\n            right = i\n            break\n    length = right - left + 1\n    for i in range(int(length / 2)):\n        (arr[left + i], arr[right - i]) = (arr[right - i], arr[left + i])\n    return arr\n\ndef main():\n    res = []\n    t = int(input())\n    for _ in range(t):\n        res.append(solve())\n    for i in range(len(res)):\n        print(*res[i])\nmain()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] != i + 1:\n            a = i\n            b = s.index(i + 1)\n            break\n    s[a:b + 1] = s[b:a:-1] + s[a:a + 1]\n    print(*s)", "for i in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split()), 0]\n    i = 0\n    while a[i] == i + 1:\n        i = i + 1\n    j = 0\n    if a[i]:\n        j = a.index(i + 1) + 1\n    a[i:j] = a[i:j][::-1]\n    print(*a[:-1])", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])", "t = int(input())\nfor zz in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        if l[i] == i + 1:\n            continue\n        else:\n            k = i\n            break\n    p = l.index(k + 1)\n    l1 = l[k:p + 1]\n    l1 = l1[::-1]\n    print(*l[:k] + l1 + l[p + 1:])", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        p = ra(int)\n        for i in range(n):\n            if p[i] != i + 1:\n                x = p.index(i + 1)\n                p[i:x + 1] = p[i:x + 1][::-1]\n                break\n        print(*p)\nmain()", "for s in [*open(0)][2::2]:\n    a = [0, *map(int, s.split()), 0]\n    i = 1\n    while a[i] == i:\n        i += 1\n    if a[i]:\n        j = a.index(i) + 1\n        a[i:j] = a[i:j][::-1]\n    print(*a[1:-1])"]