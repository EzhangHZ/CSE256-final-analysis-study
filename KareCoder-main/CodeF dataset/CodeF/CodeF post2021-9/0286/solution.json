["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = [input()[:-1].split() for _ in range(n)]\n    w = [''.join(i) for i in zip(*w) if i.count('1') >= n // 2]\n    x = len(w)\n    ans = 'NO'\n    for i in range(x):\n        for j in range(i + 1, x):\n            if bin(int('0b' + w[i], 2) | int('0b' + w[j], 2)) == '0b' + '1' * n:\n                ans = 'YES'\n                break\n        if ans == 'YES':\n            break\n    print(ans)", "def main():\n    t = int(input())\n    ans = []\n    w = range(5)\n    for _ in range(t):\n        n = int(input())\n        h = n >> 1\n        a = []\n        for _ in range(n):\n            a.append(input())\n        days = [set() for _ in w]\n        for d in w:\n            for r in range(n):\n                if a[r][d << 1] == '1':\n                    days[d].add(r)\n        looking = True\n        for i in range(4):\n            if len(days[i]) >= h:\n                for j in range(i + 1, 5):\n                    if len(days[j]) >= h:\n                        if len(days[i].union(days[j])) == n:\n                            looking = False\n                            break\n            if not looking:\n                break\n        ans.append('NO' if looking else 'YES')\n    print('\\n'.join(ans))\nimport sys, threading\ninput = sys.stdin.readline\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "def main():\n\n    def solve(n, a):\n        h = n >> 1\n        days = [set() for _ in w]\n        for d in w:\n            for r in range(n):\n                if a[r][d << 1] == '1':\n                    days[d].add(r)\n        for i in range(4):\n            if len(days[i]) >= h:\n                for j in range(i + 1, 5):\n                    if len(days[j]) >= h:\n                        if len(days[i].union(days[j])) == n:\n                            return 'YES'\n        return 'NO'\n    t = int(input())\n    ans = []\n    w = range(5)\n    for _ in range(t):\n        n = int(input())\n        a = []\n        for _ in range(n):\n            a.append(input())\n        ans.append(solve(n, a))\n    print('\\n'.join(ans))\nimport sys, threading\ninput = sys.stdin.readline\nthread = threading.Thread(target=main)\nthread.start()\nthread.join()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = [list(input().split()) for _ in range(n)]\n    s = [{i for i in range(n) if a[i][w] == '1'} for w in range(5)]\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if len(s[i]) < n // 2 or len(s[j]) < n // 2:\n                continue\n            if len(s[i].union(s[j])) == n:\n                print('YES')\n                return\n    print('NO')\nfor _ in range(int(input())):\n    solve()", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [2 ** n - 1 - int(''.join(x), 2) for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all((x & y for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [2 ** n - 1 - int(''.join(x), 2) for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all((x & y for (i, x) in enumerate(a) for y in a[:i]))::2])", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nI = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [2 ** n - 1 - int(''.join(x), 2) for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all((x & y for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [x for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all(((*'00',) in [*zip(x, y)] for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [x for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all(((*'00',) in [*zip(x, y)] for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [x for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all(((*'00',) in [*zip(x, y)] for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [x for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all(((*'00',) in [*zip(x, y)] for (i, x) in enumerate(a) for y in a[:i]))::2])", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [x for x in zip(*(I() for _ in [0] * n)) if 2 * x.count('1') >= n]\n    print('YNEOS'[all(((*'00',) in [*zip(x, y)] for (i, x) in enumerate(a) for y in a[:i]))::2])", "def solve(l, n):\n    if n % 2 != 0:\n        return 'NO'\n    week = [set() for day in range(5)]\n    for i in range(n):\n        flag = 0\n        for j in range(5):\n            if l[i][j * 2] == '1':\n                week[j].add(i)\n                flag = 1\n        if flag == 0:\n            return 'NO'\n    week = [day for day in week if len(day) >= n // 2]\n    if len(week) < 2:\n        return 'NO'\n    sorted(week, key=lambda s: len(s), reverse=True)\n    for i in range(len(week)):\n        for j in range(i + 1, len(week)):\n            if len(week[i].union(week[j])) == n:\n                return 'YES'\n    return 'NO'\nfor samples in range(int(input())):\n    n = int(input())\n    l = []\n    for line in range(n):\n        l.append(input())\n    print(solve(l, n))", "def solve(l, n):\n    week = [set() for day in range(5)]\n    for i in range(n):\n        for j in range(5):\n            if l[i][j * 2] == '1':\n                week[j].add(i)\n    week = [day for day in week if len(day) >= n // 2]\n    if len(week) < 2:\n        return 'NO'\n    sorted(week, key=lambda s: len(s), reverse=True)\n    for i in range(len(week)):\n        for j in range(i + 1, len(week)):\n            if len(week[i].union(week[j])) == n:\n                return 'YES'\n    return 'NO'\nfor samples in range(int(input())):\n    n = int(input())\n    l = []\n    for line in range(n):\n        l.append(input())\n    print(solve(l, n))", "import math\nfrom sys import stdin\ninput = stdin.readline\ntest = int(input())\nfor _ in range(test):\n    (n, arr, result) = (int(input()), [], True)\n    arr = [set() for _ in range(5)]\n    for j in range(n):\n        data = list(map(int, input().split()))\n        for i in range(5):\n            if data[i]:\n                arr[i].add(j)\n    if n % 2 == 1:\n        print('NO')\n        continue\n    result = False\n    for i in range(5):\n        a = len(arr[i])\n        if a < n // 2 or result:\n            continue\n        for j in range(i + 1, 5):\n            b = len(arr[j])\n            if b < n // 2:\n                continue\n            union = len(arr[i].union(arr[j]))\n            if union == n:\n                result = True\n    if result:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nans = []\nw = range(5)\nfor _ in range(t):\n    n = int(input())\n    h = n >> 1\n    a = []\n    for _ in range(n):\n        a.append(input())\n    days = [set() for _ in w]\n    for d in w:\n        for r in range(n):\n            if a[r][d << 1] == '1':\n                days[d].add(r)\n    looking = True\n    for i in range(4):\n        if len(days[i]) >= h:\n            for j in range(i + 1, 5):\n                if len(days[j]) >= h:\n                    if len(days[i].union(days[j])) == n:\n                        looking = False\n                        break\n        if not looking:\n            break\n    ans.append('NO' if looking else 'YES')\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print('NO')\n        break\n    r = {1: set(), 2: set(), 3: set(), 4: set(), 0: set()}\n    f = 0\n    for i in range(n):\n        r1 = input().split()\n        for j in range(5):\n            if r1[j] == '1':\n                r[j].add(i)\n    a = []\n    for i in range(4):\n        if len(r[i]) >= n // 2 and f == 0:\n            for j in range(i + 1, 5):\n                if len(r[j]) >= n // 2:\n                    if len(r[i] | r[j]) == n:\n                        f = 1\n                        print('YES')\n                        break\n    if f == 0:\n        print('NO')", "from math import *\nfrom collections import defaultdict as dt\nfrom sys import stdin\ninp = lambda : stdin.readline().strip()\nI = lambda : int(inp())\nM = lambda : map(int, inp().split())\nL = lambda : list(M())\nmod = 1000000007\ninf = 100000000000000000000\nss = 'abcdefghijklmnopqrstuvwxyz'\n\ndef solve():\n    n = I()\n    d = dt(list)\n    for i in range(n):\n        a = L()\n        for j in range(5):\n            if a[j]:\n                d[j].append(i)\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(d[i]) >= n // 2 and len(d[j]) >= n // 2 and (len(set(d[i] + d[j])) == n):\n                print('YES')\n                return\n    print('NO')\ntt = 1\ntt = I()\nfor _ in range(tt):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    d = [set(), set(), set(), set(), set()]\n    for i in range(n):\n        g = input().split()\n        for j in range(5):\n            if g[j] == '1':\n                d[j].add(i)\n    bl = False\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if not bl and len(d[i].union(d[j])) == n and (len(d[i]) >= n // 2) and (len(d[j]) >= n // 2):\n                bl = True\n    print('YES' if bl else 'NO')", "def groups(matrix, n):\n    d = [[] for x in range(5)]\n    for x in range(n):\n        for y in range(5):\n            if matrix[x][y] == 1:\n                d[y].append(x)\n    density = []\n    for x in range(5):\n        if len(d[x]) >= n / 2:\n            density.append(d[x])\n    if len(density) <= 1:\n        return False\n    for i in range(len(density)):\n        for j in range(i + 1, len(density)):\n            temp = set(density[i] + density[j])\n            if len(temp) == n:\n                return True\n    return False\nt = int(input())\nfinal = []\nfor _ in range(t):\n    n = int(input())\n    matrix = []\n    for x in range(n):\n        matrix.append(list(map(int, input().split())))\n    ans = groups(matrix, n)\n    final.append(ans)\nfor _ in range(t):\n    if final[_] == True:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    n = int(input())\n    students = [[] for _ in range(n)]\n    for i in range(n):\n        students[i] = list(map(int, input().split()))\n    days = [set() for _ in range(5)]\n    for student_idx in range(n):\n        for day in range(5):\n            if students[student_idx][day]:\n                days[day].add(student_idx)\n    for day1 in range(5):\n        students_available_day_1 = days[day1]\n        if not students_available_day_1:\n            continue\n        for day2 in range(day1 + 1, 5):\n            students_available_day_2 = days[day2]\n            if not students_available_day_2:\n                continue\n            if len(students_available_day_1) >= n // 2 and len(students_available_day_2) >= n // 2 and (len(students_available_day_1 | students_available_day_2) == n):\n                return True\n    return False\nfor i in range(int(input())):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    g = [list(map(int, input().split())) for _ in range(n)]\n    if n % 2:\n        print('NO')\n    else:\n\n        def go():\n            for i in range(5):\n                for j in range(i + 1, 5):\n                    (a, b, c) = (0, 0, 0)\n                    for x in range(n):\n                        if g[x][i] and g[x][j]:\n                            c += 1\n                        elif g[x][i]:\n                            a += 1\n                        elif g[x][j]:\n                            b += 1\n                        else:\n                            break\n                    else:\n                        if a <= n // 2 and b <= n // 2:\n                            return 'YES'\n            return 'NO'\n        print(go())", "def solve(n, a):\n    n2 = n // 2\n    for i in range(4):\n        for j in range(i + 1, 5):\n            (o1, o2, both) = (0, 0, 0)\n            for k in range(n):\n                if a[k][i]:\n                    if a[k][j]:\n                        both += 1\n                    else:\n                        o1 += 1\n                elif a[k][j]:\n                    o2 += 1\n                else:\n                    break\n            if o1 + o2 + both == n:\n                if o1 <= n2 and o2 <= n2:\n                    return 'YES'\n    return 'NO'\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    a = []\n    for i_n in range(n):\n        a.append(list(map(int, input().split(' '))))\n    print(solve(n, a))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    res = [set(), set(), set(), set(), set()]\n    for i in range(n):\n        days = input().split(' ')\n        for (idx, day) in enumerate(days):\n            if days[idx] == '1':\n                res[idx].add(i)\n    flag = 0\n    for r in res:\n        if len(r) >= n // 2:\n            flag += 1\n    if flag < 2:\n        print('NO')\n    else:\n        flag = False\n        try:\n            for i in range(4):\n                for j in range(i + 1, 5):\n                    union = res[i].union(res[j])\n                    if len(union) == n and len(res[i]) >= n // 2 and (len(res[j]) >= n // 2):\n                        flag = True\n                        raise Exception\n        except Exception:\n            pass\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor g in range(t):\n    n = int(input())\n    week = [[], [], [], [], []]\n    for i in range(n):\n        k = input().split(' ')\n        for j in range(5):\n            if k[j] == '1':\n                week[j].append(i)\n    p = n / 2\n    fak = week.copy()\n    for i in week:\n        if len(i) < p:\n            fak.remove(i)\n    week = fak\n    k = True\n    if len(week) < 2:\n        print('NO')\n    else:\n        for (index, i) in enumerate(week):\n            fake = week[index + 1:]\n            for j in fake:\n                nl = list(set(i + j))\n                if len(nl) == n:\n                    print('YES')\n                    k = False\n                    break\n            if k == False:\n                break\n        if k == True:\n            print('NO')", "def check():\n    for i in range(5):\n        for j in range(i + 1, 5):\n            flag = cnt1 = cnt2 = 0\n            for k in range(n):\n                if a[k][i] == a[k][j] == '0':\n                    flag = 1\n                    break\n                if a[k][i] == '1':\n                    cnt1 += 1\n                if a[k][j] == '1':\n                    cnt2 += 1\n            if cnt1 >= n / 2 and cnt2 >= n / 2 and (flag == 0):\n                return 1\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    a = [input().split() for i in range(n)]\n    print('YES' if check() else 'NO')", "from itertools import combinations\n\ndef solve(test_case):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append([int(x) for x in input().split()])\n    sets = []\n    for j in range(5):\n        temp = set()\n        for i in range(n):\n            if mat[i][j] == 1:\n                temp.add(i)\n        if len(temp) >= n / 2:\n            sets.append(temp)\n    if len(sets) < 2:\n        print('NO')\n        return\n    combs = combinations(sets, 2)\n    for comb in combs:\n        if len(comb[0] | comb[1]) == n:\n            print('YES')\n            return\n    print('NO')\nt = int(input())\nfor i in range(t):\n    solve(i + 1)", "def f():\n    n = int(input())\n    l = [set() for i in range(5)]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(5):\n            if a[j]:\n                l[j].add(i)\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if len(l[i] | l[j]) == n and min(len(l[i]), len(l[j])) >= n // 2:\n                return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(f())", "import sys\ninput = sys.stdin.readline\n\ndef check(x, y, z):\n    num1 = 0\n    num2 = 0\n    k = len(z)\n    for i in range(k):\n        if z[i][x] == 0 and z[i][y] == 0:\n            return False\n        num1 += z[i][x]\n        num2 += z[i][y]\n    return num1 >= k / 2 and num2 >= k / 2\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    if n % 2 == 1:\n        print('NO')\n    a = []\n    for i in range(n):\n        b = list(map(int, input().strip().split()))\n        a.append(b)\n    ans = 'NO'\n    for day1 in range(4):\n        for day2 in range(day1 + 1, 5):\n            if check(day1, day2, a):\n                ans = 'YES'\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = {d: set() for d in range(5)}\n    for i in range(n):\n        st = inp_list_int()\n        for (j, d) in enumerate(st):\n            if d == 1:\n                days[j].add(i)\n    res = False\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(days[i]) >= n // 2 and len(days[j]) >= n // 2:\n                if len(days[i].union(days[j])) == n:\n                    res = True\n                    break\n    print('YES' if res else 'NO')", "def main():\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    day = [set() for _ in range(5)]\n    for i in range(5):\n        for j in range(n):\n            if arr[j][i] == 1:\n                day[i].add(j)\n    day2 = []\n    for i in range(len(day)):\n        if len(day[i]) >= n / 2:\n            day2.append(day[i])\n    day = day2\n    for i in range(len(day)):\n        for j in range(i + 1, len(day)):\n            if len(day[i].union(day[j])) == n:\n                print('YES')\n                return\n    print('NO')\nt = int(input())\nfor _ in range(t):\n    main()", "def f():\n    n = int(input())\n    l = [set() for i in range(5)]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(5):\n            if a[j]:\n                l[j].add(i)\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if len(l[i] | l[j]) == n and min(len(l[i]), len(l[j])) >= n // 2:\n                return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(f())", "def solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(4):\n        for j in range(i + 1, 5):\n            cnt = 0\n            day1 = 0\n            day2 = 0\n            bo = 1\n            for stu in range(n):\n                if a[stu][i] == 0 and a[stu][j] == 0:\n                    bo = 0\n                    break\n                elif a[stu][i] == 1 and a[stu][j] == 1:\n                    cnt += 1\n                elif a[stu][i] == 1:\n                    day1 += 1\n                elif a[stu][j] == 1:\n                    day2 += 1\n            if day1 <= n // 2 and day2 <= n // 2 and bo:\n                return 'YES'\n    return 'NO'\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    d = {i: {} for i in range(5)}\n    for i in range(n):\n        a = list(input().split())\n        for j in range(5):\n            if a[j] == '1':\n                d[j][i] = True\n    pos = []\n    for i in d:\n        if len(d[i]) >= n // 2:\n            pos.append(d[i])\n    got = False\n    for i in range(len(pos)):\n        for j in range(i + 1, len(pos)):\n            isit = True\n            for k in range(n):\n                if pos[i].get(k) == None and pos[j].get(k) == None:\n                    isit = False\n                    break\n            if isit:\n                got = True\n                break\n    print('YES' if got else 'NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {'M': [], 'T': [], 'W': [], 'Th': [], 'F': []}\n    for i in range(n):\n        (m, t, w, th, f) = map(int, input().split())\n        if m == 1:\n            d['M'].append(i + 1)\n        if t == 1:\n            d['T'].append(i + 1)\n        if w == 1:\n            d['W'].append(i + 1)\n        if th == 1:\n            d['Th'].append(i + 1)\n        if f == 1:\n            d['F'].append(i + 1)\n    if n % 2 != 0:\n        print('NO')\n    else:\n        l = []\n        for x in d:\n            if len(d[x]) >= n // 2:\n                l.append(x)\n        if len(l) == 1 or len(l) == 0:\n            print('NO')\n        else:\n            f = 0\n            for i in range(len(l) - 1):\n                for j in range(i + 1, len(l)):\n                    u = set(d[l[i]]).union(set(d[l[j]]))\n                    if len(u) == n:\n                        f = 1\n                        print('YES')\n                        break\n                if f == 1:\n                    break\n            if f == 0:\n                print('NO')", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef solve():\n    n = int(input())\n    d = {0: set(), 1: set(), 2: set(), 3: set(), 4: set()}\n    for i in range(n):\n        kk = get.int()\n        for j in range(5):\n            if kk[j] == 1:\n                d[j].add(i)\n    mylist = []\n    for (a, b) in d.items():\n        if len(b) >= n // 2:\n            mylist.append(b)\n    if len(mylist) <= 1:\n        print('NO')\n    else:\n        temp = False\n        for i in range(len(mylist) - 1):\n            for j in range(i + 1, len(mylist)):\n                s1 = mylist[i].union(mylist[j])\n                if len(s1) == n:\n                    print('YES')\n                    temp = True\n                    break\n            if temp == True:\n                break\n        if temp == False:\n            print('NO')\nfor _ in range(int(input())):\n    solve()", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = []\n        s = [0, 0, 0, 0, 0]\n        fl = False\n        for i in range(n):\n            a.append(list(map(int, input().split())))\n        for i in range(5):\n            s[i] = sum([x[i] for x in a])\n        for i in range(5):\n            for j in range(i, 5):\n                if i != j and (s[i] >= n // 2 and s[j] >= n // 2) and (sum([0 if not a[x][i] and (not a[x][j]) else 1 for x in range(n)]) == n):\n                    print('YES')\n                    fl = True\n                    break\n            if fl:\n                break\n        if not fl:\n            print('NO')\nmain()", "t = int(input())\nres = []\nfor i in range(t):\n    num_stud = int(input())\n    tab = []\n    for j in range(num_stud):\n        lin = list(map(int, input().split()))\n        tab.append(lin)\n    sum_col = []\n    for j in range(5):\n        s_col = 0\n        for s in range(num_stud):\n            s_col += tab[s][j]\n        sum_col.append(s_col)\n    t_res = False\n    for j in range(5):\n        if sum_col[j] < num_stud // 2:\n            continue\n        for k in range(j + 1, 5):\n            if sum_col[k] < num_stud // 2:\n                continue\n            br = False\n            for l in range(num_stud):\n                if tab[l][j] == 0 and tab[l][k] == 0:\n                    br = True\n            if br:\n                continue\n            t_res = True\n            break\n        if t_res:\n            break\n    if t_res:\n        res.append('YES')\n    else:\n        res.append('NO')\nfor el in res:\n    print(el)", "def f():\n    n = int(input())\n    l = [set() for i in range(5)]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(5):\n            if a[j]:\n                l[j].add(i)\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if len(l[i] | l[j]) == n and min(len(l[i]), len(l[j])) >= n // 2:\n                return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(f())", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(input().split())\n    ans = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            c1 = c2 = c3 = 0\n            for k in range(n):\n                if a[k][i] == '1' and a[k][j] == '1':\n                    c3 += 1\n                elif a[k][i] == '1':\n                    c1 += 1\n                elif a[k][j] == '1':\n                    c2 += 1\n                else:\n                    break\n            else:\n                if c1 <= n // 2 and c2 <= n // 2:\n                    ans = 1\n                    print('YES')\n                    break\n        if ans:\n            break\n    else:\n        print('NO')", "def solve():\n    n = int(input())\n    students = [[] for _ in range(n)]\n    for i in range(n):\n        students[i] = list(map(int, input().split()))\n    days = [set() for _ in range(5)]\n    for student_idx in range(n):\n        for day in range(5):\n            if students[student_idx][day]:\n                days[day].add(student_idx)\n    for day1 in range(5):\n        students_available_day_1 = days[day1]\n        if not students_available_day_1:\n            continue\n        for day2 in range(day1 + 1, 5):\n            students_available_day_2 = days[day2]\n            if not students_available_day_2:\n                continue\n            if len(students_available_day_1) >= n // 2 and len(students_available_day_2) >= n // 2 and (len(students_available_day_1 | students_available_day_2) == n):\n                return True\n    return False\nfor i in range(int(input())):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = []\n    d = {i: set() for i in range(5)}\n    for _1 in range(n):\n        a = map(int, input().split())\n        for (i, v) in enumerate(a):\n            if v == 1:\n                d[i].add(_1)\n    isFound = False\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(d[j]) >= n // 2 and len(d[i]) >= n // 2 and (len(d[i].union(d[j])) == n):\n                print('YES')\n                isFound = True\n                break\n        if isFound:\n            break\n    else:\n        print('NO')", "from sys import stdin\n\ndef read_input():\n    n = int(stdin.readline())\n    g = []\n    for _ in range(n):\n        g.append(list(map(int, stdin.readline().split())))\n    return (n, g)\n\ndef solve(n, g):\n    for day1 in range(5):\n        for day2 in range(5):\n            if day1 != day2:\n                (a, b, c) = (0, 0, 0)\n                for h in g:\n                    if h[day1] == 1 and h[day2] == 1:\n                        c += 1\n                    elif h[day1] == 1:\n                        a += 1\n                    elif h[day2] == 1:\n                        b += 1\n                if a + b + c == n and a + c >= n // 2 and (b + c >= n // 2):\n                    return 'YES'\n    return 'NO'\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\nmain()", "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    students = []\n    days = [0 for _ in range(5)]\n    days_to_students = collections.defaultdict(set)\n    for i in range(n):\n        student = list(map(int, input().split()))\n        for (day, amount) in enumerate(student):\n            if amount:\n                days[day] += 1\n                days_to_students[day].add(i)\n    good_days = []\n    for i in range(5):\n        if days[i] >= n // 2:\n            good_days.append(i)\n    for (a, b) in itertools.combinations(good_days, 2):\n        if len(days_to_students[a] | days_to_students[b]) == n:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = [[] for _ in range(5)]\n    for id in range(n):\n        for (i, c) in enumerate(input().split()):\n            if c == '1':\n                s[i].append(id)\n    f = 0\n    for i in range(5):\n        if f:\n            break\n        for j in range(i + 1, 5):\n            s1 = set(s[i])\n            s2 = set(s[j])\n            if len(s1) >= n // 2 and len(s2) >= n // 2:\n                l = len(s1.intersection(s2))\n                d1 = 0 if len(s1) - l >= n // 2 else len(s1) - l - n // 2\n                d2 = 0 if len(s2) - l >= n // 2 else len(s2) - l - n // 2\n                if d1 + d2 + l >= 0:\n                    f = 1\n                    break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef solve():\n    n = int(input())\n    mappings = {}\n    for i in range(1, 6):\n        mappings[i] = set()\n    for i in range(n):\n        all_inputs = input()\n        all_inputs = [int(val) for val in all_inputs.split(' ')]\n        for j in range(1, 6):\n            if all_inputs[j - 1] == 1:\n                mappings[j].add(i)\n    for i in range(1, 5):\n        if len(mappings[i]) < n / 2:\n            continue\n        for j in range(i + 1, 6):\n            if len(mappings[j]) < n / 2:\n                continue\n            dup = len(mappings[i].intersection(mappings[j]))\n            if len(mappings[i]) + len(mappings[j]) - dup == n:\n                print('YES')\n                return\n    print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\n\ndef result(a1, n):\n    list_len = []\n    ab = defaultdict(set)\n    for i in range(5):\n        for j in range(n):\n            if a1[j][i] == 1:\n                ab[i].add(j)\n    for i in range(5):\n        if len(ab[i]) >= n // 2:\n            list_len.append(i)\n    for i in range(len(list_len)):\n        for j in range(i + 1, len(list_len)):\n            t = ab[list_len[i]].union(ab[list_len[j]])\n            if len(t) == n:\n                print('YES')\n                return\n    print('NO')\nfor i in range(int(input())):\n    a1 = []\n    ab = int(input())\n    for j in range(ab):\n        a1.append(list(map(int, input().split())))\n    result(a1, ab)", "CASES = int(input())\nfor _ in range(CASES):\n    n = int(input())\n    cases = []\n    for i in range(n):\n        cases.append(list(map(int, input().split())))\n    days = []\n    for i in range(5):\n        temp = set()\n        for j in range(n):\n            if cases[j][i]:\n                temp.add(j)\n        days.append(temp)\n    flag = False\n    for i in range(5):\n        if flag:\n            break\n        for j in range(i + 1, 5):\n            if len(days[i] | days[j]) == n and len(days[i]) >= n // 2 and (len(days[j]) >= n // 2):\n                flag = True\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    count1 = [0, 0, 0, 0, 0]\n    n = int(input())\n    m = n // 2\n    a = []\n    for j in range(n):\n        a.append(input().split())\n        for day in range(5):\n            count1[day] += int(a[j][day])\n    kt = False\n    for j in range(4):\n        if count1[j] >= m:\n            for g in range(j + 1, 5):\n                if count1[g] >= m:\n                    kt = True\n                    for k in range(n):\n                        if a[k][j] == a[k][g] == '0':\n                            kt = False\n                            break\n                    if kt == True:\n                        print('YES')\n                        break\n            if kt == True:\n                break\n    if kt == False:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {'M': [], 'T': [], 'W': [], 'Th': [], 'F': []}\n    for i in range(n):\n        (m, t, w, th, f) = map(int, input().split())\n        if m == 1:\n            d['M'].append(i + 1)\n        if t == 1:\n            d['T'].append(i + 1)\n        if w == 1:\n            d['W'].append(i + 1)\n        if th == 1:\n            d['Th'].append(i + 1)\n        if f == 1:\n            d['F'].append(i + 1)\n    if n % 2 != 0:\n        print('NO')\n    else:\n        l = []\n        for x in d:\n            if len(d[x]) >= n // 2:\n                l.append(x)\n        if len(l) == 1 or len(l) == 0:\n            print('NO')\n        else:\n            f = 0\n            for i in range(len(l) - 1):\n                for j in range(i + 1, len(l)):\n                    u = set(d[l[i]]).union(set(d[l[j]]))\n                    if len(u) == n:\n                        f = 1\n                        print('YES')\n                        break\n                if f == 1:\n                    break\n            if f == 0:\n                print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {'M': [], 'T': [], 'W': [], 'Th': [], 'F': []}\n    for i in range(n):\n        (m, t, w, th, f) = map(int, input().split())\n        if m == 1:\n            d['M'].append(i + 1)\n        if t == 1:\n            d['T'].append(i + 1)\n        if w == 1:\n            d['W'].append(i + 1)\n        if th == 1:\n            d['Th'].append(i + 1)\n        if f == 1:\n            d['F'].append(i + 1)\n    if n % 2 != 0:\n        print('NO')\n    else:\n        l = []\n        for x in d:\n            if len(d[x]) >= n // 2:\n                l.append(x)\n        if len(l) == 1 or len(l) == 0:\n            print('NO')\n        else:\n            f = 0\n            for i in range(len(l) - 1):\n                for j in range(i + 1, len(l)):\n                    u = set(d[l[i]]).union(set(d[l[j]]))\n                    if len(u) == n:\n                        f = 1\n                        print('YES')\n                        break\n                if f == 1:\n                    break\n            if f == 0:\n                print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        nxt = list(map(int, input().split(' ')))\n        arr.append(nxt)\n    found = False\n    for i in range(4):\n        free_i = sum([x[i] for x in arr])\n        if free_i >= n // 2:\n            extra = free_i - n // 2\n            for j in range(i + 1, 5):\n                free_j = sum([x[j] for x in arr])\n                if free_j >= n // 2 and free_j - sum([x[i] and x[j] for x in arr]) + extra >= n // 2:\n                    print('YES')\n                    found = True\n                    break\n        if found:\n            break\n    if not found:\n        print('NO')", "def solve(n, prefs):\n    h = n // 2\n    for d1 in range(5):\n        for d2 in range(d1 + 1, 5):\n            d1c = 0\n            d2c = 0\n            both = 0\n            for p in prefs:\n                if p[d1] == 1 and p[d2] == 1:\n                    both += 1\n                elif p[d1] == 1:\n                    d1c += 1\n                elif p[d2] == 1:\n                    d2c += 1\n            if d1c > h or d2c > h:\n                continue\n            if d1c == h and d2c == h:\n                return 'YES'\n            rem = n - d1c - d2c\n            if both >= rem:\n                return 'YES'\n    return 'NO'\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    prefs = []\n    for _ in range(n):\n        p = list(map(int, input().strip().split()))\n        prefs.append(p)\n    inputs.append((n, prefs))\nfor (n, prefs) in inputs:\n    print(solve(n, prefs))", "def pr(ned):\n    for i in range(5):\n        for j in range(i + 1, 5):\n            f = len(ned[i].intersection(ned[j]))\n            nx = len(ned[i]) - f\n            ny = len(ned[j]) - f\n            if f + nx + ny == n:\n                raz = abs(nx - ny)\n                if f >= raz and (f - raz) % 2 == 0:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    sete = [[int(i) for i in input().split()] for _ in range(n)]\n    ned = {}\n    for i in range(5):\n        ned[i] = set()\n        for j in range(n):\n            if sete[j][i] == 1:\n                ned[i].add(j)\n    print(pr(ned))", "from sys import stdin\nfrom collections import defaultdict\n\ndef solve():\n    results = []\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        days = []\n        for _ in range(n):\n            a = list(map(int, stdin.readline().strip().split()))\n            days.append(a)\n        available = defaultdict(set)\n        for i in range(n):\n            for j in range(5):\n                if days[i][j] == 1:\n                    available[j].add(i)\n        for i in range(4):\n            cnt = 0\n            if len(available[i]) >= n // 2:\n                for j in range(i + 1, 5):\n                    if len(available[j]) < n // 2:\n                        continue\n                    tmp1 = set(available[i])\n                    tmp2 = set(available[j])\n                    tmp = tmp1 & tmp2\n                    for x in tmp:\n                        if len(tmp1) > n // 2:\n                            tmp1.remove(x)\n                            continue\n                        if len(tmp2) > n // 2:\n                            tmp2.remove(x)\n                            continue\n                    if len(tmp1) == len(tmp2) == n // 2 and len(tmp1 & tmp2) == 0:\n                        cnt = 2\n                        break\n            if cnt == 2:\n                break\n        results.append('YES' if cnt == 2 else 'NO')\n    print('\\n'.join(map(str, results)))\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ll = []\n    for i in range(5):\n        c = []\n        for j in range(n):\n            if l[j][i] == 1:\n                c.append(j + 1)\n        ll.append(c)\n    del l, c\n    z = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(ll[i]) >= n // 2 and len(ll[j]) >= n // 2:\n                s = set(ll[i]) | set(ll[j])\n                if len(s) == n:\n                    z = -1\n                    break\n        if z == -1:\n            break\n    if z == -1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = {'Monday': [], 'Tuesday': [], 'Wednesday': [], 'Thursday': [], 'Friday': []}\n    for i in range(n):\n        student = list(map(int, input().split()))\n        if student[0]:\n            days['Monday'].append(i)\n        if student[1]:\n            days['Tuesday'].append(i)\n        if student[2]:\n            days['Wednesday'].append(i)\n        if student[3]:\n            days['Thursday'].append(i)\n        if student[4]:\n            days['Friday'].append(i)\n    days = sorted(list(days.values()), key=len)\n    match = False\n    days = [i for i in days if len(i) >= n / 2]\n    for i in range(len(days)):\n        if match:\n            break\n        for j in range(i + 1, len(days)):\n            a = days[i]\n            b = days[j]\n            total = len(a) + len(b)\n            unique = len(set(days[i] + days[j]))\n            extra = total - unique\n            if total - extra >= n:\n                print('YES')\n                match = True\n                break\n    if not match:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    l = [[], [], [], [], []]\n    for i in range(n):\n        temp = 0\n        for j in input().split(' '):\n            if int(j) == 1:\n                l[temp].append(i)\n            temp += 1\n    final = []\n    for i in l:\n        if len(i) >= n / 2:\n            final.append(i)\n    for i in range(len(final) - 1):\n        for j in range(1, len(final)):\n            i1 = set(final[i])\n            i2 = set(final[j])\n            if len(i1.union(i2)) == n:\n                ans = 'YES'\n                break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for x in range(n):\n        temp = input().split()\n        arr.append(temp)\n    dicti = {}\n    dicti[0] = set()\n    dicti[1] = set()\n    dicti[2] = set()\n    dicti[3] = set()\n    dicti[4] = set()\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == '1':\n                dicti[j].add(i)\n    keys = []\n    for i in dicti:\n        if len(dicti[i]) >= n // 2:\n            keys.append(i)\n    flag = 0\n    for i in range(len(keys)):\n        for j in range(i + 1, len(keys)):\n            lol = dicti[keys[i]].intersection(dicti[keys[j]])\n            temp1 = n // 2 - (len(dicti[keys[i]]) - len(lol))\n            temp2 = n // 2 - (len(dicti[keys[j]]) - len(lol))\n            if temp1 + temp2 == len(lol):\n                flag = 1\n                break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "cases = int(input())\nfor _ in range(cases):\n    matrix = []\n    num = int(input())\n    for i in range(num):\n        arr = list(map(int, input().split()))\n        matrix.append(arr)\n    new_mat = [list(x) for x in zip(*matrix)]\n    sets = []\n    md = num // 2\n    for row in new_mat:\n        st = set((i for (i, num) in enumerate(row, start=1) if num == 1))\n        if len(st) >= md:\n            sets.append(st)\n    broken = False\n    if len(sets) < 2:\n        print('NO')\n        continue\n    for (i, s) in enumerate(sets):\n        for (j, s2) in enumerate(sets):\n            if i != j:\n                newst = s.union(s2)\n                if len(newst) == num and len(s) >= md and (len(s2) >= md):\n                    print('YES')\n                    broken = True\n                    break\n        if broken:\n            break\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = []\n    for _ in range(n):\n        week = input().split()\n        p.append(week)\n    possible = False\n    for d1 in range(4):\n        if possible:\n            break\n        for d2 in range(d1 + 1, 5):\n            cnt_d1 = 0\n            cnt_d2 = 0\n            cnt_d12 = 0\n            skip = False\n            for week in p:\n                if week[d1] == week[d2] == '1':\n                    cnt_d12 += 1\n                elif week[d1] == '1':\n                    cnt_d1 += 1\n                elif week[d2] == '1':\n                    cnt_d2 += 1\n                else:\n                    skip = True\n            if skip:\n                continue\n            if cnt_d1 <= n // 2 and cnt_d2 <= n // 2:\n                possible = True\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = [[] for _ in range(5)]\n    for id in range(n):\n        for (i, c) in enumerate(input().split()):\n            if c == '1':\n                s[i].append(id)\n    f = 0\n    for i in range(5):\n        if f:\n            break\n        for j in range(i + 1, 5):\n            s1 = set(s[i])\n            s2 = set(s[j])\n            if len(s1) >= n // 2 and len(s2) >= n // 2:\n                l = len(s1.intersection(s2))\n                d1 = 0 if len(s1) - l >= n // 2 else len(s1) - l - n // 2\n                d2 = 0 if len(s2) - l >= n // 2 else len(s2) - l - n // 2\n                if d1 + d2 + l >= 0:\n                    f = 1\n                    break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    c = [set(), set(), set(), set(), set()]\n    for i in range(n):\n        (b1, b2, b3, b4, b5) = map(lambda x: bool(int(x)), input().split())\n        if b1:\n            c[0].add(i)\n        if b2:\n            c[1].add(i)\n        if b3:\n            c[2].add(i)\n        if b4:\n            c[3].add(i)\n        if b5:\n            c[4].add(i)\n    f = 'NO'\n    for j in range(5):\n        for q in range(j + 1, 5):\n            if len(c[j]) >= n / 2 and len(c[q]) >= n / 2 and (c[j] | c[q] == set(range(n))):\n                f = 'YES'\n                break\n    print(f)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    students = []\n    for _ in range(n):\n        s = list(map(int, input().split(' ')))\n        students.append(s)\n    days = [0, 0, 0, 0, 0]\n    for s in students:\n        for x in range(5):\n            days[x] += s[x]\n\n    def check(d1, d2):\n        n1 = 0\n        n2 = 0\n        n12 = 0\n        for s in students:\n            if s[d1] and s[d2]:\n                n12 += 1\n            elif s[d1]:\n                n1 += 1\n            elif s[d2]:\n                n2 += 1\n            else:\n                return False\n        if n12 + n1 + n2 != n:\n            return False\n        if max(n1, n2) - min(n1, n2) > n12:\n            return False\n        n12 -= max(n1, n2) - min(n1, n2)\n        if n12 % 2:\n            return False\n        return True\n    res = False\n    while 1:\n        if res:\n            break\n        top = max(days)\n        topD = days.index(top)\n        days[topD] = 0\n        if top < n // 2:\n            res = False\n            break\n        for d_i in range(5):\n            d = days[d_i]\n            if d < n // 2:\n                days[d_i] = 0\n            elif check(topD, d_i):\n                res = True\n                break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = []\n    s.append(set())\n    s.append(set())\n    s.append(set())\n    s.append(set())\n    s.append(set())\n    for i in range(n):\n        l = [int(x) for x in input().split()]\n        for j in range(5):\n            if l[j]:\n                s[j].add(i + 1)\n    flag = True\n    for i in range(4):\n        for j in range(i + 1, 5, 1):\n            intersectionLen = len(s[i] & s[j])\n            x1 = len(s[i]) - intersectionLen\n            x2 = len(s[j]) - intersectionLen\n            x1req = n // 2 - x1\n            x2req = n // 2 - x2\n            if x1req < 0 or x2req < 0:\n                continue\n            if x1req + x2req == intersectionLen:\n                print('YES')\n                flag = False\n                break\n        if not flag:\n            break\n    if flag:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    ok = False\n    for i in range(n):\n        a[i] = [int(x) for x in input().split(' ')]\n    for i in range(5):\n        for j in range(i + 1, 5):\n            ok = True\n            coui = 0\n            couj = 0\n            for k in range(n):\n                if a[k][i] == 1 and a[k][j] == 0:\n                    coui += 1\n                elif a[k][i] == 0 and a[k][j] == 1:\n                    couj += 1\n                elif a[k][i] == 0 and a[k][j] == 0:\n                    ok = False\n                    break\n            if coui > n / 2 or couj > n / 2:\n                ok = False\n            if ok:\n                break\n        if ok:\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    p = [(i, j) for i in range(5) for j in range(i + 1, 5)]\n    students = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        p = [(i, j) for (i, j) in p if a[i] or a[j]]\n        students.append(a)\n    for (i, j) in p:\n        (only_i, only_j) = (0, 0)\n        for a in students:\n            if a[i] and (not a[j]):\n                only_i += 1\n            elif a[j] and (not a[i]):\n                only_j += 1\n        if only_j <= n // 2 and only_i <= n // 2:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    s = [sum([l[i][j] for i in range(n)]) for j in range(5)]\n    c = []\n    for i in range(5):\n        if s[i] >= n // 2:\n            c.append(i)\n    if len(c) < 2:\n        print('NO')\n    else:\n        possible = False\n        x = []\n        for i in c:\n            x.append([l[j][i] for j in range(n)])\n        for i in range(len(x) - 1):\n            for j in range(i + 1, len(x)):\n                (onei, onej, both) = (0, 0, 0)\n                for k in range(n):\n                    if x[i][k] + x[j][k] == 0:\n                        break\n                    if x[i][k] + x[j][k] == 2:\n                        both += 1\n                    elif x[i][k] == 1:\n                        onei += 1\n                    else:\n                        onej += 1\n                if onei + onej + both < n:\n                    continue\n                if onei + both >= n // 2 and onej + both >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        print('YES' if possible else 'NO')", "num_cases = int(input())\nfor _ in range(num_cases):\n    num_students = int(input())\n    students_per_group = num_students // 2\n    set1 = set()\n    set2 = set()\n    set3 = set()\n    set4 = set()\n    set5 = set()\n    for i in range(num_students):\n        avail = [True if each == '1' else False for each in input().split(' ')]\n        if avail[0]:\n            set1.add(i)\n        if avail[1]:\n            set2.add(i)\n        if avail[2]:\n            set3.add(i)\n        if avail[3]:\n            set4.add(i)\n        if avail[4]:\n            set5.add(i)\n    sets = [set1, set2, set3, set4, set5]\n    solved = False\n    for i in range(5):\n        for j in range(5):\n            if i == j:\n                continue\n            a = sets[i]\n            b = sets[j]\n            if len(a | b) != num_students:\n                continue\n            both = a & b\n            a_only = a - b\n            b_only = b - a\n            a_requires = max(0, students_per_group - len(a_only))\n            b_requires = max(0, students_per_group - len(b_only))\n            num_both = len(both)\n            num_both -= a_requires\n            num_both -= b_requires\n            if num_both >= 0:\n                print('YES')\n                solved = True\n                break\n        if solved:\n            break\n    if not solved:\n        print('NO')", "t = int(input())\nfor ti in range(t):\n    l = int(input())\n    ss = []\n    ds = [[] for _ in range(5)]\n    for si in range(l):\n        rd = [int(x) for x in input().split()]\n        ss.append(rd)\n        [ds[i].append(c) for (i, c) in enumerate(rd)]\n\n    def test(ss, ds):\n        ssum = [sum((s[i] for s in ss)) for i in range(5)]\n        for i1 in range(5):\n            if ssum[i1] < l // 2:\n                continue\n            for i2 in range(i1 + 1, 5):\n                if ssum[i2] < l // 2:\n                    continue\n                for (a, b) in zip(ds[i1], ds[i2]):\n                    if a == 0 and b == 0:\n                        break\n                else:\n                    return True\n        return False\n    print('YES' if test(ss, ds) else 'NO')", "for _ in range(int(input())):\n    dic = {1: [], 2: [], 3: [], 4: [], 5: []}\n    n = int(input())\n    for j in range(n):\n        lst = list(map(int, input().split()))\n        for i in range(len(lst)):\n            if lst[i] == 1:\n                dic[i + 1].append(j + 1)\n    val = list(dic.values())\n    c = 0\n    for i in range(len(val) - 1):\n        nst = []\n        for j in range(i + 1, len(val)):\n            if len(val[i]) >= n // 2 and len(val[j]) >= n // 2:\n                nst = val[i] + val[j]\n                if len(set(nst)) == n:\n                    print('YES')\n                    c = 1\n                    break\n        if c == 1:\n            break\n    if c == 0:\n        print('NO')", "import itertools\nt = int(input())\nfor i in range(t):\n    available_list = [[] for i in range(5)]\n    possible_day_index = set()\n    n = int(input())\n    for u in range(1, n + 1):\n        available_status_student = list(map(int, input().split()))\n        for j in range(5):\n            if available_status_student[j] != 0:\n                available_list[j].append(u)\n    for days_index in range(0, 5):\n        if len(available_list[days_index]) >= int(n / 2):\n            possible_day_index.add(days_index)\n    possible_answer = list(itertools.combinations(possible_day_index, 2))\n    if len(possible_day_index) < 2:\n        print('NO')\n        continue\n    else:\n        for possible_element in possible_answer:\n            a = set(available_list[possible_element[0]])\n            b = set(available_list[possible_element[1]])\n            if not len(a | b) == n:\n                continue\n            elif len(a) < n / 2 and len(b) < n / 2:\n                continue\n            else:\n                print('YES')\n                break\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    f = []\n    for i in range(5):\n        c = []\n        for j in range(n):\n            if l[j][i] == 1:\n                c.append(j + 1)\n        f.append(c)\n    del l, c\n    z = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(f[i]) >= n // 2 and len(f[j]) >= n // 2:\n                s = set(f[i]) | set(f[j])\n                if len(s) == n:\n                    z = -1\n                    break\n        if z == -1:\n            break\n    if z == -1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    f = []\n    for i in range(5):\n        c = []\n        for j in range(n):\n            if l[j][i] == 1:\n                c.append(j + 1)\n        f.append(c)\n    del l, c\n    z = 0\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if len(f[i]) >= n // 2 and len(f[j]) >= n // 2:\n                s = set(f[i]) | set(f[j])\n                if len(s) == n:\n                    z = -1\n                    break\n        if z == -1:\n            break\n    if z == -1:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nrespostas = []\nfor x in range(n):\n    m = int(input())\n    flag = False\n    dias = [[], [], [], [], []]\n    for z in range(m):\n        aluno = input().split(' ')\n        for k in range(5):\n            if aluno[k] == '1':\n                dias[k].append(z)\n    metade = m / 2\n    pos = []\n    for p in range(5):\n        if len(dias[p]) >= metade:\n            pos.append(dias[p])\n    for t in range(len(pos) - 1):\n        dia1 = pos[t]\n        for r in range(t + 1, len(pos)):\n            dia2 = pos[r]\n            common = list(set(dia1).intersection(dia2))\n            rest1 = list(set(dia1) ^ set(common))\n            rest2 = list(set(dia2) ^ set(common))\n            if len(rest1) + len(rest2) + len(common) == m:\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        respostas.append('YES')\n    else:\n        respostas.append('NO')\nfor y in range(n):\n    print(respostas[y])", "def printPossible(arr, n):\n    combination = []\n    counts = []\n    for i in range(5):\n        count = 0\n        for j in range(n):\n            count += arr[j][i]\n        if count >= n // 2:\n            combination.append(i)\n            counts.append(count)\n    for i in range(len(combination)):\n        for j in range(i + 1, len(combination)):\n            count = 0\n            for k in range(n):\n                count += arr[k][combination[i]] & arr[k][combination[j]]\n            remaining1 = counts[i] - count\n            remaining2 = counts[j] - count\n            if remaining1 >= remaining2:\n                temp = remaining1 + count - n // 2\n                if temp + remaining2 >= n // 2:\n                    print('YES')\n                    return\n            else:\n                temp = remaining2 + count - n // 2\n                if temp + remaining1 >= n // 2:\n                    print('YES')\n                    return\n    print('NO')\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = [0] * n\n        for j in range(n):\n            arr[j] = [int(num) for num in input().split()]\n        printPossible(arr, n)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    li = []\n    for i in range(5):\n        nli = []\n        for j in range(n):\n            if a[j][i] == 1:\n                nli.append(j + 1)\n        if len(nli) >= n // 2:\n            li.append(nli)\n    if len(li) >= 2:\n        y = 0\n        for i in range(len(li)):\n            for j in range(i + 1, len(li)):\n                nnli = li[i] + li[j]\n                nnli = set(nnli)\n                nnli = list(nnli)\n                if len(nnli) == n:\n                    y = 1\n        if y == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    f = []\n    se = []\n    t = []\n    fo = []\n    fi = []\n    n = int(input())\n    for j in range(n):\n        s = [int(x) for x in input().split()]\n        for i in range(5):\n            if s[i] == 1:\n                if i == 0:\n                    f.append(j)\n                elif i == 1:\n                    se.append(j)\n                elif i == 2:\n                    t.append(j)\n                elif i == 3:\n                    fo.append(j)\n                else:\n                    fi.append(j)\n    l = []\n    k = n // 2\n    if len(f) >= k:\n        l.append(f)\n    if len(se) >= k:\n        l.append(se)\n    if len(t) >= k:\n        l.append(t)\n    if len(fo) >= k:\n        l.append(fo)\n    if len(fi) >= k:\n        l.append(fi)\n    c = 0\n    l2 = set((x for x in range(n)))\n    for i in range(len(l)):\n        s = set(l[i])\n        for j in range(i + 1, len(l)):\n            s1 = set(l[j])\n            if len(s) >= k and len(s1) >= k and (s.union(s1) == l2):\n                print('YES')\n                c = 1\n                break\n        if c == 1:\n            break\n    else:\n        print('NO')", "from itertools import combinations\nfor _ in range(int(input())):\n    weekdays = []\n    for _ in range(5):\n        weekdays.append([])\n    n = int(input())\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        for j in range(5):\n            if arr[j] == 1:\n                weekdays[j].append(i + 1)\n    count = []\n    for i in range(5):\n        if len(weekdays[i]) >= int(n / 2):\n            count.append(i)\n    comb = combinations(count, 2)\n    for i in comb:\n        backup = len(weekdays[i[0]]) + len(weekdays[i[1]]) - n\n        setA = set(weekdays[i[0]])\n        setB = set(weekdays[i[1]])\n        inter = setA.intersection(setB)\n        if len(inter) <= backup:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = 'NO'\n    sum_list = [0] * 5\n    st_day = []\n    for _ in range(n):\n        temp = list(map(int, input().split()))\n        st_day.append(temp)\n        sum_list = [a + b for (a, b) in zip(temp, sum_list)]\n    for i in range(5):\n        if sum_list[i] < n // 2:\n            continue\n        for j in range(i + 1, 5):\n            if sum_list[j] < n // 2:\n                continue\n            answer = 'YES'\n            for student in st_day:\n                if student[i] + student[j] == 0:\n                    answer = 'NO'\n            if answer == 'YES':\n                break\n        if answer == 'YES':\n            break\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    half = n // 2\n    week = [[0, set({})], [0, set({})], [0, set({})], [0, set({})], [0, set({})]]\n    ref = []\n    flag = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for x in range(5):\n            if a[x]:\n                week[x][1].add(i)\n                week[x][0] += 1\n    for i in range(5):\n        if week[i][0] >= half:\n            for b in ref:\n                if n == len(b.union(week[i][1])):\n                    flag = 1\n                    break\n            ref.append(week[i][1])\n        if flag:\n            break\n    print('YES' if flag else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        y = [k for k in map(int, input().split())]\n        arr.append(y)\n    ok = False\n    for x in range(5):\n        for y in range(x + 1, 5):\n            a = 0\n            b = 0\n            ab = 0\n            for k in range(n):\n                if arr[k][x] == 1 and arr[k][y] == 1:\n                    ab += 1\n                elif arr[k][x] == 1:\n                    a += 1\n                elif arr[k][y] == 1:\n                    b += 1\n                else:\n                    break\n            if a + ab + b == n and a + ab >= n / 2 and (b + ab >= n / 2):\n                ok = True\n    print('YES' if ok else 'NO')", "def fun(n, ls):\n    for i in range(5):\n        for j in range(i + 1, 5):\n            prefer_i = 0\n            prefer_j = 0\n            both = 0\n            for k in range(n):\n                val1 = ls[k][i]\n                val2 = ls[k][j]\n                if val1 == 1 and val2 == 1:\n                    both += 1\n                    continue\n                if val1 == 1:\n                    prefer_i += 1\n                    continue\n                if val2 == 1:\n                    prefer_j += 1\n            if prefer_j == prefer_i and prefer_i >= n // 2:\n                print('YES')\n                return\n            maxx = max(prefer_j, prefer_i)\n            minn = min(prefer_j, prefer_i)\n            extra = maxx - minn\n            if both >= extra:\n                both -= extra\n                minn += extra\n                if both % 2 == 0:\n                    if maxx + both // 2 >= n // 2 and minn + both // 2 >= n // 2:\n                        print('YES')\n                        return\n    print('NO')\n    return\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ls = []\n    for _ in range(n):\n        lt = list(map(int, input().split()))\n        ls.append(lt)\n    fun(n, ls)", "def solve():\n    n = int(input())\n    try:\n        arr = []\n        for i in range(n):\n            a = list(map(int, input().split()))\n            arr.append(a)\n        flag = False\n        for i in range(5):\n            for j in range(i + 1, 5):\n                (g1, g2, both) = (0, 0, 0)\n                for k in range(n):\n                    if arr[k][i] == 1 and arr[k][j] == 1:\n                        both += 1\n                    else:\n                        if arr[k][i] == 1:\n                            g1 += 1\n                        if arr[k][j] == 1:\n                            g2 += 1\n                if g1 + g2 == n - both and g1 >= n // 2 - both and (g2 >= n // 2 - both):\n                    flag = True\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n    except EOFError as e:\n        print('Error')\nfor case in range(int(input())):\n    solve()", "def fun(n, ls):\n    for i in range(5):\n        for j in range(i + 1, 5):\n            prefer_i = 0\n            prefer_j = 0\n            both = 0\n            for k in range(n):\n                val1 = ls[k][i]\n                val2 = ls[k][j]\n                if val1 == 1 and val2 == 1:\n                    both += 1\n                    continue\n                if val1 == 1:\n                    prefer_i += 1\n                    continue\n                if val2 == 1:\n                    prefer_j += 1\n            if prefer_j == prefer_i and prefer_i >= n // 2:\n                print('YES')\n                return\n            maxx = max(prefer_j, prefer_i)\n            minn = min(prefer_j, prefer_i)\n            extra = maxx - minn\n            if both >= extra:\n                both -= extra\n                minn += extra\n                if both % 2 == 0:\n                    if maxx + both // 2 >= n // 2 and minn + both // 2 >= n // 2:\n                        print('YES')\n                        return\n    print('NO')\n    return\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ls = []\n    for _ in range(n):\n        lt = list(map(int, input().split()))\n        ls.append(lt)\n    fun(n, ls)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    flag = False\n    for x in range(5):\n        for y in range(x + 1, 5):\n            c1 = 0\n            c2 = 0\n            c3 = 0\n            for k in range(n):\n                if l[k][x] == 1 and l[k][y] == 1:\n                    c3 = c3 + 1\n                elif l[k][x] == 1:\n                    c1 = c1 + 1\n                elif l[k][y] == 1:\n                    c2 = c2 + 1\n                else:\n                    break\n            if c1 + c3 + c2 == n and c1 + c3 >= n / 2 and (c2 + c3 >= n / 2):\n                flag = True\n    if flag == True:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef f():\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, input().split(' '))))\n    for a in range(5):\n        for b in range(5):\n            if b == a:\n                continue\n            cnta = 0\n            cntb = 0\n            cntno = 0\n            for i in s:\n                if i[a] + i[b] == 0:\n                    cntno = 1\n                    break\n                if i[a] + i[b] == 2:\n                    pass\n                elif i[a] == 1:\n                    cnta += 1\n                elif i[b] == 1:\n                    cntb += 1\n            if cnta <= n // 2 and cntb <= n // 2 and (cntno == 0):\n                print('YES')\n                return\n    print('NO')\n    return\nwhile t:\n    f()\n    t -= 1", "import sys\ninput = sys.stdin.readline\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    matrix = []\n    for z in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    def solve():\n        for i in range(5):\n            for x in range(i + 1, 5):\n                (firstGroup, secondGroup, both) = (0, 0, 0)\n                for z in range(n):\n                    if matrix[z][i] and (not matrix[z][x]):\n                        firstGroup += 1\n                    if matrix[z][x] and (not matrix[z][i]):\n                        secondGroup += 1\n                    if matrix[z][x] and matrix[z][i]:\n                        both += 1\n                if firstGroup > n // 2 or secondGroup > n // 2:\n                    continue\n                if firstGroup + secondGroup + both == n:\n                    return 'YES'\n        return 'NO'\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    gr = []\n    ans = 'NO'\n    for i in range(n):\n        a = list(map(int, input().split()))\n        gr.append(a)\n    for i in range(5):\n        f = False\n        for j in range(i + 1, 5):\n            temp = [0] * n\n            flag = True\n            count1 = 0\n            count2 = 0\n            for k in range(n):\n                if gr[k][i] == 1:\n                    count1 += 1\n                if gr[k][j] == 1:\n                    count2 += 1\n                temp[k] = gr[k][i] + gr[k][j]\n                if temp[k] == 0:\n                    flag = False\n                    break\n            if flag and count1 >= n / 2 and (count2 >= n / 2):\n                ans = 'YES'\n                f = True\n                break\n        if f:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for g in range(n):\n        arr.append(input().split())\n    middle = n / 2\n    solve = False\n    for x in range(5):\n        y = x + 1\n        for y in range(y, 5):\n            sl = sr = sb = 0\n            for s in arr:\n                if s[x] == '0' and s[y] == '0':\n                    break\n                if s[x] == s[y]:\n                    sb += 1\n                elif s[x] == '1':\n                    sl += 1\n                else:\n                    sr += 1\n            while sl < middle and sb > 0:\n                sl += 1\n                sb -= 1\n            while sr < middle and sb > 0:\n                sr += 1\n                sb -= 1\n            if sl == sr and sl == middle:\n                solve = True\n    print('YES' if solve else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    db = {0: [0, set()], 1: [0, set()], 2: [0, set()], 3: [0, set()], 4: [0, set()]}\n    for i in range(n):\n        inp = [int(i) for i in input().split()]\n        for j in range(5):\n            if inp[j] == 1:\n                db[j][0] += 1\n                db[j][1].add(i)\n    pas = False\n    for i in range(4):\n        for j in range(i + 1, 5):\n            if db[i][0] < n // 2 or db[j][0] < n // 2:\n                continue\n            if len(db[i][1].union(db[j][1])) == n:\n                pas = True\n                break\n        if pas:\n            break\n    print('YES' if pas else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    data = []\n    for _ in range(n):\n        data.append(list(map(int, input().split())))\n    days = []\n    for j in range(5):\n        sumday = 0\n        for i in range(n):\n            sumday += data[i][j]\n        if sumday >= n / 2:\n            days.append(j)\n    if len(days) < 2:\n        print('NO')\n        continue\n    Possible = False\n    for i in range(len(days)):\n        for j in range(i + 1, len(days)):\n            students = [False] * n\n            for k in range(n):\n                students[k] = data[k][days[i]] or data[k][days[j]]\n            if all(students):\n                Possible = True\n                break\n        if Possible:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    sur = []\n    for i in range(n):\n        sur.append(list(map(str, input().split())))\n    choices = [(m1, m2) for m1 in range(5) for m2 in range(m1, 5) if m1 != m2]\n    for x in choices:\n        (m1, m2) = (x[0], x[1])\n        both = 0\n        (fir, sec) = (0, 0)\n        for y in sur:\n            if y[m1] == '1' and y[m2] == '1':\n                both += 1\n            elif y[m1] == '1':\n                fir += 1\n            elif y[m2] == '1':\n                sec += 1\n        if fir + sec + both == n and fir <= n // 2 and (sec <= n // 2):\n            print('YES')\n            break\n    else:\n        print('NO')"]