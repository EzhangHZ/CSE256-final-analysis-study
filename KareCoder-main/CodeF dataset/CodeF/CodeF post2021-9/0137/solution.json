["for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "i = int(input())\nf = []\nfor t in range(i):\n    q = input()\n    f.append((len(q) - 1) * 9 + int(q[0]))\n[print(a) for a in f]", "for n in [*open(0)][1:]:\n    print(9 * len(n) - 18 + int(n[0]))", "for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "import sys\n\ndef in_int():\n    return int(sys.stdin.readline())\n\ndef in_str():\n    return sys.stdin.readline().rstrip()\n\ndef in_map_int():\n    return map(int, sys.stdin.readline().split())\n\ndef in_arr_int():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef in_arr_str():\n    return sys.stdin.readline().split()\n\ndef is_prime(n):\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solve(n):\n    if n <= 9:\n        return n\n    if 9 < n <= 99:\n        return 9 + n // 10\n    if 99 < n <= 999:\n        return 18 + n // 100\n    if 999 < n <= 9999:\n        return 27 + n // 1000\n    if 9999 < n <= 99999:\n        return 36 + n // 10000\n    if 99999 < n <= 999999:\n        return 45 + n // 100000\n\ndef main():\n    t = in_int()\n    for _ in range(t):\n        n = in_int()\n        print(solve(n))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef print_str_line(str):\n    sys.stdout.write(str + '\\n')\n\ndef print_number(number):\n    print_str_line(f'{number}')\n\ndef ans(n):\n    ans_result = 0\n    factor = 10\n    while factor < n:\n        ans_result += 9\n        factor *= 10\n    ans_result += n // (factor // 10)\n    return ans_result\nnumber_of_inputs = int(input())\nfor i in range(number_of_inputs):\n    _input = int(input())\n    _ans = ans(_input)\n    print(_ans)", "for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "for (x, *r) in [*open(0)][1:]:\n    print(9 * len(r) - 9 + int(x))", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\n\ndef solve():\n    n = int(input())\n    ans = 9 * (len(str(n)) - 1) + int(str(n)[0])\n    print(ans)\nt = 1\nt = int(input())\nfor i in range(1, t + 1):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    m = len(str(n))\n    return n // pow(10, m - 1) + (m - 1) * 9\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    if n < 11:\n        res.append(n)\n        continue\n    if n < 101:\n        res.append(n // 10 - 1 + 10)\n        continue\n    if n < 1001:\n        res.append(n // 100 - 1 + 19)\n        continue\n    if n < 10001:\n        res.append(n // 1000 - 1 + 28)\n        continue\n    if n < 100001:\n        res.append(n // 10000 - 1 + 37)\n        continue\n    if n < 1000001:\n        res.append(n // 100000 - 1 + 46)\nfor j in res:\n    print(j)", "n = int(input())\narr = []\nfor i in range(n):\n    x = int(input())\n    if x < 10:\n        arr.append(x)\n    else:\n        total = 0\n        nearest = len(str(x)) - 1\n        x = int(x / 10 ** nearest)\n        total += nearest * 9\n        total += x\n        arr.append(total)\nfor i in arr:\n    print(i)", "t = int(input())\nloo = []\nfor i in range(t):\n    n = int(input())\n    if 1 <= n <= 9:\n        loo.append(n)\n    if 10 <= n <= 99:\n        loo.append(9 + n // 10)\n    if 100 <= n <= 999:\n        loo.append(18 + n // 100)\n    if 1000 <= n <= 9999:\n        loo.append(27 + n // 1000)\n    if 10000 <= n <= 99999:\n        loo.append(36 + n // 10000)\n    if 100000 <= n <= 999999:\n        loo.append(45 + n // 100000)\nfor i in range(t):\n    print(loo[i])", "import sys\ninput = sys.stdin.readline\n\ndef sol(n):\n    tmp = n\n    cnt = 0\n    while tmp >= 10:\n        cnt += 1\n        tmp //= 10\n    return cnt * 9 + tmp\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    print(sol(n))", "import math\nimport string\nfrom bisect import bisect, bisect_left, bisect_right\nfrom itertools import accumulate, combinations, permutations\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if n < 10:\n        print(n)\n    else:\n        l = len(str(n))\n        print(n // 10 ** (l - 1) + (l - 1) * 9)", "def main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = input()\n        result = (len(n) - 1) * 9 + int(n[0])\n        results.append(result)\n    return results\nresults = main()\nfor result in results:\n    print(result)", "import math\nimport sys\n\ndef solve():\n    input = sys.stdin.readline\n    n = int(input())\n    ans = min(n, 9) + min(n, 99) // 10 + min(n, 999) // 100 + min(n, 9999) // 1000 + min(n, 99999) // 10000 + min(n, 999999) // 100000 + min(n, 9999999) // 1000000 + min(n, 99999999) // 10000000 + min(n, 999999999) // 100000000 + min(n, 9999999999) // 1000000000\n    print(ans)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def main():\n    result = []\n    t = int(input())\n    for test in range(t):\n        n = [int(x) for x in input()]\n        extremely_round = n[0] + 9 * (len(n) - 1)\n        result.append(extremely_round)\n    print(*result, sep='\\n')\nmain()", "import math\nt = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    k = int(math.log10(n))\n    a = (n - n % 10 ** k) // 10 ** k\n    result.append(a + 9 * k)\nprint(*result, sep='\\n')", "import math\n\ndef ans(n):\n    if n <= 9:\n        return n\n    c = 0\n    k = n\n    while n != 0:\n        n = n // 10\n        c += 1\n    d = int(math.pow(10, c - 1))\n    return 9 * (c - 1) + k // d\nt = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append(ans(n))\nfor i in range(t):\n    print(l[i])", "import math\nlines = []\nt = int(input())\nx = 0\nwhile x < t:\n    y = int(input())\n    digits = int(math.log10(y)) + 1\n    if digits == 1:\n        z = y\n    else:\n        z = int(y / 10 ** (digits - 1))\n    n = 9 * (digits - 1) + z\n    x += 1\n    lines.append(n)\nfor n in lines:\n    print(n)", "import math\n\ndef round_nos(n):\n    j = int(math.log10(n))\n    k = n // 10 ** j + 9 * j\n    return k\nn = int(input())\nnums = []\nfor i in range(n):\n    nums.append(int(input()))\nfor no in nums:\n    print(round_nos(no))", "a = int(input())\nlist1 = []\nfor i in range(a):\n    n = int(input())\n    if n < 11:\n        list1.append(n)\n    elif n > 10 and n <= 100:\n        summa = n // 10 + 9\n        list1.append(summa)\n    elif n > 100 and n < 200:\n        n = str(n)\n        n = int(n[0]) + (len(n) - 1) * 9\n        list1.append(n)\n    elif n >= 200:\n        n = str(n)\n        n = int(n[0]) + (len(n) - 1) * 9\n        list1.append(n)\ni = 0\nfor i in range(len(list1)):\n    print(list1[i])", "import math\nimport sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfrom collections import deque\n\ndef test_case():\n    a = list(map(int, list(input())))\n    ans = 0\n    for i in range(len(a)):\n        if i == 0:\n            ans += a[i]\n        else:\n            ans += 9\n    print(ans)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        test_case()\nmain()", "import sys\ninput = sys.stdin.readline\nK = int(input())\nfor _ in range(K):\n    n = input().rstrip()\n    if len(n) == 1:\n        print(n)\n    else:\n        print((len(n) - 1) * 9 + int(n[0]))", "x = []\nn = int(input())\nfor i in range(n):\n    num = int(input())\n    a = str(num)[0]\n    if num <= 10:\n        x.append(num)\n    else:\n        b = len(str(num))\n        z = (b - 2) * 9 + 10 + int(a)\n        x.append(z - 1)\nfor item in x:\n    print(item)", "def superround(a):\n    s1 = 9 * (len(a) - 1)\n    s2 = int(a) // 10 ** (len(a) - 1)\n    return s1 + s2\n\ndef main():\n    t = int(input())\n    lst = []\n    for i in range(t):\n        n = int(input())\n        kolvo = superround(str(n))\n        lst.append(kolvo)\n    for item in lst:\n        print(item)\nmain()", "a = int(input())\nfor _ in range(a):\n    b = int(input())\n    if b > 100000:\n        print(45 + b // 100000)\n    elif b > 10000:\n        print(36 + b // 10000)\n    elif b > 1000:\n        print(27 + b // 1000)\n    elif b > 100:\n        print(18 + b // 100)\n    elif b > 10:\n        print(9 + b // 10)\n    else:\n        print(b)", "t = int(input())\niterlist = []\ni = 0\nwhile i < t:\n    n = input()\n    string_length = len(n)\n    if string_length == 1:\n        iterlist.append(int(n))\n    else:\n        a = 9 * (string_length - 1)\n        iterlist.append(a + int(n[0]))\n    i += 1\nj = 0\nwhile j < len(iterlist):\n    print(iterlist[j])\n    j += 1", "t = int(input())\nA = []\nfor i in range(t):\n    n = int(input())\n    m = n\n    cont = 0\n    if n < 10:\n        A.append(n)\n    else:\n        s = str(n)\n        n = n - int(s[1:])\n        ceros = str(n).count('0')\n        r = 9 * ceros + m // int(str(1) + '0' * ceros)\n        A.append(r)\nfor i in A:\n    print(i)", "def countDigit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\nt = int(input())\narr = []\nwhile t > 0:\n    n = int(input())\n    arr.append(n)\n    t -= 1\nprint('\\n')\nres = []\nfor i in arr:\n    if i <= 10:\n        res.append(i)\n    else:\n        base = 10 ** (countDigit(i) - 1)\n        modX = i - i % base\n        x = 9 * (countDigit(i) - 1) + modX // base\n        res.append(x)\nfor num in res:\n    print(num, end='\\n')", "import sys\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom collections import defaultdict as dd, deque, Counter\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom itertools import combinations\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf, log\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef iinp():\n    return int(inp())\n\ndef mp():\n    return map(int, inp().split())\n\ndef liinp():\n    return list(mp())\n\ndef ls():\n    return list(inp())\n\ndef out(arr):\n    return ' '.join(map(str, arr))\n\ndef out2D(arr):\n    return '\\n'.join((' '.join(map(str, n)) for n in arr))\n\ndef l1D(n, val=0):\n    return [val for _ in range(n)]\n\ndef l2D(n, m, val=0):\n    return [l1D(m, val) for _ in range(n)]\n\ndef solve(n):\n    if len(str(n)) == 1:\n        return n\n    return 9 + solve(n // 10)\ntc = iinp()\nfor _ in range(tc):\n    n = iinp()\n    print(solve(n))", "n = int(input())\nfor i in range(n):\n    k = input()\n    print(int(k[0]) + 9 * (len(k) - 1))", "t = int(input())\nfor _ in range(t):\n    n = input()\n    len_ = len(n)\n    if len_ == 1:\n        print(n)\n    else:\n        print(int(n[0]) + 9 * (len_ - 1))", "test = int(input())\nout = []\nfor i in range(test):\n    x = str(input())\n    count = 0\n    y = x[0]\n    for i in range(len(x) - 1):\n        y += '0'\n    if y[0] == '1':\n        zeros = len(y) - 1\n        count = zeros * 9 + 1\n    else:\n        count = int(y[0])\n        zeros = len(y) - 1\n        count = count + zeros * 9\n    out.append(count)\n    count = 0\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    n = input()\n    ans = int(n[0]) + (len(n) - 1) * 9\n    print(ans)", "import math\nimport sys\nimport re\nlines = sys.stdin.readlines()\nnums = []\nfor (line_index, line) in enumerate(lines):\n    if line_index == 0:\n        NUM_EFFECTIVE_LINES = int(re.fullmatch('(\\\\d+)\\n', line)[1])\n        continue\n    p = '(\\\\d+)\\n'\n    m = re.fullmatch(p, line)\n    n = m[1]\n    nums += [n]\nassert len(nums) == NUM_EFFECTIVE_LINES\n\ndef solve(n):\n    num_digits = len(n)\n    high_digit_val = int(n[0])\n    return (num_digits - 1) * 9 + high_digit_val\nfor n in nums:\n    ans = solve(n)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = input()\n    l = len(n)\n    ans = 0\n    ans += int(n[0])\n    l -= 1\n    ans += 9 * l\n    print(ans)\n    t -= 1", "for hm in range(int(input())):\n    a = input()\n    b = len(a)\n    x = 0\n    j = a[0]\n    print(9 * (b - 1) + int(j))", "for _ in range(int(input())):\n    n = int(input())\n    if n <= 10:\n        print(n)\n    elif n < 100:\n        print(9 + n // 10)\n    elif n < 1000:\n        print(18 + n // 100)\n    elif n < 10000:\n        print(27 + n // 1000)\n    elif n < 100000:\n        print(36 + n // 10000)\n    elif n < 1000000:\n        print(45 + n // 100000)", "for _ in range(int(input())):\n    n = input()\n    if len(n) == 1:\n        print(n)\n        continue\n    print((len(n) - 1) * 9 + int(n[0]))", "t = int(input())\n\ndef solve(n):\n    k = len(n)\n    return (k - 1) * 9 + int(n[0])\nfor i in range(t):\n    print(solve(input()))", "for _ in range(int(input())):\n    a = input()\n    b = 9 * (len(a) - 1) + int(a[0])\n    print(b)", "for t in range(int(input())):\n    x = int(input())\n    count = 0\n    while x > 10:\n        count += 9\n        x = x // 10\n    count += x\n    print(count)", "class Finding_round:\n\n    def round(t):\n        for i in range(t):\n            x = int(input())\n            count = 0\n            while x > 10:\n                count += 9\n                x = x // 10\n            print(count + x)\nt = int(input())\nFinding_round.round(t)", "for loop in range(int(input())):\n    n = input()\n    print((len(n) - 1) * 9 + int(n[0]))", "t = int(input())\nfor _ in range(t):\n    n_str = input()\n    n = int(n_str)\n    if n <= 10:\n        print(n)\n    else:\n        print(9 * (len(n_str) - 1) + int(n_str[0]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    cnt = 0\n    a = str(n)\n    if n > 0 and n < 10:\n        print(n)\n    else:\n        print(9 + int(a[0]) + (len(a) - 2) * 9)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    if n <= 10:\n        ans = n\n    elif n <= 100:\n        ans = 10 + (n // 10 - 1)\n    elif n <= 1000:\n        ans = 19 + (n // 100 - 1)\n    elif n <= 10000:\n        ans = 28 + (n // 1000 - 1)\n    elif n <= 100000:\n        ans = 37 + (n // 10000 - 1)\n    elif n <= 1000000:\n        ans = 46 + (n // 100000 - 1)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n <= 10:\n        result = n\n    elif n <= 100 and n > 10:\n        result = 10 + int(n / 10) - 1\n    elif n <= 1000 and n > 100:\n        result = 19 + int(n / 100) - 1\n    elif n <= 10000 and n > 1000:\n        result = 28 + int(n / 1000) - 1\n    elif n <= 100000 and n > 10000:\n        result = 37 + int(n / 10000) - 1\n    elif n <= 1000000 and n > 100000:\n        result = 46 + int(n / 100000) - 1\n    print(result)", "t = int(input())\nfor k in range(t):\n    n = input()\n    k = len(n)\n    print(int(n[0]) + (k - 2) * 9 + 9)", "for i in range(int(input())):\n    n = int(input())\n    n = str(n)\n    l = len(n)\n    ans = int(n[0]) + (len(n) - 1) * 9\n    print(ans)", "t = int(input())\nwhile t:\n    n = input()\n    if len(n) == 1:\n        print(n)\n    elif len(n) == 2:\n        print(9 + int(n) // 10)\n    elif len(n) == 3:\n        print(18 + int(n) // 100)\n    elif len(n) == 4:\n        print(27 + int(n) // 1000)\n    elif len(n) == 5:\n        print(36 + int(n) // 10000)\n    elif len(n) == 6:\n        print(45 + int(n) // 100000)\n    t -= 1", "n = int(input())\nfor _ in range(n):\n    x = int(input())\n    if x < 10:\n        print(x)\n    else:\n        s = str(x)\n        h = (len(s) - 1) * 9 + int(s[0])\n        print(h)", "t = int(input())\nfor tt in range(t):\n    n = input()\n    count = (len(n) - 1) * 9 + int(n[0])\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 10:\n        print(n)\n    elif n < 100:\n        print(9 + n // 10)\n    elif n < 1000:\n        print(18 + n // 100)\n    elif n < 10000:\n        print(27 + n // 1000)\n    elif n < 100000:\n        print(36 + n // 10000)\n    else:\n        print(45 + n // 100000)", "for _ in range(int(input())):\n    s = input()\n    l = len(s) - 1\n    print(l * 9 + int(s[0]))", "def count_extremely_round_int(n):\n    count = 0\n    while n > 9:\n        count += 9\n        n = n // 10\n    return count + n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(count_extremely_round_int(n))", "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(int(n[0]) + 9 * (len(n) - 1))", "t = int(input())\nfor i in range(t):\n    n = input()\n    print(int(n[0]) + (len(n) - 1) * 9)", "n = int(input())\nfor i in range(n):\n    n1 = input()\n    print(int(n1[0]) + 9 * (len(n1) - 1))", "def sol():\n    n = input()\n    l = len(str(n))\n    ans = 9 * (l - 1) + int(n[0])\n    print(ans)\n    return\nfor i in range(int(input())):\n    sol()", "t = int(input())\nwhile t:\n    t -= 1\n    n = input()\n    ans = (len(n) - 1) * 9 + int(n[0])\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = input()\n    print(int(n[0]) + (len(n) - 1) * 9)", "for _ in range(int(input())):\n    n = input()\n    x = len(n) - 1\n    print(9 * x + int(n) // 10 ** x)", "for __ in range(int(input())):\n    n = input()\n    print(int(n[0]) + (len(n) - 1) * 9)", "for _ in range(int(input())):\n    number = input()\n    power = len(number) - 1\n    result = int(number) // 10 ** power + power * 9\n    print(result)", "for _ in range(int(input())):\n    a = input()\n    n = len(a)\n    print(9 * (n - 1) + int(a[0]))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n <= 9:\n        print(n)\n        continue\n    print(int(math.log10(n)) * 9 + int(str(n)[0]))", "t = int(input())\nfor _ in range(t):\n    n = input()\n    super_round_cnt = (len(n) - 1) * 9 + int(n[0])\n    print(super_round_cnt)", "for _ in range(int(input())):\n    n = input()\n    print((len(n) - 1) * 9 + int(n[0]))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    n = str(n)\n    size_n = len(n)\n    first_ch = n[0]\n    diff = int(int(first_ch) - int(0))\n    print(diff + 9 * size_n - 9)", "x = int(input())\nfor i in range(0, x):\n    y = input()\n    x = int(y[0])\n    z = len(y)\n    if z == 1:\n        print(y)\n    else:\n        z = z - 1\n        ans = 9 * z + x\n        print(ans)", "t = int(input())\nfor i in range(0, t):\n    n = input()\n    print(9 * len(n) + int(n[0]) - 9)", "for _ in range(int(input())):\n    n = input()\n    print(int(n[0]) + 9 * (len(n) - 1))", "t = int(input())\nfor i in range(t):\n    s = input()\n    print(int(s[0]) + 9 * (len(s) - 1))", "t = int(input())\nfor _ in range(t):\n    x = input()\n    res = (len(x) - 1) * 9 + int(x[0])\n    print(res)", "for _ in range(int(input())):\n    a = input()\n    print(9 * (len(a) - 1) + int(a[0]))", "t = int(input())\nwhile t > 0:\n    n = input()\n    l = len(n)\n    ans = 0\n    ans += int(n[0])\n    l -= 1\n    ans += 9 * l\n    print(ans)\n    t -= 1", "for i in range(int(input())):\n    n = input()\n    print(9 * (len(n) - 1) + int(n[0]))", "def super_circ():\n    AmmccYy = 0\n    AmZx = int(input())\n    for i in range(AmZx):\n        AmZx1 = str(input())\n        AmZ_x = list(AmZx1)\n        AmZx1 = int(AmZx1)\n        if AmZx1 < 10:\n            print(AmZx1)\n        else:\n            print(int(AmZ_x[0]) + (len(AmZ_x) - 1) * 9)\nsuper_circ()", "t = int(input())\nfor i in range(t):\n    n = input()\n    print(9 * (len(n) - 1) + int(n[0]))", "n = int(input())\nfor i in range(n):\n    s = input()\n    x = len(s)\n    print((x - 1) * 9 + int(s[0]))", "number_of_test_cases = int(input())\nfor i in range(number_of_test_cases):\n    number = int(input())\n    if number <= 10:\n        print(number)\n    else:\n        if number <= 100:\n            number = number // 10 + 9\n        elif number <= 1000:\n            number = number // 100 + 18\n        elif number <= 10000:\n            number = number // 1000 + 27\n        elif number <= 100000:\n            number = number // 10000 + 36\n        else:\n            number = number // 100000 + 45\n        print(number)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    l = len(n)\n    ans = (l - 1) * 9 + int(n[0])\n    print(ans)", "for i in range(int(input())):\n    n = input()\n    print(int(n[0]) + (len(n) - 1) * 9)", "for _ in range(int(input())):\n    a = int(input())\n    if a <= 10:\n        print(a)\n    elif a <= 100:\n        print(9 + a // 10)\n    elif a <= 1000:\n        print(18 + a // 100)\n    elif a <= 10000:\n        print(27 + a // 1000)\n    elif a <= 100000:\n        print(36 + a // 10000)\n    elif a <= 1000000:\n        print(45 + a // 100000)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    answer = 0\n    if n > 10:\n        answer += 10\n    else:\n        answer += n\n        print(answer)\n        continue\n    if n > 100:\n        answer += 9\n    else:\n        answer += (n - 10) // 10\n        print(answer)\n        continue\n    if n > 1000:\n        answer += 9\n    else:\n        answer += (n - 100) // 100\n        print(answer)\n        continue\n    if n > 10000:\n        answer += 9\n    else:\n        answer += (n - 1000) // 1000\n        print(answer)\n        continue\n    if n > 100000:\n        answer += 9\n    else:\n        answer += (n - 10000) // 10000\n        print(answer)\n        continue\n    if n > 1000000:\n        answer += 9\n    else:\n        answer += (n - 100000) // 100000\n        print(answer)\n        continue\n    print(answer)", "def compute(num):\n    n = len(num)\n    out = 0\n    if n == 1:\n        return num\n    out += (n - 1) * 9\n    out += int(num[0])\n    return out\nt = int(input())\nfor i in range(t):\n    num = input()\n    out = compute(num)\n    print(out)", "for i in range(int(input())):\n    x = input()\n    print(ord(x[0]) - ord('0') + (len(x) - 1) * 9)", "for _ in range(int(input())):\n    n = int(input())\n    if n // 10 == 0:\n        print(n)\n    elif n // 100 == 0:\n        print(9 + int(n / 10))\n    else:\n        l = len(str(n))\n        n1 = int(str(n)[0])\n        print(n1 + (l - 1) * 9)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = 9\n    if n < 10:\n        print(n)\n    elif n < 100:\n        print(9 + n // 10)\n    elif n < 1000:\n        print(9 + 9 + n // 100)\n    elif n < 10000:\n        print(9 + 9 + 9 + n // 1000)\n    elif n < 100000:\n        print(9 + 9 + 9 + 9 + n // 10000)\n    else:\n        print(9 + 9 + 9 + 9 + 9 + n // 100000)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if 1 <= n <= 9:\n        print(n)\n    elif 10 <= n <= 99:\n        print(9 + n // 10)\n    elif 100 <= n <= 999:\n        print(9 + 9 + n // 100)\n    elif 1000 <= n <= 9999:\n        print(9 + 9 + 9 + n // 1000)\n    elif 10000 <= n <= 99999:\n        print(9 * 4 + n // 10000)\n    elif 100000 <= n <= 999999:\n        print(9 * 5 + n // 100000)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    digits = int(math.log10(n))\n    print(digits * 9 + int(n / 10 ** digits))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 11:\n        print(n)\n    elif n > 100 and n <= 1000:\n        print(9 + 9 + int(n / 100))\n    elif n > 1000 and n <= 10000:\n        print(9 + 9 + 9 + int(n / 1000))\n    elif n > 10000 and n <= 100000:\n        print(9 + 9 + 9 + 9 + int(n / 10000))\n    elif n > 100000 and n <= 1000000:\n        print(9 + 9 + 9 + 9 + 9 + int(n / 100000))\n    elif n > 1000000 and n <= 10000000:\n        print(9 + 9 + 9 + 9 + 9 + 9 + int(n / 1000000))\n    else:\n        print(9 + int(n / 10))", "def solution():\n    n = int(input())\n    num = n\n    pow = -1\n    while num:\n        num //= 10\n        pow += 1\n    ans = 9 * pow + n // 10 ** pow % 10\n    print(ans)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "t = int(input())\nfor i in range(t):\n    n = str(input())\n    print(int(n[0]) + (len(n) - 1) * 9)"]