["def main():\n    for _ in range(int(input())):\n        problem()\n\ndef problem():\n    (n, k) = map(int, input().split())\n    weights = list(map(int, input().split()))\n    cost = sum((w // k for w in weights))\n    weights = [w % k for w in weights]\n    weights.sort()\n    (i, j) = (0, n - 1)\n    while i < j:\n        if weights[i] + weights[j] >= k:\n            cost += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    print(cost)\nimport sys\ninput = sys.stdin.readline\nexit(main())", "from sys import stdin, stdout, setrecursionlimit\nimport collections\nimport math\nfrom collections import deque\n\ndef test():\n    return\n\ndef solve():\n    return\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        ans = 0\n        d = []\n        for i in l:\n            ans += i // k\n            d.append(i % k)\n        d.sort()\n        l = n - 1\n        for i in range(n):\n            if i < l:\n                if (d[i] + d[l]) // k >= 1:\n                    ans += (d[i] + d[l]) // k\n                    l -= 1\n        print(ans)\n    return\ninput = stdin.readline\nmain()", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    a = input().split()\n    (n, k) = (int(a[0]), int(a[1]))\n    data = [int(i) for i in input().split()]\n    q.append((n, k, data))\n\ndef solve(n, k, data):\n    pay = 0\n    lefts = []\n    for d in data:\n        pay += d // k\n        lefts.append(d % k)\n    lefts = sorted(lefts)\n    l = 0\n    r = n - 1\n    while l < r:\n        if lefts[l] + lefts[r] >= k:\n            l += 1\n            r -= 1\n            pay += 1\n        else:\n            l += 2\n    print(pay)\nfor (n, k, data) in q:\n    solve(n, k, data)", "from sys import stdin\nfrom bisect import bisect_left as bl\ninput = stdin.readline\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    package = list(map(int, input().split()))\n    rem = sorted((i % k for i in package))\n    package = [i // k for i in package]\n    s = sum(package)\n    left = bl(rem, 1)\n    for right in range(n - 1, -1, -1):\n        while left < right and rem[left] + rem[right] < k:\n            left += 1\n        if left < right:\n            s += 1\n        else:\n            break\n        left += 1\n    print(s)", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += A[i] // k\n        A[i] = A[i] % k\n    A.sort()\n    (i, j) = (0, n - 1)\n    while i < j:\n        net = A[i] + A[j]\n        if net < k:\n            i += 1\n        else:\n            ans += 1\n            i += 1\n            j -= 1\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ans = sum((_ // k for _ in a))\n    m = [_ % k for _ in a]\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "def solve(arr, k):\n    res = 0\n    for i in range(len(arr)):\n        res += arr[i] // k\n        arr[i] %= k\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while right > left:\n        if arr[right] + arr[left] >= k:\n            res += 1\n            right -= 1\n            left += 1\n        else:\n            left += 1\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = solve(arr, k)\n    print(res)", "def res(n, k, a):\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] >= k:\n            ans += 1\n            j -= 1\n        i += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    print(res(n, k, a))", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    (l, r) = (0, n - 1)\n    while l < r:\n        if a[l] + a[r] < k:\n            l += 1\n            continue\n        ans += 1\n        l += 1\n        r -= 1\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ans = sum([_ // k for _ in a])\n    m = [_ % k for _ in a]\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    ans = sum((_ // k for _ in a))\n    m = [_ % k for _ in a]\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    i = 0\n    a = [None] * n\n    m = [None] * n\n    for c in input().split(' '):\n        t = int(c)\n        a[i] = t // k\n        m[i] = t % k\n        i += 1\n    ans = sum(a)\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    i = 0\n    m = [None] * n\n    ans = 0\n    for c in input().split(' '):\n        t = int(c)\n        ans += t // k\n        m[i] = t % k\n        i += 1\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    i = 0\n    m = [None] * n\n    ans = 0\n    for c in input().split(' '):\n        t = int(c)\n        ans += t // k\n        m[i] = t % k\n        i += 1\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "tc = int(input())\nfor t in range(tc):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cost = sum((w // k for w in arr))\n    weights = [w % k for w in arr]\n    weights.sort()\n    weights.sort()\n    (i, j) = (0, n - 1)\n    while i < j:\n        if weights[i] + weights[j] >= k:\n            cost += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    print(cost)", "x = int(input())\n\ndef cal(n, m, s):\n    res = 0\n    for i in range(n):\n        res += s[i] // m\n        s[i] = s[i] % m\n    (i, j) = (0, n - 1)\n    s.sort()\n    while i < j:\n        if s[i] + s[j] < m:\n            i += 1\n            continue\n        else:\n            res += 1\n            i += 1\n            j -= 1\n    return res\nfor jj in range(x):\n    (n, m) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(n, m, arr))", "from collections import deque\n\ndef solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = 0\n    M = []\n    for a in A:\n        ans += a // k\n        M.append(a % k)\n    M.sort()\n    que = deque()\n    for m in M:\n        if que and que[-1] + m >= k:\n            ans += 1\n            que.pop()\n        else:\n            que.append(m)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def f():\n    nk = list(map(int, input().split()))\n    n = nk[0]\n    k = nk[1]\n    a = list(map(int, input().split()))\n    start = 0\n    end = n - 1\n    a = sorted(a, key=lambda x: x % k)\n    b = [x % k for x in a]\n    result = 0\n    while start < end:\n        if b[end] + b[start] >= k:\n            result += (a[start] + a[end]) // k\n            end -= 1\n            start += 1\n        else:\n            result += a[start] // k\n            start += 1\n    if start == end:\n        result += a[start] // k\n    return result\nt = input()\nfor i in range(int(t)):\n    print(f())", "import sys\nimport collections\nimport bisect\nimport math\nfrom functools import lru_cache\nfor _ in range(int(input())):\n    (n, k) = list(map(int, sys.stdin.readline().split()))\n    arr = list(map(int, sys.stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        res += arr[i] // k\n        arr[i] = arr[i] % k\n    arr.sort()\n    j = n - 1\n    for i in range(n):\n        if j > i and arr[i] + arr[j] >= k:\n            res += 1\n            j -= 1\n        if i >= j:\n            break\n    print(res)", "import sys\nimport threading\nfrom collections import defaultdict\nfrom collections import Counter\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nfrom collections import deque\nimport heapq\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    cases = inp()\n    for case in range(cases):\n        (leng, k) = inlt()\n        arr = inlt()\n        total = 0\n        for index in range(len(arr)):\n            total += arr[index] // k\n            arr[index] = arr[index] % k\n        arr.sort()\n        (left, right) = (0, len(arr) - 1)\n        while left < right:\n            while left < right and arr[left] + arr[right] < k:\n                left += 1\n            if left < right:\n                total += 1\n                right -= 1\n                left += 1\n        print(total)\nmain()", "from collections import deque\n\ndef solve():\n    (n, k) = map(int, input().split())\n    inp = [int(i) for i in input().split()]\n    res = 0\n    for (i, v) in enumerate(inp):\n        res += v // k\n        inp[i] %= k\n    inp.sort(reverse=True)\n    q = deque(inp)\n    while q:\n        a = q.popleft()\n        while q:\n            b = q.pop()\n            if a + b >= k:\n                res += 1\n                break\n    return res\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\n    return\nmain()", "from sys import stdin\nfrom bisect import bisect_left as bl\ninput = stdin.readline\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    package = list(map(int, input().split()))\n    rem = sorted((i % k for i in package))\n    package = [i // k for i in package]\n    s = sum(package)\n    left = bl(rem, 1)\n    for right in range(n - 1, -1, -1):\n        left = max(left, bl(rem, k - rem[right]))\n        while left < right and rem[left] + rem[right] < k:\n            left += 1\n        if left < right:\n            s += 1\n        else:\n            break\n        left += 1\n    print(s)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    i = 0\n    m = [None] * n\n    ans = 0\n    for c in input().split(' '):\n        t = int(c)\n        ans += t // k\n        m[i] = t % k\n        i += 1\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x % k for x in a]\n    b.sort()\n    s = sum(a)\n    i = 0\n    j = n - 1\n    while i < j:\n        if b[i] + b[j] >= k:\n            s -= b[i] + b[j] - k\n            j -= 1\n        else:\n            s -= b[i]\n        i += 1\n    if i == j:\n        s -= b[i]\n    print(int(s / k))", "li = lambda : list(map(int, input().split()))\nlis = lambda : sorted(list(map(int, input().split())))\nmp = lambda : map(int, input().split())\nit = lambda : int(input())\nst = lambda : str(input())\nfrom collections import Counter\n\ndef twopointers(A, N, X):\n    i = 0\n    j = N - 1\n    while i < j:\n        if A[i] + A[j] == X:\n            return True\n        elif A[i] + A[j] < X:\n            i += 1\n        else:\n            j -= 1\n    return 0\n\ndef shortest_path(k, n, neighbors):\n    mark = [-1] * (n + 1)\n    mark[k] = 0\n    bfs_queue = [k]\n    i = 0\n    while i < len(bfs_queue):\n        u = bfs_queue[i]\n        for v in neighbors[u]:\n            if mark[v] == -1:\n                mark[v] = mark[u] + 1\n                bfs_queue.append(v)\n        i += 1\n    return mark\nimport math\n\ndef main():\n    (a, b) = mp()\n    c = li()\n    ans = 0\n    ccc = []\n    for i in range(a):\n        ans += c[i] // b\n        ccc.append(c[i] % b)\n    ccc.sort()\n    l = 0\n    r = a - 1\n    while l < r:\n        if ccc[l] + ccc[r] >= b:\n            ans += (ccc[l] + ccc[r]) // b\n            r -= 1\n            l += 1\n        else:\n            l += 1\n    print(ans)\nfor __ in range(it()):\n    main()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    t = []\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        if a[i] % k:\n            t.append(a[i] % k)\n    t.sort()\n    l = 0\n    r = len(t) - 1\n    while l < r:\n        if t[l] + t[r] >= k:\n            ans += 1\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in a:\n        ans += i // k\n    remainders = [i % k for i in a]\n    remainders.sort()\n    (p1, p2) = (0, n - 1)\n    while p1 < p2:\n        if remainders[p1] + remainders[p2] >= k:\n            ans += 1\n            p1 += 1\n            p2 -= 1\n        elif remainders[p1] + remainders[p2] < k:\n            p1 += 1\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    r = 0\n    a = []\n    for x in R():\n        r += x // k\n        a += (x % k,)\n    a.sort()\n    i = 0\n    n -= 1\n    while i < n:\n        if a[i] + a[n] >= k:\n            r += 1\n            n -= 1\n        i += 1\n    print(r)", "class PriceMaximization:\n\n    def maximize(self, n, k, a):\n        result = 0\n        remainderList = []\n        for i in a:\n            result += i // k\n            l = i % k\n            if l:\n                remainderList.append(l)\n        remainderList.sort()\n        n1 = len(remainderList)\n        leftPointer = 0\n        rightPointer = n1 - 1\n        while leftPointer < rightPointer:\n            if remainderList[leftPointer] + remainderList[rightPointer] >= k:\n                result += 1\n                leftPointer += 1\n                rightPointer -= 1\n            else:\n                leftPointer += 1\n        print(result)\n        return\nT = int(input())\nwhile T:\n    T -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    PriceMaximization().maximize(n, k, a)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    amodk = sorted((a[i] % k for i in range(n)))\n    summ = sum((a[i] // k for i in range(n)))\n    p = 0\n    i = n - 1\n    while p < i:\n        biggest = amodk[i]\n        while p < i and amodk[p] + biggest < k:\n            p += 1\n        if p < i:\n            summ += 1\n        i -= 1\n        p += 1\n    print(summ)", "test_case = int(input())\nfor _ in range(test_case):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = sum([a[i] // k for i in range(n)])\n    a = sorted(list(map(lambda x: x % k, a)))\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < j and a[i] + a[j] < k:\n            i += 1\n        if i < j:\n            ans += 1\n        i += 1\n        j -= 1\n    print(ans)", "test_case = int(input())\nfor _ in range(test_case):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = sum([a[i] // k for i in range(n)])\n    a = sorted(list(map(lambda x: x % k, a)))\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < j and a[i] + a[j] < k:\n            i += 1\n        if i < j:\n            ans += 1\n        i += 1\n        j -= 1\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    r = 0\n    a = []\n    for x in R():\n        r += x // k\n        a += (x % k,)\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(r + n - j - 1)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    res = 0\n    rem = []\n    for i in a:\n        res += i // k\n        rem.append(i % k)\n    rem.sort()\n    (l, r) = (0, n - 1)\n    while r > l:\n        if rem[l] + rem[r] >= k:\n            res += 1\n            r -= 1\n        l += 1\n    print(res)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    i = 1\n    j = n\n    a = [0]\n    for x in R():\n        n += x // k\n        a += (x % k,)\n    a.sort()\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(n - j)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lst = []\n    ans = 0\n    for i in a:\n        lst.append(i % k)\n        ans += i // k\n    lst.sort()\n    i = 0\n    j = len(lst) - 1\n    while j > i:\n        if lst[i] + lst[j] >= k:\n            ans += 1\n            j -= 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    sumA = sum([num // k for num in a])\n    mod = [num % k for num in a]\n    mod.sort()\n    bonus = 0\n    (s, e) = (0, n - 1)\n    while s < e:\n        if mod[s] + mod[e] >= k:\n            bonus += 1\n            s += 1\n            e -= 1\n        else:\n            s += 1\n    print(sumA + bonus)", "from cmath import sqrt\nfrom collections import defaultdict\nimport heapq\nfrom math import *\nimport sys\nfrom tkinter import N\nfrom typing import Counter\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = []\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        b.append(a[i] % k)\n    i = 0\n    j = n - 1\n    b.sort()\n    while i < j:\n        if b[i] + b[j] >= k:\n            ans += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    print(ans)", "for _ in range(int(input())):\n    (a, k) = map(int, input().split())\n    c = [*map(int, input().split())]\n    ans = 0\n    for i in range(a):\n        ans += c[i] // k\n        c[i] = c[i] % k\n    c.sort()\n    (l, r) = (0, a - 1)\n    while l < r:\n        if c[l] + c[r] >= k:\n            ans += 1\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    i = 0\n    j = n - 1\n    a = []\n    for x in R():\n        n += x // k\n        a += (x % k,)\n    a.sort()\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(n - j - 1)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    i = 1\n    j = n\n    a = [0]\n    for x in R():\n        n += x // k\n        a += (x % k,)\n    a.sort()\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(n - j)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    i = 1\n    j = n\n    a = [0]\n    for x in R():\n        n += x // k\n        a += (x % k,)\n    a.sort()\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(n - j)", "for x in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    for x in range(len(a)):\n        s += a[x] // k\n        a[x] = a[x] % k\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] >= k:\n            s += 1\n            j -= 1\n        i += 1\n    print(s)", "e = lambda : map(int, input().split())\n(t,) = e()\nwhile t:\n    t -= 1\n    (n, k) = e()\n    i = 1\n    j = n\n    a = [0]\n    for x in e():\n        n += x // k\n        a += (x % k,)\n    a.sort()\n    while i < j:\n        j -= a[i] + a[j] >= k\n        i += 1\n    print(n - j)", "from collections import deque\nN = int(input())\nfor _ in range(N):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    summ = sum([a // k for a in arr])\n    arr = deque(sorted([a % k for a in arr if a % k > 0], reverse=True))\n    change = 'yes'\n    while arr:\n        if change == 'yes':\n            a = arr.popleft()\n            if not arr:\n                break\n        b = arr.pop()\n        if b + a >= k:\n            summ += 1\n            change = 'yes'\n        else:\n            change = 'no'\n    print(summ)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(x):\n        ans += a[i] // y\n        a[i] %= y\n    a.sort()\n    j = x - 1\n    i = 0\n    while i < j:\n        if a[i] + a[j] >= y:\n            ans += 1\n            j -= 1\n        i += 1\n    print(ans)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    res = 0\n    rem = []\n    for i in a:\n        res += i // k\n        rem.append(i % k)\n    rem.sort()\n    (l, r) = (0, n - 1)\n    while r > l:\n        if rem[l] + rem[r] >= k:\n            res += 1\n            r -= 1\n        l += 1\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += l[i] // k\n        l[i] = l[i] % k\n    l.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if l[i] + l[j] >= k:\n            ans += 1\n            j -= 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    ans = 0\n    rem = []\n    for x in a:\n        ans += x // k\n        rem.append(x % k)\n    (l, r) = (0, n - 1)\n    rem.sort()\n    while l < r:\n        if rem[l] + rem[r] >= k:\n            ans += 1\n            r -= 1\n        l += 1\n    print(ans)", "import os\nimport sys\nimport math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, len(l)):\n        ans += l[i] // k\n        l[i] %= k\n    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + l[j] >= k:\n            i += 1\n            j -= 1\n            ans += 1\n        else:\n            i += 1\n    print(ans)\nif os.path.exists('D:/VSCODE/cp/input.txt'):\n    sys.stdin = open('D:/VSCODE/cp/input.txt', 'r')\n    sys.stdout = open('D:/VSCODE/cp/output.txt', 'w')\nt = int(input())\nfor testcase in range(1, t + 1):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += nums[i] // k\n        nums[i] = nums[i] % k\n    i = 0\n    j = n - 1\n    nums.sort()\n    while i < j:\n        while i < j and nums[i] + nums[j] < k:\n            i += 1\n        if not i < j:\n            break\n        j -= 1\n        i += 1\n        ans += 1\n    print(ans)", "from math import *\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import *\nm = pow(10, 9) + 7\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] < k:\n            i += 1\n        else:\n            ans += 1\n            i += 1\n            j -= 1\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] < k:\n            i += 1\n        else:\n            ans += 1\n            i += 1\n            j -= 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = []\n    res = 0\n    for i in a:\n        res += i // k\n        b.append(i % k)\n    b = sorted(b)[::-1]\n    j = n - 1\n    for i in range(n):\n        while b[i] + b[j] < k and i < j:\n            j -= 1\n        if i >= j:\n            break\n        res += 1\n        j -= 1\n    print(res)", "from itertools import combinations\nfor _ in range(int(input())):\n    (size, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(size):\n        ans += arr[i] // k\n        arr[i] = arr[i] % k\n    arr.sort()\n    l = 0\n    r = len(arr) - 1\n    while r > l:\n        if arr[r] + arr[l] >= k:\n            ans += 1\n            r -= 1\n            l += 1\n        else:\n            l += 1\n    print(ans)", "t = int(input())\nfor __ in range(t):\n    (n, k) = map(int, input().split())\n    x1 = list(map(int, input().split()))\n    s = sum(list(map(lambda x: x // k, x1)))\n    M = sorted([x1[i] % k for i in range(n) if x1[i] % k != 0])\n    l = 0\n    r = len(M) - 1\n    while l < r:\n        if M[l] + M[r] >= k:\n            s += 1\n            r -= 1\n        l += 1\n    print(s)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    z = 0\n    for i in range(n):\n        z = z + lst[i] // k\n        lst[i] = lst[i] % k\n    lst.sort()\n    j = n - 1\n    for i in range(n):\n        if i >= j:\n            break\n        if lst[i] + lst[j] >= k:\n            z = z + 1\n            j = j - 1\n    print(z)", "t = int(input())\nfor q in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = 0\n    for i in range(n):\n        z = z + l[i] // k\n        l[i] = l[i] % k\n    l.sort()\n    j = n - 1\n    for i in range(n):\n        if i >= j:\n            break\n        if l[i] + l[j] >= k:\n            z = z + 1\n            j = j - 1\n    print(z)", "for _ in range(int(input())):\n    (l, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    (left, right) = (0, len(nums) - 1)\n    ans = 0\n    for i in range(l):\n        ans += nums[i] // k\n        nums[i] %= k\n    nums.sort()\n    while left < right:\n        pair = nums[left] + nums[right]\n        if pair >= k:\n            ans += 1\n            left += 1\n            right -= 1\n        else:\n            left += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    ans = 0\n    rem = []\n    for i in arr:\n        ans += i // k\n        rem.append(i % k)\n    rem.sort()\n    (p, q) = (0, n - 1)\n    while p < q:\n        if rem[p] + rem[q] >= k:\n            ans += 1\n            p += 1\n            q -= 1\n        elif rem[p] + rem[q] < k:\n            p += 1\n    print(ans)", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    lr = []\n    ans = 0\n    for i in range(n):\n        ans += l[i] // k\n        lr.append(l[i] % k)\n    lr.sort()\n    (le, r) = (0, n - 1)\n    while le < r:\n        if (lr[le] + lr[r]) // k > 0:\n            ans += 1\n            r -= 1\n            le += 1\n        else:\n            le += 1\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] = a[i] % k\n    a.sort()\n    i = 0\n    j = n - 1\n    while j > i:\n        if a[i] + a[j] >= k:\n            ans += 1\n            j = j - 1\n            i = i + 1\n        else:\n            i = i + 1\n    print(ans)", "from collections import defaultdict\nt = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += list1[i] // k\n        list1[i] = list1[i] % k\n    list1.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        s = list1[i] + list1[j]\n        if s >= k:\n            ans += 1\n            j -= 1\n        i += 1\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += arr[i] // k\n        arr[i] %= k\n    arr.sort()\n    (i, j) = (0, n - 1)\n    while i < j:\n        if arr[i] + arr[j] >= k:\n            ans += 1\n            j -= 1\n        i += 1\n    print(ans)", "_ = int(input())\nfor __ in range(_):\n    (n, k) = map(int, input().split())\n    packs = list(map(int, input().split()))\n    out = 0\n    mods = []\n    for x in packs:\n        out += x // k\n        mods.append(x % k)\n    mods = sorted(mods)\n    i = 0\n    j = n - 1\n    while i < j:\n        if mods[i] + mods[j] < k:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n            out += 1\n    print(out)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().strip().split()]\n    a = [int(i) for i in input().strip().split()]\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < j and a[i] + a[j] < k:\n            i += 1\n        if i == j:\n            break\n        ans += 1\n        i += 1\n        j -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    i = 0\n    m = [None] * n\n    ans = 0\n    for c in input().split(' '):\n        t = int(c)\n        ans += t // k\n        m[i] = t % k\n        i += 1\n    m.sort()\n    (x, y) = (0, n - 1)\n    while x < y:\n        if m[x] + m[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    r = 0\n    a = []\n    for x in R():\n        r += x // k\n        a += (x % k,)\n    a.sort()\n    i = 0\n    n -= 1\n    while i < n:\n        d = a[i] + a[n] >= k\n        r += d\n        n -= d\n        i += 1\n    print(r)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    c = 0\n    lst1 = []\n    for j in lst:\n        q = j // k\n        r = j % k\n        lst1.append(r)\n        c += q\n    lst1.sort()\n    le = len(lst1)\n    r = le - 1\n    l = 0\n    while l < r:\n        if lst1[r] + lst1[l] >= k:\n            c += 1\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    print(c)", "N = int(input())\nfor ii in range(N):\n    (n, k) = map(int, input().split())\n    ll = list(map(int, input().split()))\n    ls = [0] * n\n    res = 0\n    jj = 0\n    for i in range(n):\n        res += ll[i] // k\n        ls[i] = ll[i] % k\n    ls = sorted(ls, reverse=True)\n    (l, r) = (0, n - 1)\n    while l < r:\n        if ls[l] + ls[r] < k:\n            r -= 1\n        else:\n            jj += 1\n            l += 1\n            r -= 1\n    print(jj + res)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    rem = []\n    for i in a:\n        ans += i // k\n        if i % k:\n            rem.append(i % k)\n    rem.sort(reverse=True)\n    left = 0\n    right = len(rem) - 1\n    while left < right:\n        if (rem[left] + rem[right]) // k == 1:\n            left += 1\n            right -= 1\n            ans += 1\n        else:\n            right -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    b = list()\n    for i in range(n):\n        ans += a[i] // k\n        b.append(a[i] % k)\n    b.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        gig = b[i] + b[j]\n        if gig >= k:\n            j -= 1\n            ans += 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    val = list(map(int, input().split()))\n    out = 0\n    left = []\n    for v in range(len(val)):\n        out += val[v] // k\n        left.append(val[v] % k)\n    left = sorted(left)\n    (l, r) = (0, n - 1)\n    while r > l:\n        if left[l] + left[r] >= k:\n            out += 1\n            r -= 1\n        l += 1\n    print(out)", "t = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    used = [False for i in range(n)]\n    ii = -1\n    jj = n - 1\n    for i in range(n):\n        if a[i] > 0:\n            ii = i\n            break\n    if ii == -1:\n        print(ans)\n    else:\n        while ii < jj:\n            if a[ii] + a[jj] >= k:\n                ans += 1\n                jj -= 1\n            ii += 1\n        print(ans)", "t = int(input())\nfor q in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = 0\n    for i in range(n):\n        z = z + l[i] // k\n        l[i] = l[i] % k\n    l.sort()\n    j = n - 1\n    for i in range(n):\n        if i >= j:\n            break\n        if l[i] + l[j] >= k:\n            z = z + 1\n            j = j - 1\n    print(z)", "tests = int(input())\nfor _ in range(tests):\n    (n, k) = tuple(map(int, input().split()))\n    array = list(map(int, input().split()))\n    quotient = 0\n    remd = []\n    for n in array:\n        quotient += n // k\n        r = n % k\n        if r:\n            remd.append(r)\n    remd.sort()\n    i = 0\n    j = len(remd) - 1\n    while i < j:\n        if remd[i] + remd[j] >= k:\n            quotient += (remd[i] + remd[j]) // k\n            i += 1\n            j -= 1\n        elif remd[i] + remd[j] < k:\n            i += 1\n    print(quotient)", "t = int(input())\nfor i in range(t):\n    first = input().split(' ')\n    n = int(first[0])\n    k = int(first[1])\n    x = list(map(int, input().split(' ')))\n    total = 0\n    for j in range(n):\n        total += int(x[j] / k)\n        x[j] = x[j] % k\n    x.sort()\n    front = 0\n    end = n - 1\n    while front < end:\n        if x[front] + x[end] < k:\n            front += 1\n        else:\n            front += 1\n            end -= 1\n            total += 1\n    print(total)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i] // k\n        arr[i] = arr[i] % k\n    arr = sorted(arr, reverse=True)\n    (i, j) = (0, n - 1)\n    while i < j:\n        if arr[i] + arr[j] < k:\n            j -= 1\n        else:\n            (i, j) = (i + 1, j - 1)\n            ans += 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = [int(j) for j in input().split()]\n    c = 0\n    mod = []\n    for j in range(n):\n        c += A[j] // k\n        mod.append(A[j] % k)\n    mod.sort()\n    s = 0\n    e = n - 1\n    while s < e:\n        if mod[s] + mod[e] >= k:\n            c += 1\n            s += 1\n            e -= 1\n        else:\n            s += 1\n    print(c)", "for T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(val) for val in input().split()]\n    res = 0\n    for i in range(n):\n        res += a[i] // k\n        a[i] %= k\n    a.sort()\n    (l, r) = (0, n - 1)\n    while l < r:\n        if a[l] + a[r] >= k:\n            res += 1\n            r -= 1\n        l += 1\n    print(res)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    total = 0\n    rem = []\n    for j in range(n):\n        total += l[j] // k\n        rem.append(l[j] % k)\n    rem.sort()\n    low = 0\n    high = n - 1\n    while low < high:\n        val = rem[low] + rem[high]\n        if val >= k:\n            total += val // k\n            low += 1\n            high -= 1\n        else:\n            low += 1\n    print(total)", "t = int(input())\nfor o in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i] // k\n        a[i] %= k\n    a.sort()\n    (l, r) = (0, n - 1)\n    while l < r:\n        while l <= r and a[l] + a[r] < k:\n            l += 1\n        if l >= r:\n            break\n        ans += (a[l] + a[r]) // k\n        (l, r) = (l + 1, r - 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += l[i] // k\n        l[i] = l[i] % k\n    l.sort()\n    vel = 0\n    i = 0\n    while i < n:\n        if i != n - 1 and l[i] + l[-1] >= k:\n            ans += 1\n            l.pop()\n            n -= 1\n        else:\n            vel += 1\n        i += 1\n    print(ans)", "iT = int(input())\nfor _ in range(iT):\n    (iN, iK) = map(int, input().split())\n    lst_temp = list(map(int, input().split()))\n    lst_temp.sort(reverse=True)\n    temp = [0] * iN\n    ans = 0\n    for i in range(iN):\n        ans += lst_temp[i] // iK\n        temp[i] = lst_temp[i] % iK\n    temp.sort(reverse=True)\n    i = 0\n    j = iN - 1\n    while i < j:\n        if temp[i] + temp[j] >= iK:\n            i += 1\n            j -= 1\n            ans += 1\n        else:\n            j -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split(' ')))\n    s = sum(arr)\n    seen = set()\n    N = len(arr)\n    cost = 0\n    for i in range(N):\n        arr[i] = arr[i] % k\n    arr.sort()\n    (left, right) = (0, N - 1)\n    rem = 0\n    while left < N and right > left:\n        if arr[left] + arr[right] == k:\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < k:\n            rem += arr[left]\n            left += 1\n        elif arr[left] + arr[right] > k:\n            rem += (arr[left] + arr[right]) % k\n            left += 1\n            right -= 1\n    print((s - rem) // k)", "tests = int(input())\nfor _ in range(tests):\n    x = list(map(int, input().split()))\n    n = int(x[0])\n    k = int(x[1])\n    a = list(map(int, input().split()))\n    total = sum(a)\n    if k == 1:\n        print(total)\n    else:\n        remainder = 0\n        a.sort(key=lambda i: i % k)\n        l = 0\n        r = n - 1\n        while r >= l:\n            if a[r] % k + a[l] % k < k:\n                if a[l] % k != 0:\n                    remainder += a[l] % k\n            else:\n                if a[r] % k + a[l] % k > k:\n                    remainder += (a[l] % k + a[r] % k) % k\n                r -= 1\n            l += 1\n        print((total - remainder) // k)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sum = 0\n    for i in range(n):\n        sum += math.floor(arr[i] / k)\n    arr1 = []\n    for i in range(n):\n        arr1.append(arr[i] % k)\n    arr1.sort()\n    low = 0\n    high = n - 1\n    while low < high:\n        if arr1[low] + arr1[high] >= k:\n            sum += 1\n            low += 1\n            high -= 1\n        elif arr1[low] + arr1[high] < k:\n            low += 1\n    print(sum)", "t = int(input())\nfor q in range(t):\n    two = input().split()\n    n = int(two[0])\n    k = int(two[1])\n    wi = input().split()\n    r = []\n    zh = 0\n    for i in range(n):\n        r.append(int(wi[i]) % k)\n        zh += int(wi[i]) // k\n    r.sort(reverse=True)\n    head = 0\n    tail = n - 1\n    while head < tail:\n        if r[head] + r[tail] >= k:\n            zh += 1\n            head += 1\n            tail -= 1\n        else:\n            tail -= 1\n    print(zh)", "import math\nt = int(input())\nwhile t > 0:\n    (n, k) = [int(i) for i in input().split()]\n    sum = 0\n    a = []\n    for i in input().split():\n        sum += math.floor(int(i) / k)\n        a.append(int(i) % k)\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] >= k:\n            sum += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    print(sum)\n    t -= 1", "import math\nfor h in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    z = []\n    for i in range(n):\n        if x[i] % k != 0:\n            z.append(x[i] % k)\n        x[i] = x[i] // k\n    z.sort()\n    (i, j) = (0, len(z) - 1)\n    c = 0\n    while j >= 0:\n        while i < j and z[i] + z[j] < k:\n            i += 1\n        if i < j and z[i] + z[j] >= k:\n            c += 1\n        j -= 1\n        i += 1\n    print(c + sum(x))", "from math import floor\n\ndef new_sort(s, return_index=False):\n    if return_index:\n        return (sorted(s), sorted(range(len(s)), key=lambda k: s[k]))\n    else:\n        return sorted(s)\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in str(input()).split()]\n    a = [int(x) for x in str(input()).split()]\n    modules = [x % k for x in a]\n    (sorted_modules, index) = new_sort(modules, return_index=True)\n    p1 = 0\n    p2 = n - 1\n    num_iters = n // 2\n    profit = 0\n    for _ in range(num_iters):\n        if sorted_modules[p1] + sorted_modules[p2] >= k:\n            profit += floor((a[index[p1]] + a[index[p2]]) / k)\n            p1 += 1\n            p2 -= 1\n        else:\n            profit += floor((a[index[p1]] + a[index[p1 + 1]]) / k)\n            p1 += 2\n    print(profit)", "for time in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = [int(a) for a in input().split()]\n    rem = {}\n    s = 0\n    for j in nums:\n        s += j\n        l = j % k\n        if l == 0:\n            if 0 in rem:\n                del rem[0]\n            else:\n                rem[0] = 1\n        elif k - l in rem:\n            rem[k - l] -= 1\n            if rem[k - l] == 0:\n                del rem[k - l]\n        elif l in rem:\n            rem[l] += 1\n        else:\n            rem[l] = 1\n    d = sum((j * rem[j] for j in rem))\n    s -= d\n    d = s // k\n    sorte = sorted(list(rem))\n    maxi = len(sorte) - 1\n    mini = 0\n    while maxi >= mini:\n        maindex = sorte[maxi]\n        miindex = sorte[mini]\n        if maindex + miindex < k:\n            mini += 1\n            continue\n        if maxi == mini:\n            d += rem[maindex] // 2\n            break\n        dif = min(rem[maindex], rem[miindex])\n        d += dif\n        rem[maindex] -= dif\n        rem[miindex] -= dif\n        if rem[maindex] == 0:\n            maxi -= 1\n        if rem[miindex] == 0:\n            mini += 1\n    print(d)", "from operator import is_, truediv\nfrom posixpath import split\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    temp = [[i, i % k, 0] for i in arr]\n    temp = sorted(temp, key=lambda x: x[1])\n    start = 0\n    end = len(temp) - 1\n    ans = 0\n    while start < end:\n        if temp[start][1] + temp[end][1] >= k:\n            ans += int((temp[start][0] + temp[end][0]) / k)\n            temp[start][2] = 1\n            temp[end][2] = 1\n            start += 1\n            end -= 1\n        else:\n            start += 1\n    is_first = True\n    t = 0\n    for i in range(len(temp) - 1, -1, -1):\n        if temp[i][2] == 0:\n            if is_first:\n                t += temp[i][0]\n                is_first = False\n            else:\n                t += temp[i][0]\n                ans += int(t / k)\n                is_first = True\n                t = 0\n    print(ans)", "t = int(input())\nfor testtest in range(t):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += A[i] // k\n        A[i] = A[i] % k\n    A.sort()\n    X = [0] * n\n    a = 0\n    b = n - 1\n    while a < b and a < len(A) and (b > 0) and (A[a] <= k // 2):\n        if A[a] + A[b] > k:\n            b -= 1\n            continue\n        elif A[a] + A[b] < k:\n            a += 1\n            continue\n        else:\n            (X[a], X[b]) = (1, 1)\n            a += 1\n            b -= 1\n            ans += 1\n            continue\n    AA = []\n    for i in range(n):\n        if X[i] == 0:\n            AA += [A[i]]\n    a = 0\n    b = len(AA) - 1\n    while a < b and a < len(AA) and (b > -1):\n        if AA[a] + AA[b] < k:\n            a += 1\n            continue\n        else:\n            a += 1\n            b -= 1\n            ans += 1\n            continue\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    m = {}\n    r = []\n    ans = 0\n    for ai in a:\n        ans += ai // k\n        mr = ai % k\n        if mr not in m.keys():\n            m[mr] = 1\n        else:\n            m[mr] += 1\n    ml = list(m.keys())\n    ml.sort()\n    x = 0\n    while x < len(ml):\n        i = ml[x]\n        if i > k // 2:\n            break\n        if k - i == i:\n            ans += m[i] // 2\n            if m[i] % 2 == 1:\n                r.append(i)\n        else:\n            j = m.get(k - i, 0)\n            d = min(m[i], j)\n            ans += d\n            m[i] -= d\n            for _ in range(m[i]):\n                r.append(i)\n            if j != 0:\n                m[k - i] -= d\n        x += 1\n    while x < len(ml):\n        i = ml[x]\n        for _ in range(m[i]):\n            r.append(i)\n        x += 1\n    r.sort()\n    (x, y) = (0, len(r) - 1)\n    while x < y:\n        if r[x] + r[y] >= k:\n            ans += 1\n            x += 1\n            y -= 1\n        else:\n            x += 1\n    print(ans)", "def CF797E(numbers, k):\n    answer = 0\n    nums = []\n    for num in numbers:\n        answer += num // k\n        nums.append(num % k)\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    if k == 2:\n        return answer if 1 not in counts else answer + counts[1] // 2\n    temp = max(counts.keys())\n    start = k - temp\n    for i in range(temp, 1, -1):\n        if i not in counts:\n            continue\n        start = max(start, k - i)\n        while counts[i]:\n            for j in range(start, k):\n                if j not in counts or not counts[j]:\n                    continue\n                if i == j and counts[i] == 1:\n                    continue\n                start = j\n                counts[j] -= 1\n                counts[i] -= 1\n                answer += 1\n                break\n            else:\n                break\n        else:\n            continue\n        break\n    return answer\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    print(CF797E(list(map(int, input().split())), k))"]