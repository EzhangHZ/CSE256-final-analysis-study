["from enum import Enum, auto\nimport copy\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        x = len(set(a))\n        res = []\n        for i in range(n):\n            res.append(x if i < x else i + 1)\n        print(' '.join(list(map(str, res))))\nmain()", "t = int(input())\nout = []\nfor time in range(t):\n    n = int(input())\n    a = list(input().split())\n    sa = len(set(a))\n    output = []\n    for x in range(1, n + 1):\n        if x <= sa:\n            output.append(sa)\n        else:\n            output.append(x)\n    out.append(' '.join((str(n) for n in output)))\nfor x in out:\n    print(x)", "import random\n\ndef A():\n    N = int(input())\n    answers = []\n    for i in range(N):\n        (x1, y1) = [int(n) for n in input().split()]\n        (x2, y2) = [int(n) for n in input().split()]\n        (x3, y3) = [int(n) for n in input().split()]\n        if y1 == y2:\n            if y3 > y2:\n                answers.append(0)\n            else:\n                answers.append(abs(x2 - x1))\n        elif y2 == y3:\n            if y1 > y2:\n                answers.append(0)\n            else:\n                answers.append(abs(x2 - x3))\n        elif y1 == y3:\n            if y2 > y3:\n                answers.append(0)\n            else:\n                answers.append(abs(x3 - x1))\n        else:\n            answers.append(0)\n    for ans in answers:\n        print(ans)\n\ndef B():\n    N = int(input())\n    answers = []\n    for _ in range(N):\n        n = int(input())\n        types = input().split()\n        type_dict = {}\n        for s in types:\n            D = type_dict.setdefault(s, 0)\n            D += 1\n            type_dict[s] = D\n        ans = ''\n        p = len(type_dict.keys())\n        ans += f'{p} ' * p\n        for c in type_dict:\n            for i in range(0, type_dict[c] - 1):\n                p += 1\n                ans += f'{p} '\n        answers += [ans[:-1]]\n    for ans in answers:\n        print(ans)\nB()", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = len(list(set(a)))\n    c = n - b\n    r = [b] * b\n    if c != 0:\n        r2 = list(range(b + 1, n + 1))\n        r = r + r2\n    res.append(' '.join(map(str, r)))\nfor i in range(len(res)):\n    print(res[i])", "import math\nimport sys\nimport statistics\nfrom statistics import mode\ninput = sys.stdin.readline\n\ndef inp_int():\n    return int(input())\n\ndef inp_list():\n    return list(map(int, input().split()))\n\ndef inp_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inp_reverse():\n    return map(int, input().split())\n\ndef solve():\n    n = inp_int()\n    lst = inp_list()\n    unq_len = len(set(lst))\n    ans = []\n    for i in range(1, n + 1):\n        ans.append(max(i, unq_len))\n    ans = ' '.join((str(e) for e in ans))\n    print(ans)\nnumber_cases = inp_int()\nfor x in range(number_cases):\n    solve()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    s = len(set(w))\n    print(*[s] * s + list(range(s + 1, n + 1)))", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = set(list(map(int, input().split())))\n        l = len(s)\n        print(*[l for i in range(l)], *[i for i in range(l + 1, n + 1)])\nmain()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "t = int(input())\narr = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr.append(a)\n\ndef helper(ar, n):\n    m = n\n    ans = ''\n    j = 1\n    count = m\n    for i in range(len(ar)):\n        if count > 0:\n            if not ans:\n                ans += str(m)\n            else:\n                ans += ' ' + str(m)\n            count -= 1\n        else:\n            ans += ' ' + str(m + j)\n            j += 1\n    return ans\nfor i in range(t):\n    s = set(arr[i])\n    n = len(s)\n    print(helper(arr[i], n))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "def power_walking(np: int, n: int) -> str:\n    s = (str(np) + ' ') * np\n    for i in range(np + 1, n + 1):\n        s += str(i) + ' '\n    return s\ntest_number = int(input())\nres = []\nfor _ in range(test_number):\n    n = int(input())\n    power_ups = set((int(x) for x in input().split()))\n    np = len(power_ups)\n    res.append(power_walking(np, n))\nfor r in res:\n    print(r)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "import sys\n\ndef solver(n, uniques):\n    for i in range(1, n + 1):\n        if i > uniques:\n            print(i, end=' ')\n        else:\n            print(uniques, end=' ')\n    print()\ninput = sys.stdin.readline\ntests = int(input())\nwhile tests:\n    n = int(input())\n    types = set(map(int, input().split()))\n    solver(n, len(types))\n    tests -= 1", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "t = int(input())\nll = []\nfor i in range(t):\n    pl = []\n    n = int(input())\n    l = input().split()\n    total = len(l)\n    l = list(dict.fromkeys(l))\n    nodupe = len(l)\n    for j in range(nodupe):\n        pl.append(nodupe)\n    while nodupe < total:\n        nodupe += 1\n        pl.append(nodupe)\n    x = ''\n    for j in pl:\n        x += str(j)\n        x += ' '\n    ll.append(x)\nfor i in ll:\n    print(i)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    m = len({*a})\n    print(*(max(m, i + 1) for i in range(len(a))))", "from sys import stdin\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    L = len(set(map(int, stdin.readline().split())))\n    print(*[L] * L + list(range(L + 1, n + 1)), '\\n')", "t = int(input())\nn_list = []\nunique_powerup_list = []\nfor i1 in range(t):\n    temp_array = []\n    n = int(input())\n    n_list.append(n)\n    in1 = input().split()\n    unique_powerup_list.append(len(set(in1)))\nfor i2 in range(t):\n    unique_powerup = unique_powerup_list[i2]\n    n = n_list[i2]\n    for k in range(1, n + 1):\n        if k > unique_powerup:\n            print(k, end=' ')\n        else:\n            print(unique_powerup, end=' ')\n    print()", "n = int(input())\ni = 0\nans = []\nwhile i < n:\n    a = int(input())\n    b = input().split(' ')\n    c = len(set(b))\n    s = c * [c] + list(range(c + 1, a + 1))\n    print(' '.join(map(str, s)))\n    i += 1", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    n = int(inp())\n    a = {int(i) for i in inp().split()}\n    for i in range(1, n + 1):\n        print(max(i, len(a)), end=' ')\n    print()", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = set(list(map(int, input().split())))\n        l = len(s)\n        for i in range(1, n + 1):\n            print(max(i, l), end=' ')\n        print('')\nmain()", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    d = Counter(arr)\n    total = len(d)\n    res = [total] * total\n    res += list(range(total + 1, n + 1))\n    print(*res)", "def count_num_type(string_tp):\n    a = string_tp.split(' ')\n    dic = dict()\n    for i in a:\n        if i in dic:\n            dic[i] = dic[i] + 1\n        else:\n            dic[i] = 1\n    return len(dic)\n\ndef print_string(vol, numtypes):\n    o_str = (str(numtypes) + ' ') * numtypes\n    for i in range(vol - numtypes):\n        o_str = o_str + '{} '.format(numtypes + (i + 1))\n    print(o_str[:len(o_str)])\ntest_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    types = input()\n    numoftype = count_num_type(types)\n    print_string(n, numoftype)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = set(list(map(int, input().split())))\n        l = len(s)\n        for i in range(1, n + 1):\n            print(max(i, l), end=' ')\n        print('')\nmain()", "def count_num_type(string_tp):\n    a = string_tp.split(' ')\n    dic = dict()\n    for i in a:\n        if i in dic:\n            dic[i] = dic[i] + 1\n        else:\n            dic[i] = 1\n    return len(dic)\ntest_cases = int(input())\nlis = list()\nfor i in range(test_cases):\n    n = int(input())\n    types = input()\n    numoftype = count_num_type(types)\n    a = (str(numoftype) + ' ') * numoftype\n    for i in range(n - numoftype):\n        a = a + '{} '.format(numoftype + (i + 1))\n    print(a[:len(a)])", "n = int(input())\nl = []\nfor i in range(n):\n    x = input()\n    l.append(list(map(int, input().split())))\n\ndef fun1(l1):\n    x = len(set(l1))\n    for i in range(1, len(l1) + 1):\n        if i <= x:\n            print(x, end=' ')\n        else:\n            print(x + (i - x), end=' ')\n    print()\nfor l1 in l:\n    fun1(l1)", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dict = {}\n    for i in range(n):\n        if arr[i] not in dict:\n            dict[arr[i]] = 1\n        else:\n            dict[arr[i]] += 1\n    x = len(dict)\n    for i in range(x):\n        print(x, end=' ')\n    curr = x + 1\n    for i in range(x + 1, n + 1):\n        print(curr, end=' ')\n        curr += 1\n    print()", "from sys import stdin, stdout\n\ndef GetListOrder(myList):\n    myList.sort()\n    cnt = 0\n    cur = 0\n    for a in myList:\n        if a > cur:\n            cnt += 1\n            cur = a\n    return cnt\nt = int(stdin.readline())\nfor i in range(t):\n    n = int(stdin.readline())\n    power_up_list = list(map(int, stdin.readline().strip().split(None, n)))[:n]\n    order = GetListOrder(power_up_list)\n    output = ''\n    for j in range(n):\n        if j < order:\n            output += str(order) + ' '\n        else:\n            output += str(j + 1) + ' '\n    print(output.strip())", "t = int(input())\n\ndef solve(a):\n    diff = set(a)\n    num = len(diff)\n    r = [str(num)] * num\n    for _ in range(num, len(a)):\n        num += 1\n        r.append(str(num))\n    return ' '.join(r)\nfor _ in range(t):\n    n = input()\n    a = [int(e) for e in input().split()]\n    print(solve(a))", "import collections\nimport sys\ninput = sys.stdin.readline\n\ndef solve(arr, n):\n    counter = {}\n    for num in arr:\n        if num not in counter:\n            counter[num] = 0\n        counter[num] += 1\n    c = [counter[v] for v in counter]\n    c.sort()\n    curr = len(set(arr))\n    ans = [curr] * curr\n    for i in c:\n        if i == 1:\n            continue\n        else:\n            for _ in range(i - 1):\n                curr += 1\n                ans.append(curr)\n    print(*ans[:n])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solve(arr, n)", "for i in range(int(input())):\n    n = int(input())\n    a = input().split()\n    l = len(set(a))\n    s = ''\n    for i in range(l):\n        s += str(l) + ' '\n    for i in range(n - l):\n        l += 1\n        s += str(l) + ' '\n    print(s)", "def solve(a):\n    diff = set(a)\n    num = len(diff)\n    r = [str(num)] * num\n    for _ in range(num, len(a)):\n        num += 1\n        r.append(str(num))\n    return ' '.join(r)\nt = int(input())\nfor _ in range(t):\n    n = input()\n    a = [int(e) for e in input().split()]\n    print(solve(a))", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dict = {}\n    for i in range(n):\n        if arr[i] not in dict:\n            dict[arr[i]] = 1\n        else:\n            dict[arr[i]] += 1\n    x = len(dict)\n    for i in range(x):\n        print(x, end=' ')\n    curr = x + 1\n    for i in range(x + 1, n + 1):\n        print(curr, end=' ')\n        curr += 1\n    print()", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    cnt = 1\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            cnt += 1\n    ans = [cnt] * cnt\n    for i in range(n - cnt):\n        ans.append(cnt + i + 1)\n    out.append(ans)\nfor i in out:\n    print(*i)", "def solve():\n    n = int(input())\n    powerups = input().split()\n    unique_ups = len(set(powerups))\n    ans = []\n    for k in range(1, n + 1):\n        ans.append(max(k, unique_ups))\n    print(' '.join([str(x) for x in ans]))\nfor tc in range(int(input())):\n    solve()", "def solve(powers):\n    types = len(set(powers))\n    final = []\n    extra = 0\n    for (i, power) in enumerate(powers):\n        if i + 1 > types:\n            extra += 1\n        final.append(str(types + extra))\n    print(' '.join(final))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    powers = [int(i) for i in input().split()]\n    solve(powers)", "from itertools import accumulate\nfrom collections import Counter\nT = int(input())\n\ndef printlist(l):\n    ll = [str(c) for c in l]\n    print(' '.join(ll))\nfor _ in range(T):\n    n = int(input())\n    A = [int(c) for c in input().split(' ')]\n    k = len(set(A))\n    l = k * [k] + list(range(k + 1, n + 1))\n    printlist(l)", "import sys\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(input().split())\n    b = set(a)\n    if len(b) == len(a):\n        print(*[len(a) for i in range(len(a))])\n    else:\n        l = [len(b) for i in range(len(b))] + [i for i in range(len(b) + 1, len(a) + 1)]\n        sys.stdout.write(' '.join(map(str, l)) + '\\n')", "import sys, collections\ninput = sys.stdin.readline\narr = int(input())\nres = []\nfor _ in range(arr):\n    n = int(input())\n    massiv = list(map(int, input().split()))\n    obj = collections.defaultdict(lambda : 0)\n    count = 0\n    for x in massiv:\n        if obj[x] == 0:\n            count += 1\n        obj[x] += 1\n    for i in range(1, n + 1):\n        if i <= count:\n            print(count, end=' ')\n        else:\n            count += 1\n            print(count, end=' ')\n    print()", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    el = len(set(input().split()))\n    result = [str(max(i + 1, el)) for i in range(n)]\n    print(' '.join(result))", "import sys\nfrom collections import Counter\n\ndef func_B(improvements):\n    improvements_counter = Counter(improvements)\n    result = [len(improvements_counter) for _ in range(len(improvements_counter))]\n    result += [len(improvements_counter) + i for i in range(1, len(improvements) - len(improvements_counter) + 1)]\n    return result\n\ndef main():\n    reader = (list(map(int, line.split())) for line in sys.stdin)\n    t = next(reader)[0]\n    for _ in range(t):\n        _ = next(reader)\n        print(*func_B(next(reader)))\nmain()", "import sys, collections\ninput = sys.stdin.readline\ntcs = int(input())\nres = []\nfor _ in range(tcs):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hp = collections.defaultdict(lambda : 0)\n    sz = 0\n    for x in arr:\n        if hp[x] == 0:\n            sz += 1\n        hp[x] += 1\n    for i in range(1, n + 1):\n        if i <= sz:\n            print(sz, end=' ')\n        else:\n            sz += 1\n            print(sz, end=' ')\n    print()", "def solve(powers):\n    seen = set()\n    types = 0\n    for power in powers:\n        if power not in seen:\n            types += 1\n            seen.add(power)\n    final = []\n    extra = 0\n    for (i, power) in enumerate(powers):\n        if i + 1 > types:\n            extra += 1\n        final.append(str(types + extra))\n    print(' '.join(final))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    powers = [int(i) for i in input().split()]\n    solve(powers)", "import sys\nimport heapq\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\nfor j in range(tests):\n    total = inp()\n    powers = inlt()\n    group = defaultdict(int)\n    for i in powers:\n        group[i] += 1\n    min_ = len(group)\n    ans = []\n    for x in range(1, total + 1):\n        if x <= min_:\n            ans.append(min_)\n            print(min_, end=' ')\n        else:\n            print(ans[-1] + 1, end=' ')\n            ans.append(ans[-1] + 1)\n    print('')", "for i in range(int(input())):\n    lenn = int(input())\n    powers = list(map(int, input().split()))\n    new = sorted(powers)\n    diff = 0\n    for i in range(lenn - 1):\n        if new[i] == new[i + 1]:\n            diff += 1\n    diff = lenn - diff\n    output = (str(diff) + ' ') * diff\n    for i in range(diff + 1, lenn + 1):\n        output += str(i) + ' '\n    print(output)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted([int(i) for i in input().split()])\n    l = {}\n    k = len(set(a))\n    s = [str(k)] * k\n    for i in range(n - k):\n        s.append(str(k + i + 1))\n    print(' '.join(s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    types = set([int(x) for x in input().split()])\n    type_count = len(types)\n    nums = []\n    for k in range(1, n + 1):\n        nums.append(str(max(type_count, k)))\n    print(' '.join(nums))", "for t in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    s = set(ls)\n    ans = list()\n    ln = len(s)\n    for i in range(n):\n        if i < ln:\n            ans.append(ln)\n        else:\n            ans.append(i + 1)\n    print(' '.join(list(map(str, ans))))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = len(set(a))\n    z = ' '.join((str(max(j, x)) for j in range(1, n + 1)))\n    print(z)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = len(set(arr))\n    b = []\n    while n:\n        b.append(str(max(k, n)))\n        n -= 1\n    print(' '.join(b[::-1]))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = set(arr)\n    a = len(arr1)\n    ans = []\n    for i in range(1, n + 1):\n        if i <= a:\n            ans.append(a)\n        else:\n            ans.append(i)\n    str_ans = [str(x) for x in ans]\n    print(' '.join(str_ans))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    st = set(a)\n    ans = []\n    for i in range(n):\n        if i + 1 <= len(st):\n            ans.append(str(len(st)))\n        else:\n            ans.append(str(i + 1))\n    print(' '.join(ans))", "def strengths(powerups):\n    output = ''\n    n = len(powerups)\n    powerups = set(powerups)\n    for i in range(1, n + 1):\n        if i > len(powerups):\n            output += str(i)\n            output += ' '\n        else:\n            output += str(len(powerups))\n            output += ' '\n    print(output)\ncases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    powerups = []\n    powerups = list(map(int, input().split()))\n    strengths(powerups)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    S = set(A)\n    ans = ''\n    for i in range(len(S)):\n        ans += ' ' + str(len(S))\n    if len(A) == len(S):\n        print(ans)\n    else:\n        for i in range(len(S), n):\n            ans += ' ' + str(i + 1)\n        print(ans)", "nbTest = int(input())\nfor testN in range(nbTest):\n    n = int(input())\n    values = [int(i) for i in input().split()]\n    nbDist = len(set(values))\n    res = []\n    for k in range(1, n + 1):\n        res.append(str(max(nbDist, k)))\n    print(' '.join(res))", "for i in range(int(input())):\n    n = int(input())\n    a = input().split()\n    a = list(map(int, a))\n    b = list(dict.fromkeys(a))\n    c = []\n    d = len(b)\n    for i in range(len(b)):\n        c.append(len(b))\n    e = n - len(b)\n    for i in range(e):\n        d += 1\n        c.append(d)\n    c = list(map(str, c))\n    print(' '.join(c))", "for _ in range(int(input())):\n    n = int(input())\n    l = len(set(map(int, input().split())))\n    p = ''\n    for i in range(n):\n        p += str(max(i + 1, l))\n        p += ' '\n    print(p)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    types = len(set(l))\n    res = [max(types, i) for i in range(1, n + 1)]\n    print(' '.join(list(map(str, res))))", "class Solution:\n\n    def powerWalking(self, n, arr):\n        types = set(arr)\n        results = []\n        for i in range(len(types)):\n            results.append(len(types))\n        for i in range(len(types), n):\n            results.append(i + 1)\n        return results\nT = int(input())\nsol = Solution()\nfor t in range(T):\n    n = int(input())\n    a = list()\n    line = input()\n    a = list(map(lambda x: int(x), list(line.split(' '))))\n    results = sol.powerWalking(n, a)\n    print(' '.join(map(lambda x: str(x), results)))", "cases = int(input())\nfor i in range(0, cases):\n    input()\n    a = list(map(lambda n: int(n), input().split(' ')))\n    aa = len(set(a))\n    res = []\n    for j in range(1, len(a) + 1):\n        res.append(str(max(aa, j)))\n    print(' '.join(res))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    set1 = set(list1)\n    l = len(set1)\n    i = 0\n    s = ''\n    for i in range(0, l):\n        s += str(l) + ' '\n    i = l + 1\n    for i in range(l + 1, n + 1):\n        s += str(i) + ' '\n    print(s.strip())", "from collections import OrderedDict, defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    x = len(set(map(int, input().split())))\n    p = [x] * (x - 1)\n    print(*p + list(range(x, n + 1)))", "for _ in range(int(input())):\n    n = int(input())\n    arr = map(int, input().split())\n    l = len(set(arr))\n    ans = [l] * l\n    for k in range(1, n - l + 1):\n        ans.append(l + k)\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(input().split())\n    b = set(a)\n    if len(b) == len(a):\n        print(*[len(a) for i in range(len(a))])\n    else:\n        l = [len(b) for i in range(len(b))] + [i for i in range(len(b) + 1, len(a) + 1)]\n        print(*l)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    powers = list(map(int, input().split()))[:n]\n    arr = list(set(powers))\n    dist = len(arr)\n    i = dist + 1\n    ans = []\n    while len(ans) < n:\n        if len(ans) < dist:\n            ans.append(str(dist))\n        else:\n            ans.append(str(i))\n            i += 1\n    result = ' '.join(ans)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cur = len(list(set(arr)))\n    res = [cur] * cur\n    while len(res) < n:\n        res.append(res[-1] + 1)\n    print(*res)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = len(set(l))\n    ret = [count] * count + list(range(count + 1, n + 1))\n    print(*ret)", "from collections import Counter\nk = int(input())\nli = []\nfor i in range(k):\n    input()\n    li += [[int(b) for b in input().split()]]\nl = []\nfor i in range(k):\n    o = len(Counter(li[i]))\n    u = [o for f in range(len(li[i]))]\n    for h in range(o, len(li[i])):\n        u[h] = u[h - 1] + 1\n    l += [u]\nfor i in range(k):\n    for g in l[i]:\n        print(g, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    x = list(map(int, input().split()))\n    length = len(set(x))\n    ans = ''\n    for k in range(1, n + 1):\n        ans += str(max(k, length)) + ' '\n    print(ans)\n    t -= 1", "from collections import Counter\nfor tcase in range(int(input())):\n    n = int(input())\n    c = Counter(map(int, input().split()))\n    nc = len(c)\n    ans = [max(k, nc) for k in range(1, n + 1)]\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = len(set(a))\n    p = [l] * l\n    for _ in range(n - l):\n        p.append(p[-1] + 1)\n    print(*p)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = len(set(l))\n    l2 = d * [d]\n    l1 = list(range(d + 1, n + 1))\n    y = l2 + l1\n    print(*y)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    s = set(l)\n    ls = len(s)\n    lan = [ls] * ls\n    for i in range(ls, n):\n        ls += 1\n        lan.append(ls)\n    print(*lan)", "for t in range(int(input())):\n    n = int(input())\n    a = set(map(int, input().split()))\n    m = len(a)\n    k = [m] * m\n    e = m\n    m = n - m\n    for i in range(1, m + 1):\n        k.append(e + i)\n    print(*k)", "from collections import Counter\nt = int(input())\nfor r in range(t):\n    n = int(input())\n    lst = input().split()\n    var = len(set(lst))\n    for k in range(1, n + 1):\n        if k <= var:\n            print(var, end=' ')\n        else:\n            print(k, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    c = set(map(int, input().split()))\n    print(*(max(i, len(c)) for i in range(1, n + 1)))", "t = int(input())\nfor zz in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = len(list(set(l)))\n    l1 = []\n    for i in range(n):\n        if i < p:\n            l1.append(p)\n        else:\n            p += 1\n            l1.append(p)\n    print(*l1)", "import sys\nimport math\nttime = int(input())\nfor ccount in range(ttime):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = len(set(a))\n    for i in range(1, n + 1):\n        sys.stdout.write(str(max(i, cnt)) + ' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    s = set(x)\n    k = len(s)\n    for i in range(1, n + 1):\n        if i <= k:\n            print(k, end=' ')\n        else:\n            print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = set(map(int, input().split()))\n    k = len(arr)\n    ans = [k] * k + [k + i for i in range(1, n - k + 1)]\n    print(*ans)", "for t in range(int(input())):\n    p = int(input())\n    list1 = []\n    o = list(map(int, input().split()))\n    o1 = set(o)\n    for i in range(len(o1)):\n        list1.append(len(o1))\n    for i in range(len(o1), len(o)):\n        list1.append(i + 1)\n    print(*list1)", "for _ in range(int(input())):\n    k = int(input())\n    n = list(map(int, input().split()))\n    s = set(n)\n    sl = len(s)\n    ans = [sl for i in range(sl)]\n    for i in range(1, k - sl + 1):\n        ans.append(sl + i)\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    size = len(set(arr))\n    for i in range(1, n + 1):\n        if i <= size:\n            print(size, end=' ')\n        else:\n            print(i, end=' ')\n    print('\\r')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    x = len(set(a))\n    ans = [x for i in range(x)]\n    for i in range(x + 1, n + 1):\n        ans.append(i)\n    print(*ans)"]