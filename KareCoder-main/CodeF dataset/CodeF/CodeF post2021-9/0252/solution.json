["import sys\n\ndef solve():\n    input = sys.stdin.readline\n    (s1, s2) = input().split()\n    for i in range(len(s1) - 1, -1, -1):\n        if len(s2) == 0 or (s1[i] in s2 and s2[-1] != s1[i]):\n            break\n        if s1[i] in s2 and s2[-1] == s1[i]:\n            s2 = s2[:-1]\n    if len(s2) == 0:\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    if b[x] == ' ':\n        print('YES')\n        continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "from os import error\nimport sys\ninput = sys.stdin.readline\nDEBUG = False\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve(start, tgt):\n    start = start[::-1]\n    tgt = tgt[::-1]\n    (i, j) = (0, 0)\n    collected = set()\n    while i < len(tgt) and j < len(start):\n        if tgt[i] in collected:\n            if DEBUG:\n                print(f\"\\tWe've seen that character: {tgt[i]} at {collected}\")\n            return 'NO'\n        while j < len(start) and tgt[i] != start[j]:\n            collected.add(start[j])\n            j += 1\n        if DEBUG:\n            print(f'\\tRemoving: {tgt[i]} at {collected}')\n        if tgt[i] in collected:\n            collected.remove(tgt[i])\n        if j < len(start):\n            i += 1\n            j += 1\n    if i == len(tgt):\n        return 'YES'\n    if DEBUG:\n        print(f'\\tfinishing outside?')\n    return 'NO'\nN = inp()\nfor i in range(N):\n    s = input().strip('\\n')\n    (s, t) = s.split(' ')\n    result = solve(s, t)\n    print(result)", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "def verify_word_possibility(s, t):\n    letter_position = 0\n    for letter in t:\n        try:\n            new_letter_position = s.index(letter)\n            if not isinstance(new_letter_position, int) or new_letter_position < letter_position:\n                print('NO')\n                return\n            s.pop(new_letter_position)\n            letter_position = new_letter_position\n        except ValueError:\n            print('NO')\n            return\n    print('YES')\n    return\nn = int(input())\nfor i in range(n):\n    (s, t) = list(input().split())\n    s = list(s)\n    s.reverse()\n    t = list(t)\n    t.reverse()\n    verify_word_possibility(s, t)", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "n = int(input())\nans = []\nfor i in range(n):\n    (str1, str2) = map(str, input().split())\n    k = len(str1) - 1\n    fl1 = 0\n    for j in range(len(str2) - 1, -1, -1):\n        str3 = str2[0:j]\n        let = str2[j]\n        fl = 0\n        while k >= 0:\n            if str1[k] in str3 and str1[k] != let:\n                fl = 0\n                break\n            if str1[k] == let:\n                fl = 1\n                k -= 1\n                break\n            else:\n                k -= 1\n        if fl == 0:\n            ans.append('NO')\n            fl1 = 1\n            break\n    if fl1 == 0:\n        ans.append('YES')\nfor i in range(n):\n    print(ans[i])", "def main():\n    size = int(input())\n    lines = []\n    for i in range(size):\n        lines.append(input().split(' ')[:2])\n    for (word, output) in lines:\n        letters_left = len(output)\n        j = len(word) - 1\n        forbidden_words = set(output[:letters_left - 1])\n        next_letter = output[letters_left - 1]\n        while letters_left != 0:\n            if word[j] == next_letter:\n                letters_left -= 1\n                forbidden_words = set(output[:letters_left - 1])\n                next_letter = output[letters_left - 1]\n            elif word[j] in forbidden_words:\n                break\n            j -= 1\n            if j == -1:\n                break\n        if letters_left == 0:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "def calculate(k):\n    word = k.split(' ')[0]\n    sollution = k.split(' ')[1]\n    word = word[::-1]\n    sollution = sollution[::-1]\n    length = len(word) - 1\n    if sollution[0] not in word:\n        return 'NO'\n    temp = length - word.index(sollution[0])\n    for i in sollution:\n        if i not in word:\n            return 'NO'\n        sth = length - word.index(i)\n        word = word[:word.index(i)] + word[word.index(i) + 1:]\n        if sth > temp:\n            return 'NO'\n        temp = sth\n    return 'YES'\n\ndef main():\n    answers = []\n    t = int(input())\n    for i in range(t):\n        k = input()\n        answers.append(calculate(k))\n    for i in answers:\n        print(i)\nmain()", "def deletive_editing(word, result):\n    if len(result) > len(word):\n        return 'NO'\n    (word_dicc, result_dicc) = ({}, {})\n    for char in word:\n        word_dicc[char] = word_dicc.get(char, 0) + 1\n    for char in result:\n        if char not in word_dicc:\n            return 'NO'\n        result_dicc[char] = result_dicc.get(char, 0) + 1\n    new_string = list(word)\n    for (index, char) in enumerate(word):\n        if char not in result_dicc:\n            new_string[index] = ''\n        elif word_dicc[char] > result_dicc[char]:\n            new_string[index] = ''\n            word_dicc[char] -= 1\n    return 'YES' if result == ''.join(new_string) else 'NO'\n\ndef generator():\n    tests = []\n    times = int(input())\n    while times > 0:\n        (word, result) = input().split(' ')\n        tests.append((word, result))\n        times -= 1\n    return tests\nfor (i, j) in generator():\n    print(deletive_editing(i, j))", "def solve(first, second):\n    positions = set()\n    idx = len(first) - 1\n    for ch in reversed(second):\n        while idx >= 0 and first[idx] != ch:\n            idx -= 1\n        if idx >= 0:\n            positions.add(idx)\n            idx -= 1\n        else:\n            return False\n    used_chars = set()\n    for (idx, ch) in enumerate(first):\n        if idx in positions:\n            used_chars.add(ch)\n        elif ch in used_chars:\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    words = []\n    for i in range(n):\n        (first, second) = input().split()\n        print('YES' if solve(first, second) else 'NO')\nmain()", "import sys\ninput = sys.stdin.readline\nans = 'YES'\nfor i in range(int(input())):\n    (a, b) = input()[:-1][::-1].split()\n    c = list(a)\n    d = ''\n    for j in range(len(b)):\n        if b[j] in c:\n            d += b[j]\n            c.remove(b[j])\n    if d == a:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "def verify_word_possibility(s, t):\n    letter_position = 0\n    for letter in t:\n        try:\n            new_letter_position = s.index(letter)\n            if not isinstance(new_letter_position, int) or new_letter_position < letter_position:\n                print('NO')\n                return\n            s.pop(new_letter_position)\n            letter_position = new_letter_position\n        except ValueError:\n            print('NO')\n            return\n    print('YES')\n    return\nn = int(input())\nfor i in range(n):\n    (s, t) = list(input().split())\n    s = list(s)\n    s.reverse()\n    t = list(t)\n    t.reverse()\n    verify_word_possibility(s, t)", "t = int(input())\nfor _ in range(t):\n    (s, t) = input().split()\n    (x, t) = (len(t), ' ' + t)\n    for i in s[::-1]:\n        if i == t[x]:\n            x -= 1\n        elif i in t[:x]:\n            break\n    else:\n        if t[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    (x, b) = (len(b), ' ' + b)\n    for i in a[::-1]:\n        if i == b[x]:\n            x -= 1\n        elif i in b[:x]:\n            break\n    else:\n        if b[x] == ' ':\n            print('YES')\n            continue\n    print('NO')", "cases = int(input(''))\nto_solve = []\nfor case in range(0, cases):\n    (ori, new) = input('').split(' ')\n    to_solve.append((ori, new))\nfor (ori, new) in to_solve:\n    ori_copy = list(ori)\n    new_copy = list(new)\n    for letter in new_copy:\n        try:\n            ori_copy.remove(letter)\n        except:\n            pass\n    list_to_remove = list(ori_copy)\n    new_ori = list(ori)\n    for letter in list_to_remove:\n        try:\n            new_ori.remove(letter)\n        except:\n            pass\n    if ''.join(new_ori) == new:\n        print('YES')\n    else:\n        print('NO')", "cases = int(input(''))\nto_solve = []\nfor case in range(0, cases):\n    (ori, new) = input('').split(' ')\n    to_solve.append((ori, new))\nfor (ori, new) in to_solve:\n    ori_copy = list(ori)\n    new_copy = list(new)\n    for letter in new_copy:\n        try:\n            ori_copy.remove(letter)\n        except:\n            pass\n    list_to_remove = list(ori_copy)\n    new_ori = list(ori)\n    for letter in list_to_remove:\n        try:\n            new_ori.remove(letter)\n        except:\n            pass\n    if ''.join(new_ori) == new:\n        print('YES')\n    else:\n        print('NO')", "def solv(s, t):\n    d = {}\n    for i in range(len(s)):\n        c = s[i]\n        if c not in d:\n            d[c] = []\n        d[c].append(i)\n    p = 99\n    t = t[::-1]\n    for i in range(len(t)):\n        c = t[i]\n        if c not in d:\n            return 'NO'\n        if not len(d[c]):\n            return 'NO'\n        pp = d[c].pop()\n        if pp > p:\n            return 'NO'\n        p = pp\n    return 'YES'\nfor _ in range(int(input())):\n    (s, t) = input().split()\n    print(solv(s, t))", "def solve(beg: str, end: str):\n    to_remove = beg\n    res = beg\n    for e in end:\n        to_remove = to_remove.replace(e, '', 1)\n    for e in to_remove:\n        res = res.replace(e, '', 1)\n    if res == end:\n        return 'YES'\n    return 'NO'\n\ndef main():\n    t = int(input())\n    for x in range(t):\n        str = []\n        str = [s for s in input().split()]\n        print(solve(str[0], str[1]))\nmain()", "for _ in range(int(input())):\n    (main, sub) = map(str, input().split())\n    main1 = list(main[::-1])\n    l = []\n    broke = False\n    for i in sub[::-1]:\n        if i in main1:\n            l.append(main1.index(i))\n            main1.remove(i)\n        else:\n            broke = True\n            break\n    if broke == False:\n        l1 = l.copy()\n        l1.sort()\n        if l == l1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def solve_line(s: str):\n    s = s.split()\n    trash = list(s[0])\n    query = list(s[1])\n    detrash = True\n    trash_dict = {}\n    query_dict = {}\n    for char in query:\n        if char in query_dict:\n            query_dict[char] = query_dict[char] + 1\n        else:\n            query_dict[char] = 1\n    for char in trash:\n        if char in trash_dict:\n            trash_dict[char] = trash_dict[char] + 1\n        else:\n            trash_dict[char] = 1\n    for key in trash_dict:\n        if key in query_dict:\n            if trash_dict[key] - query_dict[key] != 0:\n                for i in range(trash_dict[key] - query_dict[key]):\n                    trash.remove(key)\n        else:\n            for i in range(trash_dict[key]):\n                trash.remove(key)\n    if trash == query:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    n = input('')\n    n = int(n)\n    answers = []\n    for i in range(n):\n        ln = input('')\n        answers.append(solve_line(ln))\n    for a in answers:\n        print(a)\nmain()", "cases = int(input(''))\nto_solve = []\nfor case in range(0, cases):\n    (ori, new) = input('').split(' ')\n    to_solve.append((ori, new))\nfor (ori, new) in to_solve:\n    ori_copy = list(ori)\n    new_copy = list(new)\n    for letter in new_copy:\n        try:\n            ori_copy.remove(letter)\n        except:\n            pass\n    list_to_remove = list(ori_copy)\n    new_ori = list(ori)\n    for letter in list_to_remove:\n        try:\n            new_ori.remove(letter)\n        except:\n            pass\n    if ''.join(new_ori) == new:\n        print('YES')\n    else:\n        print('NO')", "c = int(input())\nfor i in range(c):\n    s = input().split()\n    s1 = list(s[0])\n    s2 = list(s[1])\n    s1.reverse()\n    s2.reverse()\n    cc = 0\n    rec = []\n    key = False\n    kk = False\n    for b in s1:\n        if b != s2[cc] and b in s2[cc + 1:]:\n            print('NO')\n            kk = True\n            key = True\n            break\n        if b == s2[cc]:\n            rec.append(b)\n            cc += 1\n            if cc == len(s2):\n                print('YES')\n                key = True\n                break\n        if key:\n            break\n    if len(rec) < len(s2) and (not kk):\n        print('NO')", "def canget(s, t):\n    n = len(s)\n    m = len(t)\n    indices = [[] for _ in range(26)]\n    for i in range(n):\n        indices[ord(s[i]) - ord('A')].append(i)\n    pre = n\n    for i in range(m - 1, -1, -1):\n        od = ord(t[i]) - ord('A')\n        if not indices[od]:\n            return False\n        idx = indices[od].pop()\n        if idx >= pre:\n            return False\n        else:\n            pre = idx\n    return True\nt = int(input())\nfor _ in range(t):\n    (s, t) = input().split()\n    if canget(s, t):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\n\ndef test_case():\n    line = input().split(' ')\n    s = line[0]\n    t = line[1]\n    dicS = {}\n    dicT = {}\n    for j in s:\n        dicS[j] = dicS.get(j, 0) + 1\n    for j in t:\n        if j not in dicS:\n            return 'NO'\n        dicT[j] = dicT.get(j, 0) + 1\n    for m in dicS:\n        if m not in dicT:\n            s = s.replace(m, '')\n        else:\n            difference = dicS[m] - dicT[m]\n            if difference < 0:\n                return 'NO'\n            elif difference > 0:\n                s = s.replace(m, '', difference)\n    if s == t:\n        return 'YES'\n    else:\n        return 'NO'\nfor i in range(n):\n    print(test_case())", "n = int(input())\ni = 0\nwhile i < n:\n    (word1, word2) = input().split()\n    word2 = word2[::-1]\n    Ans = 'YES'\n    LastIndex0 = len(word1) + 1\n    for letter in word2:\n        if letter in word1:\n            LastIndex1 = word1.rindex(letter)\n            word1 = word1[:LastIndex1] + ' ' + word1[LastIndex1 + 1:]\n            if LastIndex0 < LastIndex1:\n                Ans = 'NO'\n                print(Ans)\n                break\n            LastIndex0 = LastIndex1\n        else:\n            Ans = 'NO'\n            print(Ans)\n            break\n    if Ans == 'YES':\n        print('YES')\n    i += 1", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b) = input().split()\n    a1 = list(a)\n    b1 = list(b)\n    a1.reverse()\n    b1.reverse()\n    t = 0\n    check = 0\n    for i in range(len(b1)):\n        if b1[i] not in a1:\n            check = 1\n            break\n        elif a1.index(b1[i]) >= t:\n            t = a1.index(b1[i])\n            a1[t] = 8\n        else:\n            check = 1\n            break\n    if check == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (s, t) = input().split()\n    check = ''\n    for ch in s[::-1]:\n        if ch in t and check.count(ch) < t.count(ch):\n            check += ch\n    if check == t[::-1]:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\n\ndef deletive_edit(string, edited):\n    for i in string:\n        if i not in edited:\n            string = string.replace(i, '')\n        if string.count(i) != edited.count(i):\n            s = string.count(i)\n            t = edited.count(i)\n            string = string.replace(i, '', s - t)\n    if string == edited:\n        return 'YES'\n    else:\n        return 'NO'\nresults = []\nfor i in range(n):\n    (string, edited) = input().split()\n    results.append(deletive_edit(string, edited))\nfor i in results:\n    print(i)", "final = []\ntest = eval(input())\nfor iteration in range(test):\n    (x, y) = map(str, input().split(' '))\n    flag = 0\n    if len(y) > len(x):\n        final.append('NO')\n        continue\n    for ch1 in y:\n        if x.count(ch1) < y.count(ch1):\n            final.append('NO')\n            flag = 1\n            break\n    if flag == 1:\n        continue\n    for ch2 in x:\n        if ch2 not in y:\n            x = x.replace(ch2, '')\n    i = 0\n    while len(x) != len(y):\n        x = x.replace(y[i], '', x.count(y[i]) - y.count(y[i]))\n        i += 1\n    if x == y:\n        final.append('YES')\n    else:\n        final.append('NO')\nfor item in final:\n    print(item)", "from collections import defaultdict\n\ndef solve(n):\n    string = n[0]\n    target = n[1]\n    countStr = defaultdict(int)\n    countTar = defaultdict(int)\n    for i in target:\n        countStr[i] = string.count(i)\n        countTar[i] = target.count(i)\n    for i in countStr:\n        dif = countStr[i] - countTar[i]\n        if dif < 0:\n            return 'NO'\n        string = string.replace(i, '', dif)\n    index = 0\n    for i in string:\n        if i in target:\n            if i == target[index]:\n                index += 1\n            else:\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor T in range(t):\n    n = input().split(' ')\n    print(solve(n))", "tests = int(input())\n\ndef something(given, aim):\n    aim = aim[::-1]\n    given = given[::-1]\n    place = 0\n    for a in aim:\n        ending = given[0:place]\n        if ending.find(a) > -1:\n            return False\n        if given[place:].find(a) == -1:\n            return False\n        place = place + given[place:].find(a)\n        given = given[0:place] + given[place + 1:]\n    return True\nfor _ in range(tests):\n    (given, aim) = input().split()\n    print('YES' if something(given, aim) else 'NO')", "def solution(s1, s2):\n    list_s1 = list(s1)\n    list_s1.reverse()\n    list_s2 = list(s2)\n    final_compiled = []\n    for i in range(0, len(list_s1)):\n        if len(list_s2) == 0:\n            break\n        elif list_s1[i] in list_s2:\n            final_compiled.append(list_s1[i])\n            list_s2.remove(list_s1[i])\n    if len(list_s2) != 0:\n        print('NO')\n    else:\n        final_compiled.reverse()\n        s3 = ''.join(final_compiled)\n        if s3 == s2:\n            print('YES')\n        else:\n            print('NO')\nn = int(input())\nfor i in range(0, n):\n    testcase = input().split()\n    (s1, s2) = (testcase[0], testcase[1])\n    solution(s1, s2)", "n = int(input())\nfor i in range(n):\n    (s, a) = map(str, input().split())\n    arr = list(s)\n    brr = list(a)\n    arr.reverse()\n    brr.reverse()\n    j = 0\n    k = 0\n    while j < len(s):\n        if arr[j] == brr[k]:\n            brr[k] = 1\n            j += 1\n            k += 1\n        else:\n            if arr[j] in brr:\n                k = 0\n                break\n            j += 1\n        if k == len(brr):\n            break\n    if k == len(brr):\n        print('YES')\n    else:\n        print('NO')", "num = int(input())\nfor _ in range(num):\n    (s, t) = input().split()\n    check = ''\n    for ch in s[::-1]:\n        if ch in t and check.count(ch) < t.count(ch):\n            check += ch\n    if check == t[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b) = input().split()\n    count = []\n    for i in range(30):\n        count.append(0)\n    for c in a:\n        n = ord(c) - ord('A')\n        count[n] += 1\n    for c in b:\n        n = ord(c) - ord('A')\n        count[n] -= 1\n        if count[n] < 0:\n            print('NO')\n            return\n    res = ''\n    for c in a:\n        n = ord(c) - ord('A')\n        if count[n] == 0:\n            res += c\n        else:\n            count[n] -= 1\n    if res == b:\n        print('YES')\n    else:\n        print('NO')\nN = int(input())\nfor test in range(N):\n    solve()", "n = int(input())\nfor k in range(n):\n    words = input().split(' ')\n    (s, t) = words\n    sett = set(t)\n    sss = ''\n    for ch in s[::-1]:\n        if sss.count(ch) < t.count(ch):\n            sss = ch + sss\n    if sss == t:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, t) = map(str, input().strip().split())\n    (i, j) = (len(s) - 1, len(t) - 1)\n    ar = []\n    while i > -1 and j > -1:\n        if s[i] == t[j]:\n            ar.append(i)\n            j -= 1\n        i -= 1\n    if len(ar) != len(t):\n        print('NO')\n    else:\n        ar.reverse()\n        for i in range(len(ar)):\n            if s[ar[i]:].count(t[i]) > t[i:].count(t[i]):\n                print('NO')\n                break\n        else:\n            print('YES')", "from collections import Counter\nT = int(input())\nfor i in range(T):\n    (a, b) = input().split()\n    l = []\n    d = Counter(b)\n    for c in reversed(a):\n        if d[c]:\n            l.append(c)\n            d[c] -= 1\n    l.reverse()\n    s = ''.join(l)\n    print('YES' if s == b else 'NO')", "t = int(input())\n\ndef func(a, b):\n    d = []\n    a = a[::-1]\n    b = b[::-1]\n    j = []\n    for i in a:\n        j.append(i)\n    a = j\n    for i in range(len(b)):\n        if a.count(b[i]) == 0:\n            return 'NO'\n        k = a.index(b[i])\n        d.append(k)\n        a[k] = ''\n    f = d.copy()\n    f.sort()\n    if d == f:\n        return 'YES'\n    return 'NO'\nfor i in range(t):\n    (a, b) = map(str, input().split())\n    print(func(a, b))", "for _ in range(int(input())):\n    (x, y) = input().split()\n    d = {i: [-1] for i in y}\n    for i in range(len(x)):\n        if x[i] in y:\n            d[x[i]].append(i)\n    p = 100\n    z = 'YES'\n    for i in y[::-1]:\n        c = d[i][-1]\n        if c > p or c < 0:\n            z = 'NO'\n            break\n        p = c\n        d[i].pop()\n    print(z)", "for _ in range(int(input())):\n    (s, t) = input().split()\n    n = len(s)\n    m = len(t)\n    j = m - 1\n    flag = True\n    c0 = [True] * 26\n    for i in range(n - 1, -1, -1):\n        if s[i] == t[j]:\n            if c0[ord(s[i]) - ord('A')] == False:\n                flag = False\n                break\n            j -= 1\n        else:\n            c0[ord(s[i]) - ord('A')] = False\n        if j < 0:\n            break\n    if j >= 0:\n        flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    (s, t) = [x for x in input().split()]\n    flag = 1\n    abc_dict = {}\n    for i in list(map(chr, range(65, 91))):\n        abc_dict[i] = []\n    for (idx, value) in enumerate(s):\n        abc_dict[value].append(idx)\n    curr_idx = len(s) + 1\n    t = list(t)\n    t.reverse()\n    for i in t:\n        if abc_dict[i] == []:\n            flag = 0\n            break\n        c = abc_dict[i].pop()\n        if c <= curr_idx:\n            curr_idx = c\n        else:\n            flag = 0\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    for i in a:\n        if i not in b:\n            a = a.replace(i, '', 1)\n    for i in a:\n        a = a.replace(i, '', abs(b.count(i) - a.count(i)))\n    print('YES' if a == b else 'NO')", "t = int(input())\nfor i in range(t):\n    (s, t) = input().split(' ')\n    f = [True for x in range(26)]\n    flag = True\n    idx1 = len(s) - 1\n    idx2 = len(t) - 1\n    while idx1 >= 0:\n        if idx2 == -1 or s[idx1] != t[idx2]:\n            f[ord(s[idx1]) - 65] = False\n            idx1 -= 1\n            continue\n        elif s[idx1] == t[idx2] and f[ord(s[idx1]) - 65] == False:\n            flag = False\n            break\n        idx1 -= 1\n        idx2 -= 1\n    if idx2 == -1 and flag:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b) = input().split()\n    count = []\n    for i in range(30):\n        count.append(0)\n    for d in a:\n        n = ord(d) - ord('A')\n        count[n] += 1\n    for d in b:\n        n = ord(d) - ord('A')\n        count[n] -= 1\n        if count[n] < 0:\n            print('NO')\n            return\n    res = ''\n    for d in a:\n        n = ord(d) - ord('A')\n        if count[n] == 0:\n            res += d\n        else:\n            count[n] -= 1\n    if res == b:\n        print('YES')\n    else:\n        print('NO')\nN = int(input())\nfor test in range(N):\n    solve()", "n = int(input())\nfor i in range(n):\n    arr = input().split()\n    arr1 = arr[0]\n    arr2 = arr[1]\n    for i in arr1:\n        if i not in arr2:\n            arr1 = arr1.replace(i, '', 1)\n    for j in arr1:\n        arr1 = arr1.replace(j, '', abs(arr2.count(j) - arr1.count(j)))\n    print('YES' if arr1 == arr2 else 'NO')", "def runner(start_word: str, target_word: str):\n    if len(target_word) > len(start_word):\n        return 'NO'\n    for (index, (a, b)) in enumerate(zip(target_word, start_word)):\n        if a != b:\n            bad_char = b\n            break\n    else:\n        if len(target_word) == len(start_word):\n            return 'YES'\n        bad_char = start_word[index + 1]\n    index = start_word.find(bad_char)\n    return runner(start_word[:index] + start_word[index + 1:], target_word)\n\ndef read_input():\n    n = int(input())\n    for _ in range(n):\n        (start, target) = input().split(' ')\n        print(runner(start, target))\nread_input()", "for _ in range(int(input())):\n    (s, t) = input().split()\n    for i in s:\n        if i not in t:\n            s = s.replace(i, '', 1)\n    for i in s:\n        s = s.replace(i, '', abs(t.count(i) - s.count(i)))\n    print('YES' if s == t else 'NO')", "n = int(input())\nfor i in range(n):\n    entrada = input().split()\n    letters = {}\n    for i in entrada[1]:\n        if not i in letters:\n            letters[i] = 1\n        else:\n            letters[i] += 1\n    new_word = ''\n    for i in range(len(entrada[0]) - 1, -1, -1):\n        if entrada[0][i] in letters and letters[entrada[0][i]] > 0:\n            letters[entrada[0][i]] -= 1\n            new_word = entrada[0][i] + new_word\n    if entrada[1] == new_word:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    (s, t) = [x for x in input().split()]\n    flag = 1\n    abc_dict = {}\n    for i in list(map(chr, range(65, 91))):\n        abc_dict[i] = []\n    for (idx, value) in enumerate(s):\n        abc_dict[value].append(idx)\n    curr_idx = len(s) + 1\n    t = list(t)\n    t.reverse()\n    for i in t:\n        if abc_dict[i] == []:\n            flag = 0\n            break\n        c = abc_dict[i].pop()\n        if c <= curr_idx:\n            curr_idx = c\n        else:\n            flag = 0\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    for i in a:\n        if i not in b:\n            a = a.replace(i, '', 1)\n    for i in a:\n        a = a.replace(i, '', abs(b.count(i) - a.count(i)))\n    print('YES' if a == b else 'NO')", "def deletiveEditing(s, t):\n    if s == t:\n        return 'YES'\n    (d1, d2) = (dict(), dict())\n    for i in range(len(t)):\n        if t[i] in d1.keys():\n            d1[t[i]] += 1\n        else:\n            d1[t[i]] = 1\n    for i in range(len(s)):\n        if s[i] in d2.keys():\n            d2[s[i]] += 1\n        else:\n            d2[s[i]] = 1\n    for x in d1.keys():\n        if x not in d2.keys():\n            return 'NO'\n        elif d1[x] > d2[x]:\n            return 'NO'\n    for x in d2.keys():\n        if x not in d1.keys():\n            s = s.replace(x, '', d2[x])\n        elif d2[x] != d1[x]:\n            s = s.replace(x, '', d2[x] - d1[x])\n    if s == t:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    inp = input().split()\n    (s, t) = (inp[0], inp[1])\n    print(deletiveEditing(s, t))", "test = int(input())\nfor i in range(test):\n    (string, req) = str(input()).split(' ')\n    our_want = []\n    for i in string:\n        if i in req:\n            our_want.append(i)\n    for i in set(req):\n        for j in range(our_want.count(i) - req.count(i)):\n            our_want.remove(i)\n    if our_want == list(req):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = input().split()\n    for i in a:\n        if i not in b:\n            a = a.replace(i, '', 1)\n    for i in a:\n        a = a.replace(i, '', abs(b.count(i) - a.count(i)))\n    print('YES' if a == b else 'NO')", "test = int(input())\nfor i in range(test):\n    (string, req) = str(input()).split(' ')\n    our_want = []\n    for i in string:\n        if i in req:\n            our_want.append(i)\n    for i in set(req):\n        for j in range(our_want.count(i) - req.count(i)):\n            our_want.remove(i)\n    if our_want == list(req):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, s1) = input().split()\n    d = dict()\n    for i in range(len(s)):\n        try:\n            d[s[i]].append(i)\n        except KeyError:\n            d[s[i]] = [i]\n    ans = []\n    ok = 1\n    for i in s1[::-1]:\n        try:\n            ans.append(d[i][-1])\n            d[i].pop(-1)\n        except KeyError:\n            ok = 0\n            break\n        except IndexError:\n            ok = 0\n            break\n    if not ok:\n        print('NO')\n    elif ans == sorted(ans, reverse=True):\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (s, t) = input().split()\n    d = dict()\n    for i in range(len(s)):\n        try:\n            d[s[i]].append(i)\n        except KeyError:\n            d[s[i]] = [i]\n    res = []\n    ok = True\n    for c in t[::-1]:\n        try:\n            res.append(d[c][-1])\n            d[c].pop(-1)\n        except KeyError:\n            ok = False\n            break\n        except IndexError:\n            ok = False\n            break\n    if not ok:\n        print('NO')\n    elif res == sorted(res, reverse=True):\n        print('YES')\n    else:\n        print('NO')", "test = int(input())\nfor i in range(test):\n    (string, req) = str(input()).split(' ')\n    our_want = []\n    for i in string:\n        if i in req:\n            our_want.append(i)\n    for i in set(req):\n        for j in range(our_want.count(i) - req.count(i)):\n            our_want.remove(i)\n    if our_want == list(req):\n        print('YES')\n    else:\n        print('NO')", "for inh in range(int(input())):\n    (s, t) = map(str, input().split())\n    (n, m) = (len(s), len(t))\n    occura_req = {}\n    occura_hap = {}\n    for i in range(0, m):\n        occura_req[t[i]] = 0\n        occura_hap[t[i]] = 0\n    j = m - 1\n    ans = True\n    for i in range(n - 1, -1, -1):\n        if s[i] == t[j]:\n            if occura_hap[s[i]] > occura_req[s[i]]:\n                ans = False\n            j -= 1\n            occura_req[s[i]] += 1\n        if j < 0:\n            break\n        if s[i] in occura_req:\n            occura_hap[s[i]] += 1\n    if j == -1 and ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    (s, p) = map(str, input().split())\n    for i in s:\n        if i not in p:\n            s = s.replace(i, '', 1)\n    for i in s:\n        s = s.replace(i, '', abs(p.count(i) - s.count(i)))\n    if s == p:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (s, sub) = map(str, input().split())\n    l = len(sub)\n    n = len(s)\n    f = 1\n    for i in range(l):\n        a = s.find(sub[i])\n        if a == -1:\n            f = 0\n            break\n    j = 0\n    ans = ''\n    if f == 1:\n        for i in range(len(s)):\n            if sub.find(s[i]) != -1:\n                ans = ans + s[i]\n        for i in range(len(sub)):\n            countst = ans.count(sub[i])\n            countsub = sub.count(sub[i])\n            ans = ans.replace(sub[i], '_', countst - countsub)\n        ans = ans.replace('_', '', ans.count('_'))\n        if ans == sub:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (str1, str2) = map(str, input().split())\n    len1 = len(str2)\n    l1 = list(str1)\n    l1.reverse()\n    l2 = list(str2)\n    l2.reverse()\n    x = len(str1)\n    c = -1\n    ans = True\n    for j in l2:\n        ans2 = False\n        for k in range(x):\n            if l1[k] == j:\n                l1[k] = 0\n                if k > c:\n                    c = k\n                    ans2 = True\n                    break\n                else:\n                    break\n        if ans2 == False:\n            ans = False\n            break\n    if ans == True:\n        print('YES')\n    else:\n        print('NO')", "from sys import breakpointhook\nN = int(input())\nfor n in range(N):\n    (A, B) = input().split(' ')\n    (ar, br) = (A[::-1], B[::-1])\n    pos = [-1] * len(B)\n    (i, j) = (0, 0)\n    while i < len(A) and j < len(br):\n        if ar[i] == br[j]:\n            pos[j] = len(A) - i - 1\n            j += 1\n        i += 1\n    possible = True\n    A = list(A)\n    for p in pos:\n        if A[p] in A[p + 1:]:\n            possible = False\n            break\n        else:\n            A[p] = '@'\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfrom collections import Counter\nfor _ in range(n):\n    words = [i for i in input().split(' ')]\n    j = 0\n    flag = False\n    word = ''\n    first = {k[0]: k[1] for k in Counter(words[0]).items()}\n    second = {k[0]: k[1] for k in Counter(words[1]).items()}\n    for letter in words[0]:\n        if first[letter] > second.get(letter, -1):\n            first[letter] -= 1\n        else:\n            word += letter\n    if word.__eq__(words[1]):\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\n\ndef dele(s, c):\n    return s[:s.index(c)] + s[s.index(c) + 1:]\nfor _ in range(int(input())):\n    (s, a) = input().split()\n    d = defaultdict(lambda : 0)\n    for i in s:\n        d[i] += 1\n    if not all((i in s for i in a)):\n        print('NO')\n        continue\n    for i in a:\n        d[i] -= 1\n    for (key, value) in d.items():\n        for _ in range(value):\n            s = dele(s, key)\n    if s == a:\n        print('YES')\n    else:\n        print('NO')", "def find(string, char, n):\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == char:\n            if n == 1:\n                return i\n            n -= 1\n    return -1\n\ndef func(s, t):\n    arr = []\n    is_used = []\n    for i in t:\n        if i not in s:\n            return 'NO'\n        else:\n            if i in is_used:\n                n = is_used.count(i)\n                index = find(s, i, n + 1)\n                if index == -1:\n                    return 'NO'\n                arr.append((i, index))\n            else:\n                index = find(s, i, 1)\n                if index == -1:\n                    return 'NO'\n                arr.append((i, index))\n            is_used.append(i)\n    arr.sort(key=lambda val: val[1])\n    return 'YES' if ''.join(list(map(lambda x: x[0], arr))) == t else 'NO'\nfor i in range(int(input())):\n    print(func(*input().split()))", "def find(string, char, n):\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == char:\n            if n == 1:\n                return i\n            n -= 1\n    return -1\n\ndef func(s, t):\n    arr = []\n    is_used = []\n    for i in t:\n        if i not in s:\n            return 'NO'\n        else:\n            if i in is_used:\n                n = is_used.count(i)\n                index = find(s, i, n + 1)\n                if index == -1:\n                    return 'NO'\n                arr.append((i, index))\n            else:\n                index = find(s, i, 1)\n                if index == -1:\n                    return 'NO'\n                arr.append((i, index))\n            is_used.append(i)\n    arr.sort(key=lambda val: val[1])\n    return 'YES' if ''.join(list(map(lambda x: x[0], arr))) == t else 'NO'\nfor i in range(int(input())):\n    print(func(*input().split()))", "t = int(input())\n\ndef solve():\n    (s1, s2) = input().split(' ')\n    mp1 = []\n    for i in range(26):\n        mp1.append([])\n    mp2 = [0] * 26\n    for i in range(len(s1)):\n        mp1[ord(s1[i]) - ord('A')].append(i)\n    for i in range(len(s2)):\n        mp2[ord(s2[i]) - ord('A')] += 1\n    v = []\n    for i in range(26):\n        if mp2[i] > len(mp1[i]):\n            print('NO')\n            return\n    for i in range(len(s2)):\n        v.append(mp1[ord(s2[i]) - ord('A')][-1 * mp2[ord(s2[i]) - ord('A')]])\n        mp2[ord(s2[i]) - ord('A')] -= 1\n    for i in range(len(v) - 1):\n        if v[i] > v[i + 1]:\n            print('NO')\n            return\n    print('YES')\n    return\nwhile t > 0:\n    t -= 1\n    solve()", "for _ in range(int(input())):\n    (s, t) = input().split()\n    d_s = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n    d_t = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n    l = list(s)\n    ans = 0\n    for i in s:\n        d_s[i] += 1\n    for j in t:\n        d_t[j] += 1\n    l_s = d_s.keys()\n    l_t = d_t.keys()\n    for i in l_t:\n        if d_t[i] == 0:\n            c = d_s[i]\n            while c > 0:\n                l.remove(i)\n                c -= 1\n        elif d_s[i] - d_t[i] >= 0:\n            c = d_s[i] - d_t[i]\n            while c > 0:\n                l.remove(i)\n                c -= 1\n        else:\n            continue\n    if l == list(t):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(0, int(input())):\n    (s, t) = input().split()\n    w = set(t)\n    r = s[::-1]\n    x = [a for a in s if a in w]\n    d = dict.fromkeys(x)\n    for i in range(0, len(x)):\n        if d[x[i]] is None:\n            d[x[i]] = [i]\n        else:\n            d[x[i]].append(i)\n    o = [''] * len(x)\n    for i in t:\n        if i not in d:\n            continue\n        if len(d[i]) < 1:\n            continue\n        o[d[i][-1]] = i\n        d[i].pop(-1)\n    v = [x for x in o if x != '']\n    print(['NO', 'YES'][''.join(v) == t])", "for i in range(int(input())):\n    (a, b) = input().split()\n    c = []\n    for i in a:\n        if i not in c:\n            c.append(i)\n            temp = a.count(i) - b.count(i)\n            if temp < 0:\n                break\n            else:\n                for j in range(temp):\n                    y = a.find(i)\n                    a = a[:y] + a[y + 1:]\n    if a == b:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input(''))):\n    (x, y) = input().split()\n    lx = []\n    for i in x:\n        lx.append(i)\n    for i in range(len(x)):\n        if x[i] not in y:\n            lx.remove(x[i])\n        elif x[i] in y:\n            if x[i + 1:].count(x[i]) >= y.count(x[i]):\n                lx.remove(x[i])\n    s1 = ''\n    for i in lx:\n        s1 += i\n    if s1 == y:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, t) = input().split()\n    s = [i for i in s]\n    t = [i for i in t]\n    u = []\n    for i in s:\n        if i in t:\n            u.append(i)\n    for i in t:\n        while u.count(i) > t.count(i):\n            u.remove(i)\n    if t == u:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, t) = input().split()\n    s = [i for i in s]\n    t = [i for i in t]\n    u = []\n    for i in s:\n        if i in t:\n            u.append(i)\n    for i in t:\n        while u.count(i) > t.count(i):\n            u.remove(i)\n    if t == u:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (s, t) = input().split()\n    S = [i for i in s]\n    T = [j for j in t]\n    A = []\n    for ele in S:\n        if ele in T:\n            A.append(ele)\n    for ele in T:\n        while A.count(ele) > T.count(ele):\n            A.remove(ele)\n    if A == T:\n        print('YES')\n    else:\n        print('NO')", "def removeFirstOccurrence(string, char):\n    i = string.index(char)\n    return string[:i] + string[i + 1:]\n\ndef isPossible(s, t):\n    index = ''.join(sorted(set(s), key=s.index))\n    counts = []\n    countt = []\n    for i in range(len(index)):\n        counts.append(s.count(index[i]))\n        countt.append(t.count(index[i]))\n        if countt[-1] > counts[-1]:\n            return False\n    for i in range(len(index)):\n        for j in range(counts[i] - countt[i]):\n            s = removeFirstOccurrence(s, index[i])\n    if s == t:\n        return True\n    return False\nn = int(input())\nfor i in range(n):\n    (s, t) = input().split()\n    if s == t or isPossible(s, t):\n        print('YES')\n    else:\n        print('NO')"]